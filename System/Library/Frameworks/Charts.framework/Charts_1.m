uint64_t sub_21F7BC648@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long double a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t result;
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  switch(a4)
  {
    case 0:
      sub_21F7E35B4(a1, (uint64_t)&v8, a3);
      goto LABEL_10;
    case 1:
      sub_21F7E3750(a1, (uint64_t)&v8, a3);
LABEL_10:
      sub_21F7BD978(&v8, a2, a5);
      swift_release();
      sub_21F76D5D8(v9);
      v11 = v10;
      return sub_21F7741D0((uint64_t)&v11);
    case 2:
      if (*(void *)&a3 < 2uLL)
      {
        sub_21F7741FC(a1, (uint64_t)&v8);
        goto LABEL_10;
      }
      if (*(void *)&a3 == 2)
      {
        sub_21F7E3450(a1, (uint64_t)&v8);
        goto LABEL_10;
      }
      break;
  }
  result = sub_21FA266E0();
  __break(1u);
  return result;
}

uint64_t sub_21F7BC748(uint64_t **a1, unint64_t a2, char a3)
{
  uint64_t v5 = **a1;
  uint64_t v6 = *a1[1];
  swift_retain();
  sub_21F7BC538(v5, v6, a2, a3, (void (*)(unsigned char *, uint64_t))sub_21F7BD818);

  return swift_release();
}

uint64_t sub_21F7BC7D4@<X0>(uint64_t **a1@<X0>, long double a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = **a1;
  uint64_t v8 = *a1[1];
  swift_bridgeObjectRetain();
  sub_21F7BC648(v7, v8, a2, a3, a4);

  return swift_bridgeObjectRelease();
}

uint64_t sub_21F7BC84C@<X0>(uint64_t **a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X8>)
{
  int v4 = a2;
  uint64_t v5 = a1[1];
  uint64_t v6 = **a1;
  uint64_t v8 = *v5;
  uint64_t v7 = v5[1];
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = v7;
  if (v4 == 1) {
    v10 = sub_21F7C1DFC;
  }
  else {
    v10 = sub_21F7C1DB0;
  }
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_21F7C1D2C;
  *(void *)(v11 + 24) = v9;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = v11;
  *(void *)a3 = sub_21F7C1DB8;
  *(void *)(a3 + 8) = v12;
  *(void *)(a3 + 48) = v6;
  *(void *)(a3 + 56) = 0;
  *(unsigned char *)(a3 + 64) = -1;
  *(void *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 24) = 1;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(_OWORD *)(a3 + 72) = xmmword_21FA28DF0;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 96) = 0;
  swift_retain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_21F7BC980@<X0>(uint64_t **a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X8>)
{
  int v4 = a2;
  uint64_t v5 = a1[1];
  uint64_t v6 = **a1;
  uint64_t v8 = *v5;
  uint64_t v7 = v5[1];
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = v7;
  if (v4 == 1) {
    v10 = sub_21F7C1CF8;
  }
  else {
    v10 = sub_21F7C1C98;
  }
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_21F7C1C5C;
  *(void *)(v11 + 24) = v9;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = v11;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)a3 = sub_21F7C1CCC;
  *(void *)(a3 + 8) = v12;
  *(void *)(a3 + 72) = v6;
  *(void *)(a3 + 80) = 0;
  *(unsigned char *)(a3 + 88) = -1;
  *(void *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 96) = xmmword_21FA28DF0;
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 120) = 0;
  swift_retain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_21F7BCAB4@<X0>(uint64_t **a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X8>)
{
  int v4 = a2;
  uint64_t v5 = a1[1];
  uint64_t v6 = **a1;
  uint64_t v8 = *v5;
  uint64_t v7 = v5[1];
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = v7;
  if (v4 == 1) {
    v10 = sub_21F7C1BF0;
  }
  else {
    v10 = sub_21F7C1B8C;
  }
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_21F7C1B28;
  *(void *)(v11 + 24) = v9;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = v11;
  *(void *)a3 = sub_21F7C1B94;
  *(void *)(a3 + 8) = v12;
  *(void *)(a3 + 72) = v6;
  *(void *)(a3 + 80) = 0;
  *(unsigned char *)(a3 + 88) = -1;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(void *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 96) = xmmword_21FA28DF0;
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 120) = 0;
  swift_retain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_21F7BCBE8@<X0>(uint64_t **a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X8>)
{
  int v4 = a2;
  uint64_t v5 = a1[1];
  uint64_t v6 = **a1;
  uint64_t v8 = *v5;
  uint64_t v7 = v5[1];
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = v7;
  if (v4 == 1) {
    v10 = sub_21F7C1AD4;
  }
  else {
    v10 = sub_21F7C1A88;
  }
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_21F7C1A3C;
  *(void *)(v11 + 24) = v9;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = v11;
  *(void *)a3 = sub_21F7C1A90;
  *(void *)(a3 + 8) = v12;
  *(void *)(a3 + 40) = v6;
  *(void *)(a3 + 48) = 0;
  *(unsigned char *)(a3 + 56) = -1;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 16) = 0;
  *(_OWORD *)(a3 + 64) = xmmword_21FA28DF0;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = 0;
  swift_retain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_21F7BCD14(uint64_t **a1, uint64_t a2, char a3, unsigned __int8 a4, uint64_t (*a5)(uint64_t, uint64_t), uint64_t (*a6)(uint64_t, uint64_t))
{
  if (a3 == 2 && (a2 | 4) == 4)
  {
    uint64_t v7 = a1[1];
    uint64_t v8 = **a1;
    uint64_t v9 = *v7;
    if (a4 > 3u)
    {
      return a6(v8, v9);
    }
    else
    {
      return a5(v8, v9);
    }
  }
  else
  {
    uint64_t result = sub_21FA266E0();
    __break(1u);
  }
  return result;
}

uint64_t sub_21F7BCDDC@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  if (a3 == 2 && (a2 | 4) == 4)
  {
    uint64_t v6 = **a1;
    uint64_t v7 = *a1[1];
    swift_bridgeObjectRetain();
    sub_21F7BF810(v6, v7, a4);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = sub_21FA266E0();
    __break(1u);
  }
  return result;
}

uint64_t sub_21F7BCEA4@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  if (a3 == 2 && (a2 | 4) == 4)
  {
    uint64_t v6 = **a1;
    uint64_t v7 = *a1[1];
    swift_retain();
    sub_21F7BEE24(v6, v7, a4);
    return swift_release();
  }
  else
  {
    uint64_t result = sub_21FA266E0();
    __break(1u);
  }
  return result;
}

uint64_t sub_21F7BCF6C(uint64_t **a1, uint64_t a2, char a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  if (a3 == 2 && (a2 | 4) == 4)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = **a1;
    uint64_t v7 = *v5;
    return a4(v6, v7);
  }
  else
  {
    uint64_t result = sub_21FA266E0();
    __break(1u);
  }
  return result;
}

uint64_t sub_21F7BD008@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  void (*v5)(uint64_t *__return_ptr, void *);
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  void v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t vars8;

  uint64_t v2 = **a1;
  int64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v12 = a2;
    uint64_t v5 = (void (*)(uint64_t *__return_ptr, void *))*a1[1];
    v16 = MEMORY[0x263F8EE78];
    swift_retain();
    sub_21F7A244C(0, v3, 0);
    uint64_t v4 = v16;
    uint64_t v6 = (uint64_t *)(v2 + 40);
    do
    {
      uint64_t v7 = *v6;
      v13[0] = *(v6 - 1);
      v13[1] = v7;
      v14 = 2;
      swift_bridgeObjectRetain();
      v5(&v15, v13);
      swift_bridgeObjectRelease();
      uint64_t v8 = v15;
      v16 = v4;
      v10 = *(void *)(v4 + 16);
      uint64_t v9 = *(void *)(v4 + 24);
      if (v10 >= v9 >> 1)
      {
        sub_21F7A244C((char *)(v9 > 1), v10 + 1, 1);
        uint64_t v4 = v16;
      }
      v6 += 2;
      *(void *)(v4 + 16) = v10 + 1;
      *(void *)(v4 + 8 * v10 + 32) = v8;
      --v3;
    }
    while (v3);
    swift_release();
    a2 = v12;
  }
  sub_21F7BF068(v2, v4, a2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_21F7BD154@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  void (*v5)(_OWORD *__return_ptr, void *);
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  long long v11;
  long long v12;
  uint64_t v14;
  void v15[2];
  char v16;
  _OWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t vars8;

  uint64_t v2 = **a1;
  int64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (v3)
  {
    v14 = a2;
    uint64_t v5 = (void (*)(_OWORD *__return_ptr, void *))*a1[1];
    v19 = MEMORY[0x263F8EE78];
    swift_retain();
    sub_21F7A2390(0, v3, 0);
    uint64_t v4 = v19;
    uint64_t v6 = (uint64_t *)(v2 + 40);
    do
    {
      uint64_t v7 = *v6;
      v15[0] = *(v6 - 1);
      v15[1] = v7;
      v16 = 2;
      swift_bridgeObjectRetain();
      v5(v17, v15);
      swift_bridgeObjectRelease();
      v19 = v4;
      uint64_t v9 = *(void *)(v4 + 16);
      uint64_t v8 = *(void *)(v4 + 24);
      if (v9 >= v8 >> 1)
      {
        sub_21F7A2390((char *)(v8 > 1), v9 + 1, 1);
        uint64_t v4 = v19;
      }
      v6 += 2;
      *(void *)(v4 + 16) = v9 + 1;
      v10 = v4 + 40 * v9;
      uint64_t v11 = v17[0];
      uint64_t v12 = v17[1];
      *(void *)(v10 + 64) = v18;
      *(_OWORD *)(v10 + 32) = v11;
      *(_OWORD *)(v10 + 48) = v12;
      --v3;
    }
    while (v3);
    swift_release();
    a2 = v14;
  }
  sub_21F7BF2D4(v2, v4, a2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_21F7BD2A8@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  void (*v5)(void *__return_ptr, void *);
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v17;
  void v18[2];
  char v19;
  void v20[5];
  uint64_t v21;
  uint64_t vars8;

  uint64_t v2 = **a1;
  int64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (v3)
  {
    v17 = a2;
    uint64_t v5 = (void (*)(void *__return_ptr, void *))*a1[1];
    v21 = MEMORY[0x263F8EE78];
    swift_retain();
    sub_21F7A2474(0, v3, 0);
    uint64_t v4 = v21;
    uint64_t v6 = (uint64_t *)(v2 + 40);
    do
    {
      uint64_t v7 = *v6;
      v18[0] = *(v6 - 1);
      v18[1] = v7;
      v19 = 2;
      swift_bridgeObjectRetain();
      v5(v20, v18);
      swift_bridgeObjectRelease();
      uint64_t v8 = v20[0];
      uint64_t v9 = v20[1];
      v10 = v20[2];
      uint64_t v11 = v20[3];
      uint64_t v12 = v20[4];
      v21 = v4;
      v14 = *(void *)(v4 + 16);
      v13 = *(void *)(v4 + 24);
      if (v14 >= v13 >> 1)
      {
        sub_21F7A2474((char *)(v13 > 1), v14 + 1, 1);
        uint64_t v4 = v21;
      }
      v6 += 2;
      *(void *)(v4 + 16) = v14 + 1;
      v15 = (void *)(v4 + 40 * v14);
      v15[4] = v8;
      v15[5] = v9;
      v15[6] = v10;
      v15[7] = v11;
      v15[8] = v12;
      --v3;
    }
    while (v3);
    swift_release();
    a2 = v17;
  }
  sub_21F7BF55C(v2, v4, a2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_21F7BD41C@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  void (*v6)(uint64_t *__return_ptr, void *);
  uint64_t *v7;
  uint64_t v8;
  void v10[2];
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t vars8;

  uint64_t v3 = **a1;
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v6 = (void (*)(uint64_t *__return_ptr, void *))*a1[1];
    v13 = MEMORY[0x263F8EE78];
    swift_retain();
    sub_21FA26630();
    uint64_t v7 = (uint64_t *)(v3 + 40);
    do
    {
      uint64_t v8 = *v7;
      v10[0] = *(v7 - 1);
      v10[1] = v8;
      uint64_t v11 = 2;
      swift_bridgeObjectRetain();
      v6(&v12, v10);
      swift_bridgeObjectRelease();
      sub_21FA26600();
      sub_21FA26640();
      sub_21FA26650();
      sub_21FA26610();
      v7 += 2;
      --v4;
    }
    while (v4);
    uint64_t v5 = v13;
    swift_release();
  }
  sub_21F7BF810(v3, v5, a2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_21F7BD548@<X0>(double *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  double v9 = *a1;
  uint64_t v8 = *((void *)a1 + 1);
  uint64_t v10 = *((void *)a1 + 2);
  uint64_t v11 = *((void *)a1 + 3);
  if (v10)
  {
    uint64_t v12 = swift_allocObject();
    *(double *)(v12 + 16) = a3;
    *(double *)(v12 + 24) = a4;
    *(void *)(v12 + 32) = v10;
    *(void *)(v12 + 40) = v11;
    v13 = sub_21F7C169C;
  }
  else
  {
    v13 = 0;
    uint64_t v12 = 0;
  }
  uint64_t v14 = swift_allocObject();
  *(double *)(v14 + 16) = v9;
  *(void *)(v14 + 24) = v8;
  *(double *)(v14 + 32) = a3;
  *(double *)(v14 + 40) = a4;
  sub_21F76CA40(&qword_26AD4A478);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_21FA28820;
  *(double *)(v15 + 32) = a3;
  *(double *)(v15 + 40) = a4;
  uint64_t v16 = *((void *)a1 + 6);
  double v17 = a1[7];
  double v18 = a1[8];
  if (v16 != 255)
  {
    uint64_t v16 = *((void *)a1 + 6);
    double v17 = (a4 - a3) * v17;
    double v18 = (a4 - a3) * v18 + a3;
  }
  uint64_t v19 = *((void *)a1 + 5);
  uint64_t v22 = *((void *)a1 + 4);
  uint64_t v20 = v22;
  *(void *)(a2 + 8) = v14;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 1;
  *(void *)a2 = sub_21F762828;
  *(void *)(a2 + 48) = v20;
  *(void *)(a2 + 56) = v15;
  *(unsigned char *)(a2 + 64) = 0;
  *(void *)(a2 + 32) = v13;
  *(void *)(a2 + 40) = v12;
  *(void *)(a2 + 72) = v19;
  *(void *)(a2 + 80) = v16;
  *(double *)(a2 + 88) = v17;
  *(double *)(a2 + 96) = v18;
  swift_retain();
  sub_21F7744A4((uint64_t)&v22);
  return sub_21F7642D0(v10);
}

uint64_t sub_21F7BD6BC@<X0>(int8x16_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = a1->i64[0];
  uint64_t v6 = a1->i64[1];
  uint64_t v8 = a1[1].i64[0];
  uint64_t v9 = a1[1].i64[1];
  if (v8)
  {
    uint64_t v10 = (void *)swift_allocObject();
    v10[2] = a2;
    v10[3] = v8;
    v10[4] = v9;
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_21F7C17A0;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = v7;
  v12[3] = v6;
  v12[4] = a2;
  uint64_t v13 = a1[4].i64[0];
  uint64_t v14 = a1[2].i64[1];
  uint64_t v20 = a1[2].i64[0];
  uint64_t v15 = v20;
  *(void *)a3 = sub_21F7C171C;
  *(void *)(a3 + 8) = v12;
  *(void *)(a3 + 40) = v15;
  *(void *)(a3 + 48) = a2;
  *(unsigned char *)(a3 + 56) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = v11;
  *(void *)(a3 + 32) = v10;
  if (*(_OWORD *)&a1[3] != 255) {
    uint64_t v14 = 0;
  }
  int32x2_t v16 = vdup_n_s32(*(_OWORD *)&a1[3] == 255);
  v17.i64[0] = v16.u32[0];
  v17.i64[1] = v16.u32[1];
  int8x16_t v18 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v17, 0x3FuLL)), a1[3], (int8x16_t)xmmword_21FA28E00);
  if (*(_OWORD *)&a1[3] != 255) {
    uint64_t v13 = 0;
  }
  *(void *)(a3 + 64) = v14;
  *(int8x16_t *)(a3 + 72) = v18;
  *(void *)(a3 + 88) = v13;
  swift_bridgeObjectRetain_n();
  swift_retain();
  sub_21F7744A4((uint64_t)&v20);
  return sub_21F7642D0(v8);
}

uint64_t sub_21F7BD818@<X0>(int8x16_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = a1->i64[0];
  uint64_t v6 = a1->i64[1];
  uint64_t v8 = a1[1].i64[0];
  uint64_t v9 = a1[1].i64[1];
  if (v8)
  {
    uint64_t v10 = (void *)swift_allocObject();
    v10[2] = a2;
    v10[3] = v8;
    v10[4] = v9;
    swift_retain();
    uint64_t v11 = sub_21F7C17A0;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = v7;
  v12[3] = v6;
  v12[4] = a2;
  uint64_t v13 = a1[4].i64[0];
  uint64_t v14 = a1[2].i64[1];
  uint64_t v20 = a1[2].i64[0];
  uint64_t v15 = v20;
  *(void *)a3 = sub_21F7C185C;
  *(void *)(a3 + 8) = v12;
  *(void *)(a3 + 40) = v15;
  *(void *)(a3 + 48) = a2;
  *(unsigned char *)(a3 + 56) = 1;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = v11;
  *(void *)(a3 + 32) = v10;
  if (*(_OWORD *)&a1[3] != 255) {
    uint64_t v14 = 0;
  }
  int32x2_t v16 = vdup_n_s32(*(_OWORD *)&a1[3] == 255);
  v17.i64[0] = v16.u32[0];
  v17.i64[1] = v16.u32[1];
  int8x16_t v18 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v17, 0x3FuLL)), a1[3], (int8x16_t)xmmword_21FA28E00);
  if (*(_OWORD *)&a1[3] != 255) {
    uint64_t v13 = 0;
  }
  *(void *)(a3 + 64) = v14;
  *(int8x16_t *)(a3 + 72) = v18;
  *(void *)(a3 + 88) = v13;
  swift_retain_n();
  swift_retain();
  sub_21F7744A4((uint64_t)&v20);
  return sub_21F7642D0(v8);
}

uint64_t sub_21F7BD978@<X0>(int8x16_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = a1->i64[0];
  uint64_t v6 = a1->i64[1];
  uint64_t v8 = a1[1].i64[0];
  uint64_t v9 = a1[1].i64[1];
  if (v8)
  {
    uint64_t v10 = (void *)swift_allocObject();
    v10[2] = a2;
    v10[3] = v8;
    v10[4] = v9;
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_21F7C17A0;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = v7;
  v12[3] = v6;
  v12[4] = a2;
  uint64_t v13 = a1[4].i64[0];
  uint64_t v14 = a1[2].i64[1];
  uint64_t v20 = a1[2].i64[0];
  uint64_t v15 = v20;
  *(void *)a3 = sub_21F7C18E8;
  *(void *)(a3 + 8) = v12;
  *(void *)(a3 + 72) = v15;
  *(void *)(a3 + 80) = a2;
  *(unsigned char *)(a3 + 88) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = v11;
  *(void *)(a3 + 64) = v10;
  if (*(_OWORD *)&a1[3] != 255) {
    uint64_t v14 = 0;
  }
  int32x2_t v16 = vdup_n_s32(*(_OWORD *)&a1[3] == 255);
  v17.i64[0] = v16.u32[0];
  v17.i64[1] = v16.u32[1];
  int8x16_t v18 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v17, 0x3FuLL)), a1[3], (int8x16_t)xmmword_21FA28E00);
  if (*(_OWORD *)&a1[3] != 255) {
    uint64_t v13 = 0;
  }
  *(void *)(a3 + 96) = v14;
  *(int8x16_t *)(a3 + 104) = v18;
  *(void *)(a3 + 120) = v13;
  swift_bridgeObjectRetain_n();
  swift_retain();
  sub_21F7744A4((uint64_t)&v20);
  return sub_21F7642D0(v8);
}

uint64_t sub_21F7BDADC(void (*a1)(uint64_t *__return_ptr, double, void), double a2, double a3, double a4)
{
  ((void (*)(void *__return_ptr, void, void))a1)(&v5, (a2 - a3) / (a4 - a3), 0);
  return v5;
}

uint64_t sub_21F7BDB30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(a2 + 16) != 2)
  {
LABEL_36:
    __break(1u);
LABEL_37:
    uint64_t result = sub_21FA26990();
    __break(1u);
    return result;
  }
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  double v6 = *(double *)(a2 + 32);
  double v7 = *(double *)(a2 + 40);
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    double v9 = vabdd_f64(v7, v6) / (double)v8;
    uint64_t v10 = (void *)sub_21F9326BC(MEMORY[0x263F8EE78]);
    swift_bridgeObjectRetain();
    uint64_t v47 = v5;
    uint64_t v11 = 0;
    uint64_t v12 = (uint64_t *)(v5 + 40);
    if (v6 <= v7)
    {
      while (1)
      {
        uint64_t v14 = *(v12 - 1);
        uint64_t v13 = *v12;
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v17 = sub_21F91582C(v14, v13);
        uint64_t v18 = v10[2];
        BOOL v19 = (v16 & 1) == 0;
        uint64_t v20 = v18 + v19;
        if (__OFADD__(v18, v19)) {
          break;
        }
        char v21 = v16;
        if (v10[3] >= v20)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            sub_21F878780();
          }
        }
        else
        {
          sub_21F86DFAC(v20, isUniquelyReferenced_nonNull_native);
          unint64_t v22 = sub_21F91582C(v14, v13);
          if ((v21 & 1) != (v23 & 1)) {
            goto LABEL_37;
          }
          unint64_t v17 = v22;
        }
        double v24 = v6 + v9 * (double)v11;
        if (v21)
        {
          *(double *)(v10[7] + 8 * v17) = v24;
        }
        else
        {
          v10[(v17 >> 6) + 8] |= 1 << v17;
          v25 = (uint64_t *)(v10[6] + 16 * v17);
          uint64_t *v25 = v14;
          v25[1] = v13;
          *(double *)(v10[7] + 8 * v17) = v24;
          uint64_t v26 = v10[2];
          BOOL v27 = __OFADD__(v26, 1);
          uint64_t v28 = v26 + 1;
          if (v27) {
            goto LABEL_34;
          }
          v10[2] = v28;
          swift_bridgeObjectRetain();
        }
        ++v11;
        v12 += 2;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v8 == v11)
        {
LABEL_27:
          uint64_t v5 = v47;
          swift_bridgeObjectRelease();
          uint64_t v4 = a2;
          goto LABEL_29;
        }
      }
      __break(1u);
    }
    else
    {
      while (1)
      {
        uint64_t v30 = *(v12 - 1);
        uint64_t v29 = *v12;
        swift_bridgeObjectRetain();
        char v31 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v33 = sub_21F91582C(v30, v29);
        uint64_t v34 = v10[2];
        BOOL v35 = (v32 & 1) == 0;
        uint64_t v36 = v34 + v35;
        if (__OFADD__(v34, v35)) {
          break;
        }
        char v37 = v32;
        if (v10[3] >= v36)
        {
          if ((v31 & 1) == 0) {
            sub_21F878780();
          }
        }
        else
        {
          sub_21F86DFAC(v36, v31);
          unint64_t v38 = sub_21F91582C(v30, v29);
          if ((v37 & 1) != (v39 & 1)) {
            goto LABEL_37;
          }
          unint64_t v33 = v38;
        }
        double v40 = v6 - v9 * ((double)v11 + 1.0);
        if (v37)
        {
          *(double *)(v10[7] + 8 * v33) = v40;
        }
        else
        {
          v10[(v33 >> 6) + 8] |= 1 << v33;
          v41 = (uint64_t *)(v10[6] + 16 * v33);
          uint64_t *v41 = v30;
          v41[1] = v29;
          *(double *)(v10[7] + 8 * v33) = v40;
          uint64_t v42 = v10[2];
          BOOL v27 = __OFADD__(v42, 1);
          uint64_t v43 = v42 + 1;
          if (v27) {
            goto LABEL_35;
          }
          v10[2] = v43;
          swift_bridgeObjectRetain();
        }
        ++v11;
        v12 += 2;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v8 == v11) {
          goto LABEL_27;
        }
      }
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v10 = (void *)sub_21F9326BC(MEMORY[0x263F8EE78]);
  double v9 = 0.0;
LABEL_29:
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = v10;
  uint64_t v45 = swift_allocObject();
  *(double *)(v45 + 16) = v6;
  *(double *)(v45 + 24) = v7;
  *(double *)(v45 + 32) = v9;
  *(void *)(v45 + 40) = v5;
  *(void *)a3 = sub_21F7C2020;
  *(void *)(a3 + 8) = v44;
  *(void *)(a3 + 48) = v5;
  *(void *)(a3 + 56) = v4;
  *(unsigned char *)(a3 + 64) = 0;
  *(double *)(a3 + 16) = v9;
  *(unsigned char *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = sub_21F7C208C;
  *(void *)(a3 + 40) = v45;
  *(_OWORD *)(a3 + 72) = xmmword_21FA28DF0;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 96) = 0;
  swift_bridgeObjectRetain_n();

  return swift_bridgeObjectRetain();
}

uint64_t sub_21F7BDF18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(a2 + 16) != 2)
  {
LABEL_36:
    __break(1u);
LABEL_37:
    uint64_t result = sub_21FA26990();
    __break(1u);
    return result;
  }
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  double v6 = *(double *)(a2 + 32);
  double v7 = *(double *)(a2 + 40);
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    double v9 = vabdd_f64(v7, v6) / (double)v8;
    uint64_t v10 = (void *)sub_21F932B84(MEMORY[0x263F8EE78]);
    swift_bridgeObjectRetain();
    uint64_t v47 = v5;
    uint64_t v11 = 0;
    uint64_t v12 = (uint64_t *)(v5 + 40);
    if (v6 <= v7)
    {
      while (1)
      {
        uint64_t v14 = *(v12 - 1);
        uint64_t v13 = *v12;
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v17 = sub_21F91582C(v14, v13);
        uint64_t v18 = v10[2];
        BOOL v19 = (v16 & 1) == 0;
        uint64_t v20 = v18 + v19;
        if (__OFADD__(v18, v19)) {
          break;
        }
        char v21 = v16;
        if (v10[3] >= v20)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            sub_21F879C54();
          }
        }
        else
        {
          sub_21F86FDF4(v20, isUniquelyReferenced_nonNull_native);
          unint64_t v22 = sub_21F91582C(v14, v13);
          if ((v21 & 1) != (v23 & 1)) {
            goto LABEL_37;
          }
          unint64_t v17 = v22;
        }
        double v24 = v6 + v9 * (double)v11;
        if (v21)
        {
          *(double *)(v10[7] + 8 * v17) = v24;
        }
        else
        {
          v10[(v17 >> 6) + 8] |= 1 << v17;
          v25 = (uint64_t *)(v10[6] + 16 * v17);
          uint64_t *v25 = v14;
          v25[1] = v13;
          *(double *)(v10[7] + 8 * v17) = v24;
          uint64_t v26 = v10[2];
          BOOL v27 = __OFADD__(v26, 1);
          uint64_t v28 = v26 + 1;
          if (v27) {
            goto LABEL_34;
          }
          v10[2] = v28;
          swift_bridgeObjectRetain();
        }
        ++v11;
        v12 += 2;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v8 == v11)
        {
LABEL_27:
          uint64_t v5 = v47;
          swift_bridgeObjectRelease();
          uint64_t v4 = a2;
          goto LABEL_29;
        }
      }
      __break(1u);
    }
    else
    {
      while (1)
      {
        uint64_t v30 = *(v12 - 1);
        uint64_t v29 = *v12;
        swift_bridgeObjectRetain();
        char v31 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v33 = sub_21F91582C(v30, v29);
        uint64_t v34 = v10[2];
        BOOL v35 = (v32 & 1) == 0;
        uint64_t v36 = v34 + v35;
        if (__OFADD__(v34, v35)) {
          break;
        }
        char v37 = v32;
        if (v10[3] >= v36)
        {
          if ((v31 & 1) == 0) {
            sub_21F879C54();
          }
        }
        else
        {
          sub_21F86FDF4(v36, v31);
          unint64_t v38 = sub_21F91582C(v30, v29);
          if ((v37 & 1) != (v39 & 1)) {
            goto LABEL_37;
          }
          unint64_t v33 = v38;
        }
        double v40 = v6 - v9 * ((double)v11 + 1.0);
        if (v37)
        {
          *(double *)(v10[7] + 8 * v33) = v40;
        }
        else
        {
          v10[(v33 >> 6) + 8] |= 1 << v33;
          v41 = (uint64_t *)(v10[6] + 16 * v33);
          uint64_t *v41 = v30;
          v41[1] = v29;
          *(double *)(v10[7] + 8 * v33) = v40;
          uint64_t v42 = v10[2];
          BOOL v27 = __OFADD__(v42, 1);
          uint64_t v43 = v42 + 1;
          if (v27) {
            goto LABEL_35;
          }
          v10[2] = v43;
          swift_bridgeObjectRetain();
        }
        ++v11;
        v12 += 2;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v8 == v11) {
          goto LABEL_27;
        }
      }
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v10 = (void *)sub_21F932B84(MEMORY[0x263F8EE78]);
  double v9 = 0.0;
LABEL_29:
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = v10;
  uint64_t v45 = swift_allocObject();
  *(double *)(v45 + 16) = v6;
  *(double *)(v45 + 24) = v7;
  *(double *)(v45 + 32) = v9;
  *(void *)(v45 + 40) = v5;
  *(double *)(a3 + 16) = v9;
  *(unsigned char *)(a3 + 24) = 0;
  *(void *)a3 = sub_21F7C2020;
  *(void *)(a3 + 8) = v44;
  *(void *)(a3 + 48) = v5;
  *(void *)(a3 + 56) = v4;
  *(unsigned char *)(a3 + 64) = 0;
  *(void *)(a3 + 32) = sub_21F7C20D8;
  *(void *)(a3 + 40) = v45;
  *(_OWORD *)(a3 + 72) = xmmword_21FA28DF0;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 96) = 0;
  swift_bridgeObjectRetain_n();

  return swift_bridgeObjectRetain();
}

uint64_t sub_21F7BE300@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = swift_allocObject();
  unint64_t v7 = sub_21F9326BC(MEMORY[0x263F8EE78]);
  *(void *)(v6 + 16) = v7;
  uint64_t v8 = a1[2];
  uint64_t v9 = a2[2];
  if (v8 == v9)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v65 = (void *)v7;
    *(void *)(v6 + 16) = 0x8000000000000000;
    sub_21F7C0224(a1, a2, isUniquelyReferenced_nonNull_native, &v65);
    *(void *)(v6 + 16) = v65;
    swift_bridgeObjectRelease();
LABEL_40:
    *(void *)a3 = sub_21F7C20A4;
    *(void *)(a3 + 8) = v6;
    *(void *)(a3 + 48) = a1;
    *(void *)(a3 + 56) = a2;
    *(unsigned char *)(a3 + 64) = 0;
    *(void *)(a3 + 16) = 0;
    *(unsigned char *)(a3 + 24) = 1;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(_OWORD *)(a3 + 72) = xmmword_21FA28DF0;
    *(void *)(a3 + 88) = 0;
    *(void *)(a3 + 96) = 0;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  unint64_t v61 = a1[2];
  if (!v8) {
    goto LABEL_40;
  }
  if (!v9) {
    goto LABEL_49;
  }
  uint64_t v57 = a3;
  double v11 = (double)(v9 - 1);
  v59 = a2;
  uint64_t v60 = v9 - 2;
  v64 = a2 + 4;
  unint64_t v12 = a1[2];
  swift_bridgeObjectRetain();
  uint64_t v13 = 0;
  v58 = a1;
  uint64_t v14 = a1 + 5;
  uint64_t v15 = v9;
  uint64_t v62 = v6;
  uint64_t v63 = v9;
  while (1)
  {
    uint64_t v17 = *(v14 - 1);
    uint64_t v16 = *v14;
    if (v9 == 1)
    {
      uint64_t v18 = *v64;
      swift_bridgeObjectRetain();
      char v19 = swift_isUniquelyReferenced_nonNull_native();
      v65 = *(void **)(v6 + 16);
      uint64_t v20 = v65;
      *(void *)(v6 + 16) = 0x8000000000000000;
      unint64_t v22 = sub_21F91582C(v17, v16);
      uint64_t v23 = v20[2];
      BOOL v24 = (v21 & 1) == 0;
      uint64_t v25 = v23 + v24;
      if (__OFADD__(v23, v24)) {
        goto LABEL_44;
      }
      char v26 = v21;
      if (v20[3] < v25)
      {
        sub_21F86DFAC(v25, v19);
        unint64_t v27 = sub_21F91582C(v17, v16);
        if ((v26 & 1) != (v28 & 1)) {
          goto LABEL_51;
        }
        unint64_t v22 = v27;
        uint64_t v29 = v65;
        if ((v26 & 1) == 0) {
          goto LABEL_28;
        }
LABEL_6:
        *(void *)(v29[7] + 8 * v22) = v18;
LABEL_7:
        uint64_t v6 = v62;
        *(void *)(v62 + 16) = v29;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v15 = 1;
        goto LABEL_8;
      }
      if (v19)
      {
        uint64_t v29 = v65;
        if (v21) {
          goto LABEL_6;
        }
      }
      else
      {
        sub_21F878780();
        uint64_t v29 = v65;
        if (v26) {
          goto LABEL_6;
        }
      }
LABEL_28:
      v29[(v22 >> 6) + 8] |= 1 << v22;
      uint64_t v47 = (uint64_t *)(v29[6] + 16 * v22);
      *uint64_t v47 = v17;
      v47[1] = v16;
      *(void *)(v29[7] + 8 * v22) = v18;
      uint64_t v48 = v29[2];
      BOOL v49 = __OFADD__(v48, 1);
      uint64_t v50 = v48 + 1;
      if (v49) {
        goto LABEL_47;
      }
      v29[2] = v50;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    }
    double v30 = 0.5;
    if (v12 > 1) {
      double v30 = (double)v13 / (double)(uint64_t)(v61 - 1);
    }
    double v31 = v30 * v11;
    double v32 = floor(v30 * v11);
    swift_bridgeObjectRetain();
    sub_21F7C009C((uint64_t)&v65, v32);
    if (v66) {
      goto LABEL_50;
    }
    uint64_t v33 = (uint64_t)v65;
    if ((uint64_t)v65 >= v60) {
      uint64_t v33 = v60;
    }
    uint64_t v34 = v33 & ~(v33 >> 63);
    if (v34 >= v15) {
      break;
    }
    if (v34 + 1 >= v15) {
      goto LABEL_45;
    }
    double v35 = *(double *)&v64[v34];
    double v36 = *(double *)&v64[v34 + 1];
    char v37 = swift_isUniquelyReferenced_nonNull_native();
    v65 = *(void **)(v6 + 16);
    unint64_t v38 = v65;
    *(void *)(v6 + 16) = 0x8000000000000000;
    unint64_t v40 = sub_21F91582C(v17, v16);
    uint64_t v41 = v38[2];
    BOOL v42 = (v39 & 1) == 0;
    uint64_t v43 = v41 + v42;
    if (__OFADD__(v41, v42)) {
      goto LABEL_46;
    }
    char v44 = v39;
    if (v38[3] >= v43)
    {
      if ((v37 & 1) == 0) {
        sub_21F878780();
      }
    }
    else
    {
      sub_21F86DFAC(v43, v37);
      unint64_t v45 = sub_21F91582C(v17, v16);
      if ((v44 & 1) != (v46 & 1)) {
        goto LABEL_51;
      }
      unint64_t v40 = v45;
    }
    double v51 = (1.0 - (v31 - (double)v34)) * v35 + (v31 - (double)v34) * v36;
    v52 = v65;
    if (v44)
    {
      *(double *)(v65[7] + 8 * v40) = v51;
      unint64_t v12 = v61;
    }
    else
    {
      v65[(v40 >> 6) + 8] |= 1 << v40;
      v53 = (uint64_t *)(v52[6] + 16 * v40);
      uint64_t *v53 = v17;
      v53[1] = v16;
      *(double *)(v52[7] + 8 * v40) = v51;
      uint64_t v54 = v52[2];
      BOOL v49 = __OFADD__(v54, 1);
      uint64_t v55 = v54 + 1;
      unint64_t v12 = v61;
      if (v49) {
        goto LABEL_48;
      }
      v52[2] = v55;
      swift_bridgeObjectRetain();
    }
    uint64_t v6 = v62;
    *(void *)(v62 + 16) = v52;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_8:
    uint64_t v9 = v63;
    ++v13;
    v14 += 2;
    if (v12 == v13)
    {
      a1 = v58;
      swift_bridgeObjectRelease();
      a2 = v59;
      a3 = v57;
      goto LABEL_40;
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  v65 = 0;
  unint64_t v66 = 0xE000000000000000;
  sub_21FA26510();
  sub_21FA25D40();
  sub_21FA25D40();
  sub_21FA25D40();
  sub_21FA25D40();
  sub_21FA266E0();
  __break(1u);
LABEL_51:
  uint64_t result = sub_21FA26990();
  __break(1u);
  return result;
}

uint64_t sub_21F7BE894@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = swift_allocObject();
  unint64_t v7 = sub_21F932B84(MEMORY[0x263F8EE78]);
  *(void *)(v6 + 16) = v7;
  uint64_t v8 = a1[2];
  uint64_t v9 = a2[2];
  if (v8 == v9)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v65 = (void *)v7;
    *(void *)(v6 + 16) = 0x8000000000000000;
    sub_21F7C0578(a1, a2, isUniquelyReferenced_nonNull_native, &v65);
    *(void *)(v6 + 16) = v65;
    swift_bridgeObjectRelease();
LABEL_40:
    *(void *)(a3 + 8) = v6;
    *(void *)(a3 + 16) = 0;
    *(unsigned char *)(a3 + 24) = 1;
    *(void *)a3 = sub_21F7C20A4;
    *(void *)(a3 + 48) = a1;
    *(void *)(a3 + 56) = a2;
    *(unsigned char *)(a3 + 64) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(_OWORD *)(a3 + 72) = xmmword_21FA28DF0;
    *(void *)(a3 + 88) = 0;
    *(void *)(a3 + 96) = 0;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  unint64_t v61 = a1[2];
  if (!v8) {
    goto LABEL_40;
  }
  if (!v9) {
    goto LABEL_49;
  }
  uint64_t v57 = a3;
  double v11 = (double)(v9 - 1);
  v59 = a2;
  uint64_t v60 = v9 - 2;
  v64 = a2 + 4;
  unint64_t v12 = a1[2];
  swift_bridgeObjectRetain();
  uint64_t v13 = 0;
  v58 = a1;
  uint64_t v14 = a1 + 5;
  uint64_t v15 = v9;
  uint64_t v62 = v6;
  uint64_t v63 = v9;
  while (1)
  {
    uint64_t v17 = *(v14 - 1);
    uint64_t v16 = *v14;
    if (v9 == 1)
    {
      uint64_t v18 = *v64;
      swift_bridgeObjectRetain();
      char v19 = swift_isUniquelyReferenced_nonNull_native();
      v65 = *(void **)(v6 + 16);
      uint64_t v20 = v65;
      *(void *)(v6 + 16) = 0x8000000000000000;
      unint64_t v22 = sub_21F91582C(v17, v16);
      uint64_t v23 = v20[2];
      BOOL v24 = (v21 & 1) == 0;
      uint64_t v25 = v23 + v24;
      if (__OFADD__(v23, v24)) {
        goto LABEL_44;
      }
      char v26 = v21;
      if (v20[3] < v25)
      {
        sub_21F86FDF4(v25, v19);
        unint64_t v27 = sub_21F91582C(v17, v16);
        if ((v26 & 1) != (v28 & 1)) {
          goto LABEL_51;
        }
        unint64_t v22 = v27;
        uint64_t v29 = v65;
        if ((v26 & 1) == 0) {
          goto LABEL_28;
        }
LABEL_6:
        *(void *)(v29[7] + 8 * v22) = v18;
LABEL_7:
        uint64_t v6 = v62;
        *(void *)(v62 + 16) = v29;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v15 = 1;
        goto LABEL_8;
      }
      if (v19)
      {
        uint64_t v29 = v65;
        if (v21) {
          goto LABEL_6;
        }
      }
      else
      {
        sub_21F879C54();
        uint64_t v29 = v65;
        if (v26) {
          goto LABEL_6;
        }
      }
LABEL_28:
      v29[(v22 >> 6) + 8] |= 1 << v22;
      uint64_t v47 = (uint64_t *)(v29[6] + 16 * v22);
      *uint64_t v47 = v17;
      v47[1] = v16;
      *(void *)(v29[7] + 8 * v22) = v18;
      uint64_t v48 = v29[2];
      BOOL v49 = __OFADD__(v48, 1);
      uint64_t v50 = v48 + 1;
      if (v49) {
        goto LABEL_47;
      }
      v29[2] = v50;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    }
    double v30 = 0.5;
    if (v12 > 1) {
      double v30 = (double)v13 / (double)(uint64_t)(v61 - 1);
    }
    double v31 = v30 * v11;
    double v32 = floor(v30 * v11);
    swift_bridgeObjectRetain();
    sub_21F7C009C((uint64_t)&v65, v32);
    if (v66) {
      goto LABEL_50;
    }
    uint64_t v33 = (uint64_t)v65;
    if ((uint64_t)v65 >= v60) {
      uint64_t v33 = v60;
    }
    uint64_t v34 = v33 & ~(v33 >> 63);
    if (v34 >= v15) {
      break;
    }
    if (v34 + 1 >= v15) {
      goto LABEL_45;
    }
    double v35 = *(double *)&v64[v34];
    double v36 = *(double *)&v64[v34 + 1];
    char v37 = swift_isUniquelyReferenced_nonNull_native();
    v65 = *(void **)(v6 + 16);
    unint64_t v38 = v65;
    *(void *)(v6 + 16) = 0x8000000000000000;
    unint64_t v40 = sub_21F91582C(v17, v16);
    uint64_t v41 = v38[2];
    BOOL v42 = (v39 & 1) == 0;
    uint64_t v43 = v41 + v42;
    if (__OFADD__(v41, v42)) {
      goto LABEL_46;
    }
    char v44 = v39;
    if (v38[3] >= v43)
    {
      if ((v37 & 1) == 0) {
        sub_21F879C54();
      }
    }
    else
    {
      sub_21F86FDF4(v43, v37);
      unint64_t v45 = sub_21F91582C(v17, v16);
      if ((v44 & 1) != (v46 & 1)) {
        goto LABEL_51;
      }
      unint64_t v40 = v45;
    }
    double v51 = (1.0 - (v31 - (double)v34)) * v35 + (v31 - (double)v34) * v36;
    v52 = v65;
    if (v44)
    {
      *(double *)(v65[7] + 8 * v40) = v51;
      unint64_t v12 = v61;
    }
    else
    {
      v65[(v40 >> 6) + 8] |= 1 << v40;
      v53 = (uint64_t *)(v52[6] + 16 * v40);
      uint64_t *v53 = v17;
      v53[1] = v16;
      *(double *)(v52[7] + 8 * v40) = v51;
      uint64_t v54 = v52[2];
      BOOL v49 = __OFADD__(v54, 1);
      uint64_t v55 = v54 + 1;
      unint64_t v12 = v61;
      if (v49) {
        goto LABEL_48;
      }
      v52[2] = v55;
      swift_bridgeObjectRetain();
    }
    uint64_t v6 = v62;
    *(void *)(v62 + 16) = v52;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_8:
    uint64_t v9 = v63;
    ++v13;
    v14 += 2;
    if (v12 == v13)
    {
      a1 = v58;
      swift_bridgeObjectRelease();
      a2 = v59;
      a3 = v57;
      goto LABEL_40;
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  v65 = 0;
  unint64_t v66 = 0xE000000000000000;
  sub_21FA26510();
  sub_21FA25D40();
  sub_21FA25D40();
  sub_21FA25D40();
  sub_21FA25D40();
  sub_21FA266E0();
  __break(1u);
LABEL_51:
  uint64_t result = sub_21FA26990();
  __break(1u);
  return result;
}

uint64_t sub_21F7BEE24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (void *)sub_21F932B84(MEMORY[0x263F8EE78]);
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    uint64_t v28 = a2;
    swift_bridgeObjectRetain();
    uint64_t v8 = 0;
    uint64_t v29 = a1;
    uint64_t v9 = (uint64_t *)(a1 + 40);
    while (1)
    {
      uint64_t v11 = *(v9 - 1);
      uint64_t v10 = *v9;
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v14 = sub_21F91582C(v11, v10);
      uint64_t v15 = v6[2];
      BOOL v16 = (v13 & 1) == 0;
      uint64_t v17 = v15 + v16;
      if (__OFADD__(v15, v16)) {
        break;
      }
      char v18 = v13;
      if (v6[3] >= v17)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_21F879C54();
        }
      }
      else
      {
        sub_21F86FDF4(v17, isUniquelyReferenced_nonNull_native);
        unint64_t v19 = sub_21F91582C(v11, v10);
        if ((v18 & 1) != (v20 & 1)) {
          goto LABEL_20;
        }
        unint64_t v14 = v19;
      }
      double v21 = (double)v8 / (double)(v7 - 1);
      if (v18)
      {
        *(double *)(v6[7] + 8 * v14) = v21;
      }
      else
      {
        v6[(v14 >> 6) + 8] |= 1 << v14;
        unint64_t v22 = (uint64_t *)(v6[6] + 16 * v14);
        *unint64_t v22 = v11;
        v22[1] = v10;
        *(double *)(v6[7] + 8 * v14) = v21;
        uint64_t v23 = v6[2];
        BOOL v24 = __OFADD__(v23, 1);
        uint64_t v25 = v23 + 1;
        if (v24) {
          goto LABEL_19;
        }
        v6[2] = v25;
        swift_bridgeObjectRetain();
      }
      ++v8;
      v9 += 2;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v7 == v8)
      {
        a1 = v29;
        swift_bridgeObjectRelease();
        a2 = v28;
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    uint64_t result = sub_21FA26990();
    __break(1u);
  }
  else
  {
LABEL_15:
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = a2;
    *(void *)(v26 + 24) = v6;
    *(void *)a3 = sub_21F7C2170;
    *(void *)(a3 + 8) = v26;
    *(void *)(a3 + 40) = a1;
    *(void *)(a3 + 48) = a2;
    *(unsigned char *)(a3 + 56) = 1;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 16) = 0;
    *(_OWORD *)(a3 + 64) = xmmword_21FA28DF0;
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 88) = 0;
    swift_retain_n();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_21F7BF068@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (void *)sub_21F9326BC(MEMORY[0x263F8EE78]);
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7)
  {
LABEL_18:
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = v6;
    *(void *)a3 = sub_21F7C2274;
    *(void *)(a3 + 8) = v27;
    *(void *)(a3 + 48) = a1;
    *(void *)(a3 + 56) = a2;
    *(unsigned char *)(a3 + 64) = 0;
    *(void *)(a3 + 16) = 0;
    *(unsigned char *)(a3 + 24) = 1;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(_OWORD *)(a3 + 72) = xmmword_21FA28DF0;
    *(void *)(a3 + 88) = 0;
    *(void *)(a3 + 96) = 0;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  unint64_t v8 = *(void *)(a2 + 16);
  if (!v8) {
    goto LABEL_23;
  }
  uint64_t v29 = a3;
  uint64_t v31 = a2;
  uint64_t v32 = a2 + 32;
  swift_bridgeObjectRetain();
  unint64_t v9 = 0;
  uint64_t v30 = a1;
  uint64_t v10 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v12 = *(v10 - 1);
    uint64_t v11 = *v10;
    uint64_t v13 = *(void *)(v32 + 8 * (v9 % v8));
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v16 = sub_21F91582C(v12, v11);
    uint64_t v17 = v6[2];
    BOOL v18 = (v15 & 1) == 0;
    uint64_t v19 = v17 + v18;
    if (__OFADD__(v17, v18)) {
      break;
    }
    char v20 = v15;
    if (v6[3] >= v19)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v15) {
          goto LABEL_4;
        }
      }
      else
      {
        sub_21F878780();
        if (v20) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      sub_21F86DFAC(v19, isUniquelyReferenced_nonNull_native);
      unint64_t v21 = sub_21F91582C(v12, v11);
      if ((v20 & 1) != (v22 & 1)) {
        goto LABEL_24;
      }
      unint64_t v16 = v21;
      if (v20)
      {
LABEL_4:
        *(void *)(v6[7] + 8 * v16) = v13;
        goto LABEL_5;
      }
    }
    v6[(v16 >> 6) + 8] |= 1 << v16;
    uint64_t v23 = (uint64_t *)(v6[6] + 16 * v16);
    *uint64_t v23 = v12;
    v23[1] = v11;
    *(void *)(v6[7] + 8 * v16) = v13;
    uint64_t v24 = v6[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_22;
    }
    v6[2] = v26;
    swift_bridgeObjectRetain();
LABEL_5:
    ++v9;
    v10 += 2;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v7 == v9)
    {
      a1 = v30;
      swift_bridgeObjectRelease();
      a2 = v31;
      a3 = v29;
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_21FA26990();
  __break(1u);
  return result;
}

uint64_t sub_21F7BF2D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (void *)sub_21F9327D0(MEMORY[0x263F8EE78]);
  uint64_t v34 = *(void *)(a1 + 16);
  if (!v34)
  {
LABEL_18:
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = v6;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    *(void *)a3 = sub_21F7C2200;
    *(void *)(a3 + 8) = v28;
    *(void *)(a3 + 72) = a1;
    *(void *)(a3 + 80) = a2;
    *(unsigned char *)(a3 + 88) = 0;
    *(void *)(a3 + 64) = 0;
    *(_OWORD *)(a3 + 96) = xmmword_21FA28DF0;
    *(void *)(a3 + 112) = 0;
    *(void *)(a3 + 120) = 0;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  unint64_t v7 = *(void *)(a2 + 16);
  if (!v7) {
    goto LABEL_21;
  }
  uint64_t v30 = a3;
  uint64_t v32 = a2;
  uint64_t v33 = a2 + 32;
  swift_bridgeObjectRetain();
  unint64_t v8 = 0;
  uint64_t v31 = a1;
  unint64_t v9 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v11 = *(v9 - 1);
    uint64_t v10 = *v9;
    sub_21F7C21A4(v33 + 40 * (v8 % v7), (uint64_t)v35);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v14 = sub_21F91582C(v11, v10);
    uint64_t v15 = v6[2];
    BOOL v16 = (v13 & 1) == 0;
    uint64_t v17 = v15 + v16;
    if (__OFADD__(v15, v16)) {
      break;
    }
    char v18 = v13;
    if (v6[3] >= v17)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v13) {
          goto LABEL_4;
        }
      }
      else
      {
        sub_21F878930();
        if (v18) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      sub_21F86E2B4(v17, isUniquelyReferenced_nonNull_native);
      unint64_t v19 = sub_21F91582C(v11, v10);
      if ((v18 & 1) != (v20 & 1)) {
        goto LABEL_22;
      }
      unint64_t v14 = v19;
      if (v18)
      {
LABEL_4:
        sub_21F7C2210((uint64_t)v35, v6[7] + 40 * v14);
        goto LABEL_5;
      }
    }
    v6[(v14 >> 6) + 8] |= 1 << v14;
    unint64_t v21 = (uint64_t *)(v6[6] + 16 * v14);
    *unint64_t v21 = v11;
    v21[1] = v10;
    uint64_t v22 = v6[7] + 40 * v14;
    long long v23 = v35[0];
    long long v24 = v35[1];
    *(void *)(v22 + 32) = v36;
    *(_OWORD *)uint64_t v22 = v23;
    *(_OWORD *)(v22 + 16) = v24;
    uint64_t v25 = v6[2];
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (v26) {
      goto LABEL_20;
    }
    v6[2] = v27;
    swift_bridgeObjectRetain();
LABEL_5:
    ++v8;
    v9 += 2;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v34 == v8)
    {
      a1 = v31;
      swift_bridgeObjectRelease();
      a2 = v32;
      a3 = v30;
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = sub_21FA26990();
  __break(1u);
  return result;
}

uint64_t sub_21F7BF55C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (void *)sub_21F93291C(MEMORY[0x263F8EE78]);
  uint64_t v39 = *(void *)(a1 + 16);
  if (v39)
  {
    unint64_t v7 = *(void *)(a2 + 16);
    if (v7)
    {
      uint64_t v35 = a3;
      uint64_t v37 = a2;
      uint64_t v38 = a2 + 32;
      swift_bridgeObjectRetain();
      unint64_t v8 = 0;
      uint64_t v36 = a1;
      unint64_t v9 = (uint64_t *)(a1 + 40);
      while (1)
      {
        uint64_t v12 = *(v9 - 1);
        uint64_t v11 = *v9;
        char v13 = (uint64_t *)(v38 + 40 * (v8 % v7));
        uint64_t v15 = *v13;
        uint64_t v14 = v13[1];
        uint64_t v16 = v13[2];
        uint64_t v17 = v13[3];
        uint64_t v18 = v13[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v21 = sub_21F91582C(v12, v11);
        uint64_t v22 = v6[2];
        BOOL v23 = (v20 & 1) == 0;
        uint64_t v24 = v22 + v23;
        if (__OFADD__(v22, v23)) {
          break;
        }
        char v25 = v20;
        if (v6[3] >= v24)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            sub_21F878B28();
          }
        }
        else
        {
          sub_21F86E5EC(v24, isUniquelyReferenced_nonNull_native);
          unint64_t v26 = sub_21F91582C(v12, v11);
          if ((v25 & 1) != (v27 & 1)) {
            goto LABEL_22;
          }
          unint64_t v21 = v26;
        }
        if (v25)
        {
          uint64_t v10 = (void *)(v6[7] + 40 * v21);
          swift_bridgeObjectRelease();
          *uint64_t v10 = v15;
          v10[1] = v14;
          v10[2] = v16;
          v10[3] = v17;
          v10[4] = v18;
        }
        else
        {
          v6[(v21 >> 6) + 8] |= 1 << v21;
          uint64_t v28 = (uint64_t *)(v6[6] + 16 * v21);
          *uint64_t v28 = v12;
          v28[1] = v11;
          uint64_t v29 = (void *)(v6[7] + 40 * v21);
          *uint64_t v29 = v15;
          v29[1] = v14;
          v29[2] = v16;
          v29[3] = v17;
          v29[4] = v18;
          uint64_t v30 = v6[2];
          BOOL v31 = __OFADD__(v30, 1);
          uint64_t v32 = v30 + 1;
          if (v31) {
            goto LABEL_20;
          }
          v6[2] = v32;
          swift_bridgeObjectRetain();
        }
        ++v8;
        v9 += 2;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v39 == v8)
        {
          a1 = v36;
          swift_bridgeObjectRelease();
          a2 = v37;
          a3 = v35;
          goto LABEL_16;
        }
      }
      __break(1u);
LABEL_20:
      __break(1u);
    }
    __break(1u);
LABEL_22:
    uint64_t result = sub_21FA26990();
    __break(1u);
  }
  else
  {
LABEL_16:
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = v6;
    *(void *)a3 = sub_21F7C226C;
    *(void *)(a3 + 8) = v33;
    *(void *)(a3 + 72) = a1;
    *(void *)(a3 + 80) = a2;
    *(unsigned char *)(a3 + 88) = 0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(void *)(a3 + 64) = 0;
    *(_OWORD *)(a3 + 96) = xmmword_21FA28DF0;
    *(void *)(a3 + 112) = 0;
    *(void *)(a3 + 120) = 0;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_21F7BF810@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (void *)sub_21F932A68(MEMORY[0x263F8EE78]);
  uint64_t v33 = *(void *)(a1 + 16);
  if (!v33)
  {
LABEL_18:
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = v6;
    *(void *)a3 = sub_21F7C2128;
    *(void *)(a3 + 8) = v27;
    *(void *)(a3 + 40) = a1;
    *(void *)(a3 + 48) = a2;
    *(unsigned char *)(a3 + 56) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 16) = 0;
    *(_OWORD *)(a3 + 64) = xmmword_21FA28DF0;
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 88) = 0;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  unint64_t v7 = *(void *)(a2 + 16);
  if (!v7) {
    goto LABEL_23;
  }
  uint64_t v29 = a3;
  uint64_t v31 = a2;
  uint64_t v32 = a2 + 32;
  swift_bridgeObjectRetain();
  unint64_t v8 = 0;
  uint64_t v30 = a1;
  unint64_t v9 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v12 = *(v9 - 1);
    uint64_t v11 = *v9;
    uint64_t v13 = *(void *)(v32 + 8 * (v8 % v7));
    swift_bridgeObjectRetain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v16 = sub_21F91582C(v12, v11);
    uint64_t v17 = v6[2];
    BOOL v18 = (v15 & 1) == 0;
    uint64_t v19 = v17 + v18;
    if (__OFADD__(v17, v18)) {
      break;
    }
    char v20 = v15;
    if (v6[3] >= v19)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v15) {
          goto LABEL_4;
        }
      }
      else
      {
        sub_21F878D04();
        if (v20) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      sub_21F86E924(v19, isUniquelyReferenced_nonNull_native);
      unint64_t v21 = sub_21F91582C(v12, v11);
      if ((v20 & 1) != (v22 & 1)) {
        goto LABEL_24;
      }
      unint64_t v16 = v21;
      if (v20)
      {
LABEL_4:
        uint64_t v10 = v6[7];
        swift_release();
        *(void *)(v10 + 8 * v16) = v13;
        goto LABEL_5;
      }
    }
    v6[(v16 >> 6) + 8] |= 1 << v16;
    BOOL v23 = (uint64_t *)(v6[6] + 16 * v16);
    *BOOL v23 = v12;
    v23[1] = v11;
    *(void *)(v6[7] + 8 * v16) = v13;
    uint64_t v24 = v6[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_22;
    }
    v6[2] = v26;
    swift_bridgeObjectRetain();
LABEL_5:
    ++v8;
    v9 += 2;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v33 == v8)
    {
      a1 = v30;
      swift_bridgeObjectRelease();
      a2 = v31;
      a3 = v29;
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_21FA26990();
  __break(1u);
  return result;
}

double sub_21F7BFA88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return NAN;
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_21F91582C(a1, a2);
  if (v7) {
    double v8 = *(double *)(*(void *)(a3 + 56) + 8 * v6);
  }
  else {
    double v8 = NAN;
  }
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_21F7BFB0C(uint64_t a1, double a2, double a3, double a4, double a5)
{
  double v6 = a2 - a3;
  if (a3 > a4) {
    double v6 = -v6;
  }
  sub_21F7C009C((uint64_t)&v11, floor(v6 / a5));
  if ((v12 & 1) == 0)
  {
    unint64_t v7 = v11;
    if ((v11 & 0x8000000000000000) != 0) {
      return 0;
    }
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8 < v11) {
      return 0;
    }
    if ((uint64_t)(v8 - 1) < (uint64_t)v11) {
      unint64_t v7 = v8 - 1;
    }
    if (v7 < v8)
    {
      uint64_t v9 = *(void *)(a1 + 16 * v7 + 32);
      swift_bridgeObjectRetain();
      return v9;
    }
    __break(1u);
  }
  unint64_t v11 = 0;
  unint64_t v12 = 0xE000000000000000;
  sub_21FA26510();
  sub_21FA25D40();
  sub_21FA25D40();
  sub_21FA25D40();
  sub_21FA25D40();
  uint64_t result = sub_21FA266E0();
  __break(1u);
  return result;
}

double sub_21F7BFC78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t v6 = *(void *)(a3 + 16);
  if (*(void *)(v6 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v7 = sub_21F91582C(a1, a2);
    if (v8) {
      double v9 = *(double *)(*(void *)(v6 + 56) + 8 * v7);
    }
    else {
      double v9 = NAN;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    double v9 = NAN;
  }
  swift_endAccess();
  return v9;
}

uint64_t sub_21F7BFD24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a4 + 16))
  {
    swift_bridgeObjectRetain();
    sub_21F91582C(a1, a2);
    if (v6)
    {
      swift_bridgeObjectRelease();
      off_26B58FBE8(&v8);
      return v8;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_21F7BFDDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (!*(void *)(a3 + 16))
  {
    uint64_t v14 = 0;
    long long v12 = 0u;
    long long v13 = 0u;
    __break(1u);
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_21F91582C(a1, a2);
  if ((v9 & 1) == 0)
  {
LABEL_6:
    uint64_t v14 = 0;
    long long v12 = 0u;
    long long v13 = 0u;
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_21F7C21A4(*(void *)(a3 + 56) + 40 * v8, (uint64_t)&v12);
  uint64_t result = swift_bridgeObjectRelease();
  if (*((void *)&v13 + 1))
  {
    long long v11 = v13;
    *(_OWORD *)a4 = v12;
    *(_OWORD *)(a4 + 16) = v11;
    *(void *)(a4 + 32) = v14;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_21F7BFE94(uint64_t a1)
{
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = a1;
  *(void *)(v1 + 40) = 1;
  *(_WORD *)(v1 + 16) = 256;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 56) = 0;
  uint64_t v4 = MEMORY[0x263F8EE78];
  *(void *)(v1 + 24) = MEMORY[0x263F8EE78];
  *(void *)(v1 + 32) = v4;
  swift_bridgeObjectRetain();
  if ((v4 & 0xC000000000000000) == 0 || (uint64_t v9 = MEMORY[0x263F8EE78], (result = sub_21FA26790()) == 0))
  {
LABEL_2:
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = sub_21F7C22DC;
    *(void *)(v5 + 24) = v3;
    uint64_t v6 = *(void *)(v1 + 48);
    *(void *)(v1 + 48) = sub_21F78EE70;
    *(void *)(v1 + 56) = v5;
    sub_21F76D5D8(v6);
    swift_beginAccess();
    uint64_t v7 = *(void *)(v1 + 40);
    *(void *)(v1 + 40) = a1;
    swift_retain();
    sub_21F7C22E8(v7);
    *(unsigned char *)(v1 + 16) = 1;
    swift_release();
    return v1;
  }
  uint64_t v10 = result;
  if (result >= 1)
  {
    long long v11 = (uint64_t *)(v9 + 32);
    do
    {
      uint64_t v12 = *v11;
      swift_weakInit();
      long long v13 = *(void **)(v12 + 32);
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v12 + 32) = v13;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        long long v13 = sub_21F76B290(0, v13[2] + 1, 1, v13);
        *(void *)(v12 + 32) = v13;
      }
      unint64_t v16 = v13[2];
      unint64_t v15 = v13[3];
      unint64_t v17 = v16 + 1;
      if (v16 >= v15 >> 1)
      {
        BOOL v18 = sub_21F76B290((void *)(v15 > 1), v16 + 1, 1, v13);
        unint64_t v17 = v16 + 1;
        long long v13 = v18;
        *(void *)(v12 + 32) = v18;
      }
      v13[2] = v17;
      sub_21F76C9DC((uint64_t)v19, (uint64_t)&v13[v16 + 4], &qword_26AD47910);
      swift_release();
      ++v11;
      --v10;
    }
    while (v10);
    goto LABEL_2;
  }
  __break(1u);
  return result;
}

BOOL sub_21F7C009C(uint64_t a1, double a2)
{
  uint64_t v4 = (*(void *)&a2 >> 52) & 0x7FFLL;
  unint64_t v5 = *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  uint64_t v6 = v4 | *(void *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (!v6)
  {
    uint64_t v12 = 0;
    BOOL result = 1;
    goto LABEL_25;
  }
  if (v4 == 2047) {
    goto LABEL_28;
  }
  uint64_t v7 = sub_21FA25FB0();
  if (v7 > 63) {
    goto LABEL_28;
  }
  uint64_t v8 = v7;
  uint64_t v9 = sub_21FA25F90();
  BOOL result = v8 >= v9;
  uint64_t v11 = v9 + __clz(__rbit64(v5));
  uint64_t v12 = v8 - v11;
  if (__OFSUB__(v8, v11))
  {
    __break(1u);
LABEL_27:
    if (a2 < 0.0)
    {
LABEL_36:
      LOBYTE(v6) = 0;
      uint64_t v12 = 0x8000000000000000;
      goto LABEL_25;
    }
LABEL_28:
    uint64_t v12 = 0;
    BOOL result = 0;
    LOBYTE(v6) = 1;
    goto LABEL_25;
  }
  if (v11 > 63)
  {
    if (v12 < -64 || v12 > 64) {
      goto LABEL_11;
    }
  }
  else if (v12 < -64 || v12 > 64)
  {
    goto LABEL_11;
  }
  if (v12 < 0) {
    goto LABEL_32;
  }
  if ((unint64_t)v12 < 0x40)
  {
    unint64_t v14 = v5 << v12;
    if (v8 != 63) {
      goto LABEL_17;
    }
LABEL_34:
    if (a2 < 0.0 && !v14) {
      goto LABEL_36;
    }
    goto LABEL_28;
  }
LABEL_11:
  if (v8 == 63) {
    goto LABEL_27;
  }
  uint64_t v13 = 0;
  unint64_t v14 = 0;
  if (v8 < 0) {
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v13 = 1 << v8;
LABEL_20:
  while (1)
  {
    uint64_t v12 = v14 | v13;
    if (a2 >= 0.0) {
      break;
    }
    if ((v12 & 0x8000000000000000) == 0)
    {
      LOBYTE(v6) = 0;
      uint64_t v12 = -v12;
      goto LABEL_25;
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    if ((unint64_t)v12 <= 0xFFFFFFFFFFFFFFC0) {
      goto LABEL_11;
    }
    unint64_t v14 = v5 >> -(char)v12;
    if (v8 == 63) {
      goto LABEL_34;
    }
LABEL_17:
    if ((v8 & 0x8000000000000000) == 0) {
      goto LABEL_19;
    }
    uint64_t v13 = 0;
  }
  if (v12 < 0) {
    goto LABEL_31;
  }
  LOBYTE(v6) = 0;
LABEL_25:
  *(void *)a1 = v12;
  *(unsigned char *)(a1 + 8) = v6;
  return result;
}

uint64_t sub_21F7C0224(void *a1, void *a2, char a3, void *a4)
{
  uint64_t v5 = a1[2];
  if (!v5 || !a2[2]) {
    goto LABEL_19;
  }
  uint64_t v49 = a2[2];
  uint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = a2[4];
  uint64_t v12 = (void *)*a4;
  unint64_t v14 = sub_21F91582C(v9, v8);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16)) {
    goto LABEL_34;
  }
  char v18 = v13;
  if (v12[3] >= v17)
  {
    if (a3)
    {
      unint64_t v21 = (void *)*a4;
      if (v13) {
        goto LABEL_11;
      }
    }
    else
    {
      sub_21F878780();
      unint64_t v21 = (void *)*a4;
      if (v18) {
        goto LABEL_11;
      }
    }
LABEL_14:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    char v22 = (uint64_t *)(v21[6] + 16 * v14);
    *char v22 = v9;
    v22[1] = v8;
    *(void *)(v21[7] + 8 * v14) = v11;
    uint64_t v23 = v21[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24)
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v21[2] = v25;
    if (v5 == 1)
    {
LABEL_18:
      swift_bridgeObjectRelease_n();
LABEL_19:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    goto LABEL_16;
  }
  sub_21F86DFAC(v17, a3 & 1);
  unint64_t v19 = sub_21F91582C(v9, v8);
  if ((v18 & 1) == (v20 & 1))
  {
    unint64_t v14 = v19;
    unint64_t v21 = (void *)*a4;
    if ((v18 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    *(void *)(v21[7] + 8 * v14) = v11;
    if (v5 == 1) {
      goto LABEL_18;
    }
LABEL_16:
    if (a1[2] < 2uLL)
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    if (v49 == 1) {
      goto LABEL_18;
    }
    uint64_t v28 = a1[6];
    uint64_t v27 = a1[7];
    swift_bridgeObjectRetain();
    uint64_t v29 = a2[5];
    uint64_t v30 = (void *)*a4;
    unint64_t v32 = sub_21F91582C(v28, v27);
    uint64_t v33 = v30[2];
    BOOL v34 = (v31 & 1) == 0;
    uint64_t v35 = v33 + v34;
    if (!__OFADD__(v33, v34))
    {
      char v36 = v31;
      uint64_t v37 = 0;
      uint64_t v48 = v49 - 2;
      uint64_t v50 = v5 - 2;
      uint64_t v38 = a1 + 9;
      do
      {
        if (v30[3] < v35)
        {
          sub_21F86DFAC(v35, 1);
          unint64_t v39 = sub_21F91582C(v28, v27);
          if ((v36 & 1) != (v40 & 1)) {
            goto LABEL_37;
          }
          unint64_t v32 = v39;
        }
        uint64_t v41 = (void *)*a4;
        if (v36)
        {
          swift_bridgeObjectRelease();
          *(void *)(v41[7] + 8 * v32) = v29;
        }
        else
        {
          v41[(v32 >> 6) + 8] |= 1 << v32;
          BOOL v42 = (uint64_t *)(v41[6] + 16 * v32);
          *BOOL v42 = v28;
          v42[1] = v27;
          *(void *)(v41[7] + 8 * v32) = v29;
          uint64_t v43 = v41[2];
          BOOL v24 = __OFADD__(v43, 1);
          uint64_t v44 = v43 + 1;
          if (v24) {
            goto LABEL_36;
          }
          v41[2] = v44;
        }
        if (v50 == v37) {
          goto LABEL_18;
        }
        if ((unint64_t)(v37 + 2) >= a1[2]) {
          goto LABEL_35;
        }
        if (v48 == v37) {
          goto LABEL_18;
        }
        uint64_t v28 = *(v38 - 1);
        uint64_t v27 = *v38;
        swift_bridgeObjectRetain();
        uint64_t v29 = a2[v37 + 6];
        uint64_t v30 = (void *)*a4;
        unint64_t v32 = sub_21F91582C(v28, v27);
        char v36 = v45;
        uint64_t v46 = v30[2];
        BOOL v47 = (v45 & 1) == 0;
        ++v37;
        v38 += 2;
        uint64_t v35 = v46 + v47;
      }
      while (!__OFADD__(v46, v47));
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
LABEL_37:
  uint64_t result = sub_21FA26990();
  __break(1u);
  return result;
}

uint64_t sub_21F7C0578(void *a1, void *a2, char a3, void *a4)
{
  uint64_t v5 = a1[2];
  if (!v5 || !a2[2]) {
    goto LABEL_19;
  }
  uint64_t v49 = a2[2];
  uint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = a2[4];
  uint64_t v12 = (void *)*a4;
  unint64_t v14 = sub_21F91582C(v9, v8);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16)) {
    goto LABEL_34;
  }
  char v18 = v13;
  if (v12[3] >= v17)
  {
    if (a3)
    {
      unint64_t v21 = (void *)*a4;
      if (v13) {
        goto LABEL_11;
      }
    }
    else
    {
      sub_21F879C54();
      unint64_t v21 = (void *)*a4;
      if (v18) {
        goto LABEL_11;
      }
    }
LABEL_14:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    char v22 = (uint64_t *)(v21[6] + 16 * v14);
    *char v22 = v9;
    v22[1] = v8;
    *(void *)(v21[7] + 8 * v14) = v11;
    uint64_t v23 = v21[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24)
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v21[2] = v25;
    if (v5 == 1)
    {
LABEL_18:
      swift_bridgeObjectRelease_n();
LABEL_19:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    goto LABEL_16;
  }
  sub_21F86FDF4(v17, a3 & 1);
  unint64_t v19 = sub_21F91582C(v9, v8);
  if ((v18 & 1) == (v20 & 1))
  {
    unint64_t v14 = v19;
    unint64_t v21 = (void *)*a4;
    if ((v18 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    *(void *)(v21[7] + 8 * v14) = v11;
    if (v5 == 1) {
      goto LABEL_18;
    }
LABEL_16:
    if (a1[2] < 2uLL)
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    if (v49 == 1) {
      goto LABEL_18;
    }
    uint64_t v28 = a1[6];
    uint64_t v27 = a1[7];
    swift_bridgeObjectRetain();
    uint64_t v29 = a2[5];
    uint64_t v30 = (void *)*a4;
    unint64_t v32 = sub_21F91582C(v28, v27);
    uint64_t v33 = v30[2];
    BOOL v34 = (v31 & 1) == 0;
    uint64_t v35 = v33 + v34;
    if (!__OFADD__(v33, v34))
    {
      char v36 = v31;
      uint64_t v37 = 0;
      uint64_t v48 = v49 - 2;
      uint64_t v50 = v5 - 2;
      uint64_t v38 = a1 + 9;
      do
      {
        if (v30[3] < v35)
        {
          sub_21F86FDF4(v35, 1);
          unint64_t v39 = sub_21F91582C(v28, v27);
          if ((v36 & 1) != (v40 & 1)) {
            goto LABEL_37;
          }
          unint64_t v32 = v39;
        }
        uint64_t v41 = (void *)*a4;
        if (v36)
        {
          swift_bridgeObjectRelease();
          *(void *)(v41[7] + 8 * v32) = v29;
        }
        else
        {
          v41[(v32 >> 6) + 8] |= 1 << v32;
          BOOL v42 = (uint64_t *)(v41[6] + 16 * v32);
          *BOOL v42 = v28;
          v42[1] = v27;
          *(void *)(v41[7] + 8 * v32) = v29;
          uint64_t v43 = v41[2];
          BOOL v24 = __OFADD__(v43, 1);
          uint64_t v44 = v43 + 1;
          if (v24) {
            goto LABEL_36;
          }
          v41[2] = v44;
        }
        if (v50 == v37) {
          goto LABEL_18;
        }
        if ((unint64_t)(v37 + 2) >= a1[2]) {
          goto LABEL_35;
        }
        if (v48 == v37) {
          goto LABEL_18;
        }
        uint64_t v28 = *(v38 - 1);
        uint64_t v27 = *v38;
        swift_bridgeObjectRetain();
        uint64_t v29 = a2[v37 + 6];
        uint64_t v30 = (void *)*a4;
        unint64_t v32 = sub_21F91582C(v28, v27);
        char v36 = v45;
        uint64_t v46 = v30[2];
        BOOL v47 = (v45 & 1) == 0;
        ++v37;
        v38 += 2;
        uint64_t v35 = v46 + v47;
      }
      while (!__OFADD__(v46, v47));
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
LABEL_37:
  uint64_t result = sub_21FA26990();
  __break(1u);
  return result;
}

void sub_21F7C08CC(void *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_21F7C08D8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_21F7676B0();
  swift_beginAccess();
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4 == 1)
  {
    uint64_t result = sub_21FA266E0();
    __break(1u);
  }
  else
  {
    *a2 = v4;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_21F7C097C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(void *)(a2 + 16))
  {
    uint64_t v6 = *a1;
    uint64_t v5 = a1[1];
    swift_bridgeObjectRetain();
    unint64_t v7 = sub_21F91582C(v6, v5);
    if (v8)
    {
      uint64_t v9 = *(void *)(*(void *)(a2 + 56) + 8 * v7);
      uint64_t result = swift_bridgeObjectRelease();
      *a3 = v9;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_21F7C09F8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(void *)(a2 + 16))
  {
    uint64_t v6 = *a1;
    uint64_t v5 = a1[1];
    swift_bridgeObjectRetain();
    unint64_t v7 = sub_21F91582C(v6, v5);
    if (v8)
    {
      uint64_t v9 = (uint64_t *)(*(void *)(a2 + 56) + 40 * v7);
      uint64_t v10 = *v9;
      uint64_t v11 = v9[2];
      uint64_t v12 = v9[3];
      uint64_t v13 = v9[4];
      swift_bridgeObjectRetain();
      uint64_t v14 = v9[1];
      uint64_t result = swift_bridgeObjectRelease();
      *a3 = v10;
      a3[1] = v14;
      a3[2] = v11;
      a3[3] = v12;
      a3[4] = v13;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_21F7C0AA8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(void *)(a2 + 16))
  {
    uint64_t v6 = *a1;
    uint64_t v5 = a1[1];
    swift_bridgeObjectRetain();
    unint64_t v7 = sub_21F91582C(v6, v5);
    if (v8)
    {
      uint64_t v9 = *(void *)(*(void *)(a2 + 56) + 8 * v7);
      swift_retain();
      uint64_t result = swift_bridgeObjectRelease();
      *a3 = v9;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_21F7C0B24@<X0>(uint64_t *a1@<X0>, void (*a2)(uint64_t *)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  a2(&v5);
  sub_21FA244B0();
  uint64_t result = sub_21FA245C0();
  *a3 = result;
  return result;
}

uint64_t sub_21F7C0BC8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_21F7C0C24()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_21F7C0C34@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21F7BC84C(a1, *(unsigned char *)(v2 + 16), a2);
}

uint64_t sub_21F7C0C3C()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_21F7C0C4C@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21F7BC980(a1, *(unsigned char *)(v2 + 16), a2);
}

uint64_t sub_21F7C0C54()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_21F7C0C64@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21F7BCAB4(a1, *(unsigned char *)(v2 + 16), a2);
}

uint64_t sub_21F7C0C6C()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_21F7C0C7C@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21F7BCBE8(a1, *(unsigned char *)(v2 + 16), a2);
}

uint64_t sub_21F7C0C84(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F7C0CE0()
{
  return MEMORY[0x270FA0238](v0, 25, 7);
}

uint64_t sub_21F7C0CF0@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21F7BC7D4(a1, *(long double *)(v2 + 16), *(unsigned char *)(v2 + 24), a2);
}

uint64_t sub_21F7C0CFC(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F7C0D70()
{
  return MEMORY[0x270FA0238](v0, 25, 7);
}

uint64_t sub_21F7C0D80(uint64_t **a1)
{
  return sub_21F7BC748(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t sub_21F7C0D8C()
{
  return MEMORY[0x270FA0238](v0, 25, 7);
}

uint64_t sub_21F7C0D9C(uint64_t **a1)
{
  return sub_21F7BC4AC(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t sub_21F7C0DA8()
{
  return MEMORY[0x270FA0238](v0, 25, 7);
}

uint64_t sub_21F7C0DB8(void **a1)
{
  return sub_21F7744E8(a1, (uint64_t (*)(void, void, void, void))sub_21F7BC380);
}

uint64_t sub_21F7C0DD0()
{
  return MEMORY[0x270FA0238](v0, 25, 7);
}

uint64_t sub_21F7C0DE0()
{
  return MEMORY[0x270FA0238](v0, 18, 7);
}

uint64_t sub_21F7C0DF0()
{
  return MEMORY[0x270FA0238](v0, 25, 7);
}

uint64_t sub_21F7C0E00(uint64_t *a1, char a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = *a1;
  char v8 = *((unsigned char *)a1 + 8);
  sub_21F784A34((uint64_t)(a1 + 8), (uint64_t)v56);
  sub_21F784A34((uint64_t)v56, (uint64_t)&v57);
  switch(v59 >> 5)
  {
    case 1:
      v59 &= 0x1Fu;
      char v16 = v59;
      uint64_t v17 = v57;
      uint64_t v18 = v58;
      uint64_t v49 = a3;
      double v51 = &v49;
      swift_retain();
      sub_21F7C0C84((uint64_t)v56);
      v60[0] = sub_21F802AF0(v17, v18, v16);
      v52 = v60;
      uint64_t v19 = swift_allocObject();
      *(void *)(v19 + 16) = v7;
      *(unsigned char *)(v19 + 24) = v8;
      *(unsigned char *)(v19 + 25) = a2;
      uint64_t v20 = sub_21F7FCAC4((uint64_t **)&v51, (uint64_t)sub_21F7C1F7C, v19);
      goto LABEL_11;
    case 2:
      v59 &= 0x1Fu;
      char v21 = v59;
      uint64_t v22 = v57;
      uint64_t v23 = v58;
      uint64_t v49 = a3;
      double v51 = &v49;
      swift_retain();
      sub_21F7C0C84((uint64_t)v56);
      v60[0] = sub_21F802BB4(v22, v23, v21);
      v52 = v60;
      uint64_t v24 = swift_allocObject();
      *(void *)(v24 + 16) = v7;
      *(unsigned char *)(v24 + 24) = v8;
      *(unsigned char *)(v24 + 25) = a2;
      uint64_t v20 = sub_21F7FCC84((uint64_t **)&v51, (uint64_t)sub_21F7C1F20, v24);
      goto LABEL_11;
    case 3:
      v59 &= 0x1Fu;
      char v25 = v59;
      uint64_t v26 = v57;
      uint64_t v27 = v58;
      uint64_t v49 = a3;
      double v51 = &v49;
      swift_retain();
      sub_21F7C0C84((uint64_t)v56);
      v60[0] = sub_21F802C78(v26, v27, v25);
      v52 = v60;
      uint64_t v28 = swift_allocObject();
      *(void *)(v28 + 16) = v7;
      *(unsigned char *)(v28 + 24) = v8;
      uint64_t v20 = sub_21F7FCE44((uint64_t **)&v51, (uint64_t)sub_21F7C1F04, v28);
      goto LABEL_11;
    case 4:
      v59 &= 0x1Fu;
      char v29 = v59;
      uint64_t v30 = v57;
      uint64_t v31 = v58;
      uint64_t v49 = a3;
      double v51 = &v49;
      swift_retain();
      sub_21F7C0C84((uint64_t)v56);
      v60[0] = sub_21F802EAC(v30, v31, v29);
      v52 = v60;
      uint64_t v32 = swift_allocObject();
      *(void *)(v32 + 16) = v7;
      *(unsigned char *)(v32 + 24) = v8;
      uint64_t v20 = sub_21F7FD1C4((uint64_t **)&v51, (uint64_t)sub_21F7C1EA4, v32);
      goto LABEL_11;
    case 5:
      v59 &= 0x1Fu;
      char v34 = v59;
      uint64_t v35 = v57;
      uint64_t v36 = v58;
      uint64_t v49 = a3;
      double v51 = &v49;
      swift_retain();
      sub_21F7C0C84((uint64_t)v56);
      v60[0] = sub_21F802D3C(v35, v36, v34);
      v52 = v60;
      uint64_t v37 = swift_allocObject();
      *(void *)(v37 + 16) = v7;
      *(unsigned char *)(v37 + 24) = v8;
      uint64_t v20 = sub_21F7FD004((uint64_t **)&v51, (uint64_t)sub_21F7C1EE8, v37);
      goto LABEL_11;
    case 6:
      v59 &= 0x1Fu;
      char v38 = v59;
      uint64_t v39 = v57;
      uint64_t v40 = v58;
      uint64_t v49 = a3;
      double v51 = &v49;
      swift_retain();
      sub_21F7C0C84((uint64_t)v56);
      v60[0] = sub_21F802DE8(v39, v40, v38);
      v52 = v60;
      uint64_t v41 = swift_allocObject();
      *(void *)(v41 + 16) = v7;
      *(unsigned char *)(v41 + 24) = v8;
      uint64_t v20 = sub_21F7FD5E0((uint64_t **)&v51, (uint64_t)sub_21F7C1E60, v41);
LABEL_11:
      uint64_t v42 = v20;
      sub_21F7C0CFC((uint64_t)v56);
      return v42;
    case 7:
      v59 &= 0x1Fu;
      sub_21F7C0BC8((uint64_t)&v57, (uint64_t)v60);
      sub_21F7C0BC8((uint64_t)v60, (uint64_t)&v49);
      switch((char)v50)
      {
        case 1:
          char v45 = v49;
          uint64_t v55 = (uint64_t)a3;
          double v51 = (uint64_t **)&v55;
          swift_retain();
          uint64_t v54 = sub_21F802850((uint64_t)v45);
          v52 = &v54;
          uint64_t v15 = sub_21F7FDBF0((uint64_t **)&v51, (uint64_t)sub_21F7BD2A8, 0);
          break;
        case 2:
          uint64_t v43 = v49;
          uint64_t v55 = (uint64_t)a3;
          double v51 = (uint64_t **)&v55;
          swift_retain();
          uint64_t v54 = sub_21F802844((uint64_t)v43);
          v52 = &v54;
          uint64_t v15 = sub_21F7FD7D4((uint64_t **)&v51, (uint64_t)sub_21F7BD154, 0);
          break;
        case 3:
          uint64_t v44 = v49;
          uint64_t v55 = (uint64_t)a3;
          double v51 = (uint64_t **)&v55;
          swift_retain();
          uint64_t v54 = sub_21F802838((uint64_t)v44);
          v52 = &v54;
          uint64_t v15 = sub_21F7FD614((uint64_t **)&v51, (uint64_t)sub_21F7BD008, 0);
          break;
        default:
          uint64_t v33 = v49;
          uint64_t v55 = (uint64_t)a3;
          double v51 = (uint64_t **)&v55;
          swift_retain();
          uint64_t v54 = sub_21F80285C((uint64_t)v33);
          v52 = &v54;
          uint64_t v15 = sub_21F7FDC24((uint64_t **)&v51, (uint64_t)sub_21F7BD41C, 0);
          break;
      }
      return v15;
    default:
      v59 &= 0x1Fu;
      uint64_t v9 = v58;
      uint64_t v10 = sub_21F784A90(v57);
      uint64_t v11 = sub_21F784A90(v9);
      v60[0] = a4;
      uint64_t v54 = v11;
      uint64_t v55 = v10;
      double v51 = (uint64_t **)v60;
      v52 = &v55;
      v53 = &v54;
      uint64_t v12 = swift_allocObject();
      *(unsigned char *)(v12 + 16) = a2;
      *(unsigned char *)(v12 + 17) = 0;
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v13 = sub_21F777318((uint64_t **)&v51, (uint64_t)sub_21F7C25E0, v12);
      swift_release();
      swift_release();
      uint64_t v47 = v13;
      uint64_t v48 = a3;
      uint64_t v49 = (uint64_t *)&v48;
      uint64_t v50 = &v47;
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = v7;
      *(unsigned char *)(v14 + 24) = v8;
      *(unsigned char *)(v14 + 25) = a2;
      swift_retain();
      return sub_21F7FCAC4(&v49, (uint64_t)sub_21F7C25E4, v14);
  }
}

uint64_t sub_21F7C1480(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  unint64_t v2 = 0;
  uint64_t v3 = result + 40;
  uint64_t v4 = -(uint64_t)v1;
  uint64_t v5 = MEMORY[0x263F8EE78];
  uint64_t v15 = result + 40;
  unint64_t v16 = *(void *)(result + 16);
  do
  {
    if (v2 <= v1) {
      unint64_t v6 = v1;
    }
    else {
      unint64_t v6 = v2;
    }
    uint64_t v7 = -(uint64_t)v6;
    for (i = (uint64_t *)(v3 + 16 * v2++); ; i += 2)
    {
      if (v7 + v2 == 1)
      {
        __break(1u);
        return result;
      }
      uint64_t v10 = *(i - 1);
      uint64_t v9 = *i;
      swift_bridgeObjectRetain_n();
      char v11 = sub_21F7D5038(&v17, v10, v9);
      swift_bridgeObjectRelease();
      if (v11) {
        break;
      }
      uint64_t result = swift_bridgeObjectRelease();
      ++v2;
      if (v4 + v2 == 1) {
        return v5;
      }
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = v5;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_21F7A24D4(0, *(void *)(v5 + 16) + 1, 1);
      uint64_t v5 = v18;
    }
    unint64_t v13 = *(void *)(v5 + 16);
    unint64_t v12 = *(void *)(v5 + 24);
    if (v13 >= v12 >> 1)
    {
      uint64_t result = (uint64_t)sub_21F7A24D4((char *)(v12 > 1), v13 + 1, 1);
      uint64_t v5 = v18;
    }
    *(void *)(v5 + 16) = v13 + 1;
    uint64_t v14 = v5 + 16 * v13;
    *(void *)(v14 + 32) = v10;
    *(void *)(v14 + 40) = v9;
    uint64_t v3 = v15;
    unint64_t v1 = v16;
  }
  while (v4 + v2);
  return v5;
}

uint64_t sub_21F7C15EC()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_21F7C1624()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_21F7C165C@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_21F7BDADC(*(void (**)(uint64_t *__return_ptr, double, void))(v2 + 32), *a1, *(double *)(v2 + 16), *(double *)(v2 + 24));
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v5 & 1;
  return result;
}

void *sub_21F7C169C@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, double, void))(v2 + 32))(&v6, (*a1 - *(double *)(v2 + 16)) / (*(double *)(v2 + 24) - *(double *)(v2 + 16)), 0);
  char v5 = v7;
  *(void *)a2 = v6;
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_21F7C1704()
{
  return sub_21F7C1898(MEMORY[0x263F8EEA0]);
}

uint64_t sub_21F7C171C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(double (**)(uint64_t *))(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 32);
  uint64_t v8 = *a1;
  double v6 = v4(&v8);
  *a2 = sub_21F7C17A4(v5, v6);

  return swift_retain();
}

uint64_t sub_21F7C1788()
{
  return sub_21F7C1978(MEMORY[0x263F8EEA0]);
}

uint64_t sub_21F7C17A4(uint64_t result, double a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (a2 < 0.0 || a2 > 1.0)
  {
    if (v2) {
      return *(void *)(result + 32);
    }
    __break(1u);
    goto LABEL_16;
  }
  double v4 = floor((double)v2 * a2);
  if ((~*(void *)&v4 & 0x7FF0000000000000) == 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  unint64_t v5 = v2 - 1;
  if (((uint64_t)v4 & ~((uint64_t)v4 >> 63)) < v2 - 1) {
    unint64_t v5 = (uint64_t)v4 & ~((uint64_t)v4 >> 63);
  }
  if (v5 < v2) {
    return *(void *)(result + 8 * v5 + 32);
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_21F7C1844()
{
  return sub_21F7C1898(MEMORY[0x263F8EED8]);
}

uint64_t sub_21F7C185C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_21F7C0B24(a1, *(void (**)(uint64_t *))(v2 + 16), a2);
}

uint64_t sub_21F7C1868()
{
  return sub_21F7C1978(MEMORY[0x263F8EED8]);
}

uint64_t sub_21F7C1880()
{
  return sub_21F7C1898(MEMORY[0x263F8EEA0]);
}

uint64_t sub_21F7C1898(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 32));

  return MEMORY[0x270FA0238](v1, 40, 7);
}

uint64_t sub_21F7C18E8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  double v4 = *(double (**)(uint64_t *))(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 32);
  uint64_t v9 = *a1;
  double v6 = v4(&v9);
  sub_21F7E3BFC(v5, (uint64_t)v10, v6);
  long long v7 = v10[1];
  *(_OWORD *)a2 = v10[0];
  *(_OWORD *)(a2 + 16) = v7;
  *(void *)(a2 + 32) = v11;
  return sub_21F7C1A10((uint64_t)v10);
}

uint64_t sub_21F7C1960()
{
  return sub_21F7C1978(MEMORY[0x263F8EEA0]);
}

uint64_t sub_21F7C1978(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));
  swift_release();

  return MEMORY[0x270FA0238](v1, 40, 7);
}

void *sub_21F7C19C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, void, uint64_t))(v1 + 24))(&v5, 0, 1);
  char v4 = v6;
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v4;
  return result;
}

uint64_t sub_21F7C1A10(uint64_t a1)
{
  return a1;
}

void *sub_21F7C1A3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  void *(*v6)(uint64_t *__return_ptr, void *);
  void *result;
  void v8[2];
  char v9;
  uint64_t v10;

  char v6 = *(void *(**)(uint64_t *__return_ptr, void *))(v4 + 16);
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v9 = a3;
  uint64_t result = v6(&v10, v8);
  *a4 = v10;
  return result;
}

void *sub_21F7C1A88@<X0>(void *a1@<X8>, double a2@<D0>)
{
  return sub_21F7C1ADC(0, a1, a2);
}

void *sub_21F7C1A90@<X0>(double *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, double))(v2 + 16))(&v5, *a1);
  *a2 = v5;
  return result;
}

void *sub_21F7C1AD4@<X0>(void *a1@<X8>, double a2@<D0>)
{
  return sub_21F7C1ADC(1, a1, a2);
}

void *sub_21F7C1ADC@<X0>(uint64_t a1@<X0>, void *a2@<X8>, double a3@<D0>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, void, void, uint64_t))(v3 + 16))(&v6, *(void *)&a3, 0, a1);
  *a2 = v6;
  return result;
}

double sub_21F7C1B28@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  void (*v6)(void *__return_ptr, void *);
  double result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void v11[2];
  char v12;
  void v13[5];

  uint64_t v6 = *(void (**)(void *__return_ptr, void *))(v4 + 16);
  v11[0] = a1;
  v11[1] = a2;
  unint64_t v12 = a3;
  v6(v13, v11);
  uint64_t v8 = v13[1];
  uint64_t result = *(double *)&v13[2];
  uint64_t v9 = v13[3];
  uint64_t v10 = v13[4];
  *(void *)a4 = v13[0];
  *(void *)(a4 + 8) = v8;
  *(double *)(a4 + 16) = result;
  *(void *)(a4 + 24) = v9;
  *(void *)(a4 + 32) = v10;
  return result;
}

double sub_21F7C1B8C@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  return sub_21F7C1BF8(0, a1, a2);
}

double sub_21F7C1B94@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr, double))(v2 + 16))(v8, *a1);
  uint64_t v5 = v8[1];
  double result = *(double *)&v8[2];
  uint64_t v6 = v8[3];
  uint64_t v7 = v8[4];
  *(void *)a2 = v8[0];
  *(void *)(a2 + 8) = v5;
  *(double *)(a2 + 16) = result;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = v7;
  return result;
}

double sub_21F7C1BF0@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  return sub_21F7C1BF8(1, a1, a2);
}

double sub_21F7C1BF8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  (*(void (**)(void *__return_ptr, void, void, uint64_t))(v3 + 16))(v9, *(void *)&a3, 0, a1);
  uint64_t v6 = v9[1];
  double result = *(double *)&v9[2];
  uint64_t v7 = v9[3];
  uint64_t v8 = v9[4];
  *(void *)a2 = v9[0];
  *(void *)(a2 + 8) = v6;
  *(double *)(a2 + 16) = result;
  *(void *)(a2 + 24) = v7;
  *(void *)(a2 + 32) = v8;
  return result;
}

uint64_t sub_21F7C1C5C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = *(uint64_t (**)(void *))(v3 + 16);
  v6[0] = a1;
  v6[1] = a2;
  char v7 = a3;
  return v4(v6);
}

uint64_t sub_21F7C1C98(double a1)
{
  return (*(uint64_t (**)(void, void, void))(v1 + 16))(*(void *)&a1, 0, 0);
}

uint64_t sub_21F7C1CCC(double *a1)
{
  return (*(uint64_t (**)(double))(v1 + 16))(*a1);
}

uint64_t sub_21F7C1CF8(double a1)
{
  return (*(uint64_t (**)(void, void, uint64_t))(v1 + 16))(*(void *)&a1, 0, 1);
}

double sub_21F7C1D2C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, double *a4@<X8>)
{
  void (*v6)(double *__return_ptr, void *);
  double result;
  void v8[2];
  char v9;
  double v10;

  uint64_t v6 = *(void (**)(double *__return_ptr, void *))(v4 + 16);
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v9 = a3;
  v6(&v10, v8);
  double result = v10;
  *a4 = v10;
  return result;
}

uint64_t sub_21F7C1D78()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

double sub_21F7C1DB0@<D0>(double *a1@<X8>, double a2@<D0>)
{
  return sub_21F7C1E04(0, a1, a2);
}

double sub_21F7C1DB8@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  (*(void (**)(double *__return_ptr, double))(v2 + 16))(&v5, *a1);
  double result = v5;
  *a2 = v5;
  return result;
}

double sub_21F7C1DFC@<D0>(double *a1@<X8>, double a2@<D0>)
{
  return sub_21F7C1E04(1, a1, a2);
}

double sub_21F7C1E04@<D0>(uint64_t a1@<X0>, double *a2@<X8>, double a3@<D0>)
{
  (*(void (**)(double *__return_ptr, void, void, uint64_t))(v3 + 16))(&v6, *(void *)&a3, 0, a1);
  double result = v6;
  *a2 = v6;
  return result;
}

uint64_t sub_21F7C1E50()
{
  return MEMORY[0x270FA0238](v0, 25, 7);
}

uint64_t sub_21F7C1E60(uint64_t **a1)
{
  return sub_21F7BCF6C(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), (uint64_t (*)(uint64_t, uint64_t))sub_21F7BF55C);
}

uint64_t sub_21F7C1E94()
{
  return MEMORY[0x270FA0238](v0, 25, 7);
}

uint64_t sub_21F7C1EA4(uint64_t **a1)
{
  return sub_21F7BCF6C(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), (uint64_t (*)(uint64_t, uint64_t))sub_21F7BF2D4);
}

uint64_t sub_21F7C1ED8()
{
  return MEMORY[0x270FA0238](v0, 25, 7);
}

uint64_t sub_21F7C1EE8@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21F7BCEA4(a1, *(void *)(v2 + 16), *(unsigned char *)(v2 + 24), a2);
}

uint64_t sub_21F7C1EF4()
{
  return MEMORY[0x270FA0238](v0, 25, 7);
}

uint64_t sub_21F7C1F04@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21F7BCDDC(a1, *(void *)(v2 + 16), *(unsigned char *)(v2 + 24), a2);
}

uint64_t sub_21F7C1F10()
{
  return MEMORY[0x270FA0238](v0, 26, 7);
}

uint64_t sub_21F7C1F20(uint64_t **a1)
{
  return sub_21F7BCD14(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), *(unsigned char *)(v1 + 25), (uint64_t (*)(uint64_t, uint64_t))sub_21F7BDF18, (uint64_t (*)(uint64_t, uint64_t))sub_21F7BE894);
}

uint64_t sub_21F7C1F6C()
{
  return MEMORY[0x270FA0238](v0, 26, 7);
}

uint64_t sub_21F7C1F7C(uint64_t **a1)
{
  return sub_21F7BCD14(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), *(unsigned char *)(v1 + 25), (uint64_t (*)(uint64_t, uint64_t))sub_21F7BDB30, (uint64_t (*)(uint64_t, uint64_t))sub_21F7BE300);
}

uint64_t sub_21F7C1FC8()
{
  return MEMORY[0x270FA0238](v0, 18, 7);
}

uint64_t sub_21F7C1FD8()
{
  return MEMORY[0x270FA0238](v0, 26, 7);
}

uint64_t sub_21F7C1FE8()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

void sub_21F7C2020(uint64_t *a1@<X0>, double *a2@<X8>)
{
  *a2 = sub_21F7BFA88(*a1, a1[1], *(void *)(v2 + 16));
}

uint64_t sub_21F7C2054()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_21F7C208C@<X0>(double *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_21F7C20EC(a1, a2);
}

void sub_21F7C20A4(uint64_t *a1@<X0>, double *a2@<X8>)
{
  *a2 = sub_21F7BFC78(*a1, a1[1], v2);
}

uint64_t sub_21F7C20D8@<X0>(double *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_21F7C20EC(a1, a2);
}

uint64_t sub_21F7C20EC@<X0>(double *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_21F7BFB0C(*(void *)(v2 + 40), *a1, *(double *)(v2 + 16), *(double *)(v2 + 24), *(double *)(v2 + 32));
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_21F7C2128@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_21F7C0AA8(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_21F7C2130()
{
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_21F7C2170@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_21F7BFD24(*a1, a1[1], *(void *)(v2 + 16), *(void *)(v2 + 24));
  *a2 = result;
  return result;
}

uint64_t sub_21F7C21A4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_21F7C2200@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21F7BFDDC(*a1, a1[1], *(void *)(v2 + 16), a2);
}

uint64_t sub_21F7C2210(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_21F7C226C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_21F7C09F8(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_21F7C2274@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_21F7C097C(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_21F7C227C()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_21F7C228C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_21F7BC05C(a1, a2);
}

uint64_t sub_21F7C2294(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_21F7C22D4@<X0>(void *a1@<X8>)
{
  return sub_21F7C08D8(v1, a1);
}

uint64_t sub_21F7C22DC@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_21F7C22E8(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_21F7C22F8(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_21F7C2308(uint64_t a1)
{
  void (*v2)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v4;
  uint64_t v5;

  uint64_t v2 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 16);
  uint64_t v5 = a1;
  v2(&v4, &v5);
  return v4;
}

uint64_t sub_21F7C2348@<X0>(void *a1@<X8>)
{
  *a1 = v1;
  return swift_retain();
}

uint64_t sub_21F7C2354()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

void sub_21F7C2364(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

uint64_t sub_21F7C2370()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

double sub_21F7C2380@<D0>(double *a1@<X8>)
{
  double result = *(double *)(v1 + 16);
  *a1 = result;
  return result;
}

uint64_t sub_21F7C238C()
{
  return sub_21F7C240C(MEMORY[0x263F07920]);
}

uint64_t sub_21F7C23A4@<X0>(uint64_t a1@<X8>)
{
  return sub_21F7C24BC(MEMORY[0x263F07920], a1);
}

uint64_t sub_21F7C23BC(uint64_t a1)
{
  return sub_21F811598(a1, *(void (**)(void))(v1 + 16));
}

uint64_t sub_21F7C23C4()
{
  return sub_21F7C240C(MEMORY[0x263F07690]);
}

uint64_t sub_21F7C23DC@<X0>(uint64_t a1@<X8>)
{
  return sub_21F7C24BC(MEMORY[0x263F07690], a1);
}

uint64_t sub_21F7C23F4()
{
  return sub_21F7C240C(MEMORY[0x263F18DD8]);
}

uint64_t sub_21F7C240C(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return MEMORY[0x270FA0238](v1, v6, v7);
}

uint64_t sub_21F7C24A4@<X0>(uint64_t a1@<X8>)
{
  return sub_21F7C24BC(MEMORY[0x263F18DD8], a1);
}

uint64_t sub_21F7C24BC@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return v6(a2, v7, v4);
}

uint64_t sub_21F7C2538()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

__n128 sub_21F7C2548@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[1];
  *a1 = result;
  return result;
}

uint64_t sub_21F7C25E8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = sub_21FA24970();
    unint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 28);
    uint64_t v14 = v7 + v13;
    uint64_t v15 = (uint64_t)a2 + v13;
    long long v16 = *(_OWORD *)(v15 + 16);
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    *(_OWORD *)(v14 + 16) = v16;
    *(unsigned char *)(v14 + 32) = *(unsigned char *)(v15 + 32);
  }
  return v7;
}

uint64_t sub_21F7C2700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_21FA24970();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  long long v13 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v13;
  *(unsigned char *)(v11 + 32) = *(unsigned char *)(v12 + 32);
  return a1;
}

uint64_t sub_21F7C27B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_21FA24970();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  long long v13 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v13;
  *(unsigned char *)(v11 + 32) = *(unsigned char *)(v12 + 32);
  return a1;
}

uint64_t sub_21F7C2868(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_21FA24970();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

void *sub_21F7C2918(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *__n128 result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_21FA24970();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_21F7C29C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_21FA24890();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F772024(a1, (uint64_t)v14);
  if (v15)
  {
    sub_21F77F300(v14, (uint64_t)v12);
    sub_21F77E098((uint64_t)v12, (uint64_t)v11);
    sub_21F76CA40(&qword_26AD47960);
    if (swift_dynamicCast())
    {
      sub_21FA24870();
      swift_release();
    }
    else if (*(unsigned char *)(a1 + 41) == 1 || (sub_21F76C9DC(a2, (uint64_t)&v16, &qword_26AD4A408), (v17 & 1) == 0))
    {
      sub_21F77E0FC(v12, v13);
      v11[3] = sub_21FA24DA0();
      v11[4] = swift_getWitnessTable();
      sub_21F77E8F8(v11);
      sub_21FA24480();
      sub_21FA24880();
      _s6Charts15AnyChartContentVwxx_0((uint64_t)v11);
    }
    else
    {
      sub_21F77E0FC(v12, v13);
      sub_21FA24880();
    }
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v9, v6);
    return _s6Charts15AnyChartContentVwxx_0((uint64_t)v12);
  }
  else
  {
    sub_21FA24870();
    return swift_release();
  }
}

unint64_t sub_21F7C2CC0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_21FA25910();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))(v6, v1, v2, v4);
  int v7 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v6, v2);
  if (v7 == *MEMORY[0x263F1B998])
  {
    uint64_t v8 = 0;
    unsigned __int8 v9 = 0;
  }
  else if (v7 == *MEMORY[0x263F1B9B8])
  {
    unsigned __int8 v9 = 0;
    uint64_t v8 = 1;
  }
  else if (v7 == *MEMORY[0x263F1B9A0])
  {
    unsigned __int8 v9 = 0;
    uint64_t v8 = 2;
  }
  else if (v7 == *MEMORY[0x263F1B9B0])
  {
    unsigned __int8 v9 = 0;
    uint64_t v8 = 3;
  }
  else if (v7 == *MEMORY[0x263F1B990])
  {
    unsigned __int8 v9 = 0;
    uint64_t v8 = 4;
  }
  else if (v7 == *MEMORY[0x263F1B9A8])
  {
    unsigned __int8 v9 = 0;
    uint64_t v8 = 5;
  }
  else if (v7 == *MEMORY[0x263F1B938])
  {
    unsigned __int8 v9 = 0;
    uint64_t v8 = 6;
  }
  else if (v7 == *MEMORY[0x263F1B9C0])
  {
    unsigned __int8 v9 = 0;
    uint64_t v8 = 7;
  }
  else if (v7 == *MEMORY[0x263F1B9D8])
  {
    unsigned __int8 v9 = 0;
    uint64_t v8 = 8;
  }
  else if (v7 == *MEMORY[0x263F1B9D0])
  {
    unsigned __int8 v9 = 0;
    uint64_t v8 = 9;
  }
  else if (v7 == *MEMORY[0x263F1B940])
  {
    unsigned __int8 v9 = 0;
    uint64_t v8 = 10;
  }
  else if (v7 == *MEMORY[0x263F1B9C8])
  {
    unsigned __int8 v9 = 0;
    uint64_t v8 = 11;
  }
  else if (v7 == *MEMORY[0x263F1B980])
  {
    unsigned __int8 v9 = 0;
    uint64_t v8 = 12;
  }
  else if (v7 == *MEMORY[0x263F1B958])
  {
    unsigned __int8 v9 = 0;
    uint64_t v8 = 13;
  }
  else if (v7 == *MEMORY[0x263F1B988])
  {
    unsigned __int8 v9 = 0;
    uint64_t v8 = 14;
  }
  else if (v7 == *MEMORY[0x263F1B948])
  {
    unsigned __int8 v9 = 0;
    uint64_t v8 = 15;
  }
  else if (v7 == *MEMORY[0x263F1B960])
  {
    unsigned __int8 v9 = 0;
    uint64_t v8 = 20;
  }
  else if (v7 == *MEMORY[0x263F1B978])
  {
    unsigned __int8 v9 = 0;
    uint64_t v8 = 21;
  }
  else if (v7 == *MEMORY[0x263F1B970])
  {
    unsigned __int8 v9 = 0;
    uint64_t v8 = 23;
  }
  else if (v7 == *MEMORY[0x263F1B950])
  {
    unsigned __int8 v9 = 0;
    uint64_t v8 = 26;
  }
  else if (v7 == *MEMORY[0x263F1B968])
  {
    unsigned __int8 v9 = 0;
    uint64_t v8 = 27;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    if (qword_26AD49C10 != -1) {
      swift_once();
    }
    id v10 = (id)qword_26AD52498;
    sub_21FA26240();
    sub_21F76CA40(&qword_26AD44C40);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_21FA28550;
    uint64_t v15 = 0;
    unint64_t v16 = 0xE000000000000000;
    sub_21FA26510();
    sub_21FA25D40();
    sub_21FA266A0();
    uint64_t v12 = v15;
    unint64_t v13 = v16;
    *(void *)(v11 + 56) = MEMORY[0x263F8D310];
    *(void *)(v11 + 64) = sub_21F7C4884();
    *(void *)(v11 + 32) = v12;
    *(void *)(v11 + 40) = v13;
    sub_21FA243E0();

    swift_bridgeObjectRelease();
    uint64_t v8 = 0;
    unsigned __int8 v9 = 1;
  }
  return v8 | ((unint64_t)v9 << 32);
}

uint64_t sub_21F7C3190@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_21F76C9DC(a3, (uint64_t)v33, &qword_26AD4A408);
  CGFloat v8 = *(double *)v33;
  CGFloat v9 = *(double *)&v33[1];
  double v10 = *(double *)&v33[2];
  double v11 = *(double *)&v33[3];
  char v12 = v34;
  long long v30 = *(_OWORD *)(a1 + 1152);
  long long v31 = *(_OWORD *)(a1 + 1112);
  uint64_t v13 = *(void *)(a1 + 1168);
  uint64_t v14 = *(void *)(a1 + 1176);
  sub_21F78B868(a1 + 400, (uint64_t)v32);
  uint64_t v15 = *(void *)a1;
  sub_21F76CA40(&qword_26AD47A88);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_21FA28550;
  *(void *)(v16 + 32) = v15;
  sub_21F78B868((uint64_t)v32, v16 + 104);
  *(void *)(v16 + 40) = 0x3FF0000000000000;
  *(void *)(v16 + 48) = a2;
  *(_OWORD *)(v16 + 56) = v31;
  *(_OWORD *)(v16 + 72) = v30;
  *(void *)(v16 + 88) = v13;
  *(void *)(v16 + 96) = v14;
  unint64_t v17 = sub_21F78C43C(v16);
  swift_setDeallocating();
  swift_retain();
  sub_21F76CA40(qword_26AD470A8);
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_21F78A6F8((uint64_t)v32);
  *(void *)a4 = v17;
  *(unsigned char *)(a4 + 8) = *(unsigned char *)(a1 + 1144);
  uint64_t v18 = a1 + *(int *)(type metadata accessor for ChartModel.Scenegraph() + 56);
  uint64_t v19 = type metadata accessor for SgCanvasRenderer(0);
  uint64_t v20 = a4 + *(int *)(v19 + 24);
  uint64_t v21 = sub_21FA24970();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v20, v18, v21);
  sub_21F76C9DC(a3, (uint64_t)v32, &qword_26AD4A408);
  if (v32[32])
  {
    swift_release();
  }
  else
  {
    v35.origin.x = v8;
    v35.origin.y = v9;
    v35.size.width = v10;
    v35.size.height = v11;
    CGFloat v22 = floor(CGRectGetMinX(v35) * 0.00390625) * 256.0;
    v36.origin.x = v8;
    v36.origin.y = v9;
    v36.size.width = v10;
    v36.size.height = v11;
    CGFloat v23 = floor(CGRectGetMinY(v36) * 0.00390625) * 256.0;
    v37.origin.x = v8;
    v37.origin.y = v9;
    v37.size.width = v10;
    v37.size.height = v11;
    CGFloat MaxX = CGRectGetMaxX(v37);
    v38.size.height = v11;
    double v25 = ceil(MaxX * 0.00390625) * 256.0;
    v38.origin.x = v8;
    v38.origin.y = v9;
    v38.size.width = v10;
    double MaxY = CGRectGetMaxY(v38);
    swift_release();
    char v12 = 0;
    double v27 = ceil(MaxY * 0.00390625) * 256.0;
    double v10 = v25 - v22;
    double v11 = v27 - v23;
    CGFloat v8 = v22;
    CGFloat v9 = v23;
  }
  uint64_t result = sub_21F76B064(a1, (uint64_t (*)(void))type metadata accessor for ChartModel.Scenegraph);
  uint64_t v29 = a4 + *(int *)(v19 + 28);
  *(CGFloat *)uint64_t v29 = v8;
  *(CGFloat *)(v29 + 8) = v9;
  *(double *)(v29 + 16) = v10;
  *(double *)(v29 + 24) = v11;
  *(unsigned char *)(v29 + 32) = v12;
  return result;
}

uint64_t sub_21F7C346C(uint64_t *a1, uint64_t a2, char **a3)
{
  uint64_t v6 = type metadata accessor for SgGroup(0);
  MEMORY[0x270FA5388](v6);
  CGFloat v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = swift_beginAccess();
  uint64_t v10 = *a1;
  if (*(void *)(*a1 + 16))
  {
    sub_21F76B124(a2, (uint64_t)v8, type metadata accessor for SgGroup);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((void *)v8 + 1) = v10;
    uint64_t v11 = swift_allocBox();
    sub_21F76B124((uint64_t)v8, v12, type metadata accessor for SgGroup);
    swift_beginAccess();
    uint64_t v13 = *a3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v13;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v13 = sub_21F76B18C(0, *((void *)v13 + 2) + 1, 1, v13);
      *a3 = v13;
    }
    unint64_t v16 = *((void *)v13 + 2);
    unint64_t v15 = *((void *)v13 + 3);
    if (v16 >= v15 >> 1)
    {
      uint64_t v13 = sub_21F76B18C((char *)(v15 > 1), v16 + 1, 1, v13);
      *a3 = v13;
    }
    *((void *)v13 + 2) = v16 + 1;
    *(void *)&v13[8 * v16 + 32] = v11;
    swift_beginAccess();
    *a1 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    return sub_21F76B064((uint64_t)v8, type metadata accessor for SgGroup);
  }
  return result;
}

uint64_t sub_21F7C3644@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = a1[1];
  a2[1] = v2;
  return swift_retain();
}

uint64_t sub_21F7C3650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_21F76CA40(&qword_26AD4A380);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_21FA249D0();
  MEMORY[0x270FA5388](v12);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  uint64_t v13 = sub_21F779E60(&qword_26AD4A378, &qword_26AD4A380);
  MEMORY[0x223C54910](a1, v8, a3, v13);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v15[1] = v13;
  v15[2] = a4;
  swift_getWitnessTable();
  return sub_21FA25750();
}

uint64_t sub_21F7C383C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_21F7C38AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, MEMORY[0x263F1B668]);
}

uint64_t sub_21F7C3874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_21F7C38AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, MEMORY[0x263F1B670]);
}

uint64_t sub_21F7C38AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t))
{
  return a10(a1);
}

uint64_t sub_21F7C38EC(CGRect *a1, CGRect *a2)
{
  if (!CGRectEqualToRect(*a1, *a2)) {
    return 0;
  }
  if (a1[1].origin.x != a2[1].origin.x || a1[1].origin.y != a2[1].origin.y) {
    return 0;
  }

  return sub_21FA24960();
}

void (*sub_21F7C3978(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_21FA24430();
  return sub_21F7C39E8;
}

void sub_21F7C39E8(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t sub_21F7C3A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_21F773D18(&qword_26AD491F8, (void (*)(uint64_t))type metadata accessor for SgCanvasRenderer);

  return MEMORY[0x270F03278](a1, a2, a3, v8, a4);
}

uint64_t sub_21F7C3ACC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = v2;
  return result;
}

uint64_t (*sub_21F7C3AF8(void *a1))(uint64_t *a1, char a2)
{
  *a1 = *v1;
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return sub_21F7C3B44;
}

uint64_t sub_21F7C3B44(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)a1[1];
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *uint64_t v3 = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = v2;
  }
  return result;
}

uint64_t sub_21F7C3BB8(double *__dst, double *__src, unint64_t a3, double *a4)
{
  __n128 v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = (char *)__src - (char *)__dst;
  int64_t v9 = (char *)__src - (char *)__dst + 15;
  if ((char *)__src - (char *)__dst >= 0) {
    int64_t v9 = (char *)__src - (char *)__dst;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)__src;
  uint64_t v12 = a3 - (void)__src + 15;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v12 = a3 - (void)__src;
  }
  uint64_t v13 = v12 >> 4;
  if (v10 >= v12 >> 4)
  {
    if (a4 != __src || &__src[2 * v13] <= a4) {
      memmove(a4, __src, 16 * v13);
    }
    uint64_t v14 = &v4[2 * v13];
    if (v7 >= v6 || v11 < 16) {
      goto LABEL_40;
    }
    uint64_t v17 = (double *)(a3 - 16);
    while (1)
    {
      uint64_t v18 = v17 + 2;
      uint64_t v19 = v6 - 2;
      if (*(v14 - 2) >= *(v6 - 2))
      {
        uint64_t v19 = v14 - 2;
        if (v18 != v14)
        {
          v14 -= 2;
          goto LABEL_37;
        }
        BOOL v20 = v17 >= v14;
        v14 -= 2;
        if (v20) {
          goto LABEL_37;
        }
      }
      else
      {
        if (v18 != v6)
        {
          v6 -= 2;
LABEL_37:
          *(_OWORD *)uint64_t v17 = *(_OWORD *)v19;
          goto LABEL_38;
        }
        BOOL v20 = v17 >= v6;
        v6 -= 2;
        if (v20) {
          goto LABEL_37;
        }
      }
LABEL_38:
      if (v6 > v7)
      {
        v17 -= 2;
        if (v14 > v4) {
          continue;
        }
      }
      goto LABEL_40;
    }
  }
  if (a4 != __dst || &__dst[2 * v10] <= a4) {
    memmove(a4, __dst, 16 * v10);
  }
  uint64_t v14 = &v4[2 * v10];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (*v6 < *v4)
    {
      unint64_t v15 = v6;
      BOOL v16 = v7 == v6;
      v6 += 2;
      if (!v16) {
        goto LABEL_16;
      }
LABEL_17:
      v7 += 2;
      if (v4 >= v14 || (unint64_t)v6 >= a3) {
        goto LABEL_19;
      }
    }
    unint64_t v15 = v4;
    BOOL v16 = v7 == v4;
    v4 += 2;
    if (v16) {
      goto LABEL_17;
    }
LABEL_16:
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v15;
    goto LABEL_17;
  }
LABEL_19:
  uint64_t v6 = v7;
LABEL_40:
  int64_t v21 = (char *)v14 - (char *)v4 + ((char *)v14 - (char *)v4 < 0 ? 0xFuLL : 0);
  if (v6 != v4 || v6 >= (double *)((char *)v4 + (v21 & 0xFFFFFFFFFFFFFFF0))) {
    memmove(v6, v4, 16 * (v21 >> 4));
  }
  return 1;
}

uint64_t sub_21F7C3DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v22[0] = a3;
  v22[1] = a4;
  uint64_t v5 = sub_21FA24890();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  int64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v22 - v10;
  uint64_t v12 = sub_21F76CA40(&qword_26AD4A3B8);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for SgShapeStyle();
  sub_21F76C978(a2 + *(int *)(v15 + 32), (uint64_t)v14, &qword_26AD4A3B8);
  uint64_t v16 = sub_21FA25910();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16) == 1)
  {
    sub_21F76CA84((uint64_t)v14, &qword_26AD4A3B8);
  }
  else
  {
    unint64_t v18 = sub_21F7C2CC0();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v16);
    if ((v18 & 0x100000000) == 0)
    {
      sub_21FA24900();
      sub_21FA24910();
      sub_21F8C2F2C(a2, v22[0], (uint64_t)v11);
      sub_21FA248D0();
      sub_21FA24800();
      uint64_t v19 = *(void (**)(char *, uint64_t))(v6 + 8);
      v19(v8, v5);
      v19(v11, v5);
      return sub_21FA24910();
    }
  }
  sub_21F8C2F2C(a2, v22[0], (uint64_t)v11);
  sub_21FA248D0();
  sub_21FA24800();
  int64_t v21 = *(void (**)(char *, uint64_t))(v6 + 8);
  v21(v8, v5);
  return ((uint64_t (*)(char *, uint64_t))v21)(v11, v5);
}

uint64_t sub_21F7C40C0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v42[1] = a5;
  uint64_t v45 = a3;
  uint64_t v46 = a1;
  uint64_t v7 = sub_21FA24890();
  uint64_t v43 = *(void *)(v7 - 8);
  uint64_t v44 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v42 - v11;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v42 - v14;
  MEMORY[0x270FA5388](v16);
  unint64_t v18 = (char *)v42 - v17;
  uint64_t v19 = sub_21F76CA40(&qword_26AD4A3B8);
  MEMORY[0x270FA5388](v19 - 8);
  int64_t v21 = (char *)v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for SgShapeStyle();
  sub_21F76C978(a2 + *(int *)(v22 + 32), (uint64_t)v21, &qword_26AD4A3B8);
  uint64_t v23 = sub_21FA25910();
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v21, 1, v23) == 1)
  {
    sub_21F76CA84((uint64_t)v21, &qword_26AD4A3B8);
LABEL_8:
    sub_21F8C2F2C(a2, v45, (uint64_t)v12);
    uint64_t v32 = *v46;
    uint64_t v33 = sub_21FA248D0();
    uint64_t v34 = *(void *)(a4 + 16);
    if (v34)
    {
      uint64_t v47 = v32;
      MEMORY[0x270FA5388](v33);
      v42[-2] = a4;
      swift_retain();
      sub_21FA24750();
      swift_retain();
      sub_21FA24800();
      swift_release();
      swift_bridgeObjectRetain();
      uint64_t v35 = 32;
      do
      {
        long long v36 = *(_OWORD *)(a4 + v35 + 16);
        long long v48 = *(_OWORD *)(a4 + v35);
        long long v49 = v36;
        char v50 = *(unsigned char *)(a4 + v35 + 32);
        sub_21F7C48F4((uint64_t)&v48, (uint64_t)v51);
        sub_21F7C4968((uint64_t)v51, (void (*)(void, void, void, void, void))sub_21F7C4950);
        sub_21FA24800();
        sub_21F7C4968((uint64_t)&v48, (void (*)(void, void, void, void, void))sub_21F7705AC);
        v35 += 40;
        --v34;
      }
      while (v34);
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21FA24800();
    }
    uint64_t v37 = v44;
    CGRect v38 = *(void (**)(char *, uint64_t))(v43 + 8);
    v38(v9, v44);
    return ((uint64_t (*)(char *, uint64_t))v38)(v12, v37);
  }
  unint64_t v25 = sub_21F7C2CC0();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v21, v23);
  if ((v25 & 0x100000000) != 0) {
    goto LABEL_8;
  }
  uint64_t v26 = v46;
  sub_21FA24900();
  sub_21FA24910();
  sub_21F8C2F2C(a2, v45, (uint64_t)v18);
  uint64_t v27 = *v26;
  uint64_t v28 = sub_21FA248D0();
  uint64_t v29 = *(void *)(a4 + 16);
  if (v29)
  {
    uint64_t v47 = v27;
    MEMORY[0x270FA5388](v28);
    v42[-2] = a4;
    swift_retain();
    sub_21FA24750();
    swift_retain();
    sub_21FA24800();
    swift_release();
    swift_bridgeObjectRetain();
    uint64_t v30 = 32;
    do
    {
      long long v31 = *(_OWORD *)(a4 + v30 + 16);
      long long v48 = *(_OWORD *)(a4 + v30);
      long long v49 = v31;
      char v50 = *(unsigned char *)(a4 + v30 + 32);
      sub_21F7C48F4((uint64_t)&v48, (uint64_t)v51);
      sub_21F7C4968((uint64_t)v51, (void (*)(void, void, void, void, void))sub_21F7C4950);
      sub_21FA24800();
      sub_21F7C4968((uint64_t)&v48, (void (*)(void, void, void, void, void))sub_21F7705AC);
      v30 += 40;
      --v29;
    }
    while (v29);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_21FA24800();
  }
  uint64_t v40 = v44;
  uint64_t v41 = *(void (**)(char *, uint64_t))(v43 + 8);
  v41(v15, v44);
  v41(v18, v40);
  return sub_21FA24910();
}

uint64_t sub_21F7C466C()
{
  uint64_t v1 = (int *)(type metadata accessor for SgCanvasRenderer(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 47) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[8];
  uint64_t v7 = sub_21FA24970();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_release();

  return MEMORY[0x270FA0238](v0, v5, v4);
}

uint64_t sub_21F7C4780()
{
  uint64_t v1 = type metadata accessor for RenderParams(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 112)) {
    _s6Charts15AnyChartContentVwxx_0(v0 + 88);
  }
  uint64_t v4 = v2 | 7;
  uint64_t v5 = (v2 + 136) & ~v2;
  uint64_t v6 = v5 + v3;
  uint64_t v7 = v0 + *(int *)(v1 + 20) + v5;
  uint64_t v8 = sub_21FA24970();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);

  return MEMORY[0x270FA0238](v0, v6, v4);
}

unint64_t sub_21F7C4884()
{
  unint64_t result = qword_26AD44BA0;
  if (!qword_26AD44BA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD44BA0);
  }
  return result;
}

void sub_21F7C48D8(uint64_t a1)
{
  sub_21F8C7D2C(a1, *(void *)(v1 + 16));
}

uint64_t sub_21F7C48F4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_21F7C4950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 2 <= 3) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_21F7C4968(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t sub_21F7C49A8()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 56)) {
    _s6Charts15AnyChartContentVwxx_0(v0 + 32);
  }

  return MEMORY[0x270FA0238](v0, 80, 7);
}

uint64_t sub_21F7C49F0(uint64_t a1)
{
  return a1;
}

uint64_t *sub_21F7C4A44(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = sub_21FA24970();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_21F7C4B10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = sub_21FA24970();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

_OWORD *sub_21F7C4B78(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_21FA24970();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

void *sub_21F7C4BF4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_21FA24970();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_OWORD *sub_21F7C4C78(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_21FA24970();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_OWORD *sub_21F7C4CF4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_21FA24970();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_21F7C4D70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F7C4D84);
}

uint64_t sub_21F7C4D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = sub_21FA24970();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t sub_21F7C4DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F7C4E08);
}

uint64_t sub_21F7C4E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = sub_21FA24970();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

void *sub_21F7C4E7C(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v5;
    a1[2] = *((_OWORD *)a2 + 2);
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = sub_21FA24970();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_21F7C4F50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  uint64_t v3 = sub_21FA24970();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

_OWORD *sub_21F7C4FB8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_21FA24970();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  return a1;
}

void *sub_21F7C503C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_21FA24970();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_OWORD *sub_21F7C50E0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_21FA24970();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_OWORD *sub_21F7C5164(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_21FA24970();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 40))(v6, v7, v8);
  return a1;
}

uint64_t sub_21F7C51E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F7C51FC);
}

uint64_t sub_21F7C51FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 24);
  uint64_t v5 = sub_21FA24970();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t sub_21F7C526C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F7C5280);
}

uint64_t sub_21F7C5280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 24);
  uint64_t v6 = sub_21FA24970();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

unint64_t sub_21F7C52FC()
{
  unint64_t result = qword_267EE72F8;
  if (!qword_267EE72F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE72F8);
  }
  return result;
}

void sub_21F7C5350(uint64_t a1)
{
}

ValueMetadata *type metadata accessor for Chart3DPreferences.PlottedValueStylingContextKey()
{
  return &type metadata for Chart3DPreferences.PlottedValueStylingContextKey;
}

ValueMetadata *type metadata accessor for Chart3DPreferences.PlottedValueLayoutContextKey()
{
  return &type metadata for Chart3DPreferences.PlottedValueLayoutContextKey;
}

ValueMetadata *type metadata accessor for Chart3DPreferences.ResolvedPointMarkKey()
{
  return &type metadata for Chart3DPreferences.ResolvedPointMarkKey;
}

_UNKNOWN **sub_21F7C5398()
{
  return &off_26B5903A0;
}

unint64_t sub_21F7C53A4(uint64_t a1)
{
  unint64_t result = sub_21F7C53CC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_21F7C53CC()
{
  unint64_t result = qword_267EE7300;
  if (!qword_267EE7300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE7300);
  }
  return result;
}

void sub_21F7C5420(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  uint64_t v1 = MEMORY[0x263F8EE78];
  uint64_t v2 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 64) = 512;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 112) = 1;
  *(void *)(a1 + 120) = v1;
  *(void *)(a1 + 128) = v2;
  *(_WORD *)(a1 + 136) = 512;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 160) = 1;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 184) = 1;
  *(void *)(a1 + 192) = v1;
  *(void *)(a1 + 200) = v2;
  *(_WORD *)(a1 + 208) = 512;
}

uint64_t sub_21F7C54B0(uint64_t a1, void (*a2)(long long *__return_ptr))
{
  a2(&v21);
  long long v15 = v21;
  char v16 = v22;
  long long v17 = v23;
  char v18 = v24;
  long long v19 = v25;
  __int16 v20 = v26;
  sub_21F7C9D58(&v15);
  long long v9 = v27;
  char v10 = v28;
  long long v11 = v29;
  char v12 = v30;
  long long v13 = v31;
  __int16 v14 = v32;
  sub_21F7C9D58(&v9);
  long long v3 = v33;
  char v4 = v34;
  long long v5 = v35;
  char v6 = v36;
  long long v7 = v37;
  __int16 v8 = v38;
  sub_21F7C9D58(&v3);
  return sub_21F7C5C48((uint64_t)&v21);
}

void sub_21F7C55B4(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  uint64_t v1 = MEMORY[0x263F8EE88];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v1;
  *(_WORD *)(a1 + 64) = 512;
}

uint64_t sub_21F7C55E8(uint64_t a1, void (*a2)(long long *__return_ptr))
{
  a2(&v3);
  sub_21F7C9D58(&v3);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_21F7C5680@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_21F7C571C(MEMORY[0x263F8EE78]);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_21F7C56B0(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v4);
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_21F9EDD10(v2);
  sub_21F7C591C();

  return swift_bridgeObjectRelease();
}

uint64_t sub_21F7C571C(uint64_t a1)
{
  uint64_t v2 = sub_21F76CA40(&qword_267EE7308);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  long long v5 = (uint64_t *)((char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (v6)
  {
    uint64_t v15 = MEMORY[0x263F8EE78];
    sub_21F7A23EC(0, v6, 0);
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v9 = *(void *)(v3 + 72);
    uint64_t v7 = v15;
    do
    {
      sub_21F7C5B2C(v8, (uint64_t)v5);
      uint64_t v10 = *v5;
      swift_bridgeObjectRetain();
      sub_21F7C5B94((uint64_t)v5);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_21F7A23EC(0, *(void *)(v7 + 16) + 1, 1);
        uint64_t v7 = v15;
      }
      unint64_t v12 = *(void *)(v7 + 16);
      unint64_t v11 = *(void *)(v7 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_21F7A23EC((char *)(v11 > 1), v12 + 1, 1);
        uint64_t v7 = v15;
      }
      *(void *)(v7 + 16) = v12 + 1;
      *(void *)(v7 + 8 * v12 + 32) = v10;
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  sub_21F7C5EDC(v7, (void (*)(void))sub_21F7C5BF4, (uint64_t)&type metadata for Resolved3DContentID, (void (*)(uint64_t *, uint64_t))sub_21F7D4DC0);
  swift_bridgeObjectRelease();
  sub_21F7C5BF4();
  sub_21FA26000();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21F7C591C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_21F76CA40(&qword_267EE7308);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  long long v5 = (uint64_t *)((char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *v0;
  int64_t v7 = *(void *)(*v0 + 16);
  uint64_t v8 = MEMORY[0x263F8EE78];
  if (v7)
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_21F7A23EC(0, v7, 0);
    uint64_t v9 = v6 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v10 = *(void *)(v3 + 72);
    uint64_t v8 = v17;
    do
    {
      sub_21F7C5B2C(v9, (uint64_t)v5);
      uint64_t v11 = *v5;
      swift_bridgeObjectRetain();
      sub_21F7C5B94((uint64_t)v5);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_21F7A23EC(0, *(void *)(v8 + 16) + 1, 1);
        uint64_t v8 = v17;
      }
      unint64_t v13 = *(void *)(v8 + 16);
      unint64_t v12 = *(void *)(v8 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_21F7A23EC((char *)(v12 > 1), v13 + 1, 1);
        uint64_t v8 = v17;
      }
      *(void *)(v8 + 16) = v13 + 1;
      *(void *)(v8 + 8 * v13 + 32) = v11;
      v9 += v10;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  sub_21F7C5EDC(v8, (void (*)(void))sub_21F7C5BF4, (uint64_t)&type metadata for Resolved3DContentID, (void (*)(uint64_t *, uint64_t))sub_21F7D4DC0);
  swift_bridgeObjectRelease();
  sub_21F7C5BF4();
  uint64_t v14 = sub_21FA26000();
  uint64_t result = swift_bridgeObjectRelease();
  v1[1] = v14;
  return result;
}

uint64_t sub_21F7C5B2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21F76CA40(&qword_267EE7308);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21F7C5B94(uint64_t a1)
{
  uint64_t v2 = sub_21F76CA40(&qword_267EE7308);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_21F7C5BF4()
{
  unint64_t result = qword_267EE7310;
  if (!qword_267EE7310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE7310);
  }
  return result;
}

uint64_t sub_21F7C5C48(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F7C5CB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_21F7C6040();
  uint64_t result = sub_21FA25FD0();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = a1 + 32;
    do
    {
      sub_21F7BB81C(v4, (uint64_t)v8);
      sub_21F7C618C(v8, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
      sub_21F7D6B00((uint64_t)v5, v8);
      sub_21F7BB81C((uint64_t)v5, (uint64_t)v6);
      sub_21F7C618C(v6, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
      v4 += 152;
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_21F7C5D7C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_21F76CA40(&qword_26AD468A8);
  sub_21F7C5FCC();
  uint64_t result = sub_21FA25FD0();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      swift_bridgeObjectRetain();
      sub_21F7D531C(&v6, v5);
      swift_bridgeObjectRelease();
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_21F7C5E10(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = sub_21FA25FD0();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      sub_21F7D5038(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_21F7C5EA8(uint64_t a1)
{
  return sub_21F7C5EDC(a1, (void (*)(void))sub_21F7C5F78, (uint64_t)&type metadata for ChartContentList.ID, (void (*)(uint64_t *, uint64_t))sub_21F7D4E08);
}

uint64_t sub_21F7C5EDC(uint64_t a1, void (*a2)(void), uint64_t a3, void (*a4)(uint64_t *, uint64_t))
{
  uint64_t v6 = *(void *)(a1 + 16);
  a2();
  uint64_t result = sub_21FA25FD0();
  uint64_t v11 = result;
  if (v6)
  {
    uint64_t v8 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v9 = *v8++;
      swift_bridgeObjectRetain();
      a4(&v10, v9);
      swift_bridgeObjectRelease();
      --v6;
    }
    while (v6);
    return v11;
  }
  return result;
}

unint64_t sub_21F7C5F78()
{
  unint64_t result = qword_267EE7318;
  if (!qword_267EE7318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE7318);
  }
  return result;
}

unint64_t sub_21F7C5FCC()
{
  unint64_t result = qword_26AD468B0;
  if (!qword_26AD468B0)
  {
    sub_21F779EA4(&qword_26AD468A8);
    sub_21F7C6040();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD468B0);
  }
  return result;
}

unint64_t sub_21F7C6040()
{
  unint64_t result = qword_26AD46830;
  if (!qword_26AD46830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD46830);
  }
  return result;
}

uint64_t sub_21F7C6094(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19)
{
  sub_21F7652C0(a2, a3, a4 & 1);
  swift_bridgeObjectRetain();
  if (a19 < 0)
  {
    sub_21F770E44(a6, a7, a8);
    sub_21F7652C0(a11, a12, a13 & 1);
    swift_bridgeObjectRetain();
    uint64_t v22 = a15;
    uint64_t v23 = a16;
    char v24 = a17;
  }
  else
  {
    uint64_t v22 = a6;
    uint64_t v23 = a7;
    char v24 = a8;
  }

  return sub_21F770E44(v22, v23, v24);
}

void *sub_21F7C618C(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

void BuilderConditional<>.body.getter()
{
}

{
  sub_21FA266E0();
  __break(1u);
}

uint64_t static BuilderConditional<>._makeChart3DContent(content:inputs:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v48 = a5;
  uint64_t v49 = a6;
  uint64_t v44 = a4;
  uint64_t v43 = a3;
  double v51 = a1;
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v53 = type metadata accessor for SetDependency(0);
  MEMORY[0x270FA5388](v53);
  v52 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for _Chart3DContentOutputs();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v50 = (uint64_t)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for _Chart3DContentInputs();
  MEMORY[0x270FA5388](v16);
  uint64_t v46 = (uint64_t)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = a3;
  uint64_t v59 = a4;
  uint64_t v60 = a5;
  uint64_t v61 = a6;
  uint64_t v18 = _s11Container3DVMa();
  uint64_t v47 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v45 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v42 = (_DWORD *)((char *)&v41 - v21);
  uint64_t v22 = sub_21FA24F30();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  long long v25 = (char *)&v41 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for AddPreference(0);
  MEMORY[0x270FA5388](v26);
  char v28 = (char *)&v41 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s6Charts11BuilderPairVA2A12ChartContentRzAaDR_rlE05_makedE07content6inputsAA01_dE7OutputsV7SwiftUI11_GraphValueVyACyxq_GG_AA01_dE6InputsVtFZ_0();
  sub_21F7C945C(&qword_267EE7320, (void (*)(uint64_t))type metadata accessor for AddPreference);
  sub_21FA24EE0();
  _s6Charts11BuilderPairVA2A12ChartContentRzAaDR_rlE05_makedE07content6inputsAA01_dE7OutputsV7SwiftUI11_GraphValueVyACyxq_GG_AA01_dE6InputsVtFZ_0();
  uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  v41(v25, v28, v22);
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 40))(a7, v25, v22);
  sub_21F7C94A4((uint64_t)v28, type metadata accessor for AddPreference);
  type metadata accessor for BuilderConditional();
  int v29 = sub_21F74D6C4(v51);
  uint64_t v30 = v46;
  sub_21F7C8580(a2, v46, (uint64_t (*)(void))type metadata accessor for _Chart3DContentInputs);
  uint64_t v31 = v50;
  sub_21F7C8580(a7, v50, (uint64_t (*)(void))type metadata accessor for _Chart3DContentOutputs);
  __int16 v32 = v42;
  sub_21F7C6834(v29, v30, v31, v42);
  uint64_t v33 = v47;
  uint64_t v34 = (uint64_t)v45;
  (*(void (**)(char *, _DWORD *, uint64_t))(v47 + 16))(v45, v32, v18);
  uint64_t v55 = type metadata accessor for BuilderConditional.Info();
  uint64_t v56 = v18;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v35 = sub_21FA24380();
  sub_21F74C95C(v34, (uint64_t)sub_21F7C85E8, (uint64_t)v54, v18, MEMORY[0x263F8E628], v35, MEMORY[0x263F8E658], v36);
  long long v37 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
  v37(v34, v18);
  LODWORD(v33) = v58;
  uint64_t v38 = (uint64_t)v52;
  v41(v52, (char *)a7, v22);
  uint64_t v39 = v38 + *(int *)(v53 + 20);
  *(_DWORD *)uint64_t v39 = v33;
  *(unsigned char *)(v39 + 4) = 0;
  sub_21F7C945C(qword_267EE7328, (void (*)(uint64_t))type metadata accessor for SetDependency);
  sub_21FA24F10();
  sub_21F7C94A4(v38, type metadata accessor for SetDependency);
  return ((uint64_t (*)(_DWORD *, uint64_t))v37)(v32, v18);
}

uint64_t _s11Container3DVMa()
{
  return swift_getGenericMetadata();
}

id sub_21F7C6834@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  *a4 = a1;
  uint64_t v7 = (int *)_s11Container3DVMa();
  sub_21F7C962C(a2, (uint64_t)a4 + v7[13], (uint64_t (*)(void))type metadata accessor for _Chart3DContentInputs);
  sub_21F7C962C(a3, (uint64_t)a4 + v7[14], (uint64_t (*)(void))type metadata accessor for _Chart3DContentOutputs);
  id result = (id)AGSubgraphGetCurrent();
  if (result) {
    *(void *)((char *)a4 + v7[15]) = result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t static BuilderConditional<>._chart3DContentCount(inputs:)(uint64_t a1)
{
  uint64_t v2 = static Chart3DContent._chart3DContentCount(inputs:)(a1);
  if ((v3 & 1) == 0)
  {
    BOOL v4 = v2 != static Chart3DContent._chart3DContentCount(inputs:)(a1);
    if ((v5 | v4)) {
      return 0;
    }
  }
  return v2;
}

uint64_t sub_21F7C6970@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for BuilderConditional();
  uint64_t Value = AGGraphGetValue();
  BOOL v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t sub_21F7C69FC(uint64_t a1)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v2 = type metadata accessor for BuilderConditional.Info();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v50 = (uint64_t)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v48 = (char *)&v46 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v47 = (char *)&v46 - v8;
  uint64_t v9 = sub_21FA26340();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v49 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v46 - v13;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v46 - v16;
  uint64_t v18 = type metadata accessor for BuilderConditional();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v58 = (uint64_t)&v46 - v20;
  sub_21F7C6970((uint64_t)&v46 - v20);
  Outputuint64_t Value = AGGraphGetOutputValue();
  uint64_t v54 = v18;
  uint64_t v55 = a1;
  uint64_t v53 = v19;
  if (OutputValue)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v17, OutputValue, v2);
    uint64_t v22 = 0;
  }
  else
  {
    uint64_t v22 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v17, v22, 1, v2);
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v23(v14, v17, v9);
  uint64_t v24 = v10;
  long long v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48);
  int v26 = v25(v14, 1, v2);
  uint64_t v56 = v24;
  uint64_t v57 = v9;
  double v51 = v17;
  uint64_t v52 = v3;
  if (v26 == 1)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v9);
  }
  else
  {
    char v27 = sub_21F95256C(v58);
    char v28 = *(void (**)(char *, uint64_t))(v3 + 8);
    v28(v14, v2);
    if (v27)
    {
      uint64_t result = AGGraphGetOutputValue();
      if (result)
      {
        uint64_t v30 = (uint64_t)v47;
        (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v47, result, v2);
        uint64_t v32 = v53;
        uint64_t v31 = v54;
        uint64_t v33 = v58;
        uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 24))(v30, v58, v54);
        MEMORY[0x270FA5388](v34);
        *(&v46 - 2) = v55;
        *(&v46 - 1) = swift_getWitnessTable();
        sub_21F74C95C(v30, (uint64_t)sub_21F7C93B8, (uint64_t)(&v46 - 4), v2, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v35);
        v28((char *)v30, v2);
        (*(void (**)(char *, uint64_t))(v56 + 8))(v51, v57);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v33, v31);
      }
      else
      {
        __break(1u);
      }
      return result;
    }
  }
  uint64_t v36 = v49;
  uint64_t v37 = v57;
  v23(v49, v17, v57);
  if (v25(v36, 1, v2) == 1)
  {
    uint64_t v38 = v56;
    (*(void (**)(char *, uint64_t))(v56 + 8))(v36, v37);
    uint64_t v39 = v55;
    uint64_t v40 = v52;
  }
  else
  {
    uint64_t v40 = v52;
    uint64_t v41 = (uint64_t)v48;
    (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v48, v36, v2);
    uint64_t v39 = v55;
    sub_21F7C7090(v41, v55);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v2);
    uint64_t v38 = v56;
  }
  uint64_t v42 = v50;
  uint64_t v43 = v58;
  uint64_t v44 = sub_21F7C71D0(v58, v39, v50);
  MEMORY[0x270FA5388](v44);
  *(&v46 - 2) = v39;
  *(&v46 - 1) = swift_getWitnessTable();
  sub_21F74C95C(v42, (uint64_t)sub_21F7C93B8, (uint64_t)(&v46 - 4), v2, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v45);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v42, v2);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v51, v37);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 8))(v43, v54);
}

uint64_t sub_21F7C7090(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ResetPreference(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v2 + *(int *)(a2 + 56);
  uint64_t v8 = sub_21FA24F30();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  sub_21F7C945C(&qword_267EE7430, (void (*)(uint64_t))type metadata accessor for ResetPreference);
  sub_21FA24F10();
  sub_21F7C94A4((uint64_t)v6, type metadata accessor for ResetPreference);
  type metadata accessor for BuilderConditional.Info();
  return AGSubgraphInvalidate();
}

uint64_t sub_21F7C71D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for _Chart3DContentOutputs();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for _Chart3DContentInputs();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    unsigned int v14 = result;
    id v15 = (id)AGSubgraphGetGraph();
    uint64_t v16 = (void *)AGSubgraphCreate();

    AGSubgraphAddChild();
    sub_21F7C8580(v3 + *(int *)(a2 + 52), (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for _Chart3DContentInputs);
    sub_21F7C8580(v3 + *(int *)(a2 + 56), (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for _Chart3DContentOutputs);
    AGGraphClearUpdate();
    id v17 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    sub_21F7C73DC(a1, v14, (uint64_t)v12, (uint64_t)v9, (uint64_t)v16, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 32), a3, *(void *)(a2 + 40));
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    sub_21F7C94A4((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for _Chart3DContentOutputs);
    return sub_21F7C94A4((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for _Chart3DContentInputs);
  }
  return result;
}

id sub_21F7C73DC@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v88 = a9;
  v89 = (void *)a5;
  uint64_t v84 = a4;
  uint64_t v80 = a3;
  unsigned int v79 = a2;
  uint64_t v77 = a10;
  uint64_t v78 = a8;
  uint64_t v93 = *MEMORY[0x263EF8340];
  uint64_t v13 = type metadata accessor for BuilderConditional();
  uint64_t v85 = *(void *)(v13 - 8);
  uint64_t v86 = v13;
  MEMORY[0x270FA5388](v13);
  v83 = (char *)&v69 - v14;
  uint64_t v82 = type metadata accessor for SetSource(0);
  MEMORY[0x270FA5388](v82);
  v81 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_21FA24530();
  uint64_t v75 = *(void *)(v16 - 8);
  uint64_t v76 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v73 = (uint64_t)&v69 - v17;
  uint64_t v74 = *(void *)(a7 - 8);
  MEMORY[0x270FA5388](v18);
  v69 = (char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  v72 = (char *)&v69 - v21;
  uint64_t v71 = sub_21FA24530();
  uint64_t v70 = *(void *)(v71 - 8);
  MEMORY[0x270FA5388](v71);
  uint64_t v23 = (char *)&v69 - v22;
  uint64_t v24 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v25);
  char v27 = (char *)&v69 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v69 - v29;
  uint64_t v31 = type metadata accessor for BuilderConditional.Storage();
  uint64_t v32 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v34 = (char *)&v69 - v33;
  uint64_t v35 = type metadata accessor for _Chart3DContentOutputs();
  __n128 v36 = MEMORY[0x270FA5388](v35 - 8);
  v90 = (char *)&v69 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v32 + 16);
  uint64_t v87 = a1;
  v38(v34, a1, v31, v36);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v39 = v74;
    uint64_t v40 = v72;
    (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v72, v34, a7);
    uint64_t v41 = nullsub_1(v79, a6);
    int v92 = v41;
    MEMORY[0x270FA5388](v41);
    *(&v69 - 4) = (char *)a7;
    uint64_t v42 = type metadata accessor for BuilderConditional.FalseChild();
    *(&v69 - 3) = (char *)v42;
    *(&v69 - 2) = (char *)swift_getWitnessTable();
    uint64_t v43 = sub_21FA24380();
    uint64_t v44 = MEMORY[0x263F8E628];
    uint64_t v45 = MEMORY[0x263F8E658];
    sub_21F74C95C((uint64_t)&v92, (uint64_t)sub_21F7C85E8, (uint64_t)(&v69 - 6), v42, MEMORY[0x263F8E628], v43, MEMORY[0x263F8E658], v46);
    LODWORD(v42) = v91;
    uint64_t v47 = (uint64_t)v69;
    uint64_t v48 = (*(uint64_t (**)(char *, char *, uint64_t))(v39 + 16))(v69, v40, a7);
    MEMORY[0x270FA5388](v48);
    *(&v69 - 2) = (char *)a7;
    *((_DWORD *)&v69 - 2) = v42;
    sub_21F74C95C(v47, (uint64_t)sub_21F7C9420, (uint64_t)(&v69 - 4), a7, v44, MEMORY[0x263F8D4F8], v45, v49);
    uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v50(v47, a7);
    uint64_t v51 = v73;
    sub_21F74CA38(v42, v73);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 32))(v51, v80, a7);
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v51, v76);
    uint64_t v52 = v40;
    uint64_t v53 = a7;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v30, v34, a6);
    uint64_t v54 = j_nullsub_1(v79, a6);
    int v92 = v54;
    MEMORY[0x270FA5388](v54);
    *(&v69 - 4) = (char *)a6;
    uint64_t v55 = type metadata accessor for BuilderConditional.TrueChild();
    *(&v69 - 3) = (char *)v55;
    *(&v69 - 2) = (char *)swift_getWitnessTable();
    uint64_t v56 = sub_21FA24380();
    uint64_t v57 = MEMORY[0x263F8E628];
    sub_21F74C95C((uint64_t)&v92, (uint64_t)sub_21F7C85E8, (uint64_t)(&v69 - 6), v55, MEMORY[0x263F8E628], v56, MEMORY[0x263F8E658], v58);
    int v59 = v91;
    uint64_t v60 = (*(uint64_t (**)(char *, char *, uint64_t))(v24 + 16))(v27, v30, a6);
    MEMORY[0x270FA5388](v60);
    *(&v69 - 2) = (char *)a6;
    *((_DWORD *)&v69 - 2) = v59;
    sub_21F74C95C((uint64_t)v27, (uint64_t)sub_21F7C9694, (uint64_t)(&v69 - 4), a6, v57, MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], v61);
    uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v50((uint64_t)v27, a6);
    sub_21F74CA38(v59, (uint64_t)v23);
    (*(void (**)(char *, uint64_t, uint64_t))(v78 + 32))(v23, v80, a6);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v23, v71);
    uint64_t v52 = v30;
    uint64_t v53 = a6;
  }
  v50((uint64_t)v52, v53);
  uint64_t v62 = sub_21FA24F30();
  uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v62 - 8) + 16);
  uint64_t v64 = (uint64_t)v81;
  v63(v81, v84, v62);
  uint64_t v65 = (uint64_t)v90;
  v63((char *)(v64 + *(int *)(v82 + 20)), (uint64_t)v90, v62);
  sub_21F7C945C(qword_267EE7438, (void (*)(uint64_t))type metadata accessor for SetSource);
  sub_21FA24F10();
  sub_21F7C94A4(v64, type metadata accessor for SetSource);
  sub_21F7C94A4(v65, (uint64_t (*)(void))type metadata accessor for _Chart3DContentOutputs);
  uint64_t v66 = (uint64_t)v83;
  (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v83, v87, v86);
  sub_21F9527D4(v66, (uint64_t)v89, v88);
  v67 = v89;

  return v67;
}

uint64_t sub_21F7C7D8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for BuilderConditional.Info();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

void sub_21F7C7E00()
{
}

uint64_t sub_21F7C7E4C@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static BuilderConditional<>._makeChart3DContent(content:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8), *(void *)(a4 - 16), a5);
}

void Optional<A>.body.getter()
{
}

{
  sub_21FA266E0();
  __break(1u);
}

uint64_t static Optional<A>._makeChart3DContent(content:inputs:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v10 = type metadata accessor for BuilderConditional();
  uint64_t v11 = sub_21FA24530();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (unsigned int *)((char *)v19 - v13);
  sub_21FA26340();
  int v20 = sub_21F74D6C4(a1);
  uint64_t v22 = v10;
  uint64_t v15 = _s5ChildVMa();
  uint64_t v23 = v15;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v16 = sub_21FA24380();
  sub_21F74C95C((uint64_t)&v20, (uint64_t)sub_21F74D630, (uint64_t)v21, v15, MEMORY[0x263F8E628], v16, MEMORY[0x263F8E658], v17);
  sub_21F74CA38(v19[2], (uint64_t)v14);
  static BuilderConditional<>._makeChart3DContent(content:inputs:)(v14, a2, a3, (uint64_t)&type metadata for BuilderEmpty, a4, (uint64_t)&protocol witness table for BuilderEmpty, a5);
  return (*(uint64_t (**)(unsigned int *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_21F7C80B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_21FA26340();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t sub_21F7C8138@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v17 = a2;
  uint64_t v3 = type metadata accessor for BuilderConditional.Storage();
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v16 - v4;
  uint64_t v6 = sub_21FA26340();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F7C80B0((uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, a1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v14(v13, v9, a1);
    v14(v5, v13, a1);
  }
  swift_storeEnumTagMultiPayload();
  return BuilderConditional.init(storage:)((uint64_t)v5, v17);
}

uint64_t sub_21F7C8378@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for BuilderConditional();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t sub_21F7C83F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21F7C8138(*(void *)(a1 + 16), a2);
}

void sub_21F7C8400()
{
}

uint64_t sub_21F7C844C@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static Optional<A>._makeChart3DContent(content:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8), a5);
}

uint64_t sub_21F7C8458()
{
  return AGGraphSetOutputValue();
}

uint64_t sub_21F7C84B0@<X0>(_DWORD *a1@<X8>)
{
  sub_21F74D6BC();
  uint64_t result = sub_21FA24370();
  *a1 = result;
  return result;
}

uint64_t sub_21F7C8544@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = AGGraphSetValue();
  *a1 = result;
  return result;
}

uint64_t sub_21F7C8580(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_21F7C85E8@<X0>(_DWORD *a1@<X8>)
{
  return sub_21F7C9504(a1);
}

uint64_t _s5ChildVMa()
{
  return sub_21F764F08();
}

uint64_t sub_21F7C8618(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **sub_21F7C8668()
{
  return &protocol witness table for Never;
}

uint64_t sub_21F7C8674(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21F7C86C4()
{
  uint64_t result = type metadata accessor for _Chart3DContentInputs();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_21FA24F30();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_21F7C87A8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v27 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v7 = a3[13];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_21FA24B80();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = (int *)type metadata accessor for _Chart3DContentInputs();
    uint64_t v12 = v11[5];
    uint64_t v13 = &v8[v12];
    uint64_t v14 = &v9[v12];
    uint64_t v15 = sub_21FA24540();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    uint64_t v16 = v11[6];
    uint64_t v17 = &v8[v16];
    uint64_t v18 = &v9[v16];
    uint64_t v19 = sub_21FA24EF0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    *(_DWORD *)&v8[v11[7]] = *(_DWORD *)&v9[v11[7]];
    uint64_t v20 = a3[14];
    uint64_t v21 = (char *)v4 + v20;
    uint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = sub_21FA24F30();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
    uint64_t v24 = a3[15];
    uint64_t v25 = *(void **)((char *)a2 + v24);
    *(uint64_t *)((char *)v4 + v24) = (uint64_t)v25;
    id v26 = v25;
  }
  return v4;
}

void sub_21F7C898C(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[13];
  uint64_t v5 = sub_21FA24B80();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = type metadata accessor for _Chart3DContentInputs();
  uint64_t v7 = v4 + *(int *)(v6 + 20);
  uint64_t v8 = sub_21FA24540();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v4 + *(int *)(v6 + 24);
  uint64_t v10 = sub_21FA24EF0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  uint64_t v11 = a1 + a2[14];
  uint64_t v12 = sub_21FA24F30();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  uint64_t v13 = *(void **)(a1 + a2[15]);
}

_DWORD *sub_21F7C8AE4(_DWORD *a1, _DWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[13];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_21FA24B80();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = (int *)type metadata accessor for _Chart3DContentInputs();
  uint64_t v11 = v10[5];
  uint64_t v12 = &v7[v11];
  uint64_t v13 = &v8[v11];
  uint64_t v14 = sub_21FA24540();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  uint64_t v15 = v10[6];
  uint64_t v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  uint64_t v18 = sub_21FA24EF0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  uint64_t v19 = a3[14];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = sub_21FA24F30();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
  uint64_t v23 = a3[15];
  uint64_t v24 = *(void **)((char *)a2 + v23);
  *(void *)((char *)a1 + v23) = v24;
  id v25 = v24;
  return a1;
}

_DWORD *sub_21F7C8C78(_DWORD *a1, _DWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[13];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_21FA24B80();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = (int *)type metadata accessor for _Chart3DContentInputs();
  uint64_t v11 = v10[5];
  uint64_t v12 = &v7[v11];
  uint64_t v13 = &v8[v11];
  uint64_t v14 = sub_21FA24540();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  uint64_t v15 = v10[6];
  uint64_t v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  uint64_t v18 = sub_21FA24EF0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  uint64_t v19 = a3[14];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = sub_21FA24F30();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 24))(v20, v21, v22);
  uint64_t v23 = a3[15];
  uint64_t v24 = *(void **)((char *)a2 + v23);
  id v25 = *(void **)((char *)a1 + v23);
  *(void *)((char *)a1 + v23) = v24;
  id v26 = v24;

  return a1;
}

_DWORD *sub_21F7C8E14(_DWORD *a1, _DWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[13];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_21FA24B80();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = (int *)type metadata accessor for _Chart3DContentInputs();
  uint64_t v11 = v10[5];
  uint64_t v12 = &v7[v11];
  uint64_t v13 = &v8[v11];
  uint64_t v14 = sub_21FA24540();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  uint64_t v15 = v10[6];
  uint64_t v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  uint64_t v18 = sub_21FA24EF0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  uint64_t v19 = a3[14];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = sub_21FA24F30();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
  *(void *)((char *)a1 + a3[15]) = *(void *)((char *)a2 + a3[15]);
  return a1;
}

_DWORD *sub_21F7C8FA4(_DWORD *a1, _DWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[13];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_21FA24B80();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = (int *)type metadata accessor for _Chart3DContentInputs();
  uint64_t v11 = v10[5];
  uint64_t v12 = &v7[v11];
  uint64_t v13 = &v8[v11];
  uint64_t v14 = sub_21FA24540();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  uint64_t v15 = v10[6];
  uint64_t v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  uint64_t v18 = sub_21FA24EF0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  uint64_t v19 = a3[14];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = sub_21FA24F30();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 40))(v20, v21, v22);
  uint64_t v23 = a3[15];
  uint64_t v24 = *(void **)((char *)a1 + v23);
  *(void *)((char *)a1 + v23) = *(void *)((char *)a2 + v23);

  return a1;
}

uint64_t sub_21F7C913C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F7C9150);
}

uint64_t sub_21F7C9150(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for _Chart3DContentInputs();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[13];
LABEL_5:
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v11(a1 + v9, a2, v7);
  }
  uint64_t v10 = type metadata accessor for _Chart3DContentOutputs();
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[14];
    goto LABEL_5;
  }
  unint64_t v13 = *(void *)(a1 + a3[15]);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  return (v13 + 1);
}

uint64_t sub_21F7C9260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F7C9274);
}

uint64_t sub_21F7C9274(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for _Chart3DContentInputs();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[13];
  }
  else
  {
    uint64_t result = type metadata accessor for _Chart3DContentOutputs();
    if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
    {
      *(void *)(a1 + a4[15]) = (a2 - 1);
      return result;
    }
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[14];
  }
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);

  return v13(a1 + v11, a2, a2, v9);
}

uint64_t sub_21F7C9380()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F7C939C()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F7C93B8()
{
  return sub_21F7C93D0();
}

uint64_t sub_21F7C93D0()
{
  return AGGraphSetOutputValue();
}

uint64_t sub_21F7C9420@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = AGGraphSetValue();
  *a1 = result;
  return result;
}

uint64_t sub_21F7C945C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21F7C94A4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_21F7C9504@<X0>(_DWORD *a1@<X8>)
{
  sub_21F74D6BC();
  uint64_t result = sub_21FA24370();
  *a1 = result;
  return result;
}

uint64_t (*sub_21F7C9594())()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v1;
  long long v3 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v2 + 24) = v3;
  *(void *)(v2 + 40) = v3;
  return sub_21F7C9600;
}

uint64_t sub_21F7C95F0()
{
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_21F7C9600()
{
  return sub_21FA24390();
}

uint64_t sub_21F7C962C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_21F7C9694@<X0>(unsigned char *a1@<X8>)
{
  return sub_21F7C9420(a1);
}

uint64_t sub_21F7C96AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    sub_21FA26A00();
    sub_21FA25D30();
    uint64_t v6 = sub_21FA26A50();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_21FA268D0() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_21FA268D0() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

BOOL sub_21F7C97E4(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = sub_21FA269F0();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_21F7C98C8(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return static ChartContent._layoutChartContent(_:_:)(a1, a2, a3, a4);
}

uint64_t sub_21F7C98E0@<X0>(char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return static ChartContent._renderChartContent(_:_:)(a1, a2, a3, a4);
}

uint64_t dispatch thunk of ChartContent.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static ChartContent._layoutChartContent(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of static ChartContent._renderChartContent(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of static ChartContent._makeChartContent(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of static ChartContent._chartContentCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t sub_21F7C9980(uint64_t a1)
{
  return static ChartContent._chartContentCount(inputs:)(a1);
}

uint64_t destroy for _ChartContentLayoutInputs()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

void *_s6Charts25_ChartContentLayoutInputsVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for _ChartContentLayoutInputs(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for _ChartContentLayoutInputs(void *a1, _OWORD *a2, uint64_t a3)
{
  return sub_21F7458E8(a1, a2, a3, MEMORY[0x263F8EED8]);
}

ValueMetadata *type metadata accessor for _ChartContentLayoutInputs()
{
  return &type metadata for _ChartContentLayoutInputs;
}

uint64_t initializeBufferWithCopyOfBuffer for _ChartContentRenderInputs(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _ChartContentRenderInputs(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _ChartContentRenderInputs(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _ChartContentRenderInputs(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ChartContentRenderInputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)BOOL result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ChartContentRenderInputs()
{
  return &type metadata for _ChartContentRenderInputs;
}

void *assignWithCopy for SgNode(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

unint64_t sub_21F7C9C2C@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_21F7E0D20(*a1);
  *a2 = result;
  return result;
}

void sub_21F7C9C58(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_21F7C9C64(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_21F7C9C7C()
{
  sub_21FA26A00();
  sub_21F76790C((uint64_t)v1);
  return sub_21FA26A50();
}

uint64_t sub_21F7C9CC0()
{
  sub_21FA26A00();
  sub_21F76790C((uint64_t)v1);
  return sub_21FA26A50();
}

BOOL sub_21F7C9CFC(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  char v6 = *(unsigned char *)(a1 + 48);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 48);
  return sub_21F7DF140((unsigned __int8 *)v5, (unsigned __int8 *)v7);
}

uint64_t sub_21F7C9D58(long long *a1)
{
  long long v19 = *a1;
  char v20 = *((unsigned char *)a1 + 16);
  sub_21F76C9DC((uint64_t)&v19, (uint64_t)v21, &qword_26AD48300);
  sub_21F76C9DC((uint64_t)v21, (uint64_t)&v23, &qword_26AD48300);
  sub_21F76C9DC((uint64_t)v21, (uint64_t)v22, &qword_26AD48300);
  if ((v22[16] & 1) == 0)
  {
    double v4 = v23;
    double v3 = v24;
    if (*(unsigned char *)(v1 + 16))
    {
      double v5 = v23;
    }
    else
    {
      double v6 = *(double *)v1;
      double v5 = *(double *)(v1 + 8);
      if (*(double *)v1 >= v23) {
        double v6 = v23;
      }
      if (v5 < v23) {
        double v5 = v23;
      }
      double v4 = v6;
    }
    if (v4 >= v24) {
      double v4 = v24;
    }
    if (v5 >= v24) {
      double v3 = v5;
    }
    *(double *)uint64_t v1 = v4;
    *(double *)(v1 + 8) = v3;
    *(unsigned char *)(v1 + 16) = 0;
  }
  long long v16 = *(long long *)((char *)a1 + 24);
  char v17 = *((unsigned char *)a1 + 40);
  sub_21F76C9DC((uint64_t)&v16, (uint64_t)v18, &qword_26AD48300);
  sub_21F76C9DC((uint64_t)v18, (uint64_t)&v14, &qword_26AD48300);
  sub_21F76C9DC((uint64_t)v18, (uint64_t)&v23, &qword_26AD48300);
  if ((v25 & 1) == 0)
  {
    double v8 = v14;
    double v7 = v15;
    if (*(unsigned char *)(v1 + 40))
    {
      double v9 = v14;
    }
    else
    {
      double v10 = *(double *)(v1 + 24);
      double v9 = *(double *)(v1 + 32);
      if (v10 >= v14) {
        double v10 = v14;
      }
      if (v9 < v14) {
        double v9 = v14;
      }
      double v8 = v10;
    }
    if (v8 >= v15) {
      double v8 = v15;
    }
    if (v9 >= v15) {
      double v7 = v9;
    }
    *(double *)(v1 + 24) = v8;
    *(double *)(v1 + 32) = v7;
    *(unsigned char *)(v1 + 40) = 0;
  }
  uint64_t v11 = swift_bridgeObjectRetain();
  sub_21F9EDC24(v11);
  uint64_t v12 = swift_bridgeObjectRetain();
  return sub_21F7C9ECC(v12);
}

uint64_t sub_21F7C9ECC(uint64_t a1)
{
  int64_t v2 = 0;
  uint64_t v3 = a1 + 56;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v13 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v13 >= v7) {
      goto LABEL_23;
    }
    unint64_t v14 = *(void *)(v3 + 8 * v13);
    ++v2;
    if (!v14)
    {
      int64_t v2 = v13 + 1;
      if (v13 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v14 = *(void *)(v3 + 8 * v2);
      if (!v14)
      {
        int64_t v2 = v13 + 2;
        if (v13 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v3 + 8 * v2);
        if (!v14)
        {
          int64_t v2 = v13 + 3;
          if (v13 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v14 = *(void *)(v3 + 8 * v2);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v14 - 1) & v14;
    unint64_t v9 = __clz(__rbit64(v14)) + (v2 << 6);
LABEL_5:
    double v10 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v9);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    swift_bridgeObjectRetain();
    sub_21F7D5038(&v17, v11, v12);
    swift_bridgeObjectRelease();
  }
  int64_t v15 = v13 + 4;
  if (v15 < v7)
  {
    unint64_t v14 = *(void *)(v3 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        int64_t v2 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          break;
        }
        if (v2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v3 + 8 * v2);
        ++v15;
        if (v14) {
          goto LABEL_22;
        }
      }
LABEL_27:
      __break(1u);
      JUMPOUT(0x21F7CA04CLL);
    }
    int64_t v2 = v15;
    goto LABEL_22;
  }
LABEL_23:

  return swift_release();
}

uint64_t sub_21F7CA08C(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = v5;
  uint64_t v8 = sub_21F959964(a2, a4, a5);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    uint64_t v10 = 0;
    uint64_t v56 = v5 + 552;
    uint64_t v57 = v5 + 576;
    uint64_t v61 = v5;
    uint64_t v62 = a3;
    uint64_t v59 = a3;
    uint64_t v60 = v5 + 264;
    uint64_t v58 = a3;
    uint64_t v63 = v8;
    do
    {
      uint64_t v11 = v8 + v10;
      uint64_t v12 = *(void *)(v8 + v10 + 32);
      uint64_t v64 = *(void *)(v8 + v10 + 40);
      char v13 = *(unsigned char *)(v8 + v10 + 48);
      unint64_t v14 = *(unint64_t *)(v8 + v10 + 64);
      uint64_t v65 = v12;
      uint64_t v15 = *(uint64_t *)(v11 + 72);
      int v16 = *(char *)(v11 + 80);
      uint64_t v18 = *(void *)(v11 + 88);
      uint64_t v17 = *(void *)(v11 + 96);
      if ((v16 & 0x80000000) == 0)
      {
        uint64_t v19 = *(void *)(v11 + 96);
        switch(v62)
        {
          case 1:
            swift_beginAccess();
            sub_21F7652C0(v65, v64, v13);
            swift_bridgeObjectRetain();
            sub_21F770E44(v14, v15, v16);
            sub_21F7622A4(v14, v15, v16);
            unint64_t v6 = v61;
            swift_endAccess();
            goto LABEL_242;
          case 2:
            swift_beginAccess();
            sub_21F7652C0(v65, v64, v13);
            swift_bridgeObjectRetain();
            sub_21F770E44(v14, v15, v16);
            sub_21F7622A4(v14, v15, v16);
            unint64_t v6 = v61;
            swift_endAccess();
            goto LABEL_250;
          case 3:
            swift_beginAccess();
            sub_21F7652C0(v65, v64, v13);
            swift_bridgeObjectRetain();
            sub_21F770E44(v14, v15, v16);
            sub_21F7622A4(v14, v15, v16);
            unint64_t v6 = v61;
            swift_endAccess();
            goto LABEL_258;
          case 4:
            swift_beginAccess();
            sub_21F7652C0(v65, v64, v13);
            swift_bridgeObjectRetain();
            sub_21F770E44(v14, v15, v16);
            sub_21F7622A4(v14, v15, v16);
            unint64_t v6 = v61;
            swift_endAccess();
            goto LABEL_266;
          case 5:
            swift_beginAccess();
            sub_21F7652C0(v65, v64, v13);
            swift_bridgeObjectRetain();
            sub_21F770E44(v14, v15, v16);
            sub_21F7622A4(v14, v15, v16);
            unint64_t v6 = v61;
            swift_endAccess();
            goto LABEL_274;
          case 6:
            swift_beginAccess();
            sub_21F7652C0(v65, v64, v13);
            swift_bridgeObjectRetain();
            sub_21F770E44(v14, v15, v16);
            sub_21F7622A4(v14, v15, v16);
            unint64_t v6 = v61;
            swift_endAccess();
            uint64_t v17 = v19;
            goto LABEL_296;
          case 7:
            swift_beginAccess();
            sub_21F7652C0(v65, v64, v13);
            swift_bridgeObjectRetain();
            sub_21F770E44(v14, v15, v16);
            sub_21F7622A4(v14, v15, v16);
            unint64_t v6 = v61;
            swift_endAccess();
            goto LABEL_283;
          default:
            swift_beginAccess();
            sub_21F7652C0(v65, v64, v13);
            swift_bridgeObjectRetain();
            sub_21F770E44(v14, v15, v16);
            sub_21F7622A4(v14, v15, v16);
            unint64_t v6 = v61;
            swift_endAccess();
            goto LABEL_204;
        }
      }
      unint64_t v20 = v14;
      uint64_t v21 = *(void *)(v11 + 72);
      if (v16)
      {
        switch(v58)
        {
          case 1:
            if ((~v14 & 0x7FF0000000000000) != 0)
            {
              if (v6[136])
              {
                double v30 = *(double *)&v14;
              }
              else
              {
                double v30 = *((double *)v6 + 15);
                if (v30 >= *(double *)&v14) {
                  double v30 = *(double *)&v14;
                }
                if (*((double *)v6 + 16) >= *(double *)&v14) {
                  unint64_t v20 = *((void *)v6 + 16);
                }
              }
              *((double *)v6 + 15) = v30;
              *((void *)v6 + 16) = v20;
              v6[136] = 0;
            }
            if ((~v15 & 0x7FF0000000000000) != 0)
            {
              if (v6[136])
              {
                double v46 = *(double *)&v15;
              }
              else
              {
                double v46 = *((double *)v6 + 15);
                if (v46 >= *(double *)&v15) {
                  double v46 = *(double *)&v15;
                }
                if (*((double *)v6 + 16) >= *(double *)&v15) {
                  uint64_t v21 = *((void *)v6 + 16);
                }
              }
              *((double *)v6 + 15) = v46;
              *((void *)v6 + 16) = v21;
              v6[136] = 0;
            }
LABEL_241:
            uint64_t v19 = v17;
            sub_21F7652C0(v12, v64, v13);
            swift_bridgeObjectRetain();
LABEL_242:
            swift_beginAccess();
            if (v6[161] << 8 == 512)
            {
              nullsub_1(v18, v19);
              *((_WORD *)v6 + 80) = sub_21F773654() & 0x1FF;
            }
            break;
          case 2:
            if ((~v14 & 0x7FF0000000000000) != 0)
            {
              if (v6[216])
              {
                double v31 = *(double *)&v14;
              }
              else
              {
                double v31 = *((double *)v6 + 25);
                if (v31 >= *(double *)&v14) {
                  double v31 = *(double *)&v14;
                }
                if (*((double *)v6 + 26) >= *(double *)&v14) {
                  unint64_t v20 = *((void *)v6 + 26);
                }
              }
              *((double *)v6 + 25) = v31;
              *((void *)v6 + 26) = v20;
              v6[216] = 0;
            }
            if ((~v15 & 0x7FF0000000000000) != 0)
            {
              if (v6[216])
              {
                double v47 = *(double *)&v15;
              }
              else
              {
                double v47 = *((double *)v6 + 25);
                if (v47 >= *(double *)&v15) {
                  double v47 = *(double *)&v15;
                }
                if (*((double *)v6 + 26) >= *(double *)&v15) {
                  uint64_t v21 = *((void *)v6 + 26);
                }
              }
              *((double *)v6 + 25) = v47;
              *((void *)v6 + 26) = v21;
              v6[216] = 0;
            }
LABEL_249:
            uint64_t v19 = v17;
            sub_21F7652C0(v12, v64, v13);
            swift_bridgeObjectRetain();
LABEL_250:
            swift_beginAccess();
            if (v6[241] << 8 == 512)
            {
              nullsub_1(v18, v19);
              *((_WORD *)v6 + 120) = sub_21F773654() & 0x1FF;
            }
            break;
          case 3:
            if ((~v14 & 0x7FF0000000000000) != 0)
            {
              if (v60[24])
              {
                double v32 = *(double *)&v14;
              }
              else
              {
                double v32 = *((double *)v6 + 34);
                if (v32 >= *(double *)&v14) {
                  double v32 = *(double *)&v14;
                }
                if (*((double *)v6 + 35) >= *(double *)&v14) {
                  unint64_t v20 = *((void *)v6 + 35);
                }
              }
              *((double *)v6 + 34) = v32;
              *((void *)v6 + 35) = v20;
              v60[24] = 0;
            }
            if ((~v15 & 0x7FF0000000000000) != 0)
            {
              if (v60[24])
              {
                double v48 = *(double *)&v15;
              }
              else
              {
                double v48 = *((double *)v6 + 34);
                if (v48 >= *(double *)&v15) {
                  double v48 = *(double *)&v15;
                }
                if (*((double *)v6 + 35) >= *(double *)&v15) {
                  uint64_t v21 = *((void *)v6 + 35);
                }
              }
              *((double *)v6 + 34) = v48;
              *((void *)v6 + 35) = v21;
              v60[24] = 0;
            }
LABEL_257:
            uint64_t v19 = v17;
            sub_21F7652C0(v12, v64, v13);
            swift_bridgeObjectRetain();
LABEL_258:
            swift_beginAccess();
            if (v6[313] << 8 == 512)
            {
              nullsub_1(v18, v19);
              *((_WORD *)v6 + 156) = sub_21F773654() & 0x1FF;
            }
            break;
          case 4:
            if ((~v14 & 0x7FF0000000000000) != 0)
            {
              if (v60[96])
              {
                double v33 = *(double *)&v14;
              }
              else
              {
                double v33 = *((double *)v6 + 43);
                if (v33 >= *(double *)&v14) {
                  double v33 = *(double *)&v14;
                }
                if (*((double *)v6 + 44) >= *(double *)&v14) {
                  unint64_t v20 = *((void *)v6 + 44);
                }
              }
              *((double *)v6 + 43) = v33;
              *((void *)v6 + 44) = v20;
              v60[96] = 0;
            }
            if ((~v15 & 0x7FF0000000000000) != 0)
            {
              if (v60[96])
              {
                double v49 = *(double *)&v15;
              }
              else
              {
                double v49 = *((double *)v6 + 43);
                if (v49 >= *(double *)&v15) {
                  double v49 = *(double *)&v15;
                }
                if (*((double *)v6 + 44) >= *(double *)&v15) {
                  uint64_t v21 = *((void *)v6 + 44);
                }
              }
              *((double *)v6 + 43) = v49;
              *((void *)v6 + 44) = v21;
              v60[96] = 0;
            }
LABEL_265:
            uint64_t v19 = v17;
            sub_21F7652C0(v12, v64, v13);
            swift_bridgeObjectRetain();
LABEL_266:
            swift_beginAccess();
            if (v6[385] << 8 == 512)
            {
              nullsub_1(v18, v19);
              *((_WORD *)v6 + 192) = sub_21F773654() & 0x1FF;
            }
            break;
          case 5:
            if ((~v14 & 0x7FF0000000000000) != 0)
            {
              if (v60[168])
              {
                double v34 = *(double *)&v14;
              }
              else
              {
                double v34 = *((double *)v6 + 52);
                if (v34 >= *(double *)&v14) {
                  double v34 = *(double *)&v14;
                }
                if (*((double *)v6 + 53) >= *(double *)&v14) {
                  unint64_t v20 = *((void *)v6 + 53);
                }
              }
              *((double *)v6 + 52) = v34;
              *((void *)v6 + 53) = v20;
              v60[168] = 0;
            }
            if ((~v15 & 0x7FF0000000000000) != 0)
            {
              if (v60[168])
              {
                double v50 = *(double *)&v15;
              }
              else
              {
                double v50 = *((double *)v6 + 52);
                if (v50 >= *(double *)&v15) {
                  double v50 = *(double *)&v15;
                }
                if (*((double *)v6 + 53) >= *(double *)&v15) {
                  uint64_t v21 = *((void *)v6 + 53);
                }
              }
              *((double *)v6 + 52) = v50;
              *((void *)v6 + 53) = v21;
              v60[168] = 0;
            }
LABEL_273:
            uint64_t v19 = v17;
            sub_21F7652C0(v12, v64, v13);
            swift_bridgeObjectRetain();
LABEL_274:
            swift_beginAccess();
            if (v6[457] << 8 == 512)
            {
              nullsub_1(v18, v19);
              *((_WORD *)v6 + 228) = sub_21F773654() & 0x1FF;
            }
            break;
          case 6:
            if ((~v14 & 0x7FF0000000000000) != 0)
            {
              if (v60[240])
              {
                double v37 = *(double *)&v14;
              }
              else
              {
                double v37 = *((double *)v6 + 61);
                if (v37 >= *(double *)&v14) {
                  double v37 = *(double *)&v14;
                }
                if (*((double *)v6 + 62) >= *(double *)&v14) {
                  unint64_t v20 = *((void *)v6 + 62);
                }
              }
              *((double *)v6 + 61) = v37;
              *((void *)v6 + 62) = v20;
              v60[240] = 0;
            }
            if ((~v15 & 0x7FF0000000000000) != 0)
            {
              if (v60[240])
              {
                double v53 = *(double *)&v15;
              }
              else
              {
                double v53 = *((double *)v6 + 61);
                if (v53 >= *(double *)&v15) {
                  double v53 = *(double *)&v15;
                }
                if (*((double *)v6 + 62) >= *(double *)&v15) {
                  uint64_t v21 = *((void *)v6 + 62);
                }
              }
              *((double *)v6 + 61) = v53;
              *((void *)v6 + 62) = v21;
              v60[240] = 0;
            }
LABEL_295:
            sub_21F7652C0(v12, v64, v13);
            swift_bridgeObjectRetain();
LABEL_296:
            swift_beginAccess();
            if (v6[529] << 8 == 512)
            {
              nullsub_1(v18, v17);
              *((_WORD *)v6 + 264) = sub_21F773654() & 0x1FF;
            }
            break;
          case 7:
            if ((~v14 & 0x7FF0000000000000) != 0)
            {
              if (*v57)
              {
                double v35 = *(double *)&v14;
              }
              else
              {
                double v35 = *((double *)v6 + 70);
                if (v35 >= *(double *)&v14) {
                  double v35 = *(double *)&v14;
                }
                if (*((double *)v6 + 71) >= *(double *)&v14) {
                  unint64_t v20 = *((void *)v6 + 71);
                }
              }
              *((double *)v6 + 70) = v35;
              *((void *)v6 + 71) = v20;
              *uint64_t v57 = 0;
            }
            if ((~v15 & 0x7FF0000000000000) == 0) {
              goto LABEL_282;
            }
            if (*v57)
            {
              double v51 = *(double *)&v15;
            }
            else
            {
              double v51 = *((double *)v6 + 70);
              if (v51 >= *(double *)&v15) {
                double v51 = *(double *)&v15;
              }
              if (*((double *)v6 + 71) >= *(double *)&v15) {
                uint64_t v21 = *((void *)v6 + 71);
              }
            }
            *((double *)v6 + 70) = v51;
            *((void *)v6 + 71) = v21;
            uint64_t v54 = v57;
            goto LABEL_281;
          default:
            if ((~v14 & 0x7FF0000000000000) != 0)
            {
              if (v6[64])
              {
                double v23 = *(double *)&v14;
              }
              else
              {
                double v23 = *((double *)v6 + 6);
                if (v23 >= *(double *)&v14) {
                  double v23 = *(double *)&v14;
                }
                if (*((double *)v6 + 7) >= *(double *)&v14) {
                  unint64_t v20 = *((void *)v6 + 7);
                }
              }
              *((double *)v6 + 6) = v23;
              *((void *)v6 + 7) = v20;
              v6[64] = 0;
            }
            if ((~v15 & 0x7FF0000000000000) != 0)
            {
              if (v6[64])
              {
                double v39 = *(double *)&v15;
              }
              else
              {
                double v39 = *((double *)v6 + 6);
                if (v39 >= *(double *)&v15) {
                  double v39 = *(double *)&v15;
                }
                if (*((double *)v6 + 7) >= *(double *)&v15) {
                  uint64_t v21 = *((void *)v6 + 7);
                }
              }
              *((double *)v6 + 6) = v39;
              *((void *)v6 + 7) = v21;
              v6[64] = 0;
            }
LABEL_203:
            uint64_t v19 = v17;
            sub_21F7652C0(v12, v64, v13);
            swift_bridgeObjectRetain();
LABEL_204:
            swift_beginAccess();
            if (v6[89] << 8 == 512)
            {
              nullsub_1(v18, v19);
              *((_WORD *)v6 + 44) = sub_21F773654() & 0x1FF;
            }
            break;
        }
      }
      else
      {
        switch(v59)
        {
          case 1:
            if ((~v14 & 0x7FF0000000000000) != 0)
            {
              if (v6[112])
              {
                double v24 = *(double *)&v14;
              }
              else
              {
                double v24 = *((double *)v6 + 12);
                if (v24 >= *(double *)&v14) {
                  double v24 = *(double *)&v14;
                }
                if (*((double *)v6 + 13) >= *(double *)&v14) {
                  unint64_t v20 = *((void *)v6 + 13);
                }
              }
              *((double *)v6 + 12) = v24;
              *((void *)v6 + 13) = v20;
              v6[112] = 0;
            }
            if ((~v15 & 0x7FF0000000000000) != 0)
            {
              if (v6[112])
              {
                double v40 = *(double *)&v15;
              }
              else
              {
                double v40 = *((double *)v6 + 12);
                if (v40 >= *(double *)&v15) {
                  double v40 = *(double *)&v15;
                }
                if (*((double *)v6 + 13) >= *(double *)&v15) {
                  uint64_t v21 = *((void *)v6 + 13);
                }
              }
              *((double *)v6 + 12) = v40;
              *((void *)v6 + 13) = v21;
              v6[112] = 0;
            }
            goto LABEL_241;
          case 2:
            if ((~v14 & 0x7FF0000000000000) != 0)
            {
              if (v6[192])
              {
                double v25 = *(double *)&v14;
              }
              else
              {
                double v25 = *((double *)v6 + 22);
                if (v25 >= *(double *)&v14) {
                  double v25 = *(double *)&v14;
                }
                if (*((double *)v6 + 23) >= *(double *)&v14) {
                  unint64_t v20 = *((void *)v6 + 23);
                }
              }
              *((double *)v6 + 22) = v25;
              *((void *)v6 + 23) = v20;
              v6[192] = 0;
            }
            if ((~v15 & 0x7FF0000000000000) != 0)
            {
              if (v6[192])
              {
                double v41 = *(double *)&v15;
              }
              else
              {
                double v41 = *((double *)v6 + 22);
                if (v41 >= *(double *)&v15) {
                  double v41 = *(double *)&v15;
                }
                if (*((double *)v6 + 23) >= *(double *)&v15) {
                  uint64_t v21 = *((void *)v6 + 23);
                }
              }
              *((double *)v6 + 22) = v41;
              *((void *)v6 + 23) = v21;
              v6[192] = 0;
            }
            goto LABEL_249;
          case 3:
            if ((~v14 & 0x7FF0000000000000) != 0)
            {
              if (*v60)
              {
                double v26 = *(double *)&v14;
              }
              else
              {
                double v26 = *((double *)v6 + 31);
                if (v26 >= *(double *)&v14) {
                  double v26 = *(double *)&v14;
                }
                if (*((double *)v6 + 32) >= *(double *)&v14) {
                  unint64_t v20 = *((void *)v6 + 32);
                }
              }
              *((double *)v6 + 31) = v26;
              *((void *)v6 + 32) = v20;
              *uint64_t v60 = 0;
            }
            if ((~v15 & 0x7FF0000000000000) != 0)
            {
              if (*v60)
              {
                double v42 = *(double *)&v15;
              }
              else
              {
                double v42 = *((double *)v6 + 31);
                if (v42 >= *(double *)&v15) {
                  double v42 = *(double *)&v15;
                }
                if (*((double *)v6 + 32) >= *(double *)&v15) {
                  uint64_t v21 = *((void *)v6 + 32);
                }
              }
              *((double *)v6 + 31) = v42;
              *((void *)v6 + 32) = v21;
              *uint64_t v60 = 0;
            }
            goto LABEL_257;
          case 4:
            if ((~v14 & 0x7FF0000000000000) != 0)
            {
              if (v60[72])
              {
                double v27 = *(double *)&v14;
              }
              else
              {
                double v27 = *((double *)v6 + 40);
                if (v27 >= *(double *)&v14) {
                  double v27 = *(double *)&v14;
                }
                if (*((double *)v6 + 41) >= *(double *)&v14) {
                  unint64_t v20 = *((void *)v6 + 41);
                }
              }
              *((double *)v6 + 40) = v27;
              *((void *)v6 + 41) = v20;
              v60[72] = 0;
            }
            if ((~v15 & 0x7FF0000000000000) != 0)
            {
              if (v60[72])
              {
                double v43 = *(double *)&v15;
              }
              else
              {
                double v43 = *((double *)v6 + 40);
                if (v43 >= *(double *)&v15) {
                  double v43 = *(double *)&v15;
                }
                if (*((double *)v6 + 41) >= *(double *)&v15) {
                  uint64_t v21 = *((void *)v6 + 41);
                }
              }
              *((double *)v6 + 40) = v43;
              *((void *)v6 + 41) = v21;
              v60[72] = 0;
            }
            goto LABEL_265;
          case 5:
            if ((~v14 & 0x7FF0000000000000) != 0)
            {
              if (v60[144])
              {
                double v28 = *(double *)&v14;
              }
              else
              {
                double v28 = *((double *)v6 + 49);
                if (v28 >= *(double *)&v14) {
                  double v28 = *(double *)&v14;
                }
                if (*((double *)v6 + 50) >= *(double *)&v14) {
                  unint64_t v20 = *((void *)v6 + 50);
                }
              }
              *((double *)v6 + 49) = v28;
              *((void *)v6 + 50) = v20;
              v60[144] = 0;
            }
            if ((~v15 & 0x7FF0000000000000) != 0)
            {
              if (v60[144])
              {
                double v44 = *(double *)&v15;
              }
              else
              {
                double v44 = *((double *)v6 + 49);
                if (v44 >= *(double *)&v15) {
                  double v44 = *(double *)&v15;
                }
                if (*((double *)v6 + 50) >= *(double *)&v15) {
                  uint64_t v21 = *((void *)v6 + 50);
                }
              }
              *((double *)v6 + 49) = v44;
              *((void *)v6 + 50) = v21;
              v60[144] = 0;
            }
            goto LABEL_273;
          case 6:
            if ((~v14 & 0x7FF0000000000000) != 0)
            {
              if (v60[216])
              {
                double v36 = *(double *)&v14;
              }
              else
              {
                double v36 = *((double *)v6 + 58);
                if (v36 >= *(double *)&v14) {
                  double v36 = *(double *)&v14;
                }
                if (*((double *)v6 + 59) >= *(double *)&v14) {
                  unint64_t v20 = *((void *)v6 + 59);
                }
              }
              *((double *)v6 + 58) = v36;
              *((void *)v6 + 59) = v20;
              v60[216] = 0;
            }
            if ((~v15 & 0x7FF0000000000000) != 0)
            {
              if (v60[216])
              {
                double v52 = *(double *)&v15;
              }
              else
              {
                double v52 = *((double *)v6 + 58);
                if (v52 >= *(double *)&v15) {
                  double v52 = *(double *)&v15;
                }
                if (*((double *)v6 + 59) >= *(double *)&v15) {
                  uint64_t v21 = *((void *)v6 + 59);
                }
              }
              *((double *)v6 + 58) = v52;
              *((void *)v6 + 59) = v21;
              v60[216] = 0;
            }
            goto LABEL_295;
          case 7:
            if ((~v14 & 0x7FF0000000000000) != 0)
            {
              if (*v56)
              {
                double v29 = *(double *)&v14;
              }
              else
              {
                double v29 = *((double *)v6 + 67);
                if (v29 >= *(double *)&v14) {
                  double v29 = *(double *)&v14;
                }
                if (*((double *)v6 + 68) >= *(double *)&v14) {
                  unint64_t v20 = *((void *)v6 + 68);
                }
              }
              *((double *)v6 + 67) = v29;
              *((void *)v6 + 68) = v20;
              *uint64_t v56 = 0;
            }
            if ((~v15 & 0x7FF0000000000000) == 0) {
              goto LABEL_282;
            }
            if (*v56)
            {
              double v45 = *(double *)&v15;
            }
            else
            {
              double v45 = *((double *)v6 + 67);
              if (v45 >= *(double *)&v15) {
                double v45 = *(double *)&v15;
              }
              if (*((double *)v6 + 68) >= *(double *)&v15) {
                uint64_t v21 = *((void *)v6 + 68);
              }
            }
            *((double *)v6 + 67) = v45;
            *((void *)v6 + 68) = v21;
            uint64_t v54 = v56;
            break;
          default:
            if ((~v14 & 0x7FF0000000000000) != 0)
            {
              if (v6[40])
              {
                double v22 = *(double *)&v14;
              }
              else
              {
                double v22 = *((double *)v6 + 3);
                if (v22 >= *(double *)&v14) {
                  double v22 = *(double *)&v14;
                }
                if (*((double *)v6 + 4) >= *(double *)&v14) {
                  unint64_t v20 = *((void *)v6 + 4);
                }
              }
              *((double *)v6 + 3) = v22;
              *((void *)v6 + 4) = v20;
              v6[40] = 0;
            }
            if ((~v15 & 0x7FF0000000000000) != 0)
            {
              if (v6[40])
              {
                double v38 = *(double *)&v15;
              }
              else
              {
                double v38 = *((double *)v6 + 3);
                if (v38 >= *(double *)&v15) {
                  double v38 = *(double *)&v15;
                }
                if (*((double *)v6 + 4) >= *(double *)&v15) {
                  uint64_t v21 = *((void *)v6 + 4);
                }
              }
              *((double *)v6 + 3) = v38;
              *((void *)v6 + 4) = v21;
              v6[40] = 0;
            }
            goto LABEL_203;
        }
LABEL_281:
        *uint64_t v54 = 0;
LABEL_282:
        uint64_t v19 = v17;
        sub_21F7652C0(v12, v64, v13);
        swift_bridgeObjectRetain();
LABEL_283:
        swift_beginAccess();
        if (v6[601] << 8 == 512)
        {
          nullsub_1(v18, v19);
          *((_WORD *)v6 + 300) = sub_21F773654() & 0x1FF;
        }
      }
      swift_endAccess();
      sub_21F7656A8(v65, v64, v13);
      swift_bridgeObjectRelease();
      sub_21F770E38(v14, v15, v16);
      v10 += 72;
      --v9;
      uint64_t v8 = v63;
    }
    while (v9);
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_21F7CB174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_21FA265E0();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v26 - v11;
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, a3);
  sub_21FA265F0();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v14 = sub_21F959964((uint64_t)v12, v9, WitnessTable);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (*(void *)(v14 + 16))
  {
    uint64_t v15 = *(void *)(v14 + 32);
    uint64_t v16 = *(void *)(v14 + 40);
    uint64_t v17 = *(unsigned __int8 *)(v14 + 48);
    uint64_t v18 = *(void *)(v14 + 56);
    uint64_t v19 = *(void *)(v14 + 64);
    uint64_t v20 = *(void *)(v14 + 72);
    uint64_t v21 = *(unsigned __int8 *)(v14 + 80);
    uint64_t v22 = *(void *)(v14 + 88);
    uint64_t v26 = *(void *)(v14 + 96);
    uint64_t v27 = v22;
    sub_21F7652C0(v15, v16, v17);
    swift_bridgeObjectRetain();
    sub_21F770E44(v19, v20, v21);
    swift_bridgeObjectRelease();
    uint64_t v23 = *(void *)(a1 + 8);
    char v24 = *(unsigned char *)(a1 + 16);
    swift_beginAccess();
    uint64_t v29 = v15;
    uint64_t v30 = v16;
    uint64_t v31 = v17;
    uint64_t v32 = v18;
    uint64_t v33 = v19;
    uint64_t v34 = v20;
    uint64_t v35 = v21;
    uint64_t v36 = v27;
    uint64_t v37 = v26;
    uint64_t v38 = v23;
    char v39 = v24;
    swift_setAtWritableKeyPath();
    swift_endAccess();
    return swift_release();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  return result;
}

uint64_t sub_21F7CB424(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4)
{
  nullsub_1(a3, a4);
  uint64_t result = sub_21F773654();
  *a2 = result & 0x1FF;
  return result;
}

uint64_t sub_21F7CB48C(uint64_t result, char a2, uint64_t a3, char a4)
{
  if ((a2 & 1) == 0)
  {
    double v7 = *(double *)&result;
    *(double *)&uint64_t result = COERCE_DOUBLE(swift_beginAccess());
    if ((~*(void *)&v7 & 0x7FF0000000000000) != 0)
    {
      double v8 = v7;
      if (*(unsigned char *)(v4 + 40))
      {
        double v9 = v7;
      }
      else
      {
        double v9 = *(double *)(v4 + 24);
        if (v9 >= v7) {
          double v9 = v7;
        }
        if (*(double *)(v4 + 32) >= v7) {
          double v8 = *(double *)(v4 + 32);
        }
      }
      *(double *)(v4 + 24) = v9;
      *(double *)(v4 + 32) = v8;
      *(unsigned char *)(v4 + 40) = 0;
    }
  }
  if ((a4 & 1) == 0)
  {
    *(double *)&uint64_t result = COERCE_DOUBLE(swift_beginAccess());
    if ((~a3 & 0x7FF0000000000000) != 0)
    {
      uint64_t v10 = a3;
      if (*(unsigned char *)(v4 + 112))
      {
        double v11 = *(double *)&a3;
      }
      else
      {
        double v11 = *(double *)(v4 + 96);
        if (v11 >= *(double *)&a3) {
          double v11 = *(double *)&a3;
        }
        if (*(double *)(v4 + 104) >= *(double *)&a3) {
          uint64_t v10 = *(void *)(v4 + 104);
        }
      }
      *(double *)(v4 + 96) = v11;
      *(void *)(v4 + 104) = v10;
      *(unsigned char *)(v4 + 112) = 0;
    }
  }
  return result;
}

uint64_t sub_21F7CB56C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v30 = a1;
  int v32 = a3;
  uint64_t v27 = a2;
  uint64_t v33 = a5;
  uint64_t v6 = *(void *)(a4 + 16);
  uint64_t v7 = type metadata accessor for ConcreteScale();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t v11 = sub_21FA26340();
  uint64_t v28 = *(void *)(v11 - 8);
  uint64_t v29 = v11;
  MEMORY[0x270FA5388](v11);
  char v13 = (char *)&v26 - v12;
  uint64_t v14 = type metadata accessor for ConcreteScale();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v26 - v16;
  __n128 v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v22 + 16))(v21, v31, a4, v19);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v21, v7);
    if (v32 == 2)
    {
      uint64_t v34 = v30;
      uint64_t v35 = v27;
      uint64_t v23 = v33;
      sub_21F8B53C8();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v23, 0, 1, v6);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v33, 1, 1, v6);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v21, v14);
    if ((_BYTE)v32 && v32 != 1)
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      uint64_t v25 = 1;
    }
    else
    {
      uint64_t v34 = v30;
      sub_21F8B53C8();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      uint64_t v25 = 0;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v13, v25, 1, v6);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v33, v13, v29);
  }
}

uint64_t sub_21F7CB998(uint64_t a1, uint64_t a2, unsigned __int8 a3, double a4)
{
  void (*v12)(double *__return_ptr, void *);
  uint64_t result;
  void (*v14)(void *__return_ptr, double *);
  uint64_t v15;
  void v16[2];
  double v17;
  unsigned char v18[8];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(double *__return_ptr, void *);
  char v23;

  uint64_t v5 = v4;
  sub_21F76C9DC(v4, (uint64_t)v18, &qword_26AD47AB8);
  uint64_t v10 = v19;
  uint64_t v15 = v20;
  unsigned __int8 v11 = v21;
  sub_21F76C9DC(v5, (uint64_t)&v22, &qword_26AD47AB8);
  if (v23)
  {
    if (a3 == 2)
    {
      uint64_t v12 = v22;
      v16[0] = a1;
      v16[1] = a2;
      swift_retain();
      sub_21F7642D0(v10);
      swift_bridgeObjectRetain();
      sub_21F7637E4(v15, v11);
      v12(&v17, v16);
      sub_21F76D4E8(v5, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76D570);
      *(double *)&uint64_t result = v17 + a4;
      return result;
    }
  }
  else
  {
    uint64_t v14 = (void (*)(void *__return_ptr, double *))v22;
    if (a3 <= 1u)
    {
      uint64_t v17 = *(double *)&a1;
      swift_retain();
      sub_21F7642D0(v10);
      swift_bridgeObjectRetain();
      sub_21F7637E4(v15, v11);
      v14(v16, &v17);
      sub_21F76D4E8(v5, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76D570);
      return v16[0];
    }
  }
  *(double *)&uint64_t result = 0.0;
  return result;
}

uint64_t sub_21F7CBB7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = type metadata accessor for ConcreteScale();
  uint64_t v29 = *(void *)(v10 - 8);
  uint64_t v30 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v28 - v11;
  uint64_t v31 = v9;
  uint64_t v13 = type metadata accessor for ConcreteScale();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v28 - v15;
  uint64_t v17 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  nullsub_1(a3, a4);
  uint64_t v32 = a4;
  uint64_t v33 = a3;
  unsigned int v21 = sub_21F773654();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v5, a2);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v20, v13);
    if (v21 <= 1)
    {
      uint64_t v34 = sub_21F8BB664(v13);
      MEMORY[0x270FA5388](v34);
      uint64_t v26 = v33;
      *(&v28 - 4) = v31;
      *(&v28 - 3) = v26;
      *(&v28 - 2) = v32;
      swift_bridgeObjectRetain();
      sub_21F76CA40(&qword_26AD46C18);
      sub_21F7E139C(qword_267EE7520, &qword_26AD46C18);
      uint64_t v25 = sub_21FA25D80();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      return v25;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    return 0;
  }
  uint64_t v23 = v29;
  uint64_t v22 = v30;
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v12, v20, v30);
  if (v21 != 2)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v22);
    return 0;
  }
  uint64_t v34 = sub_21F8BB664(v22);
  MEMORY[0x270FA5388](v34);
  uint64_t v24 = v33;
  *(&v28 - 4) = v31;
  *(&v28 - 3) = v24;
  *(&v28 - 2) = v32;
  swift_bridgeObjectRetain();
  sub_21F76CA40(&qword_26AD468B8);
  sub_21F7E139C(&qword_267EE7518, &qword_26AD468B8);
  uint64_t v25 = sub_21FA25D80();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v22);
  return v25;
}

BOOL sub_21F7CC04C(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t sub_21F7CC088(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  if ((sub_21F938D30(*a1, *a2) & 1) == 0) {
    return 0;
  }

  return sub_21F938D30(v2, v3);
}

uint64_t sub_21F7CC0E4@<X0>(char a1@<W0>, _OWORD *a2@<X1>, char *a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6 = a5;
  if (a1 != 1)
  {
    if (a1)
    {
      swift_release();
      sub_21F7BB330((uint64_t)__dst);
      sub_21F76C9DC((uint64_t)__dst, a6, &qword_26AD46A38);
      goto LABEL_25;
    }
    int v127 = a4;
    uint64_t v128 = a6;
    v129 = a3;
    v130 = a5;
    swift_beginAccess();
    memcpy(__dst, a2 + 5, 0x102uLL);
    uint64_t v10 = *((void *)&__dst[0] + 1);
    uint64_t v9 = *(void *)&__dst[0];
    char v11 = __dst[1];
    uint64_t v12 = *((void *)&__dst[1] + 1);
    uint64_t v14 = *((void *)&__dst[2] + 1);
    uint64_t v13 = *(void *)&__dst[2];
    char v15 = __dst[3];
    uint64_t v17 = *((void *)&__dst[0] + 1);
    uint64_t v16 = *(void *)&__dst[0];
    char v18 = __dst[1];
    uint64_t v20 = *((void *)&__dst[2] + 1);
    uint64_t v19 = *(void *)&__dst[2];
    char v21 = __dst[3];
    double v22 = *((double *)&__dst[4] + 1);
    char v23 = __dst[5];
    if (*((void *)&__dst[1] + 1)) {
      goto LABEL_4;
    }
    if (BYTE1(__dst[16]) != 2)
    {
      char v102 = __dst[3];
      uint64_t v105 = *((void *)&__dst[2] + 1);
      uint64_t v108 = *(void *)&__dst[2];
      char v111 = __dst[1];
      uint64_t v116 = *((void *)&__dst[0] + 1);
      uint64_t v121 = *(void *)&__dst[0];
      sub_21F761D2C((uint64_t)__dst, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21F761E74);
      int v67 = sub_21FA25120();
      if (v67 == sub_21FA25120())
      {
        uint64_t v17 = *((void *)&__dst[11] + 1);
        char v18 = __dst[12];
        uint64_t v68 = *((void *)&__dst[12] + 1);
        uint64_t v20 = *((void *)&__dst[13] + 1);
        uint64_t v19 = *(void *)&__dst[13];
        char v21 = __dst[14];
        char v96 = __dst[16];
        double v98 = *((double *)&__dst[15] + 1);
        uint64_t v100 = *(void *)&__dst[11];
        sub_21F761E74(*(uint64_t *)&__dst[11], *((uint64_t *)&__dst[11] + 1), __dst[12], *((uint64_t *)&__dst[12] + 1), *(uint64_t *)&__dst[13], *((uint64_t *)&__dst[13] + 1), __dst[14]);
        sub_21F761D2C((uint64_t)__dst, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21F761EDC);
        if (v68)
        {
          uint64_t v16 = v100;
          uint64_t v10 = v116;
          uint64_t v9 = v121;
          uint64_t v13 = v108;
          char v11 = v111;
          char v15 = v102;
          uint64_t v14 = v105;
          double v22 = v98;
          char v23 = v96;
LABEL_4:
          v124 = a2;
          char v24 = v18 & 1;
          uint64_t v25 = v16;
          double v26 = v22;
          uint64_t v27 = v12;
          char v28 = v23;
          sub_21F761E74(v9, v10, v11, v27, v13, v14, v15);
          sub_21F7652C0(v25, v17, v24);
          swift_bridgeObjectRetain();
          sub_21F770E44(v19, v20, v21);
          sub_21F7DF3B8(v19, v20, v21, v26, v28, 2, (uint64_t)&v134);
          uint64_t v29 = v134;
          uint64_t v30 = v135;
          uint64_t v31 = v136;
          uint64_t v119 = v137;
          char v114 = v138;
          sub_21F7656A8(v25, v17, v24);
          swift_bridgeObjectRelease();
          sub_21F770E38(v19, v20, v21);
          uint64_t v32 = v17;
          uint64_t v33 = v31;
          sub_21F7656A8(v25, v32, v24);
          swift_bridgeObjectRelease();
          uint64_t v34 = v19;
          uint64_t v35 = v119;
          uint64_t v36 = v20;
          char v37 = v114;
          sub_21F770E38(v34, v36, v21);
          a2 = v124;
LABEL_18:
          uint64_t v71 = (char *)a2 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
          swift_beginAccess();
          v72 = &v71[*(int *)(type metadata accessor for ChartContentRenderContext.Environment(0) + 88)];
          uint64_t v73 = *((void *)v72 + 2);
          long long v142 = *(_OWORD *)v72;
          uint64_t v143 = v73;
          uint64_t v144 = v29;
          uint64_t v145 = v30;
          uint64_t v146 = v33;
          uint64_t v147 = v35;
          char v148 = v37;
          long long v149 = a2[22];
          uint64_t v74 = OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale;
          goto LABEL_22;
        }
      }
      else
      {
        sub_21F761D2C((uint64_t)__dst, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21F761EDC);
      }
    }
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v33 = 0;
    uint64_t v35 = 0;
    char v37 = 2;
    goto LABEL_18;
  }
  int v127 = a4;
  uint64_t v128 = a6;
  v129 = a3;
  v130 = a5;
  swift_beginAccess();
  memcpy(__dst, a2 + 5, 0x102uLL);
  uint64_t v38 = *((void *)&__dst[5] + 1);
  uint64_t v39 = *(void *)&__dst[6];
  char v40 = BYTE8(__dst[6]);
  uint64_t v41 = *((void *)&__dst[7] + 1);
  uint64_t v43 = *(void *)&__dst[7];
  uint64_t v42 = *(void *)&__dst[8];
  char v44 = BYTE8(__dst[8]);
  uint64_t v45 = *((void *)&__dst[5] + 1);
  uint64_t v46 = *(void *)&__dst[6];
  char v47 = BYTE8(__dst[6]);
  uint64_t v48 = *((void *)&__dst[7] + 1);
  uint64_t v49 = *(void *)&__dst[8];
  char v50 = BYTE8(__dst[8]);
  double v51 = *(double *)&__dst[10];
  char v52 = BYTE8(__dst[10]);
  if (*(void *)&__dst[7]) {
    goto LABEL_6;
  }
  if (BYTE1(__dst[16]) == 2) {
    goto LABEL_20;
  }
  char v103 = BYTE8(__dst[8]);
  uint64_t v106 = *(void *)&__dst[8];
  uint64_t v109 = *((void *)&__dst[7] + 1);
  char v112 = BYTE8(__dst[6]);
  uint64_t v117 = *(void *)&__dst[6];
  uint64_t v122 = *((void *)&__dst[5] + 1);
  sub_21F761D2C((uint64_t)__dst, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21F761E74);
  int v69 = sub_21FA25120();
  if (v69 != sub_21FA25120())
  {
    sub_21F761D2C((uint64_t)__dst, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21F761EDC);
    goto LABEL_20;
  }
  uint64_t v46 = *((void *)&__dst[11] + 1);
  char v47 = __dst[12];
  uint64_t v70 = *((void *)&__dst[12] + 1);
  uint64_t v49 = *((void *)&__dst[13] + 1);
  uint64_t v48 = *(void *)&__dst[13];
  char v50 = __dst[14];
  char v97 = __dst[16];
  double v99 = *((double *)&__dst[15] + 1);
  uint64_t v101 = *(void *)&__dst[11];
  sub_21F761E74(*(uint64_t *)&__dst[11], *((uint64_t *)&__dst[11] + 1), __dst[12], *((uint64_t *)&__dst[12] + 1), *(uint64_t *)&__dst[13], *((uint64_t *)&__dst[13] + 1), __dst[14]);
  sub_21F761D2C((uint64_t)__dst, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21F761EDC);
  if (!v70)
  {
LABEL_20:
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    uint64_t v62 = 0;
    uint64_t v64 = 0;
    char v66 = 2;
    goto LABEL_21;
  }
  uint64_t v45 = v101;
  uint64_t v39 = v117;
  uint64_t v38 = v122;
  uint64_t v41 = v109;
  char v40 = v112;
  char v44 = v103;
  uint64_t v42 = v106;
  double v51 = v99;
  char v52 = v97;
LABEL_6:
  v125 = a2;
  char v53 = v47 & 1;
  uint64_t v54 = v45;
  double v55 = v51;
  uint64_t v56 = v43;
  char v57 = v52;
  sub_21F761E74(v38, v39, v40, v56, v41, v42, v44);
  sub_21F7652C0(v54, v46, v53);
  swift_bridgeObjectRetain();
  sub_21F770E44(v48, v49, v50);
  sub_21F7DF3B8(v48, v49, v50, v55, v57, 3, (uint64_t)&v134);
  uint64_t v58 = v134;
  uint64_t v59 = v135;
  uint64_t v60 = v136;
  uint64_t v120 = v137;
  char v115 = v138;
  sub_21F7656A8(v54, v46, v53);
  swift_bridgeObjectRelease();
  sub_21F770E38(v48, v49, v50);
  uint64_t v61 = v46;
  uint64_t v62 = v60;
  sub_21F7656A8(v54, v61, v53);
  swift_bridgeObjectRelease();
  uint64_t v63 = v48;
  uint64_t v64 = v120;
  uint64_t v65 = v49;
  char v66 = v115;
  sub_21F770E38(v63, v65, v50);
  a2 = v125;
LABEL_21:
  uint64_t v75 = (char *)a2 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  uint64_t v76 = &v75[*(int *)(type metadata accessor for ChartContentRenderContext.Environment(0) + 92)];
  uint64_t v77 = *((void *)v76 + 2);
  long long v142 = *(_OWORD *)v76;
  uint64_t v143 = v77;
  uint64_t v144 = v58;
  uint64_t v145 = v59;
  uint64_t v146 = v62;
  uint64_t v147 = v64;
  char v148 = v66;
  long long v149 = a2[23];
  uint64_t v74 = OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale;
LABEL_22:
  uint64_t v78 = (char *)a2 + v74;
  int v79 = v78[104];
  if (v79 == 255)
  {
    swift_release();
    sub_21F7BB330((uint64_t)v131);
    sub_21F76C9DC((uint64_t)v131, v128, &qword_26AD46A38);
    uint64_t v6 = v130;
  }
  else
  {
    uint64_t v80 = *((void *)v78 + 11);
    uint64_t v81 = *((void *)v78 + 12);
    uint64_t v83 = *((void *)v78 + 9);
    uint64_t v82 = *((void *)v78 + 10);
    uint64_t v84 = *((void *)v78 + 7);
    uint64_t v85 = *((void *)v78 + 8);
    uint64_t v87 = *((void *)v78 + 5);
    uint64_t v86 = *((void *)v78 + 6);
    uint64_t v89 = *((void *)v78 + 3);
    uint64_t v88 = *((void *)v78 + 4);
    uint64_t v91 = *((void *)v78 + 1);
    uint64_t v90 = *((void *)v78 + 2);
    uint64_t v92 = *(void *)v78;
    v131[0] = v92;
    v131[1] = v91;
    v131[2] = v90;
    v131[3] = v89;
    v131[4] = v88;
    v131[5] = v87;
    uint64_t v104 = v88;
    uint64_t v107 = v87;
    v131[6] = v86;
    v131[7] = v84;
    uint64_t v110 = v86;
    uint64_t v113 = v84;
    v131[8] = v85;
    v131[9] = v83;
    uint64_t v118 = v83;
    uint64_t v123 = v82;
    v131[10] = v82;
    v131[11] = v80;
    uint64_t v126 = v80;
    v131[12] = v81;
    char v132 = v79 & 1;
    sub_21F764268(v92, v91, v90, v89, v88, v87, v86, v84, v85);
    uint64_t v6 = v130;
    sub_21F7CCC84((uint64_t)v131, v129, v127, v130, v128);
    nullsub_1(v128, v93);
    sub_21F76EE70(v92, v91, v90, v89, v104, v107, v110, v113, v85, v118, v123, v126, v81, v79);
    swift_release();
  }
LABEL_25:
  long long v94 = *((_OWORD *)v6 + 1);
  __dst[0] = *(_OWORD *)v6;
  __dst[1] = v94;
  sub_21F7E0D5C((uint64_t)__dst, (uint64_t)v141);
  sub_21F7E0DB8((uint64_t)v141);
  uint64_t v140 = *((void *)&__dst[1] + 1);
  sub_21F7741D0((uint64_t)&v140);
  sub_21F770EE8((uint64_t)(v6 + 4), (uint64_t)v139);
  return sub_21F7E0E20((uint64_t)v139);
}

uint64_t sub_21F7CC8BC@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if (a2 == 5)
  {
    uint64_t v6 = v3 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolScale;
    swift_beginAccess();
    if (*(unsigned __int8 *)(v6 + 128) == 255)
    {
      uint64_t v15 = 0;
      long long v13 = 0u;
      long long v14 = 0u;
    }
    else
    {
      sub_21F76C978(v6, (uint64_t)v12, &qword_267EE74F0);
      double v7 = *(double *)(a1 + 32);
      double v8 = *(double *)(a1 + 40);
      int v9 = *(char *)(a1 + 48);
      if (v9 < 0)
      {
        LOBYTE(v9) = v9 & 1;
        double v7 = (v7 + v8) * 0.5;
        double v8 = 0.0;
      }
      else
      {
        sub_21F7607AC(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 48));
      }
      sub_21F888C0C(*(uint64_t *)&v7, *(uint64_t *)&v8, v9, (uint64_t)&v13);
      sub_21F7654F0(*(uint64_t *)&v7, *(uint64_t *)&v8, v9);
      uint64_t result = sub_21F76CA84((uint64_t)v12, &qword_267EE74F0);
      if (*((void *)&v14 + 1))
      {
        long long v11 = v14;
        *(_OWORD *)a3 = v13;
        *(_OWORD *)(a3 + 16) = v11;
        *(void *)(a3 + 32) = v15;
        return result;
      }
    }
    if (qword_26AD45430 != -1) {
      swift_once();
    }
    sub_21F7C21A4((uint64_t)&qword_26AD521C0, a3);
    return sub_21F76CA84((uint64_t)&v13, &qword_26AD43F70);
  }
  else
  {
    if (qword_26AD45430 != -1) {
      swift_once();
    }
    return sub_21F7C21A4((uint64_t)&qword_26AD521C0, a3);
  }
}

double sub_21F7CCAB8@<D0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, double *a4@<X8>)
{
  sub_21F76F0A8((long long *)(a1 + 24), (uint64_t)v34);
  double v8 = *(double *)(a1 + 64);
  *(double *)&uint64_t v9 = COERCE_DOUBLE(sub_21F76F910(*(void *)(a2 + 32), *(void *)(a2 + 40), *(unsigned char *)(a2 + 48), v8));
  if (v11)
  {
    double v13 = NAN;
    double v12 = NAN;
  }
  else
  {
    double v12 = *(double *)&v9;
    double v13 = v10;
    sub_21F76F0A8(v34, (uint64_t)&v40);
    if (v44)
    {
      if (v44 == 1)
      {
        double v14 = (v13 - v12) * v42 + v12;
        double v12 = v41 + (v13 - v12) * v40 + v12;
        double v13 = v43 + v14;
      }
    }
    else
    {
      double v15 = (v13 - v12) * v40;
      double v13 = (v13 - v12) * v41 + v12;
      double v12 = v15 + v12;
    }
  }
  *(double *)&uint64_t v16 = COERCE_DOUBLE(sub_21F76F910(*(void *)(a3 + 32), *(void *)(a3 + 40), *(unsigned char *)(a3 + 48), v8));
  if (v18)
  {
    double v20 = NAN;
    double v19 = NAN;
  }
  else
  {
    double v19 = *(double *)&v16;
    double v20 = v17;
    sub_21F76F0A8(v34, (uint64_t)&v35);
    if (v39)
    {
      if (v39 == 1)
      {
        double v21 = (v20 - v19) * v37 + v19;
        double v19 = v36 + (v20 - v19) * v35 + v19;
        double v20 = v38 + v21;
      }
    }
    else
    {
      double v22 = (v20 - v19) * v35;
      double v20 = (v20 - v19) * v36 + v19;
      double v19 = v22 + v19;
    }
  }
  double v23 = v13 + v12;
  double v24 = v20 + v19;
  if (v20 >= v19) {
    double v25 = v19;
  }
  else {
    double v25 = v20;
  }
  if (v12 > v13) {
    double v26 = v12;
  }
  else {
    double v26 = v13;
  }
  if (v13 >= v12) {
    double v27 = v12;
  }
  else {
    double v27 = v13;
  }
  if (v19 > v20) {
    double v28 = v19;
  }
  else {
    double v28 = v20;
  }
  BOOL v29 = v23 < v24;
  if (v23 < v24) {
    double v30 = v27;
  }
  else {
    double v30 = v25;
  }
  if (v29) {
    double v31 = v28;
  }
  else {
    double v31 = v26;
  }
  double result = v30 + *(double *)(a1 + 8);
  double v33 = v31 + *(double *)(a1 + 16);
  *a4 = result;
  a4[1] = v33;
  a4[2] = result;
  a4[3] = v33;
  a4[4] = result;
  a4[5] = v33;
  return result;
}

uint64_t sub_21F7CCC84@<X0>(uint64_t a1@<X0>, char *a2@<X2>, int a3@<W3>, uint64_t *a4@<X4>, uint64_t a5@<X8>)
{
  void (*v115)(long long *__return_ptr, void *);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  long long v135;
  char v136;
  uint64_t v137;
  void (*v138)(char *, uint64_t);
  uint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t (*v142)(long long *);
  long long v143;
  void (*v144)(long long *__return_ptr, void *);
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  char v151;
  int v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  char v160;
  char v161;
  long long v162;
  uint64_t v163;
  long long v164;
  long long v165;
  long long v166;
  long long v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  long long v190;
  char *v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  void (*v195)(char *, char *, uint64_t);
  char *v196;
  long long v197;
  uint64_t v198;
  long long v199;
  long long v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _OWORD *v205;
  long long v206;
  int v207;
  unsigned char v208[7];
  unsigned char v209[7];
  char v210;
  _DWORD v211[2];
  _DWORD v212[2];
  char v213;
  _DWORD v214[2];
  void v215[3];
  char v216;
  uint64_t v217;
  char *v218;
  void (*v219)(char *, char *, uint64_t);
  char v220;
  long long v221;
  char v222;
  long long v223;
  long long v224;
  long long v225;
  long long v226;
  long long v227;
  long long v228;
  _OWORD v229[2];
  _OWORD v230[2];
  uint64_t v231;
  void v232[2];
  unsigned __int8 v233;
  long long v234;
  uint64_t v235;
  unsigned __int8 v236;
  long long v237;
  long long v238;
  _OWORD v239[4];
  void v240[14];
  void v241[13];
  char v242;
  unsigned char v243[24];
  unsigned char v244[16];
  char v245;
  unsigned char v246[24];
  void v247[2];
  char v248;

  v207 = a3;
  v193 = a2;
  sub_21F76C9DC(a1, (uint64_t)v240, &qword_26AD47AB8);
  v178 = v240[1];
  v179 = v240[4];
  v180 = v240[5];
  v181 = v240[6];
  v182 = v240[7];
  v183 = v240[8];
  uint64_t v8 = *a4;
  v198 = a4[1];
  *(void *)&v199 = v8;
  LODWORD(v197) = *((unsigned __int8 *)a4 + 16);
  v201 = a4[3];
  uint64_t v9 = (char *)a4[4];
  v195 = (void (*)(char *, char *, uint64_t))a4[5];
  v196 = v9;
  LODWORD(v194) = *((unsigned __int8 *)a4 + 48);
  v200 = *(_OWORD *)(a4 + 7);
  v192 = sub_21F76CA40(&qword_26AD46A40);
  MEMORY[0x270FA5388](v192);
  v177 = (char *)&v168 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = sub_21F76CA40(&qword_26AD47AA8);
  MEMORY[0x270FA5388](v176);
  v203 = (uint64_t)&v168 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DateBins(0);
  MEMORY[0x270FA5388](v12 - 8);
  v202 = (uint64_t)&v168 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_21F76CA40(&qword_26AD46A20);
  MEMORY[0x270FA5388](v14 - 8);
  v185 = (uint64_t)&v168 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_21FA24320();
  MEMORY[0x270FA5388](v16 - 8);
  v174 = (char *)&v168 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_21F76CA40(&qword_26AD4A490);
  MEMORY[0x270FA5388](v18);
  v173 = (char *)&v168 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  v184 = (char *)&v168 - v21;
  v170 = sub_21F76CA40((uint64_t *)&unk_26AD4A5E0);
  MEMORY[0x270FA5388](v170);
  v171 = (char *)&v168 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  v172 = (uint64_t)&v168 - v24;
  v204 = sub_21FA241F0();
  *(void *)&v206 = *(void *)(v204 - 8);
  MEMORY[0x270FA5388](v204);
  v191 = (char *)&v168 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  v175 = (char *)&v168 - v27;
  MEMORY[0x270FA5388](v28);
  v186 = (char *)&v168 - v29;
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = (char *)&v168 - v31;
  MEMORY[0x270FA5388](v33);
  v187 = (char *)&v168 - v34;
  uint64_t v35 = type metadata accessor for ChartContentRenderContext.Bins(0);
  v188 = *(void *)(v35 - 8);
  v189 = v35;
  MEMORY[0x270FA5388](v35);
  *(void *)&v190 = (char *)&v168 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v37);
  v169 = (uint64_t)&v168 - v38;
  MEMORY[0x270FA5388](v39);
  double v41 = (char *)&v168 - v40;
  MEMORY[0x270FA5388](v42);
  v205 = (_OWORD *)((char *)&v168 - v43);
  sub_21F76C9DC(a1, (uint64_t)v241, &qword_26AD47AB8);
  if (v242)
  {
    char v44 = v207;
    uint64_t v45 = a4[4];
    uint64_t v46 = a4[5];
    char v47 = *((unsigned char *)a4 + 48);
    uint64_t v48 = sub_21F76F910(v45, v46, v47, 0.0);
    if ((v50 & 1) == 0)
    {
      uint64_t v51 = v48;
      uint64_t v52 = v49;
      long long v53 = *((_OWORD *)a4 + 1);
      v238 = *(_OWORD *)a4;
      v239[0] = v53;
      sub_21F7E0D5C((uint64_t)&v238, (uint64_t)v232);
      v247[0] = *((void *)&v239[0] + 1);
      LOBYTE(v215[0]) = v44;
      v215[1] = v199;
      v215[2] = v198;
      v216 = v197 & 1;
      v217 = v201;
      v218 = v196;
      v219 = v195;
      v220 = v194;
      v221 = v200;
      v222 = 3;
      sub_21F7BB878((uint64_t)v215);
      *(void *)&v223 = v51;
      *((void *)&v223 + 1) = v52;
      sub_21F7BB81C((uint64_t)v215, (uint64_t)&v224);
      long long v54 = v230[1];
      *(_OWORD *)(a5 + 128) = v230[0];
      *(_OWORD *)(a5 + 144) = v54;
      *(void *)(a5 + 160) = v231;
      long long v55 = v228;
      *(_OWORD *)(a5 + 64) = v227;
      *(_OWORD *)(a5 + 80) = v55;
      long long v56 = v229[1];
      *(_OWORD *)(a5 + 96) = v229[0];
      *(_OWORD *)(a5 + 112) = v56;
      long long v57 = v224;
      *(_OWORD *)a5 = v223;
      *(_OWORD *)(a5 + 16) = v57;
      long long v58 = v226;
      *(_OWORD *)(a5 + 32) = v225;
      *(_OWORD *)(a5 + 48) = v58;
      sub_21F7E0DEC((uint64_t)v232);
      sub_21F7744A4((uint64_t)v247);
      return sub_21F770E44(v45, v46, v47);
    }
    while (1)
    {
LABEL_62:
      sub_21FA266E0();
      __break(1u);
    }
  }
  v201 = a1;
  *(void *)&v200 = a5;
  v198 = v241[1];
  *(void *)&v199 = v241[0];
  uint64_t v60 = v241[6];
  uint64_t v61 = &v193[OBJC_IVAR____TtC6Charts25ChartContentRenderContext_accessibilityElementBins];
  swift_beginAccess();
  uint64_t v62 = *(void *)v61;
  if (*(void *)(*(void *)v61 + 16))
  {
    unint64_t v63 = sub_21F75BD50(v207);
    if (v64)
    {
      sub_21F7E1488(*(void *)(v62 + 56) + *(void *)(v188 + 72) * v63, (uint64_t)v41, type metadata accessor for ChartContentRenderContext.Bins);
      uint64_t v65 = v205;
      sub_21F7E14F0((uint64_t)v41, (uint64_t)v205, type metadata accessor for ChartContentRenderContext.Bins);
      swift_endAccess();
      swift_retain();
      sub_21F7642D0(v179);
      swift_bridgeObjectRetain();
      sub_21F7637E4(v182, v183);
      char v66 = (long long *)v190;
      goto LABEL_32;
    }
  }
  *(void *)&v197 = v61;
  swift_endAccess();
  sub_21F770EE8((uint64_t)(a4 + 4), (uint64_t)v243);
  sub_21F770EE8((uint64_t)v243, (uint64_t)v244);
  if ((v245 & 0x80000000) == 0)
  {
    sub_21F7E1600((uint64_t)v244, (uint64_t)v246);
    sub_21F7E1600((uint64_t)v246, (uint64_t)v247);
    uint64_t v67 = v204;
    uint64_t v68 = v206;
    if (!v248)
    {
      sub_21F76D4E8(v201, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F764268);
      sub_21F7E0E20((uint64_t)v243);
      goto LABEL_11;
    }
    if (v248 != 1) {
      goto LABEL_62;
    }
    uint64_t v70 = v32;
    sub_21F76D4E8(v201, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F764268);
    sub_21F7E0E20((uint64_t)v243);
    uint64_t v71 = v187;
LABEL_22:
    v168 = v18;
    if (*(void *)(v60 + 16))
    {
      sub_21FA23FD0();
      sub_21FA23FD0();
      sub_21F7E1444((unint64_t *)&qword_26AD46C28);
      uint64_t v83 = v67;
      char v84 = sub_21FA25C50();
      uint64_t v85 = *(void (**)(char *, char *, uint64_t))(v68 + 16);
      if (v84) {
        uint64_t v86 = v70;
      }
      else {
        uint64_t v86 = v71;
      }
      v85(v186, v86, v67);
      char v87 = sub_21FA25C60();
      v195 = v85;
      v196 = v70;
      if (v87) {
        uint64_t v88 = v70;
      }
      else {
        uint64_t v88 = v71;
      }
      uint64_t v89 = v175;
      v194 = v68 + 16;
      v85(v175, v88, v67);
      if (sub_21FA25C70())
      {
        uint64_t v90 = v168;
        uint64_t v91 = v184;
        uint64_t v92 = &v184[*(int *)(v168 + 48)];
        uint64_t v93 = *(void (**)(char *, char *, uint64_t))(v68 + 32);
        v93(v184, v186, v67);
        v193 = v92;
        v93(v92, v89, v67);
        long long v94 = v173;
        v186 = &v173[*(int *)(v90 + 48)];
        v95 = v186;
        char v96 = v195;
        v195(v173, v91, v83);
        v96(v95, v92, v83);
        uint64_t v97 = (uint64_t)v171;
        v93(v171, v94, v83);
        v195 = *(void (**)(char *, char *, uint64_t))(v206 + 8);
        ((void (*)(char *, uint64_t))v195)(v186, v83);
        double v98 = &v94[*(int *)(v168 + 48)];
        v93(v94, v184, v83);
        v93(v98, v193, v83);
        v93((char *)(v97 + *(int *)(v170 + 36)), v98, v83);
        double v99 = (void (*)(char *, uint64_t))v195;
        ((void (*)(char *, uint64_t))v195)(v94, v83);
        uint64_t v100 = v172;
        sub_21F76C9DC(v97, v172, (uint64_t *)&unk_26AD4A5E0);
        uint64_t v101 = (uint64_t)v174;
        sub_21FA242B0();
        uint64_t v102 = v169;
        DateBins.init(range:desiredCount:calendar:)(v100, 10, v101, v169);
        v99(v196, v83);
        v99(v187, v83);
        uint64_t v82 = v189;
        swift_storeEnumTagMultiPayload();
        uint64_t v65 = v205;
        sub_21F7E14F0(v102, (uint64_t)v205, type metadata accessor for ChartContentRenderContext.Bins);
        goto LABEL_31;
      }
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    goto LABEL_57;
  }
  v245 &= ~0x80u;
  sub_21F770E78((uint64_t)v244, (uint64_t)v246);
  sub_21F770E78((uint64_t)v246, (uint64_t)v247);
  char v69 = v248;
  swift_retain();
  sub_21F7642D0(v179);
  swift_bridgeObjectRetain();
  sub_21F7637E4(v182, v183);
  uint64_t v67 = v204;
  uint64_t v68 = v206;
  uint64_t v70 = v32;
  uint64_t v71 = v187;
  if (v69) {
    goto LABEL_22;
  }
LABEL_11:
  uint64_t v72 = *(void *)(v60 + 16);
  if (!v72)
  {
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  double v73 = *(double *)(v60 + 32);
  uint64_t v74 = v60 + 32 + 8 * v72;
  double v75 = *(double *)(v74 - 8);
  if (v75 >= v73) {
    double v76 = *(double *)(v60 + 32);
  }
  else {
    double v76 = *(double *)(v74 - 8);
  }
  if (v73 > v75) {
    double v77 = *(double *)(v60 + 32);
  }
  else {
    double v77 = *(double *)(v74 - 8);
  }
  if (v76 > v77) {
    goto LABEL_58;
  }
  double v78 = sub_21F973520(11, 1, 1, v76, v77, 0.0);
  sub_21F8A8A98((uint64_t)&v223, v78, v76, v77);
  uint64_t v79 = v226;
  char v80 = BYTE8(v226);
  long long v81 = v224;
  uint64_t v65 = v205;
  *v205 = v223;
  v65[1] = v81;
  v65[2] = v225;
  *((void *)v65 + 6) = v79;
  *((unsigned char *)v65 + 56) = v80;
  uint64_t v82 = v189;
  swift_storeEnumTagMultiPayload();
LABEL_31:
  char v103 = v207;
  uint64_t v104 = v185;
  char v66 = (long long *)v190;
  sub_21F7E1488((uint64_t)v65, v185, type metadata accessor for ChartContentRenderContext.Bins);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v188 + 56))(v104, 0, 1, v82);
  swift_beginAccess();
  sub_21F9E1790(v104, v103);
  swift_endAccess();
LABEL_32:
  sub_21F7E1488((uint64_t)v65, (uint64_t)v66, type metadata accessor for ChartContentRenderContext.Bins);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    long long v106 = v66[1];
    v238 = *v66;
    v239[0] = v106;
    v239[1] = v66[2];
    *(_OWORD *)((char *)&v239[1] + 9) = *(long long *)((char *)v66 + 41);
    uint64_t v107 = a4[4];
    uint64_t v108 = a4[5];
    if ((a4[6] & 0x80) != 0)
    {
      if (a4[6]) {
        goto LABEL_62;
      }
      double v109 = (*(double *)&v107 + *(double *)&v108) * 0.5;
    }
    else
    {
      if (*((unsigned char *)a4 + 48)) {
        goto LABEL_62;
      }
      double v109 = *((double *)a4 + 4);
      sub_21F7607AC(v107, v108, 0);
    }
    *(double *)&v223 = v109;
    if (!BYTE8(v239[2]))
    {
      long long v142 = (uint64_t (*)(long long *))*((void *)&v239[1] + 1);
      sub_21F7E15BC((uint64_t)&v238, (void (*)(void, void, void, void, void, void, void, void))sub_21F7CE510);
      v141 = v142(&v223);
      swift_release();
      swift_release();
      goto LABEL_48;
    }
    if (BYTE8(v239[2]) == 1)
    {
      v139 = sub_21F90FEDC(*(void *)(v238 + 16), v238, v109);
      if ((v140 & 1) == 0)
      {
        v141 = v139;
LABEL_48:
        sub_21F7E15BC((uint64_t)&v238, (void (*)(void, void, void, void, void, void, void, void))sub_21F7CE510);
        sub_21F8A4F20(v141, (uint64_t)&v223);
        *(void *)&v206 = sub_21F7CE70C;
        sub_21F7E15BC((uint64_t)&v238, (void (*)(void, void, void, void, void, void, void, void))sub_21F7CE70C);
        uint64_t v143 = v223;
        v215[0] = v223;
        uint64_t v144 = (void (*)(long long *__return_ptr, void *))v199;
        ((void (*)(long long *__return_ptr, void *))v199)(&v223, v215);
        uint64_t v116 = v223;
        v215[0] = *((void *)&v143 + 1);
        v144(&v223, v215);
        uint64_t v118 = v223;
        sub_21FA24C40();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v145 = sub_21FA25340();
        v202 = v146;
        v203 = v145;
        uint64_t v147 = v146;
        long long v149 = v148;
        LOBYTE(v223) = v150 & 1;
        LOBYTE(v215[0]) = 0;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v151 = v223;
        v152 = LOBYTE(v215[0]);
        sub_21F7652C0(v145, v147, v223);
        swift_bridgeObjectRetain();
        if (v152) {
          v153 = -128;
        }
        else {
          v153 = 0;
        }
        LODWORD(v204) = v153;
        sub_21F7656A8(v145, v147, v151);
        swift_bridgeObjectRelease();
        sub_21FA24C40();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v154 = sub_21FA25340();
        v156 = v155;
        v158 = v157;
        LOBYTE(v232[0]) = v159 & 1;
        LOBYTE(v214[0]) = 0;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v160 = v232[0];
        if (LOBYTE(v214[0])) {
          v161 = 0x80;
        }
        else {
          v161 = 0;
        }
        sub_21F7652C0(v154, v156, v232[0]);
        swift_bridgeObjectRetain();
        sub_21F7656A8(v154, v156, v160);
        swift_bridgeObjectRelease();
        sub_21F7E15BC((uint64_t)&v238, (void (*)(void, void, void, void, void, void, void, void))v206);
        sub_21F76D4E8(v201, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76D570);
        sub_21F771B48((uint64_t)v205, type metadata accessor for ChartContentRenderContext.Bins);
        LOBYTE(v212[0]) = v151;
        LOBYTE(v211[0]) = v160;
        LOBYTE(v223) = v207;
        *((void *)&v223 + 1) = v203;
        *(void *)&v224 = v202;
        BYTE8(v224) = v151;
        *(void *)&v225 = v149;
        *((void *)&v225 + 1) = v143;
        *(void *)&v226 = 0;
        BYTE8(v226) = v204;
        *(void *)&v227 = MEMORY[0x263F8D538];
        *((void *)&v227 + 1) = &protocol witness table for Double;
        *(void *)&v228 = v154;
        *((void *)&v228 + 1) = v156;
        LOBYTE(v229[0]) = v160;
        *((void *)&v229[0] + 1) = v158;
        v229[1] = *((unint64_t *)&v143 + 1);
        LOBYTE(v230[0]) = v161;
        *((void *)&v230[0] + 1) = MEMORY[0x263F8D538];
        *(void *)&v230[1] = &protocol witness table for Double;
        goto LABEL_55;
      }
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  sub_21F7E14F0((uint64_t)v66, v202, type metadata accessor for DateBins);
  int v105 = *((unsigned __int8 *)a4 + 48);
  if ((v105 & 0x80) != 0)
  {
    if ((v105 & 1) == 0) {
      goto LABEL_62;
    }
  }
  else
  {
    if (v105 != 1) {
      goto LABEL_62;
    }
    sub_21F7607AC(a4[4], a4[5], 1);
  }
  uint64_t v110 = (uint64_t)v191;
  sub_21FA23FD0();
  unint64_t v111 = DateBins.index(for:)(v110);
  uint64_t v112 = v203;
  DateBins.subscript.getter(v111, v203);
  uint64_t v113 = v112;
  sub_21FA23FE0();
  v215[0] = v114;
  char v115 = (void (*)(long long *__return_ptr, void *))v199;
  ((void (*)(long long *__return_ptr, void *))v199)(&v223, v215);
  uint64_t v116 = v223;
  *(void *)&v197 = v113 + *(int *)(v176 + 36);
  sub_21FA23FE0();
  v215[0] = v117;
  v115(&v223, v215);
  uint64_t v118 = v223;
  sub_21FA24C40();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v119 = sub_21FA25340();
  uint64_t v121 = v120;
  uint64_t v123 = v122;
  v125 = v124;
  uint64_t v126 = (uint64_t)v177;
  int v127 = &v177[*(int *)(v192 + 36)];
  v188 = *(void *)(v206 + 16);
  v189 = v206 + 16;
  ((void (*)(char *, uint64_t, uint64_t))v188)(v127, v203, v204);
  *(void *)uint64_t v126 = v119;
  *(void *)(v126 + 8) = v121;
  *(unsigned char *)(v126 + 16) = v123 & 1;
  *(void *)(v126 + 24) = v125;
  v187 = (char *)sub_21F76CA40(&qword_26AD45B68);
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21F9CB7B4(v126, (uint64_t)v232);
  v194 = v232[1];
  v195 = (void (*)(char *, char *, uint64_t))v232[0];
  LODWORD(v193) = v233;
  v199 = v234;
  v198 = v235;
  LODWORD(v196) = v236;
  sub_21FA24C40();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v190 = v237;
  uint64_t v128 = sub_21FA25340();
  v130 = v129;
  LOBYTE(v125) = v131;
  v133 = v132;
  uint64_t v134 = v204;
  ((void (*)(uint64_t, void, uint64_t))v188)(v126 + *(int *)(v192 + 36), v197, v204);
  *(void *)uint64_t v126 = v128;
  *(void *)(v126 + 8) = v130;
  *(unsigned char *)(v126 + 16) = v125 & 1;
  *(void *)(v126 + 24) = v133;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21F9CB7B4(v126, (uint64_t)&v238);
  uint64_t v135 = v238;
  uint64_t v136 = v239[0];
  v197 = *(_OWORD *)((char *)v239 + 8);
  uint64_t v137 = *((void *)&v239[1] + 1);
  LOBYTE(v126) = v239[2];
  sub_21F76D4E8(v201, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76D570);
  sub_21F76CA84(v203, &qword_26AD47AA8);
  char v138 = *(void (**)(char *, uint64_t))(v206 + 8);
  v206 = *(_OWORD *)((char *)&v239[2] + 8);
  v138(v191, v134);
  sub_21F771B48(v202, type metadata accessor for DateBins);
  sub_21F771B48((uint64_t)v205, type metadata accessor for ChartContentRenderContext.Bins);
  v213 = (char)v193;
  v210 = v136;
  LOBYTE(v223) = v207;
  *(_DWORD *)((char *)&v223 + 1) = v214[0];
  DWORD1(v223) = *(_DWORD *)((char *)v214 + 3);
  *((void *)&v223 + 1) = v195;
  *(void *)&v224 = v194;
  BYTE8(v224) = (_BYTE)v193;
  *(_DWORD *)((char *)&v224 + 9) = v212[0];
  HIDWORD(v224) = *(_DWORD *)((char *)v212 + 3);
  v225 = v199;
  *(void *)&v226 = v198;
  BYTE8(v226) = (_BYTE)v196;
  HIDWORD(v226) = *(_DWORD *)((char *)v211 + 3);
  *(_DWORD *)((char *)&v226 + 9) = v211[0];
  v227 = v190;
  v228 = v135;
  LOBYTE(v229[0]) = v136;
  *(_DWORD *)((char *)v229 + 1) = *(_DWORD *)v209;
  DWORD1(v229[0]) = *(_DWORD *)&v209[3];
  *(_OWORD *)((char *)v229 + 8) = v197;
  *((void *)&v229[1] + 1) = v137;
  LOBYTE(v230[0]) = v126;
  DWORD1(v230[0]) = *(_DWORD *)&v208[3];
  *(_DWORD *)((char *)v230 + 1) = *(_DWORD *)v208;
  *(_OWORD *)((char *)v230 + 8) = v206;
LABEL_55:
  sub_21F7E1558((uint64_t)&v223);
  sub_21F7BB81C((uint64_t)&v223, (uint64_t)v215);
  *(void *)&v223 = v116;
  *((void *)&v223 + 1) = v118;
  uint64_t result = sub_21F7BB81C((uint64_t)v215, (uint64_t)&v224);
  v162 = v230[1];
  v163 = v200;
  *(_OWORD *)(v200 + 128) = v230[0];
  *(_OWORD *)(v163 + 144) = v162;
  *(void *)(v163 + 160) = v231;
  v164 = v228;
  *(_OWORD *)(v163 + 64) = v227;
  *(_OWORD *)(v163 + 80) = v164;
  v165 = v229[1];
  *(_OWORD *)(v163 + 96) = v229[0];
  *(_OWORD *)(v163 + 112) = v165;
  v166 = v224;
  *(_OWORD *)v163 = v223;
  *(_OWORD *)(v163 + 16) = v166;
  v167 = v226;
  *(_OWORD *)(v163 + 32) = v225;
  *(_OWORD *)(v163 + 48) = v167;
  return result;
}

uint64_t sub_21F7CE258()
{
  return type metadata accessor for ChartContentRenderContext(0);
}

uint64_t *sub_21F7CE260(uint64_t *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for DateBins.Storage(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        *a1 = *(void *)a2;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
      }
      else if (EnumCaseMultiPayload == 1)
      {
        uint64_t v8 = sub_21FA24310();
        (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        uint64_t v9 = (int *)type metadata accessor for CalendarBinningUnit(0);
        *(uint64_t *)((char *)a1 + v9[5]) = *(void *)&a2[v9[5]];
        uint64_t v10 = v9[6];
        uint64_t v11 = (char *)a1 + v10;
        uint64_t v12 = &a2[v10];
        uint64_t v13 = sub_21FA241F0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
        uint64_t v14 = v9[7];
        uint64_t v15 = (char *)a1 + v14;
        uint64_t v16 = &a2[v14];
        uint64_t v17 = sub_21FA24320();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
        *(uint64_t *)((char *)a1 + v9[8]) = *(void *)&a2[v9[8]];
        swift_retain();
        uint64_t v18 = sub_21F76CA40(&qword_26AD45E08);
        *(uint64_t *)((char *)a1 + *(int *)(v18 + 48)) = *(void *)&a2[*(int *)(v18 + 48)];
        *(uint64_t *)((char *)a1 + *(int *)(v18 + 64)) = *(void *)&a2[*(int *)(v18 + 64)];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
    }
    else
    {
      uint64_t v20 = *(void *)a2;
      uint64_t v21 = *((void *)a2 + 1);
      uint64_t v22 = *((void *)a2 + 2);
      uint64_t v23 = *((void *)a2 + 3);
      uint64_t v24 = *((void *)a2 + 4);
      uint64_t v25 = *((void *)a2 + 5);
      uint64_t v26 = *((void *)a2 + 6);
      char v27 = a2[56];
      sub_21F7CE510(v20, v21, v22, v23, v24, v25, v26, v27);
      *a1 = v20;
      a1[1] = v21;
      a1[2] = v22;
      a1[3] = v23;
      a1[4] = v24;
      a1[5] = v25;
      a1[6] = v26;
      *((unsigned char *)a1 + 56) = v27;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_21F7CE510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a8 == 1)
  {
    return swift_bridgeObjectRetain();
  }
  else if (!a8)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_21F7CE570(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for DateBins.Storage(0);
    uint64_t result = swift_getEnumCaseMultiPayload();
    if (result == 2)
    {
      return swift_bridgeObjectRelease();
    }
    else if (result == 1)
    {
      uint64_t v3 = sub_21FA24310();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
      uint64_t v4 = type metadata accessor for CalendarBinningUnit(0);
      uint64_t v5 = a1 + *(int *)(v4 + 24);
      uint64_t v6 = sub_21FA241F0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
      uint64_t v7 = a1 + *(int *)(v4 + 28);
      uint64_t v8 = sub_21FA24320();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
      return swift_release();
    }
  }
  else
  {
    uint64_t v9 = *(void *)a1;
    uint64_t v10 = *(void *)(a1 + 8);
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v12 = *(void *)(a1 + 24);
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(a1 + 40);
    uint64_t v15 = *(void *)(a1 + 48);
    char v16 = *(unsigned char *)(a1 + 56);
    return sub_21F7CE70C(v9, v10, v11, v12, v13, v14, v15, v16);
  }
  return result;
}

uint64_t sub_21F7CE70C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a8 == 1)
  {
    return swift_bridgeObjectRelease();
  }
  else if (!a8)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t *sub_21F7CE76C(uint64_t *a1, char *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for DateBins.Storage(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *(void *)a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v6 = sub_21FA24310();
      (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = (int *)type metadata accessor for CalendarBinningUnit(0);
      *(uint64_t *)((char *)a1 + v7[5]) = *(void *)&a2[v7[5]];
      uint64_t v8 = v7[6];
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = &a2[v8];
      uint64_t v11 = sub_21FA241F0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      uint64_t v12 = v7[7];
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = &a2[v12];
      uint64_t v15 = sub_21FA24320();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
      *(uint64_t *)((char *)a1 + v7[8]) = *(void *)&a2[v7[8]];
      swift_retain();
      uint64_t v16 = sub_21F76CA40(&qword_26AD45E08);
      *(uint64_t *)((char *)a1 + *(int *)(v16 + 48)) = *(void *)&a2[*(int *)(v16 + 48)];
      *(uint64_t *)((char *)a1 + *(int *)(v16 + 64)) = *(void *)&a2[*(int *)(v16 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
    }
  }
  else
  {
    uint64_t v17 = *(void *)a2;
    uint64_t v18 = *((void *)a2 + 1);
    uint64_t v19 = *((void *)a2 + 2);
    uint64_t v20 = *((void *)a2 + 3);
    uint64_t v21 = *((void *)a2 + 4);
    uint64_t v22 = *((void *)a2 + 5);
    uint64_t v23 = *((void *)a2 + 6);
    char v24 = a2[56];
    sub_21F7CE510(v17, v18, v19, v20, v21, v22, v23, v24);
    *a1 = v17;
    a1[1] = v18;
    a1[2] = v19;
    a1[3] = v20;
    a1[4] = v21;
    a1[5] = v22;
    a1[6] = v23;
    *((unsigned char *)a1 + 56) = v24;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *sub_21F7CE9CC(uint64_t *a1, char *a2)
{
  if (a1 != (uint64_t *)a2)
  {
    sub_21F771B48((uint64_t)a1, type metadata accessor for ChartContentRenderContext.Bins);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for DateBins.Storage(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        *a1 = *(void *)a2;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
      }
      else if (EnumCaseMultiPayload == 1)
      {
        uint64_t v6 = sub_21FA24310();
        (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = (int *)type metadata accessor for CalendarBinningUnit(0);
        *(uint64_t *)((char *)a1 + v7[5]) = *(void *)&a2[v7[5]];
        uint64_t v8 = v7[6];
        uint64_t v9 = (char *)a1 + v8;
        uint64_t v10 = &a2[v8];
        uint64_t v11 = sub_21FA241F0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
        uint64_t v12 = v7[7];
        uint64_t v13 = (char *)a1 + v12;
        uint64_t v14 = &a2[v12];
        uint64_t v15 = sub_21FA24320();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
        *(uint64_t *)((char *)a1 + v7[8]) = *(void *)&a2[v7[8]];
        swift_retain();
        uint64_t v16 = sub_21F76CA40(&qword_26AD45E08);
        *(uint64_t *)((char *)a1 + *(int *)(v16 + 48)) = *(void *)&a2[*(int *)(v16 + 48)];
        *(uint64_t *)((char *)a1 + *(int *)(v16 + 64)) = *(void *)&a2[*(int *)(v16 + 64)];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
      }
    }
    else
    {
      uint64_t v17 = *(void *)a2;
      uint64_t v18 = *((void *)a2 + 1);
      uint64_t v19 = *((void *)a2 + 2);
      uint64_t v20 = *((void *)a2 + 3);
      uint64_t v21 = *((void *)a2 + 4);
      uint64_t v22 = *((void *)a2 + 5);
      uint64_t v23 = *((void *)a2 + 6);
      char v24 = a2[56];
      sub_21F7CE510(v17, v18, v19, v20, v21, v22, v23, v24);
      *a1 = v17;
      a1[1] = v18;
      a1[2] = v19;
      a1[3] = v20;
      a1[4] = v21;
      a1[5] = v22;
      a1[6] = v23;
      *((unsigned char *)a1 + 56) = v24;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *sub_21F7CEC50(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for DateBins.Storage(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_21FA24310();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      uint64_t v8 = (int *)type metadata accessor for CalendarBinningUnit(0);
      *(void *)&a1[v8[5]] = *(void *)&a2[v8[5]];
      uint64_t v9 = v8[6];
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      uint64_t v12 = sub_21FA241F0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
      uint64_t v13 = v8[7];
      uint64_t v14 = &a1[v13];
      uint64_t v15 = &a2[v13];
      uint64_t v16 = sub_21FA24320();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
      *(void *)&a1[v8[8]] = *(void *)&a2[v8[8]];
      uint64_t v17 = sub_21F76CA40(&qword_26AD45E08);
      *(void *)&a1[*(int *)(v17 + 48)] = *(void *)&a2[*(int *)(v17 + 48)];
      *(void *)&a1[*(int *)(v17 + 64)] = *(void *)&a2[*(int *)(v17 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_21F7CEE44(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_21F771B48((uint64_t)a1, type metadata accessor for ChartContentRenderContext.Bins);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for DateBins.Storage(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v7 = sub_21FA24310();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
        uint64_t v8 = (int *)type metadata accessor for CalendarBinningUnit(0);
        *(void *)&a1[v8[5]] = *(void *)&a2[v8[5]];
        uint64_t v9 = v8[6];
        uint64_t v10 = &a1[v9];
        uint64_t v11 = &a2[v9];
        uint64_t v12 = sub_21FA241F0();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
        uint64_t v13 = v8[7];
        uint64_t v14 = &a1[v13];
        uint64_t v15 = &a2[v13];
        uint64_t v16 = sub_21FA24320();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
        *(void *)&a1[v8[8]] = *(void *)&a2[v8[8]];
        uint64_t v17 = sub_21F76CA40(&qword_26AD45E08);
        *(void *)&a1[*(int *)(v17 + 48)] = *(void *)&a2[*(int *)(v17 + 48)];
        *(void *)&a1[*(int *)(v17 + 64)] = *(void *)&a2[*(int *)(v17 + 64)];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_21F7CF05C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_21F7CF084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_21F7CF0B0()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t getEnumTagSinglePayload for EncodableProperty(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for EncodableProperty(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x21F7CF21CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

uint64_t sub_21F7CF244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 32);
}

uint64_t type metadata accessor for SeriesResolutionContext()
{
  return sub_21F764F08();
}

uint64_t assignWithCopy for SubPositionContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24))
  {
    if (v4)
    {
      uint64_t v5 = *(void *)a2;
      uint64_t v6 = *(void *)(a2 + 8);
      char v7 = *(unsigned char *)(a2 + 16);
      sub_21F7652C0(*(void *)a2, v6, v7);
      uint64_t v8 = *(void *)a1;
      uint64_t v9 = *(void *)(a1 + 8);
      char v10 = *(unsigned char *)(a1 + 16);
      *(void *)a1 = v5;
      *(void *)(a1 + 8) = v6;
      *(unsigned char *)(a1 + 16) = v7;
      sub_21F7656A8(v8, v9, v10);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v11 = *(void *)(a2 + 32);
      uint64_t v12 = *(void *)(a2 + 40);
      char v13 = *(unsigned char *)(a2 + 48);
      sub_21F770E44(v11, v12, v13);
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = *(void *)(a1 + 40);
      *(void *)(a1 + 32) = v11;
      *(void *)(a1 + 40) = v12;
      char v16 = *(unsigned char *)(a1 + 48);
      *(unsigned char *)(a1 + 48) = v13;
      sub_21F770E38(v14, v15, v16);
LABEL_6:
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      uint64_t v23 = *(void *)(a2 + 72);
      *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
      *(void *)(a1 + 72) = v23;
      goto LABEL_9;
    }
    sub_21F7CF668(a1);
    long long v24 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v24;
    long long v26 = *(_OWORD *)(a2 + 48);
    long long v25 = *(_OWORD *)(a2 + 64);
    long long v27 = *(_OWORD *)(a2 + 32);
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
    *(_OWORD *)(a1 + 48) = v26;
    *(_OWORD *)(a1 + 64) = v25;
    *(_OWORD *)(a1 + 32) = v27;
  }
  else
  {
    if (v4)
    {
      uint64_t v17 = *(void *)a2;
      uint64_t v18 = *(void *)(a2 + 8);
      char v19 = *(unsigned char *)(a2 + 16);
      sub_21F7652C0(*(void *)a2, v18, v19);
      *(void *)a1 = v17;
      *(void *)(a1 + 8) = v18;
      *(unsigned char *)(a1 + 16) = v19;
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      uint64_t v20 = *(void *)(a2 + 32);
      uint64_t v21 = *(void *)(a2 + 40);
      char v22 = *(unsigned char *)(a2 + 48);
      swift_bridgeObjectRetain();
      sub_21F770E44(v20, v21, v22);
      *(void *)(a1 + 32) = v20;
      *(void *)(a1 + 40) = v21;
      *(unsigned char *)(a1 + 48) = v22;
      goto LABEL_6;
    }
    long long v28 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v28;
    long long v29 = *(_OWORD *)(a2 + 32);
    long long v30 = *(_OWORD *)(a2 + 48);
    long long v31 = *(_OWORD *)(a2 + 64);
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
    *(_OWORD *)(a1 + 48) = v30;
    *(_OWORD *)(a1 + 64) = v31;
    *(_OWORD *)(a1 + 32) = v29;
  }
LABEL_9:
  uint64_t v32 = (_OWORD *)(a1 + 88);
  uint64_t v33 = (_OWORD *)(a2 + 88);
  uint64_t v34 = *(void *)(a2 + 112);
  if (*(void *)(a1 + 112))
  {
    if (v34)
    {
      uint64_t v35 = *(void *)(a2 + 88);
      uint64_t v36 = *(void *)(a2 + 96);
      char v37 = *(unsigned char *)(a2 + 104);
      sub_21F7652C0(v35, v36, v37);
      uint64_t v38 = *(void *)(a1 + 88);
      uint64_t v39 = *(void *)(a1 + 96);
      char v40 = *(unsigned char *)(a1 + 104);
      *(void *)(a1 + 88) = v35;
      *(void *)(a1 + 96) = v36;
      *(unsigned char *)(a1 + 104) = v37;
      sub_21F7656A8(v38, v39, v40);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v41 = *(void *)(a2 + 120);
      uint64_t v42 = *(void *)(a2 + 128);
      char v43 = *(unsigned char *)(a2 + 136);
      sub_21F770E44(v41, v42, v43);
      uint64_t v44 = *(void *)(a1 + 120);
      uint64_t v45 = *(void *)(a1 + 128);
      *(void *)(a1 + 120) = v41;
      *(void *)(a1 + 128) = v42;
      char v46 = *(unsigned char *)(a1 + 136);
      *(unsigned char *)(a1 + 136) = v43;
      sub_21F770E38(v44, v45, v46);
LABEL_14:
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      uint64_t v53 = *(void *)(a2 + 160);
      *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
      *(void *)(a1 + 160) = v53;
      goto LABEL_17;
    }
    sub_21F7CF668(a1 + 88);
    long long v54 = *(_OWORD *)(a2 + 104);
    *uint64_t v32 = *v33;
    *(_OWORD *)(a1 + 104) = v54;
    long long v56 = *(_OWORD *)(a2 + 136);
    long long v55 = *(_OWORD *)(a2 + 152);
    long long v57 = *(_OWORD *)(a2 + 120);
    *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
    *(_OWORD *)(a1 + 136) = v56;
    *(_OWORD *)(a1 + 152) = v55;
    *(_OWORD *)(a1 + 120) = v57;
  }
  else
  {
    if (v34)
    {
      uint64_t v47 = *(void *)(a2 + 88);
      uint64_t v48 = *(void *)(a2 + 96);
      char v49 = *(unsigned char *)(a2 + 104);
      sub_21F7652C0(v47, v48, v49);
      *(void *)(a1 + 88) = v47;
      *(void *)(a1 + 96) = v48;
      *(unsigned char *)(a1 + 104) = v49;
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      uint64_t v50 = *(void *)(a2 + 120);
      uint64_t v51 = *(void *)(a2 + 128);
      char v52 = *(unsigned char *)(a2 + 136);
      swift_bridgeObjectRetain();
      sub_21F770E44(v50, v51, v52);
      *(void *)(a1 + 120) = v50;
      *(void *)(a1 + 128) = v51;
      *(unsigned char *)(a1 + 136) = v52;
      goto LABEL_14;
    }
    long long v58 = *(_OWORD *)(a2 + 104);
    *uint64_t v32 = *v33;
    *(_OWORD *)(a1 + 104) = v58;
    long long v59 = *(_OWORD *)(a2 + 120);
    long long v60 = *(_OWORD *)(a2 + 136);
    long long v61 = *(_OWORD *)(a2 + 152);
    *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
    *(_OWORD *)(a1 + 136) = v60;
    *(_OWORD *)(a1 + 152) = v61;
    *(_OWORD *)(a1 + 120) = v59;
  }
LABEL_17:
  uint64_t v62 = (_OWORD *)(a1 + 176);
  unint64_t v63 = (_OWORD *)(a2 + 176);
  uint64_t v64 = *(void *)(a2 + 200);
  if (*(void *)(a1 + 200))
  {
    if (!v64)
    {
      sub_21F7CF668(a1 + 176);
      long long v84 = *(_OWORD *)(a2 + 192);
      *uint64_t v62 = *v63;
      *(_OWORD *)(a1 + 192) = v84;
      long long v86 = *(_OWORD *)(a2 + 224);
      long long v85 = *(_OWORD *)(a2 + 240);
      long long v87 = *(_OWORD *)(a2 + 208);
      *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
      *(_OWORD *)(a1 + 224) = v86;
      *(_OWORD *)(a1 + 240) = v85;
      *(_OWORD *)(a1 + 208) = v87;
      goto LABEL_25;
    }
    uint64_t v65 = *(void *)(a2 + 176);
    uint64_t v66 = *(void *)(a2 + 184);
    char v67 = *(unsigned char *)(a2 + 192);
    sub_21F7652C0(v65, v66, v67);
    uint64_t v68 = *(void *)(a1 + 176);
    uint64_t v69 = *(void *)(a1 + 184);
    char v70 = *(unsigned char *)(a1 + 192);
    *(void *)(a1 + 176) = v65;
    *(void *)(a1 + 184) = v66;
    *(unsigned char *)(a1 + 192) = v67;
    sub_21F7656A8(v68, v69, v70);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v71 = *(void *)(a2 + 208);
    uint64_t v72 = *(void *)(a2 + 216);
    char v73 = *(unsigned char *)(a2 + 224);
    sub_21F770E44(v71, v72, v73);
    uint64_t v74 = *(void *)(a1 + 208);
    uint64_t v75 = *(void *)(a1 + 216);
    *(void *)(a1 + 208) = v71;
    *(void *)(a1 + 216) = v72;
    char v76 = *(unsigned char *)(a1 + 224);
    *(unsigned char *)(a1 + 224) = v73;
    sub_21F770E38(v74, v75, v76);
  }
  else
  {
    if (!v64)
    {
      long long v88 = *(_OWORD *)(a2 + 192);
      *uint64_t v62 = *v63;
      *(_OWORD *)(a1 + 192) = v88;
      long long v89 = *(_OWORD *)(a2 + 208);
      long long v90 = *(_OWORD *)(a2 + 224);
      long long v91 = *(_OWORD *)(a2 + 240);
      *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
      *(_OWORD *)(a1 + 224) = v90;
      *(_OWORD *)(a1 + 240) = v91;
      *(_OWORD *)(a1 + 208) = v89;
      goto LABEL_25;
    }
    uint64_t v77 = *(void *)(a2 + 176);
    uint64_t v78 = *(void *)(a2 + 184);
    char v79 = *(unsigned char *)(a2 + 192);
    sub_21F7652C0(v77, v78, v79);
    *(void *)(a1 + 176) = v77;
    *(void *)(a1 + 184) = v78;
    *(unsigned char *)(a1 + 192) = v79;
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    uint64_t v80 = *(void *)(a2 + 208);
    uint64_t v81 = *(void *)(a2 + 216);
    char v82 = *(unsigned char *)(a2 + 224);
    swift_bridgeObjectRetain();
    sub_21F770E44(v80, v81, v82);
    *(void *)(a1 + 208) = v80;
    *(void *)(a1 + 216) = v81;
    *(unsigned char *)(a1 + 224) = v82;
  }
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  uint64_t v83 = *(void *)(a2 + 248);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  *(void *)(a1 + 248) = v83;
LABEL_25:
  *(unsigned char *)(a1 + 257) = *(unsigned char *)(a2 + 257);
  return a1;
}

uint64_t sub_21F7CF668(uint64_t a1)
{
  return a1;
}

void *initializeWithTake for SubPositionContext(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x102uLL);
}

uint64_t destroy for AnyPlottableValue(uint64_t a1)
{
  sub_21F7656A8(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  char v4 = *(unsigned char *)(a1 + 48);

  return sub_21F770E38(v2, v3, v4);
}

uint64_t initializeWithCopy for SubPositionContext.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_21F7652C0(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  sub_21F770E44(v7, v8, v9);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  return a1;
}

uint64_t assignWithCopy for SubPositionContext.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_21F7652C0(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  sub_21F7656A8(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(a2 + 40);
  char v12 = *(unsigned char *)(a2 + 48);
  sub_21F770E44(v10, v11, v12);
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v11;
  char v15 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v12;
  sub_21F770E38(v13, v14, v15);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v16 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = v16;
  return a1;
}

uint64_t assignWithTake for SubPositionContext.Value(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  sub_21F7656A8(v5, v6, v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  char v8 = *(unsigned char *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  char v11 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v8;
  sub_21F770E38(v9, v10, v11);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  return a1;
}

void *assignWithCopy for StackContext(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t destroy for ChartContentLayoutContext.CovariantYDomain(uint64_t a1)
{
  uint64_t result = swift_release();
  if (*(void *)(a1 + 16))
  {
    return swift_release();
  }
  return result;
}

void *initializeWithCopy for ChartContentLayoutContext.CovariantYDomain(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v6 = a2 + 2;
  uint64_t v5 = a2[2];
  swift_retain();
  if (v5)
  {
    uint64_t v7 = a2[3];
    a1[2] = v5;
    a1[3] = v7;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *v6;
  }
  return a1;
}

void *assignWithCopy for ChartContentLayoutContext.CovariantYDomain(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[2];
  if (!a1[2])
  {
    if (v5)
    {
      uint64_t v7 = a2[3];
      a1[2] = v5;
      a1[3] = v7;
      swift_retain();
      return a1;
    }
LABEL_7:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    return a1;
  }
  if (!v5)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ChartContentLayoutContext.CovariantYDomain(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  if (!*(void *)(a1 + 16))
  {
    if (v4)
    {
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = v6;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ChartContentLayoutContext.CovariantYDomain()
{
  return &type metadata for ChartContentLayoutContext.CovariantYDomain;
}

uint64_t destroy for PlottedValueCollector()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PlottedValueCollector(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v3;
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PlottedValueCollector(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(_OWORD *)a1 = v4;
  long long v5 = *(long long *)((char *)a2 + 24);
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 64) = *((_WORD *)a2 + 32);
  return a1;
}

__n128 initializeWithTake for PlottedValueCollector(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for PlottedValueCollector(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlottedValueCollector(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 66)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlottedValueCollector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 64) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 66) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 66) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlottedValueCollector()
{
  return &type metadata for PlottedValueCollector;
}

ValueMetadata *type metadata accessor for _ChartContentRenderInputs.Target()
{
  return &type metadata for _ChartContentRenderInputs.Target;
}

uint64_t *sub_21F7CFD9C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  int v9 = v7 + 16;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v10 = *(void *)(v5 + 64);
  }
  else {
    size_t v10 = *(void *)(v5 + 64) + 1;
  }
  size_t v11 = v10 + 7;
  unint64_t v12 = (((((v10 + 7 + ((v7 + 16) & ~(unint64_t)v7)) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 31) & 0xFFFFFFFFFFFFFFF8;
  int v13 = v7 & 0x100000;
  if (v8 > 7 || v13 != 0 || v12 + 33 > 0x18)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v8 & 0xF8 ^ 0x1F8) & v9));
    swift_retain();
  }
  else
  {
    uint64_t v17 = ~v8;
    unint64_t v18 = v12 + 32;
    unsigned int v19 = *((unsigned __int8 *)a2 + v18);
    unint64_t v55 = v18;
    if ((v18 & 0xFFFFFFF8) != 0 && v19 >= 2) {
      unsigned int v19 = *(_DWORD *)a2 + 2;
    }
    uint64_t v21 = a2[1];
    *a1 = *a2;
    a1[1] = v21;
    char v22 = (void *)(((unint64_t)a1 + v8 + 16) & v17);
    uint64_t v23 = (const void *)(((unint64_t)a2 + v8 + 16) & v17);
    long long v24 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    int v25 = v24(v23, 1, v4);
    if (v19 == 1)
    {
      if (v25)
      {
        memcpy(v22, v23, v10);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v22, v23, v4);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v22, 0, 1, v4);
      }
      unint64_t v26 = ((unint64_t)v22 + v11) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v27 = ((unint64_t)v23 + v11) & 0xFFFFFFFFFFFFFFF8;
      if (*(void *)v27 < 0xFFFFFFFFuLL)
      {
        *(_OWORD *)unint64_t v26 = *(_OWORD *)v27;
      }
      else
      {
        uint64_t v28 = *(void *)(v27 + 8);
        *(void *)unint64_t v26 = *(void *)v27;
        *(void *)(v26 + 8) = v28;
        swift_retain();
      }
      long long v29 = (void *)((v26 + 23) & 0xFFFFFFFFFFFFFFF8);
      long long v30 = (void *)((v27 + 23) & 0xFFFFFFFFFFFFFFF8);
      *long long v29 = *v30;
      unint64_t v31 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v32 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
      unsigned int v33 = *(unsigned __int8 *)(v32 + 8);
      swift_bridgeObjectRetain();
      if (v33 > 1)
      {
        uint64_t v36 = *(void *)v32;
        *(unsigned char *)(v31 + 8) = *(unsigned char *)(v32 + 8);
        *(void *)unint64_t v31 = v36;
      }
      else
      {
        char v34 = v33 != 0;
        uint64_t v35 = *(void *)v32;
        sub_21F7637D8(v35, v34);
        *(void *)unint64_t v31 = v35;
        *(unsigned char *)(v31 + 8) = v34;
      }
      char v37 = (_OWORD *)(((unint64_t)v29 + 31) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v38 = (_OWORD *)(((unint64_t)v30 + 31) & 0xFFFFFFFFFFFFFFF8);
      long long v39 = v38[1];
      *char v37 = *v38;
      v37[1] = v39;
      *((unsigned char *)a1 + v55) = 1;
    }
    else
    {
      if (v25)
      {
        memcpy(v22, v23, v10);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v22, v23, v4);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v22, 0, 1, v4);
      }
      unint64_t v40 = ((unint64_t)v22 + v11) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v41 = ((unint64_t)v23 + v11) & 0xFFFFFFFFFFFFFFF8;
      if (*(void *)v41 < 0xFFFFFFFFuLL)
      {
        *(_OWORD *)unint64_t v40 = *(_OWORD *)v41;
      }
      else
      {
        uint64_t v42 = *(void *)(v41 + 8);
        *(void *)unint64_t v40 = *(void *)v41;
        *(void *)(v40 + 8) = v42;
        swift_retain();
      }
      char v43 = (void *)((v40 + 23) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v44 = (void *)((v41 + 23) & 0xFFFFFFFFFFFFFFF8);
      *char v43 = *v44;
      unint64_t v45 = ((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v46 = ((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8;
      unsigned int v47 = *(unsigned __int8 *)(v46 + 8);
      swift_bridgeObjectRetain();
      if (v47 > 1)
      {
        uint64_t v50 = *(void *)v46;
        *(unsigned char *)(v45 + 8) = *(unsigned char *)(v46 + 8);
        *(void *)unint64_t v45 = v50;
      }
      else
      {
        char v48 = v47 != 0;
        uint64_t v49 = *(void *)v46;
        sub_21F7637D8(v49, v48);
        *(void *)unint64_t v45 = v49;
        *(unsigned char *)(v45 + 8) = v48;
      }
      uint64_t v51 = (_OWORD *)(((unint64_t)v44 + 31) & 0xFFFFFFFFFFFFFFF8);
      long long v52 = v51[1];
      uint64_t v53 = (_OWORD *)(((unint64_t)v43 + 31) & 0xFFFFFFFFFFFFFFF8);
      _OWORD *v53 = *v51;
      v53[1] = v52;
      *((unsigned char *)a1 + v55) = 0;
    }
  }
  return a1;
}

uint64_t sub_21F7D0150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  size_t v8 = *(void *)(v6 + 64);
  if (!*(_DWORD *)(v6 + 84)) {
    ++v8;
  }
  size_t __n = v8;
  size_t v9 = v8 + 7;
  unint64_t v10 = ((((((v8 + 7 + ((v7 + 16) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
      + 32;
  unsigned int v11 = *(unsigned __int8 *)(a1 + v10);
  unint64_t v52 = v10;
  uint64_t v12 = v10 & 0xFFFFFFF8;
  if (v11 >= 2 && v12 != 0) {
    unsigned int v11 = *(_DWORD *)a1 + 2;
  }
  swift_release();
  uint64_t v14 = (a1 + v7 + 16) & ~v7;
  uint64_t v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  int v15 = v51(v14, 1, v5);
  if (v11 == 1)
  {
    if (!v15) {
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))((a1 + v7 + 16) & ~v7, v5);
    }
    uint64_t v16 = (void *)((v9 + v14) & 0xFFFFFFFFFFFFFFF8);
    if (*v16 >= 0xFFFFFFFFuLL) {
      swift_release();
    }
    swift_bridgeObjectRelease();
    unint64_t v17 = ((((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v18 = *(unsigned __int8 *)(v17 + 8);
    if (v18 > 1) {
      goto LABEL_22;
    }
  }
  else
  {
    if (!v15) {
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))((a1 + v7 + 16) & ~v7, v5);
    }
    unsigned int v19 = (void *)((v9 + v14) & 0xFFFFFFFFFFFFFFF8);
    if (*v19 >= 0xFFFFFFFFuLL) {
      swift_release();
    }
    swift_bridgeObjectRelease();
    unint64_t v17 = ((((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v18 = *(unsigned __int8 *)(v17 + 8);
    if (v18 >= 2) {
      goto LABEL_22;
    }
  }
  sub_21F76D54C(*(void *)v17, v18 != 0);
LABEL_22:
  unsigned int v20 = *(unsigned __int8 *)(a2 + v52);
  if (v12) {
    BOOL v21 = v20 >= 2;
  }
  else {
    BOOL v21 = 0;
  }
  if (v21) {
    unsigned int v20 = *(_DWORD *)a2 + 2;
  }
  uint64_t v22 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v22;
  uint64_t v23 = (const void *)((a2 + v7 + 16) & ~v7);
  swift_retain();
  int v24 = v51((uint64_t)v23, 1, v5);
  if (v20 == 1)
  {
    if (v24)
    {
      memcpy((void *)((a1 + v7 + 16) & ~v7), v23, __n);
    }
    else
    {
      (*(void (**)(uint64_t, const void *, uint64_t))(v6 + 16))((a1 + v7 + 16) & ~v7, v23, v5);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))((a1 + v7 + 16) & ~v7, 0, 1, v5);
    }
    unint64_t v25 = (v9 + v14) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v26 = ((unint64_t)v23 + v9) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v26 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v25 = *(_OWORD *)v26;
    }
    else
    {
      uint64_t v27 = *(void *)(v26 + 8);
      *(void *)unint64_t v25 = *(void *)v26;
      *(void *)(v25 + 8) = v27;
      swift_retain();
    }
    uint64_t v28 = (void *)((v25 + 23) & 0xFFFFFFFFFFFFFFF8);
    long long v29 = (void *)((v26 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v28 = *v29;
    unint64_t v30 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v31 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v32 = *(unsigned __int8 *)(v31 + 8);
    swift_bridgeObjectRetain();
    if (v32 > 1)
    {
      uint64_t v35 = *(void *)v31;
      *(unsigned char *)(v30 + 8) = *(unsigned char *)(v31 + 8);
      *(void *)unint64_t v30 = v35;
    }
    else
    {
      char v33 = v32 != 0;
      uint64_t v34 = *(void *)v31;
      sub_21F7637D8(v34, v33);
      *(void *)unint64_t v30 = v34;
      *(unsigned char *)(v30 + 8) = v33;
    }
    char v36 = 1;
  }
  else
  {
    if (v24)
    {
      memcpy((void *)((a1 + v7 + 16) & ~v7), v23, __n);
    }
    else
    {
      (*(void (**)(uint64_t, const void *, uint64_t))(v6 + 16))((a1 + v7 + 16) & ~v7, v23, v5);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))((a1 + v7 + 16) & ~v7, 0, 1, v5);
    }
    unint64_t v37 = (v9 + v14) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v38 = ((unint64_t)v23 + v9) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v38 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v37 = *(_OWORD *)v38;
    }
    else
    {
      uint64_t v39 = *(void *)(v38 + 8);
      *(void *)unint64_t v37 = *(void *)v38;
      *(void *)(v37 + 8) = v39;
      swift_retain();
    }
    uint64_t v28 = (void *)((v37 + 23) & 0xFFFFFFFFFFFFFFF8);
    long long v29 = (void *)((v38 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v28 = *v29;
    unint64_t v40 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v41 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v42 = *(unsigned __int8 *)(v41 + 8);
    swift_bridgeObjectRetain();
    if (v42 > 1)
    {
      char v36 = 0;
      uint64_t v45 = *(void *)v41;
      *(unsigned char *)(v40 + 8) = *(unsigned char *)(v41 + 8);
      *(void *)unint64_t v40 = v45;
    }
    else
    {
      char v43 = v42 != 0;
      uint64_t v44 = *(void *)v41;
      sub_21F7637D8(v44, v43);
      char v36 = 0;
      *(void *)unint64_t v40 = v44;
      *(unsigned char *)(v40 + 8) = v43;
    }
  }
  unint64_t v46 = (_OWORD *)(((unint64_t)v29 + 31) & 0xFFFFFFFFFFFFFFF8);
  long long v47 = v46[1];
  char v48 = (_OWORD *)(((unint64_t)v28 + 31) & 0xFFFFFFFFFFFFFFF8);
  *char v48 = *v46;
  v48[1] = v47;
  *(unsigned char *)(a1 + v52) = v36;
  return a1;
}

_OWORD *sub_21F7D05EC(_OWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ~v7;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1;
  }
  size_t v10 = v9 + 7;
  unint64_t v11 = ((((((v9 + 7 + ((v7 + 16) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
      + 32;
  unsigned int v12 = *((unsigned __int8 *)a2 + v11);
  if (v12 >= 2 && (v11 & 0xFFFFFFF8) != 0) {
    unsigned int v12 = *a2 + 2;
  }
  *a1 = *(_OWORD *)a2;
  uint64_t v14 = (void *)(((unint64_t)a1 + v7 + 16) & v8);
  int v15 = (const void *)(((unint64_t)a2 + v7 + 16) & v8);
  int v16 = (*(uint64_t (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v15, 1, v4);
  if (v12 == 1)
  {
    if (v16)
    {
      memcpy(v14, v15, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v14, v15, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v14, 0, 1, v4);
    }
    unint64_t v17 = ((unint64_t)v14 + v10) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = ((unint64_t)v15 + v10) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v18 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v17 = *(_OWORD *)v18;
    }
    else
    {
      uint64_t v19 = *(void *)(v18 + 8);
      *(void *)unint64_t v17 = *(void *)v18;
      *(void *)(v17 + 8) = v19;
    }
    char v20 = 1;
  }
  else
  {
    if (v16)
    {
      memcpy(v14, v15, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v14, v15, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v14, 0, 1, v4);
    }
    unint64_t v17 = ((unint64_t)v14 + v10) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = ((unint64_t)v15 + v10) & 0xFFFFFFFFFFFFFFF8;
    char v20 = 0;
    if (*(void *)v18 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v17 = *(_OWORD *)v18;
    }
    else
    {
      uint64_t v21 = *(void *)(v18 + 8);
      *(void *)unint64_t v17 = *(void *)v18;
      *(void *)(v17 + 8) = v21;
    }
  }
  uint64_t v22 = (void *)((v17 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = (void *)((v18 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v22 = *v23;
  unint64_t v24 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = *(void *)v25;
  *(unsigned char *)(v24 + 8) = *(unsigned char *)(v25 + 8);
  *(void *)unint64_t v24 = v26;
  uint64_t v27 = (_OWORD *)(((unint64_t)v22 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v28 = (_OWORD *)(((unint64_t)v23 + 31) & 0xFFFFFFFFFFFFFFF8);
  long long v29 = v28[1];
  *uint64_t v27 = *v28;
  v27[1] = v29;
  *((unsigned char *)a1 + v11) = v20;
  return a1;
}

uint64_t sub_21F7D088C(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(_DWORD *)(v3 + 84)) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  else {
    uint64_t v4 = *(void *)(v3 + 64) + 1;
  }
  if (!a2) {
    return 0;
  }
  unint64_t v5 = (((((v4 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 31) & 0xFFFFFFFFFFFFFFF8;
  if (a2 < 0xFF) {
    goto LABEL_21;
  }
  unint64_t v6 = v5 + 33;
  char v7 = 8 * (v5 + 33);
  if ((v5 + 33) <= 3)
  {
    unsigned int v8 = (a2 + 1) >> v7;
    if (v8 > 0xFFFE)
    {
      int v9 = *(_DWORD *)&a1[v6];
      if (!v9) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }
    if (v8 > 0xFE)
    {
      int v9 = *(unsigned __int16 *)&a1[v6];
      if (!*(_WORD *)&a1[v6]) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }
    if (!v8) {
      goto LABEL_21;
    }
  }
  int v9 = a1[v6];
  if (!a1[v6])
  {
LABEL_21:
    unsigned int v13 = a1[v5 + 32];
    if (v13 >= 2) {
      return (v13 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
LABEL_14:
  int v11 = (v9 - 1) << v7;
  if (v6 >= 4) {
    int v11 = 0;
  }
  if (v6 == 1) {
    int v12 = *a1;
  }
  else {
    int v12 = *(_DWORD *)a1;
  }
  return (v12 | v11) + 255;
}

void sub_21F7D09AC(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84)) {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v7 = (((((v6 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 31) & 0xFFFFFFFFFFFFFFF8;
  size_t v8 = v7 + 33;
  if (a3 < 0xFF)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v13 = (a3 + 1) >> (8 * v8);
    if (v13 > 0xFFFE)
    {
      int v9 = 4;
    }
    else if (v13 >= 0xFF)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v13 != 0;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (a2 <= 0xFE)
  {
    unint64_t v10 = v7 + 32;
    switch(v9)
    {
      case 1:
        a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_22;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        goto LABEL_21;
      case 3:
        goto LABEL_33;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_22;
      default:
LABEL_21:
        if (a2) {
LABEL_22:
        }
          a1[v10] = -(char)a2;
        break;
    }
    return;
  }
  unsigned int v11 = a2 - 255;
  if (v8 < 4)
  {
    int v12 = (v11 >> (8 * v8)) + 1;
    bzero(a1, v8);
    if (v8 == 1)
    {
      *a1 = v11;
      goto LABEL_28;
    }
    unsigned int v11 = v11;
  }
  else
  {
    bzero(a1, v7 + 33);
    int v12 = 1;
  }
  *(_DWORD *)a1 = v11;
LABEL_28:
  switch(v9)
  {
    case 1:
      a1[v8] = v12;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v12;
      break;
    case 3:
LABEL_33:
      __break(1u);
      JUMPOUT(0x21F7D0B94);
    case 4:
      *(_DWORD *)&a1[v8] = v12;
      break;
    default:
      return;
  }
}

uint64_t sub_21F7D0BBC(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  if (*(_DWORD *)(v2 + 84)) {
    uint64_t v3 = *(void *)(v2 + 64);
  }
  else {
    uint64_t v3 = *(void *)(v2 + 64) + 1;
  }
  unint64_t v4 = ((((((v3 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)) + 7) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 31) & 0xFFFFFFFFFFFFFFF8)
     + 32;
  uint64_t v5 = *((unsigned __int8 *)a1 + v4);
  uint64_t v6 = v4 & 0xFFFFFFF8;
  if (v5 >= 2 && v6 != 0) {
    return (*a1 + 2);
  }
  return v5;
}

void sub_21F7D0C5C(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(_DWORD *)(v4 + 84)) {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64) + 1;
  }
  size_t v6 = ((((((v5 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + 7) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 31) & 0xFFFFFFFFFFFFFFF8)
     + 32;
  if (a2 > 1)
  {
    if ((v6 & 0xFFFFFFF8) != 0) {
      char v7 = 2;
    }
    else {
      char v7 = a2;
    }
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v8 = a2 - 2;
    }
    else {
      unsigned int v8 = 0;
    }
    a1[v6] = v7;
    bzero(a1, v6);
    *(_DWORD *)a1 = v8;
  }
  else
  {
    a1[v6] = a2;
  }
}

uint64_t destroy for ChartContentRenderContext.AccessibilityGroup(uint64_t a1)
{
  return sub_21F7BB724(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(_OWORD *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(_OWORD *)(a1 + 144), *(void *)(a1 + 152), *(void *)(a1 + 160));
}

uint64_t initializeWithCopy for ChartContentRenderContext.AccessibilityGroup(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 72);
  uint64_t v11 = *(void *)(a2 + 80);
  uint64_t v13 = *(void *)(a2 + 88);
  uint64_t v14 = *(void *)(a2 + 96);
  uint64_t v15 = *(void *)(a2 + 104);
  uint64_t v16 = *(void *)(a2 + 112);
  uint64_t v17 = *(void *)(a2 + 120);
  uint64_t v18 = *(void *)(a2 + 128);
  uint64_t v19 = *(void *)(a2 + 136);
  uint64_t v20 = *(void *)(a2 + 144);
  uint64_t v21 = *(void *)(a2 + 152);
  uint64_t v22 = *(void *)(a2 + 160);
  sub_21F7C6094(v3, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v9;
  *(void *)(a1 + 72) = v10;
  *(void *)(a1 + 80) = v11;
  *(void *)(a1 + 88) = v13;
  *(void *)(a1 + 96) = v14;
  *(void *)(a1 + 104) = v15;
  *(void *)(a1 + 112) = v16;
  *(void *)(a1 + 120) = v17;
  *(void *)(a1 + 128) = v18;
  *(void *)(a1 + 136) = v19;
  *(void *)(a1 + 144) = v20;
  *(void *)(a1 + 152) = v21;
  *(void *)(a1 + 160) = v22;
  return a1;
}

uint64_t assignWithCopy for ChartContentRenderContext.AccessibilityGroup(uint64_t a1, void *a2)
{
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = a2[1];
  uint64_t v3 = a2[2];
  uint64_t v4 = a2[3];
  uint64_t v5 = a2[4];
  uint64_t v6 = a2[5];
  uint64_t v7 = a2[6];
  uint64_t v8 = a2[7];
  uint64_t v9 = a2[8];
  uint64_t v10 = a2[9];
  uint64_t v11 = a2[10];
  uint64_t v27 = a2[11];
  uint64_t v28 = a2[12];
  uint64_t v29 = a2[13];
  uint64_t v30 = a2[14];
  uint64_t v31 = a2[15];
  uint64_t v32 = a2[16];
  uint64_t v33 = a2[17];
  uint64_t v34 = a2[18];
  uint64_t v35 = a2[19];
  uint64_t v36 = a2[20];
  sub_21F7C6094(v3, v4, v5, v6, v7, v8, v9, v10, v11, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 48);
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v19 = *(void *)(a1 + 72);
  long long v20 = *(_OWORD *)(a1 + 80);
  long long v21 = *(_OWORD *)(a1 + 96);
  long long v22 = *(_OWORD *)(a1 + 112);
  long long v23 = *(_OWORD *)(a1 + 128);
  long long v24 = *(_OWORD *)(a1 + 144);
  uint64_t v25 = *(void *)(a1 + 160);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v9;
  *(void *)(a1 + 72) = v10;
  *(void *)(a1 + 80) = v11;
  *(void *)(a1 + 88) = v27;
  *(void *)(a1 + 96) = v28;
  *(void *)(a1 + 104) = v29;
  *(void *)(a1 + 112) = v30;
  *(void *)(a1 + 120) = v31;
  *(void *)(a1 + 128) = v32;
  *(void *)(a1 + 136) = v33;
  *(void *)(a1 + 144) = v34;
  *(void *)(a1 + 152) = v35;
  *(void *)(a1 + 160) = v36;
  sub_21F7BB724(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25);
  return a1;
}

__n128 initializeWithTake for ChartContentRenderContext.AccessibilityGroup(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[9];
  *(void *)(a1 + 160) = *((void *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for ChartContentRenderContext.AccessibilityGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 160);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 72);
  long long v12 = *(_OWORD *)(a1 + 80);
  long long v13 = *(_OWORD *)(a1 + 96);
  long long v14 = *(_OWORD *)(a1 + 112);
  long long v15 = *(_OWORD *)(a1 + 128);
  long long v16 = *(_OWORD *)(a1 + 144);
  uint64_t v17 = *(void *)(a1 + 160);
  long long v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v18;
  long long v19 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v19;
  long long v20 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v20;
  long long v21 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v21;
  long long v22 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v22;
  *(void *)(a1 + 160) = v3;
  sub_21F7BB724(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for ChartContentRenderContext.AccessibilityGroup(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 168)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 16) >> 3;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for ChartContentRenderContext.AccessibilityGroup(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 168) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(a1 + 16) = 8 * -a2;
      double result = 0.0;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      *(_OWORD *)(a1 + 136) = 0u;
      *(_OWORD *)(a1 + 152) = 0u;
      return result;
    }
    *(unsigned char *)(a1 + 168) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartContentRenderContext.AccessibilityGroup()
{
  return &type metadata for ChartContentRenderContext.AccessibilityGroup;
}

uint64_t sub_21F7D11E0(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    int v7 = *((unsigned __int8 *)a2 + 40);
    if (v7 == 255)
    {
      long long v8 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v8;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
    }
    else if (v7)
    {
      long long v10 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v10;
      (**(void (***)(uint64_t, uint64_t *))(v10 - 8))(a1, a2);
      *(unsigned char *)(v4 + 40) = 1;
    }
    else
    {
      *(void *)a1 = *a2;
      *(unsigned char *)(a1 + 40) = 0;
      swift_retain();
    }
    *(unsigned char *)(v4 + 41) = *((unsigned char *)a2 + 41);
    *(void *)(v4 + 48) = a2[6];
    *(void *)(v4 + 56) = a2[7];
    uint64_t v11 = a2[9];
    *(void *)(v4 + 64) = a2[8];
    *(void *)(v4 + 72) = v11;
    *(void *)(v4 + 80) = a2[10];
    int v12 = *((unsigned __int8 *)a2 + 128);
    swift_bridgeObjectRetain();
    if (v12 == 255)
    {
      long long v13 = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(v4 + 88) = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(v4 + 104) = v13;
      *(_OWORD *)(v4 + 113) = *(_OWORD *)((char *)a2 + 113);
    }
    else if (v12)
    {
      *(void *)(v4 + 88) = a2[11];
      *(_OWORD *)(v4 + 96) = *((_OWORD *)a2 + 6);
      *(unsigned char *)(v4 + 128) = 1;
      swift_retain();
    }
    else
    {
      long long v14 = *((_OWORD *)a2 + 7);
      *(_OWORD *)(v4 + 112) = v14;
      (**(void (***)(uint64_t, uint64_t))(v14 - 8))(v4 + 88, (uint64_t)(a2 + 11));
      *(unsigned char *)(v4 + 128) = 0;
    }
    *(_OWORD *)(v4 + 136) = *(_OWORD *)(a2 + 17);
    *(unsigned char *)(v4 + 152) = *((unsigned char *)a2 + 152);
    *(void *)(v4 + 160) = a2[20];
    *(unsigned char *)(v4 + 168) = *((unsigned char *)a2 + 168);
    long long v15 = *((_OWORD *)a2 + 11);
    long long v16 = *((_OWORD *)a2 + 12);
    *(unsigned char *)(v4 + 208) = *((unsigned char *)a2 + 208);
    uint64_t v17 = a3[11];
    long long v18 = (void *)(v4 + v17);
    long long v19 = (char *)a2 + v17;
    *(_OWORD *)(v4 + 176) = v15;
    *(_OWORD *)(v4 + 192) = v16;
    uint64_t v20 = sub_21FA24C90();
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      uint64_t v22 = sub_21F76CA40(&qword_26AD47C20);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    uint64_t v23 = a3[12];
    uint64_t v24 = a3[13];
    uint64_t v25 = v4 + v23;
    uint64_t v26 = (uint64_t)a2 + v23;
    *(void *)uint64_t v25 = *(void *)v26;
    uint64_t v27 = *(uint64_t *)((char *)a2 + v24);
    *(unsigned char *)(v25 + 8) = *(unsigned char *)(v26 + 8);
    *(void *)(v4 + v24) = v27;
    uint64_t v28 = a3[14];
    uint64_t v29 = (void *)(v4 + v28);
    uint64_t v30 = (char *)a2 + v28;
    uint64_t v31 = sub_21FA25910();
    uint64_t v32 = *(void *)(v31 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    {
      uint64_t v33 = sub_21F76CA40(&qword_26AD4A3B8);
      memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
    uint64_t v34 = a3[15];
    uint64_t v35 = a3[16];
    uint64_t v36 = v4 + v34;
    uint64_t v37 = (uint64_t)a2 + v34;
    *(void *)uint64_t v36 = *(void *)v37;
    *(_WORD *)(v36 + 8) = *(_WORD *)(v37 + 8);
    *(void *)(v4 + v35) = *(uint64_t *)((char *)a2 + v35);
    uint64_t v38 = a3[18];
    *(void *)(v4 + a3[17]) = *(uint64_t *)((char *)a2 + a3[17]);
    uint64_t v39 = v4 + v38;
    uint64_t v40 = (uint64_t)a2 + v38;
    uint64_t v41 = *(uint64_t *)((char *)a2 + v38 + 24);
    swift_retain();
    if (v41)
    {
      uint64_t v42 = *(void *)v40;
      uint64_t v43 = *(void *)(v40 + 8);
      char v44 = *(unsigned char *)(v40 + 16);
      sub_21F7652C0(*(void *)v40, v43, v44);
      *(void *)uint64_t v39 = v42;
      *(void *)(v39 + 8) = v43;
      *(unsigned char *)(v39 + 16) = v44;
      uint64_t v45 = *(void *)(v40 + 32);
      *(void *)(v39 + 24) = *(void *)(v40 + 24);
      uint64_t v46 = *(void *)(v40 + 40);
      char v47 = *(unsigned char *)(v40 + 48);
      swift_bridgeObjectRetain();
      sub_21F770E44(v45, v46, v47);
      *(void *)(v39 + 32) = v45;
      *(void *)(v39 + 40) = v46;
      *(unsigned char *)(v39 + 48) = v47;
      *(_OWORD *)(v39 + 56) = *(_OWORD *)(v40 + 56);
    }
    else
    {
      long long v48 = *(_OWORD *)(v40 + 48);
      *(_OWORD *)(v39 + 32) = *(_OWORD *)(v40 + 32);
      *(_OWORD *)(v39 + 48) = v48;
      *(void *)(v39 + 64) = *(void *)(v40 + 64);
      long long v49 = *(_OWORD *)(v40 + 16);
      *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
      *(_OWORD *)(v39 + 16) = v49;
    }
    uint64_t v50 = a3[19];
    uint64_t v51 = v4 + v50;
    uint64_t v52 = (uint64_t)a2 + v50;
    if (*(uint64_t *)((char *)a2 + v50 + 24))
    {
      uint64_t v53 = *(void *)v52;
      uint64_t v54 = *(void *)(v52 + 8);
      char v55 = *(unsigned char *)(v52 + 16);
      sub_21F7652C0(*(void *)v52, v54, v55);
      *(void *)uint64_t v51 = v53;
      *(void *)(v51 + 8) = v54;
      *(unsigned char *)(v51 + 16) = v55;
      uint64_t v56 = *(void *)(v52 + 32);
      *(void *)(v51 + 24) = *(void *)(v52 + 24);
      uint64_t v57 = *(void *)(v52 + 40);
      char v58 = *(unsigned char *)(v52 + 48);
      swift_bridgeObjectRetain();
      sub_21F770E44(v56, v57, v58);
      *(void *)(v51 + 32) = v56;
      *(void *)(v51 + 40) = v57;
      *(unsigned char *)(v51 + 48) = v58;
      *(_OWORD *)(v51 + 56) = *(_OWORD *)(v52 + 56);
    }
    else
    {
      long long v59 = *(_OWORD *)(v52 + 48);
      *(_OWORD *)(v51 + 32) = *(_OWORD *)(v52 + 32);
      *(_OWORD *)(v51 + 48) = v59;
      *(void *)(v51 + 64) = *(void *)(v52 + 64);
      long long v60 = *(_OWORD *)(v52 + 16);
      *(_OWORD *)uint64_t v51 = *(_OWORD *)v52;
      *(_OWORD *)(v51 + 16) = v60;
    }
    uint64_t v61 = a3[20];
    uint64_t v62 = v4 + v61;
    uint64_t v63 = (uint64_t)a2 + v61;
    if (*(uint64_t *)((char *)a2 + v61 + 24))
    {
      uint64_t v64 = *(void *)v63;
      uint64_t v65 = *(void *)(v63 + 8);
      char v66 = *(unsigned char *)(v63 + 16);
      sub_21F7652C0(*(void *)v63, v65, v66);
      *(void *)uint64_t v62 = v64;
      *(void *)(v62 + 8) = v65;
      *(unsigned char *)(v62 + 16) = v66;
      uint64_t v67 = *(void *)(v63 + 32);
      *(void *)(v62 + 24) = *(void *)(v63 + 24);
      uint64_t v68 = *(void *)(v63 + 40);
      char v69 = *(unsigned char *)(v63 + 48);
      swift_bridgeObjectRetain();
      sub_21F770E44(v67, v68, v69);
      *(void *)(v62 + 32) = v67;
      *(void *)(v62 + 40) = v68;
      *(unsigned char *)(v62 + 48) = v69;
      *(_OWORD *)(v62 + 56) = *(_OWORD *)(v63 + 56);
    }
    else
    {
      long long v70 = *(_OWORD *)(v63 + 48);
      *(_OWORD *)(v62 + 32) = *(_OWORD *)(v63 + 32);
      *(_OWORD *)(v62 + 48) = v70;
      *(void *)(v62 + 64) = *(void *)(v63 + 64);
      long long v71 = *(_OWORD *)(v63 + 16);
      *(_OWORD *)uint64_t v62 = *(_OWORD *)v63;
      *(_OWORD *)(v62 + 16) = v71;
    }
    uint64_t v72 = a3[21];
    uint64_t v73 = v4 + v72;
    uint64_t v74 = (uint64_t)a2 + v72;
    if (*(uint64_t *)((char *)a2 + v72 + 24))
    {
      uint64_t v75 = *(void *)v74;
      uint64_t v76 = *(void *)(v74 + 8);
      char v77 = *(unsigned char *)(v74 + 16);
      sub_21F7652C0(*(void *)v74, v76, v77);
      *(void *)uint64_t v73 = v75;
      *(void *)(v73 + 8) = v76;
      *(unsigned char *)(v73 + 16) = v77;
      uint64_t v78 = *(void *)(v74 + 32);
      *(void *)(v73 + 24) = *(void *)(v74 + 24);
      uint64_t v79 = *(void *)(v74 + 40);
      char v80 = *(unsigned char *)(v74 + 48);
      swift_bridgeObjectRetain();
      sub_21F770E44(v78, v79, v80);
      *(void *)(v73 + 32) = v78;
      *(void *)(v73 + 40) = v79;
      *(unsigned char *)(v73 + 48) = v80;
      *(_OWORD *)(v73 + 56) = *(_OWORD *)(v74 + 56);
    }
    else
    {
      long long v81 = *(_OWORD *)(v74 + 48);
      *(_OWORD *)(v73 + 32) = *(_OWORD *)(v74 + 32);
      *(_OWORD *)(v73 + 48) = v81;
      *(void *)(v73 + 64) = *(void *)(v74 + 64);
      long long v82 = *(_OWORD *)(v74 + 16);
      *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
      *(_OWORD *)(v73 + 16) = v82;
    }
    uint64_t v83 = a3[22];
    uint64_t v84 = a3[23];
    uint64_t v85 = v4 + v83;
    uint64_t v86 = (uint64_t)a2 + v83;
    *(_OWORD *)uint64_t v85 = *(_OWORD *)v86;
    *(void *)(v85 + 16) = *(void *)(v86 + 16);
    uint64_t v87 = v4 + v84;
    uint64_t v88 = (uint64_t)a2 + v84;
    *(_OWORD *)uint64_t v87 = *(_OWORD *)v88;
    *(void *)(v87 + 16) = *(void *)(v88 + 16);
    uint64_t v89 = a3[24];
    uint64_t v90 = v4 + v89;
    uint64_t v91 = (uint64_t)a2 + v89;
    if (*(uint64_t *)((char *)a2 + v89 + 24))
    {
      uint64_t v92 = *(void *)v91;
      uint64_t v93 = *(void *)(v91 + 8);
      char v94 = *(unsigned char *)(v91 + 16);
      sub_21F7652C0(*(void *)v91, v93, v94);
      *(void *)uint64_t v90 = v92;
      *(void *)(v90 + 8) = v93;
      *(unsigned char *)(v90 + 16) = v94;
      *(void *)(v90 + 24) = *(void *)(v91 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v95 = *(_OWORD *)(v91 + 16);
      *(_OWORD *)uint64_t v90 = *(_OWORD *)v91;
      *(_OWORD *)(v90 + 16) = v95;
    }
    uint64_t v96 = a3[25];
    uint64_t v97 = v4 + v96;
    uint64_t v98 = (uint64_t)a2 + v96;
    if (*(uint64_t *)((char *)a2 + v96 + 24))
    {
      uint64_t v99 = *(void *)v98;
      uint64_t v100 = *(void *)(v98 + 8);
      char v101 = *(unsigned char *)(v98 + 16);
      sub_21F7652C0(*(void *)v98, v100, v101);
      *(void *)uint64_t v97 = v99;
      *(void *)(v97 + 8) = v100;
      *(unsigned char *)(v97 + 16) = v101;
      *(void *)(v97 + 24) = *(void *)(v98 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v102 = *(_OWORD *)(v98 + 16);
      *(_OWORD *)uint64_t v97 = *(_OWORD *)v98;
      *(_OWORD *)(v97 + 16) = v102;
    }
    uint64_t v103 = a3[26];
    uint64_t v104 = a3[27];
    int v105 = (void *)(v4 + v103);
    long long v106 = (uint64_t *)((char *)a2 + v103);
    uint64_t v107 = v106[1];
    *int v105 = *v106;
    v105[1] = v107;
    *(unsigned char *)(v4 + v104) = *((unsigned char *)a2 + v104);
    uint64_t v108 = a3[28];
    uint64_t v109 = v4 + v108;
    uint64_t v110 = (uint64_t)a2 + v108;
    uint64_t v111 = *(void *)(v110 + 24);
    swift_bridgeObjectRetain();
    if (v111)
    {
      *(void *)(v109 + 24) = v111;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v111 - 8))(v109, v110, v111);
    }
    else
    {
      long long v112 = *(_OWORD *)(v110 + 16);
      *(_OWORD *)uint64_t v109 = *(_OWORD *)v110;
      *(_OWORD *)(v109 + 16) = v112;
    }
  }
  return v4;
}

uint64_t sub_21F7D1930(uint64_t a1, long long *a2, int *a3)
{
  int v6 = *((unsigned __int8 *)a2 + 40);
  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    if (v6 == 255)
    {
      long long v9 = *a2;
      long long v10 = a2[1];
      *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v10;
      goto LABEL_11;
    }
    if (v6) {
      goto LABEL_8;
    }
LABEL_10:
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 40) = 0;
    swift_retain();
    goto LABEL_11;
  }
  if (v6 == 255)
  {
    sub_21F7D25BC(a1);
    long long v7 = *(long long *)((char *)a2 + 25);
    long long v8 = a2[1];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v8;
    *(_OWORD *)(a1 + 25) = v7;
    goto LABEL_11;
  }
  if ((long long *)a1 != a2)
  {
    sub_21F7D25BC(a1);
    if (*((unsigned char *)a2 + 40))
    {
LABEL_8:
      uint64_t v11 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v11;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v11 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 1;
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_11:
  *(unsigned char *)(a1 + 41) = *((unsigned char *)a2 + 41);
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 14);
  *(_DWORD *)(a1 + 60) = *((_DWORD *)a2 + 15);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  int v12 = (long long *)(a1 + 88);
  long long v13 = (long long *)((char *)a2 + 88);
  int v14 = *((unsigned __int8 *)a2 + 128);
  if (*(unsigned __int8 *)(a1 + 128) == 255)
  {
    if (v14 == 255)
    {
      long long v17 = *v13;
      long long v18 = *(long long *)((char *)a2 + 104);
      *(_OWORD *)(a1 + 113) = *(long long *)((char *)a2 + 113);
      *int v12 = v17;
      *(_OWORD *)(a1 + 104) = v18;
      goto LABEL_21;
    }
    if (v14) {
      goto LABEL_18;
    }
LABEL_20:
    uint64_t v19 = *((void *)a2 + 14);
    *(void *)(a1 + 112) = v19;
    *(void *)(a1 + 120) = *((void *)a2 + 15);
    (**(void (***)(uint64_t, uint64_t))(v19 - 8))(a1 + 88, (uint64_t)a2 + 88);
    *(unsigned char *)(a1 + 128) = 0;
    goto LABEL_21;
  }
  if (v14 == 255)
  {
    sub_21F7D2610(a1 + 88);
    long long v15 = *(long long *)((char *)a2 + 113);
    long long v16 = *(long long *)((char *)a2 + 104);
    *int v12 = *v13;
    *(_OWORD *)(a1 + 104) = v16;
    *(_OWORD *)(a1 + 113) = v15;
    goto LABEL_21;
  }
  if ((long long *)a1 != a2)
  {
    sub_21F7D2610(a1 + 88);
    if (a2[8])
    {
LABEL_18:
      *(void *)(a1 + 88) = *((void *)a2 + 11);
      *(_OWORD *)(a1 + 96) = a2[6];
      *(unsigned char *)(a1 + 128) = 1;
      swift_retain();
      goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_21:
  long long v20 = *(long long *)((char *)a2 + 136);
  *(unsigned char *)(a1 + 152) = *((unsigned char *)a2 + 152);
  *(_OWORD *)(a1 + 136) = v20;
  uint64_t v21 = *((void *)a2 + 20);
  *(unsigned char *)(a1 + 168) = *((unsigned char *)a2 + 168);
  *(void *)(a1 + 160) = v21;
  long long v22 = a2[11];
  long long v23 = a2[12];
  *(unsigned char *)(a1 + 208) = *((unsigned char *)a2 + 208);
  *(_OWORD *)(a1 + 176) = v22;
  *(_OWORD *)(a1 + 192) = v23;
  uint64_t v24 = a3[11];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = sub_21FA24C90();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1, v27);
  int v31 = v29(v26, 1, v27);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(void *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (v31)
  {
    (*(void (**)(void *, uint64_t))(v28 + 8))(v25, v27);
LABEL_26:
    uint64_t v32 = sub_21F76CA40(&qword_26AD47C20);
    memcpy(v25, v26, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_27;
  }
  (*(void (**)(void *, char *, uint64_t))(v28 + 24))(v25, v26, v27);
LABEL_27:
  uint64_t v33 = a3[12];
  uint64_t v34 = a1 + v33;
  uint64_t v35 = (uint64_t *)((char *)a2 + v33);
  uint64_t v36 = *v35;
  *(unsigned char *)(v34 + 8) = *((unsigned char *)v35 + 8);
  *(void *)uint64_t v34 = v36;
  *(void *)(a1 + a3[13]) = *(void *)((char *)a2 + a3[13]);
  uint64_t v37 = a3[14];
  uint64_t v38 = (void *)(a1 + v37);
  uint64_t v39 = (char *)a2 + v37;
  uint64_t v40 = sub_21FA25910();
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v41 + 48);
  int v43 = v42(v38, 1, v40);
  int v44 = v42(v39, 1, v40);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(void *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  if (v44)
  {
    (*(void (**)(void *, uint64_t))(v41 + 8))(v38, v40);
LABEL_32:
    uint64_t v45 = sub_21F76CA40(&qword_26AD4A3B8);
    memcpy(v38, v39, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_33;
  }
  (*(void (**)(void *, char *, uint64_t))(v41 + 24))(v38, v39, v40);
LABEL_33:
  uint64_t v46 = a3[15];
  uint64_t v47 = a1 + v46;
  uint64_t v48 = (uint64_t)a2 + v46;
  *(void *)(a1 + v46) = *(void *)((char *)a2 + v46);
  swift_retain();
  swift_release();
  *(unsigned char *)(v47 + 8) = *(unsigned char *)(v48 + 8);
  *(unsigned char *)(v47 + 9) = *(unsigned char *)(v48 + 9);
  *(void *)(a1 + a3[16]) = *(void *)((char *)a2 + a3[16]);
  *(void *)(a1 + a3[17]) = *(void *)((char *)a2 + a3[17]);
  uint64_t v49 = a3[18];
  uint64_t v50 = a1 + v49;
  uint64_t v51 = (uint64_t)a2 + v49;
  uint64_t v52 = *(void *)(a1 + v49 + 24);
  uint64_t v53 = *(void *)((char *)a2 + v49 + 24);
  if (v52)
  {
    if (v53)
    {
      uint64_t v54 = *(void *)v51;
      uint64_t v55 = *(void *)(v51 + 8);
      char v56 = *(unsigned char *)(v51 + 16);
      sub_21F7652C0(*(void *)v51, v55, v56);
      uint64_t v57 = *(void *)v50;
      uint64_t v58 = *(void *)(v50 + 8);
      char v59 = *(unsigned char *)(v50 + 16);
      *(void *)uint64_t v50 = v54;
      *(void *)(v50 + 8) = v55;
      *(unsigned char *)(v50 + 16) = v56;
      sub_21F7656A8(v57, v58, v59);
      *(void *)(v50 + 24) = *(void *)(v51 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v60 = *(void *)(v51 + 32);
      uint64_t v61 = *(void *)(v51 + 40);
      char v62 = *(unsigned char *)(v51 + 48);
      sub_21F770E44(v60, v61, v62);
      uint64_t v63 = *(void *)(v50 + 32);
      uint64_t v64 = *(void *)(v50 + 40);
      *(void *)(v50 + 32) = v60;
      *(void *)(v50 + 40) = v61;
      char v65 = *(unsigned char *)(v50 + 48);
      *(unsigned char *)(v50 + 48) = v62;
      sub_21F770E38(v63, v64, v65);
LABEL_38:
      *(_OWORD *)(v50 + 56) = *(_OWORD *)(v51 + 56);
      goto LABEL_43;
    }
    sub_21F7D2664(v50);
    *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
    long long v73 = *(_OWORD *)(v51 + 32);
    long long v72 = *(_OWORD *)(v51 + 48);
    long long v74 = *(_OWORD *)(v51 + 16);
    *(void *)(v50 + 64) = *(void *)(v51 + 64);
    *(_OWORD *)(v50 + 32) = v73;
    *(_OWORD *)(v50 + 48) = v72;
    *(_OWORD *)(v50 + 16) = v74;
  }
  else
  {
    if (v53)
    {
      uint64_t v66 = *(void *)v51;
      uint64_t v67 = *(void *)(v51 + 8);
      char v68 = *(unsigned char *)(v51 + 16);
      sub_21F7652C0(*(void *)v51, v67, v68);
      *(void *)uint64_t v50 = v66;
      *(void *)(v50 + 8) = v67;
      *(unsigned char *)(v50 + 16) = v68;
      *(void *)(v50 + 24) = *(void *)(v51 + 24);
      uint64_t v69 = *(void *)(v51 + 32);
      uint64_t v70 = *(void *)(v51 + 40);
      char v71 = *(unsigned char *)(v51 + 48);
      swift_bridgeObjectRetain();
      sub_21F770E44(v69, v70, v71);
      *(void *)(v50 + 32) = v69;
      *(void *)(v50 + 40) = v70;
      *(unsigned char *)(v50 + 48) = v71;
      goto LABEL_38;
    }
    *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
    long long v75 = *(_OWORD *)(v51 + 16);
    long long v76 = *(_OWORD *)(v51 + 32);
    long long v77 = *(_OWORD *)(v51 + 48);
    *(void *)(v50 + 64) = *(void *)(v51 + 64);
    *(_OWORD *)(v50 + 32) = v76;
    *(_OWORD *)(v50 + 48) = v77;
    *(_OWORD *)(v50 + 16) = v75;
  }
LABEL_43:
  uint64_t v78 = a3[19];
  uint64_t v79 = a1 + v78;
  uint64_t v80 = (uint64_t)a2 + v78;
  uint64_t v81 = *(void *)(a1 + v78 + 24);
  uint64_t v82 = *(void *)((char *)a2 + v78 + 24);
  if (v81)
  {
    if (v82)
    {
      uint64_t v83 = *(void *)v80;
      uint64_t v84 = *(void *)(v80 + 8);
      char v85 = *(unsigned char *)(v80 + 16);
      sub_21F7652C0(*(void *)v80, v84, v85);
      uint64_t v86 = *(void *)v79;
      uint64_t v87 = *(void *)(v79 + 8);
      char v88 = *(unsigned char *)(v79 + 16);
      *(void *)uint64_t v79 = v83;
      *(void *)(v79 + 8) = v84;
      *(unsigned char *)(v79 + 16) = v85;
      sub_21F7656A8(v86, v87, v88);
      *(void *)(v79 + 24) = *(void *)(v80 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v89 = *(void *)(v80 + 32);
      uint64_t v90 = *(void *)(v80 + 40);
      char v91 = *(unsigned char *)(v80 + 48);
      sub_21F770E44(v89, v90, v91);
      uint64_t v92 = *(void *)(v79 + 32);
      uint64_t v93 = *(void *)(v79 + 40);
      *(void *)(v79 + 32) = v89;
      *(void *)(v79 + 40) = v90;
      char v94 = *(unsigned char *)(v79 + 48);
      *(unsigned char *)(v79 + 48) = v91;
      sub_21F770E38(v92, v93, v94);
LABEL_48:
      *(_OWORD *)(v79 + 56) = *(_OWORD *)(v80 + 56);
      goto LABEL_51;
    }
    sub_21F7D2664(v79);
    *(_OWORD *)uint64_t v79 = *(_OWORD *)v80;
    long long v102 = *(_OWORD *)(v80 + 32);
    long long v101 = *(_OWORD *)(v80 + 48);
    long long v103 = *(_OWORD *)(v80 + 16);
    *(void *)(v79 + 64) = *(void *)(v80 + 64);
    *(_OWORD *)(v79 + 32) = v102;
    *(_OWORD *)(v79 + 48) = v101;
    *(_OWORD *)(v79 + 16) = v103;
  }
  else
  {
    if (v82)
    {
      uint64_t v95 = *(void *)v80;
      uint64_t v96 = *(void *)(v80 + 8);
      char v97 = *(unsigned char *)(v80 + 16);
      sub_21F7652C0(*(void *)v80, v96, v97);
      *(void *)uint64_t v79 = v95;
      *(void *)(v79 + 8) = v96;
      *(unsigned char *)(v79 + 16) = v97;
      *(void *)(v79 + 24) = *(void *)(v80 + 24);
      uint64_t v98 = *(void *)(v80 + 32);
      uint64_t v99 = *(void *)(v80 + 40);
      char v100 = *(unsigned char *)(v80 + 48);
      swift_bridgeObjectRetain();
      sub_21F770E44(v98, v99, v100);
      *(void *)(v79 + 32) = v98;
      *(void *)(v79 + 40) = v99;
      *(unsigned char *)(v79 + 48) = v100;
      goto LABEL_48;
    }
    *(_OWORD *)uint64_t v79 = *(_OWORD *)v80;
    long long v104 = *(_OWORD *)(v80 + 16);
    long long v105 = *(_OWORD *)(v80 + 32);
    long long v106 = *(_OWORD *)(v80 + 48);
    *(void *)(v79 + 64) = *(void *)(v80 + 64);
    *(_OWORD *)(v79 + 32) = v105;
    *(_OWORD *)(v79 + 48) = v106;
    *(_OWORD *)(v79 + 16) = v104;
  }
LABEL_51:
  uint64_t v107 = a3[20];
  uint64_t v108 = a1 + v107;
  uint64_t v109 = (uint64_t)a2 + v107;
  uint64_t v110 = *(void *)(a1 + v107 + 24);
  uint64_t v111 = *(void *)((char *)a2 + v107 + 24);
  if (v110)
  {
    if (v111)
    {
      uint64_t v112 = *(void *)v109;
      uint64_t v113 = *(void *)(v109 + 8);
      char v114 = *(unsigned char *)(v109 + 16);
      sub_21F7652C0(*(void *)v109, v113, v114);
      uint64_t v115 = *(void *)v108;
      uint64_t v116 = *(void *)(v108 + 8);
      char v117 = *(unsigned char *)(v108 + 16);
      *(void *)uint64_t v108 = v112;
      *(void *)(v108 + 8) = v113;
      *(unsigned char *)(v108 + 16) = v114;
      sub_21F7656A8(v115, v116, v117);
      *(void *)(v108 + 24) = *(void *)(v109 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v118 = *(void *)(v109 + 32);
      uint64_t v119 = *(void *)(v109 + 40);
      char v120 = *(unsigned char *)(v109 + 48);
      sub_21F770E44(v118, v119, v120);
      uint64_t v121 = *(void *)(v108 + 32);
      uint64_t v122 = *(void *)(v108 + 40);
      *(void *)(v108 + 32) = v118;
      *(void *)(v108 + 40) = v119;
      char v123 = *(unsigned char *)(v108 + 48);
      *(unsigned char *)(v108 + 48) = v120;
      sub_21F770E38(v121, v122, v123);
LABEL_56:
      *(_OWORD *)(v108 + 56) = *(_OWORD *)(v109 + 56);
      goto LABEL_59;
    }
    sub_21F7D2664(v108);
    *(_OWORD *)uint64_t v108 = *(_OWORD *)v109;
    long long v131 = *(_OWORD *)(v109 + 32);
    long long v130 = *(_OWORD *)(v109 + 48);
    long long v132 = *(_OWORD *)(v109 + 16);
    *(void *)(v108 + 64) = *(void *)(v109 + 64);
    *(_OWORD *)(v108 + 32) = v131;
    *(_OWORD *)(v108 + 48) = v130;
    *(_OWORD *)(v108 + 16) = v132;
  }
  else
  {
    if (v111)
    {
      uint64_t v124 = *(void *)v109;
      uint64_t v125 = *(void *)(v109 + 8);
      char v126 = *(unsigned char *)(v109 + 16);
      sub_21F7652C0(*(void *)v109, v125, v126);
      *(void *)uint64_t v108 = v124;
      *(void *)(v108 + 8) = v125;
      *(unsigned char *)(v108 + 16) = v126;
      *(void *)(v108 + 24) = *(void *)(v109 + 24);
      uint64_t v127 = *(void *)(v109 + 32);
      uint64_t v128 = *(void *)(v109 + 40);
      char v129 = *(unsigned char *)(v109 + 48);
      swift_bridgeObjectRetain();
      sub_21F770E44(v127, v128, v129);
      *(void *)(v108 + 32) = v127;
      *(void *)(v108 + 40) = v128;
      *(unsigned char *)(v108 + 48) = v129;
      goto LABEL_56;
    }
    *(_OWORD *)uint64_t v108 = *(_OWORD *)v109;
    long long v133 = *(_OWORD *)(v109 + 16);
    long long v134 = *(_OWORD *)(v109 + 32);
    long long v135 = *(_OWORD *)(v109 + 48);
    *(void *)(v108 + 64) = *(void *)(v109 + 64);
    *(_OWORD *)(v108 + 32) = v134;
    *(_OWORD *)(v108 + 48) = v135;
    *(_OWORD *)(v108 + 16) = v133;
  }
LABEL_59:
  uint64_t v136 = a3[21];
  uint64_t v137 = a1 + v136;
  uint64_t v138 = (uint64_t)a2 + v136;
  uint64_t v139 = *(void *)(a1 + v136 + 24);
  uint64_t v140 = *(void *)((char *)a2 + v136 + 24);
  if (v139)
  {
    if (v140)
    {
      uint64_t v141 = *(void *)v138;
      uint64_t v142 = *(void *)(v138 + 8);
      char v143 = *(unsigned char *)(v138 + 16);
      sub_21F7652C0(*(void *)v138, v142, v143);
      uint64_t v144 = *(void *)v137;
      uint64_t v145 = *(void *)(v137 + 8);
      char v146 = *(unsigned char *)(v137 + 16);
      *(void *)uint64_t v137 = v141;
      *(void *)(v137 + 8) = v142;
      *(unsigned char *)(v137 + 16) = v143;
      sub_21F7656A8(v144, v145, v146);
      *(void *)(v137 + 24) = *(void *)(v138 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v147 = *(void *)(v138 + 32);
      uint64_t v148 = *(void *)(v138 + 40);
      char v149 = *(unsigned char *)(v138 + 48);
      sub_21F770E44(v147, v148, v149);
      uint64_t v150 = *(void *)(v137 + 32);
      uint64_t v151 = *(void *)(v137 + 40);
      *(void *)(v137 + 32) = v147;
      *(void *)(v137 + 40) = v148;
      char v152 = *(unsigned char *)(v137 + 48);
      *(unsigned char *)(v137 + 48) = v149;
      sub_21F770E38(v150, v151, v152);
LABEL_64:
      *(_OWORD *)(v137 + 56) = *(_OWORD *)(v138 + 56);
      goto LABEL_67;
    }
    sub_21F7D2664(v137);
    *(_OWORD *)uint64_t v137 = *(_OWORD *)v138;
    long long v160 = *(_OWORD *)(v138 + 32);
    long long v159 = *(_OWORD *)(v138 + 48);
    long long v161 = *(_OWORD *)(v138 + 16);
    *(void *)(v137 + 64) = *(void *)(v138 + 64);
    *(_OWORD *)(v137 + 32) = v160;
    *(_OWORD *)(v137 + 48) = v159;
    *(_OWORD *)(v137 + 16) = v161;
  }
  else
  {
    if (v140)
    {
      uint64_t v153 = *(void *)v138;
      uint64_t v154 = *(void *)(v138 + 8);
      char v155 = *(unsigned char *)(v138 + 16);
      sub_21F7652C0(*(void *)v138, v154, v155);
      *(void *)uint64_t v137 = v153;
      *(void *)(v137 + 8) = v154;
      *(unsigned char *)(v137 + 16) = v155;
      *(void *)(v137 + 24) = *(void *)(v138 + 24);
      uint64_t v156 = *(void *)(v138 + 32);
      uint64_t v157 = *(void *)(v138 + 40);
      char v158 = *(unsigned char *)(v138 + 48);
      swift_bridgeObjectRetain();
      sub_21F770E44(v156, v157, v158);
      *(void *)(v137 + 32) = v156;
      *(void *)(v137 + 40) = v157;
      *(unsigned char *)(v137 + 48) = v158;
      goto LABEL_64;
    }
    *(_OWORD *)uint64_t v137 = *(_OWORD *)v138;
    long long v162 = *(_OWORD *)(v138 + 16);
    long long v163 = *(_OWORD *)(v138 + 32);
    long long v164 = *(_OWORD *)(v138 + 48);
    *(void *)(v137 + 64) = *(void *)(v138 + 64);
    *(_OWORD *)(v137 + 32) = v163;
    *(_OWORD *)(v137 + 48) = v164;
    *(_OWORD *)(v137 + 16) = v162;
  }
LABEL_67:
  uint64_t v165 = a3[22];
  v166 = (void *)(a1 + v165);
  v167 = (void *)((char *)a2 + v165);
  void *v166 = *v167;
  v166[1] = v167[1];
  v166[2] = v167[2];
  uint64_t v168 = a3[23];
  v169 = (void *)(a1 + v168);
  v170 = (void *)((char *)a2 + v168);
  void *v169 = *v170;
  v169[1] = v170[1];
  v169[2] = v170[2];
  uint64_t v171 = a3[24];
  uint64_t v172 = a1 + v171;
  uint64_t v173 = (uint64_t)a2 + v171;
  uint64_t v174 = *(void *)(a1 + v171 + 24);
  uint64_t v175 = *(void *)((char *)a2 + v171 + 24);
  if (v174)
  {
    if (v175)
    {
      uint64_t v176 = *(void *)v173;
      uint64_t v177 = *(void *)(v173 + 8);
      char v178 = *(unsigned char *)(v173 + 16);
      sub_21F7652C0(*(void *)v173, v177, v178);
      uint64_t v179 = *(void *)v172;
      uint64_t v180 = *(void *)(v172 + 8);
      char v181 = *(unsigned char *)(v172 + 16);
      *(void *)uint64_t v172 = v176;
      *(void *)(v172 + 8) = v177;
      *(unsigned char *)(v172 + 16) = v178;
      sub_21F7656A8(v179, v180, v181);
      *(void *)(v172 + 24) = *(void *)(v173 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21F7D26B8(v172);
      long long v185 = *(_OWORD *)(v173 + 16);
      *(_OWORD *)uint64_t v172 = *(_OWORD *)v173;
      *(_OWORD *)(v172 + 16) = v185;
    }
  }
  else if (v175)
  {
    uint64_t v182 = *(void *)v173;
    uint64_t v183 = *(void *)(v173 + 8);
    char v184 = *(unsigned char *)(v173 + 16);
    sub_21F7652C0(*(void *)v173, v183, v184);
    *(void *)uint64_t v172 = v182;
    *(void *)(v172 + 8) = v183;
    *(unsigned char *)(v172 + 16) = v184;
    *(void *)(v172 + 24) = *(void *)(v173 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v186 = *(_OWORD *)(v173 + 16);
    *(_OWORD *)uint64_t v172 = *(_OWORD *)v173;
    *(_OWORD *)(v172 + 16) = v186;
  }
  uint64_t v187 = a3[25];
  uint64_t v188 = a1 + v187;
  uint64_t v189 = (uint64_t)a2 + v187;
  uint64_t v190 = *(void *)(a1 + v187 + 24);
  uint64_t v191 = *(void *)((char *)a2 + v187 + 24);
  if (v190)
  {
    if (v191)
    {
      uint64_t v192 = *(void *)v189;
      uint64_t v193 = *(void *)(v189 + 8);
      char v194 = *(unsigned char *)(v189 + 16);
      sub_21F7652C0(*(void *)v189, v193, v194);
      uint64_t v195 = *(void *)v188;
      uint64_t v196 = *(void *)(v188 + 8);
      char v197 = *(unsigned char *)(v188 + 16);
      *(void *)uint64_t v188 = v192;
      *(void *)(v188 + 8) = v193;
      *(unsigned char *)(v188 + 16) = v194;
      sub_21F7656A8(v195, v196, v197);
      *(void *)(v188 + 24) = *(void *)(v189 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21F7D26B8(v188);
      long long v201 = *(_OWORD *)(v189 + 16);
      *(_OWORD *)uint64_t v188 = *(_OWORD *)v189;
      *(_OWORD *)(v188 + 16) = v201;
    }
  }
  else if (v191)
  {
    uint64_t v198 = *(void *)v189;
    uint64_t v199 = *(void *)(v189 + 8);
    char v200 = *(unsigned char *)(v189 + 16);
    sub_21F7652C0(*(void *)v189, v199, v200);
    *(void *)uint64_t v188 = v198;
    *(void *)(v188 + 8) = v199;
    *(unsigned char *)(v188 + 16) = v200;
    *(void *)(v188 + 24) = *(void *)(v189 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v202 = *(_OWORD *)(v189 + 16);
    *(_OWORD *)uint64_t v188 = *(_OWORD *)v189;
    *(_OWORD *)(v188 + 16) = v202;
  }
  uint64_t v203 = a3[26];
  v204 = (void *)(a1 + v203);
  v205 = (void *)((char *)a2 + v203);
  void *v204 = *v205;
  v204[1] = v205[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[27]) = *((unsigned char *)a2 + a3[27]);
  uint64_t v206 = a3[28];
  uint64_t v207 = a1 + v206;
  uint64_t v208 = (uint64_t)a2 + v206;
  uint64_t v209 = *(void *)(v208 + 24);
  if (*(void *)(a1 + v206 + 24))
  {
    if (v209)
    {
      sub_21F7D270C((uint64_t *)v207, (uint64_t *)v208);
    }
    else
    {
      sub_21F7D2934(v207);
      long long v210 = *(_OWORD *)(v208 + 16);
      *(_OWORD *)uint64_t v207 = *(_OWORD *)v208;
      *(_OWORD *)(v207 + 16) = v210;
    }
  }
  else if (v209)
  {
    *(void *)(v207 + 24) = v209;
    (**(void (***)(uint64_t, uint64_t))(v209 - 8))(v207, v208);
  }
  else
  {
    long long v211 = *(_OWORD *)(v208 + 16);
    *(_OWORD *)uint64_t v207 = *(_OWORD *)v208;
    *(_OWORD *)(v207 + 16) = v211;
  }
  return a1;
}

uint64_t sub_21F7D25BC(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F7D2610(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F7D2664(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F7D26B8(uint64_t a1)
{
  return a1;
}

uint64_t *sub_21F7D270C(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    int v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        double result = (uint64_t *)swift_release();
        *int v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *double result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *int v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t sub_21F7D2934(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F7D2988(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  long long v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  long long v8 = *(_OWORD *)(a2 + 88);
  long long v9 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
  *(_OWORD *)(a1 + 104) = v9;
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v11 = *(_OWORD *)(a2 + 192);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  uint64_t v12 = a3[11];
  long long v13 = (void *)(a1 + v12);
  int v14 = (const void *)(a2 + v12);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  uint64_t v15 = sub_21FA24C90();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_21F76CA40(&qword_26AD47C20);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v18 = a3[12];
  uint64_t v19 = a3[13];
  uint64_t v20 = a1 + v18;
  uint64_t v21 = a2 + v18;
  *(void *)uint64_t v20 = *(void *)v21;
  uint64_t v22 = *(void *)(a2 + v19);
  *(unsigned char *)(v20 + 8) = *(unsigned char *)(v21 + 8);
  *(void *)(a1 + v19) = v22;
  uint64_t v23 = a3[14];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (const void *)(a2 + v23);
  uint64_t v26 = sub_21FA25910();
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = sub_21F76CA40(&qword_26AD4A3B8);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v27 + 32))(v24, v25, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  uint64_t v29 = a3[15];
  uint64_t v30 = a3[16];
  uint64_t v31 = a1 + v29;
  uint64_t v32 = a2 + v29;
  *(void *)uint64_t v31 = *(void *)v32;
  *(_WORD *)(v31 + 8) = *(_WORD *)(v32 + 8);
  *(void *)(a1 + v30) = *(void *)(a2 + v30);
  uint64_t v33 = a3[18];
  *(void *)(a1 + a3[17]) = *(void *)(a2 + a3[17]);
  uint64_t v34 = a1 + v33;
  uint64_t v35 = a2 + v33;
  *(void *)(v34 + 64) = *(void *)(v35 + 64);
  long long v36 = *(_OWORD *)(v35 + 48);
  *(_OWORD *)(v34 + 32) = *(_OWORD *)(v35 + 32);
  *(_OWORD *)(v34 + 48) = v36;
  long long v37 = *(_OWORD *)(v35 + 16);
  *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
  *(_OWORD *)(v34 + 16) = v37;
  uint64_t v38 = a3[19];
  uint64_t v39 = a3[20];
  uint64_t v40 = a1 + v38;
  uint64_t v41 = a2 + v38;
  *(void *)(v40 + 64) = *(void *)(v41 + 64);
  long long v42 = *(_OWORD *)(v41 + 48);
  *(_OWORD *)(v40 + 32) = *(_OWORD *)(v41 + 32);
  *(_OWORD *)(v40 + 48) = v42;
  long long v43 = *(_OWORD *)(v41 + 16);
  *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
  *(_OWORD *)(v40 + 16) = v43;
  uint64_t v44 = a1 + v39;
  uint64_t v45 = a2 + v39;
  *(void *)(v44 + 64) = *(void *)(v45 + 64);
  long long v46 = *(_OWORD *)(v45 + 48);
  *(_OWORD *)(v44 + 32) = *(_OWORD *)(v45 + 32);
  *(_OWORD *)(v44 + 48) = v46;
  long long v47 = *(_OWORD *)(v45 + 16);
  *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
  *(_OWORD *)(v44 + 16) = v47;
  uint64_t v48 = a3[21];
  uint64_t v49 = a3[22];
  uint64_t v50 = a1 + v48;
  uint64_t v51 = (long long *)(a2 + v48);
  long long v52 = *v51;
  long long v53 = v51[1];
  long long v54 = v51[2];
  long long v55 = v51[3];
  *(void *)(v50 + 64) = *((void *)v51 + 8);
  *(_OWORD *)(v50 + 32) = v54;
  *(_OWORD *)(v50 + 48) = v55;
  *(_OWORD *)uint64_t v50 = v52;
  *(_OWORD *)(v50 + 16) = v53;
  uint64_t v56 = a1 + v49;
  uint64_t v57 = a2 + v49;
  *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
  *(void *)(v56 + 16) = *(void *)(v57 + 16);
  uint64_t v58 = a3[23];
  uint64_t v59 = a3[24];
  uint64_t v60 = a1 + v58;
  uint64_t v61 = a2 + v58;
  *(_OWORD *)uint64_t v60 = *(_OWORD *)v61;
  *(void *)(v60 + 16) = *(void *)(v61 + 16);
  char v62 = (_OWORD *)(a1 + v59);
  uint64_t v63 = (_OWORD *)(a2 + v59);
  long long v64 = v63[1];
  *char v62 = *v63;
  v62[1] = v64;
  uint64_t v65 = a3[25];
  uint64_t v66 = a3[26];
  uint64_t v67 = (_OWORD *)(a1 + v65);
  char v68 = (_OWORD *)(a2 + v65);
  long long v69 = v68[1];
  _OWORD *v67 = *v68;
  v67[1] = v69;
  *(_OWORD *)(a1 + v66) = *(_OWORD *)(a2 + v66);
  uint64_t v70 = a3[28];
  *(unsigned char *)(a1 + a3[27]) = *(unsigned char *)(a2 + a3[27]);
  char v71 = (_OWORD *)(a1 + v70);
  long long v72 = (_OWORD *)(a2 + v70);
  long long v73 = v72[1];
  *char v71 = *v72;
  v71[1] = v73;
  return a1;
}

uint64_t sub_21F7D2D44(uint64_t a1, uint64_t a2, int *a3)
{
  if (*(unsigned __int8 *)(a1 + 40) == 255) {
    goto LABEL_7;
  }
  if (*(unsigned __int8 *)(a2 + 40) == 255 || a1 != a2)
  {
    sub_21F7D25BC(a1);
LABEL_7:
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  if (*(unsigned __int8 *)(a1 + 128) == 255)
  {
LABEL_12:
    long long v9 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v9;
    *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
    goto LABEL_13;
  }
  if (*(unsigned __int8 *)(a2 + 128) == 255 || a1 != a2)
  {
    sub_21F7D2610(a1 + 88);
    goto LABEL_12;
  }
LABEL_13:
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v11 = *(_OWORD *)(a2 + 192);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  uint64_t v12 = a3[11];
  long long v13 = (void *)(a1 + v12);
  int v14 = (void *)(a2 + v12);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  uint64_t v15 = sub_21FA24C90();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
LABEL_18:
    uint64_t v20 = sub_21F76CA40(&qword_26AD47C20);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v13, v14, v15);
LABEL_19:
  uint64_t v21 = a3[12];
  uint64_t v22 = a3[13];
  uint64_t v23 = a1 + v21;
  uint64_t v24 = a2 + v21;
  *(void *)uint64_t v23 = *(void *)v24;
  uint64_t v25 = *(void *)(a2 + v22);
  *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
  *(void *)(a1 + v22) = v25;
  uint64_t v26 = a3[14];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (void *)(a2 + v26);
  uint64_t v29 = sub_21FA25910();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v30 + 48);
  int v32 = v31(v27, 1, v29);
  int v33 = v31(v28, 1, v29);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, void *, uint64_t))(v30 + 32))(v27, v28, v29);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v33)
  {
    (*(void (**)(void *, uint64_t))(v30 + 8))(v27, v29);
LABEL_24:
    uint64_t v34 = sub_21F76CA40(&qword_26AD4A3B8);
    memcpy(v27, v28, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(void *, void *, uint64_t))(v30 + 40))(v27, v28, v29);
LABEL_25:
  uint64_t v35 = a3[15];
  uint64_t v36 = a1 + v35;
  uint64_t v37 = a2 + v35;
  *(void *)(a1 + v35) = *(void *)(a2 + v35);
  swift_release();
  *(unsigned char *)(v36 + 8) = *(unsigned char *)(v37 + 8);
  *(unsigned char *)(v36 + 9) = *(unsigned char *)(v37 + 9);
  uint64_t v38 = a3[17];
  *(void *)(a1 + a3[16]) = *(void *)(a2 + a3[16]);
  *(void *)(a1 + v38) = *(void *)(a2 + v38);
  uint64_t v39 = a3[18];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  if (*(void *)(a1 + v39 + 24))
  {
    if (*(void *)(v41 + 24))
    {
      char v42 = *(unsigned char *)(v41 + 16);
      uint64_t v43 = *(void *)v40;
      uint64_t v44 = *(void *)(v40 + 8);
      char v45 = *(unsigned char *)(v40 + 16);
      *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
      *(unsigned char *)(v40 + 16) = v42;
      sub_21F7656A8(v43, v44, v45);
      *(void *)(v40 + 24) = *(void *)(v41 + 24);
      swift_bridgeObjectRelease();
      char v46 = *(unsigned char *)(v41 + 48);
      uint64_t v47 = *(void *)(v40 + 32);
      uint64_t v48 = *(void *)(v40 + 40);
      *(_OWORD *)(v40 + 32) = *(_OWORD *)(v41 + 32);
      char v49 = *(unsigned char *)(v40 + 48);
      *(unsigned char *)(v40 + 48) = v46;
      sub_21F770E38(v47, v48, v49);
      *(_OWORD *)(v40 + 56) = *(_OWORD *)(v41 + 56);
      goto LABEL_30;
    }
    sub_21F7D2664(v40);
  }
  long long v50 = *(_OWORD *)(v41 + 48);
  *(_OWORD *)(v40 + 32) = *(_OWORD *)(v41 + 32);
  *(_OWORD *)(v40 + 48) = v50;
  *(void *)(v40 + 64) = *(void *)(v41 + 64);
  long long v51 = *(_OWORD *)(v41 + 16);
  *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
  *(_OWORD *)(v40 + 16) = v51;
LABEL_30:
  uint64_t v52 = a3[19];
  uint64_t v53 = a1 + v52;
  uint64_t v54 = a2 + v52;
  if (*(void *)(a1 + v52 + 24))
  {
    if (*(void *)(v54 + 24))
    {
      char v55 = *(unsigned char *)(v54 + 16);
      uint64_t v56 = *(void *)v53;
      uint64_t v57 = *(void *)(v53 + 8);
      char v58 = *(unsigned char *)(v53 + 16);
      *(_OWORD *)uint64_t v53 = *(_OWORD *)v54;
      *(unsigned char *)(v53 + 16) = v55;
      sub_21F7656A8(v56, v57, v58);
      *(void *)(v53 + 24) = *(void *)(v54 + 24);
      swift_bridgeObjectRelease();
      char v59 = *(unsigned char *)(v54 + 48);
      uint64_t v60 = *(void *)(v53 + 32);
      uint64_t v61 = *(void *)(v53 + 40);
      *(_OWORD *)(v53 + 32) = *(_OWORD *)(v54 + 32);
      char v62 = *(unsigned char *)(v53 + 48);
      *(unsigned char *)(v53 + 48) = v59;
      sub_21F770E38(v60, v61, v62);
      *(_OWORD *)(v53 + 56) = *(_OWORD *)(v54 + 56);
      goto LABEL_35;
    }
    sub_21F7D2664(v53);
  }
  long long v63 = *(_OWORD *)(v54 + 48);
  *(_OWORD *)(v53 + 32) = *(_OWORD *)(v54 + 32);
  *(_OWORD *)(v53 + 48) = v63;
  *(void *)(v53 + 64) = *(void *)(v54 + 64);
  long long v64 = *(_OWORD *)(v54 + 16);
  *(_OWORD *)uint64_t v53 = *(_OWORD *)v54;
  *(_OWORD *)(v53 + 16) = v64;
LABEL_35:
  uint64_t v65 = a3[20];
  uint64_t v66 = a1 + v65;
  uint64_t v67 = a2 + v65;
  if (*(void *)(a1 + v65 + 24))
  {
    if (*(void *)(v67 + 24))
    {
      char v68 = *(unsigned char *)(v67 + 16);
      uint64_t v69 = *(void *)v66;
      uint64_t v70 = *(void *)(v66 + 8);
      char v71 = *(unsigned char *)(v66 + 16);
      *(_OWORD *)uint64_t v66 = *(_OWORD *)v67;
      *(unsigned char *)(v66 + 16) = v68;
      sub_21F7656A8(v69, v70, v71);
      *(void *)(v66 + 24) = *(void *)(v67 + 24);
      swift_bridgeObjectRelease();
      char v72 = *(unsigned char *)(v67 + 48);
      uint64_t v73 = *(void *)(v66 + 32);
      uint64_t v74 = *(void *)(v66 + 40);
      *(_OWORD *)(v66 + 32) = *(_OWORD *)(v67 + 32);
      char v75 = *(unsigned char *)(v66 + 48);
      *(unsigned char *)(v66 + 48) = v72;
      sub_21F770E38(v73, v74, v75);
      *(_OWORD *)(v66 + 56) = *(_OWORD *)(v67 + 56);
      goto LABEL_40;
    }
    sub_21F7D2664(v66);
  }
  long long v76 = *(_OWORD *)(v67 + 48);
  *(_OWORD *)(v66 + 32) = *(_OWORD *)(v67 + 32);
  *(_OWORD *)(v66 + 48) = v76;
  *(void *)(v66 + 64) = *(void *)(v67 + 64);
  long long v77 = *(_OWORD *)(v67 + 16);
  *(_OWORD *)uint64_t v66 = *(_OWORD *)v67;
  *(_OWORD *)(v66 + 16) = v77;
LABEL_40:
  uint64_t v78 = a3[21];
  uint64_t v79 = a1 + v78;
  uint64_t v80 = a2 + v78;
  if (*(void *)(a1 + v78 + 24))
  {
    if (*(void *)(v80 + 24))
    {
      char v81 = *(unsigned char *)(v80 + 16);
      uint64_t v82 = *(void *)v79;
      uint64_t v83 = *(void *)(v79 + 8);
      char v84 = *(unsigned char *)(v79 + 16);
      *(_OWORD *)uint64_t v79 = *(_OWORD *)v80;
      *(unsigned char *)(v79 + 16) = v81;
      sub_21F7656A8(v82, v83, v84);
      *(void *)(v79 + 24) = *(void *)(v80 + 24);
      swift_bridgeObjectRelease();
      char v85 = *(unsigned char *)(v80 + 48);
      uint64_t v86 = *(void *)(v79 + 32);
      uint64_t v87 = *(void *)(v79 + 40);
      *(_OWORD *)(v79 + 32) = *(_OWORD *)(v80 + 32);
      char v88 = *(unsigned char *)(v79 + 48);
      *(unsigned char *)(v79 + 48) = v85;
      sub_21F770E38(v86, v87, v88);
      *(_OWORD *)(v79 + 56) = *(_OWORD *)(v80 + 56);
      goto LABEL_45;
    }
    sub_21F7D2664(v79);
  }
  long long v89 = *(_OWORD *)(v80 + 48);
  *(_OWORD *)(v79 + 32) = *(_OWORD *)(v80 + 32);
  *(_OWORD *)(v79 + 48) = v89;
  *(void *)(v79 + 64) = *(void *)(v80 + 64);
  long long v90 = *(_OWORD *)(v80 + 16);
  *(_OWORD *)uint64_t v79 = *(_OWORD *)v80;
  *(_OWORD *)(v79 + 16) = v90;
LABEL_45:
  uint64_t v91 = a3[22];
  uint64_t v92 = a3[23];
  uint64_t v93 = a1 + v91;
  uint64_t v94 = a2 + v91;
  *(_OWORD *)uint64_t v93 = *(_OWORD *)v94;
  *(void *)(v93 + 16) = *(void *)(v94 + 16);
  uint64_t v95 = a1 + v92;
  uint64_t v96 = a2 + v92;
  *(_OWORD *)uint64_t v95 = *(_OWORD *)v96;
  *(void *)(v95 + 16) = *(void *)(v96 + 16);
  uint64_t v97 = a3[24];
  uint64_t v98 = a1 + v97;
  uint64_t v99 = a2 + v97;
  if (*(void *)(a1 + v97 + 24))
  {
    if (*(void *)(v99 + 24))
    {
      char v100 = *(unsigned char *)(v99 + 16);
      uint64_t v101 = *(void *)v98;
      uint64_t v102 = *(void *)(v98 + 8);
      char v103 = *(unsigned char *)(v98 + 16);
      *(_OWORD *)uint64_t v98 = *(_OWORD *)v99;
      *(unsigned char *)(v98 + 16) = v100;
      sub_21F7656A8(v101, v102, v103);
      *(void *)(v98 + 24) = *(void *)(v99 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_50;
    }
    sub_21F7D26B8(v98);
  }
  long long v104 = *(_OWORD *)(v99 + 16);
  *(_OWORD *)uint64_t v98 = *(_OWORD *)v99;
  *(_OWORD *)(v98 + 16) = v104;
LABEL_50:
  uint64_t v105 = a3[25];
  uint64_t v106 = a1 + v105;
  uint64_t v107 = a2 + v105;
  if (*(void *)(a1 + v105 + 24))
  {
    if (*(void *)(v107 + 24))
    {
      char v108 = *(unsigned char *)(v107 + 16);
      uint64_t v109 = *(void *)v106;
      uint64_t v110 = *(void *)(v106 + 8);
      char v111 = *(unsigned char *)(v106 + 16);
      *(_OWORD *)uint64_t v106 = *(_OWORD *)v107;
      *(unsigned char *)(v106 + 16) = v108;
      sub_21F7656A8(v109, v110, v111);
      *(void *)(v106 + 24) = *(void *)(v107 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_55;
    }
    sub_21F7D26B8(v106);
  }
  long long v112 = *(_OWORD *)(v107 + 16);
  *(_OWORD *)uint64_t v106 = *(_OWORD *)v107;
  *(_OWORD *)(v106 + 16) = v112;
LABEL_55:
  uint64_t v113 = a3[26];
  char v114 = (void *)(a1 + v113);
  uint64_t v115 = (uint64_t *)(a2 + v113);
  uint64_t v117 = *v115;
  uint64_t v116 = v115[1];
  *char v114 = v117;
  v114[1] = v116;
  swift_bridgeObjectRelease();
  uint64_t v118 = a3[28];
  *(unsigned char *)(a1 + a3[27]) = *(unsigned char *)(a2 + a3[27]);
  uint64_t v119 = (_OWORD *)(a1 + v118);
  uint64_t v120 = a2 + v118;
  if (*(void *)(a1 + v118 + 24))
  {
    if (*(void *)(v120 + 24)) {
      _s6Charts15AnyChartContentVwxx_0(a1 + v118);
    }
    else {
      sub_21F7D2934(a1 + v118);
    }
  }
  long long v121 = *(_OWORD *)(v120 + 16);
  *uint64_t v119 = *(_OWORD *)v120;
  v119[1] = v121;
  return a1;
}

uint64_t sub_21F7D34B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F7D34CC);
}

uint64_t sub_21F7D34CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 72);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = sub_21F76CA40(&qword_26AD47C20);
    uint64_t v10 = *(void *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == a2)
    {
      uint64_t v11 = v9;
      uint64_t v12 = a1 + *(int *)(a3 + 44);
      long long v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
      return v13(v12, a2, v11);
    }
    else
    {
      uint64_t v14 = sub_21F76CA40(&qword_26AD4A3B8);
      uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
      uint64_t v16 = v14;
      uint64_t v17 = a1 + *(int *)(a3 + 56);
      return v15(v17, a2, v16);
    }
  }
}

uint64_t sub_21F7D360C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F7D3620);
}

uint64_t sub_21F7D3620(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 72) = a2;
  }
  else
  {
    uint64_t v8 = sub_21F76CA40(&qword_26AD47C20);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 44);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_21F76CA40(&qword_26AD4A3B8);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 56);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

unint64_t sub_21F7D3758()
{
  unint64_t result = qword_267EE74C0;
  if (!qword_267EE74C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE74C0);
  }
  return result;
}

void sub_21F7D37AC()
{
  qword_26AD52220 = MEMORY[0x263F8EE80];
}

uint64_t sub_21F7D37C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = 0;
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  while (1)
  {
    uint64_t v20 = v3;
    uint64_t v21 = v2;
    uint64_t v4 = *(void *)(a1 + v3 + 72);
    uint64_t v31 = *(uint64_t *)(a1 + v3 + 80);
    int v5 = *(unsigned __int8 *)(a1 + v3 + 88);
    char v23 = *(unsigned char *)(a1 + v3 + 88);
    char v24 = *(unsigned char *)(a1 + v3 + 56);
    int v29 = *(unsigned __int8 *)(a1 + v3 + 32);
    uint64_t v6 = *(void *)(a2 + v3 + 40);
    uint64_t v7 = *(void *)(a2 + v3 + 48);
    char v8 = *(unsigned char *)(a2 + v3 + 56);
    uint64_t v32 = *(uint64_t *)(a2 + v3 + 72);
    uint64_t v30 = *(uint64_t *)(a2 + v3 + 80);
    int v27 = *(char *)(a2 + v3 + 88);
    int v28 = *(unsigned __int8 *)(a2 + v3 + 32);
    uint64_t v9 = *(void *)(a1 + v3 + 40);
    uint64_t v10 = *(void *)(a1 + v3 + 48);
    sub_21F7652C0(v9, v10, v24);
    swift_bridgeObjectRetain();
    double v22 = *(double *)&v4;
    sub_21F770E44(v4, v31, v5);
    sub_21F7652C0(v6, v7, v8);
    swift_bridgeObjectRetain();
    char v11 = v27;
    sub_21F770E44(v32, v30, v27);
    uint64_t v26 = v7;
    char v25 = v8;
    if (v29 != v28)
    {
      uint64_t v16 = *(void *)&v22;
      uint64_t v12 = v9;
      uint64_t v13 = v10;
      char v15 = v5;
      char v14 = v24;
      goto LABEL_39;
    }
    uint64_t v12 = v9;
    uint64_t v13 = v10;
    char v14 = v24;
    if ((sub_21FA25320() & 1) == 0)
    {
      uint64_t v16 = *(void *)&v22;
      char v15 = v5;
      goto LABEL_39;
    }
    char v15 = v5;
    if ((char)v5 < 0)
    {
      uint64_t v16 = *(void *)&v22;
      if ((v27 & 0x80000000) == 0) {
        goto LABEL_39;
      }
      if (v23)
      {
        if ((v27 & 1) == 0) {
          goto LABEL_39;
        }
      }
      else if (v27)
      {
        goto LABEL_39;
      }
      if (v22 != *(double *)&v32 || *(double *)&v31 != *(double *)&v30) {
        goto LABEL_39;
      }
      goto LABEL_6;
    }
    if (v27 < 0) {
      goto LABEL_38;
    }
    if (!v5) {
      break;
    }
    if (v5 == 1)
    {
      uint64_t v16 = *(void *)&v22;
      if (v27 != 1 || v22 != *(double *)&v32)
      {
        char v15 = 1;
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v16 = *(void *)&v22;
      if (v27 != 2)
      {
        char v15 = 2;
        goto LABEL_39;
      }
      if ((*(void *)&v22 != v32 || v31 != v30) && (sub_21FA268D0() & 1) == 0)
      {
        char v15 = 2;
        char v11 = 2;
        goto LABEL_39;
      }
    }
LABEL_6:
    sub_21F7656A8(v6, v26, v25);
    swift_bridgeObjectRelease();
    sub_21F770E38(v32, v30, v27);
    sub_21F7656A8(v12, v13, v24);
    swift_bridgeObjectRelease();
    sub_21F770E38(v16, v31, v23);
    uint64_t v3 = v20 + 80;
    uint64_t v2 = v21 - 1;
    a1 = v18;
    a2 = v19;
    if (v21 == 1) {
      return 1;
    }
  }
  if (!v27)
  {
    uint64_t v16 = *(void *)&v22;
    if (v22 != *(double *)&v32)
    {
      char v15 = 0;
      goto LABEL_39;
    }
    goto LABEL_6;
  }
  char v15 = 0;
LABEL_38:
  uint64_t v16 = *(void *)&v22;
LABEL_39:
  sub_21F7656A8(v6, v26, v25);
  swift_bridgeObjectRelease();
  sub_21F770E38(v32, v30, v11);
  sub_21F7656A8(v12, v13, v14);
  swift_bridgeObjectRelease();
  sub_21F770E38(v16, v31, v15);
  return 0;
}

uint64_t sub_21F7D3B08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21FA241F0();
  MEMORY[0x270FA5388](v4);
  __n128 v8 = MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v29 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v24 = 1;
    }
    else
    {
      uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
      char v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
      uint64_t v13 = v6 + 16;
      uint64_t v32 = v7;
      int v33 = v14;
      uint64_t v15 = (v12 + 32) & ~v12;
      uint64_t v16 = *(void *)(v13 + 56);
      uint64_t v34 = v13;
      uint64_t v30 = v16;
      uint64_t v31 = (void (**)(uint64_t, uint64_t))(v13 - 8);
      uint64_t v17 = v11 - 1;
      uint64_t v18 = v7;
      do
      {
        uint64_t v19 = a1;
        uint64_t v20 = v10;
        uint64_t v21 = v10;
        double v22 = v33;
        ((void (*)(char *, uint64_t, uint64_t, __n128))v33)(v20, a1 + v15, v4, v8);
        uint64_t v23 = a2;
        v22(v18, a2 + v15, v4);
        uint64_t v10 = v21;
        sub_21F7E1444(&qword_267EE7510);
        char v24 = sub_21FA25CE0();
        char v25 = *v31;
        (*v31)(v18, v4);
        v25((uint64_t)v21, v4);
        BOOL v27 = v17-- != 0;
        if ((v24 & 1) == 0) {
          break;
        }
        v15 += v30;
        a2 = v23;
        a1 = v19;
      }
      while (v27);
    }
  }
  else
  {
    char v24 = 0;
  }
  return v24 & 1;
}

uint64_t sub_21F7D3D14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = 0;
    do
    {
      if (*(unsigned char *)(a1 + v3 + 40))
      {
        if (!*(unsigned char *)(a2 + v3 + 40)) {
          return 0;
        }
      }
      else
      {
        if (*(void *)(a1 + v3 + 32) == *(void *)(a2 + v3 + 32)) {
          char v5 = *(unsigned char *)(a2 + v3 + 40);
        }
        else {
          char v5 = 1;
        }
        if (v5) {
          return 0;
        }
      }
      if (*(unsigned char *)(a1 + v3 + 56))
      {
        if (!*(unsigned char *)(a2 + v3 + 56)) {
          return 0;
        }
      }
      else
      {
        if (*(void *)(a1 + v3 + 48) == *(void *)(a2 + v3 + 48)) {
          char v6 = *(unsigned char *)(a2 + v3 + 56);
        }
        else {
          char v6 = 1;
        }
        if (v6) {
          return 0;
        }
      }
      if (*(unsigned char *)(a1 + v3 + 72))
      {
        if (!*(unsigned char *)(a2 + v3 + 72)) {
          return 0;
        }
      }
      else
      {
        if (*(void *)(a1 + v3 + 64) == *(void *)(a2 + v3 + 64)) {
          char v7 = *(unsigned char *)(a2 + v3 + 72);
        }
        else {
          char v7 = 1;
        }
        if (v7) {
          return 0;
        }
      }
      if (*(unsigned char *)(a1 + v3 + 88))
      {
        if (!*(unsigned char *)(a2 + v3 + 88)) {
          return 0;
        }
      }
      else
      {
        if (*(void *)(a1 + v3 + 80) == *(void *)(a2 + v3 + 80)) {
          char v8 = *(unsigned char *)(a2 + v3 + 88);
        }
        else {
          char v8 = 1;
        }
        if (v8) {
          return 0;
        }
      }
      if (*(unsigned char *)(a1 + v3 + 104))
      {
        if (!*(unsigned char *)(a2 + v3 + 104)) {
          return 0;
        }
      }
      else
      {
        if (*(void *)(a1 + v3 + 96) == *(void *)(a2 + v3 + 96)) {
          char v4 = *(unsigned char *)(a2 + v3 + 104);
        }
        else {
          char v4 = 1;
        }
        if (v4) {
          return 0;
        }
      }
      v3 += 80;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_21F7D3E38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = 0;
    do
    {
      int v5 = *(unsigned __int8 *)(a1 + v3 + 32);
      uint64_t v6 = *(void *)(a1 + v3 + 72);
      int v7 = *(unsigned __int8 *)(a2 + v3 + 32);
      uint64_t v8 = *(void *)(a2 + v3 + 72);
      if (v5 == 9)
      {
        if (v7 != 9) {
          return 0;
        }
      }
      else if (v7 == 9 || v5 != v7)
      {
        return 0;
      }
      if (*(unsigned char *)(a1 + v3 + 48))
      {
        if (!*(unsigned char *)(a2 + v3 + 48)) {
          return 0;
        }
      }
      else
      {
        if (*(void *)(a1 + v3 + 40) == *(void *)(a2 + v3 + 40)) {
          char v10 = *(unsigned char *)(a2 + v3 + 48);
        }
        else {
          char v10 = 1;
        }
        if (v10) {
          return 0;
        }
      }
      if (*(unsigned char *)(a1 + v3 + 64))
      {
        if (v6 == v8) {
          char v4 = *(unsigned char *)(a2 + v3 + 64);
        }
        else {
          char v4 = 0;
        }
        if ((v4 & 1) == 0) {
          return 0;
        }
      }
      else
      {
        uint64_t v11 = 0;
        if ((*(unsigned char *)(a2 + v3 + 64) & 1) != 0 || *(void *)(a1 + v3 + 56) != *(void *)(a2 + v3 + 56) || v6 != v8) {
          return v11;
        }
      }
      v3 += 48;
      --v2;
    }
    while (v2);
  }
  return 1;
}

BOOL sub_21F7D3F18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32)) {
    return 0;
  }
  uint64_t v3 = (double *)(a1 + 40);
  char v4 = (double *)(a2 + 40);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    double v7 = *v3++;
    double v8 = v7;
    double v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

uint64_t sub_21F7D3F84(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (char v6 = sub_21FA268D0(), result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    double v9 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      BOOL v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (sub_21FA268D0() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_21F7D404C(uint64_t a1, uint64_t a2)
{
  return sub_21F7D4254(a1, a2, (void (*)(uint64_t, _OWORD *))sub_21F7DF204, (void (*)(_OWORD *))sub_21F7DF2B4, &qword_267EE74D0);
}

BOOL sub_21F7D4080(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AxisMarksConfiguration() - 8;
  MEMORY[0x270FA5388](v4);
  char v6 = (unsigned __int8 *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  char v10 = (unsigned __int8 *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      return 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_21F7E1488(a1 + v12, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for AxisMarksConfiguration);
        sub_21F7E1488(a2 + v12, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for AxisMarksConfiguration);
        BOOL v15 = sub_21F7AD4B0(v10, v6);
        sub_21F771B48((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for AxisMarksConfiguration);
        sub_21F771B48((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for AxisMarksConfiguration);
        BOOL v17 = v14-- != 0;
        if (!v15) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    return 0;
  }
  return v15;
}

uint64_t sub_21F7D4220(uint64_t a1, uint64_t a2)
{
  return sub_21F7D4254(a1, a2, (void (*)(uint64_t, _OWORD *))sub_21F7DF308, (void (*)(_OWORD *))sub_21F7DF364, &qword_267EE74E0);
}

uint64_t sub_21F7D4254(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, _OWORD *), void (*a4)(_OWORD *), uint64_t *a5)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v5 || a1 == a2) {
    return 1;
  }
  uint64_t v9 = a1 + 32;
  uint64_t v10 = a2 + 32;
  a3(a1 + 32, v23);
  while (1)
  {
    a3(v10, v22);
    a3((uint64_t)v23, v18);
    a3((uint64_t)v22, v19);
    if (v18[40]) {
      break;
    }
    a3((uint64_t)v18, v17);
    if (v21) {
      goto LABEL_16;
    }
    uint64_t v12 = *(void *)&v17[0];
    uint64_t v13 = *(void *)&v19[0];
    a4(v18);
    if (v12 != v13) {
      goto LABEL_17;
    }
LABEL_5:
    a4(v22);
    a4(v23);
    v10 += 48;
    v9 += 48;
    if (!--v5) {
      return 1;
    }
    a3(v9, v23);
  }
  a3((uint64_t)v18, v17);
  if (v21)
  {
    v15[0] = v19[0];
    v15[1] = v19[1];
    uint64_t v16 = v20;
    char v11 = MEMORY[0x223C558B0](v17, v15);
    sub_21F7DF260((uint64_t)v15);
    sub_21F7DF260((uint64_t)v17);
    a4(v18);
    if ((v11 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_5;
  }
  sub_21F7DF260((uint64_t)v17);
LABEL_16:
  sub_21F76CA84((uint64_t)v18, a5);
LABEL_17:
  a4(v22);
  a4(v23);
  return 0;
}

uint64_t sub_21F7D4410(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  long long v5 = *(_OWORD *)(a1 + 48);
  v21[0] = *(_OWORD *)(a1 + 32);
  v21[1] = v5;
  uint64_t v22 = *(void *)(a1 + 64);
  long long v6 = *(_OWORD *)(a2 + 48);
  v23[0] = *(_OWORD *)(a2 + 32);
  v23[1] = v6;
  uint64_t v24 = *(void *)(a2 + 64);
  sub_21F7C1A10((uint64_t)v21);
  sub_21F7C1A10((uint64_t)v23);
  char v7 = MEMORY[0x223C53930](v21, v23);
  sub_21F7E0D30((uint64_t)v23);
  sub_21F7E0D30((uint64_t)v21);
  if ((v7 & 1) == 0) {
    return 0;
  }
  uint64_t v8 = a1 + 72;
  uint64_t v9 = a2 + 72;
  do
  {
    BOOL v10 = --v2 == 0;
    if (!v2) {
      break;
    }
    uint64_t v11 = v8 + 40;
    uint64_t v12 = v9 + 40;
    long long v13 = *(_OWORD *)(v8 + 16);
    v17[0] = *(_OWORD *)v8;
    v17[1] = v13;
    uint64_t v18 = *(void *)(v8 + 32);
    long long v14 = *(_OWORD *)(v9 + 16);
    v19[0] = *(_OWORD *)v9;
    v19[1] = v14;
    uint64_t v20 = *(void *)(v9 + 32);
    sub_21F7C1A10((uint64_t)v17);
    sub_21F7C1A10((uint64_t)v19);
    char v15 = MEMORY[0x223C53930](v17, v19);
    sub_21F7E0D30((uint64_t)v19);
    sub_21F7E0D30((uint64_t)v17);
    uint64_t v9 = v12;
    uint64_t v8 = v11;
  }
  while ((v15 & 1) != 0);
  return v10;
}

uint64_t sub_21F7D4550(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = 0;
  uint64_t v4 = a1 + 32;
  uint64_t v5 = a2 + 32;
  while (1)
  {
    long long v6 = (uint64_t *)(v4 + 16 * v3);
    uint64_t v7 = *v6;
    int v8 = *((unsigned __int8 *)v6 + 8);
    uint64_t v9 = (uint64_t *)(v5 + 16 * v3);
    uint64_t v10 = *v9;
    int v11 = *((unsigned __int8 *)v9 + 8);
    if (!v8)
    {
      if (v11) {
        return 0;
      }
      uint64_t v20 = *(void *)(v7 + 16);
      if (v20 != *(void *)(v10 + 16)) {
        return 0;
      }
      if (v20) {
        BOOL v21 = v7 == v10;
      }
      else {
        BOOL v21 = 1;
      }
      if (!v21)
      {
        if (*(double *)(v7 + 32) != *(double *)(v10 + 32)) {
          return 0;
        }
        if (v20 != 1)
        {
          if (*(double *)(v7 + 40) != *(double *)(v10 + 40)) {
            return 0;
          }
          uint64_t v22 = (double *)(v7 + 48);
          uint64_t v23 = (double *)(v10 + 48);
          for (uint64_t i = v20 - 2; i; --i)
          {
            double v25 = *v22++;
            double v26 = v25;
            double v27 = *v23++;
            if (v26 != v27) {
              return 0;
            }
          }
        }
      }
      goto LABEL_5;
    }
    if (v8 == 1)
    {
      if (v11 != 1) {
        return 0;
      }
      uint64_t v12 = *(void *)(v7 + 16);
      if (v12 != *(void *)(v10 + 16)) {
        return 0;
      }
      if (v12) {
        BOOL v13 = v7 == v10;
      }
      else {
        BOOL v13 = 1;
      }
      if (!v13)
      {
        if (*(double *)(v7 + 32) != *(double *)(v10 + 32)) {
          return 0;
        }
        if (v12 != 1)
        {
          if (*(double *)(v7 + 40) != *(double *)(v10 + 40)) {
            return 0;
          }
          long long v14 = (double *)(v7 + 48);
          char v15 = (double *)(v10 + 48);
          for (uint64_t j = v12 - 2; j; --j)
          {
            double v17 = *v14++;
            double v18 = v17;
            double v19 = *v15++;
            if (v18 != v19) {
              return 0;
            }
          }
        }
      }
      goto LABEL_5;
    }
    if (v11 != 2) {
      return 0;
    }
    uint64_t v28 = *(void *)(v7 + 16);
    if (v28 != *(void *)(v10 + 16)) {
      return 0;
    }
    if (v28 && v7 != v10)
    {
      BOOL v30 = *(void *)(v7 + 32) == *(void *)(v10 + 32) && *(void *)(v7 + 40) == *(void *)(v10 + 40);
      if (!v30 && (sub_21FA268D0() & 1) == 0) {
        return 0;
      }
      if (v28 != 1)
      {
        BOOL v31 = *(void *)(v7 + 48) == *(void *)(v10 + 48) && *(void *)(v7 + 56) == *(void *)(v10 + 56);
        if (!v31 && (sub_21FA268D0() & 1) == 0) {
          return 0;
        }
        uint64_t v32 = v28 - 2;
        if (v32) {
          break;
        }
      }
    }
LABEL_5:
    if (++v3 == v2) {
      return 1;
    }
  }
  int v33 = (void *)(v10 + 72);
  uint64_t v34 = (void *)(v7 + 72);
  while (1)
  {
    BOOL v35 = *(v34 - 1) == *(v33 - 1) && *v34 == *v33;
    if (!v35 && (sub_21FA268D0() & 1) == 0) {
      return 0;
    }
    v33 += 2;
    v34 += 2;
    if (!--v32) {
      goto LABEL_5;
    }
  }
}

uint64_t sub_21F7D478C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_21FA26A10();
  if (v3)
  {
    uint64_t v5 = a2 + 48;
    do
    {
      uint64_t v10 = *(void *)(v5 - 8);
      uint64_t v9 = *(void *)v5;
      char v11 = *(unsigned char *)(v5 + 8);
      uint64_t v12 = *(void *)(v5 + 24);
      uint64_t v13 = *(void *)(v5 + 32);
      int v14 = *(char *)(v5 + 40);
      int v15 = *(unsigned __int8 *)(v5 + 40);
      sub_21FA26A10();
      if (v14 < 0)
      {
        sub_21FA26A10();
        sub_21FA26A10();
        sub_21FA26A30();
        sub_21FA26A30();
        sub_21F7652C0(v10, v9, v11);
        swift_bridgeObjectRetain();
        sub_21F770E44(v12, v13, v15);
      }
      else
      {
        sub_21FA26A10();
        if (v15)
        {
          sub_21FA26A10();
          if (v15 == 1)
          {
            sub_21FA26A30();
            sub_21F7652C0(v10, v9, v11);
            swift_bridgeObjectRetain();
            sub_21F770E44(v12, v13, 1);
            uint64_t v6 = v12;
            uint64_t v7 = v13;
            char v8 = 1;
          }
          else
          {
            sub_21F7652C0(v10, v9, v11);
            swift_bridgeObjectRetain();
            sub_21F770E44(v12, v13, 2);
            sub_21F7652C0(v10, v9, v11);
            swift_bridgeObjectRetain();
            sub_21F770E44(v12, v13, 2);
            sub_21FA25D30();
            sub_21F7656A8(v10, v9, v11);
            swift_bridgeObjectRelease();
            uint64_t v6 = v12;
            uint64_t v7 = v13;
            char v8 = 2;
          }
        }
        else
        {
          sub_21FA26A10();
          sub_21FA26A30();
          sub_21F7652C0(v10, v9, v11);
          swift_bridgeObjectRetain();
          sub_21F770E44(v12, v13, 0);
          uint64_t v6 = v12;
          uint64_t v7 = v13;
          char v8 = 0;
        }
        sub_21F770E38(v6, v7, v8);
      }
      sub_21F7656A8(v10, v9, v11);
      swift_bridgeObjectRelease();
      uint64_t result = sub_21F770E38(v12, v13, v15);
      v5 += 80;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_21F7D4A10(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_21FA26A10();
  if (v3)
  {
    uint64_t v5 = a2 + 72;
    do
    {
      int v6 = *(unsigned __int8 *)(v5 - 24);
      int v7 = *(unsigned __int8 *)(v5 - 8);
      if (*(unsigned char *)(v5 - 40) == 9)
      {
        sub_21FA26A20();
        if (!v6) {
          goto LABEL_7;
        }
      }
      else
      {
        sub_21FA26A20();
        sub_21FA26A10();
        if (!v6)
        {
LABEL_7:
          sub_21FA26A20();
          sub_21FA26A10();
          if (v7) {
            goto LABEL_11;
          }
          goto LABEL_3;
        }
      }
      sub_21FA26A20();
      if (v7)
      {
LABEL_11:
        sub_21FA26A20();
        goto LABEL_4;
      }
LABEL_3:
      sub_21FA26A20();
      sub_21FA26A10();
LABEL_4:
      v5 += 48;
      uint64_t result = sub_21FA26A10();
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_21F7D4B00(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_21FA26A10();
  if (v3)
  {
    uint64_t v5 = (unsigned __int8 *)(a2 + 56);
    do
    {
      int v6 = *v5;
      int v7 = v5[16];
      int v8 = v5[32];
      int v9 = v5[48];
      if (*(v5 - 16) == 1)
      {
        sub_21FA26A20();
        if (!v6) {
          goto LABEL_7;
        }
      }
      else
      {
        int v10 = v5[32];
        int v11 = v5[48];
        sub_21FA26A20();
        int v9 = v11;
        int v8 = v10;
        sub_21FA26A10();
        if (!v6)
        {
LABEL_7:
          sub_21FA26A20();
          sub_21FA26A10();
          if (!v7) {
            goto LABEL_8;
          }
          goto LABEL_13;
        }
      }
      sub_21FA26A20();
      if (!v7)
      {
LABEL_8:
        sub_21FA26A20();
        sub_21FA26A10();
        if (!v8) {
          goto LABEL_9;
        }
        goto LABEL_14;
      }
LABEL_13:
      sub_21FA26A20();
      if (!v8)
      {
LABEL_9:
        sub_21FA26A20();
        sub_21FA26A10();
        if (v9) {
          goto LABEL_15;
        }
        goto LABEL_3;
      }
LABEL_14:
      sub_21FA26A20();
      if (v9)
      {
LABEL_15:
        uint64_t result = sub_21FA26A20();
        goto LABEL_4;
      }
LABEL_3:
      sub_21FA26A20();
      uint64_t result = sub_21FA26A10();
LABEL_4:
      v5 += 80;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_21F7D4C74(uint64_t a1, uint64_t a2)
{
  return sub_21F7D4CCC(a1, a2, (void (*)(_OWORD *, _OWORD *))sub_21F7DF204, (uint64_t (*)(_OWORD *))sub_21F7DF2B4);
}

uint64_t sub_21F7D4CA0(uint64_t a1, uint64_t a2)
{
  return sub_21F7D4CCC(a1, a2, (void (*)(_OWORD *, _OWORD *))sub_21F7DF308, (uint64_t (*)(_OWORD *))sub_21F7DF364);
}

uint64_t sub_21F7D4CCC(uint64_t a1, uint64_t a2, void (*a3)(_OWORD *, _OWORD *), uint64_t (*a4)(_OWORD *))
{
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t result = sub_21FA26A10();
  if (v7)
  {
    int v9 = (unsigned char *)(a2 + 32);
    do
    {
      a3(v9, v15);
      a3(v15, v12);
      if (v14)
      {
        v10[0] = v12[0];
        v10[1] = v12[1];
        uint64_t v11 = v13;
        sub_21FA26A10();
        sub_21FA26480();
        sub_21F7DF260((uint64_t)v10);
      }
      else
      {
        sub_21FA26A10();
        sub_21FA26A10();
      }
      uint64_t result = a4(v15);
      v9 += 48;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_21F7D4DC0(uint64_t *a1, uint64_t a2)
{
  return sub_21F7D4E50(a1, a2, (void (*)(uint64_t, _OWORD *))sub_21F7DF204, (void (*)(_OWORD *))sub_21F7DF2B4, &qword_267EE74D0, (void (*)(uint64_t, unint64_t, uint64_t))sub_21F7D9880);
}

uint64_t sub_21F7D4E08(uint64_t *a1, uint64_t a2)
{
  return sub_21F7D4E50(a1, a2, (void (*)(uint64_t, _OWORD *))sub_21F7DF308, (void (*)(_OWORD *))sub_21F7DF364, &qword_267EE74E0, (void (*)(uint64_t, unint64_t, uint64_t))sub_21F7D9B3C);
}

uint64_t sub_21F7D4E50(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t, _OWORD *), void (*a4)(_OWORD *), uint64_t *a5, void (*a6)(uint64_t, unint64_t, uint64_t))
{
  uint64_t v11 = *v6;
  sub_21FA26A00();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_21F7D4CCC((uint64_t)v26, a2, (void (*)(_OWORD *, _OWORD *))a3, (uint64_t (*)(_OWORD *))a4);
  swift_bridgeObjectRelease();
  uint64_t v12 = sub_21FA26A50();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v15 = swift_bridgeObjectRetain();
    char v16 = sub_21F7D4254(v15, a2, a3, a4, a5);
    swift_bridgeObjectRelease();
    if (v16)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *a1 = *(void *)(*(void *)(*(void *)v24 + 48) + 8 * v14);
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v13;
    while (1)
    {
      unint64_t v14 = (v14 + 1) & v17;
      if (((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
        break;
      }
      uint64_t v18 = swift_bridgeObjectRetain();
      char v19 = sub_21F7D4254(v18, a2, a3, a4, a5);
      swift_bridgeObjectRelease();
      if (v19) {
        goto LABEL_6;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v26[0] = *(void *)v24;
  *(void *)uint64_t v24 = 0x8000000000000000;
  uint64_t v22 = swift_bridgeObjectRetain();
  a6(v22, v14, isUniquelyReferenced_nonNull_native);
  *(void *)uint64_t v24 = v26[0];
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

uint64_t sub_21F7D5038(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  sub_21FA26A00();
  swift_bridgeObjectRetain();
  sub_21FA25D30();
  uint64_t v8 = sub_21FA26A50();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_21FA268D0() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v14 = (uint64_t *)(*(void *)(*v3 + 48) + 16 * v10);
      uint64_t v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_21FA268D0() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_21F7D9DF8(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_21F7D51E8(unsigned char *a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  sub_21FA26A00();
  sub_21FA26A10();
  uint64_t v6 = sub_21FA26A50();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_21F7D9F94(a2, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(unsigned __int8 *)(v9 + v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(unsigned __int8 *)(v9 + v8) != a2);
  }
  uint64_t result = 0;
  LOBYTE(a2) = *(unsigned char *)(*(void *)(*v2 + 48) + v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_21F7D5308(uint64_t *a1, uint64_t a2)
{
  return sub_21F76696C(a1, a2, &qword_26AD44BC0);
}

uint64_t sub_21F7D531C(void *a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  sub_21FA26A00();
  uint64_t v94 = *(void *)(a2 + 16);
  sub_21FA26A10();
  uint64_t v100 = a2;
  uint64_t v95 = v4;
  uint64_t v140 = *(void *)(a2 + 16);
  if (v140)
  {
    uint64_t v5 = a2 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_21F7BB81C(v5, (uint64_t)v144);
      sub_21F7BB81C((uint64_t)v144, (uint64_t)v145);
      int v6 = sub_21F7E108C((uint64_t)v145);
      uint64_t v7 = sub_21F7E1098((uint64_t)v145);
      if (v6 != 1)
      {
        uint64_t v18 = *(void *)(v7 + 8);
        uint64_t v17 = *(void *)(v7 + 16);
        char v19 = *(unsigned char *)(v7 + 24);
        uint64_t v20 = *(void *)(v7 + 40);
        uint64_t v21 = *(void *)(v7 + 48);
        int v22 = *(char *)(v7 + 56);
        unsigned int v23 = *(unsigned __int8 *)(v7 + 56);
        sub_21FA26A10();
        sub_21FA26A10();
        if (v22 < 0)
        {
          sub_21FA26A10();
          sub_21FA26A10();
          sub_21FA26A30();
          sub_21FA26A30();
          sub_21F7C618C(v144, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
          sub_21F7652C0(v18, v17, v19);
LABEL_19:
          swift_bridgeObjectRetain();
        }
        else
        {
          sub_21FA26A10();
          if (v23 <= 1)
          {
            sub_21FA26A10();
            sub_21FA26A30();
            sub_21F7C618C(v144, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
            sub_21F7652C0(v18, v17, v19);
            goto LABEL_19;
          }
          sub_21FA26A10();
          sub_21F7C618C(v144, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
          sub_21F7652C0(v18, v17, v19);
          swift_bridgeObjectRetain();
          sub_21F770E44(v20, v21, 2);
          sub_21FA25D30();
        }
        sub_21FA26A10();
        sub_21F7656A8(v18, v17, v19);
        swift_bridgeObjectRelease();
        sub_21F770E38(v20, v21, v23);
        goto LABEL_4;
      }
      uint64_t v122 = v5;
      uint64_t v8 = *(void *)(v7 + 8);
      uint64_t v9 = *(void *)(v7 + 16);
      char v10 = *(unsigned char *)(v7 + 24);
      uint64_t v11 = *(void *)(v7 + 40);
      uint64_t v12 = *(void *)(v7 + 48);
      int v13 = *(char *)(v7 + 56);
      unsigned int v14 = *(unsigned __int8 *)(v7 + 56);
      uint64_t v118 = *(void *)(v7 + 88);
      char v116 = *(unsigned char *)(v7 + 96);
      uint64_t v137 = *(void *)(v7 + 112);
      uint64_t v132 = *(void *)(v7 + 80);
      uint64_t v134 = *(void *)(v7 + 120);
      unsigned int v15 = *(unsigned __int8 *)(v7 + 128);
      sub_21FA26A10();
      sub_21FA26A10();
      uint64_t v127 = v9;
      char v124 = v10;
      if (v13 < 0) {
        break;
      }
      uint64_t v16 = v118;
      sub_21FA26A10();
      if (v14 <= 1)
      {
        sub_21FA26A10();
        sub_21FA26A30();
        sub_21F7C618C(v144, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
        sub_21F7652C0(v8, v9, v124);
        swift_bridgeObjectRetain();
        char v24 = v116;
        sub_21F7652C0(v132, v118, v116);
        goto LABEL_14;
      }
      sub_21FA26A10();
      sub_21F7C618C(v144, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
      sub_21F7652C0(v8, v9, v124);
      swift_bridgeObjectRetain();
      char v24 = v116;
      sub_21F7652C0(v132, v118, v116);
      swift_bridgeObjectRetain();
      sub_21F770E44(v137, v134, v15);
      sub_21F770E44(v11, v12, 2);
      sub_21FA25D30();
      if ((v15 & 0x80) == 0)
      {
LABEL_15:
        sub_21FA26A10();
        sub_21FA26A10();
        if (v15 > 1) {
          sub_21FA25D30();
        }
        else {
          sub_21FA26A30();
        }
        goto LABEL_3;
      }
LABEL_18:
      sub_21FA26A10();
      sub_21FA26A10();
      sub_21FA26A30();
      sub_21FA26A30();
LABEL_3:
      sub_21F7656A8(v8, v127, v124);
      swift_bridgeObjectRelease();
      sub_21F770E38(v11, v12, v14);
      sub_21F7656A8(v132, v16, v24);
      swift_bridgeObjectRelease();
      sub_21F770E38(v137, v134, v15);
      uint64_t v5 = v122;
LABEL_4:
      sub_21F7C618C(v144, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
      v5 += 152;
      if (!--v140) {
        goto LABEL_24;
      }
    }
    sub_21FA26A10();
    sub_21FA26A10();
    sub_21FA26A30();
    sub_21FA26A30();
    sub_21F7C618C(v144, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
    sub_21F7652C0(v8, v9, v10);
    swift_bridgeObjectRetain();
    uint64_t v16 = v118;
    char v24 = v116;
    sub_21F7652C0(v132, v118, v116);
LABEL_14:
    swift_bridgeObjectRetain();
    sub_21F770E44(v137, v134, v15);
    if ((v15 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
LABEL_24:
  uint64_t v25 = sub_21FA26A50();
  uint64_t v26 = v95;
  uint64_t v27 = -1 << *(unsigned char *)(v95 + 32);
  unint64_t v28 = v25 & ~v27;
  uint64_t v29 = v95 + 56;
  if ((*(void *)(v95 + 56 + ((v28 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v28))
  {
    uint64_t v30 = ~v27;
    uint64_t v31 = v94;
    uint64_t v32 = v100;
    uint64_t v93 = ~v27;
    while (1)
    {
      uint64_t v41 = *(void *)(*(void *)(v26 + 48) + 8 * v28);
      if (*(void *)(v41 + 16) == v31) {
        break;
      }
LABEL_32:
      unint64_t v28 = (v28 + 1) & v30;
      if (((*(void *)(v29 + ((v28 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v28) & 1) == 0) {
        goto LABEL_27;
      }
    }
    if (!v31 || v41 == v32)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      long long v89 = v91;
      long long v90 = a1;
LABEL_155:
      void *v90 = *(void *)(*(void *)(*v89 + 48) + 8 * v28);
      swift_bridgeObjectRetain();
      return 0;
    }
    else
    {
      unint64_t v96 = v28;
      swift_bridgeObjectRetain();
      uint64_t result = sub_21F7BB81C(v41 + 32, (uint64_t)v143);
      if (*(void *)(v32 + 16))
      {
        unint64_t v42 = 0;
        uint64_t v43 = 184;
        uint64_t v102 = v41;
        while (1)
        {
          sub_21F7BB81C(v32 + v43 - 152, (uint64_t)v144);
          sub_21F7BB81C((uint64_t)v143, (uint64_t)v145);
          uint64_t v121 = v43;
          unint64_t v123 = v42;
          if (sub_21F7E108C((uint64_t)v145) != 1) {
            break;
          }
          uint64_t v44 = (unsigned __int8 *)sub_21F7E1098((uint64_t)v145);
          sub_21F7BB81C((uint64_t)v144, (uint64_t)v142);
          int v45 = sub_21F7E108C((uint64_t)v142);
          char v46 = (unsigned __int8 *)sub_21F7E1098((uint64_t)v142);
          if (v45 != 1 || *v44 != *v46) {
            goto LABEL_152;
          }
          uint64_t v47 = *((void *)v44 + 1);
          uint64_t v104 = v47;
          uint64_t v138 = *((void *)v44 + 2);
          char v135 = v44[24];
          uint64_t v48 = *((uint64_t *)v44 + 5);
          uint64_t v49 = *((void *)v44 + 6);
          int v50 = v44[56];
          char v97 = v50;
          uint64_t v52 = *((void *)v44 + 10);
          uint64_t v51 = *((void *)v44 + 11);
          char v53 = v44[96];
          uint64_t v54 = *((void *)v44 + 14);
          uint64_t v115 = *((uint64_t *)v44 + 15);
          int v55 = v44[128];
          char v117 = v55;
          uint64_t v107 = *((void *)v46 + 1);
          uint64_t v108 = *((void *)v46 + 2);
          char v109 = v46[24];
          uint64_t v141 = *((uint64_t *)v46 + 5);
          uint64_t v111 = v54;
          uint64_t v113 = *((void *)v46 + 6);
          int v101 = (char)v46[56];
          uint64_t v125 = *((void *)v46 + 10);
          uint64_t v128 = *((void *)v46 + 11);
          char v130 = v46[96];
          uint64_t v105 = *((uint64_t *)v46 + 15);
          uint64_t v106 = *((uint64_t *)v46 + 14);
          int v119 = (char)v46[128];
          sub_21F7C618C(v144, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
          sub_21F7C618C(v143, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
          sub_21F7652C0(v47, v138, v135);
          swift_bridgeObjectRetain();
          uint64_t v110 = v48;
          uint64_t v103 = v49;
          sub_21F770E44(v48, v49, v50);
          uint64_t v99 = v52;
          sub_21F7652C0(v52, v51, v53);
          swift_bridgeObjectRetain();
          sub_21F770E44(v111, v115, v55);
          sub_21F7652C0(v107, v108, v109);
          swift_bridgeObjectRetain();
          sub_21F770E44(v141, v113, v101);
          sub_21F7652C0(v125, v128, v130);
          swift_bridgeObjectRetain();
          sub_21F770E44(v106, v105, v119);
          if ((sub_21FA25320() & 1) == 0)
          {
            char v36 = v50;
LABEL_29:
            uint64_t v37 = v47;
            uint64_t v38 = v111;
            char v39 = v53;
            uint64_t v40 = v52;
LABEL_30:
            sub_21F7656A8(v125, v128, v130);
            swift_bridgeObjectRelease();
            sub_21F770E38(v106, v105, v119);
            sub_21F7656A8(v107, v108, v109);
            swift_bridgeObjectRelease();
            sub_21F770E38(v141, v113, v101);
            sub_21F7656A8(v40, v51, v39);
            swift_bridgeObjectRelease();
            sub_21F770E38(v38, v115, v117);
            sub_21F7656A8(v37, v138, v135);
            swift_bridgeObjectRelease();
            sub_21F770E38(v48, v103, v36);
            sub_21F7C618C(v144, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
            sub_21F7C618C(v143, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
            swift_bridgeObjectRelease();
            uint64_t v32 = v100;
LABEL_31:
            uint64_t v31 = v94;
            uint64_t v26 = v95;
            unint64_t v28 = v96;
            uint64_t v30 = v93;
            uint64_t v29 = v95 + 56;
            goto LABEL_32;
          }
          char v36 = v50;
          if ((char)v50 < 0)
          {
            if ((v101 & 0x80000000) == 0) {
              goto LABEL_29;
            }
            if (v50)
            {
              char v39 = v53;
              uint64_t v57 = v113;
              if ((v101 & 1) == 0) {
                goto LABEL_146;
              }
            }
            else
            {
              char v39 = v53;
              uint64_t v57 = v113;
              if (v101) {
                goto LABEL_146;
              }
            }
            if (*(double *)&v48 != *(double *)&v141) {
              goto LABEL_146;
            }
            char v56 = v97;
            if (*(double *)&v103 != *(double *)&v57)
            {
              uint64_t v38 = v111;
              uint64_t v40 = v99;
              uint64_t v37 = v47;
              goto LABEL_30;
            }
          }
          else
          {
            if (v101 < 0) {
              goto LABEL_29;
            }
            if (v50)
            {
              if (v50 == 1)
              {
                if (v101 != 1)
                {
                  char v36 = 1;
LABEL_136:
                  uint64_t v38 = v111;
                  char v39 = v53;
                  goto LABEL_147;
                }
                char v56 = v50;
                char v39 = v53;
                uint64_t v57 = v113;
                if (*(double *)&v48 != *(double *)&v141)
                {
                  char v36 = 1;
                  char v86 = 1;
                  goto LABEL_145;
                }
              }
              else
              {
                if (v101 != 2)
                {
                  char v36 = 2;
                  goto LABEL_136;
                }
                char v56 = v50;
                char v39 = v53;
                uint64_t v57 = v113;
                if ((v48 != v141 || v103 != v113) && (sub_21FA268D0() & 1) == 0)
                {
                  char v36 = 2;
                  char v86 = 2;
LABEL_145:
                  LOBYTE(v101) = v86;
LABEL_146:
                  uint64_t v38 = v111;
LABEL_147:
                  uint64_t v40 = v99;
                  uint64_t v37 = v47;
                  goto LABEL_30;
                }
              }
            }
            else
            {
              if (v101)
              {
                char v36 = 0;
                goto LABEL_136;
              }
              char v56 = v50;
              char v39 = v53;
              uint64_t v57 = v113;
              if (*(double *)&v48 != *(double *)&v141)
              {
                char v36 = 0;
                LOBYTE(v101) = 0;
                goto LABEL_146;
              }
            }
          }
          if ((sub_21FA25320() & 1) == 0) {
            goto LABEL_122;
          }
          if ((char)v55 < 0)
          {
            if ((v119 & 0x80000000) == 0)
            {
LABEL_122:
              uint64_t v98 = v51;
              sub_21F7656A8(v125, v128, v130);
              swift_bridgeObjectRelease();
              sub_21F770E38(v106, v105, v119);
              goto LABEL_143;
            }
            sub_21F7656A8(v125, v128, v130);
            swift_bridgeObjectRelease();
            sub_21F7656A8(v107, v108, v109);
            swift_bridgeObjectRelease();
            sub_21F770E38(v141, v57, v101);
            sub_21F7656A8(v99, v51, v39);
            if (v55)
            {
              uint64_t v76 = v102;
              uint64_t v43 = v121;
              unint64_t v79 = v123;
              char v80 = v135;
              uint64_t v81 = v138;
              uint64_t v77 = v111;
              if ((v119 & 1) == 0) {
                goto LABEL_129;
              }
            }
            else
            {
              uint64_t v76 = v102;
              uint64_t v43 = v121;
              unint64_t v79 = v123;
              char v80 = v135;
              uint64_t v81 = v138;
              uint64_t v77 = v111;
              if (v119) {
                goto LABEL_129;
              }
            }
            if (*(double *)&v77 != *(double *)&v106)
            {
LABEL_129:
              uint64_t v32 = v100;
              goto LABEL_150;
            }
            uint64_t v78 = v115;
            uint64_t v32 = v100;
            if (*(double *)&v115 != *(double *)&v105) {
              goto LABEL_150;
            }
          }
          else
          {
            if (v119 < 0)
            {
              uint64_t v98 = v51;
              sub_21F7656A8(v125, v128, v130);
              swift_bridgeObjectRelease();
              goto LABEL_143;
            }
            if (v55)
            {
              uint64_t v98 = v51;
              if (v55 == 1)
              {
                uint64_t v77 = v111;
                if (v119 != 1)
                {
                  sub_21F7656A8(v125, v128, v130);
                  swift_bridgeObjectRelease();
                  sub_21F770E38(v106, v105, v119);
                  char v87 = 1;
                  goto LABEL_142;
                }
                sub_21F7656A8(v125, v128, v130);
                swift_bridgeObjectRelease();
                sub_21F770E38(v106, v105, 1);
                sub_21F7656A8(v107, v108, v109);
                swift_bridgeObjectRelease();
                sub_21F770E38(v141, v57, v101);
                sub_21F7656A8(v99, v51, v39);
                uint64_t v78 = v115;
                uint64_t v32 = v100;
                uint64_t v76 = v102;
                uint64_t v43 = v121;
                unint64_t v79 = v123;
                char v80 = v135;
                uint64_t v81 = v138;
                if (*(double *)&v111 != *(double *)&v106)
                {
                  char v88 = 1;
                  goto LABEL_149;
                }
              }
              else
              {
                uint64_t v77 = v111;
                if (v119 != 2)
                {
                  sub_21F7656A8(v125, v128, v130);
                  swift_bridgeObjectRelease();
                  sub_21F770E38(v106, v105, v119);
                  char v87 = 2;
LABEL_142:
                  char v117 = v87;
LABEL_143:
                  uint64_t v32 = v100;
                  char v80 = v135;
                  uint64_t v81 = v138;
                  sub_21F7656A8(v107, v108, v109);
                  swift_bridgeObjectRelease();
                  sub_21F770E38(v141, v113, v101);
                  sub_21F7656A8(v99, v98, v39);
                  goto LABEL_150;
                }
                if (v111 == v106 && v115 == v105)
                {
                  sub_21F7656A8(v125, v128, v130);
                  swift_bridgeObjectRelease();
                  uint64_t v78 = v115;
                  sub_21F770E38(v111, v115, 2);
                  sub_21F7656A8(v107, v108, v109);
                  swift_bridgeObjectRelease();
                  sub_21F770E38(v141, v57, v101);
                  sub_21F7656A8(v99, v51, v39);
                  uint64_t v32 = v100;
                  uint64_t v76 = v102;
                  uint64_t v43 = v121;
                  unint64_t v79 = v123;
                  char v80 = v135;
                  uint64_t v81 = v138;
                }
                else
                {
                  uint64_t v78 = v115;
                  char v120 = sub_21FA268D0();
                  sub_21F7656A8(v125, v128, v130);
                  swift_bridgeObjectRelease();
                  sub_21F770E38(v106, v105, 2);
                  sub_21F7656A8(v107, v108, v109);
                  swift_bridgeObjectRelease();
                  sub_21F770E38(v141, v57, v101);
                  sub_21F7656A8(v99, v51, v39);
                  uint64_t v32 = v100;
                  uint64_t v76 = v102;
                  uint64_t v43 = v121;
                  unint64_t v79 = v123;
                  char v80 = v135;
                  uint64_t v81 = v138;
                  if ((v120 & 1) == 0)
                  {
                    char v88 = 2;
LABEL_149:
                    char v117 = v88;
LABEL_150:
                    swift_bridgeObjectRelease();
                    sub_21F770E38(v111, v115, v117);
                    sub_21F7656A8(v104, v81, v80);
                    swift_bridgeObjectRelease();
                    sub_21F770E38(v110, v103, v56);
LABEL_151:
                    sub_21F7C618C(v144, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
                    sub_21F7C618C(v143, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
LABEL_152:
                    swift_bridgeObjectRelease();
                    goto LABEL_31;
                  }
                }
              }
            }
            else
            {
              if (v119)
              {
                uint64_t v98 = v51;
                sub_21F7656A8(v125, v128, v130);
                swift_bridgeObjectRelease();
                sub_21F770E38(v106, v105, v119);
                char v117 = 0;
                goto LABEL_143;
              }
              uint64_t v77 = v111;
              sub_21F7656A8(v125, v128, v130);
              swift_bridgeObjectRelease();
              sub_21F770E38(v106, v105, 0);
              sub_21F7656A8(v107, v108, v109);
              swift_bridgeObjectRelease();
              sub_21F770E38(v141, v57, v101);
              sub_21F7656A8(v99, v51, v39);
              uint64_t v78 = v115;
              uint64_t v32 = v100;
              uint64_t v76 = v102;
              uint64_t v43 = v121;
              unint64_t v79 = v123;
              char v80 = v135;
              uint64_t v81 = v138;
              if (*(double *)&v111 != *(double *)&v106)
              {
                char v117 = 0;
                goto LABEL_150;
              }
            }
          }
          swift_bridgeObjectRelease();
          sub_21F770E38(v77, v78, v117);
          sub_21F7656A8(v104, v81, v80);
          swift_bridgeObjectRelease();
          sub_21F770E38(v110, v103, v56);
          sub_21F7C618C(v144, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
          sub_21F7C618C(v143, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
LABEL_118:
          if (v94 - 1 == v79)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            long long v89 = v91;
            long long v90 = a1;
            unint64_t v28 = v96;
            goto LABEL_155;
          }
          uint64_t result = sub_21F7BB81C(v76 + v43, (uint64_t)v143);
          v43 += 152;
          unint64_t v42 = v79 + 1;
          if (v42 >= *(void *)(v32 + 16)) {
            goto LABEL_156;
          }
        }
        char v58 = (unsigned __int8 *)sub_21F7E1098((uint64_t)v145);
        int v59 = *v58;
        uint64_t v133 = *((void *)v58 + 1);
        uint64_t v136 = *((void *)v58 + 2);
        char v139 = v58[24];
        uint64_t v60 = *((void *)v58 + 5);
        uint64_t v61 = *((uint64_t *)v58 + 6);
        int v62 = v58[56];
        int v63 = v58[80];
        sub_21F7BB81C((uint64_t)v144, (uint64_t)v142);
        int v64 = sub_21F7E108C((uint64_t)v142);
        uint64_t v65 = (unsigned __int8 *)sub_21F7E1098((uint64_t)v142);
        if (v64 == 1 || v59 != *v65) {
          goto LABEL_152;
        }
        int v114 = v63;
        uint64_t v66 = *((void *)v65 + 1);
        uint64_t v67 = *((void *)v65 + 2);
        char v68 = v65[24];
        uint64_t v129 = *((uint64_t *)v65 + 6);
        uint64_t v131 = *((uint64_t *)v65 + 5);
        int v126 = (char)v65[56];
        int v112 = v65[80];
        sub_21F7C618C(v144, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
        sub_21F7C618C(v143, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
        sub_21F7652C0(v133, v136, v139);
        swift_bridgeObjectRetain();
        sub_21F770E44(v60, v61, v62);
        sub_21F7652C0(v66, v67, v68);
        swift_bridgeObjectRetain();
        sub_21F770E44(v131, v129, v126);
        if ((sub_21FA25320() & 1) == 0)
        {
          sub_21F7656A8(v66, v67, v68);
          swift_bridgeObjectRelease();
          sub_21F770E38(v131, v129, v126);
          goto LABEL_125;
        }
        if ((v62 & 0x80) != 0)
        {
          if ((v126 & 0x80000000) == 0)
          {
            sub_21F7656A8(v66, v67, v68);
            swift_bridgeObjectRelease();
            sub_21F770E38(v131, v129, v126);
            sub_21F7656A8(v133, v136, v139);
            swift_bridgeObjectRelease();
            goto LABEL_127;
          }
          sub_21F7656A8(v66, v67, v68);
          swift_bridgeObjectRelease();
          sub_21F7656A8(v133, v136, v139);
          swift_bridgeObjectRelease();
          if (v62)
          {
            uint64_t v32 = v100;
            int v74 = v114;
            double v75 = *(double *)&v60;
            if ((v126 & 1) == 0) {
              goto LABEL_151;
            }
          }
          else
          {
            uint64_t v32 = v100;
            int v74 = v114;
            double v75 = *(double *)&v60;
            if (v126) {
              goto LABEL_151;
            }
          }
          if (v75 != *(double *)&v131) {
            goto LABEL_151;
          }
          uint64_t v76 = v102;
          if (*(double *)&v61 != *(double *)&v129) {
            goto LABEL_151;
          }
          goto LABEL_114;
        }
        if (v126 < 0)
        {
          sub_21F7656A8(v66, v67, v68);
          swift_bridgeObjectRelease();
LABEL_125:
          sub_21F7656A8(v133, v136, v139);
          swift_bridgeObjectRelease();
          uint64_t v83 = v60;
          uint64_t v84 = v61;
          char v85 = v62;
LABEL_126:
          sub_21F770E38(v83, v84, v85);
LABEL_127:
          uint64_t v32 = v100;
          goto LABEL_151;
        }
        if (v62)
        {
          if (v62 != 1)
          {
            if (v126 != 2)
            {
              sub_21F7656A8(v66, v67, v68);
              swift_bridgeObjectRelease();
              sub_21F770E38(v131, v129, v126);
              sub_21F7656A8(v133, v136, v139);
              swift_bridgeObjectRelease();
              uint64_t v83 = v60;
              uint64_t v84 = v61;
              char v85 = 2;
              goto LABEL_126;
            }
            if (v60 == v131 && v61 == v129)
            {
              sub_21F7656A8(v66, v67, v68);
              swift_bridgeObjectRelease();
              sub_21F770E38(v60, v61, 2);
              sub_21F7656A8(v133, v136, v139);
              swift_bridgeObjectRelease();
              sub_21F770E38(v60, v61, 2);
              uint64_t v32 = v100;
              uint64_t v76 = v102;
              int v74 = v114;
            }
            else
            {
              char v82 = sub_21FA268D0();
              sub_21F7656A8(v66, v67, v68);
              swift_bridgeObjectRelease();
              sub_21F770E38(v131, v129, 2);
              sub_21F7656A8(v133, v136, v139);
              swift_bridgeObjectRelease();
              sub_21F770E38(v60, v61, 2);
              uint64_t v32 = v100;
              uint64_t v76 = v102;
              int v74 = v114;
              if ((v82 & 1) == 0) {
                goto LABEL_151;
              }
            }
            goto LABEL_114;
          }
          if (v126 != 1)
          {
            sub_21F7656A8(v66, v67, v68);
            swift_bridgeObjectRelease();
            sub_21F770E38(v131, v129, v126);
            sub_21F7656A8(v133, v136, v139);
            swift_bridgeObjectRelease();
            uint64_t v83 = v60;
            uint64_t v84 = v61;
            char v85 = 1;
            goto LABEL_126;
          }
          double v69 = *(double *)&v60;
          double v70 = *(double *)&v131;
          sub_21F7656A8(v66, v67, v68);
          swift_bridgeObjectRelease();
          sub_21F770E38(v131, v129, 1);
          sub_21F7656A8(v133, v136, v139);
          swift_bridgeObjectRelease();
          uint64_t v71 = v60;
          uint64_t v72 = v61;
          char v73 = 1;
        }
        else
        {
          if (v126)
          {
            sub_21F7656A8(v66, v67, v68);
            swift_bridgeObjectRelease();
            sub_21F770E38(v131, v129, v126);
            sub_21F7656A8(v133, v136, v139);
            swift_bridgeObjectRelease();
            uint64_t v83 = v60;
            uint64_t v84 = v61;
            char v85 = 0;
            goto LABEL_126;
          }
          double v69 = *(double *)&v60;
          double v70 = *(double *)&v131;
          sub_21F7656A8(v66, v67, v68);
          swift_bridgeObjectRelease();
          sub_21F770E38(v131, v129, 0);
          sub_21F7656A8(v133, v136, v139);
          swift_bridgeObjectRelease();
          uint64_t v71 = v60;
          uint64_t v72 = v61;
          char v73 = 0;
        }
        sub_21F770E38(v71, v72, v73);
        uint64_t v32 = v100;
        uint64_t v76 = v102;
        int v74 = v114;
        if (v69 != v70) {
          goto LABEL_151;
        }
LABEL_114:
        sub_21F7C618C(v144, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
        sub_21F7C618C(v143, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
        if (v74 != v112) {
          goto LABEL_152;
        }
        unint64_t v79 = v123;
        goto LABEL_118;
      }
LABEL_156:
      __break(1u);
    }
  }
  else
  {
    uint64_t v32 = v100;
LABEL_27:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v145[0] = *v91;
    *uint64_t v91 = 0x8000000000000000;
    uint64_t v34 = swift_bridgeObjectRetain();
    sub_21F7DA0E4(v34, v28, isUniquelyReferenced_nonNull_native);
    *uint64_t v91 = v145[0];
    swift_bridgeObjectRelease();
    *a1 = v32;
    return 1;
  }
  return result;
}

uint64_t sub_21F7D6B00(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  sub_21FA26A00();
  swift_bridgeObjectRetain();
  sub_21F8DBD4C((uint64_t)v106);
  uint64_t v7 = sub_21FA26A50();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  uint64_t v101 = v6 + 56;
  uint64_t v93 = a2;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
    goto LABEL_103;
  }
  sub_21F7BB81C(*(void *)(v6 + 48) + 152 * v9, (uint64_t)v106);
  sub_21F7C618C(v106, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
  BOOL v10 = sub_21F8DD75C((uint64_t)v106, (uint64_t)a2);
  sub_21F7C618C(v106, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
  if (v10)
  {
    swift_bridgeObjectRelease();
    sub_21F7C618C(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
    goto LABEL_4;
  }
  uint64_t v80 = v6;
  uint64_t v100 = ~v8;
  unint64_t v9 = (v9 + 1) & ~v8;
  if (((*(void *)(v101 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_103:
    swift_bridgeObjectRelease();
LABEL_104:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v103[0] = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_21F7C618C(v93, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
    sub_21F7DB9A0((uint64_t)v93, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v103[0];
    swift_bridgeObjectRelease();
    sub_21F7BB81C((uint64_t)v93, a1);
    return 1;
  }
  uint64_t v65 = v3;
  uint64_t v66 = a1;
  uint64_t v12 = (uint64_t)a2;
  uint64_t v13 = v6;
  while (1)
  {
    sub_21F7BB81C(*(void *)(v13 + 48) + 152 * v9, (uint64_t)v102);
    sub_21F7BB81C((uint64_t)v102, (uint64_t)v103);
    int v14 = sub_21F7E108C((uint64_t)v103);
    unsigned int v15 = (unsigned __int8 *)sub_21F7E1098((uint64_t)v103);
    uint64_t v16 = v15;
    if (v14 == 1) {
      break;
    }
    int v28 = *v15;
    uint64_t v30 = *((void *)v15 + 1);
    uint64_t v29 = *((void *)v15 + 2);
    char v31 = v15[24];
    uint64_t v97 = *((uint64_t *)v15 + 5);
    uint64_t v96 = *((void *)v15 + 6);
    int v99 = v15[56];
    int v32 = v15[80];
    sub_21F7BB81C(v12, (uint64_t)v104);
    int v33 = sub_21F7E108C((uint64_t)v104);
    uint64_t v34 = (unsigned __int8 *)sub_21F7E1098((uint64_t)v104);
    if (v33 == 1 || v28 != *v34) {
      goto LABEL_11;
    }
    uint64_t v36 = *((void *)v34 + 1);
    uint64_t v35 = *((void *)v34 + 2);
    char v37 = v34[24];
    uint64_t v92 = *((uint64_t *)v34 + 5);
    uint64_t v38 = *((void *)v34 + 6);
    int v89 = (char)v34[56];
    int v85 = v34[80];
    int v86 = v32;
    sub_21F7C618C(v102, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
    sub_21F7652C0(v30, v29, v31);
    swift_bridgeObjectRetain();
    sub_21F770E44(v97, v96, v99);
    sub_21F7652C0(v36, v35, v37);
    swift_bridgeObjectRetain();
    uint64_t v87 = v38;
    sub_21F770E44(v92, v38, v89);
    if ((sub_21FA25320() & 1) == 0)
    {
      sub_21F7656A8(v36, v35, v37);
      swift_bridgeObjectRelease();
      sub_21F770E38(v92, v38, v89);
      uint64_t v40 = v97;
      uint64_t v39 = v30;
LABEL_71:
      sub_21F7656A8(v39, v29, v31);
      swift_bridgeObjectRelease();
      uint64_t v12 = (uint64_t)v93;
      uint64_t v13 = v80;
      char v46 = v99;
      uint64_t v47 = v96;
LABEL_72:
      sub_21F770E38(v40, v47, v46);
LABEL_10:
      sub_21F7C618C(v102, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
      goto LABEL_11;
    }
    if ((v99 & 0x80) != 0)
    {
      uint64_t v39 = v30;
      if ((v89 & 0x80000000) == 0) {
        goto LABEL_50;
      }
      sub_21F7656A8(v36, v35, v37);
      swift_bridgeObjectRelease();
      sub_21F7656A8(v30, v29, v31);
      swift_bridgeObjectRelease();
      char v46 = v99;
      uint64_t v40 = v97;
      if (v99)
      {
        uint64_t v12 = (uint64_t)v93;
        uint64_t v13 = v80;
        uint64_t v47 = v96;
        if ((v89 & 1) == 0) {
          goto LABEL_72;
        }
      }
      else
      {
        uint64_t v12 = (uint64_t)v93;
        uint64_t v13 = v80;
        uint64_t v47 = v96;
        if (v89) {
          goto LABEL_72;
        }
      }
      if (*(double *)&v97 != *(double *)&v92 || *(double *)&v47 != *(double *)&v87) {
        goto LABEL_72;
      }
    }
    else
    {
      uint64_t v39 = v30;
      if (v89 < 0)
      {
        sub_21F7656A8(v36, v35, v37);
        swift_bridgeObjectRelease();
        uint64_t v40 = v97;
        goto LABEL_71;
      }
      if (!v99)
      {
        if (v89)
        {
LABEL_50:
          sub_21F7656A8(v36, v35, v37);
          swift_bridgeObjectRelease();
          sub_21F770E38(v92, v87, v89);
          uint64_t v40 = v97;
          goto LABEL_71;
        }
        uint64_t v40 = v97;
        double v41 = *(double *)&v97;
        double v42 = *(double *)&v92;
        sub_21F7656A8(v36, v35, v37);
        swift_bridgeObjectRelease();
        uint64_t v43 = v92;
        uint64_t v44 = v87;
        char v45 = 0;
        goto LABEL_74;
      }
      if (v99 == 1)
      {
        uint64_t v40 = v97;
        if (v89 != 1) {
          goto LABEL_70;
        }
        double v41 = *(double *)&v97;
        double v42 = *(double *)&v92;
        sub_21F7656A8(v36, v35, v37);
        swift_bridgeObjectRelease();
        uint64_t v43 = v92;
        uint64_t v44 = v87;
        char v45 = 1;
LABEL_74:
        sub_21F770E38(v43, v44, v45);
        sub_21F7656A8(v30, v29, v31);
        swift_bridgeObjectRelease();
        uint64_t v12 = (uint64_t)v93;
        uint64_t v13 = v80;
        char v46 = v99;
        uint64_t v47 = v96;
        if (v41 != v42) {
          goto LABEL_72;
        }
        goto LABEL_75;
      }
      uint64_t v40 = v97;
      if (v89 != 2)
      {
LABEL_70:
        sub_21F7656A8(v36, v35, v37);
        swift_bridgeObjectRelease();
        sub_21F770E38(v92, v87, v89);
        goto LABEL_71;
      }
      if (v97 == v92 && v96 == v87)
      {
        sub_21F7656A8(v36, v35, v37);
        swift_bridgeObjectRelease();
        sub_21F770E38(v97, v96, 2);
        sub_21F7656A8(v30, v29, v31);
        swift_bridgeObjectRelease();
        uint64_t v12 = (uint64_t)v93;
        uint64_t v13 = v80;
        char v46 = v99;
        uint64_t v47 = v96;
        uint64_t v40 = v97;
      }
      else
      {
        char v90 = sub_21FA268D0();
        sub_21F7656A8(v36, v35, v37);
        swift_bridgeObjectRelease();
        sub_21F770E38(v92, v87, 2);
        sub_21F7656A8(v30, v29, v31);
        swift_bridgeObjectRelease();
        uint64_t v12 = (uint64_t)v93;
        uint64_t v13 = v80;
        char v46 = v99;
        uint64_t v47 = v96;
        uint64_t v40 = v97;
        if ((v90 & 1) == 0) {
          goto LABEL_72;
        }
      }
    }
LABEL_75:
    sub_21F770E38(v40, v47, v46);
    sub_21F7C618C(v102, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
    if (v86 == v85)
    {
      swift_bridgeObjectRelease();
      int v64 = (void *)v12;
      goto LABEL_105;
    }
LABEL_11:
    unint64_t v9 = (v9 + 1) & v100;
    if (((*(void *)(v101 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v3 = v65;
      a1 = v66;
      goto LABEL_104;
    }
  }
  sub_21F7BB81C(v12, (uint64_t)v105);
  int v17 = sub_21F7E108C((uint64_t)v105);
  uint64_t v18 = (unsigned __int8 *)sub_21F7E1098((uint64_t)v105);
  if (v17 != 1 || *v16 != *v18) {
    goto LABEL_11;
  }
  unint64_t v69 = v9;
  uint64_t v72 = *((void *)v18 + 2);
  uint64_t v98 = *((uint64_t *)v18 + 5);
  uint64_t v95 = *((uint64_t *)v18 + 6);
  int v75 = (char)v18[56];
  uint64_t v88 = *((void *)v18 + 11);
  uint64_t v91 = *((void *)v18 + 10);
  uint64_t v82 = *((uint64_t *)v18 + 14);
  uint64_t v83 = *((void *)v18 + 1);
  uint64_t v81 = *((uint64_t *)v18 + 15);
  unsigned __int8 v67 = v18[24];
  unsigned __int8 v68 = v18[96];
  uint64_t v19 = *((void *)v16 + 1);
  uint64_t v20 = *((void *)v16 + 2);
  char v21 = v16[24];
  int v84 = (char)v18[128];
  uint64_t v22 = *((uint64_t *)v16 + 5);
  uint64_t v79 = v22;
  uint64_t v23 = *((uint64_t *)v16 + 6);
  uint64_t v24 = *((void *)v16 + 10);
  uint64_t v25 = *((void *)v16 + 11);
  char v26 = v16[96];
  uint64_t v76 = *((uint64_t *)v16 + 15);
  uint64_t v77 = *((uint64_t *)v16 + 14);
  int v94 = v16[128];
  int v27 = v16[56];
  sub_21F7C618C(v102, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
  sub_21F7652C0(v19, v20, v21);
  swift_bridgeObjectRetain();
  uint64_t v78 = v23;
  sub_21F770E44(v22, v23, v27);
  uint64_t v71 = v24;
  uint64_t v73 = v25;
  char v74 = v26;
  sub_21F7652C0(v24, v25, v26);
  swift_bridgeObjectRetain();
  sub_21F770E44(v77, v76, v94);
  sub_21F7652C0(v83, v72, v67 & 1);
  swift_bridgeObjectRetain();
  sub_21F770E44(v98, v95, v75);
  sub_21F7652C0(v91, v88, v68 & 1);
  swift_bridgeObjectRetain();
  sub_21F770E44(v82, v81, v84);
  uint64_t v70 = v19;
  if ((sub_21FA25320() & 1) == 0) {
    goto LABEL_9;
  }
  if ((v27 & 0x80) != 0)
  {
    if (v75 < 0)
    {
      if (v27)
      {
        if ((v75 & 1) == 0) {
          goto LABEL_9;
        }
      }
      else if (v75)
      {
        goto LABEL_9;
      }
      if (*(double *)&v22 != *(double *)&v98 || *(double *)&v23 != *(double *)&v95) {
        goto LABEL_9;
      }
      goto LABEL_58;
    }
    goto LABEL_9;
  }
  if (v75 < 0) {
    goto LABEL_9;
  }
  if (!v27)
  {
    if (!v75) {
      goto LABEL_42;
    }
    goto LABEL_9;
  }
  if (v27 != 1)
  {
    if (v75 != 2 || (v22 != v98 || v23 != v95) && (sub_21FA268D0() & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_58;
  }
  if (v75 != 1)
  {
LABEL_9:
    sub_21F7656A8(v91, v88, v68 & 1);
    swift_bridgeObjectRelease();
    sub_21F770E38(v82, v81, v84);
    sub_21F7656A8(v83, v72, v67 & 1);
    swift_bridgeObjectRelease();
    sub_21F770E38(v98, v95, v75);
    sub_21F7656A8(v24, v25, v26);
    swift_bridgeObjectRelease();
    sub_21F770E38(v77, v76, v94);
    sub_21F7656A8(v19, v20, v21);
    swift_bridgeObjectRelease();
    sub_21F770E38(v22, v23, v27);
    uint64_t v12 = (uint64_t)v93;
    uint64_t v13 = v80;
    unint64_t v9 = v69;
    goto LABEL_10;
  }
LABEL_42:
  if (*(double *)&v22 != *(double *)&v98) {
    goto LABEL_9;
  }
LABEL_58:
  if ((sub_21FA25320() & 1) == 0)
  {
    sub_21F7656A8(v91, v88, v68 & 1);
    swift_bridgeObjectRelease();
    sub_21F770E38(v82, v81, v84);
    uint64_t v12 = (uint64_t)v93;
    uint64_t v13 = v80;
    unint64_t v9 = v69;
    goto LABEL_96;
  }
  if ((v94 & 0x80) != 0)
  {
    uint64_t v55 = v91;
    uint64_t v12 = (uint64_t)v93;
    uint64_t v13 = v80;
    unint64_t v9 = v69;
    char v48 = v84;
    uint64_t v56 = v88;
    if (v84 < 0)
    {
      sub_21F7656A8(v91, v88, v68 & 1);
      swift_bridgeObjectRelease();
      sub_21F7656A8(v83, v72, v67 & 1);
      swift_bridgeObjectRelease();
      uint64_t v58 = v71;
      if (v94)
      {
        uint64_t v13 = v80;
        if ((v84 & 1) == 0) {
          goto LABEL_97;
        }
      }
      else
      {
        uint64_t v13 = v80;
        if (v84) {
          goto LABEL_97;
        }
      }
      if (*(double *)&v77 == *(double *)&v82 && *(double *)&v76 == *(double *)&v81)
      {
LABEL_101:
        uint64_t v60 = v76;
        uint64_t v61 = v77;
        goto LABEL_107;
      }
      goto LABEL_97;
    }
    char v57 = v68 & 1;
    goto LABEL_95;
  }
  uint64_t v12 = (uint64_t)v93;
  uint64_t v13 = v80;
  unint64_t v9 = v69;
  char v48 = v84;
  if (v84 < 0)
  {
    sub_21F7656A8(v91, v88, v68 & 1);
    swift_bridgeObjectRelease();
    goto LABEL_96;
  }
  if (!v94)
  {
    if (!v84)
    {
      char v49 = v67 & 1;
      double v50 = *(double *)&v77;
      double v51 = *(double *)&v82;
      sub_21F7656A8(v91, v88, v68 & 1);
      swift_bridgeObjectRelease();
      uint64_t v52 = v82;
      uint64_t v53 = v81;
      char v54 = 0;
      goto LABEL_87;
    }
    goto LABEL_94;
  }
  if (v94 == 1)
  {
    if (v84 == 1)
    {
      char v49 = v67 & 1;
      double v50 = *(double *)&v77;
      double v51 = *(double *)&v82;
      sub_21F7656A8(v91, v88, v68 & 1);
      swift_bridgeObjectRelease();
      uint64_t v52 = v82;
      uint64_t v53 = v81;
      char v54 = 1;
LABEL_87:
      sub_21F770E38(v52, v53, v54);
      char v59 = v49;
      uint64_t v13 = v80;
      sub_21F7656A8(v83, v72, v59);
      swift_bridgeObjectRelease();
      uint64_t v58 = v71;
      if (v50 == v51) {
        goto LABEL_101;
      }
LABEL_97:
      sub_21F770E38(v98, v95, v75);
      sub_21F7656A8(v58, v73, v74);
      swift_bridgeObjectRelease();
      sub_21F770E38(v77, v76, v94);
      sub_21F7656A8(v70, v20, v21);
      swift_bridgeObjectRelease();
      sub_21F770E38(v79, v78, v27);
      goto LABEL_10;
    }
LABEL_94:
    char v57 = v68 & 1;
    uint64_t v55 = v91;
    uint64_t v56 = v88;
LABEL_95:
    sub_21F7656A8(v55, v56, v57);
    swift_bridgeObjectRelease();
    sub_21F770E38(v82, v81, v48);
LABEL_96:
    uint64_t v58 = v71;
    sub_21F7656A8(v83, v72, v67 & 1);
    swift_bridgeObjectRelease();
    goto LABEL_97;
  }
  if (v84 != 2) {
    goto LABEL_94;
  }
  uint64_t v60 = v81;
  uint64_t v61 = v82;
  if (v77 != v82 || v76 != v81)
  {
    char v62 = sub_21FA268D0();
    sub_21F7656A8(v91, v88, v68 & 1);
    swift_bridgeObjectRelease();
    sub_21F770E38(v82, v81, 2);
    sub_21F7656A8(v83, v72, v67 & 1);
    swift_bridgeObjectRelease();
    uint64_t v12 = (uint64_t)v93;
    uint64_t v13 = v80;
    uint64_t v58 = v71;
    if (v62) {
      goto LABEL_101;
    }
    goto LABEL_97;
  }
  sub_21F7656A8(v91, v88, v68 & 1);
  swift_bridgeObjectRelease();
  sub_21F770E38(v82, v81, 2);
  sub_21F7656A8(v83, v72, v67 & 1);
  swift_bridgeObjectRelease();
  uint64_t v12 = (uint64_t)v93;
  uint64_t v58 = v71;
LABEL_107:
  sub_21F770E38(v98, v95, v75);
  sub_21F7656A8(v58, v73, v74);
  swift_bridgeObjectRelease();
  sub_21F770E38(v61, v60, v94);
  sub_21F7656A8(v70, v20, v21);
  swift_bridgeObjectRelease();
  sub_21F770E38(v79, v78, v27);
  sub_21F7C618C(v102, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
  swift_bridgeObjectRelease();
  int v64 = (void *)v12;
LABEL_105:
  sub_21F7C618C(v64, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
  uint64_t v3 = v65;
  a1 = v66;
LABEL_4:
  sub_21F7BB81C(*(void *)(*v3 + 48) + 152 * v9, (uint64_t)v103);
  sub_21F7BB81C((uint64_t)v103, a1);
  sub_21F7C618C(v103, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
  return 0;
}

uint64_t sub_21F7D7A64(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_21FA26A00();
  uint64_t v6 = sub_21FA26A50();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  uint64_t v41 = v5 + 56;
  if ((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    char v31 = v2;
    int v32 = (void *)a1;
    uint64_t v39 = ~v7;
    swift_bridgeObjectRetain();
    unint64_t v9 = a2;
    uint64_t v40 = v5;
    while (1)
    {
      BOOL v10 = (uint64_t *)(*(void *)(v5 + 48) + (v8 << 6));
      uint64_t v12 = *v10;
      uint64_t v11 = v10[1];
      uint64_t v13 = v10[2];
      uint64_t v15 = v10[4];
      uint64_t v14 = v10[5];
      uint64_t v43 = v10[3];
      uint64_t v44 = v10[6];
      if (v44 < 0)
      {
        sub_21F7E0EDC((uint64_t)v9, (uint64_t)v46);
        char v18 = v50;
        if (v50 < 0)
        {
          v50 &= ~0x8000000000000000;
          uint64_t v37 = v46[1];
          uint64_t v38 = v46[0];
          char v36 = v47;
          uint64_t v34 = v48;
          uint64_t v35 = v49;
          sub_21F7E0F38(v12, v11, v13, v43, v15, v14, v44);
          sub_21F7652C0(v12, v11, v13 & 1);
          swift_bridgeObjectRetain();
          sub_21F7652C0(v38, v37, v36);
          swift_bridgeObjectRetain();
          sub_21F7652C0(v15, v14, v44 & 1);
          swift_bridgeObjectRetain();
          sub_21F7652C0(v34, v35, v18 & 1);
          swift_bridgeObjectRetain();
          uint64_t v33 = v12;
          if (sub_21FA25320())
          {
            char v19 = sub_21FA25320();
            sub_21F7656A8(v34, v35, v18 & 1);
            swift_bridgeObjectRelease();
            sub_21F7656A8(v15, v14, v44 & 1);
            swift_bridgeObjectRelease();
            sub_21F7656A8(v38, v37, v36);
            swift_bridgeObjectRelease();
            sub_21F7656A8(v33, v11, v13 & 1);
            swift_bridgeObjectRelease();
            sub_21F7E0FC0(v33, v11, v13, v43, v15, v14, v44);
            unint64_t v9 = a2;
            if (v19)
            {
LABEL_17:
              swift_bridgeObjectRelease();
              sub_21F7E1048(v9, (void (*)(void, void, void, void, void, void, void, void))sub_21F7E0FC0);
              uint64_t v22 = (uint64_t *)(*(void *)(*v31 + 48) + (v8 << 6));
              uint64_t v23 = *v22;
              uint64_t v24 = v22[1];
              uint64_t v25 = v22[2];
              uint64_t v26 = v22[3];
              uint64_t v27 = v22[4];
              uint64_t v28 = v22[5];
              uint64_t v29 = v22[6];
              uint64_t v30 = v22[7];
              *int v32 = *v22;
              v32[1] = v24;
              v32[2] = v25;
              v32[3] = v26;
              v32[4] = v27;
              v32[5] = v28;
              v32[6] = v29;
              v32[7] = v30;
              sub_21F7E0F38(v23, v24, v25, v26, v27, v28, v29);
              return 0;
            }
          }
          else
          {
            sub_21F7656A8(v34, v35, v18 & 1);
            swift_bridgeObjectRelease();
            sub_21F7656A8(v15, v14, v44 & 1);
            swift_bridgeObjectRelease();
            sub_21F7656A8(v38, v37, v36);
            swift_bridgeObjectRelease();
            sub_21F7656A8(v12, v11, v13 & 1);
            swift_bridgeObjectRelease();
            sub_21F7E0FC0(v12, v11, v13, v43, v15, v14, v44);
            unint64_t v9 = a2;
          }
        }
      }
      else
      {
        sub_21F7E0EDC((uint64_t)v9, (uint64_t)&v51);
        if (v52 < 0)
        {
          v52 &= ~0x8000000000000000;
        }
        else
        {
          uint64_t v16 = v11;
          sub_21F7E1048(a2, (void (*)(void, void, void, void, void, void, void, void))sub_21F7E0F38);
          sub_21F7E0F38(v12, v11, v13, v43, v15, v14, v44);
          unint64_t v9 = a2;
          char v17 = sub_21FA25320();
          sub_21F7E1048(a2, (void (*)(void, void, void, void, void, void, void, void))sub_21F7E0FC0);
          sub_21F7E0FC0(v12, v16, v13, v43, v15, v14, v44);
          if (v17) {
            goto LABEL_17;
          }
        }
      }
      uint64_t v5 = v40;
      unint64_t v8 = (v8 + 1) & v39;
      if (((*(void *)(v41 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v31;
        a1 = (uint64_t)v32;
        break;
      }
    }
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v45 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  sub_21F7E1048(a2, (void (*)(void, void, void, void, void, void, void, void))sub_21F7E0F38);
  sub_21F7DC88C(a2, v8, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v45;
  swift_bridgeObjectRelease();
  sub_21F7E0EDC((uint64_t)a2, a1);
  return 1;
}

uint64_t sub_21F7D7FE4(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, _OWORD *), void (*a4)(_OWORD *))
{
  uint64_t v7 = v4;
  uint64_t v8 = *v4;
  sub_21F76CA40(a2);
  uint64_t v9 = sub_21FA264F0();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v37 = (void *)(v8 + 56);
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v13 = v12 & *(void *)(v8 + 56);
    int64_t v36 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v14 = v9 + 56;
    uint64_t result = swift_retain();
    int64_t v16 = 0;
    uint64_t v35 = v8;
    while (1)
    {
      if (v13)
      {
        unint64_t v18 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        int64_t v38 = v16;
        unint64_t v19 = v18 | (v16 << 6);
      }
      else
      {
        int64_t v20 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return result;
        }
        if (v20 >= v36) {
          goto LABEL_40;
        }
        unint64_t v21 = v37[v20];
        int64_t v22 = v16 + 1;
        if (!v21)
        {
          int64_t v22 = v16 + 2;
          if (v16 + 2 >= v36) {
            goto LABEL_40;
          }
          unint64_t v21 = v37[v22];
          if (!v21)
          {
            int64_t v22 = v16 + 3;
            if (v16 + 3 >= v36) {
              goto LABEL_40;
            }
            unint64_t v21 = v37[v22];
            if (!v21)
            {
              uint64_t v23 = v16 + 4;
              if (v16 + 4 >= v36)
              {
LABEL_40:
                swift_release();
                uint64_t v7 = v4;
                uint64_t v34 = 1 << *(unsigned char *)(v8 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v8 + 16) = 0;
                break;
              }
              unint64_t v21 = v37[v23];
              if (!v21)
              {
                while (1)
                {
                  int64_t v22 = v23 + 1;
                  if (__OFADD__(v23, 1)) {
                    goto LABEL_46;
                  }
                  if (v22 >= v36) {
                    goto LABEL_40;
                  }
                  unint64_t v21 = v37[v22];
                  ++v23;
                  if (v21) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v22 = v16 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v13 = (v21 - 1) & v21;
        int64_t v38 = v22;
        unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
      }
      uint64_t v24 = *(void *)(*(void *)(v8 + 48) + 8 * v19);
      sub_21FA26A00();
      sub_21FA26A10();
      uint64_t v25 = *(void *)(v24 + 16);
      if (v25)
      {
        uint64_t v26 = v24 + 32;
        swift_bridgeObjectRetain();
        do
        {
          a3(v26, v44);
          a3((uint64_t)v44, v41);
          if (v43)
          {
            v39[0] = v41[0];
            v39[1] = v41[1];
            uint64_t v40 = v42;
            sub_21FA26A10();
            sub_21FA26480();
            sub_21F7DF260((uint64_t)v39);
          }
          else
          {
            sub_21FA26A10();
            sub_21FA26A10();
          }
          a4(v44);
          v26 += 48;
          --v25;
        }
        while (v25);
        swift_bridgeObjectRelease();
        uint64_t v8 = v35;
      }
      uint64_t result = sub_21FA26A50();
      uint64_t v27 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v14 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v28) & ~*(void *)(v14 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v14 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v17 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(void *)(*(void *)(v10 + 48) + 8 * v17) = v24;
      ++*(void *)(v10 + 16);
      int64_t v16 = v38;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v7 = v10;
  return result;
}

uint64_t sub_21F7D839C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_21F76CA40(&qword_26AD44BB8);
  uint64_t v3 = sub_21FA264F0();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    char v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      sub_21FA26A00();
      sub_21FA25D30();
      uint64_t result = sub_21FA26A50();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *unint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_21F7D867C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_21F76CA40(&qword_267EE74F8);
  uint64_t result = sub_21FA264F0();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      char v18 = *(unsigned char *)(*(void *)(v2 + 48) + v14);
      sub_21FA26A00();
      sub_21FA26A10();
      uint64_t result = sub_21FA26A50();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_21F7D8928(uint64_t a1)
{
  return sub_21F76DC94(a1, &qword_26AD44BC0);
}

uint64_t sub_21F7D8934()
{
  uint64_t v1 = *v0;
  sub_21F76CA40(&qword_267EE7500);
  uint64_t v2 = sub_21FA264F0();
  uint64_t v3 = v2;
  if (*(void *)(v1 + 16))
  {
    uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
    uint64_t v52 = (void *)(v1 + 56);
    if (v4 < 64) {
      uint64_t v5 = ~(-1 << v4);
    }
    else {
      uint64_t v5 = -1;
    }
    unint64_t v6 = v5 & *(void *)(v1 + 56);
    int64_t v51 = (unint64_t)(v4 + 63) >> 6;
    uint64_t v54 = v2 + 56;
    uint64_t result = swift_retain();
    int64_t v8 = 0;
    uint64_t v53 = v1;
    uint64_t v55 = v3;
    while (1)
    {
      if (v6)
      {
        int64_t v56 = v8;
        uint64_t v57 = (v6 - 1) & v6;
        unint64_t v13 = __clz(__rbit64(v6)) | (v8 << 6);
      }
      else
      {
        int64_t v14 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
          return result;
        }
        if (v14 >= v51) {
          goto LABEL_60;
        }
        unint64_t v15 = v52[v14];
        int64_t v16 = v8 + 1;
        if (!v15)
        {
          int64_t v16 = v8 + 2;
          if (v8 + 2 >= v51) {
            goto LABEL_60;
          }
          unint64_t v15 = v52[v16];
          if (!v15)
          {
            int64_t v16 = v8 + 3;
            if (v8 + 3 >= v51) {
              goto LABEL_60;
            }
            unint64_t v15 = v52[v16];
            if (!v15)
            {
              uint64_t v17 = v8 + 4;
              if (v8 + 4 >= v51)
              {
LABEL_60:
                swift_release();
                uint64_t v49 = 1 << *(unsigned char *)(v1 + 32);
                if (v49 > 63) {
                  bzero(v52, ((unint64_t)(v49 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v52 = -1 << v49;
                }
                *(void *)(v1 + 16) = 0;
                break;
              }
              unint64_t v15 = v52[v17];
              if (!v15)
              {
                while (1)
                {
                  int64_t v16 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_66;
                  }
                  if (v16 >= v51) {
                    goto LABEL_60;
                  }
                  unint64_t v15 = v52[v16];
                  ++v17;
                  if (v15) {
                    goto LABEL_32;
                  }
                }
              }
              int64_t v16 = v8 + 4;
            }
          }
        }
LABEL_32:
        int64_t v56 = v16;
        uint64_t v57 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
      }
      uint64_t v22 = *(void *)(*(void *)(v1 + 48) + 8 * v13);
      sub_21FA26A00();
      sub_21FA26A10();
      uint64_t v58 = v22;
      uint64_t v23 = *(void *)(v22 + 16);
      if (v23)
      {
        uint64_t v24 = v22 + 32;
        while (1)
        {
          sub_21F7BB81C(v24, (uint64_t)v70);
          sub_21F7BB81C((uint64_t)v70, (uint64_t)v71);
          int v29 = sub_21F7E108C((uint64_t)v71);
          uint64_t v30 = sub_21F7E1098((uint64_t)v71);
          if (v29 != 1)
          {
            uint64_t v42 = *(void *)(v30 + 16);
            char v43 = *(unsigned char *)(v30 + 24);
            uint64_t v44 = *(void *)(v30 + 40);
            uint64_t v69 = *(void *)(v30 + 8);
            uint64_t v45 = *(void *)(v30 + 48);
            int v46 = *(char *)(v30 + 56);
            unsigned int v47 = *(unsigned __int8 *)(v30 + 56);
            sub_21FA26A10();
            sub_21FA26A10();
            if (v46 < 0)
            {
              sub_21FA26A10();
              sub_21FA26A10();
              sub_21FA26A30();
              sub_21FA26A30();
              sub_21F7C618C(v70, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
              sub_21F7652C0(v69, v42, v43);
              swift_bridgeObjectRetain();
              char v48 = v47;
            }
            else
            {
              sub_21FA26A10();
              char v48 = v47;
              sub_21FA26A10();
              if (v47 > 1)
              {
                sub_21F7C618C(v70, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
                sub_21F7652C0(v69, v42, v43);
                swift_bridgeObjectRetain();
                sub_21F770E44(v44, v45, 2);
                sub_21FA25D30();
              }
              else
              {
                sub_21FA26A30();
                sub_21F7C618C(v70, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
                sub_21F7652C0(v69, v42, v43);
                swift_bridgeObjectRetain();
              }
            }
            sub_21FA26A10();
            sub_21F7656A8(v69, v42, v43);
            swift_bridgeObjectRelease();
            uint64_t v26 = v44;
            uint64_t v27 = v45;
            char v28 = v48;
            goto LABEL_38;
          }
          uint64_t v60 = v24;
          uint64_t v31 = *(void *)(v30 + 16);
          char v62 = *(unsigned char *)(v30 + 24);
          uint64_t v63 = *(void *)(v30 + 8);
          uint64_t v64 = *(void *)(v30 + 48);
          int v32 = *(char *)(v30 + 56);
          int v33 = *(unsigned __int8 *)(v30 + 56);
          uint64_t v34 = *(void *)(v30 + 88);
          uint64_t v65 = *(void *)(v30 + 40);
          uint64_t v66 = *(void *)(v30 + 80);
          char v35 = *(unsigned char *)(v30 + 96);
          uint64_t v67 = *(void *)(v30 + 120);
          uint64_t v68 = *(void *)(v30 + 112);
          int v36 = *(unsigned __int8 *)(v30 + 128);
          sub_21FA26A10();
          sub_21FA26A10();
          char v59 = v33;
          char v61 = v35;
          if (v32 < 0)
          {
            sub_21FA26A10();
            sub_21FA26A10();
            sub_21FA26A30();
            sub_21FA26A30();
            sub_21F7C618C(v70, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
            char v40 = v62;
            sub_21F7652C0(v63, v31, v62);
            swift_bridgeObjectRetain();
            sub_21F7652C0(v66, v34, v35);
            swift_bridgeObjectRetain();
            sub_21F770E44(v68, v67, v36);
            int v37 = v36;
            uint64_t v38 = v63;
            uint64_t v24 = v60;
            uint64_t v39 = v34;
            if ((v37 & 0x80) == 0) {
              goto LABEL_54;
            }
            goto LABEL_48;
          }
          int v37 = v36;
          sub_21FA26A10();
          if (!v33) {
            break;
          }
          uint64_t v38 = v63;
          uint64_t v39 = v34;
          if (v33 == 1)
          {
            sub_21FA26A10();
            sub_21FA26A30();
            sub_21F7C618C(v70, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
            char v40 = v62;
            sub_21F7652C0(v63, v31, v62);
            swift_bridgeObjectRetain();
            uint64_t v41 = v66;
            goto LABEL_51;
          }
          sub_21FA26A10();
          sub_21F7C618C(v70, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
          char v40 = v62;
          sub_21F7652C0(v63, v31, v62);
          swift_bridgeObjectRetain();
          sub_21F7652C0(v66, v34, v35);
          swift_bridgeObjectRetain();
          sub_21F770E44(v68, v67, v37);
          sub_21F770E44(v65, v64, 2);
          sub_21FA25D30();
          uint64_t v24 = v60;
          if ((v37 & 0x80) == 0)
          {
LABEL_54:
            sub_21FA26A10();
            if (v37)
            {
              sub_21FA26A10();
              if (v37 == 1) {
                sub_21FA26A30();
              }
              else {
                sub_21FA25D30();
              }
              char v25 = v59;
            }
            else
            {
              sub_21FA26A10();
              sub_21FA26A30();
              char v25 = v59;
            }
            goto LABEL_37;
          }
LABEL_48:
          sub_21FA26A10();
          sub_21FA26A10();
          sub_21FA26A30();
          sub_21FA26A30();
          char v25 = v59;
          uint64_t v38 = v63;
          char v40 = v62;
LABEL_37:
          sub_21F7656A8(v38, v31, v40);
          swift_bridgeObjectRelease();
          sub_21F770E38(v65, v64, v25);
          sub_21F7656A8(v66, v39, v61);
          swift_bridgeObjectRelease();
          uint64_t v27 = v67;
          uint64_t v26 = v68;
          char v28 = v37;
LABEL_38:
          sub_21F770E38(v26, v27, v28);
          sub_21F7C618C(v70, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
          v24 += 152;
          if (!--v23) {
            goto LABEL_6;
          }
        }
        sub_21FA26A10();
        sub_21FA26A30();
        sub_21F7C618C(v70, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
        uint64_t v38 = v63;
        char v40 = v62;
        sub_21F7652C0(v63, v31, v62);
        swift_bridgeObjectRetain();
        uint64_t v41 = v66;
        uint64_t v39 = v34;
LABEL_51:
        sub_21F7652C0(v41, v39, v35);
        swift_bridgeObjectRetain();
        sub_21F770E44(v68, v67, v37);
        uint64_t v24 = v60;
        if ((v37 & 0x80) == 0) {
          goto LABEL_54;
        }
        goto LABEL_48;
      }
LABEL_6:
      uint64_t result = sub_21FA26A50();
      uint64_t v3 = v55;
      uint64_t v9 = -1 << *(unsigned char *)(v55 + 32);
      unint64_t v10 = result & ~v9;
      unint64_t v11 = v10 >> 6;
      if (((-1 << v10) & ~*(void *)(v54 + 8 * (v10 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v10) & ~*(void *)(v54 + 8 * (v10 >> 6)))) | v10 & 0x7FFFFFFFFFFFFFC0;
        uint64_t v1 = v53;
        unint64_t v6 = v57;
      }
      else
      {
        char v18 = 0;
        unint64_t v19 = (unint64_t)(63 - v9) >> 6;
        unint64_t v6 = v57;
        do
        {
          if (++v11 == v19 && (v18 & 1) != 0)
          {
            __break(1u);
            goto LABEL_65;
          }
          BOOL v20 = v11 == v19;
          if (v11 == v19) {
            unint64_t v11 = 0;
          }
          v18 |= v20;
          uint64_t v21 = *(void *)(v54 + 8 * v11);
        }
        while (v21 == -1);
        unint64_t v12 = __clz(__rbit64(~v21)) + (v11 << 6);
        uint64_t v1 = v53;
      }
      *(void *)(v54 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v55 + 48) + 8 * v12) = v58;
      ++*(void *)(v55 + 16);
      int64_t v8 = v56;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v50 = v3;
  return result;
}

uint64_t sub_21F7D92A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_21F76CA40(&qword_267EE7508);
  uint64_t v3 = sub_21FA264F0();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v6 = -1 << v26;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      sub_21F7BB81C(*(void *)(v2 + 48) + 152 * v15, (uint64_t)v28);
      sub_21FA26A00();
      sub_21F8DBD4C((uint64_t)v27);
      uint64_t result = sub_21FA26A50();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v10 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v13 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t result = sub_21F7BB81C((uint64_t)v28, *(void *)(v4 + 48) + 152 * v13);
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_21F7D9570()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_21F76CA40(&qword_26AD462D0);
  uint64_t result = sub_21FA264F0();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v34 = (void *)(v2 + 56);
    uint64_t v35 = v2;
    uint64_t v6 = 1 << *(unsigned char *)(v2 + 32);
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v33 = (unint64_t)(v6 + 63) >> 6;
    uint64_t v9 = result + 56;
    while (1)
    {
      if (v8)
      {
        unint64_t v12 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        int64_t v38 = v5;
        unint64_t v13 = v12 | (v5 << 6);
      }
      else
      {
        int64_t v14 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v33) {
          goto LABEL_33;
        }
        unint64_t v15 = v34[v14];
        int64_t v16 = v5 + 1;
        if (!v15)
        {
          int64_t v16 = v5 + 2;
          if (v5 + 2 >= v33) {
            goto LABEL_33;
          }
          unint64_t v15 = v34[v16];
          if (!v15)
          {
            int64_t v16 = v5 + 3;
            if (v5 + 3 >= v33) {
              goto LABEL_33;
            }
            unint64_t v15 = v34[v16];
            if (!v15)
            {
              uint64_t v17 = v5 + 4;
              if (v5 + 4 >= v33)
              {
LABEL_33:
                uint64_t v32 = 1 << *(unsigned char *)(v2 + 32);
                if (v32 > 63) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v15 = v34[v17];
              if (!v15)
              {
                while (1)
                {
                  int64_t v16 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v16 >= v33) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = v34[v16];
                  ++v17;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v16 = v5 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v15 - 1) & v15;
        int64_t v38 = v16;
        unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
      }
      int64_t v18 = (uint64_t *)(*(void *)(v2 + 48) + (v13 << 6));
      uint64_t v20 = *v18;
      uint64_t v19 = v18[1];
      uint64_t v22 = v18[2];
      uint64_t v21 = v18[3];
      uint64_t v23 = v18[4];
      uint64_t v24 = v18[6];
      uint64_t v36 = v18[7];
      uint64_t v37 = v18[5];
      sub_21FA26A00();
      uint64_t result = sub_21FA26A50();
      uint64_t v25 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v9 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v10 = __clz(__rbit64((-1 << v26) & ~*(void *)(v9 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v9 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v10 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v9 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      unint64_t v11 = (void *)(*(void *)(v4 + 48) + (v10 << 6));
      *unint64_t v11 = v20;
      v11[1] = v19;
      v11[2] = v22;
      v11[3] = v21;
      int64_t v5 = v38;
      v11[4] = v23;
      uint64_t v11[5] = v37;
      uint64_t v2 = v35;
      v11[6] = v24;
      v11[7] = v36;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_21F7D9880(uint64_t result, unint64_t i, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_13;
  }
  uint64_t v8 = v6 + 1;
  if (a3)
  {
    sub_21F7D7FE4(v8, &qword_267EE74C8, (void (*)(uint64_t, _OWORD *))sub_21F7DF204, (void (*)(_OWORD *))sub_21F7DF2B4);
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_21F7DCDA4(&qword_267EE74C8);
      goto LABEL_13;
    }
    sub_21F7DD98C(v8, &qword_267EE74C8, (void (*)(uint64_t, _OWORD *))sub_21F7DF204, (void (*)(_OWORD *))sub_21F7DF2B4);
  }
  uint64_t v9 = *v3;
  sub_21FA26A00();
  swift_bridgeObjectRetain();
  sub_21F7D4CCC((uint64_t)v21, v5, (void (*)(_OWORD *, _OWORD *))sub_21F7DF204, (uint64_t (*)(_OWORD *))sub_21F7DF2B4);
  swift_bridgeObjectRelease();
  uint64_t result = sub_21FA26A50();
  uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
  uint64_t i = result & ~v10;
  uint64_t v11 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v12 = swift_bridgeObjectRetain();
    char v13 = sub_21F7D4254(v12, v5, (void (*)(uint64_t, _OWORD *))sub_21F7DF204, (void (*)(_OWORD *))sub_21F7DF2B4, &qword_267EE74D0);
    uint64_t result = swift_bridgeObjectRelease();
    if (v13) {
      goto LABEL_16;
    }
    uint64_t v14 = ~v10;
    for (uint64_t i = (i + 1) & ~v10; ((*(void *)(v11 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; uint64_t i = (i + 1) & v14)
    {
      uint64_t v15 = swift_bridgeObjectRetain();
      char v16 = sub_21F7D4254(v15, v5, (void (*)(uint64_t, _OWORD *))sub_21F7DF204, (void (*)(_OWORD *))sub_21F7DF2B4, &qword_267EE74D0);
      uint64_t result = swift_bridgeObjectRelease();
      if (v16) {
        goto LABEL_16;
      }
    }
  }
LABEL_13:
  uint64_t v17 = *v3;
  *(void *)(*v3 + 8 * (i >> 6) + 56) |= 1 << i;
  *(void *)(*(void *)(v17 + 48) + 8 * i) = v5;
  uint64_t v18 = *(void *)(v17 + 16);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (!v19)
  {
    *(void *)(v17 + 16) = v20;
    return result;
  }
  __break(1u);
LABEL_16:
  uint64_t result = sub_21FA26980();
  __break(1u);
  return result;
}

uint64_t sub_21F7D9B3C(uint64_t result, unint64_t i, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_13;
  }
  uint64_t v8 = v6 + 1;
  if (a3)
  {
    sub_21F7D7FE4(v8, &qword_267EE74D8, (void (*)(uint64_t, _OWORD *))sub_21F7DF308, (void (*)(_OWORD *))sub_21F7DF364);
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_21F7DCDA4(&qword_267EE74D8);
      goto LABEL_13;
    }
    sub_21F7DD98C(v8, &qword_267EE74D8, (void (*)(uint64_t, _OWORD *))sub_21F7DF308, (void (*)(_OWORD *))sub_21F7DF364);
  }
  uint64_t v9 = *v3;
  sub_21FA26A00();
  swift_bridgeObjectRetain();
  sub_21F7D4CCC((uint64_t)v21, v5, (void (*)(_OWORD *, _OWORD *))sub_21F7DF308, (uint64_t (*)(_OWORD *))sub_21F7DF364);
  swift_bridgeObjectRelease();
  uint64_t result = sub_21FA26A50();
  uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
  uint64_t i = result & ~v10;
  uint64_t v11 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v12 = swift_bridgeObjectRetain();
    char v13 = sub_21F7D4254(v12, v5, (void (*)(uint64_t, _OWORD *))sub_21F7DF308, (void (*)(_OWORD *))sub_21F7DF364, &qword_267EE74E0);
    uint64_t result = swift_bridgeObjectRelease();
    if (v13) {
      goto LABEL_16;
    }
    uint64_t v14 = ~v10;
    for (uint64_t i = (i + 1) & ~v10; ((*(void *)(v11 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; uint64_t i = (i + 1) & v14)
    {
      uint64_t v15 = swift_bridgeObjectRetain();
      char v16 = sub_21F7D4254(v15, v5, (void (*)(uint64_t, _OWORD *))sub_21F7DF308, (void (*)(_OWORD *))sub_21F7DF364, &qword_267EE74E0);
      uint64_t result = swift_bridgeObjectRelease();
      if (v16) {
        goto LABEL_16;
      }
    }
  }
LABEL_13:
  uint64_t v17 = *v3;
  *(void *)(*v3 + 8 * (i >> 6) + 56) |= 1 << i;
  *(void *)(*(void *)(v17 + 48) + 8 * i) = v5;
  uint64_t v18 = *(void *)(v17 + 16);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (!v19)
  {
    *(void *)(v17 + 16) = v20;
    return result;
  }
  __break(1u);
LABEL_16:
  uint64_t result = sub_21FA26980();
  __break(1u);
  return result;
}

uint64_t sub_21F7D9DF8(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_21F7D839C();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (uint64_t)sub_21F7DCF48();
      goto LABEL_22;
    }
    sub_21F7DDD1C();
  }
  uint64_t v11 = *v4;
  sub_21FA26A00();
  sub_21FA25D30();
  uint64_t result = sub_21FA26A50();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = sub_21FA268D0(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = sub_21FA26980();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = sub_21FA268D0();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (uint64_t *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_21F7D9F94(uint64_t result, unint64_t a2, char a3)
{
  int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_21F7D867C();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_21F7DD0FC();
      goto LABEL_14;
    }
    sub_21F7DDFCC();
  }
  uint64_t v8 = *v3;
  sub_21FA26A00();
  sub_21FA26A10();
  uint64_t result = sub_21FA26A50();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(unsigned __int8 *)(v10 + a2) == v5)
    {
LABEL_13:
      uint64_t result = sub_21FA26980();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(unsigned __int8 *)(v10 + a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v12 + 48) + a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

uint64_t sub_21F7DA0E4(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_38;
  }
  if (a3)
  {
    sub_21F7D8934();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_21F7DD42C();
      goto LABEL_38;
    }
    sub_21F7DE254();
  }
  uint64_t v93 = *v3;
  int v94 = v3;
  sub_21FA26A00();
  uint64_t v92 = *(void *)(v5 + 16);
  sub_21FA26A10();
  uint64_t v99 = v5;
  uint64_t v137 = *(void *)(v5 + 16);
  if (v137)
  {
    uint64_t v8 = v5 + 32;
    do
    {
      sub_21F7BB81C(v8, (uint64_t)v142);
      sub_21F7BB81C((uint64_t)v142, (uint64_t)v143);
      int v12 = sub_21F7E108C((uint64_t)v143);
      uint64_t v13 = sub_21F7E1098((uint64_t)v143);
      if (v12 != 1)
      {
        uint64_t v24 = *(void *)(v13 + 8);
        uint64_t v25 = *(void *)(v13 + 16);
        char v26 = *(unsigned char *)(v13 + 24);
        uint64_t v27 = *(void *)(v13 + 40);
        uint64_t v28 = *(void *)(v13 + 48);
        int v29 = *(char *)(v13 + 56);
        int v30 = *(unsigned __int8 *)(v13 + 56);
        sub_21FA26A10();
        sub_21FA26A10();
        if (v29 < 0)
        {
          sub_21FA26A10();
          sub_21FA26A10();
          sub_21FA26A30();
          sub_21FA26A30();
          sub_21F7C618C(v142, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
          sub_21F7652C0(v24, v25, v26);
          swift_bridgeObjectRetain();
          char v31 = v26;
        }
        else
        {
          sub_21FA26A10();
          if (v30)
          {
            char v31 = v26;
            sub_21FA26A10();
            if (v30 == 1)
            {
              sub_21FA26A30();
              sub_21F7C618C(v142, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
              sub_21F7652C0(v24, v25, v26);
              swift_bridgeObjectRetain();
            }
            else
            {
              sub_21F7C618C(v142, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
              sub_21F7652C0(v24, v25, v26);
              swift_bridgeObjectRetain();
              sub_21F770E44(v27, v28, 2);
              sub_21FA25D30();
            }
          }
          else
          {
            sub_21FA26A10();
            sub_21FA26A30();
            sub_21F7C618C(v142, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
            char v31 = v26;
            sub_21F7652C0(v24, v25, v26);
            swift_bridgeObjectRetain();
          }
        }
        sub_21FA26A10();
        sub_21F7656A8(v24, v25, v31);
        swift_bridgeObjectRelease();
        uint64_t v9 = v27;
        uint64_t v10 = v28;
        char v11 = v30;
        goto LABEL_11;
      }
      uint64_t v14 = *(void *)(v13 + 8);
      char v15 = *(unsigned char *)(v13 + 24);
      uint64_t v117 = v8;
      uint64_t v123 = *(void *)(v13 + 16);
      uint64_t v125 = *(void *)(v13 + 48);
      int v16 = *(char *)(v13 + 56);
      int v17 = *(unsigned __int8 *)(v13 + 56);
      uint64_t v18 = *(void *)(v13 + 88);
      uint64_t v127 = *(void *)(v13 + 40);
      uint64_t v130 = *(void *)(v13 + 80);
      char v19 = *(unsigned char *)(v13 + 96);
      uint64_t v133 = *(void *)(v13 + 120);
      uint64_t v135 = *(void *)(v13 + 112);
      unsigned int v20 = *(unsigned __int8 *)(v13 + 128);
      sub_21FA26A10();
      sub_21FA26A10();
      if (v16 < 0)
      {
        sub_21FA26A10();
        sub_21FA26A10();
        sub_21FA26A30();
        sub_21FA26A30();
        sub_21F7C618C(v142, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
        sub_21F7652C0(v14, v123, v15);
        swift_bridgeObjectRetain();
        sub_21F7652C0(v130, v18, v19);
        swift_bridgeObjectRetain();
        sub_21F770E44(v135, v133, v20);
        unsigned int v21 = v20;
        uint64_t v22 = v14;
        uint64_t v23 = v123;
        char v32 = v19;
        uint64_t v8 = v117;
        if ((v21 & 0x80) == 0) {
          goto LABEL_24;
        }
      }
      else
      {
        char v110 = v19;
        unsigned int v21 = v20;
        sub_21FA26A10();
        if (v17)
        {
          uint64_t v22 = v14;
          uint64_t v23 = v123;
          uint64_t v8 = v117;
          if (v17 == 1)
          {
            sub_21FA26A10();
            sub_21FA26A30();
            sub_21F7C618C(v142, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
            sub_21F7652C0(v14, v123, v15);
            swift_bridgeObjectRetain();
            char v32 = v110;
            sub_21F7652C0(v130, v18, v110);
            swift_bridgeObjectRetain();
            sub_21F770E44(v135, v133, v21);
            if ((v21 & 0x80) == 0) {
              goto LABEL_24;
            }
          }
          else
          {
            sub_21FA26A10();
            sub_21F7C618C(v142, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
            sub_21F7652C0(v14, v123, v15);
            swift_bridgeObjectRetain();
            char v32 = v110;
            sub_21F7652C0(v130, v18, v110);
            swift_bridgeObjectRetain();
            sub_21F770E44(v135, v133, v21);
            sub_21F770E44(v127, v125, 2);
            sub_21FA25D30();
            if ((v21 & 0x80) == 0)
            {
LABEL_24:
              sub_21FA26A10();
              sub_21FA26A10();
              if (v21 > 1) {
                sub_21FA25D30();
              }
              else {
                sub_21FA26A30();
              }
              goto LABEL_10;
            }
          }
        }
        else
        {
          sub_21FA26A10();
          sub_21FA26A30();
          sub_21F7C618C(v142, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
          uint64_t v22 = v14;
          uint64_t v23 = v123;
          sub_21F7652C0(v14, v123, v15);
          swift_bridgeObjectRetain();
          char v32 = v19;
          sub_21F7652C0(v130, v18, v19);
          swift_bridgeObjectRetain();
          sub_21F770E44(v135, v133, v21);
          uint64_t v8 = v117;
          if ((v21 & 0x80) == 0) {
            goto LABEL_24;
          }
        }
      }
      sub_21FA26A10();
      sub_21FA26A10();
      sub_21FA26A30();
      sub_21FA26A30();
      uint64_t v23 = v123;
LABEL_10:
      sub_21F7656A8(v22, v23, v15);
      swift_bridgeObjectRelease();
      sub_21F770E38(v127, v125, v17);
      sub_21F7656A8(v130, v18, v32);
      swift_bridgeObjectRelease();
      uint64_t v10 = v133;
      uint64_t v9 = v135;
      char v11 = v21;
LABEL_11:
      sub_21F770E38(v9, v10, v11);
      sub_21F7C618C(v142, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
      v8 += 152;
      --v137;
    }
    while (v137);
  }
  uint64_t result = sub_21FA26A50();
  uint64_t v33 = v93;
  uint64_t v34 = -1 << *(unsigned char *)(v93 + 32);
  a2 = result & ~v34;
  uint64_t v35 = v93 + 56;
  if (((*(void *)(v93 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
  {
    uint64_t v5 = v99;
    uint64_t v3 = v94;
    goto LABEL_38;
  }
  uint64_t v36 = ~v34;
  uint64_t v37 = v92;
  uint64_t v5 = v99;
  uint64_t v3 = v94;
  uint64_t v91 = ~v34;
  while (2)
  {
    uint64_t v46 = *(void *)(*(void *)(v33 + 48) + 8 * a2);
    if (*(void *)(v46 + 16) != v37) {
      goto LABEL_44;
    }
    unint64_t v95 = a2;
    if (!v37 || v46 == v5) {
      goto LABEL_165;
    }
    swift_bridgeObjectRetain();
    sub_21F7BB81C(v46 + 32, (uint64_t)v141);
    if (!*(void *)(v5 + 16))
    {
LABEL_162:
      __break(1u);
      goto LABEL_163;
    }
    uint64_t v47 = 0;
    uint64_t v48 = 184;
    uint64_t v100 = v46;
    while (1)
    {
      sub_21F7BB81C(v5 + v48 - 152, (uint64_t)v142);
      sub_21F7BB81C((uint64_t)v141, (uint64_t)v143);
      uint64_t v124 = v48;
      uint64_t v126 = v47;
      if (sub_21F7E108C((uint64_t)v143) == 1) {
        break;
      }
      uint64_t v63 = (unsigned __int8 *)sub_21F7E1098((uint64_t)v143);
      int v64 = *v63;
      uint64_t v129 = *((void *)v63 + 1);
      uint64_t v132 = *((void *)v63 + 2);
      char v134 = v63[24];
      uint64_t v65 = *((void *)v63 + 5);
      uint64_t v66 = *((uint64_t *)v63 + 6);
      int v67 = v63[56];
      int v68 = v63[80];
      sub_21F7BB81C((uint64_t)v142, (uint64_t)v140);
      int v69 = sub_21F7E108C((uint64_t)v140);
      uint64_t v70 = (unsigned __int8 *)sub_21F7E1098((uint64_t)v140);
      if (v69 == 1 || v64 != *v70) {
        goto LABEL_160;
      }
      int v114 = v68;
      uint64_t v71 = *((void *)v70 + 1);
      uint64_t v72 = *((void *)v70 + 2);
      char v73 = v70[24];
      uint64_t v122 = *((uint64_t *)v70 + 5);
      uint64_t v120 = *((uint64_t *)v70 + 6);
      int v139 = (char)v70[56];
      int v112 = v70[80];
      sub_21F7C618C(v142, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
      sub_21F7C618C(v141, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
      sub_21F7652C0(v129, v132, v134);
      swift_bridgeObjectRetain();
      sub_21F770E44(v65, v66, v67);
      sub_21F7652C0(v71, v72, v73);
      swift_bridgeObjectRetain();
      sub_21F770E44(v122, v120, v139);
      if ((sub_21FA25320() & 1) == 0)
      {
        sub_21F7656A8(v71, v72, v73);
        swift_bridgeObjectRelease();
        sub_21F770E38(v122, v120, v139);
        sub_21F7656A8(v129, v132, v134);
        swift_bridgeObjectRelease();
        uint64_t v87 = v65;
        uint64_t v88 = v66;
        char v89 = v67;
        goto LABEL_150;
      }
      if ((v67 & 0x80) != 0)
      {
        if ((v139 & 0x80000000) == 0)
        {
          sub_21F7656A8(v71, v72, v73);
          swift_bridgeObjectRelease();
          sub_21F770E38(v122, v120, v139);
          sub_21F7656A8(v129, v132, v134);
          swift_bridgeObjectRelease();
          goto LABEL_151;
        }
        sub_21F7656A8(v71, v72, v73);
        swift_bridgeObjectRelease();
        sub_21F7656A8(v129, v132, v134);
        swift_bridgeObjectRelease();
        if (v67)
        {
          uint64_t v5 = v99;
          int v79 = v114;
          double v80 = *(double *)&v65;
          if ((v139 & 1) == 0) {
            goto LABEL_159;
          }
        }
        else
        {
          uint64_t v5 = v99;
          int v79 = v114;
          double v80 = *(double *)&v65;
          if (v139) {
            goto LABEL_159;
          }
        }
        if (v80 != *(double *)&v122) {
          goto LABEL_159;
        }
        uint64_t v81 = v100;
        if (*(double *)&v66 != *(double *)&v120) {
          goto LABEL_159;
        }
      }
      else
      {
        if (v139 < 0)
        {
          sub_21F7656A8(v71, v72, v73);
          swift_bridgeObjectRelease();
          sub_21F7656A8(v129, v132, v134);
          swift_bridgeObjectRelease();
          uint64_t v87 = v65;
          uint64_t v88 = v66;
          char v89 = v67;
          goto LABEL_150;
        }
        if (!v67)
        {
          if (v139)
          {
            sub_21F7656A8(v71, v72, v73);
            swift_bridgeObjectRelease();
            sub_21F770E38(v122, v120, v139);
            sub_21F7656A8(v129, v132, v134);
            swift_bridgeObjectRelease();
            uint64_t v87 = v65;
            uint64_t v88 = v66;
            char v89 = 0;
            goto LABEL_150;
          }
          double v74 = *(double *)&v65;
          double v75 = *(double *)&v122;
          sub_21F7656A8(v71, v72, v73);
          swift_bridgeObjectRelease();
          sub_21F770E38(v122, v120, 0);
          sub_21F7656A8(v129, v132, v134);
          swift_bridgeObjectRelease();
          uint64_t v76 = v65;
          uint64_t v77 = v66;
          char v78 = 0;
          goto LABEL_84;
        }
        if (v67 == 1)
        {
          if (v139 != 1)
          {
            sub_21F7656A8(v71, v72, v73);
            swift_bridgeObjectRelease();
            sub_21F770E38(v122, v120, v139);
            sub_21F7656A8(v129, v132, v134);
            swift_bridgeObjectRelease();
            uint64_t v87 = v65;
            uint64_t v88 = v66;
            char v89 = 1;
            goto LABEL_150;
          }
          double v74 = *(double *)&v65;
          double v75 = *(double *)&v122;
          sub_21F7656A8(v71, v72, v73);
          swift_bridgeObjectRelease();
          sub_21F770E38(v122, v120, 1);
          sub_21F7656A8(v129, v132, v134);
          swift_bridgeObjectRelease();
          uint64_t v76 = v65;
          uint64_t v77 = v66;
          char v78 = 1;
LABEL_84:
          sub_21F770E38(v76, v77, v78);
          uint64_t v5 = v99;
          uint64_t v81 = v100;
          int v79 = v114;
          if (v74 != v75) {
            goto LABEL_159;
          }
          goto LABEL_126;
        }
        if (v139 != 2)
        {
          sub_21F7656A8(v71, v72, v73);
          swift_bridgeObjectRelease();
          sub_21F770E38(v122, v120, v139);
          sub_21F7656A8(v129, v132, v134);
          swift_bridgeObjectRelease();
          uint64_t v87 = v65;
          uint64_t v88 = v66;
          char v89 = 2;
LABEL_150:
          sub_21F770E38(v87, v88, v89);
LABEL_151:
          uint64_t v5 = v99;
          goto LABEL_159;
        }
        if (v65 == v122 && v66 == v120)
        {
          sub_21F7656A8(v71, v72, v73);
          swift_bridgeObjectRelease();
          sub_21F770E38(v65, v66, 2);
          sub_21F7656A8(v129, v132, v134);
          swift_bridgeObjectRelease();
          sub_21F770E38(v65, v66, 2);
          uint64_t v5 = v99;
          uint64_t v81 = v100;
          int v79 = v114;
        }
        else
        {
          char v84 = sub_21FA268D0();
          uint64_t v85 = v71;
          char v86 = v84;
          sub_21F7656A8(v85, v72, v73);
          swift_bridgeObjectRelease();
          sub_21F770E38(v122, v120, 2);
          sub_21F7656A8(v129, v132, v134);
          swift_bridgeObjectRelease();
          sub_21F770E38(v65, v66, 2);
          uint64_t v5 = v99;
          uint64_t v81 = v100;
          int v79 = v114;
          if ((v86 & 1) == 0) {
            goto LABEL_159;
          }
        }
      }
LABEL_126:
      sub_21F7C618C(v142, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
      sub_21F7C618C(v141, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
      if (v79 != v112) {
        goto LABEL_160;
      }
LABEL_130:
      if (v92 - 1 == v126) {
        goto LABEL_164;
      }
      sub_21F7BB81C(v81 + v124, (uint64_t)v141);
      uint64_t v48 = v124 + 152;
      uint64_t v47 = v126 + 1;
      if ((unint64_t)(v126 + 1) >= *(void *)(v5 + 16)) {
        goto LABEL_162;
      }
    }
    uint64_t v49 = (unsigned __int8 *)sub_21F7E1098((uint64_t)v143);
    sub_21F7BB81C((uint64_t)v142, (uint64_t)v140);
    int v50 = sub_21F7E108C((uint64_t)v140);
    int64_t v51 = (unsigned __int8 *)sub_21F7E1098((uint64_t)v140);
    if (v50 != 1 || *v49 != *v51) {
      goto LABEL_160;
    }
    uint64_t v53 = *((void *)v49 + 1);
    uint64_t v52 = *((void *)v49 + 2);
    char v54 = v49[24];
    uint64_t v118 = *((uint64_t *)v49 + 5);
    uint64_t v55 = *((uint64_t *)v49 + 6);
    int v56 = v49[56];
    char v101 = v56;
    char v102 = v54;
    uint64_t v57 = *((void *)v49 + 11);
    char v58 = v49[96];
    uint64_t v136 = *((void *)v49 + 10);
    uint64_t v105 = *((uint64_t *)v49 + 15);
    uint64_t v106 = *((uint64_t *)v49 + 14);
    int v59 = v49[128];
    int v119 = (char)v59;
    uint64_t v107 = *((void *)v51 + 1);
    uint64_t v108 = *((void *)v51 + 2);
    char v109 = v51[24];
    uint64_t v121 = *((uint64_t *)v51 + 6);
    int v138 = (char)v51[56];
    uint64_t v128 = *((void *)v51 + 10);
    uint64_t v131 = *((void *)v51 + 11);
    uint64_t v113 = *((uint64_t *)v51 + 14);
    uint64_t v115 = *((uint64_t *)v51 + 5);
    uint64_t v111 = *((uint64_t *)v51 + 15);
    char v103 = v51[96];
    int v104 = (char)v51[128];
    sub_21F7C618C(v142, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
    sub_21F7C618C(v141, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
    sub_21F7652C0(v53, v52, v54);
    swift_bridgeObjectRetain();
    sub_21F770E44(v118, v55, v56);
    uint64_t v98 = v57;
    sub_21F7652C0(v136, v57, v58);
    swift_bridgeObjectRetain();
    int v96 = v59;
    sub_21F770E44(v106, v105, v59);
    sub_21F7652C0(v107, v108, v109);
    swift_bridgeObjectRetain();
    sub_21F770E44(v115, v121, v138);
    sub_21F7652C0(v128, v131, v103);
    swift_bridgeObjectRetain();
    sub_21F770E44(v113, v111, v104);
    uint64_t v45 = v52;
    if ((sub_21FA25320() & 1) == 0)
    {
      uint64_t v44 = v55;
      char v60 = v101;
      goto LABEL_136;
    }
    char v60 = v56;
    uint64_t v97 = v52;
    if ((char)v56 < 0)
    {
      uint64_t v61 = v115;
      if ((v138 & 0x80000000) == 0)
      {
LABEL_135:
        uint64_t v44 = v55;
LABEL_136:
        char v42 = v58;
        uint64_t v43 = v98;
        goto LABEL_42;
      }
      uint64_t v62 = v55;
      if (v56)
      {
        if ((v138 & 1) == 0)
        {
LABEL_40:
          char v42 = v58;
          uint64_t v43 = v98;
          goto LABEL_41;
        }
      }
      else if (v138)
      {
        goto LABEL_40;
      }
      char v42 = v58;
      uint64_t v43 = v98;
      if (*(double *)&v118 != *(double *)&v115 || *(double *)&v55 != *(double *)&v121)
      {
        char v60 = v56;
        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v61 = v115;
      if (v138 < 0) {
        goto LABEL_135;
      }
      if (v56)
      {
        char v42 = v58;
        uint64_t v43 = v98;
        if (v56 == 1)
        {
          uint64_t v62 = v55;
          if (v138 == 1)
          {
            if (*(double *)&v118 != *(double *)&v115)
            {
              char v60 = 1;
              LOBYTE(v138) = 1;
              goto LABEL_41;
            }
            goto LABEL_98;
          }
          char v60 = 1;
LABEL_41:
          uint64_t v44 = v62;
          uint64_t v45 = v97;
LABEL_42:
          sub_21F7656A8(v128, v131, v103);
          swift_bridgeObjectRelease();
          sub_21F770E38(v113, v111, v104);
          sub_21F7656A8(v107, v108, v109);
          swift_bridgeObjectRelease();
          sub_21F770E38(v115, v121, v138);
          sub_21F7656A8(v136, v43, v42);
          swift_bridgeObjectRelease();
          sub_21F770E38(v106, v105, v119);
          sub_21F7656A8(v53, v45, v102);
          swift_bridgeObjectRelease();
          sub_21F770E38(v118, v44, v60);
          sub_21F7C618C(v142, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
          sub_21F7C618C(v141, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v5 = v99;
          goto LABEL_43;
        }
        uint64_t v62 = v55;
        if (v138 != 2)
        {
          char v60 = 2;
          goto LABEL_41;
        }
        if ((v118 != v115 || v55 != v121) && (sub_21FA268D0() & 1) == 0)
        {
          char v60 = 2;
          LOBYTE(v138) = 2;
          goto LABEL_41;
        }
      }
      else
      {
        uint64_t v62 = v55;
        char v42 = v58;
        uint64_t v43 = v98;
        if (v138)
        {
          char v60 = 0;
          goto LABEL_41;
        }
        if (*(double *)&v118 != *(double *)&v115)
        {
          char v60 = 0;
          LOBYTE(v138) = 0;
          goto LABEL_41;
        }
      }
    }
LABEL_98:
    if ((sub_21FA25320() & 1) == 0)
    {
      sub_21F7656A8(v128, v131, v103);
      swift_bridgeObjectRelease();
      sub_21F770E38(v113, v111, v104);
LABEL_156:
      uint64_t v82 = v105;
      uint64_t v83 = v106;
      goto LABEL_157;
    }
    if (v119 < 0)
    {
      uint64_t v82 = v105;
      if ((v104 & 0x80000000) == 0)
      {
        sub_21F7656A8(v128, v131, v103);
        swift_bridgeObjectRelease();
        sub_21F770E38(v113, v111, v104);
        uint64_t v83 = v106;
        goto LABEL_157;
      }
      sub_21F7656A8(v128, v131, v103);
      swift_bridgeObjectRelease();
      sub_21F7656A8(v107, v108, v109);
      swift_bridgeObjectRelease();
      sub_21F770E38(v61, v121, v138);
      sub_21F7656A8(v136, v43, v42);
      uint64_t v83 = v106;
      if (v119)
      {
        uint64_t v5 = v99;
        if ((v104 & 1) == 0) {
          goto LABEL_158;
        }
      }
      else
      {
        uint64_t v5 = v99;
        if (v104) {
          goto LABEL_158;
        }
      }
      if (*(double *)&v106 != *(double *)&v113) {
        goto LABEL_158;
      }
      uint64_t v81 = v100;
      if (*(double *)&v105 != *(double *)&v111) {
        goto LABEL_158;
      }
LABEL_129:
      swift_bridgeObjectRelease();
      sub_21F770E38(v83, v82, v119);
      sub_21F7656A8(v53, v97, v102);
      swift_bridgeObjectRelease();
      sub_21F770E38(v118, v62, v101);
      sub_21F7C618C(v142, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
      sub_21F7C618C(v141, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
      goto LABEL_130;
    }
    if (v104 < 0)
    {
      sub_21F7656A8(v128, v131, v103);
      swift_bridgeObjectRelease();
      goto LABEL_156;
    }
    if (!v96)
    {
      if (!v104)
      {
        uint64_t v83 = v106;
        sub_21F7656A8(v128, v131, v103);
        swift_bridgeObjectRelease();
        sub_21F770E38(v113, v111, 0);
        sub_21F7656A8(v107, v108, v109);
        swift_bridgeObjectRelease();
        sub_21F770E38(v61, v121, v138);
        sub_21F7656A8(v136, v43, v42);
        uint64_t v5 = v99;
        uint64_t v81 = v100;
        uint64_t v82 = v105;
        if (*(double *)&v106 != *(double *)&v113)
        {
          LOBYTE(v119) = 0;
          goto LABEL_158;
        }
        goto LABEL_129;
      }
      sub_21F7656A8(v128, v131, v103);
      swift_bridgeObjectRelease();
      sub_21F770E38(v113, v111, v104);
      LOBYTE(v119) = 0;
      goto LABEL_156;
    }
    if (v96 == 1)
    {
      uint64_t v82 = v105;
      uint64_t v83 = v106;
      if (v104 == 1)
      {
        sub_21F7656A8(v128, v131, v103);
        swift_bridgeObjectRelease();
        sub_21F770E38(v113, v111, 1);
        sub_21F7656A8(v107, v108, v109);
        swift_bridgeObjectRelease();
        sub_21F770E38(v61, v121, v138);
        sub_21F7656A8(v136, v43, v42);
        uint64_t v5 = v99;
        uint64_t v81 = v100;
        if (*(double *)&v106 != *(double *)&v113)
        {
          LOBYTE(v119) = 1;
          goto LABEL_158;
        }
        goto LABEL_129;
      }
      sub_21F7656A8(v128, v131, v103);
      swift_bridgeObjectRelease();
      sub_21F770E38(v113, v111, v104);
      char v90 = 1;
LABEL_154:
      LOBYTE(v119) = v90;
LABEL_157:
      sub_21F7656A8(v107, v108, v109);
      swift_bridgeObjectRelease();
      sub_21F770E38(v61, v121, v138);
      sub_21F7656A8(v136, v43, v42);
      uint64_t v5 = v99;
      goto LABEL_158;
    }
    uint64_t v82 = v105;
    uint64_t v83 = v106;
    if (v104 != 2)
    {
      sub_21F7656A8(v128, v131, v103);
      swift_bridgeObjectRelease();
      sub_21F770E38(v113, v111, v104);
      char v90 = 2;
      goto LABEL_154;
    }
    if (v106 == v113 && v105 == v111)
    {
      sub_21F7656A8(v128, v131, v103);
      swift_bridgeObjectRelease();
      sub_21F770E38(v106, v105, 2);
      sub_21F7656A8(v107, v108, v109);
      swift_bridgeObjectRelease();
      sub_21F770E38(v61, v121, v138);
      sub_21F7656A8(v136, v43, v42);
      uint64_t v5 = v99;
      uint64_t v81 = v100;
      goto LABEL_129;
    }
    char v116 = sub_21FA268D0();
    sub_21F7656A8(v128, v131, v103);
    swift_bridgeObjectRelease();
    sub_21F770E38(v113, v111, 2);
    sub_21F7656A8(v107, v108, v109);
    swift_bridgeObjectRelease();
    sub_21F770E38(v61, v121, v138);
    sub_21F7656A8(v136, v43, v42);
    uint64_t v5 = v99;
    uint64_t v81 = v100;
    if (v116) {
      goto LABEL_129;
    }
    LOBYTE(v119) = 2;
LABEL_158:
    swift_bridgeObjectRelease();
    sub_21F770E38(v83, v82, v119);
    sub_21F7656A8(v53, v97, v102);
    swift_bridgeObjectRelease();
    sub_21F770E38(v118, v62, v101);
LABEL_159:
    sub_21F7C618C(v142, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
    sub_21F7C618C(v141, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
LABEL_160:
    uint64_t result = swift_bridgeObjectRelease();
LABEL_43:
    uint64_t v33 = v93;
    uint64_t v3 = v94;
    uint64_t v35 = v93 + 56;
    uint64_t v37 = v92;
    a2 = v95;
    uint64_t v36 = v91;
LABEL_44:
    a2 = (a2 + 1) & v36;
    if ((*(void *)(v35 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2)) {
      continue;
    }
    break;
  }
LABEL_38:
  uint64_t v38 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v38 + 48) + 8 * a2) = v5;
  uint64_t v39 = *(void *)(v38 + 16);
  BOOL v40 = __OFADD__(v39, 1);
  uint64_t v41 = v39 + 1;
  if (!v40)
  {
    *(void *)(v38 + 16) = v41;
    return result;
  }
LABEL_163:
  __break(1u);
LABEL_164:
  swift_bridgeObjectRelease();
LABEL_165:
  sub_21F76CA40(&qword_26AD468A8);
  uint64_t result = sub_21FA26980();
  __break(1u);
  return result;
}

uint64_t sub_21F7DB9A0(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v7 = *(void *)(*(void *)v3 + 16);
  unint64_t v8 = *(void *)(*(void *)v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_112;
  }
  if (a3)
  {
    sub_21F7D92A0();
  }
  else
  {
    if (v8 > v7)
    {
      sub_21F7DD5D8();
      goto LABEL_112;
    }
    sub_21F7DEB94();
  }
  uint64_t v9 = *(void *)v3;
  sub_21FA26A00();
  sub_21F8DBD4C((uint64_t)v100);
  uint64_t v10 = sub_21FA26A50();
  uint64_t v3 = -1 << *(unsigned char *)(v9 + 32);
  a2 = v10 & ~v3;
  uint64_t v95 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    sub_21F7BB81C(*(void *)(v9 + 48) + 152 * a2, (uint64_t)v100);
    sub_21F7C618C(v100, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
    BOOL v11 = sub_21F8DD75C((uint64_t)v100, a1);
    sub_21F7C618C(v100, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
    if (v11) {
      goto LABEL_118;
    }
    uint64_t v94 = ~v3;
    a2 = (a2 + 1) & ~v3;
    if ((*(void *)(v95 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v75 = v9;
      uint64_t v76 = a1;
      while (1)
      {
        sub_21F7BB81C(*(void *)(v9 + 48) + 152 * a2, (uint64_t)v96);
        sub_21F7BB81C((uint64_t)v96, (uint64_t)v97);
        int v12 = sub_21F7E108C((uint64_t)v97);
        uint64_t v13 = (unsigned __int8 *)sub_21F7E1098((uint64_t)v97);
        uint64_t v14 = v13;
        if (v12 == 1)
        {
          sub_21F7BB81C(a1, (uint64_t)v99);
          int v15 = sub_21F7E108C((uint64_t)v99);
          int v16 = (unsigned __int8 *)sub_21F7E1098((uint64_t)v99);
          if (v15 != 1 || *v14 != *v16) {
            goto LABEL_15;
          }
          unint64_t v65 = a2;
          uint64_t v84 = *((void *)v16 + 1);
          uint64_t v72 = *((void *)v16 + 2);
          uint64_t v93 = *((uint64_t *)v16 + 5);
          int v17 = (char)v16[56];
          uint64_t v88 = *((uint64_t *)v16 + 10);
          uint64_t v89 = *((uint64_t *)v16 + 6);
          uint64_t v87 = *((void *)v16 + 11);
          uint64_t v78 = *((uint64_t *)v16 + 15);
          uint64_t v79 = *((uint64_t *)v16 + 14);
          int v82 = (char)v16[128];
          unsigned __int8 v63 = v16[24];
          unsigned __int8 v64 = v16[96];
          uint64_t v18 = *((void *)v14 + 1);
          uint64_t v19 = *((void *)v14 + 2);
          uint64_t v20 = v14[24];
          uint64_t v21 = *((void *)v14 + 5);
          uint64_t v22 = *((uint64_t *)v14 + 6);
          uint64_t v23 = *((void *)v14 + 11);
          unsigned int v24 = v14[96];
          uint64_t v91 = *((uint64_t *)v14 + 10);
          uint64_t v80 = *((uint64_t *)v14 + 14);
          uint64_t v85 = *((uint64_t *)v14 + 15);
          int v86 = v14[128];
          int v71 = v14[56];
          sub_21F7C618C(v96, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
          sub_21F7652C0(v18, v19, v20);
          swift_bridgeObjectRetain();
          uint64_t v73 = v22;
          uint64_t v74 = v21;
          uint64_t v25 = v21;
          uint64_t v3 = v20;
          sub_21F770E44(v25, v22, v71);
          uint64_t v70 = v23;
          unsigned int v69 = v24;
          sub_21F7652C0(v91, v23, v24);
          swift_bridgeObjectRetain();
          sub_21F770E44(v80, v85, v86);
          uint64_t v4 = v63 & 1;
          sub_21F7652C0(v84, v72, v63 & 1);
          swift_bridgeObjectRetain();
          char v77 = v17;
          sub_21F770E44(v93, v89, v17);
          sub_21F7652C0(v88, v87, v64 & 1);
          swift_bridgeObjectRetain();
          sub_21F770E44(v79, v78, v82);
          uint64_t v68 = v18;
          uint64_t v66 = v19;
          char v67 = v3;
          if ((sub_21FA25320() & 1) == 0) {
            goto LABEL_13;
          }
          if ((v71 & 0x80) != 0)
          {
            if (v17 < 0)
            {
              if (v71)
              {
                if ((v17 & 1) == 0) {
                  goto LABEL_13;
                }
              }
              else if (v17)
              {
                goto LABEL_13;
              }
              if (*(double *)&v74 != *(double *)&v93 || *(double *)&v22 != *(double *)&v89) {
                goto LABEL_13;
              }
              goto LABEL_72;
            }
          }
          else if ((v17 & 0x80000000) == 0)
          {
            if (v71)
            {
              if (v71 != 1)
              {
                if (v17 != 2 || (v74 != v93 || v22 != v89) && (sub_21FA268D0() & 1) == 0) {
                  goto LABEL_13;
                }
                goto LABEL_72;
              }
              if (v17 == 1)
              {
LABEL_47:
                if (*(double *)&v74 != *(double *)&v93) {
                  goto LABEL_13;
                }
LABEL_72:
                uint64_t v3 = v64 & 1;
                if (sub_21FA25320())
                {
                  if ((v86 & 0x80) != 0)
                  {
                    uint64_t v42 = v80;
                    uint64_t v41 = v93;
                    a2 = v65;
                    if (v82 < 0)
                    {
                      uint64_t v43 = v85;
                      sub_21F7656A8(v88, v87, v64 & 1);
                      swift_bridgeObjectRelease();
                      sub_21F7656A8(v84, v72, v63 & 1);
                      swift_bridgeObjectRelease();
                      uint64_t v4 = v69;
                      if (v86)
                      {
                        uint64_t v9 = v75;
                        a1 = v76;
                        uint64_t v41 = v93;
                        if ((v82 & 1) == 0) {
                          goto LABEL_111;
                        }
                      }
                      else
                      {
                        uint64_t v9 = v75;
                        a1 = v76;
                        uint64_t v41 = v93;
                        if (v82) {
                          goto LABEL_111;
                        }
                      }
                      if (*(double *)&v80 == *(double *)&v79 && *(double *)&v85 == *(double *)&v78) {
                        goto LABEL_116;
                      }
                      goto LABEL_111;
                    }
                    uint64_t v43 = v85;
                    sub_21F7656A8(v88, v87, v64 & 1);
                    swift_bridgeObjectRelease();
                    uint64_t v53 = v78;
                    uint64_t v52 = v79;
                    char v54 = v82;
LABEL_108:
                    sub_21F770E38(v52, v53, v54);
                  }
                  else
                  {
                    uint64_t v41 = v93;
                    uint64_t v4 = v87;
                    a2 = v65;
                    if ((v82 & 0x80000000) == 0)
                    {
                      if (v86)
                      {
                        if (v86 == 1)
                        {
                          uint64_t v42 = v80;
                          uint64_t v43 = v85;
                          if (v82 == 1)
                          {
                            char v44 = v63 & 1;
                            double v45 = *(double *)&v80;
                            double v46 = *(double *)&v79;
                            sub_21F7656A8(v88, v87, v64 & 1);
                            swift_bridgeObjectRelease();
                            uint64_t v47 = v79;
                            uint64_t v48 = v78;
                            char v49 = 1;
LABEL_95:
                            sub_21F770E38(v47, v48, v49);
                            char v55 = v44;
                            uint64_t v41 = v93;
                            sub_21F7656A8(v84, v72, v55);
                            swift_bridgeObjectRelease();
                            uint64_t v9 = v75;
                            a1 = v76;
                            uint64_t v4 = v69;
                            if (v45 == v46) {
                              goto LABEL_116;
                            }
LABEL_111:
                            sub_21F770E38(v41, v89, v77);
                            sub_21F7656A8(v91, v70, v4);
                            swift_bridgeObjectRelease();
                            sub_21F770E38(v42, v43, v86);
                            sub_21F7656A8(v68, v66, v67);
                            swift_bridgeObjectRelease();
                            uint64_t v39 = v73;
                            uint64_t v40 = v74;
                            char v38 = v71;
                            goto LABEL_54;
                          }
                        }
                        else
                        {
                          if (v82 == 2)
                          {
                            uint64_t v3 = v78;
                            if (v80 == v79 && v85 == v78) {
                              goto LABEL_115;
                            }
                            uint64_t v42 = v80;
                            uint64_t v43 = v85;
                            char v56 = sub_21FA268D0();
                            sub_21F7656A8(v88, v87, v64 & 1);
                            swift_bridgeObjectRelease();
                            sub_21F770E38(v79, v78, 2);
                            sub_21F7656A8(v84, v72, v63 & 1);
                            swift_bridgeObjectRelease();
                            uint64_t v9 = v75;
                            a1 = v76;
                            uint64_t v41 = v93;
                            uint64_t v4 = v69;
                            if (v56)
                            {
LABEL_116:
                              char v62 = v67;
                              uint64_t v78 = v43;
                              uint64_t v79 = v42;
                              goto LABEL_117;
                            }
                            goto LABEL_111;
                          }
                          uint64_t v42 = v80;
                          uint64_t v43 = v85;
                        }
                      }
                      else
                      {
                        uint64_t v42 = v80;
                        uint64_t v43 = v85;
                        if (!v82)
                        {
                          char v44 = v63 & 1;
                          double v45 = *(double *)&v80;
                          double v46 = *(double *)&v79;
                          sub_21F7656A8(v88, v87, v64 & 1);
                          swift_bridgeObjectRelease();
                          uint64_t v47 = v79;
                          uint64_t v48 = v78;
                          char v49 = 0;
                          goto LABEL_95;
                        }
                      }
                      sub_21F7656A8(v88, v87, v64 & 1);
                      swift_bridgeObjectRelease();
                      uint64_t v53 = v78;
                      uint64_t v52 = v79;
                      char v54 = v82;
                      goto LABEL_108;
                    }
                    uint64_t v42 = v80;
                    uint64_t v43 = v85;
                    sub_21F7656A8(v88, v87, v64 & 1);
                    swift_bridgeObjectRelease();
                  }
                  uint64_t v50 = v84;
                  unsigned __int8 v51 = v63;
                  uint64_t v4 = v69;
                }
                else
                {
                  uint64_t v42 = v80;
                  uint64_t v43 = v85;
                  sub_21F7656A8(v88, v87, v64 & 1);
                  swift_bridgeObjectRelease();
                  sub_21F770E38(v79, v78, v82);
                  uint64_t v41 = v93;
                  uint64_t v50 = v84;
                  unsigned __int8 v51 = v63;
                  uint64_t v4 = v69;
                  a2 = v65;
                }
                sub_21F7656A8(v50, v72, v51 & 1);
                swift_bridgeObjectRelease();
                uint64_t v9 = v75;
                a1 = v76;
                goto LABEL_111;
              }
            }
            else if (!v17)
            {
              goto LABEL_47;
            }
          }
LABEL_13:
          sub_21F7656A8(v88, v87, v64 & 1);
          swift_bridgeObjectRelease();
          sub_21F770E38(v79, v78, v82);
          sub_21F7656A8(v84, v72, v63 & 1);
          swift_bridgeObjectRelease();
          sub_21F770E38(v93, v89, v17);
          sub_21F7656A8(v91, v23, v24);
          swift_bridgeObjectRelease();
          sub_21F770E38(v80, v85, v86);
          sub_21F7656A8(v18, v19, v3);
          swift_bridgeObjectRelease();
          sub_21F770E38(v74, v22, v71);
          uint64_t v9 = v75;
          a1 = v76;
          a2 = v65;
          goto LABEL_14;
        }
        uint64_t v3 = *v13;
        uint64_t v26 = *((void *)v13 + 1);
        uint64_t v27 = *((void *)v13 + 2);
        char v28 = v13[24];
        uint64_t v4 = *((void *)v13 + 4);
        uint64_t v91 = *((uint64_t *)v13 + 6);
        uint64_t v92 = *((uint64_t *)v13 + 5);
        LODWORD(v93) = v13[56];
        int v29 = v13[80];
        sub_21F7BB81C(a1, (uint64_t)v98);
        int v30 = sub_21F7E108C((uint64_t)v98);
        char v31 = (unsigned __int8 *)sub_21F7E1098((uint64_t)v98);
        if (v30 == 1 || v3 != *v31) {
          goto LABEL_15;
        }
        LODWORD(v79) = v29;
        uint64_t v83 = *((void *)v31 + 2);
        uint64_t v84 = *((void *)v31 + 1);
        char v81 = v31[24];
        uint64_t v3 = v26;
        uint64_t v88 = *((uint64_t *)v31 + 6);
        uint64_t v89 = *((uint64_t *)v31 + 5);
        uint64_t v4 = (char)v31[56];
        LODWORD(v78) = v31[80];
        sub_21F7C618C(v96, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
        sub_21F7652C0(v26, v27, v28);
        swift_bridgeObjectRetain();
        sub_21F770E44(v92, v91, v93);
        sub_21F7652C0(v84, v83, v81);
        swift_bridgeObjectRetain();
        sub_21F770E44(v89, v88, v4);
        LOBYTE(v86) = v27;
        if ((sub_21FA25320() & 1) == 0)
        {
          sub_21F7656A8(v84, v83, v81);
          swift_bridgeObjectRelease();
          sub_21F770E38(v89, v88, v4);
          goto LABEL_51;
        }
        uint64_t v3 = v4;
        uint64_t v4 = v89;
        if ((v93 & 0x80) == 0) {
          break;
        }
        if ((v3 & 0x80000000) == 0) {
          goto LABEL_50;
        }
        sub_21F7656A8(v84, v83, v81);
        swift_bridgeObjectRelease();
        sub_21F7656A8(v26, v27, v28);
        swift_bridgeObjectRelease();
        char v38 = v93;
        if ((v93 & 1) == 0)
        {
          uint64_t v9 = v75;
          a1 = v76;
          uint64_t v39 = v91;
          if ((v3 & 1) != 0 || *(double *)&v92 != *(double *)&v89 || *(double *)&v91 != *(double *)&v88) {
            goto LABEL_53;
          }
          goto LABEL_82;
        }
        uint64_t v9 = v75;
        a1 = v76;
        uint64_t v39 = v91;
        if ((v3 & 1) == 0 || *(double *)&v92 != *(double *)&v89) {
          goto LABEL_53;
        }
        sub_21F770E38(v92, v91, v93);
        if (*(double *)&v91 != *(double *)&v88) {
          goto LABEL_14;
        }
LABEL_83:
        sub_21F7C618C(v96, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
        if (v79 == v78) {
          goto LABEL_118;
        }
LABEL_15:
        a2 = (a2 + 1) & v94;
        if (((*(void *)(v95 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          goto LABEL_112;
        }
      }
      if ((v3 & 0x80000000) != 0)
      {
        sub_21F7656A8(v84, v83, v81);
        swift_bridgeObjectRelease();
LABEL_51:
        char v32 = v28;
LABEL_52:
        sub_21F7656A8(v26, v27, v32);
        swift_bridgeObjectRelease();
        uint64_t v9 = v75;
        a1 = v76;
        char v38 = v93;
        uint64_t v39 = v91;
LABEL_53:
        uint64_t v40 = v92;
LABEL_54:
        sub_21F770E38(v40, v39, v38);
LABEL_14:
        sub_21F7C618C(v96, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
        goto LABEL_15;
      }
      if (v93)
      {
        if (v93 != 1)
        {
          char v32 = v28;
          if (v3 != 2)
          {
LABEL_64:
            sub_21F7656A8(v84, v83, v81);
            swift_bridgeObjectRelease();
            sub_21F770E38(v89, v88, v3);
            goto LABEL_52;
          }
          uint64_t v3 = v88;
          if (v92 == v89 && v91 == v88)
          {
            sub_21F7656A8(v84, v83, v81);
            swift_bridgeObjectRelease();
            sub_21F770E38(v92, v91, 2);
            sub_21F7656A8(v26, v27, v28);
            swift_bridgeObjectRelease();
            uint64_t v9 = v75;
            a1 = v76;
            char v38 = v93;
            uint64_t v39 = v91;
          }
          else
          {
            char v77 = sub_21FA268D0();
            sub_21F7656A8(v84, v83, v81);
            swift_bridgeObjectRelease();
            sub_21F770E38(v89, v88, 2);
            sub_21F7656A8(v26, v27, v28);
            swift_bridgeObjectRelease();
            uint64_t v9 = v75;
            a1 = v76;
            char v38 = v93;
            uint64_t v39 = v91;
            if ((v77 & 1) == 0) {
              goto LABEL_53;
            }
          }
          goto LABEL_82;
        }
        char v32 = v28;
        if (v3 != 1) {
          goto LABEL_64;
        }
        double v33 = *(double *)&v92;
        double v34 = *(double *)&v89;
        sub_21F7656A8(v84, v83, v81);
        swift_bridgeObjectRelease();
        sub_21F770E38(v89, v88, 1);
        uint64_t v35 = v26;
        uint64_t v36 = v27;
        char v37 = v28;
      }
      else
      {
        if (v3)
        {
LABEL_50:
          sub_21F7656A8(v84, v83, v81);
          swift_bridgeObjectRelease();
          sub_21F770E38(v89, v88, v3);
          goto LABEL_51;
        }
        double v33 = *(double *)&v92;
        double v34 = *(double *)&v89;
        sub_21F7656A8(v84, v83, v81);
        swift_bridgeObjectRelease();
        sub_21F770E38(v89, v88, 0);
        uint64_t v35 = v26;
        uint64_t v36 = v27;
        char v37 = v28;
      }
      sub_21F7656A8(v35, v36, v37);
      swift_bridgeObjectRelease();
      uint64_t v9 = v75;
      a1 = v76;
      char v38 = v93;
      uint64_t v39 = v91;
      if (v33 != v34) {
        goto LABEL_53;
      }
LABEL_82:
      sub_21F770E38(v92, v39, v38);
      goto LABEL_83;
    }
  }
LABEL_112:
  uint64_t v57 = *v90;
  *(void *)(*v90 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_21F7BB81C(a1, *(void *)(v57 + 48) + 152 * a2);
  uint64_t v59 = *(void *)(v57 + 16);
  BOOL v60 = __OFADD__(v59, 1);
  uint64_t v61 = v59 + 1;
  if (!v60)
  {
    *(void *)(v57 + 16) = v61;
    return result;
  }
  __break(1u);
LABEL_115:
  char v62 = v67;
  sub_21F7656A8(v88, v4, v64 & 1);
  swift_bridgeObjectRelease();
  sub_21F770E38(v79, v3, 2);
  sub_21F7656A8(v84, v72, v63 & 1);
  swift_bridgeObjectRelease();
LABEL_117:
  sub_21F770E38(v93, v89, v77);
  sub_21F7656A8(v91, v70, v69);
  swift_bridgeObjectRelease();
  sub_21F770E38(v79, v78, v86);
  sub_21F7656A8(v68, v66, v62);
  swift_bridgeObjectRelease();
  sub_21F770E38(v74, v73, v71);
  sub_21F7C618C(v96, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
LABEL_118:
  uint64_t result = sub_21FA26980();
  __break(1u);
  return result;
}

uint64_t sub_21F7DC88C(void *a1, unint64_t a2, char a3)
{
  uint64_t v5 = (uint64_t)a1;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if (a3)
    {
      sub_21F7D9570();
    }
    else
    {
      if (v7 > v6)
      {
        sub_21F7DD7C0();
        goto LABEL_21;
      }
      sub_21F7DEE4C();
    }
    uint64_t v8 = *v3;
    sub_21FA26A00();
    uint64_t v9 = sub_21FA26A50();
    uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
    a2 = v9 & ~v10;
    uint64_t v34 = v8 + 56;
    uint64_t v35 = v8;
    if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v33 = ~v10;
      do
      {
        BOOL v11 = (uint64_t *)(*(void *)(v35 + 48) + (a2 << 6));
        uint64_t v13 = *v11;
        uint64_t v12 = v11[1];
        uint64_t v14 = v11[2];
        uint64_t v37 = v11[3];
        uint64_t v16 = v11[4];
        uint64_t v15 = v11[5];
        uint64_t v17 = v11[6];
        if (v17 < 0)
        {
          sub_21F7E0EDC(v5, (uint64_t)v38);
          char v20 = v42;
          if (v42 < 0)
          {
            v42 &= ~0x8000000000000000;
            uint64_t v31 = v38[1];
            uint64_t v32 = v38[0];
            char v30 = v39;
            uint64_t v28 = v41;
            uint64_t v29 = v40;
            sub_21F7E0F38(v13, v12, v14, v37, v16, v15, v17);
            sub_21F7652C0(v13, v12, v14 & 1);
            swift_bridgeObjectRetain();
            sub_21F7652C0(v32, v31, v30);
            swift_bridgeObjectRetain();
            sub_21F7652C0(v16, v15, v17 & 1);
            swift_bridgeObjectRetain();
            sub_21F7652C0(v29, v28, v20 & 1);
            swift_bridgeObjectRetain();
            if (sub_21FA25320())
            {
              char v27 = sub_21FA25320();
              sub_21F7656A8(v29, v28, v20 & 1);
              swift_bridgeObjectRelease();
              sub_21F7656A8(v16, v15, v17 & 1);
              swift_bridgeObjectRelease();
              sub_21F7656A8(v32, v31, v30);
              swift_bridgeObjectRelease();
              sub_21F7656A8(v13, v12, v14 & 1);
              swift_bridgeObjectRelease();
              sub_21F7E0FC0(v13, v12, v14, v37, v16, v15, v17);
              uint64_t v5 = (uint64_t)a1;
              if (v27) {
                goto LABEL_24;
              }
            }
            else
            {
              sub_21F7656A8(v29, v28, v20 & 1);
              swift_bridgeObjectRelease();
              sub_21F7656A8(v16, v15, v17 & 1);
              swift_bridgeObjectRelease();
              sub_21F7656A8(v32, v31, v30);
              swift_bridgeObjectRelease();
              sub_21F7656A8(v13, v12, v14 & 1);
              swift_bridgeObjectRelease();
              sub_21F7E0FC0(v13, v12, v14, v37, v16, v15, v17);
              uint64_t v5 = (uint64_t)a1;
            }
          }
        }
        else
        {
          sub_21F7E0EDC(v5, (uint64_t)&v43);
          if (v44 < 0)
          {
            v44 &= ~0x8000000000000000;
          }
          else
          {
            uint64_t v18 = v12;
            sub_21F7E0F38(v13, v12, v14, v37, v16, v15, v17);
            sub_21F7E1048(a1, (void (*)(void, void, void, void, void, void, void, void))sub_21F7E0F38);
            uint64_t v5 = (uint64_t)a1;
            char v19 = sub_21FA25320();
            sub_21F7E1048(a1, (void (*)(void, void, void, void, void, void, void, void))sub_21F7E0FC0);
            sub_21F7E0FC0(v13, v18, v14, v37, v16, v15, v17);
            if (v19) {
              goto LABEL_24;
            }
          }
        }
        a2 = (a2 + 1) & v33;
      }
      while (((*(void *)(v34 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_21:
  uint64_t v21 = *v26;
  *(void *)(*v26 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_21F7E0EDC(v5, *(void *)(v21 + 48) + (a2 << 6));
  uint64_t v23 = *(void *)(v21 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24)
  {
    __break(1u);
LABEL_24:
    uint64_t result = sub_21FA26980();
    __break(1u);
  }
  else
  {
    *(void *)(v21 + 16) = v25;
  }
  return result;
}

void *sub_21F7DCDA4(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_21F76CA40(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = sub_21FA264E0();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v7 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v7 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(void *)(*(void *)(v5 + 48) + 8 * v16) = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_21F7DCF48()
{
  uint64_t v1 = v0;
  sub_21F76CA40(&qword_26AD44BB8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA264E0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    int64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_21F7DD0FC()
{
  uint64_t v1 = v0;
  sub_21F76CA40(&qword_267EE74F8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA264E0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_21F7DD290()
{
  return sub_21F7DD29C(&qword_26AD44BC0);
}

void *sub_21F7DD29C(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_21F76CA40(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = sub_21FA264E0();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v7 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v7 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(void *)(*(void *)(v5 + 48) + 8 * v16) = *(void *)(*(void *)(v3 + 48) + 8 * v16);
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_21F7DD42C()
{
  uint64_t v1 = v0;
  sub_21F76CA40(&qword_267EE7500);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA264E0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_21F7DD5D8()
{
  uint64_t v1 = v0;
  sub_21F76CA40(&qword_267EE7508);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA264E0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v13) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 152 * v15;
    sub_21F7BB81C(*(void *)(v2 + 48) + 152 * v15, (uint64_t)v20);
    sub_21F7BB81C((uint64_t)v20, *(void *)(v4 + 48) + v16);
    uint64_t result = sub_21F7C618C(v20, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v13) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_21F7DD7C0()
{
  uint64_t v1 = v0;
  sub_21F76CA40(&qword_26AD462D0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA264E0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v27 >= v13) {
      goto LABEL_28;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      int64_t v9 = v27 + 1;
      if (v27 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v28 = *(void *)(v6 + 8 * v9);
      if (!v28)
      {
        int64_t v9 = v27 + 2;
        if (v27 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v28 = *(void *)(v6 + 8 * v9);
        if (!v28) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v28 - 1) & v28;
    unint64_t v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = v15 << 6;
    int64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = v17[2];
    uint64_t v21 = v17[3];
    uint64_t v22 = v17[4];
    uint64_t v23 = v17[5];
    uint64_t v24 = v17[6];
    uint64_t v25 = v17[7];
    uint64_t v26 = (uint64_t *)(*(void *)(v4 + 48) + v16);
    *uint64_t v26 = *v17;
    v26[1] = v19;
    v26[2] = v20;
    v26[3] = v21;
    v26[4] = v22;
    v26[5] = v23;
    v26[6] = v24;
    v26[7] = v25;
    uint64_t result = (void *)sub_21F7E0F38(v18, v19, v20, v21, v22, v23, v24);
  }
  int64_t v29 = v27 + 3;
  if (v29 >= v13) {
    goto LABEL_28;
  }
  unint64_t v28 = *(void *)(v6 + 8 * v29);
  if (v28)
  {
    int64_t v9 = v29;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v9);
    ++v29;
    if (v28) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_21F7DD98C(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, _OWORD *), void (*a4)(_OWORD *))
{
  unint64_t v7 = v4;
  uint64_t v8 = *v4;
  sub_21F76CA40(a2);
  uint64_t v9 = sub_21FA264F0();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
    uint64_t result = swift_release();
LABEL_43:
    *unint64_t v7 = v10;
    return result;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v35 = v8 + 56;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & *(void *)(v8 + 56);
  int64_t v36 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v14 = v9 + 56;
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  uint64_t v34 = v8;
  while (1)
  {
    if (v13)
    {
      unint64_t v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      int64_t v37 = v16;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if (v20 >= v36) {
      goto LABEL_41;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    int64_t v22 = v16 + 1;
    if (!v21)
    {
      int64_t v22 = v16 + 2;
      if (v16 + 2 >= v36) {
        goto LABEL_41;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = v16 + 3;
        if (v16 + 3 >= v36) {
          goto LABEL_41;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v22);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v13 = (v21 - 1) & v21;
    int64_t v37 = v22;
    unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
LABEL_24:
    uint64_t v24 = *(void *)(*(void *)(v8 + 48) + 8 * v19);
    sub_21FA26A00();
    sub_21FA26A10();
    uint64_t v25 = *(void *)(v24 + 16);
    if (v25)
    {
      uint64_t v26 = v24 + 32;
      swift_bridgeObjectRetain_n();
      do
      {
        a3(v26, v43);
        a3((uint64_t)v43, v40);
        if (v42)
        {
          v38[0] = v40[0];
          v38[1] = v40[1];
          uint64_t v39 = v41;
          sub_21FA26A10();
          sub_21FA26480();
          sub_21F7DF260((uint64_t)v38);
        }
        else
        {
          sub_21FA26A10();
          sub_21FA26A10();
        }
        a4(v43);
        v26 += 48;
        --v25;
      }
      while (v25);
      swift_bridgeObjectRelease();
      uint64_t v8 = v34;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    uint64_t result = sub_21FA26A50();
    uint64_t v27 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v14 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v28) & ~*(void *)(v14 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        BOOL v32 = v29 == v31;
        if (v29 == v31) {
          unint64_t v29 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v14 + 8 * v29);
      }
      while (v33 == -1);
      unint64_t v17 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(void *)(*(void *)(v10 + 48) + 8 * v17) = v24;
    ++*(void *)(v10 + 16);
    int64_t v16 = v37;
  }
  uint64_t v23 = v16 + 4;
  if (v16 + 4 >= v36)
  {
LABEL_41:
    uint64_t result = swift_release_n();
    unint64_t v7 = v4;
    goto LABEL_43;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v23);
  if (v21)
  {
    int64_t v22 = v16 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v22 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v22 >= v36) {
      goto LABEL_41;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v22);
    ++v23;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_21F7DDD1C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_21F76CA40(&qword_26AD44BB8);
  uint64_t v3 = sub_21FA264F0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    sub_21FA26A00();
    swift_bridgeObjectRetain();
    sub_21FA25D30();
    uint64_t result = sub_21FA26A50();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *unint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_21F7DDFCC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_21F76CA40(&qword_267EE74F8);
  uint64_t result = sub_21FA264F0();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    char v18 = *(unsigned char *)(*(void *)(v2 + 48) + v14);
    sub_21FA26A00();
    sub_21FA26A10();
    uint64_t result = sub_21FA26A50();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_21F7DE248(uint64_t a1)
{
  return sub_21F773090(a1, &qword_26AD44BC0);
}

uint64_t sub_21F7DE254()
{
  uint64_t v1 = *v0;
  sub_21F76CA40(&qword_267EE7500);
  uint64_t v2 = sub_21FA264F0();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
    uint64_t result = swift_release();
LABEL_63:
    *uint64_t v50 = v3;
    return result;
  }
  uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v51 = v1 + 56;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(v1 + 56);
  int64_t v52 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v53 = v2 + 56;
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  uint64_t v54 = v1;
  uint64_t v55 = v3;
  while (1)
  {
    if (v6)
    {
      uint64_t v58 = (v6 - 1) & v6;
      int64_t v56 = v8;
      unint64_t v11 = __clz(__rbit64(v6)) | (v8 << 6);
      goto LABEL_24;
    }
    int64_t v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
    if (v12 >= v52) {
      goto LABEL_61;
    }
    unint64_t v13 = *(void *)(v51 + 8 * v12);
    int64_t v14 = v8 + 1;
    if (!v13)
    {
      int64_t v14 = v8 + 2;
      if (v8 + 2 >= v52) {
        goto LABEL_61;
      }
      unint64_t v13 = *(void *)(v51 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v8 + 3;
        if (v8 + 3 >= v52) {
          goto LABEL_61;
        }
        unint64_t v13 = *(void *)(v51 + 8 * v14);
        if (!v13) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v58 = (v13 - 1) & v13;
    int64_t v56 = v14;
    unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_24:
    uint64_t v16 = *(void *)(*(void *)(v1 + 48) + 8 * v11);
    sub_21FA26A00();
    sub_21FA26A10();
    uint64_t v17 = *(void *)(v16 + 16);
    uint64_t v57 = v16;
    if (v17)
    {
      uint64_t v18 = v16 + 32;
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_21F7BB81C(v18, (uint64_t)v70);
        sub_21F7BB81C((uint64_t)v70, (uint64_t)v71);
        int v23 = sub_21F7E108C((uint64_t)v71);
        uint64_t v24 = sub_21F7E1098((uint64_t)v71);
        if (v23 != 1)
        {
          uint64_t v36 = *(void *)(v24 + 16);
          char v37 = *(unsigned char *)(v24 + 24);
          uint64_t v38 = *(void *)(v24 + 40);
          uint64_t v69 = *(void *)(v24 + 8);
          uint64_t v39 = *(void *)(v24 + 48);
          int v40 = *(char *)(v24 + 56);
          unsigned int v41 = *(unsigned __int8 *)(v24 + 56);
          sub_21FA26A10();
          sub_21FA26A10();
          if (v40 < 0)
          {
            sub_21FA26A10();
            sub_21FA26A10();
            sub_21FA26A30();
            sub_21FA26A30();
            sub_21F7C618C(v70, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
            sub_21F7652C0(v69, v36, v37);
            swift_bridgeObjectRetain();
            char v42 = v41;
          }
          else
          {
            sub_21FA26A10();
            char v42 = v41;
            sub_21FA26A10();
            if (v41 > 1)
            {
              sub_21F7C618C(v70, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
              sub_21F7652C0(v69, v36, v37);
              swift_bridgeObjectRetain();
              sub_21F770E44(v38, v39, 2);
              sub_21FA25D30();
            }
            else
            {
              sub_21FA26A30();
              sub_21F7C618C(v70, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
              sub_21F7652C0(v69, v36, v37);
              swift_bridgeObjectRetain();
            }
          }
          sub_21FA26A10();
          sub_21F7656A8(v69, v36, v37);
          swift_bridgeObjectRelease();
          uint64_t v20 = v38;
          uint64_t v21 = v39;
          char v22 = v42;
          goto LABEL_29;
        }
        uint64_t v60 = v18;
        uint64_t v25 = *(void *)(v24 + 16);
        char v62 = *(unsigned char *)(v24 + 24);
        uint64_t v63 = *(void *)(v24 + 8);
        uint64_t v64 = *(void *)(v24 + 48);
        int v26 = *(char *)(v24 + 56);
        int v27 = *(unsigned __int8 *)(v24 + 56);
        uint64_t v28 = *(void *)(v24 + 88);
        uint64_t v65 = *(void *)(v24 + 40);
        uint64_t v66 = *(void *)(v24 + 80);
        char v29 = *(unsigned char *)(v24 + 96);
        uint64_t v67 = *(void *)(v24 + 120);
        uint64_t v68 = *(void *)(v24 + 112);
        int v30 = *(unsigned __int8 *)(v24 + 128);
        sub_21FA26A10();
        sub_21FA26A10();
        char v59 = v27;
        char v61 = v29;
        if (v26 < 0)
        {
          sub_21FA26A10();
          sub_21FA26A10();
          sub_21FA26A30();
          sub_21FA26A30();
          sub_21F7C618C(v70, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
          char v34 = v62;
          sub_21F7652C0(v63, v25, v62);
          swift_bridgeObjectRetain();
          sub_21F7652C0(v66, v28, v29);
          swift_bridgeObjectRetain();
          sub_21F770E44(v68, v67, v30);
          int v31 = v30;
          uint64_t v32 = v63;
          uint64_t v18 = v60;
          uint64_t v33 = v28;
          if ((v31 & 0x80) == 0) {
            goto LABEL_45;
          }
          goto LABEL_39;
        }
        int v31 = v30;
        sub_21FA26A10();
        if (!v27) {
          break;
        }
        uint64_t v32 = v63;
        uint64_t v33 = v28;
        if (v27 == 1)
        {
          sub_21FA26A10();
          sub_21FA26A30();
          sub_21F7C618C(v70, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
          char v34 = v62;
          sub_21F7652C0(v63, v25, v62);
          swift_bridgeObjectRetain();
          uint64_t v35 = v66;
          goto LABEL_42;
        }
        sub_21FA26A10();
        sub_21F7C618C(v70, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
        char v34 = v62;
        sub_21F7652C0(v63, v25, v62);
        swift_bridgeObjectRetain();
        sub_21F7652C0(v66, v28, v29);
        swift_bridgeObjectRetain();
        sub_21F770E44(v68, v67, v31);
        sub_21F770E44(v65, v64, 2);
        sub_21FA25D30();
        uint64_t v18 = v60;
        if ((v31 & 0x80) == 0)
        {
LABEL_45:
          sub_21FA26A10();
          if (v31)
          {
            sub_21FA26A10();
            if (v31 == 1) {
              sub_21FA26A30();
            }
            else {
              sub_21FA25D30();
            }
            char v19 = v59;
          }
          else
          {
            sub_21FA26A10();
            sub_21FA26A30();
            char v19 = v59;
          }
          goto LABEL_28;
        }
LABEL_39:
        sub_21FA26A10();
        sub_21FA26A10();
        sub_21FA26A30();
        sub_21FA26A30();
        char v19 = v59;
        uint64_t v32 = v63;
        char v34 = v62;
LABEL_28:
        sub_21F7656A8(v32, v25, v34);
        swift_bridgeObjectRelease();
        sub_21F770E38(v65, v64, v19);
        sub_21F7656A8(v66, v33, v61);
        swift_bridgeObjectRelease();
        uint64_t v21 = v67;
        uint64_t v20 = v68;
        char v22 = v31;
LABEL_29:
        sub_21F770E38(v20, v21, v22);
        sub_21F7C618C(v70, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
        v18 += 152;
        if (!--v17) {
          goto LABEL_52;
        }
      }
      sub_21FA26A10();
      sub_21FA26A30();
      sub_21F7C618C(v70, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
      uint64_t v32 = v63;
      char v34 = v62;
      sub_21F7652C0(v63, v25, v62);
      swift_bridgeObjectRetain();
      uint64_t v35 = v66;
      uint64_t v33 = v28;
LABEL_42:
      sub_21F7652C0(v35, v33, v29);
      swift_bridgeObjectRetain();
      sub_21F770E44(v68, v67, v31);
      uint64_t v18 = v60;
      if ((v31 & 0x80) == 0) {
        goto LABEL_45;
      }
      goto LABEL_39;
    }
    swift_bridgeObjectRetain();
LABEL_52:
    uint64_t result = sub_21FA26A50();
    uint64_t v3 = v55;
    uint64_t v43 = -1 << *(unsigned char *)(v55 + 32);
    unint64_t v44 = result & ~v43;
    unint64_t v45 = v44 >> 6;
    if (((-1 << v44) & ~*(void *)(v53 + 8 * (v44 >> 6))) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v44) & ~*(void *)(v53 + 8 * (v44 >> 6)))) | v44 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v1 = v54;
      uint64_t v10 = v57;
      unint64_t v6 = v58;
    }
    else
    {
      char v46 = 0;
      unint64_t v47 = (unint64_t)(63 - v43) >> 6;
      uint64_t v1 = v54;
      uint64_t v10 = v57;
      unint64_t v6 = v58;
      do
      {
        if (++v45 == v47 && (v46 & 1) != 0)
        {
          __break(1u);
          goto LABEL_64;
        }
        BOOL v48 = v45 == v47;
        if (v45 == v47) {
          unint64_t v45 = 0;
        }
        v46 |= v48;
        uint64_t v49 = *(void *)(v53 + 8 * v45);
      }
      while (v49 == -1);
      unint64_t v9 = __clz(__rbit64(~v49)) + (v45 << 6);
    }
    *(void *)(v53 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    *(void *)(*(void *)(v55 + 48) + 8 * v9) = v10;
    ++*(void *)(v55 + 16);
    int64_t v8 = v56;
  }
  uint64_t v15 = v8 + 4;
  if (v8 + 4 >= v52)
  {
LABEL_61:
    uint64_t result = swift_release_n();
    goto LABEL_63;
  }
  unint64_t v13 = *(void *)(v51 + 8 * v15);
  if (v13)
  {
    int64_t v14 = v8 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v14 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v14 >= v52) {
      goto LABEL_61;
    }
    unint64_t v13 = *(void *)(v51 + 8 * v14);
    ++v15;
    if (v13) {
      goto LABEL_23;
    }
  }
LABEL_65:
  __break(1u);
  return result;
}

uint64_t sub_21F7DEB94()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_21F76CA40(&qword_267EE7508);
  uint64_t v3 = sub_21FA264F0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    sub_21F7BB81C(*(void *)(v2 + 48) + 152 * v15, (uint64_t)v27);
    sub_21FA26A00();
    sub_21F7C618C(v27, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
    sub_21F8DBD4C((uint64_t)v26);
    uint64_t result = sub_21FA26A50();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v10 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v13 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    uint64_t result = sub_21F7BB81C((uint64_t)v27, *(void *)(v4 + 48) + 152 * v13);
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_21F7DEE4C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_21F76CA40(&qword_26AD462D0);
  uint64_t result = sub_21FA264F0();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v32 = v2 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(v2 + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v33 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v34 = v2;
  uint64_t v9 = result + 56;
  while (1)
  {
    if (v8)
    {
      uint64_t v36 = (v8 - 1) & v8;
      int64_t v37 = v5;
      unint64_t v12 = __clz(__rbit64(v8)) | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v13 >= v33) {
      goto LABEL_33;
    }
    unint64_t v14 = *(void *)(v32 + 8 * v13);
    int64_t v15 = v5 + 1;
    if (!v14)
    {
      int64_t v15 = v5 + 2;
      if (v5 + 2 >= v33) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v32 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v5 + 3;
        if (v5 + 3 >= v33) {
          goto LABEL_33;
        }
        unint64_t v14 = *(void *)(v32 + 8 * v15);
        if (!v14) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v36 = (v14 - 1) & v14;
    int64_t v37 = v15;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
LABEL_24:
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + (v12 << 6));
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = v17[2];
    uint64_t v21 = v17[3];
    uint64_t v22 = v17[4];
    uint64_t v23 = v17[5];
    uint64_t v24 = v17[7];
    uint64_t v35 = v17[6];
    sub_21FA26A00();
    uint64_t result = sub_21FA26A50();
    uint64_t v25 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v9 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v10 = __clz(__rbit64((-1 << v26) & ~*(void *)(v9 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v9 + 8 * v27);
      }
      while (v31 == -1);
      unint64_t v10 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v9 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    unint64_t v11 = (uint64_t *)(*(void *)(v4 + 48) + (v10 << 6));
    *unint64_t v11 = v18;
    v11[1] = v19;
    v11[2] = v20;
    v11[3] = v21;
    v11[4] = v22;
    uint64_t v11[5] = v23;
    v11[6] = v35;
    v11[7] = v24;
    ++*(void *)(v4 + 16);
    uint64_t result = sub_21F7E0F38(v18, v19, v20, v21, v22, v23, v35);
    uint64_t v2 = v34;
    unint64_t v8 = v36;
    int64_t v5 = v37;
  }
  uint64_t v16 = v5 + 4;
  if (v5 + 4 >= v33)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v32 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v5 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v33) {
      goto LABEL_33;
    }
    unint64_t v14 = *(void *)(v32 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

BOOL sub_21F7DF140(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  int v4 = sub_21FA25120();
  if (v4 != sub_21FA25120()
    || a1[2] != a2[2]
    || (sub_21F9D5564(*((void *)a1 + 1), *((void *)a1 + 2), a1[24], *((void *)a2 + 1), *((void *)a2 + 2), a2[24]) & 1) == 0)
  {
    return 0;
  }
  unsigned int v5 = a1[48];
  unsigned int v6 = a2[48];
  if (v5 <= 0xFB) {
    return v6 <= 0xFB
  }
        && (sub_21F9D5564(*((void *)a1 + 4), *((void *)a1 + 5), v5, *((void *)a2 + 4), *((void *)a2 + 5), v6) & 1) != 0;
  return v6 > 0xFB;
}

uint64_t sub_21F7DF204(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_21F7DF260(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F7DF2B4(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F7DF308(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_21F7DF364(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F7DF3B8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, double a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X8>)
{
  double v9 = 0.0;
  if (a6 == 2)
  {
    unint64_t v10 = &OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xOffsetScale;
  }
  else
  {
    if (a6 != 3)
    {
LABEL_9:
      double v19 = 0.0;
      char v24 = 0;
      double v17 = NAN;
      double v23 = NAN;
      goto LABEL_10;
    }
    unint64_t v10 = &OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yOffsetScale;
  }
  uint64_t v11 = v7 + *v10;
  int v12 = *(unsigned __int8 *)(v11 + 104);
  if (v12 == 255) {
    goto LABEL_9;
  }
  uint64_t v13 = *(void *)v11;
  uint64_t v35 = *(void *)(v11 + 8);
  uint64_t v36 = *(void *)(v11 + 16);
  uint64_t v37 = *(void *)(v11 + 24);
  uint64_t v29 = *(void *)(v11 + 32);
  uint64_t v38 = *(void *)(v11 + 40);
  uint64_t v30 = *(void *)(v11 + 48);
  uint64_t v39 = *(void *)(v11 + 56);
  uint64_t v40 = *(void *)(v11 + 64);
  uint64_t v31 = *(void *)(v11 + 72);
  uint64_t v32 = *(void *)(v11 + 80);
  uint64_t v33 = *(void *)(v11 + 88);
  uint64_t v34 = *(void *)(v11 + 96);
  uint64_t v14 = result;
  sub_21F764268(*(void *)v11, v35, v36, v37, v29, v38, v30, v39, v40);
  double v17 = COERCE_DOUBLE(sub_21F76F910(v14, a2, a3, 0.0));
  double v19 = v18;
  char v21 = v20;
  uint64_t result = sub_21F76EE70(v13, v35, v36, v37, v29, v38, v30, v39, v40, v31, v32, v33, v34, v12);
  if (v21) {
    goto LABEL_9;
  }
  double v22 = v19;
  switch(a5)
  {
    case 1:
      double v19 = 0.0;
      char v24 = 0;
      double v25 = (1.0 - a4) * 0.5;
      double v26 = v25 + a4 * v17;
      double v23 = v25 + a4 * v22;
      goto LABEL_14;
    case 2:
      double v23 = (1.0 - (v17 + v17)) * a4;
      double v9 = (1.0 - (v19 + v19)) * a4;
      char v24 = 1;
      break;
    case 3:
      double v19 = 0.0;
      char v24 = 0;
      double v26 = v17 * 0.7 + 0.15;
      double v23 = v22 * 0.7 + 0.15;
LABEL_14:
      double v17 = v26;
      break;
    default:
      double v23 = (v17 + -0.5) * a4;
      double v9 = (v19 + -0.5) * a4;
      char v24 = 1;
      double v17 = 0.5;
      double v19 = 0.5;
      break;
  }
LABEL_10:
  *(double *)a7 = v17;
  *(double *)(a7 + 8) = v23;
  *(double *)(a7 + 16) = v19;
  *(double *)(a7 + 24) = v9;
  *(unsigned char *)(a7 + 32) = v24;
  return result;
}

uint64_t sub_21F7DF668@<X0>(uint64_t result@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  long long v5 = 0uLL;
  if (result != 1)
  {
    if ((_BYTE)result)
    {
      char v58 = 1;
      long long v59 = 0uLL;
      long long v60 = 0uLL;
      goto LABEL_27;
    }
    uint64_t v109 = a3;
    uint64_t v110 = a4;
    uint64_t v111 = a5;
    swift_beginAccess();
    memcpy(__dst, a2 + 5, 0x102uLL);
    uint64_t v6 = __dst[0];
    uint64_t v7 = __dst[1];
    char v8 = __dst[2];
    uint64_t v9 = __dst[3];
    uint64_t v10 = __dst[4];
    uint64_t v11 = __dst[5];
    char v12 = __dst[6];
    uint64_t v13 = __dst[0];
    uint64_t v14 = __dst[1];
    char v15 = __dst[2];
    uint64_t v16 = __dst[4];
    uint64_t v17 = __dst[5];
    char v18 = __dst[6];
    double v19 = *(double *)&__dst[9];
    char v20 = __dst[10];
    if (__dst[3]) {
      goto LABEL_4;
    }
    if (BYTE1(__dst[32]) != 2)
    {
      char v90 = __dst[6];
      uint64_t v92 = __dst[5];
      uint64_t v94 = __dst[4];
      char v96 = __dst[2];
      uint64_t v101 = __dst[1];
      uint64_t v106 = __dst[0];
      sub_21F761D2C((uint64_t)__dst, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21F761E74);
      int v61 = sub_21FA25120();
      if (v61 == sub_21FA25120())
      {
        uint64_t v14 = __dst[23];
        char v15 = __dst[24];
        uint64_t v27 = __dst[25];
        uint64_t v16 = __dst[26];
        uint64_t v17 = __dst[27];
        char v18 = __dst[28];
        double v19 = *(double *)&__dst[31];
        char v86 = __dst[32];
        uint64_t v88 = __dst[22];
        sub_21F761E74(__dst[22], __dst[23], __dst[24], __dst[25], __dst[26], __dst[27], __dst[28]);
        sub_21F761D2C((uint64_t)__dst, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21F761EDC);
        if (v27)
        {
          uint64_t v13 = v88;
          uint64_t v7 = v101;
          uint64_t v6 = v106;
          uint64_t v10 = v94;
          char v8 = v96;
          char v12 = v90;
          uint64_t v11 = v92;
          char v20 = v86;
LABEL_4:
          char v21 = v15 & 1;
          uint64_t v22 = v13;
          char v23 = v20;
          sub_21F761E74(v6, v7, v8, v9, v10, v11, v12);
          sub_21F7652C0(v22, v14, v21);
          swift_bridgeObjectRetain();
          sub_21F770E44(v16, v17, v18);
          sub_21F7DF3B8(v16, v17, v18, v19, v23, 2, (uint64_t)&v116);
          uint64_t v24 = v116;
          uint64_t v25 = v118;
          uint64_t v99 = v119;
          uint64_t v104 = v117;
          char v26 = v120;
          sub_21F7656A8(v22, v14, v21);
          swift_bridgeObjectRelease();
          sub_21F770E38(v16, v17, v18);
          sub_21F7656A8(v22, v14, v21);
          uint64_t v27 = v104;
          swift_bridgeObjectRelease();
          uint64_t v28 = v16;
          uint64_t v29 = v99;
          uint64_t v30 = v17;
          char v31 = v26;
          sub_21F770E38(v28, v30, v18);
LABEL_19:
          uint64_t v63 = a2;
          uint64_t v64 = (char *)a2 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
          swift_beginAccess();
          uint64_t result = type metadata accessor for ChartContentRenderContext.Environment(0);
          uint64_t v65 = &v64[*(int *)(result + 88)];
          uint64_t v66 = *((void *)v65 + 2);
          long long v135 = *(_OWORD *)v65;
          uint64_t v136 = v66;
          uint64_t v137 = v24;
          uint64_t v138 = v27;
          uint64_t v139 = v25;
          uint64_t v140 = v29;
          char v141 = v31;
          long long v142 = a2[22];
          uint64_t v67 = OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale;
          goto LABEL_24;
        }
        uint64_t v24 = 0;
LABEL_18:
        uint64_t v25 = 0;
        uint64_t v29 = 0;
        char v31 = 2;
        goto LABEL_19;
      }
      sub_21F761D2C((uint64_t)__dst, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21F761EDC);
    }
    uint64_t v24 = 0;
    uint64_t v27 = 0;
    goto LABEL_18;
  }
  uint64_t v109 = a3;
  uint64_t v110 = a4;
  uint64_t v111 = a5;
  swift_beginAccess();
  memcpy(__dst, a2 + 5, 0x102uLL);
  uint64_t v32 = __dst[11];
  uint64_t v33 = __dst[12];
  char v34 = __dst[13];
  uint64_t v35 = __dst[14];
  uint64_t v36 = __dst[15];
  uint64_t v37 = __dst[16];
  char v38 = __dst[17];
  uint64_t v39 = __dst[11];
  uint64_t v40 = __dst[12];
  char v41 = __dst[13];
  uint64_t v42 = __dst[15];
  uint64_t v43 = __dst[16];
  char v44 = __dst[17];
  double v45 = *(double *)&__dst[20];
  char v46 = __dst[21];
  if (__dst[14]) {
    goto LABEL_6;
  }
  if (BYTE1(__dst[32]) == 2) {
    goto LABEL_21;
  }
  char v91 = __dst[17];
  uint64_t v93 = __dst[16];
  uint64_t v95 = __dst[15];
  char v97 = __dst[13];
  uint64_t v102 = __dst[12];
  uint64_t v107 = __dst[11];
  sub_21F761D2C((uint64_t)__dst, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21F761E74);
  int v62 = sub_21FA25120();
  if (v62 != sub_21FA25120())
  {
    sub_21F761D2C((uint64_t)__dst, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21F761EDC);
LABEL_21:
    uint64_t v54 = 0;
    uint64_t v55 = 0;
LABEL_22:
    uint64_t v51 = 0;
    uint64_t v57 = 0;
    char v52 = 2;
    goto LABEL_23;
  }
  uint64_t v40 = __dst[23];
  char v41 = __dst[24];
  uint64_t v55 = __dst[25];
  uint64_t v42 = __dst[26];
  uint64_t v43 = __dst[27];
  char v44 = __dst[28];
  double v45 = *(double *)&__dst[31];
  char v87 = __dst[32];
  uint64_t v89 = __dst[22];
  sub_21F761E74(__dst[22], __dst[23], __dst[24], __dst[25], __dst[26], __dst[27], __dst[28]);
  sub_21F761D2C((uint64_t)__dst, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21F761EDC);
  if (!v55)
  {
    uint64_t v54 = 0;
    goto LABEL_22;
  }
  uint64_t v39 = v89;
  uint64_t v33 = v102;
  uint64_t v32 = v107;
  uint64_t v36 = v95;
  char v34 = v97;
  char v38 = v91;
  uint64_t v37 = v93;
  char v46 = v87;
LABEL_6:
  char v47 = v41 & 1;
  uint64_t v48 = v39;
  char v49 = v46;
  sub_21F761E74(v32, v33, v34, v35, v36, v37, v38);
  sub_21F7652C0(v48, v40, v47);
  swift_bridgeObjectRetain();
  sub_21F770E44(v42, v43, v44);
  sub_21F7DF3B8(v42, v43, v44, v45, v49, 3, (uint64_t)&v116);
  uint64_t v50 = v116;
  uint64_t v51 = v118;
  uint64_t v100 = v119;
  uint64_t v105 = v117;
  char v52 = v120;
  sub_21F7656A8(v48, v40, v47);
  swift_bridgeObjectRelease();
  sub_21F770E38(v42, v43, v44);
  uint64_t v53 = v40;
  uint64_t v54 = v50;
  sub_21F7656A8(v48, v53, v47);
  uint64_t v55 = v105;
  swift_bridgeObjectRelease();
  uint64_t v56 = v42;
  uint64_t v57 = v100;
  sub_21F770E38(v56, v43, v44);
LABEL_23:
  uint64_t v63 = a2;
  uint64_t v68 = (char *)a2 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  uint64_t result = type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v69 = &v68[*(int *)(result + 92)];
  uint64_t v70 = *((void *)v69 + 2);
  long long v135 = *(_OWORD *)v69;
  uint64_t v136 = v70;
  uint64_t v137 = v54;
  uint64_t v138 = v55;
  uint64_t v139 = v51;
  uint64_t v140 = v57;
  char v141 = v52;
  long long v142 = a2[23];
  uint64_t v67 = OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale;
LABEL_24:
  int v71 = (char *)v63 + v67;
  int v72 = v71[104];
  if (v72 == 255)
  {
    char v58 = 1;
    long long v59 = 0uLL;
    long long v60 = 0uLL;
    a5 = v111;
    long long v5 = 0uLL;
  }
  else
  {
    uint64_t v73 = *((void *)v71 + 11);
    uint64_t v74 = *((void *)v71 + 12);
    uint64_t v76 = *((void *)v71 + 9);
    uint64_t v75 = *((void *)v71 + 10);
    uint64_t v77 = *((void *)v71 + 7);
    uint64_t v78 = *((void *)v71 + 8);
    uint64_t v80 = *((void *)v71 + 5);
    uint64_t v79 = *((void *)v71 + 6);
    uint64_t v82 = *((void *)v71 + 3);
    uint64_t v81 = *((void *)v71 + 4);
    uint64_t v84 = *((void *)v71 + 1);
    uint64_t v83 = *((void *)v71 + 2);
    uint64_t v85 = *(void *)v71;
    uint64_t v121 = v85;
    uint64_t v122 = v84;
    uint64_t v123 = v83;
    uint64_t v124 = v82;
    uint64_t v125 = v81;
    uint64_t v98 = v81;
    uint64_t v103 = v80;
    uint64_t v126 = v80;
    uint64_t v127 = v79;
    uint64_t v108 = v79;
    uint64_t v128 = v77;
    uint64_t v113 = v77;
    uint64_t v129 = v78;
    uint64_t v130 = v76;
    uint64_t v131 = v75;
    uint64_t v132 = v73;
    uint64_t v133 = v74;
    char v134 = v72 & 1;
    sub_21F764268(v85, v84, v83, v82, v81, v80, v79, v77, v78);
    sub_21F7CCAB8((uint64_t)&v135, v109, v110, (double *)v114);
    uint64_t result = sub_21F76EE70(v85, v84, v83, v82, v98, v103, v108, v113, v78, v76, v75, v73, v74, v72);
    char v58 = 0;
    long long v5 = v114[0];
    long long v59 = v114[1];
    long long v60 = v114[2];
    a5 = v111;
  }
LABEL_27:
  *(_OWORD *)a5 = v5;
  *(_OWORD *)(a5 + 16) = v59;
  *(_OWORD *)(a5 + 32) = v60;
  *(unsigned char *)(a5 + 48) = v58;
  return result;
}

uint64_t sub_21F7DFD88(char a1, double *a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a1 == 1)
  {
    uint64_t v109 = a3;
    uint64_t v110 = a4;
    char v112 = a5;
    swift_beginAccess();
    memcpy(__dst, a2 + 10, 0x102uLL);
    uint64_t v31 = __dst[11];
    uint64_t v32 = __dst[12];
    char v33 = __dst[13];
    uint64_t v34 = __dst[14];
    uint64_t v35 = __dst[15];
    uint64_t v36 = __dst[16];
    char v37 = __dst[17];
    uint64_t v38 = __dst[11];
    uint64_t v39 = __dst[12];
    char v40 = __dst[13];
    uint64_t v41 = __dst[15];
    uint64_t v42 = __dst[16];
    char v43 = __dst[17];
    double v44 = *(double *)&__dst[20];
    char v45 = __dst[21];
    if (__dst[14])
    {
LABEL_6:
      char v46 = v40 & 1;
      uint64_t v47 = v38;
      double v48 = v44;
      uint64_t v49 = v34;
      char v50 = v45;
      sub_21F761E74(v31, v32, v33, v49, v35, v36, v37);
      sub_21F7652C0(v47, v39, v46);
      swift_bridgeObjectRetain();
      sub_21F770E44(v41, v42, v43);
      sub_21F7DF3B8(v41, v42, v43, v48, v50, 3, (uint64_t)&v115);
      double v26 = v115;
      double v27 = v116;
      double v28 = v117;
      double v29 = v118;
      int v51 = v119;
      sub_21F7656A8(v47, v39, v46);
      swift_bridgeObjectRelease();
      sub_21F770E38(v41, v42, v43);
      sub_21F7656A8(v47, v39, v46);
      swift_bridgeObjectRelease();
      sub_21F770E38(v41, v42, v43);
      goto LABEL_21;
    }
    double v26 = 0.0;
    if (BYTE1(__dst[32]) != 2)
    {
      char v92 = __dst[17];
      uint64_t v95 = __dst[16];
      uint64_t v98 = __dst[15];
      char v101 = __dst[13];
      uint64_t v104 = __dst[12];
      uint64_t v107 = __dst[11];
      sub_21F761D2C((uint64_t)__dst, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21F761E74);
      int v54 = sub_21FA25120();
      if (v54 == sub_21FA25120())
      {
        uint64_t v39 = __dst[23];
        char v40 = __dst[24];
        uint64_t v55 = __dst[25];
        uint64_t v41 = __dst[26];
        uint64_t v42 = __dst[27];
        char v43 = __dst[28];
        char v86 = __dst[32];
        double v88 = *(double *)&__dst[31];
        uint64_t v90 = __dst[22];
        sub_21F761E74(__dst[22], __dst[23], __dst[24], __dst[25], __dst[26], __dst[27], __dst[28]);
        sub_21F761D2C((uint64_t)__dst, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21F761EDC);
        if (v55)
        {
          uint64_t v38 = v90;
          uint64_t v32 = v104;
          uint64_t v31 = v107;
          uint64_t v35 = v98;
          char v33 = v101;
          char v37 = v92;
          uint64_t v36 = v95;
          double v44 = v88;
          char v45 = v86;
          goto LABEL_6;
        }
      }
      else
      {
        sub_21F761D2C((uint64_t)__dst, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21F761EDC);
      }
    }
    int v51 = 2;
    double v27 = 0.0;
    double v28 = 0.0;
    double v29 = 0.0;
LABEL_21:
    uint64_t v75 = (char *)a2 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
    swift_beginAccess();
    uint64_t v76 = type metadata accessor for ChartContentRenderContext.Environment(0);
    uint64_t v77 = (uint64_t *)((char *)a2 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale);
    int v59 = *((unsigned __int8 *)a2 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale + 104);
    if (v59 != 255)
    {
      int v93 = v51;
      double v60 = *(double *)&v75[*(int *)(v76 + 92)];
      uint64_t v62 = v77[11];
      uint64_t v61 = v77[12];
      uint64_t v64 = v77[9];
      uint64_t v63 = v77[10];
      uint64_t v65 = v77[7];
      uint64_t v66 = v77[8];
      uint64_t v68 = v77[5];
      uint64_t v67 = v77[6];
      uint64_t v70 = v77[3];
      uint64_t v69 = v77[4];
      uint64_t v72 = v77[1];
      uint64_t v71 = v77[2];
      uint64_t v73 = *v77;
      double v74 = a2[46];
      goto LABEL_23;
    }
LABEL_27:
    *(double *)&uint64_t result = 0.0;
    return result;
  }
  if (a1) {
    goto LABEL_27;
  }
  uint64_t v109 = a3;
  uint64_t v110 = a4;
  char v112 = a5;
  swift_beginAccess();
  memcpy(__dst, a2 + 10, 0x102uLL);
  uint64_t v6 = __dst[0];
  uint64_t v7 = __dst[1];
  char v8 = __dst[2];
  uint64_t v9 = __dst[3];
  uint64_t v10 = __dst[4];
  uint64_t v11 = __dst[5];
  char v12 = __dst[6];
  uint64_t v13 = __dst[0];
  uint64_t v14 = __dst[1];
  char v15 = __dst[2];
  uint64_t v16 = __dst[4];
  uint64_t v17 = __dst[5];
  char v18 = __dst[6];
  double v19 = *(double *)&__dst[9];
  char v20 = __dst[10];
  if (__dst[3])
  {
LABEL_4:
    char v21 = v15 & 1;
    uint64_t v22 = v13;
    double v23 = v19;
    uint64_t v24 = v9;
    char v25 = v20;
    sub_21F761E74(v6, v7, v8, v24, v10, v11, v12);
    sub_21F7652C0(v22, v14, v21);
    swift_bridgeObjectRetain();
    sub_21F770E44(v16, v17, v18);
    sub_21F7DF3B8(v16, v17, v18, v23, v25, 2, (uint64_t)&v115);
    double v26 = v115;
    double v27 = v116;
    double v28 = v117;
    double v29 = v118;
    int v30 = v119;
    sub_21F7656A8(v22, v14, v21);
    swift_bridgeObjectRelease();
    sub_21F770E38(v16, v17, v18);
    sub_21F7656A8(v22, v14, v21);
    swift_bridgeObjectRelease();
    sub_21F770E38(v16, v17, v18);
    goto LABEL_17;
  }
  double v26 = 0.0;
  if (BYTE1(__dst[32]) != 2)
  {
    char v91 = __dst[6];
    uint64_t v94 = __dst[5];
    uint64_t v97 = __dst[4];
    char v100 = __dst[2];
    uint64_t v103 = __dst[1];
    uint64_t v106 = __dst[0];
    sub_21F761D2C((uint64_t)__dst, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21F761E74);
    int v52 = sub_21FA25120();
    if (v52 == sub_21FA25120())
    {
      uint64_t v14 = __dst[23];
      char v15 = __dst[24];
      uint64_t v53 = __dst[25];
      uint64_t v16 = __dst[26];
      uint64_t v17 = __dst[27];
      char v18 = __dst[28];
      char v85 = __dst[32];
      double v87 = *(double *)&__dst[31];
      uint64_t v89 = __dst[22];
      sub_21F761E74(__dst[22], __dst[23], __dst[24], __dst[25], __dst[26], __dst[27], __dst[28]);
      sub_21F761D2C((uint64_t)__dst, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21F761EDC);
      if (v53)
      {
        uint64_t v13 = v89;
        uint64_t v7 = v103;
        uint64_t v6 = v106;
        uint64_t v10 = v97;
        char v8 = v100;
        char v12 = v91;
        uint64_t v11 = v94;
        double v19 = v87;
        char v20 = v85;
        goto LABEL_4;
      }
    }
    else
    {
      sub_21F761D2C((uint64_t)__dst, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21F761EDC);
    }
  }
  int v30 = 2;
  double v27 = 0.0;
  double v28 = 0.0;
  double v29 = 0.0;
LABEL_17:
  uint64_t v56 = (char *)a2 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  uint64_t v57 = type metadata accessor for ChartContentRenderContext.Environment(0);
  char v58 = (uint64_t *)((char *)a2 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale);
  int v59 = *((unsigned __int8 *)a2 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale + 104);
  if (v59 == 255) {
    goto LABEL_27;
  }
  int v93 = v30;
  double v60 = *(double *)&v56[*(int *)(v57 + 88)];
  uint64_t v62 = v58[11];
  uint64_t v61 = v58[12];
  uint64_t v64 = v58[9];
  uint64_t v63 = v58[10];
  uint64_t v65 = v58[7];
  uint64_t v66 = v58[8];
  uint64_t v68 = v58[5];
  uint64_t v67 = v58[6];
  uint64_t v70 = v58[3];
  uint64_t v69 = v58[4];
  uint64_t v72 = v58[1];
  uint64_t v71 = v58[2];
  uint64_t v73 = *v58;
  double v74 = a2[44];
LABEL_23:
  uint64_t v120 = v73;
  uint64_t v121 = v72;
  uint64_t v122 = v71;
  uint64_t v123 = v70;
  uint64_t v124 = v69;
  uint64_t v96 = v69;
  uint64_t v99 = v68;
  uint64_t v125 = v68;
  uint64_t v126 = v67;
  uint64_t v102 = v67;
  uint64_t v105 = v65;
  uint64_t v127 = v65;
  unsigned __int8 v108 = v66;
  uint64_t v128 = v66;
  uint64_t v129 = v64;
  uint64_t v130 = v63;
  uint64_t v131 = v62;
  uint64_t v132 = v61;
  char v133 = v59 & 1;
  sub_21F764268(v73, v72, v71, v70, v69, v68, v67, v65, v66);
  double v111 = COERCE_DOUBLE(sub_21F76F910(v109, v110, v112, v74));
  double v113 = v78;
  char v80 = v79;
  sub_21F76EE70(v73, v72, v71, v70, v96, v99, v102, v105, v108, v64, v63, v62, v61, v59);
  if (v80)
  {
    double v84 = NAN;
  }
  else
  {
    double v81 = v111;
    double v82 = v113;
    if (v93)
    {
      if (v93 == 1)
      {
        double v82 = v29 + v28 * (v113 - v111) + v111;
        double v81 = v27 + v26 * (v113 - v111) + v111;
      }
    }
    else
    {
      double v82 = v27 * (v113 - v111) + v111;
      double v81 = v26 * (v113 - v111) + v111;
    }
    double v84 = (v82 + v81) * 0.5;
  }
  *(double *)&uint64_t result = v60 + v84;
  return result;
}

uint64_t sub_21F7E04AC@<X0>(double a1@<X0>, double a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  if (a4 == 7)
  {
    sub_21F76C9DC(v5 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_lineStyleScale, (uint64_t)v19, &qword_26AD491E0);
    sub_21F76C9DC((uint64_t)v19, (uint64_t)v20, &qword_26AD491E0);
    if (sub_21F7E0BB8((uint64_t)v20) == 1) {
      goto LABEL_12;
    }
    if (a3 < 0)
    {
      a3 &= 1u;
      a1 = (a1 + a2) * 0.5;
      a2 = 0.0;
    }
    else
    {
      sub_21F7607AC(*(uint64_t *)&a1, *(uint64_t *)&a2, a3);
    }
    sub_21F76C9DC((uint64_t)v19, (uint64_t)v18, &qword_26AD491E0);
    sub_21F76C9DC((uint64_t)v18, (uint64_t)v24, &qword_267EE74E8);
    sub_21F7E0BCC(v18);
    sub_21F888DA0(*(uint64_t *)&a1, *(uint64_t *)&a2, a3, v21);
    uint64_t v10 = v21[0];
    unint64_t v12 = v21[1];
    uint64_t v13 = v21[2];
    uint64_t v17 = v21[3];
    uint64_t v15 = v21[4];
    sub_21F7654F0(*(uint64_t *)&a1, *(uint64_t *)&a2, a3);
    sub_21F7783C8((uint64_t)v19);
    uint64_t result = sub_21F76C9DC((uint64_t)v21, (uint64_t)v22, &qword_26AD46870);
    if (!v23)
    {
LABEL_12:
      if (qword_26AD46C38 != -1) {
        swift_once();
      }
      uint64_t v10 = xmmword_26AD52240;
      LODWORD(v12) = DWORD2(xmmword_26AD52240);
      LODWORD(v11) = HIDWORD(xmmword_26AD52240);
      uint64_t v13 = qword_26AD52250;
      uint64_t v14 = qword_26AD52258;
      uint64_t v15 = qword_26AD52260;
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v11 = HIDWORD(v12);
      uint64_t v14 = v17;
    }
  }
  else
  {
    if (qword_26AD46C38 != -1) {
      swift_once();
    }
    uint64_t v10 = xmmword_26AD52240;
    LODWORD(v12) = DWORD2(xmmword_26AD52240);
    LODWORD(v11) = HIDWORD(xmmword_26AD52240);
    uint64_t v13 = qword_26AD52250;
    uint64_t v14 = qword_26AD52258;
    uint64_t v15 = qword_26AD52260;
    uint64_t result = swift_bridgeObjectRetain();
  }
  *(void *)a5 = v10;
  *(_DWORD *)(a5 + 8) = v12;
  *(_DWORD *)(a5 + 12) = v11;
  *(void *)(a5 + 16) = v13;
  *(void *)(a5 + 24) = v14;
  *(void *)(a5 + 32) = v15;
  return result;
}

double sub_21F7E06F8(uint64_t a1, uint64_t a2, char a3, char a4)
{
  double result = 0.0;
  if (a4 == 6)
  {
    uint64_t v6 = (uint64_t *)(v4 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale);
    if (*(unsigned __int8 *)(v4 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 104) != 255)
    {
      unsigned __int8 v7 = *(unsigned char *)(v4 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 104);
      uint64_t v9 = *v6;
      uint64_t v8 = v6[1];
      uint64_t v10 = v6[2];
      uint64_t v11 = v6[3];
      uint64_t v12 = v6[4];
      uint64_t v13 = v6[5];
      uint64_t v26 = v6[7];
      uint64_t v27 = v6[6];
      uint64_t v24 = v6[9];
      uint64_t v25 = v6[8];
      uint64_t v22 = v6[11];
      uint64_t v23 = v6[10];
      uint64_t v21 = v6[12];
      if (a3 < 0)
      {
        char v18 = a3 & 1;
        double v20 = (*(double *)&a1 + *(double *)&a2) * 0.5;
        uint64_t v19 = 0;
      }
      else
      {
        uint64_t v19 = a2;
        double v20 = *(double *)&a1;
        char v18 = a3;
        sub_21F7607AC(a1, a2, a3);
      }
      uint64_t v16 = v10;
      sub_21F764268(v9, v8, v10, v11, v12, v13, v27, v26, v25);
      double v14 = COERCE_DOUBLE(sub_21F888AA8(*(uint64_t *)&v20, v19, v18));
      char v17 = v15;
      sub_21F7654F0(*(uint64_t *)&v20, v19, v18);
      sub_21F76EE70(v9, v8, v16, v11, v12, v13, v27, v26, v25, v24, v23, v22, v21, v7);
      double result = v14;
      if (v17) {
        return 0.0;
      }
    }
  }
  return result;
}

uint64_t sub_21F7E08D0(uint64_t a1, uint64_t a2, char a3, char a4)
{
  if (a4 != 4) {
    goto LABEL_8;
  }
  uint64_t v5 = (uint64_t *)(v4 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale);
  if (*(unsigned __int8 *)(v4 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 96) == 255) {
    goto LABEL_8;
  }
  char v6 = a3;
  unsigned __int8 v7 = *(unsigned char *)(v4 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 96);
  uint64_t v9 = *v5;
  uint64_t v8 = v5[1];
  uint64_t v10 = v5[2];
  uint64_t v11 = v5[3];
  uint64_t v12 = v5[4];
  uint64_t v13 = v5[5];
  uint64_t v23 = v5[7];
  uint64_t v24 = v5[6];
  uint64_t v21 = v5[9];
  uint64_t v22 = v5[8];
  uint64_t v19 = v5[11];
  uint64_t v20 = v5[10];
  if (a3 < 0)
  {
    char v6 = a3 & 1;
    double v18 = (*(double *)&a1 + *(double *)&a2) * 0.5;
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = a2;
    double v18 = *(double *)&a1;
    sub_21F7607AC(a1, a2, a3);
  }
  uint64_t v16 = v12;
  sub_21F7E0AB8(v9, v8, v10, v11, v12, v13, v24, v23);
  uint64_t v14 = sub_21F888F20(*(uint64_t *)&v18, v17, v6);
  sub_21F7654F0(*(uint64_t *)&v18, v17, v6);
  sub_21F778468(v9, v8, v10, v11, v16, v13, v24, v23, v22, v21, v20, v19, v7);
  if (!v14)
  {
LABEL_8:
    sub_21FA25590();
    return sub_21FA245C0();
  }
  return v14;
}

uint64_t sub_21F7E0AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  swift_retain();
  swift_retain();
  sub_21F7642D0(a4);
  swift_bridgeObjectRetain();

  return sub_21F7637E4(a7, a8);
}

uint64_t sub_21F7E0B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  swift_release();
  swift_release();
  sub_21F76D5D8(a4);
  swift_bridgeObjectRelease();

  return sub_21F76D558(a7, a8);
}

uint64_t sub_21F7E0BB8(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 128);
  if (v1 > 1) {
    return (v1 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t *sub_21F7E0BCC(uint64_t *a1)
{
  return a1;
}

uint64_t sub_21F7E0C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  swift_bridgeObjectRetain();
  swift_retain();
  sub_21F7642D0(a8);
  swift_bridgeObjectRetain();

  return sub_21F7637E4(a11, a12);
}

uint64_t sub_21F7E0CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  swift_release();
  swift_bridgeObjectRelease();
  sub_21F76D5D8(a8);
  swift_bridgeObjectRelease();

  return sub_21F76D558(a11, a12);
}

unint64_t sub_21F7E0D20(unint64_t result)
{
  if (result >= 8) {
    return 8;
  }
  return result;
}

uint64_t sub_21F7E0D30(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F7E0D5C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_21F7E0DB8(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F7E0DEC(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F7E0E20(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F7E0E54(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F7E0E88(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F7E0EDC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_21F7E0F38(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a7 < 0)
  {
    char v9 = a7 & 1;
    sub_21F7652C0(a1, a2, a3 & 1);
    swift_bridgeObjectRetain();
    sub_21F7652C0(a5, a6, v9);
  }
  else
  {
    sub_21F7652C0(a1, a2, a3 & 1);
  }

  return swift_bridgeObjectRetain();
}

uint64_t sub_21F7E0FC0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a7 < 0)
  {
    char v9 = a7 & 1;
    sub_21F7656A8(a1, a2, a3 & 1);
    swift_bridgeObjectRelease();
    sub_21F7656A8(a5, a6, v9);
  }
  else
  {
    sub_21F7656A8(a1, a2, a3 & 1);
  }

  return swift_bridgeObjectRelease();
}

void *sub_21F7E1048(void *a1, void (*a2)(void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_21F7E108C(uint64_t a1)
{
  return *(void *)(a1 + 144) >> 63;
}

uint64_t sub_21F7E1098(uint64_t result)
{
  *(void *)(result + 144) &= ~0x8000000000000000;
  return result;
}

unint64_t sub_21F7E10A8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v22 = *(void *)(a3 + 16);
  uint64_t v23 = *(void *)(v22 + 32);
  swift_retain();
  uint64_t v24 = sub_21F7E3D34(a1, a2, v23);
  uint64_t v25 = *(void *)(v22 + 32);
  *(void *)(v22 + 32) = v24;
  uint64_t v26 = *(void *)(a3 + 24);
  *(void *)(a3 + 24) = v24;
  uint64_t v27 = swift_allocObject();
  uint64_t v28 = *(void *)(a5 + 64);
  char v29 = *(unsigned char *)(a5 + 72);
  *(void *)(v27 + 16) = *(void *)(a4 + 24);
  *(double *)(v27 + 24) = a6 + a8;
  *(double *)(v27 + 32) = a7 + a9;
  *(double *)(v27 + 40) = a10;
  *(double *)(v27 + 48) = a11;
  long long v30 = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(v27 + 56) = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(v27 + 72) = v30;
  *(void *)(v27 + 88) = v28;
  *(unsigned char *)(v27 + 96) = v29;
  *(_OWORD *)(v27 + 104) = *(_OWORD *)(a5 + 80);
  *(void *)(v27 + 120) = 2;
  *(_OWORD *)(v27 + 128) = 0u;
  *(_OWORD *)(v27 + 144) = 0u;
  *(_OWORD *)(v27 + 160) = 0u;
  *(_WORD *)(v27 + 176) = 6;
  *(void *)(v27 + 184) = 0;
  unint64_t v31 = v27 | 0xA000000000000000;
  *(void *)(a3 + 24) = v26;
  *(void *)(v22 + 32) = v25;
  sub_21F7E1224((uint64_t *)a5);
  swift_release();
  return v31;
}

uint64_t sub_21F7E11E4()
{
  sub_21F7B9430(v0[7], v0[8], v0[9]);

  return MEMORY[0x270FA0238](v0, 192, 7);
}

uint64_t *sub_21F7E1224(uint64_t *a1)
{
  return a1;
}

double sub_21F7E1258(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v13 = *(void *)(v12 + 32);
  swift_retain();
  uint64_t v14 = sub_21F7E3D34(a1, a2, v13);
  uint64_t v15 = *(void *)(v12 + 32);
  *(void *)(v12 + 32) = v14;
  uint64_t v16 = *(void *)(a3 + 24);
  *(void *)(a3 + 24) = v14;
  sub_21F993B80(a4, a5, a6, &v19);
  *(void *)(a3 + 24) = v16;
  double v17 = v19;
  *(void *)(v12 + 32) = v15;
  swift_release();
  return v17;
}

uint64_t sub_21F7E1318@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v4 = *(void *)(v2 + 32);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  swift_bridgeObjectRetain();
  return sub_21F9FEDD4(v6, v7, 2, v5, v4, a2);
}

uint64_t sub_21F7E1380@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  return sub_21F7E1408(a1, 1, a2);
}

uint64_t sub_21F7E139C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_21F779EA4(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21F7E13EC@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  return sub_21F7E1408(a1, 0, a2);
}

uint64_t sub_21F7E1408@<X0>(uint64_t *a1@<X0>, int a2@<W1>, char *a3@<X8>)
{
  return sub_21F9FEDD4(*a1, 0, a2, *(void *)(v3 + 24), *(void *)(v3 + 32), a3);
}

uint64_t sub_21F7E1444(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_21FA241F0();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21F7E1488(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_21F7E14F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

int8x16_t sub_21F7E1558(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24) & 1;
  uint64_t v2 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFF8;
  uint64_t v3 = *(void *)(a1 + 96) & 1;
  unint64_t v4 = *(void *)(a1 + 144) & 0xFFFFFFFFFFFFFF8 | 0x8000000000000000;
  *(void *)a1 &= 7uLL;
  *(void *)(a1 + 24) = v1;
  *(int8x16_t *)(a1 + 56) = vandq_s8(*(int8x16_t *)(a1 + 56), (int8x16_t)xmmword_21FA28D90);
  *(void *)(a1 + 72) = v2;
  *(void *)(a1 + 96) = v3;
  int8x16_t result = vandq_s8(*(int8x16_t *)(a1 + 128), (int8x16_t)xmmword_21FA28D90);
  *(int8x16_t *)(a1 + 128) = result;
  *(void *)(a1 + 144) = v4;
  return result;
}

uint64_t sub_21F7E15BC(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_21F7E1600(uint64_t a1, uint64_t a2)
{
  return a2;
}

__n128 initializeWithCopy for ChartContentRenderContext.OffsetValues.Band(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ChartContentRenderContext.OffsetValues.Band(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ChartContentRenderContext.OffsetValues.Band(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_21F7E1700(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 1u) {
    return *(unsigned __int8 *)(a1 + 32);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_21F7E1718(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 2;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
  }
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ChartContentRenderContext.OffsetValues.Band()
{
  return &type metadata for ChartContentRenderContext.OffsetValues.Band;
}

uint64_t getEnumTagSinglePayload for ChartContentRenderContext.RangePosition(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ChartContentRenderContext.RangePosition(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

uint64_t sub_21F7E179C()
{
  swift_getTupleTypeMetadata2();
  uint64_t result = sub_21FA26340();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_21F7E1848(void *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  int v8 = *(_DWORD *)(v6 + 84);
  uint64_t v9 = *(void *)(v6 + 64);
  unint64_t v10 = ~(unint64_t)v7;
  uint64_t v11 = v9 + v7;
  uint64_t v12 = (v11 & v10) + v9;
  if (v8) {
    size_t v13 = ((v9 + v7) & ~(unint64_t)v7) + v9;
  }
  else {
    size_t v13 = v12 + 1;
  }
  if (v7 > 7u || (v7 & 0x100000) != 0 || v13 > 0x18)
  {
    uint64_t v16 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v16 + ((v7 + 16) & v10));
    swift_retain();
    return a1;
  }
  if (!v8)
  {
    if (!*((unsigned char *)a2 + v12)) {
      goto LABEL_31;
    }
    int v17 = (*((unsigned __int8 *)a2 + v12) - 1) << (8 * v12);
    if (v12 > 3) {
      int v17 = 0;
    }
    if (v12)
    {
      int v18 = v12 <= 3 ? (v11 & v10) + v9 : 4;
      switch(v18)
      {
        case 2:
          int v19 = *a2;
          break;
        case 3:
          int v19 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v19 = *(_DWORD *)a2;
          break;
        default:
          int v19 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v19 = 0;
    }
    if ((v19 | v17) == 0xFFFFFFFF) {
      goto LABEL_31;
    }
LABEL_30:
    memcpy(a1, a2, v13);
    return a1;
  }
  if ((*(unsigned int (**)(unsigned __int16 *, void, uint64_t))(v6 + 48))(a2, *(unsigned int *)(v6 + 84), v5))
  {
    goto LABEL_30;
  }
LABEL_31:
  uint64_t v20 = *(void (**)(void *, unsigned __int16 *, uint64_t))(v6 + 16);
  v20(a1, a2, v5);
  v20((void *)(((unint64_t)a1 + v11) & v10), (unsigned __int16 *)(((unint64_t)a2 + v11) & v10), v5);
  if (!v8) {
    *((unsigned char *)a1 + v12) = 0;
  }
  return a1;
}

uint64_t sub_21F7E1A44(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = v6 + v7;
  if (v5)
  {
    uint64_t v14 = *(void *)(v3 - 8);
    uint64_t result = (*(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v4 + 48))(a1, v5, v3);
    uint64_t v4 = v14;
    if (result) {
      return result;
    }
    goto LABEL_17;
  }
  uint64_t v10 = (v8 & ~v7) + v6;
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_17;
  }
  int v11 = (*((unsigned __int8 *)a1 + v10) - 1) << (8 * v10);
  if (v10 > 3) {
    int v11 = 0;
  }
  if (v10)
  {
    if (v10 > 3) {
      LODWORD(v10) = 4;
    }
    switch((int)v10)
    {
      case 2:
        LODWORD(v10) = *a1;
        break;
      case 3:
        LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v10) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v10) = *(unsigned __int8 *)a1;
        break;
    }
  }
  int v12 = v10 | v11;
  uint64_t result = (v12 + 1);
  if (v12 == -1)
  {
LABEL_17:
    size_t v13 = *(void (**)(unsigned __int16 *, uint64_t))(v4 + 8);
    v13(a1, v3);
    return ((uint64_t (*)(unint64_t, uint64_t))v13)(((unint64_t)a1 + v8) & ~v7, v3);
  }
  return result;
}

unsigned char *sub_21F7E1BF0(unsigned char *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = v8 + v9;
  size_t v11 = ((v8 + v9) & ~v9) + v8;
  if (v7)
  {
    if (!(*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48))(a2, v7, v5))
    {
LABEL_22:
      uint64_t v16 = *(void (**)(unsigned char *, unsigned __int16 *, uint64_t))(v6 + 16);
      v16(a1, a2, v5);
      v16((unsigned char *)((unint64_t)&a1[v10] & ~v9), (unsigned __int16 *)(((unint64_t)a2 + v10) & ~v9), v5);
      if (!v7) {
        a1[v11] = 0;
      }
      return a1;
    }
  }
  else
  {
    if (!*((unsigned char *)a2 + v11)) {
      goto LABEL_22;
    }
    int v12 = (*((unsigned __int8 *)a2 + v11) - 1) << (8 * v11);
    if (v11 > 3) {
      int v12 = 0;
    }
    if (v11)
    {
      int v13 = v11 <= 3 ? v11 : 4;
      switch(v13)
      {
        case 2:
          int v14 = *a2;
          break;
        case 3:
          int v14 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v14 = *(_DWORD *)a2;
          break;
        default:
          int v14 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v14 = 0;
    }
    if ((v14 | v12) == 0xFFFFFFFF) {
      goto LABEL_22;
    }
  }
  if (v7) {
    size_t v15 = v11;
  }
  else {
    size_t v15 = v11 + 1;
  }
  memcpy(a1, a2, v15);
  return a1;
}

unsigned __int16 *sub_21F7E1DB8(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = ~v9;
  uint64_t v11 = v8 + v9;
  size_t v12 = ((v8 + v9) & ~v9) + v8;
  uint64_t v35 = v5;
  if (!v7)
  {
    char v20 = 8 * v12;
    if (*((unsigned char *)a1 + v12))
    {
      int v21 = (*((unsigned __int8 *)a1 + v12) - 1) << v20;
      if (v12 > 3) {
        int v21 = 0;
      }
      if (v12)
      {
        int v22 = v12 <= 3 ? v12 : 4;
        switch(v22)
        {
          case 2:
            int v23 = *a1;
            break;
          case 3:
            int v23 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v23 = *(_DWORD *)a1;
            break;
          default:
            int v23 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v23 = 0;
      }
      if ((v23 | v21) != 0xFFFFFFFF)
      {
        if (!*((unsigned char *)a2 + v12)) {
          goto LABEL_54;
        }
        int v24 = (*((unsigned __int8 *)a2 + v12) - 1) << v20;
        if (v12 > 3) {
          int v24 = 0;
        }
        if (v12)
        {
          int v25 = v12 <= 3 ? v12 : 4;
          switch(v25)
          {
            case 2:
              int v26 = *a2;
              break;
            case 3:
              int v26 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
              break;
            case 4:
              int v26 = *(_DWORD *)a2;
              break;
            default:
              int v26 = *(unsigned __int8 *)a2;
              break;
          }
        }
        else
        {
          int v26 = 0;
        }
        if ((v26 | v24) == 0xFFFFFFFF) {
          goto LABEL_54;
        }
        goto LABEL_45;
      }
    }
    if (!*((unsigned char *)a2 + v12))
    {
LABEL_49:
      uint64_t v32 = *(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v6 + 24);
      v32(a1, a2, v35);
      v32((unsigned __int16 *)(((unint64_t)a1 + v11) & v10), (unsigned __int16 *)(((unint64_t)a2 + v11) & v10), v35);
      return a1;
    }
    int v27 = (*((unsigned __int8 *)a2 + v12) - 1) << v20;
    if (v12 > 3) {
      int v27 = 0;
    }
    if (v12)
    {
      if (v12 <= 3) {
        int v28 = v12;
      }
      else {
        int v28 = 4;
      }
      switch(v28)
      {
        case 2:
          int v29 = *a2;
          break;
        case 3:
          int v29 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v29 = *(_DWORD *)a2;
          break;
        default:
          int v29 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v29 = 0;
    }
    int v19 = (v29 | v27) + 1;
LABEL_43:
    if (v19)
    {
      long long v30 = *(void (**)(unsigned __int16 *, uint64_t))(v6 + 8);
      v30(a1, v35);
      v30((unsigned __int16 *)(((unint64_t)a1 + v11) & v10), v35);
      goto LABEL_45;
    }
    goto LABEL_49;
  }
  uint64_t v13 = v8 + v9;
  uint64_t v14 = ~v9;
  size_t v15 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
  int v16 = v15(a1, v7, v5);
  uint64_t v17 = v5;
  int v18 = v16;
  int v19 = v15(a2, v7, v17);
  uint64_t v10 = v14;
  uint64_t v11 = v13;
  if (!v18) {
    goto LABEL_43;
  }
  if (!v19)
  {
LABEL_54:
    char v33 = *(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v6 + 16);
    v33(a1, a2, v35);
    v33((unsigned __int16 *)(((unint64_t)a1 + v11) & v10), (unsigned __int16 *)(((unint64_t)a2 + v11) & v10), v35);
    if (!v7) {
      *((unsigned char *)a1 + v12) = 0;
    }
    return a1;
  }
LABEL_45:
  if (v7) {
    size_t v31 = v12;
  }
  else {
    size_t v31 = v12 + 1;
  }
  memcpy(a1, a2, v31);
  return a1;
}

unsigned char *sub_21F7E216C(unsigned char *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = v8 + v9;
  size_t v11 = ((v8 + v9) & ~v9) + v8;
  if (v7)
  {
    if (!(*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48))(a2, v7, v5))
    {
LABEL_22:
      int v16 = *(void (**)(unsigned char *, unsigned __int16 *, uint64_t))(v6 + 32);
      v16(a1, a2, v5);
      v16((unsigned char *)((unint64_t)&a1[v10] & ~v9), (unsigned __int16 *)(((unint64_t)a2 + v10) & ~v9), v5);
      if (!v7) {
        a1[v11] = 0;
      }
      return a1;
    }
  }
  else
  {
    if (!*((unsigned char *)a2 + v11)) {
      goto LABEL_22;
    }
    int v12 = (*((unsigned __int8 *)a2 + v11) - 1) << (8 * v11);
    if (v11 > 3) {
      int v12 = 0;
    }
    if (v11)
    {
      int v13 = v11 <= 3 ? v11 : 4;
      switch(v13)
      {
        case 2:
          int v14 = *a2;
          break;
        case 3:
          int v14 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v14 = *(_DWORD *)a2;
          break;
        default:
          int v14 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v14 = 0;
    }
    if ((v14 | v12) == 0xFFFFFFFF) {
      goto LABEL_22;
    }
  }
  if (v7) {
    size_t v15 = v11;
  }
  else {
    size_t v15 = v11 + 1;
  }
  memcpy(a1, a2, v15);
  return a1;
}

unsigned __int16 *sub_21F7E2334(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = ~v9;
  uint64_t v11 = v8 + v9;
  size_t v12 = ((v8 + v9) & ~v9) + v8;
  uint64_t v35 = v5;
  if (!v7)
  {
    char v20 = 8 * v12;
    if (*((unsigned char *)a1 + v12))
    {
      int v21 = (*((unsigned __int8 *)a1 + v12) - 1) << v20;
      if (v12 > 3) {
        int v21 = 0;
      }
      if (v12)
      {
        int v22 = v12 <= 3 ? v12 : 4;
        switch(v22)
        {
          case 2:
            int v23 = *a1;
            break;
          case 3:
            int v23 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v23 = *(_DWORD *)a1;
            break;
          default:
            int v23 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v23 = 0;
      }
      if ((v23 | v21) != 0xFFFFFFFF)
      {
        if (!*((unsigned char *)a2 + v12)) {
          goto LABEL_54;
        }
        int v24 = (*((unsigned __int8 *)a2 + v12) - 1) << v20;
        if (v12 > 3) {
          int v24 = 0;
        }
        if (v12)
        {
          int v25 = v12 <= 3 ? v12 : 4;
          switch(v25)
          {
            case 2:
              int v26 = *a2;
              break;
            case 3:
              int v26 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
              break;
            case 4:
              int v26 = *(_DWORD *)a2;
              break;
            default:
              int v26 = *(unsigned __int8 *)a2;
              break;
          }
        }
        else
        {
          int v26 = 0;
        }
        if ((v26 | v24) == 0xFFFFFFFF) {
          goto LABEL_54;
        }
        goto LABEL_45;
      }
    }
    if (!*((unsigned char *)a2 + v12))
    {
LABEL_49:
      uint64_t v32 = *(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v6 + 40);
      v32(a1, a2, v35);
      v32((unsigned __int16 *)(((unint64_t)a1 + v11) & v10), (unsigned __int16 *)(((unint64_t)a2 + v11) & v10), v35);
      return a1;
    }
    int v27 = (*((unsigned __int8 *)a2 + v12) - 1) << v20;
    if (v12 > 3) {
      int v27 = 0;
    }
    if (v12)
    {
      if (v12 <= 3) {
        int v28 = v12;
      }
      else {
        int v28 = 4;
      }
      switch(v28)
      {
        case 2:
          int v29 = *a2;
          break;
        case 3:
          int v29 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v29 = *(_DWORD *)a2;
          break;
        default:
          int v29 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v29 = 0;
    }
    int v19 = (v29 | v27) + 1;
LABEL_43:
    if (v19)
    {
      long long v30 = *(void (**)(unsigned __int16 *, uint64_t))(v6 + 8);
      v30(a1, v35);
      v30((unsigned __int16 *)(((unint64_t)a1 + v11) & v10), v35);
      goto LABEL_45;
    }
    goto LABEL_49;
  }
  uint64_t v13 = v8 + v9;
  uint64_t v14 = ~v9;
  size_t v15 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
  int v16 = v15(a1, v7, v5);
  uint64_t v17 = v5;
  int v18 = v16;
  int v19 = v15(a2, v7, v17);
  uint64_t v10 = v14;
  uint64_t v11 = v13;
  if (!v18) {
    goto LABEL_43;
  }
  if (!v19)
  {
LABEL_54:
    char v33 = *(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v6 + 32);
    v33(a1, a2, v35);
    v33((unsigned __int16 *)(((unint64_t)a1 + v11) & v10), (unsigned __int16 *)(((unint64_t)a2 + v11) & v10), v35);
    if (!v7) {
      *((unsigned char *)a1 + v12) = 0;
    }
    return a1;
  }
LABEL_45:
  if (v7) {
    size_t v31 = v12;
  }
  else {
    size_t v31 = v12 + 1;
  }
  memcpy(a1, a2, v31);
  return a1;
}

uint64_t sub_21F7E26E8(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v5) {
    uint64_t v8 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v8 = v7 + 1;
  }
  if (!a2) {
    return 0;
  }
  int v9 = a2 - v6;
  if (a2 > v6)
  {
    uint64_t v10 = v8 + ((v7 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    char v11 = 8 * v10;
    if (v10 > 3) {
      goto LABEL_9;
    }
    unsigned int v13 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v13))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (v12) {
        goto LABEL_16;
      }
    }
    else
    {
      if (v13 <= 0xFF)
      {
        if (v13 < 2) {
          goto LABEL_24;
        }
LABEL_9:
        int v12 = *((unsigned __int8 *)a1 + v10);
        if (!*((unsigned char *)a1 + v10)) {
          goto LABEL_24;
        }
LABEL_16:
        int v14 = (v12 - 1) << v11;
        if (v10 > 3) {
          int v14 = 0;
        }
        if (v10)
        {
          if (v10 > 3) {
            LODWORD(v10) = 4;
          }
          switch((int)v10)
          {
            case 2:
              LODWORD(v10) = *a1;
              break;
            case 3:
              LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              LODWORD(v10) = *(_DWORD *)a1;
              break;
            default:
              LODWORD(v10) = *(unsigned __int8 *)a1;
              break;
          }
        }
        return v6 + (v10 | v14) + 1;
      }
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_16;
      }
    }
  }
LABEL_24:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void sub_21F7E2890(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v10 = v8 - 1;
  if (!v8) {
    unsigned int v10 = 0;
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v11 = ((v9 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + v9;
  if (v8) {
    size_t v12 = v11;
  }
  else {
    size_t v12 = v11 + 1;
  }
  BOOL v13 = a3 >= v10;
  unsigned int v14 = a3 - v10;
  if (v14 == 0 || !v13)
  {
LABEL_15:
    if (v10 < a2) {
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  if (v12 > 3)
  {
    int v6 = 1;
    if (v10 < a2) {
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  unsigned int v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
  if (!HIWORD(v15))
  {
    if (v15 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v15 > 1;
    }
    goto LABEL_15;
  }
  int v6 = 4;
  if (v10 < a2)
  {
LABEL_16:
    unsigned int v16 = ~v10 + a2;
    if (v12 < 4)
    {
      int v17 = (v16 >> (8 * v12)) + 1;
      if (v12)
      {
        int v18 = v16 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if (v12 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v12 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v16;
      int v17 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v12] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v12] = v17;
        return;
      case 3:
        goto LABEL_55;
      case 4:
        *(_DWORD *)&a1[v12] = v17;
        return;
      default:
        return;
    }
  }
LABEL_23:
  switch(v6)
  {
    case 1:
      a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_28;
    case 2:
      *(_WORD *)&a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_28;
    case 3:
LABEL_55:
      __break(1u);
      JUMPOUT(0x21F7E2B70);
    case 4:
      *(_DWORD *)&a1[v12] = 0;
      goto LABEL_27;
    default:
LABEL_27:
      if (a2)
      {
LABEL_28:
        if (v8 >= 2)
        {
          if (a2 + 1 <= v8)
          {
            if (a2 != -1)
            {
              int v22 = *(void (**)(void))(v7 + 56);
              v22();
            }
          }
          else
          {
            if (v11 <= 3) {
              int v19 = ~(-1 << (8 * v11));
            }
            else {
              int v19 = -1;
            }
            if (v11)
            {
              int v20 = v19 & (a2 - v8);
              if (v11 <= 3) {
                int v21 = v11;
              }
              else {
                int v21 = 4;
              }
              bzero(a1, v11);
              switch(v21)
              {
                case 2:
                  *(_WORD *)a1 = v20;
                  break;
                case 3:
                  *(_WORD *)a1 = v20;
                  a1[2] = BYTE2(v20);
                  break;
                case 4:
                  *(_DWORD *)a1 = v20;
                  break;
                default:
                  *a1 = v20;
                  break;
              }
            }
          }
        }
      }
      return;
  }
}

uint64_t type metadata accessor for PlottedValueCollector.ExtentCollector()
{
  return sub_21F764F08();
}

uint64_t initializeWithCopy for StackGroup(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_21F770E44(v4, v5, v6);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  unsigned int v7 = *(unsigned __int8 *)(a2 + 48);
  if (v7 <= 0xFB)
  {
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v8 = *(void *)(a2 + 40);
    sub_21F770E44(v9, v8, v7);
    *(void *)(a1 + 32) = v9;
    *(void *)(a1 + 40) = v8;
    *(unsigned char *)(a1 + 48) = v7;
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  }
  return a1;
}

uint64_t assignWithCopy for StackGroup(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_21F770E44(v4, v5, v6);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  char v9 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  sub_21F770E38(v7, v8, v9);
  unsigned int v10 = (_OWORD *)(a1 + 32);
  size_t v11 = (_OWORD *)(a2 + 32);
  unsigned int v12 = *(unsigned __int8 *)(a2 + 48);
  if (*(unsigned __int8 *)(a1 + 48) <= 0xFBu)
  {
    if (v12 <= 0xFB)
    {
      uint64_t v18 = *(void *)(a2 + 32);
      uint64_t v17 = *(void *)(a2 + 40);
      sub_21F770E44(v18, v17, v12);
      uint64_t v19 = *(void *)(a1 + 32);
      uint64_t v20 = *(void *)(a1 + 40);
      *(void *)(a1 + 32) = v18;
      *(void *)(a1 + 40) = v17;
      char v21 = *(unsigned char *)(a1 + 48);
      *(unsigned char *)(a1 + 48) = v12;
      sub_21F770E38(v19, v20, v21);
    }
    else
    {
      sub_21F7E2D90(a1 + 32);
      char v14 = *(unsigned char *)(a2 + 48);
      *unsigned int v10 = *v11;
      *(unsigned char *)(a1 + 48) = v14;
    }
  }
  else if (v12 <= 0xFB)
  {
    uint64_t v16 = *(void *)(a2 + 32);
    uint64_t v15 = *(void *)(a2 + 40);
    sub_21F770E44(v16, v15, v12);
    *(void *)(a1 + 32) = v16;
    *(void *)(a1 + 40) = v15;
    *(unsigned char *)(a1 + 48) = v12;
  }
  else
  {
    long long v13 = *v11;
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
    *unsigned int v10 = v13;
  }
  return a1;
}

uint64_t sub_21F7E2D90(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for StackGroup(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for StackGroup(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  char v7 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  sub_21F770E38(v5, v6, v7);
  uint64_t v8 = (_OWORD *)(a2 + 32);
  unsigned int v9 = *(unsigned __int8 *)(a1 + 48);
  if (v9 <= 0xFB)
  {
    unsigned int v10 = *(unsigned __int8 *)(a2 + 48);
    if (v10 <= 0xFB)
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 40);
      *(_OWORD *)(a1 + 32) = *v8;
      *(unsigned char *)(a1 + 48) = v10;
      sub_21F770E38(v11, v12, v9);
      return a1;
    }
    sub_21F7E2D90(a1 + 32);
  }
  *(_OWORD *)(a1 + 32) = *v8;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for StackGroup(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 1);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for StackGroup(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 1) = a2 + 1;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DimensionOffset(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DimensionOffset(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for DimensionOffset()
{
  return &type metadata for DimensionOffset;
}

uint64_t getEnumTagSinglePayload for LegendLayout(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s6Charts10StackGroupV4KindOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x21F7E3108);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_21F7E3130(unsigned char *result, char a2)
{
  *__n128 result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for StackGroup.Kind()
{
  return &type metadata for StackGroup.Kind;
}

uint64_t getEnumTagSinglePayload for ChartContentRenderContext.OffsetValues(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ChartContentRenderContext.OffsetValues(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 80) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 56) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartContentRenderContext.OffsetValues()
{
  return &type metadata for ChartContentRenderContext.OffsetValues;
}

unint64_t sub_21F7E3200()
{
  unint64_t result = qword_267EE75A8;
  if (!qword_267EE75A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE75A8);
  }
  return result;
}

uint64_t sub_21F7E3260@<X0>(uint64_t *a1@<X8>)
{
  sub_21FA244B0();
  uint64_t result = sub_21FA245C0();
  *a1 = result;
  return result;
}

double sub_21F7E32B0()
{
  return 0.5;
}

uint64_t sub_21F7E32B8(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (!*(unsigned char *)(a1 + 8))
  {
    if (*(unsigned char *)(a2 + 8)) {
      return 0;
    }
    return v2 == v3;
  }
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    if (v4 != 1) {
      return 0;
    }
    return v2 == v3;
  }
  if (v2 == 0.0)
  {
    if (v4 != 2 || *(void *)&v3 != 0) {
      return 0;
    }
  }
  else if (v4 != 2 || *(void *)&v3 != 1)
  {
    return 0;
  }
  return 1;
}

long double sub_21F7E3324(uint64_t a1, char a2, long double a3, double a4, double a5)
{
  if (a2)
  {
    if (a2 == 1)
    {
      long double v7 = a3;
      double v8 = *(double *)&a1 * a3;
      if ((*(void *)&v7 & 0x8000000000000000) != 0) {
        a3 = -log(1.0 - v8);
      }
      else {
        a3 = log(v8 + 1.0);
      }
    }
    else if (*(double *)&a1 != 0.0)
    {
      a3 = log(a3);
    }
  }
  else
  {
    a3 = pow(a3, *(long double *)&a1);
  }
  return a3 * a4 + a5;
}

double sub_21F7E33A4(uint64_t a1, char a2, double a3, double a4, double a5)
{
  double result = (a3 - a5) / a4;
  if (a2)
  {
    if (a2 == 1)
    {
      if ((*(void *)&result & 0x8000000000000000) != 0) {
        double v7 = 1.0 - exp(-result);
      }
      else {
        double v7 = exp(result) + -1.0;
      }
      return v7 / *(double *)&a1;
    }
    else if (*(double *)&a1 != 0.0)
    {
      return exp(result);
    }
  }
  else
  {
    return pow(result, 1.0 / *(double *)&a1);
  }
  return result;
}

uint64_t sub_21F7E3450@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(result + 16) != 2)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v3 = result;
  double v4 = *(double *)(result + 32);
  if (v4 <= 0.0) {
    goto LABEL_11;
  }
  long double v5 = *(double *)(result + 40);
  if (v5 <= 0.0) {
    goto LABEL_11;
  }
  if (v4 == v5)
  {
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    *(double *)(v6 + 16) = v4;
    double v9 = 0.5;
    double v10 = 0.0;
    uint64_t v11 = sub_21F7E3A14;
    uint64_t v12 = sub_21F7E32B0;
  }
  else
  {
    double v13 = log(*(long double *)(result + 32));
    double v10 = 1.0 / (log(v5) - v13);
    uint64_t v7 = swift_allocObject();
    *(double *)(v7 + 16) = v13;
    *(double *)(v7 + 24) = v10;
    uint64_t v6 = swift_allocObject();
    *(double *)(v6 + 16) = v10;
    *(double *)(v6 + 24) = v13;
    double v9 = -(v13 * v10);
    uint64_t v11 = sub_21F7E39B0;
    uint64_t v12 = sub_21F7E3970;
    uint64_t v8 = 1;
  }
  *(void *)a2 = v12;
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = v11;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = v3;
  *(void *)(a2 + 40) = v8;
  *(void *)(a2 + 48) = 2;
  *(double *)(a2 + 56) = v10;
  *(double *)(a2 + 64) = v9;

  return swift_bridgeObjectRetain();
}

void sub_21F7E35B4(uint64_t a1@<X0>, uint64_t a2@<X8>, long double a3@<D0>)
{
  if (*(void *)(a1 + 16) != 2)
  {
    __break(1u);
    goto LABEL_11;
  }
  double v5 = *(double *)(a1 + 32);
  long double v6 = *(double *)(a1 + 40);
  if (v5 != v6)
  {
    double v14 = pow(*(long double *)(a1 + 32), a3);
    double v15 = pow(v6, a3);
    if ((~*(void *)&v14 & 0x7FF0000000000000) != 0)
    {
      double v16 = 1.0 / (v15 - v14);
      double v9 = v16;
      if ((*(void *)&v16 & 0x7FF0000000000000) != 0x7FF0000000000000)
      {
        uint64_t v8 = (double *)swift_allocObject();
        v8[2] = a3;
        v8[3] = v14;
        v8[4] = v16;
        uint64_t v7 = (double *)swift_allocObject();
        v7[2] = v16;
        _OWORD v7[3] = v14;
        v7[4] = a3;
        double v11 = -(v14 * v16);
        long long v10 = *(unint64_t *)&a3;
        uint64_t v12 = sub_21F7E3A78;
        double v13 = sub_21F7E3A34;
        goto LABEL_7;
      }
    }
LABEL_11:
    __break(1u);
    return;
  }
  uint64_t v7 = (double *)swift_allocObject();
  uint64_t v8 = 0;
  double v9 = 0.0;
  v7[2] = v5;
  long long v10 = xmmword_21FA29CA0;
  double v11 = 0.5;
  uint64_t v12 = sub_21F7E3D30;
  double v13 = sub_21F7E32B0;
LABEL_7:
  *(void *)a2 = v13;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = v12;
  *(void *)(a2 + 24) = v7;
  *(void *)(a2 + 32) = a1;
  *(_OWORD *)(a2 + 40) = v10;
  *(double *)(a2 + 56) = v9;
  *(double *)(a2 + 64) = v11;

  swift_bridgeObjectRetain();
}

uint64_t sub_21F7E3750@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  if (a3 > 0.0 && *(void *)(result + 16) == 2)
  {
    uint64_t v5 = result;
    double v6 = *(double *)(result + 32);
    double v7 = *(double *)(result + 40);
    if (v6 == v7)
    {
      uint64_t v8 = (double *)swift_allocObject();
      double v9 = 0;
      v8[2] = v6;
      int64x2_t v10 = (int64x2_t)xmmword_21FA29CA0;
      double v11 = 0.5;
      double v12 = 0.0;
      double v13 = sub_21F7E3D30;
      double v14 = sub_21F7E32B0;
    }
    else
    {
      double v15 = v6 * a3;
      if ((*(void *)&v6 & 0x8000000000000000) != 0) {
        double v16 = -log(1.0 - v15);
      }
      else {
        double v16 = log(v15 + 1.0);
      }
      double v17 = v7 * a3;
      if ((*(void *)&v7 & 0x8000000000000000) != 0) {
        double v18 = -log(1.0 - v17);
      }
      else {
        double v18 = log(v17 + 1.0);
      }
      double v12 = 1.0 / (v18 - v16);
      double v9 = (double *)swift_allocObject();
      v9[2] = a3;
      v9[3] = v16;
      v9[4] = v12;
      uint64_t v8 = (double *)swift_allocObject();
      v8[2] = v12;
      v8[3] = v16;
      v8[4] = a3;
      double v11 = -(v16 * v12);
      int64x2_t v10 = vdupq_n_s64(1uLL);
      *(double *)v10.i64 = a3;
      double v13 = sub_21F7E3B64;
      double v14 = sub_21F7E3AF8;
    }
    *(void *)a2 = v14;
    *(void *)(a2 + 8) = v9;
    *(void *)(a2 + 16) = v13;
    *(void *)(a2 + 24) = v8;
    *(void *)(a2 + 32) = v5;
    *(int64x2_t *)(a2 + 40) = v10;
    *(double *)(a2 + 56) = v12;
    *(double *)(a2 + 64) = v11;
    return swift_bridgeObjectRetain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_21F7E3908()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_21F7E3918()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_21F7E3928@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if ((a2 & 1) == 0) {
    *(double *)&double result = *(double *)(v3 + 24) + *(double *)&result / *(double *)(v3 + 16);
  }
  *(double *)a3 = *(double *)&result;
  *(unsigned char *)(a3 + 8) = a2 & 1;
  return result;
}

uint64_t sub_21F7E3950()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_21F7E3960()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

long double sub_21F7E3970(long double *a1)
{
  double v2 = *(double *)(v1 + 16);
  double v3 = *(double *)(v1 + 24);
  return v3 * (log(*a1) - v2);
}

uint64_t sub_21F7E39A0()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_21F7E39B0@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if ((a2 & 1) == 0) {
    *(double *)&double result = exp(*(double *)(v3 + 24) + *(double *)&result / *(double *)(v3 + 16));
  }
  *(double *)a3 = *(double *)&result;
  *(unsigned char *)(a3 + 8) = a2 & 1;
  return result;
}

uint64_t sub_21F7E3A04()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

double sub_21F7E3A14@<D0>(uint64_t a1@<X8>)
{
  double result = *(double *)(v1 + 16);
  *(double *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_21F7E3A24()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

long double sub_21F7E3A34(long double *a1)
{
  double v2 = *(double *)(v1 + 24);
  double v3 = *(double *)(v1 + 32);
  return v3 * (pow(*a1, *(long double *)(v1 + 16)) - v2);
}

uint64_t sub_21F7E3A68()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_21F7E3A78@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if ((a2 & 1) == 0) {
    *(double *)&double result = pow(v3[3] + *(double *)&result / v3[2], 1.0 / v3[4]);
  }
  *(double *)a3 = *(double *)&result;
  *(unsigned char *)(a3 + 8) = a2 & 1;
  return result;
}

uint64_t sub_21F7E3AD8()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_21F7E3AE8()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

double sub_21F7E3AF8(double *a1)
{
  double v2 = v1[3];
  double v3 = v1[4];
  double v4 = v1[2] * *a1;
  if ((*(void *)a1 & 0x8000000000000000) != 0) {
    double v5 = -log(1.0 - v4);
  }
  else {
    double v5 = log(v4 + 1.0);
  }
  return v3 * (v5 - v2);
}

uint64_t sub_21F7E3B54()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_21F7E3B64@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if ((a2 & 1) == 0)
  {
    double v6 = v3[4];
    double v7 = v3[3] + *(double *)&result / v3[2];
    if ((*(void *)&v7 & 0x8000000000000000) != 0) {
      double v8 = 1.0 - exp(-v7);
    }
    else {
      double v8 = exp(v7) + -1.0;
    }
    *(double *)&double result = v8 / v6;
  }
  *(double *)a3 = *(double *)&result;
  *(unsigned char *)(a3 + 8) = a2 & 1;
  return result;
}

uint64_t sub_21F7E3BEC()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_21F7E3BFC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    double v4 = *(double *)(result + 32);
    result += 32;
    uint64_t v5 = *(void *)(result + 24);
    uint64_t v6 = *(void *)(result + 32);
    uint64_t v8 = *(void *)(result + 8);
    uint64_t v7 = *(void *)(result + 16);
    *(double *)a2 = v4 + (*(double *)(result + 40 * v3 - 40) - v4) * a3;
    *(void *)(a2 + 8) = v8;
    *(void *)(a2 + 16) = v7;
    *(void *)(a2 + 24) = v5;
    *(void *)(a2 + 32) = v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

ValueMetadata *type metadata accessor for GradientScaleRange()
{
  return &type metadata for GradientScaleRange;
}

uint64_t sub_21F7E3C54(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_21F7E3C6C(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)double result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ContinuousScaleFunction()
{
  return &type metadata for ContinuousScaleFunction;
}

uint64_t getEnumTagSinglePayload for ContinuousScaleRepresentation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ContinuousScaleRepresentation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)double result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContinuousScaleRepresentation()
{
  return &type metadata for ContinuousScaleRepresentation;
}

uint64_t sub_21F7E3D34(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4 = v3;
  *(void *)&long long v21 = a1;
  BYTE8(v21) = a2;
  sub_21F7EAC30();
  sub_21FA26490();
  v20[0] = a3;
  swift_beginAccess();
  uint64_t v6 = *(void *)(v3 + 16);
  if (*(void *)(v6 + 16) && (unint64_t v7 = sub_21F766618(v20), (v8 & 1) != 0))
  {
    uint64_t v9 = *(void *)(*(void *)(v6 + 56) + 8 * v7);
  }
  else
  {
    swift_endAccess();
    sub_21FA26A60();
    sub_21FA26A10();
    sub_21FA26A10();
    sub_21FA26A30();
    long long v23 = v17;
    long long v24 = v18;
    uint64_t v25 = v19;
    long long v21 = v15;
    long long v22 = v16;
    uint64_t v10 = sub_21FA26A40();
    uint64_t v9 = sub_21F766868(v10);
    sub_21F7667FC((uint64_t)v20, (uint64_t)v14);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *(void *)(v4 + 16);
    *(void *)(v4 + 16) = 0x8000000000000000;
    sub_21F7664C4(v9, v14, isUniquelyReferenced_nonNull_native);
    *(void *)(v4 + 16) = v13;
    swift_bridgeObjectRelease();
    sub_21F766780((uint64_t)v14);
  }
  swift_endAccess();
  sub_21F766780((uint64_t)v20);
  return v9;
}

uint64_t sub_21F7E3ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  *(void *)&long long v21 = a1;
  *((void *)&v21 + 1) = a2;
  swift_bridgeObjectRetain();
  sub_21FA26490();
  v20[0] = a3;
  swift_beginAccess();
  uint64_t v6 = *(void *)(v3 + 16);
  if (*(void *)(v6 + 16) && (unint64_t v7 = sub_21F766618(v20), (v8 & 1) != 0))
  {
    uint64_t v9 = *(void *)(*(void *)(v6 + 56) + 8 * v7);
  }
  else
  {
    swift_endAccess();
    sub_21FA26A60();
    sub_21FA25D30();
    sub_21FA26A30();
    long long v23 = v17;
    long long v24 = v18;
    uint64_t v25 = v19;
    long long v21 = v15;
    long long v22 = v16;
    uint64_t v10 = sub_21FA26A40();
    uint64_t v9 = sub_21F766868(v10);
    sub_21F7667FC((uint64_t)v20, (uint64_t)v14);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *(void *)(v4 + 16);
    *(void *)(v4 + 16) = 0x8000000000000000;
    sub_21F7664C4(v9, v14, isUniquelyReferenced_nonNull_native);
    *(void *)(v4 + 16) = v13;
    swift_bridgeObjectRelease();
    sub_21F766780((uint64_t)v14);
  }
  swift_endAccess();
  sub_21F766780((uint64_t)v20);
  return v9;
}

uint64_t sub_21F7E4070(uint64_t a1, double a2)
{
  uint64_t v3 = v2;
  *(double *)&long long v20 = a2;
  sub_21FA26490();
  v19[0] = a1;
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 16);
  if (*(void *)(v5 + 16) && (unint64_t v6 = sub_21F766618(v19), (v7 & 1) != 0))
  {
    uint64_t v8 = *(void *)(*(void *)(v5 + 56) + 8 * v6);
  }
  else
  {
    swift_endAccess();
    sub_21FA26A60();
    sub_21FA26A30();
    sub_21FA26A30();
    long long v22 = v16;
    long long v23 = v17;
    uint64_t v24 = v18;
    long long v20 = v14;
    long long v21 = v15;
    uint64_t v9 = sub_21FA26A40();
    uint64_t v8 = sub_21F766868(v9);
    sub_21F7667FC((uint64_t)v19, (uint64_t)v13);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = 0x8000000000000000;
    sub_21F7664C4(v8, v13, isUniquelyReferenced_nonNull_native);
    *(void *)(v3 + 16) = v12;
    swift_bridgeObjectRelease();
    sub_21F766780((uint64_t)v13);
  }
  swift_endAccess();
  sub_21F766780((uint64_t)v19);
  return v8;
}

uint64_t sub_21F7E4200(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  return sub_21F7802DC(a1, a2, a3, sub_21F788B08);
}

uint64_t sub_21F7E4218(uint64_t a1, char a2, void (*a3)(void))
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(v4 + 16);
  uint64_t v9 = *(void *)(v8 + 32);
  swift_retain();
  uint64_t v10 = sub_21F7E3D34(a1, a2, v9);
  uint64_t v11 = *(void *)(v8 + 32);
  *(void *)(v8 + 32) = v10;
  uint64_t v12 = *(void *)(v4 + 24);
  *(void *)(v4 + 24) = v10;
  a3();
  *(void *)(v4 + 24) = v12;
  *(void *)(v8 + 32) = v11;

  return swift_release();
}

uint64_t sub_21F7E42C4(uint64_t a1, char a2, void (*a3)(uint64_t *__return_ptr))
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(v4 + 16);
  uint64_t v9 = *(void *)(v8 + 32);
  swift_retain();
  uint64_t v10 = sub_21F7E3D34(a1, a2, v9);
  uint64_t v11 = *(void *)(v8 + 32);
  *(void *)(v8 + 32) = v10;
  uint64_t v12 = *(void *)(v4 + 24);
  *(void *)(v4 + 24) = v10;
  a3(&v15);
  *(void *)(v4 + 24) = v12;
  uint64_t v13 = v15;
  *(void *)(v8 + 32) = v11;
  swift_release();
  return v13;
}

uint64_t BuilderTuple.elements.getter@<X0>(uint64_t TupleTypeMetadata@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v4 = TupleTypeMetadata;
  unint64_t v6 = *(void *)(TupleTypeMetadata + 16);
  if (v6 == 1)
  {
    uint64_t v7 = *(void *)(*(void *)(TupleTypeMetadata + 24) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x270FA5388](TupleTypeMetadata);
    uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
    {
      unint64_t v10 = 0;
      unint64_t v11 = *(void *)(v4 + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (v6 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v9[-v11] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v10 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v12 = (long long *)(v11 + 16);
      uint64_t v13 = v9 + 16;
      unint64_t v14 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *uint64_t v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v6 != v10)
      {
LABEL_9:
        unint64_t v16 = v6 - v10;
        uint64_t v17 = 8 * v10;
        uint64_t v18 = &v9[8 * v10];
        uint64_t v19 = (uint64_t *)(v11 + v17);
        do
        {
          uint64_t v20 = *v19++;
          *(void *)uint64_t v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v7 = TupleTypeMetadata;
  }
  __n128 v21 = MEMORY[0x270FA5388](TupleTypeMetadata);
  long long v23 = (char *)&v33 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v24 + 16))(v23, v3, v7, v21);
  if (v6)
  {
    int v26 = (uint64_t *)(*(void *)(v4 + 24) & 0xFFFFFFFFFFFFFFFELL);
    int v27 = (int *)(v7 + 32);
    unint64_t v28 = v6;
    do
    {
      if (v6 == 1) {
        int v29 = 0;
      }
      else {
        int v29 = *v27;
      }
      uint64_t v31 = *v26++;
      uint64_t v30 = v31;
      uint64_t v32 = *a2++;
      uint64_t result = (*(uint64_t (**)(uint64_t, char *))(*(void *)(v30 - 8) + 32))(v32, &v23[v29]);
      v27 += 4;
      --v28;
    }
    while (v28);
  }
  return result;
}

uint64_t BuilderTuple.elements.setter(uint64_t TupleTypeMetadata, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)TupleTypeMetadata;
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5 == 1)
  {
    uint64_t v6 = *(void *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x270FA5388](TupleTypeMetadata);
    uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v5)
    {
      unint64_t v9 = 0;
      unint64_t v10 = *(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (v5 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v8[-v10] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v9 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v11 = (long long *)(v10 + 16);
      uint64_t v12 = v8 + 16;
      unint64_t v13 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v14 = *v11;
        *(v12 - 1) = *(v11 - 1);
        *uint64_t v12 = v14;
        v11 += 2;
        v12 += 2;
        v13 -= 4;
      }
      while (v13);
      if (v5 != v9)
      {
LABEL_9:
        unint64_t v15 = v5 - v9;
        uint64_t v16 = 8 * v9;
        uint64_t v17 = &v8[8 * v9];
        uint64_t v18 = (uint64_t *)(v10 + v16);
        do
        {
          uint64_t v19 = *v18++;
          *(void *)uint64_t v17 = v19;
          v17 += 8;
          --v15;
        }
        while (v15);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v6 = TupleTypeMetadata;
  }
  uint64_t v20 = *(void *)(v6 - 8);
  __n128 v21 = MEMORY[0x270FA5388](TupleTypeMetadata);
  long long v23 = (char *)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
  {
    uint64_t v24 = (uint64_t *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v25 = (int *)(v6 + 32);
    unint64_t v26 = v5;
    do
    {
      if (v5 == 1) {
        int v27 = 0;
      }
      else {
        int v27 = *v25;
      }
      uint64_t v29 = *v24++;
      uint64_t v28 = v29;
      uint64_t v30 = *v4++;
      (*(void (**)(char *, uint64_t))(*(void *)(v28 - 8) + 32))(&v23[v27], v30);
      v25 += 4;
      --v26;
    }
    while (v26);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, __n128))(v20 + 40))(v2, v23, v6, v21);
}

uint64_t (*BuilderTuple.elements.modify())()
{
  return nullsub_1;
}

uint64_t BuilderTuple.init(elements:)@<X0>(uint64_t TupleTypeMetadata@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5 = (uint64_t *)TupleTypeMetadata;
  uint64_t v37 = a4;
  uint64_t v6 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    uint64_t v7 = *v6;
  }
  else
  {
    MEMORY[0x270FA5388](TupleTypeMetadata);
    unint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a2)
    {
      unint64_t v10 = 0;
      if (a2 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)(v9 - (char *)v6) < 0x20) {
        goto LABEL_9;
      }
      unint64_t v10 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v11 = (long long *)(v6 + 2);
      uint64_t v12 = v9 + 16;
      unint64_t v13 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v14 = *v11;
        *(v12 - 1) = *(v11 - 1);
        *uint64_t v12 = v14;
        v11 += 2;
        v12 += 2;
        v13 -= 4;
      }
      while (v13);
      if (v10 != a2)
      {
LABEL_9:
        unint64_t v15 = a2 - v10;
        uint64_t v16 = v10;
        uint64_t v17 = &v9[8 * v10];
        uint64_t v18 = &v6[v16];
        do
        {
          uint64_t v19 = *v18++;
          *(void *)uint64_t v17 = v19;
          v17 += 8;
          --v15;
        }
        while (v15);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v7 = TupleTypeMetadata;
  }
  uint64_t v20 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata);
  uint64_t v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for BuilderTuple();
  uint64_t v36 = &v34;
  uint64_t v23 = *(void *)(v35 - 8);
  __n128 v24 = MEMORY[0x270FA5388](v35);
  unint64_t v26 = (char *)&v34 - v25;
  if (a2)
  {
    int v27 = (int *)(v7 + 32);
    unint64_t v28 = a2;
    do
    {
      if (a2 == 1) {
        int v29 = 0;
      }
      else {
        int v29 = *v27;
      }
      uint64_t v31 = *v6++;
      uint64_t v30 = v31;
      uint64_t v32 = *v5++;
      (*(void (**)(char *, uint64_t))(*(void *)(v30 - 8) + 32))(&v22[v29], v32);
      v27 += 4;
      --v28;
    }
    while (v28);
  }
  (*(void (**)(char *, char *, uint64_t, __n128))(v20 + 16))(v26, v22, v7, v24);
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v37, v26, v35);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v22, v7);
}

void BuilderTuple<each A>.body.getter()
{
}

{
  sub_21FA266E0();
  __break(1u);
}

uint64_t static BuilderTuple<each A>._makeChartContent(content:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v77 = a2;
  uint64_t v75 = a1;
  uint64_t v73 = a6;
  unint64_t v9 = a4 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v10 = type metadata accessor for _ChartContentOutputs(0);
  uint64_t v66 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_21FA24F30();
  uint64_t v79 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  double v78 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v72 = (char *)&v65 - v16;
  uint64_t v70 = type metadata accessor for MultiPreferenceCombinerVisitor();
  MEMORY[0x270FA5388](v70);
  uint64_t v71 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for _ChartContentInputs(0);
  MEMORY[0x270FA5388](v69);
  uint64_t v19 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for BuilderTuple();
  uint64_t v74 = sub_21FA24530();
  uint64_t v20 = *(void *)(v74 - 8);
  MEMORY[0x270FA5388](v74);
  uint64_t v22 = (char *)&v65 - v21;
  uint64_t v76 = a4;
  uint64_t v23 = a5;
  ListVMa = (int *)_s8MakeListVMa();
  uint64_t v68 = *((void *)ListVMa - 1);
  __n128 v25 = MEMORY[0x270FA5388](ListVMa);
  uint64_t v81 = (uint64_t)&v65 - v26;
  uint64_t v67 = v12;
  if (a3 == 1)
  {
    unint64_t v27 = v9;
  }
  else
  {
    MEMORY[0x270FA5388](v24);
    int v29 = (char *)&v65 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a3)
    {
      unint64_t v30 = 0;
      if (a3 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v29[-v9] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v30 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v31 = (long long *)(v9 + 16);
      uint64_t v32 = v29 + 16;
      unint64_t v33 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v34 = *v31;
        *(v32 - 1) = *(v31 - 1);
        *uint64_t v32 = v34;
        v31 += 2;
        v32 += 2;
        v33 -= 4;
      }
      while (v33);
      if (v30 != a3)
      {
LABEL_9:
        unint64_t v35 = a3 - v30;
        uint64_t v36 = 8 * v30;
        uint64_t v37 = &v29[8 * v30];
        uint64_t v38 = (uint64_t *)(v9 + v36);
        do
        {
          uint64_t v39 = *v38++;
          *(void *)uint64_t v37 = v39;
          v37 += 8;
          --v35;
        }
        while (v35);
      }
    }
    unint64_t v27 = v9;
    swift_getTupleTypeMetadata();
  }
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v20 + 16))(v22, v75, v74, v25);
  sub_21F7E6420(v77, (uint64_t)v19, type metadata accessor for _ChartContentInputs);
  sub_21F7E51B0((uint64_t)v22, (uint64_t)v19, 0, MEMORY[0x263F8EE78], v81);
  if (a3)
  {
    unint64_t v40 = a3;
    uint64_t v41 = 0;
    uint64_t v42 = v81;
    uint64_t v43 = ListVMa[12];
    unint64_t v44 = v23 & 0xFFFFFFFFFFFFFFFELL;
    while (1)
    {
      uint64_t v45 = *(void *)(v27 + 8 * v41);
      uint64_t v46 = *(void *)(v44 + 8 * v41);
      *(void *)(v42 + v43) = AGTupleElementOffset();
      uint64_t result = sub_21F7E52A0(v45, ListVMa, v45, v46);
      if (v41 == 0x7FFFFFFFFFFFFFFFLL) {
        break;
      }
      if (v40 == ++v41) {
        goto LABEL_16;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_16:
    uint64_t v48 = *(void *)(v81 + ListVMa[13]);
    int64_t v49 = *(void *)(v48 + 16);
    uint64_t v50 = MEMORY[0x263F8EE78];
    uint64_t v51 = (uint64_t)v67;
    if (v49)
    {
      uint64_t v82 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      sub_21F7A23B0(0, v49, 0);
      uint64_t v52 = *(unsigned __int8 *)(v66 + 80);
      uint64_t v76 = v48;
      uint64_t v53 = v48 + ((v52 + 32) & ~v52);
      uint64_t v54 = *(void *)(v66 + 72);
      uint64_t v55 = v78;
      uint64_t v56 = (void (**)(char *, uint64_t, uint64_t))(v79 + 16);
      uint64_t v57 = v13;
      do
      {
        sub_21F7E6420(v53, v51, type metadata accessor for _ChartContentOutputs);
        (*v56)(v55, v51, v13);
        sub_21F7EB0FC(v51, type metadata accessor for _ChartContentOutputs);
        uint64_t v50 = v82;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_21F7A23B0(0, *(void *)(v50 + 16) + 1, 1);
          uint64_t v50 = v82;
        }
        unint64_t v59 = *(void *)(v50 + 16);
        unint64_t v58 = *(void *)(v50 + 24);
        if (v59 >= v58 >> 1)
        {
          sub_21F7A23B0(v58 > 1, v59 + 1, 1);
          uint64_t v50 = v82;
        }
        *(void *)(v50 + 16) = v59 + 1;
        uint64_t v55 = v78;
        unint64_t v60 = v50
            + ((*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80))
            + *(void *)(v79 + 72) * v59;
        uint64_t v13 = v57;
        (*(void (**)(unint64_t, char *, uint64_t))(v79 + 32))(v60, v78, v57);
        uint64_t v82 = v50;
        v53 += v54;
        --v49;
      }
      while (v49);
      swift_bridgeObjectRelease();
    }
    uint64_t v61 = v71;
    uint64_t v62 = &v71[*(int *)(v70 + 20)];
    _s6Charts11BuilderPairVA2A12ChartContentRzAaDR_rlE05_makedE07content6inputsAA01_dE7OutputsV7SwiftUI11_GraphValueVyACyxq_GG_AA01_dE6InputsVtFZ_0();
    *uint64_t v61 = v50;
    sub_21F7E6488();
    sub_21FA24EE0();
    (*(void (**)(uint64_t, int *))(v68 + 8))(v81, ListVMa);
    uint64_t v63 = v79;
    uint64_t v64 = v72;
    (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v72, v62, v13);
    sub_21F7EB0FC((uint64_t)v61, (uint64_t (*)(void))type metadata accessor for MultiPreferenceCombinerVisitor);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v63 + 32))(v73, v64, v13);
  }
  return result;
}

uint64_t sub_21F7E51B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  type metadata accessor for BuilderTuple();
  uint64_t v10 = sub_21FA24530();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(a5, a1, v10);
  ListVMa = (int *)_s8MakeListVMa();
  uint64_t result = sub_21F7EB174(a2, a5 + ListVMa[11], type metadata accessor for _ChartContentInputs);
  *(void *)(a5 + ListVMa[12]) = a3;
  *(void *)(a5 + ListVMa[13]) = a4;
  return result;
}

uint64_t sub_21F7E52A0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v41 = a4;
  uint64_t v39 = a3;
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v42 = sub_21FA24530();
  uint64_t v40 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v38 = (uint64_t)&v36 - v6;
  uint64_t v7 = type metadata accessor for _ChartContentOutputs(0);
  uint64_t v44 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7 - 8);
  unint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v37 = (char *)&v36 - v11;
  uint64_t v12 = type metadata accessor for _ChartContentInputs(0);
  uint64_t v13 = v12 - 8;
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (uint64_t)v4 + a2[11];
  sub_21F7E6420(v16, (uint64_t)v15, type metadata accessor for _ChartContentInputs);
  int v17 = *(_DWORD *)(v16 + *(int *)(v13 + 36));
  uint64_t v36 = a2[12];
  uint64_t v18 = *(void *)((char *)v4 + v36);
  sub_21F76CA40(qword_267EE7718);
  uint64_t v19 = swift_allocObject();
  uint64_t v43 = &v36;
  *(_OWORD *)(v19 + 16) = xmmword_21FA28550;
  *(void *)(v19 + 32) = -1;
  *(unsigned char *)(v19 + 72) = 0;
  int v46 = v17;
  uint64_t v20 = v4;
  uint64_t v47 = v18;
  uint64_t v48 = v19;
  uint64_t v21 = (uint64_t)v9;
  uint64_t v22 = _s20ChildContainerValuesVMa();
  uint64_t v50 = v22;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v23 = sub_21F76CA40(&qword_267EE7708);
  sub_21F74C95C((uint64_t)&v46, (uint64_t)sub_21F74D654, (uint64_t)v49, v22, MEMORY[0x263F8E628], v23, MEMORY[0x263F8E658], v24);
  swift_bridgeObjectRelease();
  uint64_t v25 = *(int *)(v13 + 36);
  uint64_t v26 = (uint64_t)v15;
  *(_DWORD *)&v15[v25] = v45;
  uint64_t v27 = (uint64_t)v37;
  type metadata accessor for BuilderTuple();
  sub_21F74D6C4(v4);
  uint64_t v28 = v39;
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  uint64_t v30 = v38;
  sub_21F74CA38(OffsetAttribute2, v38);
  (*(void (**)(uint64_t, char *, uint64_t))(v41 + 48))(v30, v15, v28);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v30, v42);
  sub_21F7E6420(v27, (uint64_t)v9, type metadata accessor for _ChartContentOutputs);
  uint64_t v31 = a2[13];
  uint64_t v32 = *(void **)((char *)v20 + v31);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v32 = (void *)sub_21F7EAA54(0, v32[2] + 1, 1, v32, &qword_267EE7710, type metadata accessor for _ChartContentOutputs);
  }
  unint64_t v34 = v32[2];
  unint64_t v33 = v32[3];
  if (v34 >= v33 >> 1) {
    uint64_t v32 = (void *)sub_21F7EAA54(v33 > 1, v34 + 1, 1, v32, &qword_267EE7710, type metadata accessor for _ChartContentOutputs);
  }
  v32[2] = v34 + 1;
  sub_21F7EB174(v21, (uint64_t)v32+ ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80))+ *(void *)(v44 + 72) * v34, type metadata accessor for _ChartContentOutputs);
  *(void *)((char *)v20 + v31) = v32;
  sub_21F7EB0FC(v27, type metadata accessor for _ChartContentOutputs);
  return sub_21F7EB0FC(v26, type metadata accessor for _ChartContentInputs);
}

uint64_t static BuilderTuple<each A>._chartContentCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for _ChartContentInputs(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = _s13CountContentsVMa();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v23 - v13;
  sub_21F7E6420(a1, (uint64_t)v10, type metadata accessor for _ChartContentInputs);
  sub_21F7EB174((uint64_t)v10, (uint64_t)v14, type metadata accessor for _ChartContentInputs);
  uint64_t v15 = &v14[*(int *)(v11 + 44)];
  *(void *)uint64_t v15 = 0;
  v15[8] = 0;
  if (a2)
  {
    uint64_t v16 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
    int v17 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFFELL);
    do
    {
      uint64_t v19 = *v16++;
      uint64_t v18 = v19;
      uint64_t v20 = *v17++;
      sub_21F7E592C(v18, v11, v18, v20);
      --a2;
    }
    while (a2);
  }
  uint64_t v21 = *(void *)&v14[*(int *)(v11 + 44)];
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return v21;
}

void sub_21F7E592C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 v8 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (uint64_t *)(v4 + *(int *)(v11 + 52));
  if ((v12[1] & 1) != 0
    || (uint64_t v13 = *v12,
        (*(void (**)(char *, uint64_t, __n128))(v7 + 16))(v10, v4, v8),
        uint64_t v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 56))(v10, a3, a4),
        char v16 = v15,
        sub_21F7EB0FC((uint64_t)v10, type metadata accessor for _ChartContentInputs),
        (v16 & 1) != 0))
  {
    uint64_t v17 = 0;
    char v18 = 1;
    goto LABEL_6;
  }
  uint64_t v17 = v13 + v14;
  if (!__OFADD__(v13, v14))
  {
    char v18 = 0;
LABEL_6:
    *uint64_t v12 = v17;
    *((unsigned char *)v12 + 8) = v18;
    return;
  }
  __break(1u);
}

uint64_t sub_21F7E5A70@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  int v4 = *MEMORY[0x263F288F8];
  uint64_t v5 = sub_21FA24F70();
  uint64_t v6 = v5;
  if (v4 == a1)
  {
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    uint64_t v12 = *(void *)(v6 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a2, Value, v6);
    uint64_t v7 = v12;
    uint64_t v8 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);

  return v10(a2, v8, 1, v6);
}

uint64_t sub_21F7E5B98@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_21F76CA40(&qword_267EE77A8);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v16 - v10;
  sub_21F7E5A70(a1, (uint64_t)v16 - v10);
  uint64_t v12 = sub_21FA24F70();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_21FA24F60();
    sub_21F7EB2C4((uint64_t)v11);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a3, v11, v12);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v8, a3, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v8, 0, 1, v12);
  v17[0] = a2;
  char v18 = 0;
  uint64_t v14 = sub_21F988188((uint64_t)v8, (uint64_t)v17);
  sub_21F7DF364((uint64_t)v17);
  sub_21F7EB2C4((uint64_t)v8);
  v16[1] = v14;
  sub_21F7EB324();
  return sub_21FA24F90();
}

uint64_t sub_21F7E5D9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_21FA24F70();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t sub_21F7E5E08@<X0>(uint64_t a1@<X8>)
{
  return sub_21F7E5B98(*(_DWORD *)v1, *(void *)(v1 + 8), a1);
}

void sub_21F7E5E20()
{
}

uint64_t sub_21F7E5E6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static BuilderTuple<each A>._makeChartContent(content:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8), a5);
}

uint64_t sub_21F7E5E7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static BuilderTuple<each A>._chartContentCount(inputs:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a3 - 8));
}

size_t sub_21F7E5EA4(size_t a1, int64_t a2, char a3, void *a4)
{
  return sub_21F7E9DF8(a1, a2, a3, a4, &qword_26AD46338, &qword_26AD46280);
}

char *sub_21F7E5EB8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_267EE76B8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 432);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[432 * v8]) {
      memmove(v12, v13, 432 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21F7E5FD8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_26AD46E18);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21F7E60DC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_26AD46B60);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 24 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21F7E61F4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_267EE6FE0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21F7E62F0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_267EE76E0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_21F7E63F4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_21F7E8234(a1, a2, a3, a4, &qword_26AD43EA8, &qword_26AD43E78);
}

uint64_t _s8MakeListVMa()
{
  return sub_21F764F08();
}

uint64_t sub_21F7E6420(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_21F7E6488()
{
  unint64_t result = qword_267EE75B0[0];
  if (!qword_267EE75B0[0])
  {
    type metadata accessor for MultiPreferenceCombinerVisitor();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_267EE75B0);
  }
  return result;
}

uint64_t _s13CountContentsVMa()
{
  return sub_21F764F08();
}

uint64_t sub_21F7E64F8(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21F7E6548(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21F7E6598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
    {
      unint64_t v10 = 0;
      unint64_t v11 = *(void *)(v7 + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (v6 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v9[-v11] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v10 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v12 = (long long *)(v11 + 16);
      uint64_t v13 = v9 + 16;
      unint64_t v14 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *uint64_t v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v6 != v10)
      {
LABEL_9:
        unint64_t v16 = v6 - v10;
        uint64_t v17 = 8 * v10;
        char v18 = &v9[8 * v10];
        uint64_t v19 = (uint64_t *)(v11 + v17);
        do
        {
          uint64_t v20 = *v19++;
          *(void *)char v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 24))(a1, a2);
  return a1;
}

uint64_t sub_21F7E66D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
    {
      unint64_t v10 = 0;
      unint64_t v11 = *(void *)(v7 + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (v6 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v9[-v11] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v10 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v12 = (long long *)(v11 + 16);
      uint64_t v13 = v9 + 16;
      unint64_t v14 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *uint64_t v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v6 != v10)
      {
LABEL_9:
        unint64_t v16 = v6 - v10;
        uint64_t v17 = 8 * v10;
        char v18 = &v9[8 * v10];
        uint64_t v19 = (uint64_t *)(v11 + v17);
        do
        {
          uint64_t v20 = *v19++;
          *(void *)char v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 32))(a1, a2);
  return a1;
}

uint64_t sub_21F7E6818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
    {
      unint64_t v10 = 0;
      unint64_t v11 = *(void *)(v7 + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (v6 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v9[-v11] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v10 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v12 = (long long *)(v11 + 16);
      uint64_t v13 = v9 + 16;
      unint64_t v14 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *uint64_t v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v6 != v10)
      {
LABEL_9:
        unint64_t v16 = v6 - v10;
        uint64_t v17 = 8 * v10;
        char v18 = &v9[8 * v10];
        uint64_t v19 = (uint64_t *)(v11 + v17);
        do
        {
          uint64_t v20 = *v19++;
          *(void *)char v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 40))(a1, a2);
  return a1;
}

uint64_t sub_21F7E6958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F7E696C);
}

uint64_t sub_21F7E696C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
    {
      unint64_t v10 = 0;
      unint64_t v11 = *(void *)(v7 + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (v6 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v9[-v11] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v10 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v12 = (long long *)(v11 + 16);
      uint64_t v13 = v9 + 16;
      unint64_t v14 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *uint64_t v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v6 != v10)
      {
LABEL_9:
        unint64_t v16 = v6 - v10;
        uint64_t v17 = 8 * v10;
        char v18 = &v9[8 * v10];
        uint64_t v19 = (uint64_t *)(v11 + v17);
        do
        {
          uint64_t v20 = *v19++;
          *(void *)char v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 48))(a1, a2);
}

uint64_t sub_21F7E6AA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F7E6ABC);
}

uint64_t sub_21F7E6ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a4 + 16) == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a4 + 24) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    unint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v7)
    {
      unint64_t v11 = 0;
      unint64_t v12 = *(void *)(v8 + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (v7 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v10[-v12] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v11 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v13 = (long long *)(v12 + 16);
      unint64_t v14 = v10 + 16;
      unint64_t v15 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v16 = *v13;
        *(v14 - 1) = *(v13 - 1);
        *unint64_t v14 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 4;
      }
      while (v15);
      if (v7 != v11)
      {
LABEL_9:
        unint64_t v17 = v7 - v11;
        uint64_t v18 = 8 * v11;
        uint64_t v19 = &v10[8 * v11];
        uint64_t v20 = (uint64_t *)(v12 + v18);
        do
        {
          uint64_t v21 = *v20++;
          *(void *)uint64_t v19 = v21;
          v19 += 8;
          --v17;
        }
        while (v17);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 56))(a1, a2, a2);
}

uint64_t sub_21F7E6BF8()
{
  uint64_t result = type metadata accessor for _ChartContentInputs(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21F7E6C8C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_21FA24B80();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = (int *)type metadata accessor for _ChartContentInputs(0);
    uint64_t v9 = v8[5];
    unint64_t v10 = (char *)a1 + v9;
    unint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_21FA24540();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = v8[6];
    unint64_t v14 = (char *)a1 + v13;
    unint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = sub_21FA24EF0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    *(_DWORD *)((char *)a1 + v8[7]) = *(_DWORD *)((char *)a2 + v8[7]);
    uint64_t v17 = *(int *)(a3 + 44);
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    v18[8] = v19[8];
    *(void *)uint64_t v18 = *(void *)v19;
  }
  return a1;
}

uint64_t sub_21F7E6E18(uint64_t a1)
{
  uint64_t v2 = sub_21FA24B80();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  uint64_t v3 = type metadata accessor for _ChartContentInputs(0);
  uint64_t v4 = a1 + *(int *)(v3 + 20);
  uint64_t v5 = sub_21FA24540();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(v3 + 24);
  uint64_t v7 = sub_21FA24EF0();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);

  return v8(v6, v7);
}

uint64_t sub_21F7E6F10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_21FA24B80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for _ChartContentInputs(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_21FA24540();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = v7[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_21FA24EF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  *(_DWORD *)(a1 + v7[7]) = *(_DWORD *)(a2 + v7[7]);
  uint64_t v16 = *(int *)(a3 + 44);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  *(void *)uint64_t v17 = *(void *)v18;
  return a1;
}

uint64_t sub_21F7E704C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_21FA24B80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for _ChartContentInputs(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_21FA24540();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  uint64_t v12 = v7[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_21FA24EF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  *(_DWORD *)(a1 + v7[7]) = *(_DWORD *)(a2 + v7[7]);
  uint64_t v16 = *(int *)(a3 + 44);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  char v19 = *(unsigned char *)(v18 + 8);
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = v19;
  return a1;
}

uint64_t sub_21F7E7188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_21FA24B80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for _ChartContentInputs(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_21FA24540();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = v7[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_21FA24EF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  *(_DWORD *)(a1 + v7[7]) = *(_DWORD *)(a2 + v7[7]);
  uint64_t v16 = *(int *)(a3 + 44);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  *(void *)uint64_t v17 = *(void *)v18;
  return a1;
}

uint64_t sub_21F7E72C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_21FA24B80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for _ChartContentInputs(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_21FA24540();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = v7[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_21FA24EF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  *(_DWORD *)(a1 + v7[7]) = *(_DWORD *)(a2 + v7[7]);
  uint64_t v16 = *(int *)(a3 + 44);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  *(void *)uint64_t v17 = *(void *)v18;
  return a1;
}

uint64_t sub_21F7E7400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F7E7414);
}

uint64_t sub_21F7E7414(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _ChartContentInputs(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_21F7E7480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F7E7494);
}

uint64_t sub_21F7E7494(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _ChartContentInputs(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_21F7E7504()
{
  type metadata accessor for BuilderTuple();
  uint64_t result = sub_21FA24530();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for _ChartContentInputs(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_21F7E75F8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    type metadata accessor for BuilderTuple();
    uint64_t v7 = sub_21FA24530();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[11];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_21FA24B80();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = (int *)type metadata accessor for _ChartContentInputs(0);
    uint64_t v13 = v12[5];
    uint64_t v14 = &v9[v13];
    uint64_t v15 = &v10[v13];
    uint64_t v16 = sub_21FA24540();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    uint64_t v17 = v12[6];
    uint64_t v18 = &v9[v17];
    char v19 = &v10[v17];
    uint64_t v20 = sub_21FA24EF0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    *(_DWORD *)&v9[v12[7]] = *(_DWORD *)&v10[v12[7]];
    uint64_t v21 = a3[13];
    *(uint64_t *)((char *)a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    *(uint64_t *)((char *)a1 + v21) = *(uint64_t *)((char *)a2 + v21);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_21F7E77E0(uint64_t a1, uint64_t a2)
{
  type metadata accessor for BuilderTuple();
  uint64_t v4 = sub_21FA24530();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 44);
  uint64_t v6 = sub_21FA24B80();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = type metadata accessor for _ChartContentInputs(0);
  uint64_t v8 = v5 + *(int *)(v7 + 20);
  uint64_t v9 = sub_21FA24540();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v5 + *(int *)(v7 + 24);
  uint64_t v11 = sub_21FA24EF0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);

  return swift_bridgeObjectRelease();
}

uint64_t sub_21F7E7944(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for BuilderTuple();
  uint64_t v6 = sub_21FA24530();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[11];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_21FA24B80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for _ChartContentInputs(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = v8 + v12;
  uint64_t v14 = v9 + v12;
  uint64_t v15 = sub_21FA24540();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = v11[6];
  uint64_t v17 = v8 + v16;
  uint64_t v18 = v9 + v16;
  uint64_t v19 = sub_21FA24EF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  *(_DWORD *)(v8 + v11[7]) = *(_DWORD *)(v9 + v11[7]);
  uint64_t v20 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(void *)(a1 + v20) = *(void *)(a2 + v20);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_21F7E7ADC(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for BuilderTuple();
  uint64_t v6 = sub_21FA24530();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[11];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_21FA24B80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for _ChartContentInputs(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = v8 + v12;
  uint64_t v14 = v9 + v12;
  uint64_t v15 = sub_21FA24540();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  uint64_t v16 = v11[6];
  uint64_t v17 = v8 + v16;
  uint64_t v18 = v9 + v16;
  uint64_t v19 = sub_21FA24EF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 24))(v17, v18, v19);
  *(_DWORD *)(v8 + v11[7]) = *(_DWORD *)(v9 + v11[7]);
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21F7E7C84(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for BuilderTuple();
  uint64_t v6 = sub_21FA24530();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[11];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_21FA24B80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for _ChartContentInputs(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = v8 + v12;
  uint64_t v14 = v9 + v12;
  uint64_t v15 = sub_21FA24540();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  uint64_t v16 = v11[6];
  uint64_t v17 = v8 + v16;
  uint64_t v18 = v9 + v16;
  uint64_t v19 = sub_21FA24EF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  *(_DWORD *)(v8 + v11[7]) = *(_DWORD *)(v9 + v11[7]);
  uint64_t v20 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(void *)(a1 + v20) = *(void *)(a2 + v20);
  return a1;
}

uint64_t sub_21F7E7E18(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for BuilderTuple();
  uint64_t v6 = sub_21FA24530();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[11];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_21FA24B80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for _ChartContentInputs(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = v8 + v12;
  uint64_t v14 = v9 + v12;
  uint64_t v15 = sub_21FA24540();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  uint64_t v16 = v11[6];
  uint64_t v17 = v8 + v16;
  uint64_t v18 = v9 + v16;
  uint64_t v19 = sub_21FA24EF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 40))(v17, v18, v19);
  *(_DWORD *)(v8 + v11[7]) = *(_DWORD *)(v9 + v11[7]);
  uint64_t v20 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(void *)(a1 + v20) = *(void *)(a2 + v20);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21F7E7FB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F7E7FC8);
}

uint64_t sub_21F7E7FC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for BuilderTuple();
  uint64_t v6 = sub_21FA24530();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for _ChartContentInputs(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 44);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 52));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_21F7E80EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F7E8100);
}

uint64_t sub_21F7E8100(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for BuilderTuple();
  uint64_t v8 = sub_21FA24530();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for _ChartContentInputs(0);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 52)) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 44);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void *sub_21F7E8220(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_21F7E8234(a1, a2, a3, a4, &qword_26AD45860, &qword_26AD45840);
}

void *sub_21F7E8234(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_21F76CA40(a5);
    uint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = j__malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 1;
    }
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 5);
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
  }
  if (v8)
  {
    if (v13 != a4 || v13 + 4 >= &a4[4 * v11 + 4]) {
      memmove(v13 + 4, a4 + 4, 32 * v11);
    }
    a4[2] = 0;
  }
  else
  {
    sub_21F76CA40(a6);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v13;
}

size_t sub_21F7E835C(size_t a1, int64_t a2, char a3, void *a4)
{
  return sub_21F7EAA54(a1, a2, a3, a4, &qword_26AD46B50, (uint64_t (*)(void))type metadata accessor for AxisMarksConfiguration);
}

char *sub_21F7E837C(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_21F7EAEC0(a1, a2, a3, a4, &qword_26AD44C30);
}

char *sub_21F7E8388(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_26AD48568);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_21F7E8484(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_26AD46920);
    int64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    _OWORD v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_21F76CA40(&qword_26AD46850);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21F7E85B8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_26AD47CD8);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 152);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[152 * v8]) {
      memmove(v12, v13, 152 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21F7E86D8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_26AD441F0);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_21F7E87D4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_21F7E905C(a1, a2, a3, a4, &qword_267EE6FE8, &qword_267EE6FF0);
}

char *sub_21F7E87E8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_267EE6FF8);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 32 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21F7E88E4(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_21F7E99F4(a1, a2, a3, a4, &qword_26AD44F30);
}

char *sub_21F7E88F0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_26AD46328);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[96 * v8]) {
      memmove(v12, v13, 96 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21F7E8A08(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_26AD46960);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 32 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21F7E8B04(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_26AD441E8);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 32 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21F7E8C00(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_26AD441F8);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  size_t v15 = 32 * v8;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21F7E8CF8(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_21F7E95E0(a1, a2, a3, a4, &qword_26AD4A480);
}

char *sub_21F7E8D04(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_26AD44C00);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 40 * v8;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_21F7E8E0C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_21F7E905C(a1, a2, a3, a4, &qword_26AD44888, &qword_26AD44BA8);
}

char *sub_21F7E8E20(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_26AD44C28);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 24 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_21F7E8F38(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_21F7E905C(a1, a2, a3, a4, &qword_26AD46950, &qword_26AD468C8);
}

char *sub_21F7E8F4C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_26AD4A478);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_21F7E9048(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_21F7E905C(a1, a2, a3, a4, &qword_26AD45868, &qword_26AD46C18);
}

void *sub_21F7E905C(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_21F76CA40(a5);
    uint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = j__malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 25;
    }
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
  }
  if (v8)
  {
    if (v13 != a4 || v13 + 4 >= &a4[v11 + 4]) {
      memmove(v13 + 4, a4 + 4, 8 * v11);
    }
    a4[2] = 0;
  }
  else
  {
    sub_21F76CA40(a6);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v13;
}

char *sub_21F7E9184(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_26AD44BF8);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8]) {
      memmove(v12, v13, 48 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 48 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21F7E929C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_26AD45378);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21F7E9398(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_26AD44C38);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 24 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_21F7E94B0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_26AD452E8);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    _OWORD v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_21F76CA40(&qword_26AD45298);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21F7E95D4(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_21F7E95E0(a1, a2, a3, a4, &qword_26AD452F8);
}

char *sub_21F7E95E0(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_21F76CA40(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  int64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (v6)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9]) {
      memmove(v14, v15, 8 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v9);
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_21F7E96D8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_26AD452C8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21F7E97D4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_267EE76D0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 32 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21F7E98D0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_26AD440A8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 24 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21F7E99E8(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_21F7E99F4(a1, a2, a3, a4, &qword_26AD442C0);
}

char *sub_21F7E99F4(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_21F76CA40(a5);
    size_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    size_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v11 + 32;
  int64_t v14 = a4 + 32;
  if (v6)
  {
    if (v11 != a4 || v13 >= &v14[40 * v9]) {
      memmove(v13, v14, 40 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 40 * v9);
  }
  swift_bridgeObjectRelease();
  return v11;
}

size_t sub_21F7E9B04(size_t a1, int64_t a2, char a3, void *a4)
{
  return sub_21F7EAA54(a1, a2, a3, a4, &qword_26AD43EA0, type metadata accessor for SgClipRect);
}

size_t sub_21F7E9B24(size_t a1, int64_t a2, char a3, void *a4)
{
  return sub_21F7EAA54(a1, a2, a3, a4, &qword_267EE6FC0, type metadata accessor for AnyVectorizedRenderer);
}

size_t sub_21F7E9B44(size_t a1, int64_t a2, char a3, void *a4)
{
  return sub_21F7E9DF8(a1, a2, a3, a4, &qword_267EE76C0, &qword_267EE7308);
}

size_t sub_21F7E9B58(size_t a1, int64_t a2, char a3, void *a4)
{
  return sub_21F7EAA54(a1, a2, a3, a4, &qword_267EE76E8, (uint64_t (*)(void))type metadata accessor for _Chart3DContentOutputs);
}

size_t sub_21F7E9B78(size_t a1, int64_t a2, char a3, void *a4)
{
  return sub_21F7E9DF8(a1, a2, a3, a4, &qword_26AD46330, &qword_26AD46278);
}

char *sub_21F7E9B8C(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_21F7EAFCC(a1, a2, a3, a4, qword_267EE7718);
}

char *sub_21F7E9BA0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_26AD46E10);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_21F7E9CA4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_26AD46320);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    _OWORD v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[9 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 72 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_21F76CA40(&qword_26AD46198);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

size_t sub_21F7E9DE4(size_t a1, int64_t a2, char a3, void *a4)
{
  return sub_21F7E9DF8(a1, a2, a3, a4, &qword_26AD47CF8, &qword_26AD47C00);
}

size_t sub_21F7E9DF8(size_t result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = result;
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  sub_21F76CA40(a5);
  uint64_t v13 = *(void *)(sub_21F76CA40(a6) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  uint64_t result = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_29;
  }
  void v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(result - v15) / v14);
LABEL_19:
  uint64_t v18 = *(void *)(sub_21F76CA40(a6) - 8);
  if (v8)
  {
    if (v16 < a4
      || (unint64_t v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80),
          (char *)v16 + v19 >= (char *)a4 + v19 + *(void *)(v18 + 72) * v11))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v16;
}

void *sub_21F7E9FCC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_21F7EA114(a1, a2, a3, a4, &qword_26AD45420, &qword_26AD45408);
}

char *sub_21F7E9FE0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_26AD47CE8);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 608);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[608 * v8]) {
      memmove(v12, v13, 608 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_21F7EA100(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_21F7EA114(a1, a2, a3, a4, &qword_26AD46940, &qword_26AD468A0);
}

void *sub_21F7EA114(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_21F76CA40(a5);
    uint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = j__malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 17;
    }
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 4);
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
  }
  if (v8)
  {
    if (v13 != a4 || v13 + 4 >= &a4[2 * v11 + 4]) {
      memmove(v13 + 4, a4 + 4, 16 * v11);
    }
    a4[2] = 0;
  }
  else
  {
    sub_21F76CA40(a6);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v13;
}

char *sub_21F7EA23C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_26AD46930);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 184);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[184 * v8]) {
      memmove(v12, v13, 184 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21F7EA35C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_26AD44C10);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[80 * v8]) {
      memmove(v12, v13, 80 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_21F7EA474(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_26AD46928);
    int64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    _OWORD v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[7 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 56 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_21F76CA40(&qword_26AD46868);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21F7EA5B4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_26AD44BE0);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21F7EA6B8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_26AD44BF0);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 152);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[152 * v8]) {
      memmove(v12, v13, 152 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21F7EA7D4(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_21F79781C(a1, a2, a3, a4, &qword_267EE76D8);
}

size_t sub_21F7EA7E8(size_t a1, int64_t a2, char a3, void *a4)
{
  return sub_21F7EAA54(a1, a2, a3, a4, &qword_26AD46910, MEMORY[0x263F07490]);
}

char *sub_21F7EA808(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_26AD44C18);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21F7EA91C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_26AD44C20);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[96 * v8]) {
      memmove(v12, v13, 96 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 96 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

size_t sub_21F7EAA34(size_t a1, int64_t a2, char a3, void *a4)
{
  return sub_21F7EAA54(a1, a2, a3, a4, &qword_267EE76C8, (uint64_t (*)(void))type metadata accessor for ChartContentList.Item);
}

size_t sub_21F7EAA54(size_t result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  char v8 = result;
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  sub_21F76CA40(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  uint64_t result = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_29;
  }
  void v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(result - v15) / v14);
LABEL_19:
  uint64_t v18 = *(void *)(a6(0) - 8);
  if (v8)
  {
    if (v16 < a4
      || (unint64_t v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80),
          (char *)v16 + v19 >= (char *)a4 + v19 + *(void *)(v18 + 72) * v11))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v16;
}

unint64_t sub_21F7EAC30()
{
  unint64_t result = qword_26AD46348;
  if (!qword_26AD46348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD46348);
  }
  return result;
}

void *sub_21F7EAC84(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_267EE76F0);
    int64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    _OWORD v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[6 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 48 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_21F76CA40(&qword_267EE76F8);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21F7EADBC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_267EE7700);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  size_t v15 = 16 * v8;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21F7EAEB4(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_21F7EAEC0(a1, a2, a3, a4, &qword_26AD44020);
}

char *sub_21F7EAEC0(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_21F76CA40(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  if (v6)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9]) {
      memmove(v14, v15, 16 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v9);
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_21F7EAFB8(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_21F7EAFCC(a1, a2, a3, a4, &qword_267EE77A0);
}

char *sub_21F7EAFCC(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_21F76CA40(a5);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if (v6)
  {
    if (v11 != a4 || v13 >= &v14[48 * v9]) {
      memmove(v13, v14, 48 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_21F7EB0E8(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_21F759570(a1, a2, a3, a4, &qword_26AD45628);
}

uint64_t sub_21F7EB0FC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s20ChildContainerValuesVMa()
{
  return sub_21F764F08();
}

uint64_t sub_21F7EB174(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_21F7EB1E0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_21F7EB1E8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_21F7EB220(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21F7EB26C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21F7EB2A8()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F7EB2C4(uint64_t a1)
{
  uint64_t v2 = sub_21F76CA40(&qword_267EE77A8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_21F7EB324()
{
  unint64_t result = qword_267EE77B0;
  if (!qword_267EE77B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE77B0);
  }
  return result;
}

uint64_t sub_21F7EB378()
{
  return 0x6574656D61726150;
}

uint64_t sub_21F7EB46C()
{
  return sub_21FA26A10();
}

BOOL sub_21F7EB494(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t sub_21F7EB4A0()
{
  return sub_21FA26A50();
}

uint64_t sub_21F7EB4E8()
{
  return sub_21F7EB4A0();
}

uint64_t sub_21F7EB4F0()
{
  return sub_21F7EB46C();
}

uint64_t sub_21F7EB4F8()
{
  return sub_21FA26A50();
}

uint64_t sub_21F7EB538()
{
  return sub_21F7EB378();
}

BOOL sub_21F7EB548(uint64_t *a1, uint64_t *a2)
{
  return sub_21F7EB494(*a1, *a2);
}

uint64_t sub_21F7EB554()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_21F7EB594(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_21F7EB6F0(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x21F7EB908);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for ParameterRef()
{
  return sub_21F764F08();
}

uint64_t sub_21F7EB948()
{
  uint64_t v3 = MEMORY[0x263F8CF88] + 64;
  uint64_t v4 = MEMORY[0x263F8CF70] + 64;
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    unsigned int v5 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *sub_21F7EBA08(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = v5;
  if (((v6 + 8) & (unint64_t)~v6) + *(void *)(v4 + 64) <= 8) {
    unint64_t v7 = 8;
  }
  else {
    unint64_t v7 = ((v5 + 8) & ~(unint64_t)v5) + *(void *)(v4 + 64);
  }
  int v8 = v5 & 0x100000;
  if (v6 > 7 || v8 != 0 || v7 + 1 > 0x18)
  {
    uint64_t v11 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v11 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
LABEL_29:
    swift_retain();
    return v3;
  }
  unsigned int v12 = a2[v7];
  unsigned int v13 = v12 - 3;
  if (v12 >= 3)
  {
    if (v7 <= 3) {
      uint64_t v14 = v7;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *a2;
        goto LABEL_22;
      case 2:
        int v15 = *(unsigned __int16 *)a2;
        goto LABEL_22;
      case 3:
        int v15 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_22;
      case 4:
        int v15 = *(_DWORD *)a2;
LABEL_22:
        int v16 = (v15 | (v13 << (8 * v7))) + 3;
        unsigned int v12 = v15 + 3;
        if (v7 < 4) {
          unsigned int v12 = v16;
        }
        break;
      default:
        break;
    }
  }
  if (v12 == 2)
  {
    *a1 = *(void *)a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v6 + 8) & ~v6, (unint64_t)&a2[v6 + 8] & ~v6);
    *((unsigned char *)v3 + v7) = 2;
    return v3;
  }
  if (v12 != 1)
  {
    *a1 = *(void *)a2;
    *((unsigned char *)a1 + v7) = 0;
    goto LABEL_29;
  }
  *a1 = *(void *)a2;
  *((unsigned char *)a1 + v7) = 1;
  return v3;
}

unsigned __int8 *sub_21F7EBBCC(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = ((v3 + 8) & ~v3) + *(void *)(v2 + 64);
  if (v4 <= 8) {
    unint64_t v4 = 8;
  }
  unsigned int v5 = result[v4];
  unsigned int v6 = v5 - 3;
  if (v5 >= 3)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *result;
        goto LABEL_12;
      case 2:
        int v8 = *(unsigned __int16 *)result;
        goto LABEL_12;
      case 3:
        int v8 = *(unsigned __int16 *)result | (result[2] << 16);
        goto LABEL_12;
      case 4:
        int v8 = *(_DWORD *)result;
LABEL_12:
        int v9 = (v8 | (v6 << (8 * v4))) + 3;
        unsigned int v5 = v8 + 3;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 2) {
    return (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(v2 + 8))((unint64_t)&result[v3 + 8] & ~v3);
  }
  if (v5 != 1) {
    return (unsigned __int8 *)swift_release();
  }
  return result;
}

void *sub_21F7EBCF8(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  if (((v5 + 8) & (unint64_t)~v5) + *(void *)(v4 + 64) <= 8) {
    uint64_t v6 = 8;
  }
  else {
    uint64_t v6 = ((v5 + 8) & ~v5) + *(void *)(v4 + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 3;
  if (v7 >= 3)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 3;
        unsigned int v7 = v10 + 3;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  if (v7 == 2)
  {
    *a1 = *(void *)a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 8) & ~v5, (unint64_t)&a2[v5 + 8] & ~v5);
    char v12 = 2;
  }
  else
  {
    if (v7 != 1)
    {
      *a1 = *(void *)a2;
      *((unsigned char *)a1 + v6) = 0;
      swift_retain();
      return a1;
    }
    *a1 = *(void *)a2;
    char v12 = 1;
  }
  *((unsigned char *)a1 + v6) = v12;
  return a1;
}

unsigned __int8 *sub_21F7EBE7C(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
    if (((v7 + 8) & (unint64_t)~v7) + *(void *)(v6 + 64) <= 8) {
      uint64_t v8 = 8;
    }
    else {
      uint64_t v8 = ((v7 + 8) & ~v7) + *(void *)(v6 + 64);
    }
    unsigned int v9 = a1[v8];
    unsigned int v10 = v9 - 3;
    if (v9 >= 3)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a1;
          goto LABEL_14;
        case 2:
          int v12 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v12 = *(_DWORD *)a1;
LABEL_14:
          int v13 = (v12 | (v10 << (8 * v8))) + 3;
          unsigned int v9 = v12 + 3;
          if (v8 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v14 = ~v7;
    if (v9 == 2)
    {
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((unint64_t)&a1[v7 + 8] & v14, v5);
    }
    else if (v9 != 1)
    {
      swift_release();
    }
    unsigned int v15 = a2[v8];
    unsigned int v16 = v15 - 3;
    if (v15 >= 3)
    {
      if (v8 <= 3) {
        uint64_t v17 = v8;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a2;
          goto LABEL_29;
        case 2:
          int v18 = *(unsigned __int16 *)a2;
          goto LABEL_29;
        case 3:
          int v18 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_29;
        case 4:
          int v18 = *(_DWORD *)a2;
LABEL_29:
          int v19 = (v18 | (v16 << (8 * v8))) + 3;
          unsigned int v15 = v18 + 3;
          if (v8 < 4) {
            unsigned int v15 = v19;
          }
          break;
        default:
          break;
      }
    }
    if (v15 == 2)
    {
      *(void *)a1 = *(void *)a2;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))((unint64_t)&a1[v7 + 8] & v14, (unint64_t)&a2[v7 + 8] & v14, v5);
      char v20 = 2;
    }
    else
    {
      if (v15 != 1)
      {
        *(void *)a1 = *(void *)a2;
        a1[v8] = 0;
        swift_retain();
        return a1;
      }
      *(void *)a1 = *(void *)a2;
      char v20 = 1;
    }
    a1[v8] = v20;
  }
  return a1;
}

void *sub_21F7EC0F4(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  if (((v5 + 8) & (unint64_t)~v5) + *(void *)(v4 + 64) <= 8) {
    uint64_t v6 = 8;
  }
  else {
    uint64_t v6 = ((v5 + 8) & ~v5) + *(void *)(v4 + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 3;
  if (v7 >= 3)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 3;
        unsigned int v7 = v10 + 3;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  if (v7 == 2)
  {
    *a1 = *(void *)a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + v5 + 8) & ~v5, (unint64_t)&a2[v5 + 8] & ~v5);
    char v12 = 2;
  }
  else if (v7 == 1)
  {
    *a1 = *(void *)a2;
    char v12 = 1;
  }
  else
  {
    char v12 = 0;
    *a1 = *(void *)a2;
  }
  *((unsigned char *)a1 + v6) = v12;
  return a1;
}

unsigned __int8 *sub_21F7EC274(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
    if (((v7 + 8) & (unint64_t)~v7) + *(void *)(v6 + 64) <= 8) {
      uint64_t v8 = 8;
    }
    else {
      uint64_t v8 = ((v7 + 8) & ~v7) + *(void *)(v6 + 64);
    }
    unsigned int v9 = a1[v8];
    unsigned int v10 = v9 - 3;
    if (v9 >= 3)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a1;
          goto LABEL_14;
        case 2:
          int v12 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v12 = *(_DWORD *)a1;
LABEL_14:
          int v13 = (v12 | (v10 << (8 * v8))) + 3;
          unsigned int v9 = v12 + 3;
          if (v8 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v14 = ~v7;
    if (v9 == 2)
    {
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((unint64_t)&a1[v7 + 8] & v14, v5);
    }
    else if (v9 != 1)
    {
      swift_release();
    }
    unsigned int v15 = a2[v8];
    unsigned int v16 = v15 - 3;
    if (v15 >= 3)
    {
      if (v8 <= 3) {
        uint64_t v17 = v8;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a2;
          goto LABEL_29;
        case 2:
          int v18 = *(unsigned __int16 *)a2;
          goto LABEL_29;
        case 3:
          int v18 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_29;
        case 4:
          int v18 = *(_DWORD *)a2;
LABEL_29:
          int v19 = (v18 | (v16 << (8 * v8))) + 3;
          unsigned int v15 = v18 + 3;
          if (v8 < 4) {
            unsigned int v15 = v19;
          }
          break;
        default:
          break;
      }
    }
    if (v15 == 2)
    {
      *(void *)a1 = *(void *)a2;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))((unint64_t)&a1[v7 + 8] & v14, (unint64_t)&a2[v7 + 8] & v14, v5);
      char v20 = 2;
    }
    else if (v15 == 1)
    {
      *(void *)a1 = *(void *)a2;
      char v20 = 1;
    }
    else
    {
      char v20 = 0;
      *(void *)a1 = *(void *)a2;
    }
    a1[v8] = v20;
  }
  return a1;
}

uint64_t sub_21F7EC4E8(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = 8;
  if (((*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80))
     + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) > 8)
    unint64_t v3 = ((*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80))
       + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_22;
  }
  unint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 253) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)((char *)a1 + v4);
      if (!v6) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)((char *)a1 + v4);
      if (!*(unsigned __int16 *)((char *)a1 + v4)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_22:
      unsigned int v10 = *((unsigned __int8 *)a1 + v3);
      if (v10 >= 3) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v6 = *((unsigned __int8 *)a1 + v4);
  if (!*((unsigned char *)a1 + v4)) {
    goto LABEL_22;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (v4 > 3) {
    int v9 = 0;
  }
  if (v4)
  {
    if (v4 > 3) {
      LODWORD(v4) = 4;
    }
    switch((int)v4)
    {
      case 2:
        LODWORD(v4) = *a1;
        break;
      case 3:
        LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v4) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v4) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v4 | v9) + 254;
}

void sub_21F7EC658(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = ((*(unsigned __int8 *)(*(void *)(*(void *)(a4 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a4 + 16) - 8) + 80))
     + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v8 = a2 - 254;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x21F7EC85CLL);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_21F7EC884(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = 8;
  if (((*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80))
     + *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64) > 8)
    unint64_t v2 = ((*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80))
       + *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  uint64_t v3 = a1[v2];
  int v4 = v3 - 3;
  if (v3 >= 3)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v7 = (v6 | (v4 << (8 * v2))) + 3;
        LODWORD(v3) = v6 + 3;
        if (v2 >= 4) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = v7;
        }
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_21F7EC978(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4 = ((*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80))
     + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (a2 > 2)
  {
    if (v4 <= 8) {
      size_t v5 = 8;
    }
    else {
      size_t v5 = ((*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80))
    }
         + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    unsigned int v6 = a2 - 3;
    if (v5 < 4)
    {
      unsigned int v7 = v6 >> (8 * v5);
      int v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 3;
      bzero(a1, v5);
      if (v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if (v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 3;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    if (v4 <= 8) {
      unint64_t v4 = 8;
    }
    a1[v4] = a2;
  }
}

uint64_t type metadata accessor for ConstantOrParameterRef()
{
  return sub_21F764F08();
}

uint64_t sub_21F7ECAAC()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F7ECAC8(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    sub_21F7A2B78(0, v1, 0);
    uint64_t v2 = v9;
    unint64_t v4 = (uint64_t *)(a1 + 152);
    do
    {
      uint64_t v5 = *v4;
      unint64_t v7 = *(void *)(v9 + 16);
      unint64_t v6 = *(void *)(v9 + 24);
      swift_bridgeObjectRetain();
      if (v7 >= v6 >> 1) {
        sub_21F7A2B78((void *)(v6 > 1), v7 + 1, 1);
      }
      *(void *)(v9 + 16) = v7 + 1;
      *(void *)(v9 + 8 * v7 + 32) = v5;
      v4 += 76;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_21F7ECB98(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v1) {
    return v2;
  }
  uint64_t v32 = MEMORY[0x263F8EE78];
  sub_21F76CFE0(0, v1, 0);
  uint64_t v2 = v32;
  uint64_t v28 = a1 + 32;
  for (int64_t i = v1 - 1; ; --i)
  {
    sub_21F7BB81C(v28, (uint64_t)v30);
    sub_21F7BB81C((uint64_t)v30, (uint64_t)v31);
    if (sub_21F7E108C((uint64_t)v31) == 1)
    {
      uint64_t v5 = sub_21F7E1098((uint64_t)v31);
      uint64_t v6 = *(void *)(v5 + 8);
      uint64_t v7 = *(void *)(v5 + 16);
      char v8 = *(unsigned char *)(v5 + 24);
      uint64_t v9 = *(void *)(v5 + 40);
      uint64_t v10 = *(void *)(v5 + 48);
      int v11 = *(unsigned __int8 *)(v5 + 56);
      sub_21F7652C0(v6, v7, v8);
      swift_bridgeObjectRetain();
      uint64_t v12 = v9;
      uint64_t v13 = v10;
      char v14 = v11;
    }
    else
    {
      uint64_t v15 = sub_21F7E1098((uint64_t)v31);
      uint64_t v26 = *(void *)(v15 + 8);
      uint64_t v27 = *(void *)(v15 + 16);
      char v8 = *(unsigned char *)(v15 + 24);
      uint64_t v10 = *(void *)(v15 + 48);
      uint64_t v25 = *(void *)(v15 + 40);
      int v11 = *(unsigned __int8 *)(v15 + 56);
      sub_21F7BB81C((uint64_t)v30, (uint64_t)v29);
      uint64_t v16 = sub_21F7E1098((uint64_t)v29);
      uint64_t v17 = *(void *)(v16 + 40);
      uint64_t v18 = v2;
      int64_t v19 = i;
      uint64_t v20 = *(void *)(v16 + 48);
      char v21 = *(unsigned char *)(v16 + 56);
      sub_21F7652C0(*(void *)(v16 + 8), *(void *)(v16 + 16), *(unsigned char *)(v16 + 24));
      uint64_t v6 = v26;
      swift_bridgeObjectRetain();
      uint64_t v12 = v17;
      uint64_t v13 = v20;
      int64_t i = v19;
      uint64_t v2 = v18;
      uint64_t v9 = v25;
      char v14 = v21;
      uint64_t v7 = v27;
    }
    uint64_t result = sub_21F770E44(v12, v13, v14);
    if ((v11 & 0x80) != 0) {
      break;
    }
    if (v11) {
      goto LABEL_14;
    }
    sub_21F7F5A88(v30, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
    sub_21F7F5A88(v30, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
    sub_21F770E44(v9, v10, 0);
    sub_21F7656A8(v6, v7, v8);
    swift_bridgeObjectRelease();
    sub_21F770E38(v9, v10, 0);
    sub_21F7F5A88(v30, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
    sub_21F7F5A88(v30, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
    uint64_t v32 = v2;
    unint64_t v24 = *(void *)(v2 + 16);
    unint64_t v23 = *(void *)(v2 + 24);
    if (v24 >= v23 >> 1)
    {
      sub_21F76CFE0((char *)(v23 > 1), v24 + 1, 1);
      uint64_t v2 = v32;
    }
    *(void *)(v2 + 16) = v24 + 1;
    *(void *)(v2 + 8 * v24 + 32) = v9;
    if (!i) {
      return v2;
    }
    v28 += 152;
  }
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_21F7ECE1C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 >= 1 && (uint64_t v3 = *(void *)(a2 + 16)) != 0)
  {
    unint64_t v4 = 1;
    if ((unint64_t)a3 < 2 || v3 == 1)
    {
LABEL_21:
      uint64_t v8 = *(void *)(result + 16);
      if (!v8) {
        return 1;
      }
    }
    else
    {
      unint64_t v5 = a3 - 3;
      if ((unint64_t)a3 < 3)
      {
        unint64_t v4 = 2;
        uint64_t v8 = *(void *)(result + 16);
        if (!v8) {
          return 1;
        }
      }
      else
      {
        if (v3 - 2 < v5) {
          unint64_t v5 = v3 - 2;
        }
        unint64_t v6 = v5 + 1;
        if (v6 >= 0x21)
        {
          uint64_t v9 = v6 & 0x1F;
          if ((v6 & 0x1F) == 0) {
            uint64_t v9 = 32;
          }
          unint64_t v10 = v6 - v9;
          uint64_t v7 = v10 + 2;
          do
            v10 -= 32;
          while (v10);
        }
        else
        {
          uint64_t v7 = 2;
        }
        while (v3 != v7)
        {
          if (a3 == ++v7)
          {
            unint64_t v4 = a3;
            goto LABEL_21;
          }
        }
        unint64_t v4 = *(void *)(a2 + 16);
        uint64_t v8 = *(void *)(result + 16);
        if (!v8) {
          return 1;
        }
      }
    }
  }
  else
  {
    unint64_t v4 = 0;
    uint64_t v8 = *(void *)(result + 16);
    if (!v8) {
      return 1;
    }
  }
  unint64_t v11 = *(void *)(a2 + 16);
  if (v4 == v11) {
    return 1;
  }
  uint64_t v12 = (double *)(result + 32);
  uint64_t v13 = v11 - v4;
  if (v11 < v4) {
    uint64_t v13 = 0;
  }
  uint64_t v14 = ~v4 + v11;
  uint64_t v15 = (double *)(a2 + 8 * v4 + 32);
  uint64_t v16 = v8 - 1;
  while (v13)
  {
    uint64_t result = *v12 <= *v15;
    if (*v12 <= *v15)
    {
      if (v16)
      {
        uint64_t v17 = v14;
        --v13;
        --v14;
        ++v15;
        ++v12;
        --v16;
        if (v17) {
          continue;
        }
      }
    }
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F7ECF48(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 >= 1 && (uint64_t v3 = *(void *)(a2 + 16)) != 0)
  {
    unint64_t v4 = 1;
    if ((unint64_t)a3 < 2 || v3 == 1)
    {
LABEL_21:
      uint64_t v8 = *(void *)(result + 16);
      if (!v8) {
        return 1;
      }
    }
    else
    {
      unint64_t v5 = a3 - 3;
      if ((unint64_t)a3 < 3)
      {
        unint64_t v4 = 2;
        uint64_t v8 = *(void *)(result + 16);
        if (!v8) {
          return 1;
        }
      }
      else
      {
        if (v3 - 2 < v5) {
          unint64_t v5 = v3 - 2;
        }
        unint64_t v6 = v5 + 1;
        if (v6 >= 0x21)
        {
          uint64_t v9 = v6 & 0x1F;
          if ((v6 & 0x1F) == 0) {
            uint64_t v9 = 32;
          }
          unint64_t v10 = v6 - v9;
          uint64_t v7 = v10 + 2;
          do
            v10 -= 32;
          while (v10);
        }
        else
        {
          uint64_t v7 = 2;
        }
        while (v3 != v7)
        {
          if (a3 == ++v7)
          {
            unint64_t v4 = a3;
            goto LABEL_21;
          }
        }
        unint64_t v4 = *(void *)(a2 + 16);
        uint64_t v8 = *(void *)(result + 16);
        if (!v8) {
          return 1;
        }
      }
    }
  }
  else
  {
    unint64_t v4 = 0;
    uint64_t v8 = *(void *)(result + 16);
    if (!v8) {
      return 1;
    }
  }
  unint64_t v11 = *(void *)(a2 + 16);
  if (v4 == v11) {
    return 1;
  }
  uint64_t v12 = (double *)(result + 32);
  uint64_t v13 = v11 - v4;
  if (v11 < v4) {
    uint64_t v13 = 0;
  }
  uint64_t v14 = ~v4 + v11;
  uint64_t v15 = (double *)(a2 + 8 * v4 + 32);
  uint64_t v16 = v8 - 1;
  while (v13)
  {
    uint64_t result = *v15 <= *v12;
    if (*v15 <= *v12)
    {
      if (v16)
      {
        uint64_t v17 = v14;
        --v13;
        --v14;
        ++v15;
        ++v12;
        --v16;
        if (v17) {
          continue;
        }
      }
    }
    return result;
  }
  __break(1u);
  return result;
}

char *sub_21F7ED074(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v3 = swift_bridgeObjectRetain();
  sub_21F76C9DC(v3 + 472, (uint64_t)v11, &qword_26AD47B78);
  uint64_t v4 = a1 + 1080;
  uint64_t v5 = v1 - 1;
  unint64_t v6 = (char *)MEMORY[0x263F8EE78];
  while (1)
  {
    sub_21F76C9DC((uint64_t)v11, (uint64_t)v12, &qword_26AD47B78);
    if (sub_21F7F0F80(v12) != 1)
    {
      sub_21F7F3D20((uint64_t)v11, (uint64_t (*)(void))sub_21F7C6094);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v6 = sub_21F7E85B8(0, *((void *)v6 + 2) + 1, 1, v6);
      }
      unint64_t v8 = *((void *)v6 + 2);
      unint64_t v7 = *((void *)v6 + 3);
      if (v8 >= v7 >> 1) {
        unint64_t v6 = sub_21F7E85B8((char *)(v7 > 1), v8 + 1, 1, v6);
      }
      sub_21F76C9DC((uint64_t)v11, (uint64_t)v10, &qword_26AD47B78);
      *((void *)v6 + 2) = v8 + 1;
      sub_21F7BB81C((uint64_t)v10, (uint64_t)&v6[152 * v8 + 32]);
    }
    if (!v5) {
      break;
    }
    sub_21F76C9DC(v4, (uint64_t)v11, &qword_26AD47B78);
    v4 += 608;
    --v5;
  }
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_21F7ED1F0()
{
  uint64_t v0 = sub_21FA24C30();
  MEMORY[0x270FA5388](v0 - 8);
  sub_21FA24C20();
  sub_21FA24C10();
  sub_21FA24BF0();
  sub_21FA24C10();
  return sub_21FA24C50();
}

uint64_t sub_21F7ED2F0()
{
  uint64_t v0 = sub_21FA24C30();
  MEMORY[0x270FA5388](v0 - 8);
  sub_21FA24C20();
  sub_21FA24C10();
  sub_21FA24BF0();
  sub_21FA24C10();
  sub_21FA24BF0();
  sub_21FA24C10();
  return sub_21FA24C50();
}

uint64_t sub_21F7ED430(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0;
  uint64_t v5 = swift_allocObject();
  uint64_t v6 = MEMORY[0x263F8EE78];
  *(void *)(v5 + 16) = sub_21F9330BC(MEMORY[0x263F8EE78]);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v6;
  uint64_t v9 = v8 + 16;
  uint64_t v37 = a2;
  sub_21F7ED888(a1, v4, v8, v7, a2, v5);
  swift_beginAccess();
  uint64_t v10 = *(void *)(v5 + 16);
  swift_bridgeObjectRetain_n();
  unint64_t v11 = (void *)sub_21F987FA4(v10);
  swift_bridgeObjectRelease();
  __dst[0] = v11;
  sub_21F7F3C60(__dst);
  swift_bridgeObjectRelease();
  uint64_t v12 = __dst[0];
  uint64_t v13 = __dst[0][2];
  if (v13)
  {
    swift_beginAccess();
    uint64_t v14 = v13 - 1;
    for (uint64_t i = 4; ; i += 38)
    {
      memcpy(__dst, &v12[i], sizeof(__dst));
      uint64_t v16 = __dst[37];
      memcpy(v39, &__dst[1], sizeof(v39));
      nullsub_1(v39, v17);
      sub_21F76C9DC((uint64_t)v39, (uint64_t)v40, &qword_26AD47B60);
      sub_21F7F3F44((uint64_t)__dst);
      sub_21F7F4084((uint64_t)&__dst[1]);
      uint64_t v18 = sub_21F7EDE30((uint64_t)v40, (uint64_t)v16, 1, v37);
      swift_bridgeObjectRelease();
      sub_21F7F41B8((uint64_t)&__dst[1]);
      uint64_t v19 = *(void *)(v18 + 16);
      uint64_t v20 = *(void **)v9;
      int64_t v21 = *(void *)(*(void *)v9 + 16);
      int64_t v22 = v21 + v19;
      if (__OFADD__(v21, v19)) {
        goto LABEL_27;
      }
      swift_bridgeObjectRetain();
      size_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native && v22 <= v20[3] >> 1)
      {
        if (*(void *)(v18 + 16)) {
          goto LABEL_7;
        }
      }
      else
      {
        if (v21 <= v22) {
          int64_t v28 = v21 + v19;
        }
        else {
          int64_t v28 = v21;
        }
        uint64_t v20 = (void *)sub_21F7E9DE4(isUniquelyReferenced_nonNull_native, v28, 1, v20);
        if (*(void *)(v18 + 16))
        {
LABEL_7:
          uint64_t v24 = (v20[3] >> 1) - v20[2];
          sub_21F76CA40(&qword_26AD47C00);
          if (v24 < v19) {
            goto LABEL_29;
          }
          swift_arrayInitWithCopy();
          if (v19)
          {
            uint64_t v25 = v20[2];
            BOOL v26 = __OFADD__(v25, v19);
            uint64_t v27 = v25 + v19;
            if (v26) {
              goto LABEL_30;
            }
            v20[2] = v27;
          }
          goto LABEL_16;
        }
      }
      if (v19) {
        goto LABEL_28;
      }
LABEL_16:
      swift_bridgeObjectRelease();
      *(void *)uint64_t v9 = v20;
      swift_bridgeObjectRelease();
      sub_21F7F41B8((uint64_t)&__dst[1]);
      if (!v14) {
        break;
      }
      --v14;
    }
  }
  swift_release();
  swift_beginAccess();
  int v29 = *(void **)v9;
  uint64_t v30 = *(void *)(*(void *)v9 + 16);
  if (v30)
  {
    uint64_t v31 = 0;
    unint64_t v32 = 0;
    uint64_t v33 = -v30;
    while (1)
    {
      uint64_t v34 = v29[2];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int v29 = (void *)sub_21F9353F4(v29);
      }
      if (v32 >= v29[2]) {
        break;
      }
      uint64_t v35 = *(void *)(sub_21F76CA40(&qword_26AD47C00) - 8);
      *(double *)((char *)v29
                + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))
                + *(void *)(v35 + 72) * v32
                + 40) = (double)(v31 + v34);
      --v31;
      ++v32;
      if (v33 == v31)
      {
        *(void *)uint64_t v9 = v29;
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
LABEL_25:
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return (uint64_t)v29;
  }
  return result;
}

void sub_21F7ED888(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for SgGroup(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (void *)((char *)v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = (uint64_t *)(a2 + 16);
  uint64_t v16 = (char **)(a4 + 16);
  uint64_t v17 = a5;
  switch(a1 >> 60)
  {
    case 0uLL:
      uint64_t v48 = v14;
      uint64_t v18 = swift_projectBox();
      sub_21F7F60B8(v18, (uint64_t)v48);
      uint64_t v49 = v48[1];
      uint64_t v19 = *(void *)(v49 + 16);
      if (v19)
      {
        swift_bridgeObjectRetain();
        uint64_t v20 = a4;
        uint64_t v21 = a6;
        uint64_t v22 = 0;
        do
        {
          uint64_t v23 = *(void *)(v49 + 8 * v22++ + 32);
          swift_retain();
          sub_21F7ED888(v23, a2, a3, v20, v17, v21);
          swift_release();
        }
        while (v19 != v22);
        swift_bridgeObjectRelease();
        sub_21F7F611C((uint64_t)v48);
      }
      else
      {
        sub_21F7F611C((uint64_t)v48);
      }
      return;
    case 1uLL:
      uint64_t v49 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      uint64_t v24 = *(void *)(v49 + 16);
      if (v24)
      {
        swift_bridgeObjectRetain();
        uint64_t v25 = a2;
        uint64_t v26 = a3;
        uint64_t v27 = a4;
        uint64_t v28 = a6;
        uint64_t v29 = 0;
        do
        {
          uint64_t v30 = *(void *)(v49 + 8 * v29++ + 32);
          swift_retain();
          sub_21F7ED888(v30, v25, v26, v27, v17, v28);
          swift_release();
        }
        while (v24 != v29);
        swift_bridgeObjectRelease();
      }
      return;
    case 2uLL:
      sub_21F779C5C((a1 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)v52);
      uint64_t v49 = v52[1];
      uint64_t v31 = *(void *)(v52[1] + 16);
      if (v31)
      {
        swift_bridgeObjectRetain();
        uint64_t v32 = a4;
        uint64_t v33 = a6;
        uint64_t v34 = 0;
        do
        {
          uint64_t v35 = *(void *)(v49 + 8 * v34++ + 32);
          swift_retain();
          sub_21F7ED888(v35, a2, a3, v32, v17, v33);
          swift_release();
        }
        while (v31 != v34);
        swift_bridgeObjectRelease();
      }
      sub_21F7C49F0((uint64_t)v52);
      return;
    case 0xBuLL:
      v47[1] = a3 + 16;
      uint64_t v48 = (uint64_t *)(a4 + 16);
      memcpy(v51, (const void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 16), 0x120uLL);
      swift_beginAccess();
      if (__OFADD__(*v15, 1))
      {
        __break(1u);
        goto LABEL_31;
      }
      ++*v15;
      uint64_t v49 = v51[34];
      uint64_t v36 = *(void *)(v51[34] + 16);
      if (v36)
      {
        v47[0] = a2 + 16;
        sub_21F7F4084((uint64_t)v51);
        swift_bridgeObjectRetain();
        uint64_t v37 = a3;
        uint64_t v38 = a4;
        uint64_t v39 = a6;
        uint64_t v40 = 0;
        do
        {
          uint64_t v41 = *(void *)(v49 + 8 * v40++ + 32);
          swift_retain();
          sub_21F7ED888(v41, a2, v37, v38, a5, v39);
          swift_release();
        }
        while (v36 != v40);
        swift_bridgeObjectRelease();
        uint64_t v15 = (uint64_t *)v47[0];
      }
      else
      {
        sub_21F7F4084((uint64_t)v51);
      }
      swift_beginAccess();
      uint64_t v43 = v48;
      if (*v15 == 1)
      {
        memcpy(v50, v51, sizeof(v50));
        nullsub_1(v50, v44);
        sub_21F76C9DC((uint64_t)v50, (uint64_t)v52, &qword_26AD47B60);
        swift_beginAccess();
        uint64_t v45 = *v43;
        sub_21F7F4084((uint64_t)v51);
        swift_bridgeObjectRetain();
        sub_21F7EDE30((uint64_t)v52, v45, 0, a5);
        swift_bridgeObjectRelease();
        sub_21F7F41B8((uint64_t)v51);
        swift_beginAccess();
        uint64_t v46 = swift_bridgeObjectRetain();
        sub_21F9EDD30(v46);
        swift_bridgeObjectRelease();
        swift_beginAccess();
        *uint64_t v43 = MEMORY[0x263F8EE78];
        swift_bridgeObjectRelease();
      }
      sub_21F7F41B8((uint64_t)v51);
      swift_beginAccess();
      if (__OFSUB__(*v15, 1))
      {
LABEL_31:
        __break(1u);
        JUMPOUT(0x21F7EDDFCLL);
      }
      --*v15;
      return;
    case 0xCuLL:
      memcpy(v52, (const void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 16), 0x260uLL);
      swift_beginAccess();
      uint64_t v42 = *v15;
      swift_beginAccess();
      swift_beginAccess();
      swift_beginAccess();
      sub_21F7F4E2C((uint64_t)v52);
      sub_21F7EFFFC(v52, v42, a5, v16, a6 + 16);
      swift_endAccess();
      swift_endAccess();
      swift_endAccess();
      sub_21F7F5114((uint64_t)v52);
      return;
    default:
      return;
  }
}

uint64_t sub_21F7EDE30(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v346 = a4;
  sub_21F76C9DC(a1, (uint64_t)v373, &qword_26AD47B60);
  sub_21F76C9DC((uint64_t)v373, (uint64_t)v383, &qword_26AD47B60);
  uint64_t v7 = sub_21FA24C30();
  MEMORY[0x270FA5388](v7 - 8);
  v333 = (char *)&v326 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v338 = sub_21F76CA40(&qword_26AD47C00);
  uint64_t v334 = *(void *)(v338 - 8);
  MEMORY[0x270FA5388](v338);
  uint64_t v10 = (char *)&v326 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  v366 = (uint64_t *)((char *)&v326 - v12);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v326 - v14;
  MEMORY[0x270FA5388](v16);
  uint64_t v327 = (uint64_t)&v326 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v340 = (uint64_t)&v326 - v19;
  MEMORY[0x270FA5388](v20);
  uint64_t v339 = (uint64_t)&v326 - v21;
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (uint64_t)&v326 - v23;
  MEMORY[0x270FA5388](v25);
  v365 = (uint64_t *)((char *)&v326 - v26);
  MEMORY[0x270FA5388](v27);
  uint64_t v352 = (uint64_t)&v326 - v28;
  MEMORY[0x270FA5388](v29);
  uint64_t v31 = (uint64_t)&v326 - v30;
  MEMORY[0x270FA5388](v32);
  uint64_t v344 = (uint64_t)&v326 - v33;
  uint64_t v326 = a1;
  sub_21F76C9DC(a1, (uint64_t)v374, &qword_26AD47B60);
  int v34 = sub_21F7F4E14((uint64_t)v374);
  uint64_t v351 = a2;
  if (v34 == 1)
  {
    unint64_t v35 = *(void *)(a2 + 16);
    goto LABEL_3;
  }
  memcpy(v375, v374, sizeof(v375));
  if (a3)
  {
    unint64_t v35 = *(void *)(a2 + 16);
    if (v35 < 2)
    {
LABEL_3:
      if (!v35) {
        return MEMORY[0x263F8EE78];
      }
      uint64_t v355 = a2 + 32;
      swift_bridgeObjectRetain();
      uint64_t v36 = 0;
      uint64_t v353 = 0;
      uint64_t v37 = (void *)MEMORY[0x263F8EE78];
      v356 = v15;
      v357 = v10;
      uint64_t v354 = v35;
      do
      {
        v365 = v37;
        uint64_t v361 = v36;
        memcpy(v382, (const void *)(v355 + 608 * v36), sizeof(v382));
        uint64_t v38 = v382[12];
        uint64_t v358 = v382[13];
        uint64_t v359 = v382[11];
        uint64_t v39 = v382[14];
        uint64_t v40 = v382[0];
        uint64_t v41 = v382[4];
        uint64_t v42 = v382[3];
        long long v364 = *(_OWORD *)&v382[1];
        sub_21F7F4E2C((uint64_t)v382);
        uint64_t v43 = v346;
        uint64_t v44 = sub_21F7F209C((uint64_t)v382, v346);
        uint64_t v46 = v45;
        int v48 = v47;
        uint64_t v50 = v49;
        uint64_t v377 = v40;
        long long v378 = v364;
        uint64_t v379 = v42;
        uint64_t v380 = v41;
        uint64_t v381 = 0;
        sub_21F7F50C0();
        uint64_t v362 = v46;
        uint64_t v363 = v44;
        *(void *)&long long v364 = v50;
        sub_21FA25420();
        LODWORD(v360) = v48;
        if (v39)
        {
          uint64_t v51 = v359;
          char v52 = v358 & 1;
          sub_21F7652C0(v359, v38, v358 & 1);
          swift_bridgeObjectRetain();
          uint64_t v53 = v38;
        }
        else
        {
          uint64_t v54 = v38;
          uint64_t v55 = v382[35];
          swift_bridgeObjectRetain();
          uint64_t v56 = v353;
          uint64_t v57 = sub_21F7F4CAC(v55, v43);
          uint64_t v353 = v56;
          swift_bridgeObjectRelease();
          uint64_t v58 = *(void *)(v57 + 16);
          char v60 = v358;
          uint64_t v59 = v359;
          unint64_t v61 = 0;
          if (v58)
          {
            uint64_t v62 = (uint64_t *)(v57 + 56);
            while (1)
            {
              uint64_t v63 = *v62;
              v62 += 4;
              if (v63) {
                break;
              }
              if (v58 == ++v61) {
                goto LABEL_13;
              }
            }
          }
          if (v61 == v58)
          {
LABEL_13:
            swift_bridgeObjectRelease();
            sub_21F7F42EC(v59, v38, v60, 0);
            uint64_t v51 = 0;
            char v52 = 0;
            uint64_t v53 = 0xE000000000000000;
          }
          else
          {
            uint64_t v64 = sub_21F894530(8236, 0xE200000000000000, 0, MEMORY[0x263F8EE78], v57, v61);
            uint64_t v66 = v65;
            char v68 = v67;
            swift_bridgeObjectRelease();
            char v52 = v68 & 1;
            sub_21F7F42EC(v59, v54, v60, 0);
            uint64_t v51 = v64;
            uint64_t v53 = v66;
          }
        }
        uint64_t v69 = v382[6];
        uint64_t v70 = (uint64_t)v356;
        uint64_t v71 = v366;
        sub_21FA249A0();
        sub_21F7656A8(v51, v53, v52);
        swift_bridgeObjectRelease();
        sub_21F76CA84((uint64_t)v71, &qword_26AD47C00);
        if (v69)
        {
          swift_bridgeObjectRetain();
          uint64_t v72 = v352;
          sub_21FA249B0();
          swift_bridgeObjectRelease();
          sub_21F76CA84(v70, &qword_26AD47C00);
          sub_21F76C9DC(v72, v70, &qword_26AD47C00);
        }
        uint64_t v73 = (uint64_t)v357;
        sub_21F76C978(v70, (uint64_t)v357, &qword_26AD47C00);
        uint64_t v37 = v365;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v37 = (void *)sub_21F7E9DE4(0, v37[2] + 1, 1, v37);
        }
        uint64_t v74 = v354;
        uint64_t v75 = v361;
        char v76 = v360;
        unint64_t v78 = v37[2];
        unint64_t v77 = v37[3];
        if (v78 >= v77 >> 1) {
          uint64_t v37 = (void *)sub_21F7E9DE4(v77 > 1, v78 + 1, 1, v37);
        }
        uint64_t v36 = v75 + 1;
        v37[2] = v78 + 1;
        sub_21F76C9DC(v73, (uint64_t)v37+ ((*(unsigned __int8 *)(v334 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v334 + 80))+ *(void *)(v334 + 72) * v78, &qword_26AD47C00);
        sub_21F7656A8(v363, v362, v76 & 1);
        swift_bridgeObjectRelease();
        sub_21F7F5114((uint64_t)v382);
        sub_21F76CA84(v70, &qword_26AD47C00);
      }
      while (v36 != v74);
      swift_bridgeObjectRelease();
      return (uint64_t)v37;
    }
    double x = *(double *)&v375[1];
    double y = *(double *)&v375[2];
    CGFloat width = *(double *)&v375[3];
    CGFloat height = *(double *)&v375[4];
    sub_21F7F5CB0(v326, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7F5D3C);
    swift_bridgeObjectRetain();
    uint64_t v83 = a2 + 64;
    do
    {
      v384.origin.double x = x;
      v384.origin.double y = y;
      v384.size.CGFloat width = width;
      v384.size.CGFloat height = height;
      CGRect v385 = CGRectUnion(v384, *(CGRect *)(v83 - 24));
      double x = v385.origin.x;
      double y = v385.origin.y;
      CGFloat width = v385.size.width;
      CGFloat height = v385.size.height;
      v83 += 608;
      --v35;
    }
    while (v35);
    swift_bridgeObjectRelease();
  }
  else
  {
    double x = *(double *)&v375[1];
    double y = *(double *)&v375[2];
    CGFloat width = *(double *)&v375[3];
    CGFloat height = *(double *)&v375[4];
    sub_21F76C9DC((uint64_t)v383, (uint64_t)v382, &qword_26AD47B60);
    sub_21F7F4084((uint64_t)v382);
  }
  if (qword_26AD45718 != -1) {
    goto LABEL_224;
  }
LABEL_30:
  double v84 = sqrt(*(double *)&qword_26AD52208);
  v386.origin.double x = x;
  v386.origin.double y = y;
  v386.size.CGFloat width = width;
  v386.size.CGFloat height = height;
  if (CGRectGetWidth(v386) < v84)
  {
    v387.origin.double x = x;
    v387.origin.double y = y;
    v387.size.CGFloat width = width;
    v387.size.CGFloat height = height;
    CGFloat v85 = CGRectGetMinX(v387) + v84 * -0.5;
    v388.origin.double x = x;
    v388.origin.double y = y;
    v388.size.CGFloat width = width;
    v388.size.CGFloat height = height;
    CGFloat MinY = CGRectGetMinY(v388);
    v389.origin.double x = x;
    v389.origin.double y = y;
    v389.size.CGFloat width = width;
    v389.size.CGFloat height = height;
    CGFloat height = CGRectGetHeight(v389);
    double x = v85;
    double y = MinY;
    CGFloat width = v84;
  }
  v390.origin.double x = x;
  v390.origin.double y = y;
  v390.size.CGFloat width = width;
  v390.size.CGFloat height = height;
  if (CGRectGetHeight(v390) < v84)
  {
    v391.origin.double x = x;
    v391.origin.double y = y;
    v391.size.CGFloat width = width;
    v391.size.CGFloat height = height;
    CGFloat MinX = CGRectGetMinX(v391);
    v392.origin.double x = x;
    v392.origin.double y = y;
    v392.size.CGFloat width = width;
    v392.size.CGFloat height = height;
    CGFloat v88 = CGRectGetMinY(v392) + v84 * -0.5;
    v393.origin.double x = x;
    v393.origin.double y = y;
    v393.size.CGFloat width = width;
    v393.size.CGFloat height = height;
    CGFloat width = CGRectGetWidth(v393);
    CGFloat height = v84;
    double x = MinX;
    double y = v88;
  }
  *(void *)&long long v364 = v24;
  uint64_t v89 = v375[7];
  v382[0] = v375[0];
  *(double *)&v382[1] = x;
  *(double *)&v382[2] = y;
  *(CGFloat *)&v382[3] = width;
  *(CGFloat *)&v382[4] = height;
  v382[5] = 0;
  uint64_t v90 = v375[8];
  char v91 = v375[9];
  uint64_t v92 = v375[10];
  if (v375[10])
  {
    char v93 = v375[9] & 1;
    uint64_t v94 = v375[7];
    uint64_t v95 = v375[8];
  }
  else
  {
    sub_21F76C9DC((uint64_t)&v375[15], (uint64_t)v376, &qword_26AD47B78);
    uint64_t v96 = sub_21F7F076C((uint64_t)v376, v346);
    if (v99) {
      uint64_t v94 = v96;
    }
    else {
      uint64_t v94 = 0;
    }
    if (v99) {
      uint64_t v95 = v97;
    }
    else {
      uint64_t v95 = 0xE000000000000000;
    }
    if (v99) {
      char v93 = v98 & 1;
    }
    else {
      char v93 = 0;
    }
  }
  sub_21F7BB3B4(v89, v90, v91, v92);
  sub_21F7F50C0();
  sub_21FA25420();
  sub_21F7656A8(v94, v95, v93);
  swift_bridgeObjectRelease();
  uint64_t v100 = v375[11];
  uint64_t v101 = v375[12];
  char v102 = v375[13];
  uint64_t v103 = v375[14];
  if (v375[14])
  {
    char v104 = v375[13] & 1;
    uint64_t v24 = v375[11];
    uint64_t v105 = v375[12];
  }
  else
  {
    uint64_t v24 = (uint64_t)sub_21F7F25C8(v351, v346);
    uint64_t v105 = v106;
    char v104 = v107 & 1;
  }
  sub_21F7BB3B4(v100, v101, v102, v103);
  uint64_t v108 = v344;
  sub_21FA249A0();
  sub_21F7656A8(v24, v105, v104);
  swift_bridgeObjectRelease();
  sub_21F76CA84(v31, &qword_26AD47C00);
  uint64_t v31 = v375[6];
  if (v375[6])
  {
    swift_bridgeObjectRetain();
    uint64_t v109 = v352;
    sub_21FA249B0();
    swift_bridgeObjectRelease();
    sub_21F76CA84(v108, &qword_26AD47C00);
    sub_21F76C9DC(v109, v108, &qword_26AD47C00);
  }
  uint64_t v110 = v351;
  unint64_t v111 = *(void *)(v351 + 16);
  if (v111 <= 9)
  {
    uint64_t v24 = (uint64_t)sub_21F7EA100(0, *(void *)(v351 + 16), 0, MEMORY[0x263F8EE78]);
    uint64_t v359 = v111;
    if (v111)
    {
      v366 = &v382[16];
      swift_bridgeObjectRetain();
      unint64_t v112 = v111 - 1;
      for (uint64_t i = 32; ; i += 608)
      {
        memcpy(v382, (const void *)(v110 + i), sizeof(v382));
        int v114 = (char *)v382[15];
        sub_21F76C9DC((uint64_t)&v382[55], (uint64_t)&v377, &qword_26AD47B78);
        if (sub_21F7F0F80(&v377) == 1)
        {
          sub_21F7F4E2C((uint64_t)v382);
          swift_bridgeObjectRetain();
        }
        else
        {
          sub_21F7F3D20((uint64_t)&v382[55], (uint64_t (*)(void))sub_21F7C6094);
          sub_21F7F3D20((uint64_t)&v382[55], (uint64_t (*)(void))sub_21F7C6094);
          sub_21F7F3D20((uint64_t)&v382[55], (uint64_t (*)(void))sub_21F7C6094);
          sub_21F7F4E2C((uint64_t)v382);
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            int v114 = sub_21F7E85B8(0, *((void *)v114 + 2) + 1, 1, v114);
          }
          unint64_t v116 = *((void *)v114 + 2);
          unint64_t v115 = *((void *)v114 + 3);
          if (v116 >= v115 >> 1) {
            int v114 = sub_21F7E85B8((char *)(v115 > 1), v116 + 1, 1, v114);
          }
          *((void *)v114 + 2) = v116 + 1;
          sub_21F7BB81C((uint64_t)&v377, (uint64_t)&v114[152 * v116 + 32]);
          sub_21F7F3D20((uint64_t)&v382[55], (uint64_t (*)(void))sub_21F7BB724);
          sub_21F7F3D20((uint64_t)&v382[55], (uint64_t (*)(void))sub_21F7BB724);
        }
        sub_21F76C9DC((uint64_t)v366, (uint64_t)v371, &qword_26AD47B78);
        if (sub_21F7F0F80(v371) != 1)
        {
          sub_21F7BB81C((uint64_t)v371, (uint64_t)v369);
          int v117 = sub_21F7E108C((uint64_t)v369);
          uint64_t v118 = sub_21F7E1098((uint64_t)v369);
          if (v117 != 1)
          {
            int v119 = *(char *)(v118 + 56);
            if ((v119 & 0x80000000) == 0 && *(unsigned __int8 *)(v118 + 56) < 2u)
            {
              sub_21F770E38(*(void *)(v118 + 40), *(void *)(v118 + 48), v119);
              sub_21F76C9DC((uint64_t)v366, (uint64_t)v367, &qword_26AD47B78);
              sub_21F7F5A88(v367, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                int v114 = sub_21F7E85B8(0, *((void *)v114 + 2) + 1, 1, v114);
              }
              unint64_t v121 = *((void *)v114 + 2);
              unint64_t v120 = *((void *)v114 + 3);
              if (v121 >= v120 >> 1) {
                int v114 = sub_21F7E85B8((char *)(v120 > 1), v121 + 1, 1, v114);
              }
              *((void *)v114 + 2) = v121 + 1;
              sub_21F7BB81C((uint64_t)v367, (uint64_t)&v114[152 * v121 + 32]);
            }
          }
        }
        uint64_t v122 = v382[35];
        unint64_t v123 = *(void *)(v24 + 16);
        unint64_t v124 = *(void *)(v24 + 24);
        swift_bridgeObjectRetain();
        if (v123 >= v124 >> 1) {
          uint64_t v24 = (uint64_t)sub_21F7EA100((void *)(v124 > 1), v123 + 1, 1, (void *)v24);
        }
        *(void *)(v24 + 16) = v123 + 1;
        uint64_t v125 = v24 + 16 * v123;
        *(void *)(v125 + 32) = v114;
        *(void *)(v125 + 40) = v122;
        sub_21F7F5114((uint64_t)v382);
        if (!v112) {
          break;
        }
        --v112;
        uint64_t v110 = v351;
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v241 = v346;
    swift_bridgeObjectRetain();
    uint64_t v242 = swift_bridgeObjectRetain();
    uint64_t v243 = sub_21F7F53A8(v242, v241);
    uint64_t v353 = 0;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v244 = swift_bridgeObjectRetain();
    uint64_t v245 = sub_21F7C5E10(v244);
    swift_bridgeObjectRelease();
    uint64_t v246 = *(void *)(v245 + 16);
    swift_bridgeObjectRelease();
    uint64_t v247 = *(void *)(v243 + 16);
    swift_bridgeObjectRelease();
    if (v246 == v247)
    {
      uint64_t v248 = v24;
      goto LABEL_167;
    }
    int64_t v249 = *(void *)(v24 + 16);
    if (v249)
    {
      v382[0] = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      sub_21F7A2BE8(0, v249, 0);
      uint64_t v248 = v382[0];
      uint64_t v250 = v24 + 40;
      while (1)
      {
        uint64_t v31 = v248;
        v252 = *(char **)(v250 - 8);
        uint64_t v251 = *(void *)v250;
        uint64_t v253 = *(void *)(*(void *)v250 + 16);
        int64_t v254 = *((void *)v252 + 2);
        int64_t v255 = v254 + v253;
        if (__OFADD__(v254, v253)) {
          goto LABEL_216;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        size_t isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
        if (isUniquelyReferenced_nonNull_native && v255 <= *((void *)v252 + 3) >> 1)
        {
          if (!*(void *)(v251 + 16)) {
            goto LABEL_160;
          }
        }
        else
        {
          if (v254 <= v255) {
            int64_t v259 = v254 + v253;
          }
          else {
            int64_t v259 = v254;
          }
          v252 = sub_21F7E85B8(isUniquelyReferenced_nonNull_native, v259, 1, v252);
          if (!*(void *)(v251 + 16))
          {
LABEL_160:
            if (v253) {
              goto LABEL_217;
            }
            goto LABEL_161;
          }
        }
        if ((*((void *)v252 + 3) >> 1) - *((void *)v252 + 2) < v253) {
          goto LABEL_222;
        }
        swift_arrayInitWithCopy();
        if (v253)
        {
          uint64_t v257 = *((void *)v252 + 2);
          BOOL v143 = __OFADD__(v257, v253);
          uint64_t v258 = v257 + v253;
          if (v143) {
            goto LABEL_223;
          }
          *((void *)v252 + 2) = v258;
        }
LABEL_161:
        swift_bridgeObjectRelease();
        uint64_t v248 = v31;
        v382[0] = v31;
        unint64_t v261 = *(void *)(v31 + 16);
        unint64_t v260 = *(void *)(v31 + 24);
        if (v261 >= v260 >> 1)
        {
          sub_21F7A2BE8((void *)(v260 > 1), v261 + 1, 1);
          uint64_t v248 = v382[0];
        }
        *(void *)(v248 + 16) = v261 + 1;
        unint64_t v262 = v248 + 16 * v261;
        *(void *)(v262 + 32) = v252;
        *(void *)(v262 + 40) = MEMORY[0x263F8EE78];
        v250 += 16;
        if (!--v249)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_167;
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v248 = MEMORY[0x263F8EE78];
LABEL_167:
    uint64_t v127 = v344;
    if (v359)
    {
      uint64_t v31 = *(void *)(v248 + 16);
      v263 = (char *)(v351 + 32);
      swift_bridgeObjectRetain();
      v357 = v263;
      memcpy(v382, v263, sizeof(v382));
      uint64_t v358 = v31;
      if (v31)
      {
        unint64_t v264 = 0;
        uint64_t v355 = v248;
        v356 = (char *)(v248 + 32);
        uint64_t v265 = 1;
        uint64_t v24 = (uint64_t)&qword_26AD47C00;
        while (1)
        {
          uint64_t v363 = v265;
          if (v264 >= *(void *)(v248 + 16)) {
            goto LABEL_221;
          }
          uint64_t v266 = v382[7];
          uint64_t v267 = v382[8];
          char v268 = v382[9];
          v269 = (void *)v382[10];
          v270 = (uint64_t *)&v356[16 * v264];
          uint64_t v272 = *v270;
          uint64_t v271 = v270[1];
          sub_21F76C978(v127, v364, &qword_26AD47C00);
          if (v269)
          {
            LODWORD(v362) = v268 & 1;
            sub_21F7F4E2C((uint64_t)v382);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_21F7BB3B4(v266, v267, v268, (uint64_t)v269);
          }
          else
          {
            uint64_t v273 = v346;
            swift_bridgeObjectRetain();
            sub_21F7F4E2C((uint64_t)v382);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v274 = v353;
            uint64_t v275 = sub_21F7F4CAC(v272, v273);
            uint64_t v353 = v274;
            swift_bridgeObjectRelease();
            uint64_t v276 = *(void *)(v275 + 16);
            if (v276)
            {
              unint64_t v277 = 0;
              v278 = (uint64_t *)(v275 + 56);
              uint64_t v127 = v344;
              while (1)
              {
                uint64_t v279 = *v278;
                v278 += 4;
                if (v279) {
                  break;
                }
                if (v276 == ++v277) {
                  goto LABEL_180;
                }
              }
            }
            else
            {
              unint64_t v277 = 0;
              uint64_t v127 = v344;
            }
            if (v277 == v276)
            {
LABEL_180:
              swift_bridgeObjectRelease();
              sub_21F7F42EC(v266, v267, v268, 0);
              uint64_t v266 = 0;
              LODWORD(v362) = 0;
              uint64_t v267 = 0xE000000000000000;
              v269 = (void *)MEMORY[0x263F8EE78];
            }
            else
            {
              uint64_t v280 = sub_21F894530(8236, 0xE200000000000000, 0, MEMORY[0x263F8EE78], v275, v277);
              uint64_t v354 = v271;
              uint64_t v281 = v280;
              uint64_t v283 = v282;
              uint64_t v284 = v267;
              char v286 = v285;
              v288 = v287;
              swift_bridgeObjectRelease();
              LODWORD(v362) = v286 & 1;
              sub_21F7F42EC(v266, v284, v268, 0);
              uint64_t v266 = v281;
              uint64_t v271 = v354;
              uint64_t v267 = v283;
              v269 = v288;
              uint64_t v127 = v344;
            }
          }
          uint64_t v289 = v382[11];
          uint64_t v290 = v382[14];
          v366 = v269;
          if (!v382[14]) {
            break;
          }
          uint64_t v31 = v267;
          uint64_t v291 = v266;
          LODWORD(v361) = v382[13] & 1;
          uint64_t v292 = v382[12];
          sub_21F7652C0(v382[11], v382[12], v382[13] & 1);
          uint64_t v360 = v290;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v293 = v289;
LABEL_200:
          char v319 = v362;
          uint64_t v320 = v293;
          char v321 = v361;
          uint64_t v322 = v364;
          sub_21FA24990();
          sub_21F7F5114((uint64_t)v382);
          sub_21F7656A8(v320, v292, v321);
          swift_bridgeObjectRelease();
          sub_21F7656A8(v291, v31, v319);
          swift_bridgeObjectRelease();
          uint64_t v24 = (uint64_t)&qword_26AD47C00;
          sub_21F76CA84(v322, &qword_26AD47C00);
          sub_21F76CA84(v127, &qword_26AD47C00);
          sub_21F76C9DC((uint64_t)v365, v127, &qword_26AD47C00);
          if (v363 != v359)
          {
            memcpy(v382, &v357[608 * v363], sizeof(v382));
            uint64_t v265 = v363 + 1;
            unint64_t v264 = v363;
            uint64_t v248 = v355;
            if (v363 != v358) {
              continue;
            }
          }
          goto LABEL_204;
        }
        uint64_t v350 = v382[13];
        uint64_t v352 = v382[12];
        int64_t v294 = *(void *)(v271 + 16);
        uint64_t v361 = v272;
        uint64_t v354 = v271;
        if (v294)
        {
          uint64_t v348 = v382[11];
          uint64_t v349 = v267;
          uint64_t v360 = v266;
          v367[0] = MEMORY[0x263F8EE78];
          swift_bridgeObjectRetain();
          sub_21F7A2BC8(0, v294, 0);
          uint64_t v295 = v367[0];
          uint64_t v296 = v271 + 32;
          for (int64_t j = v294 - 1; ; --j)
          {
            sub_21F7BB81C(v296, (uint64_t)v369);
            sub_21F7BB81C((uint64_t)v369, (uint64_t)v371);
            nullsub_1(v371, v298);
            sub_21F76C9DC((uint64_t)v371, (uint64_t)&v377, &qword_26AD47B78);
            sub_21F7F5A88(v369, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
            uint64_t v299 = sub_21F7F076C((uint64_t)&v377, v346);
            uint64_t v301 = v300;
            uint64_t v303 = v302;
            uint64_t v305 = v304;
            sub_21F7F5A88(v369, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
            v367[0] = v295;
            unint64_t v307 = *(void *)(v295 + 16);
            unint64_t v306 = *(void *)(v295 + 24);
            if (v307 >= v306 >> 1)
            {
              sub_21F7A2BC8((void *)(v306 > 1), v307 + 1, 1);
              uint64_t v295 = v367[0];
            }
            *(void *)(v295 + 16) = v307 + 1;
            v308 = (void *)(v295 + 32 * v307);
            v308[4] = v299;
            v308[5] = v301;
            v308[6] = v303;
            v308[7] = v305;
            if (!j) {
              break;
            }
            v296 += 152;
          }
          swift_bridgeObjectRelease();
          uint64_t v127 = v344;
          uint64_t v266 = v360;
          uint64_t v289 = v348;
          uint64_t v267 = v349;
          uint64_t v309 = *(void *)(v295 + 16);
          if (v309)
          {
LABEL_191:
            unint64_t v310 = 0;
            v311 = (uint64_t *)(v295 + 56);
            while (1)
            {
              uint64_t v312 = *v311;
              v311 += 4;
              if (v312) {
                goto LABEL_197;
              }
              if (v309 == ++v310) {
                goto LABEL_198;
              }
            }
          }
        }
        else
        {
          uint64_t v295 = MEMORY[0x263F8EE78];
          uint64_t v127 = v344;
          uint64_t v309 = *(void *)(MEMORY[0x263F8EE78] + 16);
          if (v309) {
            goto LABEL_191;
          }
        }
        unint64_t v310 = 0;
LABEL_197:
        if (v310 == v309)
        {
LABEL_198:
          uint64_t v31 = v267;
          uint64_t v291 = v266;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_21F7F42EC(v289, v352, v350, 0);
          uint64_t v293 = 0;
          LODWORD(v361) = 0;
          uint64_t v292 = 0xE000000000000000;
          uint64_t v360 = MEMORY[0x263F8EE78];
        }
        else
        {
          uint64_t v31 = v267;
          uint64_t v291 = v266;
          uint64_t v313 = sub_21F894530(8236, 0xE200000000000000, 0, MEMORY[0x263F8EE78], v295, v310);
          uint64_t v315 = v314;
          char v317 = v316;
          uint64_t v360 = v318;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          LODWORD(v361) = v317 & 1;
          sub_21F7F42EC(v289, v352, v350, 0);
          uint64_t v293 = v313;
          uint64_t v127 = v344;
          uint64_t v292 = v315;
        }
        goto LABEL_200;
      }
LABEL_204:
      swift_bridgeObjectRelease();
    }
LABEL_205:
    swift_bridgeObjectRelease();
LABEL_206:
    sub_21F76C978(v127, v327, &qword_26AD47C00);
    uint64_t v37 = (void *)sub_21F7E9DE4(0, 1, 1, MEMORY[0x263F8EE78]);
    unint64_t v324 = v37[2];
    unint64_t v323 = v37[3];
    if (v324 >= v323 >> 1) {
      uint64_t v37 = (void *)sub_21F7E9DE4(v323 > 1, v324 + 1, 1, v37);
    }
    v37[2] = v324 + 1;
    sub_21F76C9DC(v327, (uint64_t)v37+ ((*(unsigned __int8 *)(v334 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v334 + 80))+ *(void *)(v334 + 72) * v324, &qword_26AD47C00);
    sub_21F7F5CB0(v326, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7F5AF4);
    sub_21F76CA84(v127, &qword_26AD47C00);
    return (uint64_t)v37;
  }
  uint64_t v126 = sub_21F81239C(v351);
  uint64_t v127 = v344;
  uint64_t v329 = *(void *)(v126 + 16);
  if (!v329) {
    goto LABEL_205;
  }
  uint64_t v328 = v126 + 32;
  uint64_t v331 = v126;
  swift_bridgeObjectRetain();
  unint64_t v128 = 0;
  uint64_t v361 = 0;
  while (1)
  {
    if (v128 >= *(void *)(v331 + 16)) {
      goto LABEL_218;
    }
    unint64_t v332 = v128;
    uint64_t v130 = (uint64_t *)(v328 + 16 * v128);
    uint64_t v131 = *v130;
    uint64_t v132 = *(void *)(v130[1] + 16);
    uint64_t v345 = v130[1];
    uint64_t v336 = v132;
    uint64_t v337 = v131;
    if (v132)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v133 = v345;
      uint64_t v134 = v132 - 1;
      uint64_t v24 = 32;
      long long v135 = (char *)MEMORY[0x263F8EE78];
      while (1)
      {
        memcpy(v382, (const void *)(v133 + v24), sizeof(v382));
        uint64_t v377 = MEMORY[0x263F8EE88];
        sub_21F7F4E2C((uint64_t)v382);
        uint64_t v136 = swift_bridgeObjectRetain();
        uint64_t v137 = v361;
        uint64_t v138 = sub_21F7F57E0(v136);
        uint64_t v361 = v137;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_21F7F5114((uint64_t)v382);
        uint64_t v31 = v138[2];
        int64_t v139 = *((void *)v135 + 2);
        int64_t v140 = v139 + v31;
        if (__OFADD__(v139, v31))
        {
          __break(1u);
LABEL_211:
          __break(1u);
LABEL_212:
          __break(1u);
LABEL_213:
          __break(1u);
LABEL_214:
          __break(1u);
LABEL_215:
          __break(1u);
LABEL_216:
          __break(1u);
LABEL_217:
          __break(1u);
LABEL_218:
          __break(1u);
          goto LABEL_219;
        }
        char v141 = (char *)swift_isUniquelyReferenced_nonNull_native();
        if (v141 && v140 <= *((void *)v135 + 3) >> 1)
        {
          if (v138[2]) {
            goto LABEL_85;
          }
        }
        else
        {
          if (v139 <= v140) {
            int64_t v145 = v139 + v31;
          }
          else {
            int64_t v145 = v139;
          }
          long long v135 = sub_21F7E85B8(v141, v145, 1, v135);
          if (v138[2])
          {
LABEL_85:
            if ((*((void *)v135 + 3) >> 1) - *((void *)v135 + 2) < v31) {
              goto LABEL_212;
            }
            swift_arrayInitWithCopy();
            if (v31)
            {
              uint64_t v142 = *((void *)v135 + 2);
              BOOL v143 = __OFADD__(v142, v31);
              uint64_t v144 = v142 + v31;
              if (v143) {
                goto LABEL_215;
              }
              *((void *)v135 + 2) = v144;
            }
            goto LABEL_94;
          }
        }
        if (v31) {
          goto LABEL_211;
        }
LABEL_94:
        swift_bridgeObjectRelease();
        if (!v134)
        {
          swift_bridgeObjectRelease();
          uint64_t v127 = v344;
          goto LABEL_98;
        }
        --v134;
        v24 += 608;
        uint64_t v133 = v345;
      }
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    long long v135 = (char *)MEMORY[0x263F8EE78];
LABEL_98:
    uint64_t v31 = sub_21F811DBC(v135);
    swift_bridgeObjectRelease();
    uint64_t v146 = *(void *)(v31 + 16);
    if (v146) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_77:
    unint64_t v129 = v332 + 1;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v128 = v129;
    if (v129 == v329)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_206;
    }
  }
  unint64_t v342 = *(void *)(v331 + 16);
  uint64_t v343 = v31 + 32;
  v335 = (char *)(v345 + 625);
  uint64_t v330 = v31;
  swift_bridgeObjectRetain();
  uint64_t v147 = 0;
  uint64_t v341 = v146;
  while (1)
  {
    uint64_t v148 = (uint64_t *)(v343 + 72 * v147);
    uint64_t v150 = *v148;
    uint64_t v149 = v148[1];
    uint64_t v151 = v148[2];
    uint64_t v152 = v148[3];
    uint64_t v153 = v148[4];
    uint64_t v154 = v148[5];
    uint64_t v155 = v148[6];
    uint64_t v156 = v148[7];
    uint64_t v157 = v148[8];
    uint64_t v349 = v151;
    uint64_t v350 = v147;
    uint64_t v354 = v150;
    uint64_t v355 = v156;
    uint64_t v352 = v152;
    uint64_t v353 = v149;
    uint64_t v351 = v153;
    uint64_t v347 = v155;
    uint64_t v348 = v154;
    uint64_t v360 = v157;
    if (v146 == 1)
    {
      sub_21F7E0F38(v150, v149, v151, v152, v153, v154, v155);
      swift_bridgeObjectRetain();
      uint64_t v359 = 0;
      LODWORD(v356) = 0;
      v357 = (char *)0xE000000000000000;
      uint64_t v358 = MEMORY[0x263F8EE78];
      int64_t v158 = *(void *)(v157 + 16);
      if (v158) {
        goto LABEL_104;
      }
    }
    else
    {
      if (v155 < 0)
      {
        long long v185 = (void *)(v151 & 1);
        uint64_t v186 = v155 & 1;
        uint64_t v187 = v149;
        uint64_t v188 = v153;
        uint64_t v189 = v154;
        sub_21F7E0F38(v150, v149, v151, v152, v153, v154, v155);
        swift_bridgeObjectRetain();
        v366 = v185;
        sub_21F7652C0(v150, v187, (char)v185);
        swift_bridgeObjectRetain();
        uint64_t v190 = v188;
        uint64_t v191 = v189;
        v365 = (void *)v186;
        sub_21F7652C0(v190, v189, v186);
        swift_bridgeObjectRetain();
        sub_21FA24C20();
        sub_21FA24C10();
        LOBYTE(v382[0]) = (_BYTE)v185;
        sub_21FA24BF0();
        sub_21FA24C10();
        LOBYTE(v382[0]) = v186;
        uint64_t v24 = v351;
        sub_21FA24BF0();
        sub_21FA24C10();
        sub_21FA24C50();
        type metadata accessor for FindClass();
        uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
        uint64_t v193 = self;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v194 = objc_msgSend(v193, sel_bundleForClass_, ObjCClassFromMetadata);
        uint64_t v184 = sub_21FA25340();
        uint64_t v183 = v195;
        char v181 = v196 & 1;
        sub_21F7656A8(v24, v191, (char)v365);
        swift_bridgeObjectRelease();
        sub_21F7656A8(v354, v353, (char)v366);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v181 = v151 & 1;
        char v182 = v151 & 1;
        uint64_t v183 = v149;
        sub_21F7E0F38(v150, v149, v151, v152, v153, v154, v155);
        swift_bridgeObjectRetain();
        sub_21F7652C0(v150, v183, v182);
        swift_bridgeObjectRetain();
        uint64_t v184 = v150;
      }
      uint64_t v197 = sub_21FA25310();
      uint64_t v358 = v198;
      uint64_t v359 = v197;
      v357 = (char *)v199;
      LODWORD(v356) = v200 & 1;
      sub_21F7656A8(v184, v183, v181);
      swift_bridgeObjectRelease();
      uint64_t v157 = v360;
      int64_t v158 = *(void *)(v360 + 16);
      if (v158)
      {
LABEL_104:
        v369[0] = MEMORY[0x263F8EE78];
        sub_21F76CFE0(0, v158, 0);
        uint64_t v159 = v369[0];
        uint64_t v160 = v157 + 32;
        for (int64_t k = v158 - 1; ; --k)
        {
          sub_21F7BB81C(v160, (uint64_t)&v377);
          sub_21F7BB81C((uint64_t)&v377, (uint64_t)v382);
          if (sub_21F7E108C((uint64_t)v382) == 1)
          {
            uint64_t v162 = sub_21F7E1098((uint64_t)v382);
            uint64_t v163 = *(void *)(v162 + 8);
            uint64_t v164 = *(void *)(v162 + 16);
            uint64_t v31 = *(void *)(v162 + 32);
            uint64_t v24 = *(void *)(v162 + 40);
            uint64_t v165 = *(void *)(v162 + 48);
            int v166 = *(unsigned __int8 *)(v162 + 56);
            LODWORD(v366) = *(unsigned __int8 *)(v162 + 24);
            sub_21F7652C0(v163, v164, (char)v366);
            v365 = (void *)v31;
            swift_bridgeObjectRetain();
            uint64_t v167 = v24;
            uint64_t v168 = v165;
            char v169 = v166;
          }
          else
          {
            uint64_t v170 = sub_21F7E1098((uint64_t)v382);
            uint64_t v171 = *(void *)(v170 + 8);
            uint64_t v363 = *(void *)(v170 + 16);
            *(void *)&long long v364 = v171;
            LODWORD(v366) = *(unsigned __int8 *)(v170 + 24);
            v365 = *(void **)(v170 + 32);
            uint64_t v165 = *(void *)(v170 + 48);
            uint64_t v362 = *(void *)(v170 + 40);
            int v166 = *(unsigned __int8 *)(v170 + 56);
            sub_21F7BB81C((uint64_t)&v377, (uint64_t)v371);
            uint64_t v172 = sub_21F7E1098((uint64_t)v371);
            uint64_t v31 = *(void *)(v172 + 32);
            uint64_t v173 = *(void *)(v172 + 40);
            uint64_t v174 = *(void *)(v172 + 48);
            uint64_t v175 = v159;
            int64_t v176 = k;
            uint64_t v177 = v160;
            char v178 = *(unsigned char *)(v172 + 56);
            sub_21F7652C0(*(void *)(v172 + 8), *(void *)(v172 + 16), *(unsigned char *)(v172 + 24));
            swift_bridgeObjectRetain();
            uint64_t v167 = v173;
            uint64_t v168 = v174;
            uint64_t v164 = v363;
            uint64_t v163 = v364;
            char v169 = v178;
            uint64_t v160 = v177;
            int64_t k = v176;
            uint64_t v159 = v175;
            uint64_t v24 = v362;
          }
          sub_21F770E44(v167, v168, v169);
          if ((v166 & 0x80) != 0) {
            break;
          }
          if (v166) {
            goto LABEL_220;
          }
          sub_21F7F5A88(&v377, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
          sub_21F7F5A88(&v377, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
          sub_21F770E44(v24, v165, 0);
          sub_21F7656A8(v163, v164, (char)v366);
          swift_bridgeObjectRelease();
          sub_21F770E38(v24, v165, 0);
          sub_21F7F5A88(&v377, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
          sub_21F7F5A88(&v377, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
          v369[0] = v159;
          unint64_t v180 = *(void *)(v159 + 16);
          unint64_t v179 = *(void *)(v159 + 24);
          if (v180 >= v179 >> 1)
          {
            sub_21F76CFE0((char *)(v179 > 1), v180 + 1, 1);
            uint64_t v159 = v369[0];
          }
          *(void *)(v159 + 16) = v180 + 1;
          *(void *)(v159 + 8 * v180 + 32) = v24;
          if (!k) {
            goto LABEL_119;
          }
          v160 += 152;
        }
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
LABEL_221:
        __break(1u);
LABEL_222:
        __break(1u);
LABEL_223:
        __break(1u);
LABEL_224:
        swift_once();
        goto LABEL_30;
      }
    }
    uint64_t v159 = MEMORY[0x263F8EE78];
LABEL_119:
    uint64_t v201 = v361;
    long long v202 = (double *)sub_21F7F5F88(v159);
    uint64_t v361 = v201;
    swift_bridgeObjectRelease();
    uint64_t v127 = v344;
    if (v342 >= 2) {
      break;
    }
    sub_21F7656A8(v359, (uint64_t)v357, (char)v356);
    swift_bridgeObjectRelease();
    sub_21F7E0FC0(v354, v353, v349, v352, v351, v348, v347);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_101:
    uint64_t v146 = v341;
    uint64_t v147 = v350 + 1;
    if (v350 + 1 == v341)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v31 = v330;
      goto LABEL_77;
    }
  }
  if (*(void *)(v360 + 16))
  {
    sub_21F7BB81C(v360 + 32, (uint64_t)&v377);
    sub_21F7F5A88(&v377, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
    swift_bridgeObjectRelease();
    sub_21F7BB81C((uint64_t)&v377, (uint64_t)v382);
    int v203 = sub_21F7E108C((uint64_t)v382);
    v204 = (unsigned __int8 *)sub_21F7E1098((uint64_t)v382);
    v205 = v204;
    if (v203 == 1)
    {
      sub_21F7F5A88(&v377, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
      uint64_t v31 = *v205;
    }
    else
    {
      uint64_t v31 = *v204;
      sub_21F7F5A88(&v377, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
    }
    uint64_t v206 = v346;
    if (*(void *)(v346 + 16) && (v207 = v31, uint64_t v31 = v346, v208 = sub_21F75BD50(v207), (v209 & 1) != 0))
    {
      sub_21F7F3EA0(*(void *)(v206 + 56) + 48 * v208, (uint64_t)v369);
    }
    else
    {
      memset(v369, 0, sizeof(v369));
      char v370 = -1;
    }
    sub_21F76C978((uint64_t)v369, (uint64_t)v367, &qword_26AD48EB0);
    if (v368 == 255)
    {
      memset(v371, 0, sizeof(v371));
      char v372 = 3;
      sub_21F76CA84((uint64_t)v367, &qword_26AD48EB0);
    }
    else
    {
      sub_21F7F3E44((uint64_t)v367, (uint64_t)v371);
    }
    sub_21F76CA84((uint64_t)v369, &qword_26AD48EB0);
    if (!v336) {
      goto LABEL_213;
    }
    if (!*(void *)(v345 + 16)) {
      goto LABEL_214;
    }
    sub_21F7F1580(v202, *v335);
    uint64_t v211 = v210;
    uint64_t v213 = v212;
    int v215 = v214;
    v217 = v216;
    swift_bridgeObjectRelease();
    sub_21F76C978(v127, v340, &qword_26AD47C00);
    uint64_t v218 = v346;
    swift_bridgeObjectRetain();
    uint64_t v219 = v361;
    uint64_t v220 = sub_21F7F4CAC(v337, v218);
    uint64_t v361 = v219;
    swift_bridgeObjectRelease();
    uint64_t v221 = *(void *)(v220 + 16);
    v365 = (void *)v213;
    v366 = v217;
    LODWORD(v364) = v215;
    unint64_t v222 = 0;
    if (v221)
    {
      v223 = (uint64_t *)(v220 + 56);
      while (1)
      {
        uint64_t v224 = *v223;
        v223 += 4;
        if (v224) {
          break;
        }
        if (v221 == ++v222) {
          goto LABEL_139;
        }
      }
    }
    if (v222 == v221)
    {
LABEL_139:
      swift_bridgeObjectRelease();
      uint64_t v225 = 0;
      char v226 = 0;
      uint64_t v227 = 0xE000000000000000;
    }
    else
    {
      uint64_t v225 = sub_21F894530(8236, 0xE200000000000000, 0, MEMORY[0x263F8EE78], v220, v222);
      uint64_t v227 = v228;
      char v230 = v229;
      swift_bridgeObjectRelease();
      char v226 = v230 & 1;
    }
    uint64_t v231 = sub_21FA25310();
    uint64_t v233 = v232;
    uint64_t v24 = v234;
    char v236 = v235 & 1;
    sub_21F7656A8(v225, v227, v226);
    swift_bridgeObjectRelease();
    char v237 = v364 & 1;
    uint64_t v238 = v211;
    uint64_t v239 = (uint64_t)v365;
    uint64_t v240 = v340;
    sub_21FA24990();
    sub_21F7656A8(v231, v233, v236);
    swift_bridgeObjectRelease();
    sub_21F7656A8(v238, v239, v237);
    swift_bridgeObjectRelease();
    sub_21F7656A8(v359, (uint64_t)v357, (char)v356);
    swift_bridgeObjectRelease();
    sub_21F7E0FC0(v354, v353, v349, v352, v351, v348, v347);
    sub_21F76CA84(v240, &qword_26AD47C00);
    sub_21F7F3CCC((uint64_t)v371);
    uint64_t v127 = v344;
    sub_21F76CA84(v344, &qword_26AD47C00);
    sub_21F76C9DC(v339, v127, &qword_26AD47C00);
    goto LABEL_101;
  }
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_21F7EFFFC(uint64_t *a1, uint64_t a2, uint64_t a3, char **a4, uint64_t a5)
{
  if (a2 >= 1)
  {
    uint64_t v7 = *a4;
    sub_21F7F4E2C((uint64_t)a1);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v7 = sub_21F7E9FE0(0, *((void *)v7 + 2) + 1, 1, v7);
    }
    unint64_t v9 = *((void *)v7 + 2);
    unint64_t v8 = *((void *)v7 + 3);
    if (v9 >= v8 >> 1) {
      uint64_t v7 = sub_21F7E9FE0((char *)(v8 > 1), v9 + 1, 1, v7);
    }
    *((void *)v7 + 2) = v9 + 1;
    uint64_t result = (uint64_t)memcpy(&v7[608 * v9 + 32], a1, 0x260uLL);
    *a4 = v7;
    return result;
  }
  sub_21F76C9DC((uint64_t)(a1 + 36), (uint64_t)v101, &qword_26AD47B78);
  sub_21F76C9DC((uint64_t)v101, (uint64_t)v102, &qword_26AD47B78);
  if (sub_21F7F0F80(v102) == 1)
  {
    sub_21F7F6178(v60);
    sub_21F76C9DC((uint64_t)v60, (uint64_t)&__dst, &qword_26AD47B60);
    sub_21F76CA40(&qword_26AD47CE8);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_21FA28550;
    memcpy((void *)(v13 + 32), a1, 0x260uLL);
    sub_21F7F4E2C((uint64_t)a1);
    uint64_t v14 = sub_21F7EDE30((uint64_t)&__dst, v13, 0, a3);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    return sub_21F9EDD30(v14);
  }
  sub_21F7BB81C((uint64_t)v102, (uint64_t)v103);
  if (!*(void *)(*(void *)a5 + 16))
  {
    sub_21F76C9DC((uint64_t)v101, (uint64_t)&__dst, &qword_26AD47B78);
    sub_21F7F5A88(&__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
LABEL_18:
    uint64_t v26 = *a1;
    long long v57 = *(_OWORD *)(a1 + 1);
    uint64_t v27 = a1[3];
    uint64_t v28 = a1[4];
    uint64_t v30 = a1[5];
    uint64_t v29 = a1[6];
    sub_21F7BB81C((uint64_t)v102, (uint64_t)v60);
    nullsub_1(v60, v31);
    uint64_t __dst = v26;
    long long v63 = v57;
    uint64_t v64 = v27;
    uint64_t v65 = v28;
    *(void *)&long long v66 = v30;
    *((void *)&v66 + 1) = v29;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    sub_21F76C9DC((uint64_t)v60, (uint64_t)v71, &qword_26AD47B78);
    uint64_t v32 = MEMORY[0x263F8EE78];
    uint64_t v73 = MEMORY[0x263F8EE78];
    uint64_t v74 = 0;
    uint64_t v33 = *(void *)(*(void *)a5 + 16);
    sub_21F76CA40(&qword_26AD47CE8);
    uint64_t v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_21FA28550;
    memcpy((void *)(v34 + 32), a1, 0x260uLL);
    uint64_t v35 = __dst;
    uint64_t v36 = v64;
    uint64_t v37 = v65;
    long long v56 = v66;
    long long v58 = v63;
    long long v54 = v68;
    long long v55 = v67;
    long long v52 = v70;
    long long v53 = v69;
    long long v50 = v71[1];
    long long v51 = v71[0];
    long long v48 = v71[3];
    long long v49 = v71[2];
    long long v46 = v71[5];
    long long v47 = v71[4];
    long long v44 = v71[7];
    long long v45 = v71[6];
    long long v43 = v71[8];
    uint64_t v38 = v72;
    sub_21F7F3D20((uint64_t)v101, (uint64_t (*)(void))sub_21F7C6094);
    sub_21F7F4E2C((uint64_t)a1);
    sub_21F7F3D20((uint64_t)v101, (uint64_t (*)(void))sub_21F7C6094);
    swift_bridgeObjectRetain();
    sub_21F7F4084((uint64_t)&__dst);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v59[0] = *(void *)a5;
    *(void *)a5 = 0x8000000000000000;
    v77[0] = v33;
    v77[1] = v35;
    long long v78 = v58;
    uint64_t v79 = v36;
    uint64_t v80 = v37;
    long long v81 = v56;
    long long v82 = v55;
    long long v83 = v54;
    long long v84 = v53;
    long long v85 = v52;
    long long v86 = v51;
    long long v87 = v50;
    long long v88 = v49;
    long long v89 = v48;
    long long v90 = v47;
    long long v91 = v46;
    long long v92 = v45;
    long long v93 = v44;
    long long v94 = v43;
    uint64_t v95 = v38;
    uint64_t v96 = v32;
    uint64_t v97 = 0;
    uint64_t v98 = v34;
    sub_21F8736DC(v77, v103, isUniquelyReferenced_nonNull_native);
    *(void *)a5 = v59[0];
    swift_bridgeObjectRelease();
    sub_21F7F3D20((uint64_t)v101, (uint64_t (*)(void))sub_21F7BB724);
    sub_21F7F3D20((uint64_t)v101, (uint64_t (*)(void))sub_21F7BB724);
    return sub_21F7F41B8((uint64_t)&__dst);
  }
  sub_21F76C9DC((uint64_t)v101, (uint64_t)v99, &qword_26AD47B78);
  sub_21F76C9DC((uint64_t)v101, (uint64_t)v100, &qword_26AD47B78);
  sub_21F7F5A88(v100, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
  sub_21F7F5A88(v99, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
  sub_21F9161A8((uint64_t)v103);
  if ((v15 & 1) == 0)
  {
    sub_21F7F3D20((uint64_t)v101, (uint64_t (*)(void))sub_21F7BB724);
    goto LABEL_18;
  }
  sub_21F7F4E2C((uint64_t)a1);
  char v16 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v75 = *(void *)a5;
  uint64_t v17 = (char *)v75;
  *(void *)a5 = 0x8000000000000000;
  sub_21F76C9DC((uint64_t)v101, (uint64_t)&v76, &qword_26AD47B78);
  sub_21F7F5A88(&v76, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
  unint64_t v19 = sub_21F9161A8((uint64_t)v103);
  uint64_t v20 = *((void *)v17 + 2);
  BOOL v21 = (v18 & 1) == 0;
  uint64_t v22 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
    __break(1u);
LABEL_26:
    uint64_t v17 = sub_21F7E9FE0(0, *((void *)v17 + 2) + 1, 1, v17);
    goto LABEL_22;
  }
  char v23 = v18;
  if (*((void *)v17 + 3) >= v22)
  {
    if (v16)
    {
      if ((v18 & 1) == 0) {
        goto LABEL_28;
      }
    }
    else
    {
      sub_21F87AD58();
      if ((v23 & 1) == 0) {
        goto LABEL_28;
      }
    }
  }
  else
  {
    sub_21F8718DC(v22, v16);
    unint64_t v24 = sub_21F9161A8((uint64_t)v103);
    if ((v23 & 1) != (v25 & 1))
    {
LABEL_29:
      uint64_t result = sub_21FA26990();
      __break(1u);
      return result;
    }
    unint64_t v19 = v24;
    if ((v23 & 1) == 0)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
  }
  memmove(&__dst, (const void *)(*(void *)(v75 + 56) + 304 * v19), 0x130uLL);
  nullsub_1(&__dst, v40);
  sub_21F76C9DC((uint64_t)&__dst, (uint64_t)v60, &qword_26AD46650);
  uint64_t v17 = v61;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_26;
  }
LABEL_22:
  unint64_t v42 = *((void *)v17 + 2);
  unint64_t v41 = *((void *)v17 + 3);
  if (v42 >= v41 >> 1) {
    uint64_t v17 = sub_21F7E9FE0((char *)(v41 > 1), v42 + 1, 1, v17);
  }
  *((void *)v17 + 2) = v42 + 1;
  memcpy(&v17[608 * v42 + 32], a1, 0x260uLL);
  unint64_t v61 = v17;
  sub_21F901354((uint64_t)v60, 1, &v75, v19, v103);
  sub_21F76C9DC((uint64_t)v60, (uint64_t)v59, &qword_26AD46650);
  sub_21F7F61A4((uint64_t)v59);
  sub_21F7F3D20((uint64_t)v101, (uint64_t (*)(void))sub_21F7BB724);
  *(void *)a5 = v75;
  sub_21F7F3D20((uint64_t)v101, (uint64_t (*)(void))sub_21F7BB724);
  return sub_21F7F3D20((uint64_t)v101, (uint64_t (*)(void))sub_21F7BB724);
}

uint64_t sub_21F7F076C(uint64_t a1, uint64_t a2)
{
  uint64_t v70 = a2;
  uint64_t v3 = sub_21FA24C30();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F76C9DC(a1, (uint64_t)v81, &qword_26AD47B78);
  if (sub_21F7F0F80(v81) == 1) {
    return 0;
  }
  sub_21F7BB81C((uint64_t)v81, (uint64_t)v82);
  sub_21F7BB81C((uint64_t)v82, (uint64_t)v83);
  int v7 = sub_21F7E108C((uint64_t)v83);
  unint64_t v8 = (unsigned __int8 *)sub_21F7E1098((uint64_t)v83);
  unsigned __int8 v9 = *v8;
  if (v7 == 1)
  {
    int v62 = *v8;
    uint64_t v10 = a1;
    uint64_t v12 = *((void *)v8 + 1);
    uint64_t v11 = *((void *)v8 + 2);
    int v13 = v8[24];
    uint64_t v14 = *((void *)v8 + 4);
    uint64_t v15 = *((void *)v8 + 5);
    uint64_t v16 = *((void *)v8 + 6);
    int v17 = (char)v8[56];
    uint64_t v65 = *((void *)v8 + 10);
    uint64_t v18 = *((void *)v8 + 11);
    long long v63 = v5;
    uint64_t v64 = v18;
    LODWORD(v18) = v8[96];
    uint64_t v66 = *((void *)v8 + 13);
    uint64_t v19 = *((void *)v8 + 15);
    uint64_t v52 = *((void *)v8 + 14);
    int v56 = v18;
    int v57 = v13;
    char v20 = v13 & 1;
    int v53 = v18 & 1;
    int v21 = (char)v8[128];
    uint64_t v61 = v10;
    sub_21F7F3D20(v10, (uint64_t (*)(void))sub_21F7C6094);
    uint64_t v58 = v11;
    uint64_t v59 = v12;
    uint64_t v22 = v12;
    uint64_t v23 = v19;
    sub_21F7652C0(v22, v11, v20);
    uint64_t v60 = v14;
    uint64_t v24 = v52;
    swift_bridgeObjectRetain();
    uint64_t v68 = v16;
    uint64_t v69 = v15;
    LODWORD(v67) = v17;
    sub_21F770E44(v15, v16, v17);
    sub_21F7652C0(v65, v64, v53);
    swift_bridgeObjectRetain();
    sub_21F770E44(v24, v19, v21);
    sub_21FA24C20();
    sub_21FA24C10();
    uint64_t v25 = v70;
    if (*(void *)(v70 + 16) && (unint64_t v26 = sub_21F75BD50(v62), (v27 & 1) != 0))
    {
      sub_21F7F3EA0(*(void *)(v25 + 56) + 48 * v26, (uint64_t)&v77);
    }
    else
    {
      uint64_t v79 = 0;
      long long v77 = 0u;
      long long v78 = 0u;
      char v80 = -1;
    }
    sub_21F76C978((uint64_t)&v77, (uint64_t)v71, &qword_26AD48EB0);
    if (v72 == 255)
    {
      uint64_t v75 = 0;
      long long v73 = 0u;
      long long v74 = 0u;
      char v76 = 3;
      sub_21F76CA84((uint64_t)v71, &qword_26AD48EB0);
      char v37 = v67;
      if ((v67 & 0x80000000) == 0) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_21F7F3E44((uint64_t)v71, (uint64_t)&v73);
      char v37 = v67;
      if ((v67 & 0x80000000) == 0)
      {
LABEL_13:
        uint64_t v39 = v68;
        uint64_t v38 = v69;
        sub_21F7607AC(v69, v68, v37);
        sub_21F9F8DF4(v38, v39, v37);
        uint64_t v25 = v70;
        sub_21F770E38(v38, v39, v37);
        goto LABEL_19;
      }
    }
    sub_21F9F9320(v69, v68, v37 & 1);
LABEL_19:
    sub_21F7F3CCC((uint64_t)&v73);
    sub_21F76CA84((uint64_t)&v77, &qword_26AD48EB0);
    sub_21FA24C00();
    swift_bridgeObjectRelease();
    sub_21FA24C10();
    if (*(void *)(v25 + 16) && (unint64_t v40 = sub_21F75BD50(v62), (v41 & 1) != 0))
    {
      sub_21F7F3EA0(*(void *)(v25 + 56) + 48 * v40, (uint64_t)&v77);
    }
    else
    {
      uint64_t v79 = 0;
      long long v77 = 0u;
      long long v78 = 0u;
      char v80 = -1;
    }
    sub_21F76C978((uint64_t)&v77, (uint64_t)v71, &qword_26AD48EB0);
    if (v72 == 255)
    {
      uint64_t v75 = 0;
      long long v73 = 0u;
      long long v74 = 0u;
      char v76 = 3;
      sub_21F76CA84((uint64_t)v71, &qword_26AD48EB0);
    }
    else
    {
      sub_21F7F3E44((uint64_t)v71, (uint64_t)&v73);
    }
    uint64_t v55 = v23;
    int v54 = v21;
    if (v21 < 0)
    {
      sub_21F9F9320(v24, v23, v21 & 1);
    }
    else
    {
      sub_21F7607AC(v24, v23, v21);
      sub_21F9F8DF4(v24, v23, v21);
      sub_21F770E38(v24, v23, v21);
    }
    uint64_t v46 = v24;
    char v47 = v56 & 1;
    LODWORD(v70) = v57 & 1;
    sub_21F7F3CCC((uint64_t)&v73);
    sub_21F76CA84((uint64_t)&v77, &qword_26AD48EB0);
    sub_21FA24C00();
    swift_bridgeObjectRelease();
    sub_21FA24C10();
    sub_21FA24C50();
    type metadata accessor for FindClass();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    long long v49 = self;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v50 = objc_msgSend(v49, sel_bundleForClass_, ObjCClassFromMetadata);
    uint64_t v6 = sub_21FA25340();
    sub_21F7656A8(v65, v64, v47);
    swift_bridgeObjectRelease();
    sub_21F770E38(v46, v55, v54);
    sub_21F7656A8(v59, v58, v70);
    swift_bridgeObjectRelease();
    sub_21F770E38(v69, v68, v67);
    sub_21F7F3D20(v61, (uint64_t (*)(void))sub_21F7BB724);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v6;
  }
  uint64_t v28 = *((void *)v8 + 1);
  uint64_t v29 = *((void *)v8 + 2);
  LODWORD(v69) = v8[24];
  uint64_t v30 = *((void *)v8 + 4);
  uint64_t v31 = *((void *)v8 + 5);
  uint64_t v32 = *((void *)v8 + 6);
  int v33 = (char)v8[56];
  uint64_t v34 = v70;
  if (*(void *)(v70 + 16) && (unint64_t v35 = sub_21F75BD50(v9), (v36 & 1) != 0))
  {
    sub_21F7F3EA0(*(void *)(v34 + 56) + 48 * v35, (uint64_t)&v77);
  }
  else
  {
    uint64_t v79 = 0;
    long long v77 = 0u;
    long long v78 = 0u;
    char v80 = -1;
  }
  sub_21F76C978((uint64_t)&v77, (uint64_t)v71, &qword_26AD48EB0);
  if (v72 == 255)
  {
    uint64_t v75 = 0;
    long long v73 = 0u;
    long long v74 = 0u;
    char v76 = 3;
    sub_21F7F3D20(a1, (uint64_t (*)(void))sub_21F7C6094);
    sub_21F7652C0(v28, v29, v69);
    swift_bridgeObjectRetain();
    sub_21F770E44(v31, v32, v33);
    sub_21F76CA84((uint64_t)v71, &qword_26AD48EB0);
  }
  else
  {
    sub_21F7F3E44((uint64_t)v71, (uint64_t)&v73);
    sub_21F7F3D20(a1, (uint64_t (*)(void))sub_21F7C6094);
    sub_21F7652C0(v28, v29, v69);
    swift_bridgeObjectRetain();
    sub_21F770E44(v31, v32, v33);
  }
  uint64_t v70 = v30;
  uint64_t v67 = v29;
  uint64_t v68 = v28;
  if (v33 < 0)
  {
    uint64_t v42 = sub_21F9F9320(v31, v32, v33 & 1);
    uint64_t v44 = v45;
  }
  else
  {
    sub_21F7607AC(v31, v32, v33);
    uint64_t v42 = sub_21F9F8DF4(v31, v32, v33);
    uint64_t v44 = v43;
    sub_21F770E38(v31, v32, v33);
  }
  sub_21F7F3CCC((uint64_t)&v73);
  sub_21F76CA84((uint64_t)&v77, &qword_26AD48EB0);
  *(void *)&long long v77 = v42;
  *((void *)&v77 + 1) = v44;
  sub_21F7AA27C();
  uint64_t v6 = sub_21FA25350();
  sub_21F7656A8(v68, v67, v69);
  swift_bridgeObjectRelease();
  sub_21F770E38(v31, v32, v33);
  sub_21F7F3D20(a1, (uint64_t (*)(void))sub_21F7BB724);
  return v6;
}

uint64_t sub_21F7F0F80(void *a1)
{
  if ((*a1 >> 3) > 0x80000000) {
    return -(*a1 >> 3);
  }
  else {
    return 0;
  }
}

uint64_t sub_21F7F0F98(uint64_t a1, uint64_t a2)
{
  sub_21F7BB81C(a1, (uint64_t)v48);
  int v3 = sub_21F7E108C((uint64_t)v48);
  uint64_t v4 = sub_21F7E1098((uint64_t)v48);
  unsigned __int8 v5 = *(unsigned char *)v4;
  if (v3 == 1)
  {
    uint64_t v34 = *(void *)(v4 + 16);
    uint64_t v35 = *(void *)(v4 + 8);
    char v31 = *(unsigned char *)(v4 + 24);
    uint64_t v6 = *(void *)(v4 + 40);
    uint64_t v7 = *(void *)(v4 + 48);
    int v8 = *(char *)(v4 + 56);
    uint64_t v32 = *(void *)(v4 + 88);
    uint64_t v33 = *(void *)(v4 + 80);
    char v9 = *(unsigned char *)(v4 + 96);
    uint64_t v10 = *(void *)(v4 + 112);
    uint64_t v11 = *(void *)(v4 + 120);
    int v12 = *(char *)(v4 + 128);
    uint64_t v46 = 0;
    unint64_t v47 = 0xE000000000000000;
    if (*(void *)(a2 + 16) && (unint64_t v13 = sub_21F75BD50(v5), (v14 & 1) != 0))
    {
      sub_21F7F3EA0(*(void *)(a2 + 56) + 48 * v13, (uint64_t)&v42);
    }
    else
    {
      uint64_t v44 = 0;
      long long v42 = 0u;
      long long v43 = 0u;
      char v45 = -1;
    }
    sub_21F76C978((uint64_t)&v42, (uint64_t)v36, &qword_26AD48EB0);
    char v29 = v9;
    char v23 = v9 & 1;
    if (v37 == 255)
    {
      uint64_t v40 = 0;
      long long v38 = 0u;
      long long v39 = 0u;
      char v41 = 3;
      sub_21F7652C0(v35, v34, v31 & 1);
      swift_bridgeObjectRetain();
      sub_21F770E44(v6, v7, v8);
      sub_21F7652C0(v33, v32, v23);
      swift_bridgeObjectRetain();
      sub_21F770E44(v10, v11, v12);
      sub_21F76CA84((uint64_t)v36, &qword_26AD48EB0);
      uint64_t v30 = v6;
      if ((v8 & 0x80000000) == 0) {
        goto LABEL_11;
      }
    }
    else
    {
      sub_21F7F3E44((uint64_t)v36, (uint64_t)&v38);
      sub_21F7652C0(v35, v34, v31 & 1);
      swift_bridgeObjectRetain();
      sub_21F770E44(v6, v7, v8);
      sub_21F7652C0(v33, v32, v23);
      swift_bridgeObjectRetain();
      sub_21F770E44(v10, v11, v12);
      uint64_t v30 = v6;
      if ((v8 & 0x80000000) == 0)
      {
LABEL_11:
        sub_21F7607AC(v6, v7, v8);
        sub_21F9F8DF4(v6, v7, v8);
        sub_21F770E38(v6, v7, v8);
        goto LABEL_18;
      }
    }
    sub_21F9F9320(v6, v7, v8 & 1);
LABEL_18:
    sub_21F7F3CCC((uint64_t)&v38);
    sub_21F76CA84((uint64_t)&v42, &qword_26AD48EB0);
    sub_21FA25D40();
    swift_bridgeObjectRelease();
    sub_21FA25D40();
    if (*(void *)(a2 + 16))
    {
      unint64_t v25 = sub_21F75BD50(v5);
      char v26 = v29;
      if (v27)
      {
        sub_21F7F3EA0(*(void *)(a2 + 56) + 48 * v25, (uint64_t)&v42);
      }
      else
      {
        uint64_t v44 = 0;
        long long v42 = 0u;
        long long v43 = 0u;
        char v45 = -1;
      }
    }
    else
    {
      uint64_t v44 = 0;
      long long v42 = 0u;
      long long v43 = 0u;
      char v45 = -1;
      char v26 = v29;
    }
    sub_21F76C978((uint64_t)&v42, (uint64_t)v36, &qword_26AD48EB0);
    if (v37 == 255)
    {
      uint64_t v40 = 0;
      long long v38 = 0u;
      long long v39 = 0u;
      char v41 = 3;
      sub_21F76CA84((uint64_t)v36, &qword_26AD48EB0);
      if ((v12 & 0x80000000) == 0) {
        goto LABEL_28;
      }
    }
    else
    {
      sub_21F7F3E44((uint64_t)v36, (uint64_t)&v38);
      if ((v12 & 0x80000000) == 0)
      {
LABEL_28:
        sub_21F7607AC(v10, v11, v12);
        sub_21F9F8DF4(v10, v11, v12);
        sub_21F770E38(v10, v11, v12);
LABEL_31:
        sub_21F7F3CCC((uint64_t)&v38);
        sub_21F76CA84((uint64_t)&v42, &qword_26AD48EB0);
        sub_21FA25D40();
        swift_bridgeObjectRelease();
        sub_21F7656A8(v33, v32, v26 & 1);
        swift_bridgeObjectRelease();
        sub_21F770E38(v10, v11, v12);
        sub_21F7656A8(v35, v34, v31 & 1);
        swift_bridgeObjectRelease();
        uint64_t v24 = v46;
        sub_21F770E38(v30, v7, v8);
        return v24;
      }
    }
    sub_21F9F9320(v10, v11, v12 & 1);
    goto LABEL_31;
  }
  uint64_t v15 = *(void *)(v4 + 8);
  uint64_t v16 = *(void *)(v4 + 16);
  char v17 = *(unsigned char *)(v4 + 24);
  uint64_t v18 = *(void *)(v4 + 40);
  uint64_t v19 = *(void *)(v4 + 48);
  int v20 = *(char *)(v4 + 56);
  if (*(void *)(a2 + 16) && (unint64_t v21 = sub_21F75BD50(*(unsigned char *)v4), (v22 & 1) != 0))
  {
    sub_21F7F3EA0(*(void *)(a2 + 56) + 48 * v21, (uint64_t)&v42);
  }
  else
  {
    uint64_t v44 = 0;
    long long v42 = 0u;
    long long v43 = 0u;
    char v45 = -1;
  }
  sub_21F76C978((uint64_t)&v42, (uint64_t)v36, &qword_26AD48EB0);
  if (v37 == 255)
  {
    uint64_t v40 = 0;
    long long v38 = 0u;
    long long v39 = 0u;
    char v41 = 3;
    sub_21F7652C0(v15, v16, v17);
    swift_bridgeObjectRetain();
    sub_21F770E44(v18, v19, v20);
    sub_21F76CA84((uint64_t)v36, &qword_26AD48EB0);
    if ((v20 & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_22:
    uint64_t v24 = sub_21F9F9320(v18, v19, v20 & 1);
    goto LABEL_23;
  }
  sub_21F7F3E44((uint64_t)v36, (uint64_t)&v38);
  sub_21F7652C0(v15, v16, v17);
  swift_bridgeObjectRetain();
  sub_21F770E44(v18, v19, v20);
  if (v20 < 0) {
    goto LABEL_22;
  }
LABEL_15:
  sub_21F7607AC(v18, v19, v20);
  uint64_t v24 = sub_21F9F8DF4(v18, v19, v20);
  sub_21F770E38(v18, v19, v20);
LABEL_23:
  sub_21F7F3CCC((uint64_t)&v38);
  sub_21F7656A8(v15, v16, v17);
  swift_bridgeObjectRelease();
  sub_21F770E38(v18, v19, v20);
  sub_21F76CA84((uint64_t)&v42, &qword_26AD48EB0);
  return v24;
}

void sub_21F7F1580(double *a1, char a2)
{
  uint64_t v4 = sub_21FA24C30();
  MEMORY[0x270FA5388](v4 - 8);
  unint64_t v5 = *((void *)a1 + 2);
  if (v5 == 2)
  {
    sub_21F9F8DF4(*((void *)a1 + 4), 0, 0);
    sub_21F9F8DF4(*((void *)a1 + 5), 0, 0);
    sub_21FA24C20();
    sub_21FA24C10();
    sub_21FA24C00();
    swift_bridgeObjectRelease();
    sub_21FA24C10();
    sub_21FA24C00();
    swift_bridgeObjectRelease();
    sub_21FA24C10();
    sub_21FA24C50();
    type metadata accessor for FindClass();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    uint64_t v10 = self;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v8 = objc_msgSend(v10, sel_bundleForClass_, ObjCClassFromMetadata);
  }
  else
  {
    if (v5 == 1)
    {
      sub_21F9F8DF4(*((void *)a1 + 4), 0, 0);
      sub_21F7AA27C();
      sub_21FA25350();
      return;
    }
    if (v5)
    {
      unint64_t v30 = v5 - 1;
      uint64_t v13 = *((uint64_t *)a1 + 4);
      double v12 = a1[5];
      uint64_t v11 = a1 + 4;
      if (v12 < *(double *)&v13) {
        uint64_t v14 = *((uint64_t *)a1 + 4);
      }
      else {
        uint64_t v14 = *((uint64_t *)a1 + 5);
      }
      if (v12 < *(double *)&v13) {
        uint64_t v15 = *((uint64_t *)a1 + 5);
      }
      else {
        uint64_t v15 = *((uint64_t *)a1 + 4);
      }
      unint64_t v16 = 2;
      double v17 = *(double *)&v15;
      double v18 = *(double *)&v14;
      do
      {
        if (v16 >= v5)
        {
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        double v20 = *(double *)&v11[v16];
        unint64_t v21 = *((void *)a1 + 2);
        double v22 = v20;
        if (v16 + 1 != v5)
        {
          if (v16 + 1 >= v5) {
            goto LABEL_42;
          }
          double v22 = *(double *)&v11[v16 + 1];
          unint64_t v21 = v16 + 2;
        }
        if (v22 >= v20) {
          double v19 = v22;
        }
        else {
          double v19 = *(double *)&v11[v16];
        }
        if (v22 < v20) {
          double v20 = v22;
        }
        if (v20 < v17)
        {
          *(double *)&uint64_t v15 = v20;
          double v17 = v20;
        }
        if (v19 >= v18)
        {
          *(double *)&uint64_t v14 = v19;
          double v18 = v19;
        }
        unint64_t v16 = v21;
      }
      while (v21 != v5);
      sub_21F9F8DF4(v15, 0, 0);
      sub_21F9F8DF4(v14, 0, 0);
      if (*(double *)&v15 == *(double *)&v14)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_21FA24C20();
        sub_21FA24C10();
        sub_21FA24C00();
        swift_bridgeObjectRelease();
        sub_21FA24C10();
        sub_21FA24C50();
        type metadata accessor for FindClass();
        uint64_t v23 = swift_getObjCClassFromMetadata();
        uint64_t v24 = self;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v8 = objc_msgSend(v24, sel_bundleForClass_, v23);
        goto LABEL_40;
      }
      if (a2)
      {
        if (*(double *)&v15 == *(double *)&v13 && *(double *)&v14 == *(double *)&v11[v5 - 1])
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_21F7ECE1C((uint64_t)a1, (uint64_t)a1, 1);
        }
        else
        {
          if (*(double *)&v14 != *(double *)&v13 || *(double *)&v15 != *(double *)&v11[v30])
          {
            sub_21F9F8DF4(v13, 0, 0);
            sub_21F9F8DF4(v11[v30], 0, 0);
            sub_21FA24C20();
            sub_21FA24C10();
            sub_21FA24C00();
            swift_bridgeObjectRelease();
            sub_21FA24C10();
            sub_21FA24C00();
            swift_bridgeObjectRelease();
            sub_21FA24C10();
            sub_21FA24C00();
            swift_bridgeObjectRelease();
            sub_21FA24C10();
            sub_21FA24C00();
            swift_bridgeObjectRelease();
            sub_21FA24C10();
            sub_21FA24C50();
            type metadata accessor for FindClass();
            uint64_t v25 = swift_getObjCClassFromMetadata();
            char v26 = self;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v8 = objc_msgSend(v26, sel_bundleForClass_, v25);
            goto LABEL_40;
          }
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_21F7ECF48((uint64_t)a1, (uint64_t)a1, 1);
        }
      }
      sub_21FA24C20();
      sub_21FA24C10();
      sub_21FA24C00();
      swift_bridgeObjectRelease();
      sub_21FA24C10();
      sub_21FA24C00();
      swift_bridgeObjectRelease();
      sub_21FA24C10();
      sub_21FA24C50();
      type metadata accessor for FindClass();
      uint64_t v27 = swift_getObjCClassFromMetadata();
      uint64_t v28 = self;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v8 = objc_msgSend(v28, sel_bundleForClass_, v27);
    }
    else
    {
      sub_21FA24C40();
      type metadata accessor for FindClass();
      uint64_t v6 = swift_getObjCClassFromMetadata();
      uint64_t v7 = self;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v8 = objc_msgSend(v7, sel_bundleForClass_, v6);
    }
  }
LABEL_40:
  id v29 = v8;
  sub_21FA25340();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_21F7F209C(uint64_t a1, uint64_t a2)
{
  sub_21F76C9DC(a1 + 56, (uint64_t)v62, &qword_26AD47C70);
  sub_21F76C9DC((uint64_t)v62, (uint64_t)v63, &qword_26AD47C70);
  if (v63[3])
  {
    uint64_t v4 = v63[0];
    goto LABEL_33;
  }
  sub_21F76C9DC(a1 + 288, (uint64_t)v61, &qword_26AD47B78);
  sub_21F76C9DC(a1 + 288, (uint64_t)v59, &qword_26AD47B78);
  sub_21F76C9DC((uint64_t)v61, (uint64_t)v64, &qword_26AD47B78);
  if (sub_21F7F0F80(v64) != 1)
  {
    sub_21F7BB81C((uint64_t)v64, (uint64_t)v65);
    sub_21F76C9DC((uint64_t)v59, (uint64_t)v67, &qword_26AD47B78);
    sub_21F7F5A88(v67, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
    uint64_t v5 = sub_21F7F076C((uint64_t)v61, a2);
    if (v8)
    {
      uint64_t v9 = v5;
      uint64_t v10 = v6;
      char v11 = v7;
      uint64_t v12 = v8;
      sub_21F7652C0(v5, v6, v7 & 1);
      swift_bridgeObjectRetain();
      uint64_t v13 = sub_21F7E9BA0(0, 1, 1, MEMORY[0x263F8EE78]);
      unint64_t v14 = *((void *)v13 + 2);
      unint64_t v15 = *((void *)v13 + 3);
      unint64_t v16 = v14 + 1;
      if (v14 >= v15 >> 1)
      {
        unint64_t v55 = v14 + 1;
        long long v49 = v13;
        unint64_t v50 = *((void *)v13 + 2);
        long long v51 = sub_21F7E9BA0((char *)(v15 > 1), v14 + 1, 1, v49);
        unint64_t v14 = v50;
        unint64_t v16 = v55;
        uint64_t v13 = v51;
      }
      char v17 = v11 & 1;
      *((void *)v13 + 2) = v16;
      double v18 = &v13[32 * v14];
      *((void *)v18 + 4) = v9;
      *((void *)v18 + 5) = v10;
      unsigned char v18[48] = v17;
      *((void *)v18 + 7) = v12;
      sub_21F7F3D20((uint64_t)v61, (uint64_t (*)(void))sub_21F7BB724);
      sub_21F7656A8(v9, v10, v17);
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    sub_21F7F3D20((uint64_t)v61, (uint64_t (*)(void))sub_21F7BB724);
  }
  uint64_t v13 = (char *)MEMORY[0x263F8EE78];
LABEL_10:
  sub_21F76C9DC(a1 + 440, (uint64_t)v60, &qword_26AD47B78);
  sub_21F76C9DC(a1 + 440, (uint64_t)v58, &qword_26AD47B78);
  sub_21F76C9DC((uint64_t)v60, (uint64_t)v66, &qword_26AD47B78);
  if (sub_21F7F0F80(v66) != 1)
  {
    sub_21F7BB81C((uint64_t)v66, (uint64_t)v67);
    sub_21F76C9DC((uint64_t)v58, (uint64_t)v57, &qword_26AD47B78);
    sub_21F7F5A88(v57, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
    uint64_t v19 = sub_21F7F076C((uint64_t)v60, a2);
    if (v22)
    {
      uint64_t v23 = v19;
      uint64_t v24 = v20;
      char v25 = v21;
      uint64_t v26 = v22;
      sub_21F7652C0(v19, v20, v21 & 1);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v13 = sub_21F7E9BA0(0, *((void *)v13 + 2) + 1, 1, v13);
      }
      unint64_t v27 = *((void *)v13 + 2);
      unint64_t v28 = *((void *)v13 + 3);
      unint64_t v29 = v27 + 1;
      if (v27 >= v28 >> 1)
      {
        unint64_t v56 = v27 + 1;
        uint64_t v52 = v13;
        unint64_t v53 = *((void *)v13 + 2);
        int v54 = sub_21F7E9BA0((char *)(v28 > 1), v27 + 1, 1, v52);
        unint64_t v27 = v53;
        unint64_t v29 = v56;
        uint64_t v13 = v54;
      }
      char v30 = v25 & 1;
      *((void *)v13 + 2) = v29;
      char v31 = &v13[32 * v27];
      *((void *)v31 + 4) = v23;
      *((void *)v31 + 5) = v24;
      v31[48] = v30;
      *((void *)v31 + 7) = v26;
      sub_21F7F3D20((uint64_t)v60, (uint64_t (*)(void))sub_21F7BB724);
      sub_21F7656A8(v23, v24, v30);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21F7F3D20((uint64_t)v60, (uint64_t (*)(void))sub_21F7BB724);
    }
  }
  uint64_t v32 = *(void *)(a1 + 120);
  if (*(void *)(v32 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v33 = sub_21F7F4CAC(v32, a2);
    swift_bridgeObjectRelease();
    uint64_t v34 = *(void *)(v33 + 16);
    if (v34)
    {
      unint64_t v35 = 0;
      char v36 = (uint64_t *)(v33 + 56);
      while (1)
      {
        uint64_t v37 = *v36;
        v36 += 4;
        if (v37) {
          break;
        }
        if (v34 == ++v35) {
          goto LABEL_31;
        }
      }
    }
    else
    {
      unint64_t v35 = 0;
    }
    if (v35 != v34)
    {
      uint64_t v38 = sub_21F894530(8236, 0xE200000000000000, 0, MEMORY[0x263F8EE78], v33, v35);
      uint64_t v40 = v39;
      char v42 = v41;
      uint64_t v44 = v43;
      swift_bridgeObjectRelease();
      sub_21F7652C0(v38, v40, v42 & 1);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v13 = sub_21F7E9BA0(0, *((void *)v13 + 2) + 1, 1, v13);
      }
      unint64_t v46 = *((void *)v13 + 2);
      unint64_t v45 = *((void *)v13 + 3);
      if (v46 >= v45 >> 1) {
        uint64_t v13 = sub_21F7E9BA0((char *)(v45 > 1), v46 + 1, 1, v13);
      }
      *((void *)v13 + 2) = v46 + 1;
      unint64_t v47 = &v13[32 * v46];
      *((void *)v47 + 4) = v38;
      *((void *)v47 + 5) = v40;
      v47[48] = v42 & 1;
      *((void *)v47 + 7) = v44;
      sub_21F7656A8(v38, v40, v42 & 1);
    }
LABEL_31:
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = sub_21F894328(32, 0xE100000000000000, 0, MEMORY[0x263F8EE78], (uint64_t)v13);
  swift_bridgeObjectRelease();
LABEL_33:
  sub_21F7F6084(v62);
  return v4;
}

char *sub_21F7F25C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21FA24C30();
  MEMORY[0x270FA5388](v4 - 8);
  unint64_t v44 = *(void *)(a1 + 16);
  if (v44)
  {
    uint64_t v41 = a2;
    char v42 = (const void *)(a1 + 32);
    swift_bridgeObjectRetain();
    uint64_t v5 = (char *)MEMORY[0x263F8EE78];
    uint64_t v6 = 1;
    uint64_t v7 = 32;
    for (uint64_t i = a1; ; a1 = i)
    {
      memcpy(v49, (const void *)(a1 + v7), sizeof(v49));
      v50[0] = MEMORY[0x263F8EE88];
      sub_21F7F4E2C((uint64_t)v49);
      uint64_t v8 = swift_bridgeObjectRetain();
      uint64_t v9 = sub_21F7F57E0(v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = (char *)sub_21F7F5114((uint64_t)v49);
      uint64_t v11 = v9[2];
      int64_t v12 = *((void *)v5 + 2);
      int64_t v13 = v12 + v11;
      if (__OFADD__(v12, v11))
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
      if (result && v13 <= *((void *)v5 + 3) >> 1)
      {
        if (v9[2]) {
          goto LABEL_7;
        }
      }
      else
      {
        if (v12 <= v13) {
          int64_t v17 = v12 + v11;
        }
        else {
          int64_t v17 = v12;
        }
        uint64_t result = sub_21F7E85B8(result, v17, 1, v5);
        uint64_t v5 = result;
        if (v9[2])
        {
LABEL_7:
          if ((*((void *)v5 + 3) >> 1) - *((void *)v5 + 2) < v11) {
            goto LABEL_37;
          }
          uint64_t result = (char *)swift_arrayInitWithCopy();
          if (v11)
          {
            uint64_t v14 = *((void *)v5 + 2);
            BOOL v15 = __OFADD__(v14, v11);
            uint64_t v16 = v14 + v11;
            if (v15) {
              goto LABEL_38;
            }
            *((void *)v5 + 2) = v16;
          }
          goto LABEL_16;
        }
      }
      if (v11) {
        goto LABEL_36;
      }
LABEL_16:
      swift_bridgeObjectRelease();
      if (v44 == v6)
      {
        uint64_t v18 = i;
        swift_bridgeObjectRelease();
        sub_21F7ED074(i);
        uint64_t v19 = swift_bridgeObjectRetain();
        uint64_t v20 = sub_21F7C5CB4(v19);
        swift_bridgeObjectRelease();
        unint64_t v21 = *(void *)(v20 + 16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_getKeyPath();
        if (v21 <= 1) {
          uint64_t v22 = 1;
        }
        else {
          uint64_t v22 = v21;
        }
        sub_21F76C9DC(i + 472, (uint64_t)v47, &qword_26AD47B78);
        sub_21F76C9DC((uint64_t)v47, (uint64_t)v48, &qword_26AD47B78);
        uint64_t result = (char *)sub_21F7F0F80(v48);
        if (result == 1)
        {
          uint64_t v23 = 0;
          uint64_t v24 = v42;
          while (1)
          {
            unint64_t v25 = v23 + 1;
            if (__OFADD__(v23, 1)) {
              goto LABEL_39;
            }
            if (v25 == v44)
            {
              swift_release();
              sub_21F7BB380((uint64_t)v50);
              sub_21F76C9DC((uint64_t)v50, (uint64_t)v46, &qword_26AD47B78);
              uint64_t v18 = i;
              goto LABEL_33;
            }
            sub_21F76C9DC((uint64_t)v42 + 608 * v25 + 440, (uint64_t)v47, &qword_26AD47B78);
            sub_21F76C9DC((uint64_t)v47, (uint64_t)v48, &qword_26AD47B78);
            uint64_t result = (char *)sub_21F7F0F80(v48);
            ++v23;
            if (result != 1)
            {
              uint64_t v18 = i;
              goto LABEL_29;
            }
          }
        }
        unint64_t v25 = 0;
        uint64_t v24 = v42;
LABEL_29:
        if (v25 < v44)
        {
          sub_21F76C9DC((uint64_t)v24 + 608 * v25 + 440, (uint64_t)v51, &qword_26AD47B78);
          sub_21F76C9DC((uint64_t)v51, (uint64_t)v50, &qword_26AD47B78);
          uint64_t result = (char *)sub_21F7F0F80(v50);
          if (result != 1)
          {
            sub_21F76C9DC((uint64_t)v51, (uint64_t)v45, &qword_26AD47B78);
            sub_21F7F5A88(v45, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
            swift_release();
            sub_21F76C9DC((uint64_t)v51, (uint64_t)v46, &qword_26AD47B78);
LABEL_33:
            sub_21F76C9DC((uint64_t)v46, (uint64_t)v51, &qword_26AD47B78);
            sub_21F7ECAC8(v18);
            uint64_t v30 = swift_bridgeObjectRetain();
            uint64_t v31 = sub_21F7C5D7C(v30);
            swift_bridgeObjectRelease();
            uint64_t v32 = v18;
            uint64_t v33 = *(void *)(v31 + 16);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v34 = sub_21F811DBC(v5);
            swift_bridgeObjectRelease();
            unint64_t v35 = memcpy(v50, v42, sizeof(v50));
            MEMORY[0x270FA5388](v35);
            uint64_t v36 = v41;
            *(&v40 - 8) = v34;
            *(&v40 - 7) = v36;
            *(&v40 - 6) = v33;
            *(&v40 - 5) = (uint64_t)v50;
            *(&v40 - 4) = v22;
            *(&v40 - 3) = (uint64_t)v51;
            uint64_t v38 = v32;
            sub_21F7F4E2C((uint64_t)v50);
            uint64_t v37 = sub_21F7F5614(v34, (uint64_t (*)(void *, uint64_t))sub_21F7F5F54);
            swift_bridgeObjectRelease();
            uint64_t v29 = sub_21F894328(8251, 0xE200000000000000, 0, MEMORY[0x263F8EE78], (uint64_t)v37);
            sub_21F7F5114((uint64_t)v50);
            sub_21F7F3D20((uint64_t)v46, (uint64_t (*)(void))sub_21F7BB724);
            goto LABEL_34;
          }
LABEL_41:
          __break(1u);
          return result;
        }
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      ++v6;
      v7 += 608;
    }
  }
  sub_21FA24C20();
  sub_21FA24C10();
  v50[0] = 0;
  sub_21FA24BE0();
  sub_21FA24C10();
  sub_21FA24C50();
  type metadata accessor for FindClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  unint64_t v27 = self;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v28 = objc_msgSend(v27, sel_bundleForClass_, ObjCClassFromMetadata);
  __int16 v39 = 256;
  uint64_t v38 = 0;
  uint64_t v29 = sub_21FA25340();
  swift_bridgeObjectRelease();
LABEL_34:
  swift_bridgeObjectRelease();
  return (char *)v29;
}

uint64_t sub_21F7F2BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v203 = a6;
  uint64_t v15 = sub_21FA24C30();
  MEMORY[0x270FA5388](v15 - 8);
  id v194 = &v184[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = sub_21FA24B30();
  uint64_t v200 = *(void *)(v17 - 8);
  uint64_t v201 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v197 = &v184[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (*(void *)(a3 + 16) >= 2uLL)
  {
    uint64_t v19 = sub_21F8C2FCC();
    uint64_t v22 = v23;
    uint64_t v21 = v24 & 1;
  }
  uint64_t v204 = v21;
  uint64_t v205 = v19;
  uint64_t v206 = v20;
  uint64_t v25 = sub_21F7ECB98(a2);
  unint64_t v208 = (double *)sub_21F7F5F88(v25);
  uint64_t result = swift_bridgeObjectRelease();
  if (!*(void *)(a2 + 16))
  {
    __break(1u);
    goto LABEL_93;
  }
  sub_21F7BB81C(a2 + 32, (uint64_t)v215);
  sub_21F7BB81C((uint64_t)v215, (uint64_t)v216);
  sub_21F7E108C((uint64_t)v216);
  unint64_t v27 = (unsigned __int8 *)sub_21F7E1098((uint64_t)v216);
  if (*(void *)(a4 + 16) && (unint64_t v28 = sub_21F75BD50(*v27), (v29 & 1) != 0))
  {
    sub_21F7F3EA0(*(void *)(a4 + 56) + 48 * v28, (uint64_t)v223);
  }
  else
  {
    uint64_t v224 = 0;
    memset(v223, 0, sizeof(v223));
    char v225 = -1;
  }
  sub_21F76C978((uint64_t)v223, (uint64_t)v222, &qword_26AD48EB0);
  if (v222[40] == 255)
  {
    uint64_t v213 = 0;
    memset(v212, 0, sizeof(v212));
    char v214 = 3;
    sub_21F76CA84((uint64_t)v222, &qword_26AD48EB0);
  }
  else
  {
    sub_21F7F3E44((uint64_t)v222, (uint64_t)v212);
  }
  sub_21F76CA84((uint64_t)v223, &qword_26AD48EB0);
  uint64_t v30 = *(void *)(v203 + 120);
  uint64_t v202 = v22;
  uint64_t v195 = a5;
  if (a5 <= 1)
  {
    swift_bridgeObjectRetain();
    uint64_t v41 = sub_21F7F4CAC(v30, a4);
    swift_bridgeObjectRelease();
    uint64_t v42 = *(void *)(v41 + 16);
    if (v42)
    {
      unint64_t v43 = 0;
      unint64_t v44 = (uint64_t *)(v41 + 56);
      while (1)
      {
        uint64_t v45 = *v44;
        v44 += 4;
        if (v45) {
          break;
        }
        if (v42 == ++v43) {
          goto LABEL_25;
        }
      }
    }
    else
    {
      unint64_t v43 = 0;
    }
    if (v43 == v42)
    {
LABEL_25:
      swift_bridgeObjectRelease();
      uint64_t v207 = 0;
      uint64_t v198 = 0;
      uint64_t v199 = 0;
      unsigned int v52 = 0;
      if (a7 >= 2) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v207 = sub_21F894530(8236, 0xE200000000000000, 0, MEMORY[0x263F8EE78], v41, v43);
      uint64_t v198 = v94;
      uint64_t v199 = v93;
      char v96 = v95;
      swift_bridgeObjectRelease();
      unsigned int v52 = v96 & 1;
      if (a7 >= 2) {
        goto LABEL_21;
      }
    }
LABEL_26:
    uint64_t v59 = 0;
    uint64_t v61 = 0;
    uint64_t v64 = 0;
    uint64_t v200 = 0;
    goto LABEL_27;
  }
  uint64_t v196 = a7;
  if (*(void *)(v30 + 16) == 1)
  {
    sub_21F7BB81C(v30 + 32, (uint64_t)v220);
    sub_21F7F5A88(v220, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
    uint64_t v31 = sub_21F8C324C();
    uint64_t v33 = v32;
    char v35 = v34 & 1;
    sub_21F7F5A88(v220, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
    uint64_t v36 = v197;
    sub_21FA24B20();
    sub_21FA252B0();
    sub_21F7656A8(v31, v33, v35);
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v200 + 8))(v36, v201);
    uint64_t v207 = sub_21F97CED4();
    uint64_t v198 = v38;
    uint64_t v199 = v37;
    char v40 = v39;
  }
  else
  {
    sub_21FA24C20();
    sub_21FA24C10();
    *(void *)&v223[0] = a5;
    sub_21FA24BE0();
    sub_21FA24C10();
    sub_21FA24C50();
    type metadata accessor for FindClass();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    unint64_t v47 = self;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v48 = objc_msgSend(v47, sel_bundleForClass_, ObjCClassFromMetadata);
    uint64_t v207 = sub_21FA25340();
    uint64_t v198 = v50;
    uint64_t v199 = v49;
    char v40 = v51;
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  unsigned int v52 = v40 & 1;
  uint64_t v22 = v202;
  a7 = v196;
  if (v196 < 2) {
    goto LABEL_26;
  }
LABEL_21:
  sub_21F76C9DC(a8, (uint64_t)v217, &qword_26AD47B78);
  uint64_t result = sub_21F7F0F80(v217);
  if (result != 1)
  {
    sub_21F7BB81C((uint64_t)v217, (uint64_t)&v218);
    uint64_t v53 = sub_21F8C324C();
    uint64_t v55 = v54;
    char v57 = v56 & 1;
    uint64_t v58 = v197;
    sub_21FA24B20();
    sub_21FA252B0();
    sub_21F7656A8(v53, v55, v57);
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v200 + 8))(v58, v201);
    uint64_t v59 = (unsigned char *)sub_21F97CED4();
    uint64_t v61 = v60;
    LOBYTE(v53) = v62;
    uint64_t v200 = v63;
    swift_bridgeObjectRelease();
    uint64_t v64 = v53 & 1;
    uint64_t v22 = v202;
LABEL_27:
    sub_21F76C9DC(v203 + 288, (uint64_t)v219, &qword_26AD47B78);
    sub_21F76C9DC((uint64_t)v219, (uint64_t)v221, &qword_26AD47B78);
    uint64_t result = sub_21F7F0F80(v221);
    if (result == 1)
    {
LABEL_94:
      __break(1u);
      goto LABEL_95;
    }
    uint64_t v203 = v52;
    sub_21F7BB81C((uint64_t)v221, (uint64_t)v222);
    sub_21F7BB81C((uint64_t)v222, (uint64_t)v223);
    BOOL v65 = sub_21F7E108C((uint64_t)v223) == 1;
    uint64_t v196 = v61;
    uint64_t v197 = v59;
    uint64_t v201 = v64;
    if (!v65)
    {
      sub_21F7E1098((uint64_t)v223);
      sub_21F7BB81C((uint64_t)v215, (uint64_t)v211);
      int v68 = sub_21F7E108C((uint64_t)v211);
      uint64_t v69 = sub_21F7E1098((uint64_t)v211);
      if (v68 == 1)
      {
        int v70 = 4;
        uint64_t v71 = a7;
      }
      else
      {
        int v70 = *(unsigned __int8 *)(v69 + 80);
        uint64_t v71 = a7;
        if (v70 == 3) {
          uint64_t v71 = *((void *)v208 + 2);
        }
      }
      uint64_t v89 = *((void *)v208 + 2);
      if (!v89)
      {
        double v91 = 0.0;
        goto LABEL_53;
      }
      if (v89 == 1)
      {
        uint64_t v90 = 0;
        double v91 = 0.0;
      }
      else
      {
        uint64_t v90 = v89 & 0x7FFFFFFFFFFFFFFELL;
        uint64_t v97 = v208 + 5;
        double v91 = 0.0;
        uint64_t v98 = v89 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          double v91 = v91 + *(v97 - 1) + *v97;
          v97 += 2;
          v98 -= 2;
        }
        while (v98);
        if (v89 == v90)
        {
LABEL_53:
          swift_bridgeObjectRelease();
          uint64_t v209 = sub_21F9F8DF4(COERCE__INT64(v91 / (double)v71), 0, 0);
          uint64_t v210 = v102;
          sub_21F7AA27C();
          uint64_t v103 = sub_21FA25350();
          LODWORD(v190) = v105;
          uint64_t v193 = v106;
          if (v70 == 4)
          {
            uint64_t v107 = v205;
            uint64_t v108 = v206;
            uint64_t v109 = v204;
            if (a7 != 1)
            {
              int v110 = 0;
              goto LABEL_59;
            }
          }
          else
          {
            int v110 = 0;
            uint64_t v107 = v205;
            uint64_t v108 = v206;
            uint64_t v109 = v204;
            if (v70 == 3 || a7 != 1)
            {
LABEL_59:
              uint64_t v191 = v104;
              uint64_t v192 = v103;
              LODWORD(v208) = v110;
              if (v22)
              {
                BOOL v111 = v109 != 0;
                uint64_t v112 = v107;
                uint64_t v113 = v108;
                uint64_t v114 = v22;
              }
              else
              {
                sub_21FA24C40();
                uint64_t v112 = sub_21FA25340();
                uint64_t v107 = v205;
                uint64_t v108 = v206;
                uint64_t v113 = v115;
                uint64_t v114 = v116;
                BOOL v111 = v109 & 1;
                LOBYTE(v109) = v204;
              }
              sub_21F7BB3B4(v107, v108, v109, v22);
              sub_21FA24C40();
              uint64_t v117 = sub_21FA25340();
              uint64_t v119 = v118;
              char v121 = v120 & 1;
              uint64_t v122 = v113;
              uint64_t v123 = v112;
              char v124 = sub_21FA25320();
              sub_21F7656A8(v117, v119, v121);
              swift_bridgeObjectRelease();
              uint64_t v187 = (unsigned char *)v123;
              uint64_t v188 = v114;
              uint64_t v186 = v122;
              BOOL v185 = v111;
              if (v124) {
                sub_21F7ED1F0();
              }
              else {
                sub_21F7ED2F0();
              }
              sub_21F76CA40(&qword_26AD47D00);
              uint64_t v125 = swift_allocObject();
              *(_OWORD *)(v125 + 16) = xmmword_21FA28D80;
              type metadata accessor for FindClass();
              uint64_t v126 = swift_getObjCClassFromMetadata();
              uint64_t v127 = self;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              id v128 = objc_msgSend(v127, sel_bundleForClass_, v126);
              uint64_t v129 = sub_21FA25340();
              uint64_t v131 = v130;
              char v133 = v132;
              uint64_t v135 = v134;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              *(void *)(v125 + 32) = v129;
              *(void *)(v125 + 40) = v131;
              *(void *)(v125 + 48) = v133 & 1;
              uint64_t v136 = v207;
              *(void *)(v125 + 56) = v135;
              *(void *)(v125 + 64) = v136;
              uint64_t v138 = v198;
              uint64_t v137 = v199;
              uint64_t v139 = v203;
              *(void *)(v125 + 72) = v199;
              *(void *)(v125 + 80) = v139;
              uint64_t v140 = v196;
              char v141 = v197;
              *(void *)(v125 + 88) = v138;
              *(void *)(v125 + 96) = v141;
              uint64_t v143 = v200;
              uint64_t v142 = v201;
              *(void *)(v125 + 104) = v140;
              *(void *)(v125 + 112) = v142;
              *(void *)(v125 + 120) = v143;
              uint64_t v144 = *(void *)(v125 + 16);
              uint64_t v189 = v125 + 32;
              uint64_t v207 = v136;
              unint64_t v145 = 0;
              if (v144)
              {
                uint64_t v146 = (uint64_t *)(v125 + 56);
                while (1)
                {
                  uint64_t v147 = *v146;
                  v146 += 4;
                  if (v147) {
                    break;
                  }
                  if (v144 == ++v145) {
                    goto LABEL_71;
                  }
                }
              }
              if (v145 == v144)
              {
LABEL_71:
                sub_21F7BB3B4(v136, v137, v139, v138);
                char v148 = v201;
                sub_21F7BB3B4((uint64_t)v141, v140, v201, v143);
                sub_21F7656A8((uint64_t)v187, v186, v185);
                swift_bridgeObjectRelease();
                uint64_t v149 = 0;
                unint64_t v208 = 0;
                id v194 = 0;
                uint64_t v195 = 0;
              }
              else
              {
                sub_21F7BB3B4(v136, v137, v139, v138);
                char v148 = v201;
                sub_21F7BB3B4((uint64_t)v141, v140, v201, v143);
                uint64_t v149 = sub_21F894530(8236, 0xE200000000000000, 0, MEMORY[0x263F8EE78], v125, v145);
                unint64_t v208 = v150;
                id v194 = (unsigned char *)(v151 & 1);
                uint64_t v195 = v152;
                sub_21F7656A8((uint64_t)v187, v186, v185);
                swift_bridgeObjectRelease();
              }
              sub_21F7656A8(v192, v191, v190 & 1);
              swift_bridgeObjectRelease();
              sub_21F7F42EC(v207, v137, v139, v138);
              sub_21F7F42EC(v205, v206, v204, v202);
              sub_21F7F42EC((uint64_t)v141, v140, v148, v143);
              swift_setDeallocating();
              sub_21F76CA40(&qword_26AD47C70);
              goto LABEL_90;
            }
          }
          int v110 = 1;
          goto LABEL_59;
        }
      }
      uint64_t v99 = v89 - v90;
      uint64_t v100 = &v208[v90 + 4];
      do
      {
        double v101 = *v100++;
        double v91 = v91 + v101;
        --v99;
      }
      while (v99);
      goto LABEL_53;
    }
    uint64_t result = sub_21F7E1098((uint64_t)v223);
    uint64_t v66 = v195;
    if (v195 != 1)
    {
      char v67 = 0;
LABEL_36:
      sub_21F7F1580(v208, v67);
      uint64_t v73 = v72;
      uint64_t v75 = v74;
      uint64_t v77 = v76;
      uint64_t v193 = v78 & 1;
      uint64_t v190 = v74;
      uint64_t v191 = v76;
      uint64_t v189 = v72;
      if (v66 == 1)
      {
        unint64_t v79 = *((void *)v208 + 2);
        if (v79 <= 1)
        {
          swift_bridgeObjectRelease();
          uint64_t v186 = 0;
          uint64_t v187 = 0;
          uint64_t v64 = 0;
          uint64_t v192 = 0;
        }
        else
        {
          sub_21FA24C20();
          sub_21FA24C10();
          swift_bridgeObjectRelease();
          v211[0] = v79;
          sub_21FA24BE0();
          sub_21FA24C10();
          sub_21FA24C50();
          type metadata accessor for FindClass();
          uint64_t v80 = swift_getObjCClassFromMetadata();
          uint64_t v81 = self;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          long long v82 = (void *)v81;
          uint64_t v73 = v189;
          uint64_t v75 = v190;
          id v83 = objc_msgSend(v82, sel_bundleForClass_, v80);
          uint64_t v77 = v191;
          uint64_t v84 = sub_21FA25340();
          uint64_t v186 = v85;
          uint64_t v187 = (unsigned char *)v84;
          char v87 = v86;
          uint64_t v192 = v88;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v64 = v87 & 1;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v92 = v200;
        sub_21F7BB3B4((uint64_t)v59, v61, v64, v200);
        uint64_t v186 = v61;
        uint64_t v187 = v59;
        uint64_t v192 = v92;
      }
      sub_21F76CA40(&qword_26AD47D00);
      uint64_t v153 = swift_allocObject();
      *(_OWORD *)(v153 + 16) = xmmword_21FA28D80;
      uint64_t v188 = v153 + 32;
      uint64_t v154 = swift_allocObject();
      *(_OWORD *)(v154 + 16) = xmmword_21FA28820;
      uint64_t v155 = v205;
      uint64_t v156 = v206;
      *(void *)(v154 + 32) = v205;
      *(void *)(v154 + 40) = v156;
      char v157 = v204;
      *(void *)(v154 + 48) = v204;
      *(void *)(v154 + 56) = v22;
      *(void *)(v154 + 64) = v73;
      *(void *)(v154 + 72) = v75;
      *(void *)(v154 + 80) = v193;
      *(void *)(v154 + 88) = v77;
      if (v22)
      {
        unint64_t v158 = 0;
      }
      else
      {
        if (!v77)
        {
          sub_21F7BB3B4(v155, v156, v157, 0);
          sub_21F7652C0(v73, v75, v193);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v159 = 0;
          uint64_t v161 = 0;
          uint64_t v166 = 0;
          uint64_t v165 = 0;
LABEL_80:
          *(void *)(v153 + 32) = v159;
          *(void *)(v153 + 40) = v161;
          *(void *)(v153 + 48) = v166;
          *(void *)(v153 + 56) = v165;
          uint64_t v167 = v198;
          uint64_t v168 = v199;
          *(void *)(v153 + 64) = v207;
          *(void *)(v153 + 72) = v168;
          char v169 = v203;
          *(void *)(v153 + 80) = v203;
          *(void *)(v153 + 88) = v167;
          uint64_t v171 = v186;
          uint64_t v170 = (uint64_t)v187;
          *(void *)(v153 + 96) = v187;
          *(void *)(v153 + 104) = v171;
          uint64_t v172 = v192;
          *(void *)(v153 + 112) = v64;
          *(void *)(v153 + 120) = v172;
          if (v165)
          {
            unint64_t v208 = 0;
          }
          else
          {
            if (*(void *)(v153 + 88))
            {
              uint64_t v173 = 1;
            }
            else
            {
              if (!*(void *)(v153 + 120))
              {
                sub_21F7656A8(v189, v190, v193);
                swift_bridgeObjectRelease();
                uint64_t v149 = 0;
                unint64_t v208 = 0;
                id v194 = 0;
                uint64_t v195 = 0;
                goto LABEL_89;
              }
              uint64_t v173 = 2;
            }
            unint64_t v208 = (double *)v173;
          }
          uint64_t v174 = v207;
          char v175 = v169;
          sub_21F7BB3B4(v207, v168, v169, v167);
          char v176 = v64;
          char v177 = v64;
          uint64_t v178 = v192;
          sub_21F7BB3B4(v170, v171, v176, v192);
          uint64_t v179 = sub_21F894530(8236, 0xE200000000000000, 0, MEMORY[0x263F8EE78], v153, (unint64_t)v208);
          unint64_t v208 = v180;
          id v194 = (unsigned char *)(v181 & 1);
          uint64_t v195 = v182;
          char v183 = v177;
          uint64_t v149 = v179;
          sub_21F7F42EC(v170, v171, v183, v178);
          sub_21F7F42EC(v174, v168, v175, v167);
          sub_21F7656A8(v189, v190, v193);
          swift_bridgeObjectRelease();
LABEL_89:
          sub_21F7F42EC(v205, v206, v204, v202);
          sub_21F7F42EC((uint64_t)v197, v196, v201, v200);
          swift_setDeallocating();
          sub_21F76CA40(&qword_26AD47C70);
LABEL_90:
          swift_arrayDestroy();
          swift_deallocClassInstance();
          sub_21F7F3CCC((uint64_t)v212);
          return v149;
        }
        unint64_t v158 = 1;
      }
      sub_21F7BB3B4(v155, v156, v157, v22);
      sub_21F7652C0(v73, v75, v193);
      swift_bridgeObjectRetain();
      uint64_t v159 = sub_21F894530(32, 0xE100000000000000, 0, MEMORY[0x263F8EE78], v154, v158);
      uint64_t v161 = v160;
      char v163 = v162;
      uint64_t v165 = v164;
      swift_bridgeObjectRelease();
      uint64_t v166 = v163 & 1;
      goto LABEL_80;
    }
    if (*(void *)(a9 + 16))
    {
      char v67 = *(unsigned char *)(a9 + 625);
      goto LABEL_36;
    }
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
LABEL_95:
  __break(1u);
  return result;
}

uint64_t sub_21F7F3C60(void **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_21F9369B8(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  uint64_t result = sub_21F7F4330(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_21F7F3CCC(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F7F3D20(uint64_t a1, uint64_t (*a2)(void))
{
  sub_21F7F3D88(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    a2);
  return a1;
}

uint64_t sub_21F7F3D88(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t (*a20)(void))
{
  if (a13 > 1
    || (result & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || a4 > 1
    || (!((a10 | a9) & 0xF000000000000007 | a8 & 0xFFFFFFFFFFFFFF7CLL)
      ? (BOOL v21 = ((a19 | a18) & 0xF000000000000007 | a17 & 0xFFFFFFFFFFFFFF7CLL) == 0)
      : (BOOL v21 = 0),
        !v21))
  {
    return a20();
  }
  return result;
}

uint64_t sub_21F7F3E44(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_21F7F3EA0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_21F7F3EFC()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_21F7F3F0C()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_21F7F3F44(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 88);
  uint64_t v6 = *(void *)(a1 + 96);
  uint64_t v7 = *(void *)(a1 + 104);
  uint64_t v8 = *(void *)(a1 + 112);
  uint64_t v9 = *(void *)(a1 + 120);
  uint64_t v23 = *(void *)(a1 + 136);
  uint64_t v24 = *(void *)(a1 + 128);
  unint64_t v21 = *(void *)(a1 + 152);
  uint64_t v22 = *(void *)(a1 + 144);
  uint64_t v19 = *(void *)(a1 + 168);
  uint64_t v20 = *(void *)(a1 + 160);
  uint64_t v17 = *(void *)(a1 + 184);
  uint64_t v18 = *(void *)(a1 + 176);
  long long v15 = *(_OWORD *)(a1 + 208);
  long long v16 = *(_OWORD *)(a1 + 192);
  long long v13 = *(_OWORD *)(a1 + 240);
  long long v14 = *(_OWORD *)(a1 + 224);
  long long v12 = *(_OWORD *)(a1 + 256);
  uint64_t v10 = *(void *)(a1 + 272);
  swift_bridgeObjectRetain();
  sub_21F7BB3B4(v2, v3, v4, v5);
  sub_21F7BB3B4(v6, v7, v8, v9);
  sub_21F7F3D88(v24, v23, v22, v21, v20, v19, v18, v17, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v10,
    (uint64_t (*)(void))sub_21F7C6094);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_21F7F4084(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t v7 = *(void *)(a1 + 96);
  uint64_t v8 = *(void *)(a1 + 104);
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v23 = *(void *)(a1 + 128);
  uint64_t v24 = *(void *)(a1 + 120);
  unint64_t v21 = *(void *)(a1 + 144);
  uint64_t v22 = *(void *)(a1 + 136);
  uint64_t v19 = *(void *)(a1 + 160);
  uint64_t v20 = *(void *)(a1 + 152);
  uint64_t v17 = *(void *)(a1 + 176);
  uint64_t v18 = *(void *)(a1 + 168);
  long long v15 = *(_OWORD *)(a1 + 200);
  long long v16 = *(_OWORD *)(a1 + 184);
  long long v13 = *(_OWORD *)(a1 + 232);
  long long v14 = *(_OWORD *)(a1 + 216);
  long long v12 = *(_OWORD *)(a1 + 248);
  uint64_t v10 = *(void *)(a1 + 264);
  swift_bridgeObjectRetain();
  sub_21F7BB3B4(v2, v3, v4, v5);
  sub_21F7BB3B4(v6, v7, v8, v9);
  sub_21F7F3D88(v24, v23, v22, v21, v20, v19, v18, v17, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v10,
    (uint64_t (*)(void))sub_21F7C6094);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_21F7F41B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t v7 = *(void *)(a1 + 96);
  uint64_t v8 = *(void *)(a1 + 104);
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v23 = *(void *)(a1 + 128);
  uint64_t v24 = *(void *)(a1 + 120);
  unint64_t v21 = *(void *)(a1 + 144);
  uint64_t v22 = *(void *)(a1 + 136);
  uint64_t v19 = *(void *)(a1 + 160);
  uint64_t v20 = *(void *)(a1 + 152);
  uint64_t v17 = *(void *)(a1 + 176);
  uint64_t v18 = *(void *)(a1 + 168);
  long long v15 = *(_OWORD *)(a1 + 200);
  long long v16 = *(_OWORD *)(a1 + 184);
  long long v13 = *(_OWORD *)(a1 + 232);
  long long v14 = *(_OWORD *)(a1 + 216);
  long long v12 = *(_OWORD *)(a1 + 248);
  uint64_t v10 = *(void *)(a1 + 264);
  swift_bridgeObjectRelease();
  sub_21F7F42EC(v2, v3, v4, v5);
  sub_21F7F42EC(v6, v7, v8, v9);
  sub_21F7F3D88(v24, v23, v22, v21, v20, v19, v18, v17, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v10,
    (uint64_t (*)(void))sub_21F7BB724);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21F7F42EC(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_21F7656A8(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_21F7F4330(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_21FA26850();
  uint64_t v100 = v3;
  if (result < v3)
  {
    if (v3 >= 0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = v3 + 1;
    }
    if (v3 < -1) {
      goto LABEL_141;
    }
    uint64_t v98 = result;
    uint64_t v104 = v1;
    char v95 = a1;
    if (v3 <= 1)
    {
      uint64_t v7 = MEMORY[0x263F8EE78];
      uint64_t v102 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (v3 != 1)
      {
        unint64_t v11 = *(void *)(MEMORY[0x263F8EE78] + 16);
        uint64_t v10 = MEMORY[0x263F8EE78];
LABEL_107:
        uint64_t result = v10;
        uint64_t v97 = v7;
        if (v11 >= 2)
        {
          uint64_t v86 = *v95;
          do
          {
            unint64_t v87 = v11 - 2;
            if (v11 < 2) {
              goto LABEL_136;
            }
            if (!v86) {
              goto LABEL_150;
            }
            uint64_t v88 = result;
            uint64_t v89 = *(void *)(result + 32 + 16 * v87);
            uint64_t v90 = *(void *)(result + 32 + 16 * (v11 - 1) + 8);
            uint64_t v91 = v104;
            uint64_t result = sub_21F7F4A64((char *)(v86 + 304 * v89), (char *)(v86 + 304 * *(void *)(result + 32 + 16 * (v11 - 1))), v86 + 304 * v90, v102);
            uint64_t v104 = v91;
            if (v91) {
              break;
            }
            if (v90 < v89) {
              goto LABEL_137;
            }
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)sub_21F936940(v88);
              uint64_t v88 = result;
            }
            if (v87 >= *(void *)(v88 + 16)) {
              goto LABEL_138;
            }
            uint64_t v92 = (void *)(v88 + 32 + 16 * v87);
            *uint64_t v92 = v89;
            v92[1] = v90;
            unint64_t v93 = *(void *)(v88 + 16);
            if (v11 > v93) {
              goto LABEL_139;
            }
            memmove((void *)(v88 + 32 + 16 * (v11 - 1)), (const void *)(v88 + 32 + 16 * v11), 16 * (v93 - v11));
            uint64_t result = v88;
            *(void *)(v88 + 16) = v93 - 1;
            unint64_t v11 = v93 - 1;
          }
          while (v93 > 2);
        }
LABEL_97:
        swift_bridgeObjectRelease();
        *(void *)(v97 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      uint64_t v97 = MEMORY[0x263F8EE78];
    }
    else
    {
      uint64_t v6 = v5 >> 1;
      sub_21F76CA40(&qword_26AD46A10);
      uint64_t result = sub_21FA25ED0();
      *(void *)(result + 16) = v6;
      uint64_t v97 = result;
      uint64_t v102 = (char *)(result + 32);
    }
    uint64_t v8 = 0;
    uint64_t v9 = *a1;
    uint64_t v96 = *a1 + 608;
    uint64_t v94 = *a1 - 304;
    uint64_t v10 = MEMORY[0x263F8EE78];
    uint64_t v101 = v9;
    while (1)
    {
      uint64_t v12 = v8++;
      uint64_t v99 = v12;
      if (v8 < v3)
      {
        uint64_t v13 = *(void *)(v9 + 304 * v8);
        uint64_t v14 = *(void *)(v9 + 304 * v12);
        uint64_t v8 = v12 + 2;
        if (v12 + 2 < v3)
        {
          long long v15 = (uint64_t *)(v96 + 304 * v12);
          uint64_t v16 = v13;
          while (1)
          {
            uint64_t v17 = *v15;
            if (v13 < v14 == *v15 >= v16) {
              break;
            }
            v15 += 38;
            ++v8;
            uint64_t v16 = v17;
            if (v3 == v8)
            {
              uint64_t v8 = v3;
              break;
            }
          }
        }
        if (v13 < v14)
        {
          if (v8 < v99) {
            goto LABEL_143;
          }
          if (v99 < v8)
          {
            uint64_t v18 = (char *)(v94 + 304 * v8);
            uint64_t v19 = v8;
            uint64_t v20 = v99;
            unint64_t v21 = (char *)(v9 + 304 * v99);
            do
            {
              if (v20 != --v19)
              {
                if (!v9) {
                  goto LABEL_149;
                }
                memcpy(__dst, v21, sizeof(__dst));
                memmove(v21, v18, 0x130uLL);
                uint64_t result = (uint64_t)memcpy(v18, __dst, 0x130uLL);
              }
              ++v20;
              v18 -= 304;
              v21 += 304;
            }
            while (v20 < v19);
          }
        }
      }
      if (v8 >= v3) {
        break;
      }
      if (__OFSUB__(v8, v99)) {
        goto LABEL_140;
      }
      if (v8 - v99 >= v98) {
        break;
      }
      if (__OFADD__(v99, v98)) {
        goto LABEL_144;
      }
      if (v99 + v98 >= v3) {
        uint64_t v22 = v3;
      }
      else {
        uint64_t v22 = v99 + v98;
      }
      if (v22 < v99)
      {
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
        return result;
      }
      uint64_t v23 = v99;
      if (v8 == v22) {
        goto LABEL_47;
      }
      uint64_t v24 = (void *)(v9 + 304 * v8);
      do
      {
        uint64_t v25 = v99;
        uint64_t v26 = v24;
        do
        {
          if (*v26 >= *(v26 - 38)) {
            break;
          }
          if (!v9) {
            goto LABEL_147;
          }
          memcpy(__dst, v26, sizeof(__dst));
          memcpy(v26, v26 - 38, 0x130uLL);
          uint64_t result = (uint64_t)memcpy(v26 - 38, __dst, 0x130uLL);
          ++v25;
          v26 -= 38;
        }
        while (v8 != v25);
        ++v8;
        v24 += 38;
      }
      while (v8 != v22);
      uint64_t v8 = v22;
      if (v22 < v99) {
        goto LABEL_135;
      }
LABEL_48:
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_21F7E929C(0, *(void *)(v10 + 16) + 1, 1, (char *)v10);
        uint64_t v10 = result;
      }
      unint64_t v28 = *(void *)(v10 + 16);
      unint64_t v27 = *(void *)(v10 + 24);
      unint64_t v11 = v28 + 1;
      if (v28 >= v27 >> 1)
      {
        uint64_t result = (uint64_t)sub_21F7E929C((char *)(v27 > 1), v28 + 1, 1, (char *)v10);
        uint64_t v10 = result;
      }
      *(void *)(v10 + 16) = v11;
      uint64_t v29 = v10 + 32;
      uint64_t v30 = (uint64_t *)(v10 + 32 + 16 * v28);
      *uint64_t v30 = v23;
      v30[1] = v8;
      if (v28)
      {
        uint64_t v9 = v101;
        while (1)
        {
          unint64_t v31 = v11 - 1;
          if (v11 >= 4)
          {
            unint64_t v36 = v29 + 16 * v11;
            uint64_t v37 = *(void *)(v36 - 64);
            uint64_t v38 = *(void *)(v36 - 56);
            BOOL v42 = __OFSUB__(v38, v37);
            uint64_t v39 = v38 - v37;
            if (v42) {
              goto LABEL_124;
            }
            uint64_t v41 = *(void *)(v36 - 48);
            uint64_t v40 = *(void *)(v36 - 40);
            BOOL v42 = __OFSUB__(v40, v41);
            uint64_t v34 = v40 - v41;
            char v35 = v42;
            if (v42) {
              goto LABEL_125;
            }
            unint64_t v43 = v11 - 2;
            unint64_t v44 = (uint64_t *)(v29 + 16 * (v11 - 2));
            uint64_t v46 = *v44;
            uint64_t v45 = v44[1];
            BOOL v42 = __OFSUB__(v45, v46);
            uint64_t v47 = v45 - v46;
            if (v42) {
              goto LABEL_126;
            }
            BOOL v42 = __OFADD__(v34, v47);
            uint64_t v48 = v34 + v47;
            if (v42) {
              goto LABEL_128;
            }
            if (v48 >= v39)
            {
              uint64_t v66 = (uint64_t *)(v29 + 16 * v31);
              uint64_t v68 = *v66;
              uint64_t v67 = v66[1];
              BOOL v42 = __OFSUB__(v67, v68);
              uint64_t v69 = v67 - v68;
              if (v42) {
                goto LABEL_134;
              }
              BOOL v59 = v34 < v69;
              goto LABEL_85;
            }
          }
          else
          {
            if (v11 != 3)
            {
              uint64_t v60 = *(void *)(v10 + 32);
              uint64_t v61 = *(void *)(v10 + 40);
              BOOL v42 = __OFSUB__(v61, v60);
              uint64_t v53 = v61 - v60;
              char v54 = v42;
              goto LABEL_79;
            }
            uint64_t v33 = *(void *)(v10 + 32);
            uint64_t v32 = *(void *)(v10 + 40);
            BOOL v42 = __OFSUB__(v32, v33);
            uint64_t v34 = v32 - v33;
            char v35 = v42;
          }
          if (v35) {
            goto LABEL_127;
          }
          unint64_t v43 = v11 - 2;
          uint64_t v49 = (uint64_t *)(v29 + 16 * (v11 - 2));
          uint64_t v51 = *v49;
          uint64_t v50 = v49[1];
          BOOL v52 = __OFSUB__(v50, v51);
          uint64_t v53 = v50 - v51;
          char v54 = v52;
          if (v52) {
            goto LABEL_129;
          }
          uint64_t v55 = (uint64_t *)(v29 + 16 * v31);
          uint64_t v57 = *v55;
          uint64_t v56 = v55[1];
          BOOL v42 = __OFSUB__(v56, v57);
          uint64_t v58 = v56 - v57;
          if (v42) {
            goto LABEL_131;
          }
          if (__OFADD__(v53, v58)) {
            goto LABEL_133;
          }
          if (v53 + v58 >= v34)
          {
            BOOL v59 = v34 < v58;
LABEL_85:
            if (v59) {
              unint64_t v31 = v43;
            }
            goto LABEL_87;
          }
LABEL_79:
          if (v54) {
            goto LABEL_130;
          }
          char v62 = (uint64_t *)(v29 + 16 * v31);
          uint64_t v64 = *v62;
          uint64_t v63 = v62[1];
          BOOL v42 = __OFSUB__(v63, v64);
          uint64_t v65 = v63 - v64;
          if (v42) {
            goto LABEL_132;
          }
          if (v65 < v53) {
            goto LABEL_15;
          }
LABEL_87:
          unint64_t v70 = v31 - 1;
          if (v31 - 1 >= v11)
          {
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
            goto LABEL_145;
          }
          if (!v9) {
            goto LABEL_148;
          }
          uint64_t v71 = v10;
          uint64_t v72 = v9;
          uint64_t v73 = (uint64_t *)(v29 + 16 * v70);
          uint64_t v74 = *v73;
          uint64_t v75 = (void *)(v29 + 16 * v31);
          uint64_t v76 = v75[1];
          uint64_t v77 = v104;
          uint64_t result = sub_21F7F4A64((char *)(v72 + 304 * *v73), (char *)(v72 + 304 * *v75), v72 + 304 * v76, v102);
          uint64_t v104 = v77;
          if (v77) {
            goto LABEL_97;
          }
          if (v76 < v74) {
            goto LABEL_121;
          }
          if (v31 > *(void *)(v71 + 16)) {
            goto LABEL_122;
          }
          *uint64_t v73 = v74;
          *(void *)(v29 + 16 * v70 + 8) = v76;
          unint64_t v78 = *(void *)(v71 + 16);
          if (v31 >= v78) {
            goto LABEL_123;
          }
          uint64_t v10 = v71;
          unint64_t v11 = v78 - 1;
          uint64_t result = (uint64_t)memmove((void *)(v29 + 16 * v31), v75 + 2, 16 * (v78 - 1 - v31));
          *(void *)(v71 + 16) = v78 - 1;
          BOOL v59 = v78 > 2;
          uint64_t v9 = v101;
          if (!v59) {
            goto LABEL_15;
          }
        }
      }
      unint64_t v11 = 1;
      uint64_t v9 = v101;
LABEL_15:
      uint64_t v3 = v100;
      if (v8 >= v100)
      {
        uint64_t v7 = v97;
        goto LABEL_107;
      }
    }
    uint64_t v23 = v99;
LABEL_47:
    if (v8 < v23) {
      goto LABEL_135;
    }
    goto LABEL_48;
  }
  if (v3 < 0) {
    goto LABEL_142;
  }
  if ((unint64_t)v3 >= 2)
  {
    unint64_t v79 = (void *)*a1;
    uint64_t v80 = -1;
    uint64_t v81 = 1;
    long long v82 = v79;
    do
    {
      uint64_t v83 = v80;
      uint64_t v84 = v82;
      do
      {
        if (v84[38] >= *v84) {
          break;
        }
        if (!v79) {
          goto LABEL_146;
        }
        memcpy(__dst, v84 + 38, sizeof(__dst));
        memcpy(v84 + 38, v84, 0x130uLL);
        uint64_t result = (uint64_t)memcpy(v84, __dst, 0x130uLL);
        v84 -= 38;
      }
      while (!__CFADD__(v83++, 1));
      ++v81;
      v82 += 38;
      --v80;
    }
    while (v81 != v100);
  }
  return result;
}

uint64_t sub_21F7F4A64(char *__dst, char *__src, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = __src - __dst;
  int64_t v9 = (__src - __dst) / 304;
  uint64_t v10 = a3 - (void)__src;
  uint64_t v11 = (uint64_t)(a3 - (void)__src) / 304;
  if (v9 >= v11)
  {
    if (a4 != __src || &__src[304 * v11] <= a4) {
      memmove(a4, __src, 304 * v11);
    }
    uint64_t v12 = &v4[304 * v11];
    if (v7 >= v6 || v10 < 304) {
      goto LABEL_36;
    }
    long long v15 = (char *)(a3 - 304);
    while (1)
    {
      uint64_t v16 = v15 + 304;
      uint64_t v17 = v6 - 304;
      if (*((void *)v12 - 38) >= *((void *)v6 - 38))
      {
        uint64_t v17 = v12 - 304;
        if (v16 != v12)
        {
          v12 -= 304;
          goto LABEL_33;
        }
        BOOL v18 = v15 >= v12;
        v12 -= 304;
        if (v18) {
          goto LABEL_33;
        }
      }
      else
      {
        if (v16 != v6)
        {
          v6 -= 304;
LABEL_33:
          memmove(v15, v17, 0x130uLL);
          goto LABEL_34;
        }
        BOOL v18 = v15 >= v6;
        v6 -= 304;
        if (v18) {
          goto LABEL_33;
        }
      }
LABEL_34:
      if (v6 > v7)
      {
        v15 -= 304;
        if (v12 > v4) {
          continue;
        }
      }
      goto LABEL_36;
    }
  }
  if (a4 != __dst || &__dst[304 * v9] <= a4) {
    memmove(a4, __dst, 304 * v9);
  }
  uint64_t v12 = &v4[304 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 304)
  {
    while (*(void *)v6 < *(void *)v4)
    {
      uint64_t v13 = v6;
      BOOL v14 = v7 == v6;
      v6 += 304;
      if (!v14) {
        goto LABEL_12;
      }
LABEL_13:
      v7 += 304;
      if (v4 >= v12 || (unint64_t)v6 >= a3) {
        goto LABEL_15;
      }
    }
    uint64_t v13 = v4;
    BOOL v14 = v7 == v4;
    v4 += 304;
    if (v14) {
      goto LABEL_13;
    }
LABEL_12:
    memmove(v7, v13, 0x130uLL);
    goto LABEL_13;
  }
LABEL_15:
  uint64_t v6 = v7;
LABEL_36:
  uint64_t v19 = (v12 - v4) / 304;
  if (v6 != v4 || v6 >= &v4[304 * v19]) {
    memmove(v6, v4, 304 * v19);
  }
  return 1;
}

uint64_t sub_21F7F4CAC(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v23 = MEMORY[0x263F8EE78];
    sub_21F7A2BC8(0, v2, 0);
    uint64_t v3 = v23;
    uint64_t v5 = a1 + 32;
    for (int64_t i = v2 - 1; ; --i)
    {
      sub_21F7BB81C(v5, (uint64_t)v20);
      sub_21F7BB81C((uint64_t)v20, (uint64_t)v21);
      nullsub_1(v21, v7);
      sub_21F76C9DC((uint64_t)v21, (uint64_t)v22, &qword_26AD47B78);
      sub_21F7F5A88(v20, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
      uint64_t v8 = sub_21F7F076C((uint64_t)v22, a2);
      uint64_t v10 = v9;
      uint64_t v12 = v11;
      uint64_t v14 = v13;
      sub_21F7F5A88(v20, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
      uint64_t v23 = v3;
      unint64_t v16 = *(void *)(v3 + 16);
      unint64_t v15 = *(void *)(v3 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_21F7A2BC8((void *)(v15 > 1), v16 + 1, 1);
        uint64_t v3 = v23;
      }
      *(void *)(v3 + 16) = v16 + 1;
      uint64_t v17 = (void *)(v3 + 32 * v16);
      v17[4] = v8;
      void v17[5] = v10;
      v17[6] = v12;
      v17[7] = v14;
      if (!i) {
        break;
      }
      v5 += 152;
    }
  }
  return v3;
}

uint64_t sub_21F7F4E14(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 272);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_21F7F4E2C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 96);
  uint64_t v13 = *(void *)(a1 + 88);
  uint64_t v7 = *(void *)(a1 + 104);
  uint64_t v8 = *(void *)(a1 + 112);
  uint64_t v36 = *(void *)(a1 + 136);
  uint64_t v37 = *(void *)(a1 + 128);
  uint64_t v35 = *(void *)(a1 + 144);
  uint64_t v33 = *(void *)(a1 + 160);
  unint64_t v34 = *(void *)(a1 + 152);
  uint64_t v31 = *(void *)(a1 + 176);
  uint64_t v32 = *(void *)(a1 + 168);
  uint64_t v30 = *(void *)(a1 + 184);
  long long v19 = *(_OWORD *)(a1 + 192);
  long long v17 = *(_OWORD *)(a1 + 208);
  long long v14 = *(_OWORD *)(a1 + 240);
  long long v15 = *(_OWORD *)(a1 + 224);
  long long v12 = *(_OWORD *)(a1 + 256);
  uint64_t v9 = *(void *)(a1 + 272);
  uint64_t v51 = *(void *)(a1 + 296);
  uint64_t v52 = *(void *)(a1 + 288);
  unint64_t v49 = *(void *)(a1 + 312);
  uint64_t v50 = *(void *)(a1 + 304);
  uint64_t v47 = *(void *)(a1 + 328);
  uint64_t v48 = *(void *)(a1 + 320);
  uint64_t v45 = *(void *)(a1 + 344);
  uint64_t v46 = *(void *)(a1 + 336);
  long long v27 = *(_OWORD *)(a1 + 352);
  long long v24 = *(_OWORD *)(a1 + 368);
  long long v22 = *(_OWORD *)(a1 + 384);
  long long v20 = *(_OWORD *)(a1 + 400);
  long long v18 = *(_OWORD *)(a1 + 416);
  long long v44 = *(_OWORD *)(a1 + 504);
  long long v39 = *(_OWORD *)(a1 + 520);
  long long v25 = *(_OWORD *)(a1 + 536);
  long long v23 = *(_OWORD *)(a1 + 552);
  long long v21 = *(_OWORD *)(a1 + 568);
  uint64_t v10 = *(void *)(a1 + 432);
  uint64_t v26 = *(void *)(a1 + 440);
  uint64_t v28 = *(void *)(a1 + 448);
  uint64_t v29 = *(void *)(a1 + 456);
  unint64_t v38 = *(void *)(a1 + 464);
  uint64_t v40 = *(void *)(a1 + 472);
  uint64_t v41 = *(void *)(a1 + 480);
  uint64_t v42 = *(void *)(a1 + 488);
  uint64_t v43 = *(void *)(a1 + 496);
  uint64_t v16 = *(void *)(a1 + 584);
  swift_bridgeObjectRetain();
  sub_21F7BB3B4(v3, v2, v4, v5);
  sub_21F7BB3B4(v13, v6, v7, v8);
  swift_bridgeObjectRetain();
  sub_21F7F3D88(v37, v36, v35, v34, v33, v32, v31, v30, v19, *((uint64_t *)&v19 + 1), v17, *((uint64_t *)&v17 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v12, *((uint64_t *)&v12 + 1), v9,
    (uint64_t (*)(void))sub_21F7C6094);
  swift_bridgeObjectRetain();
  sub_21F7F3D88(v52, v51, v50, v49, v48, v47, v46, v45, v27, *((uint64_t *)&v27 + 1), v24, *((uint64_t *)&v24 + 1), v22, *((uint64_t *)&v22 + 1), v20, *((uint64_t *)&v20 + 1), v18, *((uint64_t *)&v18 + 1), v10,
    (uint64_t (*)(void))sub_21F7C6094);
  sub_21F7F3D88(v26, v28, v29, v38, v40, v41, v42, v43, v44, *((uint64_t *)&v44 + 1), v39, *((uint64_t *)&v39 + 1), v25, *((uint64_t *)&v25 + 1), v23, *((uint64_t *)&v23 + 1), v21, *((uint64_t *)&v21 + 1), v16,
    (uint64_t (*)(void))sub_21F7C6094);
  return a1;
}

unint64_t sub_21F7F50C0()
{
  unint64_t result = qword_26AD47B70;
  if (!qword_26AD47B70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD47B70);
  }
  return result;
}

uint64_t sub_21F7F5114(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 96);
  uint64_t v13 = *(void *)(a1 + 88);
  uint64_t v7 = *(void *)(a1 + 104);
  uint64_t v8 = *(void *)(a1 + 112);
  uint64_t v36 = *(void *)(a1 + 136);
  uint64_t v37 = *(void *)(a1 + 128);
  uint64_t v35 = *(void *)(a1 + 144);
  uint64_t v33 = *(void *)(a1 + 160);
  unint64_t v34 = *(void *)(a1 + 152);
  uint64_t v31 = *(void *)(a1 + 176);
  uint64_t v32 = *(void *)(a1 + 168);
  uint64_t v30 = *(void *)(a1 + 184);
  long long v19 = *(_OWORD *)(a1 + 192);
  long long v17 = *(_OWORD *)(a1 + 208);
  long long v14 = *(_OWORD *)(a1 + 240);
  long long v15 = *(_OWORD *)(a1 + 224);
  long long v12 = *(_OWORD *)(a1 + 256);
  uint64_t v9 = *(void *)(a1 + 272);
  uint64_t v51 = *(void *)(a1 + 296);
  uint64_t v52 = *(void *)(a1 + 288);
  unint64_t v49 = *(void *)(a1 + 312);
  uint64_t v50 = *(void *)(a1 + 304);
  uint64_t v47 = *(void *)(a1 + 328);
  uint64_t v48 = *(void *)(a1 + 320);
  uint64_t v45 = *(void *)(a1 + 344);
  uint64_t v46 = *(void *)(a1 + 336);
  long long v27 = *(_OWORD *)(a1 + 352);
  long long v24 = *(_OWORD *)(a1 + 368);
  long long v22 = *(_OWORD *)(a1 + 384);
  long long v20 = *(_OWORD *)(a1 + 400);
  long long v18 = *(_OWORD *)(a1 + 416);
  long long v44 = *(_OWORD *)(a1 + 504);
  long long v39 = *(_OWORD *)(a1 + 520);
  long long v25 = *(_OWORD *)(a1 + 536);
  long long v23 = *(_OWORD *)(a1 + 552);
  long long v21 = *(_OWORD *)(a1 + 568);
  uint64_t v10 = *(void *)(a1 + 432);
  uint64_t v26 = *(void *)(a1 + 440);
  uint64_t v28 = *(void *)(a1 + 448);
  uint64_t v29 = *(void *)(a1 + 456);
  unint64_t v38 = *(void *)(a1 + 464);
  uint64_t v40 = *(void *)(a1 + 472);
  uint64_t v41 = *(void *)(a1 + 480);
  uint64_t v42 = *(void *)(a1 + 488);
  uint64_t v43 = *(void *)(a1 + 496);
  uint64_t v16 = *(void *)(a1 + 584);
  swift_bridgeObjectRelease();
  sub_21F7F42EC(v3, v2, v4, v5);
  sub_21F7F42EC(v13, v6, v7, v8);
  swift_bridgeObjectRelease();
  sub_21F7F3D88(v37, v36, v35, v34, v33, v32, v31, v30, v19, *((uint64_t *)&v19 + 1), v17, *((uint64_t *)&v17 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v12, *((uint64_t *)&v12 + 1), v9,
    (uint64_t (*)(void))sub_21F7BB724);
  swift_bridgeObjectRelease();
  sub_21F7F3D88(v52, v51, v50, v49, v48, v47, v46, v45, v27, *((uint64_t *)&v27 + 1), v24, *((uint64_t *)&v24 + 1), v22, *((uint64_t *)&v22 + 1), v20, *((uint64_t *)&v20 + 1), v18, *((uint64_t *)&v18 + 1), v10,
    (uint64_t (*)(void))sub_21F7BB724);
  sub_21F7F3D88(v26, v28, v29, v38, v40, v41, v42, v43, v44, *((uint64_t *)&v44 + 1), v39, *((uint64_t *)&v39 + 1), v25, *((uint64_t *)&v25 + 1), v23, *((uint64_t *)&v23 + 1), v21, *((uint64_t *)&v21 + 1), v16,
    (uint64_t (*)(void))sub_21F7BB724);
  return a1;
}

uint64_t sub_21F7F53A8(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (!v2) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v30 = MEMORY[0x263F8EE78];
  sub_21F7A24D4(0, v2, 0);
  uint64_t v6 = 0;
  uint64_t result = v30;
  int64_t v25 = v2;
  uint64_t v26 = a1 + 32;
  do
  {
    uint64_t v27 = result;
    uint64_t v28 = v6;
    uint64_t v8 = (uint64_t *)(v26 + 16 * v6);
    uint64_t v9 = *v8;
    int64_t v10 = *(void *)(*v8 + 16);
    if (v10)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_21F7A24D4(0, v10, 0);
      uint64_t v11 = v3;
      uint64_t v12 = v9 + 32;
      do
      {
        sub_21F7BB81C(v12, (uint64_t)v29);
        sub_21F7F5A88(v29, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
        uint64_t v13 = sub_21F7F0F98((uint64_t)v29, a2);
        uint64_t v15 = v14;
        sub_21F7F5A88(v29, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
        unint64_t v17 = *(void *)(v11 + 16);
        unint64_t v16 = *(void *)(v11 + 24);
        if (v17 >= v16 >> 1) {
          sub_21F7A24D4((char *)(v16 > 1), v17 + 1, 1);
        }
        *(void *)(v11 + 16) = v17 + 1;
        uint64_t v18 = v11 + 16 * v17;
        *(void *)(v18 + 32) = v13;
        *(void *)(v18 + 40) = v15;
        v12 += 152;
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease();
      uint64_t v3 = MEMORY[0x263F8EE78];
      int64_t v2 = v25;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_21F76CA40(&qword_26AD468B8);
    sub_21F7F5EF8();
    uint64_t v19 = sub_21FA25C30();
    uint64_t v21 = v20;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = v27;
    uint64_t v30 = v27;
    unint64_t v23 = *(void *)(v27 + 16);
    unint64_t v22 = *(void *)(v27 + 24);
    if (v23 >= v22 >> 1)
    {
      sub_21F7A24D4((char *)(v22 > 1), v23 + 1, 1);
      uint64_t result = v30;
    }
    uint64_t v6 = v28 + 1;
    *(void *)(result + 16) = v23 + 1;
    uint64_t v24 = result + 16 * v23;
    *(void *)(v24 + 32) = v19;
    *(void *)(v24 + 40) = v21;
  }
  while (v28 + 1 != v2);
  return result;
}

char *sub_21F7F5614(uint64_t a1, uint64_t (*a2)(void *, uint64_t))
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v3 = (uint64_t *)(swift_bridgeObjectRetain() + 48);
  uint64_t v4 = (char *)MEMORY[0x263F8EE78];
  do
  {
    uint64_t v29 = v4;
    uint64_t v5 = v3[6];
    uint64_t v26 = v3[5];
    uint64_t v27 = v2;
    uint64_t v7 = v3[3];
    uint64_t v6 = v3[4];
    uint64_t v9 = v3[1];
    uint64_t v8 = v3[2];
    uint64_t v11 = *(v3 - 1);
    uint64_t v10 = *v3;
    uint64_t v12 = *(v3 - 2);
    v28[0] = v12;
    v28[1] = v11;
    v28[2] = v10;
    v28[3] = v9;
    v28[4] = v8;
    v28[5] = v7;
    v28[6] = v6;
    v28[7] = v26;
    sub_21F7E0F38(v12, v11, v10, v9, v8, v7, v6);
    swift_bridgeObjectRetain();
    uint64_t v13 = a2(v28, v5);
    uint64_t v23 = v14;
    uint64_t v24 = v13;
    char v25 = v15;
    uint64_t v17 = v16;
    sub_21F7E0FC0(v12, v11, v10, v9, v8, v7, v6);
    swift_bridgeObjectRelease();
    if (v17)
    {
      uint64_t v4 = v29;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = sub_21F7E9BA0(0, *((void *)v4 + 2) + 1, 1, v4);
      }
      unint64_t v19 = *((void *)v4 + 2);
      unint64_t v18 = *((void *)v4 + 3);
      if (v19 >= v18 >> 1) {
        uint64_t v4 = sub_21F7E9BA0((char *)(v18 > 1), v19 + 1, 1, v4);
      }
      *((void *)v4 + 2) = v19 + 1;
      uint64_t v20 = &v4[32 * v19];
      *((void *)v20 + 4) = v24;
      *((void *)v20 + 5) = v23;
      v20[48] = v25 & 1;
      *((void *)v20 + 7) = v17;
    }
    else
    {
      uint64_t v4 = v29;
    }
    v3 += 9;
    uint64_t v2 = v27 - 1;
  }
  while (v27 != 1);
  swift_bridgeObjectRelease();
  return v4;
}

void *sub_21F7F57E0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v2 = 0;
  uint64_t v3 = a1 + 32;
  unint64_t v30 = v1 - 1;
  uint64_t result = (void *)MEMORY[0x263F8EE78];
  unint64_t v33 = v1;
  uint64_t v31 = v3;
  do
  {
    uint64_t v32 = result;
    if (v2 <= v1) {
      unint64_t v5 = v1;
    }
    else {
      unint64_t v5 = v2;
    }
    unint64_t v35 = v5;
    uint64_t v6 = v3 + 152 * v2;
    unint64_t v7 = v2;
    while (1)
    {
      if (v35 == v7)
      {
        __break(1u);
        return result;
      }
      sub_21F7BB81C(v6, (uint64_t)v44);
      sub_21F7BB81C((uint64_t)v44, (uint64_t)v45);
      int v8 = sub_21F7E108C((uint64_t)v45);
      uint64_t v9 = sub_21F7E1098((uint64_t)v45);
      if (v8 == 1)
      {
        uint64_t v10 = *(void *)(v9 + 16);
        unsigned int v11 = *(unsigned __int8 *)(v9 + 24);
        uint64_t v12 = *(void *)(v9 + 32);
        uint64_t v13 = *(void *)(v9 + 80);
        uint64_t v14 = *(void *)(v9 + 88);
        uint64_t v15 = *(unsigned __int8 *)(v9 + 96);
        uint64_t v16 = *(void *)(v9 + 104);
        uint64_t v34 = *(void *)(v9 + 8);
        sub_21F7652C0(v34, v10, v11);
        swift_bridgeObjectRetain();
        uint64_t v36 = v14;
        uint64_t v37 = v13;
        uint64_t v17 = v13;
        uint64_t v18 = v14;
        uint64_t v19 = v34;
        unint64_t v20 = v15 | 0x8000000000000000;
        char v21 = v15;
        unint64_t v1 = v33;
        sub_21F7652C0(v17, v18, v21);
        uint64_t v22 = v16;
      }
      else
      {
        uint64_t v19 = *(void *)(v9 + 8);
        uint64_t v10 = *(void *)(v9 + 16);
        unsigned int v11 = *(unsigned __int8 *)(v9 + 24);
        uint64_t v23 = *(void *)(v9 + 32);
        sub_21F7652C0(v19, v10, v11);
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        unint64_t v20 = 0;
        uint64_t v22 = 0;
        uint64_t v12 = v23;
      }
      swift_bridgeObjectRetain();
      v46[0] = v19;
      v46[1] = v10;
      void v46[2] = v11;
      v46[3] = v12;
      v46[4] = v37;
      v46[5] = v36;
      v46[6] = v20;
      v46[7] = v22;
      sub_21F7F5A88(v44, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
      char v24 = sub_21F7D7A64((uint64_t)v38, v46);
      sub_21F7E0FC0(v38[0], v38[1], v39, v40, v41, v42, v43);
      if (v24) {
        break;
      }
      ++v7;
      uint64_t result = sub_21F7F5A88(v44, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
      v6 += 152;
      if (v1 == v7) {
        return v32;
      }
    }
    char v25 = v32;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v47 = v32;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_21F7A2BA8(0, v32[2] + 1, 1);
      char v25 = v47;
    }
    uint64_t v3 = v31;
    unint64_t v28 = v25[2];
    unint64_t v27 = v25[3];
    uint64_t v29 = v25;
    if (v28 >= v27 >> 1)
    {
      sub_21F7A2BA8((char *)(v27 > 1), v28 + 1, 1);
      uint64_t v29 = v47;
    }
    unint64_t v2 = v7 + 1;
    v29[2] = v28 + 1;
    sub_21F7BB81C((uint64_t)v44, (uint64_t)&v29[19 * v28 + 4]);
    unint64_t v1 = v33;
    uint64_t result = v29;
  }
  while (v30 != v7);
  return result;
}

void *sub_21F7F5A88(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_21F7F5AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,unint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a35)
  {
    swift_bridgeObjectRelease();
    sub_21F7F42EC(a8, a9, a10, a11);
    sub_21F7F42EC(a12, a13, a14, a15);
    sub_21F7F3D88(a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34,
      (uint64_t (*)(void))sub_21F7BB724);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_21F7F5CB0(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  long long v5 = *(_OWORD *)(a1 + 240);
  long long v6 = *(_OWORD *)(a1 + 256);
  long long v4 = *(_OWORD *)(a1 + 208);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    v4,
    *((void *)&v4 + 1),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    v5,
    *((void *)&v5 + 1),
    v6,
    *((void *)&v6 + 1),
    *(void *)(a1 + 272),
    *(void *)(a1 + 280));
  return a1;
}

uint64_t sub_21F7F5D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,unint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a35)
  {
    swift_bridgeObjectRetain();
    sub_21F7BB3B4(a8, a9, a10, a11);
    sub_21F7BB3B4(a12, a13, a14, a15);
    sub_21F7F3D88(a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34,
      (uint64_t (*)(void))sub_21F7C6094);
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_21F7F5EF8()
{
  unint64_t result = qword_26AD468C0;
  if (!qword_26AD468C0)
  {
    sub_21F779EA4(&qword_26AD468B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD468C0);
  }
  return result;
}

uint64_t sub_21F7F5F54(uint64_t a1, uint64_t a2)
{
  return sub_21F7F2BE8(a1, a2, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8]);
}

uint64_t sub_21F7F5F88(uint64_t result)
{
  unint64_t v1 = 0;
  unint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = result + 32;
  uint64_t v4 = MEMORY[0x263F8EE78];
LABEL_2:
  if (v1 <= v2) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = v1;
  }
  while (1)
  {
    if (v2 == v1) {
      return v4;
    }
    if (v5 == v1) {
      break;
    }
    uint64_t v6 = *(void *)(v3 + 8 * v1++);
    if ((~v6 & 0x7FF0000000000000) != 0)
    {
      unint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        unint64_t result = (uint64_t)sub_21F76CFE0(0, *(void *)(v4 + 16) + 1, 1);
      }
      unint64_t v8 = *(void *)(v4 + 16);
      unint64_t v7 = *(void *)(v4 + 24);
      if (v8 >= v7 >> 1) {
        unint64_t result = (uint64_t)sub_21F76CFE0((char *)(v7 > 1), v8 + 1, 1);
      }
      *(void *)(v4 + 16) = v8 + 1;
      *(void *)(v4 + 8 * v8 + 32) = v6;
      goto LABEL_2;
    }
  }
  __break(1u);
  return result;
}

uint64_t *sub_21F7F6084(uint64_t *a1)
{
  return a1;
}

uint64_t sub_21F7F60B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SgGroup(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21F7F611C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SgGroup(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double sub_21F7F6178(_OWORD *a1)
{
  double result = 0.0;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_21F7F61A4(uint64_t a1)
{
  long long v4 = *(_OWORD *)(a1 + 256);
  long long v5 = *(_OWORD *)(a1 + 272);
  long long v3 = *(_OWORD *)(a1 + 224);
  sub_21F7F6228(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(_OWORD *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(_OWORD *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1));
  return a1;
}

uint64_t sub_21F7F6228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,unint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (a36)
  {
    swift_bridgeObjectRelease();
    sub_21F7F42EC(a9, a10, a11, a12);
    sub_21F7F42EC(a13, a14, a15, a16);
    sub_21F7F3D88(a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35,
      (uint64_t (*)(void))sub_21F7BB724);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

double sub_21F7F6400@<D0>(uint64_t a1@<X8>)
{
  sub_21F744A10();
  sub_21FA24B40();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = v6;
  return result;
}

uint64_t *sub_21F7F645C(uint64_t *result, unsigned __int16 *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[6];
  if (v3 == 1)
  {
    uint64_t v4 = *((unsigned __int8 *)a2 + 24);
    uint64_t v5 = *((void *)a2 + 4);
    uint64_t v6 = *((unsigned __int8 *)a2 + 40);
    uint64_t v7 = *((void *)a2 + 6);
    *uint64_t v2 = *a2;
    *(_OWORD *)(v2 + 1) = *(_OWORD *)(a2 + 4);
    v2[3] = v4;
    v2[4] = v5;
    v2[5] = v6;
    v2[6] = v7;
    return (uint64_t *)swift_retain();
  }
  else
  {
    uint64_t v8 = *result;
    uint64_t v9 = result[1];
    uint64_t v10 = result[2];
    uint64_t v11 = result[3];
    uint64_t v13 = result[4];
    uint64_t v12 = result[5];
    uint64_t v14 = v11 & 1;
    char v15 = *((unsigned char *)a2 + 40);
    uint64_t v16 = *((void *)a2 + 6);
    if (*(unsigned char *)a2 == 3) {
      uint64_t v17 = *result;
    }
    else {
      uint64_t v17 = *(unsigned __int8 *)a2;
    }
    if (*((unsigned char *)a2 + 1) == 9) {
      uint64_t v18 = BYTE1(*result);
    }
    else {
      uint64_t v18 = *((unsigned __int8 *)a2 + 1);
    }
    if (a2[20]) {
      uint64_t v19 = result[4];
    }
    else {
      uint64_t v19 = *((void *)a2 + 4);
    }
    char v20 = v15 & v12;
    if (v16)
    {
      uint64_t v23 = v19;
      char v21 = v15 & v12;
      uint64_t v22 = v17;
      sub_21F7F6C68((uint64_t)a2);
      double result = (uint64_t *)sub_21F775998(v8, v9, v10, v11, v13, v12, v3);
      char v20 = v21;
      uint64_t v17 = v22;
      uint64_t v19 = v23;
      uint64_t v14 = v11 & 1;
      uint64_t v3 = v16;
    }
    *uint64_t v2 = v17 | (v18 << 8);
    v2[1] = v9;
    v2[2] = v10;
    v2[3] = v14;
    v2[4] = v19;
    v2[5] = v20 & 1;
    v2[6] = v3;
  }
  return result;
}

uint64_t sub_21F7F65A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v6 = swift_allocObject();
  long long v7 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v6 + 32) = v7;
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(v2 + 32);
  *(void *)(v6 + 64) = *(void *)(v2 + 48);
  uint64_t v8 = sub_21F76CA40(&qword_26AD45338);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  uint64_t v9 = (uint64_t *)(a2 + *(int *)(sub_21F76CA40(&qword_26AD45328) + 36));
  *uint64_t v9 = KeyPath;
  v9[1] = (uint64_t)sub_21F7F6BCC;
  v9[2] = v6;
  uint64_t v11 = *(void *)(v2 + 48);
  sub_21F7F6BD4((uint64_t)&v11, (uint64_t)v12);
  return sub_21F7F6C3C((uint64_t)v12);
}

uint64_t sub_21F7F66C0(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  return sub_21F7F6CF8((uint64_t)v5, (double *)v7) & 1;
}

uint64_t View.chartLegend<A>(position:alignment:spacing:content:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __n128 v15 = MEMORY[0x270FA5388](a1);
  char v17 = *v16;
  v18(v15);
  uint64_t v19 = sub_21FA25750();
  v22[0] = 3;
  v22[1] = v17;
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  char v25 = a4 & 1;
  uint64_t v26 = a5;
  char v27 = a6 & 1;
  uint64_t v28 = v19;
  MEMORY[0x223C54910](v22, a9, &type metadata for ChartLegendModifier, a11);
  return swift_release();
}

uint64_t View.chartLegend(position:alignment:spacing:)(char *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  char v8 = *a1;
  v10[0] = 3;
  v10[1] = v8;
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  char v13 = a4 & 1;
  uint64_t v14 = a5;
  char v15 = a6 & 1;
  uint64_t v16 = 0;
  return MEMORY[0x223C54910](v10, a7, &type metadata for ChartLegendModifier, a8);
}

uint64_t View.chartLegend(_:)(char a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a1;
  v4[1] = 9;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  char v7 = 1;
  uint64_t v8 = 0;
  char v9 = 1;
  uint64_t v10 = 0;
  return MEMORY[0x223C54910](v4, a2, &type metadata for ChartLegendModifier, a3);
}

uint64_t sub_21F7F68F0()
{
  return swift_getWitnessTable();
}

unint64_t sub_21F7F6958()
{
  unint64_t result = qword_26AD450D0;
  if (!qword_26AD450D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD450D0);
  }
  return result;
}

uint64_t sub_21F7F69AC()
{
  return swift_getWitnessTable();
}

uint64_t destroy for ChartLegendModifier()
{
  return swift_release();
}

__n128 initializeWithTake for ChartLegendConfiguration(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for ChartLegendModifier()
{
  return &type metadata for ChartLegendModifier;
}

uint64_t _s6Charts24ChartLegendConfigurationVwcp_0(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  return a1;
}

uint64_t _s6Charts24ChartLegendConfigurationVwca_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  long long v3 = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t _s6Charts24ChartLegendConfigurationVwta_0(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t sub_21F7F6B70()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21F7F6B94()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t *sub_21F7F6BCC(uint64_t *a1)
{
  return sub_21F7F645C(a1, (unsigned __int16 *)(v1 + 16));
}

uint64_t sub_21F7F6BD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21F76CA40(&qword_26AD45350);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21F7F6C3C(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F7F6C68(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F7F6C94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_21F7F6F4C();

  return MEMORY[0x270EFF9B8](a1, a2, a3, a4, v8);
}

uint64_t sub_21F7F6CF8(uint64_t a1, double *a2)
{
  v13[1] = *MEMORY[0x263EF8340];
  int v4 = *(unsigned __int8 *)a2;
  if (*(unsigned char *)a1 == 3)
  {
    if (v4 != 3) {
      return 0;
    }
  }
  else if (v4 == 3 || (sub_21FA24490() & 1) == 0)
  {
    return 0;
  }
  int v5 = *(unsigned __int8 *)(a1 + 1);
  int v6 = *((unsigned __int8 *)a2 + 1);
  if (v5 == 9)
  {
    if (v6 != 9) {
      return 0;
    }
  }
  else if (v6 == 9 || v5 != v6)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 24))
  {
    if (((_BYTE)a2[3] & 1) == 0) {
      return 0;
    }
  }
  else if (((_BYTE)a2[3] & 1) != 0 || (sub_21FA258B0() & 1) == 0)
  {
    return 0;
  }
  char v8 = *((unsigned char *)a2 + 40);
  if (*(unsigned char *)(a1 + 40))
  {
    if (*((unsigned char *)a2 + 40)) {
      goto LABEL_25;
    }
    return 0;
  }
  if (*(double *)(a1 + 32) != a2[4]) {
    char v8 = 1;
  }
  if (v8) {
    return 0;
  }
LABEL_25:
  sub_21F7F6BD4(a1 + 48, (uint64_t)v11);
  sub_21F7F6BD4((uint64_t)(a2 + 6), (uint64_t)v10);
  sub_21F7F6BD4((uint64_t)v11, (uint64_t)&v12);
  if (v12)
  {
    sub_21F7F6BD4((uint64_t)v10, (uint64_t)v13);
    if (v13[0]) {
      return AGCompareValues();
    }
    return 0;
  }
  sub_21F7F6BD4((uint64_t)v10, (uint64_t)v13);
  return v13[0] == 0;
}

ValueMetadata *type metadata accessor for ChartLegendConfigurationsKey()
{
  return &type metadata for ChartLegendConfigurationsKey;
}

unint64_t sub_21F7F6E88()
{
  unint64_t result = qword_26AD45320;
  if (!qword_26AD45320)
  {
    sub_21F779EA4(&qword_26AD45328);
    sub_21F779E60(&qword_26AD45330, &qword_26AD45338);
    sub_21F779E60(&qword_26AD45340, &qword_26AD45348);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD45320);
  }
  return result;
}

unint64_t sub_21F7F6F4C()
{
  unint64_t result = qword_267EE77B8;
  if (!qword_267EE77B8)
  {
    sub_21F779EA4(&qword_26AD49690);
    sub_21F7F6FC0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE77B8);
  }
  return result;
}

unint64_t sub_21F7F6FC0()
{
  unint64_t result = qword_267EE77C0;
  if (!qword_267EE77C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE77C0);
  }
  return result;
}

void sub_21F7F701C(void *a1, void *i, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, char *a7, char *a8, char **a9)
{
  uint64_t v12 = a1;
  if (*a1 != 512) {
    goto LABEL_16;
  }
  char v9 = a7;
  uint64_t v16 = a3;
  sub_21F7F7204();
  if (!v17)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v18 = v17;
  uint64_t v34 = *(unsigned int *)(v17 + 24);
  sub_21F7F7204();
  if (!v19)
  {
LABEL_27:
    __break(1u);
    return;
  }
  if (v18 == v19)
  {
    if (v16)
    {
      uint64_t v20 = *((unsigned int *)i + v16);
      BOOL v21 = __OFADD__(a4, v20);
      a4 += v20;
      if (v21)
      {
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
    }
    for (int64_t i = &v12[v34]; ; int64_t i = &v12[v24])
    {
      sub_21F7F701C(v12[2], i, 0, a4, a5, a6, v9, a8, a9);
      uint64_t v12 = (void *)v12[3];
      if (*v12 != 512) {
        break;
      }
      sub_21F7F7204();
      if (!v22) {
        goto LABEL_26;
      }
      uint64_t v23 = v22;
      uint64_t v24 = *(unsigned int *)(v22 + 24);
      sub_21F7F7204();
      if (!v25) {
        goto LABEL_27;
      }
      if (v23 != v25) {
        break;
      }
      uint64_t v26 = *((unsigned int *)i + 2);
      BOOL v21 = __OFADD__(a4, v26);
      a4 += v26;
      if (v21) {
        goto LABEL_22;
      }
    }
    a3 = 2;
  }
  else
  {
    a3 = v16;
  }
LABEL_16:
  char v27 = (unsigned int *)i + a3;
  uint64_t v28 = *v27;
  a8 = &a4[v28];
  if (__OFADD__(a4, v28))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v29 = v27[1];
  char v9 = &a4[v29];
  if (__OFADD__(a4, v29))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  a4 = *a9;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a9 = a4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_25:
    a4 = sub_21F7E60DC(0, *((void *)a4 + 2) + 1, 1, a4);
    *a9 = a4;
  }
  unint64_t v32 = *((void *)a4 + 2);
  unint64_t v31 = *((void *)a4 + 3);
  if (v32 >= v31 >> 1) {
    a4 = sub_21F7E60DC((char *)(v31 > 1), v32 + 1, 1, a4);
  }
  *((void *)a4 + 2) = v32 + 1;
  unint64_t v33 = &a4[24 * v32];
  *((void *)v33 + 4) = v12;
  *((void *)v33 + 5) = a8;
  *((void *)v33 + 6) = v9;
  *a9 = a4;
}

ValueMetadata *type metadata accessor for PairTypeDescription()
{
  return &type metadata for PairTypeDescription;
}

uint64_t Chart3D.init(content:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t static Chart3D._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v7 = sub_21F76CA40(&qword_267EE77C8);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Chart3D();
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  uint64_t v17 = a1;
  swift_getWitnessTable();
  sub_21FA25380();
  swift_dynamicCast();
  uint64_t v18 = v13;
  int v19 = v14;
  sub_21F74D6BC();
  sub_21F7F7C28();
  int v11 = sub_21FA24370();
  sub_21F74CA38(v11, (uint64_t)v10);
  sub_21FA25390();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t type metadata accessor for Chart3D()
{
  return sub_21F764F08();
}

uint64_t sub_21F7F7488@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v52 = a5;
  uint64_t v50 = a4;
  uint64_t v54 = a3;
  uint64_t v48 = a2;
  uint64_t v57 = a6;
  uint64_t v7 = type metadata accessor for _Chart3DContentOutputs();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v53 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_21FA24530();
  uint64_t v55 = *(void *)(v9 - 8);
  uint64_t v56 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v51 = (uint64_t)&v40 - v10;
  uint64_t v49 = sub_21FA24EF0();
  uint64_t v47 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  uint64_t v46 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_21FA24540();
  uint64_t v41 = *(void *)(v44 - 8);
  uint64_t v12 = v41;
  MEMORY[0x270FA5388](v44);
  uint64_t v45 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v40 - v15;
  uint64_t v17 = sub_21FA24B80();
  uint64_t v42 = *(void *)(v17 - 8);
  uint64_t v18 = v42;
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for _Chart3DContentInputs();
  uint64_t v22 = (int *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v40 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v26 = MEMORY[0x270FA5388](v25);
  uint64_t v43 = (uint64_t)&v40 - v27;
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16);
  v28(v20, a1, v17, v26);
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v30 = v44;
  v29(v16, v48, v44);
  *(_DWORD *)&v24[v22[9]] = *MEMORY[0x263F288F8];
  ((void (*)(char *, char *, uint64_t))v28)(v24, v20, v17);
  v29(&v24[v22[7]], (uint64_t)v16, v30);
  v29(v45, (uint64_t)v16, v30);
  unint64_t v31 = v46;
  sub_21FA24ED0();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v16, v30);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v20, v17);
  (*(void (**)(char *, char *, uint64_t))(v47 + 32))(&v24[v22[8]], v31, v49);
  uint64_t v32 = v43;
  sub_21F7F8134((uint64_t)v24, v43);
  sub_21F7C53CC();
  sub_21FA24EC0();
  sub_21F7F8198();
  sub_21FA24EC0();
  sub_21F7F81EC();
  sub_21FA24EC0();
  uint64_t v33 = v50;
  uint64_t v34 = v52;
  uint64_t v58 = v50;
  uint64_t v59 = v52;
  type metadata accessor for Chart3D();
  sub_21FA24530();
  uint64_t v35 = v51;
  sub_21F8115A8((void (*)(uint64_t))sub_21F7F8240, v33, v51);
  uint64_t v36 = (uint64_t)v53;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 32))(v35, v32, v33, v34);
  LODWORD(v34) = sub_21F9DBEB4();
  LODWORD(v33) = sub_21F9DC0B4();
  int v37 = sub_21F9DC2B4();
  unint64_t v38 = (_DWORD *)v57;
  *(void *)(v57 + 24) = &type metadata for Chart3DRealityRenderer;
  *unint64_t v38 = v34;
  v38[1] = v33;
  uint64_t v38[2] = v37;
  sub_21F7F8248(v36, (uint64_t (*)(void))type metadata accessor for _Chart3DContentOutputs);
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v35, v56);
  return sub_21F7F8248(v32, (uint64_t (*)(void))type metadata accessor for _Chart3DContentInputs);
}

uint64_t sub_21F7F7A30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_21F7F7488(a1, a2, v3[4], v3[2], v3[3], a3);
}

uint64_t sub_21F7F7A3C(uint64_t a1, uint64_t a2)
{
  v7[2] = type metadata accessor for Chart3D();
  _OWORD v7[3] = a2;
  uint64_t v4 = sub_21FA243A0();
  sub_21F74CD38(a1, (uint64_t)sub_21F7AA57C, (uint64_t)v7, a2, MEMORY[0x263F8E628], v4, MEMORY[0x263F8E658], v5);
  return v7[5];
}

uint64_t static Chart3D._makeViewList(view:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Chart3D();
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F006B8](a1, a2, v4, WitnessTable);
}

uint64_t static Chart3D._viewListCount(inputs:)()
{
  return 1;
}

void Chart3D.body.getter()
{
}

uint64_t sub_21F7F7BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Chart3D._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t sub_21F7F7BB8(uint64_t a1, uint64_t a2)
{
  return static Chart3D._makeViewList(view:inputs:)(a1, a2);
}

void sub_21F7F7BC4()
{
}

uint64_t (*sub_21F7F7BD4())()
{
  return sub_21F7F8068;
}

uint64_t (*sub_21F7F7BF0())()
{
  return sub_21F7F808C;
}

uint64_t (*sub_21F7F7C0C())()
{
  return sub_21F7F80B0;
}

unint64_t sub_21F7F7C28()
{
  unint64_t result = qword_267EE77D0[0];
  if (!qword_267EE77D0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_267EE77D0);
  }
  return result;
}

uint64_t sub_21F7F7C7C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21F7F7CC0(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_21F7F7E1C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x21F7F8034);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t sub_21F7F805C()
{
  return MEMORY[0x263F1BB58];
}

uint64_t sub_21F7F8068()
{
  return sub_21F9FBD90();
}

uint64_t sub_21F7F808C()
{
  return sub_21F8BE3CC();
}

uint64_t sub_21F7F80B0()
{
  return swift_release();
}

uint64_t sub_21F7F8134(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _Chart3DContentInputs();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_21F7F8198()
{
  unint64_t result = qword_267EE7858;
  if (!qword_267EE7858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE7858);
  }
  return result;
}

unint64_t sub_21F7F81EC()
{
  unint64_t result = qword_267EE7860;
  if (!qword_267EE7860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE7860);
  }
  return result;
}

uint64_t sub_21F7F8240(uint64_t a1)
{
  return sub_21F7F7A3C(a1, *(void *)(v1 + 16));
}

uint64_t sub_21F7F8248(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t ChartBinRange.lowerBound.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t ChartBinRange.upperBound.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t ChartBinRange.contains(_:)(char *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v53 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v57 = (char *)&v49 - v9;
  MEMORY[0x270FA5388](v10);
  unsigned int v12 = (char *)&v49 - v11;
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v52 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v56 = (char *)&v49 - v19;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v49 - v21;
  uint64_t v54 = *(void *)(v23 + 24);
  char v24 = sub_21FA25C70();
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  uint64_t v58 = v22;
  uint64_t v55 = v25;
  v25(v22, a1, v14);
  __n128 v26 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v27 = v3;
  uint64_t v28 = a2;
  v26(v12, v27, a2);
  if (v24)
  {
    uint64_t v50 = v15;
    uint64_t v51 = v6;
    uint64_t v29 = v58;
    char v30 = sub_21FA25C50();
    v26(v57, (uint64_t)v12, v28);
    unint64_t v31 = v56;
    v55(v56, v29, v14);
    uint64_t v32 = v12;
    if (v30)
    {
      uint64_t v33 = *(void (**)(char *, uint64_t))(v50 + 8);
      uint64_t v34 = v32;
      v33(v31, v14);
      uint64_t v35 = *(void (**)(char *, uint64_t))(v51 + 8);
      v35(v57, v28);
      v35(v34, v28);
      v33(v58, v14);
      char v36 = 1;
    }
    else
    {
      uint64_t v49 = v12;
      int v37 = v57;
      int v38 = v57[*(int *)(v28 + 40)];
      uint64_t v39 = v52;
      v55(v52, v31, v14);
      uint64_t v40 = v53;
      v26(v53, (uint64_t)v37, v28);
      uint64_t v41 = v39;
      BOOL v42 = v38 == 1;
      uint64_t v44 = v50;
      uint64_t v43 = v51;
      uint64_t v45 = v58;
      if (v42) {
        char v36 = sub_21FA25CE0();
      }
      else {
        char v36 = 0;
      }
      uint64_t v46 = *(void (**)(char *, uint64_t))(v43 + 8);
      v46(v40, v28);
      uint64_t v47 = *(void (**)(char *, uint64_t))(v44 + 8);
      v47(v41, v14);
      v47(v56, v14);
      v46(v37, v28);
      v46(v49, v28);
      v47(v45, v14);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, a2);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v58, v14);
    char v36 = 0;
  }
  return v36 & 1;
}

uint64_t ChartBinRange.relative<A>(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v70 = a3;
  uint64_t v71 = a4;
  uint64_t v68 = a5;
  uint64_t v69 = a1;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = sub_21FA26210();
  uint64_t v63 = *(void *)(v9 - 8);
  uint64_t v64 = (char *)v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v61 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  char v62 = (char *)&v57 - v12;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v66 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v67 = (char *)&v57 - v15;
  uint64_t v16 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v57 - v21;
  uint64_t v23 = sub_21FA25CC0();
  uint64_t v59 = *(void *)(v23 - 8);
  uint64_t v60 = (char *)v23;
  MEMORY[0x270FA5388](v23);
  uint64_t v57 = (char *)&v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v26 = MEMORY[0x270FA5388](v25);
  uint64_t v58 = (char *)&v57 - v27;
  int v28 = *(unsigned __int8 *)(v6 + *(int *)(a2 + 40));
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16);
  v29(v22, v6, v8, v26);
  ((void (*)(char *, uint64_t, uint64_t))v29)(v19, v6 + *(int *)(a2 + 36), v8);
  uint64_t result = sub_21FA25C70();
  uint64_t v65 = v16;
  if (v28 == 1)
  {
    if (result)
    {
      uint64_t v31 = v16;
      uint64_t v33 = v66;
      uint64_t v32 = v67;
      uint64_t v34 = TupleTypeMetadata2;
      uint64_t v64 = &v67[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
      v35(v67, v22, v8);
      char v36 = v64;
      v35(v64, v19, v8);
      int v37 = &v33[*(int *)(v34 + 48)];
      ((void (*)(char *, char *, uint64_t))v29)(v33, v32, v8);
      ((void (*)(char *, char *, uint64_t))v29)(v37, v36, v8);
      int v38 = v57;
      v35(v57, v33, v8);
      uint64_t v39 = *(void (**)(char *, uint64_t))(v65 + 8);
      v39(v37, v8);
      uint64_t v40 = &v33[*(int *)(TupleTypeMetadata2 + 48)];
      v35(v33, v32, v8);
      v35(v40, v36, v8);
      uint64_t v41 = v60;
      v35(&v38[*((int *)v60 + 9)], v40, v8);
      v39(v33, v8);
      uint64_t v43 = v58;
      uint64_t v42 = v59;
      (*(void (**)(char *, char *, char *))(v59 + 32))(v58, v38, v41);
      sub_21FA25CB0();
      return (*(uint64_t (**)(char *, char *))(v42 + 8))(v43, v41);
    }
    __break(1u);
    goto LABEL_8;
  }
  if ((result & 1) == 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  uint64_t v44 = v16;
  uint64_t v46 = v66;
  uint64_t v45 = v67;
  uint64_t v47 = TupleTypeMetadata2;
  uint64_t v60 = &v67[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
  v48(v67, v22, v8);
  uint64_t v49 = v60;
  v48(v60, v19, v8);
  uint64_t v50 = &v46[*(int *)(v47 + 48)];
  ((void (*)(char *, char *, uint64_t))v29)(v46, v45, v8);
  ((void (*)(char *, char *, uint64_t))v29)(v50, v49, v8);
  uint64_t v51 = v61;
  v48(v61, v46, v8);
  uint64_t v52 = *(void (**)(char *, uint64_t))(v65 + 8);
  v52(v50, v8);
  uint64_t v53 = &v46[*(int *)(TupleTypeMetadata2 + 48)];
  v48(v46, v45, v8);
  v48(v53, v60, v8);
  uint64_t v54 = v64;
  v48(&v51[*((int *)v64 + 9)], v53, v8);
  v52(v46, v8);
  uint64_t v56 = v62;
  uint64_t v55 = v63;
  (*(void (**)(char *, char *, char *))(v63 + 32))(v62, v51, v54);
  sub_21FA26200();
  return (*(uint64_t (**)(char *, char *))(v55 + 8))(v56, v54);
}

uint64_t sub_21F7F8D70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32);
  v9(a5, a1, a4);
  uint64_t v10 = type metadata accessor for ChartBinRange();
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9)(a5 + *(int *)(v10 + 36), a2, a4);
  *(unsigned char *)(a5 + *(int *)(v10 + 40)) = a3;
  return result;
}

uint64_t sub_21F7F8E24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return ChartBinRange.relative<A>(to:)(a1, a4, a2, a3, a5);
}

uint64_t static PlottableValue.value<>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  uint64_t v53 = a4;
  uint64_t v54 = a6;
  uint64_t v55 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v45 = (char *)&v42 - v12;
  uint64_t v13 = *(void **)(a3 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v42 - v18;
  uint64_t v20 = sub_21FA26210();
  uint64_t v51 = *(void *)(v20 - 8);
  uint64_t v52 = v20;
  MEMORY[0x270FA5388](v20);
  uint64_t v49 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v50 = (char *)&v42 - v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v24 = sub_21FA25340();
  uint64_t v55 = v25;
  int v47 = v26;
  uint64_t v48 = v27;
  int v28 = (void (*)(char *, uint64_t, uint64_t))v13[2];
  v28(v19, a2, a3);
  uint64_t v29 = type metadata accessor for ChartBinRange();
  v28(v16, a2 + *(int *)(v29 + 36), a3);
  uint64_t v46 = v16;
  uint64_t result = sub_21FA25C70();
  if (result)
  {
    uint64_t v43 = v24;
    uint64_t v44 = a5;
    uint64_t v31 = v45;
    uint64_t v32 = TupleTypeMetadata2;
    uint64_t v33 = v19;
    uint64_t v34 = &v45[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v35 = (void (*)(char *, char *, uint64_t))v13[4];
    v35(v45, v33, a3);
    uint64_t v42 = v34;
    v35(v34, v46, a3);
    char v36 = &v10[*(int *)(v32 + 48)];
    v28(v10, (uint64_t)v31, a3);
    v28(v36, (uint64_t)v34, a3);
    int v37 = v49;
    v35(v49, v10, a3);
    int v38 = (void (*)(char *, uint64_t))v13[1];
    v38(v36, a3);
    uint64_t v39 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
    v35(v10, v31, a3);
    v35(v39, v42, a3);
    uint64_t v40 = v52;
    v35(&v37[*(int *)(v52 + 36)], v39, a3);
    v38(v10, a3);
    uint64_t v41 = (uint64_t)v50;
    (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v50, v37, v40);
    return sub_21F9599E8(v43, v55, v47 & 1, v48, v41, a3, v54);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for ChartBinRange()
{
  return sub_21F764F08();
}

uint64_t static PlottableValue.value<A>(_:_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v59 = a5;
  uint64_t v60 = a7;
  uint64_t v61 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v54 = (char *)&v48 - v14;
  uint64_t v15 = *(void **)(a3 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v48 - v20;
  uint64_t v22 = sub_21FA26210();
  uint64_t v57 = *(void *)(v22 - 8);
  uint64_t v58 = v22;
  MEMORY[0x270FA5388](v22);
  uint64_t v55 = (char *)&v48 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v56 = (char *)&v48 - v25;
  __n128 v27 = MEMORY[0x270FA5388](v26);
  (*(void (**)(char *, char *, uint64_t, __n128))(v29 + 16))((char *)&v48 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0), v61, a4, v27);
  uint64_t v30 = sub_21FA25350();
  uint64_t v52 = v32;
  uint64_t v53 = v31;
  int v51 = v33;
  uint64_t v34 = (void (*)(char *, uint64_t, uint64_t))v15[2];
  v34(v21, a2, a3);
  uint64_t v35 = type metadata accessor for ChartBinRange();
  v34(v18, a2 + *(int *)(v35 + 36), a3);
  uint64_t v61 = v18;
  uint64_t result = sub_21FA25C70();
  if (result)
  {
    uint64_t v49 = v30;
    uint64_t v50 = a6;
    int v37 = v54;
    uint64_t v38 = TupleTypeMetadata2;
    uint64_t v39 = v21;
    uint64_t v40 = &v54[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v41 = (void (*)(char *, char *, uint64_t))v15[4];
    v41(v54, v39, a3);
    uint64_t v48 = v40;
    v41(v40, v61, a3);
    uint64_t v42 = &v12[*(int *)(v38 + 48)];
    v34(v12, (uint64_t)v37, a3);
    v34(v42, (uint64_t)v40, a3);
    uint64_t v43 = v55;
    v41(v55, v12, a3);
    uint64_t v44 = (void (*)(char *, uint64_t))v15[1];
    v44(v42, a3);
    uint64_t v45 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
    v41(v12, v37, a3);
    v41(v45, v48, a3);
    uint64_t v46 = v58;
    v41(&v43[*(int *)(v58 + 36)], v45, a3);
    v44(v12, a3);
    uint64_t v47 = (uint64_t)v56;
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v56, v43, v46);
    return sub_21F9599E8(v49, v53, v51 & 1, v52, v47, a3, v60);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static PlottableValue.value<>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v56 = a9;
  uint64_t v57 = a7;
  uint64_t v60 = a2;
  uint64_t v61 = a4;
  LODWORD(v58) = a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  int v51 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v49 = (char *)&v45 - v15;
  uint64_t v16 = *(void **)(a6 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v45 - v21;
  uint64_t v23 = sub_21FA26210();
  uint64_t v55 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v53 = (char *)&v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v26 = MEMORY[0x270FA5388](v25);
  uint64_t v54 = (char *)&v45 - v27;
  uint64_t v28 = (void (*)(char *, uint64_t, uint64_t, __n128))v16[2];
  v28(v22, a5, a6, v26);
  uint64_t v29 = a5 + *(int *)(type metadata accessor for ChartBinRange() + 36);
  uint64_t v50 = (void (*)(char *, char *, uint64_t))v28;
  ((void (*)(char *, uint64_t, uint64_t))v28)(v19, v29, a6);
  int v30 = v58 & 1;
  uint64_t v58 = a1;
  int v48 = v30;
  sub_21F7652C0(a1, v60, v30);
  swift_bridgeObjectRetain();
  uint64_t v52 = v19;
  uint64_t result = sub_21FA25C70();
  if (result)
  {
    uint64_t v32 = v49;
    int v33 = v51;
    uint64_t v46 = v23;
    uint64_t v47 = a8;
    uint64_t v34 = TupleTypeMetadata2;
    uint64_t v35 = &v49[*(int *)(TupleTypeMetadata2 + 48)];
    char v36 = (void (*)(char *, char *, uint64_t))v16[4];
    v36(v49, v22, a6);
    int v37 = v35;
    v36(v35, v52, a6);
    uint64_t v38 = &v33[*(int *)(v34 + 48)];
    uint64_t v39 = v50;
    v50(v33, v32, a6);
    v39(v38, v37, a6);
    uint64_t v40 = v53;
    v36(v53, v33, a6);
    uint64_t v41 = (void (*)(char *, uint64_t))v16[1];
    v41(v38, a6);
    uint64_t v42 = &v33[*(int *)(TupleTypeMetadata2 + 48)];
    v36(v33, v32, a6);
    v36(v42, v37, a6);
    uint64_t v43 = v46;
    v36(&v40[*(int *)(v46 + 36)], v42, a6);
    v41(v33, a6);
    uint64_t v44 = (uint64_t)v54;
    (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v54, v40, v43);
    return sub_21F9599E8(v58, v60, v48, v61, v44, a6, v56);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_21F7F9B58(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

uint64_t sub_21F7F9B60()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21F7F9BFC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = ~v8;
  uint64_t v10 = v7 + v8;
  if (v8 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || v7 + ((v7 + v8) & (unint64_t)~v8) + 1 > 0x18)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v13 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    uint64_t v14 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v14(a1, a2, v5);
    unint64_t v15 = ((unint64_t)a2 + v10) & v9;
    v14((uint64_t *)(((unint64_t)v4 + v10) & v9), (uint64_t *)v15, v5);
    *(unsigned char *)((((unint64_t)v4 + v10) & v9) + v7) = *(unsigned char *)(v15 + v7);
  }
  return v4;
}

uint64_t sub_21F7F9D24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v3 - 8) + 8;
  uint64_t v7 = *(uint64_t (**)(unint64_t, uint64_t))v6;
  (*(void (**)(uint64_t, uint64_t))v6)(a1, v3);
  unint64_t v4 = (*(void *)(v6 + 56) + a1 + *(unsigned __int8 *)(v6 + 72)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 72);

  return v7(v4, v3);
}

uint64_t sub_21F7F9DC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = (v8 + v9 + a1) & ~v9;
  uint64_t v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  *(unsigned char *)(v10 + v8) = *(unsigned char *)(v11 + v8);
  return a1;
}

uint64_t sub_21F7F9E6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = (v8 + v9 + a1) & ~v9;
  uint64_t v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  *(unsigned char *)(v10 + v8) = *(unsigned char *)(v11 + v8);
  return a1;
}

uint64_t sub_21F7F9F18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = (v8 + v9 + a1) & ~v9;
  uint64_t v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  *(unsigned char *)(v10 + v8) = *(unsigned char *)(v11 + v8);
  return a1;
}

uint64_t sub_21F7F9FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = (v8 + v9 + a1) & ~v9;
  uint64_t v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  *(unsigned char *)(v10 + v8) = *(unsigned char *)(v11 + v8);
  return a1;
}

uint64_t sub_21F7FA070(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = v6 + v8;
  int v10 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_22;
  }
  uint64_t v11 = v6 + (v9 & ~v8) + 1;
  char v12 = 8 * v11;
  if (v11 > 3) {
    goto LABEL_7;
  }
  unsigned int v14 = ((v10 + ~(-1 << v12)) >> v12) + 1;
  if (HIWORD(v14))
  {
    int v13 = *(_DWORD *)((char *)a1 + v11);
    if (v13) {
      goto LABEL_14;
    }
  }
  else
  {
    if (v14 <= 0xFF)
    {
      if (v14 < 2) {
        goto LABEL_22;
      }
LABEL_7:
      int v13 = *((unsigned __int8 *)a1 + v11);
      if (!*((unsigned char *)a1 + v11)) {
        goto LABEL_22;
      }
LABEL_14:
      int v15 = (v13 - 1) << v12;
      if (v11 > 3) {
        int v15 = 0;
      }
      if (v11)
      {
        if (v11 > 3) {
          LODWORD(v11) = 4;
        }
        switch((int)v11)
        {
          case 2:
            LODWORD(v11) = *a1;
            break;
          case 3:
            LODWORD(v11) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v11) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v11) = *(unsigned __int8 *)a1;
            break;
        }
      }
      return v7 + (v11 | v15) + 1;
    }
    int v13 = *(unsigned __int16 *)((char *)a1 + v11);
    if (*(unsigned __int16 *)((char *)a1 + v11)) {
      goto LABEL_14;
    }
  }
LABEL_22:
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v17 = *(unsigned __int8 *)((((unint64_t)a1 + v9) & ~v8) + v6);
  if (v17 < 2) {
    return 0;
  }
  return ((v17 + 2147483646) & 0x7FFFFFFF) + 1;
}

void sub_21F7FA21C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  size_t v11 = v9 + ((v9 + v10) & ~v10) + 1;
  BOOL v12 = a3 >= v8;
  unsigned int v13 = a3 - v8;
  if (v13 != 0 && v12)
  {
    if (v11 <= 3)
    {
      unsigned int v17 = ((v13 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
      if (HIWORD(v17))
      {
        int v14 = 4;
      }
      else if (v17 >= 0x100)
      {
        int v14 = 2;
      }
      else
      {
        int v14 = v17 > 1;
      }
    }
    else
    {
      int v14 = 1;
    }
  }
  else
  {
    int v14 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v15 = ~v8 + a2;
    if (v11 < 4)
    {
      int v16 = (v15 >> (8 * v11)) + 1;
      if (v9 + ((v9 + v10) & ~v10) != -1)
      {
        int v18 = v15 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v9 + ((v9 + v10) & ~v10) + 1);
      *(_DWORD *)a1 = v15;
      int v16 = 1;
    }
    switch(v14)
    {
      case 1:
        a1[v11] = v16;
        return;
      case 2:
        *(_WORD *)&a1[v11] = v16;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v11] = v16;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x21F7FA478);
    case 4:
      *(_DWORD *)&a1[v11] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 < 0xFE)
        {
          *(unsigned char *)(((unint64_t)&a1[v9 + v10] & ~v10) + v9) = a2 + 1;
        }
        else
        {
          uint64_t v19 = *(void (**)(void))(v6 + 56);
          v19();
        }
      }
      return;
  }
}

uint64_t static Chart3DContent._chart3DContentCount(inputs:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return static Chart3DContent._chart3DContentCount(inputs:)(a1, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t sub_21F7FA528@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static Chart3DContent._makeChart3DContent(content:inputs:)(a1, a2, a3);
}

uint64_t static Chart3DContent._makeChart3DContent(content:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v28 = a1;
  uint64_t v23 = a3;
  uint64_t v3 = sub_21F76CA40(qword_267EE7868);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v26 = (uint64_t)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  unsigned int v7 = (char *)&v23 - v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_21FA24530();
  uint64_t v25 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  size_t v11 = (char *)&v23 - v10;
  uint64_t v12 = type metadata accessor for _Chart3DContentInputs();
  MEMORY[0x270FA5388](v12 - 8);
  int v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_21FA24FE0();
  uint64_t v15 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  unsigned int v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA24FF0();
  sub_21F7FA948(v27, (uint64_t)v14);
  uint64_t result = AGTypeGetKind();
  if ((result - 6) < 0xFFFFFFFC)
  {
    __break(1u);
  }
  else
  {
    uint64_t v27 = v9;
    type metadata accessor for Chart3DContentBodyAccessor();
    swift_getWitnessTable();
    sub_21FA24C70();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(char *, char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v11, v14, AssociatedTypeWitness, AssociatedConformanceWitness);
    uint64_t v20 = v26;
    sub_21F7FA9C4((uint64_t)v7, v26);
    uint64_t v21 = sub_21FA25050();
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
    {
      sub_21F7FAA2C((uint64_t)v7);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v27);
      sub_21F7FAA8C((uint64_t)v14);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v24);
      return sub_21F7FAA2C(v20);
    }
    else
    {
      sub_21FA25040();
      sub_21F7FAA2C((uint64_t)v7);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v27);
      sub_21F7FAA8C((uint64_t)v14);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v24);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    }
  }
  return result;
}

uint64_t sub_21F7FA948(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _Chart3DContentInputs();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for Chart3DContentBodyAccessor()
{
  return sub_21F764F08();
}

uint64_t sub_21F7FA9C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21F76CA40(qword_267EE7868);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21F7FAA2C(uint64_t a1)
{
  uint64_t v2 = sub_21F76CA40(qword_267EE7868);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21F7FAA8C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for _Chart3DContentInputs();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t dispatch thunk of Chart3DContent.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static Chart3DContent._makeChart3DContent(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t sub_21F7FAB10(uint64_t result, char a2)
{
  if (a2)
  {
    MEMORY[0x270FA5388](result);
    type metadata accessor for Chart3DContentBodyAccessor();
    swift_getWitnessTable();
    return sub_21FA24C60();
  }
  return result;
}

uint64_t sub_21F7FABC4(uint64_t result, char a2)
{
  return sub_21F7FAB10(result, a2);
}

uint64_t sub_21F7FABD0()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 24) + 24))(*(void *)(v0 + 16));
}

uint64_t sub_21F7FAC08(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    sub_21F76CFE0(0, v5, 0);
    uint64_t v6 = v16;
    for (int64_t i = (uint64_t *)(a3 + 32); ; ++i)
    {
      uint64_t v14 = *i;
      a1(&v15, &v14);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v10 = v15;
      uint64_t v16 = v6;
      unint64_t v12 = *(void *)(v6 + 16);
      unint64_t v11 = *(void *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_21F76CFE0((char *)(v11 > 1), v12 + 1, 1);
        uint64_t v6 = v16;
      }
      *(void *)(v6 + 16) = v12 + 1;
      *(void *)(v6 + 8 * v12 + 32) = v10;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_21F7FAD24(void (*a1)(void *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v18 = MEMORY[0x263F8EE78];
    sub_21F7A24D4(0, v5, 0);
    uint64_t v6 = v18;
    for (int64_t i = (uint64_t *)(a3 + 32); ; ++i)
    {
      uint64_t v16 = *i;
      a1(v17, &v16);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v10 = v17[0];
      uint64_t v9 = v17[1];
      uint64_t v18 = v6;
      unint64_t v12 = *(void *)(v6 + 16);
      unint64_t v11 = *(void *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_21F7A24D4((char *)(v11 > 1), v12 + 1, 1);
        uint64_t v6 = v18;
      }
      *(void *)(v6 + 16) = v12 + 1;
      uint64_t v13 = v6 + 16 * v12;
      *(void *)(v13 + 32) = v10;
      *(void *)(v13 + 40) = v9;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_21F7FAE34(void (*a1)(long long *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v18 = MEMORY[0x263F8EE78];
    sub_21F7A2B08(0, v5, 0);
    uint64_t v6 = v18;
    uint64_t v9 = *(void *)(type metadata accessor for CalendarBinningUnit(0) - 8);
    uint64_t v10 = a3 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    while (1)
    {
      a1(&v17, v10);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      long long v12 = v17;
      uint64_t v18 = v6;
      unint64_t v14 = *(void *)(v6 + 16);
      unint64_t v13 = *(void *)(v6 + 24);
      if (v14 >= v13 >> 1)
      {
        long long v16 = v17;
        sub_21F7A2B08((char *)(v13 > 1), v14 + 1, 1);
        long long v12 = v16;
        uint64_t v6 = v18;
      }
      *(void *)(v6 + 16) = v14 + 1;
      *(_OWORD *)(v6 + 16 * v14 + 32) = v12;
      v10 += v11;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_21F7FAF9C(void (*a1)(long long *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
    sub_21F7A2B08(0, v5, 0);
    uint64_t v6 = v17;
    for (int64_t i = (uint64_t *)(a3 + 32); ; ++i)
    {
      uint64_t v15 = *i;
      a1(&v16, &v15);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      long long v10 = v16;
      uint64_t v17 = v6;
      unint64_t v12 = *(void *)(v6 + 16);
      unint64_t v11 = *(void *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        long long v14 = v16;
        sub_21F7A2B08((char *)(v11 > 1), v12 + 1, 1);
        long long v10 = v14;
        uint64_t v6 = v17;
      }
      *(void *)(v6 + 16) = v12 + 1;
      *(_OWORD *)(v6 + 16 * v12 + 32) = v10;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_21F7FB0B8(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v18 = sub_21FA23F20();
  uint64_t v6 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  unsigned int v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = MEMORY[0x263F8EE78];
  if (v9)
  {
    uint64_t v21 = MEMORY[0x263F8EE78];
    sub_21F7A2D70(0, v9, 0);
    uint64_t v10 = v21;
    uint64_t v11 = *(void *)(sub_21FA241F0() - 8);
    uint64_t v12 = a3 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v17 = *(void *)(v11 + 72);
    v16[1] = v6 + 32;
    while (1)
    {
      v19(v12);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v21 = v10;
      unint64_t v14 = *(void *)(v10 + 16);
      unint64_t v13 = *(void *)(v10 + 24);
      if (v14 >= v13 >> 1)
      {
        sub_21F7A2D70(v13 > 1, v14 + 1, 1);
        uint64_t v10 = v21;
      }
      *(void *)(v10 + 16) = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v14, v8, v18);
      v12 += v17;
      if (!--v9) {
        return v10;
      }
    }
    swift_release();
  }
  return v10;
}

uint64_t sub_21F7FB2C4(void (*a1)(long long *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v28 = MEMORY[0x263F8EE78];
    sub_21F7A2E1C(0, v5, 0);
    uint64_t v6 = v28;
    for (int64_t i = (uint64_t *)(a3 + 32); ; ++i)
    {
      uint64_t v22 = *i;
      a1(&v23, &v22);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      long long v9 = v23;
      long long v10 = v24;
      char v11 = v25;
      uint64_t v12 = v26;
      long long v13 = v27;
      uint64_t v28 = v6;
      unint64_t v15 = *(void *)(v6 + 16);
      unint64_t v14 = *(void *)(v6 + 24);
      if (v15 >= v14 >> 1)
      {
        long long v19 = v24;
        long long v20 = v23;
        long long v18 = v27;
        sub_21F7A2E1C((char *)(v14 > 1), v15 + 1, 1);
        long long v13 = v18;
        long long v10 = v19;
        long long v9 = v20;
        uint64_t v6 = v28;
      }
      *(void *)(v6 + 16) = v15 + 1;
      uint64_t v16 = v6 + (v15 << 6);
      *(_OWORD *)(v16 + 32) = v9;
      *(_OWORD *)(v16 + 48) = v10;
      *(unsigned char *)(v16 + 64) = v11;
      *(void *)(v16 + 72) = v12;
      *(_OWORD *)(v16 + 80) = v13;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_21F7FB3FC(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v24 = MEMORY[0x263F8EE78];
  int64_t v5 = *a1;
  uint64_t v6 = swift_retain();
  MEMORY[0x223C55260](v6);
  if (*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v7 = a1[1];
  uint64_t v8 = swift_retain();
  MEMORY[0x223C55260](v8);
  if (*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  long long v9 = a1[2];
  uint64_t v10 = swift_retain();
  MEMORY[0x223C55260](v10);
  if (*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  char v11 = a1[3];
  uint64_t v12 = swift_retain();
  MEMORY[0x223C55260](v12);
  if (*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  long long v13 = a1[4];
  uint64_t v14 = swift_retain();
  MEMORY[0x223C55260](v14);
  if (*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v15 = *v5;
  uint64_t v16 = *v7;
  uint64_t v17 = *v9;
  uint64_t v18 = *v11;
  uint64_t v19 = *v13;
  long long v20 = (void *)swift_allocObject();
  v20[2] = a2;
  v20[3] = a3;
  v20[4] = v15;
  v20[5] = v16;
  void v20[6] = v17;
  v20[7] = v18;
  v20[8] = v19;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v21 = sub_21F7775BC(v24, (uint64_t)sub_21F810404, (uint64_t)v20, &qword_26AD49F88, (uint64_t)&unk_26D133AE8, (uint64_t)sub_21F76DF14, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v21;
}

uint64_t sub_21F7FB740(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v15 = MEMORY[0x263F8EE78];
  uint64_t v6 = *a1;
  uint64_t v7 = swift_retain();
  MEMORY[0x223C55260](v7);
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v8 = a1[1];
  uint64_t v9 = swift_retain();
  MEMORY[0x223C55260](v9);
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v10 = *v6;
  uint64_t v11 = *v8;
  uint64_t v12 = (void *)swift_allocObject();
  _OWORD v12[2] = a2;
  void v12[3] = a3;
  v12[4] = v10;
  v12[5] = v11;
  swift_retain();
  swift_retain();
  uint64_t v13 = sub_21F784C5C(v15, (uint64_t)sub_21F77363C, (uint64_t)v12, &qword_267EE78F8, (uint64_t)&unk_26D133A70, (uint64_t)sub_21F769D8C, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  swift_release();
  swift_release();
  return v13;
}

uint64_t sub_21F7FB900(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v15 = MEMORY[0x263F8EE78];
  uint64_t v6 = *a1;
  uint64_t v7 = swift_retain();
  MEMORY[0x223C55260](v7);
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v8 = a1[1];
  uint64_t v9 = swift_retain();
  MEMORY[0x223C55260](v9);
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v10 = *v6;
  uint64_t v11 = *v8;
  uint64_t v12 = (void *)swift_allocObject();
  _OWORD v12[2] = a2;
  void v12[3] = a3;
  v12[4] = v10;
  v12[5] = v11;
  swift_retain();
  swift_retain();
  uint64_t v13 = sub_21F80A1B8(v15, (uint64_t)sub_21F80FBB8, (uint64_t)v12, &qword_26AD44B70, (uint64_t)&unk_26D133B38, (uint64_t)sub_21F76DF14, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  swift_release();
  swift_release();
  return v13;
}

uint64_t sub_21F7FBAC0(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v15 = MEMORY[0x263F8EE78];
  uint64_t v6 = *a1;
  uint64_t v7 = swift_retain();
  MEMORY[0x223C55260](v7);
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v8 = a1[1];
  uint64_t v9 = swift_retain();
  MEMORY[0x223C55260](v9);
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v10 = *v6;
  uint64_t v11 = *v8;
  uint64_t v12 = (void *)swift_allocObject();
  _OWORD v12[2] = a2;
  void v12[3] = a3;
  v12[4] = v10;
  v12[5] = v11;
  swift_retain();
  swift_retain();
  uint64_t v13 = sub_21F80A1B8(v15, (uint64_t)sub_21F80FBEC, (uint64_t)v12, &qword_26AD44B70, (uint64_t)&unk_26D133B38, (uint64_t)sub_21F76DF14, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  swift_release();
  swift_release();
  return v13;
}

uint64_t sub_21F7FBC80(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  return sub_21F8026A0(a1, a2, a3, (uint64_t)&unk_26D133C50, (uint64_t)sub_21F80FCA0, (uint64_t (*)(uint64_t, uint64_t, void *))sub_21F809B54);
}

uint64_t sub_21F7FBCB4(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v15 = MEMORY[0x263F8EE78];
  uint64_t v6 = *a1;
  uint64_t v7 = swift_retain();
  MEMORY[0x223C55260](v7);
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v8 = a1[1];
  uint64_t v9 = swift_retain();
  MEMORY[0x223C55260](v9);
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v10 = *v6;
  uint64_t v11 = *v8;
  uint64_t v12 = (void *)swift_allocObject();
  _OWORD v12[2] = a2;
  void v12[3] = a3;
  v12[4] = v10;
  v12[5] = v11;
  swift_retain();
  swift_retain();
  uint64_t v13 = sub_21F784C5C(v15, (uint64_t)sub_21F80FD38, (uint64_t)v12, &qword_26AD49F40, (uint64_t)&unk_26D1339D0, (uint64_t)sub_21F76DF14, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  swift_release();
  swift_release();
  return v13;
}

uint64_t sub_21F7FBE74(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = MEMORY[0x263F8EE78];
  unint64_t v33 = MEMORY[0x263F8EE78];
  uint64_t v7 = *a1;
  uint64_t v8 = swift_retain();
  MEMORY[0x223C55260](v8);
  if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v9 = a1[1];
  uint64_t v10 = swift_retain();
  MEMORY[0x223C55260](v10);
  if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  unint64_t v11 = v33;
  uint64_t v12 = *v7;
  uint64_t v13 = *v9;
  uint64_t v14 = (void *)swift_allocObject();
  long long v14[2] = a2;
  v14[3] = a3;
  v14[4] = v12;
  v14[5] = v13;
  sub_21F76CA40(&qword_26AD44868);
  uint64_t v15 = swift_allocObject();
  *(_WORD *)(v15 + 16) = 256;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 136) = 0u;
  *(_OWORD *)(v15 + 152) = 0u;
  *(_OWORD *)(v15 + 168) = 0u;
  *(void *)(v15 + 24) = v11;
  *(void *)(v15 + 32) = v6;
  if (!(v11 >> 62))
  {
    uint64_t v16 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v16) {
      goto LABEL_7;
    }
LABEL_24:
    swift_bridgeObjectRelease();
LABEL_25:
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = sub_21F80FCF0;
    *(void *)(v30 + 24) = v14;
    uint64_t v31 = *(void *)(v15 + 168);
    *(void *)(v15 + 168) = sub_21F76DF14;
    *(void *)(v15 + 176) = v30;
    sub_21F76D5D8(v31);
    swift_release();
    swift_release();
    return v15;
  }
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t result = sub_21FA26790();
  uint64_t v16 = result;
  if (!result) {
    goto LABEL_24;
  }
LABEL_7:
  if (v16 >= 1)
  {
    if ((v11 & 0xC000000000000001) != 0)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t v19 = MEMORY[0x223C559B0](v18, v11);
        swift_weakInit();
        long long v20 = *(void **)(v19 + 32);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v19 + 32) = v20;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          long long v20 = sub_21F76B290(0, v20[2] + 1, 1, v20);
          *(void *)(v19 + 32) = v20;
        }
        unint64_t v23 = v20[2];
        unint64_t v22 = v20[3];
        if (v23 >= v22 >> 1)
        {
          long long v20 = sub_21F76B290((void *)(v22 > 1), v23 + 1, 1, v20);
          *(void *)(v19 + 32) = v20;
        }
        ++v18;
        v20[2] = v23 + 1;
        sub_21F76C9DC((uint64_t)v32, (uint64_t)&v20[v23 + 4], &qword_26AD47910);
        swift_unknownObjectRelease();
      }
      while (v16 != v18);
    }
    else
    {
      uint64_t v24 = 0;
      do
      {
        uint64_t v25 = *(void *)(v11 + 8 * v24 + 32);
        swift_weakInit();
        uint64_t v26 = *(void **)(v25 + 32);
        swift_retain();
        char v27 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v25 + 32) = v26;
        if ((v27 & 1) == 0)
        {
          uint64_t v26 = sub_21F76B290(0, v26[2] + 1, 1, v26);
          *(void *)(v25 + 32) = v26;
        }
        unint64_t v29 = v26[2];
        unint64_t v28 = v26[3];
        if (v29 >= v28 >> 1)
        {
          uint64_t v26 = sub_21F76B290((void *)(v28 > 1), v29 + 1, 1, v26);
          *(void *)(v25 + 32) = v26;
        }
        ++v24;
        v26[2] = v29 + 1;
        sub_21F76C9DC((uint64_t)v32, (uint64_t)&v26[v29 + 4], &qword_26AD47910);
        swift_release();
      }
      while (v16 != v24);
    }
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F7FC290(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  return sub_21F8026A0(a1, a2, a3, (uint64_t)&unk_26D133D40, (uint64_t)sub_21F80FCF0, (uint64_t (*)(uint64_t, uint64_t, void *))sub_21F809B54);
}

uint64_t sub_21F7FC2C4(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v15 = MEMORY[0x263F8EE78];
  uint64_t v6 = *a1;
  uint64_t v7 = swift_retain();
  MEMORY[0x223C55260](v7);
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v8 = a1[1];
  uint64_t v9 = swift_retain();
  MEMORY[0x223C55260](v9);
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v10 = *v6;
  uint64_t v11 = *v8;
  uint64_t v12 = (void *)swift_allocObject();
  _OWORD v12[2] = a2;
  void v12[3] = a3;
  v12[4] = v10;
  v12[5] = v11;
  swift_retain();
  swift_retain();
  uint64_t v13 = sub_21F80A1B8(v15, (uint64_t)sub_21F80FCD4, (uint64_t)v12, &qword_26AD44B70, (uint64_t)&unk_26D133B38, (uint64_t)sub_21F76DF14, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  swift_release();
  swift_release();
  return v13;
}

uint64_t sub_21F7FC484(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v11 = MEMORY[0x263F8EE78];
  int64_t v5 = *a1;
  uint64_t v6 = swift_retain();
  MEMORY[0x223C55260](v6);
  if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v7 = *v5;
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = v7;
  swift_retain();
  uint64_t v9 = sub_21F7775BC(v11, (uint64_t)sub_21F80FB64, (uint64_t)v8, &qword_267EE7940, (uint64_t)&unk_26D133CF0, (uint64_t)sub_21F76DF14, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  swift_release();
  return v9;
}

uint64_t sub_21F7FC5C4(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v11 = MEMORY[0x263F8EE78];
  int64_t v5 = *a1;
  uint64_t v6 = swift_retain();
  MEMORY[0x223C55260](v6);
  if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v7 = *v5;
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = v7;
  swift_retain();
  uint64_t v9 = sub_21F7775BC(v11, (uint64_t)sub_21F80FC6C, (uint64_t)v8, &qword_267EE7918, (uint64_t)&unk_26D133C28, (uint64_t)sub_21F769D8C, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  swift_release();
  return v9;
}

uint64_t sub_21F7FC704(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v11 = MEMORY[0x263F8EE78];
  int64_t v5 = *a1;
  uint64_t v6 = swift_retain();
  MEMORY[0x223C55260](v6);
  if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v7 = *v5;
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = v7;
  swift_retain();
  uint64_t v9 = sub_21F7775BC(v11, (uint64_t)sub_21F80FB64, (uint64_t)v8, &qword_26AD441D0, (uint64_t)&unk_26D133BB0, (uint64_t)sub_21F76DF14, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  swift_release();
  return v9;
}

uint64_t sub_21F7FC844(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v11 = MEMORY[0x263F8EE78];
  int64_t v5 = *a1;
  uint64_t v6 = swift_retain();
  MEMORY[0x223C55260](v6);
  if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v7 = *v5;
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = v7;
  swift_retain();
  uint64_t v9 = sub_21F7775BC(v11, (uint64_t)sub_21F80FB64, (uint64_t)v8, &qword_26AD49F88, (uint64_t)&unk_26D133AE8, (uint64_t)sub_21F76DF14, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  swift_release();
  return v9;
}

uint64_t sub_21F7FC984(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v11 = MEMORY[0x263F8EE78];
  int64_t v5 = *a1;
  uint64_t v6 = swift_retain();
  MEMORY[0x223C55260](v6);
  if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v7 = *v5;
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = v7;
  swift_retain();
  uint64_t v9 = sub_21F7775BC(v11, (uint64_t)sub_21F80FB64, (uint64_t)v8, &qword_26AD47BC8, (uint64_t)&unk_26D133980, (uint64_t)sub_21F76DF14, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  swift_release();
  return v9;
}

uint64_t sub_21F7FCAC4(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v15 = MEMORY[0x263F8EE78];
  uint64_t v6 = *a1;
  uint64_t v7 = swift_retain();
  MEMORY[0x223C55260](v7);
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v8 = a1[1];
  uint64_t v9 = swift_retain();
  MEMORY[0x223C55260](v9);
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v10 = *v6;
  uint64_t v11 = *v8;
  uint64_t v12 = (void *)swift_allocObject();
  _OWORD v12[2] = a2;
  void v12[3] = a3;
  v12[4] = v10;
  v12[5] = v11;
  swift_retain();
  swift_retain();
  uint64_t v13 = sub_21F784C5C(v15, (uint64_t)sub_21F77363C, (uint64_t)v12, &qword_26AD44B60, (uint64_t)&unk_26D1343D0, (uint64_t)sub_21F76DF14, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  swift_release();
  swift_release();
  return v13;
}

uint64_t sub_21F7FCC84(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v15 = MEMORY[0x263F8EE78];
  uint64_t v6 = *a1;
  uint64_t v7 = swift_retain();
  MEMORY[0x223C55260](v7);
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v8 = a1[1];
  uint64_t v9 = swift_retain();
  MEMORY[0x223C55260](v9);
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v10 = *v6;
  uint64_t v11 = *v8;
  uint64_t v12 = (void *)swift_allocObject();
  _OWORD v12[2] = a2;
  void v12[3] = a3;
  v12[4] = v10;
  v12[5] = v11;
  swift_retain();
  swift_retain();
  uint64_t v13 = sub_21F784C5C(v15, (uint64_t)sub_21F77363C, (uint64_t)v12, &qword_267EE7978, (uint64_t)&unk_26D134420, (uint64_t)sub_21F76DF14, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  swift_release();
  swift_release();
  return v13;
}

uint64_t sub_21F7FCE44(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v15 = MEMORY[0x263F8EE78];
  uint64_t v6 = *a1;
  uint64_t v7 = swift_retain();
  MEMORY[0x223C55260](v7);
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v8 = a1[1];
  uint64_t v9 = swift_retain();
  MEMORY[0x223C55260](v9);
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v10 = *v6;
  uint64_t v11 = *v8;
  uint64_t v12 = (void *)swift_allocObject();
  _OWORD v12[2] = a2;
  void v12[3] = a3;
  v12[4] = v10;
  v12[5] = v11;
  swift_retain();
  swift_retain();
  uint64_t v13 = sub_21F80A1B8(v15, (uint64_t)sub_21F80FBB8, (uint64_t)v12, &qword_26AD44B68, (uint64_t)&unk_26D134470, (uint64_t)sub_21F769D8C, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  swift_release();
  swift_release();
  return v13;
}

uint64_t sub_21F7FD004(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v15 = MEMORY[0x263F8EE78];
  uint64_t v6 = *a1;
  uint64_t v7 = swift_retain();
  MEMORY[0x223C55260](v7);
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v8 = a1[1];
  uint64_t v9 = swift_retain();
  MEMORY[0x223C55260](v9);
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v10 = *v6;
  uint64_t v11 = *v8;
  uint64_t v12 = (void *)swift_allocObject();
  _OWORD v12[2] = a2;
  void v12[3] = a3;
  v12[4] = v10;
  v12[5] = v11;
  swift_retain();
  swift_retain();
  uint64_t v13 = sub_21F80A1B8(v15, (uint64_t)sub_21F80FBEC, (uint64_t)v12, &qword_26AD44B68, (uint64_t)&unk_26D134470, (uint64_t)sub_21F769D8C, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  swift_release();
  swift_release();
  return v13;
}

uint64_t sub_21F7FD1C4(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = MEMORY[0x263F8EE78];
  unint64_t v33 = MEMORY[0x263F8EE78];
  uint64_t v7 = *a1;
  uint64_t v8 = swift_retain();
  MEMORY[0x223C55260](v8);
  if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v9 = a1[1];
  uint64_t v10 = swift_retain();
  MEMORY[0x223C55260](v10);
  if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  unint64_t v11 = v33;
  uint64_t v12 = *v7;
  uint64_t v13 = *v9;
  uint64_t v14 = (void *)swift_allocObject();
  long long v14[2] = a2;
  v14[3] = a3;
  v14[4] = v12;
  v14[5] = v13;
  sub_21F76CA40(&qword_26AD44860);
  uint64_t v15 = swift_allocObject();
  *(_WORD *)(v15 + 16) = 256;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 136) = 0u;
  *(_OWORD *)(v15 + 152) = 0u;
  *(_OWORD *)(v15 + 168) = 0u;
  *(void *)(v15 + 24) = v11;
  *(void *)(v15 + 32) = v6;
  if (!(v11 >> 62))
  {
    uint64_t v16 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v16) {
      goto LABEL_7;
    }
LABEL_24:
    swift_bridgeObjectRelease();
LABEL_25:
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = sub_21F80FCA0;
    *(void *)(v30 + 24) = v14;
    uint64_t v31 = *(void *)(v15 + 168);
    *(void *)(v15 + 168) = sub_21F76DF14;
    *(void *)(v15 + 176) = v30;
    sub_21F76D5D8(v31);
    swift_release();
    swift_release();
    return v15;
  }
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t result = sub_21FA26790();
  uint64_t v16 = result;
  if (!result) {
    goto LABEL_24;
  }
LABEL_7:
  if (v16 >= 1)
  {
    if ((v11 & 0xC000000000000001) != 0)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t v19 = MEMORY[0x223C559B0](v18, v11);
        swift_weakInit();
        long long v20 = *(void **)(v19 + 32);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v19 + 32) = v20;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          long long v20 = sub_21F76B290(0, v20[2] + 1, 1, v20);
          *(void *)(v19 + 32) = v20;
        }
        unint64_t v23 = v20[2];
        unint64_t v22 = v20[3];
        if (v23 >= v22 >> 1)
        {
          long long v20 = sub_21F76B290((void *)(v22 > 1), v23 + 1, 1, v20);
          *(void *)(v19 + 32) = v20;
        }
        ++v18;
        v20[2] = v23 + 1;
        sub_21F76C9DC((uint64_t)v32, (uint64_t)&v20[v23 + 4], &qword_26AD47910);
        swift_unknownObjectRelease();
      }
      while (v16 != v18);
    }
    else
    {
      uint64_t v24 = 0;
      do
      {
        uint64_t v25 = *(void *)(v11 + 8 * v24 + 32);
        swift_weakInit();
        uint64_t v26 = *(void **)(v25 + 32);
        swift_retain();
        char v27 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v25 + 32) = v26;
        if ((v27 & 1) == 0)
        {
          uint64_t v26 = sub_21F76B290(0, v26[2] + 1, 1, v26);
          *(void *)(v25 + 32) = v26;
        }
        unint64_t v29 = v26[2];
        unint64_t v28 = v26[3];
        if (v29 >= v28 >> 1)
        {
          uint64_t v26 = sub_21F76B290((void *)(v28 > 1), v29 + 1, 1, v26);
          *(void *)(v25 + 32) = v26;
        }
        ++v24;
        v26[2] = v29 + 1;
        sub_21F76C9DC((uint64_t)v32, (uint64_t)&v26[v29 + 4], &qword_26AD47910);
        swift_release();
      }
      while (v16 != v24);
    }
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F7FD5E0(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  return sub_21F8026A0(a1, a2, a3, (uint64_t)&unk_26D134588, (uint64_t)sub_21F80FCA0, (uint64_t (*)(uint64_t, uint64_t, void *))sub_21F809EE0);
}

uint64_t sub_21F7FD614(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v15 = MEMORY[0x263F8EE78];
  uint64_t v6 = *a1;
  uint64_t v7 = swift_retain();
  MEMORY[0x223C55260](v7);
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v8 = a1[1];
  uint64_t v9 = swift_retain();
  MEMORY[0x223C55260](v9);
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v10 = *v6;
  uint64_t v11 = *v8;
  uint64_t v12 = (void *)swift_allocObject();
  _OWORD v12[2] = a2;
  void v12[3] = a3;
  v12[4] = v10;
  v12[5] = v11;
  swift_retain();
  swift_retain();
  uint64_t v13 = sub_21F784C5C(v15, (uint64_t)sub_21F80FD38, (uint64_t)v12, &qword_26AD44B60, (uint64_t)&unk_26D1343D0, (uint64_t)sub_21F76DF14, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  swift_release();
  swift_release();
  return v13;
}

uint64_t sub_21F7FD7D4(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = MEMORY[0x263F8EE78];
  unint64_t v33 = MEMORY[0x263F8EE78];
  uint64_t v7 = *a1;
  uint64_t v8 = swift_retain();
  MEMORY[0x223C55260](v8);
  if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v9 = a1[1];
  uint64_t v10 = swift_retain();
  MEMORY[0x223C55260](v10);
  if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  unint64_t v11 = v33;
  uint64_t v12 = *v7;
  uint64_t v13 = *v9;
  uint64_t v14 = (void *)swift_allocObject();
  long long v14[2] = a2;
  v14[3] = a3;
  v14[4] = v12;
  v14[5] = v13;
  sub_21F76CA40(&qword_26AD44860);
  uint64_t v15 = swift_allocObject();
  *(_WORD *)(v15 + 16) = 256;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 136) = 0u;
  *(_OWORD *)(v15 + 152) = 0u;
  *(_OWORD *)(v15 + 168) = 0u;
  *(void *)(v15 + 24) = v11;
  *(void *)(v15 + 32) = v6;
  if (!(v11 >> 62))
  {
    uint64_t v16 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v16) {
      goto LABEL_7;
    }
LABEL_24:
    swift_bridgeObjectRelease();
LABEL_25:
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = sub_21F80FCF0;
    *(void *)(v30 + 24) = v14;
    uint64_t v31 = *(void *)(v15 + 168);
    *(void *)(v15 + 168) = sub_21F76DF14;
    *(void *)(v15 + 176) = v30;
    sub_21F76D5D8(v31);
    swift_release();
    swift_release();
    return v15;
  }
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t result = sub_21FA26790();
  uint64_t v16 = result;
  if (!result) {
    goto LABEL_24;
  }
LABEL_7:
  if (v16 >= 1)
  {
    if ((v11 & 0xC000000000000001) != 0)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t v19 = MEMORY[0x223C559B0](v18, v11);
        swift_weakInit();
        long long v20 = *(void **)(v19 + 32);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v19 + 32) = v20;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          long long v20 = sub_21F76B290(0, v20[2] + 1, 1, v20);
          *(void *)(v19 + 32) = v20;
        }
        unint64_t v23 = v20[2];
        unint64_t v22 = v20[3];
        if (v23 >= v22 >> 1)
        {
          long long v20 = sub_21F76B290((void *)(v22 > 1), v23 + 1, 1, v20);
          *(void *)(v19 + 32) = v20;
        }
        ++v18;
        v20[2] = v23 + 1;
        sub_21F76C9DC((uint64_t)v32, (uint64_t)&v20[v23 + 4], &qword_26AD47910);
        swift_unknownObjectRelease();
      }
      while (v16 != v18);
    }
    else
    {
      uint64_t v24 = 0;
      do
      {
        uint64_t v25 = *(void *)(v11 + 8 * v24 + 32);
        swift_weakInit();
        uint64_t v26 = *(void **)(v25 + 32);
        swift_retain();
        char v27 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v25 + 32) = v26;
        if ((v27 & 1) == 0)
        {
          uint64_t v26 = sub_21F76B290(0, v26[2] + 1, 1, v26);
          *(void *)(v25 + 32) = v26;
        }
        unint64_t v29 = v26[2];
        unint64_t v28 = v26[3];
        if (v29 >= v28 >> 1)
        {
          uint64_t v26 = sub_21F76B290((void *)(v28 > 1), v29 + 1, 1, v26);
          *(void *)(v25 + 32) = v26;
        }
        ++v24;
        v26[2] = v29 + 1;
        sub_21F76C9DC((uint64_t)v32, (uint64_t)&v26[v29 + 4], &qword_26AD47910);
        swift_release();
      }
      while (v16 != v24);
    }
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F7FDBF0(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  return sub_21F8026A0(a1, a2, a3, (uint64_t)&unk_26D134600, (uint64_t)sub_21F80FCF0, (uint64_t (*)(uint64_t, uint64_t, void *))sub_21F809EE0);
}

uint64_t sub_21F7FDC24(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v15 = MEMORY[0x263F8EE78];
  uint64_t v6 = *a1;
  uint64_t v7 = swift_retain();
  MEMORY[0x223C55260](v7);
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v8 = a1[1];
  uint64_t v9 = swift_retain();
  MEMORY[0x223C55260](v9);
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v10 = *v6;
  uint64_t v11 = *v8;
  uint64_t v12 = (void *)swift_allocObject();
  _OWORD v12[2] = a2;
  void v12[3] = a3;
  v12[4] = v10;
  v12[5] = v11;
  swift_retain();
  swift_retain();
  uint64_t v13 = sub_21F80A1B8(v15, (uint64_t)sub_21F80FCD4, (uint64_t)v12, &qword_26AD44B68, (uint64_t)&unk_26D134470, (uint64_t)sub_21F769D8C, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  swift_release();
  swift_release();
  return v13;
}

uint64_t sub_21F7FDDE4(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v11 = MEMORY[0x263F8EE78];
  int64_t v5 = *a1;
  uint64_t v6 = swift_retain();
  MEMORY[0x223C55260](v6);
  if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v7 = *v5;
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = v7;
  swift_retain();
  uint64_t v9 = sub_21F7775BC(v11, (uint64_t)sub_21F80FB64, (uint64_t)v8, &qword_267EE7990, (uint64_t)&unk_26D134560, (uint64_t)sub_21F76DF14, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  swift_release();
  return v9;
}

uint64_t sub_21F7FDF24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a2;
  *(void *)(v5 + 24) = a3;
  sub_21F76CA40(&qword_26AD456F8);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(void *)(v6 + 72) = 0;
  *(unsigned char *)(v6 + 80) = -1;
  *(_WORD *)(v6 + 16) = 256;
  *(void *)(v6 + 88) = 0;
  *(void *)(v6 + 96) = 0;
  uint64_t v7 = MEMORY[0x263F8EE78];
  *(void *)(v6 + 24) = MEMORY[0x263F8EE78];
  *(void *)(v6 + 32) = v7;
  if ((v7 & 0xC000000000000000) == 0 || (uint64_t v11 = MEMORY[0x263F8EE78], (result = sub_21FA26790()) == 0))
  {
LABEL_2:
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = sub_21F772B40;
    *(void *)(v8 + 24) = v5;
    uint64_t v9 = *(void *)(v6 + 88);
    *(void *)(v6 + 88) = sub_21F76DF14;
    *(void *)(v6 + 96) = v8;
    sub_21F76D5D8(v9);
    return v6;
  }
  uint64_t v12 = result;
  if (result >= 1)
  {
    uint64_t v13 = (uint64_t *)(v11 + 32);
    do
    {
      uint64_t v14 = *v13;
      swift_weakInit();
      unint64_t v15 = *(void **)(v14 + 32);
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v14 + 32) = v15;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v15 = sub_21F76B290(0, v15[2] + 1, 1, v15);
        *(void *)(v14 + 32) = v15;
      }
      unint64_t v17 = v15[2];
      unint64_t v18 = v15[3];
      unint64_t v19 = v17 + 1;
      if (v17 >= v18 >> 1)
      {
        unint64_t v23 = v17 + 1;
        long long v20 = v15;
        unint64_t v21 = v15[2];
        unint64_t v22 = sub_21F76B290((void *)(v18 > 1), v17 + 1, 1, v20);
        unint64_t v17 = v21;
        unint64_t v19 = v23;
        unint64_t v15 = v22;
        *(void *)(v14 + 32) = v22;
      }
      _OWORD v15[2] = v19;
      sub_21F76C9DC((uint64_t)v24, (uint64_t)&v15[v17 + 4], &qword_26AD47910);
      swift_release();
      ++v13;
      --v12;
    }
    while (v12);
    goto LABEL_2;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F7FE118(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v21 = MEMORY[0x263F8EE78];
  uint64_t v5 = *a1;
  uint64_t v6 = swift_retain();
  MEMORY[0x223C55260](v6);
  if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v7 = a1[1];
  uint64_t v8 = swift_retain();
  MEMORY[0x223C55260](v8);
  if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  type metadata accessor for SgMeasurements();
  uint64_t v9 = a1[2];
  uint64_t v10 = swift_retain();
  MEMORY[0x223C55260](v10);
  if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v11 = a1[3];
  uint64_t v12 = swift_retain();
  MEMORY[0x223C55260](v12);
  if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v13 = *v5;
  uint64_t v14 = *v7;
  uint64_t v15 = *v9;
  uint64_t v16 = *v11;
  unint64_t v17 = (void *)swift_allocObject();
  void v17[2] = a2;
  _OWORD v17[3] = a3;
  v17[4] = v13;
  void v17[5] = v14;
  v17[6] = v15;
  v17[7] = v16;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v18 = sub_21F7775BC(v21, (uint64_t)sub_21F810264, (uint64_t)v17, &qword_26AD45830, (uint64_t)&unk_26D134240, (uint64_t)sub_21F769D8C, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v18;
}

uint64_t sub_21F7FE3E0(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v21 = MEMORY[0x263F8EE78];
  uint64_t v5 = *a1;
  uint64_t v6 = swift_retain();
  MEMORY[0x223C55260](v6);
  if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v7 = a1[1];
  uint64_t v8 = swift_retain();
  MEMORY[0x223C55260](v8);
  if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v9 = a1[2];
  uint64_t v10 = swift_retain();
  MEMORY[0x223C55260](v10);
  if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  type metadata accessor for SgMeasurements();
  uint64_t v11 = a1[3];
  uint64_t v12 = swift_retain();
  MEMORY[0x223C55260](v12);
  if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v13 = *v5;
  uint64_t v14 = *v7;
  uint64_t v15 = *v9;
  uint64_t v16 = *v11;
  unint64_t v17 = (void *)swift_allocObject();
  void v17[2] = a2;
  _OWORD v17[3] = a3;
  v17[4] = v13;
  void v17[5] = v14;
  v17[6] = v15;
  v17[7] = v16;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v18 = sub_21F7775BC(v21, (uint64_t)sub_21F810190, (uint64_t)v17, &qword_26AD45838, (uint64_t)&unk_26D1341A0, (uint64_t)sub_21F76DF14, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v18;
}

uint64_t sub_21F7FE6A8(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v15 = MEMORY[0x263F8EE78];
  uint64_t v6 = *a1;
  uint64_t v7 = swift_retain();
  MEMORY[0x223C55260](v7);
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v8 = a1[1];
  uint64_t v9 = swift_retain();
  MEMORY[0x223C55260](v9);
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v10 = *v6;
  uint64_t v11 = *v8;
  uint64_t v12 = (void *)swift_allocObject();
  _OWORD v12[2] = a2;
  void v12[3] = a3;
  v12[4] = v10;
  v12[5] = v11;
  swift_retain();
  swift_retain();
  uint64_t v13 = sub_21F7775BC(v15, (uint64_t)sub_21F80FD54, (uint64_t)v12, &qword_26AD49F88, (uint64_t)&unk_26D133AE8, (uint64_t)sub_21F76DF14, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  swift_release();
  swift_release();
  return v13;
}

uint64_t sub_21F7FE868(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v18 = MEMORY[0x263F8EE78];
  uint64_t v6 = *a1;
  uint64_t v7 = swift_retain();
  MEMORY[0x223C55260](v7);
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v8 = a1[1];
  uint64_t v9 = swift_retain();
  MEMORY[0x223C55260](v9);
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v10 = a1[2];
  uint64_t v11 = swift_retain();
  MEMORY[0x223C55260](v11);
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v12 = *v6;
  uint64_t v13 = *v8;
  uint64_t v14 = *v10;
  unint64_t v15 = (void *)swift_allocObject();
  _OWORD v15[2] = a2;
  _OWORD v15[3] = a3;
  v15[4] = v12;
  v15[5] = v13;
  v15[6] = v14;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v16 = sub_21F7775BC(v18, (uint64_t)sub_21F811358, (uint64_t)v15, &qword_26AD44B78, (uint64_t)&unk_26D134768, (uint64_t)sub_21F76DF14, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  swift_release();
  swift_release();
  swift_release();
  return v16;
}

uint64_t sub_21F7FEAA8(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  return sub_21F78EB10(a1, a2, a3, (void (*)(void))type metadata accessor for SgMeasurements, (uint64_t)&unk_26D134E98, (uint64_t)sub_21F810C5C, (uint64_t (*)(uint64_t, uint64_t, void *))sub_21F80AA48);
}

uint64_t sub_21F7FEAF0(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  return sub_21F7FEFD0(a1, a2, a3, (uint64_t)&unk_26D1349E8, (uint64_t)sub_21F810644);
}

uint64_t sub_21F7FEB10(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v18 = MEMORY[0x263F8EE78];
  uint64_t v6 = *a1;
  uint64_t v7 = swift_retain();
  MEMORY[0x223C55260](v7);
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  type metadata accessor for CGSize(0);
  uint64_t v8 = a1[1];
  uint64_t v9 = swift_retain();
  MEMORY[0x223C55260](v9);
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  sub_21FA24970();
  uint64_t v10 = a1[2];
  uint64_t v11 = swift_retain();
  MEMORY[0x223C55260](v11);
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v12 = *v6;
  uint64_t v13 = *v8;
  uint64_t v14 = *v10;
  unint64_t v15 = (void *)swift_allocObject();
  _OWORD v15[2] = a2;
  _OWORD v15[3] = a3;
  v15[4] = v12;
  v15[5] = v13;
  v15[6] = v14;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v16 = sub_21F80B358(v18, (uint64_t)sub_21F810644, (uint64_t)v15, &qword_267EE79D8, (uint64_t)&unk_26D134AB0, (uint64_t)sub_21F769D8C, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  swift_release();
  swift_release();
  swift_release();
  return v16;
}

uint64_t sub_21F7FED60(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v18 = MEMORY[0x263F8EE78];
  uint64_t v6 = *a1;
  uint64_t v7 = swift_retain();
  MEMORY[0x223C55260](v7);
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  type metadata accessor for CGSize(0);
  uint64_t v8 = a1[1];
  uint64_t v9 = swift_retain();
  MEMORY[0x223C55260](v9);
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  sub_21FA24970();
  uint64_t v10 = a1[2];
  uint64_t v11 = swift_retain();
  MEMORY[0x223C55260](v11);
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v12 = *v6;
  uint64_t v13 = *v8;
  uint64_t v14 = *v10;
  unint64_t v15 = (void *)swift_allocObject();
  _OWORD v15[2] = a2;
  _OWORD v15[3] = a3;
  v15[4] = v12;
  v15[5] = v13;
  v15[6] = v14;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v16 = sub_21F80B358(v18, (uint64_t)sub_21F810644, (uint64_t)v15, &qword_267EE79D0, (uint64_t)&unk_26D134A60, (uint64_t)sub_21F76DF14, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  swift_release();
  swift_release();
  swift_release();
  return v16;
}

uint64_t sub_21F7FEFB0(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  return sub_21F7FEFD0(a1, a2, a3, (uint64_t)&unk_26D134AD8, (uint64_t)sub_21F81065C);
}

uint64_t sub_21F7FEFD0(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *a1;
  unint64_t v21 = MEMORY[0x263F8EE78];
  uint64_t v9 = swift_retain();
  MEMORY[0x223C55260](v9);
  if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  type metadata accessor for CGSize(0);
  uint64_t v10 = a1[1];
  uint64_t v11 = swift_retain();
  MEMORY[0x223C55260](v11);
  if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  sub_21FA24970();
  uint64_t v12 = a1[2];
  uint64_t v13 = swift_retain();
  MEMORY[0x223C55260](v13);
  if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v14 = *v8;
  uint64_t v15 = *v10;
  uint64_t v16 = *v12;
  unint64_t v17 = (void *)swift_allocObject();
  void v17[2] = a2;
  _OWORD v17[3] = a3;
  v17[4] = v14;
  void v17[5] = v15;
  v17[6] = v16;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v18 = sub_21F80B358(v21, a5, (uint64_t)v17, &qword_267EE79C0, (uint64_t)&unk_26D134A10, (uint64_t)sub_21F76DF14, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  swift_release();
  swift_release();
  swift_release();
  return v18;
}

uint64_t sub_21F7FF214(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v18 = MEMORY[0x263F8EE78];
  uint64_t v6 = *a1;
  uint64_t v7 = swift_retain();
  MEMORY[0x223C55260](v7);
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  type metadata accessor for CGSize(0);
  uint64_t v8 = a1[1];
  uint64_t v9 = swift_retain();
  MEMORY[0x223C55260](v9);
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  sub_21FA24970();
  uint64_t v10 = a1[2];
  uint64_t v11 = swift_retain();
  MEMORY[0x223C55260](v11);
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v12 = *v6;
  uint64_t v13 = *v8;
  uint64_t v14 = *v10;
  uint64_t v15 = (void *)swift_allocObject();
  _OWORD v15[2] = a2;
  _OWORD v15[3] = a3;
  v15[4] = v12;
  v15[5] = v13;
  v15[6] = v14;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v16 = sub_21F80B358(v18, (uint64_t)sub_21F81065C, (uint64_t)v15, &qword_267EE79D8, (uint64_t)&unk_26D134AB0, (uint64_t)sub_21F769D8C, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  swift_release();
  swift_release();
  swift_release();
  return v16;
}

uint64_t sub_21F7FF464(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v42 = MEMORY[0x263F8EE78];
  uint64_t v4 = *a1;
  uint64_t v5 = swift_retain();
  MEMORY[0x223C55260](v5);
  if (*(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v6 = a1[1];
  uint64_t v7 = swift_retain();
  MEMORY[0x223C55260](v7);
  if (*(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v8 = a1[2];
  uint64_t v9 = swift_retain();
  MEMORY[0x223C55260](v9);
  if (*(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v10 = a1[3];
  uint64_t v11 = swift_retain();
  MEMORY[0x223C55260](v11);
  if (*(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v12 = a1[4];
  uint64_t v13 = swift_retain();
  MEMORY[0x223C55260](v13);
  if (*(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  unint64_t v14 = v42;
  uint64_t v15 = *v4;
  uint64_t v16 = *v6;
  uint64_t v17 = *v8;
  uint64_t v18 = *v10;
  uint64_t v19 = *v12;
  long long v20 = (void *)swift_allocObject();
  v20[2] = a2;
  v20[3] = a3;
  v20[4] = v15;
  v20[5] = v16;
  void v20[6] = v17;
  v20[7] = v18;
  v20[8] = v19;
  sub_21F76CA40(&qword_26AD49F68);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 56) = 0u;
  *(_OWORD *)(v21 + 72) = 0u;
  *(_OWORD *)(v21 + 88) = 0u;
  *(_OWORD *)(v21 + 104) = 0u;
  *(_OWORD *)(v21 + 120) = 0u;
  *(_OWORD *)(v21 + 136) = 0u;
  *(_OWORD *)(v21 + 152) = 0u;
  *(_OWORD *)(v21 + 168) = 0u;
  *(_OWORD *)(v21 + 184) = 0u;
  *(_OWORD *)(v21 + 200) = 0u;
  *(_OWORD *)(v21 + 216) = 0u;
  *(_OWORD *)(v21 + 232) = 0u;
  *(_OWORD *)(v21 + 40) = 0u;
  *(_OWORD *)(v21 + 248) = 0u;
  *(_OWORD *)(v21 + 264) = 0u;
  *(_OWORD *)(v21 + 280) = 0u;
  *(_OWORD *)(v21 + 296) = 0u;
  *(_OWORD *)(v21 + 312) = 0u;
  *(void *)(v21 + 328) = 1;
  *(_WORD *)(v21 + 16) = 256;
  *(_OWORD *)(v21 + 336) = 0u;
  *(_OWORD *)(v21 + 352) = 0u;
  *(_OWORD *)(v21 + 368) = 0u;
  *(_OWORD *)(v21 + 384) = 0u;
  *(_OWORD *)(v21 + 400) = 0u;
  *(void *)(v21 + 416) = 0;
  uint64_t v22 = MEMORY[0x263F8EE78];
  *(void *)(v21 + 24) = v14;
  *(void *)(v21 + 32) = v22;
  if (!(v14 >> 62))
  {
    uint64_t v23 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v23) {
      goto LABEL_13;
    }
LABEL_30:
    swift_bridgeObjectRelease();
LABEL_31:
    uint64_t v37 = swift_allocObject();
    *(void *)(v37 + 16) = sub_21F810608;
    *(void *)(v37 + 24) = v20;
    uint64_t v38 = *(void *)(v21 + 408);
    *(void *)(v21 + 408) = sub_21F769D8C;
    *(void *)(v21 + 416) = v37;
    sub_21F76D5D8(v38);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return v21;
  }
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t result = sub_21FA26790();
  uint64_t v23 = result;
  if (!result) {
    goto LABEL_30;
  }
LABEL_13:
  if (v23 >= 1)
  {
    if ((v14 & 0xC000000000000001) != 0)
    {
      uint64_t v25 = 0;
      do
      {
        uint64_t v26 = MEMORY[0x223C559B0](v25, v14);
        swift_weakInit();
        char v27 = *(void **)(v26 + 32);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v26 + 32) = v27;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          char v27 = sub_21F76B290(0, v27[2] + 1, 1, v27);
          *(void *)(v26 + 32) = v27;
        }
        unint64_t v30 = v27[2];
        unint64_t v29 = v27[3];
        if (v30 >= v29 >> 1)
        {
          char v27 = sub_21F76B290((void *)(v29 > 1), v30 + 1, 1, v27);
          *(void *)(v26 + 32) = v27;
        }
        ++v25;
        v27[2] = v30 + 1;
        sub_21F76C9DC((uint64_t)v41, (uint64_t)&v27[v30 + 4], &qword_26AD47910);
        swift_unknownObjectRelease();
      }
      while (v23 != v25);
    }
    else
    {
      uint64_t v31 = 0;
      do
      {
        uint64_t v32 = *(void *)(v14 + 8 * v31 + 32);
        swift_weakInit();
        unint64_t v33 = *(void **)(v32 + 32);
        swift_retain();
        char v34 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v32 + 32) = v33;
        if ((v34 & 1) == 0)
        {
          unint64_t v33 = sub_21F76B290(0, v33[2] + 1, 1, v33);
          *(void *)(v32 + 32) = v33;
        }
        unint64_t v36 = v33[2];
        unint64_t v35 = v33[3];
        if (v36 >= v35 >> 1)
        {
          unint64_t v33 = sub_21F76B290((void *)(v35 > 1), v36 + 1, 1, v33);
          *(void *)(v32 + 32) = v33;
        }
        ++v31;
        v33[2] = v36 + 1;
        sub_21F76C9DC((uint64_t)v41, (uint64_t)&v33[v36 + 4], &qword_26AD47910);
        swift_release();
      }
      while (v23 != v31);
    }
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F7FFA4C(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v12 = MEMORY[0x263F8EE78];
  type metadata accessor for CGSize(0);
  uint64_t v6 = *a1;
  uint64_t v7 = swift_retain();
  MEMORY[0x223C55260](v7);
  if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v8 = *v6;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = a2;
  v9[3] = a3;
  v9[4] = v8;
  swift_retain();
  uint64_t v10 = sub_21F80AD20(v12, (uint64_t)sub_21F8105D4, (uint64_t)v9);
  swift_release();
  return v10;
}

uint64_t sub_21F7FFB60(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v18 = MEMORY[0x263F8EE78];
  uint64_t v6 = *a1;
  uint64_t v7 = swift_retain();
  MEMORY[0x223C55260](v7);
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v8 = a1[1];
  uint64_t v9 = swift_retain();
  MEMORY[0x223C55260](v9);
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v10 = a1[2];
  uint64_t v11 = swift_retain();
  MEMORY[0x223C55260](v11);
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v12 = *v6;
  uint64_t v13 = *v8;
  uint64_t v14 = *v10;
  uint64_t v15 = (void *)swift_allocObject();
  _OWORD v15[2] = a2;
  _OWORD v15[3] = a3;
  v15[4] = v12;
  v15[5] = v13;
  v15[6] = v14;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v16 = sub_21F78F188(v18, (uint64_t)sub_21F810588, (uint64_t)v15, &qword_26AD456E8, (uint64_t)&unk_26D1348A8, (uint64_t)sub_21F769D8C, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  swift_release();
  swift_release();
  swift_release();
  return v16;
}

uint64_t sub_21F7FFDA0(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v36 = MEMORY[0x263F8EE78];
  uint64_t v6 = *a1;
  uint64_t v7 = swift_retain();
  MEMORY[0x223C55260](v7);
  if (*(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  sub_21FA24220();
  uint64_t v8 = a1[1];
  uint64_t v9 = swift_retain();
  MEMORY[0x223C55260](v9);
  if (*(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  sub_21FA24320();
  uint64_t v10 = a1[2];
  uint64_t v11 = swift_retain();
  MEMORY[0x223C55260](v11);
  if (*(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  unint64_t v12 = v36;
  uint64_t v13 = *v6;
  uint64_t v14 = *v8;
  uint64_t v15 = *v10;
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = a2;
  v16[3] = a3;
  v16[4] = v13;
  v16[5] = v14;
  v16[6] = v15;
  sub_21F76CA40(&qword_26AD47920);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *(void *)(v17 + 72) = 0;
  *(unsigned char *)(v17 + 80) = -1;
  *(_WORD *)(v17 + 16) = 256;
  *(void *)(v17 + 88) = 0;
  *(void *)(v17 + 96) = 0;
  uint64_t v18 = MEMORY[0x263F8EE78];
  *(void *)(v17 + 24) = v12;
  *(void *)(v17 + 32) = v18;
  if (!(v12 >> 62))
  {
    uint64_t v19 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v19) {
      goto LABEL_9;
    }
LABEL_26:
    swift_bridgeObjectRelease();
LABEL_27:
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = sub_21F81120C;
    *(void *)(v33 + 24) = v16;
    uint64_t v34 = *(void *)(v17 + 88);
    *(void *)(v17 + 88) = sub_21F76DF14;
    *(void *)(v17 + 96) = v33;
    sub_21F76D5D8(v34);
    swift_release();
    swift_release();
    swift_release();
    return v17;
  }
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t result = sub_21FA26790();
  uint64_t v19 = result;
  if (!result) {
    goto LABEL_26;
  }
LABEL_9:
  if (v19 >= 1)
  {
    if ((v12 & 0xC000000000000001) != 0)
    {
      uint64_t v21 = 0;
      do
      {
        uint64_t v22 = MEMORY[0x223C559B0](v21, v12);
        swift_weakInit();
        uint64_t v23 = *(void **)(v22 + 32);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v22 + 32) = v23;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v23 = sub_21F76B290(0, v23[2] + 1, 1, v23);
          *(void *)(v22 + 32) = v23;
        }
        unint64_t v26 = v23[2];
        unint64_t v25 = v23[3];
        if (v26 >= v25 >> 1)
        {
          uint64_t v23 = sub_21F76B290((void *)(v25 > 1), v26 + 1, 1, v23);
          *(void *)(v22 + 32) = v23;
        }
        ++v21;
        _OWORD v23[2] = v26 + 1;
        sub_21F76C9DC((uint64_t)v35, (uint64_t)&v23[v26 + 4], &qword_26AD47910);
        swift_unknownObjectRelease();
      }
      while (v19 != v21);
    }
    else
    {
      uint64_t v27 = 0;
      do
      {
        uint64_t v28 = *(void *)(v12 + 8 * v27 + 32);
        swift_weakInit();
        unint64_t v29 = *(void **)(v28 + 32);
        swift_retain();
        char v30 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v28 + 32) = v29;
        if ((v30 & 1) == 0)
        {
          unint64_t v29 = sub_21F76B290(0, v29[2] + 1, 1, v29);
          *(void *)(v28 + 32) = v29;
        }
        unint64_t v32 = v29[2];
        unint64_t v31 = v29[3];
        if (v32 >= v31 >> 1)
        {
          unint64_t v29 = sub_21F76B290((void *)(v31 > 1), v32 + 1, 1, v29);
          *(void *)(v28 + 32) = v29;
        }
        ++v27;
        v29[2] = v32 + 1;
        sub_21F76C9DC((uint64_t)v35, (uint64_t)&v29[v32 + 4], &qword_26AD47910);
        swift_release();
      }
      while (v19 != v27);
    }
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F80024C(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v36 = MEMORY[0x263F8EE78];
  sub_21FA24220();
  uint64_t v6 = *a1;
  uint64_t v7 = swift_retain();
  MEMORY[0x223C55260](v7);
  if (*(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  sub_21FA24320();
  uint64_t v8 = a1[1];
  uint64_t v9 = swift_retain();
  MEMORY[0x223C55260](v9);
  if (*(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v10 = a1[2];
  uint64_t v11 = swift_retain();
  MEMORY[0x223C55260](v11);
  if (*(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  unint64_t v12 = v36;
  uint64_t v13 = *v6;
  uint64_t v14 = *v8;
  uint64_t v15 = *v10;
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = a2;
  v16[3] = a3;
  v16[4] = v13;
  v16[5] = v14;
  v16[6] = v15;
  sub_21F76CA40(&qword_26AD47920);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *(void *)(v17 + 72) = 0;
  *(unsigned char *)(v17 + 80) = -1;
  *(_WORD *)(v17 + 16) = 256;
  *(void *)(v17 + 88) = 0;
  *(void *)(v17 + 96) = 0;
  uint64_t v18 = MEMORY[0x263F8EE78];
  *(void *)(v17 + 24) = v12;
  *(void *)(v17 + 32) = v18;
  if (!(v12 >> 62))
  {
    uint64_t v19 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v19) {
      goto LABEL_9;
    }
LABEL_26:
    swift_bridgeObjectRelease();
LABEL_27:
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = sub_21F8111FC;
    *(void *)(v33 + 24) = v16;
    uint64_t v34 = *(void *)(v17 + 88);
    *(void *)(v17 + 88) = sub_21F76DF14;
    *(void *)(v17 + 96) = v33;
    sub_21F76D5D8(v34);
    swift_release();
    swift_release();
    swift_release();
    return v17;
  }
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t result = sub_21FA26790();
  uint64_t v19 = result;
  if (!result) {
    goto LABEL_26;
  }
LABEL_9:
  if (v19 >= 1)
  {
    if ((v12 & 0xC000000000000001) != 0)
    {
      uint64_t v21 = 0;
      do
      {
        uint64_t v22 = MEMORY[0x223C559B0](v21, v12);
        swift_weakInit();
        uint64_t v23 = *(void **)(v22 + 32);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v22 + 32) = v23;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v23 = sub_21F76B290(0, v23[2] + 1, 1, v23);
          *(void *)(v22 + 32) = v23;
        }
        unint64_t v26 = v23[2];
        unint64_t v25 = v23[3];
        if (v26 >= v25 >> 1)
        {
          uint64_t v23 = sub_21F76B290((void *)(v25 > 1), v26 + 1, 1, v23);
          *(void *)(v22 + 32) = v23;
        }
        ++v21;
        _OWORD v23[2] = v26 + 1;
        sub_21F76C9DC((uint64_t)v35, (uint64_t)&v23[v26 + 4], &qword_26AD47910);
        swift_unknownObjectRelease();
      }
      while (v19 != v21);
    }
    else
    {
      uint64_t v27 = 0;
      do
      {
        uint64_t v28 = *(void *)(v12 + 8 * v27 + 32);
        swift_weakInit();
        unint64_t v29 = *(void **)(v28 + 32);
        swift_retain();
        char v30 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v28 + 32) = v29;
        if ((v30 & 1) == 0)
        {
          unint64_t v29 = sub_21F76B290(0, v29[2] + 1, 1, v29);
          *(void *)(v28 + 32) = v29;
        }
        unint64_t v32 = v29[2];
        unint64_t v31 = v29[3];
        if (v32 >= v31 >> 1)
        {
          unint64_t v29 = sub_21F76B290((void *)(v31 > 1), v32 + 1, 1, v29);
          *(void *)(v28 + 32) = v29;
        }
        ++v27;
        v29[2] = v32 + 1;
        sub_21F76C9DC((uint64_t)v35, (uint64_t)&v29[v32 + 4], &qword_26AD47910);
        swift_release();
      }
      while (v19 != v27);
    }
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F8006F8(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v39 = MEMORY[0x263F8EE78];
  uint64_t v4 = *a1;
  uint64_t v5 = swift_retain();
  MEMORY[0x223C55260](v5);
  if (*(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v6 = a1[1];
  uint64_t v7 = swift_retain();
  MEMORY[0x223C55260](v7);
  if (*(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v8 = a1[2];
  uint64_t v9 = swift_retain();
  MEMORY[0x223C55260](v9);
  if (*(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v10 = a1[3];
  uint64_t v11 = swift_retain();
  MEMORY[0x223C55260](v11);
  if (*(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  unint64_t v12 = v39;
  uint64_t v13 = *v4;
  uint64_t v14 = *v6;
  uint64_t v15 = *v8;
  uint64_t v16 = *v10;
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = a2;
  _OWORD v17[3] = a3;
  v17[4] = v13;
  void v17[5] = v14;
  v17[6] = v15;
  v17[7] = v16;
  sub_21F76CA40(&qword_26AD43E70);
  uint64_t v18 = swift_allocObject();
  *(_WORD *)(v18 + 16) = 256;
  *(_OWORD *)(v18 + 40) = 0u;
  *(_OWORD *)(v18 + 56) = 0u;
  *(_OWORD *)(v18 + 72) = 0u;
  *(_OWORD *)(v18 + 88) = 0u;
  *(_OWORD *)(v18 + 104) = 0u;
  *(void *)(v18 + 120) = 0;
  uint64_t v19 = MEMORY[0x263F8EE78];
  *(void *)(v18 + 24) = v12;
  *(void *)(v18 + 32) = v19;
  if (!(v12 >> 62))
  {
    uint64_t v20 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v20) {
      goto LABEL_11;
    }
LABEL_28:
    swift_bridgeObjectRelease();
LABEL_29:
    uint64_t v34 = swift_allocObject();
    *(void *)(v34 + 16) = sub_21F8110C0;
    *(void *)(v34 + 24) = v17;
    uint64_t v35 = *(void *)(v18 + 112);
    *(void *)(v18 + 112) = sub_21F769D8C;
    *(void *)(v18 + 120) = v34;
    sub_21F76D5D8(v35);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return v18;
  }
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t result = sub_21FA26790();
  uint64_t v20 = result;
  if (!result) {
    goto LABEL_28;
  }
LABEL_11:
  if (v20 >= 1)
  {
    if ((v12 & 0xC000000000000001) != 0)
    {
      uint64_t v22 = 0;
      do
      {
        uint64_t v23 = MEMORY[0x223C559B0](v22, v12);
        swift_weakInit();
        uint64_t v24 = *(void **)(v23 + 32);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v23 + 32) = v24;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v24 = sub_21F76B290(0, v24[2] + 1, 1, v24);
          *(void *)(v23 + 32) = v24;
        }
        unint64_t v27 = v24[2];
        unint64_t v26 = v24[3];
        if (v27 >= v26 >> 1)
        {
          uint64_t v24 = sub_21F76B290((void *)(v26 > 1), v27 + 1, 1, v24);
          *(void *)(v23 + 32) = v24;
        }
        ++v22;
        v24[2] = v27 + 1;
        sub_21F76C9DC((uint64_t)v38, (uint64_t)&v24[v27 + 4], &qword_26AD47910);
        swift_unknownObjectRelease();
      }
      while (v20 != v22);
    }
    else
    {
      uint64_t v28 = 0;
      do
      {
        uint64_t v29 = *(void *)(v12 + 8 * v28 + 32);
        swift_weakInit();
        char v30 = *(void **)(v29 + 32);
        swift_retain();
        char v31 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v29 + 32) = v30;
        if ((v31 & 1) == 0)
        {
          char v30 = sub_21F76B290(0, v30[2] + 1, 1, v30);
          *(void *)(v29 + 32) = v30;
        }
        unint64_t v33 = v30[2];
        unint64_t v32 = v30[3];
        if (v33 >= v32 >> 1)
        {
          char v30 = sub_21F76B290((void *)(v32 > 1), v33 + 1, 1, v30);
          *(void *)(v29 + 32) = v30;
        }
        ++v28;
        v30[2] = v33 + 1;
        sub_21F76C9DC((uint64_t)v38, (uint64_t)&v30[v33 + 4], &qword_26AD47910);
        swift_release();
      }
      while (v20 != v28);
    }
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F800C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a2;
  *(void *)(v5 + 24) = a3;
  sub_21F76CA40(&qword_26AD456E0);
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = v6 + *(void *)(*(void *)v6 + 256);
  uint64_t v8 = type metadata accessor for AxisMarkValues.Storage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = (void *)(v6 + *(void *)(*(void *)v6 + 264));
  *uint64_t v9 = 0;
  v9[1] = 0;
  *(_WORD *)(v6 + 16) = 256;
  uint64_t v10 = MEMORY[0x263F8EE78];
  *(void *)(v6 + 24) = MEMORY[0x263F8EE78];
  *(void *)(v6 + 32) = v10;
  if ((v10 & 0xC000000000000000) == 0 || (v15 = MEMORY[0x263F8EE78], (uint64_t result = sub_21FA26790()) == 0))
  {
LABEL_2:
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = sub_21F772B40;
    *(void *)(v11 + 24) = v5;
    unint64_t v12 = (uint64_t *)(v6 + *(void *)(*(void *)v6 + 264));
    uint64_t v13 = *v12;
    *unint64_t v12 = (uint64_t)sub_21F769D8C;
    v12[1] = v11;
    sub_21F76D5D8(v13);
    return v6;
  }
  uint64_t v16 = result;
  if (result >= 1)
  {
    uint64_t v17 = (uint64_t *)(v15 + 32);
    do
    {
      uint64_t v18 = *v17;
      swift_weakInit();
      uint64_t v19 = *(void **)(v18 + 32);
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v18 + 32) = v19;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v19 = sub_21F76B290(0, v19[2] + 1, 1, v19);
        *(void *)(v18 + 32) = v19;
      }
      unint64_t v21 = v19[2];
      unint64_t v22 = v19[3];
      unint64_t v23 = v21 + 1;
      if (v21 >= v22 >> 1)
      {
        unint64_t v27 = v21 + 1;
        uint64_t v24 = v19;
        unint64_t v25 = v19[2];
        unint64_t v26 = sub_21F76B290((void *)(v22 > 1), v21 + 1, 1, v24);
        unint64_t v21 = v25;
        unint64_t v23 = v27;
        uint64_t v19 = v26;
        *(void *)(v18 + 32) = v26;
      }
      _OWORD v19[2] = v23;
      sub_21F76C9DC((uint64_t)v28, (uint64_t)&v19[v21 + 4], &qword_26AD47910);
      swift_release();
      ++v17;
      --v16;
    }
    while (v16);
    goto LABEL_2;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F800E7C(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v18 = MEMORY[0x263F8EE78];
  type metadata accessor for AxisMarkValues.Storage(0);
  uint64_t v6 = *a1;
  uint64_t v7 = swift_retain();
  MEMORY[0x223C55260](v7);
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v8 = a1[1];
  uint64_t v9 = swift_retain();
  MEMORY[0x223C55260](v9);
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v10 = a1[2];
  uint64_t v11 = swift_retain();
  MEMORY[0x223C55260](v11);
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v12 = *v6;
  uint64_t v13 = *v8;
  uint64_t v14 = *v10;
  uint64_t v15 = (void *)swift_allocObject();
  _OWORD v15[2] = a2;
  _OWORD v15[3] = a3;
  v15[4] = v12;
  v15[5] = v13;
  v15[6] = v14;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v16 = sub_21F7775BC(v18, (uint64_t)sub_21F8103B0, (uint64_t)v15, &qword_26AD49F88, (uint64_t)&unk_26D133AE8, (uint64_t)sub_21F76DF14, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  swift_release();
  swift_release();
  swift_release();
  return v16;
}

uint64_t sub_21F8010C4(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v21 = MEMORY[0x263F8EE78];
  type metadata accessor for AxisMarkValues.Storage(0);
  uint64_t v5 = *a1;
  uint64_t v6 = swift_retain();
  MEMORY[0x223C55260](v6);
  if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v7 = a1[1];
  uint64_t v8 = swift_retain();
  MEMORY[0x223C55260](v8);
  if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v9 = a1[2];
  uint64_t v10 = swift_retain();
  MEMORY[0x223C55260](v10);
  if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  sub_21FA24320();
  uint64_t v11 = a1[3];
  uint64_t v12 = swift_retain();
  MEMORY[0x223C55260](v12);
  if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v13 = *v5;
  uint64_t v14 = *v7;
  uint64_t v15 = *v9;
  uint64_t v16 = *v11;
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = a2;
  _OWORD v17[3] = a3;
  v17[4] = v13;
  void v17[5] = v14;
  v17[6] = v15;
  v17[7] = v16;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v18 = sub_21F7775BC(v21, (uint64_t)sub_21F8103CC, (uint64_t)v17, &qword_26AD49F88, (uint64_t)&unk_26D133AE8, (uint64_t)sub_21F76DF14, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v18;
}

uint64_t sub_21F801394(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v15 = MEMORY[0x263F8EE78];
  type metadata accessor for AxisMarkValues.Storage(0);
  uint64_t v6 = *a1;
  uint64_t v7 = swift_retain();
  MEMORY[0x223C55260](v7);
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v8 = a1[1];
  uint64_t v9 = swift_retain();
  MEMORY[0x223C55260](v9);
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v10 = *v6;
  uint64_t v11 = *v8;
  uint64_t v12 = (void *)swift_allocObject();
  _OWORD v12[2] = a2;
  void v12[3] = a3;
  v12[4] = v10;
  v12[5] = v11;
  swift_retain();
  swift_retain();
  uint64_t v13 = sub_21F7775BC(v15, (uint64_t)sub_21F8103E8, (uint64_t)v12, &qword_26AD44B78, (uint64_t)&unk_26D134768, (uint64_t)sub_21F76DF14, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  swift_release();
  swift_release();
  return v13;
}

uint64_t sub_21F80155C(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, void *))
{
  uint64_t v16 = MEMORY[0x263F8EE78];
  uint64_t v10 = *a1;
  uint64_t v11 = swift_retain();
  MEMORY[0x223C55260](v11);
  if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v12 = *v10;
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = a2;
  v13[3] = a3;
  v13[4] = v12;
  swift_retain();
  uint64_t v14 = a6(v16, a5, v13);
  swift_release();
  return v14;
}

uint64_t sub_21F801670(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v33 = MEMORY[0x263F8EE78];
  type metadata accessor for AxisMarkRenderContext();
  unint64_t v32 = *a1;
  uint64_t v6 = swift_retain();
  MEMORY[0x223C55260](v6);
  if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v7 = a1[1];
  uint64_t v8 = swift_retain();
  MEMORY[0x223C55260](v8);
  if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  type metadata accessor for CGSize(0);
  uint64_t v9 = a1[2];
  uint64_t v10 = swift_retain();
  MEMORY[0x223C55260](v10);
  if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v11 = a1[3];
  uint64_t v12 = swift_retain();
  MEMORY[0x223C55260](v12);
  if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v13 = a1[4];
  uint64_t v14 = swift_retain();
  MEMORY[0x223C55260](v14);
  if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  unint64_t v15 = a1[5];
  uint64_t v16 = swift_retain();
  MEMORY[0x223C55260](v16);
  if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v17 = a1[6];
  uint64_t v18 = swift_retain();
  MEMORY[0x223C55260](v18);
  if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v19 = *v32;
  uint64_t v20 = *v7;
  uint64_t v21 = *v9;
  uint64_t v22 = *v11;
  uint64_t v23 = *v13;
  uint64_t v24 = *v15;
  uint64_t v25 = *v17;
  unint64_t v26 = (void *)swift_allocObject();
  v26[2] = a2;
  v26[3] = a3;
  v26[4] = v19;
  v26[5] = v20;
  v26[6] = v21;
  v26[7] = v22;
  v26[8] = v23;
  void v26[9] = v24;
  v26[10] = v25;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v27 = sub_21F75C104(v33, a5, (uint64_t)v26);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v27;
}

uint64_t sub_21F801A90(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v36 = MEMORY[0x263F8EE78];
  sub_21FA24220();
  uint64_t v6 = *a1;
  uint64_t v7 = swift_retain();
  MEMORY[0x223C55260](v7);
  if (*(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  sub_21FA24320();
  uint64_t v8 = a1[1];
  uint64_t v9 = swift_retain();
  MEMORY[0x223C55260](v9);
  if (*(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v10 = a1[2];
  uint64_t v11 = swift_retain();
  MEMORY[0x223C55260](v11);
  if (*(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  unint64_t v12 = v36;
  uint64_t v13 = *v6;
  uint64_t v14 = *v8;
  uint64_t v15 = *v10;
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = a2;
  v16[3] = a3;
  v16[4] = v13;
  v16[5] = v14;
  v16[6] = v15;
  sub_21F76CA40(&qword_26AD47920);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *(void *)(v17 + 72) = 0;
  *(unsigned char *)(v17 + 80) = -1;
  *(_WORD *)(v17 + 16) = 256;
  *(void *)(v17 + 88) = 0;
  *(void *)(v17 + 96) = 0;
  uint64_t v18 = MEMORY[0x263F8EE78];
  *(void *)(v17 + 24) = v12;
  *(void *)(v17 + 32) = v18;
  if (!(v12 >> 62))
  {
    uint64_t v19 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v19) {
      goto LABEL_9;
    }
LABEL_26:
    swift_bridgeObjectRelease();
LABEL_27:
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = sub_21F8102BC;
    *(void *)(v33 + 24) = v16;
    uint64_t v34 = *(void *)(v17 + 88);
    *(void *)(v17 + 88) = sub_21F769D8C;
    *(void *)(v17 + 96) = v33;
    sub_21F76D5D8(v34);
    swift_release();
    swift_release();
    swift_release();
    return v17;
  }
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t result = sub_21FA26790();
  uint64_t v19 = result;
  if (!result) {
    goto LABEL_26;
  }
LABEL_9:
  if (v19 >= 1)
  {
    if ((v12 & 0xC000000000000001) != 0)
    {
      uint64_t v21 = 0;
      do
      {
        uint64_t v22 = MEMORY[0x223C559B0](v21, v12);
        swift_weakInit();
        uint64_t v23 = *(void **)(v22 + 32);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v22 + 32) = v23;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v23 = sub_21F76B290(0, v23[2] + 1, 1, v23);
          *(void *)(v22 + 32) = v23;
        }
        unint64_t v26 = v23[2];
        unint64_t v25 = v23[3];
        if (v26 >= v25 >> 1)
        {
          uint64_t v23 = sub_21F76B290((void *)(v25 > 1), v26 + 1, 1, v23);
          *(void *)(v22 + 32) = v23;
        }
        ++v21;
        _OWORD v23[2] = v26 + 1;
        sub_21F76C9DC((uint64_t)v35, (uint64_t)&v23[v26 + 4], &qword_26AD47910);
        swift_unknownObjectRelease();
      }
      while (v19 != v21);
    }
    else
    {
      uint64_t v27 = 0;
      do
      {
        uint64_t v28 = *(void *)(v12 + 8 * v27 + 32);
        swift_weakInit();
        uint64_t v29 = *(void **)(v28 + 32);
        swift_retain();
        char v30 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v28 + 32) = v29;
        if ((v30 & 1) == 0)
        {
          uint64_t v29 = sub_21F76B290(0, v29[2] + 1, 1, v29);
          *(void *)(v28 + 32) = v29;
        }
        unint64_t v32 = v29[2];
        unint64_t v31 = v29[3];
        if (v32 >= v31 >> 1)
        {
          uint64_t v29 = sub_21F76B290((void *)(v31 > 1), v32 + 1, 1, v29);
          *(void *)(v28 + 32) = v29;
        }
        ++v27;
        v29[2] = v32 + 1;
        sub_21F76C9DC((uint64_t)v35, (uint64_t)&v29[v32 + 4], &qword_26AD47910);
        swift_release();
      }
      while (v19 != v27);
    }
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F801F3C(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v39 = MEMORY[0x263F8EE78];
  uint64_t v4 = *a1;
  uint64_t v5 = swift_retain();
  MEMORY[0x223C55260](v5);
  if (*(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v6 = a1[1];
  uint64_t v7 = swift_retain();
  MEMORY[0x223C55260](v7);
  if (*(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v8 = a1[2];
  uint64_t v9 = swift_retain();
  MEMORY[0x223C55260](v9);
  if (*(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v10 = a1[3];
  uint64_t v11 = swift_retain();
  MEMORY[0x223C55260](v11);
  if (*(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  unint64_t v12 = v39;
  uint64_t v13 = *v4;
  uint64_t v14 = *v6;
  uint64_t v15 = *v8;
  uint64_t v16 = *v10;
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = a2;
  _OWORD v17[3] = a3;
  v17[4] = v13;
  void v17[5] = v14;
  v17[6] = v15;
  v17[7] = v16;
  sub_21F76CA40(&qword_26AD45818);
  uint64_t v18 = swift_allocObject();
  *(_WORD *)(v18 + 16) = 256;
  *(_OWORD *)(v18 + 40) = 0u;
  *(_OWORD *)(v18 + 56) = 0u;
  *(_OWORD *)(v18 + 72) = 0u;
  *(_OWORD *)(v18 + 88) = 0u;
  *(_OWORD *)(v18 + 104) = 0u;
  *(void *)(v18 + 120) = 0;
  uint64_t v19 = MEMORY[0x263F8EE78];
  *(void *)(v18 + 24) = v12;
  *(void *)(v18 + 32) = v19;
  if (!(v12 >> 62))
  {
    uint64_t v20 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v20) {
      goto LABEL_11;
    }
LABEL_28:
    swift_bridgeObjectRelease();
LABEL_29:
    uint64_t v34 = swift_allocObject();
    *(void *)(v34 + 16) = sub_21F81007C;
    *(void *)(v34 + 24) = v17;
    uint64_t v35 = *(void *)(v18 + 112);
    *(void *)(v18 + 112) = sub_21F76DF14;
    *(void *)(v18 + 120) = v34;
    sub_21F76D5D8(v35);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return v18;
  }
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t result = sub_21FA26790();
  uint64_t v20 = result;
  if (!result) {
    goto LABEL_28;
  }
LABEL_11:
  if (v20 >= 1)
  {
    if ((v12 & 0xC000000000000001) != 0)
    {
      uint64_t v22 = 0;
      do
      {
        uint64_t v23 = MEMORY[0x223C559B0](v22, v12);
        swift_weakInit();
        uint64_t v24 = *(void **)(v23 + 32);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v23 + 32) = v24;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v24 = sub_21F76B290(0, v24[2] + 1, 1, v24);
          *(void *)(v23 + 32) = v24;
        }
        unint64_t v27 = v24[2];
        unint64_t v26 = v24[3];
        if (v27 >= v26 >> 1)
        {
          uint64_t v24 = sub_21F76B290((void *)(v26 > 1), v27 + 1, 1, v24);
          *(void *)(v23 + 32) = v24;
        }
        ++v22;
        v24[2] = v27 + 1;
        sub_21F76C9DC((uint64_t)v38, (uint64_t)&v24[v27 + 4], &qword_26AD47910);
        swift_unknownObjectRelease();
      }
      while (v20 != v22);
    }
    else
    {
      uint64_t v28 = 0;
      do
      {
        uint64_t v29 = *(void *)(v12 + 8 * v28 + 32);
        swift_weakInit();
        char v30 = *(void **)(v29 + 32);
        swift_retain();
        char v31 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v29 + 32) = v30;
        if ((v31 & 1) == 0)
        {
          char v30 = sub_21F76B290(0, v30[2] + 1, 1, v30);
          *(void *)(v29 + 32) = v30;
        }
        unint64_t v33 = v30[2];
        unint64_t v32 = v30[3];
        if (v33 >= v32 >> 1)
        {
          char v30 = sub_21F76B290((void *)(v32 > 1), v33 + 1, 1, v30);
          *(void *)(v29 + 32) = v30;
        }
        ++v28;
        v30[2] = v33 + 1;
        sub_21F76C9DC((uint64_t)v38, (uint64_t)&v30[v33 + 4], &qword_26AD47910);
        swift_release();
      }
      while (v20 != v28);
    }
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F80245C(uint64_t **a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, void *))
{
  uint64_t v25 = MEMORY[0x263F8EE78];
  uint64_t v11 = *a1;
  uint64_t v12 = swift_retain();
  MEMORY[0x223C55260](v12);
  if (*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v13 = a1[1];
  uint64_t v14 = swift_retain();
  MEMORY[0x223C55260](v14);
  if (*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  a4(0);
  uint64_t v15 = a1[2];
  uint64_t v16 = swift_retain();
  MEMORY[0x223C55260](v16);
  if (*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v17 = *v11;
  uint64_t v18 = *v13;
  uint64_t v19 = *v15;
  uint64_t v20 = (void *)swift_allocObject();
  v20[2] = a2;
  v20[3] = a3;
  v20[4] = v17;
  v20[5] = v18;
  void v20[6] = v19;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v21 = a7(v25, a6, v20);
  swift_release();
  swift_release();
  swift_release();
  return v21;
}

uint64_t sub_21F80266C(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  return sub_21F8026A0(a1, a2, a3, (uint64_t)&unk_26D134E70, (uint64_t)sub_21F810B90, (uint64_t (*)(uint64_t, uint64_t, void *))sub_21F78F448);
}

uint64_t sub_21F8026A0(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, void *))
{
  uint64_t v20 = MEMORY[0x263F8EE78];
  uint64_t v11 = *a1;
  uint64_t v12 = swift_retain();
  MEMORY[0x223C55260](v12);
  if (*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v13 = a1[1];
  uint64_t v14 = swift_retain();
  MEMORY[0x223C55260](v14);
  if (*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_21FA25E90();
  }
  sub_21FA25EF0();
  sub_21FA25E60();
  uint64_t v15 = *v11;
  uint64_t v16 = *v13;
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = a2;
  _OWORD v17[3] = a3;
  v17[4] = v15;
  void v17[5] = v16;
  swift_retain();
  swift_retain();
  uint64_t v18 = a6(v20, a5, v17);
  swift_release();
  swift_release();
  return v18;
}

uint64_t sub_21F80282C(uint64_t a1)
{
  return sub_21F75C83C(a1, &qword_26AD45748);
}

uint64_t sub_21F802838(uint64_t a1)
{
  return sub_21F75C83C(a1, &qword_267EE7960);
}

uint64_t sub_21F802844(uint64_t a1)
{
  return sub_21F75C83C(a1, &qword_267EE7958);
}

uint64_t sub_21F802850(uint64_t a1)
{
  return sub_21F75C83C(a1, &qword_267EE7950);
}

uint64_t sub_21F80285C(uint64_t a1)
{
  return sub_21F75C83C(a1, &qword_267EE7948);
}

uint64_t sub_21F802868(uint64_t a1)
{
  return sub_21F75C83C(a1, &qword_267EE7188);
}

uint64_t sub_21F802874(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 24);
  if (*(void *)(v4 + 16))
  {
    unint64_t v5 = sub_21F77E624(a1);
    if (v6)
    {
      uint64_t v7 = *(uint64_t **)(*(void *)(v4 + 56) + 16 * v5);
      swift_endAccess();
      uint64_t v8 = *v7;
      uint64_t v9 = type metadata accessor for AxisMarkValues.Storage(0);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 200))(v9, v9);
      if (v2) {
        return v2;
      }
      __break(1u);
    }
  }
  swift_endAccess();
  swift_retain();
  uint64_t v10 = (uint64_t *)sub_21F75CB84(a1);
  uint64_t v12 = v11;
  swift_release();
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v17 = *(void *)(v2 + 24);
  *(void *)(v2 + 24) = 0x8000000000000000;
  sub_21F75C9E8((uint64_t)v10, v12, a1, isUniquelyReferenced_nonNull_native);
  *(void *)(v2 + 24) = v17;
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v14 = *v10;
  uint64_t v15 = type metadata accessor for AxisMarkValues.Storage(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 200))(v15, v15);
  if (result)
  {
    uint64_t v2 = result;
    swift_release();
    return v2;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F802A14(uint64_t a1)
{
  return sub_21F75C6A0(a1, MEMORY[0x263F1B918]);
}

uint64_t sub_21F802A20(uint64_t a1, __int16 a2)
{
  if (!HIBYTE(a2)) {
    return swift_retain();
  }
  if (HIBYTE(a2) == 1) {
    return sub_21F75C6A0(a1, MEMORY[0x263F8D4F8]);
  }
  char v3 = a2;
  uint64_t v5 = sub_21F75C83C(a1, &qword_26AD44F98);
  char v6 = &v5;
  uint64_t v4 = swift_allocObject();
  *(unsigned char *)(v4 + 16) = v3 & 1;
  return sub_21F80155C(&v6, (uint64_t)sub_21F811380, v4, (uint64_t)&unk_26D1354B0, (uint64_t)sub_21F8113B8, (uint64_t (*)(uint64_t, uint64_t, void *))sub_21F809858);
}

uint64_t sub_21F802AF0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3 = a1;
  if (a3)
  {
    if (a3 == 1) {
      return sub_21F75C83C(a1, &qword_26AD45358);
    }
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_21F75C83C(v3, &qword_267EE78F0);
    uint64_t v9 = &v8;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a2;
    return sub_21F7FC984(&v9, (uint64_t)sub_21F80FB30, v6);
  }
  else
  {
    swift_retain();
  }
  return v3;
}

uint64_t sub_21F802BB4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3 = a1;
  if (a3)
  {
    if (a3 == 1) {
      return sub_21F75C83C(a1, &qword_26AD46C18);
    }
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_21F75C83C(v3, &qword_267EE7900);
    uint64_t v9 = &v8;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a2;
    return sub_21F7FC844(&v9, (uint64_t)sub_21F81158C, v6);
  }
  else
  {
    swift_retain();
  }
  return v3;
}

uint64_t sub_21F802C78(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3 = a1;
  if (a3)
  {
    if (a3 == 1) {
      return sub_21F75C83C(a1, &qword_26AD44BB0);
    }
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_21F75C83C(v3, &qword_267EE7908);
    uint64_t v9 = &v8;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a2;
    return sub_21F7FC704(&v9, (uint64_t)sub_21F81158C, v6);
  }
  else
  {
    swift_retain();
  }
  return v3;
}

uint64_t sub_21F802D3C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3 = a1;
  if (a3)
  {
    if (a3 == 1) {
      return sub_21F75C6A0(a1, MEMORY[0x263F184E0]);
    }
    swift_retain();
    uint64_t v7 = sub_21F75C83C(v3, &qword_267EE7910);
    uint64_t v8 = &v7;
    return sub_21F7FC5C4(&v8, (uint64_t)sub_21F80FC2C, a2);
  }
  else
  {
    swift_retain();
  }
  return v3;
}

uint64_t sub_21F802DE8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3 = a1;
  if (a3)
  {
    if (a3 == 1) {
      return sub_21F75C83C(a1, &qword_267EE7920);
    }
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_21F75C83C(v3, &qword_267EE7938);
    uint64_t v9 = &v8;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a2;
    return sub_21F7FC484(&v9, (uint64_t)sub_21F81158C, v6);
  }
  else
  {
    swift_retain();
  }
  return v3;
}

uint64_t sub_21F802EAC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3 = a1;
  if (a3)
  {
    if (a3 == 1) {
      return sub_21F75C83C(a1, &qword_267EE7980);
    }
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_21F75C83C(v3, &qword_267EE7988);
    uint64_t v9 = &v8;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a2;
    return sub_21F7FDDE4(&v9, (uint64_t)sub_21F81158C, v6);
  }
  else
  {
    swift_retain();
  }
  return v3;
}

uint64_t sub_21F802F70@<X0>(uint64_t a1@<X8>)
{
  sub_21F76CA40(&qword_26AD44B70);
  uint64_t v2 = swift_dynamicCastClass();
  if (!v2)
  {
    sub_21F76CA40(&qword_26AD44B68);
    uint64_t v10 = swift_dynamicCastClass();
    if (!v10)
    {
      uint64_t result = swift_release();
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(unsigned char *)(a1 + 96) = -1;
      return result;
    }
    uint64_t v11 = v10;
    swift_retain();
    sub_21F7676B0();
    swift_beginAccess();
    uint64_t v17 = *(void *)(v11 + 40);
    if (v17)
    {
      uint64_t v18 = *(void *)(v11 + 128);
      uint64_t v15 = *(void *)(v11 + 112);
      uint64_t v16 = *(void *)(v11 + 120);
      uint64_t v14 = *(void *)(v11 + 104);
      uint64_t v3 = *(unsigned __int8 *)(v11 + 96);
      uint64_t v5 = *(void *)(v11 + 80);
      uint64_t v4 = *(void *)(v11 + 88);
      uint64_t v7 = *(void *)(v11 + 64);
      uint64_t v6 = *(void *)(v11 + 72);
      uint64_t v12 = v11 + 48;
      uint64_t v9 = *(void *)(v11 + 48);
      uint64_t v8 = *(void *)(v12 + 8);
      goto LABEL_7;
    }
LABEL_10:
    uint64_t result = sub_21FA266E0();
    __break(1u);
    return result;
  }
  swift_retain();
  sub_21F7676B0();
  swift_beginAccess();
  uint64_t v17 = *(void *)(v2 + 40);
  if (!v17) {
    goto LABEL_10;
  }
  uint64_t v18 = *(void *)(v2 + 128);
  uint64_t v15 = *(void *)(v2 + 112);
  uint64_t v16 = *(void *)(v2 + 120);
  uint64_t v14 = *(void *)(v2 + 104);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 96);
  uint64_t v5 = *(void *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 88);
  uint64_t v7 = *(void *)(v2 + 64);
  uint64_t v6 = *(void *)(v2 + 72);
  uint64_t v9 = *(void *)(v2 + 48);
  uint64_t v8 = *(void *)(v2 + 56);
LABEL_7:
  swift_retain();
  swift_retain();
  sub_21F7642FC(v7);
  swift_bridgeObjectRetain();
  sub_21F7637E4(v4, v3);
  uint64_t result = swift_release_n();
  *(void *)a1 = v17;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = v3;
  *(void *)(a1 + 64) = v14;
  *(void *)(a1 + 72) = v15;
  *(void *)(a1 + 80) = v16;
  *(void *)(a1 + 88) = v18;
  *(unsigned char *)(a1 + 96) = v2 == 0;
  return result;
}

uint64_t sub_21F80319C@<X0>(uint64_t a1@<X8>)
{
  sub_21F76CA40(&qword_267EE7928);
  uint64_t v2 = swift_dynamicCastClass();
  if (v2)
  {
    uint64_t v3 = v2;
    swift_retain();
    sub_21F7676B0();
    swift_beginAccess();
    sub_21F76C9DC(v3 + 40, (uint64_t)v8, &qword_267EE7930);
    sub_21F76C9DC((uint64_t)v8, (uint64_t)v17, &qword_267EE7930);
    if (sub_21F7982D8(v17) != 1)
    {
      sub_21F76C9DC((uint64_t)v8, (uint64_t)&v9, &qword_267EE7930);
      long long v22 = v13;
      long long v23 = v14;
      long long v24 = v15;
      long long v25 = v16;
      long long v18 = v9;
      long long v19 = v10;
      long long v20 = v11;
      long long v21 = v12;
      sub_21F810490((uint64_t)&v9, (void (*)(uint64_t, uint64_t))sub_21F811404);
      swift_release_n();
      sub_21F810514((uint64_t)&v18);
LABEL_7:
      sub_21F76C9DC((uint64_t)&v18, (uint64_t)v8, &qword_267EE74E8);
      sub_21F76C9DC((uint64_t)v8, (uint64_t)v17, &qword_267EE74E8);
      nullsub_1(v17, v6);
      return sub_21F76C9DC((uint64_t)v17, a1, &qword_26AD491E0);
    }
  }
  else
  {
    sub_21F76CA40(&qword_267EE7998);
    uint64_t v4 = swift_dynamicCastClass();
    if (!v4)
    {
      swift_release();
      sub_21F772F60((uint64_t)v17);
      return sub_21F76C9DC((uint64_t)v17, a1, &qword_26AD491E0);
    }
    uint64_t v5 = v4;
    swift_retain();
    sub_21F7676B0();
    swift_beginAccess();
    sub_21F76C9DC(v5 + 40, (uint64_t)v8, &qword_26AD476C8);
    sub_21F76C9DC((uint64_t)v8, (uint64_t)v17, &qword_26AD476C8);
    if (sub_21F7982D8(v17) != 1)
    {
      sub_21F76C9DC((uint64_t)v8, (uint64_t)&v9, &qword_26AD476C8);
      long long v22 = v13;
      long long v23 = v14;
      long long v24 = v15;
      long long v25 = v16;
      long long v18 = v9;
      long long v19 = v10;
      long long v20 = v11;
      long long v21 = v12;
      sub_21F810490((uint64_t)&v9, (void (*)(uint64_t, uint64_t))sub_21F811404);
      swift_release_n();
      sub_21F755D50((uint64_t)&v18);
      goto LABEL_7;
    }
  }
  uint64_t result = sub_21FA266E0();
  __break(1u);
  return result;
}

uint64_t sub_21F803444@<X0>(uint64_t a1@<X8>)
{
  sub_21F76CA40(&qword_26AD44868);
  uint64_t v2 = swift_dynamicCastClass();
  if (v2)
  {
    swift_retain();
    sub_21F7676B0();
    swift_beginAccess();
    sub_21F76C978(v2 + 40, (uint64_t)v7, &qword_267EE79A0);
    if (!*(void *)&v7[0])
    {
      uint64_t v3 = &qword_267EE79A0;
LABEL_10:
      sub_21F76CA84((uint64_t)v7, v3);
      uint64_t result = sub_21FA266E0();
      __break(1u);
      return result;
    }
  }
  else
  {
    sub_21F76CA40(&qword_26AD44860);
    uint64_t v4 = swift_dynamicCastClass();
    if (!v4)
    {
      uint64_t result = swift_release();
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(unsigned char *)(a1 + 128) = -1;
      return result;
    }
    uint64_t v5 = v4;
    swift_retain();
    sub_21F7676B0();
    swift_beginAccess();
    sub_21F76C978(v5 + 40, (uint64_t)v7, &qword_26AD476E0);
    if (!*(void *)&v7[0])
    {
      uint64_t v3 = &qword_26AD476E0;
      goto LABEL_10;
    }
  }
  v8[4] = v7[4];
  void v8[5] = v7[5];
  v8[6] = v7[6];
  v8[7] = v7[7];
  v8[0] = v7[0];
  v8[1] = v7[1];
  v8[2] = v7[2];
  v8[3] = v7[3];
  swift_release_n();
  BOOL v9 = v2 == 0;
  return sub_21F76C9DC((uint64_t)v8, a1, &qword_267EE74F0);
}

uint64_t sub_21F803628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(uint64_t **)(a1 + 152);
  uint64_t v70 = *(void *)(a1 + 168);
  uint64_t v71 = *(uint64_t **)(a1 + 160);
  uint64_t v7 = *(void *)(a1 + 192);
  long long v8 = *(_OWORD *)(a1 + 48);
  long long v89 = *(_OWORD *)(a1 + 32);
  long long v90 = v8;
  long long v91 = *(_OWORD *)(a1 + 64);
  char v92 = *(unsigned char *)(a1 + 80);
  long long v9 = *(_OWORD *)(a1 + 16);
  long long v87 = *(_OWORD *)a1;
  long long v88 = v9;
  sub_21F76C9DC(a2, (uint64_t)v81, &qword_26AD43F78);
  uint64_t v10 = v82;
  uint64_t v66 = v3;
  uint64_t v64 = a2;
  if ((v82 & 0x8000000000000000) != 0)
  {
    *(void *)&long long v82 = v82 & 0x7FFFFFFFFFFFFFFFLL;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_21F75BEF4((uint64_t)&v87, (void (*)(uint64_t, unint64_t, unint64_t))sub_21F7B34A4, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B34E8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B34CC);
  }
  else
  {
    long long v83 = v81[0];
    v84[0] = v81[1];
    v84[1] = v82;
    sub_21F76C9DC((uint64_t)&v83 + 8, (uint64_t)v85, &qword_26AD456D8);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_21F75BEF4((uint64_t)&v87, (void (*)(uint64_t, unint64_t, unint64_t))sub_21F7B34A4, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B34E8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B34CC);
    sub_21F810D3C(a2);
    sub_21F80FA14((uint64_t)v85);
    sub_21F76C9DC((uint64_t)v84 + 8, (uint64_t)v86, &qword_26AD456D8);
    sub_21F80FA14((uint64_t)v86);
  }
  uint64_t v11 = *(void *)(a1 + 88);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_21F75BEF4((uint64_t)&v87, (void (*)(uint64_t, unint64_t, unint64_t))sub_21F7B34A4, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B34E8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B34CC);
  sub_21F7841F0(a1);
  swift_retain();
  uint64_t v12 = swift_bridgeObjectRetain();
  unint64_t v13 = sub_21F80F2DC(v12, v7, (uint64_t *)&v87, a1, a3, (uint64_t)v71, v10 >= 0);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_21F782FEC(a1);
  sub_21F75BEF4((uint64_t)&v87, (void (*)(uint64_t, unint64_t, unint64_t))sub_21F7B3450, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B347C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B3460);
  uint64_t v67 = v11;
  swift_bridgeObjectRelease();
  swift_release();
  int v14 = *(unsigned __int8 *)(a1 + 106);
  if (v13 >> 62)
  {
    type metadata accessor for AnySignal();
    swift_bridgeObjectRetain_n();
    unint64_t v15 = sub_21FA266F0();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    sub_21FA268E0();
    type metadata accessor for AnySignal();
    unint64_t v15 = v13;
  }
  long long v16 = (void *)swift_allocObject();
  void v16[2] = sub_21F80ED64;
  v16[3] = 0;
  uint64_t v65 = v13;
  v16[4] = v13;
  sub_21F76CA40(&qword_26AD44B78);
  swift_allocObject();
  uint64_t v17 = sub_21F782D08(v15, (uint64_t)sub_21F810DA0, (uint64_t)v16, (uint64_t)&unk_26D135410, (uint64_t)sub_21F811258, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
  sub_21F782CAC((uint64_t)&v88, (uint64_t)v93);
  sub_21F782CAC((uint64_t)v93, (uint64_t)v103);
  uint64_t v18 = (v104 >> 61) & 3;
  uint64_t v19 = a3;
  if (v18)
  {
    if (v18 != 1)
    {
      v104 &= 0x9FFFFFFFFFFFFFFFLL;
      sub_21F76C9DC((uint64_t)v103, (uint64_t)v106, &qword_26AD43F78);
      uint64_t result = swift_dynamicCastClass();
      if (result)
      {
        long long v23 = (uint64_t *)result;
        uint64_t v24 = *(void *)(a1 + 128);
        swift_retain();
        uint64_t v25 = sub_21F7C0E00((uint64_t *)&v87, v14, v23, v24);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v102[0] = (uint64_t *)v66[7];
        v66[7] = 0x8000000000000000;
        sub_21F783274(v25, v14, isUniquelyReferenced_nonNull_native);
        v66[7] = (uint64_t)v102[0];
        goto LABEL_18;
      }
LABEL_56:
      __break(1u);
      return result;
    }
    long long v20 = v106;
  }
  else
  {
    long long v20 = &v105;
  }
  v104 &= 0x9FFFFFFFFFFFFFFFLL;
  sub_21F76C9DC((uint64_t)v103, (uint64_t)v20, &qword_26AD49C98);
  sub_21F76CA40(&qword_26AD49F88);
  uint64_t result = swift_dynamicCastClass();
  if (!result)
  {
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  long long v22 = (uint64_t *)result;
  sub_21F76C9DC(v64, (uint64_t)v79, &qword_26AD43F78);
  if (v80 < 0)
  {
    v80 &= ~0x8000000000000000;
    swift_retain_n();
    goto LABEL_17;
  }
  uint64_t result = swift_dynamicCastClass();
  if (!result) {
    goto LABEL_55;
  }
  uint64_t v97 = result;
  v96[0] = v22;
  v102[0] = &v97;
  v102[1] = v96;
  swift_retain_n();
  swift_retain();
  long long v22 = (uint64_t *)sub_21F7FE6A8(v102, (uint64_t)sub_21F804438, 0);
LABEL_17:
  uint64_t v27 = sub_21F784334((uint64_t *)&v87, v14, v22, *(void *)(a1 + 128));
  char v28 = swift_isUniquelyReferenced_nonNull_native();
  v102[0] = (uint64_t *)v66[7];
  v66[7] = 0x8000000000000000;
  sub_21F783274(v27, v14, v28);
  v66[7] = (uint64_t)v102[0];
  swift_release();
LABEL_18:
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v66[7] + 16) && (sub_21F75BD50(v14), (v29 & 1) != 0))
  {
    sub_21F76CA40(&qword_26AD44B60);
    char v30 = (uint64_t *)swift_dynamicCastClass();
    if (v30) {
      swift_retain();
    }
  }
  else
  {
    char v30 = 0;
  }
  sub_21F782CAC((uint64_t)v93, (uint64_t)&v97);
  uint64_t v31 = v101;
  unint64_t v32 = v101 & 0x9FFFFFFFFFFFFFFFLL;
  v101 &= 0x9FFFFFFFFFFFFFFFLL;
  if ((v31 & 0x4000000000000000) != 0)
  {
    sub_21F76C9DC((uint64_t)&v97, (uint64_t)v102, &qword_26AD43F78);
  }
  else if ((v32 & 0x8000000000000000) == 0)
  {
    uint64_t v33 = v100;
    uint64_t v34 = v99;
    uint64_t v35 = v98;
    int v63 = v14;
    uint64_t v36 = v17;
    unint64_t v37 = v99 >> 8;
    sub_21F7B34A4(v98, v99, SBYTE1(v99));
    sub_21F7B34A4(v33, v31, SBYTE1(v31));
    uint64_t v38 = v35;
    uint64_t v19 = a3;
    char v39 = v37;
    uint64_t v17 = v36;
    int v14 = v63;
    sub_21F7B3450(v38, v34, v39);
    sub_21F7B3450(v33, v31, SBYTE1(v31));
    if (v30)
    {
      sub_21F76CA40(&qword_26AD49F40);
      uint64_t v40 = swift_dynamicCastClass();
      if (v40)
      {
        uint64_t v41 = v40;
        swift_retain();
        char v42 = swift_isUniquelyReferenced_nonNull_native();
        v102[0] = (uint64_t *)v66[3];
        v66[3] = 0x8000000000000000;
        sub_21F872F1C(v41, v63, v42);
        v66[3] = (uint64_t)v102[0];
        swift_bridgeObjectRelease();
      }
    }
  }
  uint64_t v76 = v6;
  uint64_t v77 = v19;
  v78[0] = &v77;
  v78[1] = (uint64_t *)&v76;
  uint64_t v75 = v71;
  v78[2] = (uint64_t *)&v75;
  uint64_t v43 = swift_allocObject();
  long long v44 = v90;
  *(_OWORD *)(v43 + 48) = v89;
  *(_OWORD *)(v43 + 64) = v44;
  *(_OWORD *)(v43 + 80) = v91;
  *(unsigned char *)(v43 + 96) = v92;
  long long v45 = v88;
  *(_OWORD *)(v43 + 16) = v87;
  *(_OWORD *)(v43 + 32) = v45;
  swift_retain();
  swift_retain();
  sub_21F75BEF4((uint64_t)&v87, (void (*)(uint64_t, unint64_t, unint64_t))sub_21F7B34A4, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B34E8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B34CC);
  swift_retain();
  uint64_t v46 = sub_21F7FFDA0(v78, (uint64_t)sub_21F810E78, v43);
  char v47 = swift_isUniquelyReferenced_nonNull_native();
  v96[0] = v66[6];
  v66[6] = 0x8000000000000000;
  sub_21F783280(v46, v14, v47);
  v66[6] = v96[0];
  swift_bridgeObjectRelease();
  if (*(void *)(v67 + 16))
  {
    if (v30)
    {
      sub_21F782CAC((uint64_t)v93, (uint64_t)v94);
      uint64_t v69 = (v95 >> 61) & 3;
      v95 &= 0x9FFFFFFFFFFFFFFFLL;
      if (v69 > 1) {
        int v48 = &qword_26AD43F78;
      }
      else {
        int v48 = &qword_26AD49C98;
      }
      sub_21F76C9DC((uint64_t)v94, (uint64_t)v96, v48);
      uint64_t v49 = *(uint64_t **)(a1 + 128);
      uint64_t v61 = *(void *)(a1 + 184);
      uint64_t v62 = *(void *)(a1 + 120);
      uint64_t v50 = *(void *)(a1 + 136);
      swift_retain_n();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      sub_21F805074(v67, v65, v14, v30, v69, v71, v6, v61, v70, v62, v49, v50);
      uint64_t v73 = v17;
      uint64_t v74 = &v73;
      swift_retain();
      sub_21F80155C(&v74, (uint64_t)sub_21F80ED7C, 0, (uint64_t)&unk_26D1350C8, (uint64_t)sub_21F80FD84, (uint64_t (*)(uint64_t, uint64_t, void *))sub_21F80B618);
      uint64_t v51 = *v66;
      if (*(void *)(*v66 + 16) && (unint64_t v52 = sub_21F75BD50(v14), (v53 & 1) != 0))
      {
        uint64_t v54 = *(void *)(*(void *)(v51 + 56) + 8 * v52);
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v54 = MEMORY[0x263F8EE78];
      }
      swift_retain();
      uint64_t v55 = swift_bridgeObjectRetain();
      MEMORY[0x223C55260](v55);
      if (*(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_21FA25E90();
      }
      sub_21FA25EF0();
      sub_21FA25E60();
      swift_bridgeObjectRelease();
      char v56 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v72 = *v66;
      *uint64_t v66 = 0x8000000000000000;
      sub_21F872DE4(v54, v14, v56);
      *uint64_t v66 = v72;
      swift_bridgeObjectRelease();
      uint64_t v57 = swift_retain();
      MEMORY[0x223C55260](v57);
      if (*(void *)((v66[1] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v66[1] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_21FA25E90();
      }
      sub_21FA25EF0();
      sub_21FA25E60();
      uint64_t v58 = swift_retain();
      MEMORY[0x223C55260](v58);
      if (*(void *)((v66[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v66[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_21FA25E90();
      }
      sub_21FA25EF0();
      sub_21FA25E60();
      uint64_t v59 = swift_retain();
      MEMORY[0x223C55260](v59);
      if (v14) {
        uint64_t v60 = v66[5];
      }
      else {
        uint64_t v60 = v66[4];
      }
      if (*(void *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_21FA25E90();
      }
      sub_21FA25EF0();
      sub_21FA25E60();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release_n();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return sub_21F75BEF4((uint64_t)&v87, (void (*)(uint64_t, unint64_t, unint64_t))sub_21F7B3450, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B347C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B3460);
}

uint64_t sub_21F8043D4@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  type metadata accessor for AxisMarkValues.Storage.Stride(0);
  swift_storeEnumTagMultiPayload();
  uint64_t result = type metadata accessor for AxisMarkValues.Storage(0);
  uint64_t v3 = *(int *)(result + 24);
  *(unsigned char *)(a1 + *(int *)(result + 20)) = 2;
  *(unsigned char *)(a1 + v3) = 2;
  return result;
}

uint64_t sub_21F804438@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_21F96BBA0(**a1, *a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_21F80446C@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v46 = a3;
  uint64_t v45 = sub_21F76CA40(&qword_26AD4A490);
  MEMORY[0x270FA5388](v45);
  long long v44 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  long long v8 = (char *)&v39 - v7;
  uint64_t v9 = sub_21FA241F0();
  uint64_t v10 = *(void **)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  unint64_t v15 = (char *)&v39 - v14;
  uint64_t v41 = sub_21F76CA40((uint64_t *)&unk_26AD4A5E0);
  MEMORY[0x270FA5388](v41);
  char v42 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v43 = (uint64_t)&v39 - v18;
  uint64_t v19 = (uint64_t)a1[1];
  uint64_t v20 = **a1;
  long long v21 = (void (**)(char *, uint64_t))a1[2];
  sub_21F782CAC(a2 + 16, (uint64_t)v48);
  sub_21F782CAC((uint64_t)v48, (uint64_t)v49);
  uint64_t v22 = (v50 >> 61) & 3;
  if (v22)
  {
    if (v22 != 1)
    {
      v50 &= 0x9FFFFFFFFFFFFFFFLL;
      sub_21F76C9DC((uint64_t)v49, (uint64_t)v51, &qword_26AD43F78);
      if (qword_26AD43F50 == -1) {
        return sub_21F7F3EA0((uint64_t)&unk_26AD51F78, v46);
      }
LABEL_13:
      swift_once();
      return sub_21F7F3EA0((uint64_t)&unk_26AD51F78, v46);
    }
    v50 &= 0x9FFFFFFFFFFFFFFFLL;
    sub_21F76C9DC((uint64_t)v49, (uint64_t)v51, &qword_26AD49C98);
    int64_t v23 = *(void *)(v20 + 16);
    if (v23)
    {
      uint64_t v47 = MEMORY[0x263F8EE78];
      sub_21F76CFE0(0, v23, 0);
      __break(1u);
    }
    else
    {
      sub_21F90F3C8(MEMORY[0x263F8EE78]);
      if ((v25 & 1) == 0)
      {
        sub_21FA23FD0();
        sub_21FA23FD0();
        sub_21F76CEC0();
        if (sub_21FA25C70())
        {
          uint64_t v40 = v19;
          uint64_t v26 = v45;
          uint64_t v27 = &v8[*(int *)(v45 + 48)];
          char v39 = v21;
          char v28 = (void (*)(char *, char *, uint64_t))v10[4];
          v28(v8, v15, v9);
          v28(v27, v12, v9);
          char v29 = v44;
          char v30 = &v44[*(int *)(v26 + 48)];
          uint64_t v31 = (void (*)(char *, char *, uint64_t))v10[2];
          v31(v44, v8, v9);
          v31(v30, v27, v9);
          uint64_t v32 = (uint64_t)v42;
          v28(v42, v29, v9);
          uint64_t v33 = (void (*)(char *, uint64_t))v10[1];
          v33(v30, v9);
          uint64_t v34 = &v29[*(int *)(v45 + 48)];
          v28(v29, v8, v9);
          v28(v34, v27, v9);
          v28((char *)(v32 + *(int *)(v41 + 36)), v34, v9);
          v33(v29, v9);
          uint64_t v35 = v43;
          sub_21F76C9DC(v32, v43, (uint64_t *)&unk_26AD4A5E0);
          sub_21F8BBB5C(v35, v40, v39, v46);
          return sub_21F76CA84(v35, (uint64_t *)&unk_26AD4A5E0);
        }
        __break(1u);
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
    v50 &= 0x9FFFFFFFFFFFFFFFLL;
    sub_21F76C9DC((uint64_t)v49, (uint64_t)v51, &qword_26AD49C98);
    int64_t v24 = *(void *)(v20 + 16);
    if (!v24)
    {
      uint64_t result = sub_21F8C2D48(MEMORY[0x263F8EE78]);
      if ((v38 & 1) == 0) {
        return sub_21F8BB778(v46, *(double *)&result, v37);
      }
      goto LABEL_17;
    }
  }
  uint64_t v47 = MEMORY[0x263F8EE78];
  uint64_t result = (uint64_t)sub_21F76CFE0(0, v24, 0);
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_21F8049A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v51 = sub_21F76CA40(&qword_26AD4A490);
  MEMORY[0x270FA5388](v51);
  unint64_t v50 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v43 - v8;
  uint64_t v10 = sub_21FA241F0();
  uint64_t v11 = *(void **)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v43 - v15;
  uint64_t v47 = sub_21F76CA40((uint64_t *)&unk_26AD4A5E0);
  MEMORY[0x270FA5388](v47);
  int v48 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v49 = (uint64_t)&v43 - v19;
  uint64_t v20 = *(void *)(a1 + 8);
  uint64_t v21 = **(void **)a1;
  uint64_t v22 = *(void (***)(char *, uint64_t))(a1 + 16);
  sub_21F782CAC(a2 + 16, (uint64_t)v52);
  sub_21F782CAC((uint64_t)v52, (uint64_t)v53);
  uint64_t v23 = (v54 >> 61) & 3;
  if (v23)
  {
    if (v23 != 1)
    {
      v54 &= 0x9FFFFFFFFFFFFFFFLL;
      sub_21F76C9DC((uint64_t)v53, (uint64_t)v55, &qword_26AD43F78);
      if (qword_26AD43F50 == -1) {
        return sub_21F7F3EA0((uint64_t)&unk_26AD51F78, a3);
      }
LABEL_11:
      swift_once();
      return sub_21F7F3EA0((uint64_t)&unk_26AD51F78, a3);
    }
    uint64_t v45 = v22;
    uint64_t v46 = a3;
    v54 &= 0x9FFFFFFFFFFFFFFFLL;
    sub_21F76C9DC((uint64_t)v53, (uint64_t)v55, &qword_26AD49C98);
    uint64_t v24 = sub_21F804EAC(v21);
    sub_21F90F3C8(v24);
    a3 = v25;
    uint64_t result = swift_bridgeObjectRelease();
    if ((a3 & 1) == 0)
    {
      sub_21FA23FD0();
      sub_21FA23FD0();
      sub_21F76CEC0();
      if (sub_21FA25C70())
      {
        uint64_t v44 = v20;
        uint64_t v27 = v51;
        char v28 = &v9[*(int *)(v51 + 48)];
        char v29 = (void (*)(char *, char *, uint64_t))v11[4];
        v29(v9, v16, v10);
        v29(v28, v13, v10);
        char v30 = v50;
        uint64_t v31 = &v50[*(int *)(v27 + 48)];
        uint64_t v32 = (void (*)(char *, char *, uint64_t))v11[2];
        v32(v50, v9, v10);
        v32(v31, v28, v10);
        uint64_t v33 = (uint64_t)v48;
        v29(v48, v30, v10);
        uint64_t v34 = (void (*)(char *, uint64_t))v11[1];
        v34(v31, v10);
        uint64_t v35 = &v30[*(int *)(v51 + 48)];
        v29(v30, v9, v10);
        v29(v35, v28, v10);
        v29((char *)(v33 + *(int *)(v47 + 36)), v35, v10);
        v34(v30, v10);
        uint64_t v36 = v49;
        sub_21F76C9DC(v33, v49, (uint64_t *)&unk_26AD4A5E0);
        sub_21F8BBB5C(v36, v44, v45, v46);
        return sub_21F76CA84(v36, (uint64_t *)&unk_26AD4A5E0);
      }
      __break(1u);
      goto LABEL_11;
    }
    __break(1u);
  }
  else
  {
    v54 &= 0x9FFFFFFFFFFFFFFFLL;
    sub_21F76C9DC((uint64_t)v53, (uint64_t)v55, &qword_26AD49C98);
    uint64_t v37 = sub_21F804EAC(v21);
    uint64_t v38 = sub_21F8C2D48(v37);
    double v40 = v39;
    char v42 = v41;
    uint64_t result = swift_bridgeObjectRelease();
    if ((v42 & 1) == 0) {
      return sub_21F8BB778(a3, *(double *)&v38, v40);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_21F804EAC(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    sub_21F76CFE0(0, v2, 0);
    uint64_t result = v8;
    uint64_t v4 = (uint64_t *)(a1 + 32);
    unint64_t v5 = *(void *)(v8 + 16);
    do
    {
      uint64_t v6 = *v4;
      uint64_t v9 = result;
      unint64_t v7 = *(void *)(result + 24);
      if (v5 >= v7 >> 1)
      {
        sub_21F76CFE0((char *)(v7 > 1), v5 + 1, 1);
        uint64_t result = v9;
      }
      *(void *)(result + 16) = v5 + 1;
      *(void *)(result + 8 * v5 + 32) = v6;
      ++v4;
      ++v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_21F804F78(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    sub_21F7A2B58(0, v1, 0);
    uint64_t v2 = v14;
    uint64_t v4 = (uint64_t *)(a1 + 40);
    uint64_t v5 = MEMORY[0x263F8D310];
    do
    {
      uint64_t v7 = *(v4 - 1);
      uint64_t v6 = *v4;
      uint64_t v14 = v2;
      unint64_t v8 = *(void *)(v2 + 16);
      unint64_t v9 = *(void *)(v2 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v9 >> 1)
      {
        sub_21F7A2B58((void *)(v9 > 1), v8 + 1, 1);
        uint64_t v2 = v14;
      }
      v4 += 2;
      uint64_t v12 = v5;
      unint64_t v13 = sub_21F7C4884();
      *(void *)&long long v11 = v7;
      *((void *)&v11 + 1) = v6;
      *(void *)(v2 + 16) = v8 + 1;
      sub_21F77F300(&v11, v2 + 40 * v8 + 32);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_21F805074(uint64_t result, uint64_t a2, char a3, uint64_t *a4, char a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12)
{
  uint64_t v12 = result;
  unint64_t v107 = MEMORY[0x263F8EE78];
  unint64_t v108 = MEMORY[0x263F8EE78];
  unint64_t v13 = *(void *)(result + 16);
  if (!v13)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v38 = MEMORY[0x263F8EE78];
    long long v91 = (void *)MEMORY[0x263F8EE78];
    if (MEMORY[0x263F8EE78] >> 62) {
      goto LABEL_61;
    }
LABEL_25:
    swift_bridgeObjectRetain_n();
    sub_21FA268E0();
    type metadata accessor for AnySignal();
    unint64_t v39 = v38;
LABEL_26:
    double v40 = (void *)swift_allocObject();
    _OWORD v40[2] = sub_21F993068;
    v40[3] = 0;
    v40[4] = v38;
    uint64_t v76 = (uint64_t *)sub_21F7775BC(v39, (uint64_t)sub_21F8113FC, (uint64_t)v40, &qword_26AD46840, (uint64_t)&unk_26D133FE8, (uint64_t)sub_21F769D8C, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
    uint64_t v74 = v91[2];
    if (!v74)
    {
      swift_bridgeObjectRelease();
LABEL_63:
      swift_bridgeObjectRelease();
      uint64_t v45 = v108;
      if (v108 >> 62) {
        goto LABEL_67;
      }
      swift_bridgeObjectRetain();
      sub_21FA268E0();
      type metadata accessor for AnySignal();
      unint64_t v68 = v45;
LABEL_65:
      uint64_t v69 = (void *)swift_allocObject();
      v69[2] = sub_21F808E1C;
      v69[3] = 0;
      v69[4] = v45;
      uint64_t v70 = sub_21F75C104(v68, (uint64_t)sub_21F7769F8, (uint64_t)v69);
      v106[0] = v76;
      char v92 = v106;
      swift_retain();
      sub_21F80155C((uint64_t **)&v92, (uint64_t)sub_21F9932A0, 0, (uint64_t)&unk_26D133F20, (uint64_t)sub_21F80FE80, (uint64_t (*)(uint64_t, uint64_t, void *))sub_21F78F448);
      unint64_t v104 = v76;
      char v105 = (uint64_t *)&v104;
      swift_retain();
      sub_21F80155C(&v105, (uint64_t)sub_21F993470, 0, (uint64_t)&unk_26D133F20, (uint64_t)sub_21F80FE80, (uint64_t (*)(uint64_t, uint64_t, void *))sub_21F78F448);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      return v70;
    }
    swift_bridgeObjectRetain();
    unint64_t v41 = 0;
    while (1)
    {
      uint64_t v42 = (uint64_t)&v91[4 * v41 + 4];
      uint64_t v43 = *(uint64_t **)v42;
      uint64_t v89 = *(void *)(v42 + 24);
      if (*(unsigned char *)(v42 + 16))
      {
        swift_retain();
        swift_retain();
        uint64_t v44 = 0;
        uint64_t v86 = sub_21F80E330;
        uint64_t v45 = MEMORY[0x263F8EE78];
        uint64_t v46 = MEMORY[0x263F8EE78];
      }
      else
      {
        uint64_t v47 = *(void *)(v42 + 8);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v48 = sub_21F75C6A0(v47, (uint64_t)&type metadata for AxisCompositingLayer);
        swift_release();
        sub_21F76CA40(&qword_26AD4A488);
        uint64_t v49 = swift_allocObject();
        *(_OWORD *)(v49 + 16) = xmmword_21FA28830;
        *(void *)(v49 + 32) = v48;
        char v92 = (uint64_t **)v49;
        sub_21FA25E60();
        uint64_t v44 = v48;
        uint64_t v46 = (uint64_t)v92;
        uint64_t v86 = sub_21F80FE60;
        uint64_t v45 = MEMORY[0x263F8EE78];
      }
      sub_21F76CA40(qword_26AD46370);
      uint64_t v50 = swift_allocObject();
      *(void *)(v50 + 40) = 0;
      *(void *)(v50 + 48) = 0;
      *(void *)(v50 + 56) = 0;
      *(void *)(v50 + 64) = 1;
      *(_WORD *)(v50 + 16) = 256;
      *(void *)(v50 + 80) = 0;
      *(void *)(v50 + 88) = 0;
      *(void *)(v50 + 72) = 0;
      *(void *)(v50 + 24) = v46;
      *(void *)(v50 + 32) = v45;
      if ((unint64_t)v46 >> 62)
      {
        if (v46 < 0) {
          uint64_t v45 = v46;
        }
        else {
          uint64_t v45 = v46 & 0xFFFFFFFFFFFFFF8;
        }
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v51 = sub_21FA26790();
        if (v51)
        {
LABEL_33:
          if (v51 < 1) {
            goto LABEL_66;
          }
          uint64_t v82 = v44;
          uint64_t v84 = v43;
          if ((v46 & 0xC000000000000001) != 0)
          {
            uint64_t v52 = 0;
            do
            {
              uint64_t v53 = MEMORY[0x223C559B0](v52, v46);
              swift_weakInit();
              unint64_t v54 = *(void **)(v53 + 32);
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *(void *)(v53 + 32) = v54;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                unint64_t v54 = sub_21F76B290(0, v54[2] + 1, 1, v54);
                *(void *)(v53 + 32) = v54;
              }
              unint64_t v57 = v54[2];
              unint64_t v56 = v54[3];
              if (v57 >= v56 >> 1)
              {
                unint64_t v54 = sub_21F76B290((void *)(v56 > 1), v57 + 1, 1, v54);
                *(void *)(v53 + 32) = v54;
              }
              ++v52;
              v54[2] = v57 + 1;
              sub_21F76C9DC((uint64_t)&v92, (uint64_t)&v54[v57 + 4], &qword_26AD47910);
              swift_unknownObjectRelease();
            }
            while (v51 != v52);
          }
          else
          {
            uint64_t v58 = 0;
            do
            {
              uint64_t v59 = *(void *)(v46 + 8 * v58 + 32);
              swift_weakInit();
              uint64_t v60 = *(void **)(v59 + 32);
              swift_retain();
              char v61 = swift_isUniquelyReferenced_nonNull_native();
              *(void *)(v59 + 32) = v60;
              if ((v61 & 1) == 0)
              {
                uint64_t v60 = sub_21F76B290(0, v60[2] + 1, 1, v60);
                *(void *)(v59 + 32) = v60;
              }
              unint64_t v63 = v60[2];
              unint64_t v62 = v60[3];
              if (v63 >= v62 >> 1)
              {
                uint64_t v60 = sub_21F76B290((void *)(v62 > 1), v63 + 1, 1, v60);
                *(void *)(v59 + 32) = v60;
              }
              ++v58;
              void v60[2] = v63 + 1;
              sub_21F76C9DC((uint64_t)&v92, (uint64_t)&v60[v63 + 4], &qword_26AD47910);
              swift_release();
            }
            while (v51 != v58);
          }
          swift_bridgeObjectRelease();
          uint64_t v44 = v82;
          uint64_t v43 = v84;
          goto LABEL_54;
        }
      }
      else
      {
        uint64_t v51 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_retain();
        swift_bridgeObjectRetain();
        if (v51) {
          goto LABEL_33;
        }
      }
      swift_bridgeObjectRelease();
LABEL_54:
      swift_unownedRetainStrong();
      swift_unownedRetain();
      swift_unownedRetain();
      swift_retain();
      swift_unownedRelease();
      swift_unownedRelease();
      swift_unownedRetain();
      swift_release();
      uint64_t v64 = (void *)swift_allocObject();
      v64[2] = v86;
      v64[3] = v44;
      v64[4] = v50;
      uint64_t v65 = *(void *)(v50 + 80);
      *(void *)(v50 + 80) = sub_21F811400;
      *(void *)(v50 + 88) = v64;
      sub_21F76D5D8(v65);
      swift_release();
      char v105 = a4;
      v106[0] = v43;
      char v92 = v106;
      unint64_t v93 = &v105;
      uint64_t v103 = a12;
      unint64_t v104 = a11;
      uint64_t v94 = &v104;
      unint64_t v95 = &v103;
      uint64_t v101 = v89;
      uint64_t v102 = (uint64_t)v76;
      uint64_t v96 = &v102;
      uint64_t v97 = &v101;
      uint64_t v100 = v50;
      uint64_t v98 = &v100;
      uint64_t v66 = swift_allocObject();
      *(unsigned char *)(v66 + 16) = a5;
      *(void *)(v66 + 24) = v41;
      *(unsigned char *)(v66 + 32) = a3;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v45 = sub_21F801670((uint64_t **)&v92, (uint64_t)sub_21F810F24, v66, (uint64_t)&unk_26D1351B8, (uint64_t)sub_21F810FE4);
      uint64_t v67 = swift_retain();
      MEMORY[0x223C55260](v67);
      if (*(void *)((v108 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v108 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_21FA25E90();
      }
      ++v41;
      sub_21FA25EF0();
      sub_21FA25E60();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      if (v41 == v74)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_63;
      }
      if (v41 >= v91[2])
      {
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        type metadata accessor for AnySignal();
        swift_bridgeObjectRetain();
        unint64_t v68 = sub_21FA266F0();
        swift_bridgeObjectRelease();
        goto LABEL_65;
      }
    }
  }
  unint64_t v75 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0 || v13 <= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v71 = a2 + 32;
    unint64_t v72 = v13 - 1;
    long long v91 = (void *)MEMORY[0x263F8EE78];
    for (i = v12; ; uint64_t v12 = i)
    {
      uint64_t v81 = v14;
      uint64_t v16 = v12 + v14;
      uint64_t v17 = *(void *)(v12 + v14 + 32);
      char v18 = *(unsigned char *)(v12 + v14 + 40);
      uint64_t v19 = *(void *)(v12 + v14 + 48);
      char v20 = *(unsigned char *)(v12 + v14 + 56);
      uint64_t v21 = *(void *)(v12 + v14 + 80);
      char v22 = *(unsigned char *)(v16 + 88);
      uint64_t v85 = *(void *)(v16 + 96);
      char v83 = *(unsigned char *)(v16 + 104);
      uint64_t v88 = v15;
      if (v75)
      {
        uint64_t v23 = MEMORY[0x223C559B0]();
      }
      else
      {
        uint64_t v23 = *(void *)(v71 + 8 * v15);
        swift_retain();
      }
      unint64_t v104 = a6;
      char v105 = a7;
      v106[0] = (uint64_t *)&v105;
      v106[1] = (uint64_t *)&v104;
      uint64_t v103 = v23;
      v106[2] = &v103;
      uint64_t v24 = swift_allocObject();
      *(unsigned char *)(v24 + 16) = a5;
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v25 = sub_21F80024C(v106, (uint64_t)sub_21F810EDC, v24);
      if (v18)
      {
        uint64_t v26 = 0;
        if ((v20 & 1) == 0) {
          goto LABEL_10;
        }
      }
      else
      {
        swift_retain();
        uint64_t v26 = sub_21F75C6A0(v17, (uint64_t)&type metadata for AxisMarkPreset.Storage);
        swift_release();
        if ((v20 & 1) == 0)
        {
LABEL_10:
          swift_retain();
          uint64_t v27 = sub_21F75C6A0(v19, (uint64_t)&type metadata for AxisMarkPosition.Storage);
          swift_release();
          if ((v22 & 1) == 0) {
            goto LABEL_11;
          }
          goto LABEL_14;
        }
      }
      uint64_t v27 = 0;
      if ((v22 & 1) == 0)
      {
LABEL_11:
        swift_retain();
        uint64_t v28 = sub_21F75C6A0(v21, (uint64_t)&type metadata for AxisMarksContentStorage);
        swift_release();
        goto LABEL_15;
      }
LABEL_14:
      uint64_t v28 = 0;
LABEL_15:
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v29 = sub_21F80757C(v23, v25, v88, a3, a5, v26, v27, v28, a10, a8);
      uint64_t v101 = v30;
      uint64_t v102 = v23;
      char v92 = (uint64_t **)&v102;
      unint64_t v93 = (uint64_t **)&v101;
      uint64_t v99 = a9;
      uint64_t v100 = v31;
      uint64_t v94 = &v100;
      unint64_t v95 = &v99;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v32 = sub_21F8006F8((uint64_t **)&v92, (uint64_t)sub_21F80FDA0, a10);
      uint64_t v33 = swift_retain();
      MEMORY[0x223C55260](v33);
      if (*(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_21FA25E90();
      }
      sub_21FA25EF0();
      sub_21FA25E60();
      swift_retain();
      swift_retain();
      if (swift_isUniquelyReferenced_nonNull_native()) {
        uint64_t v34 = v91;
      }
      else {
        uint64_t v34 = sub_21F7E63F4(0, v91[2] + 1, 1, v91);
      }
      unint64_t v36 = v34[2];
      unint64_t v35 = v34[3];
      if (v36 >= v35 >> 1) {
        uint64_t v34 = sub_21F7E63F4((void *)(v35 > 1), v36 + 1, 1, v34);
      }
      long long v34[2] = v36 + 1;
      long long v91 = v34;
      uint64_t v37 = &v34[4 * v36];
      v37[4] = v29;
      v37[5] = v85;
      *((unsigned char *)v37 + 48) = v83;
      v37[7] = v32;
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      if (v72 == v88)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v38 = v107;
        if (!(v107 >> 62)) {
          goto LABEL_25;
        }
LABEL_61:
        type metadata accessor for AnySignal();
        swift_bridgeObjectRetain_n();
        unint64_t v39 = sub_21FA266F0();
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
      uint64_t v14 = v81 + 80;
      uint64_t v15 = v88 + 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_21F805D6C(uint64_t result, uint64_t a2, char a3, uint64_t *a4, char a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12)
{
  uint64_t v12 = result;
  unint64_t v107 = MEMORY[0x263F8EE78];
  unint64_t v108 = MEMORY[0x263F8EE78];
  unint64_t v13 = *(void *)(result + 16);
  if (!v13)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v38 = MEMORY[0x263F8EE78];
    long long v91 = (void *)MEMORY[0x263F8EE78];
    if (MEMORY[0x263F8EE78] >> 62) {
      goto LABEL_61;
    }
LABEL_25:
    swift_bridgeObjectRetain_n();
    sub_21FA268E0();
    type metadata accessor for AnySignal();
    unint64_t v39 = v38;
LABEL_26:
    double v40 = (void *)swift_allocObject();
    _OWORD v40[2] = sub_21F993068;
    v40[3] = 0;
    v40[4] = v38;
    uint64_t v76 = (uint64_t *)sub_21F7775BC(v39, (uint64_t)sub_21F80FDD4, (uint64_t)v40, &qword_26AD46840, (uint64_t)&unk_26D133FE8, (uint64_t)sub_21F769D8C, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
    uint64_t v74 = v91[2];
    if (!v74)
    {
      swift_bridgeObjectRelease();
LABEL_63:
      swift_bridgeObjectRelease();
      uint64_t v45 = v108;
      if (v108 >> 62) {
        goto LABEL_67;
      }
      swift_bridgeObjectRetain();
      sub_21FA268E0();
      type metadata accessor for AnySignal();
      unint64_t v68 = v45;
LABEL_65:
      uint64_t v69 = (void *)swift_allocObject();
      v69[2] = sub_21F808E1C;
      v69[3] = 0;
      v69[4] = v45;
      uint64_t v70 = sub_21F75C104(v68, (uint64_t)sub_21F7769F8, (uint64_t)v69);
      v106[0] = v76;
      char v92 = v106;
      swift_retain();
      sub_21F80155C((uint64_t **)&v92, (uint64_t)sub_21F9932A0, 0, (uint64_t)&unk_26D133F20, (uint64_t)sub_21F80FE80, (uint64_t (*)(uint64_t, uint64_t, void *))sub_21F78F448);
      unint64_t v104 = v76;
      char v105 = (uint64_t *)&v104;
      swift_retain();
      sub_21F80155C(&v105, (uint64_t)sub_21F993470, 0, (uint64_t)&unk_26D133F20, (uint64_t)sub_21F80FE80, (uint64_t (*)(uint64_t, uint64_t, void *))sub_21F78F448);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      return v70;
    }
    swift_bridgeObjectRetain();
    unint64_t v41 = 0;
    while (1)
    {
      uint64_t v42 = (uint64_t)&v91[4 * v41 + 4];
      uint64_t v43 = *(uint64_t **)v42;
      uint64_t v89 = *(void *)(v42 + 24);
      if (*(unsigned char *)(v42 + 16))
      {
        swift_retain();
        swift_retain();
        uint64_t v44 = 0;
        uint64_t v86 = sub_21F80E330;
        uint64_t v45 = MEMORY[0x263F8EE78];
        uint64_t v46 = MEMORY[0x263F8EE78];
      }
      else
      {
        uint64_t v47 = *(void *)(v42 + 8);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v48 = sub_21F75C6A0(v47, (uint64_t)&type metadata for AxisCompositingLayer);
        swift_release();
        sub_21F76CA40(&qword_26AD4A488);
        uint64_t v49 = swift_allocObject();
        *(_OWORD *)(v49 + 16) = xmmword_21FA28830;
        *(void *)(v49 + 32) = v48;
        char v92 = (uint64_t **)v49;
        sub_21FA25E60();
        uint64_t v44 = v48;
        uint64_t v46 = (uint64_t)v92;
        uint64_t v86 = sub_21F80FE60;
        uint64_t v45 = MEMORY[0x263F8EE78];
      }
      sub_21F76CA40(qword_26AD46370);
      uint64_t v50 = swift_allocObject();
      *(void *)(v50 + 40) = 0;
      *(void *)(v50 + 48) = 0;
      *(void *)(v50 + 56) = 0;
      *(void *)(v50 + 64) = 1;
      *(_WORD *)(v50 + 16) = 256;
      *(void *)(v50 + 80) = 0;
      *(void *)(v50 + 88) = 0;
      *(void *)(v50 + 72) = 0;
      *(void *)(v50 + 24) = v46;
      *(void *)(v50 + 32) = v45;
      if ((unint64_t)v46 >> 62)
      {
        if (v46 < 0) {
          uint64_t v45 = v46;
        }
        else {
          uint64_t v45 = v46 & 0xFFFFFFFFFFFFFF8;
        }
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v51 = sub_21FA26790();
        if (v51)
        {
LABEL_33:
          if (v51 < 1) {
            goto LABEL_66;
          }
          uint64_t v82 = v44;
          uint64_t v84 = v43;
          if ((v46 & 0xC000000000000001) != 0)
          {
            uint64_t v52 = 0;
            do
            {
              uint64_t v53 = MEMORY[0x223C559B0](v52, v46);
              swift_weakInit();
              unint64_t v54 = *(void **)(v53 + 32);
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *(void *)(v53 + 32) = v54;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                unint64_t v54 = sub_21F76B290(0, v54[2] + 1, 1, v54);
                *(void *)(v53 + 32) = v54;
              }
              unint64_t v57 = v54[2];
              unint64_t v56 = v54[3];
              if (v57 >= v56 >> 1)
              {
                unint64_t v54 = sub_21F76B290((void *)(v56 > 1), v57 + 1, 1, v54);
                *(void *)(v53 + 32) = v54;
              }
              ++v52;
              v54[2] = v57 + 1;
              sub_21F76C9DC((uint64_t)&v92, (uint64_t)&v54[v57 + 4], &qword_26AD47910);
              swift_unknownObjectRelease();
            }
            while (v51 != v52);
          }
          else
          {
            uint64_t v58 = 0;
            do
            {
              uint64_t v59 = *(void *)(v46 + 8 * v58 + 32);
              swift_weakInit();
              uint64_t v60 = *(void **)(v59 + 32);
              swift_retain();
              char v61 = swift_isUniquelyReferenced_nonNull_native();
              *(void *)(v59 + 32) = v60;
              if ((v61 & 1) == 0)
              {
                uint64_t v60 = sub_21F76B290(0, v60[2] + 1, 1, v60);
                *(void *)(v59 + 32) = v60;
              }
              unint64_t v63 = v60[2];
              unint64_t v62 = v60[3];
              if (v63 >= v62 >> 1)
              {
                uint64_t v60 = sub_21F76B290((void *)(v62 > 1), v63 + 1, 1, v60);
                *(void *)(v59 + 32) = v60;
              }
              ++v58;
              void v60[2] = v63 + 1;
              sub_21F76C9DC((uint64_t)&v92, (uint64_t)&v60[v63 + 4], &qword_26AD47910);
              swift_release();
            }
            while (v51 != v58);
          }
          swift_bridgeObjectRelease();
          uint64_t v44 = v82;
          uint64_t v43 = v84;
          goto LABEL_54;
        }
      }
      else
      {
        uint64_t v51 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_retain();
        swift_bridgeObjectRetain();
        if (v51) {
          goto LABEL_33;
        }
      }
      swift_bridgeObjectRelease();
LABEL_54:
      swift_unownedRetainStrong();
      swift_unownedRetain();
      swift_unownedRetain();
      swift_retain();
      swift_unownedRelease();
      swift_unownedRelease();
      swift_unownedRetain();
      swift_release();
      uint64_t v64 = (void *)swift_allocObject();
      v64[2] = v86;
      v64[3] = v44;
      v64[4] = v50;
      uint64_t v65 = *(void *)(v50 + 80);
      *(void *)(v50 + 80) = sub_21F80FDF8;
      *(void *)(v50 + 88) = v64;
      sub_21F76D5D8(v65);
      swift_release();
      char v105 = a4;
      v106[0] = v43;
      char v92 = v106;
      unint64_t v93 = &v105;
      uint64_t v103 = a12;
      unint64_t v104 = a11;
      uint64_t v94 = &v104;
      unint64_t v95 = &v103;
      uint64_t v101 = v89;
      uint64_t v102 = (uint64_t)v76;
      uint64_t v96 = &v102;
      uint64_t v97 = &v101;
      uint64_t v100 = v50;
      uint64_t v98 = &v100;
      uint64_t v66 = swift_allocObject();
      *(unsigned char *)(v66 + 16) = a5;
      *(void *)(v66 + 24) = v41;
      *(unsigned char *)(v66 + 32) = a3;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v45 = sub_21F801670((uint64_t **)&v92, (uint64_t)sub_21F80FE14, v66, (uint64_t)&unk_26D133F70, (uint64_t)sub_21F80FEB8);
      uint64_t v67 = swift_retain();
      MEMORY[0x223C55260](v67);
      if (*(void *)((v108 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v108 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_21FA25E90();
      }
      ++v41;
      sub_21FA25EF0();
      sub_21FA25E60();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      if (v41 == v74)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_63;
      }
      if (v41 >= v91[2])
      {
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        type metadata accessor for AnySignal();
        swift_bridgeObjectRetain();
        unint64_t v68 = sub_21FA266F0();
        swift_bridgeObjectRelease();
        goto LABEL_65;
      }
    }
  }
  unint64_t v75 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0 || v13 <= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v71 = a2 + 32;
    unint64_t v72 = v13 - 1;
    long long v91 = (void *)MEMORY[0x263F8EE78];
    for (i = v12; ; uint64_t v12 = i)
    {
      uint64_t v81 = v14;
      uint64_t v16 = v12 + v14;
      uint64_t v17 = *(void *)(v12 + v14 + 32);
      char v18 = *(unsigned char *)(v12 + v14 + 40);
      uint64_t v19 = *(void *)(v12 + v14 + 48);
      char v20 = *(unsigned char *)(v12 + v14 + 56);
      uint64_t v21 = *(void *)(v12 + v14 + 80);
      char v22 = *(unsigned char *)(v16 + 88);
      uint64_t v85 = *(void *)(v16 + 96);
      char v83 = *(unsigned char *)(v16 + 104);
      uint64_t v88 = v15;
      if (v75)
      {
        uint64_t v23 = MEMORY[0x223C559B0]();
      }
      else
      {
        uint64_t v23 = *(void *)(v71 + 8 * v15);
        swift_retain();
      }
      unint64_t v104 = a6;
      char v105 = a7;
      v106[0] = (uint64_t *)&v105;
      v106[1] = (uint64_t *)&v104;
      uint64_t v103 = v23;
      v106[2] = &v103;
      uint64_t v24 = swift_allocObject();
      *(unsigned char *)(v24 + 16) = a5;
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v25 = sub_21F801A90(v106, (uint64_t)sub_21F80FD98, v24);
      if (v18)
      {
        uint64_t v26 = 0;
        if ((v20 & 1) == 0) {
          goto LABEL_10;
        }
      }
      else
      {
        swift_retain();
        uint64_t v26 = sub_21F75C6A0(v17, (uint64_t)&type metadata for AxisMarkPreset.Storage);
        swift_release();
        if ((v20 & 1) == 0)
        {
LABEL_10:
          swift_retain();
          uint64_t v27 = sub_21F75C6A0(v19, (uint64_t)&type metadata for AxisMarkPosition.Storage);
          swift_release();
          if ((v22 & 1) == 0) {
            goto LABEL_11;
          }
          goto LABEL_14;
        }
      }
      uint64_t v27 = 0;
      if ((v22 & 1) == 0)
      {
LABEL_11:
        swift_retain();
        uint64_t v28 = sub_21F75C6A0(v21, (uint64_t)&type metadata for AxisMarksContentStorage);
        swift_release();
        goto LABEL_15;
      }
LABEL_14:
      uint64_t v28 = 0;
LABEL_15:
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v29 = sub_21F807980(v23, v25, v88, a3, a5, v26, v27, v28, a10, a8);
      uint64_t v101 = v30;
      uint64_t v102 = v23;
      char v92 = (uint64_t **)&v102;
      unint64_t v93 = (uint64_t **)&v101;
      uint64_t v99 = a9;
      uint64_t v100 = v31;
      uint64_t v94 = &v100;
      unint64_t v95 = &v99;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v32 = sub_21F801F3C((uint64_t **)&v92, (uint64_t)sub_21F80FDA0, a10);
      uint64_t v33 = swift_retain();
      MEMORY[0x223C55260](v33);
      if (*(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_21FA25E90();
      }
      sub_21FA25EF0();
      sub_21FA25E60();
      swift_retain();
      swift_retain();
      if (swift_isUniquelyReferenced_nonNull_native()) {
        uint64_t v34 = v91;
      }
      else {
        uint64_t v34 = sub_21F7E8220(0, v91[2] + 1, 1, v91);
      }
      unint64_t v36 = v34[2];
      unint64_t v35 = v34[3];
      if (v36 >= v35 >> 1) {
        uint64_t v34 = sub_21F7E8220((void *)(v35 > 1), v36 + 1, 1, v34);
      }
      long long v34[2] = v36 + 1;
      long long v91 = v34;
      uint64_t v37 = &v34[4 * v36];
      v37[4] = v29;
      v37[5] = v85;
      *((unsigned char *)v37 + 48) = v83;
      v37[7] = v32;
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      if (v72 == v88)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v38 = v107;
        if (!(v107 >> 62)) {
          goto LABEL_25;
        }
LABEL_61:
        type metadata accessor for AnySignal();
        swift_bridgeObjectRetain_n();
        unint64_t v39 = sub_21FA266F0();
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
      uint64_t v14 = v81 + 80;
      uint64_t v15 = v88 + 1;
    }
  }
  __break(1u);
  return result;
}

double sub_21F806A64@<D0>(double **a1@<X0>, double *a2@<X8>)
{
  double result = **a1;
  *a2 = result;
  return result;
}

uint64_t sub_21F806A74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v4 = **(void **)a1;
  double v5 = **(double **)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  long long v8 = *(_OWORD *)(v6 + 16);
  long long v7 = *(_OWORD *)(v6 + 32);
  v18[0] = *(_OWORD *)v6;
  v18[1] = v8;
  v18[2] = v7;
  long long v10 = *(_OWORD *)(v6 + 64);
  long long v9 = *(_OWORD *)(v6 + 80);
  long long v11 = *(_OWORD *)(v6 + 48);
  uint64_t v19 = *(void *)(v6 + 96);
  v18[4] = v10;
  v18[5] = v9;
  v18[3] = v11;
  uint64_t v12 = *(void *)a2;
  char v13 = *(unsigned char *)(a2 + 8);
  uint64_t v17 = MEMORY[0x263F8EE78];
  sub_21F81051C((uint64_t)v18);
  swift_retain();
  sub_21F92799C(v4, 0, sub_21F806B7C, 0, &v17, v5);
  uint64_t v14 = v17;
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_21F96C6CC((uint64_t)v18, v12, v13, v14, v5);
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  *a3 = v15;
  return result;
}

double sub_21F806B7C(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

double sub_21F806B8C@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(double *)(*(void *)a1 + 8);
  *a2 = result;
  return result;
}

uint64_t sub_21F806B9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v4 = **(void **)a1;
  double v5 = **(double **)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  long long v8 = *(_OWORD *)(v6 + 16);
  long long v7 = *(_OWORD *)(v6 + 32);
  v18[0] = *(_OWORD *)v6;
  v18[1] = v8;
  v18[2] = v7;
  long long v10 = *(_OWORD *)(v6 + 64);
  long long v9 = *(_OWORD *)(v6 + 80);
  long long v11 = *(_OWORD *)(v6 + 48);
  uint64_t v19 = *(void *)(v6 + 96);
  v18[4] = v10;
  v18[5] = v9;
  v18[3] = v11;
  uint64_t v12 = *(void *)a2;
  char v13 = *(unsigned char *)(a2 + 8);
  uint64_t v17 = MEMORY[0x263F8EE78];
  sub_21F81051C((uint64_t)v18);
  swift_retain();
  sub_21F92799C(v4, 1, sub_21F806CA4, 0, &v17, v5);
  uint64_t v14 = v17;
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_21F96C6CC((uint64_t)v18, v12, v13, v14, v5);
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  *a3 = v15;
  return result;
}

double sub_21F806CA4(uint64_t a1)
{
  return *(double *)(a1 + 16);
}

uint64_t sub_21F806CB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)a1;
  memcpy(__dst, *(const void **)(a1 + 8), 0x152uLL);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = **(void **)(a1 + 16);
  sub_21F76C9DC(*(void *)(a1 + 32), (uint64_t)v32, &qword_26AD491E0);
  sub_21F76C9DC(*(void *)(a1 + 40), (uint64_t)v33, &qword_26AD491D8);
  sub_21F76C978(v6, (uint64_t)&v29, &qword_26AD476F0);
  if (*((void *)&v30 + 1))
  {
    long long v26 = v29;
    long long v27 = v30;
    uint64_t v28 = v31;
    double v9 = *(double *)__dst;
    double v10 = *(double *)&__dst[1];
    double v11 = *(double *)&__dst[2];
    uint64_t v12 = __dst[3];
    double v13 = *(double *)&__dst[4];
    double v14 = *(double *)&__dst[5];
    double v15 = *(double *)&__dst[6];
    double v16 = *(double *)&__dst[7];
    uint64_t v17 = __dst[8];
    unint64_t v18 = __dst[9];
    sub_21F76C9DC((uint64_t)&__dst[10], (uint64_t)&v29, &qword_26AD49360);
    sub_21F76C978(v7, (uint64_t)v25, &qword_26AD491E8);
    type metadata accessor for ChartContentRenderContext(0);
    swift_allocObject();
    swift_retain();
    sub_21F75ED5C((uint64_t)__dst);
    swift_bridgeObjectRetain();
    sub_21F77F380((uint64_t)v32);
    sub_21F77F420((uint64_t)v33);
    uint64_t v19 = sub_21F75E24C(a2, v12, v17, v18, (uint64_t)&v29, v8, (uint64_t)v25, (uint64_t)v32, v9, v10, v11, v13, v14, v15, v16, (uint64_t)v33);
    uint64_t v20 = *((void *)&v27 + 1);
    uint64_t v21 = v28;
    char v22 = sub_21F77E0FC(&v26, *((uint64_t *)&v27 + 1));
    sub_21F77F534((uint64_t)v22, 1, v19, v20, v21);
    sub_21F77F4DC((uint64_t)&v26);
    uint64_t result = swift_release();
    unint64_t v24 = v25[0];
  }
  else
  {
    uint64_t result = sub_21F76CA84((uint64_t)&v29, &qword_26AD476F0);
    unint64_t v24 = 0xE000000000000000;
  }
  *a3 = v24;
  return result;
}

uint64_t sub_21F806ED0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_21F7ED430(**(void **)a1, **(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_21F806F04@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_21F8947D0(**(void **)a1, **(void **)(a1 + 8), **(void **)(a1 + 16), **(void **)(a1 + 24));
  *a2 = result;
  return result;
}

uint64_t destroy for EnvironmentSignals()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

void *initializeWithCopy for EnvironmentSignals(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for EnvironmentSignals(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for EnvironmentSignals(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for EnvironmentSignals(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EnvironmentSignals(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentSignals()
{
  return &type metadata for EnvironmentSignals;
}

void sub_21F8071BC(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = **(void **)(a1 + 16);
  if (a2)
  {
    if (a2 == 1)
    {
      int64_t v7 = *(void *)(v6 + 16);
      if (!v7)
      {
        uint64_t v8 = *(char **)(a1 + 8);
        double v9 = (void *)MEMORY[0x263F8EE78];
        sub_21F9F17EC(v9, v5, v8, a3);
        return;
      }
      sub_21F7A24F4(0, v7, 0);
      __break(1u);
LABEL_17:
      sub_21F76CFE0(0, v10, 0);
      __break(1u);
      return;
    }
    if (qword_26AD43F50 != -1) {
      swift_once();
    }
    sub_21F7F3EA0((uint64_t)&unk_26AD51F78, a3);
  }
  else
  {
    int64_t v10 = *(void *)(v6 + 16);
    if (v10) {
      goto LABEL_17;
    }
    sub_21F9F0FE0(v5, a3);
  }
}

uint64_t sub_21F807304@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_21FA241F0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  double v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = **(void **)(a1 + 16);
  if (a2)
  {
    if (a2 == 1)
    {
      uint64_t v12 = *(char **)(a1 + 8);
      int64_t v13 = *(void *)(v11 + 16);
      double v14 = (void *)MEMORY[0x263F8EE78];
      if (v13)
      {
        uint64_t v20 = v12;
        uint64_t v21 = a3;
        char v22 = (void *)MEMORY[0x263F8EE78];
        sub_21F7A24F4(0, v13, 0);
        double v14 = v22;
        uint64_t v15 = v11 + 32;
        do
        {
          sub_21FA23FD0();
          char v22 = v14;
          unint64_t v17 = v14[2];
          unint64_t v16 = v14[3];
          if (v17 >= v16 >> 1)
          {
            sub_21F7A24F4(v16 > 1, v17 + 1, 1);
            double v14 = v22;
          }
          long long v14[2] = v17 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))((unint64_t)v14+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v17, v9, v6);
          v15 += 8;
          --v13;
        }
        while (v13);
        uint64_t v12 = v20;
        a3 = v21;
      }
      sub_21F9F17EC(v14, v10, v12, a3);
      return swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_26AD43F50 != -1) {
        swift_once();
      }
      return sub_21F7F3EA0((uint64_t)&unk_26AD51F78, a3);
    }
  }
  else
  {
    sub_21F804EAC(**(void **)(a1 + 16));
    sub_21F9F0FE0(v10, a3);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_21F80757C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a6)
  {
    uint64_t v16 = a6;
  }
  else
  {
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = a3;
    *(unsigned char *)(v17 + 24) = a4;
    *(unsigned char *)(v17 + 25) = a5;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = sub_21F81159C;
    *(void *)(v18 + 24) = v17;
    uint64_t v16 = sub_21F80A788(MEMORY[0x263F8EE78], (uint64_t)sub_21F8100A8, v18);
  }
  char v29 = a4;
  uint64_t v28 = a3;
  if (a7)
  {
    swift_retain();
    uint64_t v19 = a7;
  }
  else
  {
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = a3;
    *(unsigned char *)(v20 + 24) = a4;
    *(unsigned char *)(v20 + 25) = a5;
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = sub_21F8115A0;
    *(void *)(v21 + 24) = v20;
    swift_retain();
    uint64_t v19 = sub_21F80A4C8(MEMORY[0x263F8EE78], (uint64_t)sub_21F8100A8, v21);
  }
  swift_retain();
  swift_retain();
  if (a8) {
    uint64_t v22 = a8;
  }
  else {
    uint64_t v22 = sub_21F7FDF24((uint64_t)v44, (uint64_t)sub_21F994268, 0);
  }
  uint64_t v42 = v19;
  uint64_t v43 = v16;
  v44[0] = &v43;
  v44[1] = &v42;
  uint64_t v40 = a2;
  uint64_t v41 = a10;
  v44[2] = &v41;
  _OWORD v44[3] = &v40;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a9;
  *(unsigned char *)(v23 + 24) = a5;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v37 = v22;
  uint64_t v38 = a1;
  v39[0] = &v38;
  v39[1] = &v37;
  uint64_t v36 = sub_21F7FE118(v44, (uint64_t)sub_21F811590, v23);
  _OWORD v39[2] = &v36;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = a9;
  *(void *)(v24 + 24) = v28;
  *(unsigned char *)(v24 + 32) = v29;
  *(unsigned char *)(v24 + 33) = a5;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_21F80245C(v39, (uint64_t)sub_21F811158, v24, (void (*)(void))type metadata accessor for AxisMarkLayoutContext, (uint64_t)&unk_26D135348, (uint64_t)sub_21F811194, (uint64_t (*)(uint64_t, uint64_t, void *))sub_21F80B8DC);
  uint64_t v33 = v19;
  uint64_t v34 = v16;
  v35[0] = &v34;
  v35[1] = &v33;
  uint64_t v31 = a10;
  uint64_t v32 = a2;
  _OWORD v35[2] = &v32;
  v35[3] = &v31;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = a9;
  *(unsigned char *)(v25 + 24) = a5;
  swift_retain();
  swift_retain();
  uint64_t v26 = sub_21F7FE3E0(v35, (uint64_t)sub_21F811594, v25);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v26;
}

uint64_t sub_21F807980(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a6)
  {
    uint64_t v16 = a6;
  }
  else
  {
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = a3;
    *(unsigned char *)(v17 + 24) = a4;
    *(unsigned char *)(v17 + 25) = a5;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = sub_21F810098;
    *(void *)(v18 + 24) = v17;
    uint64_t v16 = sub_21F80A788(MEMORY[0x263F8EE78], (uint64_t)sub_21F8100A8, v18);
  }
  char v29 = a4;
  uint64_t v28 = a3;
  if (a7)
  {
    swift_retain();
    uint64_t v19 = a7;
  }
  else
  {
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = a3;
    *(unsigned char *)(v20 + 24) = a4;
    *(unsigned char *)(v20 + 25) = a5;
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = sub_21F8100BC;
    *(void *)(v21 + 24) = v20;
    swift_retain();
    uint64_t v19 = sub_21F80A4C8(MEMORY[0x263F8EE78], (uint64_t)sub_21F8100A8, v21);
  }
  swift_retain();
  swift_retain();
  if (a8) {
    uint64_t v22 = a8;
  }
  else {
    uint64_t v22 = sub_21F7FDF24((uint64_t)v44, (uint64_t)sub_21F994268, 0);
  }
  uint64_t v42 = v19;
  uint64_t v43 = v16;
  v44[0] = &v43;
  v44[1] = &v42;
  uint64_t v40 = a2;
  uint64_t v41 = a10;
  v44[2] = &v41;
  _OWORD v44[3] = &v40;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a9;
  *(unsigned char *)(v23 + 24) = a5;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v37 = v22;
  uint64_t v38 = a1;
  v39[0] = &v38;
  v39[1] = &v37;
  uint64_t v36 = sub_21F7FE118(v44, (uint64_t)sub_21F810104, v23);
  _OWORD v39[2] = &v36;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = a9;
  *(void *)(v24 + 24) = v28;
  *(unsigned char *)(v24 + 32) = v29;
  *(unsigned char *)(v24 + 33) = a5;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_21F80245C(v39, (uint64_t)sub_21F810148, v24, (void (*)(void))type metadata accessor for AxisMarkLayoutContext, (uint64_t)&unk_26D1341C8, (uint64_t)sub_21F8101AC, (uint64_t (*)(uint64_t, uint64_t, void *))sub_21F80B8DC);
  uint64_t v33 = v19;
  uint64_t v34 = v16;
  v35[0] = &v34;
  v35[1] = &v33;
  uint64_t v31 = a10;
  uint64_t v32 = a2;
  _OWORD v35[2] = &v32;
  v35[3] = &v31;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = a9;
  *(unsigned char *)(v25 + 24) = a5;
  swift_retain();
  swift_retain();
  uint64_t v26 = sub_21F7FE3E0(v35, (uint64_t)sub_21F810180, v25);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v26;
}

uint64_t sub_21F807D84@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = **a1;
  char v6 = *(unsigned char *)a1[2];
  uint64_t v7 = *a1[3];
  sub_21F7AD15C((uint64_t)a1[1], a3 + 16);
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 57) = v6;
  *(void *)(a3 + 64) = v7;
  swift_retain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_21F807E00(uint64_t **a1, char a2, uint64_t a3, char a4)
{
  uint64_t v7 = a1[1];
  uint64_t v8 = **a1;
  long long v41 = *((_OWORD *)v7 + 4);
  long long v40 = *((_OWORD *)v7 + 3);
  double v9 = a1[2];
  uint64_t v10 = (double *)a1[3];
  uint64_t v12 = *v9;
  uint64_t v11 = v9[1];
  double v13 = *v10;
  double v14 = v10[1];
  uint64_t v15 = a1[5];
  uint64_t v16 = *a1[4];
  if (*(void *)(v16 + 16) && (unint64_t v17 = sub_21F75BD50(*((unsigned char *)v15 + 57)), (v18 & 1) != 0))
  {
    uint64_t v19 = (unsigned __int8 *)(*(void *)(v16 + 56) + 56 * v17);
    uint64_t v20 = *v19;
    long long v39 = *(_OWORD *)(v19 + 8);
    uint64_t v22 = *((void *)v19 + 3);
    unint64_t v21 = *((void *)v19 + 4);
    long long v38 = *(_OWORD *)(v19 + 40);
    swift_bridgeObjectRetain();
  }
  else
  {
    unint64_t v21 = sub_21F936E60(MEMORY[0x263F8EE78]);
    uint64_t v20 = 0;
    uint64_t v22 = 0;
    long long v39 = 0u;
    long long v38 = 0u;
  }
  swift_beginAccess();
  *(void *)(v8 + 184) = v20;
  *(_OWORD *)(v8 + 192) = v39;
  *(void *)(v8 + 208) = v22;
  *(void *)(v8 + 216) = v21;
  *(_OWORD *)(v8 + 224) = v38;
  uint64_t v23 = swift_bridgeObjectRelease();
  *(void *)(v8 + 240) = 0;
  *(void *)(v8 + 248) = v12;
  *(void *)(v8 + 256) = 0;
  *(void *)(v8 + 264) = v11;
  *(void *)(v8 + 272) = 0;
  *(double *)(v8 + 280) = v13;
  *(void *)(v8 + 288) = 0;
  *(double *)(v8 + 296) = v14;
  double v24 = *((double *)v15 + 8);
  if (v24 <= 0.0) {
    double v24 = 2.0;
  }
  *(double *)(v8 + 304) = v24;
  double v25 = 0.0;
  double v26 = 0.0;
  double v27 = 0.0;
  if ((v41 & 1) == 0)
  {
    uint64_t v28 = *(void *)(*((void *)&v40 + 1) + 16);
    if (v28)
    {
      double v27 = *(double *)(*((void *)&v40 + 1) + 32);
      double v26 = *(double *)(*((void *)&v40 + 1) + 32 + 8 * v28 - 8);
    }
  }
  double v29 = v27;
  double v30 = v26;
  double v31 = 0.0;
  switch(*(unsigned char *)(v8 + 64))
  {
    case 1:
      double v29 = v27;
      double v25 = v14;
      double v30 = v26;
      double v31 = v14;
      break;
    case 2:
      double v29 = 0.0;
      double v25 = v27;
      double v30 = 0.0;
      goto LABEL_14;
    case 3:
      double v29 = v13;
      double v25 = v27;
      double v30 = v13;
LABEL_14:
      double v31 = v26;
      break;
    default:
      break;
  }
  *(double *)(v8 + 312) = v29;
  *(double *)(v8 + 320) = v25;
  *(double *)(v8 + 328) = v30;
  *(double *)(v8 + 336) = v31;
  BOOL v32 = v27 < v26;
  double v33 = -1.0;
  if (v32) {
    double v33 = 1.0;
  }
  *(double *)(v8 + 344) = v33;
  uint64_t v34 = *(void *)(v40 + 16);
  if (v34)
  {
    uint64_t v35 = v40 + 32 + 16 * v34;
    uint64_t v23 = *(void *)(v35 - 16);
    if (v23 != *(void *)(v40 + 32) || *(void *)(v35 - 8) != *(void *)(v40 + 40))
    {
      uint64_t v23 = sub_21FA268D0();
      if ((v23 & 1) != 0 && a2 != 2) {
        *(double *)(v8 + 344) = -*(double *)(v8 + 344);
      }
    }
  }
  MEMORY[0x270FA5388](v23);
  swift_retain();
  uint64_t v36 = sub_21F7E42C4(a3, a4, (void (*)(uint64_t *__return_ptr))sub_21F81100C);
  swift_release();
  swift_bridgeObjectRelease();
  return v36;
}

uint64_t sub_21F80812C(uint64_t **a1, char a2, uint64_t a3, char a4)
{
  uint64_t v7 = a1[1];
  uint64_t v8 = **a1;
  long long v40 = *((_OWORD *)v7 + 4);
  long long v39 = *((_OWORD *)v7 + 3);
  double v9 = a1[2];
  uint64_t v10 = (double *)a1[3];
  uint64_t v12 = *v9;
  uint64_t v11 = v9[1];
  double v13 = *v10;
  double v14 = v10[1];
  uint64_t v15 = a1[5];
  uint64_t v16 = *a1[4];
  if (*(void *)(v16 + 16) && (unint64_t v17 = sub_21F75BD50(*((unsigned char *)v15 + 57)), (v18 & 1) != 0))
  {
    uint64_t v19 = (unsigned __int8 *)(*(void *)(v16 + 56) + 56 * v17);
    uint64_t v20 = *v19;
    long long v38 = *(_OWORD *)(v19 + 8);
    uint64_t v22 = *((void *)v19 + 3);
    unint64_t v21 = *((void *)v19 + 4);
    long long v37 = *(_OWORD *)(v19 + 40);
    swift_bridgeObjectRetain();
  }
  else
  {
    unint64_t v21 = sub_21F936E60(MEMORY[0x263F8EE78]);
    uint64_t v20 = 0;
    uint64_t v22 = 0;
    long long v38 = 0u;
    long long v37 = 0u;
  }
  swift_beginAccess();
  *(void *)(v8 + 184) = v20;
  *(_OWORD *)(v8 + 192) = v38;
  *(void *)(v8 + 208) = v22;
  *(void *)(v8 + 216) = v21;
  *(_OWORD *)(v8 + 224) = v37;
  uint64_t v23 = swift_bridgeObjectRelease();
  *(void *)(v8 + 240) = 0;
  *(void *)(v8 + 248) = v12;
  *(void *)(v8 + 256) = 0;
  *(void *)(v8 + 264) = v11;
  *(void *)(v8 + 272) = 0;
  *(double *)(v8 + 280) = v13;
  *(void *)(v8 + 288) = 0;
  *(double *)(v8 + 296) = v14;
  double v24 = *((double *)v15 + 8);
  if (v24 <= 0.0) {
    double v24 = 2.0;
  }
  *(double *)(v8 + 304) = v24;
  double v25 = 0.0;
  double v26 = 0.0;
  double v27 = 0.0;
  if ((v40 & 1) == 0)
  {
    uint64_t v28 = *(void *)(*((void *)&v39 + 1) + 16);
    if (v28)
    {
      double v27 = *(double *)(*((void *)&v39 + 1) + 32);
      double v26 = *(double *)(*((void *)&v39 + 1) + 32 + 8 * v28 - 8);
    }
  }
  double v29 = v27;
  double v30 = v26;
  double v31 = 0.0;
  switch(*(unsigned char *)(v8 + 64))
  {
    case 1:
      double v29 = v27;
      double v25 = v14;
      double v30 = v26;
      double v31 = v14;
      break;
    case 2:
      double v29 = 0.0;
      double v25 = v27;
      double v30 = 0.0;
      goto LABEL_14;
    case 3:
      double v29 = v13;
      double v25 = v27;
      double v30 = v13;
LABEL_14:
      double v31 = v26;
      break;
    default:
      break;
  }
  *(double *)(v8 + 312) = v29;
  *(double *)(v8 + 320) = v25;
  *(double *)(v8 + 328) = v30;
  *(double *)(v8 + 336) = v31;
  BOOL v32 = v27 < v26;
  double v33 = -1.0;
  if (v32) {
    double v33 = 1.0;
  }
  *(double *)(v8 + 344) = v33;
  uint64_t v34 = *(void *)(v39 + 16);
  if (v34 && *(double *)(v39 + 32 + 8 * v34 - 8) < *(double *)(v39 + 32) && a2 != 2) {
    *(double *)(v8 + 344) = -v33;
  }
  MEMORY[0x270FA5388](v23);
  swift_retain();
  uint64_t v35 = sub_21F7E42C4(a3, a4, (void (*)(uint64_t *__return_ptr))sub_21F80FEE0);
  swift_release();
  swift_bridgeObjectRelease();
  return v35;
}

uint64_t sub_21F808440(void *a1, uint64_t a2, char a3, double *a4, char **a5, uint64_t a6)
{
  void (*v50)(long long *__return_ptr, long long *);
  long long v51;
  long long v52;
  uint64_t v53;
  long long v54[2];
  uint64_t v55;

  uint64_t v7 = a1[1];
  if (!*(void *)(v7 + 16)) {
    goto LABEL_19;
  }
  uint64_t v47 = *(void *)(v7 + 16);
  uint64_t v50 = *(void (**)(long long *__return_ptr, long long *))a4;
  uint64_t v46 = *a1;
  uint64_t v11 = swift_bridgeObjectRetain();
  if (!a3)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v43 = a6;
  uint64_t v44 = a4;
  if (a3 == 1)
  {
LABEL_24:
    __break(1u);
    JUMPOUT(0x21F8087DCLL);
  }
  unint64_t v12 = 0;
  uint64_t v45 = v11;
  double v13 = (uint64_t *)(v11 + 56);
  uint64_t v14 = v47;
  do
  {
    uint64_t v25 = *(v13 - 3);
    uint64_t v24 = *(v13 - 2);
    uint64_t v26 = *(void *)(a2 + 160);
    *(void *)(a2 + 160) = 2;
    *(void *)(a2 + 168) = v12++;
    uint64_t v28 = *(void *)(a2 + 144);
    uint64_t v27 = *(void *)(a2 + 152);
    *(void *)(a2 + 144) = v25;
    *(void *)(a2 + 152) = v24;
    *(void *)(a2 + 176) = v14;
    swift_bridgeObjectRetain_n();
    sub_21F80FEF8(v28, v27, v26);
    *(void *)&v54[0] = v25;
    *((void *)&v54[0] + 1) = v24;
    v50(&v51, v54);
    double v16 = *(double *)&v51;
    if (*(unsigned char *)(a2 + 136) == 2)
    {
      double v29 = v44[2];
      if (*((unsigned char *)v44 + 24)) {
        double v29 = 0.0;
      }
      double v18 = *(double *)&v51 + v29;
    }
    else
    {
      double v18 = *(double *)&v51;
      if (v12 < *(void *)(v45 + 16))
      {
        uint64_t v30 = *v13;
        *(void *)&v54[0] = *(v13 - 1);
        *((void *)&v54[0] + 1) = v30;
        swift_bridgeObjectRetain();
        v50(&v51, v54);
        swift_bridgeObjectRelease();
        double v18 = *(double *)&v51;
      }
    }
    switch(*(unsigned char *)(a2 + 64))
    {
      case 1:
        double v15 = v16;
        double v16 = *(double *)(a2 + 296);
        goto LABEL_6;
      case 2:
        double v15 = *(double *)(a2 + 272);
        double v17 = v15;
        break;
      case 3:
        double v15 = *(double *)(a2 + 280);
        double v17 = v15;
        break;
      default:
        double v15 = v16;
        double v16 = *(double *)(a2 + 288);
LABEL_6:
        double v17 = v18;
        double v18 = v16;
        break;
    }
    *(double *)(a2 + 352) = v15;
    *(double *)(a2 + 360) = v16;
    *(double *)(a2 + 368) = v17;
    *(double *)(a2 + 376) = v18;
    uint64_t v19 = *(void *)(v46 + 16);
    uint64_t v20 = *(void *)(v19 + 32);
    swift_retain();
    uint64_t v21 = sub_21F7E3ED4(v25, v24, v20);
    uint64_t v22 = *(void *)(v19 + 32);
    *(void *)(v19 + 32) = v21;
    uint64_t v23 = *(void *)(v46 + 24);
    *(void *)(v46 + 24) = v21;
    sub_21F808B4C(a2, (uint64_t)a1, a5);
    *(void *)(v46 + 24) = v23;
    *(void *)(v19 + 32) = v22;
    swift_bridgeObjectRelease();
    swift_release();
    v13 += 2;
    uint64_t v14 = v47;
  }
  while (v47 != v12);
  swift_bridgeObjectRelease();
  a6 = v43;
LABEL_19:
  sub_21F76C978(a6, (uint64_t)&v51, &qword_26AD46820);
  if (*((void *)&v52 + 1))
  {
    v54[0] = v51;
    v54[1] = v52;
    uint64_t v55 = v53;
    uint64_t v31 = swift_allocObject();
    uint64_t v32 = *(void *)(*a1 + 24);
    double v33 = *a5;
    sub_21F77F300(v54, v31 + 32);
    *(void *)(v31 + 16) = v32;
    *(void *)(v31 + 24) = v33;
    uint64_t v34 = v31 | 0x2000000000000000;
    *(void *)(v31 + 72) = 0;
  }
  else
  {
    sub_21F76CA84((uint64_t)&v51, &qword_26AD46820);
    uint64_t v35 = (int *)type metadata accessor for SgGroup(0);
    uint64_t v34 = swift_allocBox();
    long long v37 = v36;
    uint64_t v38 = *(void *)(*a1 + 24);
    long long v39 = *a5;
    long long v40 = (char *)v36 + v35[6];
    uint64_t v41 = type metadata accessor for SgClipRect(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v40, 1, 1, v41);
    *long long v37 = v38;
    v37[1] = v39;
    *(void *)((char *)v37 + v35[7]) = 0x3FF0000000000000;
    *(void *)((char *)v37 + v35[8]) = 0;
    *(void *)((char *)v37 + v35[9]) = MEMORY[0x263F8EE78];
    *((unsigned char *)v37 + v35[10]) = 0;
  }
  swift_bridgeObjectRetain();
  return v34;
}

uint64_t sub_21F8087EC(void *a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, char **a5, uint64_t a6)
{
  void (*v45)(long long *__return_ptr, long long *);
  long long v46;
  long long v47;
  uint64_t v48;
  long long v49[2];
  uint64_t v50;

  uint64_t v6 = a1[1];
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v40 = a6;
    uint64_t v45 = *(void (**)(long long *__return_ptr, long long *))a4;
    unsigned int v10 = a3;
    uint64_t v11 = *a1;
    swift_bridgeObjectRetain();
    if (v10 > 1)
    {
      __break(1u);
      JUMPOUT(0x21F808B3CLL);
    }
    uint64_t v12 = 0;
    uint64_t v42 = a3;
    do
    {
      double v22 = *(double *)(v6 + 8 * v12 + 32);
      unint64_t v23 = v12 + 1;
      uint64_t v24 = *(void *)(a2 + 144);
      uint64_t v25 = *(void *)(a2 + 152);
      uint64_t v26 = *(void *)(a2 + 160);
      *(double *)(a2 + 144) = v22;
      *(void *)(a2 + 152) = 0;
      *(void *)(a2 + 160) = v42;
      *(void *)(a2 + 168) = v12;
      *(void *)(a2 + 176) = v7;
      sub_21F80FEF8(v24, v25, v26);
      *(double *)&uint64_t v46 = v22;
      v45(v49, &v46);
      double v14 = *(double *)v49;
      if (*(unsigned char *)(a2 + 136) == 2)
      {
        double v27 = *(double *)(a4 + 16);
        if (*(unsigned char *)(a4 + 24)) {
          double v27 = 0.0;
        }
        double v16 = *(double *)v49 + v27;
      }
      else
      {
        double v16 = *(double *)v49;
        if (v23 < *(void *)(v6 + 16))
        {
          *(void *)&uint64_t v46 = *(void *)(v6 + 8 * v12 + 40);
          v45(v49, &v46);
          double v16 = *(double *)v49;
        }
      }
      ++v12;
      switch(*(unsigned char *)(a2 + 64))
      {
        case 1:
          double v13 = v14;
          double v14 = *(double *)(a2 + 296);
          goto LABEL_5;
        case 2:
          double v13 = *(double *)(a2 + 272);
          double v15 = v13;
          break;
        case 3:
          double v13 = *(double *)(a2 + 280);
          double v15 = v13;
          break;
        default:
          double v13 = v14;
          double v14 = *(double *)(a2 + 288);
LABEL_5:
          double v15 = v16;
          double v16 = v14;
          break;
      }
      *(double *)(a2 + 352) = v13;
      *(double *)(a2 + 360) = v14;
      *(double *)(a2 + 368) = v15;
      *(double *)(a2 + 376) = v16;
      uint64_t v17 = *(void *)(v11 + 16);
      uint64_t v18 = *(void *)(v17 + 32);
      swift_retain();
      uint64_t v19 = sub_21F7E4070(v18, v22);
      uint64_t v20 = *(void *)(v17 + 32);
      *(void *)(v17 + 32) = v19;
      uint64_t v21 = *(void *)(v11 + 24);
      *(void *)(v11 + 24) = v19;
      sub_21F808B4C(a2, (uint64_t)a1, a5);
      *(void *)(v11 + 24) = v21;
      *(void *)(v17 + 32) = v20;
      swift_release();
    }
    while (v7 != v23);
    swift_bridgeObjectRelease();
    a6 = v40;
  }
  sub_21F76C978(a6, (uint64_t)&v46, &qword_26AD46820);
  if (*((void *)&v47 + 1))
  {
    v49[0] = v46;
    v49[1] = v47;
    uint64_t v50 = v48;
    uint64_t v28 = swift_allocObject();
    uint64_t v29 = *(void *)(*a1 + 24);
    uint64_t v30 = *a5;
    sub_21F77F300(v49, v28 + 32);
    *(void *)(v28 + 16) = v29;
    *(void *)(v28 + 24) = v30;
    uint64_t v31 = v28 | 0x2000000000000000;
    *(void *)(v28 + 72) = 0;
  }
  else
  {
    sub_21F76CA84((uint64_t)&v46, &qword_26AD46820);
    uint64_t v32 = (int *)type metadata accessor for SgGroup(0);
    uint64_t v31 = swift_allocBox();
    uint64_t v34 = v33;
    uint64_t v35 = *(void *)(*a1 + 24);
    uint64_t v36 = *a5;
    long long v37 = (char *)v33 + v32[6];
    uint64_t v38 = type metadata accessor for SgClipRect(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 1, 1, v38);
    *uint64_t v34 = v35;
    v34[1] = v36;
    *(void *)((char *)v34 + v32[7]) = 0x3FF0000000000000;
    *(void *)((char *)v34 + v32[8]) = 0;
    *(void *)((char *)v34 + v32[9]) = MEMORY[0x263F8EE78];
    *((unsigned char *)v34 + v32[10]) = 0;
  }
  swift_bridgeObjectRetain();
  return v31;
}

uint64_t sub_21F808B4C(uint64_t a1, uint64_t a2, char **a3)
{
  *(void *)(a1 + 128) = *(void *)(*(void *)a2 + 24);
  uint64_t result = sub_21F7AD15C(a2 + 16, (uint64_t)v29);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 160);
  if (v7 == 255)
  {
    __break(1u);
  }
  else
  {
    long long v24 = *(_OWORD *)(a1 + 144);
    long long v25 = *(_OWORD *)(a1 + 168);
    sub_21F7AD15C((uint64_t)v29, (uint64_t)v26);
    if (v28)
    {
      if (v28 == 1)
      {
        v33[0] = v24;
        LOBYTE(v33[1]) = v7;
        *(_OWORD *)((char *)&v33[1] + 8) = v25;
        (*(void (**)(long long *__return_ptr, _OWORD *))&v26[0])(&v30, v33);
        swift_release();
      }
      else
      {
        memset(v33, 0, 40);
        *((void *)&v31 + 1) = sub_21F76CA40(&qword_267EE7968);
        unint64_t v32 = sub_21F80FF54();
        *(void *)&long long v30 = swift_allocObject();
        sub_21F9C2B4C((uint64_t)v33, v30 + 16);
      }
    }
    else
    {
      long long v30 = v26[0];
      long long v31 = v26[1];
      unint64_t v32 = v27;
    }
    sub_21F7ABE54((uint64_t)v29);
    uint64_t v8 = *((void *)&v31 + 1);
    uint64_t v9 = v32;
    unsigned int v10 = sub_21F77E0FC(&v30, *((uint64_t *)&v31 + 1));
    swift_retain();
    sub_21FA2229C((uint64_t)v10, a1, v8, v9);
    swift_release();
    uint64_t v11 = v29[0];
    uint64_t v12 = (int *)type metadata accessor for SgGroup(0);
    uint64_t v13 = swift_allocBox();
    double v15 = v14;
    uint64_t v16 = *(void *)(*(void *)a2 + 24);
    sub_21F76CA40(&qword_26AD4A470);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_21FA28550;
    *(void *)(v17 + 32) = v11;
    uint64_t v18 = (char *)v15 + v12[6];
    uint64_t v19 = type metadata accessor for SgClipRect(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
    *double v15 = v16;
    v15[1] = v17;
    *(void *)((char *)v15 + v12[7]) = 0x3FF0000000000000;
    *(void *)((char *)v15 + v12[8]) = 0;
    *(void *)((char *)v15 + v12[9]) = MEMORY[0x263F8EE78];
    *((unsigned char *)v15 + v12[10]) = 0;
    uint64_t v20 = *a3;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v20;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v20 = sub_21F76B18C(0, *((void *)v20 + 2) + 1, 1, v20);
      *a3 = v20;
    }
    unint64_t v23 = *((void *)v20 + 2);
    unint64_t v22 = *((void *)v20 + 3);
    if (v23 >= v22 >> 1) {
      uint64_t v20 = sub_21F76B18C((char *)(v22 > 1), v23 + 1, 1, v20);
    }
    *((void *)v20 + 2) = v23 + 1;
    *(void *)&v20[8 * v23 + 32] = v13;
    *a3 = v20;
    swift_release();
    return sub_21F7AD1B8((uint64_t)&v30);
  }
  return result;
}

uint64_t sub_21F808E1C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_21F90A534(a1);
  *a2 = result;
  return result;
}

uint64_t sub_21F808E44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char a3@<W3>, void (*a4)(void)@<X5>, uint64_t a5@<X8>)
{
  uint64_t v6 = **(void **)(a1 + 16);
  sub_21F7E4218(a2, a3, a4);
  swift_beginAccess();
  uint64_t v7 = *(void *)(v6 + 208);
  uint64_t v8 = *(void *)(v6 + 216);
  *(unsigned char *)a5 = *(unsigned char *)(v6 + 184);
  *(_OWORD *)(a5 + 8) = *(_OWORD *)(v6 + 192);
  *(void *)(a5 + 24) = v7;
  *(void *)(a5 + 32) = v8;
  *(_OWORD *)(a5 + 40) = *(_OWORD *)(v6 + 224);
  return swift_bridgeObjectRetain();
}

uint64_t sub_21F808EEC(uint64_t result, void *a2, unsigned __int8 a3, uint64_t a4, uint64_t a5)
{
  void (*v32)(long long *__return_ptr, uint64_t *);
  uint64_t v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  char v61;
  __int16 v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  _OWORD v70[2];
  unint64_t v71;
  char v72;
  long long v73;
  long long v74;
  unint64_t v75;

  uint64_t v40 = *(void *)(result + 16);
  if (v40)
  {
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v41 = 0;
    uint64_t v8 = (uint64_t *)(result + 40);
    uint64_t v34 = a3;
    double v33 = a4;
    while (v34 == 2)
    {
      uint64_t v12 = *(v8 - 1);
      uint64_t v13 = *v8;
      uint64_t v14 = a2[18];
      uint64_t v15 = a2[19];
      uint64_t v16 = a2[20];
      a2[18] = v12;
      a2[19] = v13;
      a2[20] = 2;
      a2[21] = v41;
      a2[22] = v40;
      swift_bridgeObjectRetain_n();
      sub_21F80FEF8(v14, v15, v16);
      uint64_t v17 = *(void *)(a4 + 16);
      uint64_t v18 = *(void *)(v17 + 32);
      swift_retain();
      uint64_t result = sub_21F7E3ED4(v12, v13, v18);
      uint64_t v19 = *(void *)(v17 + 32);
      *(void *)(v17 + 32) = result;
      uint64_t v20 = *(void *)(a4 + 24);
      *(void *)(a4 + 24) = result;
      a2[16] = result;
      uint64_t v21 = a2[20];
      if (*((unsigned char *)a2 + 160) == 0xFF) {
        goto LABEL_16;
      }
      uint64_t v23 = a2[18];
      uint64_t v22 = a2[19];
      uint64_t v36 = a2[21];
      long long v37 = a2[22];
      sub_21F7AD15C(a5, (uint64_t)v70);
      uint64_t v38 = v20;
      long long v39 = v19;
      if (v72)
      {
        if (v72 == 1)
        {
          unint64_t v32 = *(void (**)(long long *__return_ptr, uint64_t *))&v70[0];
          uint64_t v51 = v23;
          uint64_t v52 = v22;
          LOBYTE(v53) = v21;
          unint64_t v54 = v36;
          uint64_t v55 = v37;
          sub_21F7607AC(v23, v22, v21);
          v32(&v73, &v51);
          swift_release();
        }
        else
        {
          *((void *)&v74 + 1) = sub_21F76CA40(&qword_267EE7968);
          unint64_t v75 = sub_21F80FF54();
          uint64_t v24 = swift_allocObject();
          *(void *)&uint64_t v73 = v24;
          LOBYTE(v42) = 2;
          *((void *)&v42 + 1) = 0;
          *(void *)&uint64_t v43 = 0;
          BYTE8(v43) = 1;
          uint64_t v44 = 0uLL;
          LOBYTE(v45) = 1;
          *((void *)&v45 + 1) = 0;
          *(void *)&uint64_t v46 = 0;
          WORD4(v46) = 0;
          BYTE10(v46) = 1;
          *(_WORD *)((char *)&v46 + 11) = 770;
          *(void *)&uint64_t v47 = 0;
          BYTE8(v47) = 1;
          *(void *)&uint64_t v48 = 0;
          BYTE8(v48) = 1;
          uint64_t v49 = 0uLL;
          uint64_t v50 = 2;
          *(unsigned char *)(v24 + 16) = 2;
          *(void *)(v24 + 24) = 0;
          *(unsigned char *)(v24 + 32) = -1;
          *(void *)(v24 + 72) = 0;
          *(_OWORD *)(v24 + 56) = 0u;
          *(_OWORD *)(v24 + 40) = 0u;
          *(_WORD *)(v24 + 80) = 1;
          *(void *)(v24 + 88) = 0;
          *(unsigned char *)(v24 + 96) = 2;
          *(void *)(v24 + 104) = 0;
          *(unsigned char *)(v24 + 112) = -1;
          *(_OWORD *)(v24 + 146) = 0u;
          *(_OWORD *)(v24 + 136) = 0u;
          *(_OWORD *)(v24 + 120) = 0u;
          *(void *)(v24 + 168) = 0;
          long long v25 = v42;
          long long v26 = v43;
          long long v27 = v45;
          *(_OWORD *)(v24 + 208) = v44;
          *(_OWORD *)(v24 + 224) = v27;
          *(_OWORD *)(v24 + 176) = v25;
          *(_OWORD *)(v24 + 192) = v26;
          long long v28 = v46;
          long long v29 = v47;
          long long v30 = v48;
          long long v31 = v49;
          *(unsigned char *)(v24 + 304) = 2;
          *(_OWORD *)(v24 + 272) = v30;
          *(_OWORD *)(v24 + 288) = v31;
          *(_OWORD *)(v24 + 240) = v28;
          *(_OWORD *)(v24 + 256) = v29;
          LOBYTE(v51) = 2;
          uint64_t v52 = 0;
          uint64_t v53 = 0;
          LOBYTE(v54) = 1;
          uint64_t v55 = 0;
          unint64_t v56 = 0;
          unint64_t v57 = 1;
          uint64_t v58 = 0;
          uint64_t v59 = 0;
          uint64_t v60 = 0;
          char v61 = 1;
          unint64_t v62 = 770;
          unint64_t v63 = 0;
          uint64_t v64 = 1;
          uint64_t v65 = 0;
          uint64_t v66 = 1;
          uint64_t v67 = 0;
          unint64_t v68 = 0;
          uint64_t v69 = 2;
          sub_21F8101D0(v23, v22, v21);
          sub_21F8101E4((uint64_t)&v42);
          sub_21F81022C((uint64_t)&v51);
          swift_bridgeObjectRelease_n();
        }
        sub_21F80FEF8(v23, v22, v21);
      }
      else
      {
        uint64_t v73 = v70[0];
        uint64_t v74 = v70[1];
        unint64_t v75 = v71;
      }
      uint64_t v9 = *((void *)&v74 + 1);
      uint64_t v10 = v75;
      uint64_t v11 = sub_21F77E0FC(&v73, *((uint64_t *)&v74 + 1));
      swift_retain();
      sub_21FA22258((uint64_t)v11, (uint64_t)a2, v9, v10);
      swift_release();
      sub_21F7AD1B8((uint64_t)&v73);
      a4 = v33;
      *(void *)(v33 + 24) = v38;
      *(void *)(v17 + 32) = v39;
      swift_bridgeObjectRelease();
      uint64_t result = swift_release();
      v8 += 2;
      if (v40 == ++v41) {
        return swift_bridgeObjectRelease();
      }
    }
    if (v34) {
      goto LABEL_17;
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  return result;
}

uint64_t sub_21F80932C(uint64_t result, double *a2, unsigned __int8 a3, uint64_t a4, uint64_t a5)
{
  void (*v33)(long long *__return_ptr, uint64_t *);
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  char v61;
  __int16 v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  _OWORD v70[2];
  unint64_t v71;
  char v72;
  long long v73;
  long long v74;
  unint64_t v75;

  uint64_t v5 = *(void *)(result + 16);
  if (v5)
  {
    unsigned __int8 v7 = a3;
    long long v37 = a3;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    uint64_t v35 = v7;
    uint64_t v36 = result;
    uint64_t v34 = v5;
    while (v7 <= 1u)
    {
      double v13 = *(double *)(result + 8 * v9 + 32);
      uint64_t v14 = *((void *)a2 + 18);
      uint64_t v15 = *((void *)a2 + 19);
      uint64_t v16 = *((void *)a2 + 20);
      a2[18] = v13;
      a2[19] = 0.0;
      *((void *)a2 + 20) = v37;
      *((void *)a2 + 21) = v9;
      *((void *)a2 + 22) = v5;
      sub_21F80FEF8(v14, v15, v16);
      uint64_t v17 = *(void *)(a4 + 16);
      uint64_t v18 = *(void *)(v17 + 32);
      swift_retain();
      uint64_t result = sub_21F7E4070(v18, v13);
      uint64_t v19 = *(void *)(v17 + 32);
      *(void *)(v17 + 32) = result;
      uint64_t v20 = *(void *)(a4 + 24);
      *(void *)(a4 + 24) = result;
      *((void *)a2 + 16) = result;
      uint64_t v21 = *((void *)a2 + 20);
      if (*((unsigned char *)a2 + 160) == 0xFF) {
        goto LABEL_15;
      }
      uint64_t v22 = a4;
      uint64_t v24 = *((void *)a2 + 18);
      uint64_t v23 = *((void *)a2 + 19);
      long long v39 = *((void *)a2 + 22);
      uint64_t v40 = *((void *)a2 + 21);
      sub_21F7AD15C(a5, (uint64_t)v70);
      uint64_t v41 = v20;
      if (v72)
      {
        if (v72 == 1)
        {
          double v33 = *(void (**)(long long *__return_ptr, uint64_t *))&v70[0];
          uint64_t v51 = v24;
          uint64_t v52 = v23;
          LOBYTE(v53) = v21;
          unint64_t v54 = v40;
          uint64_t v55 = v39;
          sub_21F7607AC(v24, v23, v21);
          v33(&v73, &v51);
          swift_release();
        }
        else
        {
          *((void *)&v74 + 1) = sub_21F76CA40(&qword_267EE7968);
          unint64_t v75 = sub_21F80FF54();
          uint64_t v25 = swift_allocObject();
          *(void *)&uint64_t v73 = v25;
          LOBYTE(v42) = 2;
          *((void *)&v42 + 1) = 0;
          *(void *)&uint64_t v43 = 0;
          BYTE8(v43) = 1;
          uint64_t v44 = 0uLL;
          LOBYTE(v45) = 1;
          *((void *)&v45 + 1) = 0;
          *(void *)&uint64_t v46 = 0;
          WORD4(v46) = 0;
          BYTE10(v46) = 1;
          *(_WORD *)((char *)&v46 + 11) = 770;
          *(void *)&uint64_t v47 = 0;
          BYTE8(v47) = 1;
          *(void *)&uint64_t v48 = 0;
          BYTE8(v48) = 1;
          uint64_t v49 = 0uLL;
          uint64_t v50 = 2;
          *(unsigned char *)(v25 + 16) = 2;
          *(void *)(v25 + 24) = 0;
          *(unsigned char *)(v25 + 32) = -1;
          *(void *)(v25 + 72) = 0;
          *(_OWORD *)(v25 + 56) = 0u;
          *(_OWORD *)(v25 + 40) = 0u;
          *(_WORD *)(v25 + 80) = 1;
          *(void *)(v25 + 88) = 0;
          *(unsigned char *)(v25 + 96) = 2;
          *(void *)(v25 + 104) = 0;
          *(unsigned char *)(v25 + 112) = -1;
          *(_OWORD *)(v25 + 146) = 0u;
          *(_OWORD *)(v25 + 136) = 0u;
          *(_OWORD *)(v25 + 120) = 0u;
          *(void *)(v25 + 168) = 0;
          long long v26 = v42;
          long long v27 = v43;
          long long v28 = v45;
          *(_OWORD *)(v25 + 208) = v44;
          *(_OWORD *)(v25 + 224) = v28;
          *(_OWORD *)(v25 + 176) = v26;
          *(_OWORD *)(v25 + 192) = v27;
          long long v29 = v46;
          long long v30 = v47;
          long long v31 = v48;
          long long v32 = v49;
          *(unsigned char *)(v25 + 304) = 2;
          *(_OWORD *)(v25 + 272) = v31;
          *(_OWORD *)(v25 + 288) = v32;
          *(_OWORD *)(v25 + 240) = v29;
          *(_OWORD *)(v25 + 256) = v30;
          LOBYTE(v51) = 2;
          uint64_t v52 = 0;
          uint64_t v53 = 0;
          LOBYTE(v54) = 1;
          uint64_t v55 = 0;
          unint64_t v56 = 0;
          unint64_t v57 = 1;
          uint64_t v58 = 0;
          uint64_t v59 = 0;
          uint64_t v60 = 0;
          char v61 = 1;
          unint64_t v62 = 770;
          unint64_t v63 = 0;
          uint64_t v64 = 1;
          uint64_t v65 = 0;
          uint64_t v66 = 1;
          uint64_t v67 = 0;
          unint64_t v68 = 0;
          uint64_t v69 = 2;
          sub_21F8101D0(v24, v23, v21);
          sub_21F8101E4((uint64_t)&v42);
          sub_21F81022C((uint64_t)&v51);
          swift_bridgeObjectRelease_n();
        }
        sub_21F80FEF8(v24, v23, v21);
      }
      else
      {
        uint64_t v73 = v70[0];
        uint64_t v74 = v70[1];
        unint64_t v75 = v71;
      }
      ++v9;
      uint64_t v10 = *((void *)&v74 + 1);
      uint64_t v11 = v75;
      uint64_t v12 = sub_21F77E0FC(&v73, *((uint64_t *)&v74 + 1));
      swift_retain();
      sub_21FA22258((uint64_t)v12, (uint64_t)a2, v10, v11);
      swift_release();
      sub_21F7AD1B8((uint64_t)&v73);
      a4 = v22;
      *(void *)(v22 + 24) = v41;
      *(void *)(v17 + 32) = v19;
      swift_release();
      uint64_t v5 = v34;
      unsigned __int8 v7 = v35;
      uint64_t result = v36;
      if (v34 == v9) {
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
  }
  return result;
}

uint64_t sub_21F809728@<X0>(char **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = **a1;
  uint64_t v5 = *((void *)*a1 + 1);
  char v6 = (*a1)[16];
  uint64_t v7 = *((void *)*a1 + 5);
  char v8 = (*a1)[64];
  char v9 = (*a1)[65];
  uint64_t v10 = *((void *)*a1 + 9);
  char v11 = *v3;
  uint64_t v12 = *((void *)v3 + 1);
  char v13 = v3[16];
  uint64_t v14 = *((void *)v3 + 5);
  char v15 = v3[64];
  char v16 = v3[65];
  uint64_t v17 = *((void *)v3 + 9);
  uint64_t v18 = a1[2];
  long long v19 = *(_OWORD *)(v2 + 24);
  long long v20 = *((_OWORD *)v2 + 3);
  long long v21 = *(_OWORD *)(v3 + 24);
  long long v22 = *((_OWORD *)v3 + 3);
  v34[0] = *(_OWORD *)v18;
  long long v23 = *((_OWORD *)v18 + 1);
  long long v24 = *((_OWORD *)v18 + 2);
  long long v25 = *((_OWORD *)v18 + 4);
  v34[3] = *((_OWORD *)v18 + 3);
  v34[4] = v25;
  v34[1] = v23;
  long long v34[2] = v24;
  long long v26 = *((_OWORD *)v18 + 5);
  long long v27 = *((_OWORD *)v18 + 6);
  long long v28 = *((_OWORD *)v18 + 7);
  char v35 = v18[128];
  v34[6] = v27;
  v34[7] = v28;
  v34[5] = v26;
  long long v29 = *((_OWORD *)v18 + 7);
  *(_OWORD *)(a2 + 256) = *((_OWORD *)v18 + 6);
  *(_OWORD *)(a2 + 272) = v29;
  *(unsigned char *)(a2 + 288) = v18[128];
  long long v30 = *((_OWORD *)v18 + 3);
  *(_OWORD *)(a2 + 192) = *((_OWORD *)v18 + 2);
  *(_OWORD *)(a2 + 208) = v30;
  long long v31 = *((_OWORD *)v18 + 5);
  *(_OWORD *)(a2 + 224) = *((_OWORD *)v18 + 4);
  *(_OWORD *)(a2 + 240) = v31;
  long long v32 = *((_OWORD *)v18 + 1);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)v18;
  *(_OWORD *)(a2 + 176) = v32;
  *(unsigned char *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 24) = v19;
  *(void *)(a2 + 40) = v7;
  *(_OWORD *)(a2 + 48) = v20;
  *(unsigned char *)(a2 + 64) = v8;
  *(unsigned char *)(a2 + 65) = v9;
  *(void *)(a2 + 72) = v10;
  *(unsigned char *)(a2 + 80) = v11;
  *(void *)(a2 + 88) = v12;
  *(unsigned char *)(a2 + 96) = v13;
  *(_OWORD *)(a2 + 104) = v21;
  *(void *)(a2 + 120) = v14;
  *(_OWORD *)(a2 + 128) = v22;
  *(unsigned char *)(a2 + 144) = v15;
  *(unsigned char *)(a2 + 145) = v16;
  *(void *)(a2 + 152) = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_21F8101E4((uint64_t)v34);
}

uint64_t sub_21F809858(unint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_21F76CA40(&qword_26AD46258);
  uint64_t v6 = swift_allocObject();
  *(unsigned char *)(v6 + 40) = 2;
  *(_WORD *)(v6 + 16) = 256;
  *(void *)(v6 + 48) = 0;
  *(void *)(v6 + 56) = 0;
  uint64_t v7 = MEMORY[0x263F8EE78];
  *(void *)(v6 + 24) = a1;
  *(void *)(v6 + 32) = v7;
  if (!(a1 >> 62))
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_3;
    }
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = a2;
    *(void *)(v22 + 24) = a3;
    uint64_t v23 = *(void *)(v6 + 48);
    *(void *)(v6 + 48) = sub_21F769D8C;
    *(void *)(v6 + 56) = v22;
    sub_21F76D5D8(v23);
    return v6;
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_21FA26790();
  uint64_t v8 = result;
  if (!result) {
    goto LABEL_20;
  }
LABEL_3:
  if (v8 >= 1)
  {
    uint64_t v24 = a3;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = MEMORY[0x223C559B0](v10, a1);
        swift_weakInit();
        uint64_t v12 = *(void **)(v11 + 32);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v11 + 32) = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v12 = sub_21F76B290(0, v12[2] + 1, 1, v12);
          *(void *)(v11 + 32) = v12;
        }
        unint64_t v15 = v12[2];
        unint64_t v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          uint64_t v12 = sub_21F76B290((void *)(v14 > 1), v15 + 1, 1, v12);
          *(void *)(v11 + 32) = v12;
        }
        ++v10;
        _OWORD v12[2] = v15 + 1;
        sub_21F76C9DC((uint64_t)v25, (uint64_t)&v12[v15 + 4], &qword_26AD47910);
        swift_unknownObjectRelease();
      }
      while (v8 != v10);
    }
    else
    {
      uint64_t v16 = 0;
      do
      {
        uint64_t v17 = *(void *)(a1 + 8 * v16 + 32);
        swift_weakInit();
        uint64_t v18 = *(void **)(v17 + 32);
        swift_retain();
        char v19 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v17 + 32) = v18;
        if ((v19 & 1) == 0)
        {
          uint64_t v18 = sub_21F76B290(0, v18[2] + 1, 1, v18);
          *(void *)(v17 + 32) = v18;
        }
        unint64_t v21 = v18[2];
        unint64_t v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          uint64_t v18 = sub_21F76B290((void *)(v20 > 1), v21 + 1, 1, v18);
          *(void *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_21F76C9DC((uint64_t)v25, (uint64_t)&v18[v21 + 4], &qword_26AD47910);
        swift_release();
      }
      while (v8 != v16);
    }
    swift_bridgeObjectRelease();
    a3 = v24;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F809B18(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21F7775BC(a1, a2, a3, &qword_26AD47BC8, (uint64_t)&unk_26D133980, (uint64_t)sub_21F76DF14, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
}

uint64_t sub_21F809B54(unint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_21F76CA40(&qword_267EE7928);
  uint64_t v6 = swift_allocObject();
  sub_21F7982C0(v26);
  sub_21F76C9DC((uint64_t)v26, v6 + 40, &qword_267EE7930);
  *(_WORD *)(v6 + 16) = 256;
  *(void *)(v6 + 168) = 0;
  *(void *)(v6 + 176) = 0;
  uint64_t v7 = MEMORY[0x263F8EE78];
  *(void *)(v6 + 24) = a1;
  *(void *)(v6 + 32) = v7;
  if (!(a1 >> 62))
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_3;
    }
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = a2;
    *(void *)(v22 + 24) = a3;
    uint64_t v23 = *(void *)(v6 + 168);
    *(void *)(v6 + 168) = sub_21F76DF14;
    *(void *)(v6 + 176) = v22;
    sub_21F76D5D8(v23);
    return v6;
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_21FA26790();
  uint64_t v8 = result;
  if (!result) {
    goto LABEL_20;
  }
LABEL_3:
  if (v8 >= 1)
  {
    uint64_t v24 = a3;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = MEMORY[0x223C559B0](v10, a1);
        swift_weakInit();
        uint64_t v12 = *(void **)(v11 + 32);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v11 + 32) = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v12 = sub_21F76B290(0, v12[2] + 1, 1, v12);
          *(void *)(v11 + 32) = v12;
        }
        unint64_t v15 = v12[2];
        unint64_t v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          uint64_t v12 = sub_21F76B290((void *)(v14 > 1), v15 + 1, 1, v12);
          *(void *)(v11 + 32) = v12;
        }
        ++v10;
        _OWORD v12[2] = v15 + 1;
        sub_21F76C9DC((uint64_t)v25, (uint64_t)&v12[v15 + 4], &qword_26AD47910);
        swift_unknownObjectRelease();
      }
      while (v8 != v10);
    }
    else
    {
      uint64_t v16 = 0;
      do
      {
        uint64_t v17 = *(void *)(a1 + 8 * v16 + 32);
        swift_weakInit();
        uint64_t v18 = *(void **)(v17 + 32);
        swift_retain();
        char v19 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v17 + 32) = v18;
        if ((v19 & 1) == 0)
        {
          uint64_t v18 = sub_21F76B290(0, v18[2] + 1, 1, v18);
          *(void *)(v17 + 32) = v18;
        }
        unint64_t v21 = v18[2];
        unint64_t v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          uint64_t v18 = sub_21F76B290((void *)(v20 > 1), v21 + 1, 1, v18);
          *(void *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_21F76C9DC((uint64_t)v25, (uint64_t)&v18[v21 + 4], &qword_26AD47910);
        swift_release();
      }
      while (v8 != v16);
    }
    swift_bridgeObjectRelease();
    a3 = v24;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F809E2C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21F7775BC(a1, a2, a3, &qword_267EE7940, (uint64_t)&unk_26D133CF0, (uint64_t)sub_21F76DF14, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
}

uint64_t sub_21F809E68(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21F7775BC(a1, a2, a3, &qword_267EE7918, (uint64_t)&unk_26D133C28, (uint64_t)sub_21F769D8C, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
}

uint64_t sub_21F809EA4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21F7775BC(a1, a2, a3, &qword_26AD441D0, (uint64_t)&unk_26D133BB0, (uint64_t)sub_21F76DF14, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
}

uint64_t sub_21F809EE0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_21F76CA40(&qword_267EE7998);
  uint64_t v6 = swift_allocObject();
  sub_21F7982C0(v26);
  sub_21F76C9DC((uint64_t)v26, v6 + 40, &qword_26AD476C8);
  *(_WORD *)(v6 + 16) = 256;
  *(void *)(v6 + 168) = 0;
  *(void *)(v6 + 176) = 0;
  uint64_t v7 = MEMORY[0x263F8EE78];
  *(void *)(v6 + 24) = a1;
  *(void *)(v6 + 32) = v7;
  if (!(a1 >> 62))
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_3;
    }
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = a2;
    *(void *)(v22 + 24) = a3;
    uint64_t v23 = *(void *)(v6 + 168);
    *(void *)(v6 + 168) = sub_21F769D8C;
    *(void *)(v6 + 176) = v22;
    sub_21F76D5D8(v23);
    return v6;
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_21FA26790();
  uint64_t v8 = result;
  if (!result) {
    goto LABEL_20;
  }
LABEL_3:
  if (v8 >= 1)
  {
    uint64_t v24 = a3;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = MEMORY[0x223C559B0](v10, a1);
        swift_weakInit();
        uint64_t v12 = *(void **)(v11 + 32);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v11 + 32) = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v12 = sub_21F76B290(0, v12[2] + 1, 1, v12);
          *(void *)(v11 + 32) = v12;
        }
        unint64_t v15 = v12[2];
        unint64_t v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          uint64_t v12 = sub_21F76B290((void *)(v14 > 1), v15 + 1, 1, v12);
          *(void *)(v11 + 32) = v12;
        }
        ++v10;
        _OWORD v12[2] = v15 + 1;
        sub_21F76C9DC((uint64_t)v25, (uint64_t)&v12[v15 + 4], &qword_26AD47910);
        swift_unknownObjectRelease();
      }
      while (v8 != v10);
    }
    else
    {
      uint64_t v16 = 0;
      do
      {
        uint64_t v17 = *(void *)(a1 + 8 * v16 + 32);
        swift_weakInit();
        uint64_t v18 = *(void **)(v17 + 32);
        swift_retain();
        char v19 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v17 + 32) = v18;
        if ((v19 & 1) == 0)
        {
          uint64_t v18 = sub_21F76B290(0, v18[2] + 1, 1, v18);
          *(void *)(v17 + 32) = v18;
        }
        unint64_t v21 = v18[2];
        unint64_t v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          uint64_t v18 = sub_21F76B290((void *)(v20 > 1), v21 + 1, 1, v18);
          *(void *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_21F76C9DC((uint64_t)v25, (uint64_t)&v18[v21 + 4], &qword_26AD47910);
        swift_release();
      }
      while (v8 != v16);
    }
    swift_bridgeObjectRelease();
    a3 = v24;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F80A1B8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t))
{
  sub_21F76CA40(a4);
  uint64_t v12 = swift_allocObject();
  *(_WORD *)(v12 + 16) = 256;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  uint64_t v13 = MEMORY[0x263F8EE78];
  *(void *)(v12 + 24) = a1;
  *(void *)(v12 + 32) = v13;
  if (!(a1 >> 62))
  {
    uint64_t v14 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_3;
    }
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = a2;
    *(void *)(v28 + 24) = a3;
    uint64_t v30 = *(void *)(v12 + 136);
    uint64_t v29 = *(void *)(v12 + 144);
    *(void *)(v12 + 136) = a6;
    *(void *)(v12 + 144) = v28;
    a7(v30, v29);
    return v12;
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_21FA26790();
  uint64_t v14 = result;
  if (!result) {
    goto LABEL_20;
  }
LABEL_3:
  if (v14 >= 1)
  {
    uint64_t v31 = a2;
    uint64_t v32 = a3;
    uint64_t v33 = a6;
    uint64_t v34 = a7;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v16 = 0;
      do
      {
        uint64_t v17 = MEMORY[0x223C559B0](v16, a1);
        swift_weakInit();
        uint64_t v18 = *(void **)(v17 + 32);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v17 + 32) = v18;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v18 = sub_21F76B290(0, v18[2] + 1, 1, v18);
          *(void *)(v17 + 32) = v18;
        }
        unint64_t v21 = v18[2];
        unint64_t v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          uint64_t v18 = sub_21F76B290((void *)(v20 > 1), v21 + 1, 1, v18);
          *(void *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_21F76C9DC((uint64_t)v35, (uint64_t)&v18[v21 + 4], &qword_26AD47910);
        swift_unknownObjectRelease();
      }
      while (v14 != v16);
    }
    else
    {
      uint64_t v22 = 0;
      do
      {
        uint64_t v23 = *(void *)(a1 + 8 * v22 + 32);
        swift_weakInit();
        uint64_t v24 = *(void **)(v23 + 32);
        swift_retain();
        char v25 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v23 + 32) = v24;
        if ((v25 & 1) == 0)
        {
          uint64_t v24 = sub_21F76B290(0, v24[2] + 1, 1, v24);
          *(void *)(v23 + 32) = v24;
        }
        unint64_t v27 = v24[2];
        unint64_t v26 = v24[3];
        if (v27 >= v26 >> 1)
        {
          uint64_t v24 = sub_21F76B290((void *)(v26 > 1), v27 + 1, 1, v24);
          *(void *)(v23 + 32) = v24;
        }
        ++v22;
        v24[2] = v27 + 1;
        sub_21F76C9DC((uint64_t)v35, (uint64_t)&v24[v27 + 4], &qword_26AD47910);
        swift_release();
      }
      while (v14 != v22);
    }
    swift_bridgeObjectRelease();
    a6 = v33;
    a7 = v34;
    a2 = v31;
    a3 = v32;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F80A48C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21F7775BC(a1, a2, a3, &qword_267EE7990, (uint64_t)&unk_26D134560, (uint64_t)sub_21F76DF14, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
}

uint64_t sub_21F80A4C8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_21F76CA40(&qword_26AD45820);
  uint64_t v6 = swift_allocObject();
  *(unsigned char *)(v6 + 40) = 4;
  *(_WORD *)(v6 + 16) = 256;
  *(void *)(v6 + 48) = 0;
  *(void *)(v6 + 56) = 0;
  uint64_t v7 = MEMORY[0x263F8EE78];
  *(void *)(v6 + 24) = a1;
  *(void *)(v6 + 32) = v7;
  if (!(a1 >> 62))
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_3;
    }
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = a2;
    *(void *)(v22 + 24) = a3;
    uint64_t v23 = *(void *)(v6 + 48);
    *(void *)(v6 + 48) = sub_21F76DF14;
    *(void *)(v6 + 56) = v22;
    sub_21F76D5D8(v23);
    return v6;
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_21FA26790();
  uint64_t v8 = result;
  if (!result) {
    goto LABEL_20;
  }
LABEL_3:
  if (v8 >= 1)
  {
    uint64_t v24 = a3;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = MEMORY[0x223C559B0](v10, a1);
        swift_weakInit();
        uint64_t v12 = *(void **)(v11 + 32);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v11 + 32) = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v12 = sub_21F76B290(0, v12[2] + 1, 1, v12);
          *(void *)(v11 + 32) = v12;
        }
        unint64_t v15 = v12[2];
        unint64_t v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          uint64_t v12 = sub_21F76B290((void *)(v14 > 1), v15 + 1, 1, v12);
          *(void *)(v11 + 32) = v12;
        }
        ++v10;
        _OWORD v12[2] = v15 + 1;
        sub_21F76C9DC((uint64_t)v25, (uint64_t)&v12[v15 + 4], &qword_26AD47910);
        swift_unknownObjectRelease();
      }
      while (v8 != v10);
    }
    else
    {
      uint64_t v16 = 0;
      do
      {
        uint64_t v17 = *(void *)(a1 + 8 * v16 + 32);
        swift_weakInit();
        uint64_t v18 = *(void **)(v17 + 32);
        swift_retain();
        char v19 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v17 + 32) = v18;
        if ((v19 & 1) == 0)
        {
          uint64_t v18 = sub_21F76B290(0, v18[2] + 1, 1, v18);
          *(void *)(v17 + 32) = v18;
        }
        unint64_t v21 = v18[2];
        unint64_t v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          uint64_t v18 = sub_21F76B290((void *)(v20 > 1), v21 + 1, 1, v18);
          *(void *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_21F76C9DC((uint64_t)v25, (uint64_t)&v18[v21 + 4], &qword_26AD47910);
        swift_release();
      }
      while (v8 != v16);
    }
    swift_bridgeObjectRelease();
    a3 = v24;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F80A788(unint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_21F76CA40(&qword_26AD46368);
  uint64_t v6 = swift_allocObject();
  *(unsigned char *)(v6 + 40) = 3;
  *(_WORD *)(v6 + 16) = 256;
  *(void *)(v6 + 48) = 0;
  *(void *)(v6 + 56) = 0;
  uint64_t v7 = MEMORY[0x263F8EE78];
  *(void *)(v6 + 24) = a1;
  *(void *)(v6 + 32) = v7;
  if (!(a1 >> 62))
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_3;
    }
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = a2;
    *(void *)(v22 + 24) = a3;
    uint64_t v23 = *(void *)(v6 + 48);
    *(void *)(v6 + 48) = sub_21F769D8C;
    *(void *)(v6 + 56) = v22;
    sub_21F76D5D8(v23);
    return v6;
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_21FA26790();
  uint64_t v8 = result;
  if (!result) {
    goto LABEL_20;
  }
LABEL_3:
  if (v8 >= 1)
  {
    uint64_t v24 = a3;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = MEMORY[0x223C559B0](v10, a1);
        swift_weakInit();
        uint64_t v12 = *(void **)(v11 + 32);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v11 + 32) = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v12 = sub_21F76B290(0, v12[2] + 1, 1, v12);
          *(void *)(v11 + 32) = v12;
        }
        unint64_t v15 = v12[2];
        unint64_t v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          uint64_t v12 = sub_21F76B290((void *)(v14 > 1), v15 + 1, 1, v12);
          *(void *)(v11 + 32) = v12;
        }
        ++v10;
        _OWORD v12[2] = v15 + 1;
        sub_21F76C9DC((uint64_t)v25, (uint64_t)&v12[v15 + 4], &qword_26AD47910);
        swift_unknownObjectRelease();
      }
      while (v8 != v10);
    }
    else
    {
      uint64_t v16 = 0;
      do
      {
        uint64_t v17 = *(void *)(a1 + 8 * v16 + 32);
        swift_weakInit();
        uint64_t v18 = *(void **)(v17 + 32);
        swift_retain();
        char v19 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v17 + 32) = v18;
        if ((v19 & 1) == 0)
        {
          uint64_t v18 = sub_21F76B290(0, v18[2] + 1, 1, v18);
          *(void *)(v17 + 32) = v18;
        }
        unint64_t v21 = v18[2];
        unint64_t v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          uint64_t v18 = sub_21F76B290((void *)(v20 > 1), v21 + 1, 1, v18);
          *(void *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_21F76C9DC((uint64_t)v25, (uint64_t)&v18[v21 + 4], &qword_26AD47910);
        swift_release();
      }
      while (v8 != v16);
    }
    swift_bridgeObjectRelease();
    a3 = v24;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F80AA48(unint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_21F76CA40(&qword_267EE79E8);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(void *)(v6 + 88) = 0x1FFFFFFFELL;
  *(_WORD *)(v6 + 16) = 256;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(unsigned char *)(v6 + 144) = 0;
  *(void *)(v6 + 152) = 0;
  *(void *)(v6 + 160) = 0;
  uint64_t v7 = MEMORY[0x263F8EE78];
  *(void *)(v6 + 24) = a1;
  *(void *)(v6 + 32) = v7;
  if (!(a1 >> 62))
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_3;
    }
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = a2;
    *(void *)(v22 + 24) = a3;
    uint64_t v23 = *(void *)(v6 + 152);
    *(void *)(v6 + 152) = sub_21F769D8C;
    *(void *)(v6 + 160) = v22;
    sub_21F76D5D8(v23);
    return v6;
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_21FA26790();
  uint64_t v8 = result;
  if (!result) {
    goto LABEL_20;
  }
LABEL_3:
  if (v8 >= 1)
  {
    uint64_t v24 = a3;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = MEMORY[0x223C559B0](v10, a1);
        swift_weakInit();
        uint64_t v12 = *(void **)(v11 + 32);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v11 + 32) = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v12 = sub_21F76B290(0, v12[2] + 1, 1, v12);
          *(void *)(v11 + 32) = v12;
        }
        unint64_t v15 = v12[2];
        unint64_t v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          uint64_t v12 = sub_21F76B290((void *)(v14 > 1), v15 + 1, 1, v12);
          *(void *)(v11 + 32) = v12;
        }
        ++v10;
        _OWORD v12[2] = v15 + 1;
        sub_21F76C9DC((uint64_t)v25, (uint64_t)&v12[v15 + 4], &qword_26AD47910);
        swift_unknownObjectRelease();
      }
      while (v8 != v10);
    }
    else
    {
      uint64_t v16 = 0;
      do
      {
        uint64_t v17 = *(void *)(a1 + 8 * v16 + 32);
        swift_weakInit();
        uint64_t v18 = *(void **)(v17 + 32);
        swift_retain();
        char v19 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v17 + 32) = v18;
        if ((v19 & 1) == 0)
        {
          uint64_t v18 = sub_21F76B290(0, v18[2] + 1, 1, v18);
          *(void *)(v17 + 32) = v18;
        }
        unint64_t v21 = v18[2];
        unint64_t v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          uint64_t v18 = sub_21F76B290((void *)(v20 > 1), v21 + 1, 1, v18);
          *(void *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_21F76C9DC((uint64_t)v25, (uint64_t)&v18[v21 + 4], &qword_26AD47910);
        swift_release();
      }
      while (v8 != v16);
    }
    swift_bridgeObjectRelease();
    a3 = v24;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F80AD20(unint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_21F76CA40(&qword_26AD47B98);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 40) = 0;
  *(unsigned char *)(v6 + 48) = 1;
  *(_WORD *)(v6 + 16) = 256;
  *(void *)(v6 + 56) = 0;
  *(void *)(v6 + 64) = 0;
  uint64_t v7 = MEMORY[0x263F8EE78];
  *(void *)(v6 + 24) = a1;
  *(void *)(v6 + 32) = v7;
  if (!(a1 >> 62))
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_3;
    }
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = a2;
    *(void *)(v22 + 24) = a3;
    uint64_t v23 = *(void *)(v6 + 56);
    *(void *)(v6 + 56) = sub_21F769D8C;
    *(void *)(v6 + 64) = v22;
    sub_21F76D5D8(v23);
    return v6;
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_21FA26790();
  uint64_t v8 = result;
  if (!result) {
    goto LABEL_20;
  }
LABEL_3:
  if (v8 >= 1)
  {
    uint64_t v24 = a3;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = MEMORY[0x223C559B0](v10, a1);
        swift_weakInit();
        uint64_t v12 = *(void **)(v11 + 32);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v11 + 32) = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v12 = sub_21F76B290(0, v12[2] + 1, 1, v12);
          *(void *)(v11 + 32) = v12;
        }
        unint64_t v15 = v12[2];
        unint64_t v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          uint64_t v12 = sub_21F76B290((void *)(v14 > 1), v15 + 1, 1, v12);
          *(void *)(v11 + 32) = v12;
        }
        ++v10;
        _OWORD v12[2] = v15 + 1;
        sub_21F76C9DC((uint64_t)v25, (uint64_t)&v12[v15 + 4], &qword_26AD47910);
        swift_unknownObjectRelease();
      }
      while (v8 != v10);
    }
    else
    {
      uint64_t v16 = 0;
      do
      {
        uint64_t v17 = *(void *)(a1 + 8 * v16 + 32);
        swift_weakInit();
        uint64_t v18 = *(void **)(v17 + 32);
        swift_retain();
        char v19 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v17 + 32) = v18;
        if ((v19 & 1) == 0)
        {
          uint64_t v18 = sub_21F76B290(0, v18[2] + 1, 1, v18);
          *(void *)(v17 + 32) = v18;
        }
        unint64_t v21 = v18[2];
        unint64_t v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          uint64_t v18 = sub_21F76B290((void *)(v20 > 1), v21 + 1, 1, v18);
          *(void *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_21F76C9DC((uint64_t)v25, (uint64_t)&v18[v21 + 4], &qword_26AD47910);
        swift_release();
      }
      while (v8 != v16);
    }
    swift_bridgeObjectRelease();
    a3 = v24;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F80AFE4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21F80B05C(a1, a2, a3, &qword_267EE79A8, (uint64_t)&unk_26D134970, (uint64_t)sub_21F76DF14, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
}

uint64_t sub_21F80B020(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21F80B05C(a1, a2, a3, &qword_267EE79B0, (uint64_t)&unk_26D134998, (uint64_t)sub_21F76DF14, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
}

uint64_t sub_21F80B05C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t))
{
  sub_21F76CA40(a4);
  uint64_t v12 = swift_allocObject();
  *(_WORD *)(v12 + 16) = 256;
  *(void *)(v12 + 40) = 1;
  *(void *)(v12 + 48) = 0;
  *(void *)(v12 + 56) = 0;
  *(void *)(v12 + 64) = 0;
  uint64_t v13 = MEMORY[0x263F8EE78];
  *(void *)(v12 + 24) = a1;
  *(void *)(v12 + 32) = v13;
  if (!(a1 >> 62))
  {
    uint64_t v14 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_3;
    }
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = a2;
    *(void *)(v28 + 24) = a3;
    uint64_t v30 = *(void *)(v12 + 56);
    uint64_t v29 = *(void *)(v12 + 64);
    *(void *)(v12 + 56) = a6;
    *(void *)(v12 + 64) = v28;
    a7(v30, v29);
    return v12;
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_21FA26790();
  uint64_t v14 = result;
  if (!result) {
    goto LABEL_20;
  }
LABEL_3:
  if (v14 >= 1)
  {
    uint64_t v31 = a2;
    uint64_t v32 = a3;
    uint64_t v33 = a6;
    uint64_t v34 = a7;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v16 = 0;
      do
      {
        uint64_t v17 = MEMORY[0x223C559B0](v16, a1);
        swift_weakInit();
        uint64_t v18 = *(void **)(v17 + 32);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v17 + 32) = v18;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v18 = sub_21F76B290(0, v18[2] + 1, 1, v18);
          *(void *)(v17 + 32) = v18;
        }
        unint64_t v21 = v18[2];
        unint64_t v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          uint64_t v18 = sub_21F76B290((void *)(v20 > 1), v21 + 1, 1, v18);
          *(void *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_21F76C9DC((uint64_t)v35, (uint64_t)&v18[v21 + 4], &qword_26AD47910);
        swift_unknownObjectRelease();
      }
      while (v14 != v16);
    }
    else
    {
      uint64_t v22 = 0;
      do
      {
        uint64_t v23 = *(void *)(a1 + 8 * v22 + 32);
        swift_weakInit();
        uint64_t v24 = *(void **)(v23 + 32);
        swift_retain();
        char v25 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v23 + 32) = v24;
        if ((v25 & 1) == 0)
        {
          uint64_t v24 = sub_21F76B290(0, v24[2] + 1, 1, v24);
          *(void *)(v23 + 32) = v24;
        }
        unint64_t v27 = v24[2];
        unint64_t v26 = v24[3];
        if (v27 >= v26 >> 1)
        {
          uint64_t v24 = sub_21F76B290((void *)(v26 > 1), v27 + 1, 1, v24);
          *(void *)(v23 + 32) = v24;
        }
        ++v22;
        v24[2] = v27 + 1;
        sub_21F76C9DC((uint64_t)v35, (uint64_t)&v24[v27 + 4], &qword_26AD47910);
        swift_release();
      }
      while (v14 != v22);
    }
    swift_bridgeObjectRelease();
    a6 = v33;
    a7 = v34;
    a2 = v31;
    a3 = v32;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F80B31C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21F80B05C(a1, a2, a3, &qword_267EE79B8, (uint64_t)&unk_26D1349C0, (uint64_t)sub_21F769D8C, (void (*)(uint64_t, uint64_t))sub_21F7757E4);
}

uint64_t sub_21F80B358(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t))
{
  sub_21F76CA40(a4);
  uint64_t v12 = swift_allocObject();
  *(_WORD *)(v12 + 16) = 256;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  uint64_t v13 = MEMORY[0x263F8EE78];
  *(void *)(v12 + 24) = a1;
  *(void *)(v12 + 32) = v13;
  if (!(a1 >> 62))
  {
    uint64_t v14 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_3;
    }
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = a2;
    *(void *)(v28 + 24) = a3;
    uint64_t v30 = *(void *)(v12 + 56);
    uint64_t v29 = *(void *)(v12 + 64);
    *(void *)(v12 + 56) = a6;
    *(void *)(v12 + 64) = v28;
    a7(v30, v29);
    return v12;
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_21FA26790();
  uint64_t v14 = result;
  if (!result) {
    goto LABEL_20;
  }
LABEL_3:
  if (v14 >= 1)
  {
    uint64_t v31 = a2;
    uint64_t v32 = a3;
    uint64_t v33 = a6;
    uint64_t v34 = a7;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v16 = 0;
      do
      {
        uint64_t v17 = MEMORY[0x223C559B0](v16, a1);
        swift_weakInit();
        uint64_t v18 = *(void **)(v17 + 32);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v17 + 32) = v18;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v18 = sub_21F76B290(0, v18[2] + 1, 1, v18);
          *(void *)(v17 + 32) = v18;
        }
        unint64_t v21 = v18[2];
        unint64_t v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          uint64_t v18 = sub_21F76B290((void *)(v20 > 1), v21 + 1, 1, v18);
          *(void *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_21F76C9DC((uint64_t)v35, (uint64_t)&v18[v21 + 4], &qword_26AD47910);
        swift_unknownObjectRelease();
      }
      while (v14 != v16);
    }
    else
    {
      uint64_t v22 = 0;
      do
      {
        uint64_t v23 = *(void *)(a1 + 8 * v22 + 32);
        swift_weakInit();
        uint64_t v24 = *(void **)(v23 + 32);
        swift_retain();
        char v25 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v23 + 32) = v24;
        if ((v25 & 1) == 0)
        {
          uint64_t v24 = sub_21F76B290(0, v24[2] + 1, 1, v24);
          *(void *)(v23 + 32) = v24;
        }
        unint64_t v27 = v24[2];
        unint64_t v26 = v24[3];
        if (v27 >= v26 >> 1)
        {
          uint64_t v24 = sub_21F76B290((void *)(v26 > 1), v27 + 1, 1, v24);
          *(void *)(v23 + 32) = v24;
        }
        ++v22;
        v24[2] = v27 + 1;
        sub_21F76C9DC((uint64_t)v35, (uint64_t)&v24[v27 + 4], &qword_26AD47910);
        swift_release();
      }
      while (v14 != v22);
    }
    swift_bridgeObjectRelease();
    a6 = v33;
    a7 = v34;
    a2 = v31;
    a3 = v32;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F80B618(unint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_21F76CA40(&qword_26AD46640);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 40) = 0;
  *(unsigned char *)(v6 + 48) = -1;
  *(_WORD *)(v6 + 16) = 256;
  *(void *)(v6 + 56) = 0;
  *(void *)(v6 + 64) = 0;
  uint64_t v7 = MEMORY[0x263F8EE78];
  *(void *)(v6 + 24) = a1;
  *(void *)(v6 + 32) = v7;
  if (!(a1 >> 62))
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_3;
    }
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = a2;
    *(void *)(v22 + 24) = a3;
    uint64_t v23 = *(void *)(v6 + 56);
    *(void *)(v6 + 56) = sub_21F769D8C;
    *(void *)(v6 + 64) = v22;
    sub_21F76D5D8(v23);
    return v6;
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_21FA26790();
  uint64_t v8 = result;
  if (!result) {
    goto LABEL_20;
  }
LABEL_3:
  if (v8 >= 1)
  {
    uint64_t v24 = a3;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = MEMORY[0x223C559B0](v10, a1);
        swift_weakInit();
        uint64_t v12 = *(void **)(v11 + 32);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v11 + 32) = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v12 = sub_21F76B290(0, v12[2] + 1, 1, v12);
          *(void *)(v11 + 32) = v12;
        }
        unint64_t v15 = v12[2];
        unint64_t v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          uint64_t v12 = sub_21F76B290((void *)(v14 > 1), v15 + 1, 1, v12);
          *(void *)(v11 + 32) = v12;
        }
        ++v10;
        _OWORD v12[2] = v15 + 1;
        sub_21F76C9DC((uint64_t)v25, (uint64_t)&v12[v15 + 4], &qword_26AD47910);
        swift_unknownObjectRelease();
      }
      while (v8 != v10);
    }
    else
    {
      uint64_t v16 = 0;
      do
      {
        uint64_t v17 = *(void *)(a1 + 8 * v16 + 32);
        swift_weakInit();
        uint64_t v18 = *(void **)(v17 + 32);
        swift_retain();
        char v19 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v17 + 32) = v18;
        if ((v19 & 1) == 0)
        {
          uint64_t v18 = sub_21F76B290(0, v18[2] + 1, 1, v18);
          *(void *)(v17 + 32) = v18;
        }
        unint64_t v21 = v18[2];
        unint64_t v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          uint64_t v18 = sub_21F76B290((void *)(v20 > 1), v21 + 1, 1, v18);
          *(void *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_21F76C9DC((uint64_t)v25, (uint64_t)&v18[v21 + 4], &qword_26AD47910);
        swift_release();
      }
      while (v8 != v16);
    }
    swift_bridgeObjectRelease();
    a3 = v24;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F80B8DC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_21F76CA40(&qword_26AD45828);
  uint64_t v6 = swift_allocObject();
  *(_WORD *)(v6 + 16) = 256;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(void *)(v6 + 104) = 0;
  uint64_t v7 = MEMORY[0x263F8EE78];
  *(void *)(v6 + 24) = a1;
  *(void *)(v6 + 32) = v7;
  if (!(a1 >> 62))
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_3;
    }
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = a2;
    *(void *)(v22 + 24) = a3;
    uint64_t v23 = *(void *)(v6 + 96);
    *(void *)(v6 + 96) = sub_21F769D8C;
    *(void *)(v6 + 104) = v22;
    sub_21F76D5D8(v23);
    return v6;
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_21FA26790();
  uint64_t v8 = result;
  if (!result) {
    goto LABEL_20;
  }
LABEL_3:
  if (v8 >= 1)
  {
    uint64_t v24 = a3;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = MEMORY[0x223C559B0](v10, a1);
        swift_weakInit();
        uint64_t v12 = *(void **)(v11 + 32);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v11 + 32) = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v12 = sub_21F76B290(0, v12[2] + 1, 1, v12);
          *(void *)(v11 + 32) = v12;
        }
        unint64_t v15 = v12[2];
        unint64_t v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          uint64_t v12 = sub_21F76B290((void *)(v14 > 1), v15 + 1, 1, v12);
          *(void *)(v11 + 32) = v12;
        }
        ++v10;
        _OWORD v12[2] = v15 + 1;
        sub_21F76C9DC((uint64_t)v25, (uint64_t)&v12[v15 + 4], &qword_26AD47910);
        swift_unknownObjectRelease();
      }
      while (v8 != v10);
    }
    else
    {
      uint64_t v16 = 0;
      do
      {
        uint64_t v17 = *(void *)(a1 + 8 * v16 + 32);
        swift_weakInit();
        uint64_t v18 = *(void **)(v17 + 32);
        swift_retain();
        char v19 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v17 + 32) = v18;
        if ((v19 & 1) == 0)
        {
          uint64_t v18 = sub_21F76B290(0, v18[2] + 1, 1, v18);
          *(void *)(v17 + 32) = v18;
        }
        unint64_t v21 = v18[2];
        unint64_t v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          uint64_t v18 = sub_21F76B290((void *)(v20 > 1), v21 + 1, 1, v18);
          *(void *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_21F76C9DC((uint64_t)v25, (uint64_t)&v18[v21 + 4], &qword_26AD47910);
        swift_release();
      }
      while (v8 != v16);
    }
    swift_bridgeObjectRelease();
    a3 = v24;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F80BBA8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)(v3 + 16) = 256;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 40) = 2;
  uint64_t v7 = MEMORY[0x263F8EE78];
  *(void *)(v3 + 24) = a1;
  *(void *)(v3 + 32) = v7;
  if (!(a1 >> 62))
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_3;
    }
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    swift_unownedRetainStrong();
    swift_unownedRetain();
    swift_unownedRetain();
    swift_retain();
    swift_unownedRelease();
    swift_unownedRelease();
    swift_unownedRetain();
    swift_release();
    uint64_t v22 = (void *)swift_allocObject();
    uint64_t v22[2] = a2;
    _OWORD v22[3] = a3;
    v22[4] = v3;
    uint64_t v23 = *(void *)(v3 + 48);
    *(void *)(v3 + 48) = sub_21F810464;
    *(void *)(v3 + 56) = v22;
    sub_21F76D5D8(v23);
    swift_release();
    return v3;
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_21FA26790();
  uint64_t v8 = result;
  if (!result) {
    goto LABEL_20;
  }
LABEL_3:
  if (v8 >= 1)
  {
    uint64_t v24 = a3;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = MEMORY[0x223C559B0](v10, a1);
        swift_weakInit();
        uint64_t v12 = *(void **)(v11 + 32);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v11 + 32) = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v12 = sub_21F76B290(0, v12[2] + 1, 1, v12);
          *(void *)(v11 + 32) = v12;
        }
        unint64_t v15 = v12[2];
        unint64_t v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          uint64_t v12 = sub_21F76B290((void *)(v14 > 1), v15 + 1, 1, v12);
          *(void *)(v11 + 32) = v12;
        }
        ++v10;
        _OWORD v12[2] = v15 + 1;
        sub_21F76C9DC((uint64_t)v25, (uint64_t)&v12[v15 + 4], &qword_26AD47910);
        swift_unknownObjectRelease();
      }
      while (v8 != v10);
    }
    else
    {
      uint64_t v16 = 0;
      do
      {
        uint64_t v17 = *(void *)(a1 + 8 * v16 + 32);
        swift_weakInit();
        uint64_t v18 = *(void **)(v17 + 32);
        swift_retain();
        char v19 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v17 + 32) = v18;
        if ((v19 & 1) == 0)
        {
          uint64_t v18 = sub_21F76B290(0, v18[2] + 1, 1, v18);
          *(void *)(v17 + 32) = v18;
        }
        unint64_t v21 = v18[2];
        unint64_t v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          uint64_t v18 = sub_21F76B290((void *)(v20 > 1), v21 + 1, 1, v18);
          *(void *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_21F76C9DC((uint64_t)v25, (uint64_t)&v18[v21 + 4], &qword_26AD47910);
        swift_release();
      }
      while (v8 != v16);
    }
    swift_bridgeObjectRelease();
    a3 = v24;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F80BE84(uint64_t *a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3, uint64_t a4)
{
  a2(&v12);
  uint64_t v6 = v12;
  swift_unownedRetainStrong();
  swift_beginAccess();
  uint64_t v7 = *(void *)(a4 + 40);
  sub_21F7C22F8(v6);
  sub_21F810470(v7);
  swift_release();
  if (v7 == 2) {
    goto LABEL_2;
  }
  if (v6 == 1)
  {
    if (v7 != 1)
    {
      sub_21F810480(v7);
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  if (v7 != 1)
  {
    if (v6)
    {
      if (v7)
      {
        BOOL v10 = sub_21F7D3F18(v6, v7);
        sub_21F810480(v7);
        sub_21F7C22E8(v6);
        if (!v10) {
          goto LABEL_4;
        }
LABEL_8:
        uint64_t result = 1;
        goto LABEL_5;
      }
      uint64_t v11 = v6;
    }
    else
    {
      if (!v7)
      {
        sub_21F810480(0);
        sub_21F7C22E8(0);
        uint64_t result = 1;
        goto LABEL_5;
      }
      uint64_t v11 = 0;
    }
    sub_21F810480(v7);
    uint64_t v8 = v11;
    goto LABEL_3;
  }
LABEL_2:
  uint64_t v8 = v6;
LABEL_3:
  sub_21F7C22E8(v8);
LABEL_4:
  uint64_t result = 0;
LABEL_5:
  *a1 = v6;
  return result;
}

uint64_t sub_21F80BFB0(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  a2();
  sub_21F76C978(a1, (uint64_t)v25, &qword_26AD46820);
  swift_unownedRetainStrong();
  swift_beginAccess();
  sub_21F76C978(a4 + 40, (uint64_t)v24, &qword_26AD45808);
  swift_release();
  sub_21F76C978((uint64_t)v25, (uint64_t)v20, &qword_26AD45808);
  sub_21F76C978((uint64_t)v24, (uint64_t)v22, &qword_26AD45808);
  if (v21 == 1)
  {
    sub_21F76CA84((uint64_t)v24, &qword_26AD45808);
    sub_21F76CA84((uint64_t)v25, &qword_26AD45808);
    if (v23 == 1) {
      uint64_t v6 = &qword_26AD45808;
    }
    else {
      uint64_t v6 = (uint64_t *)&unk_26AD46358;
    }
    if (v23 == 1) {
      char v7 = -1;
    }
    else {
      char v7 = 0;
    }
  }
  else
  {
    sub_21F76C978((uint64_t)v20, (uint64_t)v19, &qword_26AD45808);
    if (v23 == 1)
    {
      sub_21F76CA84((uint64_t)v24, &qword_26AD45808);
      sub_21F76CA84((uint64_t)v25, &qword_26AD45808);
      sub_21F76CA84((uint64_t)v19, &qword_26AD46820);
      char v7 = 0;
      uint64_t v6 = (uint64_t *)&unk_26AD46358;
    }
    else
    {
      sub_21F76C9DC((uint64_t)v22, (uint64_t)v18, &qword_26AD46820);
      sub_21F76C978((uint64_t)v19, (uint64_t)v13, &qword_26AD46820);
      sub_21F76C978((uint64_t)v18, (uint64_t)&v15, &qword_26AD46820);
      if (v14)
      {
        sub_21F76C978((uint64_t)v13, (uint64_t)v12, &qword_26AD46820);
        if (*((void *)&v16 + 1))
        {
          v10[0] = v15;
          v10[1] = v16;
          uint64_t v11 = v17;
          sub_21F76CA40(&qword_26AD44288);
          char v7 = AGCompareValues();
          sub_21F7AC0D8((uint64_t)v10);
          sub_21F7AC0D8((uint64_t)v12);
          uint64_t v8 = &qword_26AD46820;
        }
        else
        {
          sub_21F7AC0D8((uint64_t)v12);
          char v7 = 0;
          uint64_t v8 = (uint64_t *)&unk_267EE7180;
        }
      }
      else
      {
        if (*((void *)&v16 + 1)) {
          uint64_t v8 = (uint64_t *)&unk_267EE7180;
        }
        else {
          uint64_t v8 = &qword_26AD46820;
        }
        if (*((void *)&v16 + 1)) {
          char v7 = 0;
        }
        else {
          char v7 = -1;
        }
      }
      sub_21F76CA84((uint64_t)v13, v8);
      sub_21F76CA84((uint64_t)v18, &qword_26AD46820);
      uint64_t v6 = &qword_26AD45808;
      sub_21F76CA84((uint64_t)v24, &qword_26AD45808);
      sub_21F76CA84((uint64_t)v25, &qword_26AD45808);
      sub_21F76CA84((uint64_t)v19, &qword_26AD46820);
    }
  }
  sub_21F76CA84((uint64_t)v20, v6);
  return v7 & 1;
}

uint64_t sub_21F80C268(uint64_t a1, void (*a2)(void *__return_ptr), uint64_t a3, uint64_t a4)
{
  a2(v13);
  uint64_t v6 = v13[0];
  uint64_t v7 = v13[1];
  int v8 = v14;
  swift_unownedRetainStrong();
  swift_beginAccess();
  int v9 = *(unsigned __int8 *)(a4 + 56);
  char v10 = *(unsigned char *)(a4 + 57);
  swift_release();
  if (v10)
  {
    char v11 = 0;
  }
  else if ((v8 | v9))
  {
    char v11 = v8 & v9;
  }
  else
  {
    char v11 = sub_21FA258B0();
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  return v11 & 1;
}

uint64_t sub_21F80C338(void *a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  a2(&v12);
  uint64_t v8 = v12;
  swift_unownedRetainStrong();
  swift_beginAccess();
  uint64_t v9 = *(void *)(a4 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  if (v9)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    char v10 = a5(v8, v9);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    char v10 = 0;
  }
  *a1 = v8;
  return v10 & 1;
}

uint64_t sub_21F80C41C(void *a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  a2(&v12);
  uint64_t v8 = v12;
  swift_unownedRetainStrong();
  swift_beginAccess();
  uint64_t v9 = *(void *)(a4 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  if (v9)
  {
    char v10 = a5(v8, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    char v10 = 0;
  }
  *a1 = v8;
  return v10 & 1;
}

uint64_t sub_21F80C4E4(void (*a1)(uint64_t *__return_ptr, void *))
{
  swift_retain();
  sub_21F7674C0((uint64_t)&v9);
  swift_release();
  v10[0] = &v9;
  swift_retain();
  sub_21F7674C0((uint64_t)&v8);
  swift_release();
  v10[1] = &v8;
  swift_retain();
  sub_21F7674C0((uint64_t)&v7);
  swift_release();
  _OWORD v10[2] = &v7;
  swift_retain();
  sub_21F7674C0((uint64_t)&v6);
  swift_release();
  v10[3] = &v6;
  swift_retain();
  sub_21F7674C0((uint64_t)&v5);
  swift_release();
  v10[4] = &v5;
  a1(&v11, v10);
  uint64_t v2 = v6;
  uint64_t v3 = v5;
  swift_bridgeObjectRelease();
  sub_21F76D5D8(v2);
  sub_21F7C22E8(v3);
  return v11;
}

uint64_t sub_21F80C620(void (*a1)(uint64_t *__return_ptr, char **))
{
  swift_retain();
  sub_21F7674C0((uint64_t)&v3);
  swift_release();
  char v4 = &v3;
  a1(&v5, &v4);
  return v5;
}

uint64_t sub_21F80C690(void (*a1)(uint64_t *__return_ptr, uint64_t **))
{
  swift_retain();
  sub_21F7674C0((uint64_t)&v3);
  swift_release();
  char v4 = &v3;
  a1(&v5, &v4);
  swift_release();
  return v5;
}

uint64_t sub_21F80C708(void (*a1)(void *))
{
  swift_retain();
  sub_21F7674C0((uint64_t)&v4);
  swift_release();
  v5[0] = &v4;
  swift_retain();
  sub_21F7674C0((uint64_t)v3);
  swift_release();
  v5[1] = v3;
  a1(v5);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21F80C7B8(void (*a1)(uint64_t *__return_ptr, uint64_t **))
{
  swift_retain();
  sub_21F7674C0((uint64_t)&v3);
  swift_release();
  uint64_t v4 = &v3;
  a1(&v5, &v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_21F80C830(void (*a1)(void *))
{
  swift_retain();
  sub_21F7674C0((uint64_t)&v4);
  swift_release();
  v5[0] = &v4;
  swift_retain();
  sub_21F7674C0((uint64_t)&v3);
  swift_release();
  v5[1] = &v3;
  a1(v5);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21F80C8E0(void (*a1)(uint64_t *__return_ptr, void *))
{
  type metadata accessor for SgMeasurements();
  swift_retain();
  sub_21F7674C0((uint64_t)&v3);
  swift_release();
  v7[0] = &v3;
  swift_retain();
  sub_21F7674C0((uint64_t)v4);
  swift_release();
  v7[1] = v4;
  swift_retain();
  sub_21F7674C0((uint64_t)v5);
  swift_release();
  v7[2] = v5;
  swift_retain();
  sub_21F7674C0((uint64_t)&v6);
  swift_release();
  _OWORD v7[3] = &v6;
  a1(&v8, v7);
  sub_21F76CA84((uint64_t)&v3, &qword_26AD45770);
  return v8;
}

uint64_t sub_21F80C9F0(void (*a1)(uint64_t *__return_ptr, void *))
{
  type metadata accessor for SgMeasurements();
  swift_retain();
  sub_21F7674C0((uint64_t)&v3);
  swift_release();
  v7[0] = &v3;
  swift_retain();
  sub_21F7674C0((uint64_t)v4);
  swift_release();
  v7[1] = v4;
  swift_retain();
  sub_21F7674C0((uint64_t)&v5);
  swift_release();
  v7[2] = &v5;
  swift_retain();
  sub_21F7674C0((uint64_t)v6);
  swift_release();
  _OWORD v7[3] = v6;
  a1(&v8, v7);
  sub_21F76CA84((uint64_t)&v3, &qword_26AD45778);
  return v8;
}

double sub_21F80CB00(void (*a1)(double *__return_ptr, uint64_t **))
{
  swift_retain();
  sub_21F7674C0((uint64_t)&v3);
  swift_release();
  uint64_t v4 = &v3;
  a1(&v5, &v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_21F80CB7C(void (*a1)(uint64_t *__return_ptr, void *))
{
  swift_retain();
  sub_21F7674C0((uint64_t)&v4);
  swift_release();
  v5[0] = &v4;
  swift_retain();
  sub_21F7674C0((uint64_t)&v3);
  swift_release();
  v5[1] = &v3;
  a1(&v6, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_21F80CC2C(void (*a1)(uint64_t *__return_ptr, void *))
{
  swift_retain();
  sub_21F7674C0((uint64_t)&v6);
  swift_release();
  v7[0] = &v6;
  swift_retain();
  sub_21F7674C0((uint64_t)&v5);
  swift_release();
  v7[1] = &v5;
  swift_retain();
  sub_21F7674C0((uint64_t)&v4);
  swift_release();
  v7[2] = &v4;
  a1(&v8, v7);
  uint64_t v2 = v4;
  swift_bridgeObjectRelease();
  sub_21F76D5D8(v2);
  return v8;
}

uint64_t sub_21F80CD0C(void (*a1)(void *))
{
  type metadata accessor for SgMeasurements();
  swift_retain();
  sub_21F7674C0((uint64_t)v3);
  swift_release();
  v8[0] = v3;
  swift_retain();
  sub_21F7674C0((uint64_t)&v4);
  swift_release();
  v8[1] = &v4;
  swift_retain();
  sub_21F7674C0((uint64_t)v5);
  swift_release();
  v8[2] = v5;
  swift_retain();
  sub_21F7674C0((uint64_t)&v6);
  swift_release();
  v8[3] = &v6;
  swift_retain();
  sub_21F7674C0((uint64_t)v7);
  swift_release();
  v8[4] = v7;
  a1(v8);
  return sub_21F76CA84((uint64_t)v3, &qword_267EE79F0);
}

uint64_t sub_21F80CE44(void (*a1)(void *))
{
  swift_retain();
  sub_21F7674C0((uint64_t)&v11);
  swift_release();
  v12[0] = &v11;
  swift_retain();
  sub_21F7674C0((uint64_t)&v10);
  swift_release();
  v12[1] = &v10;
  swift_retain();
  sub_21F7674C0((uint64_t)&v9);
  swift_release();
  _OWORD v12[2] = &v9;
  swift_retain();
  sub_21F7674C0((uint64_t)&v8);
  swift_release();
  void v12[3] = &v8;
  swift_retain();
  sub_21F7674C0((uint64_t)&v7);
  swift_release();
  v12[4] = &v7;
  a1(v12);
  uint64_t v2 = v10;
  uint64_t v3 = v9;
  uint64_t v4 = v8;
  uint64_t v5 = v7;
  sub_21F76D5D8(v11);
  sub_21F76D5D8(v2);
  sub_21F76D5D8(v3);
  sub_21F76D5D8(v4);
  return sub_21F76D5D8(v5);
}

uint64_t sub_21F80CFAC(void (*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v8 = sub_21F76CA40(a6);
  uint64_t v9 = v8 - 8;
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v15[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CGSize(0);
  sub_21FA24970();
  swift_retain();
  sub_21F7674C0((uint64_t)v11);
  swift_release();
  v15[0] = v11;
  swift_retain();
  sub_21F7674C0((uint64_t)(v11 + 104));
  swift_release();
  v15[1] = v11 + 104;
  uint64_t v12 = (uint64_t)&v11[*(int *)(v9 + 72)];
  swift_retain();
  sub_21F7674C0(v12);
  swift_release();
  _OWORD v15[2] = v12;
  a1(&v16, v15);
  sub_21F76CA84((uint64_t)v11, a6);
  return v16;
}

uint64_t sub_21F80D0EC(void (*a1)(uint64_t *__return_ptr, void *))
{
  swift_retain();
  sub_21F7674C0((uint64_t)&v6);
  swift_release();
  v7[0] = &v6;
  swift_retain();
  sub_21F7674C0((uint64_t)&v5);
  swift_release();
  v7[1] = &v5;
  swift_retain();
  sub_21F7674C0((uint64_t)&v4);
  swift_release();
  v7[2] = &v4;
  swift_retain();
  sub_21F7674C0((uint64_t)&v3);
  swift_release();
  void v7[3] = &v3;
  a1(&v8, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v8;
}

uint64_t sub_21F80D208(void (*a1)(uint64_t *__return_ptr, void *))
{
  swift_retain();
  sub_21F7674C0((uint64_t)&v4);
  swift_release();
  v5[0] = &v4;
  swift_retain();
  sub_21F7674C0((uint64_t)&v3);
  swift_release();
  v5[1] = &v3;
  a1(&v6, v5);
  swift_bridgeObjectRelease();
  swift_release();
  return v6;
}

uint64_t sub_21F80D2B8(void (*a1)(uint64_t *__return_ptr, void *))
{
  swift_retain();
  sub_21F7674C0((uint64_t)&v5);
  swift_release();
  v9[0] = &v5;
  swift_retain();
  sub_21F7674C0((uint64_t)&v6);
  swift_release();
  v9[1] = &v6;
  swift_retain();
  sub_21F7674C0((uint64_t)v7);
  swift_release();
  v9[2] = v7;
  a1(&v10, v9);
  uint64_t v2 = v7[4];
  uint64_t v3 = v7[7];
  LOBYTE(a1) = v8;
  swift_release();
  swift_release();
  sub_21F76D5D8(v2);
  swift_bridgeObjectRelease();
  sub_21F76D558(v3, a1);
  return v10;
}

double sub_21F80D3C8(void (*a1)(double *__return_ptr, unsigned char **))
{
  type metadata accessor for CGSize(0);
  swift_retain();
  sub_21F7674C0((uint64_t)v3);
  swift_release();
  uint64_t v4 = v3;
  a1(&v5, &v4);
  return v5;
}

uint64_t sub_21F80D440(void (*a1)(void *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v8 = sub_21F76CA40(a6);
  uint64_t v9 = v8 - 8;
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v16[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA24220();
  sub_21FA24320();
  swift_retain();
  sub_21F7674C0((uint64_t)v11);
  swift_release();
  v16[0] = v11;
  uint64_t v12 = (uint64_t)&v11[*(int *)(v9 + 56)];
  swift_retain();
  sub_21F7674C0(v12);
  swift_release();
  v16[1] = v12;
  uint64_t v13 = (uint64_t)&v11[*(int *)(v9 + 72)];
  swift_retain();
  sub_21F7674C0(v13);
  swift_release();
  void v16[2] = v13;
  a1(v16);
  return sub_21F76CA84((uint64_t)v11, a6);
}

uint64_t sub_21F80D584(void (*a1)(uint64_t *__return_ptr, void *))
{
  uint64_t v2 = sub_21F76CA40(&qword_26AD43E60);
  uint64_t v3 = v2 - 8;
  MEMORY[0x270FA5388](v2);
  double v5 = (char *)&v9[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AxisMarkValues.Storage(0);
  swift_retain();
  sub_21F7674C0((uint64_t)v5);
  swift_release();
  v9[0] = v5;
  uint64_t v6 = (uint64_t)&v5[*(int *)(v3 + 56)];
  swift_retain();
  sub_21F7674C0(v6);
  swift_release();
  v9[1] = v6;
  a1(&v10, v9);
  sub_21F76CA84((uint64_t)v5, &qword_26AD43E60);
  return v10;
}

uint64_t sub_21F80D690(void (*a1)(uint64_t *__return_ptr, void *))
{
  uint64_t v2 = sub_21F76CA40(qword_26AD45780);
  uint64_t v3 = (int *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  double v5 = (char *)&v11[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AxisMarkValues.Storage(0);
  sub_21FA24320();
  swift_retain();
  sub_21F7674C0((uint64_t)v5);
  swift_release();
  v11[0] = v5;
  uint64_t v6 = (uint64_t)&v5[v3[14]];
  swift_retain();
  sub_21F7674C0(v6);
  swift_release();
  v11[1] = v6;
  uint64_t v7 = (uint64_t)&v5[v3[18]];
  swift_retain();
  sub_21F7674C0(v7);
  swift_release();
  v11[2] = v7;
  uint64_t v8 = (uint64_t)&v5[v3[22]];
  swift_retain();
  sub_21F7674C0(v8);
  swift_release();
  v11[3] = v8;
  a1(&v12, v11);
  sub_21F76CA84((uint64_t)v5, qword_26AD45780);
  return v12;
}

uint64_t sub_21F80D804(void (*a1)(uint64_t *__return_ptr, void *))
{
  uint64_t v2 = sub_21F76CA40(&qword_26AD44DB8);
  uint64_t v3 = v2 - 8;
  MEMORY[0x270FA5388](v2);
  double v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AxisMarkValues.Storage(0);
  swift_retain();
  sub_21F7674C0((uint64_t)v5);
  swift_release();
  v9[0] = v5;
  uint64_t v6 = (uint64_t)&v5[*(int *)(v3 + 56)];
  swift_retain();
  sub_21F7674C0(v6);
  swift_release();
  v9[1] = v6;
  uint64_t v7 = (uint64_t)&v5[*(int *)(v3 + 72)];
  swift_retain();
  sub_21F7674C0(v7);
  swift_release();
  void v9[2] = v7;
  a1(&v10, v9);
  sub_21F76CA84((uint64_t)v5, &qword_26AD44DB8);
  return v10;
}

uint64_t sub_21F80D944(void (*a1)(uint64_t *__return_ptr, uint64_t **))
{
  swift_retain();
  sub_21F7674C0((uint64_t)&v3);
  swift_release();
  uint64_t v4 = &v3;
  a1(&v5, &v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_21F80D9C0(void (*a1)(void *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  swift_retain();
  sub_21F7674C0((uint64_t)&v10);
  swift_release();
  v14[0] = &v10;
  swift_retain();
  sub_21F7674C0((uint64_t)v11);
  swift_release();
  v14[1] = v11;
  swift_retain();
  sub_21F7674C0((uint64_t)v12);
  swift_release();
  long long v14[2] = v12;
  swift_retain();
  sub_21F7674C0((uint64_t)&v13);
  swift_release();
  v14[3] = &v13;
  a1(v14);
  return sub_21F76CA84((uint64_t)&v10, a7);
}

uint64_t sub_21F80DAD0(void (*a1)(void *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  type metadata accessor for AxisMarkLayoutContext();
  swift_retain();
  sub_21F7674C0((uint64_t)v9);
  swift_release();
  v12[0] = v9;
  swift_retain();
  sub_21F7674C0((uint64_t)v10);
  swift_release();
  v12[1] = v10;
  swift_retain();
  sub_21F7674C0((uint64_t)&v11);
  swift_release();
  _OWORD v12[2] = &v11;
  a1(v12);
  return sub_21F76CA84((uint64_t)v9, a6);
}

uint64_t sub_21F80DBC0(void (*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3, uint64_t *a4)
{
  type metadata accessor for AxisMarkRenderContext();
  type metadata accessor for CGSize(0);
  swift_retain();
  sub_21F7674C0((uint64_t)v7);
  swift_release();
  v14[0] = v7;
  swift_retain();
  sub_21F7674C0((uint64_t)v8);
  swift_release();
  v14[1] = v8;
  swift_retain();
  sub_21F7674C0((uint64_t)v9);
  swift_release();
  long long v14[2] = v9;
  swift_retain();
  sub_21F7674C0((uint64_t)v10);
  swift_release();
  v14[3] = v10;
  swift_retain();
  sub_21F7674C0((uint64_t)&v11);
  swift_release();
  void v14[4] = &v11;
  swift_retain();
  sub_21F7674C0((uint64_t)v12);
  swift_release();
  v14[5] = v12;
  swift_retain();
  sub_21F7674C0((uint64_t)v13);
  swift_release();
  void v14[6] = v13;
  a1(&v15, v14);
  sub_21F76CA84((uint64_t)v7, a4);
  return v15;
}

uint64_t sub_21F80DD4C(void (*a1)(uint64_t *__return_ptr, void *))
{
  type metadata accessor for CGSize(0);
  swift_retain();
  sub_21F7674C0((uint64_t)v3);
  swift_release();
  v6[0] = v3;
  swift_retain();
  sub_21F7674C0((uint64_t)v4);
  swift_release();
  v6[1] = v4;
  swift_retain();
  sub_21F7674C0((uint64_t)&v5);
  swift_release();
  void v6[2] = &v5;
  a1(&v7, v6);
  void v8[6] = v4[4];
  v8[7] = v4[5];
  _OWORD v8[8] = v4[6];
  v8[9] = v5;
  v8[2] = v4[0];
  v8[3] = v4[1];
  v8[4] = v4[2];
  void v8[5] = v4[3];
  v8[0] = v3[0];
  v8[1] = v3[1];
  sub_21F810BC4((uint64_t *)v8);
  return v7;
}

double sub_21F80DE54(void (*a1)(double *__return_ptr, void *))
{
  swift_retain();
  sub_21F7674C0((uint64_t)v3);
  swift_release();
  v6[0] = v3;
  swift_retain();
  sub_21F7674C0((uint64_t)v4);
  swift_release();
  v6[1] = v4;
  a1(&v7, v6);
  void v8[6] = v4[4];
  v9[0] = v5[0];
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)((char *)v5 + 9);
  v8[2] = v4[0];
  v8[3] = v4[1];
  v8[4] = v4[2];
  void v8[5] = v4[3];
  v8[0] = v3[0];
  v8[1] = v3[1];
  sub_21F810BC4((uint64_t *)v8);
  return v7;
}

uint64_t sub_21F80DF2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_21F76CA40(&qword_26AD4A488);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_21FA28830;
  *(void *)(v6 + 32) = a1;
  uint64_t v27 = v6;
  sub_21FA25E60();
  unint64_t v7 = v27;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  sub_21F76CA40(&qword_26AD49F60);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 120) = 0u;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *(unsigned char *)(v9 + 168) = -2;
  *(_WORD *)(v9 + 16) = 256;
  *(void *)(v9 + 176) = 0;
  *(void *)(v9 + 184) = 0;
  uint64_t v10 = MEMORY[0x263F8EE78];
  *(void *)(v9 + 24) = v7;
  *(void *)(v9 + 32) = v10;
  if (!(v7 >> 62))
  {
    uint64_t v11 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v11) {
      goto LABEL_3;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = sub_21F7734F8;
    *(void *)(v25 + 24) = v8;
    uint64_t v26 = *(void *)(v9 + 176);
    *(void *)(v9 + 176) = sub_21F76DF14;
    *(void *)(v9 + 184) = v25;
    sub_21F76D5D8(v26);
    return v9;
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_21FA26790();
  uint64_t v11 = result;
  if (!result) {
    goto LABEL_20;
  }
LABEL_3:
  if (v11 >= 1)
  {
    if ((v7 & 0xC000000000000001) != 0)
    {
      uint64_t v13 = 0;
      do
      {
        uint64_t v14 = MEMORY[0x223C559B0](v13, v7);
        swift_weakInit();
        uint64_t v15 = *(void **)(v14 + 32);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v14 + 32) = v15;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v15 = sub_21F76B290(0, v15[2] + 1, 1, v15);
          *(void *)(v14 + 32) = v15;
        }
        unint64_t v18 = v15[2];
        unint64_t v17 = v15[3];
        if (v18 >= v17 >> 1)
        {
          uint64_t v15 = sub_21F76B290((void *)(v17 > 1), v18 + 1, 1, v15);
          *(void *)(v14 + 32) = v15;
        }
        ++v13;
        _OWORD v15[2] = v18 + 1;
        sub_21F76C9DC((uint64_t)&v27, (uint64_t)&v15[v18 + 4], &qword_26AD47910);
        swift_unknownObjectRelease();
      }
      while (v11 != v13);
    }
    else
    {
      uint64_t v19 = 0;
      do
      {
        uint64_t v20 = *(void *)(v7 + 8 * v19 + 32);
        swift_weakInit();
        uint64_t v21 = *(void **)(v20 + 32);
        swift_retain();
        char v22 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v20 + 32) = v21;
        if ((v22 & 1) == 0)
        {
          uint64_t v21 = sub_21F76B290(0, v21[2] + 1, 1, v21);
          *(void *)(v20 + 32) = v21;
        }
        unint64_t v24 = v21[2];
        unint64_t v23 = v21[3];
        if (v24 >= v23 >> 1)
        {
          uint64_t v21 = sub_21F76B290((void *)(v23 > 1), v24 + 1, 1, v21);
          *(void *)(v20 + 32) = v21;
        }
        ++v19;
        _OWORD v21[2] = v24 + 1;
        sub_21F76C9DC((uint64_t)&v27, (uint64_t)&v21[v24 + 4], &qword_26AD47910);
        swift_release();
      }
      while (v11 != v19);
    }
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F80E25C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_21F7676B0();
  swift_beginAccess();
  uint64_t result = sub_21F76C978(a1 + 40, (uint64_t)&v6, &qword_26AD46820);
  if (*((void *)&v7 + 1))
  {
    long long v5 = v7;
    *(_OWORD *)a2 = v6;
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v8;
  }
  else
  {
    sub_21F76CA84((uint64_t)&v6, &qword_26AD46820);
    uint64_t result = sub_21FA266E0();
    __break(1u);
  }
  return result;
}

double sub_21F80E330@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_21F80E340(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    sub_21F7A24D4(0, v1, 0);
    uint64_t v2 = v11;
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      unint64_t v7 = *(void *)(v11 + 16);
      unint64_t v8 = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v7 >= v8 >> 1) {
        sub_21F7A24D4((char *)(v8 > 1), v7 + 1, 1);
      }
      v4 += 2;
      *(void *)(v11 + 16) = v7 + 1;
      uint64_t v9 = v11 + 16 * v7;
      *(void *)(v9 + 32) = v6;
      *(void *)(v9 + 40) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_21F80E414(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    sub_21F76CFE0(0, v2, 0);
    uint64_t result = v8;
    uint64_t v4 = (uint64_t *)(a1 + 32);
    unint64_t v5 = *(void *)(v8 + 16);
    do
    {
      uint64_t v6 = *v4;
      uint64_t v9 = result;
      unint64_t v7 = *(void *)(result + 24);
      if (v5 >= v7 >> 1)
      {
        sub_21F76CFE0((char *)(v7 > 1), v5 + 1, 1);
        uint64_t result = v9;
      }
      *(void *)(result + 16) = v5 + 1;
      *(void *)(result + 8 * v5 + 32) = v6;
      ++v4;
      ++v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_21F80E4E4(unsigned __int8 *__dst, unsigned __int8 *__src, unint64_t a3, unsigned __int8 *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = __src;
  unint64_t v7 = __dst;
  int64_t v8 = __src - __dst;
  uint64_t v9 = a3 - (void)__src;
  if (__src - __dst < (uint64_t)(a3 - (void)__src))
  {
    if (a4 != __dst || __src <= a4) {
      memmove(a4, __dst, v8);
    }
    uint64_t v10 = &v4[v8];
    if ((unint64_t)v6 >= a3 || v8 < 1)
    {
LABEL_15:
      uint64_t v6 = v7;
      if (v7 != v4) {
        goto LABEL_38;
      }
      goto LABEL_37;
    }
    while (1)
    {
      unsigned int v11 = *v6;
      if (v11 >= *v4) {
        break;
      }
      BOOL v12 = v7 == v6++;
      if (!v12) {
        goto LABEL_12;
      }
LABEL_13:
      ++v7;
      if (v4 >= v10 || (unint64_t)v6 >= a3) {
        goto LABEL_15;
      }
    }
    LOBYTE(v11) = *v4;
    BOOL v12 = v7 == v4++;
    if (v12) {
      goto LABEL_13;
    }
LABEL_12:
    *unint64_t v7 = v11;
    goto LABEL_13;
  }
  if (a4 != __src || a3 <= (unint64_t)a4) {
    memmove(a4, __src, a3 - (void)__src);
  }
  uint64_t v10 = &v4[v9];
  if (v7 >= v6 || v9 < 1)
  {
LABEL_36:
    if (v6 != v4) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  uint64_t v13 = (unsigned __int8 *)(a3 - 1);
  uint64_t v14 = v6;
  while (1)
  {
    uint64_t v15 = v13 + 1;
    unsigned int v17 = *--v14;
    unsigned __int8 v16 = v17;
    if (*(v10 - 1) >= v17)
    {
      unsigned __int8 v16 = *(v10 - 1);
      uint64_t v14 = v6;
      if (v15 != v10)
      {
        --v10;
LABEL_32:
        *uint64_t v13 = v16;
        goto LABEL_33;
      }
      if (v13 >= v10--) {
        goto LABEL_32;
      }
    }
    else if (v15 != v6 || v13 >= v6)
    {
      goto LABEL_32;
    }
LABEL_33:
    if (v14 <= v7) {
      break;
    }
    --v13;
    uint64_t v6 = v14;
    if (v10 <= v4)
    {
      uint64_t v6 = v14;
      goto LABEL_36;
    }
  }
  uint64_t v6 = v14;
  if (v14 != v4)
  {
LABEL_38:
    memmove(v6, v4, v10 - v4);
    return 1;
  }
LABEL_37:
  if (v6 >= v10) {
    goto LABEL_38;
  }
  return 1;
}

uint64_t sub_21F80E6BC(uint64_t a1)
{
  sub_21F76CA40(&qword_26AD47A58);
  uint64_t result = sub_21FA267A0();
  int64_t v3 = 0;
  uint64_t v23 = a1;
  unint64_t v24 = (void *)result;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v5 = a1 + 64;
  uint64_t v4 = v6;
  uint64_t v7 = 1 << *(unsigned char *)(v5 - 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & v4;
  uint64_t v20 = v5;
  int64_t v21 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v22 = result + 64;
  if ((v8 & v4) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v10 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v3 << 6))
  {
    char v15 = *(unsigned char *)(*(void *)(v23 + 48) + i);
    unint64_t v16 = *(void *)(*(void *)(v23 + 56) + 8 * i);
    MEMORY[0x270FA5388](result);
    sub_21F810744();
    sub_21F778120();
    swift_getKeyPath();
    swift_bridgeObjectRetain();
    swift_retain();
    unsigned int v17 = sub_21F80F150(v16);
    swift_bridgeObjectRelease();
    swift_release_n();
    *(void *)(v22 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t result = (uint64_t)v24;
    *(unsigned char *)(v24[6] + i) = v15;
    *(void *)(v24[7] + 8 * i) = v17;
    uint64_t v18 = v24[2];
    BOOL v12 = __OFADD__(v18, 1);
    uint64_t v19 = v18 + 1;
    if (v12)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v24[2] = v19;
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v12 = __OFADD__(v3++, 1);
    if (v12) {
      goto LABEL_25;
    }
    if (v3 >= v21) {
      return result;
    }
    unint64_t v13 = *(void *)(v20 + 8 * v3);
    if (!v13) {
      break;
    }
LABEL_15:
    unint64_t v9 = (v13 - 1) & v13;
  }
  int64_t v14 = v3 + 1;
  if (v3 + 1 >= v21) {
    return result;
  }
  unint64_t v13 = *(void *)(v20 + 8 * v14);
  if (v13) {
    goto LABEL_14;
  }
  int64_t v14 = v3 + 2;
  if (v3 + 2 >= v21) {
    return result;
  }
  unint64_t v13 = *(void *)(v20 + 8 * v14);
  if (v13) {
    goto LABEL_14;
  }
  int64_t v14 = v3 + 3;
  if (v3 + 3 >= v21) {
    return result;
  }
  unint64_t v13 = *(void *)(v20 + 8 * v14);
  if (v13)
  {
LABEL_14:
    int64_t v3 = v14;
    goto LABEL_15;
  }
  while (1)
  {
    int64_t v3 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v3 >= v21) {
      return result;
    }
    unint64_t v13 = *(void *)(v20 + 8 * v3);
    ++v14;
    if (v13) {
      goto LABEL_15;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t (*sub_21F80E944(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_21F80EA60(v6, a2, a3);
  return sub_21F80E9AC;
}

uint64_t (*sub_21F80E9B0(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_21F80EAE0(v6, a2, a3);
  return sub_21F80E9AC;
}

void sub_21F80EA18(void *a1)
{
  int64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t (*sub_21F80EA60(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  int64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x223C559B0](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *int64_t v3 = v4;
    return sub_21F8115A4;
  }
  __break(1u);
  return result;
}

uint64_t (*sub_21F80EAE0(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  int64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x223C559B0](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *int64_t v3 = v4;
    return sub_21F80EB60;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F80EB60()
{
  return swift_release();
}

uint64_t sub_21F80EB68@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = **a1;
  if (v4)
  {
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = *a2;
    swift_retain();
  }
  *a3 = v5;

  return swift_retain();
}

uint64_t sub_21F80EBC0@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = **a1;
  if (v4)
  {
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = *a2;
    swift_bridgeObjectRetain();
  }
  *a3 = v5;

  return swift_bridgeObjectRetain();
}

uint64_t sub_21F80EC18@<X0>(void (*a1)(uint64_t *__return_ptr, char *)@<X0>, unint64_t a2@<X2>, void *a3@<X8>)
{
  sub_21F76CA40(&qword_26AD46648);
  swift_getKeyPath();
  swift_retain();
  uint64_t v6 = sub_21F80EF98(a2);
  swift_release_n();
  a1(&v8, v6);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v8;
  return result;
}

uint64_t sub_21F80ECD0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_21F81085C();
  sub_21F8108B0();
  swift_getKeyPath();
  swift_retain();
  uint64_t v4 = sub_21F810904(a1);
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t sub_21F80ED64@<X0>(uint64_t *a1@<X8>)
{
  return sub_21F80EDAC(sub_21F7A93E4, a1);
}

uint64_t sub_21F80ED7C@<X0>(uint64_t a1@<X8>)
{
  return sub_21F80EE10(sub_21F80E340, a1);
}

uint64_t sub_21F80ED94@<X0>(uint64_t *a1@<X8>)
{
  return sub_21F80EDAC(sub_21F7A95FC, a1);
}

uint64_t sub_21F80EDAC@<X0>(uint64_t (*a1)(uint64_t)@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = a1(v4);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

uint64_t sub_21F80EDF8@<X0>(uint64_t a1@<X8>)
{
  return sub_21F80EE10(sub_21F80E414, a1);
}

uint64_t sub_21F80EE10@<X0>(uint64_t (*a1)(uint64_t)@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = a1(v4);
  char v7 = v6;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v7;
  return result;
}

uint64_t sub_21F80EE6C@<X0>(void (*a1)(uint64_t *__return_ptr, void *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6 = *(void *)(a3 + 48);
  long long v7 = *(_OWORD *)(a3 + 16);
  v9[0] = *(_OWORD *)a3;
  v9[1] = v7;
  _OWORD v9[2] = *(_OWORD *)(a3 + 32);
  uint64_t v10 = v6;
  uint64_t result = sub_21F80DBC0(a1, a2, (uint64_t)v9, a4);
  *a5 = result;
  return result;
}

uint64_t sub_21F80EEB8@<X0>(void (*a1)(uint64_t *__return_ptr, uint64_t)@<X0>, unint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, void (*a5)(BOOL, unint64_t, uint64_t)@<X6>, void *a6@<X8>)
{
  sub_21F76CA40(a3);
  sub_21F811290(a4, a3);
  uint64_t KeyPath = swift_getKeyPath();
  swift_retain();
  uint64_t v13 = sub_21F80F6D4(a2, KeyPath, (uint64_t)v15, a5);
  swift_release_n();
  a1(&v16, v13);
  uint64_t result = swift_bridgeObjectRelease();
  *a6 = v16;
  return result;
}

char *sub_21F80EF98(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
    if (!v2) {
      return (char *)v3;
    }
    uint64_t v16 = MEMORY[0x263F8EE78];
    uint64_t result = sub_21F7A2494(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v5 = 0;
    uint64_t v3 = v16;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        MEMORY[0x223C559B0](v5, a1);
      }
      else {
        swift_retain();
      }
      swift_retain();
      swift_getAtKeyPath();
      swift_release_n();
      long long v6 = v12;
      long long v7 = v15;
      unint64_t v9 = *(void *)(v16 + 16);
      unint64_t v8 = *(void *)(v16 + 24);
      if (v9 >= v8 >> 1)
      {
        sub_21F7A2494((char *)(v8 > 1), v9 + 1, 1);
        long long v7 = v15;
        long long v6 = v12;
      }
      *(void *)(v16 + 16) = v9 + 1;
      uint64_t v10 = v16 + 56 * v9;
      *(unsigned char *)(v10 + 32) = v11;
      ++v5;
      *(_OWORD *)(v10 + 40) = v6;
      *(void *)(v10 + 56) = v13;
      *(void *)(v10 + 64) = v14;
      *(_OWORD *)(v10 + 72) = v7;
      if (v2 == v5) {
        return (char *)v3;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_21FA26790();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

char *sub_21F80F150(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
    if (!v2) {
      return (char *)v3;
    }
    uint64_t v11 = MEMORY[0x263F8EE78];
    uint64_t result = sub_21F7A24B4(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v5 = 0;
    uint64_t v3 = v11;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        MEMORY[0x223C559B0](v5, a1);
      }
      else {
        swift_retain();
      }
      swift_retain();
      swift_getAtKeyPath();
      swift_release_n();
      unint64_t v7 = *(void *)(v11 + 16);
      unint64_t v6 = *(void *)(v11 + 24);
      if (v7 >= v6 >> 1) {
        sub_21F7A24B4((char *)(v6 > 1), v7 + 1, 1);
      }
      ++v5;
      *(void *)(v11 + 16) = v7 + 1;
      uint64_t v8 = v11 + 16 * v7;
      *(void *)(v8 + 32) = v9;
      *(unsigned char *)(v8 + 40) = v10;
      if (v2 == v5) {
        return (char *)v3;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_21FA26790();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_21F80F2DC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (!v8) {
    return result;
  }
  uint64_t v39 = MEMORY[0x263F8EE78];
  sub_21FA26630();
  sub_21F782CAC((uint64_t)(a3 + 2), (uint64_t)v32);
  sub_21F76C9DC(a4 + 96, (uint64_t)v31, &qword_26AD46340);
  uint64_t v22 = *a3;
  char v21 = *((unsigned char *)a3 + 8);
  uint64_t v14 = (unsigned char *)(a1 + 72);
  uint64_t v15 = *(void *)(a4 + 112);
  while (1)
  {
    if (*v14)
    {
      uint64_t v16 = sub_21F800C18((uint64_t)&v25, (uint64_t)sub_21F8043D4, 0);
    }
    else
    {
      uint64_t v17 = *((void *)v14 - 1);
      swift_retain();
      uint64_t v16 = sub_21F802874(v17);
      swift_release();
    }
    sub_21F76C9DC((uint64_t)v31, (uint64_t)v38, &qword_26AD46340);
    char v18 = v38[9];
    sub_21F782CAC((uint64_t)v32, (uint64_t)v33);
    uint64_t v19 = (v34 >> 61) & 3;
    if (!v19)
    {
      v34 &= 0x9FFFFFFFFFFFFFFFLL;
      sub_21F76C9DC((uint64_t)v33, (uint64_t)v35, &qword_26AD49C98);
      sub_21F76CA40(&qword_26AD49F88);
      uint64_t result = swift_dynamicCastClass();
      if (!result) {
        goto LABEL_22;
      }
      uint64_t v29 = v15;
      uint64_t v30 = v16;
      uint64_t v24 = result;
      uint64_t v25 = &v30;
      uint64_t v26 = &v29;
      uint64_t v27 = &v24;
      uint64_t v20 = swift_allocObject();
      *(unsigned char *)(v20 + 16) = a7 & 1;
      *(void *)(v20 + 24) = v22;
      *(unsigned char *)(v20 + 32) = v21;
      *(unsigned char *)(v20 + 33) = v18 & 1;
      swift_retain();
      swift_retain();
      swift_retain();
      sub_21F800E7C(&v25, (uint64_t)sub_21F811588, v20);
      sub_21F76CA40(&qword_26AD44B78);
      uint64_t result = swift_dynamicCastClass();
      if (!result) {
        goto LABEL_23;
      }
      goto LABEL_3;
    }
    if (v19 != 1)
    {
      v34 &= 0x9FFFFFFFFFFFFFFFLL;
      sub_21F76C9DC((uint64_t)v33, (uint64_t)v37, &qword_26AD43F78);
      sub_21F76CA40(&qword_26AD44B78);
      uint64_t result = swift_dynamicCastClass();
      if (!result) {
        goto LABEL_24;
      }
      uint64_t v29 = result;
      uint64_t v30 = v16;
      uint64_t v25 = &v30;
      uint64_t v26 = &v29;
      swift_retain();
      swift_retain();
      sub_21F801394(&v25, (uint64_t)sub_21F993690, 0);
      if (!swift_dynamicCastClass())
      {
        __break(1u);
        return v39;
      }
      goto LABEL_3;
    }
    v34 &= 0x9FFFFFFFFFFFFFFFLL;
    sub_21F76C9DC((uint64_t)v33, (uint64_t)v36, &qword_26AD49C98);
    sub_21F76CA40(&qword_26AD49F88);
    uint64_t result = swift_dynamicCastClass();
    if (!result) {
      break;
    }
    uint64_t v29 = result;
    uint64_t v30 = v16;
    uint64_t v24 = v15;
    uint64_t v25 = &v30;
    uint64_t v26 = &v29;
    uint64_t v23 = a6;
    uint64_t v27 = &v24;
    uint64_t v28 = &v23;
    swift_retain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_21F8010C4(&v25, (uint64_t)sub_21F993650, 0);
    sub_21F76CA40(&qword_26AD44B78);
    uint64_t result = swift_dynamicCastClass();
    if (!result) {
      goto LABEL_21;
    }
    swift_release();
LABEL_3:
    swift_release();
    sub_21FA26600();
    sub_21FA26640();
    sub_21FA26650();
    sub_21FA26610();
    v14 += 80;
    if (!--v8) {
      return v39;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_21F80F6D4(unint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(BOOL, unint64_t, uint64_t))
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v7 = MEMORY[0x263F8EE78];
    if (!v6) {
      break;
    }
    uint64_t v14 = MEMORY[0x263F8EE78];
    a4(0, v6 & ~(v6 >> 63), 0);
    if (v6 < 0)
    {
      __break(1u);
      JUMPOUT(0x21F80F868);
    }
    long long v12 = a4;
    uint64_t v8 = 0;
    uint64_t v7 = v14;
    while (v6 != v8)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        MEMORY[0x223C559B0](v8, a1);
      }
      else {
        swift_retain();
      }
      swift_retain();
      swift_getAtKeyPath();
      swift_release_n();
      a4 = v13;
      unint64_t v10 = *(void *)(v14 + 16);
      unint64_t v9 = *(void *)(v14 + 24);
      if (v10 >= v9 >> 1) {
        v12(v9 > 1, v10 + 1, 1);
      }
      ++v8;
      *(void *)(v14 + 16) = v10 + 1;
      *(void *)(v14 + 8 * v10 + 32) = v13;
      if (v6 == v8) {
        return v7;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_21FA26790();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_21F80F880()
{
  return sub_21F745EE4(MEMORY[0x263F8EEA0]);
}

uint64_t sub_21F80F898()
{
  return sub_21F745EE4(MEMORY[0x263F8EEA0]);
}

uint64_t sub_21F80F8B0()
{
  return sub_21F745EE4(MEMORY[0x263F8EEA0]);
}

uint64_t sub_21F80F8C8()
{
  return sub_21F745EE4(MEMORY[0x263F8EEA0]);
}

uint64_t sub_21F80F8E0()
{
  return sub_21F745EE4(MEMORY[0x263F8EEA0]);
}

uint64_t sub_21F80F8F8@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  return sub_21F806CB4(a1, v2, a2);
}

uint64_t sub_21F80F900@<X0>(uint64_t *a1@<X8>)
{
  return sub_21F80ECD0(*(void *)(v1 + 16), a1);
}

uint64_t sub_21F80F908@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_21F80E6BC(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

uint64_t sub_21F80F94C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_21F806B9C(a1, v2 + 16, a2);
}

uint64_t sub_21F80F958@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_21F806A74(a1, v2 + 16, a2);
}

uint64_t sub_21F80F960@<X0>(uint64_t a1@<X8>)
{
  swift_retain();

  return sub_21F802F70(a1);
}

uint64_t sub_21F80F99C@<X0>(uint64_t a1@<X8>)
{
  swift_retain();

  return sub_21F80319C(a1);
}

uint64_t sub_21F80F9D8@<X0>(uint64_t a1@<X8>)
{
  swift_retain();

  return sub_21F803444(a1);
}

uint64_t sub_21F80FA14(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F80FA48()
{
  return sub_21F745EE4(MEMORY[0x263F8EEA0]);
}

uint64_t sub_21F80FA60@<X0>(void *a1@<X8>)
{
  return sub_21F80EEB8(*(void (**)(uint64_t *__return_ptr, uint64_t))(v1 + 16), *(void *)(v1 + 32), &qword_26AD46C18, &qword_26AD46980, (void (*)(BOOL, unint64_t, uint64_t))sub_21F7A2560, a1);
}

uint64_t sub_21F80FAB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21F8049A0(a1, v2 + 16, a2);
}

uint64_t sub_21F80FAC0()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_21F80FAF8()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_21F80FB30@<X0>(uint64_t **a1@<X0>, void *a2@<X8>)
{
  return sub_21F80EBC0(a1, (uint64_t *)(v2 + 16), a2);
}

uint64_t sub_21F80FB4C()
{
  return sub_21F745EE4(MEMORY[0x263F8EED8]);
}

uint64_t sub_21F80FB6C()
{
  return sub_21F745EE4(MEMORY[0x263F8EED8]);
}

uint64_t sub_21F80FB84@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_21F80C7B8(*(void (**)(uint64_t *__return_ptr, uint64_t **))(v1 + 16));
  *a1 = result;
  return result;
}

uint64_t sub_21F80FBB8()
{
  return sub_21F80FC04((uint64_t (*)(void, void, void, void))sub_21F77358C);
}

uint64_t sub_21F80FBD0()
{
  return sub_21F745EE4(MEMORY[0x263F8EED8]);
}

uint64_t sub_21F80FBEC()
{
  return sub_21F80FC04((uint64_t (*)(void, void, void, void))sub_21F80C830);
}

uint64_t sub_21F80FC04(uint64_t (*a1)(void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_21F80FC2C@<X0>(uint64_t **a1@<X0>, void *a2@<X8>)
{
  return sub_21F80EB68(a1, &v3, a2);
}

uint64_t sub_21F80FC54()
{
  return sub_21F745EE4(MEMORY[0x263F8EED8]);
}

uint64_t sub_21F80FC6C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_21F80C690(*(void (**)(uint64_t *__return_ptr, uint64_t **))(v1 + 16));
  *a1 = result;
  return result;
}

uint64_t sub_21F80FCA0()
{
  return sub_21F80FD08((uint64_t (*)(void, void, void, void))sub_21F77358C);
}

uint64_t sub_21F80FCB8()
{
  return sub_21F745EE4(MEMORY[0x263F8EED8]);
}

uint64_t sub_21F80FCD4()
{
  return sub_21F80FC04((uint64_t (*)(void, void, void, void))sub_21F80C708);
}

uint64_t sub_21F80FCF0()
{
  return sub_21F80FD08((uint64_t (*)(void, void, void, void))sub_21F80C708);
}

uint64_t sub_21F80FD08(uint64_t (*a1)(void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_21F80FD38()
{
  return sub_21F773564((uint64_t (*)(void, void, void, void))sub_21F80C708);
}

uint64_t sub_21F80FD54@<X0>(uint64_t *a1@<X8>)
{
  return sub_21F8107BC((uint64_t (*)(void, void, void, void))sub_21F80CB7C, a1);
}

uint64_t sub_21F80FD6C()
{
  return sub_21F745EE4(MEMORY[0x263F8EED8]);
}

uint64_t sub_21F80FD88()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_21F80FD98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21F807304(a1, *(unsigned char *)(v2 + 16), a2);
}

uint64_t sub_21F80FDA0@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21F807D84(a1, v2, a2);
}

uint64_t sub_21F80FDBC()
{
  return sub_21F745EE4(MEMORY[0x263F8EEA0]);
}

uint64_t sub_21F80FDD4@<X0>(void *a1@<X8>)
{
  return sub_21F80EC18(*(void (**)(uint64_t *__return_ptr, char *))(v1 + 16), *(void *)(v1 + 32), a1);
}

uint64_t sub_21F80FDE0()
{
  return sub_21F745EE4(MEMORY[0x263F8EF20]);
}

uint64_t sub_21F80FDF8(uint64_t a1)
{
  return sub_21F80BFB0(a1, *(void (**)(void))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_21F80FE04()
{
  return MEMORY[0x270FA0238](v0, 33, 7);
}

uint64_t sub_21F80FE14@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_21F80812C(a1, *(unsigned char *)(v2 + 16), *(void *)(v2 + 24), *(unsigned char *)(v2 + 32));
  *a2 = result;
  return result;
}

uint64_t sub_21F80FE48()
{
  return sub_21F745EE4(MEMORY[0x263F8EEA0]);
}

uint64_t sub_21F80FE60@<X0>(uint64_t a1@<X8>)
{
  return sub_21F80E25C(v1, a1);
}

uint64_t sub_21F80FE68()
{
  return sub_21F745EE4(MEMORY[0x263F8EED8]);
}

void sub_21F80FE80(uint64_t a1@<X8>)
{
  *(double *)a1 = sub_21F80CB00(*(void (**)(double *__return_ptr, uint64_t **))(v1 + 16));
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
}

uint64_t sub_21F80FEB8@<X0>(uint64_t *a1@<X8>)
{
  return sub_21F80EE6C(*(void (**)(uint64_t *__return_ptr, void *))(v1 + 16), *(void *)(v1 + 24), v1 + 32, &qword_26AD45810, a1);
}

uint64_t sub_21F80FEE0@<X0>(uint64_t *a1@<X8>)
{
  return sub_21F811024((uint64_t (*)(void, void, void, void, void, void))sub_21F8087EC, a1);
}

uint64_t sub_21F80FEF8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return sub_21F7654F0(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_21F80FF0C()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 56)) {
    _s6Charts15AnyChartContentVwxx_0(v0 + 32);
  }

  return MEMORY[0x270FA0238](v0, 80, 7);
}

unint64_t sub_21F80FF54()
{
  unint64_t result = qword_267EE7970;
  if (!qword_267EE7970)
  {
    sub_21F779EA4(&qword_267EE7968);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE7970);
  }
  return result;
}

uint64_t sub_21F80FFDC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21F810028(*(void *)(v0 + 288), *(void *)(v0 + 296), *(unsigned char *)(v0 + 304));

  return MEMORY[0x270FA0238](v0, 305, 7);
}

uint64_t sub_21F810028(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3) {
    return swift_release();
  }
  return result;
}

uint64_t sub_21F81003C@<X0>(uint64_t a1@<X8>)
{
  return sub_21F7674C0(a1);
}

uint64_t sub_21F810060()
{
  return 16;
}

__n128 sub_21F81006C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21F81007C()
{
  return sub_21F8110CC(&qword_26AD45848);
}

uint64_t sub_21F810088()
{
  return MEMORY[0x270FA0238](v0, 26, 7);
}

void sub_21F810098(char *a1@<X8>)
{
  sub_21F994228(*(unsigned char *)(v1 + 24), *(unsigned char *)(v1 + 25), a1);
}

uint64_t sub_21F8100AC()
{
  return MEMORY[0x270FA0238](v0, 26, 7);
}

void sub_21F8100BC(char *a1@<X8>)
{
  sub_21F994248(*(unsigned char *)(v1 + 24), *(unsigned char *)(v1 + 25), a1);
}

uint64_t sub_21F8100CC()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 25, 7);
}

uint64_t sub_21F810104@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_21F9942DC(a1, *(void *)(v2 + 16), *(unsigned char *)(v2 + 24), a2);
}

uint64_t sub_21F810110()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 34, 7);
}

uint64_t sub_21F810148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21F808E44(a1, *(void *)(v2 + 24), *(unsigned char *)(v2 + 32), (void (*)(void))sub_21F8101B8, a2);
}

uint64_t sub_21F810180@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_21F9943E8(a1, *(void *)(v2 + 16), *(unsigned char *)(v2 + 24), a2);
}

uint64_t sub_21F810190@<X0>(uint64_t *a1@<X8>)
{
  return sub_21F81027C((uint64_t (*)(void, void, void, void, void, void))sub_21F80C8E0, a1);
}

uint64_t sub_21F8101AC()
{
  return sub_21F8111A0(&qword_26AD45850);
}

uint64_t sub_21F8101B8()
{
  return sub_21F8111E0((uint64_t (*)(void, void, void, void, void))sub_21F80932C);
}

uint64_t sub_21F8101D0(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return sub_21F7607AC(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_21F8101E4(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F810218(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_21F81022C(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F810264@<X0>(uint64_t *a1@<X8>)
{
  return sub_21F81027C((uint64_t (*)(void, void, void, void, void, void))sub_21F80C9F0, a1);
}

uint64_t sub_21F81027C@<X0>(uint64_t (*a1)(void, void, void, void, void, void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1(v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
  *a2 = result;
  return result;
}

uint64_t sub_21F8102BC()
{
  return sub_21F811218(&qword_26AD46638);
}

uint64_t sub_21F8102CC()
{
  return sub_21F811218(qword_26AD46E30);
}

uint64_t sub_21F8102EC()
{
  return sub_21F745EE4(MEMORY[0x263F8EED8]);
}

uint64_t sub_21F810318()
{
  return sub_21F745EE4(MEMORY[0x263F8EF20]);
}

uint64_t sub_21F810330(void *a1)
{
  return sub_21F80C41C(a1, *(void (**)(uint64_t *__return_ptr))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), (uint64_t (*)(uint64_t, uint64_t))sub_21F7D3F18) & 1;
}

uint64_t sub_21F810368()
{
  return 24;
}

__n128 sub_21F810374(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_21F810388()
{
  return MEMORY[0x270FA0238](v0, 34, 7);
}

uint64_t sub_21F810398@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_21F9935D8(a1, *(unsigned char *)(v2 + 16), *(void *)(v2 + 24), *(unsigned char *)(v2 + 32), *(unsigned char *)(v2 + 33), a2);
}

uint64_t sub_21F8103B0@<X0>(uint64_t *a1@<X8>)
{
  return sub_21F776D44((uint64_t (*)(void, void, void, void, void))sub_21F80D804, a1);
}

uint64_t sub_21F8103CC@<X0>(uint64_t *a1@<X8>)
{
  return sub_21F78D9A4((uint64_t (*)(void, void, void, void, void, void))sub_21F80D690, a1);
}

uint64_t sub_21F8103E8@<X0>(uint64_t *a1@<X8>)
{
  return sub_21F8107BC((uint64_t (*)(void, void, void, void))sub_21F80D584, a1);
}

uint64_t sub_21F810404@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_21F80C4E4(*(void (**)(uint64_t *__return_ptr, void *))(v1 + 16));
  *a1 = result;
  return result;
}

uint64_t sub_21F81044C()
{
  return sub_21F745EE4(MEMORY[0x263F8EF20]);
}

uint64_t sub_21F810464(uint64_t *a1)
{
  return sub_21F80BE84(a1, *(void (**)(uint64_t *__return_ptr))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_21F810470(uint64_t result)
{
  if (result != 2) {
    return sub_21F7C22F8(result);
  }
  return result;
}

uint64_t sub_21F810480(uint64_t result)
{
  if (result != 2) {
    return sub_21F7C22E8(result);
  }
  return result;
}

uint64_t sub_21F810490(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 80);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 88);
  swift_bridgeObjectRetain();
  swift_retain();
  a2(v4, v5);
  swift_bridgeObjectRetain();
  sub_21F7637E4(v6, v7);
  return a1;
}

uint64_t sub_21F810514(uint64_t result)
{
  *(unsigned char *)(result + 128) = 0;
  return result;
}

uint64_t sub_21F81051C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 56);
  unsigned __int8 v4 = *(unsigned char *)(a1 + 64);
  swift_retain();
  sub_21F7642FC(v2);
  swift_bridgeObjectRetain();
  sub_21F7637E4(v3, v4);
  return a1;
}

uint64_t sub_21F810588@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_21F80D2B8(*(void (**)(uint64_t *__return_ptr, void *))(v1 + 16));
  *a1 = result;
  return result;
}

uint64_t sub_21F8105BC()
{
  return sub_21F745EE4(MEMORY[0x263F8EED8]);
}

void sub_21F8105D4(double *a1@<X8>)
{
  *a1 = sub_21F80D3C8(*(void (**)(double *__return_ptr, unsigned char **))(v1 + 16));
}

uint64_t sub_21F810608()
{
  return sub_21F80CE44(*(void (**)(void *))(v0 + 16));
}

uint64_t sub_21F810644@<X0>(uint64_t *a1@<X8>)
{
  return sub_21F81066C(&qword_267EE79C8, a1);
}

uint64_t sub_21F81065C@<X0>(uint64_t *a1@<X8>)
{
  return sub_21F81066C(&qword_267EE79E0, a1);
}

uint64_t sub_21F81066C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_21F80CFAC(*(void (**)(uint64_t *__return_ptr, void *))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), a1);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_21F8106A8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_21F80D0EC(*(void (**)(uint64_t *__return_ptr, void *))(v1 + 16));
  *a1 = result;
  return result;
}

uint64_t sub_21F8106DC()
{
  return sub_21F745EE4(MEMORY[0x263F8EF20]);
}

uint64_t sub_21F8106F4(void *a1)
{
  return sub_21F80C338(a1, *(void (**)(uint64_t *__return_ptr))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), sub_21F938F90) & 1;
}

uint64_t sub_21F81072C()
{
  return 32;
}

__n128 sub_21F810738(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

unint64_t sub_21F810744()
{
  unint64_t result = qword_26AD46360;
  if (!qword_26AD46360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD46360);
  }
  return result;
}

uint64_t sub_21F8107A4@<X0>(uint64_t *a1@<X8>)
{
  return sub_21F8107BC((uint64_t (*)(void, void, void, void))sub_21F80D208, a1);
}

uint64_t sub_21F8107BC@<X0>(uint64_t (*a1)(void, void, void, void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1(v2[2], v2[3], v2[4], v2[5]);
  *a2 = result;
  return result;
}

uint64_t sub_21F8107F4()
{
  return sub_21F745EE4(MEMORY[0x263F8EF20]);
}

uint64_t sub_21F81080C(void *a1)
{
  return sub_21F80C338(a1, *(void (**)(uint64_t *__return_ptr))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), sub_21F939114) & 1;
}

uint64_t sub_21F810844()
{
  return 32;
}

__n128 sub_21F810850(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

unint64_t sub_21F81085C()
{
  unint64_t result = qword_26AD476E8;
  if (!qword_26AD476E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD476E8);
  }
  return result;
}

unint64_t sub_21F8108B0()
{
  unint64_t result = qword_26AD47708[0];
  if (!qword_26AD47708[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26AD47708);
  }
  return result;
}

uint64_t sub_21F810904(uint64_t a1)
{
  sub_21F76CA40(&qword_26AD48438);
  uint64_t result = sub_21FA267A0();
  long long v3 = (void *)result;
  int64_t v4 = 0;
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v19 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & v5;
  int64_t v20 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v9 = result + 64;
  if ((v7 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v10 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    char v15 = *(unsigned char *)(*(void *)(a1 + 48) + i);
    uint64_t v22 = *(void *)(*(void *)(a1 + 56) + 8 * i);
    swift_retain();
    swift_getAtKeyPath();
    swift_release();
    *(void *)(v9 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(unsigned char *)(v3[6] + i) = v15;
    uint64_t result = sub_21F7F3E44((uint64_t)v21, v3[7] + 48 * i);
    uint64_t v16 = v3[2];
    BOOL v17 = __OFADD__(v16, 1);
    uint64_t v18 = v16 + 1;
    if (v17)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    _OWORD v3[2] = v18;
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_24;
    }
    if (v12 >= v20) {
      return (uint64_t)v3;
    }
    unint64_t v13 = *(void *)(v19 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v20) {
        return (uint64_t)v3;
      }
      unint64_t v13 = *(void *)(v19 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v20) {
          return (uint64_t)v3;
        }
        unint64_t v13 = *(void *)(v19 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v8 = (v13 - 1) & v13;
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v20) {
    return (uint64_t)v3;
  }
  unint64_t v13 = *(void *)(v19 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v20) {
      return (uint64_t)v3;
    }
    unint64_t v13 = *(void *)(v19 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_21F810B1C@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  return sub_21F993E58(a1, v2, a2);
}

uint64_t sub_21F810B28@<X0>(uint64_t *a1@<X8>)
{
  return sub_21F777200((uint64_t (*)(void, void, void, void, void))sub_21F80DD4C, a1);
}

uint64_t sub_21F810B48()
{
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

void sub_21F810B90(uint64_t a1@<X8>)
{
  *(double *)a1 = sub_21F80DE54(*(void (**)(double *__return_ptr, void *))(v1 + 16));
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
}

uint64_t *sub_21F810BC4(uint64_t *a1)
{
  return a1;
}

uint64_t sub_21F810BFC()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t sub_21F810C5C()
{
  return sub_21F80CD0C(*(void (**)(void *))(v0 + 16));
}

uint64_t sub_21F810C98()
{
  return 24;
}

__n128 sub_21F810CA4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_21F810CBC()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 80, 7);
}

uint64_t sub_21F810D24()
{
  return sub_21F745EE4(MEMORY[0x263F8EF20]);
}

uint64_t sub_21F810D3C(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F810D88()
{
  return sub_21F745EE4(MEMORY[0x263F8EEA0]);
}

uint64_t sub_21F810DA0@<X0>(void *a1@<X8>)
{
  return sub_21F80EEB8(*(void (**)(uint64_t *__return_ptr, uint64_t))(v1 + 16), *(void *)(v1 + 32), &qword_26AD468B8, &qword_26AD448A0, (void (*)(BOOL, unint64_t, uint64_t))sub_21F7A2530, a1);
}

uint64_t sub_21F810DF0()
{
  sub_21F75BF68(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), (void (*)(uint64_t, unint64_t, unint64_t))sub_21F7B3450);
  sub_21F75C094(*(void *)(v0 + 80), *(void *)(v0 + 88), *(unsigned char *)(v0 + 96), (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B347C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B3460);

  return MEMORY[0x270FA0238](v0, 97, 7);
}

uint64_t sub_21F810E78@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21F80446C(a1, v2 + 16, a2);
}

uint64_t sub_21F810E80()
{
  return sub_21F745EE4(MEMORY[0x263F8EED8]);
}

uint64_t sub_21F810E98@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_21F80D944(*(void (**)(uint64_t *__return_ptr, uint64_t **))(v1 + 16));
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v4;
  return result;
}

uint64_t sub_21F810ECC()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

void sub_21F810EDC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_21F8071BC(a1, *(unsigned char *)(v2 + 16), a2);
}

uint64_t sub_21F810EE4()
{
  return sub_21F745EE4(MEMORY[0x263F8EEA0]);
}

uint64_t sub_21F810EFC()
{
  return sub_21F745EE4(MEMORY[0x263F8EF20]);
}

uint64_t sub_21F810F14()
{
  return MEMORY[0x270FA0238](v0, 33, 7);
}

uint64_t sub_21F810F24@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_21F807E00(a1, *(unsigned char *)(v2 + 16), *(void *)(v2 + 24), *(unsigned char *)(v2 + 32));
  *a2 = result;
  return result;
}

uint64_t sub_21F810F58()
{
  return sub_21F745EE4(MEMORY[0x263F8EEA0]);
}

uint64_t sub_21F810F74()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 88, 7);
}

uint64_t sub_21F810FE4@<X0>(uint64_t *a1@<X8>)
{
  return sub_21F80EE6C(*(void (**)(uint64_t *__return_ptr, void *))(v1 + 16), *(void *)(v1 + 24), v1 + 32, &qword_26AD43E68, a1);
}

uint64_t sub_21F81100C@<X0>(uint64_t *a1@<X8>)
{
  return sub_21F811024((uint64_t (*)(void, void, void, void, void, void))sub_21F808440, a1);
}

uint64_t sub_21F811024@<X0>(uint64_t (*a1)(void, void, void, void, void, void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1(*(void *)(v2 + 16), *(void *)(v2 + 24), *(unsigned __int8 *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56));
  *a2 = result;
  return result;
}

uint64_t sub_21F811068()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_21F8110C0()
{
  return sub_21F8110CC(&qword_26AD43E90);
}

uint64_t sub_21F8110CC(uint64_t *a1)
{
  return sub_21F80D9C0(*(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), a1);
}

uint64_t sub_21F8110F4()
{
  return MEMORY[0x270FA0238](v0, 26, 7);
}

uint64_t sub_21F811104()
{
  return MEMORY[0x270FA0238](v0, 26, 7);
}

void *sub_21F811114@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, char *))(v1 + 16))(&v4, (char *)&v4 + 1);
  *a1 = v4;
  return result;
}

uint64_t sub_21F811158@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21F808E44(a1, *(void *)(v2 + 24), *(unsigned char *)(v2 + 32), (void (*)(void))sub_21F8111C8, a2);
}

uint64_t sub_21F811194()
{
  return sub_21F8111A0(&qword_26AD43E98);
}

uint64_t sub_21F8111A0(uint64_t *a1)
{
  return sub_21F80DAD0(*(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), a1);
}

uint64_t sub_21F8111C8()
{
  return sub_21F8111E0((uint64_t (*)(void, void, void, void, void))sub_21F808EEC);
}

uint64_t sub_21F8111E0(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(*(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_21F8111FC()
{
  return sub_21F811218(&qword_26AD44890);
}

uint64_t sub_21F81120C()
{
  return sub_21F811218(&qword_26AD448A8);
}

uint64_t sub_21F811218(uint64_t *a1)
{
  return sub_21F80D440(*(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), a1);
}

uint64_t sub_21F811240()
{
  return sub_21F745EE4(MEMORY[0x263F8EF20]);
}

uint64_t sub_21F811258(void *a1)
{
  return sub_21F80C41C(a1, *(void (**)(uint64_t *__return_ptr))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), (uint64_t (*)(uint64_t, uint64_t))sub_21F7D3F84) & 1;
}

uint64_t sub_21F811290(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_21F779EA4(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21F8112F4()
{
  return MEMORY[0x270FA0238](v0, 34, 7);
}

uint64_t sub_21F811308()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_21F811358@<X0>(uint64_t *a1@<X8>)
{
  return sub_21F776D44((uint64_t (*)(void, void, void, void, void))sub_21F80CC2C, a1);
}

uint64_t sub_21F811370()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

char **sub_21F811380@<X0>(char **result@<X0>, unsigned char *a2@<X8>)
{
  char v3 = *(unsigned char *)(v2 + 16);
  if (**result != 2) {
    char v3 = **result;
  }
  *a2 = v3 & 1;
  return result;
}

uint64_t sub_21F8113A0()
{
  return sub_21F745EE4(MEMORY[0x263F8EED8]);
}

uint64_t sub_21F8113B8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_21F80C620(*(void (**)(uint64_t *__return_ptr, char **))(v1 + 16));
  *a1 = result & 1;
  return result;
}

uint64_t sub_21F8115A8@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  sub_21F74D6C4(v3);
  if (*(void *)(*(void *)(a2 - 8) + 64)) {
    a1(1);
  }
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();

  return sub_21F74CA38(OffsetAttribute2, a3);
}

uint64_t sub_21F811650@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v67 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  unint64_t v56 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v55 = (char *)&v54 - v10;
  uint64_t v71 = *(void (**)(char *, uint64_t))(*(void *)(*(void *)(a3 + 16) + 24) + 8);
  uint64_t v11 = sub_21FA25CC0();
  uint64_t v65 = *(void *)(v11 - 8);
  uint64_t v66 = v11;
  MEMORY[0x270FA5388](v11);
  unint64_t v54 = (char *)&v54 - v12;
  uint64_t v68 = sub_21FA26540();
  MEMORY[0x270FA5388](v68);
  uint64_t v13 = sub_21FA26780();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v69 = v13;
  uint64_t v70 = v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v54 - v15;
  uint64_t v17 = swift_getTupleTypeMetadata2();
  uint64_t v18 = sub_21FA26340();
  uint64_t v60 = *(void *)(v18 - 8);
  uint64_t v61 = v18;
  MEMORY[0x270FA5388](v18);
  int64_t v20 = (char *)&v54 - v19;
  uint64_t v58 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](v58);
  unint64_t v57 = (char *)&v54 - v21;
  uint64_t v64 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v22);
  unint64_t v62 = (char *)&v54 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v25 = MEMORY[0x270FA5388](v24);
  uint64_t v59 = (char *)&v54 - v26;
  MEMORY[0x223C55200](a1, a2, v25);
  uint64_t v72 = a1;
  uint64_t v73 = a2;
  uint64_t v74 = a3;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v28 = (void *)swift_allocObject();
  v28[2] = a1;
  v28[3] = a2;
  uint64_t v29 = (uint64_t)v71;
  v28[4] = a3;
  v28[5] = KeyPath;
  swift_retain();
  swift_getWitnessTable();
  sub_21FA267E0();
  swift_release();
  swift_release();
  uint64_t v30 = v69;
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_21F9E90B4(v30, WitnessTable, v29, (uint64_t)v20);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v16, v30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v20, 1, v17) == 1)
  {
    (*(void (**)(char *, uint64_t))(v60 + 8))(v20, v61);
    uint64_t v32 = 1;
    uint64_t v34 = v66;
    uint64_t v33 = v67;
    uint64_t v35 = v65;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56))(v33, v32, 1, v34);
  }
  uint64_t v36 = &v20[*(int *)(v17 + 48)];
  uint64_t v38 = v57;
  uint64_t v37 = v58;
  uint64_t v39 = &v57[*(int *)(v58 + 48)];
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v64 + 32);
  v40(v57, v20, AssociatedTypeWitness);
  v40(v39, v36, AssociatedTypeWitness);
  uint64_t v41 = &v38[*(int *)(v37 + 48)];
  uint64_t v42 = v59;
  v40(v59, v38, AssociatedTypeWitness);
  uint64_t v43 = v62;
  v40(v62, v41, AssociatedTypeWitness);
  uint64_t result = sub_21FA25C70();
  if (result)
  {
    uint64_t v45 = TupleTypeMetadata2;
    uint64_t v46 = v55;
    uint64_t v47 = &v55[*(int *)(TupleTypeMetadata2 + 48)];
    v40(v55, v42, AssociatedTypeWitness);
    v40(v47, v43, AssociatedTypeWitness);
    uint64_t v48 = v56;
    uint64_t v49 = &v56[*(int *)(v45 + 48)];
    uint64_t v50 = v64;
    uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v64 + 16);
    v51(v56, v46, AssociatedTypeWitness);
    v51(v49, v47, AssociatedTypeWitness);
    uint64_t v52 = v54;
    v40(v54, v48, AssociatedTypeWitness);
    uint64_t v71 = *(void (**)(char *, uint64_t))(v50 + 8);
    v71(v49, AssociatedTypeWitness);
    uint64_t v53 = &v48[*(int *)(TupleTypeMetadata2 + 48)];
    v40(v48, v46, AssociatedTypeWitness);
    v40(v53, v47, AssociatedTypeWitness);
    uint64_t v34 = v66;
    v40(&v52[*(int *)(v66 + 36)], v53, AssociatedTypeWitness);
    v71(v48, AssociatedTypeWitness);
    uint64_t v35 = v65;
    uint64_t v33 = v67;
    (*(void (**)(uint64_t, char *, uint64_t))(v65 + 32))(v67, v52, v34);
    uint64_t v32 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56))(v33, v32, 1, v34);
  }
  __break(1u);
  return result;
}

uint64_t sub_21F811DC0(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x263F8EE78];
  char v3 = (void *)sub_21F932E8C(MEMORY[0x263F8EE78]);
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_37:
    swift_bridgeObjectRelease();
    return (uint64_t)v2;
  }
  uint64_t v6 = v4 + 32;
  swift_bridgeObjectRetain();
  uint64_t v75 = v5 - 1;
  while (1)
  {
    unint64_t v79 = v2;
    uint64_t v74 = v6;
    sub_21F7BB81C(v6, (uint64_t)v82);
    sub_21F7BB81C((uint64_t)v82, (uint64_t)v83);
    int v7 = sub_21F7E108C((uint64_t)v83);
    uint64_t v8 = sub_21F7E1098((uint64_t)v83);
    uint64_t v10 = *(void *)(v8 + 8);
    uint64_t v9 = *(void *)(v8 + 16);
    unsigned int v11 = *(unsigned __int8 *)(v8 + 24);
    if (v7 == 1)
    {
      uint64_t v12 = *(void *)(v8 + 32);
      uint64_t v13 = *(void *)(v8 + 80);
      uint64_t v14 = *(void *)(v8 + 88);
      uint64_t v15 = *(unsigned __int8 *)(v8 + 96);
      uint64_t v16 = *(void *)(v8 + 104);
      unint64_t v17 = v15 | 0x8000000000000000;
      sub_21F7652C0(*(void *)(v8 + 8), v9, v11);
      swift_bridgeObjectRetain();
      sub_21F7652C0(v13, v14, v15);
      uint64_t v18 = v16;
    }
    else
    {
      uint64_t v19 = *(void *)(v8 + 32);
      sub_21F7652C0(*(void *)(v8 + 8), v9, v11);
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      unint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v12 = v19;
    }
    swift_bridgeObjectRetain();
    uint64_t v20 = v10;
    v84[0] = v10;
    v84[1] = v9;
    uint64_t v78 = v11;
    _OWORD v84[2] = v11;
    v84[3] = v12;
    uint64_t v21 = v12;
    uint64_t v81 = v13;
    v84[4] = v13;
    v84[5] = v14;
    unint64_t v22 = v17;
    v84[6] = v17;
    v84[7] = v18;
    uint64_t v23 = v18;
    uint64_t v24 = v3[2];
    sub_21F7C618C(v82, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
    uint64_t v76 = v20;
    uint64_t v77 = v12;
    if (!v24) {
      break;
    }
    unint64_t v25 = sub_21F915A80((uint64_t)v84);
    if ((v26 & 1) == 0) {
      break;
    }
    unint64_t v27 = *(void *)(v3[7] + 8 * v25);
    sub_21F7C618C(v82, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
    uint64_t v28 = v79;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      if ((v27 & 0x8000000000000000) != 0) {
        goto LABEL_40;
      }
    }
    else
    {
      uint64_t v28 = sub_21F9353CC(v79);
      if ((v27 & 0x8000000000000000) != 0) {
        goto LABEL_40;
      }
    }
    if (v27 >= v28[2]) {
      goto LABEL_41;
    }
    uint64_t v29 = v17;
    uint64_t v30 = v28;
    uint64_t v31 = v9;
    uint64_t v32 = &v30[9 * v27];
    uint64_t v35 = (char *)v32[12];
    uint64_t v34 = (char **)(v32 + 12);
    uint64_t v33 = v35;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v34 = v35;
    uint64_t v80 = v30;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v33 = sub_21F7E85B8(0, *((void *)v33 + 2) + 1, 1, v33);
      *uint64_t v34 = v33;
    }
    unint64_t v38 = *((void *)v33 + 2);
    unint64_t v37 = *((void *)v33 + 3);
    if (v38 >= v37 >> 1)
    {
      uint64_t v33 = sub_21F7E85B8((char *)(v37 > 1), v38 + 1, 1, v33);
      *uint64_t v34 = v33;
    }
    uint64_t v39 = v75;
    uint64_t v40 = v77;
    *((void *)v33 + 2) = v38 + 1;
    sub_21F7BB81C((uint64_t)v82, (uint64_t)&v33[152 * v38 + 32]);
    uint64_t v41 = v81;
    LOBYTE(v42) = v78;
    uint64_t v43 = v14;
    uint64_t v44 = v31;
    uint64_t v2 = v80;
    uint64_t v45 = v76;
LABEL_32:
    sub_21F7E0FC0(v45, v44, v42, v40, v41, v43, v29);
    sub_21F7C618C(v82, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
    if (!v39)
    {
      swift_bridgeObjectRelease();
      goto LABEL_37;
    }
    uint64_t v75 = v39 - 1;
    uint64_t v6 = v74 + 152;
  }
  uint64_t v46 = v79[2];
  uint64_t v47 = v20;
  uint64_t v48 = v9;
  uint64_t v73 = v14;
  uint64_t v29 = v22;
  uint64_t v49 = v22;
  uint64_t v50 = v23;
  sub_21F7E0F38(v47, v9, v78, v21, v81, v14, v49);
  char v51 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v53 = sub_21F915A80((uint64_t)v84);
  uint64_t v54 = v3[2];
  BOOL v55 = (v52 & 1) == 0;
  uint64_t v56 = v54 + v55;
  if (!__OFADD__(v54, v55))
  {
    char v57 = v52;
    if (v3[3] < v56)
    {
      sub_21F8713AC(v56, v51);
      unint64_t v58 = sub_21F915A80((uint64_t)v84);
      if ((v57 & 1) != (v59 & 1)) {
        goto LABEL_42;
      }
      unint64_t v53 = v58;
      if ((v57 & 1) == 0) {
        goto LABEL_25;
      }
LABEL_23:
      *(void *)(v3[7] + 8 * v53) = v46;
      uint64_t v60 = v81;
      uint64_t v43 = v14;
      uint64_t v61 = v48;
      uint64_t v62 = v77;
      uint64_t v42 = v78;
      uint64_t v63 = v76;
LABEL_27:
      swift_bridgeObjectRelease();
      sub_21F7E0FC0(v63, v61, v42, v62, v60, v43, v29);
      sub_21F76CA40(&qword_26AD47CD8);
      uint64_t v68 = swift_allocObject();
      *(_OWORD *)(v68 + 16) = xmmword_21FA28550;
      sub_21F7BB81C((uint64_t)v82, v68 + 32);
      sub_21F7C618C(v82, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
      sub_21F7E0F38(v63, v61, v42, v62, v60, v43, v29);
      uint64_t v2 = v79;
      uint64_t v44 = v61;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v2 = sub_21F7E9CA4(0, v79[2] + 1, 1, v79);
      }
      unint64_t v70 = v2[2];
      unint64_t v69 = v2[3];
      if (v70 >= v69 >> 1) {
        uint64_t v2 = sub_21F7E9CA4((void *)(v69 > 1), v70 + 1, 1, v2);
      }
      v2[2] = v70 + 1;
      uint64_t v71 = &v2[9 * v70];
      uint64_t v45 = v76;
      uint64_t v40 = v77;
      v71[4] = v76;
      v71[5] = v44;
      v71[6] = v42;
      v71[7] = v77;
      uint64_t v41 = v81;
      v71[8] = v81;
      _OWORD v71[9] = v43;
      v71[10] = v29;
      v71[11] = v50;
      v71[12] = v68;
      uint64_t v39 = v75;
      goto LABEL_32;
    }
    if (v51)
    {
      if (v52) {
        goto LABEL_23;
      }
    }
    else
    {
      sub_21F87A9EC();
      if (v57) {
        goto LABEL_23;
      }
    }
LABEL_25:
    v3[(v53 >> 6) + 8] |= 1 << v53;
    sub_21F7E0EDC((uint64_t)v84, v3[6] + (v53 << 6));
    *(void *)(v3[7] + 8 * v53) = v46;
    uint64_t v64 = v3[2];
    BOOL v65 = __OFADD__(v64, 1);
    uint64_t v66 = v64 + 1;
    if (v65) {
      goto LABEL_39;
    }
    _OWORD v3[2] = v66;
    uint64_t v63 = v76;
    uint64_t v61 = v48;
    uint64_t v67 = v48;
    uint64_t v62 = v77;
    uint64_t v42 = v78;
    uint64_t v60 = v81;
    uint64_t v43 = v73;
    sub_21F7E0F38(v76, v67, v78, v77, v81, v73, v29);
    goto LABEL_27;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  uint64_t result = sub_21FA26990();
  __break(1u);
  return result;
}

uint64_t sub_21F81239C(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x263F8EE78];
  char v3 = (void *)sub_21F932FBC(MEMORY[0x263F8EE78]);
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_41:
    swift_bridgeObjectRelease();
    return (uint64_t)v2;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = v4 - 1;
  uint64_t v6 = 32;
  uint64_t v39 = a1;
  while (1)
  {
    memcpy(__dst, (const void *)(a1 + v6), sizeof(__dst));
    int v7 = (char *)__dst[15];
    sub_21F815840((uint64_t)&__dst[55], (uint64_t)v41);
    if (sub_21F7F0F80(v41) != 1) {
      break;
    }
    sub_21F7F4E2C((uint64_t)__dst);
    swift_bridgeObjectRetain();
    if (!v3[2]) {
      goto LABEL_20;
    }
LABEL_11:
    unint64_t v10 = sub_21F915AE0((uint64_t)v7);
    if ((v11 & 1) == 0) {
      goto LABEL_20;
    }
    unint64_t v12 = *(void *)(v3[7] + 8 * v10);
    sub_21F7F4E2C((uint64_t)__dst);
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      if ((v12 & 0x8000000000000000) != 0) {
        goto LABEL_44;
      }
    }
    else
    {
      uint64_t v2 = sub_21F9353E0(v2);
      if ((v12 & 0x8000000000000000) != 0) {
        goto LABEL_44;
      }
    }
    if (v12 >= v2[2]) {
      goto LABEL_45;
    }
    uint64_t v13 = &v2[2 * v12];
    uint64_t v16 = (char *)v13[5];
    uint64_t v14 = (char **)(v13 + 5);
    uint64_t v15 = v16;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v14 = v16;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v15 = sub_21F7E9FE0(0, *((void *)v15 + 2) + 1, 1, v15);
      *uint64_t v14 = v15;
    }
    unint64_t v19 = *((void *)v15 + 2);
    unint64_t v18 = *((void *)v15 + 3);
    if (v19 >= v18 >> 1)
    {
      uint64_t v15 = sub_21F7E9FE0((char *)(v18 > 1), v19 + 1, 1, v15);
      *uint64_t v14 = v15;
    }
    *((void *)v15 + 2) = v19 + 1;
    memcpy(&v15[608 * v19 + 32], __dst, 0x260uLL);
LABEL_36:
    swift_bridgeObjectRelease();
    sub_21F7F5114((uint64_t)__dst);
    a1 = v39;
    if (!v5)
    {
      swift_bridgeObjectRelease();
      goto LABEL_41;
    }
    --v5;
    v6 += 608;
  }
  sub_21F7F3D20((uint64_t)&__dst[55], (uint64_t (*)(void))sub_21F7C6094);
  sub_21F7F3D20((uint64_t)&__dst[55], (uint64_t (*)(void))sub_21F7C6094);
  sub_21F7F3D20((uint64_t)&__dst[55], (uint64_t (*)(void))sub_21F7C6094);
  sub_21F7F4E2C((uint64_t)__dst);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v7 = sub_21F7E85B8(0, *((void *)v7 + 2) + 1, 1, v7);
  }
  unint64_t v9 = *((void *)v7 + 2);
  unint64_t v8 = *((void *)v7 + 3);
  if (v9 >= v8 >> 1) {
    int v7 = sub_21F7E85B8((char *)(v8 > 1), v9 + 1, 1, v7);
  }
  *((void *)v7 + 2) = v9 + 1;
  sub_21F7BB81C((uint64_t)v41, (uint64_t)&v7[152 * v9 + 32]);
  sub_21F7F3D20((uint64_t)&__dst[55], (uint64_t (*)(void))sub_21F7BB724);
  sub_21F7F3D20((uint64_t)&__dst[55], (uint64_t (*)(void))sub_21F7BB724);
  if (v3[2]) {
    goto LABEL_11;
  }
LABEL_20:
  uint64_t v20 = v2[2];
  swift_bridgeObjectRetain();
  char v21 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v23 = sub_21F915AE0((uint64_t)v7);
  uint64_t v24 = v3[2];
  BOOL v25 = (v22 & 1) == 0;
  uint64_t v26 = v24 + v25;
  if (!__OFADD__(v24, v25))
  {
    char v27 = v22;
    if (v3[3] >= v26)
    {
      if (v21)
      {
        if ((v22 & 1) == 0) {
          goto LABEL_29;
        }
      }
      else
      {
        sub_21F87ABB4();
        if ((v27 & 1) == 0) {
          goto LABEL_29;
        }
      }
    }
    else
    {
      sub_21F8716FC(v26, v21);
      unint64_t v28 = sub_21F915AE0((uint64_t)v7);
      if ((v27 & 1) != (v29 & 1)) {
        goto LABEL_46;
      }
      unint64_t v23 = v28;
      if ((v27 & 1) == 0)
      {
LABEL_29:
        v3[(v23 >> 6) + 8] |= 1 << v23;
        uint64_t v30 = 8 * v23;
        *(void *)(v3[6] + v30) = v7;
        *(void *)(v3[7] + v30) = v20;
        uint64_t v31 = v3[2];
        BOOL v32 = __OFADD__(v31, 1);
        uint64_t v33 = v31 + 1;
        if (v32) {
          goto LABEL_43;
        }
        _OWORD v3[2] = v33;
        swift_bridgeObjectRetain();
        goto LABEL_31;
      }
    }
    *(void *)(v3[7] + 8 * v23) = v20;
LABEL_31:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_21F76CA40(&qword_26AD47CE8);
    uint64_t v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_21FA28550;
    memcpy((void *)(v34 + 32), __dst, 0x260uLL);
    sub_21F7F4E2C((uint64_t)__dst);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_21F7E9FCC(0, v2[2] + 1, 1, v2);
    }
    unint64_t v36 = v2[2];
    unint64_t v35 = v2[3];
    if (v36 >= v35 >> 1) {
      uint64_t v2 = sub_21F7E9FCC((void *)(v35 > 1), v36 + 1, 1, v2);
    }
    v2[2] = v36 + 1;
    unint64_t v37 = &v2[2 * v36];
    v37[4] = v7;
    v37[5] = v34;
    goto LABEL_36;
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  sub_21F76CA40(&qword_26AD468A8);
  uint64_t result = sub_21FA26990();
  __break(1u);
  return result;
}

uint64_t sub_21F812848(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x263F8EE78];
  char v3 = (void *)sub_21F933248(MEMORY[0x263F8EE78]);
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_34:
    swift_bridgeObjectRelease();
    return (uint64_t)v2;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = v4 - 1;
  uint64_t v6 = 32;
  uint64_t v68 = a1;
  while (1)
  {
    uint64_t v70 = v6;
    long long v7 = *(_OWORD *)(a1 + v6 + 144);
    long long v81 = *(_OWORD *)(a1 + v6 + 128);
    long long v82 = v7;
    long long v83 = *(_OWORD *)(a1 + v6 + 160);
    char v84 = *(unsigned char *)(a1 + v6 + 176);
    long long v8 = *(_OWORD *)(a1 + v6 + 80);
    long long v78 = *(_OWORD *)(a1 + v6 + 64);
    *(_OWORD *)unint64_t v79 = v8;
    long long v9 = *(_OWORD *)(a1 + v6 + 112);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a1 + v6 + 96);
    long long v80 = v9;
    long long v10 = *(_OWORD *)(a1 + v6 + 16);
    long long v74 = *(_OWORD *)(a1 + v6);
    long long v75 = v10;
    long long v11 = *(_OWORD *)(a1 + v6 + 48);
    long long v76 = *(_OWORD *)(a1 + v6 + 32);
    long long v77 = v11;
    uint64_t v12 = *(void *)&v79[8];
    uint64_t v13 = *(void *)&v79[16];
    char v14 = v79[24];
    uint64_t v15 = v80;
    uint64_t v16 = v83;
    char v17 = v84;
    long long v85 = *(_OWORD *)&v79[8];
    v86[0] = v79[24];
    *(void *)&v86[8] = v80;
    *(void *)&unsigned char v86[16] = v83;
    v86[24] = v84;
    uint64_t v18 = v3[2];
    sub_21F815690((uint64_t)&v74);
    sub_21F7652C0(v12, v13, v14);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v73 = v5;
    if (!v18) {
      break;
    }
    unint64_t v19 = sub_21F916214((uint64_t)&v85);
    if ((v20 & 1) == 0) {
      break;
    }
    unint64_t v21 = *(void *)(v3[7] + 8 * v19);
    sub_21F815690((uint64_t)&v74);
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      if ((v21 & 0x8000000000000000) != 0) {
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v2 = sub_21F935408(v2);
      if ((v21 & 0x8000000000000000) != 0) {
        goto LABEL_37;
      }
    }
    if (v21 >= v2[2]) {
      goto LABEL_38;
    }
    uint64_t v71 = v2;
    char v22 = &v2[7 * v21];
    BOOL v25 = (char *)v22[10];
    unint64_t v23 = (char **)(v22 + 10);
    uint64_t v24 = v25;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *unint64_t v23 = v25;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v24 = sub_21F7EA23C(0, *((void *)v24 + 2) + 1, 1, v24);
      *unint64_t v23 = v24;
    }
    unint64_t v28 = *((void *)v24 + 2);
    unint64_t v27 = *((void *)v24 + 3);
    if (v28 >= v27 >> 1)
    {
      uint64_t v24 = sub_21F7EA23C((char *)(v27 > 1), v28 + 1, 1, v24);
      *unint64_t v23 = v24;
    }
    a1 = v68;
    *((void *)v24 + 2) = v28 + 1;
    char v29 = &v24[184 * v28];
    long long v30 = v74;
    long long v31 = v75;
    long long v32 = v77;
    *((_OWORD *)v29 + 4) = v76;
    *((_OWORD *)v29 + 5) = v32;
    *((_OWORD *)v29 + 2) = v30;
    *((_OWORD *)v29 + 3) = v31;
    long long v33 = v78;
    long long v34 = *(_OWORD *)v79;
    long long v35 = v80;
    *((_OWORD *)v29 + 8) = *(_OWORD *)&v79[16];
    *((_OWORD *)v29 + 9) = v35;
    *((_OWORD *)v29 + 6) = v33;
    *((_OWORD *)v29 + 7) = v34;
    long long v36 = v81;
    long long v37 = v82;
    long long v38 = v83;
    v29[208] = v84;
    *((_OWORD *)v29 + 11) = v37;
    *((_OWORD *)v29 + 12) = v38;
    *((_OWORD *)v29 + 10) = v36;
    uint64_t v2 = v71;
LABEL_29:
    sub_21F7656A8(v12, v13, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_21F815768((uint64_t)&v74);
    if (!v73)
    {
      swift_bridgeObjectRelease();
      goto LABEL_34;
    }
    uint64_t v5 = v73 - 1;
    uint64_t v6 = v70 + 184;
  }
  char v69 = v17;
  uint64_t v72 = v2;
  uint64_t v39 = v2[2];
  sub_21F7652C0(v12, v13, v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v40 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v42 = sub_21F916214((uint64_t)&v85);
  uint64_t v43 = v3[2];
  BOOL v44 = (v41 & 1) == 0;
  uint64_t v45 = v43 + v44;
  if (!__OFADD__(v43, v44))
  {
    char v46 = v41;
    if (v3[3] < v45)
    {
      sub_21F871DDC(v45, v40);
      unint64_t v47 = sub_21F916214((uint64_t)&v85);
      if ((v46 & 1) != (v48 & 1)) {
        goto LABEL_39;
      }
      unint64_t v42 = v47;
      if ((v46 & 1) == 0) {
        goto LABEL_22;
      }
LABEL_20:
      *(void *)(v3[7] + 8 * v42) = v39;
LABEL_24:
      swift_bridgeObjectRelease();
      sub_21F7656A8(v12, v13, v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_21F76CA40(&qword_26AD46930);
      uint64_t v54 = swift_allocObject();
      long long v55 = v81;
      long long v56 = v83;
      *(_OWORD *)(v54 + 176) = v82;
      *(_OWORD *)(v54 + 192) = v56;
      long long v57 = v78;
      long long v58 = *(_OWORD *)&v79[16];
      long long v59 = v80;
      *(_OWORD *)(v54 + 112) = *(_OWORD *)v79;
      *(_OWORD *)(v54 + 128) = v58;
      *(_OWORD *)(v54 + 144) = v59;
      *(_OWORD *)(v54 + 160) = v55;
      long long v60 = v74;
      long long v61 = v75;
      *(_OWORD *)(v54 + 16) = xmmword_21FA28550;
      *(_OWORD *)(v54 + 32) = v60;
      long long v62 = v76;
      long long v63 = v77;
      *(_OWORD *)(v54 + 48) = v61;
      *(_OWORD *)(v54 + 64) = v62;
      *(unsigned char *)(v54 + 208) = v84;
      *(_OWORD *)(v54 + 80) = v63;
      *(_OWORD *)(v54 + 96) = v57;
      sub_21F815690((uint64_t)&v74);
      sub_21F7652C0(v12, v13, v14);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v2 = v72;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v2 = sub_21F7EA474(0, v72[2] + 1, 1, v72);
      }
      unint64_t v65 = v2[2];
      unint64_t v64 = v2[3];
      if (v65 >= v64 >> 1) {
        uint64_t v2 = sub_21F7EA474((void *)(v64 > 1), v65 + 1, 1, v2);
      }
      v2[2] = v65 + 1;
      uint64_t v66 = &v2[7 * v65];
      v66[4] = v12;
      v66[5] = v13;
      *((unsigned char *)v66 + 48) = v14;
      v66[7] = v15;
      v66[8] = v16;
      *((unsigned char *)v66 + 72) = v69;
      v66[10] = v54;
      a1 = v68;
      goto LABEL_29;
    }
    if (v40)
    {
      if (v41) {
        goto LABEL_20;
      }
    }
    else
    {
      sub_21F87AF78();
      if (v46) {
        goto LABEL_20;
      }
    }
LABEL_22:
    v3[(v42 >> 6) + 8] |= 1 << v42;
    uint64_t v49 = (_OWORD *)(v3[6] + 48 * v42);
    long long v50 = *(_OWORD *)v86;
    *uint64_t v49 = v85;
    v49[1] = v50;
    *(_OWORD *)((char *)v49 + 25) = *(_OWORD *)&v86[9];
    *(void *)(v3[7] + 8 * v42) = v39;
    uint64_t v51 = v3[2];
    BOOL v52 = __OFADD__(v51, 1);
    uint64_t v53 = v51 + 1;
    if (v52) {
      goto LABEL_36;
    }
    _OWORD v3[2] = v53;
    sub_21F7652C0(v12, v13, v14);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_24;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  uint64_t result = sub_21FA26990();
  __break(1u);
  return result;
}

uint64_t sub_21F812D68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v55 = a2;
  uint64_t v53 = a4;
  uint64_t v54 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  char v48 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  char v46 = (char *)&v45 - v8;
  uint64_t v9 = sub_21FA25CC0();
  uint64_t v51 = *(void *)(v9 - 8);
  uint64_t v52 = v9;
  MEMORY[0x270FA5388](v9);
  unint64_t v47 = (char *)&v45 - v10;
  uint64_t v11 = swift_getTupleTypeMetadata2();
  uint64_t v12 = sub_21FA26340();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v45 - v14;
  uint64_t v16 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v45 - v17;
  uint64_t v50 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v19);
  unint64_t v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v45 - v23;
  uint64_t v25 = v55;
  uint64_t v55 = a3;
  sub_21F9E90B4(v54, v25, a3, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v15, 1, v11) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    uint64_t v26 = 1;
    uint64_t v28 = v52;
    uint64_t v27 = v53;
    uint64_t v29 = v51;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v27, v26, 1, v28);
  }
  long long v30 = &v15[*(int *)(v11 + 48)];
  long long v31 = &v18[*(int *)(v16 + 48)];
  long long v32 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
  v32(v18, v15, AssociatedTypeWitness);
  v32(v31, v30, AssociatedTypeWitness);
  long long v33 = &v18[*(int *)(v16 + 48)];
  v32(v24, v18, AssociatedTypeWitness);
  v32(v21, v33, AssociatedTypeWitness);
  uint64_t result = sub_21FA25C70();
  if (result)
  {
    uint64_t v35 = TupleTypeMetadata2;
    long long v36 = v46;
    long long v37 = &v46[*(int *)(TupleTypeMetadata2 + 48)];
    v32(v46, v24, AssociatedTypeWitness);
    long long v56 = v37;
    v32(v37, v21, AssociatedTypeWitness);
    long long v38 = v48;
    uint64_t v39 = &v48[*(int *)(v35 + 48)];
    uint64_t v40 = v50;
    char v41 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
    v41(v48, v36, AssociatedTypeWitness);
    v41(v39, v37, AssociatedTypeWitness);
    unint64_t v42 = v47;
    v32(v47, v38, AssociatedTypeWitness);
    uint64_t v43 = *(void (**)(char *, uint64_t))(v40 + 8);
    v43(v39, AssociatedTypeWitness);
    BOOL v44 = &v38[*(int *)(TupleTypeMetadata2 + 48)];
    v32(v38, v36, AssociatedTypeWitness);
    v32(v44, v56, AssociatedTypeWitness);
    uint64_t v28 = v52;
    v32(&v42[*(int *)(v52 + 36)], v44, AssociatedTypeWitness);
    v43(v38, AssociatedTypeWitness);
    uint64_t v29 = v51;
    uint64_t v27 = v53;
    (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(v53, v42, v28);
    uint64_t v26 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v27, v26, 1, v28);
  }
  __break(1u);
  return result;
}

uint64_t sub_21F8132F4@<X0>(unsigned char *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t result = sub_21FA25B40();
  *a1 = result & 1;
  return result;
}

uint64_t sub_21F813354@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, void (*a4)(char *, char *, uint64_t)@<X4>, uint64_t a5@<X5>, char *a6@<X8>)
{
  uint64_t v60 = a5;
  long long v78 = a1;
  uint64_t v79 = a2;
  char v69 = a6;
  uint64_t v62 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v89 = (char *)&v57 - v11;
  long long v85 = v12;
  uint64_t v86 = a4;
  uint64_t v13 = v12;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void **)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v88 = (char *)&v57 - v16;
  uint64_t v68 = sub_21FA26340();
  long long v63 = *(void (***)(uint64_t, uint64_t))(v68 - 8);
  MEMORY[0x270FA5388](v68);
  uint64_t v18 = (char *)&v57 - v17;
  uint64_t v19 = (uint64_t)*(v13 - 1);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t v57 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v57 - v24;
  uint64_t v82 = sub_21FA26340();
  uint64_t v58 = *(void *)(v82 - 8);
  MEMORY[0x270FA5388](v82);
  long long v61 = (char *)&v57 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  long long v77 = (char *)&v57 - v28;
  __n128 v30 = MEMORY[0x270FA5388](v29);
  long long v32 = (char *)&v57 - v31;
  long long v33 = (void (*)(uint64_t, void, uint64_t, uint64_t))v15[7];
  uint64_t v67 = v15 + 7;
  uint64_t v66 = v33;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v33)(v69, 1, 1, AssociatedTypeWitness, v30);
  long long v34 = *(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56);
  uint64_t v76 = a3;
  uint64_t v65 = v62 + 56;
  unint64_t v64 = v34;
  v34(v32, 1, 1, a3);
  (*(void (**)(char *, void *, void (**)(void)))(v19 + 16))(v22, v87, v85);
  sub_21FA25D60();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  long long v80 = v25;
  uint64_t v81 = v23;
  uint64_t v75 = AssociatedConformanceWitness;
  sub_21FA26350();
  uint64_t v73 = (unsigned int (*)(char *, uint64_t, uint64_t))v15[6];
  long long v74 = v15 + 6;
  if (v73(v18, 1, AssociatedTypeWitness) == 1)
  {
LABEL_2:
    (*(void (**)(char *, uint64_t))(v57 + 8))(v80, v81);
    return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v32, v82);
  }
  uint64_t v86 = (void (*)(char *, char *, uint64_t))v15[4];
  long long v37 = (void (**)(char *, char *, uint64_t))(v58 + 16);
  long long v38 = (uint64_t (**)(char *, uint64_t, uint64_t))(v62 + 48);
  long long v85 = (void (**)(void))(v58 + 8);
  uint64_t v72 = (void (**)(char *, char *, uint64_t))(v62 + 16);
  long long v83 = (void (**)(char *, uint64_t))(v62 + 8);
  long long v87 = v15 + 4;
  long long v59 = (void (**)(char *, uint64_t))(v15 + 1);
  ++v63;
  v62 += 32;
  char v84 = v32;
  uint64_t v70 = AssociatedTypeWitness;
  uint64_t v71 = v18;
  while (1)
  {
    uint64_t v39 = v88;
    v86(v88, v18, AssociatedTypeWitness);
    uint64_t v40 = v38;
    char v41 = v89;
    v78(v39);
    unint64_t v42 = *v37;
    uint64_t v43 = v77;
    BOOL v44 = v32;
    uint64_t v45 = v82;
    (*v37)(v77, v44, v82);
    char v46 = *v40;
    uint64_t v47 = v76;
    int v48 = (*v40)(v43, 1, v76);
    uint64_t v49 = v43;
    uint64_t v50 = v47;
    uint64_t v51 = *v85;
    ((void (*)(char *, uint64_t))*v85)(v49, v45);
    (*v72)(v9, v41, v50);
    if (v48 == 1)
    {
      (*v83)(v9, v50);
      uint64_t AssociatedTypeWitness = v70;
      long long v38 = v40;
LABEL_10:
      long long v32 = v84;
      v51();
      long long v56 = v69;
      (*v63)((uint64_t)v69, v68);
      (*(void (**)(char *, char *, uint64_t))v62)(v32, v89, v50);
      v64(v32, 0, 1, v50);
      v86(v56, v88, AssociatedTypeWitness);
      v66((uint64_t)v56, 0, 1, AssociatedTypeWitness);
      uint64_t v18 = v71;
      goto LABEL_5;
    }
    uint64_t v52 = v61;
    v42(v61, v84, v45);
    uint64_t result = v46(v52, 1, v50);
    if (result == 1) {
      break;
    }
    long long v38 = v40;
    uint64_t v53 = v52;
    char v54 = sub_21FA25C50();
    uint64_t v55 = *v83;
    (*v83)(v9, v50);
    v55(v53, v50);
    uint64_t AssociatedTypeWitness = v70;
    if (v54) {
      goto LABEL_10;
    }
    v55(v89, v50);
    (*v59)(v88, AssociatedTypeWitness);
    uint64_t v18 = v71;
    long long v32 = v84;
LABEL_5:
    sub_21FA26350();
    if (v73(v18, 1, AssociatedTypeWitness) == 1) {
      goto LABEL_2;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_21F813BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v39 = a5;
  uint64_t v40 = a2;
  uint64_t v45 = a1;
  uint64_t v43 = sub_21FA26340();
  uint64_t v7 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  BOOL v44 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v35 - v10;
  uint64_t v12 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  char v41 = (char *)&v35 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v35 - v19;
  uint64_t v42 = a3;
  uint64_t v46 = a3;
  sub_21FA25F30();
  swift_getWitnessTable();
  sub_21FA26160();
  uint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v21(v11, 1, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v43);
    return 0;
  }
  uint64_t v37 = v7;
  uint64_t v38 = v12;
  long long v36 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v36(v20, v11, a4);
  uint64_t v46 = v42;
  swift_getWitnessTable();
  uint64_t v22 = v44;
  sub_21FA25BE0();
  if (v21(v22, 1, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v20, a4);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v44, v43);
    return 0;
  }
  uint64_t v43 = (uint64_t)v20;
  uint64_t v23 = v38;
  uint64_t v24 = v41;
  v36(v41, v44, a4);
  if (v40 < 2)
  {
    uint64_t v25 = *(void (**)(char *, uint64_t))(v23 + 8);
    v25(v24, a4);
    v25((char *)v43, a4);
    return 0;
  }
  uint64_t v28 = v40 - 1;
  uint64_t result = sub_21FA25C50();
  uint64_t v29 = v23;
  uint64_t v26 = 0;
  if ((result & 1) == 0)
  {
    if ((unint64_t)v28 >= 2)
    {
      long long v32 = (uint64_t (**)(char *, uint64_t))(v23 + 8);
      while (!__OFADD__(v26, v28))
      {
        sub_21FA25F60();
        char v33 = sub_21FA25C40();
        uint64_t result = (*v32)(v15, a4);
        if (v33) {
          uint64_t v28 = (v26 + v28) / 2;
        }
        else {
          uint64_t v26 = (v26 + v28) / 2;
        }
        if (v26 + 1 >= v28) {
          goto LABEL_25;
        }
      }
      goto LABEL_27;
    }
LABEL_25:
    long long v34 = *(void (**)(char *, uint64_t))(v29 + 8);
    v34(v41, a4);
    v34((char *)v43, a4);
    return v26;
  }
  if ((unint64_t)v28 < 2) {
    goto LABEL_25;
  }
  __n128 v30 = (uint64_t (**)(char *, uint64_t))(v23 + 8);
  while (!__OFADD__(v26, v28))
  {
    sub_21FA25F60();
    char v31 = sub_21FA25C50();
    uint64_t result = (*v30)(v15, a4);
    if (v31) {
      uint64_t v28 = (v26 + v28) / 2;
    }
    else {
      uint64_t v26 = (v26 + v28) / 2;
    }
    if (v26 + 1 >= v28) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void sub_21F81408C(double a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __Sum[1] = *(double *)MEMORY[0x263EF8340];
  uint64_t v59 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(*(void *)(v59 + 16) + 8);
  uint64_t v57 = a3;
  uint64_t v58 = v7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  MEMORY[0x270FA5388](v9);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v48 - v14;
  MEMORY[0x270FA5388](v16);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v48 - v18;
  MEMORY[0x270FA5388](v20);
  MEMORY[0x270FA5388](v21);
  __n128 v29 = MEMORY[0x270FA5388](v22);
  if (a2 == MEMORY[0x263F8D538])
  {
    vDSP_Length v32 = *(void *)(*(void *)&a1 + 16);
    double v33 = 0.0;
    if (v32 >= 2)
    {
      __Sum[0] = NAN;
      __SumOfSquares[0] = NAN;
      vDSP_sve_svesqD((const double *)(*(void *)&a1 + 32), 1, __Sum, __SumOfSquares, v32);
      double v33 = (__SumOfSquares[0] - __Sum[0] * (__Sum[0] / (double)(uint64_t)v32)) / (double)(uint64_t)(v32 - 1);
    }
    *(double *)a4 = v33;
    *(unsigned char *)(a4 + 8) = v32 < 2;
  }
  else if (a2 == MEMORY[0x263F8D5C8])
  {
    vDSP_Length v34 = *(void *)(*(void *)&a1 + 16);
    float v35 = 0.0;
    if (v34 >= 2)
    {
      LODWORD(__Sum[0]) = 2143289344;
      LODWORD(__SumOfSquares[0]) = 2143289344;
      vDSP_sve_svesq((const float *)(*(void *)&a1 + 32), 1, (float *)__Sum, (float *)__SumOfSquares, v34);
      float v35 = (float)(*(float *)__SumOfSquares - (float)(*(float *)__Sum * (float)(*(float *)__Sum / (float)(uint64_t)v34)))
          / (float)(uint64_t)(v34 - 1);
    }
    *(float *)a4 = v35;
    *(unsigned char *)(a4 + 4) = v34 < 2;
  }
  else
  {
    uint64_t v51 = v23;
    uint64_t v52 = (char *)&v48 - v25;
    uint64_t v53 = v28;
    char v54 = v26;
    uint64_t v55 = v27;
    uint64_t v56 = v24;
    uint64_t v30 = MEMORY[0x223C55340](*(void *)&a1, a2, v29);
    if (v30 >= 2)
    {
      __Sum[0] = a1;
      uint64_t v50 = v30;
      swift_getAssociatedConformanceWitness();
      uint64_t v49 = a4;
      sub_21FA26930();
      sub_21FA268B0();
      sub_21FA26930();
      sub_21FA268B0();
      uint64_t v36 = v51;
      uint64_t v37 = &v12[*(int *)(v51 + 48)];
      uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v56 + 32);
      v38(v12, (uint64_t)v55, a2);
      uint64_t v39 = ((uint64_t (*)(char *, char *, uint64_t))v38)(v37, v19, a2);
      uint64_t v48 = (uint64_t)&v48;
      MEMORY[0x270FA5388](v39);
      uint64_t v40 = v57;
      *(&v48 - 2) = a2;
      *(&v48 - 1) = v40;
      sub_21FA25F30();
      swift_getWitnessTable();
      sub_21FA25DD0();
      char v41 = &v15[*(int *)(v36 + 48)];
      uint64_t v42 = v52;
      v38(v52, (uint64_t)v15, a2);
      uint64_t v43 = v53;
      v38(v53, (uint64_t)v41, a2);
      sub_21FA25B50();
      BOOL v44 = v42;
      sub_21FA25B20();
      uint64_t v45 = *(void (**)(char *, uint64_t))(v56 + 8);
      v45(v19, a2);
      uint64_t v46 = v54;
      sub_21FA26040();
      sub_21FA26710();
      v45(v46, a2);
      sub_21FA25B50();
      uint64_t v47 = v49;
      sub_21FA25B20();
      v45(v46, a2);
      v45(v19, a2);
      v45(v55, a2);
      v45(v43, a2);
      v45(v44, a2);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v56 + 56))(v47, 0, 1, a2);
    }
    else
    {
      char v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 56);
      v31(a4, 1, 1, a2);
    }
  }
}

uint64_t sub_21F8147A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA26720();
  sub_21FA26040();
  swift_getTupleTypeMetadata2();
  sub_21FA26720();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a3);
}

void sub_21F8148DC(double a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double __Sum[2] = *(double *)MEMORY[0x263EF8340];
  uint64_t v8 = sub_21FA26340();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&__Sum[-1] - v10;
  if (a2 == MEMORY[0x263F8D538])
  {
    vDSP_Length v17 = *(void *)(*(void *)&a1 + 16);
    double v18 = 0.0;
    if (v17 >= 2)
    {
      double __SumOfSquares = NAN;
      __Sum[0] = NAN;
      vDSP_sve_svesqD((const double *)(*(void *)&a1 + 32), 1, __Sum, &__SumOfSquares, v17);
      double v18 = sqrt((__SumOfSquares - __Sum[0] * (__Sum[0] / (double)(uint64_t)v17)) / (double)(uint64_t)(v17 - 1));
    }
    *(double *)a4 = v18;
    *(unsigned char *)(a4 + 8) = v17 < 2;
  }
  else if (a2 == MEMORY[0x263F8D5C8])
  {
    vDSP_Length v19 = *(void *)(*(void *)&a1 + 16);
    float v20 = 0.0;
    if (v19 >= 2)
    {
      LODWORD(__Sum[0]) = 2143289344;
      LODWORD(__SumOfSquares) = 2143289344;
      vDSP_sve_svesq((const float *)(*(void *)&a1 + 32), 1, (float *)__Sum, (float *)&__SumOfSquares, v19);
      float v20 = sqrtf((float)(*(float *)&__SumOfSquares- (float)(*(float *)__Sum * (float)(*(float *)__Sum / (float)(uint64_t)v19)))/ (float)(uint64_t)(v19 - 1));
    }
    *(float *)a4 = v20;
    *(unsigned char *)(a4 + 4) = v19 < 2;
  }
  else
  {
    sub_21F81408C(a1, a2, a3, (uint64_t)v11);
    MEMORY[0x270FA5388](v12);
    uint64_t v13 = *(void *)(a3 + 16);
    *((void *)&__SumOfSquares - 2) = a2;
    *((void *)&__SumOfSquares - 1) = v13;
    MEMORY[0x270FA5388](v14);
    *((void *)&__SumOfSquares - 4) = a2;
    *((void *)&__SumOfSquares - 3) = a3;
    *((void *)&__SumOfSquares - 2) = sub_21F8158FC;
    *((void *)&__SumOfSquares - 1) = v15;
    sub_21F769724((void (*)(char *, char *))sub_21F815904, (uint64_t)(&__SumOfSquares - 6), MEMORY[0x263F8E628], a2, v16, a4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t sub_21F814B90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v72 = sub_21FA26890();
  uint64_t v75 = *(void *)(v72 - 8);
  MEMORY[0x270FA5388](v72);
  long long v74 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = *(void *)(a4 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  char v69 = (char *)&v67 - v9;
  uint64_t v10 = *(void *)(a4 + 16);
  uint64_t v86 = *(void *)(*(void *)(v10 + 16) + 8);
  uint64_t v81 = *(void *)(v86 + 16);
  uint64_t v80 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v80);
  uint64_t v79 = (char *)&v67 - v11;
  uint64_t v12 = sub_21FA26340();
  uint64_t v77 = *(void *)(v12 - 8);
  uint64_t v78 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v87 = (uint64_t)&v67 - v13;
  uint64_t v89 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v67 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v68 = (char *)&v67 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v82 = (char *)&v67 - v19;
  MEMORY[0x270FA5388](v20);
  uint64_t v70 = (char *)&v67 - v21;
  MEMORY[0x270FA5388](v22);
  long long v83 = (char *)&v67 - v23;
  MEMORY[0x270FA5388](v24);
  long long v85 = (char *)&v67 - v25;
  MEMORY[0x270FA5388](v26);
  long long v91 = (char *)&v67 - v27;
  uint64_t v84 = v10;
  uint64_t v76 = *(void *)(*(void *)(v10 + 24) + 8);
  uint64_t v28 = sub_21FA25CC0();
  uint64_t v29 = sub_21FA26340();
  MEMORY[0x270FA5388](v29);
  char v31 = (char *)&v67 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  vDSP_Length v34 = (char *)&v67 - v33;
  uint64_t v35 = *(void *)(v28 - 8);
  __n128 v37 = MEMORY[0x270FA5388](v36);
  char v92 = (char *)&v67 - v38;
  unint64_t v93 = (void (**)(char *, uint64_t))v39;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v39 + 16))(v31, a1, v29, v37);
  uint64_t v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  int v41 = v40(v31, 1, v28);
  uint64_t v90 = a3;
  double v88 = *(double *)&a2;
  if (v41 == 1)
  {
    uint64_t v94 = a2;
    uint64_t v42 = a4;
    uint64_t v43 = sub_21FA25F30();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v45 = v43;
    a4 = v42;
    sub_21F811650(v45, WitnessTable, v42, (uint64_t)v34);
    uint64_t v46 = v93;
    v93[1](v31, v29);
    uint64_t v47 = v28;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v34, v31, v28);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v34, 0, 1, v28);
    uint64_t v47 = v28;
    uint64_t v46 = v93;
  }
  if (v40(v34, 1, v47) == 1)
  {
    v46[1](v34, v29);
    return 1;
  }
  uint64_t v48 = v92;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v92, v34, v47);
  uint64_t v50 = v87;
  double v49 = v88;
  uint64_t v51 = v90;
  sub_21F8148DC(v88, v90, a4, v87);
  uint64_t v52 = v89;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v50, 1, v51) == 1)
  {
    (*(void (**)(char *, uint64_t))(v35 + 8))(v48, v47);
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v50, v78);
    return 1;
  }
  uint64_t v78 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(v91, v50, v51);
  swift_getAssociatedConformanceWitness();
  sub_21FA26930();
  uint64_t v53 = v85;
  sub_21FA268B0();
  char v54 = sub_21FA25C40();
  uint64_t v55 = *(void (***)(char *, uint64_t))(v52 + 8);
  ((void (*)(char *, uint64_t))v55)(v53, v51);
  if ((v54 & 1) == 0)
  {
    ((void (*)(char *, uint64_t))v55)(v91, v51);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v92, v47);
    return 1;
  }
  sub_21FA26710();
  sub_21FA25AB0();
  uint64_t v56 = MEMORY[0x223C55340](*(void *)&v49, v51);
  cbrt((double)v56);
  uint64_t v57 = v68;
  sub_21FA25AA0();
  sub_21FA26040();
  ((void (*)(char *, uint64_t))v55)(v57, v51);
  swift_getAssociatedConformanceWitness();
  sub_21FA26920();
  unint64_t v93 = v55;
  uint64_t v58 = v67;
  sub_21FA26880();
  sub_21FA26040();
  ((void (*)(char *, uint64_t))v93)(v58, v51);
  uint64_t v59 = v82;
  sub_21FA25B20();
  ((void (*)(char *, uint64_t))v93)(v57, v51);
  ((void (*)(char *, uint64_t))v93)(v59, v51);
  uint64_t v60 = v75;
  long long v61 = v74;
  uint64_t v62 = v72;
  (*(void (**)(char *, void, uint64_t))(v75 + 104))(v74, *MEMORY[0x263F8E218], v72);
  long long v63 = v70;
  sub_21FA25B30();
  unint64_t v64 = v93;
  (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v62);
  ((void (*)(char *, uint64_t))v64)(v85, v51);
  sub_21F8158A8();
  sub_21FA266D0();
  if ((v95 & 1) == 0)
  {
    ((void (*)(char *, uint64_t))v64)(v63, v51);
    uint64_t v65 = v94;
    ((void (*)(char *, uint64_t))v64)(v83, v51);
    ((void (*)(char *, uint64_t))v64)(v91, v51);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v92, v47);
    return v65;
  }
  uint64_t v94 = 0;
  unint64_t v95 = 0xE000000000000000;
  sub_21FA26510();
  sub_21FA26B00();
  sub_21FA25D40();
  swift_bridgeObjectRelease();
  sub_21FA25D40();
  sub_21FA25D40();
  sub_21FA25D40();
  uint64_t result = sub_21FA266E0();
  __break(1u);
  return result;
}

uint64_t sub_21F815690(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v5 = *(void *)(a1 + 96);
  char v6 = *(unsigned char *)(a1 + 104);
  uint64_t v10 = *(void *)(a1 + 128);
  uint64_t v11 = *(void *)(a1 + 120);
  char v7 = *(unsigned char *)(a1 + 56);
  char v8 = *(unsigned char *)(a1 + 136);
  sub_21F7652C0(*(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
  swift_bridgeObjectRetain();
  sub_21F770E44(v2, v3, v7);
  sub_21F7652C0(v4, v5, v6);
  swift_bridgeObjectRetain();
  sub_21F770E44(v11, v10, v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_21F815768(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v5 = *(void *)(a1 + 96);
  char v6 = *(unsigned char *)(a1 + 104);
  uint64_t v10 = *(void *)(a1 + 128);
  uint64_t v11 = *(void *)(a1 + 120);
  char v7 = *(unsigned char *)(a1 + 56);
  char v8 = *(unsigned char *)(a1 + 136);
  sub_21F7656A8(*(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
  swift_bridgeObjectRelease();
  sub_21F770E38(v2, v3, v7);
  sub_21F7656A8(v4, v5, v6);
  swift_bridgeObjectRelease();
  sub_21F770E38(v11, v10, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21F815840(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21F76CA40(&qword_26AD47B78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_21F8158A8()
{
  unint64_t result = qword_267EE7A00[0];
  if (!qword_267EE7A00[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_267EE7A00);
  }
  return result;
}

uint64_t sub_21F8158FC(uint64_t a1)
{
  return MEMORY[0x270FA2C40](a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_21F815904()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t sub_21F815934(uint64_t a1, uint64_t a2)
{
  return sub_21F8147A8(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_21F815954()
{
  return 24;
}

__n128 sub_21F815960(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_21F815974()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_21F8159AC()
{
  swift_getAtKeyPath();
  return v1;
}

uint64_t sub_21F8159D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  *(void *)((char *)a6 + *(int *)(type metadata accessor for VisualMapper() + 36)) = a5;
  type metadata accessor for VisualMapper.Mapping();

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_21F815A8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a6;
  *(void *)(result + 24) = a5;
  *(void *)a7 = a1;
  *(void *)(a7 + 8) = a2;
  *(void *)(a7 + 16) = a3;
  *(void *)(a7 + 24) = a4;
  *(void *)(a7 + 32) = sub_21F83F0A4;
  *(void *)(a7 + 40) = result;
  *(unsigned char *)(a7 + 48) = 2;
  return result;
}

uint64_t sub_21F815B18@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  MEMORY[0x270FA5388](a1);
  swift_getAtKeyPath();
  uint64_t result = sub_21FA245C0();
  *a2 = result;
  return result;
}

uint64_t sub_21F815BD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v50 = a3;
  uint64_t v43 = a2;
  uint64_t v53 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v40 = v11;
  uint64_t v41 = v10;
  uint64_t v51 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = v12;
  uint64_t v55 = type metadata accessor for PlottableProjection();
  uint64_t v13 = *(void *)(v55 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x270FA5388](v55);
  double v49 = (char *)&v38 - v15;
  uint64_t v16 = type metadata accessor for AnyConcreteScale();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  MEMORY[0x270FA5388](v16);
  BOOL v44 = (char *)&v38 - v19;
  uint64_t v56 = a4;
  uint64_t v20 = type metadata accessor for VisualMapper.Mapping();
  uint64_t v52 = *(void *)(v20 - 8);
  __n128 v21 = MEMORY[0x270FA5388](v20);
  uint64_t v23 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)&v38 - v22);
  uint64_t v24 = *(void *)a1;
  uint64_t v26 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v27 = *(void *)(a1 + 24);
  uint64_t v46 = *(void *)(a1 + 8);
  uint64_t v25 = v46;
  uint64_t v47 = v24;
  *a6 = v24;
  a6[1] = v25;
  uint64_t v45 = v26;
  a6[2] = v26;
  a6[3] = v27;
  char v54 = a6;
  uint64_t v48 = v27;
  uint64_t v28 = v43;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v17 + 48))(v43, 1, v16, v21) == 1)
  {
    sub_21F7652C0(v47, v46, v45);
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    swift_bridgeObjectRetain();
    v29(a1, v55);
    (*(void (**)(uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>), uint64_t, uint64_t))(v53 + 32))(v23, v50, a5);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 32);
    v39(v44, v28, v16);
    uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 32);
    v38(v49, a1, v55);
    uint64_t v43 = v20;
    uint64_t v30 = v53 + 32;
    uint64_t v53 = *(void *)(v53 + 32);
    ((void (*)(char *, uint64_t, uint64_t))v53)(v51, v50, a5);
    unint64_t v31 = (*(unsigned __int8 *)(v17 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    unint64_t v32 = (v18 + *(unsigned __int8 *)(v13 + 80) + v31) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    unint64_t v33 = (v14 + *(unsigned __int8 *)(v30 + 48) + v32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 48);
    vDSP_Length v34 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))swift_allocObject();
    *((void *)v34 + 2) = v56;
    *((void *)v34 + 3) = a5;
    uint64_t v35 = v42;
    *((void *)v34 + 4) = v41;
    *((void *)v34 + 5) = v35;
    v39((char *)v34 + v31, (uint64_t)v44, v16);
    v38((char *)v34 + v32, (uint64_t)v49, v55);
    ((void (*)(char *, char *, uint64_t))v53)((char *)v34 + v33, v51, a5);
    uint64_t v20 = v43;
    *uint64_t v23 = sub_21F83EEF8;
    v23[1] = v34;
    swift_storeEnumTagMultiPayload();
    sub_21F7652C0(v47, v46, v45);
    swift_bridgeObjectRetain();
  }
  uint64_t v36 = type metadata accessor for VisualMapper();
  return (*(uint64_t (**)(char *, uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>), uint64_t))(v52 + 32))((char *)v54 + *(int *)(v36 + 36), v23, v20);
}

uint64_t sub_21F816074@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v42 = a4;
  uint64_t v39 = a3;
  uint64_t v41 = a2;
  uint64_t v40 = a1;
  uint64_t v38 = a9;
  uint64_t v44 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v43 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for PlottableProjection();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v36 - v21;
  uint64_t v37 = sub_21FA26340();
  uint64_t v36 = *(void *)(v37 - 8);
  __n128 v23 = MEMORY[0x270FA5388](v37);
  uint64_t v25 = (char *)&v36 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v20 + 16))(v22, v39, v19, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v40, a5);
  sub_21F9CBBA4((uint64_t)v22, (uint64_t)v18, a5, a7, a8, (uint64_t)v45);
  uint64_t v26 = v46;
  uint64_t v27 = v47;
  int v28 = v48;
  if (v48 < 0)
  {
    uint64_t v30 = 0;
    int v31 = v48 & 1;
    double v29 = (*(double *)&v46 + *(double *)&v47) * 0.5;
  }
  else
  {
    sub_21F7607AC(v46, v47, v48);
    double v29 = *(double *)&v26;
    uint64_t v30 = v27;
    int v31 = v28;
  }
  long long v49 = v45[0];
  long long v50 = v45[1];
  sub_21F7E0D5C((uint64_t)&v49, (uint64_t)v52);
  sub_21F7E0DB8((uint64_t)v52);
  uint64_t v51 = *((void *)&v50 + 1);
  sub_21F7741D0((uint64_t)&v51);
  sub_21F770E38(v26, v27, v28);
  uint64_t v32 = type metadata accessor for AnyConcreteScale();
  sub_21F7CB56C(*(uint64_t *)&v29, v30, v31, v32, (uint64_t)v25);
  sub_21F7654F0(*(uint64_t *)&v29, v30, v31);
  vDSP_Length v34 = v43;
  uint64_t v33 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v43, v42, a6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v25, 1, a6) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v38, v34, a6);
    return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v25, v37);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, a6);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v33 + 32))(v38, v25, a6);
  }
}

double sub_21F8164BC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v24 = a2;
  uint64_t v7 = type metadata accessor for PlottableProjection();
  uint64_t v8 = *(void *)(v7 - 8);
  __n128 v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v22 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v23 = *(void *)(a1 + 24);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  ((void (*)(char *, uint64_t, uint64_t, __n128))v14)((char *)&v21 - v10, a1, v7, v9);
  unint64_t v15 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v16 = (char *)swift_allocObject();
  uint64_t v17 = v25;
  *((void *)v16 + 2) = v24;
  *((void *)v16 + 3) = v17;
  *((void *)v16 + 4) = v26;
  v14(&v16[v15], v11, v7);
  uint64_t v18 = v22;
  sub_21F7652C0(v12, v13, v22);
  uint64_t v19 = swift_bridgeObjectRetain();
  *(void *)a5 = v12;
  *(void *)(a5 + 8) = v13;
  *(void *)(a5 + 16) = v18;
  *(void *)(a5 + 24) = v19;
  *(void *)(a5 + 32) = sub_21F83FDB4;
  *(void *)(a5 + 40) = v16;
  double result = 0.0;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(void *)(a5 + 96) = 0;
  *(unsigned char *)(a5 + 104) = 2;
  return result;
}

__n128 sub_21F816658@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for PlottableProjection();
  __n128 v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v22 - v17;
  (*(void (**)(char *, uint64_t, __n128))(v19 + 16))((char *)&v22 - v17, a2, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a3);
  sub_21F9CBBA4((uint64_t)v18, (uint64_t)v14, a3, a4, a5, (uint64_t)v23);
  long long v20 = v23[3];
  *(_OWORD *)(a6 + 32) = v23[2];
  *(_OWORD *)(a6 + 48) = v20;
  *(void *)(a6 + 64) = v24;
  __n128 result = (__n128)v23[1];
  *(_OWORD *)a6 = v23[0];
  *(__n128 *)(a6 + 16) = result;
  return result;
}

uint64_t sub_21F816810@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = type metadata accessor for VisualMapper.Mapping();
  __n128 v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (void (**)(uint64_t))((char *)&v15 - v10);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))((char *)&v15 - v10, v3 + *(int *)(a2 + 36), v8, v9);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload) {
    return (*(uint64_t (**)(uint64_t, void (**)(uint64_t), uint64_t))(*(void *)(v7 - 8) + 32))(a3, v11, v7);
  }
  if (EnumCaseMultiPayload == 1) {
    swift_getAtKeyPath();
  }
  else {
    (*v11)(a1);
  }
  return swift_release();
}

double sub_21F81698C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    return *(double *)&a2;
  }
  swift_retain();
  swift_getAtKeyPath();
  sub_21F82B5F8(a2, 1);
  return v5;
}

uint64_t sub_21F8169EC()
{
  uint64_t v1 = type metadata accessor for SgVectorized(0);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (uint64_t *)((char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = type metadata accessor for RulesRenderer(0);
  MEMORY[0x270FA5388](v4 - 8);
  char v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PointsRenderer(0);
  MEMORY[0x270FA5388](v7 - 8);
  __n128 v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for RectanglesRenderer(0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F7609A0(v0, (uint64_t)v15, type metadata accessor for AnyVectorizedRenderer.MarkRenderer);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_21F83F0AC((uint64_t)v15, (uint64_t)v9, type metadata accessor for PointsRenderer);
      uint64_t v16 = *((void *)v9 + 7);
      uint64_t v17 = type metadata accessor for PointsRenderer;
      uint64_t v18 = (uint64_t)v9;
      goto LABEL_6;
    case 2u:
      sub_21F83F0AC((uint64_t)v15, (uint64_t)v6, type metadata accessor for RulesRenderer);
      uint64_t v16 = *((void *)v6 + 7);
      uint64_t v17 = type metadata accessor for RulesRenderer;
      uint64_t v18 = (uint64_t)v6;
      goto LABEL_6;
    case 3u:
      uint64_t v19 = swift_projectBox();
      sub_21F7609A0(v19, (uint64_t)v3, type metadata accessor for SgVectorized);
      uint64_t v16 = *v3;
      sub_21F83E378((uint64_t)v3, type metadata accessor for SgVectorized);
      swift_release();
      return v16;
    default:
      sub_21F83F0AC((uint64_t)v15, (uint64_t)v12, type metadata accessor for RectanglesRenderer);
      uint64_t v16 = *((void *)v12 + 7);
      uint64_t v17 = type metadata accessor for RectanglesRenderer;
      uint64_t v18 = (uint64_t)v12;
LABEL_6:
      sub_21F83E378(v18, v17);
      return v16;
  }
}

uint64_t sub_21F816CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for RulesRenderer(0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for PointsRenderer(0);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for RectanglesRenderer(0);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F7609A0(v5, (uint64_t)v21, type metadata accessor for AnyVectorizedRenderer.MarkRenderer);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_21F83F0AC((uint64_t)v21, (uint64_t)v15, type metadata accessor for PointsRenderer);
      sub_21F8C3A30(a1, a2, a3, a4);
      uint64_t v22 = type metadata accessor for PointsRenderer;
      uint64_t v23 = (uint64_t)v15;
      break;
    case 2u:
      sub_21F83F0AC((uint64_t)v21, (uint64_t)v12, type metadata accessor for RulesRenderer);
      sub_21F8C43BC(a1, a2, a3, a4);
      uint64_t v22 = type metadata accessor for RulesRenderer;
      uint64_t v23 = (uint64_t)v12;
      break;
    case 3u:
      sub_21FA266E0();
      __break(1u);
      JUMPOUT(0x21F817004);
    default:
      sub_21F83F0AC((uint64_t)v21, (uint64_t)v18, type metadata accessor for RectanglesRenderer);
      sub_21F8C35E4(a1, a2, a3, a4);
      uint64_t v22 = type metadata accessor for RectanglesRenderer;
      uint64_t v23 = (uint64_t)v18;
      break;
  }
  return sub_21F83E378(v23, v22);
}

uint64_t sub_21F817014(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for SgVectorized(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for RulesRenderer(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for RectanglesRenderer(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for PointsRenderer(0);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F7609A0(v3, (uint64_t)v20, type metadata accessor for AnyVectorizedRenderer.MarkRenderer);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_21F83F0AC((uint64_t)v20, (uint64_t)v17, type metadata accessor for PointsRenderer);
      sub_21F8C3A30(a1, a2, (uint64_t)&unk_26D12F878, MEMORY[0x263F8EE78]);
      uint64_t v21 = type metadata accessor for PointsRenderer;
      uint64_t v22 = (uint64_t)v17;
      return sub_21F83E378(v22, v21);
    case 2u:
      sub_21F83F0AC((uint64_t)v20, (uint64_t)v11, type metadata accessor for RulesRenderer);
      sub_21F8C43BC(a1, a2, (uint64_t)&unk_26D12F8C8, MEMORY[0x263F8EE78]);
      uint64_t v21 = type metadata accessor for RulesRenderer;
      uint64_t v22 = (uint64_t)v11;
      return sub_21F83E378(v22, v21);
    case 3u:
      uint64_t v23 = swift_projectBox();
      sub_21F7609A0(v23, (uint64_t)v8, type metadata accessor for SgVectorized);
      sub_21F816CF8(a1, a2, *((void *)v8 + 2), *((void *)v8 + 1));
      sub_21F83E378((uint64_t)v8, type metadata accessor for SgVectorized);
      return swift_release();
    default:
      sub_21F83F0AC((uint64_t)v20, (uint64_t)v14, type metadata accessor for RectanglesRenderer);
      sub_21F8C35E4(a1, a2, (uint64_t)&unk_26D12F8A0, MEMORY[0x263F8EE78]);
      uint64_t v21 = type metadata accessor for RectanglesRenderer;
      uint64_t v22 = (uint64_t)v14;
      return sub_21F83E378(v22, v21);
  }
}

__n128 sub_21F8173A0@<Q0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  long long v5 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a5 + 24) = *(_OWORD *)a4;
  *(_OWORD *)(a5 + 40) = v5;
  long long v6 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(a5 + 56) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(a5 + 72) = v6;
  __n128 result = *(__n128 *)(a4 + 64);
  long long v8 = *(_OWORD *)(a4 + 80);
  *(__n128 *)(a5 + 88) = result;
  uint64_t v9 = *(void *)(a4 + 96);
  char v10 = *(unsigned char *)(a4 + 104);
  *(unsigned char *)a5 = a1;
  *(void *)(a5 + 8) = a2;
  *(unsigned char *)(a5 + 16) = a3;
  *(_OWORD *)(a5 + 104) = v8;
  *(void *)(a5 + 120) = v9;
  *(unsigned char *)(a5 + 128) = v10;
  return result;
}

double sub_21F8173E4@<D0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 1;
  *(_OWORD *)(a1 + 88) = 0u;
  *(unsigned char *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 136) = 1;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 169) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 1;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 249) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(unsigned char *)(a1 + 320) = -4;
  *(_OWORD *)(a1 + 304) = 0u;
  sub_21F83E64C((uint64_t)v4);
  type metadata accessor for TypedVectorizedProperties.Position();
  uint64_t v2 = sub_21FA26340();
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v2 - 8) + 32))(a1 + 328, v4, v2);
  *(void *)(a1 + 464) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(void *)(a1 + 488) = 1;
  *(_OWORD *)(a1 + 496) = 0u;
  *(unsigned char *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(void *)(a1 + 544) = 1;
  *(_OWORD *)(a1 + 552) = 0u;
  *(unsigned char *)(a1 + 568) = 0;
  *(void *)(a1 + 576) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(void *)(a1 + 600) = 1;
  *(unsigned char *)(a1 + 640) = 0;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(void *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 648) = 0u;
  *(void *)(a1 + 672) = 1;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(unsigned char *)(a1 + 712) = 0;
  return result;
}

uint64_t sub_21F817534@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  type metadata accessor for VisualMapper();
  uint64_t v20 = sub_21FA26340();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(a9, a1, v20);
  type metadata accessor for VisualMapper();
  uint64_t v21 = sub_21FA26340();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32))(a9 + 56, a2, v21);
  type metadata accessor for VisualMapper();
  uint64_t v22 = sub_21FA26340();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 32))(a9 + 112, a3, v22);
  type metadata accessor for VisualMapper();
  uint64_t v23 = sub_21FA26340();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32))(a9 + 192, a4, v23);
  type metadata accessor for TypedVectorizedProperties.SymbolSizeMapper();
  uint64_t v24 = sub_21FA26340();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 32))(a9 + 272, a5, v24);
  type metadata accessor for TypedVectorizedProperties.Position();
  uint64_t v25 = sub_21FA26340();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 32))(a9 + 328, a6, v25);
  type metadata accessor for VisualMapper();
  uint64_t v26 = sub_21FA26340();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 32))(a9 + 464, a7, v26);
  type metadata accessor for VisualMapper();
  uint64_t v27 = sub_21FA26340();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32))(a9 + 520, a8, v27);
  type metadata accessor for VisualMapper();
  uint64_t v28 = sub_21FA26340();
  uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 32);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t))v30)((void *)(v28 - 8), a9 + 576, a10, v28);

  return v30(a9 + 648, a11, v28);
}

void *sub_21F8178E8@<X0>(const void *a1@<X0>, uint64_t *a2@<X8>)
{
  a2[3] = type metadata accessor for TypedVectorizedProperties();
  uint64_t v4 = swift_allocObject();
  *a2 = v4;
  long long v5 = (void *)(v4 + 16);

  return memcpy(v5, a1, 0x2C9uLL);
}

void sub_21F817950(void *a1@<X8>)
{
  sub_21F83E3D8(v1, (uint64_t)&v3);
  type metadata accessor for TypedVectorizedProperties();
  if ((swift_dynamicCast() & 1) == 0)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    a1[3] = 2;
    bzero(a1 + 4, 0x2A9uLL);
  }
}

uint64_t sub_21F8179D0@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return sub_21F76C978(v1 + 16, a1, qword_26AD44558);
}

uint64_t sub_21F817A24@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return sub_21F76C978(v1 + 72, a1, qword_26AD44558);
}

uint64_t sub_21F817A78@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return sub_21F76C978(v1 + 128, a1, qword_26AD44558);
}

uint64_t sub_21F817ACC@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return sub_21F76C978(v1 + 184, a1, qword_26AD44558);
}

uint64_t sub_21F817B20()
{
  sub_21F76CA84(v0 + 16, qword_26AD44558);
  sub_21F76CA84(v0 + 72, qword_26AD44558);
  sub_21F76CA84(v0 + 128, qword_26AD44558);
  sub_21F76CA84(v0 + 184, qword_26AD44558);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for VectorizedModifiers()
{
  return self;
}

uint64_t type metadata accessor for DimensionMapper()
{
  return sub_21F764F08();
}

uint64_t destroy for VectorizedProperties(uint64_t a1)
{
  return _s6Charts15AnyChartContentVwxx_0(a1);
}

uint64_t initializeWithCopy for VectorizedProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for VectorizedProperties(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

_OWORD *assignWithTake for VectorizedProperties(_OWORD *a1, _OWORD *a2)
{
  _s6Charts15AnyChartContentVwxx_0((uint64_t)a1);
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  return a1;
}

ValueMetadata *type metadata accessor for VectorizedProperties()
{
  return &type metadata for VectorizedProperties;
}

uint64_t initializeWithCopy for VectorizedPlottables(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
  }
  uint64_t v7 = (_OWORD *)(a1 + 56);
  long long v8 = (_OWORD *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 80);
  if (v9)
  {
    uint64_t v10 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = v9;
    *(void *)(a1 + 88) = v10;
    (**(void (***)(_OWORD *, _OWORD *))(v9 - 8))(v7, v8);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 72);
    *uint64_t v7 = *v8;
    *(_OWORD *)(a1 + 72) = v11;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
  }
  uint64_t v12 = (_OWORD *)(a1 + 112);
  uint64_t v13 = (_OWORD *)(a2 + 112);
  uint64_t v14 = *(void *)(a2 + 136);
  if (v14)
  {
    uint64_t v15 = *(void *)(a2 + 144);
    *(void *)(a1 + 136) = v14;
    *(void *)(a1 + 144) = v15;
    (**(void (***)(_OWORD *, _OWORD *))(v14 - 8))(v12, v13);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  }
  else
  {
    long long v16 = *(_OWORD *)(a2 + 128);
    *uint64_t v12 = *v13;
    *(_OWORD *)(a1 + 128) = v16;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
  }
  uint64_t v17 = (_OWORD *)(a1 + 168);
  uint64_t v18 = (_OWORD *)(a2 + 168);
  uint64_t v19 = *(void *)(a2 + 192);
  if (!v19)
  {
    long long v23 = *(_OWORD *)(a2 + 184);
    *uint64_t v17 = *v18;
    *(_OWORD *)(a1 + 184) = v23;
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    uint64_t v21 = *(void *)(a2 + 272);
    if (v21) {
      goto LABEL_12;
    }
LABEL_14:
    long long v24 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v24;
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    long long v25 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v25;
    return a1;
  }
  uint64_t v20 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = v19;
  *(void *)(a1 + 200) = v20;
  (**(void (***)(_OWORD *, _OWORD *))(v19 - 8))(v17, v18);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  uint64_t v21 = *(void *)(a2 + 272);
  if (!v21) {
    goto LABEL_14;
  }
LABEL_12:
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  uint64_t v22 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = v21;
  *(void *)(a1 + 280) = v22;
  (**(void (***)(uint64_t, uint64_t))(v21 - 8))(a1 + 248, a2 + 248);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  return a1;
}

uint64_t assignWithCopy for VectorizedPlottables(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  if (*(void *)(a1 + 24))
  {
    if (v4)
    {
      sub_21F7ABEA8((uint64_t *)a1, (uint64_t *)a2);
LABEL_6:
      *(_OWORD *)(a1 + 40) = *(long long *)((char *)a2 + 40);
      goto LABEL_9;
    }
    sub_21F8182CC(a1);
    long long v6 = a2[1];
    long long v5 = a2[2];
    long long v7 = *a2;
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = v5;
    *(_OWORD *)a1 = v7;
  }
  else
  {
    if (v4)
    {
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
      goto LABEL_6;
    }
    long long v8 = *a2;
    long long v9 = a2[1];
    long long v10 = a2[2];
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    *(_OWORD *)(a1 + 16) = v9;
    *(_OWORD *)(a1 + 32) = v10;
    *(_OWORD *)a1 = v8;
  }
LABEL_9:
  long long v11 = (_OWORD *)(a1 + 56);
  uint64_t v12 = (long long *)((char *)a2 + 56);
  uint64_t v13 = *((void *)a2 + 10);
  if (*(void *)(a1 + 80))
  {
    if (v13)
    {
      sub_21F7ABEA8((uint64_t *)(a1 + 56), (uint64_t *)a2 + 7);
LABEL_14:
      *(_OWORD *)(a1 + 96) = a2[6];
      goto LABEL_17;
    }
    sub_21F8182CC(a1 + 56);
    long long v15 = *(long long *)((char *)a2 + 72);
    long long v14 = *(long long *)((char *)a2 + 88);
    long long v16 = *v12;
    *(void *)(a1 + 104) = *((void *)a2 + 13);
    *(_OWORD *)(a1 + 72) = v15;
    *(_OWORD *)(a1 + 88) = v14;
    *long long v11 = v16;
  }
  else
  {
    if (v13)
    {
      *(void *)(a1 + 80) = v13;
      *(void *)(a1 + 88) = *((void *)a2 + 11);
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 56, (uint64_t)a2 + 56);
      goto LABEL_14;
    }
    long long v17 = *v12;
    long long v18 = *(long long *)((char *)a2 + 72);
    long long v19 = *(long long *)((char *)a2 + 88);
    *(void *)(a1 + 104) = *((void *)a2 + 13);
    *(_OWORD *)(a1 + 72) = v18;
    *(_OWORD *)(a1 + 88) = v19;
    *long long v11 = v17;
  }
LABEL_17:
  uint64_t v20 = (_OWORD *)(a1 + 112);
  uint64_t v21 = a2 + 7;
  uint64_t v22 = *((void *)a2 + 17);
  if (*(void *)(a1 + 136))
  {
    if (v22)
    {
      sub_21F7ABEA8((uint64_t *)(a1 + 112), (uint64_t *)a2 + 14);
LABEL_22:
      *(_OWORD *)(a1 + 152) = *(long long *)((char *)a2 + 152);
      goto LABEL_25;
    }
    sub_21F8182CC(a1 + 112);
    long long v24 = a2[8];
    long long v23 = a2[9];
    long long v25 = *v21;
    *(void *)(a1 + 160) = *((void *)a2 + 20);
    *(_OWORD *)(a1 + 128) = v24;
    *(_OWORD *)(a1 + 144) = v23;
    *uint64_t v20 = v25;
  }
  else
  {
    if (v22)
    {
      *(void *)(a1 + 136) = v22;
      *(void *)(a1 + 144) = *((void *)a2 + 18);
      (**(void (***)(uint64_t, uint64_t))(v22 - 8))(a1 + 112, (uint64_t)(a2 + 7));
      goto LABEL_22;
    }
    long long v26 = *v21;
    long long v27 = a2[8];
    long long v28 = a2[9];
    *(void *)(a1 + 160) = *((void *)a2 + 20);
    *(_OWORD *)(a1 + 128) = v27;
    *(_OWORD *)(a1 + 144) = v28;
    *uint64_t v20 = v26;
  }
LABEL_25:
  double v29 = (_OWORD *)(a1 + 168);
  uint64_t v30 = (long long *)((char *)a2 + 168);
  uint64_t v31 = *((void *)a2 + 24);
  if (*(void *)(a1 + 192))
  {
    if (v31)
    {
      sub_21F7ABEA8((uint64_t *)(a1 + 168), (uint64_t *)a2 + 21);
LABEL_30:
      *(_OWORD *)(a1 + 208) = a2[13];
      goto LABEL_33;
    }
    sub_21F8182CC(a1 + 168);
    long long v33 = *(long long *)((char *)a2 + 184);
    long long v32 = *(long long *)((char *)a2 + 200);
    long long v34 = *v30;
    *(void *)(a1 + 216) = *((void *)a2 + 27);
    *(_OWORD *)(a1 + 184) = v33;
    *(_OWORD *)(a1 + 200) = v32;
    *double v29 = v34;
  }
  else
  {
    if (v31)
    {
      *(void *)(a1 + 192) = v31;
      *(void *)(a1 + 200) = *((void *)a2 + 25);
      (**(void (***)(uint64_t, uint64_t))(v31 - 8))(a1 + 168, (uint64_t)a2 + 168);
      goto LABEL_30;
    }
    long long v35 = *v30;
    long long v36 = *(long long *)((char *)a2 + 184);
    long long v37 = *(long long *)((char *)a2 + 200);
    *(void *)(a1 + 216) = *((void *)a2 + 27);
    *(_OWORD *)(a1 + 184) = v36;
    *(_OWORD *)(a1 + 200) = v37;
    *double v29 = v35;
  }
LABEL_33:
  uint64_t v38 = (_OWORD *)(a1 + 224);
  uint64_t v39 = a2 + 14;
  uint64_t v40 = *((void *)a2 + 34);
  if (*(void *)(a1 + 272))
  {
    if (!v40)
    {
      sub_21F818320(a1 + 224);
      *uint64_t v38 = *v39;
      long long v44 = a2[18];
      long long v46 = a2[15];
      long long v45 = a2[16];
      *(_OWORD *)(a1 + 272) = a2[17];
      *(_OWORD *)(a1 + 288) = v44;
      *(_OWORD *)(a1 + 240) = v46;
      *(_OWORD *)(a1 + 256) = v45;
      return a1;
    }
    *(unsigned char *)(a1 + 224) = *((unsigned char *)a2 + 224);
    uint64_t v41 = *((void *)a2 + 29);
    *(unsigned char *)(a1 + 240) = *((unsigned char *)a2 + 240);
    *(void *)(a1 + 232) = v41;
    sub_21F7ABEA8((uint64_t *)(a1 + 248), (uint64_t *)a2 + 31);
  }
  else
  {
    if (!v40)
    {
      *uint64_t v38 = *v39;
      long long v47 = a2[15];
      long long v48 = a2[16];
      long long v49 = a2[18];
      *(_OWORD *)(a1 + 272) = a2[17];
      *(_OWORD *)(a1 + 288) = v49;
      *(_OWORD *)(a1 + 240) = v47;
      *(_OWORD *)(a1 + 256) = v48;
      return a1;
    }
    *(unsigned char *)(a1 + 224) = *((unsigned char *)a2 + 224);
    uint64_t v42 = *((void *)a2 + 29);
    *(unsigned char *)(a1 + 240) = *((unsigned char *)a2 + 240);
    *(void *)(a1 + 232) = v42;
    uint64_t v43 = *((void *)a2 + 34);
    *(void *)(a1 + 272) = v43;
    *(void *)(a1 + 280) = *((void *)a2 + 35);
    (**(void (***)(uint64_t, uint64_t))(v43 - 8))(a1 + 248, (uint64_t)a2 + 248);
  }
  *(_OWORD *)(a1 + 288) = a2[18];
  return a1;
}

uint64_t sub_21F8182CC(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F818320(uint64_t a1)
{
  return a1;
}

void *initializeWithTake for VectorizedPlottables(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x130uLL);
}

uint64_t assignWithTake for VectorizedPlottables(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    if (*(void *)(a2 + 24))
    {
      _s6Charts15AnyChartContentVwxx_0(a1);
      long long v4 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v4;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      goto LABEL_6;
    }
    sub_21F8182CC(a1);
  }
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
LABEL_6:
  long long v6 = (_OWORD *)(a1 + 56);
  long long v7 = (_OWORD *)(a2 + 56);
  if (*(void *)(a1 + 80))
  {
    if (*(void *)(a2 + 80))
    {
      _s6Charts15AnyChartContentVwxx_0(a1 + 56);
      long long v8 = *(_OWORD *)(a2 + 72);
      *long long v6 = *v7;
      *(_OWORD *)(a1 + 72) = v8;
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      goto LABEL_11;
    }
    sub_21F8182CC(a1 + 56);
  }
  long long v9 = *(_OWORD *)(a2 + 72);
  *long long v6 = *v7;
  *(_OWORD *)(a1 + 72) = v9;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
LABEL_11:
  long long v10 = (_OWORD *)(a1 + 112);
  long long v11 = (_OWORD *)(a2 + 112);
  if (*(void *)(a1 + 136))
  {
    if (*(void *)(a2 + 136))
    {
      _s6Charts15AnyChartContentVwxx_0(a1 + 112);
      long long v12 = *(_OWORD *)(a2 + 128);
      *long long v10 = *v11;
      *(_OWORD *)(a1 + 128) = v12;
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      goto LABEL_16;
    }
    sub_21F8182CC(a1 + 112);
  }
  long long v13 = *(_OWORD *)(a2 + 128);
  *long long v10 = *v11;
  *(_OWORD *)(a1 + 128) = v13;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
LABEL_16:
  long long v14 = (_OWORD *)(a1 + 168);
  long long v15 = (_OWORD *)(a2 + 168);
  if (*(void *)(a1 + 192))
  {
    if (*(void *)(a2 + 192))
    {
      _s6Charts15AnyChartContentVwxx_0(a1 + 168);
      long long v16 = *(_OWORD *)(a2 + 184);
      *long long v14 = *v15;
      *(_OWORD *)(a1 + 184) = v16;
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
      goto LABEL_21;
    }
    sub_21F8182CC(a1 + 168);
  }
  long long v17 = *(_OWORD *)(a2 + 184);
  *long long v14 = *v15;
  *(_OWORD *)(a1 + 184) = v17;
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
LABEL_21:
  if (!*(void *)(a1 + 272))
  {
LABEL_25:
    long long v20 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v20;
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    long long v21 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v21;
    return a1;
  }
  if (!*(void *)(a2 + 272))
  {
    sub_21F818320(a1 + 224);
    goto LABEL_25;
  }
  char v19 = *(unsigned char *)(a2 + 224);
  uint64_t v18 = a2 + 224;
  *(unsigned char *)(a1 + 224) = v19;
  *(void *)(a1 + 232) = *(void *)(v18 + 8);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(v18 + 16);
  _s6Charts15AnyChartContentVwxx_0(a1 + 248);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(v18 + 24);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(v18 + 40);
  *(void *)(a1 + 280) = *(void *)(v18 + 56);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(v18 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for VectorizedPlottables(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 304)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for VectorizedPlottables(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 296) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)double result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 304) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 304) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VectorizedPlottables()
{
  return &type metadata for VectorizedPlottables;
}

uint64_t destroy for VectorizedPlottables.Position(uint64_t a1)
{
  return _s6Charts15AnyChartContentVwxx_0(a1 + 24);
}

uint64_t initializeWithCopy for VectorizedPlottables.Position(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 24, a2 + 24);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithCopy for VectorizedPlottables.Position(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  sub_21F7ABEA8((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for VectorizedPlottables.Position(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  _s6Charts15AnyChartContentVwxx_0(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for VectorizedPlottables.Position(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VectorizedPlottables.Position(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VectorizedPlottables.Position()
{
  return &type metadata for VectorizedPlottables.Position;
}

uint64_t sub_21F818884(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *(void *)a1 = *a2;
    a1 = v17 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        long long v18 = *(_OWORD *)(a2 + 3);
        *(_OWORD *)(a1 + 24) = v18;
        (**(void (***)(uint64_t, uint64_t *))(v18 - 8))(a1, a2);
        *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
        *(void *)(a1 + 48) = a2[6];
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
        char v19 = (int *)type metadata accessor for PointsRenderer(0);
        uint64_t v20 = v19[8];
        uint64_t v364 = a1;
        long long v21 = (_OWORD *)(a1 + v20);
        uint64_t v22 = (_OWORD *)((char *)a2 + v20);
        long long v23 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
        uint64_t v24 = *((void *)v23 - 1);
        long long v25 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v24 + 48);
        swift_retain();
        if (v25(v22, 1, v23))
        {
          uint64_t v26 = sub_21F76CA40(qword_267EE7A88);
          memcpy(v21, v22, *(void *)(*(void *)(v26 - 8) + 64));
          a1 = v364;
        }
        else
        {
          v366 = v21;
          int v41 = *((unsigned __int8 *)v22 + 40);
          uint64_t v362 = v19;
          if (v41 == 255)
          {
            long long v42 = v22[1];
            *long long v21 = *v22;
            v21[1] = v42;
            *(_OWORD *)((char *)v21 + 25) = *(_OWORD *)((char *)v22 + 25);
            uint64_t v43 = v23;
          }
          else
          {
            uint64_t v43 = v23;
            if (v41)
            {
              long long v56 = *(_OWORD *)((char *)v22 + 24);
              *(_OWORD *)((char *)v21 + 24) = v56;
              (**(void (***)(_OWORD *, _OWORD *))(v56 - 8))(v21, v22);
              *((unsigned char *)v21 + 40) = 1;
            }
            else
            {
              *(void *)long long v21 = *(void *)v22;
              *((unsigned char *)v21 + 40) = 0;
              swift_retain();
            }
          }
          *((unsigned char *)v21 + 41) = *((unsigned char *)v22 + 41);
          *((void *)v21 + 6) = *((void *)v22 + 6);
          *((void *)v21 + 7) = *((void *)v22 + 7);
          uint64_t v57 = *((void *)v22 + 9);
          *((void *)v21 + 8) = *((void *)v22 + 8);
          *((void *)v21 + 9) = v57;
          *((void *)v21 + 10) = *((void *)v22 + 10);
          uint64_t v58 = (_OWORD *)((char *)v21 + 88);
          int v59 = *((unsigned __int8 *)v22 + 128);
          swift_bridgeObjectRetain();
          if (v59 == 255)
          {
            long long v60 = *(_OWORD *)((char *)v22 + 104);
            _OWORD *v58 = *(_OWORD *)((char *)v22 + 88);
            *(_OWORD *)((char *)v21 + 104) = v60;
            *(_OWORD *)((char *)v21 + 113) = *(_OWORD *)((char *)v22 + 113);
          }
          else if (v59)
          {
            *((void *)v21 + 11) = *((void *)v22 + 11);
            v21[6] = v22[6];
            *((unsigned char *)v21 + 128) = 1;
            swift_retain();
          }
          else
          {
            long long v61 = v22[7];
            v21[7] = v61;
            (**(void (***)(_OWORD *, uint64_t))(v61 - 8))(v58, (uint64_t)v22 + 88);
            *((unsigned char *)v21 + 128) = 0;
          }
          *(_OWORD *)((char *)v21 + 136) = *(_OWORD *)((char *)v22 + 136);
          *((unsigned char *)v21 + 152) = *((unsigned char *)v22 + 152);
          *((void *)v21 + 20) = *((void *)v22 + 20);
          *((unsigned char *)v21 + 168) = *((unsigned char *)v22 + 168);
          long long v258 = v22[12];
          v21[11] = v22[11];
          v21[12] = v258;
          *((unsigned char *)v21 + 208) = *((unsigned char *)v22 + 208);
          uint64_t v259 = v43[11];
          unint64_t v260 = (char *)v21 + v259;
          unint64_t v261 = (char *)v22 + v259;
          uint64_t v262 = sub_21FA24C90();
          uint64_t v263 = *(void *)(v262 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v263 + 48))(v261, 1, v262))
          {
            uint64_t v264 = sub_21F76CA40(&qword_26AD47C20);
            memcpy(v260, v261, *(void *)(*(void *)(v264 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v263 + 16))(v260, v261, v262);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v263 + 56))(v260, 0, 1, v262);
          }
          uint64_t v265 = v43[12];
          uint64_t v266 = (char *)v21 + v265;
          uint64_t v267 = (char *)v22 + v265;
          *(void *)uint64_t v266 = *(void *)v267;
          v266[8] = v267[8];
          *(void *)((char *)v21 + v43[13]) = *(void *)((char *)v22 + v43[13]);
          uint64_t v268 = v43[14];
          v269 = (char *)v21 + v268;
          v270 = (char *)v22 + v268;
          uint64_t v271 = sub_21FA25910();
          uint64_t v272 = *(void *)(v271 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v272 + 48))(v270, 1, v271))
          {
            uint64_t v273 = sub_21F76CA40(&qword_26AD4A3B8);
            memcpy(v269, v270, *(void *)(*(void *)(v273 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v272 + 16))(v269, v270, v271);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v272 + 56))(v269, 0, 1, v271);
          }
          uint64_t v274 = v43[15];
          uint64_t v275 = (char *)v21 + v274;
          uint64_t v276 = (char *)v22 + v274;
          *(void *)uint64_t v275 = *(void *)v276;
          *((_WORD *)v275 + 4) = *((_WORD *)v276 + 4);
          *(void *)((char *)v21 + v43[16]) = *(void *)((char *)v22 + v43[16]);
          *(void *)((char *)v21 + v43[17]) = *(void *)((char *)v22 + v43[17]);
          uint64_t v277 = v43[18];
          v278 = (char *)v21 + v277;
          uint64_t v279 = (char *)v22 + v277;
          uint64_t v280 = *(void *)((char *)v22 + v277 + 24);
          swift_retain();
          if (v280)
          {
            uint64_t v281 = *(void *)v279;
            uint64_t v282 = *((void *)v279 + 1);
            char v283 = v279[16];
            sub_21F7652C0(*(void *)v279, v282, v283);
            *(void *)v278 = v281;
            *((void *)v278 + 1) = v282;
            v278[16] = v283;
            uint64_t v284 = *((void *)v279 + 4);
            *((void *)v278 + 3) = *((void *)v279 + 3);
            uint64_t v285 = *((void *)v279 + 5);
            char v286 = v279[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v284, v285, v286);
            *((void *)v278 + 4) = v284;
            *((void *)v278 + 5) = v285;
            v278[48] = v286;
            *(_OWORD *)(v278 + 56) = *(_OWORD *)(v279 + 56);
          }
          else
          {
            long long v287 = *((_OWORD *)v279 + 3);
            *((_OWORD *)v278 + 2) = *((_OWORD *)v279 + 2);
            *((_OWORD *)v278 + 3) = v287;
            *((void *)v278 + 8) = *((void *)v279 + 8);
            long long v288 = *((_OWORD *)v279 + 1);
            *(_OWORD *)v278 = *(_OWORD *)v279;
            *((_OWORD *)v278 + 1) = v288;
          }
          uint64_t v289 = v23[19];
          uint64_t v290 = (char *)v21 + v289;
          uint64_t v291 = (char *)v22 + v289;
          if (*(void *)((char *)v22 + v289 + 24))
          {
            uint64_t v292 = *(void *)v291;
            uint64_t v293 = *((void *)v291 + 1);
            char v294 = v291[16];
            sub_21F7652C0(*(void *)v291, v293, v294);
            *(void *)uint64_t v290 = v292;
            *((void *)v290 + 1) = v293;
            v290[16] = v294;
            uint64_t v295 = *((void *)v291 + 4);
            *((void *)v290 + 3) = *((void *)v291 + 3);
            uint64_t v296 = *((void *)v291 + 5);
            char v297 = v291[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v295, v296, v297);
            *((void *)v290 + 4) = v295;
            *((void *)v290 + 5) = v296;
            v290[48] = v297;
            *(_OWORD *)(v290 + 56) = *(_OWORD *)(v291 + 56);
          }
          else
          {
            long long v298 = *((_OWORD *)v291 + 3);
            *((_OWORD *)v290 + 2) = *((_OWORD *)v291 + 2);
            *((_OWORD *)v290 + 3) = v298;
            *((void *)v290 + 8) = *((void *)v291 + 8);
            long long v299 = *((_OWORD *)v291 + 1);
            *(_OWORD *)uint64_t v290 = *(_OWORD *)v291;
            *((_OWORD *)v290 + 1) = v299;
          }
          uint64_t v300 = v23[20];
          uint64_t v301 = (char *)v21 + v300;
          uint64_t v302 = (char *)v22 + v300;
          if (*(void *)((char *)v22 + v300 + 24))
          {
            uint64_t v303 = *(void *)v302;
            uint64_t v304 = *((void *)v302 + 1);
            char v305 = v302[16];
            sub_21F7652C0(*(void *)v302, v304, v305);
            *(void *)uint64_t v301 = v303;
            *((void *)v301 + 1) = v304;
            v301[16] = v305;
            uint64_t v306 = *((void *)v302 + 4);
            *((void *)v301 + 3) = *((void *)v302 + 3);
            uint64_t v307 = *((void *)v302 + 5);
            char v308 = v302[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v306, v307, v308);
            *((void *)v301 + 4) = v306;
            *((void *)v301 + 5) = v307;
            v301[48] = v308;
            *(_OWORD *)(v301 + 56) = *(_OWORD *)(v302 + 56);
          }
          else
          {
            long long v309 = *((_OWORD *)v302 + 3);
            *((_OWORD *)v301 + 2) = *((_OWORD *)v302 + 2);
            *((_OWORD *)v301 + 3) = v309;
            *((void *)v301 + 8) = *((void *)v302 + 8);
            long long v310 = *((_OWORD *)v302 + 1);
            *(_OWORD *)uint64_t v301 = *(_OWORD *)v302;
            *((_OWORD *)v301 + 1) = v310;
          }
          uint64_t v311 = v23[21];
          uint64_t v312 = (char *)v21 + v311;
          uint64_t v313 = (char *)v22 + v311;
          if (*(void *)((char *)v22 + v311 + 24))
          {
            uint64_t v314 = *(void *)v313;
            uint64_t v315 = *((void *)v313 + 1);
            char v316 = v313[16];
            sub_21F7652C0(*(void *)v313, v315, v316);
            *(void *)uint64_t v312 = v314;
            *((void *)v312 + 1) = v315;
            v312[16] = v316;
            uint64_t v317 = *((void *)v313 + 4);
            *((void *)v312 + 3) = *((void *)v313 + 3);
            uint64_t v318 = *((void *)v313 + 5);
            char v319 = v313[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v317, v318, v319);
            *((void *)v312 + 4) = v317;
            *((void *)v312 + 5) = v318;
            v312[48] = v319;
            *(_OWORD *)(v312 + 56) = *(_OWORD *)(v313 + 56);
          }
          else
          {
            long long v320 = *((_OWORD *)v313 + 3);
            *((_OWORD *)v312 + 2) = *((_OWORD *)v313 + 2);
            *((_OWORD *)v312 + 3) = v320;
            *((void *)v312 + 8) = *((void *)v313 + 8);
            long long v321 = *((_OWORD *)v313 + 1);
            *(_OWORD *)uint64_t v312 = *(_OWORD *)v313;
            *((_OWORD *)v312 + 1) = v321;
          }
          uint64_t v322 = v23[22];
          unint64_t v323 = (char *)v21 + v322;
          unint64_t v324 = (char *)v22 + v322;
          *(_OWORD *)unint64_t v323 = *(_OWORD *)v324;
          *((void *)v323 + 2) = *((void *)v324 + 2);
          uint64_t v325 = v23[23];
          uint64_t v326 = (char *)v21 + v325;
          uint64_t v327 = (char *)v22 + v325;
          *(_OWORD *)uint64_t v326 = *(_OWORD *)v327;
          *((void *)v326 + 2) = *((void *)v327 + 2);
          uint64_t v328 = v23[24];
          uint64_t v329 = (char *)v21 + v328;
          uint64_t v330 = (char *)v22 + v328;
          if (*(void *)((char *)v22 + v328 + 24))
          {
            uint64_t v331 = *(void *)v330;
            uint64_t v332 = *((void *)v330 + 1);
            char v333 = v330[16];
            sub_21F7652C0(*(void *)v330, v332, v333);
            *(void *)uint64_t v329 = v331;
            *((void *)v329 + 1) = v332;
            v329[16] = v333;
            *((void *)v329 + 3) = *((void *)v330 + 3);
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v334 = *((_OWORD *)v330 + 1);
            *(_OWORD *)uint64_t v329 = *(_OWORD *)v330;
            *((_OWORD *)v329 + 1) = v334;
          }
          uint64_t v335 = v23[25];
          uint64_t v336 = (char *)v21 + v335;
          uint64_t v337 = (char *)v22 + v335;
          if (*(void *)((char *)v22 + v335 + 24))
          {
            uint64_t v338 = *(void *)v337;
            uint64_t v339 = *((void *)v337 + 1);
            char v340 = v337[16];
            sub_21F7652C0(*(void *)v337, v339, v340);
            *(void *)uint64_t v336 = v338;
            *((void *)v336 + 1) = v339;
            v336[16] = v340;
            *((void *)v336 + 3) = *((void *)v337 + 3);
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v341 = *((_OWORD *)v337 + 1);
            *(_OWORD *)uint64_t v336 = *(_OWORD *)v337;
            *((_OWORD *)v336 + 1) = v341;
          }
          uint64_t v342 = v23[26];
          uint64_t v343 = (void *)((char *)v21 + v342);
          uint64_t v344 = (void *)((char *)v22 + v342);
          uint64_t v345 = v344[1];
          *uint64_t v343 = *v344;
          v343[1] = v345;
          *((unsigned char *)v21 + v23[27]) = *((unsigned char *)v22 + v23[27]);
          uint64_t v346 = v23[28];
          uint64_t v347 = (char *)v21 + v346;
          uint64_t v348 = (char *)v22 + v346;
          uint64_t v349 = *((void *)v348 + 3);
          swift_bridgeObjectRetain();
          if (v349)
          {
            *((void *)v347 + 3) = v349;
            (**(void (***)(char *, char *, uint64_t))(v349 - 8))(v347, v348, v349);
          }
          else
          {
            long long v350 = *((_OWORD *)v348 + 1);
            *(_OWORD *)uint64_t v347 = *(_OWORD *)v348;
            *((_OWORD *)v347 + 1) = v350;
          }
          char v19 = v362;
          a1 = v364;
          (*(void (**)(_OWORD *, void, uint64_t, int *))(v24 + 56))(v366, 0, 1, v23);
        }
        uint64_t v351 = v19[9];
        uint64_t v352 = a1 + v351;
        uint64_t v353 = (_OWORD *)((char *)a2 + v351);
        int v354 = *((unsigned __int8 *)a2 + v351 + 40);
        if (v354 == 255)
        {
          long long v355 = v353[1];
          *(_OWORD *)uint64_t v352 = *v353;
          *(_OWORD *)(v352 + 16) = v355;
          *(_OWORD *)(v352 + 25) = *(_OWORD *)((char *)v353 + 25);
        }
        else if (v354)
        {
          *(void *)uint64_t v352 = *(void *)v353;
          *(_OWORD *)(v352 + 8) = *(_OWORD *)((char *)v353 + 8);
          *(unsigned char *)(v352 + 40) = 1;
          swift_retain();
        }
        else
        {
          long long v356 = *(_OWORD *)((char *)v353 + 24);
          *(_OWORD *)(v352 + 24) = v356;
          (**(void (***)(uint64_t))(v356 - 8))(v352);
          *(unsigned char *)(v352 + 40) = 0;
        }
        uint64_t v357 = v19[10];
        uint64_t v358 = a1 + v357;
        uint64_t v359 = (uint64_t)a2 + v357;
        *(_OWORD *)uint64_t v358 = *(_OWORD *)v359;
        *(unsigned char *)(v358 + 16) = *(unsigned char *)(v359 + 16);
        break;
      case 2u:
        long long v27 = *(_OWORD *)(a2 + 3);
        *(_OWORD *)(a1 + 24) = v27;
        (**(void (***)(uint64_t, uint64_t *))(v27 - 8))(a1, a2);
        *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
        *(void *)(a1 + 48) = a2[6];
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
        uint64_t v28 = *(int *)(type metadata accessor for RulesRenderer(0) + 32);
        double v29 = (_OWORD *)(a1 + v28);
        uint64_t v30 = (_OWORD *)((char *)a2 + v28);
        uint64_t v31 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
        uint64_t v32 = *((void *)v31 - 1);
        long long v33 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v32 + 48);
        swift_retain();
        if (v33(v30, 1, v31))
        {
          uint64_t v34 = sub_21F76CA40(qword_267EE7A88);
          memcpy(v29, v30, *(void *)(*(void *)(v34 - 8) + 64));
        }
        else
        {
          int v35 = *((unsigned __int8 *)v30 + 40);
          if (v35 == 255)
          {
            long long v36 = v30[1];
            *double v29 = *v30;
            v29[1] = v36;
            *(_OWORD *)((char *)v29 + 25) = *(_OWORD *)((char *)v30 + 25);
          }
          else if (v35)
          {
            long long v44 = *(_OWORD *)((char *)v30 + 24);
            *(_OWORD *)((char *)v29 + 24) = v44;
            (**(void (***)(_OWORD *, _OWORD *))(v44 - 8))(v29, v30);
            *((unsigned char *)v29 + 40) = 1;
          }
          else
          {
            *(void *)double v29 = *(void *)v30;
            *((unsigned char *)v29 + 40) = 0;
            swift_retain();
          }
          *((unsigned char *)v29 + 41) = *((unsigned char *)v30 + 41);
          *((void *)v29 + 6) = *((void *)v30 + 6);
          *((void *)v29 + 7) = *((void *)v30 + 7);
          uint64_t v45 = *((void *)v30 + 9);
          *((void *)v29 + 8) = *((void *)v30 + 8);
          *((void *)v29 + 9) = v45;
          *((void *)v29 + 10) = *((void *)v30 + 10);
          int v46 = *((unsigned __int8 *)v30 + 128);
          swift_bridgeObjectRetain();
          if (v46 == 255)
          {
            long long v47 = *(_OWORD *)((char *)v30 + 104);
            *(_OWORD *)((char *)v29 + 88) = *(_OWORD *)((char *)v30 + 88);
            *(_OWORD *)((char *)v29 + 104) = v47;
            *(_OWORD *)((char *)v29 + 113) = *(_OWORD *)((char *)v30 + 113);
          }
          else if (v46)
          {
            *((void *)v29 + 11) = *((void *)v30 + 11);
            void v29[6] = v30[6];
            *((unsigned char *)v29 + 128) = 1;
            swift_retain();
          }
          else
          {
            long long v48 = v30[7];
            v29[7] = v48;
            (**(void (***)(uint64_t, uint64_t))(v48 - 8))((uint64_t)v29 + 88, (uint64_t)v30 + 88);
            *((unsigned char *)v29 + 128) = 0;
          }
          *(_OWORD *)((char *)v29 + 136) = *(_OWORD *)((char *)v30 + 136);
          *((unsigned char *)v29 + 152) = *((unsigned char *)v30 + 152);
          *((void *)v29 + 20) = *((void *)v30 + 20);
          *((unsigned char *)v29 + 168) = *((unsigned char *)v30 + 168);
          long long v62 = v30[12];
          v29[11] = v30[11];
          v29[12] = v62;
          *((unsigned char *)v29 + 208) = *((unsigned char *)v30 + 208);
          uint64_t v63 = v31[11];
          unint64_t v64 = (char *)v29 + v63;
          uint64_t v65 = (char *)v30 + v63;
          uint64_t v66 = sub_21FA24C90();
          uint64_t v67 = *(void *)(v66 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
          {
            uint64_t v68 = sub_21F76CA40(&qword_26AD47C20);
            memcpy(v64, v65, *(void *)(*(void *)(v68 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v64, v65, v66);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
          }
          uint64_t v69 = v31[12];
          uint64_t v70 = (char *)v29 + v69;
          uint64_t v71 = (char *)v30 + v69;
          *(void *)uint64_t v70 = *(void *)v71;
          v70[8] = v71[8];
          *(void *)((char *)v29 + v31[13]) = *(void *)((char *)v30 + v31[13]);
          uint64_t v72 = v31[14];
          uint64_t v73 = (char *)v29 + v72;
          long long v74 = (char *)v30 + v72;
          uint64_t v75 = sub_21FA25910();
          uint64_t v76 = *(void *)(v75 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
          {
            uint64_t v77 = sub_21F76CA40(&qword_26AD4A3B8);
            memcpy(v73, v74, *(void *)(*(void *)(v77 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v73, v74, v75);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
          }
          uint64_t v78 = v31[15];
          uint64_t v79 = (char *)v29 + v78;
          uint64_t v80 = (char *)v30 + v78;
          *(void *)uint64_t v79 = *(void *)v80;
          *((_WORD *)v79 + 4) = *((_WORD *)v80 + 4);
          *(void *)((char *)v29 + v31[16]) = *(void *)((char *)v30 + v31[16]);
          *(void *)((char *)v29 + v31[17]) = *(void *)((char *)v30 + v31[17]);
          uint64_t v81 = v31[18];
          uint64_t v82 = (char *)v29 + v81;
          long long v83 = (char *)v30 + v81;
          uint64_t v84 = *(void *)((char *)v30 + v81 + 24);
          swift_retain();
          if (v84)
          {
            uint64_t v85 = *(void *)v83;
            uint64_t v86 = *((void *)v83 + 1);
            char v87 = v83[16];
            sub_21F7652C0(*(void *)v83, v86, v87);
            *(void *)uint64_t v82 = v85;
            *((void *)v82 + 1) = v86;
            v82[16] = v87;
            uint64_t v88 = *((void *)v83 + 4);
            *((void *)v82 + 3) = *((void *)v83 + 3);
            uint64_t v89 = *((void *)v83 + 5);
            char v90 = v83[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v88, v89, v90);
            *((void *)v82 + 4) = v88;
            *((void *)v82 + 5) = v89;
            v82[48] = v90;
            *(_OWORD *)(v82 + 56) = *(_OWORD *)(v83 + 56);
          }
          else
          {
            long long v91 = *((_OWORD *)v83 + 3);
            *((_OWORD *)v82 + 2) = *((_OWORD *)v83 + 2);
            *((_OWORD *)v82 + 3) = v91;
            *((void *)v82 + 8) = *((void *)v83 + 8);
            long long v92 = *((_OWORD *)v83 + 1);
            *(_OWORD *)uint64_t v82 = *(_OWORD *)v83;
            *((_OWORD *)v82 + 1) = v92;
          }
          uint64_t v93 = v31[19];
          uint64_t v94 = (char *)v29 + v93;
          unint64_t v95 = (char *)v30 + v93;
          if (*(void *)((char *)v30 + v93 + 24))
          {
            uint64_t v96 = *(void *)v95;
            uint64_t v97 = *((void *)v95 + 1);
            char v98 = v95[16];
            sub_21F7652C0(*(void *)v95, v97, v98);
            *(void *)uint64_t v94 = v96;
            *((void *)v94 + 1) = v97;
            v94[16] = v98;
            uint64_t v99 = *((void *)v95 + 4);
            *((void *)v94 + 3) = *((void *)v95 + 3);
            uint64_t v100 = *((void *)v95 + 5);
            char v101 = v95[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v99, v100, v101);
            *((void *)v94 + 4) = v99;
            *((void *)v94 + 5) = v100;
            v94[48] = v101;
            *(_OWORD *)(v94 + 56) = *(_OWORD *)(v95 + 56);
          }
          else
          {
            long long v102 = *((_OWORD *)v95 + 3);
            *((_OWORD *)v94 + 2) = *((_OWORD *)v95 + 2);
            *((_OWORD *)v94 + 3) = v102;
            *((void *)v94 + 8) = *((void *)v95 + 8);
            long long v103 = *((_OWORD *)v95 + 1);
            *(_OWORD *)uint64_t v94 = *(_OWORD *)v95;
            *((_OWORD *)v94 + 1) = v103;
          }
          uint64_t v104 = v31[20];
          char v105 = (char *)v29 + v104;
          uint64_t v106 = (char *)v30 + v104;
          if (*(void *)((char *)v30 + v104 + 24))
          {
            uint64_t v107 = *(void *)v106;
            uint64_t v108 = *((void *)v106 + 1);
            char v109 = v106[16];
            sub_21F7652C0(*(void *)v106, v108, v109);
            *(void *)char v105 = v107;
            *((void *)v105 + 1) = v108;
            v105[16] = v109;
            uint64_t v110 = *((void *)v106 + 4);
            *((void *)v105 + 3) = *((void *)v106 + 3);
            uint64_t v111 = *((void *)v106 + 5);
            char v112 = v106[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v110, v111, v112);
            *((void *)v105 + 4) = v110;
            *((void *)v105 + 5) = v111;
            v105[48] = v112;
            *(_OWORD *)(v105 + 56) = *(_OWORD *)(v106 + 56);
          }
          else
          {
            long long v113 = *((_OWORD *)v106 + 3);
            *((_OWORD *)v105 + 2) = *((_OWORD *)v106 + 2);
            *((_OWORD *)v105 + 3) = v113;
            *((void *)v105 + 8) = *((void *)v106 + 8);
            long long v114 = *((_OWORD *)v106 + 1);
            *(_OWORD *)char v105 = *(_OWORD *)v106;
            *((_OWORD *)v105 + 1) = v114;
          }
          uint64_t v115 = v31[21];
          uint64_t v116 = (char *)v29 + v115;
          uint64_t v117 = (char *)v30 + v115;
          if (*(void *)((char *)v30 + v115 + 24))
          {
            uint64_t v118 = *(void *)v117;
            uint64_t v119 = *((void *)v117 + 1);
            char v120 = v117[16];
            sub_21F7652C0(*(void *)v117, v119, v120);
            *(void *)uint64_t v116 = v118;
            *((void *)v116 + 1) = v119;
            v116[16] = v120;
            uint64_t v121 = *((void *)v117 + 4);
            *((void *)v116 + 3) = *((void *)v117 + 3);
            uint64_t v122 = *((void *)v117 + 5);
            char v123 = v117[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v121, v122, v123);
            *((void *)v116 + 4) = v121;
            *((void *)v116 + 5) = v122;
            v116[48] = v123;
            *(_OWORD *)(v116 + 56) = *(_OWORD *)(v117 + 56);
          }
          else
          {
            long long v124 = *((_OWORD *)v117 + 3);
            *((_OWORD *)v116 + 2) = *((_OWORD *)v117 + 2);
            *((_OWORD *)v116 + 3) = v124;
            *((void *)v116 + 8) = *((void *)v117 + 8);
            long long v125 = *((_OWORD *)v117 + 1);
            *(_OWORD *)uint64_t v116 = *(_OWORD *)v117;
            *((_OWORD *)v116 + 1) = v125;
          }
          uint64_t v126 = v31[22];
          uint64_t v127 = (char *)v29 + v126;
          id v128 = (char *)v30 + v126;
          *(_OWORD *)uint64_t v127 = *(_OWORD *)v128;
          *((void *)v127 + 2) = *((void *)v128 + 2);
          uint64_t v129 = v31[23];
          uint64_t v130 = (char *)v29 + v129;
          uint64_t v131 = (char *)v30 + v129;
          *(_OWORD *)uint64_t v130 = *(_OWORD *)v131;
          *((void *)v130 + 2) = *((void *)v131 + 2);
          uint64_t v132 = v31[24];
          char v133 = (char *)v29 + v132;
          uint64_t v134 = (char *)v30 + v132;
          if (*(void *)((char *)v30 + v132 + 24))
          {
            uint64_t v135 = *(void *)v134;
            uint64_t v136 = *((void *)v134 + 1);
            char v137 = v134[16];
            sub_21F7652C0(*(void *)v134, v136, v137);
            *(void *)char v133 = v135;
            *((void *)v133 + 1) = v136;
            v133[16] = v137;
            *((void *)v133 + 3) = *((void *)v134 + 3);
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v138 = *((_OWORD *)v134 + 1);
            *(_OWORD *)char v133 = *(_OWORD *)v134;
            *((_OWORD *)v133 + 1) = v138;
          }
          uint64_t v139 = v31[25];
          uint64_t v140 = (char *)v29 + v139;
          char v141 = (char *)v30 + v139;
          if (*(void *)((char *)v30 + v139 + 24))
          {
            uint64_t v142 = *(void *)v141;
            uint64_t v143 = *((void *)v141 + 1);
            char v144 = v141[16];
            sub_21F7652C0(*(void *)v141, v143, v144);
            *(void *)uint64_t v140 = v142;
            *((void *)v140 + 1) = v143;
            v140[16] = v144;
            *((void *)v140 + 3) = *((void *)v141 + 3);
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v145 = *((_OWORD *)v141 + 1);
            *(_OWORD *)uint64_t v140 = *(_OWORD *)v141;
            *((_OWORD *)v140 + 1) = v145;
          }
          uint64_t v146 = v31[26];
          uint64_t v147 = (void *)((char *)v29 + v146);
          char v148 = (void *)((char *)v30 + v146);
          uint64_t v149 = v148[1];
          *uint64_t v147 = *v148;
          v147[1] = v149;
          *((unsigned char *)v29 + v31[27]) = *((unsigned char *)v30 + v31[27]);
          uint64_t v150 = v31[28];
          char v151 = (char *)v29 + v150;
          uint64_t v152 = (char *)v30 + v150;
          uint64_t v153 = *((void *)v152 + 3);
          swift_bridgeObjectRetain();
          if (v153)
          {
            *((void *)v151 + 3) = v153;
            (**(void (***)(char *, char *, uint64_t))(v153 - 8))(v151, v152, v153);
          }
          else
          {
            long long v154 = *((_OWORD *)v152 + 1);
            *(_OWORD *)char v151 = *(_OWORD *)v152;
            *((_OWORD *)v151 + 1) = v154;
          }
          (*(void (**)(_OWORD *, void, uint64_t, int *))(v32 + 56))(v29, 0, 1, v31);
        }
        break;
      case 3u:
        *(void *)a1 = *a2;
        swift_retain();
        break;
      default:
        long long v6 = *(_OWORD *)(a2 + 3);
        *(_OWORD *)(a1 + 24) = v6;
        (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(a1, a2);
        *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
        *(void *)(a1 + 48) = a2[6];
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
        long long v7 = (int *)type metadata accessor for RectanglesRenderer(0);
        uint64_t v8 = v7[8];
        long long v9 = a2;
        long long v10 = (_OWORD *)(a1 + v8);
        uint64_t v363 = v9;
        long long v11 = (_OWORD *)((char *)v9 + v8);
        long long v12 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
        uint64_t v13 = *((void *)v12 - 1);
        long long v14 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v13 + 48);
        swift_retain();
        if (v14(v11, 1, v12))
        {
          uint64_t v15 = sub_21F76CA40(qword_267EE7A88);
          memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
          long long v16 = v363;
        }
        else
        {
          v365 = v10;
          int v37 = *((unsigned __int8 *)v11 + 40);
          uint64_t v361 = v7;
          if (v37 == 255)
          {
            long long v38 = v11[1];
            uint64_t v39 = v10;
            *long long v10 = *v11;
            v10[1] = v38;
            *(_OWORD *)((char *)v10 + 25) = *(_OWORD *)((char *)v11 + 25);
            uint64_t v40 = v12;
          }
          else
          {
            uint64_t v40 = v12;
            if (v37)
            {
              long long v49 = *(_OWORD *)((char *)v11 + 24);
              uint64_t v39 = v10;
              *(_OWORD *)((char *)v10 + 24) = v49;
              (**(void (***)(_OWORD *, _OWORD *))(v49 - 8))(v10, v11);
              *((unsigned char *)v10 + 40) = 1;
            }
            else
            {
              uint64_t v39 = v10;
              *(void *)long long v10 = *(void *)v11;
              *((unsigned char *)v10 + 40) = 0;
              swift_retain();
            }
          }
          *((unsigned char *)v39 + 41) = *((unsigned char *)v11 + 41);
          *((void *)v39 + 6) = *((void *)v11 + 6);
          *((void *)v39 + 7) = *((void *)v11 + 7);
          uint64_t v50 = *((void *)v11 + 9);
          *((void *)v39 + 8) = *((void *)v11 + 8);
          *((void *)v39 + 9) = v50;
          *((void *)v39 + 10) = *((void *)v11 + 10);
          uint64_t v51 = (_OWORD *)((char *)v39 + 88);
          int v52 = *((unsigned __int8 *)v11 + 128);
          swift_bridgeObjectRetain();
          if (v52 == 255)
          {
            long long v53 = *(_OWORD *)((char *)v11 + 104);
            *uint64_t v51 = *(_OWORD *)((char *)v11 + 88);
            v51[1] = v53;
            *(_OWORD *)((char *)v51 + 25) = *(_OWORD *)((char *)v11 + 113);
            char v54 = v10;
          }
          else if (v52)
          {
            char v54 = v10;
            *((void *)v10 + 11) = *((void *)v11 + 11);
            v10[6] = v11[6];
            *((unsigned char *)v10 + 128) = 1;
            swift_retain();
          }
          else
          {
            long long v55 = v11[7];
            char v54 = v10;
            v10[7] = v55;
            (**(void (***)(_OWORD *, uint64_t))(v55 - 8))(v51, (uint64_t)v11 + 88);
            *((unsigned char *)v10 + 128) = 0;
          }
          *(_OWORD *)((char *)v54 + 136) = *(_OWORD *)((char *)v11 + 136);
          *((unsigned char *)v54 + 152) = *((unsigned char *)v11 + 152);
          *((void *)v54 + 20) = *((void *)v11 + 20);
          *((unsigned char *)v54 + 168) = *((unsigned char *)v11 + 168);
          long long v155 = v11[12];
          v54[11] = v11[11];
          v54[12] = v155;
          *((unsigned char *)v54 + 208) = *((unsigned char *)v11 + 208);
          uint64_t v156 = v40[11];
          char v157 = (char *)v54 + v156;
          unint64_t v158 = (char *)v11 + v156;
          uint64_t v159 = sub_21FA24C90();
          uint64_t v160 = *(void *)(v159 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v160 + 48))(v158, 1, v159))
          {
            uint64_t v161 = sub_21F76CA40(&qword_26AD47C20);
            memcpy(v157, v158, *(void *)(*(void *)(v161 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v160 + 16))(v157, v158, v159);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v160 + 56))(v157, 0, 1, v159);
          }
          uint64_t v162 = v40[12];
          char v163 = (char *)v10 + v162;
          uint64_t v164 = (char *)v11 + v162;
          *(void *)char v163 = *(void *)v164;
          v163[8] = v164[8];
          *(void *)((char *)v10 + v40[13]) = *(void *)((char *)v11 + v40[13]);
          uint64_t v165 = v40[14];
          uint64_t v166 = (char *)v10 + v165;
          uint64_t v167 = (char *)v11 + v165;
          uint64_t v168 = sub_21FA25910();
          uint64_t v169 = *(void *)(v168 - 8);
          uint64_t v170 = v11;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v169 + 48))(v167, 1, v168))
          {
            uint64_t v171 = sub_21F76CA40(&qword_26AD4A3B8);
            memcpy(v166, v167, *(void *)(*(void *)(v171 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v169 + 16))(v166, v167, v168);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v169 + 56))(v166, 0, 1, v168);
          }
          uint64_t v172 = v365;
          uint64_t v173 = v40[15];
          uint64_t v174 = (char *)v365 + v173;
          char v175 = (char *)v170 + v173;
          *(void *)uint64_t v174 = *(void *)v175;
          *((_WORD *)v174 + 4) = *((_WORD *)v175 + 4);
          *(void *)((char *)v365 + v40[16]) = *(void *)((char *)v170 + v40[16]);
          *(void *)((char *)v365 + v40[17]) = *(void *)((char *)v170 + v40[17]);
          uint64_t v176 = v40[18];
          char v177 = (char *)v365 + v176;
          uint64_t v178 = (char *)v170 + v176;
          uint64_t v179 = *(void *)((char *)v170 + v176 + 24);
          swift_retain();
          if (v179)
          {
            uint64_t v180 = *(void *)v178;
            uint64_t v181 = *((void *)v178 + 1);
            char v182 = v178[16];
            sub_21F7652C0(*(void *)v178, v181, v182);
            *(void *)char v177 = v180;
            *((void *)v177 + 1) = v181;
            v177[16] = v182;
            uint64_t v183 = *((void *)v178 + 4);
            *((void *)v177 + 3) = *((void *)v178 + 3);
            uint64_t v184 = *((void *)v178 + 5);
            char v185 = v178[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v183, v184, v185);
            *((void *)v177 + 4) = v183;
            *((void *)v177 + 5) = v184;
            uint64_t v172 = v365;
            v177[48] = v185;
            *(_OWORD *)(v177 + 56) = *(_OWORD *)(v178 + 56);
          }
          else
          {
            long long v186 = *((_OWORD *)v178 + 3);
            *((_OWORD *)v177 + 2) = *((_OWORD *)v178 + 2);
            *((_OWORD *)v177 + 3) = v186;
            *((void *)v177 + 8) = *((void *)v178 + 8);
            long long v187 = *((_OWORD *)v178 + 1);
            *(_OWORD *)char v177 = *(_OWORD *)v178;
            *((_OWORD *)v177 + 1) = v187;
          }
          uint64_t v188 = v12[19];
          uint64_t v189 = (uint64_t)v172 + v188;
          uint64_t v190 = (char *)v170 + v188;
          if (*(void *)((char *)v170 + v188 + 24))
          {
            uint64_t v191 = *(void *)v190;
            uint64_t v192 = *((void *)v190 + 1);
            char v193 = v190[16];
            sub_21F7652C0(*(void *)v190, v192, v193);
            *(void *)uint64_t v189 = v191;
            *(void *)(v189 + 8) = v192;
            *(unsigned char *)(v189 + 16) = v193;
            uint64_t v194 = *((void *)v190 + 4);
            *(void *)(v189 + 24) = *((void *)v190 + 3);
            uint64_t v195 = *((void *)v190 + 5);
            char v196 = v190[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v194, v195, v196);
            *(void *)(v189 + 32) = v194;
            *(void *)(v189 + 40) = v195;
            uint64_t v172 = v365;
            *(unsigned char *)(v189 + 48) = v196;
            *(_OWORD *)(v189 + 56) = *(_OWORD *)(v190 + 56);
          }
          else
          {
            long long v197 = *((_OWORD *)v190 + 3);
            *(_OWORD *)(v189 + 32) = *((_OWORD *)v190 + 2);
            *(_OWORD *)(v189 + 48) = v197;
            *(void *)(v189 + 64) = *((void *)v190 + 8);
            long long v198 = *((_OWORD *)v190 + 1);
            *(_OWORD *)uint64_t v189 = *(_OWORD *)v190;
            *(_OWORD *)(v189 + 16) = v198;
          }
          uint64_t v199 = v12[20];
          uint64_t v200 = (uint64_t)v172 + v199;
          uint64_t v201 = (char *)v170 + v199;
          if (*(void *)((char *)v170 + v199 + 24))
          {
            uint64_t v202 = *(void *)v201;
            uint64_t v203 = *((void *)v201 + 1);
            char v204 = v201[16];
            sub_21F7652C0(*(void *)v201, v203, v204);
            *(void *)uint64_t v200 = v202;
            *(void *)(v200 + 8) = v203;
            *(unsigned char *)(v200 + 16) = v204;
            uint64_t v205 = *((void *)v201 + 4);
            *(void *)(v200 + 24) = *((void *)v201 + 3);
            uint64_t v206 = *((void *)v201 + 5);
            char v207 = v201[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v205, v206, v207);
            *(void *)(v200 + 32) = v205;
            *(void *)(v200 + 40) = v206;
            uint64_t v172 = v365;
            *(unsigned char *)(v200 + 48) = v207;
            *(_OWORD *)(v200 + 56) = *(_OWORD *)(v201 + 56);
          }
          else
          {
            long long v208 = *((_OWORD *)v201 + 3);
            *(_OWORD *)(v200 + 32) = *((_OWORD *)v201 + 2);
            *(_OWORD *)(v200 + 48) = v208;
            *(void *)(v200 + 64) = *((void *)v201 + 8);
            long long v209 = *((_OWORD *)v201 + 1);
            *(_OWORD *)uint64_t v200 = *(_OWORD *)v201;
            *(_OWORD *)(v200 + 16) = v209;
          }
          uint64_t v210 = v12[21];
          uint64_t v211 = (uint64_t)v172 + v210;
          uint64_t v212 = (char *)v170 + v210;
          if (*(void *)((char *)v170 + v210 + 24))
          {
            uint64_t v213 = *(void *)v212;
            uint64_t v214 = *((void *)v212 + 1);
            char v215 = v212[16];
            sub_21F7652C0(*(void *)v212, v214, v215);
            *(void *)uint64_t v211 = v213;
            *(void *)(v211 + 8) = v214;
            *(unsigned char *)(v211 + 16) = v215;
            uint64_t v216 = *((void *)v212 + 4);
            *(void *)(v211 + 24) = *((void *)v212 + 3);
            uint64_t v217 = *((void *)v212 + 5);
            char v218 = v212[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v216, v217, v218);
            *(void *)(v211 + 32) = v216;
            *(void *)(v211 + 40) = v217;
            uint64_t v172 = v365;
            *(unsigned char *)(v211 + 48) = v218;
            *(_OWORD *)(v211 + 56) = *(_OWORD *)(v212 + 56);
          }
          else
          {
            long long v219 = *((_OWORD *)v212 + 3);
            *(_OWORD *)(v211 + 32) = *((_OWORD *)v212 + 2);
            *(_OWORD *)(v211 + 48) = v219;
            *(void *)(v211 + 64) = *((void *)v212 + 8);
            long long v220 = *((_OWORD *)v212 + 1);
            *(_OWORD *)uint64_t v211 = *(_OWORD *)v212;
            *(_OWORD *)(v211 + 16) = v220;
          }
          uint64_t v221 = v12[22];
          uint64_t v222 = (uint64_t)v172 + v221;
          v223 = (char *)v170 + v221;
          *(_OWORD *)uint64_t v222 = *(_OWORD *)v223;
          *(void *)(v222 + 16) = *((void *)v223 + 2);
          uint64_t v224 = v12[23];
          uint64_t v225 = (uint64_t)v172 + v224;
          char v226 = (char *)v170 + v224;
          *(_OWORD *)uint64_t v225 = *(_OWORD *)v226;
          *(void *)(v225 + 16) = *((void *)v226 + 2);
          uint64_t v227 = v12[24];
          uint64_t v228 = (uint64_t)v172 + v227;
          char v229 = (char *)v170 + v227;
          if (*(void *)((char *)v170 + v227 + 24))
          {
            uint64_t v230 = *(void *)v229;
            uint64_t v231 = *((void *)v229 + 1);
            char v232 = v229[16];
            sub_21F7652C0(*(void *)v229, v231, v232);
            *(void *)uint64_t v228 = v230;
            *(void *)(v228 + 8) = v231;
            uint64_t v172 = v365;
            *(unsigned char *)(v228 + 16) = v232;
            *(void *)(v228 + 24) = *((void *)v229 + 3);
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v233 = *((_OWORD *)v229 + 1);
            *(_OWORD *)uint64_t v228 = *(_OWORD *)v229;
            *(_OWORD *)(v228 + 16) = v233;
          }
          uint64_t v234 = v12[25];
          uint64_t v235 = (uint64_t)v172 + v234;
          char v236 = (char *)v170 + v234;
          if (*(void *)((char *)v170 + v234 + 24))
          {
            uint64_t v237 = *(void *)v236;
            uint64_t v238 = *((void *)v236 + 1);
            char v239 = v236[16];
            sub_21F7652C0(*(void *)v236, v238, v239);
            *(void *)uint64_t v235 = v237;
            *(void *)(v235 + 8) = v238;
            uint64_t v172 = v365;
            *(unsigned char *)(v235 + 16) = v239;
            *(void *)(v235 + 24) = *((void *)v236 + 3);
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v240 = *((_OWORD *)v236 + 1);
            *(_OWORD *)uint64_t v235 = *(_OWORD *)v236;
            *(_OWORD *)(v235 + 16) = v240;
          }
          uint64_t v241 = v12[26];
          uint64_t v242 = (void *)((char *)v172 + v241);
          uint64_t v243 = (void *)((char *)v170 + v241);
          uint64_t v244 = v243[1];
          *uint64_t v242 = *v243;
          v242[1] = v244;
          *((unsigned char *)v172 + v12[27]) = *((unsigned char *)v170 + v12[27]);
          uint64_t v245 = v12[28];
          uint64_t v246 = (uint64_t)v172 + v245;
          uint64_t v247 = (_OWORD *)((char *)v170 + v245);
          uint64_t v248 = *(void *)((char *)v170 + v245 + 24);
          swift_bridgeObjectRetain();
          if (v248)
          {
            *(void *)(v246 + 24) = v248;
            (**(void (***)(uint64_t, _OWORD *, uint64_t))(v248 - 8))(v246, v247, v248);
          }
          else
          {
            long long v249 = v247[1];
            *(_OWORD *)uint64_t v246 = *v247;
            *(_OWORD *)(v246 + 16) = v249;
          }
          long long v7 = v361;
          long long v16 = v363;
          (*(void (**)(_OWORD *, void, uint64_t, int *))(v13 + 56))(v365, 0, 1, v12);
        }
        uint64_t v250 = v7[9];
        uint64_t v251 = a1 + v250;
        uint64_t v252 = (uint64_t)v16 + v250;
        long long v253 = *(_OWORD *)(v252 + 16);
        *(_OWORD *)uint64_t v251 = *(_OWORD *)v252;
        *(_OWORD *)(v251 + 16) = v253;
        *(unsigned char *)(v251 + 32) = *(unsigned char *)(v252 + 32);
        uint64_t v254 = v7[10];
        uint64_t v255 = a1 + v254;
        uint64_t v256 = (uint64_t)v16 + v254;
        uint64_t v257 = sub_21FA24C90();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v257 - 8) + 16))(v255, v256, v257);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_21F81A380(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      _s6Charts15AnyChartContentVwxx_0(a1);
      swift_release();
      uint64_t v3 = type metadata accessor for RectanglesRenderer(0);
      uint64_t v4 = a1 + *(int *)(v3 + 32);
      int v5 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v5 - 1) + 48))(v4, 1, v5))
      {
        int v6 = *(unsigned __int8 *)(v4 + 40);
        if (v6 != 255)
        {
          if (v6) {
            _s6Charts15AnyChartContentVwxx_0(v4);
          }
          else {
            swift_release();
          }
        }
        swift_bridgeObjectRelease();
        int v14 = *(unsigned __int8 *)(v4 + 128);
        if (v14 != 255)
        {
          if (v14) {
            swift_release();
          }
          else {
            _s6Charts15AnyChartContentVwxx_0(v4 + 88);
          }
        }
        uint64_t v17 = v4 + v5[11];
        uint64_t v18 = sub_21FA24C90();
        uint64_t v19 = *(void *)(v18 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18)) {
          (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
        }
        uint64_t v20 = v4 + v5[14];
        uint64_t v21 = sub_21FA25910();
        uint64_t v22 = *(void *)(v21 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21)) {
          (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
        }
        swift_release();
        uint64_t v23 = v4 + v5[18];
        if (*(void *)(v23 + 24))
        {
          sub_21F7656A8(*(void *)v23, *(void *)(v23 + 8), *(unsigned char *)(v23 + 16));
          swift_bridgeObjectRelease();
          sub_21F770E38(*(void *)(v23 + 32), *(void *)(v23 + 40), *(unsigned char *)(v23 + 48));
        }
        uint64_t v24 = v4 + v5[19];
        if (*(void *)(v24 + 24))
        {
          sub_21F7656A8(*(void *)v24, *(void *)(v24 + 8), *(unsigned char *)(v24 + 16));
          swift_bridgeObjectRelease();
          sub_21F770E38(*(void *)(v24 + 32), *(void *)(v24 + 40), *(unsigned char *)(v24 + 48));
        }
        uint64_t v25 = v4 + v5[20];
        if (*(void *)(v25 + 24))
        {
          sub_21F7656A8(*(void *)v25, *(void *)(v25 + 8), *(unsigned char *)(v25 + 16));
          swift_bridgeObjectRelease();
          sub_21F770E38(*(void *)(v25 + 32), *(void *)(v25 + 40), *(unsigned char *)(v25 + 48));
        }
        uint64_t v26 = v4 + v5[21];
        if (*(void *)(v26 + 24))
        {
          sub_21F7656A8(*(void *)v26, *(void *)(v26 + 8), *(unsigned char *)(v26 + 16));
          swift_bridgeObjectRelease();
          sub_21F770E38(*(void *)(v26 + 32), *(void *)(v26 + 40), *(unsigned char *)(v26 + 48));
        }
        uint64_t v27 = v4 + v5[24];
        if (*(void *)(v27 + 24))
        {
          sub_21F7656A8(*(void *)v27, *(void *)(v27 + 8), *(unsigned char *)(v27 + 16));
          swift_bridgeObjectRelease();
        }
        uint64_t v28 = v4 + v5[25];
        if (*(void *)(v28 + 24))
        {
          sub_21F7656A8(*(void *)v28, *(void *)(v28 + 8), *(unsigned char *)(v28 + 16));
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        uint64_t v29 = v4 + v5[28];
        if (*(void *)(v29 + 24)) {
          _s6Charts15AnyChartContentVwxx_0(v29);
        }
      }
      uint64_t v30 = a1 + *(int *)(v3 + 40);
      uint64_t v31 = sub_21FA24C90();
      uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8);
      uint64_t result = v32(v30, v31);
      break;
    case 1:
      _s6Charts15AnyChartContentVwxx_0(a1);
      swift_release();
      uint64_t v7 = type metadata accessor for PointsRenderer(0);
      uint64_t v8 = a1 + *(int *)(v7 + 32);
      long long v9 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v9 - 1) + 48))(v8, 1, v9))
      {
        int v10 = *(unsigned __int8 *)(v8 + 40);
        if (v10 != 255)
        {
          if (v10) {
            _s6Charts15AnyChartContentVwxx_0(v8);
          }
          else {
            swift_release();
          }
        }
        swift_bridgeObjectRelease();
        int v15 = *(unsigned __int8 *)(v8 + 128);
        if (v15 != 255)
        {
          if (v15) {
            swift_release();
          }
          else {
            _s6Charts15AnyChartContentVwxx_0(v8 + 88);
          }
        }
        uint64_t v33 = v8 + v9[11];
        uint64_t v34 = sub_21FA24C90();
        uint64_t v35 = *(void *)(v34 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34)) {
          (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
        }
        uint64_t v36 = v8 + v9[14];
        uint64_t v37 = sub_21FA25910();
        uint64_t v38 = *(void *)(v37 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37)) {
          (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v36, v37);
        }
        swift_release();
        uint64_t v39 = v8 + v9[18];
        if (*(void *)(v39 + 24))
        {
          sub_21F7656A8(*(void *)v39, *(void *)(v39 + 8), *(unsigned char *)(v39 + 16));
          swift_bridgeObjectRelease();
          sub_21F770E38(*(void *)(v39 + 32), *(void *)(v39 + 40), *(unsigned char *)(v39 + 48));
        }
        uint64_t v40 = v8 + v9[19];
        if (*(void *)(v40 + 24))
        {
          sub_21F7656A8(*(void *)v40, *(void *)(v40 + 8), *(unsigned char *)(v40 + 16));
          swift_bridgeObjectRelease();
          sub_21F770E38(*(void *)(v40 + 32), *(void *)(v40 + 40), *(unsigned char *)(v40 + 48));
        }
        uint64_t v41 = v8 + v9[20];
        if (*(void *)(v41 + 24))
        {
          sub_21F7656A8(*(void *)v41, *(void *)(v41 + 8), *(unsigned char *)(v41 + 16));
          swift_bridgeObjectRelease();
          sub_21F770E38(*(void *)(v41 + 32), *(void *)(v41 + 40), *(unsigned char *)(v41 + 48));
        }
        uint64_t v42 = v8 + v9[21];
        if (*(void *)(v42 + 24))
        {
          sub_21F7656A8(*(void *)v42, *(void *)(v42 + 8), *(unsigned char *)(v42 + 16));
          swift_bridgeObjectRelease();
          sub_21F770E38(*(void *)(v42 + 32), *(void *)(v42 + 40), *(unsigned char *)(v42 + 48));
        }
        uint64_t v43 = v8 + v9[24];
        if (*(void *)(v43 + 24))
        {
          sub_21F7656A8(*(void *)v43, *(void *)(v43 + 8), *(unsigned char *)(v43 + 16));
          swift_bridgeObjectRelease();
        }
        uint64_t v44 = v8 + v9[25];
        if (*(void *)(v44 + 24))
        {
          sub_21F7656A8(*(void *)v44, *(void *)(v44 + 8), *(unsigned char *)(v44 + 16));
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        uint64_t v45 = v8 + v9[28];
        if (*(void *)(v45 + 24)) {
          _s6Charts15AnyChartContentVwxx_0(v45);
        }
      }
      uint64_t result = a1 + *(int *)(v7 + 36);
      int v46 = *(unsigned __int8 *)(result + 40);
      if (v46 != 255)
      {
        if ((v46 & 1) == 0) {
          goto LABEL_91;
        }
        goto LABEL_14;
      }
      break;
    case 2:
      _s6Charts15AnyChartContentVwxx_0(a1);
      swift_release();
      uint64_t v11 = a1 + *(int *)(type metadata accessor for RulesRenderer(0) + 32);
      long long v12 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((void *)v12 - 1) + 48))(v11, 1, v12);
      if (!result)
      {
        int v13 = *(unsigned __int8 *)(v11 + 40);
        if (v13 != 255)
        {
          if (v13) {
            _s6Charts15AnyChartContentVwxx_0(v11);
          }
          else {
            swift_release();
          }
        }
        swift_bridgeObjectRelease();
        int v16 = *(unsigned __int8 *)(v11 + 128);
        if (v16 != 255)
        {
          if (v16) {
            swift_release();
          }
          else {
            _s6Charts15AnyChartContentVwxx_0(v11 + 88);
          }
        }
        uint64_t v47 = v11 + v12[11];
        uint64_t v48 = sub_21FA24C90();
        uint64_t v49 = *(void *)(v48 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48)) {
          (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v47, v48);
        }
        uint64_t v50 = v11 + v12[14];
        uint64_t v51 = sub_21FA25910();
        uint64_t v52 = *(void *)(v51 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51)) {
          (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, v51);
        }
        swift_release();
        uint64_t v53 = v11 + v12[18];
        if (*(void *)(v53 + 24))
        {
          sub_21F7656A8(*(void *)v53, *(void *)(v53 + 8), *(unsigned char *)(v53 + 16));
          swift_bridgeObjectRelease();
          sub_21F770E38(*(void *)(v53 + 32), *(void *)(v53 + 40), *(unsigned char *)(v53 + 48));
        }
        uint64_t v54 = v11 + v12[19];
        if (*(void *)(v54 + 24))
        {
          sub_21F7656A8(*(void *)v54, *(void *)(v54 + 8), *(unsigned char *)(v54 + 16));
          swift_bridgeObjectRelease();
          sub_21F770E38(*(void *)(v54 + 32), *(void *)(v54 + 40), *(unsigned char *)(v54 + 48));
        }
        uint64_t v55 = v11 + v12[20];
        if (*(void *)(v55 + 24))
        {
          sub_21F7656A8(*(void *)v55, *(void *)(v55 + 8), *(unsigned char *)(v55 + 16));
          swift_bridgeObjectRelease();
          sub_21F770E38(*(void *)(v55 + 32), *(void *)(v55 + 40), *(unsigned char *)(v55 + 48));
        }
        uint64_t v56 = v11 + v12[21];
        if (*(void *)(v56 + 24))
        {
          sub_21F7656A8(*(void *)v56, *(void *)(v56 + 8), *(unsigned char *)(v56 + 16));
          swift_bridgeObjectRelease();
          sub_21F770E38(*(void *)(v56 + 32), *(void *)(v56 + 40), *(unsigned char *)(v56 + 48));
        }
        uint64_t v57 = v11 + v12[24];
        if (*(void *)(v57 + 24))
        {
          sub_21F7656A8(*(void *)v57, *(void *)(v57 + 8), *(unsigned char *)(v57 + 16));
          swift_bridgeObjectRelease();
        }
        uint64_t v58 = v11 + v12[25];
        if (*(void *)(v58 + 24))
        {
          sub_21F7656A8(*(void *)v58, *(void *)(v58 + 8), *(unsigned char *)(v58 + 16));
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        uint64_t result = v11 + v12[28];
        if (*(void *)(result + 24)) {
LABEL_91:
        }
          uint64_t result = _s6Charts15AnyChartContentVwxx_0(result);
      }
      break;
    case 3:
LABEL_14:
      uint64_t result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_21F81ADD4(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      long long v13 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v13;
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      uint64_t v352 = a1;
      uint64_t v353 = type metadata accessor for PointsRenderer(0);
      uint64_t v14 = *(int *)(v353 + 32);
      int v15 = (_OWORD *)(a1 + v14);
      int v16 = (_OWORD *)(a2 + v14);
      uint64_t v17 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      uint64_t v18 = *((void *)v17 - 1);
      uint64_t v19 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v18 + 48);
      swift_retain();
      if (v19(v16, 1, v17))
      {
        uint64_t v20 = sub_21F76CA40(qword_267EE7A88);
        memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
        a1 = v352;
        uint64_t v21 = v353;
      }
      else
      {
        int v35 = *((unsigned __int8 *)v16 + 40);
        if (v35 == 255)
        {
          long long v36 = v16[1];
          *int v15 = *v16;
          v15[1] = v36;
          *(_OWORD *)((char *)v15 + 25) = *(_OWORD *)((char *)v16 + 25);
          uint64_t v37 = v17;
        }
        else
        {
          uint64_t v37 = v17;
          if (v35)
          {
            long long v48 = *(_OWORD *)((char *)v16 + 24);
            *(_OWORD *)((char *)v15 + 24) = v48;
            (**(void (***)(_OWORD *, _OWORD *))(v48 - 8))(v15, v16);
            *((unsigned char *)v15 + 40) = 1;
          }
          else
          {
            *(void *)int v15 = *(void *)v16;
            *((unsigned char *)v15 + 40) = 0;
            swift_retain();
          }
        }
        *((unsigned char *)v15 + 41) = *((unsigned char *)v16 + 41);
        *((void *)v15 + 6) = *((void *)v16 + 6);
        *((void *)v15 + 7) = *((void *)v16 + 7);
        uint64_t v49 = *((void *)v16 + 9);
        *((void *)v15 + 8) = *((void *)v16 + 8);
        *((void *)v15 + 9) = v49;
        *((void *)v15 + 10) = *((void *)v16 + 10);
        int v50 = *((unsigned __int8 *)v16 + 128);
        swift_bridgeObjectRetain();
        if (v50 == 255)
        {
          long long v51 = *(_OWORD *)((char *)v16 + 104);
          *(_OWORD *)((char *)v15 + 88) = *(_OWORD *)((char *)v16 + 88);
          *(_OWORD *)((char *)v15 + 104) = v51;
          *(_OWORD *)((char *)v15 + 113) = *(_OWORD *)((char *)v16 + 113);
        }
        else if (v50)
        {
          *((void *)v15 + 11) = *((void *)v16 + 11);
          v15[6] = v16[6];
          *((unsigned char *)v15 + 128) = 1;
          swift_retain();
        }
        else
        {
          long long v52 = v16[7];
          v15[7] = v52;
          (**(void (***)(uint64_t, uint64_t))(v52 - 8))((uint64_t)v15 + 88, (uint64_t)v16 + 88);
          *((unsigned char *)v15 + 128) = 0;
        }
        *(_OWORD *)((char *)v15 + 136) = *(_OWORD *)((char *)v16 + 136);
        *((unsigned char *)v15 + 152) = *((unsigned char *)v16 + 152);
        *((void *)v15 + 20) = *((void *)v16 + 20);
        *((unsigned char *)v15 + 168) = *((unsigned char *)v16 + 168);
        long long v247 = v16[12];
        v15[11] = v16[11];
        v15[12] = v247;
        *((unsigned char *)v15 + 208) = *((unsigned char *)v16 + 208);
        uint64_t v248 = v37[11];
        long long v249 = (char *)v15 + v248;
        uint64_t v250 = (char *)v16 + v248;
        uint64_t v251 = sub_21FA24C90();
        uint64_t v252 = *(void *)(v251 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v252 + 48))(v250, 1, v251))
        {
          uint64_t v253 = sub_21F76CA40(&qword_26AD47C20);
          memcpy(v249, v250, *(void *)(*(void *)(v253 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v252 + 16))(v249, v250, v251);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v252 + 56))(v249, 0, 1, v251);
        }
        uint64_t v254 = v37[12];
        uint64_t v255 = (char *)v15 + v254;
        uint64_t v256 = (char *)v16 + v254;
        *(void *)uint64_t v255 = *(void *)v256;
        v255[8] = v256[8];
        *(void *)((char *)v15 + v37[13]) = *(void *)((char *)v16 + v37[13]);
        uint64_t v257 = v37[14];
        long long v258 = (char *)v15 + v257;
        uint64_t v259 = (char *)v16 + v257;
        uint64_t v260 = sub_21FA25910();
        uint64_t v261 = *(void *)(v260 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v261 + 48))(v259, 1, v260))
        {
          uint64_t v262 = sub_21F76CA40(&qword_26AD4A3B8);
          memcpy(v258, v259, *(void *)(*(void *)(v262 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v261 + 16))(v258, v259, v260);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v261 + 56))(v258, 0, 1, v260);
        }
        uint64_t v263 = v37[15];
        uint64_t v264 = (char *)v15 + v263;
        uint64_t v265 = (char *)v16 + v263;
        *(void *)uint64_t v264 = *(void *)v265;
        *((_WORD *)v264 + 4) = *((_WORD *)v265 + 4);
        *(void *)((char *)v15 + v37[16]) = *(void *)((char *)v16 + v37[16]);
        *(void *)((char *)v15 + v37[17]) = *(void *)((char *)v16 + v37[17]);
        uint64_t v266 = v37[18];
        uint64_t v267 = (char *)v15 + v266;
        uint64_t v268 = (char *)v16 + v266;
        uint64_t v269 = *(void *)((char *)v16 + v266 + 24);
        swift_retain();
        if (v269)
        {
          uint64_t v270 = *(void *)v268;
          uint64_t v271 = *((void *)v268 + 1);
          char v272 = v268[16];
          sub_21F7652C0(*(void *)v268, v271, v272);
          *(void *)uint64_t v267 = v270;
          *((void *)v267 + 1) = v271;
          v267[16] = v272;
          uint64_t v273 = *((void *)v268 + 4);
          *((void *)v267 + 3) = *((void *)v268 + 3);
          uint64_t v274 = *((void *)v268 + 5);
          char v275 = v268[48];
          swift_bridgeObjectRetain();
          sub_21F770E44(v273, v274, v275);
          *((void *)v267 + 4) = v273;
          *((void *)v267 + 5) = v274;
          v267[48] = v275;
          *(_OWORD *)(v267 + 56) = *(_OWORD *)(v268 + 56);
        }
        else
        {
          long long v276 = *((_OWORD *)v268 + 3);
          *((_OWORD *)v267 + 2) = *((_OWORD *)v268 + 2);
          *((_OWORD *)v267 + 3) = v276;
          *((void *)v267 + 8) = *((void *)v268 + 8);
          long long v277 = *((_OWORD *)v268 + 1);
          *(_OWORD *)uint64_t v267 = *(_OWORD *)v268;
          *((_OWORD *)v267 + 1) = v277;
        }
        uint64_t v278 = v17[19];
        uint64_t v279 = (char *)v15 + v278;
        uint64_t v280 = (char *)v16 + v278;
        if (*(void *)((char *)v16 + v278 + 24))
        {
          uint64_t v281 = *(void *)v280;
          uint64_t v282 = *((void *)v280 + 1);
          char v283 = v280[16];
          sub_21F7652C0(*(void *)v280, v282, v283);
          *(void *)uint64_t v279 = v281;
          *((void *)v279 + 1) = v282;
          v279[16] = v283;
          uint64_t v284 = *((void *)v280 + 4);
          *((void *)v279 + 3) = *((void *)v280 + 3);
          uint64_t v285 = *((void *)v280 + 5);
          char v286 = v280[48];
          swift_bridgeObjectRetain();
          sub_21F770E44(v284, v285, v286);
          *((void *)v279 + 4) = v284;
          *((void *)v279 + 5) = v285;
          v279[48] = v286;
          *(_OWORD *)(v279 + 56) = *(_OWORD *)(v280 + 56);
        }
        else
        {
          long long v287 = *((_OWORD *)v280 + 3);
          *((_OWORD *)v279 + 2) = *((_OWORD *)v280 + 2);
          *((_OWORD *)v279 + 3) = v287;
          *((void *)v279 + 8) = *((void *)v280 + 8);
          long long v288 = *((_OWORD *)v280 + 1);
          *(_OWORD *)uint64_t v279 = *(_OWORD *)v280;
          *((_OWORD *)v279 + 1) = v288;
        }
        uint64_t v289 = v17[20];
        uint64_t v290 = (char *)v15 + v289;
        uint64_t v291 = (char *)v16 + v289;
        if (*(void *)((char *)v16 + v289 + 24))
        {
          uint64_t v292 = *(void *)v291;
          uint64_t v293 = *((void *)v291 + 1);
          char v294 = v291[16];
          sub_21F7652C0(*(void *)v291, v293, v294);
          *(void *)uint64_t v290 = v292;
          *((void *)v290 + 1) = v293;
          v290[16] = v294;
          uint64_t v295 = *((void *)v291 + 4);
          *((void *)v290 + 3) = *((void *)v291 + 3);
          uint64_t v296 = *((void *)v291 + 5);
          char v297 = v291[48];
          swift_bridgeObjectRetain();
          sub_21F770E44(v295, v296, v297);
          *((void *)v290 + 4) = v295;
          *((void *)v290 + 5) = v296;
          v290[48] = v297;
          *(_OWORD *)(v290 + 56) = *(_OWORD *)(v291 + 56);
        }
        else
        {
          long long v298 = *((_OWORD *)v291 + 3);
          *((_OWORD *)v290 + 2) = *((_OWORD *)v291 + 2);
          *((_OWORD *)v290 + 3) = v298;
          *((void *)v290 + 8) = *((void *)v291 + 8);
          long long v299 = *((_OWORD *)v291 + 1);
          *(_OWORD *)uint64_t v290 = *(_OWORD *)v291;
          *((_OWORD *)v290 + 1) = v299;
        }
        uint64_t v300 = v17[21];
        uint64_t v301 = (char *)v15 + v300;
        uint64_t v302 = (char *)v16 + v300;
        if (*(void *)((char *)v16 + v300 + 24))
        {
          uint64_t v303 = *(void *)v302;
          uint64_t v304 = *((void *)v302 + 1);
          char v305 = v302[16];
          sub_21F7652C0(*(void *)v302, v304, v305);
          *(void *)uint64_t v301 = v303;
          *((void *)v301 + 1) = v304;
          v301[16] = v305;
          uint64_t v306 = *((void *)v302 + 4);
          *((void *)v301 + 3) = *((void *)v302 + 3);
          uint64_t v307 = *((void *)v302 + 5);
          char v308 = v302[48];
          swift_bridgeObjectRetain();
          sub_21F770E44(v306, v307, v308);
          *((void *)v301 + 4) = v306;
          *((void *)v301 + 5) = v307;
          v301[48] = v308;
          *(_OWORD *)(v301 + 56) = *(_OWORD *)(v302 + 56);
        }
        else
        {
          long long v309 = *((_OWORD *)v302 + 3);
          *((_OWORD *)v301 + 2) = *((_OWORD *)v302 + 2);
          *((_OWORD *)v301 + 3) = v309;
          *((void *)v301 + 8) = *((void *)v302 + 8);
          long long v310 = *((_OWORD *)v302 + 1);
          *(_OWORD *)uint64_t v301 = *(_OWORD *)v302;
          *((_OWORD *)v301 + 1) = v310;
        }
        uint64_t v311 = v17[22];
        uint64_t v312 = (char *)v15 + v311;
        uint64_t v313 = (char *)v16 + v311;
        *(_OWORD *)uint64_t v312 = *(_OWORD *)v313;
        *((void *)v312 + 2) = *((void *)v313 + 2);
        uint64_t v314 = v17[23];
        uint64_t v315 = (char *)v15 + v314;
        char v316 = (char *)v16 + v314;
        *(_OWORD *)uint64_t v315 = *(_OWORD *)v316;
        *((void *)v315 + 2) = *((void *)v316 + 2);
        uint64_t v317 = v17[24];
        uint64_t v318 = (char *)v15 + v317;
        char v319 = (char *)v16 + v317;
        if (*(void *)((char *)v16 + v317 + 24))
        {
          uint64_t v320 = *(void *)v319;
          uint64_t v321 = *((void *)v319 + 1);
          char v322 = v319[16];
          sub_21F7652C0(*(void *)v319, v321, v322);
          *(void *)uint64_t v318 = v320;
          *((void *)v318 + 1) = v321;
          v318[16] = v322;
          *((void *)v318 + 3) = *((void *)v319 + 3);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v323 = *((_OWORD *)v319 + 1);
          *(_OWORD *)uint64_t v318 = *(_OWORD *)v319;
          *((_OWORD *)v318 + 1) = v323;
        }
        uint64_t v324 = v17[25];
        uint64_t v325 = (char *)v15 + v324;
        uint64_t v326 = (char *)v16 + v324;
        if (*(void *)((char *)v16 + v324 + 24))
        {
          uint64_t v327 = *(void *)v326;
          uint64_t v328 = *((void *)v326 + 1);
          char v329 = v326[16];
          sub_21F7652C0(*(void *)v326, v328, v329);
          *(void *)uint64_t v325 = v327;
          *((void *)v325 + 1) = v328;
          v325[16] = v329;
          *((void *)v325 + 3) = *((void *)v326 + 3);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v330 = *((_OWORD *)v326 + 1);
          *(_OWORD *)uint64_t v325 = *(_OWORD *)v326;
          *((_OWORD *)v325 + 1) = v330;
        }
        uint64_t v331 = v17;
        a1 = v352;
        uint64_t v332 = v331[26];
        char v333 = (void *)((char *)v15 + v332);
        long long v334 = (void *)((char *)v16 + v332);
        uint64_t v335 = v334[1];
        void *v333 = *v334;
        v333[1] = v335;
        *((unsigned char *)v15 + v331[27]) = *((unsigned char *)v16 + v331[27]);
        uint64_t v336 = v331[28];
        uint64_t v337 = (char *)v15 + v336;
        uint64_t v338 = (char *)v16 + v336;
        uint64_t v339 = *((void *)v338 + 3);
        swift_bridgeObjectRetain();
        if (v339)
        {
          *((void *)v337 + 3) = v339;
          (**(void (***)(char *, char *, uint64_t))(v339 - 8))(v337, v338, v339);
        }
        else
        {
          long long v340 = *((_OWORD *)v338 + 1);
          *(_OWORD *)uint64_t v337 = *(_OWORD *)v338;
          *((_OWORD *)v337 + 1) = v340;
        }
        uint64_t v21 = v353;
        (*(void (**)(_OWORD *, void, uint64_t, int *))(v18 + 56))(v15, 0, 1, v331);
      }
      uint64_t v341 = *(int *)(v21 + 36);
      uint64_t v342 = a1 + v341;
      uint64_t v343 = (_OWORD *)(a2 + v341);
      int v344 = *(unsigned __int8 *)(a2 + v341 + 40);
      if (v344 == 255)
      {
        long long v345 = v343[1];
        *(_OWORD *)uint64_t v342 = *v343;
        *(_OWORD *)(v342 + 16) = v345;
        *(_OWORD *)(v342 + 25) = *(_OWORD *)((char *)v343 + 25);
      }
      else if (v344)
      {
        *(void *)uint64_t v342 = *(void *)v343;
        *(_OWORD *)(v342 + 8) = *(_OWORD *)((char *)v343 + 8);
        *(unsigned char *)(v342 + 40) = 1;
        swift_retain();
      }
      else
      {
        long long v346 = *(_OWORD *)((char *)v343 + 24);
        *(_OWORD *)(v342 + 24) = v346;
        (**(void (***)(uint64_t))(v346 - 8))(v342);
        *(unsigned char *)(v342 + 40) = 0;
      }
      uint64_t v347 = *(int *)(v21 + 40);
      uint64_t v348 = a1 + v347;
      uint64_t v349 = a2 + v347;
      *(_OWORD *)uint64_t v348 = *(_OWORD *)v349;
      *(unsigned char *)(v348 + 16) = *(unsigned char *)(v349 + 16);
      break;
    case 2u:
      long long v22 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v22;
      (**(void (***)(uint64_t, uint64_t))(v22 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      uint64_t v23 = *(int *)(type metadata accessor for RulesRenderer(0) + 32);
      uint64_t v24 = (_OWORD *)(a1 + v23);
      uint64_t v25 = (_OWORD *)(a2 + v23);
      uint64_t v26 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      uint64_t v27 = *((void *)v26 - 1);
      uint64_t v28 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v27 + 48);
      swift_retain();
      if (v28(v25, 1, v26))
      {
        uint64_t v29 = sub_21F76CA40(qword_267EE7A88);
        memcpy(v24, v25, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        int v30 = *((unsigned __int8 *)v25 + 40);
        if (v30 == 255)
        {
          long long v31 = v25[1];
          *uint64_t v24 = *v25;
          v24[1] = v31;
          *(_OWORD *)((char *)v24 + 25) = *(_OWORD *)((char *)v25 + 25);
        }
        else if (v30)
        {
          long long v38 = *(_OWORD *)((char *)v25 + 24);
          *(_OWORD *)((char *)v24 + 24) = v38;
          (**(void (***)(_OWORD *, _OWORD *))(v38 - 8))(v24, v25);
          *((unsigned char *)v24 + 40) = 1;
        }
        else
        {
          *(void *)uint64_t v24 = *(void *)v25;
          *((unsigned char *)v24 + 40) = 0;
          swift_retain();
        }
        *((unsigned char *)v24 + 41) = *((unsigned char *)v25 + 41);
        *((void *)v24 + 6) = *((void *)v25 + 6);
        *((void *)v24 + 7) = *((void *)v25 + 7);
        uint64_t v39 = *((void *)v25 + 9);
        *((void *)v24 + 8) = *((void *)v25 + 8);
        *((void *)v24 + 9) = v39;
        *((void *)v24 + 10) = *((void *)v25 + 10);
        int v40 = *((unsigned __int8 *)v25 + 128);
        swift_bridgeObjectRetain();
        if (v40 == 255)
        {
          long long v41 = *(_OWORD *)((char *)v25 + 104);
          *(_OWORD *)((char *)v24 + 88) = *(_OWORD *)((char *)v25 + 88);
          *(_OWORD *)((char *)v24 + 104) = v41;
          *(_OWORD *)((char *)v24 + 113) = *(_OWORD *)((char *)v25 + 113);
        }
        else if (v40)
        {
          *((void *)v24 + 11) = *((void *)v25 + 11);
          v24[6] = v25[6];
          *((unsigned char *)v24 + 128) = 1;
          swift_retain();
        }
        else
        {
          long long v42 = v25[7];
          v24[7] = v42;
          (**(void (***)(uint64_t, uint64_t))(v42 - 8))((uint64_t)v24 + 88, (uint64_t)v25 + 88);
          *((unsigned char *)v24 + 128) = 0;
        }
        *(_OWORD *)((char *)v24 + 136) = *(_OWORD *)((char *)v25 + 136);
        *((unsigned char *)v24 + 152) = *((unsigned char *)v25 + 152);
        *((void *)v24 + 20) = *((void *)v25 + 20);
        *((unsigned char *)v24 + 168) = *((unsigned char *)v25 + 168);
        long long v53 = v25[12];
        v24[11] = v25[11];
        v24[12] = v53;
        *((unsigned char *)v24 + 208) = *((unsigned char *)v25 + 208);
        uint64_t v54 = v26[11];
        uint64_t v55 = (char *)v24 + v54;
        uint64_t v56 = (char *)v25 + v54;
        uint64_t v57 = sub_21FA24C90();
        uint64_t v58 = *(void *)(v57 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
        {
          uint64_t v59 = sub_21F76CA40(&qword_26AD47C20);
          memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v55, v56, v57);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
        }
        uint64_t v60 = v26[12];
        long long v61 = (char *)v24 + v60;
        long long v62 = (char *)v25 + v60;
        *(void *)long long v61 = *(void *)v62;
        v61[8] = v62[8];
        *(void *)((char *)v24 + v26[13]) = *(void *)((char *)v25 + v26[13]);
        uint64_t v63 = v26[14];
        unint64_t v64 = (char *)v24 + v63;
        uint64_t v65 = (char *)v25 + v63;
        uint64_t v66 = sub_21FA25910();
        uint64_t v67 = *(void *)(v66 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
        {
          uint64_t v68 = sub_21F76CA40(&qword_26AD4A3B8);
          memcpy(v64, v65, *(void *)(*(void *)(v68 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v64, v65, v66);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
        }
        uint64_t v69 = v26[15];
        uint64_t v70 = (char *)v24 + v69;
        uint64_t v71 = (char *)v25 + v69;
        *(void *)uint64_t v70 = *(void *)v71;
        *((_WORD *)v70 + 4) = *((_WORD *)v71 + 4);
        *(void *)((char *)v24 + v26[16]) = *(void *)((char *)v25 + v26[16]);
        *(void *)((char *)v24 + v26[17]) = *(void *)((char *)v25 + v26[17]);
        uint64_t v72 = v26[18];
        uint64_t v73 = (char *)v24 + v72;
        long long v74 = (char *)v25 + v72;
        uint64_t v75 = *(void *)((char *)v25 + v72 + 24);
        swift_retain();
        if (v75)
        {
          uint64_t v76 = *(void *)v74;
          uint64_t v77 = *((void *)v74 + 1);
          char v78 = v74[16];
          sub_21F7652C0(*(void *)v74, v77, v78);
          *(void *)uint64_t v73 = v76;
          *((void *)v73 + 1) = v77;
          v73[16] = v78;
          uint64_t v79 = *((void *)v74 + 4);
          *((void *)v73 + 3) = *((void *)v74 + 3);
          uint64_t v80 = *((void *)v74 + 5);
          char v81 = v74[48];
          swift_bridgeObjectRetain();
          sub_21F770E44(v79, v80, v81);
          *((void *)v73 + 4) = v79;
          *((void *)v73 + 5) = v80;
          v73[48] = v81;
          *(_OWORD *)(v73 + 56) = *(_OWORD *)(v74 + 56);
        }
        else
        {
          long long v82 = *((_OWORD *)v74 + 3);
          *((_OWORD *)v73 + 2) = *((_OWORD *)v74 + 2);
          *((_OWORD *)v73 + 3) = v82;
          *((void *)v73 + 8) = *((void *)v74 + 8);
          long long v83 = *((_OWORD *)v74 + 1);
          *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
          *((_OWORD *)v73 + 1) = v83;
        }
        uint64_t v84 = v26[19];
        uint64_t v85 = (char *)v24 + v84;
        uint64_t v86 = (char *)v25 + v84;
        if (*(void *)((char *)v25 + v84 + 24))
        {
          uint64_t v87 = *(void *)v86;
          uint64_t v88 = *((void *)v86 + 1);
          char v89 = v86[16];
          sub_21F7652C0(*(void *)v86, v88, v89);
          *(void *)uint64_t v85 = v87;
          *((void *)v85 + 1) = v88;
          unsigned char v85[16] = v89;
          uint64_t v90 = *((void *)v86 + 4);
          *((void *)v85 + 3) = *((void *)v86 + 3);
          uint64_t v91 = *((void *)v86 + 5);
          char v92 = v86[48];
          swift_bridgeObjectRetain();
          sub_21F770E44(v90, v91, v92);
          *((void *)v85 + 4) = v90;
          *((void *)v85 + 5) = v91;
          v85[48] = v92;
          *(_OWORD *)(v85 + 56) = *(_OWORD *)(v86 + 56);
        }
        else
        {
          long long v93 = *((_OWORD *)v86 + 3);
          *((_OWORD *)v85 + 2) = *((_OWORD *)v86 + 2);
          *((_OWORD *)v85 + 3) = v93;
          *((void *)v85 + 8) = *((void *)v86 + 8);
          long long v94 = *((_OWORD *)v86 + 1);
          *(_OWORD *)uint64_t v85 = *(_OWORD *)v86;
          *((_OWORD *)v85 + 1) = v94;
        }
        uint64_t v95 = v26[20];
        uint64_t v96 = (char *)v24 + v95;
        uint64_t v97 = (char *)v25 + v95;
        if (*(void *)((char *)v25 + v95 + 24))
        {
          uint64_t v98 = *(void *)v97;
          uint64_t v99 = *((void *)v97 + 1);
          char v100 = v97[16];
          sub_21F7652C0(*(void *)v97, v99, v100);
          *(void *)uint64_t v96 = v98;
          *((void *)v96 + 1) = v99;
          v96[16] = v100;
          uint64_t v101 = *((void *)v97 + 4);
          *((void *)v96 + 3) = *((void *)v97 + 3);
          uint64_t v102 = *((void *)v97 + 5);
          char v103 = v97[48];
          swift_bridgeObjectRetain();
          sub_21F770E44(v101, v102, v103);
          *((void *)v96 + 4) = v101;
          *((void *)v96 + 5) = v102;
          v96[48] = v103;
          *(_OWORD *)(v96 + 56) = *(_OWORD *)(v97 + 56);
        }
        else
        {
          long long v104 = *((_OWORD *)v97 + 3);
          *((_OWORD *)v96 + 2) = *((_OWORD *)v97 + 2);
          *((_OWORD *)v96 + 3) = v104;
          *((void *)v96 + 8) = *((void *)v97 + 8);
          long long v105 = *((_OWORD *)v97 + 1);
          *(_OWORD *)uint64_t v96 = *(_OWORD *)v97;
          *((_OWORD *)v96 + 1) = v105;
        }
        uint64_t v106 = v26[21];
        uint64_t v107 = (char *)v24 + v106;
        uint64_t v108 = (char *)v25 + v106;
        if (*(void *)((char *)v25 + v106 + 24))
        {
          uint64_t v109 = *(void *)v108;
          uint64_t v110 = *((void *)v108 + 1);
          char v111 = v108[16];
          sub_21F7652C0(*(void *)v108, v110, v111);
          *(void *)uint64_t v107 = v109;
          *((void *)v107 + 1) = v110;
          v107[16] = v111;
          uint64_t v112 = *((void *)v108 + 4);
          *((void *)v107 + 3) = *((void *)v108 + 3);
          uint64_t v113 = *((void *)v108 + 5);
          char v114 = v108[48];
          swift_bridgeObjectRetain();
          sub_21F770E44(v112, v113, v114);
          *((void *)v107 + 4) = v112;
          *((void *)v107 + 5) = v113;
          v107[48] = v114;
          *(_OWORD *)(v107 + 56) = *(_OWORD *)(v108 + 56);
        }
        else
        {
          long long v115 = *((_OWORD *)v108 + 3);
          *((_OWORD *)v107 + 2) = *((_OWORD *)v108 + 2);
          *((_OWORD *)v107 + 3) = v115;
          *((void *)v107 + 8) = *((void *)v108 + 8);
          long long v116 = *((_OWORD *)v108 + 1);
          *(_OWORD *)uint64_t v107 = *(_OWORD *)v108;
          *((_OWORD *)v107 + 1) = v116;
        }
        uint64_t v117 = v26[22];
        uint64_t v118 = (char *)v24 + v117;
        uint64_t v119 = (char *)v25 + v117;
        *(_OWORD *)uint64_t v118 = *(_OWORD *)v119;
        *((void *)v118 + 2) = *((void *)v119 + 2);
        uint64_t v120 = v26[23];
        uint64_t v121 = (char *)v24 + v120;
        uint64_t v122 = (char *)v25 + v120;
        *(_OWORD *)uint64_t v121 = *(_OWORD *)v122;
        *((void *)v121 + 2) = *((void *)v122 + 2);
        uint64_t v123 = v26[24];
        long long v124 = (char *)v24 + v123;
        long long v125 = (char *)v25 + v123;
        if (*(void *)((char *)v25 + v123 + 24))
        {
          uint64_t v126 = *(void *)v125;
          uint64_t v127 = *((void *)v125 + 1);
          char v128 = v125[16];
          sub_21F7652C0(*(void *)v125, v127, v128);
          *(void *)long long v124 = v126;
          *((void *)v124 + 1) = v127;
          v124[16] = v128;
          *((void *)v124 + 3) = *((void *)v125 + 3);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v129 = *((_OWORD *)v125 + 1);
          *(_OWORD *)long long v124 = *(_OWORD *)v125;
          *((_OWORD *)v124 + 1) = v129;
        }
        uint64_t v130 = v26[25];
        uint64_t v131 = (char *)v24 + v130;
        uint64_t v132 = (char *)v25 + v130;
        if (*(void *)((char *)v25 + v130 + 24))
        {
          uint64_t v133 = *(void *)v132;
          uint64_t v134 = *((void *)v132 + 1);
          char v135 = v132[16];
          sub_21F7652C0(*(void *)v132, v134, v135);
          *(void *)uint64_t v131 = v133;
          *((void *)v131 + 1) = v134;
          v131[16] = v135;
          *((void *)v131 + 3) = *((void *)v132 + 3);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v136 = *((_OWORD *)v132 + 1);
          *(_OWORD *)uint64_t v131 = *(_OWORD *)v132;
          *((_OWORD *)v131 + 1) = v136;
        }
        uint64_t v137 = v26[26];
        long long v138 = (void *)((char *)v24 + v137);
        uint64_t v139 = (void *)((char *)v25 + v137);
        uint64_t v140 = v139[1];
        *long long v138 = *v139;
        v138[1] = v140;
        *((unsigned char *)v24 + v26[27]) = *((unsigned char *)v25 + v26[27]);
        uint64_t v141 = v26[28];
        uint64_t v142 = (char *)v24 + v141;
        uint64_t v143 = (char *)v25 + v141;
        uint64_t v144 = *((void *)v143 + 3);
        swift_bridgeObjectRetain();
        if (v144)
        {
          *((void *)v142 + 3) = v144;
          (**(void (***)(char *, char *, uint64_t))(v144 - 8))(v142, v143, v144);
        }
        else
        {
          long long v145 = *((_OWORD *)v143 + 1);
          *(_OWORD *)uint64_t v142 = *(_OWORD *)v143;
          *((_OWORD *)v142 + 1) = v145;
        }
        (*(void (**)(_OWORD *, void, uint64_t, int *))(v27 + 56))(v24, 0, 1, v26);
      }
      break;
    case 3u:
      *(void *)a1 = *(void *)a2;
      swift_retain();
      break;
    default:
      long long v4 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      uint64_t v351 = type metadata accessor for RectanglesRenderer(0);
      uint64_t v5 = *(int *)(v351 + 32);
      int v6 = (_OWORD *)(a1 + v5);
      uint64_t v7 = (_OWORD *)(a2 + v5);
      uint64_t v8 = type metadata accessor for ChartContentRenderContext.Environment(0);
      uint64_t v9 = *(void *)(v8 - 8);
      int v10 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v9 + 48);
      swift_retain();
      if (v10(v7, 1, v8))
      {
        uint64_t v11 = sub_21F76CA40(qword_267EE7A88);
        memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
        uint64_t v12 = v351;
      }
      else
      {
        int v354 = (int *)v8;
        int v32 = *((unsigned __int8 *)v7 + 40);
        if (v32 == 255)
        {
          long long v33 = v7[1];
          *int v6 = *v7;
          v6[1] = v33;
          *(_OWORD *)((char *)v6 + 25) = *(_OWORD *)((char *)v7 + 25);
          uint64_t v34 = (int *)v8;
        }
        else
        {
          uint64_t v34 = (int *)v8;
          if (v32)
          {
            long long v43 = *(_OWORD *)((char *)v7 + 24);
            *(_OWORD *)((char *)v6 + 24) = v43;
            (**(void (***)(_OWORD *, _OWORD *))(v43 - 8))(v6, v7);
            *((unsigned char *)v6 + 40) = 1;
          }
          else
          {
            *(void *)int v6 = *(void *)v7;
            *((unsigned char *)v6 + 40) = 0;
            swift_retain();
          }
        }
        *((unsigned char *)v6 + 41) = *((unsigned char *)v7 + 41);
        *((void *)v6 + 6) = *((void *)v7 + 6);
        *((void *)v6 + 7) = *((void *)v7 + 7);
        uint64_t v44 = *((void *)v7 + 9);
        *((void *)v6 + 8) = *((void *)v7 + 8);
        *((void *)v6 + 9) = v44;
        *((void *)v6 + 10) = *((void *)v7 + 10);
        int v45 = *((unsigned __int8 *)v7 + 128);
        swift_bridgeObjectRetain();
        if (v45 == 255)
        {
          long long v46 = *(_OWORD *)((char *)v7 + 104);
          *(_OWORD *)((char *)v6 + 88) = *(_OWORD *)((char *)v7 + 88);
          *(_OWORD *)((char *)v6 + 104) = v46;
          *(_OWORD *)((char *)v6 + 113) = *(_OWORD *)((char *)v7 + 113);
        }
        else if (v45)
        {
          *((void *)v6 + 11) = *((void *)v7 + 11);
          v6[6] = v7[6];
          *((unsigned char *)v6 + 128) = 1;
          swift_retain();
        }
        else
        {
          long long v47 = v7[7];
          v6[7] = v47;
          (**(void (***)(uint64_t, uint64_t))(v47 - 8))((uint64_t)v6 + 88, (uint64_t)v7 + 88);
          *((unsigned char *)v6 + 128) = 0;
        }
        *(_OWORD *)((char *)v6 + 136) = *(_OWORD *)((char *)v7 + 136);
        *((unsigned char *)v6 + 152) = *((unsigned char *)v7 + 152);
        *((void *)v6 + 20) = *((void *)v7 + 20);
        *((unsigned char *)v6 + 168) = *((unsigned char *)v7 + 168);
        long long v146 = v7[12];
        v6[11] = v7[11];
        v6[12] = v146;
        *((unsigned char *)v6 + 208) = *((unsigned char *)v7 + 208);
        uint64_t v147 = v34[11];
        char v148 = (char *)v6 + v147;
        uint64_t v149 = (char *)v7 + v147;
        uint64_t v150 = sub_21FA24C90();
        uint64_t v151 = *(void *)(v150 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v151 + 48))(v149, 1, v150))
        {
          uint64_t v152 = sub_21F76CA40(&qword_26AD47C20);
          memcpy(v148, v149, *(void *)(*(void *)(v152 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v151 + 16))(v148, v149, v150);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v151 + 56))(v148, 0, 1, v150);
        }
        uint64_t v153 = v34[12];
        long long v154 = (char *)v6 + v153;
        long long v155 = (char *)v7 + v153;
        *(void *)long long v154 = *(void *)v155;
        v154[8] = v155[8];
        *(void *)((char *)v6 + v34[13]) = *(void *)((char *)v7 + v34[13]);
        uint64_t v156 = v34[14];
        char v157 = (char *)v6 + v156;
        unint64_t v158 = (char *)v7 + v156;
        uint64_t v159 = sub_21FA25910();
        uint64_t v160 = *(void *)(v159 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v160 + 48))(v158, 1, v159))
        {
          uint64_t v161 = sub_21F76CA40(&qword_26AD4A3B8);
          memcpy(v157, v158, *(void *)(*(void *)(v161 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v160 + 16))(v157, v158, v159);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v160 + 56))(v157, 0, 1, v159);
        }
        uint64_t v162 = v34[15];
        char v163 = (char *)v6 + v162;
        uint64_t v164 = (char *)v7 + v162;
        *(void *)char v163 = *(void *)v164;
        *((_WORD *)v163 + 4) = *((_WORD *)v164 + 4);
        *(void *)((char *)v6 + v34[16]) = *(void *)((char *)v7 + v34[16]);
        *(void *)((char *)v6 + v34[17]) = *(void *)((char *)v7 + v34[17]);
        uint64_t v165 = v34[18];
        uint64_t v166 = (char *)v6 + v165;
        uint64_t v167 = (char *)v7 + v165;
        uint64_t v168 = *(void *)((char *)v7 + v165 + 24);
        swift_retain();
        if (v168)
        {
          uint64_t v169 = *(void *)v167;
          uint64_t v170 = *((void *)v167 + 1);
          char v171 = v167[16];
          sub_21F7652C0(*(void *)v167, v170, v171);
          *(void *)uint64_t v166 = v169;
          *((void *)v166 + 1) = v170;
          v166[16] = v171;
          uint64_t v172 = *((void *)v167 + 4);
          *((void *)v166 + 3) = *((void *)v167 + 3);
          uint64_t v173 = *((void *)v167 + 5);
          char v174 = v167[48];
          swift_bridgeObjectRetain();
          sub_21F770E44(v172, v173, v174);
          *((void *)v166 + 4) = v172;
          *((void *)v166 + 5) = v173;
          v166[48] = v174;
          *(_OWORD *)(v166 + 56) = *(_OWORD *)(v167 + 56);
        }
        else
        {
          long long v175 = *((_OWORD *)v167 + 3);
          *((_OWORD *)v166 + 2) = *((_OWORD *)v167 + 2);
          *((_OWORD *)v166 + 3) = v175;
          *((void *)v166 + 8) = *((void *)v167 + 8);
          long long v176 = *((_OWORD *)v167 + 1);
          *(_OWORD *)uint64_t v166 = *(_OWORD *)v167;
          *((_OWORD *)v166 + 1) = v176;
        }
        uint64_t v177 = v354[19];
        uint64_t v178 = (char *)v6 + v177;
        uint64_t v179 = (char *)v7 + v177;
        if (*(void *)((char *)v7 + v177 + 24))
        {
          uint64_t v180 = *(void *)v179;
          uint64_t v181 = *((void *)v179 + 1);
          char v182 = v179[16];
          sub_21F7652C0(*(void *)v179, v181, v182);
          *(void *)uint64_t v178 = v180;
          *((void *)v178 + 1) = v181;
          v178[16] = v182;
          uint64_t v183 = *((void *)v179 + 4);
          *((void *)v178 + 3) = *((void *)v179 + 3);
          uint64_t v184 = *((void *)v179 + 5);
          char v185 = v179[48];
          swift_bridgeObjectRetain();
          sub_21F770E44(v183, v184, v185);
          *((void *)v178 + 4) = v183;
          *((void *)v178 + 5) = v184;
          v178[48] = v185;
          *(_OWORD *)(v178 + 56) = *(_OWORD *)(v179 + 56);
        }
        else
        {
          long long v186 = *((_OWORD *)v179 + 3);
          *((_OWORD *)v178 + 2) = *((_OWORD *)v179 + 2);
          *((_OWORD *)v178 + 3) = v186;
          *((void *)v178 + 8) = *((void *)v179 + 8);
          long long v187 = *((_OWORD *)v179 + 1);
          *(_OWORD *)uint64_t v178 = *(_OWORD *)v179;
          *((_OWORD *)v178 + 1) = v187;
        }
        uint64_t v188 = v354[20];
        uint64_t v189 = (char *)v6 + v188;
        uint64_t v190 = (char *)v7 + v188;
        if (*(void *)((char *)v7 + v188 + 24))
        {
          uint64_t v191 = *(void *)v190;
          uint64_t v192 = *((void *)v190 + 1);
          char v193 = v190[16];
          sub_21F7652C0(*(void *)v190, v192, v193);
          *(void *)uint64_t v189 = v191;
          *((void *)v189 + 1) = v192;
          v189[16] = v193;
          uint64_t v194 = *((void *)v190 + 4);
          *((void *)v189 + 3) = *((void *)v190 + 3);
          uint64_t v195 = *((void *)v190 + 5);
          char v196 = v190[48];
          swift_bridgeObjectRetain();
          sub_21F770E44(v194, v195, v196);
          *((void *)v189 + 4) = v194;
          *((void *)v189 + 5) = v195;
          v189[48] = v196;
          *(_OWORD *)(v189 + 56) = *(_OWORD *)(v190 + 56);
        }
        else
        {
          long long v197 = *((_OWORD *)v190 + 3);
          *((_OWORD *)v189 + 2) = *((_OWORD *)v190 + 2);
          *((_OWORD *)v189 + 3) = v197;
          *((void *)v189 + 8) = *((void *)v190 + 8);
          long long v198 = *((_OWORD *)v190 + 1);
          *(_OWORD *)uint64_t v189 = *(_OWORD *)v190;
          *((_OWORD *)v189 + 1) = v198;
        }
        uint64_t v199 = v354[21];
        uint64_t v200 = (char *)v6 + v199;
        uint64_t v201 = (char *)v7 + v199;
        if (*(void *)((char *)v7 + v199 + 24))
        {
          uint64_t v202 = *(void *)v201;
          uint64_t v203 = *((void *)v201 + 1);
          char v204 = v201[16];
          sub_21F7652C0(*(void *)v201, v203, v204);
          *(void *)uint64_t v200 = v202;
          *((void *)v200 + 1) = v203;
          v200[16] = v204;
          uint64_t v205 = *((void *)v201 + 4);
          *((void *)v200 + 3) = *((void *)v201 + 3);
          uint64_t v206 = *((void *)v201 + 5);
          char v207 = v201[48];
          swift_bridgeObjectRetain();
          sub_21F770E44(v205, v206, v207);
          *((void *)v200 + 4) = v205;
          *((void *)v200 + 5) = v206;
          v200[48] = v207;
          *(_OWORD *)(v200 + 56) = *(_OWORD *)(v201 + 56);
        }
        else
        {
          long long v208 = *((_OWORD *)v201 + 3);
          *((_OWORD *)v200 + 2) = *((_OWORD *)v201 + 2);
          *((_OWORD *)v200 + 3) = v208;
          *((void *)v200 + 8) = *((void *)v201 + 8);
          long long v209 = *((_OWORD *)v201 + 1);
          *(_OWORD *)uint64_t v200 = *(_OWORD *)v201;
          *((_OWORD *)v200 + 1) = v209;
        }
        uint64_t v210 = v354[22];
        uint64_t v211 = (char *)v6 + v210;
        uint64_t v212 = (char *)v7 + v210;
        *(_OWORD *)uint64_t v211 = *(_OWORD *)v212;
        *((void *)v211 + 2) = *((void *)v212 + 2);
        uint64_t v213 = v354[23];
        uint64_t v214 = (char *)v6 + v213;
        char v215 = (char *)v7 + v213;
        *(_OWORD *)uint64_t v214 = *(_OWORD *)v215;
        *((void *)v214 + 2) = *((void *)v215 + 2);
        uint64_t v216 = v354[24];
        uint64_t v217 = (char *)v6 + v216;
        char v218 = (char *)v7 + v216;
        if (*(void *)((char *)v7 + v216 + 24))
        {
          uint64_t v219 = *(void *)v218;
          uint64_t v220 = *((void *)v218 + 1);
          char v221 = v218[16];
          sub_21F7652C0(*(void *)v218, v220, v221);
          *(void *)uint64_t v217 = v219;
          *((void *)v217 + 1) = v220;
          v217[16] = v221;
          *((void *)v217 + 3) = *((void *)v218 + 3);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v222 = *((_OWORD *)v218 + 1);
          *(_OWORD *)uint64_t v217 = *(_OWORD *)v218;
          *((_OWORD *)v217 + 1) = v222;
        }
        uint64_t v223 = v354[25];
        uint64_t v224 = (char *)v6 + v223;
        uint64_t v225 = (char *)v7 + v223;
        if (*(void *)((char *)v7 + v223 + 24))
        {
          uint64_t v226 = *(void *)v225;
          uint64_t v227 = *((void *)v225 + 1);
          char v228 = v225[16];
          sub_21F7652C0(*(void *)v225, v227, v228);
          *(void *)uint64_t v224 = v226;
          *((void *)v224 + 1) = v227;
          v224[16] = v228;
          *((void *)v224 + 3) = *((void *)v225 + 3);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v229 = *((_OWORD *)v225 + 1);
          *(_OWORD *)uint64_t v224 = *(_OWORD *)v225;
          *((_OWORD *)v224 + 1) = v229;
        }
        uint64_t v230 = v354[26];
        uint64_t v231 = (void *)((char *)v6 + v230);
        char v232 = (void *)((char *)v7 + v230);
        uint64_t v233 = v232[1];
        *uint64_t v231 = *v232;
        v231[1] = v233;
        *((unsigned char *)v6 + v354[27]) = *((unsigned char *)v7 + v354[27]);
        uint64_t v234 = v354[28];
        uint64_t v235 = (char *)v6 + v234;
        char v236 = (char *)v7 + v234;
        uint64_t v237 = *((void *)v236 + 3);
        swift_bridgeObjectRetain();
        if (v237)
        {
          *((void *)v235 + 3) = v237;
          (**(void (***)(char *, char *, uint64_t))(v237 - 8))(v235, v236, v237);
        }
        else
        {
          long long v238 = *((_OWORD *)v236 + 1);
          *(_OWORD *)uint64_t v235 = *(_OWORD *)v236;
          *((_OWORD *)v235 + 1) = v238;
        }
        uint64_t v12 = v351;
        (*(void (**)(_OWORD *, void, uint64_t, int *))(v9 + 56))(v6, 0, 1, v354);
      }
      uint64_t v239 = *(int *)(v12 + 36);
      uint64_t v240 = a1 + v239;
      uint64_t v241 = a2 + v239;
      long long v242 = *(_OWORD *)(v241 + 16);
      *(_OWORD *)uint64_t v240 = *(_OWORD *)v241;
      *(_OWORD *)(v240 + 16) = v242;
      *(unsigned char *)(v240 + 32) = *(unsigned char *)(v241 + 32);
      uint64_t v243 = *(int *)(v12 + 40);
      uint64_t v244 = a1 + v243;
      uint64_t v245 = a2 + v243;
      uint64_t v246 = sub_21FA24C90();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v246 - 8) + 16))(v244, v245, v246);
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_21F81C7FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (a1 != a2)
  {
    sub_21F83E378(a1, type metadata accessor for AnyVectorizedRenderer.MarkRenderer);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v13 = *(void *)(a2 + 24);
        *(void *)(v2 + 24) = v13;
        *(void *)(v2 + 32) = *(void *)(a2 + 32);
        (**(void (***)(uint64_t, uint64_t))(v13 - 8))(v2, a2);
        *(unsigned char *)(v2 + 40) = *(unsigned char *)(a2 + 40);
        *(void *)(v2 + 48) = *(void *)(a2 + 48);
        *(void *)(v2 + 56) = *(void *)(a2 + 56);
        *(void *)(v2 + 64) = *(void *)(a2 + 64);
        uint64_t v14 = (int *)type metadata accessor for PointsRenderer(0);
        uint64_t v15 = v14[8];
        int v16 = (_OWORD *)(v2 + v15);
        uint64_t v17 = (long long *)(a2 + v15);
        uint64_t v18 = type metadata accessor for ChartContentRenderContext.Environment(0);
        uint64_t v19 = *(void *)(v18 - 8);
        uint64_t v20 = *(unsigned int (**)(long long *, uint64_t, uint64_t))(v19 + 48);
        swift_retain();
        if (v20(v17, 1, v18))
        {
          uint64_t v21 = sub_21F76CA40(qword_267EE7A88);
          memcpy(v16, v17, *(void *)(*(void *)(v21 - 8) + 64));
        }
        else
        {
          CGRect v389 = (int *)v18;
          int v38 = *((unsigned __int8 *)v17 + 40);
          CGRect v387 = v14;
          if (v38 == 255)
          {
            long long v39 = *v17;
            long long v40 = v17[1];
            *(_OWORD *)((char *)v16 + 25) = *(long long *)((char *)v17 + 25);
            *int v16 = v39;
            v16[1] = v40;
            long long v41 = (int *)v18;
          }
          else
          {
            long long v41 = (int *)v18;
            if (v38)
            {
              uint64_t v53 = *((void *)v17 + 3);
              *((void *)v16 + 3) = v53;
              *((void *)v16 + 4) = *((void *)v17 + 4);
              (**(void (***)(_OWORD *, long long *))(v53 - 8))(v16, v17);
              *((unsigned char *)v16 + 40) = 1;
            }
            else
            {
              *(void *)int v16 = *(void *)v17;
              *((unsigned char *)v16 + 40) = 0;
              swift_retain();
            }
          }
          *((unsigned char *)v16 + 41) = *((unsigned char *)v17 + 41);
          *((void *)v16 + 6) = *((void *)v17 + 6);
          *((_DWORD *)v16 + 14) = *((_DWORD *)v17 + 14);
          *((_DWORD *)v16 + 15) = *((_DWORD *)v17 + 15);
          *((void *)v16 + 8) = *((void *)v17 + 8);
          *((void *)v16 + 9) = *((void *)v17 + 9);
          *((void *)v16 + 10) = *((void *)v17 + 10);
          int v54 = *((unsigned __int8 *)v17 + 128);
          swift_bridgeObjectRetain();
          if (v54 == 255)
          {
            long long v55 = *(long long *)((char *)v17 + 88);
            long long v56 = *(long long *)((char *)v17 + 104);
            *(_OWORD *)((char *)v16 + 113) = *(long long *)((char *)v17 + 113);
            *(_OWORD *)((char *)v16 + 88) = v55;
            *(_OWORD *)((char *)v16 + 104) = v56;
          }
          else if (v54)
          {
            *((void *)v16 + 11) = *((void *)v17 + 11);
            v16[6] = v17[6];
            *((unsigned char *)v16 + 128) = 1;
            swift_retain();
          }
          else
          {
            uint64_t v57 = *((void *)v17 + 14);
            *((void *)v16 + 14) = v57;
            *((void *)v16 + 15) = *((void *)v17 + 15);
            (**(void (***)(uint64_t, uint64_t))(v57 - 8))((uint64_t)v16 + 88, (uint64_t)v17 + 88);
            *((unsigned char *)v16 + 128) = 0;
          }
          long long v271 = *(long long *)((char *)v17 + 136);
          *((unsigned char *)v16 + 152) = *((unsigned char *)v17 + 152);
          *(_OWORD *)((char *)v16 + 136) = v271;
          uint64_t v272 = *((void *)v17 + 20);
          *((unsigned char *)v16 + 168) = *((unsigned char *)v17 + 168);
          *((void *)v16 + 20) = v272;
          long long v273 = v17[11];
          long long v274 = v17[12];
          *((unsigned char *)v16 + 208) = *((unsigned char *)v17 + 208);
          v16[11] = v273;
          v16[12] = v274;
          uint64_t v275 = v41[11];
          long long v276 = (char *)v16 + v275;
          long long v277 = (char *)v17 + v275;
          uint64_t v278 = sub_21FA24C90();
          uint64_t v279 = *(void *)(v278 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v279 + 48))(v277, 1, v278))
          {
            uint64_t v280 = sub_21F76CA40(&qword_26AD47C20);
            memcpy(v276, v277, *(void *)(*(void *)(v280 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v279 + 16))(v276, v277, v278);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v279 + 56))(v276, 0, 1, v278);
          }
          uint64_t v281 = v41[12];
          uint64_t v282 = (char *)v16 + v281;
          char v283 = (char *)v17 + v281;
          uint64_t v284 = *(void *)v283;
          v282[8] = v283[8];
          *(void *)uint64_t v282 = v284;
          *(void *)((char *)v16 + v41[13]) = *(void *)((char *)v17 + v41[13]);
          uint64_t v285 = v41[14];
          char v286 = (char *)v16 + v285;
          long long v287 = (char *)v17 + v285;
          uint64_t v288 = sub_21FA25910();
          uint64_t v289 = *(void *)(v288 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v289 + 48))(v287, 1, v288))
          {
            uint64_t v290 = sub_21F76CA40(&qword_26AD4A3B8);
            memcpy(v286, v287, *(void *)(*(void *)(v290 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v289 + 16))(v286, v287, v288);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v289 + 56))(v286, 0, 1, v288);
          }
          uint64_t v291 = v41[15];
          uint64_t v292 = (char *)v16 + v291;
          uint64_t v293 = (char *)v17 + v291;
          *(void *)uint64_t v292 = *(void *)v293;
          *((_WORD *)v292 + 4) = *((_WORD *)v293 + 4);
          *(void *)((char *)v16 + v41[16]) = *(void *)((char *)v17 + v41[16]);
          *(void *)((char *)v16 + v41[17]) = *(void *)((char *)v17 + v41[17]);
          uint64_t v294 = v41[18];
          uint64_t v295 = (char *)v16 + v294;
          uint64_t v296 = (char *)v17 + v294;
          uint64_t v297 = *(void *)((char *)v17 + v294 + 24);
          swift_retain();
          if (v297)
          {
            uint64_t v298 = *(void *)v296;
            uint64_t v299 = *((void *)v296 + 1);
            char v300 = v296[16];
            sub_21F7652C0(*(void *)v296, v299, v300);
            *(void *)uint64_t v295 = v298;
            *((void *)v295 + 1) = v299;
            v295[16] = v300;
            *((void *)v295 + 3) = *((void *)v296 + 3);
            uint64_t v301 = *((void *)v296 + 4);
            uint64_t v302 = *((void *)v296 + 5);
            char v303 = v296[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v301, v302, v303);
            *((void *)v295 + 4) = v301;
            *((void *)v295 + 5) = v302;
            v295[48] = v303;
            *(_OWORD *)(v295 + 56) = *(_OWORD *)(v296 + 56);
          }
          else
          {
            *(_OWORD *)uint64_t v295 = *(_OWORD *)v296;
            long long v304 = *((_OWORD *)v296 + 1);
            long long v305 = *((_OWORD *)v296 + 2);
            long long v306 = *((_OWORD *)v296 + 3);
            *((void *)v295 + 8) = *((void *)v296 + 8);
            *((_OWORD *)v295 + 2) = v305;
            *((_OWORD *)v295 + 3) = v306;
            *((_OWORD *)v295 + 1) = v304;
          }
          uint64_t v307 = v389[19];
          char v308 = (char *)v16 + v307;
          long long v309 = (char *)v17 + v307;
          if (*(void *)((char *)v17 + v307 + 24))
          {
            uint64_t v310 = *(void *)v309;
            uint64_t v311 = *((void *)v309 + 1);
            char v312 = v309[16];
            sub_21F7652C0(*(void *)v309, v311, v312);
            *(void *)char v308 = v310;
            *((void *)v308 + 1) = v311;
            v308[16] = v312;
            *((void *)v308 + 3) = *((void *)v309 + 3);
            uint64_t v313 = *((void *)v309 + 4);
            uint64_t v314 = *((void *)v309 + 5);
            char v315 = v309[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v313, v314, v315);
            *((void *)v308 + 4) = v313;
            *((void *)v308 + 5) = v314;
            v308[48] = v315;
            *(_OWORD *)(v308 + 56) = *(_OWORD *)(v309 + 56);
          }
          else
          {
            *(_OWORD *)char v308 = *(_OWORD *)v309;
            long long v316 = *((_OWORD *)v309 + 1);
            long long v317 = *((_OWORD *)v309 + 2);
            long long v318 = *((_OWORD *)v309 + 3);
            *((void *)v308 + 8) = *((void *)v309 + 8);
            *((_OWORD *)v308 + 2) = v317;
            *((_OWORD *)v308 + 3) = v318;
            *((_OWORD *)v308 + 1) = v316;
          }
          uint64_t v319 = v389[20];
          uint64_t v320 = (char *)v16 + v319;
          uint64_t v321 = (char *)v17 + v319;
          if (*(void *)((char *)v17 + v319 + 24))
          {
            uint64_t v322 = *(void *)v321;
            uint64_t v323 = *((void *)v321 + 1);
            char v324 = v321[16];
            sub_21F7652C0(*(void *)v321, v323, v324);
            *(void *)uint64_t v320 = v322;
            *((void *)v320 + 1) = v323;
            v320[16] = v324;
            *((void *)v320 + 3) = *((void *)v321 + 3);
            uint64_t v325 = *((void *)v321 + 4);
            uint64_t v326 = *((void *)v321 + 5);
            char v327 = v321[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v325, v326, v327);
            *((void *)v320 + 4) = v325;
            *((void *)v320 + 5) = v326;
            v320[48] = v327;
            *(_OWORD *)(v320 + 56) = *(_OWORD *)(v321 + 56);
          }
          else
          {
            *(_OWORD *)uint64_t v320 = *(_OWORD *)v321;
            long long v328 = *((_OWORD *)v321 + 1);
            long long v329 = *((_OWORD *)v321 + 2);
            long long v330 = *((_OWORD *)v321 + 3);
            *((void *)v320 + 8) = *((void *)v321 + 8);
            *((_OWORD *)v320 + 2) = v329;
            *((_OWORD *)v320 + 3) = v330;
            *((_OWORD *)v320 + 1) = v328;
          }
          uint64_t v331 = v389[21];
          uint64_t v332 = (char *)v16 + v331;
          char v333 = (char *)v17 + v331;
          if (*(void *)((char *)v17 + v331 + 24))
          {
            uint64_t v334 = *(void *)v333;
            uint64_t v335 = *((void *)v333 + 1);
            char v336 = v333[16];
            sub_21F7652C0(*(void *)v333, v335, v336);
            *(void *)uint64_t v332 = v334;
            *((void *)v332 + 1) = v335;
            v332[16] = v336;
            *((void *)v332 + 3) = *((void *)v333 + 3);
            uint64_t v337 = *((void *)v333 + 4);
            uint64_t v338 = *((void *)v333 + 5);
            char v339 = v333[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v337, v338, v339);
            *((void *)v332 + 4) = v337;
            *((void *)v332 + 5) = v338;
            v332[48] = v339;
            *(_OWORD *)(v332 + 56) = *(_OWORD *)(v333 + 56);
          }
          else
          {
            *(_OWORD *)uint64_t v332 = *(_OWORD *)v333;
            long long v340 = *((_OWORD *)v333 + 1);
            long long v341 = *((_OWORD *)v333 + 2);
            long long v342 = *((_OWORD *)v333 + 3);
            *((void *)v332 + 8) = *((void *)v333 + 8);
            *((_OWORD *)v332 + 2) = v341;
            *((_OWORD *)v332 + 3) = v342;
            *((_OWORD *)v332 + 1) = v340;
          }
          uint64_t v343 = v389[22];
          int v344 = (char *)v16 + v343;
          long long v345 = (char *)v17 + v343;
          long long v346 = *(_OWORD *)v345;
          *((void *)v344 + 2) = *((void *)v345 + 2);
          *(_OWORD *)int v344 = v346;
          uint64_t v347 = v389[23];
          uint64_t v348 = (char *)v16 + v347;
          uint64_t v349 = (char *)v17 + v347;
          long long v350 = *(_OWORD *)v349;
          *((void *)v348 + 2) = *((void *)v349 + 2);
          *(_OWORD *)uint64_t v348 = v350;
          uint64_t v351 = v389[24];
          uint64_t v352 = (char *)v16 + v351;
          uint64_t v353 = (char *)v17 + v351;
          if (*(void *)((char *)v17 + v351 + 24))
          {
            uint64_t v354 = *(void *)v353;
            uint64_t v355 = *((void *)v353 + 1);
            char v356 = v353[16];
            sub_21F7652C0(*(void *)v353, v355, v356);
            *(void *)uint64_t v352 = v354;
            *((void *)v352 + 1) = v355;
            v352[16] = v356;
            *((void *)v352 + 3) = *((void *)v353 + 3);
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v357 = *((_OWORD *)v353 + 1);
            *(_OWORD *)uint64_t v352 = *(_OWORD *)v353;
            *((_OWORD *)v352 + 1) = v357;
          }
          uint64_t v358 = v389[25];
          uint64_t v359 = (char *)v16 + v358;
          uint64_t v360 = (char *)v17 + v358;
          if (*(void *)((char *)v17 + v358 + 24))
          {
            uint64_t v361 = *(void *)v360;
            uint64_t v362 = *((void *)v360 + 1);
            char v363 = v360[16];
            sub_21F7652C0(*(void *)v360, v362, v363);
            *(void *)uint64_t v359 = v361;
            *((void *)v359 + 1) = v362;
            v359[16] = v363;
            *((void *)v359 + 3) = *((void *)v360 + 3);
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v364 = *((_OWORD *)v360 + 1);
            *(_OWORD *)uint64_t v359 = *(_OWORD *)v360;
            *((_OWORD *)v359 + 1) = v364;
          }
          uint64_t v365 = v389[26];
          v366 = (void *)((char *)v16 + v365);
          v367 = (void *)((char *)v17 + v365);
          void *v366 = *v367;
          v366[1] = v367[1];
          *((unsigned char *)v16 + v389[27]) = *((unsigned char *)v17 + v389[27]);
          uint64_t v368 = v389[28];
          v369 = (char *)v16 + v368;
          char v370 = (char *)v17 + v368;
          uint64_t v371 = *((void *)v370 + 3);
          swift_bridgeObjectRetain();
          if (v371)
          {
            *((void *)v369 + 3) = v371;
            (**(void (***)(char *, char *, uint64_t))(v371 - 8))(v369, v370, v371);
          }
          else
          {
            long long v372 = *((_OWORD *)v370 + 1);
            *(_OWORD *)v369 = *(_OWORD *)v370;
            *((_OWORD *)v369 + 1) = v372;
          }
          uint64_t v14 = v387;
          (*(void (**)(_OWORD *, void, uint64_t, int *))(v19 + 56))(v16, 0, 1, v389);
        }
        uint64_t v373 = v14[9];
        uint64_t v374 = v2 + v373;
        v375 = (long long *)(a2 + v373);
        int v376 = *(unsigned __int8 *)(a2 + v373 + 40);
        if (v376 == 255)
        {
          long long v377 = *v375;
          long long v378 = v375[1];
          *(_OWORD *)(v374 + 25) = *(long long *)((char *)v375 + 25);
          *(_OWORD *)uint64_t v374 = v377;
          *(_OWORD *)(v374 + 16) = v378;
        }
        else if (v376)
        {
          *(void *)uint64_t v374 = *(void *)v375;
          *(_OWORD *)(v374 + 8) = *(long long *)((char *)v375 + 8);
          *(unsigned char *)(v374 + 40) = 1;
          swift_retain();
        }
        else
        {
          uint64_t v379 = *((void *)v375 + 3);
          *(void *)(v374 + 24) = v379;
          *(void *)(v374 + 32) = *((void *)v375 + 4);
          (**(void (***)(uint64_t))(v379 - 8))(v374);
          *(unsigned char *)(v374 + 40) = 0;
        }
        uint64_t v380 = v14[10];
        uint64_t v381 = v2 + v380;
        v382 = (long long *)(a2 + v380);
        long long v383 = *v382;
        *(unsigned char *)(v381 + 16) = *((unsigned char *)v382 + 16);
        *(_OWORD *)uint64_t v381 = v383;
        break;
      case 2u:
        uint64_t v22 = *(void *)(a2 + 24);
        *(void *)(v2 + 24) = v22;
        *(void *)(v2 + 32) = *(void *)(a2 + 32);
        (**(void (***)(uint64_t, uint64_t))(v22 - 8))(v2, a2);
        *(unsigned char *)(v2 + 40) = *(unsigned char *)(a2 + 40);
        *(void *)(v2 + 48) = *(void *)(a2 + 48);
        *(void *)(v2 + 56) = *(void *)(a2 + 56);
        *(void *)(v2 + 64) = *(void *)(a2 + 64);
        uint64_t v23 = *(int *)(type metadata accessor for RulesRenderer(0) + 32);
        uint64_t v24 = (_OWORD *)(v2 + v23);
        uint64_t v25 = (long long *)(a2 + v23);
        uint64_t v26 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
        uint64_t v27 = *((void *)v26 - 1);
        uint64_t v28 = *(unsigned int (**)(long long *, uint64_t, int *))(v27 + 48);
        swift_retain();
        if (v28(v25, 1, v26))
        {
          uint64_t v29 = sub_21F76CA40(qword_267EE7A88);
          memcpy(v24, v25, *(void *)(*(void *)(v29 - 8) + 64));
        }
        else
        {
          int v30 = *((unsigned __int8 *)v25 + 40);
          if (v30 == 255)
          {
            long long v31 = *v25;
            long long v32 = v25[1];
            *(_OWORD *)((char *)v24 + 25) = *(long long *)((char *)v25 + 25);
            *uint64_t v24 = v31;
            v24[1] = v32;
          }
          else if (v30)
          {
            uint64_t v42 = *((void *)v25 + 3);
            *((void *)v24 + 3) = v42;
            *((void *)v24 + 4) = *((void *)v25 + 4);
            (**(void (***)(_OWORD *, long long *))(v42 - 8))(v24, v25);
            *((unsigned char *)v24 + 40) = 1;
          }
          else
          {
            *(void *)uint64_t v24 = *(void *)v25;
            *((unsigned char *)v24 + 40) = 0;
            swift_retain();
          }
          *((unsigned char *)v24 + 41) = *((unsigned char *)v25 + 41);
          *((void *)v24 + 6) = *((void *)v25 + 6);
          *((_DWORD *)v24 + 14) = *((_DWORD *)v25 + 14);
          *((_DWORD *)v24 + 15) = *((_DWORD *)v25 + 15);
          *((void *)v24 + 8) = *((void *)v25 + 8);
          *((void *)v24 + 9) = *((void *)v25 + 9);
          *((void *)v24 + 10) = *((void *)v25 + 10);
          int v43 = *((unsigned __int8 *)v25 + 128);
          swift_bridgeObjectRetain();
          if (v43 == 255)
          {
            long long v44 = *(long long *)((char *)v25 + 88);
            long long v45 = *(long long *)((char *)v25 + 104);
            *(_OWORD *)((char *)v24 + 113) = *(long long *)((char *)v25 + 113);
            *(_OWORD *)((char *)v24 + 88) = v44;
            *(_OWORD *)((char *)v24 + 104) = v45;
          }
          else if (v43)
          {
            *((void *)v24 + 11) = *((void *)v25 + 11);
            v24[6] = v25[6];
            *((unsigned char *)v24 + 128) = 1;
            swift_retain();
          }
          else
          {
            uint64_t v46 = *((void *)v25 + 14);
            *((void *)v24 + 14) = v46;
            *((void *)v24 + 15) = *((void *)v25 + 15);
            (**(void (***)(uint64_t, uint64_t))(v46 - 8))((uint64_t)v24 + 88, (uint64_t)v25 + 88);
            *((unsigned char *)v24 + 128) = 0;
          }
          long long v58 = *(long long *)((char *)v25 + 136);
          *((unsigned char *)v24 + 152) = *((unsigned char *)v25 + 152);
          *(_OWORD *)((char *)v24 + 136) = v58;
          uint64_t v59 = *((void *)v25 + 20);
          *((unsigned char *)v24 + 168) = *((unsigned char *)v25 + 168);
          *((void *)v24 + 20) = v59;
          long long v60 = v25[11];
          long long v61 = v25[12];
          *((unsigned char *)v24 + 208) = *((unsigned char *)v25 + 208);
          v24[11] = v60;
          v24[12] = v61;
          uint64_t v62 = v26[11];
          uint64_t v63 = (char *)v24 + v62;
          unint64_t v64 = (char *)v25 + v62;
          uint64_t v65 = sub_21FA24C90();
          uint64_t v66 = *(void *)(v65 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
          {
            uint64_t v67 = sub_21F76CA40(&qword_26AD47C20);
            memcpy(v63, v64, *(void *)(*(void *)(v67 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v63, v64, v65);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
          }
          uint64_t v68 = v26[12];
          uint64_t v69 = (char *)v24 + v68;
          uint64_t v70 = (char *)v25 + v68;
          uint64_t v71 = *(void *)v70;
          v69[8] = v70[8];
          *(void *)uint64_t v69 = v71;
          *(void *)((char *)v24 + v26[13]) = *(void *)((char *)v25 + v26[13]);
          uint64_t v72 = v26[14];
          uint64_t v73 = (char *)v24 + v72;
          long long v74 = (char *)v25 + v72;
          uint64_t v75 = sub_21FA25910();
          uint64_t v76 = *(void *)(v75 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
          {
            uint64_t v77 = sub_21F76CA40(&qword_26AD4A3B8);
            memcpy(v73, v74, *(void *)(*(void *)(v77 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v73, v74, v75);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
          }
          uint64_t v78 = v26[15];
          uint64_t v79 = (char *)v24 + v78;
          uint64_t v80 = (char *)v25 + v78;
          *(void *)uint64_t v79 = *(void *)v80;
          *((_WORD *)v79 + 4) = *((_WORD *)v80 + 4);
          *(void *)((char *)v24 + v26[16]) = *(void *)((char *)v25 + v26[16]);
          *(void *)((char *)v24 + v26[17]) = *(void *)((char *)v25 + v26[17]);
          uint64_t v81 = v26[18];
          long long v82 = (char *)v24 + v81;
          long long v83 = (char *)v25 + v81;
          uint64_t v84 = *(void *)((char *)v25 + v81 + 24);
          swift_retain();
          if (v84)
          {
            uint64_t v85 = *(void *)v83;
            uint64_t v86 = *((void *)v83 + 1);
            char v87 = v83[16];
            sub_21F7652C0(*(void *)v83, v86, v87);
            *(void *)long long v82 = v85;
            *((void *)v82 + 1) = v86;
            v82[16] = v87;
            *((void *)v82 + 3) = *((void *)v83 + 3);
            uint64_t v88 = *((void *)v83 + 4);
            uint64_t v89 = *((void *)v83 + 5);
            char v90 = v83[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v88, v89, v90);
            *((void *)v82 + 4) = v88;
            *((void *)v82 + 5) = v89;
            v82[48] = v90;
            *(_OWORD *)(v82 + 56) = *(_OWORD *)(v83 + 56);
          }
          else
          {
            *(_OWORD *)long long v82 = *(_OWORD *)v83;
            long long v91 = *((_OWORD *)v83 + 1);
            long long v92 = *((_OWORD *)v83 + 2);
            long long v93 = *((_OWORD *)v83 + 3);
            *((void *)v82 + 8) = *((void *)v83 + 8);
            *((_OWORD *)v82 + 2) = v92;
            *((_OWORD *)v82 + 3) = v93;
            *((_OWORD *)v82 + 1) = v91;
          }
          uint64_t v94 = v26[19];
          uint64_t v95 = (char *)v24 + v94;
          uint64_t v96 = (char *)v25 + v94;
          if (*(void *)((char *)v25 + v94 + 24))
          {
            uint64_t v97 = *(void *)v96;
            uint64_t v98 = *((void *)v96 + 1);
            char v99 = v96[16];
            sub_21F7652C0(*(void *)v96, v98, v99);
            *(void *)uint64_t v95 = v97;
            *((void *)v95 + 1) = v98;
            v95[16] = v99;
            *((void *)v95 + 3) = *((void *)v96 + 3);
            uint64_t v100 = *((void *)v96 + 4);
            uint64_t v101 = *((void *)v96 + 5);
            char v102 = v96[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v100, v101, v102);
            *((void *)v95 + 4) = v100;
            *((void *)v95 + 5) = v101;
            v95[48] = v102;
            *(_OWORD *)(v95 + 56) = *(_OWORD *)(v96 + 56);
          }
          else
          {
            *(_OWORD *)uint64_t v95 = *(_OWORD *)v96;
            long long v103 = *((_OWORD *)v96 + 1);
            long long v104 = *((_OWORD *)v96 + 2);
            long long v105 = *((_OWORD *)v96 + 3);
            *((void *)v95 + 8) = *((void *)v96 + 8);
            *((_OWORD *)v95 + 2) = v104;
            *((_OWORD *)v95 + 3) = v105;
            *((_OWORD *)v95 + 1) = v103;
          }
          uint64_t v106 = v26[20];
          uint64_t v107 = (char *)v24 + v106;
          uint64_t v108 = (char *)v25 + v106;
          if (*(void *)((char *)v25 + v106 + 24))
          {
            uint64_t v109 = *(void *)v108;
            uint64_t v110 = *((void *)v108 + 1);
            char v111 = v108[16];
            sub_21F7652C0(*(void *)v108, v110, v111);
            *(void *)uint64_t v107 = v109;
            *((void *)v107 + 1) = v110;
            v107[16] = v111;
            *((void *)v107 + 3) = *((void *)v108 + 3);
            uint64_t v112 = *((void *)v108 + 4);
            uint64_t v113 = *((void *)v108 + 5);
            char v114 = v108[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v112, v113, v114);
            *((void *)v107 + 4) = v112;
            *((void *)v107 + 5) = v113;
            v107[48] = v114;
            *(_OWORD *)(v107 + 56) = *(_OWORD *)(v108 + 56);
          }
          else
          {
            *(_OWORD *)uint64_t v107 = *(_OWORD *)v108;
            long long v115 = *((_OWORD *)v108 + 1);
            long long v116 = *((_OWORD *)v108 + 2);
            long long v117 = *((_OWORD *)v108 + 3);
            *((void *)v107 + 8) = *((void *)v108 + 8);
            *((_OWORD *)v107 + 2) = v116;
            *((_OWORD *)v107 + 3) = v117;
            *((_OWORD *)v107 + 1) = v115;
          }
          uint64_t v118 = v26[21];
          uint64_t v119 = (char *)v24 + v118;
          uint64_t v120 = (char *)v25 + v118;
          if (*(void *)((char *)v25 + v118 + 24))
          {
            uint64_t v121 = *(void *)v120;
            uint64_t v122 = *((void *)v120 + 1);
            char v123 = v120[16];
            sub_21F7652C0(*(void *)v120, v122, v123);
            *(void *)uint64_t v119 = v121;
            *((void *)v119 + 1) = v122;
            v119[16] = v123;
            *((void *)v119 + 3) = *((void *)v120 + 3);
            uint64_t v124 = *((void *)v120 + 4);
            uint64_t v125 = *((void *)v120 + 5);
            char v126 = v120[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v124, v125, v126);
            *((void *)v119 + 4) = v124;
            *((void *)v119 + 5) = v125;
            v119[48] = v126;
            *(_OWORD *)(v119 + 56) = *(_OWORD *)(v120 + 56);
          }
          else
          {
            *(_OWORD *)uint64_t v119 = *(_OWORD *)v120;
            long long v127 = *((_OWORD *)v120 + 1);
            long long v128 = *((_OWORD *)v120 + 2);
            long long v129 = *((_OWORD *)v120 + 3);
            *((void *)v119 + 8) = *((void *)v120 + 8);
            *((_OWORD *)v119 + 2) = v128;
            *((_OWORD *)v119 + 3) = v129;
            *((_OWORD *)v119 + 1) = v127;
          }
          uint64_t v130 = v26[22];
          uint64_t v131 = (char *)v24 + v130;
          uint64_t v132 = (char *)v25 + v130;
          long long v133 = *(_OWORD *)v132;
          *((void *)v131 + 2) = *((void *)v132 + 2);
          *(_OWORD *)uint64_t v131 = v133;
          uint64_t v134 = v26[23];
          char v135 = (char *)v24 + v134;
          long long v136 = (char *)v25 + v134;
          long long v137 = *(_OWORD *)v136;
          *((void *)v135 + 2) = *((void *)v136 + 2);
          *(_OWORD *)char v135 = v137;
          uint64_t v138 = v26[24];
          uint64_t v139 = (char *)v24 + v138;
          uint64_t v140 = (char *)v25 + v138;
          if (*(void *)((char *)v25 + v138 + 24))
          {
            uint64_t v141 = *(void *)v140;
            uint64_t v142 = *((void *)v140 + 1);
            char v143 = v140[16];
            sub_21F7652C0(*(void *)v140, v142, v143);
            *(void *)uint64_t v139 = v141;
            *((void *)v139 + 1) = v142;
            v139[16] = v143;
            *((void *)v139 + 3) = *((void *)v140 + 3);
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v144 = *((_OWORD *)v140 + 1);
            *(_OWORD *)uint64_t v139 = *(_OWORD *)v140;
            *((_OWORD *)v139 + 1) = v144;
          }
          uint64_t v145 = v26[25];
          long long v146 = (char *)v24 + v145;
          uint64_t v147 = (char *)v25 + v145;
          if (*(void *)((char *)v25 + v145 + 24))
          {
            uint64_t v148 = *(void *)v147;
            uint64_t v149 = *((void *)v147 + 1);
            char v150 = v147[16];
            sub_21F7652C0(*(void *)v147, v149, v150);
            *(void *)long long v146 = v148;
            *((void *)v146 + 1) = v149;
            v146[16] = v150;
            *((void *)v146 + 3) = *((void *)v147 + 3);
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v151 = *((_OWORD *)v147 + 1);
            *(_OWORD *)long long v146 = *(_OWORD *)v147;
            *((_OWORD *)v146 + 1) = v151;
          }
          uint64_t v152 = v26[26];
          uint64_t v153 = (void *)((char *)v24 + v152);
          long long v154 = (void *)((char *)v25 + v152);
          *uint64_t v153 = *v154;
          v153[1] = v154[1];
          *((unsigned char *)v24 + v26[27]) = *((unsigned char *)v25 + v26[27]);
          uint64_t v155 = v26[28];
          uint64_t v156 = (char *)v24 + v155;
          char v157 = (char *)v25 + v155;
          uint64_t v158 = *((void *)v157 + 3);
          swift_bridgeObjectRetain();
          if (v158)
          {
            *((void *)v156 + 3) = v158;
            (**(void (***)(char *, char *, uint64_t))(v158 - 8))(v156, v157, v158);
          }
          else
          {
            long long v159 = *((_OWORD *)v157 + 1);
            *(_OWORD *)uint64_t v156 = *(_OWORD *)v157;
            *((_OWORD *)v156 + 1) = v159;
          }
          (*(void (**)(_OWORD *, void, uint64_t, int *))(v27 + 56))(v24, 0, 1, v26);
        }
        break;
      case 3u:
        *(void *)uint64_t v2 = *(void *)a2;
        swift_retain();
        break;
      default:
        uint64_t v4 = *(void *)(a2 + 24);
        *(void *)(v2 + 24) = v4;
        *(void *)(v2 + 32) = *(void *)(a2 + 32);
        (**(void (***)(uint64_t, uint64_t))(v4 - 8))(v2, a2);
        *(unsigned char *)(v2 + 40) = *(unsigned char *)(a2 + 40);
        *(void *)(v2 + 48) = *(void *)(a2 + 48);
        *(void *)(v2 + 56) = *(void *)(a2 + 56);
        *(void *)(v2 + 64) = *(void *)(a2 + 64);
        uint64_t v5 = (int *)type metadata accessor for RectanglesRenderer(0);
        uint64_t v6 = v5[8];
        uint64_t v386 = v2;
        uint64_t v7 = (_OWORD *)(v2 + v6);
        uint64_t v8 = (long long *)(a2 + v6);
        uint64_t v9 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
        uint64_t v10 = *((void *)v9 - 1);
        uint64_t v11 = *(unsigned int (**)(long long *, uint64_t, int *))(v10 + 48);
        swift_retain();
        if (v11(v8, 1, v9))
        {
          uint64_t v12 = sub_21F76CA40(qword_267EE7A88);
          memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
          uint64_t v2 = v386;
        }
        else
        {
          CGRect v388 = v7;
          int v33 = *((unsigned __int8 *)v8 + 40);
          CGRect v385 = v5;
          if (v33 == 255)
          {
            long long v34 = *v8;
            long long v35 = v8[1];
            long long v36 = v7;
            *(_OWORD *)((char *)v7 + 25) = *(long long *)((char *)v8 + 25);
            *uint64_t v7 = v34;
            v7[1] = v35;
            uint64_t v37 = v9;
          }
          else
          {
            uint64_t v37 = v9;
            if (v33)
            {
              uint64_t v47 = *((void *)v8 + 3);
              long long v36 = v7;
              *((void *)v7 + 3) = v47;
              *((void *)v7 + 4) = *((void *)v8 + 4);
              (**(void (***)(_OWORD *, long long *))(v47 - 8))(v7, v8);
              *((unsigned char *)v7 + 40) = 1;
            }
            else
            {
              long long v36 = v7;
              *(void *)uint64_t v7 = *(void *)v8;
              *((unsigned char *)v7 + 40) = 0;
              swift_retain();
            }
          }
          *((unsigned char *)v36 + 41) = *((unsigned char *)v8 + 41);
          *((void *)v36 + 6) = *((void *)v8 + 6);
          *((_DWORD *)v36 + 14) = *((_DWORD *)v8 + 14);
          *((_DWORD *)v36 + 15) = *((_DWORD *)v8 + 15);
          *((void *)v36 + 8) = *((void *)v8 + 8);
          *((void *)v36 + 9) = *((void *)v8 + 9);
          *((void *)v36 + 10) = *((void *)v8 + 10);
          long long v48 = (_OWORD *)((char *)v36 + 88);
          int v49 = *((unsigned __int8 *)v8 + 128);
          swift_bridgeObjectRetain();
          if (v49 == 255)
          {
            long long v50 = *(long long *)((char *)v8 + 88);
            long long v51 = *(long long *)((char *)v8 + 104);
            *(_OWORD *)((char *)v48 + 25) = *(long long *)((char *)v8 + 113);
            *long long v48 = v50;
            v48[1] = v51;
          }
          else if (v49)
          {
            *((void *)v7 + 11) = *((void *)v8 + 11);
            void v7[6] = v8[6];
            *((unsigned char *)v7 + 128) = 1;
            swift_retain();
          }
          else
          {
            uint64_t v52 = *((void *)v8 + 14);
            *((void *)v7 + 14) = v52;
            *((void *)v7 + 15) = *((void *)v8 + 15);
            (**(void (***)(_OWORD *, uint64_t))(v52 - 8))(v48, (uint64_t)v8 + 88);
            *((unsigned char *)v7 + 128) = 0;
          }
          long long v160 = *(long long *)((char *)v8 + 136);
          *((unsigned char *)v7 + 152) = *((unsigned char *)v8 + 152);
          *(_OWORD *)((char *)v7 + 136) = v160;
          uint64_t v161 = *((void *)v8 + 20);
          *((unsigned char *)v7 + 168) = *((unsigned char *)v8 + 168);
          *((void *)v7 + 20) = v161;
          long long v162 = v8[11];
          long long v163 = v8[12];
          *((unsigned char *)v7 + 208) = *((unsigned char *)v8 + 208);
          v7[11] = v162;
          v7[12] = v163;
          uint64_t v164 = v37[11];
          uint64_t v165 = (char *)v7 + v164;
          uint64_t v166 = (char *)v8 + v164;
          uint64_t v167 = sub_21FA24C90();
          uint64_t v168 = *(void *)(v167 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v168 + 48))(v166, 1, v167))
          {
            uint64_t v169 = sub_21F76CA40(&qword_26AD47C20);
            memcpy(v165, v166, *(void *)(*(void *)(v169 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v168 + 16))(v165, v166, v167);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v168 + 56))(v165, 0, 1, v167);
          }
          uint64_t v170 = v37[12];
          char v171 = (char *)v7 + v170;
          uint64_t v172 = (char *)v8 + v170;
          uint64_t v173 = *(void *)v172;
          v171[8] = v172[8];
          *(void *)char v171 = v173;
          *(void *)((char *)v7 + v37[13]) = *(void *)((char *)v8 + v37[13]);
          uint64_t v174 = v37[14];
          long long v175 = (char *)v7 + v174;
          long long v176 = (char *)v8 + v174;
          uint64_t v177 = sub_21FA25910();
          uint64_t v178 = *(void *)(v177 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v178 + 48))(v176, 1, v177))
          {
            uint64_t v179 = sub_21F76CA40(&qword_26AD4A3B8);
            memcpy(v175, v176, *(void *)(*(void *)(v179 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v178 + 16))(v175, v176, v177);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v178 + 56))(v175, 0, 1, v177);
          }
          uint64_t v180 = v37[15];
          uint64_t v181 = (char *)v7 + v180;
          char v182 = (char *)v8 + v180;
          *(void *)uint64_t v181 = *(void *)v182;
          *((_WORD *)v181 + 4) = *((_WORD *)v182 + 4);
          *(void *)((char *)v7 + v37[16]) = *(void *)((char *)v8 + v37[16]);
          *(void *)((char *)v7 + v37[17]) = *(void *)((char *)v8 + v37[17]);
          uint64_t v183 = v37[18];
          uint64_t v184 = (char *)v7 + v183;
          char v185 = (char *)v8 + v183;
          uint64_t v186 = *(void *)((char *)v8 + v183 + 24);
          swift_retain();
          if (v186)
          {
            uint64_t v187 = *(void *)v185;
            uint64_t v188 = *((void *)v185 + 1);
            char v189 = v185[16];
            sub_21F7652C0(*(void *)v185, v188, v189);
            *(void *)uint64_t v184 = v187;
            *((void *)v184 + 1) = v188;
            v184[16] = v189;
            *((void *)v184 + 3) = *((void *)v185 + 3);
            uint64_t v190 = *((void *)v185 + 4);
            uint64_t v191 = *((void *)v185 + 5);
            char v192 = v185[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v190, v191, v192);
            *((void *)v184 + 4) = v190;
            *((void *)v184 + 5) = v191;
            v184[48] = v192;
            *(_OWORD *)(v184 + 56) = *(_OWORD *)(v185 + 56);
          }
          else
          {
            *(_OWORD *)uint64_t v184 = *(_OWORD *)v185;
            long long v193 = *((_OWORD *)v185 + 1);
            long long v194 = *((_OWORD *)v185 + 2);
            long long v195 = *((_OWORD *)v185 + 3);
            *((void *)v184 + 8) = *((void *)v185 + 8);
            *((_OWORD *)v184 + 2) = v194;
            *((_OWORD *)v184 + 3) = v195;
            *((_OWORD *)v184 + 1) = v193;
          }
          uint64_t v196 = v9[19];
          long long v197 = (char *)v7 + v196;
          long long v198 = (char *)v8 + v196;
          if (*(void *)((char *)v8 + v196 + 24))
          {
            uint64_t v199 = *(void *)v198;
            uint64_t v200 = *((void *)v198 + 1);
            char v201 = v198[16];
            sub_21F7652C0(*(void *)v198, v200, v201);
            *(void *)long long v197 = v199;
            *((void *)v197 + 1) = v200;
            v197[16] = v201;
            *((void *)v197 + 3) = *((void *)v198 + 3);
            uint64_t v202 = *((void *)v198 + 4);
            uint64_t v203 = *((void *)v198 + 5);
            char v204 = v198[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v202, v203, v204);
            *((void *)v197 + 4) = v202;
            *((void *)v197 + 5) = v203;
            v197[48] = v204;
            *(_OWORD *)(v197 + 56) = *(_OWORD *)(v198 + 56);
          }
          else
          {
            *(_OWORD *)long long v197 = *(_OWORD *)v198;
            long long v205 = *((_OWORD *)v198 + 1);
            long long v206 = *((_OWORD *)v198 + 2);
            long long v207 = *((_OWORD *)v198 + 3);
            *((void *)v197 + 8) = *((void *)v198 + 8);
            *((_OWORD *)v197 + 2) = v206;
            *((_OWORD *)v197 + 3) = v207;
            *((_OWORD *)v197 + 1) = v205;
          }
          uint64_t v208 = v9[20];
          long long v209 = (char *)v7 + v208;
          uint64_t v210 = (char *)v8 + v208;
          if (*(void *)((char *)v8 + v208 + 24))
          {
            uint64_t v211 = *(void *)v210;
            uint64_t v212 = *((void *)v210 + 1);
            char v213 = v210[16];
            sub_21F7652C0(*(void *)v210, v212, v213);
            *(void *)long long v209 = v211;
            *((void *)v209 + 1) = v212;
            v209[16] = v213;
            *((void *)v209 + 3) = *((void *)v210 + 3);
            uint64_t v214 = *((void *)v210 + 4);
            uint64_t v215 = *((void *)v210 + 5);
            char v216 = v210[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v214, v215, v216);
            *((void *)v209 + 4) = v214;
            *((void *)v209 + 5) = v215;
            v209[48] = v216;
            *(_OWORD *)(v209 + 56) = *(_OWORD *)(v210 + 56);
          }
          else
          {
            *(_OWORD *)long long v209 = *(_OWORD *)v210;
            long long v217 = *((_OWORD *)v210 + 1);
            long long v218 = *((_OWORD *)v210 + 2);
            long long v219 = *((_OWORD *)v210 + 3);
            *((void *)v209 + 8) = *((void *)v210 + 8);
            *((_OWORD *)v209 + 2) = v218;
            *((_OWORD *)v209 + 3) = v219;
            *((_OWORD *)v209 + 1) = v217;
          }
          uint64_t v220 = v9[21];
          char v221 = (char *)v7 + v220;
          long long v222 = (char *)v8 + v220;
          if (*(void *)((char *)v8 + v220 + 24))
          {
            uint64_t v223 = *(void *)v222;
            uint64_t v224 = *((void *)v222 + 1);
            char v225 = v222[16];
            sub_21F7652C0(*(void *)v222, v224, v225);
            *(void *)char v221 = v223;
            *((void *)v221 + 1) = v224;
            v221[16] = v225;
            *((void *)v221 + 3) = *((void *)v222 + 3);
            uint64_t v226 = *((void *)v222 + 4);
            uint64_t v227 = *((void *)v222 + 5);
            char v228 = v222[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v226, v227, v228);
            *((void *)v221 + 4) = v226;
            *((void *)v221 + 5) = v227;
            v221[48] = v228;
            *(_OWORD *)(v221 + 56) = *(_OWORD *)(v222 + 56);
          }
          else
          {
            *(_OWORD *)char v221 = *(_OWORD *)v222;
            long long v229 = *((_OWORD *)v222 + 1);
            long long v230 = *((_OWORD *)v222 + 2);
            long long v231 = *((_OWORD *)v222 + 3);
            *((void *)v221 + 8) = *((void *)v222 + 8);
            *((_OWORD *)v221 + 2) = v230;
            *((_OWORD *)v221 + 3) = v231;
            *((_OWORD *)v221 + 1) = v229;
          }
          uint64_t v232 = v9[22];
          uint64_t v233 = (char *)v7 + v232;
          uint64_t v234 = (char *)v8 + v232;
          long long v235 = *(_OWORD *)v234;
          *((void *)v233 + 2) = *((void *)v234 + 2);
          *(_OWORD *)uint64_t v233 = v235;
          uint64_t v236 = v9[23];
          uint64_t v237 = (char *)v7 + v236;
          long long v238 = (char *)v8 + v236;
          long long v239 = *(_OWORD *)v238;
          *((void *)v237 + 2) = *((void *)v238 + 2);
          *(_OWORD *)uint64_t v237 = v239;
          uint64_t v240 = v9[24];
          uint64_t v241 = (char *)v7 + v240;
          long long v242 = (char *)v8 + v240;
          if (*(void *)((char *)v8 + v240 + 24))
          {
            uint64_t v243 = *(void *)v242;
            uint64_t v244 = *((void *)v242 + 1);
            char v245 = v242[16];
            sub_21F7652C0(*(void *)v242, v244, v245);
            *(void *)uint64_t v241 = v243;
            *((void *)v241 + 1) = v244;
            v241[16] = v245;
            *((void *)v241 + 3) = *((void *)v242 + 3);
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v246 = *((_OWORD *)v242 + 1);
            *(_OWORD *)uint64_t v241 = *(_OWORD *)v242;
            *((_OWORD *)v241 + 1) = v246;
          }
          uint64_t v247 = v9[25];
          uint64_t v248 = (char *)v7 + v247;
          long long v249 = (char *)v8 + v247;
          if (*(void *)((char *)v8 + v247 + 24))
          {
            uint64_t v250 = *(void *)v249;
            uint64_t v251 = *((void *)v249 + 1);
            char v252 = v249[16];
            sub_21F7652C0(*(void *)v249, v251, v252);
            *(void *)uint64_t v248 = v250;
            *((void *)v248 + 1) = v251;
            v248[16] = v252;
            *((void *)v248 + 3) = *((void *)v249 + 3);
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v253 = *((_OWORD *)v249 + 1);
            *(_OWORD *)uint64_t v248 = *(_OWORD *)v249;
            *((_OWORD *)v248 + 1) = v253;
          }
          uint64_t v254 = v9[26];
          uint64_t v255 = (void *)((char *)v7 + v254);
          uint64_t v256 = (void *)((char *)v8 + v254);
          *uint64_t v255 = *v256;
          v255[1] = v256[1];
          *((unsigned char *)v7 + v9[27]) = *((unsigned char *)v8 + v9[27]);
          uint64_t v257 = v9[28];
          long long v258 = (char *)v7 + v257;
          uint64_t v259 = (char *)v8 + v257;
          uint64_t v260 = *((void *)v259 + 3);
          swift_bridgeObjectRetain();
          if (v260)
          {
            *((void *)v258 + 3) = v260;
            (**(void (***)(char *, char *, uint64_t))(v260 - 8))(v258, v259, v260);
          }
          else
          {
            long long v261 = *((_OWORD *)v259 + 1);
            *(_OWORD *)long long v258 = *(_OWORD *)v259;
            *((_OWORD *)v258 + 1) = v261;
          }
          uint64_t v5 = v385;
          uint64_t v2 = v386;
          (*(void (**)(_OWORD *, void, uint64_t, int *))(v10 + 56))(v388, 0, 1, v9);
        }
        uint64_t v262 = v5[9];
        uint64_t v263 = v2 + v262;
        uint64_t v264 = (long long *)(a2 + v262);
        long long v265 = *v264;
        long long v266 = v264[1];
        *(unsigned char *)(v263 + 32) = *((unsigned char *)v264 + 32);
        *(_OWORD *)uint64_t v263 = v265;
        *(_OWORD *)(v263 + 16) = v266;
        uint64_t v267 = v5[10];
        uint64_t v268 = v2 + v267;
        uint64_t v269 = a2 + v267;
        uint64_t v270 = sub_21FA24C90();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v270 - 8) + 16))(v268, v269, v270);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return v2;
}

_OWORD *sub_21F81E36C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      long long v15 = a2[1];
      *a1 = *a2;
      a1[1] = v15;
      *((void *)a1 + 4) = *((void *)a2 + 4);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
      uint64_t v16 = *(int *)(type metadata accessor for RulesRenderer(0) + 32);
      uint64_t v17 = (_OWORD *)((char *)a1 + v16);
      uint64_t v18 = (_OWORD *)((char *)a2 + v16);
      uint64_t v19 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      uint64_t v20 = *((void *)v19 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
      {
        uint64_t v21 = sub_21F76CA40(qword_267EE7A88);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        long long v41 = v18[1];
        *uint64_t v17 = *v18;
        v17[1] = v41;
        *(_OWORD *)((char *)v17 + 25) = *(_OWORD *)((char *)v18 + 25);
        *((unsigned char *)v17 + 41) = *((unsigned char *)v18 + 41);
        long long v42 = v18[4];
        _OWORD v17[3] = v18[3];
        v17[4] = v42;
        *((void *)v17 + 10) = *((void *)v18 + 10);
        long long v43 = *(_OWORD *)((char *)v18 + 88);
        long long v44 = *(_OWORD *)((char *)v18 + 104);
        *(_OWORD *)((char *)v17 + 113) = *(_OWORD *)((char *)v18 + 113);
        *(_OWORD *)((char *)v17 + 104) = v44;
        *(_OWORD *)((char *)v17 + 88) = v43;
        *(_OWORD *)((char *)v17 + 136) = *(_OWORD *)((char *)v18 + 136);
        *((unsigned char *)v17 + 152) = *((unsigned char *)v18 + 152);
        *((void *)v17 + 20) = *((void *)v18 + 20);
        *((unsigned char *)v17 + 168) = *((unsigned char *)v18 + 168);
        long long v45 = v18[12];
        v17[11] = v18[11];
        v17[12] = v45;
        *((unsigned char *)v17 + 208) = *((unsigned char *)v18 + 208);
        uint64_t v46 = v19[11];
        uint64_t v47 = (char *)v17 + v46;
        long long v48 = (char *)v18 + v46;
        uint64_t v49 = sub_21FA24C90();
        uint64_t v50 = *(void *)(v49 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
        {
          uint64_t v51 = sub_21F76CA40(&qword_26AD47C20);
          memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v47, v48, v49);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
        }
        uint64_t v72 = v19[12];
        uint64_t v73 = (char *)v17 + v72;
        long long v74 = (char *)v18 + v72;
        *(void *)uint64_t v73 = *(void *)v74;
        v73[8] = v74[8];
        *(void *)((char *)v17 + v19[13]) = *(void *)((char *)v18 + v19[13]);
        uint64_t v75 = v19[14];
        uint64_t v76 = (char *)v17 + v75;
        uint64_t v77 = (char *)v18 + v75;
        uint64_t v78 = sub_21FA25910();
        uint64_t v79 = *(void *)(v78 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
        {
          uint64_t v80 = sub_21F76CA40(&qword_26AD4A3B8);
          memcpy(v76, v77, *(void *)(*(void *)(v80 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v76, v77, v78);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
        }
        uint64_t v139 = v19[15];
        uint64_t v140 = (char *)v17 + v139;
        uint64_t v141 = (char *)v18 + v139;
        *(void *)uint64_t v140 = *(void *)v141;
        *((_WORD *)v140 + 4) = *((_WORD *)v141 + 4);
        *(void *)((char *)v17 + v19[16]) = *(void *)((char *)v18 + v19[16]);
        *(void *)((char *)v17 + v19[17]) = *(void *)((char *)v18 + v19[17]);
        uint64_t v142 = v19[18];
        char v143 = (char *)v17 + v142;
        long long v144 = (char *)v18 + v142;
        long long v145 = *((_OWORD *)v144 + 3);
        *((_OWORD *)v143 + 2) = *((_OWORD *)v144 + 2);
        *((_OWORD *)v143 + 3) = v145;
        *((void *)v143 + 8) = *((void *)v144 + 8);
        long long v146 = *((_OWORD *)v144 + 1);
        *(_OWORD *)char v143 = *(_OWORD *)v144;
        *((_OWORD *)v143 + 1) = v146;
        uint64_t v147 = v19[19];
        uint64_t v148 = (char *)v17 + v147;
        uint64_t v149 = (char *)v18 + v147;
        *((void *)v148 + 8) = *((void *)v149 + 8);
        long long v150 = *((_OWORD *)v149 + 3);
        *((_OWORD *)v148 + 2) = *((_OWORD *)v149 + 2);
        *((_OWORD *)v148 + 3) = v150;
        long long v151 = *((_OWORD *)v149 + 1);
        *(_OWORD *)uint64_t v148 = *(_OWORD *)v149;
        *((_OWORD *)v148 + 1) = v151;
        uint64_t v152 = v19[20];
        uint64_t v153 = (char *)v17 + v152;
        long long v154 = (char *)v18 + v152;
        long long v155 = *((_OWORD *)v154 + 3);
        *((_OWORD *)v153 + 2) = *((_OWORD *)v154 + 2);
        *((_OWORD *)v153 + 3) = v155;
        *((void *)v153 + 8) = *((void *)v154 + 8);
        long long v156 = *((_OWORD *)v154 + 1);
        *(_OWORD *)uint64_t v153 = *(_OWORD *)v154;
        *((_OWORD *)v153 + 1) = v156;
        uint64_t v157 = v19[21];
        uint64_t v158 = (char *)v17 + v157;
        long long v159 = (char *)v18 + v157;
        *((void *)v158 + 8) = *((void *)v159 + 8);
        long long v160 = *((_OWORD *)v159 + 3);
        *((_OWORD *)v158 + 2) = *((_OWORD *)v159 + 2);
        *((_OWORD *)v158 + 3) = v160;
        long long v161 = *((_OWORD *)v159 + 1);
        *(_OWORD *)uint64_t v158 = *(_OWORD *)v159;
        *((_OWORD *)v158 + 1) = v161;
        uint64_t v162 = v19[22];
        long long v163 = (char *)v17 + v162;
        uint64_t v164 = (char *)v18 + v162;
        *(_OWORD *)long long v163 = *(_OWORD *)v164;
        *((void *)v163 + 2) = *((void *)v164 + 2);
        uint64_t v165 = v19[23];
        uint64_t v166 = (char *)v17 + v165;
        uint64_t v167 = (char *)v18 + v165;
        *(_OWORD *)uint64_t v166 = *(_OWORD *)v167;
        *((void *)v166 + 2) = *((void *)v167 + 2);
        uint64_t v168 = v19[24];
        uint64_t v169 = (_OWORD *)((char *)v17 + v168);
        uint64_t v170 = (_OWORD *)((char *)v18 + v168);
        long long v171 = v170[1];
        _OWORD *v169 = *v170;
        v169[1] = v171;
        uint64_t v172 = v19[25];
        uint64_t v173 = (_OWORD *)((char *)v17 + v172);
        uint64_t v174 = (_OWORD *)((char *)v18 + v172);
        long long v175 = v174[1];
        *uint64_t v173 = *v174;
        v173[1] = v175;
        *(_OWORD *)((char *)v17 + v19[26]) = *(_OWORD *)((char *)v18 + v19[26]);
        *((unsigned char *)v17 + v19[27]) = *((unsigned char *)v18 + v19[27]);
        uint64_t v176 = v19[28];
        uint64_t v177 = (_OWORD *)((char *)v17 + v176);
        uint64_t v178 = (_OWORD *)((char *)v18 + v176);
        long long v179 = v178[1];
        *uint64_t v177 = *v178;
        v177[1] = v179;
        (*(void (**)(_OWORD *, void, uint64_t, int *))(v20 + 56))(v17, 0, 1, v19);
      }
LABEL_35:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 1:
      long long v22 = a2[1];
      *a1 = *a2;
      a1[1] = v22;
      *((void *)a1 + 4) = *((void *)a2 + 4);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
      uint64_t v23 = (int *)type metadata accessor for PointsRenderer(0);
      uint64_t v24 = v23[8];
      uint64_t v25 = (_OWORD *)((char *)a1 + v24);
      uint64_t v26 = (_OWORD *)((char *)a2 + v24);
      uint64_t v27 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      uint64_t v28 = *((void *)v27 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v28 + 48))(v26, 1, v27))
      {
        uint64_t v29 = sub_21F76CA40(qword_267EE7A88);
        memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        uint64_t v230 = v28;
        uint64_t v232 = v23;
        long long v52 = v26[1];
        _OWORD *v25 = *v26;
        v25[1] = v52;
        *(_OWORD *)((char *)v25 + 25) = *(_OWORD *)((char *)v26 + 25);
        *((unsigned char *)v25 + 41) = *((unsigned char *)v26 + 41);
        long long v53 = v26[4];
        v25[3] = v26[3];
        v25[4] = v53;
        *((void *)v25 + 10) = *((void *)v26 + 10);
        long long v54 = *(_OWORD *)((char *)v26 + 88);
        long long v55 = *(_OWORD *)((char *)v26 + 104);
        *(_OWORD *)((char *)v25 + 113) = *(_OWORD *)((char *)v26 + 113);
        *(_OWORD *)((char *)v25 + 104) = v55;
        *(_OWORD *)((char *)v25 + 88) = v54;
        *(_OWORD *)((char *)v25 + 136) = *(_OWORD *)((char *)v26 + 136);
        *((unsigned char *)v25 + 152) = *((unsigned char *)v26 + 152);
        *((void *)v25 + 20) = *((void *)v26 + 20);
        *((unsigned char *)v25 + 168) = *((unsigned char *)v26 + 168);
        long long v56 = v26[12];
        v25[11] = v26[11];
        v25[12] = v56;
        *((unsigned char *)v25 + 208) = *((unsigned char *)v26 + 208);
        uint64_t v57 = v27[11];
        long long v58 = (char *)v25 + v57;
        uint64_t v59 = (char *)v26 + v57;
        uint64_t v60 = sub_21FA24C90();
        uint64_t v61 = *(void *)(v60 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
        {
          uint64_t v62 = sub_21F76CA40(&qword_26AD47C20);
          memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v58, v59, v60);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
        }
        uint64_t v81 = v27[12];
        long long v82 = (char *)v25 + v81;
        long long v83 = (char *)v26 + v81;
        *(void *)long long v82 = *(void *)v83;
        v82[8] = v83[8];
        *(void *)((char *)v25 + v27[13]) = *(void *)((char *)v26 + v27[13]);
        uint64_t v84 = v27[14];
        uint64_t v85 = (char *)v25 + v84;
        uint64_t v86 = (char *)v26 + v84;
        uint64_t v87 = sub_21FA25910();
        uint64_t v88 = *(void *)(v87 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v86, 1, v87))
        {
          uint64_t v89 = sub_21F76CA40(&qword_26AD4A3B8);
          memcpy(v85, v86, *(void *)(*(void *)(v89 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v85, v86, v87);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56))(v85, 0, 1, v87);
        }
        uint64_t v23 = v232;
        uint64_t v180 = v27[15];
        uint64_t v181 = (char *)v25 + v180;
        char v182 = (char *)v26 + v180;
        *(void *)uint64_t v181 = *(void *)v182;
        *((_WORD *)v181 + 4) = *((_WORD *)v182 + 4);
        *(void *)((char *)v25 + v27[16]) = *(void *)((char *)v26 + v27[16]);
        *(void *)((char *)v25 + v27[17]) = *(void *)((char *)v26 + v27[17]);
        uint64_t v183 = v27[18];
        uint64_t v184 = (char *)v25 + v183;
        char v185 = (char *)v26 + v183;
        long long v186 = *((_OWORD *)v185 + 3);
        *((_OWORD *)v184 + 2) = *((_OWORD *)v185 + 2);
        *((_OWORD *)v184 + 3) = v186;
        *((void *)v184 + 8) = *((void *)v185 + 8);
        long long v187 = *((_OWORD *)v185 + 1);
        *(_OWORD *)uint64_t v184 = *(_OWORD *)v185;
        *((_OWORD *)v184 + 1) = v187;
        uint64_t v188 = v27[19];
        char v189 = (char *)v25 + v188;
        uint64_t v190 = (char *)v26 + v188;
        *((void *)v189 + 8) = *((void *)v190 + 8);
        long long v191 = *((_OWORD *)v190 + 3);
        *((_OWORD *)v189 + 2) = *((_OWORD *)v190 + 2);
        *((_OWORD *)v189 + 3) = v191;
        long long v192 = *((_OWORD *)v190 + 1);
        *(_OWORD *)char v189 = *(_OWORD *)v190;
        *((_OWORD *)v189 + 1) = v192;
        uint64_t v193 = v27[20];
        long long v194 = (char *)v25 + v193;
        long long v195 = (char *)v26 + v193;
        long long v196 = *((_OWORD *)v195 + 3);
        *((_OWORD *)v194 + 2) = *((_OWORD *)v195 + 2);
        *((_OWORD *)v194 + 3) = v196;
        *((void *)v194 + 8) = *((void *)v195 + 8);
        long long v197 = *((_OWORD *)v195 + 1);
        *(_OWORD *)long long v194 = *(_OWORD *)v195;
        *((_OWORD *)v194 + 1) = v197;
        uint64_t v198 = v27[21];
        uint64_t v199 = (char *)v25 + v198;
        uint64_t v200 = (char *)v26 + v198;
        *((void *)v199 + 8) = *((void *)v200 + 8);
        long long v201 = *((_OWORD *)v200 + 3);
        *((_OWORD *)v199 + 2) = *((_OWORD *)v200 + 2);
        *((_OWORD *)v199 + 3) = v201;
        long long v202 = *((_OWORD *)v200 + 1);
        *(_OWORD *)uint64_t v199 = *(_OWORD *)v200;
        *((_OWORD *)v199 + 1) = v202;
        uint64_t v203 = v27[22];
        char v204 = (char *)v25 + v203;
        long long v205 = (char *)v26 + v203;
        *(_OWORD *)char v204 = *(_OWORD *)v205;
        *((void *)v204 + 2) = *((void *)v205 + 2);
        uint64_t v206 = v27[23];
        long long v207 = (char *)v25 + v206;
        uint64_t v208 = (char *)v26 + v206;
        *(_OWORD *)long long v207 = *(_OWORD *)v208;
        *((void *)v207 + 2) = *((void *)v208 + 2);
        uint64_t v209 = v27[24];
        uint64_t v210 = (_OWORD *)((char *)v25 + v209);
        uint64_t v211 = (_OWORD *)((char *)v26 + v209);
        long long v212 = v211[1];
        *uint64_t v210 = *v211;
        v210[1] = v212;
        uint64_t v213 = v27[25];
        uint64_t v214 = (_OWORD *)((char *)v25 + v213);
        uint64_t v215 = (_OWORD *)((char *)v26 + v213);
        long long v216 = v215[1];
        *uint64_t v214 = *v215;
        v214[1] = v216;
        *(_OWORD *)((char *)v25 + v27[26]) = *(_OWORD *)((char *)v26 + v27[26]);
        *((unsigned char *)v25 + v27[27]) = *((unsigned char *)v26 + v27[27]);
        uint64_t v217 = v27[28];
        long long v218 = (_OWORD *)((char *)v25 + v217);
        long long v219 = (_OWORD *)((char *)v26 + v217);
        long long v220 = v219[1];
        *long long v218 = *v219;
        v218[1] = v220;
        (*(void (**)(_OWORD *, void, uint64_t, int *))(v230 + 56))(v25, 0, 1, v27);
      }
      uint64_t v221 = v23[9];
      long long v222 = (_OWORD *)((char *)a1 + v221);
      uint64_t v223 = (_OWORD *)((char *)a2 + v221);
      long long v224 = v223[1];
      *long long v222 = *v223;
      v222[1] = v224;
      *(_OWORD *)((char *)v222 + 25) = *(_OWORD *)((char *)v223 + 25);
      uint64_t v225 = v23[10];
      uint64_t v226 = (char *)a1 + v225;
      uint64_t v227 = (char *)a2 + v225;
      v226[16] = v227[16];
      *(_OWORD *)uint64_t v226 = *(_OWORD *)v227;
      goto LABEL_35;
    case 0:
      long long v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      *((void *)a1 + 4) = *((void *)a2 + 4);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
      uint64_t v8 = (int *)type metadata accessor for RectanglesRenderer(0);
      uint64_t v9 = v8[8];
      uint64_t v10 = (_OWORD *)((char *)a1 + v9);
      uint64_t v11 = (_OWORD *)((char *)a2 + v9);
      uint64_t v12 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      uint64_t v13 = *((void *)v12 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
      {
        uint64_t v14 = sub_21F76CA40(qword_267EE7A88);
        memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        uint64_t v229 = v13;
        long long v231 = v8;
        long long v30 = v11[1];
        *uint64_t v10 = *v11;
        v10[1] = v30;
        *(_OWORD *)((char *)v10 + 25) = *(_OWORD *)((char *)v11 + 25);
        *((unsigned char *)v10 + 41) = *((unsigned char *)v11 + 41);
        long long v31 = v11[4];
        v10[3] = v11[3];
        v10[4] = v31;
        *((void *)v10 + 10) = *((void *)v11 + 10);
        long long v32 = *(_OWORD *)((char *)v11 + 88);
        long long v33 = *(_OWORD *)((char *)v11 + 104);
        *(_OWORD *)((char *)v10 + 113) = *(_OWORD *)((char *)v11 + 113);
        *(_OWORD *)((char *)v10 + 104) = v33;
        *(_OWORD *)((char *)v10 + 88) = v32;
        *(_OWORD *)((char *)v10 + 136) = *(_OWORD *)((char *)v11 + 136);
        *((unsigned char *)v10 + 152) = *((unsigned char *)v11 + 152);
        *((void *)v10 + 20) = *((void *)v11 + 20);
        *((unsigned char *)v10 + 168) = *((unsigned char *)v11 + 168);
        long long v34 = v11[12];
        v10[11] = v11[11];
        v10[12] = v34;
        *((unsigned char *)v10 + 208) = *((unsigned char *)v11 + 208);
        uint64_t v35 = v12[11];
        long long v36 = (char *)v10 + v35;
        uint64_t v37 = (char *)v11 + v35;
        uint64_t v38 = sub_21FA24C90();
        uint64_t v39 = *(void *)(v38 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
        {
          uint64_t v40 = sub_21F76CA40(&qword_26AD47C20);
          memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
        }
        uint64_t v63 = v12[12];
        unint64_t v64 = (char *)v10 + v63;
        uint64_t v65 = (char *)v11 + v63;
        *(void *)unint64_t v64 = *(void *)v65;
        v64[8] = v65[8];
        *(void *)((char *)v10 + v12[13]) = *(void *)((char *)v11 + v12[13]);
        uint64_t v66 = v12[14];
        uint64_t v67 = (char *)v10 + v66;
        uint64_t v68 = (char *)v11 + v66;
        uint64_t v69 = sub_21FA25910();
        uint64_t v70 = *(void *)(v69 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
        {
          uint64_t v71 = sub_21F76CA40(&qword_26AD4A3B8);
          memcpy(v67, v68, *(void *)(*(void *)(v71 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v67, v68, v69);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
        }
        uint64_t v8 = v231;
        uint64_t v90 = v12[15];
        long long v91 = (char *)v10 + v90;
        long long v92 = (char *)v11 + v90;
        *(void *)long long v91 = *(void *)v92;
        *((_WORD *)v91 + 4) = *((_WORD *)v92 + 4);
        *(void *)((char *)v10 + v12[16]) = *(void *)((char *)v11 + v12[16]);
        *(void *)((char *)v10 + v12[17]) = *(void *)((char *)v11 + v12[17]);
        uint64_t v93 = v12[18];
        uint64_t v94 = (char *)v10 + v93;
        uint64_t v95 = (char *)v11 + v93;
        long long v96 = *((_OWORD *)v95 + 3);
        *((_OWORD *)v94 + 2) = *((_OWORD *)v95 + 2);
        *((_OWORD *)v94 + 3) = v96;
        *((void *)v94 + 8) = *((void *)v95 + 8);
        long long v97 = *((_OWORD *)v95 + 1);
        *(_OWORD *)uint64_t v94 = *(_OWORD *)v95;
        *((_OWORD *)v94 + 1) = v97;
        uint64_t v98 = v12[19];
        char v99 = (char *)v10 + v98;
        uint64_t v100 = (char *)v11 + v98;
        *((void *)v99 + 8) = *((void *)v100 + 8);
        long long v101 = *((_OWORD *)v100 + 3);
        *((_OWORD *)v99 + 2) = *((_OWORD *)v100 + 2);
        *((_OWORD *)v99 + 3) = v101;
        long long v102 = *((_OWORD *)v100 + 1);
        *(_OWORD *)char v99 = *(_OWORD *)v100;
        *((_OWORD *)v99 + 1) = v102;
        uint64_t v103 = v12[20];
        long long v104 = (char *)v10 + v103;
        long long v105 = (char *)v11 + v103;
        long long v106 = *((_OWORD *)v105 + 3);
        *((_OWORD *)v104 + 2) = *((_OWORD *)v105 + 2);
        *((_OWORD *)v104 + 3) = v106;
        *((void *)v104 + 8) = *((void *)v105 + 8);
        long long v107 = *((_OWORD *)v105 + 1);
        *(_OWORD *)long long v104 = *(_OWORD *)v105;
        *((_OWORD *)v104 + 1) = v107;
        uint64_t v108 = v12[21];
        uint64_t v109 = (char *)v10 + v108;
        uint64_t v110 = (char *)v11 + v108;
        *((void *)v109 + 8) = *((void *)v110 + 8);
        long long v111 = *((_OWORD *)v110 + 3);
        *((_OWORD *)v109 + 2) = *((_OWORD *)v110 + 2);
        *((_OWORD *)v109 + 3) = v111;
        long long v112 = *((_OWORD *)v110 + 1);
        *(_OWORD *)uint64_t v109 = *(_OWORD *)v110;
        *((_OWORD *)v109 + 1) = v112;
        uint64_t v113 = v12[22];
        char v114 = (char *)v10 + v113;
        long long v115 = (char *)v11 + v113;
        *(_OWORD *)char v114 = *(_OWORD *)v115;
        *((void *)v114 + 2) = *((void *)v115 + 2);
        uint64_t v116 = v12[23];
        long long v117 = (char *)v10 + v116;
        uint64_t v118 = (char *)v11 + v116;
        *(_OWORD *)long long v117 = *(_OWORD *)v118;
        *((void *)v117 + 2) = *((void *)v118 + 2);
        uint64_t v119 = v12[24];
        uint64_t v120 = (_OWORD *)((char *)v10 + v119);
        uint64_t v121 = (_OWORD *)((char *)v11 + v119);
        long long v122 = v121[1];
        *uint64_t v120 = *v121;
        v120[1] = v122;
        uint64_t v123 = v12[25];
        uint64_t v124 = (_OWORD *)((char *)v10 + v123);
        uint64_t v125 = (_OWORD *)((char *)v11 + v123);
        long long v126 = v125[1];
        _OWORD *v124 = *v125;
        v124[1] = v126;
        *(_OWORD *)((char *)v10 + v12[26]) = *(_OWORD *)((char *)v11 + v12[26]);
        *((unsigned char *)v10 + v12[27]) = *((unsigned char *)v11 + v12[27]);
        uint64_t v127 = v12[28];
        long long v128 = (_OWORD *)((char *)v10 + v127);
        long long v129 = (_OWORD *)((char *)v11 + v127);
        long long v130 = v129[1];
        *long long v128 = *v129;
        v128[1] = v130;
        (*(void (**)(_OWORD *, void, uint64_t, int *))(v229 + 56))(v10, 0, 1, v12);
      }
      uint64_t v131 = v8[9];
      uint64_t v132 = (char *)a1 + v131;
      long long v133 = (char *)a2 + v131;
      long long v134 = *((_OWORD *)v133 + 1);
      *(_OWORD *)uint64_t v132 = *(_OWORD *)v133;
      *((_OWORD *)v132 + 1) = v134;
      v132[32] = v133[32];
      uint64_t v135 = v8[10];
      long long v136 = (char *)a1 + v135;
      long long v137 = (char *)a2 + v135;
      uint64_t v138 = sub_21FA24C90();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v138 - 8) + 32))(v136, v137, v138);
      goto LABEL_35;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

_OWORD *sub_21F81F258(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_21F83E378((uint64_t)a1, type metadata accessor for AnyVectorizedRenderer.MarkRenderer);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        long long v15 = a2[1];
        *a1 = *a2;
        a1[1] = v15;
        *((void *)a1 + 4) = *((void *)a2 + 4);
        *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
        *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
        uint64_t v16 = *(int *)(type metadata accessor for RulesRenderer(0) + 32);
        uint64_t v17 = (_OWORD *)((char *)a1 + v16);
        uint64_t v18 = (_OWORD *)((char *)a2 + v16);
        uint64_t v19 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
        uint64_t v20 = *((void *)v19 - 1);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
        {
          uint64_t v21 = sub_21F76CA40(qword_267EE7A88);
          memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
        }
        else
        {
          long long v41 = v18[1];
          *uint64_t v17 = *v18;
          v17[1] = v41;
          *(_OWORD *)((char *)v17 + 25) = *(_OWORD *)((char *)v18 + 25);
          *((unsigned char *)v17 + 41) = *((unsigned char *)v18 + 41);
          long long v42 = v18[4];
          _OWORD v17[3] = v18[3];
          v17[4] = v42;
          *((void *)v17 + 10) = *((void *)v18 + 10);
          long long v43 = *(_OWORD *)((char *)v18 + 88);
          long long v44 = *(_OWORD *)((char *)v18 + 104);
          *(_OWORD *)((char *)v17 + 113) = *(_OWORD *)((char *)v18 + 113);
          *(_OWORD *)((char *)v17 + 104) = v44;
          *(_OWORD *)((char *)v17 + 88) = v43;
          *(_OWORD *)((char *)v17 + 136) = *(_OWORD *)((char *)v18 + 136);
          *((unsigned char *)v17 + 152) = *((unsigned char *)v18 + 152);
          *((void *)v17 + 20) = *((void *)v18 + 20);
          *((unsigned char *)v17 + 168) = *((unsigned char *)v18 + 168);
          long long v45 = v18[12];
          v17[11] = v18[11];
          v17[12] = v45;
          *((unsigned char *)v17 + 208) = *((unsigned char *)v18 + 208);
          uint64_t v46 = v19[11];
          uint64_t v47 = (char *)v17 + v46;
          long long v48 = (char *)v18 + v46;
          uint64_t v49 = sub_21FA24C90();
          uint64_t v50 = *(void *)(v49 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
          {
            uint64_t v51 = sub_21F76CA40(&qword_26AD47C20);
            memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v47, v48, v49);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
          }
          uint64_t v72 = v19[12];
          uint64_t v73 = (char *)v17 + v72;
          long long v74 = (char *)v18 + v72;
          *(void *)uint64_t v73 = *(void *)v74;
          v73[8] = v74[8];
          *(void *)((char *)v17 + v19[13]) = *(void *)((char *)v18 + v19[13]);
          uint64_t v75 = v19[14];
          uint64_t v76 = (char *)v17 + v75;
          uint64_t v77 = (char *)v18 + v75;
          uint64_t v78 = sub_21FA25910();
          uint64_t v79 = *(void *)(v78 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
          {
            uint64_t v80 = sub_21F76CA40(&qword_26AD4A3B8);
            memcpy(v76, v77, *(void *)(*(void *)(v80 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v76, v77, v78);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
          }
          uint64_t v139 = v19[15];
          uint64_t v140 = (char *)v17 + v139;
          uint64_t v141 = (char *)v18 + v139;
          *(void *)uint64_t v140 = *(void *)v141;
          *((_WORD *)v140 + 4) = *((_WORD *)v141 + 4);
          *(void *)((char *)v17 + v19[16]) = *(void *)((char *)v18 + v19[16]);
          *(void *)((char *)v17 + v19[17]) = *(void *)((char *)v18 + v19[17]);
          uint64_t v142 = v19[18];
          char v143 = (char *)v17 + v142;
          long long v144 = (char *)v18 + v142;
          long long v145 = *((_OWORD *)v144 + 3);
          *((_OWORD *)v143 + 2) = *((_OWORD *)v144 + 2);
          *((_OWORD *)v143 + 3) = v145;
          *((void *)v143 + 8) = *((void *)v144 + 8);
          long long v146 = *((_OWORD *)v144 + 1);
          *(_OWORD *)char v143 = *(_OWORD *)v144;
          *((_OWORD *)v143 + 1) = v146;
          uint64_t v147 = v19[19];
          uint64_t v148 = (char *)v17 + v147;
          uint64_t v149 = (char *)v18 + v147;
          *((void *)v148 + 8) = *((void *)v149 + 8);
          long long v150 = *((_OWORD *)v149 + 3);
          *((_OWORD *)v148 + 2) = *((_OWORD *)v149 + 2);
          *((_OWORD *)v148 + 3) = v150;
          long long v151 = *((_OWORD *)v149 + 1);
          *(_OWORD *)uint64_t v148 = *(_OWORD *)v149;
          *((_OWORD *)v148 + 1) = v151;
          uint64_t v152 = v19[20];
          uint64_t v153 = (char *)v17 + v152;
          long long v154 = (char *)v18 + v152;
          long long v155 = *((_OWORD *)v154 + 3);
          *((_OWORD *)v153 + 2) = *((_OWORD *)v154 + 2);
          *((_OWORD *)v153 + 3) = v155;
          *((void *)v153 + 8) = *((void *)v154 + 8);
          long long v156 = *((_OWORD *)v154 + 1);
          *(_OWORD *)uint64_t v153 = *(_OWORD *)v154;
          *((_OWORD *)v153 + 1) = v156;
          uint64_t v157 = v19[21];
          uint64_t v158 = (char *)v17 + v157;
          long long v159 = (char *)v18 + v157;
          *((void *)v158 + 8) = *((void *)v159 + 8);
          long long v160 = *((_OWORD *)v159 + 3);
          *((_OWORD *)v158 + 2) = *((_OWORD *)v159 + 2);
          *((_OWORD *)v158 + 3) = v160;
          long long v161 = *((_OWORD *)v159 + 1);
          *(_OWORD *)uint64_t v158 = *(_OWORD *)v159;
          *((_OWORD *)v158 + 1) = v161;
          uint64_t v162 = v19[22];
          long long v163 = (char *)v17 + v162;
          uint64_t v164 = (char *)v18 + v162;
          *(_OWORD *)long long v163 = *(_OWORD *)v164;
          *((void *)v163 + 2) = *((void *)v164 + 2);
          uint64_t v165 = v19[23];
          uint64_t v166 = (char *)v17 + v165;
          uint64_t v167 = (char *)v18 + v165;
          *(_OWORD *)uint64_t v166 = *(_OWORD *)v167;
          *((void *)v166 + 2) = *((void *)v167 + 2);
          uint64_t v168 = v19[24];
          uint64_t v169 = (_OWORD *)((char *)v17 + v168);
          uint64_t v170 = (_OWORD *)((char *)v18 + v168);
          long long v171 = v170[1];
          _OWORD *v169 = *v170;
          v169[1] = v171;
          uint64_t v172 = v19[25];
          uint64_t v173 = (_OWORD *)((char *)v17 + v172);
          uint64_t v174 = (_OWORD *)((char *)v18 + v172);
          long long v175 = v174[1];
          *uint64_t v173 = *v174;
          v173[1] = v175;
          *(_OWORD *)((char *)v17 + v19[26]) = *(_OWORD *)((char *)v18 + v19[26]);
          *((unsigned char *)v17 + v19[27]) = *((unsigned char *)v18 + v19[27]);
          uint64_t v176 = v19[28];
          uint64_t v177 = (_OWORD *)((char *)v17 + v176);
          uint64_t v178 = (_OWORD *)((char *)v18 + v176);
          long long v179 = v178[1];
          *uint64_t v177 = *v178;
          v177[1] = v179;
          (*(void (**)(_OWORD *, void, uint64_t, int *))(v20 + 56))(v17, 0, 1, v19);
        }
LABEL_36:
        swift_storeEnumTagMultiPayload();
        return a1;
      case 1:
        long long v22 = a2[1];
        *a1 = *a2;
        a1[1] = v22;
        *((void *)a1 + 4) = *((void *)a2 + 4);
        *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
        *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
        uint64_t v23 = (int *)type metadata accessor for PointsRenderer(0);
        uint64_t v24 = v23[8];
        uint64_t v25 = (_OWORD *)((char *)a1 + v24);
        uint64_t v26 = (_OWORD *)((char *)a2 + v24);
        uint64_t v27 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
        uint64_t v28 = *((void *)v27 - 1);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v28 + 48))(v26, 1, v27))
        {
          uint64_t v29 = sub_21F76CA40(qword_267EE7A88);
          memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
        }
        else
        {
          uint64_t v230 = v28;
          uint64_t v232 = v23;
          long long v52 = v26[1];
          _OWORD *v25 = *v26;
          v25[1] = v52;
          *(_OWORD *)((char *)v25 + 25) = *(_OWORD *)((char *)v26 + 25);
          *((unsigned char *)v25 + 41) = *((unsigned char *)v26 + 41);
          long long v53 = v26[4];
          v25[3] = v26[3];
          v25[4] = v53;
          *((void *)v25 + 10) = *((void *)v26 + 10);
          long long v54 = *(_OWORD *)((char *)v26 + 88);
          long long v55 = *(_OWORD *)((char *)v26 + 104);
          *(_OWORD *)((char *)v25 + 113) = *(_OWORD *)((char *)v26 + 113);
          *(_OWORD *)((char *)v25 + 104) = v55;
          *(_OWORD *)((char *)v25 + 88) = v54;
          *(_OWORD *)((char *)v25 + 136) = *(_OWORD *)((char *)v26 + 136);
          *((unsigned char *)v25 + 152) = *((unsigned char *)v26 + 152);
          *((void *)v25 + 20) = *((void *)v26 + 20);
          *((unsigned char *)v25 + 168) = *((unsigned char *)v26 + 168);
          long long v56 = v26[12];
          v25[11] = v26[11];
          v25[12] = v56;
          *((unsigned char *)v25 + 208) = *((unsigned char *)v26 + 208);
          uint64_t v57 = v27[11];
          long long v58 = (char *)v25 + v57;
          uint64_t v59 = (char *)v26 + v57;
          uint64_t v60 = sub_21FA24C90();
          uint64_t v61 = *(void *)(v60 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
          {
            uint64_t v62 = sub_21F76CA40(&qword_26AD47C20);
            memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v58, v59, v60);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
          }
          uint64_t v81 = v27[12];
          long long v82 = (char *)v25 + v81;
          long long v83 = (char *)v26 + v81;
          *(void *)long long v82 = *(void *)v83;
          v82[8] = v83[8];
          *(void *)((char *)v25 + v27[13]) = *(void *)((char *)v26 + v27[13]);
          uint64_t v84 = v27[14];
          uint64_t v85 = (char *)v25 + v84;
          uint64_t v86 = (char *)v26 + v84;
          uint64_t v87 = sub_21FA25910();
          uint64_t v88 = *(void *)(v87 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v86, 1, v87))
          {
            uint64_t v89 = sub_21F76CA40(&qword_26AD4A3B8);
            memcpy(v85, v86, *(void *)(*(void *)(v89 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v85, v86, v87);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56))(v85, 0, 1, v87);
          }
          uint64_t v23 = v232;
          uint64_t v180 = v27[15];
          uint64_t v181 = (char *)v25 + v180;
          char v182 = (char *)v26 + v180;
          *(void *)uint64_t v181 = *(void *)v182;
          *((_WORD *)v181 + 4) = *((_WORD *)v182 + 4);
          *(void *)((char *)v25 + v27[16]) = *(void *)((char *)v26 + v27[16]);
          *(void *)((char *)v25 + v27[17]) = *(void *)((char *)v26 + v27[17]);
          uint64_t v183 = v27[18];
          uint64_t v184 = (char *)v25 + v183;
          char v185 = (char *)v26 + v183;
          long long v186 = *((_OWORD *)v185 + 3);
          *((_OWORD *)v184 + 2) = *((_OWORD *)v185 + 2);
          *((_OWORD *)v184 + 3) = v186;
          *((void *)v184 + 8) = *((void *)v185 + 8);
          long long v187 = *((_OWORD *)v185 + 1);
          *(_OWORD *)uint64_t v184 = *(_OWORD *)v185;
          *((_OWORD *)v184 + 1) = v187;
          uint64_t v188 = v27[19];
          char v189 = (char *)v25 + v188;
          uint64_t v190 = (char *)v26 + v188;
          *((void *)v189 + 8) = *((void *)v190 + 8);
          long long v191 = *((_OWORD *)v190 + 3);
          *((_OWORD *)v189 + 2) = *((_OWORD *)v190 + 2);
          *((_OWORD *)v189 + 3) = v191;
          long long v192 = *((_OWORD *)v190 + 1);
          *(_OWORD *)char v189 = *(_OWORD *)v190;
          *((_OWORD *)v189 + 1) = v192;
          uint64_t v193 = v27[20];
          long long v194 = (char *)v25 + v193;
          long long v195 = (char *)v26 + v193;
          long long v196 = *((_OWORD *)v195 + 3);
          *((_OWORD *)v194 + 2) = *((_OWORD *)v195 + 2);
          *((_OWORD *)v194 + 3) = v196;
          *((void *)v194 + 8) = *((void *)v195 + 8);
          long long v197 = *((_OWORD *)v195 + 1);
          *(_OWORD *)long long v194 = *(_OWORD *)v195;
          *((_OWORD *)v194 + 1) = v197;
          uint64_t v198 = v27[21];
          uint64_t v199 = (char *)v25 + v198;
          uint64_t v200 = (char *)v26 + v198;
          *((void *)v199 + 8) = *((void *)v200 + 8);
          long long v201 = *((_OWORD *)v200 + 3);
          *((_OWORD *)v199 + 2) = *((_OWORD *)v200 + 2);
          *((_OWORD *)v199 + 3) = v201;
          long long v202 = *((_OWORD *)v200 + 1);
          *(_OWORD *)uint64_t v199 = *(_OWORD *)v200;
          *((_OWORD *)v199 + 1) = v202;
          uint64_t v203 = v27[22];
          char v204 = (char *)v25 + v203;
          long long v205 = (char *)v26 + v203;
          *(_OWORD *)char v204 = *(_OWORD *)v205;
          *((void *)v204 + 2) = *((void *)v205 + 2);
          uint64_t v206 = v27[23];
          long long v207 = (char *)v25 + v206;
          uint64_t v208 = (char *)v26 + v206;
          *(_OWORD *)long long v207 = *(_OWORD *)v208;
          *((void *)v207 + 2) = *((void *)v208 + 2);
          uint64_t v209 = v27[24];
          uint64_t v210 = (_OWORD *)((char *)v25 + v209);
          uint64_t v211 = (_OWORD *)((char *)v26 + v209);
          long long v212 = v211[1];
          *uint64_t v210 = *v211;
          v210[1] = v212;
          uint64_t v213 = v27[25];
          uint64_t v214 = (_OWORD *)((char *)v25 + v213);
          uint64_t v215 = (_OWORD *)((char *)v26 + v213);
          long long v216 = v215[1];
          *uint64_t v214 = *v215;
          v214[1] = v216;
          *(_OWORD *)((char *)v25 + v27[26]) = *(_OWORD *)((char *)v26 + v27[26]);
          *((unsigned char *)v25 + v27[27]) = *((unsigned char *)v26 + v27[27]);
          uint64_t v217 = v27[28];
          long long v218 = (_OWORD *)((char *)v25 + v217);
          long long v219 = (_OWORD *)((char *)v26 + v217);
          long long v220 = v219[1];
          *long long v218 = *v219;
          v218[1] = v220;
          (*(void (**)(_OWORD *, void, uint64_t, int *))(v230 + 56))(v25, 0, 1, v27);
        }
        uint64_t v221 = v23[9];
        long long v222 = (_OWORD *)((char *)a1 + v221);
        uint64_t v223 = (_OWORD *)((char *)a2 + v221);
        long long v224 = v223[1];
        *long long v222 = *v223;
        v222[1] = v224;
        *(_OWORD *)((char *)v222 + 25) = *(_OWORD *)((char *)v223 + 25);
        uint64_t v225 = v23[10];
        uint64_t v226 = (char *)a1 + v225;
        uint64_t v227 = (char *)a2 + v225;
        v226[16] = v227[16];
        *(_OWORD *)uint64_t v226 = *(_OWORD *)v227;
        goto LABEL_36;
      case 0:
        long long v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        *((void *)a1 + 4) = *((void *)a2 + 4);
        *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
        *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
        uint64_t v8 = (int *)type metadata accessor for RectanglesRenderer(0);
        uint64_t v9 = v8[8];
        uint64_t v10 = (_OWORD *)((char *)a1 + v9);
        uint64_t v11 = (_OWORD *)((char *)a2 + v9);
        uint64_t v12 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
        uint64_t v13 = *((void *)v12 - 1);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
        {
          uint64_t v14 = sub_21F76CA40(qword_267EE7A88);
          memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
        }
        else
        {
          uint64_t v229 = v13;
          long long v231 = v8;
          long long v30 = v11[1];
          *uint64_t v10 = *v11;
          v10[1] = v30;
          *(_OWORD *)((char *)v10 + 25) = *(_OWORD *)((char *)v11 + 25);
          *((unsigned char *)v10 + 41) = *((unsigned char *)v11 + 41);
          long long v31 = v11[4];
          v10[3] = v11[3];
          v10[4] = v31;
          *((void *)v10 + 10) = *((void *)v11 + 10);
          long long v32 = *(_OWORD *)((char *)v11 + 88);
          long long v33 = *(_OWORD *)((char *)v11 + 104);
          *(_OWORD *)((char *)v10 + 113) = *(_OWORD *)((char *)v11 + 113);
          *(_OWORD *)((char *)v10 + 104) = v33;
          *(_OWORD *)((char *)v10 + 88) = v32;
          *(_OWORD *)((char *)v10 + 136) = *(_OWORD *)((char *)v11 + 136);
          *((unsigned char *)v10 + 152) = *((unsigned char *)v11 + 152);
          *((void *)v10 + 20) = *((void *)v11 + 20);
          *((unsigned char *)v10 + 168) = *((unsigned char *)v11 + 168);
          long long v34 = v11[12];
          v10[11] = v11[11];
          v10[12] = v34;
          *((unsigned char *)v10 + 208) = *((unsigned char *)v11 + 208);
          uint64_t v35 = v12[11];
          long long v36 = (char *)v10 + v35;
          uint64_t v37 = (char *)v11 + v35;
          uint64_t v38 = sub_21FA24C90();
          uint64_t v39 = *(void *)(v38 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
          {
            uint64_t v40 = sub_21F76CA40(&qword_26AD47C20);
            memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
          }
          uint64_t v63 = v12[12];
          unint64_t v64 = (char *)v10 + v63;
          uint64_t v65 = (char *)v11 + v63;
          *(void *)unint64_t v64 = *(void *)v65;
          v64[8] = v65[8];
          *(void *)((char *)v10 + v12[13]) = *(void *)((char *)v11 + v12[13]);
          uint64_t v66 = v12[14];
          uint64_t v67 = (char *)v10 + v66;
          uint64_t v68 = (char *)v11 + v66;
          uint64_t v69 = sub_21FA25910();
          uint64_t v70 = *(void *)(v69 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
          {
            uint64_t v71 = sub_21F76CA40(&qword_26AD4A3B8);
            memcpy(v67, v68, *(void *)(*(void *)(v71 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v67, v68, v69);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
          }
          uint64_t v8 = v231;
          uint64_t v90 = v12[15];
          long long v91 = (char *)v10 + v90;
          long long v92 = (char *)v11 + v90;
          *(void *)long long v91 = *(void *)v92;
          *((_WORD *)v91 + 4) = *((_WORD *)v92 + 4);
          *(void *)((char *)v10 + v12[16]) = *(void *)((char *)v11 + v12[16]);
          *(void *)((char *)v10 + v12[17]) = *(void *)((char *)v11 + v12[17]);
          uint64_t v93 = v12[18];
          uint64_t v94 = (char *)v10 + v93;
          uint64_t v95 = (char *)v11 + v93;
          long long v96 = *((_OWORD *)v95 + 3);
          *((_OWORD *)v94 + 2) = *((_OWORD *)v95 + 2);
          *((_OWORD *)v94 + 3) = v96;
          *((void *)v94 + 8) = *((void *)v95 + 8);
          long long v97 = *((_OWORD *)v95 + 1);
          *(_OWORD *)uint64_t v94 = *(_OWORD *)v95;
          *((_OWORD *)v94 + 1) = v97;
          uint64_t v98 = v12[19];
          char v99 = (char *)v10 + v98;
          uint64_t v100 = (char *)v11 + v98;
          *((void *)v99 + 8) = *((void *)v100 + 8);
          long long v101 = *((_OWORD *)v100 + 3);
          *((_OWORD *)v99 + 2) = *((_OWORD *)v100 + 2);
          *((_OWORD *)v99 + 3) = v101;
          long long v102 = *((_OWORD *)v100 + 1);
          *(_OWORD *)char v99 = *(_OWORD *)v100;
          *((_OWORD *)v99 + 1) = v102;
          uint64_t v103 = v12[20];
          long long v104 = (char *)v10 + v103;
          long long v105 = (char *)v11 + v103;
          long long v106 = *((_OWORD *)v105 + 3);
          *((_OWORD *)v104 + 2) = *((_OWORD *)v105 + 2);
          *((_OWORD *)v104 + 3) = v106;
          *((void *)v104 + 8) = *((void *)v105 + 8);
          long long v107 = *((_OWORD *)v105 + 1);
          *(_OWORD *)long long v104 = *(_OWORD *)v105;
          *((_OWORD *)v104 + 1) = v107;
          uint64_t v108 = v12[21];
          uint64_t v109 = (char *)v10 + v108;
          uint64_t v110 = (char *)v11 + v108;
          *((void *)v109 + 8) = *((void *)v110 + 8);
          long long v111 = *((_OWORD *)v110 + 3);
          *((_OWORD *)v109 + 2) = *((_OWORD *)v110 + 2);
          *((_OWORD *)v109 + 3) = v111;
          long long v112 = *((_OWORD *)v110 + 1);
          *(_OWORD *)uint64_t v109 = *(_OWORD *)v110;
          *((_OWORD *)v109 + 1) = v112;
          uint64_t v113 = v12[22];
          char v114 = (char *)v10 + v113;
          long long v115 = (char *)v11 + v113;
          *(_OWORD *)char v114 = *(_OWORD *)v115;
          *((void *)v114 + 2) = *((void *)v115 + 2);
          uint64_t v116 = v12[23];
          long long v117 = (char *)v10 + v116;
          uint64_t v118 = (char *)v11 + v116;
          *(_OWORD *)long long v117 = *(_OWORD *)v118;
          *((void *)v117 + 2) = *((void *)v118 + 2);
          uint64_t v119 = v12[24];
          uint64_t v120 = (_OWORD *)((char *)v10 + v119);
          uint64_t v121 = (_OWORD *)((char *)v11 + v119);
          long long v122 = v121[1];
          *uint64_t v120 = *v121;
          v120[1] = v122;
          uint64_t v123 = v12[25];
          uint64_t v124 = (_OWORD *)((char *)v10 + v123);
          uint64_t v125 = (_OWORD *)((char *)v11 + v123);
          long long v126 = v125[1];
          _OWORD *v124 = *v125;
          v124[1] = v126;
          *(_OWORD *)((char *)v10 + v12[26]) = *(_OWORD *)((char *)v11 + v12[26]);
          *((unsigned char *)v10 + v12[27]) = *((unsigned char *)v11 + v12[27]);
          uint64_t v127 = v12[28];
          long long v128 = (_OWORD *)((char *)v10 + v127);
          long long v129 = (_OWORD *)((char *)v11 + v127);
          long long v130 = v129[1];
          *long long v128 = *v129;
          v128[1] = v130;
          (*(void (**)(_OWORD *, void, uint64_t, int *))(v229 + 56))(v10, 0, 1, v12);
        }
        uint64_t v131 = v8[9];
        uint64_t v132 = (char *)a1 + v131;
        long long v133 = (char *)a2 + v131;
        long long v134 = *((_OWORD *)v133 + 1);
        *(_OWORD *)uint64_t v132 = *(_OWORD *)v133;
        *((_OWORD *)v132 + 1) = v134;
        v132[32] = v133[32];
        uint64_t v135 = v8[10];
        long long v136 = (char *)a1 + v135;
        long long v137 = (char *)a2 + v135;
        uint64_t v138 = sub_21FA24C90();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v138 - 8) + 32))(v136, v137, v138);
        goto LABEL_36;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_21F820168(uint64_t a1, uint64_t *a2)
{
  int v4 = *(_DWORD *)(*(void *)(type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0) - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *(void *)a1 = *a2;
    a1 = v16 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        long long v17 = *(_OWORD *)(a2 + 3);
        *(_OWORD *)(a1 + 24) = v17;
        (**(void (***)(uint64_t, uint64_t *))(v17 - 8))(a1, a2);
        *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
        *(void *)(a1 + 48) = a2[6];
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
        uint64_t v18 = (int *)type metadata accessor for PointsRenderer(0);
        uint64_t v19 = v18[8];
        uint64_t v363 = a1;
        uint64_t v20 = (_OWORD *)(a1 + v19);
        uint64_t v21 = (_OWORD *)((char *)a2 + v19);
        long long v22 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
        uint64_t v23 = *((void *)v22 - 1);
        uint64_t v24 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v23 + 48);
        swift_retain();
        if (v24(v21, 1, v22))
        {
          uint64_t v25 = sub_21F76CA40(qword_267EE7A88);
          memcpy(v20, v21, *(void *)(*(void *)(v25 - 8) + 64));
          a1 = v363;
        }
        else
        {
          uint64_t v365 = v20;
          int v40 = *((unsigned __int8 *)v21 + 40);
          uint64_t v361 = v18;
          if (v40 == 255)
          {
            long long v41 = v21[1];
            *uint64_t v20 = *v21;
            v20[1] = v41;
            *(_OWORD *)((char *)v20 + 25) = *(_OWORD *)((char *)v21 + 25);
            long long v42 = v22;
          }
          else
          {
            long long v42 = v22;
            if (v40)
            {
              long long v55 = *(_OWORD *)((char *)v21 + 24);
              *(_OWORD *)((char *)v20 + 24) = v55;
              (**(void (***)(_OWORD *, _OWORD *))(v55 - 8))(v20, v21);
              *((unsigned char *)v20 + 40) = 1;
            }
            else
            {
              *(void *)uint64_t v20 = *(void *)v21;
              *((unsigned char *)v20 + 40) = 0;
              swift_retain();
            }
          }
          *((unsigned char *)v20 + 41) = *((unsigned char *)v21 + 41);
          *((void *)v20 + 6) = *((void *)v21 + 6);
          *((void *)v20 + 7) = *((void *)v21 + 7);
          uint64_t v56 = *((void *)v21 + 9);
          *((void *)v20 + 8) = *((void *)v21 + 8);
          *((void *)v20 + 9) = v56;
          *((void *)v20 + 10) = *((void *)v21 + 10);
          uint64_t v57 = (_OWORD *)((char *)v20 + 88);
          int v58 = *((unsigned __int8 *)v21 + 128);
          swift_bridgeObjectRetain();
          if (v58 == 255)
          {
            long long v59 = *(_OWORD *)((char *)v21 + 104);
            *uint64_t v57 = *(_OWORD *)((char *)v21 + 88);
            *(_OWORD *)((char *)v20 + 104) = v59;
            *(_OWORD *)((char *)v20 + 113) = *(_OWORD *)((char *)v21 + 113);
          }
          else if (v58)
          {
            *((void *)v20 + 11) = *((void *)v21 + 11);
            void v20[6] = v21[6];
            *((unsigned char *)v20 + 128) = 1;
            swift_retain();
          }
          else
          {
            long long v60 = v21[7];
            v20[7] = v60;
            (**(void (***)(_OWORD *, uint64_t))(v60 - 8))(v57, (uint64_t)v21 + 88);
            *((unsigned char *)v20 + 128) = 0;
          }
          *(_OWORD *)((char *)v20 + 136) = *(_OWORD *)((char *)v21 + 136);
          *((unsigned char *)v20 + 152) = *((unsigned char *)v21 + 152);
          *((void *)v20 + 20) = *((void *)v21 + 20);
          *((unsigned char *)v20 + 168) = *((unsigned char *)v21 + 168);
          long long v257 = v21[12];
          v20[11] = v21[11];
          v20[12] = v257;
          *((unsigned char *)v20 + 208) = *((unsigned char *)v21 + 208);
          uint64_t v258 = v42[11];
          uint64_t v259 = (char *)v20 + v258;
          uint64_t v260 = (char *)v21 + v258;
          uint64_t v261 = sub_21FA24C90();
          uint64_t v262 = *(void *)(v261 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v262 + 48))(v260, 1, v261))
          {
            uint64_t v263 = sub_21F76CA40(&qword_26AD47C20);
            memcpy(v259, v260, *(void *)(*(void *)(v263 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v262 + 16))(v259, v260, v261);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v262 + 56))(v259, 0, 1, v261);
          }
          uint64_t v264 = v42[12];
          long long v265 = (char *)v20 + v264;
          long long v266 = (char *)v21 + v264;
          *(void *)long long v265 = *(void *)v266;
          v265[8] = v266[8];
          *(void *)((char *)v20 + v42[13]) = *(void *)((char *)v21 + v42[13]);
          uint64_t v267 = v42[14];
          uint64_t v268 = (char *)v20 + v267;
          uint64_t v269 = (char *)v21 + v267;
          uint64_t v270 = sub_21FA25910();
          uint64_t v271 = *(void *)(v270 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v271 + 48))(v269, 1, v270))
          {
            uint64_t v272 = sub_21F76CA40(&qword_26AD4A3B8);
            memcpy(v268, v269, *(void *)(*(void *)(v272 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v271 + 16))(v268, v269, v270);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v271 + 56))(v268, 0, 1, v270);
          }
          uint64_t v273 = v42[15];
          long long v274 = (char *)v20 + v273;
          uint64_t v275 = (char *)v21 + v273;
          *(void *)long long v274 = *(void *)v275;
          *((_WORD *)v274 + 4) = *((_WORD *)v275 + 4);
          *(void *)((char *)v20 + v42[16]) = *(void *)((char *)v21 + v42[16]);
          *(void *)((char *)v20 + v42[17]) = *(void *)((char *)v21 + v42[17]);
          uint64_t v276 = v42[18];
          long long v277 = (char *)v20 + v276;
          uint64_t v278 = (char *)v21 + v276;
          uint64_t v279 = *(void *)((char *)v21 + v276 + 24);
          swift_retain();
          if (v279)
          {
            uint64_t v280 = *(void *)v278;
            uint64_t v281 = *((void *)v278 + 1);
            char v282 = v278[16];
            sub_21F7652C0(*(void *)v278, v281, v282);
            *(void *)long long v277 = v280;
            *((void *)v277 + 1) = v281;
            v277[16] = v282;
            uint64_t v283 = *((void *)v278 + 4);
            *((void *)v277 + 3) = *((void *)v278 + 3);
            uint64_t v284 = *((void *)v278 + 5);
            char v285 = v278[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v283, v284, v285);
            *((void *)v277 + 4) = v283;
            *((void *)v277 + 5) = v284;
            v277[48] = v285;
            *(_OWORD *)(v277 + 56) = *(_OWORD *)(v278 + 56);
          }
          else
          {
            long long v286 = *((_OWORD *)v278 + 3);
            *((_OWORD *)v277 + 2) = *((_OWORD *)v278 + 2);
            *((_OWORD *)v277 + 3) = v286;
            *((void *)v277 + 8) = *((void *)v278 + 8);
            long long v287 = *((_OWORD *)v278 + 1);
            *(_OWORD *)long long v277 = *(_OWORD *)v278;
            *((_OWORD *)v277 + 1) = v287;
          }
          uint64_t v288 = v22[19];
          uint64_t v289 = (char *)v20 + v288;
          uint64_t v290 = (char *)v21 + v288;
          if (*(void *)((char *)v21 + v288 + 24))
          {
            uint64_t v291 = *(void *)v290;
            uint64_t v292 = *((void *)v290 + 1);
            char v293 = v290[16];
            sub_21F7652C0(*(void *)v290, v292, v293);
            *(void *)uint64_t v289 = v291;
            *((void *)v289 + 1) = v292;
            v289[16] = v293;
            uint64_t v294 = *((void *)v290 + 4);
            *((void *)v289 + 3) = *((void *)v290 + 3);
            uint64_t v295 = *((void *)v290 + 5);
            char v296 = v290[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v294, v295, v296);
            *((void *)v289 + 4) = v294;
            *((void *)v289 + 5) = v295;
            v289[48] = v296;
            *(_OWORD *)(v289 + 56) = *(_OWORD *)(v290 + 56);
          }
          else
          {
            long long v297 = *((_OWORD *)v290 + 3);
            *((_OWORD *)v289 + 2) = *((_OWORD *)v290 + 2);
            *((_OWORD *)v289 + 3) = v297;
            *((void *)v289 + 8) = *((void *)v290 + 8);
            long long v298 = *((_OWORD *)v290 + 1);
            *(_OWORD *)uint64_t v289 = *(_OWORD *)v290;
            *((_OWORD *)v289 + 1) = v298;
          }
          uint64_t v299 = v22[20];
          char v300 = (char *)v20 + v299;
          uint64_t v301 = (char *)v21 + v299;
          if (*(void *)((char *)v21 + v299 + 24))
          {
            uint64_t v302 = *(void *)v301;
            uint64_t v303 = *((void *)v301 + 1);
            char v304 = v301[16];
            sub_21F7652C0(*(void *)v301, v303, v304);
            *(void *)char v300 = v302;
            *((void *)v300 + 1) = v303;
            v300[16] = v304;
            uint64_t v305 = *((void *)v301 + 4);
            *((void *)v300 + 3) = *((void *)v301 + 3);
            uint64_t v306 = *((void *)v301 + 5);
            char v307 = v301[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v305, v306, v307);
            *((void *)v300 + 4) = v305;
            *((void *)v300 + 5) = v306;
            v300[48] = v307;
            *(_OWORD *)(v300 + 56) = *(_OWORD *)(v301 + 56);
          }
          else
          {
            long long v308 = *((_OWORD *)v301 + 3);
            *((_OWORD *)v300 + 2) = *((_OWORD *)v301 + 2);
            *((_OWORD *)v300 + 3) = v308;
            *((void *)v300 + 8) = *((void *)v301 + 8);
            long long v309 = *((_OWORD *)v301 + 1);
            *(_OWORD *)char v300 = *(_OWORD *)v301;
            *((_OWORD *)v300 + 1) = v309;
          }
          uint64_t v310 = v22[21];
          uint64_t v311 = (char *)v20 + v310;
          char v312 = (char *)v21 + v310;
          if (*(void *)((char *)v21 + v310 + 24))
          {
            uint64_t v313 = *(void *)v312;
            uint64_t v314 = *((void *)v312 + 1);
            char v315 = v312[16];
            sub_21F7652C0(*(void *)v312, v314, v315);
            *(void *)uint64_t v311 = v313;
            *((void *)v311 + 1) = v314;
            v311[16] = v315;
            uint64_t v316 = *((void *)v312 + 4);
            *((void *)v311 + 3) = *((void *)v312 + 3);
            uint64_t v317 = *((void *)v312 + 5);
            char v318 = v312[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v316, v317, v318);
            *((void *)v311 + 4) = v316;
            *((void *)v311 + 5) = v317;
            v311[48] = v318;
            *(_OWORD *)(v311 + 56) = *(_OWORD *)(v312 + 56);
          }
          else
          {
            long long v319 = *((_OWORD *)v312 + 3);
            *((_OWORD *)v311 + 2) = *((_OWORD *)v312 + 2);
            *((_OWORD *)v311 + 3) = v319;
            *((void *)v311 + 8) = *((void *)v312 + 8);
            long long v320 = *((_OWORD *)v312 + 1);
            *(_OWORD *)uint64_t v311 = *(_OWORD *)v312;
            *((_OWORD *)v311 + 1) = v320;
          }
          uint64_t v321 = v22[22];
          uint64_t v322 = (char *)v20 + v321;
          uint64_t v323 = (char *)v21 + v321;
          *(_OWORD *)uint64_t v322 = *(_OWORD *)v323;
          *((void *)v322 + 2) = *((void *)v323 + 2);
          uint64_t v324 = v22[23];
          uint64_t v325 = (char *)v20 + v324;
          uint64_t v326 = (char *)v21 + v324;
          *(_OWORD *)uint64_t v325 = *(_OWORD *)v326;
          *((void *)v325 + 2) = *((void *)v326 + 2);
          uint64_t v327 = v22[24];
          long long v328 = (char *)v20 + v327;
          long long v329 = (char *)v21 + v327;
          if (*(void *)((char *)v21 + v327 + 24))
          {
            uint64_t v330 = *(void *)v329;
            uint64_t v331 = *((void *)v329 + 1);
            char v332 = v329[16];
            sub_21F7652C0(*(void *)v329, v331, v332);
            *(void *)long long v328 = v330;
            *((void *)v328 + 1) = v331;
            v328[16] = v332;
            *((void *)v328 + 3) = *((void *)v329 + 3);
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v333 = *((_OWORD *)v329 + 1);
            *(_OWORD *)long long v328 = *(_OWORD *)v329;
            *((_OWORD *)v328 + 1) = v333;
          }
          uint64_t v334 = v22[25];
          uint64_t v335 = (char *)v20 + v334;
          char v336 = (char *)v21 + v334;
          if (*(void *)((char *)v21 + v334 + 24))
          {
            uint64_t v337 = *(void *)v336;
            uint64_t v338 = *((void *)v336 + 1);
            char v339 = v336[16];
            sub_21F7652C0(*(void *)v336, v338, v339);
            *(void *)uint64_t v335 = v337;
            *((void *)v335 + 1) = v338;
            v335[16] = v339;
            *((void *)v335 + 3) = *((void *)v336 + 3);
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v340 = *((_OWORD *)v336 + 1);
            *(_OWORD *)uint64_t v335 = *(_OWORD *)v336;
            *((_OWORD *)v335 + 1) = v340;
          }
          uint64_t v341 = v22[26];
          long long v342 = (void *)((char *)v20 + v341);
          uint64_t v343 = (void *)((char *)v21 + v341);
          uint64_t v344 = v343[1];
          *long long v342 = *v343;
          v342[1] = v344;
          *((unsigned char *)v20 + v22[27]) = *((unsigned char *)v21 + v22[27]);
          uint64_t v345 = v22[28];
          long long v346 = (char *)v20 + v345;
          uint64_t v347 = (char *)v21 + v345;
          uint64_t v348 = *((void *)v347 + 3);
          swift_bridgeObjectRetain();
          if (v348)
          {
            *((void *)v346 + 3) = v348;
            (**(void (***)(char *, char *, uint64_t))(v348 - 8))(v346, v347, v348);
          }
          else
          {
            long long v349 = *((_OWORD *)v347 + 1);
            *(_OWORD *)long long v346 = *(_OWORD *)v347;
            *((_OWORD *)v346 + 1) = v349;
          }
          uint64_t v18 = v361;
          a1 = v363;
          (*(void (**)(_OWORD *, void, uint64_t, int *))(v23 + 56))(v365, 0, 1, v22);
        }
        uint64_t v350 = v18[9];
        uint64_t v351 = a1 + v350;
        uint64_t v352 = (_OWORD *)((char *)a2 + v350);
        int v353 = *((unsigned __int8 *)a2 + v350 + 40);
        if (v353 == 255)
        {
          long long v354 = v352[1];
          *(_OWORD *)uint64_t v351 = *v352;
          *(_OWORD *)(v351 + 16) = v354;
          *(_OWORD *)(v351 + 25) = *(_OWORD *)((char *)v352 + 25);
        }
        else if (v353)
        {
          *(void *)uint64_t v351 = *(void *)v352;
          *(_OWORD *)(v351 + 8) = *(_OWORD *)((char *)v352 + 8);
          *(unsigned char *)(v351 + 40) = 1;
          swift_retain();
        }
        else
        {
          long long v355 = *(_OWORD *)((char *)v352 + 24);
          *(_OWORD *)(v351 + 24) = v355;
          (**(void (***)(uint64_t))(v355 - 8))(v351);
          *(unsigned char *)(v351 + 40) = 0;
        }
        uint64_t v356 = v18[10];
        uint64_t v357 = a1 + v356;
        uint64_t v358 = (uint64_t)a2 + v356;
        *(_OWORD *)uint64_t v357 = *(_OWORD *)v358;
        *(unsigned char *)(v357 + 16) = *(unsigned char *)(v358 + 16);
        break;
      case 2u:
        long long v26 = *(_OWORD *)(a2 + 3);
        *(_OWORD *)(a1 + 24) = v26;
        (**(void (***)(uint64_t, uint64_t *))(v26 - 8))(a1, a2);
        *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
        *(void *)(a1 + 48) = a2[6];
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
        uint64_t v27 = *(int *)(type metadata accessor for RulesRenderer(0) + 32);
        uint64_t v28 = (_OWORD *)(a1 + v27);
        uint64_t v29 = (_OWORD *)((char *)a2 + v27);
        long long v30 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
        uint64_t v31 = *((void *)v30 - 1);
        long long v32 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v31 + 48);
        swift_retain();
        if (v32(v29, 1, v30))
        {
          uint64_t v33 = sub_21F76CA40(qword_267EE7A88);
          memcpy(v28, v29, *(void *)(*(void *)(v33 - 8) + 64));
        }
        else
        {
          int v34 = *((unsigned __int8 *)v29 + 40);
          if (v34 == 255)
          {
            long long v35 = v29[1];
            *uint64_t v28 = *v29;
            v28[1] = v35;
            *(_OWORD *)((char *)v28 + 25) = *(_OWORD *)((char *)v29 + 25);
          }
          else if (v34)
          {
            long long v43 = *(_OWORD *)((char *)v29 + 24);
            *(_OWORD *)((char *)v28 + 24) = v43;
            (**(void (***)(_OWORD *, _OWORD *))(v43 - 8))(v28, v29);
            *((unsigned char *)v28 + 40) = 1;
          }
          else
          {
            *(void *)uint64_t v28 = *(void *)v29;
            *((unsigned char *)v28 + 40) = 0;
            swift_retain();
          }
          *((unsigned char *)v28 + 41) = *((unsigned char *)v29 + 41);
          *((void *)v28 + 6) = *((void *)v29 + 6);
          *((void *)v28 + 7) = *((void *)v29 + 7);
          uint64_t v44 = *((void *)v29 + 9);
          *((void *)v28 + 8) = *((void *)v29 + 8);
          *((void *)v28 + 9) = v44;
          *((void *)v28 + 10) = *((void *)v29 + 10);
          int v45 = *((unsigned __int8 *)v29 + 128);
          swift_bridgeObjectRetain();
          if (v45 == 255)
          {
            long long v46 = *(_OWORD *)((char *)v29 + 104);
            *(_OWORD *)((char *)v28 + 88) = *(_OWORD *)((char *)v29 + 88);
            *(_OWORD *)((char *)v28 + 104) = v46;
            *(_OWORD *)((char *)v28 + 113) = *(_OWORD *)((char *)v29 + 113);
          }
          else if (v45)
          {
            *((void *)v28 + 11) = *((void *)v29 + 11);
            v28[6] = v29[6];
            *((unsigned char *)v28 + 128) = 1;
            swift_retain();
          }
          else
          {
            long long v47 = v29[7];
            v28[7] = v47;
            (**(void (***)(uint64_t, uint64_t))(v47 - 8))((uint64_t)v28 + 88, (uint64_t)v29 + 88);
            *((unsigned char *)v28 + 128) = 0;
          }
          *(_OWORD *)((char *)v28 + 136) = *(_OWORD *)((char *)v29 + 136);
          *((unsigned char *)v28 + 152) = *((unsigned char *)v29 + 152);
          *((void *)v28 + 20) = *((void *)v29 + 20);
          *((unsigned char *)v28 + 168) = *((unsigned char *)v29 + 168);
          long long v61 = v29[12];
          v28[11] = v29[11];
          v28[12] = v61;
          *((unsigned char *)v28 + 208) = *((unsigned char *)v29 + 208);
          uint64_t v62 = v30[11];
          uint64_t v63 = (char *)v28 + v62;
          unint64_t v64 = (char *)v29 + v62;
          uint64_t v65 = sub_21FA24C90();
          uint64_t v66 = *(void *)(v65 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
          {
            uint64_t v67 = sub_21F76CA40(&qword_26AD47C20);
            memcpy(v63, v64, *(void *)(*(void *)(v67 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v63, v64, v65);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
          }
          uint64_t v68 = v30[12];
          uint64_t v69 = (char *)v28 + v68;
          uint64_t v70 = (char *)v29 + v68;
          *(void *)uint64_t v69 = *(void *)v70;
          v69[8] = v70[8];
          *(void *)((char *)v28 + v30[13]) = *(void *)((char *)v29 + v30[13]);
          uint64_t v71 = v30[14];
          uint64_t v72 = (char *)v28 + v71;
          uint64_t v73 = (char *)v29 + v71;
          uint64_t v74 = sub_21FA25910();
          uint64_t v75 = *(void *)(v74 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v73, 1, v74))
          {
            uint64_t v76 = sub_21F76CA40(&qword_26AD4A3B8);
            memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v72, v73, v74);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v75 + 56))(v72, 0, 1, v74);
          }
          uint64_t v77 = v30[15];
          uint64_t v78 = (char *)v28 + v77;
          uint64_t v79 = (char *)v29 + v77;
          *(void *)uint64_t v78 = *(void *)v79;
          *((_WORD *)v78 + 4) = *((_WORD *)v79 + 4);
          *(void *)((char *)v28 + v30[16]) = *(void *)((char *)v29 + v30[16]);
          *(void *)((char *)v28 + v30[17]) = *(void *)((char *)v29 + v30[17]);
          uint64_t v80 = v30[18];
          uint64_t v81 = (char *)v28 + v80;
          long long v82 = (char *)v29 + v80;
          uint64_t v83 = *(void *)((char *)v29 + v80 + 24);
          swift_retain();
          if (v83)
          {
            uint64_t v84 = *(void *)v82;
            uint64_t v85 = *((void *)v82 + 1);
            char v86 = v82[16];
            sub_21F7652C0(*(void *)v82, v85, v86);
            *(void *)uint64_t v81 = v84;
            *((void *)v81 + 1) = v85;
            v81[16] = v86;
            uint64_t v87 = *((void *)v82 + 4);
            *((void *)v81 + 3) = *((void *)v82 + 3);
            uint64_t v88 = *((void *)v82 + 5);
            char v89 = v82[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v87, v88, v89);
            *((void *)v81 + 4) = v87;
            *((void *)v81 + 5) = v88;
            v81[48] = v89;
            *(_OWORD *)(v81 + 56) = *(_OWORD *)(v82 + 56);
          }
          else
          {
            long long v90 = *((_OWORD *)v82 + 3);
            *((_OWORD *)v81 + 2) = *((_OWORD *)v82 + 2);
            *((_OWORD *)v81 + 3) = v90;
            *((void *)v81 + 8) = *((void *)v82 + 8);
            long long v91 = *((_OWORD *)v82 + 1);
            *(_OWORD *)uint64_t v81 = *(_OWORD *)v82;
            *((_OWORD *)v81 + 1) = v91;
          }
          uint64_t v92 = v30[19];
          uint64_t v93 = (char *)v28 + v92;
          uint64_t v94 = (char *)v29 + v92;
          if (*(void *)((char *)v29 + v92 + 24))
          {
            uint64_t v95 = *(void *)v94;
            uint64_t v96 = *((void *)v94 + 1);
            char v97 = v94[16];
            sub_21F7652C0(*(void *)v94, v96, v97);
            *(void *)uint64_t v93 = v95;
            *((void *)v93 + 1) = v96;
            v93[16] = v97;
            uint64_t v98 = *((void *)v94 + 4);
            *((void *)v93 + 3) = *((void *)v94 + 3);
            uint64_t v99 = *((void *)v94 + 5);
            char v100 = v94[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v98, v99, v100);
            *((void *)v93 + 4) = v98;
            *((void *)v93 + 5) = v99;
            unsigned char v93[48] = v100;
            *(_OWORD *)(v93 + 56) = *(_OWORD *)(v94 + 56);
          }
          else
          {
            long long v101 = *((_OWORD *)v94 + 3);
            *((_OWORD *)v93 + 2) = *((_OWORD *)v94 + 2);
            *((_OWORD *)v93 + 3) = v101;
            *((void *)v93 + 8) = *((void *)v94 + 8);
            long long v102 = *((_OWORD *)v94 + 1);
            *(_OWORD *)uint64_t v93 = *(_OWORD *)v94;
            *((_OWORD *)v93 + 1) = v102;
          }
          uint64_t v103 = v30[20];
          long long v104 = (char *)v28 + v103;
          long long v105 = (char *)v29 + v103;
          if (*(void *)((char *)v29 + v103 + 24))
          {
            uint64_t v106 = *(void *)v105;
            uint64_t v107 = *((void *)v105 + 1);
            char v108 = v105[16];
            sub_21F7652C0(*(void *)v105, v107, v108);
            *(void *)long long v104 = v106;
            *((void *)v104 + 1) = v107;
            v104[16] = v108;
            uint64_t v109 = *((void *)v105 + 4);
            *((void *)v104 + 3) = *((void *)v105 + 3);
            uint64_t v110 = *((void *)v105 + 5);
            char v111 = v105[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v109, v110, v111);
            *((void *)v104 + 4) = v109;
            *((void *)v104 + 5) = v110;
            v104[48] = v111;
            *(_OWORD *)(v104 + 56) = *(_OWORD *)(v105 + 56);
          }
          else
          {
            long long v112 = *((_OWORD *)v105 + 3);
            *((_OWORD *)v104 + 2) = *((_OWORD *)v105 + 2);
            *((_OWORD *)v104 + 3) = v112;
            *((void *)v104 + 8) = *((void *)v105 + 8);
            long long v113 = *((_OWORD *)v105 + 1);
            *(_OWORD *)long long v104 = *(_OWORD *)v105;
            *((_OWORD *)v104 + 1) = v113;
          }
          uint64_t v114 = v30[21];
          long long v115 = (char *)v28 + v114;
          uint64_t v116 = (char *)v29 + v114;
          if (*(void *)((char *)v29 + v114 + 24))
          {
            uint64_t v117 = *(void *)v116;
            uint64_t v118 = *((void *)v116 + 1);
            char v119 = v116[16];
            sub_21F7652C0(*(void *)v116, v118, v119);
            *(void *)long long v115 = v117;
            *((void *)v115 + 1) = v118;
            v115[16] = v119;
            uint64_t v120 = *((void *)v116 + 4);
            *((void *)v115 + 3) = *((void *)v116 + 3);
            uint64_t v121 = *((void *)v116 + 5);
            char v122 = v116[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v120, v121, v122);
            *((void *)v115 + 4) = v120;
            *((void *)v115 + 5) = v121;
            v115[48] = v122;
            *(_OWORD *)(v115 + 56) = *(_OWORD *)(v116 + 56);
          }
          else
          {
            long long v123 = *((_OWORD *)v116 + 3);
            *((_OWORD *)v115 + 2) = *((_OWORD *)v116 + 2);
            *((_OWORD *)v115 + 3) = v123;
            *((void *)v115 + 8) = *((void *)v116 + 8);
            long long v124 = *((_OWORD *)v116 + 1);
            *(_OWORD *)long long v115 = *(_OWORD *)v116;
            *((_OWORD *)v115 + 1) = v124;
          }
          uint64_t v125 = v30[22];
          long long v126 = (char *)v28 + v125;
          uint64_t v127 = (char *)v29 + v125;
          *(_OWORD *)long long v126 = *(_OWORD *)v127;
          *((void *)v126 + 2) = *((void *)v127 + 2);
          uint64_t v128 = v30[23];
          long long v129 = (char *)v28 + v128;
          long long v130 = (char *)v29 + v128;
          *(_OWORD *)long long v129 = *(_OWORD *)v130;
          *((void *)v129 + 2) = *((void *)v130 + 2);
          uint64_t v131 = v30[24];
          uint64_t v132 = (char *)v28 + v131;
          long long v133 = (char *)v29 + v131;
          if (*(void *)((char *)v29 + v131 + 24))
          {
            uint64_t v134 = *(void *)v133;
            uint64_t v135 = *((void *)v133 + 1);
            char v136 = v133[16];
            sub_21F7652C0(*(void *)v133, v135, v136);
            *(void *)uint64_t v132 = v134;
            *((void *)v132 + 1) = v135;
            v132[16] = v136;
            *((void *)v132 + 3) = *((void *)v133 + 3);
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v137 = *((_OWORD *)v133 + 1);
            *(_OWORD *)uint64_t v132 = *(_OWORD *)v133;
            *((_OWORD *)v132 + 1) = v137;
          }
          uint64_t v138 = v30[25];
          uint64_t v139 = (char *)v28 + v138;
          uint64_t v140 = (char *)v29 + v138;
          if (*(void *)((char *)v29 + v138 + 24))
          {
            uint64_t v141 = *(void *)v140;
            uint64_t v142 = *((void *)v140 + 1);
            char v143 = v140[16];
            sub_21F7652C0(*(void *)v140, v142, v143);
            *(void *)uint64_t v139 = v141;
            *((void *)v139 + 1) = v142;
            v139[16] = v143;
            *((void *)v139 + 3) = *((void *)v140 + 3);
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v144 = *((_OWORD *)v140 + 1);
            *(_OWORD *)uint64_t v139 = *(_OWORD *)v140;
            *((_OWORD *)v139 + 1) = v144;
          }
          uint64_t v145 = v30[26];
          long long v146 = (void *)((char *)v28 + v145);
          uint64_t v147 = (void *)((char *)v29 + v145);
          uint64_t v148 = v147[1];
          *long long v146 = *v147;
          v146[1] = v148;
          *((unsigned char *)v28 + v30[27]) = *((unsigned char *)v29 + v30[27]);
          uint64_t v149 = v30[28];
          long long v150 = (char *)v28 + v149;
          long long v151 = (char *)v29 + v149;
          uint64_t v152 = *((void *)v151 + 3);
          swift_bridgeObjectRetain();
          if (v152)
          {
            *((void *)v150 + 3) = v152;
            (**(void (***)(char *, char *, uint64_t))(v152 - 8))(v150, v151, v152);
          }
          else
          {
            long long v153 = *((_OWORD *)v151 + 1);
            *(_OWORD *)long long v150 = *(_OWORD *)v151;
            *((_OWORD *)v150 + 1) = v153;
          }
          (*(void (**)(_OWORD *, void, uint64_t, int *))(v31 + 56))(v28, 0, 1, v30);
        }
        break;
      case 3u:
        *(void *)a1 = *a2;
        swift_retain();
        break;
      default:
        long long v5 = *(_OWORD *)(a2 + 3);
        *(_OWORD *)(a1 + 24) = v5;
        (**(void (***)(uint64_t, uint64_t *))(v5 - 8))(a1, a2);
        *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
        *(void *)(a1 + 48) = a2[6];
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
        uint64_t v6 = (int *)type metadata accessor for RectanglesRenderer(0);
        uint64_t v7 = v6[8];
        uint64_t v8 = a2;
        uint64_t v9 = (_OWORD *)(a1 + v7);
        uint64_t v362 = v8;
        uint64_t v10 = (_OWORD *)((char *)v8 + v7);
        uint64_t v11 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
        uint64_t v12 = *((void *)v11 - 1);
        uint64_t v13 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v12 + 48);
        swift_retain();
        if (v13(v10, 1, v11))
        {
          uint64_t v14 = sub_21F76CA40(qword_267EE7A88);
          memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
          long long v15 = v362;
        }
        else
        {
          long long v364 = v9;
          int v36 = *((unsigned __int8 *)v10 + 40);
          uint64_t v360 = v6;
          if (v36 == 255)
          {
            long long v37 = v10[1];
            uint64_t v38 = v9;
            *uint64_t v9 = *v10;
            v9[1] = v37;
            *(_OWORD *)((char *)v9 + 25) = *(_OWORD *)((char *)v10 + 25);
            uint64_t v39 = v11;
          }
          else
          {
            uint64_t v39 = v11;
            if (v36)
            {
              long long v48 = *(_OWORD *)((char *)v10 + 24);
              uint64_t v38 = v9;
              *(_OWORD *)((char *)v9 + 24) = v48;
              (**(void (***)(_OWORD *, _OWORD *))(v48 - 8))(v9, v10);
              *((unsigned char *)v9 + 40) = 1;
            }
            else
            {
              uint64_t v38 = v9;
              *(void *)uint64_t v9 = *(void *)v10;
              *((unsigned char *)v9 + 40) = 0;
              swift_retain();
            }
          }
          *((unsigned char *)v38 + 41) = *((unsigned char *)v10 + 41);
          *((void *)v38 + 6) = *((void *)v10 + 6);
          *((void *)v38 + 7) = *((void *)v10 + 7);
          uint64_t v49 = *((void *)v10 + 9);
          *((void *)v38 + 8) = *((void *)v10 + 8);
          *((void *)v38 + 9) = v49;
          *((void *)v38 + 10) = *((void *)v10 + 10);
          uint64_t v50 = (_OWORD *)((char *)v38 + 88);
          int v51 = *((unsigned __int8 *)v10 + 128);
          swift_bridgeObjectRetain();
          if (v51 == 255)
          {
            long long v52 = *(_OWORD *)((char *)v10 + 104);
            *uint64_t v50 = *(_OWORD *)((char *)v10 + 88);
            v50[1] = v52;
            *(_OWORD *)((char *)v50 + 25) = *(_OWORD *)((char *)v10 + 113);
            long long v53 = v9;
          }
          else if (v51)
          {
            long long v53 = v9;
            *((void *)v9 + 11) = *((void *)v10 + 11);
            v9[6] = v10[6];
            *((unsigned char *)v9 + 128) = 1;
            swift_retain();
          }
          else
          {
            long long v54 = v10[7];
            long long v53 = v9;
            v9[7] = v54;
            (**(void (***)(_OWORD *, uint64_t))(v54 - 8))(v50, (uint64_t)v10 + 88);
            *((unsigned char *)v9 + 128) = 0;
          }
          *(_OWORD *)((char *)v53 + 136) = *(_OWORD *)((char *)v10 + 136);
          *((unsigned char *)v53 + 152) = *((unsigned char *)v10 + 152);
          *((void *)v53 + 20) = *((void *)v10 + 20);
          *((unsigned char *)v53 + 168) = *((unsigned char *)v10 + 168);
          long long v154 = v10[12];
          v53[11] = v10[11];
          v53[12] = v154;
          *((unsigned char *)v53 + 208) = *((unsigned char *)v10 + 208);
          uint64_t v155 = v39[11];
          long long v156 = (char *)v53 + v155;
          uint64_t v157 = (char *)v10 + v155;
          uint64_t v158 = sub_21FA24C90();
          uint64_t v159 = *(void *)(v158 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v159 + 48))(v157, 1, v158))
          {
            uint64_t v160 = sub_21F76CA40(&qword_26AD47C20);
            memcpy(v156, v157, *(void *)(*(void *)(v160 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v159 + 16))(v156, v157, v158);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v159 + 56))(v156, 0, 1, v158);
          }
          uint64_t v161 = v39[12];
          uint64_t v162 = (char *)v9 + v161;
          long long v163 = (char *)v10 + v161;
          *(void *)uint64_t v162 = *(void *)v163;
          v162[8] = v163[8];
          *(void *)((char *)v9 + v39[13]) = *(void *)((char *)v10 + v39[13]);
          uint64_t v164 = v39[14];
          uint64_t v165 = (char *)v9 + v164;
          uint64_t v166 = (char *)v10 + v164;
          uint64_t v167 = sub_21FA25910();
          uint64_t v168 = *(void *)(v167 - 8);
          uint64_t v169 = v10;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v168 + 48))(v166, 1, v167))
          {
            uint64_t v170 = sub_21F76CA40(&qword_26AD4A3B8);
            memcpy(v165, v166, *(void *)(*(void *)(v170 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v168 + 16))(v165, v166, v167);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v168 + 56))(v165, 0, 1, v167);
          }
          long long v171 = v364;
          uint64_t v172 = v39[15];
          uint64_t v173 = (char *)v364 + v172;
          uint64_t v174 = (char *)v169 + v172;
          *(void *)uint64_t v173 = *(void *)v174;
          *((_WORD *)v173 + 4) = *((_WORD *)v174 + 4);
          *(void *)((char *)v364 + v39[16]) = *(void *)((char *)v169 + v39[16]);
          *(void *)((char *)v364 + v39[17]) = *(void *)((char *)v169 + v39[17]);
          uint64_t v175 = v39[18];
          uint64_t v176 = (char *)v364 + v175;
          uint64_t v177 = (char *)v169 + v175;
          uint64_t v178 = *(void *)((char *)v169 + v175 + 24);
          swift_retain();
          if (v178)
          {
            uint64_t v179 = *(void *)v177;
            uint64_t v180 = *((void *)v177 + 1);
            char v181 = v177[16];
            sub_21F7652C0(*(void *)v177, v180, v181);
            *(void *)uint64_t v176 = v179;
            *((void *)v176 + 1) = v180;
            v176[16] = v181;
            uint64_t v182 = *((void *)v177 + 4);
            *((void *)v176 + 3) = *((void *)v177 + 3);
            uint64_t v183 = *((void *)v177 + 5);
            char v184 = v177[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v182, v183, v184);
            *((void *)v176 + 4) = v182;
            *((void *)v176 + 5) = v183;
            long long v171 = v364;
            v176[48] = v184;
            *(_OWORD *)(v176 + 56) = *(_OWORD *)(v177 + 56);
          }
          else
          {
            long long v185 = *((_OWORD *)v177 + 3);
            *((_OWORD *)v176 + 2) = *((_OWORD *)v177 + 2);
            *((_OWORD *)v176 + 3) = v185;
            *((void *)v176 + 8) = *((void *)v177 + 8);
            long long v186 = *((_OWORD *)v177 + 1);
            *(_OWORD *)uint64_t v176 = *(_OWORD *)v177;
            *((_OWORD *)v176 + 1) = v186;
          }
          uint64_t v187 = v11[19];
          uint64_t v188 = (uint64_t)v171 + v187;
          char v189 = (char *)v169 + v187;
          if (*(void *)((char *)v169 + v187 + 24))
          {
            uint64_t v190 = *(void *)v189;
            uint64_t v191 = *((void *)v189 + 1);
            char v192 = v189[16];
            sub_21F7652C0(*(void *)v189, v191, v192);
            *(void *)uint64_t v188 = v190;
            *(void *)(v188 + 8) = v191;
            *(unsigned char *)(v188 + 16) = v192;
            uint64_t v193 = *((void *)v189 + 4);
            *(void *)(v188 + 24) = *((void *)v189 + 3);
            uint64_t v194 = *((void *)v189 + 5);
            char v195 = v189[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v193, v194, v195);
            *(void *)(v188 + 32) = v193;
            *(void *)(v188 + 40) = v194;
            long long v171 = v364;
            *(unsigned char *)(v188 + 48) = v195;
            *(_OWORD *)(v188 + 56) = *(_OWORD *)(v189 + 56);
          }
          else
          {
            long long v196 = *((_OWORD *)v189 + 3);
            *(_OWORD *)(v188 + 32) = *((_OWORD *)v189 + 2);
            *(_OWORD *)(v188 + 48) = v196;
            *(void *)(v188 + 64) = *((void *)v189 + 8);
            long long v197 = *((_OWORD *)v189 + 1);
            *(_OWORD *)uint64_t v188 = *(_OWORD *)v189;
            *(_OWORD *)(v188 + 16) = v197;
          }
          uint64_t v198 = v11[20];
          uint64_t v199 = (uint64_t)v171 + v198;
          uint64_t v200 = (char *)v169 + v198;
          if (*(void *)((char *)v169 + v198 + 24))
          {
            uint64_t v201 = *(void *)v200;
            uint64_t v202 = *((void *)v200 + 1);
            char v203 = v200[16];
            sub_21F7652C0(*(void *)v200, v202, v203);
            *(void *)uint64_t v199 = v201;
            *(void *)(v199 + 8) = v202;
            *(unsigned char *)(v199 + 16) = v203;
            uint64_t v204 = *((void *)v200 + 4);
            *(void *)(v199 + 24) = *((void *)v200 + 3);
            uint64_t v205 = *((void *)v200 + 5);
            char v206 = v200[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v204, v205, v206);
            *(void *)(v199 + 32) = v204;
            *(void *)(v199 + 40) = v205;
            long long v171 = v364;
            *(unsigned char *)(v199 + 48) = v206;
            *(_OWORD *)(v199 + 56) = *(_OWORD *)(v200 + 56);
          }
          else
          {
            long long v207 = *((_OWORD *)v200 + 3);
            *(_OWORD *)(v199 + 32) = *((_OWORD *)v200 + 2);
            *(_OWORD *)(v199 + 48) = v207;
            *(void *)(v199 + 64) = *((void *)v200 + 8);
            long long v208 = *((_OWORD *)v200 + 1);
            *(_OWORD *)uint64_t v199 = *(_OWORD *)v200;
            *(_OWORD *)(v199 + 16) = v208;
          }
          uint64_t v209 = v11[21];
          uint64_t v210 = (uint64_t)v171 + v209;
          uint64_t v211 = (char *)v169 + v209;
          if (*(void *)((char *)v169 + v209 + 24))
          {
            uint64_t v212 = *(void *)v211;
            uint64_t v213 = *((void *)v211 + 1);
            char v214 = v211[16];
            sub_21F7652C0(*(void *)v211, v213, v214);
            *(void *)uint64_t v210 = v212;
            *(void *)(v210 + 8) = v213;
            *(unsigned char *)(v210 + 16) = v214;
            uint64_t v215 = *((void *)v211 + 4);
            *(void *)(v210 + 24) = *((void *)v211 + 3);
            uint64_t v216 = *((void *)v211 + 5);
            char v217 = v211[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v215, v216, v217);
            *(void *)(v210 + 32) = v215;
            *(void *)(v210 + 40) = v216;
            long long v171 = v364;
            *(unsigned char *)(v210 + 48) = v217;
            *(_OWORD *)(v210 + 56) = *(_OWORD *)(v211 + 56);
          }
          else
          {
            long long v218 = *((_OWORD *)v211 + 3);
            *(_OWORD *)(v210 + 32) = *((_OWORD *)v211 + 2);
            *(_OWORD *)(v210 + 48) = v218;
            *(void *)(v210 + 64) = *((void *)v211 + 8);
            long long v219 = *((_OWORD *)v211 + 1);
            *(_OWORD *)uint64_t v210 = *(_OWORD *)v211;
            *(_OWORD *)(v210 + 16) = v219;
          }
          uint64_t v220 = v11[22];
          uint64_t v221 = (uint64_t)v171 + v220;
          long long v222 = (char *)v169 + v220;
          *(_OWORD *)uint64_t v221 = *(_OWORD *)v222;
          *(void *)(v221 + 16) = *((void *)v222 + 2);
          uint64_t v223 = v11[23];
          uint64_t v224 = (uint64_t)v171 + v223;
          uint64_t v225 = (char *)v169 + v223;
          *(_OWORD *)uint64_t v224 = *(_OWORD *)v225;
          *(void *)(v224 + 16) = *((void *)v225 + 2);
          uint64_t v226 = v11[24];
          uint64_t v227 = (uint64_t)v171 + v226;
          char v228 = (char *)v169 + v226;
          if (*(void *)((char *)v169 + v226 + 24))
          {
            uint64_t v229 = *(void *)v228;
            uint64_t v230 = *((void *)v228 + 1);
            char v231 = v228[16];
            sub_21F7652C0(*(void *)v228, v230, v231);
            *(void *)uint64_t v227 = v229;
            *(void *)(v227 + 8) = v230;
            long long v171 = v364;
            *(unsigned char *)(v227 + 16) = v231;
            *(void *)(v227 + 24) = *((void *)v228 + 3);
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v232 = *((_OWORD *)v228 + 1);
            *(_OWORD *)uint64_t v227 = *(_OWORD *)v228;
            *(_OWORD *)(v227 + 16) = v232;
          }
          uint64_t v233 = v11[25];
          uint64_t v234 = (uint64_t)v171 + v233;
          long long v235 = (char *)v169 + v233;
          if (*(void *)((char *)v169 + v233 + 24))
          {
            uint64_t v236 = *(void *)v235;
            uint64_t v237 = *((void *)v235 + 1);
            char v238 = v235[16];
            sub_21F7652C0(*(void *)v235, v237, v238);
            *(void *)uint64_t v234 = v236;
            *(void *)(v234 + 8) = v237;
            long long v171 = v364;
            *(unsigned char *)(v234 + 16) = v238;
            *(void *)(v234 + 24) = *((void *)v235 + 3);
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v239 = *((_OWORD *)v235 + 1);
            *(_OWORD *)uint64_t v234 = *(_OWORD *)v235;
            *(_OWORD *)(v234 + 16) = v239;
          }
          uint64_t v240 = v11[26];
          uint64_t v241 = (void *)((char *)v171 + v240);
          long long v242 = (void *)((char *)v169 + v240);
          uint64_t v243 = v242[1];
          *uint64_t v241 = *v242;
          v241[1] = v243;
          *((unsigned char *)v171 + v11[27]) = *((unsigned char *)v169 + v11[27]);
          uint64_t v244 = v11[28];
          uint64_t v245 = (uint64_t)v171 + v244;
          long long v246 = (_OWORD *)((char *)v169 + v244);
          uint64_t v247 = *(void *)((char *)v169 + v244 + 24);
          swift_bridgeObjectRetain();
          if (v247)
          {
            *(void *)(v245 + 24) = v247;
            (**(void (***)(uint64_t, _OWORD *, uint64_t))(v247 - 8))(v245, v246, v247);
          }
          else
          {
            long long v248 = v246[1];
            *(_OWORD *)uint64_t v245 = *v246;
            *(_OWORD *)(v245 + 16) = v248;
          }
          uint64_t v6 = v360;
          long long v15 = v362;
          (*(void (**)(_OWORD *, void, uint64_t, int *))(v12 + 56))(v364, 0, 1, v11);
        }
        uint64_t v249 = v6[9];
        uint64_t v250 = a1 + v249;
        uint64_t v251 = (uint64_t)v15 + v249;
        long long v252 = *(_OWORD *)(v251 + 16);
        *(_OWORD *)uint64_t v250 = *(_OWORD *)v251;
        *(_OWORD *)(v250 + 16) = v252;
        *(unsigned char *)(v250 + 32) = *(unsigned char *)(v251 + 32);
        uint64_t v253 = v6[10];
        uint64_t v254 = a1 + v253;
        uint64_t v255 = (uint64_t)v15 + v253;
        uint64_t v256 = sub_21FA24C90();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v256 - 8) + 16))(v254, v255, v256);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_21F821C6C(uint64_t a1)
{
  type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      _s6Charts15AnyChartContentVwxx_0(a1);
      swift_release();
      uint64_t v3 = type metadata accessor for RectanglesRenderer(0);
      uint64_t v4 = a1 + *(int *)(v3 + 32);
      long long v5 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v5 - 1) + 48))(v4, 1, v5))
      {
        int v6 = *(unsigned __int8 *)(v4 + 40);
        if (v6 != 255)
        {
          if (v6) {
            _s6Charts15AnyChartContentVwxx_0(v4);
          }
          else {
            swift_release();
          }
        }
        swift_bridgeObjectRelease();
        int v14 = *(unsigned __int8 *)(v4 + 128);
        if (v14 != 255)
        {
          if (v14) {
            swift_release();
          }
          else {
            _s6Charts15AnyChartContentVwxx_0(v4 + 88);
          }
        }
        uint64_t v17 = v4 + v5[11];
        uint64_t v18 = sub_21FA24C90();
        uint64_t v19 = *(void *)(v18 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18)) {
          (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
        }
        uint64_t v20 = v4 + v5[14];
        uint64_t v21 = sub_21FA25910();
        uint64_t v22 = *(void *)(v21 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21)) {
          (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
        }
        swift_release();
        uint64_t v23 = v4 + v5[18];
        if (*(void *)(v23 + 24))
        {
          sub_21F7656A8(*(void *)v23, *(void *)(v23 + 8), *(unsigned char *)(v23 + 16));
          swift_bridgeObjectRelease();
          sub_21F770E38(*(void *)(v23 + 32), *(void *)(v23 + 40), *(unsigned char *)(v23 + 48));
        }
        uint64_t v24 = v4 + v5[19];
        if (*(void *)(v24 + 24))
        {
          sub_21F7656A8(*(void *)v24, *(void *)(v24 + 8), *(unsigned char *)(v24 + 16));
          swift_bridgeObjectRelease();
          sub_21F770E38(*(void *)(v24 + 32), *(void *)(v24 + 40), *(unsigned char *)(v24 + 48));
        }
        uint64_t v25 = v4 + v5[20];
        if (*(void *)(v25 + 24))
        {
          sub_21F7656A8(*(void *)v25, *(void *)(v25 + 8), *(unsigned char *)(v25 + 16));
          swift_bridgeObjectRelease();
          sub_21F770E38(*(void *)(v25 + 32), *(void *)(v25 + 40), *(unsigned char *)(v25 + 48));
        }
        uint64_t v26 = v4 + v5[21];
        if (*(void *)(v26 + 24))
        {
          sub_21F7656A8(*(void *)v26, *(void *)(v26 + 8), *(unsigned char *)(v26 + 16));
          swift_bridgeObjectRelease();
          sub_21F770E38(*(void *)(v26 + 32), *(void *)(v26 + 40), *(unsigned char *)(v26 + 48));
        }
        uint64_t v27 = v4 + v5[24];
        if (*(void *)(v27 + 24))
        {
          sub_21F7656A8(*(void *)v27, *(void *)(v27 + 8), *(unsigned char *)(v27 + 16));
          swift_bridgeObjectRelease();
        }
        uint64_t v28 = v4 + v5[25];
        if (*(void *)(v28 + 24))
        {
          sub_21F7656A8(*(void *)v28, *(void *)(v28 + 8), *(unsigned char *)(v28 + 16));
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        uint64_t v29 = v4 + v5[28];
        if (*(void *)(v29 + 24)) {
          _s6Charts15AnyChartContentVwxx_0(v29);
        }
      }
      uint64_t v30 = a1 + *(int *)(v3 + 40);
      uint64_t v31 = sub_21FA24C90();
      long long v32 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8);
      uint64_t result = v32(v30, v31);
      break;
    case 1:
      _s6Charts15AnyChartContentVwxx_0(a1);
      swift_release();
      uint64_t v7 = type metadata accessor for PointsRenderer(0);
      uint64_t v8 = a1 + *(int *)(v7 + 32);
      uint64_t v9 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v9 - 1) + 48))(v8, 1, v9))
      {
        int v10 = *(unsigned __int8 *)(v8 + 40);
        if (v10 != 255)
        {
          if (v10) {
            _s6Charts15AnyChartContentVwxx_0(v8);
          }
          else {
            swift_release();
          }
        }
        swift_bridgeObjectRelease();
        int v15 = *(unsigned __int8 *)(v8 + 128);
        if (v15 != 255)
        {
          if (v15) {
            swift_release();
          }
          else {
            _s6Charts15AnyChartContentVwxx_0(v8 + 88);
          }
        }
        uint64_t v33 = v8 + v9[11];
        uint64_t v34 = sub_21FA24C90();
        uint64_t v35 = *(void *)(v34 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34)) {
          (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
        }
        uint64_t v36 = v8 + v9[14];
        uint64_t v37 = sub_21FA25910();
        uint64_t v38 = *(void *)(v37 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37)) {
          (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v36, v37);
        }
        swift_release();
        uint64_t v39 = v8 + v9[18];
        if (*(void *)(v39 + 24))
        {
          sub_21F7656A8(*(void *)v39, *(void *)(v39 + 8), *(unsigned char *)(v39 + 16));
          swift_bridgeObjectRelease();
          sub_21F770E38(*(void *)(v39 + 32), *(void *)(v39 + 40), *(unsigned char *)(v39 + 48));
        }
        uint64_t v40 = v8 + v9[19];
        if (*(void *)(v40 + 24))
        {
          sub_21F7656A8(*(void *)v40, *(void *)(v40 + 8), *(unsigned char *)(v40 + 16));
          swift_bridgeObjectRelease();
          sub_21F770E38(*(void *)(v40 + 32), *(void *)(v40 + 40), *(unsigned char *)(v40 + 48));
        }
        uint64_t v41 = v8 + v9[20];
        if (*(void *)(v41 + 24))
        {
          sub_21F7656A8(*(void *)v41, *(void *)(v41 + 8), *(unsigned char *)(v41 + 16));
          swift_bridgeObjectRelease();
          sub_21F770E38(*(void *)(v41 + 32), *(void *)(v41 + 40), *(unsigned char *)(v41 + 48));
        }
        uint64_t v42 = v8 + v9[21];
        if (*(void *)(v42 + 24))
        {
          sub_21F7656A8(*(void *)v42, *(void *)(v42 + 8), *(unsigned char *)(v42 + 16));
          swift_bridgeObjectRelease();
          sub_21F770E38(*(void *)(v42 + 32), *(void *)(v42 + 40), *(unsigned char *)(v42 + 48));
        }
        uint64_t v43 = v8 + v9[24];
        if (*(void *)(v43 + 24))
        {
          sub_21F7656A8(*(void *)v43, *(void *)(v43 + 8), *(unsigned char *)(v43 + 16));
          swift_bridgeObjectRelease();
        }
        uint64_t v44 = v8 + v9[25];
        if (*(void *)(v44 + 24))
        {
          sub_21F7656A8(*(void *)v44, *(void *)(v44 + 8), *(unsigned char *)(v44 + 16));
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        uint64_t v45 = v8 + v9[28];
        if (*(void *)(v45 + 24)) {
          _s6Charts15AnyChartContentVwxx_0(v45);
        }
      }
      uint64_t result = a1 + *(int *)(v7 + 36);
      int v46 = *(unsigned __int8 *)(result + 40);
      if (v46 != 255)
      {
        if ((v46 & 1) == 0) {
          goto LABEL_91;
        }
        goto LABEL_14;
      }
      break;
    case 2:
      _s6Charts15AnyChartContentVwxx_0(a1);
      swift_release();
      uint64_t v11 = a1 + *(int *)(type metadata accessor for RulesRenderer(0) + 32);
      uint64_t v12 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((void *)v12 - 1) + 48))(v11, 1, v12);
      if (!result)
      {
        int v13 = *(unsigned __int8 *)(v11 + 40);
        if (v13 != 255)
        {
          if (v13) {
            _s6Charts15AnyChartContentVwxx_0(v11);
          }
          else {
            swift_release();
          }
        }
        swift_bridgeObjectRelease();
        int v16 = *(unsigned __int8 *)(v11 + 128);
        if (v16 != 255)
        {
          if (v16) {
            swift_release();
          }
          else {
            _s6Charts15AnyChartContentVwxx_0(v11 + 88);
          }
        }
        uint64_t v47 = v11 + v12[11];
        uint64_t v48 = sub_21FA24C90();
        uint64_t v49 = *(void *)(v48 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48)) {
          (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v47, v48);
        }
        uint64_t v50 = v11 + v12[14];
        uint64_t v51 = sub_21FA25910();
        uint64_t v52 = *(void *)(v51 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51)) {
          (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, v51);
        }
        swift_release();
        uint64_t v53 = v11 + v12[18];
        if (*(void *)(v53 + 24))
        {
          sub_21F7656A8(*(void *)v53, *(void *)(v53 + 8), *(unsigned char *)(v53 + 16));
          swift_bridgeObjectRelease();
          sub_21F770E38(*(void *)(v53 + 32), *(void *)(v53 + 40), *(unsigned char *)(v53 + 48));
        }
        uint64_t v54 = v11 + v12[19];
        if (*(void *)(v54 + 24))
        {
          sub_21F7656A8(*(void *)v54, *(void *)(v54 + 8), *(unsigned char *)(v54 + 16));
          swift_bridgeObjectRelease();
          sub_21F770E38(*(void *)(v54 + 32), *(void *)(v54 + 40), *(unsigned char *)(v54 + 48));
        }
        uint64_t v55 = v11 + v12[20];
        if (*(void *)(v55 + 24))
        {
          sub_21F7656A8(*(void *)v55, *(void *)(v55 + 8), *(unsigned char *)(v55 + 16));
          swift_bridgeObjectRelease();
          sub_21F770E38(*(void *)(v55 + 32), *(void *)(v55 + 40), *(unsigned char *)(v55 + 48));
        }
        uint64_t v56 = v11 + v12[21];
        if (*(void *)(v56 + 24))
        {
          sub_21F7656A8(*(void *)v56, *(void *)(v56 + 8), *(unsigned char *)(v56 + 16));
          swift_bridgeObjectRelease();
          sub_21F770E38(*(void *)(v56 + 32), *(void *)(v56 + 40), *(unsigned char *)(v56 + 48));
        }
        uint64_t v57 = v11 + v12[24];
        if (*(void *)(v57 + 24))
        {
          sub_21F7656A8(*(void *)v57, *(void *)(v57 + 8), *(unsigned char *)(v57 + 16));
          swift_bridgeObjectRelease();
        }
        uint64_t v58 = v11 + v12[25];
        if (*(void *)(v58 + 24))
        {
          sub_21F7656A8(*(void *)v58, *(void *)(v58 + 8), *(unsigned char *)(v58 + 16));
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        uint64_t result = v11 + v12[28];
        if (*(void *)(result + 24)) {
LABEL_91:
        }
          uint64_t result = _s6Charts15AnyChartContentVwxx_0(result);
      }
      break;
    case 3:
LABEL_14:
      uint64_t result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_21F8226D0(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      long long v13 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v13;
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      uint64_t v352 = a1;
      uint64_t v353 = type metadata accessor for PointsRenderer(0);
      uint64_t v14 = *(int *)(v353 + 32);
      int v15 = (_OWORD *)(a1 + v14);
      int v16 = (_OWORD *)(a2 + v14);
      uint64_t v17 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      uint64_t v18 = *((void *)v17 - 1);
      uint64_t v19 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v18 + 48);
      swift_retain();
      if (v19(v16, 1, v17))
      {
        uint64_t v20 = sub_21F76CA40(qword_267EE7A88);
        memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
        a1 = v352;
        uint64_t v21 = v353;
      }
      else
      {
        int v35 = *((unsigned __int8 *)v16 + 40);
        if (v35 == 255)
        {
          long long v36 = v16[1];
          *int v15 = *v16;
          v15[1] = v36;
          *(_OWORD *)((char *)v15 + 25) = *(_OWORD *)((char *)v16 + 25);
          uint64_t v37 = v17;
        }
        else
        {
          uint64_t v37 = v17;
          if (v35)
          {
            long long v48 = *(_OWORD *)((char *)v16 + 24);
            *(_OWORD *)((char *)v15 + 24) = v48;
            (**(void (***)(_OWORD *, _OWORD *))(v48 - 8))(v15, v16);
            *((unsigned char *)v15 + 40) = 1;
          }
          else
          {
            *(void *)int v15 = *(void *)v16;
            *((unsigned char *)v15 + 40) = 0;
            swift_retain();
          }
        }
        *((unsigned char *)v15 + 41) = *((unsigned char *)v16 + 41);
        *((void *)v15 + 6) = *((void *)v16 + 6);
        *((void *)v15 + 7) = *((void *)v16 + 7);
        uint64_t v49 = *((void *)v16 + 9);
        *((void *)v15 + 8) = *((void *)v16 + 8);
        *((void *)v15 + 9) = v49;
        *((void *)v15 + 10) = *((void *)v16 + 10);
        int v50 = *((unsigned __int8 *)v16 + 128);
        swift_bridgeObjectRetain();
        if (v50 == 255)
        {
          long long v51 = *(_OWORD *)((char *)v16 + 104);
          *(_OWORD *)((char *)v15 + 88) = *(_OWORD *)((char *)v16 + 88);
          *(_OWORD *)((char *)v15 + 104) = v51;
          *(_OWORD *)((char *)v15 + 113) = *(_OWORD *)((char *)v16 + 113);
        }
        else if (v50)
        {
          *((void *)v15 + 11) = *((void *)v16 + 11);
          v15[6] = v16[6];
          *((unsigned char *)v15 + 128) = 1;
          swift_retain();
        }
        else
        {
          long long v52 = v16[7];
          v15[7] = v52;
          (**(void (***)(uint64_t, uint64_t))(v52 - 8))((uint64_t)v15 + 88, (uint64_t)v16 + 88);
          *((unsigned char *)v15 + 128) = 0;
        }
        *(_OWORD *)((char *)v15 + 136) = *(_OWORD *)((char *)v16 + 136);
        *((unsigned char *)v15 + 152) = *((unsigned char *)v16 + 152);
        *((void *)v15 + 20) = *((void *)v16 + 20);
        *((unsigned char *)v15 + 168) = *((unsigned char *)v16 + 168);
        long long v247 = v16[12];
        v15[11] = v16[11];
        v15[12] = v247;
        *((unsigned char *)v15 + 208) = *((unsigned char *)v16 + 208);
        uint64_t v248 = v37[11];
        uint64_t v249 = (char *)v15 + v248;
        uint64_t v250 = (char *)v16 + v248;
        uint64_t v251 = sub_21FA24C90();
        uint64_t v252 = *(void *)(v251 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v252 + 48))(v250, 1, v251))
        {
          uint64_t v253 = sub_21F76CA40(&qword_26AD47C20);
          memcpy(v249, v250, *(void *)(*(void *)(v253 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v252 + 16))(v249, v250, v251);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v252 + 56))(v249, 0, 1, v251);
        }
        uint64_t v254 = v37[12];
        uint64_t v255 = (char *)v15 + v254;
        uint64_t v256 = (char *)v16 + v254;
        *(void *)uint64_t v255 = *(void *)v256;
        v255[8] = v256[8];
        *(void *)((char *)v15 + v37[13]) = *(void *)((char *)v16 + v37[13]);
        uint64_t v257 = v37[14];
        uint64_t v258 = (char *)v15 + v257;
        uint64_t v259 = (char *)v16 + v257;
        uint64_t v260 = sub_21FA25910();
        uint64_t v261 = *(void *)(v260 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v261 + 48))(v259, 1, v260))
        {
          uint64_t v262 = sub_21F76CA40(&qword_26AD4A3B8);
          memcpy(v258, v259, *(void *)(*(void *)(v262 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v261 + 16))(v258, v259, v260);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v261 + 56))(v258, 0, 1, v260);
        }
        uint64_t v263 = v37[15];
        uint64_t v264 = (char *)v15 + v263;
        long long v265 = (char *)v16 + v263;
        *(void *)uint64_t v264 = *(void *)v265;
        *((_WORD *)v264 + 4) = *((_WORD *)v265 + 4);
        *(void *)((char *)v15 + v37[16]) = *(void *)((char *)v16 + v37[16]);
        *(void *)((char *)v15 + v37[17]) = *(void *)((char *)v16 + v37[17]);
        uint64_t v266 = v37[18];
        uint64_t v267 = (char *)v15 + v266;
        uint64_t v268 = (char *)v16 + v266;
        uint64_t v269 = *(void *)((char *)v16 + v266 + 24);
        swift_retain();
        if (v269)
        {
          uint64_t v270 = *(void *)v268;
          uint64_t v271 = *((void *)v268 + 1);
          char v272 = v268[16];
          sub_21F7652C0(*(void *)v268, v271, v272);
          *(void *)uint64_t v267 = v270;
          *((void *)v267 + 1) = v271;
          v267[16] = v272;
          uint64_t v273 = *((void *)v268 + 4);
          *((void *)v267 + 3) = *((void *)v268 + 3);
          uint64_t v274 = *((void *)v268 + 5);
          char v275 = v268[48];
          swift_bridgeObjectRetain();
          sub_21F770E44(v273, v274, v275);
          *((void *)v267 + 4) = v273;
          *((void *)v267 + 5) = v274;
          v267[48] = v275;
          *(_OWORD *)(v267 + 56) = *(_OWORD *)(v268 + 56);
        }
        else
        {
          long long v276 = *((_OWORD *)v268 + 3);
          *((_OWORD *)v267 + 2) = *((_OWORD *)v268 + 2);
          *((_OWORD *)v267 + 3) = v276;
          *((void *)v267 + 8) = *((void *)v268 + 8);
          long long v277 = *((_OWORD *)v268 + 1);
          *(_OWORD *)uint64_t v267 = *(_OWORD *)v268;
          *((_OWORD *)v267 + 1) = v277;
        }
        uint64_t v278 = v17[19];
        uint64_t v279 = (char *)v15 + v278;
        uint64_t v280 = (char *)v16 + v278;
        if (*(void *)((char *)v16 + v278 + 24))
        {
          uint64_t v281 = *(void *)v280;
          uint64_t v282 = *((void *)v280 + 1);
          char v283 = v280[16];
          sub_21F7652C0(*(void *)v280, v282, v283);
          *(void *)uint64_t v279 = v281;
          *((void *)v279 + 1) = v282;
          v279[16] = v283;
          uint64_t v284 = *((void *)v280 + 4);
          *((void *)v279 + 3) = *((void *)v280 + 3);
          uint64_t v285 = *((void *)v280 + 5);
          char v286 = v280[48];
          swift_bridgeObjectRetain();
          sub_21F770E44(v284, v285, v286);
          *((void *)v279 + 4) = v284;
          *((void *)v279 + 5) = v285;
          v279[48] = v286;
          *(_OWORD *)(v279 + 56) = *(_OWORD *)(v280 + 56);
        }
        else
        {
          long long v287 = *((_OWORD *)v280 + 3);
          *((_OWORD *)v279 + 2) = *((_OWORD *)v280 + 2);
          *((_OWORD *)v279 + 3) = v287;
          *((void *)v279 + 8) = *((void *)v280 + 8);
          long long v288 = *((_OWORD *)v280 + 1);
          *(_OWORD *)uint64_t v279 = *(_OWORD *)v280;
          *((_OWORD *)v279 + 1) = v288;
        }
        uint64_t v289 = v17[20];
        uint64_t v290 = (char *)v15 + v289;
        uint64_t v291 = (char *)v16 + v289;
        if (*(void *)((char *)v16 + v289 + 24))
        {
          uint64_t v292 = *(void *)v291;
          uint64_t v293 = *((void *)v291 + 1);
          char v294 = v291[16];
          sub_21F7652C0(*(void *)v291, v293, v294);
          *(void *)uint64_t v290 = v292;
          *((void *)v290 + 1) = v293;
          v290[16] = v294;
          uint64_t v295 = *((void *)v291 + 4);
          *((void *)v290 + 3) = *((void *)v291 + 3);
          uint64_t v296 = *((void *)v291 + 5);
          char v297 = v291[48];
          swift_bridgeObjectRetain();
          sub_21F770E44(v295, v296, v297);
          *((void *)v290 + 4) = v295;
          *((void *)v290 + 5) = v296;
          v290[48] = v297;
          *(_OWORD *)(v290 + 56) = *(_OWORD *)(v291 + 56);
        }
        else
        {
          long long v298 = *((_OWORD *)v291 + 3);
          *((_OWORD *)v290 + 2) = *((_OWORD *)v291 + 2);
          *((_OWORD *)v290 + 3) = v298;
          *((void *)v290 + 8) = *((void *)v291 + 8);
          long long v299 = *((_OWORD *)v291 + 1);
          *(_OWORD *)uint64_t v290 = *(_OWORD *)v291;
          *((_OWORD *)v290 + 1) = v299;
        }
        uint64_t v300 = v17[21];
        uint64_t v301 = (char *)v15 + v300;
        uint64_t v302 = (char *)v16 + v300;
        if (*(void *)((char *)v16 + v300 + 24))
        {
          uint64_t v303 = *(void *)v302;
          uint64_t v304 = *((void *)v302 + 1);
          char v305 = v302[16];
          sub_21F7652C0(*(void *)v302, v304, v305);
          *(void *)uint64_t v301 = v303;
          *((void *)v301 + 1) = v304;
          v301[16] = v305;
          uint64_t v306 = *((void *)v302 + 4);
          *((void *)v301 + 3) = *((void *)v302 + 3);
          uint64_t v307 = *((void *)v302 + 5);
          char v308 = v302[48];
          swift_bridgeObjectRetain();
          sub_21F770E44(v306, v307, v308);
          *((void *)v301 + 4) = v306;
          *((void *)v301 + 5) = v307;
          v301[48] = v308;
          *(_OWORD *)(v301 + 56) = *(_OWORD *)(v302 + 56);
        }
        else
        {
          long long v309 = *((_OWORD *)v302 + 3);
          *((_OWORD *)v301 + 2) = *((_OWORD *)v302 + 2);
          *((_OWORD *)v301 + 3) = v309;
          *((void *)v301 + 8) = *((void *)v302 + 8);
          long long v310 = *((_OWORD *)v302 + 1);
          *(_OWORD *)uint64_t v301 = *(_OWORD *)v302;
          *((_OWORD *)v301 + 1) = v310;
        }
        uint64_t v311 = v17[22];
        char v312 = (char *)v15 + v311;
        uint64_t v313 = (char *)v16 + v311;
        *(_OWORD *)char v312 = *(_OWORD *)v313;
        *((void *)v312 + 2) = *((void *)v313 + 2);
        uint64_t v314 = v17[23];
        char v315 = (char *)v15 + v314;
        uint64_t v316 = (char *)v16 + v314;
        *(_OWORD *)char v315 = *(_OWORD *)v316;
        *((void *)v315 + 2) = *((void *)v316 + 2);
        uint64_t v317 = v17[24];
        char v318 = (char *)v15 + v317;
        long long v319 = (char *)v16 + v317;
        if (*(void *)((char *)v16 + v317 + 24))
        {
          uint64_t v320 = *(void *)v319;
          uint64_t v321 = *((void *)v319 + 1);
          char v322 = v319[16];
          sub_21F7652C0(*(void *)v319, v321, v322);
          *(void *)char v318 = v320;
          *((void *)v318 + 1) = v321;
          v318[16] = v322;
          *((void *)v318 + 3) = *((void *)v319 + 3);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v323 = *((_OWORD *)v319 + 1);
          *(_OWORD *)char v318 = *(_OWORD *)v319;
          *((_OWORD *)v318 + 1) = v323;
        }
        uint64_t v324 = v17[25];
        uint64_t v325 = (char *)v15 + v324;
        uint64_t v326 = (char *)v16 + v324;
        if (*(void *)((char *)v16 + v324 + 24))
        {
          uint64_t v327 = *(void *)v326;
          uint64_t v328 = *((void *)v326 + 1);
          char v329 = v326[16];
          sub_21F7652C0(*(void *)v326, v328, v329);
          *(void *)uint64_t v325 = v327;
          *((void *)v325 + 1) = v328;
          v325[16] = v329;
          *((void *)v325 + 3) = *((void *)v326 + 3);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v330 = *((_OWORD *)v326 + 1);
          *(_OWORD *)uint64_t v325 = *(_OWORD *)v326;
          *((_OWORD *)v325 + 1) = v330;
        }
        uint64_t v331 = v17;
        a1 = v352;
        uint64_t v332 = v331[26];
        long long v333 = (void *)((char *)v15 + v332);
        uint64_t v334 = (void *)((char *)v16 + v332);
        uint64_t v335 = v334[1];
        void *v333 = *v334;
        v333[1] = v335;
        *((unsigned char *)v15 + v331[27]) = *((unsigned char *)v16 + v331[27]);
        uint64_t v336 = v331[28];
        uint64_t v337 = (char *)v15 + v336;
        uint64_t v338 = (char *)v16 + v336;
        uint64_t v339 = *((void *)v338 + 3);
        swift_bridgeObjectRetain();
        if (v339)
        {
          *((void *)v337 + 3) = v339;
          (**(void (***)(char *, char *, uint64_t))(v339 - 8))(v337, v338, v339);
        }
        else
        {
          long long v340 = *((_OWORD *)v338 + 1);
          *(_OWORD *)uint64_t v337 = *(_OWORD *)v338;
          *((_OWORD *)v337 + 1) = v340;
        }
        uint64_t v21 = v353;
        (*(void (**)(_OWORD *, void, uint64_t, int *))(v18 + 56))(v15, 0, 1, v331);
      }
      uint64_t v341 = *(int *)(v21 + 36);
      uint64_t v342 = a1 + v341;
      uint64_t v343 = (_OWORD *)(a2 + v341);
      int v344 = *(unsigned __int8 *)(a2 + v341 + 40);
      if (v344 == 255)
      {
        long long v345 = v343[1];
        *(_OWORD *)uint64_t v342 = *v343;
        *(_OWORD *)(v342 + 16) = v345;
        *(_OWORD *)(v342 + 25) = *(_OWORD *)((char *)v343 + 25);
      }
      else if (v344)
      {
        *(void *)uint64_t v342 = *(void *)v343;
        *(_OWORD *)(v342 + 8) = *(_OWORD *)((char *)v343 + 8);
        *(unsigned char *)(v342 + 40) = 1;
        swift_retain();
      }
      else
      {
        long long v346 = *(_OWORD *)((char *)v343 + 24);
        *(_OWORD *)(v342 + 24) = v346;
        (**(void (***)(uint64_t))(v346 - 8))(v342);
        *(unsigned char *)(v342 + 40) = 0;
      }
      uint64_t v347 = *(int *)(v21 + 40);
      uint64_t v348 = a1 + v347;
      uint64_t v349 = a2 + v347;
      *(_OWORD *)uint64_t v348 = *(_OWORD *)v349;
      *(unsigned char *)(v348 + 16) = *(unsigned char *)(v349 + 16);
      break;
    case 2u:
      long long v22 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v22;
      (**(void (***)(uint64_t, uint64_t))(v22 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      uint64_t v23 = *(int *)(type metadata accessor for RulesRenderer(0) + 32);
      uint64_t v24 = (_OWORD *)(a1 + v23);
      uint64_t v25 = (_OWORD *)(a2 + v23);
      uint64_t v26 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      uint64_t v27 = *((void *)v26 - 1);
      uint64_t v28 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v27 + 48);
      swift_retain();
      if (v28(v25, 1, v26))
      {
        uint64_t v29 = sub_21F76CA40(qword_267EE7A88);
        memcpy(v24, v25, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        int v30 = *((unsigned __int8 *)v25 + 40);
        if (v30 == 255)
        {
          long long v31 = v25[1];
          *uint64_t v24 = *v25;
          v24[1] = v31;
          *(_OWORD *)((char *)v24 + 25) = *(_OWORD *)((char *)v25 + 25);
        }
        else if (v30)
        {
          long long v38 = *(_OWORD *)((char *)v25 + 24);
          *(_OWORD *)((char *)v24 + 24) = v38;
          (**(void (***)(_OWORD *, _OWORD *))(v38 - 8))(v24, v25);
          *((unsigned char *)v24 + 40) = 1;
        }
        else
        {
          *(void *)uint64_t v24 = *(void *)v25;
          *((unsigned char *)v24 + 40) = 0;
          swift_retain();
        }
        *((unsigned char *)v24 + 41) = *((unsigned char *)v25 + 41);
        *((void *)v24 + 6) = *((void *)v25 + 6);
        *((void *)v24 + 7) = *((void *)v25 + 7);
        uint64_t v39 = *((void *)v25 + 9);
        *((void *)v24 + 8) = *((void *)v25 + 8);
        *((void *)v24 + 9) = v39;
        *((void *)v24 + 10) = *((void *)v25 + 10);
        int v40 = *((unsigned __int8 *)v25 + 128);
        swift_bridgeObjectRetain();
        if (v40 == 255)
        {
          long long v41 = *(_OWORD *)((char *)v25 + 104);
          *(_OWORD *)((char *)v24 + 88) = *(_OWORD *)((char *)v25 + 88);
          *(_OWORD *)((char *)v24 + 104) = v41;
          *(_OWORD *)((char *)v24 + 113) = *(_OWORD *)((char *)v25 + 113);
        }
        else if (v40)
        {
          *((void *)v24 + 11) = *((void *)v25 + 11);
          v24[6] = v25[6];
          *((unsigned char *)v24 + 128) = 1;
          swift_retain();
        }
        else
        {
          long long v42 = v25[7];
          v24[7] = v42;
          (**(void (***)(uint64_t, uint64_t))(v42 - 8))((uint64_t)v24 + 88, (uint64_t)v25 + 88);
          *((unsigned char *)v24 + 128) = 0;
        }
        *(_OWORD *)((char *)v24 + 136) = *(_OWORD *)((char *)v25 + 136);
        *((unsigned char *)v24 + 152) = *((unsigned char *)v25 + 152);
        *((void *)v24 + 20) = *((void *)v25 + 20);
        *((unsigned char *)v24 + 168) = *((unsigned char *)v25 + 168);
        long long v53 = v25[12];
        v24[11] = v25[11];
        v24[12] = v53;
        *((unsigned char *)v24 + 208) = *((unsigned char *)v25 + 208);
        uint64_t v54 = v26[11];
        uint64_t v55 = (char *)v24 + v54;
        uint64_t v56 = (char *)v25 + v54;
        uint64_t v57 = sub_21FA24C90();
        uint64_t v58 = *(void *)(v57 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
        {
          uint64_t v59 = sub_21F76CA40(&qword_26AD47C20);
          memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v55, v56, v57);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
        }
        uint64_t v60 = v26[12];
        long long v61 = (char *)v24 + v60;
        uint64_t v62 = (char *)v25 + v60;
        *(void *)long long v61 = *(void *)v62;
        v61[8] = v62[8];
        *(void *)((char *)v24 + v26[13]) = *(void *)((char *)v25 + v26[13]);
        uint64_t v63 = v26[14];
        unint64_t v64 = (char *)v24 + v63;
        uint64_t v65 = (char *)v25 + v63;
        uint64_t v66 = sub_21FA25910();
        uint64_t v67 = *(void *)(v66 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
        {
          uint64_t v68 = sub_21F76CA40(&qword_26AD4A3B8);
          memcpy(v64, v65, *(void *)(*(void *)(v68 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v64, v65, v66);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
        }
        uint64_t v69 = v26[15];
        uint64_t v70 = (char *)v24 + v69;
        uint64_t v71 = (char *)v25 + v69;
        *(void *)uint64_t v70 = *(void *)v71;
        *((_WORD *)v70 + 4) = *((_WORD *)v71 + 4);
        *(void *)((char *)v24 + v26[16]) = *(void *)((char *)v25 + v26[16]);
        *(void *)((char *)v24 + v26[17]) = *(void *)((char *)v25 + v26[17]);
        uint64_t v72 = v26[18];
        uint64_t v73 = (char *)v24 + v72;
        uint64_t v74 = (char *)v25 + v72;
        uint64_t v75 = *(void *)((char *)v25 + v72 + 24);
        swift_retain();
        if (v75)
        {
          uint64_t v76 = *(void *)v74;
          uint64_t v77 = *((void *)v74 + 1);
          char v78 = v74[16];
          sub_21F7652C0(*(void *)v74, v77, v78);
          *(void *)uint64_t v73 = v76;
          *((void *)v73 + 1) = v77;
          v73[16] = v78;
          uint64_t v79 = *((void *)v74 + 4);
          *((void *)v73 + 3) = *((void *)v74 + 3);
          uint64_t v80 = *((void *)v74 + 5);
          char v81 = v74[48];
          swift_bridgeObjectRetain();
          sub_21F770E44(v79, v80, v81);
          *((void *)v73 + 4) = v79;
          *((void *)v73 + 5) = v80;
          v73[48] = v81;
          *(_OWORD *)(v73 + 56) = *(_OWORD *)(v74 + 56);
        }
        else
        {
          long long v82 = *((_OWORD *)v74 + 3);
          *((_OWORD *)v73 + 2) = *((_OWORD *)v74 + 2);
          *((_OWORD *)v73 + 3) = v82;
          *((void *)v73 + 8) = *((void *)v74 + 8);
          long long v83 = *((_OWORD *)v74 + 1);
          *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
          *((_OWORD *)v73 + 1) = v83;
        }
        uint64_t v84 = v26[19];
        uint64_t v85 = (char *)v24 + v84;
        char v86 = (char *)v25 + v84;
        if (*(void *)((char *)v25 + v84 + 24))
        {
          uint64_t v87 = *(void *)v86;
          uint64_t v88 = *((void *)v86 + 1);
          char v89 = v86[16];
          sub_21F7652C0(*(void *)v86, v88, v89);
          *(void *)uint64_t v85 = v87;
          *((void *)v85 + 1) = v88;
          unsigned char v85[16] = v89;
          uint64_t v90 = *((void *)v86 + 4);
          *((void *)v85 + 3) = *((void *)v86 + 3);
          uint64_t v91 = *((void *)v86 + 5);
          char v92 = v86[48];
          swift_bridgeObjectRetain();
          sub_21F770E44(v90, v91, v92);
          *((void *)v85 + 4) = v90;
          *((void *)v85 + 5) = v91;
          v85[48] = v92;
          *(_OWORD *)(v85 + 56) = *(_OWORD *)(v86 + 56);
        }
        else
        {
          long long v93 = *((_OWORD *)v86 + 3);
          *((_OWORD *)v85 + 2) = *((_OWORD *)v86 + 2);
          *((_OWORD *)v85 + 3) = v93;
          *((void *)v85 + 8) = *((void *)v86 + 8);
          long long v94 = *((_OWORD *)v86 + 1);
          *(_OWORD *)uint64_t v85 = *(_OWORD *)v86;
          *((_OWORD *)v85 + 1) = v94;
        }
        uint64_t v95 = v26[20];
        uint64_t v96 = (char *)v24 + v95;
        char v97 = (char *)v25 + v95;
        if (*(void *)((char *)v25 + v95 + 24))
        {
          uint64_t v98 = *(void *)v97;
          uint64_t v99 = *((void *)v97 + 1);
          char v100 = v97[16];
          sub_21F7652C0(*(void *)v97, v99, v100);
          *(void *)uint64_t v96 = v98;
          *((void *)v96 + 1) = v99;
          v96[16] = v100;
          uint64_t v101 = *((void *)v97 + 4);
          *((void *)v96 + 3) = *((void *)v97 + 3);
          uint64_t v102 = *((void *)v97 + 5);
          char v103 = v97[48];
          swift_bridgeObjectRetain();
          sub_21F770E44(v101, v102, v103);
          *((void *)v96 + 4) = v101;
          *((void *)v96 + 5) = v102;
          v96[48] = v103;
          *(_OWORD *)(v96 + 56) = *(_OWORD *)(v97 + 56);
        }
        else
        {
          long long v104 = *((_OWORD *)v97 + 3);
          *((_OWORD *)v96 + 2) = *((_OWORD *)v97 + 2);
          *((_OWORD *)v96 + 3) = v104;
          *((void *)v96 + 8) = *((void *)v97 + 8);
          long long v105 = *((_OWORD *)v97 + 1);
          *(_OWORD *)uint64_t v96 = *(_OWORD *)v97;
          *((_OWORD *)v96 + 1) = v105;
        }
        uint64_t v106 = v26[21];
        uint64_t v107 = (char *)v24 + v106;
        char v108 = (char *)v25 + v106;
        if (*(void *)((char *)v25 + v106 + 24))
        {
          uint64_t v109 = *(void *)v108;
          uint64_t v110 = *((void *)v108 + 1);
          char v111 = v108[16];
          sub_21F7652C0(*(void *)v108, v110, v111);
          *(void *)uint64_t v107 = v109;
          *((void *)v107 + 1) = v110;
          v107[16] = v111;
          uint64_t v112 = *((void *)v108 + 4);
          *((void *)v107 + 3) = *((void *)v108 + 3);
          uint64_t v113 = *((void *)v108 + 5);
          char v114 = v108[48];
          swift_bridgeObjectRetain();
          sub_21F770E44(v112, v113, v114);
          *((void *)v107 + 4) = v112;
          *((void *)v107 + 5) = v113;
          v107[48] = v114;
          *(_OWORD *)(v107 + 56) = *(_OWORD *)(v108 + 56);
        }
        else
        {
          long long v115 = *((_OWORD *)v108 + 3);
          *((_OWORD *)v107 + 2) = *((_OWORD *)v108 + 2);
          *((_OWORD *)v107 + 3) = v115;
          *((void *)v107 + 8) = *((void *)v108 + 8);
          long long v116 = *((_OWORD *)v108 + 1);
          *(_OWORD *)uint64_t v107 = *(_OWORD *)v108;
          *((_OWORD *)v107 + 1) = v116;
        }
        uint64_t v117 = v26[22];
        uint64_t v118 = (char *)v24 + v117;
        char v119 = (char *)v25 + v117;
        *(_OWORD *)uint64_t v118 = *(_OWORD *)v119;
        *((void *)v118 + 2) = *((void *)v119 + 2);
        uint64_t v120 = v26[23];
        uint64_t v121 = (char *)v24 + v120;
        char v122 = (char *)v25 + v120;
        *(_OWORD *)uint64_t v121 = *(_OWORD *)v122;
        *((void *)v121 + 2) = *((void *)v122 + 2);
        uint64_t v123 = v26[24];
        long long v124 = (char *)v24 + v123;
        uint64_t v125 = (char *)v25 + v123;
        if (*(void *)((char *)v25 + v123 + 24))
        {
          uint64_t v126 = *(void *)v125;
          uint64_t v127 = *((void *)v125 + 1);
          char v128 = v125[16];
          sub_21F7652C0(*(void *)v125, v127, v128);
          *(void *)long long v124 = v126;
          *((void *)v124 + 1) = v127;
          v124[16] = v128;
          *((void *)v124 + 3) = *((void *)v125 + 3);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v129 = *((_OWORD *)v125 + 1);
          *(_OWORD *)long long v124 = *(_OWORD *)v125;
          *((_OWORD *)v124 + 1) = v129;
        }
        uint64_t v130 = v26[25];
        uint64_t v131 = (char *)v24 + v130;
        uint64_t v132 = (char *)v25 + v130;
        if (*(void *)((char *)v25 + v130 + 24))
        {
          uint64_t v133 = *(void *)v132;
          uint64_t v134 = *((void *)v132 + 1);
          char v135 = v132[16];
          sub_21F7652C0(*(void *)v132, v134, v135);
          *(void *)uint64_t v131 = v133;
          *((void *)v131 + 1) = v134;
          v131[16] = v135;
          *((void *)v131 + 3) = *((void *)v132 + 3);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v136 = *((_OWORD *)v132 + 1);
          *(_OWORD *)uint64_t v131 = *(_OWORD *)v132;
          *((_OWORD *)v131 + 1) = v136;
        }
        uint64_t v137 = v26[26];
        uint64_t v138 = (void *)((char *)v24 + v137);
        uint64_t v139 = (void *)((char *)v25 + v137);
        uint64_t v140 = v139[1];
        *uint64_t v138 = *v139;
        v138[1] = v140;
        *((unsigned char *)v24 + v26[27]) = *((unsigned char *)v25 + v26[27]);
        uint64_t v141 = v26[28];
        uint64_t v142 = (char *)v24 + v141;
        char v143 = (char *)v25 + v141;
        uint64_t v144 = *((void *)v143 + 3);
        swift_bridgeObjectRetain();
        if (v144)
        {
          *((void *)v142 + 3) = v144;
          (**(void (***)(char *, char *, uint64_t))(v144 - 8))(v142, v143, v144);
        }
        else
        {
          long long v145 = *((_OWORD *)v143 + 1);
          *(_OWORD *)uint64_t v142 = *(_OWORD *)v143;
          *((_OWORD *)v142 + 1) = v145;
        }
        (*(void (**)(_OWORD *, void, uint64_t, int *))(v27 + 56))(v24, 0, 1, v26);
      }
      break;
    case 3u:
      *(void *)a1 = *(void *)a2;
      swift_retain();
      break;
    default:
      long long v4 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      uint64_t v351 = type metadata accessor for RectanglesRenderer(0);
      uint64_t v5 = *(int *)(v351 + 32);
      int v6 = (_OWORD *)(a1 + v5);
      uint64_t v7 = (_OWORD *)(a2 + v5);
      uint64_t v8 = type metadata accessor for ChartContentRenderContext.Environment(0);
      uint64_t v9 = *(void *)(v8 - 8);
      int v10 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v9 + 48);
      swift_retain();
      if (v10(v7, 1, v8))
      {
        uint64_t v11 = sub_21F76CA40(qword_267EE7A88);
        memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
        uint64_t v12 = v351;
      }
      else
      {
        long long v354 = (int *)v8;
        int v32 = *((unsigned __int8 *)v7 + 40);
        if (v32 == 255)
        {
          long long v33 = v7[1];
          *int v6 = *v7;
          v6[1] = v33;
          *(_OWORD *)((char *)v6 + 25) = *(_OWORD *)((char *)v7 + 25);
          uint64_t v34 = (int *)v8;
        }
        else
        {
          uint64_t v34 = (int *)v8;
          if (v32)
          {
            long long v43 = *(_OWORD *)((char *)v7 + 24);
            *(_OWORD *)((char *)v6 + 24) = v43;
            (**(void (***)(_OWORD *, _OWORD *))(v43 - 8))(v6, v7);
            *((unsigned char *)v6 + 40) = 1;
          }
          else
          {
            *(void *)int v6 = *(void *)v7;
            *((unsigned char *)v6 + 40) = 0;
            swift_retain();
          }
        }
        *((unsigned char *)v6 + 41) = *((unsigned char *)v7 + 41);
        *((void *)v6 + 6) = *((void *)v7 + 6);
        *((void *)v6 + 7) = *((void *)v7 + 7);
        uint64_t v44 = *((void *)v7 + 9);
        *((void *)v6 + 8) = *((void *)v7 + 8);
        *((void *)v6 + 9) = v44;
        *((void *)v6 + 10) = *((void *)v7 + 10);
        int v45 = *((unsigned __int8 *)v7 + 128);
        swift_bridgeObjectRetain();
        if (v45 == 255)
        {
          long long v46 = *(_OWORD *)((char *)v7 + 104);
          *(_OWORD *)((char *)v6 + 88) = *(_OWORD *)((char *)v7 + 88);
          *(_OWORD *)((char *)v6 + 104) = v46;
          *(_OWORD *)((char *)v6 + 113) = *(_OWORD *)((char *)v7 + 113);
        }
        else if (v45)
        {
          *((void *)v6 + 11) = *((void *)v7 + 11);
          v6[6] = v7[6];
          *((unsigned char *)v6 + 128) = 1;
          swift_retain();
        }
        else
        {
          long long v47 = v7[7];
          v6[7] = v47;
          (**(void (***)(uint64_t, uint64_t))(v47 - 8))((uint64_t)v6 + 88, (uint64_t)v7 + 88);
          *((unsigned char *)v6 + 128) = 0;
        }
        *(_OWORD *)((char *)v6 + 136) = *(_OWORD *)((char *)v7 + 136);
        *((unsigned char *)v6 + 152) = *((unsigned char *)v7 + 152);
        *((void *)v6 + 20) = *((void *)v7 + 20);
        *((unsigned char *)v6 + 168) = *((unsigned char *)v7 + 168);
        long long v146 = v7[12];
        v6[11] = v7[11];
        v6[12] = v146;
        *((unsigned char *)v6 + 208) = *((unsigned char *)v7 + 208);
        uint64_t v147 = v34[11];
        uint64_t v148 = (char *)v6 + v147;
        uint64_t v149 = (char *)v7 + v147;
        uint64_t v150 = sub_21FA24C90();
        uint64_t v151 = *(void *)(v150 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v151 + 48))(v149, 1, v150))
        {
          uint64_t v152 = sub_21F76CA40(&qword_26AD47C20);
          memcpy(v148, v149, *(void *)(*(void *)(v152 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v151 + 16))(v148, v149, v150);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v151 + 56))(v148, 0, 1, v150);
        }
        uint64_t v153 = v34[12];
        long long v154 = (char *)v6 + v153;
        uint64_t v155 = (char *)v7 + v153;
        *(void *)long long v154 = *(void *)v155;
        v154[8] = v155[8];
        *(void *)((char *)v6 + v34[13]) = *(void *)((char *)v7 + v34[13]);
        uint64_t v156 = v34[14];
        uint64_t v157 = (char *)v6 + v156;
        uint64_t v158 = (char *)v7 + v156;
        uint64_t v159 = sub_21FA25910();
        uint64_t v160 = *(void *)(v159 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v160 + 48))(v158, 1, v159))
        {
          uint64_t v161 = sub_21F76CA40(&qword_26AD4A3B8);
          memcpy(v157, v158, *(void *)(*(void *)(v161 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v160 + 16))(v157, v158, v159);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v160 + 56))(v157, 0, 1, v159);
        }
        uint64_t v162 = v34[15];
        long long v163 = (char *)v6 + v162;
        uint64_t v164 = (char *)v7 + v162;
        *(void *)long long v163 = *(void *)v164;
        *((_WORD *)v163 + 4) = *((_WORD *)v164 + 4);
        *(void *)((char *)v6 + v34[16]) = *(void *)((char *)v7 + v34[16]);
        *(void *)((char *)v6 + v34[17]) = *(void *)((char *)v7 + v34[17]);
        uint64_t v165 = v34[18];
        uint64_t v166 = (char *)v6 + v165;
        uint64_t v167 = (char *)v7 + v165;
        uint64_t v168 = *(void *)((char *)v7 + v165 + 24);
        swift_retain();
        if (v168)
        {
          uint64_t v169 = *(void *)v167;
          uint64_t v170 = *((void *)v167 + 1);
          char v171 = v167[16];
          sub_21F7652C0(*(void *)v167, v170, v171);
          *(void *)uint64_t v166 = v169;
          *((void *)v166 + 1) = v170;
          v166[16] = v171;
          uint64_t v172 = *((void *)v167 + 4);
          *((void *)v166 + 3) = *((void *)v167 + 3);
          uint64_t v173 = *((void *)v167 + 5);
          char v174 = v167[48];
          swift_bridgeObjectRetain();
          sub_21F770E44(v172, v173, v174);
          *((void *)v166 + 4) = v172;
          *((void *)v166 + 5) = v173;
          v166[48] = v174;
          *(_OWORD *)(v166 + 56) = *(_OWORD *)(v167 + 56);
        }
        else
        {
          long long v175 = *((_OWORD *)v167 + 3);
          *((_OWORD *)v166 + 2) = *((_OWORD *)v167 + 2);
          *((_OWORD *)v166 + 3) = v175;
          *((void *)v166 + 8) = *((void *)v167 + 8);
          long long v176 = *((_OWORD *)v167 + 1);
          *(_OWORD *)uint64_t v166 = *(_OWORD *)v167;
          *((_OWORD *)v166 + 1) = v176;
        }
        uint64_t v177 = v354[19];
        uint64_t v178 = (char *)v6 + v177;
        uint64_t v179 = (char *)v7 + v177;
        if (*(void *)((char *)v7 + v177 + 24))
        {
          uint64_t v180 = *(void *)v179;
          uint64_t v181 = *((void *)v179 + 1);
          char v182 = v179[16];
          sub_21F7652C0(*(void *)v179, v181, v182);
          *(void *)uint64_t v178 = v180;
          *((void *)v178 + 1) = v181;
          v178[16] = v182;
          uint64_t v183 = *((void *)v179 + 4);
          *((void *)v178 + 3) = *((void *)v179 + 3);
          uint64_t v184 = *((void *)v179 + 5);
          char v185 = v179[48];
          swift_bridgeObjectRetain();
          sub_21F770E44(v183, v184, v185);
          *((void *)v178 + 4) = v183;
          *((void *)v178 + 5) = v184;
          v178[48] = v185;
          *(_OWORD *)(v178 + 56) = *(_OWORD *)(v179 + 56);
        }
        else
        {
          long long v186 = *((_OWORD *)v179 + 3);
          *((_OWORD *)v178 + 2) = *((_OWORD *)v179 + 2);
          *((_OWORD *)v178 + 3) = v186;
          *((void *)v178 + 8) = *((void *)v179 + 8);
          long long v187 = *((_OWORD *)v179 + 1);
          *(_OWORD *)uint64_t v178 = *(_OWORD *)v179;
          *((_OWORD *)v178 + 1) = v187;
        }
        uint64_t v188 = v354[20];
        char v189 = (char *)v6 + v188;
        uint64_t v190 = (char *)v7 + v188;
        if (*(void *)((char *)v7 + v188 + 24))
        {
          uint64_t v191 = *(void *)v190;
          uint64_t v192 = *((void *)v190 + 1);
          char v193 = v190[16];
          sub_21F7652C0(*(void *)v190, v192, v193);
          *(void *)char v189 = v191;
          *((void *)v189 + 1) = v192;
          v189[16] = v193;
          uint64_t v194 = *((void *)v190 + 4);
          *((void *)v189 + 3) = *((void *)v190 + 3);
          uint64_t v195 = *((void *)v190 + 5);
          char v196 = v190[48];
          swift_bridgeObjectRetain();
          sub_21F770E44(v194, v195, v196);
          *((void *)v189 + 4) = v194;
          *((void *)v189 + 5) = v195;
          v189[48] = v196;
          *(_OWORD *)(v189 + 56) = *(_OWORD *)(v190 + 56);
        }
        else
        {
          long long v197 = *((_OWORD *)v190 + 3);
          *((_OWORD *)v189 + 2) = *((_OWORD *)v190 + 2);
          *((_OWORD *)v189 + 3) = v197;
          *((void *)v189 + 8) = *((void *)v190 + 8);
          long long v198 = *((_OWORD *)v190 + 1);
          *(_OWORD *)char v189 = *(_OWORD *)v190;
          *((_OWORD *)v189 + 1) = v198;
        }
        uint64_t v199 = v354[21];
        uint64_t v200 = (char *)v6 + v199;
        uint64_t v201 = (char *)v7 + v199;
        if (*(void *)((char *)v7 + v199 + 24))
        {
          uint64_t v202 = *(void *)v201;
          uint64_t v203 = *((void *)v201 + 1);
          char v204 = v201[16];
          sub_21F7652C0(*(void *)v201, v203, v204);
          *(void *)uint64_t v200 = v202;
          *((void *)v200 + 1) = v203;
          v200[16] = v204;
          uint64_t v205 = *((void *)v201 + 4);
          *((void *)v200 + 3) = *((void *)v201 + 3);
          uint64_t v206 = *((void *)v201 + 5);
          char v207 = v201[48];
          swift_bridgeObjectRetain();
          sub_21F770E44(v205, v206, v207);
          *((void *)v200 + 4) = v205;
          *((void *)v200 + 5) = v206;
          v200[48] = v207;
          *(_OWORD *)(v200 + 56) = *(_OWORD *)(v201 + 56);
        }
        else
        {
          long long v208 = *((_OWORD *)v201 + 3);
          *((_OWORD *)v200 + 2) = *((_OWORD *)v201 + 2);
          *((_OWORD *)v200 + 3) = v208;
          *((void *)v200 + 8) = *((void *)v201 + 8);
          long long v209 = *((_OWORD *)v201 + 1);
          *(_OWORD *)uint64_t v200 = *(_OWORD *)v201;
          *((_OWORD *)v200 + 1) = v209;
        }
        uint64_t v210 = v354[22];
        uint64_t v211 = (char *)v6 + v210;
        uint64_t v212 = (char *)v7 + v210;
        *(_OWORD *)uint64_t v211 = *(_OWORD *)v212;
        *((void *)v211 + 2) = *((void *)v212 + 2);
        uint64_t v213 = v354[23];
        char v214 = (char *)v6 + v213;
        uint64_t v215 = (char *)v7 + v213;
        *(_OWORD *)char v214 = *(_OWORD *)v215;
        *((void *)v214 + 2) = *((void *)v215 + 2);
        uint64_t v216 = v354[24];
        char v217 = (char *)v6 + v216;
        long long v218 = (char *)v7 + v216;
        if (*(void *)((char *)v7 + v216 + 24))
        {
          uint64_t v219 = *(void *)v218;
          uint64_t v220 = *((void *)v218 + 1);
          char v221 = v218[16];
          sub_21F7652C0(*(void *)v218, v220, v221);
          *(void *)char v217 = v219;
          *((void *)v217 + 1) = v220;
          v217[16] = v221;
          *((void *)v217 + 3) = *((void *)v218 + 3);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v222 = *((_OWORD *)v218 + 1);
          *(_OWORD *)char v217 = *(_OWORD *)v218;
          *((_OWORD *)v217 + 1) = v222;
        }
        uint64_t v223 = v354[25];
        uint64_t v224 = (char *)v6 + v223;
        uint64_t v225 = (char *)v7 + v223;
        if (*(void *)((char *)v7 + v223 + 24))
        {
          uint64_t v226 = *(void *)v225;
          uint64_t v227 = *((void *)v225 + 1);
          char v228 = v225[16];
          sub_21F7652C0(*(void *)v225, v227, v228);
          *(void *)uint64_t v224 = v226;
          *((void *)v224 + 1) = v227;
          v224[16] = v228;
          *((void *)v224 + 3) = *((void *)v225 + 3);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v229 = *((_OWORD *)v225 + 1);
          *(_OWORD *)uint64_t v224 = *(_OWORD *)v225;
          *((_OWORD *)v224 + 1) = v229;
        }
        uint64_t v230 = v354[26];
        char v231 = (void *)((char *)v6 + v230);
        long long v232 = (void *)((char *)v7 + v230);
        uint64_t v233 = v232[1];
        *char v231 = *v232;
        v231[1] = v233;
        *((unsigned char *)v6 + v354[27]) = *((unsigned char *)v7 + v354[27]);
        uint64_t v234 = v354[28];
        long long v235 = (char *)v6 + v234;
        uint64_t v236 = (char *)v7 + v234;
        uint64_t v237 = *((void *)v236 + 3);
        swift_bridgeObjectRetain();
        if (v237)
        {
          *((void *)v235 + 3) = v237;
          (**(void (***)(char *, char *, uint64_t))(v237 - 8))(v235, v236, v237);
        }
        else
        {
          long long v238 = *((_OWORD *)v236 + 1);
          *(_OWORD *)long long v235 = *(_OWORD *)v236;
          *((_OWORD *)v235 + 1) = v238;
        }
        uint64_t v12 = v351;
        (*(void (**)(_OWORD *, void, uint64_t, int *))(v9 + 56))(v6, 0, 1, v354);
      }
      uint64_t v239 = *(int *)(v12 + 36);
      uint64_t v240 = a1 + v239;
      uint64_t v241 = a2 + v239;
      long long v242 = *(_OWORD *)(v241 + 16);
      *(_OWORD *)uint64_t v240 = *(_OWORD *)v241;
      *(_OWORD *)(v240 + 16) = v242;
      *(unsigned char *)(v240 + 32) = *(unsigned char *)(v241 + 32);
      uint64_t v243 = *(int *)(v12 + 40);
      uint64_t v244 = a1 + v243;
      uint64_t v245 = a2 + v243;
      uint64_t v246 = sub_21FA24C90();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v246 - 8) + 16))(v244, v245, v246);
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_21F824100(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_21F83E378(a1, type metadata accessor for AnyVectorizedRenderer.MarkRenderer);
    type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v13 = *(void *)(a2 + 24);
        *(void *)(a1 + 24) = v13;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1, a2);
        *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        uint64_t v14 = (int *)type metadata accessor for PointsRenderer(0);
        uint64_t v15 = v14[8];
        int v16 = (_OWORD *)(a1 + v15);
        uint64_t v17 = (long long *)(a2 + v15);
        uint64_t v18 = type metadata accessor for ChartContentRenderContext.Environment(0);
        uint64_t v19 = *(void *)(v18 - 8);
        uint64_t v20 = *(unsigned int (**)(long long *, uint64_t, uint64_t))(v19 + 48);
        swift_retain();
        if (v20(v17, 1, v18))
        {
          uint64_t v21 = sub_21F76CA40(qword_267EE7A88);
          memcpy(v16, v17, *(void *)(*(void *)(v21 - 8) + 64));
        }
        else
        {
          CGRect v384 = v14;
          uint64_t v386 = (int *)v18;
          int v37 = *((unsigned __int8 *)v17 + 40);
          if (v37 == 255)
          {
            long long v38 = *v17;
            long long v39 = v17[1];
            *(_OWORD *)((char *)v16 + 25) = *(long long *)((char *)v17 + 25);
            *int v16 = v38;
            v16[1] = v39;
            int v40 = (int *)v18;
          }
          else
          {
            int v40 = (int *)v18;
            if (v37)
            {
              uint64_t v51 = *((void *)v17 + 3);
              *((void *)v16 + 3) = v51;
              *((void *)v16 + 4) = *((void *)v17 + 4);
              (**(void (***)(_OWORD *, long long *))(v51 - 8))(v16, v17);
              *((unsigned char *)v16 + 40) = 1;
            }
            else
            {
              *(void *)int v16 = *(void *)v17;
              *((unsigned char *)v16 + 40) = 0;
              swift_retain();
            }
          }
          *((unsigned char *)v16 + 41) = *((unsigned char *)v17 + 41);
          *((void *)v16 + 6) = *((void *)v17 + 6);
          *((_DWORD *)v16 + 14) = *((_DWORD *)v17 + 14);
          *((_DWORD *)v16 + 15) = *((_DWORD *)v17 + 15);
          *((void *)v16 + 8) = *((void *)v17 + 8);
          *((void *)v16 + 9) = *((void *)v17 + 9);
          *((void *)v16 + 10) = *((void *)v17 + 10);
          int v52 = *((unsigned __int8 *)v17 + 128);
          swift_bridgeObjectRetain();
          if (v52 == 255)
          {
            long long v53 = *(long long *)((char *)v17 + 88);
            long long v54 = *(long long *)((char *)v17 + 104);
            *(_OWORD *)((char *)v16 + 113) = *(long long *)((char *)v17 + 113);
            *(_OWORD *)((char *)v16 + 88) = v53;
            *(_OWORD *)((char *)v16 + 104) = v54;
          }
          else if (v52)
          {
            *((void *)v16 + 11) = *((void *)v17 + 11);
            v16[6] = v17[6];
            *((unsigned char *)v16 + 128) = 1;
            swift_retain();
          }
          else
          {
            uint64_t v55 = *((void *)v17 + 14);
            *((void *)v16 + 14) = v55;
            *((void *)v16 + 15) = *((void *)v17 + 15);
            (**(void (***)(uint64_t, uint64_t))(v55 - 8))((uint64_t)v16 + 88, (uint64_t)v17 + 88);
            *((unsigned char *)v16 + 128) = 0;
          }
          long long v269 = *(long long *)((char *)v17 + 136);
          *((unsigned char *)v16 + 152) = *((unsigned char *)v17 + 152);
          *(_OWORD *)((char *)v16 + 136) = v269;
          uint64_t v270 = *((void *)v17 + 20);
          *((unsigned char *)v16 + 168) = *((unsigned char *)v17 + 168);
          *((void *)v16 + 20) = v270;
          long long v271 = v17[11];
          long long v272 = v17[12];
          *((unsigned char *)v16 + 208) = *((unsigned char *)v17 + 208);
          v16[11] = v271;
          v16[12] = v272;
          uint64_t v273 = v40[11];
          uint64_t v274 = (char *)v16 + v273;
          char v275 = (char *)v17 + v273;
          uint64_t v276 = sub_21FA24C90();
          uint64_t v277 = *(void *)(v276 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v277 + 48))(v275, 1, v276))
          {
            uint64_t v278 = sub_21F76CA40(&qword_26AD47C20);
            memcpy(v274, v275, *(void *)(*(void *)(v278 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v277 + 16))(v274, v275, v276);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v277 + 56))(v274, 0, 1, v276);
          }
          uint64_t v279 = v40[12];
          uint64_t v280 = (char *)v16 + v279;
          uint64_t v281 = (char *)v17 + v279;
          uint64_t v282 = *(void *)v281;
          v280[8] = v281[8];
          *(void *)uint64_t v280 = v282;
          *(void *)((char *)v16 + v40[13]) = *(void *)((char *)v17 + v40[13]);
          uint64_t v283 = v40[14];
          uint64_t v284 = (char *)v16 + v283;
          uint64_t v285 = (char *)v17 + v283;
          uint64_t v286 = sub_21FA25910();
          uint64_t v287 = *(void *)(v286 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v287 + 48))(v285, 1, v286))
          {
            uint64_t v288 = sub_21F76CA40(&qword_26AD4A3B8);
            memcpy(v284, v285, *(void *)(*(void *)(v288 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v287 + 16))(v284, v285, v286);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v287 + 56))(v284, 0, 1, v286);
          }
          uint64_t v289 = v40[15];
          uint64_t v290 = (char *)v16 + v289;
          uint64_t v291 = (char *)v17 + v289;
          *(void *)uint64_t v290 = *(void *)v291;
          *((_WORD *)v290 + 4) = *((_WORD *)v291 + 4);
          *(void *)((char *)v16 + v40[16]) = *(void *)((char *)v17 + v40[16]);
          *(void *)((char *)v16 + v40[17]) = *(void *)((char *)v17 + v40[17]);
          uint64_t v292 = v40[18];
          uint64_t v293 = (char *)v16 + v292;
          char v294 = (char *)v17 + v292;
          uint64_t v295 = *(void *)((char *)v17 + v292 + 24);
          swift_retain();
          if (v295)
          {
            uint64_t v296 = *(void *)v294;
            uint64_t v297 = *((void *)v294 + 1);
            char v298 = v294[16];
            sub_21F7652C0(*(void *)v294, v297, v298);
            *(void *)uint64_t v293 = v296;
            *((void *)v293 + 1) = v297;
            v293[16] = v298;
            *((void *)v293 + 3) = *((void *)v294 + 3);
            uint64_t v299 = *((void *)v294 + 4);
            uint64_t v300 = *((void *)v294 + 5);
            char v301 = v294[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v299, v300, v301);
            *((void *)v293 + 4) = v299;
            *((void *)v293 + 5) = v300;
            v293[48] = v301;
            *(_OWORD *)(v293 + 56) = *(_OWORD *)(v294 + 56);
          }
          else
          {
            *(_OWORD *)uint64_t v293 = *(_OWORD *)v294;
            long long v302 = *((_OWORD *)v294 + 1);
            long long v303 = *((_OWORD *)v294 + 2);
            long long v304 = *((_OWORD *)v294 + 3);
            *((void *)v293 + 8) = *((void *)v294 + 8);
            *((_OWORD *)v293 + 2) = v303;
            *((_OWORD *)v293 + 3) = v304;
            *((_OWORD *)v293 + 1) = v302;
          }
          uint64_t v305 = v386[19];
          uint64_t v306 = (char *)v16 + v305;
          uint64_t v307 = (char *)v17 + v305;
          if (*(void *)((char *)v17 + v305 + 24))
          {
            uint64_t v308 = *(void *)v307;
            uint64_t v309 = *((void *)v307 + 1);
            char v310 = v307[16];
            sub_21F7652C0(*(void *)v307, v309, v310);
            *(void *)uint64_t v306 = v308;
            *((void *)v306 + 1) = v309;
            v306[16] = v310;
            *((void *)v306 + 3) = *((void *)v307 + 3);
            uint64_t v311 = *((void *)v307 + 4);
            uint64_t v312 = *((void *)v307 + 5);
            char v313 = v307[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v311, v312, v313);
            *((void *)v306 + 4) = v311;
            *((void *)v306 + 5) = v312;
            v306[48] = v313;
            *(_OWORD *)(v306 + 56) = *(_OWORD *)(v307 + 56);
          }
          else
          {
            *(_OWORD *)uint64_t v306 = *(_OWORD *)v307;
            long long v314 = *((_OWORD *)v307 + 1);
            long long v315 = *((_OWORD *)v307 + 2);
            long long v316 = *((_OWORD *)v307 + 3);
            *((void *)v306 + 8) = *((void *)v307 + 8);
            *((_OWORD *)v306 + 2) = v315;
            *((_OWORD *)v306 + 3) = v316;
            *((_OWORD *)v306 + 1) = v314;
          }
          uint64_t v317 = v386[20];
          char v318 = (char *)v16 + v317;
          long long v319 = (char *)v17 + v317;
          if (*(void *)((char *)v17 + v317 + 24))
          {
            uint64_t v320 = *(void *)v319;
            uint64_t v321 = *((void *)v319 + 1);
            char v322 = v319[16];
            sub_21F7652C0(*(void *)v319, v321, v322);
            *(void *)char v318 = v320;
            *((void *)v318 + 1) = v321;
            v318[16] = v322;
            *((void *)v318 + 3) = *((void *)v319 + 3);
            uint64_t v323 = *((void *)v319 + 4);
            uint64_t v324 = *((void *)v319 + 5);
            char v325 = v319[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v323, v324, v325);
            *((void *)v318 + 4) = v323;
            *((void *)v318 + 5) = v324;
            v318[48] = v325;
            *(_OWORD *)(v318 + 56) = *(_OWORD *)(v319 + 56);
          }
          else
          {
            *(_OWORD *)char v318 = *(_OWORD *)v319;
            long long v326 = *((_OWORD *)v319 + 1);
            long long v327 = *((_OWORD *)v319 + 2);
            long long v328 = *((_OWORD *)v319 + 3);
            *((void *)v318 + 8) = *((void *)v319 + 8);
            *((_OWORD *)v318 + 2) = v327;
            *((_OWORD *)v318 + 3) = v328;
            *((_OWORD *)v318 + 1) = v326;
          }
          uint64_t v329 = v386[21];
          long long v330 = (char *)v16 + v329;
          uint64_t v331 = (char *)v17 + v329;
          if (*(void *)((char *)v17 + v329 + 24))
          {
            uint64_t v332 = *(void *)v331;
            uint64_t v333 = *((void *)v331 + 1);
            char v334 = v331[16];
            sub_21F7652C0(*(void *)v331, v333, v334);
            *(void *)long long v330 = v332;
            *((void *)v330 + 1) = v333;
            v330[16] = v334;
            *((void *)v330 + 3) = *((void *)v331 + 3);
            uint64_t v335 = *((void *)v331 + 4);
            uint64_t v336 = *((void *)v331 + 5);
            char v337 = v331[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v335, v336, v337);
            *((void *)v330 + 4) = v335;
            *((void *)v330 + 5) = v336;
            v330[48] = v337;
            *(_OWORD *)(v330 + 56) = *(_OWORD *)(v331 + 56);
          }
          else
          {
            *(_OWORD *)long long v330 = *(_OWORD *)v331;
            long long v338 = *((_OWORD *)v331 + 1);
            long long v339 = *((_OWORD *)v331 + 2);
            long long v340 = *((_OWORD *)v331 + 3);
            *((void *)v330 + 8) = *((void *)v331 + 8);
            *((_OWORD *)v330 + 2) = v339;
            *((_OWORD *)v330 + 3) = v340;
            *((_OWORD *)v330 + 1) = v338;
          }
          uint64_t v341 = v386[22];
          uint64_t v342 = (char *)v16 + v341;
          uint64_t v343 = (char *)v17 + v341;
          long long v344 = *(_OWORD *)v343;
          *((void *)v342 + 2) = *((void *)v343 + 2);
          *(_OWORD *)uint64_t v342 = v344;
          uint64_t v345 = v386[23];
          long long v346 = (char *)v16 + v345;
          uint64_t v347 = (char *)v17 + v345;
          long long v348 = *(_OWORD *)v347;
          *((void *)v346 + 2) = *((void *)v347 + 2);
          *(_OWORD *)long long v346 = v348;
          uint64_t v349 = v386[24];
          uint64_t v350 = (char *)v16 + v349;
          uint64_t v351 = (char *)v17 + v349;
          if (*(void *)((char *)v17 + v349 + 24))
          {
            uint64_t v352 = *(void *)v351;
            uint64_t v353 = *((void *)v351 + 1);
            char v354 = v351[16];
            sub_21F7652C0(*(void *)v351, v353, v354);
            *(void *)uint64_t v350 = v352;
            *((void *)v350 + 1) = v353;
            v350[16] = v354;
            *((void *)v350 + 3) = *((void *)v351 + 3);
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v355 = *((_OWORD *)v351 + 1);
            *(_OWORD *)uint64_t v350 = *(_OWORD *)v351;
            *((_OWORD *)v350 + 1) = v355;
          }
          uint64_t v356 = v386[25];
          uint64_t v357 = (char *)v16 + v356;
          uint64_t v358 = (char *)v17 + v356;
          if (*(void *)((char *)v17 + v356 + 24))
          {
            uint64_t v359 = *(void *)v358;
            uint64_t v360 = *((void *)v358 + 1);
            char v361 = v358[16];
            sub_21F7652C0(*(void *)v358, v360, v361);
            *(void *)uint64_t v357 = v359;
            *((void *)v357 + 1) = v360;
            v357[16] = v361;
            *((void *)v357 + 3) = *((void *)v358 + 3);
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v362 = *((_OWORD *)v358 + 1);
            *(_OWORD *)uint64_t v357 = *(_OWORD *)v358;
            *((_OWORD *)v357 + 1) = v362;
          }
          uint64_t v363 = v386[26];
          long long v364 = (void *)((char *)v16 + v363);
          uint64_t v365 = (void *)((char *)v17 + v363);
          *long long v364 = *v365;
          v364[1] = v365[1];
          *((unsigned char *)v16 + v386[27]) = *((unsigned char *)v17 + v386[27]);
          uint64_t v366 = v386[28];
          v367 = (char *)v16 + v366;
          uint64_t v368 = (char *)v17 + v366;
          uint64_t v369 = *((void *)v368 + 3);
          swift_bridgeObjectRetain();
          if (v369)
          {
            *((void *)v367 + 3) = v369;
            (**(void (***)(char *, char *, uint64_t))(v369 - 8))(v367, v368, v369);
          }
          else
          {
            long long v370 = *((_OWORD *)v368 + 1);
            *(_OWORD *)v367 = *(_OWORD *)v368;
            *((_OWORD *)v367 + 1) = v370;
          }
          uint64_t v14 = v384;
          (*(void (**)(_OWORD *, void, uint64_t, int *))(v19 + 56))(v16, 0, 1, v386);
        }
        uint64_t v371 = v14[9];
        uint64_t v372 = a1 + v371;
        uint64_t v373 = (long long *)(a2 + v371);
        int v374 = *(unsigned __int8 *)(a2 + v371 + 40);
        if (v374 == 255)
        {
          long long v375 = *v373;
          long long v376 = v373[1];
          *(_OWORD *)(v372 + 25) = *(long long *)((char *)v373 + 25);
          *(_OWORD *)uint64_t v372 = v375;
          *(_OWORD *)(v372 + 16) = v376;
        }
        else if (v374)
        {
          *(void *)uint64_t v372 = *(void *)v373;
          *(_OWORD *)(v372 + 8) = *(long long *)((char *)v373 + 8);
          *(unsigned char *)(v372 + 40) = 1;
          swift_retain();
        }
        else
        {
          uint64_t v377 = *((void *)v373 + 3);
          *(void *)(v372 + 24) = v377;
          *(void *)(v372 + 32) = *((void *)v373 + 4);
          (**(void (***)(uint64_t))(v377 - 8))(v372);
          *(unsigned char *)(v372 + 40) = 0;
        }
        uint64_t v378 = v14[10];
        uint64_t v379 = a1 + v378;
        uint64_t v380 = (long long *)(a2 + v378);
        long long v381 = *v380;
        *(unsigned char *)(v379 + 16) = *((unsigned char *)v380 + 16);
        *(_OWORD *)uint64_t v379 = v381;
        break;
      case 2u:
        uint64_t v22 = *(void *)(a2 + 24);
        *(void *)(a1 + 24) = v22;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        (**(void (***)(uint64_t, uint64_t))(v22 - 8))(a1, a2);
        *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        uint64_t v23 = *(int *)(type metadata accessor for RulesRenderer(0) + 32);
        uint64_t v24 = (_OWORD *)(a1 + v23);
        uint64_t v25 = (long long *)(a2 + v23);
        uint64_t v26 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
        uint64_t v27 = *((void *)v26 - 1);
        uint64_t v28 = *(unsigned int (**)(long long *, uint64_t, int *))(v27 + 48);
        swift_retain();
        if (v28(v25, 1, v26))
        {
          uint64_t v29 = sub_21F76CA40(qword_267EE7A88);
          memcpy(v24, v25, *(void *)(*(void *)(v29 - 8) + 64));
        }
        else
        {
          int v30 = *((unsigned __int8 *)v25 + 40);
          if (v30 == 255)
          {
            long long v31 = *v25;
            long long v32 = v25[1];
            *(_OWORD *)((char *)v24 + 25) = *(long long *)((char *)v25 + 25);
            *uint64_t v24 = v31;
            v24[1] = v32;
          }
          else if (v30)
          {
            uint64_t v41 = *((void *)v25 + 3);
            *((void *)v24 + 3) = v41;
            *((void *)v24 + 4) = *((void *)v25 + 4);
            (**(void (***)(_OWORD *, long long *))(v41 - 8))(v24, v25);
            *((unsigned char *)v24 + 40) = 1;
          }
          else
          {
            *(void *)uint64_t v24 = *(void *)v25;
            *((unsigned char *)v24 + 40) = 0;
            swift_retain();
          }
          *((unsigned char *)v24 + 41) = *((unsigned char *)v25 + 41);
          *((void *)v24 + 6) = *((void *)v25 + 6);
          *((_DWORD *)v24 + 14) = *((_DWORD *)v25 + 14);
          *((_DWORD *)v24 + 15) = *((_DWORD *)v25 + 15);
          *((void *)v24 + 8) = *((void *)v25 + 8);
          *((void *)v24 + 9) = *((void *)v25 + 9);
          *((void *)v24 + 10) = *((void *)v25 + 10);
          int v42 = *((unsigned __int8 *)v25 + 128);
          swift_bridgeObjectRetain();
          if (v42 == 255)
          {
            long long v43 = *(long long *)((char *)v25 + 88);
            long long v44 = *(long long *)((char *)v25 + 104);
            *(_OWORD *)((char *)v24 + 113) = *(long long *)((char *)v25 + 113);
            *(_OWORD *)((char *)v24 + 88) = v43;
            *(_OWORD *)((char *)v24 + 104) = v44;
          }
          else if (v42)
          {
            *((void *)v24 + 11) = *((void *)v25 + 11);
            v24[6] = v25[6];
            *((unsigned char *)v24 + 128) = 1;
            swift_retain();
          }
          else
          {
            uint64_t v45 = *((void *)v25 + 14);
            *((void *)v24 + 14) = v45;
            *((void *)v24 + 15) = *((void *)v25 + 15);
            (**(void (***)(uint64_t, uint64_t))(v45 - 8))((uint64_t)v24 + 88, (uint64_t)v25 + 88);
            *((unsigned char *)v24 + 128) = 0;
          }
          long long v56 = *(long long *)((char *)v25 + 136);
          *((unsigned char *)v24 + 152) = *((unsigned char *)v25 + 152);
          *(_OWORD *)((char *)v24 + 136) = v56;
          uint64_t v57 = *((void *)v25 + 20);
          *((unsigned char *)v24 + 168) = *((unsigned char *)v25 + 168);
          *((void *)v24 + 20) = v57;
          long long v58 = v25[11];
          long long v59 = v25[12];
          *((unsigned char *)v24 + 208) = *((unsigned char *)v25 + 208);
          v24[11] = v58;
          v24[12] = v59;
          uint64_t v60 = v26[11];
          long long v61 = (char *)v24 + v60;
          uint64_t v62 = (char *)v25 + v60;
          uint64_t v63 = sub_21FA24C90();
          uint64_t v64 = *(void *)(v63 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
          {
            uint64_t v65 = sub_21F76CA40(&qword_26AD47C20);
            memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v61, v62, v63);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
          }
          uint64_t v66 = v26[12];
          uint64_t v67 = (char *)v24 + v66;
          uint64_t v68 = (char *)v25 + v66;
          uint64_t v69 = *(void *)v68;
          v67[8] = v68[8];
          *(void *)uint64_t v67 = v69;
          *(void *)((char *)v24 + v26[13]) = *(void *)((char *)v25 + v26[13]);
          uint64_t v70 = v26[14];
          uint64_t v71 = (char *)v24 + v70;
          uint64_t v72 = (char *)v25 + v70;
          uint64_t v73 = sub_21FA25910();
          uint64_t v74 = *(void *)(v73 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
          {
            uint64_t v75 = sub_21F76CA40(&qword_26AD4A3B8);
            memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v71, v72, v73);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
          }
          uint64_t v76 = v26[15];
          uint64_t v77 = (char *)v24 + v76;
          char v78 = (char *)v25 + v76;
          *(void *)uint64_t v77 = *(void *)v78;
          *((_WORD *)v77 + 4) = *((_WORD *)v78 + 4);
          *(void *)((char *)v24 + v26[16]) = *(void *)((char *)v25 + v26[16]);
          *(void *)((char *)v24 + v26[17]) = *(void *)((char *)v25 + v26[17]);
          uint64_t v79 = v26[18];
          uint64_t v80 = (char *)v24 + v79;
          char v81 = (char *)v25 + v79;
          uint64_t v82 = *(void *)((char *)v25 + v79 + 24);
          swift_retain();
          if (v82)
          {
            uint64_t v83 = *(void *)v81;
            uint64_t v84 = *((void *)v81 + 1);
            char v85 = v81[16];
            sub_21F7652C0(*(void *)v81, v84, v85);
            *(void *)uint64_t v80 = v83;
            *((void *)v80 + 1) = v84;
            v80[16] = v85;
            *((void *)v80 + 3) = *((void *)v81 + 3);
            uint64_t v86 = *((void *)v81 + 4);
            uint64_t v87 = *((void *)v81 + 5);
            char v88 = v81[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v86, v87, v88);
            *((void *)v80 + 4) = v86;
            *((void *)v80 + 5) = v87;
            v80[48] = v88;
            *(_OWORD *)(v80 + 56) = *(_OWORD *)(v81 + 56);
          }
          else
          {
            *(_OWORD *)uint64_t v80 = *(_OWORD *)v81;
            long long v89 = *((_OWORD *)v81 + 1);
            long long v90 = *((_OWORD *)v81 + 2);
            long long v91 = *((_OWORD *)v81 + 3);
            *((void *)v80 + 8) = *((void *)v81 + 8);
            *((_OWORD *)v80 + 2) = v90;
            *((_OWORD *)v80 + 3) = v91;
            *((_OWORD *)v80 + 1) = v89;
          }
          uint64_t v92 = v26[19];
          long long v93 = (char *)v24 + v92;
          long long v94 = (char *)v25 + v92;
          if (*(void *)((char *)v25 + v92 + 24))
          {
            uint64_t v95 = *(void *)v94;
            uint64_t v96 = *((void *)v94 + 1);
            char v97 = v94[16];
            sub_21F7652C0(*(void *)v94, v96, v97);
            *(void *)long long v93 = v95;
            *((void *)v93 + 1) = v96;
            v93[16] = v97;
            *((void *)v93 + 3) = *((void *)v94 + 3);
            uint64_t v98 = *((void *)v94 + 4);
            uint64_t v99 = *((void *)v94 + 5);
            char v100 = v94[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v98, v99, v100);
            *((void *)v93 + 4) = v98;
            *((void *)v93 + 5) = v99;
            unsigned char v93[48] = v100;
            *(_OWORD *)(v93 + 56) = *(_OWORD *)(v94 + 56);
          }
          else
          {
            *(_OWORD *)long long v93 = *(_OWORD *)v94;
            long long v101 = *((_OWORD *)v94 + 1);
            long long v102 = *((_OWORD *)v94 + 2);
            long long v103 = *((_OWORD *)v94 + 3);
            *((void *)v93 + 8) = *((void *)v94 + 8);
            *((_OWORD *)v93 + 2) = v102;
            *((_OWORD *)v93 + 3) = v103;
            *((_OWORD *)v93 + 1) = v101;
          }
          uint64_t v104 = v26[20];
          long long v105 = (char *)v24 + v104;
          uint64_t v106 = (char *)v25 + v104;
          if (*(void *)((char *)v25 + v104 + 24))
          {
            uint64_t v107 = *(void *)v106;
            uint64_t v108 = *((void *)v106 + 1);
            char v109 = v106[16];
            sub_21F7652C0(*(void *)v106, v108, v109);
            *(void *)long long v105 = v107;
            *((void *)v105 + 1) = v108;
            v105[16] = v109;
            *((void *)v105 + 3) = *((void *)v106 + 3);
            uint64_t v110 = *((void *)v106 + 4);
            uint64_t v111 = *((void *)v106 + 5);
            char v112 = v106[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v110, v111, v112);
            *((void *)v105 + 4) = v110;
            *((void *)v105 + 5) = v111;
            v105[48] = v112;
            *(_OWORD *)(v105 + 56) = *(_OWORD *)(v106 + 56);
          }
          else
          {
            *(_OWORD *)long long v105 = *(_OWORD *)v106;
            long long v113 = *((_OWORD *)v106 + 1);
            long long v114 = *((_OWORD *)v106 + 2);
            long long v115 = *((_OWORD *)v106 + 3);
            *((void *)v105 + 8) = *((void *)v106 + 8);
            *((_OWORD *)v105 + 2) = v114;
            *((_OWORD *)v105 + 3) = v115;
            *((_OWORD *)v105 + 1) = v113;
          }
          uint64_t v116 = v26[21];
          uint64_t v117 = (char *)v24 + v116;
          uint64_t v118 = (char *)v25 + v116;
          if (*(void *)((char *)v25 + v116 + 24))
          {
            uint64_t v119 = *(void *)v118;
            uint64_t v120 = *((void *)v118 + 1);
            char v121 = v118[16];
            sub_21F7652C0(*(void *)v118, v120, v121);
            *(void *)uint64_t v117 = v119;
            *((void *)v117 + 1) = v120;
            v117[16] = v121;
            *((void *)v117 + 3) = *((void *)v118 + 3);
            uint64_t v122 = *((void *)v118 + 4);
            uint64_t v123 = *((void *)v118 + 5);
            char v124 = v118[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v122, v123, v124);
            *((void *)v117 + 4) = v122;
            *((void *)v117 + 5) = v123;
            v117[48] = v124;
            *(_OWORD *)(v117 + 56) = *(_OWORD *)(v118 + 56);
          }
          else
          {
            *(_OWORD *)uint64_t v117 = *(_OWORD *)v118;
            long long v125 = *((_OWORD *)v118 + 1);
            long long v126 = *((_OWORD *)v118 + 2);
            long long v127 = *((_OWORD *)v118 + 3);
            *((void *)v117 + 8) = *((void *)v118 + 8);
            *((_OWORD *)v117 + 2) = v126;
            *((_OWORD *)v117 + 3) = v127;
            *((_OWORD *)v117 + 1) = v125;
          }
          uint64_t v128 = v26[22];
          long long v129 = (char *)v24 + v128;
          uint64_t v130 = (char *)v25 + v128;
          long long v131 = *(_OWORD *)v130;
          *((void *)v129 + 2) = *((void *)v130 + 2);
          *(_OWORD *)long long v129 = v131;
          uint64_t v132 = v26[23];
          uint64_t v133 = (char *)v24 + v132;
          uint64_t v134 = (char *)v25 + v132;
          long long v135 = *(_OWORD *)v134;
          *((void *)v133 + 2) = *((void *)v134 + 2);
          *(_OWORD *)uint64_t v133 = v135;
          uint64_t v136 = v26[24];
          uint64_t v137 = (char *)v24 + v136;
          uint64_t v138 = (char *)v25 + v136;
          if (*(void *)((char *)v25 + v136 + 24))
          {
            uint64_t v139 = *(void *)v138;
            uint64_t v140 = *((void *)v138 + 1);
            char v141 = v138[16];
            sub_21F7652C0(*(void *)v138, v140, v141);
            *(void *)uint64_t v137 = v139;
            *((void *)v137 + 1) = v140;
            v137[16] = v141;
            *((void *)v137 + 3) = *((void *)v138 + 3);
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v142 = *((_OWORD *)v138 + 1);
            *(_OWORD *)uint64_t v137 = *(_OWORD *)v138;
            *((_OWORD *)v137 + 1) = v142;
          }
          uint64_t v143 = v26[25];
          uint64_t v144 = (char *)v24 + v143;
          long long v145 = (char *)v25 + v143;
          if (*(void *)((char *)v25 + v143 + 24))
          {
            uint64_t v146 = *(void *)v145;
            uint64_t v147 = *((void *)v145 + 1);
            char v148 = v145[16];
            sub_21F7652C0(*(void *)v145, v147, v148);
            *(void *)uint64_t v144 = v146;
            *((void *)v144 + 1) = v147;
            v144[16] = v148;
            *((void *)v144 + 3) = *((void *)v145 + 3);
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v149 = *((_OWORD *)v145 + 1);
            *(_OWORD *)uint64_t v144 = *(_OWORD *)v145;
            *((_OWORD *)v144 + 1) = v149;
          }
          uint64_t v150 = v26[26];
          uint64_t v151 = (void *)((char *)v24 + v150);
          uint64_t v152 = (void *)((char *)v25 + v150);
          *uint64_t v151 = *v152;
          v151[1] = v152[1];
          *((unsigned char *)v24 + v26[27]) = *((unsigned char *)v25 + v26[27]);
          uint64_t v153 = v26[28];
          long long v154 = (char *)v24 + v153;
          uint64_t v155 = (char *)v25 + v153;
          uint64_t v156 = *((void *)v155 + 3);
          swift_bridgeObjectRetain();
          if (v156)
          {
            *((void *)v154 + 3) = v156;
            (**(void (***)(char *, char *, uint64_t))(v156 - 8))(v154, v155, v156);
          }
          else
          {
            long long v157 = *((_OWORD *)v155 + 1);
            *(_OWORD *)long long v154 = *(_OWORD *)v155;
            *((_OWORD *)v154 + 1) = v157;
          }
          (*(void (**)(_OWORD *, void, uint64_t, int *))(v27 + 56))(v24, 0, 1, v26);
        }
        break;
      case 3u:
        *(void *)a1 = *(void *)a2;
        swift_retain();
        break;
      default:
        uint64_t v4 = *(void *)(a2 + 24);
        *(void *)(a1 + 24) = v4;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
        *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        uint64_t v5 = (int *)type metadata accessor for RectanglesRenderer(0);
        uint64_t v6 = v5[8];
        uint64_t v7 = (_OWORD *)(a1 + v6);
        uint64_t v8 = (long long *)(a2 + v6);
        uint64_t v9 = type metadata accessor for ChartContentRenderContext.Environment(0);
        uint64_t v10 = *(void *)(v9 - 8);
        uint64_t v11 = *(unsigned int (**)(long long *, uint64_t, uint64_t))(v10 + 48);
        swift_retain();
        if (v11(v8, 1, v9))
        {
          uint64_t v12 = sub_21F76CA40(qword_267EE7A88);
          memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
        }
        else
        {
          long long v383 = v5;
          CGRect v385 = (int *)v9;
          int v33 = *((unsigned __int8 *)v8 + 40);
          if (v33 == 255)
          {
            long long v34 = *v8;
            long long v35 = v8[1];
            *(_OWORD *)((char *)v7 + 25) = *(long long *)((char *)v8 + 25);
            *uint64_t v7 = v34;
            v7[1] = v35;
            long long v36 = (int *)v9;
          }
          else
          {
            long long v36 = (int *)v9;
            if (v33)
            {
              uint64_t v46 = *((void *)v8 + 3);
              *((void *)v7 + 3) = v46;
              *((void *)v7 + 4) = *((void *)v8 + 4);
              (**(void (***)(_OWORD *, long long *))(v46 - 8))(v7, v8);
              *((unsigned char *)v7 + 40) = 1;
            }
            else
            {
              *(void *)uint64_t v7 = *(void *)v8;
              *((unsigned char *)v7 + 40) = 0;
              swift_retain();
            }
          }
          *((unsigned char *)v7 + 41) = *((unsigned char *)v8 + 41);
          *((void *)v7 + 6) = *((void *)v8 + 6);
          *((_DWORD *)v7 + 14) = *((_DWORD *)v8 + 14);
          *((_DWORD *)v7 + 15) = *((_DWORD *)v8 + 15);
          *((void *)v7 + 8) = *((void *)v8 + 8);
          *((void *)v7 + 9) = *((void *)v8 + 9);
          *((void *)v7 + 10) = *((void *)v8 + 10);
          int v47 = *((unsigned __int8 *)v8 + 128);
          swift_bridgeObjectRetain();
          if (v47 == 255)
          {
            long long v48 = *(long long *)((char *)v8 + 88);
            long long v49 = *(long long *)((char *)v8 + 104);
            *(_OWORD *)((char *)v7 + 113) = *(long long *)((char *)v8 + 113);
            *(_OWORD *)((char *)v7 + 88) = v48;
            *(_OWORD *)((char *)v7 + 104) = v49;
          }
          else if (v47)
          {
            *((void *)v7 + 11) = *((void *)v8 + 11);
            void v7[6] = v8[6];
            *((unsigned char *)v7 + 128) = 1;
            swift_retain();
          }
          else
          {
            uint64_t v50 = *((void *)v8 + 14);
            *((void *)v7 + 14) = v50;
            *((void *)v7 + 15) = *((void *)v8 + 15);
            (**(void (***)(uint64_t, uint64_t))(v50 - 8))((uint64_t)v7 + 88, (uint64_t)v8 + 88);
            *((unsigned char *)v7 + 128) = 0;
          }
          long long v158 = *(long long *)((char *)v8 + 136);
          *((unsigned char *)v7 + 152) = *((unsigned char *)v8 + 152);
          *(_OWORD *)((char *)v7 + 136) = v158;
          uint64_t v159 = *((void *)v8 + 20);
          *((unsigned char *)v7 + 168) = *((unsigned char *)v8 + 168);
          *((void *)v7 + 20) = v159;
          long long v160 = v8[11];
          long long v161 = v8[12];
          *((unsigned char *)v7 + 208) = *((unsigned char *)v8 + 208);
          v7[11] = v160;
          v7[12] = v161;
          uint64_t v162 = v36[11];
          long long v163 = (char *)v7 + v162;
          uint64_t v164 = (char *)v8 + v162;
          uint64_t v165 = sub_21FA24C90();
          uint64_t v166 = *(void *)(v165 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v166 + 48))(v164, 1, v165))
          {
            uint64_t v167 = sub_21F76CA40(&qword_26AD47C20);
            memcpy(v163, v164, *(void *)(*(void *)(v167 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v166 + 16))(v163, v164, v165);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v166 + 56))(v163, 0, 1, v165);
          }
          uint64_t v168 = v36[12];
          uint64_t v169 = (char *)v7 + v168;
          uint64_t v170 = (char *)v8 + v168;
          uint64_t v171 = *(void *)v170;
          v169[8] = v170[8];
          *(void *)uint64_t v169 = v171;
          *(void *)((char *)v7 + v36[13]) = *(void *)((char *)v8 + v36[13]);
          uint64_t v172 = v36[14];
          uint64_t v173 = (char *)v7 + v172;
          char v174 = (char *)v8 + v172;
          uint64_t v175 = sub_21FA25910();
          uint64_t v176 = *(void *)(v175 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v176 + 48))(v174, 1, v175))
          {
            uint64_t v177 = sub_21F76CA40(&qword_26AD4A3B8);
            memcpy(v173, v174, *(void *)(*(void *)(v177 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v176 + 16))(v173, v174, v175);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v176 + 56))(v173, 0, 1, v175);
          }
          uint64_t v178 = v36[15];
          uint64_t v179 = (char *)v7 + v178;
          uint64_t v180 = (char *)v8 + v178;
          *(void *)uint64_t v179 = *(void *)v180;
          *((_WORD *)v179 + 4) = *((_WORD *)v180 + 4);
          *(void *)((char *)v7 + v36[16]) = *(void *)((char *)v8 + v36[16]);
          *(void *)((char *)v7 + v36[17]) = *(void *)((char *)v8 + v36[17]);
          uint64_t v181 = v36[18];
          char v182 = (char *)v7 + v181;
          uint64_t v183 = (char *)v8 + v181;
          uint64_t v184 = *(void *)((char *)v8 + v181 + 24);
          swift_retain();
          if (v184)
          {
            uint64_t v185 = *(void *)v183;
            uint64_t v186 = *((void *)v183 + 1);
            char v187 = v183[16];
            sub_21F7652C0(*(void *)v183, v186, v187);
            *(void *)char v182 = v185;
            *((void *)v182 + 1) = v186;
            v182[16] = v187;
            *((void *)v182 + 3) = *((void *)v183 + 3);
            uint64_t v188 = *((void *)v183 + 4);
            uint64_t v189 = *((void *)v183 + 5);
            char v190 = v183[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v188, v189, v190);
            *((void *)v182 + 4) = v188;
            *((void *)v182 + 5) = v189;
            v182[48] = v190;
            *(_OWORD *)(v182 + 56) = *(_OWORD *)(v183 + 56);
          }
          else
          {
            *(_OWORD *)char v182 = *(_OWORD *)v183;
            long long v191 = *((_OWORD *)v183 + 1);
            long long v192 = *((_OWORD *)v183 + 2);
            long long v193 = *((_OWORD *)v183 + 3);
            *((void *)v182 + 8) = *((void *)v183 + 8);
            *((_OWORD *)v182 + 2) = v192;
            *((_OWORD *)v182 + 3) = v193;
            *((_OWORD *)v182 + 1) = v191;
          }
          uint64_t v194 = v385[19];
          uint64_t v195 = (char *)v7 + v194;
          char v196 = (char *)v8 + v194;
          if (*(void *)((char *)v8 + v194 + 24))
          {
            uint64_t v197 = *(void *)v196;
            uint64_t v198 = *((void *)v196 + 1);
            char v199 = v196[16];
            sub_21F7652C0(*(void *)v196, v198, v199);
            *(void *)uint64_t v195 = v197;
            *((void *)v195 + 1) = v198;
            v195[16] = v199;
            *((void *)v195 + 3) = *((void *)v196 + 3);
            uint64_t v200 = *((void *)v196 + 4);
            uint64_t v201 = *((void *)v196 + 5);
            char v202 = v196[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v200, v201, v202);
            *((void *)v195 + 4) = v200;
            *((void *)v195 + 5) = v201;
            v195[48] = v202;
            *(_OWORD *)(v195 + 56) = *(_OWORD *)(v196 + 56);
          }
          else
          {
            *(_OWORD *)uint64_t v195 = *(_OWORD *)v196;
            long long v203 = *((_OWORD *)v196 + 1);
            long long v204 = *((_OWORD *)v196 + 2);
            long long v205 = *((_OWORD *)v196 + 3);
            *((void *)v195 + 8) = *((void *)v196 + 8);
            *((_OWORD *)v195 + 2) = v204;
            *((_OWORD *)v195 + 3) = v205;
            *((_OWORD *)v195 + 1) = v203;
          }
          uint64_t v206 = v385[20];
          char v207 = (char *)v7 + v206;
          long long v208 = (char *)v8 + v206;
          if (*(void *)((char *)v8 + v206 + 24))
          {
            uint64_t v209 = *(void *)v208;
            uint64_t v210 = *((void *)v208 + 1);
            char v211 = v208[16];
            sub_21F7652C0(*(void *)v208, v210, v211);
            *(void *)char v207 = v209;
            *((void *)v207 + 1) = v210;
            v207[16] = v211;
            *((void *)v207 + 3) = *((void *)v208 + 3);
            uint64_t v212 = *((void *)v208 + 4);
            uint64_t v213 = *((void *)v208 + 5);
            char v214 = v208[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v212, v213, v214);
            *((void *)v207 + 4) = v212;
            *((void *)v207 + 5) = v213;
            v207[48] = v214;
            *(_OWORD *)(v207 + 56) = *(_OWORD *)(v208 + 56);
          }
          else
          {
            *(_OWORD *)char v207 = *(_OWORD *)v208;
            long long v215 = *((_OWORD *)v208 + 1);
            long long v216 = *((_OWORD *)v208 + 2);
            long long v217 = *((_OWORD *)v208 + 3);
            *((void *)v207 + 8) = *((void *)v208 + 8);
            *((_OWORD *)v207 + 2) = v216;
            *((_OWORD *)v207 + 3) = v217;
            *((_OWORD *)v207 + 1) = v215;
          }
          uint64_t v218 = v385[21];
          uint64_t v219 = (char *)v7 + v218;
          uint64_t v220 = (char *)v8 + v218;
          if (*(void *)((char *)v8 + v218 + 24))
          {
            uint64_t v221 = *(void *)v220;
            uint64_t v222 = *((void *)v220 + 1);
            char v223 = v220[16];
            sub_21F7652C0(*(void *)v220, v222, v223);
            *(void *)uint64_t v219 = v221;
            *((void *)v219 + 1) = v222;
            v219[16] = v223;
            *((void *)v219 + 3) = *((void *)v220 + 3);
            uint64_t v224 = *((void *)v220 + 4);
            uint64_t v225 = *((void *)v220 + 5);
            char v226 = v220[48];
            swift_bridgeObjectRetain();
            sub_21F770E44(v224, v225, v226);
            *((void *)v219 + 4) = v224;
            *((void *)v219 + 5) = v225;
            v219[48] = v226;
            *(_OWORD *)(v219 + 56) = *(_OWORD *)(v220 + 56);
          }
          else
          {
            *(_OWORD *)uint64_t v219 = *(_OWORD *)v220;
            long long v227 = *((_OWORD *)v220 + 1);
            long long v228 = *((_OWORD *)v220 + 2);
            long long v229 = *((_OWORD *)v220 + 3);
            *((void *)v219 + 8) = *((void *)v220 + 8);
            *((_OWORD *)v219 + 2) = v228;
            *((_OWORD *)v219 + 3) = v229;
            *((_OWORD *)v219 + 1) = v227;
          }
          uint64_t v230 = v385[22];
          char v231 = (char *)v7 + v230;
          long long v232 = (char *)v8 + v230;
          long long v233 = *(_OWORD *)v232;
          *((void *)v231 + 2) = *((void *)v232 + 2);
          *(_OWORD *)char v231 = v233;
          uint64_t v234 = v385[23];
          long long v235 = (char *)v7 + v234;
          uint64_t v236 = (char *)v8 + v234;
          long long v237 = *(_OWORD *)v236;
          *((void *)v235 + 2) = *((void *)v236 + 2);
          *(_OWORD *)long long v235 = v237;
          uint64_t v238 = v385[24];
          uint64_t v239 = (char *)v7 + v238;
          uint64_t v240 = (char *)v8 + v238;
          if (*(void *)((char *)v8 + v238 + 24))
          {
            uint64_t v241 = *(void *)v240;
            uint64_t v242 = *((void *)v240 + 1);
            char v243 = v240[16];
            sub_21F7652C0(*(void *)v240, v242, v243);
            *(void *)uint64_t v239 = v241;
            *((void *)v239 + 1) = v242;
            v239[16] = v243;
            *((void *)v239 + 3) = *((void *)v240 + 3);
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v244 = *((_OWORD *)v240 + 1);
            *(_OWORD *)uint64_t v239 = *(_OWORD *)v240;
            *((_OWORD *)v239 + 1) = v244;
          }
          uint64_t v245 = v385[25];
          uint64_t v246 = (char *)v7 + v245;
          long long v247 = (char *)v8 + v245;
          if (*(void *)((char *)v8 + v245 + 24))
          {
            uint64_t v248 = *(void *)v247;
            uint64_t v249 = *((void *)v247 + 1);
            char v250 = v247[16];
            sub_21F7652C0(*(void *)v247, v249, v250);
            *(void *)uint64_t v246 = v248;
            *((void *)v246 + 1) = v249;
            v246[16] = v250;
            *((void *)v246 + 3) = *((void *)v247 + 3);
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v251 = *((_OWORD *)v247 + 1);
            *(_OWORD *)uint64_t v246 = *(_OWORD *)v247;
            *((_OWORD *)v246 + 1) = v251;
          }
          uint64_t v252 = v385[26];
          uint64_t v253 = (void *)((char *)v7 + v252);
          uint64_t v254 = (void *)((char *)v8 + v252);
          *uint64_t v253 = *v254;
          v253[1] = v254[1];
          *((unsigned char *)v7 + v385[27]) = *((unsigned char *)v8 + v385[27]);
          uint64_t v255 = v385[28];
          uint64_t v256 = (char *)v7 + v255;
          uint64_t v257 = (char *)v8 + v255;
          uint64_t v258 = *((void *)v257 + 3);
          swift_bridgeObjectRetain();
          if (v258)
          {
            *((void *)v256 + 3) = v258;
            (**(void (***)(char *, char *, uint64_t))(v258 - 8))(v256, v257, v258);
          }
          else
          {
            long long v259 = *((_OWORD *)v257 + 1);
            *(_OWORD *)uint64_t v256 = *(_OWORD *)v257;
            *((_OWORD *)v256 + 1) = v259;
          }
          uint64_t v5 = v383;
          (*(void (**)(_OWORD *, void, uint64_t, int *))(v10 + 56))(v7, 0, 1, v385);
        }
        uint64_t v260 = v5[9];
        uint64_t v261 = a1 + v260;
        uint64_t v262 = (long long *)(a2 + v260);
        long long v263 = *v262;
        long long v264 = v262[1];
        *(unsigned char *)(v261 + 32) = *((unsigned char *)v262 + 32);
        *(_OWORD *)uint64_t v261 = v263;
        *(_OWORD *)(v261 + 16) = v264;
        uint64_t v265 = v5[10];
        uint64_t v266 = a1 + v265;
        uint64_t v267 = a2 + v265;
        uint64_t v268 = sub_21FA24C90();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v268 - 8) + 16))(v266, v267, v268);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *sub_21F825C34(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4 = type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      long long v14 = a2[1];
      *a1 = *a2;
      a1[1] = v14;
      *((void *)a1 + 4) = *((void *)a2 + 4);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
      uint64_t v15 = *(int *)(type metadata accessor for RulesRenderer(0) + 32);
      int v16 = (_OWORD *)((char *)a1 + v15);
      uint64_t v17 = (_OWORD *)((char *)a2 + v15);
      uint64_t v18 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      uint64_t v19 = *((void *)v18 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
      {
        uint64_t v20 = sub_21F76CA40(qword_267EE7A88);
        memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        long long v40 = v17[1];
        *int v16 = *v17;
        v16[1] = v40;
        *(_OWORD *)((char *)v16 + 25) = *(_OWORD *)((char *)v17 + 25);
        *((unsigned char *)v16 + 41) = *((unsigned char *)v17 + 41);
        long long v41 = v17[4];
        void v16[3] = v17[3];
        v16[4] = v41;
        *((void *)v16 + 10) = *((void *)v17 + 10);
        long long v42 = *(_OWORD *)((char *)v17 + 88);
        long long v43 = *(_OWORD *)((char *)v17 + 104);
        *(_OWORD *)((char *)v16 + 113) = *(_OWORD *)((char *)v17 + 113);
        *(_OWORD *)((char *)v16 + 104) = v43;
        *(_OWORD *)((char *)v16 + 88) = v42;
        *(_OWORD *)((char *)v16 + 136) = *(_OWORD *)((char *)v17 + 136);
        *((unsigned char *)v16 + 152) = *((unsigned char *)v17 + 152);
        *((void *)v16 + 20) = *((void *)v17 + 20);
        *((unsigned char *)v16 + 168) = *((unsigned char *)v17 + 168);
        long long v44 = v17[12];
        v16[11] = v17[11];
        v16[12] = v44;
        *((unsigned char *)v16 + 208) = *((unsigned char *)v17 + 208);
        uint64_t v45 = v18[11];
        uint64_t v46 = (char *)v16 + v45;
        int v47 = (char *)v17 + v45;
        uint64_t v48 = sub_21FA24C90();
        uint64_t v49 = *(void *)(v48 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
        {
          uint64_t v50 = sub_21F76CA40(&qword_26AD47C20);
          memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v46, v47, v48);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
        }
        uint64_t v71 = v18[12];
        uint64_t v72 = (char *)v16 + v71;
        uint64_t v73 = (char *)v17 + v71;
        *(void *)uint64_t v72 = *(void *)v73;
        v72[8] = v73[8];
        *(void *)((char *)v16 + v18[13]) = *(void *)((char *)v17 + v18[13]);
        uint64_t v74 = v18[14];
        uint64_t v75 = (char *)v16 + v74;
        uint64_t v76 = (char *)v17 + v74;
        uint64_t v77 = sub_21FA25910();
        uint64_t v78 = *(void *)(v77 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
        {
          uint64_t v79 = sub_21F76CA40(&qword_26AD4A3B8);
          memcpy(v75, v76, *(void *)(*(void *)(v79 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v75, v76, v77);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
        }
        uint64_t v138 = v18[15];
        uint64_t v139 = (char *)v16 + v138;
        uint64_t v140 = (char *)v17 + v138;
        *(void *)uint64_t v139 = *(void *)v140;
        *((_WORD *)v139 + 4) = *((_WORD *)v140 + 4);
        *(void *)((char *)v16 + v18[16]) = *(void *)((char *)v17 + v18[16]);
        *(void *)((char *)v16 + v18[17]) = *(void *)((char *)v17 + v18[17]);
        uint64_t v141 = v18[18];
        long long v142 = (char *)v16 + v141;
        uint64_t v143 = (char *)v17 + v141;
        long long v144 = *((_OWORD *)v143 + 3);
        *((_OWORD *)v142 + 2) = *((_OWORD *)v143 + 2);
        *((_OWORD *)v142 + 3) = v144;
        *((void *)v142 + 8) = *((void *)v143 + 8);
        long long v145 = *((_OWORD *)v143 + 1);
        *(_OWORD *)long long v142 = *(_OWORD *)v143;
        *((_OWORD *)v142 + 1) = v145;
        uint64_t v146 = v18[19];
        uint64_t v147 = (char *)v16 + v146;
        char v148 = (char *)v17 + v146;
        *((void *)v147 + 8) = *((void *)v148 + 8);
        long long v149 = *((_OWORD *)v148 + 3);
        *((_OWORD *)v147 + 2) = *((_OWORD *)v148 + 2);
        *((_OWORD *)v147 + 3) = v149;
        long long v150 = *((_OWORD *)v148 + 1);
        *(_OWORD *)uint64_t v147 = *(_OWORD *)v148;
        *((_OWORD *)v147 + 1) = v150;
        uint64_t v151 = v18[20];
        uint64_t v152 = (char *)v16 + v151;
        uint64_t v153 = (char *)v17 + v151;
        long long v154 = *((_OWORD *)v153 + 3);
        *((_OWORD *)v152 + 2) = *((_OWORD *)v153 + 2);
        *((_OWORD *)v152 + 3) = v154;
        *((void *)v152 + 8) = *((void *)v153 + 8);
        long long v155 = *((_OWORD *)v153 + 1);
        *(_OWORD *)uint64_t v152 = *(_OWORD *)v153;
        *((_OWORD *)v152 + 1) = v155;
        uint64_t v156 = v18[21];
        long long v157 = (char *)v16 + v156;
        long long v158 = (char *)v17 + v156;
        *((void *)v157 + 8) = *((void *)v158 + 8);
        long long v159 = *((_OWORD *)v158 + 3);
        *((_OWORD *)v157 + 2) = *((_OWORD *)v158 + 2);
        *((_OWORD *)v157 + 3) = v159;
        long long v160 = *((_OWORD *)v158 + 1);
        *(_OWORD *)long long v157 = *(_OWORD *)v158;
        *((_OWORD *)v157 + 1) = v160;
        uint64_t v161 = v18[22];
        uint64_t v162 = (char *)v16 + v161;
        long long v163 = (char *)v17 + v161;
        *(_OWORD *)uint64_t v162 = *(_OWORD *)v163;
        *((void *)v162 + 2) = *((void *)v163 + 2);
        uint64_t v164 = v18[23];
        uint64_t v165 = (char *)v16 + v164;
        uint64_t v166 = (char *)v17 + v164;
        *(_OWORD *)uint64_t v165 = *(_OWORD *)v166;
        *((void *)v165 + 2) = *((void *)v166 + 2);
        uint64_t v167 = v18[24];
        uint64_t v168 = (_OWORD *)((char *)v16 + v167);
        uint64_t v169 = (_OWORD *)((char *)v17 + v167);
        long long v170 = v169[1];
        *uint64_t v168 = *v169;
        v168[1] = v170;
        uint64_t v171 = v18[25];
        uint64_t v172 = (_OWORD *)((char *)v16 + v171);
        uint64_t v173 = (_OWORD *)((char *)v17 + v171);
        long long v174 = v173[1];
        *uint64_t v172 = *v173;
        v172[1] = v174;
        *(_OWORD *)((char *)v16 + v18[26]) = *(_OWORD *)((char *)v17 + v18[26]);
        *((unsigned char *)v16 + v18[27]) = *((unsigned char *)v17 + v18[27]);
        uint64_t v175 = v18[28];
        uint64_t v176 = (_OWORD *)((char *)v16 + v175);
        uint64_t v177 = (_OWORD *)((char *)v17 + v175);
        long long v178 = v177[1];
        *uint64_t v176 = *v177;
        v176[1] = v178;
        (*(void (**)(_OWORD *, void, uint64_t, int *))(v19 + 56))(v16, 0, 1, v18);
      }
LABEL_35:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 1:
      long long v21 = a2[1];
      *a1 = *a2;
      a1[1] = v21;
      *((void *)a1 + 4) = *((void *)a2 + 4);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
      uint64_t v22 = (int *)type metadata accessor for PointsRenderer(0);
      uint64_t v23 = v22[8];
      uint64_t v24 = (_OWORD *)((char *)a1 + v23);
      uint64_t v25 = (_OWORD *)((char *)a2 + v23);
      uint64_t v26 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      uint64_t v27 = *((void *)v26 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v27 + 48))(v25, 1, v26))
      {
        uint64_t v28 = sub_21F76CA40(qword_267EE7A88);
        memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        uint64_t v229 = v27;
        char v231 = v22;
        long long v51 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v51;
        *(_OWORD *)((char *)v24 + 25) = *(_OWORD *)((char *)v25 + 25);
        *((unsigned char *)v24 + 41) = *((unsigned char *)v25 + 41);
        long long v52 = v25[4];
        v24[3] = v25[3];
        v24[4] = v52;
        *((void *)v24 + 10) = *((void *)v25 + 10);
        long long v53 = *(_OWORD *)((char *)v25 + 88);
        long long v54 = *(_OWORD *)((char *)v25 + 104);
        *(_OWORD *)((char *)v24 + 113) = *(_OWORD *)((char *)v25 + 113);
        *(_OWORD *)((char *)v24 + 104) = v54;
        *(_OWORD *)((char *)v24 + 88) = v53;
        *(_OWORD *)((char *)v24 + 136) = *(_OWORD *)((char *)v25 + 136);
        *((unsigned char *)v24 + 152) = *((unsigned char *)v25 + 152);
        *((void *)v24 + 20) = *((void *)v25 + 20);
        *((unsigned char *)v24 + 168) = *((unsigned char *)v25 + 168);
        long long v55 = v25[12];
        v24[11] = v25[11];
        v24[12] = v55;
        *((unsigned char *)v24 + 208) = *((unsigned char *)v25 + 208);
        uint64_t v56 = v26[11];
        uint64_t v57 = (char *)v24 + v56;
        long long v58 = (char *)v25 + v56;
        uint64_t v59 = sub_21FA24C90();
        uint64_t v60 = *(void *)(v59 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
        {
          uint64_t v61 = sub_21F76CA40(&qword_26AD47C20);
          memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v57, v58, v59);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
        }
        uint64_t v80 = v26[12];
        char v81 = (char *)v24 + v80;
        uint64_t v82 = (char *)v25 + v80;
        *(void *)char v81 = *(void *)v82;
        v81[8] = v82[8];
        *(void *)((char *)v24 + v26[13]) = *(void *)((char *)v25 + v26[13]);
        uint64_t v83 = v26[14];
        uint64_t v84 = (char *)v24 + v83;
        char v85 = (char *)v25 + v83;
        uint64_t v86 = sub_21FA25910();
        uint64_t v87 = *(void *)(v86 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v85, 1, v86))
        {
          uint64_t v88 = sub_21F76CA40(&qword_26AD4A3B8);
          memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v84, v85, v86);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(v84, 0, 1, v86);
        }
        uint64_t v22 = v231;
        uint64_t v179 = v26[15];
        uint64_t v180 = (char *)v24 + v179;
        uint64_t v181 = (char *)v25 + v179;
        *(void *)uint64_t v180 = *(void *)v181;
        *((_WORD *)v180 + 4) = *((_WORD *)v181 + 4);
        *(void *)((char *)v24 + v26[16]) = *(void *)((char *)v25 + v26[16]);
        *(void *)((char *)v24 + v26[17]) = *(void *)((char *)v25 + v26[17]);
        uint64_t v182 = v26[18];
        uint64_t v183 = (char *)v24 + v182;
        uint64_t v184 = (char *)v25 + v182;
        long long v185 = *((_OWORD *)v184 + 3);
        *((_OWORD *)v183 + 2) = *((_OWORD *)v184 + 2);
        *((_OWORD *)v183 + 3) = v185;
        *((void *)v183 + 8) = *((void *)v184 + 8);
        long long v186 = *((_OWORD *)v184 + 1);
        *(_OWORD *)uint64_t v183 = *(_OWORD *)v184;
        *((_OWORD *)v183 + 1) = v186;
        uint64_t v187 = v26[19];
        uint64_t v188 = (char *)v24 + v187;
        uint64_t v189 = (char *)v25 + v187;
        *((void *)v188 + 8) = *((void *)v189 + 8);
        long long v190 = *((_OWORD *)v189 + 3);
        *((_OWORD *)v188 + 2) = *((_OWORD *)v189 + 2);
        *((_OWORD *)v188 + 3) = v190;
        long long v191 = *((_OWORD *)v189 + 1);
        *(_OWORD *)uint64_t v188 = *(_OWORD *)v189;
        *((_OWORD *)v188 + 1) = v191;
        uint64_t v192 = v26[20];
        long long v193 = (char *)v24 + v192;
        uint64_t v194 = (char *)v25 + v192;
        long long v195 = *((_OWORD *)v194 + 3);
        *((_OWORD *)v193 + 2) = *((_OWORD *)v194 + 2);
        *((_OWORD *)v193 + 3) = v195;
        *((void *)v193 + 8) = *((void *)v194 + 8);
        long long v196 = *((_OWORD *)v194 + 1);
        *(_OWORD *)long long v193 = *(_OWORD *)v194;
        *((_OWORD *)v193 + 1) = v196;
        uint64_t v197 = v26[21];
        uint64_t v198 = (char *)v24 + v197;
        char v199 = (char *)v25 + v197;
        *((void *)v198 + 8) = *((void *)v199 + 8);
        long long v200 = *((_OWORD *)v199 + 3);
        *((_OWORD *)v198 + 2) = *((_OWORD *)v199 + 2);
        *((_OWORD *)v198 + 3) = v200;
        long long v201 = *((_OWORD *)v199 + 1);
        *(_OWORD *)uint64_t v198 = *(_OWORD *)v199;
        *((_OWORD *)v198 + 1) = v201;
        uint64_t v202 = v26[22];
        long long v203 = (char *)v24 + v202;
        long long v204 = (char *)v25 + v202;
        *(_OWORD *)long long v203 = *(_OWORD *)v204;
        *((void *)v203 + 2) = *((void *)v204 + 2);
        uint64_t v205 = v26[23];
        uint64_t v206 = (char *)v24 + v205;
        char v207 = (char *)v25 + v205;
        *(_OWORD *)uint64_t v206 = *(_OWORD *)v207;
        *((void *)v206 + 2) = *((void *)v207 + 2);
        uint64_t v208 = v26[24];
        uint64_t v209 = (_OWORD *)((char *)v24 + v208);
        uint64_t v210 = (_OWORD *)((char *)v25 + v208);
        long long v211 = v210[1];
        *uint64_t v209 = *v210;
        v209[1] = v211;
        uint64_t v212 = v26[25];
        uint64_t v213 = (_OWORD *)((char *)v24 + v212);
        char v214 = (_OWORD *)((char *)v25 + v212);
        long long v215 = v214[1];
        *uint64_t v213 = *v214;
        v213[1] = v215;
        *(_OWORD *)((char *)v24 + v26[26]) = *(_OWORD *)((char *)v25 + v26[26]);
        *((unsigned char *)v24 + v26[27]) = *((unsigned char *)v25 + v26[27]);
        uint64_t v216 = v26[28];
        long long v217 = (_OWORD *)((char *)v24 + v216);
        uint64_t v218 = (_OWORD *)((char *)v25 + v216);
        long long v219 = v218[1];
        _OWORD *v217 = *v218;
        v217[1] = v219;
        (*(void (**)(_OWORD *, void, uint64_t, int *))(v229 + 56))(v24, 0, 1, v26);
      }
      uint64_t v220 = v22[9];
      uint64_t v221 = (_OWORD *)((char *)a1 + v220);
      uint64_t v222 = (_OWORD *)((char *)a2 + v220);
      long long v223 = v222[1];
      *uint64_t v221 = *v222;
      v221[1] = v223;
      *(_OWORD *)((char *)v221 + 25) = *(_OWORD *)((char *)v222 + 25);
      uint64_t v224 = v22[10];
      uint64_t v225 = (char *)a1 + v224;
      char v226 = (char *)a2 + v224;
      v225[16] = v226[16];
      *(_OWORD *)uint64_t v225 = *(_OWORD *)v226;
      goto LABEL_35;
    case 0:
      long long v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      *((void *)a1 + 4) = *((void *)a2 + 4);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
      uint64_t v7 = (int *)type metadata accessor for RectanglesRenderer(0);
      uint64_t v8 = v7[8];
      uint64_t v9 = (_OWORD *)((char *)a1 + v8);
      uint64_t v10 = (_OWORD *)((char *)a2 + v8);
      uint64_t v11 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      uint64_t v12 = *((void *)v11 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
      {
        uint64_t v13 = sub_21F76CA40(qword_267EE7A88);
        memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        uint64_t v228 = v12;
        uint64_t v230 = v7;
        long long v29 = v10[1];
        *uint64_t v9 = *v10;
        v9[1] = v29;
        *(_OWORD *)((char *)v9 + 25) = *(_OWORD *)((char *)v10 + 25);
        *((unsigned char *)v9 + 41) = *((unsigned char *)v10 + 41);
        long long v30 = v10[4];
        _OWORD v9[3] = v10[3];
        v9[4] = v30;
        *((void *)v9 + 10) = *((void *)v10 + 10);
        long long v31 = *(_OWORD *)((char *)v10 + 88);
        long long v32 = *(_OWORD *)((char *)v10 + 104);
        *(_OWORD *)((char *)v9 + 113) = *(_OWORD *)((char *)v10 + 113);
        *(_OWORD *)((char *)v9 + 104) = v32;
        *(_OWORD *)((char *)v9 + 88) = v31;
        *(_OWORD *)((char *)v9 + 136) = *(_OWORD *)((char *)v10 + 136);
        *((unsigned char *)v9 + 152) = *((unsigned char *)v10 + 152);
        *((void *)v9 + 20) = *((void *)v10 + 20);
        *((unsigned char *)v9 + 168) = *((unsigned char *)v10 + 168);
        long long v33 = v10[12];
        v9[11] = v10[11];
        v9[12] = v33;
        *((unsigned char *)v9 + 208) = *((unsigned char *)v10 + 208);
        uint64_t v34 = v11[11];
        long long v35 = (char *)v9 + v34;
        long long v36 = (char *)v10 + v34;
        uint64_t v37 = sub_21FA24C90();
        uint64_t v38 = *(void *)(v37 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
        {
          uint64_t v39 = sub_21F76CA40(&qword_26AD47C20);
          memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v35, v36, v37);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
        }
        uint64_t v62 = v11[12];
        uint64_t v63 = (char *)v9 + v62;
        uint64_t v64 = (char *)v10 + v62;
        *(void *)uint64_t v63 = *(void *)v64;
        v63[8] = v64[8];
        *(void *)((char *)v9 + v11[13]) = *(void *)((char *)v10 + v11[13]);
        uint64_t v65 = v11[14];
        uint64_t v66 = (char *)v9 + v65;
        uint64_t v67 = (char *)v10 + v65;
        uint64_t v68 = sub_21FA25910();
        uint64_t v69 = *(void *)(v68 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
        {
          uint64_t v70 = sub_21F76CA40(&qword_26AD4A3B8);
          memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v66, v67, v68);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v69 + 56))(v66, 0, 1, v68);
        }
        uint64_t v7 = v230;
        uint64_t v89 = v11[15];
        long long v90 = (char *)v9 + v89;
        long long v91 = (char *)v10 + v89;
        *(void *)long long v90 = *(void *)v91;
        *((_WORD *)v90 + 4) = *((_WORD *)v91 + 4);
        *(void *)((char *)v9 + v11[16]) = *(void *)((char *)v10 + v11[16]);
        *(void *)((char *)v9 + v11[17]) = *(void *)((char *)v10 + v11[17]);
        uint64_t v92 = v11[18];
        long long v93 = (char *)v9 + v92;
        long long v94 = (char *)v10 + v92;
        long long v95 = *((_OWORD *)v94 + 3);
        *((_OWORD *)v93 + 2) = *((_OWORD *)v94 + 2);
        *((_OWORD *)v93 + 3) = v95;
        *((void *)v93 + 8) = *((void *)v94 + 8);
        long long v96 = *((_OWORD *)v94 + 1);
        *(_OWORD *)long long v93 = *(_OWORD *)v94;
        *((_OWORD *)v93 + 1) = v96;
        uint64_t v97 = v11[19];
        uint64_t v98 = (char *)v9 + v97;
        uint64_t v99 = (char *)v10 + v97;
        *((void *)v98 + 8) = *((void *)v99 + 8);
        long long v100 = *((_OWORD *)v99 + 3);
        *((_OWORD *)v98 + 2) = *((_OWORD *)v99 + 2);
        *((_OWORD *)v98 + 3) = v100;
        long long v101 = *((_OWORD *)v99 + 1);
        *(_OWORD *)uint64_t v98 = *(_OWORD *)v99;
        *((_OWORD *)v98 + 1) = v101;
        uint64_t v102 = v11[20];
        long long v103 = (char *)v9 + v102;
        uint64_t v104 = (char *)v10 + v102;
        long long v105 = *((_OWORD *)v104 + 3);
        *((_OWORD *)v103 + 2) = *((_OWORD *)v104 + 2);
        *((_OWORD *)v103 + 3) = v105;
        *((void *)v103 + 8) = *((void *)v104 + 8);
        long long v106 = *((_OWORD *)v104 + 1);
        *(_OWORD *)long long v103 = *(_OWORD *)v104;
        *((_OWORD *)v103 + 1) = v106;
        uint64_t v107 = v11[21];
        uint64_t v108 = (char *)v9 + v107;
        char v109 = (char *)v10 + v107;
        *((void *)v108 + 8) = *((void *)v109 + 8);
        long long v110 = *((_OWORD *)v109 + 3);
        *((_OWORD *)v108 + 2) = *((_OWORD *)v109 + 2);
        *((_OWORD *)v108 + 3) = v110;
        long long v111 = *((_OWORD *)v109 + 1);
        *(_OWORD *)uint64_t v108 = *(_OWORD *)v109;
        *((_OWORD *)v108 + 1) = v111;
        uint64_t v112 = v11[22];
        long long v113 = (char *)v9 + v112;
        long long v114 = (char *)v10 + v112;
        *(_OWORD *)long long v113 = *(_OWORD *)v114;
        *((void *)v113 + 2) = *((void *)v114 + 2);
        uint64_t v115 = v11[23];
        uint64_t v116 = (char *)v9 + v115;
        uint64_t v117 = (char *)v10 + v115;
        *(_OWORD *)uint64_t v116 = *(_OWORD *)v117;
        *((void *)v116 + 2) = *((void *)v117 + 2);
        uint64_t v118 = v11[24];
        uint64_t v119 = (_OWORD *)((char *)v9 + v118);
        uint64_t v120 = (_OWORD *)((char *)v10 + v118);
        long long v121 = v120[1];
        *uint64_t v119 = *v120;
        v119[1] = v121;
        uint64_t v122 = v11[25];
        uint64_t v123 = (_OWORD *)((char *)v9 + v122);
        char v124 = (_OWORD *)((char *)v10 + v122);
        long long v125 = v124[1];
        *uint64_t v123 = *v124;
        v123[1] = v125;
        *(_OWORD *)((char *)v9 + v11[26]) = *(_OWORD *)((char *)v10 + v11[26]);
        *((unsigned char *)v9 + v11[27]) = *((unsigned char *)v10 + v11[27]);
        uint64_t v126 = v11[28];
        long long v127 = (_OWORD *)((char *)v9 + v126);
        uint64_t v128 = (_OWORD *)((char *)v10 + v126);
        long long v129 = v128[1];
        *long long v127 = *v128;
        v127[1] = v129;
        (*(void (**)(_OWORD *, void, uint64_t, int *))(v228 + 56))(v9, 0, 1, v11);
      }
      uint64_t v130 = v7[9];
      long long v131 = (char *)a1 + v130;
      uint64_t v132 = (char *)a2 + v130;
      long long v133 = *((_OWORD *)v132 + 1);
      *(_OWORD *)long long v131 = *(_OWORD *)v132;
      *((_OWORD *)v131 + 1) = v133;
      v131[32] = v132[32];
      uint64_t v134 = v7[10];
      long long v135 = (char *)a1 + v134;
      uint64_t v136 = (char *)a2 + v134;
      uint64_t v137 = sub_21FA24C90();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v137 - 8) + 32))(v135, v136, v137);
      goto LABEL_35;
  }
  memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
  return a1;
}

_OWORD *sub_21F826B28(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    sub_21F83E378((uint64_t)a1, type metadata accessor for AnyVectorizedRenderer.MarkRenderer);
    uint64_t v4 = type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        long long v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        *((void *)a1 + 4) = *((void *)a2 + 4);
        *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
        *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
        uint64_t v15 = *(int *)(type metadata accessor for RulesRenderer(0) + 32);
        int v16 = (_OWORD *)((char *)a1 + v15);
        uint64_t v17 = (_OWORD *)((char *)a2 + v15);
        uint64_t v18 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
        uint64_t v19 = *((void *)v18 - 1);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
        {
          uint64_t v20 = sub_21F76CA40(qword_267EE7A88);
          memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
        }
        else
        {
          long long v40 = v17[1];
          *int v16 = *v17;
          v16[1] = v40;
          *(_OWORD *)((char *)v16 + 25) = *(_OWORD *)((char *)v17 + 25);
          *((unsigned char *)v16 + 41) = *((unsigned char *)v17 + 41);
          long long v41 = v17[4];
          void v16[3] = v17[3];
          v16[4] = v41;
          *((void *)v16 + 10) = *((void *)v17 + 10);
          long long v42 = *(_OWORD *)((char *)v17 + 88);
          long long v43 = *(_OWORD *)((char *)v17 + 104);
          *(_OWORD *)((char *)v16 + 113) = *(_OWORD *)((char *)v17 + 113);
          *(_OWORD *)((char *)v16 + 104) = v43;
          *(_OWORD *)((char *)v16 + 88) = v42;
          *(_OWORD *)((char *)v16 + 136) = *(_OWORD *)((char *)v17 + 136);
          *((unsigned char *)v16 + 152) = *((unsigned char *)v17 + 152);
          *((void *)v16 + 20) = *((void *)v17 + 20);
          *((unsigned char *)v16 + 168) = *((unsigned char *)v17 + 168);
          long long v44 = v17[12];
          v16[11] = v17[11];
          v16[12] = v44;
          *((unsigned char *)v16 + 208) = *((unsigned char *)v17 + 208);
          uint64_t v45 = v18[11];
          uint64_t v46 = (char *)v16 + v45;
          int v47 = (char *)v17 + v45;
          uint64_t v48 = sub_21FA24C90();
          uint64_t v49 = *(void *)(v48 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
          {
            uint64_t v50 = sub_21F76CA40(&qword_26AD47C20);
            memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v46, v47, v48);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
          }
          uint64_t v71 = v18[12];
          uint64_t v72 = (char *)v16 + v71;
          uint64_t v73 = (char *)v17 + v71;
          *(void *)uint64_t v72 = *(void *)v73;
          v72[8] = v73[8];
          *(void *)((char *)v16 + v18[13]) = *(void *)((char *)v17 + v18[13]);
          uint64_t v74 = v18[14];
          uint64_t v75 = (char *)v16 + v74;
          uint64_t v76 = (char *)v17 + v74;
          uint64_t v77 = sub_21FA25910();
          uint64_t v78 = *(void *)(v77 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
          {
            uint64_t v79 = sub_21F76CA40(&qword_26AD4A3B8);
            memcpy(v75, v76, *(void *)(*(void *)(v79 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v75, v76, v77);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
          }
          uint64_t v138 = v18[15];
          uint64_t v139 = (char *)v16 + v138;
          uint64_t v140 = (char *)v17 + v138;
          *(void *)uint64_t v139 = *(void *)v140;
          *((_WORD *)v139 + 4) = *((_WORD *)v140 + 4);
          *(void *)((char *)v16 + v18[16]) = *(void *)((char *)v17 + v18[16]);
          *(void *)((char *)v16 + v18[17]) = *(void *)((char *)v17 + v18[17]);
          uint64_t v141 = v18[18];
          long long v142 = (char *)v16 + v141;
          uint64_t v143 = (char *)v17 + v141;
          long long v144 = *((_OWORD *)v143 + 3);
          *((_OWORD *)v142 + 2) = *((_OWORD *)v143 + 2);
          *((_OWORD *)v142 + 3) = v144;
          *((void *)v142 + 8) = *((void *)v143 + 8);
          long long v145 = *((_OWORD *)v143 + 1);
          *(_OWORD *)long long v142 = *(_OWORD *)v143;
          *((_OWORD *)v142 + 1) = v145;
          uint64_t v146 = v18[19];
          uint64_t v147 = (char *)v16 + v146;
          char v148 = (char *)v17 + v146;
          *((void *)v147 + 8) = *((void *)v148 + 8);
          long long v149 = *((_OWORD *)v148 + 3);
          *((_OWORD *)v147 + 2) = *((_OWORD *)v148 + 2);
          *((_OWORD *)v147 + 3) = v149;
          long long v150 = *((_OWORD *)v148 + 1);
          *(_OWORD *)uint64_t v147 = *(_OWORD *)v148;
          *((_OWORD *)v147 + 1) = v150;
          uint64_t v151 = v18[20];
          uint64_t v152 = (char *)v16 + v151;
          uint64_t v153 = (char *)v17 + v151;
          long long v154 = *((_OWORD *)v153 + 3);
          *((_OWORD *)v152 + 2) = *((_OWORD *)v153 + 2);
          *((_OWORD *)v152 + 3) = v154;
          *((void *)v152 + 8) = *((void *)v153 + 8);
          long long v155 = *((_OWORD *)v153 + 1);
          *(_OWORD *)uint64_t v152 = *(_OWORD *)v153;
          *((_OWORD *)v152 + 1) = v155;
          uint64_t v156 = v18[21];
          long long v157 = (char *)v16 + v156;
          long long v158 = (char *)v17 + v156;
          *((void *)v157 + 8) = *((void *)v158 + 8);
          long long v159 = *((_OWORD *)v158 + 3);
          *((_OWORD *)v157 + 2) = *((_OWORD *)v158 + 2);
          *((_OWORD *)v157 + 3) = v159;
          long long v160 = *((_OWORD *)v158 + 1);
          *(_OWORD *)long long v157 = *(_OWORD *)v158;
          *((_OWORD *)v157 + 1) = v160;
          uint64_t v161 = v18[22];
          uint64_t v162 = (char *)v16 + v161;
          long long v163 = (char *)v17 + v161;
          *(_OWORD *)uint64_t v162 = *(_OWORD *)v163;
          *((void *)v162 + 2) = *((void *)v163 + 2);
          uint64_t v164 = v18[23];
          uint64_t v165 = (char *)v16 + v164;
          uint64_t v166 = (char *)v17 + v164;
          *(_OWORD *)uint64_t v165 = *(_OWORD *)v166;
          *((void *)v165 + 2) = *((void *)v166 + 2);
          uint64_t v167 = v18[24];
          uint64_t v168 = (_OWORD *)((char *)v16 + v167);
          uint64_t v169 = (_OWORD *)((char *)v17 + v167);
          long long v170 = v169[1];
          *uint64_t v168 = *v169;
          v168[1] = v170;
          uint64_t v171 = v18[25];
          uint64_t v172 = (_OWORD *)((char *)v16 + v171);
          uint64_t v173 = (_OWORD *)((char *)v17 + v171);
          long long v174 = v173[1];
          *uint64_t v172 = *v173;
          v172[1] = v174;
          *(_OWORD *)((char *)v16 + v18[26]) = *(_OWORD *)((char *)v17 + v18[26]);
          *((unsigned char *)v16 + v18[27]) = *((unsigned char *)v17 + v18[27]);
          uint64_t v175 = v18[28];
          uint64_t v176 = (_OWORD *)((char *)v16 + v175);
          uint64_t v177 = (_OWORD *)((char *)v17 + v175);
          long long v178 = v177[1];
          *uint64_t v176 = *v177;
          v176[1] = v178;
          (*(void (**)(_OWORD *, void, uint64_t, int *))(v19 + 56))(v16, 0, 1, v18);
        }
LABEL_36:
        swift_storeEnumTagMultiPayload();
        return a1;
      case 1:
        long long v21 = a2[1];
        *a1 = *a2;
        a1[1] = v21;
        *((void *)a1 + 4) = *((void *)a2 + 4);
        *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
        *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
        uint64_t v22 = (int *)type metadata accessor for PointsRenderer(0);
        uint64_t v23 = v22[8];
        uint64_t v24 = (_OWORD *)((char *)a1 + v23);
        uint64_t v25 = (_OWORD *)((char *)a2 + v23);
        uint64_t v26 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
        uint64_t v27 = *((void *)v26 - 1);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v27 + 48))(v25, 1, v26))
        {
          uint64_t v28 = sub_21F76CA40(qword_267EE7A88);
          memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
        }
        else
        {
          uint64_t v229 = v27;
          char v231 = v22;
          long long v51 = v25[1];
          *uint64_t v24 = *v25;
          v24[1] = v51;
          *(_OWORD *)((char *)v24 + 25) = *(_OWORD *)((char *)v25 + 25);
          *((unsigned char *)v24 + 41) = *((unsigned char *)v25 + 41);
          long long v52 = v25[4];
          v24[3] = v25[3];
          v24[4] = v52;
          *((void *)v24 + 10) = *((void *)v25 + 10);
          long long v53 = *(_OWORD *)((char *)v25 + 88);
          long long v54 = *(_OWORD *)((char *)v25 + 104);
          *(_OWORD *)((char *)v24 + 113) = *(_OWORD *)((char *)v25 + 113);
          *(_OWORD *)((char *)v24 + 104) = v54;
          *(_OWORD *)((char *)v24 + 88) = v53;
          *(_OWORD *)((char *)v24 + 136) = *(_OWORD *)((char *)v25 + 136);
          *((unsigned char *)v24 + 152) = *((unsigned char *)v25 + 152);
          *((void *)v24 + 20) = *((void *)v25 + 20);
          *((unsigned char *)v24 + 168) = *((unsigned char *)v25 + 168);
          long long v55 = v25[12];
          v24[11] = v25[11];
          v24[12] = v55;
          *((unsigned char *)v24 + 208) = *((unsigned char *)v25 + 208);
          uint64_t v56 = v26[11];
          uint64_t v57 = (char *)v24 + v56;
          long long v58 = (char *)v25 + v56;
          uint64_t v59 = sub_21FA24C90();
          uint64_t v60 = *(void *)(v59 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
          {
            uint64_t v61 = sub_21F76CA40(&qword_26AD47C20);
            memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v57, v58, v59);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
          }
          uint64_t v80 = v26[12];
          char v81 = (char *)v24 + v80;
          uint64_t v82 = (char *)v25 + v80;
          *(void *)char v81 = *(void *)v82;
          v81[8] = v82[8];
          *(void *)((char *)v24 + v26[13]) = *(void *)((char *)v25 + v26[13]);
          uint64_t v83 = v26[14];
          uint64_t v84 = (char *)v24 + v83;
          char v85 = (char *)v25 + v83;
          uint64_t v86 = sub_21FA25910();
          uint64_t v87 = *(void *)(v86 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v85, 1, v86))
          {
            uint64_t v88 = sub_21F76CA40(&qword_26AD4A3B8);
            memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v84, v85, v86);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(v84, 0, 1, v86);
          }
          uint64_t v22 = v231;
          uint64_t v179 = v26[15];
          uint64_t v180 = (char *)v24 + v179;
          uint64_t v181 = (char *)v25 + v179;
          *(void *)uint64_t v180 = *(void *)v181;
          *((_WORD *)v180 + 4) = *((_WORD *)v181 + 4);
          *(void *)((char *)v24 + v26[16]) = *(void *)((char *)v25 + v26[16]);
          *(void *)((char *)v24 + v26[17]) = *(void *)((char *)v25 + v26[17]);
          uint64_t v182 = v26[18];
          uint64_t v183 = (char *)v24 + v182;
          uint64_t v184 = (char *)v25 + v182;
          long long v185 = *((_OWORD *)v184 + 3);
          *((_OWORD *)v183 + 2) = *((_OWORD *)v184 + 2);
          *((_OWORD *)v183 + 3) = v185;
          *((void *)v183 + 8) = *((void *)v184 + 8);
          long long v186 = *((_OWORD *)v184 + 1);
          *(_OWORD *)uint64_t v183 = *(_OWORD *)v184;
          *((_OWORD *)v183 + 1) = v186;
          uint64_t v187 = v26[19];
          uint64_t v188 = (char *)v24 + v187;
          uint64_t v189 = (char *)v25 + v187;
          *((void *)v188 + 8) = *((void *)v189 + 8);
          long long v190 = *((_OWORD *)v189 + 3);
          *((_OWORD *)v188 + 2) = *((_OWORD *)v189 + 2);
          *((_OWORD *)v188 + 3) = v190;
          long long v191 = *((_OWORD *)v189 + 1);
          *(_OWORD *)uint64_t v188 = *(_OWORD *)v189;
          *((_OWORD *)v188 + 1) = v191;
          uint64_t v192 = v26[20];
          long long v193 = (char *)v24 + v192;
          uint64_t v194 = (char *)v25 + v192;
          long long v195 = *((_OWORD *)v194 + 3);
          *((_OWORD *)v193 + 2) = *((_OWORD *)v194 + 2);
          *((_OWORD *)v193 + 3) = v195;
          *((void *)v193 + 8) = *((void *)v194 + 8);
          long long v196 = *((_OWORD *)v194 + 1);
          *(_OWORD *)long long v193 = *(_OWORD *)v194;
          *((_OWORD *)v193 + 1) = v196;
          uint64_t v197 = v26[21];
          uint64_t v198 = (char *)v24 + v197;
          char v199 = (char *)v25 + v197;
          *((void *)v198 + 8) = *((void *)v199 + 8);
          long long v200 = *((_OWORD *)v199 + 3);
          *((_OWORD *)v198 + 2) = *((_OWORD *)v199 + 2);
          *((_OWORD *)v198 + 3) = v200;
          long long v201 = *((_OWORD *)v199 + 1);
          *(_OWORD *)uint64_t v198 = *(_OWORD *)v199;
          *((_OWORD *)v198 + 1) = v201;
          uint64_t v202 = v26[22];
          long long v203 = (char *)v24 + v202;
          long long v204 = (char *)v25 + v202;
          *(_OWORD *)long long v203 = *(_OWORD *)v204;
          *((void *)v203 + 2) = *((void *)v204 + 2);
          uint64_t v205 = v26[23];
          uint64_t v206 = (char *)v24 + v205;
          char v207 = (char *)v25 + v205;
          *(_OWORD *)uint64_t v206 = *(_OWORD *)v207;
          *((void *)v206 + 2) = *((void *)v207 + 2);
          uint64_t v208 = v26[24];
          uint64_t v209 = (_OWORD *)((char *)v24 + v208);
          uint64_t v210 = (_OWORD *)((char *)v25 + v208);
          long long v211 = v210[1];
          *uint64_t v209 = *v210;
          v209[1] = v211;
          uint64_t v212 = v26[25];
          uint64_t v213 = (_OWORD *)((char *)v24 + v212);
          char v214 = (_OWORD *)((char *)v25 + v212);
          long long v215 = v214[1];
          *uint64_t v213 = *v214;
          v213[1] = v215;
          *(_OWORD *)((char *)v24 + v26[26]) = *(_OWORD *)((char *)v25 + v26[26]);
          *((unsigned char *)v24 + v26[27]) = *((unsigned char *)v25 + v26[27]);
          uint64_t v216 = v26[28];
          long long v217 = (_OWORD *)((char *)v24 + v216);
          uint64_t v218 = (_OWORD *)((char *)v25 + v216);
          long long v219 = v218[1];
          _OWORD *v217 = *v218;
          v217[1] = v219;
          (*(void (**)(_OWORD *, void, uint64_t, int *))(v229 + 56))(v24, 0, 1, v26);
        }
        uint64_t v220 = v22[9];
        uint64_t v221 = (_OWORD *)((char *)a1 + v220);
        uint64_t v222 = (_OWORD *)((char *)a2 + v220);
        long long v223 = v222[1];
        *uint64_t v221 = *v222;
        v221[1] = v223;
        *(_OWORD *)((char *)v221 + 25) = *(_OWORD *)((char *)v222 + 25);
        uint64_t v224 = v22[10];
        uint64_t v225 = (char *)a1 + v224;
        char v226 = (char *)a2 + v224;
        v225[16] = v226[16];
        *(_OWORD *)uint64_t v225 = *(_OWORD *)v226;
        goto LABEL_36;
      case 0:
        long long v6 = a2[1];
        *a1 = *a2;
        a1[1] = v6;
        *((void *)a1 + 4) = *((void *)a2 + 4);
        *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
        *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
        uint64_t v7 = (int *)type metadata accessor for RectanglesRenderer(0);
        uint64_t v8 = v7[8];
        uint64_t v9 = (_OWORD *)((char *)a1 + v8);
        uint64_t v10 = (_OWORD *)((char *)a2 + v8);
        uint64_t v11 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
        uint64_t v12 = *((void *)v11 - 1);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
        {
          uint64_t v13 = sub_21F76CA40(qword_267EE7A88);
          memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
        }
        else
        {
          uint64_t v228 = v12;
          uint64_t v230 = v7;
          long long v29 = v10[1];
          *uint64_t v9 = *v10;
          v9[1] = v29;
          *(_OWORD *)((char *)v9 + 25) = *(_OWORD *)((char *)v10 + 25);
          *((unsigned char *)v9 + 41) = *((unsigned char *)v10 + 41);
          long long v30 = v10[4];
          _OWORD v9[3] = v10[3];
          v9[4] = v30;
          *((void *)v9 + 10) = *((void *)v10 + 10);
          long long v31 = *(_OWORD *)((char *)v10 + 88);
          long long v32 = *(_OWORD *)((char *)v10 + 104);
          *(_OWORD *)((char *)v9 + 113) = *(_OWORD *)((char *)v10 + 113);
          *(_OWORD *)((char *)v9 + 104) = v32;
          *(_OWORD *)((char *)v9 + 88) = v31;
          *(_OWORD *)((char *)v9 + 136) = *(_OWORD *)((char *)v10 + 136);
          *((unsigned char *)v9 + 152) = *((unsigned char *)v10 + 152);
          *((void *)v9 + 20) = *((void *)v10 + 20);
          *((unsigned char *)v9 + 168) = *((unsigned char *)v10 + 168);
          long long v33 = v10[12];
          v9[11] = v10[11];
          v9[12] = v33;
          *((unsigned char *)v9 + 208) = *((unsigned char *)v10 + 208);
          uint64_t v34 = v11[11];
          long long v35 = (char *)v9 + v34;
          long long v36 = (char *)v10 + v34;
          uint64_t v37 = sub_21FA24C90();
          uint64_t v38 = *(void *)(v37 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
          {
            uint64_t v39 = sub_21F76CA40(&qword_26AD47C20);
            memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v35, v36, v37);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
          }
          uint64_t v62 = v11[12];
          uint64_t v63 = (char *)v9 + v62;
          uint64_t v64 = (char *)v10 + v62;
          *(void *)uint64_t v63 = *(void *)v64;
          v63[8] = v64[8];
          *(void *)((char *)v9 + v11[13]) = *(void *)((char *)v10 + v11[13]);
          uint64_t v65 = v11[14];
          uint64_t v66 = (char *)v9 + v65;
          uint64_t v67 = (char *)v10 + v65;
          uint64_t v68 = sub_21FA25910();
          uint64_t v69 = *(void *)(v68 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
          {
            uint64_t v70 = sub_21F76CA40(&qword_26AD4A3B8);
            memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v66, v67, v68);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v69 + 56))(v66, 0, 1, v68);
          }
          uint64_t v7 = v230;
          uint64_t v89 = v11[15];
          long long v90 = (char *)v9 + v89;
          long long v91 = (char *)v10 + v89;
          *(void *)long long v90 = *(void *)v91;
          *((_WORD *)v90 + 4) = *((_WORD *)v91 + 4);
          *(void *)((char *)v9 + v11[16]) = *(void *)((char *)v10 + v11[16]);
          *(void *)((char *)v9 + v11[17]) = *(void *)((char *)v10 + v11[17]);
          uint64_t v92 = v11[18];
          long long v93 = (char *)v9 + v92;
          long long v94 = (char *)v10 + v92;
          long long v95 = *((_OWORD *)v94 + 3);
          *((_OWORD *)v93 + 2) = *((_OWORD *)v94 + 2);
          *((_OWORD *)v93 + 3) = v95;
          *((void *)v93 + 8) = *((void *)v94 + 8);
          long long v96 = *((_OWORD *)v94 + 1);
          *(_OWORD *)long long v93 = *(_OWORD *)v94;
          *((_OWORD *)v93 + 1) = v96;
          uint64_t v97 = v11[19];
          uint64_t v98 = (char *)v9 + v97;
          uint64_t v99 = (char *)v10 + v97;
          *((void *)v98 + 8) = *((void *)v99 + 8);
          long long v100 = *((_OWORD *)v99 + 3);
          *((_OWORD *)v98 + 2) = *((_OWORD *)v99 + 2);
          *((_OWORD *)v98 + 3) = v100;
          long long v101 = *((_OWORD *)v99 + 1);
          *(_OWORD *)uint64_t v98 = *(_OWORD *)v99;
          *((_OWORD *)v98 + 1) = v101;
          uint64_t v102 = v11[20];
          long long v103 = (char *)v9 + v102;
          uint64_t v104 = (char *)v10 + v102;
          long long v105 = *((_OWORD *)v104 + 3);
          *((_OWORD *)v103 + 2) = *((_OWORD *)v104 + 2);
          *((_OWORD *)v103 + 3) = v105;
          *((void *)v103 + 8) = *((void *)v104 + 8);
          long long v106 = *((_OWORD *)v104 + 1);
          *(_OWORD *)long long v103 = *(_OWORD *)v104;
          *((_OWORD *)v103 + 1) = v106;
          uint64_t v107 = v11[21];
          uint64_t v108 = (char *)v9 + v107;
          char v109 = (char *)v10 + v107;
          *((void *)v108 + 8) = *((void *)v109 + 8);
          long long v110 = *((_OWORD *)v109 + 3);
          *((_OWORD *)v108 + 2) = *((_OWORD *)v109 + 2);
          *((_OWORD *)v108 + 3) = v110;
          long long v111 = *((_OWORD *)v109 + 1);
          *(_OWORD *)uint64_t v108 = *(_OWORD *)v109;
          *((_OWORD *)v108 + 1) = v111;
          uint64_t v112 = v11[22];
          long long v113 = (char *)v9 + v112;
          long long v114 = (char *)v10 + v112;
          *(_OWORD *)long long v113 = *(_OWORD *)v114;
          *((void *)v113 + 2) = *((void *)v114 + 2);
          uint64_t v115 = v11[23];
          uint64_t v116 = (char *)v9 + v115;
          uint64_t v117 = (char *)v10 + v115;
          *(_OWORD *)uint64_t v116 = *(_OWORD *)v117;
          *((void *)v116 + 2) = *((void *)v117 + 2);
          uint64_t v118 = v11[24];
          uint64_t v119 = (_OWORD *)((char *)v9 + v118);
          uint64_t v120 = (_OWORD *)((char *)v10 + v118);
          long long v121 = v120[1];
          *uint64_t v119 = *v120;
          v119[1] = v121;
          uint64_t v122 = v11[25];
          uint64_t v123 = (_OWORD *)((char *)v9 + v122);
          char v124 = (_OWORD *)((char *)v10 + v122);
          long long v125 = v124[1];
          *uint64_t v123 = *v124;
          v123[1] = v125;
          *(_OWORD *)((char *)v9 + v11[26]) = *(_OWORD *)((char *)v10 + v11[26]);
          *((unsigned char *)v9 + v11[27]) = *((unsigned char *)v10 + v11[27]);
          uint64_t v126 = v11[28];
          long long v127 = (_OWORD *)((char *)v9 + v126);
          uint64_t v128 = (_OWORD *)((char *)v10 + v126);
          long long v129 = v128[1];
          *long long v127 = *v128;
          v127[1] = v129;
          (*(void (**)(_OWORD *, void, uint64_t, int *))(v228 + 56))(v9, 0, 1, v11);
        }
        uint64_t v130 = v7[9];
        long long v131 = (char *)a1 + v130;
        uint64_t v132 = (char *)a2 + v130;
        long long v133 = *((_OWORD *)v132 + 1);
        *(_OWORD *)long long v131 = *(_OWORD *)v132;
        *((_OWORD *)v131 + 1) = v133;
        v131[32] = v132[32];
        uint64_t v134 = v7[10];
        long long v135 = (char *)a1 + v134;
        uint64_t v136 = (char *)a2 + v134;
        uint64_t v137 = sub_21FA24C90();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v137 - 8) + 32))(v135, v136, v137);
        goto LABEL_36;
    }
    memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
  }
  return a1;
}

uint64_t sub_21F827A40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F827A54);
}

uint64_t sub_21F827A54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_21F827AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F827AD4);
}

uint64_t sub_21F827AD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_21F827B44()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    uint64_t v0 = type metadata accessor for BoundingSectionSpecification();
    if (v2 <= 0x3F)
    {
      uint64_t v0 = type metadata accessor for BoundingSectionSpecification();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return v0;
}

uint64_t *sub_21F827CB0(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v342 = a3[2];
  uint64_t v4 = *(void *)(v342 - 8);
  uint64_t v345 = *(void *)(v4 + 64);
  uint64_t v334 = a3[3];
  uint64_t v5 = *(void *)(v334 - 8);
  uint64_t v335 = v5;
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = sub_21FA24310();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v337 = v8;
  uint64_t v338 = v7;
  int v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v9;
  uint64_t v11 = sub_21FA24320();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = v5;
  uint64_t v14 = *(_DWORD *)(v12 + 80);
  uint64_t v15 = v14 | v9 | v6;
  uint64_t v340 = v15 + 32;
  unint64_t v16 = *(void *)(v13 + 64);
  uint64_t v344 = v6;
  unint64_t v332 = v16 + v6;
  unint64_t v333 = v16;
  uint64_t v17 = v15 | 7;
  unint64_t v18 = ((v16 + v344) & ~v344) + v16;
  if (v18 <= v16) {
    unint64_t v18 = *(void *)(v13 + 64);
  }
  uint64_t v336 = v9 + 8;
  uint64_t v19 = *(void *)(v8 + 64);
  uint64_t v20 = *(void *)(*(void *)(v11 - 8) + 64);
  unint64_t v21 = ((v19 + v14 + (v336 & ~(unint64_t)v9)) & ~v14) + v20;
  if (v18 <= v21) {
    unint64_t v22 = ((v19 + v14 + ((v9 + 8) & ~(unint64_t)v9)) & ~v14) + v20;
  }
  else {
    unint64_t v22 = v18;
  }
  if (v22 <= 0x10) {
    unint64_t v22 = 16;
  }
  unint64_t v339 = v22;
  unint64_t v23 = v22 + ((v15 + 32) & ~(v15 | 7));
  unint64_t v24 = v23 + 1;
  unint64_t v25 = ((v23 + 1 + v17) & ~v17) + v23 + 1;
  if (v23 + 1 > v25) {
    unint64_t v25 = v23 + 1;
  }
  unint64_t v26 = (v23 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v25 <= v26 + 113) {
    unint64_t v25 = v26 + 113;
  }
  unint64_t v27 = v26 + 49;
  if (v25 > v27) {
    unint64_t v27 = v25;
  }
  uint64_t v28 = 25;
  if (v27 <= 0x19) {
    uint64_t v29 = 25;
  }
  else {
    uint64_t v29 = v27;
  }
  uint64_t v30 = a3[4];
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(_DWORD *)(v31 + 80);
  uint64_t v33 = v14 | v9 | v32;
  uint64_t v34 = v33 | 7;
  uint64_t v35 = v33 + 32;
  uint64_t v36 = (v33 + 32) & ~(v33 | 7);
  unint64_t v37 = *(void *)(v31 + 64);
  uint64_t v38 = v37 + v32;
  if (((v37 + v32) & ~v32) + v37 > v37) {
    v37 += (v37 + v32) & ~v32;
  }
  if (v37 <= v21) {
    unint64_t v37 = v21;
  }
  if (v37 <= 0x10) {
    uint64_t v39 = 16;
  }
  else {
    uint64_t v39 = v37;
  }
  uint64_t v40 = v39 + v36;
  unint64_t v41 = v39 + v36 + 1;
  unint64_t v42 = v41 + v34;
  if (v41 > ((v41 + v34) & ~v34) + v41) {
    unint64_t v43 = v40 + 1;
  }
  else {
    unint64_t v43 = ((v41 + v34) & ~v34) + v41;
  }
  uint64_t v44 = v40 + 8;
  unint64_t v45 = (v40 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v43 <= v45 + 113) {
    unint64_t v43 = v45 + 113;
  }
  unint64_t v46 = v45 + 49;
  if (v43 > v46) {
    unint64_t v46 = v43;
  }
  if (v46 > 0x19) {
    uint64_t v28 = v46;
  }
  uint64_t v47 = v15 | *(_DWORD *)(v4 + 80) & 0xF8 | v32 | 7;
  if (v47 != 7
    || ((v9 | *(_DWORD *)(v12 + 80) | v6 | *(_DWORD *)(v31 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) != 0
    || (uint64_t v48 = v17 + v345,
        ((v28 + ((v29 + v34 + 1 + ((v17 + v345) & ~v17)) & ~v34) + 8) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18))
  {
    uint64_t v59 = *a2;
    *a1 = *a2;
    uint64_t v60 = (uint64_t *)(v59 + ((v47 + 16) & ~v47));
  }
  else
  {
    uint64_t v341 = v28;
    uint64_t v328 = v35;
    uint64_t v330 = *(void *)(v30 - 8);
    uint64_t v331 = v29 + v34 + 1;
    unint64_t v323 = v42;
    uint64_t v324 = v44;
    uint64_t v321 = v38;
    uint64_t v329 = v30;
    uint64_t v325 = v19 + v14;
    uint64_t v326 = *(void *)(v11 - 8);
    uint64_t v327 = v11;
    uint64_t v346 = v29;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 16))(a1, a2, v342);
    uint64_t v49 = (char *)a1 + v48;
    unint64_t v50 = ((unint64_t)a1 + v48) & ~v17;
    unint64_t v51 = (unint64_t)a2 + v48;
    uint64_t v348 = ~v17;
    uint64_t v52 = v51 & ~v17;
    unsigned int v53 = *(unsigned __int8 *)(v52 + v346);
    unsigned int v54 = v53 - 8;
    if (v53 < 8)
    {
      uint64_t v56 = v39;
      uint64_t v57 = v341;
    }
    else
    {
      if (v346 <= 3) {
        uint64_t v55 = v346;
      }
      else {
        uint64_t v55 = 4;
      }
      uint64_t v56 = v39;
      uint64_t v57 = v341;
      switch(v55)
      {
        case 1:
          int v58 = *(unsigned __int8 *)v52;
          if (v346 < 4) {
            goto LABEL_50;
          }
          goto LABEL_51;
        case 2:
          int v58 = *(unsigned __int16 *)v52;
          if (v346 >= 4) {
            goto LABEL_51;
          }
          goto LABEL_50;
        case 3:
          int v58 = *(unsigned __int16 *)(v51 & ~v17) | (*(unsigned __int8 *)((v51 & ~v17) + 2) << 16);
          if (v346 >= 4) {
            goto LABEL_51;
          }
          goto LABEL_50;
        case 4:
          int v58 = *(_DWORD *)v52;
          if (v346 < 4) {
LABEL_50:
          }
            v58 |= v54 << (8 * v346);
LABEL_51:
          unsigned int v53 = v58 + 8;
          break;
        default:
          break;
      }
    }
    uint64_t v322 = v17;
    uint64_t v61 = ~v10;
    uint64_t v343 = ~v14;
    uint64_t v62 = ~v34;
    uint64_t v320 = ~v32;
    uint64_t v63 = v57 + 1;
    switch(v53)
    {
      case 1u:
        long long v65 = *(_OWORD *)v52;
        *(_OWORD *)(v50 + 9) = *(_OWORD *)((v51 & ~v17) + 9);
        *(_OWORD *)unint64_t v50 = v65;
        *(unsigned char *)(v50 + v346) = 1;
        goto LABEL_166;
      case 2u:
        *(void *)unint64_t v50 = *(void *)v52;
        *(unsigned char *)(v50 + v346) = 2;
        goto LABEL_57;
      case 3u:
        *(void *)unint64_t v50 = *(void *)v52;
        *(void *)(v50 + 8) = *(void *)((v51 & ~v17) + 8);
        *(unsigned char *)(v50 + v346) = 3;
        swift_retain();
LABEL_57:
        swift_retain();
        goto LABEL_166;
      case 4u:
        uint64_t v310 = v56;
        uint64_t v313 = v61;
        uint64_t v317 = v62;
        uint64_t v66 = *(void *)v52;
        uint64_t v67 = *(void *)((v51 & ~v17) + 8);
        char v68 = *(unsigned char *)((v51 & ~v17) + 0x10);
        sub_21F7652C0(*(void *)(v51 & ~v17), v67, v68);
        *(void *)unint64_t v50 = v66;
        *(void *)(v50 + 8) = v67;
        *(unsigned char *)(v50 + 16) = v68;
        *(void *)(v50 + 24) = *(void *)(v52 + 24);
        uint64_t v69 = (void *)((v340 + v50) & v348);
        uint64_t v70 = (unsigned __int8 *)((v340 + v52) & v348);
        unsigned int v71 = v70[v339];
        swift_bridgeObjectRetain();
        if (v71 >= 5)
        {
          if (v339 <= 3) {
            uint64_t v72 = v339;
          }
          else {
            uint64_t v72 = 4;
          }
          switch(v72)
          {
            case 1:
              int v73 = *v70;
              goto LABEL_85;
            case 2:
              int v73 = *(unsigned __int16 *)v70;
              goto LABEL_85;
            case 3:
              int v73 = *(unsigned __int16 *)((v340 + v52) & v348) | (*(unsigned __int8 *)(((v340 + v52) & v348) + 2) << 16);
              goto LABEL_85;
            case 4:
              int v73 = *(_DWORD *)v70;
LABEL_85:
              if (v339 < 4) {
                unsigned int v71 = (v73 | ((v71 - 5) << (8 * v339))) + 5;
              }
              else {
                unsigned int v71 = v73 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v71)
        {
          case 1u:
            uint64_t v99 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v335 + 16);
            v99(v69, v70, v334);
            v99((void *)(((unint64_t)v69 + v344 + v333) & ~v344), (unsigned __int8 *)((unint64_t)&v70[v344 + v333] & ~v344), v334);
            char v100 = 1;
            goto LABEL_94;
          case 2u:
            void *v69 = *(void *)v70;
            *((unsigned char *)v69 + v339) = 2;
            swift_retain();
            break;
          case 3u:
            void *v69 = *(void *)v70;
            *(void *)(((v340 + v50) & v348) + 8) = *(void *)(((v340 + v52) & v348) + 8);
            *((unsigned char *)v69 + v339) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            void *v69 = *(void *)v70;
            uint64_t v101 = v63;
            uint64_t v102 = (unsigned __int8 *)v52;
            unint64_t v103 = ((unint64_t)v69 + v336) & v61;
            unint64_t v104 = (unint64_t)&v70[v336] & v61;
            long long v105 = *(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 16);
            swift_retain();
            v105(v103, v104, v338);
            uint64_t v106 = v325 + v103;
            uint64_t v52 = (uint64_t)v102;
            uint64_t v63 = v101;
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v326 + 16))(v106 & v343, (v325 + v104) & v343, v327);
            char v100 = 4;
LABEL_94:
            *((unsigned char *)v69 + v339) = v100;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v335 + 16))(v69, v70, v334);
            *((unsigned char *)v69 + v339) = 0;
            break;
        }
        *(unsigned char *)(v50 + v346) = 4;
        uint64_t v57 = v341;
        uint64_t v56 = v310;
        uint64_t v61 = v313;
        goto LABEL_165;
      case 5u:
        unint64_t v308 = (unint64_t)v49;
        unint64_t v309 = v51;
        uint64_t v317 = v62;
        uint64_t v311 = v56;
        uint64_t v74 = *(void *)v52;
        uint64_t v75 = *(void *)((v51 & ~v17) + 8);
        char v76 = *(unsigned char *)((v51 & ~v17) + 0x10);
        sub_21F7652C0(*(void *)(v51 & ~v17), v75, v76);
        *(void *)unint64_t v50 = v74;
        *(void *)(v50 + 8) = v75;
        *(unsigned char *)(v50 + 16) = v76;
        *(void *)(v50 + 24) = *(void *)(v52 + 24);
        uint64_t v77 = (void *)((v340 + v50) & v348);
        uint64_t v78 = (unsigned __int8 *)((v340 + v52) & v348);
        unsigned int v79 = v78[v339];
        swift_bridgeObjectRetain();
        if (v79 >= 5)
        {
          if (v339 <= 3) {
            uint64_t v80 = v339;
          }
          else {
            uint64_t v80 = 4;
          }
          switch(v80)
          {
            case 1:
              int v81 = *v78;
              goto LABEL_99;
            case 2:
              int v81 = *(unsigned __int16 *)v78;
              goto LABEL_99;
            case 3:
              int v81 = *(unsigned __int16 *)((v340 + v52) & v348) | (*(unsigned __int8 *)(((v340 + v52) & v348) + 2) << 16);
              goto LABEL_99;
            case 4:
              int v81 = *(_DWORD *)v78;
LABEL_99:
              if (v339 < 4) {
                unsigned int v79 = (v81 | ((v79 - 5) << (8 * v339))) + 5;
              }
              else {
                unsigned int v79 = v81 + 5;
              }
              break;
            default:
              break;
          }
        }
        uint64_t v315 = v61;
        switch(v79)
        {
          case 1u:
            uint64_t v107 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v335 + 16);
            v107(v77, v78, v334);
            v107((void *)(((unint64_t)v77 + v344 + v333) & ~v344), (unsigned __int8 *)((unint64_t)&v78[v344 + v333] & ~v344), v334);
            char v108 = 1;
            goto LABEL_108;
          case 2u:
            *uint64_t v77 = *(void *)v78;
            *((unsigned char *)v77 + v339) = 2;
            swift_retain();
            break;
          case 3u:
            *uint64_t v77 = *(void *)v78;
            *(void *)(((v340 + v50) & v348) + 8) = *(void *)(((v340 + v52) & v348) + 8);
            *((unsigned char *)v77 + v339) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *uint64_t v77 = *(void *)v78;
            unint64_t v109 = ((unint64_t)v77 + v336) & v61;
            unint64_t v110 = (unint64_t)&v78[v336] & v61;
            long long v111 = *(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 16);
            swift_retain();
            v111(v109, v110, v338);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v326 + 16))((v325 + v109) & v343, (v325 + v110) & v343, v327);
            char v108 = 4;
LABEL_108:
            *((unsigned char *)v77 + v339) = v108;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v335 + 16))(v77, v78, v334);
            *((unsigned char *)v77 + v339) = 0;
            break;
        }
        uint64_t v112 = ((v308 | v17) + v24) & v348;
        uint64_t v113 = ((v309 | v17) + v24) & v348;
        uint64_t v114 = *(void *)v113;
        uint64_t v115 = *(void *)(v113 + 8);
        char v116 = *(unsigned char *)(v113 + 0x10);
        sub_21F7652C0(*(void *)v113, v115, v116);
        *(void *)uint64_t v112 = v114;
        *(void *)(v112 + 8) = v115;
        *(unsigned char *)(v112 + 16) = v116;
        *(void *)(v112 + 24) = *(void *)((((v309 | v322) + v24) & v348) + 0x18);
        uint64_t v117 = (void *)((v340 + v112) & v348);
        uint64_t v118 = (unsigned __int8 *)((v340 + v113) & v348);
        unsigned int v119 = v118[v339];
        swift_bridgeObjectRetain();
        if (v119 < 5)
        {
          uint64_t v61 = v315;
        }
        else
        {
          if (v339 <= 3) {
            uint64_t v120 = v339;
          }
          else {
            uint64_t v120 = 4;
          }
          uint64_t v61 = v315;
          switch(v120)
          {
            case 1:
              int v121 = *v118;
              goto LABEL_154;
            case 2:
              int v121 = *(unsigned __int16 *)v118;
              goto LABEL_154;
            case 3:
              int v121 = *(unsigned __int16 *)v118 | (v118[2] << 16);
              goto LABEL_154;
            case 4:
              int v121 = *(_DWORD *)v118;
LABEL_154:
              if (v339 < 4) {
                unsigned int v119 = (v121 | ((v119 - 5) << (8 * v339))) + 5;
              }
              else {
                unsigned int v119 = v121 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v119)
        {
          case 1u:
            uint64_t v162 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v335 + 16);
            v162(v117, v118, v334);
            v162((void *)(((unint64_t)v117 + v332) & ~v344), (unsigned __int8 *)((unint64_t)&v118[v332] & ~v344), v334);
            char v163 = 1;
            goto LABEL_163;
          case 2u:
            *uint64_t v117 = *(void *)v118;
            *((unsigned char *)v117 + v339) = 2;
            swift_retain();
            break;
          case 3u:
            *uint64_t v117 = *(void *)v118;
            *(void *)(((v340 + v112) & v348) + 8) = *((void *)v118 + 1);
            *((unsigned char *)v117 + v339) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *uint64_t v117 = *(void *)v118;
            uint64_t v164 = (unsigned __int8 *)v52;
            unint64_t v165 = ((unint64_t)v117 + v336) & v61;
            unint64_t v166 = (unint64_t)&v118[v336] & v61;
            uint64_t v167 = *(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 16);
            swift_retain();
            v167(v165, v166, v338);
            uint64_t v168 = v325 + v165;
            uint64_t v52 = (uint64_t)v164;
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v326 + 16))(v168 & v343, (v325 + v166) & v343, v327);
            char v163 = 4;
LABEL_163:
            *((unsigned char *)v117 + v339) = v163;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v335 + 16))(v117, v118, v334);
            *((unsigned char *)v117 + v339) = 0;
            break;
        }
        *(unsigned char *)(v50 + v346) = 5;
        uint64_t v57 = v341;
        uint64_t v56 = v311;
LABEL_165:
        uint64_t v62 = v317;
        goto LABEL_166;
      case 6u:
        uint64_t v314 = v61;
        uint64_t v82 = v56;
        uint64_t v83 = *(void *)v52;
        uint64_t v84 = *(void *)((v51 & ~v17) + 8);
        char v85 = *(unsigned char *)((v51 & ~v17) + 0x10);
        sub_21F7652C0(*(void *)(v51 & ~v17), v84, v85);
        *(void *)unint64_t v50 = v83;
        *(void *)(v50 + 8) = v84;
        *(unsigned char *)(v50 + 16) = v85;
        *(void *)(v50 + 24) = *(void *)(v52 + 24);
        uint64_t v86 = (void *)((v340 + v50) & v348);
        uint64_t v87 = (unsigned __int8 *)((v340 + v52) & v348);
        unsigned int v88 = v87[v339];
        swift_bridgeObjectRetain();
        if (v88 >= 5)
        {
          if (v339 <= 3) {
            uint64_t v89 = v339;
          }
          else {
            uint64_t v89 = 4;
          }
          switch(v89)
          {
            case 1:
              int v90 = *v87;
              goto LABEL_119;
            case 2:
              int v90 = *(unsigned __int16 *)v87;
              goto LABEL_119;
            case 3:
              int v90 = *(unsigned __int16 *)((v340 + v52) & v348) | (*(unsigned __int8 *)(((v340 + v52) & v348) + 2) << 16);
              goto LABEL_119;
            case 4:
              int v90 = *(_DWORD *)v87;
LABEL_119:
              if (v339 < 4) {
                unsigned int v88 = (v90 | ((v88 - 5) << (8 * v339))) + 5;
              }
              else {
                unsigned int v88 = v90 + 5;
              }
              break;
            default:
              break;
          }
        }
        uint64_t v318 = v63;
        switch(v88)
        {
          case 1u:
            uint64_t v128 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v335 + 16);
            v128(v86, v87, v334);
            v128((void *)(((unint64_t)v86 + v344 + v333) & ~v344), (unsigned __int8 *)((unint64_t)&v87[v344 + v333] & ~v344), v334);
            char v127 = 1;
            goto LABEL_128;
          case 2u:
            *uint64_t v86 = *(void *)v87;
            *((unsigned char *)v86 + v339) = 2;
            swift_retain();
            break;
          case 3u:
            *uint64_t v86 = *(void *)v87;
            *(void *)(((v340 + v50) & v348) + 8) = *(void *)(((v340 + v52) & v348) + 8);
            *((unsigned char *)v86 + v339) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *uint64_t v86 = *(void *)v87;
            uint64_t v122 = (unsigned __int8 *)v52;
            unint64_t v123 = ((unint64_t)v86 + v336) & v314;
            unint64_t v124 = (unint64_t)&v87[v336] & v314;
            long long v125 = *(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 16);
            swift_retain();
            v125(v123, v124, v338);
            uint64_t v126 = v325 + v123;
            uint64_t v52 = (uint64_t)v122;
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v326 + 16))(v126 & v343, (v325 + v124) & v343, v327);
            char v127 = 4;
LABEL_128:
            *((unsigned char *)v86 + v339) = v127;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v335 + 16))(v86, v87, v334);
            *((unsigned char *)v86 + v339) = 0;
            break;
        }
        uint64_t v56 = v82;
        unint64_t v129 = ((v50 | 7) + v24) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v130 = (unsigned __int8 *)v52;
        unint64_t v131 = ((v52 | 7) + v24) & 0xFFFFFFFFFFFFFFF8;
        *(unsigned char *)unint64_t v129 = *(unsigned char *)v131;
        uint64_t v132 = (_OWORD *)(v129 + 8);
        long long v133 = (_OWORD *)(v131 + 8);
        if (*(unsigned __int8 *)(v131 + 96) == 255)
        {
          long long v139 = *(_OWORD *)(v131 + 24);
          *uint64_t v132 = *v133;
          *(_OWORD *)(v129 + 24) = v139;
          long long v140 = *(_OWORD *)(v131 + 40);
          long long v141 = *(_OWORD *)(v131 + 56);
          long long v142 = *(_OWORD *)(v131 + 72);
          *(_OWORD *)(v129 + 81) = *(_OWORD *)(v131 + 81);
          *(_OWORD *)(v129 + 56) = v141;
          *(_OWORD *)(v129 + 72) = v142;
          *(_OWORD *)(v129 + 40) = v140;
        }
        else
        {
          *uint64_t v132 = *v133;
          long long v134 = *(_OWORD *)(v131 + 24);
          long long v135 = *(_OWORD *)(v131 + 40);
          long long v136 = *(_OWORD *)(v131 + 72);
          *(_OWORD *)(v129 + 56) = *(_OWORD *)(v131 + 56);
          *(_OWORD *)(v129 + 72) = v136;
          *(_OWORD *)(v129 + 24) = v134;
          *(_OWORD *)(v129 + 40) = v135;
          uint64_t v137 = *(void *)(v131 + 88);
          char v138 = *(unsigned char *)(v131 + 96);
          sub_21F829E74(v137, v138);
          *(void *)(v129 + 88) = v137;
          *(unsigned char *)(v129 + 96) = v138;
        }
        uint64_t v143 = *(void *)(v131 + 104);
        char v144 = *(unsigned char *)(v131 + 112);
        sub_21F829E74(v143, v144);
        *(void *)(v129 + 104) = v143;
        *(unsigned char *)(v129 + 112) = v144;
        *(unsigned char *)(v50 + v346) = 6;
        uint64_t v57 = v341;
        uint64_t v61 = v314;
        uint64_t v145 = v331;
        goto LABEL_150;
      case 7u:
        uint64_t v312 = v56;
        uint64_t v91 = *(void *)v52;
        uint64_t v92 = *(void *)((v51 & ~v17) + 8);
        char v93 = *(unsigned char *)((v51 & ~v17) + 0x10);
        sub_21F7652C0(*(void *)(v51 & ~v17), v92, v93);
        *(void *)unint64_t v50 = v91;
        *(void *)(v50 + 8) = v92;
        *(unsigned char *)(v50 + 16) = v93;
        *(void *)(v50 + 24) = *(void *)(v52 + 24);
        long long v94 = (void *)((v340 + v50) & v348);
        long long v95 = (unsigned __int8 *)((v340 + v52) & v348);
        unsigned int v96 = v95[v339];
        swift_bridgeObjectRetain();
        if (v96 >= 5)
        {
          if (v339 <= 3) {
            uint64_t v97 = v339;
          }
          else {
            uint64_t v97 = 4;
          }
          switch(v97)
          {
            case 1:
              int v98 = *v95;
              goto LABEL_136;
            case 2:
              int v98 = *(unsigned __int16 *)v95;
              goto LABEL_136;
            case 3:
              int v98 = *(unsigned __int16 *)((v340 + v52) & v348) | (*(unsigned __int8 *)(((v340 + v52) & v348) + 2) << 16);
              goto LABEL_136;
            case 4:
              int v98 = *(_DWORD *)v95;
LABEL_136:
              if (v339 < 4) {
                unsigned int v96 = (v98 | ((v96 - 5) << (8 * v339))) + 5;
              }
              else {
                unsigned int v96 = v98 + 5;
              }
              break;
            default:
              break;
          }
        }
        uint64_t v318 = v63;
        switch(v96)
        {
          case 1u:
            uint64_t v146 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v335 + 16);
            v146(v94, v95, v334);
            v146((void *)(((unint64_t)v94 + v344 + v333) & ~v344), (unsigned __int8 *)((unint64_t)&v95[v344 + v333] & ~v344), v334);
            char v147 = 1;
            goto LABEL_145;
          case 2u:
            *long long v94 = *(void *)v95;
            *((unsigned char *)v94 + v339) = 2;
            swift_retain();
            break;
          case 3u:
            *long long v94 = *(void *)v95;
            *(void *)(((v340 + v50) & v348) + 8) = *(void *)(((v340 + v52) & v348) + 8);
            *((unsigned char *)v94 + v339) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *long long v94 = *(void *)v95;
            char v148 = (unsigned __int8 *)v52;
            unint64_t v149 = ((unint64_t)v94 + v336) & v61;
            unint64_t v150 = (unint64_t)&v95[v336] & v61;
            uint64_t v151 = *(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 16);
            swift_retain();
            v151(v149, v150, v338);
            uint64_t v152 = v325 + v149;
            uint64_t v52 = (uint64_t)v148;
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v326 + 16))(v152 & v343, (v325 + v150) & v343, v327);
            char v147 = 4;
LABEL_145:
            *((unsigned char *)v94 + v339) = v147;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v335 + 16))(v94, v95, v334);
            *((unsigned char *)v94 + v339) = 0;
            break;
        }
        unint64_t v153 = ((v50 | 7) + v24) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v130 = (unsigned __int8 *)v52;
        unint64_t v154 = ((v52 | 7) + v24) & 0xFFFFFFFFFFFFFFF8;
        *(unsigned char *)unint64_t v153 = *(unsigned char *)v154;
        *(unsigned char *)(v153 + 1) = *(unsigned char *)(v154 + 1);
        *(unsigned char *)(v153 + 2) = *(unsigned char *)(v154 + 2);
        uint64_t v155 = *(void *)(v154 + 8);
        uint64_t v156 = *(void *)(v154 + 16);
        char v157 = *(unsigned char *)(v154 + 24);
        sub_21F770E44(v155, v156, v157);
        *(void *)(v153 + 8) = v155;
        *(void *)(v153 + 16) = v156;
        *(unsigned char *)(v153 + 24) = v157;
        unsigned int v158 = *(unsigned __int8 *)(v154 + 48);
        if (v158 <= 0xFB)
        {
          uint64_t v160 = *(void *)(v154 + 32);
          uint64_t v161 = *(void *)(v154 + 40);
          sub_21F770E44(v160, v161, *(unsigned char *)(v154 + 48));
          *(void *)(v153 + 32) = v160;
          *(void *)(v153 + 40) = v161;
          *(unsigned char *)(v153 + 48) = v158;
        }
        else
        {
          long long v159 = *(_OWORD *)(v154 + 32);
          *(unsigned char *)(v153 + 48) = *(unsigned char *)(v154 + 48);
          *(_OWORD *)(v153 + 32) = v159;
        }
        uint64_t v57 = v341;
        uint64_t v56 = v312;
        uint64_t v145 = v331;
        *(unsigned char *)(v50 + v346) = 7;
LABEL_150:
        uint64_t v52 = (uint64_t)v130;
        uint64_t v63 = v318;
        break;
      default:
        uint64_t v64 = *(void *)v52;
        *(unsigned char *)(v50 + 8) = *(unsigned char *)((v51 & ~v17) + 8);
        *(void *)unint64_t v50 = v64;
        *(unsigned char *)(v50 + v346) = 0;
LABEL_166:
        uint64_t v145 = v331;
        break;
    }
    unint64_t v169 = (v145 + v50) & v62;
    unint64_t v170 = (v145 + v52) & v62;
    unsigned int v171 = *(unsigned __int8 *)(v170 + v57);
    unsigned int v172 = v171 - 8;
    if (v171 >= 8)
    {
      if (v57 <= 3) {
        uint64_t v173 = v57;
      }
      else {
        uint64_t v173 = 4;
      }
      switch(v173)
      {
        case 1:
          int v174 = *(unsigned __int8 *)v170;
          goto LABEL_176;
        case 2:
          int v174 = *(unsigned __int16 *)v170;
          goto LABEL_176;
        case 3:
          int v174 = *(unsigned __int16 *)((v145 + v52) & v62) | (*(unsigned __int8 *)(((v145 + v52) & v62) + 2) << 16);
          goto LABEL_176;
        case 4:
          int v174 = *(_DWORD *)v170;
LABEL_176:
          int v175 = (v174 | (v172 << (8 * v57))) + 8;
          unsigned int v171 = v174 + 8;
          if (v57 < 4) {
            unsigned int v171 = v175;
          }
          break;
        default:
          break;
      }
    }
    switch(v171)
    {
      case 1u:
        long long v177 = *(_OWORD *)v170;
        *(_OWORD *)(((v145 + v50) & v62) + 9) = *(_OWORD *)(((v145 + v52) & v62) + 9);
        *(_OWORD *)unint64_t v169 = v177;
        *(unsigned char *)(v169 + v57) = 1;
        break;
      case 2u:
        *(void *)unint64_t v169 = *(void *)v170;
        *(unsigned char *)(v169 + v57) = 2;
        swift_retain();
        break;
      case 3u:
        *(void *)unint64_t v169 = *(void *)v170;
        *(void *)(((v145 + v50) & v62) + 8) = *(void *)(((v145 + v52) & v62) + 8);
        *(unsigned char *)(v169 + v57) = 3;
        swift_retain();
        swift_retain();
        break;
      case 4u:
        uint64_t v178 = *(void *)v170;
        uint64_t v179 = *(void *)(v170 + 8);
        uint64_t v180 = v56;
        char v181 = *(unsigned char *)(v170 + 16);
        sub_21F7652C0(*(void *)v170, v179, v181);
        *(void *)unint64_t v169 = v178;
        *(void *)(v169 + 8) = v179;
        *(unsigned char *)(v169 + 16) = v181;
        uint64_t v182 = v180;
        *(void *)(v169 + 24) = *(void *)(v170 + 24);
        uint64_t v183 = (void *)((v328 + v169) & v62);
        uint64_t v184 = (unsigned __int8 *)((v328 + v170) & v62);
        unsigned int v185 = v184[v180];
        swift_bridgeObjectRetain();
        if (v185 < 5)
        {
          uint64_t v187 = v329;
          uint64_t v188 = v330;
        }
        else
        {
          if (v182 <= 3) {
            uint64_t v186 = v182;
          }
          else {
            uint64_t v186 = 4;
          }
          uint64_t v187 = v329;
          uint64_t v188 = v330;
          switch(v186)
          {
            case 1:
              int v189 = *v184;
              goto LABEL_214;
            case 2:
              int v189 = *(unsigned __int16 *)v184;
              goto LABEL_214;
            case 3:
              int v189 = *(unsigned __int16 *)((v328 + v170) & v62) | (*(unsigned __int8 *)(((v328 + v170) & v62) + 2) << 16);
              goto LABEL_214;
            case 4:
              int v189 = *(_DWORD *)v184;
LABEL_214:
              int v228 = (v189 | ((v185 - 5) << (8 * v182))) + 5;
              unsigned int v229 = v189 + 5;
              if (v182 >= 4) {
                unsigned int v185 = v229;
              }
              else {
                unsigned int v185 = v228;
              }
              break;
            default:
              break;
          }
        }
        switch(v185)
        {
          case 1u:
            uint64_t v230 = *(void (**)(unint64_t, unint64_t, uint64_t))(v188 + 16);
            uint64_t v231 = v187;
            ((void (*)(void *, unsigned __int8 *))v230)(v183, v184);
            v230(((unint64_t)v183 + v321) & v320, (unint64_t)&v184[v321] & v320, v231);
            char v232 = 1;
            goto LABEL_223;
          case 2u:
            *uint64_t v183 = *(void *)v184;
            *((unsigned char *)v183 + v182) = 2;
            swift_retain();
            break;
          case 3u:
            *uint64_t v183 = *(void *)v184;
            *(void *)(((v328 + v169) & v62) + 8) = *(void *)(((v328 + v170) & v62) + 8);
            *((unsigned char *)v183 + v182) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *uint64_t v183 = *(void *)v184;
            unint64_t v233 = ((unint64_t)v183 + v336) & v61;
            unint64_t v234 = (unint64_t)&v184[v336] & v61;
            long long v235 = *(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 16);
            swift_retain();
            v235(v233, v234, v338);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v326 + 16))((v325 + v233) & v343, (v325 + v234) & v343, v327);
            char v232 = 4;
LABEL_223:
            *((unsigned char *)v183 + v182) = v232;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v188 + 16))(v183, v184, v187);
            *((unsigned char *)v183 + v182) = 0;
            break;
        }
        *(unsigned char *)(v169 + v341) = 4;
        break;
      case 5u:
        uint64_t v319 = v63;
        uint64_t v190 = *(void *)v170;
        uint64_t v191 = *(void *)(v170 + 8);
        uint64_t v192 = v62;
        uint64_t v193 = v56;
        char v194 = *(unsigned char *)(v170 + 16);
        sub_21F7652C0(*(void *)v170, v191, v194);
        *(void *)unint64_t v169 = v190;
        *(void *)(v169 + 8) = v191;
        *(unsigned char *)(v169 + 16) = v194;
        *(void *)(v169 + 24) = *(void *)(v170 + 24);
        long long v195 = (void *)((v328 + v169) & v192);
        uint64_t v196 = v192;
        uint64_t v197 = (unsigned __int8 *)((v328 + v170) & v192);
        unsigned int v198 = v197[v193];
        swift_bridgeObjectRetain();
        if (v198 < 5)
        {
          uint64_t v200 = v329;
          uint64_t v201 = v330;
        }
        else
        {
          if (v193 <= 3) {
            uint64_t v199 = v193;
          }
          else {
            uint64_t v199 = 4;
          }
          uint64_t v200 = v329;
          uint64_t v201 = v330;
          switch(v199)
          {
            case 1:
              int v202 = *v197;
              goto LABEL_228;
            case 2:
              int v202 = *(unsigned __int16 *)v197;
              goto LABEL_228;
            case 3:
              int v202 = *(unsigned __int16 *)v197 | (v197[2] << 16);
              goto LABEL_228;
            case 4:
              int v202 = *(_DWORD *)v197;
LABEL_228:
              int v236 = (v202 | ((v198 - 5) << (8 * v193))) + 5;
              unsigned int v237 = v202 + 5;
              if (v193 >= 4) {
                unsigned int v198 = v237;
              }
              else {
                unsigned int v198 = v236;
              }
              break;
            default:
              break;
          }
        }
        uint64_t v316 = v61;
        switch(v198)
        {
          case 1u:
            uint64_t v238 = *(void (**)(unint64_t, unint64_t, uint64_t))(v201 + 16);
            uint64_t v239 = v200;
            ((void (*)(void *, unsigned __int8 *))v238)(v195, v197);
            v238(((unint64_t)v195 + v321) & v320, (unint64_t)&v197[v321] & v320, v239);
            char v240 = 1;
            goto LABEL_237;
          case 2u:
            *long long v195 = *(void *)v197;
            *((unsigned char *)v195 + v193) = 2;
            swift_retain();
            break;
          case 3u:
            *long long v195 = *(void *)v197;
            v195[1] = *((void *)v197 + 1);
            *((unsigned char *)v195 + v193) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *long long v195 = *(void *)v197;
            unint64_t v241 = ((unint64_t)v195 + v336) & v61;
            unint64_t v242 = (unint64_t)&v197[v336] & v61;
            char v243 = *(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 16);
            swift_retain();
            v243(v241, v242, v338);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v326 + 16))((v325 + v241) & v343, (v325 + v242) & v343, v327);
            char v240 = 4;
LABEL_237:
            *((unsigned char *)v195 + v193) = v240;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v201 + 16))(v195, v197, v200);
            *((unsigned char *)v195 + v193) = 0;
            break;
        }
        unint64_t v244 = (v323 + v169) & v196;
        unint64_t v245 = (v323 + v170) & v196;
        uint64_t v246 = *(void *)v245;
        uint64_t v247 = *(void *)(v245 + 8);
        char v248 = *(unsigned char *)(v245 + 0x10);
        sub_21F7652C0(*(void *)v245, v247, v248);
        *(void *)unint64_t v244 = v246;
        *(void *)(v244 + 8) = v247;
        *(unsigned char *)(v244 + 16) = v248;
        *(void *)(v244 + 24) = *(void *)(v245 + 0x18);
        uint64_t v249 = (void *)((v328 + v244) & v196);
        char v250 = (unsigned __int8 *)((v328 + v245) & v196);
        unsigned int v251 = v250[v193];
        swift_bridgeObjectRetain();
        uint64_t v252 = v193;
        if (v251 < 5)
        {
          uint64_t v254 = v329;
          uint64_t v255 = v330;
        }
        else
        {
          if (v193 <= 3) {
            uint64_t v253 = v193;
          }
          else {
            uint64_t v253 = 4;
          }
          uint64_t v254 = v329;
          uint64_t v255 = v330;
          switch(v253)
          {
            case 1:
              int v256 = *v250;
              goto LABEL_282;
            case 2:
              int v256 = *(unsigned __int16 *)v250;
              goto LABEL_282;
            case 3:
              int v256 = *(unsigned __int16 *)v250 | (v250[2] << 16);
              goto LABEL_282;
            case 4:
              int v256 = *(_DWORD *)v250;
LABEL_282:
              int v299 = (v256 | ((v251 - 5) << (8 * v193))) + 5;
              unsigned int v300 = v256 + 5;
              if (v193 >= 4) {
                unsigned int v251 = v300;
              }
              else {
                unsigned int v251 = v299;
              }
              break;
            default:
              break;
          }
        }
        switch(v251)
        {
          case 1u:
            char v301 = *(void (**)(unint64_t, unint64_t, uint64_t))(v255 + 16);
            uint64_t v302 = v254;
            ((void (*)(void *, unsigned __int8 *))v301)(v249, v250);
            v301(((unint64_t)v249 + v321) & v320, (unint64_t)&v250[v321] & v320, v302);
            char v303 = 1;
            goto LABEL_291;
          case 2u:
            *uint64_t v249 = *(void *)v250;
            *((unsigned char *)v249 + v193) = 2;
            swift_retain();
            break;
          case 3u:
            *uint64_t v249 = *(void *)v250;
            v249[1] = *((void *)v250 + 1);
            *((unsigned char *)v249 + v193) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *uint64_t v249 = *(void *)v250;
            unint64_t v304 = ((unint64_t)v249 + v336) & v316;
            unint64_t v305 = (unint64_t)&v250[v336] & v316;
            uint64_t v306 = *(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 16);
            swift_retain();
            v306(v304, v305, v338);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v326 + 16))((v325 + v304) & v343, (v325 + v305) & v343, v327);
            char v303 = 4;
LABEL_291:
            *((unsigned char *)v249 + v252) = v303;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v255 + 16))(v249, v250, v254);
            *((unsigned char *)v249 + v193) = 0;
            break;
        }
        *(unsigned char *)(v169 + v341) = 5;
        goto LABEL_293;
      case 6u:
        uint64_t v203 = *(void *)v170;
        uint64_t v204 = *(void *)(v170 + 8);
        uint64_t v205 = v56;
        char v206 = *(unsigned char *)(v170 + 16);
        sub_21F7652C0(*(void *)v170, v204, v206);
        *(void *)unint64_t v169 = v203;
        *(void *)(v169 + 8) = v204;
        *(unsigned char *)(v169 + 16) = v206;
        uint64_t v207 = v205;
        *(void *)(v169 + 24) = *(void *)(v170 + 24);
        uint64_t v208 = (void *)((v328 + v169) & v62);
        uint64_t v209 = (unsigned __int8 *)((v328 + v170) & v62);
        unsigned int v210 = v209[v205];
        swift_bridgeObjectRetain();
        if (v210 < 5)
        {
          uint64_t v212 = v329;
          uint64_t v213 = v330;
        }
        else
        {
          if (v207 <= 3) {
            uint64_t v211 = v207;
          }
          else {
            uint64_t v211 = 4;
          }
          uint64_t v212 = v329;
          uint64_t v213 = v330;
          switch(v211)
          {
            case 1:
              int v214 = *v209;
              goto LABEL_248;
            case 2:
              int v214 = *(unsigned __int16 *)v209;
              goto LABEL_248;
            case 3:
              int v214 = *(unsigned __int16 *)((v328 + v170) & v62) | (*(unsigned __int8 *)(((v328 + v170) & v62) + 2) << 16);
              goto LABEL_248;
            case 4:
              int v214 = *(_DWORD *)v209;
LABEL_248:
              int v257 = (v214 | ((v210 - 5) << (8 * v207))) + 5;
              unsigned int v258 = v214 + 5;
              if (v207 >= 4) {
                unsigned int v210 = v258;
              }
              else {
                unsigned int v210 = v257;
              }
              break;
            default:
              break;
          }
        }
        switch(v210)
        {
          case 1u:
            long long v264 = *(void (**)(unint64_t, unint64_t, uint64_t))(v213 + 16);
            uint64_t v265 = v212;
            ((void (*)(void *, unsigned __int8 *))v264)(v208, v209);
            v264(((unint64_t)v208 + v321) & v320, (unint64_t)&v209[v321] & v320, v265);
            char v263 = 1;
            goto LABEL_257;
          case 2u:
            *uint64_t v208 = *(void *)v209;
            *((unsigned char *)v208 + v207) = 2;
            swift_retain();
            break;
          case 3u:
            *uint64_t v208 = *(void *)v209;
            *(void *)(((v328 + v169) & v62) + 8) = *(void *)(((v328 + v170) & v62) + 8);
            *((unsigned char *)v208 + v207) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *uint64_t v208 = *(void *)v209;
            uint64_t v259 = v61;
            unint64_t v260 = ((unint64_t)v208 + v336) & v61;
            unint64_t v261 = (unint64_t)&v209[v336] & v259;
            uint64_t v262 = *(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 16);
            swift_retain();
            v262(v260, v261, v338);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v326 + 16))((v325 + v260) & v343, (v325 + v261) & v343, v327);
            char v263 = 4;
LABEL_257:
            *((unsigned char *)v208 + v207) = v263;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v213 + 16))(v208, v209, v212);
            *((unsigned char *)v208 + v207) = 0;
            break;
        }
        unint64_t v266 = (v324 + v169) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v267 = (v324 + v170) & 0xFFFFFFFFFFFFFFF8;
        *(unsigned char *)unint64_t v266 = *(unsigned char *)v267;
        uint64_t v268 = (_OWORD *)(v266 + 8);
        long long v269 = (_OWORD *)(v267 + 8);
        if (*(unsigned __int8 *)(v267 + 96) == 255)
        {
          long long v275 = *(_OWORD *)(v267 + 24);
          *uint64_t v268 = *v269;
          *(_OWORD *)(v266 + 24) = v275;
          long long v276 = *(_OWORD *)(v267 + 40);
          long long v277 = *(_OWORD *)(v267 + 56);
          long long v278 = *(_OWORD *)(v267 + 72);
          *(_OWORD *)(v266 + 81) = *(_OWORD *)(v267 + 81);
          *(_OWORD *)(v266 + 56) = v277;
          *(_OWORD *)(v266 + 72) = v278;
          *(_OWORD *)(v266 + 40) = v276;
        }
        else
        {
          *uint64_t v268 = *v269;
          long long v270 = *(_OWORD *)(v267 + 24);
          long long v271 = *(_OWORD *)(v267 + 40);
          long long v272 = *(_OWORD *)(v267 + 72);
          *(_OWORD *)(v266 + 56) = *(_OWORD *)(v267 + 56);
          *(_OWORD *)(v266 + 72) = v272;
          *(_OWORD *)(v266 + 24) = v270;
          *(_OWORD *)(v266 + 40) = v271;
          uint64_t v273 = *(void *)(v267 + 88);
          char v274 = *(unsigned char *)(v267 + 96);
          sub_21F829E74(v273, v274);
          *(void *)(v266 + 88) = v273;
          *(unsigned char *)(v266 + 96) = v274;
        }
        uint64_t v279 = *(void *)(v267 + 104);
        char v280 = *(unsigned char *)(v267 + 112);
        sub_21F829E74(v279, v280);
        *(void *)(v266 + 104) = v279;
        *(unsigned char *)(v266 + 112) = v280;
        *(unsigned char *)(v169 + v341) = 6;
        break;
      case 7u:
        uint64_t v319 = v63;
        uint64_t v215 = v57;
        uint64_t v216 = *(void *)v170;
        uint64_t v217 = *(void *)(v170 + 8);
        uint64_t v218 = v62;
        uint64_t v219 = v56;
        char v220 = *(unsigned char *)(v170 + 16);
        sub_21F7652C0(*(void *)v170, v217, v220);
        *(void *)unint64_t v169 = v216;
        *(void *)(v169 + 8) = v217;
        *(unsigned char *)(v169 + 16) = v220;
        *(void *)(v169 + 24) = *(void *)(v170 + 24);
        uint64_t v221 = (void *)((v328 + v169) & v218);
        uint64_t v222 = (unsigned __int8 *)((v328 + v170) & v218);
        unsigned int v223 = v222[v219];
        swift_bridgeObjectRetain();
        if (v223 < 5)
        {
          uint64_t v225 = v329;
          uint64_t v226 = v330;
        }
        else
        {
          if (v219 <= 3) {
            uint64_t v224 = v219;
          }
          else {
            uint64_t v224 = 4;
          }
          uint64_t v225 = v329;
          uint64_t v226 = v330;
          switch(v224)
          {
            case 1:
              int v227 = *v222;
              goto LABEL_265;
            case 2:
              int v227 = *(unsigned __int16 *)v222;
              goto LABEL_265;
            case 3:
              int v227 = *(unsigned __int16 *)v222 | (v222[2] << 16);
              goto LABEL_265;
            case 4:
              int v227 = *(_DWORD *)v222;
LABEL_265:
              int v281 = (v227 | ((v223 - 5) << (8 * v219))) + 5;
              unsigned int v282 = v227 + 5;
              if (v219 >= 4) {
                unsigned int v223 = v282;
              }
              else {
                unsigned int v223 = v281;
              }
              break;
            default:
              break;
          }
        }
        switch(v223)
        {
          case 1u:
            uint64_t v283 = *(void (**)(unint64_t, unint64_t, uint64_t))(v226 + 16);
            uint64_t v284 = v225;
            ((void (*)(void *, unsigned __int8 *))v283)(v221, v222);
            v283(((unint64_t)v221 + v321) & v320, (unint64_t)&v222[v321] & v320, v284);
            char v285 = 1;
            goto LABEL_274;
          case 2u:
            *uint64_t v221 = *(void *)v222;
            *((unsigned char *)v221 + v219) = 2;
            swift_retain();
            break;
          case 3u:
            *uint64_t v221 = *(void *)v222;
            v221[1] = *((void *)v222 + 1);
            *((unsigned char *)v221 + v219) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *uint64_t v221 = *(void *)v222;
            uint64_t v286 = v61;
            unint64_t v287 = ((unint64_t)v221 + v336) & v61;
            unint64_t v288 = (unint64_t)&v222[v336] & v286;
            uint64_t v289 = *(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 16);
            swift_retain();
            v289(v287, v288, v338);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v326 + 16))((v325 + v287) & v343, (v325 + v288) & v343, v327);
            char v285 = 4;
LABEL_274:
            *((unsigned char *)v221 + v219) = v285;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v226 + 16))(v221, v222, v225);
            *((unsigned char *)v221 + v219) = 0;
            break;
        }
        unint64_t v290 = (v324 + v169) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v291 = (v324 + v170) & 0xFFFFFFFFFFFFFFF8;
        *(unsigned char *)unint64_t v290 = *(unsigned char *)v291;
        *(unsigned char *)(v290 + 1) = *(unsigned char *)(v291 + 1);
        *(unsigned char *)(v290 + 2) = *(unsigned char *)(v291 + 2);
        uint64_t v292 = *(void *)(v291 + 8);
        uint64_t v293 = *(void *)(v291 + 16);
        char v294 = *(unsigned char *)(v291 + 24);
        sub_21F770E44(v292, v293, v294);
        *(void *)(v290 + 8) = v292;
        *(void *)(v290 + 16) = v293;
        *(unsigned char *)(v290 + 24) = v294;
        unsigned int v295 = *(unsigned __int8 *)(v291 + 48);
        if (v295 <= 0xFB)
        {
          uint64_t v297 = *(void *)(v291 + 32);
          uint64_t v298 = *(void *)(v291 + 40);
          sub_21F770E44(v297, v298, *(unsigned char *)(v291 + 48));
          *(void *)(v290 + 32) = v297;
          *(void *)(v290 + 40) = v298;
          *(unsigned char *)(v290 + 48) = v295;
        }
        else
        {
          long long v296 = *(_OWORD *)(v291 + 32);
          *(unsigned char *)(v290 + 48) = *(unsigned char *)(v291 + 48);
          *(_OWORD *)(v290 + 32) = v296;
        }
        *(unsigned char *)(v169 + v215) = 7;
LABEL_293:
        uint64_t v63 = v319;
        break;
      default:
        uint64_t v176 = *(void *)v170;
        *(unsigned char *)(((v145 + v50) & v62) + 8) = *(unsigned char *)(((v145 + v52) & v62) + 8);
        *(void *)unint64_t v169 = v176;
        *(unsigned char *)(v169 + v57) = 0;
        break;
    }
    *(void *)(((v169 | 7) + v63) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v170 | 7) + v63) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v60 = a1;
  }
  swift_retain();
  return v60;
}

uint64_t sub_21F829E74(uint64_t a1, char a2)
{
  if (a2) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_21F829E80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56);
  uint64_t v182 = *(void *)(a2 + 24);
  uint64_t v184 = a2;
  uint64_t v6 = *(void *)(v182 - 8);
  uint64_t v173 = v6;
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = sub_21FA24310();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v178 = v9;
  uint64_t v179 = v8;
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = sub_21FA24320();
  uint64_t v180 = *(void *)(v11 - 8);
  uint64_t v181 = v11;
  uint64_t v12 = *(unsigned __int8 *)(v180 + 80);
  uint64_t v13 = v12 | v10;
  uint64_t v14 = v12 | v10 | v7;
  uint64_t v15 = v14 | 7;
  uint64_t v16 = v5 + a1 + (v14 | 7);
  uint64_t v17 = v16 & ~(v14 | 7);
  uint64_t v18 = v14 + 32;
  uint64_t v19 = (v14 + 32) & ~(v14 | 7);
  unint64_t v20 = *(void *)(v6 + 64);
  unint64_t v21 = ((v20 + v7) & ~v7) + v20;
  if (v21 <= v20) {
    unint64_t v21 = *(void *)(v6 + 64);
  }
  uint64_t v177 = v10 + 8;
  uint64_t v22 = *(void *)(v9 + 64);
  uint64_t v172 = v22 + v12;
  uint64_t v23 = (v22 + v12 + ((v10 + 8) & ~v10)) & ~v12;
  uint64_t v24 = *(void *)(*(void *)(v11 - 8) + 64);
  unint64_t v25 = v23 + v24;
  if (v21 <= v23 + v24) {
    unint64_t v26 = v23 + v24;
  }
  else {
    unint64_t v26 = v21;
  }
  if (v26 <= 0x10) {
    uint64_t v27 = 16;
  }
  else {
    uint64_t v27 = v26;
  }
  uint64_t v28 = v27 + v19;
  unint64_t v29 = v27 + v19 + 1;
  unint64_t v30 = ((v29 + v15) & ~v15) + v29;
  if (v29 > v30) {
    unint64_t v30 = v28 + 1;
  }
  uint64_t v31 = v28 + 8;
  unint64_t v32 = (v28 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v30 <= v32 + 113) {
    unint64_t v30 = v32 + 113;
  }
  unint64_t v33 = v32 + 49;
  if (v30 > v33) {
    unint64_t v33 = v30;
  }
  if (v33 <= 0x19) {
    uint64_t v34 = 25;
  }
  else {
    uint64_t v34 = v33;
  }
  unsigned int v35 = *(unsigned __int8 *)(v17 + v34);
  unsigned int v36 = v35 - 8;
  if (v35 >= 8)
  {
    if (v34 <= 3) {
      uint64_t v37 = v34;
    }
    else {
      uint64_t v37 = 4;
    }
    switch(v37)
    {
      case 1:
        int v38 = *(unsigned __int8 *)v17;
        goto LABEL_27;
      case 2:
        int v38 = *(unsigned __int16 *)v17;
        goto LABEL_27;
      case 3:
        int v38 = *(unsigned __int16 *)v17 | (*(unsigned __int8 *)(v17 + 2) << 16);
        goto LABEL_27;
      case 4:
        int v38 = *(_DWORD *)v17;
LABEL_27:
        int v39 = (v38 | (v36 << (8 * v34))) + 8;
        unsigned int v35 = v38 + 8;
        if (v34 < 4) {
          unsigned int v35 = v39;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v40 = ~v15;
  uint64_t v175 = ~v10;
  uint64_t v176 = ~v12;
  uint64_t v186 = v17;
  switch(v35)
  {
    case 2u:
      uint64_t v41 = v34;
      uint64_t v42 = v12 | v10;
      unint64_t v43 = v25;
      goto LABEL_32;
    case 3u:
      uint64_t v41 = v34;
      uint64_t v42 = v12 | v10;
      unint64_t v43 = v25;
      swift_release();
LABEL_32:
      swift_release();
      uint64_t v34 = v41;
      unint64_t v25 = v43;
      uint64_t v17 = v186;
      uint64_t v13 = v42;
      break;
    case 4u:
      uint64_t v44 = v22;
      uint64_t v45 = v34;
      unint64_t v46 = v25;
      uint64_t v47 = v13;
      sub_21F7656A8(*(void *)v17, *(void *)(v17 + 8), *(unsigned char *)(v17 + 16));
      swift_bridgeObjectRelease();
      uint64_t v48 = (unsigned __int8 *)((v18 + v186) & v40);
      unsigned int v49 = v48[v27];
      unsigned int v50 = v49 - 5;
      if (v49 >= 5)
      {
        if (v27 <= 3) {
          uint64_t v51 = v27;
        }
        else {
          uint64_t v51 = 4;
        }
        switch(v51)
        {
          case 1:
            int v52 = *v48;
            goto LABEL_60;
          case 2:
            int v52 = *(unsigned __int16 *)v48;
            goto LABEL_60;
          case 3:
            int v52 = *(unsigned __int16 *)v48 | (v48[2] << 16);
            goto LABEL_60;
          case 4:
            int v52 = *(_DWORD *)v48;
LABEL_60:
            int v75 = (v52 | (v50 << (8 * v27))) + 5;
            unsigned int v49 = v52 + 5;
            if (v27 < 4) {
              unsigned int v49 = v75;
            }
            break;
          default:
            break;
        }
      }
      switch(v49)
      {
        case 1u:
          char v76 = *(void (**)(unsigned __int8 *, uint64_t))(v173 + 8);
          v76(v48, v182);
          v76((unsigned __int8 *)((unint64_t)&v48[v7 + v20] & ~v7), v182);
          break;
        case 2u:
          goto LABEL_66;
        case 3u:
          swift_release();
LABEL_66:
          swift_release();
          break;
        case 4u:
          swift_release();
          unint64_t v77 = (unint64_t)&v48[v177] & v175;
          (*(void (**)(unint64_t, uint64_t))(v178 + 8))(v77, v179);
          (*(void (**)(unint64_t, uint64_t))(v180 + 8))((v77 + v44 + v12) & v176, v181);
          break;
        default:
          (*(void (**)(unsigned __int8 *, uint64_t))(v173 + 8))(v48, v182);
          break;
      }
      uint64_t v13 = v47;
      uint64_t v17 = v186;
      unint64_t v25 = v46;
      uint64_t v34 = v45;
      break;
    case 5u:
      uint64_t v165 = v20 + v7;
      uint64_t v166 = v12 | v10;
      uint64_t v53 = v22;
      uint64_t v167 = ~v7;
      uint64_t v168 = v34;
      unint64_t v170 = v25;
      sub_21F7656A8(*(void *)v17, *(void *)(v17 + 8), *(unsigned char *)(v17 + 16));
      swift_bridgeObjectRelease();
      unsigned int v54 = (unsigned __int8 *)((v18 + v186) & v40);
      unsigned int v55 = v54[v27];
      unsigned int v56 = v55 - 5;
      if (v55 >= 5)
      {
        if (v27 <= 3) {
          uint64_t v57 = v27;
        }
        else {
          uint64_t v57 = 4;
        }
        switch(v57)
        {
          case 1:
            int v58 = *v54;
            goto LABEL_72;
          case 2:
            int v58 = *(unsigned __int16 *)v54;
            goto LABEL_72;
          case 3:
            int v58 = *(unsigned __int16 *)v54 | (*(unsigned __int8 *)(((v18 + v186) & v40) + 2) << 16);
            goto LABEL_72;
          case 4:
            int v58 = *(_DWORD *)v54;
LABEL_72:
            if (v27 < 4) {
              unsigned int v55 = (v58 | (v56 << (8 * v27))) + 5;
            }
            else {
              unsigned int v55 = v58 + 5;
            }
            break;
          default:
            break;
        }
      }
      switch(v55)
      {
        case 1u:
          uint64_t v164 = *(void (**)(void))(v173 + 8);
          v164();
          ((void (*)(unint64_t, uint64_t))v164)((((v18 + v186) & v40) + v7 + v20) & v167, v182);
          break;
        case 2u:
          swift_release();
          break;
        case 3u:
          swift_release();
          swift_release();
          break;
        case 4u:
          swift_release();
          uint64_t v78 = (v177 + ((v18 + v186) & v40)) & v175;
          (*(void (**)(uint64_t, uint64_t))(v178 + 8))(v78, v179);
          (*(void (**)(uint64_t, uint64_t))(v180 + 8))((v78 + v53 + v12) & v176, v181);
          break;
        default:
          (*(void (**)(unsigned __int8 *, uint64_t))(v173 + 8))(v54, v182);
          break;
      }
      unint64_t v79 = ((v16 | v15) + v29) & v40;
      sub_21F7656A8(*(void *)v79, *(void *)(v79 + 8), *(unsigned char *)(v79 + 0x10));
      swift_bridgeObjectRelease();
      uint64_t v80 = (unsigned __int8 *)((v18 + v79) & v40);
      unsigned int v81 = v80[v27];
      unsigned int v82 = v81 - 5;
      if (v81 >= 5)
      {
        if (v27 <= 3) {
          uint64_t v83 = v27;
        }
        else {
          uint64_t v83 = 4;
        }
        switch(v83)
        {
          case 1:
            int v84 = *v80;
            goto LABEL_119;
          case 2:
            int v84 = *(unsigned __int16 *)v80;
            goto LABEL_119;
          case 3:
            int v84 = *(unsigned __int16 *)v80 | (v80[2] << 16);
            goto LABEL_119;
          case 4:
            int v84 = *(_DWORD *)v80;
LABEL_119:
            int v93 = (v84 | (v82 << (8 * v27))) + 5;
            unsigned int v81 = v84 + 5;
            if (v27 < 4) {
              unsigned int v81 = v93;
            }
            break;
          default:
            break;
        }
      }
      switch(v81)
      {
        case 1u:
          long long v94 = *(void (**)(unsigned __int8 *, uint64_t))(v173 + 8);
          v94(v80, v182);
          v94((unsigned __int8 *)((unint64_t)&v80[v165] & v167), v182);
          break;
        case 2u:
          goto LABEL_125;
        case 3u:
          swift_release();
LABEL_125:
          swift_release();
          break;
        case 4u:
          swift_release();
          (*(void (**)(unint64_t, uint64_t))(v178 + 8))((unint64_t)&v80[v177] & v175, v179);
          (*(void (**)(unint64_t, uint64_t))(v180 + 8))((v172 + ((unint64_t)&v80[v177] & v175)) & v176, v181);
          break;
        default:
          (*(void (**)(unsigned __int8 *, uint64_t))(v173 + 8))(v80, v182);
          break;
      }
      uint64_t v13 = v166;
      goto LABEL_128;
    case 6u:
      uint64_t v59 = v31;
      uint64_t v60 = v22;
      uint64_t v168 = v34;
      unint64_t v170 = v25;
      uint64_t v61 = v13;
      sub_21F7656A8(*(void *)v17, *(void *)(v17 + 8), *(unsigned char *)(v17 + 16));
      swift_bridgeObjectRelease();
      uint64_t v62 = (unsigned __int8 *)((v18 + v186) & v40);
      unsigned int v63 = v62[v27];
      unsigned int v64 = v63 - 5;
      if (v63 >= 5)
      {
        if (v27 <= 3) {
          uint64_t v65 = v27;
        }
        else {
          uint64_t v65 = 4;
        }
        switch(v65)
        {
          case 1:
            int v66 = *v62;
            goto LABEL_90;
          case 2:
            int v66 = *(unsigned __int16 *)v62;
            goto LABEL_90;
          case 3:
            int v66 = *(unsigned __int16 *)v62 | (v62[2] << 16);
            goto LABEL_90;
          case 4:
            int v66 = *(_DWORD *)v62;
LABEL_90:
            if (v27 < 4) {
              unsigned int v63 = (v66 | (v64 << (8 * v27))) + 5;
            }
            else {
              unsigned int v63 = v66 + 5;
            }
            break;
          default:
            break;
        }
      }
      switch(v63)
      {
        case 1u:
          uint64_t v86 = *(void (**)(unsigned __int8 *, uint64_t))(v173 + 8);
          v86(v62, v182);
          v86((unsigned __int8 *)((unint64_t)&v62[v7 + v20] & ~v7), v182);
          break;
        case 2u:
          swift_release();
          break;
        case 3u:
          swift_release();
          swift_release();
          break;
        case 4u:
          swift_release();
          unint64_t v85 = (unint64_t)&v62[v177] & v175;
          (*(void (**)(unint64_t, uint64_t))(v178 + 8))(v85, v179);
          (*(void (**)(unint64_t, uint64_t))(v180 + 8))((v85 + v60 + v12) & v176, v181);
          break;
        default:
          (*(void (**)(unsigned __int8 *, uint64_t))(v173 + 8))(v62, v182);
          break;
      }
      unint64_t v87 = (v59 + v186) & 0xFFFFFFFFFFFFFFF8;
      int v88 = *(unsigned __int8 *)(v87 + 96);
      if (v88 != 255) {
        sub_21F82B5F8(*(void *)(v87 + 88), v88 & 1);
      }
      sub_21F82B5F8(*(void *)(v87 + 104), *(unsigned char *)(v87 + 112));
      uint64_t v13 = v61;
LABEL_128:
      uint64_t v17 = v186;
      uint64_t v34 = v168;
      unint64_t v25 = v170;
      break;
    case 7u:
      uint64_t v169 = v31;
      uint64_t v67 = v22;
      uint64_t v68 = v34;
      unint64_t v171 = v25;
      uint64_t v69 = v13;
      sub_21F7656A8(*(void *)v17, *(void *)(v17 + 8), *(unsigned char *)(v17 + 16));
      swift_bridgeObjectRelease();
      uint64_t v70 = (unsigned __int8 *)((v18 + v186) & v40);
      unsigned int v71 = v70[v27];
      unsigned int v72 = v71 - 5;
      if (v71 >= 5)
      {
        if (v27 <= 3) {
          uint64_t v73 = v27;
        }
        else {
          uint64_t v73 = 4;
        }
        switch(v73)
        {
          case 1:
            int v74 = *v70;
            goto LABEL_105;
          case 2:
            int v74 = *(unsigned __int16 *)v70;
            goto LABEL_105;
          case 3:
            int v74 = *(unsigned __int16 *)v70 | (v70[2] << 16);
            goto LABEL_105;
          case 4:
            int v74 = *(_DWORD *)v70;
LABEL_105:
            if (v27 < 4) {
              unsigned int v71 = (v74 | (v72 << (8 * v27))) + 5;
            }
            else {
              unsigned int v71 = v74 + 5;
            }
            break;
          default:
            break;
        }
      }
      switch(v71)
      {
        case 1u:
          uint64_t v89 = *(void (**)(unsigned __int8 *, uint64_t))(v173 + 8);
          v89(v70, v182);
          v89((unsigned __int8 *)((unint64_t)&v70[v7 + v20] & ~v7), v182);
          break;
        case 2u:
          swift_release();
          break;
        case 3u:
          swift_release();
          swift_release();
          break;
        case 4u:
          swift_release();
          unint64_t v90 = (unint64_t)&v70[v177] & v175;
          (*(void (**)(unint64_t, uint64_t))(v178 + 8))(v90, v179);
          (*(void (**)(unint64_t, uint64_t))(v180 + 8))((v90 + v67 + v12) & v176, v181);
          break;
        default:
          (*(void (**)(unsigned __int8 *, uint64_t))(v173 + 8))(v70, v182);
          break;
      }
      unint64_t v91 = (v169 + v186) & 0xFFFFFFFFFFFFFFF8;
      sub_21F770E38(*(void *)(v91 + 8), *(void *)(v91 + 16), *(unsigned char *)(v91 + 24));
      uint64_t v17 = v186;
      unsigned int v92 = *(unsigned __int8 *)(v91 + 48);
      uint64_t v13 = v69;
      unint64_t v25 = v171;
      uint64_t v34 = v68;
      if (v92 <= 0xFB)
      {
        sub_21F770E38(*(void *)(v91 + 32), *(void *)(v91 + 40), v92);
        uint64_t v34 = v68;
        unint64_t v25 = v171;
        uint64_t v17 = v186;
        uint64_t v13 = v69;
      }
      break;
    default:
      break;
  }
  uint64_t v95 = *(void *)(*(void *)(v184 + 32) - 8);
  uint64_t v96 = *(unsigned __int8 *)(v95 + 80);
  uint64_t v97 = v13 | v96 | 7;
  uint64_t v98 = (v17 | 1) + v97 + v34;
  uint64_t v99 = v98 & ~v97;
  uint64_t v100 = (v13 | v96) + 32;
  uint64_t v101 = v100 & ~v97;
  unint64_t v102 = *(void *)(v95 + 64);
  uint64_t v103 = v102 + v96;
  if (((v102 + v96) & ~v96) + v102 > v102) {
    v102 += (v102 + v96) & ~v96;
  }
  if (v102 <= v25) {
    unint64_t v102 = v25;
  }
  if (v102 <= 0x10) {
    uint64_t v104 = 16;
  }
  else {
    uint64_t v104 = v102;
  }
  uint64_t v105 = v104 + v101;
  unint64_t v106 = v104 + v101 + 1;
  unint64_t v107 = ((v106 + v97) & ~v97) + v106;
  if (v106 > v107) {
    unint64_t v107 = v105 + 1;
  }
  unint64_t v108 = (v105 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v107 <= v108 + 113) {
    unint64_t v107 = v108 + 113;
  }
  unint64_t v109 = v108 + 49;
  if (v107 > v109) {
    unint64_t v109 = v107;
  }
  if (v109 <= 0x19) {
    uint64_t v110 = 25;
  }
  else {
    uint64_t v110 = v109;
  }
  unsigned int v111 = *(unsigned __int8 *)(v99 + v110);
  unsigned int v112 = v111 - 8;
  if (v111 >= 8)
  {
    if (v110 <= 3) {
      uint64_t v113 = v110;
    }
    else {
      uint64_t v113 = 4;
    }
    switch(v113)
    {
      case 1:
        int v114 = *(unsigned __int8 *)v99;
        goto LABEL_154;
      case 2:
        int v114 = *(unsigned __int16 *)v99;
        goto LABEL_154;
      case 3:
        int v114 = *(unsigned __int16 *)v99 | (*(unsigned __int8 *)((v98 & ~v97) + 2) << 16);
        goto LABEL_154;
      case 4:
        int v114 = *(_DWORD *)v99;
LABEL_154:
        int v115 = (v114 | (v112 << (8 * v110))) + 8;
        unsigned int v111 = v114 + 8;
        if (v110 < 4) {
          unsigned int v111 = v115;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v116 = ~v97;
  switch(v111)
  {
    case 2u:
LABEL_157:
      swift_release();
      break;
    case 3u:
LABEL_158:
      swift_release();
      swift_release();
      break;
    case 4u:
      uint64_t v117 = ~v96;
      uint64_t v118 = v103;
      uint64_t v119 = *(void *)(v184 + 32);
      sub_21F7656A8(*(void *)v99, *(void *)(v99 + 8), *(unsigned char *)(v99 + 16));
      swift_bridgeObjectRelease();
      uint64_t v120 = (unsigned __int8 *)((v100 + v99) & v116);
      unsigned int v121 = v120[v104];
      unsigned int v122 = v121 - 5;
      if (v121 >= 5)
      {
        if (v104 <= 3) {
          uint64_t v123 = v104;
        }
        else {
          uint64_t v123 = 4;
        }
        switch(v123)
        {
          case 1:
            int v124 = *v120;
            goto LABEL_186;
          case 2:
            int v124 = *(unsigned __int16 *)v120;
            goto LABEL_186;
          case 3:
            int v124 = *(unsigned __int16 *)v120 | (*(unsigned __int8 *)(((v100 + v99) & v116) + 2) << 16);
            goto LABEL_186;
          case 4:
            int v124 = *(_DWORD *)v120;
LABEL_186:
            int v144 = (v124 | (v122 << (8 * v104))) + 5;
            unsigned int v121 = v124 + 5;
            if (v104 < 4) {
              unsigned int v121 = v144;
            }
            break;
          default:
            break;
        }
      }
      switch(v121)
      {
        case 1u:
          uint64_t v145 = *(void (**)(unsigned __int8 *, uint64_t))(v95 + 8);
          v145(v120, v119);
          v145((unsigned __int8 *)((unint64_t)&v120[v118] & v117), v119);
          break;
        case 2u:
          goto LABEL_157;
        case 3u:
          goto LABEL_158;
        case 4u:
          goto LABEL_242;
        default:
          (*(void (**)(uint64_t, uint64_t))(v95 + 8))((v100 + v99) & v116, v119);
          break;
      }
      break;
    case 5u:
      uint64_t v185 = *(void *)(v184 + 32);
      uint64_t v187 = ~v96;
      uint64_t v183 = v103;
      sub_21F7656A8(*(void *)v99, *(void *)((v98 & ~v97) + 8), *(unsigned char *)((v98 & ~v97) + 0x10));
      swift_bridgeObjectRelease();
      long long v125 = (unsigned __int8 *)((v100 + v99) & v116);
      unsigned int v126 = v125[v104];
      unsigned int v127 = v126 - 5;
      if (v126 >= 5)
      {
        if (v104 <= 3) {
          uint64_t v128 = v104;
        }
        else {
          uint64_t v128 = 4;
        }
        switch(v128)
        {
          case 1:
            int v129 = *v125;
            goto LABEL_194;
          case 2:
            int v129 = *(unsigned __int16 *)v125;
            goto LABEL_194;
          case 3:
            int v129 = *(unsigned __int16 *)v125 | (*(unsigned __int8 *)(((v100 + v99) & v116) + 2) << 16);
            goto LABEL_194;
          case 4:
            int v129 = *(_DWORD *)v125;
LABEL_194:
            int v146 = (v129 | (v127 << (8 * v104))) + 5;
            unsigned int v126 = v129 + 5;
            if (v104 < 4) {
              unsigned int v126 = v146;
            }
            break;
          default:
            break;
        }
      }
      switch(v126)
      {
        case 1u:
          int v174 = *(void (**)(uint64_t, uint64_t))(v95 + 8);
          v174((v100 + v99) & v116, v185);
          v174((unint64_t)&v125[v183] & v187, v185);
          break;
        case 2u:
          swift_release();
          break;
        case 3u:
          swift_release();
          swift_release();
          break;
        case 4u:
          swift_release();
          unint64_t v147 = (unint64_t)&v125[v177] & v175;
          (*(void (**)(unint64_t, uint64_t))(v178 + 8))(v147, v179);
          (*(void (**)(unint64_t, uint64_t))(v180 + 8))((v172 + v147) & v176, v181);
          break;
        default:
          (*(void (**)(uint64_t, uint64_t))(v95 + 8))((v100 + v99) & v116, v185);
          break;
      }
      unint64_t v148 = ((v98 | v97) + v106) & v116;
      sub_21F7656A8(*(void *)v148, *(void *)(v148 + 8), *(unsigned char *)(v148 + 0x10));
      swift_bridgeObjectRelease();
      uint64_t v120 = (unsigned __int8 *)((v100 + v148) & v116);
      unsigned int v149 = v120[v104];
      unsigned int v150 = v149 - 5;
      if (v149 >= 5)
      {
        if (v104 <= 3) {
          uint64_t v151 = v104;
        }
        else {
          uint64_t v151 = 4;
        }
        switch(v151)
        {
          case 1:
            int v152 = *v120;
            goto LABEL_238;
          case 2:
            int v152 = *(unsigned __int16 *)v120;
            goto LABEL_238;
          case 3:
            int v152 = *(unsigned __int16 *)v120 | (v120[2] << 16);
            goto LABEL_238;
          case 4:
            int v152 = *(_DWORD *)v120;
LABEL_238:
            int v161 = (v152 | (v150 << (8 * v104))) + 5;
            unsigned int v149 = v152 + 5;
            if (v104 < 4) {
              unsigned int v149 = v161;
            }
            break;
          default:
            break;
        }
      }
      switch(v149)
      {
        case 1u:
          uint64_t v162 = *(void (**)(unsigned __int8 *, uint64_t))(v95 + 8);
          v162(v120, v185);
          v162((unsigned __int8 *)((unint64_t)&v120[v183] & v187), v185);
          break;
        case 2u:
          goto LABEL_157;
        case 3u:
          goto LABEL_158;
        case 4u:
LABEL_242:
          swift_release();
          (*(void (**)(unint64_t, uint64_t))(v178 + 8))((unint64_t)&v120[v177] & v175, v179);
          (*(void (**)(unint64_t, uint64_t))(v180 + 8))((v172 + ((unint64_t)&v120[v177] & v175)) & v176, v181);
          break;
        default:
          (*(void (**)(unsigned __int8 *, uint64_t))(v95 + 8))(v120, v185);
          break;
      }
      break;
    case 6u:
      uint64_t v188 = ~v96;
      uint64_t v130 = v103;
      uint64_t v131 = *(void *)(v184 + 32);
      sub_21F7656A8(*(void *)v99, *(void *)(v99 + 8), *(unsigned char *)(v99 + 16));
      swift_bridgeObjectRelease();
      uint64_t v132 = (unsigned __int8 *)((v100 + v99) & v116);
      unsigned int v133 = v132[v104];
      unsigned int v134 = v133 - 5;
      if (v133 >= 5)
      {
        if (v104 <= 3) {
          uint64_t v135 = v104;
        }
        else {
          uint64_t v135 = 4;
        }
        switch(v135)
        {
          case 1:
            int v136 = *v132;
            goto LABEL_211;
          case 2:
            int v136 = *(unsigned __int16 *)v132;
            goto LABEL_211;
          case 3:
            int v136 = *(unsigned __int16 *)v132 | (*(unsigned __int8 *)(((v100 + v99) & v116) + 2) << 16);
            goto LABEL_211;
          case 4:
            int v136 = *(_DWORD *)v132;
LABEL_211:
            int v153 = (v136 | (v134 << (8 * v104))) + 5;
            unsigned int v133 = v136 + 5;
            if (v104 < 4) {
              unsigned int v133 = v153;
            }
            break;
          default:
            break;
        }
      }
      switch(v133)
      {
        case 1u:
          unint64_t v154 = *(void (**)(unsigned __int8 *, uint64_t))(v95 + 8);
          v154(v132, v131);
          v154((unsigned __int8 *)((unint64_t)&v132[v130] & v188), v131);
          break;
        case 2u:
          swift_release();
          break;
        case 3u:
          swift_release();
          swift_release();
          break;
        case 4u:
          swift_release();
          (*(void (**)(unint64_t, uint64_t))(v178 + 8))((unint64_t)&v132[v177] & v175, v179);
          (*(void (**)(unint64_t, uint64_t))(v180 + 8))((v172 + ((unint64_t)&v132[v177] & v175)) & v176, v181);
          break;
        default:
          (*(void (**)(uint64_t, uint64_t))(v95 + 8))((v100 + v99) & v116, v131);
          break;
      }
      unint64_t v155 = ((v99 | 7) + v106) & 0xFFFFFFFFFFFFFFF8;
      int v156 = *(unsigned __int8 *)(v155 + 96);
      if (v156 != 255) {
        sub_21F82B5F8(*(void *)(v155 + 88), v156 & 1);
      }
      sub_21F82B5F8(*(void *)(v155 + 104), *(unsigned char *)(v155 + 112));
      break;
    case 7u:
      uint64_t v189 = ~v96;
      uint64_t v137 = v103;
      uint64_t v138 = *(void *)(v184 + 32);
      sub_21F7656A8(*(void *)v99, *(void *)(v99 + 8), *(unsigned char *)(v99 + 16));
      swift_bridgeObjectRelease();
      long long v139 = (unsigned __int8 *)((v100 + v99) & v116);
      unsigned int v140 = v139[v104];
      unsigned int v141 = v140 - 5;
      if (v140 >= 5)
      {
        if (v104 <= 3) {
          uint64_t v142 = v104;
        }
        else {
          uint64_t v142 = 4;
        }
        switch(v142)
        {
          case 1:
            int v143 = *v139;
            goto LABEL_225;
          case 2:
            int v143 = *(unsigned __int16 *)v139;
            goto LABEL_225;
          case 3:
            int v143 = *(unsigned __int16 *)v139 | (*(unsigned __int8 *)(((v100 + v99) & v116) + 2) << 16);
            goto LABEL_225;
          case 4:
            int v143 = *(_DWORD *)v139;
LABEL_225:
            int v157 = (v143 | (v141 << (8 * v104))) + 5;
            unsigned int v140 = v143 + 5;
            if (v104 < 4) {
              unsigned int v140 = v157;
            }
            break;
          default:
            break;
        }
      }
      switch(v140)
      {
        case 1u:
          unsigned int v158 = *(void (**)(unsigned __int8 *, uint64_t))(v95 + 8);
          v158(v139, v138);
          v158((unsigned __int8 *)((unint64_t)&v139[v137] & v189), v138);
          break;
        case 2u:
          swift_release();
          break;
        case 3u:
          swift_release();
          swift_release();
          break;
        case 4u:
          swift_release();
          (*(void (**)(unint64_t, uint64_t))(v178 + 8))((unint64_t)&v139[v177] & v175, v179);
          (*(void (**)(unint64_t, uint64_t))(v180 + 8))((v172 + ((unint64_t)&v139[v177] & v175)) & v176, v181);
          break;
        default:
          (*(void (**)(uint64_t, uint64_t))(v95 + 8))((v100 + v99) & v116, v138);
          break;
      }
      unint64_t v159 = ((v99 | 7) + v106) & 0xFFFFFFFFFFFFFFF8;
      sub_21F770E38(*(void *)(v159 + 8), *(void *)(v159 + 16), *(unsigned char *)(v159 + 24));
      unsigned int v160 = *(unsigned __int8 *)(v159 + 48);
      if (v160 <= 0xFB) {
        sub_21F770E38(*(void *)(v159 + 32), *(void *)(v159 + 40), v160);
      }
      break;
    default:
      break;
  }

  return swift_release();
}

uint64_t sub_21F82B5F8(uint64_t a1, char a2)
{
  if (a2) {
    return swift_release();
  }
  return result;
}

uint64_t sub_21F82B604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v344 = a3;
  uint64_t v325 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v325 - 8);
  uint64_t v327 = v8;
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = sub_21FA24310();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v335 = v11;
  uint64_t v336 = v10;
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = sub_21FA24320();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = v8;
  uint64_t v337 = v14;
  uint64_t v338 = v13;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v16 | v12;
  uint64_t v18 = v16 | v12 | v9;
  uint64_t v19 = v18 | 7;
  uint64_t v20 = (v18 | 7) + v7;
  uint64_t v21 = v20 + a1;
  uint64_t v349 = a1;
  uint64_t v350 = (v20 + a1) & ~(v18 | 7);
  uint64_t v22 = v20 + a2;
  uint64_t v23 = (unsigned __int8 *)((v20 + a2) & ~(v18 | 7));
  uint64_t v24 = v18 + 32;
  uint64_t v25 = (v18 + 32) & ~(v18 | 7);
  unint64_t v26 = *(void *)(v15 + 64);
  unint64_t v27 = ((v26 + v9) & ~v9) + v26;
  if (v27 <= v26) {
    unint64_t v27 = *(void *)(v15 + 64);
  }
  uint64_t v333 = v12 + 8;
  uint64_t v334 = *(void *)(v11 + 64) + v16;
  uint64_t v28 = (v334 + ((v12 + 8) & ~v12)) & ~v16;
  uint64_t v29 = *(void *)(v14 + 64);
  unint64_t v30 = v28 + v29;
  if (v27 <= v28 + v29) {
    unint64_t v31 = v28 + v29;
  }
  else {
    unint64_t v31 = v27;
  }
  if (v31 <= 0x10) {
    unint64_t v31 = 16;
  }
  unint64_t v339 = v31;
  unint64_t v32 = v31 + v25;
  unint64_t v33 = v32 + 1;
  unint64_t v34 = ((v32 + 1 + v19) & ~v19) + v32 + 1;
  if (v32 + 1 > v34) {
    unint64_t v34 = v32 + 1;
  }
  unint64_t v35 = v32 + 8;
  unint64_t v36 = (v32 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v34 <= v36 + 113) {
    unint64_t v34 = v36 + 113;
  }
  unint64_t v37 = v36 + 49;
  if (v34 > v37) {
    unint64_t v37 = v34;
  }
  if (v37 <= 0x19) {
    uint64_t v38 = 25;
  }
  else {
    uint64_t v38 = v37;
  }
  unsigned int v39 = v23[v38];
  unsigned int v40 = v39 - 8;
  if (v39 >= 8)
  {
    if (v38 <= 3) {
      uint64_t v41 = v38;
    }
    else {
      uint64_t v41 = 4;
    }
    switch(v41)
    {
      case 1:
        int v42 = *v23;
        if (v38 < 4) {
          goto LABEL_25;
        }
        goto LABEL_29;
      case 2:
        int v42 = *(unsigned __int16 *)v23;
        if (v38 < 4) {
          goto LABEL_25;
        }
        goto LABEL_29;
      case 3:
        int v42 = *(unsigned __int16 *)v23 | (v23[2] << 16);
        if (v38 < 4) {
          goto LABEL_25;
        }
        goto LABEL_29;
      case 4:
        int v42 = *(_DWORD *)v23;
        if (v38 < 4) {
LABEL_25:
        }
          unsigned int v39 = (v42 | (v40 << (8 * v38))) + 8;
        else {
LABEL_29:
        }
          unsigned int v39 = v42 + 8;
        break;
      default:
        break;
    }
  }
  uint64_t v43 = ~v19;
  uint64_t v331 = ~v12;
  uint64_t v332 = ~v16;
  uint64_t v44 = v350;
  switch(v39)
  {
    case 1u:
      long long v47 = *(_OWORD *)v23;
      *(_OWORD *)(v350 + 9) = *(_OWORD *)(v23 + 9);
      *(_OWORD *)uint64_t v350 = v47;
      *(unsigned char *)(v350 + v38) = 1;
      uint64_t v46 = v344;
      break;
    case 2u:
      *(void *)uint64_t v350 = *(void *)v23;
      *(unsigned char *)(v350 + v38) = 2;
      uint64_t v48 = v38;
      goto LABEL_35;
    case 3u:
      *(void *)uint64_t v350 = *(void *)v23;
      *(void *)(v350 + 8) = *((void *)v23 + 1);
      *(unsigned char *)(v350 + v38) = 3;
      uint64_t v48 = v38;
      swift_retain();
LABEL_35:
      swift_retain();
      uint64_t v38 = v48;
      uint64_t v46 = v344;
      break;
    case 4u:
      uint64_t v312 = v17;
      uint64_t v317 = v38;
      unint64_t v322 = v30;
      unsigned int v49 = v23;
      uint64_t v50 = *(void *)v23;
      uint64_t v51 = *((void *)v49 + 1);
      char v52 = v49[16];
      uint64_t v53 = v24;
      sub_21F7652C0(v50, v51, v52);
      *(void *)uint64_t v350 = v50;
      *(void *)(v350 + 8) = v51;
      *(unsigned char *)(v350 + 16) = v52;
      *(void *)(v350 + 24) = *((void *)v49 + 3);
      unsigned int v54 = (void *)((v53 + v350) & v43);
      unsigned int v55 = v49;
      unsigned int v56 = (unsigned __int8 *)((unint64_t)&v49[v53] & v43);
      unsigned int v57 = v56[v339];
      swift_bridgeObjectRetain();
      if (v57 >= 5)
      {
        if (v339 <= 3) {
          uint64_t v58 = v339;
        }
        else {
          uint64_t v58 = 4;
        }
        switch(v58)
        {
          case 1:
            int v59 = *v56;
            goto LABEL_66;
          case 2:
            int v59 = *(unsigned __int16 *)v56;
            goto LABEL_66;
          case 3:
            int v59 = *(unsigned __int16 *)((unint64_t)&v49[v53] & v43) | (*(unsigned __int8 *)(((unint64_t)&v49[v53] & v43)
                                                                                                 + 2) << 16);
            goto LABEL_66;
          case 4:
            int v59 = *(_DWORD *)v56;
LABEL_66:
            if (v339 < 4) {
              unsigned int v57 = (v59 | ((v57 - 5) << (8 * v339))) + 5;
            }
            else {
              unsigned int v57 = v59 + 5;
            }
            break;
          default:
            break;
        }
      }
      switch(v57)
      {
        case 1u:
          uint64_t v96 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v327 + 16);
          v96(v54, v56, v325);
          v96((void *)(((unint64_t)v54 + v9 + v26) & ~v9), (unsigned __int8 *)((unint64_t)&v56[v9 + v26] & ~v9), v325);
          *((unsigned char *)v54 + v339) = 1;
          break;
        case 2u:
          *unsigned int v54 = *(void *)v56;
          *((unsigned char *)v54 + v339) = 2;
          swift_retain();
          break;
        case 3u:
          *unsigned int v54 = *(void *)v56;
          *(void *)(((v53 + v350) & v43) + 8) = *(void *)(((unint64_t)&v49[v53] & v43) + 8);
          *((unsigned char *)v54 + v339) = 3;
          swift_retain();
          swift_retain();
          break;
        case 4u:
          *unsigned int v54 = *(void *)v56;
          unint64_t v97 = ((unint64_t)v54 + v333) & v331;
          unint64_t v98 = (unint64_t)&v56[v333] & v331;
          uint64_t v99 = *(void (**)(unint64_t, unint64_t, uint64_t))(v335 + 16);
          swift_retain();
          v99(v97, v98, v336);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 16))((v334 + v97) & v332, (v334 + v98) & v332, v338);
          *((unsigned char *)v54 + v339) = 4;
          break;
        default:
          (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v327 + 16))((v53 + v350) & v43, v56, v325);
          *((unsigned char *)v54 + v339) = 0;
          break;
      }
      uint64_t v46 = v344;
      char v100 = 4;
      uint64_t v17 = v312;
      uint64_t v38 = v317;
      goto LABEL_127;
    case 5u:
      uint64_t v300 = v21;
      uint64_t v301 = v22;
      uint64_t v299 = v26 + v9;
      uint64_t v308 = ~v9;
      uint64_t v313 = v17;
      uint64_t v318 = v38;
      unint64_t v323 = v30;
      uint64_t v60 = *(void *)v23;
      uint64_t v61 = *((void *)v23 + 1);
      char v62 = v23[16];
      uint64_t v63 = v24;
      sub_21F7652C0(*(void *)v23, v61, v62);
      *(void *)uint64_t v350 = v60;
      *(void *)(v350 + 8) = v61;
      *(unsigned char *)(v350 + 16) = v62;
      *(void *)(v350 + 24) = *((void *)v23 + 3);
      char v303 = v23;
      unint64_t v304 = (void *)((v63 + v350) & ~v19);
      uint64_t v302 = v63;
      unint64_t v64 = (unint64_t)&v23[v63];
      uint64_t v65 = ~v19;
      int v66 = (unsigned __int8 *)(v64 & ~v19);
      unsigned int v67 = v66[v339];
      swift_bridgeObjectRetain();
      if (v67 >= 5)
      {
        if (v339 <= 3) {
          uint64_t v68 = v339;
        }
        else {
          uint64_t v68 = 4;
        }
        switch(v68)
        {
          case 1:
            int v69 = *v66;
            goto LABEL_79;
          case 2:
            int v69 = *(unsigned __int16 *)v66;
            goto LABEL_79;
          case 3:
            int v69 = *(unsigned __int16 *)v66 | (v66[2] << 16);
            goto LABEL_79;
          case 4:
            int v69 = *(_DWORD *)v66;
LABEL_79:
            if (v339 < 4) {
              unsigned int v67 = (v69 | ((v67 - 5) << (8 * v339))) + 5;
            }
            else {
              unsigned int v67 = v69 + 5;
            }
            break;
          default:
            break;
        }
      }
      switch(v67)
      {
        case 1u:
          unint64_t v102 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v327 + 16);
          v102(v304, v66, v325);
          v102((void *)(((unint64_t)v304 + v9 + v26) & v308), (unsigned __int8 *)((unint64_t)&v66[v9 + v26] & v308), v325);
          uint64_t v44 = v350;
          unint64_t v101 = v339;
          *((unsigned char *)v304 + v339) = 1;
          break;
        case 2u:
          *unint64_t v304 = *(void *)v66;
          unint64_t v101 = v339;
          *((unsigned char *)v304 + v339) = 2;
          swift_retain();
          break;
        case 3u:
          *unint64_t v304 = *(void *)v66;
          v304[1] = *((void *)v66 + 1);
          unint64_t v101 = v339;
          *((unsigned char *)v304 + v339) = 3;
          swift_retain();
          swift_retain();
          break;
        case 4u:
          *unint64_t v304 = *(void *)v66;
          unint64_t v103 = ((unint64_t)v304 + v333) & v331;
          unint64_t v104 = (unint64_t)&v66[v333] & v331;
          uint64_t v105 = *(void (**)(unint64_t, unint64_t, uint64_t))(v335 + 16);
          swift_retain();
          v105(v103, v104, v336);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 16))((v334 + v103) & v332, (v334 + v104) & v332, v338);
          unint64_t v101 = v339;
          *((unsigned char *)v304 + v339) = 4;
          break;
        default:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v327 + 16))(v304, v66, v325);
          unint64_t v101 = v339;
          *((unsigned char *)v304 + v339) = 0;
          break;
      }
      uint64_t v106 = ((v300 | v19) + v33) & v65;
      uint64_t v107 = ((v301 | v19) + v33) & v65;
      uint64_t v108 = *(void *)v107;
      uint64_t v109 = *(void *)(v107 + 8);
      char v110 = *(unsigned char *)(v107 + 0x10);
      sub_21F7652C0(*(void *)v107, v109, v110);
      *(void *)uint64_t v106 = v108;
      *(void *)(v106 + 8) = v109;
      *(unsigned char *)(v106 + 16) = v110;
      *(void *)(v106 + 24) = *(void *)(v107 + 24);
      unsigned int v111 = (void *)((v302 + v106) & v65);
      unsigned int v112 = (unsigned __int8 *)((v302 + v107) & v65);
      unsigned int v113 = v112[v101];
      swift_bridgeObjectRetain();
      unint64_t v114 = v101;
      if (v113 < 5)
      {
        uint64_t v46 = v344;
        unint64_t v30 = v323;
      }
      else
      {
        if (v101 <= 3) {
          uint64_t v115 = v101;
        }
        else {
          uint64_t v115 = 4;
        }
        uint64_t v46 = v344;
        unint64_t v30 = v323;
        switch(v115)
        {
          case 1:
            int v116 = *v112;
            goto LABEL_131;
          case 2:
            int v116 = *(unsigned __int16 *)v112;
            goto LABEL_131;
          case 3:
            int v116 = *(unsigned __int16 *)v112 | (v112[2] << 16);
            goto LABEL_131;
          case 4:
            int v116 = *(_DWORD *)v112;
LABEL_131:
            if (v101 < 4) {
              unsigned int v113 = (v116 | ((v113 - 5) << (8 * v101))) + 5;
            }
            else {
              unsigned int v113 = v116 + 5;
            }
            break;
          default:
            break;
        }
      }
      switch(v113)
      {
        case 1u:
          unsigned int v149 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v327 + 16);
          v149(v111, v112, v325);
          v149((void *)(((unint64_t)v111 + v299) & v308), (unsigned __int8 *)((unint64_t)&v112[v299] & v308), v325);
          *((unsigned char *)v111 + v101) = 1;
          break;
        case 2u:
          *unsigned int v111 = *(void *)v112;
          *((unsigned char *)v111 + v101) = 2;
          swift_retain();
          break;
        case 3u:
          *unsigned int v111 = *(void *)v112;
          v111[1] = *((void *)v112 + 1);
          *((unsigned char *)v111 + v101) = 3;
          swift_retain();
          swift_retain();
          break;
        case 4u:
          *unsigned int v111 = *(void *)v112;
          unint64_t v150 = ((unint64_t)v111 + v333) & v331;
          unint64_t v151 = (unint64_t)&v112[v333] & v331;
          unint64_t v152 = v114;
          int v153 = *(void (**)(unint64_t, unint64_t, uint64_t))(v335 + 16);
          swift_retain();
          v153(v150, v151, v336);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 16))((v334 + v150) & v332, (v334 + v151) & v332, v338);
          *((unsigned char *)v111 + v152) = 4;
          break;
        default:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v327 + 16))(v111, v112, v325);
          *((unsigned char *)v111 + v101) = 0;
          break;
      }
      uint64_t v17 = v313;
      uint64_t v38 = v318;
      *(unsigned char *)(v44 + v318) = 5;
      uint64_t v23 = v303;
      break;
    case 6u:
      uint64_t v70 = v9;
      unint64_t v305 = v35;
      uint64_t v309 = ~v9;
      uint64_t v319 = v38;
      unint64_t v322 = v30;
      uint64_t v314 = v17;
      unsigned int v71 = v23;
      uint64_t v72 = *(void *)v23;
      uint64_t v73 = *((void *)v71 + 1);
      char v74 = v71[16];
      uint64_t v75 = v43;
      uint64_t v76 = v24;
      sub_21F7652C0(v72, v73, v74);
      *(void *)uint64_t v350 = v72;
      *(void *)(v350 + 8) = v73;
      *(unsigned char *)(v350 + 16) = v74;
      *(void *)(v350 + 24) = *((void *)v71 + 3);
      unint64_t v77 = (void *)((v76 + v350) & v75);
      unsigned int v55 = v71;
      uint64_t v78 = (unsigned __int8 *)((unint64_t)&v71[v76] & v75);
      unsigned int v79 = v78[v339];
      swift_bridgeObjectRetain();
      if (v79 < 5)
      {
        uint64_t v81 = v70;
      }
      else
      {
        if (v339 <= 3) {
          uint64_t v80 = v339;
        }
        else {
          uint64_t v80 = 4;
        }
        uint64_t v81 = v70;
        switch(v80)
        {
          case 1:
            int v82 = *v78;
            goto LABEL_98;
          case 2:
            int v82 = *(unsigned __int16 *)v78;
            goto LABEL_98;
          case 3:
            int v82 = *(unsigned __int16 *)v78 | (v78[2] << 16);
            goto LABEL_98;
          case 4:
            int v82 = *(_DWORD *)v78;
LABEL_98:
            if (v339 < 4) {
              unsigned int v79 = (v82 | ((v79 - 5) << (8 * v339))) + 5;
            }
            else {
              unsigned int v79 = v82 + 5;
            }
            break;
          default:
            break;
        }
      }
      switch(v79)
      {
        case 1u:
          uint64_t v120 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v327 + 16);
          v120(v77, v78, v325);
          v120((void *)(((unint64_t)v77 + v81 + v26) & v309), (unsigned __int8 *)((unint64_t)&v78[v81 + v26] & v309), v325);
          *((unsigned char *)v77 + v339) = 1;
          break;
        case 2u:
          *unint64_t v77 = *(void *)v78;
          *((unsigned char *)v77 + v339) = 2;
          swift_retain();
          break;
        case 3u:
          *unint64_t v77 = *(void *)v78;
          v77[1] = *((void *)v78 + 1);
          *((unsigned char *)v77 + v339) = 3;
          swift_retain();
          swift_retain();
          break;
        case 4u:
          *unint64_t v77 = *(void *)v78;
          unint64_t v117 = ((unint64_t)v77 + v333) & v331;
          unint64_t v118 = (unint64_t)&v78[v333] & v331;
          uint64_t v119 = *(void (**)(unint64_t, unint64_t, uint64_t))(v335 + 16);
          swift_retain();
          v119(v117, v118, v336);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 16))((v334 + v117) & v332, (v334 + v118) & v332, v338);
          *((unsigned char *)v77 + v339) = 4;
          break;
        default:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v327 + 16))(v77, v78, v325);
          *((unsigned char *)v77 + v339) = 0;
          break;
      }
      uint64_t v46 = v344;
      uint64_t v17 = v314;
      unint64_t v121 = (v305 + v350) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v122 = (unint64_t)&v55[v305] & 0xFFFFFFFFFFFFFFF8;
      *(unsigned char *)unint64_t v121 = *(unsigned char *)v122;
      uint64_t v123 = (_OWORD *)(v121 + 8);
      int v124 = (_OWORD *)(v122 + 8);
      if (*(unsigned __int8 *)(v122 + 96) == 255)
      {
        long long v130 = *(_OWORD *)(v122 + 24);
        *uint64_t v123 = *v124;
        *(_OWORD *)(v121 + 24) = v130;
        long long v131 = *(_OWORD *)(v122 + 40);
        long long v132 = *(_OWORD *)(v122 + 56);
        long long v133 = *(_OWORD *)(v122 + 72);
        *(_OWORD *)(v121 + 81) = *(_OWORD *)(v122 + 81);
        *(_OWORD *)(v121 + 56) = v132;
        *(_OWORD *)(v121 + 72) = v133;
        *(_OWORD *)(v121 + 40) = v131;
      }
      else
      {
        *uint64_t v123 = *v124;
        long long v125 = *(_OWORD *)(v122 + 24);
        long long v126 = *(_OWORD *)(v122 + 40);
        long long v127 = *(_OWORD *)(v122 + 72);
        *(_OWORD *)(v121 + 56) = *(_OWORD *)(v122 + 56);
        *(_OWORD *)(v121 + 72) = v127;
        *(_OWORD *)(v121 + 24) = v125;
        *(_OWORD *)(v121 + 40) = v126;
        uint64_t v128 = *(void *)(v122 + 88);
        char v129 = *(unsigned char *)(v122 + 96);
        sub_21F829E74(v128, v129);
        *(void *)(v121 + 88) = v128;
        *(unsigned char *)(v121 + 96) = v129;
      }
      uint64_t v134 = *(void *)(v122 + 104);
      char v135 = *(unsigned char *)(v122 + 112);
      sub_21F829E74(v134, v135);
      *(void *)(v121 + 104) = v134;
      *(unsigned char *)(v121 + 112) = v135;
      char v100 = 6;
      uint64_t v38 = v319;
      goto LABEL_127;
    case 7u:
      uint64_t v83 = v9;
      unint64_t v306 = v35;
      uint64_t v310 = ~v9;
      uint64_t v320 = v38;
      unint64_t v322 = v30;
      uint64_t v315 = v17;
      int v84 = v23;
      uint64_t v85 = *(void *)v23;
      uint64_t v86 = *((void *)v84 + 1);
      char v87 = v84[16];
      uint64_t v88 = v43;
      uint64_t v89 = v24;
      sub_21F7652C0(v85, v86, v87);
      *(void *)uint64_t v350 = v85;
      *(void *)(v350 + 8) = v86;
      *(unsigned char *)(v350 + 16) = v87;
      *(void *)(v350 + 24) = *((void *)v84 + 3);
      unint64_t v90 = (void *)((v89 + v350) & v88);
      unsigned int v55 = v84;
      unint64_t v91 = (unsigned __int8 *)((unint64_t)&v84[v89] & v88);
      unsigned int v92 = v91[v339];
      swift_bridgeObjectRetain();
      if (v92 < 5)
      {
        uint64_t v94 = v83;
      }
      else
      {
        if (v339 <= 3) {
          uint64_t v93 = v339;
        }
        else {
          uint64_t v93 = 4;
        }
        uint64_t v94 = v83;
        switch(v93)
        {
          case 1:
            int v95 = *v91;
            goto LABEL_114;
          case 2:
            int v95 = *(unsigned __int16 *)v91;
            goto LABEL_114;
          case 3:
            int v95 = *(unsigned __int16 *)v91 | (v91[2] << 16);
            goto LABEL_114;
          case 4:
            int v95 = *(_DWORD *)v91;
LABEL_114:
            if (v339 < 4) {
              unsigned int v92 = (v95 | ((v92 - 5) << (8 * v339))) + 5;
            }
            else {
              unsigned int v92 = v95 + 5;
            }
            break;
          default:
            break;
        }
      }
      switch(v92)
      {
        case 1u:
          int v136 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v327 + 16);
          v136(v90, v91, v325);
          v136((void *)(((unint64_t)v90 + v94 + v26) & v310), (unsigned __int8 *)((unint64_t)&v91[v94 + v26] & v310), v325);
          *((unsigned char *)v90 + v339) = 1;
          break;
        case 2u:
          void *v90 = *(void *)v91;
          *((unsigned char *)v90 + v339) = 2;
          swift_retain();
          break;
        case 3u:
          void *v90 = *(void *)v91;
          v90[1] = *((void *)v91 + 1);
          *((unsigned char *)v90 + v339) = 3;
          swift_retain();
          swift_retain();
          break;
        case 4u:
          void *v90 = *(void *)v91;
          unint64_t v137 = ((unint64_t)v90 + v333) & v331;
          unint64_t v138 = (unint64_t)&v91[v333] & v331;
          long long v139 = *(void (**)(unint64_t, unint64_t, uint64_t))(v335 + 16);
          swift_retain();
          v139(v137, v138, v336);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 16))((v334 + v137) & v332, (v334 + v138) & v332, v338);
          *((unsigned char *)v90 + v339) = 4;
          break;
        default:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v327 + 16))(v90, v91, v325);
          *((unsigned char *)v90 + v339) = 0;
          break;
      }
      uint64_t v46 = v344;
      unint64_t v140 = (v306 + v350) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v141 = (unint64_t)&v55[v306] & 0xFFFFFFFFFFFFFFF8;
      *(unsigned char *)unint64_t v140 = *(unsigned char *)v141;
      *(unsigned char *)(v140 + 1) = *(unsigned char *)(v141 + 1);
      *(unsigned char *)(v140 + 2) = *(unsigned char *)(v141 + 2);
      uint64_t v142 = *(void *)(v141 + 8);
      uint64_t v143 = *(void *)(v141 + 16);
      char v144 = *(unsigned char *)(v141 + 24);
      sub_21F770E44(v142, v143, v144);
      *(void *)(v140 + 8) = v142;
      *(void *)(v140 + 16) = v143;
      *(unsigned char *)(v140 + 24) = v144;
      unsigned int v145 = *(unsigned __int8 *)(v141 + 48);
      if (v145 <= 0xFB)
      {
        uint64_t v147 = *(void *)(v141 + 32);
        uint64_t v148 = *(void *)(v141 + 40);
        sub_21F770E44(v147, v148, *(unsigned char *)(v141 + 48));
        *(void *)(v140 + 32) = v147;
        *(void *)(v140 + 40) = v148;
        *(unsigned char *)(v140 + 48) = v145;
      }
      else
      {
        long long v146 = *(_OWORD *)(v141 + 32);
        *(unsigned char *)(v140 + 48) = *(unsigned char *)(v141 + 48);
        *(_OWORD *)(v140 + 32) = v146;
      }
      uint64_t v17 = v315;
      uint64_t v38 = v320;
      char v100 = 7;
LABEL_127:
      *(unsigned char *)(v350 + v38) = v100;
      uint64_t v23 = v55;
      unint64_t v30 = v322;
      break;
    default:
      uint64_t v45 = *(void *)v23;
      *(unsigned char *)(v350 + 8) = v23[8];
      *(void *)uint64_t v350 = v45;
      *(unsigned char *)(v350 + v38) = 0;
      uint64_t v46 = v344;
      break;
  }
  uint64_t v154 = *(void *)(*(void *)(v46 + 32) - 8);
  uint64_t v155 = *(unsigned __int8 *)(v154 + 80);
  uint64_t v156 = v17 | v155;
  uint64_t v157 = v17 | v155 | 7;
  uint64_t v158 = v38 + v157 + 1;
  uint64_t v159 = v158 + v44;
  uint64_t v160 = (v158 + v44) & ~v157;
  int v161 = &v23[v158];
  unint64_t v162 = (unint64_t)&v23[v158] & ~v157;
  uint64_t v163 = v156 + 32;
  uint64_t v164 = (v156 + 32) & ~v157;
  unint64_t v165 = *(void *)(v154 + 64);
  uint64_t v166 = v165 + v155;
  if (((v165 + v155) & ~v155) + v165 > v165) {
    v165 += (v165 + v155) & ~v155;
  }
  if (v165 <= v30) {
    unint64_t v165 = v30;
  }
  if (v165 <= 0x10) {
    uint64_t v167 = 16;
  }
  else {
    uint64_t v167 = v165;
  }
  uint64_t v168 = v167 + v164;
  unint64_t v169 = v167 + v164 + 1;
  unint64_t v170 = ((v169 + v157) & ~v157) + v169;
  if (v169 > v170) {
    unint64_t v170 = v168 + 1;
  }
  uint64_t v171 = v168 + 8;
  unint64_t v172 = (v168 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v170 <= v172 + 113) {
    unint64_t v170 = v172 + 113;
  }
  unint64_t v173 = v172 + 49;
  if (v170 > v173) {
    unint64_t v173 = v170;
  }
  if (v173 <= 0x19) {
    uint64_t v174 = 25;
  }
  else {
    uint64_t v174 = v173;
  }
  unsigned int v175 = *(unsigned __int8 *)(v162 + v174);
  unsigned int v176 = v175 - 8;
  if (v175 >= 8)
  {
    if (v174 <= 3) {
      uint64_t v177 = v174;
    }
    else {
      uint64_t v177 = 4;
    }
    switch(v177)
    {
      case 1:
        int v178 = *(unsigned __int8 *)v162;
        goto LABEL_166;
      case 2:
        int v178 = *(unsigned __int16 *)v162;
        goto LABEL_166;
      case 3:
        int v178 = *(unsigned __int16 *)v162 | (*(unsigned __int8 *)(v162 + 2) << 16);
        goto LABEL_166;
      case 4:
        int v178 = *(_DWORD *)v162;
LABEL_166:
        int v179 = (v178 | (v176 << (8 * v174))) + 8;
        unsigned int v175 = v178 + 8;
        if (v174 < 4) {
          unsigned int v175 = v179;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v180 = ~v157;
  uint64_t v181 = ~v155;
  switch(v175)
  {
    case 1u:
      long long v183 = *(_OWORD *)v162;
      *(_OWORD *)(v160 + 9) = *(_OWORD *)(v162 + 9);
      *(_OWORD *)uint64_t v160 = v183;
      char v184 = 1;
      goto LABEL_277;
    case 2u:
      *(void *)uint64_t v160 = *(void *)v162;
      *(unsigned char *)(v160 + v174) = 2;
      swift_retain();
      break;
    case 3u:
      *(void *)uint64_t v160 = *(void *)v162;
      *(void *)(v160 + 8) = *(void *)(v162 + 8);
      *(unsigned char *)(v160 + v174) = 3;
      swift_retain();
      swift_retain();
      break;
    case 4u:
      uint64_t v340 = v181;
      uint64_t v345 = v166;
      uint64_t v185 = *(void *)(v46 + 32);
      uint64_t v351 = v174;
      uint64_t v186 = *(void *)v162;
      uint64_t v187 = *(void *)(v162 + 8);
      uint64_t v188 = v167;
      uint64_t v189 = v160;
      char v190 = *(unsigned char *)(v162 + 16);
      sub_21F7652C0(*(void *)v162, v187, v190);
      *(void *)uint64_t v189 = v186;
      *(void *)(v189 + 8) = v187;
      *(unsigned char *)(v189 + 16) = v190;
      uint64_t v160 = v189;
      uint64_t v191 = v188;
      *(void *)(v160 + 24) = *(void *)(v162 + 24);
      uint64_t v192 = (void *)((v163 + v160) & v180);
      uint64_t v193 = (unsigned __int8 *)((v163 + v162) & v180);
      unsigned int v194 = v193[v188];
      swift_bridgeObjectRetain();
      if (v194 >= 5)
      {
        if (v188 <= 3) {
          uint64_t v195 = v188;
        }
        else {
          uint64_t v195 = 4;
        }
        switch(v195)
        {
          case 1:
            int v196 = *v193;
            goto LABEL_201;
          case 2:
            int v196 = *(unsigned __int16 *)v193;
            goto LABEL_201;
          case 3:
            int v196 = *(unsigned __int16 *)v193 | (v193[2] << 16);
            goto LABEL_201;
          case 4:
            int v196 = *(_DWORD *)v193;
LABEL_201:
            int v233 = (v196 | ((v194 - 5) << (8 * v188))) + 5;
            unsigned int v234 = v196 + 5;
            if (v188 >= 4) {
              unsigned int v194 = v234;
            }
            else {
              unsigned int v194 = v233;
            }
            break;
          default:
            break;
        }
      }
      switch(v194)
      {
        case 1u:
          long long v235 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v154 + 16);
          v235(v192, v193, v185);
          v235((void *)(((unint64_t)v192 + v345) & v340), (unsigned __int8 *)((unint64_t)&v193[v345] & v340), v185);
          *((unsigned char *)v192 + v188) = 1;
          char v184 = 4;
          break;
        case 2u:
          *uint64_t v192 = *(void *)v193;
          *((unsigned char *)v192 + v188) = 2;
          goto LABEL_209;
        case 3u:
          *uint64_t v192 = *(void *)v193;
          v192[1] = *((void *)v193 + 1);
          *((unsigned char *)v192 + v188) = 3;
          swift_retain();
LABEL_209:
          swift_retain();
          char v184 = 4;
          break;
        case 4u:
          *uint64_t v192 = *(void *)v193;
          unint64_t v236 = ((unint64_t)v192 + v333) & v331;
          unint64_t v237 = (unint64_t)&v193[v333] & v331;
          uint64_t v238 = *(void (**)(unint64_t, unint64_t, uint64_t))(v335 + 16);
          swift_retain();
          v238(v236, v237, v336);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 16))((v334 + v236) & v332, (v334 + v237) & v332, v338);
          *((unsigned char *)v192 + v191) = 4;
          char v184 = 4;
          break;
        default:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v154 + 16))(v192, v193, v185);
          *((unsigned char *)v192 + v188) = 0;
          char v184 = 4;
          break;
      }
      goto LABEL_276;
    case 5u:
      uint64_t v316 = v159;
      uint64_t v321 = v161;
      uint64_t v341 = v181;
      uint64_t v346 = v166;
      uint64_t v326 = *(void *)(v46 + 32);
      uint64_t v328 = *(void *)(v326 - 8);
      uint64_t v351 = v174;
      uint64_t v197 = *(void *)v162;
      uint64_t v198 = *(void *)(v162 + 8);
      uint64_t v199 = v167;
      uint64_t v200 = (unsigned __int8 *)v162;
      char v201 = *(unsigned char *)(v162 + 16);
      sub_21F7652C0(v197, v198, v201);
      *(void *)uint64_t v160 = v197;
      *(void *)(v160 + 8) = v198;
      *(unsigned char *)(v160 + 16) = v201;
      unint64_t v162 = (unint64_t)v200;
      uint64_t v202 = v199;
      *(void *)(v160 + 24) = *(void *)(v162 + 24);
      uint64_t v324 = v160;
      uint64_t v203 = (void *)((v163 + v160) & v180);
      uint64_t v204 = (unsigned __int8 *)((v163 + v162) & v180);
      unsigned int v205 = v204[v199];
      swift_bridgeObjectRetain();
      if (v205 < 5)
      {
        uint64_t v207 = v328;
      }
      else
      {
        if (v199 <= 3) {
          uint64_t v206 = v199;
        }
        else {
          uint64_t v206 = 4;
        }
        uint64_t v207 = v328;
        switch(v206)
        {
          case 1:
            int v208 = *v204;
            goto LABEL_214;
          case 2:
            int v208 = *(unsigned __int16 *)v204;
            goto LABEL_214;
          case 3:
            int v208 = *(unsigned __int16 *)v204 | (*(unsigned __int8 *)(((v163 + v162) & v180) + 2) << 16);
            goto LABEL_214;
          case 4:
            int v208 = *(_DWORD *)v204;
LABEL_214:
            int v239 = (v208 | ((v205 - 5) << (8 * v199))) + 5;
            unsigned int v240 = v208 + 5;
            if (v199 >= 4) {
              unsigned int v205 = v240;
            }
            else {
              unsigned int v205 = v239;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v311 = v199;
      switch(v205)
      {
        case 1u:
          unint64_t v241 = *(void (**)(void *, unint64_t, uint64_t))(v207 + 16);
          v241(v203, (v163 + v162) & v180, v326);
          v241((void *)(((unint64_t)v203 + v346) & v341), (unint64_t)&v204[v346] & v341, v326);
          char v242 = 1;
          goto LABEL_223;
        case 2u:
          *uint64_t v203 = *(void *)v204;
          *((unsigned char *)v203 + v199) = 2;
          swift_retain();
          break;
        case 3u:
          *uint64_t v203 = *(void *)v204;
          v203[1] = *(void *)(((v163 + v162) & v180) + 8);
          *((unsigned char *)v203 + v199) = 3;
          swift_retain();
          swift_retain();
          break;
        case 4u:
          *uint64_t v203 = *(void *)v204;
          unint64_t v243 = ((unint64_t)v203 + v333) & v331;
          unint64_t v244 = (unint64_t)&v204[v333] & v331;
          uint64_t v307 = *(void (**)(unint64_t, unint64_t, uint64_t))(v335 + 16);
          swift_retain();
          v307(v243, v244, v336);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 16))((v334 + v243) & v332, (v334 + v244) & v332, v338);
          char v242 = 4;
LABEL_223:
          *((unsigned char *)v203 + v202) = v242;
          break;
        default:
          (*(void (**)(void *, unint64_t, uint64_t))(v207 + 16))(v203, (v163 + v162) & v180, v326);
          *((unsigned char *)v203 + v199) = 0;
          break;
      }
      unint64_t v245 = ((v316 | v157) + v169) & v180;
      unint64_t v246 = (((unint64_t)v321 | v157) + v169) & v180;
      uint64_t v247 = *(void *)v246;
      uint64_t v248 = *(void *)(v246 + 8);
      char v249 = *(unsigned char *)(v246 + 0x10);
      sub_21F7652C0(*(void *)v246, v248, v249);
      *(void *)unint64_t v245 = v247;
      *(void *)(v245 + 8) = v248;
      *(unsigned char *)(v245 + 16) = v249;
      *(void *)(v245 + 24) = *(void *)(v246 + 0x18);
      char v250 = (void *)((v163 + v245) & v180);
      unsigned int v251 = (unsigned __int8 *)((v163 + v246) & v180);
      unsigned int v252 = v251[v311];
      swift_bridgeObjectRetain();
      if (v252 < 5)
      {
        uint64_t v160 = v324;
        uint64_t v254 = v328;
      }
      else
      {
        if (v311 <= 3) {
          uint64_t v253 = v311;
        }
        else {
          uint64_t v253 = 4;
        }
        uint64_t v160 = v324;
        uint64_t v254 = v328;
        switch(v253)
        {
          case 1:
            int v255 = *v251;
            goto LABEL_266;
          case 2:
            int v255 = *(unsigned __int16 *)v251;
            goto LABEL_266;
          case 3:
            int v255 = *(unsigned __int16 *)v251 | (v251[2] << 16);
            goto LABEL_266;
          case 4:
            int v255 = *(_DWORD *)v251;
LABEL_266:
            int v292 = (v255 | ((v252 - 5) << (8 * v311))) + 5;
            unsigned int v293 = v255 + 5;
            if (v311 >= 4) {
              unsigned int v252 = v293;
            }
            else {
              unsigned int v252 = v292;
            }
            break;
          default:
            break;
        }
      }
      switch(v252)
      {
        case 1u:
          char v294 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v254 + 16);
          v294(v250, v251, v326);
          v294((void *)(((unint64_t)v250 + v346) & v341), (unsigned __int8 *)((unint64_t)&v251[v346] & v341), v326);
          *((unsigned char *)v250 + v311) = 1;
          char v184 = 5;
          break;
        case 2u:
          *char v250 = *(void *)v251;
          *((unsigned char *)v250 + v311) = 2;
          goto LABEL_274;
        case 3u:
          *char v250 = *(void *)v251;
          v250[1] = *((void *)v251 + 1);
          *((unsigned char *)v250 + v311) = 3;
          swift_retain();
LABEL_274:
          swift_retain();
          char v184 = 5;
          break;
        case 4u:
          *char v250 = *(void *)v251;
          unint64_t v295 = ((unint64_t)v250 + v333) & v331;
          unint64_t v296 = (unint64_t)&v251[v333] & v331;
          uint64_t v297 = *(void (**)(unint64_t, unint64_t, uint64_t))(v335 + 16);
          swift_retain();
          v297(v295, v296, v336);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 16))((v334 + v295) & v332, (v334 + v296) & v332, v338);
          *((unsigned char *)v250 + v311) = 4;
          char v184 = 5;
          break;
        default:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v254 + 16))(v250, v251, v326);
          *((unsigned char *)v250 + v311) = 0;
          char v184 = 5;
          break;
      }
      goto LABEL_276;
    case 6u:
      uint64_t v329 = v171;
      uint64_t v342 = v181;
      uint64_t v347 = v166;
      uint64_t v209 = *(void *)(v46 + 32);
      uint64_t v352 = v174;
      uint64_t v210 = *(void *)v162;
      uint64_t v211 = *(void *)(v162 + 8);
      uint64_t v212 = v167;
      uint64_t v213 = v160;
      char v214 = *(unsigned char *)(v162 + 16);
      sub_21F7652C0(*(void *)v162, v211, v214);
      *(void *)uint64_t v213 = v210;
      *(void *)(v213 + 8) = v211;
      *(unsigned char *)(v213 + 16) = v214;
      uint64_t v160 = v213;
      uint64_t v215 = v212;
      *(void *)(v160 + 24) = *(void *)(v162 + 24);
      uint64_t v216 = (void *)((v163 + v160) & v180);
      uint64_t v217 = (unsigned __int8 *)((v163 + v162) & v180);
      unsigned int v218 = v217[v212];
      swift_bridgeObjectRetain();
      if (v218 >= 5)
      {
        if (v212 <= 3) {
          uint64_t v219 = v212;
        }
        else {
          uint64_t v219 = 4;
        }
        switch(v219)
        {
          case 1:
            int v220 = *v217;
            goto LABEL_234;
          case 2:
            int v220 = *(unsigned __int16 *)v217;
            goto LABEL_234;
          case 3:
            int v220 = *(unsigned __int16 *)v217 | (v217[2] << 16);
            goto LABEL_234;
          case 4:
            int v220 = *(_DWORD *)v217;
LABEL_234:
            int v256 = (v220 | ((v218 - 5) << (8 * v212))) + 5;
            unsigned int v257 = v220 + 5;
            if (v212 >= 4) {
              unsigned int v218 = v257;
            }
            else {
              unsigned int v218 = v256;
            }
            break;
          default:
            break;
        }
      }
      switch(v218)
      {
        case 1u:
          unint64_t v261 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v154 + 16);
          v261(v216, v217, v209);
          v261((void *)(((unint64_t)v216 + v347) & v342), (unsigned __int8 *)((unint64_t)&v217[v347] & v342), v209);
          *((unsigned char *)v216 + v212) = 1;
          break;
        case 2u:
          void *v216 = *(void *)v217;
          *((unsigned char *)v216 + v212) = 2;
          swift_retain();
          break;
        case 3u:
          void *v216 = *(void *)v217;
          v216[1] = *((void *)v217 + 1);
          *((unsigned char *)v216 + v212) = 3;
          swift_retain();
          swift_retain();
          break;
        case 4u:
          void *v216 = *(void *)v217;
          unint64_t v258 = ((unint64_t)v216 + v333) & v331;
          unint64_t v259 = (unint64_t)&v217[v333] & v331;
          unint64_t v260 = *(void (**)(unint64_t, unint64_t, uint64_t))(v335 + 16);
          swift_retain();
          v260(v258, v259, v336);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 16))((v334 + v258) & v332, (v334 + v259) & v332, v338);
          *((unsigned char *)v216 + v215) = 4;
          break;
        default:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v154 + 16))(v216, v217, v209);
          *((unsigned char *)v216 + v212) = 0;
          break;
      }
      uint64_t v174 = v352;
      unint64_t v262 = (v329 + v160) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v263 = (v329 + v162) & 0xFFFFFFFFFFFFFFF8;
      *(unsigned char *)unint64_t v262 = *(unsigned char *)v263;
      long long v264 = (_OWORD *)(v262 + 8);
      uint64_t v265 = (_OWORD *)(v263 + 8);
      if (*(unsigned __int8 *)(v263 + 96) == 255)
      {
        long long v271 = *(_OWORD *)(v263 + 24);
        *long long v264 = *v265;
        *(_OWORD *)(v262 + 24) = v271;
        long long v272 = *(_OWORD *)(v263 + 40);
        long long v273 = *(_OWORD *)(v263 + 56);
        long long v274 = *(_OWORD *)(v263 + 72);
        *(_OWORD *)(v262 + 81) = *(_OWORD *)(v263 + 81);
        *(_OWORD *)(v262 + 56) = v273;
        *(_OWORD *)(v262 + 72) = v274;
        *(_OWORD *)(v262 + 40) = v272;
      }
      else
      {
        *long long v264 = *v265;
        long long v266 = *(_OWORD *)(v263 + 24);
        long long v267 = *(_OWORD *)(v263 + 40);
        long long v268 = *(_OWORD *)(v263 + 72);
        *(_OWORD *)(v262 + 56) = *(_OWORD *)(v263 + 56);
        *(_OWORD *)(v262 + 72) = v268;
        *(_OWORD *)(v262 + 24) = v266;
        *(_OWORD *)(v262 + 40) = v267;
        uint64_t v269 = *(void *)(v263 + 88);
        char v270 = *(unsigned char *)(v263 + 96);
        sub_21F829E74(v269, v270);
        *(void *)(v262 + 88) = v269;
        *(unsigned char *)(v262 + 96) = v270;
      }
      uint64_t v275 = *(void *)(v263 + 104);
      char v276 = *(unsigned char *)(v263 + 112);
      sub_21F829E74(v275, v276);
      *(void *)(v262 + 104) = v275;
      *(unsigned char *)(v262 + 112) = v276;
      char v184 = 6;
      goto LABEL_277;
    case 7u:
      uint64_t v330 = v171;
      uint64_t v343 = v181;
      uint64_t v348 = v166;
      uint64_t v221 = *(void *)(v46 + 32);
      uint64_t v351 = v174;
      uint64_t v222 = *(void *)v162;
      uint64_t v223 = *(void *)(v162 + 8);
      uint64_t v224 = v167;
      uint64_t v225 = v160;
      char v226 = *(unsigned char *)(v162 + 16);
      sub_21F7652C0(*(void *)v162, v223, v226);
      *(void *)uint64_t v225 = v222;
      *(void *)(v225 + 8) = v223;
      *(unsigned char *)(v225 + 16) = v226;
      uint64_t v160 = v225;
      uint64_t v227 = v224;
      *(void *)(v160 + 24) = *(void *)(v162 + 24);
      int v228 = (void *)((v163 + v160) & v180);
      unsigned int v229 = (unsigned __int8 *)((v163 + v162) & v180);
      unsigned int v230 = v229[v224];
      swift_bridgeObjectRetain();
      if (v230 >= 5)
      {
        if (v224 <= 3) {
          uint64_t v231 = v224;
        }
        else {
          uint64_t v231 = 4;
        }
        switch(v231)
        {
          case 1:
            int v232 = *v229;
            goto LABEL_250;
          case 2:
            int v232 = *(unsigned __int16 *)v229;
            goto LABEL_250;
          case 3:
            int v232 = *(unsigned __int16 *)v229 | (v229[2] << 16);
            goto LABEL_250;
          case 4:
            int v232 = *(_DWORD *)v229;
LABEL_250:
            int v277 = (v232 | ((v230 - 5) << (8 * v224))) + 5;
            unsigned int v278 = v232 + 5;
            if (v224 >= 4) {
              unsigned int v230 = v278;
            }
            else {
              unsigned int v230 = v277;
            }
            break;
          default:
            break;
        }
      }
      switch(v230)
      {
        case 1u:
          uint64_t v279 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v154 + 16);
          v279(v228, v229, v221);
          v279((void *)(((unint64_t)v228 + v348) & v343), (unsigned __int8 *)((unint64_t)&v229[v348] & v343), v221);
          *((unsigned char *)v228 + v224) = 1;
          break;
        case 2u:
          *int v228 = *(void *)v229;
          *((unsigned char *)v228 + v224) = 2;
          swift_retain();
          break;
        case 3u:
          *int v228 = *(void *)v229;
          v228[1] = *((void *)v229 + 1);
          *((unsigned char *)v228 + v224) = 3;
          swift_retain();
          swift_retain();
          break;
        case 4u:
          *int v228 = *(void *)v229;
          unint64_t v280 = ((unint64_t)v228 + v333) & v331;
          unint64_t v281 = (unint64_t)&v229[v333] & v331;
          unsigned int v282 = *(void (**)(unint64_t, unint64_t, uint64_t))(v335 + 16);
          swift_retain();
          v282(v280, v281, v336);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 16))((v334 + v280) & v332, (v334 + v281) & v332, v338);
          *((unsigned char *)v228 + v227) = 4;
          break;
        default:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v154 + 16))(v228, v229, v221);
          *((unsigned char *)v228 + v224) = 0;
          break;
      }
      unint64_t v283 = (v330 + v160) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v284 = (v330 + v162) & 0xFFFFFFFFFFFFFFF8;
      *(unsigned char *)unint64_t v283 = *(unsigned char *)v284;
      *(unsigned char *)(v283 + 1) = *(unsigned char *)(v284 + 1);
      *(unsigned char *)(v283 + 2) = *(unsigned char *)(v284 + 2);
      uint64_t v285 = *(void *)(v284 + 8);
      uint64_t v286 = *(void *)(v284 + 16);
      char v287 = *(unsigned char *)(v284 + 24);
      sub_21F770E44(v285, v286, v287);
      *(void *)(v283 + 8) = v285;
      *(void *)(v283 + 16) = v286;
      *(unsigned char *)(v283 + 24) = v287;
      unsigned int v288 = *(unsigned __int8 *)(v284 + 48);
      if (v288 <= 0xFB)
      {
        uint64_t v290 = *(void *)(v284 + 32);
        uint64_t v291 = *(void *)(v284 + 40);
        sub_21F770E44(v290, v291, *(unsigned char *)(v284 + 48));
        *(void *)(v283 + 32) = v290;
        *(void *)(v283 + 40) = v291;
        *(unsigned char *)(v283 + 48) = v288;
      }
      else
      {
        long long v289 = *(_OWORD *)(v284 + 32);
        *(unsigned char *)(v283 + 48) = *(unsigned char *)(v284 + 48);
        *(_OWORD *)(v283 + 32) = v289;
      }
      char v184 = 7;
LABEL_276:
      uint64_t v174 = v351;
LABEL_277:
      *(unsigned char *)(v160 + v174) = v184;
      break;
    default:
      uint64_t v182 = *(void *)v162;
      *(unsigned char *)(v160 + 8) = *(unsigned char *)(v162 + 8);
      *(void *)uint64_t v160 = v182;
      *(unsigned char *)(v160 + v174) = 0;
      break;
  }
  *(void *)(((v160 | 7) + v174 + 1) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v162 | 7) + v174 + 1) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return v349;
}

uint64_t sub_21F82D718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v432 = *(void *)(v3 + 24);
  uint64_t v8 = *(void *)(v432 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v429 = sub_21FA24310();
  uint64_t v10 = *(void *)(v429 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = sub_21FA24320();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v14 | v11;
  uint64_t v16 = v14 | v11 | v9;
  uint64_t v17 = v16 | 7;
  uint64_t v18 = (v16 | 7) + v7;
  uint64_t v19 = v18 + a1;
  uint64_t v20 = ~(v16 | 7);
  uint64_t v21 = (v18 + a1) & v20;
  uint64_t v22 = v18 + a2;
  uint64_t v23 = (unsigned __int8 *)(v22 & v20);
  uint64_t v430 = v13;
  uint64_t v431 = v12;
  uint64_t v427 = v14;
  uint64_t v428 = v10;
  if (v21 == (v22 & v20))
  {
    unint64_t v37 = *(void *)(v8 + 64);
    uint64_t v38 = *(void *)(v10 + 64);
    uint64_t v39 = *(void *)(v13 + 64);
    uint64_t v40 = (v16 + 32) & v20;
    if (((v37 + v9) & ~v9) + v37 > v37) {
      v37 += (v37 + v9) & ~v9;
    }
    uint64_t v424 = ~v11;
    uint64_t v425 = *(void *)(v10 + 64);
    uint64_t v423 = v11 + 8;
    uint64_t v426 = ~v14;
    unint64_t v41 = ((((v11 + 8) & ~v11) + v14 + v38) & ~v14) + v39;
    if (v37 <= v41) {
      unint64_t v37 = ((((v11 + 8) & ~v11) + v14 + v38) & ~v14) + v39;
    }
    if (v37 <= 0x10) {
      unint64_t v37 = 16;
    }
    unint64_t v42 = (v40 | 1) + v37;
    unint64_t v43 = ((v42 + v17) & v20) + v42;
    if (v42 > v43) {
      unint64_t v43 = v42;
    }
    unint64_t v44 = (v42 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v43 <= v44 + 113) {
      unint64_t v43 = v44 + 113;
    }
    unint64_t v45 = v44 + 49;
    if (v43 > v45) {
      unint64_t v45 = v43;
    }
    if (v45 <= 0x19) {
      uint64_t v32 = 25;
    }
    else {
      uint64_t v32 = v45;
    }
  }
  else
  {
    uint64_t v393 = v22;
    uint64_t v402 = v19;
    uint64_t v438 = v16 + 32;
    uint64_t v24 = (v16 + 32) & v20;
    uint64_t v404 = v8;
    unint64_t v25 = *(void *)(v8 + 64);
    uint64_t v392 = v25 + v9;
    unint64_t v26 = ((v25 + v9) & ~v9) + v25;
    unint64_t v394 = v25;
    if (v26 <= v25) {
      unint64_t v26 = *(void *)(v8 + 64);
    }
    uint64_t v424 = ~v11;
    uint64_t v423 = v11 + 8;
    uint64_t v425 = *(void *)(v10 + 64);
    uint64_t v426 = ~v14;
    unint64_t v27 = ((((v11 + 8) & ~v11) + v14 + v425) & ~v14) + *(void *)(v13 + 64);
    if (v26 <= v27) {
      unint64_t v26 = ((((v11 + 8) & ~v11) + v14 + v425) & ~v14) + *(void *)(v13 + 64);
    }
    if (v26 <= 0x10) {
      unint64_t v26 = 16;
    }
    unint64_t v434 = v26;
    unint64_t v28 = (v24 | 1) + v26;
    unint64_t v29 = ((v28 + v17) & v20) + v28;
    if (v28 > v29) {
      unint64_t v29 = v28;
    }
    unint64_t v30 = (v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v29 <= v30 + 113) {
      unint64_t v29 = v30 + 113;
    }
    unint64_t v31 = v30 + 49;
    if (v29 <= v31) {
      unint64_t v29 = v31;
    }
    if (v29 <= 0x19) {
      uint64_t v32 = 25;
    }
    else {
      uint64_t v32 = v29;
    }
    unsigned int v33 = *(unsigned __int8 *)(v21 + v32);
    unsigned int v34 = v33 - 8;
    if (v33 >= 8)
    {
      if (v32 <= 3) {
        uint64_t v35 = v32;
      }
      else {
        uint64_t v35 = 4;
      }
      switch(v35)
      {
        case 1:
          int v36 = *(unsigned __int8 *)v21;
          if (v32 < 4) {
            goto LABEL_40;
          }
          goto LABEL_44;
        case 2:
          int v36 = *(unsigned __int16 *)v21;
          if (v32 < 4) {
            goto LABEL_40;
          }
          goto LABEL_44;
        case 3:
          int v36 = *(unsigned __int16 *)v21 | (*(unsigned __int8 *)(v21 + 2) << 16);
          if (v32 < 4) {
            goto LABEL_40;
          }
          goto LABEL_44;
        case 4:
          int v36 = *(_DWORD *)v21;
          if (v32 < 4) {
LABEL_40:
          }
            unsigned int v33 = (v36 | (v34 << (8 * v32))) + 8;
          else {
LABEL_44:
          }
            unsigned int v33 = v36 + 8;
          break;
        default:
          break;
      }
    }
    unint64_t v418 = v27;
    uint64_t v420 = v14 | v11;
    uint64_t v400 = ~v9;
    unint64_t v436 = (unint64_t)v23;
    switch(v33)
    {
      case 2u:
        swift_release();
        break;
      case 3u:
        swift_release();
        swift_release();
        break;
      case 4u:
        sub_21F7656A8(*(void *)v21, *(void *)(v21 + 8), *(unsigned char *)(v21 + 16));
        swift_bridgeObjectRelease();
        uint64_t v46 = (unsigned __int8 *)((v438 + v21) & v20);
        unsigned int v47 = v46[v434];
        unsigned int v48 = v47 - 5;
        if (v47 >= 5)
        {
          if (v434 <= 3) {
            uint64_t v49 = v434;
          }
          else {
            uint64_t v49 = 4;
          }
          switch(v49)
          {
            case 1:
              int v50 = *v46;
              goto LABEL_75;
            case 2:
              int v50 = *(unsigned __int16 *)v46;
              goto LABEL_75;
            case 3:
              int v50 = *(unsigned __int16 *)v46 | (*(unsigned __int8 *)(((v438 + v21) & v20) + 2) << 16);
              goto LABEL_75;
            case 4:
              int v50 = *(_DWORD *)v46;
LABEL_75:
              if (v434 < 4) {
                unsigned int v47 = (v50 | (v48 << (8 * v434))) + 5;
              }
              else {
                unsigned int v47 = v50 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v47)
        {
          case 1u:
            uint64_t v390 = v3;
            uint64_t v406 = a1;
            int v66 = *(void (**)(uint64_t, uint64_t))(v404 + 8);
            uint64_t v67 = v432;
            v66((v438 + v21) & v20, v432);
            uint64_t v68 = &v46[v9 + v394];
            goto LABEL_139;
          case 2u:
            goto LABEL_137;
          case 3u:
            goto LABEL_136;
          case 4u:
            goto LABEL_140;
          default:
            goto LABEL_135;
        }
      case 5u:
        sub_21F7656A8(*(void *)v21, *(void *)(v21 + 8), *(unsigned char *)(v21 + 16));
        swift_bridgeObjectRelease();
        uint64_t v51 = (unsigned __int8 *)((v438 + v21) & v20);
        unsigned int v52 = v51[v434];
        unsigned int v53 = v52 - 5;
        if (v52 >= 5)
        {
          if (v434 <= 3) {
            uint64_t v54 = v434;
          }
          else {
            uint64_t v54 = 4;
          }
          switch(v54)
          {
            case 1:
              int v55 = *v51;
              goto LABEL_83;
            case 2:
              int v55 = *(unsigned __int16 *)v51;
              goto LABEL_83;
            case 3:
              int v55 = *(unsigned __int16 *)v51 | (*(unsigned __int8 *)(((v438 + v21) & v20) + 2) << 16);
              goto LABEL_83;
            case 4:
              int v55 = *(_DWORD *)v51;
LABEL_83:
              if (v434 < 4) {
                unsigned int v52 = (v55 | (v53 << (8 * v434))) + 5;
              }
              else {
                unsigned int v52 = v55 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v52)
        {
          case 1u:
            uint64_t v407 = a1;
            int v69 = *(void (**)(uint64_t, uint64_t))(v404 + 8);
            v69((v438 + v21) & v20, v432);
            v69((unint64_t)&v51[v9 + v394] & v400, v432);
            a1 = v407;
            break;
          case 2u:
            swift_release();
            break;
          case 3u:
            swift_release();
            swift_release();
            break;
          case 4u:
            swift_release();
            unint64_t v70 = (unint64_t)&v51[v423] & v424;
            (*(void (**)(unint64_t, uint64_t))(v428 + 8))(v70, v429);
            (*(void (**)(unint64_t, uint64_t))(v430 + 8))((v70 + v427 + v425) & v426, v431);
            break;
          default:
            (*(void (**)(uint64_t, uint64_t))(v404 + 8))((v438 + v21) & v20, v432);
            break;
        }
        uint64_t v71 = ((v402 | v17) + v28) & v20;
        sub_21F7656A8(*(void *)v71, *(void *)(v71 + 8), *(unsigned char *)(v71 + 0x10));
        swift_bridgeObjectRelease();
        uint64_t v46 = (unsigned __int8 *)((v438 + v71) & v20);
        unsigned int v72 = v46[v434];
        unsigned int v73 = v72 - 5;
        if (v72 >= 5)
        {
          if (v434 <= 3) {
            uint64_t v74 = v434;
          }
          else {
            uint64_t v74 = 4;
          }
          switch(v74)
          {
            case 1:
              int v75 = *v46;
              goto LABEL_131;
            case 2:
              int v75 = *(unsigned __int16 *)v46;
              goto LABEL_131;
            case 3:
              int v75 = *(unsigned __int16 *)v46 | (*(unsigned __int8 *)(((v438 + v71) & v20) + 2) << 16);
              goto LABEL_131;
            case 4:
              int v75 = *(_DWORD *)v46;
LABEL_131:
              if (v434 < 4) {
                unsigned int v72 = (v75 | (v73 << (8 * v434))) + 5;
              }
              else {
                unsigned int v72 = v75 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v72)
        {
          case 1u:
            uint64_t v390 = v3;
            uint64_t v406 = a1;
            int v66 = *(void (**)(uint64_t, uint64_t))(v404 + 8);
            uint64_t v67 = v432;
            v66((uint64_t)v46, v432);
            uint64_t v68 = &v46[v392];
LABEL_139:
            v66((unint64_t)v68 & v400, v67);
            a1 = v406;
            uint64_t v3 = v390;
            break;
          case 2u:
            goto LABEL_137;
          case 3u:
LABEL_136:
            swift_release();
LABEL_137:
            swift_release();
            break;
          case 4u:
LABEL_140:
            swift_release();
            unint64_t v84 = (unint64_t)&v46[v423] & v424;
            (*(void (**)(unint64_t, uint64_t))(v428 + 8))(v84, v429);
            (*(void (**)(unint64_t, uint64_t))(v430 + 8))((v425 + v427 + v84) & v426, v431);
            break;
          default:
LABEL_135:
            (*(void (**)(unsigned __int8 *, uint64_t))(v404 + 8))(v46, v432);
            break;
        }
        uint64_t v23 = (unsigned __int8 *)v436;
        break;
      case 6u:
        sub_21F7656A8(*(void *)v21, *(void *)(v21 + 8), *(unsigned char *)(v21 + 16));
        swift_bridgeObjectRelease();
        unsigned int v56 = (unsigned __int8 *)((v438 + v21) & v20);
        unsigned int v57 = v56[v434];
        unsigned int v58 = v57 - 5;
        if (v57 >= 5)
        {
          if (v434 <= 3) {
            uint64_t v59 = v434;
          }
          else {
            uint64_t v59 = 4;
          }
          switch(v59)
          {
            case 1:
              int v60 = *v56;
              goto LABEL_101;
            case 2:
              int v60 = *(unsigned __int16 *)v56;
              goto LABEL_101;
            case 3:
              int v60 = *(unsigned __int16 *)v56 | (*(unsigned __int8 *)(((v438 + v21) & v20) + 2) << 16);
              goto LABEL_101;
            case 4:
              int v60 = *(_DWORD *)v56;
LABEL_101:
              if (v434 < 4) {
                unsigned int v57 = (v60 | (v58 << (8 * v434))) + 5;
              }
              else {
                unsigned int v57 = v60 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v57)
        {
          case 1u:
            uint64_t v408 = a1;
            unint64_t v77 = *(void (**)(uint64_t, uint64_t))(v404 + 8);
            v77((v438 + v21) & v20, v432);
            v77((unint64_t)&v56[v9 + v394] & v400, v432);
            a1 = v408;
            break;
          case 2u:
            swift_release();
            break;
          case 3u:
            swift_release();
            swift_release();
            break;
          case 4u:
            swift_release();
            unint64_t v76 = (unint64_t)&v56[v423] & v424;
            (*(void (**)(unint64_t, uint64_t))(v428 + 8))(v76, v429);
            (*(void (**)(unint64_t, uint64_t))(v430 + 8))((v76 + v427 + v425) & v426, v431);
            break;
          default:
            (*(void (**)(uint64_t, uint64_t))(v404 + 8))((v438 + v21) & v20, v432);
            break;
        }
        uint64_t v23 = (unsigned __int8 *)v436;
        unint64_t v78 = ((v21 | 7) + v28) & 0xFFFFFFFFFFFFFFF8;
        int v79 = *(unsigned __int8 *)(v78 + 96);
        if (v79 != 255) {
          sub_21F82B5F8(*(void *)(v78 + 88), v79 & 1);
        }
        sub_21F82B5F8(*(void *)(v78 + 104), *(unsigned char *)(v78 + 112));
        break;
      case 7u:
        sub_21F7656A8(*(void *)v21, *(void *)(v21 + 8), *(unsigned char *)(v21 + 16));
        swift_bridgeObjectRelease();
        uint64_t v61 = (unsigned __int8 *)((v438 + v21) & v20);
        unsigned int v62 = v61[v434];
        unsigned int v63 = v62 - 5;
        if (v62 >= 5)
        {
          if (v434 <= 3) {
            uint64_t v64 = v434;
          }
          else {
            uint64_t v64 = 4;
          }
          switch(v64)
          {
            case 1:
              int v65 = *v61;
              goto LABEL_117;
            case 2:
              int v65 = *(unsigned __int16 *)v61;
              goto LABEL_117;
            case 3:
              int v65 = *(unsigned __int16 *)v61 | (*(unsigned __int8 *)(((v438 + v21) & v20) + 2) << 16);
              goto LABEL_117;
            case 4:
              int v65 = *(_DWORD *)v61;
LABEL_117:
              if (v434 < 4) {
                unsigned int v62 = (v65 | (v63 << (8 * v434))) + 5;
              }
              else {
                unsigned int v62 = v65 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v62)
        {
          case 1u:
            uint64_t v409 = a1;
            uint64_t v80 = *(void (**)(uint64_t, uint64_t))(v404 + 8);
            v80((v438 + v21) & v20, v432);
            v80((unint64_t)&v61[v9 + v394] & v400, v432);
            a1 = v409;
            break;
          case 2u:
            swift_release();
            break;
          case 3u:
            swift_release();
            swift_release();
            break;
          case 4u:
            swift_release();
            unint64_t v81 = (unint64_t)&v61[v423] & v424;
            (*(void (**)(unint64_t, uint64_t))(v428 + 8))(v81, v429);
            (*(void (**)(unint64_t, uint64_t))(v430 + 8))((v81 + v427 + v425) & v426, v431);
            break;
          default:
            (*(void (**)(uint64_t, uint64_t))(v404 + 8))((v438 + v21) & v20, v432);
            break;
        }
        unint64_t v82 = ((v21 | 7) + v28) & 0xFFFFFFFFFFFFFFF8;
        sub_21F770E38(*(void *)(v82 + 8), *(void *)(v82 + 16), *(unsigned char *)(v82 + 24));
        unsigned int v83 = *(unsigned __int8 *)(v82 + 48);
        uint64_t v23 = (unsigned __int8 *)v436;
        if (v83 <= 0xFB) {
          sub_21F770E38(*(void *)(v82 + 32), *(void *)(v82 + 40), v83);
        }
        break;
      default:
        break;
    }
    unsigned int v85 = v23[v32];
    unsigned int v86 = v85 - 8;
    if (v85 >= 8)
    {
      if (v32 <= 3) {
        uint64_t v87 = v32;
      }
      else {
        uint64_t v87 = 4;
      }
      switch(v87)
      {
        case 1:
          int v88 = *v23;
          if (v32 < 4) {
            goto LABEL_150;
          }
          goto LABEL_154;
        case 2:
          int v88 = *(unsigned __int16 *)v23;
          if (v32 < 4) {
            goto LABEL_150;
          }
          goto LABEL_154;
        case 3:
          int v88 = *(unsigned __int16 *)v23 | (v23[2] << 16);
          if (v32 < 4) {
            goto LABEL_150;
          }
          goto LABEL_154;
        case 4:
          int v88 = *(_DWORD *)v23;
          if (v32 < 4) {
LABEL_150:
          }
            unsigned int v85 = (v88 | (v86 << (8 * v32))) + 8;
          else {
LABEL_154:
          }
            unsigned int v85 = v88 + 8;
          break;
        default:
          break;
      }
    }
    switch(v85)
    {
      case 1u:
        long long v90 = *(_OWORD *)v23;
        *(_OWORD *)(v21 + 9) = *(_OWORD *)(v23 + 9);
        *(_OWORD *)uint64_t v21 = v90;
        *(unsigned char *)(v21 + v32) = 1;
        goto LABEL_269;
      case 2u:
        *(void *)uint64_t v21 = *(void *)v23;
        *(unsigned char *)(v21 + v32) = 2;
        swift_retain();
        goto LABEL_269;
      case 3u:
        *(void *)uint64_t v21 = *(void *)v23;
        *(void *)(v21 + 8) = *((void *)v23 + 1);
        *(unsigned char *)(v21 + v32) = 3;
        swift_retain();
        swift_retain();
        goto LABEL_269;
      case 4u:
        uint64_t v91 = v3;
        uint64_t v410 = a1;
        unsigned int v92 = v23;
        uint64_t v93 = *(void *)v23;
        uint64_t v94 = *((void *)v92 + 1);
        char v95 = v92[16];
        sub_21F7652C0(v93, v94, v95);
        *(void *)uint64_t v21 = v93;
        *(void *)(v21 + 8) = v94;
        *(unsigned char *)(v21 + 16) = v95;
        *(void *)(v21 + 24) = *((void *)v92 + 3);
        uint64_t v96 = (void *)((v438 + v21) & v20);
        unint64_t v97 = (unsigned __int8 *)((unint64_t)&v92[v438] & v20);
        unsigned int v98 = v97[v434];
        swift_bridgeObjectRetain();
        if (v98 < 5)
        {
          uint64_t v3 = v91;
          unint64_t v100 = v434;
        }
        else
        {
          if (v434 <= 3) {
            uint64_t v99 = v434;
          }
          else {
            uint64_t v99 = 4;
          }
          unint64_t v100 = v434;
          uint64_t v3 = v91;
          switch(v99)
          {
            case 1:
              int v101 = *v97;
              goto LABEL_190;
            case 2:
              int v101 = *(unsigned __int16 *)v97;
              goto LABEL_190;
            case 3:
              int v101 = *(unsigned __int16 *)v97 | (v97[2] << 16);
              goto LABEL_190;
            case 4:
              int v101 = *(_DWORD *)v97;
LABEL_190:
              if (v434 < 4) {
                unsigned int v98 = (v101 | ((v98 - 5) << (8 * v434))) + 5;
              }
              else {
                unsigned int v98 = v101 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v98)
        {
          case 1u:
            long long v132 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v404 + 16);
            unint64_t v133 = v100;
            v132(v96, v97, v432);
            v132((void *)(((unint64_t)v96 + v9 + v394) & v400), (unsigned __int8 *)((unint64_t)&v97[v9 + v394] & v400), v432);
            char v134 = 1;
            goto LABEL_199;
          case 2u:
            *uint64_t v96 = *(void *)v97;
            *((unsigned char *)v96 + v100) = 2;
            swift_retain();
            break;
          case 3u:
            *uint64_t v96 = *(void *)v97;
            v96[1] = *((void *)v97 + 1);
            *((unsigned char *)v96 + v100) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *uint64_t v96 = *(void *)v97;
            unint64_t v135 = ((unint64_t)v96 + v423) & v424;
            unint64_t v136 = (unint64_t)&v97[v423] & v424;
            unint64_t v137 = *(void (**)(unint64_t, unint64_t, uint64_t))(v428 + 16);
            unint64_t v133 = v100;
            swift_retain();
            v137(v135, v136, v429);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v430 + 16))((v135 + v427 + v425) & v426, (v136 + v427 + v425) & v426, v431);
            char v134 = 4;
LABEL_199:
            *((unsigned char *)v96 + v133) = v134;
            break;
          default:
            unint64_t v131 = v100;
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v404 + 16))(v96, v97, v432);
            *((unsigned char *)v96 + v131) = 0;
            break;
        }
        char v138 = 4;
        goto LABEL_267;
      case 5u:
        uint64_t v391 = v3;
        uint64_t v410 = a1;
        unint64_t v102 = v23;
        uint64_t v103 = *(void *)v23;
        uint64_t v104 = *((void *)v102 + 1);
        char v105 = v102[16];
        sub_21F7652C0(v103, v104, v105);
        *(void *)uint64_t v21 = v103;
        *(void *)(v21 + 8) = v104;
        *(unsigned char *)(v21 + 16) = v105;
        *(void *)(v21 + 24) = *((void *)v102 + 3);
        uint64_t v106 = (void *)((v438 + v21) & v20);
        uint64_t v107 = (unsigned __int8 *)((unint64_t)&v102[v438] & v20);
        unsigned int v108 = v107[v434];
        swift_bridgeObjectRetain();
        if (v108 >= 5)
        {
          if (v434 <= 3) {
            uint64_t v109 = v434;
          }
          else {
            uint64_t v109 = 4;
          }
          switch(v109)
          {
            case 1:
              int v110 = *v107;
              goto LABEL_204;
            case 2:
              int v110 = *(unsigned __int16 *)v107;
              goto LABEL_204;
            case 3:
              int v110 = *(unsigned __int16 *)v107 | (v107[2] << 16);
              goto LABEL_204;
            case 4:
              int v110 = *(_DWORD *)v107;
LABEL_204:
              if (v434 < 4) {
                unsigned int v108 = (v110 | ((v108 - 5) << (8 * v434))) + 5;
              }
              else {
                unsigned int v108 = v110 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v108)
        {
          case 1u:
            long long v139 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v404 + 16);
            v139(v106, v107, v432);
            v139((void *)(((unint64_t)v106 + v9 + v394) & v400), (unsigned __int8 *)((unint64_t)&v107[v9 + v394] & v400), v432);
            char v140 = 1;
            goto LABEL_213;
          case 2u:
            *uint64_t v106 = *(void *)v107;
            *((unsigned char *)v106 + v434) = 2;
            swift_retain();
            break;
          case 3u:
            *uint64_t v106 = *(void *)v107;
            *(void *)(((v438 + v21) & v20) + 8) = *((void *)v107 + 1);
            *((unsigned char *)v106 + v434) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *uint64_t v106 = *(void *)v107;
            unint64_t v141 = ((unint64_t)v106 + v423) & v424;
            unint64_t v142 = (unint64_t)&v107[v423] & v424;
            uint64_t v143 = *(void (**)(unint64_t, unint64_t, uint64_t))(v428 + 16);
            swift_retain();
            v143(v141, v142, v429);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v430 + 16))((v141 + v427 + v425) & v426, (v142 + v427 + v425) & v426, v431);
            char v140 = 4;
LABEL_213:
            *((unsigned char *)v106 + v434) = v140;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v404 + 16))(v106, v107, v432);
            *((unsigned char *)v106 + v434) = 0;
            break;
        }
        uint64_t v144 = ((v402 | v17) + v28) & v20;
        uint64_t v145 = ((v393 | v17) + v28) & v20;
        uint64_t v146 = *(void *)v145;
        uint64_t v147 = *(void *)(v145 + 8);
        char v148 = *(unsigned char *)(v145 + 0x10);
        sub_21F7652C0(*(void *)v145, v147, v148);
        *(void *)uint64_t v144 = v146;
        *(void *)(v144 + 8) = v147;
        *(unsigned char *)(v144 + 16) = v148;
        *(void *)(v144 + 24) = *(void *)(v145 + 0x18);
        unsigned int v149 = (void *)((v438 + v144) & v20);
        unint64_t v150 = (unsigned __int8 *)((v438 + v145) & v20);
        unsigned int v151 = v150[v434];
        swift_bridgeObjectRetain();
        if (v151 < 5)
        {
          uint64_t v3 = v391;
        }
        else
        {
          if (v434 <= 3) {
            uint64_t v152 = v434;
          }
          else {
            uint64_t v152 = 4;
          }
          uint64_t v3 = v391;
          switch(v152)
          {
            case 1:
              int v153 = *v150;
              goto LABEL_256;
            case 2:
              int v153 = *(unsigned __int16 *)v150;
              goto LABEL_256;
            case 3:
              int v153 = *(unsigned __int16 *)v150 | (v150[2] << 16);
              goto LABEL_256;
            case 4:
              int v153 = *(_DWORD *)v150;
LABEL_256:
              if (v434 < 4) {
                unsigned int v151 = (v153 | ((v151 - 5) << (8 * v434))) + 5;
              }
              else {
                unsigned int v151 = v153 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v151)
        {
          case 1u:
            char v190 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v404 + 16);
            v190(v149, v150, v432);
            v190((void *)(((unint64_t)v149 + v392) & v400), (unsigned __int8 *)((unint64_t)&v150[v392] & v400), v432);
            char v191 = 1;
            goto LABEL_265;
          case 2u:
            *unsigned int v149 = *(void *)v150;
            *((unsigned char *)v149 + v434) = 2;
            swift_retain();
            break;
          case 3u:
            *unsigned int v149 = *(void *)v150;
            v149[1] = *((void *)v150 + 1);
            *((unsigned char *)v149 + v434) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *unsigned int v149 = *(void *)v150;
            unint64_t v192 = ((unint64_t)v149 + v423) & v424;
            unint64_t v193 = (unint64_t)&v150[v423] & v424;
            unsigned int v194 = *(void (**)(unint64_t, unint64_t, uint64_t))(v428 + 16);
            swift_retain();
            v194(v192, v193, v429);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v430 + 16))((v425 + v427 + v192) & v426, (v425 + v427 + v193) & v426, v431);
            char v191 = 4;
LABEL_265:
            *((unsigned char *)v149 + v434) = v191;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v404 + 16))(v149, v150, v432);
            *((unsigned char *)v149 + v434) = 0;
            break;
        }
        char v138 = 5;
LABEL_267:
        *(unsigned char *)(v21 + v32) = v138;
        a1 = v410;
        goto LABEL_268;
      case 6u:
        uint64_t v111 = v3;
        uint64_t v411 = a1;
        uint64_t v112 = *(void *)v23;
        uint64_t v113 = *((void *)v23 + 1);
        char v114 = v23[16];
        sub_21F7652C0(*(void *)v23, v113, v114);
        *(void *)uint64_t v21 = v112;
        *(void *)(v21 + 8) = v113;
        *(unsigned char *)(v21 + 16) = v114;
        *(void *)(v21 + 24) = *((void *)v23 + 3);
        uint64_t v115 = (void *)((v438 + v21) & v20);
        int v116 = (unsigned __int8 *)((unint64_t)&v23[v438] & v20);
        unsigned int v117 = v116[v434];
        swift_bridgeObjectRetain();
        if (v117 < 5)
        {
          uint64_t v3 = v111;
          unint64_t v119 = v434;
        }
        else
        {
          if (v434 <= 3) {
            uint64_t v118 = v434;
          }
          else {
            uint64_t v118 = 4;
          }
          unint64_t v119 = v434;
          uint64_t v3 = v111;
          switch(v118)
          {
            case 1:
              int v120 = *v116;
              goto LABEL_224;
            case 2:
              int v120 = *(unsigned __int16 *)v116;
              goto LABEL_224;
            case 3:
              int v120 = *(unsigned __int16 *)v116 | (v116[2] << 16);
              goto LABEL_224;
            case 4:
              int v120 = *(_DWORD *)v116;
LABEL_224:
              if (v434 < 4) {
                unsigned int v117 = (v120 | ((v117 - 5) << (8 * v434))) + 5;
              }
              else {
                unsigned int v117 = v120 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v117)
        {
          case 1u:
            uint64_t v159 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v404 + 16);
            v159(v115, v116, v432);
            v159((void *)(((unint64_t)v115 + v9 + v394) & v400), (unsigned __int8 *)((unint64_t)&v116[v9 + v394] & v400), v432);
            *((unsigned char *)v115 + v434) = 1;
            break;
          case 2u:
            *uint64_t v115 = *(void *)v116;
            *((unsigned char *)v115 + v119) = 2;
            swift_retain();
            break;
          case 3u:
            *uint64_t v115 = *(void *)v116;
            v115[1] = *((void *)v116 + 1);
            *((unsigned char *)v115 + v119) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *uint64_t v115 = *(void *)v116;
            unint64_t v155 = ((unint64_t)v115 + v423) & v424;
            unint64_t v156 = (unint64_t)&v116[v423] & v424;
            uint64_t v157 = *(void (**)(unint64_t, unint64_t, uint64_t))(v428 + 16);
            unint64_t v158 = v119;
            swift_retain();
            v157(v155, v156, v429);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v430 + 16))((v155 + v427 + v425) & v426, (v156 + v427 + v425) & v426, v431);
            *((unsigned char *)v115 + v158) = 4;
            break;
          default:
            unint64_t v154 = v119;
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v404 + 16))(v115, v116, v432);
            *((unsigned char *)v115 + v154) = 0;
            break;
        }
        a1 = v411;
        unint64_t v160 = ((v21 | 7) + v28) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v161 = ((v436 | 7) + v28) & 0xFFFFFFFFFFFFFFF8;
        *(unsigned char *)unint64_t v160 = *(unsigned char *)v161;
        unint64_t v162 = (_OWORD *)(v160 + 8);
        uint64_t v163 = (_OWORD *)(v161 + 8);
        if (*(unsigned __int8 *)(v161 + 96) == 255)
        {
          long long v169 = *(_OWORD *)(v161 + 24);
          *unint64_t v162 = *v163;
          *(_OWORD *)(v160 + 24) = v169;
          long long v170 = *(_OWORD *)(v161 + 40);
          long long v171 = *(_OWORD *)(v161 + 56);
          long long v172 = *(_OWORD *)(v161 + 72);
          *(_OWORD *)(v160 + 81) = *(_OWORD *)(v161 + 81);
          *(_OWORD *)(v160 + 56) = v171;
          *(_OWORD *)(v160 + 72) = v172;
          *(_OWORD *)(v160 + 40) = v170;
        }
        else
        {
          *unint64_t v162 = *v163;
          long long v164 = *(_OWORD *)(v161 + 24);
          long long v165 = *(_OWORD *)(v161 + 40);
          long long v166 = *(_OWORD *)(v161 + 72);
          *(_OWORD *)(v160 + 56) = *(_OWORD *)(v161 + 56);
          *(_OWORD *)(v160 + 72) = v166;
          *(_OWORD *)(v160 + 24) = v164;
          *(_OWORD *)(v160 + 40) = v165;
          uint64_t v167 = *(void *)(v161 + 88);
          char v168 = *(unsigned char *)(v161 + 96);
          sub_21F829E74(v167, v168);
          *(void *)(v160 + 88) = v167;
          *(unsigned char *)(v160 + 96) = v168;
        }
        uint64_t v173 = *(void *)(v161 + 104);
        char v174 = *(unsigned char *)(v161 + 112);
        sub_21F829E74(v173, v174);
        *(void *)(v160 + 104) = v173;
        *(unsigned char *)(v160 + 112) = v174;
        *(unsigned char *)(v21 + v32) = 6;
LABEL_268:
        uint64_t v23 = (unsigned __int8 *)v436;
        goto LABEL_269;
      case 7u:
        uint64_t v121 = v3;
        uint64_t v412 = a1;
        uint64_t v122 = *(void *)v23;
        uint64_t v123 = *((void *)v23 + 1);
        char v124 = v23[16];
        sub_21F7652C0(*(void *)v23, v123, v124);
        *(void *)uint64_t v21 = v122;
        *(void *)(v21 + 8) = v123;
        *(unsigned char *)(v21 + 16) = v124;
        *(void *)(v21 + 24) = *((void *)v23 + 3);
        long long v125 = (void *)((v438 + v21) & v20);
        long long v126 = (unsigned __int8 *)((unint64_t)&v23[v438] & v20);
        unsigned int v127 = v126[v434];
        swift_bridgeObjectRetain();
        if (v127 < 5)
        {
          uint64_t v3 = v121;
          unint64_t v129 = v434;
        }
        else
        {
          if (v434 <= 3) {
            uint64_t v128 = v434;
          }
          else {
            uint64_t v128 = 4;
          }
          unint64_t v129 = v434;
          uint64_t v3 = v121;
          switch(v128)
          {
            case 1:
              int v130 = *v126;
              goto LABEL_240;
            case 2:
              int v130 = *(unsigned __int16 *)v126;
              goto LABEL_240;
            case 3:
              int v130 = *(unsigned __int16 *)v126 | (v126[2] << 16);
              goto LABEL_240;
            case 4:
              int v130 = *(_DWORD *)v126;
LABEL_240:
              if (v434 < 4) {
                unsigned int v127 = (v130 | ((v127 - 5) << (8 * v434))) + 5;
              }
              else {
                unsigned int v127 = v130 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v127)
        {
          case 1u:
            unsigned int v176 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v404 + 16);
            v176(v125, v126, v432);
            v176((void *)(((unint64_t)v125 + v9 + v394) & v400), (unsigned __int8 *)((unint64_t)&v126[v9 + v394] & v400), v432);
            *((unsigned char *)v125 + v434) = 1;
            break;
          case 2u:
            void *v125 = *(void *)v126;
            *((unsigned char *)v125 + v129) = 2;
            swift_retain();
            break;
          case 3u:
            void *v125 = *(void *)v126;
            v125[1] = *((void *)v126 + 1);
            *((unsigned char *)v125 + v129) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            void *v125 = *(void *)v126;
            unint64_t v177 = ((unint64_t)v125 + v423) & v424;
            unint64_t v178 = (unint64_t)&v126[v423] & v424;
            int v179 = *(void (**)(unint64_t, unint64_t, uint64_t))(v428 + 16);
            unint64_t v180 = v129;
            swift_retain();
            v179(v177, v178, v429);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v430 + 16))((v177 + v427 + v425) & v426, (v178 + v427 + v425) & v426, v431);
            *((unsigned char *)v125 + v180) = 4;
            break;
          default:
            unint64_t v175 = v129;
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v404 + 16))(v125, v126, v432);
            *((unsigned char *)v125 + v175) = 0;
            break;
        }
        unint64_t v181 = ((v21 | 7) + v28) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v182 = ((v436 | 7) + v28) & 0xFFFFFFFFFFFFFFF8;
        *(unsigned char *)unint64_t v181 = *(unsigned char *)v182;
        *(unsigned char *)(v181 + 1) = *(unsigned char *)(v182 + 1);
        *(unsigned char *)(v181 + 2) = *(unsigned char *)(v182 + 2);
        uint64_t v183 = *(void *)(v182 + 8);
        uint64_t v184 = *(void *)(v182 + 16);
        char v185 = *(unsigned char *)(v182 + 24);
        sub_21F770E44(v183, v184, v185);
        *(void *)(v181 + 8) = v183;
        *(void *)(v181 + 16) = v184;
        *(unsigned char *)(v181 + 24) = v185;
        unsigned int v186 = *(unsigned __int8 *)(v182 + 48);
        if (v186 <= 0xFB)
        {
          uint64_t v188 = *(void *)(v182 + 32);
          uint64_t v189 = *(void *)(v182 + 40);
          sub_21F770E44(v188, v189, *(unsigned char *)(v182 + 48));
          *(void *)(v181 + 32) = v188;
          *(void *)(v181 + 40) = v189;
          *(unsigned char *)(v181 + 48) = v186;
        }
        else
        {
          long long v187 = *(_OWORD *)(v182 + 32);
          *(unsigned char *)(v181 + 48) = *(unsigned char *)(v182 + 48);
          *(_OWORD *)(v181 + 32) = v187;
        }
        a1 = v412;
        unint64_t v41 = v418;
        uint64_t v15 = v420;
        *(unsigned char *)(v21 + v32) = 7;
        uint64_t v23 = (unsigned __int8 *)v436;
        break;
      default:
        uint64_t v89 = *(void *)v23;
        *(unsigned char *)(v21 + 8) = v23[8];
        *(void *)uint64_t v21 = v89;
        *(unsigned char *)(v21 + v32) = 0;
LABEL_269:
        unint64_t v41 = v418;
        uint64_t v15 = v420;
        break;
    }
  }
  uint64_t v195 = *(void *)(v3 + 32);
  uint64_t v196 = *(void *)(v195 - 8);
  uint64_t v197 = *(unsigned __int8 *)(v196 + 80);
  uint64_t v198 = v15 | v197;
  uint64_t v199 = v15 | v197 | 7;
  uint64_t v200 = v32 + v199 + 1;
  char v201 = (unsigned __int8 *)(v200 + v21);
  uint64_t v202 = ~v199;
  unint64_t v203 = (v200 + v21) & ~v199;
  unint64_t v204 = (unint64_t)&v23[v200];
  uint64_t v205 = v204 & ~v199;
  uint64_t v206 = ~v197;
  if (v203 == v205)
  {
    unint64_t v220 = *(void *)(v196 + 64);
    uint64_t v221 = (v198 + 32) & v202;
    if (((v220 + v197) & v206) + v220 > v220) {
      v220 += (v220 + v197) & v206;
    }
    if (v220 <= v41) {
      unint64_t v220 = v41;
    }
    if (v220 <= 0x10) {
      unint64_t v220 = 16;
    }
    unint64_t v222 = (v221 | 1) + v220;
    unint64_t v223 = ((v222 + v199) & v202) + v222;
    if (v222 > v223) {
      unint64_t v223 = v222;
    }
    unint64_t v224 = (v222 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v223 <= v224 + 113) {
      unint64_t v223 = v224 + 113;
    }
    unint64_t v225 = v224 + 49;
    if (v223 > v225) {
      unint64_t v225 = v223;
    }
    if (v225 <= 0x19) {
      uint64_t v215 = 25;
    }
    else {
      uint64_t v215 = v225;
    }
  }
  else
  {
    unint64_t v403 = v204;
    v419 = v201;
    uint64_t v433 = *(void *)(v195 - 8);
    uint64_t v435 = v195;
    uint64_t v439 = v198 + 32;
    uint64_t v207 = (v198 + 32) & v202;
    unint64_t v208 = *(void *)(v196 + 64);
    uint64_t v401 = v208 + v197;
    unint64_t v209 = ((v208 + v197) & v206) + v208;
    unint64_t v405 = v208;
    if (v209 <= v208) {
      unint64_t v209 = *(void *)(v196 + 64);
    }
    if (v209 <= v41) {
      unint64_t v209 = v41;
    }
    if (v209 <= 0x10) {
      uint64_t v210 = 16;
    }
    else {
      uint64_t v210 = v209;
    }
    unint64_t v211 = (v207 | 1) + v210;
    unint64_t v212 = ((v211 + v199) & v202) + v211;
    if (v211 > v212) {
      unint64_t v212 = v211;
    }
    unint64_t v437 = v211;
    unint64_t v213 = (v211 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v212 <= v213 + 113) {
      unint64_t v212 = v213 + 113;
    }
    unint64_t v214 = v213 + 49;
    if (v212 <= v214) {
      unint64_t v212 = v214;
    }
    if (v212 <= 0x19) {
      uint64_t v215 = 25;
    }
    else {
      uint64_t v215 = v212;
    }
    unsigned int v216 = *(unsigned __int8 *)(v203 + v215);
    unsigned int v217 = v216 - 8;
    if (v216 >= 8)
    {
      if (v215 <= 3) {
        uint64_t v218 = v215;
      }
      else {
        uint64_t v218 = 4;
      }
      switch(v218)
      {
        case 1:
          int v219 = *(unsigned __int8 *)v203;
          goto LABEL_311;
        case 2:
          int v219 = *(unsigned __int16 *)v203;
          goto LABEL_311;
        case 3:
          int v219 = *(unsigned __int16 *)v203 | (*(unsigned __int8 *)(v203 + 2) << 16);
          goto LABEL_311;
        case 4:
          int v219 = *(_DWORD *)v203;
LABEL_311:
          int v226 = (v219 | (v217 << (8 * v215))) + 8;
          unsigned int v216 = v219 + 8;
          if (v215 < 4) {
            unsigned int v216 = v226;
          }
          break;
        default:
          break;
      }
    }
    switch(v216)
    {
      case 2u:
LABEL_314:
        swift_release();
        break;
      case 3u:
LABEL_315:
        swift_release();
        swift_release();
        break;
      case 4u:
        sub_21F7656A8(*(void *)v203, *(void *)(v203 + 8), *(unsigned char *)(v203 + 16));
        swift_bridgeObjectRelease();
        uint64_t v227 = (unsigned __int8 *)((v439 + v203) & v202);
        unsigned int v228 = v227[v210];
        unsigned int v229 = v228 - 5;
        if (v228 >= 5)
        {
          if (v210 <= 3) {
            uint64_t v230 = v210;
          }
          else {
            uint64_t v230 = 4;
          }
          switch(v230)
          {
            case 1:
              int v231 = *v227;
              goto LABEL_343;
            case 2:
              int v231 = *(unsigned __int16 *)v227;
              goto LABEL_343;
            case 3:
              int v231 = *(unsigned __int16 *)v227 | (*(unsigned __int8 *)(((v439 + v203) & v202) + 2) << 16);
              goto LABEL_343;
            case 4:
              int v231 = *(_DWORD *)v227;
LABEL_343:
              int v247 = (v231 | (v229 << (8 * v210))) + 5;
              unsigned int v228 = v231 + 5;
              if (v210 < 4) {
                unsigned int v228 = v247;
              }
              break;
            default:
              break;
          }
        }
        switch(v228)
        {
          case 1u:
            uint64_t v421 = v210;
            uint64_t v413 = a1;
            uint64_t v248 = *(void (**)(unint64_t, uint64_t))(v433 + 8);
            uint64_t v395 = ~v197;
            uint64_t v249 = v435;
            v248((v439 + v203) & v202, v435);
            char v250 = &v227[v197 + v405];
            goto LABEL_401;
          case 2u:
            goto LABEL_314;
          case 3u:
            goto LABEL_315;
          case 4u:
            goto LABEL_399;
          default:
            goto LABEL_398;
        }
      case 5u:
        sub_21F7656A8(*(void *)v203, *(void *)(v203 + 8), *(unsigned char *)(v203 + 16));
        swift_bridgeObjectRelease();
        int v232 = (unsigned __int8 *)((v439 + v203) & v202);
        unsigned int v233 = v232[v210];
        unsigned int v234 = v233 - 5;
        if (v233 >= 5)
        {
          if (v210 <= 3) {
            uint64_t v235 = v210;
          }
          else {
            uint64_t v235 = 4;
          }
          switch(v235)
          {
            case 1:
              int v236 = *v232;
              goto LABEL_350;
            case 2:
              int v236 = *(unsigned __int16 *)v232;
              goto LABEL_350;
            case 3:
              int v236 = *(unsigned __int16 *)v232 | (*(unsigned __int8 *)(((v439 + v203) & v202) + 2) << 16);
              goto LABEL_350;
            case 4:
              int v236 = *(_DWORD *)v232;
LABEL_350:
              int v251 = (v236 | (v234 << (8 * v210))) + 5;
              unsigned int v233 = v236 + 5;
              if (v210 < 4) {
                unsigned int v233 = v251;
              }
              break;
            default:
              break;
          }
        }
        switch(v233)
        {
          case 1u:
            uint64_t v414 = a1;
            unsigned int v252 = *(void (**)(unint64_t, uint64_t))(v433 + 8);
            v252((v439 + v203) & v202, v435);
            uint64_t v206 = ~v197;
            v252((unint64_t)&v232[v197 + v405] & ~v197, v435);
            a1 = v414;
            break;
          case 2u:
            swift_release();
            break;
          case 3u:
            swift_release();
            swift_release();
            break;
          case 4u:
            swift_release();
            unint64_t v253 = (unint64_t)&v232[v423] & v424;
            (*(void (**)(unint64_t, uint64_t))(v428 + 8))(v253, v429);
            (*(void (**)(unint64_t, uint64_t))(v430 + 8))((v425 + v427 + v253) & v426, v431);
            break;
          default:
            (*(void (**)(unint64_t, uint64_t))(v433 + 8))((v439 + v203) & v202, v435);
            break;
        }
        uint64_t v254 = (((unint64_t)v419 | v199) + v437) & v202;
        sub_21F7656A8(*(void *)v254, *(void *)(v254 + 8), *(unsigned char *)(v254 + 0x10));
        swift_bridgeObjectRelease();
        uint64_t v227 = (unsigned __int8 *)((v439 + v254) & v202);
        unsigned int v255 = v227[v210];
        unsigned int v256 = v255 - 5;
        if (v255 >= 5)
        {
          if (v210 <= 3) {
            uint64_t v257 = v210;
          }
          else {
            uint64_t v257 = 4;
          }
          switch(v257)
          {
            case 1:
              int v258 = *v227;
              goto LABEL_395;
            case 2:
              int v258 = *(unsigned __int16 *)v227;
              goto LABEL_395;
            case 3:
              int v258 = *(unsigned __int16 *)v227 | (v227[2] << 16);
              goto LABEL_395;
            case 4:
              int v258 = *(_DWORD *)v227;
LABEL_395:
              int v269 = (v258 | (v256 << (8 * v210))) + 5;
              unsigned int v255 = v258 + 5;
              if (v210 < 4) {
                unsigned int v255 = v269;
              }
              break;
            default:
              break;
          }
        }
        switch(v255)
        {
          case 1u:
            uint64_t v421 = v210;
            uint64_t v413 = a1;
            uint64_t v248 = *(void (**)(unint64_t, uint64_t))(v433 + 8);
            uint64_t v395 = v206;
            uint64_t v249 = v435;
            v248((unint64_t)v227, v435);
            char v250 = &v227[v401];
LABEL_401:
            uint64_t v271 = v249;
            uint64_t v206 = v395;
            v248((unint64_t)v250 & v395, v271);
            uint64_t v210 = v421;
            a1 = v413;
            break;
          case 2u:
            goto LABEL_314;
          case 3u:
            goto LABEL_315;
          case 4u:
LABEL_399:
            swift_release();
            unint64_t v270 = (unint64_t)&v227[v423] & v424;
            (*(void (**)(unint64_t, uint64_t))(v428 + 8))(v270, v429);
            (*(void (**)(unint64_t, uint64_t))(v430 + 8))((v425 + v427 + v270) & v426, v431);
            break;
          default:
LABEL_398:
            (*(void (**)(unsigned __int8 *, uint64_t))(v433 + 8))(v227, v435);
            break;
        }
        break;
      case 6u:
        sub_21F7656A8(*(void *)v203, *(void *)(v203 + 8), *(unsigned char *)(v203 + 16));
        swift_bridgeObjectRelease();
        unint64_t v237 = (unsigned __int8 *)((v439 + v203) & v202);
        unsigned int v238 = v237[v210];
        unsigned int v239 = v238 - 5;
        if (v238 >= 5)
        {
          if (v210 <= 3) {
            uint64_t v240 = v210;
          }
          else {
            uint64_t v240 = 4;
          }
          switch(v240)
          {
            case 1:
              int v241 = *v237;
              goto LABEL_367;
            case 2:
              int v241 = *(unsigned __int16 *)v237;
              goto LABEL_367;
            case 3:
              int v241 = *(unsigned __int16 *)v237 | (*(unsigned __int8 *)(((v439 + v203) & v202) + 2) << 16);
              goto LABEL_367;
            case 4:
              int v241 = *(_DWORD *)v237;
LABEL_367:
              int v259 = (v241 | (v239 << (8 * v210))) + 5;
              unsigned int v238 = v241 + 5;
              if (v210 < 4) {
                unsigned int v238 = v259;
              }
              break;
            default:
              break;
          }
        }
        switch(v238)
        {
          case 1u:
            uint64_t v415 = a1;
            unint64_t v261 = *(void (**)(unint64_t, uint64_t))(v433 + 8);
            v261((v439 + v203) & v202, v435);
            uint64_t v206 = ~v197;
            v261((unint64_t)&v237[v197 + v405] & ~v197, v435);
            a1 = v415;
            break;
          case 2u:
            swift_release();
            break;
          case 3u:
            swift_release();
            swift_release();
            break;
          case 4u:
            swift_release();
            unint64_t v260 = (unint64_t)&v237[v423] & v424;
            (*(void (**)(unint64_t, uint64_t))(v428 + 8))(v260, v429);
            (*(void (**)(unint64_t, uint64_t))(v430 + 8))((v425 + v427 + v260) & v426, v431);
            break;
          default:
            (*(void (**)(unint64_t, uint64_t))(v433 + 8))((v439 + v203) & v202, v435);
            break;
        }
        unint64_t v262 = ((v203 | 7) + v437) & 0xFFFFFFFFFFFFFFF8;
        int v263 = *(unsigned __int8 *)(v262 + 96);
        if (v263 != 255) {
          sub_21F82B5F8(*(void *)(v262 + 88), v263 & 1);
        }
        sub_21F82B5F8(*(void *)(v262 + 104), *(unsigned char *)(v262 + 112));
        break;
      case 7u:
        sub_21F7656A8(*(void *)v203, *(void *)(v203 + 8), *(unsigned char *)(v203 + 16));
        swift_bridgeObjectRelease();
        char v242 = (unsigned __int8 *)((v439 + v203) & v202);
        unsigned int v243 = v242[v210];
        unsigned int v244 = v243 - 5;
        if (v243 >= 5)
        {
          if (v210 <= 3) {
            uint64_t v245 = v210;
          }
          else {
            uint64_t v245 = 4;
          }
          switch(v245)
          {
            case 1:
              int v246 = *v242;
              goto LABEL_382;
            case 2:
              int v246 = *(unsigned __int16 *)v242;
              goto LABEL_382;
            case 3:
              int v246 = *(unsigned __int16 *)v242 | (*(unsigned __int8 *)(((v439 + v203) & v202) + 2) << 16);
              goto LABEL_382;
            case 4:
              int v246 = *(_DWORD *)v242;
LABEL_382:
              int v264 = (v246 | (v244 << (8 * v210))) + 5;
              unsigned int v243 = v246 + 5;
              if (v210 < 4) {
                unsigned int v243 = v264;
              }
              break;
            default:
              break;
          }
        }
        switch(v243)
        {
          case 1u:
            uint64_t v416 = a1;
            uint64_t v265 = *(void (**)(unint64_t, uint64_t))(v433 + 8);
            v265((v439 + v203) & v202, v435);
            uint64_t v206 = ~v197;
            v265((unint64_t)&v242[v197 + v405] & ~v197, v435);
            a1 = v416;
            break;
          case 2u:
            swift_release();
            break;
          case 3u:
            swift_release();
            swift_release();
            break;
          case 4u:
            swift_release();
            unint64_t v266 = (unint64_t)&v242[v423] & v424;
            (*(void (**)(unint64_t, uint64_t))(v428 + 8))(v266, v429);
            (*(void (**)(unint64_t, uint64_t))(v430 + 8))((v425 + v427 + v266) & v426, v431);
            break;
          default:
            (*(void (**)(unint64_t, uint64_t))(v433 + 8))((v439 + v203) & v202, v435);
            break;
        }
        unint64_t v267 = ((v203 | 7) + v437) & 0xFFFFFFFFFFFFFFF8;
        sub_21F770E38(*(void *)(v267 + 8), *(void *)(v267 + 16), *(unsigned char *)(v267 + 24));
        unsigned int v268 = *(unsigned __int8 *)(v267 + 48);
        if (v268 <= 0xFB) {
          sub_21F770E38(*(void *)(v267 + 32), *(void *)(v267 + 40), v268);
        }
        break;
      default:
        break;
    }
    unsigned int v272 = *(unsigned __int8 *)(v205 + v215);
    unsigned int v273 = v272 - 8;
    if (v272 >= 8)
    {
      if (v215 <= 3) {
        uint64_t v274 = v215;
      }
      else {
        uint64_t v274 = 4;
      }
      switch(v274)
      {
        case 1:
          int v275 = *(unsigned __int8 *)v205;
          goto LABEL_411;
        case 2:
          int v275 = *(unsigned __int16 *)v205;
          goto LABEL_411;
        case 3:
          int v275 = *(unsigned __int16 *)v205 | (*(unsigned __int8 *)(v205 + 2) << 16);
          goto LABEL_411;
        case 4:
          int v275 = *(_DWORD *)v205;
LABEL_411:
          int v276 = (v275 | (v273 << (8 * v215))) + 8;
          unsigned int v272 = v275 + 8;
          if (v215 < 4) {
            unsigned int v272 = v276;
          }
          break;
        default:
          break;
      }
    }
    switch(v272)
    {
      case 1u:
        long long v278 = *(_OWORD *)v205;
        *(_OWORD *)(v203 + 9) = *(_OWORD *)(v205 + 9);
        *(_OWORD *)unint64_t v203 = v278;
        char v279 = 1;
        goto LABEL_528;
      case 2u:
        *(void *)unint64_t v203 = *(void *)v205;
        *(unsigned char *)(v203 + v215) = 2;
        swift_retain();
        break;
      case 3u:
        *(void *)unint64_t v203 = *(void *)v205;
        *(void *)(v203 + 8) = *(void *)(v205 + 8);
        *(unsigned char *)(v203 + v215) = 3;
        swift_retain();
        swift_retain();
        break;
      case 4u:
        uint64_t v396 = v206;
        uint64_t v280 = a1;
        uint64_t v281 = v210;
        uint64_t v282 = *(void *)v205;
        uint64_t v283 = *(void *)(v205 + 8);
        char v284 = *(unsigned char *)(v205 + 16);
        sub_21F7652C0(*(void *)v205, v283, v284);
        *(void *)unint64_t v203 = v282;
        *(void *)(v203 + 8) = v283;
        *(unsigned char *)(v203 + 16) = v284;
        *(void *)(v203 + 24) = *(void *)(v205 + 24);
        uint64_t v285 = (void *)((v439 + v203) & v202);
        uint64_t v286 = (unsigned __int8 *)((v439 + v205) & v202);
        unsigned int v287 = v286[v281];
        swift_bridgeObjectRetain();
        if (v287 < 5)
        {
          a1 = v280;
        }
        else
        {
          if (v281 <= 3) {
            uint64_t v288 = v281;
          }
          else {
            uint64_t v288 = 4;
          }
          a1 = v280;
          switch(v288)
          {
            case 1:
              int v289 = *v286;
              goto LABEL_448;
            case 2:
              int v289 = *(unsigned __int16 *)v286;
              goto LABEL_448;
            case 3:
              int v289 = *(unsigned __int16 *)v286 | (v286[2] << 16);
              goto LABEL_448;
            case 4:
              int v289 = *(_DWORD *)v286;
LABEL_448:
              int v319 = (v289 | ((v287 - 5) << (8 * v281))) + 5;
              unsigned int v320 = v289 + 5;
              if (v281 >= 4) {
                unsigned int v287 = v320;
              }
              else {
                unsigned int v287 = v319;
              }
              break;
            default:
              break;
          }
        }
        switch(v287)
        {
          case 1u:
            uint64_t v321 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v433 + 16);
            v321(v285, v286, v435);
            v321((void *)(((unint64_t)v285 + v197 + v405) & v396), (unsigned __int8 *)((unint64_t)&v286[v197 + v405] & v396), v435);
            char v322 = 1;
            goto LABEL_458;
          case 2u:
            *uint64_t v285 = *(void *)v286;
            *((unsigned char *)v285 + v281) = 2;
            goto LABEL_456;
          case 3u:
            *uint64_t v285 = *(void *)v286;
            v285[1] = *((void *)v286 + 1);
            *((unsigned char *)v285 + v281) = 3;
            swift_retain();
LABEL_456:
            swift_retain();
            char v279 = 4;
            break;
          case 4u:
            *uint64_t v285 = *(void *)v286;
            unint64_t v323 = ((unint64_t)v285 + v423) & v424;
            unint64_t v324 = (unint64_t)&v286[v423] & v424;
            uint64_t v325 = *(void (**)(unint64_t, unint64_t, uint64_t))(v428 + 16);
            swift_retain();
            v325(v323, v324, v429);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v430 + 16))((v425 + v427 + v323) & v426, (v425 + v427 + v324) & v426, v431);
            char v322 = 4;
LABEL_458:
            *((unsigned char *)v285 + v281) = v322;
            char v279 = 4;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v433 + 16))(v285, v286, v435);
            *((unsigned char *)v285 + v281) = 0;
            char v279 = 4;
            break;
        }
        goto LABEL_528;
      case 5u:
        uint64_t v397 = v206;
        uint64_t v417 = a1;
        uint64_t v290 = v210;
        uint64_t v291 = *(void *)v205;
        uint64_t v292 = *(void *)(v205 + 8);
        char v293 = *(unsigned char *)(v205 + 16);
        sub_21F7652C0(*(void *)v205, v292, v293);
        *(void *)unint64_t v203 = v291;
        *(void *)(v203 + 8) = v292;
        *(unsigned char *)(v203 + 16) = v293;
        *(void *)(v203 + 24) = *(void *)(v205 + 24);
        char v294 = (void *)((v439 + v203) & v202);
        unint64_t v295 = (unsigned __int8 *)((v439 + v205) & v202);
        unsigned int v296 = v295[v290];
        swift_bridgeObjectRetain();
        uint64_t v422 = v290;
        if (v296 >= 5)
        {
          if (v290 <= 3) {
            uint64_t v297 = v290;
          }
          else {
            uint64_t v297 = 4;
          }
          switch(v297)
          {
            case 1:
              int v298 = *v295;
              goto LABEL_462;
            case 2:
              int v298 = *(unsigned __int16 *)v295;
              goto LABEL_462;
            case 3:
              int v298 = *(unsigned __int16 *)((v439 + v205) & v202) | (*(unsigned __int8 *)(((v439 + v205) & v202) + 2) << 16);
              goto LABEL_462;
            case 4:
              int v298 = *(_DWORD *)v295;
LABEL_462:
              int v326 = (v298 | ((v296 - 5) << (8 * v290))) + 5;
              unsigned int v327 = v298 + 5;
              if (v290 >= 4) {
                unsigned int v296 = v327;
              }
              else {
                unsigned int v296 = v326;
              }
              break;
            default:
              break;
          }
        }
        switch(v296)
        {
          case 1u:
            uint64_t v328 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v433 + 16);
            v328(v294, v295, v435);
            v328((void *)(((unint64_t)v294 + v197 + v405) & v397), (unsigned __int8 *)((unint64_t)&v295[v197 + v405] & v397), v435);
            char v329 = 1;
            goto LABEL_471;
          case 2u:
            *char v294 = *(void *)v295;
            *((unsigned char *)v294 + v290) = 2;
            swift_retain();
            break;
          case 3u:
            *char v294 = *(void *)v295;
            *(void *)(((v439 + v203) & v202) + 8) = *(void *)(((v439 + v205) & v202) + 8);
            *((unsigned char *)v294 + v290) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *char v294 = *(void *)v295;
            unint64_t v330 = ((unint64_t)v294 + v423) & v424;
            unint64_t v331 = (unint64_t)&v295[v423] & v424;
            uint64_t v332 = *(void (**)(unint64_t, unint64_t, uint64_t))(v428 + 16);
            swift_retain();
            v332(v330, v331, v429);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v430 + 16))((v425 + v427 + v330) & v426, (v425 + v427 + v331) & v426, v431);
            char v329 = 4;
LABEL_471:
            uint64_t v290 = v422;
            *((unsigned char *)v294 + v422) = v329;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v433 + 16))(v294, v295, v435);
            *((unsigned char *)v294 + v290) = 0;
            break;
        }
        uint64_t v333 = (((unint64_t)v419 | v199) + v437) & v202;
        uint64_t v334 = ((v403 | v199) + v437) & v202;
        uint64_t v335 = *(void *)v334;
        uint64_t v336 = *(void *)(v334 + 8);
        char v337 = *(unsigned char *)(v334 + 0x10);
        sub_21F7652C0(*(void *)v334, v336, v337);
        *(void *)uint64_t v333 = v335;
        *(void *)(v333 + 8) = v336;
        *(unsigned char *)(v333 + 16) = v337;
        *(void *)(v333 + 24) = *(void *)(v334 + 24);
        uint64_t v338 = (void *)((v439 + v333) & v202);
        unint64_t v339 = (unsigned __int8 *)((v439 + v334) & v202);
        unsigned int v340 = v339[v290];
        swift_bridgeObjectRetain();
        if (v340 < 5)
        {
          uint64_t v342 = v290;
          a1 = v417;
        }
        else
        {
          if (v290 <= 3) {
            uint64_t v341 = v290;
          }
          else {
            uint64_t v341 = 4;
          }
          a1 = v417;
          uint64_t v342 = v290;
          switch(v341)
          {
            case 1:
              int v343 = *v339;
              goto LABEL_516;
            case 2:
              int v343 = *(unsigned __int16 *)v339;
              goto LABEL_516;
            case 3:
              int v343 = *(unsigned __int16 *)v339 | (v339[2] << 16);
              goto LABEL_516;
            case 4:
              int v343 = *(_DWORD *)v339;
LABEL_516:
              int v382 = (v343 | ((v340 - 5) << (8 * v290))) + 5;
              unsigned int v383 = v343 + 5;
              if (v290 >= 4) {
                unsigned int v340 = v383;
              }
              else {
                unsigned int v340 = v382;
              }
              break;
            default:
              break;
          }
        }
        switch(v340)
        {
          case 1u:
            CGRect v384 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v433 + 16);
            v384(v338, v339, v435);
            v384((void *)(((unint64_t)v338 + v401) & v397), (unsigned __int8 *)((unint64_t)&v339[v401] & v397), v435);
            char v385 = 1;
            goto LABEL_526;
          case 2u:
            *uint64_t v338 = *(void *)v339;
            *((unsigned char *)v338 + v342) = 2;
            goto LABEL_524;
          case 3u:
            *uint64_t v338 = *(void *)v339;
            v338[1] = *((void *)v339 + 1);
            *((unsigned char *)v338 + v342) = 3;
            swift_retain();
LABEL_524:
            swift_retain();
            break;
          case 4u:
            *uint64_t v338 = *(void *)v339;
            unint64_t v386 = ((unint64_t)v338 + v423) & v424;
            unint64_t v387 = (unint64_t)&v339[v423] & v424;
            CGRect v388 = *(void (**)(unint64_t, unint64_t, uint64_t))(v428 + 16);
            swift_retain();
            v388(v386, v387, v429);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v430 + 16))((v425 + v427 + v386) & v426, (v425 + v427 + v387) & v426, v431);
            char v385 = 4;
LABEL_526:
            *((unsigned char *)v338 + v342) = v385;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v433 + 16))(v338, v339, v435);
            *((unsigned char *)v338 + v342) = 0;
            break;
        }
        char v279 = 5;
        goto LABEL_528;
      case 6u:
        uint64_t v398 = v206;
        uint64_t v299 = a1;
        uint64_t v300 = v210;
        uint64_t v301 = *(void *)v205;
        uint64_t v302 = *(void *)(v205 + 8);
        char v303 = *(unsigned char *)(v205 + 16);
        sub_21F7652C0(*(void *)v205, v302, v303);
        *(void *)unint64_t v203 = v301;
        *(void *)(v203 + 8) = v302;
        *(unsigned char *)(v203 + 16) = v303;
        *(void *)(v203 + 24) = *(void *)(v205 + 24);
        unint64_t v304 = (void *)((v439 + v203) & v202);
        unint64_t v305 = (unsigned __int8 *)((v439 + v205) & v202);
        unsigned int v306 = v305[v300];
        swift_bridgeObjectRetain();
        if (v306 < 5)
        {
          a1 = v299;
        }
        else
        {
          if (v300 <= 3) {
            uint64_t v307 = v300;
          }
          else {
            uint64_t v307 = 4;
          }
          a1 = v299;
          switch(v307)
          {
            case 1:
              int v308 = *v305;
              goto LABEL_482;
            case 2:
              int v308 = *(unsigned __int16 *)v305;
              goto LABEL_482;
            case 3:
              int v308 = *(unsigned __int16 *)v305 | (v305[2] << 16);
              goto LABEL_482;
            case 4:
              int v308 = *(_DWORD *)v305;
LABEL_482:
              int v344 = (v308 | ((v306 - 5) << (8 * v300))) + 5;
              unsigned int v345 = v308 + 5;
              if (v300 >= 4) {
                unsigned int v306 = v345;
              }
              else {
                unsigned int v306 = v344;
              }
              break;
            default:
              break;
          }
        }
        switch(v306)
        {
          case 1u:
            uint64_t v350 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v433 + 16);
            v350(v304, v305, v435);
            v350((void *)(((unint64_t)v304 + v197 + v405) & v398), (unsigned __int8 *)((unint64_t)&v305[v197 + v405] & v398), v435);
            char v349 = 1;
            goto LABEL_491;
          case 2u:
            *unint64_t v304 = *(void *)v305;
            *((unsigned char *)v304 + v300) = 2;
            swift_retain();
            break;
          case 3u:
            *unint64_t v304 = *(void *)v305;
            v304[1] = *((void *)v305 + 1);
            *((unsigned char *)v304 + v300) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *unint64_t v304 = *(void *)v305;
            unint64_t v346 = ((unint64_t)v304 + v423) & v424;
            unint64_t v347 = (unint64_t)&v305[v423] & v424;
            uint64_t v348 = *(void (**)(unint64_t, unint64_t, uint64_t))(v428 + 16);
            swift_retain();
            v348(v346, v347, v429);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v430 + 16))((v425 + v427 + v346) & v426, (v425 + v427 + v347) & v426, v431);
            char v349 = 4;
LABEL_491:
            *((unsigned char *)v304 + v300) = v349;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v433 + 16))(v304, v305, v435);
            *((unsigned char *)v304 + v300) = 0;
            break;
        }
        unint64_t v351 = ((v203 | 7) + v437) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v352 = ((v205 | 7) + v437) & 0xFFFFFFFFFFFFFFF8;
        *(unsigned char *)unint64_t v351 = *(unsigned char *)v352;
        uint64_t v353 = (_OWORD *)(v351 + 8);
        char v354 = (_OWORD *)(v352 + 8);
        if (*(unsigned __int8 *)(v352 + 96) == 255)
        {
          long long v360 = *(_OWORD *)(v352 + 24);
          *uint64_t v353 = *v354;
          *(_OWORD *)(v351 + 24) = v360;
          long long v361 = *(_OWORD *)(v352 + 40);
          long long v362 = *(_OWORD *)(v352 + 56);
          long long v363 = *(_OWORD *)(v352 + 72);
          *(_OWORD *)(v351 + 81) = *(_OWORD *)(v352 + 81);
          *(_OWORD *)(v351 + 56) = v362;
          *(_OWORD *)(v351 + 72) = v363;
          *(_OWORD *)(v351 + 40) = v361;
        }
        else
        {
          *uint64_t v353 = *v354;
          long long v355 = *(_OWORD *)(v352 + 24);
          long long v356 = *(_OWORD *)(v352 + 40);
          long long v357 = *(_OWORD *)(v352 + 72);
          *(_OWORD *)(v351 + 56) = *(_OWORD *)(v352 + 56);
          *(_OWORD *)(v351 + 72) = v357;
          *(_OWORD *)(v351 + 24) = v355;
          *(_OWORD *)(v351 + 40) = v356;
          uint64_t v358 = *(void *)(v352 + 88);
          char v359 = *(unsigned char *)(v352 + 96);
          sub_21F829E74(v358, v359);
          *(void *)(v351 + 88) = v358;
          *(unsigned char *)(v351 + 96) = v359;
        }
        uint64_t v364 = *(void *)(v352 + 104);
        char v365 = *(unsigned char *)(v352 + 112);
        sub_21F829E74(v364, v365);
        *(void *)(v351 + 104) = v364;
        *(unsigned char *)(v351 + 112) = v365;
        char v279 = 6;
        goto LABEL_528;
      case 7u:
        uint64_t v399 = v206;
        uint64_t v309 = a1;
        uint64_t v310 = v210;
        uint64_t v311 = *(void *)v205;
        uint64_t v312 = *(void *)(v205 + 8);
        char v313 = *(unsigned char *)(v205 + 16);
        sub_21F7652C0(*(void *)v205, v312, v313);
        *(void *)unint64_t v203 = v311;
        *(void *)(v203 + 8) = v312;
        *(unsigned char *)(v203 + 16) = v313;
        *(void *)(v203 + 24) = *(void *)(v205 + 24);
        uint64_t v314 = (void *)((v439 + v203) & v202);
        uint64_t v315 = (unsigned __int8 *)((v439 + v205) & v202);
        unsigned int v316 = v315[v310];
        swift_bridgeObjectRetain();
        if (v316 < 5)
        {
          a1 = v309;
        }
        else
        {
          if (v310 <= 3) {
            uint64_t v317 = v310;
          }
          else {
            uint64_t v317 = 4;
          }
          a1 = v309;
          switch(v317)
          {
            case 1:
              int v318 = *v315;
              goto LABEL_499;
            case 2:
              int v318 = *(unsigned __int16 *)v315;
              goto LABEL_499;
            case 3:
              int v318 = *(unsigned __int16 *)v315 | (v315[2] << 16);
              goto LABEL_499;
            case 4:
              int v318 = *(_DWORD *)v315;
LABEL_499:
              int v366 = (v318 | ((v316 - 5) << (8 * v310))) + 5;
              unsigned int v367 = v318 + 5;
              if (v310 >= 4) {
                unsigned int v316 = v367;
              }
              else {
                unsigned int v316 = v366;
              }
              break;
            default:
              break;
          }
        }
        switch(v316)
        {
          case 1u:
            uint64_t v368 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v433 + 16);
            v368(v314, v315, v435);
            v368((void *)(((unint64_t)v314 + v197 + v405) & v399), (unsigned __int8 *)((unint64_t)&v315[v197 + v405] & v399), v435);
            char v369 = 1;
            goto LABEL_508;
          case 2u:
            *uint64_t v314 = *(void *)v315;
            *((unsigned char *)v314 + v310) = 2;
            swift_retain();
            break;
          case 3u:
            *uint64_t v314 = *(void *)v315;
            v314[1] = *((void *)v315 + 1);
            *((unsigned char *)v314 + v310) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *uint64_t v314 = *(void *)v315;
            unint64_t v370 = ((unint64_t)v314 + v423) & v424;
            unint64_t v371 = (unint64_t)&v315[v423] & v424;
            uint64_t v372 = *(void (**)(unint64_t, unint64_t, uint64_t))(v428 + 16);
            swift_retain();
            v372(v370, v371, v429);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v430 + 16))((v425 + v427 + v370) & v426, (v425 + v427 + v371) & v426, v431);
            char v369 = 4;
LABEL_508:
            *((unsigned char *)v314 + v310) = v369;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v433 + 16))(v314, v315, v435);
            *((unsigned char *)v314 + v310) = 0;
            break;
        }
        unint64_t v373 = ((v203 | 7) + v437) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v374 = ((v205 | 7) + v437) & 0xFFFFFFFFFFFFFFF8;
        *(unsigned char *)unint64_t v373 = *(unsigned char *)v374;
        *(unsigned char *)(v373 + 1) = *(unsigned char *)(v374 + 1);
        *(unsigned char *)(v373 + 2) = *(unsigned char *)(v374 + 2);
        uint64_t v375 = *(void *)(v374 + 8);
        uint64_t v376 = *(void *)(v374 + 16);
        char v377 = *(unsigned char *)(v374 + 24);
        sub_21F770E44(v375, v376, v377);
        *(void *)(v373 + 8) = v375;
        *(void *)(v373 + 16) = v376;
        *(unsigned char *)(v373 + 24) = v377;
        unsigned int v378 = *(unsigned __int8 *)(v374 + 48);
        if (v378 <= 0xFB)
        {
          uint64_t v380 = *(void *)(v374 + 32);
          uint64_t v381 = *(void *)(v374 + 40);
          sub_21F770E44(v380, v381, *(unsigned char *)(v374 + 48));
          *(void *)(v373 + 32) = v380;
          *(void *)(v373 + 40) = v381;
          *(unsigned char *)(v373 + 48) = v378;
        }
        else
        {
          long long v379 = *(_OWORD *)(v374 + 32);
          *(unsigned char *)(v373 + 48) = *(unsigned char *)(v374 + 48);
          *(_OWORD *)(v373 + 32) = v379;
        }
        char v279 = 7;
LABEL_528:
        *(unsigned char *)(v203 + v215) = v279;
        break;
      default:
        uint64_t v277 = *(void *)v205;
        *(unsigned char *)(v203 + 8) = *(unsigned char *)(v205 + 8);
        *(void *)unint64_t v203 = v277;
        *(unsigned char *)(v203 + v215) = 0;
        break;
    }
  }
  *(void *)(((v203 | 7) + v215 + 1) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v205 | 7) + v215 + 1) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_21F830D34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v380 = a3;
  uint64_t v378 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v378 - 8);
  uint64_t v367 = v8;
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = sub_21FA24310();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v374 = v11;
  uint64_t v375 = v10;
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = sub_21FA24320();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = v8;
  uint64_t v376 = v14;
  uint64_t v377 = v13;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v16 | v12;
  uint64_t v18 = v16 | v12 | v9;
  uint64_t v19 = v18 | 7;
  uint64_t v20 = (v18 | 7) + v7;
  uint64_t v384 = a1;
  uint64_t v21 = v20 + a1;
  uint64_t v22 = v21 & ~(v18 | 7);
  uint64_t v23 = v20 + a2;
  uint64_t v24 = (unsigned __int8 *)((v20 + a2) & ~(v18 | 7));
  uint64_t v25 = v18 + 32;
  uint64_t v26 = (v18 + 32) & ~(v18 | 7);
  unint64_t v27 = *(void *)(v15 + 64);
  unint64_t v28 = ((v27 + v9) & ~v9) + v27;
  if (v28 <= v27) {
    unint64_t v28 = *(void *)(v15 + 64);
  }
  uint64_t v29 = v12 + 8;
  uint64_t v30 = *(void *)(v11 + 64);
  uint64_t v31 = v30 + v16;
  uint64_t v32 = *(void *)(v14 + 64);
  unint64_t v33 = ((v30 + v16 + ((v12 + 8) & ~v12)) & ~v16) + v32;
  if (v28 <= v33) {
    unint64_t v34 = ((v30 + v16 + ((v12 + 8) & ~v12)) & ~v16) + v32;
  }
  else {
    unint64_t v34 = v28;
  }
  if (v34 <= 0x10) {
    uint64_t v35 = 16;
  }
  else {
    uint64_t v35 = v34;
  }
  uint64_t v36 = v35 + v26;
  unint64_t v37 = v35 + v26 + 1;
  unint64_t v38 = ((v37 + v19) & ~v19) + v37;
  if (v37 > v38) {
    unint64_t v38 = v36 + 1;
  }
  uint64_t v39 = v36 + 8;
  unint64_t v40 = (v36 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v38 <= v40 + 113) {
    unint64_t v38 = v40 + 113;
  }
  unint64_t v41 = v40 + 49;
  if (v38 > v41) {
    unint64_t v41 = v38;
  }
  if (v41 <= 0x19) {
    uint64_t v42 = 25;
  }
  else {
    uint64_t v42 = v41;
  }
  unsigned int v43 = v24[v42];
  unsigned int v44 = v43 - 8;
  if (v43 >= 8)
  {
    if (v42 <= 3) {
      uint64_t v45 = v42;
    }
    else {
      uint64_t v45 = 4;
    }
    switch(v45)
    {
      case 1:
        int v46 = *v24;
        if (v42 < 4) {
          goto LABEL_28;
        }
        goto LABEL_30;
      case 2:
        int v46 = *(unsigned __int16 *)v24;
        if (v42 >= 4) {
          goto LABEL_30;
        }
        goto LABEL_28;
      case 3:
        int v46 = *(unsigned __int16 *)v24 | (v24[2] << 16);
        if (v42 < 4) {
          goto LABEL_28;
        }
        goto LABEL_30;
      case 4:
        int v46 = *(_DWORD *)v24;
        if (v42 < 4) {
LABEL_28:
        }
          unsigned int v43 = (v46 | (v44 << (8 * v42))) + 8;
        else {
LABEL_30:
        }
          unsigned int v43 = v46 + 8;
        break;
      default:
        break;
    }
  }
  uint64_t v47 = ~v19;
  uint64_t v48 = ~v9;
  uint64_t v49 = ~v12;
  uint64_t v373 = ~v16;
  uint64_t v366 = v31;
  switch(v43)
  {
    case 1u:
      long long v53 = *(_OWORD *)v24;
      *(_OWORD *)(v22 + 9) = *(_OWORD *)(v24 + 9);
      *(_OWORD *)uint64_t v22 = v53;
      char v50 = 1;
      uint64_t v52 = v380;
      break;
    case 2u:
      *(void *)uint64_t v22 = *(void *)v24;
      char v50 = 2;
      uint64_t v52 = v380;
      break;
    case 3u:
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v24;
      char v50 = 3;
      uint64_t v52 = v380;
      break;
    case 4u:
      long long v54 = *((_OWORD *)v24 + 1);
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v24;
      *(_OWORD *)(v22 + 16) = v54;
      int v55 = (void *)((v25 + v22) & v47);
      unsigned int v56 = (unsigned __int8 *)((unint64_t)&v24[v25] & v47);
      unsigned int v57 = v56[v35];
      unsigned int v58 = v57 - 5;
      if (v57 >= 5)
      {
        if (v35 <= 3) {
          uint64_t v59 = v35;
        }
        else {
          uint64_t v59 = 4;
        }
        switch(v59)
        {
          case 1:
            int v60 = *v56;
            goto LABEL_63;
          case 2:
            int v60 = *(unsigned __int16 *)v56;
            goto LABEL_63;
          case 3:
            int v60 = *(unsigned __int16 *)v56 | (v56[2] << 16);
            goto LABEL_63;
          case 4:
            int v60 = *(_DWORD *)v56;
LABEL_63:
            if (v35 < 4) {
              unsigned int v57 = (v60 | (v58 << (8 * v35))) + 5;
            }
            else {
              unsigned int v57 = v60 + 5;
            }
            break;
          default:
            break;
        }
      }
      switch(v57)
      {
        case 1u:
          long long v90 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v367 + 32);
          uint64_t v347 = v22;
          uint64_t v355 = v17;
          unsigned int v340 = v24;
          unint64_t v334 = v33;
          uint64_t v91 = v42;
          uint64_t v92 = v35;
          v90(v55, v56, v378);
          v90((void *)(((unint64_t)v55 + v9 + v27) & v48), (unsigned __int8 *)((unint64_t)&v56[v9 + v27] & v48), v378);
          uint64_t v35 = v92;
          uint64_t v42 = v91;
          unint64_t v33 = v334;
          uint64_t v24 = v340;
          uint64_t v22 = v347;
          uint64_t v17 = v355;
          uint64_t v49 = ~v12;
          uint64_t v29 = v12 + 8;
          char v89 = 1;
          break;
        case 2u:
          *int v55 = *(void *)v56;
          char v89 = 2;
          break;
        case 3u:
          *(_OWORD *)int v55 = *(_OWORD *)v56;
          char v89 = 3;
          break;
        case 4u:
          *int v55 = *(void *)v56;
          unint64_t v93 = ((unint64_t)v55 + v29) & v49;
          unint64_t v94 = (unint64_t)&v56[v29] & v49;
          uint64_t v348 = v22;
          uint64_t v356 = v17;
          char v95 = v24;
          uint64_t v96 = v12 + 8;
          uint64_t v97 = ~v12;
          unint64_t v98 = v33;
          uint64_t v99 = v55;
          uint64_t v100 = v42;
          uint64_t v101 = v35;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v374 + 32))(v93, v94, v375);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v376 + 32))((v31 + v93) & v373, (v31 + v94) & v373, v377);
          uint64_t v35 = v101;
          uint64_t v42 = v100;
          int v55 = v99;
          unint64_t v33 = v98;
          uint64_t v24 = v95;
          uint64_t v22 = v348;
          uint64_t v17 = v356;
          uint64_t v49 = v97;
          uint64_t v29 = v96;
          char v89 = 4;
          break;
        default:
          uint64_t v82 = v17;
          uint64_t v83 = v22;
          unint64_t v84 = v56;
          unsigned int v85 = v24;
          unint64_t v86 = v33;
          uint64_t v87 = v42;
          uint64_t v88 = v35;
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v367 + 32))(v55, v84, v378);
          uint64_t v35 = v88;
          uint64_t v42 = v87;
          unint64_t v33 = v86;
          uint64_t v24 = v85;
          uint64_t v22 = v83;
          uint64_t v17 = v82;
          uint64_t v49 = ~v12;
          uint64_t v29 = v12 + 8;
          char v89 = 0;
          break;
      }
      uint64_t v52 = v380;
      *((unsigned char *)v55 + v35) = v89;
      char v50 = 4;
      break;
    case 5u:
      long long v61 = *((_OWORD *)v24 + 1);
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v24;
      *(_OWORD *)(v22 + 16) = v61;
      unsigned int v62 = (void *)((v25 + v22) & v47);
      unsigned int v63 = (unsigned __int8 *)((unint64_t)&v24[v25] & v47);
      unsigned int v64 = v63[v35];
      unsigned int v65 = v64 - 5;
      if (v64 >= 5)
      {
        if (v35 <= 3) {
          uint64_t v66 = v35;
        }
        else {
          uint64_t v66 = 4;
        }
        switch(v66)
        {
          case 1:
            int v67 = *v63;
            goto LABEL_76;
          case 2:
            int v67 = *(unsigned __int16 *)v63;
            goto LABEL_76;
          case 3:
            int v67 = *(unsigned __int16 *)v63 | (*(unsigned __int8 *)(((unint64_t)&v24[v25] & v47) + 2) << 16);
            goto LABEL_76;
          case 4:
            int v67 = *(_DWORD *)v63;
LABEL_76:
            if (v35 < 4) {
              unsigned int v64 = (v67 | (v65 << (8 * v35))) + 5;
            }
            else {
              unsigned int v64 = v67 + 5;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v330 = v27 + v9;
      uint64_t v331 = v42;
      unint64_t v335 = v33;
      uint64_t v341 = v24;
      uint64_t v349 = v22;
      uint64_t v357 = v17;
      uint64_t v362 = v49;
      uint64_t v364 = v29;
      switch(v64)
      {
        case 1u:
          unint64_t v324 = *(void (**)(void *, unint64_t, uint64_t))(v367 + 32);
          uint64_t v326 = v23;
          uint64_t v328 = v35;
          uint64_t v325 = (void *)((v25 + v22) & v47);
          v324(v325, (unint64_t)&v24[v25] & v47, v378);
          v324((void *)(((unint64_t)v325 + v9 + v27) & v48), (unint64_t)&v63[v9 + v27] & v48, v378);
          unsigned int v62 = v325;
          uint64_t v23 = v326;
          uint64_t v35 = v328;
          char v105 = 1;
          break;
        case 2u:
          *unsigned int v62 = *(void *)v63;
          char v105 = 2;
          break;
        case 3u:
          *(_OWORD *)unsigned int v62 = *(_OWORD *)v63;
          char v105 = 3;
          break;
        case 4u:
          *unsigned int v62 = *(void *)v63;
          unint64_t v106 = (unint64_t)&v63[v29] & v49;
          unint64_t v107 = ((unint64_t)v62 + v29) & v49;
          uint64_t v327 = v23;
          uint64_t v329 = v35;
          unsigned int v108 = (void *)((v25 + v22) & v47);
          (*(void (**)(void))(v374 + 32))();
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v376 + 32))((v31 + v107) & v373, (v31 + v106) & v373, v377);
          unsigned int v62 = v108;
          uint64_t v23 = v327;
          uint64_t v35 = v329;
          char v105 = 4;
          break;
        default:
          uint64_t v102 = v35;
          uint64_t v103 = v23;
          uint64_t v104 = (void *)((v25 + v22) & v47);
          (*(void (**)(void *, unint64_t, uint64_t))(v367 + 32))(v104, (unint64_t)&v24[v25] & v47, v378);
          unsigned int v62 = v104;
          uint64_t v23 = v103;
          uint64_t v35 = v102;
          char v105 = 0;
          break;
      }
      *((unsigned char *)v62 + v35) = v105;
      uint64_t v109 = (_OWORD *)(((v21 | v19) + v37) & v47);
      int v110 = (_OWORD *)(((v23 | v19) + v37) & v47);
      long long v111 = v110[1];
      *uint64_t v109 = *v110;
      v109[1] = v111;
      uint64_t v112 = (void *)(((unint64_t)v109 + v25) & v47);
      uint64_t v113 = (unsigned __int8 *)(((unint64_t)v110 + v25) & v47);
      unsigned int v114 = v113[v35];
      unsigned int v115 = v114 - 5;
      if (v114 < 5)
      {
        uint64_t v49 = v362;
        uint64_t v29 = v364;
      }
      else
      {
        if (v35 <= 3) {
          uint64_t v116 = v35;
        }
        else {
          uint64_t v116 = 4;
        }
        uint64_t v49 = v362;
        uint64_t v29 = v364;
        switch(v116)
        {
          case 1:
            int v117 = *v113;
            goto LABEL_121;
          case 2:
            int v117 = *(unsigned __int16 *)v113;
            goto LABEL_121;
          case 3:
            int v117 = *(unsigned __int16 *)v113 | (v113[2] << 16);
            goto LABEL_121;
          case 4:
            int v117 = *(_DWORD *)v113;
LABEL_121:
            if (v35 < 4) {
              unsigned int v114 = (v117 | (v115 << (8 * v35))) + 5;
            }
            else {
              unsigned int v114 = v117 + 5;
            }
            break;
          default:
            break;
        }
      }
      switch(v114)
      {
        case 1u:
          unint64_t v181 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v367 + 32);
          uint64_t v182 = v29;
          uint64_t v183 = v49;
          uint64_t v184 = v48;
          uint64_t v185 = v35;
          v181(v112, v113, v378);
          v181((void *)(((unint64_t)v112 + v330) & v184), (unsigned __int8 *)((unint64_t)&v113[v330] & v184), v378);
          uint64_t v35 = v185;
          uint64_t v49 = v183;
          uint64_t v29 = v182;
          char v180 = 1;
          break;
        case 2u:
          *uint64_t v112 = *(void *)v113;
          char v180 = 2;
          break;
        case 3u:
          *(_OWORD *)uint64_t v112 = *(_OWORD *)v113;
          char v180 = 3;
          break;
        case 4u:
          *uint64_t v112 = *(void *)v113;
          unint64_t v186 = ((unint64_t)v112 + v29) & v49;
          unint64_t v187 = (unint64_t)&v113[v29] & v49;
          uint64_t v188 = v29;
          uint64_t v189 = v49;
          uint64_t v190 = v35;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v374 + 32))(v186, v187, v375);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v376 + 32))((v31 + v186) & v373, (v31 + v187) & v373, v377);
          uint64_t v35 = v190;
          uint64_t v49 = v189;
          uint64_t v29 = v188;
          char v180 = 4;
          break;
        default:
          uint64_t v177 = v29;
          uint64_t v178 = v49;
          uint64_t v179 = v35;
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v367 + 32))(v112, v113, v378);
          uint64_t v35 = v179;
          uint64_t v49 = v178;
          uint64_t v29 = v177;
          char v180 = 0;
          break;
      }
      uint64_t v52 = v380;
      uint64_t v22 = v349;
      uint64_t v17 = v357;
      unint64_t v33 = v335;
      uint64_t v24 = v341;
      uint64_t v42 = v331;
      *((unsigned char *)v112 + v35) = v180;
      char v50 = 5;
      break;
    case 6u:
      long long v68 = *((_OWORD *)v24 + 1);
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v24;
      *(_OWORD *)(v22 + 16) = v68;
      int v69 = (void *)((v25 + v22) & v47);
      unint64_t v70 = (unsigned __int8 *)((unint64_t)&v24[v25] & v47);
      unsigned int v71 = v70[v35];
      unsigned int v72 = v71 - 5;
      if (v71 >= 5)
      {
        if (v35 <= 3) {
          uint64_t v73 = v35;
        }
        else {
          uint64_t v73 = 4;
        }
        switch(v73)
        {
          case 1:
            int v74 = *v70;
            goto LABEL_95;
          case 2:
            int v74 = *(unsigned __int16 *)v70;
            goto LABEL_95;
          case 3:
            int v74 = *(unsigned __int16 *)v70 | (v70[2] << 16);
            goto LABEL_95;
          case 4:
            int v74 = *(_DWORD *)v70;
LABEL_95:
            if (v35 < 4) {
              unsigned int v71 = (v74 | (v72 << (8 * v35))) + 5;
            }
            else {
              unsigned int v71 = v74 + 5;
            }
            break;
          default:
            break;
        }
      }
      switch(v71)
      {
        case 1u:
          char v138 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v367 + 32);
          uint64_t v351 = v22;
          uint64_t v359 = v17;
          int v343 = v24;
          uint64_t v139 = v39;
          uint64_t v332 = v42;
          unint64_t v336 = v33;
          uint64_t v140 = v35;
          v138(v69, v70, v378);
          v138((void *)(((unint64_t)v69 + v9 + v27) & v48), (unsigned __int8 *)((unint64_t)&v70[v9 + v27] & v48), v378);
          uint64_t v39 = v139;
          uint64_t v35 = v140;
          uint64_t v42 = v332;
          unint64_t v33 = v336;
          uint64_t v24 = v343;
          uint64_t v22 = v351;
          uint64_t v17 = v359;
          uint64_t v49 = ~v12;
          uint64_t v29 = v12 + 8;
          char v128 = 1;
          break;
        case 2u:
          void *v69 = *(void *)v70;
          char v128 = 2;
          break;
        case 3u:
          *(_OWORD *)int v69 = *(_OWORD *)v70;
          char v128 = 3;
          break;
        case 4u:
          void *v69 = *(void *)v70;
          unint64_t v129 = ((unint64_t)v69 + v29) & v49;
          unint64_t v130 = (unint64_t)&v70[v29] & v49;
          uint64_t v350 = v22;
          uint64_t v358 = v17;
          uint64_t v342 = v24;
          uint64_t v131 = v39;
          uint64_t v132 = v12 + 8;
          uint64_t v133 = ~v12;
          unint64_t v134 = v33;
          unint64_t v135 = v69;
          uint64_t v136 = v42;
          uint64_t v137 = v35;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v374 + 32))(v129, v130, v375);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v376 + 32))((v31 + v129) & v373, (v31 + v130) & v373, v377);
          uint64_t v39 = v131;
          uint64_t v35 = v137;
          uint64_t v42 = v136;
          int v69 = v135;
          unint64_t v33 = v134;
          uint64_t v24 = v342;
          uint64_t v22 = v350;
          uint64_t v17 = v358;
          uint64_t v49 = v133;
          uint64_t v29 = v132;
          char v128 = 4;
          break;
        default:
          uint64_t v118 = v17;
          uint64_t v119 = v22;
          int v120 = v70;
          uint64_t v121 = v24;
          uint64_t v122 = v39;
          uint64_t v123 = v29;
          uint64_t v124 = v49;
          unint64_t v125 = v33;
          uint64_t v126 = v42;
          uint64_t v127 = v35;
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v367 + 32))(v69, v120, v378);
          uint64_t v39 = v122;
          uint64_t v35 = v127;
          uint64_t v42 = v126;
          unint64_t v33 = v125;
          uint64_t v24 = v121;
          uint64_t v22 = v119;
          uint64_t v17 = v118;
          uint64_t v49 = v124;
          uint64_t v29 = v123;
          char v128 = 0;
          break;
      }
      uint64_t v52 = v380;
      *((unsigned char *)v69 + v35) = v128;
      unint64_t v141 = (v39 + v22) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v142 = (unint64_t)&v24[v39] & 0xFFFFFFFFFFFFFFF8;
      long long v143 = *(_OWORD *)v142;
      long long v144 = *(_OWORD *)(v142 + 16);
      long long v145 = *(_OWORD *)(v142 + 48);
      *(_OWORD *)(v141 + 32) = *(_OWORD *)(v142 + 32);
      *(_OWORD *)(v141 + 48) = v145;
      *(_OWORD *)unint64_t v141 = v143;
      *(_OWORD *)(v141 + 16) = v144;
      long long v146 = *(_OWORD *)(v142 + 64);
      long long v147 = *(_OWORD *)(v142 + 80);
      long long v148 = *(_OWORD *)(v142 + 96);
      *(unsigned char *)(v141 + 112) = *(unsigned char *)(v142 + 112);
      *(_OWORD *)(v141 + 80) = v147;
      *(_OWORD *)(v141 + 96) = v148;
      *(_OWORD *)(v141 + 64) = v146;
      char v50 = 6;
      break;
    case 7u:
      long long v75 = *((_OWORD *)v24 + 1);
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v24;
      *(_OWORD *)(v22 + 16) = v75;
      unint64_t v76 = (void *)((v25 + v22) & v47);
      unint64_t v77 = (unsigned __int8 *)((unint64_t)&v24[v25] & v47);
      unsigned int v78 = v77[v35];
      unsigned int v79 = v78 - 5;
      if (v78 >= 5)
      {
        if (v35 <= 3) {
          uint64_t v80 = v35;
        }
        else {
          uint64_t v80 = 4;
        }
        switch(v80)
        {
          case 1:
            int v81 = *v77;
            goto LABEL_108;
          case 2:
            int v81 = *(unsigned __int16 *)v77;
            goto LABEL_108;
          case 3:
            int v81 = *(unsigned __int16 *)v77 | (v77[2] << 16);
            goto LABEL_108;
          case 4:
            int v81 = *(_DWORD *)v77;
LABEL_108:
            if (v35 < 4) {
              unsigned int v78 = (v81 | (v79 << (8 * v35))) + 5;
            }
            else {
              unsigned int v78 = v81 + 5;
            }
            break;
          default:
            break;
        }
      }
      switch(v78)
      {
        case 1u:
          unint64_t v160 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v367 + 32);
          uint64_t v352 = v22;
          uint64_t v360 = v17;
          int v344 = v24;
          uint64_t v161 = v39;
          uint64_t v333 = v42;
          unint64_t v337 = v33;
          uint64_t v162 = v35;
          v160(v76, v77, v378);
          v160((void *)(((unint64_t)v76 + v9 + v27) & v48), (unsigned __int8 *)((unint64_t)&v77[v9 + v27] & v48), v378);
          uint64_t v39 = v161;
          uint64_t v35 = v162;
          uint64_t v42 = v333;
          unint64_t v33 = v337;
          uint64_t v24 = v344;
          uint64_t v22 = v352;
          uint64_t v17 = v360;
          uint64_t v49 = ~v12;
          uint64_t v29 = v12 + 8;
          char v159 = 1;
          break;
        case 2u:
          *unint64_t v76 = *(void *)v77;
          char v159 = 2;
          break;
        case 3u:
          *(_OWORD *)unint64_t v76 = *(_OWORD *)v77;
          char v159 = 3;
          break;
        case 4u:
          *unint64_t v76 = *(void *)v77;
          unint64_t v163 = ((unint64_t)v76 + v29) & v49;
          unint64_t v164 = (unint64_t)&v77[v29] & v49;
          uint64_t v353 = v22;
          uint64_t v361 = v17;
          unsigned int v345 = v24;
          uint64_t v165 = v39;
          uint64_t v166 = v12 + 8;
          uint64_t v167 = ~v12;
          unint64_t v168 = v33;
          long long v169 = v76;
          uint64_t v170 = v42;
          uint64_t v171 = v35;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v374 + 32))(v163, v164, v375);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v376 + 32))((v31 + v163) & v373, (v31 + v164) & v373, v377);
          uint64_t v39 = v165;
          uint64_t v35 = v171;
          uint64_t v42 = v170;
          unint64_t v76 = v169;
          unint64_t v33 = v168;
          uint64_t v24 = v345;
          uint64_t v22 = v353;
          uint64_t v17 = v361;
          uint64_t v49 = v167;
          uint64_t v29 = v166;
          char v159 = 4;
          break;
        default:
          uint64_t v149 = v17;
          uint64_t v150 = v22;
          unsigned int v151 = v77;
          uint64_t v152 = v24;
          uint64_t v153 = v39;
          uint64_t v154 = v29;
          uint64_t v155 = v49;
          unint64_t v156 = v33;
          uint64_t v157 = v42;
          uint64_t v158 = v35;
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v367 + 32))(v76, v151, v378);
          uint64_t v39 = v153;
          uint64_t v35 = v158;
          uint64_t v42 = v157;
          unint64_t v33 = v156;
          uint64_t v24 = v152;
          uint64_t v22 = v150;
          uint64_t v17 = v149;
          uint64_t v49 = v155;
          uint64_t v29 = v154;
          char v159 = 0;
          break;
      }
      uint64_t v52 = v380;
      *((unsigned char *)v76 + v35) = v159;
      unint64_t v172 = (v39 + v22) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v173 = (unint64_t)&v24[v39] & 0xFFFFFFFFFFFFFFF8;
      long long v174 = *(_OWORD *)v173;
      long long v175 = *(_OWORD *)(v173 + 16);
      long long v176 = *(_OWORD *)(v173 + 32);
      *(unsigned char *)(v172 + 48) = *(unsigned char *)(v173 + 48);
      *(_OWORD *)(v172 + 16) = v175;
      *(_OWORD *)(v172 + 32) = v176;
      *(_OWORD *)unint64_t v172 = v174;
      char v50 = 7;
      break;
    default:
      char v50 = 0;
      uint64_t v51 = *(void *)v24;
      *(unsigned char *)(v22 + 8) = v24[8];
      *(void *)uint64_t v22 = v51;
      uint64_t v52 = v380;
      break;
  }
  *(unsigned char *)(v22 + v42) = v50;
  uint64_t v191 = *(void *)(v52 + 32);
  uint64_t v192 = *(void *)(v191 - 8);
  uint64_t v193 = *(unsigned __int8 *)(v192 + 80);
  uint64_t v194 = v17 | v193 | 7;
  uint64_t v195 = v42 + v194 + 1;
  uint64_t v196 = v195 + v22;
  uint64_t v197 = (v195 + v22) & ~v194;
  unint64_t v198 = (unint64_t)&v24[v195];
  unint64_t v199 = (unint64_t)&v24[v195] & ~v194;
  uint64_t v200 = (v17 | v193) + 32;
  uint64_t v201 = v200 & ~v194;
  unint64_t v202 = *(void *)(v192 + 64);
  uint64_t v203 = v202 + v193;
  if (((v202 + v193) & ~v193) + v202 > v202) {
    v202 += (v202 + v193) & ~v193;
  }
  if (v202 <= v33) {
    unint64_t v202 = v33;
  }
  if (v202 <= 0x10) {
    uint64_t v204 = 16;
  }
  else {
    uint64_t v204 = v202;
  }
  uint64_t v205 = v204 + v201;
  unint64_t v206 = v204 + v201 + 1;
  unint64_t v207 = ((v206 + v194) & ~v194) + v206;
  if (v206 > v207) {
    unint64_t v207 = v205 + 1;
  }
  uint64_t v208 = v205 + 8;
  unint64_t v209 = (v205 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v207 <= v209 + 113) {
    unint64_t v207 = v209 + 113;
  }
  unint64_t v210 = v209 + 49;
  if (v207 > v210) {
    unint64_t v210 = v207;
  }
  if (v210 <= 0x19) {
    uint64_t v211 = 25;
  }
  else {
    uint64_t v211 = v210;
  }
  unsigned int v212 = *(unsigned __int8 *)(v199 + v211);
  unsigned int v213 = v212 - 8;
  if (v212 >= 8)
  {
    if (v211 <= 3) {
      uint64_t v214 = v211;
    }
    else {
      uint64_t v214 = 4;
    }
    switch(v214)
    {
      case 1:
        int v215 = *(unsigned __int8 *)v199;
        goto LABEL_156;
      case 2:
        int v215 = *(unsigned __int16 *)v199;
        goto LABEL_156;
      case 3:
        int v215 = *(unsigned __int16 *)((unint64_t)&v24[v195] & ~v194) | (*(unsigned __int8 *)(((unint64_t)&v24[v195] & ~v194)
                                                                                                 + 2) << 16);
        goto LABEL_156;
      case 4:
        int v215 = *(_DWORD *)v199;
LABEL_156:
        int v216 = (v215 | (v213 << (8 * v211))) + 8;
        unsigned int v212 = v215 + 8;
        if (v211 < 4) {
          unsigned int v212 = v216;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v217 = ~v194;
  uint64_t v218 = ~v193;
  switch(v212)
  {
    case 1u:
      long long v222 = *(_OWORD *)v199;
      *(_OWORD *)(v197 + 9) = *(_OWORD *)(v199 + 9);
      *(_OWORD *)uint64_t v197 = v222;
      char v219 = 1;
      uint64_t result = v384;
      break;
    case 2u:
      *(void *)uint64_t v197 = *(void *)v199;
      char v219 = 2;
      uint64_t result = v384;
      break;
    case 3u:
      *(_OWORD *)uint64_t v197 = *(_OWORD *)v199;
      char v219 = 3;
      uint64_t result = v384;
      break;
    case 4u:
      long long v223 = *(_OWORD *)(v199 + 16);
      *(_OWORD *)uint64_t v197 = *(_OWORD *)v199;
      *(_OWORD *)(v197 + 16) = v223;
      unint64_t v224 = (void *)((v200 + v197) & v217);
      unint64_t v225 = (unsigned __int8 *)((v200 + v199) & v217);
      unsigned int v226 = v225[v204];
      unsigned int v227 = v226 - 5;
      if (v226 >= 5)
      {
        if (v204 <= 3) {
          uint64_t v228 = v204;
        }
        else {
          uint64_t v228 = 4;
        }
        switch(v228)
        {
          case 1:
            int v229 = *v225;
            goto LABEL_190;
          case 2:
            int v229 = *(unsigned __int16 *)v225;
            goto LABEL_190;
          case 3:
            int v229 = *(unsigned __int16 *)v225 | (*(unsigned __int8 *)(((v200 + v199) & v217) + 2) << 16);
            goto LABEL_190;
          case 4:
            int v229 = *(_DWORD *)v225;
LABEL_190:
            int v251 = (v229 | (v227 << (8 * v204))) + 5;
            unsigned int v226 = v229 + 5;
            if (v204 < 4) {
              unsigned int v226 = v251;
            }
            break;
          default:
            break;
        }
      }
      switch(v226)
      {
        case 1u:
          unsigned int v256 = *(void (**)(unint64_t, unint64_t, uint64_t))(v192 + 32);
          uint64_t v368 = v204;
          uint64_t v257 = v191;
          uint64_t v258 = v203;
          uint64_t v259 = v218;
          ((void (*)(void *, unsigned __int8 *))v256)(v224, v225);
          v256(((unint64_t)v224 + v258) & v259, (unint64_t)&v225[v258] & v259, v257);
          uint64_t v204 = v368;
          char v255 = 1;
          break;
        case 2u:
          *unint64_t v224 = *(void *)v225;
          char v255 = 2;
          break;
        case 3u:
          *(_OWORD *)unint64_t v224 = *(_OWORD *)v225;
          char v255 = 3;
          break;
        case 4u:
          *unint64_t v224 = *(void *)v225;
          unint64_t v260 = ((unint64_t)v224 + v29) & v49;
          unint64_t v261 = (unint64_t)&v225[v29] & v49;
          uint64_t v262 = v204;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v374 + 32))(v260, v261, v375);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v376 + 32))((v366 + v260) & v373, (v366 + v261) & v373, v377);
          uint64_t v204 = v262;
          char v255 = 4;
          break;
        default:
          uint64_t v252 = (v200 + v197) & v217;
          unint64_t v253 = (v200 + v199) & v217;
          uint64_t v254 = v204;
          (*(void (**)(uint64_t, unint64_t))(v192 + 32))(v252, v253);
          uint64_t v204 = v254;
          char v255 = 0;
          break;
      }
      uint64_t result = v384;
      *((unsigned char *)v224 + v204) = v255;
      char v219 = 4;
      break;
    case 5u:
      long long v230 = *(_OWORD *)(v199 + 16);
      *(_OWORD *)uint64_t v197 = *(_OWORD *)v199;
      *(_OWORD *)(v197 + 16) = v230;
      int v231 = (void *)((v200 + v197) & v217);
      int v232 = (unsigned __int8 *)((v200 + v199) & v217);
      unsigned int v233 = v232[v204];
      unsigned int v234 = v233 - 5;
      if (v233 >= 5)
      {
        if (v204 <= 3) {
          uint64_t v235 = v204;
        }
        else {
          uint64_t v235 = 4;
        }
        switch(v235)
        {
          case 1:
            int v236 = *v232;
            goto LABEL_202;
          case 2:
            int v236 = *(unsigned __int16 *)v232;
            goto LABEL_202;
          case 3:
            int v236 = *(unsigned __int16 *)v232 | (*(unsigned __int8 *)(((v200 + v199) & v217) + 2) << 16);
            goto LABEL_202;
          case 4:
            int v236 = *(_DWORD *)v232;
LABEL_202:
            int v263 = (v236 | (v234 << (8 * v204))) + 5;
            unsigned int v233 = v236 + 5;
            if (v204 < 4) {
              unsigned int v233 = v263;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v346 = v218;
      uint64_t v354 = v203;
      uint64_t v363 = v49;
      uint64_t v365 = v29;
      uint64_t v379 = v192;
      uint64_t v381 = v191;
      switch(v233)
      {
        case 1u:
          uint64_t v338 = *(void (**)(uint64_t, unint64_t))(v192 + 32);
          uint64_t v369 = v204;
          v338((v200 + v197) & v217, (v200 + v199) & v217);
          ((void (*)(uint64_t, unint64_t, uint64_t))v338)((v354 + ((v200 + v197) & v217)) & v346, (unint64_t)&v232[v354] & v346, v381);
          int v231 = (void *)((v200 + v197) & v217);
          uint64_t v204 = v369;
          char v265 = 1;
          break;
        case 2u:
          *int v231 = *(void *)v232;
          char v265 = 2;
          break;
        case 3u:
          *(_OWORD *)int v231 = *(_OWORD *)v232;
          char v265 = 3;
          break;
        case 4u:
          *int v231 = *(void *)v232;
          unint64_t v339 = ((unint64_t)v231 + v29) & v49;
          unint64_t v266 = (unint64_t)&v232[v29] & v49;
          uint64_t v370 = v204;
          (*(void (**)(void))(v374 + 32))();
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v376 + 32))((v366 + v339) & v373, (v366 + v266) & v373, v377);
          int v231 = (void *)((v200 + v197) & v217);
          uint64_t v204 = v370;
          char v265 = 4;
          break;
        default:
          uint64_t v264 = v204;
          (*(void (**)(uint64_t, unint64_t))(v192 + 32))((v200 + v197) & v217, (v200 + v199) & v217);
          int v231 = (void *)((v200 + v197) & v217);
          uint64_t v204 = v264;
          char v265 = 0;
          break;
      }
      *((unsigned char *)v231 + v204) = v265;
      unint64_t v267 = (_OWORD *)(((v196 | v194) + v206) & v217);
      unsigned int v268 = (_OWORD *)(((v198 | v194) + v206) & v217);
      long long v269 = v268[1];
      *unint64_t v267 = *v268;
      v267[1] = v269;
      unint64_t v270 = (void *)(((unint64_t)v267 + v200) & v217);
      uint64_t v271 = (unsigned __int8 *)(((unint64_t)v268 + v200) & v217);
      unsigned int v272 = v271[v204];
      unsigned int v273 = v272 - 5;
      if (v272 < 5)
      {
        uint64_t v276 = v363;
        uint64_t v275 = v365;
        uint64_t v278 = v379;
        uint64_t v277 = v381;
      }
      else
      {
        if (v204 <= 3) {
          uint64_t v274 = v204;
        }
        else {
          uint64_t v274 = 4;
        }
        uint64_t v276 = v363;
        uint64_t v275 = v365;
        uint64_t v278 = v379;
        uint64_t v277 = v381;
        switch(v274)
        {
          case 1:
            int v279 = *v271;
            goto LABEL_244;
          case 2:
            int v279 = *(unsigned __int16 *)v271;
            goto LABEL_244;
          case 3:
            int v279 = *(unsigned __int16 *)v271 | (v271[2] << 16);
            goto LABEL_244;
          case 4:
            int v279 = *(_DWORD *)v271;
LABEL_244:
            int v315 = (v279 | (v273 << (8 * v204))) + 5;
            unsigned int v272 = v279 + 5;
            if (v204 < 4) {
              unsigned int v272 = v315;
            }
            break;
          default:
            break;
        }
      }
      switch(v272)
      {
        case 1u:
          int v318 = *(void (**)(unint64_t, unint64_t, uint64_t))(v278 + 32);
          uint64_t v319 = v204;
          uint64_t v320 = v277;
          ((void (*)(void *, unsigned __int8 *))v318)(v270, v271);
          v318(((unint64_t)v270 + v354) & v346, (unint64_t)&v271[v354] & v346, v320);
          uint64_t v204 = v319;
          char v317 = 1;
          break;
        case 2u:
          void *v270 = *(void *)v271;
          char v317 = 2;
          break;
        case 3u:
          *(_OWORD *)unint64_t v270 = *(_OWORD *)v271;
          char v317 = 3;
          break;
        case 4u:
          void *v270 = *(void *)v271;
          unint64_t v321 = ((unint64_t)v270 + v275) & v276;
          unint64_t v322 = (unint64_t)&v271[v275] & v276;
          uint64_t v323 = v204;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v374 + 32))(v321, v322, v375);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v376 + 32))((v366 + v321) & v373, (v366 + v322) & v373, v377);
          uint64_t v204 = v323;
          char v317 = 4;
          break;
        default:
          uint64_t v316 = v204;
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v278 + 32))(v270, v271, v277);
          uint64_t v204 = v316;
          char v317 = 0;
          break;
      }
      uint64_t result = v384;
      *((unsigned char *)v270 + v204) = v317;
      char v219 = 5;
      break;
    case 6u:
      long long v237 = *(_OWORD *)(v199 + 16);
      *(_OWORD *)uint64_t v197 = *(_OWORD *)v199;
      *(_OWORD *)(v197 + 16) = v237;
      unsigned int v238 = (void *)((v200 + v197) & v217);
      unsigned int v239 = (unsigned __int8 *)((v200 + v199) & v217);
      unsigned int v240 = v239[v204];
      unsigned int v241 = v240 - 5;
      if (v240 >= 5)
      {
        if (v204 <= 3) {
          uint64_t v242 = v204;
        }
        else {
          uint64_t v242 = 4;
        }
        switch(v242)
        {
          case 1:
            int v243 = *v239;
            goto LABEL_220;
          case 2:
            int v243 = *(unsigned __int16 *)v239;
            goto LABEL_220;
          case 3:
            int v243 = *(unsigned __int16 *)v239 | (*(unsigned __int8 *)(((v200 + v199) & v217) + 2) << 16);
            goto LABEL_220;
          case 4:
            int v243 = *(_DWORD *)v239;
LABEL_220:
            int v280 = (v243 | (v241 << (8 * v204))) + 5;
            unsigned int v240 = v243 + 5;
            if (v204 < 4) {
              unsigned int v240 = v280;
            }
            break;
          default:
            break;
        }
      }
      switch(v240)
      {
        case 1u:
          uint64_t v288 = *(void (**)(unint64_t, unint64_t, uint64_t))(v192 + 32);
          uint64_t v371 = v204;
          uint64_t v382 = v191;
          uint64_t v289 = v203;
          uint64_t v290 = v218;
          ((void (*)(void *, unsigned __int8 *))v288)(v238, v239);
          v288(((unint64_t)v238 + v289) & v290, (unint64_t)&v239[v289] & v290, v382);
          uint64_t v204 = v371;
          char v284 = 1;
          break;
        case 2u:
          *unsigned int v238 = *(void *)v239;
          char v284 = 2;
          break;
        case 3u:
          *(_OWORD *)unsigned int v238 = *(_OWORD *)v239;
          char v284 = 3;
          break;
        case 4u:
          *unsigned int v238 = *(void *)v239;
          unint64_t v285 = ((unint64_t)v238 + v29) & v49;
          unint64_t v286 = (unint64_t)&v239[v29] & v49;
          uint64_t v287 = v204;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v374 + 32))(v285, v286, v375);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v376 + 32))((v366 + v285) & v373, (v366 + v286) & v373, v377);
          uint64_t v204 = v287;
          char v284 = 4;
          break;
        default:
          uint64_t v281 = (v200 + v197) & v217;
          unint64_t v282 = (v200 + v199) & v217;
          uint64_t v283 = v204;
          (*(void (**)(uint64_t, unint64_t))(v192 + 32))(v281, v282);
          uint64_t v204 = v283;
          char v284 = 0;
          break;
      }
      uint64_t result = v384;
      *((unsigned char *)v238 + v204) = v284;
      unint64_t v291 = (v208 + v197) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v292 = (v208 + v199) & 0xFFFFFFFFFFFFFFF8;
      long long v293 = *(_OWORD *)v292;
      long long v294 = *(_OWORD *)(v292 + 16);
      long long v295 = *(_OWORD *)(v292 + 48);
      *(_OWORD *)(v291 + 32) = *(_OWORD *)(v292 + 32);
      *(_OWORD *)(v291 + 48) = v295;
      *(_OWORD *)unint64_t v291 = v293;
      *(_OWORD *)(v291 + 16) = v294;
      long long v296 = *(_OWORD *)(v292 + 64);
      long long v297 = *(_OWORD *)(v292 + 80);
      long long v298 = *(_OWORD *)(v292 + 96);
      *(unsigned char *)(v291 + 112) = *(unsigned char *)(v292 + 112);
      *(_OWORD *)(v291 + 80) = v297;
      *(_OWORD *)(v291 + 96) = v298;
      *(_OWORD *)(v291 + 64) = v296;
      char v219 = 6;
      break;
    case 7u:
      long long v244 = *(_OWORD *)(v199 + 16);
      *(_OWORD *)uint64_t v197 = *(_OWORD *)v199;
      *(_OWORD *)(v197 + 16) = v244;
      uint64_t v245 = (void *)((v200 + v197) & v217);
      int v246 = (unsigned __int8 *)((v200 + v199) & v217);
      unsigned int v247 = v246[v204];
      unsigned int v248 = v247 - 5;
      if (v247 >= 5)
      {
        if (v204 <= 3) {
          uint64_t v249 = v204;
        }
        else {
          uint64_t v249 = 4;
        }
        switch(v249)
        {
          case 1:
            int v250 = *v246;
            goto LABEL_232;
          case 2:
            int v250 = *(unsigned __int16 *)v246;
            goto LABEL_232;
          case 3:
            int v250 = *(unsigned __int16 *)v246 | (*(unsigned __int8 *)(((v200 + v199) & v217) + 2) << 16);
            goto LABEL_232;
          case 4:
            int v250 = *(_DWORD *)v246;
LABEL_232:
            int v299 = (v250 | (v248 << (8 * v204))) + 5;
            unsigned int v247 = v250 + 5;
            if (v204 < 4) {
              unsigned int v247 = v299;
            }
            break;
          default:
            break;
        }
      }
      switch(v247)
      {
        case 1u:
          unint64_t v304 = *(void (**)(unint64_t, unint64_t, uint64_t))(v192 + 32);
          uint64_t v372 = v204;
          uint64_t v383 = v191;
          uint64_t v305 = v203;
          uint64_t v306 = v218;
          ((void (*)(void *, unsigned __int8 *))v304)(v245, v246);
          v304(((unint64_t)v245 + v305) & v306, (unint64_t)&v246[v305] & v306, v383);
          uint64_t v204 = v372;
          char v303 = 1;
          break;
        case 2u:
          *uint64_t v245 = *(void *)v246;
          char v303 = 2;
          break;
        case 3u:
          *(_OWORD *)uint64_t v245 = *(_OWORD *)v246;
          char v303 = 3;
          break;
        case 4u:
          *uint64_t v245 = *(void *)v246;
          unint64_t v307 = ((unint64_t)v245 + v29) & v49;
          unint64_t v308 = (unint64_t)&v246[v29] & v49;
          uint64_t v309 = v204;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v374 + 32))(v307, v308, v375);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v376 + 32))((v366 + v307) & v373, (v366 + v308) & v373, v377);
          uint64_t v204 = v309;
          char v303 = 4;
          break;
        default:
          uint64_t v300 = (v200 + v197) & v217;
          unint64_t v301 = (v200 + v199) & v217;
          uint64_t v302 = v204;
          (*(void (**)(uint64_t, unint64_t))(v192 + 32))(v300, v301);
          uint64_t v204 = v302;
          char v303 = 0;
          break;
      }
      uint64_t result = v384;
      *((unsigned char *)v245 + v204) = v303;
      unint64_t v310 = (v208 + v197) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v311 = (v208 + v199) & 0xFFFFFFFFFFFFFFF8;
      long long v312 = *(_OWORD *)v311;
      long long v313 = *(_OWORD *)(v311 + 16);
      long long v314 = *(_OWORD *)(v311 + 32);
      *(unsigned char *)(v310 + 48) = *(unsigned char *)(v311 + 48);
      *(_OWORD *)(v310 + 16) = v313;
      *(_OWORD *)(v310 + 32) = v314;
      *(_OWORD *)unint64_t v310 = v312;
      char v219 = 7;
      break;
    default:
      char v219 = 0;
      uint64_t v220 = *(void *)v199;
      *(unsigned char *)(v197 + 8) = *(unsigned char *)(v199 + 8);
      *(void *)uint64_t v197 = v220;
      uint64_t result = v384;
      break;
  }
  *(unsigned char *)(v197 + v211) = v219;
  *(void *)(((v197 | 7) + v211 + 1) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v199 | 7) + v211 + 1) & 0xFFFFFFFFFFFFFFF8);
  return result;
}

uint64_t sub_21F832A70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v344 = *(void *)(v3 + 24);
  uint64_t v8 = *(void *)(v344 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v333 = sub_21FA24310();
  uint64_t v10 = *(void *)(v333 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v335 = sub_21FA24320();
  uint64_t v12 = *(void *)(v335 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = v13 | v11;
  uint64_t v15 = v13 | v11 | v9;
  uint64_t v16 = v15 | 7;
  uint64_t v17 = (v15 | 7) + v7;
  uint64_t v348 = a1;
  uint64_t v18 = v17 + a1;
  uint64_t v19 = ~(v15 | 7);
  uint64_t v20 = (v17 + a1) & v19;
  uint64_t v21 = v17 + a2;
  uint64_t v22 = v21 & v19;
  uint64_t v334 = v12;
  uint64_t v331 = v13;
  uint64_t v332 = v10;
  if (v20 == (v21 & v19))
  {
    unint64_t v37 = *(void *)(v8 + 64);
    uint64_t v38 = (v15 + 32) & v19;
    if (((v37 + v9) & ~v9) + v37 > v37) {
      v37 += (v37 + v9) & ~v9;
    }
    uint64_t v328 = ~v11;
    uint64_t v329 = *(void *)(v10 + 64);
    uint64_t v327 = v11 + 8;
    uint64_t v330 = ~v13;
    unint64_t v26 = ((((v11 + 8) & ~v11) + v13 + v329) & ~v13) + *(void *)(v12 + 64);
    if (v37 <= v26) {
      unint64_t v37 = v26;
    }
    if (v37 <= 0x10) {
      unint64_t v37 = 16;
    }
    unint64_t v39 = (v38 | 1) + v37;
    unint64_t v40 = ((v39 + v16) & v19) + v39;
    if (v39 > v40) {
      unint64_t v40 = v39;
    }
    unint64_t v41 = (v39 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v40 <= v41 + 113) {
      unint64_t v40 = v41 + 113;
    }
    unint64_t v42 = v41 + 49;
    if (v40 > v42) {
      unint64_t v42 = v40;
    }
    if (v42 <= 0x19) {
      uint64_t v32 = 25;
    }
    else {
      uint64_t v32 = v42;
    }
  }
  else
  {
    uint64_t v310 = v21;
    uint64_t v323 = v18;
    uint64_t v342 = v15 + 32;
    uint64_t v23 = (v15 + 32) & v19;
    unint64_t v24 = *(void *)(v8 + 64);
    uint64_t v309 = v24 + v9;
    unint64_t v25 = ((v24 + v9) & ~v9) + v24;
    unint64_t v312 = v24;
    if (v25 <= v24) {
      unint64_t v25 = *(void *)(v8 + 64);
    }
    uint64_t v328 = ~v11;
    uint64_t v325 = v8;
    uint64_t v327 = v11 + 8;
    uint64_t v329 = *(void *)(v10 + 64);
    uint64_t v330 = ~v13;
    unint64_t v26 = ((((v11 + 8) & ~v11) + v13 + v329) & ~v13) + *(void *)(v12 + 64);
    if (v25 <= v26) {
      unint64_t v25 = v26;
    }
    if (v25 <= 0x10) {
      uint64_t v27 = 16;
    }
    else {
      uint64_t v27 = v25;
    }
    unint64_t v28 = (v23 | 1) + v27;
    unint64_t v29 = ((v28 + v16) & v19) + v28;
    if (v28 > v29) {
      unint64_t v29 = v28;
    }
    unint64_t v30 = (v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v29 <= v30 + 113) {
      unint64_t v29 = v30 + 113;
    }
    unint64_t v31 = v30 + 49;
    if (v29 <= v31) {
      unint64_t v29 = v31;
    }
    if (v29 <= 0x19) {
      uint64_t v32 = 25;
    }
    else {
      uint64_t v32 = v29;
    }
    unsigned int v33 = *(unsigned __int8 *)(v20 + v32);
    unsigned int v34 = v33 - 8;
    if (v33 >= 8)
    {
      if (v32 <= 3) {
        uint64_t v35 = v32;
      }
      else {
        uint64_t v35 = 4;
      }
      switch(v35)
      {
        case 1:
          int v36 = *(unsigned __int8 *)v20;
          if (v32 < 4) {
            goto LABEL_41;
          }
          goto LABEL_45;
        case 2:
          int v36 = *(unsigned __int16 *)v20;
          if (v32 < 4) {
            goto LABEL_41;
          }
          goto LABEL_45;
        case 3:
          int v36 = *(unsigned __int16 *)v20 | (*(unsigned __int8 *)(v20 + 2) << 16);
          if (v32 < 4) {
            goto LABEL_41;
          }
          goto LABEL_45;
        case 4:
          int v36 = *(_DWORD *)v20;
          if (v32 < 4) {
LABEL_41:
          }
            unsigned int v33 = (v36 | (v34 << (8 * v32))) + 8;
          else {
LABEL_45:
          }
            unsigned int v33 = v36 + 8;
          break;
        default:
          break;
      }
    }
    uint64_t v346 = v27;
    uint64_t v321 = ~v9;
    uint64_t v336 = v14;
    switch(v33)
    {
      case 2u:
LABEL_47:
        swift_release();
        goto LABEL_140;
      case 3u:
LABEL_48:
        swift_release();
        swift_release();
        goto LABEL_140;
      case 4u:
        sub_21F7656A8(*(void *)v20, *(void *)(v20 + 8), *(unsigned char *)(v20 + 16));
        swift_bridgeObjectRelease();
        unsigned int v43 = (unsigned __int8 *)((v342 + v20) & v19);
        unsigned int v44 = v43[v346];
        unsigned int v45 = v44 - 5;
        if (v44 >= 5)
        {
          if (v346 <= 3) {
            uint64_t v46 = v346;
          }
          else {
            uint64_t v46 = 4;
          }
          switch(v46)
          {
            case 1:
              int v47 = *v43;
              goto LABEL_76;
            case 2:
              int v47 = *(unsigned __int16 *)v43;
              goto LABEL_76;
            case 3:
              int v47 = *(unsigned __int16 *)v43 | (*(unsigned __int8 *)(((v342 + v20) & v19) + 2) << 16);
              goto LABEL_76;
            case 4:
              int v47 = *(_DWORD *)v43;
LABEL_76:
              if (v346 < 4) {
                unsigned int v44 = (v47 | (v45 << (8 * v346))) + 5;
              }
              else {
                unsigned int v44 = v47 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v44)
        {
          case 1u:
            uint64_t v317 = v3;
            uint64_t v305 = *(void (**)(uint64_t, uint64_t))(v325 + 8);
            v305((v342 + v20) & v19, v344);
            unsigned int v63 = &v43[v9 + v312];
            goto LABEL_138;
          case 2u:
            goto LABEL_47;
          case 3u:
            goto LABEL_48;
          case 4u:
            goto LABEL_139;
          default:
            goto LABEL_136;
        }
      case 5u:
        sub_21F7656A8(*(void *)v20, *(void *)(v20 + 8), *(unsigned char *)(v20 + 16));
        swift_bridgeObjectRelease();
        uint64_t v48 = (unsigned __int8 *)((v342 + v20) & v19);
        unsigned int v49 = v48[v346];
        unsigned int v50 = v49 - 5;
        if (v49 >= 5)
        {
          if (v346 <= 3) {
            uint64_t v51 = v346;
          }
          else {
            uint64_t v51 = 4;
          }
          switch(v51)
          {
            case 1:
              int v52 = *v48;
              goto LABEL_84;
            case 2:
              int v52 = *(unsigned __int16 *)v48;
              goto LABEL_84;
            case 3:
              int v52 = *(unsigned __int16 *)v48 | (*(unsigned __int8 *)(((v342 + v20) & v19) + 2) << 16);
              goto LABEL_84;
            case 4:
              int v52 = *(_DWORD *)v48;
LABEL_84:
              if (v346 < 4) {
                unsigned int v49 = (v52 | (v50 << (8 * v346))) + 5;
              }
              else {
                unsigned int v49 = v52 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v49)
        {
          case 1u:
            uint64_t v306 = *(void (**)(uint64_t, uint64_t))(v325 + 8);
            v306((v342 + v20) & v19, v344);
            v306((unint64_t)&v48[v9 + v312] & v321, v344);
            break;
          case 2u:
            swift_release();
            break;
          case 3u:
            swift_release();
            swift_release();
            break;
          case 4u:
            swift_release();
            unint64_t v64 = (unint64_t)&v48[v327] & v328;
            (*(void (**)(unint64_t, uint64_t))(v332 + 8))(v64, v333);
            (*(void (**)(unint64_t, uint64_t))(v334 + 8))((v64 + v331 + v329) & v330, v335);
            break;
          default:
            (*(void (**)(uint64_t, uint64_t))(v325 + 8))((v342 + v20) & v19, v344);
            break;
        }
        uint64_t v65 = ((v323 | v16) + v28) & v19;
        sub_21F7656A8(*(void *)v65, *(void *)(v65 + 8), *(unsigned char *)(v65 + 0x10));
        swift_bridgeObjectRelease();
        unsigned int v43 = (unsigned __int8 *)((v342 + v65) & v19);
        unsigned int v66 = v43[v346];
        unsigned int v67 = v66 - 5;
        if (v66 >= 5)
        {
          if (v346 <= 3) {
            uint64_t v68 = v346;
          }
          else {
            uint64_t v68 = 4;
          }
          switch(v68)
          {
            case 1:
              int v69 = *v43;
              goto LABEL_132;
            case 2:
              int v69 = *(unsigned __int16 *)v43;
              goto LABEL_132;
            case 3:
              int v69 = *(unsigned __int16 *)v43 | (v43[2] << 16);
              goto LABEL_132;
            case 4:
              int v69 = *(_DWORD *)v43;
LABEL_132:
              if (v346 < 4) {
                unsigned int v66 = (v69 | (v67 << (8 * v346))) + 5;
              }
              else {
                unsigned int v66 = v69 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v66)
        {
          case 1u:
            uint64_t v317 = v3;
            uint64_t v305 = *(void (**)(uint64_t, uint64_t))(v325 + 8);
            v305((uint64_t)v43, v344);
            unsigned int v63 = &v43[v309];
LABEL_138:
            v305((unint64_t)v63 & v321, v344);
            uint64_t v3 = v317;
            break;
          case 2u:
            goto LABEL_47;
          case 3u:
            goto LABEL_48;
          case 4u:
LABEL_139:
            swift_release();
            unint64_t v76 = (unint64_t)&v43[v327] & v328;
            (*(void (**)(unint64_t, uint64_t))(v332 + 8))(v76, v333);
            (*(void (**)(unint64_t, uint64_t))(v334 + 8))((v329 + v331 + v76) & v330, v335);
            break;
          default:
LABEL_136:
            (*(void (**)(unsigned __int8 *, uint64_t))(v325 + 8))(v43, v344);
            break;
        }
        goto LABEL_140;
      case 6u:
        sub_21F7656A8(*(void *)v20, *(void *)(v20 + 8), *(unsigned char *)(v20 + 16));
        swift_bridgeObjectRelease();
        long long v53 = (unsigned __int8 *)((v342 + v20) & v19);
        unsigned int v54 = v53[v346];
        unsigned int v55 = v54 - 5;
        if (v54 >= 5)
        {
          if (v346 <= 3) {
            uint64_t v56 = v346;
          }
          else {
            uint64_t v56 = 4;
          }
          switch(v56)
          {
            case 1:
              int v57 = *v53;
              goto LABEL_102;
            case 2:
              int v57 = *(unsigned __int16 *)v53;
              goto LABEL_102;
            case 3:
              int v57 = *(unsigned __int16 *)v53 | (*(unsigned __int8 *)(((v342 + v20) & v19) + 2) << 16);
              goto LABEL_102;
            case 4:
              int v57 = *(_DWORD *)v53;
LABEL_102:
              if (v346 < 4) {
                unsigned int v54 = (v57 | (v55 << (8 * v346))) + 5;
              }
              else {
                unsigned int v54 = v57 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v54)
        {
          case 1u:
            unint64_t v307 = *(void (**)(uint64_t, uint64_t))(v325 + 8);
            v307((v342 + v20) & v19, v344);
            v307((unint64_t)&v53[v9 + v312] & v321, v344);
            break;
          case 2u:
            swift_release();
            break;
          case 3u:
            swift_release();
            swift_release();
            break;
          case 4u:
            swift_release();
            unint64_t v70 = (unint64_t)&v53[v327] & v328;
            (*(void (**)(unint64_t, uint64_t))(v332 + 8))(v70, v333);
            (*(void (**)(unint64_t, uint64_t))(v334 + 8))((v70 + v331 + v329) & v330, v335);
            break;
          default:
            (*(void (**)(uint64_t, uint64_t))(v325 + 8))((v342 + v20) & v19, v344);
            break;
        }
        unint64_t v71 = ((v20 | 7) + v28) & 0xFFFFFFFFFFFFFFF8;
        int v72 = *(unsigned __int8 *)(v71 + 96);
        if (v72 != 255) {
          sub_21F82B5F8(*(void *)(v71 + 88), v72 & 1);
        }
        sub_21F82B5F8(*(void *)(v71 + 104), *(unsigned char *)(v71 + 112));
        goto LABEL_140;
      case 7u:
        sub_21F7656A8(*(void *)v20, *(void *)(v20 + 8), *(unsigned char *)(v20 + 16));
        swift_bridgeObjectRelease();
        unsigned int v58 = (unsigned __int8 *)((v342 + v20) & v19);
        unsigned int v59 = v58[v346];
        unsigned int v60 = v59 - 5;
        if (v59 >= 5)
        {
          if (v346 <= 3) {
            uint64_t v61 = v346;
          }
          else {
            uint64_t v61 = 4;
          }
          switch(v61)
          {
            case 1:
              int v62 = *v58;
              goto LABEL_118;
            case 2:
              int v62 = *(unsigned __int16 *)v58;
              goto LABEL_118;
            case 3:
              int v62 = *(unsigned __int16 *)v58 | (*(unsigned __int8 *)(((v342 + v20) & v19) + 2) << 16);
              goto LABEL_118;
            case 4:
              int v62 = *(_DWORD *)v58;
LABEL_118:
              if (v346 < 4) {
                unsigned int v59 = (v62 | (v60 << (8 * v346))) + 5;
              }
              else {
                unsigned int v59 = v62 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v59)
        {
          case 1u:
            unint64_t v308 = *(void (**)(uint64_t, uint64_t))(v325 + 8);
            v308((v342 + v20) & v19, v344);
            v308((unint64_t)&v58[v9 + v312] & v321, v344);
            break;
          case 2u:
            swift_release();
            break;
          case 3u:
            swift_release();
            swift_release();
            break;
          case 4u:
            swift_release();
            unint64_t v73 = (unint64_t)&v58[v327] & v328;
            (*(void (**)(unint64_t, uint64_t))(v332 + 8))(v73, v333);
            (*(void (**)(unint64_t, uint64_t))(v334 + 8))((v73 + v331 + v329) & v330, v335);
            break;
          default:
            (*(void (**)(uint64_t, uint64_t))(v325 + 8))((v342 + v20) & v19, v344);
            break;
        }
        unint64_t v74 = ((v20 | 7) + v28) & 0xFFFFFFFFFFFFFFF8;
        sub_21F770E38(*(void *)(v74 + 8), *(void *)(v74 + 16), *(unsigned char *)(v74 + 24));
        unsigned int v75 = *(unsigned __int8 *)(v74 + 48);
        uint64_t v14 = v336;
        if (v75 > 0xFB) {
          goto LABEL_141;
        }
        sub_21F770E38(*(void *)(v74 + 32), *(void *)(v74 + 40), v75);
LABEL_140:
        uint64_t v14 = v336;
LABEL_141:
        unsigned int v77 = *(unsigned __int8 *)(v22 + v32);
        unsigned int v78 = v77 - 8;
        if (v77 < 8)
        {
          uint64_t v80 = v346;
        }
        else
        {
          if (v32 <= 3) {
            uint64_t v79 = v32;
          }
          else {
            uint64_t v79 = 4;
          }
          uint64_t v80 = v346;
          switch(v79)
          {
            case 1:
              int v81 = *(unsigned __int8 *)v22;
              if (v32 < 4) {
                goto LABEL_150;
              }
              goto LABEL_154;
            case 2:
              int v81 = *(unsigned __int16 *)v22;
              if (v32 < 4) {
                goto LABEL_150;
              }
              goto LABEL_154;
            case 3:
              int v81 = *(unsigned __int16 *)v22 | (*(unsigned __int8 *)(v22 + 2) << 16);
              if (v32 < 4) {
                goto LABEL_150;
              }
              goto LABEL_154;
            case 4:
              int v81 = *(_DWORD *)v22;
              if (v32 < 4) {
LABEL_150:
              }
                unsigned int v77 = (v81 | (v78 << (8 * v32))) + 8;
              else {
LABEL_154:
              }
                unsigned int v77 = v81 + 8;
              break;
            default:
              break;
          }
        }
        switch(v77)
        {
          case 1u:
            long long v83 = *(_OWORD *)v22;
            *(_OWORD *)(v20 + 9) = *(_OWORD *)(v22 + 9);
            *(_OWORD *)uint64_t v20 = v83;
            *(unsigned char *)(v20 + v32) = 1;
            goto LABEL_255;
          case 2u:
            *(void *)uint64_t v20 = *(void *)v22;
            *(unsigned char *)(v20 + v32) = 2;
            goto LABEL_255;
          case 3u:
            *(_OWORD *)uint64_t v20 = *(_OWORD *)v22;
            *(unsigned char *)(v20 + v32) = 3;
            goto LABEL_255;
          case 4u:
            uint64_t v318 = v3;
            long long v84 = *(_OWORD *)(v22 + 16);
            *(_OWORD *)uint64_t v20 = *(_OWORD *)v22;
            *(_OWORD *)(v20 + 16) = v84;
            unsigned int v85 = (void *)((v342 + v20) & v19);
            unint64_t v86 = (unsigned __int8 *)((v342 + v22) & v19);
            unsigned int v87 = v86[v80];
            unsigned int v88 = v87 - 5;
            if (v87 >= 5)
            {
              if (v80 <= 3) {
                uint64_t v89 = v80;
              }
              else {
                uint64_t v89 = 4;
              }
              switch(v89)
              {
                case 1:
                  int v90 = *v86;
                  goto LABEL_187;
                case 2:
                  int v90 = *(unsigned __int16 *)v86;
                  goto LABEL_187;
                case 3:
                  int v90 = *(unsigned __int16 *)v86 | (*(unsigned __int8 *)(((v342 + v22) & v19) + 2) << 16);
                  goto LABEL_187;
                case 4:
                  int v90 = *(_DWORD *)v86;
LABEL_187:
                  if (v80 < 4) {
                    unsigned int v87 = (v90 | (v88 << (8 * v80))) + 5;
                  }
                  else {
                    unsigned int v87 = v90 + 5;
                  }
                  break;
                default:
                  break;
              }
            }
            switch(v87)
            {
              case 1u:
                uint64_t v113 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v325 + 32);
                v113(v85, v86, v344);
                v113((void *)(((unint64_t)v85 + v9 + v312) & v321), (unsigned __int8 *)((unint64_t)&v86[v9 + v312] & v321), v344);
                uint64_t v80 = v346;
                uint64_t v14 = v336;
                char v112 = 1;
                break;
              case 2u:
                *unsigned int v85 = *(void *)v86;
                char v112 = 2;
                break;
              case 3u:
                *(_OWORD *)unsigned int v85 = *(_OWORD *)v86;
                char v112 = 3;
                break;
              case 4u:
                *unsigned int v85 = *(void *)v86;
                unint64_t v114 = (unint64_t)&v86[v327] & v328;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v332 + 32))(((unint64_t)v85 + v327) & v328, v114, v333);
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v334 + 32))(((((unint64_t)v85 + v327) & v328) + v331 + v329) & v330, (v114 + v331 + v329) & v330, v335);
                uint64_t v80 = v346;
                uint64_t v14 = v336;
                char v112 = 4;
                break;
              default:
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v325 + 32))((v342 + v20) & v19, (v342 + v22) & v19, v344);
                uint64_t v80 = v346;
                uint64_t v14 = v336;
                char v112 = 0;
                break;
            }
            *((unsigned char *)v85 + v80) = v112;
            char v115 = 4;
            goto LABEL_254;
          case 5u:
            uint64_t v318 = v3;
            long long v91 = *(_OWORD *)(v22 + 16);
            *(_OWORD *)uint64_t v20 = *(_OWORD *)v22;
            *(_OWORD *)(v20 + 16) = v91;
            uint64_t v92 = (void *)((v342 + v20) & v19);
            unint64_t v93 = (unsigned __int8 *)((v342 + v22) & v19);
            unsigned int v94 = v93[v80];
            unsigned int v95 = v94 - 5;
            if (v94 >= 5)
            {
              if (v80 <= 3) {
                uint64_t v96 = v80;
              }
              else {
                uint64_t v96 = 4;
              }
              switch(v96)
              {
                case 1:
                  int v97 = *v93;
                  goto LABEL_200;
                case 2:
                  int v97 = *(unsigned __int16 *)v93;
                  goto LABEL_200;
                case 3:
                  int v97 = *(unsigned __int16 *)v93 | (*(unsigned __int8 *)(((v342 + v22) & v19) + 2) << 16);
                  goto LABEL_200;
                case 4:
                  int v97 = *(_DWORD *)v93;
LABEL_200:
                  if (v80 < 4) {
                    unsigned int v94 = (v97 | (v95 << (8 * v80))) + 5;
                  }
                  else {
                    unsigned int v94 = v97 + 5;
                  }
                  break;
                default:
                  break;
              }
            }
            switch(v94)
            {
              case 1u:
                unint64_t v304 = *(void (**)(uint64_t, uint64_t, uint64_t))(v325 + 32);
                v304((v342 + v20) & v19, (v342 + v22) & v19, v344);
                v304((((v342 + v20) & v19) + v9 + v312) & v321, (unint64_t)&v93[v9 + v312] & v321, v344);
                uint64_t v92 = (void *)((v342 + v20) & v19);
                uint64_t v80 = v346;
                char v116 = 1;
                break;
              case 2u:
                *uint64_t v92 = *(void *)v93;
                char v116 = 2;
                break;
              case 3u:
                *(_OWORD *)uint64_t v92 = *(_OWORD *)v93;
                char v116 = 3;
                break;
              case 4u:
                *uint64_t v92 = *(void *)v93;
                unint64_t v117 = (unint64_t)&v93[v327] & v328;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v332 + 32))(((unint64_t)v92 + v327) & v328, v117, v333);
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v334 + 32))(((((unint64_t)v92 + v327) & v328) + v331 + v329) & v330, (v117 + v331 + v329) & v330, v335);
                uint64_t v80 = v346;
                char v116 = 4;
                break;
              default:
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v325 + 32))((v342 + v20) & v19, (v342 + v22) & v19, v344);
                uint64_t v80 = v346;
                char v116 = 0;
                break;
            }
            *((unsigned char *)v92 + v80) = v116;
            uint64_t v118 = (_OWORD *)(((v323 | v16) + v28) & v19);
            uint64_t v119 = (_OWORD *)(((v310 | v16) + v28) & v19);
            long long v120 = v119[1];
            *uint64_t v118 = *v119;
            v118[1] = v120;
            uint64_t v121 = (void *)(((unint64_t)v118 + v342) & v19);
            uint64_t v122 = (unsigned __int8 *)(((unint64_t)v119 + v342) & v19);
            unsigned int v123 = v122[v80];
            unsigned int v124 = v123 - 5;
            if (v123 >= 5)
            {
              if (v80 <= 3) {
                uint64_t v125 = v80;
              }
              else {
                uint64_t v125 = 4;
              }
              switch(v125)
              {
                case 1:
                  int v126 = *v122;
                  goto LABEL_244;
                case 2:
                  int v126 = *(unsigned __int16 *)v122;
                  goto LABEL_244;
                case 3:
                  int v126 = *(unsigned __int16 *)v122 | (v122[2] << 16);
                  goto LABEL_244;
                case 4:
                  int v126 = *(_DWORD *)v122;
LABEL_244:
                  if (v80 < 4) {
                    unsigned int v123 = (v126 | (v124 << (8 * v80))) + 5;
                  }
                  else {
                    unsigned int v123 = v126 + 5;
                  }
                  break;
                default:
                  break;
              }
            }
            switch(v123)
            {
              case 1u:
                long long v147 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v325 + 32);
                v147(v121, v122, v344);
                v147((void *)(((unint64_t)v121 + v309) & v321), (unsigned __int8 *)((unint64_t)&v122[v309] & v321), v344);
                uint64_t v80 = v346;
                char v146 = 1;
                break;
              case 2u:
                *uint64_t v121 = *(void *)v122;
                char v146 = 2;
                break;
              case 3u:
                *(_OWORD *)uint64_t v121 = *(_OWORD *)v122;
                char v146 = 3;
                break;
              case 4u:
                *uint64_t v121 = *(void *)v122;
                unint64_t v148 = (unint64_t)&v122[v327] & v328;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v332 + 32))(((unint64_t)v121 + v327) & v328, v148, v333);
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v334 + 32))((v329 + v331 + (((unint64_t)v121 + v327) & v328)) & v330, (v329 + v331 + v148) & v330, v335);
                uint64_t v80 = v346;
                char v146 = 4;
                break;
              default:
                (*(void (**)(void *, unsigned __int8 *, uint64_t))(v325 + 32))(v121, v122, v344);
                uint64_t v80 = v346;
                char v146 = 0;
                break;
            }
            uint64_t v14 = v336;
            *((unsigned char *)v121 + v80) = v146;
            char v115 = 5;
            goto LABEL_254;
          case 6u:
            uint64_t v319 = v3;
            long long v98 = *(_OWORD *)(v22 + 16);
            *(_OWORD *)uint64_t v20 = *(_OWORD *)v22;
            *(_OWORD *)(v20 + 16) = v98;
            uint64_t v99 = (void *)((v342 + v20) & v19);
            uint64_t v100 = (unsigned __int8 *)((v342 + v22) & v19);
            unsigned int v101 = v100[v80];
            unsigned int v102 = v101 - 5;
            if (v101 >= 5)
            {
              if (v80 <= 3) {
                uint64_t v103 = v80;
              }
              else {
                uint64_t v103 = 4;
              }
              switch(v103)
              {
                case 1:
                  int v104 = *v100;
                  goto LABEL_218;
                case 2:
                  int v104 = *(unsigned __int16 *)v100;
                  goto LABEL_218;
                case 3:
                  int v104 = *(unsigned __int16 *)v100 | (*(unsigned __int8 *)(((v342 + v22) & v19) + 2) << 16);
                  goto LABEL_218;
                case 4:
                  int v104 = *(_DWORD *)v100;
LABEL_218:
                  if (v80 < 4) {
                    unsigned int v101 = (v104 | (v102 << (8 * v80))) + 5;
                  }
                  else {
                    unsigned int v101 = v104 + 5;
                  }
                  break;
                default:
                  break;
              }
            }
            switch(v101)
            {
              case 1u:
                unint64_t v129 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v325 + 32);
                v129(v99, v100, v344);
                v129((void *)(((unint64_t)v99 + v9 + v312) & v321), (unsigned __int8 *)((unint64_t)&v100[v9 + v312] & v321), v344);
                uint64_t v80 = v346;
                uint64_t v14 = v336;
                char v127 = 1;
                break;
              case 2u:
                *uint64_t v99 = *(void *)v100;
                char v127 = 2;
                break;
              case 3u:
                *(_OWORD *)uint64_t v99 = *(_OWORD *)v100;
                char v127 = 3;
                break;
              case 4u:
                *uint64_t v99 = *(void *)v100;
                unint64_t v128 = (unint64_t)&v100[v327] & v328;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v332 + 32))(((unint64_t)v99 + v327) & v328, v128, v333);
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v334 + 32))(((((unint64_t)v99 + v327) & v328) + v331 + v329) & v330, (v128 + v331 + v329) & v330, v335);
                uint64_t v80 = v346;
                uint64_t v14 = v336;
                char v127 = 4;
                break;
              default:
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v325 + 32))((v342 + v20) & v19, (v342 + v22) & v19, v344);
                uint64_t v80 = v346;
                uint64_t v14 = v336;
                char v127 = 0;
                break;
            }
            uint64_t v3 = v319;
            *((unsigned char *)v99 + v80) = v127;
            unint64_t v130 = ((v20 | 7) + v28) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v131 = ((v22 | 7) + v28) & 0xFFFFFFFFFFFFFFF8;
            long long v132 = *(_OWORD *)v131;
            long long v133 = *(_OWORD *)(v131 + 16);
            long long v134 = *(_OWORD *)(v131 + 48);
            *(_OWORD *)(v130 + 32) = *(_OWORD *)(v131 + 32);
            *(_OWORD *)(v130 + 48) = v134;
            *(_OWORD *)unint64_t v130 = v132;
            *(_OWORD *)(v130 + 16) = v133;
            long long v135 = *(_OWORD *)(v131 + 64);
            long long v136 = *(_OWORD *)(v131 + 80);
            long long v137 = *(_OWORD *)(v131 + 96);
            *(unsigned char *)(v130 + 112) = *(unsigned char *)(v131 + 112);
            *(_OWORD *)(v130 + 80) = v136;
            *(_OWORD *)(v130 + 96) = v137;
            *(_OWORD *)(v130 + 64) = v135;
            *(unsigned char *)(v20 + v32) = 6;
            goto LABEL_255;
          case 7u:
            uint64_t v318 = v3;
            long long v105 = *(_OWORD *)(v22 + 16);
            *(_OWORD *)uint64_t v20 = *(_OWORD *)v22;
            *(_OWORD *)(v20 + 16) = v105;
            unint64_t v106 = (void *)((v342 + v20) & v19);
            unint64_t v107 = (unsigned __int8 *)((v342 + v22) & v19);
            unsigned int v108 = v107[v80];
            unsigned int v109 = v108 - 5;
            if (v108 >= 5)
            {
              if (v80 <= 3) {
                uint64_t v110 = v80;
              }
              else {
                uint64_t v110 = 4;
              }
              switch(v110)
              {
                case 1:
                  int v111 = *v107;
                  goto LABEL_231;
                case 2:
                  int v111 = *(unsigned __int16 *)v107;
                  goto LABEL_231;
                case 3:
                  int v111 = *(unsigned __int16 *)v107 | (*(unsigned __int8 *)(((v342 + v22) & v19) + 2) << 16);
                  goto LABEL_231;
                case 4:
                  int v111 = *(_DWORD *)v107;
LABEL_231:
                  if (v80 < 4) {
                    unsigned int v108 = (v111 | (v109 << (8 * v80))) + 5;
                  }
                  else {
                    unsigned int v108 = v111 + 5;
                  }
                  break;
                default:
                  break;
              }
            }
            switch(v108)
            {
              case 1u:
                uint64_t v139 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v325 + 32);
                v139(v106, v107, v344);
                v139((void *)(((unint64_t)v106 + v9 + v312) & v321), (unsigned __int8 *)((unint64_t)&v107[v9 + v312] & v321), v344);
                uint64_t v80 = v346;
                uint64_t v14 = v336;
                char v138 = 1;
                break;
              case 2u:
                *unint64_t v106 = *(void *)v107;
                char v138 = 2;
                break;
              case 3u:
                *(_OWORD *)unint64_t v106 = *(_OWORD *)v107;
                char v138 = 3;
                break;
              case 4u:
                *unint64_t v106 = *(void *)v107;
                unint64_t v140 = (unint64_t)&v107[v327] & v328;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v332 + 32))(((unint64_t)v106 + v327) & v328, v140, v333);
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v334 + 32))(((((unint64_t)v106 + v327) & v328) + v331 + v329) & v330, (v140 + v331 + v329) & v330, v335);
                uint64_t v80 = v346;
                uint64_t v14 = v336;
                char v138 = 4;
                break;
              default:
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v325 + 32))((v342 + v20) & v19, (v342 + v22) & v19, v344);
                uint64_t v80 = v346;
                uint64_t v14 = v336;
                char v138 = 0;
                break;
            }
            *((unsigned char *)v106 + v80) = v138;
            unint64_t v141 = ((v20 | 7) + v28) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v142 = ((v22 | 7) + v28) & 0xFFFFFFFFFFFFFFF8;
            long long v143 = *(_OWORD *)v142;
            long long v144 = *(_OWORD *)(v142 + 16);
            long long v145 = *(_OWORD *)(v142 + 32);
            *(unsigned char *)(v141 + 48) = *(unsigned char *)(v142 + 48);
            *(_OWORD *)(v141 + 16) = v144;
            *(_OWORD *)(v141 + 32) = v145;
            *(_OWORD *)unint64_t v141 = v143;
            char v115 = 7;
LABEL_254:
            *(unsigned char *)(v20 + v32) = v115;
            uint64_t v3 = v318;
            break;
          default:
            uint64_t v82 = *(void *)v22;
            *(unsigned char *)(v20 + 8) = *(unsigned char *)(v22 + 8);
            *(void *)uint64_t v20 = v82;
            *(unsigned char *)(v20 + v32) = 0;
            break;
        }
        break;
      default:
        goto LABEL_141;
    }
  }
LABEL_255:
  uint64_t v149 = *(void *)(*(void *)(v3 + 32) - 8);
  uint64_t v150 = *(unsigned __int8 *)(v149 + 80);
  uint64_t v151 = v14 | v150;
  uint64_t v152 = v14 | v150 | 7;
  uint64_t v153 = v32 + v152 + 1;
  uint64_t v154 = (unsigned __int8 *)(v153 + v20);
  uint64_t v155 = ~v152;
  unint64_t v156 = (v153 + v20) & ~v152;
  uint64_t v157 = v153 + v22;
  uint64_t v158 = v157 & ~v152;
  uint64_t v159 = ~v150;
  if (v156 == v158)
  {
    unint64_t v173 = *(void *)(v149 + 64);
    uint64_t v174 = (v151 + 32) & v155;
    if (((v173 + v150) & v159) + v173 > v173) {
      v173 += (v173 + v150) & v159;
    }
    if (v173 <= v26) {
      unint64_t v173 = v26;
    }
    if (v173 <= 0x10) {
      unint64_t v173 = 16;
    }
    unint64_t v175 = (v174 | 1) + v173;
    unint64_t v176 = ((v175 + v152) & v155) + v175;
    if (v175 > v176) {
      unint64_t v176 = v175;
    }
    unint64_t v177 = (v175 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v176 <= v177 + 113) {
      unint64_t v176 = v177 + 113;
    }
    unint64_t v178 = v177 + 49;
    if (v176 > v178) {
      unint64_t v178 = v176;
    }
    if (v178 <= 0x19) {
      uint64_t v168 = 25;
    }
    else {
      uint64_t v168 = v178;
    }
    uint64_t v179 = v348;
  }
  else
  {
    uint64_t v322 = v157;
    uint64_t v326 = v154;
    uint64_t v345 = *(void *)(v3 + 32);
    uint64_t v347 = v151 + 32;
    uint64_t v160 = (v151 + 32) & v155;
    uint64_t v343 = *(void *)(v345 - 8);
    unint64_t v161 = *(void *)(v149 + 64);
    uint64_t v324 = ~v150;
    uint64_t v320 = v161 + v150;
    unint64_t v162 = ((v161 + v150) & v159) + v161;
    if (v162 <= v161) {
      unint64_t v162 = *(void *)(v149 + 64);
    }
    if (v162 <= v26) {
      unint64_t v162 = v26;
    }
    if (v162 <= 0x10) {
      uint64_t v163 = 16;
    }
    else {
      uint64_t v163 = v162;
    }
    unint64_t v164 = (v160 | 1) + v163;
    unint64_t v165 = ((v164 + v152) & v155) + v164;
    if (v164 > v165) {
      unint64_t v165 = v164;
    }
    unint64_t v166 = (v164 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v165 <= v166 + 113) {
      unint64_t v165 = v166 + 113;
    }
    unint64_t v167 = v166 + 49;
    if (v165 <= v167) {
      unint64_t v165 = v167;
    }
    if (v165 <= 0x19) {
      uint64_t v168 = 25;
    }
    else {
      uint64_t v168 = v165;
    }
    unsigned int v169 = *(unsigned __int8 *)(v156 + v168);
    unsigned int v170 = v169 - 8;
    if (v169 >= 8)
    {
      if (v168 <= 3) {
        uint64_t v171 = v168;
      }
      else {
        uint64_t v171 = 4;
      }
      switch(v171)
      {
        case 1:
          int v172 = *(unsigned __int8 *)v156;
          goto LABEL_297;
        case 2:
          int v172 = *(unsigned __int16 *)v156;
          goto LABEL_297;
        case 3:
          int v172 = *(unsigned __int16 *)v156 | (*(unsigned __int8 *)(v156 + 2) << 16);
          goto LABEL_297;
        case 4:
          int v172 = *(_DWORD *)v156;
LABEL_297:
          int v180 = (v172 | (v170 << (8 * v168))) + 8;
          unsigned int v169 = v172 + 8;
          if (v168 < 4) {
            unsigned int v169 = v180;
          }
          break;
        default:
          break;
      }
    }
    switch(v169)
    {
      case 2u:
LABEL_300:
        swift_release();
        break;
      case 3u:
LABEL_301:
        swift_release();
        swift_release();
        break;
      case 4u:
        sub_21F7656A8(*(void *)v156, *(void *)(v156 + 8), *(unsigned char *)(v156 + 16));
        swift_bridgeObjectRelease();
        unint64_t v181 = (unsigned __int8 *)((v347 + v156) & v155);
        unsigned int v182 = v181[v163];
        unsigned int v183 = v182 - 5;
        if (v182 >= 5)
        {
          if (v163 <= 3) {
            uint64_t v184 = v163;
          }
          else {
            uint64_t v184 = 4;
          }
          switch(v184)
          {
            case 1:
              int v185 = *v181;
              goto LABEL_329;
            case 2:
              int v185 = *(unsigned __int16 *)v181;
              goto LABEL_329;
            case 3:
              int v185 = *(unsigned __int16 *)v181 | (*(unsigned __int8 *)(((v347 + v156) & v155) + 2) << 16);
              goto LABEL_329;
            case 4:
              int v185 = *(_DWORD *)v181;
LABEL_329:
              int v201 = (v185 | (v183 << (8 * v163))) + 5;
              unsigned int v182 = v185 + 5;
              if (v163 < 4) {
                unsigned int v182 = v201;
              }
              break;
            default:
              break;
          }
        }
        switch(v182)
        {
          case 1u:
            uint64_t v337 = v163;
            long long v313 = *(void (**)(unint64_t, uint64_t))(v343 + 8);
            v313((v347 + v156) & v155, v345);
            unint64_t v202 = &v181[v150 + v161];
            goto LABEL_387;
          case 2u:
            goto LABEL_300;
          case 3u:
            goto LABEL_301;
          case 4u:
            goto LABEL_385;
          default:
            goto LABEL_384;
        }
      case 5u:
        sub_21F7656A8(*(void *)v156, *(void *)(v156 + 8), *(unsigned char *)(v156 + 16));
        swift_bridgeObjectRelease();
        unint64_t v186 = (unsigned __int8 *)((v347 + v156) & v155);
        unsigned int v187 = v186[v163];
        unsigned int v188 = v187 - 5;
        if (v187 >= 5)
        {
          if (v163 <= 3) {
            uint64_t v189 = v163;
          }
          else {
            uint64_t v189 = 4;
          }
          switch(v189)
          {
            case 1:
              int v190 = *v186;
              goto LABEL_336;
            case 2:
              int v190 = *(unsigned __int16 *)v186;
              goto LABEL_336;
            case 3:
              int v190 = *(unsigned __int16 *)v186 | (*(unsigned __int8 *)(((v347 + v156) & v155) + 2) << 16);
              goto LABEL_336;
            case 4:
              int v190 = *(_DWORD *)v186;
LABEL_336:
              int v203 = (v190 | (v188 << (8 * v163))) + 5;
              unsigned int v187 = v190 + 5;
              if (v163 < 4) {
                unsigned int v187 = v203;
              }
              break;
            default:
              break;
          }
        }
        switch(v187)
        {
          case 1u:
            long long v314 = *(void (**)(unint64_t, uint64_t))(v343 + 8);
            v314((v347 + v156) & v155, v345);
            v314((unint64_t)&v186[v150 + v161] & v324, v345);
            break;
          case 2u:
            swift_release();
            break;
          case 3u:
            swift_release();
            swift_release();
            break;
          case 4u:
            swift_release();
            unint64_t v204 = (unint64_t)&v186[v327] & v328;
            (*(void (**)(unint64_t, uint64_t))(v332 + 8))(v204, v333);
            (*(void (**)(unint64_t, uint64_t))(v334 + 8))((v329 + v331 + v204) & v330, v335);
            break;
          default:
            (*(void (**)(unint64_t, uint64_t))(v343 + 8))((v347 + v156) & v155, v345);
            break;
        }
        uint64_t v205 = (((unint64_t)v326 | v152) + v164) & v155;
        sub_21F7656A8(*(void *)v205, *(void *)(v205 + 8), *(unsigned char *)(v205 + 0x10));
        swift_bridgeObjectRelease();
        unint64_t v181 = (unsigned __int8 *)((v347 + v205) & v155);
        unsigned int v206 = v181[v163];
        unsigned int v207 = v206 - 5;
        if (v206 >= 5)
        {
          if (v163 <= 3) {
            uint64_t v208 = v163;
          }
          else {
            uint64_t v208 = 4;
          }
          switch(v208)
          {
            case 1:
              int v209 = *v181;
              goto LABEL_381;
            case 2:
              int v209 = *(unsigned __int16 *)v181;
              goto LABEL_381;
            case 3:
              int v209 = *(unsigned __int16 *)v181 | (v181[2] << 16);
              goto LABEL_381;
            case 4:
              int v209 = *(_DWORD *)v181;
LABEL_381:
              int v218 = (v209 | (v207 << (8 * v163))) + 5;
              unsigned int v206 = v209 + 5;
              if (v163 < 4) {
                unsigned int v206 = v218;
              }
              break;
            default:
              break;
          }
        }
        switch(v206)
        {
          case 1u:
            uint64_t v337 = v163;
            long long v313 = *(void (**)(unint64_t, uint64_t))(v343 + 8);
            v313((unint64_t)v181, v345);
            unint64_t v202 = &v181[v320];
LABEL_387:
            v313((unint64_t)v202 & v324, v345);
            uint64_t v163 = v337;
            break;
          case 2u:
            goto LABEL_300;
          case 3u:
            goto LABEL_301;
          case 4u:
LABEL_385:
            swift_release();
            unint64_t v219 = (unint64_t)&v181[v327] & v328;
            (*(void (**)(unint64_t, uint64_t))(v332 + 8))(v219, v333);
            (*(void (**)(unint64_t, uint64_t))(v334 + 8))((v329 + v331 + v219) & v330, v335);
            break;
          default:
LABEL_384:
            (*(void (**)(unsigned __int8 *, uint64_t))(v343 + 8))(v181, v345);
            break;
        }
        break;
      case 6u:
        sub_21F7656A8(*(void *)v156, *(void *)(v156 + 8), *(unsigned char *)(v156 + 16));
        swift_bridgeObjectRelease();
        uint64_t v191 = (unsigned __int8 *)((v347 + v156) & v155);
        unsigned int v192 = v191[v163];
        unsigned int v193 = v192 - 5;
        if (v192 >= 5)
        {
          if (v163 <= 3) {
            uint64_t v194 = v163;
          }
          else {
            uint64_t v194 = 4;
          }
          switch(v194)
          {
            case 1:
              int v195 = *v191;
              goto LABEL_353;
            case 2:
              int v195 = *(unsigned __int16 *)v191;
              goto LABEL_353;
            case 3:
              int v195 = *(unsigned __int16 *)v191 | (*(unsigned __int8 *)(((v347 + v156) & v155) + 2) << 16);
              goto LABEL_353;
            case 4:
              int v195 = *(_DWORD *)v191;
LABEL_353:
              int v210 = (v195 | (v193 << (8 * v163))) + 5;
              unsigned int v192 = v195 + 5;
              if (v163 < 4) {
                unsigned int v192 = v210;
              }
              break;
            default:
              break;
          }
        }
        switch(v192)
        {
          case 1u:
            int v315 = *(void (**)(unint64_t, uint64_t))(v343 + 8);
            v315((v347 + v156) & v155, v345);
            v315((unint64_t)&v191[v150 + v161] & v324, v345);
            break;
          case 2u:
            swift_release();
            break;
          case 3u:
            swift_release();
            swift_release();
            break;
          case 4u:
            swift_release();
            unint64_t v211 = (unint64_t)&v191[v327] & v328;
            (*(void (**)(unint64_t, uint64_t))(v332 + 8))(v211, v333);
            (*(void (**)(unint64_t, uint64_t))(v334 + 8))((v329 + v331 + v211) & v330, v335);
            break;
          default:
            (*(void (**)(unint64_t, uint64_t))(v343 + 8))((v347 + v156) & v155, v345);
            break;
        }
        unint64_t v212 = ((v156 | 7) + v164) & 0xFFFFFFFFFFFFFFF8;
        int v213 = *(unsigned __int8 *)(v212 + 96);
        if (v213 != 255) {
          sub_21F82B5F8(*(void *)(v212 + 88), v213 & 1);
        }
        sub_21F82B5F8(*(void *)(v212 + 104), *(unsigned char *)(v212 + 112));
        break;
      case 7u:
        sub_21F7656A8(*(void *)v156, *(void *)(v156 + 8), *(unsigned char *)(v156 + 16));
        swift_bridgeObjectRelease();
        uint64_t v196 = (unsigned __int8 *)((v347 + v156) & v155);
        unsigned int v197 = v196[v163];
        unsigned int v198 = v197 - 5;
        if (v197 >= 5)
        {
          if (v163 <= 3) {
            uint64_t v199 = v163;
          }
          else {
            uint64_t v199 = 4;
          }
          switch(v199)
          {
            case 1:
              int v200 = *v196;
              goto LABEL_368;
            case 2:
              int v200 = *(unsigned __int16 *)v196;
              goto LABEL_368;
            case 3:
              int v200 = *(unsigned __int16 *)v196 | (*(unsigned __int8 *)(((v347 + v156) & v155) + 2) << 16);
              goto LABEL_368;
            case 4:
              int v200 = *(_DWORD *)v196;
LABEL_368:
              int v214 = (v200 | (v198 << (8 * v163))) + 5;
              unsigned int v197 = v200 + 5;
              if (v163 < 4) {
                unsigned int v197 = v214;
              }
              break;
            default:
              break;
          }
        }
        switch(v197)
        {
          case 1u:
            uint64_t v316 = *(void (**)(unint64_t, uint64_t))(v343 + 8);
            v316((v347 + v156) & v155, v345);
            v316((unint64_t)&v196[v150 + v161] & v324, v345);
            break;
          case 2u:
            swift_release();
            break;
          case 3u:
            swift_release();
            swift_release();
            break;
          case 4u:
            swift_release();
            unint64_t v215 = (unint64_t)&v196[v327] & v328;
            (*(void (**)(unint64_t, uint64_t))(v332 + 8))(v215, v333);
            (*(void (**)(unint64_t, uint64_t))(v334 + 8))((v329 + v331 + v215) & v330, v335);
            break;
          default:
            (*(void (**)(unint64_t, uint64_t))(v343 + 8))((v347 + v156) & v155, v345);
            break;
        }
        unint64_t v216 = ((v156 | 7) + v164) & 0xFFFFFFFFFFFFFFF8;
        sub_21F770E38(*(void *)(v216 + 8), *(void *)(v216 + 16), *(unsigned char *)(v216 + 24));
        unsigned int v217 = *(unsigned __int8 *)(v216 + 48);
        if (v217 <= 0xFB) {
          sub_21F770E38(*(void *)(v216 + 32), *(void *)(v216 + 40), v217);
        }
        break;
      default:
        break;
    }
    unsigned int v220 = *(unsigned __int8 *)(v158 + v168);
    unsigned int v221 = v220 - 8;
    if (v220 >= 8)
    {
      if (v168 <= 3) {
        uint64_t v222 = v168;
      }
      else {
        uint64_t v222 = 4;
      }
      switch(v222)
      {
        case 1:
          int v223 = *(unsigned __int8 *)v158;
          goto LABEL_397;
        case 2:
          int v223 = *(unsigned __int16 *)v158;
          goto LABEL_397;
        case 3:
          int v223 = *(unsigned __int16 *)v158 | (*(unsigned __int8 *)(v158 + 2) << 16);
          goto LABEL_397;
        case 4:
          int v223 = *(_DWORD *)v158;
LABEL_397:
          int v224 = (v223 | (v221 << (8 * v168))) + 8;
          unsigned int v220 = v223 + 8;
          if (v168 < 4) {
            unsigned int v220 = v224;
          }
          break;
        default:
          break;
      }
    }
    switch(v220)
    {
      case 1u:
        long long v226 = *(_OWORD *)v158;
        *(_OWORD *)(v156 + 9) = *(_OWORD *)(v158 + 9);
        *(_OWORD *)unint64_t v156 = v226;
        char v227 = 1;
        goto LABEL_404;
      case 2u:
        *(void *)unint64_t v156 = *(void *)v158;
        char v227 = 2;
        goto LABEL_404;
      case 3u:
        *(_OWORD *)unint64_t v156 = *(_OWORD *)v158;
        char v227 = 3;
LABEL_404:
        *(unsigned char *)(v156 + v168) = v227;
        uint64_t v179 = v348;
        break;
      case 4u:
        long long v228 = *(_OWORD *)(v158 + 16);
        *(_OWORD *)unint64_t v156 = *(_OWORD *)v158;
        *(_OWORD *)(v156 + 16) = v228;
        int v229 = (void *)((v347 + v156) & v155);
        uint64_t v230 = v163;
        int v231 = (unsigned __int8 *)((v347 + v158) & v155);
        unsigned int v232 = v231[v230];
        unsigned int v233 = v232 - 5;
        uint64_t v338 = v230;
        if (v232 >= 5)
        {
          if (v230 <= 3) {
            uint64_t v234 = v230;
          }
          else {
            uint64_t v234 = 4;
          }
          switch(v234)
          {
            case 1:
              int v235 = *v231;
              goto LABEL_432;
            case 2:
              int v235 = *(unsigned __int16 *)v231;
              goto LABEL_432;
            case 3:
              int v235 = *(unsigned __int16 *)v231 | (*(unsigned __int8 *)(((v347 + v158) & v155) + 2) << 16);
              goto LABEL_432;
            case 4:
              int v235 = *(_DWORD *)v231;
LABEL_432:
              int v260 = (v235 | (v233 << (8 * v230))) + 5;
              unsigned int v232 = v235 + 5;
              if (v230 < 4) {
                unsigned int v232 = v260;
              }
              break;
            default:
              break;
          }
        }
        switch(v232)
        {
          case 1u:
            uint64_t v262 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v343 + 32);
            v262(v229, v231, v345);
            v262((void *)(((unint64_t)v229 + v150 + v161) & v324), (unsigned __int8 *)((unint64_t)&v231[v150 + v161] & v324), v345);
            char v261 = 1;
            break;
          case 2u:
            *int v229 = *(void *)v231;
            char v261 = 2;
            break;
          case 3u:
            *(_OWORD *)int v229 = *(_OWORD *)v231;
            char v261 = 3;
            break;
          case 4u:
            *int v229 = *(void *)v231;
            unint64_t v263 = (unint64_t)&v231[v327] & v328;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v332 + 32))(((unint64_t)v229 + v327) & v328, v263, v333);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v334 + 32))((v329 + v331 + (((unint64_t)v229 + v327) & v328)) & v330, (v329 + v331 + v263) & v330, v335);
            char v261 = 4;
            break;
          default:
            (*(void (**)(unint64_t, uint64_t, uint64_t))(v343 + 32))((v347 + v156) & v155, (v347 + v158) & v155, v345);
            char v261 = 0;
            break;
        }
        uint64_t v179 = v348;
        *((unsigned char *)v229 + v338) = v261;
        char v264 = 4;
        goto LABEL_495;
      case 5u:
        long long v236 = *(_OWORD *)(v158 + 16);
        *(_OWORD *)unint64_t v156 = *(_OWORD *)v158;
        *(_OWORD *)(v156 + 16) = v236;
        long long v237 = (void *)((v347 + v156) & v155);
        uint64_t v238 = v163;
        unsigned int v239 = (unsigned __int8 *)((v347 + v158) & v155);
        unsigned int v240 = v239[v238];
        unsigned int v241 = v240 - 5;
        uint64_t v339 = v238;
        if (v240 >= 5)
        {
          if (v238 <= 3) {
            uint64_t v242 = v238;
          }
          else {
            uint64_t v242 = 4;
          }
          switch(v242)
          {
            case 1:
              int v243 = *v239;
              goto LABEL_444;
            case 2:
              int v243 = *(unsigned __int16 *)v239;
              goto LABEL_444;
            case 3:
              int v243 = *(unsigned __int16 *)v239 | (*(unsigned __int8 *)(((v347 + v158) & v155) + 2) << 16);
              goto LABEL_444;
            case 4:
              int v243 = *(_DWORD *)v239;
LABEL_444:
              int v265 = (v243 | (v241 << (8 * v238))) + 5;
              unsigned int v240 = v243 + 5;
              if (v238 < 4) {
                unsigned int v240 = v265;
              }
              break;
            default:
              break;
          }
        }
        switch(v240)
        {
          case 1u:
            unint64_t v311 = *(void (**)(unint64_t, uint64_t, uint64_t))(v343 + 32);
            v311((v347 + v156) & v155, (v347 + v158) & v155, v345);
            v311((((v347 + v156) & v155) + v150 + v161) & v324, (unint64_t)&v239[v150 + v161] & v324, v345);
            long long v237 = (void *)((v347 + v156) & v155);
            char v266 = 1;
            break;
          case 2u:
            *long long v237 = *(void *)v239;
            char v266 = 2;
            break;
          case 3u:
            *(_OWORD *)long long v237 = *(_OWORD *)v239;
            char v266 = 3;
            break;
          case 4u:
            *long long v237 = *(void *)v239;
            unint64_t v267 = (unint64_t)&v239[v327] & v328;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v332 + 32))(((unint64_t)v237 + v327) & v328, v267, v333);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v334 + 32))((v329 + v331 + (((unint64_t)v237 + v327) & v328)) & v330, (v329 + v331 + v267) & v330, v335);
            char v266 = 4;
            break;
          default:
            (*(void (**)(unint64_t, uint64_t, uint64_t))(v343 + 32))((v347 + v156) & v155, (v347 + v158) & v155, v345);
            char v266 = 0;
            break;
        }
        uint64_t v179 = v348;
        *((unsigned char *)v237 + v339) = v266;
        unsigned int v268 = (_OWORD *)((((unint64_t)v326 | v152) + v164) & v155);
        long long v269 = (_OWORD *)(((v322 | v152) + v164) & v155);
        long long v270 = v269[1];
        *unsigned int v268 = *v269;
        v268[1] = v270;
        uint64_t v271 = (void *)(((unint64_t)v268 + v347) & v155);
        unsigned int v272 = (unsigned __int8 *)(((unint64_t)v269 + v347) & v155);
        unsigned int v273 = v272[v339];
        unsigned int v274 = v273 - 5;
        if (v273 < 5)
        {
          uint64_t v276 = v339;
        }
        else
        {
          if (v339 <= 3) {
            uint64_t v275 = v339;
          }
          else {
            uint64_t v275 = 4;
          }
          uint64_t v276 = v339;
          switch(v275)
          {
            case 1:
              int v277 = *v272;
              goto LABEL_486;
            case 2:
              int v277 = *(unsigned __int16 *)v272;
              goto LABEL_486;
            case 3:
              int v277 = *(unsigned __int16 *)v272 | (v272[2] << 16);
              goto LABEL_486;
            case 4:
              int v277 = *(_DWORD *)v272;
LABEL_486:
              int v299 = (v277 | (v274 << (8 * v339))) + 5;
              unsigned int v273 = v277 + 5;
              if (v339 < 4) {
                unsigned int v273 = v299;
              }
              break;
            default:
              break;
          }
        }
        switch(v273)
        {
          case 1u:
            unint64_t v301 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v343 + 32);
            v301(v271, v272, v345);
            v301((void *)(((unint64_t)v271 + v320) & v324), (unsigned __int8 *)((unint64_t)&v272[v320] & v324), v345);
            char v300 = 1;
            break;
          case 2u:
            *uint64_t v271 = *(void *)v272;
            char v300 = 2;
            break;
          case 3u:
            *(_OWORD *)uint64_t v271 = *(_OWORD *)v272;
            char v300 = 3;
            break;
          case 4u:
            *uint64_t v271 = *(void *)v272;
            unint64_t v302 = (unint64_t)&v272[v327] & v328;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v332 + 32))(((unint64_t)v271 + v327) & v328, v302, v333);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v334 + 32))((v329 + v331 + (((unint64_t)v271 + v327) & v328)) & v330, (v329 + v331 + v302) & v330, v335);
            char v300 = 4;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v343 + 32))(v271, v272, v345);
            char v300 = 0;
            break;
        }
        *((unsigned char *)v271 + v276) = v300;
        char v264 = 5;
        goto LABEL_495;
      case 6u:
        long long v244 = *(_OWORD *)(v158 + 16);
        *(_OWORD *)unint64_t v156 = *(_OWORD *)v158;
        *(_OWORD *)(v156 + 16) = v244;
        uint64_t v245 = (void *)((v347 + v156) & v155);
        uint64_t v246 = v163;
        unsigned int v247 = (unsigned __int8 *)((v347 + v158) & v155);
        unsigned int v248 = v247[v246];
        unsigned int v249 = v248 - 5;
        uint64_t v340 = v246;
        if (v248 >= 5)
        {
          if (v246 <= 3) {
            uint64_t v250 = v246;
          }
          else {
            uint64_t v250 = 4;
          }
          switch(v250)
          {
            case 1:
              int v251 = *v247;
              goto LABEL_462;
            case 2:
              int v251 = *(unsigned __int16 *)v247;
              goto LABEL_462;
            case 3:
              int v251 = *(unsigned __int16 *)v247 | (*(unsigned __int8 *)(((v347 + v158) & v155) + 2) << 16);
              goto LABEL_462;
            case 4:
              int v251 = *(_DWORD *)v247;
LABEL_462:
              int v278 = (v251 | (v249 << (8 * v246))) + 5;
              unsigned int v248 = v251 + 5;
              if (v246 < 4) {
                unsigned int v248 = v278;
              }
              break;
            default:
              break;
          }
        }
        switch(v248)
        {
          case 1u:
            uint64_t v281 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v343 + 32);
            v281(v245, v247, v345);
            v281((void *)(((unint64_t)v245 + v150 + v161) & v324), (unsigned __int8 *)((unint64_t)&v247[v150 + v161] & v324), v345);
            char v279 = 1;
            break;
          case 2u:
            *uint64_t v245 = *(void *)v247;
            char v279 = 2;
            break;
          case 3u:
            *(_OWORD *)uint64_t v245 = *(_OWORD *)v247;
            char v279 = 3;
            break;
          case 4u:
            *uint64_t v245 = *(void *)v247;
            unint64_t v280 = (unint64_t)&v247[v327] & v328;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v332 + 32))(((unint64_t)v245 + v327) & v328, v280, v333);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v334 + 32))((v329 + v331 + (((unint64_t)v245 + v327) & v328)) & v330, (v329 + v331 + v280) & v330, v335);
            char v279 = 4;
            break;
          default:
            (*(void (**)(unint64_t, uint64_t, uint64_t))(v343 + 32))((v347 + v156) & v155, (v347 + v158) & v155, v345);
            char v279 = 0;
            break;
        }
        uint64_t v179 = v348;
        *((unsigned char *)v245 + v340) = v279;
        unint64_t v282 = ((v156 | 7) + v164) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v283 = ((v158 | 7) + v164) & 0xFFFFFFFFFFFFFFF8;
        long long v284 = *(_OWORD *)v283;
        long long v285 = *(_OWORD *)(v283 + 16);
        long long v286 = *(_OWORD *)(v283 + 48);
        *(_OWORD *)(v282 + 32) = *(_OWORD *)(v283 + 32);
        *(_OWORD *)(v282 + 48) = v286;
        *(_OWORD *)unint64_t v282 = v284;
        *(_OWORD *)(v282 + 16) = v285;
        long long v287 = *(_OWORD *)(v283 + 64);
        long long v288 = *(_OWORD *)(v283 + 80);
        long long v289 = *(_OWORD *)(v283 + 96);
        *(unsigned char *)(v282 + 112) = *(unsigned char *)(v283 + 112);
        *(_OWORD *)(v282 + 80) = v288;
        *(_OWORD *)(v282 + 96) = v289;
        *(_OWORD *)(v282 + 64) = v287;
        char v264 = 6;
        goto LABEL_495;
      case 7u:
        long long v252 = *(_OWORD *)(v158 + 16);
        *(_OWORD *)unint64_t v156 = *(_OWORD *)v158;
        *(_OWORD *)(v156 + 16) = v252;
        unint64_t v253 = (void *)((v347 + v156) & v155);
        uint64_t v254 = v163;
        char v255 = (unsigned __int8 *)((v347 + v158) & v155);
        unsigned int v256 = v255[v254];
        unsigned int v257 = v256 - 5;
        uint64_t v341 = v254;
        if (v256 >= 5)
        {
          if (v254 <= 3) {
            uint64_t v258 = v254;
          }
          else {
            uint64_t v258 = 4;
          }
          switch(v258)
          {
            case 1:
              int v259 = *v255;
              goto LABEL_474;
            case 2:
              int v259 = *(unsigned __int16 *)v255;
              goto LABEL_474;
            case 3:
              int v259 = *(unsigned __int16 *)v255 | (*(unsigned __int8 *)(((v347 + v158) & v155) + 2) << 16);
              goto LABEL_474;
            case 4:
              int v259 = *(_DWORD *)v255;
LABEL_474:
              int v290 = (v259 | (v257 << (8 * v254))) + 5;
              unsigned int v256 = v259 + 5;
              if (v254 < 4) {
                unsigned int v256 = v290;
              }
              break;
            default:
              break;
          }
        }
        switch(v256)
        {
          case 1u:
            unint64_t v292 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v343 + 32);
            v292(v253, v255, v345);
            v292((void *)(((unint64_t)v253 + v150 + v161) & v324), (unsigned __int8 *)((unint64_t)&v255[v150 + v161] & v324), v345);
            char v291 = 1;
            break;
          case 2u:
            *unint64_t v253 = *(void *)v255;
            char v291 = 2;
            break;
          case 3u:
            *(_OWORD *)unint64_t v253 = *(_OWORD *)v255;
            char v291 = 3;
            break;
          case 4u:
            *unint64_t v253 = *(void *)v255;
            unint64_t v293 = (unint64_t)&v255[v327] & v328;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v332 + 32))(((unint64_t)v253 + v327) & v328, v293, v333);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v334 + 32))((v329 + v331 + (((unint64_t)v253 + v327) & v328)) & v330, (v329 + v331 + v293) & v330, v335);
            char v291 = 4;
            break;
          default:
            (*(void (**)(unint64_t, uint64_t, uint64_t))(v343 + 32))((v347 + v156) & v155, (v347 + v158) & v155, v345);
            char v291 = 0;
            break;
        }
        uint64_t v179 = v348;
        *((unsigned char *)v253 + v341) = v291;
        unint64_t v294 = ((v156 | 7) + v164) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v295 = ((v158 | 7) + v164) & 0xFFFFFFFFFFFFFFF8;
        long long v296 = *(_OWORD *)v295;
        long long v297 = *(_OWORD *)(v295 + 16);
        long long v298 = *(_OWORD *)(v295 + 32);
        *(unsigned char *)(v294 + 48) = *(unsigned char *)(v295 + 48);
        *(_OWORD *)(v294 + 16) = v297;
        *(_OWORD *)(v294 + 32) = v298;
        *(_OWORD *)unint64_t v294 = v296;
        char v264 = 7;
LABEL_495:
        *(unsigned char *)(v156 + v168) = v264;
        break;
      default:
        uint64_t v225 = *(void *)v158;
        *(unsigned char *)(v156 + 8) = *(unsigned char *)(v158 + 8);
        *(void *)unint64_t v156 = v225;
        *(unsigned char *)(v156 + v168) = 0;
        uint64_t v179 = v348;
        break;
    }
  }
  *(void *)(((v156 | 7) + v168 + 1) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v158 | 7) + v168 + 1) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return v179;
}