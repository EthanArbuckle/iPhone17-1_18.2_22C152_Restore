void *sub_21F92B8C8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = v2[3];
  v4 = v2[4];
  v5 = v2[5];
  v6 = v2[6];
  v7 = v2[7];
  swift_getAssociatedTypeWitness();
  v8 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = *(void *)(v8 + 64);
  v11 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  return sub_21F92ACB0(a1, (uint64_t)v2 + v9, (uint64_t)v2 + ((v9 + v10 + v12) & ~v12), (uint64_t)v2 + ((*(void *)(v11 + 64) + v12 + ((v9 + v10 + v12) & ~v12)) & ~v12), (uint64_t)v2+ ((*(void *)(v11 + 64) + ((*(void *)(v11 + 64) + v12 + ((v9 + v10 + v12) & ~v12)) & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8), v3, v4, a2, v5, v6, v7);
}

uint64_t BarPlot.init<A, B>(_:x:yStart:yEnd:width:stacking:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, long long *a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int v57 = a6;
  int v58 = a8;
  uint64_t v56 = a5;
  int v55 = a4;
  uint64_t v54 = a3;
  uint64_t v45 = a2;
  uint64_t v47 = a1;
  uint64_t v59 = a9;
  uint64_t v50 = a11;
  uint64_t v51 = a13;
  uint64_t v43 = a12;
  swift_getAssociatedTypeWitness();
  uint64_t v46 = type metadata accessor for PlottableProjection();
  uint64_t v16 = *(void *)(v46 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  MEMORY[0x270FA5388](v46);
  v19 = (char *)&v43 - v18;
  uint64_t v48 = *(void *)(a10 - 8);
  uint64_t v20 = v48;
  MEMORY[0x270FA5388](v21);
  v23 = (char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = v23;
  uint64_t v53 = type metadata accessor for VectorizedBarPlotContent();
  uint64_t v52 = *(void *)(v53 - 8);
  MEMORY[0x270FA5388](v53);
  uint64_t v49 = (uint64_t)&v43 - v24;
  long long v25 = a7[5];
  long long v64 = a7[4];
  long long v65 = v25;
  long long v66 = a7[6];
  char v67 = *((unsigned char *)a7 + 112);
  long long v26 = a7[1];
  long long v60 = *a7;
  long long v61 = v26;
  long long v27 = a7[3];
  long long v62 = a7[2];
  long long v63 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, a1, a10);
  uint64_t v28 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, a2, v46);
  unint64_t v29 = (*(unsigned __int8 *)(v16 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v30 = (char *)swift_allocObject();
  uint64_t v31 = v50;
  *((void *)v30 + 2) = a10;
  *((void *)v30 + 3) = v31;
  uint64_t v32 = v43;
  uint64_t v33 = v51;
  *((void *)v30 + 4) = v43;
  *((void *)v30 + 5) = v33;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v30[v29], v19, v28);
  v34 = &v30[(v29 + v17 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(void *)v34 = v54;
  v34[8] = v55 & 1;
  v35 = &v30[(v29 + v17 + 23) & 0xFFFFFFFFFFFFFFF8];
  *(void *)v35 = v56;
  v35[8] = v57 & 1;
  v36 = &v30[(v29 + v17 + 39) & 0xFFFFFFFFFFFFFFF8];
  long long v37 = v63;
  *((_OWORD *)v36 + 2) = v62;
  *((_OWORD *)v36 + 3) = v37;
  long long v38 = v61;
  *(_OWORD *)v36 = v60;
  *((_OWORD *)v36 + 1) = v38;
  v36[112] = v67;
  long long v39 = v66;
  long long v40 = v64;
  *((_OWORD *)v36 + 5) = v65;
  *((_OWORD *)v36 + 6) = v39;
  *((_OWORD *)v36 + 4) = v40;
  v36[113] = v58;
  uint64_t v41 = v49;
  sub_21F929194((uint64_t)v44, (uint64_t)sub_21F92C484, (uint64_t)v30, a10, (uint64_t)&type metadata for BarMark, v32, (uint64_t)&protocol witness table for BarMark, v49);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v45, v28);
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, a10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v59, v41, v53);
}

void *sub_21F92BEA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int v47 = a8;
  uint64_t v44 = a3;
  uint64_t v45 = a5;
  uint64_t v41 = a2;
  uint64_t v46 = a9;
  int v42 = a4 & 1;
  int v43 = a6 & 1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v38 = a11;
  uint64_t v39 = a13;
  uint64_t v40 = type metadata accessor for PlottableProjection();
  uint64_t v16 = *(void *)(v40 - 8);
  MEMORY[0x270FA5388](v40);
  uint64_t v18 = (char *)&v37 - v17;
  uint64_t v19 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v37 - v21;
  uint64_t v23 = type metadata accessor for PlottableValue();
  __n128 v24 = MEMORY[0x270FA5388](v23 - 8);
  long long v26 = (char *)&v37 - v25;
  long long v27 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16);
  v27(v22, a1, AssociatedTypeWitness, v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v41, v40);
  uint64_t v28 = (uint64_t)v18;
  uint64_t v29 = v38;
  uint64_t v30 = v39;
  sub_21F83BFDC((uint64_t)v22, v28, v38, AssociatedTypeWitness, v39, (uint64_t)v26);
  ((void (*)(char *, uint64_t, uint64_t))v27)(v22, a1, AssociatedTypeWitness);
  long long v31 = *(_OWORD *)(a7 + 80);
  v48[4] = *(_OWORD *)(a7 + 64);
  v48[5] = v31;
  v48[6] = *(_OWORD *)(a7 + 96);
  LOBYTE(v48[7]) = *(unsigned char *)(a7 + 112);
  long long v32 = *(_OWORD *)(a7 + 16);
  v48[0] = *(_OWORD *)a7;
  v48[1] = v32;
  long long v33 = *(_OWORD *)(a7 + 48);
  v48[2] = *(_OWORD *)(a7 + 32);
  v48[3] = v33;
  sub_21F932438(a7, (void (*)(void, void, void, void, void, void, void, void, void, void, void, char))sub_21F9324E0, (void (*)(uint64_t, uint64_t))sub_21F9324DC);
  uint64_t v34 = sub_21F83C49C((uint64_t)v22, (uint64_t)v48, AssociatedTypeWitness);
  BarMark.init<A>(x:yStart:yEnd:width:stacking:)((uint64_t)v26, v44, v42, v45, v43, v34, v35, v47, v48, v29, v30);
  return memcpy(v46, v48, 0x120uLL);
}

uint64_t sub_21F92C17C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_getAssociatedTypeWitness();
  v2 = (int *)(type metadata accessor for PlottableProjection() - 8);
  uint64_t v3 = *(unsigned __int8 *)(*(void *)v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  unint64_t v5 = (*(void *)(*(void *)v2 + 64) + v4 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v4;
  sub_21F7656A8(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8), *(unsigned char *)(v0 + v4 + 16));
  swift_bridgeObjectRelease();
  uint64_t v7 = v6 + v2[13];
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v7, v1);
      break;
    case 1u:
      v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8);
      v8(v7, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v8(v7 + *(int *)(TupleTypeMetadata2 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v10 = sub_21FA24310();
      uint64_t v11 = sub_21FA24320();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v7 + *(int *)(TupleTypeMetadata3 + 48), v10);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v7 + *(int *)(TupleTypeMetadata3 + 64), v11);
      break;
    default:
      break;
  }
  uint64_t v13 = v0 + v5;
  int v14 = *(unsigned __int8 *)(v0 + v5 + 96);
  if (v14 != 255) {
    sub_21F82B5F8(*(void *)(v13 + 88), v14 & 1);
  }
  sub_21F82B5F8(*(void *)(v13 + 104), *(unsigned char *)(v13 + 112));

  return MEMORY[0x270FA0238](v0, v5 + 114, v3 | 7);
}

void *sub_21F92C484@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v7 = v2[5];
  swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v11 = v10 + *(void *)(v9 + 64);
  return sub_21F92BEA0(a1, (uint64_t)v2 + v10, *(void *)((char *)v2 + ((v11 + 7) & 0xFFFFFFFFFFFFFFF8)), *((unsigned char *)v2 + ((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)((char *)v2 + ((v11 + 23) & 0xFFFFFFFFFFFFFFF8)), *((unsigned char *)v2 + ((v11 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), (uint64_t)v2 + ((v11 + 39) & 0xFFFFFFFFFFFFFFF8), *((unsigned __int8 *)v2 + ((v11 + 39) & 0xFFFFFFFFFFFFFFF8) + 113), a2, v5, v6, v8, v7);
}

uint64_t BarPlot.init<A, B>(_:xStart:xEnd:y:height:stacking:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, long long *a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int v53 = a8;
  uint64_t v46 = a6;
  int v52 = a5;
  uint64_t v51 = a4;
  int v50 = a3;
  uint64_t v49 = a2;
  uint64_t v42 = a1;
  uint64_t v54 = a9;
  uint64_t v44 = a11;
  uint64_t v45 = a13;
  uint64_t v40 = a12;
  swift_getAssociatedTypeWitness();
  uint64_t v15 = type metadata accessor for PlottableProjection();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v40 - v18;
  uint64_t v20 = *(void *)(a10 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v40 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = v23;
  uint64_t v48 = type metadata accessor for VectorizedBarPlotContent();
  uint64_t v47 = *(void *)(v48 - 8);
  MEMORY[0x270FA5388](v48);
  uint64_t v43 = (uint64_t)&v40 - v24;
  long long v25 = a7[5];
  long long v59 = a7[4];
  long long v60 = v25;
  long long v61 = a7[6];
  char v62 = *((unsigned char *)a7 + 112);
  long long v26 = a7[1];
  long long v55 = *a7;
  long long v56 = v26;
  long long v27 = a7[3];
  long long v57 = a7[2];
  long long v58 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, a1, a10);
  uint64_t v28 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v46, v15);
  unint64_t v29 = (*(unsigned __int8 *)(v16 + 80) + 73) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v30 = swift_allocObject();
  uint64_t v31 = v44;
  *(void *)(v30 + 16) = a10;
  *(void *)(v30 + 24) = v31;
  uint64_t v32 = v40;
  uint64_t v33 = v45;
  *(void *)(v30 + 32) = v40;
  *(void *)(v30 + 40) = v33;
  *(void *)(v30 + 48) = v49;
  *(unsigned char *)(v30 + 56) = v50 & 1;
  *(void *)(v30 + 64) = v51;
  *(unsigned char *)(v30 + 72) = v52 & 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v30 + v29, v19, v15);
  unint64_t v34 = v30 + ((v17 + v29 + 7) & 0xFFFFFFFFFFFFFFF8);
  long long v35 = v60;
  *(_OWORD *)(v34 + 64) = v59;
  *(_OWORD *)(v34 + 80) = v35;
  *(_OWORD *)(v34 + 96) = v61;
  *(unsigned char *)(v34 + 112) = v62;
  long long v36 = v56;
  *(_OWORD *)unint64_t v34 = v55;
  *(_OWORD *)(v34 + 16) = v36;
  long long v37 = v58;
  *(_OWORD *)(v34 + 32) = v57;
  *(_OWORD *)(v34 + 48) = v37;
  *(unsigned char *)(v34 + 113) = v53;
  uint64_t v38 = v43;
  sub_21F929194((uint64_t)v41, (uint64_t)sub_21F92CFB4, v30, a10, (uint64_t)&type metadata for BarMark, v32, (uint64_t)&protocol witness table for BarMark, v43);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v28, v15);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v42, a10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 32))(v54, v38, v48);
}

void *sub_21F92C9CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int v47 = a8;
  uint64_t v41 = a6;
  uint64_t v44 = a2;
  uint64_t v45 = a4;
  uint64_t v46 = a9;
  int v42 = a3 & 1;
  int v43 = a5 & 1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v38 = a11;
  uint64_t v39 = a13;
  uint64_t v40 = type metadata accessor for PlottableProjection();
  uint64_t v16 = *(void *)(v40 - 8);
  MEMORY[0x270FA5388](v40);
  uint64_t v18 = (char *)&v37 - v17;
  uint64_t v19 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v37 - v21;
  uint64_t v23 = type metadata accessor for PlottableValue();
  __n128 v24 = MEMORY[0x270FA5388](v23 - 8);
  long long v26 = (char *)&v37 - v25;
  long long v27 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16);
  v27(v22, a1, AssociatedTypeWitness, v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v41, v40);
  uint64_t v28 = (uint64_t)v18;
  uint64_t v29 = v38;
  uint64_t v30 = v39;
  sub_21F83BFDC((uint64_t)v22, v28, v38, AssociatedTypeWitness, v39, (uint64_t)v26);
  ((void (*)(char *, uint64_t, uint64_t))v27)(v22, a1, AssociatedTypeWitness);
  long long v31 = *(_OWORD *)(a7 + 80);
  v48[4] = *(_OWORD *)(a7 + 64);
  v48[5] = v31;
  v48[6] = *(_OWORD *)(a7 + 96);
  LOBYTE(v48[7]) = *(unsigned char *)(a7 + 112);
  long long v32 = *(_OWORD *)(a7 + 16);
  v48[0] = *(_OWORD *)a7;
  v48[1] = v32;
  long long v33 = *(_OWORD *)(a7 + 48);
  v48[2] = *(_OWORD *)(a7 + 32);
  v48[3] = v33;
  sub_21F932438(a7, (void (*)(void, void, void, void, void, void, void, void, void, void, void, char))sub_21F9324E0, (void (*)(uint64_t, uint64_t))sub_21F9324DC);
  uint64_t v34 = sub_21F83C49C((uint64_t)v22, (uint64_t)v48, AssociatedTypeWitness);
  BarMark.init<A>(xStart:xEnd:y:height:stacking:)(v44, v42, v45, v43, (uint64_t)v26, v34, v35, v47, v48, v29, v30);
  return memcpy(v46, v48, 0x120uLL);
}

uint64_t sub_21F92CCAC()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_getAssociatedTypeWitness();
  v2 = (int *)(type metadata accessor for PlottableProjection() - 8);
  uint64_t v3 = *(unsigned __int8 *)(*(void *)v2 + 80);
  uint64_t v4 = (v3 + 73) & ~v3;
  unint64_t v5 = (*(void *)(*(void *)v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v4;
  sub_21F7656A8(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8), *(unsigned char *)(v0 + v4 + 16));
  swift_bridgeObjectRelease();
  uint64_t v7 = v6 + v2[13];
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v7, v1);
      break;
    case 1u:
      uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8);
      v8(v7, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v8(v7 + *(int *)(TupleTypeMetadata2 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v10 = sub_21FA24310();
      uint64_t v11 = sub_21FA24320();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v7 + *(int *)(TupleTypeMetadata3 + 48), v10);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v7 + *(int *)(TupleTypeMetadata3 + 64), v11);
      break;
    default:
      break;
  }
  uint64_t v13 = v0 + v5;
  int v14 = *(unsigned __int8 *)(v0 + v5 + 96);
  if (v14 != 255) {
    sub_21F82B5F8(*(void *)(v13 + 88), v14 & 1);
  }
  sub_21F82B5F8(*(void *)(v13 + 104), *(unsigned char *)(v13 + 112));

  return MEMORY[0x270FA0238](v0, v5 + 114, v3 | 7);
}

void *sub_21F92CFB4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = *(void *)(v2 + 32);
  uint64_t v7 = *(void *)(v2 + 40);
  swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 73) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = v2 + ((*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_21F92C9CC(a1, *(void *)(v2 + 48), *(unsigned char *)(v2 + 56), *(void *)(v2 + 64), *(unsigned char *)(v2 + 72), v2 + v10, v11, *(unsigned __int8 *)(v11 + 113), a2, v5, v6, v8, v7);
}

uint64_t BarPlot.init<A, B>(_:xStart:xEnd:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v58 = a7;
  uint64_t v57 = a6;
  int v56 = a5;
  uint64_t v55 = a4;
  uint64_t v60 = a2;
  uint64_t v61 = a3;
  uint64_t v49 = a1;
  uint64_t v59 = a9;
  uint64_t v51 = a10;
  uint64_t v52 = a12;
  uint64_t v46 = a11;
  swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for PlottableProjection();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  MEMORY[0x270FA5388](v14);
  uint64_t v45 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v43 - v18;
  uint64_t v44 = (char *)&v43 - v18;
  uint64_t v50 = *(void *)(a8 - 8);
  uint64_t v20 = v50;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v47 = v23;
  uint64_t v24 = type metadata accessor for VectorizedBarPlotContent();
  uint64_t v53 = *(void *)(v24 - 8);
  uint64_t v54 = v24;
  __n128 v25 = MEMORY[0x270FA5388](v24);
  uint64_t v48 = (uint64_t)&v43 - v26;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v20 + 16))(v23, a1, a8, v25);
  long long v27 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v27(v19, v60, v14);
  v27((char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v61, v14);
  uint64_t v28 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v29 = (v28 + 48) & ~v28;
  uint64_t v30 = (v16 + v28 + v29) & ~v28;
  unint64_t v31 = (v30 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = (v30 + v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  long long v33 = (char *)swift_allocObject();
  uint64_t v34 = v51;
  *((void *)v33 + 2) = a8;
  *((void *)v33 + 3) = v34;
  uint64_t v35 = v46;
  uint64_t v36 = v52;
  *((void *)v33 + 4) = v46;
  *((void *)v33 + 5) = v36;
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v37(&v33[v29], v44, v14);
  v37(&v33[v30], v45, v14);
  uint64_t v38 = &v33[v31];
  *(void *)uint64_t v38 = v55;
  v38[8] = v56 & 1;
  uint64_t v39 = &v33[v32];
  *(void *)uint64_t v39 = v57;
  v39[8] = v58 & 1;
  uint64_t v40 = v48;
  sub_21F929194((uint64_t)v47, (uint64_t)sub_21F92DC70, (uint64_t)v33, a8, (uint64_t)&type metadata for BarMark, v35, (uint64_t)&protocol witness table for BarMark, v48);
  uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v41(v61, v14);
  v41(v60, v14);
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, a8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 32))(v59, v40, v54);
}

void *sub_21F92D4B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, void *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v45 = a4;
  uint64_t v46 = a6;
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  uint64_t v35 = a1;
  int v47 = a8;
  int v43 = a5 & 1;
  int v44 = a7 & 1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v37 = a9;
  uint64_t v38 = a11;
  uint64_t v40 = type metadata accessor for PlottableProjection();
  uint64_t v13 = *(void *)(v40 - 8);
  MEMORY[0x270FA5388](v40);
  uint64_t v15 = (char *)&v34 - v14;
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v34 - v18;
  uint64_t v20 = type metadata accessor for PlottableValue();
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v39 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v23 = MEMORY[0x270FA5388](v22);
  __n128 v25 = (char *)&v34 - v24;
  uint64_t v36 = (uint64_t)&v34 - v24;
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16);
  uint64_t v34 = v16 + 16;
  v26(v19, a1, AssociatedTypeWitness, v23);
  long long v27 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v28 = v40;
  v27(v15, v41, v40);
  uint64_t v29 = (uint64_t)v25;
  uint64_t v31 = v37;
  uint64_t v30 = v38;
  sub_21F83BFDC((uint64_t)v19, (uint64_t)v15, v37, AssociatedTypeWitness, v38, v29);
  ((void (*)(char *, uint64_t, uint64_t))v26)(v19, v35, AssociatedTypeWitness);
  v27(v15, v42, v28);
  uint64_t v32 = v39;
  sub_21F83BFDC((uint64_t)v19, (uint64_t)v15, v31, AssociatedTypeWitness, v30, v39);
  BarMark.init<A>(xStart:xEnd:yStart:yEnd:)(v36, v32, v45, v43, v46, v44, v31, v30, v48);
  return memcpy(v47, v48, 0x120uLL);
}

uint64_t sub_21F92D78C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for PlottableProjection();
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = *(void *)(*(void *)(v2 - 8) + 64);
  uint64_t v6 = (v5 + v3 + v4) & ~v3;
  uint64_t v7 = v0 + v4;
  sub_21F7656A8(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8), *(unsigned char *)(v0 + v4 + 16));
  swift_bridgeObjectRelease();
  uint64_t v8 = v7 + *(int *)(v2 + 44);
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v8, v1);
      break;
    case 1u:
      uint64_t v25 = v6;
      uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8);
      v9(v8, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v9(v8 + *(int *)(TupleTypeMetadata2 + 48), v1);
      uint64_t v6 = v25;
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v26 = v6;
      uint64_t v11 = sub_21FA24310();
      uint64_t v24 = v5;
      uint64_t v12 = sub_21FA24320();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v8 + *(int *)(TupleTypeMetadata3 + 48), v11);
      uint64_t v14 = v8 + *(int *)(TupleTypeMetadata3 + 64);
      uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
      uint64_t v16 = v12;
      uint64_t v5 = v24;
      uint64_t v6 = v26;
      v15(v14, v16);
      break;
    default:
      break;
  }
  sub_21F7656A8(*(void *)(v0 + v6), *(void *)(v0 + v6 + 8), *(unsigned char *)(v0 + v6 + 16));
  swift_bridgeObjectRelease();
  uint64_t v17 = v0 + v6 + *(int *)(v2 + 44);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v17, v1);
      break;
    case 1u:
      uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8);
      v18(v17, v1);
      uint64_t v19 = swift_getTupleTypeMetadata2();
      v18(v17 + *(int *)(v19 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v20 = sub_21FA24310();
      uint64_t v21 = sub_21FA24320();
      uint64_t v22 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v17 + *(int *)(v22 + 48), v20);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v17 + *(int *)(v22 + 64), v21);
      break;
    default:
      break;
  }

  return MEMORY[0x270FA0238](v0, ((v5 + v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 9, v3 | 7);
}

void *sub_21F92DC70@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v6 = v2[5];
  swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 + 48) & ~v9;
  uint64_t v11 = *(void *)(v8 + 64);
  uint64_t v12 = (v11 + v9 + v10) & ~v9;
  return sub_21F92D4B4(a1, (uint64_t)v2 + v10, (uint64_t)v2 + v12, *(void *)((char *)v2 + ((v12 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)), *((unsigned char *)v2 + ((v12 + v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)((char *)v2 + ((v12 + v11 + 23) & 0xFFFFFFFFFFFFFFF8)), *((unsigned char *)v2 + ((v12 + v11 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), a2, v5, v7, v6);
}

uint64_t BarPlot.init<A, B>(_:xStart:xEnd:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v48 = a7;
  uint64_t v54 = a9;
  uint64_t v55 = a6;
  int v53 = a5;
  uint64_t v52 = a4;
  int v51 = a3;
  uint64_t v50 = a2;
  uint64_t v43 = a1;
  uint64_t v45 = a10;
  uint64_t v46 = a12;
  uint64_t v40 = a11;
  swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for PlottableProjection();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  MEMORY[0x270FA5388](v14);
  uint64_t v39 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v39 - v18;
  uint64_t v44 = *(void *)(a8 - 8);
  uint64_t v20 = v44;
  MEMORY[0x270FA5388](v21);
  __n128 v23 = (char *)&v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = v23;
  uint64_t v49 = type metadata accessor for VectorizedBarPlotContent();
  uint64_t v47 = *(void *)(v49 - 8);
  __n128 v24 = MEMORY[0x270FA5388](v49);
  uint64_t v42 = (uint64_t)&v39 - v25;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v20 + 16))(v23, a1, a8, v24);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v26(v19, v55, v14);
  uint64_t v27 = v48;
  v26((char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v48, v14);
  uint64_t v28 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v29 = (v28 + 73) & ~v28;
  uint64_t v30 = (v16 + v28 + v29) & ~v28;
  uint64_t v31 = swift_allocObject();
  uint64_t v32 = v45;
  *(void *)(v31 + 16) = a8;
  *(void *)(v31 + 24) = v32;
  uint64_t v33 = v40;
  uint64_t v34 = v46;
  *(void *)(v31 + 32) = v40;
  *(void *)(v31 + 40) = v34;
  *(void *)(v31 + 48) = v50;
  *(unsigned char *)(v31 + 56) = v51 & 1;
  *(void *)(v31 + 64) = v52;
  *(unsigned char *)(v31 + 72) = v53 & 1;
  uint64_t v35 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 32);
  v35(v31 + v29, v19, v14);
  v35(v31 + v30, v39, v14);
  uint64_t v36 = v42;
  sub_21F929194((uint64_t)v41, (uint64_t)sub_21F92E930, v31, a8, (uint64_t)&type metadata for BarMark, v33, (uint64_t)&protocol witness table for BarMark, v42);
  uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v37(v27, v14);
  v37(v55, v14);
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, a8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 32))(v54, v36, v49);
}

void *sub_21F92E178@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v40 = a6;
  uint64_t v41 = a7;
  uint64_t v44 = a2;
  uint64_t v45 = a4;
  uint64_t v34 = a1;
  uint64_t v46 = a8;
  int v42 = a3 & 1;
  int v43 = a5 & 1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v39 = type metadata accessor for PlottableProjection();
  uint64_t v13 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  uint64_t v38 = (char *)&v33 - v14;
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v33 - v17;
  uint64_t v19 = type metadata accessor for PlottableValue();
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v37 = (uint64_t)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v22 = MEMORY[0x270FA5388](v21);
  __n128 v24 = (char *)&v33 - v23;
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v33 = v15 + 16;
  uint64_t v35 = v25;
  uint64_t v36 = (uint64_t)&v33 - v23;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v25)(v18, a1, AssociatedTypeWitness, v22);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v27 = (uint64_t)v38;
  uint64_t v28 = v39;
  v26(v38, v40, v39);
  uint64_t v29 = (uint64_t)v24;
  uint64_t v30 = v27;
  sub_21F83BFDC((uint64_t)v18, v27, a9, AssociatedTypeWitness, a11, v29);
  v35(v18, v34, AssociatedTypeWitness);
  v26((char *)v27, v41, v28);
  uint64_t v31 = v37;
  sub_21F83BFDC((uint64_t)v18, v30, a9, AssociatedTypeWitness, a11, v37);
  BarMark.init<A>(xStart:xEnd:yStart:yEnd:)(v44, v42, v45, v43, v36, v31, a9, a11, v47);
  return memcpy(v46, v47, 0x120uLL);
}

uint64_t sub_21F92E458()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for PlottableProjection();
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v4 = (v3 + 73) & ~v3;
  uint64_t v5 = *(void *)(*(void *)(v2 - 8) + 64);
  uint64_t v6 = (v5 + v3 + v4) & ~v3;
  uint64_t v7 = v0 + v4;
  sub_21F7656A8(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8), *(unsigned char *)(v0 + v4 + 16));
  swift_bridgeObjectRelease();
  uint64_t v8 = v7 + *(int *)(v2 + 44);
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v8, v1);
      break;
    case 1u:
      uint64_t v25 = v6;
      uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8);
      v9(v8, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v9(v8 + *(int *)(TupleTypeMetadata2 + 48), v1);
      uint64_t v6 = v25;
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v26 = v6;
      uint64_t v11 = sub_21FA24310();
      uint64_t v24 = v5;
      uint64_t v12 = sub_21FA24320();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v8 + *(int *)(TupleTypeMetadata3 + 48), v11);
      uint64_t v14 = v8 + *(int *)(TupleTypeMetadata3 + 64);
      uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
      uint64_t v16 = v12;
      uint64_t v5 = v24;
      uint64_t v6 = v26;
      v15(v14, v16);
      break;
    default:
      break;
  }
  sub_21F7656A8(*(void *)(v0 + v6), *(void *)(v0 + v6 + 8), *(unsigned char *)(v0 + v6 + 16));
  swift_bridgeObjectRelease();
  uint64_t v17 = v0 + v6 + *(int *)(v2 + 44);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v17, v1);
      break;
    case 1u:
      uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8);
      v18(v17, v1);
      uint64_t v19 = swift_getTupleTypeMetadata2();
      v18(v17 + *(int *)(v19 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v20 = sub_21FA24310();
      uint64_t v21 = sub_21FA24320();
      uint64_t v22 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v17 + *(int *)(v22 + 48), v20);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v17 + *(int *)(v22 + 64), v21);
      break;
    default:
      break;
  }

  return MEMORY[0x270FA0238](v0, v6 + v5, v3 | 7);
}

void *sub_21F92E930@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(v2 + 32);
  uint64_t v6 = *(void *)(v2 + 40);
  swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  return sub_21F92E178(a1, *(void *)(v2 + 48), *(unsigned char *)(v2 + 56), *(void *)(v2 + 64), *(unsigned char *)(v2 + 72), v2 + ((v9 + 73) & ~v9), v2 + ((*(void *)(v8 + 64) + v9 + ((v9 + 73) & ~v9)) & ~v9), a2, v5, v7, v6);
}

uint64_t BarPlot.init<A, B>(_:x:yStart:yEnd:width:stacking:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, long long *a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v49 = a8;
  int v55 = a6;
  uint64_t v54 = a4;
  uint64_t v44 = a2;
  uint64_t v46 = a1;
  uint64_t v56 = a9;
  uint64_t v43 = a10;
  uint64_t v50 = a11;
  uint64_t v52 = a3;
  uint64_t v45 = type metadata accessor for PlottableProjection();
  uint64_t v15 = *(void *)(v45 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  MEMORY[0x270FA5388](v45);
  uint64_t v18 = (char *)&v41 - v17;
  uint64_t v47 = *(void *)(a7 - 8);
  uint64_t v19 = v47;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v42 = v22;
  uint64_t v53 = type metadata accessor for VectorizedBarPlotContent();
  uint64_t v51 = *(void *)(v53 - 8);
  MEMORY[0x270FA5388](v53);
  uint64_t v48 = (uint64_t)&v41 - v23;
  long long v24 = a5[5];
  long long v61 = a5[4];
  long long v62 = v24;
  long long v63 = a5[6];
  char v64 = *((unsigned char *)a5 + 112);
  long long v25 = a5[1];
  long long v57 = *a5;
  long long v58 = v25;
  long long v26 = a5[3];
  long long v59 = a5[2];
  long long v60 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, a1, a7);
  uint64_t v27 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a2, v45);
  unint64_t v28 = (*(unsigned __int8 *)(v15 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v29 = (v16 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = (v29 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v31 = (char *)swift_allocObject();
  uint64_t v32 = v49;
  *((void *)v31 + 2) = a7;
  *((void *)v31 + 3) = v32;
  uint64_t v33 = v43;
  uint64_t v34 = v50;
  *((void *)v31 + 4) = v43;
  *((void *)v31 + 5) = v34;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v31[v28], v18, v27);
  *(void *)&v31[v29] = v52;
  *(void *)&v31[v30] = v54;
  uint64_t v35 = &v31[(v30 + 15) & 0xFFFFFFFFFFFFFFF8];
  long long v36 = v62;
  *((_OWORD *)v35 + 4) = v61;
  *((_OWORD *)v35 + 5) = v36;
  *((_OWORD *)v35 + 6) = v63;
  v35[112] = v64;
  long long v37 = v58;
  *(_OWORD *)uint64_t v35 = v57;
  *((_OWORD *)v35 + 1) = v37;
  long long v38 = v60;
  *((_OWORD *)v35 + 2) = v59;
  *((_OWORD *)v35 + 3) = v38;
  v35[113] = v55;
  uint64_t v39 = v48;
  sub_21F929194((uint64_t)v42, (uint64_t)sub_21F92F4B8, (uint64_t)v31, a7, (uint64_t)&type metadata for BarMark, v33, (uint64_t)&protocol witness table for BarMark, v48);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v44, v27);
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, a7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 32))(v56, v39, v53);
}

void *sub_21F92EE64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9, uint64_t a10)
{
  int v44 = a6;
  uint64_t v43 = a4;
  uint64_t v41 = a2;
  uint64_t v45 = a8;
  int v42 = a3;
  uint64_t v13 = *(void *)(*a3 + *MEMORY[0x263F8EA20]);
  uint64_t v36 = a10;
  uint64_t v14 = type metadata accessor for PlottableProjection();
  uint64_t v37 = *(void *)(v14 - 8);
  uint64_t v38 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v36 - v15;
  uint64_t v17 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v36 - v19;
  uint64_t v39 = a7;
  uint64_t v21 = type metadata accessor for PlottableValue();
  __n128 v22 = MEMORY[0x270FA5388](v21 - 8);
  long long v24 = (char *)&v36 - v23;
  uint64_t v40 = (uint64_t)&v36 - v23;
  long long v25 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16);
  v25(v20, a1, v13, v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v16, v41, v38);
  uint64_t v26 = (uint64_t)v16;
  uint64_t v27 = v36;
  sub_21F83BFDC((uint64_t)v20, v26, a7, v13, v36, (uint64_t)v24);
  swift_getAtKeyPath();
  uint64_t v28 = v47;
  swift_getAtKeyPath();
  uint64_t v29 = v46;
  ((void (*)(char *, uint64_t, uint64_t))v25)(v20, a1, v13);
  long long v30 = *(_OWORD *)(a5 + 80);
  v48[4] = *(_OWORD *)(a5 + 64);
  v48[5] = v30;
  v48[6] = *(_OWORD *)(a5 + 96);
  LOBYTE(v48[7]) = *(unsigned char *)(a5 + 112);
  long long v31 = *(_OWORD *)(a5 + 16);
  v48[0] = *(_OWORD *)a5;
  v48[1] = v31;
  long long v32 = *(_OWORD *)(a5 + 48);
  v48[2] = *(_OWORD *)(a5 + 32);
  v48[3] = v32;
  sub_21F932438(a5, (void (*)(void, void, void, void, void, void, void, void, void, void, void, char))sub_21F9324E0, (void (*)(uint64_t, uint64_t))sub_21F9324DC);
  uint64_t v33 = sub_21F83C49C((uint64_t)v20, (uint64_t)v48, v13);
  BarMark.init<A>(x:yStart:yEnd:width:stacking:)(v40, v28, 0, v29, 0, v33, v34, v44, v48, v39, v27);
  return memcpy(v45, v48, 0x120uLL);
}

uint64_t sub_21F92F188()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t v2 = (int *)(type metadata accessor for PlottableProjection() - 8);
  uint64_t v3 = *(unsigned __int8 *)(*(void *)v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  unint64_t v5 = (((((*(void *)(*(void *)v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v4;
  sub_21F7656A8(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8), *(unsigned char *)(v0 + v4 + 16));
  swift_bridgeObjectRelease();
  uint64_t v7 = v6 + v2[13];
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v7, v1);
      break;
    case 1u:
      uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8);
      v8(v7, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v8(v7 + *(int *)(TupleTypeMetadata2 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v10 = sub_21FA24310();
      uint64_t v11 = sub_21FA24320();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v7 + *(int *)(TupleTypeMetadata3 + 48), v10);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v7 + *(int *)(TupleTypeMetadata3 + 64), v11);
      break;
    default:
      break;
  }
  swift_release();
  swift_release();
  uint64_t v13 = v0 + v5;
  int v14 = *(unsigned __int8 *)(v0 + v5 + 96);
  if (v14 != 255) {
    sub_21F82B5F8(*(void *)(v13 + 88), v14 & 1);
  }
  sub_21F82B5F8(*(void *)(v13 + 104), *(unsigned char *)(v13 + 112));

  return MEMORY[0x270FA0238](v0, v5 + 114, v3 | 7);
}

void *sub_21F92F4B8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v6 = v2[5];
  swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v10 = (*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_21F92EE64(a1, (uint64_t)v2 + v9, *(void **)((char *)v2 + v10), *(void *)((char *)v2 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8)), (uint64_t)v2 + ((((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *((unsigned __int8 *)v2 + ((((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 113), v5, a2, v7, v6);
}

uint64_t BarPlot.init<A, B>(_:xStart:xEnd:y:height:stacking:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, long long *a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v48 = a8;
  int v54 = a6;
  uint64_t v52 = a3;
  uint64_t v46 = a1;
  uint64_t v55 = a9;
  uint64_t v44 = a10;
  uint64_t v49 = a11;
  uint64_t v50 = a2;
  uint64_t v45 = type metadata accessor for PlottableProjection();
  uint64_t v15 = *(void *)(v45 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  MEMORY[0x270FA5388](v45);
  uint64_t v18 = (char *)&v42 - v17;
  uint64_t v19 = *(void *)(a7 - 8);
  MEMORY[0x270FA5388](v20);
  __n128 v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = v22;
  uint64_t v53 = type metadata accessor for VectorizedBarPlotContent();
  uint64_t v51 = *(void *)(v53 - 8);
  MEMORY[0x270FA5388](v53);
  uint64_t v47 = (uint64_t)&v42 - v23;
  long long v24 = a5[5];
  long long v60 = a5[4];
  long long v61 = v24;
  long long v62 = a5[6];
  char v63 = *((unsigned char *)a5 + 112);
  long long v25 = a5[1];
  long long v56 = *a5;
  long long v57 = v25;
  long long v26 = a5[3];
  long long v58 = a5[2];
  long long v59 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, a1, a7);
  uint64_t v27 = a4;
  uint64_t v28 = a4;
  uint64_t v29 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v28, v45);
  unint64_t v30 = (*(unsigned __int8 *)(v15 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  long long v31 = (char *)swift_allocObject();
  uint64_t v32 = v48;
  *((void *)v31 + 2) = a7;
  *((void *)v31 + 3) = v32;
  uint64_t v33 = v44;
  uint64_t v34 = v49;
  *((void *)v31 + 4) = v44;
  *((void *)v31 + 5) = v34;
  uint64_t v35 = v52;
  *((void *)v31 + 6) = v50;
  *((void *)v31 + 7) = v35;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v31[v30], v18, v29);
  uint64_t v36 = &v31[(v16 + v30 + 7) & 0xFFFFFFFFFFFFFFF8];
  long long v37 = v61;
  *((_OWORD *)v36 + 4) = v60;
  *((_OWORD *)v36 + 5) = v37;
  *((_OWORD *)v36 + 6) = v62;
  v36[112] = v63;
  long long v38 = v57;
  *(_OWORD *)uint64_t v36 = v56;
  *((_OWORD *)v36 + 1) = v38;
  long long v39 = v59;
  *((_OWORD *)v36 + 2) = v58;
  *((_OWORD *)v36 + 3) = v39;
  v36[113] = v54;
  uint64_t v40 = v47;
  sub_21F929194((uint64_t)v43, (uint64_t)sub_21F92FFFC, (uint64_t)v31, a7, (uint64_t)&type metadata for BarMark, v33, (uint64_t)&protocol witness table for BarMark, v47);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v27, v29);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v46, a7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 32))(v55, v40, v53);
}

void *sub_21F92F9CC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9, uint64_t a10)
{
  int v41 = a6;
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  uint64_t v36 = a1;
  uint64_t v42 = a8;
  uint64_t v11 = *(void *)(*a2 + *MEMORY[0x263F8EA20]);
  uint64_t v34 = a7;
  uint64_t v35 = a10;
  uint64_t v37 = type metadata accessor for PlottableProjection();
  uint64_t v12 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  int v14 = (char *)&v33 - v13;
  uint64_t v15 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v33 - v17;
  uint64_t v19 = type metadata accessor for PlottableValue();
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v33 - v20;
  uint64_t v22 = v36;
  swift_getAtKeyPath();
  uint64_t v38 = v44;
  swift_getAtKeyPath();
  uint64_t v39 = v43;
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v23(v18, v22, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v40, v37);
  uint64_t v24 = (uint64_t)v14;
  uint64_t v26 = v34;
  uint64_t v25 = v35;
  sub_21F83BFDC((uint64_t)v18, v24, v34, v11, v35, (uint64_t)v21);
  v23(v18, v22, v11);
  long long v27 = *(_OWORD *)(a5 + 80);
  v45[4] = *(_OWORD *)(a5 + 64);
  v45[5] = v27;
  v45[6] = *(_OWORD *)(a5 + 96);
  LOBYTE(v45[7]) = *(unsigned char *)(a5 + 112);
  long long v28 = *(_OWORD *)(a5 + 16);
  v45[0] = *(_OWORD *)a5;
  v45[1] = v28;
  long long v29 = *(_OWORD *)(a5 + 48);
  v45[2] = *(_OWORD *)(a5 + 32);
  v45[3] = v29;
  sub_21F932438(a5, (void (*)(void, void, void, void, void, void, void, void, void, void, void, char))sub_21F9324E0, (void (*)(uint64_t, uint64_t))sub_21F9324DC);
  uint64_t v30 = sub_21F83C49C((uint64_t)v18, (uint64_t)v45, v11);
  BarMark.init<A>(xStart:xEnd:y:height:stacking:)(v38, 0, v39, 0, (uint64_t)v21, v30, v31, v41, v45, v26, v25);
  return memcpy(v42, v45, 0x120uLL);
}

uint64_t sub_21F92FCE4()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t v2 = (int *)(type metadata accessor for PlottableProjection() - 8);
  uint64_t v3 = *(unsigned __int8 *)(*(void *)v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  unint64_t v5 = (*(void *)(*(void *)v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v4;
  sub_21F7656A8(*(void *)v6, *(void *)(v6 + 8), *(unsigned char *)(v6 + 16));
  swift_bridgeObjectRelease();
  uint64_t v7 = v6 + v2[13];
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v7, v1);
      break;
    case 1u:
      uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8);
      v8(v7, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v8(v7 + *(int *)(TupleTypeMetadata2 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v10 = sub_21FA24310();
      uint64_t v11 = sub_21FA24320();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v7 + *(int *)(TupleTypeMetadata3 + 48), v10);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v7 + *(int *)(TupleTypeMetadata3 + 64), v11);
      break;
    default:
      break;
  }
  uint64_t v13 = v0 + v5;
  int v14 = *(unsigned __int8 *)(v0 + v5 + 96);
  if (v14 != 255) {
    sub_21F82B5F8(*(void *)(v13 + 88), v14 & 1);
  }
  sub_21F82B5F8(*(void *)(v13 + 104), *(unsigned char *)(v13 + 112));

  return MEMORY[0x270FA0238](v0, v5 + 114, v3 | 7);
}

void *sub_21F92FFFC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(v2 + 32);
  uint64_t v6 = *(void *)(v2 + 40);
  swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v2 + ((*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_21F92F9CC(a1, *(void **)(v2 + 48), *(void *)(v2 + 56), v2 + v9, v10, *(unsigned __int8 *)(v10 + 113), v5, a2, v7, v6);
}

uint64_t BarPlot.init<A, B>(_:xStart:xEnd:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v46 = a8;
  uint64_t v57 = a5;
  uint64_t v58 = a9;
  uint64_t v59 = a3;
  uint64_t v49 = a2;
  uint64_t v50 = a1;
  uint64_t v52 = a7;
  uint64_t v53 = a10;
  uint64_t v56 = a4;
  uint64_t v13 = type metadata accessor for PlottableProjection();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x270FA5388](v13);
  uint64_t v45 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v42 - v17;
  uint64_t v44 = (char *)&v42 - v17;
  uint64_t v51 = *(void *)(a6 - 8);
  uint64_t v19 = v51;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = v22;
  uint64_t v23 = type metadata accessor for VectorizedBarPlotContent();
  uint64_t v54 = *(void *)(v23 - 8);
  uint64_t v55 = v23;
  __n128 v24 = MEMORY[0x270FA5388](v23);
  uint64_t v48 = (uint64_t)&v42 - v25;
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16);
  uint64_t v43 = a6;
  v26(v22, a1, a6, v24);
  long long v27 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v27(v18, a2, v13);
  long long v28 = v45;
  v27(v45, v59, v13);
  uint64_t v29 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v30 = (v29 + 48) & ~v29;
  uint64_t v31 = (v15 + v29 + v30) & ~v29;
  unint64_t v32 = (v15 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v33 = (char *)swift_allocObject();
  uint64_t v34 = v52;
  *((void *)v33 + 2) = a6;
  *((void *)v33 + 3) = v34;
  uint64_t v35 = v46;
  uint64_t v36 = v53;
  *((void *)v33 + 4) = v46;
  *((void *)v33 + 5) = v36;
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v37(&v33[v30], v44, v13);
  v37(&v33[v31], v28, v13);
  *(void *)&v33[v32] = v56;
  *(void *)&v33[(v32 + 15) & 0xFFFFFFFFFFFFFFF8] = v57;
  uint64_t v38 = v48;
  uint64_t v39 = v43;
  sub_21F929194((uint64_t)v47, (uint64_t)sub_21F930CFC, (uint64_t)v33, v43, (uint64_t)&type metadata for BarMark, v35, (uint64_t)&protocol witness table for BarMark, v48);
  uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v40(v59, v13);
  v40(v49, v13);
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v39);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 32))(v58, v38, v55);
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  uint64_t v43 = a8;
  uint64_t v50 = a5;
  uint64_t v51 = a7;
  uint64_t v47 = a4;
  uint64_t v48 = a1;
  uint64_t v56 = a3;
  uint64_t v57 = a9;
  uint64_t v52 = a10;
  uint64_t v55 = a2;
  uint64_t v13 = type metadata accessor for PlottableProjection();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x270FA5388](v13);
  uint64_t v45 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v42 - v17;
  uint64_t v42 = (char *)&v42 - v17;
  uint64_t v49 = *(void *)(a6 - 8);
  uint64_t v19 = v49;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = v22;
  uint64_t v23 = type metadata accessor for VectorizedBarPlotContent();
  uint64_t v53 = *(void *)(v23 - 8);
  uint64_t v54 = v23;
  __n128 v24 = MEMORY[0x270FA5388](v23);
  uint64_t v46 = (uint64_t)&v42 - v25;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16))(v22, a1, a6, v24);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v26(v18, a4, v13);
  long long v27 = v45;
  long long v28 = v50;
  v26(v45, v50, v13);
  uint64_t v29 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v30 = (v29 + 64) & ~v29;
  uint64_t v31 = (v15 + v29 + v30) & ~v29;
  unint64_t v32 = (char *)swift_allocObject();
  uint64_t v33 = v51;
  *((void *)v32 + 2) = a6;
  *((void *)v32 + 3) = v33;
  uint64_t v34 = v42;
  uint64_t v35 = v43;
  uint64_t v36 = v52;
  *((void *)v32 + 4) = v43;
  *((void *)v32 + 5) = v36;
  uint64_t v37 = v56;
  *((void *)v32 + 6) = v55;
  *((void *)v32 + 7) = v37;
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v38(&v32[v30], v34, v13);
  v38(&v32[v31], v27, v13);
  uint64_t v39 = v46;
  sub_21F929194((uint64_t)v44, (uint64_t)sub_21F9319D0, (uint64_t)v32, a6, (uint64_t)&type metadata for BarMark, v35, (uint64_t)&protocol witness table for BarMark, v46);
  uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v40(v28, v13);
  v40(v47, v13);
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 32))(v57, v39, v54);
}

void *sub_21F9304E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, void *a7@<X8>, uint64_t a8)
{
  uint64_t v41 = a5;
  uint64_t v42 = a7;
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  uint64_t v9 = *(void *)(*a4 + *MEMORY[0x263F8EA20]);
  uint64_t v43 = a6;
  uint64_t v34 = a8;
  uint64_t v37 = type metadata accessor for PlottableProjection();
  uint64_t v44 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  uint64_t v11 = (char *)v33 - v10;
  uint64_t v12 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v33 - v14;
  uint64_t v16 = type metadata accessor for PlottableValue();
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v35 = (uint64_t)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)v33 - v20;
  uint64_t v36 = (uint64_t)v33 - v20;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16);
  v33[1] = v12 + 16;
  v22(v15, a1, v9, v19);
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
  v44 += 16;
  uint64_t v24 = v37;
  v23(v11, v38, v37);
  uint64_t v25 = (uint64_t)v21;
  uint64_t v26 = v34;
  sub_21F83BFDC((uint64_t)v15, (uint64_t)v11, v43, v9, v34, v25);
  uint64_t v27 = v9;
  ((void (*)(char *, uint64_t, uint64_t))v22)(v15, a1, v9);
  v23(v11, v39, v24);
  uint64_t v28 = v35;
  uint64_t v29 = (uint64_t)v11;
  uint64_t v30 = v43;
  sub_21F83BFDC((uint64_t)v15, v29, v43, v27, v26, v35);
  swift_getAtKeyPath();
  uint64_t v31 = v46;
  swift_getAtKeyPath();
  BarMark.init<A>(xStart:xEnd:yStart:yEnd:)(v36, v28, v31, 0, v45, 0, v30, v26, v47);
  return memcpy(v42, v47, 0x120uLL);
}

uint64_t sub_21F9307F8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for PlottableProjection();
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = *(void *)(*(void *)(v2 - 8) + 64);
  uint64_t v6 = (v5 + v3 + v4) & ~v3;
  uint64_t v7 = v0 + v4;
  sub_21F7656A8(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8), *(unsigned char *)(v0 + v4 + 16));
  swift_bridgeObjectRelease();
  uint64_t v8 = v7 + *(int *)(v2 + 44);
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v8, v1);
      break;
    case 1u:
      uint64_t v25 = v6;
      uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8);
      v9(v8, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v9(v8 + *(int *)(TupleTypeMetadata2 + 48), v1);
      uint64_t v6 = v25;
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v26 = v6;
      uint64_t v11 = sub_21FA24310();
      uint64_t v24 = v5;
      uint64_t v12 = sub_21FA24320();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v8 + *(int *)(TupleTypeMetadata3 + 48), v11);
      uint64_t v14 = v8 + *(int *)(TupleTypeMetadata3 + 64);
      uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
      uint64_t v16 = v12;
      uint64_t v5 = v24;
      uint64_t v6 = v26;
      v15(v14, v16);
      break;
    default:
      break;
  }
  sub_21F7656A8(*(void *)(v0 + v6), *(void *)(v0 + v6 + 8), *(unsigned char *)(v0 + v6 + 16));
  swift_bridgeObjectRelease();
  uint64_t v17 = v0 + v6 + *(int *)(v2 + 44);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v17, v1);
      break;
    case 1u:
      uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8);
      v18(v17, v1);
      uint64_t v19 = swift_getTupleTypeMetadata2();
      v18(v17 + *(int *)(v19 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v20 = sub_21FA24310();
      uint64_t v21 = sub_21FA24320();
      uint64_t v22 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v17 + *(int *)(v22 + 48), v20);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v17 + *(int *)(v22 + 64), v21);
      break;
    default:
      break;
  }
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, ((((v5 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

void *sub_21F930CFC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(v2 + 40);
  swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v8 + 48) & ~v8;
  uint64_t v10 = *(void *)(v7 + 64);
  return sub_21F9304E0(a1, v2 + v9, v2 + ((v10 + v8 + v9) & ~v8), *(void **)(v2 + ((v10 + ((v10 + v8 + v9) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2 + ((((v10 + ((v10 + v8 + v9) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), v5, a2, v6);
}

void *sub_21F9311D8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, void *a6@<X8>, uint64_t a7)
{
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  uint64_t v41 = a6;
  uint64_t v42 = a1;
  uint64_t v8 = *(void *)(*a2 + *MEMORY[0x263F8EA20]);
  uint64_t v35 = a7;
  uint64_t v9 = type metadata accessor for PlottableProjection();
  uint64_t v37 = *(void *)(v9 - 8);
  uint64_t v38 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v31 - v10;
  uint64_t v12 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v31 - v14;
  uint64_t v16 = type metadata accessor for PlottableValue();
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v36 = (uint64_t)v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)v31 - v19;
  uint64_t v32 = (uint64_t)v31 - v19;
  uint64_t v21 = v42;
  swift_getAtKeyPath();
  uint64_t v34 = v44;
  swift_getAtKeyPath();
  uint64_t v33 = v43;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v31[1] = v12 + 16;
  v22(v15, v21, v8);
  uint64_t v23 = v38;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 16);
  v24(v11, v39, v38);
  uint64_t v25 = (uint64_t)v20;
  uint64_t v26 = a5;
  uint64_t v27 = a5;
  uint64_t v28 = v35;
  sub_21F83BFDC((uint64_t)v15, (uint64_t)v11, v27, v8, v35, v25);
  v22(v15, v42, v8);
  v24(v11, v40, v23);
  uint64_t v29 = v36;
  sub_21F83BFDC((uint64_t)v15, (uint64_t)v11, v26, v8, v28, v36);
  BarMark.init<A>(xStart:xEnd:yStart:yEnd:)(v34, 0, v33, 0, v32, v29, v26, v28, v45);
  return memcpy(v41, v45, 0x120uLL);
}

uint64_t sub_21F9314E8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for PlottableProjection();
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = *(void *)(*(void *)(v2 - 8) + 64);
  uint64_t v6 = (v5 + v3 + v4) & ~v3;
  swift_release();
  swift_release();
  uint64_t v7 = v0 + v4;
  sub_21F7656A8(*(void *)v7, *(void *)(v7 + 8), *(unsigned char *)(v7 + 16));
  swift_bridgeObjectRelease();
  uint64_t v8 = v7 + *(int *)(v2 + 44);
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v8, v1);
      break;
    case 1u:
      uint64_t v25 = v6;
      uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8);
      v9(v8, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v9(v8 + *(int *)(TupleTypeMetadata2 + 48), v1);
      uint64_t v6 = v25;
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v26 = v6;
      uint64_t v11 = sub_21FA24310();
      uint64_t v24 = v5;
      uint64_t v12 = sub_21FA24320();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v8 + *(int *)(TupleTypeMetadata3 + 48), v11);
      uint64_t v14 = v8 + *(int *)(TupleTypeMetadata3 + 64);
      uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
      uint64_t v16 = v12;
      uint64_t v5 = v24;
      uint64_t v6 = v26;
      v15(v14, v16);
      break;
    default:
      break;
  }
  sub_21F7656A8(*(void *)(v0 + v6), *(void *)(v0 + v6 + 8), *(unsigned char *)(v0 + v6 + 16));
  swift_bridgeObjectRelease();
  uint64_t v17 = v0 + v6 + *(int *)(v2 + 44);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v17, v1);
      break;
    case 1u:
      uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8);
      v18(v17, v1);
      uint64_t v19 = swift_getTupleTypeMetadata2();
      v18(v17 + *(int *)(v19 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v20 = sub_21FA24310();
      uint64_t v21 = sub_21FA24320();
      uint64_t v22 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v17 + *(int *)(v22 + 48), v20);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v17 + *(int *)(v22 + 64), v21);
      break;
    default:
      break;
  }

  return MEMORY[0x270FA0238](v0, v6 + v5, v3 | 7);
}

void *sub_21F9319D0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(v2 + 40);
  swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  return sub_21F9311D8(a1, *(void **)(v2 + 48), v2 + ((v8 + 64) & ~v8), v2 + ((*(void *)(v7 + 64) + v8 + ((v8 + 64) & ~v8)) & ~v8), v5, a2, v6);
}

uint64_t VectorizedBarPlotContent.body.getter()
{
  uint64_t v1 = type metadata accessor for Vectorizer();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v6 - v3;
  sub_21F8B0FF0(v0, v1, &off_26B58FDA0);
  sub_21F8B0FF0(v4, v1, &off_26B58FDA0);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_21F931BCC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21F931C14(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21F931C68(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21F931CA4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21F931CEC(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_21F931E48(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x21F932060);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for BarPlot()
{
  return sub_21F764F08();
}

uint64_t sub_21F9320A0(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x21F9321F4);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_21F932208(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v20 = a2 ^ 0x80000000;
                v19[1] = 0;
              }
              else
              {
                uint64_t v20 = a2 - 1;
              }
              void *v19 = v20;
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x21F9323FCLL);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t sub_21F932424(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

_UNKNOWN **sub_21F93242C()
{
  return &off_26B58FDA0;
}

uint64_t sub_21F932438(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, char), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a1 + 104);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 112);
  char v8 = *(unsigned char *)(a1 + 96);
  a2(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), v8);
  a3(v5, v6);
  return a1;
}

uint64_t sub_21F9324C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  if (a12 != 255) {
    return sub_21F829E74(a11, a12 & 1);
  }
  return result;
}

uint64_t sub_21F9324E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  return sub_21F9324C0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

char *sub_21F9324FC(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (!v2) {
    return (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v20 = *(void *)(a1 + 16);
  uint64_t v23 = (char *)MEMORY[0x263F8EE78];
  sub_21F7A2608(0, v2, 0);
  uint64_t v6 = v20;
  uint64_t v7 = 0;
  uint64_t result = v23;
  uint64_t v21 = a1 + 32;
  while (1)
  {
    uint64_t v9 = *(void *)(v21 + 8 * v7);
    int64_t v10 = *(void *)(v9 + 16);
    if (v10) {
      break;
    }
LABEL_11:
    uint64_t v24 = result;
    unint64_t v18 = *((void *)result + 2);
    unint64_t v17 = *((void *)result + 3);
    if (v18 >= v17 >> 1)
    {
      sub_21F7A2608((char *)(v17 > 1), v18 + 1, 1);
      uint64_t v6 = v20;
      uint64_t result = v24;
    }
    ++v7;
    *((void *)result + 2) = v18 + 1;
    *(void *)&result[8 * v18 + 32] = v3;
    uint64_t v3 = MEMORY[0x263F8EE78];
    if (v7 == v6) {
      return result;
    }
  }
  uint64_t v22 = result;
  swift_bridgeObjectRetain();
  uint64_t result = sub_21F7A2CE0(0, v10, 0);
  uint64_t v11 = 0;
  while (1)
  {
    unint64_t v12 = *(void *)(v9 + 8 * v11 + 32);
    if ((v12 & 0x8000000000000000) != 0) {
      break;
    }
    uint64_t v13 = *(void *)(a2 + 16);
    if (v12 >= *(void *)(v13 + 16)) {
      goto LABEL_17;
    }
    long long v14 = *(_OWORD *)(v13 + 16 * v12 + 32);
    unint64_t v16 = *(void *)(v3 + 16);
    unint64_t v15 = *(void *)(v3 + 24);
    if (v16 >= v15 >> 1)
    {
      long long v19 = v14;
      uint64_t result = sub_21F7A2CE0((char *)(v15 > 1), v16 + 1, 1);
      long long v14 = v19;
    }
    ++v11;
    *(void *)(v3 + 16) = v16 + 1;
    *(_OWORD *)(v3 + 16 * v16 + 32) = v14;
    if (v10 == v11)
    {
      swift_bridgeObjectRelease();
      uint64_t v6 = v20;
      uint64_t result = v22;
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

unint64_t sub_21F9326BC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    int64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_21F76CA40(&qword_26AD44BC8);
  int64_t v2 = (void *)sub_21FA267C0();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_21F91582C(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    int64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *int64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_21F9327D0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    int64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_21F76CA40(&qword_267EE7DE0);
  int64_t v2 = (void *)sub_21FA267C0();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  uint64_t v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_21F76C978(v4, (uint64_t)&v16, &qword_267EE8AD8);
    uint64_t v5 = v16;
    uint64_t v6 = v17;
    unint64_t result = sub_21F91582C(v16, v17);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v9 = (uint64_t *)(v2[6] + 16 * result);
    *char v9 = v5;
    v9[1] = v6;
    uint64_t v10 = v2[7] + 40 * result;
    long long v11 = v18;
    long long v12 = v19;
    *(void *)(v10 + 32) = v20;
    *(_OWORD *)uint64_t v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v2[2] = v15;
    v4 += 56;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_21F93291C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    int64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_21F76CA40(&qword_267EE7DE8);
  int64_t v2 = (void *)sub_21FA267C0();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 80);
  while (1)
  {
    uint64_t v5 = *(v4 - 6);
    uint64_t v6 = *(v4 - 5);
    uint64_t v7 = *(v4 - 4);
    uint64_t v8 = *(v4 - 3);
    uint64_t v9 = *(v4 - 2);
    uint64_t v10 = *(v4 - 1);
    uint64_t v11 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_21F91582C(v5, v6);
    if (v13) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v14 = (uint64_t *)(v2[6] + 16 * result);
    *BOOL v14 = v5;
    v14[1] = v6;
    uint64_t v15 = (void *)(v2[7] + 40 * result);
    *uint64_t v15 = v7;
    v15[1] = v8;
    v15[2] = v9;
    v15[3] = v10;
    v15[4] = v11;
    uint64_t v16 = v2[2];
    BOOL v17 = __OFADD__(v16, 1);
    uint64_t v18 = v16 + 1;
    if (v17) {
      goto LABEL_11;
    }
    v2[2] = v18;
    v4 += 7;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_21F932A68(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    int64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_21F76CA40(&qword_26AD44BD0);
  int64_t v2 = (void *)sub_21FA267C0();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = sub_21F91582C(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_21F932B84(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    int64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_21F76CA40(&qword_267EE7DD8);
  int64_t v2 = (void *)sub_21FA267C0();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_21F91582C(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_21F932C98(uint64_t a1)
{
  uint64_t v2 = sub_21F76CA40(qword_26AD458B0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_21F76CA40(&qword_26AD462E0);
  uint64_t v6 = sub_21FA267C0();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_21F76C978(v12, (uint64_t)v5, qword_26AD458B0);
    unint64_t result = sub_21F9159FC((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = sub_21FA24320();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_21F932E8C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_21F76CA40(&qword_26AD462F8);
  uint64_t v2 = (void *)sub_21FA267C0();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 1);
    uint64_t v6 = *v4;
    uint64_t v7 = v4[1];
    uint64_t v8 = v4[2];
    uint64_t v9 = v4[3];
    uint64_t v10 = v4[4];
    uint64_t v11 = v4[5];
    uint64_t v12 = v4[6];
    v19[0] = *(v4 - 2);
    v19[1] = v5;
    v19[2] = v6;
    v19[3] = v7;
    v19[4] = v8;
    v19[5] = v9;
    v19[6] = v10;
    v19[7] = v11;
    sub_21F7E0F38(v19[0], v5, v6, v7, v8, v9, v10);
    unint64_t result = sub_21F915A80((uint64_t)v19);
    if (v14) {
      break;
    }
    unint64_t v15 = result;
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t result = sub_21F7E0EDC((uint64_t)v19, v2[6] + (result << 6));
    *(void *)(v2[7] + 8 * v15) = v12;
    uint64_t v16 = v2[2];
    BOOL v17 = __OFADD__(v16, 1);
    uint64_t v18 = v16 + 1;
    if (v17) {
      goto LABEL_11;
    }
    v4 += 9;
    v2[2] = v18;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_21F932FBC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_21F76CA40(&qword_26AD45410);
  uint64_t v2 = (void *)sub_21FA267C0();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *(v4 - 1);
    uint64_t v6 = *v4;
    uint64_t v7 = swift_bridgeObjectRetain();
    unint64_t result = sub_21F915AE0(v7);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v2[6] + v10) = v5;
    *(void *)(v2[7] + v10) = v6;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 2;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void *sub_21F9330BC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_11;
  }
  sub_21F76CA40(&qword_26AD468E8);
  uint64_t v2 = (void *)sub_21FA267C0();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return v2;
  }
  swift_retain();
  memcpy(__dst, (const void *)(a1 + 32), sizeof(__dst));
  sub_21F7BB81C((uint64_t)__dst, (uint64_t)v14);
  sub_21F938344((uint64_t)__dst);
  unint64_t v4 = sub_21F9161A8((uint64_t)v14);
  if (v5)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    swift_release();
    goto LABEL_11;
  }
  unint64_t v6 = v4;
  uint64_t v7 = 488;
  while (1)
  {
    *(void *)((char *)v2 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v6;
    sub_21F7BB81C((uint64_t)v14, v2[6] + 152 * v6);
    unint64_t result = memcpy((void *)(v2[7] + 304 * v6), &__dst[152], 0x130uLL);
    uint64_t v9 = v2[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      break;
    }
    v2[2] = v11;
    if (!--v3) {
      goto LABEL_9;
    }
    memcpy(__dst, (const void *)(a1 + v7), sizeof(__dst));
    sub_21F7BB81C((uint64_t)__dst, (uint64_t)v14);
    sub_21F938344((uint64_t)__dst);
    unint64_t v6 = sub_21F9161A8((uint64_t)v14);
    v7 += 456;
    if (v12) {
      goto LABEL_8;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_21F933248(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_21F76CA40(&qword_26AD468F8);
  uint64_t v2 = (void *)sub_21FA267C0();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unint64_t v4 = (void *)(a1 + 80);
  while (1)
  {
    long long v5 = *((_OWORD *)v4 - 2);
    long long v14 = *((_OWORD *)v4 - 3);
    *(_OWORD *)unint64_t v15 = v5;
    *(_OWORD *)&v15[9] = *(_OWORD *)((char *)v4 - 23);
    uint64_t v6 = *v4;
    long long v17 = v14;
    long long v18 = v5;
    sub_21F7E0D5C((uint64_t)&v17, (uint64_t)v20);
    uint64_t v19 = *((void *)&v18 + 1);
    uint64_t v16 = *(void *)&v15[16];
    sub_21F7E0DEC((uint64_t)v20);
    sub_21F7744A4((uint64_t)&v19);
    sub_21F7744A4((uint64_t)&v16);
    unint64_t result = sub_21F916214((uint64_t)&v14);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = (_OWORD *)(v2[6] + 48 * result);
    long long v10 = *(_OWORD *)v15;
    *uint64_t v9 = v14;
    v9[1] = v10;
    *(_OWORD *)((char *)v9 + 25) = *(_OWORD *)&v15[9];
    *(void *)(v2[7] + 8 * result) = v6;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 7;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_21F9333A4(uint64_t a1)
{
  uint64_t v2 = sub_21F76CA40(qword_26AD459F0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  long long v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_21F76CA40(&qword_26AD462E8);
  uint64_t v6 = sub_21FA267C0();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_21F76C978(v12, (uint64_t)v5, qword_26AD459F0);
    unint64_t result = sub_21F9157C0((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for CalendarCache.Key(0);
    unint64_t result = sub_21F9384B4((uint64_t)v5, v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, type metadata accessor for CalendarCache.Key);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_21F933594(void *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 80))
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
LABEL_13:
    *a1 = v3;
    a1[1] = v4;
    a1[2] = v5;
    a1[3] = v6;
    a1[4] = v7;
    a1[5] = v8;
    a1[6] = v9;
    return;
  }
  uint64_t v10 = *(void *)(v1 + 32);
  uint64_t v11 = *(void *)(v1 + 24) >> 1;
  if (v10 == v11)
  {
LABEL_9:
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    *(unsigned char *)(v1 + 80) = 1;
    goto LABEL_13;
  }
  if (v10 >= v11 || v10 < *(void *)(v1 + 16))
  {
    __break(1u);
  }
  else
  {
    uint64_t v13 = (uint64_t *)(*(void *)(v1 + 8) + 48 * v10);
    uint64_t v3 = *v13;
    uint64_t v4 = v13[1];
    uint64_t v5 = v13[2];
    uint64_t v6 = v13[3];
    uint64_t v7 = v13[4];
    uint64_t v8 = v13[5];
    *(void *)(v1 + 32) = v10 + 1;
    uint64_t v14 = *(void *)(v1 + 72);
    uint64_t v15 = *(void *)(v1 + 64) >> 1;
    if (v14 == v15) {
      goto LABEL_9;
    }
    if (v14 < v15 && v14 >= *(void *)(v1 + 56))
    {
      *(void *)(v1 + 72) = v14 + 1;
      uint64_t v9 = swift_bridgeObjectRetain();
      goto LABEL_13;
    }
  }
  __break(1u);
}

char *sub_21F9336A4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (char *)a1;
    if (qword_26AD44B80 != -1) {
      goto LABEL_22;
    }
    while (1)
    {
      uint64_t v3 = 0;
      uint64_t v4 = v2 + 32;
      double v5 = *(double *)&qword_26AD52130;
      uint64_t v2 = (char *)MEMORY[0x263F8EE78];
      while (1)
      {
        uint64_t v6 = v3 - 1;
        if (v3 <= 0) {
          uint64_t v6 = v1 - 1;
        }
        unint64_t v7 = v3 < (uint64_t)(v1 - 1) ? v3 + 1 : 0;
        if (v6 >= (uint64_t)v1) {
          break;
        }
        if (v7 >= v1) {
          goto LABEL_21;
        }
        simd_double2 v11 = *(simd_double2 *)&v4[16 * v3];
        if (fabs(_simd_orient_pd2(*(simd_double2 *)&v4[16 * v6], v11, *(simd_double2 *)&v4[16 * v7])) >= v5)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v2 = sub_21F7E86D8(0, *((void *)v2 + 2) + 1, 1, v2);
          }
          unint64_t v9 = *((void *)v2 + 2);
          unint64_t v8 = *((void *)v2 + 3);
          if (v9 >= v8 >> 1) {
            uint64_t v2 = sub_21F7E86D8((char *)(v8 > 1), v9 + 1, 1, v2);
          }
          *((void *)v2 + 2) = v9 + 1;
          *(simd_double2 *)&v2[16 * v9 + 32] = v11;
        }
        if (++v3 == v1) {
          return v2;
        }
      }
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      swift_once();
    }
  }
  return (char *)MEMORY[0x263F8EE78];
}

void sub_21F933814(char **a1, uint64_t a2, float64x2_t a3)
{
  double v5 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    double v5 = sub_21F935318((uint64_t)v5);
  }
  uint64_t v6 = *((void *)v5 + 2);
  v8[0] = (uint64_t)(v5 + 32);
  v8[1] = v6;
  sub_21F935494(v8, a2, a3);
  *a1 = v5;
}

uint64_t sub_21F933894(char **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_21F936968((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = v2 + 32;
  v5[1] = v3;
  uint64_t result = sub_21F935C90(v5);
  *a1 = v2;
  return result;
}

void *sub_21F933900(void *result, uint64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = result;
    if (a2)
    {
      sub_21F76CA40(&qword_26AD44BA8);
      uint64_t v4 = (void *)sub_21FA25ED0();
      double v5 = v4;
      v4[2] = a2;
      v4[4] = v3;
      if (a2 != 1)
      {
        v4[5] = v3;
        uint64_t v6 = a2 - 2;
        if (v6)
        {
          unint64_t v7 = v4 + 6;
          do
          {
            *v7++ = v3;
            swift_bridgeObjectRetain();
            --v6;
          }
          while (v6);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return (void *)MEMORY[0x263F8EE78];
    }
    return v5;
  }
  return result;
}

uint64_t sub_21F9339A8()
{
  return sub_21FA26A50();
}

uint64_t sub_21F933A04()
{
  return sub_21FA26A30();
}

uint64_t sub_21F933A40()
{
  return sub_21FA26A50();
}

BOOL sub_21F933A98(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t sub_21F933AB0(float64x2_t a1)
{
  uint64_t v2 = v1;
  double v4 = *(double *)v1;
  double v3 = *(double *)(v1 + 8);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v7 = sub_21F937378(a1.f64[0], v3);
  uint64_t v8 = sub_21F937378(a1.f64[1], v3);
  if (*(void *)(v5 + 16)
    && (unint64_t v9 = sub_21F91597C(v7, v8), (v10 & 1) != 0)
    && (uint64_t v11 = *(void *)(*(void *)(v5 + 56) + 8 * v9), (v12 = *(void *)(v11 + 16)) != 0))
  {
    uint64_t v13 = v11 + 48;
    while (1)
    {
      float64x2_t v14 = vsubq_f64(a1, *(float64x2_t *)(v13 - 16));
      double v15 = fabs(v14.f64[0]);
      double v16 = fabs(v14.f64[1]);
      if (v15 < v4 && v16 < v4) {
        return *(void *)v13;
      }
      v13 += 32;
      if (!--v12) {
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    unint64_t v18 = *(void *)(v6 + 16);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_44;
    }
    while (1)
    {
      unint64_t v20 = *(void *)(v6 + 16);
      unint64_t v19 = *(void *)(v6 + 24);
      if (v20 >= v19 >> 1) {
        uint64_t v6 = (uint64_t)sub_21F7E86D8((char *)(v19 > 1), v20 + 1, 1, (char *)v6);
      }
      *(void *)(v6 + 16) = v20 + 1;
      *(float64x2_t *)(v6 + 16 * v20 + 32) = a1;
      *(void *)(v2 + 16) = v6;
      uint64_t v6 = sub_21F937378(a1.f64[0] - v4, v3);
      uint64_t v49 = sub_21F937378(a1.f64[0] + v4, v3);
      if (v49 < v6) {
        break;
      }
      uint64_t v21 = sub_21F937378(a1.f64[1] - v4, v3);
      uint64_t v22 = sub_21F937378(a1.f64[1] + v4, v3);
      uint64_t v50 = v21;
      if (v22 < v21) {
        goto LABEL_46;
      }
      uint64_t v23 = v22;
      uint64_t v24 = 0;
      for (uint64_t i = v21; ; uint64_t i = v50)
      {
        while (1)
        {
          sub_21F76D5D8((uint64_t)v24);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v28 = *(void *)(v2 + 24);
          *(void *)(v2 + 24) = 0x8000000000000000;
          unint64_t v30 = sub_21F91597C(v6, i);
          uint64_t v31 = *(void *)(v28 + 16);
          uint64_t v13 = (v29 & 1) == 0;
          uint64_t v32 = v31 + v13;
          if (__OFADD__(v31, v13))
          {
            __break(1u);
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            return *(void *)v13;
          }
          char v33 = v29;
          if (*(void *)(v28 + 24) >= v32)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              sub_21F879AAC();
            }
          }
          else
          {
            sub_21F86FB08(v32, isUniquelyReferenced_nonNull_native);
            unint64_t v34 = sub_21F91597C(v6, i);
            if ((v33 & 1) != (v35 & 1)) {
              goto LABEL_47;
            }
            unint64_t v30 = v34;
          }
          *(void *)(v2 + 24) = v28;
          swift_bridgeObjectRelease();
          uint64_t v36 = *(void **)(v2 + 24);
          if (v33)
          {
            uint64_t v37 = swift_bridgeObjectRetain();
          }
          else
          {
            v36[(v30 >> 6) + 8] |= 1 << v30;
            uint64_t v38 = (uint64_t *)(v36[6] + 16 * v30);
            *uint64_t v38 = v6;
            v38[1] = i;
            *(void *)(v36[7] + 8 * v30) = MEMORY[0x263F8EE78];
            uint64_t v39 = v36[2];
            uint64_t v40 = v39 + 1;
            BOOL v41 = __OFADD__(v39, 1);
            uint64_t v37 = swift_bridgeObjectRetain();
            if (v41) {
              goto LABEL_40;
            }
            *(void *)(v37 + 16) = v40;
          }
          uint64_t v42 = *(void *)(v37 + 56);
          swift_bridgeObjectRelease();
          uint64_t v43 = *(char **)(v42 + 8 * v30);
          char v44 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v42 + 8 * v30) = v43;
          if ((v44 & 1) == 0)
          {
            uint64_t v43 = sub_21F7E8C00(0, *((void *)v43 + 2) + 1, 1, v43);
            *(void *)(v42 + 8 * v30) = v43;
          }
          unint64_t v46 = *((void *)v43 + 2);
          unint64_t v45 = *((void *)v43 + 3);
          if (v46 >= v45 >> 1)
          {
            uint64_t v43 = sub_21F7E8C00((char *)(v45 > 1), v46 + 1, 1, v43);
            *(void *)(v42 + 8 * v30) = v43;
          }
          *((void *)v43 + 2) = v46 + 1;
          uint64_t v47 = (__n128 *)&v43[32 * v46];
          v47[2] = (__n128)a1;
          v47[3].n128_u64[0] = v18;
          if (v23 == i) {
            break;
          }
          uint64_t v24 = sub_21F8FACCC;
          BOOL v26 = __OFADD__(i++, 1);
          if (v26) {
            goto LABEL_39;
          }
        }
        if (v6 == v49) {
          return v18;
        }
        uint64_t v24 = sub_21F8FACCC;
        BOOL v26 = __OFADD__(v6++, 1);
        if (v26) {
          break;
        }
      }
      __break(1u);
LABEL_44:
      uint64_t v6 = (uint64_t)sub_21F7E86D8(0, v18 + 1, 1, (char *)v6);
    }
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    uint64_t result = sub_21FA26990();
    __break(1u);
  }
  return result;
}

uint64_t sub_21F933E80(uint64_t a1, uint64_t a2)
{
  double v4 = (uint64_t *)(a2 + 16);
  uint64_t result = swift_beginAccess();
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 + 16);
  if (!v7 || *(void *)(v6 + 8 * v7 + 24) != a1)
  {
    swift_beginAccess();
    uint64_t v8 = *v4;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *double v4 = v8;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_21F7E8CF8(0, *(void *)(v8 + 16) + 1, 1, (char *)v8);
      uint64_t v8 = result;
      *double v4 = result;
    }
    unint64_t v10 = *(void *)(v8 + 16);
    unint64_t v9 = *(void *)(v8 + 24);
    if (v10 >= v9 >> 1)
    {
      uint64_t result = (uint64_t)sub_21F7E8CF8((char *)(v9 > 1), v10 + 1, 1, (char *)v8);
      uint64_t v8 = result;
      *double v4 = result;
    }
    *(void *)(v8 + 16) = v10 + 1;
    *(void *)(v8 + 8 * v10 + 32) = a1;
  }
  return result;
}

uint64_t sub_21F933F7C()
{
  uint64_t v45 = MEMORY[0x263F8EE88];
  uint64_t v41 = *(void *)(*(void *)(v0 + 24) + 16);
  if (!v41) {
    return MEMORY[0x263F8EE78];
  }
  unint64_t v1 = 0;
  uint64_t v42 = (void *)MEMORY[0x263F8EE78];
LABEL_4:
  while (1)
  {
    sub_21F9350DC(v1, v43, &v45, (uint64_t)v46);
    sub_21F76C9DC((uint64_t)v46, (uint64_t)v47, &qword_26AD44B98);
    if ((v48 & 1) == 0) {
      break;
    }
LABEL_3:
    if (++v1 == v41)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v42;
    }
  }
LABEL_5:
  uint64_t v3 = v47[0];
  unint64_t v2 = v47[1];
  sub_21F76CA40(&qword_26AD4A480);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_21FA28550;
  *(void *)(v4 + 32) = v2;
  swift_beginAccess();
  sub_21F7D5308(&v44, v3);
  swift_endAccess();
  while ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = *(void *)(v43 + 40);
    if (v2 >= *(void *)(v5 + 16)) {
      goto LABEL_57;
    }
    uint64_t v6 = *(void *)(v5 + 8 * v2 + 32);
    uint64_t v7 = *(void *)(v6 + 16);
    if (!v7) {
      goto LABEL_45;
    }
    uint64_t v8 = 0;
    uint64_t v9 = v6 + 32;
    while (1)
    {
      unint64_t v10 = (uint64_t *)(v9 + 40 * v8);
      if (v10[2] >= 1 && (v10[4] & 1) == 0 && !v10[3])
      {
        uint64_t v11 = *v10;
        unint64_t v2 = v10[1];
        uint64_t v12 = v45;
        if (!*(void *)(v45 + 16)) {
          goto LABEL_20;
        }
        uint64_t v13 = sub_21FA269F0();
        uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
        unint64_t v15 = v13 & ~v14;
        if (((*(void *)(v12 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
          goto LABEL_20;
        }
        uint64_t v16 = *(void *)(v12 + 48);
        if (*(void *)(v16 + 8 * v15) != v11) {
          break;
        }
      }
LABEL_9:
      if (++v8 == v7) {
        goto LABEL_45;
      }
    }
    uint64_t v17 = ~v14;
    while (1)
    {
      unint64_t v15 = (v15 + 1) & v17;
      if (((*(void *)(v12 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
        break;
      }
      if (*(void *)(v16 + 8 * v15) == v11) {
        goto LABEL_9;
      }
    }
LABEL_20:
    unint64_t v19 = *(void *)(v4 + 16);
    unint64_t v18 = *(void *)(v4 + 24);
    if (v19 >= v18 >> 1) {
      uint64_t v4 = (uint64_t)sub_21F7E8CF8((char *)(v18 > 1), v19 + 1, 1, (char *)v4);
    }
    *(void *)(v4 + 16) = v19 + 1;
    *(void *)(v4 + 8 * v19 + 32) = v2;
    swift_beginAccess();
    uint64_t v20 = v45;
    uint64_t v21 = sub_21FA269F0();
    uint64_t v22 = -1 << *(unsigned char *)(v20 + 32);
    unint64_t v23 = v21 & ~v22;
    if ((*(void *)(v20 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23))
    {
      uint64_t v24 = *(void *)(v20 + 48);
      if (*(void *)(v24 + 8 * v23) == v11) {
        goto LABEL_42;
      }
      uint64_t v25 = ~v22;
      while (1)
      {
        unint64_t v23 = (v23 + 1) & v25;
        if (((*(void *)(v20 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
          break;
        }
        if (*(void *)(v24 + 8 * v23) == v11) {
          goto LABEL_42;
        }
      }
    }
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v27 = v45;
    uint64_t v44 = v45;
    uint64_t v45 = 0x8000000000000000;
    unint64_t v28 = *(void *)(v44 + 16);
    if (*(void *)(v44 + 24) <= v28)
    {
      uint64_t v29 = v28 + 1;
      if (isUniquelyReferenced_nonNull_native) {
        sub_21F7D8928(v29);
      }
      else {
        sub_21F7DE248(v29);
      }
      uint64_t v27 = v44;
      uint64_t v30 = sub_21FA269F0();
      uint64_t v31 = -1 << *(unsigned char *)(v27 + 32);
      unint64_t v23 = v30 & ~v31;
      if ((*(void *)(v27 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23))
      {
        uint64_t v32 = *(void *)(v27 + 48);
        if (*(void *)(v32 + 8 * v23) == v11) {
          goto LABEL_59;
        }
        uint64_t v33 = ~v31;
        while (1)
        {
          unint64_t v23 = (v23 + 1) & v33;
          if (((*(void *)(v27 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
            break;
          }
          if (*(void *)(v32 + 8 * v23) == v11) {
            goto LABEL_59;
          }
        }
      }
    }
    else if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_21F7DD290();
      uint64_t v27 = v44;
    }
    *(void *)(v27 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v23;
    *(void *)(*(void *)(v27 + 48) + 8 * v23) = v11;
    uint64_t v34 = *(void *)(v27 + 16);
    BOOL v35 = __OFADD__(v34, 1);
    uint64_t v36 = v34 + 1;
    if (v35) {
      goto LABEL_58;
    }
    *(void *)(v27 + 16) = v36;
    uint64_t v45 = v27;
    swift_bridgeObjectRelease();
LABEL_42:
    swift_endAccess();
    if (v2 == v1)
    {
LABEL_45:
      if (*(void *)(v4 + 16) >= 3uLL)
      {
        if (swift_isUniquelyReferenced_nonNull_native()) {
          uint64_t v37 = v42;
        }
        else {
          uint64_t v37 = sub_21F7E8F38(0, v42[2] + 1, 1, v42);
        }
        unint64_t v39 = v37[2];
        unint64_t v38 = v37[3];
        if (v39 >= v38 >> 1) {
          uint64_t v37 = sub_21F7E8F38((void *)(v38 > 1), v39 + 1, 1, v37);
        }
        v37[2] = v39 + 1;
        uint64_t v42 = v37;
        v37[v39 + 4] = v4;
        goto LABEL_4;
      }
      swift_bridgeObjectRelease();
      sub_21F9350DC(v1, v43, &v45, (uint64_t)v46);
      sub_21F76C9DC((uint64_t)v46, (uint64_t)v47, &qword_26AD44B98);
      if (v48 != 1) {
        goto LABEL_5;
      }
      goto LABEL_3;
    }
  }
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  uint64_t result = sub_21FA26980();
  __break(1u);
  return result;
}

uint64_t sub_21F934458()
{
  uint64_t v1 = (uint64_t)v0;
  uint64_t v2 = v0[3];
  uint64_t v3 = (uint64_t)sub_21F933900(MEMORY[0x263F8EE78], *(void *)(v2 + 16));
  swift_bridgeObjectRelease();
  v0[5] = v3;
  long long v65 = v0;
  uint64_t v66 = *(void *)(*v0 + 16);
  if (!v66) {
    goto LABEL_65;
  }
  uint64_t v63 = v2;
  uint64_t v67 = *v0 + 32;
  uint64_t v4 = swift_bridgeObjectRetain();
  unint64_t v5 = 0;
  unint64_t v6 = 0;
  uint64_t v7 = 40;
  uint64_t v64 = v4;
  while (1)
  {
    if (v6 >= *(void *)(v4 + 16)) {
      goto LABEL_121;
    }
    uint64_t v8 = *(void *)(v67 + 8 * v6);
    unint64_t v9 = *(void *)(v8 + 16);
    if (v9) {
      break;
    }
LABEL_3:
    if (++v6 == v66) {
      goto LABEL_64;
    }
  }
  unint64_t v68 = v6;
  v75 = (void *)(v8 + 32);
  uint64_t v70 = v5 ^ 0x7FFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  unint64_t v10 = 0;
  unint64_t v72 = v9;
  uint64_t v73 = v8;
  while (1)
  {
    unint64_t v11 = v10 + 1;
    if (v10 + 1 < v9) {
      unint64_t v12 = v10 + 1;
    }
    else {
      unint64_t v12 = 0;
    }
    unint64_t v13 = *(void *)(v8 + 16);
    if (v10 >= v13) {
      goto LABEL_100;
    }
    if (v12 >= v13)
    {
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
      goto LABEL_115;
    }
    int64_t v14 = v75[v10];
    unint64_t v15 = v75[v12];
    if (v14 == v15) {
      goto LABEL_102;
    }
    if (v14 < 0) {
      goto LABEL_103;
    }
    unint64_t v16 = *(void *)(v3 + 16);
    if (v14 >= v16) {
      goto LABEL_104;
    }
    uint64_t v17 = *(void **)(v3 + 32 + 8 * v14);
    uint64_t v18 = v17[2];
    if (v18)
    {
      if (v17[5] == v15)
      {
        unint64_t v19 = 0;
        if (swift_isUniquelyReferenced_nonNull_native()) {
          goto LABEL_18;
        }
        goto LABEL_57;
      }
      if (v18 != 1)
      {
        BOOL v26 = v17 + 10;
        unint64_t v19 = 1;
        while (1)
        {
          uint64_t v27 = *v26;
          v26 += 5;
          if (v27 == v15) {
            break;
          }
          unint64_t v28 = v19 + 1;
          if (__OFADD__(v19, 1))
          {
            __break(1u);
LABEL_96:
            __break(1u);
LABEL_97:
            __break(1u);
LABEL_98:
            __break(1u);
LABEL_99:
            __break(1u);
LABEL_100:
            __break(1u);
            goto LABEL_101;
          }
          ++v19;
          if (v28 == v18) {
            goto LABEL_30;
          }
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
LABEL_18:
          if (v14 >= *(void *)(v3 + 16)) {
            goto LABEL_107;
          }
          uint64_t v20 = *(char **)(v3 + 32 + 8 * v14);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v3 + 32 + 8 * v14) = v20;
          if (isUniquelyReferenced_nonNull_native)
          {
            if ((v19 & 0x8000000000000000) != 0) {
              goto LABEL_109;
            }
          }
          else
          {
            uint64_t v20 = sub_21F935318((uint64_t)v20);
            *(void *)(v3 + 32 + 8 * v14) = v20;
            if ((v19 & 0x8000000000000000) != 0) {
              goto LABEL_109;
            }
          }
          if (v19 >= *((void *)v20 + 2)) {
            goto LABEL_108;
          }
          uint64_t v22 = &v20[40 * v19];
          uint64_t v23 = *((void *)v22 + 6);
          BOOL v24 = __OFSUB__(v23, 1);
          uint64_t v25 = v23 - 1;
          if (v24) {
            goto LABEL_110;
          }
          goto LABEL_39;
        }
LABEL_57:
        uint64_t v3 = (uint64_t)sub_21F93532C((void *)v3);
        goto LABEL_18;
      }
    }
LABEL_30:
    if (v15 >= v16) {
      goto LABEL_106;
    }
    uint64_t v29 = *(void **)(v3 + 32 + 8 * v15);
    uint64_t v30 = v29[2];
    if (!v30)
    {
LABEL_45:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = (uint64_t)sub_21F93532C((void *)v3);
      }
      if (v14 >= *(void *)(v3 + 16)) {
        goto LABEL_111;
      }
      uint64_t v38 = v3;
      uint64_t v39 = v3 + 32;
      uint64_t v40 = *(char **)(v39 + 8 * v14);
      char v41 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v39 + 8 * v14) = v40;
      if ((v41 & 1) == 0)
      {
        uint64_t v40 = sub_21F7E8D04(0, *((void *)v40 + 2) + 1, 1, v40);
        *(void *)(v39 + 8 * v14) = v40;
      }
      unint64_t v43 = *((void *)v40 + 2);
      unint64_t v42 = *((void *)v40 + 3);
      if (v43 >= v42 >> 1)
      {
        uint64_t v40 = sub_21F7E8D04((char *)(v42 > 1), v43 + 1, 1, v40);
        *(void *)(v39 + 8 * v14) = v40;
      }
      uint64_t v3 = v38;
      *((void *)v40 + 2) = v43 + 1;
      uint64_t v7 = 40;
      uint64_t v44 = &v40[40 * v43];
      *((void *)v44 + 4) = v5;
      *((void *)v44 + 5) = v15;
      *((_OWORD *)v44 + 3) = xmmword_21FA2E780;
      v44[64] = 1;
      goto LABEL_53;
    }
    if (v29[5] == v14)
    {
      unint64_t v31 = 0;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_34;
      }
LABEL_59:
      uint64_t v3 = (uint64_t)sub_21F93532C((void *)v3);
      goto LABEL_34;
    }
    if (v30 == 1) {
      goto LABEL_45;
    }
    BOOL v35 = v29 + 10;
    unint64_t v31 = 1;
    while (1)
    {
      uint64_t v36 = *v35;
      v35 += 5;
      if (v36 == v14) {
        break;
      }
      unint64_t v37 = v31 + 1;
      if (__OFADD__(v31, 1)) {
        goto LABEL_96;
      }
      ++v31;
      if (v37 == v30) {
        goto LABEL_45;
      }
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_59;
    }
LABEL_34:
    if ((int64_t)v15 >= *(void *)(v3 + 16)) {
      goto LABEL_112;
    }
    uint64_t v1 = 8 * v15;
    uint64_t v32 = *(char **)(v3 + 32 + 8 * v15);
    char v33 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + 32 + 8 * v15) = v32;
    if ((v33 & 1) == 0) {
      break;
    }
    if ((v31 & 0x8000000000000000) != 0) {
      goto LABEL_63;
    }
LABEL_37:
    if (v31 >= *((void *)v32 + 2)) {
      goto LABEL_113;
    }
    uint64_t v22 = &v32[40 * v31];
    uint64_t v34 = *((void *)v22 + 6);
    BOOL v24 = __OFADD__(v34, 1);
    uint64_t v25 = v34 + 1;
    if (v24) {
      goto LABEL_114;
    }
LABEL_39:
    *((void *)v22 + 6) = v25;
LABEL_53:
    unint64_t v9 = v72;
    uint64_t v8 = v73;
    if (v10 == v70) {
      goto LABEL_105;
    }
    ++v5;
    ++v10;
    if (v11 == v72)
    {
      swift_bridgeObjectRelease();
      uint64_t v4 = v64;
      uint64_t v1 = (uint64_t)v65;
      v65[5] = v3;
      unint64_t v6 = v68;
      goto LABEL_3;
    }
  }
  uint64_t v32 = sub_21F935318((uint64_t)v32);
  *(void *)(v3 + 32 + 8 * v15) = v32;
  if ((v31 & 0x8000000000000000) == 0) {
    goto LABEL_37;
  }
LABEL_63:
  __break(1u);
LABEL_64:
  swift_bridgeObjectRelease();
  uint64_t v2 = v63;
LABEL_65:
  unint64_t v5 = (unint64_t)sub_21F933900(MEMORY[0x263F8EE78], *(void *)(v2 + 16));
  uint64_t v7 = *(void *)(v2 + 16);
  v75 = (void *)v3;
  if (!v7) {
    goto LABEL_83;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_122;
  }
  while (1)
  {
    unint64_t v45 = 0;
    uint64_t v71 = v3 + 32;
    unint64_t v46 = (void *)(v5 + 32);
    v74 = (void *)v5;
    uint64_t v69 = v7;
    do
    {
      if (v45 == v7) {
        goto LABEL_119;
      }
      if (v45 >= *(void *)(v3 + 16)) {
        goto LABEL_120;
      }
      uint64_t v47 = *(void *)(*(void *)(v71 + 8 * v45) + 16);
      if (v47)
      {
        uint64_t v7 = swift_bridgeObjectRetain() + 48;
        while (1)
        {
          unint64_t v5 = -*(void *)v7;
          if (__OFSUB__(0, *(void *)v7)) {
            goto LABEL_97;
          }
          unint64_t v48 = *(void *)(v7 - 8);
          if ((v48 & 0x8000000000000000) != 0) {
            goto LABEL_98;
          }
          if (v48 >= v74[2]) {
            goto LABEL_99;
          }
          uint64_t v49 = *(void *)(v7 - 16);
          uint64_t v50 = (char *)v46[v48];
          char v51 = swift_isUniquelyReferenced_nonNull_native();
          v46[v48] = v50;
          if ((v51 & 1) == 0)
          {
            uint64_t v50 = sub_21F7E8D04(0, *((void *)v50 + 2) + 1, 1, v50);
            v46[v48] = v50;
          }
          unint64_t v53 = *((void *)v50 + 2);
          unint64_t v52 = *((void *)v50 + 3);
          if (v53 >= v52 >> 1)
          {
            uint64_t v50 = sub_21F7E8D04((char *)(v52 > 1), v53 + 1, 1, v50);
            v46[v48] = v50;
          }
          v7 += 40;
          *((void *)v50 + 2) = v53 + 1;
          uint64_t v54 = &v50[40 * v53];
          *((void *)v54 + 4) = v49;
          *((void *)v54 + 5) = v45;
          *((void *)v54 + 6) = v5;
          *((void *)v54 + 7) = 0;
          v54[64] = 1;
          --v47;
          uint64_t v3 = (uint64_t)v75;
          if (!v47)
          {
            swift_bridgeObjectRelease();
            unint64_t v5 = (unint64_t)v74;
            uint64_t v7 = v69;
            break;
          }
        }
      }
      ++v45;
    }
    while (v45 != v7);
    uint64_t v1 = (uint64_t)v65;
LABEL_83:
    uint64_t v55 = *(void *)(v3 + 16);
    if (!v55) {
      break;
    }
    uint64_t v56 = -v55;
    uint64_t v57 = 2;
    uint64_t v3 = 32;
    while (1)
    {
      unint64_t v58 = v57 - 2;
      if ((unint64_t)(v57 - 2) >= *(void *)(v5 + 16)) {
        break;
      }
      uint64_t v59 = *(void *)(v5 + v3);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        v75 = sub_21F93532C(v75);
      }
      if (v58 >= v75[2]) {
        goto LABEL_116;
      }
      uint64_t v7 = (uint64_t)v75 + v3;
      sub_21F9ED698(v59);
      uint64_t v60 = *(void *)(v1 + 24);
      if (v58 >= *(void *)(v60 + 16)) {
        goto LABEL_117;
      }
      float64x2_t v61 = *(float64x2_t *)(v60 + 16 * v57);
      *(void *)(v1 + 40) = v75;
      if (v58 >= v75[2]) {
        goto LABEL_118;
      }
      sub_21F933814((char **)((char *)v75 + v3), v1, v61);
      v75 = *(void **)(v1 + 40);
      ++v57;
      v3 += 8;
      if (v56 + v57 == 2) {
        goto LABEL_92;
      }
    }
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
LABEL_117:
    __break(1u);
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    unint64_t v5 = (unint64_t)sub_21F93532C((void *)v5);
  }
LABEL_92:

  return swift_bridgeObjectRelease();
}

void sub_21F934B10()
{
  size_t v1 = *(void *)(*(void *)(v0 + 24) + 16);
  if (!v1) {
    goto LABEL_82;
  }
  uint64_t v2 = sub_21FA25ED0();
  *(void *)(v2 + 16) = v1;
  bzero((void *)(v2 + 32), v1);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4) {
    goto LABEL_82;
  }
  unint64_t v5 = (char *)MEMORY[0x263F8EE78];
  uint64_t v60 = v0;
  uint64_t v61 = v2 + 32;
  while (1)
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v8 = (double *)(v3 + 40);
    char v9 = 1;
    double v10 = INFINITY;
    do
    {
      if (*(void *)(v2 + 16) <= (unint64_t)(v4 - 1))
      {
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
        goto LABEL_112;
      }
      if ((*(unsigned char *)(v2 + v7 + 32) & 1) == 0)
      {
        BOOL v11 = *v8 >= v10;
        if (*v8 < v10)
        {
          double v10 = *v8;
          unint64_t v6 = v7;
        }
        v9 &= v11;
      }
      ++v7;
      v8 += 2;
    }
    while (v4 != v7);
    if (v9) {
      goto LABEL_82;
    }
    unint64_t v12 = sub_21F7E8E20(0, 1, 1, v5);
    unint64_t v14 = *((void *)v12 + 2);
    unint64_t v13 = *((void *)v12 + 3);
    if (v14 >= v13 >> 1) {
      unint64_t v12 = sub_21F7E8E20((char *)(v13 > 1), v14 + 1, 1, v12);
    }
    *((void *)v12 + 2) = v14 + 1;
    unint64_t v15 = &v12[24 * v14];
    *((void *)v15 + 5) = 0;
    *((void *)v15 + 6) = 0;
    *((void *)v15 + 4) = v6;
    if ((v6 & 0x8000000000000000) != 0) {
      break;
    }
    if (v6 >= *(void *)(v2 + 16)) {
      goto LABEL_113;
    }
    uint64_t v16 = v61;
    *(unsigned char *)(v61 + v6) = 1;
    uint64_t v17 = *((void *)v12 + 2);
    if (v17)
    {
LABEL_20:
      uint64_t v18 = v17 - 1;
      unint64_t v19 = &v12[24 * v17 - 24];
      int64_t v21 = *((void *)v19 + 4);
      uint64_t v20 = *((void *)v19 + 5);
      uint64_t v22 = *((void *)v19 + 6);
      *((void *)v12 + 2) = v18;
      if (v21 < 0) {
        goto LABEL_106;
      }
      if ((unint64_t)v21 >= *(void *)(v2 + 16)) {
        goto LABEL_107;
      }
      *(unsigned char *)(v16 + v21) = 1;
      uint64_t v23 = *(void **)(v0 + 40);
      if ((unint64_t)v21 >= v23[2]) {
        goto LABEL_108;
      }
      uint64_t v24 = *(void *)(v23[v21 + 4] + 16);
      if (v24 < v20) {
        goto LABEL_109;
      }
      v64[0] = v20;
      v64[1] = v24;
      if (v20 < 0) {
        goto LABEL_110;
      }
      v64[2] = 0;
      uint64_t v65 = v20;
      uint64_t v25 = v23;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v25 = sub_21F93532C(v25);
      }
      long long v62 = v25;
      BOOL v26 = (char *)v25[v21 + 4];
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v63 = v25 + 4;
      v25[v21 + 4] = v26;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        BOOL v26 = sub_21F935318((uint64_t)v26);
        v63[v21] = v26;
      }
      unint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      char v32 = 1;
      char v33 = v62;
      while (1)
      {
        if ((v32 & 1) != 0 || v28 == v29)
        {
          if (v31 == 2) {
            goto LABEL_52;
          }
          uint64_t v34 = v31 + 1;
          BOOL v35 = &v64[2 * v31];
          unint64_t v28 = *v35;
          uint64_t v29 = v35[1];
          if (*v35 == v29)
          {
            uint64_t v36 = &v65 + 2 * v31;
            while (v34 != 2)
            {
              ++v34;
              unint64_t v28 = *(v36 - 1);
              uint64_t v29 = *v36;
              v36 += 2;
              if (v28 != v29) {
                goto LABEL_37;
              }
            }
LABEL_52:
            uint64_t v0 = v60;
            *(void *)(v60 + 40) = v33;
            if (v21 >= v33[2]) {
              goto LABEL_111;
            }
            uint64_t v42 = v63[v21];
            uint64_t v43 = *(void *)(v42 + 16);
            if (v43)
            {
              swift_bridgeObjectRetain();
              unint64_t v44 = 0;
              uint64_t v16 = v61;
              do
              {
                if (v44 >= *(void *)(v42 + 16))
                {
LABEL_87:
                  __break(1u);
LABEL_88:
                  __break(1u);
LABEL_89:
                  __break(1u);
                  goto LABEL_90;
                }
                uint64_t v45 = v42 + 32 + 40 * v44;
                unint64_t v46 = *(void *)(v45 + 8);
                if ((v46 & 0x8000000000000000) != 0) {
                  goto LABEL_88;
                }
                if (v46 >= *(void *)(v2 + 16)) {
                  goto LABEL_89;
                }
                if ((*(unsigned char *)(v16 + v46) & 1) == 0)
                {
                  if (v46 >= v62[2]) {
                    goto LABEL_91;
                  }
                  uint64_t v47 = (void *)v63[v46];
                  uint64_t v48 = v47[2];
                  if (!v48) {
                    goto LABEL_92;
                  }
                  uint64_t v49 = *(void *)v45;
                  uint64_t v50 = *(void *)(v45 + 16);
                  uint64_t v51 = *(void *)(v45 + 24);
                  char v52 = *(unsigned char *)(v45 + 32);
                  if (v47[4] == v49)
                  {
                    uint64_t v53 = 0;
                  }
                  else
                  {
                    if (v48 == 1) {
                      goto LABEL_104;
                    }
                    if (v47[9] == v49)
                    {
                      uint64_t v53 = 1;
                    }
                    else
                    {
                      if (v48 == 2) {
                        goto LABEL_105;
                      }
                      uint64_t v57 = v47 + 14;
                      uint64_t v53 = 2;
                      while (1)
                      {
                        uint64_t v58 = *v57;
                        v57 += 5;
                        if (v58 == v49) {
                          break;
                        }
                        uint64_t v59 = v53 + 1;
                        if (__OFADD__(v53, 1))
                        {
                          __break(1u);
LABEL_86:
                          __break(1u);
                          goto LABEL_87;
                        }
                        ++v53;
                        if (v59 == v48) {
                          goto LABEL_86;
                        }
                      }
                    }
                  }
                  if (v52) {
                    goto LABEL_114;
                  }
                  uint64_t v54 = v51 + v50;
                  if (__OFADD__(v51, v50)) {
                    goto LABEL_93;
                  }
                  uint64_t v55 = v2;
                  unint64_t v56 = *((void *)v12 + 2);
                  if (v56 >= *((void *)v12 + 3) >> 1)
                  {
                    unint64_t v12 = sub_21F7E8E20((char *)1, v56 + 1, 1, v12);
                    unint64_t v56 = *((void *)v12 + 2);
                  }
                  memmove(v12 + 56, v12 + 32, 24 * v56);
                  *((void *)v12 + 2) = v56 + 1;
                  *((void *)v12 + 4) = v46;
                  *((void *)v12 + 5) = v53;
                  *((void *)v12 + 6) = v54;
                  if ((int64_t)v46 >= *(void *)(v55 + 16)) {
                    goto LABEL_94;
                  }
                  uint64_t v2 = v55;
                  uint64_t v16 = v61;
                  *(unsigned char *)(v61 + v46) = 1;
                }
                ++v44;
              }
              while (v44 != v43);
              swift_bridgeObjectRelease();
              uint64_t v0 = v60;
              uint64_t v17 = *((void *)v12 + 2);
              if (!v17) {
                break;
              }
            }
            else
            {
              uint64_t v16 = v61;
              uint64_t v17 = *((void *)v12 + 2);
              if (!v17) {
                break;
              }
            }
            goto LABEL_20;
          }
LABEL_37:
          uint64_t v30 = v28;
          uint64_t v31 = v34;
        }
        if (v29 < v30) {
          goto LABEL_95;
        }
        if ((uint64_t)v28 < v30) {
          goto LABEL_96;
        }
        if ((uint64_t)v28 >= v29) {
          goto LABEL_97;
        }
        if (v21 >= v33[2]) {
          goto LABEL_98;
        }
        char v37 = swift_isUniquelyReferenced_nonNull_native();
        v63[v21] = v26;
        if (v37)
        {
          char v33 = v62;
          if ((v28 & 0x8000000000000000) != 0) {
            goto LABEL_99;
          }
        }
        else
        {
          BOOL v26 = sub_21F935318((uint64_t)v26);
          v63[v21] = v26;
          char v33 = v62;
          if ((v28 & 0x8000000000000000) != 0) {
            goto LABEL_99;
          }
        }
        if (v28 >= *((void *)v26 + 2)) {
          goto LABEL_100;
        }
        uint64_t v38 = 40 * v28;
        uint64_t v39 = &v26[40 * v28];
        *((void *)v39 + 7) = v22;
        v39[64] = 0;
        if (v21 >= v33[2]) {
          goto LABEL_101;
        }
        BOOL v26 = (char *)v63[v21];
        if (v28 >= *((void *)v26 + 2)) {
          goto LABEL_102;
        }
        char v32 = 0;
        ++v28;
        uint64_t v40 = *(void *)&v26[v38 + 48];
        BOOL v41 = __OFADD__(v22, v40);
        v22 += v40;
        if (v41) {
          goto LABEL_103;
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v3 = *(void *)(v0 + 24);
    uint64_t v4 = *(void *)(v3 + 16);
    unint64_t v5 = (char *)MEMORY[0x263F8EE78];
    if (!v4)
    {
LABEL_82:
      swift_bridgeObjectRelease();
      return;
    }
  }
LABEL_112:
  __break(1u);
LABEL_113:
  __break(1u);
LABEL_114:
  __break(1u);
}

unint64_t sub_21F9350DC@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v5 = *(void *)(a2 + 40);
  if (*(void *)(v5 + 16) <= result)
  {
LABEL_23:
    __break(1u);
    return result;
  }
  uint64_t v6 = *(void *)(v5 + 8 * result + 32);
  uint64_t v7 = *(void *)(v6 + 16);
  long long v8 = 0uLL;
  if (!v7)
  {
    uint64_t v13 = 0;
    LOBYTE(v15) = 1;
    goto LABEL_21;
  }
  uint64_t v10 = v6 + 32;
  uint64_t result = swift_beginAccess();
  uint64_t v11 = 0;
  while (1)
  {
    unint64_t v12 = (long long *)(v10 + 40 * v11);
    uint64_t v13 = *((void *)v12 + 2);
    if (v13 >= 1 && (v12[2] & 1) == 0 && !*((void *)v12 + 3)) {
      break;
    }
LABEL_5:
    if (++v11 == v7)
    {
      uint64_t v13 = 0;
      LOBYTE(v15) = 1;
      long long v8 = 0uLL;
      goto LABEL_21;
    }
  }
  long long v8 = *v12;
  uint64_t v14 = *a3;
  uint64_t v15 = *(void *)(*a3 + 16);
  if (!v15) {
    goto LABEL_21;
  }
  long long v24 = v8;
  uint64_t v16 = v8;
  uint64_t result = sub_21FA269F0();
  uint64_t v17 = -1 << *(unsigned char *)(v14 + 32);
  unint64_t v18 = result & ~v17;
  uint64_t v19 = v14 + 56;
  if ((*(void *)(v14 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18))
  {
    uint64_t v20 = *(void *)(v14 + 48);
    long long v8 = v24;
    if (*(void *)(v20 + 8 * v18) != v16)
    {
      uint64_t v21 = ~v17;
      unint64_t v22 = (v18 + 1) & v21;
      if (((*(void *)(v19 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22) & 1) == 0) {
        goto LABEL_17;
      }
      if (*(void *)(v20 + 8 * v22) != v16)
      {
        unint64_t v23 = (v22 + 1) & v21;
        if (((*(void *)(v19 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
        {
LABEL_17:
          LOBYTE(v15) = 0;
          goto LABEL_21;
        }
        while (*(void *)(v20 + 8 * v23) != v16)
        {
          unint64_t v23 = (v23 + 1) & v21;
          if (((*(void *)(v19 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
            goto LABEL_17;
          }
        }
      }
    }
    goto LABEL_5;
  }
  LOBYTE(v15) = 0;
  long long v8 = v24;
LABEL_21:
  *(_OWORD *)a4 = v8;
  *(void *)(a4 + 16) = v13;
  *(void *)(a4 + 24) = 0;
  *(unsigned char *)(a4 + 32) = 0;
  *(unsigned char *)(a4 + 33) = v15;
  return result;
}

size_t sub_21F9352B4(void *a1)
{
  return sub_21F7E5EA4(0, a1[2], 0, a1);
}

char *sub_21F9352C8(uint64_t a1)
{
  return sub_21F7E61F4(0, *(void *)(a1 + 16), 0, (char *)a1);
}

size_t sub_21F9352DC(void *a1)
{
  return sub_21F7E835C(0, a1[2], 0, a1);
}

void *sub_21F9352F0(void *a1)
{
  return sub_21F7E8484(0, a1[2], 0, a1);
}

char *sub_21F935304(uint64_t a1)
{
  return sub_21F7E86D8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_21F935318(uint64_t a1)
{
  return sub_21F7E8D04(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_21F93532C(void *a1)
{
  return sub_21F7E8E0C(0, a1[2], 0, a1);
}

char *sub_21F935340(uint64_t a1)
{
  return sub_21F7E8CF8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_21F935354(void *a1)
{
  return sub_21F7E9048(0, a1[2], 0, a1);
}

char *sub_21F935368(uint64_t a1)
{
  return sub_21F7E8A08(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_21F93537C(uint64_t a1)
{
  return sub_21F7E8F4C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_21F935390(uint64_t a1)
{
  return sub_21F7E5FD8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_21F9353A4(uint64_t a1)
{
  return sub_21F7E88F0(0, *(void *)(a1 + 16), 0, (char *)a1);
}

size_t sub_21F9353B8(void *a1)
{
  return sub_21F7E9B78(0, a1[2], 0, a1);
}

void *sub_21F9353CC(void *a1)
{
  return sub_21F7E9CA4(0, a1[2], 0, a1);
}

void *sub_21F9353E0(void *a1)
{
  return sub_21F7E9FCC(0, a1[2], 0, a1);
}

size_t sub_21F9353F4(void *a1)
{
  return sub_21F7E9DE4(0, a1[2], 0, a1);
}

void *sub_21F935408(void *a1)
{
  return sub_21F7EA474(0, a1[2], 0, a1);
}

char *sub_21F93541C(uint64_t a1)
{
  return sub_21F7EA6B8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_21F935430(uint64_t a1)
{
  return sub_21F7EA5B4(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_21F935444(uint64_t a1)
{
  return sub_21F7EA91C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_21F935458(void *a1)
{
  return sub_21F7EAC84(0, a1[2], 0, a1);
}

char *sub_21F93546C(uint64_t a1)
{
  return sub_21F7EADBC(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_21F935480(uint64_t a1)
{
  return sub_21F7E8388(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void sub_21F935494(uint64_t *a1, uint64_t a2, float64x2_t a3)
{
  uint64_t v6 = a1[1];
  uint64_t v7 = sub_21FA26850();
  if (v7 >= v6)
  {
    if ((v6 & 0x8000000000000000) == 0)
    {
      if (v6) {
        sub_21F9362E0(0, v6, 1, a1, a2, a3);
      }
      return;
    }
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }
  if (v6 >= 0) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v6 + 1;
  }
  if (v6 < -1)
  {
LABEL_147:
    __break(1u);
    goto LABEL_148;
  }
  uint64_t v124 = v7;
  uint64_t v125 = v6;
  v120 = a1;
  if (v6 <= 1)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    v128 = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v6 != 1)
    {
      unint64_t v47 = *(void *)(MEMORY[0x263F8EE78] + 16);
      v130 = (char *)MEMORY[0x263F8EE78];
LABEL_106:
      uint64_t v123 = v11;
      if (v47 < 2)
      {
LABEL_117:
        swift_bridgeObjectRelease();
        *(void *)(v123 + 16) = 0;
        swift_bridgeObjectRelease();
        return;
      }
      uint64_t v113 = *v120;
      while (1)
      {
        unint64_t v114 = v47 - 2;
        if (v47 < 2) {
          goto LABEL_138;
        }
        if (!v113) {
          goto LABEL_155;
        }
        uint64_t v115 = *(void *)&v130[16 * v114 + 32];
        uint64_t v116 = *(void *)&v130[16 * v47 + 24];
        sub_21F936428((char *)(v113 + 40 * v115), (char *)(v113 + 40 * *(void *)&v130[16 * v47 + 16]), v113 + 40 * v116, v128, a2, a3);
        if (v3) {
          goto LABEL_117;
        }
        if (v116 < v115) {
          goto LABEL_139;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v130 = sub_21F936940((uint64_t)v130);
        }
        if (v114 >= *((void *)v130 + 2)) {
          goto LABEL_140;
        }
        v117 = &v130[16 * v114 + 32];
        *(void *)v117 = v115;
        *((void *)v117 + 1) = v116;
        unint64_t v118 = *((void *)v130 + 2);
        if (v47 > v118) {
          goto LABEL_141;
        }
        memmove(&v130[16 * v47 + 16], &v130[16 * v47 + 32], 16 * (v118 - v47));
        *((void *)v130 + 2) = v118 - 1;
        unint64_t v47 = v118 - 1;
        if (v118 <= 2) {
          goto LABEL_117;
        }
      }
    }
    uint64_t v123 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = sub_21FA25ED0();
    *(void *)(v10 + 16) = v9;
    uint64_t v123 = v10;
    v128 = (char *)(v10 + 32);
  }
  uint64_t v12 = 0;
  uint64_t v121 = *a1 + 48;
  uint64_t v122 = *a1 + 8;
  uint64_t v129 = *a1;
  uint64_t v119 = *a1 - 40;
  v130 = (char *)MEMORY[0x263F8EE78];
  uint64_t v13 = v125;
  while (1)
  {
    uint64_t v14 = v12++;
    if (v12 >= v13) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v122 + 40 * v12);
    if ((v15 & 0x8000000000000000) != 0) {
      goto LABEL_143;
    }
    uint64_t v16 = *(void *)(a2 + 24);
    unint64_t v17 = *(void *)(v16 + 16);
    if (v15 >= v17) {
      goto LABEL_144;
    }
    unint64_t v18 = *(void *)(v122 + 40 * v14);
    if (v18 >= v17) {
      goto LABEL_145;
    }
    uint64_t v19 = v16 + 32;
    float64x2_t v20 = vsubq_f64(*(float64x2_t *)(v16 + 32 + 16 * v15), a3);
    double v21 = atan2(v20.f64[1], v20.f64[0]);
    float64x2_t v22 = vsubq_f64(*(float64x2_t *)(v19 + 16 * v18), a3);
    double v23 = atan2(v22.f64[1], v22.f64[0]);
    uint64_t v12 = v14 + 2;
    if (v14 + 2 >= v13) {
      goto LABEL_25;
    }
    long long v24 = (unint64_t *)(v121 + 40 * v14);
    uint64_t v25 = v24;
    do
    {
      unint64_t v27 = v25[5];
      v25 += 5;
      unint64_t v26 = v27;
      if (v27 >= v17) {
        goto LABEL_125;
      }
      unint64_t v28 = *v24;
      if (*v24 >= v17)
      {
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
        goto LABEL_147;
      }
      float64x2_t v29 = vsubq_f64(*(float64x2_t *)(v19 + 16 * v26), a3);
      double v30 = atan2(v29.f64[1], v29.f64[0]);
      float64x2_t v31 = vsubq_f64(*(float64x2_t *)(v19 + 16 * v28), a3);
      if (v21 < v23 == v30 >= atan2(v31.f64[1], v31.f64[0])) {
        goto LABEL_25;
      }
      ++v12;
      long long v24 = v25;
    }
    while (v13 != v12);
    uint64_t v12 = v13;
LABEL_25:
    if (v21 < v23) {
      break;
    }
LABEL_33:
    if (v12 >= v13) {
      goto LABEL_42;
    }
    if (__OFSUB__(v12, v14)) {
      goto LABEL_146;
    }
    if (v12 - v14 >= v124) {
      goto LABEL_42;
    }
    if (__OFADD__(v14, v124)) {
      goto LABEL_149;
    }
    if (v14 + v124 >= v13) {
      uint64_t v43 = v13;
    }
    else {
      uint64_t v43 = v14 + v124;
    }
    if (v43 < v14) {
      goto LABEL_150;
    }
    if (v12 == v43)
    {
LABEL_42:
      uint64_t v44 = v129;
      if (v12 < v14) {
        goto LABEL_142;
      }
    }
    else
    {
      uint64_t v126 = v43;
      uint64_t v127 = v14;
      uint64_t v97 = v119 + 40 * v12;
      uint64_t v44 = v129;
      do
      {
        uint64_t v98 = v127;
        uint64_t v99 = v97;
        do
        {
          unint64_t v100 = *(void *)(v99 + 48);
          if ((v100 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
            goto LABEL_126;
          }
          uint64_t v101 = *(void *)(a2 + 24);
          unint64_t v102 = *(void *)(v101 + 16);
          if (v100 >= v102) {
            goto LABEL_119;
          }
          unint64_t v103 = *(void *)(v99 + 8);
          if (v103 >= v102) {
            goto LABEL_120;
          }
          uint64_t v104 = v101 + 32;
          float64x2_t v105 = vsubq_f64(*(float64x2_t *)(v101 + 32 + 16 * v100), a3);
          double v106 = atan2(v105.f64[1], v105.f64[0]);
          float64x2_t v107 = vsubq_f64(*(float64x2_t *)(v104 + 16 * v103), a3);
          if (v106 >= atan2(v107.f64[1], v107.f64[0])) {
            break;
          }
          if (!v129) {
            goto LABEL_152;
          }
          long long v108 = *(_OWORD *)v99;
          long long v109 = *(_OWORD *)(v99 + 16);
          *(_OWORD *)(v99 + 16) = *(_OWORD *)(v99 + 56);
          uint64_t v110 = v99 + 40;
          char v111 = *(unsigned char *)(v99 + 72);
          uint64_t v112 = *(void *)(v99 + 32);
          *(void *)uint64_t v99 = *(void *)(v99 + 40);
          *(void *)(v99 + 8) = v100;
          *(unsigned char *)(v99 + 32) = v111;
          v99 -= 40;
          *(_OWORD *)uint64_t v110 = v108;
          *(_OWORD *)(v110 + 16) = v109;
          ++v98;
          *(void *)(v110 + 32) = v112;
        }
        while (v12 != v98);
        ++v12;
        v97 += 40;
      }
      while (v12 != v126);
      uint64_t v12 = v126;
      uint64_t v14 = v127;
      if (v126 < v127) {
        goto LABEL_142;
      }
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      v130 = sub_21F7E929C(0, *((void *)v130 + 2) + 1, 1, v130);
    }
    unint64_t v46 = *((void *)v130 + 2);
    unint64_t v45 = *((void *)v130 + 3);
    unint64_t v47 = v46 + 1;
    if (v46 >= v45 >> 1) {
      v130 = sub_21F7E929C((char *)(v45 > 1), v46 + 1, 1, v130);
    }
    *((void *)v130 + 2) = v47;
    uint64_t v48 = v130 + 32;
    uint64_t v49 = &v130[16 * v46 + 32];
    *(void *)uint64_t v49 = v14;
    *((void *)v49 + 1) = v12;
    if (v46)
    {
      while (1)
      {
        unint64_t v50 = v47 - 1;
        if (v47 >= 4)
        {
          uint64_t v55 = &v48[16 * v47];
          uint64_t v56 = *((void *)v55 - 8);
          uint64_t v57 = *((void *)v55 - 7);
          BOOL v61 = __OFSUB__(v57, v56);
          uint64_t v58 = v57 - v56;
          if (v61) {
            goto LABEL_127;
          }
          uint64_t v60 = *((void *)v55 - 6);
          uint64_t v59 = *((void *)v55 - 5);
          BOOL v61 = __OFSUB__(v59, v60);
          uint64_t v53 = v59 - v60;
          char v54 = v61;
          if (v61) {
            goto LABEL_128;
          }
          unint64_t v62 = v47 - 2;
          uint64_t v63 = &v48[16 * v47 - 32];
          uint64_t v65 = *(void *)v63;
          uint64_t v64 = *((void *)v63 + 1);
          BOOL v61 = __OFSUB__(v64, v65);
          uint64_t v66 = v64 - v65;
          if (v61) {
            goto LABEL_129;
          }
          BOOL v61 = __OFADD__(v53, v66);
          uint64_t v67 = v53 + v66;
          if (v61) {
            goto LABEL_131;
          }
          if (v67 >= v58)
          {
            v85 = &v48[16 * v50];
            uint64_t v87 = *(void *)v85;
            uint64_t v86 = *((void *)v85 + 1);
            BOOL v61 = __OFSUB__(v86, v87);
            uint64_t v88 = v86 - v87;
            if (v61) {
              goto LABEL_137;
            }
            BOOL v78 = v53 < v88;
            goto LABEL_79;
          }
        }
        else
        {
          if (v47 != 3)
          {
            uint64_t v79 = *((void *)v130 + 4);
            uint64_t v80 = *((void *)v130 + 5);
            BOOL v61 = __OFSUB__(v80, v79);
            uint64_t v72 = v80 - v79;
            char v73 = v61;
            goto LABEL_73;
          }
          uint64_t v52 = *((void *)v130 + 4);
          uint64_t v51 = *((void *)v130 + 5);
          BOOL v61 = __OFSUB__(v51, v52);
          uint64_t v53 = v51 - v52;
          char v54 = v61;
        }
        if (v54) {
          goto LABEL_130;
        }
        unint64_t v62 = v47 - 2;
        unint64_t v68 = &v48[16 * v47 - 32];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v71 = __OFSUB__(v69, v70);
        uint64_t v72 = v69 - v70;
        char v73 = v71;
        if (v71) {
          goto LABEL_132;
        }
        v74 = &v48[16 * v50];
        uint64_t v76 = *(void *)v74;
        uint64_t v75 = *((void *)v74 + 1);
        BOOL v61 = __OFSUB__(v75, v76);
        uint64_t v77 = v75 - v76;
        if (v61) {
          goto LABEL_134;
        }
        if (__OFADD__(v72, v77)) {
          goto LABEL_136;
        }
        if (v72 + v77 >= v53)
        {
          BOOL v78 = v53 < v77;
LABEL_79:
          if (v78) {
            unint64_t v50 = v62;
          }
          goto LABEL_81;
        }
LABEL_73:
        if (v73) {
          goto LABEL_133;
        }
        v81 = &v48[16 * v50];
        uint64_t v83 = *(void *)v81;
        uint64_t v82 = *((void *)v81 + 1);
        BOOL v61 = __OFSUB__(v82, v83);
        uint64_t v84 = v82 - v83;
        if (v61) {
          goto LABEL_135;
        }
        if (v84 < v72) {
          goto LABEL_90;
        }
LABEL_81:
        unint64_t v89 = v50 - 1;
        if (v50 - 1 >= v47) {
          goto LABEL_121;
        }
        uint64_t v90 = v44;
        if (!v44) {
          goto LABEL_153;
        }
        uint64_t v91 = a2;
        v92 = &v48[16 * v89];
        uint64_t v93 = *(void *)v92;
        v94 = &v48[16 * v50];
        uint64_t v95 = *((void *)v94 + 1);
        sub_21F936428((char *)(v90 + 40 * *(void *)v92), (char *)(v90 + 40 * *(void *)v94), v90 + 40 * v95, v128, v91, a3);
        if (v3) {
          goto LABEL_117;
        }
        if (v95 < v93) {
          goto LABEL_122;
        }
        if (v50 > *((void *)v130 + 2)) {
          goto LABEL_123;
        }
        *(void *)v92 = v93;
        *(void *)&v48[16 * v89 + 8] = v95;
        unint64_t v96 = *((void *)v130 + 2);
        if (v50 >= v96) {
          goto LABEL_124;
        }
        unint64_t v47 = v96 - 1;
        memmove(&v48[16 * v50], v94 + 16, 16 * (v96 - 1 - v50));
        *((void *)v130 + 2) = v96 - 1;
        a2 = v91;
        uint64_t v44 = v129;
        if (v96 <= 2) {
          goto LABEL_90;
        }
      }
    }
    unint64_t v47 = 1;
LABEL_90:
    uint64_t v13 = v125;
    if (v12 >= v125)
    {
      uint64_t v11 = v123;
      goto LABEL_106;
    }
  }
  if (v12 >= v14)
  {
    if (v14 < v12)
    {
      uint64_t v32 = 40 * v12;
      uint64_t v33 = 40 * v14;
      uint64_t v34 = v12;
      uint64_t v35 = v14;
      while (1)
      {
        if (v35 != --v34)
        {
          if (!v129) {
            goto LABEL_154;
          }
          uint64_t v36 = v129 + v33;
          char v37 = *(unsigned char *)(v129 + v33 + 32);
          uint64_t v38 = v129 + v32;
          long long v39 = *(_OWORD *)(v129 + v33);
          long long v40 = *(_OWORD *)(v129 + v33 + 16);
          uint64_t v41 = *(void *)(v129 + v32 - 8);
          long long v42 = *(_OWORD *)(v129 + v32 - 24);
          *(_OWORD *)uint64_t v36 = *(_OWORD *)(v129 + v32 - 40);
          *(_OWORD *)(v36 + 16) = v42;
          *(void *)(v36 + 32) = v41;
          *(_OWORD *)(v38 - 40) = v39;
          *(_OWORD *)(v38 - 24) = v40;
          *(unsigned char *)(v38 - 8) = v37;
        }
        ++v35;
        v32 -= 40;
        v33 += 40;
        if (v35 >= v34) {
          goto LABEL_33;
        }
      }
    }
    goto LABEL_33;
  }
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
}

uint64_t sub_21F935C90(void *a1)
{
  uint64_t v2 = a1;
  uint64_t v3 = a1[1];
  uint64_t result = sub_21FA26850();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v78 = 0;
      uint64_t v79 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        double v81 = *(double *)(v79 + 8 * i);
        uint64_t v82 = v78;
        do
        {
          uint64_t v83 = v79 + 8 * v82;
          if (v81 >= *(double *)v83) {
            break;
          }
          if (!v79) {
            goto LABEL_141;
          }
          *(void *)(v83 + 8) = *(void *)v83;
          *(double *)(v79 + 8 * v82--) = v81;
        }
        while (v82 != -1);
        ++v78;
      }
    }
  }
  else
  {
    if (v3 >= 0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = v3 + 1;
    }
    if (v3 < -1) {
      goto LABEL_136;
    }
    uint64_t v95 = result;
    uint64_t v96 = v3;
    if (v3 > 1)
    {
      uint64_t v6 = v5 >> 1;
      uint64_t result = sub_21FA25ED0();
      *(void *)(result + 16) = v6;
      uint64_t v3 = v96;
      uint64_t v94 = result;
      uint64_t v98 = (double *)(result + 32);
LABEL_13:
      uint64_t v8 = 0;
      uint64_t v9 = *v2;
      v92 = v2;
      uint64_t v93 = *v2 - 8;
      uint64_t v10 = MEMORY[0x263F8EE78];
      uint64_t v97 = *v2;
      while (1)
      {
        uint64_t v12 = v8++;
        if (v8 < v3)
        {
          double v13 = *(double *)(v9 + 8 * v8);
          double v14 = *(double *)(v9 + 8 * v12);
          uint64_t v8 = v12 + 2;
          if (v12 + 2 < v3)
          {
            double v15 = v13;
            while (1)
            {
              double v16 = v15;
              double v15 = *(double *)(v9 + 8 * v8);
              if (v13 < v14 == v15 >= v16) {
                break;
              }
              if (v3 == ++v8)
              {
                uint64_t v8 = v3;
                break;
              }
            }
          }
          if (v13 < v14)
          {
            if (v8 < v12) {
              goto LABEL_138;
            }
            if (v12 < v8)
            {
              unint64_t v17 = (uint64_t *)(v93 + 8 * v8);
              uint64_t v18 = v8;
              uint64_t v19 = v12;
              float64x2_t v20 = (uint64_t *)(v9 + 8 * v12);
              do
              {
                if (v19 != --v18)
                {
                  if (!v9) {
                    goto LABEL_144;
                  }
                  uint64_t v21 = *v20;
                  *float64x2_t v20 = *v17;
                  *unint64_t v17 = v21;
                }
                ++v19;
                --v17;
                ++v20;
              }
              while (v19 < v18);
            }
          }
        }
        if (v8 < v3)
        {
          if (__OFSUB__(v8, v12)) {
            goto LABEL_135;
          }
          if (v8 - v12 < v95)
          {
            uint64_t v22 = v12 + v95;
            if (__OFADD__(v12, v95)) {
              goto LABEL_139;
            }
            if (v22 >= v3) {
              uint64_t v22 = v3;
            }
            if (v22 < v12)
            {
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
              return result;
            }
            if (v8 != v22)
            {
              double v23 = (double *)(v93 + 8 * v8);
              do
              {
                double v24 = *(double *)(v9 + 8 * v8);
                uint64_t v25 = v12;
                unint64_t v26 = v23;
                do
                {
                  double v27 = *v26;
                  if (v24 >= *v26) {
                    break;
                  }
                  if (!v9) {
                    goto LABEL_142;
                  }
                  *unint64_t v26 = v24;
                  v26[1] = v27;
                  --v26;
                  ++v25;
                }
                while (v8 != v25);
                ++v8;
                ++v23;
              }
              while (v8 != v22);
              uint64_t v8 = v22;
            }
          }
        }
        if (v8 < v12) {
          goto LABEL_130;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_21F7E929C(0, *(void *)(v10 + 16) + 1, 1, (char *)v10);
          uint64_t v10 = result;
        }
        unint64_t v29 = *(void *)(v10 + 16);
        unint64_t v28 = *(void *)(v10 + 24);
        unint64_t v11 = v29 + 1;
        uint64_t v9 = v97;
        if (v29 >= v28 >> 1)
        {
          uint64_t result = (uint64_t)sub_21F7E929C((char *)(v28 > 1), v29 + 1, 1, (char *)v10);
          uint64_t v9 = v97;
          uint64_t v10 = result;
        }
        *(void *)(v10 + 16) = v11;
        uint64_t v30 = v10 + 32;
        float64x2_t v31 = (uint64_t *)(v10 + 32 + 16 * v29);
        *float64x2_t v31 = v12;
        v31[1] = v8;
        if (v29)
        {
          while (1)
          {
            unint64_t v32 = v11 - 1;
            if (v11 >= 4)
            {
              unint64_t v37 = v30 + 16 * v11;
              uint64_t v38 = *(void *)(v37 - 64);
              uint64_t v39 = *(void *)(v37 - 56);
              BOOL v43 = __OFSUB__(v39, v38);
              uint64_t v40 = v39 - v38;
              if (v43) {
                goto LABEL_119;
              }
              uint64_t v42 = *(void *)(v37 - 48);
              uint64_t v41 = *(void *)(v37 - 40);
              BOOL v43 = __OFSUB__(v41, v42);
              uint64_t v35 = v41 - v42;
              char v36 = v43;
              if (v43) {
                goto LABEL_120;
              }
              unint64_t v44 = v11 - 2;
              unint64_t v45 = (uint64_t *)(v30 + 16 * (v11 - 2));
              uint64_t v47 = *v45;
              uint64_t v46 = v45[1];
              BOOL v43 = __OFSUB__(v46, v47);
              uint64_t v48 = v46 - v47;
              if (v43) {
                goto LABEL_121;
              }
              BOOL v43 = __OFADD__(v35, v48);
              uint64_t v49 = v35 + v48;
              if (v43) {
                goto LABEL_123;
              }
              if (v49 >= v40)
              {
                uint64_t v67 = (uint64_t *)(v30 + 16 * v32);
                uint64_t v69 = *v67;
                uint64_t v68 = v67[1];
                BOOL v43 = __OFSUB__(v68, v69);
                uint64_t v70 = v68 - v69;
                if (v43) {
                  goto LABEL_129;
                }
                BOOL v60 = v35 < v70;
                goto LABEL_83;
              }
            }
            else
            {
              if (v11 != 3)
              {
                uint64_t v61 = *(void *)(v10 + 32);
                uint64_t v62 = *(void *)(v10 + 40);
                BOOL v43 = __OFSUB__(v62, v61);
                uint64_t v54 = v62 - v61;
                char v55 = v43;
                goto LABEL_77;
              }
              uint64_t v34 = *(void *)(v10 + 32);
              uint64_t v33 = *(void *)(v10 + 40);
              BOOL v43 = __OFSUB__(v33, v34);
              uint64_t v35 = v33 - v34;
              char v36 = v43;
            }
            if (v36) {
              goto LABEL_122;
            }
            unint64_t v44 = v11 - 2;
            unint64_t v50 = (uint64_t *)(v30 + 16 * (v11 - 2));
            uint64_t v52 = *v50;
            uint64_t v51 = v50[1];
            BOOL v53 = __OFSUB__(v51, v52);
            uint64_t v54 = v51 - v52;
            char v55 = v53;
            if (v53) {
              goto LABEL_124;
            }
            uint64_t v56 = (uint64_t *)(v30 + 16 * v32);
            uint64_t v58 = *v56;
            uint64_t v57 = v56[1];
            BOOL v43 = __OFSUB__(v57, v58);
            uint64_t v59 = v57 - v58;
            if (v43) {
              goto LABEL_126;
            }
            if (__OFADD__(v54, v59)) {
              goto LABEL_128;
            }
            if (v54 + v59 >= v35)
            {
              BOOL v60 = v35 < v59;
LABEL_83:
              if (v60) {
                unint64_t v32 = v44;
              }
              goto LABEL_85;
            }
LABEL_77:
            if (v55) {
              goto LABEL_125;
            }
            uint64_t v63 = (uint64_t *)(v30 + 16 * v32);
            uint64_t v65 = *v63;
            uint64_t v64 = v63[1];
            BOOL v43 = __OFSUB__(v64, v65);
            uint64_t v66 = v64 - v65;
            if (v43) {
              goto LABEL_127;
            }
            if (v66 < v54) {
              goto LABEL_15;
            }
LABEL_85:
            unint64_t v71 = v32 - 1;
            if (v32 - 1 >= v11)
            {
              __break(1u);
LABEL_116:
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
              goto LABEL_140;
            }
            if (!v9) {
              goto LABEL_143;
            }
            uint64_t v72 = (uint64_t *)(v30 + 16 * v71);
            uint64_t v73 = *v72;
            uint64_t v74 = v30;
            uint64_t v75 = (void *)(v30 + 16 * v32);
            uint64_t v76 = v75[1];
            uint64_t result = sub_21F93673C((double *)(v9 + 8 * *v72), (double *)(v9 + 8 * *v75), v9 + 8 * v76, v98);
            if (v1) {
              goto LABEL_113;
            }
            if (v76 < v73) {
              goto LABEL_116;
            }
            if (v32 > *(void *)(v10 + 16)) {
              goto LABEL_117;
            }
            *uint64_t v72 = v73;
            *(void *)(v74 + 16 * v71 + 8) = v76;
            unint64_t v77 = *(void *)(v10 + 16);
            if (v32 >= v77) {
              goto LABEL_118;
            }
            unint64_t v11 = v77 - 1;
            uint64_t result = (uint64_t)memmove(v75, v75 + 2, 16 * (v77 - 1 - v32));
            uint64_t v30 = v74;
            *(void *)(v10 + 16) = v77 - 1;
            uint64_t v9 = v97;
            if (v77 <= 2) {
              goto LABEL_15;
            }
          }
        }
        unint64_t v11 = 1;
LABEL_15:
        uint64_t v3 = v96;
        if (v8 >= v96)
        {
          uint64_t v7 = v94;
          uint64_t v2 = v92;
          goto LABEL_102;
        }
      }
    }
    uint64_t v7 = MEMORY[0x263F8EE78];
    uint64_t v98 = (double *)(MEMORY[0x263F8EE78] + 32);
    if (v3 == 1)
    {
      uint64_t v94 = MEMORY[0x263F8EE78];
      goto LABEL_13;
    }
    unint64_t v11 = *(void *)(MEMORY[0x263F8EE78] + 16);
    uint64_t v10 = MEMORY[0x263F8EE78];
LABEL_102:
    uint64_t v94 = v7;
    if (v11 >= 2)
    {
      uint64_t v84 = *v2;
      do
      {
        unint64_t v85 = v11 - 2;
        if (v11 < 2) {
          goto LABEL_131;
        }
        if (!v84) {
          goto LABEL_145;
        }
        uint64_t v86 = v10;
        uint64_t v87 = v10 + 32;
        uint64_t v88 = *(void *)(v10 + 32 + 16 * v85);
        uint64_t v89 = *(void *)(v10 + 32 + 16 * (v11 - 1) + 8);
        uint64_t result = sub_21F93673C((double *)(v84 + 8 * v88), (double *)(v84 + 8 * *(void *)(v87 + 16 * (v11 - 1))), v84 + 8 * v89, v98);
        if (v1) {
          break;
        }
        if (v89 < v88) {
          goto LABEL_132;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_21F936940(v86);
          uint64_t v86 = result;
        }
        if (v85 >= *(void *)(v86 + 16)) {
          goto LABEL_133;
        }
        uint64_t v90 = (void *)(v86 + 32 + 16 * v85);
        *uint64_t v90 = v88;
        v90[1] = v89;
        unint64_t v91 = *(void *)(v86 + 16);
        if (v11 > v91) {
          goto LABEL_134;
        }
        uint64_t result = (uint64_t)memmove((void *)(v86 + 32 + 16 * (v11 - 1)), (const void *)(v86 + 32 + 16 * v11), 16 * (v91 - v11));
        uint64_t v10 = v86;
        *(void *)(v86 + 16) = v91 - 1;
        unint64_t v11 = v91 - 1;
      }
      while (v91 > 2);
    }
LABEL_113:
    swift_bridgeObjectRelease();
    *(void *)(v94 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_21F9362E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, float64x2_t a6)
{
  if (a3 != a2)
  {
    uint64_t v7 = a3;
    uint64_t v8 = *a4;
    uint64_t v9 = *a4 + 40 * a3 - 40;
LABEL_5:
    uint64_t v10 = a1;
    uint64_t v11 = v9;
    while (1)
    {
      unint64_t v12 = *(void *)(v11 + 48);
      if ((v12 & 0x8000000000000000) != 0) {
        break;
      }
      uint64_t v13 = *(void *)(a5 + 24);
      unint64_t v14 = *(void *)(v13 + 16);
      if (v12 >= v14) {
        goto LABEL_14;
      }
      unint64_t v15 = *(void *)(v11 + 8);
      if (v15 >= v14) {
        goto LABEL_15;
      }
      uint64_t v16 = v13 + 32;
      float64x2_t v17 = vsubq_f64(*(float64x2_t *)(v13 + 32 + 16 * v12), a6);
      double v18 = atan2(v17.f64[1], v17.f64[0]);
      float64x2_t v19 = vsubq_f64(*(float64x2_t *)(v16 + 16 * v15), a6);
      if (v18 < atan2(v19.f64[1], v19.f64[0]))
      {
        if (!v8) {
          goto LABEL_16;
        }
        long long v20 = *(_OWORD *)v11;
        long long v21 = *(_OWORD *)(v11 + 16);
        *(_OWORD *)(v11 + 16) = *(_OWORD *)(v11 + 56);
        uint64_t v22 = v11 + 40;
        char v23 = *(unsigned char *)(v11 + 72);
        uint64_t v24 = *(void *)(v11 + 32);
        *(void *)uint64_t v11 = *(void *)(v11 + 40);
        *(void *)(v11 + 8) = v12;
        *(unsigned char *)(v11 + 32) = v23;
        v11 -= 40;
        *(_OWORD *)uint64_t v22 = v20;
        *(_OWORD *)(v22 + 16) = v21;
        ++v10;
        *(void *)(v22 + 32) = v24;
        if (v7 != v10) {
          continue;
        }
      }
      ++v7;
      v9 += 40;
      if (v7 == a2) {
        return;
      }
      goto LABEL_5;
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
}

void sub_21F936428(char *__dst, char *__src, unint64_t a3, char *a4, uint64_t a5, float64x2_t a6)
{
  uint64_t v7 = a4;
  uint64_t v9 = __src;
  uint64_t v10 = __dst;
  int64_t v11 = __src - __dst;
  int64_t v12 = (__src - __dst) / 40;
  uint64_t v13 = a3 - (void)__src;
  uint64_t v14 = (uint64_t)(a3 - (void)__src) / 40;
  if (v12 < v14)
  {
    size_t v15 = 40 * v12;
    if (a4 != __dst || &__dst[v15] <= a4) {
      memmove(a4, __dst, v15);
    }
    uint64_t v16 = &v7[v15];
    if ((unint64_t)v9 < a3 && v11 >= 40)
    {
      while (1)
      {
        unint64_t v17 = *((void *)v9 + 1);
        if ((v17 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
          goto LABEL_53;
        }
        uint64_t v18 = *(void *)(a5 + 24);
        unint64_t v19 = *(void *)(v18 + 16);
        if (v17 >= v19) {
          goto LABEL_50;
        }
        unint64_t v20 = *((void *)v7 + 1);
        if (v20 >= v19) {
          goto LABEL_51;
        }
        uint64_t v21 = v18 + 32;
        float64x2_t v22 = vsubq_f64(*(float64x2_t *)(v18 + 32 + 16 * v17), a6);
        double v23 = atan2(v22.f64[1], v22.f64[0]);
        float64x2_t v24 = vsubq_f64(*(float64x2_t *)(v21 + 16 * v20), a6);
        if (v23 >= atan2(v24.f64[1], v24.f64[0]))
        {
          double v27 = v7 + 40;
          unint64_t v26 = v7;
          uint64_t v25 = v9;
          if (v10 == v7)
          {
            v7 += 40;
            if (v10 < v27) {
              goto LABEL_19;
            }
          }
          else
          {
            v7 += 40;
          }
        }
        else
        {
          uint64_t v25 = v9 + 40;
          unint64_t v26 = v9;
          if (v10 == v9 && v10 < v25) {
            goto LABEL_19;
          }
        }
        long long v28 = *(_OWORD *)v26;
        long long v29 = *((_OWORD *)v26 + 1);
        *((void *)v10 + 4) = *((void *)v26 + 4);
        *(_OWORD *)uint64_t v10 = v28;
        *((_OWORD *)v10 + 1) = v29;
LABEL_19:
        v10 += 40;
        if (v7 < v16)
        {
          uint64_t v9 = v25;
          if ((unint64_t)v25 < a3) {
            continue;
          }
        }
        break;
      }
    }
    uint64_t v9 = v10;
LABEL_45:
    size_t v45 = 40 * ((v16 - v7) / 40);
    if (v9 != v7 || v9 >= &v7[v45]) {
      memmove(v9, v7, v45);
    }
    return;
  }
  uint64_t v30 = 40 * v14;
  if (a4 != __src || &__src[v30] <= a4) {
    memmove(a4, __src, 40 * v14);
  }
  uint64_t v16 = &v7[v30];
  if (v10 >= v9 || v13 < 40) {
    goto LABEL_45;
  }
  unint64_t v31 = a3 - 40;
  while (1)
  {
    unint64_t v32 = *((void *)v16 - 4);
    if ((v32 & 0x8000000000000000) != 0) {
      goto LABEL_52;
    }
    uint64_t v33 = *(void *)(a5 + 24);
    unint64_t v34 = *(void *)(v33 + 16);
    if (v32 >= v34) {
      break;
    }
    unint64_t v35 = *((void *)v9 - 4);
    if (v35 >= v34) {
      goto LABEL_54;
    }
    char v36 = (char *)(v31 + 40);
    uint64_t v37 = v33 + 32;
    float64x2_t v38 = vsubq_f64(*(float64x2_t *)(v33 + 32 + 16 * v32), a6);
    double v39 = atan2(v38.f64[1], v38.f64[0]);
    float64x2_t v40 = vsubq_f64(*(float64x2_t *)(v37 + 16 * v35), a6);
    if (v39 >= atan2(v40.f64[1], v40.f64[0]))
    {
      uint64_t v41 = v16 - 40;
      if (v36 != v16)
      {
        v16 -= 40;
        goto LABEL_42;
      }
      BOOL v42 = v31 >= (unint64_t)v16;
      v16 -= 40;
      if (v42) {
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v41 = v9 - 40;
      if (v36 != v9)
      {
        v9 -= 40;
LABEL_42:
        long long v43 = *(_OWORD *)v41;
        long long v44 = *((_OWORD *)v41 + 1);
        *(void *)(v31 + 32) = *((void *)v41 + 4);
        *(_OWORD *)unint64_t v31 = v43;
        *(_OWORD *)(v31 + 16) = v44;
        goto LABEL_43;
      }
      BOOL v42 = v31 >= (unint64_t)v9;
      v9 -= 40;
      if (v42) {
        goto LABEL_42;
      }
    }
LABEL_43:
    if (v9 > v10)
    {
      v31 -= 40;
      if (v16 > v7) {
        continue;
      }
    }
    goto LABEL_45;
  }
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
}

uint64_t sub_21F93673C(double *__dst, double *__src, unint64_t a3, double *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = (char *)__src - (char *)__dst;
  int64_t v9 = (char *)__src - (char *)__dst + 7;
  if ((char *)__src - (char *)__dst >= 0) {
    int64_t v9 = (char *)__src - (char *)__dst;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)__src;
  uint64_t v12 = a3 - (void)__src + 7;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v12 = a3 - (void)__src;
  }
  uint64_t v13 = v12 >> 3;
  if (v10 >= v12 >> 3)
  {
    if (a4 != __src || &__src[v13] <= a4) {
      memmove(a4, __src, 8 * v13);
    }
    uint64_t v14 = &v4[v13];
    if (v7 >= v6 || v11 < 8) {
      goto LABEL_39;
    }
    unint64_t v17 = (double *)(a3 - 8);
    uint64_t v18 = v6;
    while (1)
    {
      unint64_t v19 = v17 + 1;
      double v20 = *--v18;
      double v21 = v20;
      if (*(v14 - 1) < v20) {
        break;
      }
      double v21 = *(v14 - 1);
      uint64_t v18 = v6;
      if (v19 != v14)
      {
        --v14;
LABEL_35:
        *unint64_t v17 = v21;
        goto LABEL_36;
      }
      if (v17 >= v14--) {
        goto LABEL_35;
      }
LABEL_36:
      if (v18 > v7)
      {
        --v17;
        uint64_t v6 = v18;
        if (v14 > v4) {
          continue;
        }
      }
      uint64_t v6 = v18;
      goto LABEL_39;
    }
    if (v19 == v6 && v17 < v6) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (a4 != __dst || &__dst[v10] <= a4) {
    memmove(a4, __dst, 8 * v10);
  }
  uint64_t v14 = &v4[v10];
  if ((unint64_t)v6 < a3 && v8 >= 8)
  {
    while (1)
    {
      double v15 = *v6;
      if (*v6 >= *v4) {
        break;
      }
      BOOL v16 = v7 == v6++;
      if (!v16) {
        goto LABEL_16;
      }
LABEL_17:
      ++v7;
      if (v4 >= v14 || (unint64_t)v6 >= a3) {
        goto LABEL_19;
      }
    }
    double v15 = *v4;
    BOOL v16 = v7 == v4++;
    if (v16) {
      goto LABEL_17;
    }
LABEL_16:
    *uint64_t v7 = v15;
    goto LABEL_17;
  }
LABEL_19:
  uint64_t v6 = v7;
LABEL_39:
  int64_t v23 = (char *)v14 - (char *)v4 + ((char *)v14 - (char *)v4 < 0 ? 7uLL : 0);
  if (v6 != v4 || v6 >= (double *)((char *)v4 + (v23 & 0xFFFFFFFFFFFFFFF8))) {
    memmove(v6, v4, 8 * (v23 >> 3));
  }
  return 1;
}

char *sub_21F936940(uint64_t a1)
{
  return sub_21F7E929C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_21F936954(uint64_t a1)
{
  return sub_21F791F94(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_21F936968(uint64_t a1)
{
  return sub_21F76D000(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_21F93697C(uint64_t a1)
{
  return sub_21F7A3F3C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_21F936990(uint64_t a1)
{
  return sub_21F7A4054(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_21F9369A4(void *a1)
{
  return sub_21F7A44B4(0, a1[2], 0, a1);
}

void *sub_21F9369B8(void *a1)
{
  return sub_21F7A4C8C(0, a1[2], 0, a1);
}

size_t sub_21F9369CC(void *a1)
{
  return sub_21F7A3394(0, a1[2], 0, a1);
}

unint64_t sub_21F9369E0(void *a1)
{
  return sub_21F936A04(a1, &qword_26AD452B8);
}

unint64_t sub_21F9369EC(void *a1)
{
  return sub_21F936C1C(a1, &qword_26AD44088);
}

unint64_t sub_21F9369F8(void *a1)
{
  return sub_21F936A04(a1, &qword_267EE7DD0);
}

unint64_t sub_21F936A04(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[2];
  if (!v2) {
    return MEMORY[0x263F8EE80];
  }
  sub_21F76CA40(a2);
  uint64_t v4 = (void *)sub_21FA267C0();
  uint64_t v6 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t result = sub_21F78C550(v6);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v4;
  }
  int64_t v9 = a1 + 7;
  while (1)
  {
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v4[6] + v10) = v6;
    *(void *)(v4[7] + v10) = v5;
    uint64_t v11 = v4[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v4[2] = v13;
    if (!--v2) {
      goto LABEL_8;
    }
    uint64_t v14 = v9 + 2;
    uint64_t v6 = *(v9 - 1);
    uint64_t v15 = *v9;
    swift_bridgeObjectRetain();
    unint64_t result = sub_21F78C550(v6);
    int64_t v9 = v14;
    uint64_t v5 = v15;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_21F936B00(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_21F76CA40(&qword_267EE7DC8);
    uint64_t v3 = (void *)sub_21FA267C0();
    for (uint64_t i = a1 + 32; ; i += 56)
    {
      sub_21F76C978(i, (uint64_t)&v11, &qword_267EE8AD0);
      uint64_t v5 = v11;
      unint64_t result = sub_21F78C550(v11);
      if (v7) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      unint64_t result = sub_21F87B8B4((uint64_t)&v12, v3[7] + 48 * result);
      uint64_t v8 = v3[2];
      BOOL v9 = __OFADD__(v8, 1);
      uint64_t v10 = v8 + 1;
      if (v9) {
        goto LABEL_10;
      }
      v3[2] = v10;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

unint64_t sub_21F936C10(void *a1)
{
  return sub_21F936C1C(a1, &qword_26AD442B0);
}

unint64_t sub_21F936C1C(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[2];
  if (!v2) {
    return MEMORY[0x263F8EE80];
  }
  sub_21F76CA40(a2);
  uint64_t v4 = (void *)sub_21FA267C0();
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  unint64_t result = sub_21F78C550(v5);
  if (v9)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v4;
  }
  uint64_t v10 = a1 + 9;
  while (1)
  {
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v4[6] + 8 * result) = v5;
    uint64_t v11 = (void *)(v4[7] + 16 * result);
    *uint64_t v11 = v6;
    v11[1] = v7;
    uint64_t v12 = v4[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      break;
    }
    v4[2] = v14;
    if (!--v2) {
      goto LABEL_8;
    }
    uint64_t v15 = v10 + 3;
    uint64_t v5 = *(v10 - 2);
    uint64_t v6 = *(v10 - 1);
    uint64_t v16 = *v10;
    swift_bridgeObjectRetain();
    unint64_t result = sub_21F78C550(v5);
    uint64_t v10 = v15;
    uint64_t v7 = v16;
    if (v17) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_21F936D28(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  sub_21F76CA40(&qword_26AD4A450);
  uint64_t v3 = (void *)sub_21FA267C0();
  unsigned __int8 v4 = *(unsigned char *)(a1 + 32);
  char v5 = *(unsigned char *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  unint64_t result = sub_21F75BD50(v4);
  if (v9)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v10 = (void *)(a1 + 88);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v3[6] + result) = v4;
    uint64_t v11 = v3[7] + 24 * result;
    *(unsigned char *)uint64_t v11 = v5 & 1;
    *(void *)(v11 + 8) = v7;
    *(void *)(v11 + 16) = v6;
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      break;
    }
    v3[2] = v14;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v15 = v10 + 4;
    unsigned __int8 v4 = *((unsigned char *)v10 - 24);
    char v5 = *((unsigned char *)v10 - 16);
    uint64_t v16 = *(v10 - 1);
    uint64_t v17 = *v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_21F75BD50(v4);
    uint64_t v10 = v15;
    uint64_t v6 = v17;
    uint64_t v7 = v16;
    if (v18) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_21F936E60(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_21F76CA40(&qword_26AD46308);
    uint64_t v3 = (void *)sub_21FA267C0();
    for (uint64_t i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      uint64_t v5 = *(i - 1);
      uint64_t v6 = *i;
      unint64_t result = sub_21F78C550(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v9 = 8 * result;
      *(void *)(v3[6] + v9) = v5;
      *(void *)(v3[7] + v9) = v6;
      uint64_t v10 = v3[2];
      BOOL v11 = __OFADD__(v10, 1);
      uint64_t v12 = v10 + 1;
      if (v11) {
        goto LABEL_10;
      }
      v3[2] = v12;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

unint64_t sub_21F936F3C(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  sub_21F76CA40(&qword_26AD441E0);
  uint64_t v3 = (void *)sub_21FA267C0();
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t result = sub_21F91597C(v4, v5);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v9 = a1 + 9;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v10 = v4;
    v10[1] = v5;
    *(void *)(v3[7] + 8 * result) = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v14 = v9 + 3;
    uint64_t v4 = *(v9 - 2);
    uint64_t v5 = *(v9 - 1);
    uint64_t v15 = *v9;
    swift_bridgeObjectRetain();
    unint64_t result = sub_21F91597C(v4, v5);
    uint64_t v9 = v14;
    uint64_t v6 = v15;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_21F937054(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_21F76CA40(qword_267EE7DF0);
    uint64_t v3 = (void *)sub_21FA267C0();
    for (uint64_t i = (double *)(a1 + 48); ; i += 3)
    {
      double v5 = *(i - 2);
      double v6 = *(i - 1);
      double v7 = *i;
      unint64_t result = sub_21F916290(v5, v6);
      if (v9) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v10 = (double *)(v3[6] + 16 * result);
      *uint64_t v10 = v5;
      v10[1] = v6;
      *(double *)(v3[7] + 8 * result) = v7;
      uint64_t v11 = v3[2];
      BOOL v12 = __OFADD__(v11, 1);
      uint64_t v13 = v11 + 1;
      if (v12) {
        goto LABEL_10;
      }
      v3[2] = v13;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

unint64_t sub_21F937134(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_21F76CA40(&qword_26AD462F0);
    uint64_t v3 = (void *)sub_21FA267C0();
    for (uint64_t i = (_OWORD *)(a1 + 80); ; i += 4)
    {
      unsigned __int8 v5 = *((unsigned char *)i - 48);
      char v6 = *((unsigned char *)i - 40);
      uint64_t v7 = *((void *)i - 2);
      uint64_t v8 = *((void *)i - 1);
      long long v15 = *i;
      long long v16 = *(i - 2);
      unint64_t result = sub_21F75BD50(v5);
      if (v10) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(unsigned char *)(v3[6] + result) = v5;
      uint64_t v11 = v3[7] + 56 * result;
      *(unsigned char *)uint64_t v11 = v6;
      *(_OWORD *)(v11 + 8) = v16;
      *(void *)(v11 + 24) = v7;
      *(void *)(v11 + 32) = v8;
      *(_OWORD *)(v11 + 40) = v15;
      uint64_t v12 = v3[2];
      BOOL v13 = __OFADD__(v12, 1);
      uint64_t v14 = v12 + 1;
      if (v13) {
        goto LABEL_10;
      }
      v3[2] = v14;
      swift_bridgeObjectRetain();
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

uint64_t sub_21F937260(uint64_t a1, void (*a2)(uint64_t, __n128))
{
  uint64_t v17 = MEMORY[0x263F8EE78];
  sub_21F7A2638(0, 0, 0);
  uint64_t v4 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a1 + 32;
    do
    {
      a2(v5, *(__n128 *)(v6 + 16 * v5));
      unint64_t v11 = *(void *)(v17 + 16);
      unint64_t v10 = *(void *)(v17 + 24);
      if (v11 >= v10 >> 1)
      {
        long long v15 = v8;
        long long v16 = v7;
        long long v14 = v9;
        sub_21F7A2638((char *)(v10 > 1), v11 + 1, 1);
        long long v9 = v14;
        long long v8 = v15;
        long long v7 = v16;
      }
      ++v5;
      *(void *)(v17 + 16) = v11 + 1;
      uint64_t v12 = (_OWORD *)(v17 + 48 * v11);
      v12[2] = v7;
      v12[3] = v8;
      v12[4] = v9;
    }
    while (v4 != v5);
  }
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t sub_21F937378(double a1, double a2)
{
  double v2 = a1 / a2;
  if ((~*(void *)&v2 & 0x7FF0000000000000) == 0) {
    return 0;
  }
  double v4 = floor(v2);
  if ((~*(void *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 9.22337204e18) {
    return (uint64_t)v4;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_21F9373DC(uint64_t a1)
{
  unint64_t v1 = MEMORY[0x263F8EE78];
  v156 = (void *)MEMORY[0x263F8EE78];
  v157 = (void *)MEMORY[0x263F8EE78];
  double v2 = *(void **)(a1 + 16);
  if (v2)
  {
    unint64_t v1 = a1 + 32;
    uint64_t v3 = MEMORY[0x263F8EE78];
    uint64_t v4 = MEMORY[0x263F8EE78];
    while (1)
    {
      MEMORY[0x270FA5388](a1);
      uint64_t v5 = swift_bridgeObjectRetain();
      uint64_t v6 = sub_21F937260(v5, (void (*)(uint64_t, __n128))sub_21F9382A8);
      swift_bridgeObjectRelease();
      uint64_t v7 = v157[2];
      uint64_t v8 = *(void *)(v6 + 16);
      uint64_t v9 = v7 + v8;
      if (__OFADD__(v7, v8)) {
        break;
      }
      if (v9 < v7) {
        goto LABEL_164;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = (uint64_t)sub_21F7E929C(0, *(void *)(v4 + 16) + 1, 1, (char *)v4);
      }
      uint64_t v10 = v4;
      unint64_t v11 = *(void *)(v4 + 16);
      uint64_t v12 = (char *)v10;
      unint64_t v13 = *(void *)(v10 + 24);
      if (v11 >= v13 >> 1) {
        uint64_t v12 = sub_21F7E929C((char *)(v13 > 1), v11 + 1, 1, v12);
      }
      *((void *)v12 + 2) = v11 + 1;
      long long v14 = &v12[16 * v11];
      uint64_t v4 = (uint64_t)v12;
      *((void *)v14 + 4) = v7;
      *((void *)v14 + 5) = v9;
      sub_21F9ED784(v6);
      a1 = sub_21F9ED870(v8, v3);
      v1 += 8;
      double v2 = (void *)((char *)v2 - 1);
      if (!v2)
      {
        double v2 = v157;
        unint64_t v1 = MEMORY[0x263F8EE78];
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
  }
  else
  {
    double v2 = (void *)MEMORY[0x263F8EE78];
    uint64_t v4 = MEMORY[0x263F8EE78];
LABEL_12:
    uint64_t v15 = swift_bridgeObjectRetain();
    uint64_t v16 = sub_21F9C3580(v15);
    swift_bridgeObjectRelease();
    uint64_t v17 = *(void *)(v16 + 16);
    uint64_t v130 = v4;
    v131 = v2;
    if (!v17)
    {
      swift_bridgeObjectRelease();
LABEL_32:
      if (qword_26AD46270 == -1) {
        goto LABEL_33;
      }
      goto LABEL_172;
    }
    char v18 = v156;
    double v2 = (void *)(v16 + 56);
    while (1)
    {
      uint64_t v4 = *(v2 - 3);
      unint64_t v1 = *(v2 - 2);
      uint64_t v20 = *(v2 - 1);
      uint64_t v19 = *v2;
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        if (v4 < 0) {
          goto LABEL_165;
        }
      }
      else
      {
        char v18 = sub_21F935354(v18);
        if (v4 < 0) {
          goto LABEL_165;
        }
      }
      if ((unint64_t)v4 >= v18[2]) {
        goto LABEL_166;
      }
      double v21 = v18 + 4;
      float64x2_t v22 = (char *)v18[v4 + 4];
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v18[v4 + 4] = v22;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        float64x2_t v22 = sub_21F7E8F4C(0, *((void *)v22 + 2) + 1, 1, v22);
        v21[v4] = v22;
      }
      unint64_t v25 = *((void *)v22 + 2);
      unint64_t v24 = *((void *)v22 + 3);
      if (v25 >= v24 >> 1)
      {
        float64x2_t v22 = sub_21F7E8F4C((char *)(v24 > 1), v25 + 1, 1, v22);
        v21[v4] = v22;
      }
      *((void *)v22 + 2) = v25 + 1;
      *(void *)&v22[8 * v25 + 32] = v20;
      if ((v1 & 0x8000000000000000) != 0) {
        break;
      }
      if (v1 >= v18[2]) {
        goto LABEL_168;
      }
      unint64_t v26 = (char *)v21[v1];
      char v27 = swift_isUniquelyReferenced_nonNull_native();
      v21[v1] = v26;
      if ((v27 & 1) == 0)
      {
        unint64_t v26 = sub_21F7E8F4C(0, *((void *)v26 + 2) + 1, 1, v26);
        v21[v1] = v26;
      }
      unint64_t v29 = *((void *)v26 + 2);
      unint64_t v28 = *((void *)v26 + 3);
      if (v29 >= v28 >> 1)
      {
        unint64_t v26 = sub_21F7E8F4C((char *)(v28 > 1), v29 + 1, 1, v26);
        v21[v1] = v26;
      }
      *((void *)v26 + 2) = v29 + 1;
      *(void *)&v26[8 * v29 + 32] = v19;
      v2 += 4;
      if (!--v17)
      {
        swift_bridgeObjectRelease();
        v156 = v18;
        uint64_t v4 = v130;
        double v2 = v131;
        unint64_t v1 = MEMORY[0x263F8EE78];
        goto LABEL_32;
      }
    }
  }
  __break(1u);
LABEL_168:
  __break(1u);
LABEL_169:
  __break(1u);
  while (2)
  {
    __break(1u);
LABEL_171:
    __break(1u);
LABEL_172:
    swift_once();
LABEL_33:
    uint64_t v139 = qword_26AD52218;
    unint64_t v30 = sub_21F936F3C((void *)v1);
    double v152 = *(double *)&v139;
    double v153 = 0.01;
    v154 = (char *)v1;
    unint64_t v155 = v30;
    uint64_t v124 = *(void *)(v4 + 16);
    if (!v124)
    {
      unint64_t v111 = v30;
      uint64_t v112 = (const double *)&qword_21FA2E790;
      float64x2_t v113 = vld1q_dup_f64(v112);
      *(void *)&v113.f64[0] = v139;
      unint64_t v114 = v1;
      uint64_t v115 = (void *)v1;
LABEL_158:
      v142 = v115;
      float64x2_t v143 = v113;
      uint64_t v144 = v114;
      unint64_t v145 = v111;
      unint64_t v146 = v1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_21F934458();
      sub_21F934B10();
      uint64_t v116 = sub_21F933F7C();
      v117 = sub_21F9324FC(v116, (uint64_t)&v152);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v117;
    }
    unint64_t v31 = (unint64_t)&v152;
    unint64_t v32 = v2 + 4;
    uint64_t v33 = v156;
    uint64_t v127 = v156 + 4;
    uint64_t v34 = v4 + 32;
    swift_bridgeObjectRetain();
    unint64_t v35 = 0;
    uint64_t v119 = (void *)v1;
    uint64_t v120 = v4 + 32;
    uint64_t v122 = v33;
    while (1)
    {
      if (v35 >= *(void *)(v4 + 16))
      {
        __break(1u);
LABEL_174:
        __break(1u);
LABEL_175:
        __break(1u);
LABEL_176:
        __break(1u);
LABEL_177:
        __break(1u);
LABEL_178:
        __break(1u);
LABEL_179:
        __break(1u);
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        __break(1u);
LABEL_184:
        __break(1u);
        goto LABEL_185;
      }
      char v36 = (double *)(v34 + 16 * v35);
      float64_t v37 = *v36;
      if ((*(void *)v36 & 0x8000000000000000) != 0) {
        goto LABEL_174;
      }
      unint64_t v38 = *((void *)v36 + 1);
      unint64_t v39 = v2[2];
      if (v39 < *(void *)&v37 || (uint64_t)v39 < (uint64_t)v38) {
        goto LABEL_175;
      }
      if ((v38 & 0x8000000000000000) != 0) {
        goto LABEL_176;
      }
      unint64_t v41 = v33[2];
      if (v41 < *(void *)&v37 || v41 < v38) {
        goto LABEL_177;
      }
      unint64_t v125 = v35;
      uint64_t v43 = (2 * v38) | 1;
      uint64_t v132 = swift_allocObject();
      *(void *)(v132 + 16) = v1;
      v133 = (char **)(v132 + 16);
      v142 = v2;
      *(void *)&v143.f64[0] = v32;
      v143.f64[1] = v37;
      uint64_t v144 = v43;
      unint64_t v145 = *(void *)&v37;
      unint64_t v146 = (unint64_t)v33;
      v147 = v127;
      float64_t v148 = v37;
      uint64_t v149 = v43;
      float64_t v150 = v37;
      char v151 = 0;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      sub_21F933594(v158);
      sub_21F76C9DC((uint64_t)v158, (uint64_t)v159, &qword_26AD441D8);
      long long v44 = v160;
      if (v160) {
        break;
      }
LABEL_141:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_beginAccess();
      float64x2_t v105 = *v133;
      unint64_t v106 = *((void *)*v133 + 2);
      if (!v106) {
        goto LABEL_152;
      }
      uint64_t v33 = v122;
      unint64_t v107 = v125;
      if (*((void *)v105 + 4) == *(void *)&v105[8 * v106 + 24])
      {
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v108 = *((void *)v105 + 2);
          if (!v108) {
            goto LABEL_196;
          }
        }
        else
        {
          float64x2_t v105 = sub_21F935340((uint64_t)v105);
          uint64_t v108 = *((void *)v105 + 2);
          if (!v108) {
            goto LABEL_196;
          }
        }
        *((void *)v105 + 2) = v108 - 1;
        *v133 = v105;
        unint64_t v106 = *((void *)v105 + 2);
      }
      if (v106 >= 3)
      {
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v119 = sub_21F7E8F38(0, v119[2] + 1, 1, v119);
        }
        unint64_t v110 = v119[2];
        unint64_t v109 = v119[3];
        if (v110 >= v109 >> 1) {
          uint64_t v119 = sub_21F7E8F38((void *)(v109 > 1), v110 + 1, 1, v119);
        }
        v119[2] = v110 + 1;
        v119[v110 + 4] = v105;
LABEL_152:
        uint64_t v33 = v122;
        unint64_t v107 = v125;
      }
      unint64_t v35 = v107 + 1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v34 = v120;
      if (v35 == v124) {
        goto LABEL_162;
      }
    }
    uint64_t v121 = v32;
    while (1)
    {
      float64x2_t v129 = v159[1];
      float64x2_t v138 = v159[0];
      uint64_t v45 = sub_21F933AB0(v159[0]);
      sub_21F933E80(v45, v132);
      v141 = v44;
      swift_bridgeObjectRetain();
      sub_21F933894(&v141);
      sub_21F938318((uint64_t)v158);
      uint64_t v126 = *((void *)v141 + 2);
      if (v126) {
        break;
      }
LABEL_140:
      swift_release();
      uint64_t v104 = sub_21F933AB0(v129);
      sub_21F933E80(v104, v132);
      sub_21F933594(v158);
      sub_21F76C9DC((uint64_t)v158, (uint64_t)v159, &qword_26AD441D8);
      long long v44 = v160;
      if (!v160) {
        goto LABEL_141;
      }
    }
    uint64_t v46 = v141 + 32;
    float64x2_t v137 = vsubq_f64(v129, v138);
    swift_beginAccess();
    float64x2_t v48 = v137;
    float64x2_t v47 = v138;
    uint64_t v49 = 0;
    uint64_t v123 = v46;
    while (1)
    {
      float64x2_t v50 = vaddq_f64(v47, vmulq_n_f64(v48, *(double *)&v46[8 * v49]));
      double v51 = v152;
      double v52 = v153;
      uint64_t v54 = v154;
      unint64_t v53 = v155;
      float64x2_t v140 = v50;
      double v55 = v50.f64[0] / v153;
      if ((~*(void *)&v55 & 0x7FF0000000000000) != 0)
      {
        double v57 = floor(v55);
        if ((~*(void *)&v57 & 0x7FF0000000000000) == 0) {
          goto LABEL_178;
        }
        if (v57 <= -9.22337204e18) {
          goto LABEL_179;
        }
        if (v57 >= 9.22337204e18) {
          goto LABEL_181;
        }
        uint64_t v56 = (uint64_t)v57;
      }
      else
      {
        uint64_t v56 = 0;
      }
      if ((~COERCE__INT64(v140.f64[1] / v153) & 0x7FF0000000000000) != 0)
      {
        double v59 = floor(v140.f64[1] / v153);
        if ((~*(void *)&v59 & 0x7FF0000000000000) == 0) {
          goto LABEL_180;
        }
        if (v59 <= -9.22337204e18) {
          goto LABEL_182;
        }
        if (v59 >= 9.22337204e18) {
          goto LABEL_183;
        }
        uint64_t v58 = (uint64_t)v59;
      }
      else
      {
        uint64_t v58 = 0;
      }
      uint64_t v128 = v49;
      if (!*(void *)(v155 + 16)) {
        break;
      }
      unint64_t v60 = sub_21F91597C(v56, v58);
      if ((v61 & 1) == 0) {
        break;
      }
      uint64_t v62 = *(void *)(*(void *)(v53 + 56) + 8 * v60);
      uint64_t v63 = *(void *)(v62 + 16);
      if (!v63) {
        break;
      }
      uint64_t v64 = (float64x2_t *)(v62 + 48);
      while (1)
      {
        float64x2_t v65 = vsubq_f64(v140, v64[-1]);
        double v66 = fabs(v65.f64[0]);
        double v67 = fabs(v65.f64[1]);
        if (v66 < v51 && v67 < v51) {
          break;
        }
        v64 += 2;
        if (!--v63) {
          goto LABEL_72;
        }
      }
      float64_t v136 = v64->f64[0];
      unint64_t v1 = MEMORY[0x263F8EE78];
      double v2 = v131;
      float64x2_t v48 = v137;
      float64x2_t v47 = v138;
LABEL_130:
      uint64_t v99 = *v133;
      uint64_t v100 = *((void *)*v133 + 2);
      if (!v100 || *(void *)&v99[8 * v100 + 24] != *(void *)&v136)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v99 = sub_21F7E8CF8(0, *((void *)v99 + 2) + 1, 1, v99);
        }
        unint64_t v102 = *((void *)v99 + 2);
        unint64_t v101 = *((void *)v99 + 3);
        float64x2_t v48 = v137;
        float64x2_t v47 = v138;
        if (v102 >= v101 >> 1)
        {
          unint64_t v103 = sub_21F7E8CF8((char *)(v101 > 1), v102 + 1, 1, v99);
          float64x2_t v48 = v137;
          float64x2_t v47 = v138;
          uint64_t v99 = v103;
        }
        *((void *)v99 + 2) = v102 + 1;
        *(float64_t *)&v99[8 * v102 + 32] = v136;
        *v133 = v99;
        uint64_t v49 = v128;
      }
      ++v49;
      uint64_t v46 = v123;
      if (v49 == v126) {
        goto LABEL_140;
      }
    }
LABEL_72:
    float64_t v136 = *((double *)v54 + 2);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v54 = sub_21F7E86D8(0, *(void *)&v136 + 1, 1, v54);
    }
    unint64_t v70 = *((void *)v54 + 2);
    unint64_t v69 = *((void *)v54 + 3);
    if (v70 >= v69 >> 1) {
      uint64_t v54 = sub_21F7E86D8((char *)(v69 > 1), v70 + 1, 1, v54);
    }
    *((void *)v54 + 2) = v70 + 1;
    *(float64x2_t *)&v54[16 * v70 + 32] = v140;
    v154 = v54;
    double v71 = (v140.f64[0] - v51) / v52;
    if ((~*(void *)&v71 & 0x7FF0000000000000) == 0)
    {
      uint64_t v4 = 0;
      goto LABEL_82;
    }
    double v72 = floor(v71);
    if ((~*(void *)&v72 & 0x7FF0000000000000) == 0) {
      goto LABEL_184;
    }
    if (v72 <= -9.22337204e18)
    {
LABEL_185:
      __break(1u);
      goto LABEL_186;
    }
    if (v72 >= 9.22337204e18)
    {
LABEL_187:
      __break(1u);
      goto LABEL_188;
    }
    uint64_t v4 = (uint64_t)v72;
LABEL_82:
    double v73 = (v51 + v140.f64[0]) / v52;
    if ((~*(void *)&v73 & 0x7FF0000000000000) == 0)
    {
      uint64_t v74 = 0;
      goto LABEL_88;
    }
    double v75 = floor(v73);
    if ((~*(void *)&v75 & 0x7FF0000000000000) == 0)
    {
LABEL_186:
      __break(1u);
      goto LABEL_187;
    }
    if (v75 <= -9.22337204e18)
    {
LABEL_188:
      __break(1u);
      goto LABEL_189;
    }
    if (v75 >= 9.22337204e18)
    {
LABEL_189:
      __break(1u);
LABEL_190:
      __break(1u);
      goto LABEL_191;
    }
    uint64_t v74 = (uint64_t)v75;
LABEL_88:
    if (v74 < v4) {
      continue;
    }
    break;
  }
  if ((~COERCE__INT64((v140.f64[1] - v51) / v52) & 0x7FF0000000000000) == 0)
  {
    uint64_t v135 = 0;
    goto LABEL_95;
  }
  double v76 = floor((v140.f64[1] - v51) / v52);
  if ((~*(void *)&v76 & 0x7FF0000000000000) == 0) {
    goto LABEL_190;
  }
  if (v76 <= -9.22337204e18)
  {
LABEL_191:
    __break(1u);
    goto LABEL_192;
  }
  if (v76 >= 9.22337204e18)
  {
LABEL_193:
    __break(1u);
    goto LABEL_194;
  }
  uint64_t v135 = (uint64_t)v76;
LABEL_95:
  if ((~COERCE__INT64((v51 + v140.f64[1]) / v52) & 0x7FF0000000000000) == 0)
  {
    uint64_t v77 = 0;
LABEL_101:
    if (v77 < v135) {
      goto LABEL_171;
    }
    uint64_t v79 = 0;
    uint64_t v80 = (char *)v155;
    uint64_t v134 = v74;
LABEL_103:
    uint64_t v81 = v135;
    while (1)
    {
      sub_21F76D5D8((uint64_t)v79);
      char v82 = swift_isUniquelyReferenced_nonNull_native();
      v141 = v80;
      unint64_t v31 = sub_21F91597C(v4, v81);
      uint64_t v84 = *((void *)v80 + 2);
      BOOL v85 = (v83 & 1) == 0;
      uint64_t v86 = v84 + v85;
      if (__OFADD__(v84, v85)) {
        break;
      }
      char v87 = v83;
      if (*((void *)v80 + 3) >= v86)
      {
        if ((v82 & 1) == 0) {
          sub_21F879AAC();
        }
      }
      else
      {
        sub_21F86FB08(v86, v82);
        unint64_t v88 = sub_21F91597C(v4, v81);
        if ((v87 & 1) != (v89 & 1)) {
          goto LABEL_197;
        }
        unint64_t v31 = v88;
      }
      uint64_t v80 = v141;
      swift_bridgeObjectRelease();
      if (v87)
      {
        swift_bridgeObjectRetain();
      }
      else
      {
        *(void *)&v80[8 * (v31 >> 6) + 64] |= 1 << v31;
        uint64_t v90 = (uint64_t *)(*((void *)v80 + 6) + 16 * v31);
        *uint64_t v90 = v4;
        v90[1] = v81;
        *(void *)(*((void *)v80 + 7) + 8 * v31) = MEMORY[0x263F8EE78];
        uint64_t v91 = *((void *)v80 + 2);
        uint64_t v92 = v91 + 1;
        unint64_t v1 = __OFADD__(v91, 1);
        swift_bridgeObjectRetain();
        if (v1) {
          goto LABEL_161;
        }
        *((void *)v80 + 2) = v92;
      }
      double v2 = (void *)*((void *)v80 + 7);
      swift_bridgeObjectRelease();
      uint64_t v93 = (char *)v2[v31];
      char v94 = swift_isUniquelyReferenced_nonNull_native();
      v2[v31] = v93;
      if ((v94 & 1) == 0)
      {
        uint64_t v93 = sub_21F7E8C00(0, *((void *)v93 + 2) + 1, 1, v93);
        v2[v31] = v93;
      }
      unint64_t v1 = *((void *)v93 + 2);
      unint64_t v95 = *((void *)v93 + 3);
      float64x2_t v48 = v137;
      float64x2_t v47 = v138;
      if (v1 >= v95 >> 1)
      {
        uint64_t v98 = sub_21F7E8C00((char *)(v95 > 1), v1 + 1, 1, v93);
        float64x2_t v48 = v137;
        float64x2_t v47 = v138;
        uint64_t v93 = v98;
        v2[v31] = v98;
      }
      *((void *)v93 + 2) = v1 + 1;
      uint64_t v96 = &v93[32 * v1];
      *((float64x2_t *)v96 + 2) = v140;
      *((float64_t *)v96 + 6) = v136;
      if (v77 == v81)
      {
        if (v4 == v134)
        {
          unint64_t v155 = (unint64_t)v80;
          uint64_t v4 = v130;
          double v2 = v131;
          unint64_t v1 = MEMORY[0x263F8EE78];
          unint64_t v31 = (unint64_t)&v152;
          unint64_t v32 = v121;
          uint64_t v49 = v128;
          goto LABEL_130;
        }
        uint64_t v79 = sub_21F8FACCC;
        BOOL v97 = __OFADD__(v4++, 1);
        if (v97) {
          goto LABEL_169;
        }
        goto LABEL_103;
      }
      uint64_t v79 = sub_21F8FACCC;
      BOOL v97 = __OFADD__(v81++, 1);
      if (v97) {
        goto LABEL_160;
      }
    }
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    swift_bridgeObjectRelease();
    float64x2_t v113 = *(float64x2_t *)v31;
    unint64_t v114 = (unint64_t)v154;
    unint64_t v111 = v155;
    uint64_t v115 = v119;
    goto LABEL_158;
  }
  double v78 = floor((v51 + v140.f64[1]) / v52);
  if ((~*(void *)&v78 & 0x7FF0000000000000) == 0)
  {
LABEL_192:
    __break(1u);
    goto LABEL_193;
  }
  if (v78 <= -9.22337204e18)
  {
LABEL_194:
    __break(1u);
    goto LABEL_195;
  }
  if (v78 < 9.22337204e18)
  {
    uint64_t v77 = (uint64_t)v78;
    goto LABEL_101;
  }
LABEL_195:
  __break(1u);
LABEL_196:
  __break(1u);
LABEL_197:
  sub_21FA26990();
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_21F9382A8(uint64_t result)
{
  unint64_t v2 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  unint64_t v3 = *(void *)(*(void *)(v1 + 16) + 16);
  if ((uint64_t)v2 >= (uint64_t)v3) {
    unint64_t v2 = 0;
  }
  if (v2 >= v3) {
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_21F9382E0()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_21F938318(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F938344(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 216);
  uint64_t v3 = *(void *)(a1 + 224);
  uint64_t v4 = *(void *)(a1 + 232);
  uint64_t v5 = *(void *)(a1 + 240);
  uint64_t v15 = *(void *)(a1 + 248);
  uint64_t v6 = *(void *)(a1 + 256);
  uint64_t v7 = *(void *)(a1 + 264);
  uint64_t v8 = *(void *)(a1 + 272);
  uint64_t v23 = *(void *)(a1 + 288);
  uint64_t v24 = *(void *)(a1 + 280);
  unint64_t v21 = *(void *)(a1 + 304);
  uint64_t v22 = *(void *)(a1 + 296);
  uint64_t v19 = *(void *)(a1 + 320);
  uint64_t v20 = *(void *)(a1 + 312);
  uint64_t v17 = *(void *)(a1 + 336);
  uint64_t v18 = *(void *)(a1 + 328);
  long long v16 = *(_OWORD *)(a1 + 344);
  long long v13 = *(_OWORD *)(a1 + 376);
  long long v14 = *(_OWORD *)(a1 + 360);
  long long v11 = *(_OWORD *)(a1 + 408);
  long long v12 = *(_OWORD *)(a1 + 392);
  uint64_t v9 = *(void *)(a1 + 424);
  sub_21F7C6094(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(_OWORD *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(_OWORD *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144));
  swift_bridgeObjectRetain();
  sub_21F7BB3B4(v2, v3, v4, v5);
  sub_21F7BB3B4(v15, v6, v7, v8);
  sub_21F903C74(v24, v23, v22, v21, v20, v19, v18, v17, v16, *((uint64_t *)&v16 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_21F9384B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

ValueMetadata *_s7PolygonVMa()
{
  return &_s7PolygonVN;
}

uint64_t _s5GraphVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s5GraphVwcp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *_s5GraphVwca(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s5GraphVwta(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s5GraphVwet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s5GraphVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s5GraphVMa()
{
  return &_s5GraphVN;
}

uint64_t _s5GraphV4EdgeVwet(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t _s5GraphV4EdgeVwst(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 33) = v3;
  return result;
}

ValueMetadata *_s5GraphV4EdgeVMa()
{
  return &_s5GraphV4EdgeVN;
}

uint64_t _s10PointIndexVwcp(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *_s10PointIndexVwca(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *_s10PointIndexVwta(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s10PointIndexVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s10PointIndexVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s10PointIndexVMa()
{
  return &_s10PointIndexVN;
}

ValueMetadata *_s10PointIndexV7GridKeyVMa()
{
  return &_s10PointIndexV7GridKeyVN;
}

unint64_t sub_21F938990()
{
  unint64_t result = qword_26AD44B88;
  if (!qword_26AD44B88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD44B88);
  }
  return result;
}

ValueMetadata *type metadata accessor for PartialSpec()
{
  return &type metadata for PartialSpec;
}

uint64_t destroy for PartialSpec.Chart()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PartialSpec.Chart(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PartialSpec.Chart(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  return a1;
}

__n128 initializeWithTake for PartialSpec.Chart(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for PartialSpec.Chart(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  return a1;
}

uint64_t getEnumTagSinglePayload for PartialSpec.Chart(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 82)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PartialSpec.Chart(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 80) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 82) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 82) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PartialSpec.Chart()
{
  return &type metadata for PartialSpec.Chart;
}

uint64_t sub_21F938D30(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16))
  {
    int64_t v4 = 0;
    uint64_t v5 = a1 + 64;
    uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
    uint64_t v7 = -1;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    unint64_t v8 = v7 & *(void *)(a1 + 64);
    int64_t v9 = (unint64_t)(v6 + 63) >> 6;
    while (1)
    {
      if (v8)
      {
        unint64_t v10 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v11 = v10 | (v4 << 6);
      }
      else
      {
        int64_t v12 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
          goto LABEL_35;
        }
        if (v12 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v12);
        ++v4;
        if (!v13)
        {
          int64_t v4 = v12 + 1;
          if (v12 + 1 >= v9) {
            return 1;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v4);
          if (!v13)
          {
            int64_t v4 = v12 + 2;
            if (v12 + 2 >= v9) {
              return 1;
            }
            unint64_t v13 = *(void *)(v5 + 8 * v4);
            if (!v13)
            {
              int64_t v14 = v12 + 3;
              if (v14 >= v9) {
                return 1;
              }
              unint64_t v13 = *(void *)(v5 + 8 * v14);
              if (!v13)
              {
                while (1)
                {
                  int64_t v4 = v14 + 1;
                  if (__OFADD__(v14, 1)) {
                    break;
                  }
                  if (v4 >= v9) {
                    return 1;
                  }
                  unint64_t v13 = *(void *)(v5 + 8 * v4);
                  ++v14;
                  if (v13) {
                    goto LABEL_21;
                  }
                }
LABEL_35:
                __break(1u);
                JUMPOUT(0x21F938F3CLL);
              }
              int64_t v4 = v14;
            }
          }
        }
LABEL_21:
        unint64_t v8 = (v13 - 1) & v13;
        unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
      }
      uint64_t v15 = (unsigned __int8 *)(*(void *)(a1 + 48) + 56 * v11);
      uint64_t v16 = *((void *)v15 + 1);
      uint64_t v17 = *((void *)v15 + 2);
      uint64_t v18 = *((void *)v15 + 4);
      uint64_t v19 = *((void *)v15 + 5);
      uint64_t v20 = (double *)(*(void *)(a1 + 56) + 16 * v11);
      double v22 = *v20;
      double v21 = v20[1];
      uint64_t v23 = 256;
      if (!v15[1]) {
        uint64_t v23 = 0;
      }
      uint64_t v24 = v23 | *v15;
      if (v15[2]) {
        uint64_t v25 = 0x10000;
      }
      else {
        uint64_t v25 = 0;
      }
      unsigned __int8 v26 = v15[24];
      char v27 = v15[48];
      *(void *)&v34[0] = v24 | v25;
      *(void *)&v34[1] = v16;
      *(void *)&v34[2] = v17;
      *(void *)&v34[3] = v26;
      *(void *)&v34[4] = v18;
      *(void *)&v34[5] = v19;
      char v35 = v27;
      sub_21F770E44(v16, v17, v26);
      sub_21F770E64(v18, v19, v27);
      unint64_t v28 = sub_21F771070(v34);
      char v30 = v29;
      sub_21F939CF0((uint64_t)v34);
      if (v30)
      {
        unint64_t v31 = (double *)(*(void *)(a2 + 56) + 16 * v28);
        if (*v31 == v22 && v31[1] == v21) {
          continue;
        }
      }
      return 0;
    }
  }
  return 0;
}

uint64_t sub_21F938F90(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13)
        {
          int64_t v4 = v12 + 3;
          if (v12 + 3 >= v9) {
            return 1;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v4);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    uint64_t v15 = *(void *)(*(void *)(v3 + 56) + 8 * v11);
    unint64_t v16 = sub_21F75BD50(*(unsigned char *)(*(void *)(v3 + 48) + v11));
    if (v17)
    {
      __n128 result = sub_21F7D4550(*(void *)(*(void *)(a2 + 56) + 8 * v16), v15);
      if (result) {
        continue;
      }
    }
    return 0;
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_23;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_21F939114(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v19 = result + 64;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v4 << 6);
LABEL_8:
      uint64_t v11 = *(void *)(v3 + 56);
      LOBYTE(v21[0]) = *(unsigned char *)(*(void *)(v3 + 48) + v10);
      sub_21F7F3EA0(v11 + 48 * v10, (uint64_t)v21 + 8);
      goto LABEL_30;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v12 < v8)
    {
      unint64_t v13 = *(void *)(v19 + 8 * v12);
      if (v13) {
        goto LABEL_12;
      }
      int64_t v14 = v4 + 2;
      ++v4;
      if (v12 + 1 < v8)
      {
        unint64_t v13 = *(void *)(v19 + 8 * v14);
        if (v13) {
          goto LABEL_15;
        }
        int64_t v4 = v12 + 1;
        if (v12 + 2 < v8)
        {
          unint64_t v13 = *(void *)(v19 + 8 * (v12 + 2));
          if (v13)
          {
            v12 += 2;
            goto LABEL_12;
          }
          int64_t v4 = v12 + 2;
          if (v12 + 3 < v8)
          {
            unint64_t v13 = *(void *)(v19 + 8 * (v12 + 3));
            if (v13)
            {
              v12 += 3;
              goto LABEL_12;
            }
            int64_t v14 = v12 + 4;
            int64_t v4 = v12 + 3;
            if (v12 + 4 < v8) {
              break;
            }
          }
        }
      }
    }
LABEL_29:
    unint64_t v7 = 0;
    memset(v21, 0, sizeof(v21));
    char v22 = -1;
LABEL_30:
    sub_21F76C9DC((uint64_t)v21, (uint64_t)v23, &qword_26AD46C08);
    if (v24[40] == 255) {
      return 1;
    }
    unsigned __int8 v15 = v23[0];
    sub_21F7F3E44((uint64_t)v24, (uint64_t)v21);
    unint64_t v16 = sub_21F75BD50(v15);
    if ((v17 & 1) == 0)
    {
      sub_21F7F3CCC((uint64_t)v21);
      return 0;
    }
    sub_21F7F3EA0(*(void *)(a2 + 56) + 48 * v16, (uint64_t)v20);
    char v18 = sub_21F9FA16C((uint64_t)v20, (uint64_t)v21);
    sub_21F7F3CCC((uint64_t)v20);
    __n128 result = sub_21F7F3CCC((uint64_t)v21);
    if ((v18 & 1) == 0) {
      return 0;
    }
  }
  unint64_t v13 = *(void *)(v19 + 8 * v14);
  if (v13)
  {
LABEL_15:
    int64_t v12 = v14;
LABEL_12:
    unint64_t v7 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v12 << 6);
    int64_t v4 = v12;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v12 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v12 >= v8)
    {
      int64_t v4 = v8 - 1;
      goto LABEL_29;
    }
    unint64_t v13 = *(void *)(v19 + 8 * v12);
    ++v14;
    if (v13) {
      goto LABEL_12;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

BOOL sub_21F939394(uint64_t a1, uint64_t a2)
{
  return sub_21F939D44(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

BOOL sub_21F9393AC(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 8) == *(unsigned __int8 *)(a1 + 8) && *(void *)a1 == *(void *)a2;
}

uint64_t sub_21F9393CC(uint64_t a1, uint64_t a2)
{
  return sub_21F9398F4(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(unsigned char *)(a2 + 24));
}

BOOL sub_21F9393F0(uint64_t a1, uint64_t a2)
{
  return sub_21F93997C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_WORD *)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(_WORD *)(a2 + 24));
}

uint64_t sub_21F939414(uint64_t a1, uint64_t a2)
{
  return sub_21F9397A4(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

BOOL sub_21F939430(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  char v8 = *(unsigned char *)(a1 + 64);
  long long v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  char v10 = *(unsigned char *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_21F939A6C((uint64_t)v7, (uint64_t)v9);
}

uint64_t sub_21F93948C(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  _OWORD v7[4] = *(_OWORD *)(a1 + 64);
  __int16 v8 = *(_WORD *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  _OWORD v9[4] = *(_OWORD *)(a2 + 64);
  __int16 v10 = *(_WORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_21F7984D8((uint64_t)v7, (uint64_t)v9) & 1;
}

uint64_t sub_21F9394F8()
{
  return sub_21FA26A50();
}

uint64_t sub_21F939564()
{
  return sub_21FA26A50();
}

uint64_t sub_21F9395C4()
{
  return sub_21FA26A10();
}

uint64_t sub_21F939604()
{
  return sub_21FA26A50();
}

uint64_t sub_21F939660()
{
  return sub_21F9394F8();
}

uint64_t sub_21F939680()
{
  return sub_21FA26A20();
}

uint64_t sub_21F9396CC()
{
  return sub_21FA26A50();
}

uint64_t sub_21F939738(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  int v4 = *((unsigned __int8 *)a2 + 8);
  if (*((unsigned char *)a1 + 8))
  {
    if (*((unsigned char *)a1 + 8) == 1)
    {
      if (v4 != 1 || v2 != v3) {
        return 0;
      }
    }
    else if (v4 != 2 || v2 != v3)
    {
      return 0;
    }
  }
  else
  {
    if (*((unsigned char *)a2 + 8)) {
      BOOL v7 = 0;
    }
    else {
      BOOL v7 = v2 == v3;
    }
    if (!v7) {
      return 0;
    }
  }
  return *((unsigned __int8 *)a1 + 9) ^ *((unsigned __int8 *)a2 + 9) ^ 1u;
}

uint64_t sub_21F9397A4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a3)
  {
    case 1:
      BOOL v9 = a6 == 1;
      goto LABEL_22;
    case 2:
      BOOL v9 = a6 == 2;
      goto LABEL_22;
    case 3:
      BOOL v9 = a6 == 3;
      goto LABEL_22;
    case 4:
      BOOL v9 = a6 == 4;
      goto LABEL_22;
    case 5:
      BOOL v9 = a6 == 5;
      goto LABEL_22;
    case 6:
      BOOL v9 = a6 == 6;
LABEL_22:
      uint64_t result = v9 && a1 == a4;
      break;
    case 7:
      if (a6 == 7)
      {
        switch((char)a2)
        {
          case 1:
            if (a5 != 1 || a1 != a4) {
              goto LABEL_37;
            }
            uint64_t result = 1;
            break;
          case 2:
            if (a5 != 2 || a1 != a4) {
              goto LABEL_37;
            }
            uint64_t result = 1;
            break;
          case 3:
            if (a5 != 3 || a1 != a4) {
              goto LABEL_37;
            }
            uint64_t result = 1;
            break;
          default:
            if ((_BYTE)a5 || a1 != a4) {
              goto LABEL_37;
            }
            uint64_t result = 1;
            break;
        }
      }
      else
      {
LABEL_37:
        uint64_t result = 0;
      }
      break;
    default:
      if (a6) {
        BOOL v6 = 0;
      }
      else {
        BOOL v6 = a1 == a4;
      }
      uint64_t result = v6 && a2 == a5;
      break;
  }
  return result;
}

uint64_t sub_21F9398F4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t result = 0;
  if (a1 == a5 && a2 == a6)
  {
    if (a4 == -1)
    {
      if (a8 == -1) {
        return 1;
      }
    }
    else if (a8 != -1)
    {
      if (a4)
      {
        if (a4 == 1)
        {
          if (a8 != 1) {
            return 0;
          }
        }
        else if (a8 != 2)
        {
          return 0;
        }
      }
      else if (a8)
      {
        return 0;
      }
      if (a3 == a7) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

BOOL sub_21F93997C(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7, __int16 a8)
{
  switch(HIBYTE(a4))
  {
    case 1:
      BOOL v8 = HIBYTE(a8) == 1;
      return v8 && a1 == a5;
    case 2:
      BOOL v8 = HIBYTE(a8) == 2;
      return v8 && a1 == a5;
    case 3:
      if (HIBYTE(a8) != 3 || a1 != a5 || a2 != a6) {
        return 0;
      }
      if (a4 == 255) {
        return a8 == 255;
      }
      if (a8 == 255) {
        return 0;
      }
      if ((_BYTE)a4)
      {
        if (a4 == 1) {
          return a8 == 1 && a3 == a7;
        }
        return a8 == 2 && a3 == a7;
      }
      else
      {
        return !(_BYTE)a8 && a3 == a7;
      }
    default:
      BOOL v8 = HIBYTE(a8) == 0;
      return v8 && a1 == a5;
  }
}

BOOL sub_21F939A6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a2 + 8);
  if (v2 == 255)
  {
    if (v3 != 255) {
      return 0;
    }
  }
  else
  {
    if (v3 == 255) {
      return 0;
    }
    double v4 = *(double *)a1;
    double v5 = *(double *)a2;
    if (*(unsigned char *)(a1 + 8))
    {
      if (v2 != 1)
      {
        switch(*(void *)&v4)
        {
          case 1:
            uint64_t v2 = 0;
            if (v3 == 2 && *(void *)&v5 == 1) {
              goto LABEL_11;
            }
            break;
          case 2:
            uint64_t v2 = 0;
            if (v3 == 2 && *(void *)&v5 == 2) {
              goto LABEL_11;
            }
            break;
          case 3:
            uint64_t v2 = 0;
            if (v3 == 2 && *(void *)&v5 == 3) {
              goto LABEL_11;
            }
            break;
          case 4:
            uint64_t v2 = 0;
            if (v3 == 2 && *(void *)&v5 == 4) {
              goto LABEL_11;
            }
            break;
          default:
            uint64_t v2 = 0;
            if (v3 == 2 && v5 == 0.0) {
              goto LABEL_11;
            }
            break;
        }
        return v2;
      }
      uint64_t v2 = 0;
      if (v3 != 1) {
        return v2;
      }
    }
    else if (*(unsigned char *)(a2 + 8))
    {
      return v2;
    }
    if (v4 != v5) {
      return v2;
    }
  }
LABEL_11:
  unsigned int v6 = *(unsigned __int16 *)(a1 + 40);
  unsigned int v7 = *(unsigned __int16 *)(a2 + 40);
  if (v6 >> 8 > 0xFE)
  {
    if (v7 >> 8 <= 0xFE) {
      return 0;
    }
LABEL_26:
    int v12 = *(unsigned __int8 *)(a1 + 64);
    int v13 = *(unsigned __int8 *)(a2 + 64);
    if (v12 != 255) {
      return v13 != 255
    }
          && (sub_21F9397A4(*(void *)(a1 + 48), *(void *)(a1 + 56), v12, *(void *)(a2 + 48), *(void *)(a2 + 56), v13) & 1) != 0;
    return v13 == 255;
  }
  unsigned int v8 = v7 >> 8;
  if (v7 >> 8 > 0xFE) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a2 + 16);
  int v11 = *(_WORD *)(a2 + 40);
  switch(v6 >> 8)
  {
    case 1u:
      uint64_t v2 = 0;
      if (v8 == 1) {
        goto LABEL_25;
      }
      break;
    case 2u:
      uint64_t v2 = 0;
      if (v8 == 2) {
        goto LABEL_25;
      }
      break;
    case 3u:
      if (v8 != 3) {
        return 0;
      }
      uint64_t v2 = 0;
      if (v9 == v10 && *(void *)(a1 + 24) == *(void *)(a2 + 24))
      {
        if ((_BYTE)v6 == 0xFF)
        {
          if (v11 == 255) {
            goto LABEL_26;
          }
          return 0;
        }
        if (v11 == 255) {
          return 0;
        }
        uint64_t v2 = *(_WORD *)(a1 + 40);
        if (*(_WORD *)(a1 + 40))
        {
          if (v2 == 1)
          {
            uint64_t v2 = 0;
            if (v11 != 1) {
              return v2;
            }
          }
          else
          {
            uint64_t v2 = 0;
            if (v11 != 2) {
              return v2;
            }
          }
        }
        else if (*(_WORD *)(a2 + 40))
        {
          return v2;
        }
        if (*(void *)(a1 + 32) == *(void *)(a2 + 32)) {
          goto LABEL_26;
        }
      }
      break;
    default:
      uint64_t v2 = 0;
      if ((v7 & 0xFF00) == 0)
      {
LABEL_25:
        if (v9 == v10) {
          goto LABEL_26;
        }
      }
      break;
  }
  return v2;
}

uint64_t sub_21F939CF0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  char v4 = *(unsigned char *)(a1 + 48);
  sub_21F770E38(*(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
  sub_21F770E50(v2, v3, v4);
  return a1;
}

BOOL sub_21F939D44(uint64_t a1, char a2, uint64_t a3, char a4)
{
  return a4 == a2 && a1 == a3;
}

uint64_t sub_21F939D58(unint64_t a1, uint64_t a2, void *a3, double a4)
{
  uint64_t v13 = sub_21F76CA40(&qword_26AD47790);
  int64_t v14 = &off_26D1331C0;
  *(double *)&long long v12 = a4;
  a3[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a3[6] + 8 * a1) = a2;
  uint64_t result = sub_21F77F300(&v12, a3[7] + 40 * a1);
  uint64_t v9 = a3[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a3[2] = v11;
  }
  return result;
}

uint64_t sub_21F939E04(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v15 = sub_21F76CA40(&qword_267EE8AF8);
  unint64_t v16 = &off_26D1331C0;
  *(void *)&long long v14 = a3;
  *((void *)&v14 + 1) = a4;
  a5[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a5[6] + 8 * a1) = a2;
  uint64_t result = sub_21F77F300(&v14, a5[7] + 40 * a1);
  uint64_t v11 = a5[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a5[2] = v13;
  }
  return result;
}

uint64_t sub_21F939EB4(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v15 = sub_21F76CA40(qword_26AD44200);
  unint64_t v16 = &off_26D1331C0;
  uint64_t v8 = swift_allocObject();
  *(void *)&long long v14 = v8;
  long long v9 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)a3;
  *(_OWORD *)(v8 + 32) = v9;
  *(void *)(v8 + 48) = *(void *)(a3 + 32);
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_21F77F300(&v14, a4[7] + 40 * a1);
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_21F939F7C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v14 = sub_21F76CA40(&qword_26AD46970);
  uint64_t v15 = &off_26D1331C0;
  uint64_t v8 = sub_21F77E8F8((uint64_t *)&v13);
  sub_21F76C9DC(a3, (uint64_t)v8, &qword_26AD46970);
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_21F77F300(&v13, a4[7] + 40 * a1);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

uint64_t sub_21F93A040(unint64_t a1, uint64_t a2, char a3, void *a4, uint64_t *a5)
{
  uint64_t v14 = sub_21F76CA40(a5);
  uint64_t v15 = &off_26D1331C0;
  LOBYTE(v13) = a3;
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_21F77F300(&v13, a4[7] + 40 * a1);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

uint64_t sub_21F93A0E0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v10 = sub_21F76CA40(&qword_267EE8AF8);
  uint64_t v31 = v10;
  unint64_t v32 = &off_26D1331C0;
  *(void *)&long long v30 = a1;
  *((void *)&v30 + 1) = a2;
  BOOL v11 = (void *)*a5;
  unint64_t v13 = sub_21F77E624(a3);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= v16 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v19 = (void *)*a5;
    if (v17)
    {
LABEL_8:
      uint64_t v20 = v19[7] + 40 * v13;
      _s6Charts15AnyChartContentVwxx_0(v20);
      return sub_21F77F300(&v30, v20);
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a4 & 1) == 0)
  {
    sub_21F877B98();
    goto LABEL_7;
  }
  sub_21F77F038(v16, a4 & 1);
  unint64_t v22 = sub_21F77E624(a3);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    uint64_t result = sub_21FA26990();
    __break(1u);
    return result;
  }
  unint64_t v13 = v22;
  uint64_t v19 = (void *)*a5;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v24 = sub_21F77E6FC((uint64_t)&v30, v10);
  __n128 v25 = MEMORY[0x270FA5388](v24);
  char v27 = (uint64_t *)((char *)&v29 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v28 + 16))(v27, v25);
  sub_21F939E04(v13, a3, *v27, v27[1], v19);
  return _s6Charts15AnyChartContentVwxx_0((uint64_t)&v30);
}

uint64_t sub_21F93A2C8(uint64_t a1, char a2, void *a3, double a4)
{
  uint64_t v8 = sub_21F76CA40(&qword_26AD47790);
  uint64_t v29 = v8;
  long long v30 = &off_26D1331C0;
  *(double *)&long long v28 = a4;
  long long v9 = (void *)*a3;
  unint64_t v11 = sub_21F77E624(a1);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    char v15 = v10;
    uint64_t v16 = v9[3];
    if (v16 >= v14 && (a2 & 1) != 0)
    {
LABEL_7:
      char v17 = (void *)*a3;
      if (v15)
      {
LABEL_8:
        uint64_t v18 = v17[7] + 40 * v11;
        _s6Charts15AnyChartContentVwxx_0(v18);
        return sub_21F77F300(&v28, v18);
      }
      goto LABEL_11;
    }
    if (v16 >= v14 && (a2 & 1) == 0)
    {
      sub_21F877B98();
      goto LABEL_7;
    }
    sub_21F77F038(v14, a2 & 1);
    unint64_t v20 = sub_21F77E624(a1);
    if ((v15 & 1) == (v21 & 1))
    {
      unint64_t v11 = v20;
      char v17 = (void *)*a3;
      if (v15) {
        goto LABEL_8;
      }
LABEL_11:
      uint64_t v22 = sub_21F77E6FC((uint64_t)&v28, v8);
      __n128 v23 = MEMORY[0x270FA5388](v22);
      __n128 v25 = (double *)((char *)&v27 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(double *, __n128))(v26 + 16))(v25, v23);
      sub_21F939D58(v11, a1, v17, *v25);
      return _s6Charts15AnyChartContentVwxx_0((uint64_t)&v28);
    }
  }
  uint64_t result = sub_21FA26990();
  __break(1u);
  return result;
}

uint64_t sub_21F93A4B4(char a1, uint64_t a2, char a3, void *a4, uint64_t *a5)
{
  uint64_t v10 = sub_21F76CA40(a5);
  uint64_t v31 = v10;
  unint64_t v32 = &off_26D1331C0;
  LOBYTE(v30) = a1;
  unint64_t v11 = (void *)*a4;
  unint64_t v13 = sub_21F77E624(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v19 = (void *)*a4;
    if (v17)
    {
LABEL_8:
      uint64_t v20 = v19[7] + 40 * v13;
      _s6Charts15AnyChartContentVwxx_0(v20);
      return sub_21F77F300(&v30, v20);
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_21F877B98();
    goto LABEL_7;
  }
  sub_21F77F038(v16, a3 & 1);
  unint64_t v22 = sub_21F77E624(a2);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    uint64_t result = sub_21FA26990();
    __break(1u);
    return result;
  }
  unint64_t v13 = v22;
  uint64_t v19 = (void *)*a4;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v24 = sub_21F77E6FC((uint64_t)&v30, v10);
  __n128 v25 = MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v29 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v28 + 16))(v27, v25);
  sub_21F93A040(v13, a2, *v27, v19, a5);
  return _s6Charts15AnyChartContentVwxx_0((uint64_t)&v30);
}

uint64_t sub_21F93A69C(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v29 = sub_21F76CA40(&qword_26AD46970);
  long long v30 = &off_26D1331C0;
  uint64_t v8 = sub_21F77E8F8((uint64_t *)&v28);
  sub_21F76C9DC(a1, (uint64_t)v8, &qword_26AD46970);
  long long v9 = (void *)*a4;
  unint64_t v11 = sub_21F77E624(a2);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v15 = v10;
  uint64_t v16 = v9[3];
  if (v16 >= v14 && (a3 & 1) != 0)
  {
LABEL_7:
    char v17 = (void *)*a4;
    if (v15)
    {
LABEL_8:
      uint64_t v18 = v17[7] + 40 * v11;
      _s6Charts15AnyChartContentVwxx_0(v18);
      return sub_21F77F300(&v28, v18);
    }
    goto LABEL_11;
  }
  if (v16 >= v14 && (a3 & 1) == 0)
  {
    sub_21F877B98();
    goto LABEL_7;
  }
  sub_21F77F038(v14, a3 & 1);
  unint64_t v20 = sub_21F77E624(a2);
  if ((v15 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = sub_21FA26990();
    __break(1u);
    return result;
  }
  unint64_t v11 = v20;
  char v17 = (void *)*a4;
  if (v15) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v22 = sub_21F77E6FC((uint64_t)&v28, v29);
  __n128 v23 = MEMORY[0x270FA5388](v22);
  __n128 v25 = (char *)&v27 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v26 + 16))(v25, v23);
  sub_21F939F7C(v11, a2, (uint64_t)v25, v17);
  return _s6Charts15AnyChartContentVwxx_0((uint64_t)&v28);
}

uint64_t sub_21F93A890(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v8 = sub_21F76CA40(qword_26AD44200);
  uint64_t v31 = v8;
  unint64_t v32 = &off_26D1331C0;
  uint64_t v9 = swift_allocObject();
  *(void *)&long long v30 = v9;
  long long v10 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v9 + 32) = v10;
  *(void *)(v9 + 48) = *(void *)(a1 + 32);
  unint64_t v11 = (void *)*a4;
  unint64_t v13 = sub_21F77E624(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v19 = (void *)*a4;
    if (v17)
    {
LABEL_8:
      uint64_t v20 = v19[7] + 40 * v13;
      _s6Charts15AnyChartContentVwxx_0(v20);
      return sub_21F77F300(&v30, v20);
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_21F877B98();
    goto LABEL_7;
  }
  sub_21F77F038(v16, a3 & 1);
  unint64_t v22 = sub_21F77E624(a2);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    uint64_t result = sub_21FA26990();
    __break(1u);
    return result;
  }
  unint64_t v13 = v22;
  uint64_t v19 = (void *)*a4;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v24 = sub_21F77E6FC((uint64_t)&v30, v8);
  __n128 v25 = MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v29 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v28 + 16))(v27, v25);
  sub_21F939EB4(v13, a2, (uint64_t)v27, v19);
  return _s6Charts15AnyChartContentVwxx_0((uint64_t)&v30);
}

uint64_t sub_21F93AA98(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3)
  {
    if (a3 != 1)
    {
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = a1;
      *(void *)(v9 + 24) = a2;
      swift_retain_n();
      uint64_t v8 = sub_21F9E19E8((uint64_t)sub_21F93B110, v9);
      goto LABEL_7;
    }
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    swift_retain_n();
    unsigned int v7 = sub_21F93B118;
  }
  else
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    swift_retain_n();
    unsigned int v7 = sub_21F93B5C4;
  }
  uint64_t v8 = sub_21F9E19C8((uint64_t)v7, v6);
LABEL_7:
  uint64_t v10 = v8;
  swift_release();
  sub_21F7A5C94(a1, a2, a3);
  sub_21F7A5C94(a1, a2, a3);
  swift_release();
  return v10;
}

uint64_t sub_21F93ABF8(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  switch(a3 >> 5)
  {
    case 1:
      uint64_t v13 = swift_bridgeObjectRetain();
      uint64_t v14 = sub_21F9E1AFC(v13);
      goto LABEL_11;
    case 2:
      uint64_t v15 = swift_bridgeObjectRetain();
      uint64_t v14 = sub_21F786014(v15);
      goto LABEL_11;
    case 3:
      uint64_t v16 = swift_bridgeObjectRetain();
      uint64_t v14 = sub_21F9E1A08(v16);
      goto LABEL_11;
    case 4:
      uint64_t v17 = swift_bridgeObjectRetain();
      uint64_t v14 = sub_21F9E1A14(v17);
      goto LABEL_11;
    case 5:
      uint64_t v18 = swift_retain();
      uint64_t v14 = sub_21F9E1B08(v18);
      goto LABEL_11;
    case 6:
      uint64_t v19 = swift_bridgeObjectRetain();
      uint64_t v14 = sub_21F9E1BA8(v19);
LABEL_11:
      uint64_t v11 = v14;
      swift_release();
      sub_21F7A5BF8(a1, a2, a3);
      sub_21F7A5BF8(a1, a2, a3);
      return v11;
    case 7:
      switch(a3 & 0x1F)
      {
        case 1:
          uint64_t v21 = swift_allocObject();
          *(void *)(v21 + 16) = a1;
          *(void *)(v21 + 24) = a2;
          sub_21F7A67AC(a1, a2, 1u);
          sub_21F7A67AC(a1, a2, 1u);
          sub_21F7A67AC(a1, a2, 1u);
          uint64_t v11 = sub_21F9E1A38((uint64_t)sub_21F93B160, v21);
          swift_release();
          sub_21F7A5BF8(a1, a2, a3);
          sub_21F7A5BF8(a1, a2, a3);
          uint64_t v22 = a1;
          uint64_t v23 = a2;
          unsigned __int8 v24 = 1;
          goto LABEL_17;
        case 2:
          uint64_t v25 = swift_allocObject();
          *(void *)(v25 + 16) = a1;
          *(void *)(v25 + 24) = a2;
          sub_21F7A67AC(a1, a2, 2u);
          sub_21F7A67AC(a1, a2, 2u);
          sub_21F7A67AC(a1, a2, 2u);
          uint64_t v11 = sub_21F9E1A2C((uint64_t)sub_21F93B168, v25);
          swift_release();
          sub_21F7A5BF8(a1, a2, a3);
          sub_21F7A5BF8(a1, a2, a3);
          uint64_t v22 = a1;
          uint64_t v23 = a2;
          unsigned __int8 v24 = 2;
          goto LABEL_17;
        case 3:
          uint64_t v26 = swift_allocObject();
          *(void *)(v26 + 16) = a1;
          *(void *)(v26 + 24) = a2;
          sub_21F7A67AC(a1, a2, 3u);
          sub_21F7A67AC(a1, a2, 3u);
          sub_21F7A67AC(a1, a2, 3u);
          uint64_t v11 = sub_21F9E1A44((uint64_t)sub_21F93B158, v26);
          swift_release();
          sub_21F7A5BF8(a1, a2, a3);
          sub_21F7A5BF8(a1, a2, a3);
          uint64_t v22 = a1;
          uint64_t v23 = a2;
          unsigned __int8 v24 = 3;
LABEL_17:
          sub_21F7A5C58(v22, v23, v24);
          goto LABEL_18;
        default:
          uint64_t v20 = swift_allocObject();
          *(void *)(v20 + 16) = a1;
          *(void *)(v20 + 24) = a2;
          sub_21F7A67AC(a1, a2, 0);
          sub_21F7A67AC(a1, a2, 0);
          sub_21F7A67AC(a1, a2, 0);
          uint64_t v11 = sub_21F9E1A20((uint64_t)sub_21F93B170, v20);
          swift_release();
          sub_21F7A5BF8(a1, a2, a3);
          sub_21F7A5BF8(a1, a2, a3);
          sub_21F7A5C58(a1, a2, 0);
          swift_release();
          return v11;
      }
    default:
      uint64_t v8 = *(void *)(a4 + 16);
      uint64_t v9 = v8 + 1;
      if (__OFADD__(v8, 1))
      {
        __break(1u);
        goto LABEL_21;
      }
      *(void *)(a4 + 16) = v9;
      uint64_t v10 = sub_21F76CA40(&qword_26AD47790);
      uint64_t v29 = v10;
      long long v30 = &off_26D1331C0;
      v28[0] = a1;
      swift_beginAccess();
      sub_21F77E1A8((uint64_t)v28, v9);
      uint64_t v11 = *(void *)(a4 + 16);
      uint64_t v12 = v11 + 1;
      if (__OFADD__(v11, 1))
      {
LABEL_21:
        __break(1u);
        JUMPOUT(0x21F93B0A0);
      }
      *(void *)(a4 + 16) = v12;
      uint64_t v29 = v10;
      long long v30 = &off_26D1331C0;
      v28[0] = a2;
      sub_21F77E1A8((uint64_t)v28, v12);
      swift_endAccess();
LABEL_18:
      swift_release();
      return v11;
  }
}

uint64_t sub_21F93B0D0()
{
  if (*(void *)(v0 + 40)) {
    _s6Charts15AnyChartContentVwxx_0(v0 + 16);
  }

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_21F93B110@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_21F9FEDA0(a1, *(uint64_t (**)(void))(v2 + 16), a2);
}

uint64_t sub_21F93B118(uint64_t a1)
{
  return sub_21FA0A13C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_21F93B120()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

void sub_21F93B158(uint64_t a1@<X0>, double *a2@<X8>)
{
  sub_21F880EC4(a1, *(double (**)(void, void, void))(v2 + 16), a2);
}

double sub_21F93B160@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21F880E30(a1, *(void (**)(_OWORD *__return_ptr, void, void, void))(v2 + 16), a2);
}

uint64_t sub_21F93B168(uint64_t a1)
{
  return sub_21F880E8C(a1, *(uint64_t (**)(void, void, void))(v1 + 16));
}

uint64_t sub_21F93B170@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_21F880DF0(a1, *(uint64_t (**)(void, void, void))(v2 + 16), a2);
}

uint64_t sub_21F93B178()
{
  if (*(unsigned char *)(v0 + 56) == 1)
  {
    swift_release();
  }
  else if (!*(unsigned char *)(v0 + 56))
  {
    _s6Charts15AnyChartContentVwxx_0(v0 + 16);
  }

  return MEMORY[0x270FA0238](v0, 57, 7);
}

uint64_t sub_21F93B1CC()
{
  _s6Charts15AnyChartContentVwxx_0(v0 + 16);

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_21F93B204(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_21F93B260(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t getEnumTagSinglePayload for PartialSpec.ScaleRange(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF9 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 249);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 7) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PartialSpec.ScaleRange(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 249;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PartialSpec.Values(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for PartialSpec.Values(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 9);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PartialSpec.Values(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 10) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 10) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 9) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PartialSpecScaleMapping()
{
  return &type metadata for PartialSpecScaleMapping;
}

unint64_t sub_21F93B414()
{
  unint64_t result = qword_267EE8B00;
  if (!qword_267EE8B00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE8B00);
  }
  return result;
}

ValueMetadata *type metadata accessor for PartialSpec.Values.Extents()
{
  return &type metadata for PartialSpec.Values.Extents;
}

ValueMetadata *type metadata accessor for PartialSpec.ScaleDomain()
{
  return &type metadata for PartialSpec.ScaleDomain;
}

unint64_t sub_21F93B494()
{
  unint64_t result = qword_267EE8B08;
  if (!qword_267EE8B08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE8B08);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PartialSpec.ScaleDomain.InferredDomain(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = (v3 ^ 0xFF) - 1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PartialSpec.ScaleDomain.InferredDomain(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = ~(_BYTE)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PartialSpec.ScaleDomain.InferredDomain()
{
  return &type metadata for PartialSpec.ScaleDomain.InferredDomain;
}

ValueMetadata *type metadata accessor for PartialSpec.ScaleDomain.Transform()
{
  return &type metadata for PartialSpec.ScaleDomain.Transform;
}

uint64_t sub_21F93B5C8@<X0>(double a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  switch(a2)
  {
    case 1:
      CGMutablePathRef Mutable = CGPathCreateMutable();
      if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      {
        a4[3] = (uint64_t)&_s10CatmullRomVN;
        a4[4] = (uint64_t)&off_26D13E048;
        uint64_t result = swift_allocObject();
        *a4 = result;
        *(void *)(result + 16) = Mutable;
        *(double *)(result + 24) = a1;
      }
      else
      {
        a4[3] = (uint64_t)&_s8CardinalVN;
        a4[4] = (uint64_t)&off_26D1375E0;
        uint64_t result = swift_allocObject();
        *a4 = result;
        *(void *)(result + 16) = Mutable;
        *(void *)(result + 24) = 0x3FC5555555555555;
      }
      goto LABEL_10;
    case 2:
      CGMutablePathRef v10 = CGPathCreateMutable();
      a4[3] = (uint64_t)&_s4StepVN;
      a4[4] = (uint64_t)&off_26D13FCF8;
      uint64_t result = swift_allocObject();
      *a4 = result;
      *(void *)(result + 16) = v10;
      *(void *)(result + 24) = 0;
      *(void *)(result + 32) = 0;
      *(double *)(result + 40) = a1;
      *(int64x2_t *)(result + 48) = vdupq_n_s64(0x7FF8000000000000uLL);
      break;
    case 3:
      uint64_t result = (uint64_t)CGPathCreateMutable();
      uint64_t v12 = result;
      if (a1 == 0.0)
      {
        a4[3] = (uint64_t)&_s6LinearVN;
        a4[4] = (uint64_t)&off_26D13CA88;
        *a4 = 0;
        a4[1] = 0;
        a4[2] = result;
      }
      else
      {
        if (a3)
        {
          a4[3] = (uint64_t)&_s9MonotoneXVN;
          a4[4] = (uint64_t)&off_26D13C230;
        }
        else
        {
          a4[3] = sub_21F76CA40(qword_267EE8B10);
          a4[4] = (uint64_t)&off_26D13B1D8;
        }
        uint64_t result = swift_allocObject();
        *a4 = result;
        *(void *)(result + 24) = 0;
        *(void *)(result + 32) = 0;
        *(void *)(result + 16) = v12;
        int64x2_t v14 = vdupq_n_s64(0x7FF8000000000000uLL);
        *(int64x2_t *)(result + 40) = v14;
        *(int64x2_t *)(result + 56) = v14;
        *(void *)(result + 72) = 0x7FF8000000000000;
      }
      break;
    default:
      CGMutablePathRef v7 = CGPathCreateMutable();
      a4[3] = (uint64_t)&_s8CardinalVN;
      a4[4] = (uint64_t)&off_26D1375E0;
      uint64_t result = swift_allocObject();
      *a4 = result;
      *(void *)(result + 16) = v7;
      *(double *)(result + 24) = (1.0 - a1) / 6.0;
LABEL_10:
      *(void *)(result + 32) = 0;
      *(void *)(result + 40) = 0;
      int64x2_t v13 = vdupq_n_s64(0x7FF8000000000000uLL);
      *(int64x2_t *)(result + 48) = v13;
      *(int64x2_t *)(result + 64) = v13;
      *(int64x2_t *)(result + 80) = v13;
      break;
  }
  return result;
}

uint64_t sub_21F93B804@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6 = 0;
  char v7 = 0;
  unint64_t v8 = *(void *)(result + 16);
  uint64_t v9 = (double *)(result + 48);
  do
  {
    if (v6 >= v8)
    {
      if (v7)
      {
LABEL_2:
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
        if (v8 == v6) {
          goto LABEL_15;
        }
      }
      else if (v8 == v6)
      {
        goto LABEL_15;
      }
      char v7 = 0;
      goto LABEL_4;
    }
    if ((v7 & 1) == *(unsigned char *)v9)
    {
      if (!*(unsigned char *)v9) {
        goto LABEL_14;
      }
    }
    else
    {
      if (!*(unsigned char *)v9) {
        goto LABEL_2;
      }
      (*(void (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
      char v7 = 1;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, double, double))(a3 + 40))(a2, a3, *(v9 - 2), *(v9 - 1));
LABEL_14:
    if (v8 == v6)
    {
LABEL_15:
      (*(void (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
      uint64_t result = sub_21FA25290();
      *(_OWORD *)a4 = v12;
      *(_OWORD *)(a4 + 16) = v13;
      *(unsigned char *)(a4 + 32) = v14;
      return result;
    }
LABEL_4:
    v9 += 3;
  }
  while (!__OFADD__(v6++, 1));
  __break(1u);
  return result;
}

uint64_t sub_21F93B95C()
{
  return MEMORY[0x270FA0238](v0, 80, 7);
}

uint64_t sub_21F93B994()
{
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_21F93B9CC()
{
  return MEMORY[0x270FA0238](v0, 96, 7);
}

uint64_t sub_21F93BA04@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = 0;
  char v7 = 0;
  unint64_t v8 = 0;
  unint64_t v9 = *(void *)(result + 16);
  uint64_t v10 = result + 32;
  uint64_t v11 = (uint64_t (**)(uint64_t, uint64_t, double, double))(a3 + 40);
  while (v8 < v9)
  {
    uint64_t v13 = v10 + 40 * v8;
    if ((v7 & 1) == *(unsigned char *)(v13 + 32))
    {
      if (!*(unsigned char *)(v13 + 32)) {
        goto LABEL_21;
      }
    }
    else
    {
      if (!*(unsigned char *)(v13 + 32)) {
        goto LABEL_10;
      }
      (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
      (*(void (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
      uint64_t v6 = 0;
      char v7 = 1;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, double, double))(a3 + 40))(a2, a3, *(double *)(v13 + 16), *(double *)(v13 + 24));
    BOOL v12 = __OFADD__(v6++, 1);
    if (v12) {
      goto LABEL_31;
    }
LABEL_21:
    if (v8 == v9) {
      goto LABEL_24;
    }
LABEL_4:
    BOOL v12 = __OFADD__(v8++, 1);
    if (v12) {
      goto LABEL_27;
    }
  }
  if ((v7 & 1) == 0)
  {
    if (v8 == v9)
    {
LABEL_24:
      (*(void (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
      uint64_t result = sub_21FA25290();
      *(_OWORD *)a4 = v20;
      *(_OWORD *)(a4 + 16) = v21;
      *(unsigned char *)(a4 + 32) = v22;
      return result;
    }
    goto LABEL_3;
  }
LABEL_10:
  char v14 = *(void (**)(uint64_t, uint64_t))(a3 + 16);
  v14(a2, a3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  if (v6 < 1) {
    goto LABEL_28;
  }
  if (!v8) {
    goto LABEL_29;
  }
  if (v8 > v9) {
    goto LABEL_30;
  }
  uint64_t v19 = v14;
  uint64_t v15 = *v11;
  uint64_t result = (*v11)(a2, a3, *(double *)(v10 + 40 * v8 - 40), *(double *)(v10 + 40 * v8 - 32));
  if (v6 == 1)
  {
LABEL_2:
    v19(a2, a3);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
    if (v8 == v9) {
      goto LABEL_24;
    }
LABEL_3:
    char v7 = 0;
    goto LABEL_4;
  }
  uint64_t v16 = 1;
  while (1)
  {
    ++v16;
    unint64_t v17 = v8 - v16;
    if (__OFSUB__(v8, v16)) {
      break;
    }
    if (v17 >= v9) {
      goto LABEL_26;
    }
    uint64_t result = v15(a2, a3, *(double *)(v10 + 40 * v17), *(double *)(v10 + 40 * v17 + 8));
    if (v6 == v16) {
      goto LABEL_2;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for CurvePointArea(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CurvePointArea(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CurvePointArea()
{
  return &type metadata for CurvePointArea;
}

ValueMetadata *type metadata accessor for CurveFamilies()
{
  return &type metadata for CurveFamilies;
}

uint64_t sub_21F93BD50(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_21F93BEAC(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x21F93C0C4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for CurveFamilies.FlippedCurveFamily()
{
  return sub_21F764F08();
}

uint64_t getEnumTagSinglePayload for CurvePointLine(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CurvePointLine(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CurvePointLine()
{
  return &type metadata for CurvePointLine;
}

uint64_t sub_21F93C1AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))(*(void *)(a1 + 16));
}

uint64_t sub_21F93C1C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))(*(void *)(a1 + 16));
}

uint64_t sub_21F93C1DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 24))(*(void *)(a1 + 16));
}

uint64_t sub_21F93C1F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))(*(void *)(a1 + 16));
}

uint64_t sub_21F93C20C(uint64_t a1, double a2, double a3)
{
  return (*(uint64_t (**)(void, double, double))(*(void *)(a1 + 24) + 40))(*(void *)(a1 + 16), a3, a2);
}

CGMutablePathRef sub_21F93C230(uint64_t a1)
{
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))(*(void *)(a1 + 16));
  CGMutablePathRef Mutable = CGPathCreateMutable();
  sub_21FA26260();

  return Mutable;
}

uint64_t sub_21F93C2C4()
{
  sub_21F7733A0();
  sub_21FA24B40();
  return v1;
}

ValueMetadata *type metadata accessor for ChartEncodingConfigurationsKey()
{
  return &type metadata for ChartEncodingConfigurationsKey;
}

double ChartContent.foregroundStyle<A>(by:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)&double result = sub_21F93D8F8(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedChartContent_ForegroundStyle, a6).n128_u64[0];
  return result;
}

uint64_t VectorizedChartContent.foregroundStyle<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v7 = MEMORY[0x270FA5388](a1);
  BOOL v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v9, v3, a2, v7);
  sub_21F93C420((uint64_t)v9, a1, a2, a3);
  return swift_retain();
}

uint64_t sub_21F93C420@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t result = type metadata accessor for ModifiedChartContent_ForegroundStyles();
  *(void *)(a4 + *(int *)(result + 60)) = a2;
  return result;
}

uint64_t VectorizedChartContent.foregroundStyle<A>(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v23 = a1;
  uint64_t v24 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for PlottableProjection();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v23 - v15;
  __n128 v18 = MEMORY[0x270FA5388](v17);
  long long v20 = (char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v21 + 16))(v20, v7, a2, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v23, v13);
  return sub_21F93DBF4((uint64_t)v20, (uint64_t)v16, a2, AssociatedTypeWitness, a3, a4, a5, (uint64_t (*)(void, void *))type metadata accessor for ModifiedChartContent_ForegroundStyles_Plottable, v24);
}

uint64_t ChartContent.alignsMarkStylesWithPlotArea(_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  KeyPath = (uint64_t *)swift_getKeyPath();
  char v8 = a1;
  sub_21F77E95C(KeyPath, (uint64_t)&v8, a2, a3);
  return swift_release();
}

uint64_t ChartContent.position<A>(by:axis:span:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v25 = a6;
  int v24 = a4;
  uint64_t v23 = a3;
  int v22 = a2;
  uint64_t v11 = type metadata accessor for PlottableValue();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = &v21[-v13];
  __n128 v16 = MEMORY[0x270FA5388](v15);
  __n128 v18 = &v21[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, __n128))(v19 + 16))(v18, v7, a5, v16);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  return sub_21F93C8FC((uint64_t)v18, (uint64_t)v14, v22, v23, v24, a5, a7);
}

uint64_t sub_21F93C8FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a7, a1, a6);
  uint64_t v12 = (int *)type metadata accessor for ModifiedChartContent_Position();
  uint64_t v13 = a7 + v12[17];
  uint64_t v14 = type metadata accessor for PlottableValue();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v13, a2, v14);
  *(unsigned char *)(a7 + v12[18]) = a3;
  uint64_t v16 = a7 + v12[19];
  *(void *)uint64_t v16 = a4;
  *(unsigned char *)(v16 + 8) = a5;
  return result;
}

double VectorizedChartContent.position<A>(by:axis:span:)@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v26 = a9;
  int v29 = a4;
  uint64_t v28 = a3;
  int v27 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = type metadata accessor for PlottableProjection();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  __n128 v18 = (char *)v25 - v17;
  __n128 v20 = MEMORY[0x270FA5388](v19);
  int v22 = (char *)v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t, __n128))(v23 + 16))(v22, v25[1], a5, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, v15);
  *(void *)&double result = sub_21F93CC08((uint64_t)v22, v27, v28, v29, (uint64_t)v18, a5, AssociatedTypeWitness, a6, v26, a7, a8).n128_u64[0];
  return result;
}

__n128 sub_21F93CC08@<Q0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  int v39 = a4;
  uint64_t v38 = a3;
  int v37 = a2;
  uint64_t v34 = a1;
  uint64_t v35 = a9;
  uint64_t v36 = a10;
  uint64_t v16 = type metadata accessor for PlottableProjection();
  uint64_t v17 = *(void *)(v16 - 8);
  __n128 v18 = MEMORY[0x270FA5388](v16);
  __n128 v20 = (char *)&v34 - v19;
  uint64_t v21 = *(void *)(a6 - 8);
  uint64_t v22 = a9;
  uint64_t v23 = v34;
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v21 + 16))(v22, v34, a6, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, a5, v16);
  sub_21F959E10((uint64_t)v20, a8, a11, (uint64_t *)&v41);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, a6);
  v40[0] = a6;
  v40[1] = a7;
  v40[2] = a8;
  v40[3] = v36;
  v40[4] = a11;
  uint64_t v24 = type metadata accessor for ModifiedChartContent_Positions();
  uint64_t v25 = v35;
  uint64_t v26 = v35 + *(int *)(v24 + 60);
  LOBYTE(v21) = v37;
  *(unsigned char *)uint64_t v26 = v37;
  uint64_t v27 = v38;
  *(void *)(v26 + 8) = v38;
  LOBYTE(v20) = v39;
  *(unsigned char *)(v26 + 16) = v39;
  __n128 v28 = v42;
  *(_OWORD *)(v26 + 24) = v41;
  *(__n128 *)(v26 + 40) = v28;
  *(_OWORD *)(v26 + 56) = v43;
  *(void *)(v26 + 72) = v44;
  sub_21F8164BC(a5, a7, a8, a11, (uint64_t)v40);
  sub_21F8173A0(v21, v27, (char)v20, (uint64_t)v40, (uint64_t)&v41);
  uint64_t v29 = v25 + *(int *)(v24 + 64);
  long long v30 = v48;
  *(_OWORD *)(v29 + 96) = v47;
  *(_OWORD *)(v29 + 112) = v30;
  *(unsigned char *)(v29 + 128) = v49;
  long long v31 = v44;
  *(_OWORD *)(v29 + 32) = v43;
  *(_OWORD *)(v29 + 48) = v31;
  long long v32 = v46;
  *(_OWORD *)(v29 + 64) = v45;
  *(_OWORD *)(v29 + 80) = v32;
  __n128 result = v42;
  *(_OWORD *)uint64_t v29 = v41;
  *(__n128 *)(v29 + 16) = result;
  return result;
}

uint64_t ChartContent.opacity(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  KeyPath = (uint64_t *)swift_getKeyPath();
  double v8 = a3;
  sub_21F77E95C(KeyPath, (uint64_t)&v8, a1, a2);
  return swift_release();
}

uint64_t VectorizedChartContent.opacity(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_21F93D298(a1, a2, a3, (uint64_t (*)(void, uint64_t, void, uint64_t))type metadata accessor for ModifiedChartContent_Opacities_KeyPath, a4);
}

uint64_t ChartContent.blendMode(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_21F76CA40(&qword_26AD4A3B8);
  MEMORY[0x270FA5388](v6 - 8);
  double v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = (uint64_t *)swift_getKeyPath();
  uint64_t v10 = sub_21FA25910();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v8, a1, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  sub_21F77E95C(KeyPath, (uint64_t)v8, a2, a3);
  swift_release();
  return sub_21F76CA84((uint64_t)v8, &qword_26AD4A3B8);
}

uint64_t ChartContent.clipShape<A>(_:style:)@<X0>(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = (uint64_t *)swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a4);
  uint64_t v16 = sub_21FA25820();
  __int16 v17 = a2 & 0x101;
  sub_21F77E95C(KeyPath, (uint64_t)&v16, a3, a5);
  swift_release();
  return swift_release();
}

uint64_t ChartContent.lineStyle(_:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v8 = a1[1];
  long long v9 = *a1;
  uint64_t v5 = *((void *)a1 + 4);
  KeyPath = (uint64_t *)swift_getKeyPath();
  v10[0] = v9;
  v10[1] = v8;
  uint64_t v11 = v5;
  sub_21F77E95C(KeyPath, (uint64_t)v10, a2, a3);
  return swift_release();
}

double ChartContent.lineStyle<A>(by:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)&double result = sub_21F93D8F8(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedChartContent_LineStyle, a6).n128_u64[0];
  return result;
}

uint64_t VectorizedChartContent.lineStyle(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_21F93D298(a1, a2, a3, (uint64_t (*)(void, uint64_t, void, uint64_t))type metadata accessor for ModifiedChartContent_StrokeStyles, a4);
}

uint64_t sub_21F93D298@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(void, uint64_t, void, uint64_t)@<X3>, uint64_t a5@<X8>)
{
  __n128 v11 = MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16))(v13, v5, a2, v11);
  sub_21F93DB18((uint64_t)v13, a1, a2, *(void *)(a3 + 8), a4, a5);
  return swift_retain();
}

uint64_t VectorizedChartContent.lineStyle<A>(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_21F93D608(a1, a2, a3, a4, a5, (uint64_t (*)(void, void *))type metadata accessor for ModifiedChartContent_LineStyle_Plottable, a6);
}

uint64_t ChartContent.symbol<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return sub_21F77E81C(a1, a2, a3, a4, 0, &qword_26AD46858, a5);
}

double ChartContent.symbol<A>(by:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)&double result = sub_21F93D8F8(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedChartContent_Symbol, a6).n128_u64[0];
  return result;
}

uint64_t ChartContent.symbol<A>(symbol:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (*(uint64_t (**)(char *, uint64_t, __n128))(v15 + 16))(v14, v4, v12);
  a1(v16);
  return sub_21F93D528((uint64_t)v14, (uint64_t)v10, a2, a3, a4);
}

uint64_t sub_21F93D528@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for ModifiedChartContent_SymbolView();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t VectorizedChartContent.symbol<A>(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_21F93D608(a1, a2, a3, a4, a5, (uint64_t (*)(void, void *))type metadata accessor for ModifiedChartContent_Symbols_Plottable, a6);
}

uint64_t sub_21F93D608@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(void, void *)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v26 = a7;
  uint64_t v27 = a6;
  uint64_t v8 = v7;
  uint64_t v25 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for PlottableProjection();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  __int16 v17 = (char *)&v24 - v16;
  __n128 v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v22 + 16))(v21, v8, a2, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v25, v14);
  return sub_21F93DBF4((uint64_t)v21, (uint64_t)v17, a2, AssociatedTypeWitness, a3, *(void *)(a4 + 8), a5, v27, v26);
}

uint64_t ChartContent.symbolSize(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  KeyPath = (uint64_t *)swift_getKeyPath();
  *(double *)uint64_t v8 = a3;
  v8[1] = 0;
  char v9 = 0;
  sub_21F77E95C(KeyPath, (uint64_t)v8, a1, a2);
  return swift_release();
}

uint64_t ChartContent.symbolSize(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  KeyPath = (uint64_t *)swift_getKeyPath();
  *(double *)uint64_t v10 = a3;
  *(double *)&v10[1] = a4;
  char v11 = 1;
  sub_21F77E95C(KeyPath, (uint64_t)v10, a1, a2);
  return swift_release();
}

double ChartContent.symbolSize<A>(by:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)&double result = sub_21F93D8F8(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedChartContent_SymbolSize, a6).n128_u64[0];
  return result;
}

__n128 sub_21F93D8F8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(void, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v26 = a4;
  uint64_t v27 = a6;
  uint64_t v8 = v7;
  uint64_t v25 = a1;
  uint64_t v13 = type metadata accessor for PlottableValue();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v25 - v15;
  uint64_t v17 = *(void *)(a2 - 8);
  __n128 v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16))(v21, v8, a2, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v25, v13);
  sub_21F764B80((uint64_t)v16, a3, a5, (uint64_t)v28);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a7, v21, a2);
  uint64_t v22 = a7 + *(int *)(v27(0, a2, v26) + 36);
  long long v23 = v28[3];
  *(_OWORD *)(v22 + 32) = v28[2];
  *(_OWORD *)(v22 + 48) = v23;
  *(void *)(v22 + 64) = v29;
  __n128 result = (__n128)v28[1];
  *(_OWORD *)uint64_t v22 = v28[0];
  *(__n128 *)(v22 + 16) = result;
  return result;
}

uint64_t VectorizedChartContent.symbolSize(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_21F93D298(a1, a2, a3, (uint64_t (*)(void, uint64_t, void, uint64_t))type metadata accessor for ModifiedChartContent_SymbolAreas_KeyPath, a4);
}

{
  return sub_21F93D298(a1, a2, a3, (uint64_t (*)(void, uint64_t, void, uint64_t))type metadata accessor for ModifiedChartContent_SymbolSizes_KeyPath, a4);
}

uint64_t sub_21F93DB18@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void, uint64_t, void, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = *a2;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a6, a1);
  uint64_t result = a5(0, a3, *(void *)(v11 + *MEMORY[0x263F8EA20]), a4);
  *(void *)(a6 + *(int *)(result + 44)) = a2;
  return result;
}

uint64_t VectorizedChartContent.symbolSize<A>(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_21F93D608(a1, a2, a3, a4, a5, (uint64_t (*)(void, void *))type metadata accessor for ModifiedChartContent_SymbolSizes_Plottable, a6);
}

uint64_t sub_21F93DBF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(void, void *)@<X7>, uint64_t a9@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a9, a1);
  v20[0] = a3;
  v20[1] = a4;
  v20[2] = a5;
  v20[3] = a6;
  v20[4] = a7;
  uint64_t v17 = a9 + *(int *)(a8(0, v20) + 60);
  uint64_t v18 = type metadata accessor for PlottableProjection();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v17, a2, v18);
}

uint64_t ChartContent.offset(x:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v9 = *(void *)(a1 - 8);
  __n128 v10 = MEMORY[0x270FA5388](a1);
  __n128 v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v12, v4, a1, v10);
  uint64_t v13 = swift_allocObject();
  *(double *)(v13 + 16) = a3;
  *(double *)(v13 + 24) = a4;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v12, a1);
  uint64_t result = type metadata accessor for ModifiedChartContent_TransformEnvironment();
  uint64_t v15 = (float64_t (**)(uint64_t))(a2 + *(int *)(result + 36));
  *uint64_t v15 = sub_21F93DEBC;
  v15[1] = (float64_t (*)(uint64_t))v13;
  return result;
}

float64_t sub_21F93DE28(uint64_t a1, double a2, double a3)
{
  uint64_t v4 = type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v5 = (float64x2_t *)(a1 + *(int *)(v4 + 88));
  *uint64_t v5 = vaddq_f64(*v5, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0));
  v5[1].f64[0] = v5[1].f64[0] + a2;
  uint64_t v6 = (float64x2_t *)(a1 + *(int *)(v4 + 92));
  *uint64_t v6 = vaddq_f64(*v6, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a3, 0));
  float64_t result = v6[1].f64[0] + a3;
  v6[1].f64[0] = result;
  return result;
}

uint64_t sub_21F93DEAC()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

float64_t sub_21F93DEBC(uint64_t a1)
{
  return sub_21F93DE28(a1, *(double *)(v1 + 16), *(double *)(v1 + 24));
}

uint64_t ChartContent.offset(x:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  return sub_21F93DF90(a1, (uint64_t)sub_21F93DEF8, a2, a3, a4, a5);
}

uint64_t sub_21F93DEE8()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

float64x2_t sub_21F93DEF8(uint64_t a1)
{
  uint64_t v9 = *(uint64_t *)(v1 + 16);
  uint64_t v3 = type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v4 = (float64x2_t *)(a1 + *(int *)(v3 + 88));
  double v5 = *(double *)&v9 + v4[1].f64[0];
  float64x2_t v6 = *(float64x2_t *)(v1 + 24);
  *uint64_t v4 = vaddq_f64((float64x2_t)vdupq_lane_s64(v9, 0), *v4);
  v4[1].f64[0] = v5;
  uint64_t v7 = a1 + *(int *)(v3 + 92);
  float64x2_t result = vaddq_f64(v6, *(float64x2_t *)(v7 + 8));
  *(float64x2_t *)(v7 + 8) = result;
  return result;
}

uint64_t ChartContent.offset(xStart:xEnd:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  return sub_21F93DF90(a1, (uint64_t)sub_21F93E0E8, a2, a3, a4, a5);
}

uint64_t sub_21F93DF90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  uint64_t v13 = *(void *)(a1 - 8);
  __n128 v14 = MEMORY[0x270FA5388](a1);
  uint64_t v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v16, v6, a1, v14);
  uint64_t v17 = (double *)swift_allocObject();
  v17[2] = a4;
  v17[3] = a5;
  v17[4] = a6;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a3, v16, a1);
  uint64_t result = type metadata accessor for ModifiedChartContent_TransformEnvironment();
  __n128 v19 = (void *)(a3 + *(int *)(result + 36));
  void *v19 = a2;
  v19[1] = v17;
  return result;
}

uint64_t sub_21F93E0D8()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

double sub_21F93E0E8(uint64_t a1)
{
  uint64_t v6 = *(uint64_t *)&v1[2].f64[0];
  uint64_t v3 = type metadata accessor for ChartContentRenderContext.Environment(0);
  *(float64x2_t *)(a1 + *(int *)(v3 + 88) + 8) = vaddq_f64(v1[1], *(float64x2_t *)(a1 + *(int *)(v3 + 88) + 8));
  uint64_t v4 = (float64x2_t *)(a1 + *(int *)(v3 + 92));
  *uint64_t v4 = vaddq_f64((float64x2_t)vdupq_lane_s64(v6, 0), *v4);
  double result = *(double *)&v6 + v4[1].f64[0];
  v4[1].f64[0] = result;
  return result;
}

uint64_t ChartContent.offset(xStart:xEnd:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v13 = *(void *)(a1 - 8);
  __n128 v14 = MEMORY[0x270FA5388](a1);
  uint64_t v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v16, v6, a1, v14);
  uint64_t v17 = (double *)swift_allocObject();
  v17[2] = a3;
  v17[3] = a4;
  v17[4] = a5;
  v17[5] = a6;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a2, v16, a1);
  uint64_t result = type metadata accessor for ModifiedChartContent_TransformEnvironment();
  __n128 v19 = (float64x2_t (**)(uint64_t))(a2 + *(int *)(result + 36));
  void *v19 = sub_21F93E2C0;
  v19[1] = (float64x2_t (*)(uint64_t))v17;
  return result;
}

uint64_t sub_21F93E2B0()
{
  return MEMORY[0x270FA0238](v0, 48, 7);
}

float64x2_t sub_21F93E2C0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ChartContentRenderContext.Environment(0);
  float64x2_t v4 = v1[2];
  *(float64x2_t *)(a1 + *(int *)(v3 + 88) + 8) = vaddq_f64(v1[1], *(float64x2_t *)(a1 + *(int *)(v3 + 88) + 8));
  uint64_t v5 = a1 + *(int *)(v3 + 92);
  float64x2_t result = vaddq_f64(v4, *(float64x2_t *)(v5 + 8));
  *(float64x2_t *)(v5 + 8) = result;
  return result;
}

uint64_t ChartContent.cornerRadius(_:style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v8 = sub_21F76CA40(&qword_26AD47C20);
  MEMORY[0x270FA5388](v8 - 8);
  __n128 v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F779EA4(&qword_26AD455C8);
  uint64_t v11 = type metadata accessor for ModifiedChartContent_Environment();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  __n128 v14 = (char *)&v20 - v13;
  KeyPath = (uint64_t *)swift_getKeyPath();
  double v20 = a4;
  char v21 = 0;
  sub_21F77E95C(KeyPath, (uint64_t)&v20, a2, (uint64_t)v14);
  swift_release();
  uint64_t v16 = (uint64_t *)swift_getKeyPath();
  uint64_t v17 = sub_21FA24C90();
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v10, a1, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v10, 0, 1, v17);
  sub_21F77E95C(v16, (uint64_t)v10, v11, a3);
  swift_release();
  sub_21F76CA84((uint64_t)v10, &qword_26AD47C20);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t ChartContent.rectangleCornerRadii(_:style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  uint64_t v14 = sub_21F76CA40(&qword_26AD47C20);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v27[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F779EA4(&qword_26AD44018);
  uint64_t v17 = type metadata accessor for ModifiedChartContent_Environment();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  double v20 = (char *)&v27[-1] - v19;
  KeyPath = (uint64_t *)swift_getKeyPath();
  *(double *)uint64_t v27 = a4;
  *(double *)&v27[1] = a5;
  *(double *)&v27[2] = a6;
  *(double *)&v27[3] = a7;
  char v28 = 0;
  sub_21F77E95C(KeyPath, (uint64_t)v27, a2, (uint64_t)v20);
  swift_release();
  uint64_t v22 = (uint64_t *)swift_getKeyPath();
  uint64_t v23 = sub_21FA24C90();
  uint64_t v24 = *(void *)(v23 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v16, a1, v23);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v16, 0, 1, v23);
  sub_21F77E95C(v22, (uint64_t)v16, v17, a3);
  swift_release();
  sub_21F76CA84((uint64_t)v16, &qword_26AD47C20);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
}

uint64_t ChartContent.interpolationMethod(_:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  KeyPath = (uint64_t *)swift_getKeyPath();
  uint64_t v10 = a1;
  char v11 = a2;
  sub_21F77E95C(KeyPath, (uint64_t)&v10, a3, a4);
  return swift_release();
}

uint64_t ChartContent.blur(radius:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  __n128 v5 = MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16))(v7, v8, a1, v5);
  sub_21F76CA40(qword_267EE8B98);
  sub_21FA24830();
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_21FA28550;
  sub_21FA24810();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v7, a1);
  uint64_t result = type metadata accessor for ModifiedChartContent_Filters();
  *(void *)(a2 + *(int *)(result + 36)) = v9;
  return result;
}

uint64_t ChartContent.shadow(color:radius:x:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 - 8);
  __n128 v6 = MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, v9, a2, v6);
  sub_21F76CA40(qword_267EE8B98);
  sub_21FA24830();
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_21FA28550;
  sub_21FA24820();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a3, v8, a2);
  uint64_t result = type metadata accessor for ModifiedChartContent_Filters();
  *(void *)(a3 + *(int *)(result + 36)) = v10;
  return result;
}

uint64_t ChartContent.zIndex(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  return sub_21F93EBBC(a1, a2, a3);
}

uint64_t ChartContent.functionGraphProgress(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  return sub_21F93EBBC(a1, a2, a3);
}

uint64_t sub_21F93EBBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  KeyPath = (uint64_t *)swift_getKeyPath();
  double v8 = a3;
  sub_21F77E95C(KeyPath, (uint64_t)&v8, a1, a2);
  return swift_release();
}

_UNKNOWN **sub_21F93EC34()
{
  return &off_26B590DE0;
}

_UNKNOWN **sub_21F93EC40()
{
  return &off_26B590DA0;
}

uint64_t sub_21F93EC4C(uint64_t a1)
{
  return sub_21F93ED18(a1, (void (*)(uint64_t, void *))type metadata accessor for ModifiedChartContent_ForegroundStyles);
}

uint64_t type metadata accessor for ModifiedChartContent_ForegroundStyles()
{
  return swift_getGenericMetadata();
}

uint64_t sub_21F93EC90(uint64_t a1)
{
  return sub_21F93ED18(a1, (void (*)(uint64_t, void *))type metadata accessor for ModifiedChartContent_ForegroundStyles_Plottable);
}

uint64_t type metadata accessor for ModifiedChartContent_ForegroundStyles_Plottable()
{
  return swift_getGenericMetadata();
}

_UNKNOWN **sub_21F93ECD4()
{
  return &off_26B590DE0;
}

_UNKNOWN **sub_21F93ECE0()
{
  return &off_26B590D30;
}

uint64_t sub_21F93ECEC(uint64_t a1)
{
  return sub_21F93ED18(a1, (void (*)(uint64_t, void *))type metadata accessor for ModifiedChartContent_Positions);
}

uint64_t sub_21F93ED18(uint64_t a1, void (*a2)(uint64_t, void *))
{
  uint64_t v3 = *(void *)(a1 + 8);
  v6[0] = *(void *)a1;
  v6[2] = v3;
  long long v5 = *(_OWORD *)(a1 + 16);
  v6[1] = swift_getAssociatedTypeWitness();
  long long v7 = v5;
  a2(255, v6);
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for ModifiedChartContent_Positions()
{
  return swift_getGenericMetadata();
}

_UNKNOWN **sub_21F93EDB4()
{
  return &off_26B590DE0;
}

uint64_t sub_21F93EDC0(uint64_t *a1)
{
  return sub_21F93EFAC(a1, (void (*)(uint64_t, uint64_t, uint64_t, void))type metadata accessor for ModifiedChartContent_Opacities_KeyPath);
}

uint64_t type metadata accessor for ModifiedChartContent_Opacities_KeyPath()
{
  return sub_21F764F08();
}

_UNKNOWN **sub_21F93EE04()
{
  return &off_26B590DE0;
}

_UNKNOWN **sub_21F93EE10()
{
  return &off_26B590DE0;
}

_UNKNOWN **sub_21F93EE1C()
{
  return &off_26B590DE0;
}

_UNKNOWN **sub_21F93EE28()
{
  return &off_26B590CC0;
}

uint64_t sub_21F93EE34(uint64_t *a1)
{
  return sub_21F93EFAC(a1, (void (*)(uint64_t, uint64_t, uint64_t, void))type metadata accessor for ModifiedChartContent_StrokeStyles);
}

uint64_t type metadata accessor for ModifiedChartContent_StrokeStyles()
{
  return sub_21F764F08();
}

uint64_t sub_21F93EE78(uint64_t *a1)
{
  return sub_21F93F070(a1, (void (*)(uint64_t, void *))type metadata accessor for ModifiedChartContent_LineStyle_Plottable);
}

uint64_t type metadata accessor for ModifiedChartContent_LineStyle_Plottable()
{
  return swift_getGenericMetadata();
}

_UNKNOWN **sub_21F93EEBC()
{
  return &off_26B590DE0;
}

_UNKNOWN **sub_21F93EEC8()
{
  return &off_26B590C50;
}

_UNKNOWN **sub_21F93EED4()
{
  return &off_26B590C10;
}

uint64_t sub_21F93EEE0(uint64_t *a1)
{
  return sub_21F93F070(a1, (void (*)(uint64_t, void *))type metadata accessor for ModifiedChartContent_Symbols_Plottable);
}

uint64_t type metadata accessor for ModifiedChartContent_Symbols_Plottable()
{
  return swift_getGenericMetadata();
}

_UNKNOWN **sub_21F93EF24()
{
  return &off_26B590DE0;
}

_UNKNOWN **sub_21F93EF30()
{
  return &off_26B590BB8;
}

uint64_t sub_21F93EF3C(uint64_t *a1)
{
  return sub_21F93EFAC(a1, (void (*)(uint64_t, uint64_t, uint64_t, void))type metadata accessor for ModifiedChartContent_SymbolAreas_KeyPath);
}

uint64_t type metadata accessor for ModifiedChartContent_SymbolAreas_KeyPath()
{
  return sub_21F764F08();
}

uint64_t sub_21F93EF80(uint64_t *a1)
{
  return sub_21F93EFAC(a1, (void (*)(uint64_t, uint64_t, uint64_t, void))type metadata accessor for ModifiedChartContent_SymbolSizes_KeyPath);
}

uint64_t sub_21F93EFAC(uint64_t *a1, void (*a2)(uint64_t, uint64_t, uint64_t, void))
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  a2(255, v3, AssociatedTypeWitness, *(void *)(v4 + 8));

  return swift_getWitnessTable();
}

uint64_t type metadata accessor for ModifiedChartContent_SymbolSizes_KeyPath()
{
  return sub_21F764F08();
}

uint64_t sub_21F93F044(uint64_t *a1)
{
  return sub_21F93F070(a1, (void (*)(uint64_t, void *))type metadata accessor for ModifiedChartContent_SymbolSizes_Plottable);
}

uint64_t sub_21F93F070(uint64_t *a1, void (*a2)(uint64_t, void *))
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v5 + 8);
  v10[0] = v3;
  v10[1] = AssociatedTypeWitness;
  void v10[2] = v4;
  v10[3] = v8;
  v10[4] = v6;
  a2(255, v10);
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for ModifiedChartContent_SymbolSizes_Plottable()
{
  return swift_getGenericMetadata();
}

_UNKNOWN **sub_21F93F118()
{
  return &off_26B590B30;
}

_UNKNOWN **sub_21F93F124()
{
  return &off_26B590DE0;
}

_UNKNOWN **sub_21F93F130()
{
  return &off_26B590DE0;
}

_UNKNOWN **sub_21F93F13C()
{
  return &off_26B590DE0;
}

_UNKNOWN **sub_21F93F148()
{
  return &off_26B590AF0;
}

_UNKNOWN **sub_21F93F154()
{
  return &off_26B590DE0;
}

uint64_t sub_21F93F160()
{
  return sub_21F944EE0();
}

uint64_t *sub_21F93F170(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_21F93F26C(uint64_t a1, uint64_t a2)
{
  return sub_21F944A6C(a1, a2, MEMORY[0x263F8EEA0]);
}

uint64_t sub_21F93F284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 48) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 48) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_21F93F304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 40) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 40) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21F93F390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21F944AF0(a1, a2, a3, MEMORY[0x263F8EEA0]);
}

uint64_t type metadata accessor for ModifiedChartContent_Filters()
{
  return sub_21F764F08();
}

uint64_t sub_21F93F3C8()
{
  return sub_21F944EE0();
}

uint64_t *sub_21F93F3D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = v10[1];
    uint64_t v12 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v12 = *v10;
    v12[1] = v11;
  }
  swift_retain();
  return v4;
}

uint64_t sub_21F93F4D0(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();

  return swift_release();
}

uint64_t sub_21F93F540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  return a1;
}

uint64_t sub_21F93F5C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_21F93F64C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(_OWORD *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_21F93F6D0(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x21F93F81CLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_21F93F830(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x21F93FA10);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *uint64_t v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata accessor for ModifiedChartContent_TransformEnvironment()
{
  return sub_21F764F08();
}

uint64_t sub_21F93FA74(uint64_t a1, uint64_t a2)
{
  return sub_21F944A6C(a1, a2, MEMORY[0x263F8EED8]);
}

uint64_t sub_21F93FA8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21F944AF0(a1, a2, a3, MEMORY[0x263F8EED8]);
}

uint64_t sub_21F93FAA4()
{
  return sub_21F944EE0();
}

uint64_t type metadata accessor for ModifiedChartContent_SymbolSize()
{
  return sub_21F764F08();
}

uint64_t sub_21F93FAE8(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void sub_21F93FCE0(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x21F93FFACLL);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for ModifiedChartContent_SymbolView()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for ModifiedChartContent_Symbol()
{
  return sub_21F764F08();
}

uint64_t type metadata accessor for ModifiedChartContent_LineStyle()
{
  return sub_21F764F08();
}

uint64_t sub_21F94001C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21F9400C0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8) + 129 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    uint64_t v10 = v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8);
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v33 = a1;
    unint64_t v11 = ((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v12 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)unint64_t v11 = *(unsigned char *)v12;
    uint64_t v13 = *(void *)(v12 + 8);
    *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
    *(void *)(v11 + 8) = v13;
    uint64_t v14 = *(void *)(v12 + 48);
    *(void *)(v11 + 48) = v14;
    *(void *)(v11 + 56) = *(void *)(v12 + 56);
    (**(void (***)(uint64_t, uint64_t))(v14 - 8))(v11 + 24, v12 + 24);
    *(_OWORD *)(v11 + 64) = *(_OWORD *)(v12 + 64);
    unint64_t v15 = (v11 + 87) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v16 = (v12 + 87) & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)unint64_t v15 = *(unsigned char *)v16;
    uint64_t v17 = *(void *)(v16 + 8);
    *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
    *(void *)(v15 + 8) = v17;
    if (*(void *)(v16 + 48))
    {
      uint64_t v18 = *(void *)(v16 + 24);
      uint64_t v19 = *(void *)(v16 + 32);
      char v20 = *(unsigned char *)(v16 + 40);
      sub_21F7652C0(v18, v19, v20);
      *(void *)(v15 + 24) = v18;
      *(void *)(v15 + 32) = v19;
      *(unsigned char *)(v15 + 40) = v20;
      *(void *)(v15 + 48) = *(void *)(v16 + 48);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v21 = *(_OWORD *)(v16 + 40);
      *(_OWORD *)(v15 + 24) = *(_OWORD *)(v16 + 24);
      *(_OWORD *)(v15 + 40) = v21;
    }
    uint64_t v22 = *(void *)(v16 + 56);
    uint64_t v23 = *(void *)(v16 + 64);
    uint64_t v24 = *(void *)(v16 + 72);
    uint64_t v25 = *(void *)(v16 + 80);
    uint64_t v26 = *(void *)(v16 + 88);
    uint64_t v27 = *(void *)(v16 + 96);
    uint64_t v28 = *(void *)(v16 + 104);
    uint64_t v29 = *(void *)(v16 + 112);
    uint64_t v32 = *(void *)(v16 + 120);
    char v30 = *(unsigned char *)(v16 + 128);
    sub_21F8512F0(v22, v23, v24, v25, v26, v27, v28, v29, v32, v30);
    *(void *)(v15 + 56) = v22;
    *(void *)(v15 + 64) = v23;
    *(void *)(v15 + 72) = v24;
    *(void *)(v15 + 80) = v25;
    *(void *)(v15 + 88) = v26;
    *(void *)(v15 + 96) = v27;
    *(void *)(v15 + 104) = v28;
    *(void *)(v15 + 112) = v29;
    *(void *)(v15 + 120) = v32;
    *(unsigned char *)(v15 + 128) = v30;
    return v33;
  }
  return (uint64_t *)v10;
}

uint64_t sub_21F940328(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  _s6Charts15AnyChartContentVwxx_0(v4 + 24);
  unint64_t v5 = (v4 + 87) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v5 + 48))
  {
    sub_21F7656A8(*(void *)(v5 + 24), *(void *)(v5 + 32), *(unsigned char *)(v5 + 40));
    swift_bridgeObjectRelease();
  }
  return sub_21F83E99C(*(void *)(v5 + 56), *(void *)(v5 + 64), *(void *)(v5 + 72), *(void *)(v5 + 80), *(void *)(v5 + 88), *(void *)(v5 + 96), *(void *)(v5 + 104), *(void *)(v5 + 112), *(void *)(v5 + 120), *(unsigned char *)(v5 + 128));
}

uint64_t sub_21F9403DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  uint64_t v28 = a1;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  LOBYTE(v6) = *(unsigned char *)(v8 + 16);
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  *(unsigned char *)(v7 + 16) = v6;
  uint64_t v9 = *(void *)(v8 + 48);
  *(void *)(v7 + 48) = v9;
  *(void *)(v7 + 56) = *(void *)(v8 + 56);
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(v7 + 24, v8 + 24);
  *(_OWORD *)(v7 + 64) = *(_OWORD *)(v8 + 64);
  unint64_t v10 = (v7 + 87) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v8 + 87) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v10 = *(unsigned char *)v11;
  uint64_t v12 = *(void *)(v11 + 8);
  *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
  *(void *)(v10 + 8) = v12;
  if (*(void *)(v11 + 48))
  {
    uint64_t v13 = *(void *)(v11 + 24);
    uint64_t v14 = *(void *)(v11 + 32);
    char v15 = *(unsigned char *)(v11 + 40);
    sub_21F7652C0(v13, v14, v15);
    *(void *)(v10 + 24) = v13;
    *(void *)(v10 + 32) = v14;
    *(unsigned char *)(v10 + 40) = v15;
    *(void *)(v10 + 48) = *(void *)(v11 + 48);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v16 = *(_OWORD *)(v11 + 40);
    *(_OWORD *)(v10 + 24) = *(_OWORD *)(v11 + 24);
    *(_OWORD *)(v10 + 40) = v16;
  }
  uint64_t v17 = *(void *)(v11 + 56);
  uint64_t v18 = *(void *)(v11 + 64);
  uint64_t v19 = *(void *)(v11 + 72);
  uint64_t v20 = *(void *)(v11 + 80);
  uint64_t v21 = *(void *)(v11 + 88);
  uint64_t v22 = *(void *)(v11 + 96);
  uint64_t v23 = *(void *)(v11 + 104);
  uint64_t v24 = *(void *)(v11 + 112);
  uint64_t v27 = *(void *)(v11 + 120);
  char v25 = *(unsigned char *)(v11 + 128);
  sub_21F8512F0(v17, v18, v19, v20, v21, v22, v23, v24, v27, v25);
  *(void *)(v10 + 56) = v17;
  *(void *)(v10 + 64) = v18;
  *(void *)(v10 + 72) = v19;
  *(void *)(v10 + 80) = v20;
  *(void *)(v10 + 88) = v21;
  *(void *)(v10 + 96) = v22;
  *(void *)(v10 + 104) = v23;
  *(void *)(v10 + 112) = v24;
  uint64_t result = v28;
  *(void *)(v10 + 120) = v27;
  *(unsigned char *)(v10 + 128) = v25;
  return result;
}

uint64_t sub_21F9405B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  uint64_t v47 = a1;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  LOBYTE(v6) = *(unsigned char *)(v8 + 16);
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  *(unsigned char *)(v7 + 16) = v6;
  sub_21F7ABEA8((uint64_t *)(v7 + 24), (uint64_t *)(v8 + 24));
  *(_OWORD *)(v7 + 64) = *(_OWORD *)(v8 + 64);
  unint64_t v9 = (v7 + 87) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 87) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v9 = *(unsigned char *)v10;
  uint64_t v11 = *(void *)(v10 + 8);
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  *(void *)(v9 + 8) = v11;
  uint64_t v12 = (_OWORD *)(v9 + 24);
  uint64_t v13 = (_OWORD *)(v10 + 24);
  uint64_t v14 = *(void *)(v10 + 48);
  if (*(void *)(v9 + 48))
  {
    if (v14)
    {
      uint64_t v15 = *(void *)(v10 + 24);
      uint64_t v16 = *(void *)(v10 + 32);
      char v17 = *(unsigned char *)(v10 + 40);
      sub_21F7652C0(v15, v16, v17);
      uint64_t v18 = *(void *)(v9 + 24);
      uint64_t v19 = *(void *)(v9 + 32);
      char v20 = *(unsigned char *)(v9 + 40);
      *(void *)(v9 + 24) = v15;
      *(void *)(v9 + 32) = v16;
      *(unsigned char *)(v9 + 40) = v17;
      sub_21F7656A8(v18, v19, v20);
      *(void *)(v9 + 48) = *(void *)(v10 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21F7D26B8(v9 + 24);
      long long v24 = *(_OWORD *)(v10 + 40);
      *uint64_t v12 = *v13;
      *(_OWORD *)(v9 + 40) = v24;
    }
  }
  else if (v14)
  {
    uint64_t v21 = *(void *)(v10 + 24);
    uint64_t v22 = *(void *)(v10 + 32);
    char v23 = *(unsigned char *)(v10 + 40);
    sub_21F7652C0(v21, v22, v23);
    *(void *)(v9 + 24) = v21;
    *(void *)(v9 + 32) = v22;
    *(unsigned char *)(v9 + 40) = v23;
    *(void *)(v9 + 48) = *(void *)(v10 + 48);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v25 = *(_OWORD *)(v10 + 40);
    *uint64_t v12 = *v13;
    *(_OWORD *)(v9 + 40) = v25;
  }
  uint64_t v26 = *(void *)(v10 + 56);
  uint64_t v27 = *(void *)(v10 + 64);
  uint64_t v28 = *(void *)(v10 + 72);
  uint64_t v29 = *(void *)(v10 + 80);
  uint64_t v30 = *(void *)(v10 + 88);
  uint64_t v31 = *(void *)(v10 + 96);
  uint64_t v32 = *(void *)(v10 + 104);
  uint64_t v33 = *(void *)(v10 + 112);
  uint64_t v46 = *(void *)(v10 + 120);
  char v34 = *(unsigned char *)(v10 + 128);
  sub_21F8512F0(v26, v27, v28, v29, v30, v31, v32, v33, v46, v34);
  uint64_t v35 = *(void *)(v9 + 56);
  uint64_t v36 = *(void *)(v9 + 64);
  uint64_t v37 = *(void *)(v9 + 72);
  uint64_t v38 = *(void *)(v9 + 80);
  uint64_t v39 = *(void *)(v9 + 88);
  uint64_t v40 = *(void *)(v9 + 96);
  uint64_t v41 = *(void *)(v9 + 104);
  uint64_t v42 = *(void *)(v9 + 112);
  uint64_t v43 = *(void *)(v9 + 120);
  char v44 = *(unsigned char *)(v9 + 128);
  *(void *)(v9 + 56) = v26;
  *(void *)(v9 + 64) = v27;
  *(void *)(v9 + 72) = v28;
  *(void *)(v9 + 80) = v29;
  *(void *)(v9 + 88) = v30;
  *(void *)(v9 + 96) = v31;
  *(void *)(v9 + 104) = v32;
  *(void *)(v9 + 112) = v33;
  *(void *)(v9 + 120) = v46;
  *(unsigned char *)(v9 + 128) = v34;
  sub_21F83E99C(v35, v36, v37, v38, v39, v40, v41, v42, v43, v44);
  return v47;
}

uint64_t sub_21F9407DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v7 = *v8;
  long long v9 = v8[4];
  long long v11 = v8[1];
  long long v10 = v8[2];
  v7[3] = v8[3];
  _OWORD v7[4] = v9;
  v7[1] = v11;
  v7[2] = v10;
  unint64_t v12 = ((unint64_t)v7 + 87) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = ((unint64_t)v8 + 87) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v12 = *(_OWORD *)v13;
  long long v14 = *(_OWORD *)(v13 + 64);
  long long v16 = *(_OWORD *)(v13 + 16);
  long long v15 = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(v12 + 48) = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(v12 + 64) = v14;
  *(_OWORD *)(v12 + 16) = v16;
  *(_OWORD *)(v12 + 32) = v15;
  long long v18 = *(_OWORD *)(v13 + 96);
  long long v17 = *(_OWORD *)(v13 + 112);
  long long v19 = *(_OWORD *)(v13 + 80);
  *(unsigned char *)(v12 + 128) = *(unsigned char *)(v13 + 128);
  *(_OWORD *)(v12 + 96) = v18;
  *(_OWORD *)(v12 + 112) = v17;
  *(_OWORD *)(v12 + 80) = v19;
  return a1;
}

uint64_t sub_21F9408A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  LOBYTE(v6) = *(unsigned char *)(v8 + 16);
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  *(unsigned char *)(v7 + 16) = v6;
  _s6Charts15AnyChartContentVwxx_0(v7 + 24);
  long long v9 = *(_OWORD *)(v8 + 24);
  long long v10 = *(_OWORD *)(v8 + 40);
  *(void *)(v7 + 56) = *(void *)(v8 + 56);
  *(_OWORD *)(v7 + 40) = v10;
  *(_OWORD *)(v7 + 24) = v9;
  *(_OWORD *)(v7 + 64) = *(_OWORD *)(v8 + 64);
  unint64_t v11 = (v7 + 87) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v8 + 87) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v11 = *(unsigned char *)v12;
  uint64_t v13 = *(void *)(v12 + 8);
  *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
  *(void *)(v11 + 8) = v13;
  long long v14 = (_OWORD *)(v11 + 24);
  long long v15 = (_OWORD *)(v12 + 24);
  if (*(void *)(v11 + 48))
  {
    if (*(void *)(v12 + 48))
    {
      char v16 = *(unsigned char *)(v12 + 40);
      uint64_t v17 = *(void *)(v11 + 24);
      uint64_t v18 = *(void *)(v11 + 32);
      char v19 = *(unsigned char *)(v11 + 40);
      *(_OWORD *)(v11 + 24) = *(_OWORD *)(v12 + 24);
      *(unsigned char *)(v11 + 40) = v16;
      sub_21F7656A8(v17, v18, v19);
      *(void *)(v11 + 48) = *(void *)(v12 + 48);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21F7D26B8(v11 + 24);
      long long v21 = *(_OWORD *)(v12 + 40);
      *long long v14 = *v15;
      *(_OWORD *)(v11 + 40) = v21;
    }
  }
  else
  {
    long long v20 = *(_OWORD *)(v12 + 40);
    *long long v14 = *v15;
    *(_OWORD *)(v11 + 40) = v20;
  }
  uint64_t v22 = *(void *)(v12 + 120);
  char v23 = *(unsigned char *)(v12 + 128);
  uint64_t v24 = *(void *)(v11 + 56);
  uint64_t v25 = *(void *)(v11 + 64);
  uint64_t v26 = *(void *)(v11 + 72);
  uint64_t v27 = *(void *)(v11 + 80);
  uint64_t v28 = *(void *)(v11 + 88);
  uint64_t v29 = *(void *)(v11 + 96);
  uint64_t v30 = *(void *)(v11 + 104);
  uint64_t v31 = *(void *)(v11 + 112);
  uint64_t v32 = *(void *)(v11 + 120);
  char v33 = *(unsigned char *)(v11 + 128);
  long long v34 = *(_OWORD *)(v12 + 72);
  long long v35 = *(_OWORD *)(v12 + 88);
  long long v36 = *(_OWORD *)(v12 + 104);
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(v12 + 56);
  *(_OWORD *)(v11 + 72) = v34;
  *(_OWORD *)(v11 + 88) = v35;
  *(_OWORD *)(v11 + 104) = v36;
  *(void *)(v11 + 120) = v22;
  *(unsigned char *)(v11 + 128) = v23;
  sub_21F83E99C(v24, v25, v26, v27, v28, v29, v30, v31, v32, v33);
  return a1;
}

uint64_t sub_21F940A4C(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8) + 129;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * (((((v6 + 7) & 0xF8) + 87) & 0xF8) - 127));
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x21F940BBCLL);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * (((((v6 + 7) & 0xF8) + 87) & 0xF8) - 127));
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((((v6 + 7) & 0xFFFFFFF8) + 87) & 0xFFFFFFF8) == 0xFFFFFF80) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8) + 48);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

double sub_21F940BD0(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8) + 129;
  char v11 = 8 * (((((v9 + 7) & 0xF8) + 87) & 0xF8) - 127);
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_46;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v7 < 0x7FFFFFFF)
            {
              unint64_t v22 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
              if ((a2 & 0x80000000) != 0)
              {
                *(void *)(v22 + 72) = 0;
                double result = 0.0;
                *(_OWORD *)(v22 + 56) = 0u;
                *(_OWORD *)(v22 + 40) = 0u;
                *(_OWORD *)(v22 + 24) = 0u;
                *(_OWORD *)(v22 + 8) = 0u;
                *(void *)unint64_t v22 = a2 ^ 0x80000000;
              }
              else
              {
                *(void *)(v22 + 48) = a2 - 1;
              }
            }
            else
            {
              long long v21 = *(void (**)(void))(v6 + 56);
              v21();
            }
          }
          break;
      }
      return result;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = (~(_BYTE)v8 + a2);
  if (v10 < 4) {
    int v18 = (v16 >> v11) + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 >= 4) {
    unsigned int v19 = v16;
  }
  else {
    unsigned int v19 = v17;
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v19;
  }
  else {
    *(_DWORD *)a1 = v19;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x21F940E04);
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_21F940E2C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for PlottableValue();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_21F940F14(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = (v7 | 7) + *(void *)(v5 + 64);
  uint64_t v9 = v7 + 32;
  unint64_t v10 = *(void *)(v6 + 64);
  if (((v10 + v7) & ~v7) + v10 <= v10) {
    uint64_t v11 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v11 = ((v10 + v7) & ~v7) + v10;
  }
  unsigned int v12 = v7 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v12 > 7
    || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) != 0
    || ((((v7 + 32) & ~v7) + v11 + 1 + (v8 & ~(v7 | 7))) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + (((v12 | 7) + 16) & ~(unint64_t)(v12 | 7)));
    swift_retain();
  }
  else
  {
    uint64_t v37 = v10 + v7;
    uint64_t v38 = ((v7 + 32) & ~v7) + v11 + 1;
    uint64_t v39 = *(void *)(a3 + 24);
    uint64_t v16 = ~(v7 | 7);
    uint64_t v17 = ~v7;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v18 = ((unint64_t)v4 + v8) & v16;
    unint64_t v19 = ((unint64_t)a2 + v8) & v16;
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    char v22 = *(unsigned char *)(v19 + 16);
    sub_21F7652C0(*(void *)v19, v21, v22);
    *(void *)unint64_t v18 = v20;
    *(void *)(v18 + 8) = v21;
    *(unsigned char *)(v18 + 16) = v22;
    *(void *)(v18 + 24) = *(void *)(v19 + 24);
    uint64_t v36 = v17;
    char v23 = (unsigned __int8 *)((v9 + v19) & v17);
    unsigned int v24 = v23[v11];
    swift_bridgeObjectRetain();
    if (v24 < 2)
    {
      unint64_t v26 = (v9 + v18) & v17;
    }
    else
    {
      if (v11 <= 3) {
        uint64_t v25 = v11;
      }
      else {
        uint64_t v25 = 4;
      }
      unint64_t v26 = (v9 + v18) & v17;
      switch(v25)
      {
        case 1:
          int v27 = *v23;
          goto LABEL_23;
        case 2:
          int v27 = *(unsigned __int16 *)v23;
          goto LABEL_23;
        case 3:
          int v27 = *(unsigned __int16 *)v23 | (v23[2] << 16);
          goto LABEL_23;
        case 4:
          int v27 = *(_DWORD *)v23;
LABEL_23:
          int v28 = (v27 | ((v24 - 2) << (8 * v11))) + 2;
          unsigned int v29 = v27 + 2;
          if (v11 >= 4) {
            unsigned int v24 = v29;
          }
          else {
            unsigned int v24 = v28;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v30 = *(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v6 + 16);
    v30(v26, v23, v39);
    if (v24 == 1)
    {
      v30((v37 + v26) & v36, (unsigned __int8 *)((unint64_t)&v23[v37] & v36), v39);
      char v31 = 1;
    }
    else
    {
      char v31 = 0;
    }
    *(unsigned char *)(v26 + v11) = v31;
    *(unsigned char *)(v38 + v18) = *(unsigned char *)(v38 + v19);
    unint64_t v32 = (v38 + v18) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v33 = (v38 + v19) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v34 = *(void *)(v33 + 8);
    *(unsigned char *)(v32 + 16) = *(unsigned char *)(v33 + 16);
    *(void *)(v32 + 8) = v34;
  }
  return v4;
}

uint64_t sub_21F941218(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v4 + 56);
  uint64_t v21 = v6;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v7 + a1 + (v8 | 7)) & ~(v8 | 7);
  sub_21F7656A8(*(void *)v9, *(void *)(v9 + 8), *(unsigned char *)(v9 + 0x10));
  swift_bridgeObjectRelease();
  unint64_t v10 = (unsigned __int8 *)((v8 + v9 + 32) & ~v8);
  unint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = v11 + v8;
  if (((v11 + v8) & ~v8) + v11 > v11) {
    v11 += (v11 + v8) & ~v8;
  }
  unsigned int v13 = v10[v11];
  if (v13 < 2)
  {
    uint64_t v15 = v21;
  }
  else
  {
    if (v11 <= 3) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 4;
    }
    uint64_t v15 = v21;
    switch(v14)
    {
      case 1:
        int v16 = *v10;
        goto LABEL_13;
      case 2:
        int v16 = *(unsigned __int16 *)v10;
        goto LABEL_13;
      case 3:
        int v16 = *(unsigned __int16 *)v10 | (v10[2] << 16);
        goto LABEL_13;
      case 4:
        int v16 = *(_DWORD *)v10;
LABEL_13:
        int v17 = (v16 | ((v13 - 2) << (8 * v11))) + 2;
        unsigned int v18 = v16 + 2;
        if (v11 >= 4) {
          unsigned int v13 = v18;
        }
        else {
          unsigned int v13 = v17;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v20 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v15 + 8);
  uint64_t result = v20(v10, v5);
  if (v13 == 1)
  {
    return v20((unsigned __int8 *)((unint64_t)&v10[v12] & ~v8), v5);
  }
  return result;
}

uint64_t sub_21F941414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v37 = *(void *)(a3 + 24);
  uint64_t v38 = a1;
  uint64_t v7 = *(void *)(v37 - 8);
  uint64_t v8 = v7;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v9 | 7) + *(void *)(v6 + 48);
  uint64_t v11 = (v10 + a1) & ~(v9 | 7);
  uint64_t v12 = (v10 + a2) & ~(v9 | 7);
  uint64_t v13 = *(void *)v12;
  uint64_t v14 = *(void *)(v12 + 8);
  char v15 = *(unsigned char *)(v12 + 0x10);
  sub_21F7652C0(*(void *)v12, v14, v15);
  uint64_t v16 = v7;
  *(void *)uint64_t v11 = v13;
  *(void *)(v11 + 8) = v14;
  *(unsigned char *)(v11 + 16) = v15;
  *(void *)(v11 + 24) = *(void *)(v12 + 24);
  uint64_t v17 = (v9 + 32 + v11) & ~v9;
  uint64_t v36 = v9 + 32;
  unsigned int v18 = (unsigned __int8 *)((v9 + 32 + v12) & ~v9);
  unint64_t v19 = *(void *)(v16 + 64);
  uint64_t v35 = v19 + v9;
  if (((v19 + v9) & ~v9) + v19 <= v19) {
    uint64_t v20 = *(void *)(v16 + 64);
  }
  else {
    uint64_t v20 = ((v19 + v9) & ~v9) + v19;
  }
  unsigned int v21 = v18[v20];
  swift_bridgeObjectRetain();
  if (v21 < 2)
  {
    uint64_t v23 = v37;
  }
  else
  {
    if (v20 <= 3) {
      uint64_t v22 = v20;
    }
    else {
      uint64_t v22 = 4;
    }
    uint64_t v23 = v37;
    switch(v22)
    {
      case 1:
        int v24 = *v18;
        goto LABEL_14;
      case 2:
        int v24 = *(unsigned __int16 *)v18;
        goto LABEL_14;
      case 3:
        int v24 = *(unsigned __int16 *)v18 | (*(unsigned __int8 *)(((v9 + 32 + v12) & ~v9) + 2) << 16);
        goto LABEL_14;
      case 4:
        int v24 = *(_DWORD *)v18;
LABEL_14:
        int v25 = (v24 | ((v21 - 2) << (8 * v20))) + 2;
        unsigned int v26 = v24 + 2;
        if (v20 >= 4) {
          unsigned int v21 = v26;
        }
        else {
          unsigned int v21 = v25;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v27 = ~v9;
  int v28 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v8 + 16);
  v28(v17, v18, v23);
  if (v21 == 1)
  {
    v28((v35 + v17) & v27, (unsigned __int8 *)((unint64_t)&v18[v35] & v27), v23);
    char v29 = 1;
  }
  else
  {
    char v29 = 0;
  }
  *(unsigned char *)(v17 + v20) = v29;
  uint64_t v30 = (v36 & v27) + v20 + 1;
  uint64_t v31 = v30 + v11;
  uint64_t v32 = v30 + v12;
  *(unsigned char *)uint64_t v31 = *(unsigned char *)v32;
  v31 &= 0xFFFFFFFFFFFFFFF8;
  v32 &= 0xFFFFFFFFFFFFFFF8;
  uint64_t v33 = *(void *)(v32 + 8);
  *(unsigned char *)(v31 + 16) = *(unsigned char *)(v32 + 16);
  *(void *)(v31 + 8) = v33;
  return v38;
}

uint64_t sub_21F941684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v49 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v49 - 8);
  uint64_t v8 = v7;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v9 | 7) + *(void *)(v6 + 40);
  uint64_t v11 = (v10 + a1) & ~(v9 | 7);
  uint64_t v12 = (v10 + a2) & ~(v9 | 7);
  uint64_t v13 = *(void *)v12;
  uint64_t v14 = *(void *)(v12 + 8);
  char v15 = *(unsigned char *)(v12 + 0x10);
  sub_21F7652C0(*(void *)v12, v14, v15);
  uint64_t v16 = *(void *)v11;
  uint64_t v17 = *(void *)(v11 + 8);
  char v18 = *(unsigned char *)(v11 + 16);
  *(void *)uint64_t v11 = v13;
  *(void *)(v11 + 8) = v14;
  *(unsigned char *)(v11 + 16) = v15;
  sub_21F7656A8(v16, v17, v18);
  *(void *)(v11 + 24) = *(void *)(v12 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = v7;
  uint64_t v20 = v9 + 32;
  uint64_t v21 = v9 + 32 + v11;
  uint64_t v22 = ~v9;
  uint64_t v23 = (unsigned __int8 *)(v21 & ~v9);
  int v24 = (unsigned __int8 *)((v9 + 32 + v12) & ~v9);
  unint64_t v25 = *(void *)(v19 + 64);
  if (((v25 + v9) & ~v9) + v25 <= v25) {
    uint64_t v26 = *(void *)(v19 + 64);
  }
  else {
    uint64_t v26 = ((v25 + v9) & ~v9) + v25;
  }
  if (v23 != v24)
  {
    uint64_t v47 = ~v9;
    uint64_t v48 = v8;
    unsigned int v27 = v23[v26];
    if (v27 >= 2)
    {
      if (v26 <= 3) {
        uint64_t v28 = v26;
      }
      else {
        uint64_t v28 = 4;
      }
      switch(v28)
      {
        case 1:
          int v29 = *v23;
          goto LABEL_14;
        case 2:
          int v29 = *(unsigned __int16 *)v23;
          goto LABEL_14;
        case 3:
          int v29 = *(unsigned __int16 *)v23 | (*(unsigned __int8 *)((v21 & ~v9) + 2) << 16);
          goto LABEL_14;
        case 4:
          int v29 = *(_DWORD *)v23;
LABEL_14:
          int v30 = (v29 | ((v27 - 2) << (8 * v26))) + 2;
          unsigned int v31 = v29 + 2;
          if (v26 >= 4) {
            unsigned int v27 = v31;
          }
          else {
            unsigned int v27 = v30;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v45 = v9 + 32 + v11;
    uint64_t v46 = a1;
    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
    v32(v21 & ~v9, v49);
    if (v27 == 1) {
      v32(((v45 | v9) + v25) & v47, v49);
    }
    unsigned int v33 = v24[v26];
    if (v33 >= 2)
    {
      if (v26 <= 3) {
        uint64_t v34 = v26;
      }
      else {
        uint64_t v34 = 4;
      }
      switch(v34)
      {
        case 1:
          int v35 = *v24;
          goto LABEL_28;
        case 2:
          int v35 = *(unsigned __int16 *)v24;
          goto LABEL_28;
        case 3:
          int v35 = *(unsigned __int16 *)((v9 + 32 + v12) & ~v9) | (*(unsigned __int8 *)(((v9 + 32 + v12) & ~v9) + 2) << 16);
          goto LABEL_28;
        case 4:
          int v35 = *(_DWORD *)v24;
LABEL_28:
          int v36 = (v35 | ((v33 - 2) << (8 * v26))) + 2;
          unsigned int v37 = v35 + 2;
          if (v26 >= 4) {
            unsigned int v33 = v37;
          }
          else {
            unsigned int v33 = v36;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v38 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v48 + 16);
    v38(v23, v24, v49);
    if (v33 == 1)
    {
      v38((unsigned __int8 *)(((v45 | v9) + v25) & v47), (unsigned __int8 *)((((v9 + 32 + v12) | v9) + v25) & v47), v49);
      uint64_t v22 = ~v9;
      char v39 = 1;
      uint64_t v20 = v9 + 32;
    }
    else
    {
      char v39 = 0;
      uint64_t v20 = v9 + 32;
      uint64_t v22 = ~v9;
    }
    v23[v26] = v39;
    a1 = v46;
  }
  uint64_t v40 = (v20 & v22) + v26 + 1;
  uint64_t v41 = v40 + v11;
  uint64_t v42 = v40 + v12;
  *(unsigned char *)uint64_t v41 = *(unsigned char *)v42;
  v41 &= 0xFFFFFFFFFFFFFFF8;
  v42 &= 0xFFFFFFFFFFFFFFF8;
  uint64_t v43 = *(void *)(v42 + 8);
  *(unsigned char *)(v41 + 16) = *(unsigned char *)(v42 + 16);
  *(void *)(v41 + 8) = v43;
  return a1;
}

uint64_t sub_21F941A08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + *(void *)(v6 + 32);
  uint64_t v11 = (_OWORD *)((v10 + a1) & ~(v9 | 7));
  uint64_t v12 = (_OWORD *)((v10 + a2) & ~(v9 | 7));
  long long v13 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v13;
  uint64_t v14 = ((unint64_t)v11 + v9 + 32) & ~v9;
  uint64_t v32 = v9 + 32;
  uint64_t v33 = a1;
  char v15 = (unsigned __int8 *)(((unint64_t)v12 + v9 + 32) & ~v9);
  unint64_t v16 = *(void *)(v8 + 64);
  uint64_t v31 = v16 + v9;
  if (((v16 + v9) & ~v9) + v16 <= v16) {
    uint64_t v17 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v17 = ((v16 + v9) & ~v9) + v16;
  }
  unsigned int v18 = v15[v17];
  if (v18 >= 2)
  {
    if (v17 <= 3) {
      uint64_t v19 = v17;
    }
    else {
      uint64_t v19 = 4;
    }
    switch(v19)
    {
      case 1:
        int v20 = *v15;
        goto LABEL_13;
      case 2:
        int v20 = *(unsigned __int16 *)v15;
        goto LABEL_13;
      case 3:
        int v20 = *(unsigned __int16 *)(((unint64_t)v12 + v9 + 32) & ~v9) | (*(unsigned __int8 *)((((unint64_t)v12 + v9 + 32) & ~v9) + 2) << 16);
        goto LABEL_13;
      case 4:
        int v20 = *(_DWORD *)v15;
LABEL_13:
        int v21 = (v20 | ((v18 - 2) << (8 * v17))) + 2;
        unsigned int v22 = v20 + 2;
        if (v17 >= 4) {
          unsigned int v18 = v22;
        }
        else {
          unsigned int v18 = v21;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v23 = ~v9;
  int v24 = *(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v8 + 32);
  v24(((unint64_t)v11 + v9 + 32) & ~v9, v15, v7);
  if (v18 == 1)
  {
    v24((v31 + v14) & v23, (unsigned __int8 *)((unint64_t)&v15[v31] & v23), v7);
    char v25 = 1;
  }
  else
  {
    char v25 = 0;
  }
  *(unsigned char *)(v14 + v17) = v25;
  uint64_t result = v33;
  uint64_t v27 = (v32 & v23) + v17 + 1;
  unint64_t v28 = (unint64_t)v11 + v27;
  unint64_t v29 = (unint64_t)v12 + v27;
  *(unsigned char *)unint64_t v28 = *(unsigned char *)v29;
  v28 &= 0xFFFFFFFFFFFFFFF8;
  v29 &= 0xFFFFFFFFFFFFFFF8;
  uint64_t v30 = *(void *)(v29 + 8);
  *(unsigned char *)(v28 + 16) = *(unsigned char *)(v29 + 16);
  *(void *)(v28 + 8) = v30;
  return result;
}

uint64_t sub_21F941C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v46 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v46 - 8);
  uint64_t v8 = v7;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v9 | 7) + *(void *)(v6 + 24);
  uint64_t v11 = (v10 + a1) & ~(v9 | 7);
  uint64_t v12 = (v10 + a2) & ~(v9 | 7);
  LOBYTE(v10) = *(unsigned char *)(v12 + 0x10);
  uint64_t v13 = *(void *)v11;
  uint64_t v14 = *(void *)(v11 + 8);
  char v15 = *(unsigned char *)(v11 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *(unsigned char *)(v11 + 16) = v10;
  sub_21F7656A8(v13, v14, v15);
  *(void *)(v11 + 24) = *(void *)(v12 + 24);
  swift_bridgeObjectRelease();
  uint64_t v16 = v9 + 32;
  uint64_t v17 = v9 + 32 + v11;
  uint64_t v18 = ~v9;
  uint64_t v19 = (unsigned __int8 *)(v17 & ~v9);
  uint64_t v20 = v9 + 32 + v12;
  unint64_t v21 = *(void *)(v7 + 64);
  if (((v21 + v9) & ~v9) + v21 <= v21) {
    uint64_t v22 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v22 = ((v21 + v9) & ~v9) + v21;
  }
  if (v19 != (unsigned __int8 *)(v20 & ~v9))
  {
    unsigned int v23 = v19[v22];
    uint64_t v45 = ~v9;
    uint64_t v42 = (unsigned __int8 *)(v20 & ~v9);
    if (v23 >= 2)
    {
      if (v22 <= 3) {
        uint64_t v24 = v22;
      }
      else {
        uint64_t v24 = 4;
      }
      switch(v24)
      {
        case 1:
          int v25 = *v19;
          goto LABEL_14;
        case 2:
          int v25 = *(unsigned __int16 *)v19;
          goto LABEL_14;
        case 3:
          int v25 = *(unsigned __int16 *)v19 | (*(unsigned __int8 *)((v17 & ~v9) + 2) << 16);
          goto LABEL_14;
        case 4:
          int v25 = *(_DWORD *)v19;
LABEL_14:
          int v26 = (v25 | ((v23 - 2) << (8 * v22))) + 2;
          unsigned int v27 = v25 + 2;
          if (v22 >= 4) {
            unsigned int v23 = v27;
          }
          else {
            unsigned int v23 = v26;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v43 = v9 + 32 + v11;
    uint64_t v44 = a1;
    unint64_t v28 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v28(v17 & ~v9, v46);
    if (v23 == 1) {
      v28(((v43 | v9) + v21) & v45, v46);
    }
    unsigned int v29 = v42[v22];
    if (v29 < 2)
    {
      uint64_t v31 = v46;
    }
    else
    {
      if (v22 <= 3) {
        uint64_t v30 = v22;
      }
      else {
        uint64_t v30 = 4;
      }
      uint64_t v31 = v46;
      switch(v30)
      {
        case 1:
          int v32 = *v42;
          goto LABEL_29;
        case 2:
          int v32 = *(unsigned __int16 *)v42;
          goto LABEL_29;
        case 3:
          int v32 = *(unsigned __int16 *)v42 | (v42[2] << 16);
          goto LABEL_29;
        case 4:
          int v32 = *(_DWORD *)v42;
LABEL_29:
          int v33 = (v32 | ((v29 - 2) << (8 * v22))) + 2;
          unsigned int v34 = v32 + 2;
          if (v22 >= 4) {
            unsigned int v29 = v34;
          }
          else {
            unsigned int v29 = v33;
          }
          break;
        default:
          break;
      }
    }
    int v35 = *(void (**)(unsigned __int8 *))(v8 + 32);
    v35(v19);
    if (v29 == 1)
    {
      ((void (*)(unint64_t, unint64_t, uint64_t))v35)(((v43 | v9) + v21) & v45, (((v9 + 32 + v12) | v9) + v21) & v45, v31);
      uint64_t v18 = ~v9;
      char v36 = 1;
      uint64_t v16 = v9 + 32;
      a1 = v44;
    }
    else
    {
      char v36 = 0;
      uint64_t v16 = v9 + 32;
      a1 = v44;
      uint64_t v18 = ~v9;
    }
    v19[v22] = v36;
  }
  uint64_t v37 = (v16 & v18) + v22 + 1;
  uint64_t v38 = v37 + v11;
  uint64_t v39 = v37 + v12;
  *(unsigned char *)uint64_t v38 = *(unsigned char *)v39;
  v38 &= 0xFFFFFFFFFFFFFFF8;
  v39 &= 0xFFFFFFFFFFFFFFF8;
  uint64_t v40 = *(void *)(v39 + 8);
  *(unsigned char *)(v38 + 16) = *(unsigned char *)(v39 + 16);
  *(void *)(v38 + 8) = v40;
  return a1;
}

uint64_t sub_21F941FB8(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  if (((v7 + v8) & ~v8) + v7 <= v7) {
    uint64_t v9 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v9 = ((v7 + v8) & ~v8) + v7;
  }
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = v8 | 7;
  uint64_t v12 = (v8 | 7) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (v10 < a2)
  {
    unint64_t v13 = ((((v8 + 32) & ~v8) + (v12 & ~v11) + v9 + 1) & 0xFFFFFFFFFFFFFFF8) + 17;
    unsigned int v14 = (a2 - v10 + 255) >> (8 * v13);
    if (v13 < 4) {
      unsigned int v15 = v14 + 1;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      unsigned int v16 = 4;
    }
    else {
      unsigned int v16 = 2;
    }
    if (v15 < 0x100) {
      unsigned int v16 = 1;
    }
    if (v15 >= 2) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    switch(v17)
    {
      case 1:
        int v18 = a1[v13];
        if (!a1[v13]) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v18 = *(unsigned __int16 *)&a1[v13];
        if (*(_WORD *)&a1[v13]) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x21F94219CLL);
      case 4:
        int v18 = *(_DWORD *)&a1[v13];
        if (!v18) {
          break;
        }
LABEL_25:
        int v20 = (v18 - 1) << (8 * v13);
        if (v13 >= 4) {
          int v20 = 0;
        }
        if (v13 == 1) {
          int v21 = *a1;
        }
        else {
          int v21 = *(_DWORD *)a1;
        }
        return v10 + (v21 | v20) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v22 = *(void *)(((unint64_t)&a1[v12] & ~v11) + 0x18);
  if (v22 >= 0xFFFFFFFF) {
    LODWORD(v22) = -1;
  }
  return (v22 + 1);
}

void sub_21F9421B0(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8);
  unint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  if (((v9 + v10) & ~v10) + v9 > v9) {
    v9 += (v9 + v10) & ~v10;
  }
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v12 = v10 | 7;
  uint64_t v13 = (v10 | 7) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v14 = ((v10 + 32) & ~v10) + v9 + 1;
  size_t v15 = ((v14 + (v13 & ~(v10 | 7))) & 0xFFFFFFFFFFFFFFF8) + 17;
  char v16 = 8 * v15;
  if (v11 >= a3)
  {
    int v20 = 0;
    if (v11 >= a2)
    {
LABEL_19:
      uint64_t v21 = ~v12;
      switch(v20)
      {
        case 1:
          a1[v15] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_36;
        case 2:
          *(_WORD *)&a1[v15] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_36;
        case 3:
          goto LABEL_59;
        case 4:
          *(_DWORD *)&a1[v15] = 0;
          goto LABEL_35;
        default:
LABEL_35:
          if (a2)
          {
LABEL_36:
            if (v7 < 0x7FFFFFFF)
            {
              unint64_t v25 = (unint64_t)&a1[v13];
              int v26 = (unsigned char *)(v25 & v21);
              if ((a2 & 0x80000000) != 0)
              {
                if (v14 <= 3) {
                  unsigned int v27 = a2 & ~(-1 << (8 * v14));
                }
                else {
                  unsigned int v27 = a2 ^ 0x80000000;
                }
                if (v14)
                {
                  if (v14 <= 3) {
                    int v28 = v14;
                  }
                  else {
                    int v28 = 4;
                  }
                  bzero(v26, v14);
                  switch(v28)
                  {
                    case 2:
                      *(_WORD *)int v26 = v27;
                      break;
                    case 3:
                      *(_WORD *)int v26 = v27;
                      v26[2] = BYTE2(v27);
                      break;
                    case 4:
                      *(_DWORD *)int v26 = v27;
                      break;
                    default:
                      *int v26 = v27;
                      break;
                  }
                }
              }
              else
              {
                *(void *)((v25 & v21) + 0x18) = a2 - 1;
              }
            }
            else
            {
              uint64_t v24 = *(void (**)(void))(v6 + 56);
              v24();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v17 = (a3 - v11 + 255) >> v16;
    if (v15 <= 3) {
      unsigned int v18 = v17 + 1;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v18 >= 0x10000) {
      int v19 = 4;
    }
    else {
      int v19 = 2;
    }
    if (v18 < 0x100) {
      int v19 = 1;
    }
    if (v18 >= 2) {
      int v20 = v19;
    }
    else {
      int v20 = 0;
    }
    if (v11 >= a2) {
      goto LABEL_19;
    }
  }
  if (v15 < 4) {
    unsigned int v22 = ((~v11 + a2) >> v16) + 1;
  }
  else {
    unsigned int v22 = 1;
  }
  if (v15 >= 4) {
    unsigned int v23 = ~v11 + a2;
  }
  else {
    unsigned int v23 = (~(_BYTE)v11 + a2);
  }
  bzero(a1, v15);
  if (v15 == 1) {
    *a1 = v23;
  }
  else {
    *(_DWORD *)a1 = v23;
  }
  switch(v20)
  {
    case 1:
      a1[v15] = v22;
      break;
    case 2:
      *(_WORD *)&a1[v15] = v22;
      break;
    case 3:
LABEL_59:
      __break(1u);
      JUMPOUT(0x21F9424B4);
    case 4:
      *(_DWORD *)&a1[v15] = v22;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for ModifiedChartContent_Position()
{
  return swift_getGenericMetadata();
}

uint64_t sub_21F942504()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for PlottableProjection();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_21F9425D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v61 = *(void *)(a3 + 16);
  uint64_t v3 = *(void *)(v61 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v60 = *(void *)(a3 + 32);
  uint64_t v5 = *(void *)(v60 - 8);
  uint64_t v59 = v5;
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = sub_21FA24310();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v57 = v8;
  uint64_t v58 = v7;
  int v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = sub_21FA24320();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = v5;
  unint64_t v13 = *(_DWORD *)(v11 + 80);
  unint64_t v14 = v9 | v13 | v6;
  uint64_t v15 = v14 | 7;
  uint64_t v16 = (v14 | 7) + v4;
  uint64_t v17 = v16 & ~(v14 | 7);
  unint64_t v18 = v14 + 32;
  uint64_t v19 = (v14 + 32) & ~(v14 | 7);
  unint64_t v20 = *(void *)(v12 + 64);
  unint64_t v21 = v20 + v6;
  uint64_t v62 = v6;
  if (((v20 + v62) & ~v62) + v20 > v20) {
    v20 += (v20 + v6) & ~(unint64_t)v6;
  }
  unint64_t v22 = *(void *)(v8 + 64) + v13;
  unint64_t v23 = ((v22 + ((v9 + 8) & ~(unint64_t)v9)) & ~v13)
      + *(void *)(*(void *)(v10 - 8) + 64);
  if (v20 > v23) {
    unint64_t v23 = v20;
  }
  if (v23 <= 0x10) {
    uint64_t v24 = 16;
  }
  else {
    uint64_t v24 = v23;
  }
  uint64_t v25 = v15 | *(_DWORD *)(v3 + 80);
  if (v25 != 7
    || ((v9 | *(_DWORD *)(v11 + 80) | v6 | *(_DWORD *)(v3 + 80)) & 0x100000) != 0
    || (unint64_t)(v24 + v17 + v19 + 1) > 0x18)
  {
    uint64_t v28 = *a2;
    *a1 = *a2;
    uint64_t v29 = v28 + ((v25 + 16) & ~v25);
    swift_retain();
  }
  else
  {
    uint64_t v30 = v9;
    uint64_t v53 = v9 + 8;
    unint64_t v54 = v22;
    uint64_t v31 = *(_DWORD *)(v11 + 80);
    unint64_t v52 = v21;
    uint64_t v55 = *(void *)(v10 - 8);
    uint64_t v56 = v10;
    uint64_t v32 = ~v15;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v3 + 16))(a1, a2, v61);
    unint64_t v33 = ((unint64_t)a1 + v16) & v32;
    unint64_t v34 = ((unint64_t)a2 + v16) & v32;
    uint64_t v35 = *(void *)v34;
    uint64_t v36 = *(void *)(v34 + 8);
    char v37 = *(unsigned char *)(v34 + 0x10);
    sub_21F7652C0(*(void *)v34, *(void *)(v34 + 8), *(unsigned char *)(v34 + 16));
    *(void *)unint64_t v33 = v35;
    *(void *)(v33 + 8) = v36;
    *(unsigned char *)(v33 + 16) = v37;
    *(void *)(v33 + 24) = *(void *)(v34 + 24);
    uint64_t v38 = (void *)((v18 + v33) & v32);
    uint64_t v39 = (unsigned __int8 *)((v18 + v34) & v32);
    unsigned int v40 = v39[v24];
    swift_bridgeObjectRetain();
    if (v40 >= 5)
    {
      if (v24 <= 3) {
        uint64_t v41 = v24;
      }
      else {
        uint64_t v41 = 4;
      }
      switch(v41)
      {
        case 1:
          int v42 = *v39;
          goto LABEL_26;
        case 2:
          int v42 = *(unsigned __int16 *)v39;
          goto LABEL_26;
        case 3:
          int v42 = *(unsigned __int16 *)v39 | (v39[2] << 16);
          goto LABEL_26;
        case 4:
          int v42 = *(_DWORD *)v39;
LABEL_26:
          int v43 = (v42 | ((v40 - 5) << (8 * v24))) + 5;
          unsigned int v44 = v42 + 5;
          if (v24 >= 4) {
            unsigned int v40 = v44;
          }
          else {
            unsigned int v40 = v43;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v45 = ~v30;
    switch(v40)
    {
      case 1u:
        float64x2_t v50 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v59 + 16);
        v50(v38, v39, v60);
        v50((void *)(((unint64_t)v38 + v52) & ~v62), (unsigned __int8 *)((unint64_t)&v39[v52] & ~v62), v60);
        char v49 = 1;
        goto LABEL_36;
      case 2u:
        *uint64_t v38 = *(void *)v39;
        *((unsigned char *)v38 + v24) = 2;
        goto LABEL_33;
      case 3u:
        *uint64_t v38 = *(void *)v39;
        v38[1] = *((void *)v39 + 1);
        *((unsigned char *)v38 + v24) = 3;
        swift_retain();
LABEL_33:
        swift_retain();
        break;
      case 4u:
        *uint64_t v38 = *(void *)v39;
        unint64_t v46 = ((unint64_t)v38 + v53) & v45;
        unint64_t v47 = (unint64_t)&v39[v53] & v45;
        uint64_t v48 = *(void (**)(unint64_t, unint64_t, uint64_t))(v57 + 16);
        swift_retain();
        v48(v46, v47, v58);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v55 + 16))((v54 + v46) & ~v31, (v54 + v47) & ~v31, v56);
        char v49 = 4;
LABEL_36:
        *((unsigned char *)v38 + v24) = v49;
        break;
      default:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v59 + 16))(v38, v39, v60);
        *((unsigned char *)v38 + v24) = 0;
        break;
    }
    return a1;
  }
  return (uint64_t *)v29;
}

uint64_t sub_21F942AA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v37 = *(void *)(a2 + 32);
  uint64_t v38 = *(void *)(v4 + 56);
  uint64_t v40 = *(void *)(v37 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v40 + 80);
  uint64_t v6 = sub_21FA24310();
  uint64_t v39 = *(void *)(v6 - 8);
  uint64_t v36 = v6;
  uint64_t v7 = *(unsigned __int8 *)(v39 + 80);
  uint64_t v8 = sub_21FA24320();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v34 = v9;
  uint64_t v35 = v8;
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = v5 | v7 | v10;
  uint64_t v12 = (v38 + a1 + (v11 | 7)) & ~(v11 | 7);
  sub_21F7656A8(*(void *)v12, *(void *)(v12 + 8), *(unsigned char *)(v12 + 0x10));
  swift_bridgeObjectRelease();
  uint64_t v13 = v10;
  uint64_t v14 = v7;
  uint64_t v15 = (unsigned __int8 *)((v11 + v12 + 32) & ~(v11 | 7));
  unint64_t v16 = *(void *)(v40 + 64);
  uint64_t v17 = v16 + v5;
  if (((v16 + v5) & ~v5) + v16 > v16) {
    v16 += (v16 + v5) & ~v5;
  }
  uint64_t v18 = v7 + 8;
  uint64_t v19 = (v7 + 8) & ~v7;
  uint64_t v20 = *(void *)(v39 + 64) + v13;
  unint64_t v21 = ((v20 + v19) & ~v13) + *(void *)(v9 + 64);
  if (v16 <= v21) {
    unint64_t v16 = v21;
  }
  if (v16 <= 0x10) {
    unint64_t v16 = 16;
  }
  unsigned int v22 = v15[v16];
  unsigned int v23 = v22 - 5;
  if (v22 >= 5)
  {
    if (v16 <= 3) {
      uint64_t v24 = v16;
    }
    else {
      uint64_t v24 = 4;
    }
    switch(v24)
    {
      case 1:
        int v25 = *v15;
        goto LABEL_16;
      case 2:
        int v25 = *(unsigned __int16 *)v15;
        goto LABEL_16;
      case 3:
        int v25 = *(unsigned __int16 *)v15 | (v15[2] << 16);
        goto LABEL_16;
      case 4:
        int v25 = *(_DWORD *)v15;
LABEL_16:
        int v26 = (v25 | (v23 << (8 * v16))) + 5;
        unsigned int v22 = v25 + 5;
        if (v16 < 4) {
          unsigned int v22 = v26;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v27 = ~v5;
  uint64_t v28 = ~v14;
  uint64_t v29 = ~v13;
  switch(v22)
  {
    case 1u:
      uint64_t v41 = *(void (**)(unsigned __int8 *, uint64_t))(v40 + 8);
      v41(v15, v37);
      uint64_t v31 = (unsigned __int8 *)((unint64_t)&v15[v17] & v27);
      uint64_t v32 = v37;
      uint64_t v30 = (uint64_t (*)(unsigned __int8 *, uint64_t))v41;
      goto LABEL_26;
    case 2u:
      goto LABEL_22;
    case 3u:
      swift_release();
LABEL_22:
      return swift_release();
    case 4u:
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v39 + 8))((unint64_t)&v15[v18] & v28, v36);
      uint64_t v31 = (unsigned __int8 *)((v20 + ((unint64_t)&v15[v18] & v28)) & v29);
      uint64_t v32 = v35;
      uint64_t v30 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v34 + 8);
      goto LABEL_26;
    default:
      uint64_t v30 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v40 + 8);
      uint64_t v31 = v15;
      uint64_t v32 = v37;
LABEL_26:
      return v30(v31, v32);
  }
}

uint64_t sub_21F942E40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v37 = *(void *)(a3 + 32);
  uint64_t v44 = *(void *)(v37 - 8);
  uint64_t v36 = v44;
  uint64_t v8 = *(unsigned __int8 *)(v44 + 80);
  uint64_t v38 = v8;
  uint64_t v35 = sub_21FA24310();
  uint64_t v41 = *(void *)(v35 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v41 + 80);
  uint64_t v34 = sub_21FA24320();
  uint64_t v40 = *(void *)(v34 - 8);
  uint64_t v39 = *(unsigned __int8 *)(v40 + 80);
  uint64_t v10 = v8 | v9 | v39;
  uint64_t v11 = (v10 | 7) + v7;
  uint64_t v43 = a1;
  uint64_t v12 = (v11 + a1) & ~(v10 | 7);
  uint64_t v13 = (v11 + a2) & ~(v10 | 7);
  uint64_t v14 = *(void *)v13;
  uint64_t v15 = *(void *)(v13 + 8);
  char v16 = *(unsigned char *)(v13 + 0x10);
  sub_21F7652C0(*(void *)v13, v15, v16);
  uint64_t v17 = v44;
  *(void *)uint64_t v12 = v14;
  *(void *)(v12 + 8) = v15;
  *(unsigned char *)(v12 + 16) = v16;
  *(void *)(v12 + 24) = *(void *)(v13 + 24);
  uint64_t v45 = (void *)((v10 + 32 + v12) & ~(v10 | 7));
  uint64_t v18 = (unsigned __int8 *)((v10 + 32 + v13) & ~(v10 | 7));
  unint64_t v19 = *(void *)(v17 + 64);
  uint64_t v20 = v19 + v38;
  if (((v19 + v38) & ~v38) + v19 > v19) {
    v19 += (v19 + v38) & ~v38;
  }
  uint64_t v21 = v9 + 8;
  uint64_t v42 = *(void *)(v41 + 64) + v39;
  if (v19 <= ((v42 + ((v9 + 8) & ~v9)) & (unint64_t)~v39) + *(void *)(v40 + 64)) {
    unint64_t v19 = ((v42 + ((v9 + 8) & ~v9)) & ~v39) + *(void *)(v40 + 64);
  }
  if (v19 <= 0x10) {
    uint64_t v22 = 16;
  }
  else {
    uint64_t v22 = v19;
  }
  unsigned int v23 = v18[v22];
  swift_bridgeObjectRetain();
  if (v23 >= 5)
  {
    if (v22 <= 3) {
      uint64_t v24 = v22;
    }
    else {
      uint64_t v24 = 4;
    }
    switch(v24)
    {
      case 1:
        int v25 = *v18;
        goto LABEL_17;
      case 2:
        int v25 = *(unsigned __int16 *)v18;
        goto LABEL_17;
      case 3:
        int v25 = *(unsigned __int16 *)v18 | (v18[2] << 16);
        goto LABEL_17;
      case 4:
        int v25 = *(_DWORD *)v18;
LABEL_17:
        int v26 = (v25 | ((v23 - 5) << (8 * v22))) + 5;
        unsigned int v27 = v25 + 5;
        if (v22 >= 4) {
          unsigned int v23 = v27;
        }
        else {
          unsigned int v23 = v26;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v28 = ~v9;
  switch(v23)
  {
    case 1u:
      uint64_t v29 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v36 + 16);
      v29(v45, v18, v37);
      v29((void *)(((unint64_t)v45 + v20) & ~v38), (unsigned __int8 *)((unint64_t)&v18[v20] & ~v38), v37);
      *((unsigned char *)v45 + v22) = 1;
      break;
    case 2u:
      *uint64_t v45 = *(void *)v18;
      *((unsigned char *)v45 + v22) = 2;
      swift_retain();
      break;
    case 3u:
      *uint64_t v45 = *(void *)v18;
      *(void *)(((v10 + 32 + v12) & ~(v10 | 7)) + 8) = *((void *)v18 + 1);
      *((unsigned char *)v45 + v22) = 3;
      swift_retain();
      swift_retain();
      break;
    case 4u:
      *uint64_t v45 = *(void *)v18;
      unint64_t v30 = ((unint64_t)v45 + v21) & v28;
      unint64_t v31 = (unint64_t)&v18[v21] & v28;
      uint64_t v32 = *(void (**)(unint64_t, unint64_t, uint64_t))(v41 + 16);
      swift_retain();
      v32(v30, v31, v35);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v40 + 16))((v42 + v30) & ~v39, (v42 + v31) & ~v39, v34);
      *((unsigned char *)v45 + v22) = 4;
      break;
    default:
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v36 + 16))(v45, v18, v37);
      *((unsigned char *)v45 + v22) = 0;
      break;
  }
  return v43;
}

uint64_t sub_21F943284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v62 = *(void *)(a3 + 32);
  uint64_t v63 = *(void *)(v62 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v63 + 80);
  uint64_t v60 = sub_21FA24310();
  uint64_t v65 = *(void *)(v60 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v65 + 80);
  uint64_t v61 = sub_21FA24320();
  uint64_t v10 = *(void *)(v61 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v64 = v8;
  uint64_t v12 = v8 | v9 | v11;
  uint64_t v13 = (v12 | 7) + v7;
  uint64_t v66 = a1;
  uint64_t v14 = (v13 + a1) & ~(v12 | 7);
  uint64_t v15 = (v13 + a2) & ~(v12 | 7);
  uint64_t v16 = *(void *)v15;
  uint64_t v17 = *(void *)(v15 + 8);
  char v18 = *(unsigned char *)(v15 + 0x10);
  sub_21F7652C0(*(void *)v15, v17, v18);
  uint64_t v19 = *(void *)v14;
  uint64_t v20 = *(void *)(v14 + 8);
  char v21 = *(unsigned char *)(v14 + 16);
  *(void *)uint64_t v14 = v16;
  *(void *)(v14 + 8) = v17;
  *(unsigned char *)(v14 + 16) = v18;
  sub_21F7656A8(v19, v20, v21);
  *(void *)(v14 + 24) = *(void *)(v15 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = (unsigned __int8 *)((v12 + 32 + v14) & ~(v12 | 7));
  unsigned int v23 = (unsigned __int8 *)((v12 + 32 + v15) & ~(v12 | 7));
  if (v22 != v23)
  {
    uint64_t v25 = v63;
    uint64_t v24 = v64;
    unint64_t v26 = *(void *)(v63 + 64);
    unint64_t v27 = ((v26 + v64) & ~v64) + v26;
    if (v27 <= v26) {
      unint64_t v27 = *(void *)(v63 + 64);
    }
    uint64_t v58 = v9 + 8;
    uint64_t v59 = *(void *)(v65 + 64);
    if (v27 <= ((((v9 + 8) & ~v9) + v11 + v59) & (unint64_t)~v11) + *(void *)(v10 + 64)) {
      unint64_t v27 = ((((v9 + 8) & ~v9) + v11 + v59) & ~v11) + *(void *)(v10 + 64);
    }
    if (v27 <= 0x10) {
      uint64_t v28 = 16;
    }
    else {
      uint64_t v28 = v27;
    }
    unsigned int v29 = v22[v28];
    unsigned int v30 = v29 - 5;
    uint64_t v31 = v10;
    if (v29 >= 5)
    {
      if (v28 <= 3) {
        uint64_t v32 = v28;
      }
      else {
        uint64_t v32 = 4;
      }
      switch(v32)
      {
        case 1:
          int v33 = *v22;
          goto LABEL_18;
        case 2:
          int v33 = *(unsigned __int16 *)v22;
          goto LABEL_18;
        case 3:
          int v33 = *(unsigned __int16 *)v22 | (v22[2] << 16);
          goto LABEL_18;
        case 4:
          int v33 = *(_DWORD *)v22;
LABEL_18:
          int v34 = (v33 | (v30 << (8 * v28))) + 5;
          unsigned int v29 = v33 + 5;
          if (v28 < 4) {
            unsigned int v29 = v34;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v56 = v11;
    uint64_t v57 = ~v64;
    uint64_t v35 = ~v9;
    uint64_t v36 = ~v11;
    switch(v29)
    {
      case 1u:
        uint64_t v54 = v31;
        uint64_t v42 = *(void (**)(unsigned __int8 *, uint64_t))(v63 + 8);
        v42(v22, v62);
        uint64_t v25 = v63;
        v42((unsigned __int8 *)((unint64_t)&v22[v64 + v26] & v57), v62);
        uint64_t v31 = v54;
        uint64_t v24 = v64;
        break;
      case 2u:
        swift_release();
        break;
      case 3u:
        swift_release();
        swift_release();
        break;
      case 4u:
        uint64_t v55 = ~v11;
        uint64_t v37 = v11;
        swift_release();
        uint64_t v38 = v31;
        unint64_t v39 = (unint64_t)&v22[v58] & v35;
        uint64_t v24 = v64;
        (*(void (**)(unint64_t, uint64_t))(v65 + 8))(v39, v60);
        uint64_t v40 = v37 + v59;
        uint64_t v36 = v55;
        uint64_t v41 = v39 + v40;
        uint64_t v31 = v38;
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v41 & v55, v61);
        break;
      default:
        (*(void (**)(unsigned __int8 *, uint64_t))(v63 + 8))(v22, v62);
        break;
    }
    unsigned int v43 = v23[v28];
    unsigned int v44 = v43 - 5;
    if (v43 >= 5)
    {
      if (v28 <= 3) {
        uint64_t v45 = v28;
      }
      else {
        uint64_t v45 = 4;
      }
      switch(v45)
      {
        case 1:
          int v46 = *v23;
          goto LABEL_36;
        case 2:
          int v46 = *(unsigned __int16 *)v23;
          goto LABEL_36;
        case 3:
          int v46 = *(unsigned __int16 *)v23 | (v23[2] << 16);
          goto LABEL_36;
        case 4:
          int v46 = *(_DWORD *)v23;
LABEL_36:
          int v47 = (v46 | (v44 << (8 * v28))) + 5;
          unsigned int v43 = v46 + 5;
          if (v28 < 4) {
            unsigned int v43 = v47;
          }
          break;
        default:
          break;
      }
    }
    switch(v43)
    {
      case 1u:
        unint64_t v52 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 16);
        v52(v22, v23, v62);
        v52((unsigned __int8 *)((unint64_t)&v22[v24 + v26] & v57), (unsigned __int8 *)((unint64_t)&v23[v24 + v26] & v57), v62);
        char v51 = 1;
        goto LABEL_44;
      case 2u:
        *(void *)uint64_t v22 = *(void *)v23;
        v22[v28] = 2;
        swift_retain();
        break;
      case 3u:
        *(void *)uint64_t v22 = *(void *)v23;
        *((void *)v22 + 1) = *((void *)v23 + 1);
        v22[v28] = 3;
        swift_retain();
        swift_retain();
        break;
      case 4u:
        *(void *)uint64_t v22 = *(void *)v23;
        unint64_t v48 = (unint64_t)&v22[v58] & v35;
        unint64_t v49 = (unint64_t)&v23[v58] & v35;
        float64x2_t v50 = *(void (**)(unint64_t, unint64_t, uint64_t))(v65 + 16);
        swift_retain();
        v50(v48, v49, v60);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v31 + 16))((v48 + v56 + v59) & v36, (v49 + v56 + v59) & v36, v61);
        char v51 = 4;
LABEL_44:
        v22[v28] = v51;
        break;
      default:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 16))(v22, v23, v62);
        v22[v28] = 0;
        break;
    }
  }
  return v66;
}

uint64_t sub_21F94387C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v52 = *(void *)(a3 + 32);
  uint64_t v8 = *(void *)(v52 - 8);
  uint64_t v9 = v8;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = sub_21FA24310();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v50 = v12;
  uint64_t v51 = v11;
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = sub_21FA24320();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = v15;
  uint64_t v17 = v8;
  uint64_t v18 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v19 = v10 | v13 | v18;
  uint64_t v20 = v19 | 7;
  uint64_t v21 = (v19 | 7) + v7;
  uint64_t v22 = (_OWORD *)((v21 + a1) & ~(v19 | 7));
  unsigned int v23 = (_OWORD *)((v21 + a2) & ~(v19 | 7));
  long long v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  v19 += 32;
  uint64_t v25 = (void *)(((unint64_t)v22 + v19) & ~v20);
  unint64_t v26 = (unsigned __int8 *)(((unint64_t)v23 + v19) & ~v20);
  unint64_t v27 = *(void *)(v17 + 64);
  uint64_t v28 = v27 + v10;
  unint64_t v29 = ((v27 + v10) & ~v10) + v27;
  if (v29 <= v27) {
    unint64_t v29 = *(void *)(v17 + 64);
  }
  uint64_t v30 = v13 + 8;
  uint64_t v31 = *(void *)(v12 + 64);
  uint64_t v32 = v31 + v18;
  unint64_t v33 = ((v31 + v18 + ((v13 + 8) & ~v13)) & ~v18) + *(void *)(v15 + 64);
  if (v29 > v33) {
    unint64_t v33 = v29;
  }
  if (v33 <= 0x10) {
    uint64_t v34 = 16;
  }
  else {
    uint64_t v34 = v33;
  }
  unsigned int v35 = v26[v34];
  unsigned int v36 = v35 - 5;
  if (v35 >= 5)
  {
    if (v34 <= 3) {
      uint64_t v37 = v34;
    }
    else {
      uint64_t v37 = 4;
    }
    switch(v37)
    {
      case 1:
        int v38 = *v26;
        goto LABEL_17;
      case 2:
        int v38 = *(unsigned __int16 *)v26;
        goto LABEL_17;
      case 3:
        int v38 = *(unsigned __int16 *)v26 | (v26[2] << 16);
        goto LABEL_17;
      case 4:
        int v38 = *(_DWORD *)v26;
LABEL_17:
        int v39 = (v38 | (v36 << (8 * v34))) + 5;
        unsigned int v35 = v38 + 5;
        if (v34 < 4) {
          unsigned int v35 = v39;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v40 = ~v10;
  uint64_t v41 = ~v13;
  uint64_t v42 = ~v18;
  switch(v35)
  {
    case 1u:
      unsigned int v44 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v9 + 32);
      v44(v25, v26, v52);
      v44((void *)(((unint64_t)v25 + v28) & v40), (unsigned __int8 *)((unint64_t)&v26[v28] & v40), v52);
      char v43 = 1;
      break;
    case 2u:
      *uint64_t v25 = *(void *)v26;
      char v43 = 2;
      break;
    case 3u:
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
      char v43 = 3;
      break;
    case 4u:
      *uint64_t v25 = *(void *)v26;
      unint64_t v45 = ((unint64_t)v25 + v30) & v41;
      unint64_t v46 = (unint64_t)&v26[v30] & v41;
      uint64_t v47 = v14;
      uint64_t v48 = v16;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v50 + 32))(v45, v46, v51);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v48 + 32))((v32 + v45) & v42, (v32 + v46) & v42, v47);
      char v43 = 4;
      break;
    default:
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v9 + 32))(v25, v26, v52);
      char v43 = 0;
      break;
  }
  *((unsigned char *)v25 + v34) = v43;
  return a1;
}

uint64_t sub_21F943C30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v54 = *(void *)(a3 + 32);
  uint64_t v55 = *(void *)(v54 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v55 + 80);
  uint64_t v52 = sub_21FA24310();
  uint64_t v9 = *(void *)(v52 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v53 = sub_21FA24320();
  uint64_t v11 = *(void *)(v53 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = v8 | v10 | v12;
  uint64_t v14 = (v13 | 7) + v7;
  uint64_t v56 = a1;
  uint64_t v15 = (v14 + a1) & ~(v13 | 7);
  uint64_t v16 = (v14 + a2) & ~(v13 | 7);
  LOBYTE(v14) = *(unsigned char *)(v16 + 0x10);
  uint64_t v17 = *(void *)v15;
  uint64_t v18 = *(void *)(v15 + 8);
  char v19 = *(unsigned char *)(v15 + 16);
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *(unsigned char *)(v15 + 16) = v14;
  sub_21F7656A8(v17, v18, v19);
  *(void *)(v15 + 24) = *(void *)(v16 + 24);
  swift_bridgeObjectRelease();
  uint64_t v20 = (unsigned __int8 *)((v13 + 32 + v15) & ~(v13 | 7));
  uint64_t v21 = (unsigned __int8 *)((v13 + 32 + v16) & ~(v13 | 7));
  if (v20 != v21)
  {
    unint64_t v22 = *(void *)(v55 + 64);
    unint64_t v23 = ((v22 + v8) & ~v8) + v22;
    if (v23 <= v22) {
      unint64_t v23 = *(void *)(v55 + 64);
    }
    uint64_t v51 = v10 + 8;
    uint64_t v24 = v9;
    uint64_t v25 = *(void *)(v9 + 64);
    if (v23 <= ((((v10 + 8) & ~v10) + v12 + v25) & (unint64_t)~v12) + *(void *)(v11 + 64)) {
      unint64_t v23 = ((((v10 + 8) & ~v10) + v12 + v25) & ~v12) + *(void *)(v11 + 64);
    }
    if (v23 <= 0x10) {
      uint64_t v26 = 16;
    }
    else {
      uint64_t v26 = v23;
    }
    unsigned int v27 = v20[v26];
    unsigned int v28 = v27 - 5;
    uint64_t v29 = v11;
    if (v27 < 5)
    {
      uint64_t v31 = v24;
    }
    else
    {
      if (v26 <= 3) {
        uint64_t v30 = v26;
      }
      else {
        uint64_t v30 = 4;
      }
      uint64_t v31 = v24;
      switch(v30)
      {
        case 1:
          int v32 = *v20;
          goto LABEL_19;
        case 2:
          int v32 = *(unsigned __int16 *)v20;
          goto LABEL_19;
        case 3:
          int v32 = *(unsigned __int16 *)v20 | (v20[2] << 16);
          goto LABEL_19;
        case 4:
          int v32 = *(_DWORD *)v20;
LABEL_19:
          int v33 = (v32 | (v28 << (8 * v26))) + 5;
          unsigned int v27 = v32 + 5;
          if (v26 < 4) {
            unsigned int v27 = v33;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v47 = v29;
    uint64_t v48 = ~v8;
    uint64_t v49 = ~v10;
    uint64_t v50 = ~v12;
    switch(v27)
    {
      case 1u:
        uint64_t v34 = v55;
        unsigned int v36 = *(void (**)(unsigned __int8 *, uint64_t))(v55 + 8);
        v36(v20, v54);
        uint64_t v37 = (void (*)(unint64_t, uint64_t))v36;
        uint64_t v31 = v24;
        v37((unint64_t)&v20[v8 + v22] & v48, v54);
        break;
      case 2u:
        uint64_t v34 = v55;
        swift_release();
        break;
      case 3u:
        uint64_t v34 = v55;
        swift_release();
        swift_release();
        break;
      case 4u:
        uint64_t v34 = v55;
        uint64_t v35 = v29;
        swift_release();
        (*(void (**)(unint64_t, uint64_t))(v31 + 8))((unint64_t)&v20[v51] & v49, v52);
        (*(void (**)(unint64_t, uint64_t))(v35 + 8))((((unint64_t)&v20[v51] & v49) + v12 + v25) & v50, v53);
        break;
      default:
        uint64_t v34 = v55;
        (*(void (**)(unsigned __int8 *, uint64_t))(v55 + 8))(v20, v54);
        break;
    }
    unsigned int v38 = v21[v26];
    unsigned int v39 = v38 - 5;
    if (v38 >= 5)
    {
      if (v26 <= 3) {
        uint64_t v40 = v26;
      }
      else {
        uint64_t v40 = 4;
      }
      switch(v40)
      {
        case 1:
          int v41 = *v21;
          goto LABEL_37;
        case 2:
          int v41 = *(unsigned __int16 *)v21;
          goto LABEL_37;
        case 3:
          int v41 = *(unsigned __int16 *)v21 | (v21[2] << 16);
          goto LABEL_37;
        case 4:
          int v41 = *(_DWORD *)v21;
LABEL_37:
          int v42 = (v41 | (v39 << (8 * v26))) + 5;
          unsigned int v38 = v41 + 5;
          if (v26 < 4) {
            unsigned int v38 = v42;
          }
          break;
        default:
          break;
      }
    }
    switch(v38)
    {
      case 1u:
        unint64_t v45 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v34 + 32);
        v45(v20, v21, v54);
        v45((unsigned __int8 *)((unint64_t)&v20[v8 + v22] & v48), (unsigned __int8 *)((unint64_t)&v21[v8 + v22] & v48), v54);
        char v43 = 1;
        break;
      case 2u:
        *(void *)uint64_t v20 = *(void *)v21;
        char v43 = 2;
        break;
      case 3u:
        *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
        char v43 = 3;
        break;
      case 4u:
        *(void *)uint64_t v20 = *(void *)v21;
        unint64_t v44 = (unint64_t)&v21[v51] & v49;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v31 + 32))((unint64_t)&v20[v51] & v49, v44, v52);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v47 + 32))((((unint64_t)&v20[v51] & v49) + v12 + v25) & v50, (v44 + v12 + v25) & v50, v53);
        char v43 = 4;
        break;
      default:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v34 + 32))(v20, v21, v54);
        char v43 = 0;
        break;
    }
    v20[v26] = v43;
  }
  return v56;
}

uint64_t sub_21F9441E8(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v32 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v32 - 8);
  uint64_t v6 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v7 = *(unsigned int *)(v5 + 84);
  unint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  if (((v8 + v9) & ~v9) + v8 <= v8) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = ((v8 + v9) & ~v9) + v8;
  }
  uint64_t v11 = *(void *)(sub_21FA24310() - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = *(void *)(v11 + 64);
  uint64_t v14 = *(void *)(sub_21FA24320() - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  unint64_t v16 = ((((v12 + 8) & ~v12) + v13 + v15) & ~v15) + *(void *)(v14 + 64);
  if (v10 > v16) {
    unint64_t v16 = v10;
  }
  if (v16 <= 0x10) {
    uint64_t v17 = 16;
  }
  else {
    uint64_t v17 = v16;
  }
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v18 = 0x7FFFFFFF;
  }
  else {
    unsigned int v18 = v7;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v19 = v12 | v15 | v9;
  uint64_t v20 = v19 | 7;
  uint64_t v21 = (v19 | 7) + *(void *)(v5 + 64);
  if (a2 <= v18) {
    goto LABEL_33;
  }
  uint64_t v22 = v17 + ((v19 + 32) & ~v20) + (v21 & ~v20) + 1;
  char v23 = 8 * v22;
  if (v22 <= 3)
  {
    unsigned int v26 = ((a2 - v18 + ~(-1 << v23)) >> v23) + 1;
    if (HIWORD(v26))
    {
      int v24 = *(_DWORD *)((char *)a1 + v22);
      if (!v24) {
        goto LABEL_33;
      }
      goto LABEL_23;
    }
    if (v26 > 0xFF)
    {
      int v24 = *(unsigned __int16 *)((char *)a1 + v22);
      if (!*(unsigned __int16 *)((char *)a1 + v22)) {
        goto LABEL_33;
      }
      goto LABEL_23;
    }
    if (v26 < 2)
    {
LABEL_33:
      if (v7 < 0x7FFFFFFF)
      {
        unint64_t v31 = *(void *)((((unint64_t)a1 + v21) & ~v20) + 0x18);
        if (v31 >= 0xFFFFFFFF) {
          LODWORD(v31) = -1;
        }
        return (v31 + 1);
      }
      else
      {
        uint64_t v30 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48);
        return v30(a1, v7, v32);
      }
    }
  }
  int v24 = *((unsigned __int8 *)a1 + v22);
  if (!*((unsigned char *)a1 + v22)) {
    goto LABEL_33;
  }
LABEL_23:
  int v27 = (v24 - 1) << v23;
  if (v22 > 3) {
    int v27 = 0;
  }
  if (v22)
  {
    if (v22 <= 3) {
      int v28 = v22;
    }
    else {
      int v28 = 4;
    }
    switch(v28)
    {
      case 2:
        int v29 = *a1;
        break;
      case 3:
        int v29 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v29 = *(_DWORD *)a1;
        break;
      default:
        int v29 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v29 = 0;
  }
  return v18 + (v29 | v27) + 1;
}

void sub_21F944548(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v35 = *(void *)(a4 + 16);
  uint64_t v6 = *(void *)(v35 - 8);
  uint64_t v7 = *(void *)(*(void *)(a4 + 32) - 8);
  uint64_t v34 = v6;
  uint64_t v8 = *(unsigned int *)(v6 + 84);
  unint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  if (((v9 + v10) & ~v10) + v9 <= v9) {
    unint64_t v11 = v9;
  }
  else {
    unint64_t v11 = ((v9 + v10) & ~v10) + v9;
  }
  uint64_t v12 = *(void *)(sub_21FA24310() - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = *(void *)(v12 + 64);
  uint64_t v15 = *(void *)(sub_21FA24320() - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  unint64_t v17 = ((((v13 + 8) & ~v13) + v14 + v16) & ~v16) + *(void *)(v15 + 64);
  if (v11 > v17) {
    unint64_t v17 = v11;
  }
  if (v17 <= 0x10) {
    uint64_t v18 = 16;
  }
  else {
    uint64_t v18 = v17;
  }
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v19 = 0x7FFFFFFF;
  }
  else {
    unsigned int v19 = v8;
  }
  uint64_t v20 = v13 | v16 | v10;
  uint64_t v21 = (v20 | 7) + *(void *)(v6 + 64);
  size_t v22 = v18 + ((v20 + 32) & ~(v20 | 7)) + 1;
  size_t v23 = v22 + (v21 & ~(v20 | 7));
  if (a3 <= v19)
  {
    int v25 = 0;
    int v24 = a1;
  }
  else
  {
    int v24 = a1;
    if (v23 <= 3)
    {
      unsigned int v28 = ((a3 - v19 + ~(-1 << (8 * v23))) >> (8 * v23)) + 1;
      if (HIWORD(v28))
      {
        int v25 = 4;
      }
      else if (v28 >= 0x100)
      {
        int v25 = 2;
      }
      else
      {
        int v25 = v28 > 1;
      }
    }
    else
    {
      int v25 = 1;
    }
  }
  if (v19 < a2)
  {
    unsigned int v26 = ~v19 + a2;
    if (v23 < 4)
    {
      int v27 = (v26 >> (8 * v23)) + 1;
      if (v23)
      {
        int v29 = v26 & ~(-1 << (8 * v23));
        bzero(v24, v23);
        if (v23 == 3)
        {
          *(_WORD *)int v24 = v29;
          v24[2] = BYTE2(v29);
        }
        else if (v23 == 2)
        {
          *(_WORD *)int v24 = v29;
        }
        else
        {
          *int v24 = v29;
        }
      }
    }
    else
    {
      bzero(v24, v23);
      *(_DWORD *)int v24 = v26;
      int v27 = 1;
    }
    switch(v25)
    {
      case 1:
        v24[v23] = v27;
        return;
      case 2:
        *(_WORD *)&v24[v23] = v27;
        return;
      case 3:
        goto LABEL_60;
      case 4:
        *(_DWORD *)&v24[v23] = v27;
        return;
      default:
        return;
    }
  }
  switch(v25)
  {
    case 1:
      v24[v23] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 2:
      *(_WORD *)&v24[v23] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 3:
LABEL_60:
      __break(1u);
      JUMPOUT(0x21F944998);
    case 4:
      *(_DWORD *)&v24[v23] = 0;
      goto LABEL_31;
    default:
LABEL_31:
      if (a2)
      {
LABEL_32:
        if (v8 < 0x7FFFFFFF)
        {
          unint64_t v31 = (_WORD *)((unint64_t)&v24[v21] & ~(v20 | 7));
          if ((a2 & 0x80000000) != 0)
          {
            if (v22 <= 3) {
              unsigned int v32 = a2 & ~(-1 << (8 * v22));
            }
            else {
              unsigned int v32 = a2 ^ 0x80000000;
            }
            if (v22)
            {
              if (v22 <= 3) {
                int v33 = v22;
              }
              else {
                int v33 = 4;
              }
              bzero(v31, v22);
              switch(v33)
              {
                case 2:
                  *unint64_t v31 = v32;
                  break;
                case 3:
                  *unint64_t v31 = v32;
                  *((unsigned char *)v31 + 2) = BYTE2(v32);
                  break;
                case 4:
                  *(_DWORD *)unint64_t v31 = v32;
                  break;
                default:
                  *(unsigned char *)unint64_t v31 = v32;
                  break;
              }
            }
          }
          else
          {
            *((void *)v31 + 3) = a2 - 1;
          }
        }
        else
        {
          uint64_t v30 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v34 + 56);
          v30(v24, a2, v8, v35);
        }
      }
      return;
  }
}

uint64_t sub_21F9449D0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_21F944A6C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)((a1 + *(void *)(v4 + 56) + 7) & 0xFFFFFFFFFFFFFFF8);

  return a3(v5);
}

uint64_t sub_21F944AF0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v7)();
  uint64_t v8 = *(void *)(v7 + 24) + 7;
  unint64_t v9 = (uint64_t *)((v8 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = *v9;
  *unint64_t v9 = *(void *)((v8 + a2) & 0xFFFFFFFFFFFFFFF8);
  a4(v10);
  return a1;
}

uint64_t sub_21F944B7C(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x21F944CC8);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_21F944CDC(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x21F944EB8);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0) {
            uint64_t v19 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v19 = a2 - 1;
          }
          *uint64_t v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t sub_21F944EE0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21F944F74(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 72 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = *(void *)v11;
    uint64_t v13 = *(void *)(v11 + 8);
    char v14 = *(unsigned char *)(v11 + 16);
    sub_21F7652C0(*(void *)v11, v13, v14);
    *(void *)unint64_t v10 = v12;
    *(void *)(v10 + 8) = v13;
    *(unsigned char *)(v10 + 16) = v14;
    *(void *)(v10 + 24) = *(void *)(v11 + 24);
    uint64_t v15 = *(void *)(v11 + 32);
    uint64_t v16 = *(void *)(v11 + 40);
    char v17 = *(unsigned char *)(v11 + 48);
    swift_bridgeObjectRetain();
    sub_21F770E44(v15, v16, v17);
    *(void *)(v10 + 32) = v15;
    *(void *)(v10 + 40) = v16;
    *(unsigned char *)(v10 + 48) = v17;
    *(_OWORD *)(v10 + 56) = *(_OWORD *)(v11 + 56);
  }
  return v4;
}

uint64_t sub_21F9450C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_21F7656A8(*(void *)v4, *(void *)(v4 + 8), *(unsigned char *)(v4 + 16));
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v4 + 32);
  uint64_t v6 = *(void *)(v4 + 40);
  char v7 = *(unsigned char *)(v4 + 48);

  return sub_21F770E38(v5, v6, v7);
}

uint64_t sub_21F945148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  uint64_t v10 = *(void *)(v8 + 8);
  char v11 = *(unsigned char *)(v8 + 16);
  sub_21F7652C0(*(void *)v8, v10, v11);
  *(void *)unint64_t v7 = v9;
  *(void *)(v7 + 8) = v10;
  *(unsigned char *)(v7 + 16) = v11;
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  uint64_t v12 = *(void *)(v8 + 32);
  uint64_t v13 = *(void *)(v8 + 40);
  char v14 = *(unsigned char *)(v8 + 48);
  swift_bridgeObjectRetain();
  sub_21F770E44(v12, v13, v14);
  *(void *)(v7 + 32) = v12;
  *(void *)(v7 + 40) = v13;
  *(unsigned char *)(v7 + 48) = v14;
  *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
  return a1;
}

uint64_t sub_21F945218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  uint64_t v10 = *(void *)(v8 + 8);
  char v11 = *(unsigned char *)(v8 + 16);
  sub_21F7652C0(*(void *)v8, v10, v11);
  uint64_t v12 = *(void *)v7;
  uint64_t v13 = *(void *)(v7 + 8);
  char v14 = *(unsigned char *)(v7 + 16);
  *(void *)unint64_t v7 = v9;
  *(void *)(v7 + 8) = v10;
  *(unsigned char *)(v7 + 16) = v11;
  sub_21F7656A8(v12, v13, v14);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(v8 + 32);
  uint64_t v16 = *(void *)(v8 + 40);
  char v17 = *(unsigned char *)(v8 + 48);
  sub_21F770E44(v15, v16, v17);
  uint64_t v18 = *(void *)(v7 + 32);
  uint64_t v19 = *(void *)(v7 + 40);
  *(void *)(v7 + 32) = v15;
  *(void *)(v7 + 40) = v16;
  char v20 = *(unsigned char *)(v7 + 48);
  *(unsigned char *)(v7 + 48) = v17;
  sub_21F770E38(v18, v19, v20);
  *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
  return a1;
}

uint64_t sub_21F94530C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  long long v10 = *(_OWORD *)(v8 + 32);
  long long v9 = *(_OWORD *)(v8 + 48);
  long long v11 = *(_OWORD *)(v8 + 16);
  *(void *)(v7 + 64) = *(void *)(v8 + 64);
  *(_OWORD *)(v7 + 32) = v10;
  *(_OWORD *)(v7 + 48) = v9;
  *(_OWORD *)(v7 + 16) = v11;
  return a1;
}

uint64_t sub_21F9453A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v6) = *(unsigned char *)(v8 + 16);
  uint64_t v9 = *(void *)v7;
  uint64_t v10 = *(void *)(v7 + 8);
  char v11 = *(unsigned char *)(v7 + 16);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(unsigned char *)(v7 + 16) = v6;
  sub_21F7656A8(v9, v10, v11);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  swift_bridgeObjectRelease();
  char v12 = *(unsigned char *)(v8 + 48);
  uint64_t v13 = *(void *)(v7 + 32);
  uint64_t v14 = *(void *)(v7 + 40);
  *(_OWORD *)(v7 + 32) = *(_OWORD *)(v8 + 32);
  char v15 = *(unsigned char *)(v7 + 48);
  *(unsigned char *)(v7 + 48) = v12;
  sub_21F770E38(v13, v14, v15);
  *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
  return a1;
}

uint64_t sub_21F945464(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 72;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x21F9455B0);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

double sub_21F9455C4(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 72;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFB8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFB8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFB8)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 72);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return result;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return result;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return result;
      default:
        return result;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x21F9457B8);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
          if ((a2 & 0x80000000) != 0)
          {
            double result = 0.0;
            *(_OWORD *)(v19 + 40) = 0u;
            *(_OWORD *)(v19 + 24) = 0u;
            *(_OWORD *)(v19 + 8) = 0u;
            *(_OWORD *)(v19 + 56) = 0u;
            *(void *)unint64_t v19 = a2 ^ 0x80000000;
          }
          else
          {
            *(void *)(v19 + 24) = a2 - 1;
          }
        }
        else
        {
          uint64_t v18 = *(void (**)(void))(v6 + 56);
          v18();
        }
      }
      return result;
  }
}

uint64_t type metadata accessor for ModifiedChartContent_ForegroundStyle()
{
  return sub_21F764F08();
}

uint64_t sub_21F945830(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  long long v29 = *a2;
  uint64_t v7 = a1 + *(int *)(type metadata accessor for ModifiedChartContent_ForegroundStyle() + 36);
  unint64_t v9 = *(unint64_t *)(v7 + 32);
  uint64_t v8 = *(void *)(v7 + 40);
  int v10 = *(char *)(v7 + 48);
  uint64_t v11 = *(void *)(v7 + 56);
  uint64_t v12 = *(void *)(v7 + 64);
  if (v10 < 0)
  {
    uint64_t v16 = *(void *)(v7 + 64);
    uint64_t v17 = *(void *)(v7 + 32);
    uint64_t v28 = *(uint64_t *)(v7 + 40);
    uint64_t v18 = v9 & 0x7FF0000000000000;
    if (v10)
    {
      swift_beginAccess();
      BOOL v19 = v18 == 0x7FF0000000000000;
      uint64_t v12 = v16;
      if (!v19)
      {
        if (*(unsigned char *)(v29 + 360))
        {
          double v22 = *(double *)&v9;
        }
        else
        {
          double v22 = *(double *)(v29 + 344);
          if (v22 >= *(double *)&v9) {
            double v22 = *(double *)&v9;
          }
          if (*(double *)(v29 + 352) >= *(double *)&v9) {
            uint64_t v17 = *(void *)(v29 + 352);
          }
        }
        *(double *)(v29 + 344) = v22;
        *(void *)(v29 + 352) = v17;
        *(unsigned char *)(v29 + 360) = 0;
      }
      uint64_t v13 = v29;
      if ((~v8 & 0x7FF0000000000000) != 0)
      {
        if (*(unsigned char *)(v29 + 360))
        {
          *(void *)(v29 + 344) = v8;
          *(void *)(v29 + 352) = v8;
        }
        else
        {
          float64x2_t v25 = *(float64x2_t *)(v29 + 344);
          float64x2_t v26 = (float64x2_t)vdupq_lane_s64(v28, 0);
          v27.i64[0] = vmovn_s64(vcgtq_f64(v26, v25)).i32[0];
          v27.i64[1] = vmovn_s64(vcgeq_f64(v25, v26)).i32[1];
          *(int8x16_t *)(v29 + 344) = vbslq_s8(v27, (int8x16_t)v25, (int8x16_t)v26);
        }
        *(unsigned char *)(v29 + 360) = 0;
      }
    }
    else
    {
      swift_beginAccess();
      BOOL v19 = v18 == 0x7FF0000000000000;
      uint64_t v12 = v16;
      char v20 = (unsigned char *)(v29 + 336);
      if (!v19)
      {
        if (*v20)
        {
          double v21 = *(double *)&v9;
        }
        else
        {
          double v21 = *(double *)(v29 + 320);
          if (v21 >= *(double *)&v9) {
            double v21 = *(double *)&v9;
          }
          if (*(double *)(v29 + 328) >= *(double *)&v9) {
            uint64_t v17 = *(void *)(v29 + 328);
          }
        }
        *(double *)(v29 + 320) = v21;
        *(void *)(v29 + 328) = v17;
        *char v20 = 0;
      }
      uint64_t v13 = v29;
      if ((~v8 & 0x7FF0000000000000) != 0)
      {
        if (*v20)
        {
          *(void *)(v29 + 320) = v8;
          *(void *)(v29 + 328) = v8;
          *char v20 = 0;
        }
        else
        {
          double v24 = *(double *)(v29 + 320);
          double v23 = *(double *)(v29 + 328);
          if (v24 >= *(double *)&v28) {
            double v24 = *(double *)&v28;
          }
          if (v23 < *(double *)&v28) {
            double v23 = *(double *)&v28;
          }
          *(double *)(v29 + 320) = v24;
          *(double *)(v29 + 328) = v23;
          *char v20 = 0;
        }
      }
    }
  }
  else
  {
    swift_beginAccess();
    sub_21F7607AC(v9, v8, v10);
    sub_21F7622A4(v9, v8, v10);
    swift_endAccess();
    sub_21F770E38(v9, v8, v10);
    uint64_t v13 = v29;
  }
  uint64_t v14 = v13;
  swift_beginAccess();
  if (*(unsigned __int8 *)(v14 + 385) << 8 == 512) {
    sub_21F7CB424(v11, (_WORD *)(v14 + 384), v11, v12);
  }
  swift_endAccess();
  long long v30 = v29;
  return (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(a4 + 32))(a1, &v30, a3, a4);
}

uint64_t sub_21F945AF0@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  char v55 = *a2;
  uint64_t v60 = *((void *)a2 + 1);
  uint64_t v4 = v60 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  uint64_t v57 = v60 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  sub_21F76C978(v4, (uint64_t)v75, &qword_26AD48C60);
  uint64_t v62 = type metadata accessor for ChartContentRenderContext.Environment(0);
  unsigned int v5 = (uint64_t *)(v4 + *(int *)(v62 + 72));
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  uint64_t v9 = v5[2];
  uint64_t v8 = v5[3];
  uint64_t v11 = v5[4];
  uint64_t v10 = v5[5];
  uint64_t v12 = v5[6];
  uint64_t v13 = v5[7];
  uint64_t v14 = v5[8];
  uint64_t v76 = v6;
  uint64_t v77 = v7;
  uint64_t v53 = v7;
  uint64_t v54 = v6;
  uint64_t v78 = v9;
  uint64_t v79 = v8;
  uint64_t v52 = v9;
  uint64_t v80 = v11;
  uint64_t v81 = v10;
  uint64_t v82 = v12;
  uint64_t v83 = v13;
  uint64_t v84 = v14;
  uint64_t v50 = v14;
  uint64_t v15 = a1 + *(int *)(type metadata accessor for ModifiedChartContent_ForegroundStyle() + 36);
  uint64_t v42 = *(void *)(v15 + 40);
  uint64_t v43 = *(void *)(v15 + 32);
  uint64_t v41 = *(unsigned __int8 *)(v15 + 48);
  uint64_t v51 = v13;
  sub_21F761E74(v6, v7, v9, v8, v11, v10, v12);
  sub_21F761E74(v6, v7, v9, v8, v11, v10, v12);
  uint64_t v16 = sub_21F7E08D0(v43, v42, v41, 4);
  v63[3] = MEMORY[0x263F188A8];
  v63[4] = MEMORY[0x263F18898];
  v63[0] = v16;
  char v64 = 1;
  swift_beginAccess();
  sub_21F799B78((uint64_t)v63, v57, &qword_26AD48C60);
  uint64_t v17 = *(void *)v15;
  uint64_t v18 = *(void *)(v15 + 8);
  uint64_t v19 = *(unsigned __int8 *)(v15 + 16);
  uint64_t v20 = *(void *)(v15 + 24);
  uint64_t v21 = v57 + *(int *)(v62 + 72);
  uint64_t v22 = *(void *)v21;
  uint64_t v48 = *(void *)(v21 + 16);
  uint64_t v49 = *(void *)(v21 + 8);
  uint64_t v46 = *(void *)(v21 + 32);
  uint64_t v47 = *(void *)(v21 + 24);
  uint64_t v44 = *(void *)(v21 + 48);
  uint64_t v45 = *(void *)(v21 + 40);
  long long v23 = *(_OWORD *)(v15 + 56);
  *(void *)uint64_t v21 = *(void *)v15;
  *(void *)(v21 + 8) = v18;
  *(void *)(v21 + 16) = v19;
  *(void *)(v21 + 24) = v20;
  *(void *)(v21 + 32) = v43;
  *(void *)(v21 + 40) = v42;
  *(void *)(v21 + 48) = v41;
  *(_OWORD *)(v21 + 56) = v23;
  swift_endAccess();
  sub_21F7652C0(v17, v18, v19);
  swift_bridgeObjectRetain();
  sub_21F770E44(v43, v42, v41);
  sub_21F761EDC(v22, v49, v48, v47, v46, v45, v44);
  LOBYTE(v63[0]) = v55;
  v63[1] = v60;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void *))(a3 + 40))(v74, a1, v63);
  uint64_t v61 = v74[0];
  sub_21F76C978((uint64_t)v75, (uint64_t)v63, &qword_26AD48C60);
  sub_21F761EDC(v54, v53, v52, v8, v11, v10, v12);
  uint64_t v65 = v54;
  uint64_t v66 = v53;
  uint64_t v67 = v52;
  uint64_t v68 = v8;
  uint64_t v69 = v11;
  uint64_t v70 = v10;
  uint64_t v71 = v12;
  uint64_t v72 = v51;
  uint64_t v73 = v50;
  swift_beginAccess();
  sub_21F799B78((uint64_t)v63, v57, &qword_26AD48C60);
  sub_21F76C9DC((uint64_t)v75, (uint64_t)v63, &qword_26AD48C60);
  uint64_t v24 = v77;
  uint64_t v25 = v78;
  uint64_t v26 = v79;
  uint64_t v27 = v80;
  uint64_t v28 = v81;
  uint64_t v29 = v82;
  uint64_t v30 = v83;
  uint64_t v31 = v84;
  uint64_t v65 = v76;
  uint64_t v66 = v77;
  uint64_t v67 = v78;
  uint64_t v68 = v79;
  uint64_t v69 = v80;
  uint64_t v70 = v81;
  uint64_t v71 = v82;
  uint64_t v72 = v83;
  uint64_t v73 = v84;
  unsigned int v32 = (uint64_t *)(v57 + *(int *)(v62 + 72));
  uint64_t v33 = *v32;
  uint64_t v34 = v32[1];
  uint64_t v35 = v32[2];
  uint64_t v36 = v32[3];
  uint64_t v37 = v32[4];
  uint64_t v38 = v32[5];
  uint64_t v39 = v32[6];
  *unsigned int v32 = v76;
  v32[1] = v24;
  v32[2] = v25;
  v32[3] = v26;
  v32[4] = v27;
  v32[5] = v28;
  v32[6] = v29;
  v32[7] = v30;
  v32[8] = v31;
  swift_endAccess();
  sub_21F761EDC(v33, v34, v35, v36, v37, v38, v39);
  uint64_t result = sub_21F76CA84((uint64_t)v63, &qword_26AD48C60);
  *a4 = v61;
  return result;
}

uint64_t sub_21F945F04(uint64_t a1, long long *a2, uint64_t a3)
{
  return sub_21F945830(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t sub_21F945F10@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return sub_21F945AF0(a1, a2, *(void *)(a3 + 24), a4);
}

uint64_t sub_21F945F1C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = a1 + *(int *)(type metadata accessor for ModifiedChartContent_Symbol() + 36);
  unsigned int v10 = *(unsigned __int8 *)(v9 + 48);
  if ((v10 & 0x80) != 0) {
    goto LABEL_4;
  }
  unint64_t v11 = *(void *)(v9 + 32);
  uint64_t v12 = *(void *)(v9 + 40);
  if (v10 < 2)
  {
    sub_21F770E38(*(void *)(v9 + 32), *(void *)(v9 + 40), v10);
LABEL_4:
    sub_21F96D5C0(1);
    uint64_t v17 = v7;
    uint64_t v18 = v8;
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a4 + 32))(a1, &v17, a3, a4);
  }
  uint64_t v14 = *(void *)(v9 + 56);
  uint64_t v15 = *(void *)(v9 + 64);
  swift_beginAccess();
  sub_21F7607AC(v11, v12, 2);
  sub_21F7622A4(v11, v12, 2);
  swift_endAccess();
  sub_21F770E38(v11, v12, 2);
  swift_beginAccess();
  if (*(unsigned __int8 *)(v7 + 457) << 8 == 512) {
    sub_21F7CB424(v14, (_WORD *)(v7 + 456), v14, v15);
  }
  swift_endAccess();
  char v16 = *(unsigned char *)(v7 + 1192);
  *(unsigned char *)(v7 + 1192) = 1;
  uint64_t v17 = v7;
  uint64_t v18 = v8;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a4 + 32))(a1, &v17, a3, a4);
  *(unsigned char *)(v7 + 1192) = v16;
  return result;
}

uint64_t sub_21F9460B0@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  char v74 = *a2;
  uint64_t v8 = *((void *)a2 + 1);
  uint64_t v9 = (long long *)(a1 + *(int *)(type metadata accessor for ModifiedChartContent_Symbol() + 36));
  unsigned int v10 = *((unsigned __int8 *)v9 + 48);
  if ((v10 & 0x80) != 0) {
    goto LABEL_4;
  }
  uint64_t v12 = *((void *)v9 + 4);
  uint64_t v11 = *((void *)v9 + 5);
  if (v10 < 2)
  {
    sub_21F770E38(*((void *)v9 + 4), *((void *)v9 + 5), v10);
LABEL_4:
    v90[0] = v74;
    uint64_t v91 = v8;
    return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a4 + 40))(a1, v90, a3, a4);
  }
  uint64_t v69 = a1;
  uint64_t v14 = v8 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  uint64_t v71 = v8;
  uint64_t v72 = v14 + 88;
  uint64_t v70 = v14;
  sub_21F76C978(v14 + 88, (uint64_t)v90, &qword_26AD46858);
  uint64_t v73 = type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v15 = (uint64_t *)(v14 + *(int *)(v73 + 76));
  uint64_t v16 = v15[1];
  uint64_t v17 = v15[2];
  uint64_t v18 = v15[3];
  uint64_t v20 = v15[4];
  uint64_t v19 = v15[5];
  uint64_t v21 = v15[6];
  uint64_t v22 = v15[7];
  uint64_t v23 = v15[8];
  uint64_t v92 = *v15;
  uint64_t v93 = v16;
  uint64_t v94 = v17;
  uint64_t v95 = v18;
  uint64_t v96 = v20;
  uint64_t v97 = v19;
  uint64_t v98 = v21;
  uint64_t v99 = v22;
  uint64_t v100 = v23;
  LOBYTE(v15) = *((unsigned char *)v9 + 16);
  uint64_t v24 = *((void *)v9 + 3);
  long long v101 = *v9;
  char v102 = (char)v15;
  uint64_t v103 = v24;
  uint64_t v104 = v12;
  uint64_t v105 = v11;
  char v106 = 2;
  long long v107 = *(long long *)((char *)v9 + 56);
  uint64_t v67 = v92;
  uint64_t v68 = v23;
  uint64_t v25 = v92;
  uint64_t v65 = v17;
  uint64_t v66 = v16;
  uint64_t v63 = v20;
  uint64_t v64 = v18;
  uint64_t v59 = a4;
  uint64_t v26 = v19;
  uint64_t v61 = v21;
  uint64_t v62 = v19;
  char v27 = v21;
  uint64_t v60 = v22;
  sub_21F761E74(v92, v16, v17, v18, v20, v19, v21);
  sub_21F761E74(v25, v16, v17, v18, v20, v26, v27);
  sub_21F7CC8BC((uint64_t)&v101, 5, (uint64_t)v77);
  char v79 = 0;
  swift_beginAccess();
  sub_21F799B78((uint64_t)v77, v72, &qword_26AD46858);
  uint64_t v28 = *(void *)v9;
  uint64_t v29 = *((void *)v9 + 1);
  uint64_t v30 = *((unsigned __int8 *)v9 + 16);
  uint64_t v32 = *((void *)v9 + 3);
  uint64_t v31 = *((void *)v9 + 4);
  uint64_t v33 = *((void *)v9 + 5);
  LOBYTE(v18) = *((unsigned char *)v9 + 48);
  uint64_t v34 = v70 + *(int *)(v73 + 76);
  uint64_t v35 = *(void *)v34;
  uint64_t v36 = *(void *)(v34 + 8);
  uint64_t v57 = *(void *)(v34 + 24);
  uint64_t v58 = *(void *)(v34 + 16);
  uint64_t v55 = *(void *)(v34 + 40);
  uint64_t v56 = *(void *)(v34 + 32);
  uint64_t v54 = *(void *)(v34 + 48);
  long long v37 = *(long long *)((char *)v9 + 56);
  *(void *)uint64_t v34 = *(void *)v9;
  *(void *)(v34 + 8) = v29;
  *(void *)(v34 + 16) = v30;
  *(void *)(v34 + 24) = v32;
  *(void *)(v34 + 32) = v31;
  *(void *)(v34 + 40) = v33;
  *(void *)(v34 + 48) = v18;
  *(_OWORD *)(v34 + 56) = v37;
  swift_endAccess();
  sub_21F7652C0(v28, v29, v30);
  swift_bridgeObjectRetain();
  sub_21F770E44(v31, v33, v18);
  sub_21F761EDC(v35, v36, v58, v57, v56, v55, v54);
  v77[0] = v74;
  uint64_t v78 = v71;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, char *))(v59 + 40))(v89, v69, v77);
  uint64_t v75 = v89[0];
  sub_21F76C978((uint64_t)v90, (uint64_t)v77, &qword_26AD46858);
  sub_21F761EDC(v67, v66, v65, v64, v63, v62, v61);
  uint64_t v80 = v67;
  uint64_t v81 = v66;
  uint64_t v82 = v65;
  uint64_t v83 = v64;
  uint64_t v84 = v63;
  uint64_t v85 = v62;
  uint64_t v86 = v61;
  uint64_t v87 = v60;
  uint64_t v88 = v68;
  swift_beginAccess();
  sub_21F799B78((uint64_t)v77, v72, &qword_26AD46858);
  sub_21F76C9DC((uint64_t)v90, (uint64_t)v77, &qword_26AD46858);
  uint64_t v38 = v93;
  uint64_t v39 = v94;
  uint64_t v40 = v95;
  uint64_t v41 = v96;
  uint64_t v42 = v97;
  uint64_t v43 = v98;
  uint64_t v44 = v99;
  uint64_t v45 = v100;
  uint64_t v80 = v92;
  uint64_t v81 = v93;
  uint64_t v82 = v94;
  uint64_t v83 = v95;
  uint64_t v84 = v96;
  uint64_t v85 = v97;
  uint64_t v86 = v98;
  uint64_t v87 = v99;
  uint64_t v88 = v100;
  uint64_t v46 = (uint64_t *)(v70 + *(int *)(v73 + 76));
  uint64_t v47 = *v46;
  uint64_t v48 = v46[1];
  uint64_t v49 = v46[2];
  uint64_t v50 = v46[3];
  uint64_t v51 = v46[4];
  uint64_t v52 = v46[5];
  uint64_t v53 = v46[6];
  *uint64_t v46 = v92;
  v46[1] = v38;
  v46[2] = v39;
  v46[3] = v40;
  v46[4] = v41;
  v46[5] = v42;
  v46[6] = v43;
  v46[7] = v44;
  v46[8] = v45;
  swift_endAccess();
  sub_21F761EDC(v47, v48, v49, v50, v51, v52, v53);
  uint64_t result = sub_21F76CA84((uint64_t)v77, &qword_26AD46858);
  *a5 = v75;
  return result;
}

uint64_t sub_21F94652C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_21F945F1C(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t sub_21F946538@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return sub_21F9460B0(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t sub_21F946544(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  long long v29 = *a2;
  uint64_t v7 = a1 + *(int *)(type metadata accessor for ModifiedChartContent_SymbolSize() + 36);
  unint64_t v9 = *(unint64_t *)(v7 + 32);
  uint64_t v8 = *(void *)(v7 + 40);
  int v10 = *(char *)(v7 + 48);
  uint64_t v11 = *(void *)(v7 + 56);
  uint64_t v12 = *(void *)(v7 + 64);
  if (v10 < 0)
  {
    uint64_t v16 = *(void *)(v7 + 64);
    uint64_t v17 = *(void *)(v7 + 32);
    uint64_t v28 = *(uint64_t *)(v7 + 40);
    uint64_t v18 = v9 & 0x7FF0000000000000;
    if (v10)
    {
      swift_beginAccess();
      BOOL v19 = v18 == 0x7FF0000000000000;
      uint64_t v12 = v16;
      if (!v19)
      {
        if (*(unsigned char *)(v29 + 504))
        {
          double v22 = *(double *)&v9;
        }
        else
        {
          double v22 = *(double *)(v29 + 488);
          if (v22 >= *(double *)&v9) {
            double v22 = *(double *)&v9;
          }
          if (*(double *)(v29 + 496) >= *(double *)&v9) {
            uint64_t v17 = *(void *)(v29 + 496);
          }
        }
        *(double *)(v29 + 488) = v22;
        *(void *)(v29 + 496) = v17;
        *(unsigned char *)(v29 + 504) = 0;
      }
      uint64_t v13 = v29;
      if ((~v8 & 0x7FF0000000000000) != 0)
      {
        if (*(unsigned char *)(v29 + 504))
        {
          *(void *)(v29 + 488) = v8;
          *(void *)(v29 + 496) = v8;
        }
        else
        {
          float64x2_t v25 = *(float64x2_t *)(v29 + 488);
          float64x2_t v26 = (float64x2_t)vdupq_lane_s64(v28, 0);
          v27.i64[0] = vmovn_s64(vcgtq_f64(v26, v25)).i32[0];
          v27.i64[1] = vmovn_s64(vcgeq_f64(v25, v26)).i32[1];
          *(int8x16_t *)(v29 + 488) = vbslq_s8(v27, (int8x16_t)v25, (int8x16_t)v26);
        }
        *(unsigned char *)(v29 + 504) = 0;
      }
    }
    else
    {
      swift_beginAccess();
      BOOL v19 = v18 == 0x7FF0000000000000;
      uint64_t v12 = v16;
      uint64_t v20 = (unsigned char *)(v29 + 480);
      if (!v19)
      {
        if (*v20)
        {
          double v21 = *(double *)&v9;
        }
        else
        {
          double v21 = *(double *)(v29 + 464);
          if (v21 >= *(double *)&v9) {
            double v21 = *(double *)&v9;
          }
          if (*(double *)(v29 + 472) >= *(double *)&v9) {
            uint64_t v17 = *(void *)(v29 + 472);
          }
        }
        *(double *)(v29 + 464) = v21;
        *(void *)(v29 + 472) = v17;
        *uint64_t v20 = 0;
      }
      uint64_t v13 = v29;
      if ((~v8 & 0x7FF0000000000000) != 0)
      {
        if (*v20)
        {
          *(void *)(v29 + 464) = v8;
          *(void *)(v29 + 472) = v8;
          *uint64_t v20 = 0;
        }
        else
        {
          double v24 = *(double *)(v29 + 464);
          double v23 = *(double *)(v29 + 472);
          if (v24 >= *(double *)&v28) {
            double v24 = *(double *)&v28;
          }
          if (v23 < *(double *)&v28) {
            double v23 = *(double *)&v28;
          }
          *(double *)(v29 + 464) = v24;
          *(double *)(v29 + 472) = v23;
          *uint64_t v20 = 0;
        }
      }
    }
  }
  else
  {
    swift_beginAccess();
    sub_21F7607AC(v9, v8, v10);
    sub_21F7622A4(v9, v8, v10);
    swift_endAccess();
    sub_21F770E38(v9, v8, v10);
    uint64_t v13 = v29;
  }
  uint64_t v14 = v13;
  swift_beginAccess();
  if (*(unsigned __int8 *)(v14 + 529) << 8 == 512) {
    sub_21F7CB424(v11, (_WORD *)(v14 + 528), v11, v12);
  }
  swift_endAccess();
  long long v30 = v29;
  return (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(a4 + 32))(a1, &v30, a3, a4);
}

uint64_t sub_21F946804@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v4 = a1;
  char v47 = *a2;
  uint64_t v39 = *((void *)a2 + 1);
  uint64_t v5 = v39 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  uint64_t v45 = *(void *)(v5 + 144);
  uint64_t v46 = *(void *)(v5 + 136);
  char v44 = *(unsigned char *)(v5 + 152);
  uint64_t v38 = type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v6 = (uint64_t *)(v5 + *(int *)(v38 + 80));
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  uint64_t v42 = *v6;
  uint64_t v10 = v6[2];
  uint64_t v9 = v6[3];
  uint64_t v51 = v6[5];
  uint64_t v11 = v6[7];
  uint64_t v49 = v6[4];
  uint64_t v50 = v6[6];
  uint64_t v43 = v6[8];
  uint64_t v12 = v4 + *(int *)(type metadata accessor for ModifiedChartContent_SymbolSize() + 36);
  uint64_t v35 = *(void *)(v12 + 8);
  uint64_t v36 = *(void *)v12;
  uint64_t v34 = *(unsigned __int8 *)(v12 + 16);
  uint64_t v13 = *(void *)(v12 + 32);
  uint64_t v37 = *(void *)(v12 + 24);
  uint64_t v14 = *(void *)(v12 + 40);
  LOBYTE(v4) = *(unsigned char *)(v12 + 48);
  long long v33 = *(_OWORD *)(v12 + 56);
  sub_21F761E74(v8, v7, v10, v9, v49, v51, v50);
  *(double *)(v5 + 136) = sub_21F7E06F8(v13, v14, v4, 6);
  *(void *)(v5 + 144) = 0;
  *(unsigned char *)(v5 + 152) = 0;
  uint64_t v15 = v5 + *(int *)(v38 + 80);
  uint64_t v16 = *(void *)(v15 + 8);
  uint64_t v31 = *(void *)(v15 + 16);
  uint64_t v32 = *(void *)v15;
  uint64_t v29 = *(void *)(v15 + 32);
  uint64_t v30 = *(void *)(v15 + 24);
  uint64_t v27 = *(void *)(v15 + 48);
  uint64_t v28 = *(void *)(v15 + 40);
  *(void *)uint64_t v15 = v36;
  *(void *)(v15 + 8) = v35;
  *(void *)(v15 + 16) = v34;
  *(void *)(v15 + 24) = v37;
  *(void *)(v15 + 32) = v13;
  *(void *)(v15 + 40) = v14;
  *(void *)(v15 + 48) = v4;
  *(_OWORD *)(v15 + 56) = v33;
  sub_21F7652C0(v36, v35, v34);
  swift_bridgeObjectRetain();
  sub_21F770E44(v13, v14, v4);
  sub_21F761EDC(v32, v16, v31, v30, v29, v28, v27);
  v52[0] = v47;
  uint64_t v53 = v39;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, unsigned char *))(a3 + 40))(&v54, a1, v52);
  uint64_t v17 = v54;
  *(void *)(v5 + 136) = v46;
  *(void *)(v5 + 144) = v45;
  *(unsigned char *)(v5 + 152) = v44;
  uint64_t v18 = (uint64_t *)(v5 + *(int *)(v38 + 80));
  uint64_t v19 = *v18;
  uint64_t v20 = v18[1];
  uint64_t v21 = v18[2];
  uint64_t v22 = v18[3];
  uint64_t v23 = v18[4];
  uint64_t v24 = v18[5];
  uint64_t v25 = v18[6];
  *uint64_t v18 = v42;
  v18[1] = v7;
  v18[2] = v10;
  v18[3] = v9;
  v18[4] = v49;
  v18[5] = v51;
  v18[6] = v50;
  v18[7] = v11;
  v18[8] = v43;
  uint64_t result = sub_21F761EDC(v19, v20, v21, v22, v23, v24, v25);
  *a4 = v17;
  return result;
}

uint64_t sub_21F946ABC(uint64_t a1, long long *a2, uint64_t a3)
{
  return sub_21F946544(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t sub_21F946AC8@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return sub_21F946804(a1, a2, *(void *)(a3 + 24), a4);
}

uint64_t sub_21F946AD4(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  long long v29 = *a2;
  uint64_t v7 = a1 + *(int *)(type metadata accessor for ModifiedChartContent_LineStyle() + 36);
  unint64_t v9 = *(unint64_t *)(v7 + 32);
  uint64_t v8 = *(void *)(v7 + 40);
  int v10 = *(char *)(v7 + 48);
  uint64_t v11 = *(void *)(v7 + 56);
  uint64_t v12 = *(void *)(v7 + 64);
  if (v10 < 0)
  {
    uint64_t v16 = *(void *)(v7 + 64);
    uint64_t v17 = *(void *)(v7 + 32);
    uint64_t v28 = *(uint64_t *)(v7 + 40);
    uint64_t v18 = v9 & 0x7FF0000000000000;
    if (v10)
    {
      swift_beginAccess();
      BOOL v19 = v18 == 0x7FF0000000000000;
      uint64_t v12 = v16;
      if (!v19)
      {
        if (*(unsigned char *)(v29 + 576))
        {
          double v22 = *(double *)&v9;
        }
        else
        {
          double v22 = *(double *)(v29 + 560);
          if (v22 >= *(double *)&v9) {
            double v22 = *(double *)&v9;
          }
          if (*(double *)(v29 + 568) >= *(double *)&v9) {
            uint64_t v17 = *(void *)(v29 + 568);
          }
        }
        *(double *)(v29 + 560) = v22;
        *(void *)(v29 + 568) = v17;
        *(unsigned char *)(v29 + 576) = 0;
      }
      uint64_t v13 = v29;
      if ((~v8 & 0x7FF0000000000000) != 0)
      {
        if (*(unsigned char *)(v29 + 576))
        {
          *(void *)(v29 + 560) = v8;
          *(void *)(v29 + 568) = v8;
        }
        else
        {
          float64x2_t v25 = *(float64x2_t *)(v29 + 560);
          float64x2_t v26 = (float64x2_t)vdupq_lane_s64(v28, 0);
          v27.i64[0] = vmovn_s64(vcgtq_f64(v26, v25)).i32[0];
          v27.i64[1] = vmovn_s64(vcgeq_f64(v25, v26)).i32[1];
          *(int8x16_t *)(v29 + 560) = vbslq_s8(v27, (int8x16_t)v25, (int8x16_t)v26);
        }
        *(unsigned char *)(v29 + 576) = 0;
      }
    }
    else
    {
      swift_beginAccess();
      BOOL v19 = v18 == 0x7FF0000000000000;
      uint64_t v12 = v16;
      uint64_t v20 = (unsigned char *)(v29 + 552);
      if (!v19)
      {
        if (*v20)
        {
          double v21 = *(double *)&v9;
        }
        else
        {
          double v21 = *(double *)(v29 + 536);
          if (v21 >= *(double *)&v9) {
            double v21 = *(double *)&v9;
          }
          if (*(double *)(v29 + 544) >= *(double *)&v9) {
            uint64_t v17 = *(void *)(v29 + 544);
          }
        }
        *(double *)(v29 + 536) = v21;
        *(void *)(v29 + 544) = v17;
        *uint64_t v20 = 0;
      }
      uint64_t v13 = v29;
      if ((~v8 & 0x7FF0000000000000) != 0)
      {
        if (*v20)
        {
          *(void *)(v29 + 536) = v8;
          *(void *)(v29 + 544) = v8;
          *uint64_t v20 = 0;
        }
        else
        {
          double v23 = *(double *)(v29 + 544);
          double v24 = *(double *)(v29 + 536);
          if (v24 >= *(double *)&v28) {
            double v24 = *(double *)&v28;
          }
          *(double *)(v29 + 536) = v24;
          if (v23 < *(double *)&v28) {
            double v23 = *(double *)&v28;
          }
          *(double *)(v29 + 544) = v23;
          *uint64_t v20 = 0;
        }
      }
    }
  }
  else
  {
    swift_beginAccess();
    sub_21F7607AC(v9, v8, v10);
    sub_21F7622A4(v9, v8, v10);
    swift_endAccess();
    sub_21F770E38(v9, v8, v10);
    uint64_t v13 = v29;
  }
  uint64_t v14 = v13;
  swift_beginAccess();
  if (*(unsigned __int8 *)(v14 + 601) << 8 == 512) {
    sub_21F7CB424(v11, (_WORD *)(v14 + 600), v11, v12);
  }
  swift_endAccess();
  long long v30 = v29;
  return (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(a4 + 32))(a1, &v30, a3, a4);
}

uint64_t sub_21F946DB4@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  char v47 = *a2;
  uint64_t v41 = *((void *)a2 + 1);
  uint64_t v4 = v41 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  long long v50 = *(_OWORD *)(v4 + 48);
  uint64_t v49 = *(void *)(v4 + 64);
  uint64_t v55 = *(void *)(v4 + 72);
  uint64_t v48 = *(void *)(v4 + 80);
  uint64_t v52 = type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v5 = (uint64_t *)(v4 + *(int *)(v52 + 84));
  uint64_t v6 = v5[1];
  uint64_t v54 = *v5;
  uint64_t v7 = v5[2];
  uint64_t v8 = v5[3];
  uint64_t v44 = v7;
  uint64_t v45 = v6;
  uint64_t v9 = v5[4];
  uint64_t v10 = v5[5];
  uint64_t v43 = v8;
  uint64_t v11 = v5[6];
  uint64_t v42 = v10;
  uint64_t v53 = v5[7];
  uint64_t v46 = v5[8];
  uint64_t v12 = a1 + *(int *)(type metadata accessor for ModifiedChartContent_LineStyle() + 36);
  uint64_t v38 = *(void *)(v12 + 8);
  uint64_t v39 = *(void *)v12;
  uint64_t v37 = *(unsigned __int8 *)(v12 + 16);
  uint64_t v40 = *(void *)(v12 + 24);
  uint64_t v31 = *(void *)(v12 + 40);
  uint64_t v32 = *(void *)(v12 + 32);
  unsigned __int8 v13 = *(unsigned char *)(v12 + 48);
  swift_bridgeObjectRetain();
  long long v36 = *(_OWORD *)(v12 + 56);
  sub_21F761E74(v54, v6, v7, v8, v9, v10, v11);
  sub_21F7E04AC(*(double *)&v32, *(double *)&v31, v13, 7, (uint64_t)v61);
  uint64_t v14 = v62;
  long long v15 = v61[1];
  *(_OWORD *)(v4 + 48) = v61[0];
  *(_OWORD *)(v4 + 64) = v15;
  *(void *)(v4 + 80) = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = v4 + *(int *)(v52 + 84);
  uint64_t v17 = *(void *)v16;
  uint64_t v18 = *(void *)(v16 + 8);
  uint64_t v19 = *(void *)(v16 + 32);
  uint64_t v34 = *(void *)(v16 + 24);
  uint64_t v35 = *(void *)(v16 + 16);
  uint64_t v20 = *(void *)(v16 + 40);
  uint64_t v33 = *(void *)(v16 + 48);
  *(void *)uint64_t v16 = v39;
  *(void *)(v16 + 8) = v38;
  *(void *)(v16 + 16) = v37;
  *(void *)(v16 + 24) = v40;
  *(void *)(v16 + 32) = v32;
  *(void *)(v16 + 40) = v31;
  *(void *)(v16 + 48) = v13;
  *(_OWORD *)(v16 + 56) = v36;
  sub_21F7652C0(v39, v38, v37);
  swift_bridgeObjectRetain();
  sub_21F770E44(v32, v31, v13);
  sub_21F761EDC(v17, v18, v35, v34, v19, v20, v33);
  v58[0] = v47;
  uint64_t v59 = v41;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, unsigned char *))(a3 + 40))(&v60, a1, v58);
  uint64_t v21 = v60;
  *(_OWORD *)(v4 + 48) = v50;
  *(void *)(v4 + 64) = v49;
  *(void *)(v4 + 72) = v55;
  *(void *)(v4 + 80) = v48;
  swift_bridgeObjectRelease();
  double v22 = (uint64_t *)(v4 + *(int *)(v52 + 84));
  uint64_t v23 = *v22;
  uint64_t v24 = v22[1];
  uint64_t v25 = v22[2];
  uint64_t v26 = v22[3];
  uint64_t v27 = v22[4];
  uint64_t v28 = v22[5];
  uint64_t v29 = v22[6];
  *double v22 = v54;
  v22[1] = v45;
  void v22[2] = v44;
  v22[3] = v43;
  v22[4] = v9;
  v22[5] = v42;
  v22[6] = v11;
  v22[7] = v53;
  v22[8] = v46;
  uint64_t result = sub_21F761EDC(v23, v24, v25, v26, v27, v28, v29);
  *a4 = v21;
  return result;
}

uint64_t sub_21F9470AC(uint64_t a1, long long *a2, uint64_t a3)
{
  return sub_21F946AD4(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t sub_21F9470B8@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return sub_21F946DB4(a1, a2, *(void *)(a3 + 24), a4);
}

uint64_t sub_21F9470C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v69 = a2;
  uint64_t v70 = a1;
  uint64_t v12 = type metadata accessor for PlottableValue();
  MEMORY[0x270FA5388](v12 - 8);
  *(void *)&long long v63 = (char *)&v61 - v13;
  uint64_t v14 = type metadata accessor for PlottableProjection.Storage();
  uint64_t v68 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v61 - v15;
  uint64_t v64 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v62 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v65 = (char *)&v61 - v20;
  uint64_t v21 = type metadata accessor for PlottableProjection();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v61 - v23;
  long long v69 = *(_OWORD *)v69;
  uint64_t v66 = a3;
  *(void *)&long long v72 = a3;
  *((void *)&v72 + 1) = a4;
  *(void *)&long long v73 = a5;
  *((void *)&v73 + 1) = a6;
  uint64_t v67 = a6;
  unint64_t v74 = a7;
  uint64_t v25 = v70 + *(int *)(type metadata accessor for ModifiedChartContent_LineStyle_Plottable() + 60);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, v25, v21);
  uint64_t v26 = a5;
  sub_21F959E10((uint64_t)v24, a5, a7, (uint64_t *)&v72);
  uint64_t v27 = v69;
  swift_beginAccess();
  sub_21F799B78((uint64_t)&v72, v27 + 944, qword_26AD44558);
  swift_endAccess();
  uint64_t v28 = *(int *)(v21 + 44);
  uint64_t v29 = v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v16, v25 + v28, v14);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v14);
    uint64_t v30 = v67;
    uint64_t v31 = v66;
  }
  else
  {
    uint64_t v68 = v27;
    uint64_t v32 = v64;
    uint64_t v33 = v65;
    (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v65, v16, v26);
    uint64_t v34 = *(void *)v25;
    uint64_t v35 = *(void *)(v25 + 8);
    char v36 = *(unsigned char *)(v25 + 16);
    uint64_t v37 = *(void *)(v25 + 24);
    uint64_t v38 = (uint64_t)v62;
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v62, v33, v26);
    uint64_t v39 = v63;
    sub_21F753D84(v34, v35, v36, v37, v38, v26, v63);
    swift_bridgeObjectRetain();
    sub_21F7652C0(v34, v35, v36);
    sub_21F764B80(v39, v26, a7, (uint64_t)&v72);
    unint64_t v42 = v74;
    uint64_t v41 = v75;
    char v43 = v76;
    if (v76 < 0)
    {
      uint64_t v48 = (unsigned char *)(v68 + 552);
      unint64_t v49 = v74;
      *(void *)&long long v40 = v75;
      uint64_t v50 = v74 & 0x7FF0000000000000;
      long long v63 = v40;
      if (v76)
      {
        swift_beginAccess();
        uint64_t v30 = v67;
        uint64_t v31 = v66;
        if (v50 != 0x7FF0000000000000)
        {
          if (v48[24])
          {
            double v53 = *(double *)&v42;
            uint64_t v54 = v68;
          }
          else
          {
            uint64_t v54 = v68;
            double v53 = *(double *)(v68 + 560);
            if (v53 >= *(double *)&v42) {
              double v53 = *(double *)&v42;
            }
            if (*(double *)(v68 + 568) >= *(double *)&v42) {
              unint64_t v49 = *(void *)(v68 + 568);
            }
          }
          *(double *)(v54 + 560) = v53;
          *(void *)(v54 + 568) = v49;
          v48[24] = 0;
        }
        uint64_t v44 = v68;
        if ((~v41 & 0x7FF0000000000000) != 0)
        {
          uint64_t v44 = v68;
          if (v48[24])
          {
            *(void *)(v68 + 560) = v41;
            *(void *)(v44 + 568) = v41;
          }
          else
          {
            float64x2_t v58 = *(float64x2_t *)(v68 + 560);
            float64x2_t v59 = (float64x2_t)vdupq_lane_s64(v63, 0);
            v60.i64[0] = vmovn_s64(vcgtq_f64(v59, v58)).i32[0];
            v60.i64[1] = vmovn_s64(vcgeq_f64(v58, v59)).i32[1];
            *(int8x16_t *)(v68 + 560) = vbslq_s8(v60, (int8x16_t)v58, (int8x16_t)v59);
          }
          v48[24] = 0;
        }
      }
      else
      {
        swift_beginAccess();
        uint64_t v30 = v67;
        uint64_t v31 = v66;
        if (v50 != 0x7FF0000000000000)
        {
          if (*v48)
          {
            double v51 = *(double *)&v42;
            uint64_t v52 = v68;
          }
          else
          {
            uint64_t v52 = v68;
            double v51 = *(double *)(v68 + 536);
            if (v51 >= *(double *)&v42) {
              double v51 = *(double *)&v42;
            }
            if (*(double *)(v68 + 544) >= *(double *)&v42) {
              unint64_t v49 = *(void *)(v68 + 544);
            }
          }
          *(double *)(v52 + 536) = v51;
          *(void *)(v52 + 544) = v49;
          *uint64_t v48 = 0;
        }
        uint64_t v44 = v68;
        if ((~v41 & 0x7FF0000000000000) != 0)
        {
          if (*v48)
          {
            uint64_t v44 = v68;
            *(void *)(v68 + 536) = v41;
            *(void *)(v44 + 544) = v41;
            *uint64_t v48 = 0;
          }
          else
          {
            uint64_t v44 = v68;
            double v55 = *(double *)(v68 + 544);
            double v56 = *(double *)(v68 + 536);
            double v57 = *(double *)&v63;
            if (v56 >= *(double *)&v63) {
              double v56 = *(double *)&v63;
            }
            *(double *)(v68 + 536) = v56;
            if (v55 < v57) {
              double v55 = v57;
            }
            *(double *)(v44 + 544) = v55;
            *uint64_t v48 = 0;
          }
        }
      }
    }
    else
    {
      uint64_t v44 = v68;
      swift_beginAccess();
      sub_21F7607AC(v42, v41, v43);
      sub_21F7622A4(v42, v41, v43);
      swift_endAccess();
      sub_21F770E38(v42, v41, v43);
      uint64_t v30 = v67;
      uint64_t v31 = v66;
    }
    uint64_t v45 = v77;
    uint64_t v46 = v78;
    swift_beginAccess();
    if (*(unsigned __int8 *)(v44 + 601) << 8 == 512) {
      sub_21F7CB424(v45, (_WORD *)(v44 + 600), v45, v46);
    }
    swift_endAccess();
    long long v79 = v72;
    long long v80 = v73;
    sub_21F7E0D5C((uint64_t)&v79, (uint64_t)v82);
    sub_21F7E0DB8((uint64_t)v82);
    uint64_t v81 = *((void *)&v80 + 1);
    sub_21F7741D0((uint64_t)&v81);
    sub_21F770E38(v42, v41, v43);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v26);
  }
  long long v71 = v69;
  return (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(v30 + 32))(v70, &v71, v31, v30);
}

uint64_t sub_21F94783C@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v136 = a1;
  uint64_t v137 = a6;
  float64x2_t v129 = a8;
  uint64_t v13 = type metadata accessor for PlottableValue();
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v118 = (uint64_t)v102 - v14;
  uint64_t v121 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v15);
  v117 = (char *)v102 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v120 = (char *)v102 - v18;
  uint64_t v19 = type metadata accessor for PlottableProjection.Storage();
  uint64_t v125 = *(void *)(v19 - 8);
  uint64_t v126 = v19;
  MEMORY[0x270FA5388](v19);
  uint64_t v124 = (uint64_t)v102 - v20;
  uint64_t v21 = type metadata accessor for PlottableProjection();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)v102 - v23;
  int v127 = *a2;
  uint64_t v25 = *((void *)a2 + 1);
  uint64_t v128 = a3;
  *(void *)&v155[0] = a3;
  *((void *)&v155[0] + 1) = a4;
  *(void *)&v155[1] = a5;
  *((void *)&v155[1] + 1) = v137;
  *(void *)&v155[2] = a7;
  uint64_t v26 = v136 + *(int *)(type metadata accessor for ModifiedChartContent_LineStyle_Plottable() + 60);
  uint64_t v27 = *(void (**)(char *))(v22 + 16);
  uint64_t v122 = v21;
  uint64_t v123 = v26;
  v27(v24);
  uint64_t v28 = a4;
  sub_21F76C9DC(v25 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_lineStyleScale, (uint64_t)v193, &qword_26AD491E0);
  sub_21F76C9DC((uint64_t)v193, (uint64_t)v155, &qword_26AD491E0);
  swift_retain();
  sub_21F94E1E0((uint64_t)v193, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F77F3E4);
  sub_21FA24500();
  uint64_t v130 = a5;
  uint64_t v119 = a7;
  sub_21F815BD8((uint64_t)v24, (uint64_t)v155, (uint64_t)&v151, a4, MEMORY[0x263F18670], (uint64_t *)v154);
  long long v132 = v154[0];
  uint64_t v135 = *(void *)&v154[2];
  uint64_t v139 = *(void *)&v154[1];
  uint64_t v140 = *((void *)&v154[2] + 1);
  uint64_t v141 = *((void *)&v154[3] + 1);
  uint64_t v142 = *(void *)&v154[3];
  uint64_t v133 = *((void *)&v154[1] + 1);
  uint64_t v134 = *(void *)&v154[4];
  int v143 = BYTE8(v154[4]);
  uint64_t v131 = v25;
  uint64_t v29 = v25 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  uint64_t v138 = type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v30 = v29 + *(int *)(v138 + 112);
  if (*(void *)(v30 + 24))
  {
    sub_21F83E3D8(v30, (uint64_t)&v151);
    sub_21F817950(v154);
    sub_21F7D2934((uint64_t)&v151);
    if (*((void *)&v154[1] + 1) != 2)
    {
      memcpy(v155, v154, 0x2C9uLL);
      uint64_t v31 = v133;
      uint64_t v32 = v134;
      uint64_t v33 = v135;
      uint64_t v34 = v141;
      uint64_t v35 = v142;
      uint64_t v112 = *((void *)&v155[7] + 1);
      uint64_t v113 = *(void *)&v155[7];
      uint64_t v107 = *(void *)&v155[9];
      uint64_t v108 = *(void *)&v155[8];
      uint64_t v36 = v140;
      uint64_t v114 = *((void *)&v155[9] + 1);
      uint64_t v115 = v28;
      uint64_t v110 = *(void *)&v155[10];
      *(void *)&long long v111 = *((void *)&v155[8] + 1);
      uint64_t v109 = *((void *)&v155[10] + 1);
      uint64_t v106 = *(void *)&v155[11];
      LODWORD(v105) = BYTE8(v155[11]);
      uint64_t v37 = v132;
      uint64_t v116 = v29;
      uint64_t v38 = *((void *)&v132 + 1);
      sub_21F7BB3B4(v132, *((uint64_t *)&v132 + 1), v139, v133);
      char v39 = v143;
      sub_21F8512C4(v33, v36, v35, v34, v32, v143);
      sub_21F94E170(v113, v112, v108, v111, v107, v114, v110, v109, v106, v105);
      *(void *)&v155[7] = v37;
      *((void *)&v155[7] + 1) = v38;
      *(void *)&v155[8] = v139;
      *((void *)&v155[8] + 1) = v31;
      *(void *)&v155[9] = v33;
      *((void *)&v155[9] + 1) = v36;
      *(void *)&v155[10] = v35;
      *((void *)&v155[10] + 1) = v34;
      *(void *)&v155[11] = v32;
      BYTE8(v155[11]) = v39;
      uint64_t v29 = v116;
      uint64_t v40 = type metadata accessor for TypedVectorizedProperties();
      uint64_t v41 = *(void *)(v40 - 8);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v41 + 16))(v154, v155, v40);
      sub_21F8178E8(v154, (uint64_t *)&v151);
      swift_beginAccess();
      sub_21F799B78((uint64_t)&v151, v29 + *(int *)(v138 + 112), &qword_267EE7B20);
      swift_endAccess();
      (*(void (**)(_OWORD *, uint64_t))(v41 + 8))(v155, v40);
      goto LABEL_6;
    }
  }
  else
  {
    memset(v154, 0, 24);
    *((void *)&v154[1] + 1) = 2;
    bzero(&v154[2], 0x2A9uLL);
  }
  type metadata accessor for TypedVectorizedProperties();
  uint64_t v42 = sub_21FA26340();
  (*(void (**)(_OWORD *, uint64_t))(*(void *)(v42 - 8) + 8))(v154, v42);
  memset(v157, 0, sizeof(v157));
  uint64_t v158 = 1;
  uint64_t v160 = 0;
  uint64_t v159 = 0;
  char v161 = 0;
  memset(v162, 0, sizeof(v162));
  uint64_t v163 = 1;
  uint64_t v165 = 0;
  uint64_t v164 = 0;
  char v166 = 0;
  long long v43 = v132;
  long long v167 = v132;
  char v44 = v139;
  uint64_t v168 = v139;
  uint64_t v46 = v133;
  uint64_t v45 = v134;
  uint64_t v169 = v133;
  uint64_t v47 = v135;
  uint64_t v170 = v135;
  uint64_t v171 = v140;
  uint64_t v172 = v142;
  uint64_t v173 = v141;
  uint64_t v174 = v134;
  char v175 = v143;
  uint64_t v145 = 0;
  uint64_t v146 = 0;
  uint64_t v147 = 0;
  uint64_t v148 = 1;
  long long v149 = 0u;
  memset(v150, 0, sizeof(v150));
  memset(v176, 0, 48);
  v176[48] = -4;
  sub_21F83E64C((uint64_t)v153);
  type metadata accessor for TypedVectorizedProperties.Position();
  uint64_t v48 = sub_21FA26340();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v48 - 8) + 32))(v177, v153, v48);
  memset(v178, 0, sizeof(v178));
  uint64_t v179 = 1;
  uint64_t v181 = 0;
  uint64_t v180 = 0;
  char v182 = 0;
  memset(v183, 0, sizeof(v183));
  uint64_t v184 = 1;
  uint64_t v186 = 0;
  uint64_t v185 = 0;
  char v187 = 0;
  memset(v188, 0, sizeof(v188));
  uint64_t v189 = 1;
  long long v190 = 0u;
  long long v191 = 0u;
  char v192 = 0;
  sub_21F817534((uint64_t)v157, (uint64_t)v162, (uint64_t)&v167, (uint64_t)&v145, (uint64_t)v176, (uint64_t)v177, (uint64_t)v178, (uint64_t)v183, (uint64_t)&v151, (uint64_t)v188, (uint64_t)v188);
  sub_21F8178E8(&v151, &v145);
  swift_beginAccess();
  uint64_t v49 = v29 + *(int *)(v138 + 112);
  sub_21F7BB3B4(v43, *((uint64_t *)&v43 + 1), v44, v46);
  sub_21F8512C4(v47, v140, v142, v141, v45, v143);
  sub_21F799B78((uint64_t)&v145, v49, &qword_267EE7B20);
  swift_endAccess();
LABEL_6:
  uint64_t v50 = v123;
  uint64_t v52 = v124;
  uint64_t v51 = v125;
  uint64_t v53 = v126;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v125 + 16))(v124, v123 + *(int *)(v122 + 44), v126);
  if (swift_getEnumCaseMultiPayload())
  {
    LOBYTE(v155[0]) = v127;
    *((void *)&v155[0] + 1) = v131;
    (*(void (**)(uint64_t, _OWORD *))(v137 + 40))(v136, v155);
    swift_release();
    sub_21F7F42EC(v132, *((uint64_t *)&v132 + 1), v139, v133);
    sub_21F83E970(v135, v140, v142, v141, v134, v143);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 8))(v52, v53);
  }
  else
  {
    double v56 = v120;
    uint64_t v55 = v121;
    (*(void (**)(char *, uint64_t, uint64_t))(v121 + 32))(v120, v52, v130);
    long long v111 = *(_OWORD *)(v29 + 48);
    uint64_t v57 = *(void *)(v29 + 64);
    uint64_t v58 = *(void *)(v29 + 72);
    uint64_t v109 = *(void *)(v29 + 80);
    uint64_t v110 = v57;
    float64x2_t v59 = (uint64_t *)(v29 + *(int *)(v138 + 84));
    uint64_t v60 = *v59;
    uint64_t v114 = v59[1];
    uint64_t v115 = v60;
    uint64_t v61 = v59[2];
    uint64_t v112 = v58;
    uint64_t v113 = v61;
    uint64_t v62 = v59[3];
    uint64_t v125 = v59[4];
    uint64_t v126 = v62;
    uint64_t v124 = v59[5];
    uint64_t v122 = v59[6];
    uint64_t v63 = v59[8];
    uint64_t v116 = v59[7];
    uint64_t v108 = v63;
    uint64_t v64 = *(void *)v50;
    uint64_t v65 = *(void *)(v50 + 8);
    char v66 = *(unsigned char *)(v50 + 16);
    uint64_t v67 = *(void *)(v50 + 24);
    uint64_t v68 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
    long long v69 = v117;
    uint64_t v70 = v130;
    v68(v117, v56, v130);
    uint64_t v71 = v118;
    uint64_t v72 = (uint64_t)v69;
    uint64_t v73 = v119;
    sub_21F753D84(v64, v65, v66, v67, v72, v70, v118);
    swift_bridgeObjectRetain();
    sub_21F761E74(v115, v114, v113, v126, v125, v124, v122);
    sub_21F7652C0(v64, v65, v66);
    swift_bridgeObjectRetain();
    sub_21F764B80(v71, v70, v73, (uint64_t)v155);
    uint64_t v123 = *(void *)&v155[0];
    uint64_t v118 = LOBYTE(v155[1]);
    uint64_t v119 = *((void *)&v155[0] + 1);
    v117 = (char *)*((void *)&v155[1] + 1);
    long long v74 = v155[2];
    uint64_t v75 = LOBYTE(v155[3]);
    sub_21F7E04AC(*(double *)&v155[2], *((double *)&v155[2] + 1), v155[3], 7, (uint64_t)v154);
    uint64_t v76 = *(void *)&v154[2];
    long long v77 = v154[1];
    *(_OWORD *)(v29 + 48) = v154[0];
    *(_OWORD *)(v29 + 64) = v77;
    *(void *)(v29 + 80) = v76;
    swift_bridgeObjectRelease();
    long long v151 = v155[0];
    long long v152 = v155[1];
    sub_21F7E0D5C((uint64_t)&v151, (uint64_t)v153);
    uint64_t v156 = *((void *)&v152 + 1);
    uint64_t v78 = v137;
    long long v79 = (void *)(v29 + *(int *)(v138 + 84));
    uint64_t v80 = *v79;
    uint64_t v81 = v79[1];
    uint64_t v106 = v79[2];
    uint64_t v107 = v80;
    uint64_t v82 = v128;
    uint64_t v83 = v79[3];
    uint64_t v84 = v79[4];
    uint64_t v104 = v79[5];
    uint64_t v105 = v83;
    uint64_t v85 = v79[6];
    v102[1] = v79[7];
    uint64_t v103 = v85;
    uint64_t v86 = v119;
    *long long v79 = v123;
    v79[1] = v86;
    uint64_t v87 = v117;
    v79[2] = v118;
    v79[3] = v87;
    *((_OWORD *)v79 + 2) = v74;
    v79[6] = v75;
    *(_OWORD *)(v79 + 7) = *(_OWORD *)((char *)&v155[3] + 8);
    sub_21F7E0DEC((uint64_t)v153);
    sub_21F7744A4((uint64_t)&v156);
    sub_21F770E44(v74, *((uint64_t *)&v74 + 1), v75);
    sub_21F761EDC(v107, v81, v106, v105, v84, v104, v103);
    LOBYTE(v145) = v127;
    uint64_t v146 = v131;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, uint64_t, uint64_t))(v78 + 40))(&v144, v136, &v145, v82, v78);
    sub_21F7E0DB8((uint64_t)v153);
    sub_21F7741D0((uint64_t)&v156);
    sub_21F770E38(v74, *((uint64_t *)&v74 + 1), v75);
    sub_21F7F42EC(v132, *((uint64_t *)&v132 + 1), v139, v133);
    sub_21F83E970(v135, v140, v142, v141, v134, v143);
    (*(void (**)(char *, uint64_t))(v121 + 8))(v120, v130);
    uint64_t v88 = v144;
    *(_OWORD *)(v29 + 48) = v111;
    uint64_t v89 = v112;
    *(void *)(v29 + 64) = v110;
    *(void *)(v29 + 72) = v89;
    *(void *)(v29 + 80) = v109;
    swift_bridgeObjectRelease();
    uint64_t v90 = (uint64_t *)(v29 + *(int *)(v138 + 84));
    uint64_t v91 = *v90;
    uint64_t v92 = v90[1];
    uint64_t v93 = v90[2];
    uint64_t v94 = v90[3];
    uint64_t v95 = v90[4];
    uint64_t v96 = v90[5];
    uint64_t v97 = v90[6];
    uint64_t v98 = v114;
    *uint64_t v90 = v115;
    v90[1] = v98;
    uint64_t v99 = v126;
    v90[2] = v113;
    v90[3] = v99;
    uint64_t v100 = v124;
    v90[4] = v125;
    v90[5] = v100;
    uint64_t v101 = v116;
    v90[6] = v122;
    v90[7] = v101;
    char v90[8] = v108;
    sub_21F761EDC(v91, v92, v93, v94, v95, v96, v97);
    uint64_t result = swift_release();
    *float64x2_t v129 = v88;
  }
  return result;
}

uint64_t sub_21F9484C4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_21F94CEFC(a1, a2, a3, a4, sub_21F9470C4);
}

uint64_t sub_21F9484DC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_21F94CF30(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_21F94783C);
}

uint64_t sub_21F9484F4@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = type metadata accessor for ChartContentRenderContext.Environment(0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = *a2;
  uint64_t v14 = *((void *)a2 + 1);
  uint64_t v15 = v14 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  sub_21F7BB184(v15, (uint64_t)v12);
  uint64_t v16 = *(void (**)(uint64_t))(a1
                                       + *(int *)(type metadata accessor for ModifiedChartContent_TransformEnvironment()
                                                + 36));
  swift_beginAccess();
  v16(v15);
  swift_endAccess();
  v21[0] = v13;
  uint64_t v22 = v14;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, unsigned char *, uint64_t, uint64_t))(a4 + 40))(&v20, a1, v21, a3, a4);
  uint64_t v17 = v20;
  swift_beginAccess();
  sub_21F94DFAC((uint64_t)v12, v15);
  uint64_t result = swift_endAccess();
  *a5 = v17;
  return result;
}

uint64_t sub_21F948670@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return sub_21F9484F4(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t sub_21F94867C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v58 = a6;
  uint64_t v59 = a3;
  uint64_t v63 = a1;
  *(void *)&long long v64 = a2;
  uint64_t v14 = type metadata accessor for PlottableValue();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)v44 - v16;
  *(void *)&long long v65 = a3;
  *((void *)&v65 + 1) = a4;
  uint64_t v66 = a5;
  *(void *)&long long v67 = a6;
  *((void *)&v67 + 1) = a7;
  uint64_t v68 = a8;
  uint64_t v18 = type metadata accessor for ModifiedChartContent_Position();
  uint64_t v19 = v63;
  uint64_t v20 = v63 + *(int *)(v18 + 68);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v57 = &v75[16];
  long long v64 = *(_OWORD *)v64;
  v21(v17, v20, v14);
  sub_21F764B80((uint64_t)v17, a4, a7, (uint64_t)&v74);
  uint64_t v53 = *((void *)&v74 + 1);
  uint64_t v54 = v74;
  uint64_t v52 = v75[0];
  long long v51 = *(_OWORD *)&v75[8];
  uint64_t v49 = v77;
  uint64_t v50 = v76;
  uint64_t v47 = v79;
  uint64_t v48 = v78;
  uint64_t v22 = (uint64_t *)(v19 + *(int *)(v18 + 76));
  uint64_t v45 = *v22;
  int v46 = *((unsigned __int8 *)v22 + 8);
  swift_getKeyPath();
  swift_beginAccess();
  swift_retain();
  uint64_t v23 = (void (*)(long long *, void))swift_readAtKeyPath();
  uint64_t v25 = *(void *)v24;
  uint64_t v55 = *(void *)(v24 + 8);
  uint64_t v56 = v25;
  uint64_t v26 = *(void *)(v24 + 16);
  uint64_t v27 = *(void *)(v24 + 24);
  uint64_t v29 = *(void *)(v24 + 32);
  uint64_t v28 = *(void *)(v24 + 40);
  uint64_t v30 = *(void *)(v24 + 48);
  uint64_t v31 = *(void *)(v24 + 56);
  uint64_t v32 = *(void *)(v24 + 72);
  uint64_t v60 = *(void *)(v24 + 64);
  uint64_t v61 = v32;
  int v62 = *(unsigned __int8 *)(v24 + 80);
  sub_21F761E74(v25, v55, v26, v27, v29, v28, v30);
  v23(&v65, 0);
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  *(void *)&long long v65 = v54;
  *((void *)&v65 + 1) = v53;
  uint64_t v66 = v52;
  long long v67 = v51;
  uint64_t v68 = v50;
  uint64_t v69 = v49;
  uint64_t v70 = v48;
  uint64_t v71 = v47;
  uint64_t v72 = v45;
  char v73 = v46;
  long long v81 = v74;
  long long v82 = *(_OWORD *)v75;
  sub_21F7E0D5C((uint64_t)&v81, (uint64_t)v84);
  uint64_t v83 = *((void *)&v82 + 1);
  sub_21F770EE8((uint64_t)v57, (uint64_t)v80);
  sub_21F7E0DEC((uint64_t)v84);
  sub_21F7744A4((uint64_t)&v83);
  sub_21F7E0E54((uint64_t)v80);
  swift_setAtWritableKeyPath();
  swift_endAccess();
  long long v65 = v64;
  (*(void (**)(uint64_t, long long *))(v58 + 32))(v63, &v65);
  swift_beginAccess();
  uint64_t v33 = v56;
  *(void *)&long long v65 = v56;
  *((void *)&v65 + 1) = v55;
  char v34 = v26;
  uint64_t v66 = v26;
  *(void *)&long long v67 = v27;
  uint64_t v35 = v27;
  uint64_t v36 = v29;
  *((void *)&v67 + 1) = v29;
  uint64_t v68 = v28;
  uint64_t v37 = v28;
  char v38 = v30;
  uint64_t v69 = v30;
  uint64_t v70 = v31;
  v44[1] = v31;
  uint64_t v71 = v60;
  uint64_t v72 = v61;
  char v73 = v62;
  uint64_t v39 = v55;
  LOBYTE(v27) = v34;
  uint64_t v40 = v35;
  uint64_t v41 = v36;
  uint64_t v42 = v37;
  LOBYTE(v31) = v38;
  sub_21F761E74(v56, v55, v34, v35, v36, v37, v38);
  swift_setAtWritableKeyPath();
  swift_endAccess();
  swift_release();
  sub_21F7E0DB8((uint64_t)v84);
  sub_21F7741D0((uint64_t)&v83);
  sub_21F7E0E20((uint64_t)v80);
  return sub_21F761EDC(v33, v39, v27, v40, v41, v42, v31);
}

uint64_t sub_21F948AE0@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v64 = a8;
  uint64_t v65 = a1;
  uint64_t v58 = a6;
  uint64_t v60 = a3;
  uint64_t v61 = a9;
  uint64_t v15 = type metadata accessor for PlottableValue();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)v43 - v17;
  int v59 = *a2;
  uint64_t v57 = *((void *)a2 + 1);
  uint64_t v66 = a3;
  uint64_t v67 = a4;
  uint64_t v68 = a5;
  *(void *)&long long v69 = a6;
  *((void *)&v69 + 1) = a7;
  uint64_t v70 = v64;
  uint64_t v19 = type metadata accessor for ModifiedChartContent_Position();
  uint64_t v20 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v65 + *(int *)(v19 + 68), v15);
  sub_21F764B80((uint64_t)v18, a4, a7, (uint64_t)&v77);
  uint64_t v52 = *((void *)&v77 + 1);
  uint64_t v53 = v77;
  uint64_t v51 = v78[0];
  long long v50 = *(_OWORD *)&v78[8];
  uint64_t v56 = &v78[16];
  uint64_t v48 = v80;
  uint64_t v49 = v79;
  uint64_t v46 = v82;
  uint64_t v47 = v81;
  uint64_t v21 = (uint64_t *)(v20 + *(int *)(v19 + 76));
  uint64_t v44 = *v21;
  int v45 = *((unsigned __int8 *)v21 + 8);
  swift_getKeyPath();
  swift_beginAccess();
  swift_retain();
  uint64_t v22 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
  uint64_t v24 = *(void *)v23;
  uint64_t v25 = *(void *)(v23 + 8);
  uint64_t v26 = *(void *)(v23 + 16);
  uint64_t v27 = *(void *)(v23 + 24);
  uint64_t v28 = *(void *)(v23 + 40);
  uint64_t v54 = *(void *)(v23 + 32);
  uint64_t v55 = v24;
  uint64_t v29 = *(void *)(v23 + 48);
  uint64_t v30 = *(void *)(v23 + 56);
  uint64_t v31 = *(void *)(v23 + 72);
  uint64_t v62 = *(void *)(v23 + 64);
  uint64_t v63 = v31;
  LODWORD(v64) = *(unsigned __int8 *)(v23 + 80);
  sub_21F761E74(v24, v25, v26, v27, v54, v28, v29);
  v22(&v66, 0);
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  uint64_t v66 = v53;
  uint64_t v67 = v52;
  uint64_t v68 = v51;
  long long v69 = v50;
  uint64_t v70 = v49;
  uint64_t v71 = v48;
  uint64_t v72 = v47;
  uint64_t v73 = v46;
  uint64_t v74 = v44;
  char v75 = v45;
  long long v84 = v77;
  long long v85 = *(_OWORD *)v78;
  sub_21F7E0D5C((uint64_t)&v84, (uint64_t)v87);
  uint64_t v86 = *((void *)&v85 + 1);
  sub_21F770EE8((uint64_t)v56, (uint64_t)v83);
  sub_21F7E0DEC((uint64_t)v87);
  sub_21F7744A4((uint64_t)&v86);
  sub_21F7E0E54((uint64_t)v83);
  swift_setAtWritableKeyPath();
  swift_endAccess();
  LOBYTE(v66) = v59;
  uint64_t v67 = v57;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(v58 + 40))(v76, v65, &v66);
  uint64_t v65 = v76[0];
  swift_beginAccess();
  uint64_t v32 = v55;
  uint64_t v66 = v55;
  uint64_t v67 = v25;
  uint64_t v33 = v25;
  char v34 = v26;
  uint64_t v68 = v26;
  *(void *)&long long v69 = v27;
  uint64_t v35 = v27;
  uint64_t v36 = v54;
  *((void *)&v69 + 1) = v54;
  uint64_t v70 = v28;
  uint64_t v37 = v28;
  char v38 = v29;
  uint64_t v71 = v29;
  uint64_t v72 = v30;
  v43[1] = v30;
  uint64_t v73 = v62;
  uint64_t v74 = v63;
  char v75 = v64;
  uint64_t v39 = v33;
  LOBYTE(v27) = v34;
  uint64_t v40 = v35;
  uint64_t v41 = v37;
  LOBYTE(v30) = v38;
  sub_21F761E74(v55, v33, v34, v35, v54, v37, v38);
  swift_setAtWritableKeyPath();
  swift_endAccess();
  swift_release();
  sub_21F7E0DB8((uint64_t)v87);
  sub_21F7741D0((uint64_t)&v86);
  sub_21F7E0E20((uint64_t)v83);
  uint64_t result = sub_21F761EDC(v32, v39, v27, v40, v36, v41, v30);
  *uint64_t v61 = v65;
  return result;
}

uint64_t sub_21F948F68(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_21F94867C(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7]);
}

uint64_t sub_21F948F7C@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  return sub_21F948AE0(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a4);
}

uint64_t sub_21F948F90(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  long long v16 = *a2;
  uint64_t v13 = *(void *)a2;
  swift_beginAccess();
  v13 += 1112;
  sub_21F76C978(v13, (uint64_t)v21, &qword_26AD44550);
  *(void *)&long long v17 = a3;
  *((void *)&v17 + 1) = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v20 = a7;
  uint64_t v14 = type metadata accessor for ModifiedChartContent_Positions();
  sub_21F94E2F8(a1 + *(int *)(v14 + 60), (uint64_t)&v17);
  swift_beginAccess();
  sub_21F799B78((uint64_t)&v17, v13, &qword_26AD44550);
  swift_endAccess();
  long long v17 = v16;
  (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)(a6 + 8) + 32))(a1, &v17, a3);
  swift_beginAccess();
  sub_21F799B78((uint64_t)v21, v13, &qword_26AD44550);
  return swift_endAccess();
}

uint64_t sub_21F9490D8(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v46 = *a2;
  uint64_t v13 = *((void *)a2 + 1);
  uint64_t v14 = v13 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  uint64_t v15 = type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v16 = v14 + *(int *)(v15 + 112);
  if (!*(void *)(v16 + 24))
  {
    memset(__src, 0, 24);
    __src[3] = 2;
    bzero(&__src[4], 0x2A9uLL);
    swift_retain();
    goto LABEL_5;
  }
  sub_21F83E3D8(v16, (uint64_t)&v50);
  swift_retain();
  sub_21F817950(__src);
  sub_21F7D2934((uint64_t)&v50);
  if (__src[3] == 2)
  {
LABEL_5:
    type metadata accessor for TypedVectorizedProperties();
    uint64_t v31 = sub_21FA26340();
    (*(void (**)(void *, uint64_t))(*(void *)(v31 - 8) + 8))(__src, v31);
    memset(v75, 0, 24);
    v75[3] = 1;
    v75[5] = 0;
    v75[4] = 0;
    char v76 = 0;
    memset(v77, 0, 24);
    v77[3] = 1;
    v77[5] = 0;
    v77[4] = 0;
    char v78 = 0;
    memset(v79, 0, 24);
    v79[3] = 1;
    long long v80 = 0u;
    memset(v81, 0, sizeof(v81));
    memset(v47, 0, 24);
    v47[3] = 1;
    long long v48 = 0u;
    memset(v49, 0, sizeof(v49));
    memset(v82, 0, sizeof(v82));
    char v83 = -4;
    uint64_t v50 = a3;
    uint64_t v51 = a4;
    uint64_t v52 = a5;
    uint64_t v53 = a6;
    uint64_t v54 = a7;
    uint64_t v32 = (long long *)(a1 + *(int *)(type metadata accessor for ModifiedChartContent_Positions() + 64));
    long long v33 = v32[5];
    long long v34 = v32[7];
    long long v61 = v32[6];
    long long v62 = v34;
    long long v35 = v32[1];
    long long v36 = v32[3];
    long long v57 = v32[2];
    long long v58 = v36;
    long long v37 = v32[3];
    long long v38 = v32[5];
    long long v59 = v32[4];
    long long v60 = v38;
    long long v39 = v32[1];
    long long v55 = *v32;
    long long v56 = v39;
    long long v40 = v32[7];
    long long v70 = v61;
    long long v71 = v40;
    long long v65 = v35;
    long long v66 = v57;
    long long v67 = v37;
    long long v69 = v33;
    long long v68 = v59;
    char v63 = *((unsigned char *)v32 + 128);
    char v72 = *((unsigned char *)v32 + 128);
    long long v64 = v55;
    nullsub_1(&v64, v41);
    type metadata accessor for TypedVectorizedProperties.Position();
    uint64_t v42 = sub_21FA26340();
    (*(void (**)(void *, long long *, uint64_t))(*(void *)(v42 - 8) + 32))(v84, &v64, v42);
    memset(v85, 0, 24);
    v85[3] = 1;
    v85[5] = 0;
    v85[4] = 0;
    char v86 = 0;
    memset(v87, 0, 24);
    v87[3] = 1;
    v87[4] = 0;
    v87[5] = 0;
    char v88 = 0;
    memset(v89, 0, 24);
    uint64_t v89[3] = 1;
    long long v90 = 0u;
    long long v91 = 0u;
    char v92 = 0;
    sub_21F817534((uint64_t)v75, (uint64_t)v77, (uint64_t)v79, (uint64_t)v47, (uint64_t)v82, (uint64_t)v84, (uint64_t)v85, (uint64_t)v87, (uint64_t)&v50, (uint64_t)v89, (uint64_t)v89);
    sub_21F8178E8(&v50, v47);
    swift_beginAccess();
    uint64_t v43 = v14 + *(int *)(v15 + 112);
    sub_21F83E488((uint64_t)&v55);
    sub_21F799B78((uint64_t)v47, v43, &qword_267EE7B20);
    swift_endAccess();
    goto LABEL_6;
  }
  memcpy(__dst, __src, 0x2C9uLL);
  uint64_t v50 = a3;
  uint64_t v51 = a4;
  uint64_t v52 = a5;
  uint64_t v53 = a6;
  uint64_t v54 = a7;
  long long v17 = (long long *)(a1 + *(int *)(type metadata accessor for ModifiedChartContent_Positions() + 64));
  long long v18 = v17[5];
  long long v19 = v17[7];
  long long v61 = v17[6];
  long long v62 = v19;
  long long v20 = v17[1];
  long long v21 = v17[3];
  long long v57 = v17[2];
  long long v58 = v21;
  long long v22 = v17[3];
  long long v23 = v17[5];
  long long v59 = v17[4];
  long long v60 = v23;
  long long v24 = v17[1];
  long long v55 = *v17;
  long long v56 = v24;
  long long v25 = v17[7];
  long long v70 = v61;
  long long v71 = v25;
  long long v65 = v20;
  long long v66 = v57;
  long long v67 = v22;
  long long v69 = v18;
  long long v68 = v59;
  char v63 = *((unsigned char *)v17 + 128);
  char v72 = *((unsigned char *)v17 + 128);
  long long v64 = v55;
  nullsub_1(&v64, v26);
  type metadata accessor for TypedVectorizedProperties.Position();
  uint64_t v27 = sub_21FA26340();
  uint64_t v28 = *(void (**)(void *, _OWORD *, uint64_t))(*(void *)(v27 - 8) + 32);
  uint64_t v45 = a1;
  v28(v84, &__dst[41], v27);
  sub_21F83E488((uint64_t)&v55);
  sub_21F94E1E0((uint64_t)v84, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F94E24C);
  v28(&__dst[41], &v64, v27);
  uint64_t v29 = type metadata accessor for TypedVectorizedProperties();
  uint64_t v30 = *(void *)(v29 - 8);
  (*(void (**)(uint64_t *, void *, uint64_t))(v30 + 16))(&v50, __dst, v29);
  sub_21F8178E8(&v50, v79);
  swift_beginAccess();
  sub_21F799B78((uint64_t)v79, v14 + *(int *)(v15 + 112), &qword_267EE7B20);
  swift_endAccess();
  (*(void (**)(void *, uint64_t))(v30 + 8))(__dst, v29);
  a1 = v45;
LABEL_6:
  LOBYTE(__dst[0]) = v46;
  __dst[1] = v13;
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)(a6 + 8) + 40))(a1, __dst, a3);
  return swift_release();
}

uint64_t sub_21F949680(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_21F94CEFC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_21F948F90);
}

uint64_t sub_21F949698(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_21F94CF30(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_21F9490D8);
}

uint64_t sub_21F9496B0@<X0>(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X2>, double a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v43 = a6;
  uint64_t v50 = a5;
  uint64_t v47 = a3;
  uint64_t v51 = a1;
  uint64_t v49 = a7;
  uint64_t v10 = sub_21F76CA40(&qword_26AD46B30);
  uint64_t v11 = v10 - 8;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (uint64_t *)((char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = sub_21F76CA40(&qword_26AD46B28);
  uint64_t v15 = v14 - 8;
  MEMORY[0x270FA5388](v14);
  long long v17 = (uint64_t *)((char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = *(void *)(*(void *)&a4 - 8);
  MEMORY[0x270FA5388](v19);
  long long v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v48 = *(unsigned __int8 *)a2;
  double v22 = a2[1];
  uint64_t v23 = *(void *)&v22 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  uint64_t v45 = *(void *)&v22 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  uint64_t v46 = v23 + 88;
  sub_21F76C978(v23 + 88, (uint64_t)v58, &qword_26AD46858);
  uint64_t v53 = a3;
  double v54 = a4;
  uint64_t v55 = v50;
  uint64_t v56 = v43;
  uint64_t v24 = type metadata accessor for ModifiedChartContent_SymbolView();
  (*(void (**)(char *, uint64_t, double))(v18 + 16))(v21, v51 + *(int *)(v24 + 52), COERCE_DOUBLE(*(void *)&a4));
  uint64_t v25 = sub_21FA25750();
  double v44 = v22;
  uint64_t v26 = *(void *)(*(void *)&v22 + 56);
  uint64_t v43 = *(void *)(*(void *)(*(void *)&v22 + 16) + 24);
  swift_retain_n();
  uint64_t v42 = sub_21FA24A00();
  LOBYTE(a4) = v27;
  uint64_t v41 = v28;
  LOBYTE(v21) = v29;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v31 = v26 + OBJC_IVAR____TtC6Charts14SgMeasurements__dynamicTypeSize;
  swift_beginAccess();
  uint64_t v32 = (char *)v13 + *(int *)(v11 + 36);
  uint64_t v33 = sub_21FA24730();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16))(v32, v31, v33);
  *uint64_t v13 = KeyPath;
  sub_21F76C978((uint64_t)v13, (uint64_t)v17 + *(int *)(v15 + 44), &qword_26AD46B30);
  *long long v17 = v25;
  swift_retain();
  sub_21F76CA84((uint64_t)v13, &qword_26AD46B30);
  LOBYTE(v53) = LOBYTE(a4) & 1;
  LOBYTE(v52[0]) = v21 & 1;
  double v34 = sub_21F86CC20((uint64_t)v17, v43, v42, LOBYTE(a4) & 1, v41, v21 & 1);
  uint64_t v36 = v35;
  sub_21F76CA84((uint64_t)v17, &qword_26AD46B28);
  swift_release();
  uint64_t v53 = v25;
  double v54 = v34;
  uint64_t v55 = v36;
  char v57 = 1;
  swift_beginAccess();
  uint64_t v37 = v46;
  sub_21F799B78((uint64_t)&v53, v46, &qword_26AD46858);
  swift_endAccess();
  LOBYTE(v53) = v48;
  double v54 = v44;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(v50 + 40))(v52, v51, &v53);
  swift_release();
  uint64_t v38 = v52[0];
  swift_beginAccess();
  sub_21F799B78((uint64_t)v58, v37, &qword_26AD46858);
  uint64_t result = swift_endAccess();
  *uint64_t v49 = v38;
  return result;
}

uint64_t sub_21F949B20(uint64_t a1, long long *a2, uint64_t *a3)
{
  return sub_21F7590A8(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t sub_21F949B30@<X0>(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return sub_21F9496B0(a1, a2, *(void *)(a3 + 16), *(double *)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 40), a4);
}

void *sub_21F949B40@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = (int *)type metadata accessor for SgGroup(0);
  __n128 v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = &v25[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v15 = *((void *)a2 + 1);
  v25[0] = *a2;
  char v14 = v25[0];
  uint64_t v26 = v15;
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, uint64_t, char *, uint64_t, uint64_t, __n128))(a4 + 40))(&v27, a1, v25, a3, a4, v11);
  uint64_t v17 = v27;
  if ((v14 & 1) == 0)
  {
    uint64_t v18 = *(void *)(*(void *)(v15 + 16) + 24);
    sub_21F76CA40(&qword_26AD4A470);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_21FA28550;
    *(void *)(v19 + 32) = v17;
    uint64_t v20 = &v13[v10[6]];
    uint64_t v21 = type metadata accessor for SgClipRect(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
    uint64_t v22 = *(void *)(a1 + *(int *)(type metadata accessor for ModifiedChartContent_Filters() + 36));
    *(void *)uint64_t v13 = v18;
    *((void *)v13 + 1) = v19;
    *(void *)&v13[v10[7]] = 0x3FF0000000000000;
    *(void *)&v13[v10[8]] = 0;
    *(void *)&v13[v10[9]] = v22;
    v13[v10[10]] = 1;
    uint64_t v17 = swift_allocBox();
    sub_21F7780BC((uint64_t)v13, v23);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  *a5 = v17;
  return result;
}

uint64_t sub_21F949D04(uint64_t a1, long long *a2, uint64_t a3)
{
  return sub_21F8C1808(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

void *sub_21F949D24@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_21F949B40(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t sub_21F949D30(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v7 = *a2;
  return (*(uint64_t (**)(uint64_t, long long *))(*(void *)(a6 + 8) + 32))(a1, &v7);
}

uint64_t sub_21F949D7C(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v36 = *a2;
  uint64_t v9 = *((void *)a2 + 1);
  __dst[0] = a3;
  __dst[1] = a4;
  __dst[2] = a5;
  __dst[3] = a6;
  __dst[4] = a7;
  uint64_t v10 = type metadata accessor for ModifiedChartContent_ForegroundStyles();
  uint64_t v39 = a1;
  sub_21F815A8C(0, 0, 0, 0, *(void *)(a1 + *(int *)(v10 + 60)), a7, (uint64_t)v50);
  uint64_t v11 = v50[0];
  uint64_t v12 = v50[1];
  uint64_t v13 = v50[2];
  uint64_t v34 = v50[3];
  uint64_t v14 = v51[0];
  uint64_t v15 = v51[1];
  char v35 = v52;
  uint64_t v37 = v9;
  uint64_t v16 = v9 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  uint64_t v17 = type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v18 = v16 + *(int *)(v17 + 112);
  if (!*(void *)(v18 + 24))
  {
    memset(__src, 0, 24);
    __src[3] = 2;
    bzero(&__src[4], 0x2A9uLL);
    swift_retain();
    goto LABEL_5;
  }
  sub_21F83E3D8(v18, (uint64_t)v46);
  swift_retain();
  sub_21F817950(__src);
  sub_21F7D2934((uint64_t)v46);
  if (__src[3] == 2)
  {
LABEL_5:
    type metadata accessor for TypedVectorizedProperties();
    uint64_t v23 = sub_21FA26340();
    (*(void (**)(void *, uint64_t))(*(void *)(v23 - 8) + 8))(__src, v23);
    memset(v54, 0, 24);
    v54[3] = 1;
    v54[5] = 0;
    v54[4] = 0;
    char v55 = 0;
    v56[0] = v11;
    v56[1] = v12;
    v56[2] = v13;
    v56[3] = v34;
    v56[4] = v14;
    v56[5] = v15;
    char v57 = v35;
    memset(v58, 0, 24);
    v58[3] = 1;
    long long v59 = 0u;
    memset(v60, 0, sizeof(v60));
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 1;
    long long v44 = 0u;
    memset(v45, 0, sizeof(v45));
    memset(v61, 0, 48);
    v61[48] = -4;
    sub_21F83E64C((uint64_t)v47);
    type metadata accessor for TypedVectorizedProperties.Position();
    uint64_t v24 = sub_21FA26340();
    (*(void (**)(uint64_t *, unsigned char *, uint64_t))(*(void *)(v24 - 8) + 32))(v62, v47, v24);
    memset(v63, 0, 24);
    v63[3] = 1;
    void v63[5] = 0;
    v63[4] = 0;
    char v64 = 0;
    memset(v65, 0, 24);
    v65[3] = 1;
    v65[4] = 0;
    v65[5] = 0;
    char v66 = 0;
    memset(v67, 0, 24);
    v67[3] = 1;
    long long v68 = 0u;
    long long v69 = 0u;
    char v70 = 0;
    sub_21F817534((uint64_t)v54, (uint64_t)v56, (uint64_t)v58, (uint64_t)&v40, (uint64_t)v61, (uint64_t)v62, (uint64_t)v63, (uint64_t)v65, (uint64_t)v46, (uint64_t)v67, (uint64_t)v67);
    sub_21F8178E8(v46, &v40);
    swift_beginAccess();
    uint64_t v25 = v16 + *(int *)(v17 + 112);
    sub_21F76C9DC((uint64_t)v50, (uint64_t)v46, &qword_26AD47C70);
    uint64_t v20 = type metadata accessor for VisualMapper.Mapping();
    (*(void (**)(unsigned char *, void *, uint64_t))(*(void *)(v20 - 8) + 32))(v53, v51, v20);
    sub_21F7F6084(v46);
    sub_21F94E354((uint64_t)v53);
    sub_21F799B78((uint64_t)&v40, v25, &qword_267EE7B20);
    swift_endAccess();
    goto LABEL_6;
  }
  memcpy(__dst, __src, 0x2C9uLL);
  uint64_t v19 = __dst[7];
  char v31 = __dst[9];
  uint64_t v32 = __dst[8];
  uint64_t v29 = __dst[11];
  uint64_t v30 = __dst[10];
  uint64_t v28 = __dst[12];
  unsigned __int8 v27 = __dst[13];
  sub_21F76C9DC((uint64_t)v50, (uint64_t)v46, &qword_26AD47C70);
  uint64_t v33 = v17;
  uint64_t v20 = type metadata accessor for VisualMapper.Mapping();
  (*(void (**)(unsigned char *, void *, uint64_t))(*(void *)(v20 - 8) + 32))(v47, v51, v20);
  sub_21F7F6084(v46);
  sub_21F94E354((uint64_t)v47);
  sub_21F83F71C(v19, v32, v31, v30, v29, v28, v27);
  __dst[7] = v11;
  __dst[8] = v12;
  __dst[9] = v13;
  __dst[10] = v34;
  __dst[11] = v14;
  __dst[12] = v15;
  LOBYTE(__dst[13]) = v35;
  uint64_t v21 = type metadata accessor for TypedVectorizedProperties();
  uint64_t v22 = *(void *)(v21 - 8);
  (*(void (**)(void *, uint64_t *, uint64_t))(v22 + 16))(__src, __dst, v21);
  sub_21F8178E8(__src, v62);
  swift_beginAccess();
  sub_21F799B78((uint64_t)v62, v16 + *(int *)(v33 + 112), &qword_267EE7B20);
  swift_endAccess();
  (*(void (**)(uint64_t *, uint64_t))(v22 + 8))(__dst, v21);
LABEL_6:
  LOBYTE(v40) = v36;
  uint64_t v41 = v37;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)(a6 + 8) + 40))(v39, &v40);
  sub_21F76C9DC((uint64_t)v50, (uint64_t)__dst, &qword_26AD47C70);
  sub_21F94E388(__dst);
  type metadata accessor for VisualMapper.Mapping();
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 32))(__src, v51, v20);
  return sub_21F94E3BC((uint64_t)__src);
}

uint64_t sub_21F94A3AC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_21F94CEFC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_21F949D30);
}

uint64_t sub_21F94A3C4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_21F94CF30(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_21F949D7C);
}

uint64_t sub_21F94A3DC(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v41 = *a2;
  uint64_t v6 = *((void *)a2 + 1);
  uint64_t v7 = type metadata accessor for ModifiedChartContent_StrokeStyles();
  uint64_t v43 = a1;
  sub_21F8159D8(0, 0, 0, 0, *(void *)(a1 + *(int *)(v7 + 44)), __dst);
  uint64_t v45 = __dst[0];
  uint64_t v8 = __dst[1];
  uint64_t v9 = __dst[2];
  uint64_t v10 = __dst[3];
  uint64_t v11 = __dst[4];
  uint64_t v40 = __dst[5];
  uint64_t v12 = __dst[6];
  uint64_t v47 = __dst[8];
  uint64_t v48 = __dst[7];
  char v46 = __dst[9];
  uint64_t v42 = v6;
  uint64_t v13 = v6 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  uint64_t v37 = type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v38 = v13;
  uint64_t v14 = v13 + *(int *)(v37 + 112);
  uint64_t v39 = v12;
  if (!*(void *)(v14 + 24))
  {
    memset(__src, 0, 24);
    __src[3] = 2;
    bzero(&__src[4], 0x2A9uLL);
    swift_retain();
    goto LABEL_5;
  }
  sub_21F83E3D8(v14, (uint64_t)v52);
  swift_retain();
  sub_21F817950(__src);
  sub_21F7D2934((uint64_t)v52);
  if (__src[3] == 2)
  {
LABEL_5:
    type metadata accessor for TypedVectorizedProperties();
    uint64_t v23 = sub_21FA26340();
    (*(void (**)(void *, uint64_t))(*(void *)(v23 - 8) + 8))(__src, v23);
    memset(v56, 0, 24);
    v56[3] = 1;
    v56[5] = 0;
    v56[4] = 0;
    char v57 = 0;
    memset(v58, 0, 24);
    v58[3] = 1;
    v58[5] = 0;
    void v58[4] = 0;
    char v59 = 0;
    v60[0] = v45;
    v60[1] = v8;
    v60[2] = v9;
    v60[3] = v10;
    v60[4] = v11;
    v60[5] = v40;
    v60[6] = v12;
    v60[7] = v48;
    v60[8] = v47;
    char v61 = v46;
    memset(v49, 0, 24);
    v49[3] = 1;
    long long v50 = 0u;
    memset(v51, 0, sizeof(v51));
    memset(v62, 0, sizeof(v62));
    char v63 = -4;
    sub_21F83E64C((uint64_t)v53);
    type metadata accessor for TypedVectorizedProperties.Position();
    uint64_t v24 = sub_21FA26340();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v24 - 8) + 32))(v64, v53, v24);
    memset(v65, 0, 24);
    v65[3] = 1;
    v65[5] = 0;
    v65[4] = 0;
    char v66 = 0;
    memset(v67, 0, 24);
    v67[3] = 1;
    void v67[4] = 0;
    v67[5] = 0;
    char v68 = 0;
    memset(v69, 0, 24);
    v69[3] = 1;
    long long v70 = 0u;
    long long v71 = 0u;
    char v72 = 0;
    sub_21F817534((uint64_t)v56, (uint64_t)v58, (uint64_t)v60, (uint64_t)v49, (uint64_t)v62, (uint64_t)v64, (uint64_t)v65, (uint64_t)v67, (uint64_t)v52, (uint64_t)v69, (uint64_t)v69);
    uint64_t v22 = v11;
    uint64_t v18 = v40;
    uint64_t v19 = v12;
    uint64_t v15 = v8;
    sub_21F8178E8(v52, v49);
    swift_beginAccess();
    uint64_t v25 = v13 + *(int *)(v37 + 112);
    sub_21F7BB3B4(v45, v8, v9, v10);
    sub_21F8512C4(v22, v40, v39, v48, v47, v46);
    sub_21F799B78((uint64_t)v49, v25, &qword_267EE7B20);
    swift_endAccess();
    goto LABEL_6;
  }
  memcpy(__dst, __src, 0x2C9uLL);
  uint64_t v35 = __dst[15];
  uint64_t v36 = __dst[14];
  uint64_t v33 = __dst[17];
  char v34 = __dst[16];
  uint64_t v31 = __dst[19];
  uint64_t v32 = __dst[18];
  uint64_t v29 = __dst[21];
  uint64_t v30 = __dst[20];
  uint64_t v28 = __dst[22];
  char v27 = __dst[23];
  uint64_t v15 = v8;
  sub_21F7BB3B4(v45, v8, v9, v10);
  uint64_t v16 = v11;
  uint64_t v17 = v11;
  uint64_t v19 = v39;
  uint64_t v18 = v40;
  sub_21F8512C4(v17, v40, v39, v48, v47, v46);
  sub_21F94E170(v36, v35, v34, v33, v32, v31, v30, v29, v28, v27);
  __dst[14] = v45;
  __dst[15] = v15;
  __dst[16] = v9;
  __dst[17] = v10;
  __dst[18] = v16;
  __dst[19] = v40;
  __dst[20] = v39;
  __dst[21] = v48;
  __dst[22] = v47;
  LOBYTE(__dst[23]) = v46;
  uint64_t v20 = type metadata accessor for TypedVectorizedProperties();
  uint64_t v21 = *(void *)(v20 - 8);
  (*(void (**)(void *, void *, uint64_t))(v21 + 16))(__src, __dst, v20);
  uint64_t v22 = v16;
  sub_21F8178E8(__src, v52);
  swift_beginAccess();
  sub_21F799B78((uint64_t)v52, v38 + *(int *)(v37 + 112), &qword_267EE7B20);
  swift_endAccess();
  (*(void (**)(void *, uint64_t))(v21 + 8))(__dst, v20);
LABEL_6:
  LOBYTE(__dst[0]) = v41;
  __dst[1] = v42;
  (*(void (**)(uint64_t, void *))(a5 + 40))(v43, __dst);
  sub_21F7F42EC(v45, v15, v9, v10);
  return sub_21F83E970(v22, v18, v19, v48, v47, v46);
}

uint64_t sub_21F94A9BC(uint64_t a1, char *a2, uint64_t *a3)
{
  return sub_21F94A3DC(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t sub_21F94A9CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v70 = a2;
  uint64_t v69 = a1;
  uint64_t v12 = type metadata accessor for PlottableValue();
  MEMORY[0x270FA5388](v12 - 8);
  *(void *)&long long v63 = (char *)&v61 - v13;
  uint64_t v14 = type metadata accessor for PlottableProjection.Storage();
  double v68 = *(double *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v61 - v15;
  uint64_t v62 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v17);
  char v61 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  long long v65 = (char *)&v61 - v20;
  uint64_t v21 = type metadata accessor for PlottableProjection();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v61 - v23;
  long long v70 = *(_OWORD *)v70;
  uint64_t v67 = a3;
  *(void *)&long long v72 = a3;
  *((void *)&v72 + 1) = a4;
  *(void *)&long long v73 = a5;
  *((void *)&v73 + 1) = a6;
  uint64_t v66 = a6;
  uint64_t v74 = a7;
  uint64_t v25 = v69 + *(int *)(type metadata accessor for ModifiedChartContent_ForegroundStyles_Plottable() + 60);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, v25, v21);
  uint64_t v64 = a5;
  sub_21F959E10((uint64_t)v24, a5, a7, (uint64_t *)&v72);
  uint64_t v26 = v70;
  swift_beginAccess();
  uint64_t v27 = *(void *)&v68;
  sub_21F799B78((uint64_t)&v72, v26 + 888, qword_26AD44558);
  swift_endAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v16, v25 + *(int *)(v21 + 44), v14);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v16, v14);
    uint64_t v28 = v67;
    uint64_t v29 = v69;
    uint64_t v30 = v66;
  }
  else
  {
    uint64_t v31 = v62;
    uint64_t v32 = v65;
    uint64_t v33 = v64;
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v65, v16, v64);
    uint64_t v34 = *(void *)v25;
    uint64_t v35 = *(void *)(v25 + 8);
    char v36 = *(unsigned char *)(v25 + 16);
    uint64_t v37 = *(void *)(v25 + 24);
    uint64_t v38 = (uint64_t)v61;
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v61, v32, v33);
    uint64_t v39 = v63;
    sub_21F753D84(v34, v35, v36, v37, v38, v33, v63);
    swift_bridgeObjectRetain();
    sub_21F7652C0(v34, v35, v36);
    sub_21F764B80(v39, v33, a7, (uint64_t)&v72);
    unint64_t v41 = v74;
    uint64_t v42 = v75;
    char v43 = v76;
    double v68 = *(double *)&v74;
    if (v76 < 0)
    {
      double v49 = *(double *)&v74;
      *(void *)&long long v40 = v75;
      uint64_t v50 = v74 & 0x7FF0000000000000;
      long long v63 = v40;
      uint64_t v44 = v31;
      if (v76)
      {
        swift_beginAccess();
        uint64_t v28 = v67;
        uint64_t v29 = v69;
        uint64_t v30 = v66;
        if (v50 != 0x7FF0000000000000)
        {
          if (*(unsigned char *)(v26 + 360))
          {
            double v54 = v68;
            uint64_t v55 = v26;
          }
          else
          {
            uint64_t v55 = v26;
            double v54 = *(double *)(v26 + 344);
            if (v54 >= v49) {
              double v54 = v49;
            }
            if (*(double *)(v26 + 352) >= v49) {
              double v49 = *(double *)(v26 + 352);
            }
          }
          *(double *)(v55 + 344) = v54;
          *(double *)(v55 + 352) = v49;
          *(unsigned char *)(v26 + 360) = 0;
        }
        uint64_t v45 = v26;
        if ((~v42 & 0x7FF0000000000000) != 0)
        {
          if (*(unsigned char *)(v26 + 360))
          {
            uint64_t v45 = v26;
            *(void *)(v26 + 344) = v42;
            *(void *)(v26 + 352) = v42;
            *(unsigned char *)(v26 + 360) = 0;
          }
          else
          {
            float64x2_t v58 = *(float64x2_t *)(v26 + 344);
            float64x2_t v59 = (float64x2_t)vdupq_lane_s64(v63, 0);
            v60.i64[0] = vmovn_s64(vcgtq_f64(v59, v58)).i32[0];
            v60.i64[1] = vmovn_s64(vcgeq_f64(v58, v59)).i32[1];
            *(int8x16_t *)(v26 + 344) = vbslq_s8(v60, (int8x16_t)v58, (int8x16_t)v59);
            *(unsigned char *)(v26 + 360) = 0;
            uint64_t v45 = v26;
          }
        }
      }
      else
      {
        swift_beginAccess();
        uint64_t v51 = (unsigned char *)(v26 + 336);
        uint64_t v28 = v67;
        uint64_t v29 = v69;
        uint64_t v30 = v66;
        if (v50 != 0x7FF0000000000000)
        {
          if (*v51)
          {
            double v52 = v68;
            uint64_t v53 = v26;
          }
          else
          {
            uint64_t v53 = v26;
            double v52 = *(double *)(v26 + 320);
            if (v52 >= v49) {
              double v52 = v49;
            }
            if (*(double *)(v26 + 328) >= v49) {
              double v49 = *(double *)(v26 + 328);
            }
          }
          *(double *)(v53 + 320) = v52;
          *(double *)(v53 + 328) = v49;
          *uint64_t v51 = 0;
        }
        uint64_t v45 = v26;
        if ((~v42 & 0x7FF0000000000000) != 0)
        {
          if (*v51)
          {
            uint64_t v45 = v26;
            *(void *)(v26 + 320) = v42;
            *(void *)(v26 + 328) = v42;
            *uint64_t v51 = 0;
          }
          else
          {
            uint64_t v45 = v26;
            double v57 = *(double *)(v26 + 320);
            double v56 = *(double *)(v26 + 328);
            if (v57 >= *(double *)&v63) {
              double v57 = *(double *)&v63;
            }
            if (v56 < *(double *)&v63) {
              double v56 = *(double *)&v63;
            }
            *(double *)(v26 + 320) = v57;
            *(double *)(v26 + 328) = v56;
            *uint64_t v51 = 0;
          }
        }
      }
    }
    else
    {
      uint64_t v44 = v31;
      swift_beginAccess();
      sub_21F7607AC(v41, v42, v43);
      sub_21F7622A4(v41, v42, v43);
      swift_endAccess();
      sub_21F770E38(v41, v42, v43);
      uint64_t v28 = v67;
      uint64_t v29 = v69;
      uint64_t v45 = v26;
      uint64_t v30 = v66;
    }
    uint64_t v46 = v77;
    uint64_t v47 = v78;
    swift_beginAccess();
    if (*(unsigned __int8 *)(v45 + 385) << 8 == 512) {
      sub_21F7CB424(v46, (_WORD *)(v45 + 384), v46, v47);
    }
    swift_endAccess();
    long long v79 = v72;
    long long v80 = v73;
    sub_21F7E0D5C((uint64_t)&v79, (uint64_t)v82);
    sub_21F7E0DB8((uint64_t)v82);
    uint64_t v81 = *((void *)&v80 + 1);
    sub_21F7741D0((uint64_t)&v81);
    sub_21F770E38(*(uint64_t *)&v68, v42, v43);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v65, v64);
  }
  long long v71 = v70;
  return (*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)(v30 + 8) + 32))(v29, &v71, v28);
}

uint64_t sub_21F94B140@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v152 = a1;
  int v143 = a8;
  uint64_t v14 = type metadata accessor for PlottableValue();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v132 = (uint64_t)&v122 - v15;
  uint64_t v134 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v131 = (char *)&v122 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v133 = (char *)&v122 - v19;
  uint64_t v20 = type metadata accessor for PlottableProjection.Storage();
  uint64_t v138 = *(void *)(v20 - 8);
  uint64_t v139 = v20;
  MEMORY[0x270FA5388](v20);
  uint64_t v137 = (char *)&v122 - v21;
  uint64_t v144 = a4;
  uint64_t v145 = a7;
  uint64_t v22 = a5;
  uint64_t v155 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = type metadata accessor for PlottableProjection();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v122 - v26;
  uint64_t v156 = (uint64_t)&v122 - v26;
  int v140 = *a2;
  uint64_t v28 = *((void *)a2 + 1);
  uint64_t v141 = a6;
  uint64_t v142 = a3;
  *(void *)&v169[0] = a3;
  *((void *)&v169[0] + 1) = a4;
  *(void *)&v169[1] = v22;
  *((void *)&v169[1] + 1) = a6;
  *(void *)&v169[2] = v23;
  uint64_t v29 = v152 + *(int *)(type metadata accessor for ModifiedChartContent_ForegroundStyles_Plottable() + 60);
  uint64_t v30 = *(void (**)(char *))(v25 + 16);
  uint64_t v135 = v24;
  uint64_t v136 = v29;
  v30(v27);
  uint64_t v157 = v28;
  uint64_t v31 = v28 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale;
  uint64_t v32 = *(void *)(v28 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale);
  uint64_t v153 = *(void *)(v28 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 8);
  uint64_t v154 = v32;
  uint64_t v33 = *(void *)(v28 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 16);
  uint64_t v34 = *(void *)(v28 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 24);
  uint64_t v35 = *(void *)(v28 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 32);
  uint64_t v36 = *(void *)(v28 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 40);
  uint64_t v37 = *(void *)(v28 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 48);
  uint64_t v150 = *(void *)(v28 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 56);
  uint64_t v151 = v37;
  uint64_t v39 = *(void *)(v28 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 64);
  uint64_t v38 = *(void *)(v28 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 72);
  uint64_t v40 = *(void *)(v31 + 80);
  uint64_t v41 = *(void *)(v31 + 88);
  LOBYTE(a6) = *(unsigned char *)(v31 + 96);
  *(void *)&v169[0] = v32;
  *((void *)&v169[0] + 1) = v153;
  *(void *)&v169[1] = v33;
  *((void *)&v169[1] + 1) = v34;
  *(void *)&v169[2] = v35;
  *((void *)&v169[2] + 1) = v36;
  *(void *)&v169[3] = v37;
  *((void *)&v169[3] + 1) = v150;
  *(void *)&v169[4] = v39;
  *((void *)&v169[4] + 1) = v38;
  *(void *)&v169[5] = v40;
  *((void *)&v169[5] + 1) = v41;
  LOBYTE(v169[6]) = a6;
  swift_retain();
  unsigned __int8 v121 = a6;
  uint64_t v42 = v144;
  sub_21F77F47C(v154, v153, v33, v34, v35, v36, v151, v150, v39, v38, v40, v41, v121);
  v168[0] = sub_21FA25590();
  *(void *)&long long v162 = sub_21FA245C0();
  sub_21F815BD8(v156, (uint64_t)v169, (uint64_t)&v162, v42, MEMORY[0x263F188A8], v168);
  uint64_t v156 = v168[0];
  uint64_t v146 = v168[2];
  uint64_t v150 = v168[1];
  uint64_t v151 = v168[3];
  uint64_t v148 = v168[4];
  uint64_t v149 = v168[5];
  int v147 = LOBYTE(v168[6]);
  uint64_t v43 = v157 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  uint64_t v153 = type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v154 = v43;
  uint64_t v44 = v43 + *(int *)(v153 + 112);
  if (*(void *)(v44 + 24))
  {
    sub_21F83E3D8(v44, (uint64_t)&v162);
    sub_21F817950(v168);
    sub_21F7D2934((uint64_t)&v162);
    if (v168[3] != 2)
    {
      memcpy(v169, v168, 0x2C9uLL);
      uint64_t v45 = *((void *)&v169[3] + 1);
      uint64_t v46 = *(void *)&v169[4];
      unsigned __int8 v47 = v147;
      uint64_t v48 = v149;
      uint64_t v49 = v150;
      uint64_t v50 = *(void *)&v169[5];
      uint64_t v51 = v148;
      uint64_t v129 = *((void *)&v169[5] + 1);
      uint64_t v130 = *((void *)&v169[4] + 1);
      uint64_t v52 = v151;
      uint64_t v128 = *(void *)&v169[6];
      uint64_t v53 = v146;
      LODWORD(v127) = BYTE8(v169[6]);
      sub_21F7BB3B4(v156, v150, v146, v151);
      sub_21F83F794(v51, v48, v47);
      uint64_t v54 = v50;
      uint64_t v55 = v154;
      sub_21F83F71C(v45, v46, v130, v54, v129, v128, v127);
      *((void *)&v169[3] + 1) = v156;
      *(void *)&v169[4] = v49;
      *((void *)&v169[4] + 1) = v53;
      *(void *)&v169[5] = v52;
      *((void *)&v169[5] + 1) = v51;
      *(void *)&v169[6] = v48;
      BYTE8(v169[6]) = v47;
      uint64_t v56 = type metadata accessor for TypedVectorizedProperties();
      uint64_t v57 = *(void *)(v56 - 8);
      (*(void (**)(uint64_t *, _OWORD *, uint64_t))(v57 + 16))(v168, v169, v56);
      sub_21F8178E8(v168, (uint64_t *)&v162);
      swift_beginAccess();
      sub_21F799B78((uint64_t)&v162, v55 + *(int *)(v153 + 112), &qword_267EE7B20);
      swift_endAccess();
      (*(void (**)(_OWORD *, uint64_t))(v57 + 8))(v169, v56);
      goto LABEL_6;
    }
  }
  else
  {
    memset(v168, 0, 24);
    v168[3] = 2;
    bzero(&v168[4], 0x2A9uLL);
  }
  type metadata accessor for TypedVectorizedProperties();
  uint64_t v58 = sub_21FA26340();
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(v58 - 8) + 8))(v168, v58);
  memset(v171, 0, sizeof(v171));
  uint64_t v172 = 1;
  uint64_t v174 = 0;
  uint64_t v173 = 0;
  char v175 = 0;
  uint64_t v59 = v156;
  v176[0] = v156;
  uint64_t v61 = v150;
  uint64_t v60 = v151;
  v176[1] = v150;
  char v62 = v146;
  v176[2] = v146;
  v176[3] = v151;
  uint64_t v63 = v148;
  uint64_t v64 = v149;
  v176[4] = v148;
  v176[5] = v149;
  unsigned __int8 v65 = v147;
  char v177 = v147;
  memset(v178, 0, sizeof(v178));
  uint64_t v179 = 1;
  long long v180 = 0u;
  memset(v181, 0, sizeof(v181));
  memset(v159, 0, 24);
  float64x2_t v159[3] = 1;
  long long v160 = 0u;
  memset(v161, 0, sizeof(v161));
  memset(v182, 0, 48);
  v182[48] = -4;
  sub_21F83E64C((uint64_t)v166);
  type metadata accessor for TypedVectorizedProperties.Position();
  uint64_t v66 = sub_21FA26340();
  (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v66 - 8) + 32))(v183, v166, v66);
  memset(v184, 0, sizeof(v184));
  uint64_t v185 = 1;
  uint64_t v187 = 0;
  uint64_t v186 = 0;
  char v188 = 0;
  memset(v189, 0, 24);
  v189[3] = 1;
  v189[4] = 0;
  v189[5] = 0;
  char v190 = 0;
  memset(v191, 0, 24);
  v191[3] = 1;
  long long v192 = 0u;
  long long v193 = 0u;
  char v194 = 0;
  sub_21F817534((uint64_t)v171, (uint64_t)v176, (uint64_t)v178, (uint64_t)v159, (uint64_t)v182, (uint64_t)v183, (uint64_t)v184, (uint64_t)v189, (uint64_t)&v162, (uint64_t)v191, (uint64_t)v191);
  sub_21F8178E8(&v162, v159);
  uint64_t v67 = v154;
  swift_beginAccess();
  uint64_t v68 = v67 + *(int *)(v153 + 112);
  sub_21F7BB3B4(v59, v61, v62, v60);
  sub_21F83F794(v63, v64, v65);
  sub_21F799B78((uint64_t)v159, v68, &qword_267EE7B20);
  swift_endAccess();
LABEL_6:
  uint64_t v69 = v136;
  long long v71 = v137;
  uint64_t v70 = v138;
  uint64_t v72 = v139;
  (*(void (**)(char *, uint64_t, uint64_t))(v138 + 16))(v137, v136 + *(int *)(v135 + 44), v139);
  if (swift_getEnumCaseMultiPayload())
  {
    LOBYTE(v169[0]) = v140;
    *((void *)&v169[0] + 1) = v157;
    (*(void (**)(uint64_t, _OWORD *))(*(void *)(v141 + 8) + 40))(v152, v169);
    swift_release();
    sub_21F7F42EC(v156, v150, v146, v151);
    sub_21F83F778(v148, v149, v147);
    return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v71, v72);
  }
  else
  {
    uint64_t v74 = v133;
    uint64_t v75 = v134;
    (*(void (**)(char *, char *, uint64_t))(v134 + 32))(v133, v71, v155);
    uint64_t v76 = v154;
    sub_21F76C978(v154, (uint64_t)v168, &qword_26AD48C60);
    uint64_t v77 = (uint64_t *)(v76 + *(int *)(v153 + 72));
    uint64_t v79 = *v77;
    uint64_t v78 = v77[1];
    uint64_t v80 = v77[3];
    uint64_t v127 = v77[2];
    char v81 = v127;
    uint64_t v128 = v79;
    uint64_t v144 = v80;
    uint64_t v82 = v77[4];
    uint64_t v138 = v77[5];
    uint64_t v139 = v82;
    char v83 = (char *)v77[6];
    uint64_t v84 = v77[8];
    uint64_t v135 = v77[7];
    uint64_t v129 = v84;
    uint64_t v130 = v78;
    uint64_t v85 = *(void *)v69;
    uint64_t v86 = *(void *)(v69 + 8);
    char v87 = *(unsigned char *)(v69 + 16);
    uint64_t v88 = *(void *)(v69 + 24);
    uint64_t v136 = v88;
    uint64_t v137 = v83;
    uint64_t v89 = *(void (**)(char *, char *, uint64_t))(v75 + 16);
    uint64_t v90 = (uint64_t)v131;
    long long v91 = v74;
    uint64_t v92 = v155;
    v89(v131, v91, v155);
    uint64_t v93 = v88;
    uint64_t v94 = v145;
    sub_21F753D84(v85, v86, v87, v93, v90, v92, v132);
    sub_21F761E74(v79, v130, v81, v144, v139, v138, (char)v137);
    sub_21F7652C0(v85, v86, v87);
    swift_bridgeObjectRetain();
    sub_21F764B80(v132, v92, v94, (uint64_t)v169);
    uint64_t v136 = *((void *)&v169[0] + 1);
    uint64_t v145 = *(void *)&v169[0];
    uint64_t v132 = LOBYTE(v169[1]);
    uint64_t v131 = (char *)*((void *)&v169[1] + 1);
    long long v95 = v169[2];
    uint64_t v96 = LOBYTE(v169[3]);
    uint64_t v97 = v157;
    uint64_t v98 = sub_21F7E08D0(*(uint64_t *)&v169[2], *((uint64_t *)&v169[2] + 1), v169[3], 4);
    uint64_t v164 = MEMORY[0x263F18898];
    *((void *)&v163 + 1) = MEMORY[0x263F188A8];
    *(void *)&long long v162 = v98;
    char v165 = 1;
    uint64_t v99 = v154;
    swift_beginAccess();
    sub_21F799B78((uint64_t)&v162, v99, &qword_26AD48C60);
    long long v162 = v169[0];
    long long v163 = v169[1];
    sub_21F7E0D5C((uint64_t)&v162, (uint64_t)v159);
    uint64_t v170 = *((void *)&v163 + 1);
    uint64_t v100 = (uint64_t *)(v99 + *(int *)(v153 + 72));
    uint64_t v101 = *v100;
    uint64_t v102 = v100[2];
    uint64_t v125 = v100[1];
    uint64_t v126 = v101;
    uint64_t v103 = v100[3];
    uint64_t v104 = v100[4];
    uint64_t v105 = v100[5];
    uint64_t v123 = v100[6];
    uint64_t v124 = v105;
    uint64_t v122 = v100[7];
    uint64_t v106 = v136;
    *uint64_t v100 = v145;
    v100[1] = v106;
    uint64_t v107 = v131;
    v100[2] = v132;
    v100[3] = (uint64_t)v107;
    *((_OWORD *)v100 + 2) = v95;
    v100[6] = v96;
    *(_OWORD *)(v100 + 7) = *(_OWORD *)((char *)&v169[3] + 8);
    swift_endAccess();
    sub_21F7E0DEC((uint64_t)v159);
    sub_21F7744A4((uint64_t)&v170);
    sub_21F770E44(v95, *((uint64_t *)&v95 + 1), v96);
    sub_21F761EDC(v126, v125, v102, v103, v104, v124, v123);
    v166[0] = v140;
    uint64_t v167 = v97;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, char *))(*(void *)(v141 + 8) + 40))(&v158, v152, v166);
    sub_21F7E0DB8((uint64_t)v159);
    sub_21F7741D0((uint64_t)&v170);
    sub_21F770E38(v95, *((uint64_t *)&v95 + 1), v96);
    sub_21F7F42EC(v156, v150, v146, v151);
    sub_21F83F778(v148, v149, v147);
    (*(void (**)(char *, uint64_t))(v134 + 8))(v133, v155);
    uint64_t v156 = v158;
    uint64_t v108 = v154;
    swift_beginAccess();
    sub_21F799B78((uint64_t)v168, v108, &qword_26AD48C60);
    uint64_t v109 = (uint64_t *)(v108 + *(int *)(v153 + 72));
    uint64_t v110 = *v109;
    uint64_t v111 = v109[1];
    uint64_t v112 = v109[2];
    uint64_t v113 = v109[3];
    uint64_t v114 = v109[4];
    uint64_t v115 = v109[5];
    uint64_t v116 = v109[6];
    uint64_t v117 = v130;
    *uint64_t v109 = v128;
    v109[1] = v117;
    uint64_t v118 = v144;
    v109[2] = v127;
    v109[3] = v118;
    uint64_t v119 = v138;
    v109[4] = v139;
    v109[5] = v119;
    uint64_t v120 = v135;
    v109[6] = (uint64_t)v137;
    v109[7] = v120;
    v109[8] = v129;
    swift_endAccess();
    sub_21F761EDC(v110, v111, v112, v113, v114, v115, v116);
    uint64_t result = swift_release();
    *int v143 = v156;
  }
  return result;
}

uint64_t sub_21F94BDFC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_21F94CEFC(a1, a2, a3, a4, sub_21F94A9CC);
}

uint64_t sub_21F94BE14(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_21F94CF30(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_21F94B140);
}

uint64_t sub_21F94BE2C(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = type metadata accessor for PlottableProjection();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v22 - v16;
  *(void *)&long long v23 = a3;
  *((void *)&v23 + 1) = a4;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  uint64_t v18 = a1 + *(int *)(type metadata accessor for ModifiedChartContent_Symbols_Plottable() + 60);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  long long v22 = *a2;
  v19(v17, v18, v14);
  sub_21F959E10((uint64_t)v17, a5, a7, (uint64_t *)&v23);
  uint64_t v20 = v22;
  swift_beginAccess();
  sub_21F799B78((uint64_t)&v23, v20 + 1000, qword_26AD44558);
  swift_endAccess();
  long long v23 = v22;
  return (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(a6 + 32))(a1, &v23, a3, a6);
}

uint64_t sub_21F94BFC8@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v35 = a8;
  uint64_t v15 = type metadata accessor for PlottableProjection();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  HIDWORD(v34) = *a2;
  uint64_t v17 = *((void *)a2 + 1);
  uint64_t v36 = a3;
  uint64_t v37 = a6;
  v43[0] = a3;
  v43[1] = a4;
  void v43[2] = a5;
  v43[3] = a6;
  v43[4] = a7;
  uint64_t v19 = (char *)&v34 - v18;
  uint64_t v20 = *(int *)(type metadata accessor for ModifiedChartContent_Symbols_Plottable() + 60);
  uint64_t v38 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, a1 + v20, v15);
  uint64_t v21 = v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolScale;
  swift_beginAccess();
  sub_21F76C978(v21, (uint64_t)v43, &qword_26AD491E8);
  if (qword_26AD44A40 != -1) {
    swift_once();
  }
  sub_21F7C21A4((uint64_t)&unk_26AD52148, (uint64_t)v42);
  sub_21F815BD8((uint64_t)v19, (uint64_t)v43, (uint64_t)v42, a4, (uint64_t)&type metadata for AnyChartSymbolShape, v44);
  uint64_t v22 = v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  uint64_t v23 = type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v24 = v22 + *(int *)(v23 + 112);
  if (!*(void *)(v24 + 24))
  {
    memset(v42, 0, 24);
    v42[3] = 2;
    bzero(&v42[4], 0x2A9uLL);
    goto LABEL_7;
  }
  sub_21F83E3D8(v24, (uint64_t)v40);
  sub_21F817950(v42);
  sub_21F7D2934((uint64_t)v40);
  if (v42[3] == 2)
  {
LABEL_7:
    type metadata accessor for TypedVectorizedProperties();
    uint64_t v29 = sub_21FA26340();
    (*(void (**)(void *, uint64_t))(*(void *)(v29 - 8) + 8))(v42, v29);
    memset(v45, 0, sizeof(v45));
    uint64_t v46 = 1;
    uint64_t v48 = 0;
    uint64_t v47 = 0;
    char v49 = 0;
    memset(v50, 0, sizeof(v50));
    uint64_t v51 = 1;
    uint64_t v53 = 0;
    uint64_t v52 = 0;
    char v54 = 0;
    memset(v55, 0, sizeof(v55));
    uint64_t v56 = 1;
    long long v57 = 0u;
    memset(v58, 0, sizeof(v58));
    uint64_t v30 = type metadata accessor for VisualMapper();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v30 - 8) + 16))(v39, v44, v30);
    memset(v59, 0, 48);
    v59[48] = -4;
    sub_21F83E64C((uint64_t)v41);
    type metadata accessor for TypedVectorizedProperties.Position();
    uint64_t v31 = sub_21FA26340();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v31 - 8) + 32))(v60, v41, v31);
    memset(v61, 0, sizeof(v61));
    uint64_t v62 = 1;
    uint64_t v64 = 0;
    uint64_t v63 = 0;
    char v65 = 0;
    memset(v66, 0, 24);
    v66[3] = 1;
    v66[4] = 0;
    v66[5] = 0;
    char v67 = 0;
    memset(v68, 0, 24);
    v68[3] = 1;
    long long v69 = 0u;
    long long v70 = 0u;
    char v71 = 0;
    sub_21F817534((uint64_t)v45, (uint64_t)v50, (uint64_t)v55, (uint64_t)v39, (uint64_t)v59, (uint64_t)v60, (uint64_t)v61, (uint64_t)v66, (uint64_t)v40, (uint64_t)v68, (uint64_t)v68);
    sub_21F8178E8(v40, v39);
    swift_beginAccess();
    sub_21F799B78((uint64_t)v39, v22 + *(int *)(v23 + 112), &qword_267EE7B20);
    swift_endAccess();
    goto LABEL_8;
  }
  memcpy(v43, v42, 0x2C9uLL);
  uint64_t v25 = type metadata accessor for VisualMapper();
  uint64_t v26 = sub_21FA26340();
  (*(void (**)(void *, uint64_t))(*(void *)(v26 - 8) + 8))(&v43[24], v26);
  (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)(v25 - 8) + 16))(&v43[24], v44, v25);
  uint64_t v27 = type metadata accessor for TypedVectorizedProperties();
  uint64_t v28 = *(void *)(v27 - 8);
  (*(void (**)(void *, void *, uint64_t))(v28 + 16))(v42, v43, v27);
  sub_21F8178E8(v42, v40);
  swift_beginAccess();
  sub_21F799B78((uint64_t)v40, v22 + *(int *)(v23 + 112), &qword_267EE7B20);
  swift_endAccess();
  (*(void (**)(void *, uint64_t))(v28 + 8))(v43, v27);
LABEL_8:
  LOBYTE(v43[0]) = BYTE4(v34);
  v43[1] = v17;
  (*(void (**)(uint64_t, void *))(v37 + 40))(v38, v43);
  uint64_t v32 = type metadata accessor for VisualMapper();
  return (*(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(v32 - 8) + 8))(v44, v32);
}

uint64_t sub_21F94C62C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_21F94CEFC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_21F94BE2C);
}

uint64_t sub_21F94C644(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_21F94CF30(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_21F94BFC8);
}

uint64_t sub_21F94C65C(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = type metadata accessor for PlottableProjection();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v22 - v16;
  *(void *)&long long v23 = a3;
  *((void *)&v23 + 1) = a4;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  uint64_t v18 = a1 + *(int *)(type metadata accessor for ModifiedChartContent_SymbolSizes_Plottable() + 60);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  long long v22 = *a2;
  v19(v17, v18, v14);
  sub_21F959E10((uint64_t)v17, a5, a7, (uint64_t *)&v23);
  uint64_t v20 = v22;
  swift_beginAccess();
  sub_21F799B78((uint64_t)&v23, v20 + 1056, qword_26AD44558);
  swift_endAccess();
  long long v23 = v22;
  return (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(a6 + 32))(a1, &v23, a3, a6);
}

uint64_t sub_21F94C7F8@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v67 = a8;
  uint64_t v15 = type metadata accessor for PlottableProjection();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  int v66 = *a2;
  uint64_t v17 = *((void *)a2 + 1);
  uint64_t v69 = a3;
  uint64_t v70 = a6;
  v82[0] = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v21 = (char *)&v56 - v20;
  v82[1] = v18;
  v82[2] = v19;
  _OWORD v82[3] = a6;
  v82[4] = a7;
  uint64_t v22 = *(int *)(type metadata accessor for ModifiedChartContent_SymbolSizes_Plottable() + 60);
  uint64_t v68 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v21, a1 + v22, v15);
  uint64_t v73 = v17;
  uint64_t v23 = *(void *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 8);
  uint64_t v24 = *(void *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 16);
  uint64_t v25 = *(void *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 24);
  uint64_t v26 = *(void *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 32);
  uint64_t v27 = *(void *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 40);
  uint64_t v28 = *(void *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 48);
  uint64_t v29 = *(void *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 56);
  uint64_t v30 = *(void *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 64);
  uint64_t v31 = *(void *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 72);
  uint64_t v32 = *(void *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 80);
  uint64_t v33 = *(void *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 88);
  uint64_t v34 = *(void *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 96);
  unsigned __int8 v35 = *(unsigned char *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 104);
  v82[0] = *(void *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale);
  v82[1] = v23;
  v82[2] = v24;
  _OWORD v82[3] = v25;
  v82[4] = v26;
  v82[5] = v27;
  v82[6] = v28;
  v82[7] = v29;
  char v82[8] = v30;
  v82[9] = v31;
  v82[10] = v32;
  v82[11] = v33;
  v82[12] = v34;
  LOBYTE(v82[13]) = v35;
  sub_21F77F4A8(v82[0], v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35);
  if (qword_26AD45718 != -1) {
    swift_once();
  }
  v79[0] = qword_26AD52208;
  sub_21F815BD8((uint64_t)v21, (uint64_t)v82, (uint64_t)v79, v18, MEMORY[0x263F8EF38], v81);
  uint64_t v74 = v81[0];
  uint64_t v36 = v81[1];
  uint64_t v65 = v81[2];
  uint64_t v37 = v81[3];
  uint64_t v71 = v81[5];
  uint64_t v72 = v81[4];
  int v75 = LOBYTE(v81[6]);
  uint64_t v38 = v73 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  uint64_t v64 = type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v39 = v38 + *(int *)(v64 + 112);
  if (!*(void *)(v39 + 24))
  {
    memset(v81, 0, 24);
    v81[3] = 2;
    bzero(&v81[4], 0x2A9uLL);
    goto LABEL_7;
  }
  sub_21F83E3D8(v39, (uint64_t)v79);
  sub_21F817950(v81);
  sub_21F7D2934((uint64_t)v79);
  if (v81[3] == 2)
  {
LABEL_7:
    type metadata accessor for TypedVectorizedProperties();
    uint64_t v48 = sub_21FA26340();
    (*(void (**)(uint64_t *, uint64_t))(*(void *)(v48 - 8) + 8))(v81, v48);
    memset(v83, 0, sizeof(v83));
    uint64_t v84 = 1;
    uint64_t v86 = 0;
    uint64_t v85 = 0;
    char v87 = 0;
    memset(v88, 0, sizeof(v88));
    uint64_t v89 = 1;
    uint64_t v91 = 0;
    uint64_t v90 = 0;
    char v92 = 0;
    memset(v93, 0, sizeof(v93));
    uint64_t v94 = 1;
    long long v95 = 0u;
    memset(v96, 0, sizeof(v96));
    memset(v76, 0, 24);
    uint64_t v76[3] = 1;
    long long v77 = 0u;
    memset(v78, 0, sizeof(v78));
    uint64_t v49 = v74;
    v97[0] = v74;
    v97[1] = v36;
    char v50 = v65;
    v97[2] = v65;
    v97[3] = v37;
    uint64_t v52 = v71;
    uint64_t v51 = v72;
    v97[4] = v72;
    v97[5] = v71;
    char v98 = v75;
    sub_21F83E64C((uint64_t)v80);
    type metadata accessor for TypedVectorizedProperties.Position();
    uint64_t v53 = sub_21FA26340();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v53 - 8) + 32))(v99, v80, v53);
    memset(v100, 0, sizeof(v100));
    uint64_t v101 = 1;
    uint64_t v103 = 0;
    uint64_t v102 = 0;
    char v104 = 0;
    memset(v105, 0, 24);
    v105[3] = 1;
    v105[4] = 0;
    v105[5] = 0;
    char v106 = 0;
    memset(v107, 0, 24);
    v107[3] = 1;
    long long v108 = 0u;
    long long v109 = 0u;
    char v110 = 0;
    sub_21F817534((uint64_t)v83, (uint64_t)v88, (uint64_t)v93, (uint64_t)v76, (uint64_t)v97, (uint64_t)v99, (uint64_t)v100, (uint64_t)v105, (uint64_t)v79, (uint64_t)v107, (uint64_t)v107);
    LOBYTE(v44) = v50;
    uint64_t v45 = v37;
    sub_21F8178E8(v79, v76);
    swift_beginAccess();
    uint64_t v54 = v38 + *(int *)(v64 + 112);
    sub_21F7BB3B4(v49, v36, v44, v37);
    sub_21F83F7B0(v51, v52, v75);
    sub_21F799B78((uint64_t)v76, v54, &qword_267EE7B20);
    swift_endAccess();
    goto LABEL_8;
  }
  memcpy(v82, v81, 0x2C9uLL);
  uint64_t v40 = v82[34];
  uint64_t v42 = v71;
  uint64_t v41 = v72;
  char v43 = v75;
  uint64_t v61 = v82[36];
  uint64_t v62 = v82[35];
  uint64_t v59 = v82[38];
  uint64_t v60 = v82[37];
  uint64_t v58 = v82[39];
  uint64_t v63 = v18;
  unsigned int v57 = LOBYTE(v82[40]);
  uint64_t v44 = v65;
  sub_21F7BB3B4(v74, v36, v65, v37);
  sub_21F83F7B0(v41, v42, v43);
  uint64_t v45 = v37;
  sub_21F94E010(v40, v62, v61, v60, v59, v58, v57);
  v82[34] = v74;
  v82[35] = v36;
  v82[36] = v44;
  v82[37] = v37;
  v82[38] = v41;
  v82[39] = v42;
  LOBYTE(v82[40]) = v43;
  uint64_t v46 = type metadata accessor for TypedVectorizedProperties();
  uint64_t v47 = *(void *)(v46 - 8);
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v47 + 16))(v81, v82, v46);
  sub_21F8178E8(v81, v79);
  swift_beginAccess();
  sub_21F799B78((uint64_t)v79, v38 + *(int *)(v64 + 112), &qword_267EE7B20);
  swift_endAccess();
  (*(void (**)(uint64_t *, uint64_t))(v47 + 8))(v82, v46);
LABEL_8:
  LOBYTE(v82[0]) = v66;
  v82[1] = v73;
  (*(void (**)(uint64_t, uint64_t *))(v70 + 40))(v68, v82);
  sub_21F7F42EC(v74, v36, v44, v45);
  return sub_21F83F6FC(v72, v71, v75);
}

uint64_t sub_21F94CEE4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_21F94CEFC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_21F94C65C);
}

uint64_t sub_21F94CEFC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, void, void, void, void, void))
{
  return a5(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6]);
}

uint64_t sub_21F94CF18(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_21F94CF30(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_21F94C7F8);
}

uint64_t sub_21F94CF30(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, void, void, void, void, void))
{
  return a5(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6]);
}

uint64_t sub_21F94CF4C(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v34 = *a2;
  uint64_t v6 = *((void *)a2 + 1);
  uint64_t v7 = type metadata accessor for ModifiedChartContent_Opacities_KeyPath();
  uint64_t v36 = a1;
  sub_21F8159D8(0, 0, 0, 0, *(void *)(a1 + *(int *)(v7 + 44)), __dst);
  uint64_t v32 = __dst[0];
  uint64_t v8 = __dst[1];
  uint64_t v9 = __dst[2];
  uint64_t v10 = __dst[3];
  uint64_t v11 = __dst[4];
  uint64_t v12 = __dst[5];
  char v13 = __dst[6];
  uint64_t v35 = v6;
  uint64_t v14 = v6 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  uint64_t v31 = type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v15 = v14 + *(int *)(v31 + 112);
  if (!*(void *)(v15 + 24))
  {
    memset(__src, 0, 24);
    __src[3] = 2;
    bzero(&__src[4], 0x2A9uLL);
    swift_retain();
    goto LABEL_5;
  }
  sub_21F83E3D8(v15, (uint64_t)v40);
  swift_retain();
  sub_21F817950(__src);
  sub_21F7D2934((uint64_t)v40);
  if (__src[3] == 2)
  {
LABEL_5:
    type metadata accessor for TypedVectorizedProperties();
    uint64_t v21 = sub_21FA26340();
    (*(void (**)(void *, uint64_t))(*(void *)(v21 - 8) + 8))(__src, v21);
    uint64_t v18 = v32;
    v44[0] = v32;
    v44[1] = v8;
    void v44[2] = v9;
    v44[3] = v10;
    v44[4] = v11;
    v44[5] = v12;
    char v45 = v13;
    memset(v46, 0, 24);
    v46[3] = 1;
    v46[5] = 0;
    v46[4] = 0;
    char v47 = 0;
    memset(v48, 0, 24);
    v48[3] = 1;
    long long v49 = 0u;
    memset(v50, 0, sizeof(v50));
    memset(v37, 0, 24);
    v37[3] = 1;
    long long v38 = 0u;
    memset(v39, 0, sizeof(v39));
    memset(v51, 0, sizeof(v51));
    char v52 = -4;
    sub_21F83E64C((uint64_t)v41);
    type metadata accessor for TypedVectorizedProperties.Position();
    uint64_t v22 = sub_21FA26340();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v22 - 8) + 32))(v53, v41, v22);
    memset(v54, 0, 24);
    v54[3] = 1;
    v54[5] = 0;
    v54[4] = 0;
    char v55 = 0;
    memset(v56, 0, 24);
    v56[3] = 1;
    v56[4] = 0;
    v56[5] = 0;
    char v57 = 0;
    memset(v58, 0, 24);
    v58[3] = 1;
    long long v59 = 0u;
    long long v60 = 0u;
    char v61 = 0;
    sub_21F817534((uint64_t)v44, (uint64_t)v46, (uint64_t)v48, (uint64_t)v37, (uint64_t)v51, (uint64_t)v53, (uint64_t)v54, (uint64_t)v56, (uint64_t)v40, (uint64_t)v58, (uint64_t)v58);
    sub_21F8178E8(v40, v37);
    swift_beginAccess();
    uint64_t v23 = v14 + *(int *)(v31 + 112);
    sub_21F7BB3B4(v32, v8, v9, v10);
    sub_21F83F7B0(v11, v12, v13);
    sub_21F799B78((uint64_t)v37, v23, &qword_267EE7B20);
    swift_endAccess();
    goto LABEL_6;
  }
  memcpy(__dst, __src, 0x2C9uLL);
  uint64_t v16 = __dst[1];
  char v28 = __dst[2];
  uint64_t v29 = __dst[0];
  uint64_t v30 = v11;
  uint64_t v17 = __dst[4];
  uint64_t v25 = __dst[5];
  uint64_t v26 = __dst[3];
  char v27 = __dst[6];
  sub_21F7BB3B4(v32, v8, v9, v10);
  sub_21F83F7B0(v30, v12, v13);
  sub_21F83F6A0(v29, v16, v28, v26, v17, v25, v27);
  __dst[0] = v32;
  uint64_t v18 = v32;
  __dst[1] = v8;
  __dst[2] = v9;
  __dst[3] = v10;
  __dst[4] = v30;
  __dst[5] = v12;
  LOBYTE(__dst[6]) = v13;
  uint64_t v19 = type metadata accessor for TypedVectorizedProperties();
  uint64_t v20 = *(void *)(v19 - 8);
  (*(void (**)(void *, void *, uint64_t))(v20 + 16))(__src, __dst, v19);
  sub_21F8178E8(__src, v40);
  swift_beginAccess();
  sub_21F799B78((uint64_t)v40, v14 + *(int *)(v31 + 112), &qword_267EE7B20);
  swift_endAccess();
  (*(void (**)(void *, uint64_t))(v20 + 8))(__dst, v19);
  uint64_t v11 = v30;
LABEL_6:
  LOBYTE(__dst[0]) = v34;
  __dst[1] = v35;
  (*(void (**)(uint64_t, void *))(a5 + 40))(v36, __dst);
  sub_21F7F42EC(v18, v8, v9, v10);
  return sub_21F83F6FC(v11, v12, v13);
}

uint64_t sub_21F94D498(uint64_t a1, char *a2, uint64_t *a3)
{
  return sub_21F94CF4C(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t sub_21F94D4A8(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v40 = *a2;
  uint64_t v6 = *((void *)a2 + 1);
  uint64_t v7 = type metadata accessor for ModifiedChartContent_SymbolAreas_KeyPath();
  uint64_t v42 = a1;
  sub_21F8159D8(0, 0, 0, 0, *(void *)(a1 + *(int *)(v7 + 44)), __dst);
  uint64_t v8 = __dst[0];
  uint64_t v9 = __dst[1];
  uint64_t v36 = __dst[3];
  uint64_t v37 = __dst[2];
  uint64_t v44 = __dst[4];
  uint64_t v38 = __dst[5];
  char v39 = __dst[6];
  uint64_t v41 = v6;
  uint64_t v10 = v6 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  uint64_t v35 = type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v11 = v10 + *(int *)(v35 + 112);
  if (!*(void *)(v11 + 24))
  {
    memset(__src, 0, 24);
    __src[3] = 2;
    bzero(&__src[4], 0x2A9uLL);
    swift_retain();
    goto LABEL_5;
  }
  sub_21F83E3D8(v11, (uint64_t)v48);
  swift_retain();
  sub_21F817950(__src);
  sub_21F7D2934((uint64_t)v48);
  if (__src[3] == 2)
  {
LABEL_5:
    type metadata accessor for TypedVectorizedProperties();
    uint64_t v23 = sub_21FA26340();
    (*(void (**)(void *, uint64_t))(*(void *)(v23 - 8) + 8))(__src, v23);
    memset(v52, 0, 24);
    uint64_t v52[3] = 1;
    v52[5] = 0;
    v52[4] = 0;
    char v53 = 0;
    memset(v54, 0, 24);
    v54[3] = 1;
    v54[5] = 0;
    v54[4] = 0;
    char v55 = 0;
    memset(v56, 0, 24);
    v56[3] = 1;
    long long v57 = 0u;
    memset(v58, 0, sizeof(v58));
    memset(v45, 0, 24);
    v45[3] = 1;
    long long v46 = 0u;
    memset(v47, 0, sizeof(v47));
    uint64_t v22 = v8;
    v59[0] = v8;
    uint64_t v17 = v9;
    v59[1] = v9;
    char v14 = v37;
    uint64_t v15 = v38;
    v59[2] = v37;
    uint64_t v24 = v10;
    uint64_t v21 = v36;
    v59[3] = v36;
    v59[4] = v44;
    v59[5] = v38;
    char v16 = v39;
    char v60 = v39;
    sub_21F83E64C((uint64_t)v49);
    type metadata accessor for TypedVectorizedProperties.Position();
    uint64_t v25 = sub_21FA26340();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v25 - 8) + 32))(v61, v49, v25);
    memset(v62, 0, 24);
    _OWORD v62[3] = 1;
    v62[5] = 0;
    v62[4] = 0;
    char v63 = 0;
    memset(v64, 0, 24);
    void v64[3] = 1;
    v64[4] = 0;
    v64[5] = 0;
    char v65 = 0;
    memset(v66, 0, 24);
    v66[3] = 1;
    long long v67 = 0u;
    long long v68 = 0u;
    char v69 = 0;
    sub_21F817534((uint64_t)v52, (uint64_t)v54, (uint64_t)v56, (uint64_t)v45, (uint64_t)v59, (uint64_t)v61, (uint64_t)v62, (uint64_t)v64, (uint64_t)v48, (uint64_t)v66, (uint64_t)v66);
    sub_21F8178E8(v48, v45);
    swift_beginAccess();
    uint64_t v26 = v24 + *(int *)(v35 + 112);
    sub_21F7BB3B4(v22, v9, v37, v36);
    sub_21F83F7B0(v44, v38, v39);
    sub_21F799B78((uint64_t)v45, v26, &qword_267EE7B20);
    swift_endAccess();
    goto LABEL_6;
  }
  memcpy(__dst, __src, 0x2C9uLL);
  uint64_t v32 = __dst[35];
  uint64_t v33 = __dst[34];
  uint64_t v12 = __dst[37];
  uint64_t v30 = __dst[38];
  char v31 = __dst[36];
  uint64_t v29 = __dst[39];
  unsigned int v28 = LOBYTE(__dst[40]);
  uint64_t v13 = v8;
  uint64_t v34 = v8;
  char v14 = v37;
  sub_21F7BB3B4(v8, v9, v37, v36);
  uint64_t v15 = v38;
  char v16 = v39;
  sub_21F83F7B0(v44, v38, v39);
  sub_21F94E068(v33, v32, v31, v12, v30, v29, v28);
  __dst[34] = v13;
  __dst[35] = v9;
  uint64_t v17 = v9;
  __dst[36] = v37;
  __dst[37] = v36;
  __dst[38] = v44;
  __dst[39] = v38;
  LOBYTE(__dst[40]) = v39;
  uint64_t v18 = type metadata accessor for TypedVectorizedProperties();
  uint64_t v19 = *(void *)(v18 - 8);
  (*(void (**)(void *, void *, uint64_t))(v19 + 16))(__src, __dst, v18);
  sub_21F8178E8(__src, v48);
  swift_beginAccess();
  uint64_t v20 = v10 + *(int *)(v35 + 112);
  uint64_t v21 = v36;
  uint64_t v22 = v34;
  sub_21F799B78((uint64_t)v48, v20, &qword_267EE7B20);
  swift_endAccess();
  (*(void (**)(void *, uint64_t))(v19 + 8))(__dst, v18);
LABEL_6:
  LOBYTE(__dst[0]) = v40;
  __dst[1] = v41;
  (*(void (**)(uint64_t, void *))(a5 + 40))(v42, __dst);
  sub_21F7F42EC(v22, v17, v14, v21);
  return sub_21F83F6FC(v44, v15, v16);
}

uint64_t sub_21F94DA18(uint64_t a1, char *a2, uint64_t *a3)
{
  return sub_21F94D4A8(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t sub_21F94DA28(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v39 = *a2;
  uint64_t v6 = *((void *)a2 + 1);
  uint64_t v7 = type metadata accessor for ModifiedChartContent_SymbolSizes_KeyPath();
  uint64_t v41 = a1;
  sub_21F8159D8(0, 0, 0, 0, *(void *)(a1 + *(int *)(v7 + 44)), __dst);
  uint64_t v8 = __dst[0];
  uint64_t v36 = __dst[3];
  uint64_t v37 = __dst[2];
  uint64_t v43 = __dst[1];
  uint64_t v44 = __dst[4];
  uint64_t v38 = __dst[5];
  char v9 = __dst[6];
  uint64_t v40 = v6;
  uint64_t v10 = v6 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  uint64_t v35 = type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v11 = v10 + *(int *)(v35 + 112);
  if (!*(void *)(v11 + 24))
  {
    memset(__src, 0, 24);
    __src[3] = 2;
    bzero(&__src[4], 0x2A9uLL);
    swift_retain();
    goto LABEL_5;
  }
  sub_21F83E3D8(v11, (uint64_t)v48);
  swift_retain();
  sub_21F817950(__src);
  sub_21F7D2934((uint64_t)v48);
  if (__src[3] == 2)
  {
LABEL_5:
    type metadata accessor for TypedVectorizedProperties();
    uint64_t v22 = sub_21FA26340();
    (*(void (**)(void *, uint64_t))(*(void *)(v22 - 8) + 8))(__src, v22);
    memset(v52, 0, 24);
    uint64_t v52[3] = 1;
    v52[5] = 0;
    v52[4] = 0;
    char v53 = 0;
    memset(v54, 0, 24);
    v54[3] = 1;
    v54[5] = 0;
    v54[4] = 0;
    char v55 = 0;
    memset(v56, 0, 24);
    v56[3] = 1;
    long long v57 = 0u;
    memset(v58, 0, sizeof(v58));
    memset(v45, 0, 24);
    v45[3] = 1;
    char v21 = v9;
    char v23 = v9 | 0x80;
    long long v46 = 0u;
    memset(v47, 0, sizeof(v47));
    uint64_t v14 = v8;
    v59[0] = v8;
    uint64_t v20 = v43;
    v59[1] = v43;
    uint64_t v18 = v36;
    char v19 = v37;
    v59[2] = v37;
    v59[3] = v36;
    v59[4] = v44;
    uint64_t v15 = v38;
    v59[5] = v38;
    char v60 = v23;
    sub_21F83E64C((uint64_t)v49);
    type metadata accessor for TypedVectorizedProperties.Position();
    uint64_t v24 = sub_21FA26340();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v24 - 8) + 32))(v61, v49, v24);
    memset(v62, 0, 24);
    _OWORD v62[3] = 1;
    v62[5] = 0;
    v62[4] = 0;
    char v63 = 0;
    memset(v64, 0, 24);
    void v64[3] = 1;
    v64[4] = 0;
    v64[5] = 0;
    char v65 = 0;
    memset(v66, 0, 24);
    v66[3] = 1;
    long long v67 = 0u;
    long long v68 = 0u;
    char v69 = 0;
    sub_21F817534((uint64_t)v52, (uint64_t)v54, (uint64_t)v56, (uint64_t)v45, (uint64_t)v59, (uint64_t)v61, (uint64_t)v62, (uint64_t)v64, (uint64_t)v48, (uint64_t)v66, (uint64_t)v66);
    sub_21F8178E8(v48, v45);
    swift_beginAccess();
    uint64_t v25 = v10 + *(int *)(v35 + 112);
    sub_21F7BB3B4(v14, v43, v37, v36);
    sub_21F83F7B0(v44, v38, v21);
    sub_21F799B78((uint64_t)v45, v25, &qword_267EE7B20);
    swift_endAccess();
    goto LABEL_6;
  }
  memcpy(__dst, __src, 0x2C9uLL);
  char v12 = v9;
  char v33 = v9 | 0x80;
  char v34 = v9;
  uint64_t v31 = __dst[35];
  uint64_t v32 = __dst[34];
  uint64_t v29 = __dst[37];
  char v30 = __dst[36];
  uint64_t v27 = __dst[39];
  uint64_t v28 = __dst[38];
  uint64_t v13 = LOBYTE(__dst[40]);
  uint64_t v14 = v8;
  sub_21F7BB3B4(v8, v43, v37, v36);
  uint64_t v15 = v38;
  sub_21F83F7B0(v44, v38, v12);
  sub_21F94E068(v32, v31, v30, v29, v28, v27, v13);
  __dst[34] = v14;
  __dst[35] = v43;
  __dst[36] = v37;
  __dst[37] = v36;
  __dst[38] = v44;
  __dst[39] = v38;
  LOBYTE(__dst[40]) = v33;
  uint64_t v16 = type metadata accessor for TypedVectorizedProperties();
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(void *, void *, uint64_t))(v17 + 16))(__src, __dst, v16);
  sub_21F8178E8(__src, v48);
  swift_beginAccess();
  uint64_t v18 = v36;
  char v19 = v37;
  uint64_t v20 = v43;
  char v21 = v34;
  sub_21F799B78((uint64_t)v48, v10 + *(int *)(v35 + 112), &qword_267EE7B20);
  swift_endAccess();
  (*(void (**)(void *, uint64_t))(v17 + 8))(__dst, v16);
LABEL_6:
  LOBYTE(__dst[0]) = v39;
  __dst[1] = v40;
  (*(void (**)(uint64_t, void *))(a5 + 40))(v41, __dst);
  sub_21F7F42EC(v14, v20, v19, v18);
  return sub_21F83F6FC(v44, v15, v21);
}

uint64_t sub_21F94DF94(uint64_t a1, char *a2, uint64_t *a3)
{
  return sub_21F94DA28(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t sub_21F94DFAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ChartContentRenderContext.Environment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_21F94E010(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a7 <= 0xFBu) {
    return sub_21F94E0C0(result, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F83F6FC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F85453C);
  }
  return result;
}

uint64_t sub_21F94E068(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a7 <= 0xFBu) {
    return sub_21F94E0C0(result, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F85453C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F85453C);
  }
  return result;
}

uint64_t sub_21F94E0C0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t), uint64_t (*a9)(uint64_t, uint64_t, uint64_t))
{
  if ((a7 & 0x80) != 0)
  {
    sub_21F7F42EC(a1, a2, a3, a4);
    uint64_t v12 = a5;
    uint64_t v13 = a6;
    uint64_t v14 = a7 & 0x7F;
    uint64_t v15 = a9;
  }
  else
  {
    sub_21F7F42EC(a1, a2, a3, a4);
    uint64_t v12 = a5;
    uint64_t v13 = a6;
    uint64_t v14 = a7;
    uint64_t v15 = a8;
  }
  return v15(v12, v13, v14);
}

uint64_t sub_21F94E170(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if (a4 != 1)
  {
    sub_21F7F42EC(result, a2, a3, a4);
    return sub_21F83E970(a5, a6, a7, a8, a9, a10);
  }
  return result;
}

uint64_t sub_21F94E1E0(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 128);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), v4);
  return a1;
}

void sub_21F94E24C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a7 != 1)
  {
    sub_21F7F42EC(a4, a5, a6, a7);
    sub_21F83E99C(a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  }
}

uint64_t sub_21F94E2F8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_21F94E354(uint64_t a1)
{
  return a1;
}

uint64_t *sub_21F94E388(uint64_t *a1)
{
  return a1;
}

uint64_t sub_21F94E3BC(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F94E3F4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_21F94E4A8(a1, a2, a3, &qword_26AD46280);
}

uint64_t *sub_21F94E414(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *result;
  char v4 = (uint64_t *)(*result + 40 * a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x8000000000000000) == 0) {
    *(void *)(v3 + 40 * v5 + 8) = v4[1];
  }
  uint64_t v6 = v4[1];
  if ((v6 & 0x8000000000000000) == 0) {
    *(void *)(v3 + 40 * v6) = v5;
  }
  if (*(void *)(a3 + 24) == a2) {
    *(void *)(a3 + 24) = *v4;
  }
  *char v4 = -1;
  *(void *)(v3 + 40 * *(void *)(a3 + 16)) = a2;
  v4[1] = *(void *)(a3 + 16);
  *(void *)(a3 + 16) = a2;
  return result;
}

uint64_t sub_21F94E488(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_21F94E4A8(a1, a2, a3, &qword_26AD46278);
}

uint64_t sub_21F94E4A8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *a1;
  uint64_t v7 = sub_21F76CA40(a4);
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t result = v7 - 8;
  uint64_t v10 = *(void *)(v9 + 72);
  uint64_t v11 = (void *)(v6 + v10 * a2);
  if ((*v11 & 0x8000000000000000) == 0) {
    *(void *)(v6 + *v11 * v10 + 8) = v11[1];
  }
  uint64_t v12 = v11[1];
  if ((v12 & 0x8000000000000000) == 0) {
    *(void *)(v6 + v12 * v10) = *v11;
  }
  if (*(void *)(a3 + 24) == a2) {
    *(void *)(a3 + 24) = *v11;
  }
  *uint64_t v11 = -1;
  *(void *)(v6 + *(void *)(a3 + 16) * v10) = a2;
  v11[1] = *(void *)(a3 + 16);
  *(void *)(a3 + 16) = a2;
  return result;
}

uint64_t *sub_21F94E55C(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *result;
  char v4 = (uint64_t *)(*result + 48 * a2);
  uint64_t v5 = *v4;
  if ((*v4 & 0x8000000000000000) == 0) {
    *(void *)(v3 + 48 * v5 + 8) = v4[1];
  }
  uint64_t v6 = v4[1];
  if ((v6 & 0x8000000000000000) == 0) {
    *(void *)(v3 + 48 * v6) = v5;
  }
  if (*(void *)(a3 + 24) == a2) {
    *(void *)(a3 + 24) = *v4;
  }
  *char v4 = -1;
  *(void *)(v3 + 48 * *(void *)(a3 + 16)) = a2;
  v4[1] = *(void *)(a3 + 16);
  *(void *)(a3 + 16) = a2;
  return result;
}

uint64_t sub_21F94E5D0()
{
  return sub_21FA26A50();
}

uint64_t sub_21F94E624()
{
  return sub_21F94FD1C();
}

uint64_t sub_21F94E62C()
{
  return sub_21FA26A50();
}

BOOL sub_21F94E67C(double *a1, double *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

uint64_t FunctionSampler.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  uint64_t v4 = sub_21F950C74(a1, a2);
  swift_release();
  return v4;
}

uint64_t FunctionSampler.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_21F950C74(a1, a2);
  swift_release();
  return v2;
}

uint64_t sub_21F94E728()
{
  swift_beginAccess();
  return *(void *)(v0 + 144);
}

uint64_t sub_21F94E760(uint64_t a1, char a2)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v2 + 144) = a1;
  *(unsigned char *)(v2 + 152) = a2 & 1;
  *(void *)(v2 + 104) = 0;
  *(void *)(v2 + 112) = 0;
  *(unsigned char *)(v2 + 120) = 1;
  return result;
}

uint64_t (*sub_21F94E7C0(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_21F94E818;
}

uint64_t sub_21F94E818(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(v5 + 104) = 0;
    *(void *)(v5 + 112) = 0;
    *(unsigned char *)(v5 + 120) = 1;
  }
  return result;
}

void sub_21F94E854()
{
  if (*(unsigned char *)(v0 + 96))
  {
    uint64_t v1 = *(double (**)(double))(v0 + 16);
    sub_21F969738(v1, 0.014959965, 659.734457, *(void *)(v0 + 24), 1000);
    if ((v3 & 1) == 0)
    {
      double v4 = v2 * -1.5;
      double v5 = v2 * 1.5;
      if (v2 * -1.5 > v2 * 1.5)
      {
        __break(1u);
        return;
      }
LABEL_18:
      *(double *)(v0 + 80) = v4;
      *(double *)(v0 + 88) = v5;
      *(unsigned char *)(v0 + 96) = 0;
      return;
    }
    sub_21F969DB4((double (*)(void))v1);
    double v7 = v6;
    char v9 = v8;
    sub_21F96A44C(v1);
    if ((v9 & 1) == 0)
    {
      double v5 = v7;
      if (v11)
      {
LABEL_15:
        if (v5 < 0.0)
        {
          __break(1u);
          return;
        }
        goto LABEL_16;
      }
      v12.n128_f64[0] = v10;
      if (v7 <= v10) {
        double v5 = v10;
      }
      if (v5 >= 0.0)
      {
LABEL_16:
        double v4 = -v5;
        goto LABEL_18;
      }
      __break(1u);
    }
    if (v11)
    {
      sub_21F96AC94((uint64_t (*)(__n128))v1, v12);
      goto LABEL_18;
    }
    double v5 = v10;
    if (v10 >= 0.0) {
      goto LABEL_16;
    }
    __break(1u);
    goto LABEL_15;
  }
}

void sub_21F94E958()
{
  if (*(unsigned char *)(v0 + 120))
  {
    if ((*(unsigned char *)(v0 + 96) & 1) == 0)
    {
      double v4 = *(double *)(v0 + 80);
      double v5 = *(double *)(v0 + 88);
LABEL_21:
      swift_beginAccess();
      sub_21F965B04((char *)1, 1, *(void *)(v0 + 144), *(unsigned char *)(v0 + 152), *(double (**)(double))(v0 + 16), v4, v5);
      *(void *)(v0 + 104) = v15;
      *(void *)(v0 + 112) = v16;
      *(unsigned char *)(v0 + 120) = 0;
      return;
    }
    uint64_t v1 = *(double (**)(double))(v0 + 16);
    sub_21F969738(v1, 0.014959965, 659.734457, *(void *)(v0 + 24), 1000);
    if ((v3 & 1) == 0)
    {
      double v4 = v2 * -1.5;
      double v5 = v2 * 1.5;
      if (v2 * -1.5 > v2 * 1.5)
      {
        __break(1u);
        return;
      }
      goto LABEL_20;
    }
    sub_21F969DB4((double (*)(void))v1);
    double v7 = v6;
    char v9 = v8;
    sub_21F96A44C(v1);
    if ((v9 & 1) == 0)
    {
      double v5 = v7;
      if (v11) {
        goto LABEL_17;
      }
      v12.n128_f64[0] = v10;
      if (v7 <= v10) {
        double v5 = v10;
      }
      if (v5 >= 0.0)
      {
LABEL_18:
        double v4 = -v5;
LABEL_20:
        *(double *)(v0 + 80) = v4;
        *(double *)(v0 + 88) = v5;
        *(unsigned char *)(v0 + 96) = 0;
        goto LABEL_21;
      }
      __break(1u);
    }
    if (v11)
    {
      sub_21F96AC94((uint64_t (*)(__n128))v1, v12);
      double v4 = v13;
      double v5 = v14;
      goto LABEL_20;
    }
    double v5 = v10;
    if (v10 < 0.0)
    {
      __break(1u);
LABEL_17:
      if (v5 < 0.0)
      {
        __break(1u);
        return;
      }
      goto LABEL_18;
    }
    goto LABEL_18;
  }
}

void sub_21F94EAC0(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  if ((~*(void *)&a2 & 0x7FF0000000000000) != 0)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    if ((~*(void *)&a3 & 0x7FF0000000000000) != 0 && a2 != a3)
    {
      if (a2 > a3)
      {
        __break(1u);
        return;
      }
      sub_21F94FD68((uint64_t)v58, a2, a3, 1.5, 1.0);
      swift_retain();
      uint64_t v12 = sub_21F94FEC0((uint64_t)v58, 1.0, 0.0, 1.0, 0.0, v5, 0, 2, 0, 2);
      swift_release();
      uint64_t v11 = sub_21F950304(v12, a2, a3);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
  }
  uint64_t v13 = *(void *)(v11 + 16);
  if (!v13)
  {
    swift_bridgeObjectRelease();
    float64_t v52 = 0.0;
    float64_t v53 = 0.0;
    float64_t v54 = 0.0;
    float64_t v55 = 0.0;
    BOOL v51 = 1;
    goto LABEL_75;
  }
  uint64_t v14 = 0;
  float64x2_t v15 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
  float64x2_t v16 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  do
  {
    uint64_t v17 = *(void *)(v11 + 32 + 8 * v14);
    uint64_t v18 = *(void *)(v17 + 16);
    if (v18) {
      BOOL v19 = v18 == 1;
    }
    else {
      BOOL v19 = 1;
    }
    if (!v19)
    {
      float64x2_t v21 = *(float64x2_t *)(v17 + 32);
      uint64_t v20 = v17 + 32;
      float64x2_t v22 = v21;
      uint64_t v23 = 1;
      while (1)
      {
        float64x2_t v28 = v22;
        float64x2_t v22 = *(float64x2_t *)(v20 + 16 * v23);
        float64x2_t v29 = vsubq_f64(v28, v22);
        if (fabs(v29.f64[0]) >= 0.00000001)
        {
          double v33 = (a2 - v22.f64[0]) / v29.f64[0];
          double v34 = (a3 - v22.f64[0]) / v29.f64[0];
          if (v34 >= v33) {
            double v35 = (a3 - v22.f64[0]) / v29.f64[0];
          }
          else {
            double v35 = (a2 - v22.f64[0]) / v29.f64[0];
          }
          if (v34 < v33) {
            double v33 = (a3 - v22.f64[0]) / v29.f64[0];
          }
          if (v35 < 0.0 || v33 > 1.0) {
            goto LABEL_24;
          }
          if (v35 <= 1.0) {
            double v37 = v35;
          }
          else {
            double v37 = 1.0;
          }
          if (v33 < 0.0) {
            double v33 = 0.0;
          }
          float64x2_t v32 = vaddq_f64(v22, vmulq_n_f64(v29, v33));
          float64x2_t v28 = vaddq_f64(v22, vmulq_n_f64(v29, v37));
          double v31 = v32.f64[1];
          float64x2_t v29 = vsubq_f64(v28, v32);
          v29.f64[0] = v29.f64[1];
        }
        else
        {
          if (v22.f64[0] < a2 || v22.f64[0] > a3) {
            goto LABEL_24;
          }
          double v31 = *(double *)(v20 + 16 * v23 + 8);
          v29.f64[0] = v29.f64[1];
          float64x2_t v32 = *(float64x2_t *)(v20 + 16 * v23);
        }
        if (fabs(v29.f64[0]) >= 0.00000001)
        {
          double v24 = (a4 - v31) / v29.f64[0];
          double v25 = (a5 - v31) / v29.f64[0];
          if (v25 >= v24) {
            double v26 = (a5 - v31) / v29.f64[0];
          }
          else {
            double v26 = (a4 - v31) / v29.f64[0];
          }
          if (v25 < v24) {
            double v24 = (a5 - v31) / v29.f64[0];
          }
          if (v26 < 0.0 || v24 > 1.0) {
            goto LABEL_24;
          }
          int64x2_t v41 = (int64x2_t)vsubq_f64(v28, v32);
          if (v26 > 1.0) {
            double v26 = 1.0;
          }
          if (v24 < 0.0) {
            double v24 = 0.0;
          }
          float64x2_t v42 = (float64x2_t)vzip1q_s64((int64x2_t)v29, v41);
          float64x2_t v43 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v32.f64[0], 0);
          v43.f64[0] = v31;
          float64x2_t v40 = vaddq_f64(v43, vmulq_n_f64(v42, v24));
          float64x2_t v39 = vaddq_f64(v43, vmulq_n_f64(v42, v26));
LABEL_58:
          float64x2_t v44 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v16, v40), (int8x16_t)v40, (int8x16_t)v16);
          float64x2_t v16 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v44, v39), (int8x16_t)v39, (int8x16_t)v44);
          float64x2_t v45 = (float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(v40, v15), (int8x16_t)v40, (int8x16_t)v15);
          float64x2_t v15 = (float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(v39, v45), (int8x16_t)v39, (int8x16_t)v45);
          if (v18 - 1 == v23) {
            break;
          }
          ++v23;
        }
        else
        {
          if (v31 >= a4 && v31 <= a5)
          {
            float64x2_t v39 = (float64x2_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL);
            float64x2_t v40 = (float64x2_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL);
            goto LABEL_58;
          }
LABEL_24:
          if (v18 == ++v23) {
            break;
          }
        }
      }
    }
    ++v14;
  }
  while (v14 != v13);
  float64x2_t v56 = v16;
  float64x2_t v57 = v15;
  swift_bridgeObjectRelease();
  unsigned __int8 v46 = vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64(v57, v56))).u8[0];
  float64_t v47 = v56.f64[1];
  float64_t v48 = v57.f64[1];
  float64_t v49 = v56.f64[0];
  float64_t v50 = v57.f64[0];
  BOOL v51 = (v46 & 1) != 0;
  if (v46)
  {
    float64_t v47 = 0.0;
    float64_t v48 = 0.0;
    float64_t v49 = 0.0;
    float64_t v50 = 0.0;
  }
  if (v56.f64[1] <= v57.f64[1])
  {
    float64_t v52 = v47;
  }
  else
  {
    BOOL v51 = 1;
    float64_t v52 = 0.0;
  }
  if (v56.f64[1] <= v57.f64[1]) {
    float64_t v53 = v48;
  }
  else {
    float64_t v53 = 0.0;
  }
  if (v56.f64[1] <= v57.f64[1]) {
    float64_t v54 = v49;
  }
  else {
    float64_t v54 = 0.0;
  }
  if (v56.f64[1] <= v57.f64[1]) {
    float64_t v55 = v50;
  }
  else {
    float64_t v55 = 0.0;
  }
LABEL_75:
  *(float64_t *)a1 = v52;
  *(float64_t *)(a1 + 8) = v53;
  *(float64_t *)(a1 + 16) = v54;
  *(float64_t *)(a1 + 24) = v55;
  *(unsigned char *)(a1 + 32) = v51;
}

void *sub_21F94EE1C(double a1, double a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_21FA259E0();
  uint64_t v35 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  char v8 = (uint64_t *)((char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = sub_21FA25A20();
  uint64_t v36 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v33 - v13;
  uint64_t v15 = v3 + 32;
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 32));
  swift_retain();
  uint64_t v34 = v3 + 40;
  unint64_t v16 = sub_21F91A970(v38, 1, (void *)(v3 + 40), v3, a1, a2, a1, a2);
  char v18 = v17;
  uint64_t v19 = v38[0];
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 32));
  uint64_t v37 = v19;
  uint64_t v20 = *(void *)(v19 + 16);
  if ((v18 & 1) == 0)
  {
    uint64_t v15 = v37;
    if (!v20) {
      goto LABEL_15;
    }
    swift_retain();
    sub_21FA25A00();
    *char v8 = 30;
    uint64_t v24 = v35;
    (*(void (**)(void *, void, uint64_t))(v35 + 104))(v8, *MEMORY[0x263F8F000], v6);
    sub_21FA25A10();
    (*(void (**)(void *, uint64_t))(v24 + 8))(v8, v6);
    double v25 = *(void (**)(char *, uint64_t))(v36 + 8);
    v25(v11, v9);
    char v26 = sub_21FA25A30();
    swift_release();
    v25(v14, v9);
    if ((v26 & 1) == 0)
    {
      *(void *)(v15 + 16) = 0;
      swift_release();
      goto LABEL_15;
    }
    if (qword_26AD49C10 == -1) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  if (v20)
  {
    swift_retain();
    sub_21FA25A50();
    swift_release();
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 32));
  float64x2_t v21 = *(void **)(v3 + 48);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v3 + 48) = v21;
  if (isUniquelyReferenced_nonNull_native)
  {
    if ((v16 & 0x8000000000000000) == 0) {
      goto LABEL_6;
    }
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  float64x2_t v21 = sub_21F935458(v21);
  if ((v16 & 0x8000000000000000) != 0) {
    goto LABEL_19;
  }
LABEL_6:
  unint64_t v23 = v21[2];
  if (v16 >= v23)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    swift_once();
LABEL_14:
    id v27 = (id)qword_26AD52498;
    sub_21FA26240();
    sub_21F76CA40(&qword_26AD44C40);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_21FA28550;
    *(void *)(v28 + 56) = MEMORY[0x263F8D310];
    *(void *)(v28 + 64) = sub_21F7C4884();
    *(void *)(v28 + 32) = 0xD00000000000001BLL;
    *(void *)(v28 + 40) = 0x800000021FA5F340;
    sub_21FA243E0();

    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  LOBYTE(v21[6 * v16 + 9]) = 0;
  *(void *)(v3 + 48) = v21;
  if (v16 != *(void *)(v3 + 56))
  {
    v38[0] = (uint64_t)(v21 + 4);
    v38[1] = v23;
    sub_21F94E55C(v38, v16, v34);
    *(void *)(v3 + 48) = v21;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 32));
  uint64_t v15 = v37;
LABEL_15:
  os_unfair_lock_lock((os_unfair_lock_t)(v15 + 24));
  float64x2_t v29 = *(void **)(v15 + 32);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v15 + 24));
  if (!v29)
  {
    v30.n128_f64[0] = a1;
    v31.n128_f64[0] = a2;
    float64x2_t v29 = sub_21F96702C(4, 7, 1, *(void *)(v3 + 16), *(void **)(v3 + 24), v30, v31);
  }
  swift_release();
  return v29;
}

void *sub_21F94F280(double a1, double a2)
{
  uint64_t v4 = swift_unownedRetainStrong();
  uint64_t v5 = *(void *)(v4 + 16);
  uint64_t v6 = *(void **)(v4 + 24);
  swift_retain();
  swift_release();
  v7.n128_f64[0] = a1;
  v8.n128_f64[0] = a2;
  uint64_t v9 = sub_21F96702C(4, 7, 1, v5, v6, v7, v8);
  swift_release();
  return v9;
}

void sub_21F94F300(double a1, double a2)
{
  sub_21F94FD68((uint64_t)v11, a1, a2, 1.5, 1.0);
  uint64_t v2 = v13;
  if (v13)
  {
    if (v13 >= 1)
    {
      uint64_t v3 = 0;
      uint64_t v4 = v12;
      double v6 = *(double *)&v11[4];
      double v5 = *(double *)&v11[5];
      uint64_t v7 = v12 ^ 0x7FFFFFFFFFFFFFFFLL;
      while (1)
      {
        uint64_t v8 = v3 + v4;
        if (__OFADD__(v3, v4)) {
          break;
        }
        if (v7 == v3) {
          goto LABEL_10;
        }
        double v9 = v6 + v5 * (double)v8;
        double v10 = v6 + v5 * (double)(v8 + 1);
        if (v9 > v10) {
          goto LABEL_11;
        }
        ++v3;
        sub_21F94EE1C(v9, v10);
        swift_bridgeObjectRelease();
        if (v2 == v3) {
          return;
        }
      }
      __break(1u);
LABEL_10:
      __break(1u);
LABEL_11:
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t sub_21F94F3C4@<X0>(double *a1@<X0>, double a2@<X2>, char a3@<W3>, double a4@<X4>, char a5@<W5>, void *a6@<X8>, double a7@<D0>, double a8@<D1>, double a9@<D2>, double a10@<D3>)
{
  uint64_t v19 = sub_21F94EE1C(*a1, a1[1]);
  int64_t v20 = v19[2];
  if (!v20)
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v24 = MEMORY[0x263F8EE78];
    goto LABEL_37;
  }
  unsigned __int8 v46 = a6;
  uint64_t v55 = MEMORY[0x263F8EE78];
  uint64_t v48 = v19[2];
  float64x2_t v21 = v19;
  sub_21F7A2D40(0, v20, 0);
  uint64_t v22 = v48;
  uint64_t v23 = 0;
  uint64_t v24 = v55;
  float64_t v49 = v21 + 4;
  long double v25 = a2;
  long double v26 = a4;
  double v47 = a4;
  double v52 = a2;
  do
  {
    uint64_t v27 = v49[v23];
    int64_t v28 = *(void *)(v27 + 16);
    if (v28)
    {
      uint64_t v50 = v23;
      uint64_t v51 = v24;
      uint64_t v54 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      sub_21F7A2CE0(0, v28, 0);
      double v29 = v47;
      uint64_t v30 = 0;
      uint64_t v31 = v54;
      while (1)
      {
        long long v32 = *(_OWORD *)(v27 + 16 * v30 + 32);
        if (!a3)
        {
          long long __x = *(_OWORD *)(v27 + 16 * v30 + 32);
          double v34 = pow(*(long double *)&v32, v25);
          goto LABEL_13;
        }
        if (a3 == 1) {
          break;
        }
        if (v52 != 0.0)
        {
          long long __x = *(_OWORD *)(v27 + 16 * v30 + 32);
LABEL_12:
          double v34 = log(*(long double *)&v32);
LABEL_13:
          double v35 = v34;
LABEL_14:
          *((void *)&v32 + 1) = *((void *)&__x + 1);
          goto LABEL_15;
        }
        double v35 = *(double *)(v27 + 16 * v30 + 32);
LABEL_15:
        double v36 = *((double *)&v32 + 1);
        if (!a5)
        {
          double v38 = pow(*((long double *)&v32 + 1), v26);
          goto LABEL_23;
        }
        if (a5 == 1)
        {
          *(double *)&long long v32 = *((double *)&v32 + 1) * v26;
          if ((*((void *)&v32 + 1) & 0x8000000000000000) != 0)
          {
            double v36 = -log(1.0 - *(double *)&v32);
            goto LABEL_24;
          }
          double v37 = *(double *)&v32 + 1.0;
LABEL_22:
          double v38 = log(v37);
LABEL_23:
          double v36 = v38;
          goto LABEL_24;
        }
        if (v29 != 0.0)
        {
          double v37 = *((double *)&v32 + 1);
          goto LABEL_22;
        }
LABEL_24:
        unint64_t v40 = *(void *)(v54 + 16);
        unint64_t v39 = *(void *)(v54 + 24);
        if (v40 >= v39 >> 1)
        {
          sub_21F7A2CE0((char *)(v39 > 1), v40 + 1, 1);
          double v29 = v47;
        }
        ++v30;
        *(double *)&long long v41 = v35 * a7 + a8;
        *((double *)&v41 + 1) = v36 * a9 + a10;
        *(void *)(v54 + 16) = v40 + 1;
        *(_OWORD *)(v54 + 16 * v40 + 32) = v41;
        if (v28 == v30)
        {
          swift_bridgeObjectRelease();
          uint64_t v22 = v48;
          uint64_t v23 = v50;
          uint64_t v24 = v51;
          goto LABEL_32;
        }
      }
      long long __x = *(_OWORD *)(v27 + 16 * v30 + 32);
      double v33 = *(double *)&v32 * v25;
      if ((*(void *)(v27 + 16 * v30 + 32) & 0x8000000000000000) == 0)
      {
        *(double *)&long long v32 = v33 + 1.0;
        goto LABEL_12;
      }
      double v35 = -log(1.0 - v33);
      goto LABEL_14;
    }
    uint64_t v31 = MEMORY[0x263F8EE78];
LABEL_32:
    unint64_t v43 = *(void *)(v24 + 16);
    unint64_t v42 = *(void *)(v24 + 24);
    if (v43 >= v42 >> 1)
    {
      uint64_t v44 = v23;
      sub_21F7A2D40((void *)(v42 > 1), v43 + 1, 1);
      uint64_t v23 = v44;
      uint64_t v22 = v48;
    }
    ++v23;
    *(void *)(v24 + 16) = v43 + 1;
    *(void *)(v24 + 8 * v43 + 32) = v31;
  }
  while (v23 != v22);
  uint64_t result = swift_bridgeObjectRelease();
  a6 = v46;
LABEL_37:
  *a6 = v24;
  return result;
}

uint64_t sub_21F94F6E4(unint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  unint64_t v7 = *(void *)(a2 + 16);
  if (v7)
  {
    uint64_t v8 = 0;
    unint64_t v9 = *(void *)(a2 + 16);
    while (1)
    {
      unint64_t v10 = v9 >> 1;
      unint64_t v11 = v8 + (v9 >> 1);
      if (__OFADD__(v8, v9 >> 1)) {
        break;
      }
      if (v11 >= v7) {
        goto LABEL_16;
      }
      v9 += ~v10;
      if (*(double *)(a2 + 32 + 16 * v11) < a4) {
        uint64_t v8 = v11 + 1;
      }
      else {
        unint64_t v9 = v10;
      }
      if ((uint64_t)v9 <= 0) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t result = (uint64_t)sub_21F93546C(v4);
    uint64_t v4 = result;
    if ((a1 & 0x8000000000000000) != 0) {
      goto LABEL_18;
    }
    goto LABEL_13;
  }
  uint64_t v8 = 0;
LABEL_11:
  uint64_t v4 = *a3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v4;
  if ((result & 1) == 0) {
    goto LABEL_17;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_13:
  if (*(void *)(v4 + 16) > a1)
  {
    uint64_t v13 = v4 + 16 * a1;
    *(void *)(v13 + 32) = v8;
    *(unsigned char *)(v13 + 40) = 0;
    *a3 = v4;
    return v8 < (uint64_t)v7;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_21F94F7C8(unint64_t a1, uint64_t a2, uint64_t *a3, double a4, double a5)
{
  unint64_t v8 = *(void *)(a2 + 16);
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 16);
    uint64_t v10 = v9;
    while (1)
    {
      unint64_t v11 = (unint64_t)v9 >> 1;
      unint64_t v12 = ~((unint64_t)v9 >> 1);
      if (v10 + v12 >= v8) {
        break;
      }
      v9 += v12;
      if (*(double *)(a2 + 32 + 16 * (v10 + v12)) > a5) {
        v10 += v12;
      }
      else {
        uint64_t v9 = v11;
      }
      if (v9 <= 0) {
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v10 = 0;
LABEL_10:
  uint64_t v5 = *a3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v5;
  if ((result & 1) == 0)
  {
LABEL_17:
    uint64_t result = (uint64_t)sub_21F93546C(v5);
    uint64_t v5 = result;
    if ((a1 & 0x8000000000000000) != 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_12:
  if (*(void *)(v5 + 16) <= a1)
  {
LABEL_19:
    __break(1u);
    return result;
  }
  uint64_t result = v10 > 0;
  uint64_t v14 = v10 - 1;
  if (v10 < 1) {
    uint64_t v14 = 0;
  }
  uint64_t v15 = v5 + 16 * a1;
  *(void *)(v15 + 32) = v14;
  *(unsigned char *)(v15 + 40) = v10 < 1;
  *a3 = v5;
  return result;
}

uint64_t FunctionSampler.deinit()
{
  swift_release();
  sub_21F76CA84(v0 + 32, &qword_267EE9320);
  return v0;
}

uint64_t FunctionSampler.__deallocating_deinit()
{
  swift_release();
  sub_21F76CA84(v0 + 32, &qword_267EE9320);

  return swift_deallocClassInstance();
}

uint64_t sub_21F94F920(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_21FA259F0();
  MEMORY[0x270FA5388](v6);
  *(void *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  swift_unownedRetainStrong();
  swift_unownedRetain();
  swift_unownedRetain();
  swift_retain();
  swift_unownedRelease();
  swift_unownedRetain();
  swift_release();
  unint64_t v7 = (void *)swift_allocObject();
  v7[2] = a1;
  v7[3] = a2;
  _OWORD v7[4] = v2;
  aBlock[4] = sub_21F951038;
  aBlock[5] = v7;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_21F94FB74;
  aBlock[3] = &unk_26D13BC88;
  _Block_copy(aBlock);
  sub_21F95105C();
  sub_21F76CA40(&qword_267EE9340);
  sub_21F9510B4();
  sub_21FA26410();
  sub_21FA25A60();
  swift_allocObject();
  uint64_t v8 = sub_21FA25A40();
  swift_release();
  swift_unownedRelease();
  swift_release();
  *(void *)(v3 + 16) = v8;
  swift_release();
  return v3;
}

uint64_t sub_21F94FB00(uint64_t (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1();
  swift_unownedRetainStrong();
  os_unfair_lock_lock((os_unfair_lock_t)(a3 + 24));
  swift_bridgeObjectRelease();
  *(void *)(a3 + 32) = v4;
  os_unfair_lock_unlock((os_unfair_lock_t)(a3 + 24));

  return swift_release();
}

uint64_t sub_21F94FB74(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_21F94FBB8()
{
  swift_release();
  sub_21F76CA84(v0 + 24, &qword_267EE9328);

  return swift_deallocClassInstance();
}

unint64_t sub_21F94FC00(unint64_t result, int64_t a2, __n128 a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  unint64_t v5 = *v3;
  int64_t v6 = *(void *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v7 = result;
  unint64_t v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (!result || v10 > *(void *)(v5 + 24) >> 1)
  {
    if (v6 <= v10) {
      int64_t v11 = v6 + v9;
    }
    else {
      int64_t v11 = v6;
    }
    uint64_t result = (unint64_t)sub_21F7E86D8((char *)result, v11, 1, (char *)v5);
    unint64_t v5 = result;
  }
  unint64_t v12 = (__n128 *)(v5 + 32 + 16 * v7);
  if (!v9) {
    goto LABEL_19;
  }
  uint64_t v13 = *(void *)(v5 + 16);
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_25;
  }
  uint64_t result = (unint64_t)v12[1].n128_u64;
  unint64_t v16 = (__n128 *)(v5 + 32 + 16 * a2);
  if (&v12[1] != v16 || result >= (unint64_t)v16[v15].n128_u64) {
    uint64_t result = (unint64_t)memmove((void *)result, v16, 16 * v15);
  }
  uint64_t v17 = *(void *)(v5 + 16);
  BOOL v14 = __OFADD__(v17, v9);
  uint64_t v18 = v17 + v9;
  if (!v14)
  {
    *(void *)(v5 + 16) = v18;
LABEL_19:
    *unint64_t v12 = a3;
    *uint64_t v3 = v5;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_21F94FD1C()
{
  return sub_21FA26A30();
}

void sub_21F94FD68(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, long double a4@<D2>, double a5@<D3>)
{
  if (a2 >= a3) {
    double v10 = a2;
  }
  else {
    double v10 = a3;
  }
  if (a2 >= a3) {
    double v11 = a3;
  }
  else {
    double v11 = a2;
  }
  double v12 = log(v10 - v11);
  long double v13 = log(a4);
  double v14 = pow(a4, ceil(v12 / v13)) / a5;
  double v15 = v14 * -0.501129335;
  double v16 = floor((v11 - v14 * -0.501129335) / v14);
  if (v16 <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 >= 9.22337204e18)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if ((*(void *)&v16 & 0x7FF0000000000000) == 0x7FF0000000000000) {
    goto LABEL_18;
  }
  double v17 = ceil((v10 - (v15 + v14 * (double)(uint64_t)v16)) / v14);
  if ((*(void *)&v17 & 0x7FF0000000000000) == 0x7FF0000000000000) {
    goto LABEL_18;
  }
  if (v17 <= -9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v17 >= 9.22337204e18)
  {
LABEL_20:
    __break(1u);
    return;
  }
  uint64_t v18 = (uint64_t)v17;
  if ((uint64_t)v17 <= 1) {
    uint64_t v18 = 1;
  }
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(long double *)(a1 + 16) = a4;
  *(double *)(a1 + 24) = a5;
  *(double *)(a1 + 32) = v15;
  *(double *)(a1 + 40) = v14;
  *(void *)(a1 + 48) = (uint64_t)v16;
  *(void *)(a1 + 56) = v18;
}

uint64_t sub_21F94FEC0(uint64_t result, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, char a10)
{
  uint64_t v11 = *(void *)(result + 56);
  if (!v11) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v16 = 0;
  uint64_t v17 = *(void *)(result + 48);
  double v19 = *(double *)(result + 32);
  double v18 = *(double *)(result + 40);
  int64_t v20 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v21 = v16 + v17;
    if (__OFADD__(v16, v17)) {
      break;
    }
    if ((v17 ^ 0x7FFFFFFFFFFFFFFFLL) == v16) {
      goto LABEL_27;
    }
    if (v19 + v18 * (double)v21 > v19 + v18 * (double)(v21 + 1)) {
      goto LABEL_28;
    }
    if ((v11 & ~(v11 >> 63)) == v16) {
      goto LABEL_29;
    }
    v34[0] = v19 + v18 * (double)v21;
    v34[1] = v19 + v18 * (double)(v21 + 1);
    uint64_t result = sub_21F94F3C4(v34, *(double *)&a7, a8, *(double *)&a9, a10, &v35, a2, a3, a4, a5);
    if (v10)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v20;
    }
    uint64_t v22 = v35;
    uint64_t v23 = *(void *)(v35 + 16);
    int64_t v24 = v20[2];
    int64_t v25 = v24 + v23;
    if (__OFADD__(v24, v23)) {
      goto LABEL_30;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0 && v25 <= v20[3] >> 1)
    {
      if (*(void *)(v22 + 16)) {
        goto LABEL_19;
      }
    }
    else
    {
      if (v24 <= v25) {
        int64_t v26 = v24 + v23;
      }
      else {
        int64_t v26 = v24;
      }
      uint64_t result = (uint64_t)sub_21F7E87D4((void *)result, v26, 1, v20);
      int64_t v20 = (void *)result;
      if (*(void *)(v22 + 16))
      {
LABEL_19:
        if ((v20[3] >> 1) - v20[2] < v23) {
          goto LABEL_32;
        }
        sub_21F76CA40(&qword_267EE6FF0);
        uint64_t result = swift_arrayInitWithCopy();
        if (v23)
        {
          uint64_t v27 = v20[2];
          BOOL v28 = __OFADD__(v27, v23);
          uint64_t v29 = v27 + v23;
          if (v28) {
            goto LABEL_33;
          }
          v20[2] = v29;
        }
        goto LABEL_4;
      }
    }
    if (v23) {
      goto LABEL_31;
    }
LABEL_4:
    ++v16;
    uint64_t result = swift_bridgeObjectRelease();
    if (v11 == v16) {
      return (uint64_t)v20;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

void sub_21F9500F0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int64_t v3 = a3 >> 1;
  uint64_t v4 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2)) {
    goto LABEL_13;
  }
  if (!v4)
  {
    int64_t v6 = (void *)MEMORY[0x263F8EE78];
    if (v3 >= a2) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
  sub_21F76CA40(&qword_267EE6FE8);
  int64_t v6 = (void *)swift_allocObject();
  int64_t v7 = j__malloc_size(v6);
  uint64_t v8 = v7 - 32;
  if (v7 < 32) {
    uint64_t v8 = v7 - 25;
  }
  v6[2] = v4;
  void v6[3] = 2 * (v8 >> 3);
  if (v3 < a2)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_6:
  sub_21F76CA40(&qword_267EE6FF0);
  swift_arrayInitWithCopy();
  if (__OFSUB__(0, a2))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v9 = v6[2];
  BOOL v10 = __OFADD__(a2, v9);
  uint64_t v11 = a2 + v9;
  if (v10)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v11 < a2)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v11 < 0) {
LABEL_17:
  }
    __break(1u);
}

unint64_t sub_21F9501FC(unint64_t result, int64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v6 = result;
  unint64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  unint64_t v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *(void *)(v4 + 24) >> 1)
  {
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v10 = v5 + v8;
    }
    else {
      int64_t v10 = v5;
    }
    uint64_t result = (unint64_t)sub_21F7E86D8((char *)result, v10, 1, (char *)v4);
    unint64_t v4 = result;
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = *(void *)(v4 + 16);
  BOOL v12 = __OFSUB__(v11, a2);
  uint64_t v13 = v11 - a2;
  if (v12) {
    goto LABEL_26;
  }
  uint64_t result = v4 + 32 + 16 * v6;
  double v14 = (const void *)(v4 + 32 + 16 * a2);
  if (v6 != a2 || result >= (unint64_t)v14 + 16 * v13) {
    uint64_t result = (unint64_t)memmove((void *)result, v14, 16 * v13);
  }
  uint64_t v15 = *(void *)(v4 + 16);
  BOOL v12 = __OFADD__(v15, v8);
  uint64_t v16 = v15 + v8;
  if (!v12)
  {
    *(void *)(v4 + 16) = v16;
LABEL_20:
    unint64_t *v2 = v4;
    return result;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_21F950304(uint64_t a1, double a2, double a3)
{
  uint64_t v5 = a1;
  int64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    if (*(void *)(v7 + 16) && *(double *)(v7 + 32) > a3) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v8 = *(void *)(a1 + 32 + 8 * v6 - 8);
    uint64_t v9 = *(void *)(v8 + 16);
    if (v9)
    {
      if (*(double *)(v8 + 16 * v9 + 16) < a2) {
        return MEMORY[0x263F8EE78];
      }
    }
    sub_21F76CA40(qword_267EE9350);
    uint64_t v10 = sub_21FA25ED0();
    *(void *)(v10 + 16) = v6;
    uint64_t v11 = 32;
    int64_t v12 = v6;
    do
    {
      uint64_t v13 = v10 + v11;
      *(void *)uint64_t v13 = 0;
      *(unsigned char *)(v13 + 8) = 1;
      v11 += 16;
      --v12;
    }
    while (v12);
    uint64_t v110 = v10;
    sub_21F76CA40(qword_267EE9350);
    uint64_t v14 = sub_21FA25ED0();
    *(void *)(v14 + 16) = v6;
    uint64_t v15 = 32;
    int64_t v16 = v6;
    do
    {
      uint64_t v17 = v14 + v15;
      *(void *)uint64_t v17 = 0;
      *(unsigned char *)(v17 + 8) = 1;
      v15 += 16;
      --v16;
    }
    while (v16);
  }
  else
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    uint64_t v110 = MEMORY[0x263F8EE78];
  }
  uint64_t v109 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = swift_bridgeObjectRetain();
  unint64_t v19 = sub_21F898F00(v18, sub_21F951110);
  uint64_t v20 = swift_bridgeObjectRelease();
  if ((uint64_t)v19 >= v6) {
    goto LABEL_28;
  }
  if ((v19 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_114;
  }
  uint64_t v21 = v5 + 32;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = swift_bridgeObjectRetain();
  uint64_t v23 = sub_21F898FD0(v22, v5 + 32, v19, (2 * v6) | 1, (uint64_t (*)(uint64_t, uint64_t))sub_21F95111C);
  char v25 = v24;
  swift_bridgeObjectRelease();
  if (v25)
  {
LABEL_28:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  if (v23 < (uint64_t)v19)
  {
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }
  uint64_t v26 = v23 + 1;
  if (__OFADD__(v23, 1))
  {
LABEL_115:
    __break(1u);
    goto LABEL_116;
  }
  if (v6 < v26)
  {
LABEL_116:
    __break(1u);
    goto LABEL_117;
  }
  if (v26 < 0)
  {
LABEL_117:
    __break(1u);
    goto LABEL_118;
  }
  if (v19 >= *(void *)(v110 + 16))
  {
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
    goto LABEL_120;
  }
  unint64_t v27 = v110 + 16 * v19;
  if (*(unsigned char *)(v27 + 40)) {
    int64_t v28 = 0;
  }
  else {
    int64_t v28 = *(void *)(v27 + 32);
  }
  if (v23 >= *(void *)(v109 + 16)) {
    goto LABEL_119;
  }
  uint64_t v29 = v109 + 16 * v23;
  if (*(unsigned char *)(v29 + 40) == 1)
  {
    if (v23 >= v26)
    {
LABEL_125:
      __break(1u);
      goto LABEL_126;
    }
    uint64_t v30 = *(void *)(*(void *)(v21 + 8 * v23) + 16) - 1;
    if (!v28) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v30 = *(void *)(v29 + 32);
    if (!v28)
    {
LABEL_27:
      double v31 = 0.0;
      double v32 = 0.0;
      goto LABEL_37;
    }
  }
  unint64_t v35 = v28 - 1;
  if (__OFSUB__(v28, 1))
  {
LABEL_121:
    __break(1u);
    goto LABEL_122;
  }
  if (v19 >= v26)
  {
LABEL_122:
    __break(1u);
    goto LABEL_123;
  }
  if ((v35 & 0x8000000000000000) != 0)
  {
LABEL_123:
    __break(1u);
    goto LABEL_124;
  }
  uint64_t v36 = *(void *)(v21 + 8 * v19);
  if (v35 >= *(void *)(v36 + 16))
  {
LABEL_124:
    __break(1u);
    goto LABEL_125;
  }
  uint64_t v37 = v36 + 16 * v35;
  double v31 = *(double *)(v37 + 32);
  double v32 = *(double *)(v37 + 40);
LABEL_37:
  if (v23 >= v26)
  {
LABEL_120:
    __break(1u);
    goto LABEL_121;
  }
  uint64_t v38 = *(void *)(v21 + 8 * v23);
  unint64_t v39 = *(void *)(v38 + 16);
  unint64_t v40 = v39 - 1;
  if (v30 != v39 - 1)
  {
    unint64_t v43 = v30 + 1;
    if (!__OFADD__(v30, 1))
    {
      if ((v43 & 0x8000000000000000) == 0)
      {
        if (v43 < v39)
        {
          uint64_t v44 = v38 + 16 * v43;
          double v41 = *(double *)(v44 + 32);
          double v42 = *(double *)(v44 + 40);
          if (v19 != v23) {
            goto LABEL_48;
          }
LABEL_45:
          if (v30 >= v28) {
            goto LABEL_48;
          }
          if (qword_26AD49C10 == -1) {
            goto LABEL_28;
          }
          goto LABEL_129;
        }
LABEL_128:
        __break(1u);
LABEL_129:
        swift_once();
        goto LABEL_28;
      }
LABEL_127:
      __break(1u);
      goto LABEL_128;
    }
LABEL_126:
    __break(1u);
    goto LABEL_127;
  }
  double v41 = 0.0;
  double v42 = 0.0;
  if (v19 == v23) {
    goto LABEL_45;
  }
LABEL_48:
  double v105 = v41;
  double v106 = v31;
  unint64_t v104 = v40;
  float64_t v102 = v42;
  unint64_t v45 = (2 * v26) | 1;
  swift_bridgeObjectRetain();
  float64_t v103 = v32;
  if (swift_isUniquelyReferenced_nonNull())
  {
    uint64_t v46 = v19;
  }
  else
  {
    sub_21F9500F0(v5 + 32, v19, v45);
    uint64_t v48 = v47;
    uint64_t v21 = v49;
    uint64_t v46 = v50;
    unint64_t v45 = v51;
    swift_unknownObjectRelease();
    uint64_t v5 = v48;
  }
  if (v23 < v46 || (v107.n128_u64[0] = v45 >> 1, v23 >= (uint64_t)(v45 >> 1)))
  {
    __break(1u);
    goto LABEL_131;
  }
  int64_t v52 = v30 + 1;
  if (__OFADD__(v30, 1))
  {
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
    goto LABEL_133;
  }
  int64_t v53 = v46;
  int64_t v54 = *(void *)(*(void *)(v21 + 8 * v23) + 16);
  if (v52 < v54) {
    sub_21F9501FC(v52, v54);
  }
  if (v45)
  {
    unint64_t v61 = v45;
  }
  else
  {
    sub_21F9500F0(v21, v46, v45);
    uint64_t v56 = v55;
    uint64_t v21 = v57;
    int64_t v53 = v58;
    unint64_t v60 = v59;
    swift_unknownObjectRelease();
    unint64_t v61 = v60;
    v107.n128_u64[0] = v60 >> 1;
    uint64_t v5 = v56;
  }
  unint64_t v45 = v53;
  BOOL v62 = (uint64_t)v19 < v53;
  int64_t v63 = v107.n128_u64[0];
  if (v62 || v19 >= v107.n128_u64[0]) {
    goto LABEL_132;
  }
  if (v28 < 0)
  {
LABEL_133:
    __break(1u);
    goto LABEL_134;
  }
  uint64_t v64 = (char *)(v21 + 8 * v19);
  sub_21F9501FC(0, v28);
  if (!*(void *)(*(void *)v64 + 16))
  {
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
    goto LABEL_136;
  }
  float64_t v65 = v106;
  if (v28)
  {
    float64x2_t v66 = *(float64x2_t *)(*(void *)v64 + 32);
    if (v66.f64[0] != v106)
    {
      double v81 = vabdd_f64(v66.f64[0], v106);
      int64_t v28 = v45;
      if (qword_26AD46270 != -1)
      {
        double v101 = v81;
        float64x2_t v100 = *(float64x2_t *)(*(void *)v64 + 32);
        swift_once();
        float64x2_t v66 = v100;
        float64_t v65 = v106;
        double v81 = v101;
      }
      unint64_t v45 = v61;
      if (*(double *)&qword_26AD52218 >= v81)
      {
        double v67 = v105;
        if ((v45 & 1) == 0)
        {
          sub_21F9500F0(v21, v28, v45);
          uint64_t v64 = v88;
          uint64_t v21 = v89;
          int64_t v28 = v90;
          unint64_t v45 = v91;
          swift_unknownObjectRelease();
          v107.n128_u64[0] = v45 >> 1;
          uint64_t v5 = (uint64_t)v64;
        }
        if ((uint64_t)v19 >= v28 && v19 < v107.n128_u64[0])
        {
          int64_t v63 = v28;
          int64_t v28 = 8 * v19;
          uint64_t v64 = *(char **)(v21 + 8 * v19);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v21 + 8 * v19) = v64;
          if (isUniquelyReferenced_nonNull_native)
          {
            if (!*((void *)v64 + 2))
            {
LABEL_142:
              __break(1u);
              goto LABEL_143;
            }
LABEL_96:
            int64_t v28 = v63;
            *((double *)v64 + 4) = a2;
            int64_t v63 = v107.n128_u64[0];
            goto LABEL_66;
          }
LABEL_141:
          uint64_t v64 = sub_21F935304((uint64_t)v64);
          *(void *)(v21 + 8 * v19) = v64;
          if (!*((void *)v64 + 2)) {
            goto LABEL_142;
          }
          goto LABEL_96;
        }
      }
      else
      {
        v82.f64[0] = v65;
        v82.f64[1] = v103;
        v83.n128_f64[0] = sub_21F9A4EC8(a2, v66, v82);
        double v67 = v105;
        if ((v45 & 1) == 0)
        {
          __n128 v107 = v83;
          sub_21F9500F0(v21, v28, v45);
          uint64_t v64 = v84;
          uint64_t v21 = v85;
          int64_t v28 = v86;
          unint64_t v45 = v87;
          swift_unknownObjectRelease();
          __n128 v83 = v107;
          int64_t v63 = v45 >> 1;
          uint64_t v5 = (uint64_t)v64;
        }
        if ((uint64_t)v19 >= v28 && v19 < v63)
        {
          uint64_t v64 = (char *)(v21 + 8 * v19);
          sub_21F94FC00(0, 0, v83);
          goto LABEL_66;
        }
        __break(1u);
      }
      __break(1u);
      goto LABEL_141;
    }
  }
  int64_t v28 = v45;
  unint64_t v45 = v61;
  double v67 = v105;
LABEL_66:
  if (v23 < v28 || v23 >= v63) {
    goto LABEL_135;
  }
  uint64_t v68 = *(void *)(v21 + 8 * v23);
  unint64_t v69 = *(void *)(v68 + 16);
  if (!v69)
  {
LABEL_136:
    __break(1u);
    goto LABEL_137;
  }
  if (v30 == v104) {
    goto LABEL_104;
  }
  float64x2_t v70 = *(float64x2_t *)(v68 + 16 * (v69 - 1) + 32);
  if (v70.f64[0] == v67) {
    goto LABEL_104;
  }
  double v71 = vabdd_f64(v67, v70.f64[0]);
  if (qword_26AD46270 != -1)
  {
    float64x2_t v108 = *(float64x2_t *)(v68 + 16 * (v69 - 1) + 32);
    swift_once();
    float64x2_t v70 = v108;
  }
  if (*(double *)&qword_26AD52218 < v71)
  {
    v72.f64[0] = v67;
    v72.f64[1] = v102;
    v73.n128_f64[0] = sub_21F9A4EC8(a3, v72, v70);
    __n128 v107 = v73;
    if ((v45 & 1) == 0)
    {
      sub_21F9500F0(v21, v28, v45);
      uint64_t v64 = v74;
      uint64_t v21 = v75;
      int64_t v28 = v76;
      unint64_t v45 = v77;
      swift_unknownObjectRelease();
      int64_t v63 = v45 >> 1;
      uint64_t v5 = (uint64_t)v64;
    }
    if (v23 >= v28 && v23 < v63)
    {
      uint64_t v64 = *(char **)(v21 + 8 * v23);
      char v78 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v21 + 8 * v23) = v64;
      if (v78)
      {
LABEL_79:
        unint64_t v80 = *((void *)v64 + 2);
        unint64_t v79 = *((void *)v64 + 3);
        if (v80 >= v79 >> 1)
        {
          uint64_t v64 = sub_21F7E86D8((char *)(v79 > 1), v80 + 1, 1, v64);
          *(void *)(v21 + 8 * v23) = v64;
        }
        *((void *)v64 + 2) = v80 + 1;
        *(__n128 *)&v64[16 * v80 + 32] = v107;
LABEL_104:
        if ((v45 & 1) == 0)
        {
LABEL_105:
          sub_21F987B68(v5, v21, v28, v45);
          uint64_t v33 = v97;
          swift_bridgeObjectRelease();
LABEL_112:
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          return v33;
        }
        sub_21FA268F0();
        swift_unknownObjectRetain_n();
        uint64_t v98 = swift_dynamicCastClass();
        if (!v98)
        {
          swift_unknownObjectRelease();
          uint64_t v98 = MEMORY[0x263F8EE78];
        }
        uint64_t v99 = *(void *)(v98 + 16);
        swift_release();
        if (!__OFSUB__(v45 >> 1, v28))
        {
          if (v99 == (v45 >> 1) - v28)
          {
            uint64_t v33 = swift_dynamicCastClass();
            swift_bridgeObjectRelease();
            if (!v33)
            {
              swift_unknownObjectRelease();
              uint64_t v33 = MEMORY[0x263F8EE78];
            }
            goto LABEL_112;
          }
          goto LABEL_138;
        }
LABEL_137:
        __break(1u);
LABEL_138:
        swift_unknownObjectRelease();
        goto LABEL_105;
      }
LABEL_144:
      uint64_t v64 = sub_21F7E86D8(0, *((void *)v64 + 2) + 1, 1, v64);
      *(void *)(v21 + 8 * v23) = v64;
      goto LABEL_79;
    }
LABEL_143:
    __break(1u);
    goto LABEL_144;
  }
  if ((v45 & 1) == 0)
  {
    sub_21F9500F0(v21, v28, v45);
    uint64_t v64 = v93;
    uint64_t v21 = v94;
    int64_t v28 = v95;
    unint64_t v45 = v96;
    swift_unknownObjectRelease();
    int64_t v63 = v45 >> 1;
    uint64_t v5 = (uint64_t)v64;
  }
  if (v23 < v28 || v23 >= v63)
  {
    __break(1u);
  }
  else
  {
    uint64_t v64 = *(char **)(v21 + 8 * v23);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v21 + 8 * v23) = v64;
    if (result) {
      goto LABEL_102;
    }
  }
  uint64_t result = (uint64_t)sub_21F935304((uint64_t)v64);
  uint64_t v64 = (char *)result;
  *(void *)(v21 + 8 * v23) = result;
LABEL_102:
  if (v69 <= *((void *)v64 + 2))
  {
    *(double *)&v64[16 * v69 + 16] = a3;
    goto LABEL_104;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F950C74(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 80) = 0;
  *(void *)(v2 + 88) = 0;
  *(unsigned char *)(v2 + 96) = 1;
  *(void *)(v2 + 104) = 0;
  *(void *)(v2 + 112) = 0;
  *(unsigned char *)(v2 + 120) = 1;
  *(void *)(v2 + 144) = 0;
  *(unsigned char *)(v2 + 152) = 1;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  uint64_t v3 = MEMORY[0x263F8EE78];
  unint64_t v4 = sub_21F937054(MEMORY[0x263F8EE78]);
  *(_DWORD *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 100;
  *(void *)(v2 + 48) = v3;
  *(void *)(v2 + 56) = -1;
  *(void *)(v2 + 64) = -1;
  *(void *)(v2 + 72) = v4;
  *(_OWORD *)(v2 + 128) = xmmword_21FA2F7B0;
  swift_retain();
  return v2;
}

uint64_t sub_21F950CFC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  char v5 = *(unsigned char *)(v3 + 152);
  *(void *)a2 = *(void *)(v3 + 144);
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_21F950D4C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = *a2;
  uint64_t result = swift_beginAccess();
  *(void *)(v4 + 144) = v2;
  *(unsigned char *)(v4 + 152) = v3;
  *(void *)(v4 + 104) = 0;
  *(void *)(v4 + 112) = 0;
  *(unsigned char *)(v4 + 120) = 1;
  return result;
}

uint64_t type metadata accessor for FunctionSampler()
{
  return self;
}

uint64_t method lookup function for FunctionSampler(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for FunctionSampler);
}

uint64_t dispatch thunk of FunctionSampler.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of FunctionSampler.defaultDomainAspectRatio.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of FunctionSampler.defaultDomainAspectRatio.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 200))(a1, a2 & 1);
}

uint64_t dispatch thunk of FunctionSampler.defaultDomainAspectRatio.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of FunctionSampler.defaultXDomain.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of FunctionSampler.defaultYDomain.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of FunctionSampler.bounds(xDomain:yDomain:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of FunctionSampler.presample(xDomain:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t sub_21F950F1C()
{
  if (MEMORY[0x263F8EEE0]) {
    return sub_21F76CA40(&qword_267EE9320);
  }
  else {
    return MEMORY[0x263F8EE60] + 8;
  }
}

uint64_t type metadata accessor for SamplingTask()
{
  return self;
}

uint64_t sub_21F950F68()
{
  if (MEMORY[0x263F8EEE0]) {
    return sub_21F76CA40(&qword_267EE9328);
  }
  else {
    return MEMORY[0x263F8EE60] + 8;
  }
}

ValueMetadata *type metadata accessor for FunctionSampler.CacheKey()
{
  return &type metadata for FunctionSampler.CacheKey;
}

unint64_t sub_21F950FA4()
{
  unint64_t result = qword_267EE9330;
  if (!qword_267EE9330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE9330);
  }
  return result;
}

uint64_t sub_21F950FF8()
{
  swift_release();
  swift_unownedRelease();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_21F951038()
{
  return sub_21F94FB00(*(uint64_t (**)(void))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_21F951044(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_21F951054()
{
  return swift_release();
}

unint64_t sub_21F95105C()
{
  unint64_t result = qword_267EE9338;
  if (!qword_267EE9338)
  {
    sub_21FA259F0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE9338);
  }
  return result;
}

unint64_t sub_21F9510B4()
{
  unint64_t result = qword_267EE9348;
  if (!qword_267EE9348)
  {
    sub_21F779EA4(&qword_267EE9340);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE9348);
  }
  return result;
}

uint64_t sub_21F951110(unint64_t a1, uint64_t a2)
{
  return sub_21F94F6E4(a1, a2, *(uint64_t **)(v2 + 32), *(double *)(v2 + 16));
}

uint64_t sub_21F95111C(unint64_t a1, uint64_t a2)
{
  return sub_21F94F7C8(a1, a2, *(uint64_t **)(v2 + 32), *(double *)(v2 + 16), *(double *)(v2 + 24));
}

void sub_21F951128(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>, double a8@<D4>, double a9@<D5>, double a10@<D6>, double a11@<D7>, double a12, uint64_t a13, uint64_t a14)
{
  double v114 = a11;
  double v115 = a9;
  uint64_t v23 = sub_21FA24C90();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)v97 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v27 = vabdd_f64(a7, a6);
  if (v27 + 2.22044605e-16 >= 6.28318531)
  {
    sub_21F951D94((uint64_t)&v122, a4);
    goto LABEL_89;
  }
  double v108 = a10;
  double v111 = a7;
  if (a4 < 0.0) {
    double v28 = 0.0;
  }
  else {
    double v28 = a4;
  }
  if (v28 < a5) {
    double v29 = a5;
  }
  else {
    double v29 = v28;
  }
  double v30 = fmax(v29 * 0.1 * 0.5, 1.0);
  if (v30 >= 0.0)
  {
    double v110 = a6;
    uint64_t v106 = a14;
    uint64_t v113 = a13;
    double v107 = a12;
    if (a8 > 0.0) {
      double v31 = a8;
    }
    else {
      double v31 = 0.0;
    }
    if (v30 >= v31) {
      double v32 = v31;
    }
    else {
      double v32 = v30;
    }
    if (v27 <= 3.14159265) {
      double v33 = v27;
    }
    else {
      double v33 = 3.14159265;
    }
    double v116 = v27;
    double v112 = v29 * 0.1;
    double v34 = sin(v33 * 0.5);
    double v35 = v32 / v34 - v28;
    if (v35 < 0.0) {
      double v35 = 0.0;
    }
    double v109 = v28;
    double v105 = v35;
    double v36 = v28 + v35;
    if (v36 >= v29) {
      double v37 = v29;
    }
    else {
      double v37 = v36;
    }
    double v38 = v29;
    double v39 = (v29 + v37) * 0.5;
    double v40 = asin(v32 / v37);
    double v41 = v116 * 0.5;
    if (v116 * 0.5 < v40) {
      double v40 = v116 * 0.5;
    }
    if (v40 < 0.0) {
      double v40 = 0.0;
    }
    double v104 = v40;
    double v101 = v39;
    long double v42 = v32 / v39;
    double v43 = v38;
    double v44 = asin(v42);
    if (v41 < v44) {
      double v44 = v41;
    }
    if (v44 < 0.0) {
      double v44 = 0.0;
    }
    double v100 = v44;
    double v45 = (v38 + v38) * v34;
    double v46 = (v38 - v37) * 0.5;
    if (v46 >= v112) {
      double v46 = v112;
    }
    double v112 = v32;
    if (v38 * v34 - v32 * (v38 * v33 / v45) >= v46) {
      double v47 = v46;
    }
    else {
      double v47 = v38 * v34 - v32 * (v38 * v33 / v45);
    }
    double v102 = 3.14159265;
    if (v116 >= 3.14159265)
    {
      if (v38 * 0.5 >= v47) {
        double v52 = v47;
      }
      else {
        double v52 = v38 * 0.5;
      }
    }
    else
    {
      long double v48 = sin(v41);
      double v49 = v48 * (v38 - v105) / (v48 + 1.0);
      if (v49 >= v47) {
        double v50 = v47;
      }
      else {
        double v50 = v49;
      }
      long double v51 = sin(v41 - v104);
      double v52 = v50;
      double v53 = v37 * v51 / (v51 + 1.0);
      if (v53 < v47) {
        double v47 = v53;
      }
    }
    double v54 = v37;
    double v55 = v43;
    double v56 = v109;
    if (v109 >= v47) {
      double v57 = v47;
    }
    else {
      double v57 = v109;
    }
    double v58 = v115;
    if (v115 <= 0.0) {
      double v58 = 0.0;
    }
    if (v57 >= v58) {
      double v59 = v58;
    }
    else {
      double v59 = v57;
    }
    double v60 = v108;
    if (v108 <= 0.0) {
      double v60 = 0.0;
    }
    if (v57 < v60) {
      double v60 = v57;
    }
    double v61 = v107;
    if (v107 <= 0.0) {
      double v61 = 0.0;
    }
    if (v52 >= v61) {
      double v62 = v61;
    }
    else {
      double v62 = v52;
    }
    double v107 = v62;
    double v63 = v114;
    if (v114 <= 0.0) {
      double v63 = 0.0;
    }
    v97[1] = v52;
    if (v52 >= v63) {
      double v64 = v63;
    }
    else {
      double v64 = v52;
    }
    double v114 = v60;
    if (v59 > v60) {
      double v65 = v59;
    }
    else {
      double v65 = v60;
    }
    double v103 = v54;
    double v66 = v112;
    double v67 = asin(v112 / (v54 + v65));
    if (v67 <= 0.0) {
      double v67 = 0.0;
    }
    if (v41 < v67) {
      double v67 = v41;
    }
    double v98 = v67;
    if (v62 > v64) {
      double v68 = v62;
    }
    else {
      double v68 = v64;
    }
    double v105 = v55;
    double v69 = asin(v66 / (v55 - v68));
    if (v69 <= 0.0) {
      double v69 = 0.0;
    }
    if (v41 >= v69) {
      double v70 = v69;
    }
    else {
      double v70 = v41;
    }
    double v99 = v64;
    if (v64 != 0.0 || v114 != 0.0 || v107 != 0.0 || v59 != 0.0)
    {
      double v112 = v59;
      v97[0] = v41;
      sub_21FA25270();
      (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v26, a1, v23);
      int v76 = (*(uint64_t (**)(char *, uint64_t))(v24 + 88))(v26, v23);
      if (v76 != *MEMORY[0x263F19868] && v76 != *MEMORY[0x263F19860]) {
        (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
      }
      double v77 = v110;
      double v78 = v102;
      double v100 = (v100 + v110) * 180.0 / v102;
      __sincos_stret(v100 * 0.0174532925);
      double v79 = v101;
      sub_21FA251D0();
      double v80 = v111;
      if (v77 >= v111) {
        double v81 = -1.0;
      }
      else {
        double v81 = 1.0;
      }
      double v82 = (v70 + v77) * 180.0 / v78;
      double v83 = v105;
      double v84 = v79;
      double v85 = v78;
      double v86 = sub_21F951E9C(0, v82, v105, v100, v84, v107, 1.0, v81);
      double v89 = sub_21F951E9C(1, (v80 - v70) * 180.0 / v78, v83, v86, v87, v99, 1.0, v81);
      double v90 = v112;
      if (v112 > 0.0 || v114 > 0.0)
      {
        double v93 = v98;
        double v94 = v103;
        double v95 = sub_21F951E9C(0, (v111 - v98) * 180.0 / v85, v103, v89, v88, v114, -1.0, v81);
        sub_21F951E9C(1, (v93 + v110) * 180.0 / v85, v94, v95, v96, v90, -1.0, v81);
      }
      else if (v116 < v78 && v109 == 0.0 && (a2 & 1) != 0)
      {
        double v91 = v110;
        double v92 = v111;
        tan(v97[0]);
        __sincos_stret((v91 + v92) * 0.5);
        uint64_t v122 = 0x3FF0000000000000;
        uint64_t v123 = 0;
        uint64_t v124 = 0;
        uint64_t v125 = 0x3FF0000000000000;
        uint64_t v126 = 0;
        uint64_t v127 = 0;
        sub_21FA251F0();
      }
      else if (v103 <= 2.22044605e-16)
      {
        sub_21FA25200();
      }
      else
      {
        uint64_t v122 = 0x3FF0000000000000;
        uint64_t v123 = 0;
        uint64_t v124 = 0;
        uint64_t v125 = 0x3FF0000000000000;
        uint64_t v126 = 0;
        uint64_t v127 = 0;
        sub_21FA251F0();
      }
      sub_21FA251B0();
      uint64_t v71 = v117;
      uint64_t v72 = v118;
      uint64_t v73 = v119;
      uint64_t v74 = v120;
      char v75 = v121;
      goto LABEL_104;
    }
    sub_21F951BE0((uint64_t)&v122, v56, v105, v110, v111, v112);
LABEL_89:
    uint64_t v71 = v122;
    uint64_t v72 = v123;
    uint64_t v73 = v124;
    uint64_t v74 = v125;
    char v75 = v126;
LABEL_104:
    *(void *)a3 = v71;
    *(void *)(a3 + 8) = v72;
    *(void *)(a3 + 16) = v73;
    *(void *)(a3 + 24) = v74;
    *(unsigned char *)(a3 + 32) = v75;
    return;
  }
  __break(1u);
}

uint64_t sub_21F9519C4()
{
  return sub_21FA24DE0();
}

void sub_21F951AEC(double a1, double a2)
{
  double v2 = (a2 - a1) / (a1 * 0.528665);
  if (v2 < 1.0)
  {
    if (qword_26D12F780)
    {
      unint64_t v3 = 3;
      if ((unint64_t)(qword_26D12F780 - 1) < 3) {
        unint64_t v3 = qword_26D12F780 - 1;
      }
      if ((unint64_t)(qword_26D12F780 - 1) > 2)
      {
        __break(1u);
      }
      else if (v3 >= 2)
      {
        return;
      }
    }
    __break(1u);
  }
}

double sub_21F951BC4(double a1, double a2, float64x2_t a3, double a4, float64x2_t a5, float64x2_t a6)
{
  *(void *)&double result = *(_OWORD *)&vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(a5, a1), vmulq_n_f64(a6, a2)), a4), a3);
  return result;
}

uint64_t sub_21F951BE0@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D6>)
{
  double v7 = vabdd_f64(a5, a4);
  if (v7 + 2.22044605e-16 >= 6.28318531)
  {
    uint64_t result = sub_21F951D94((uint64_t)&v22, a2);
    long long v16 = v22;
    long long v17 = v23;
    char v18 = v24;
  }
  else
  {
    if (a2 < 0.0) {
      double v9 = 0.0;
    }
    else {
      double v9 = a2;
    }
    if (v9 < a3) {
      double v10 = a3;
    }
    else {
      double v10 = v9;
    }
    double v11 = v7 * 0.5;
    if (v7 > 3.14159265) {
      double v11 = 1.57079633;
    }
    double v12 = a6 / sin(v11) - v9;
    if (v12 < 0.0) {
      double v12 = 0.0;
    }
    double v13 = v9 + v12;
    if (v13 >= v10) {
      double v14 = v10;
    }
    else {
      double v14 = v13;
    }
    asin(a6 / v10);
    sub_21FA25270();
    if (v14 <= 2.22044605e-16)
    {
      sub_21FA251D0();
    }
    else
    {
      asin(a6 / v14);
      long long v22 = 0x3FF0000000000000uLL;
      *(void *)&long long v23 = 0;
      *((void *)&v23 + 1) = 0x3FF0000000000000;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      sub_21FA251F0();
    }
    sub_21FA251F0();
    uint64_t result = sub_21FA251B0();
    long long v16 = v19;
    long long v17 = v20;
    char v18 = v21;
  }
  *(_OWORD *)a1 = v16;
  *(_OWORD *)(a1 + 16) = v17;
  *(unsigned char *)(a1 + 32) = v18;
  return result;
}

uint64_t sub_21F951D94@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  if (a2 < 0.0) {
    double v3 = 0.0;
  }
  else {
    double v3 = a2;
  }
  if (v3 >= 2.22044605e-16)
  {
    sub_21FA25270();
    sub_21FA251F0();
    uint64_t result = sub_21FA251F0();
    long long v5 = v8;
    long long v6 = v9;
    char v7 = v10;
  }
  else
  {
    uint64_t result = sub_21FA25260();
    long long v5 = v11;
    long long v6 = v12;
    char v7 = v13;
  }
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return result;
}

double sub_21F951E9C(char a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  if (qword_26AD46270 != -1)
  {
    double v19 = a4;
    swift_once();
    a4 = v19;
  }
  if (*(double *)&qword_26AD52218 <= a3)
  {
    if (*(double *)&qword_26AD52218 <= a6)
    {
      double v20 = a4;
      double v15 = acos(fmax(fmin(sqrt((a3 - (a6 * a7 + a6 * a7)) * a3) / (a3 - a6 * a7), 1.0), 0.00001))
          / 0.0174532925
          * a7
          * a8;
      double v16 = -v15;
      if ((a1 & 1) == 0) {
        double v16 = v15;
      }
      double v17 = v16 + a2;
      if (a1)
      {
        sub_21F9520D8(v17, a3, v20, a5);
        __sincos_stret(a2 * 0.0174532925);
      }
      else
      {
        __sincos_stret(a2 * 0.0174532925);
        sub_21FA25200();
        __sincos_stret(v17 * 0.0174532925);
        a2 = v17;
      }
      sub_21FA251E0();
    }
    else if (a1)
    {
      sub_21F9520D8(a2, a3, a4, a5);
    }
    else
    {
      __sincos_stret(a2 * 0.0174532925);
      sub_21FA25200();
    }
  }
  else
  {
    sub_21FA25200();
  }
  return a2;
}

uint64_t sub_21F9520D8(double a1, double a2, double a3, double a4)
{
  double v8 = vabdd_f64(a1, a3);
  if (qword_26AD46268 != -1) {
    uint64_t result = swift_once();
  }
  if (v8 < *(double *)&qword_26AD52210 * 360.0)
  {
    __sincos_stret(a1 * 0.0174532925);
    return sub_21FA25200();
  }
  double v9 = fabs(a2 - a4);
  if (qword_26AD46270 != -1) {
    uint64_t result = swift_once();
  }
  if (v9 < *(double *)&qword_26AD52218) {
    return sub_21FA251F0();
  }
  double v10 = ceil(v8 / 45.0);
  if ((~*(void *)&v10 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  if (v10 <= -9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v10 >= 9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v11 = (uint64_t)v10;
  if ((uint64_t)v10 < 1)
  {
LABEL_22:
    __break(1u);
    return result;
  }
  double v12 = a1 - a3;
  __sincos_stret((v12 * 0.0 + a3) * 0.0174532925);
  __sincos_stret((v12 * (1.0 / (double)v11) + a3) * 0.0174532925);
  uint64_t result = sub_21FA25220();
  if (v11 != 1)
  {
    uint64_t v13 = 1;
    do
    {
      __sincos_stret((v12 * ((double)++v13 / (double)v11) + a3) * 0.0174532925);
      uint64_t result = sub_21FA25220();
    }
    while (v11 != v13);
  }
  return result;
}

uint64_t sub_21F9524DC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 2;
    if ((unint64_t)(v1 - 1) < 2) {
      uint64_t v3 = v1 - 1;
    }
    long long v4 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 1)
      {
        __break(1u);
        goto LABEL_10;
      }
      uint64_t v5 = *(void *)(result + 32 + 8 * v2);
      long long v6 = v4;
      *(void *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF7 | (8 * (v2 & 1))) = v5;
      long long v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (!v3) {
      goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

uint64_t sub_21F95256C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for BuilderConditional.Storage();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v6 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  double v8 = (char *)&v19 - v7;
  uint64_t v9 = type metadata accessor for BuilderConditional();
  __n128 v10 = MEMORY[0x270FA5388](v9);
  double v12 = (char *)&v19 - v11;
  (*(void (**)(char *, uint64_t, __n128))(v13 + 16))((char *)&v19 - v11, v2, v10);
  double v14 = &v8[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v15 = *(void *)(v4 - 8);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v8, v12, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v14, a1, v4);
  LODWORD(a1) = swift_getEnumCaseMultiPayload();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (a1 == 1)
  {
    if (EnumCaseMultiPayload != 1)
    {
LABEL_3:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, TupleTypeMetadata2);
      return 0;
    }
  }
  else if (EnumCaseMultiPayload == 1)
  {
    goto LABEL_3;
  }
  char v18 = *(void (**)(char *, uint64_t))(v15 + 8);
  v18(v14, v4);
  v18(v8, v4);
  return 1;
}

uint64_t sub_21F9527D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for BuilderConditional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a3, a1, v6);
  uint64_t result = type metadata accessor for BuilderConditional.Info();
  *(void *)(a3 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t BuilderConditional.init(storage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BuilderConditional.Storage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

uint64_t BuilderPair<>.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = *(void *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(a7, a1);
  uint64_t v15 = static ChartContent.conformanceToChartContent.getter(a3, a5);
  double v16 = (int *)type metadata accessor for BuilderPair();
  *(void *)(a7 + v16[9]) = v15;
  uint64_t v17 = *(void *)(a4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a7 + v16[10], a2, a4);
  uint64_t v18 = static ChartContent.conformanceToChartContent.getter(a4, a6);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a2, a4);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a3);
  *(void *)(a7 + v16[11]) = v18;
  return result;
}

{
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  uint64_t v14 = *(void *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(a7, a1);
  uint64_t v15 = static AxisContent.conformanceToAxisContent.getter(a3, a5);
  double v16 = (int *)type metadata accessor for BuilderPair();
  *(void *)(a7 + v16[9]) = v15;
  uint64_t v17 = *(void *)(a4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a7 + v16[10], a2, a4);
  uint64_t v18 = static AxisContent.conformanceToAxisContent.getter(a4, a6);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a2, a4);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a3);
  *(void *)(a7 + v16[11]) = v18;
  return result;
}

{
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  uint64_t v14 = *(void *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(a7, a1);
  uint64_t v15 = static AxisMark.conformanceToAxisMark.getter(a3, a5);
  double v16 = (int *)type metadata accessor for BuilderPair();
  *(void *)(a7 + v16[9]) = v15;
  uint64_t v17 = *(void *)(a4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a7 + v16[10], a2, a4);
  uint64_t v18 = static AxisMark.conformanceToAxisMark.getter(a4, a6);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a2, a4);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a3);
  *(void *)(a7 + v16[11]) = v18;
  return result;
}

char *sub_21F952A60(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  return sub_21F952AA8(a1, a2, a3, a4, qword_26AD43F90, &qword_26AD51F70);
}

char *sub_21F952A84(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  return sub_21F952AA8(a1, a2, a3, a4, &qword_26AD455E8, &qword_26AD52200);
}

char *sub_21F952AA8(uint64_t a1, uint64_t a2, char *a3, char *a4, void *a5, uint64_t *a6)
{
  if (*a5 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v11 = *a6;
  if (*(void *)(*a6 + 16) && (unint64_t v12 = sub_21F77E624(a1), (v13 & 1) != 0))
  {
    uint64_t v14 = *(char **)(*(void *)(v11 + 56) + 8 * v12);
    swift_bridgeObjectRetain();
  }
  else
  {
    v18[0] = (char *)MEMORY[0x263F8EE78];
    sub_21F7F701C(*(void **)a4, a3, 0, 0, a1, a2, a3, a4, v18);
    sub_21F7F701C(*((void **)a4 + 1), a3, 2, 0, a1, a2, a3, a4, v18);
    uint64_t v14 = v18[0];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *a6;
    *a6 = 0x8000000000000000;
    sub_21F872B60((uint64_t)v14, a1, isUniquelyReferenced_nonNull_native);
    *a6 = v17;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  return v14;
}

uint64_t static AnyChartContent._renderChartContent(_:_:)(void *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = *((void *)a2 + 1);
  uint64_t v4 = a1[3];
  long long v7 = *(_OWORD *)(a1 + 3);
  double v8 = sub_21F77E0FC(a1, v4);
  char v9 = v2;
  uint64_t v10 = v3;
  return sub_21F77F590(v4, (void (*)(void))sub_21F780BEC, (uint64_t)v6);
}

uint64_t AnyChartContent.init(_:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21F77F300(a1, a2);
}

void Never.body.getter()
{
}

void sub_21F952D00()
{
}

void sub_21F952D9C()
{
}

void BuilderEmpty.body.getter()
{
}

void static BuilderEmpty._renderChartContent(_:_:)(void *a1@<X8>)
{
  *a1 = 0xE000000000000000;
}

void sub_21F952E44()
{
}

void sub_21F952E90(void *a1@<X8>)
{
  *a1 = 0xE000000000000000;
}

uint64_t static BuilderEmpty._chartContentCount(inputs:)()
{
  return 0;
}

uint64_t BuilderConditional.storage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for BuilderConditional.Storage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t sub_21F952F18(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 16);
  double v29 = (char *)a1;
  uint64_t v2 = type metadata accessor for BuilderConditional.Storage();
  uint64_t v30 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v26 - v3;
  uint64_t v5 = type metadata accessor for BuilderConditional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  double v8 = (char *)&v26 - v7;
  uint64_t v9 = type metadata accessor for BuilderConditional.Info();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  unint64_t v12 = (char *)&v26 - v11;
  uint64_t v28 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v13);
  double v27 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v26 = (char *)&v26 - v16;
  sub_21F953344((uint64_t)v12);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v12, v5);
  uint64_t v17 = v12;
  uint64_t v18 = v30;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v4, v8, v2);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v4, v2);
  }
  uint64_t v20 = v28;
  char v21 = v26;
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v26, v4, v1);
  uint64_t v22 = (uint64_t)v27;
  uint64_t v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v20 + 16))(v27, v21, v1);
  MEMORY[0x270FA5388](v23);
  *(&v26 - 2) = v29;
  *(&v26 - 1) = (char *)swift_getWitnessTable();
  sub_21F74C95C(v22, (uint64_t)sub_21F92305C, (uint64_t)(&v26 - 4), v1, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v24);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  v25(v22, v1);
  return ((uint64_t (*)(char *, uint64_t))v25)(v21, v1);
}

uint64_t sub_21F953344@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for BuilderConditional.Info();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t sub_21F9533CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 56))(a2, 1, 1);
}

uint64_t sub_21F953408(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 24);
  double v29 = (char *)a1;
  uint64_t v2 = type metadata accessor for BuilderConditional.Storage();
  uint64_t v30 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v26 - v3;
  uint64_t v5 = type metadata accessor for BuilderConditional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  double v8 = (char *)&v26 - v7;
  uint64_t v9 = type metadata accessor for BuilderConditional.Info();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  unint64_t v12 = (char *)&v26 - v11;
  uint64_t v28 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v13);
  double v27 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v26 = (char *)&v26 - v16;
  sub_21F953344((uint64_t)v12);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v12, v5);
  uint64_t v17 = v12;
  uint64_t v18 = v30;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v4, v8, v2);
  if (swift_getEnumCaseMultiPayload() != 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v4, v2);
  }
  uint64_t v19 = v28;
  uint64_t v20 = v26;
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v26, v4, v1);
  uint64_t v21 = (uint64_t)v27;
  uint64_t v22 = (*(uint64_t (**)(char *, char *, uint64_t))(v19 + 16))(v27, v20, v1);
  MEMORY[0x270FA5388](v22);
  *(&v26 - 2) = v29;
  *(&v26 - 1) = (char *)swift_getWitnessTable();
  sub_21F74C95C(v21, (uint64_t)sub_21F92305C, (uint64_t)(&v26 - 4), v1, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v23);
  uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  v24(v21, v1);
  return ((uint64_t (*)(char *, uint64_t))v24)(v20, v1);
}

uint64_t sub_21F953834@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 56))(a2, 1, 1);
}

uint64_t static BuilderConditional<>._makeChartContent(content:inputs:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v48 = a5;
  uint64_t v49 = a6;
  uint64_t v44 = a4;
  uint64_t v43 = a3;
  long double v51 = a1;
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v53 = type metadata accessor for SetDependency(0);
  MEMORY[0x270FA5388](v53);
  double v52 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for _ChartContentOutputs(0);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v50 = (uint64_t)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for _ChartContentInputs(0);
  MEMORY[0x270FA5388](v16);
  uint64_t v46 = (uint64_t)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = a3;
  uint64_t v59 = a4;
  uint64_t v60 = a5;
  uint64_t v61 = a6;
  uint64_t v18 = _s9ContainerVMa();
  uint64_t v47 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  double v45 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  long double v42 = (_DWORD *)((char *)&v41 - v21);
  uint64_t v22 = sub_21FA24F30();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v41 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for AddPreference(0);
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v41 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s6Charts11BuilderPairVA2A12ChartContentRzAaDR_rlE05_makedE07content6inputsAA01_dE7OutputsV7SwiftUI11_GraphValueVyACyxq_GG_AA01_dE6InputsVtFZ_0();
  sub_21F7C945C(&qword_267EE7320, (void (*)(uint64_t))type metadata accessor for AddPreference);
  sub_21FA24EE0();
  _s6Charts11BuilderPairVA2A12ChartContentRzAaDR_rlE05_makedE07content6inputsAA01_dE7OutputsV7SwiftUI11_GraphValueVyACyxq_GG_AA01_dE6InputsVtFZ_0();
  double v41 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  v41(v25, v28, v22);
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 40))(a7, v25, v22);
  sub_21F959728((uint64_t)v28, type metadata accessor for AddPreference);
  type metadata accessor for BuilderConditional();
  int v29 = sub_21F74D6C4(v51);
  uint64_t v30 = v46;
  sub_21F7E6420(a2, v46, type metadata accessor for _ChartContentInputs);
  uint64_t v31 = v50;
  sub_21F7E6420(a7, v50, type metadata accessor for _ChartContentOutputs);
  double v32 = v42;
  sub_21F953E94(v29, v30, v31, v42);
  uint64_t v33 = v47;
  uint64_t v34 = (uint64_t)v45;
  (*(void (**)(char *, _DWORD *, uint64_t))(v47 + 16))(v45, v32, v18);
  uint64_t v55 = type metadata accessor for BuilderConditional.Info();
  uint64_t v56 = v18;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v35 = sub_21FA24380();
  sub_21F74C95C(v34, (uint64_t)sub_21F920610, (uint64_t)v54, v18, MEMORY[0x263F8E628], v35, MEMORY[0x263F8E658], v36);
  double v37 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
  v37(v34, v18);
  LODWORD(v33) = v58;
  uint64_t v38 = (uint64_t)v52;
  v41(v52, (char *)a7, v22);
  uint64_t v39 = v38 + *(int *)(v53 + 20);
  *(_DWORD *)uint64_t v39 = v33;
  *(unsigned char *)(v39 + 4) = 0;
  sub_21F7C945C(qword_267EE7328, (void (*)(uint64_t))type metadata accessor for SetDependency);
  sub_21FA24F10();
  sub_21F959728(v38, type metadata accessor for SetDependency);
  return ((uint64_t (*)(_DWORD *, uint64_t))v37)(v32, v18);
}

id sub_21F953E94@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  *a4 = a1;
  uint64_t v7 = (int *)_s9ContainerVMa();
  sub_21F7EB174(a2, (uint64_t)a4 + v7[13], type metadata accessor for _ChartContentInputs);
  sub_21F7EB174(a3, (uint64_t)a4 + v7[14], type metadata accessor for _ChartContentOutputs);
  id result = (id)AGSubgraphGetCurrent();
  if (result) {
    *(void *)((char *)a4 + v7[15]) = result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t static BuilderConditional<>._chartContentCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (*(uint64_t (**)(void))(a4 + 56))();
  if ((v9 & 1) == 0)
  {
    BOOL v10 = v8 != (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 56))(a1, a3, a5);
    if ((v11 | v10)) {
      return 0;
    }
  }
  return v8;
}

uint64_t sub_21F953FF0(uint64_t a1)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v2 = type metadata accessor for BuilderConditional.Info();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v50 = (uint64_t)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v48 = (char *)&v46 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v47 = (char *)&v46 - v8;
  uint64_t v9 = sub_21FA26340();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v49 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v46 - v13;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v46 - v16;
  uint64_t v18 = type metadata accessor for BuilderConditional();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v58 = (uint64_t)&v46 - v20;
  sub_21F7C6970((uint64_t)&v46 - v20);
  Outputuint64_t Value = AGGraphGetOutputValue();
  uint64_t v54 = v18;
  uint64_t v55 = a1;
  uint64_t v53 = v19;
  if (OutputValue)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v17, OutputValue, v2);
    uint64_t v22 = 0;
  }
  else
  {
    uint64_t v22 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v17, v22, 1, v2);
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v23(v14, v17, v9);
  uint64_t v24 = v10;
  uint64_t v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48);
  int v26 = v25(v14, 1, v2);
  uint64_t v56 = v24;
  uint64_t v57 = v9;
  long double v51 = v17;
  uint64_t v52 = v3;
  if (v26 == 1)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v9);
  }
  else
  {
    char v27 = sub_21F95256C(v58);
    uint64_t v28 = *(void (**)(char *, uint64_t))(v3 + 8);
    v28(v14, v2);
    if (v27)
    {
      uint64_t result = AGGraphGetOutputValue();
      if (result)
      {
        uint64_t v30 = (uint64_t)v47;
        (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v47, result, v2);
        uint64_t v32 = v53;
        uint64_t v31 = v54;
        uint64_t v33 = v58;
        uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 24))(v30, v58, v54);
        MEMORY[0x270FA5388](v34);
        *(&v46 - 2) = v55;
        *(&v46 - 1) = swift_getWitnessTable();
        sub_21F74C95C(v30, (uint64_t)sub_21F92305C, (uint64_t)(&v46 - 4), v2, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v35);
        v28((char *)v30, v2);
        (*(void (**)(char *, uint64_t))(v56 + 8))(v51, v57);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v33, v31);
      }
      else
      {
        __break(1u);
      }
      return result;
    }
  }
  uint64_t v36 = v49;
  uint64_t v37 = v57;
  v23(v49, v17, v57);
  if (v25(v36, 1, v2) == 1)
  {
    uint64_t v38 = v56;
    (*(void (**)(char *, uint64_t))(v56 + 8))(v36, v37);
    uint64_t v39 = v55;
    uint64_t v40 = v52;
  }
  else
  {
    uint64_t v40 = v52;
    uint64_t v41 = (uint64_t)v48;
    (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v48, v36, v2);
    uint64_t v39 = v55;
    sub_21F954684(v41, v55);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v2);
    uint64_t v38 = v56;
  }
  uint64_t v42 = v50;
  uint64_t v43 = v58;
  uint64_t v44 = sub_21F9547C4(v58, v39, v50);
  MEMORY[0x270FA5388](v44);
  *(&v46 - 2) = v39;
  *(&v46 - 1) = swift_getWitnessTable();
  sub_21F74C95C(v42, (uint64_t)sub_21F921C4C, (uint64_t)(&v46 - 4), v2, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v45);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v42, v2);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v51, v37);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 8))(v43, v54);
}

uint64_t sub_21F954684(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ResetPreference(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v2 + *(int *)(a2 + 56);
  uint64_t v8 = sub_21FA24F30();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  sub_21F7C945C(&qword_267EE7430, (void (*)(uint64_t))type metadata accessor for ResetPreference);
  sub_21FA24F10();
  sub_21F959728((uint64_t)v6, type metadata accessor for ResetPreference);
  type metadata accessor for BuilderConditional.Info();
  return AGSubgraphInvalidate();
}

uint64_t sub_21F9547C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for _ChartContentOutputs(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for _ChartContentInputs(0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    int v14 = result;
    id v15 = (id)AGSubgraphGetGraph();
    uint64_t v16 = (void *)AGSubgraphCreate();

    AGSubgraphAddChild();
    sub_21F7E6420(v3 + *(int *)(a2 + 52), (uint64_t)v12, type metadata accessor for _ChartContentInputs);
    sub_21F7E6420(v3 + *(int *)(a2 + 56), (uint64_t)v9, type metadata accessor for _ChartContentOutputs);
    AGGraphClearUpdate();
    id v17 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    sub_21F9549D0(a1, v14, (uint64_t)v12, (uint64_t)v9, (uint64_t)v16, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 32), a3, *(void *)(a2 + 40));
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    sub_21F959728((uint64_t)v9, type metadata accessor for _ChartContentOutputs);
    return sub_21F959728((uint64_t)v12, type metadata accessor for _ChartContentInputs);
  }
  return result;
}

id sub_21F9549D0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v88 = a9;
  double v89 = (void *)a5;
  uint64_t v84 = a4;
  uint64_t v80 = a3;
  int v79 = a2;
  uint64_t v77 = a10;
  uint64_t v78 = a8;
  uint64_t v93 = *MEMORY[0x263EF8340];
  uint64_t v13 = type metadata accessor for BuilderConditional();
  uint64_t v85 = *(void *)(v13 - 8);
  uint64_t v86 = v13;
  MEMORY[0x270FA5388](v13);
  double v83 = (char *)&v69 - v14;
  uint64_t v82 = type metadata accessor for SetSource(0);
  MEMORY[0x270FA5388](v82);
  double v81 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_21FA24530();
  uint64_t v75 = *(void *)(v16 - 8);
  uint64_t v76 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v73 = (uint64_t)&v69 - v17;
  uint64_t v74 = *(void *)(a7 - 8);
  MEMORY[0x270FA5388](v18);
  double v69 = (char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v72 = (char *)&v69 - v21;
  uint64_t v71 = sub_21FA24530();
  uint64_t v70 = *(void *)(v71 - 8);
  MEMORY[0x270FA5388](v71);
  uint64_t v23 = (char *)&v69 - v22;
  uint64_t v24 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v25);
  char v27 = (char *)&v69 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v69 - v29;
  uint64_t v31 = type metadata accessor for BuilderConditional.Storage();
  uint64_t v32 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v34 = (char *)&v69 - v33;
  uint64_t v35 = type metadata accessor for _ChartContentOutputs(0);
  __n128 v36 = MEMORY[0x270FA5388](v35 - 8);
  double v90 = (char *)&v69 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v32 + 16);
  uint64_t v87 = a1;
  v38(v34, a1, v31, v36);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v39 = v74;
    uint64_t v40 = v72;
    uint64_t v41 = (*(uint64_t (**)(char *, char *, uint64_t))(v74 + 32))(v72, v34, a7);
    int v92 = v79;
    MEMORY[0x270FA5388](v41);
    *(&v69 - 4) = (char *)a7;
    uint64_t v42 = type metadata accessor for BuilderConditional.FalseChild();
    *(&v69 - 3) = (char *)v42;
    *(&v69 - 2) = (char *)swift_getWitnessTable();
    uint64_t v43 = sub_21FA24380();
    uint64_t v44 = MEMORY[0x263F8E628];
    uint64_t v45 = MEMORY[0x263F8E658];
    sub_21F74C95C((uint64_t)&v92, (uint64_t)sub_21F923044, (uint64_t)(&v69 - 6), v42, MEMORY[0x263F8E628], v43, MEMORY[0x263F8E658], v46);
    LODWORD(v42) = v91;
    uint64_t v47 = (uint64_t)v69;
    uint64_t v48 = (*(uint64_t (**)(char *, char *, uint64_t))(v39 + 16))(v69, v40, a7);
    MEMORY[0x270FA5388](v48);
    *(&v69 - 2) = (char *)a7;
    *((_DWORD *)&v69 - 2) = v42;
    sub_21F74C95C(v47, (uint64_t)sub_21F921C9C, (uint64_t)(&v69 - 4), a7, v44, MEMORY[0x263F8D4F8], v45, v49);
    uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v50(v47, a7);
    uint64_t v51 = v73;
    sub_21F74CA38(v42, v73);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 48))(v51, v80, a7);
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v51, v76);
    uint64_t v52 = v40;
    uint64_t v53 = a7;
  }
  else
  {
    uint64_t v54 = (*(uint64_t (**)(char *, char *, uint64_t))(v24 + 32))(v30, v34, a6);
    int v92 = v79;
    MEMORY[0x270FA5388](v54);
    *(&v69 - 4) = (char *)a6;
    uint64_t v55 = type metadata accessor for BuilderConditional.TrueChild();
    *(&v69 - 3) = (char *)v55;
    *(&v69 - 2) = (char *)swift_getWitnessTable();
    uint64_t v56 = sub_21FA24380();
    uint64_t v57 = MEMORY[0x263F8E628];
    sub_21F74C95C((uint64_t)&v92, (uint64_t)sub_21F923044, (uint64_t)(&v69 - 6), v55, MEMORY[0x263F8E628], v56, MEMORY[0x263F8E658], v58);
    int v59 = v91;
    uint64_t v60 = (*(uint64_t (**)(char *, char *, uint64_t))(v24 + 16))(v27, v30, a6);
    MEMORY[0x270FA5388](v60);
    *(&v69 - 2) = (char *)a6;
    *((_DWORD *)&v69 - 2) = v59;
    sub_21F74C95C((uint64_t)v27, (uint64_t)sub_21F95982C, (uint64_t)(&v69 - 4), a6, v57, MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], v61);
    uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v50((uint64_t)v27, a6);
    sub_21F74CA38(v59, (uint64_t)v23);
    (*(void (**)(char *, uint64_t, uint64_t))(v78 + 48))(v23, v80, a6);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v23, v71);
    uint64_t v52 = v30;
    uint64_t v53 = a6;
  }
  v50((uint64_t)v52, v53);
  uint64_t v62 = sub_21FA24F30();
  double v63 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v62 - 8) + 16);
  uint64_t v64 = (uint64_t)v81;
  v63(v81, v84, v62);
  uint64_t v65 = (uint64_t)v90;
  v63((char *)(v64 + *(int *)(v82 + 20)), (uint64_t)v90, v62);
  sub_21F7C945C(qword_267EE7438, (void (*)(uint64_t))type metadata accessor for SetSource);
  sub_21FA24F10();
  sub_21F959728(v64, type metadata accessor for SetSource);
  sub_21F959728(v65, type metadata accessor for _ChartContentOutputs);
  uint64_t v66 = (uint64_t)v83;
  (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v83, v87, v86);
  sub_21F9527D4(v66, (uint64_t)v89, v88);
  double v67 = v89;

  return v67;
}

void sub_21F95536C()
{
}

uint64_t sub_21F9553B8@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static BuilderConditional<>._makeChartContent(content:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8), *(void *)(a4 - 16), a5);
}

uint64_t sub_21F9553C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static BuilderConditional<>._chartContentCount(inputs:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t sub_21F9553F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v6 + 16))(v8, *(void *)v3 + *(void *)(v3 + 24), a2);
  long long v10 = *(_OWORD *)(v3 + 8);
  (*(void (**)(char *, long long *, uint64_t, uint64_t))(a3 + 32))(v8, &v10, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a2);
}

uint64_t sub_21F955508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a2 - 8);
  __n128 v8 = MEMORY[0x270FA5388](a1);
  long long v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(char *, void, uint64_t, __n128))(v7 + 16))(v10, *(void *)v4 + *(void *)(v4 + 24), a2, v8);
  uint64_t v11 = *(void *)(v4 + 16);
  v18[0] = *(unsigned char *)(v4 + 8);
  uint64_t v19 = v11;
  (*(void (**)(uint64_t *__return_ptr, char *, unsigned char *, uint64_t, uint64_t))(a3 + 40))(&v20, v10, v18, a2, a3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, a2);
  uint64_t v12 = v20;
  uint64_t v13 = *(char **)(v4 + 32);
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v13 = sub_21F759678(0, *((void *)v13 + 2) + 1, 1, v13);
  }
  unint64_t v15 = *((void *)v13 + 2);
  unint64_t v14 = *((void *)v13 + 3);
  if (v15 >= v14 >> 1) {
    uint64_t v13 = sub_21F759678((char *)(v14 > 1), v15 + 1, 1, v13);
  }
  *((void *)v13 + 2) = v15 + 1;
  *(void *)&v13[8 * v15 + 32] = v12;
  uint64_t result = swift_release();
  *(void *)(v4 + 32) = v13;
  return result;
}

uint64_t BuilderPair.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t BuilderPair.firstConformance.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 36));
}

uint64_t BuilderPair.second.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t BuilderPair.secondConformance.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 44));
}

uint64_t type metadata accessor for BuilderPair()
{
  return sub_21F764F08();
}

void BuilderPair<>.body.getter()
{
}

void static BuilderPair<>._layoutChartContent(_:_:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for BuilderPair();
  uint64_t v13 = *(void *)(v12 + 8);
  sub_21F7F7204();
  if (v14)
  {
    unint64_t v15 = (char *)(v12 + 8 * *(unsigned int *)(v14 + 24));
    long long v22 = *a2;
    uint64_t v16 = sub_21F952AA8(v12, v13, v15, (char *)(v12 + 16), &qword_26AD46828, &qword_26AD52220);
    MEMORY[0x270FA5388](v16);
    v19[2] = a3;
    v19[3] = a4;
    v19[4] = a5;
    v19[5] = a6;
    long long v20 = v22;
    uint64_t v21 = v17;
    sub_21F74C95C(a1, (uint64_t)sub_21F9560C4, (uint64_t)v19, v12, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_21F9558D8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 16);
  if (v4)
  {
    uint64_t v6 = result;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v7 = 0;
    __n128 v8 = (uint64_t *)(a4 + 48);
    do
    {
      uint64_t v9 = *(v8 - 2);
      uint64_t v10 = *v8;
      v8 += 3;
      uint64_t v18 = *(void *)(v6 + v10);
      uint64_t v11 = *(void *)(a2 + 16);
      uint64_t v12 = *(void *)(v11 + 16);
      uint64_t v13 = *(void *)(v12 + 32);
      swift_retain();
      swift_retain();
      uint64_t v14 = sub_21F76633C(v7, v13);
      uint64_t v15 = *(void *)(v12 + 32);
      *(void *)(v12 + 32) = v14;
      uint64_t v16 = *(void *)(v11 + 24);
      *(void *)(v11 + 24) = v14;
      sub_21F9553F0(v9, v9, v18);
      *(void *)(v11 + 24) = v16;
      *(void *)(v12 + 32) = v15;
      swift_release();
      swift_release();
      ++v7;
    }
    while (v4 != v7);
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void static BuilderPair<>._renderChartContent(_:_:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for BuilderPair();
  uint64_t v13 = *(void *)(v12 + 8);
  sub_21F7F7204();
  if (v14)
  {
    uint64_t v15 = *((void *)a2 + 1);
    char v16 = *a2;
    uint64_t v17 = sub_21F952AA8(v12, v13, (char *)(v12 + 8 * *(unsigned int *)(v14 + 24)), (char *)(v12 + 16), &qword_26AD46828, &qword_26AD52220);
    MEMORY[0x270FA5388](v17);
    v20[2] = a3;
    v20[3] = a4;
    v20[4] = a5;
    void v20[5] = a6;
    char v21 = v16;
    uint64_t v22 = v15;
    uint64_t v23 = v18;
    sub_21F74C95C(a1, (uint64_t)sub_21F9560FC, (uint64_t)v20, v12, MEMORY[0x263F8E628], (uint64_t)&type metadata for _ChartContentRenderOutputs, MEMORY[0x263F8E658], v19);
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_21F955B5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v4 = a2;
  uint64_t v5 = a4;
  uint64_t v6 = MEMORY[0x263F8EE78];
  uint64_t v7 = *(void *)(a3 + 16);
  if (v7)
  {
    uint64_t v32 = *(void *)(a2 + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v10 = 0;
    uint64_t v11 = (uint64_t *)(a3 + 48);
    do
    {
      uint64_t v12 = *(v11 - 2);
      uint64_t v13 = *v11;
      v11 += 3;
      uint64_t v33 = *(void *)(a1 + v13);
      uint64_t v14 = *(void *)(v32 + 16);
      uint64_t v15 = *(void *)(v14 + 32);
      swift_retain();
      uint64_t v16 = sub_21F76633C(v10, v15);
      uint64_t v17 = a1;
      uint64_t v18 = *(void *)(v14 + 32);
      *(void *)(v14 + 32) = v16;
      uint64_t v19 = *(void *)(v32 + 24);
      *(void *)(v32 + 24) = v16;
      sub_21F955508(v12, v12, v33);
      *(void *)(v32 + 24) = v19;
      *(void *)(v14 + 32) = v18;
      a1 = v17;
      swift_release();
      ++v10;
    }
    while (v7 != v10);
    swift_bridgeObjectRelease();
    uint64_t v5 = a4;
    uint64_t v6 = MEMORY[0x263F8EE78];
    uint64_t v4 = a2;
  }
  else
  {
    swift_retain();
  }
  long long v20 = (int *)type metadata accessor for SgGroup(0);
  uint64_t v21 = swift_allocBox();
  uint64_t v23 = v22;
  uint64_t v24 = *(void *)(*(void *)(v4 + 16) + 24);
  uint64_t v25 = swift_bridgeObjectRetain();
  uint64_t v26 = sub_21F7812C4(v25);
  swift_bridgeObjectRelease();
  char v27 = (char *)v23 + v20[6];
  uint64_t v28 = type metadata accessor for SgClipRect(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 1, 1, v28);
  void *v23 = v24;
  v23[1] = v26;
  *(void *)((char *)v23 + v20[7]) = 0x3FF0000000000000;
  *(void *)((char *)v23 + v20[8]) = 0;
  *(void *)((char *)v23 + v20[9]) = v6;
  *((unsigned char *)v23 + v20[10]) = 0;
  *uint64_t v5 = v21;
  swift_bridgeObjectRelease();
  return swift_release();
}

void sub_21F955D90()
{
}

void sub_21F955DDC(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
}

void sub_21F955DEC(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
}

uint64_t AnyChartContent.storage.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21F77E098(v1, a1);
}

uint64_t AnyChartContent.init<A>(erasing:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v6 = sub_21F77E8F8(a4);
  uint64_t v7 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32);

  return v7(v6, a1, a2);
}

uint64_t static AnyChartContent._layoutChartContent(_:_:)(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = sub_21F77E0FC(a1, v4);

  return sub_21F955EC8((uint64_t)v6, v2, v3, v4, v5);
}

uint64_t sub_21F955EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v7[2] = a4;
  v7[3] = a5;
  _OWORD v7[4] = a1;
  _OWORD v7[5] = a2;
  v7[6] = a3;
  swift_retain();
  sub_21F7E4200(a4, (void (*)(void))sub_21F9597A0, (uint64_t)v7);
  return swift_release();
}

uint64_t sub_21F955F30()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  long long v4 = *(_OWORD *)(v0 + 56);
  return (*(uint64_t (**)(uint64_t, long long *))(v2 + 32))(v1, &v4);
}

uint64_t sub_21F955F80()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 64);
  v5[0] = *(unsigned char *)(v0 + 56);
  uint64_t v6 = v3;
  return (*(uint64_t (**)(uint64_t, unsigned char *))(v2 + 40))(v1, v5);
}

uint64_t _s9ContainerVMa()
{
  return swift_getGenericMetadata();
}

uint64_t sub_21F955FF0(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = sub_21F77E0FC(a1, v4);

  return sub_21F955EC8((uint64_t)v6, v2, v3, v4, v5);
}

uint64_t sub_21F956044(void *a1, uint64_t a2)
{
  char v2 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = sub_21F77E0FC(a1, v4);

  return sub_21F77F534((uint64_t)v6, v2, v3, v4, v5);
}

uint64_t type metadata accessor for BuilderConditional.Info()
{
  return sub_21F764F08();
}

uint64_t sub_21F9560C4(uint64_t a1)
{
  return sub_21F9558D8(a1, v1[6], v1[7], v1[8]);
}

uint64_t sub_21F9560FC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_21F955B5C(a1, *(void *)(v2 + 56), *(void *)(v2 + 64), a2);
}

_UNKNOWN **sub_21F956134()
{
  return &protocol witness table for Never;
}

uint64_t sub_21F956140(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21F956190(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for ChartContentBuilder()
{
  return &type metadata for ChartContentBuilder;
}

ValueMetadata *type metadata accessor for BuilderEmpty()
{
  return &type metadata for BuilderEmpty;
}

void *sub_21F956218(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    unsigned int v11 = a2[v6];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v13 = v6;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a2;
          goto LABEL_21;
        case 2:
          int v14 = *(unsigned __int16 *)a2;
          goto LABEL_21;
        case 3:
          int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_21;
        case 4:
          int v14 = *(_DWORD *)a2;
LABEL_21:
          int v15 = (v14 | (v12 << (8 * v6))) + 2;
          unsigned int v11 = v14 + 2;
          if (v6 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1)
    {
      (*(void (**)(void *))(v5 + 16))(a1);
      *((unsigned char *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v6) = 0;
    }
  }
  else
  {
    uint64_t v10 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

unsigned __int8 *sub_21F956414(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1) {
      uint64_t v15 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v10 == 1) {
      uint64_t v16 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_31;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_31:
          int v21 = (v20 | (v18 << (8 * v9))) + 2;
          unsigned int v17 = v20 + 2;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    BOOL v22 = v17 == 1;
    if (v17 == 1) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v7;
    }
    if (v17 == 1) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 16))(a1, a2, v24);
    a1[v9] = v22;
  }
  return a1;
}

uint64_t sub_21F956654(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  BOOL v12 = v7 == 1;
  if (v7 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(unsigned char *)(a1 + v6) = v12;
  return a1;
}

unsigned __int8 *sub_21F9567C8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1) {
      uint64_t v15 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v10 == 1) {
      uint64_t v16 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_31;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_31:
          int v21 = (v20 | (v18 << (8 * v9))) + 2;
          unsigned int v17 = v20 + 2;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    BOOL v22 = v17 == 1;
    if (v17 == 1) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v7;
    }
    if (v17 == 1) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 32))(a1, a2, v24);
    a1[v9] = v22;
  }
  return a1;
}

uint64_t sub_21F956A08(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (v3 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  unint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)((char *)a1 + v4);
      if (!v6) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)((char *)a1 + v4);
      if (!*(unsigned __int16 *)((char *)a1 + v4)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_22:
      unsigned int v10 = *((unsigned __int8 *)a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v6 = *((unsigned __int8 *)a1 + v4);
  if (!*((unsigned char *)a1 + v4)) {
    goto LABEL_22;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (v4 > 3) {
    int v9 = 0;
  }
  if (v4)
  {
    if (v4 > 3) {
      LODWORD(v4) = 4;
    }
    switch((int)v4)
    {
      case 2:
        LODWORD(v4) = *a1;
        break;
      case 3:
        LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v4) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v4) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v4 | v9) + 255;
}

void sub_21F956B4C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (*(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x21F956D24);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_21F956D4C(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8) + 64);
  if (v2 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  uint64_t v3 = a1[v2];
  int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v7 = (v6 | (v4 << (8 * v2))) + 2;
        LODWORD(v3) = v6 + 2;
        if (v2 >= 4) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = v7;
        }
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_21F956E14(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (a2 > 1)
  {
    uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
    if (*(void *)(v6 + 64) <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
      size_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a2 - 2;
    if (v7 < 4)
    {
      unsigned int v9 = v8 >> (8 * v7);
      int v10 = v8 & ~(-1 << (8 * v7));
      a1[v7] = v9 + 2;
      bzero(a1, v7);
      if (v7 == 3)
      {
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
      }
      else if (v7 == 2)
      {
        *(_WORD *)a1 = v10;
      }
      else
      {
        *a1 = v10;
      }
    }
    else
    {
      a1[v7] = 2;
      bzero(a1, v7);
      *(_DWORD *)a1 = v8;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    if (*(void *)(v4 + 64) > v5) {
      unint64_t v5 = *(void *)(v4 + 64);
    }
    a1[v5] = a2;
  }
}

uint64_t sub_21F956F3C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_21F957018(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 64) + 7;
  unsigned int v11 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v11 > 7
    || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || ((v10 + ((v9 + ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v15 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v16 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v15 = *v16;
    uint64_t v17 = ((unint64_t)v15 + v9 + 8) & ~v9;
    uint64_t v18 = ((unint64_t)v16 + v9 + 8) & ~v9;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v17, v18, v7);
    *(void *)((v10 + v17) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v10 + v18) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t sub_21F9571E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t))(v5 + 8);
  unint64_t v7 = (((a1 + *(void *)(v4 + 56) + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);

  return v6(v7);
}

uint64_t sub_21F957294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48) + 7;
  uint64_t v8 = (void *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v8 = *v9;
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v11 = v10 + 16;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = ((unint64_t)v8 + v12 + 8) & ~v12;
  uint64_t v14 = ((unint64_t)v9 + v12 + 8) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v13, v14);
  *(void *)((*(void *)(v11 + 48) + 7 + v13) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v11 + 48)
                                                                                       + 7
                                                                                       + v14) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_21F957380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40) + 7;
  uint64_t v8 = (void *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v8 = *v9;
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v11 = v10 + 24;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = ((unint64_t)v8 + v12 + 8) & ~v12;
  uint64_t v14 = ((unint64_t)v9 + v12 + 8) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v13, v14);
  *(void *)((*(void *)(v11 + 40) + 7 + v13) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v11 + 40)
                                                                                       + 7
                                                                                       + v14) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_21F95746C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32) + 7;
  uint64_t v8 = (void *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v8 = *v9;
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v11 = v10 + 32;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = ((unint64_t)v8 + v12 + 8) & ~v12;
  uint64_t v14 = ((unint64_t)v9 + v12 + 8) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v13, v14);
  *(void *)((*(void *)(v11 + 32) + 7 + v13) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v11 + 32)
                                                                                       + 7
                                                                                       + v14) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_21F957558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24) + 7;
  uint64_t v8 = (void *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v8 = *v9;
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v11 = v10 + 40;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = ((unint64_t)v8 + v12 + 8) & ~v12;
  uint64_t v14 = ((unint64_t)v9 + v12 + 8) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v13, v14);
  *(void *)((*(void *)(v11 + 24) + 7 + v13) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v11 + 24)
                                                                                       + 7
                                                                                       + v14) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_21F957644(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v7 = *(void *)(v4 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  if (v5 <= *(_DWORD *)(v6 + 84)) {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v4 + 84);
  }
  if (v9 <= 1) {
    unsigned int v10 = 1;
  }
  else {
    unsigned int v10 = v9;
  }
  if (!a2) {
    return 0;
  }
  if (v10 < a2)
  {
    unint64_t v11 = ((*(void *)(v6 + 64) + ((v8 + ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    uint64_t v12 = v11 & 0xFFFFFFF8;
    if ((v11 & 0xFFFFFFF8) != 0) {
      unsigned int v13 = 2;
    }
    else {
      unsigned int v13 = a2 - v10 + 1;
    }
    if (v13 >= 0x10000) {
      unsigned int v14 = 4;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v13 < 0x100) {
      unsigned int v14 = 1;
    }
    if (v13 >= 2) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    switch(v15)
    {
      case 1:
        int v16 = *((unsigned __int8 *)a1 + v11);
        if (!v16) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v16 = *(unsigned __int16 *)((char *)a1 + v11);
        if (v16) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x21F957824);
      case 4:
        int v16 = *(int *)((char *)a1 + v11);
        if (!v16) {
          break;
        }
LABEL_25:
        int v18 = v16 - 1;
        if (v12)
        {
          int v18 = 0;
          int v19 = *a1;
        }
        else
        {
          int v19 = 0;
        }
        return v10 + (v19 | v18) + 1;
      default:
        break;
    }
  }
  if (v5 == v10) {
    return (*(uint64_t (**)(int *, uint64_t, uint64_t))(v4 + 48))(a1, v5, v3);
  }
  int v20 = (void *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v9 > 1) {
    return (*(uint64_t (**)(unint64_t))(v6 + 48))(((unint64_t)v20 + v8 + 8) & ~v8);
  }
  else {
    return *v20 == 0;
  }
}

void sub_21F957838(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a4 + 24) - 8);
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v6 <= *(_DWORD *)(v7 + 84)) {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v5 + 84);
  }
  if (v10 <= 1) {
    unsigned int v11 = 1;
  }
  else {
    unsigned int v11 = v10;
  }
  size_t v12 = ((*(void *)(v7 + 64) + ((v9 + ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v11 >= a3)
  {
    int v15 = 0;
    int v16 = a2 - v11;
    if (a2 <= v11)
    {
LABEL_20:
      switch(v15)
      {
        case 1:
          a1[v12] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 2:
          *(_WORD *)&a1[v12] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 3:
          goto LABEL_49;
        case 4:
          *(_DWORD *)&a1[v12] = 0;
          goto LABEL_32;
        default:
LABEL_32:
          if (a2)
          {
LABEL_33:
            if (v6 == v11)
            {
              int v19 = *(void (**)(void))(v5 + 56);
              v19();
            }
            else
            {
              int v20 = (void *)((unint64_t)&a1[v8 + 7] & 0xFFFFFFFFFFFFFFF8);
              if (v10 > 1)
              {
                int v21 = *(void (**)(unint64_t))(v7 + 56);
                v21(((unint64_t)v20 + v9 + 8) & ~v9);
              }
              else if (a2 > 1)
              {
                *int v20 = a2 - 2;
              }
              else
              {
                *int v20 = 0;
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((*(_DWORD *)(v7 + 64) + ((v9 + ((v8 + 7) & 0xFFFFFFF8) + 8) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v13 = a3 - v11 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    int v16 = a2 - v11;
    if (a2 <= v11) {
      goto LABEL_20;
    }
  }
  if (((*(_DWORD *)(v7 + 64) + ((v9 + ((v8 + 7) & 0xFFFFFFF8) + 8) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v17 = v16;
  }
  else {
    int v17 = 1;
  }
  if (((*(_DWORD *)(v7 + 64) + ((v9 + ((v8 + 7) & 0xFFFFFFF8) + 8) & ~v9) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v18 = ~v11 + a2;
    bzero(a1, v12);
    *(_DWORD *)a1 = v18;
  }
  switch(v15)
  {
    case 1:
      a1[v12] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v12] = v17;
      break;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x21F957AD8);
    case 4:
      *(_DWORD *)&a1[v12] = v17;
      break;
    default:
      return;
  }
}

uint64_t sub_21F957B00()
{
  uint64_t result = type metadata accessor for _ChartContentInputs(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_21FA24F30();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_21F957BE4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v27 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v7 = a3[13];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_21FA24B80();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    unsigned int v11 = (int *)type metadata accessor for _ChartContentInputs(0);
    uint64_t v12 = v11[5];
    unsigned int v13 = &v8[v12];
    int v14 = &v9[v12];
    uint64_t v15 = sub_21FA24540();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    uint64_t v16 = v11[6];
    int v17 = &v8[v16];
    unsigned int v18 = &v9[v16];
    uint64_t v19 = sub_21FA24EF0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    *(_DWORD *)&v8[v11[7]] = *(_DWORD *)&v9[v11[7]];
    uint64_t v20 = a3[14];
    int v21 = (char *)v4 + v20;
    BOOL v22 = (char *)a2 + v20;
    uint64_t v23 = sub_21FA24F30();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
    uint64_t v24 = a3[15];
    uint64_t v25 = *(void **)((char *)a2 + v24);
    *(uint64_t *)((char *)v4 + v24) = (uint64_t)v25;
    id v26 = v25;
  }
  return v4;
}

void sub_21F957DC8(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[13];
  uint64_t v5 = sub_21FA24B80();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = type metadata accessor for _ChartContentInputs(0);
  uint64_t v7 = v4 + *(int *)(v6 + 20);
  uint64_t v8 = sub_21FA24540();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v4 + *(int *)(v6 + 24);
  uint64_t v10 = sub_21FA24EF0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  uint64_t v11 = a1 + a2[14];
  uint64_t v12 = sub_21FA24F30();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  unsigned int v13 = *(void **)(a1 + a2[15]);
}

_DWORD *sub_21F957F20(_DWORD *a1, _DWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[13];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_21FA24B80();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = (int *)type metadata accessor for _ChartContentInputs(0);
  uint64_t v11 = v10[5];
  uint64_t v12 = &v7[v11];
  unsigned int v13 = &v8[v11];
  uint64_t v14 = sub_21FA24540();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  uint64_t v15 = v10[6];
  uint64_t v16 = &v7[v15];
  int v17 = &v8[v15];
  uint64_t v18 = sub_21FA24EF0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  uint64_t v19 = a3[14];
  uint64_t v20 = (char *)a1 + v19;
  int v21 = (char *)a2 + v19;
  uint64_t v22 = sub_21FA24F30();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
  uint64_t v23 = a3[15];
  uint64_t v24 = *(void **)((char *)a2 + v23);
  *(void *)((char *)a1 + v23) = v24;
  id v25 = v24;
  return a1;
}

_DWORD *sub_21F9580B4(_DWORD *a1, _DWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[13];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_21FA24B80();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = (int *)type metadata accessor for _ChartContentInputs(0);
  uint64_t v11 = v10[5];
  uint64_t v12 = &v7[v11];
  unsigned int v13 = &v8[v11];
  uint64_t v14 = sub_21FA24540();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  uint64_t v15 = v10[6];
  uint64_t v16 = &v7[v15];
  int v17 = &v8[v15];
  uint64_t v18 = sub_21FA24EF0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  uint64_t v19 = a3[14];
  uint64_t v20 = (char *)a1 + v19;
  int v21 = (char *)a2 + v19;
  uint64_t v22 = sub_21FA24F30();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 24))(v20, v21, v22);
  uint64_t v23 = a3[15];
  uint64_t v24 = *(void **)((char *)a2 + v23);
  id v25 = *(void **)((char *)a1 + v23);
  *(void *)((char *)a1 + v23) = v24;
  id v26 = v24;

  return a1;
}

_DWORD *sub_21F958250(_DWORD *a1, _DWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[13];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_21FA24B80();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = (int *)type metadata accessor for _ChartContentInputs(0);
  uint64_t v11 = v10[5];
  uint64_t v12 = &v7[v11];
  unsigned int v13 = &v8[v11];
  uint64_t v14 = sub_21FA24540();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  uint64_t v15 = v10[6];
  uint64_t v16 = &v7[v15];
  int v17 = &v8[v15];
  uint64_t v18 = sub_21FA24EF0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  uint64_t v19 = a3[14];
  uint64_t v20 = (char *)a1 + v19;
  int v21 = (char *)a2 + v19;
  uint64_t v22 = sub_21FA24F30();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
  *(void *)((char *)a1 + a3[15]) = *(void *)((char *)a2 + a3[15]);
  return a1;
}

_DWORD *sub_21F9583E0(_DWORD *a1, _DWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[13];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_21FA24B80();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = (int *)type metadata accessor for _ChartContentInputs(0);
  uint64_t v11 = v10[5];
  uint64_t v12 = &v7[v11];
  unsigned int v13 = &v8[v11];
  uint64_t v14 = sub_21FA24540();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  uint64_t v15 = v10[6];
  uint64_t v16 = &v7[v15];
  int v17 = &v8[v15];
  uint64_t v18 = sub_21FA24EF0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  uint64_t v19 = a3[14];
  uint64_t v20 = (char *)a1 + v19;
  int v21 = (char *)a2 + v19;
  uint64_t v22 = sub_21FA24F30();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 40))(v20, v21, v22);
  uint64_t v23 = a3[15];
  uint64_t v24 = *(void **)((char *)a1 + v23);
  *(void *)((char *)a1 + v23) = *(void *)((char *)a2 + v23);

  return a1;
}

uint64_t sub_21F958578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F95858C);
}

uint64_t sub_21F95858C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for _ChartContentInputs(0);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[13];
LABEL_5:
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v11(a1 + v9, a2, v7);
  }
  uint64_t v10 = type metadata accessor for _ChartContentOutputs(0);
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[14];
    goto LABEL_5;
  }
  unint64_t v13 = *(void *)(a1 + a3[15]);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  return (v13 + 1);
}

uint64_t sub_21F95869C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F9586B0);
}

uint64_t sub_21F9586B0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for _ChartContentInputs(0);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[13];
  }
  else
  {
    uint64_t result = type metadata accessor for _ChartContentOutputs(0);
    if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
    {
      *(void *)(a1 + a4[15]) = (a2 - 1);
      return result;
    }
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[14];
  }
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);

  return v13(a1 + v11, a2, a2, v9);
}

uint64_t sub_21F9587BC()
{
  uint64_t result = type metadata accessor for BuilderConditional.Storage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_21F958858(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v5 - 8) + 64) <= *(void *)(v6 + 64)) {
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v7 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  int v8 = *(_DWORD *)(*(void *)(v5 - 8) + 80) | *(_DWORD *)(v6 + 80);
  if ((v7 & 0xFFFFFFFFFFFFFFF8) + 16 <= 0x18 && (v8 & 0x1000F8) == 0)
  {
    uint64_t v11 = v7 + 1;
    unsigned int v12 = a2[v7];
    unsigned int v13 = v12 - 2;
    if (v12 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v14 = v7;
      }
      else {
        uint64_t v14 = 4;
      }
      switch(v14)
      {
        case 1:
          int v15 = *a2;
          goto LABEL_18;
        case 2:
          int v15 = *(unsigned __int16 *)a2;
          goto LABEL_18;
        case 3:
          int v15 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_18;
        case 4:
          int v15 = *(_DWORD *)a2;
LABEL_18:
          int v16 = (v15 | (v13 << (8 * v7))) + 2;
          unsigned int v12 = v15 + 2;
          if (v7 < 4) {
            unsigned int v12 = v16;
          }
          break;
        default:
          break;
      }
    }
    BOOL v17 = v12 == 1;
    if (v12 == 1)
    {
      uint64_t v6 = *(void *)(v5 - 8);
      uint64_t v18 = *(void *)(a3 + 24);
    }
    else
    {
      uint64_t v18 = *(void *)(a3 + 16);
    }
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v18);
    *((unsigned char *)v4 + v7) = v17;
    uint64_t v19 = *(void **)((unint64_t)&a2[v11 + 7] & 0xFFFFFFFFFFFFFFF8);
    *(void *)(((unint64_t)v4 + v11 + 7) & 0xFFFFFFFFFFFFFFF8) = v19;
    id v20 = v19;
  }
  else
  {
    uint64_t v10 = *(void *)a2;
    *uint64_t v4 = *(void *)a2;
    uint64_t v4 = (void *)(v10 + (((v8 & 0xF8 | 7u) + 16) & ~(unint64_t)(v8 & 0xF8 | 7u)));
    swift_retain();
  }
  return v4;
}

void sub_21F958A50(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  if (*(void *)(*(void *)(v3 - 8) + 64) <= *(void *)(v4 + 64)) {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(v3 - 8) + 64);
  }
  unsigned int v6 = a1[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a1;
        goto LABEL_13;
      case 2:
        int v9 = *(unsigned __int16 *)a1;
        goto LABEL_13;
      case 3:
        int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_13;
      case 4:
        int v9 = *(_DWORD *)a1;
LABEL_13:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1)
  {
    uint64_t v4 = *(void *)(v3 - 8);
    uint64_t v11 = *(void *)(a2 + 24);
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 16);
  }
  (*(void (**)(unsigned __int8 *, uint64_t))(v4 + 8))(a1, v11);
  unsigned int v12 = *(void **)((unint64_t)&a1[v5 + 8] & 0xFFFFFFFFFFFFFFF8);
}

uint64_t sub_21F958BD0(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v5 - 8) + 64) <= *(void *)(v6 + 64)) {
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v7 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  unsigned int v8 = a2[v7];
  unsigned int v9 = v8 - 2;
  if (v8 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a2;
        goto LABEL_13;
      case 2:
        int v11 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v11 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v11 = *(_DWORD *)a2;
LABEL_13:
        int v12 = (v11 | (v9 << (8 * v7))) + 2;
        unsigned int v8 = v11 + 2;
        if (v7 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  BOOL v13 = v8 == 1;
  if (v8 == 1)
  {
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v14 = *(void *)(a3 + 24);
  }
  else
  {
    uint64_t v14 = *(void *)(a3 + 16);
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v14);
  *(unsigned char *)(a1 + v7) = v13;
  int v15 = *(void **)((unint64_t)&a2[v7 + 8] & 0xFFFFFFFFFFFFFFF8);
  *(void *)((v7 + 8 + a1) & 0xFFFFFFFFFFFFFFF8) = v15;
  id v16 = v15;
  return a1;
}

unsigned __int8 *sub_21F958D6C(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  if (a1 != a2)
  {
    uint64_t v8 = *(void *)(a3 + 24);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(void *)(v9 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v10 = *(void *)(v7 + 64);
    }
    else {
      uint64_t v10 = *(void *)(v9 + 64);
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_14;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_14:
          int v15 = (v14 | (v12 << (8 * v10))) + 2;
          unsigned int v11 = v14 + 2;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1) {
      uint64_t v16 = *(void *)(*(void *)(a3 + 24) - 8);
    }
    else {
      uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v11 == 1) {
      uint64_t v17 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v17 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(a1, v17);
    unsigned int v18 = a2[v10];
    unsigned int v19 = v18 - 2;
    if (v18 < 2)
    {
      uint64_t v21 = v7;
    }
    else
    {
      if (v10 <= 3) {
        uint64_t v20 = v10;
      }
      else {
        uint64_t v20 = 4;
      }
      uint64_t v21 = v7;
      switch(v20)
      {
        case 1:
          int v22 = *a2;
          goto LABEL_32;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          goto LABEL_32;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_32;
        case 4:
          int v22 = *(_DWORD *)a2;
LABEL_32:
          int v23 = (v22 | (v19 << (8 * v10))) + 2;
          unsigned int v18 = v22 + 2;
          if (v10 < 4) {
            unsigned int v18 = v23;
          }
          break;
        default:
          break;
      }
    }
    BOOL v24 = v18 == 1;
    if (v18 == 1) {
      uint64_t v25 = v9;
    }
    else {
      uint64_t v25 = v21;
    }
    if (v18 == 1) {
      uint64_t v26 = v8;
    }
    else {
      uint64_t v26 = v6;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 16))(a1, a2, v26);
    a1[v10] = v24;
  }
  unint64_t v27 = *(void *)(v7 + 64);
  uint64_t v28 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v28 + 64) > v27) {
    unint64_t v27 = *(void *)(v28 + 64);
  }
  unint64_t v29 = v27 + 8;
  uint64_t v30 = (void **)((unint64_t)&a1[v29] & 0xFFFFFFFFFFFFFFF8);
  uint64_t v31 = *(void **)((unint64_t)&a2[v29] & 0xFFFFFFFFFFFFFFF8);
  uint64_t v32 = *v30;
  char *v30 = v31;
  id v33 = v31;

  return a1;
}

uint64_t sub_21F959028(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v5 - 8) + 64) <= *(void *)(v6 + 64)) {
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v7 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  unsigned int v8 = a2[v7];
  unsigned int v9 = v8 - 2;
  if (v8 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a2;
        goto LABEL_13;
      case 2:
        int v11 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v11 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v11 = *(_DWORD *)a2;
LABEL_13:
        int v12 = (v11 | (v9 << (8 * v7))) + 2;
        unsigned int v8 = v11 + 2;
        if (v7 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  BOOL v13 = v8 == 1;
  if (v8 == 1)
  {
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v14 = *(void *)(a3 + 24);
  }
  else
  {
    uint64_t v14 = *(void *)(a3 + 16);
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v14);
  *(unsigned char *)(a1 + v7) = v13;
  *(void *)((v7 + 8 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v7 + 8] & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

unsigned __int8 *sub_21F9591C0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  if (a1 != a2)
  {
    uint64_t v8 = *(void *)(a3 + 24);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(void *)(v9 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v10 = *(void *)(v7 + 64);
    }
    else {
      uint64_t v10 = *(void *)(v9 + 64);
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_14;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_14:
          int v15 = (v14 | (v12 << (8 * v10))) + 2;
          unsigned int v11 = v14 + 2;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1) {
      uint64_t v16 = *(void *)(*(void *)(a3 + 24) - 8);
    }
    else {
      uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v11 == 1) {
      uint64_t v17 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v17 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(a1, v17);
    unsigned int v18 = a2[v10];
    unsigned int v19 = v18 - 2;
    if (v18 < 2)
    {
      uint64_t v21 = v7;
    }
    else
    {
      if (v10 <= 3) {
        uint64_t v20 = v10;
      }
      else {
        uint64_t v20 = 4;
      }
      uint64_t v21 = v7;
      switch(v20)
      {
        case 1:
          int v22 = *a2;
          goto LABEL_32;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          goto LABEL_32;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_32;
        case 4:
          int v22 = *(_DWORD *)a2;
LABEL_32:
          int v23 = (v22 | (v19 << (8 * v10))) + 2;
          unsigned int v18 = v22 + 2;
          if (v10 < 4) {
            unsigned int v18 = v23;
          }
          break;
        default:
          break;
      }
    }
    BOOL v24 = v18 == 1;
    if (v18 == 1) {
      uint64_t v25 = v9;
    }
    else {
      uint64_t v25 = v21;
    }
    if (v18 == 1) {
      uint64_t v26 = v8;
    }
    else {
      uint64_t v26 = v6;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 32))(a1, a2, v26);
    a1[v10] = v24;
  }
  unint64_t v27 = *(void *)(v7 + 64);
  uint64_t v28 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v28 + 64) > v27) {
    unint64_t v27 = *(void *)(v28 + 64);
  }
  unint64_t v29 = v27 + 8;
  uint64_t v30 = (void **)((unint64_t)&a1[v29] & 0xFFFFFFFFFFFFFFF8);
  uint64_t v31 = *v30;
  char *v30 = *(void **)((unint64_t)&a2[v29] & 0xFFFFFFFFFFFFFFF8);

  return a1;
}

uint64_t sub_21F959478(_DWORD *a1, int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v4 + 64) > v3) {
    unint64_t v3 = *(void *)(v4 + 64);
  }
  if (!a2) {
    return 0;
  }
  if ((a2 & 0x80000000) == 0) {
    goto LABEL_5;
  }
  unint64_t v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v8 = v7 & 0xFFFFFFF8;
  unsigned int v9 = a2 - 2147483646;
  if ((v7 & 0xFFFFFFF8) != 0) {
    unsigned int v9 = 2;
  }
  if (v9 >= 0x10000) {
    int v10 = 4;
  }
  else {
    int v10 = 2;
  }
  if (v9 < 0x100) {
    int v11 = 1;
  }
  else {
    int v11 = v10;
  }
  if (v11 == 4)
  {
    int v12 = *(_DWORD *)((char *)a1 + v7);
    if (!v12) {
      goto LABEL_5;
    }
  }
  else if (v11 == 2)
  {
    int v12 = *(unsigned __int16 *)((char *)a1 + v7);
    if (!v12) {
      goto LABEL_5;
    }
  }
  else
  {
    int v12 = *((unsigned __int8 *)a1 + v7);
    if (!v12)
    {
LABEL_5:
      unint64_t v5 = *(void *)(((unint64_t)a1 + v3 + 8) & 0xFFFFFFFFFFFFFFF8);
      if (v5 >= 0xFFFFFFFF) {
        LODWORD(v5) = -1;
      }
      return (v5 + 1);
    }
  }
  int v13 = v12 - 1;
  if (v8)
  {
    int v13 = 0;
    LODWORD(v8) = *a1;
  }
  return (v8 | v13) ^ 0x80000000;
}

void sub_21F959564(unsigned char *a1, int a2, int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (*(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  }
  size_t v6 = (v5 & 0xFFFFFFFFFFFFFFF8) + 16;
  if (a3 < 0)
  {
    unsigned int v8 = a3 - 2147483646;
    if ((v5 & 0xFFFFFFF8) != 0xFFFFFFF0) {
      unsigned int v8 = 2;
    }
    if (v8 >= 0x10000) {
      int v9 = 4;
    }
    else {
      int v9 = 2;
    }
    if (v8 < 0x100) {
      int v7 = 1;
    }
    else {
      int v7 = v9;
    }
    if ((a2 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
    int v7 = 0;
    if ((a2 & 0x80000000) == 0)
    {
LABEL_5:
      switch(v7)
      {
        case 1:
          a1[v6] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 2:
          *(_WORD *)&a1[v6] = 0;
          goto LABEL_25;
        case 3:
          goto LABEL_32;
        case 4:
          *(_DWORD *)&a1[v6] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        default:
LABEL_25:
          if (a2) {
LABEL_26:
          }
            *(void *)((unint64_t)&a1[v5 + 8] & 0xFFFFFFFFFFFFFFF8) = (a2 - 1);
          break;
      }
      return;
    }
  }
  if ((v5 & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v10 = a2 - 0x7FFFFFFF;
  }
  else {
    int v10 = 1;
  }
  if ((v5 & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v11 = a2 ^ 0x80000000;
    bzero(a1, v6);
    *(_DWORD *)a1 = v11;
  }
  switch(v7)
  {
    case 1:
      a1[v6] = v10;
      break;
    case 2:
      *(_WORD *)&a1[v6] = v10;
      break;
    case 3:
LABEL_32:
      __break(1u);
      JUMPOUT(0x21F9596CCLL);
    case 4:
      *(_DWORD *)&a1[v6] = v10;
      break;
    default:
      return;
  }
}

uint64_t sub_21F9596F4()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for BuilderConditional.FalseChild()
{
  return sub_21F764F08();
}

uint64_t sub_21F959728(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for BuilderConditional.TrueChild()
{
  return sub_21F764F08();
}

uint64_t sub_21F9597A0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  long long v4 = *(_OWORD *)(v0 + 40);
  return (*(uint64_t (**)(uint64_t, long long *))(v1 + 32))(v2, &v4);
}

uint64_t sub_21F9597F0()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F95980C()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F95982C@<X0>(unsigned char *a1@<X8>)
{
  return sub_21F921C9C(a1);
}

uint64_t static PlottableValue.value(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  __n128 v12 = MEMORY[0x270FA5388](a1);
  int v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))(v14, v16, v17, v12);
  a3 &= 1u;
  sub_21F753D84(a1, a2, a3, a4, (uint64_t)v14, a5, a6);
  sub_21F7652C0(a1, a2, a3);
  return swift_bridgeObjectRetain();
}

uint64_t sub_21F959964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = v3[5];
  uint64_t v8 = v3[6];
  uint64_t v9 = v3[3];
  uint64_t v10 = v3[4];
  unsigned int v11 = sub_21F77E0FC(v3, v9);
  return sub_21F964044(v7, (uint64_t)v11, a1, a2, v7, v9, a3, v8, v10);
}

uint64_t sub_21F9599E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)a7 = a1;
  *(void *)(a7 + 8) = a2;
  *(unsigned char *)(a7 + 16) = a3 & 1;
  *(void *)(a7 + 24) = a4;
  uint64_t v9 = a7 + *(int *)(type metadata accessor for PlottableValue() + 36);
  uint64_t v10 = v9 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  unsigned int v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32);
  v11(v9, a5, a6);
  uint64_t v12 = sub_21FA26210();
  v11(v10, a5 + *(int *)(v12 + 36), a6);
  type metadata accessor for PlottableValue.Storage();

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_21F959B04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = v8[5];
  uint64_t v14 = v8[6];
  uint64_t v16 = v8[3];
  uint64_t v17 = v8[4];
  unsigned int v18 = sub_21F77E0FC(v8, v16);
  return sub_21F9645AC(v15, (uint64_t)v18, a2, a1, a3, a4, a5, v15, v16, a6, a7, a8, v14, v17);
}

double sub_21F959BA4@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v5 = v2[5];
  uint64_t v6 = v2[6];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = sub_21F77E0FC(v2, v7);
  if (sub_21F963CD0(v5, (uint64_t)v9, a1, v5, v7, v6, v8))
  {
    sub_21F964CB0((uint64_t)v2, a2);
  }
  else
  {
    *(void *)(a2 + 48) = 0;
    double result = 0.0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  return result;
}

uint64_t sub_21F959C58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = type metadata accessor for PlottableValue.Storage();
  __n128 v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v14 - v8;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))((char *)&v14 - v8, v2 + *(int *)(a1 + 36), v6, v7);
  if (swift_getEnumCaseMultiPayload() != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v5 - 8) + 32))(a2, v9, v5);
  }
  unsigned int v11 = &v9[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  uint64_t v12 = *(void *)(v5 - 8);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a2, v9, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v11, v5);
}

uint64_t sub_21F959E10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for PlottableProjection();
  a4[3] = v8;
  a4[4] = swift_getWitnessTable();
  uint64_t v9 = sub_21F77E8F8(a4);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v9, a1, v8);
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t static PlottableValue.value<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = &v22[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __n128 v11 = MEMORY[0x270FA5388](v10);
  (*(void (**)(unsigned char *, __n128))(v13 + 16))(&v22[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)], v11);
  uint64_t v14 = sub_21FA25350();
  uint64_t v16 = v15;
  char v18 = v17;
  uint64_t v20 = v19;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, a3);
  return sub_21F753D84(v14, v16, v18 & 1, v20, (uint64_t)v9, a3, a4);
}

uint64_t static PlottableValue.value<>(_:_:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  uint64_t v19 = a4;
  uint64_t v20 = a3;
  uint64_t v6 = sub_21FA26210();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v18 - v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_21FA25340();
  uint64_t v12 = v11;
  char v14 = v13;
  uint64_t v16 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  return sub_21F9599E8(v10, v12, v14 & 1, v16, (uint64_t)v9, a2, v19);
}

uint64_t static PlottableValue.value<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v26 = a6;
  uint64_t v27 = a5;
  uint64_t v10 = sub_21FA26210();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  char v13 = (char *)&v25 - v12;
  __n128 v15 = MEMORY[0x270FA5388](v14);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16))((char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a4, v15);
  uint64_t v18 = sub_21FA25350();
  uint64_t v20 = v19;
  LOBYTE(a4) = v21;
  uint64_t v23 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  return sub_21F9599E8(v18, v20, a4 & 1, v23, (uint64_t)v13, a3, v26);
}

uint64_t static PlottableValue.value<>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = sub_21FA26210();
  __n128 v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = &v20[-v16];
  (*(void (**)(unsigned char *, uint64_t, __n128))(v18 + 16))(&v20[-v16], a5, v15);
  sub_21F9599E8(a1, a2, a3 & 1, a4, (uint64_t)v17, a6, a7);
  sub_21F7652C0(a1, a2, a3 & 1);
  return swift_bridgeObjectRetain();
}

uint64_t static PlottableValue.value<A>(_:_:unit:calendar:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v60 = a6;
  uint64_t v65 = a1;
  uint64_t v66 = a5;
  uint64_t v69 = a4;
  uint64_t v70 = a3;
  uint64_t v71 = a2;
  uint64_t v64 = a7;
  uint64_t v72 = sub_21F76CA40(&qword_26AD4A490);
  MEMORY[0x270FA5388](v72);
  uint64_t v55 = (char *)v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  int v59 = (char *)v53 - v9;
  uint64_t v68 = sub_21FA241F0();
  uint64_t v58 = *(void *)(v68 - 8);
  MEMORY[0x270FA5388](v68);
  double v67 = (char *)v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  char v13 = (char *)v53 - v12;
  uint64_t v61 = sub_21F76CA40(&qword_26AD45360);
  MEMORY[0x270FA5388](v61);
  uint64_t v62 = (char *)v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v63 = (uint64_t)v53 - v16;
  uint64_t v17 = sub_21F76CA40(&qword_26AD45870);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_21FA23EA0();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_21F76CA40(&qword_26AD48588);
  MEMORY[0x270FA5388](v24 - 8);
  uint64_t v26 = (char *)v53 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_21FA24320();
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v30 = (char *)v53 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = v31;
  sub_21F76C978(v69, (uint64_t)v26, &qword_26AD48588);
  int v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v32);
  uint64_t v56 = v28;
  uint64_t v57 = v32;
  if (v33 == 1)
  {
    sub_21FA242B0();
    sub_21F76CA84((uint64_t)v26, &qword_26AD48588);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v30, v26, v32);
  }
  sub_21FA24250();
  uint64_t v34 = v20;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20);
  if (result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v23, v19, v20);
    uint64_t v36 = v21;
    sub_21FA23E90();
    uint64_t v37 = v67;
    sub_21FA23E80();
    unint64_t v38 = sub_21F76CEC0();
    uint64_t v39 = v68;
    uint64_t result = sub_21FA25C70();
    if (result)
    {
      uint64_t v69 = v36;
      uint64_t v70 = v34;
      uint64_t v40 = v72;
      uint64_t v41 = *(int *)(v72 + 48);
      v53[1] = v38;
      uint64_t v54 = v23;
      uint64_t v42 = v59;
      uint64_t v43 = &v59[v41];
      uint64_t v71 = v30;
      uint64_t v44 = v58;
      uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
      v45(v59, v13, v39);
      v45(v43, v37, v39);
      uint64_t v46 = v55;
      uint64_t v47 = &v55[*(int *)(v40 + 48)];
      uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
      v48(v55, v42, v39);
      v48(v47, v43, v39);
      uint64_t v49 = (uint64_t)v62;
      v45(v62, v46, v39);
      uint64_t v50 = *(void (**)(char *, uint64_t))(v44 + 8);
      v50(v47, v39);
      uint64_t v51 = &v46[*(int *)(v72 + 48)];
      v45(v46, v42, v39);
      v45(v51, v43, v39);
      v45((char *)(v49 + *(int *)(v61 + 36)), v51, v39);
      v50(v46, v39);
      uint64_t v52 = v63;
      sub_21F76CB0C(v49, v63);
      static PlottableValue.value<A>(_:_:)(v65, v52, v39, v66, (uint64_t)&protocol witness table for Date, v64);
      sub_21F76CA84(v52, &qword_26AD45360);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v54, v70);
      return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v71, v57);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static PlottableValue.value<>(_:_:unit:calendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, char *a5@<X4>, char *a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v65 = a7;
  uint64_t v66 = a6;
  double v67 = a5;
  uint64_t v70 = a4;
  int v59 = a3;
  uint64_t v61 = a1;
  uint64_t v62 = a2;
  uint64_t v60 = a8;
  uint64_t v68 = sub_21F76CA40(&qword_26AD4A490);
  MEMORY[0x270FA5388](v68);
  uint64_t v58 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v55 = (char *)&v53 - v10;
  uint64_t v64 = sub_21FA241F0();
  uint64_t v56 = *(void *)(v64 - 8);
  MEMORY[0x270FA5388](v64);
  uint64_t v63 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v53 - v13;
  uint64_t v69 = sub_21F76CA40(&qword_26AD45360);
  MEMORY[0x270FA5388](v69);
  uint64_t v54 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v57 = (uint64_t)&v53 - v17;
  uint64_t v18 = sub_21F76CA40(&qword_26AD45870);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_21FA23EA0();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_21F76CA40(&qword_26AD48588);
  MEMORY[0x270FA5388](v25 - 8);
  uint64_t v27 = (char *)&v53 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_21FA24320();
  uint64_t v29 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v31 = (char *)&v53 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F76C978(v65, (uint64_t)v27, &qword_26AD48588);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28) == 1)
  {
    sub_21FA242B0();
    sub_21F76CA84((uint64_t)v27, &qword_26AD48588);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v31, v27, v28);
  }
  sub_21FA24250();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21);
  if (result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v24, v20, v21);
    sub_21FA23E90();
    int v33 = v63;
    sub_21FA23E80();
    sub_21F76CEC0();
    uint64_t v34 = v64;
    char v35 = sub_21FA25C70();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v31, v28);
    if (v35)
    {
      uint64_t v36 = v68;
      unint64_t v38 = v55;
      uint64_t v37 = v56;
      uint64_t v39 = &v55[*(int *)(v68 + 48)];
      uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
      v40(v55, v14, v34);
      double v67 = v39;
      v40(v39, v33, v34);
      uint64_t v41 = v58;
      uint64_t v66 = &v58[*(int *)(v36 + 48)];
      uint64_t v42 = v66;
      uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
      v43(v58, v38, v34);
      v43(v42, v39, v34);
      uint64_t v44 = (uint64_t)v54;
      v40(v54, v41, v34);
      uint64_t v45 = *(void (**)(char *, uint64_t))(v37 + 8);
      v45(v66, v34);
      uint64_t v46 = &v41[*(int *)(v68 + 48)];
      v40(v41, v38, v34);
      v40(v46, v67, v34);
      v40((char *)(v44 + *(int *)(v69 + 36)), v46, v34);
      v45(v41, v34);
      uint64_t v47 = v57;
      sub_21F76CB0C(v44, v57);
      sub_21F76C978(v47, v44, &qword_26AD45360);
      uint64_t v49 = v60;
      uint64_t v48 = v61;
      uint64_t v50 = v62;
      *uint64_t v60 = v61;
      v49[1] = v50;
      LOBYTE(v46) = v59 & 1;
      *((unsigned char *)v49 + 16) = v59 & 1;
      v49[3] = v70;
      uint64_t v51 = (char *)v49 + *(int *)(sub_21F76CA40(&qword_26AD46A40) + 36);
      uint64_t v52 = &v51[*(int *)(sub_21F76CA40(&qword_26AD455C0) + 48)];
      v40(v51, (char *)v44, v34);
      v40(v52, (char *)(v44 + *(int *)(v69 + 36)), v34);
      sub_21F76CA40(&qword_26AD45B68);
      swift_storeEnumTagMultiPayload();
      sub_21F7652C0(v48, v50, (char)v46);
      swift_bridgeObjectRetain();
      return sub_21F76CA84(v47, &qword_26AD45360);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_21F95B1FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  *(void *)a7 = a1;
  *(void *)(a7 + 8) = a2;
  *(unsigned char *)(a7 + 16) = a3 & 1;
  *(void *)(a7 + 24) = a4;
  uint64_t v10 = type metadata accessor for PlottableProjection();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a7 + *(int *)(v10 + 44), a5, a6);
  type metadata accessor for PlottableProjection.Storage();

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_21F95B2CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v52 = a6;
  uint64_t v43 = a1;
  uint64_t v44 = a4;
  int v40 = a3;
  uint64_t v50 = a9;
  uint64_t v51 = a8;
  uint64_t v48 = sub_21FA241F0();
  uint64_t v49 = type metadata accessor for PlottableProjection.Storage();
  uint64_t v47 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  uint64_t v46 = (char *)&v38 - v12;
  uint64_t v13 = sub_21F76CA40(&qword_26AD45870);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_21FA23EA0();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_21F76CA40(&qword_26AD48588);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_21FA24320();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v53 = (char *)&v38 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = v26;
  sub_21F76C978(a7, (uint64_t)v22, &qword_26AD48588);
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v27);
  uint64_t v45 = a7;
  uint64_t v41 = v24;
  if (v28 == 1)
  {
    sub_21FA242B0();
    sub_21F76CA84((uint64_t)v22, &qword_26AD48588);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v53, v22, v27);
  }
  uint64_t v42 = v27;
  sub_21FA24250();
  uint64_t v29 = v17;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16);
  uint64_t v39 = a5;
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v15, v16);
    uint64_t v31 = v50;
    uint64_t v38 = v16;
    uint64_t v32 = v43;
    *uint64_t v50 = v43;
    v31[1] = a2;
    char v33 = v40 & 1;
    *((unsigned char *)v31 + 16) = v40 & 1;
    v31[3] = v44;
    sub_21F76CA40(&qword_26AD455C0);
    uint64_t v34 = v46;
    sub_21F7652C0(v32, a2, v33);
    swift_bridgeObjectRetain();
    sub_21FA23E90();
    sub_21FA23E80();
    sub_21F7656A8(v32, a2, v33);
    swift_bridgeObjectRelease();
    sub_21F76CA84(v45, &qword_26AD48588);
    uint64_t v35 = sub_21FA24310();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v35 - 8) + 8))(v52, v35);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8))(v39, v48);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v19, v38);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v53, v42);
    uint64_t v36 = v49;
    swift_storeEnumTagMultiPayload();
    uint64_t v37 = type metadata accessor for PlottableProjection();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v47 + 32))((char *)v31 + *(int *)(v37 + 44), v34, v36);
  }
  return result;
}

uint64_t sub_21F95B7B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  *(void *)a8 = a1;
  *(void *)(a8 + 8) = a2;
  *(unsigned char *)(a8 + 16) = a3 & 1;
  *(void *)(a8 + 24) = a4;
  uint64_t v11 = a8 + *(int *)(type metadata accessor for PlottableProjection() + 44);
  uint64_t v12 = v11 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32);
  v13(v11, a5, a7);
  v13(v12, a6, a7);
  type metadata accessor for PlottableProjection.Storage();

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_21F95B8D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(unsigned char *)(a6 + 16) = a3 & 1;
  *(void *)(a6 + 24) = a4;
  *(void *)(a6 + *(int *)(type metadata accessor for PlottableProjection() + 44)) = a5;
  type metadata accessor for PlottableProjection.Storage();

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_21F95B9A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v30 = a6;
  uint64_t v31 = a8;
  uint64_t v29 = a4;
  int v28 = a3;
  v27[1] = *a5;
  uint64_t v14 = sub_21F76CA40(&qword_26AD48588);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_21FA24320();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F76C978(a7, (uint64_t)v16, &qword_26AD48588);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_21FA242B0();
    sub_21F76CA84(a7, &qword_26AD48588);
    sub_21F76CA84((uint64_t)v16, &qword_26AD48588);
  }
  else
  {
    sub_21F76CA84(a7, &qword_26AD48588);
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v16, v17);
  }
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(unsigned char *)(a9 + 16) = v28 & 1;
  *(void *)(a9 + 24) = v29;
  uint64_t v21 = (void *)(a9 + *(int *)(type metadata accessor for PlottableProjection() + 44));
  sub_21FA26AD0();
  uint64_t v22 = sub_21FA24310();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v24 = (char *)v21 + *(int *)(TupleTypeMetadata3 + 48);
  uint64_t v25 = (char *)v21 + *(int *)(TupleTypeMetadata3 + 64);
  *uint64_t v21 = a5;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 32))(v24, v30, v22);
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v25, v20, v17);
  type metadata accessor for PlottableProjection.Storage();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_21F95BC94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)a7 = a1;
  *(void *)(a7 + 8) = a2;
  *(unsigned char *)(a7 + 16) = a3 & 1;
  *(void *)(a7 + 24) = a4;
  uint64_t v9 = (void *)(a7 + *(int *)(type metadata accessor for PlottableProjection() + 44));
  *uint64_t v9 = a5;
  v9[1] = a6;
  type metadata accessor for PlottableProjection.Storage();

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_21F95BD68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v8 = *(void *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a2, v3, a1);
  uint64_t v6 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56);

  return v6(a2, 0, 1, a1);
}

uint64_t static PlottableProjection.value(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v8 = a3 & 1;
  sub_21F95B8D4(a1, a2, a3 & 1, a4, a5, a6);
  sub_21F7652C0(a1, a2, v8);
  swift_bridgeObjectRetain();

  return swift_retain();
}

uint64_t static PlottableProjection.value<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v5 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, __n128))(v7 + 16))((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  uint64_t v8 = sub_21FA25350();
  sub_21F95B8D4(v8, v10, v9 & 1, v11, a2, a3);
  return swift_retain();
}

uint64_t static PlottableProjection.value(_:_:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_21FA25340();
  sub_21F95B8D4(v4, v6, v5 & 1, v7, a1, a2);

  return swift_retain();
}

uint64_t static PlottableProjection.value<>(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v9 = a3 & 1;
  sub_21F95BC94(a1, a2, a3 & 1, a4, a5, a6, a7);
  sub_21F7652C0(a1, a2, v9);
  swift_bridgeObjectRetain();
  swift_retain();

  return swift_retain();
}

uint64_t static PlottableProjection.value<A>(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __n128 v7 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, __n128))(v9 + 16))((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  uint64_t v10 = sub_21FA25350();
  sub_21F95BC94(v10, v12, v11 & 1, v13, a2, a3, a4);
  swift_retain();
  return swift_retain();
}

uint64_t static PlottableProjection.value<>(_:_:_:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_21FA25340();
  sub_21F95BC94(v6, v8, v7 & 1, v9, a1, a2, a3);
  swift_retain();

  return swift_retain();
}

uint64_t static PlottableProjection<>.value(_:_:unit:calendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  v27[0] = a8;
  uint64_t v17 = sub_21F76CA40(&qword_26AD48588);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_21FA24310();
  __n128 v21 = MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)v27 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v24 + 16))(v23, a6, v21);
  sub_21F76C978(a7, (uint64_t)v19, &qword_26AD48588);
  int v25 = a3 & 1;
  sub_21F7652C0(a1, a2, v25);
  swift_bridgeObjectRetain();
  swift_retain();
  return sub_21F95B9A4(a1, a2, v25, a4, a5, (uint64_t)v23, (uint64_t)v19, v27[0], a9);
}

uint64_t static PlottableProjection<>.value<A>(_:_:unit:calendar:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v30 = a7;
  uint64_t v31 = a6;
  uint64_t v29 = a4;
  uint64_t v11 = sub_21F76CA40(&qword_26AD48588);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_21FA24310();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v19 = MEMORY[0x270FA5388](v18);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v21 + 16))((char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a5, v19);
  uint64_t v22 = sub_21FA25350();
  uint64_t v24 = v23;
  LOBYTE(a5) = v25;
  uint64_t v27 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3, v14);
  sub_21F76C978(v29, (uint64_t)v13, &qword_26AD48588);
  swift_retain();
  return sub_21F95B9A4(v22, v24, a5 & 1, v27, a2, (uint64_t)v17, (uint64_t)v13, v31, v30);
}

uint64_t static PlottableProjection<>.value(_:_:unit:calendar:)@<X0>(void *a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v23 = a5;
  uint64_t v24 = a4;
  uint64_t v22 = a3;
  uint64_t v7 = sub_21F76CA40(&qword_26AD48588);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_21FA24310();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_21FA25340();
  uint64_t v16 = v15;
  char v18 = v17;
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  sub_21F76C978(v22, (uint64_t)v9, &qword_26AD48588);
  swift_retain();
  return sub_21F95B9A4(v14, v16, v18 & 1, v20, a1, (uint64_t)v13, (uint64_t)v9, v24, v23);
}

uint64_t static PlottableProjection.value(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  __n128 v12 = MEMORY[0x270FA5388](a1);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))(v14, v16, v17, v12);
  a3 &= 1u;
  sub_21F95B1FC(a1, a2, a3, a4, (uint64_t)v14, a5, a6);
  sub_21F7652C0(a1, a2, a3);
  return swift_bridgeObjectRetain();
}

uint64_t static PlottableProjection.value<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  v23[0] = a4;
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v12 = MEMORY[0x270FA5388](v11);
  (*(void (**)(char *, __n128))(v14 + 16))((char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  uint64_t v15 = sub_21FA25350();
  uint64_t v17 = v16;
  char v19 = v18;
  uint64_t v21 = v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, a3);
  return sub_21F95B1FC(v15, v17, v19 & 1, v21, (uint64_t)v10, a3, a5);
}

uint64_t static PlottableProjection.value(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v19 = a4;
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_21FA25340();
  uint64_t v13 = v12;
  char v15 = v14;
  uint64_t v17 = v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, a3);
  return sub_21F95B1FC(v11, v13, v15 & 1, v17, (uint64_t)v10, a3, a5);
}

uint64_t static PlottableProjection.value<>(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v26 = a6;
  int v25 = a3;
  uint64_t v24 = a8;
  uint64_t v13 = *(void *)(a7 - 8);
  MEMORY[0x270FA5388](a1);
  char v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v24 - v18;
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16);
  v20((char *)&v24 - v18, v21, v22, v17);
  ((void (*)(char *, uint64_t, uint64_t))v20)(v15, a5, a7);
  LOBYTE(a5) = v25 & 1;
  sub_21F95B7B8(a1, a2, v25 & 1, a4, (uint64_t)v19, (uint64_t)v15, a7, v24);
  sub_21F7652C0(a1, a2, a5);
  return swift_bridgeObjectRetain();
}

uint64_t static PlottableProjection.value<A>(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v31 = a6;
  uint64_t v32 = a4;
  uint64_t v29 = a3;
  uint64_t v30 = a7;
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v28 - v13;
  __n128 v16 = MEMORY[0x270FA5388](v15);
  (*(void (**)(char *, __n128))(v18 + 16))((char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v16);
  uint64_t v19 = sub_21FA25350();
  uint64_t v21 = v20;
  char v23 = v22;
  uint64_t v25 = v24;
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v26(v14, a2, a5);
  v26(v11, v29, a5);
  return sub_21F95B7B8(v19, v21, v23 & 1, v25, (uint64_t)v14, (uint64_t)v11, a5, v30);
}

uint64_t static PlottableProjection.value<>(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7)
{
  uint64_t v26 = a6;
  uint64_t v27 = a4;
  uint64_t v25 = a3;
  uint64_t v9 = *(void *)(a5 - 8);
  v24[1] = a7;
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v24 - v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_21FA25340();
  uint64_t v17 = v16;
  char v19 = v18;
  uint64_t v21 = v20;
  char v22 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v22(v14, a2, a5);
  v22(v11, v25, a5);
  return sub_21F95B7B8(v15, v17, v19 & 1, v21, (uint64_t)v14, (uint64_t)v11, a5, v26);
}

uint64_t static PlottableProjection<>.value(_:_:unit:calendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v30 = a9;
  uint64_t v31 = a8;
  uint64_t v28 = a7;
  int v29 = a3;
  uint64_t v14 = sub_21F76CA40(&qword_26AD48588);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_21FA24310();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_21FA241F0();
  __n128 v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v27 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v25 + 16))(v24, a5, v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a6, v17);
  sub_21F76C978(v28, (uint64_t)v16, &qword_26AD48588);
  LODWORD(v17) = v29 & 1;
  sub_21F7652C0(a1, a2, v29 & 1);
  swift_bridgeObjectRetain();
  return sub_21F95B2CC(a1, a2, v17, a4, (uint64_t)v24, (uint64_t)v20, (uint64_t)v16, v31, v30);
}

uint64_t static PlottableProjection<>.value<A>(_:_:unit:calendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v36 = a7;
  uint64_t v37 = a5;
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  uint64_t v33 = a2;
  uint64_t v9 = sub_21F76CA40(&qword_26AD48588);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_21FA24310();
  uint64_t v12 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_21FA241F0();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v20 = MEMORY[0x270FA5388](v19);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v22 + 16))((char *)&v31 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a6, v20);
  uint64_t v23 = sub_21FA25350();
  uint64_t v25 = v24;
  char v27 = v26;
  uint64_t v29 = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v33, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v34, v32);
  sub_21F76C978(v35, (uint64_t)v11, &qword_26AD48588);
  return sub_21F95B2CC(v23, v25, v27 & 1, v29, (uint64_t)v18, (uint64_t)v14, (uint64_t)v11, v37, v36);
}

uint64_t static PlottableProjection<>.value(_:_:unit:calendar:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t *a5@<X8>)
{
  uint64_t v28 = a5;
  uint64_t v29 = a4;
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  uint64_t v25 = a1;
  uint64_t v5 = sub_21F76CA40(&qword_26AD48588);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_21FA24310();
  uint64_t v8 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_21FA241F0();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_21FA25340();
  uint64_t v17 = v16;
  char v19 = v18;
  uint64_t v21 = v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v25, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v26, v24);
  sub_21F76C978(v27, (uint64_t)v7, &qword_26AD48588);
  return sub_21F95B2CC(v15, v17, v19 & 1, v21, (uint64_t)v14, (uint64_t)v10, (uint64_t)v7, v29, v28);
}

uint64_t sub_21F95D914(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32);
}

uint64_t sub_21F95D91C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  unint64_t v9 = *(void *)(v5 + 64);
  uint64_t v10 = v9 + v7;
  if (((v9 + v8) & ~v8) + v9 <= v9) {
    uint64_t v11 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v11 = ((v9 + v7) & ~(unint64_t)v7) + v9;
  }
  unint64_t v12 = ((v7 + 32) & ~(unint64_t)v7) + v11 + 1;
  int v13 = v7 & 0x100000;
  if (v8 > 7 || v13 != 0 || v12 > 0x18)
  {
    uint64_t v16 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v16 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16));
    swift_retain();
  }
  else
  {
    uint64_t v33 = *(void *)(a3 + 16);
    uint64_t v17 = *(void *)a2;
    uint64_t v18 = *(void *)(a2 + 8);
    char v19 = *(unsigned char *)(a2 + 16);
    sub_21F7652C0(*(void *)a2, v18, v19);
    *(void *)a1 = v17;
    *(void *)(a1 + 8) = v18;
    *(unsigned char *)(a1 + 16) = v19;
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    uint64_t v20 = a1 + v8;
    uint64_t v21 = a2 + v8;
    uint64_t v22 = ~v8;
    uint64_t v23 = (v20 + 32) & v22;
    uint64_t v24 = (unsigned __int8 *)((v21 + 32) & v22);
    unsigned int v25 = v24[v11];
    swift_bridgeObjectRetain();
    if (v25 < 2)
    {
      uint64_t v27 = v33;
    }
    else
    {
      if (v11 <= 3) {
        uint64_t v26 = v11;
      }
      else {
        uint64_t v26 = 4;
      }
      uint64_t v27 = v33;
      switch(v26)
      {
        case 1:
          int v28 = *v24;
          goto LABEL_23;
        case 2:
          int v28 = *(unsigned __int16 *)v24;
          goto LABEL_23;
        case 3:
          int v28 = *(unsigned __int16 *)v24 | (v24[2] << 16);
          goto LABEL_23;
        case 4:
          int v28 = *(_DWORD *)v24;
LABEL_23:
          int v29 = (v28 | ((v25 - 2) << (8 * v11))) + 2;
          unsigned int v30 = v28 + 2;
          if (v11 >= 4) {
            unsigned int v25 = v30;
          }
          else {
            unsigned int v25 = v29;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v31 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 16);
    v31(v23, v24, v27);
    if (v25 == 1)
    {
      v31((v10 + v23) & v22, (unsigned __int8 *)((unint64_t)&v24[v10] & v22), v27);
      *(unsigned char *)(v23 + v11) = 1;
    }
    else
    {
      *(unsigned char *)(v23 + v11) = 0;
    }
  }
  return a1;
}

uint64_t sub_21F95DB7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  sub_21F7652C0(*(void *)a2, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  char v11 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  sub_21F7656A8(v9, v10, v11);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = (unsigned __int8 *)((v14 + 32 + a1) & ~v14);
  uint64_t v16 = v14 + 32 + a2;
  uint64_t v17 = (unsigned __int8 *)(v16 & ~v14);
  if (v15 != v17)
  {
    uint64_t v18 = *(void *)(v12 - 8);
    uint64_t v37 = v14 + 32 + a1;
    uint64_t v35 = v16;
    unint64_t v19 = *(void *)(v13 + 64);
    uint64_t v36 = ~v14;
    if (((v19 + v14) & ~v14) + v19 <= v19) {
      uint64_t v20 = *(void *)(v13 + 64);
    }
    else {
      uint64_t v20 = ((v19 + v14) & ~v14) + v19;
    }
    unsigned int v21 = v15[v20];
    if (v21 >= 2)
    {
      if (v20 <= 3) {
        uint64_t v22 = v20;
      }
      else {
        uint64_t v22 = 4;
      }
      switch(v22)
      {
        case 1:
          int v23 = *v15;
          goto LABEL_14;
        case 2:
          int v23 = *(unsigned __int16 *)v15;
          goto LABEL_14;
        case 3:
          int v23 = *(unsigned __int16 *)((v14 + 32 + a1) & ~v14) | (*(unsigned __int8 *)(((v14 + 32 + a1) & ~v14) + 2) << 16);
          goto LABEL_14;
        case 4:
          int v23 = *(_DWORD *)v15;
LABEL_14:
          int v24 = (v23 | ((v21 - 2) << (8 * v20))) + 2;
          unsigned int v25 = v23 + 2;
          if (v20 >= 4) {
            unsigned int v21 = v25;
          }
          else {
            unsigned int v21 = v24;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v26 = *(void (**)(unsigned __int8 *, uint64_t))(v18 + 8);
    uint64_t v38 = v12;
    v26(v15, v12);
    if (v21 == 1) {
      v26((unsigned __int8 *)(((v37 | v14) + v19) & v36), v38);
    }
    unsigned int v27 = v17[v20];
    if (v27 >= 2)
    {
      if (v20 <= 3) {
        uint64_t v28 = v20;
      }
      else {
        uint64_t v28 = 4;
      }
      switch(v28)
      {
        case 1:
          int v29 = *v17;
          goto LABEL_28;
        case 2:
          int v29 = *(unsigned __int16 *)v17;
          goto LABEL_28;
        case 3:
          int v29 = *(unsigned __int16 *)v17 | (v17[2] << 16);
          goto LABEL_28;
        case 4:
          int v29 = *(_DWORD *)v17;
LABEL_28:
          int v30 = (v29 | ((v27 - 2) << (8 * v20))) + 2;
          unsigned int v31 = v29 + 2;
          if (v20 >= 4) {
            unsigned int v27 = v31;
          }
          else {
            unsigned int v27 = v30;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v32 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v18 + 16);
    v32(v15, v17, v38);
    if (v27 == 1)
    {
      v32((unsigned __int8 *)(((v37 | v14) + v19) & v36), (unsigned __int8 *)(((v35 | v14) + v19) & v36), v38);
      char v33 = 1;
    }
    else
    {
      char v33 = 0;
    }
    v15[v20] = v33;
  }
  return a1;
}

_OWORD *sub_21F95DE54(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (unint64_t)a1 + v7 + 32;
  unint64_t v9 = v8 & ~v7;
  uint64_t v10 = (unsigned __int8 *)(((unint64_t)a2 + v7 + 32) & ~v7);
  unint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = v11 + v7;
  if (((v11 + v7) & ~v7) + v11 <= v11) {
    uint64_t v13 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v13 = ((v11 + v7) & ~v7) + v11;
  }
  unsigned int v14 = v10[v13];
  if (v14 >= 2)
  {
    if (v13 <= 3) {
      uint64_t v15 = v13;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *v10;
        goto LABEL_13;
      case 2:
        int v16 = *(unsigned __int16 *)v10;
        goto LABEL_13;
      case 3:
        int v16 = *(unsigned __int16 *)(((unint64_t)a2 + v7 + 32) & ~v7) | (*(unsigned __int8 *)((((unint64_t)a2 + v7 + 32) & ~v7)
                                                                                                  + 2) << 16);
        goto LABEL_13;
      case 4:
        int v16 = *(_DWORD *)v10;
LABEL_13:
        int v17 = (v16 | ((v14 - 2) << (8 * v13))) + 2;
        unsigned int v18 = v16 + 2;
        if (v13 >= 4) {
          unsigned int v14 = v18;
        }
        else {
          unsigned int v14 = v17;
        }
        break;
      default:
        break;
    }
  }
  unint64_t v19 = *(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v6 + 32);
  v19(v8 & ~v7, v10, v5);
  if (v14 == 1)
  {
    v19((v12 + v9) & ~v7, (unsigned __int8 *)((unint64_t)&v10[v12] & ~v7), v5);
    char v20 = 1;
  }
  else
  {
    char v20 = 0;
  }
  *(unsigned char *)(v9 + v13) = v20;
  return a1;
}

uint64_t sub_21F95DFF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  sub_21F7656A8(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = (unsigned __int8 *)((v12 + 32 + a1) & ~v12);
  uint64_t v14 = v12 + 32 + a2;
  uint64_t v15 = (unsigned __int8 *)(v14 & ~v12);
  if (v13 != v15)
  {
    uint64_t v16 = *(void *)(v10 - 8);
    uint64_t v35 = v12 + 32 + a1;
    uint64_t v33 = v14;
    unint64_t v17 = *(void *)(v11 + 64);
    uint64_t v34 = ~v12;
    if (((v17 + v12) & ~v12) + v17 <= v17) {
      uint64_t v18 = *(void *)(v11 + 64);
    }
    else {
      uint64_t v18 = ((v17 + v12) & ~v12) + v17;
    }
    unsigned int v19 = v13[v18];
    if (v19 >= 2)
    {
      if (v18 <= 3) {
        uint64_t v20 = v18;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *v13;
          goto LABEL_14;
        case 2:
          int v21 = *(unsigned __int16 *)v13;
          goto LABEL_14;
        case 3:
          int v21 = *(unsigned __int16 *)((v12 + 32 + a1) & ~v12) | (*(unsigned __int8 *)(((v12 + 32 + a1) & ~v12) + 2) << 16);
          goto LABEL_14;
        case 4:
          int v21 = *(_DWORD *)v13;
LABEL_14:
          int v22 = (v21 | ((v19 - 2) << (8 * v18))) + 2;
          unsigned int v23 = v21 + 2;
          if (v18 >= 4) {
            unsigned int v19 = v23;
          }
          else {
            unsigned int v19 = v22;
          }
          break;
        default:
          break;
      }
    }
    int v24 = *(void (**)(unsigned __int8 *, uint64_t))(v16 + 8);
    uint64_t v36 = v10;
    v24(v13, v10);
    if (v19 == 1) {
      v24((unsigned __int8 *)(((v35 | v12) + v17) & v34), v36);
    }
    unsigned int v25 = v15[v18];
    if (v25 >= 2)
    {
      if (v18 <= 3) {
        uint64_t v26 = v18;
      }
      else {
        uint64_t v26 = 4;
      }
      switch(v26)
      {
        case 1:
          int v27 = *v15;
          goto LABEL_28;
        case 2:
          int v27 = *(unsigned __int16 *)v15;
          goto LABEL_28;
        case 3:
          int v27 = *(unsigned __int16 *)v15 | (v15[2] << 16);
          goto LABEL_28;
        case 4:
          int v27 = *(_DWORD *)v15;
LABEL_28:
          int v28 = (v27 | ((v25 - 2) << (8 * v18))) + 2;
          unsigned int v29 = v27 + 2;
          if (v18 >= 4) {
            unsigned int v25 = v29;
          }
          else {
            unsigned int v25 = v28;
          }
          break;
        default:
          break;
      }
    }
    int v30 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v16 + 32);
    v30(v13, v15, v36);
    if (v25 == 1)
    {
      v30((unsigned __int8 *)(((v35 | v12) + v17) & v34), (unsigned __int8 *)(((v33 | v12) + v17) & v34), v36);
      char v31 = 1;
    }
    else
    {
      char v31 = 0;
    }
    v13[v18] = v31;
  }
  return a1;
}

uint64_t sub_21F95E2BC(unsigned __int16 *a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  unint64_t v6 = ((v4 + v5) & ~v5) + v4;
  if (v6 <= v4) {
    unint64_t v6 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if ((a2 & 0x80000000) == 0) {
    goto LABEL_5;
  }
  uint64_t v9 = ((v5 + 32) & ~v5) + v6 + 1;
  char v10 = 8 * v9;
  if (v9 > 3) {
    goto LABEL_10;
  }
  unsigned int v12 = (a2 - 0x7FFFFFFF + ~(-1 << v10)) >> v10;
  if (v12 > 0xFFFE)
  {
    int v11 = *(_DWORD *)((char *)a1 + v9);
    if (!v11) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
  if (v12 <= 0xFE)
  {
    if (!v12) {
      goto LABEL_5;
    }
LABEL_10:
    int v11 = *((unsigned __int8 *)a1 + v9);
    if (!*((unsigned char *)a1 + v9)) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
  int v11 = *(unsigned __int16 *)((char *)a1 + v9);
  if (!*(unsigned __int16 *)((char *)a1 + v9))
  {
LABEL_5:
    unint64_t v7 = *((void *)a1 + 3);
    if (v7 >= 0xFFFFFFFF) {
      LODWORD(v7) = -1;
    }
    return (v7 + 1);
  }
LABEL_19:
  int v13 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v13 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v9 | v13) ^ 0x80000000;
}

void sub_21F95E438(char *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  if (((v6 + v7) & ~v7) + v6 > v6) {
    v6 += (v6 + v7) & ~v7;
  }
  size_t v8 = ((v7 + 32) & ~v7) + v6 + 1;
  if (a3 < 0)
  {
    if (v8 <= 3)
    {
      unsigned int v10 = (a3 - 0x7FFFFFFF + ~(-1 << (8 * v8))) >> (8 * v8);
      if (v10 > 0xFFFE)
      {
        int v9 = 4;
        if (a2 < 0) {
          goto LABEL_14;
        }
        goto LABEL_21;
      }
      if (v10 >= 0xFF) {
        int v9 = 2;
      }
      else {
        int v9 = v10 != 0;
      }
      if ((a2 & 0x80000000) == 0) {
        goto LABEL_21;
      }
    }
    else
    {
      int v9 = 1;
      if ((a2 & 0x80000000) == 0) {
        goto LABEL_21;
      }
    }
LABEL_14:
    unsigned int v11 = a2 ^ 0x80000000;
    if (v8 < 4)
    {
      int v12 = (v11 >> (8 * v8)) + 1;
      if (v8)
      {
        int v13 = a2 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v11;
      int v12 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v12;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v12;
        return;
      case 3:
        goto LABEL_36;
      case 4:
        *(_DWORD *)&a1[v8] = v12;
        return;
      default:
        return;
    }
  }
  int v9 = 0;
  if (a2 < 0) {
    goto LABEL_14;
  }
LABEL_21:
  switch(v9)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      goto LABEL_25;
    case 3:
LABEL_36:
      __break(1u);
      JUMPOUT(0x21F95E648);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    default:
LABEL_25:
      if (a2) {
LABEL_26:
      }
        *((void *)a1 + 3) = (a2 - 1);
      return;
  }
}

uint64_t sub_21F95E670()
{
  uint64_t result = type metadata accessor for PlottableProjection.Storage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_21F95E710(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v49 = *(void *)(a3 + 24);
  uint64_t v4 = *(void *)(v49 - 8);
  uint64_t v48 = v4;
  int v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = sub_21FA24310();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v46 = v7;
  uint64_t v47 = v6;
  int v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = sub_21FA24320();
  int v10 = *(_DWORD *)(*(void *)(v9 - 8) + 80);
  unint64_t v11 = v8 | (unint64_t)v10 | v5;
  uint64_t v12 = v11 | 7;
  unint64_t v13 = *(void *)(v4 + 64);
  unint64_t v14 = v13 + v5;
  uint64_t v50 = v5;
  if (((v13 + v50) & ~v50) + v13 > v13) {
    v13 += (v13 + v5) & ~(unint64_t)v5;
  }
  unint64_t v15 = ((*(void *)(v7 + 64)
        + v10
        + ((v8 + 8) & ~(unint64_t)v8)) & ~(unint64_t)v10)
      + *(void *)(*(void *)(v9 - 8) + 64);
  if (v13 > v15) {
    unint64_t v15 = v13;
  }
  if (v15 <= 0x10) {
    uint64_t v16 = 16;
  }
  else {
    uint64_t v16 = v15;
  }
  if (v11 > 7 || ((v8 | v10 | v5) & 0x100000) != 0 || v16 + ((v11 + 32) & ~(v11 | 7)) + 1 > 0x18)
  {
    uint64_t v19 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v19 + ((v11 + 16) & ~(v11 | 7));
LABEL_17:
    swift_retain();
  }
  else
  {
    uint64_t v21 = v8;
    unint64_t v41 = v14;
    uint64_t v42 = v8 + 8;
    uint64_t v22 = v10;
    uint64_t v43 = *(void *)(v7 + 64) + v10;
    uint64_t v44 = *(void *)(v9 - 8);
    uint64_t v45 = v9;
    uint64_t v23 = *(void *)a2;
    uint64_t v24 = *(void *)(a2 + 8);
    char v25 = *(unsigned char *)(a2 + 16);
    uint64_t v26 = ~(v11 | 7);
    sub_21F7652C0(*(void *)a2, v24, v25);
    *(void *)a1 = v23;
    *(void *)(a1 + 8) = v24;
    *(unsigned char *)(a1 + 16) = v25;
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    int v27 = (void *)((a1 + v12 + 32) & v26);
    int v28 = (unsigned __int8 *)((a2 + v12 + 32) & v26);
    unsigned int v29 = v28[v16];
    swift_bridgeObjectRetain();
    if (v29 < 5)
    {
      uint64_t v31 = v22;
    }
    else
    {
      if (v16 <= 3) {
        uint64_t v30 = v16;
      }
      else {
        uint64_t v30 = 4;
      }
      uint64_t v31 = v22;
      switch(v30)
      {
        case 1:
          int v32 = *v28;
          goto LABEL_29;
        case 2:
          int v32 = *(unsigned __int16 *)v28;
          goto LABEL_29;
        case 3:
          int v32 = *(unsigned __int16 *)v28 | (v28[2] << 16);
          goto LABEL_29;
        case 4:
          int v32 = *(_DWORD *)v28;
LABEL_29:
          int v33 = (v32 | ((v29 - 5) << (8 * v16))) + 5;
          unsigned int v34 = v32 + 5;
          if (v16 >= 4) {
            unsigned int v29 = v34;
          }
          else {
            unsigned int v29 = v33;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v35 = ~v21;
    uint64_t v36 = ~v31;
    switch(v29)
    {
      case 1u:
        int v40 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v48 + 16);
        v40(v27, v28, v49);
        v40((void *)(((unint64_t)v27 + v41) & ~v50), (unsigned __int8 *)((unint64_t)&v28[v41] & ~v50), v49);
        *((unsigned char *)v27 + v16) = 1;
        break;
      case 2u:
        *int v27 = *(void *)v28;
        *((unsigned char *)v27 + v16) = 2;
        goto LABEL_17;
      case 3u:
        *int v27 = *(void *)v28;
        v27[1] = *((void *)v28 + 1);
        *((unsigned char *)v27 + v16) = 3;
        swift_retain();
        goto LABEL_17;
      case 4u:
        *int v27 = *(void *)v28;
        unint64_t v37 = ((unint64_t)v27 + v42) & v35;
        unint64_t v38 = (unint64_t)&v28[v42] & v35;
        uint64_t v39 = *(void (**)(unint64_t, unint64_t, uint64_t))(v46 + 16);
        swift_retain();
        v39(v37, v38, v47);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v44 + 16))((v43 + v37) & v36, (v43 + v38) & v36, v45);
        *((unsigned char *)v27 + v16) = 4;
        break;
      default:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v48 + 16))(v27, v28, v49);
        *((unsigned char *)v27 + v16) = 0;
        break;
    }
  }
  return a1;
}

uint64_t sub_21F95EB54(uint64_t a1, uint64_t a2)
{
  sub_21F7656A8(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v34 = v5;
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v32 = sub_21FA24310();
  uint64_t v7 = *(void *)(v32 - 8);
  uint64_t v8 = v7;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = sub_21FA24320();
  uint64_t v11 = *(unsigned __int8 *)(*(void *)(v10 - 8) + 80);
  uint64_t v12 = (unsigned __int8 *)((a1 + (v6 | v9 | v11 | 7) + 32) & ~(v6 | v9 | v11 | 7));
  unint64_t v13 = *(void *)(v5 + 64);
  uint64_t v14 = v13 + v6;
  uint64_t v15 = *(void *)(v7 + 64);
  if (((v13 + v6) & ~v6) + v13 <= v13) {
    unint64_t v16 = v13;
  }
  else {
    unint64_t v16 = ((v13 + v6) & ~v6) + v13;
  }
  uint64_t v17 = v9 + 8;
  uint64_t v18 = v15 + v11;
  unint64_t v19 = ((v15 + v11 + ((v9 + 8) & ~v9)) & ~v11) + *(void *)(*(void *)(v10 - 8) + 64);
  if (v16 > v19) {
    unint64_t v19 = v16;
  }
  if (v19 <= 0x10) {
    unint64_t v19 = 16;
  }
  unsigned int v20 = v12[v19];
  unsigned int v21 = v20 - 5;
  if (v20 >= 5)
  {
    if (v19 <= 3) {
      uint64_t v22 = v19;
    }
    else {
      uint64_t v22 = 4;
    }
    switch(v22)
    {
      case 1:
        int v23 = *v12;
        goto LABEL_17;
      case 2:
        int v23 = *(unsigned __int16 *)v12;
        goto LABEL_17;
      case 3:
        int v23 = *(unsigned __int16 *)v12 | (v12[2] << 16);
        goto LABEL_17;
      case 4:
        int v23 = *(_DWORD *)v12;
LABEL_17:
        int v24 = (v23 | (v21 << (8 * v19))) + 5;
        unsigned int v20 = v23 + 5;
        if (v19 < 4) {
          unsigned int v20 = v24;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v25 = ~v6;
  uint64_t v26 = ~v9;
  uint64_t v27 = ~v11;
  switch(v20)
  {
    case 1u:
      int v33 = *(void (**)(unsigned __int8 *, uint64_t))(v34 + 8);
      v33(v12, v4);
      unsigned int v29 = (unsigned __int8 *)((unint64_t)&v12[v14] & v25);
      uint64_t v30 = v4;
      int v28 = (uint64_t (*)(unsigned __int8 *, uint64_t))v33;
      goto LABEL_27;
    case 2u:
      goto LABEL_23;
    case 3u:
      swift_release();
LABEL_23:
      return swift_release();
    case 4u:
      uint64_t v35 = *(void *)(v10 - 8);
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))((unint64_t)&v12[v17] & v26, v32);
      unsigned int v29 = (unsigned __int8 *)((v18 + ((unint64_t)&v12[v17] & v26)) & v27);
      int v28 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v35 + 8);
      uint64_t v30 = v10;
      goto LABEL_27;
    default:
      int v28 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v34 + 8);
      unsigned int v29 = v12;
      uint64_t v30 = v4;
LABEL_27:
      return v28(v29, v30);
  }
}

uint64_t sub_21F95EEBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  sub_21F7652C0(*(void *)a2, v7, v8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v39 = *(void *)(a3 + 24);
  uint64_t v9 = *(void *)(v39 - 8);
  uint64_t v38 = v9;
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v37 = sub_21FA24310();
  uint64_t v11 = *(void *)(v37 - 8);
  uint64_t v35 = v11;
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v36 = sub_21FA24320();
  uint64_t v34 = *(void *)(v36 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v34 + 80);
  uint64_t v14 = v10 | v12 | v13 | 7;
  int v40 = (void *)((v14 + 32 + a1) & ~v14);
  uint64_t v15 = (unsigned __int8 *)((v14 + 32 + a2) & ~v14);
  unint64_t v16 = *(void *)(v9 + 64);
  uint64_t v33 = v16 + v10;
  if (((v16 + v10) & ~v10) + v16 > v16) {
    v16 += (v16 + v10) & ~v10;
  }
  uint64_t v17 = v12 + 8;
  uint64_t v18 = *(void *)(v11 + 64);
  uint64_t v19 = v18 + v13;
  unint64_t v20 = ((v18 + v13 + ((v12 + 8) & ~v12)) & ~v13) + *(void *)(*(void *)(v36 - 8) + 64);
  if (v16 > v20) {
    unint64_t v20 = v16;
  }
  if (v20 <= 0x10) {
    uint64_t v21 = 16;
  }
  else {
    uint64_t v21 = v20;
  }
  unsigned int v22 = v15[v21];
  swift_bridgeObjectRetain();
  if (v22 >= 5)
  {
    if (v21 <= 3) {
      uint64_t v23 = v21;
    }
    else {
      uint64_t v23 = 4;
    }
    switch(v23)
    {
      case 1:
        int v24 = *v15;
        goto LABEL_17;
      case 2:
        int v24 = *(unsigned __int16 *)v15;
        goto LABEL_17;
      case 3:
        int v24 = *(unsigned __int16 *)v15 | (v15[2] << 16);
        goto LABEL_17;
      case 4:
        int v24 = *(_DWORD *)v15;
LABEL_17:
        int v25 = (v24 | ((v22 - 5) << (8 * v21))) + 5;
        unsigned int v26 = v24 + 5;
        if (v21 >= 4) {
          unsigned int v22 = v26;
        }
        else {
          unsigned int v22 = v25;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v27 = ~v12;
  switch(v22)
  {
    case 1u:
      int v28 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v38 + 16);
      v28(v40, v15, v39);
      v28((void *)(((unint64_t)v40 + v33) & ~v10), (unsigned __int8 *)((unint64_t)&v15[v33] & ~v10), v39);
      *((unsigned char *)v40 + v21) = 1;
      break;
    case 2u:
      *int v40 = *(void *)v15;
      *((unsigned char *)v40 + v21) = 2;
      swift_retain();
      break;
    case 3u:
      *int v40 = *(void *)v15;
      v40[1] = *((void *)v15 + 1);
      *((unsigned char *)v40 + v21) = 3;
      swift_retain();
      swift_retain();
      break;
    case 4u:
      *int v40 = *(void *)v15;
      unint64_t v29 = ((unint64_t)v40 + v17) & v27;
      unint64_t v30 = (unint64_t)&v15[v17] & v27;
      uint64_t v31 = *(void (**)(unint64_t, unint64_t, uint64_t))(v35 + 16);
      swift_retain();
      v31(v29, v30, v37);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v34 + 16))((v19 + v29) & ~v13, (v19 + v30) & ~v13, v36);
      *((unsigned char *)v40 + v21) = 4;
      break;
    default:
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v38 + 16))(v40, v15, v39);
      *((unsigned char *)v40 + v21) = 0;
      break;
  }
  return a1;
}

uint64_t sub_21F95F2A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  sub_21F7652C0(*(void *)a2, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  char v11 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  sub_21F7656A8(v9, v10, v11);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a3 + 24);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = sub_21FA24310();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = sub_21FA24320();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = v14 | v17 | v20 | 7;
  unsigned int v22 = (unsigned __int8 *)((v21 + 32 + a1) & ~v21);
  uint64_t v23 = (unsigned __int8 *)((v21 + 32 + a2) & ~v21);
  if (v22 != v23)
  {
    uint64_t v52 = v15;
    uint64_t v54 = v12;
    unint64_t v24 = *(void *)(v13 + 64);
    unint64_t v25 = ((v24 + v14) & ~v14) + v24;
    if (v25 <= v24) {
      unint64_t v25 = *(void *)(v13 + 64);
    }
    uint64_t v49 = v17 + 8;
    uint64_t v50 = *(void *)(v16 + 64);
    if (v25 <= ((((v17 + 8) & ~v17) + v20 + v50) & (unint64_t)~v20) + *(void *)(v19 + 64)) {
      unint64_t v25 = ((((v17 + 8) & ~v17) + v20 + v50) & ~v20) + *(void *)(v19 + 64);
    }
    if (v25 <= 0x10) {
      uint64_t v26 = 16;
    }
    else {
      uint64_t v26 = v25;
    }
    unsigned int v27 = v22[v26];
    unsigned int v28 = v27 - 5;
    if (v27 >= 5)
    {
      if (v26 <= 3) {
        uint64_t v29 = v26;
      }
      else {
        uint64_t v29 = 4;
      }
      switch(v29)
      {
        case 1:
          int v30 = *v22;
          goto LABEL_18;
        case 2:
          int v30 = *(unsigned __int16 *)v22;
          goto LABEL_18;
        case 3:
          int v30 = *(unsigned __int16 *)v22 | (v22[2] << 16);
          goto LABEL_18;
        case 4:
          int v30 = *(_DWORD *)v22;
LABEL_18:
          int v31 = (v30 | (v28 << (8 * v26))) + 5;
          unsigned int v27 = v30 + 5;
          if (v26 < 4) {
            unsigned int v27 = v31;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v47 = ~v14;
    uint64_t v48 = ~v17;
    uint64_t v32 = ~v20;
    uint64_t v53 = v18;
    uint64_t v51 = *(void *)(v18 - 8);
    switch(v27)
    {
      case 1u:
        uint64_t v46 = v16;
        uint64_t v33 = *(void (**)(unsigned __int8 *, uint64_t))(v13 + 8);
        v33(v22, v54);
        v33((unsigned __int8 *)((unint64_t)&v22[v14 + v24] & v47), v54);
        uint64_t v16 = v46;
        uint64_t v32 = ~v20;
        break;
      case 2u:
        swift_release();
        break;
      case 3u:
        swift_release();
        swift_release();
        break;
      case 4u:
        swift_release();
        (*(void (**)(unint64_t, uint64_t))(v16 + 8))((unint64_t)&v22[v49] & v48, v52);
        uint64_t v32 = ~v20;
        (*(void (**)(unint64_t, uint64_t))(v51 + 8))((((unint64_t)&v22[v49] & v48) + v20 + v50) & ~v20, v53);
        break;
      default:
        (*(void (**)(unsigned __int8 *, uint64_t))(v13 + 8))(v22, v54);
        break;
    }
    unsigned int v34 = v23[v26];
    unsigned int v35 = v34 - 5;
    if (v34 >= 5)
    {
      if (v26 <= 3) {
        uint64_t v36 = v26;
      }
      else {
        uint64_t v36 = 4;
      }
      switch(v36)
      {
        case 1:
          int v37 = *v23;
          goto LABEL_36;
        case 2:
          int v37 = *(unsigned __int16 *)v23;
          goto LABEL_36;
        case 3:
          int v37 = *(unsigned __int16 *)v23 | (v23[2] << 16);
          goto LABEL_36;
        case 4:
          int v37 = *(_DWORD *)v23;
LABEL_36:
          int v38 = (v37 | (v35 << (8 * v26))) + 5;
          unsigned int v34 = v37 + 5;
          if (v26 < 4) {
            unsigned int v34 = v38;
          }
          break;
        default:
          break;
      }
    }
    switch(v34)
    {
      case 1u:
        uint64_t v44 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v13 + 16);
        v44(v22, v23, v54);
        v44((unsigned __int8 *)((unint64_t)&v22[v14 + v24] & v47), (unsigned __int8 *)((unint64_t)&v23[v14 + v24] & v47), v54);
        char v43 = 1;
        goto LABEL_44;
      case 2u:
        *(void *)unsigned int v22 = *(void *)v23;
        v22[v26] = 2;
        swift_retain();
        break;
      case 3u:
        *(void *)unsigned int v22 = *(void *)v23;
        *((void *)v22 + 1) = *((void *)v23 + 1);
        v22[v26] = 3;
        swift_retain();
        swift_retain();
        break;
      case 4u:
        *(void *)unsigned int v22 = *(void *)v23;
        uint64_t v39 = v32;
        unint64_t v40 = (unint64_t)&v22[v49] & v48;
        unint64_t v41 = (unint64_t)&v23[v49] & v48;
        uint64_t v42 = *(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 16);
        swift_retain();
        v42(v40, v41, v52);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v51 + 16))((v40 + v20 + v50) & v39, (v41 + v20 + v50) & v39, v53);
        char v43 = 4;
LABEL_44:
        v22[v26] = v43;
        break;
      default:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v13 + 16))(v22, v23, v54);
        v22[v26] = 0;
        break;
    }
  }
  return a1;
}

_OWORD *sub_21F95F818(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v45 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v45 - 8);
  uint64_t v7 = v6;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = sub_21FA24310();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v43 = v10;
  uint64_t v44 = v9;
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = sub_21FA24320();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v8 | v11 | v14 | 7;
  uint64_t v16 = (void *)(((unint64_t)a1 + v15 + 32) & ~v15);
  uint64_t v17 = (unsigned __int8 *)(((unint64_t)a2 + v15 + 32) & ~v15);
  unint64_t v18 = *(void *)(v6 + 64);
  uint64_t v19 = v18 + v8;
  unint64_t v20 = ((v18 + v8) & ~v8) + v18;
  if (v20 <= v18) {
    unint64_t v20 = *(void *)(v6 + 64);
  }
  uint64_t v21 = v11 + 8;
  uint64_t v22 = *(void *)(v10 + 64);
  uint64_t v23 = v22 + v14;
  unint64_t v24 = ((v22 + v14 + ((v11 + 8) & ~v11)) & ~v14) + *(void *)(*(void *)(v12 - 8) + 64);
  if (v20 > v24) {
    unint64_t v24 = v20;
  }
  if (v24 <= 0x10) {
    uint64_t v25 = 16;
  }
  else {
    uint64_t v25 = v24;
  }
  unsigned int v26 = v17[v25];
  unsigned int v27 = v26 - 5;
  if (v26 >= 5)
  {
    if (v25 <= 3) {
      uint64_t v28 = v25;
    }
    else {
      uint64_t v28 = 4;
    }
    switch(v28)
    {
      case 1:
        int v29 = *v17;
        goto LABEL_17;
      case 2:
        int v29 = *(unsigned __int16 *)v17;
        goto LABEL_17;
      case 3:
        int v29 = *(unsigned __int16 *)v17 | (v17[2] << 16);
        goto LABEL_17;
      case 4:
        int v29 = *(_DWORD *)v17;
LABEL_17:
        int v30 = (v29 | (v27 << (8 * v25))) + 5;
        unsigned int v26 = v29 + 5;
        if (v25 < 4) {
          unsigned int v26 = v30;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v31 = ~v8;
  uint64_t v32 = ~v11;
  uint64_t v33 = ~v14;
  switch(v26)
  {
    case 1u:
      uint64_t v36 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 32);
      int v37 = v16;
      v36(v16, v17, v45);
      v36((void *)(((unint64_t)v37 + v19) & v31), (unsigned __int8 *)((unint64_t)&v17[v19] & v31), v45);
      uint64_t v16 = v37;
      char v35 = 1;
      break;
    case 2u:
      *uint64_t v16 = *(void *)v17;
      char v35 = 2;
      break;
    case 3u:
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
      char v35 = 3;
      break;
    case 4u:
      *uint64_t v16 = *(void *)v17;
      unint64_t v38 = ((unint64_t)v16 + v21) & v32;
      unint64_t v39 = (unint64_t)&v17[v21] & v32;
      unint64_t v40 = v16;
      uint64_t v41 = v12;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v43 + 32))(v38, v39, v44);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 32))((v23 + v38) & v33, (v23 + v39) & v33, v41);
      uint64_t v16 = v40;
      char v35 = 4;
      break;
    default:
      unsigned int v34 = v16;
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 32))(v16, v17, v45);
      uint64_t v16 = v34;
      char v35 = 0;
      break;
  }
  *((unsigned char *)v16 + v25) = v35;
  return a1;
}

uint64_t sub_21F95FB94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  sub_21F7656A8(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a3 + 24);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = sub_21FA24310();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = sub_21FA24320();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = v12 | v15 | v18 | 7;
  unint64_t v20 = (unsigned __int8 *)((v19 + 32 + a1) & ~v19);
  uint64_t v21 = (unsigned __int8 *)((v19 + 32 + a2) & ~v19);
  if (v20 != v21)
  {
    uint64_t v47 = v13;
    uint64_t v49 = v10;
    unint64_t v22 = *(void *)(v11 + 64);
    unint64_t v23 = ((v22 + v12) & ~v12) + v22;
    if (v23 <= v22) {
      unint64_t v23 = *(void *)(v11 + 64);
    }
    uint64_t v44 = v15 + 8;
    uint64_t v45 = *(void *)(v14 + 64);
    if (v23 <= ((((v15 + 8) & ~v15) + v18 + v45) & (unint64_t)~v18) + *(void *)(v17 + 64)) {
      unint64_t v23 = ((((v15 + 8) & ~v15) + v18 + v45) & ~v18) + *(void *)(v17 + 64);
    }
    if (v23 <= 0x10) {
      uint64_t v24 = 16;
    }
    else {
      uint64_t v24 = v23;
    }
    unsigned int v25 = v20[v24];
    unsigned int v26 = v25 - 5;
    if (v25 >= 5)
    {
      if (v24 <= 3) {
        uint64_t v27 = v24;
      }
      else {
        uint64_t v27 = 4;
      }
      switch(v27)
      {
        case 1:
          int v28 = *v20;
          goto LABEL_18;
        case 2:
          int v28 = *(unsigned __int16 *)v20;
          goto LABEL_18;
        case 3:
          int v28 = *(unsigned __int16 *)v20 | (v20[2] << 16);
          goto LABEL_18;
        case 4:
          int v28 = *(_DWORD *)v20;
LABEL_18:
          int v29 = (v28 | (v26 << (8 * v24))) + 5;
          unsigned int v25 = v28 + 5;
          if (v24 < 4) {
            unsigned int v25 = v29;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v42 = ~v12;
    uint64_t v43 = ~v15;
    uint64_t v30 = ~v18;
    uint64_t v48 = v16;
    uint64_t v46 = *(void *)(v16 - 8);
    switch(v25)
    {
      case 1u:
        uint64_t v41 = v14;
        uint64_t v31 = *(void (**)(unsigned __int8 *, uint64_t))(v11 + 8);
        v31(v20, v49);
        v31((unsigned __int8 *)((unint64_t)&v20[v12 + v22] & v42), v49);
        uint64_t v14 = v41;
        uint64_t v30 = ~v18;
        break;
      case 2u:
        swift_release();
        break;
      case 3u:
        swift_release();
        swift_release();
        break;
      case 4u:
        swift_release();
        (*(void (**)(unint64_t, uint64_t))(v14 + 8))((unint64_t)&v20[v44] & v43, v47);
        uint64_t v30 = ~v18;
        (*(void (**)(unint64_t, uint64_t))(v46 + 8))((((unint64_t)&v20[v44] & v43) + v18 + v45) & ~v18, v48);
        break;
      default:
        (*(void (**)(unsigned __int8 *, uint64_t))(v11 + 8))(v20, v49);
        break;
    }
    unsigned int v32 = v21[v24];
    unsigned int v33 = v32 - 5;
    if (v32 >= 5)
    {
      if (v24 <= 3) {
        uint64_t v34 = v24;
      }
      else {
        uint64_t v34 = 4;
      }
      switch(v34)
      {
        case 1:
          int v35 = *v21;
          goto LABEL_36;
        case 2:
          int v35 = *(unsigned __int16 *)v21;
          goto LABEL_36;
        case 3:
          int v35 = *(unsigned __int16 *)v21 | (v21[2] << 16);
          goto LABEL_36;
        case 4:
          int v35 = *(_DWORD *)v21;
LABEL_36:
          int v36 = (v35 | (v33 << (8 * v24))) + 5;
          unsigned int v32 = v35 + 5;
          if (v24 < 4) {
            unsigned int v32 = v36;
          }
          break;
        default:
          break;
      }
    }
    switch(v32)
    {
      case 1u:
        unint64_t v39 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v11 + 32);
        v39(v20, v21, v49);
        v39((unsigned __int8 *)((unint64_t)&v20[v12 + v22] & v42), (unsigned __int8 *)((unint64_t)&v21[v12 + v22] & v42), v49);
        char v37 = 1;
        break;
      case 2u:
        *(void *)unint64_t v20 = *(void *)v21;
        char v37 = 2;
        break;
      case 3u:
        *(_OWORD *)unint64_t v20 = *(_OWORD *)v21;
        char v37 = 3;
        break;
      case 4u:
        *(void *)unint64_t v20 = *(void *)v21;
        unint64_t v38 = (unint64_t)&v21[v44] & v43;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 32))((unint64_t)&v20[v44] & v43, v38, v47);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v46 + 32))((((unint64_t)&v20[v44] & v43) + v18 + v45) & v30, (v38 + v18 + v45) & v30, v48);
        char v37 = 4;
        break;
      default:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v11 + 32))(v20, v21, v49);
        char v37 = 0;
        break;
    }
    v20[v24] = v37;
  }
  return a1;
}

uint64_t sub_21F9600D0(unsigned __int16 *a1, int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  if (((v6 + v7) & ~v7) + v6 <= v6) {
    unint64_t v8 = v6;
  }
  else {
    unint64_t v8 = ((v6 + v7) & ~v7) + v6;
  }
  uint64_t v9 = *(void *)(sub_21FA24310() - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 64);
  uint64_t v12 = *(void *)(sub_21FA24320() - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  unint64_t v14 = ((((v10 + 8) & ~v10) + v11 + v13) & ~v13) + *(void *)(v12 + 64);
  if (v8 > v14) {
    unint64_t v14 = v8;
  }
  if (v14 <= 0x10) {
    unint64_t v14 = 16;
  }
  if (!a2) {
    return 0;
  }
  if ((a2 & 0x80000000) == 0) {
    goto LABEL_10;
  }
  unint64_t v17 = v14
      + (((v10 | v13 | v7) & 0xF8 ^ 0x1F8) & ((v10 | v13 | v7) + 32))
      + 1;
  char v18 = 8 * v17;
  if (v17 > 3) {
    goto LABEL_15;
  }
  unsigned int v20 = (a2 - 0x7FFFFFFF + ~(-1 << v18)) >> v18;
  if (v20 > 0xFFFE)
  {
    int v19 = *(_DWORD *)((char *)a1 + v17);
    if (!v19) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
  if (v20 <= 0xFE)
  {
    if (!v20) {
      goto LABEL_10;
    }
LABEL_15:
    int v19 = *((unsigned __int8 *)a1 + v17);
    if (!*((unsigned char *)a1 + v17)) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
  int v19 = *(unsigned __int16 *)((char *)a1 + v17);
  if (!*(unsigned __int16 *)((char *)a1 + v17))
  {
LABEL_10:
    unint64_t v15 = *((void *)a1 + 3);
    if (v15 >= 0xFFFFFFFF) {
      LODWORD(v15) = -1;
    }
    return (v15 + 1);
  }
LABEL_24:
  int v21 = (v19 - 1) << v18;
  if (v17 > 3) {
    int v21 = 0;
  }
  if (v17)
  {
    if (v17 > 3) {
      LODWORD(v17) = 4;
    }
    switch((int)v17)
    {
      case 2:
        LODWORD(v17) = *a1;
        break;
      case 3:
        LODWORD(v17) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v17) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v17) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v17 | v21) ^ 0x80000000;
}

void sub_21F960358(_WORD *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a4 + 24) - 8);
  unint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (((v8 + v9) & ~v9) + v8 <= v8) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = ((v8 + v9) & ~v9) + v8;
  }
  uint64_t v11 = *(void *)(sub_21FA24310() - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = *(void *)(v11 + 64);
  uint64_t v14 = *(void *)(sub_21FA24320() - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  unint64_t v16 = ((((v12 + 8) & ~v12) + v13 + v15) & ~v15) + *(void *)(v14 + 64);
  if (v10 > v16) {
    unint64_t v16 = v10;
  }
  if (v16 <= 0x10) {
    unint64_t v16 = 16;
  }
  size_t v17 = v16
      + (((v12 | v15 | v9) & 0xF8 ^ 0x1F8) & ((v12 | v15 | v9) + 32))
      + 1;
  if (a3 < 0)
  {
    if (v17 <= 3)
    {
      unsigned int v19 = (a3 - 0x7FFFFFFF + ~(-1 << (8 * v17))) >> (8 * v17);
      if (v19 > 0xFFFE)
      {
        int v18 = 4;
        if (a2 < 0) {
          goto LABEL_19;
        }
        goto LABEL_26;
      }
      if (v19 >= 0xFF) {
        int v18 = 2;
      }
      else {
        int v18 = v19 != 0;
      }
      if ((a2 & 0x80000000) == 0) {
        goto LABEL_26;
      }
    }
    else
    {
      int v18 = 1;
      if ((a2 & 0x80000000) == 0) {
        goto LABEL_26;
      }
    }
LABEL_19:
    unsigned int v20 = a2 ^ 0x80000000;
    if (v17 < 4)
    {
      int v21 = (v20 >> (8 * v17)) + 1;
      if (v17)
      {
        int v22 = a2 & ~(-1 << (8 * v17));
        bzero(a1, v17);
        if (v17 == 3)
        {
          *a1 = v22;
          *((unsigned char *)a1 + 2) = BYTE2(v22);
        }
        else if (v17 == 2)
        {
          *a1 = v22;
        }
        else
        {
          *(unsigned char *)a1 = v22;
        }
      }
    }
    else
    {
      bzero(a1, v17);
      *(_DWORD *)a1 = v20;
      int v21 = 1;
    }
    switch(v18)
    {
      case 1:
        *((unsigned char *)a1 + v17) = v21;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v17) = v21;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)((char *)a1 + v17) = v21;
        return;
      default:
        return;
    }
  }
  int v18 = 0;
  if (a2 < 0) {
    goto LABEL_19;
  }
LABEL_26:
  switch(v18)
  {
    case 1:
      *((unsigned char *)a1 + v17) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_31;
    case 2:
      *(_WORD *)((char *)a1 + v17) = 0;
      goto LABEL_30;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x21F96064CLL);
    case 4:
      *(_DWORD *)((char *)a1 + v17) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_31;
    default:
LABEL_30:
      if (a2) {
LABEL_31:
      }
        *((void *)a1 + 3) = (a2 - 1);
      return;
  }
}

uint64_t type metadata accessor for PlottableProjection()
{
  return sub_21F764F08();
}

uint64_t type metadata accessor for PlottableProjection.Storage()
{
  return sub_21F764F08();
}

uint64_t initializeWithCopy for AnyPlottableProjection(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for AnyPlottableProjection(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for AnyPlottableProjection(uint64_t a1, uint64_t a2)
{
  _s6Charts15AnyChartContentVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyPlottableProjection(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyPlottableProjection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyPlottableProjection()
{
  return &type metadata for AnyPlottableProjection;
}

void *sub_21F960824(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  long long v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  int v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = v8;
  unint64_t v10 = ~(unint64_t)v8;
  uint64_t v11 = v7 + v8;
  if (((v7 + v9) & ~v9) + v7 <= v7) {
    uint64_t v12 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v12 = ((v7 + v8) & ~(unint64_t)v8) + v7;
  }
  int v13 = v8 & 0x100000;
  if (v9 > 7 || v13 != 0 || (unint64_t)(v12 + 1) > 0x18)
  {
    uint64_t v16 = *(void *)a2;
    *long long v4 = *(void *)a2;
    long long v4 = (void *)(v16 + ((v9 + 16) & v10));
    swift_retain();
  }
  else
  {
    unsigned int v17 = a2[v12];
    if (v17 >= 2)
    {
      if (v12 <= 3) {
        uint64_t v18 = v12;
      }
      else {
        uint64_t v18 = 4;
      }
      switch(v18)
      {
        case 1:
          int v19 = *a2;
          goto LABEL_22;
        case 2:
          int v19 = *(unsigned __int16 *)a2;
          goto LABEL_22;
        case 3:
          int v19 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_22;
        case 4:
          int v19 = *(_DWORD *)a2;
LABEL_22:
          int v20 = (v19 | ((v17 - 2) << (8 * v12))) + 2;
          unsigned int v21 = v19 + 2;
          if (v12 >= 4) {
            unsigned int v17 = v21;
          }
          else {
            unsigned int v17 = v20;
          }
          break;
        default:
          break;
      }
    }
    int v22 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16);
    v22(a1, a2, v5);
    if (v17 == 1)
    {
      v22((void *)(((unint64_t)v4 + v11) & v10), (unsigned __int8 *)((unint64_t)&a2[v11] & v10), v5);
      *((unsigned char *)v4 + v12) = 1;
    }
    else
    {
      *((unsigned char *)v4 + v12) = 0;
    }
  }
  return v4;
}

uint64_t sub_21F9609E8(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = v5 + v6;
  if (((v5 + v6) & ~v6) + v5 > v5) {
    v5 += (v5 + v6) & ~v6;
  }
  unsigned int v8 = a1[v5];
  if (v8 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v9 = v5;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a1;
        goto LABEL_12;
      case 2:
        int v10 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v10 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v10 = *(_DWORD *)a1;
LABEL_12:
        int v11 = (v10 | ((v8 - 2) << (8 * v5))) + 2;
        unsigned int v12 = v10 + 2;
        if (v5 >= 4) {
          unsigned int v8 = v12;
        }
        else {
          unsigned int v8 = v11;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v14 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v4 + 8);
  uint64_t result = v14(a1, v3);
  if (v8 == 1)
  {
    return v14((unsigned __int8 *)((unint64_t)&a1[v7] & ~v6), v3);
  }
  return result;
}

uint64_t sub_21F960B74(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = v7 + v8;
  if (((v7 + v8) & ~v8) + v7 <= v7) {
    uint64_t v10 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v10 = ((v7 + v8) & ~v8) + v7;
  }
  unsigned int v11 = a2[v10];
  if (v11 >= 2)
  {
    if (v10 <= 3) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a2;
        goto LABEL_13;
      case 2:
        int v13 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v13 = *(_DWORD *)a2;
LABEL_13:
        int v14 = (v13 | ((v11 - 2) << (8 * v10))) + 2;
        unsigned int v15 = v13 + 2;
        if (v10 >= 4) {
          unsigned int v11 = v15;
        }
        else {
          unsigned int v11 = v14;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v16 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 16);
  v16(a1, a2, v5);
  if (v11 == 1)
  {
    v16((v9 + a1) & ~v8, (unsigned __int8 *)((unint64_t)&a2[v9] & ~v8), v5);
    char v17 = 1;
  }
  else
  {
    char v17 = 0;
  }
  *(unsigned char *)(a1 + v10) = v17;
  return a1;
}

unsigned __int8 *sub_21F960D00(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v6 + 64);
    uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v9 = v7 + v8;
    if (((v7 + v8) & ~v8) + v7 <= v7) {
      uint64_t v10 = *(void *)(v6 + 64);
    }
    else {
      uint64_t v10 = ((v7 + v8) & ~v8) + v7;
    }
    unsigned int v11 = a1[v10];
    if (v11 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v12 = v10;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | ((v11 - 2) << (8 * v10))) + 2;
          unsigned int v15 = v13 + 2;
          if (v10 >= 4) {
            unsigned int v11 = v15;
          }
          else {
            unsigned int v11 = v14;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v16 = ~v8;
    char v17 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
    v17(a1, v5);
    if (v11 == 1) {
      v17((unsigned __int8 *)((unint64_t)&a1[v9] & v16), v5);
    }
    unsigned int v18 = a2[v10];
    if (v18 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v19 = v10;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_28;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_28:
          int v21 = (v20 | ((v18 - 2) << (8 * v10))) + 2;
          unsigned int v22 = v20 + 2;
          if (v10 >= 4) {
            unsigned int v18 = v22;
          }
          else {
            unsigned int v18 = v21;
          }
          break;
        default:
          break;
      }
    }
    unint64_t v23 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16);
    v23(a1, a2, v5);
    if (v18 == 1)
    {
      v23((unsigned __int8 *)((unint64_t)&a1[v9] & v16), (unsigned __int8 *)((unint64_t)&a2[v9] & v16), v5);
      char v24 = 1;
    }
    else
    {
      char v24 = 0;
    }
    a1[v10] = v24;
  }
  return a1;
}

uint64_t sub_21F960F5C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = v7 + v8;
  if (((v7 + v8) & ~v8) + v7 <= v7) {
    uint64_t v10 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v10 = ((v7 + v8) & ~v8) + v7;
  }
  unsigned int v11 = a2[v10];
  if (v11 >= 2)
  {
    if (v10 <= 3) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a2;
        goto LABEL_13;
      case 2:
        int v13 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v13 = *(_DWORD *)a2;
LABEL_13:
        int v14 = (v13 | ((v11 - 2) << (8 * v10))) + 2;
        unsigned int v15 = v13 + 2;
        if (v10 >= 4) {
          unsigned int v11 = v15;
        }
        else {
          unsigned int v11 = v14;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v16 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 32);
  v16(a1, a2, v5);
  if (v11 == 1)
  {
    v16((v9 + a1) & ~v8, (unsigned __int8 *)((unint64_t)&a2[v9] & ~v8), v5);
    char v17 = 1;
  }
  else
  {
    char v17 = 0;
  }
  *(unsigned char *)(a1 + v10) = v17;
  return a1;
}

unsigned __int8 *sub_21F9610E8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v6 + 64);
    uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v9 = v7 + v8;
    if (((v7 + v8) & ~v8) + v7 <= v7) {
      uint64_t v10 = *(void *)(v6 + 64);
    }
    else {
      uint64_t v10 = ((v7 + v8) & ~v8) + v7;
    }
    unsigned int v11 = a1[v10];
    if (v11 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v12 = v10;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | ((v11 - 2) << (8 * v10))) + 2;
          unsigned int v15 = v13 + 2;
          if (v10 >= 4) {
            unsigned int v11 = v15;
          }
          else {
            unsigned int v11 = v14;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v16 = ~v8;
    char v17 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
    v17(a1, v5);
    if (v11 == 1) {
      v17((unsigned __int8 *)((unint64_t)&a1[v9] & v16), v5);
    }
    unsigned int v18 = a2[v10];
    if (v18 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v19 = v10;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_28;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_28:
          int v21 = (v20 | ((v18 - 2) << (8 * v10))) + 2;
          unsigned int v22 = v20 + 2;
          if (v10 >= 4) {
            unsigned int v18 = v22;
          }
          else {
            unsigned int v18 = v21;
          }
          break;
        default:
          break;
      }
    }
    unint64_t v23 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32);
    v23(a1, a2, v5);
    if (v18 == 1)
    {
      v23((unsigned __int8 *)((unint64_t)&a1[v9] & v16), (unsigned __int8 *)((unint64_t)&a2[v9] & v16), v5);
      char v24 = 1;
    }
    else
    {
      char v24 = 0;
    }
    a1[v10] = v24;
  }
  return a1;
}

uint64_t sub_21F961344(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  unint64_t v5 = ((v4 + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + v4;
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  unint64_t v6 = v5 + 1;
  char v7 = 8 * (v5 + 1);
  if ((v5 + 1) <= 3)
  {
    unsigned int v10 = ((a2 + ~(-1 << v7) - 254) >> v7) + 1;
    if (HIWORD(v10))
    {
      int v8 = *(_DWORD *)((char *)a1 + v6);
      if (!v8) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v10 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v10 < 2)
    {
LABEL_22:
      unsigned int v12 = *((unsigned __int8 *)a1 + v5);
      if (v12 >= 2) {
        return (v12 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_22;
  }
LABEL_14:
  int v11 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v6 | v11) + 255;
}

void sub_21F9614B0(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  unint64_t v7 = ((v6 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + v6;
  if (v7 > v6) {
    unint64_t v6 = v7;
  }
  size_t v8 = v6 + 1;
  if (a3 < 0xFF)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 + ~(-1 << (8 * v8)) - 254) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v10 = a2 - 255;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v6 != -1)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v6 + 1);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x21F9616B0);
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v9)
    {
      case 1:
        a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v6] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_21F9616D8(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  unint64_t v3 = *(void *)(v2 + 64);
  unint64_t v4 = ((v3 + *(unsigned __int8 *)(v2 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)) + v3;
  if (v4 <= v3) {
    unint64_t v4 = v3;
  }
  uint64_t v5 = a1[v4];
  int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_12;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v9 = (v8 | (v6 << (8 * v4))) + 2;
        LODWORD(v5) = v8 + 2;
        if (v4 >= 4) {
          uint64_t v5 = v5;
        }
        else {
          uint64_t v5 = v9;
        }
        break;
      default:
        return v5;
    }
  }
  return v5;
}

void sub_21F9617C8(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  size_t v5 = *(void *)(v4 + 64);
  size_t v6 = ((v5 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v5;
  if (a2 > 1)
  {
    if (v6 <= v5) {
      size_t v7 = v5;
    }
    else {
      size_t v7 = v6;
    }
    unsigned int v8 = a2 - 2;
    if (v7 < 4)
    {
      unsigned int v9 = v8 >> (8 * v7);
      int v10 = v8 & ~(-1 << (8 * v7));
      a1[v7] = v9 + 2;
      bzero(a1, v7);
      if (v7 == 3)
      {
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
      }
      else if (v7 == 2)
      {
        *(_WORD *)a1 = v10;
      }
      else
      {
        *a1 = v10;
      }
    }
    else
    {
      a1[v7] = 2;
      bzero(a1, v7);
      *(_DWORD *)a1 = v8;
    }
  }
  else
  {
    if (v6 > v5) {
      size_t v5 = v6;
    }
    a1[v5] = a2;
  }
}

uint64_t sub_21F9618E0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t v6 = *(void *)(result - 8) + 64;
    swift_getTupleTypeLayout2();
    size_t v7 = &v5;
    uint64_t v8 = MEMORY[0x263F8CF88] + 64;
    unsigned int v9 = &unk_21FA2FF50;
    uint64_t result = sub_21FA24310();
    if (v2 <= 0x3F)
    {
      uint64_t result = sub_21FA24320();
      if (v3 <= 0x3F)
      {
        swift_getTupleTypeLayout3();
        int v10 = &v4;
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

void *sub_21F961A28(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v42 = *(void *)(a3 + 24);
  unint64_t v5 = *(void *)(*(void *)(v42 - 8) + 64);
  uint64_t v41 = *(void *)(v42 - 8);
  int v6 = *(_DWORD *)(v41 + 80);
  uint64_t v38 = v5 + v6;
  if ((v38 & ~(unint64_t)v6) + v5 <= v5) {
    unint64_t v7 = *(void *)(*(void *)(v42 - 8) + 64);
  }
  else {
    unint64_t v7 = ((v5 + v6) & ~(unint64_t)v6) + v5;
  }
  uint64_t v8 = sub_21FA24310();
  uint64_t v39 = *(void *)(v8 - 8);
  uint64_t v40 = v8;
  int v9 = *(_DWORD *)(v39 + 80);
  uint64_t v10 = *(void *)(v39 + 64);
  uint64_t v11 = sub_21FA24320();
  uint64_t v12 = *(void *)(v11 - 8);
  int v13 = *(_DWORD *)(v12 + 80);
  uint64_t v14 = v13;
  unint64_t v15 = ((v10 + v14 + ((v9 + 8) & ~(unint64_t)v9)) & ~v14)
      + *(void *)(v12 + 64);
  if (v7 > v15) {
    unint64_t v15 = v7;
  }
  if (v15 <= 0x10) {
    uint64_t v16 = 16;
  }
  else {
    uint64_t v16 = v15;
  }
  unint64_t v17 = v9 | (unint64_t)v13 | v6;
  int v18 = (v9 | v13 | v6) & 0x100000;
  if (v17 > 7 || v18 != 0 || (unint64_t)(v16 + 1) > 0x18)
  {
    uint64_t v21 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v21 + ((v17 & 0xF8 ^ 0x1F8) & (v17 + 16)));
LABEL_18:
    swift_retain();
  }
  else
  {
    unsigned int v23 = a2[v16];
    unsigned int v24 = v23 - 5;
    if (v23 >= 5)
    {
      if (v16 <= 3) {
        uint64_t v25 = v16;
      }
      else {
        uint64_t v25 = 4;
      }
      switch(v25)
      {
        case 1:
          int v26 = *a2;
          if (v16 < 4) {
            goto LABEL_30;
          }
          goto LABEL_32;
        case 2:
          int v26 = *(unsigned __int16 *)a2;
          if (v16 >= 4) {
            goto LABEL_32;
          }
          goto LABEL_30;
        case 3:
          int v26 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v16 < 4) {
            goto LABEL_30;
          }
          goto LABEL_32;
        case 4:
          int v26 = *(_DWORD *)a2;
          if (v16 < 4) {
LABEL_30:
          }
            unsigned int v23 = (v26 | (v24 << (8 * v16))) + 5;
          else {
LABEL_32:
          }
            unsigned int v23 = v26 + 5;
          break;
        default:
          break;
      }
    }
    unint64_t v27 = ~(unint64_t)v6;
    unint64_t v28 = ~(unint64_t)v9;
    switch(v23)
    {
      case 1u:
        char v37 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v41 + 16);
        v37(a1, a2, v42);
        v37((void *)(((unint64_t)a1 + v38) & v27), (unsigned __int8 *)((unint64_t)&a2[v38] & v27), v42);
        *((unsigned char *)a1 + v16) = 1;
        break;
      case 2u:
        *a1 = *(void *)a2;
        *((unsigned char *)a1 + v16) = 2;
        goto LABEL_18;
      case 3u:
        uint64_t v29 = *(void *)a2;
        uint64_t v30 = *((void *)a2 + 1);
        *a1 = v29;
        a1[1] = v30;
        *((unsigned char *)a1 + v16) = 3;
        swift_retain();
        goto LABEL_18;
      case 4u:
        uint64_t v31 = v11;
        *a1 = *(void *)a2;
        unsigned int v32 = &a2[v9];
        uint64_t v33 = ((unint64_t)a1 + v9 + 8) & v28;
        uint64_t v34 = (unint64_t)(v32 + 8) & v28;
        int v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16);
        uint64_t v36 = v12;
        swift_retain();
        v35(v33, v34, v40);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))((v33 + v10 + v14) & ~v14, (v34 + v10 + v14) & ~v14, v31);
        *((unsigned char *)a1 + v16) = 4;
        break;
      default:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v41 + 16))(a1, a2, v42);
        *((unsigned char *)a1 + v16) = 0;
        break;
    }
  }
  return a1;
}

uint64_t sub_21F961E18(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(v3 - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v26 = v5 + v6;
  uint64_t v27 = v4;
  if (((v5 + v6) & ~v6) + v5 <= v5) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = ((v5 + v6) & ~v6) + v5;
  }
  uint64_t v24 = sub_21FA24310();
  uint64_t v8 = *(void *)(v24 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 64);
  uint64_t v11 = sub_21FA24320();
  uint64_t v12 = *(unsigned __int8 *)(*(void *)(v11 - 8) + 80);
  unint64_t v13 = ((v10 + v12 + ((v9 + 8) & ~v9)) & ~v12) + *(void *)(*(void *)(v11 - 8) + 64);
  if (v7 > v13) {
    unint64_t v13 = v7;
  }
  if (v13 <= 0x10) {
    unint64_t v13 = 16;
  }
  unsigned int v14 = a1[v13];
  unsigned int v15 = v14 - 5;
  if (v14 >= 5)
  {
    if (v13 <= 3) {
      uint64_t v16 = v13;
    }
    else {
      uint64_t v16 = 4;
    }
    switch(v16)
    {
      case 1:
        int v17 = *a1;
        goto LABEL_17;
      case 2:
        int v17 = *(unsigned __int16 *)a1;
        goto LABEL_17;
      case 3:
        int v17 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_17;
      case 4:
        int v17 = *(_DWORD *)a1;
LABEL_17:
        int v18 = (v17 | (v15 << (8 * v13))) + 5;
        unsigned int v14 = v17 + 5;
        if (v13 < 4) {
          unsigned int v14 = v18;
        }
        break;
      default:
        break;
    }
  }
  switch(v14)
  {
    case 1u:
      uint64_t v25 = *(void (**)(unsigned __int8 *, uint64_t))(v27 + 8);
      v25(a1, v3);
      uint64_t v19 = (uint64_t (*)(unsigned __int8 *, uint64_t))v25;
      int v20 = (unsigned __int8 *)((unint64_t)&a1[v26] & ~v6);
      uint64_t v21 = v3;
      goto LABEL_27;
    case 2u:
      goto LABEL_23;
    case 3u:
      swift_release();
LABEL_23:
      return swift_release();
    case 4u:
      uint64_t v28 = *(void *)(v11 - 8);
      swift_release();
      uint64_t v23 = (unint64_t)&a1[v9 + 8] & ~v9;
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v23, v24);
      int v20 = (unsigned __int8 *)((v23 + v10 + v12) & ~v12);
      uint64_t v19 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v28 + 8);
      uint64_t v21 = v11;
      goto LABEL_27;
    default:
      uint64_t v19 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v27 + 8);
      int v20 = a1;
      uint64_t v21 = v3;
LABEL_27:
      return v19(v20, v21);
  }
}

void *sub_21F962164(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v35 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v35 - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v34 = v6 + v7;
  if (((v6 + v7) & ~v7) + v6 <= v6) {
    unint64_t v8 = *(void *)(*(void *)(v35 - 8) + 64);
  }
  else {
    unint64_t v8 = ((v6 + v7) & ~v7) + v6;
  }
  uint64_t v33 = sub_21FA24310();
  uint64_t v32 = *(void *)(v33 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v32 + 80);
  uint64_t v10 = *(void *)(v32 + 64);
  uint64_t v11 = sub_21FA24320();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  unint64_t v14 = ((v10 + v13 + ((v9 + 8) & ~v9)) & ~v13) + *(void *)(v12 + 64);
  if (v8 > v14) {
    unint64_t v14 = v8;
  }
  if (v14 <= 0x10) {
    uint64_t v15 = 16;
  }
  else {
    uint64_t v15 = v14;
  }
  unsigned int v16 = a2[v15];
  unsigned int v17 = v16 - 5;
  if (v16 >= 5)
  {
    if (v15 <= 3) {
      uint64_t v18 = v15;
    }
    else {
      uint64_t v18 = 4;
    }
    switch(v18)
    {
      case 1:
        int v19 = *a2;
        goto LABEL_18;
      case 2:
        int v19 = *(unsigned __int16 *)a2;
        goto LABEL_18;
      case 3:
        int v19 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_18;
      case 4:
        int v19 = *(_DWORD *)a2;
LABEL_18:
        int v20 = (v19 | (v17 << (8 * v15))) + 5;
        unsigned int v16 = v19 + 5;
        if (v15 < 4) {
          unsigned int v16 = v20;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v21 = ~v9;
  switch(v16)
  {
    case 1u:
      unsigned int v22 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16);
      v22(a1, a2, v35);
      v22((void *)(((unint64_t)a1 + v34) & ~v7), (unsigned __int8 *)((unint64_t)&a2[v34] & ~v7), v35);
      char v23 = 1;
      goto LABEL_26;
    case 2u:
      *a1 = *(void *)a2;
      *((unsigned char *)a1 + v15) = 2;
      swift_retain();
      break;
    case 3u:
      uint64_t v24 = *(void *)a2;
      uint64_t v25 = *((void *)a2 + 1);
      *a1 = v24;
      a1[1] = v25;
      *((unsigned char *)a1 + v15) = 3;
      swift_retain();
      swift_retain();
      break;
    case 4u:
      uint64_t v26 = v11;
      *a1 = *(void *)a2;
      uint64_t v27 = &a2[v9];
      uint64_t v28 = ((unint64_t)a1 + v9 + 8) & v21;
      uint64_t v29 = (unint64_t)(v27 + 8) & v21;
      uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16);
      swift_retain();
      v30(v28, v29, v33);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))((v28 + v10 + v13) & ~v13, (v29 + v10 + v13) & ~v13, v26);
      char v23 = 4;
LABEL_26:
      *((unsigned char *)a1 + v15) = v23;
      break;
    default:
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, v35);
      *((unsigned char *)a1 + v15) = 0;
      break;
  }
  return a1;
}

unsigned __int8 *sub_21F9624E4(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 24);
    uint64_t v6 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v6 + 64);
    uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v36 = v7 + v8;
    if (((v7 + v8) & ~v8) + v7 <= v7) {
      unint64_t v9 = *(void *)(v6 + 64);
    }
    else {
      unint64_t v9 = ((v7 + v8) & ~v8) + v7;
    }
    uint64_t v41 = sub_21FA24310();
    uint64_t v39 = *(void *)(v41 - 8);
    uint64_t v10 = *(unsigned __int8 *)(v39 + 80);
    uint64_t v11 = *(void *)(v39 + 64);
    uint64_t v40 = sub_21FA24320();
    uint64_t v37 = *(void *)(v40 - 8);
    uint64_t v38 = v11;
    uint64_t v12 = *(unsigned __int8 *)(v37 + 80);
    unint64_t v13 = ((v11 + v12 + ((v10 + 8) & ~v10)) & ~v12) + *(void *)(v37 + 64);
    if (v9 > v13) {
      unint64_t v13 = v9;
    }
    if (v13 <= 0x10) {
      uint64_t v14 = 16;
    }
    else {
      uint64_t v14 = v13;
    }
    unsigned int v15 = a1[v14];
    unsigned int v16 = v15 - 5;
    if (v15 >= 5)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a1;
          if (v14 < 4) {
            goto LABEL_20;
          }
          goto LABEL_22;
        case 2:
          int v18 = *(unsigned __int16 *)a1;
          if (v14 >= 4) {
            goto LABEL_22;
          }
          goto LABEL_20;
        case 3:
          int v18 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v14 < 4) {
            goto LABEL_20;
          }
          goto LABEL_22;
        case 4:
          int v18 = *(_DWORD *)a1;
          if (v14 < 4) {
LABEL_20:
          }
            unsigned int v15 = (v18 | (v16 << (8 * v14))) + 5;
          else {
LABEL_22:
          }
            unsigned int v15 = v18 + 5;
          break;
        default:
          break;
      }
    }
    uint64_t v35 = ~v8;
    uint64_t v19 = ~v10;
    uint64_t v20 = ~v12;
    switch(v15)
    {
      case 1u:
        char v23 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
        v23(a1, v5);
        v23((unsigned __int8 *)((unint64_t)&a1[v36] & v35), v5);
        uint64_t v19 = ~v10;
        uint64_t v20 = ~v12;
        break;
      case 2u:
        swift_release();
        break;
      case 3u:
        swift_release();
        swift_release();
        break;
      case 4u:
        swift_release();
        uint64_t v21 = (unint64_t)&a1[v10 + 8] & v19;
        (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v21, v41);
        uint64_t v22 = v21 + v38 + v12;
        uint64_t v19 = ~v10;
        (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v22 & v20, v40);
        break;
      default:
        (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
        break;
    }
    unsigned int v24 = a2[v14];
    unsigned int v25 = v24 - 5;
    if (v24 >= 5)
    {
      if (v14 <= 3) {
        uint64_t v26 = v14;
      }
      else {
        uint64_t v26 = 4;
      }
      switch(v26)
      {
        case 1:
          int v27 = *a2;
          if (v14 < 4) {
            goto LABEL_40;
          }
          goto LABEL_42;
        case 2:
          int v27 = *(unsigned __int16 *)a2;
          if (v14 >= 4) {
            goto LABEL_42;
          }
          goto LABEL_40;
        case 3:
          int v27 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v14 < 4) {
            goto LABEL_40;
          }
          goto LABEL_42;
        case 4:
          int v27 = *(_DWORD *)a2;
          if (v14 < 4) {
LABEL_40:
          }
            unsigned int v24 = (v27 | (v25 << (8 * v14))) + 5;
          else {
LABEL_42:
          }
            unsigned int v24 = v27 + 5;
          break;
        default:
          break;
      }
    }
    switch(v24)
    {
      case 1u:
        uint64_t v33 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16);
        v33(a1, a2, v5);
        v33((unsigned __int8 *)((unint64_t)&a1[v36] & v35), (unsigned __int8 *)((unint64_t)&a2[v36] & v35), v5);
        char v32 = 1;
        goto LABEL_49;
      case 2u:
        *(void *)a1 = *(void *)a2;
        a1[v14] = 2;
        swift_retain();
        break;
      case 3u:
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = *((void *)a2 + 1);
        a1[v14] = 3;
        swift_retain();
        swift_retain();
        break;
      case 4u:
        *(void *)a1 = *(void *)a2;
        uint64_t v28 = &a2[v10];
        uint64_t v29 = (unint64_t)&a1[v10 + 8] & v19;
        uint64_t v30 = (unint64_t)(v28 + 8) & v19;
        uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16);
        swift_retain();
        v31(v29, v30, v41);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))((v29 + v38 + v12) & v20, (v30 + v38 + v12) & v20, v40);
        char v32 = 4;
LABEL_49:
        a1[v14] = v32;
        break;
      default:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
        a1[v14] = 0;
        break;
    }
  }
  return a1;
}

void *sub_21F962A4C(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v32 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v32 - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v31 = v6 + v7;
  if (((v6 + v7) & ~v7) + v6 <= v6) {
    unint64_t v8 = *(void *)(*(void *)(v32 - 8) + 64);
  }
  else {
    unint64_t v8 = ((v6 + v7) & ~v7) + v6;
  }
  uint64_t v30 = sub_21FA24310();
  uint64_t v29 = *(void *)(v30 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v29 + 80);
  uint64_t v10 = *(void *)(v29 + 64);
  uint64_t v11 = sub_21FA24320();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  unint64_t v14 = ((v10 + v13 + ((v9 + 8) & ~v9)) & ~v13) + *(void *)(v12 + 64);
  if (v8 > v14) {
    unint64_t v14 = v8;
  }
  if (v14 <= 0x10) {
    uint64_t v15 = 16;
  }
  else {
    uint64_t v15 = v14;
  }
  unsigned int v16 = a2[v15];
  unsigned int v17 = v16 - 5;
  if (v16 >= 5)
  {
    if (v15 <= 3) {
      uint64_t v18 = v15;
    }
    else {
      uint64_t v18 = 4;
    }
    switch(v18)
    {
      case 1:
        int v19 = *a2;
        goto LABEL_18;
      case 2:
        int v19 = *(unsigned __int16 *)a2;
        goto LABEL_18;
      case 3:
        int v19 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_18;
      case 4:
        int v19 = *(_DWORD *)a2;
LABEL_18:
        int v20 = (v19 | (v17 << (8 * v15))) + 5;
        unsigned int v16 = v19 + 5;
        if (v15 < 4) {
          unsigned int v16 = v20;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v21 = ~v9;
  switch(v16)
  {
    case 1u:
      char v23 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 32);
      v23(a1, a2, v32);
      v23((void *)(((unint64_t)a1 + v31) & ~v7), (unsigned __int8 *)((unint64_t)&a2[v31] & ~v7), v32);
      char v22 = 1;
      break;
    case 2u:
      *a1 = *(void *)a2;
      char v22 = 2;
      break;
    case 3u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      char v22 = 3;
      break;
    case 4u:
      *a1 = *(void *)a2;
      unsigned int v24 = &a2[v9];
      uint64_t v25 = ((unint64_t)a1 + v9 + 8) & v21;
      uint64_t v26 = (unint64_t)(v24 + 8) & v21;
      uint64_t v27 = v11;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(v25, v26, v30);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))((v25 + v10 + v13) & ~v13, (v26 + v10 + v13) & ~v13, v27);
      char v22 = 4;
      break;
    default:
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, v32);
      char v22 = 0;
      break;
  }
  *((unsigned char *)a1 + v15) = v22;
  return a1;
}

unsigned __int8 *sub_21F962DB0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v38 = *(void *)(a3 + 24);
    uint64_t v5 = *(void *)(v38 - 8);
    unint64_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v33 = v6 + v7;
    if (((v6 + v7) & ~v7) + v6 <= v6) {
      unint64_t v8 = *(void *)(*(void *)(v38 - 8) + 64);
    }
    else {
      unint64_t v8 = ((v6 + v7) & ~v7) + v6;
    }
    uint64_t v37 = sub_21FA24310();
    uint64_t v35 = *(void *)(v37 - 8);
    uint64_t v9 = *(unsigned __int8 *)(v35 + 80);
    uint64_t v10 = *(void *)(v35 + 64);
    uint64_t v36 = sub_21FA24320();
    uint64_t v11 = *(void *)(v36 - 8);
    uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v34 = v10;
    unint64_t v13 = ((v10 + v12 + ((v9 + 8) & ~v9)) & ~v12) + *(void *)(v11 + 64);
    if (v8 > v13) {
      unint64_t v13 = v8;
    }
    if (v13 <= 0x10) {
      uint64_t v14 = 16;
    }
    else {
      uint64_t v14 = v13;
    }
    unsigned int v15 = a1[v14];
    unsigned int v16 = v15 - 5;
    if (v15 >= 5)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a1;
          if (v14 < 4) {
            goto LABEL_20;
          }
          goto LABEL_22;
        case 2:
          int v18 = *(unsigned __int16 *)a1;
          if (v14 >= 4) {
            goto LABEL_22;
          }
          goto LABEL_20;
        case 3:
          int v18 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v14 < 4) {
            goto LABEL_20;
          }
          goto LABEL_22;
        case 4:
          int v18 = *(_DWORD *)a1;
          if (v14 < 4) {
LABEL_20:
          }
            unsigned int v15 = (v18 | (v16 << (8 * v14))) + 5;
          else {
LABEL_22:
          }
            unsigned int v15 = v18 + 5;
          break;
        default:
          break;
      }
    }
    uint64_t v32 = ~v7;
    uint64_t v19 = ~v9;
    uint64_t v20 = ~v12;
    switch(v15)
    {
      case 1u:
        uint64_t v21 = *(void (**)(unsigned __int8 *, uint64_t))(v5 + 8);
        v21(a1, v38);
        v21((unsigned __int8 *)((unint64_t)&a1[v33] & v32), v38);
        uint64_t v19 = ~v9;
        uint64_t v20 = ~v12;
        break;
      case 2u:
        swift_release();
        break;
      case 3u:
        swift_release();
        swift_release();
        break;
      case 4u:
        swift_release();
        (*(void (**)(unint64_t, uint64_t))(v35 + 8))((unint64_t)&a1[v9 + 8] & v19, v37);
        (*(void (**)(unint64_t, uint64_t))(v11 + 8))((((unint64_t)&a1[v9 + 8] & v19) + v34 + v12) & v20, v36);
        break;
      default:
        (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, v38);
        break;
    }
    unsigned int v22 = a2[v14];
    unsigned int v23 = v22 - 5;
    if (v22 >= 5)
    {
      if (v14 <= 3) {
        uint64_t v24 = v14;
      }
      else {
        uint64_t v24 = 4;
      }
      switch(v24)
      {
        case 1:
          int v25 = *a2;
          if (v14 < 4) {
            goto LABEL_40;
          }
          goto LABEL_42;
        case 2:
          int v25 = *(unsigned __int16 *)a2;
          if (v14 >= 4) {
            goto LABEL_42;
          }
          goto LABEL_40;
        case 3:
          int v25 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v14 < 4) {
            goto LABEL_40;
          }
          goto LABEL_42;
        case 4:
          int v25 = *(_DWORD *)a2;
          if (v14 < 4) {
LABEL_40:
          }
            unsigned int v22 = (v25 | (v23 << (8 * v14))) + 5;
          else {
LABEL_42:
          }
            unsigned int v22 = v25 + 5;
          break;
        default:
          break;
      }
    }
    switch(v22)
    {
      case 1u:
        uint64_t v30 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32);
        v30(a1, a2, v38);
        v30((unsigned __int8 *)((unint64_t)&a1[v33] & v32), (unsigned __int8 *)((unint64_t)&a2[v33] & v32), v38);
        char v26 = 1;
        break;
      case 2u:
        *(void *)a1 = *(void *)a2;
        char v26 = 2;
        break;
      case 3u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v26 = 3;
        break;
      case 4u:
        *(void *)a1 = *(void *)a2;
        uint64_t v27 = &a2[v9];
        uint64_t v28 = (unint64_t)&a1[v9 + 8] & v19;
        uint64_t v29 = (unint64_t)(v27 + 8) & v19;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32))(v28, v29, v37);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))((v28 + v34 + v12) & v20, (v29 + v34 + v12) & v20, v36);
        char v26 = 4;
        break;
      default:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, v38);
        char v26 = 0;
        break;
    }
    a1[v14] = v26;
  }
  return a1;
}

uint64_t sub_21F9632F8(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  unint64_t v7 = ((v6 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + v6;
  if (v7 <= v6) {
    unint64_t v8 = v6;
  }
  else {
    unint64_t v8 = v7;
  }
  uint64_t v9 = *(void *)(sub_21FA24310() - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 64);
  uint64_t v12 = *(void *)(sub_21FA24320() - 8);
  unint64_t v13 = ((v10 + v11 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
      + *(void *)(v12 + 64);
  if (v8 > v13) {
    unint64_t v13 = v8;
  }
  uint64_t v14 = 16;
  if (v13 > 0x10) {
    uint64_t v14 = v13;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_27;
  }
  uint64_t v15 = v14 + 1;
  char v16 = 8 * (v14 + 1);
  if ((v14 + 1) <= 3)
  {
    unsigned int v19 = ((a2 + ~(-1 << v16) - 251) >> v16) + 1;
    if (HIWORD(v19))
    {
      int v17 = *(_DWORD *)((char *)a1 + v15);
      if (!v17) {
        goto LABEL_27;
      }
      goto LABEL_19;
    }
    if (v19 > 0xFF)
    {
      int v17 = *(unsigned __int16 *)((char *)a1 + v15);
      if (!*(unsigned __int16 *)((char *)a1 + v15)) {
        goto LABEL_27;
      }
      goto LABEL_19;
    }
    if (v19 < 2)
    {
LABEL_27:
      unsigned int v21 = *((unsigned __int8 *)a1 + v14);
      if (v21 >= 5) {
        return (v21 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v17 = *((unsigned __int8 *)a1 + v15);
  if (!*((unsigned char *)a1 + v15)) {
    goto LABEL_27;
  }
LABEL_19:
  int v20 = (v17 - 1) << v16;
  if (v15 > 3) {
    int v20 = 0;
  }
  if (v15)
  {
    if (v15 > 3) {
      LODWORD(v15) = 4;
    }
    switch((int)v15)
    {
      case 2:
        LODWORD(v15) = *a1;
        break;
      case 3:
        LODWORD(v15) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v15) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v15) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v15 | v20) + 252;
}

void sub_21F963558(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a4 + 24) - 8);
  unint64_t v8 = *(void *)(v7 + 64);
  unint64_t v9 = ((v8 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + v8;
  if (v9 <= v8) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = v9;
  }
  uint64_t v11 = *(void *)(sub_21FA24310() - 8);
  unint64_t v12 = (*(unsigned __int8 *)(v11 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = *(void *)(v11 + 64);
  uint64_t v14 = *(void *)(sub_21FA24320() - 8);
  unint64_t v15 = ((v12 + v13 + *(unsigned __int8 *)(v14 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))
      + *(void *)(v14 + 64);
  if (v10 > v15) {
    unint64_t v15 = v10;
  }
  if (v15 <= 0x10) {
    unint64_t v15 = 16;
  }
  size_t v16 = v15 + 1;
  if (a3 < 0xFC)
  {
    int v17 = 0;
  }
  else if (v16 <= 3)
  {
    unsigned int v20 = ((a3 + ~(-1 << (8 * v16)) - 251) >> (8 * v16)) + 1;
    if (HIWORD(v20))
    {
      int v17 = 4;
    }
    else if (v20 >= 0x100)
    {
      int v17 = 2;
    }
    else
    {
      int v17 = v20 > 1;
    }
  }
  else
  {
    int v17 = 1;
  }
  if (a2 > 0xFB)
  {
    unsigned int v18 = a2 - 252;
    if (v16 < 4)
    {
      int v19 = (v18 >> (8 * v16)) + 1;
      if (v15 != -1)
      {
        int v21 = v18 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if (v16 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v16 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v15 + 1);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v16] = v19;
        break;
      case 2:
        *(_WORD *)&a1[v16] = v19;
        break;
      case 3:
LABEL_39:
        __break(1u);
        JUMPOUT(0x21F963824);
      case 4:
        *(_DWORD *)&a1[v16] = v19;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v17)
    {
      case 1:
        a1[v16] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_28;
      case 2:
        *(_WORD *)&a1[v16] = 0;
        goto LABEL_27;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v16] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_28;
      default:
LABEL_27:
        if (a2) {
LABEL_28:
        }
          a1[v15] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_21F96384C(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 24) - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  unint64_t v5 = ((v4 + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + v4;
  if (v5 <= v4) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = v5;
  }
  uint64_t v7 = *(void *)(sub_21FA24310() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(sub_21FA24320() - 8);
  unint64_t v11 = ((v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
      + *(void *)(v10 + 64);
  if (v6 > v11) {
    unint64_t v11 = v6;
  }
  if (v11 <= 0x10) {
    unint64_t v11 = 16;
  }
  uint64_t result = a1[v11];
  if (result >= 5)
  {
    if (v11 <= 3) {
      uint64_t v13 = v11;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a1;
        goto LABEL_17;
      case 2:
        int v14 = *(unsigned __int16 *)a1;
        goto LABEL_17;
      case 3:
        int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_17;
      case 4:
        int v14 = *(_DWORD *)a1;
LABEL_17:
        unsigned int v15 = (v14 | ((result - 5) << (8 * v11))) + 5;
        unsigned int v16 = v14 + 5;
        if (v11 >= 4) {
          uint64_t result = v16;
        }
        else {
          uint64_t result = v15;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_21F963A20(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = v5;
  if (a2 > 4)
  {
    unint64_t v11 = *(void *)(v5 + 64);
    if (((v11 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + v11 <= v11) {
      unint64_t v12 = *(void *)(v5 + 64);
    }
    else {
      unint64_t v12 = ((v11 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + v11;
    }
    uint64_t v13 = *(void *)(sub_21FA24310() - 8);
    unint64_t v14 = (*(unsigned __int8 *)(v13 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    uint64_t v15 = *(void *)(v13 + 64);
    uint64_t v16 = *(void *)(sub_21FA24320() - 8);
    unint64_t v17 = ((v14 + v15 + *(unsigned __int8 *)(v16 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))
        + *(void *)(v16 + 64);
    if (v12 > v17) {
      unint64_t v17 = v12;
    }
    if (v17 <= 0x10) {
      size_t v18 = 16;
    }
    else {
      size_t v18 = v17;
    }
    unsigned int v19 = a2 - 5;
    if (v18 < 4)
    {
      unsigned int v20 = v19 >> (8 * v18);
      int v21 = v19 & ~(-1 << (8 * v18));
      a1[v18] = v20 + 5;
      bzero(a1, v18);
      if (v18 == 3)
      {
        *(_WORD *)a1 = v21;
        a1[2] = BYTE2(v21);
      }
      else if (v18 == 2)
      {
        *(_WORD *)a1 = v21;
      }
      else
      {
        *a1 = v21;
      }
    }
    else
    {
      a1[v18] = 5;
      bzero(a1, v18);
      *(_DWORD *)a1 = v19;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(sub_21FA24310() - 8);
    uint64_t v8 = *(void *)(sub_21FA24320() - 8);
    unint64_t v9 = *(void *)(v6 + 64);
    if (((v9 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)) + v9 > v9) {
      v9 += (v9 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    }
    unint64_t v10 = ((((*(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
          + *(void *)(v7 + 64)
          + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
        + *(void *)(v8 + 64);
    if (v9 > v10) {
      unint64_t v10 = v9;
    }
    if (v10 <= 0x10) {
      unint64_t v10 = 16;
    }
    a1[v10] = a2;
  }
}

BOOL sub_21F963CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v9 = type metadata accessor for PlottableProjection();
  uint64_t v10 = sub_21FA26340();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v25 - v12;
  uint64_t v14 = type metadata accessor for PlottableProjection();
  uint64_t v26 = sub_21FA26340();
  uint64_t v15 = *(void *)(v26 - 8);
  __n128 v16 = MEMORY[0x270FA5388](v26);
  size_t v18 = (char *)&v25 - v17;
  (*(void (**)(uint64_t, uint64_t, __n128))(a7 + 32))(a5, a7, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v13, 1, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v19 = *(void *)(v14 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v18, 1, 1, v14);
  }
  else
  {
    int v20 = swift_dynamicCast();
    uint64_t v19 = *(void *)(v14 - 8);
    if (v20)
    {
      int v21 = v18;
      uint64_t v22 = 0;
    }
    else
    {
      int v21 = v18;
      uint64_t v22 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v21, v22, 1, v14);
  }
  BOOL v23 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1, v14) == 0;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v26);
  return v23;
}

uint64_t sub_21F964044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v38 = a5;
  uint64_t v39 = a8;
  uint64_t v36 = a3;
  uint64_t v37 = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = type metadata accessor for PlottableProjection();
  uint64_t v13 = sub_21FA26340();
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v33 - v14;
  uint64_t v16 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v33 - v18;
  uint64_t v33 = *(void *)(*(void *)(a7 + 8) + 8);
  uint64_t v34 = a7;
  uint64_t v35 = a4;
  swift_getAssociatedTypeWitness();
  uint64_t v20 = type metadata accessor for PlottableProjection();
  uint64_t v21 = *(void *)(v20 - 8);
  __n128 v22 = MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v33 - v23;
  (*(void (**)(uint64_t, uint64_t, __n128))(a9 + 32))(a6, a9, v22);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v12);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v15, v12);
    uint64_t v26 = swift_dynamicCast();
    MEMORY[0x270FA5388](v26);
    uint64_t v27 = v35;
    uint64_t v28 = v38;
    *(&v33 - 8) = v35;
    *(&v33 - 7) = v28;
    uint64_t v29 = v33;
    uint64_t v30 = v34;
    *(&v33 - 6) = a6;
    *(&v33 - 5) = v30;
    *(&v33 - 4) = v39;
    *(&v33 - 3) = a9;
    *(&v33 - 2) = (uint64_t)v24;
    uint64_t v32 = sub_21F751B50((void (*)(char *, char *))sub_21F964574, (uint64_t)(&v33 - 10), v27, (uint64_t)&type metadata for AnyPlottableValue, MEMORY[0x263F8E628], v29, MEMORY[0x263F8E658], v31);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
    return v32;
  }
  return result;
}

__n128 sub_21F964394@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v21 - v12;
  uint64_t v14 = type metadata accessor for PlottableProjection();
  __n128 v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v21 - v16;
  (*(void (**)(char *, uint64_t, __n128))(v18 + 16))((char *)&v21 - v16, a2, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, AssociatedTypeWitness);
  sub_21F9CBBA4((uint64_t)v17, (uint64_t)v13, AssociatedTypeWitness, a3, a4, (uint64_t)v22);
  long long v19 = v22[3];
  *(_OWORD *)(a5 + 32) = v22[2];
  *(_OWORD *)(a5 + 48) = v19;
  *(void *)(a5 + 64) = v23;
  __n128 result = (__n128)v22[1];
  *(_OWORD *)a5 = v22[0];
  *(__n128 *)(a5 + 16) = result;
  return result;
}

double sub_21F964574@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = sub_21F964394(a1, v2[8], v2[3], v2[6], a2).n128_u64[0];
  return result;
}

uint64_t sub_21F9645AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v67 = a3;
  uint64_t v68 = a4;
  uint64_t v72 = a2;
  uint64_t v66 = a6;
  uint64_t v61 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v60 = (char *)v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  v53[1] = (char *)v53 - v18;
  uint64_t v70 = a7;
  uint64_t v59 = *(void *)(a7 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v57 = (char *)v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = *(void *)(a8 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v55 = (char *)v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = a10;
  v53[0] = *(void *)(*(void *)(a10 + 8) + 8);
  uint64_t v69 = a5;
  swift_getAssociatedTypeWitness();
  uint64_t v23 = type metadata accessor for PlottableProjection.Storage();
  uint64_t v63 = *(void *)(v23 - 8);
  uint64_t v64 = v23;
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (void **)((char *)v53 - v24);
  uint64_t v71 = a9;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v26 = type metadata accessor for PlottableProjection();
  uint64_t v27 = sub_21FA26340();
  MEMORY[0x270FA5388](v27 - 8);
  uint64_t v29 = (char *)v53 - v28;
  uint64_t v30 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v33 = (char *)v53 - v32;
  uint64_t v62 = a8;
  uint64_t v65 = a13;
  uint64_t v34 = type metadata accessor for PlottableProjection();
  uint64_t v35 = *(void *)(v34 - 8);
  __n128 v36 = MEMORY[0x270FA5388](v34);
  uint64_t v38 = (char *)v53 - v37;
  (*(void (**)(uint64_t, uint64_t, __n128))(a14 + 32))(v71, a14, v36);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v29, 1, v26) == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v33, v29, v26);
    swift_dynamicCast();
    (*(void (**)(void **, char *, uint64_t))(v63 + 16))(v25, &v38[*(int *)(v34 + 44)], v64);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (!EnumCaseMultiPayload)
    {
      uint64_t v40 = v58;
      uint64_t v41 = v55;
      uint64_t v42 = v62;
      (*(void (**)(char *, void **, uint64_t))(v58 + 32))(v55, v25, v62);
      (*(void (**)(uint64_t))(v65 + 24))(v42);
      uint64_t v43 = v60;
      uint64_t v44 = v66;
      swift_dynamicCast();
      uint64_t v45 = v70;
      type metadata accessor for ConcreteScale();
      uint64_t v72 = v35;
      uint64_t v46 = (uint64_t)v57;
      sub_21F8B53C8();
      (*(void (**)(char *, uint64_t))(v61 + 8))(v43, v44);
      uint64_t v47 = sub_21FA260A0();
      uint64_t v48 = sub_21F90E518(v46, v47, v45);
      uint64_t v49 = v46;
      uint64_t v35 = v72;
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v49, v45);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v42);
LABEL_6:
      (*(void (**)(char *, uint64_t))(v35 + 8))(v38, v34);
      return v48;
    }
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v50 = *v25;
      uint64_t v51 = type metadata accessor for ConcreteScale();
      uint64_t v48 = sub_21F8B74C4(v68, v50, v51, v69, a12, v65, v56);
      swift_release();
      goto LABEL_6;
    }
  }
  uint64_t result = sub_21FA266E0();
  __break(1u);
  return result;
}

uint64_t sub_21F964CB0(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a2, a1);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  return a2;
}

_UNKNOWN **sub_21F964D1C()
{
  return &protocol witness table for Never;
}

uint64_t sub_21F964D28()
{
  return MEMORY[0x263F8E640];
}

uint64_t dispatch thunk of LazyChartData.xRange.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of LazyChartData.yRange.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of LazyChartData.elements(xRange:yRange:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 88))();
}

uint64_t _s9MonotoneXVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  id v4 = v3;
  return a1;
}

uint64_t _s9MonotoneXVwca(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t _s9MonotoneXVwta(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t _s9MonotoneXVwet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s9MonotoneXVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s9MonotoneXVMa()
{
  return &_s9MonotoneXVN;
}

double sub_21F964F3C(double a1, double a2)
{
  double v3 = v2[5];
  double v4 = v2[6];
  double v5 = v3 - v2[3];
  if (v5 == 0.0) {
    double v6 = 0.0;
  }
  else {
    double v6 = v3 - v2[3];
  }
  double v7 = a1 - v3;
  double v8 = (v4 - v2[4]) / v6;
  if (v7 == 0.0) {
    double v9 = 0.0;
  }
  else {
    double v9 = v7;
  }
  double v10 = (a2 - v4) / v9;
  double v11 = 1.0;
  if (v8 >= 0.0) {
    double v12 = 1.0;
  }
  else {
    double v12 = -1.0;
  }
  if (v10 < 0.0) {
    double v11 = -1.0;
  }
  double v13 = (v5 * v10 + v7 * v8) / (v7 + v5);
  double v14 = fabs(v8);
  double v15 = fabs(v10);
  if (v15 >= v14) {
    double v15 = v14;
  }
  double v16 = fabs(v13) * 0.5;
  if (v16 >= v15) {
    double v16 = v15;
  }
  return v16 * (v11 + v12);
}

void sub_21F964FCC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 8);
  if (v2 == 3)
  {
    sub_21FA262A0();
  }
  else if (v2 == 2)
  {
    sub_21FA26290();
  }
  uint64_t v3 = *(void *)(v0 + 16);
  if (v3 == 1 || !v3 && v2 == 1) {
    CGPathCloseSubpath(*(CGMutablePathRef *)v1);
  }
  if (__OFSUB__(0, v3)) {
    __break(1u);
  }
  else {
    *(void *)(v1 + 16) = -v3;
  }
}

__n128 sub_21F9650D8(double a1, double a2)
{
  uint64_t v5 = *(void *)(v2 + 8);
  switch(v5)
  {
    case 2:
      *(void *)(v2 + 8) = 3;
      double v6 = sub_21F964F3C(a1, a2);
      break;
    case 1:
      *(void *)(v2 + 8) = 2;
LABEL_11:
      double v6 = NAN;
      goto LABEL_12;
    case 0:
      *(void *)(v2 + 8) = 1;
      if (*(void *)(v2 + 16) == 1) {
        sub_21FA26290();
      }
      else {
        sub_21FA26280();
      }
      goto LABEL_11;
    default:
      double v6 = sub_21F964F3C(a1, a2);
      break;
  }
  sub_21FA262A0();
LABEL_12:
  __n128 result = *(__n128 *)(v2 + 40);
  *(__n128 *)(v2 + 24) = result;
  *(double *)(v2 + 40) = a1;
  *(double *)(v2 + 48) = a2;
  *(double *)(v2 + 56) = v6;
  return result;
}

int64x2_t sub_21F965304()
{
  *(void *)(v0 + 8) = 0;
  int64x2_t result = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v0 + 24) = result;
  *(int64x2_t *)(v0 + 40) = result;
  *(void *)(v0 + 56) = 0x7FF8000000000000;
  return result;
}

void sub_21F965324()
{
  *(void *)(v0 + 16) = -1;
}

void sub_21F965330()
{
  *(void *)(v0 + 16) = 0;
}

uint64_t sub_21F96533C(char **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_21F9352C8((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  uint64_t result = sub_21F9653AC(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_21F9653AC(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_21FA26850();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_138;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v80 = *a1;
      uint64_t v81 = -1;
      uint64_t v82 = 1;
      uint64_t v83 = *a1;
      do
      {
        double v84 = *(double *)(v80 + 16 * v82);
        uint64_t v85 = v81;
        uint64_t v86 = v83;
        do
        {
          if (v84 >= *(double *)v86) {
            break;
          }
          if (!v80) {
            goto LABEL_142;
          }
          uint64_t v87 = *(void *)(v86 + 24);
          *(_OWORD *)(v86 + 16) = *(_OWORD *)v86;
          *(double *)uint64_t v86 = v84;
          *(void *)(v86 + 8) = v87;
          v86 -= 16;
        }
        while (!__CFADD__(v85++, 1));
        ++v82;
        v83 += 16;
        --v81;
      }
      while (v82 != v3);
    }
  }
  else
  {
    if (v3 >= 0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = v3 + 1;
    }
    if (v3 < -1) {
      goto LABEL_137;
    }
    uint64_t v6 = result;
    double v96 = a1;
    if (v3 > 1)
    {
      uint64_t v7 = v5 >> 1;
      sub_21F76CA40(&qword_267EE9558);
      uint64_t result = sub_21FA25ED0();
      *(void *)(result + 16) = v7;
      uint64_t v99 = result;
      double v103 = (double *)(result + 32);
LABEL_13:
      uint64_t v9 = 0;
      uint64_t v10 = *a1;
      uint64_t v97 = *a1 - 16;
      uint64_t v98 = *a1 + 32;
      uint64_t v11 = MEMORY[0x263F8EE78];
      uint64_t v100 = v6;
      uint64_t v101 = v3;
      uint64_t v102 = v10;
      while (1)
      {
        uint64_t v13 = v9++;
        if (v9 < v3)
        {
          double v14 = *(double *)(v10 + 16 * v9);
          double v15 = *(double *)(v10 + 16 * v13);
          uint64_t v9 = v13 + 2;
          if (v13 + 2 < v3)
          {
            double v16 = (double *)(v98 + 16 * v13);
            double v17 = v14;
            while (1)
            {
              double v18 = v17;
              double v17 = *v16;
              if (v14 < v15 == *v16 >= v18) {
                break;
              }
              ++v9;
              v16 += 2;
              if (v3 == v9)
              {
                uint64_t v9 = v3;
                break;
              }
            }
          }
          if (v14 < v15)
          {
            if (v9 < v13) {
              goto LABEL_139;
            }
            if (v13 < v9)
            {
              uint64_t v19 = (long long *)(v97 + 16 * v9);
              uint64_t v20 = v9;
              uint64_t v21 = v13;
              uint64_t v22 = (long long *)(v10 + 16 * v13);
              do
              {
                if (v21 != --v20)
                {
                  if (!v10) {
                    goto LABEL_145;
                  }
                  long long v23 = *v22;
                  *uint64_t v22 = *v19;
                  long long *v19 = v23;
                }
                ++v21;
                --v19;
                ++v22;
              }
              while (v21 < v20);
            }
          }
        }
        if (v9 < v3)
        {
          if (__OFSUB__(v9, v13)) {
            goto LABEL_136;
          }
          if (v9 - v13 < v6)
          {
            uint64_t v24 = v13 + v6;
            if (__OFADD__(v13, v6)) {
              goto LABEL_140;
            }
            if (v24 >= v3) {
              uint64_t v24 = v3;
            }
            if (v24 < v13)
            {
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
              return result;
            }
            if (v9 != v24)
            {
              uint64_t v25 = v97 + 16 * v9;
              do
              {
                double v26 = *(double *)(v10 + 16 * v9);
                uint64_t v27 = v13;
                uint64_t v28 = v25;
                do
                {
                  if (v26 >= *(double *)v28) {
                    break;
                  }
                  if (!v10) {
                    goto LABEL_143;
                  }
                  uint64_t v29 = *(void *)(v28 + 24);
                  *(_OWORD *)(v28 + 16) = *(_OWORD *)v28;
                  *(double *)uint64_t v28 = v26;
                  *(void *)(v28 + 8) = v29;
                  v28 -= 16;
                  ++v27;
                }
                while (v9 != v27);
                ++v9;
                v25 += 16;
              }
              while (v9 != v24);
              uint64_t v9 = v24;
            }
          }
        }
        if (v9 < v13) {
          goto LABEL_131;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_21F7E929C(0, *(void *)(v11 + 16) + 1, 1, (char *)v11);
          uint64_t v11 = result;
        }
        unint64_t v31 = *(void *)(v11 + 16);
        unint64_t v30 = *(void *)(v11 + 24);
        unint64_t v12 = v31 + 1;
        uint64_t v10 = v102;
        if (v31 >= v30 >> 1)
        {
          uint64_t result = (uint64_t)sub_21F7E929C((char *)(v30 > 1), v31 + 1, 1, (char *)v11);
          uint64_t v10 = v102;
          uint64_t v11 = result;
        }
        *(void *)(v11 + 16) = v12;
        uint64_t v32 = v11 + 32;
        uint64_t v33 = (uint64_t *)(v11 + 32 + 16 * v31);
        *uint64_t v33 = v13;
        v33[1] = v9;
        if (v31)
        {
          while (1)
          {
            unint64_t v34 = v12 - 1;
            if (v12 >= 4)
            {
              unint64_t v39 = v32 + 16 * v12;
              uint64_t v40 = *(void *)(v39 - 64);
              uint64_t v41 = *(void *)(v39 - 56);
              BOOL v45 = __OFSUB__(v41, v40);
              uint64_t v42 = v41 - v40;
              if (v45) {
                goto LABEL_120;
              }
              uint64_t v44 = *(void *)(v39 - 48);
              uint64_t v43 = *(void *)(v39 - 40);
              BOOL v45 = __OFSUB__(v43, v44);
              uint64_t v37 = v43 - v44;
              char v38 = v45;
              if (v45) {
                goto LABEL_121;
              }
              unint64_t v46 = v12 - 2;
              uint64_t v47 = (uint64_t *)(v32 + 16 * (v12 - 2));
              uint64_t v49 = *v47;
              uint64_t v48 = v47[1];
              BOOL v45 = __OFSUB__(v48, v49);
              uint64_t v50 = v48 - v49;
              if (v45) {
                goto LABEL_122;
              }
              BOOL v45 = __OFADD__(v37, v50);
              uint64_t v51 = v37 + v50;
              if (v45) {
                goto LABEL_124;
              }
              if (v51 >= v42)
              {
                uint64_t v69 = (uint64_t *)(v32 + 16 * v34);
                uint64_t v71 = *v69;
                uint64_t v70 = v69[1];
                BOOL v45 = __OFSUB__(v70, v71);
                uint64_t v72 = v70 - v71;
                if (v45) {
                  goto LABEL_130;
                }
                BOOL v62 = v37 < v72;
                goto LABEL_83;
              }
            }
            else
            {
              if (v12 != 3)
              {
                uint64_t v63 = *(void *)(v11 + 32);
                uint64_t v64 = *(void *)(v11 + 40);
                BOOL v45 = __OFSUB__(v64, v63);
                uint64_t v56 = v64 - v63;
                char v57 = v45;
                goto LABEL_77;
              }
              uint64_t v36 = *(void *)(v11 + 32);
              uint64_t v35 = *(void *)(v11 + 40);
              BOOL v45 = __OFSUB__(v35, v36);
              uint64_t v37 = v35 - v36;
              char v38 = v45;
            }
            if (v38) {
              goto LABEL_123;
            }
            unint64_t v46 = v12 - 2;
            uint64_t v52 = (uint64_t *)(v32 + 16 * (v12 - 2));
            uint64_t v54 = *v52;
            uint64_t v53 = v52[1];
            BOOL v55 = __OFSUB__(v53, v54);
            uint64_t v56 = v53 - v54;
            char v57 = v55;
            if (v55) {
              goto LABEL_125;
            }
            uint64_t v58 = (uint64_t *)(v32 + 16 * v34);
            uint64_t v60 = *v58;
            uint64_t v59 = v58[1];
            BOOL v45 = __OFSUB__(v59, v60);
            uint64_t v61 = v59 - v60;
            if (v45) {
              goto LABEL_127;
            }
            if (__OFADD__(v56, v61)) {
              goto LABEL_129;
            }
            if (v56 + v61 >= v37)
            {
              BOOL v62 = v37 < v61;
LABEL_83:
              if (v62) {
                unint64_t v34 = v46;
              }
              goto LABEL_85;
            }
LABEL_77:
            if (v57) {
              goto LABEL_126;
            }
            uint64_t v65 = (uint64_t *)(v32 + 16 * v34);
            uint64_t v67 = *v65;
            uint64_t v66 = v65[1];
            BOOL v45 = __OFSUB__(v66, v67);
            uint64_t v68 = v66 - v67;
            if (v45) {
              goto LABEL_128;
            }
            if (v68 < v56) {
              goto LABEL_15;
            }
LABEL_85:
            unint64_t v73 = v34 - 1;
            if (v34 - 1 >= v12)
            {
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
              goto LABEL_141;
            }
            if (!v10) {
              goto LABEL_144;
            }
            uint64_t v74 = v11;
            uint64_t v75 = (uint64_t *)(v32 + 16 * v73);
            uint64_t v76 = *v75;
            uint64_t v77 = (void *)(v32 + 16 * v34);
            uint64_t v78 = v77[1];
            uint64_t result = sub_21F7C3BB8((double *)(v10 + 16 * *v75), (double *)(v10 + 16 * *v77), v10 + 16 * v78, v103);
            if (v1) {
              goto LABEL_93;
            }
            if (v78 < v76) {
              goto LABEL_117;
            }
            if (v34 > *(void *)(v74 + 16)) {
              goto LABEL_118;
            }
            uint64_t *v75 = v76;
            *(void *)(v32 + 16 * v73 + 8) = v78;
            unint64_t v79 = *(void *)(v74 + 16);
            if (v34 >= v79) {
              goto LABEL_119;
            }
            uint64_t v11 = v74;
            unint64_t v12 = v79 - 1;
            uint64_t result = (uint64_t)memmove((void *)(v32 + 16 * v34), v77 + 2, 16 * (v79 - 1 - v34));
            *(void *)(v74 + 16) = v79 - 1;
            uint64_t v10 = v102;
            if (v79 <= 2) {
              goto LABEL_15;
            }
          }
        }
        unint64_t v12 = 1;
LABEL_15:
        uint64_t v6 = v100;
        uint64_t v3 = v101;
        if (v9 >= v101)
        {
          uint64_t v8 = v99;
          goto LABEL_103;
        }
      }
    }
    uint64_t v8 = MEMORY[0x263F8EE78];
    double v103 = (double *)(MEMORY[0x263F8EE78] + 32);
    if (v3 == 1)
    {
      uint64_t v99 = MEMORY[0x263F8EE78];
      goto LABEL_13;
    }
    unint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
    uint64_t v11 = MEMORY[0x263F8EE78];
LABEL_103:
    uint64_t result = v11;
    uint64_t v99 = v8;
    if (v12 >= 2)
    {
      uint64_t v89 = *v96;
      do
      {
        unint64_t v90 = v12 - 2;
        if (v12 < 2) {
          goto LABEL_132;
        }
        if (!v89) {
          goto LABEL_146;
        }
        uint64_t v91 = result;
        uint64_t v92 = *(void *)(result + 32 + 16 * v90);
        uint64_t v93 = *(void *)(result + 32 + 16 * (v12 - 1) + 8);
        uint64_t result = sub_21F7C3BB8((double *)(v89 + 16 * v92), (double *)(v89 + 16 * *(void *)(result + 32 + 16 * (v12 - 1))), v89 + 16 * v93, v103);
        if (v1) {
          break;
        }
        if (v93 < v92) {
          goto LABEL_133;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_21F936940(v91);
          uint64_t v91 = result;
        }
        if (v90 >= *(void *)(v91 + 16)) {
          goto LABEL_134;
        }
        double v94 = (void *)(v91 + 32 + 16 * v90);
        void *v94 = v92;
        v94[1] = v93;
        unint64_t v95 = *(void *)(v91 + 16);
        if (v12 > v95) {
          goto LABEL_135;
        }
        memmove((void *)(v91 + 32 + 16 * (v12 - 1)), (const void *)(v91 + 32 + 16 * v12), 16 * (v95 - v12));
        uint64_t result = v91;
        *(void *)(v91 + 16) = v95 - 1;
        unint64_t v12 = v95 - 1;
      }
      while (v95 > 2);
    }
LABEL_93:
    swift_bridgeObjectRelease();
    *(void *)(v99 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_21F965A3C(unint64_t result)
{
  if (result)
  {
    unint64_t v2 = *v1;
    unint64_t v3 = *v1 - 0x61C8864680B583EBLL;
    *uint64_t v1 = v3;
    unint64_t v4 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v3 ^ (v3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v3 ^ (v3 >> 30))) >> 27));
    unint64_t v5 = v4 ^ (v4 >> 31);
    unint64_t v6 = v5 * result;
    uint64_t v7 = (v5 * (unsigned __int128)result) >> 64;
    if (v6 < result)
    {
      unint64_t v8 = -(uint64_t)result % result;
      if (v8 > v6)
      {
        unint64_t v9 = v2 + 0x3C6EF372FE94F82ALL;
        do
        {
          v3 -= 0x61C8864680B583EBLL;
          unint64_t v10 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) >> 27));
          unint64_t v11 = v10 ^ (v10 >> 31);
          v9 -= 0x61C8864680B583EBLL;
        }
        while (v8 > v11 * result);
        uint64_t v7 = (v11 * (unsigned __int128)result) >> 64;
        *uint64_t v1 = v3;
      }
    }
    return v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *sub_21F965B04(char *result, char a2, uint64_t a3, char a4, double (*a5)(double), double a6, double a7)
{
  char v52 = (char)result;
  double v7 = a7 - a6;
  if ((~COERCE__INT64(a7 - a6) & 0x7FF0000000000000) == 0) {
    goto LABEL_81;
  }
  uint64_t v11 = 0;
  double v12 = v7 / 12300.0;
  uint64_t v13 = (char *)MEMORY[0x263F8EE78];
  uint64_t v14 = 0x78ABBF7B5AEAE776;
  do
  {
    uint64_t v16 = v14 - 0x61C8864680B583EBLL;
    unint64_t v17 = 0xBF58476D1CE4E5B9 * ((v14 - 0x61C8864680B583EBLL) ^ ((unint64_t)(v14 - 0x61C8864680B583EBLL) >> 30));
    unint64_t v18 = (0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) ^ ((0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) >> 31);
    if (0x20000000000001 * v18 >= 0x1FFFFFFFFFF801)
    {
      unint64_t v22 = (v18 * (unsigned __int128)0x20000000000001uLL) >> 64;
    }
    else
    {
      unint64_t v19 = v14 + 0x3C6EF372FE94F82ALL;
      do
      {
        v16 -= 0x61C8864680B583EBLL;
        unint64_t v20 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v19 ^ (v19 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v19 ^ (v19 >> 30))) >> 27));
        unint64_t v21 = v20 ^ (v20 >> 31);
        v19 -= 0x61C8864680B583EBLL;
      }
      while (0x20000000000001 * v21 < 0x1FFFFFFFFFF801);
      unint64_t v22 = (v21 * (unsigned __int128)0x20000000000001uLL) >> 64;
    }
    uint64_t v14 = v16;
    if (v22 == 0x20000000000000) {
      double v23 = a7;
    }
    else {
      double v23 = v7 * ((double)v22 * 1.11022302e-16) + a6;
    }
    double v24 = a5(v23);
    double v25 = a5(v12 + v23);
    a5(v23 - v12);
    if ((~*(void *)&v24 & 0x7FF0000000000000) != 0)
    {
      double v27 = (v25 - v26) / (v12 + v12);
      if ((~*(void *)&v27 & 0x7FF0000000000000) != 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v13 = sub_21F7E61F4(0, *((void *)v13 + 2) + 1, 1, v13);
        }
        unint64_t v29 = *((void *)v13 + 2);
        unint64_t v28 = *((void *)v13 + 3);
        unint64_t v30 = v13;
        if (v29 >= v28 >> 1) {
          unint64_t v30 = sub_21F7E61F4((char *)(v28 > 1), v29 + 1, 1, v13);
        }
        *((void *)v30 + 2) = v29 + 1;
        uint64_t v13 = v30;
        double v15 = &v30[16 * v29];
        *((double *)v15 + 4) = v24;
        *((double *)v15 + 5) = v27;
      }
    }
    ++v11;
  }
  while (v11 != 200);
  uint64_t v54 = v13;
  if (*((void *)v13 + 2) <= 1uLL) {
    return (char *)swift_bridgeObjectRelease();
  }
  sub_21F96533C(&v54);
  uint64_t result = v54;
  int64_t v31 = *((void *)v54 + 2);
  if (!v31) {
    goto LABEL_82;
  }
  double v32 = a7;
  double v33 = a6;
  uint64_t v34 = v31 - 1;
  if (v31 == 1)
  {
LABEL_36:
    uint64_t result = (char *)swift_bridgeObjectRelease();
    if (v52)
    {
      if (v32 <= 0.0 || v33 >= 0.0)
      {
        if (v32 <= 0.0 || v33 < 0.0 || v33 >= v32 * 0.5)
        {
          if (v33 * 0.5 < v32 && v32 <= 0.0 && v33 < 0.0) {
            double v32 = -v33;
          }
          if ((a2 & 1) == 0)
          {
LABEL_43:
            BOOL v39 = v33 > v32;
            if (v33 >= v32) {
              return result;
            }
LABEL_44:
            if (v39) {
              goto LABEL_83;
            }
            return result;
          }
LABEL_51:
          double v40 = (v32 - v33) / v7;
          if (v40 > 0.1 && v40 < 1.2)
          {
            if (a4)
            {
              if (v33 == 0.0)
              {
LABEL_60:
                BOOL v39 = v33 > v7;
                if (v33 >= v7) {
                  return result;
                }
                goto LABEL_44;
              }
LABEL_73:
              if (v32 == 0.0)
              {
                BOOL v39 = -v7 > v32;
                if (-v7 >= v32) {
                  return result;
                }
              }
              else
              {
                double v47 = (v32 + v33) * 0.5;
                double v48 = v47 - v7 * 0.5;
                double v49 = v47 + v7 * 0.5;
                BOOL v39 = v48 > v49;
                if (v48 >= v49) {
                  return result;
                }
              }
              goto LABEL_44;
            }
          }
          else if (a4)
          {
            double v42 = (v32 - v33) * 0.05;
            double v43 = v33 - v42;
            double v44 = v32 + v42;
            BOOL v39 = v43 > v44;
            if (v43 >= v44) {
              return result;
            }
            goto LABEL_44;
          }
          double v7 = v7 / *(double *)&a3;
          if (v33 == 0.0) {
            goto LABEL_60;
          }
          goto LABEL_73;
        }
        double v33 = -v32;
      }
      else if (fabs(v32 / (v32 - v33) + -0.5) < 0.15)
      {
        if (v32 < -v33) {
          double v32 = -v33;
        }
        double v33 = -v32;
        if ((a2 & 1) == 0) {
          goto LABEL_43;
        }
        goto LABEL_51;
      }
    }
    if ((a2 & 1) == 0) {
      goto LABEL_43;
    }
    goto LABEL_51;
  }
  int64_t v35 = 0;
  uint64_t v36 = v54 + 32;
  uint64_t v37 = (double *)(v54 + 32);
  while (1)
  {
    double v33 = *v37;
    double v32 = *(double *)&v36[16 * v34];
    double v38 = (v32 - *v37) / v7;
    if (v38 > 100000000.0)
    {
      ++v35;
LABEL_31:
      --v34;
      goto LABEL_32;
    }
    if (v35 >= (unint64_t)v31) {
      goto LABEL_80;
    }
    if (fabs(*(double *)&v36[16 * v35 + 8]) / v38 <= 10.0)
    {
      if (fabs(*(double *)&v36[16 * v34 + 8]) / v38 <= 10.0) {
        goto LABEL_36;
      }
      goto LABEL_31;
    }
    ++v35;
    if (fabs(*(double *)&v36[16 * v34 + 8]) / v38 > 10.0) {
      goto LABEL_31;
    }
LABEL_32:
    if (v35 >= v31) {
      break;
    }
    if (v34 >= v31) {
      goto LABEL_79;
    }
    uint64_t v37 = (double *)&v36[16 * v35];
    if (v35 >= v34)
    {
      double v32 = a7;
      double v33 = a6;
      goto LABEL_36;
    }
  }
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
  return result;
}

uint64_t sub_21F96601C(uint64_t a1, char a2, float64x2_t a3, double a4)
{
  unint64_t v6 = (uint64_t *)(a1 + 16);
  int64x2_t v7 = (int64x2_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f64(a3), (int8x16_t)vcgezq_f64(a3)), (int8x16_t)vceqq_f64((float64x2_t)vandq_s8((int8x16_t)a3, (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL)), (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL)));
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v7, 1), (int8x16_t)v7).u64[0] & 0x8000000000000000) != 0)
  {
    if (a2)
    {
      swift_beginAccess();
      unint64_t v14 = *(void *)(*v6 + 16);
      if (v14 >= 2)
      {
        uint64_t v15 = *v6 + 16 * v14;
        float64x2_t v16 = *(float64x2_t *)(v15 + 16);
        float64x2_t v17 = vsubq_f64(*(float64x2_t *)v15, v16);
        float64x2_t v18 = vsubq_f64(a3, v16);
        float64x2_t v19 = vmulq_f64(v17, v18);
        int64x2_t v20 = (int64x2_t)vmulq_f64(v17, v17);
        int64x2_t v21 = (int64x2_t)vmulq_f64(v18, v18);
        float64x2_t v22 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v20, v21), (float64x2_t)vzip2q_s64(v20, v21)));
        if (fabs(vdivq_f64(vaddq_f64(v19, (float64x2_t)vdupq_laneq_s64((int64x2_t)v19, 1)), vmulq_laneq_f64(v22, v22, 1)).f64[0]+ 1.0) > a4)
        {
          swift_beginAccess();
          uint64_t v23 = *v6;
          if (*(void *)(*v6 + 16))
          {
            double v24 = *(void **)(a1 + 24);
            swift_bridgeObjectRetain();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(void *)(a1 + 24) = v24;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              double v24 = sub_21F7E87D4(0, v24[2] + 1, 1, v24);
              *(void *)(a1 + 24) = v24;
            }
            unint64_t v27 = v24[2];
            unint64_t v26 = v24[3];
            if (v27 >= v26 >> 1)
            {
              double v24 = sub_21F7E87D4((void *)(v26 > 1), v27 + 1, 1, v24);
              *(void *)(a1 + 24) = v24;
            }
            void v24[2] = v27 + 1;
            v24[v27 + 4] = v23;
          }
          *unint64_t v6 = MEMORY[0x263F8EE78];
          swift_bridgeObjectRelease();
        }
      }
    }
    swift_beginAccess();
    uint64_t v28 = *v6;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *unint64_t v6 = v28;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_21F7E86D8(0, *(void *)(v28 + 16) + 1, 1, (char *)v28);
      uint64_t v28 = result;
      *unint64_t v6 = result;
    }
    unint64_t v30 = *(void *)(v28 + 16);
    unint64_t v29 = *(void *)(v28 + 24);
    float64x2_t v31 = a3;
    if (v30 >= v29 >> 1)
    {
      uint64_t result = (uint64_t)sub_21F7E86D8((char *)(v29 > 1), v30 + 1, 1, (char *)v28);
      float64x2_t v31 = a3;
      uint64_t v28 = result;
      *unint64_t v6 = result;
    }
    *(void *)(v28 + 16) = v30 + 1;
    *(float64x2_t *)(v28 + 16 * v30 + 32) = v31;
  }
  else
  {
    swift_beginAccess();
    uint64_t v8 = *v6;
    if (*(void *)(*v6 + 16))
    {
      unint64_t v9 = *(void **)(a1 + 24);
      swift_bridgeObjectRetain();
      char v10 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(a1 + 24) = v9;
      if ((v10 & 1) == 0)
      {
        unint64_t v9 = sub_21F7E87D4(0, v9[2] + 1, 1, v9);
        *(void *)(a1 + 24) = v9;
      }
      unint64_t v12 = v9[2];
      unint64_t v11 = v9[3];
      if (v12 >= v11 >> 1)
      {
        unint64_t v9 = sub_21F7E87D4((void *)(v11 > 1), v12 + 1, 1, v9);
        *(void *)(a1 + 24) = v9;
      }
      v9[2] = v12 + 1;
      v9[v12 + 4] = v8;
    }
    *unint64_t v6 = MEMORY[0x263F8EE78];
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_21F966328(double a1, uint64_t a2, void (*a3)(void))
{
  double v3 = a1 + -0.03;
  double v4 = a1 + 0.03;
  if (a1 + -0.03 > a1 + 0.03)
  {
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    if ((~COERCE__INT64(v4 - v3) & 0x7FF0000000000000) != 0)
    {
      sub_21F965A3C(0x20000000000001uLL);
      a3();
      return;
    }
  }
  __break(1u);
}

BOOL sub_21F96642C(float64x2_t a1, float64x2_t a2, float64x2_t a3, double a4, float64_t a5)
{
  float64x2_t v5 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  int64x2_t v6 = (int64x2_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f64(a1), (int8x16_t)vcgezq_f64(a1)), (int8x16_t)vceqq_f64((float64x2_t)vandq_s8((int8x16_t)a1, (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL)), v5));
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v6, 1), (int8x16_t)v6).u64[0] & 0x8000000000000000) == 0) {
    return 0;
  }
  int64x2_t v8 = (int64x2_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f64(a2), (int8x16_t)vcgezq_f64(a2)), (int8x16_t)vceqq_f64(vabsq_f64(a2), v5));
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v8, 1), (int8x16_t)v8).u64[0] & 0x8000000000000000) == 0) {
    return 0;
  }
  int64x2_t v9 = (int64x2_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f64(a3), (int8x16_t)vcgezq_f64(a3)), (int8x16_t)vceqq_f64(vabsq_f64(a3), (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL)));
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v9, 1), (int8x16_t)v9).u64[0] & 0x8000000000000000) == 0) {
    return 0;
  }
  float64x2_t v10 = vsubq_f64(a1, a2);
  float64x2_t v11 = vsubq_f64(a3, a2);
  double v12 = vaddvq_f64(vmulq_f64(v10, v11));
  int64x2_t v13 = (int64x2_t)vmulq_f64(v10, v10);
  int64x2_t v14 = (int64x2_t)vmulq_f64(v11, v11);
  float64x2_t v15 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v13, v14), (float64x2_t)vzip2q_s64(v13, v14)));
  BOOL v16 = fabs(v12 / vmuld_lane_f64(v15.f64[0], v15, 1) + 1.0) < a4;
  if (v15.f64[0] >= a5) {
    BOOL v16 = 0;
  }
  return v15.f64[1] < a5 && v16;
}

uint64_t sub_21F966530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, void (*a8)(void), double a9, float64x2_t a10, double a11, float64x2_t a12, double a13, float64_t a14, double a15, double a16, double a17, uint64_t a18)
{
  sub_21F966328(0.25, a2, a8);
  double v93 = v32;
  __n128 v97 = v33;
  sub_21F966328(0.5, a2, a8);
  double v35 = v34;
  __n128 v99 = v36;
  sub_21F966328(0.75, a2, a8);
  double v91 = v37;
  __n128 v98 = v38;
  if (sub_21F96642C(a10, (float64x2_t)v97, (float64x2_t)v99, a13, a14))
  {
    sub_21F966328(0.25, a2, a8);
    BOOL v89 = sub_21F96642C(a10, v39, (float64x2_t)v99, a13, a14);
  }
  else
  {
    BOOL v89 = 0;
  }
  if (sub_21F96642C((float64x2_t)v97, (float64x2_t)v99, (float64x2_t)v98, a13, a14))
  {
    sub_21F966328(0.5, a2, a8);
    BOOL v41 = sub_21F96642C((float64x2_t)v97, v40, (float64x2_t)v98, a13, a14);
  }
  else
  {
    BOOL v41 = 0;
  }
  if (sub_21F96642C((float64x2_t)v99, (float64x2_t)v98, a12, a13, a14))
  {
    sub_21F966328(0.75, a2, a8);
    BOOL v90 = sub_21F96642C((float64x2_t)v99, v42, a12, a13, a14);
  }
  else
  {
    BOOL v90 = 0;
  }
  float64x2_t v43 = (float64x2_t)v97;
  __n128 v44 = (__n128)a10;
  float64x2_t v45 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  int64x2_t v46 = (int64x2_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f64(a10), (int8x16_t)vcgezq_f64(a10)), (int8x16_t)vceqq_f64(vabsq_f64(a10), v45));
  uint64_t v47 = vandq_s8((int8x16_t)vdupq_laneq_s64(v46, 1), (int8x16_t)v46).u64[0];
  int64x2_t v48 = (int64x2_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v97), (int8x16_t)vcgezq_f64((float64x2_t)v97)), (int8x16_t)vceqq_f64(vabsq_f64((float64x2_t)v97), v45));
  uint64_t v49 = vandq_s8((int8x16_t)vdupq_laneq_s64(v48, 1), (int8x16_t)v48).u64[0];
  int64x2_t v50 = (int64x2_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v99), (int8x16_t)vcgezq_f64((float64x2_t)v99)), (int8x16_t)vceqq_f64(vabsq_f64((float64x2_t)v99), v45));
  unint64_t v51 = vandq_s8((int8x16_t)vdupq_laneq_s64(v50, 1), (int8x16_t)v50).u64[0];
  int64x2_t v52 = (int64x2_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v98), (int8x16_t)vcgezq_f64((float64x2_t)v98)), (int8x16_t)vceqq_f64(vabsq_f64((float64x2_t)v98), v45));
  unint64_t v53 = vandq_s8((int8x16_t)vdupq_laneq_s64(v52, 1), (int8x16_t)v52).u64[0];
  int64x2_t v54 = (int64x2_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f64(a12), (int8x16_t)vcgezq_f64(a12)), (int8x16_t)vceqq_f64(vabsq_f64(a12), v45));
  unint64_t v55 = vandq_s8((int8x16_t)vdupq_laneq_s64(v54, 1), (int8x16_t)v54).u64[0];
  char v92 = a7;
  uint64_t v88 = v53;
  uint64_t v85 = v55;
  uint64_t v86 = v49;
  uint64_t v95 = v51;
  if (v47 < 0)
  {
    if ((v49 & 0x8000000000000000) == 0)
    {
      if ((v51 & 0x8000000000000000) == 0)
      {
        if ((v53 & 0x8000000000000000) == 0)
        {
          unint64_t v87 = v55 >> 63;
          if (a1 >= a3)
          {
            if (a1 < a4)
            {
              uint64_t v84 = 0;
              if (v89 && a1 >= a5) {
                goto LABEL_82;
              }
              goto LABEL_80;
            }
            if (a1 >= a5)
            {
LABEL_15:
              HIDWORD(v84) = 0;
              if (a9 != a15 || v89)
              {
                LODWORD(v84) = 0;
                goto LABEL_82;
              }
              LODWORD(v84) = 0;
              if (!v41) {
                goto LABEL_82;
              }
              goto LABEL_126;
            }
          }
          goto LABEL_22;
        }
        if (a1 >= a3)
        {
          if (a1 < a4)
          {
            LODWORD(v87) = 1;
            uint64_t v84 = 0x100000000;
            if (v89 && a1 >= a5) {
              goto LABEL_82;
            }
            goto LABEL_80;
          }
          if (a1 >= a5) {
            goto LABEL_120;
          }
        }
LABEL_58:
        LODWORD(v87) = 1;
        uint64_t v84 = 0x100000000;
        goto LABEL_80;
      }
      if ((v53 & 0x8000000000000000) != 0)
      {
        if (a1 < a3) {
          goto LABEL_78;
        }
        if (a1 >= a4)
        {
          if (a1 >= a5) {
            goto LABEL_104;
          }
          goto LABEL_78;
        }
        goto LABEL_41;
      }
      unint64_t v87 = v55 >> 63;
      if (a1 < a3) {
        goto LABEL_79;
      }
      goto LABEL_49;
    }
LABEL_23:
    unint64_t v87 = v55 >> 63;
    if ((v51 & 0x8000000000000000) == 0)
    {
      if ((v53 & 0x8000000000000000) == 0)
      {
        if (a1 >= a3)
        {
          if (a1 >= a4)
          {
            if (a1 >= a5 || v47 < 0 == v49 < 0)
            {
              uint64_t v84 = 1;
              if (a9 != a15 || v89 || !v41) {
                goto LABEL_82;
              }
              goto LABEL_126;
            }
          }
          else if (v89)
          {
            BOOL v56 = v47 < 0;
            uint64_t v84 = 1;
            if (a1 >= a5 || ((v56 ^ (v49 < 0)) & 1) == 0) {
              goto LABEL_82;
            }
            goto LABEL_80;
          }
        }
        uint64_t v84 = 1;
        goto LABEL_80;
      }
LABEL_39:
      if (a1 < a3) {
        goto LABEL_78;
      }
      if (a1 >= a4)
      {
        if (a1 >= a5 || v47 < 0 == v49 < 0) {
          goto LABEL_104;
        }
        goto LABEL_78;
      }
LABEL_41:
      if (v89) {
        goto LABEL_62;
      }
      goto LABEL_78;
    }
    if ((v53 & 0x8000000000000000) != 0) {
      goto LABEL_39;
    }
    if (a1 < a3) {
      goto LABEL_79;
    }
LABEL_49:
    if (a1 < a4)
    {
      if (v89) {
        goto LABEL_51;
      }
      goto LABEL_79;
    }
LABEL_53:
    if (a1 >= a5 || v47 < 0 == v49 < 0)
    {
      HIDWORD(v84) = 1;
      if (a9 != a15 || v89) {
        goto LABEL_117;
      }
      BOOL v60 = !v41;
LABEL_106:
      LODWORD(v84) = 1;
      if (v60) {
        goto LABEL_82;
      }
      goto LABEL_126;
    }
LABEL_79:
    uint64_t v84 = 0x100000001;
    goto LABEL_80;
  }
  if (v49 < 0) {
    goto LABEL_23;
  }
  if ((v51 & 0x8000000000000000) != 0)
  {
    if ((v53 & 0x8000000000000000) == 0)
    {
      unint64_t v87 = v55 >> 63;
      if (a1 < a3) {
        goto LABEL_79;
      }
      if (a1 < a4)
      {
        if (!v89)
        {
          BOOL v57 = a9 == a15 && v41;
          goto LABEL_125;
        }
LABEL_51:
        BOOL v58 = v47 < 0;
        HIDWORD(v84) = 1;
        if (a1 < a5)
        {
          char v59 = v58 ^ (v49 < 0);
          goto LABEL_64;
        }
LABEL_117:
        LODWORD(v84) = 1;
        goto LABEL_82;
      }
      goto LABEL_53;
    }
    if (a1 >= a3)
    {
      if (a1 < a4)
      {
        if (!v89)
        {
          BOOL v57 = a9 == a15 && v41;
          LODWORD(v87) = 1;
LABEL_125:
          uint64_t v84 = 0x100000001;
          if (!v57) {
            goto LABEL_82;
          }
          goto LABEL_126;
        }
LABEL_62:
        BOOL v61 = v47 < 0;
        LODWORD(v87) = 1;
        if (a1 < a5)
        {
          char v59 = v61 ^ (v49 < 0);
          HIDWORD(v84) = 1;
LABEL_64:
          LODWORD(v84) = 1;
          if ((v59 & 1) == 0) {
            goto LABEL_82;
          }
          goto LABEL_80;
        }
        goto LABEL_118;
      }
LABEL_104:
      LODWORD(v87) = 1;
      if (a9 == a15 && !v89)
      {
        BOOL v60 = !v41;
        HIDWORD(v84) = 1;
        goto LABEL_106;
      }
LABEL_118:
      uint64_t v84 = 0x100000001;
      goto LABEL_82;
    }
LABEL_78:
    LODWORD(v87) = 1;
    goto LABEL_79;
  }
  if ((v53 & 0x8000000000000000) == 0)
  {
    unint64_t v87 = v55 >> 63;
    if (a1 >= a3) {
      goto LABEL_15;
    }
LABEL_22:
    uint64_t v84 = 0;
LABEL_80:
    sub_21F966530(a1 + 1, a2, a3, a4, a5, a6, a7 & 1, a8, a9, v44, v93, v97, a13, a14, a15, a16, *(void *)&a17, a18);
    goto LABEL_81;
  }
  if (a1 < a3) {
    goto LABEL_58;
  }
  if (a1 < a4)
  {
    LODWORD(v87) = 1;
    uint64_t v84 = 0x100000000;
    if (((a9 == a15) & ~v89 & v41) == 0) {
      goto LABEL_82;
    }
LABEL_126:
    uint64_t v83 = a4;
    unint64_t v73 = (void *)(a6 + 16);
    swift_beginAccess();
    uint64_t v74 = *(void *)(a6 + 16);
    if (*(void *)(v74 + 16))
    {
      BOOL v81 = v41;
      uint64_t v75 = *(void **)(a6 + 24);
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(a6 + 24) = v75;
      uint64_t v82 = a5;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v75 = sub_21F7E87D4(0, v75[2] + 1, 1, v75);
        *(void *)(a6 + 24) = v75;
      }
      unint64_t v78 = v75[2];
      unint64_t v77 = v75[3];
      unint64_t v79 = v78 + 1;
      if (v78 >= v77 >> 1)
      {
        uint64_t v80 = sub_21F7E87D4((void *)(v77 > 1), v78 + 1, 1, v75);
        unint64_t v79 = v78 + 1;
        uint64_t v75 = v80;
        *(void *)(a6 + 24) = v80;
      }
      v75[2] = v79;
      v75[v78 + 4] = v74;
      *unint64_t v73 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRelease();
      a5 = v82;
      a4 = v83;
      a7 = v92;
      float64x2_t v43 = (float64x2_t)v97;
      BOOL v41 = v81;
      goto LABEL_82;
    }
    *unint64_t v73 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    a4 = v83;
    a7 = v92;
LABEL_81:
    float64x2_t v43 = (float64x2_t)v97;
    goto LABEL_82;
  }
LABEL_120:
  LODWORD(v84) = 0;
  LODWORD(v87) = 1;
  if (a9 != a15 || v89)
  {
    HIDWORD(v84) = 1;
    goto LABEL_82;
  }
  HIDWORD(v84) = 1;
  if (v41) {
    goto LABEL_126;
  }
LABEL_82:
  char v62 = a7;
  uint64_t v63 = a5;
  BOOL v64 = v41;
  uint64_t v65 = v62 & 1;
  sub_21F96601C(a6, v62 & 1, v43, a17);
  if (a1 >= a3)
  {
    float64x2_t v68 = (float64x2_t)v99;
    BOOL v69 = v64;
    uint64_t v66 = v63;
    char v67 = v92;
    if (a1 < a4 && (!v89 || !v69) && v84 == 1 || a1 < v66 && v86 < 0 != v95 < 0)
    {
      sub_21F966530(a1 + 1, a2, a3, a4, v66, a6, v92 & 1, a8, v93, v97, v35, v99, a13, a14, a15, a16, *(void *)&a17, a18);
      float64x2_t v68 = (float64x2_t)v99;
    }
    sub_21F96601C(a6, v92 & 1, v68, a17);
    if ((a1 >= a4 || v69 && v90 || HIDWORD(v84) != 1) && (a1 >= v66 || v95 < 0 == v88 < 0))
    {
      uint64_t result = sub_21F96601C(a6, v92 & 1, (float64x2_t)v98, a17);
      double v71 = v91;
      goto LABEL_98;
    }
  }
  else
  {
    uint64_t v66 = v63;
    sub_21F966530(a1 + 1, a2, a3, a4, v63, a6, v65, a8, v93, v97, v35, v99, a13, a14, a15, a16, *(void *)&a17, a18);
    sub_21F96601C(a6, v65, (float64x2_t)v99, a17);
    char v67 = v92;
  }
  double v70 = v35;
  double v71 = v91;
  sub_21F966530(a1 + 1, a2, a3, a4, v66, a6, v67 & 1, a8, v70, v99, v91, v98, a13, a14, a15, a16, *(void *)&a17, a18);
  uint64_t result = sub_21F96601C(a6, v67 & 1, (float64x2_t)v98, a17);
  if (a1 < a3) {
    return sub_21F966530(a1 + 1, a2, a3, a4, v66, a6, v67 & 1, a8, v71, v98, a11, (__n128)a12, a13, a14, a15, a16, *(void *)&a17, a18);
  }
LABEL_98:
  if (a1 < a4 && !v90 && ((v87 ^ 1) & 1) == 0 || a1 < v66 && v85 < 0 != v88 < 0) {
    return sub_21F966530(a1 + 1, a2, a3, a4, v66, a6, v67 & 1, a8, v71, v98, a11, (__n128)a12, a13, a14, a15, a16, *(void *)&a17, a18);
  }
  return result;
}

void *sub_21F96702C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void *a5, __n128 a6, __n128 a7)
{
  uint64_t v30 = a1;
  __n128 v35 = a6;
  __n128 v36 = a7;
  uint64_t v11 = sub_21FA24410();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  int64x2_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_26AD49C10 != -1) {
    swift_once();
  }
  id v15 = (id)qword_26AD52498;
  sub_21FA262F0();
  sub_21FA24400();
  sub_21FA243F0();
  float64x2_t v31 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v32 = v11;
  v31(v14, v11);

  uint64_t v16 = swift_allocObject();
  uint64_t v17 = MEMORY[0x263F8EE78];
  *(void *)(v16 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v16 + 24) = v17;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = 0x78ABBF7B5AEAE776;
  if (__OFADD__(a2, 4))
  {
    __break(1u);
LABEL_11:
    a5 = sub_21F7E87D4(0, a5[2] + 1, 1, a5);
    goto LABEL_6;
  }
  uint64_t v19 = v18;
  double v20 = ((double (*)(__n128))a4)(v35);
  *(void *)&v21.f64[0] = v35.n128_u64[0];
  v21.f64[1] = v20;
  float64x2_t v33 = v21;
  double v22 = ((double (*)(__n128))a4)(v36);
  *(void *)&v23.f64[0] = v36.n128_u64[0];
  v23.f64[1] = v22;
  float64x2_t v34 = v23;
  char v24 = a3 & 1;
  sub_21F96601C(v16, v24, v33, 0.190983006);
  sub_21F966530(1, v19, v30, a2, a2 + 4, v16, v24, (void (*)(void))a4, v35.n128_f64[0], v33, v36.n128_f64[0], v34, 0.00137046525, 20.0, v35.n128_f64[0], v36.n128_f64[0], 0.190983006, (uint64_t)a5);
  sub_21F96601C(v16, v24, v34, 0.190983006);
  swift_beginAccess();
  a4 = *(void *)(v16 + 16);
  a5 = *(void **)(v16 + 24);
  if (!*(void *)(a4 + 16)) {
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_11;
  }
LABEL_6:
  unint64_t v26 = a5[2];
  unint64_t v25 = a5[3];
  if (v26 >= v25 >> 1) {
    a5 = sub_21F7E87D4((void *)(v25 > 1), v26 + 1, 1, a5);
  }
  a5[2] = v26 + 1;
  a5[v26 + 4] = a4;
  *(void *)(v16 + 24) = a5;
LABEL_9:
  *(void *)(v16 + 16) = MEMORY[0x263F8EE78];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_release();
  swift_release();
  id v27 = (id)qword_26AD52498;
  sub_21FA262E0();
  sub_21FA24400();
  sub_21FA243F0();
  v31(v14, v32);

  return a5;
}

uint64_t sub_21F9673E4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_21F967424()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void sub_21F967434(double a1, double a2, double a3, double a4, double a5, double a6, double a7, uint64_t a8, double (*a9)(double), uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  double v15 = a1 + -0.03;
  double v16 = a1 + 0.03;
  if (a1 + -0.03 > a1 + 0.03)
  {
    __break(1u);
    goto LABEL_7;
  }
  swift_beginAccess();
  if ((~COERCE__INT64(v16 - v15) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return;
  }
  unint64_t v26 = sub_21F965A3C(0x20000000000001uLL);
  double v27 = v15 + (v16 - v15) * ((double)v26 * 1.11022302e-16);
  if (v26 == 0x20000000000000) {
    double v27 = v16;
  }
  long double v28 = a9((a3 - a2) * v27 + a2);
  long double v30 = v29;
  sub_21F7E3324(a11, a12, v28, a4, a5);
  sub_21F7E3324(a13, a14, v30, a6, a7);
}

uint64_t sub_21F9675A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, double (*a8)(double), double a9, float64x2_t a10, double a11, float64x2_t a12, double a13, float64_t a14, double a15, double a16, double a17, uint64_t a18, uint64_t a19, char a20,double a21,double a22,uint64_t a23,char a24,double a25,double a26)
{
  char v35 = a20;
  swift_retain_n();
  sub_21F967434(0.25, a9, a11, a21, a22, a25, a26, a2, a8, a18, a19, a20, a23, a24);
  double v101 = v36;
  __n128 v114 = v37;
  sub_21F967434(0.5, a9, a11, a21, a22, a25, a26, a2, a8, a18, a19, a20, a23, a24);
  double v102 = v38;
  __n128 v116 = v39;
  sub_21F967434(0.75, a9, a11, a21, a22, a25, a26, a2, a8, a18, a19, a20, a23, a24);
  double v103 = v40;
  __n128 v115 = v41;
  if (sub_21F96642C(a10, (float64x2_t)v114, (float64x2_t)v116, a13, a14))
  {
    swift_retain();
    sub_21F967434(0.25, a9, a11, a21, a22, a25, a26, a2, a8, a18, a19, a20, a23, a24);
    float64x2_t v97 = v42;
    swift_release();
    BOOL v94 = sub_21F96642C(a10, v97, (float64x2_t)v116, a13, a14);
  }
  else
  {
    BOOL v94 = 0;
  }
  if (sub_21F96642C((float64x2_t)v114, (float64x2_t)v116, (float64x2_t)v115, a13, a14))
  {
    swift_retain();
    sub_21F967434(0.5, a9, a11, a21, a22, a25, a26, a2, a8, a18, a19, a20, a23, a24);
    float64x2_t v98 = v43;
    swift_release();
    BOOL v95 = sub_21F96642C((float64x2_t)v114, v98, (float64x2_t)v115, a13, a14);
  }
  else
  {
    BOOL v95 = 0;
  }
  if (sub_21F96642C((float64x2_t)v116, (float64x2_t)v115, a12, a13, a14))
  {
    swift_retain();
    sub_21F967434(0.75, a9, a11, a21, a22, a25, a26, a2, a8, a18, a19, a20, a23, a24);
    float64x2_t v99 = v44;
    swift_release();
    BOOL v100 = sub_21F96642C((float64x2_t)v116, v99, a12, a13, a14);
  }
  else
  {
    BOOL v100 = 0;
  }
  float64x2_t v45 = (float64x2_t)v114;
  float64x2_t v46 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  int64x2_t v47 = (int64x2_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f64(a10), (int8x16_t)vcgezq_f64(a10)), (int8x16_t)vceqq_f64(vabsq_f64(a10), v46));
  uint64_t v48 = vandq_s8((int8x16_t)vdupq_laneq_s64(v47, 1), (int8x16_t)v47).u64[0];
  int64x2_t v49 = (int64x2_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v114), (int8x16_t)vcgezq_f64((float64x2_t)v114)), (int8x16_t)vceqq_f64(vabsq_f64((float64x2_t)v114), v46));
  uint64_t v50 = vandq_s8((int8x16_t)vdupq_laneq_s64(v49, 1), (int8x16_t)v49).u64[0];
  int64x2_t v51 = (int64x2_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v116), (int8x16_t)vcgezq_f64((float64x2_t)v116)), (int8x16_t)vceqq_f64(vabsq_f64((float64x2_t)v116), v46));
  unint64_t v52 = vandq_s8((int8x16_t)vdupq_laneq_s64(v51, 1), (int8x16_t)v51).u64[0];
  int64x2_t v53 = (int64x2_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v115), (int8x16_t)vcgezq_f64((float64x2_t)v115)), (int8x16_t)vceqq_f64(vabsq_f64((float64x2_t)v115), v46));
  unint64_t v54 = vandq_s8((int8x16_t)vdupq_laneq_s64(v53, 1), (int8x16_t)v53).u64[0];
  int64x2_t v55 = (int64x2_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f64(a12), (int8x16_t)vcgezq_f64(a12)), (int8x16_t)vceqq_f64(vabsq_f64(a12), v46));
  unint64_t v56 = vandq_s8((int8x16_t)vdupq_laneq_s64(v55, 1), (int8x16_t)v55).u64[0];
  uint64_t v105 = a2;
  uint64_t v106 = a8;
  uint64_t v108 = a6;
  uint64_t v93 = v54;
  uint64_t v90 = v56;
  uint64_t v91 = v50;
  uint64_t v96 = v52;
  if (v48 < 0)
  {
    if (v50 < 0)
    {
LABEL_21:
      unint64_t v92 = v56 >> 63;
      if ((v52 & 0x8000000000000000) == 0)
      {
        if ((v54 & 0x8000000000000000) == 0)
        {
          if (a1 < a3)
          {
            HIDWORD(v89) = 0;
LABEL_79:
            LODWORD(v89) = 1;
            goto LABEL_80;
          }
          uint64_t v60 = a3;
          if (a1 >= a4)
          {
            uint64_t v58 = a1;
            if (a1 >= a5 || v48 < 0 == v50 < 0)
            {
              uint64_t v89 = 1;
              if (a9 == a15 && !v94)
              {
                BOOL v67 = !v95;
                goto LABEL_121;
              }
              goto LABEL_125;
            }
          }
          else
          {
            uint64_t v58 = a1;
            if (v94)
            {
              BOOL v66 = v48 < 0;
              uint64_t v89 = 1;
              if (a1 < a5)
              {
                char v65 = v66 ^ (v50 < 0);
                goto LABEL_61;
              }
LABEL_125:
              char v62 = a7;
              uint64_t v63 = v60;
              goto LABEL_83;
            }
          }
          HIDWORD(v89) = 0;
LABEL_75:
          LODWORD(v89) = 1;
          char v62 = a7;
          uint64_t v63 = v60;
          goto LABEL_81;
        }
LABEL_33:
        if (a1 >= a3)
        {
          uint64_t v60 = a3;
          if (a1 < a4) {
            goto LABEL_35;
          }
          uint64_t v58 = a1;
          if (a1 < a5 && v48 < 0 != v50 < 0) {
            goto LABEL_73;
          }
          goto LABEL_118;
        }
        goto LABEL_77;
      }
      if ((v54 & 0x8000000000000000) != 0) {
        goto LABEL_33;
      }
      if (a1 >= a3)
      {
LABEL_42:
        if (a1 >= a4) {
          goto LABEL_50;
        }
        uint64_t v60 = a3;
        uint64_t v58 = a1;
        if (v94) {
          goto LABEL_44;
        }
LABEL_74:
        HIDWORD(v89) = 1;
        goto LABEL_75;
      }
LABEL_78:
      HIDWORD(v89) = 1;
      goto LABEL_79;
    }
    if ((v52 & 0x8000000000000000) != 0)
    {
      if ((v54 & 0x8000000000000000) != 0)
      {
        if (a1 >= a3)
        {
          uint64_t v60 = a3;
          if (a1 < a4)
          {
LABEL_35:
            uint64_t v58 = a1;
            if (v94) {
              goto LABEL_59;
            }
            goto LABEL_73;
          }
          uint64_t v58 = a1;
          if (a1 < a5)
          {
LABEL_73:
            LODWORD(v92) = 1;
            goto LABEL_74;
          }
LABEL_118:
          LODWORD(v92) = 1;
          if (a9 == a15 && !v94)
          {
            BOOL v67 = !v95;
            HIDWORD(v89) = 1;
            goto LABEL_120;
          }
          goto LABEL_123;
        }
LABEL_77:
        LODWORD(v92) = 1;
        goto LABEL_78;
      }
      unint64_t v92 = v56 >> 63;
      if (a1 >= a3) {
        goto LABEL_42;
      }
      goto LABEL_78;
    }
    if ((v54 & 0x8000000000000000) != 0)
    {
      if (a1 < a3)
      {
        LODWORD(v92) = 1;
        uint64_t v89 = 0x100000000;
        goto LABEL_80;
      }
      uint64_t v59 = a3;
      if (a1 >= a4)
      {
        uint64_t v58 = a1;
        if (a1 < a5)
        {
          LODWORD(v92) = 1;
          uint64_t v89 = 0x100000000;
          goto LABEL_39;
        }
        goto LABEL_128;
      }
      uint64_t v89 = 0x100000000;
      BOOL v69 = v94 && a1 >= a5;
      LODWORD(v92) = 1;
    }
    else
    {
      unint64_t v92 = v56 >> 63;
      if (a1 < a3)
      {
        uint64_t v89 = 0;
LABEL_80:
        uint64_t v63 = a3;
        uint64_t v58 = a1;
        char v62 = a7;
        goto LABEL_81;
      }
      uint64_t v59 = a3;
      if (a1 >= a4)
      {
        uint64_t v58 = a1;
        if (a1 < a5) {
          goto LABEL_15;
        }
LABEL_112:
        HIDWORD(v89) = 0;
        if (a9 == a15 && !v94)
        {
          BOOL v80 = !v95;
          LODWORD(v89) = 0;
          goto LABEL_130;
        }
        LODWORD(v89) = 0;
        goto LABEL_139;
      }
      uint64_t v89 = 0;
      BOOL v69 = v94 && a1 >= a5;
    }
    uint64_t v58 = a1;
    char v62 = a7;
    uint64_t v63 = v59;
    if (!v69) {
      goto LABEL_81;
    }
    goto LABEL_83;
  }
  if (v50 < 0) {
    goto LABEL_21;
  }
  if ((v52 & 0x8000000000000000) == 0)
  {
    if ((v54 & 0x8000000000000000) == 0)
    {
      unint64_t v92 = v56 >> 63;
      uint64_t v57 = a3;
      uint64_t v58 = a1;
      uint64_t v59 = v57;
      if (a1 < v57)
      {
LABEL_15:
        uint64_t v89 = 0;
LABEL_39:
        char v62 = a7;
        uint64_t v63 = v59;
LABEL_81:
        swift_retain();
        sub_21F9675A0(v58 + 1, a2, v63, a4, a5, v108, v62 & 1, a8, a9, (__n128)a10, v101, v114, a13, a14, a15, a16, *(void *)&a17, a18, a19,
          a20,
          *(void *)&a21,
          *(void *)&a22,
          a23,
          a24,
          *(void *)&a25,
          *(void *)&a26);
        swift_release();
LABEL_82:
        float64x2_t v45 = (float64x2_t)v114;
        goto LABEL_83;
      }
      goto LABEL_112;
    }
    uint64_t v59 = a3;
    if (a1 < a3)
    {
      LODWORD(v92) = 1;
      uint64_t v89 = 0x100000000;
      uint64_t v58 = a1;
      goto LABEL_39;
    }
    uint64_t v58 = a1;
    if (a1 < a4)
    {
      uint64_t v89 = 0x100000000;
      LODWORD(v92) = 1;
      char v62 = a7;
      uint64_t v63 = v59;
      if (((a9 == a15) & ~v94 & v95) == 0) {
        goto LABEL_83;
      }
LABEL_131:
      BOOL v81 = (void *)(v108 + 16);
      swift_beginAccess();
      uint64_t v82 = *(void *)(v108 + 16);
      if (*(void *)(v82 + 16))
      {
        uint64_t v83 = *(void **)(v108 + 24);
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v108 + 24) = v83;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v83 = sub_21F7E87D4(0, v83[2] + 1, 1, v83);
          *(void *)(v108 + 24) = v83;
        }
        unint64_t v86 = v83[2];
        unint64_t v85 = v83[3];
        if (v86 >= v85 >> 1)
        {
          uint64_t v83 = sub_21F7E87D4((void *)(v85 > 1), v86 + 1, 1, v83);
          *(void *)(v108 + 24) = v83;
        }
        v83[2] = v86 + 1;
        v83[v86 + 4] = v82;
        void *v81 = MEMORY[0x263F8EE78];
        swift_bridgeObjectRelease();
        a8 = v106;
        char v62 = a7;
        char v35 = a20;
        goto LABEL_82;
      }
      void *v81 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRelease();
      float64x2_t v45 = (float64x2_t)v114;
      char v62 = a7;
      goto LABEL_83;
    }
LABEL_128:
    LODWORD(v89) = 0;
    LODWORD(v92) = 1;
    if (a9 == a15 && !v94)
    {
      BOOL v80 = !v95;
      HIDWORD(v89) = 1;
LABEL_130:
      char v62 = a7;
      uint64_t v63 = v59;
      if (v80) {
        goto LABEL_83;
      }
      goto LABEL_131;
    }
    HIDWORD(v89) = 1;
LABEL_139:
    char v62 = a7;
    uint64_t v63 = v59;
    goto LABEL_83;
  }
  if ((v54 & 0x8000000000000000) == 0)
  {
    unint64_t v92 = v56 >> 63;
    if (a1 >= a3)
    {
      if (a1 < a4)
      {
        uint64_t v60 = a3;
        uint64_t v58 = a1;
        if (!v94)
        {
          BOOL v61 = a9 == a15 && v95;
          goto LABEL_141;
        }
LABEL_44:
        BOOL v64 = v48 < 0;
        HIDWORD(v89) = 1;
        if (v58 < a5)
        {
          char v65 = v64 ^ (v50 < 0);
          LODWORD(v89) = 1;
          goto LABEL_61;
        }
        goto LABEL_124;
      }
LABEL_50:
      uint64_t v60 = a3;
      uint64_t v58 = a1;
      if (a1 >= a5 || v48 < 0 == v50 < 0)
      {
        HIDWORD(v89) = 1;
        if (a9 == a15 && !v94)
        {
          BOOL v67 = !v95;
LABEL_120:
          LODWORD(v89) = 1;
LABEL_121:
          char v62 = a7;
          uint64_t v63 = v60;
          if (v67) {
            goto LABEL_83;
          }
          goto LABEL_131;
        }
LABEL_124:
        LODWORD(v89) = 1;
        goto LABEL_125;
      }
      goto LABEL_74;
    }
    goto LABEL_78;
  }
  if (a1 < a3) {
    goto LABEL_77;
  }
  uint64_t v60 = a3;
  uint64_t v58 = a1;
  if (a1 >= a4) {
    goto LABEL_118;
  }
  if (!v94)
  {
    BOOL v61 = a9 == a15 && v95;
    LODWORD(v92) = 1;
LABEL_141:
    uint64_t v89 = 0x100000001;
    char v62 = a7;
    uint64_t v63 = v60;
    if (!v61) {
      goto LABEL_83;
    }
    goto LABEL_131;
  }
LABEL_59:
  BOOL v68 = v48 < 0;
  LODWORD(v92) = 1;
  if (v58 >= a5)
  {
LABEL_123:
    HIDWORD(v89) = 1;
    goto LABEL_124;
  }
  char v65 = v68 ^ (v50 < 0);
  uint64_t v89 = 0x100000001;
LABEL_61:
  char v62 = a7;
  uint64_t v63 = v60;
  if (v65) {
    goto LABEL_81;
  }
LABEL_83:
  uint64_t v70 = v62 & 1;
  sub_21F96601C(v108, v62 & 1, v45, a17);
  if (v58 >= v63)
  {
    uint64_t v76 = v58;
    double v75 = a16;
    if (v58 < a4 && (!v94 || !v95) && v89 == 1 || v58 < a5 && v91 < 0 != v96 < 0)
    {
      swift_retain();
      LOBYTE(v88) = a24;
      LOBYTE(v87) = v35;
      sub_21F9675A0(v58 + 1, a2, v63, a4, a5, v108, v62 & 1, a8, v101, v114, v102, v116, a13, a14, a15, a16, *(void *)&a17, a18, a19,
        v87,
        *(void *)&a21,
        *(void *)&a22,
        a23,
        v88,
        *(void *)&a25,
        *(void *)&a26);
      swift_release();
    }
    char v77 = v62 & 1;
    uint64_t v72 = v108;
    sub_21F96601C(v108, v77, (float64x2_t)v116, a17);
    uint64_t v74 = a4;
    uint64_t v73 = v76;
    if ((v76 >= a4 || v95 && v100 || HIDWORD(v89) != 1) && (v76 >= a5 || v96 < 0 == v93 < 0))
    {
      char v78 = a7;
      sub_21F96601C(v108, a7 & 1, (float64x2_t)v115, a17);
      goto LABEL_99;
    }
  }
  else
  {
    swift_retain();
    LOBYTE(v88) = a24;
    LOBYTE(v87) = v35;
    uint64_t v71 = v58 + 1;
    uint64_t v72 = v108;
    uint64_t v73 = v58;
    uint64_t v74 = a4;
    double v75 = a16;
    sub_21F9675A0(v71, a2, v63, a4, a5, v108, v70, a8, v101, v114, v102, v116, a13, a14, a15, a16, *(void *)&a17, a18, a19,
      v87,
      *(void *)&a21,
      *(void *)&a22,
      a23,
      v88,
      *(void *)&a25,
      *(void *)&a26);
    swift_release();
    sub_21F96601C(v108, v70, (float64x2_t)v116, a17);
  }
  swift_retain();
  char v78 = a7;
  LOBYTE(v88) = a24;
  LOBYTE(v87) = a20;
  sub_21F9675A0(v73 + 1, v105, v63, v74, a5, v72, a7 & 1, v106, v102, v116, v103, v115, a13, a14, a15, v75, *(void *)&a17, a18, a19,
    v87,
    *(void *)&a21,
    *(void *)&a22,
    a23,
    v88,
    *(void *)&a25,
    *(void *)&a26);
  swift_release();
  sub_21F96601C(v72, a7 & 1, (float64x2_t)v115, a17);
  if (v73 < v63)
  {
LABEL_103:
    swift_retain();
    LOBYTE(v88) = a24;
    LOBYTE(v87) = a20;
    sub_21F9675A0(v73 + 1, v105, v63, v74, a5, v72, v78 & 1, v106, v103, v115, a11, (__n128)a12, a13, a14, a15, v75, *(void *)&a17, a18, a19,
      v87,
      *(void *)&a21,
      *(void *)&a22,
      a23,
      v88,
      *(void *)&a25,
      *(void *)&a26);
    swift_release();
    return swift_release_n();
  }
LABEL_99:
  if (v73 < v74 && !v100 && ((v92 ^ 1) & 1) == 0 || v73 < a5 && v90 < 0 != v93 < 0) {
    goto LABEL_103;
  }
  return swift_release_n();
}

void *sub_21F9684C0(uint64_t a1, uint64_t a2, int a3, double (*a4)(double), uint64_t a5, uint64_t a6, char a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, char a15)
{
  uint64_t v65 = a8;
  uint64_t v66 = a1;
  BOOL v67 = a4;
  int v64 = a3;
  uint64_t v25 = sub_21FA24410();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  long double v28 = (char *)&v59 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_26AD49C10 != -1) {
    swift_once();
  }
  id v29 = (id)qword_26AD52498;
  sub_21FA262F0();
  sub_21FA24400();
  sub_21FA243F0();
  float64x2_t v31 = *(void (**)(char *, uint64_t))(v26 + 8);
  uint64_t v30 = v26 + 8;
  BOOL v68 = v31;
  v31(v28, v25);

  uint64_t v32 = swift_allocObject();
  uint64_t v33 = MEMORY[0x263F8EE78];
  *(void *)(v32 + 16) = MEMORY[0x263F8EE78];
  float64x2_t v34 = (void *)(v32 + 16);
  *(void *)(v32 + 24) = v33;
  uint64_t v35 = swift_allocObject();
  *(void *)(v35 + 16) = 0x78ABBF7B5AEAE776;
  uint64_t v36 = a2 + 4;
  if (__OFADD__(a2, 4))
  {
    __break(1u);
LABEL_12:
    float64x2_t v34 = sub_21F7E87D4(0, v34[2] + 1, 1, v34);
    goto LABEL_6;
  }
  uint64_t v37 = v35;
  BOOL v61 = v28;
  uint64_t v62 = v30;
  uint64_t v63 = v25;
  uint64_t v60 = a2;
  double v38 = v67;
  uint64_t v59 = v36;
  long double v39 = v67(a9);
  long double v41 = v40;
  v42.f64[0] = sub_21F7E3324(a6, a7, v39, a11, a12);
  float64x2_t v70 = v42;
  uint64_t v43 = a6;
  uint64_t v44 = v65;
  long double v45 = sub_21F7E3324(v65, a15, v41, a13, a14);
  v46.f64[0] = v70.f64[0];
  v46.f64[1] = v45;
  float64x2_t v70 = v46;
  long double v47 = v38(a10);
  long double v49 = v48;
  v50.f64[0] = sub_21F7E3324(v43, a7, v47, a11, a12);
  float64x2_t v69 = v50;
  long double v51 = sub_21F7E3324(v44, a15, v49, a13, a14);
  v52.f64[0] = v69.f64[0];
  v52.f64[1] = v51;
  float64x2_t v69 = v52;
  char v53 = v64 & 1;
  sub_21F96601C(v32, v64 & 1, v70, 0.190983006);
  sub_21F9675A0(1, v37, v66, v60, v59, v32, v53, v38, a9, v70, a10, v69, 0.00137046525, 20.0, a9, a10, 0.190983006, a5, v43,
    a7,
    a11,
    a12,
    v44,
    a15,
    a13,
    a14);
  sub_21F96601C(v32, v53, v69, 0.190983006);
  swift_beginAccess();
  a5 = *(void *)(v32 + 16);
  float64x2_t v34 = *(void **)(v32 + 24);
  if (!*(void *)(a5 + 16))
  {
    unint64_t v54 = v61;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_12;
  }
LABEL_6:
  unint64_t v54 = v61;
  unint64_t v56 = v34[2];
  unint64_t v55 = v34[3];
  if (v56 >= v55 >> 1) {
    float64x2_t v34 = sub_21F7E87D4((void *)(v55 > 1), v56 + 1, 1, v34);
  }
  double v34[2] = v56 + 1;
  v34[v56 + 4] = a5;
  *(void *)(v32 + 24) = v34;
LABEL_10:
  *(void *)(v32 + 16) = MEMORY[0x263F8EE78];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_release();
  swift_release();
  id v57 = (id)qword_26AD52498;
  sub_21FA262E0();
  sub_21FA24400();
  sub_21FA243F0();
  v68(v54, v63);

  return v34;
}

void sub_21F968994(uint64_t a1, uint64_t a2, double (*a3)(uint64_t, double, double))
{
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a2 + 16);
  if (v6 >= v5) {
    int64_t v7 = *(void *)(a1 + 16);
  }
  else {
    int64_t v7 = *(void *)(a2 + 16);
  }
  uint64_t v33 = MEMORY[0x263F8EE78];
  sub_21F76CFE0(0, v7, 0);
  int64_t v27 = v6;
  uint64_t v29 = a2;
  uint64_t v30 = a1;
  unint64_t v28 = v5;
  int64_t v26 = v7;
  if (v7)
  {
    unint64_t v8 = v5;
    int64x2_t v9 = (double *)(a1 + 32);
    float64x2_t v10 = (double *)(a2 + 32);
    swift_bridgeObjectRetain();
    uint64_t v11 = swift_bridgeObjectRetain();
    unint64_t v12 = v6;
    unint64_t v13 = v8;
    while (v13)
    {
      if (!v12) {
        goto LABEL_26;
      }
      double v14 = a3(v11, *v9, *v10);
      unint64_t v16 = *(void *)(v33 + 16);
      unint64_t v15 = *(void *)(v33 + 24);
      if (v16 >= v15 >> 1) {
        uint64_t v11 = (uint64_t)sub_21F76CFE0((char *)(v15 > 1), v16 + 1, 1);
      }
      --v12;
      *(void *)(v33 + 16) = v16 + 1;
      *(double *)(v33 + 8 * v16 + 32) = v14;
      --v13;
      ++v10;
      ++v9;
      if (!--v7) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = swift_bridgeObjectRetain();
LABEL_13:
    if (v28 <= v27)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v17 = 0;
    if (v26 <= v27) {
      int64_t v18 = v27;
    }
    else {
      int64_t v18 = v26;
    }
    int64_t v31 = v18 - v26;
    unint64_t v19 = v28 - v26;
    uint64_t v20 = 8 * v26 + 32;
    uint64_t v21 = v30 + v20;
    uint64_t v22 = v29 + v20;
    while (v19 != v17)
    {
      if (v27 - v26 == v17) {
        goto LABEL_24;
      }
      if (v31 == v17) {
        goto LABEL_28;
      }
      double v23 = a3(v11, *(double *)(v21 + 8 * v17), *(double *)(v22 + 8 * v17));
      unint64_t v25 = *(void *)(v33 + 16);
      unint64_t v24 = *(void *)(v33 + 24);
      if (v25 >= v24 >> 1) {
        uint64_t v11 = (uint64_t)sub_21F76CFE0((char *)(v24 > 1), v25 + 1, 1);
      }
      *(void *)(v33 + 16) = v25 + 1;
      *(double *)(v33 + 8 * v25 + 32) = v23;
      if (v19 == ++v17) {
        goto LABEL_24;
      }
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
}

char *sub_21F968BD8(char *result, char a2, uint64_t a3, char a4, double (*a5)(double), double a6, double a7)
{
  char v52 = (char)result;
  double v7 = a7 - a6;
  if ((~COERCE__INT64(a7 - a6) & 0x7FF0000000000000) == 0) {
    goto LABEL_80;
  }
  uint64_t v11 = 0;
  double v12 = v7 / 12300.0;
  unint64_t v13 = (char *)MEMORY[0x263F8EE78];
  uint64_t v14 = 0x78ABBF7B5AEAE776;
  do
  {
    uint64_t v16 = v14 - 0x61C8864680B583EBLL;
    unint64_t v17 = 0xBF58476D1CE4E5B9 * ((v14 - 0x61C8864680B583EBLL) ^ ((unint64_t)(v14 - 0x61C8864680B583EBLL) >> 30));
    unint64_t v18 = (0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) ^ ((0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) >> 31);
    if (0x20000000000001 * v18 >= 0x1FFFFFFFFFF801)
    {
      unint64_t v22 = (v18 * (unsigned __int128)0x20000000000001uLL) >> 64;
    }
    else
    {
      unint64_t v19 = v14 + 0x3C6EF372FE94F82ALL;
      do
      {
        v16 -= 0x61C8864680B583EBLL;
        unint64_t v20 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v19 ^ (v19 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v19 ^ (v19 >> 30))) >> 27));
        unint64_t v21 = v20 ^ (v20 >> 31);
        v19 -= 0x61C8864680B583EBLL;
      }
      while (0x20000000000001 * v21 < 0x1FFFFFFFFFF801);
      unint64_t v22 = (v21 * (unsigned __int128)0x20000000000001uLL) >> 64;
    }
    uint64_t v14 = v16;
    if (v22 == 0x20000000000000) {
      double v23 = a7;
    }
    else {
      double v23 = v7 * ((double)v22 * 1.11022302e-16) + a6;
    }
    double v24 = a5(v23);
    double v25 = a5(v12 + v23);
    a5(v23 - v12);
    if ((~*(void *)&v24 & 0x7FF0000000000000) != 0)
    {
      double v27 = (v25 - v26) / (v12 + v12);
      if ((~*(void *)&v27 & 0x7FF0000000000000) != 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v13 = sub_21F7E61F4(0, *((void *)v13 + 2) + 1, 1, v13);
        }
        unint64_t v29 = *((void *)v13 + 2);
        unint64_t v28 = *((void *)v13 + 3);
        uint64_t v30 = v13;
        if (v29 >= v28 >> 1) {
          uint64_t v30 = sub_21F7E61F4((char *)(v28 > 1), v29 + 1, 1, v13);
        }
        *((void *)v30 + 2) = v29 + 1;
        unint64_t v13 = v30;
        unint64_t v15 = &v30[16 * v29];
        *((double *)v15 + 4) = v24;
        *((double *)v15 + 5) = v27;
      }
    }
    ++v11;
  }
  while (v11 != 200);
  unint64_t v54 = v13;
  if (*((void *)v13 + 2) <= 1uLL) {
    return (char *)swift_bridgeObjectRelease();
  }
  sub_21F96533C(&v54);
  uint64_t result = v54;
  int64_t v31 = *((void *)v54 + 2);
  if (!v31) {
    goto LABEL_81;
  }
  double v32 = a7;
  double v33 = a6;
  uint64_t v34 = v31 - 1;
  if (v31 == 1)
  {
LABEL_36:
    uint64_t result = (char *)swift_bridgeObjectRelease();
    if ((v52 & 1) == 0) {
      goto LABEL_47;
    }
    if (v32 <= 0.0 || v33 >= 0.0)
    {
      if (v32 <= 0.0 || v33 < 0.0 || v33 >= v32 * 0.5)
      {
        if (v33 * 0.5 < v32 && v32 <= 0.0 && v33 < 0.0) {
          double v32 = -v33;
        }
        if (a2)
        {
LABEL_48:
          double v39 = (v32 - v33) / v7;
          if (v39 > 0.1 && v39 < 1.2)
          {
            if (a4)
            {
              if (v33 == 0.0)
              {
LABEL_57:
                BOOL v44 = v33 > v7;
                if (v33 >= v7) {
                  return result;
                }
                goto LABEL_73;
              }
              goto LABEL_70;
            }
          }
          else if (a4)
          {
            double v41 = (v32 - v33) * 0.05;
            double v42 = v33 - v41;
            double v43 = v32 + v41;
            BOOL v44 = v42 > v43;
            if (v42 >= v43) {
              return result;
            }
LABEL_73:
            if (v44) {
              goto LABEL_82;
            }
            return result;
          }
          double v7 = v7 / *(double *)&a3;
          if (v33 == 0.0) {
            goto LABEL_57;
          }
LABEL_70:
          if (v32 != 0.0)
          {
            double v47 = (v32 + v33) * 0.5;
            double v48 = v47 - v7 * 0.5;
            double v49 = v47 + v7 * 0.5;
            BOOL v44 = v48 > v49;
            if (v48 >= v49) {
              return result;
            }
            goto LABEL_73;
          }
          double v33 = -v7;
        }
LABEL_72:
        BOOL v44 = v33 > v32;
        if (v33 >= v32) {
          return result;
        }
        goto LABEL_73;
      }
    }
    else
    {
      if (fabs(v32 / (v32 - v33) + -0.5) >= 0.15) {
        goto LABEL_47;
      }
      if (v32 < -v33) {
        double v32 = -v33;
      }
    }
    double v33 = -v32;
LABEL_47:
    if (a2) {
      goto LABEL_48;
    }
    goto LABEL_72;
  }
  int64_t v35 = 0;
  uint64_t v36 = v54 + 32;
  uint64_t v37 = (double *)(v54 + 32);
  while (1)
  {
    double v33 = *v37;
    double v32 = *(double *)&v36[16 * v34];
    double v38 = (v32 - *v37) / v7;
    if (v38 > 100000000.0)
    {
      ++v35;
LABEL_31:
      --v34;
      goto LABEL_32;
    }
    if (v35 >= (unint64_t)v31) {
      goto LABEL_79;
    }
    if (fabs(*(double *)&v36[16 * v35 + 8]) / v38 <= 10.0)
    {
      if (fabs(*(double *)&v36[16 * v34 + 8]) / v38 <= 10.0) {
        goto LABEL_36;
      }
      goto LABEL_31;
    }
    ++v35;
    if (fabs(*(double *)&v36[16 * v34 + 8]) / v38 > 10.0) {
      goto LABEL_31;
    }
LABEL_32:
    if (v35 >= v31) {
      break;
    }
    if (v34 >= v31) {
      goto LABEL_78;
    }
    uint64_t v37 = (double *)&v36[16 * v35];
    if (v35 >= v34)
    {
      double v32 = a7;
      double v33 = a6;
      goto LABEL_36;
    }
  }
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
  return result;
}

char *sub_21F9690D4(char *result, char a2, uint64_t a3, char a4, uint64_t (*a5)(double), double a6, double a7)
{
  char v56 = (char)result;
  double v7 = a7 - a6;
  if ((~COERCE__INT64(a7 - a6) & 0x7FF0000000000000) == 0) {
    goto LABEL_80;
  }
  uint64_t v11 = 0;
  double v12 = v7 / 12300.0;
  unint64_t v13 = (char *)MEMORY[0x263F8EE78];
  uint64_t v14 = 0x78ABBF7B5AEAE776;
  do
  {
    uint64_t v16 = v14 - 0x61C8864680B583EBLL;
    unint64_t v17 = 0xBF58476D1CE4E5B9 * ((v14 - 0x61C8864680B583EBLL) ^ ((unint64_t)(v14 - 0x61C8864680B583EBLL) >> 30));
    unint64_t v18 = (0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) ^ ((0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) >> 31);
    if (0x20000000000001 * v18 >= 0x1FFFFFFFFFF801)
    {
      unint64_t v22 = (v18 * (unsigned __int128)0x20000000000001uLL) >> 64;
    }
    else
    {
      unint64_t v19 = v14 + 0x3C6EF372FE94F82ALL;
      do
      {
        v16 -= 0x61C8864680B583EBLL;
        unint64_t v20 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v19 ^ (v19 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v19 ^ (v19 >> 30))) >> 27));
        unint64_t v21 = v20 ^ (v20 >> 31);
        v19 -= 0x61C8864680B583EBLL;
      }
      while (0x20000000000001 * v21 < 0x1FFFFFFFFFF801);
      unint64_t v22 = (v21 * (unsigned __int128)0x20000000000001uLL) >> 64;
    }
    uint64_t v14 = v16;
    if (v22 == 0x20000000000000) {
      double v23 = a7;
    }
    else {
      double v23 = v7 * ((double)v22 * 1.11022302e-16) + a6;
    }
    uint64_t v24 = a5(v23);
    uint64_t v26 = v25;
    uint64_t v27 = ((uint64_t (*)(uint64_t, double))a5)(v24, v12 + v23);
    double v29 = v28;
    ((void (*)(uint64_t, double))a5)(v27, v23 - v12);
    if ((~v26 & 0x7FF0000000000000) != 0)
    {
      double v31 = (v29 - v30) / (v12 + v12);
      if ((~*(void *)&v31 & 0x7FF0000000000000) != 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v13 = sub_21F7E61F4(0, *((void *)v13 + 2) + 1, 1, v13);
        }
        unint64_t v33 = *((void *)v13 + 2);
        unint64_t v32 = *((void *)v13 + 3);
        uint64_t v34 = v13;
        if (v33 >= v32 >> 1) {
          uint64_t v34 = sub_21F7E61F4((char *)(v32 > 1), v33 + 1, 1, v13);
        }
        *((void *)v34 + 2) = v33 + 1;
        unint64_t v13 = v34;
        unint64_t v15 = &v34[16 * v33];
        *((void *)v15 + 4) = v26;
        *((double *)v15 + 5) = v31;
      }
    }
    ++v11;
  }
  while (v11 != 200);
  uint64_t v58 = v13;
  if (*((void *)v13 + 2) <= 1uLL) {
    return (char *)swift_bridgeObjectRelease();
  }
  sub_21F96533C(&v58);
  uint64_t result = v58;
  int64_t v35 = *((void *)v58 + 2);
  if (!v35) {
    goto LABEL_81;
  }
  double v36 = a7;
  double v37 = a6;
  uint64_t v38 = v35 - 1;
  if (v35 == 1)
  {
LABEL_36:
    uint64_t result = (char *)swift_bridgeObjectRelease();
    if ((v56 & 1) == 0) {
      goto LABEL_47;
    }
    if (v36 <= 0.0 || v37 >= 0.0)
    {
      if (v36 <= 0.0 || v37 < 0.0 || v37 >= v36 * 0.5)
      {
        if (v37 * 0.5 < v36 && v36 <= 0.0 && v37 < 0.0) {
          double v36 = -v37;
        }
        if (a2)
        {
LABEL_48:
          double v43 = (v36 - v37) / v7;
          if (v43 > 0.1 && v43 < 1.2)
          {
            if (a4)
            {
              if (v37 == 0.0)
              {
LABEL_57:
                BOOL v48 = v37 > v7;
                if (v37 >= v7) {
                  return result;
                }
                goto LABEL_73;
              }
              goto LABEL_70;
            }
          }
          else if (a4)
          {
            double v45 = (v36 - v37) * 0.05;
            double v46 = v37 - v45;
            double v47 = v36 + v45;
            BOOL v48 = v46 > v47;
            if (v46 >= v47) {
              return result;
            }
LABEL_73:
            if (v48) {
              goto LABEL_82;
            }
            return result;
          }
          double v7 = v7 / *(double *)&a3;
          if (v37 == 0.0) {
            goto LABEL_57;
          }
LABEL_70:
          if (v36 != 0.0)
          {
            double v51 = (v36 + v37) * 0.5;
            double v52 = v51 - v7 * 0.5;
            double v53 = v51 + v7 * 0.5;
            BOOL v48 = v52 > v53;
            if (v52 >= v53) {
              return result;
            }
            goto LABEL_73;
          }
          double v37 = -v7;
        }
LABEL_72:
        BOOL v48 = v37 > v36;
        if (v37 >= v36) {
          return result;
        }
        goto LABEL_73;
      }
    }
    else
    {
      if (fabs(v36 / (v36 - v37) + -0.5) >= 0.15) {
        goto LABEL_47;
      }
      if (v36 < -v37) {
        double v36 = -v37;
      }
    }
    double v37 = -v36;
LABEL_47:
    if (a2) {
      goto LABEL_48;
    }
    goto LABEL_72;
  }
  int64_t v39 = 0;
  double v40 = v58 + 32;
  double v41 = (double *)(v58 + 32);
  while (1)
  {
    double v37 = *v41;
    double v36 = *(double *)&v40[16 * v38];
    double v42 = (v36 - *v41) / v7;
    if (v42 > 100000000.0)
    {
      ++v39;
LABEL_31:
      --v38;
      goto LABEL_32;
    }
    if (v39 >= (unint64_t)v35) {
      goto LABEL_79;
    }
    if (fabs(*(double *)&v40[16 * v39 + 8]) / v42 <= 10.0)
    {
      if (fabs(*(double *)&v40[16 * v38 + 8]) / v42 <= 10.0) {
        goto LABEL_36;
      }
      goto LABEL_31;
    }
    ++v39;
    if (fabs(*(double *)&v40[16 * v38 + 8]) / v42 > 10.0) {
      goto LABEL_31;
    }
LABEL_32:
    if (v39 >= v35) {
      break;
    }
    if (v38 >= v35) {
      goto LABEL_78;
    }
    double v41 = (double *)&v40[16 * v39];
    if (v39 >= v38)
    {
      double v36 = a7;
      double v37 = a6;
      goto LABEL_36;
    }
  }
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
  return result;
}

uint64_t sub_21F9695D0(double (*a1)(double), double a2)
{
  double v4 = 0.674730544;
  double v5 = a1(a2 + 0.674730544);
  if (vabdd_f64(v5, a1(0.674730544)) < 0.000001)
  {
    uint64_t v6 = 0;
    do
    {
      double v7 = a1(a2 + a2 + v4);
      if (vabdd_f64(v7, a1(v4)) >= 0.000001) {
        break;
      }
      double v8 = a1(a2 * 3.0 + v4);
      if (vabdd_f64(v8, a1(v4)) >= 0.000001) {
        break;
      }
      double v9 = a1(a2 * 4.0 + v4);
      if (vabdd_f64(v9, a1(v4)) >= 0.000001) {
        break;
      }
      if (v6 == 24) {
        return 1;
      }
      double v4 = *(double *)((char *)&unk_26D12F8F0 + v6 + 40);
      double v10 = a1(v4 + a2);
      v6 += 8;
    }
    while (vabdd_f64(v10, a1(v4)) < 0.000001);
  }
  return 0;
}

void sub_21F969738(double (*a1)(double), double a2, double a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5 - 1;
  if (__OFSUB__(a5, 1)) {
    goto LABEL_28;
  }
  double v7 = a2;
  double v9 = a3 / a2;
  double v30 = (double)v5;
  double v29 = pow(a3 / a2, 2.0 / (double)v5);
  if (a5 < 0)
  {
LABEL_29:
    __break(1u);
  }
  else if (a5)
  {
    uint64_t v10 = 0;
    double v28 = v9;
    do
    {
      if (v10 == a5)
      {
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      long double v11 = pow(v9, (double)v10 / v30) * v7;
      double v12 = v11 / v29;
      double v13 = v29 * v11;
      if (v11 / v29 > v29 * v11) {
        goto LABEL_27;
      }
      double v14 = a1(v12 + 0.292048924);
      double v15 = a1(0.292048924);
      if (vabdd_f64(v14, v15) >= 1.0e-10)
      {
        double v17 = v7;
        double v18 = a1(v13 + 0.292048924);
        double v19 = a1(0.292048924);
        if (vabdd_f64(v18, v19) >= 1.0e-10)
        {
          double v20 = v14 - v15;
          double v21 = (v14 - v15) * (v18 - v19);
          double v7 = v17;
          double v9 = v28;
          if (v21 >= 0.0) {
            goto LABEL_5;
          }
          double v16 = (v12 + v13) * 0.5;
          double v22 = a1(v16 + 0.292048924);
          double v23 = a1(0.292048924);
          if (vabdd_f64(v22, v23) >= 1.0e-10)
          {
            double v24 = v22 - v23;
            uint64_t v25 = 40;
            while (--v25)
            {
              if (v20 * v24 < 0.0) {
                double v13 = v16;
              }
              else {
                double v12 = v16;
              }
              if (v20 * v24 >= 0.0) {
                double v20 = v24;
              }
              double v16 = (v12 + v13) * 0.5;
              double v26 = a1(v16 + 0.292048924);
              double v27 = a1(0.292048924);
              double v24 = v26 - v27;
              if (vabdd_f64(v26, v27) < 1.0e-10) {
                goto LABEL_22;
              }
            }
            goto LABEL_5;
          }
        }
        else
        {
          double v16 = v13;
          double v7 = v17;
          double v9 = v28;
        }
      }
      else
      {
        double v16 = v12;
      }
LABEL_22:
      if ((sub_21F9695D0(a1, v16) & 1) != 0 && (sub_21F9695D0(a1, v16 * 0.5) & 1) == 0) {
        return;
      }
LABEL_5:
      ++v10;
    }
    while (v10 != a5);
  }
}

uint64_t sub_21F9699A4(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 16);
  if (v2 < 2 || v2 != *(void *)(a2 + 16))
  {
    __break(1u);
    return result;
  }
  uint64_t v5 = result;
  uint64_t v6 = 0;
  uint64_t v7 = v2 & 0x7FFFFFFFFFFFFFFELL;
  double v8 = 0.0;
  do
  {
    double v8 = v8 + *(double *)(result + 8 * v6 + 32) + *(double *)(result + 8 * v6 + 40);
    v6 += 2;
  }
  while (v7 != v6);
  unint64_t v9 = v2 - v7;
  if (v2 != v7)
  {
    uint64_t v10 = (double *)(result + 16 * (v2 >> 1) + 32);
    do
    {
      double v11 = *v10++;
      double v8 = v8 + v11;
      --v9;
    }
    while (v9);
  }
  if (v2 >= 2)
  {
    uint64_t v12 = v2 & 0x7FFFFFFFFFFFFFFELL;
    double v14 = (double *)(a2 + 40);
    double v13 = 0.0;
    uint64_t v15 = v2 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      double v13 = v13 + *(v14 - 1) + *v14;
      v14 += 2;
      v15 -= 2;
    }
    while (v15);
    if (v2 == v12) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v12 = 0;
    double v13 = 0.0;
  }
  unint64_t v16 = v2 - v12;
  double v17 = (double *)(a2 + 8 * v12 + 32);
  do
  {
    double v18 = *v17++;
    double v13 = v13 + v18;
    --v16;
  }
  while (v16);
LABEL_18:
  uint64_t v55 = MEMORY[0x263F8EE78];
  double v19 = v8 / (double)(uint64_t)v2;
  sub_21F76CFE0(0, v2, 0);
  uint64_t v20 = 0;
  uint64_t v21 = v55;
  unint64_t v22 = *(void *)(v55 + 16);
  unint64_t v23 = v22;
  do
  {
    double v24 = *(double *)(v5 + 8 * v20 + 32);
    uint64_t v56 = v21;
    unint64_t v25 = *(void *)(v21 + 24);
    unint64_t v26 = v23 + 1;
    if (v23 >= v25 >> 1)
    {
      sub_21F76CFE0((char *)(v25 > 1), v23 + 1, 1);
      uint64_t v21 = v56;
    }
    ++v20;
    *(void *)(v21 + 16) = v26;
    *(double *)(v21 + 8 * v23++ + 32) = (v24 - v19) * (v24 - v19);
  }
  while (v2 != v20);
  unint64_t v27 = v2 + v22;
  if (v2 + v22 < 2)
  {
    unint64_t v28 = 0;
    double v29 = 0.0;
    do
    {
LABEL_27:
      double v32 = *(double *)(v21 + 32 + 8 * v28++);
      double v29 = v29 + v32;
    }
    while (v26 != v28);
    goto LABEL_28;
  }
  unint64_t v28 = v27 & 0xFFFFFFFFFFFFFFFELL;
  double v30 = (double *)(v21 + 40);
  double v29 = 0.0;
  unint64_t v31 = v27 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    double v29 = v29 + *(v30 - 1) + *v30;
    v30 += 2;
    v31 -= 2;
  }
  while (v31);
  if (v27 != v28) {
    goto LABEL_27;
  }
LABEL_28:
  uint64_t v33 = swift_bridgeObjectRelease();
  MEMORY[0x270FA5388](v33);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_21F968994(v5, a2, (double (*)(uint64_t, double, double))sub_21F96AE60);
  uint64_t v35 = v34;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v36 = *(void *)(v35 + 16);
  double v37 = 0.0;
  if (!v36) {
    goto LABEL_36;
  }
  if (v36 == 1)
  {
    uint64_t v38 = 0;
LABEL_34:
    uint64_t v41 = v36 - v38;
    double v42 = (double *)(v35 + 8 * v38 + 32);
    do
    {
      double v43 = *v42++;
      double v37 = v37 + v43;
      --v41;
    }
    while (v41);
    goto LABEL_36;
  }
  uint64_t v38 = v36 & 0x7FFFFFFFFFFFFFFELL;
  int64_t v39 = (double *)(v35 + 40);
  uint64_t v40 = v36 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    double v37 = v37 + *(v39 - 1) + *v39;
    v39 += 2;
    v40 -= 2;
  }
  while (v40);
  if (v36 != v38) {
    goto LABEL_34;
  }
LABEL_36:
  uint64_t v44 = swift_bridgeObjectRelease();
  MEMORY[0x270FA5388](v44);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_21F968994(v5, a2, (double (*)(uint64_t, double, double))sub_21F96AE74);
  uint64_t v46 = v45;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v47 = *(void *)(v46 + 16);
  if (v47)
  {
    if (v47 == 1)
    {
      uint64_t v48 = 0;
      double v49 = 0.0;
    }
    else
    {
      uint64_t v48 = v47 & 0x7FFFFFFFFFFFFFFELL;
      float64x2_t v50 = (double *)(v46 + 40);
      double v49 = 0.0;
      uint64_t v51 = v47 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        double v49 = v49 + *(v50 - 1) + *v50;
        v50 += 2;
        v51 -= 2;
      }
      while (v51);
      if (v47 == v48) {
        return swift_bridgeObjectRelease();
      }
    }
    uint64_t v52 = v47 - v48;
    double v53 = (double *)(v46 + 8 * v48 + 32);
    do
    {
      double v54 = *v53++;
      double v49 = v49 + v54;
      --v52;
    }
    while (v52);
  }
  return swift_bridgeObjectRelease();
}

void sub_21F969DB4(double (*a1)(void))
{
  uint64_t v1 = a1;
  uint64_t v2 = 0;
  double v3 = (char *)MEMORY[0x263F8EE78];
  uint64_t v4 = 0x78ABBF7B5AEAE776;
  uint64_t v60 = (char *)MEMORY[0x263F8EE78];
  do
  {
    uint64_t v5 = v4 - 0x61C8864680B583EBLL;
    unint64_t v6 = 0xBF58476D1CE4E5B9 * ((v4 - 0x61C8864680B583EBLL) ^ ((unint64_t)(v4 - 0x61C8864680B583EBLL) >> 30));
    unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
    if (0x20000000000001 * v7 >= 0x1FFFFFFFFFF801)
    {
      unint64_t v11 = (v7 * (unsigned __int128)0x20000000000001uLL) >> 64;
    }
    else
    {
      unint64_t v8 = v4 + 0x3C6EF372FE94F82ALL;
      do
      {
        v5 -= 0x61C8864680B583EBLL;
        unint64_t v9 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) >> 27));
        unint64_t v10 = v9 ^ (v9 >> 31);
        v8 -= 0x61C8864680B583EBLL;
      }
      while (0x20000000000001 * v10 < 0x1FFFFFFFFFF801);
      unint64_t v11 = (v10 * (unsigned __int128)0x20000000000001uLL) >> 64;
    }
    uint64_t v4 = v5;
    double v12 = (double)v11 * 1.11022302e-16 * 0.6 + 0.2;
    if (v11 == 0x20000000000000) {
      double v12 = 0.8;
    }
    long double v13 = exp((v12 + (double)v2) / 100.0 * 15.0 + 5.0);
    double v14 = v1();
    if ((~*(void *)&v14 & 0x7FF0000000000000) != 0)
    {
      uint64_t v15 = v60;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v15 = sub_21F7E8F4C(0, *((void *)v60 + 2) + 1, 1, v60);
      }
      unint64_t v17 = *((void *)v15 + 2);
      unint64_t v16 = *((void *)v15 + 3);
      uint64_t v60 = v15;
      if (v17 >= v16 >> 1) {
        uint64_t v60 = sub_21F7E8F4C((char *)(v16 > 1), v17 + 1, 1, v15);
      }
      *((void *)v60 + 2) = v17 + 1;
      *(long double *)&v60[8 * v17 + 32] = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        double v3 = sub_21F7E8F4C(0, *((void *)v3 + 2) + 1, 1, v3);
      }
      unint64_t v19 = *((void *)v3 + 2);
      unint64_t v18 = *((void *)v3 + 3);
      if (v19 >= v18 >> 1) {
        double v3 = sub_21F7E8F4C((char *)(v18 > 1), v19 + 1, 1, v3);
      }
      *((void *)v3 + 2) = v19 + 1;
      *(double *)&v3[8 * v19 + 32] = v14;
      uint64_t v1 = a1;
    }
    ++v2;
  }
  while (v2 != 100);
  if (*((void *)v60 + 2) >= 0x14uLL)
  {
    sub_21F9699A4((uint64_t)v60, (uint64_t)v3);
    double v62 = v20;
    double v22 = v21;
    double v24 = v23;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v24 <= 0.001)
    {
      uint64_t v25 = 0;
      char v56 = 1;
      char v26 = 1;
      do
      {
        if (v26) {
          uint64_t v27 = 4;
        }
        else {
          uint64_t v27 = v25 - 1;
        }
        double v58 = __exp10((double)v27);
        unint64_t v28 = 0;
        unint64_t v29 = qword_26D12F940;
        uint64_t v57 = v27;
        uint64_t v55 = qword_26D12F940;
        while (2)
        {
          if (v28 <= v29) {
            unint64_t v30 = v29;
          }
          else {
            unint64_t v30 = v28;
          }
          unint64_t v59 = v30;
          while (1)
          {
            if (v28 == v59)
            {
              __break(1u);
LABEL_71:
              __break(1u);
LABEL_72:
              __break(1u);
LABEL_73:
              __break(1u);
              return;
            }
            double v31 = v58 * *((double *)&unk_26D12F930 + v28 + 4);
            double v32 = v31 * 0.7;
            double v33 = v31 * 0.9;
            if (v31 * 0.7 > v31 * 0.9) {
              goto LABEL_71;
            }
            if ((~COERCE__INT64(v33 - v32) & 0x7FF0000000000000) == 0) {
              goto LABEL_72;
            }
            uint64_t v34 = 0;
            unint64_t v61 = v28 + 1;
            uint64_t v35 = (char *)MEMORY[0x263F8EE78];
            do
            {
              uint64_t v37 = v4 - 0x61C8864680B583EBLL;
              unint64_t v38 = 0xBF58476D1CE4E5B9
                  * ((v4 - 0x61C8864680B583EBLL) ^ ((unint64_t)(v4 - 0x61C8864680B583EBLL) >> 30));
              unint64_t v39 = (0x94D049BB133111EBLL * (v38 ^ (v38 >> 27))) ^ ((0x94D049BB133111EBLL * (v38 ^ (v38 >> 27))) >> 31);
              if (0x20000000000001 * v39 >= 0x1FFFFFFFFFF801)
              {
                unint64_t v43 = (v39 * (unsigned __int128)0x20000000000001uLL) >> 64;
              }
              else
              {
                unint64_t v40 = v4 + 0x3C6EF372FE94F82ALL;
                do
                {
                  v37 -= 0x61C8864680B583EBLL;
                  unint64_t v41 = 0x94D049BB133111EBLL
                      * ((0xBF58476D1CE4E5B9 * (v40 ^ (v40 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v40 ^ (v40 >> 30))) >> 27));
                  unint64_t v42 = v41 ^ (v41 >> 31);
                  v40 -= 0x61C8864680B583EBLL;
                }
                while (0x20000000000001 * v42 < 0x1FFFFFFFFFF801);
                unint64_t v43 = (v42 * (unsigned __int128)0x20000000000001uLL) >> 64;
              }
              uint64_t v4 = v37;
              if (v43 == 0x20000000000000) {
                double v44 = v33;
              }
              else {
                double v44 = v32 + (v33 - v32) * ((double)v43 * 1.11022302e-16);
              }
              double v45 = ((double (*)(double))v1)(v44);
              if ((~*(void *)&v45 & 0x7FF0000000000000) != 0)
              {
                double v46 = v22 + v62 * v44;
                double v36 = vabdd_f64(v46, v45);
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                if (fabs(v46) >= 0.00000001)
                {
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                    uint64_t v35 = sub_21F7E8F4C(0, *((void *)v35 + 2) + 1, 1, v35);
                  }
                  unint64_t v49 = *((void *)v35 + 2);
                  unint64_t v51 = *((void *)v35 + 3);
                  unint64_t v50 = v49 + 1;
                  if (v49 >= v51 >> 1) {
                    uint64_t v35 = sub_21F7E8F4C((char *)(v51 > 1), v49 + 1, 1, v35);
                  }
                  double v36 = v36 / v46;
                }
                else
                {
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                    uint64_t v35 = sub_21F7E8F4C(0, *((void *)v35 + 2) + 1, 1, v35);
                  }
                  unint64_t v49 = *((void *)v35 + 2);
                  unint64_t v48 = *((void *)v35 + 3);
                  unint64_t v50 = v49 + 1;
                  if (v49 >= v48 >> 1) {
                    uint64_t v35 = sub_21F7E8F4C((char *)(v48 > 1), v49 + 1, 1, v35);
                  }
                }
                *((void *)v35 + 2) = v50;
                *(double *)&v35[8 * v49 + 32] = v36;
                uint64_t v1 = a1;
              }
              ++v34;
            }
            while (v34 != 100);
            if (*((void *)v35 + 2) >= 0x32uLL) {
              break;
            }
            swift_bridgeObjectRelease();
            unint64_t v28 = v61;
            uint64_t v25 = v57;
            if (v61 == 5) {
              goto LABEL_25;
            }
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v35 = sub_21F93537C((uint64_t)v35);
          }
          uint64_t v52 = *((void *)v35 + 2);
          v64[0] = v35 + 32;
          v64[1] = v52;
          sub_21F935C90(v64);
          unint64_t v53 = *((void *)v35 + 2);
          if (v53 >> 1 >= v53) {
            goto LABEL_73;
          }
          double v54 = *(double *)&v35[8 * (v53 >> 1) + 32];
          swift_bridgeObjectRelease();
          if ((v56 & (v54 > 0.005)) != 0 || v54 > 0.005) {
            return;
          }
          char v56 = 0;
          unint64_t v28 = v61;
          uint64_t v25 = v57;
          unint64_t v29 = v55;
          if (v61 != 5) {
            continue;
          }
          break;
        }
        char v56 = 0;
LABEL_25:
        char v26 = 0;
      }
      while (v25 != -1);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void sub_21F96A44C(double (*a1)(double))
{
  uint64_t v1 = a1;
  uint64_t v2 = 0;
  double v3 = (char *)MEMORY[0x263F8EE78];
  uint64_t v4 = 0x78ABBF7B5AEAE776;
  double v62 = (char *)MEMORY[0x263F8EE78];
  do
  {
    uint64_t v5 = v4 - 0x61C8864680B583EBLL;
    unint64_t v6 = 0xBF58476D1CE4E5B9 * ((v4 - 0x61C8864680B583EBLL) ^ ((unint64_t)(v4 - 0x61C8864680B583EBLL) >> 30));
    unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
    if (0x20000000000001 * v7 >= 0x1FFFFFFFFFF801)
    {
      unint64_t v11 = (v7 * (unsigned __int128)0x20000000000001uLL) >> 64;
    }
    else
    {
      unint64_t v8 = v4 + 0x3C6EF372FE94F82ALL;
      do
      {
        v5 -= 0x61C8864680B583EBLL;
        unint64_t v9 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) >> 27));
        unint64_t v10 = v9 ^ (v9 >> 31);
        v8 -= 0x61C8864680B583EBLL;
      }
      while (0x20000000000001 * v10 < 0x1FFFFFFFFFF801);
      unint64_t v11 = (v10 * (unsigned __int128)0x20000000000001uLL) >> 64;
    }
    uint64_t v4 = v5;
    double v12 = (double)v11 * 1.11022302e-16 * 0.6 + 0.2;
    if (v11 == 0x20000000000000) {
      double v12 = 0.8;
    }
    double v13 = exp((v12 + (double)v2) / 100.0 * 15.0 + 5.0);
    double v14 = v1(-v13);
    if ((~*(void *)&v14 & 0x7FF0000000000000) != 0)
    {
      uint64_t v15 = v62;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v15 = sub_21F7E8F4C(0, *((void *)v62 + 2) + 1, 1, v62);
      }
      unint64_t v17 = *((void *)v15 + 2);
      unint64_t v16 = *((void *)v15 + 3);
      double v62 = v15;
      if (v17 >= v16 >> 1) {
        double v62 = sub_21F7E8F4C((char *)(v16 > 1), v17 + 1, 1, v15);
      }
      *((void *)v62 + 2) = v17 + 1;
      *(double *)&v62[8 * v17 + 32] = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        double v3 = sub_21F7E8F4C(0, *((void *)v3 + 2) + 1, 1, v3);
      }
      unint64_t v19 = *((void *)v3 + 2);
      unint64_t v18 = *((void *)v3 + 3);
      if (v19 >= v18 >> 1) {
        double v3 = sub_21F7E8F4C((char *)(v18 > 1), v19 + 1, 1, v3);
      }
      *((void *)v3 + 2) = v19 + 1;
      *(double *)&v3[8 * v19 + 32] = v14;
      uint64_t v1 = a1;
    }
    ++v2;
  }
  while (v2 != 100);
  if (*((void *)v62 + 2) > 0x13uLL)
  {
    sub_21F9699A4((uint64_t)v62, (uint64_t)v3);
    double v64 = v20;
    double v22 = v21;
    double v24 = v23;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v24 <= 0.001)
    {
      uint64_t v25 = 0;
      char v58 = 1;
      char v26 = 1;
      do
      {
        uint64_t v27 = v25 - 1;
        BOOL v28 = (v26 & 1) == 0;
        uint64_t v29 = 4;
        if (v28) {
          uint64_t v29 = v27;
        }
        uint64_t v59 = v29;
        double v60 = __exp10((double)v29);
        unint64_t v30 = 0;
        unint64_t v31 = qword_26D12F988;
        uint64_t v57 = qword_26D12F988;
        while (2)
        {
          if (v30 <= v31) {
            unint64_t v32 = v31;
          }
          else {
            unint64_t v32 = v30;
          }
          unint64_t v61 = v32;
          while (1)
          {
            if (v30 == v61)
            {
              __break(1u);
LABEL_71:
              __break(1u);
LABEL_72:
              __break(1u);
LABEL_73:
              __break(1u);
              return;
            }
            double v33 = v60 * *((double *)&unk_26D12F978 + v30 + 4);
            double v34 = v33 * 0.7;
            double v35 = v33 * 0.9;
            if (v33 * 0.7 > v33 * 0.9) {
              goto LABEL_71;
            }
            if ((~COERCE__INT64(v35 - v34) & 0x7FF0000000000000) == 0) {
              goto LABEL_72;
            }
            uint64_t v36 = 0;
            unint64_t v63 = v30 + 1;
            uint64_t v37 = (char *)MEMORY[0x263F8EE78];
            do
            {
              uint64_t v39 = v4 - 0x61C8864680B583EBLL;
              unint64_t v40 = 0xBF58476D1CE4E5B9
                  * ((v4 - 0x61C8864680B583EBLL) ^ ((unint64_t)(v4 - 0x61C8864680B583EBLL) >> 30));
              unint64_t v41 = (0x94D049BB133111EBLL * (v40 ^ (v40 >> 27))) ^ ((0x94D049BB133111EBLL * (v40 ^ (v40 >> 27))) >> 31);
              if (0x20000000000001 * v41 >= 0x1FFFFFFFFFF801)
              {
                unint64_t v45 = (v41 * (unsigned __int128)0x20000000000001uLL) >> 64;
              }
              else
              {
                unint64_t v42 = v4 + 0x3C6EF372FE94F82ALL;
                do
                {
                  v39 -= 0x61C8864680B583EBLL;
                  unint64_t v43 = 0x94D049BB133111EBLL
                      * ((0xBF58476D1CE4E5B9 * (v42 ^ (v42 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v42 ^ (v42 >> 30))) >> 27));
                  unint64_t v44 = v43 ^ (v43 >> 31);
                  v42 -= 0x61C8864680B583EBLL;
                }
                while (0x20000000000001 * v44 < 0x1FFFFFFFFFF801);
                unint64_t v45 = (v44 * (unsigned __int128)0x20000000000001uLL) >> 64;
              }
              uint64_t v4 = v39;
              if (v45 == 0x20000000000000) {
                double v46 = v35;
              }
              else {
                double v46 = v34 + (v35 - v34) * ((double)v45 * 1.11022302e-16);
              }
              double v47 = v1(-v46);
              if ((~*(void *)&v47 & 0x7FF0000000000000) != 0)
              {
                double v48 = v22 + v64 * v46;
                double v38 = vabdd_f64(v48, v47);
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                if (fabs(v48) >= 0.00000001)
                {
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                    uint64_t v37 = sub_21F7E8F4C(0, *((void *)v37 + 2) + 1, 1, v37);
                  }
                  unint64_t v51 = *((void *)v37 + 2);
                  unint64_t v53 = *((void *)v37 + 3);
                  unint64_t v52 = v51 + 1;
                  if (v51 >= v53 >> 1) {
                    uint64_t v37 = sub_21F7E8F4C((char *)(v53 > 1), v51 + 1, 1, v37);
                  }
                  double v38 = v38 / v48;
                }
                else
                {
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                    uint64_t v37 = sub_21F7E8F4C(0, *((void *)v37 + 2) + 1, 1, v37);
                  }
                  unint64_t v51 = *((void *)v37 + 2);
                  unint64_t v50 = *((void *)v37 + 3);
                  unint64_t v52 = v51 + 1;
                  if (v51 >= v50 >> 1) {
                    uint64_t v37 = sub_21F7E8F4C((char *)(v50 > 1), v51 + 1, 1, v37);
                  }
                }
                *((void *)v37 + 2) = v52;
                *(double *)&v37[8 * v51 + 32] = v38;
                uint64_t v1 = a1;
              }
              ++v36;
            }
            while (v36 != 100);
            if (*((void *)v37 + 2) > 0x31uLL) {
              break;
            }
            swift_bridgeObjectRelease();
            unint64_t v30 = v63;
            if (v63 == 5) {
              goto LABEL_25;
            }
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v37 = sub_21F93537C((uint64_t)v37);
          }
          uint64_t v54 = *((void *)v37 + 2);
          v66[0] = v37 + 32;
          v66[1] = v54;
          sub_21F935C90(v66);
          unint64_t v55 = *((void *)v37 + 2);
          if (v55 >> 1 >= v55) {
            goto LABEL_73;
          }
          double v56 = *(double *)&v37[8 * (v55 >> 1) + 32];
          swift_bridgeObjectRelease();
          if ((v58 & (v56 > 0.005)) != 0 || v56 > 0.005) {
            return;
          }
          char v58 = 0;
          unint64_t v30 = v63;
          unint64_t v31 = v57;
          if (v63 != 5) {
            continue;
          }
          break;
        }
        char v58 = 0;
LABEL_25:
        char v26 = 0;
        uint64_t v25 = v59;
      }
      while (v59 != -1);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void sub_21F96AAE8(uint64_t (*a1)(__n128), __n128 a2, double a3)
{
  double v3 = a3 - a2.n128_f64[0];
  if ((~COERCE__INT64(a3 - a2.n128_f64[0]) & 0x7FF0000000000000) != 0)
  {
    double v5 = a2.n128_f64[0];
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0x78ABBF7B5AEAE776;
    while (1)
    {
      uint64_t v10 = v9 - 0x61C8864680B583EBLL;
      unint64_t v11 = 0xBF58476D1CE4E5B9 * ((v9 - 0x61C8864680B583EBLL) ^ ((unint64_t)(v9 - 0x61C8864680B583EBLL) >> 30));
      unint64_t v12 = (0x94D049BB133111EBLL * (v11 ^ (v11 >> 27))) ^ ((0x94D049BB133111EBLL * (v11 ^ (v11 >> 27))) >> 31);
      if (0x20000000000001 * v12 >= 0x1FFFFFFFFFF801)
      {
        unint64_t v16 = (v12 * (unsigned __int128)0x20000000000001uLL) >> 64;
      }
      else
      {
        unint64_t v13 = v9 + 0x3C6EF372FE94F82ALL;
        do
        {
          v10 -= 0x61C8864680B583EBLL;
          unint64_t v14 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) >> 27));
          unint64_t v15 = v14 ^ (v14 >> 31);
          v13 -= 0x61C8864680B583EBLL;
        }
        while (0x20000000000001 * v15 < 0x1FFFFFFFFFF801);
        unint64_t v16 = (v15 * (unsigned __int128)0x20000000000001uLL) >> 64;
      }
      uint64_t v9 = v10;
      a2.n128_f64[0] = v3 * ((double)v16 * 1.11022302e-16) + v5;
      if (v16 == 0x20000000000000) {
        a2.n128_f64[0] = a3;
      }
      if ((~a1(a2) & 0x7FF0000000000000) != 0 && __OFADD__(v7++, 1)) {
        break;
      }
      if (++v8 == 100) {
        return;
      }
    }
    __break(1u);
  }
  else
  {
    __break(1u);
  }
}

void sub_21F96AC94(uint64_t (*a1)(__n128), __n128 a2)
{
  a2.n128_u64[0] = 0xC0F86A0000000000;
  sub_21F96AAE8(a1, a2, 100000.0);
  if (v3.n128_f64[0] <= 0.1)
  {
    v3.n128_u64[0] = -10.0;
    sub_21F96AAE8(a1, v3, 10.0);
    if (v4.n128_f64[0] < 0.4)
    {
      if (*(double *)&qword_26D12F9E8 < 0.0) {
        goto LABEL_16;
      }
      v4.n128_f64[0] = -*(double *)&qword_26D12F9E8;
      sub_21F96AAE8(a1, v4, *(double *)&qword_26D12F9E8);
      if (v5.n128_f64[0] >= 0.4) {
        return;
      }
      if (*(double *)&qword_26D12F9F0 < 0.0) {
        goto LABEL_16;
      }
      v5.n128_f64[0] = -*(double *)&qword_26D12F9F0;
      sub_21F96AAE8(a1, v5, *(double *)&qword_26D12F9F0);
      if (v6.n128_f64[0] >= 0.4) {
        return;
      }
      if (*(double *)&qword_26D12F9F8 < 0.0) {
        goto LABEL_16;
      }
      v6.n128_f64[0] = -*(double *)&qword_26D12F9F8;
      sub_21F96AAE8(a1, v6, *(double *)&qword_26D12F9F8);
      if (v7.n128_f64[0] >= 0.4) {
        return;
      }
      if (*(double *)&qword_26D12FA00 < 0.0) {
        goto LABEL_16;
      }
      v7.n128_f64[0] = -*(double *)&qword_26D12FA00;
      sub_21F96AAE8(a1, v7, *(double *)&qword_26D12FA00);
      if (v8.n128_f64[0] >= 0.4) {
        return;
      }
      if (*(double *)&qword_26D12FA08 < 0.0) {
        goto LABEL_16;
      }
      v8.n128_f64[0] = -*(double *)&qword_26D12FA08;
      sub_21F96AAE8(a1, v8, *(double *)&qword_26D12FA08);
      if (v9.n128_f64[0] >= 0.4) {
        return;
      }
      if (*(double *)&qword_26D12FA10 < 0.0)
      {
LABEL_16:
        __break(1u);
        return;
      }
      v9.n128_f64[0] = -*(double *)&qword_26D12FA10;
      sub_21F96AAE8(a1, v9, *(double *)&qword_26D12FA10);
    }
  }
}

double sub_21F96AE60(double a1, double a2)
{
  return (a1 - *(double *)(v2 + 16)) * (a2 - *(double *)(v2 + 24));
}

double sub_21F96AE74(double a1, double a2)
{
  return (a2 - *(double *)(v2 + 16) * a1 - *(double *)(v2 + 24))
       * (a2 - *(double *)(v2 + 16) * a1 - *(double *)(v2 + 24));
}

uint64_t sub_21F96AE8C(uint64_t (*a1)(double), double a2)
{
  double v4 = 0.674730544;
  uint64_t v5 = a1(a2 + 0.674730544);
  double v7 = v6;
  uint64_t v8 = ((uint64_t (*)(uint64_t, double))a1)(v5, 0.674730544);
  if (vabdd_f64(v7, v9) < 0.000001)
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = ((uint64_t (*)(uint64_t, double))a1)(v8, a2 + a2 + v4);
      double v13 = v12;
      uint64_t v14 = ((uint64_t (*)(uint64_t, double))a1)(v11, v4);
      if (vabdd_f64(v13, v15) >= 0.000001) {
        break;
      }
      uint64_t v16 = ((uint64_t (*)(uint64_t, double))a1)(v14, a2 * 3.0 + v4);
      double v18 = v17;
      uint64_t v19 = ((uint64_t (*)(uint64_t, double))a1)(v16, v4);
      if (vabdd_f64(v18, v20) >= 0.000001) {
        break;
      }
      uint64_t v21 = ((uint64_t (*)(uint64_t, double))a1)(v19, a2 * 4.0 + v4);
      double v23 = v22;
      uint64_t v24 = ((uint64_t (*)(uint64_t, double))a1)(v21, v4);
      if (vabdd_f64(v23, v25) >= 0.000001) {
        break;
      }
      if (v10 == 24) {
        return 1;
      }
      double v4 = *(double *)((char *)&unk_26D12FA18 + v10 + 40);
      uint64_t v26 = ((uint64_t (*)(uint64_t, double))a1)(v24, v4 + a2);
      double v28 = v27;
      uint64_t v8 = ((uint64_t (*)(uint64_t, double))a1)(v26, v4);
      v10 += 8;
    }
    while (vabdd_f64(v28, v29) < 0.000001);
  }
  return 0;
}

void sub_21F96AFF4(uint64_t a1, uint64_t (*a2)(double), double a3, double a4)
{
  uint64_t v4 = a1 - 1;
  if (__OFSUB__(a1, 1)) {
    goto LABEL_28;
  }
  double v7 = a3;
  double v8 = a4 / a3;
  double v43 = (double)v4;
  double v42 = pow(a4 / a3, 2.0 / (double)v4);
  if (a1 < 0)
  {
LABEL_29:
    __break(1u);
  }
  else if (a1)
  {
    uint64_t v9 = 0;
    double v41 = v8;
    do
    {
      if (v9 == a1)
      {
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      long double v10 = pow(v8, (double)v9 / v43) * v7;
      double v11 = v10 / v42;
      double v12 = v42 * v10;
      if (v10 / v42 > v42 * v10) {
        goto LABEL_27;
      }
      uint64_t v13 = a2(v11 + 0.292048924);
      double v15 = v14;
      uint64_t v16 = ((uint64_t (*)(uint64_t, double))a2)(v13, 0.292048924);
      if (vabdd_f64(v15, v17) >= 1.0e-10)
      {
        double v19 = v17;
        double v20 = v7;
        uint64_t v21 = ((uint64_t (*)(uint64_t, double))a2)(v16, v12 + 0.292048924);
        double v23 = v22;
        uint64_t v24 = ((uint64_t (*)(uint64_t, double))a2)(v21, 0.292048924);
        if (vabdd_f64(v23, v25) >= 1.0e-10)
        {
          double v26 = v15 - v19;
          double v27 = (v15 - v19) * (v23 - v25);
          double v7 = v20;
          double v8 = v41;
          if (v27 >= 0.0) {
            goto LABEL_5;
          }
          double v18 = (v11 + v12) * 0.5;
          uint64_t v28 = ((uint64_t (*)(uint64_t, double))a2)(v24, v18 + 0.292048924);
          double v30 = v29;
          uint64_t v31 = ((uint64_t (*)(uint64_t, double))a2)(v28, 0.292048924);
          if (vabdd_f64(v30, v32) >= 1.0e-10)
          {
            double v33 = v30 - v32;
            uint64_t v34 = 40;
            while (--v34)
            {
              if (v26 * v33 < 0.0) {
                double v12 = v18;
              }
              else {
                double v11 = v18;
              }
              if (v26 * v33 >= 0.0) {
                double v26 = v33;
              }
              double v18 = (v11 + v12) * 0.5;
              uint64_t v35 = ((uint64_t (*)(uint64_t, double))a2)(v31, v18 + 0.292048924);
              double v37 = v36;
              uint64_t v31 = ((uint64_t (*)(uint64_t, double))a2)(v35, 0.292048924);
              double v33 = v37 - v38;
              if (vabdd_f64(v37, v38) < 1.0e-10) {
                goto LABEL_22;
              }
            }
            goto LABEL_5;
          }
        }
        else
        {
          double v18 = v12;
          double v7 = v20;
          double v8 = v41;
        }
      }
      else
      {
        double v18 = v11;
      }
LABEL_22:
      swift_retain();
      char v39 = sub_21F96AE8C(a2, v18);
      swift_release();
      if (v39)
      {
        swift_retain();
        char v40 = sub_21F96AE8C(a2, v18 * 0.5);
        swift_release();
        if ((v40 & 1) == 0) {
          return;
        }
      }
LABEL_5:
      ++v9;
    }
    while (v9 != a1);
  }
}

void sub_21F96B28C(void (*a1)(void))
{
  uint64_t v1 = a1;
  uint64_t v2 = 0;
  __n128 v3 = (char *)MEMORY[0x263F8EE78];
  uint64_t v4 = 0x78ABBF7B5AEAE776;
  unint64_t v63 = (char *)MEMORY[0x263F8EE78];
  do
  {
    uint64_t v5 = v4 - 0x61C8864680B583EBLL;
    unint64_t v6 = 0xBF58476D1CE4E5B9 * ((v4 - 0x61C8864680B583EBLL) ^ ((unint64_t)(v4 - 0x61C8864680B583EBLL) >> 30));
    unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
    if (0x20000000000001 * v7 >= 0x1FFFFFFFFFF801)
    {
      unint64_t v11 = (v7 * (unsigned __int128)0x20000000000001uLL) >> 64;
    }
    else
    {
      unint64_t v8 = v4 + 0x3C6EF372FE94F82ALL;
      do
      {
        v5 -= 0x61C8864680B583EBLL;
        unint64_t v9 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) >> 27));
        unint64_t v10 = v9 ^ (v9 >> 31);
        v8 -= 0x61C8864680B583EBLL;
      }
      while (0x20000000000001 * v10 < 0x1FFFFFFFFFF801);
      unint64_t v11 = (v10 * (unsigned __int128)0x20000000000001uLL) >> 64;
    }
    uint64_t v4 = v5;
    double v12 = (double)v11 * 1.11022302e-16 * 0.6 + 0.2;
    if (v11 == 0x20000000000000) {
      double v12 = 0.8;
    }
    long double v13 = exp((v12 + (double)v2) / 100.0 * 15.0 + 5.0);
    v1();
    uint64_t v15 = v14;
    if ((~v14 & 0x7FF0000000000000) != 0)
    {
      uint64_t v16 = v63;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v16 = sub_21F7E8F4C(0, *((void *)v63 + 2) + 1, 1, v63);
      }
      unint64_t v18 = *((void *)v16 + 2);
      unint64_t v17 = *((void *)v16 + 3);
      unint64_t v63 = v16;
      if (v18 >= v17 >> 1) {
        unint64_t v63 = sub_21F7E8F4C((char *)(v17 > 1), v18 + 1, 1, v16);
      }
      *((void *)v63 + 2) = v18 + 1;
      *(long double *)&v63[8 * v18 + 32] = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        __n128 v3 = sub_21F7E8F4C(0, *((void *)v3 + 2) + 1, 1, v3);
      }
      unint64_t v20 = *((void *)v3 + 2);
      unint64_t v19 = *((void *)v3 + 3);
      if (v20 >= v19 >> 1) {
        __n128 v3 = sub_21F7E8F4C((char *)(v19 > 1), v20 + 1, 1, v3);
      }
      *((void *)v3 + 2) = v20 + 1;
      *(void *)&v3[8 * v20 + 32] = v15;
      uint64_t v1 = a1;
    }
    ++v2;
  }
  while (v2 != 100);
  if (*((void *)v63 + 2) > 0x13uLL)
  {
    sub_21F9699A4((uint64_t)v63, (uint64_t)v3);
    double v65 = v21;
    double v23 = v22;
    double v25 = v24;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v25 <= 0.001)
    {
      uint64_t v26 = 0;
      char v59 = 1;
      char v27 = 1;
      do
      {
        uint64_t v28 = v26 - 1;
        BOOL v29 = (v27 & 1) == 0;
        uint64_t v30 = 4;
        if (v29) {
          uint64_t v30 = v28;
        }
        uint64_t v60 = v30;
        double v61 = __exp10((double)v30);
        unint64_t v31 = 0;
        unint64_t v32 = qword_26D12FA68;
        uint64_t v58 = qword_26D12FA68;
        while (2)
        {
          if (v31 <= v32) {
            unint64_t v33 = v32;
          }
          else {
            unint64_t v33 = v31;
          }
          unint64_t v62 = v33;
          while (1)
          {
            if (v31 == v62)
            {
              __break(1u);
LABEL_71:
              __break(1u);
LABEL_72:
              __break(1u);
LABEL_73:
              __break(1u);
              return;
            }
            double v34 = v61 * *((double *)&unk_26D12FA58 + v31 + 4);
            double v35 = v34 * 0.7;
            double v36 = v34 * 0.9;
            if (v34 * 0.7 > v34 * 0.9) {
              goto LABEL_71;
            }
            if ((~COERCE__INT64(v36 - v35) & 0x7FF0000000000000) == 0) {
              goto LABEL_72;
            }
            uint64_t v37 = 0;
            unint64_t v64 = v31 + 1;
            double v38 = (char *)MEMORY[0x263F8EE78];
            do
            {
              uint64_t v40 = v4 - 0x61C8864680B583EBLL;
              unint64_t v41 = 0xBF58476D1CE4E5B9
                  * ((v4 - 0x61C8864680B583EBLL) ^ ((unint64_t)(v4 - 0x61C8864680B583EBLL) >> 30));
              unint64_t v42 = (0x94D049BB133111EBLL * (v41 ^ (v41 >> 27))) ^ ((0x94D049BB133111EBLL * (v41 ^ (v41 >> 27))) >> 31);
              if (0x20000000000001 * v42 >= 0x1FFFFFFFFFF801)
              {
                unint64_t v46 = (v42 * (unsigned __int128)0x20000000000001uLL) >> 64;
              }
              else
              {
                unint64_t v43 = v4 + 0x3C6EF372FE94F82ALL;
                do
                {
                  v40 -= 0x61C8864680B583EBLL;
                  unint64_t v44 = 0x94D049BB133111EBLL
                      * ((0xBF58476D1CE4E5B9 * (v43 ^ (v43 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v43 ^ (v43 >> 30))) >> 27));
                  unint64_t v45 = v44 ^ (v44 >> 31);
                  v43 -= 0x61C8864680B583EBLL;
                }
                while (0x20000000000001 * v45 < 0x1FFFFFFFFFF801);
                unint64_t v46 = (v45 * (unsigned __int128)0x20000000000001uLL) >> 64;
              }
              uint64_t v4 = v40;
              if (v46 == 0x20000000000000) {
                double v47 = v36;
              }
              else {
                double v47 = v35 + (v36 - v35) * ((double)v46 * 1.11022302e-16);
              }
              ((void (*)(double))v1)(v47);
              if ((~*(void *)&v48 & 0x7FF0000000000000) != 0)
              {
                double v49 = v23 + v65 * v47;
                double v39 = vabdd_f64(v49, v48);
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                if (fabs(v49) >= 0.00000001)
                {
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                    double v38 = sub_21F7E8F4C(0, *((void *)v38 + 2) + 1, 1, v38);
                  }
                  unint64_t v52 = *((void *)v38 + 2);
                  unint64_t v54 = *((void *)v38 + 3);
                  unint64_t v53 = v52 + 1;
                  if (v52 >= v54 >> 1) {
                    double v38 = sub_21F7E8F4C((char *)(v54 > 1), v52 + 1, 1, v38);
                  }
                  double v39 = v39 / v49;
                }
                else
                {
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                    double v38 = sub_21F7E8F4C(0, *((void *)v38 + 2) + 1, 1, v38);
                  }
                  unint64_t v52 = *((void *)v38 + 2);
                  unint64_t v51 = *((void *)v38 + 3);
                  unint64_t v53 = v52 + 1;
                  if (v52 >= v51 >> 1) {
                    double v38 = sub_21F7E8F4C((char *)(v51 > 1), v52 + 1, 1, v38);
                  }
                }
                *((void *)v38 + 2) = v53;
                *(double *)&v38[8 * v52 + 32] = v39;
                uint64_t v1 = a1;
              }
              ++v37;
            }
            while (v37 != 100);
            if (*((void *)v38 + 2) > 0x31uLL) {
              break;
            }
            swift_bridgeObjectRelease();
            unint64_t v31 = v64;
            if (v64 == 5) {
              goto LABEL_25;
            }
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            double v38 = sub_21F93537C((uint64_t)v38);
          }
          uint64_t v55 = *((void *)v38 + 2);
          v67[0] = v38 + 32;
          v67[1] = v55;
          sub_21F935C90(v67);
          unint64_t v56 = *((void *)v38 + 2);
          if (v56 >> 1 >= v56) {
            goto LABEL_73;
          }
          double v57 = *(double *)&v38[8 * (v56 >> 1) + 32];
          swift_bridgeObjectRelease();
          if ((v59 & (v57 > 0.005)) != 0 || v57 > 0.005) {
            return;
          }
          char v59 = 0;
          unint64_t v31 = v64;
          unint64_t v32 = v58;
          if (v64 != 5) {
            continue;
          }
          break;
        }
        char v59 = 0;
LABEL_25:
        char v27 = 0;
        uint64_t v26 = v60;
      }
      while (v60 != -1);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_21F96B924(uint64_t result, __n128 a2, double a3)
{
  double v3 = a3 - a2.n128_f64[0];
  if ((~COERCE__INT64(a3 - a2.n128_f64[0]) & 0x7FF0000000000000) != 0)
  {
    uint64_t v4 = (uint64_t (*)(__n128))result;
    double v6 = a2.n128_f64[0];
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0x78ABBF7B5AEAE776;
    while (1)
    {
      uint64_t v10 = v9 - 0x61C8864680B583EBLL;
      unint64_t v11 = 0xBF58476D1CE4E5B9 * ((v9 - 0x61C8864680B583EBLL) ^ ((unint64_t)(v9 - 0x61C8864680B583EBLL) >> 30));
      unint64_t v12 = (0x94D049BB133111EBLL * (v11 ^ (v11 >> 27))) ^ ((0x94D049BB133111EBLL * (v11 ^ (v11 >> 27))) >> 31);
      if (0x20000000000001 * v12 >= 0x1FFFFFFFFFF801)
      {
        unint64_t v16 = (v12 * (unsigned __int128)0x20000000000001uLL) >> 64;
      }
      else
      {
        unint64_t v13 = v9 + 0x3C6EF372FE94F82ALL;
        do
        {
          v10 -= 0x61C8864680B583EBLL;
          unint64_t v14 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) >> 27));
          unint64_t v15 = v14 ^ (v14 >> 31);
          v13 -= 0x61C8864680B583EBLL;
        }
        while (0x20000000000001 * v15 < 0x1FFFFFFFFFF801);
        unint64_t v16 = (v15 * (unsigned __int128)0x20000000000001uLL) >> 64;
      }
      uint64_t v9 = v10;
      a2.n128_f64[0] = v3 * ((double)v16 * 1.11022302e-16) + v6;
      if (v16 == 0x20000000000000) {
        a2.n128_f64[0] = a3;
      }
      uint64_t result = v4(a2);
      if ((~v17 & 0x7FF0000000000000) != 0 && __OFADD__(v7++, 1)) {
        break;
      }
      if (++v8 == 100) {
        return result;
      }
    }
    __break(1u);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_21F96BAD0(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    sub_21F76CFE0(0, v1, 0);
    uint64_t v2 = v9;
    uint64_t v4 = (long double *)(a1 + 32);
    do
    {
      long double v5 = log(*v4);
      unint64_t v7 = *(void *)(v9 + 16);
      unint64_t v6 = *(void *)(v9 + 24);
      if (v7 >= v6 >> 1) {
        sub_21F76CFE0((char *)(v6 > 1), v7 + 1, 1);
      }
      *(void *)(v9 + 16) = v7 + 1;
      *(long double *)(v9 + 8 * v7 + 32) = v5;
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_21F96BBA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = sub_21F7F5F88(v3);
  swift_bridgeObjectRelease();
  double v5 = COERCE_DOUBLE(sub_21F96BCC0(v4));
  double v7 = v6;
  char v9 = v8;
  swift_bridgeObjectRelease();
  if (v9)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    double v10 = v5;
    double v11 = v7;
    double v12 = COERCE_DOUBLE(sub_21F96BCC0(a2));
    double v14 = v13;
    if (v15)
    {
      double v14 = v7;
      double v12 = v5;
    }
    uint64_t v16 = *(void *)(a2 + 16);
    double v17 = v14;
    double v18 = v12;
    if (v16)
    {
      double v18 = *(double *)(a2 + 32);
      double v17 = *(double *)(a2 + 32 + 8 * v16 - 8);
    }
    if (v12 <= v5) {
      double v10 = v12;
    }
    if (v14 > v7) {
      double v11 = v14;
    }
    sub_21F76CA40(&qword_26AD4A478);
    uint64_t v19 = swift_allocObject();
    a2 = v19;
    *(_OWORD *)(v19 + 16) = xmmword_21FA28820;
    if (v18 >= v17)
    {
      *(double *)(v19 + 32) = v11;
      *(double *)(v19 + 40) = v10;
    }
    else
    {
      *(double *)(v19 + 32) = v10;
      *(double *)(v19 + 40) = v11;
    }
  }
  return a2;
}

uint64_t sub_21F96BCC0(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result + 32;
  double v3 = *(double *)(result + 32);
  if (v1 == 1) {
    return *(void *)(result + 32);
  }
  double v4 = *(double *)(result + 40);
  if (v4 >= v3) {
    double v5 = *(double *)(result + 40);
  }
  else {
    double v5 = *(double *)(result + 32);
  }
  if (v4 < v3) {
    double v3 = *(double *)(result + 40);
  }
  if (v1 == 2) {
    return *(void *)&v3;
  }
  unint64_t v6 = 2;
  double v7 = v3;
  double v8 = v5;
  while (v6 < v1)
  {
    double v10 = *(double *)(v2 + 8 * v6);
    unint64_t v11 = *(void *)(result + 16);
    double v12 = v10;
    if (v6 + 1 != v1)
    {
      if (v6 + 1 >= v1) {
        goto LABEL_28;
      }
      double v12 = *(double *)(v2 + 8 * (v6 + 1));
      unint64_t v11 = v6 + 2;
    }
    if (v12 >= v10) {
      double v9 = v12;
    }
    else {
      double v9 = *(double *)(v2 + 8 * v6);
    }
    if (v12 < v10) {
      double v10 = v12;
    }
    if (v10 < v7)
    {
      double v3 = v10;
      double v7 = v10;
    }
    if (v9 >= v8) {
      double v8 = v9;
    }
    unint64_t v6 = v11;
    if (v11 == v1) {
      return *(void *)&v3;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_21F96BD94(uint64_t a1, char a2, double (*a3)(uint64_t), double a4, uint64_t a5, uint64_t *a6)
{
  sub_21F96CAE0(a1 + 160, (uint64_t)v27);
  uint64_t result = sub_21F96CAE0((uint64_t)v27, (uint64_t)&v28);
  LOBYTE(v12) = v28;
  if (v28 != 6)
  {
    if (a2)
    {
      if (a2 != 1)
      {
        uint64_t result = sub_21FA266E0();
        __break(1u);
        return result;
      }
      int v12 = HIBYTE(v28);
    }
    if (v12 == 3)
    {
      double v13 = a3(a1);
      double v15 = v14;
      double v17 = v16;
      uint64_t v18 = *a6;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *a6 = v18;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_21F7EAEB4(0, *(void *)(v18 + 16) + 1, 1, (char *)v18);
        uint64_t v18 = result;
        *a6 = result;
      }
      unint64_t v20 = *(void *)(v18 + 16);
      unint64_t v19 = *(void *)(v18 + 24);
      unint64_t v21 = v20 + 1;
      if (v20 >= v19 >> 1)
      {
        uint64_t result = (uint64_t)sub_21F7EAEB4((char *)(v19 > 1), v20 + 1, 1, (char *)v18);
        uint64_t v18 = result;
      }
      double v22 = v13 / a4;
      *(void *)(v18 + 16) = v21;
      unint64_t v23 = v18 + 16 * v20;
      *(double *)(v23 + 32) = v22;
      *(double *)(v23 + 40) = -(v17 * v15);
      *a6 = v18;
      unint64_t v24 = *(void *)(v18 + 24);
      int64_t v25 = v20 + 2;
      if (v25 > (uint64_t)(v24 >> 1))
      {
        uint64_t result = (uint64_t)sub_21F7EAEB4((char *)(v24 > 1), v25, 1, (char *)v18);
        uint64_t v18 = result;
      }
      *(void *)(v18 + 16) = v25;
      uint64_t v26 = v18 + 16 * v21;
      *(double *)(v26 + 32) = v22;
      *(double *)(v26 + 40) = v15 * (1.0 - v17);
      *a6 = v18;
    }
  }
  return result;
}

uint64_t sub_21F96BF68(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (v2)
  {
    if (v3 && sub_21F7D3F18(v2, v3)) {
      return 1;
    }
  }
  else if (!v3)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_21F96BFA8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, double a6, double a7)
{
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7 || (a3 & 1) != 0 || (a5 & 1) != 0) {
    return 0;
  }
  double v10 = *(double *)(a1 + 32);
  double v11 = *(double *)(a1 + 32 + 8 * v7 - 8);
  if (qword_26AD46270 != -1)
  {
    uint64_t v22 = a4;
    uint64_t v23 = a2;
    swift_once();
    a4 = v22;
    a2 = v23;
  }
  if (*(double *)&qword_26AD52218 >= a6 && *(double *)&qword_26AD52218 >= a7) {
    return 0;
  }
  double v13 = *(double *)&a4 - *(double *)&a2;
  if (*(double *)&a4 - *(double *)&a2 > 1.0)
  {
    double v14 = fmin(v13 * 0.99 / (a6 + a7), 1.0);
    double v15 = (v11 - v10) / (v13 - (a6 + a7) * v14);
    sub_21F76CA40(&qword_26AD4A478);
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_21FA28820;
    double v17 = v10 - v14 * a6 * v15;
    double v18 = v11 + v14 * a7 * v15;
LABEL_15:
    *(double *)(result + 32) = v17;
    *(double *)(result + 40) = v18;
    return result;
  }
  double v19 = *(double *)&a2 - *(double *)&a4;
  if (*(double *)&a2 - *(double *)&a4 > 1.0)
  {
    double v20 = fmin(v19 * 0.99 / (a6 + a7), 1.0);
    double v21 = (v10 - v11) / (v19 - (a6 + a7) * v20);
    sub_21F76CA40(&qword_26AD4A478);
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_21FA28820;
    double v17 = v10 + v20 * a7 * v21;
    double v18 = v11 - v20 * a6 * v21;
    goto LABEL_15;
  }
  return 0;
}

uint64_t sub_21F96C14C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, double a8, double a9)
{
  char v14 = a3 & 1;
  char v15 = a5 & 1;
  if (a7)
  {
    if (a7 != 1)
    {
      uint64_t v34 = 0;
      switch(a6)
      {
        case 2:
          uint64_t v52 = sub_21F96BAD0(a1);
          uint64_t v53 = sub_21F96BFA8(v52, a2, v14, a4, v15, a8, a9);
          swift_bridgeObjectRelease();
          if (!v53) {
            return 0;
          }
          int64_t v54 = *(void *)(v53 + 16);
          if (!v54) {
            goto LABEL_42;
          }
          uint64_t v61 = MEMORY[0x263F8EE78];
          swift_bridgeObjectRetain();
          sub_21F76CFE0(0, v54, 0);
          uint64_t v55 = 0;
          uint64_t v34 = v61;
          unint64_t v56 = *(void *)(v61 + 16);
          do
          {
            long double v57 = exp(*(long double *)(v53 + 8 * v55 + 32));
            unint64_t v58 = *(void *)(v61 + 24);
            if (v56 >= v58 >> 1) {
              sub_21F76CFE0((char *)(v58 > 1), v56 + 1, 1);
            }
            ++v55;
            *(void *)(v61 + 16) = v56 + 1;
            *(long double *)(v61 + 8 * v56++ + 32) = v57;
          }
          while (v54 != v55);
          break;
        case 4:
          return v34;
        default:
          char v35 = a3 & 1;
          char v36 = a5 & 1;
          return sub_21F96BFA8(a1, a2, v35, a4, v36, a8, a9);
      }
      goto LABEL_50;
    }
    int64_t v17 = *(void *)(a1 + 16);
    uint64_t v18 = MEMORY[0x263F8EE78];
    if (v17)
    {
      uint64_t v59 = MEMORY[0x263F8EE78];
      sub_21F76CFE0(0, v17, 0);
      uint64_t v19 = v59;
      double v20 = (double *)(a1 + 32);
      do
      {
        double v21 = *v20 * *(double *)&a6;
        if ((*(void *)v20 & 0x8000000000000000) != 0) {
          double v22 = -log(1.0 - v21);
        }
        else {
          double v22 = log(v21 + 1.0);
        }
        unint64_t v24 = *(void *)(v59 + 16);
        unint64_t v23 = *(void *)(v59 + 24);
        if (v24 >= v23 >> 1) {
          sub_21F76CFE0((char *)(v23 > 1), v24 + 1, 1);
        }
        *(void *)(v59 + 16) = v24 + 1;
        *(double *)(v59 + 8 * v24 + 32) = v22;
        ++v20;
        --v17;
      }
      while (v17);
      uint64_t v18 = MEMORY[0x263F8EE78];
    }
    else
    {
      uint64_t v19 = MEMORY[0x263F8EE78];
    }
    uint64_t v38 = sub_21F96BFA8(v19, a2, v14, a4, v15, a8, a9);
    swift_bridgeObjectRelease();
    if (v38)
    {
      int64_t v39 = *(void *)(v38 + 16);
      if (v39)
      {
        swift_bridgeObjectRetain();
        sub_21F76CFE0(0, v39, 0);
        uint64_t v40 = 0;
        uint64_t v34 = v18;
        do
        {
          long double v41 = *(double *)(v38 + 8 * v40 + 32);
          if ((*(void *)&v41 & 0x8000000000000000) != 0) {
            double v42 = 1.0 - exp(-v41);
          }
          else {
            double v42 = exp(v41) + -1.0;
          }
          unint64_t v44 = *(void *)(v18 + 16);
          unint64_t v43 = *(void *)(v18 + 24);
          if (v44 >= v43 >> 1) {
            sub_21F76CFE0((char *)(v43 > 1), v44 + 1, 1);
          }
          ++v40;
          *(void *)(v18 + 16) = v44 + 1;
          *(double *)(v18 + 8 * v44 + 32) = v42 / *(double *)&a6;
        }
        while (v39 != v40);
LABEL_50:
        swift_bridgeObjectRelease_n();
        return v34;
      }
      goto LABEL_42;
    }
  }
  else
  {
    int64_t v26 = *(void *)(a1 + 16);
    uint64_t v27 = MEMORY[0x263F8EE78];
    if (v26)
    {
      uint64_t v60 = MEMORY[0x263F8EE78];
      sub_21F76CFE0(0, v26, 0);
      uint64_t v28 = v60;
      BOOL v29 = (double *)(a1 + 32);
      do
      {
        long double v30 = *v29;
        unint64_t v32 = *(void *)(v60 + 16);
        unint64_t v31 = *(void *)(v60 + 24);
        if (v32 >= v31 >> 1) {
          sub_21F76CFE0((char *)(v31 > 1), v32 + 1, 1);
        }
        long double v33 = pow(v30, *(long double *)&a6);
        *(void *)(v60 + 16) = v32 + 1;
        *(long double *)(v60 + 8 * v32 + 32) = v33;
        ++v29;
        --v26;
      }
      while (v26);
      uint64_t v27 = MEMORY[0x263F8EE78];
    }
    else
    {
      uint64_t v28 = MEMORY[0x263F8EE78];
    }
    uint64_t v45 = sub_21F96BFA8(v28, a2, v14, a4, v15, a8, a9);
    swift_bridgeObjectRelease();
    if (v45)
    {
      int64_t v46 = *(void *)(v45 + 16);
      if (v46)
      {
        swift_bridgeObjectRetain();
        sub_21F76CFE0(0, v46, 0);
        uint64_t v47 = 0;
        uint64_t v34 = v27;
        unint64_t v48 = *(void *)(v27 + 16);
        do
        {
          long double v49 = *(double *)(v45 + 8 * v47 + 32);
          unint64_t v50 = *(void *)(v27 + 24);
          if (v48 >= v50 >> 1) {
            sub_21F76CFE0((char *)(v50 > 1), v48 + 1, 1);
          }
          ++v47;
          long double v51 = pow(v49, 1.0 / *(double *)&a6);
          *(void *)(v27 + 16) = v48 + 1;
          *(long double *)(v27 + 8 * v48++ + 32) = v51;
        }
        while (v46 != v47);
        goto LABEL_50;
      }
LABEL_42:
      swift_bridgeObjectRelease();
      return MEMORY[0x263F8EE78];
    }
  }
  return 0;
}

uint64_t sub_21F96C6CC(uint64_t result, uint64_t a2, char a3, uint64_t a4, double a5)
{
  uint64_t v9 = result;
  if (qword_26AD46268 != -1) {
    goto LABEL_46;
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (!v10)
  {
LABEL_47:
    double v27 = 0.0;
    double v23 = fmin(a5, 0.0);
LABEL_48:
    if (v27 <= 0.0) {
      double v27 = 0.0;
    }
    if (a5 - v23 >= v27) {
      double v33 = v27;
    }
    else {
      double v33 = a5 - v23;
    }
    if ((*(unsigned char *)(v9 + 64) & 1) != 0 || (uint64_t v34 = *(void *)(v9 + 56), (v35 = *(void *)(v34 + 16)) == 0))
    {
      uint64_t v38 = 0;
      uint64_t v37 = 0;
      char v36 = 1;
    }
    else
    {
      char v36 = 0;
      uint64_t v37 = *(void *)(v34 + 32);
      uint64_t v38 = *(void *)(v34 + 32 + 8 * v35 - 8);
    }
    uint64_t v39 = *(void *)(v9 + 48);
    swift_bridgeObjectRetain();
    uint64_t v40 = swift_bridgeObjectRetain();
    uint64_t v41 = sub_21F96C14C(v40, v37, v36, v38, v36, a2, a3, v33, v23);
    swift_bridgeObjectRelease();
    if (v41)
    {
      BOOL v42 = sub_21F7D3F18(v41, v39);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_21F96CA78(v9);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      if (v42)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_21F96CA78(v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
    }
    return v41;
  }
  while (1)
  {
    uint64_t v11 = a4 + 32;
    double v12 = *(double *)(a4 + 32);
    double v13 = (double *)(a4 + 40);
    if (*(double *)&qword_26AD52210 >= v12)
    {
      char v15 = (double *)(a4 + 40);
      unint64_t v14 = 1;
      while (v10 != v14)
      {
        ++v14;
        double v16 = v15[1];
        v15 += 2;
        if (*(double *)&qword_26AD52210 < v16) {
          goto LABEL_8;
        }
      }
      double v17 = 0.0;
    }
    else
    {
      unint64_t v14 = 1;
      char v15 = (double *)(a4 + 40);
      double v16 = *(double *)(a4 + 32);
LABEL_8:
      double v17 = (*v15 + (v16 + -1.0) * a5) / v16;
      if (v14 != v10)
      {
        while (1)
        {
          if (v14 >= v10)
          {
            __break(1u);
            goto LABEL_63;
          }
          double v20 = *(double *)(v11 + 16 * v14);
          if (*(double *)&qword_26AD52210 >= v20) {
            break;
          }
LABEL_10:
          unint64_t v18 = v14 + 1;
          double v19 = (*(double *)(v11 + 16 * v14 + 8) + (v20 + -1.0) * a5) / v20;
          if (v17 < v19) {
            double v17 = v19;
          }
          ++v14;
          if (v18 == v10) {
            goto LABEL_20;
          }
        }
        double v21 = (double *)(a4 + 48 + 16 * v14);
        while (v10 - 1 != v14)
        {
          double v22 = *v21;
          v21 += 2;
          double v20 = v22;
          ++v14;
          if (*(double *)&qword_26AD52210 < v22) {
            goto LABEL_10;
          }
        }
      }
    }
LABEL_20:
    if (v17 <= 0.0) {
      double v17 = 0.0;
    }
    double v23 = v17 <= a5 ? v17 : a5;
    double v24 = 1.0 - *(double *)&qword_26AD52210;
    if (v12 < 1.0 - *(double *)&qword_26AD52210) {
      break;
    }
    double v13 = (double *)(a4 + 40);
    uint64_t v26 = 1;
    while (1)
    {
      if (v10 == v26)
      {
        double v27 = 0.0;
        goto LABEL_48;
      }
      unint64_t v25 = v26 + 1;
      if (__OFADD__(v26, 1)) {
        break;
      }
      double v12 = v13[1];
      v13 += 2;
      ++v26;
      if (v12 < v24) {
        goto LABEL_31;
      }
    }
LABEL_45:
    __break(1u);
LABEL_46:
    uint64_t result = swift_once();
    unint64_t v10 = *(void *)(a4 + 16);
    if (!v10) {
      goto LABEL_47;
    }
  }
  unint64_t v25 = 1;
LABEL_31:
  double v27 = ((v23 - a5) * v12 - *v13) / (1.0 - v12);
  if (v25 == v10) {
    goto LABEL_48;
  }
  while (v25 < v10)
  {
    double v28 = *(double *)(v11 + 16 * v25);
    if (v28 >= v24)
    {
      long double v30 = (double *)(a4 + 48 + 16 * v25);
      while (v10 - 1 != v25)
      {
        unint64_t v29 = v25 + 2;
        if (__OFADD__(v25 + 1, 1))
        {
          __break(1u);
          goto LABEL_45;
        }
        double v31 = *v30;
        v30 += 2;
        double v28 = v31;
        ++v25;
        if (v31 < v24) {
          goto LABEL_39;
        }
      }
      goto LABEL_48;
    }
    unint64_t v29 = v25 + 1;
LABEL_39:
    double v32 = ((v23 - a5) * v28 - *(double *)(v11 + 16 * v25 + 8)) / (1.0 - v28);
    if (v27 < v32) {
      double v27 = v32;
    }
    unint64_t v25 = v29;
    if (v29 == v10) {
      goto LABEL_48;
    }
  }
LABEL_63:
  __break(1u);
  return result;
}

uint64_t sub_21F96CA78(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 56);
  unsigned __int8 v4 = *(unsigned char *)(a1 + 64);
  swift_release();
  sub_21F7757E4(v2);
  swift_bridgeObjectRelease();
  sub_21F76D558(v3, v4);
  return a1;
}

uint64_t sub_21F96CAE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21F76CA40(&qword_26AD43F88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21F96CB48()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21F96CBD8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = ~v8;
  uint64_t v10 = v7 + v8;
  unint64_t v11 = ((v7 + v8) & ~v8) + v7;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    char v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v15(a1, a2, v5);
    v15((uint64_t *)(((unint64_t)v4 + v10) & v9), (uint64_t *)(((unint64_t)a2 + v10) & v9), v5);
  }
  return v4;
}

unint64_t sub_21F96CCE4(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
  uint64_t v8 = v6 + 16;
  v7(a1, a2, v5);
  v7((*(void *)(v8 + 48) + *(unsigned __int8 *)(v8 + 64) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 64), (*(void *)(v8 + 48) + *(unsigned __int8 *)(v8 + 64) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 64), v5);
  return a1;
}

unint64_t sub_21F96CD78(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24);
  uint64_t v8 = v6 + 24;
  v7(a1, a2, v5);
  v7((*(void *)(v8 + 40) + *(unsigned __int8 *)(v8 + 56) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 56), (*(void *)(v8 + 40) + *(unsigned __int8 *)(v8 + 56) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 56), v5);
  return a1;
}

unint64_t sub_21F96CE0C(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32);
  uint64_t v8 = v6 + 32;
  v7(a1, a2, v5);
  v7((*(void *)(v8 + 32) + *(unsigned __int8 *)(v8 + 48) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 48), (*(void *)(v8 + 32) + *(unsigned __int8 *)(v8 + 48) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 48), v5);
  return a1;
}

unint64_t sub_21F96CEA0(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40);
  uint64_t v8 = v6 + 40;
  v7(a1, a2, v5);
  v7((*(void *)(v8 + 24) + *(unsigned __int8 *)(v8 + 40) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 40), (*(void *)(v8 + 24) + *(unsigned __int8 *)(v8 + 40) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 40), v5);
  return a1;
}

uint64_t sub_21F96CF34(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v8 = ((v6 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v6;
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void sub_21F96D0A0(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x21F96D2C8);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        double v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for Line()
{
  return sub_21F764F08();
}

void *initializeBufferWithCopyOfBuffer for DomainOverride(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for AnyPrimitivePlottableArray()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for DomainOverride(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for DomainOverride(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DomainOverride(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DomainOverride(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DomainOverride()
{
  return &type metadata for DomainOverride;
}

unint64_t sub_21F96D470(char a1)
{
  unint64_t result = 0xD00000000000007ALL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD00000000000006ALL;
      break;
    case 2:
      unint64_t result = 0xD00000000000004FLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000046;
      break;
    case 4:
      unint64_t result = 0xD00000000000007BLL;
      break;
    case 5:
      unint64_t result = 0xD000000000000030;
      break;
    case 6:
      unint64_t result = 0xD000000000000047;
      break;
    case 7:
      unint64_t result = 0xD00000000000004BLL;
      break;
    case 8:
      unint64_t result = 0xD000000000000049;
      break;
    case 9:
      unint64_t result = 0xD00000000000005CLL;
      break;
    case 10:
      unint64_t result = 0xD0000000000000D8;
      break;
    case 11:
      unint64_t result = 0xD000000000000044;
      break;
    default:
      return result;
  }
  return result;
}

void sub_21F96D5AC()
{
  qword_267EF2F70 = MEMORY[0x263F8EE88];
}

uint64_t sub_21F96D5C0(uint64_t a1)
{
  if (qword_267EE6E48 != -1) {
    swift_once();
  }
  swift_beginAccess();
  char v2 = sub_21F7D51E8(&v5, a1);
  uint64_t result = swift_endAccess();
  if (v2)
  {
    sub_21F76CA40(qword_267EE80E8);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_21FA28550;
    sub_21F96D470(a1);
    sub_21FA25D40();
    swift_bridgeObjectRelease();
    *(void *)(v4 + 56) = MEMORY[0x263F8D310];
    *(void *)(v4 + 32) = 0x203A737472616843;
    *(void *)(v4 + 40) = 0xE800000000000000;
    sub_21FA269E0();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ExternalWarning(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ExternalWarning(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x21F96D844);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExternalWarning()
{
  return &type metadata for ExternalWarning;
}

unint64_t sub_21F96D880()
{
  unint64_t result = qword_267EE9560[0];
  if (!qword_267EE9560[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_267EE9560);
  }
  return result;
}

uint64_t static BuilderTuple<each A>._makeChart3DContent(content:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v77 = a2;
  uint64_t v75 = a1;
  uint64_t v73 = a6;
  unint64_t v9 = a4 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v10 = type metadata accessor for _Chart3DContentOutputs();
  uint64_t v66 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10 - 8);
  unsigned int v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_21FA24F30();
  uint64_t v79 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  char v78 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v72 = (char *)&v65 - v16;
  uint64_t v70 = type metadata accessor for MultiPreferenceCombinerVisitor();
  MEMORY[0x270FA5388](v70);
  uint64_t v71 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for _Chart3DContentInputs();
  MEMORY[0x270FA5388](v69);
  double v19 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for BuilderTuple();
  uint64_t v74 = sub_21FA24530();
  uint64_t v20 = *(void *)(v74 - 8);
  MEMORY[0x270FA5388](v74);
  double v22 = (char *)&v65 - v21;
  uint64_t v76 = a4;
  uint64_t v23 = a5;
  ListVMa_1 = (int *)_s8MakeListVMa_1();
  uint64_t v68 = *((void *)ListVMa_1 - 1);
  __n128 v25 = MEMORY[0x270FA5388](ListVMa_1);
  uint64_t v81 = (uint64_t)&v65 - v26;
  BOOL v67 = v12;
  if (a3 == 1)
  {
    unint64_t v27 = v9;
  }
  else
  {
    MEMORY[0x270FA5388](v24);
    unint64_t v29 = (char *)&v65 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a3)
    {
      unint64_t v30 = 0;
      if (a3 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v29[-v9] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v30 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      double v31 = (long long *)(v9 + 16);
      double v32 = v29 + 16;
      unint64_t v33 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v34 = *v31;
        *(v32 - 1) = *(v31 - 1);
        *double v32 = v34;
        v31 += 2;
        v32 += 2;
        v33 -= 4;
      }
      while (v33);
      if (v30 != a3)
      {
LABEL_9:
        unint64_t v35 = a3 - v30;
        uint64_t v36 = 8 * v30;
        uint64_t v37 = &v29[8 * v30];
        uint64_t v38 = (uint64_t *)(v9 + v36);
        do
        {
          uint64_t v39 = *v38++;
          *(void *)uint64_t v37 = v39;
          v37 += 8;
          --v35;
        }
        while (v35);
      }
    }
    unint64_t v27 = v9;
    swift_getTupleTypeMetadata();
  }
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v20 + 16))(v22, v75, v74, v25);
  sub_21F7C8580(v77, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for _Chart3DContentInputs);
  sub_21F96E01C((uint64_t)v22, (uint64_t)v19, 0, MEMORY[0x263F8EE78], v81);
  if (a3)
  {
    unint64_t v40 = a3;
    uint64_t v41 = 0;
    uint64_t v42 = v81;
    uint64_t v43 = ListVMa_1[12];
    unint64_t v44 = v23 & 0xFFFFFFFFFFFFFFFELL;
    while (1)
    {
      uint64_t v45 = *(void *)(v27 + 8 * v41);
      uint64_t v46 = *(void *)(v44 + 8 * v41);
      *(void *)(v42 + v43) = AGTupleElementOffset();
      uint64_t result = sub_21F96E10C(v45, ListVMa_1, v45, v46);
      if (v41 == 0x7FFFFFFFFFFFFFFFLL) {
        break;
      }
      if (v40 == ++v41) {
        goto LABEL_16;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_16:
    uint64_t v48 = *(void *)(v81 + ListVMa_1[13]);
    int64_t v49 = *(void *)(v48 + 16);
    uint64_t v50 = MEMORY[0x263F8EE78];
    uint64_t v51 = (uint64_t)v67;
    if (v49)
    {
      uint64_t v82 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      sub_21F7A23B0(0, v49, 0);
      uint64_t v52 = *(unsigned __int8 *)(v66 + 80);
      uint64_t v76 = v48;
      uint64_t v53 = v48 + ((v52 + 32) & ~v52);
      uint64_t v54 = *(void *)(v66 + 72);
      uint64_t v55 = v78;
      unint64_t v56 = (void (**)(char *, uint64_t, uint64_t))(v79 + 16);
      uint64_t v57 = v13;
      do
      {
        sub_21F7C8580(v53, v51, (uint64_t (*)(void))type metadata accessor for _Chart3DContentOutputs);
        (*v56)(v55, v51, v13);
        sub_21F96F5AC(v51, (uint64_t (*)(void))type metadata accessor for _Chart3DContentOutputs);
        uint64_t v50 = v82;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_21F7A23B0(0, *(void *)(v50 + 16) + 1, 1);
          uint64_t v50 = v82;
        }
        unint64_t v59 = *(void *)(v50 + 16);
        unint64_t v58 = *(void *)(v50 + 24);
        if (v59 >= v58 >> 1)
        {
          sub_21F7A23B0(v58 > 1, v59 + 1, 1);
          uint64_t v50 = v82;
        }
        *(void *)(v50 + 16) = v59 + 1;
        uint64_t v55 = v78;
        unint64_t v60 = v50
            + ((*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80))
            + *(void *)(v79 + 72) * v59;
        uint64_t v13 = v57;
        (*(void (**)(unint64_t, char *, uint64_t))(v79 + 32))(v60, v78, v57);
        uint64_t v82 = v50;
        v53 += v54;
        --v49;
      }
      while (v49);
      swift_bridgeObjectRelease();
    }
    uint64_t v61 = v71;
    unint64_t v62 = &v71[*(int *)(v70 + 20)];
    _s6Charts11BuilderPairVA2A12ChartContentRzAaDR_rlE05_makedE07content6inputsAA01_dE7OutputsV7SwiftUI11_GraphValueVyACyxq_GG_AA01_dE6InputsVtFZ_0();
    *uint64_t v61 = v50;
    sub_21F7E6488();
    sub_21FA24EE0();
    (*(void (**)(uint64_t, int *))(v68 + 8))(v81, ListVMa_1);
    uint64_t v63 = v79;
    unint64_t v64 = v72;
    (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v72, v62, v13);
    sub_21F96F5AC((uint64_t)v61, (uint64_t (*)(void))type metadata accessor for MultiPreferenceCombinerVisitor);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v63 + 32))(v73, v64, v13);
  }
  return result;
}

uint64_t _s8MakeListVMa_1()
{
  return sub_21F764F08();
}

uint64_t sub_21F96E01C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  type metadata accessor for BuilderTuple();
  uint64_t v10 = sub_21FA24530();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(a5, a1, v10);
  ListVMa_1 = (int *)_s8MakeListVMa_1();
  uint64_t result = sub_21F96F60C(a2, a5 + ListVMa_1[11], (uint64_t (*)(void))type metadata accessor for _Chart3DContentInputs);
  *(void *)(a5 + ListVMa_1[12]) = a3;
  *(void *)(a5 + ListVMa_1[13]) = a4;
  return result;
}

uint64_t sub_21F96E10C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v41 = a4;
  uint64_t v39 = a3;
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v42 = sub_21FA24530();
  uint64_t v40 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v38 = (uint64_t)&v36 - v6;
  uint64_t v7 = type metadata accessor for _Chart3DContentOutputs();
  uint64_t v44 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7 - 8);
  unint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v37 = (char *)&v36 - v11;
  uint64_t v12 = type metadata accessor for _Chart3DContentInputs();
  uint64_t v13 = v12 - 8;
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (uint64_t)v4 + a2[11];
  sub_21F7C8580(v16, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for _Chart3DContentInputs);
  int v17 = *(_DWORD *)(v16 + *(int *)(v13 + 36));
  uint64_t v36 = a2[12];
  uint64_t v18 = *(void *)((char *)v4 + v36);
  sub_21F76CA40(&qword_267EE77A0);
  uint64_t v19 = swift_allocObject();
  uint64_t v43 = &v36;
  *(_OWORD *)(v19 + 16) = xmmword_21FA28550;
  *(void *)(v19 + 32) = -1;
  *(unsigned char *)(v19 + 72) = 0;
  int v46 = v17;
  uint64_t v20 = v4;
  uint64_t v47 = v18;
  uint64_t v48 = v19;
  uint64_t v21 = (uint64_t)v9;
  uint64_t v22 = _s20ChildContainerValuesVMa_1();
  uint64_t v50 = v22;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v23 = sub_21F76CA40(&qword_267EE7708);
  sub_21F74C95C((uint64_t)&v46, (uint64_t)sub_21F74D654, (uint64_t)v49, v22, MEMORY[0x263F8E628], v23, MEMORY[0x263F8E658], v24);
  swift_bridgeObjectRelease();
  uint64_t v25 = *(int *)(v13 + 36);
  uint64_t v26 = (uint64_t)v15;
  *(_DWORD *)&v15[v25] = v45;
  uint64_t v27 = (uint64_t)v37;
  type metadata accessor for BuilderTuple();
  sub_21F74D6C4(v4);
  uint64_t v28 = v39;
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  uint64_t v30 = v38;
  sub_21F74CA38(OffsetAttribute2, v38);
  (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v30, v15, v28);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v30, v42);
  sub_21F7C8580(v27, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for _Chart3DContentOutputs);
  uint64_t v31 = a2[13];
  double v32 = *(void **)((char *)v20 + v31);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    double v32 = (void *)sub_21F7E9B58(0, v32[2] + 1, 1, v32);
  }
  unint64_t v34 = v32[2];
  unint64_t v33 = v32[3];
  if (v34 >= v33 >> 1) {
    double v32 = (void *)sub_21F7E9B58(v33 > 1, v34 + 1, 1, v32);
  }
  v32[2] = v34 + 1;
  sub_21F96F60C(v21, (uint64_t)v32+ ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80))+ *(void *)(v44 + 72) * v34, (uint64_t (*)(void))type metadata accessor for _Chart3DContentOutputs);
  *(void *)((char *)v20 + v31) = v32;
  sub_21F96F5AC(v27, (uint64_t (*)(void))type metadata accessor for _Chart3DContentOutputs);
  return sub_21F96F5AC(v26, (uint64_t (*)(void))type metadata accessor for _Chart3DContentInputs);
}

uint64_t sub_21F96E5B0@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_21F76CA40(&qword_267EE77A8);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v16 - v10;
  sub_21F7E5A70(a1, (uint64_t)v16 - v10);
  uint64_t v12 = sub_21FA24F70();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_21FA24F60();
    sub_21F7EB2C4((uint64_t)v11);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a3, v11, v12);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v8, a3, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v8, 0, 1, v12);
  v17[0] = a2;
  char v18 = 0;
  uint64_t v14 = sub_21F996E58((uint64_t)v8, (uint64_t)v17);
  sub_21F7DF2B4((uint64_t)v17);
  sub_21F7EB2C4((uint64_t)v8);
  v16[1] = v14;
  sub_21F8C0744();
  return sub_21FA24F90();
}

uint64_t sub_21F96E7B4@<X0>(uint64_t a1@<X8>)
{
  return sub_21F96E5B0(*(_DWORD *)v1, *(void *)(v1 + 8), a1);
}

void sub_21F96E7CC()
{
}

uint64_t sub_21F96E818@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static BuilderTuple<each A>._makeChart3DContent(content:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8), a5);
}

uint64_t sub_21F96E828(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21F96E878()
{
  type metadata accessor for BuilderTuple();
  uint64_t result = sub_21FA24530();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for _Chart3DContentInputs();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_21F96E96C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    type metadata accessor for BuilderTuple();
    uint64_t v7 = sub_21FA24530();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[11];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_21FA24B80();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = (int *)type metadata accessor for _Chart3DContentInputs();
    uint64_t v13 = v12[5];
    uint64_t v14 = &v9[v13];
    uint64_t v15 = &v10[v13];
    uint64_t v16 = sub_21FA24540();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    uint64_t v17 = v12[6];
    char v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    uint64_t v20 = sub_21FA24EF0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    *(_DWORD *)&v9[v12[7]] = *(_DWORD *)&v10[v12[7]];
    uint64_t v21 = a3[13];
    *(uint64_t *)((char *)a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    *(uint64_t *)((char *)a1 + v21) = *(uint64_t *)((char *)a2 + v21);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_21F96EB54(uint64_t a1, uint64_t a2)
{
  type metadata accessor for BuilderTuple();
  uint64_t v4 = sub_21FA24530();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 44);
  uint64_t v6 = sub_21FA24B80();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = type metadata accessor for _Chart3DContentInputs();
  uint64_t v8 = v5 + *(int *)(v7 + 20);
  uint64_t v9 = sub_21FA24540();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v5 + *(int *)(v7 + 24);
  uint64_t v11 = sub_21FA24EF0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);

  return swift_bridgeObjectRelease();
}

uint64_t sub_21F96ECB8(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for BuilderTuple();
  uint64_t v6 = sub_21FA24530();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[11];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_21FA24B80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for _Chart3DContentInputs();
  uint64_t v12 = v11[5];
  uint64_t v13 = v8 + v12;
  uint64_t v14 = v9 + v12;
  uint64_t v15 = sub_21FA24540();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = v11[6];
  uint64_t v17 = v8 + v16;
  uint64_t v18 = v9 + v16;
  uint64_t v19 = sub_21FA24EF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  *(_DWORD *)(v8 + v11[7]) = *(_DWORD *)(v9 + v11[7]);
  uint64_t v20 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(void *)(a1 + v20) = *(void *)(a2 + v20);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_21F96EE50(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for BuilderTuple();
  uint64_t v6 = sub_21FA24530();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[11];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_21FA24B80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for _Chart3DContentInputs();
  uint64_t v12 = v11[5];
  uint64_t v13 = v8 + v12;
  uint64_t v14 = v9 + v12;
  uint64_t v15 = sub_21FA24540();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  uint64_t v16 = v11[6];
  uint64_t v17 = v8 + v16;
  uint64_t v18 = v9 + v16;
  uint64_t v19 = sub_21FA24EF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 24))(v17, v18, v19);
  *(_DWORD *)(v8 + v11[7]) = *(_DWORD *)(v9 + v11[7]);
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21F96EFF8(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for BuilderTuple();
  uint64_t v6 = sub_21FA24530();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[11];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_21FA24B80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for _Chart3DContentInputs();
  uint64_t v12 = v11[5];
  uint64_t v13 = v8 + v12;
  uint64_t v14 = v9 + v12;
  uint64_t v15 = sub_21FA24540();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  uint64_t v16 = v11[6];
  uint64_t v17 = v8 + v16;
  uint64_t v18 = v9 + v16;
  uint64_t v19 = sub_21FA24EF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  *(_DWORD *)(v8 + v11[7]) = *(_DWORD *)(v9 + v11[7]);
  uint64_t v20 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(void *)(a1 + v20) = *(void *)(a2 + v20);
  return a1;
}

uint64_t sub_21F96F18C(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for BuilderTuple();
  uint64_t v6 = sub_21FA24530();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[11];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_21FA24B80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for _Chart3DContentInputs();
  uint64_t v12 = v11[5];
  uint64_t v13 = v8 + v12;
  uint64_t v14 = v9 + v12;
  uint64_t v15 = sub_21FA24540();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  uint64_t v16 = v11[6];
  uint64_t v17 = v8 + v16;
  uint64_t v18 = v9 + v16;
  uint64_t v19 = sub_21FA24EF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 40))(v17, v18, v19);
  *(_DWORD *)(v8 + v11[7]) = *(_DWORD *)(v9 + v11[7]);
  uint64_t v20 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(void *)(a1 + v20) = *(void *)(a2 + v20);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21F96F328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F96F33C);
}

uint64_t sub_21F96F33C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for BuilderTuple();
  uint64_t v6 = sub_21FA24530();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for _Chart3DContentInputs();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 44);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 52));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_21F96F460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F96F474);
}

uint64_t sub_21F96F474(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for BuilderTuple();
  uint64_t v8 = sub_21FA24530();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for _Chart3DContentInputs();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 52)) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 44);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t _s20ChildContainerValuesVMa_1()
{
  return sub_21F764F08();
}

uint64_t sub_21F96F5AC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_21F96F60C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_21F96F674()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F96F690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_21F971D64();

  return MEMORY[0x270EFF9B8](a1, a2, a3, a4, v8);
}

BOOL sub_21F96F6F4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a2[1] ^ a1[1]) & 1) == 0;
}

uint64_t sub_21F96F720()
{
  sub_21F745C68();

  return sub_21FA24B40();
}

uint64_t View.chartXSelection<A>(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_21F970184(a1, a2, a3, a4, a5, (uint64_t)sub_21F96F940, a6);
}

uint64_t sub_21F96F788()
{
  return sub_21FA24B40();
}

uint64_t sub_21F96F7C8(uint64_t a1)
{
  sub_21F78A384(a1, (uint64_t)v3);
  sub_21F78A384((uint64_t)v3, (uint64_t)&v2);
  sub_21F745C68();
  sub_21FA24B50();
  return sub_21F77C424((uint64_t)v3);
}

uint64_t sub_21F96F82C(uint64_t a1, uint64_t a2)
{
  sub_21FA26340();
  uint64_t v4 = sub_21FA25780();
  __n128 v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v10[-v6];
  (*(void (**)(unsigned char *, uint64_t, __n128))(v8 + 16))(&v10[-v6], a2, v5);
  sub_21FA006FC((uint64_t)v7, (uint64_t)v10);
  uint64_t result = sub_21F799B78((uint64_t)v10, a1, &qword_26AD48428);
  *(unsigned char *)(a1 + 282) = 1;
  return result;
}

uint64_t sub_21F96F940(uint64_t a1)
{
  return sub_21F97043C(a1, (uint64_t (*)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_21F96F82C);
}

uint64_t View.chartXSelection<A>(range:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return sub_21F96FC28(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_26D13C528, (uint64_t)sub_21F96FAA4, a7);
}

uint64_t sub_21F96F978(uint64_t a1, uint64_t a2)
{
  sub_21FA25CC0();
  sub_21FA26340();
  uint64_t v4 = sub_21FA25780();
  __n128 v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v10[-v6];
  (*(void (**)(unsigned char *, uint64_t, __n128))(v8 + 16))(&v10[-v6], a2, v5);
  sub_21FA00838((uint64_t)v7, (uint64_t)v10);
  uint64_t result = sub_21F799B78((uint64_t)v10, a1 + 48, &qword_26AD49C00);
  *(unsigned char *)(a1 + 282) = 1;
  return result;
}

uint64_t sub_21F96FAA4(uint64_t a1)
{
  return sub_21F970084(a1, (uint64_t (*)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_21F96F978);
}

uint64_t View.chartYSelection<A>(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_21F970184(a1, a2, a3, a4, a5, (uint64_t)sub_21F96FBF0, a6);
}

uint64_t sub_21F96FADC(uint64_t a1, uint64_t a2)
{
  sub_21FA26340();
  uint64_t v4 = sub_21FA25780();
  __n128 v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v10[-v6];
  (*(void (**)(unsigned char *, uint64_t, __n128))(v8 + 16))(&v10[-v6], a2, v5);
  sub_21FA006FC((uint64_t)v7, (uint64_t)v10);
  uint64_t result = sub_21F799B78((uint64_t)v10, a1 + 96, &qword_26AD48428);
  *(unsigned char *)(a1 + 282) = 1;
  return result;
}

uint64_t sub_21F96FBF0(uint64_t a1)
{
  return sub_21F97043C(a1, (uint64_t (*)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_21F96FADC);
}

uint64_t View.chartYSelection<A>(range:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return sub_21F96FC28(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_26D13C578, (uint64_t)sub_21F97006C, a7);
}

uint64_t sub_21F96FC28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v25 = a8;
  v22[1] = a7;
  uint64_t v23 = a5;
  uint64_t v24 = a9;
  sub_21FA25CC0();
  sub_21FA26340();
  uint64_t v14 = sub_21FA25780();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)v22 - v16;
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a1, v14);
  unint64_t v18 = (*(unsigned __int8 *)(v15 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v19 = (char *)swift_allocObject();
  *((void *)v19 + 2) = a2;
  *((void *)v19 + 3) = a3;
  uint64_t v20 = v23;
  *((void *)v19 + 4) = a4;
  *((void *)v19 + 5) = v20;
  *((void *)v19 + 6) = a6;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v19[v18], v17, v14);
  sub_21FA25480();
  swift_release();
  return swift_release();
}

uint64_t sub_21F96FDCC(uint64_t a1, uint64_t a2)
{
  sub_21FA25CC0();
  sub_21FA26340();
  uint64_t v4 = sub_21FA25780();
  __n128 v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v10[-v6];
  (*(void (**)(unsigned char *, uint64_t, __n128))(v8 + 16))(&v10[-v6], a2, v5);
  sub_21FA00838((uint64_t)v7, (uint64_t)v10);
  uint64_t result = sub_21F799B78((uint64_t)v10, a1 + 144, &qword_26AD49C00);
  *(unsigned char *)(a1 + 282) = 1;
  return result;
}

uint64_t sub_21F96FEF8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = sub_21FA25CC0();
  sub_21FA26340();
  uint64_t v3 = (int *)(sub_21FA25780() - 8);
  uint64_t v4 = *(unsigned __int8 *)(*(void *)v3 + 80);
  uint64_t v5 = (v4 + 56) & ~v4;
  uint64_t v6 = *(void *)(*(void *)v3 + 64);
  swift_release();
  swift_release();
  uint64_t v7 = v0 + v5 + v3[10];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v7, 1, v2))
  {
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8);
    v8(v7, v1);
    v8(v7 + *(int *)(v2 + 36), v1);
  }

  return MEMORY[0x270FA0238](v0, v5 + v6, v4 | 7);
}

uint64_t sub_21F97006C(uint64_t a1)
{
  return sub_21F970084(a1, (uint64_t (*)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_21F96FDCC);
}

uint64_t sub_21F970084(uint64_t a1, uint64_t (*a2)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = v2[2];
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[4];
  uint64_t v7 = v2[5];
  uint64_t v8 = v2[6];
  sub_21FA25CC0();
  sub_21FA26340();
  uint64_t v9 = *(void *)(sub_21FA25780() - 8);
  uint64_t v10 = (char *)v2 + ((*(unsigned __int8 *)(v9 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));

  return a2(a1, v10, v4, v5, v6, v7, v8);
}

uint64_t View.chartAngleSelection<A>(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_21F970184(a1, a2, a3, a4, a5, (uint64_t)sub_21F970424, a6);
}

uint64_t sub_21F970184@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  v19[2] = a6;
  v19[0] = a5;
  v19[1] = a7;
  sub_21FA26340();
  uint64_t v11 = sub_21FA25780();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v19 - v13;
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  unint64_t v15 = (*(unsigned __int8 *)(v12 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = a2;
  *((void *)v16 + 3) = a3;
  uint64_t v17 = v19[0];
  *((void *)v16 + 4) = a4;
  *((void *)v16 + 5) = v17;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v16[v15], v14, v11);
  sub_21FA25480();
  swift_release();
  return swift_release();
}

uint64_t sub_21F970310(uint64_t a1, uint64_t a2)
{
  sub_21FA26340();
  uint64_t v4 = sub_21FA25780();
  __n128 v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v10[-v6];
  (*(void (**)(unsigned char *, uint64_t, __n128))(v8 + 16))(&v10[-v6], a2, v5);
  sub_21FA006FC((uint64_t)v7, (uint64_t)v10);
  uint64_t result = sub_21F799B78((uint64_t)v10, a1 + 192, &qword_26AD48428);
  *(unsigned char *)(a1 + 282) = 1;
  return result;
}

uint64_t sub_21F970424(uint64_t a1)
{
  return sub_21F97043C(a1, (uint64_t (*)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_21F970310);
}

uint64_t sub_21F97043C(uint64_t a1, uint64_t (*a2)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = v2[2];
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[4];
  uint64_t v7 = v2[5];
  sub_21FA26340();
  uint64_t v8 = *(void *)(sub_21FA25780() - 8);
  uint64_t v9 = (char *)v2 + ((*(unsigned __int8 *)(v8 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));

  return a2(a1, v9, v4, v5, v6, v7);
}

uint64_t sub_21F9704F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_21F971DB8();

  return MEMORY[0x270EFF9B8](a1, a2, a3, a4, v8);
}

uint64_t sub_21F97055C()
{
  return AGCompareValues();
}

uint64_t sub_21F9705C8()
{
  sub_21F745E10();
  sub_21FA24B40();
  return v1;
}

uint64_t View.chartGesture<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  sub_21F779EA4(&qword_267EE9668);
  uint64_t v11 = sub_21FA249D0();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v19 - v13;
  swift_getKeyPath();
  sub_21FA25480();
  swift_release();
  swift_getKeyPath();
  unint64_t v15 = (void *)swift_allocObject();
  v15[2] = a3;
  v15[3] = a4;
  uint64_t v16 = v21;
  v15[4] = a5;
  v15[5] = v16;
  v15[6] = v20;
  v15[7] = a2;
  uint64_t v25 = sub_21F970A54;
  uint64_t v26 = v15;
  uint64_t v17 = sub_21F779E60(&qword_267EE9670, &qword_267EE9668);
  uint64_t v23 = a5;
  uint64_t v24 = v17;
  swift_retain();
  swift_getWitnessTable();
  sub_21FA253D0();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_21F970810(uint64_t result)
{
  *(unsigned char *)(result + 281) = 1;
  return result;
}

uint64_t sub_21F970824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = a4;
  v13[3] = a5;
  v13[4] = a6;
  v13[5] = a7;
  v13[6] = a2;
  v13[7] = a3;
  swift_retain();
  uint64_t v14 = sub_21FA258E0();
  uint64_t v16 = v15;
  sub_21F779EA4(&qword_267EE9688);
  sub_21F97157C();
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  unint64_t v18 = sub_21F971640();
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  View.chartOverlay<A>(alignment:content:)(v14, v16, (uint64_t)sub_21F97156C, (uint64_t)v13, (uint64_t)&type metadata for ChartPlotContent, OpaqueTypeMetadata2, v18, OpaqueTypeConformance2);
  swift_release();
  sub_21F88D3E8();
  sub_21FA25010();
  sub_21FA249D0();
  swift_getWitnessTable();
  swift_getWitnessTable();
  return sub_21FA25750();
}

uint64_t sub_21F970A1C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_21F970A54(uint64_t a1)
{
  return sub_21F970824(a1, v1[6], v1[7], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_21F970A64@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v27 = a5;
  uint64_t v31 = a6;
  uint64_t v10 = *(void *)(a4 - 8);
  uint64_t v29 = a3;
  uint64_t v30 = v10;
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_21F779EA4(&qword_267EE9688);
  unint64_t v14 = sub_21F97157C();
  uint64_t v32 = v13;
  uint64_t v33 = a4;
  unint64_t v34 = v14;
  uint64_t v35 = a5;
  uint64_t v28 = MEMORY[0x263F1B1E8];
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v16 = *(void *)(OpaqueTypeMetadata2 - 8);
  MEMORY[0x270FA5388](OpaqueTypeMetadata2);
  unint64_t v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v26 - v20;
  uint64_t v32 = sub_21FA25590();
  LOWORD(v33) = 256;
  BYTE2(v33) = 0;
  a2(a1);
  sub_21FA244E0();
  uint64_t v22 = v27;
  sub_21FA254C0();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v12, a4);
  swift_release();
  uint64_t v32 = v13;
  uint64_t v33 = a4;
  unint64_t v34 = v14;
  uint64_t v35 = v22;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  sub_21F8B0FF0(v18, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v16 + 8);
  v24(v18, OpaqueTypeMetadata2);
  sub_21F8B0FF0(v21, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  return ((uint64_t (*)(char *, uint64_t))v24)(v21, OpaqueTypeMetadata2);
}

uint64_t sub_21F970CF4()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F970D94()
{
  return swift_getWitnessTable();
}

uint64_t assignWithCopy for ChartSelectionConfiguration(uint64_t a1, long long *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 40);
  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    if (v4 == 255)
    {
      long long v7 = *a2;
      long long v8 = a2[1];
      *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
      *(_OWORD *)a1 = v7;
      *(_OWORD *)(a1 + 16) = v8;
      goto LABEL_11;
    }
    if (v4) {
      goto LABEL_8;
    }
LABEL_10:
    uint64_t v10 = *((void *)a2 + 3);
    *(void *)(a1 + 24) = v10;
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    (**(void (***)(uint64_t, long long *))(v10 - 8))(a1, a2);
    *(unsigned char *)(a1 + 40) = 0;
    goto LABEL_11;
  }
  if (v4 == 255)
  {
    sub_21F7B25D8(a1);
    long long v5 = *(long long *)((char *)a2 + 25);
    long long v6 = a2[1];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = v5;
    goto LABEL_11;
  }
  if ((long long *)a1 != a2)
  {
    sub_21F7B25D8(a1);
    if (*((unsigned char *)a2 + 40))
    {
LABEL_8:
      uint64_t v9 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v9;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v9 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 1;
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_11:
  uint64_t v11 = (long long *)(a1 + 48);
  uint64_t v12 = a2 + 3;
  int v13 = *((unsigned __int8 *)a2 + 88);
  if (*(unsigned __int8 *)(a1 + 88) == 255)
  {
    if (v13 == 255)
    {
      long long v16 = *v12;
      long long v17 = a2[4];
      *(_OWORD *)(a1 + 73) = *(long long *)((char *)a2 + 73);
      *uint64_t v11 = v16;
      *(_OWORD *)(a1 + 64) = v17;
      goto LABEL_21;
    }
    goto LABEL_18;
  }
  if (v13 == 255)
  {
    sub_21F7B26E4(a1 + 48);
    long long v14 = *(long long *)((char *)a2 + 73);
    long long v15 = a2[4];
    *uint64_t v11 = *v12;
    *(_OWORD *)(a1 + 64) = v15;
    *(_OWORD *)(a1 + 73) = v14;
    goto LABEL_21;
  }
  if ((long long *)a1 != a2)
  {
    sub_21F7B26E4(a1 + 48);
    LOBYTE(v13) = *((unsigned char *)a2 + 88);
LABEL_18:
    uint64_t v18 = *((void *)a2 + 9);
    *(void *)(a1 + 72) = v18;
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    (**(void (***)(uint64_t, uint64_t))(v18 - 8))(a1 + 48, (uint64_t)(a2 + 3));
    *(unsigned char *)(a1 + 88) = (v13 & 1) != 0;
  }
LABEL_21:
  uint64_t v19 = (long long *)(a1 + 96);
  uint64_t v20 = a2 + 6;
  int v21 = *((unsigned __int8 *)a2 + 136);
  if (*(unsigned __int8 *)(a1 + 136) == 255)
  {
    if (v21 == 255)
    {
      long long v24 = *v20;
      long long v25 = a2[7];
      *(_OWORD *)(a1 + 121) = *(long long *)((char *)a2 + 121);
      long long *v19 = v24;
      *(_OWORD *)(a1 + 112) = v25;
      goto LABEL_31;
    }
    goto LABEL_28;
  }
  if (v21 == 255)
  {
    sub_21F7B25D8(a1 + 96);
    long long v22 = *(long long *)((char *)a2 + 121);
    long long v23 = a2[7];
    long long *v19 = *v20;
    *(_OWORD *)(a1 + 112) = v23;
    *(_OWORD *)(a1 + 121) = v22;
    goto LABEL_31;
  }
  if ((long long *)a1 != a2)
  {
    sub_21F7B25D8(a1 + 96);
    LOBYTE(v21) = *((unsigned char *)a2 + 136);
LABEL_28:
    uint64_t v26 = *((void *)a2 + 15);
    *(void *)(a1 + 120) = v26;
    *(void *)(a1 + 128) = *((void *)a2 + 16);
    (**(void (***)(uint64_t, uint64_t))(v26 - 8))(a1 + 96, (uint64_t)(a2 + 6));
    *(unsigned char *)(a1 + 136) = (v21 & 1) != 0;
  }
LABEL_31:
  uint64_t v27 = (long long *)(a1 + 144);
  uint64_t v28 = a2 + 9;
  int v29 = *((unsigned __int8 *)a2 + 184);
  if (*(unsigned __int8 *)(a1 + 184) == 255)
  {
    if (v29 == 255)
    {
      long long v32 = *v28;
      long long v33 = a2[10];
      *(_OWORD *)(a1 + 169) = *(long long *)((char *)a2 + 169);
      *uint64_t v27 = v32;
      *(_OWORD *)(a1 + 160) = v33;
      goto LABEL_41;
    }
    goto LABEL_38;
  }
  if (v29 == 255)
  {
    sub_21F7B26E4(a1 + 144);
    long long v30 = *(long long *)((char *)a2 + 169);
    long long v31 = a2[10];
    *uint64_t v27 = *v28;
    *(_OWORD *)(a1 + 160) = v31;
    *(_OWORD *)(a1 + 169) = v30;
    goto LABEL_41;
  }
  if ((long long *)a1 != a2)
  {
    sub_21F7B26E4(a1 + 144);
    LOBYTE(v29) = *((unsigned char *)a2 + 184);
LABEL_38:
    uint64_t v34 = *((void *)a2 + 21);
    *(void *)(a1 + 168) = v34;
    *(void *)(a1 + 176) = *((void *)a2 + 22);
    (**(void (***)(uint64_t, uint64_t))(v34 - 8))(a1 + 144, (uint64_t)(a2 + 9));
    *(unsigned char *)(a1 + 184) = (v29 & 1) != 0;
  }
LABEL_41:
  uint64_t v35 = (long long *)(a1 + 192);
  uint64_t v36 = a2 + 12;
  int v37 = *((unsigned __int8 *)a2 + 232);
  if (*(unsigned __int8 *)(a1 + 232) == 255)
  {
    if (v37 == 255)
    {
      long long v40 = *v36;
      long long v41 = a2[13];
      *(_OWORD *)(a1 + 217) = *(long long *)((char *)a2 + 217);
      long long *v35 = v40;
      *(_OWORD *)(a1 + 208) = v41;
      goto LABEL_51;
    }
    goto LABEL_48;
  }
  if (v37 == 255)
  {
    sub_21F7B25D8(a1 + 192);
    long long v38 = *(long long *)((char *)a2 + 217);
    long long v39 = a2[13];
    long long *v35 = *v36;
    *(_OWORD *)(a1 + 208) = v39;
    *(_OWORD *)(a1 + 217) = v38;
    goto LABEL_51;
  }
  if ((long long *)a1 != a2)
  {
    sub_21F7B25D8(a1 + 192);
    LOBYTE(v37) = *((unsigned char *)a2 + 232);
LABEL_48:
    uint64_t v42 = *((void *)a2 + 27);
    *(void *)(a1 + 216) = v42;
    *(void *)(a1 + 224) = *((void *)a2 + 28);
    (**(void (***)(uint64_t, uint64_t))(v42 - 8))(a1 + 192, (uint64_t)(a2 + 12));
    *(unsigned char *)(a1 + 232) = (v37 & 1) != 0;
  }
LABEL_51:
  uint64_t v43 = (long long *)(a1 + 240);
  uint64_t v44 = a2 + 15;
  int v45 = (BOOL *)(a1 + 280);
  int v46 = *((unsigned __int8 *)a2 + 280);
  if (*(unsigned __int8 *)(a1 + 280) == 255)
  {
    if (v46 == 255)
    {
      long long v49 = *v44;
      long long v50 = a2[16];
      *(_OWORD *)(a1 + 265) = *(long long *)((char *)a2 + 265);
      *uint64_t v43 = v49;
      *(_OWORD *)(a1 + 256) = v50;
      goto LABEL_61;
    }
  }
  else
  {
    if (v46 == 255)
    {
      sub_21F7B26E4(a1 + 240);
      long long v47 = *(long long *)((char *)a2 + 265);
      long long v48 = a2[16];
      *uint64_t v43 = *v44;
      *(_OWORD *)(a1 + 256) = v48;
      *(_OWORD *)(a1 + 265) = v47;
      goto LABEL_61;
    }
    if ((long long *)a1 == a2) {
      goto LABEL_61;
    }
    sub_21F7B26E4(a1 + 240);
    LOBYTE(v46) = *((unsigned char *)a2 + 280);
  }
  uint64_t v51 = *((void *)a2 + 33);
  *(void *)(a1 + 264) = v51;
  *(void *)(a1 + 272) = *((void *)a2 + 34);
  (**(void (***)(uint64_t, uint64_t))(v51 - 8))(a1 + 240, (uint64_t)(a2 + 15));
  *int v45 = (v46 & 1) != 0;
LABEL_61:
  *(unsigned char *)(a1 + 281) = *((unsigned char *)a2 + 281);
  *(unsigned char *)(a1 + 282) = *((unsigned char *)a2 + 282);
  return a1;
}

uint64_t assignWithTake for ChartSelectionConfiguration(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 40) == 255) {
    goto LABEL_7;
  }
  if (*(unsigned __int8 *)(a2 + 40) == 255 || a1 != a2)
  {
    sub_21F7B25D8(a1);
LABEL_7:
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  if (*(unsigned __int8 *)(a1 + 88) == 255)
  {
LABEL_14:
    long long v7 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v7;
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
    goto LABEL_15;
  }
  if (*(unsigned __int8 *)(a2 + 88) == 255 || a1 != a2)
  {
    sub_21F7B26E4(a1 + 48);
    goto LABEL_14;
  }
LABEL_15:
  if (*(unsigned __int8 *)(a1 + 136) == 255)
  {
LABEL_19:
    long long v8 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v8;
    *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
    goto LABEL_20;
  }
  if (*(unsigned __int8 *)(a2 + 136) == 255 || a1 != a2)
  {
    sub_21F7B25D8(a1 + 96);
    goto LABEL_19;
  }
LABEL_20:
  if (*(unsigned __int8 *)(a1 + 184) == 255)
  {
LABEL_24:
    long long v9 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v9;
    *(_OWORD *)(a1 + 169) = *(_OWORD *)(a2 + 169);
    goto LABEL_25;
  }
  if (*(unsigned __int8 *)(a2 + 184) == 255 || a1 != a2)
  {
    sub_21F7B26E4(a1 + 144);
    goto LABEL_24;
  }
LABEL_25:
  if (*(unsigned __int8 *)(a1 + 232) == 255)
  {
LABEL_29:
    long long v10 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v10;
    *(_OWORD *)(a1 + 217) = *(_OWORD *)(a2 + 217);
    goto LABEL_30;
  }
  if (*(unsigned __int8 *)(a2 + 232) == 255 || a1 != a2)
  {
    sub_21F7B25D8(a1 + 192);
    goto LABEL_29;
  }
LABEL_30:
  if (*(unsigned __int8 *)(a1 + 280) == 255)
  {
LABEL_34:
    long long v11 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v11;
    *(_OWORD *)(a1 + 265) = *(_OWORD *)(a2 + 265);
    goto LABEL_35;
  }
  if (*(unsigned __int8 *)(a2 + 280) == 255 || a1 != a2)
  {
    sub_21F7B26E4(a1 + 240);
    goto LABEL_34;
  }
LABEL_35:
  *(unsigned char *)(a1 + 281) = *(unsigned char *)(a2 + 281);
  *(unsigned char *)(a1 + 282) = *(unsigned char *)(a2 + 282);
  return a1;
}

uint64_t sub_21F97156C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21F970A64(a1, *(void (**)(uint64_t))(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 24), *(void *)(v2 + 40), a2);
}

unint64_t sub_21F97157C()
{
  unint64_t result = qword_267EE9690;
  if (!qword_267EE9690)
  {
    sub_21F779EA4(&qword_267EE9688);
    sub_21F779E60(&qword_267EE9698, &qword_267EE96A0);
    sub_21F779E60(&qword_26AD4A2E8, &qword_26AD4A2F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE9690);
  }
  return result;
}

unint64_t sub_21F971640()
{
  unint64_t result = qword_267EE96A8;
  if (!qword_267EE96A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE96A8);
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartGestureConfigurationKey()
{
  return &type metadata for ChartGestureConfigurationKey;
}

ValueMetadata *type metadata accessor for ChartSelectionConfigurationKey()
{
  return &type metadata for ChartSelectionConfigurationKey;
}

uint64_t getEnumTagSinglePayload for ChartSelectionState(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ChartSelectionState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x21F971824);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartSelectionState()
{
  return &type metadata for ChartSelectionState;
}

uint64_t destroy for ChartSelectionAxisConfiguration(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned __int8 *)(result + 40) != 255) {
    unint64_t result = _s6Charts15AnyChartContentVwxx_0(result);
  }
  if (*(unsigned __int8 *)(v1 + 88) != 255)
  {
    return _s6Charts15AnyChartContentVwxx_0(v1 + 48);
  }
  return result;
}

uint64_t initializeWithCopy for ChartSelectionAxisConfiguration(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 40);
  if (v4 == 255)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v6;
    if (v4)
    {
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 1;
    }
    else
    {
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  BOOL v7 = (_OWORD *)(a1 + 48);
  int v8 = (_OWORD *)(a2 + 48);
  int v9 = *(unsigned __int8 *)(a2 + 88);
  if (v9 == 255)
  {
    long long v10 = *(_OWORD *)(a2 + 64);
    *BOOL v7 = *v8;
    *(_OWORD *)(a1 + 64) = v10;
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 72) = v11;
    (**(void (***)(_OWORD *, _OWORD *))(v11 - 8))(v7, v8);
    *(unsigned char *)(a1 + 88) = (v9 & 1) != 0;
  }
  return a1;
}

uint64_t assignWithCopy for ChartSelectionAxisConfiguration(uint64_t a1, long long *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 40);
  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    if (v4 == 255)
    {
      long long v7 = *a2;
      long long v8 = a2[1];
      *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
      *(_OWORD *)a1 = v7;
      *(_OWORD *)(a1 + 16) = v8;
      goto LABEL_11;
    }
    if (v4) {
      goto LABEL_8;
    }
LABEL_10:
    uint64_t v10 = *((void *)a2 + 3);
    *(void *)(a1 + 24) = v10;
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    (**(void (***)(uint64_t, long long *))(v10 - 8))(a1, a2);
    *(unsigned char *)(a1 + 40) = 0;
    goto LABEL_11;
  }
  if (v4 == 255)
  {
    sub_21F7B25D8(a1);
    long long v5 = *(long long *)((char *)a2 + 25);
    long long v6 = a2[1];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = v5;
    goto LABEL_11;
  }
  if ((long long *)a1 != a2)
  {
    sub_21F7B25D8(a1);
    if (*((unsigned char *)a2 + 40))
    {
LABEL_8:
      uint64_t v9 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v9;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v9 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 1;
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_11:
  long long v11 = (long long *)(a1 + 48);
  uint64_t v12 = a2 + 3;
  int v13 = *((unsigned __int8 *)a2 + 88);
  if (*(unsigned __int8 *)(a1 + 88) == 255)
  {
    if (v13 == 255)
    {
      long long v16 = *v12;
      long long v17 = a2[4];
      *(_OWORD *)(a1 + 73) = *(long long *)((char *)a2 + 73);
      *long long v11 = v16;
      *(_OWORD *)(a1 + 64) = v17;
      return a1;
    }
  }
  else
  {
    if (v13 == 255)
    {
      sub_21F7B26E4(a1 + 48);
      long long v14 = *(long long *)((char *)a2 + 73);
      long long v15 = a2[4];
      *long long v11 = *v12;
      *(_OWORD *)(a1 + 64) = v15;
      *(_OWORD *)(a1 + 73) = v14;
      return a1;
    }
    if ((long long *)a1 == a2) {
      return a1;
    }
    sub_21F7B26E4(a1 + 48);
    LOBYTE(v13) = *((unsigned char *)a2 + 88);
  }
  uint64_t v18 = *((void *)a2 + 9);
  *(void *)(a1 + 72) = v18;
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  (**(void (***)(uint64_t, uint64_t))(v18 - 8))(a1 + 48, (uint64_t)(a2 + 3));
  *(unsigned char *)(a1 + 88) = (v13 & 1) != 0;
  return a1;
}

uint64_t assignWithTake for ChartSelectionAxisConfiguration(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 40) == 255) {
    goto LABEL_7;
  }
  if (*(unsigned __int8 *)(a2 + 40) == 255 || a1 != a2)
  {
    sub_21F7B25D8(a1);
LABEL_7:
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  if (*(unsigned __int8 *)(a1 + 88) == 255)
  {
LABEL_14:
    long long v7 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v7;
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
    return a1;
  }
  if (*(unsigned __int8 *)(a2 + 88) == 255 || a1 != a2)
  {
    sub_21F7B26E4(a1 + 48);
    goto LABEL_14;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ChartSelectionAxisConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 89)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = (v3 ^ 0xFF) - 1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ChartSelectionAxisConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 88) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 89) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 89) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = ~(_BYTE)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartSelectionAxisConfiguration()
{
  return &type metadata for ChartSelectionAxisConfiguration;
}

ValueMetadata *type metadata accessor for ChartGestureConfiguration.Closure()
{
  return &type metadata for ChartGestureConfiguration.Closure;
}

unint64_t sub_21F971D64()
{
  unint64_t result = qword_267EE96B0;
  if (!qword_267EE96B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE96B0);
  }
  return result;
}

unint64_t sub_21F971DB8()
{
  unint64_t result = qword_267EE96B8;
  if (!qword_267EE96B8)
  {
    sub_21F779EA4(&qword_267EE96C0);
    sub_21F971E2C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE96B8);
  }
  return result;
}

unint64_t sub_21F971E2C()
{
  unint64_t result = qword_267EE96C8;
  if (!qword_267EE96C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE96C8);
  }
  return result;
}

void NumberBins.init<>(range:desiredCount:minimumStride:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  uint64_t v10 = sub_21FA25CC0();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  int v13 = (char *)&v28 - v12;
  uint64_t v14 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v15);
  long long v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for FloatingPointBinningUnit();
  MEMORY[0x270FA5388](v18);
  long long v22 = (char *)&v28 - v21;
  uint64_t v23 = v31 + 1;
  if (__OFADD__(v31, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v28 = a6;
    uint64_t v29 = a3;
    uint64_t v24 = a3;
    uint64_t v25 = v30;
    uint64_t v31 = v19;
    uint64_t v26 = v17;
    uint64_t v27 = v20;
    sub_21F97395C(v30, v23, v24, 1, 1, a4, a5, (uint64_t)v22);
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v26, v22, a4);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v25, v10);
    NumberBins.init<>(size:range:)(v26, (uint64_t)v13, a4, a5, v28);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v29, a4);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v25, v10);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v22, v31);
  }
}

uint64_t type metadata accessor for FloatingPointBinningUnit()
{
  return sub_21F764F08();
}

uint64_t NumberBins.index(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = type metadata accessor for NumberBins.UniformStorage();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = type metadata accessor for NumberBins.Storage();
  __n128 v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (uint64_t *)((char *)&v20 - v13);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))((char *)&v20 - v13, v3, v11, v12);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (!result) {
    goto LABEL_5;
  }
  if (result == 1)
  {
    uint64_t v7 = *v14;
    uint64_t v17 = MEMORY[0x223C55340](*v14, v5);
    a1 = sub_21F813BD0(a1, v17, v7, v5, v6);
    char v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0) {
      return a1;
    }
    __break(1u);
LABEL_5:
    (*(void (**)(char *, uint64_t *, uint64_t))(v8 + 32))(v10, v14, v7);
    a1 = (*(uint64_t (**)(uint64_t))&v10[*(int *)(v7 + 56)])(a1);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return a1;
  }
  __break(1u);
  return result;
}

uint64_t NumberBins.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v53 = a1;
  uint64_t v49 = a3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v51 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v52 = (uint64_t)&v44 - v9;
  MEMORY[0x270FA5388](v10);
  long long v50 = (char *)&v44 - v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v44 - v13;
  uint64_t v16 = *(void *)(v15 + 24);
  uint64_t v17 = type metadata accessor for NumberBins.UniformStorage();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v44 - v19;
  uint64_t v48 = v16;
  uint64_t v21 = type metadata accessor for NumberBins.Storage();
  __n128 v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (uint64_t *)((char *)&v44 - v23);
  uint64_t v26 = *(void (**)(void *, uint64_t, uint64_t, __n128))(v25 + 16);
  uint64_t v47 = v4;
  v26(v24, v4, v21, v22);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result)
  {
    uint64_t v28 = v53;
    if (result != 1)
    {
LABEL_18:
      __break(1u);
      return result;
    }
    uint64_t v29 = v52;
    if ((v53 & 0x8000000000000000) == 0)
    {
      uint64_t v30 = v14;
      uint64_t result = MEMORY[0x223C55340](*v24, v5);
      if (!__OFSUB__(result, 1))
      {
        if (result - 1 > v28)
        {
          uint64_t v31 = result;
          sub_21FA25F60();
          long long v32 = v50;
          sub_21FA25F60();
          long long v33 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 16);
          v33(v29, v30, v5);
          uint64_t v34 = (uint64_t)v51;
          v33((uint64_t)v51, v32, v5);
          swift_bridgeObjectRelease();
          uint64_t v35 = *(void (**)(char *, uint64_t))(v6 + 8);
          v35(v32, v5);
          uint64_t result = ((uint64_t (*)(char *, uint64_t))v35)(v30, v5);
          if (!__OFSUB__(v31, 2)) {
            return sub_21F7F8D70(v52, v34, v31 - 2 == v28, v5, v49);
          }
          goto LABEL_17;
        }
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      goto LABEL_14;
    }
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  (*(void (**)(char *, void *, uint64_t))(v18 + 32))(v20, v24, v17);
  uint64_t v36 = *(void (**)(uint64_t))&v20[*(int *)(v17 + 52)];
  uint64_t v37 = v53;
  v36(v53);
  uint64_t result = v37 + 1;
  if (__OFADD__(v37, 1)) {
    goto LABEL_13;
  }
  uint64_t v45 = v18;
  uint64_t v46 = v17;
  long long v38 = v50;
  v36(result);
  long long v39 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 16);
  uint64_t v40 = v52;
  v39(v52, v14, v5);
  uint64_t v41 = (uint64_t)v51;
  v39((uint64_t)v51, v38, v5);
  swift_getWitnessTable();
  uint64_t v42 = sub_21FA26150();
  uint64_t v43 = *(void (**)(char *, uint64_t))(v6 + 8);
  v43(v38, v5);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v43)(v14, v5);
  if (__OFSUB__(v42, 1))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  sub_21F7F8D70(v40, v41, v42 - 1 == v53, v5, v49);
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v20, v46);
}

uint64_t NumberBins.thresholds.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v49 = *(void (***)(char *, char *, uint64_t))(v3 - 8);
  MEMORY[0x270FA5388](a1);
  long long v50 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ChartBinRange();
  uint64_t v37 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v35 - v6;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v9 = sub_21FA25BC0();
  uint64_t v43 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  long long v39 = (char *)&v35 - v10;
  swift_getWitnessTable();
  uint64_t v11 = sub_21FA266B0();
  uint64_t v41 = *(void *)(v11 - 8);
  uint64_t v42 = v11;
  MEMORY[0x270FA5388](v11);
  long long v38 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v35 - v14;
  uint64_t v51 = v3;
  uint64_t v16 = type metadata accessor for NumberBins.Storage();
  uint64_t v17 = *(void *)(v16 - 8);
  __n128 v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v35 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16))((char *)&v35 - v19, v1, v16, v18);
  uint64_t v40 = v20;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1) {
      return *(void *)v40;
    }
    else {
      return sub_21FA25EC0();
    }
  }
  uint64_t v35 = v17;
  uint64_t v36 = v16;
  uint64_t v23 = v49;
  uint64_t v53 = sub_21FA25EC0();
  uint64_t v24 = v39;
  uint64_t v47 = a1;
  uint64_t v48 = v1;
  sub_21FA261C0();
  uint64_t v25 = v43;
  uint64_t v26 = v38;
  (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v38, v24, v9);
  MEMORY[0x223C54FD0](&v52, v9);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v24, v9);
  uint64_t v27 = v42;
  *(void *)&v26[*(int *)(v42 + 36)] = v52;
  (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v15, v26, v27);
  uint64_t v28 = (uint64_t *)&v15[*(int *)(v27 + 36)];
  uint64_t v29 = *v28;
  uint64_t v30 = v15;
  sub_21FA25BA0();
  if (v29 == v52)
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v41 + 8))(v30, v42);
    uint64_t v22 = v53;
    (*(void (**)(char *, uint64_t))(v35 + 8))(v40, v36);
    return v22;
  }
  uint64_t v49 = v23 + 2;
  uint64_t v43 = v37 + 8;
  uint64_t v44 = v9;
  uint64_t v45 = v15;
  uint64_t v46 = WitnessTable;
  uint64_t v32 = v47;
  while (1)
  {
    long long v33 = v28;
    sub_21FA25BB0();
    NumberBins.subscript.getter(v29, v32, (uint64_t)v7);
    uint64_t v34 = *v49;
    (*v49)(v50, v7, v51);
    sub_21FA25F30();
    sub_21FA25F10();
    uint64_t result = sub_21FA26150();
    if (__OFSUB__(result, 1)) {
      break;
    }
    if (v29 == result - 1)
    {
      v34(v50, &v7[*(int *)(v5 + 36)], v51);
      sub_21FA25F10();
    }
    (*(void (**)(char *, uint64_t))v43)(v7, v5);
    uint64_t v28 = v33;
    uint64_t v29 = *v33;
    uint64_t v30 = v45;
    sub_21FA25BA0();
    if (v29 == v52) {
      goto LABEL_5;
    }
  }
  __break(1u);
  return result;
}

uint64_t NumberBins.init<>(size:range:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v60 = a4;
  uint64_t v61 = a2;
  uint64_t v56 = a5;
  uint64_t v57 = *(void *)(a4 + 16);
  uint64_t v7 = *(void *)(*(void *)(v57 + 24) + 8);
  uint64_t v8 = *(char **)(*(void *)(v57 + 16) + 8);
  uint64_t v9 = type metadata accessor for NumberBins.Storage();
  uint64_t v55 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v54 = (uint64_t)&v43 - v10;
  uint64_t v58 = sub_21FA26890();
  uint64_t v53 = *(void *)(v58 - 8);
  MEMORY[0x270FA5388](v58);
  uint64_t v51 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v13 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v49 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  unint64_t v59 = (char *)&v43 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v43 - v19;
  __n128 v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v43 - v23;
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  unint64_t v62 = a1;
  uint64_t v47 = v25;
  uint64_t v48 = v13 + 16;
  ((void (*)(char *, char *, uint64_t, __n128))v25)((char *)&v43 - v23, a1, a3, v22);
  swift_getAssociatedConformanceWitness();
  sub_21FA26930();
  sub_21FA268B0();
  uint64_t v50 = v7;
  LOBYTE(v8) = sub_21FA25C40();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v27 = v13 + 8;
  uint64_t v26 = v28;
  v28(v20, a3);
  v28(v24, a3);
  if (v8)
  {
    uint64_t v46 = v9;
    sub_21FA25B20();
    uint64_t v29 = *MEMORY[0x263F8E220];
    uint64_t v30 = v53;
    uint64_t v63 = v27;
    uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 104);
    uint64_t v45 = v53 + 104;
    uint64_t v31 = v51;
    uint64_t v32 = v58;
    v44(v51, v29, v58);
    sub_21FA25B30();
    uint64_t v43 = *(void (**)(char *, uint64_t))(v30 + 8);
    v43(v31, v32);
    v26(v20, a3);
    sub_21FA26040();
    v26(v24, a3);
    uint64_t v53 = sub_21FA25CC0();
    sub_21FA26710();
    sub_21FA25B20();
    uint64_t v52 = v20;
    v26(v20, a3);
    uint64_t v33 = v58;
    v44(v31, *MEMORY[0x263F8E218], v58);
    uint64_t v34 = v49;
    sub_21FA25B30();
    v43(v31, v33);
    v26(v24, a3);
    sub_21F8158A8();
    sub_21FA266D0();
    if ((v65 & 1) == 0)
    {
      v26(v34, a3);
      uint64_t v35 = v64;
      uint64_t v36 = v62;
      uint64_t v37 = v47;
      v47(v24, v62, a3);
      long long v38 = v52;
      long long v39 = v59;
      v37(v52, v59, a3);
      uint64_t v40 = v54;
      sub_21F974BA0(v24, v38, v35, a3, v60, v54);
      (*(void (**)(uint64_t))(*(void *)(v53 - 8) + 8))(v61);
      v26(v36, a3);
      v26(v39, a3);
      uint64_t v41 = v46;
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 32))(v56, v40, v41);
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t v64 = 0;
  unint64_t v65 = 0xE000000000000000;
  sub_21FA26510();
  sub_21FA26B00();
  sub_21FA25D40();
  swift_bridgeObjectRelease();
  sub_21FA25D40();
  sub_21FA25D40();
  sub_21FA25D40();
  uint64_t result = sub_21FA266E0();
  __break(1u);
  return result;
}

double sub_21F973520(uint64_t a1, int a2, int a3, double a4, double a5, double a6)
{
  double v40 = a6;
  if (a1 <= 1) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = a1;
  }
  double v9 = (a5 - a4) / (double)v8;
  double v10 = 1.0;
  if (v9 > 0.0 && (~*(void *)&v9 & 0x7FF0000000000000) != 0)
  {
    int v36 = a2;
    int v37 = a3;
    if (v9 < a6) {
      double v9 = a6;
    }
    double v11 = log10(v9);
    double v39 = __exp10(floor(v11));
    sub_21F76CA40(&qword_26AD4A478);
    inited = (_OWORD *)swift_initStackObject();
    inited[1] = xmmword_21FA30510;
    inited[2] = xmmword_21FA30520;
    inited[3] = xmmword_21FA30530;
    inited[4] = xmmword_21FA30540;
    MEMORY[0x270FA5388](inited);
    uint64_t v35 = &v39;
    uint64_t v13 = (char *)sub_21F7FAC08((void (*)(uint64_t *__return_ptr, uint64_t *))sub_21F97CEBC, (uint64_t)v34, (uint64_t)inited);
    swift_setDeallocating();
    uint64_t v14 = swift_initStackObject();
    *(_OWORD *)(v14 + 16) = xmmword_21FA28820;
    *(_OWORD *)(v14 + 32) = xmmword_21FA30550;
    MEMORY[0x270FA5388](v14);
    uint64_t v35 = &v39;
    uint64_t v15 = sub_21F7FAC08((void (*)(uint64_t *__return_ptr, uint64_t *))sub_21F97CC60, (uint64_t)v34, v14);
    swift_setDeallocating();
    uint64_t v16 = *(void *)(v15 + 16);
    uint64_t v17 = (char *)MEMORY[0x263F8EE78];
    if (v16)
    {
      uint64_t v18 = (double *)(v15 + 32);
      do
      {
        double v21 = *v18;
        if (*v18 > 10.0)
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          long long v38 = v17;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_21F76CFE0(0, *((void *)v17 + 2) + 1, 1);
            uint64_t v17 = v38;
          }
          unint64_t v20 = *((void *)v17 + 2);
          unint64_t v19 = *((void *)v17 + 3);
          if (v20 >= v19 >> 1)
          {
            sub_21F76CFE0((char *)(v19 > 1), v20 + 1, 1);
            uint64_t v17 = v38;
          }
          *((void *)v17 + 2) = v20 + 1;
          *(double *)&v17[8 * v20 + 32] = v21;
        }
        ++v18;
        --v16;
      }
      while (v16);
    }
    swift_bridgeObjectRelease();
    long long v38 = v13;
    uint64_t v23 = sub_21F9EDB14((uint64_t)v17);
    MEMORY[0x270FA5388](v23);
    uint64_t v35 = &v40;
    long long v38 = (char *)sub_21F8A506C((uint64_t)sub_21F97CC78, (uint64_t)v34, v24);
    swift_bridgeObjectRetain();
    sub_21F933894(&v38);
    swift_bridgeObjectRelease();
    uint64_t v25 = v38;
    int64_t v26 = *((void *)v38 + 2);
    if (v26)
    {
      long long v38 = (char *)MEMORY[0x263F8EE78];
      sub_21F7A2B30(0, v26, 0);
      uint64_t v27 = 0;
      uint64_t v28 = v38;
      unint64_t v29 = *((void *)v38 + 2);
      do
      {
        uint64_t v30 = *(void *)&v25[8 * v27 + 32];
        long long v38 = v28;
        unint64_t v31 = *((void *)v28 + 3);
        if (v29 >= v31 >> 1)
        {
          sub_21F7A2B30((char *)(v31 > 1), v29 + 1, 1);
          uint64_t v28 = v38;
        }
        ++v27;
        *((void *)v28 + 2) = v29 + 1;
        *(void *)&v28[8 * v29++ + 32] = v30;
      }
      while (v26 != v27);
      swift_release();
      if (!*((void *)v28 + 2)) {
        goto LABEL_24;
      }
    }
    else
    {
      swift_release();
      uint64_t v28 = (char *)MEMORY[0x263F8EE78];
      if (!*(void *)(MEMORY[0x263F8EE78] + 16)) {
        goto LABEL_24;
      }
    }
    sub_21F9103FC((uint64_t)v28, v8, a4, a5);
    double v10 = v32;
LABEL_24:
    swift_bridgeObjectRelease();
  }
  return v10;
}

uint64_t sub_21F97395C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  int v84 = a5;
  int v82 = a4;
  uint64_t v93 = a3;
  uint64_t v98 = a8;
  uint64_t v92 = *(void *)(a7 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v90 = (char *)&v74 - v12;
  uint64_t v95 = a7;
  uint64_t v13 = *(char **)(a7 + 16);
  uint64_t v14 = *(void *)(*(void *)(*((void *)v13 + 2) + 8) + 16);
  uint64_t v100 = *(void *)(*((void *)v13 + 2) + 8);
  uint64_t v101 = v14;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v15);
  uint64_t v89 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  int v88 = (char *)&v74 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t WitnessTable = (uint64_t)&v74 - v20;
  MEMORY[0x270FA5388](v21);
  unint64_t v86 = (char *)&v74 - v22;
  MEMORY[0x270FA5388](v23);
  unint64_t v85 = (char *)&v74 - v24;
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v74 - v26;
  uint64_t v28 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v29);
  uint64_t v96 = (char *)&v74 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  uint64_t v33 = (char *)&v74 - v32;
  MEMORY[0x270FA5388](v34);
  int v36 = (char *)&v74 - v35;
  MEMORY[0x270FA5388](v37);
  double v39 = (char *)&v74 - v38;
  if (a2 <= 1) {
    a2 = 1;
  }
  uint64_t v102 = *(void *)(*((void *)v13 + 3) + 8);
  sub_21FA25CC0();
  uint64_t v83 = a1;
  sub_21FA26710();
  uint64_t v81 = a2;
  sub_21FA25B50();
  BOOL v94 = v13;
  sub_21FA25B20();
  uint64_t v99 = v28;
  uint64_t v40 = v28 + 8;
  uint64_t v41 = *(void (**)(char *, uint64_t))(v28 + 8);
  uint64_t v42 = v33;
  uint64_t v43 = v40;
  v41(v42, a6);
  v41(v36, a6);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v100 = v15;
  uint64_t v45 = a6;
  sub_21FA26930();
  double v103 = v27;
  sub_21FA268B0();
  char v46 = sub_21FA25C40();
  float64x2_t v97 = v41;
  v41(v36, a6);
  if (v46 & 1) != 0 && (sub_21FA25B40())
  {
    sub_21FA26940();
    sub_21F885234();
    BOOL v94 = v39;
    sub_21FA25A80();
    double v47 = log10(*(long double *)&v107);
    __exp10(floor(v47));
    sub_21FA25AA0();
    sub_21F75115C(a6, a6);
    uint64_t v48 = *(void *)(v99 + 72);
    uint64_t v78 = *(unsigned __int8 *)(v99 + 80);
    uint64_t v49 = v48;
    swift_allocObject();
    uint64_t v76 = sub_21FA25E70();
    uint64_t v79 = v43;
    sub_21FA26930();
    sub_21FA268B0();
    uint64_t v75 = v36;
    sub_21FA26930();
    sub_21FA268B0();
    unint64_t v85 = (char *)(2 * v49);
    sub_21FA26930();
    sub_21FA268B0();
    sub_21FA26930();
    sub_21FA268B0();
    uint64_t v77 = v49;
    uint64_t v80 = AssociatedConformanceWitness;
    sub_21FA26930();
    sub_21FA268B0();
    sub_21FA26930();
    sub_21FA268B0();
    uint64_t v107 = sub_21F79EA8C(v76);
    MEMORY[0x270FA5388](v107);
    uint64_t v50 = v95;
    *(&v74 - 4) = a6;
    *(&v74 - 3) = v50;
    *(&v74 - 2) = (uint64_t)v96;
    uint64_t v51 = sub_21FA25F30();
    uint64_t v89 = (char *)MEMORY[0x263F8D4D0];
    uint64_t WitnessTable = swift_getWitnessTable();
    int v88 = (char *)sub_21F751B50((void (*)(char *, char *))sub_21F97CDE0, (uint64_t)(&v74 - 6), v51, a6, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v52);
    swift_bridgeObjectRelease();
    sub_21F75115C(a6, a6);
    swift_allocObject();
    uint64_t v53 = sub_21FA25E70();
    swift_getAssociatedConformanceWitness();
    sub_21FA26920();
    sub_21FA26880();
    sub_21FA26930();
    sub_21FA268B0();
    uint64_t v106 = sub_21F79EA8C(v53);
    MEMORY[0x270FA5388](v106);
    uint64_t v55 = v95;
    uint64_t v54 = v96;
    *(&v74 - 4) = a6;
    *(&v74 - 3) = v55;
    *(&v74 - 2) = (uint64_t)v54;
    uint64_t v56 = WitnessTable;
    uint64_t v58 = sub_21F751B50((void (*)(char *, char *))sub_21F97CDE0, (uint64_t)(&v74 - 6), v51, a6, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v57);
    uint64_t v59 = swift_bridgeObjectRelease();
    uint64_t v105 = v58;
    MEMORY[0x270FA5388](v59);
    *(&v74 - 2) = a6;
    *(&v74 - 1) = v55;
    swift_getWitnessTable();
    sub_21FA265D0();
    uint64_t v60 = sub_21FA25EB0();
    swift_bridgeObjectRelease();
    uint64_t v61 = swift_bridgeObjectRelease();
    uint64_t v105 = v60;
    MEMORY[0x270FA5388](v61);
    *(&v74 - 4) = a6;
    *(&v74 - 3) = v55;
    *(&v74 - 2) = v93;
    uint64_t v104 = sub_21FA265D0();
    swift_getWitnessTable();
    uint64_t v62 = sub_21FA25DE0();
    uint64_t v63 = swift_bridgeObjectRelease();
    uint64_t v104 = v62;
    MEMORY[0x270FA5388](v63);
    *(&v74 - 2) = a6;
    *(&v74 - 1) = v55;
    uint64_t v64 = v94;
    uint64_t v65 = type metadata accessor for FloatingPointBinningUnit();
    uint64_t v67 = sub_21F751B50((void (*)(char *, char *))sub_21F97CE9C, (uint64_t)(&v74 - 4), v51, v65, MEMORY[0x263F8E628], v56, MEMORY[0x263F8E658], v66);
    swift_bridgeObjectRelease();
    uint64_t v104 = v67;
    sub_21FA25F30();
    swift_getWitnessTable();
    char v68 = sub_21FA26190();
    uint64_t v70 = v97;
    uint64_t v69 = v98;
    if (v68)
    {
      swift_bridgeObjectRelease();
      sub_21FA26930();
      uint64_t v71 = v75;
      sub_21FA268B0();
      v70(v64, v45);
      (*(void (**)(uint64_t, char *, uint64_t))(v99 + 32))(v69, v71, v45);
    }
    else
    {
      int64_t v73 = swift_getWitnessTable();
      sub_21F9E921C(v83, v67, v82 & 1, v84 & 1, v65, v73, v69);
      swift_bridgeObjectRelease();
      v70(v64, v45);
    }
    return ((uint64_t (*)(char *, uint64_t))v70)(v96, v45);
  }
  else
  {
    sub_21FA26930();
    sub_21FA268B0();
    v97(v39, a6);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v99 + 32))(v98, v36, a6);
  }
}

uint64_t type metadata accessor for NumberBins.UniformStorage()
{
  return sub_21F764F08();
}

uint64_t type metadata accessor for NumberBins.Storage()
{
  return sub_21F764F08();
}

uint64_t sub_21F974668@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v33 = a4;
  uint64_t v32 = *(void *)(a3 + 24);
  uint64_t v31 = *(void *)(v32 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v9);
  double v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v28 - v13;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)v28 - v16;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)v28 - v19;
  uint64_t v29 = a1;
  sub_21FA26380();
  if ((sub_21FA263C0() & 1) == 0)
  {
    v28[1] = v5;
    char v21 = sub_21FA263C0();
    uint64_t v22 = sub_21FA263B0();
    if ((v21 & 1) == 0)
    {
      if (v22 < 64 && sub_21FA263A0() < 0) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
    if (v22 <= 64)
    {
      swift_getAssociatedConformanceWitness();
      sub_21FA26930();
      sub_21FA268B0();
      char v24 = sub_21FA25C50();
      v28[0] = *(void *)(v8 + 8);
      ((void (*)(char *, uint64_t))v28[0])(v14, a2);
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v20, a2);
      if (v24)
      {
        ((void (*)(char *, uint64_t))v28[0])(v11, a2);
      }
      else
      {
        uint64_t v25 = sub_21FA263A0();
        ((void (*)(char *, uint64_t))v28[0])(v11, a2);
        if ((v25 & 0x8000000000000000) == 0) {
          goto LABEL_15;
        }
      }
LABEL_16:
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v17, v29, a2);
      goto LABEL_17;
    }
    goto LABEL_7;
  }
  if (sub_21FA263B0() >= 64)
  {
LABEL_7:
    uint64_t v34 = 0;
    sub_21F97A8D4();
    sub_21FA26360();
    char v23 = sub_21FA25C50();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v14, a2);
    if (v23) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if (sub_21FA263A0() < 0) {
    goto LABEL_16;
  }
LABEL_15:
  swift_getAssociatedConformanceWitness();
  sub_21FA26930();
  sub_21FA268B0();
LABEL_17:
  sub_21FA26700();
  sub_21FA26710();
  uint64_t v26 = *(void (**)(char *, uint64_t))(v8 + 8);
  v26(v14, a2);
  v26(v17, a2);
  return ((uint64_t (*)(char *, uint64_t))v26)(v20, a2);
}

uint64_t sub_21F974BA0@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v42 = a5;
  uint64_t v40 = a6;
  uint64_t v11 = *(void *)(a4 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x270FA5388](a1);
  double v39 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v14 = MEMORY[0x270FA5388](v13);
  uint64_t v35 = (char *)&v34 - v15;
  uint64_t v16 = *(void (**)(uint64_t, char *, uint64_t, __n128))(v11 + 16);
  uint64_t v41 = a1;
  v16(a6, a1, v17, v14);
  uint64_t v18 = type metadata accessor for NumberBins.UniformStorage();
  uint64_t v43 = v18;
  uint64_t v19 = a6 + *(int *)(v18 + 44);
  uint64_t v38 = a2;
  ((void (*)(uint64_t, char *, uint64_t))v16)(v19, a2, a4);
  *(void *)(a6 + *(int *)(v18 + 48)) = a3;
  uint64_t v20 = v35;
  ((void (*)(char *, char *, uint64_t))v16)(v35, a1, a4);
  char v21 = v39;
  ((void (*)(char *, char *, uint64_t))v16)(v39, a2, a4);
  uint64_t v22 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v23 = (v22 + 32) & ~v22;
  uint64_t v24 = (v12 + v22 + v23) & ~v22;
  uint64_t v36 = v24 + v12;
  uint64_t v37 = v22 | 7;
  uint64_t v25 = swift_allocObject();
  uint64_t v26 = v42;
  *(void *)(v25 + 16) = a4;
  *(void *)(v25 + 24) = v26;
  uint64_t v27 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 32);
  v27(v25 + v23, v20, a4);
  v27(v25 + v24, v21, a4);
  uint64_t v28 = v40;
  uint64_t v29 = (uint64_t (**)(uint64_t))(v40 + *(int *)(v43 + 52));
  *uint64_t v29 = sub_21F97CCCC;
  v29[1] = (uint64_t (*)(uint64_t))v25;
  v27((uint64_t)v20, v38, a4);
  v27((uint64_t)v21, v41, a4);
  uint64_t v30 = swift_allocObject();
  uint64_t v31 = v42;
  *(void *)(v30 + 16) = a4;
  *(void *)(v30 + 24) = v31;
  v27(v30 + v23, v20, a4);
  uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(v30 + v24, v21, a4);
  uint64_t v33 = (uint64_t (**)(uint64_t))(v28 + *(int *)(v43 + 56));
  *uint64_t v33 = sub_21F97CD58;
  v33[1] = (uint64_t (*)(uint64_t))v30;
  return result;
}

uint64_t sub_21F974E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v13 - v9;
  sub_21FA25B50();
  sub_21FA26040();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v7, a4);
  sub_21FA26700();
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, a4);
}

uint64_t sub_21F974FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v22[1] = a5;
  void v22[2] = a3;
  uint64_t v23 = sub_21FA26890();
  uint64_t v6 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v22 - v14;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)v22 - v17;
  sub_21FA26710();
  sub_21FA25B20();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v12, a4);
  uint64_t v20 = v23;
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x263F8E220], v23);
  sub_21FA25B30();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v20);
  v19(v15, a4);
  sub_21F8158A8();
  sub_21FA266D0();
  if (v25)
  {
    uint64_t v24 = 0;
    unint64_t v25 = 0xE000000000000000;
    sub_21FA26510();
    sub_21FA26B00();
    sub_21FA25D40();
    swift_bridgeObjectRelease();
    sub_21FA25D40();
    sub_21FA25D40();
    sub_21FA25D40();
    uint64_t result = sub_21FA266E0();
    __break(1u);
  }
  else
  {
    v19(v18, a4);
    return v24;
  }
  return result;
}

uint64_t sub_21F97530C@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v40 = a6;
  uint64_t v41 = a3;
  uint64_t v11 = *(void *)(a4 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x270FA5388](a1);
  uint64_t v38 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v14 = MEMORY[0x270FA5388](v13);
  uint64_t v36 = (char *)&v35 - v15;
  uint64_t v16 = *(void (**)(uint64_t, char *, uint64_t, __n128))(v11 + 16);
  uint64_t v42 = a1;
  v16(a6, a1, v17, v14);
  uint64_t v43 = a5;
  uint64_t v18 = type metadata accessor for NumberBins.UniformStorage();
  uint64_t v44 = v18;
  uint64_t v19 = a6 + *(int *)(v18 + 44);
  double v39 = a2;
  ((void (*)(uint64_t, char *, uint64_t))v16)(v19, a2, a4);
  *(void *)(a6 + *(int *)(v18 + 48)) = v41;
  uint64_t v20 = v36;
  ((void (*)(char *, char *, uint64_t))v16)(v36, a1, a4);
  char v21 = v38;
  ((void (*)(char *, char *, uint64_t))v16)(v38, a2, a4);
  uint64_t v22 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v23 = (v22 + 32) & ~v22;
  uint64_t v41 = v22 | 7;
  uint64_t v24 = (v12 + v22 + v23) & ~v22;
  uint64_t v37 = v24 + v12;
  uint64_t v25 = swift_allocObject();
  uint64_t v26 = v43;
  *(void *)(v25 + 16) = a4;
  *(void *)(v25 + 24) = v26;
  uint64_t v27 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 32);
  v27(v25 + v23, v20, a4);
  v27(v25 + v24, v21, a4);
  uint64_t v28 = v39;
  uint64_t v29 = v40;
  uint64_t v30 = (uint64_t (**)(uint64_t))(v40 + *(int *)(v44 + 52));
  char *v30 = sub_21F97CC94;
  v30[1] = (uint64_t (*)(uint64_t))v25;
  v27((uint64_t)v20, v28, a4);
  v27((uint64_t)v21, v42, a4);
  uint64_t v31 = swift_allocObject();
  uint64_t v32 = v43;
  *(void *)(v31 + 16) = a4;
  *(void *)(v31 + 24) = v32;
  v27(v31 + v23, v20, a4);
  uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(v31 + v24, v21, a4);
  uint64_t v34 = (uint64_t (**)(uint64_t))(v29 + *(int *)(v44 + 56));
  char *v34 = sub_21F97CCB0;
  v34[1] = (uint64_t (*)(uint64_t))v31;
  return result;
}

uint64_t sub_21F9755D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v14 - v9;
  v14[1] = v11;
  sub_21F97A8D4();
  sub_21FA263E0();
  sub_21FA26040();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v7, a4);
  sub_21FA26700();
  return ((uint64_t (*)(char *, uint64_t))v12)(v10, a4);
}

uint64_t sub_21F97573C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v66 = *(void *)(*(void *)(a5 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  v63[1] = (char *)v63 - v8;
  uint64_t v9 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v65 = (char *)v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  int64_t v73 = (char *)v63 - v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v72 = (char *)v63 - v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v69 = (char *)v63 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v71 = (char *)v63 - v19;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)v63 - v21;
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)v63 - v24;
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)v63 - v27;
  sub_21FA26710();
  sub_21F974668(a3, a4, a5, (uint64_t)v25);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v67 = v22;
  v29(v22, a4);
  sub_21FA26370();
  uint64_t v70 = v25;
  uint64_t v30 = v25;
  uint64_t v31 = v71;
  v29(v30, a4);
  char v32 = sub_21FA263C0();
  uint64_t v68 = v9;
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v33(v31, v28, a4);
  if ((v32 & 1) == 0)
  {
    v29(v31, a4);
    uint64_t v35 = v72;
    goto LABEL_8;
  }
  uint64_t v34 = sub_21FA263B0();
  v29(v31, a4);
  uint64_t v35 = v72;
  if (v34 <= 64) {
    goto LABEL_8;
  }
  uint64_t v36 = v69;
  v33(v69, v28, a4);
  int64_t v75 = 0x8000000000000000;
  if (sub_21FA263C0())
  {
    if (sub_21FA263B0() >= 64)
    {
      sub_21F97A8D4();
      uint64_t v37 = v70;
      sub_21FA26360();
      char v38 = sub_21FA25C50();
      double v39 = v37;
      uint64_t v35 = v72;
      v29(v39, a4);
      v29(v36, a4);
      if (v38) {
        goto LABEL_29;
      }
      goto LABEL_8;
    }
    goto LABEL_28;
  }
  char v52 = sub_21FA263C0();
  uint64_t v53 = sub_21FA263B0();
  if ((v52 & 1) == 0)
  {
    if (v53 >= 64)
    {
      v29(v69, a4);
      goto LABEL_8;
    }
    uint64_t v36 = v69;
LABEL_28:
    uint64_t v57 = sub_21FA263A0();
    v29(v36, a4);
    if (v57 < v75) {
      goto LABEL_29;
    }
    goto LABEL_8;
  }
  if (v53 <= 64) {
    goto LABEL_30;
  }
  sub_21F97A8D4();
  uint64_t v54 = v70;
  sub_21FA26360();
  uint64_t v55 = v69;
  char v56 = sub_21FA25C50();
  v29(v54, a4);
  v29(v55, a4);
  uint64_t v35 = v72;
  if (v56)
  {
LABEL_29:
    do
    {
      __break(1u);
LABEL_30:
      swift_getAssociatedConformanceWitness();
      sub_21FA26930();
      uint64_t v58 = v70;
      sub_21FA268B0();
      uint64_t v59 = v69;
      char v60 = sub_21FA25C50();
      v29(v58, a4);
      uint64_t v43 = v65;
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v65, v59, a4);
      if (v60) {
        goto LABEL_34;
      }
      int64_t v61 = v75;
      uint64_t v62 = sub_21FA263A0();
      v29(v43, a4);
      uint64_t v35 = v72;
    }
    while (v62 < v61);
  }
LABEL_8:
  uint64_t v40 = sub_21FA263B0();
  v33(v35, v28, a4);
  if (v40 < 65)
  {
    uint64_t v47 = sub_21FA263B0();
    v29(v35, a4);
    if (v47 != 64 || (sub_21FA263C0() & 1) != 0) {
      goto LABEL_20;
    }
  }
  else
  {
    v29(v35, a4);
  }
  v33(v73, v28, a4);
  int64_t v75 = 0x7FFFFFFFFFFFFFFFLL;
  char v41 = sub_21FA263C0();
  uint64_t v42 = sub_21FA263B0();
  if ((v41 & 1) == 0)
  {
    if (v42 > 63)
    {
      uint64_t v74 = 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v43 = v70;
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v70, v73, a4);
      sub_21F97A8D4();
      uint64_t v49 = v67;
      sub_21FA26360();
      char v45 = sub_21FA25C50();
      v29(v49, a4);
      char v46 = v43;
      goto LABEL_19;
    }
LABEL_17:
    uint64_t v48 = v73;
    sub_21FA263A0();
    v29(v48, a4);
LABEL_20:
    uint64_t v50 = sub_21FA263A0();
    v29(v28, a4);
    return v50;
  }
  if (v42 <= 64) {
    goto LABEL_17;
  }
  sub_21F97A8D4();
  uint64_t v43 = v70;
  sub_21FA26360();
  uint64_t v44 = v73;
  char v45 = sub_21FA25C50();
  v29(v43, a4);
  char v46 = v44;
LABEL_19:
  v29(v46, a4);
  if ((v45 & 1) == 0) {
    goto LABEL_20;
  }
  __break(1u);
LABEL_34:
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v29)(v43, a4);
  __break(1u);
  return result;
}

BOOL sub_21F975FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for NumberBins.UniformStorage();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v30 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v28 = (char *)v27 - v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v27 - v13;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)v27 - v16;
  v27[1] = *(void *)(a4 + 8);
  char v18 = sub_21FA25CE0();
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v29 = a1;
  v19(v17, a1, v7);
  uint64_t v31 = a2;
  v19(v14, a2, v7);
  if (v18) {
    char v20 = sub_21FA25CE0();
  }
  else {
    char v20 = 0;
  }
  uint64_t v21 = *(void (**)(char *, uint64_t))(v8 + 8);
  v21(v14, v7);
  v21(v17, v7);
  uint64_t v22 = v28;
  v19(v28, v29, v7);
  uint64_t v23 = v30;
  v19(v30, v31, v7);
  if (v20)
  {
    uint64_t v24 = *(void *)&v22[*(int *)(v7 + 48)];
    v21(v22, v7);
    uint64_t v25 = *(void *)&v23[*(int *)(v7 + 48)];
    v21(v23, v7);
    return v24 == v25;
  }
  else
  {
    v21(v23, v7);
    v21(v22, v7);
    return 0;
  }
}

uint64_t _s6Charts10NumberBinsV2eeoiySbACyxG_AEtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v39 = a1;
  uint64_t v40 = a2;
  uint64_t v8 = type metadata accessor for NumberBins.UniformStorage();
  uint64_t v36 = *(void *)(v8 - 8);
  uint64_t v37 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v33 = (char *)&v33 - v9;
  uint64_t v34 = a4;
  uint64_t v35 = a3;
  uint64_t v10 = type metadata accessor for NumberBins.Storage();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v33 - v15;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v18 = *(void *)(TupleTypeMetadata2 - 8);
  __n128 v19 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v21 = (char *)&v33 - v20;
  uint64_t v23 = (char *)&v33 + *(int *)(v22 + 48) - v20;
  uint64_t v38 = v11;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16);
  v24((char *)&v33 - v20, v39, v10, v19);
  ((void (*)(char *, uint64_t, uint64_t))v24)(v23, v40, v10);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      ((void (*)(char *, char *, uint64_t))v24)(v13, v21, v10);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        char v26 = sub_21FA25F40();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_12:
        uint64_t v18 = v38;
        goto LABEL_13;
      }
      swift_bridgeObjectRelease();
    }
    else if (swift_getEnumCaseMultiPayload() == 2)
    {
      char v26 = 1;
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v40 = a5;
    uint64_t v27 = v36;
    uint64_t v28 = v37;
    ((void (*)(char *, char *, uint64_t))v24)(v16, v21, v10);
    if (!swift_getEnumCaseMultiPayload())
    {
      uint64_t v29 = v27;
      uint64_t v30 = (uint64_t)v33;
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v33, v23, v28);
      char v26 = sub_21F975FAC((uint64_t)v16, v30, v35, v34);
      uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
      v31(v30, v28);
      v31((uint64_t)v16, v28);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v16, v28);
  }
  char v26 = 0;
  uint64_t v10 = TupleTypeMetadata2;
LABEL_13:
  (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v10);
  return v26 & 1;
}

BOOL sub_21F976604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21F975FAC(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t sub_21F976614(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return _s6Charts10NumberBinsV2eeoiySbACyxG_AEtFZ_0(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t NumberBins.init(thresholds:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  type metadata accessor for NumberBins.Storage();

  return swift_storeEnumTagMultiPayload();
}

uint64_t NumberBins.init<>(size:range:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v108 = a2;
  uint64_t v103 = a5;
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v111 = *(void *)(*(void *)(a4 + 32) + 8);
  uint64_t v9 = type metadata accessor for NumberBins.Storage();
  uint64_t v101 = *(void *)(v9 - 8);
  uint64_t v102 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v100 = (uint64_t)v93 - v10;
  uint64_t v95 = *(void *)(v8 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  v93[1] = (char *)v93 - v11;
  uint64_t v12 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v96 = (char *)v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v106 = (char *)v93 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v104 = (char *)v93 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v105 = (char *)v93 - v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v98 = (char *)v93 - v22;
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)v93 - v24;
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)v93 - v27;
  MEMORY[0x270FA5388](v29);
  __n128 v114 = (char *)v93 - v30;
  MEMORY[0x270FA5388](v31);
  uint64_t v113 = (void (*)(char *, uint64_t))((char *)v93 - v32);
  MEMORY[0x270FA5388](v33);
  uint64_t v107 = (char *)v93 - v34;
  MEMORY[0x270FA5388](v35);
  uint64_t v112 = (uint64_t)v93 - v36;
  __n128 v38 = MEMORY[0x270FA5388](v37);
  uint64_t v40 = (char *)v93 - v39;
  char v41 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  uint64_t v109 = a1;
  uint64_t v110 = v12 + 16;
  __n128 v115 = v41;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v41)((char *)v93 - v39, a1, a3, v38);
  char v42 = sub_21FA263C0();
  uint64_t v43 = sub_21FA263B0();
  uint64_t v97 = v12;
  if (v42)
  {
    if (v43 > 64) {
      goto LABEL_3;
    }
LABEL_6:
    char v45 = (void (*)(char *, uint64_t))sub_21FA263A0();
    __n128 v116 = *(void (**)(char *, uint64_t))(v12 + 8);
    v116(v40, a3);
    if ((uint64_t)v45 > 0) {
      goto LABEL_7;
    }
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v43 <= 63) {
    goto LABEL_6;
  }
LABEL_3:
  int64_t v118 = 0;
  sub_21F97A8D4();
  uint64_t v44 = v114;
  sub_21FA26360();
  LODWORD(v99) = sub_21FA25C50();
  char v45 = (void (*)(char *, uint64_t))v8;
  char v46 = *(void (**)(char *, uint64_t))(v12 + 8);
  v46(v44, a3);
  __n128 v116 = v46;
  v46(v40, a3);
  if ((v99 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_7:
  sub_21F974668(v109, a3, a4, v112);
  uint64_t v99 = sub_21FA25CC0();
  uint64_t v47 = v114;
  sub_21FA26710();
  uint64_t v48 = v107;
  sub_21FA26390();
  v116(v47, a3);
  uint64_t v49 = v48;
  uint64_t v50 = v115;
  v115(v28, v49, a3);
  char v51 = sub_21FA263C0();
  char v52 = v28;
  v50(v25, v28, a3);
  if ((v51 & 1) == 0)
  {
    v116(v25, a3);
    uint64_t v55 = v104;
    uint64_t v54 = v105;
    goto LABEL_13;
  }
  uint64_t v53 = sub_21FA263B0();
  v116(v25, a3);
  uint64_t v55 = v104;
  uint64_t v54 = v105;
  if (v53 <= 64) {
    goto LABEL_13;
  }
  char v56 = v98;
  v115(v98, v52, a3);
  int64_t v118 = 0x8000000000000000;
  if ((sub_21FA263C0() & 1) == 0)
  {
    char v83 = sub_21FA263C0();
    uint64_t v84 = sub_21FA263B0();
    if ((v83 & 1) == 0)
    {
      if (v84 >= 64)
      {
        v116(v56, a3);
        goto LABEL_13;
      }
      goto LABEL_38;
    }
    if (v84 <= 64) {
      goto LABEL_40;
    }
LABEL_34:
    sub_21F97A8D4();
    unint64_t v85 = v56;
    char v56 = v114;
    sub_21FA26360();
    LODWORD(v96) = sub_21FA25C50();
    unint64_t v86 = v116;
    v116(v56, a3);
    v86(v85, a3);
    if (v96) {
      goto LABEL_39;
    }
    goto LABEL_13;
  }
  if (sub_21FA263B0() >= 64) {
    goto LABEL_34;
  }
LABEL_38:
  uint64_t v87 = sub_21FA263A0();
  v116(v56, a3);
  if (v87 < v118)
  {
LABEL_39:
    do
    {
      __break(1u);
LABEL_40:
      swift_getAssociatedConformanceWitness();
      sub_21FA26930();
      int v88 = v114;
      sub_21FA268B0();
      char v89 = sub_21FA25C50();
      v116(v88, a3);
      char v45 = (void (*)(char *, uint64_t))v96;
      (*(void (**)(char *, char *, uint64_t))(v97 + 32))(v96, v56, a3);
      if (v89) {
        goto LABEL_47;
      }
      int64_t v90 = v118;
      uint64_t v91 = sub_21FA263A0();
      v116((char *)v45, a3);
      BOOL v92 = v91 < v90;
      uint64_t v54 = v105;
    }
    while (v92);
  }
LABEL_13:
  uint64_t v57 = sub_21FA263B0();
  v115(v54, v52, a3);
  if (v57 < 65)
  {
    uint64_t v63 = sub_21FA263B0();
    v116(v54, a3);
    if (v63 != 64 || (sub_21FA263C0() & 1) != 0)
    {
LABEL_25:
      uint64_t v66 = sub_21FA263A0();
      v116(v52, a3);
      char v67 = sub_21FA263C0();
      uint64_t v68 = v113;
      uint64_t v69 = sub_21FA263B0();
      if (v67)
      {
        if (v69 >= 65)
        {
LABEL_27:
          int64_t v118 = 0;
          sub_21F97A8D4();
          uint64_t v70 = v114;
          char v45 = (void (*)(char *, uint64_t))a3;
          sub_21FA26360();
          char v71 = sub_21FA25C50();
          uint64_t v72 = v70;
          uint64_t v73 = a3;
          v116(v72, a3);
          goto LABEL_30;
        }
      }
      else if (v69 > 63)
      {
        goto LABEL_27;
      }
      char v45 = v68;
      uint64_t v73 = a3;
      char v71 = sub_21FA263A0() > 0;
LABEL_30:
      a3 = v66 + (v71 & 1);
      if (!__OFADD__(v66, v71 & 1))
      {
        uint64_t v74 = (void (*)(char *, uint64_t, uint64_t))v115;
        uint64_t v75 = v109;
        uint64_t v76 = (void (*)(uint64_t, uint64_t))v116;
        uint64_t v77 = a4;
        uint64_t v78 = v114;
        ((void (*)(void))v115)();
        uint64_t v79 = v106;
        v74(v106, v112, v73);
        uint64_t v80 = v100;
        sub_21F97530C(v78, v79, a3, v73, v77, v100);
        (*(void (**)(uint64_t))(*(void *)(v99 - 8) + 8))(v108);
        v76(v75, v73);
        v76((uint64_t)v113, v73);
        v76((uint64_t)v107, v73);
        v76(v112, v73);
        uint64_t v81 = v102;
        swift_storeEnumTagMultiPayload();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v101 + 32))(v103, v80, v81);
      }
      goto LABEL_45;
    }
  }
  else
  {
    v116(v54, a3);
  }
  v115(v55, v52, a3);
  int64_t v118 = 0x7FFFFFFFFFFFFFFFLL;
  char v58 = sub_21FA263C0();
  uint64_t v59 = sub_21FA263B0();
  if (v58)
  {
    if (v59 > 64)
    {
      sub_21F97A8D4();
      char v60 = v114;
      sub_21FA26360();
      char v61 = sub_21FA25C50();
      char v45 = v116;
      v116(v60, a3);
      uint64_t v62 = v55;
      goto LABEL_24;
    }
LABEL_22:
    sub_21FA263A0();
    v116(v55, a3);
    goto LABEL_25;
  }
  if (v59 <= 63) {
    goto LABEL_22;
  }
  uint64_t v117 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v64 = v114;
  (*(void (**)(char *, char *, uint64_t))(v97 + 32))(v114, v55, a3);
  sub_21F97A8D4();
  uint64_t v65 = v106;
  sub_21FA26360();
  char v61 = sub_21FA25C50();
  char v45 = v116;
  v116(v65, a3);
  uint64_t v62 = v64;
LABEL_24:
  v45(v62, a3);
  if ((v61 & 1) == 0) {
    goto LABEL_25;
  }
LABEL_46:
  __break(1u);
LABEL_47:
  uint64_t result = ((uint64_t (*)(void, uint64_t))v116)(v45, a3);
  __break(1u);
  return result;
}

void NumberBins.init<>(range:count:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v38 = a1;
  uint64_t v39 = a5;
  uint64_t v36 = a4;
  uint64_t v35 = *(void *)(*(void *)(*(void *)(a4 + 16) + 16) + 8);
  uint64_t v7 = type metadata accessor for NumberBins.Storage();
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v32 - v8;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v32 - v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v32 - v18;
  MEMORY[0x270FA5388](v20);
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v24 = a2;
    uint64_t v25 = (char *)&v32 - v22;
    uint64_t v34 = v23;
    uint64_t v37 = v21;
    uint64_t v26 = sub_21FA25CC0();
    if (v24)
    {
      uint64_t v33 = v9;
      uint64_t v27 = v38;
      uint64_t v35 = v26;
      sub_21FA26710();
      uint64_t v32 = v24;
      sub_21FA25B50();
      sub_21FA25B20();
      uint64_t v28 = *(void (**)(char *, uint64_t))(v10 + 8);
      v28(v16, a3);
      v28(v19, a3);
      uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
      v29(v19, v27, a3);
      v29(v16, (uint64_t)v25, a3);
      v29(v13, (uint64_t)v19, a3);
      uint64_t v30 = (uint64_t)v33;
      sub_21F974BA0(v16, v13, v32, a3, v36, (uint64_t)v33);
      (*(void (**)(uint64_t))(*(void *)(v35 - 8) + 8))(v27);
      v28(v19, a3);
      v28(v25, a3);
      uint64_t v31 = v37;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v39, v30, v31);
    }
    else
    {
      (*(void (**)(uint64_t))(*(void *)(v26 - 8) + 8))(v38);
      swift_storeEnumTagMultiPayload();
    }
  }
}

uint64_t NumberBins.init<>(range:count:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v85 = a5;
  uint64_t v9 = *(void *)(a4 + 24);
  uint64_t v73 = *(void *)(v9 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  v70[1] = (char *)v70 - v10;
  uint64_t v11 = *(void *)(*(void *)(a4 + 32) + 8);
  uint64_t v12 = sub_21FA25CC0();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v81 = (char *)v70 - v14;
  uint64_t v72 = v11;
  uint64_t v15 = type metadata accessor for NumberBins.Storage();
  MEMORY[0x270FA5388](v15);
  uint64_t v87 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v16);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)v70 - v18;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)v70 - v21;
  MEMORY[0x270FA5388](v23);
  uint64_t v80 = (char *)v70 - v24;
  MEMORY[0x270FA5388](v25);
  unint64_t v86 = (char *)v70 - v26;
  __n128 v33 = MEMORY[0x270FA5388](v27);
  uint64_t v35 = (char *)v70 - v34;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v84 = v28;
  if (v30)
  {
    v70[0] = v29;
    uint64_t v75 = v32;
    uint64_t v76 = v31;
    uint64_t v88 = v13;
    uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16);
    uint64_t v37 = v81;
    uint64_t v77 = a1;
    uint64_t v38 = v30;
    v36(v81, a1, v12, v33);
    uint64_t v83 = v12;
    uint64_t v74 = *(void *)(v9 + 8);
    sub_21FA26710();
    uint64_t v82 = v38;
    uint64_t v89 = v38;
    unint64_t v39 = sub_21F97A8D4();
    uint64_t v40 = v86;
    uint64_t v78 = v39;
    sub_21FA263E0();
    sub_21FA26380();
    char v41 = *(void (**)(char *, uint64_t))(v87 + 8);
    v41(v40, a3);
    v41(v35, a3);
    char v42 = sub_21FA263C0();
    uint64_t v79 = v41;
    if (v42)
    {
      if (sub_21FA263B0() < 64)
      {
        uint64_t v43 = sub_21FA263A0();
        v41(v19, a3);
        uint64_t v44 = v88 + 8;
        uint64_t v81 = *(char **)(v88 + 8);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v81)(v37, v83);
        if (v43) {
          goto LABEL_27;
        }
        goto LABEL_14;
      }
      uint64_t v89 = 0;
      sub_21FA26360();
      char v54 = sub_21FA25CE0();
      v41(v35, a3);
      v41(v19, a3);
      uint64_t v44 = v88 + 8;
      uint64_t v81 = *(char **)(v88 + 8);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v81)(v37, v83);
      if (v54)
      {
LABEL_14:
        uint64_t v88 = v44 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
LABEL_24:
        uint64_t v63 = v77;
        uint64_t v64 = v80;
        sub_21FA26710();
        uint64_t v65 = v86;
        sub_21FA263E0();
        uint64_t v89 = v82;
        sub_21FA263E0();
        sub_21FA26370();
        uint64_t v66 = v79;
        v79(v64, a3);
        v66(v65, a3);
        uint64_t v78 = a4;
        char v67 = *(void (**)(char *, uint64_t, uint64_t))(v87 + 16);
        v67(v65, v63, a3);
        v67(v64, (uint64_t)v35, a3);
        v67(v22, (uint64_t)v65, a3);
        uint64_t v68 = v75;
        sub_21F97530C(v64, v22, v82, a3, v78, v75);
        ((void (*)(uint64_t, uint64_t))v81)(v63, v83);
        v66(v65, a3);
        v66(v35, a3);
        uint64_t v69 = v84;
        swift_storeEnumTagMultiPayload();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v76 + 32))(v85, v68, v69);
      }
LABEL_27:
      __break(1u);
      return result;
    }
    char v46 = sub_21FA263C0();
    uint64_t v47 = sub_21FA263B0();
    if ((v46 & 1) == 0)
    {
      uint64_t v55 = v88;
      if (v47 < 64)
      {
        uint64_t v56 = sub_21FA263A0();
        v79(v19, a3);
        uint64_t v57 = *(char **)(v55 + 8);
        uint64_t v51 = v55 + 8;
        uint64_t v81 = v57;
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v57)(v37, v83);
        if (v56) {
          goto LABEL_27;
        }
        goto LABEL_23;
      }
      uint64_t v89 = 0;
      sub_21FA26360();
      char v48 = sub_21FA25CE0();
      char v60 = v37;
      char v61 = v79;
      v79(v35, a3);
      v61(v19, a3);
      uint64_t v62 = *(char **)(v55 + 8);
      uint64_t v51 = v55 + 8;
      uint64_t v50 = v62;
      uint64_t v53 = v60;
      goto LABEL_22;
    }
    uint64_t v13 = v88;
    if (v47 > 64)
    {
      uint64_t v89 = 0;
      sub_21FA26360();
      char v48 = sub_21FA25CE0();
      uint64_t v49 = v79;
      v79(v35, a3);
      v49(v19, a3);
      char v52 = *(char **)(v13 + 8);
      uint64_t v51 = v13 + 8;
      uint64_t v50 = v52;
      uint64_t v53 = v81;
LABEL_22:
      uint64_t v81 = v50;
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v50)(v53, v83);
      if ((v48 & 1) == 0) {
        goto LABEL_27;
      }
LABEL_23:
      uint64_t v88 = v51 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      goto LABEL_24;
    }
    swift_getAssociatedConformanceWitness();
    sub_21FA26930();
    sub_21FA268B0();
    LODWORD(v73) = sub_21FA25C60();
    a2 = (unint64_t)v79;
    v79(v35, a3);
    uint64_t v9 = v70[0];
    (*(void (**)(void, char *, uint64_t))(v87 + 16))(v70[0], v19, a3);
    uint64_t v12 = v83;
    if (v73)
    {
      uint64_t v73 = sub_21FA263A0();
      ((void (*)(uint64_t, uint64_t))a2)(v9, a3);
      ((void (*)(char *, uint64_t))a2)(v19, a3);
      char v58 = *(char **)(v13 + 8);
      uint64_t v51 = v13 + 8;
      uint64_t v59 = v81;
      uint64_t v81 = v58;
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v58)(v59, v12);
      if (v73) {
        goto LABEL_27;
      }
      goto LABEL_23;
    }
LABEL_26:
    ((void (*)(uint64_t, uint64_t))a2)(v9, a3);
    ((void (*)(char *, uint64_t))a2)(v19, a3);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v81, v12);
    goto LABEL_27;
  }
  (*(void (**)(uint64_t, uint64_t, __n128))(v13 + 8))(a1, v12, v33);

  return swift_storeEnumTagMultiPayload();
}

uint64_t NumberBins.init<>(range:desiredCount:minimumStride:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v50 = a3;
  uint64_t v48 = a2;
  uint64_t v46 = a6;
  uint64_t v9 = sub_21FA25CC0();
  uint64_t v47 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  char v45 = (char *)&v44 - v10;
  uint64_t v11 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v44 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v44 - v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v44 - v18;
  __n128 v21 = MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v44 - v22;
  uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16);
  v51((char *)&v44 - v22, a1, a4, v21);
  uint64_t v24 = sub_21FA263B0();
  uint64_t v49 = v9;
  if (v24 < 65)
  {
    uint64_t v26 = v16;
    uint64_t v27 = a1;
    char v28 = sub_21FA263C0();
    uint64_t v29 = sub_21FA263A0();
    char v52 = *(void (**)(char *, uint64_t))(v11 + 8);
    v52(v23, a4);
    BOOL v30 = (v28 & 1) == 0;
    a1 = v27;
    uint64_t v16 = v26;
    uint64_t v9 = v49;
    if (v30) {
      double v25 = (double)(unint64_t)v29;
    }
    else {
      double v25 = (double)v29;
    }
  }
  else
  {
    sub_21F885234();
    sub_21F97A928();
    sub_21FA25A90();
    char v52 = *(void (**)(char *, uint64_t))(v11 + 8);
    v52(v23, a4);
    double v25 = v53;
  }
  ((void (*)(char *, uint64_t, uint64_t))v51)(v19, a1 + *(int *)(v9 + 36), a4);
  if (sub_21FA263B0() <= 64)
  {
    char v33 = sub_21FA263C0();
    uint64_t v34 = sub_21FA263A0();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v52)(v19, a4);
    if (v33) {
      double v32 = (double)v34;
    }
    else {
      double v32 = (double)(unint64_t)v34;
    }
  }
  else
  {
    sub_21F885234();
    sub_21F97A928();
    sub_21FA25A90();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v52)(v19, a4);
    double v32 = v53;
  }
  if (v25 > v32)
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v35 = v48 + 1;
  if (__OFADD__(v48, 1))
  {
LABEL_20:
    __break(1u);
    return result;
  }
  ((void (*)(char *, uint64_t, uint64_t))v51)(v16, v50, a4);
  if (sub_21FA263B0() <= 64)
  {
    char v38 = sub_21FA263C0();
    uint64_t v39 = sub_21FA263A0();
    uint64_t v36 = (void (*)(uint64_t, uint64_t))v52;
    v52(v16, a4);
    if (v38) {
      double v37 = (double)v39;
    }
    else {
      double v37 = (double)(unint64_t)v39;
    }
  }
  else
  {
    sub_21F885234();
    sub_21F97A928();
    sub_21FA25A90();
    uint64_t v36 = (void (*)(uint64_t, uint64_t))v52;
    v52(v16, a4);
    double v37 = v53;
  }
  double v53 = sub_21F973520(v35, 1, 1, v25, v32, fmax(v37, 1.0));
  sub_21F885234();
  uint64_t v40 = (uint64_t)v44;
  sub_21FA263D0();
  uint64_t v41 = v47;
  uint64_t v42 = (uint64_t)v45;
  uint64_t v43 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v45, a1, v49);
  NumberBins.init<>(size:range:)(v40, v42, a4, a5, v46);
  v36(v50, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8))(a1, v43);
}

uint64_t NumberBins.init<>(data:desiredCount:minimumStride:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v98 = a6;
  uint64_t v95 = a4;
  LODWORD(v88) = a3;
  uint64_t v78 = a2;
  uint64_t v94 = a7;
  TupleTypeMetadata2 = (char *)swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v82 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v81 = (char *)&v76 - v12;
  uint64_t v93 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v13);
  int64_t v90 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v89 = (char *)&v76 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v99 = (char *)&v76 - v18;
  uint64_t v19 = *(void *)(a6 + 16);
  uint64_t v87 = *(void *)(*(void *)(*(void *)(v19 + 16) + 8) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v86 = (char *)&v76 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v84 = (char *)&v76 - v23;
  MEMORY[0x270FA5388](v24);
  uint64_t v83 = (char *)&v76 - v25;
  uint64_t v85 = *(void *)(*(void *)(v19 + 24) + 8);
  uint64_t v26 = sub_21FA25CC0();
  uint64_t v91 = sub_21FA26340();
  uint64_t v96 = *(void *)(v91 - 8);
  MEMORY[0x270FA5388](v91);
  uint64_t v77 = (char *)&v76 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  BOOL v30 = (char *)&v76 - v29;
  uint64_t v31 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v32);
  uint64_t v97 = (char *)&v76 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v34);
  uint64_t v36 = (char *)&v76 - v35;
  MEMORY[0x270FA5388](v37);
  uint64_t v80 = (char *)&v76 - v38;
  MEMORY[0x270FA5388](v39);
  uint64_t v79 = (char *)&v76 - v40;
  MEMORY[0x270FA5388](v41);
  uint64_t v43 = (char *)&v76 - v42;
  uint64_t v44 = a1;
  uint64_t v100 = a1;
  uint64_t v45 = sub_21FA25F30();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v47 = v45;
  uint64_t v48 = v98;
  sub_21F811650(v47, WitnessTable, v98, (uint64_t)v30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v30, 1, v26) == 1)
  {
    uint64_t v88 = v31;
    uint64_t v97 = (char *)v26;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v96 + 8))(v30, v91);
    swift_getAssociatedConformanceWitness();
    sub_21FA26930();
    sub_21FA268B0();
    sub_21FA26930();
    uint64_t v49 = v89;
    sub_21FA268B0();
    sub_21FA26930();
    uint64_t v50 = v90;
    sub_21FA268B0();
    uint64_t result = sub_21FA25C70();
    if (result)
    {
      char v52 = v81;
      uint64_t v53 = v93;
      uint64_t v54 = (uint64_t)TupleTypeMetadata2;
      uint64_t v55 = &v81[*((int *)TupleTypeMetadata2 + 12)];
      uint64_t v56 = *(void (**)(char *, char *, uint64_t))(v93 + 32);
      v56(v81, v49, a5);
      v56(v55, v50, a5);
      uint64_t v57 = v82;
      char v58 = &v82[*(int *)(v54 + 48)];
      uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v53 + 16);
      v59(v82, v52, a5);
      v59(v58, v55, a5);
      char v60 = v80;
      v56(v80, v57, a5);
      char v61 = *(void (**)(char *, uint64_t))(v53 + 8);
      v61(v58, a5);
      uint64_t v62 = &v57[*((int *)TupleTypeMetadata2 + 12)];
      v56(v57, v52, a5);
      v56(v62, v55, a5);
      uint64_t v63 = v97;
      v56(&v60[*((int *)v97 + 9)], v62, a5);
      v61(v57, a5);
      uint64_t v64 = (uint64_t)v79;
      (*(void (**)(char *, char *, char *))(v88 + 32))(v79, v60, v63);
      NumberBins.init<>(size:range:)(v99, v64, a5, v98, v94);
      return ((uint64_t (*)(uint64_t, uint64_t))v61)(v95, a5);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    uint64_t v65 = v96;
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v43, v30, v26);
    uint64_t v66 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    TupleTypeMetadata2 = v36;
    v66(v36, v43, v26);
    v66(v97, v43, v26);
    if (v88)
    {
      uint64_t v69 = (uint64_t)v77;
      int64_t v90 = v43;
      uint64_t v70 = v97;
      v66(v77, v97, v26);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56))(v69, 0, 1, v26);
      uint64_t v71 = sub_21F814B90(v69, v44, a5, v48);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v69, v91);
      if (v71 >= 200) {
        uint64_t v68 = 200;
      }
      else {
        uint64_t v68 = v71;
      }
      char v67 = *(void (**)(char *, uint64_t))(v31 + 8);
      uint64_t v72 = v70;
      uint64_t v43 = v90;
      v67(v72, v26);
    }
    else
    {
      char v67 = *(void (**)(char *, uint64_t))(v31 + 8);
      v67(v97, v26);
      swift_bridgeObjectRelease();
      uint64_t v68 = v78;
    }
    uint64_t v73 = v93;
    uint64_t v74 = v99;
    uint64_t v75 = v95;
    (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v99, v95, a5);
    NumberBins.init<>(range:desiredCount:minimumStride:)((uint64_t)TupleTypeMetadata2, v68, (uint64_t)v74, a5, v48, v94);
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v75, a5);
    return ((uint64_t (*)(char *, uint64_t))v67)(v43, v26);
  }
  return result;
}

uint64_t NumberBins.init<>(data:desiredCount:minimumStride:)@<X0>(double a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v119 = a4;
  LODWORD(v115) = a3;
  uint64_t v100 = a2;
  uint64_t v118 = a7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v104 = (char *)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v103 = (char *)&v96 - v12;
  uint64_t v120 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v99 = (char *)&v96 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v98 = (char *)&v96 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v113 = (uint64_t)&v96 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v112 = (char *)&v96 - v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v121 = (uint64_t)&v96 - v22;
  uint64_t v111 = *(void *)(*(void *)(a6 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v110 = (char *)&v96 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v108 = (char *)&v96 - v26;
  MEMORY[0x270FA5388](v27);
  uint64_t v107 = (char *)&v96 - v28;
  uint64_t v122 = a6;
  uint64_t v29 = *(void *)(*(void *)(a6 + 32) + 8);
  uint64_t v30 = sub_21FA25CC0();
  uint64_t v106 = sub_21FA26340();
  uint64_t v105 = *(void *)(v106 - 8);
  MEMORY[0x270FA5388](v106);
  uint64_t v32 = (char *)&v96 - v31;
  uint64_t v33 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v34);
  __n128 v114 = (char *)&v96 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v36);
  __n128 v116 = (char *)&v96 - v37;
  MEMORY[0x270FA5388](v38);
  uint64_t v102 = (char *)&v96 - v39;
  MEMORY[0x270FA5388](v40);
  uint64_t v101 = (char *)&v96 - v41;
  MEMORY[0x270FA5388](v42);
  uint64_t v44 = (char *)&v96 - v43;
  double v45 = a1;
  double v123 = a1;
  uint64_t v46 = sub_21FA25F30();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v109 = v29;
  sub_21F812D68(v46, WitnessTable, v29, (uint64_t)v32);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v32, 1, v30) == 1)
  {
    uint64_t v100 = v33;
    uint64_t v115 = v30;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v105 + 8))(v32, v106);
    swift_getAssociatedConformanceWitness();
    sub_21FA26930();
    sub_21FA268B0();
    sub_21FA26930();
    uint64_t v48 = v112;
    sub_21FA268B0();
    sub_21FA26930();
    uint64_t v49 = v113;
    sub_21FA268B0();
    uint64_t result = sub_21FA25C70();
    if (result)
    {
      uint64_t v51 = TupleTypeMetadata2;
      char v52 = v103;
      uint64_t v53 = &v103[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v54 = v120;
      uint64_t v55 = *(void (**)(char *, char *, uint64_t))(v120 + 32);
      v55(v103, v48, a5);
      v55(v53, (char *)v49, a5);
      uint64_t v56 = *(int *)(v51 + 48);
      uint64_t v57 = v104;
      char v58 = &v104[v56];
      uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
      v59(v104, v52, a5);
      v59(v58, v53, a5);
      char v60 = v102;
      v55(v102, v57, a5);
      char v61 = *(void (**)(char *, uint64_t))(v54 + 8);
      v61(v58, a5);
      uint64_t v62 = &v57[*(int *)(TupleTypeMetadata2 + 48)];
      v55(v57, v52, a5);
      v55(v62, v53, a5);
      uint64_t v63 = v115;
      v55(&v60[*(int *)(v115 + 36)], v62, a5);
      v61(v57, a5);
      uint64_t v64 = (uint64_t)v101;
      (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v101, v60, v63);
      NumberBins.init<>(size:range:)(v121, v64, a5, v122, v118);
      return ((uint64_t (*)(uint64_t, uint64_t))v61)(v119, a5);
    }
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v65 = (*(uint64_t (**)(char *, char *, uint64_t))(v33 + 32))(v44, v32, v30);
  double v123 = v45;
  MEMORY[0x270FA5388](v65);
  uint64_t v66 = v122;
  *(&v96 - 2) = a5;
  *(&v96 - 1) = v66;
  uint64_t v67 = swift_getWitnessTable();
  uint64_t v69 = sub_21F751B50((void (*)(char *, char *))sub_21F97A97C, (uint64_t)(&v96 - 4), v46, MEMORY[0x263F8D538], MEMORY[0x263F8E628], v67, MEMORY[0x263F8E658], v68);
  swift_bridgeObjectRelease();
  uint64_t v70 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
  uint64_t v71 = (uint64_t)v116;
  v70(v116, v44, v30);
  uint64_t v72 = v114;
  v70(v114, v44, v30);
  uint64_t v97 = v44;
  if ((v115 & 1) == 0)
  {
    uint64_t v73 = *(void (**)(char *, uint64_t))(v33 + 8);
    uint64_t v74 = v72;
    uint64_t v75 = v30;
    v73(v74, v30);
    swift_bridgeObjectRelease();
    uint64_t v76 = v120;
    uint64_t v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(v120 + 16);
    uint64_t v78 = v100;
LABEL_23:
    uint64_t v94 = v121;
    uint64_t v95 = v119;
    v77(v121, v119, a5);
    NumberBins.init<>(range:desiredCount:minimumStride:)(v71, v78, v94, a5, v122, v118);
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v95, a5);
    return ((uint64_t (*)(char *, uint64_t))v73)(v97, v75);
  }
  uint64_t v113 = v69;
  uint64_t v115 = v30;
  uint64_t v100 = v33;
  uint64_t v76 = v120;
  uint64_t v79 = v98;
  TupleTypeMetadata2 = *(void *)(v120 + 16);
  ((void (*)(char *, char *, uint64_t))TupleTypeMetadata2)(v98, v72, a5);
  if (sub_21FA263B0() < 65)
  {
    char v83 = sub_21FA263C0();
    uint64_t v84 = sub_21FA263A0();
    uint64_t v80 = *(void (**)(char *, uint64_t))(v76 + 8);
    v80(v79, a5);
    if (v83) {
      double v81 = (double)v84;
    }
    else {
      double v81 = (double)(unint64_t)v84;
    }
    uint64_t v82 = v115;
  }
  else
  {
    sub_21F885234();
    sub_21F97A928();
    sub_21FA25A90();
    uint64_t v80 = *(void (**)(char *, uint64_t))(v76 + 8);
    v80(v79, a5);
    double v81 = v123;
    uint64_t v82 = v115;
  }
  uint64_t v85 = v99;
  ((void (*)(char *, char *, uint64_t))TupleTypeMetadata2)(v99, &v72[*(int *)(v82 + 36)], a5);
  if (sub_21FA263B0() <= 64)
  {
    uint64_t v88 = v116;
    uint64_t v89 = v85;
    char v90 = sub_21FA263C0();
    uint64_t v91 = sub_21FA263A0();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v80)(v89, a5);
    if (v90) {
      double v86 = (double)v91;
    }
    else {
      double v86 = (double)(unint64_t)v91;
    }
    uint64_t v87 = v88;
    uint64_t v72 = v114;
  }
  else
  {
    sub_21F885234();
    sub_21F97A928();
    sub_21FA25A90();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v80)(v85, a5);
    double v86 = v123;
    uint64_t v87 = v116;
  }
  if (v81 <= v86)
  {
    uint64_t v71 = (uint64_t)v87;
    uint64_t v92 = sub_21F90FFD8(*(uint64_t *)&v81, *(uint64_t *)&v86, 0, v113);
    swift_bridgeObjectRelease();
    if (v92 >= 200) {
      uint64_t v78 = 200;
    }
    else {
      uint64_t v78 = v92;
    }
    uint64_t v73 = *(void (**)(char *, uint64_t))(v100 + 8);
    uint64_t v93 = v72;
    uint64_t v75 = v115;
    v73(v93, v115);
    uint64_t v77 = (void (*)(uint64_t, uint64_t, uint64_t))TupleTypeMetadata2;
    goto LABEL_23;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_21F979A58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 - 8);
  __n128 v6 = MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v5 + 16))(v8, v6);
  if (sub_21FA263B0() < 65)
  {
    char v11 = sub_21FA263C0();
    uint64_t v12 = sub_21FA263A0();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, a2);
    if (v11) {
      double v10 = (double)v12;
    }
    else {
      double v10 = (double)(unint64_t)v12;
    }
  }
  else
  {
    sub_21F885234();
    sub_21F97A928();
    sub_21FA25A90();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, a2);
    double v10 = *(double *)&v13[1];
  }
  *a3 = v10;
  return result;
}

Swift::Int __swiftcall NumberBins.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t NumberBins.startIndex.getter()
{
  return 0;
}

uint64_t NumberBins.endIndex.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = type metadata accessor for NumberBins.UniformStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v17 - v6;
  uint64_t v8 = type metadata accessor for NumberBins.Storage();
  __n128 v9 = MEMORY[0x270FA5388](v8);
  char v11 = (uint64_t *)((char *)&v17 - v10);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))((char *)&v17 - v10, v2, v8, v9);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload) {
    goto LABEL_6;
  }
  uint64_t v14 = 0;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v4 = *v11;
    uint64_t v15 = MEMORY[0x223C55340](*v11, v3);
    swift_bridgeObjectRelease();
    uint64_t v14 = v15 - 1;
    if (__OFSUB__(v15, 1))
    {
      __break(1u);
LABEL_6:
      (*(void (**)(char *, uint64_t *, uint64_t))(v5 + 32))(v7, v11, v4);
      uint64_t v14 = *(void *)&v7[*(int *)(v4 + 48)];
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
  }
  return v14;
}

uint64_t sub_21F979DF8(uint64_t a1, uint64_t a2, void *a3)
{
  return static NumberBins.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t sub_21F979E08@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = NumberBins.endIndex.getter(a1);
  *a2 = result;
  return result;
}

void (*sub_21F979E30(uint64_t **a1, uint64_t *a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_21F979EA0(v6, *a2, a3);
  return sub_21F80EA18;
}

void (*sub_21F979EA0(uint64_t *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = type metadata accessor for ChartBinRange();
  *a1 = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  a1[1] = v7;
  uint64_t v8 = malloc(*(void *)(v7 + 64));
  a1[2] = (uint64_t)v8;
  NumberBins.subscript.getter(a2, a3, (uint64_t)v8);
  return sub_21F8AFF38;
}

uint64_t sub_21F979F70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 32))(a2, v3, a1);
  swift_getWitnessTable();
  uint64_t result = sub_21FA266B0();
  *(void *)(a2 + *(int *)(result + 36)) = 0;
  return result;
}

uint64_t sub_21F979FFC(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t sub_21F97A050(uint64_t a1)
{
  swift_getWitnessTable();
  uint64_t v3 = sub_21F8B0C04();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8))(v1, a1);
  return v3;
}

uint64_t sub_21F97A0DC(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v41 = a1;
  int v49 = a3;
  LODWORD(v46) = a2;
  uint64_t v5 = sub_21FA26890();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v48 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v38 - v9;
  uint64_t v11 = *(void *)(a4 + 16);
  uint64_t v44 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v42 = (char *)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v43 = (char *)v38 - v15;
  MEMORY[0x270FA5388](v16);
  double v45 = (char *)v38 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)v38 - v19;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)v38 - v22;
  uint64_t v47 = *(void *)(a4 + 24);
  sub_21FA25B20();
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  uint64_t v40 = v24;
  unsigned int v25 = *MEMORY[0x263F8E220];
  unsigned int v39 = *MEMORY[0x263F8E220];
  unsigned int v26 = *MEMORY[0x263F8E218];
  if (v46) {
    uint64_t v27 = v25;
  }
  else {
    uint64_t v27 = v26;
  }
  v24(v10, v27, v5);
  sub_21FA25B30();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v6 + 8);
  v38[1] = v6 + 8;
  uint64_t v46 = v28;
  uint64_t v29 = v5;
  v28(v10, v5);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v44 + 8);
  v30(v20, v11);
  sub_21FA25CC0();
  uint64_t v31 = v43;
  sub_21FA25B20();
  if (v49) {
    uint64_t v32 = v26;
  }
  else {
    uint64_t v32 = v39;
  }
  uint64_t v33 = v45;
  uint64_t v34 = v48;
  v40(v48, v32, v29);
  sub_21FA25B30();
  v46(v34, v29);
  v30(v31, v11);
  uint64_t v35 = v42;
  sub_21FA26710();
  sub_21F8158A8();
  sub_21FA266D0();
  if (v51) {
    goto LABEL_11;
  }
  v30(v35, v11);
  uint64_t v36 = v50;
  v30(v33, v11);
  v30(v23, v11);
  uint64_t result = v36 + 1;
  if (__OFADD__(v36, 1))
  {
    __break(1u);
LABEL_11:
    uint64_t v50 = 0;
    unint64_t v51 = 0xE000000000000000;
    sub_21FA26510();
    sub_21FA26B00();
    sub_21FA25D40();
    swift_bridgeObjectRelease();
    sub_21FA25D40();
    sub_21FA25D40();
    sub_21FA25D40();
    uint64_t result = sub_21FA266E0();
    __break(1u);
  }
  return result;
}

uint64_t sub_21F97A5CC(uint64_t a1, int a2, int a3, uint64_t a4)
{
  return sub_21F97A0DC(a1, a2, a3, a4);
}

uint64_t sub_21F97A5E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  sub_21FA26930();
  sub_21FA268B0();
  char v7 = sub_21FA25C40();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, a2);
  return v7 & 1;
}

uint64_t sub_21F97A7A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  char v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a3, v7, a2);
}

uint64_t sub_21F97A88C()
{
  return sub_21FA25CE0() & 1;
}

uint64_t sub_21F97A8C8()
{
  return sub_21F97A88C();
}

unint64_t sub_21F97A8D4()
{
  unint64_t result = qword_267EE96D0;
  if (!qword_267EE96D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE96D0);
  }
  return result;
}

unint64_t sub_21F97A928()
{
  unint64_t result = qword_267EE96D8[0];
  if (!qword_267EE96D8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_267EE96D8);
  }
  return result;
}

uint64_t sub_21F97A97C@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return sub_21F979A58(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_21F97A99C(uint64_t a1)
{
  *(void *)(a1 + 8) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_21F97A9FC()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F97AA18()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F97AA34()
{
  uint64_t result = type metadata accessor for NumberBins.Storage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_DWORD *sub_21F97AACC(_DWORD *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = v5 + v6;
  unint64_t v8 = ((((((v5 + 7 + ((v5 + v6) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
     + 16;
  if (!v8) {
    unint64_t v8 = 8;
  }
  uint64_t v9 = v8 & 0xFFFFFFF8;
  unsigned int v10 = *((unsigned __int8 *)result + v8);
  if (v10 >= 2 && v9 != 0) {
    unsigned int v10 = *result + 2;
  }
  if (v10 == 1)
  {
    return (_DWORD *)swift_bridgeObjectRelease();
  }
  else if (!v10)
  {
    uint64_t v12 = ~v6;
    uint64_t v13 = *(void (**)(_DWORD *, uint64_t))(v4 + 8);
    v13(result, v3);
    v13((_DWORD *)(((unint64_t)v2 + v7) & v12), v3);
    swift_release();
    return (_DWORD *)swift_release();
  }
  return result;
}

unsigned char *sub_21F97AC58(unsigned char *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = v7 + v8;
  uint64_t v10 = v7 + 7;
  unint64_t v11 = ((((((v7 + 7 + ((v7 + v8) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 8;
  }
  unsigned int v13 = __src[v12];
  if (v13 >= 2 && (v12 & 0xFFFFFFF8) != 0) {
    unsigned int v13 = *(_DWORD *)__src + 2;
  }
  if (v13 == 1)
  {
    *(void *)__dst = *(void *)__src;
    __dst[v12] = 1;
    swift_bridgeObjectRetain();
  }
  else if (v13)
  {
    memcpy(__dst, __src, v12 | 1);
  }
  else
  {
    uint64_t v15 = ~v8;
    uint64_t v16 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v6 + 16);
    v16(__dst, __src, v5);
    unint64_t v17 = (unint64_t)&__src[v9] & v15;
    v16((unsigned char *)((unint64_t)&__dst[v9] & v15), (unsigned __int8 *)v17, v5);
    uint64_t v18 = (void *)((v10 + ((unint64_t)&__dst[v9] & v15)) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v19 = (void *)((v10 + v17) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v18 = *v19;
    uint64_t v20 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v21 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = (void *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v24 = (void *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v25 = v24[1];
    void *v23 = *v24;
    v23[1] = v25;
    __dst[v12] = 0;
    swift_retain();
    swift_retain();
  }
  return __dst;
}

unsigned __int8 *sub_21F97AE08(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(void *)(v6 + 64);
    uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v9 = v7 + v8;
    uint64_t v10 = v7 + 7;
    unint64_t v11 = ((((((v7 + 7 + ((v7 + v8) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 8;
    }
    unsigned int v13 = __dst[v12];
    if (v13 >= 2 && (v12 & 0xFFFFFFF8) != 0) {
      unsigned int v13 = *(_DWORD *)__dst + 2;
    }
    uint64_t v15 = ~v8;
    if (v13 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else if (!v13)
    {
      uint64_t v32 = v10;
      uint64_t v16 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
      v16(__dst, v5);
      v16((unsigned __int8 *)((unint64_t)&__dst[v9] & v15), v5);
      uint64_t v10 = v32;
      swift_release();
      swift_release();
    }
    unsigned int v17 = __src[v12];
    if ((v12 & 0xFFFFFFF8) != 0 && v17 >= 2) {
      unsigned int v17 = *(_DWORD *)__src + 2;
    }
    if (v17 == 1)
    {
      *(void *)__dst = *(void *)__src;
      __dst[v12] = 1;
      swift_bridgeObjectRetain();
    }
    else if (v17)
    {
      memcpy(__dst, __src, v12 | 1);
    }
    else
    {
      uint64_t v19 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16);
      v19(__dst, __src, v5);
      uint64_t v20 = v15;
      unint64_t v21 = (unint64_t)&__dst[v9] & v15;
      unint64_t v22 = (unint64_t)&__src[v9] & v20;
      v19((unsigned __int8 *)v21, (unsigned __int8 *)v22, v5);
      uint64_t v23 = (void *)((v10 + v21) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v24 = (void *)((v10 + v22) & 0xFFFFFFFFFFFFFFF8);
      void *v23 = *v24;
      uint64_t v25 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
      unsigned int v26 = (void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v27 = v26[1];
      *uint64_t v25 = *v26;
      v25[1] = v27;
      uint64_t v28 = (void *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v29 = (void *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v30 = v29[1];
      *uint64_t v28 = *v29;
      v28[1] = v30;
      __dst[v12] = 0;
      swift_retain();
      swift_retain();
    }
  }
  return __dst;
}

unsigned char *sub_21F97B070(unsigned char *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = v7 + v8;
  uint64_t v10 = v7 + 7;
  unint64_t v11 = ((((((v7 + 7 + ((v7 + v8) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 8;
  }
  unsigned int v13 = __src[v12];
  if (v13 >= 2 && (v12 & 0xFFFFFFF8) != 0) {
    unsigned int v13 = *(_DWORD *)__src + 2;
  }
  if (v13 == 1)
  {
    *(void *)__dst = *(void *)__src;
    __dst[v12] = 1;
  }
  else if (v13)
  {
    memcpy(__dst, __src, v12 | 1);
  }
  else
  {
    uint64_t v15 = ~v8;
    uint64_t v16 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v6 + 32);
    v16(__dst, __src, v5);
    unint64_t v17 = (unint64_t)&__src[v9] & v15;
    v16((unsigned char *)((unint64_t)&__dst[v9] & v15), (unsigned __int8 *)v17, v5);
    uint64_t v18 = (void *)((v10 + ((unint64_t)&__dst[v9] & v15)) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v19 = (void *)((v10 + v17) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v18 = *v19;
    uint64_t v20 = (_OWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v21 = (_OWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v20 = *v21;
    *(_OWORD *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
    __dst[v12] = 0;
  }
  return __dst;
}

unsigned __int8 *sub_21F97B208(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(void *)(v6 + 64);
    uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v9 = v7 + v8;
    uint64_t v10 = v7 + 7;
    unint64_t v11 = ((((((v7 + 7 + ((v7 + v8) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 8;
    }
    unsigned int v13 = __dst[v12];
    if (v13 >= 2 && (v12 & 0xFFFFFFF8) != 0) {
      unsigned int v13 = *(_DWORD *)__dst + 2;
    }
    uint64_t v15 = ~v8;
    if (v13 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else if (!v13)
    {
      uint64_t v28 = v10;
      uint64_t v16 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
      v16(__dst, v5);
      v16((unsigned __int8 *)((unint64_t)&__dst[v9] & v15), v5);
      uint64_t v10 = v28;
      swift_release();
      swift_release();
    }
    unsigned int v17 = __src[v12];
    if ((v12 & 0xFFFFFFF8) != 0 && v17 >= 2) {
      unsigned int v17 = *(_DWORD *)__src + 2;
    }
    if (v17 == 1)
    {
      *(void *)__dst = *(void *)__src;
      __dst[v12] = 1;
    }
    else if (v17)
    {
      memcpy(__dst, __src, v12 | 1);
    }
    else
    {
      uint64_t v19 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32);
      v19(__dst, __src, v5);
      uint64_t v20 = v15;
      unint64_t v21 = (unint64_t)&__dst[v9] & v15;
      unint64_t v22 = (unint64_t)&__src[v9] & v20;
      v19((unsigned __int8 *)v21, (unsigned __int8 *)v22, v5);
      uint64_t v23 = (void *)((v10 + v21) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v24 = (void *)((v10 + v22) & 0xFFFFFFFFFFFFFFF8);
      void *v23 = *v24;
      uint64_t v25 = (_OWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
      unsigned int v26 = (_OWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v25 = *v26;
      *(_OWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8);
      __dst[v12] = 0;
    }
  }
  return __dst;
}

uint64_t sub_21F97B45C(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v4 = ((((((*(void *)(v3 + 64)
           + ((*(void *)(v3 + 64) + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
           + 7) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 16;
  if (((((((*(void *)(v3 + 64)
           + ((*(void *)(v3 + 64) + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
           + 7) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8) == 0xFFFFFFFFFFFFFFF0)
    unint64_t v4 = 8;
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_20;
  }
  uint64_t v5 = v4 | 1;
  char v6 = 8 * (v4 | 1);
  if ((v4 | 1) <= 3)
  {
    unsigned int v7 = (a2 + ~(-1 << v6) - 253) >> v6;
    if (v7 > 0xFFFE)
    {
      int v8 = *(_DWORD *)&a1[v5];
      if (!v8) {
        goto LABEL_20;
      }
      goto LABEL_13;
    }
    if (v7 > 0xFE)
    {
      int v8 = *(unsigned __int16 *)&a1[v5];
      if (!*(_WORD *)&a1[v5]) {
        goto LABEL_20;
      }
      goto LABEL_13;
    }
    if (!v7) {
      goto LABEL_20;
    }
  }
  int v8 = a1[v5];
  if (!a1[v5])
  {
LABEL_20:
    unsigned int v12 = a1[v4];
    if (v12 >= 3) {
      return (v12 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
LABEL_13:
  int v10 = (v8 - 1) << v6;
  if (v5 >= 4) {
    int v10 = 0;
  }
  if (v5 == 1) {
    int v11 = *a1;
  }
  else {
    int v11 = *(_DWORD *)a1;
  }
  return (v11 | v10) + 254;
}

void sub_21F97B588(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  unint64_t v6 = ((((((*(void *)(v5 + 64)
           + ((*(void *)(v5 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
           + 7) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 16;
  if (((((((*(void *)(v5 + 64)
           + ((*(void *)(v5 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
           + 7) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8) == 0xFFFFFFFFFFFFFFF0)
    unint64_t v6 = 8;
  size_t v7 = v6 | 1;
  if (a3 < 0xFE)
  {
    int v8 = 0;
  }
  else if (v7 <= 3)
  {
    unsigned int v11 = (a3 + ~(-1 << (8 * v7)) - 253) >> (8 * v7);
    if (v11 > 0xFFFE)
    {
      int v8 = 4;
    }
    else if (v11 >= 0xFF)
    {
      int v8 = 2;
    }
    else
    {
      int v8 = v11 != 0;
    }
  }
  else
  {
    int v8 = 1;
  }
  if (a2 <= 0xFD)
  {
    switch(v8)
    {
      case 1:
        a1[v7] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_24;
      case 2:
        *(_WORD *)&a1[v7] = 0;
        goto LABEL_23;
      case 3:
        goto LABEL_31;
      case 4:
        *(_DWORD *)&a1[v7] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_24;
      default:
LABEL_23:
        if (a2) {
LABEL_24:
        }
          a1[v6] = -(char)a2;
        break;
    }
    return;
  }
  unsigned int v9 = a2 - 254;
  if (v7 < 4)
  {
    int v10 = (v9 >> (8 * v7)) + 1;
    v9 &= ~(-1 << (8 * v7));
    bzero(a1, v7);
    if (v7 == 1)
    {
      *a1 = v9;
      goto LABEL_20;
    }
  }
  else
  {
    bzero(a1, v6 | 1);
    int v10 = 1;
  }
  *(_DWORD *)a1 = v9;
LABEL_20:
  switch(v8)
  {
    case 1:
      a1[v7] = v10;
      break;
    case 2:
      *(_WORD *)&a1[v7] = v10;
      break;
    case 3:
LABEL_31:
      __break(1u);
      JUMPOUT(0x21F97B784);
    case 4:
      *(_DWORD *)&a1[v7] = v10;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for NumberBins()
{
  return sub_21F764F08();
}

uint64_t sub_21F97B7C4()
{
  uint64_t result = type metadata accessor for NumberBins.UniformStorage();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *sub_21F97B860(unsigned char *__dst, unsigned __int8 *__src, uint64_t a3)
{
  unint64_t v4 = __dst;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  int v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = v7 + v8;
  uint64_t v10 = v7 + 7;
  unint64_t v11 = ((((((v7 + 7 + (v9 & ~(unint64_t)v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 8;
  }
  size_t v13 = v12 | 1;
  if (v8 > 7u || (v8 & 0x100000) != 0 || v13 > 0x18)
  {
    uint64_t v16 = *(void *)__src;
    *unint64_t v4 = *(void *)__src;
    unint64_t v4 = (void *)(v16 + ((v8 & 0xF8 ^ 0x1F8u) & (v8 + 16)));
  }
  else
  {
    unsigned int v17 = __src[v12];
    if ((v12 & 0xFFFFFFF8) != 0 && v17 >= 2) {
      unsigned int v17 = *(_DWORD *)__src + 2;
    }
    if (v17 == 1)
    {
      *(void *)__dst = *(void *)__src;
      __dst[v12] = 1;
      swift_bridgeObjectRetain();
      return v4;
    }
    if (v17)
    {
      memcpy(__dst, __src, v13);
      return v4;
    }
    unint64_t v19 = ~(unint64_t)v8;
    uint64_t v20 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v6 + 16);
    v20(__dst, __src, v5);
    unint64_t v21 = (unint64_t)&__src[v9] & v19;
    v20((unsigned char *)(((unint64_t)v4 + v9) & v19), (unsigned __int8 *)v21, v5);
    unint64_t v22 = (void *)((v10 + (((unint64_t)v4 + v9) & v19)) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v23 = (void *)((v10 + v21) & 0xFFFFFFFFFFFFFFF8);
    *unint64_t v22 = *v23;
    uint64_t v24 = (void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v25 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v26 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v26;
    uint64_t v27 = (void *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v28 = (void *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v29 = v28[1];
    *uint64_t v27 = *v28;
    v27[1] = v29;
    *((unsigned char *)v4 + v12) = 0;
    swift_retain();
  }
  swift_retain();
  return v4;
}

void sub_21F97BA48(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  unint64_t v6 = ((((((*(void *)(v5 + 64)
           + ((*(void *)(v5 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
           + 7) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 16;
  if (((((((*(void *)(v5 + 64)
           + ((*(void *)(v5 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
           + 7) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8) == 0xFFFFFFFFFFFFFFF0)
    unint64_t v6 = 8;
  size_t v7 = v6 | 1;
  if (a3 < 0xFE)
  {
    int v8 = 0;
  }
  else if (v7 <= 3)
  {
    unsigned int v11 = (a3 + ~(-1 << (8 * v7)) - 253) >> (8 * v7);
    if (v11 > 0xFFFE)
    {
      int v8 = 4;
    }
    else if (v11 >= 0xFF)
    {
      int v8 = 2;
    }
    else
    {
      int v8 = v11 != 0;
    }
  }
  else
  {
    int v8 = 1;
  }
  if (a2 <= 0xFD)
  {
    switch(v8)
    {
      case 1:
        a1[v7] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_24;
      case 2:
        *(_WORD *)&a1[v7] = 0;
        goto LABEL_23;
      case 3:
        goto LABEL_31;
      case 4:
        *(_DWORD *)&a1[v7] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_24;
      default:
LABEL_23:
        if (a2) {
LABEL_24:
        }
          a1[v6] = -(char)a2;
        break;
    }
    return;
  }
  unsigned int v9 = a2 - 254;
  if (v7 < 4)
  {
    int v10 = (v9 >> (8 * v7)) + 1;
    v9 &= ~(-1 << (8 * v7));
    bzero(a1, v7);
    if (v7 == 1)
    {
      *a1 = v9;
      goto LABEL_20;
    }
  }
  else
  {
    bzero(a1, v6 | 1);
    int v10 = 1;
  }
  *(_DWORD *)a1 = v9;
LABEL_20:
  switch(v8)
  {
    case 1:
      a1[v7] = v10;
      break;
    case 2:
      *(_WORD *)&a1[v7] = v10;
      break;
    case 3:
LABEL_31:
      __break(1u);
      JUMPOUT(0x21F97BC44);
    case 4:
      *(_DWORD *)&a1[v7] = v10;
      break;
    default:
      return;
  }
}

uint64_t sub_21F97BC6C(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  unint64_t v3 = ((((((*(void *)(v2 + 64)
           + ((*(void *)(v2 + 64) + *(unsigned __int8 *)(v2 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))
           + 7) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 16;
  if (((((((*(void *)(v2 + 64)
           + ((*(void *)(v2 + 64) + *(unsigned __int8 *)(v2 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))
           + 7) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8) == 0xFFFFFFFFFFFFFFF0)
    unint64_t v3 = 8;
  uint64_t v4 = v3 & 0xFFFFFFF8;
  uint64_t v5 = *((unsigned __int8 *)a1 + v3);
  if (v5 >= 2 && v4 != 0) {
    return (*a1 + 2);
  }
  return v5;
}

void sub_21F97BD08(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  size_t v5 = ((((((*(void *)(v4 + 64)
           + ((*(void *)(v4 + 64) + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
           + 7) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 16;
  if (((((((*(void *)(v4 + 64)
           + ((*(void *)(v4 + 64) + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
           + 7) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8) == 0xFFFFFFFFFFFFFFF0)
    size_t v5 = 8;
  if (a2 > 1)
  {
    if (v5) {
      char v6 = 2;
    }
    else {
      char v6 = a2;
    }
    if (v5) {
      unsigned int v7 = a2 - 2;
    }
    else {
      unsigned int v7 = 0;
    }
    a1[v5] = v6;
    bzero(a1, v5);
    *(_DWORD *)a1 = v7;
  }
  else
  {
    a1[v5] = a2;
  }
}

uint64_t sub_21F97BDD8()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21F97BE88(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = v7 + v8;
  uint64_t v10 = v7 + 7;
  unint64_t v11 = ((((((v7 + 7 + ((v7 + v8) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
  }
  else
  {
    uint64_t v15 = ~v8;
    uint64_t v16 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v16(a1, a2, v5);
    unint64_t v17 = ((unint64_t)a2 + v9) & v15;
    v16((uint64_t *)(((unint64_t)v4 + v9) & v15), (uint64_t *)v17, v5);
    uint64_t v18 = (void *)((v10 + (((unint64_t)v4 + v9) & v15)) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v19 = (void *)((v10 + v17) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v18 = *v19;
    uint64_t v20 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v21 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = (void *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v24 = (void *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v25 = v24[1];
    void *v23 = *v24;
    v23[1] = v25;
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_21F97C010(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(unint64_t, uint64_t))(v4 + 8);
  v5(a1, v3);
  v5((*(void *)(v4 + 64) + a1 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), v3);
  swift_release();

  return swift_release();
}

uint64_t sub_21F97C0D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = (v8 + v9 + a1) & ~v9;
  uint64_t v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  uint64_t v12 = (void *)((v8 + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  size_t v13 = (void *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  uint64_t v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  unint64_t v17 = (void *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = (void *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = v18[1];
  *unint64_t v17 = *v18;
  v17[1] = v19;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_21F97C1C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = (v8 + v9 + a1) & ~v9;
  uint64_t v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  uint64_t v12 = (void *)((v8 + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  size_t v13 = (void *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  uint64_t v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  swift_retain();
  swift_release();
  unint64_t v17 = (void *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = (void *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = v18[1];
  *unint64_t v17 = *v18;
  v17[1] = v19;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_21F97C2CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = (v8 + v9 + a1) & ~v9;
  uint64_t v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  uint64_t v12 = (void *)((v8 + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  size_t v13 = (void *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  uint64_t v14 = (_OWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (_OWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v14 = *v15;
  *(_OWORD *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_21F97C3AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = (v8 + v9 + a1) & ~v9;
  uint64_t v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  uint64_t v12 = (void *)((v8 + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (v8 + 7 + v11) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = *(void *)v13;
  v13 += 15;
  *uint64_t v12 = v14;
  uint64_t v15 = (_OWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 23;
  *uint64_t v15 = *(_OWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  *(_OWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_21F97C4A0(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = v6 + v8;
  uint64_t v10 = v6 + 7;
  if (v7 < a2)
  {
    unint64_t v11 = ((((((v10 + (v9 & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    unsigned int v12 = a2 - v7;
    uint64_t v13 = v11 & 0xFFFFFFF8;
    if ((v11 & 0xFFFFFFF8) != 0) {
      unsigned int v14 = 2;
    }
    else {
      unsigned int v14 = v12 + 1;
    }
    if (v14 >= 0x10000) {
      unsigned int v15 = 4;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v14 < 0x100) {
      unsigned int v15 = 1;
    }
    if (v14 >= 2) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *((unsigned __int8 *)a1 + v11);
        if (!v17) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v17 = *(unsigned __int16 *)((char *)a1 + v11);
        if (v17) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x21F97C61CLL);
      case 4:
        int v17 = *(_DWORD *)((char *)a1 + v11);
        if (!v17) {
          break;
        }
LABEL_22:
        int v19 = v17 - 1;
        if (v13)
        {
          int v19 = 0;
          LODWORD(v13) = *a1;
        }
        return v7 + (v13 | v19) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v20 = *(void *)((((v10 + (((unint64_t)a1 + v9) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
  if (v20 >= 0xFFFFFFFF) {
    LODWORD(v20) = -1;
  }
  return (v20 + 1);
}

void sub_21F97C630(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = v9 + v10;
  uint64_t v12 = (v9 + v10) & ~v10;
  uint64_t v13 = v9 + 7;
  size_t v14 = ((((((v13 + v12) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v8 >= a3)
  {
    int v18 = 0;
    int v19 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v18)
      {
        case 1:
          a1[v14] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v14] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v14] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v23 = (void *)((((v13 + ((unint64_t)&a1[v11] & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v24 = a2 ^ 0x80000000;
                v23[1] = 0;
              }
              else
              {
                uint64_t v24 = a2 - 1;
              }
              void *v23 = v24;
            }
            else
            {
              uint64_t v22 = *(void (**)(void))(v6 + 56);
              v22();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v15 = a3 - v8;
    if (((((((v13 + v12) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v16 = v15 + 1;
    }
    else {
      unsigned int v16 = 2;
    }
    if (v16 >= 0x10000) {
      int v17 = 4;
    }
    else {
      int v17 = 2;
    }
    if (v16 < 0x100) {
      int v17 = 1;
    }
    if (v16 >= 2) {
      int v18 = v17;
    }
    else {
      int v18 = 0;
    }
    int v19 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (v14) {
    int v20 = 1;
  }
  else {
    int v20 = v19;
  }
  if (v14)
  {
    int v21 = ~v8 + a2;
    bzero(a1, v14);
    *(_DWORD *)a1 = v21;
  }
  switch(v18)
  {
    case 1:
      a1[v14] = v20;
      break;
    case 2:
      *(_WORD *)&a1[v14] = v20;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x21F97C84CLL);
    case 4:
      *(_DWORD *)&a1[v14] = v20;
      break;
    default:
      return;
  }
}

uint64_t sub_21F97C874(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_21F97C9D0(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x21F97CBE8);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unsigned int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t sub_21F97CC10(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(*(void *)(*(void *)(a2 + 24) + 16) + 24) + 8);
}

uint64_t sub_21F97CC24(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

double sub_21F97CC60@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result = *a1 * **(double **)(v2 + 16);
  *a2 = result;
  return result;
}

BOOL sub_21F97CC78(double *a1)
{
  return **(double **)(v1 + 16) <= *a1;
}

uint64_t sub_21F97CC94(uint64_t a1)
{
  return sub_21F97CCE4(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F9755D8);
}

uint64_t sub_21F97CCB0(uint64_t a1)
{
  return sub_21F97CD70(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F97573C);
}

uint64_t sub_21F97CCCC(uint64_t a1)
{
  return sub_21F97CCE4(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F974E70);
}

uint64_t sub_21F97CCE4(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(*(void *)(v2 + 16) - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  return a2(a1, v2 + ((v4 + 32) & ~v4), v2 + ((*(void *)(v3 + 64) + v4 + ((v4 + 32) & ~v4)) & ~v4));
}

uint64_t sub_21F97CD58(uint64_t a1)
{
  return sub_21F97CD70(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F974FBC);
}

uint64_t sub_21F97CD70(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(*(void *)(v2 + 16) - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  return a2(a1, v2 + ((v4 + 32) & ~v4), v2 + ((*(void *)(v3 + 64) + v4 + ((v4 + 32) & ~v4)) & ~v4));
}

uint64_t sub_21F97CDE0()
{
  return sub_21F97CDF8();
}

uint64_t sub_21F97CDF8()
{
  return sub_21FA26040();
}

uint64_t sub_21F97CE38(uint64_t a1)
{
  return sub_21F97A5E8(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_21F97CE58()
{
  return sub_21FA25C60() & 1;
}

uint64_t sub_21F97CE9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21F97A7A4(a1, *(void *)(v2 + 16), a2);
}

double sub_21F97CEBC@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  return sub_21F97CC60(a1, a2);
}

uint64_t sub_21F97CED4()
{
  uint64_t v0 = sub_21FA24C30();
  MEMORY[0x270FA5388](v0 - 8);
  sub_21FA24C20();
  sub_21FA24C10();
  sub_21FA24BE0();
  sub_21FA24C10();
  sub_21FA24C00();
  sub_21FA24C10();
  sub_21FA24C50();
  type metadata accessor for FindClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v2 = self;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v3 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t v4 = sub_21FA25340();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t type metadata accessor for FindClass()
{
  return self;
}

uint64_t sub_21F97D100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for FindClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v5 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t v6 = (void *)sub_21FA25CF0();
  id v7 = objc_msgSend(v5, sel_localizedStringForKey_value_table_, v6, 0, 0);

  uint64_t v8 = sub_21FA25D00();
  if (*(void *)(a3 + 16))
  {
    sub_21F804F78(a3);
    uint64_t v8 = sub_21FA25D10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v8;
}

float sub_21F97D214()
{
  sub_21F8C07E8();
  sub_21FA24B40();
  return v1;
}

void sub_21F97D250(_DWORD *a1@<X8>)
{
  *a1 = 1014350479;
}

uint64_t sub_21F97D260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270EFF9B8](a1, a2, a3, a4, MEMORY[0x263F8D5F8]);
}

uint64_t Chart3DContent.symbolSize(_:)(uint64_t a1, float a2)
{
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  float v6 = a2;
  sub_21F9DD214(KeyPath, (uint64_t)&v6, a1);
  return swift_release();
}

uint64_t sub_21F97D2F0()
{
  return swift_getWitnessTable();
}

ValueMetadata *_s23__Key_chart3DSymbolSizeVMa()
{
  return &_s23__Key_chart3DSymbolSizeVN;
}

uint64_t _s6LinearVwCP(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  id v3 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v3;
  id v4 = v3;
  return a1;
}

void _s6LinearVwxx(uint64_t a1)
{
}

void *_s6LinearVwca(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  id v3 = (void *)a2[2];
  id v4 = (void *)a1[2];
  a1[2] = v3;
  id v5 = v3;

  return a1;
}

uint64_t _s6LinearVwta(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  id v3 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  return a1;
}

ValueMetadata *_s6LinearVMa()
{
  return &_s6LinearVN;
}

uint64_t sub_21F97D444()
{
  if (*v0)
  {
    *uint64_t v0 = 2;
    return sub_21FA26290();
  }
  *uint64_t v0 = 1;
  if (v0[1] == 1) {
    return sub_21FA26290();
  }
  return sub_21FA26280();
}

void sub_21F97D4C8()
{
  *uint64_t v0 = 0;
}

void sub_21F97D4D0()
{
  uint64_t v1 = *(void *)(v0 + 8);
  if (v1)
  {
    if (v1 != 1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*(void *)v0 == 1) {
LABEL_3:
  }
    CGPathCloseSubpath(*(CGMutablePathRef *)(v0 + 16));
LABEL_4:
  if (__OFSUB__(0, v1)) {
    __break(1u);
  }
  else {
    *(void *)(v0 + 8) = -v1;
  }
}

void sub_21F97D524()
{
  *(void *)(v0 + 8) = -1;
}

void sub_21F97D530()
{
  *(void *)(v0 + 8) = 0;
}

id sub_21F97D53C()
{
  return *(id *)(v0 + 16);
}

void *LineMark.init<A, B>(x:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  sub_21F9D5860(a1, a3, a5, (uint64_t)v16);
  sub_21F764AF8((uint64_t)v16, (uint64_t)v15);
  sub_21F9D5860(a2, a4, a6, (uint64_t)v17);
  sub_21F764AF8((uint64_t)v17, (uint64_t)v18);
  uint64_t v12 = type metadata accessor for PlottableValue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(a2, v12);
  uint64_t v13 = type metadata accessor for PlottableValue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a1, v13);
  sub_21F764AF8((uint64_t)v15, (uint64_t)v19);
  sub_21F764AF8((uint64_t)v19, (uint64_t)__src);
  sub_21F764AF8((uint64_t)v18, (uint64_t)&__src[18]);
  __src[37] = 0;
  __src[36] = 0;
  LOBYTE(__src[38]) = -1;
  return memcpy(a7, __src, 0x131uLL);
}

void *LineMark.init<A, B, C>(x:y:series:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  uint64_t v31 = a4;
  uint64_t v32 = a7;
  uint64_t v28 = a2;
  uint64_t v33 = a1;
  uint64_t v34 = a9;
  uint64_t v15 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1);
  int v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F9D5860(v18, v19, v20, (uint64_t)v37);
  sub_21F764AF8((uint64_t)v37, (uint64_t)v35);
  sub_21F9D5860(a2, a5, a8, (uint64_t)v38);
  sub_21F764AF8((uint64_t)v38, (uint64_t)v36);
  uint64_t v21 = type metadata accessor for PlottableValue();
  sub_21F959C58(v21, (uint64_t)v17);
  uint64_t v22 = sub_21F76C248(v17, a6, a10);
  uint64_t v30 = v23;
  int v29 = v24;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a6);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(a3, v21);
  uint64_t v25 = type metadata accessor for PlottableValue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v28, v25);
  uint64_t v26 = type metadata accessor for PlottableValue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(v33, v26);
  sub_21F764AF8((uint64_t)v35, (uint64_t)v39);
  sub_21F764AF8((uint64_t)v36, (uint64_t)v40);
  sub_21F764AF8((uint64_t)v39, (uint64_t)v41);
  sub_21F764AF8((uint64_t)v40, (uint64_t)&v41[18]);
  v41[36] = v22;
  v41[37] = v30;
  LOBYTE(v41[38]) = v29;
  return memcpy(v34, v41, 0x131uLL);
}

uint64_t static LineMark._renderChartContent(_:_:)(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v2 = v1;
  id v4 = v3;
  float v6 = v5;
  uint64_t v7 = type metadata accessor for SgShapeStyle();
  MEMORY[0x270FA5388](v7 - 8);
  BOOL v9 = &v225[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for SgLine(0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = &v225[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = type metadata accessor for ChartContentRenderContext.Environment(0);
  MEMORY[0x270FA5388](v13);
  v242 = &v225[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v15);
  v248 = &v225[-v16];
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = &v225[-v18];
  memcpy(v284, v4, 0x131uLL);
  int v20 = *v2;
  uint64_t v21 = (double *)*((void *)v2 + 1);
  uint64_t v22 = (uint64_t)v21 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  sub_21F7BB184(v22, (uint64_t)v19);
  sub_21F764AF8((uint64_t)v284, (uint64_t)v273);
  sub_21F764AF8((uint64_t)v284, (uint64_t)v285);
  int v23 = sub_21F7607A0((uint64_t)v285);
  v250 = (int *)v13;
  v251 = v21;
  v247 = v6;
  v244 = v9;
  uint64_t v245 = v10;
  v243 = v12;
  if ((v23 - 2) >= 4)
  {
    if (v23)
    {
      uint64_t v120 = sub_21F7607C4((uint64_t)v285);
      if (*(unsigned char *)(v120 + 8)) {
        double v121 = (v21[3] + v21[4]) * 0.5;
      }
      else {
        double v121 = *(double *)v120;
      }
      double v24 = v121 + *(double *)(v22 + *(int *)(v13 + 88));
      swift_retain();
    }
    else
    {
      uint64_t v45 = sub_21F7607C4((uint64_t)v285);
      uint64_t v246 = v22;
      LODWORD(v241) = v20;
      uint64_t v46 = *(void *)v45;
      uint64_t v47 = *(void *)(v45 + 8);
      char v48 = *(unsigned char *)(v45 + 16);
      uint64_t v49 = *(void *)(v45 + 32);
      uint64_t v240 = *(void *)(v45 + 24);
      uint64_t v50 = *(void *)(v45 + 40);
      uint64_t v51 = *(unsigned __int8 *)(v45 + 48);
      swift_retain_n();
      swift_bridgeObjectRetain();
      sub_21F7652C0(v46, v47, v48);
      sub_21F770E44(v49, v50, v51);
      uint64_t v52 = sub_21F7DFD84(0, v21, v49, v50, v51);
      uint64_t v53 = v19;
      char v55 = v54;
      swift_release();
      uint64_t v56 = v46;
      uint64_t v22 = v246;
      uint64_t v57 = v47;
      int v20 = v241;
      sub_21F7656A8(v56, v57, v48);
      swift_bridgeObjectRelease();
      uint64_t v58 = v49;
      uint64_t v13 = (uint64_t)v250;
      sub_21F770E38(v58, v50, v51);
      double v59 = *(double *)&v52;
      uint64_t v21 = v251;
      BOOL v60 = (v55 & 1) == 0;
      uint64_t v19 = v53;
      if (v60) {
        double v24 = v59;
      }
      else {
        double v24 = NAN;
      }
    }
  }
  else
  {
    sub_21F7607C4((uint64_t)v285);
    swift_retain();
    double v24 = NAN;
  }
  uint64_t v25 = v248;
  sub_21F764AF8((uint64_t)&v284[18], (uint64_t)v274);
  sub_21F764AF8((uint64_t)&v284[18], (uint64_t)v270);
  int v26 = sub_21F7607A0((uint64_t)v270);
  v249 = v19;
  switch(v26)
  {
    case 1:
      uint64_t v118 = sub_21F7607C4((uint64_t)v270);
      if (*(unsigned char *)(v118 + 8)) {
        double v119 = (v21[5] + v21[6]) * 0.5;
      }
      else {
        double v119 = *(double *)v118;
      }
      double v27 = v119 + *(double *)(v22 + *(int *)(v13 + 92));
      if (v20) {
        goto LABEL_5;
      }
      goto LABEL_49;
    case 2:
    case 3:
    case 4:
    case 5:
      sub_21F7607C4((uint64_t)v270);
      double v27 = NAN;
      if (v20) {
        goto LABEL_5;
      }
      goto LABEL_49;
    default:
      uint64_t v105 = sub_21F7607C4((uint64_t)v270);
      uint64_t v246 = v22;
      LODWORD(v241) = v20;
      uint64_t v106 = *(void *)v105;
      uint64_t v107 = *(void *)(v105 + 8);
      char v108 = *(unsigned char *)(v105 + 16);
      uint64_t v109 = *(void *)(v105 + 32);
      uint64_t v240 = *(void *)(v105 + 24);
      uint64_t v110 = *(void *)(v105 + 40);
      uint64_t v111 = *(unsigned __int8 *)(v105 + 48);
      swift_retain();
      swift_bridgeObjectRetain();
      sub_21F7652C0(v106, v107, v108);
      sub_21F770E44(v109, v110, v111);
      uint64_t v112 = sub_21F7DFD84(1, v251, v109, v110, v111);
      char v114 = v113;
      swift_release();
      uint64_t v115 = v106;
      uint64_t v22 = v246;
      sub_21F7656A8(v115, v107, v108);
      swift_bridgeObjectRelease();
      uint64_t v116 = v110;
      uint64_t v25 = v248;
      sub_21F770E38(v109, v116, v111);
      double v117 = *(double *)&v112;
      uint64_t v19 = v249;
      if (v114) {
        double v27 = NAN;
      }
      else {
        double v27 = v117;
      }
      if (v241)
      {
LABEL_5:
        uint64_t v246 = v22;
        sub_21F909320((uint64_t)v284, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_21F765124, (void (*)(uint64_t, uint64_t, uint64_t))sub_21F90930C);
        int v226 = sub_21F9E7A34((uint64_t)v273, (uint64_t)v274);
        sub_21F909320((uint64_t)v284, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_21F765354, (void (*)(uint64_t, uint64_t, uint64_t))sub_21F7B24B8);
        sub_21F909320((uint64_t)v284, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_21F765124, (void (*)(uint64_t, uint64_t, uint64_t))sub_21F90930C);
        char v28 = sub_21F9E7A34((uint64_t)v273, (uint64_t)v274) & 1;
        sub_21F909320((uint64_t)v284, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_21F765354, (void (*)(uint64_t, uint64_t, uint64_t))sub_21F7B24B8);
        sub_21F909320((uint64_t)v284, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_21F765124, (void (*)(uint64_t, uint64_t, uint64_t))sub_21F90930C);
        char v29 = sub_21F9E7A34((uint64_t)v273, (uint64_t)v274);
        sub_21F909320((uint64_t)v284, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_21F765354, (void (*)(uint64_t, uint64_t, uint64_t))sub_21F7B24B8);
        if (v29) {
          uint64_t v30 = &v284[18];
        }
        else {
          uint64_t v30 = v284;
        }
        if (v29) {
          uint64_t v31 = v284;
        }
        else {
          uint64_t v31 = &v284[18];
        }
        sub_21F764AF8((uint64_t)v30, (uint64_t)v268);
        sub_21F764AF8((uint64_t)v31, (uint64_t)v269);
        sub_21F764AF8((uint64_t)v268, (uint64_t)v283);
        sub_21F764AF8((uint64_t)v269, (uint64_t)v275);
        sub_21F76CA40(&qword_26AD47CE0);
        uint64_t v32 = swift_allocObject();
        *(_OWORD *)(v32 + 16) = xmmword_21FA2CBA0;
        sub_21F7BB3F8(&v284[18], (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F765124);
        sub_21F7BB3F8(v284, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F765124);
        sub_21F7BB3F8(v268, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F765124);
        sub_21F8DDED0(v28, (uint64_t)v283, (uint64_t)v271);
        sub_21F76C9DC((uint64_t)v271, v32 + 32, &qword_26AD47B78);
        uint64_t v33 = v250;
        uint64_t v34 = (uint64_t *)&v19[v250[18]];
        uint64_t v35 = *v34;
        uint64_t v36 = (void *)v34[1];
        uint64_t v37 = v34[2];
        uint64_t v38 = (unsigned char *)v34[3];
        uint64_t v39 = v34[4];
        uint64_t v40 = v34[5];
        uint64_t v41 = v34[6];
        uint64_t v42 = v34[7];
        uint64_t v43 = v34[8];
        v244 = (unsigned char *)*v34;
        uint64_t v245 = v37;
        v242 = v38;
        v243 = v36;
        uint64_t v240 = v39;
        uint64_t v241 = v41;
        uint64_t v238 = v42;
        uint64_t v239 = v40;
        uint64_t v237 = v43;
        if (v38)
        {
          LOBYTE(v259) = 4;
          *((void *)&v259 + 1) = v35;
          *(void *)&long long v260 = v36;
          BYTE8(v260) = v37 & 1;
          *(void *)&long long v261 = v38;
          *((void *)&v261 + 1) = v39;
          *(void *)&long long v262 = v40;
          BYTE8(v262) = v41;
          *(void *)&v263[0] = v42;
          *((void *)&v263[0] + 1) = v43;
          LOBYTE(v263[1]) = 3;
          sub_21F7BB878((uint64_t)&v259);
          sub_21F7BB81C((uint64_t)&v259, (uint64_t)v255);
          nullsub_1(v255, v44);
        }
        else
        {
          sub_21F7BB380((uint64_t)v255);
        }
        sub_21F76C9DC((uint64_t)v255, (uint64_t)v267, &qword_26AD47B78);
        sub_21F76C9DC((uint64_t)v267, v32 + 184, &qword_26AD47B78);
        char v61 = (uint64_t *)&v19[v33[19]];
        uint64_t v62 = *v61;
        uint64_t v63 = v61[1];
        uint64_t v64 = v61[2];
        uint64_t v65 = v61[3];
        uint64_t v66 = v61[4];
        uint64_t v67 = v61[5];
        uint64_t v68 = v61[6];
        uint64_t v69 = v61[7];
        uint64_t v70 = v61[8];
        v248 = (unsigned char *)(v32 + 32);
        uint64_t v235 = v62;
        unint64_t v236 = v64;
        uint64_t v233 = v65;
        uint64_t v234 = v63;
        uint64_t v231 = v66;
        uint64_t v232 = v68;
        uint64_t v229 = v69;
        uint64_t v230 = v67;
        uint64_t v228 = v70;
        if (v65)
        {
          LOBYTE(v259) = 5;
          *((void *)&v259 + 1) = v62;
          *(void *)&long long v260 = v63;
          BYTE8(v260) = v64 & 1;
          *(void *)&long long v261 = v65;
          *((void *)&v261 + 1) = v66;
          *(void *)&long long v262 = v67;
          BYTE8(v262) = v68;
          *(void *)&v263[0] = v69;
          *((void *)&v263[0] + 1) = v70;
          LOBYTE(v263[1]) = 3;
          sub_21F7BB878((uint64_t)&v259);
          sub_21F7BB81C((uint64_t)&v259, (uint64_t)v255);
          nullsub_1(v255, v71);
        }
        else
        {
          sub_21F7BB380((uint64_t)v255);
        }
        sub_21F76C9DC((uint64_t)v255, (uint64_t)v266, &qword_26AD47B78);
        sub_21F76C9DC((uint64_t)v266, v32 + 336, &qword_26AD47B78);
        uint64_t v72 = (uint64_t *)&v19[v33[21]];
        uint64_t v73 = *v72;
        uint64_t v74 = v72[1];
        uint64_t v75 = v72[2];
        uint64_t v76 = v72[3];
        uint64_t v77 = v72[4];
        uint64_t v78 = v72[5];
        uint64_t v80 = v72[6];
        uint64_t v79 = v72[7];
        uint64_t v81 = v72[8];
        uint64_t v227 = v79;
        if (v76)
        {
          LOBYTE(v259) = 7;
          *((void *)&v259 + 1) = v73;
          *(void *)&long long v260 = v74;
          BYTE8(v260) = v75 & 1;
          *(void *)&long long v261 = v76;
          *((void *)&v261 + 1) = v77;
          *(void *)&long long v262 = v78;
          BYTE8(v262) = v80;
          *(void *)&v263[0] = v79;
          *((void *)&v263[0] + 1) = v81;
          LOBYTE(v263[1]) = 3;
          sub_21F7BB878((uint64_t)&v259);
          sub_21F7BB81C((uint64_t)&v259, (uint64_t)v255);
          nullsub_1(v255, v82);
        }
        else
        {
          sub_21F7BB380((uint64_t)v255);
        }
        sub_21F76C9DC((uint64_t)v255, (uint64_t)v265, &qword_26AD47B78);
        sub_21F76C9DC((uint64_t)v265, v32 + 488, &qword_26AD47B78);
        sub_21F761E74((uint64_t)v244, (uint64_t)v243, v245, (uint64_t)v242, v240, v239, v241);
        sub_21F761E74(v235, v234, v236, v233, v231, v230, v232);
        sub_21F761E74(v73, v74, v75, v76, v77, v78, v80);
        v244 = (unsigned char *)sub_21F8C2950(v32);
        uint64_t v245 = v83;
        swift_setDeallocating();
        sub_21F76CA40(&qword_26AD47B78);
        swift_arrayDestroy();
        swift_deallocClassInstance();
        sub_21F764AF8((uint64_t)v269, (uint64_t)v264);
        if (sub_21F7607A0((uint64_t)v264))
        {
          __break(1u);
          JUMPOUT(0x21F97EE28);
        }
        LODWORD(v248) = (v226 & 1) == 0;
        uint64_t v84 = sub_21F7607C4((uint64_t)v264);
        uint64_t v85 = *(void *)(v84 + 8);
        int v87 = *(unsigned __int8 *)(v84 + 16);
        uint64_t v89 = *(unsigned char **)(v84 + 24);
        uint64_t v88 = *(void *)(v84 + 32);
        uint64_t v90 = *(void *)(v84 + 40);
        int v91 = *(unsigned __int8 *)(v84 + 48);
        v276[0] = *(void *)v84;
        uint64_t v86 = v276[0];
        v276[1] = v85;
        char v277 = v87;
        v278 = v89;
        uint64_t v279 = v88;
        uint64_t v280 = v90;
        char v281 = v91;
        long long v282 = *(_OWORD *)(v84 + 56);
        sub_21F764AF8((uint64_t)v269, (uint64_t)v256);
        uint64_t v92 = sub_21F7607C4((uint64_t)v256);
        uint64_t v93 = *(void *)v92;
        unint64_t v236 = *(void *)(v92 + 8);
        uint64_t v237 = v93;
        LODWORD(v235) = *(unsigned __int8 *)(v92 + 16);
        uint64_t v94 = *(void *)(v92 + 32);
        uint64_t v239 = *(void *)(v92 + 40);
        uint64_t v240 = v94;
        LODWORD(v238) = *(unsigned __int8 *)(v92 + 48);
        uint64_t v95 = v251;
        swift_retain();
        v242 = v89;
        swift_bridgeObjectRetain();
        uint64_t v96 = v88;
        swift_bridgeObjectRetain();
        sub_21F7652C0(v86, v85, v87);
        uint64_t v241 = v90;
        LODWORD(v243) = v91;
        sub_21F770E44(v88, v90, v91);
        LODWORD(v88) = v248;
        sub_21F7652C0(v237, v236, v235);
        sub_21F770E44(v240, v239, v238);
        sub_21F7CC0E4(v88, v95, (char *)v95, v88, v276, (uint64_t)v255);
        sub_21F76C9DC((uint64_t)v255, (uint64_t)v257, &qword_26AD46A38);
        sub_21F76C9DC((uint64_t)v257, (uint64_t)&v259, &qword_26AD46A38);
        if (sub_21F7BB368((uint64_t)&v259) == 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_21F7656A8(v86, v85, v87);
          swift_bridgeObjectRelease();
          sub_21F770E38(v96, v241, (char)v243);
          swift_release();
          sub_21F7BB3F8(v269, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F765354);
          sub_21F7BB3F8(v268, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F765354);
          uint64_t result = sub_21F909444((uint64_t)v249);
          unint64_t v98 = 0xE000000000000000;
        }
        else
        {
          LODWORD(v238) = v87;
          uint64_t v239 = v85;
          uint64_t v240 = v86;
          sub_21F909320((uint64_t)v284, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_21F765124, (void (*)(uint64_t, uint64_t, uint64_t))sub_21F90930C);
          char v99 = sub_21F9E7A34((uint64_t)v273, (uint64_t)v274);
          sub_21F909320((uint64_t)v284, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_21F765354, (void (*)(uint64_t, uint64_t, uint64_t))sub_21F7B24B8);
          int v100 = *(unsigned __int8 *)(v246 + v250[27]);
          uint64_t v234 = v96;
          if (v99)
          {
            if (v100)
            {
              double v122 = v95[5];
              double v123 = v95[6];
              if (v123 >= v122) {
                double v27 = v95[5];
              }
              else {
                double v27 = v95[6];
              }
              double v104 = vabdd_f64(v123, v122);
              double v103 = 0.0;
            }
            else
            {
              if (*((double *)&v259 + 1) >= *(double *)&v259) {
                double v24 = *(double *)&v259;
              }
              else {
                double v24 = *((double *)&v259 + 1);
              }
              double v202 = v95[5];
              double v203 = v95[6];
              if (v203 >= v202) {
                double v27 = v95[5];
              }
              else {
                double v27 = v95[6];
              }
              double v103 = vabdd_f64(*((double *)&v259 + 1), *(double *)&v259);
              double v104 = vabdd_f64(v203, v202);
            }
          }
          else if (v100)
          {
            double v101 = v95[3];
            double v102 = v95[4];
            if (v102 >= v101) {
              double v24 = v95[3];
            }
            else {
              double v24 = v95[4];
            }
            double v103 = vabdd_f64(v102, v101);
            double v104 = 0.0;
          }
          else
          {
            double v200 = v95[3];
            double v201 = v95[4];
            if (v201 >= v200) {
              double v24 = v95[3];
            }
            else {
              double v24 = v95[4];
            }
            if (*((double *)&v259 + 1) >= *(double *)&v259) {
              double v27 = *(double *)&v259;
            }
            else {
              double v27 = *((double *)&v259 + 1);
            }
            double v103 = vabdd_f64(v201, v200);
            double v104 = vabdd_f64(*((double *)&v259 + 1), *(double *)&v259);
          }
          uint64_t v204 = *(void *)(*((void *)v95 + 2) + 24);
          v205 = (uint64_t *)&v249[v250[26]];
          uint64_t v206 = v205[1];
          uint64_t v246 = *v205;
          unint64_t v236 = v206;
          uint64_t v237 = v204;
          uint64_t v207 = v250[25];
          v208 = (uint64_t *)&v249[v250[24]];
          uint64_t v209 = *v208;
          uint64_t v210 = v208[1];
          uint64_t v211 = v208[3];
          uint64_t v235 = v208[2];
          char v212 = v235;
          v250 = (int *)v211;
          uint64_t v214 = *(void *)&v249[v207];
          uint64_t v213 = *(void *)&v249[v207 + 8];
          uint64_t v216 = *(void *)&v249[v207 + 16];
          uint64_t v215 = *(void *)&v249[v207 + 24];
          swift_bridgeObjectRetain();
          sub_21F7BB3B4(v209, v210, v212, v211);
          uint64_t v217 = v213;
          uint64_t v218 = v213;
          char v219 = v216;
          uint64_t v220 = v216;
          uint64_t v221 = v215;
          sub_21F7BB3B4(v214, v217, v219, v215);
          uint64_t v222 = (uint64_t)v244;
          swift_bridgeObjectRetain();
          sub_21F8DDED0((char)v248, (uint64_t)v275, (uint64_t)v272);
          sub_21F76C9DC((uint64_t)v272, (uint64_t)v252, &qword_26AD47B78);
          sub_21F7656A8(v240, v239, v238);
          swift_bridgeObjectRelease();
          sub_21F770E38(v234, v241, (char)v243);
          swift_release();
          sub_21F7BB3F8(v268, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F765354);
          sub_21F909444((uint64_t)v249);
          swift_bridgeObjectRelease();
          sub_21F7BB81C((uint64_t)&v260, (uint64_t)v253);
          nullsub_1(v253, v223);
          sub_21F7BB380((uint64_t)v254);
          v255[0] = v237;
          *(double *)&v255[1] = v24;
          *(double *)&v255[2] = v27;
          *(double *)&v255[3] = v103;
          *(double *)&v255[4] = v104;
          v255[5] = v246;
          v255[6] = v236;
          v255[7] = v209;
          v255[8] = v210;
          v255[9] = v235;
          v255[10] = v250;
          v255[11] = v214;
          v255[12] = v218;
          v255[13] = v220;
          v255[14] = v221;
          v255[15] = v222;
          sub_21F76C9DC((uint64_t)v252, (uint64_t)&v255[16], &qword_26AD47B78);
          v255[35] = v245;
          sub_21F76C9DC((uint64_t)v253, (uint64_t)&v255[36], &qword_26AD47B78);
          sub_21F76C9DC((uint64_t)v254, (uint64_t)&v255[55], &qword_26AD47B78);
          LOWORD(v255[74]) = 257;
          v255[75] = 0;
          uint64_t v224 = swift_allocObject();
          uint64_t result = (uint64_t)memcpy((void *)(v224 + 16), v255, 0x260uLL);
          unint64_t v98 = v224 | 0xC000000000000000;
        }
        unint64_t *v247 = v98;
      }
      else
      {
LABEL_49:
        uint64_t v124 = v284[36];
        uint64_t v125 = v284[37];
        int v126 = LOBYTE(v284[38]);
        sub_21F7BB184((uint64_t)v19, (uint64_t)v25);
        if (v126 == 255)
        {
          uint64_t v240 = v125;
          uint64_t v137 = v250;
          uint64_t v138 = &v25[v250[18]];
          if (*((void *)v138 + 3))
          {
            uint64_t v139 = (unsigned char *)*((void *)v138 + 5);
            unsigned __int8 v135 = v138[48];
            uint64_t v241 = *((void *)v138 + 4);
            v248 = v139;
            sub_21F770E44(v241, (uint64_t)v139, v135);
          }
          else
          {
            uint64_t v241 = 0;
            v248 = 0;
            unsigned __int8 v135 = -4;
          }
          uint64_t v246 = v124;
          int v140 = &v25[v137[19]];
          if (*((void *)v140 + 3))
          {
            uint64_t v141 = v140[48];
            uint64_t v127 = *((void *)v140 + 4);
            uint64_t v142 = *((void *)v140 + 5);
            sub_21F770E44(v127, v142, v140[48]);
            unint64_t v129 = v141 | 0x8000000000000000;
          }
          else
          {
            uint64_t v127 = 0;
            uint64_t v142 = 0;
            unint64_t v129 = 0x80000000000000FCLL;
          }
          int v143 = &v25[v250[21]];
          if (*((void *)v143 + 3))
          {
            uint64_t v145 = *((void *)v143 + 4);
            uint64_t v144 = *((void *)v143 + 5);
            int v132 = v143[48];
            sub_21F770E44(v145, v144, v143[48]);
            uint64_t v130 = v145;
            uint64_t v131 = v144;
          }
          else
          {
            uint64_t v130 = 0;
            uint64_t v131 = 0;
            int v132 = 252;
          }
          uint64_t v134 = v248;
          uint64_t v136 = v240;
          uint64_t v133 = v241;
          uint64_t v128 = v142;
          uint64_t v124 = v246;
        }
        else
        {
          uint64_t v127 = 0;
          uint64_t v128 = 0;
          unint64_t v129 = 0;
          uint64_t v130 = 0;
          uint64_t v131 = 0;
          int v132 = 0;
          uint64_t v133 = v124;
          uint64_t v134 = (unsigned char *)v125;
          unsigned __int8 v135 = v126;
          uint64_t v136 = v125;
        }
        uint64_t v146 = v135;
        uint64_t v147 = v133;
        v257[0] = v133;
        uint64_t v148 = v134;
        v257[1] = v134;
        uint64_t v237 = v130;
        uint64_t v238 = v146;
        v257[2] = v146;
        v257[3] = v127;
        uint64_t v239 = v131;
        uint64_t v240 = v128;
        v257[4] = v128;
        unint64_t v236 = v129;
        v257[5] = v129;
        v257[6] = v130;
        v257[7] = v131;
        LODWORD(v246) = v132;
        char v258 = v132;
        sub_21F90930C(v124, v136, v126);
        sub_21F909444((uint64_t)v25);
        uint64_t v149 = (char *)v251 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_lineSeriesContext;
        swift_beginAccess();
        uint64_t v150 = *(void *)v149;
        uint64_t v151 = *(void *)(*(void *)v149 + 16);
        v248 = v148;
        if (v151 && (unint64_t v152 = sub_21F915910((uint64_t)v257), (v153 & 1) != 0))
        {
          uint64_t v154 = *(void *)(*(void *)(v150 + 56) + 8 * v152);
          swift_retain();
          uint64_t v155 = v127;
          uint64_t v157 = v239;
          uint64_t v156 = v240;
          uint64_t v159 = v236;
          uint64_t v158 = v237;
          unsigned __int8 v160 = v246;
          uint64_t v161 = v238;
        }
        else
        {
          type metadata accessor for SgLine.Points();
          uint64_t v154 = swift_allocObject();
          *(void *)(v154 + 16) = MEMORY[0x263F8EE78];
          uint64_t v235 = v127;
          uint64_t v241 = v147;
          uint64_t v162 = v147;
          uint64_t v158 = v237;
          uint64_t v163 = v238;
          uint64_t v164 = v127;
          uint64_t v165 = v239;
          uint64_t v156 = v240;
          uint64_t v159 = v236;
          sub_21F97FAD0(v162, (uint64_t)v148, v238, v164, v240, v236, v237, v239, v246, (uint64_t (*)(void))sub_21F7607AC, (void (*)(void))sub_21F770E64);
          swift_retain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&long long v259 = *(void *)v149;
          *(void *)uint64_t v149 = 0x8000000000000000;
          sub_21F873188(v154, (uint64_t)v257, isUniquelyReferenced_nonNull_native);
          uint64_t v161 = v163;
          uint64_t v147 = v241;
          *(void *)uint64_t v149 = v259;
          swift_bridgeObjectRelease();
          unsigned __int8 v160 = v246;
          uint64_t v167 = (uint64_t)v148;
          uint64_t v157 = v165;
          uint64_t v168 = v165;
          uint64_t v155 = v235;
          sub_21F97FAD0(v147, v167, v161, v235, v156, v159, v158, v168, v246, (uint64_t (*)(void))sub_21F7654F0, (void (*)(void))sub_21F770E50);
        }
        swift_endAccess();
        sub_21F97FAD0(v147, (uint64_t)v248, v161, v155, v156, v159, v158, v157, v160, (uint64_t (*)(void))sub_21F7654F0, (void (*)(void))sub_21F770E50);
        uint64_t v169 = (char **)(v154 + 16);
        swift_beginAccess();
        uint64_t v170 = *(void *)(*(void *)(v154 + 16) + 16);
        uint64_t v171 = *(void *)(*((void *)v251 + 2) + 24);
        memset(&v255[3], 0, 40);
        LOBYTE(v255[8]) = -1;
        v255[0] = v171;
        *(double *)&v255[1] = v24;
        *(double *)&v255[2] = v27;
        v255[10] = 0;
        v255[9] = 0;
        LOBYTE(v255[11]) = -1;
        uint64_t v172 = (uint64_t)v249;
        sub_21F97FB9C((uint64_t)(v249 + 88), (uint64_t)v272);
        if (v272[40] == 255)
        {
          sub_21F97FC04((uint64_t)v272);
          uint64_t v174 = (uint64_t *)v247;
        }
        else
        {
          sub_21F87B8B4((uint64_t)v272, (uint64_t)&v259);
          sub_21F97FC04((uint64_t)&v255[3]);
          sub_21F87B858((uint64_t)&v259, (uint64_t)&v255[3]);
          int v173 = *(unsigned __int8 *)(v172 + 152);
          uint64_t v174 = (uint64_t *)v247;
          if (v173 == 255)
          {
            if (qword_26AD45718 != -1) {
              swift_once();
            }
            uint64_t v177 = qword_26AD52208;
            sub_21F7D2610((uint64_t)&v259);
            v255[9] = v177;
            v255[10] = 0;
            LOBYTE(v255[11]) = 0;
          }
          else
          {
            uint64_t v176 = *(void *)(v172 + 136);
            uint64_t v175 = *(void *)(v172 + 144);
            sub_21F7D2610((uint64_t)&v259);
            v255[9] = v176;
            v255[10] = v175;
            LOBYTE(v255[11]) = v173;
          }
        }
        sub_21F8DDDB0((uint64_t)v255, (uint64_t)&v259);
        v178 = *v169;
        char v179 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v169 = v178;
        if ((v179 & 1) == 0)
        {
          v178 = sub_21F7E88F0(0, *((void *)v178 + 2) + 1, 1, v178);
          *uint64_t v169 = v178;
        }
        unint64_t v181 = *((void *)v178 + 2);
        unint64_t v180 = *((void *)v178 + 3);
        if (v181 >= v180 >> 1)
        {
          v178 = sub_21F7E88F0((char *)(v180 > 1), v181 + 1, 1, v178);
          *uint64_t v169 = v178;
        }
        *((void *)v178 + 2) = v181 + 1;
        char v182 = &v178[96 * v181];
        long long v183 = v260;
        *((_OWORD *)v182 + 2) = v259;
        *((_OWORD *)v182 + 3) = v183;
        long long v184 = v261;
        long long v185 = v262;
        long long v186 = v263[0];
        *(_OWORD *)(v182 + 105) = *(_OWORD *)((char *)v263 + 9);
        *((_OWORD *)v182 + 5) = v185;
        *((_OWORD *)v182 + 6) = v186;
        *((_OWORD *)v182 + 4) = v184;
        if (v170)
        {
          sub_21F909444(v172);
          swift_release();
          swift_release();
          uint64_t v187 = 0xE000000000000000;
        }
        else
        {
          sub_21F909320((uint64_t)v284, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_21F765124, (void (*)(uint64_t, uint64_t, uint64_t))sub_21F90930C);
          char v188 = sub_21F9E7A34((uint64_t)v273, (uint64_t)v274) & 1;
          sub_21F909320((uint64_t)v284, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_21F765354, (void (*)(uint64_t, uint64_t, uint64_t))sub_21F7B24B8);
          uint64_t v189 = v250;
          uint64_t v190 = v172 + v250[12];
          uint64_t v191 = *(void *)v190;
          char v192 = *(unsigned char *)(v190 + 8);
          long long v193 = v242;
          sub_21F7BB184(v172, (uint64_t)v242);
          uint64_t v194 = (uint64_t)v244;
          sub_21F77188C((uint64_t)v193, (uint64_t)v244);
          swift_release();
          uint64_t v195 = *(void *)(v172 + v189[16]);
          sub_21F909444(v172);
          v196 = v243;
          void *v243 = 0;
          v196[1] = v154;
          *((unsigned char *)v196 + 16) = v188;
          v196[3] = v191;
          *((unsigned char *)v196 + 32) = v192;
          uint64_t v197 = v245;
          sub_21F771F54(v194, (uint64_t)v196 + *(int *)(v245 + 32), (uint64_t (*)(void))type metadata accessor for SgShapeStyle);
          *(void *)((char *)v196 + *(int *)(v197 + 36)) = v195;
          uint64_t v198 = swift_allocBox();
          sub_21F771F54((uint64_t)v196, v199, type metadata accessor for SgLine);
          uint64_t v187 = v198 | 0x7000000000000000;
        }
        *uint64_t v174 = v187;
        return sub_21F8DDDE8((uint64_t)v255);
      }
      return result;
  }
}

uint64_t sub_21F97EE40(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_21F87BC34(v2, (uint64_t)&v17);
  unsigned __int8 v4 = v22;
  if ((v22 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = v17;
    uint64_t v6 = v18;
    unsigned __int8 v7 = v19;
    sub_21FA26A10();
    return sub_21FA027D8(a1, v5, v6, v7);
  }
  v22 &= ~0x8000000000000000;
  uint64_t v10 = v17;
  uint64_t v9 = v18;
  unsigned int v11 = v19;
  uint64_t v13 = v20;
  uint64_t v12 = v21;
  uint64_t v15 = v23;
  uint64_t v14 = v24;
  unsigned int v16 = v25;
  sub_21FA26A10();
  if (v11 < 0xFC)
  {
    sub_21FA26A20();
    sub_21FA26A10();
    if ((v11 & 0x80) != 0)
    {
      sub_21F767A6C();
    }
    else
    {
      sub_21F7607AC(v10, v9, v11);
      sub_21FA027D8(a1, v10, v9, v11);
    }
    sub_21F770E50(v10, v9, v11);
  }
  else
  {
    sub_21FA26A20();
  }
  if (v4 <= 0xFBu)
  {
    sub_21FA26A20();
    sub_21FA26A10();
    if ((v4 & 0x80) != 0)
    {
      sub_21F767A6C();
    }
    else
    {
      sub_21F7607AC(v13, v12, v4);
      sub_21FA027D8(a1, v13, v12, v4);
    }
    sub_21F770E50(v13, v12, v4);
    if (v16 <= 0xFB) {
      goto LABEL_11;
    }
    return sub_21FA26A20();
  }
  sub_21FA26A20();
  if (v16 > 0xFB) {
    return sub_21FA26A20();
  }
LABEL_11:
  sub_21FA26A20();
  sub_21FA26A10();
  if ((v16 & 0x80) != 0)
  {
    sub_21F767A6C();
  }
  else
  {
    sub_21F7607AC(v15, v14, v16);
    sub_21FA027D8(a1, v15, v14, v16);
  }
  return sub_21F770E50(v15, v14, v16);
}

uint64_t sub_21F97F0A8()
{
  sub_21F87BC34(v0, (uint64_t)v3);
  sub_21FA26A00();
  sub_21F97EE40((uint64_t)&v2);
  return sub_21FA26A50();
}

uint64_t sub_21F97F0F8(uint64_t a1)
{
  sub_21F87BC34(v1, (uint64_t)v4);
  return sub_21F97EE40(a1);
}

uint64_t sub_21F97F138()
{
  sub_21F87BC34(v0, (uint64_t)v3);
  sub_21FA26A00();
  sub_21F97EE40((uint64_t)&v2);
  return sub_21FA26A50();
}

uint64_t sub_21F97F18C(uint64_t a1, uint64_t a2)
{
  sub_21F87BC34(a1, (uint64_t)v4);
  sub_21F87BC34(a2, (uint64_t)v5);
  return sub_21F97F1D8((uint64_t)v4, (uint64_t)v5) & 1;
}

uint64_t sub_21F97F1D8(uint64_t a1, uint64_t a2)
{
  sub_21F87BC34(a1, (uint64_t)v50);
  unsigned __int8 v3 = v54;
  if ((v54 & 0x8000000000000000) == 0)
  {
    sub_21F7E1600((uint64_t)v50, (uint64_t)v58);
    sub_21F87BC34(a2, (uint64_t)&v41);
    if (v46 < 0) {
      return 0;
    }
    sub_21F7E1600((uint64_t)&v41, (uint64_t)v38);
    sub_21F7E1600((uint64_t)v58, (uint64_t)v59);
    if (!v60)
    {
      double v4 = *(double *)v59;
      sub_21F7E1600((uint64_t)v38, (uint64_t)v39);
      if (v40) {
        return 0;
      }
      return v4 == v39[0];
    }
    if (v60 == 1)
    {
      double v4 = *(double *)v59;
      sub_21F7E1600((uint64_t)v38, (uint64_t)v39);
      if (v40 != 1) {
        return 0;
      }
      return v4 == v39[0];
    }
    uint64_t v20 = v59[0];
    uint64_t v21 = v59[1];
    sub_21F7E1600((uint64_t)v38, (uint64_t)v39);
    if (v40 != 2) {
      return 0;
    }
    if (v20 == *(void *)&v39[0] && v21 == *(void *)&v39[1]) {
      return 1;
    }
    return (sub_21FA268D0() & 1) != 0;
  }
  v54 &= ~0x8000000000000000;
  double v6 = *(double *)v50;
  double v5 = *(double *)&v50[1];
  unsigned int v7 = v51;
  double v9 = v52;
  double v8 = v53;
  double v11 = v55;
  double v10 = v56;
  unsigned int v12 = v57;
  sub_21F87BC34(a2, (uint64_t)&v41);
  unsigned __int8 v13 = v46;
  if ((v46 & 0x8000000000000000) == 0)
  {
    sub_21F7E1600((uint64_t)&v41, (uint64_t)v59);
    return 0;
  }
  v46 &= ~0x8000000000000000;
  double v15 = v44;
  double v14 = v45;
  double v17 = v47;
  double v16 = v48;
  unsigned int v18 = v49;
  if (v7 > 0xFB)
  {
    if (v43 <= 0xFBu) {
      return 0;
    }
    goto LABEL_11;
  }
  if (v43 > 0xFBu) {
    return 0;
  }
  if ((v7 & 0x80) != 0)
  {
    if ((v43 & 0x80) == 0) {
      return 0;
    }
    if (v7)
    {
      if ((v43 & 1) == 0) {
        return 0;
      }
    }
    else if (v43)
    {
      return 0;
    }
    uint64_t result = 0;
    if (v6 != v41) {
      return result;
    }
    double v22 = v5;
    double v23 = v42;
LABEL_63:
    if (v22 != v23) {
      return result;
    }
    goto LABEL_11;
  }
  if ((v43 & 0x80) != 0) {
    return 0;
  }
  if (!v7)
  {
    uint64_t result = 0;
    if (v43) {
      return result;
    }
LABEL_50:
    double v22 = v6;
    double v23 = v41;
    goto LABEL_63;
  }
  if (v7 == 1)
  {
    uint64_t result = 0;
    if (v43 != 1) {
      return result;
    }
    goto LABEL_50;
  }
  if (v43 != 2) {
    return 0;
  }
  if (*(void *)&v6 != *(void *)&v41 || *(void *)&v5 != *(void *)&v42)
  {
    double v36 = v44;
    double v37 = v48;
    double v24 = v47;
    unsigned int v25 = v49;
    double v26 = v45;
    char v27 = sub_21FA268D0();
    double v15 = v36;
    double v16 = v37;
    double v14 = v26;
    unsigned int v18 = v25;
    double v17 = v24;
    char v28 = v27;
    uint64_t result = 0;
    if ((v28 & 1) == 0) {
      return result;
    }
  }
LABEL_11:
  if (v3 > 0xFBu)
  {
    if (v13 <= 0xFBu) {
      return 0;
    }
LABEL_13:
    if (v12 <= 0xFB)
    {
      if (v18 > 0xFB) {
        return 0;
      }
      if ((v12 & 0x80) == 0)
      {
        if ((v18 & 0x80) != 0) {
          return 0;
        }
        if (v12)
        {
          if (v12 != 1)
          {
            if (v18 != 2) {
              return 0;
            }
            if (*(void *)&v11 == *(void *)&v17 && *(void *)&v10 == *(void *)&v16) {
              return 1;
            }
            return (sub_21FA268D0() & 1) != 0;
          }
          if (v18 != 1) {
            return 0;
          }
        }
        else if (v18)
        {
          return 0;
        }
        return v11 == v17;
      }
      if ((v18 & 0x80) == 0) {
        return 0;
      }
      if (v12)
      {
        if ((v18 & 1) == 0) {
          return 0;
        }
      }
      else if (v18)
      {
        return 0;
      }
      if (v11 != v17 || v10 != v16) {
        return 0;
      }
    }
    else if (v18 <= 0xFB)
    {
      return 0;
    }
    return 1;
  }
  if (v13 > 0xFBu) {
    return 0;
  }
  if ((v3 & 0x80) != 0)
  {
    if ((v13 & 0x80) == 0) {
      return 0;
    }
    if (v3)
    {
      if ((v13 & 1) == 0) {
        return 0;
      }
    }
    else if (v13)
    {
      return 0;
    }
    uint64_t result = 0;
    if (v9 != v15) {
      return result;
    }
    double v29 = v8;
    double v30 = v14;
LABEL_79:
    if (v29 == v30) {
      goto LABEL_13;
    }
    return result;
  }
  if ((v13 & 0x80) != 0) {
    return 0;
  }
  if (!v3)
  {
    uint64_t result = 0;
    if (v13) {
      return result;
    }
LABEL_66:
    double v29 = v9;
    double v30 = v15;
    goto LABEL_79;
  }
  if (v3 == 1)
  {
    uint64_t result = 0;
    if (v13 != 1) {
      return result;
    }
    goto LABEL_66;
  }
  if (v13 != 2) {
    return 0;
  }
  if (*(void *)&v9 == *(void *)&v15 && *(void *)&v8 == *(void *)&v14) {
    goto LABEL_13;
  }
  double v31 = v16;
  double v32 = v17;
  unsigned int v33 = v18;
  char v34 = sub_21FA268D0();
  unsigned int v18 = v33;
  double v17 = v32;
  double v16 = v31;
  char v35 = v34;
  uint64_t result = 0;
  if (v35) {
    goto LABEL_13;
  }
  return result;
}

uint64_t _s6Charts8LineMarkV19_layoutChartContentyyAC_AA01_eF12LayoutInputsVtFZ_0(uint64_t a1, void *a2)
{
  sub_21F764AF8(a1, (uint64_t)v19);
  sub_21F764AF8(a1 + 144, (uint64_t)v18);
  double v4 = (unsigned char *)*a2;
  swift_beginAccess();
  if (v4[881] == 2)
  {
    sub_21F764AF8((uint64_t)v19, (uint64_t)v20);
    switch(sub_21F7607A0((uint64_t)v20))
    {
      case 1u:
        uint64_t v11 = sub_21F7607C4((uint64_t)v20);
        sub_21F76C9DC(v11, (uint64_t)v21, &qword_26AD455C8);
        goto LABEL_9;
      case 3u:
        sub_21F7607C4((uint64_t)v20);
        goto LABEL_11;
      case 4u:
      case 5u:
        sub_21F7607C4((uint64_t)v20);
LABEL_9:
        swift_retain();
        goto LABEL_18;
      default:
        uint64_t v5 = sub_21F7607C4((uint64_t)v20);
        if (*(char *)(v5 + 48) < 0) {
          goto LABEL_11;
        }
        uint64_t v6 = *(void *)(v5 + 40);
        uint64_t v7 = *(void *)(v5 + 32);
        if (*(unsigned char *)(v5 + 48))
        {
          if (*(unsigned char *)(v5 + 48) != 1)
          {
LABEL_11:
            v4[881] = 0;
            goto LABEL_12;
          }
          swift_retain();
          uint64_t v8 = v7;
          uint64_t v9 = v6;
          char v10 = 1;
        }
        else
        {
          swift_retain();
          uint64_t v8 = v7;
          uint64_t v9 = v6;
          char v10 = 0;
        }
        sub_21F770E38(v8, v9, v10);
LABEL_18:
        sub_21F764AF8((uint64_t)v18, (uint64_t)v22);
        switch(sub_21F7607A0((uint64_t)v22))
        {
          case 1u:
            uint64_t v17 = sub_21F7607C4((uint64_t)v22);
            sub_21F76C9DC(v17, (uint64_t)v23, &qword_26AD455C8);
            goto LABEL_13;
          case 3u:
            sub_21F7607C4((uint64_t)v22);
            goto LABEL_26;
          case 4u:
          case 5u:
            sub_21F7607C4((uint64_t)v22);
            goto LABEL_13;
          default:
            uint64_t v13 = sub_21F7607C4((uint64_t)v22);
            int v14 = *(char *)(v13 + 48);
            if (v14 < 0) {
              goto LABEL_26;
            }
            uint64_t v15 = *(void *)(v13 + 40);
            uint64_t v16 = *(void *)(v13 + 32);
            if ((_BYTE)v14)
            {
              if (v14 == 1) {
                sub_21F770E38(v16, v15, 1);
              }
              else {
LABEL_26:
              }
                v4[881] = 1;
            }
            else
            {
              sub_21F770E38(v16, v15, 0);
            }
            break;
        }
        break;
    }
  }
  else
  {
LABEL_12:
    swift_retain();
  }
LABEL_13:
  sub_21F760AD8((uint64_t)v19, 0);
  sub_21F760AD8((uint64_t)v18, 1);
  if (v4[1192]) {
    v4[1193] = 1;
  }
  return swift_release();
}

uint64_t sub_21F97F864()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 96))
  {
    sub_21F7656A8(*(void *)(v0 + 72), *(void *)(v0 + 80), *(unsigned char *)(v0 + 88));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 128))
  {
    sub_21F7656A8(*(void *)(v0 + 104), *(void *)(v0 + 112), *(unsigned char *)(v0 + 120));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 144);
  unint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 216);
  unint64_t v6 = *(void *)(v0 + 240);
  uint64_t v7 = *(void *)(v0 + 272);
  uint64_t v8 = *(void *)(v0 + 288);
  if (v6 > 1
    || (v1 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v2 > 1
    || (v5 | v4) & 0xF000000000000007 | v3 & 0xFFFFFFFFFFFFFF7CLL
    || (v8 | *(void *)(v0 + 280)) & 0xF000000000000007 | v7 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_21F7BB724(v1, *(void *)(v0 + 152), *(void *)(v0 + 160), v2, *(void *)(v0 + 176), *(void *)(v0 + 184), *(void *)(v0 + 192), v3, v4, v5, *(void *)(v0 + 224), *(void *)(v0 + 232), v6, *(void *)(v0 + 248), *(void *)(v0 + 256), *(void *)(v0 + 264), v7, *(void *)(v0 + 280), v8);
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v0 + 304);
  unint64_t v10 = *(void *)(v0 + 328);
  uint64_t v11 = *(void *)(v0 + 360);
  uint64_t v12 = *(void *)(v0 + 368);
  uint64_t v13 = *(void *)(v0 + 376);
  unint64_t v14 = *(void *)(v0 + 400);
  uint64_t v15 = *(void *)(v0 + 432);
  uint64_t v16 = *(void *)(v0 + 448);
  if (v14 > 1
    || (v9 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v10 > 1
    || (v13 | v12) & 0xF000000000000007 | v11 & 0xFFFFFFFFFFFFFF7CLL
    || (v16 | *(void *)(v0 + 440)) & 0xF000000000000007 | v15 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_21F7BB724(v9, *(void *)(v0 + 312), *(void *)(v0 + 320), v10, *(void *)(v0 + 336), *(void *)(v0 + 344), *(void *)(v0 + 352), v11, v12, v13, *(void *)(v0 + 384), *(void *)(v0 + 392), v14, *(void *)(v0 + 408), *(void *)(v0 + 416), *(void *)(v0 + 424), v15, *(void *)(v0 + 440), v16);
  }
  uint64_t v17 = *(void *)(v0 + 456);
  unint64_t v18 = *(void *)(v0 + 480);
  uint64_t v19 = *(void *)(v0 + 512);
  uint64_t v20 = *(void *)(v0 + 520);
  uint64_t v21 = *(void *)(v0 + 528);
  unint64_t v22 = *(void *)(v0 + 552);
  uint64_t v23 = *(void *)(v0 + 584);
  uint64_t v24 = *(void *)(v0 + 600);
  if (v22 > 1
    || (v17 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v18 > 1
    || (v21 | v20) & 0xF000000000000007 | v19 & 0xFFFFFFFFFFFFFF7CLL
    || (v24 | *(void *)(v0 + 592)) & 0xF000000000000007 | v23 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_21F7BB724(v17, *(void *)(v0 + 464), *(void *)(v0 + 472), v18, *(void *)(v0 + 488), *(void *)(v0 + 496), *(void *)(v0 + 504), v19, v20, v21, *(void *)(v0 + 536), *(void *)(v0 + 544), v22, *(void *)(v0 + 560), *(void *)(v0 + 568), *(void *)(v0 + 576), v23, *(void *)(v0 + 592), v24);
  }

  return MEMORY[0x270FA0238](v0, 624, 7);
}

uint64_t sub_21F97FAD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t (*a10)(void), void (*a11)(void))
{
  if (a6 < 0)
  {
    a11();
    ((void (*)(uint64_t, uint64_t, uint64_t))a11)(a4, a5, a6);
    return ((uint64_t (*)(uint64_t, uint64_t, void))a11)(a7, a8, a9);
  }
  else
  {
    return a10();
  }
}

uint64_t sub_21F97FB9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21F76CA40(&qword_26AD46858);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21F97FC04(uint64_t a1)
{
  uint64_t v2 = sub_21F76CA40(&qword_26AD46858);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for LineMark()
{
  return &type metadata for LineMark;
}

uint64_t destroy for LineSeriesKey(uint64_t a1)
{
  return sub_21F97FAD0(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64), (uint64_t (*)(void))sub_21F7654F0, (void (*)(void))sub_21F770E50);
}

uint64_t initializeWithCopy for LineSeriesKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  unsigned __int8 v11 = *(unsigned char *)(a2 + 64);
  sub_21F97FAD0(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, (uint64_t (*)(void))sub_21F7607AC, (void (*)(void))sub_21F770E64);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 64) = v11;
  return a1;
}

uint64_t assignWithCopy for LineSeriesKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  unsigned __int8 v11 = *(unsigned char *)(a2 + 64);
  sub_21F97FAD0(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, (uint64_t (*)(void))sub_21F7607AC, (void (*)(void))sub_21F770E64);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  unsigned __int8 v20 = *(unsigned char *)(a1 + 64);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 64) = v11;
  sub_21F97FAD0(v12, v13, v14, v15, v16, v17, v18, v19, v20, (uint64_t (*)(void))sub_21F7654F0, (void (*)(void))sub_21F770E50);
  return a1;
}

uint64_t assignWithTake for LineSeriesKey(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 64);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  unsigned __int8 v12 = *(unsigned char *)(a1 + 64);
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  long long v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(unsigned char *)(a1 + 64) = v3;
  sub_21F97FAD0(v4, v6, v5, v7, v8, v9, v10, v11, v12, (uint64_t (*)(void))sub_21F7654F0, (void (*)(void))sub_21F770E50);
  return a1;
}

uint64_t getEnumTagSinglePayload for LineSeriesKey(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 65)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 17);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for LineSeriesKey(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 56) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(unsigned char *)(a1 + 64) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 65) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = (unint64_t)-a2 << 8;
      double result = 0.0;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 49) = 0u;
      return result;
    }
    *(unsigned char *)(a1 + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_21F97FFEC(uint64_t a1)
{
  return *(void *)(a1 + 40) >> 63;
}

uint64_t sub_21F97FFF8(uint64_t result)
{
  *(void *)(result + 40) &= ~0x8000000000000000;
  return result;
}

uint64_t sub_21F980008(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 *)(result + 40) | (unint64_t)(a2 << 63);
  *(void *)(result + 16) = *(unsigned __int8 *)(result + 16);
  *(void *)(result + 40) = v2;
  return result;
}

ValueMetadata *type metadata accessor for LineSeriesKey()
{
  return &type metadata for LineSeriesKey;
}

unint64_t sub_21F980034()
{
  unint64_t result = qword_26AD45768;
  if (!qword_26AD45768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD45768);
  }
  return result;
}

uint64_t sub_21F98008C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270EFF9B8](a1, a2, a3, a4, MEMORY[0x263F8D510]);
}

uint64_t sub_21F980098()
{
  sub_21F745DBC();
  sub_21FA24B40();
  return v1;
}

uint64_t EnvironmentValues.chartIsCanvasAccelerated.getter()
{
  sub_21F747A68();
  sub_21FA24B40();
  return v1;
}

uint64_t EnvironmentValues.chartIsCanvasAccelerated.setter()
{
  return sub_21FA24B50();
}

uint64_t (*EnvironmentValues.chartIsCanvasAccelerated.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = sub_21F747A68();
  sub_21FA24B40();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a1 + 17);
  return sub_21F9801C0;
}

uint64_t sub_21F9801C0(uint64_t a1)
{
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a1 + 16);
  return sub_21FA24B50();
}

uint64_t sub_21F9801F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = *v2;
  uint64_t v5 = v2[1];
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v8 = sub_21F76CA40(&qword_26AD462A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  uint64_t v9 = (uint64_t *)(a2 + *(int *)(sub_21F76CA40(&qword_26AD46290) + 36));
  *uint64_t v9 = KeyPath;
  v9[1] = v6;
  v9[2] = v5;

  return swift_retain();
}

uint64_t sub_21F9802B0()
{
  return AGCompareValues();
}

uint64_t ChartPlotContent.body.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_retain();
}

uint64_t View.chartPlotStyle<A>(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v12 = (void *)swift_allocObject();
  v12[2] = a3;
  v12[3] = a4;
  v12[4] = a5;
  v12[5] = a6;
  v12[6] = a1;
  v12[7] = a2;
  v14[0] = sub_21F9804C4;
  v14[1] = v12;
  swift_retain();
  MEMORY[0x223C54910](v14, a3, &type metadata for ChartPlotStyleModifier, a5);
  return swift_release();
}

uint64_t sub_21F9803EC(uint64_t a1)
{
  __n128 v1 = MEMORY[0x270FA5388](a1);
  uint64_t v5 = *v2;
  v3(&v5, v1);
  return sub_21FA25750();
}

uint64_t sub_21F98048C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_21F9804C4(uint64_t a1)
{
  return sub_21F9803EC(a1);
}

uint64_t sub_21F9804D4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21F9804F0@<X0>(unsigned char *a1@<X8>)
{
  sub_21F747A68();
  uint64_t result = sub_21FA24B40();
  *a1 = v3;
  return result;
}

uint64_t sub_21F980540()
{
  return sub_21FA24B50();
}

uint64_t sub_21F98058C()
{
  return MEMORY[0x263F1B718];
}

uint64_t sub_21F980598()
{
  return swift_getWitnessTable();
}

unint64_t sub_21F980600()
{
  unint64_t result = qword_26AD45760;
  if (!qword_26AD45760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD45760);
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartPlotStyleModifier()
{
  return &type metadata for ChartPlotStyleModifier;
}

ValueMetadata *type metadata accessor for ChartIsCanvasAcceleratedKey()
{
  return &type metadata for ChartIsCanvasAcceleratedKey;
}

uint64_t sub_21F980674()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for ChartPlotStyleConfigurationKey()
{
  return &type metadata for ChartPlotStyleConfigurationKey;
}

unint64_t sub_21F9806AC()
{
  unint64_t result = qword_26AD46288;
  if (!qword_26AD46288)
  {
    sub_21F779EA4(&qword_26AD46290);
    sub_21F779E60(&qword_26AD46298, &qword_26AD462A0);
    sub_21F779E60(&qword_26AD462A8, &qword_26AD462B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD46288);
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributeGraphBasedDSLFeature()
{
  return &type metadata for AttributeGraphBasedDSLFeature;
}

uint64_t PointPlot<A>.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F8B0FF0(v2, v4, a2);
  sub_21F8B0FF0(v7, v4, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_21F980868@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  v20[1] = a6;
  v20[2] = a7;
  v20[0] = a4;
  uint64_t v21 = a8;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  uint64_t v27 = a7;
  uint64_t v9 = type metadata accessor for XYRenderer();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  unsigned __int8 v12 = (char *)v20 - v11;
  uint64_t v13 = type metadata accessor for VectorizedPointPlotContent();
  uint64_t v14 = *(void *)(v13 - 8);
  __n128 v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)v20 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v12, a1, v9, v15);
  double v18 = sub_21F980A3C((uint64_t)v12, (uint64_t)v17);
  (*(void (**)(uint64_t, uint64_t, double))(v10 + 8))(a1, v9, v18);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(v21, v17, v13);
}

double sub_21F980A3C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for XYRenderer();
  *(void *)(a2 + 24) = v4;
  *(void *)(a2 + 32) = &off_26D1357F0;
  uint64_t v5 = sub_21F77E8F8((uint64_t *)a2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(v5, a1, v4);
  uint64_t v6 = (int *)type metadata accessor for PointsRenderer(0);
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  uint64_t v7 = a2 + v6[8];
  uint64_t v8 = type metadata accessor for ChartContentRenderContext.Environment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = a2 + v6[9];
  *(void *)(v9 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(unsigned char *)(v9 + 40) = -1;
  uint64_t v11 = a2 + v6[10];
  *(void *)uint64_t v11 = 0;
  *(void *)(v11 + 8) = 0;
  *(unsigned char *)(v11 + 16) = -1;
  return result;
}

uint64_t sub_21F980B5C(uint64_t a1, uint64_t a2)
{
  return PointPlot<A>.body.getter(a1, *(void *)(a2 - 8));
}

uint64_t PointPlot.init<A, B, C>(_:x:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v52 = a7;
  uint64_t v53 = a1;
  uint64_t v50 = a3;
  uint64_t v51 = a9;
  uint64_t v54 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v49 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v49);
  double v48 = (char *)&v40 - v14;
  uint64_t v15 = a8;
  uint64_t v46 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v46);
  uint64_t v17 = (char *)&v40 - v16;
  uint64_t v47 = *(void *)(a4 - 8);
  uint64_t v18 = v47;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = v15;
  double v44 = v21;
  uint64_t v55 = a4;
  uint64_t v56 = a5;
  uint64_t v42 = a5;
  uint64_t v57 = a6;
  uint64_t v58 = v52;
  uint64_t v59 = v15;
  uint64_t v60 = a10;
  uint64_t v22 = type metadata accessor for XYRenderer();
  __n128 v23 = MEMORY[0x270FA5388](v22 - 8);
  uint64_t v25 = (char *)&v40 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16))(v21, v53, a4, v23);
  uint64_t v45 = type metadata accessor for PlottableProjection();
  uint64_t v26 = *(void *)(v45 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v17, v54, v45);
  swift_storeEnumTagMultiPayload();
  uint64_t v27 = a6;
  uint64_t v41 = a10;
  uint64_t v28 = type metadata accessor for PlottableProjection();
  uint64_t v29 = *(void *)(v28 - 8);
  double v30 = v48;
  uint64_t v31 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v48, v50, v28);
  swift_storeEnumTagMultiPayload();
  uint64_t v32 = (uint64_t)v25;
  uint64_t v33 = (uint64_t)v25;
  uint64_t v34 = v43;
  uint64_t v35 = (uint64_t)v17;
  uint64_t v36 = (uint64_t)v30;
  uint64_t v37 = v42;
  uint64_t v38 = v52;
  sub_21F836C28((uint64_t)v44, v35, v36, a4, v33);
  sub_21F980868(v32, a4, v37, v27, v38, v34, v41, v51);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v31, v28);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v54, v45);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8))(v53, a4);
}

uint64_t PointPlot.init<A, B>(_:x:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v44 = a4;
  uint64_t v42 = a2;
  uint64_t v43 = a3;
  uint64_t v45 = a9;
  uint64_t v46 = a1;
  uint64_t v39 = a7;
  swift_getAssociatedTypeWitness();
  uint64_t v41 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v41);
  uint64_t v14 = (char *)&v37 - v13;
  uint64_t v40 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v40);
  uint64_t v16 = (char *)&v37 - v15;
  uint64_t v38 = *(void *)(a5 - 8);
  uint64_t v17 = v38;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = a5;
  uint64_t v48 = a6;
  uint64_t v49 = MEMORY[0x263F8D538];
  uint64_t v50 = a7;
  uint64_t v37 = a8;
  uint64_t v51 = a8;
  uint64_t v52 = &protocol witness table for Double;
  uint64_t v21 = type metadata accessor for XYRenderer();
  __n128 v22 = MEMORY[0x270FA5388](v21 - 8);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16);
  uint64_t v26 = a5;
  v25(v20, v46, a5, v22);
  uint64_t v27 = a6;
  uint64_t v28 = type metadata accessor for PlottableProjection();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v16, v42, v28);
  swift_storeEnumTagMultiPayload();
  *(void *)uint64_t v14 = v43;
  v14[8] = v44 & 1;
  swift_storeEnumTagMultiPayload();
  uint64_t v31 = (uint64_t)v20;
  uint64_t v32 = (uint64_t)v14;
  uint64_t v33 = MEMORY[0x263F8D538];
  uint64_t v34 = v39;
  uint64_t v35 = v37;
  sub_21F836C28(v31, (uint64_t)v16, v32, v26, (uint64_t)v24);
  sub_21F980868((uint64_t)v24, v26, v27, v33, v34, v35, (uint64_t)&protocol witness table for Double, v45);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v28);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v46, v26);
}

uint64_t PointPlot.init<A, B>(_:x:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v39 = a6;
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v37 = a1;
  uint64_t v45 = a8;
  uint64_t v42 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v42);
  uint64_t v41 = (uint64_t *)((char *)&v36 - v13);
  uint64_t v40 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v40);
  uint64_t v15 = (char *)&v36 - v14;
  uint64_t v38 = *(void *)(a4 - 8);
  uint64_t v16 = v38;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = a4;
  uint64_t v47 = a5;
  uint64_t v20 = a5;
  uint64_t v48 = MEMORY[0x263F8D538];
  uint64_t v49 = a6;
  uint64_t v21 = a7;
  uint64_t v50 = a7;
  uint64_t v51 = &protocol witness table for Double;
  uint64_t v22 = type metadata accessor for XYRenderer();
  __n128 v23 = MEMORY[0x270FA5388](v22 - 8);
  uint64_t v25 = (char *)&v36 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16))(v19, a1, a4, v23);
  uint64_t v26 = v21;
  uint64_t v27 = type metadata accessor for PlottableProjection();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v15, v43, v27);
  swift_storeEnumTagMultiPayload();
  uint64_t v30 = v41;
  *uint64_t v41 = v44;
  swift_storeEnumTagMultiPayload();
  uint64_t v31 = (uint64_t)v19;
  uint64_t v32 = (uint64_t)v30;
  uint64_t v33 = MEMORY[0x263F8D538];
  uint64_t v34 = v39;
  sub_21F836C28(v31, (uint64_t)v15, v32, a4, (uint64_t)v25);
  sub_21F980868((uint64_t)v25, a4, v20, v33, v34, v26, (uint64_t)&protocol witness table for Double, v45);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v27);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v37, a4);
}

uint64_t PointPlot.init<A, B>(_:x:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v39 = a4;
  uint64_t v40 = a9;
  int v37 = a3;
  uint64_t v35 = a7;
  uint64_t v36 = a2;
  uint64_t v41 = a1;
  swift_getAssociatedTypeWitness();
  uint64_t v38 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v38);
  uint64_t v14 = (char *)&v34 - v13;
  uint64_t v15 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v34 - v16;
  uint64_t v34 = *(void *)(a5 - 8);
  uint64_t v18 = v34;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = a5;
  uint64_t v43 = MEMORY[0x263F8D538];
  uint64_t v44 = a6;
  uint64_t v45 = a7;
  uint64_t v46 = &protocol witness table for Double;
  uint64_t v47 = a8;
  uint64_t v22 = type metadata accessor for XYRenderer();
  __n128 v23 = MEMORY[0x270FA5388](v22 - 8);
  uint64_t v25 = (char *)&v34 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16))(v21, v41, a5, v23);
  *(void *)uint64_t v17 = v36;
  v17[8] = v37 & 1;
  swift_storeEnumTagMultiPayload();
  uint64_t v26 = type metadata accessor for PlottableProjection();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v14, v39, v26);
  swift_storeEnumTagMultiPayload();
  uint64_t v29 = (uint64_t)v21;
  uint64_t v30 = (uint64_t)v17;
  uint64_t v31 = MEMORY[0x263F8D538];
  uint64_t v32 = v35;
  sub_21F836C28(v29, v30, (uint64_t)v14, a5, (uint64_t)v25);
  sub_21F980868((uint64_t)v25, a5, v31, a6, v32, (uint64_t)&protocol witness table for Double, a8, v40);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v26);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v41, a5);
}

uint64_t PointPlot.init<A, B>(_:x:y:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v36 = a6;
  uint64_t v39 = a3;
  uint64_t v40 = a8;
  uint64_t v41 = a1;
  uint64_t v37 = *(void *)(*a2 + *MEMORY[0x263F8EA20]);
  uint64_t v38 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v38);
  uint64_t v14 = (char *)&v34 - v13;
  uint64_t v15 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (uint64_t *)((char *)&v34 - v16);
  uint64_t v35 = *(void *)(a4 - 8);
  uint64_t v18 = v35;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = a4;
  uint64_t v43 = MEMORY[0x263F8D538];
  uint64_t v44 = a5;
  uint64_t v45 = a6;
  uint64_t v46 = &protocol witness table for Double;
  uint64_t v47 = a7;
  uint64_t v22 = type metadata accessor for XYRenderer();
  __n128 v23 = MEMORY[0x270FA5388](v22 - 8);
  uint64_t v25 = (char *)&v34 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16))(v21, v41, a4, v23);
  *uint64_t v17 = a2;
  swift_storeEnumTagMultiPayload();
  uint64_t v26 = type metadata accessor for PlottableProjection();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v14, v39, v26);
  swift_storeEnumTagMultiPayload();
  uint64_t v29 = (uint64_t)v21;
  uint64_t v30 = (uint64_t)v14;
  uint64_t v31 = MEMORY[0x263F8D538];
  uint64_t v32 = v36;
  sub_21F836C28(v29, (uint64_t)v17, v30, a4, (uint64_t)v25);
  sub_21F980868((uint64_t)v25, a4, v31, a5, v32, (uint64_t)&protocol witness table for Double, a7, v40);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v26);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v41, a4);
}

uint64_t static VectorizedPointPlotContent._layoutChartContent(_:_:)(uint64_t a1, long long *a2)
{
  uint64_t v4 = type metadata accessor for PointsRenderer(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (void *)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_21F981DF0(a1, (uint64_t)v6);
  uint64_t v7 = v6[3];
  uint64_t v8 = v6[4];
  sub_21F77E0FC(v6, v7);
  long long v10 = *a2;
  (*(void (**)(long long *, uint64_t, uint64_t))(v8 + 8))(&v10, v7, v8);
  return sub_21F985244((uint64_t)v6, type metadata accessor for PointsRenderer);
}

uint64_t sub_21F981DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PointsRenderer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static VectorizedPointPlotContent._renderChartContent(_:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6 = sub_21F76CA40(&qword_26AD48A80);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PointsRenderer(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v12 = *(unsigned char *)a2;
  uint64_t v13 = *(void *)(a2 + 8);
  sub_21F981DF0((uint64_t)a1, (uint64_t)v11);
  v32[0] = v12;
  uint64_t v33 = v13;
  sub_21F8DC9D4(v32);
  if (v12)
  {
    uint64_t v14 = type metadata accessor for SgGroup(0);
    uint64_t v31 = a3;
    uint64_t v15 = (int *)v14;
    unint64_t v16 = swift_allocBox();
    uint64_t v18 = v17;
    uint64_t v30 = *(void *)(*(void *)(v13 + 16) + 24);
    uint64_t v20 = a1[3];
    uint64_t v19 = a1[4];
    sub_21F77E0FC(a1, v20);
    uint64_t v21 = (*(uint64_t (**)(ValueMetadata *, uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v19 + 32))(&type metadata for PointMark, v13, &type metadata for PointMark, &off_26D140300, v20, v19);
    uint64_t v22 = type metadata accessor for SgClipRect(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v8, 1, 1, v22);
    uint64_t v23 = v13 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
    swift_beginAccess();
    uint64_t v24 = *(void *)(v23 + *(int *)(type metadata accessor for ChartContentRenderContext.Environment(0) + 64));
    sub_21F985244((uint64_t)v11, type metadata accessor for PointsRenderer);
    *uint64_t v18 = v30;
    v18[1] = v21;
    uint64_t result = sub_21F7B94C0((uint64_t)v8, (uint64_t)v18 + v15[6]);
    *(void *)((char *)v18 + v15[7]) = 0x3FF0000000000000;
    *(void *)((char *)v18 + v15[8]) = v24;
    *(void *)((char *)v18 + v15[9]) = MEMORY[0x263F8EE78];
    uint64_t v26 = v15[10];
    a3 = v31;
    *((unsigned char *)v18 + v26) = 0;
  }
  else
  {
    type metadata accessor for AnyVectorizedRenderer(0);
    uint64_t v27 = swift_allocBox();
    sub_21F9820F0((uint64_t)v11, v28);
    type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
    uint64_t result = swift_storeEnumTagMultiPayload();
    unint64_t v16 = v27 | 0xD000000000000000;
  }
  *a3 = v16;
  return result;
}

uint64_t sub_21F9820F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PointsRenderer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21F982154()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21F98219C(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21F9821F8(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_21F982354(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x21F98256CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for PointPlot()
{
  return sub_21F764F08();
}

uint64_t sub_21F9825AC()
{
  uint64_t result = type metadata accessor for PointsRenderer(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_21F982638(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for PointsRenderer(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *(void *)a1 = *a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v6 = (int *)v4;
    long long v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    *(void *)(a1 + 48) = a2[6];
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
    uint64_t v8 = v6[8];
    BOOL v9 = (_OWORD *)(a1 + v8);
    unsigned int v10 = (_OWORD *)((char *)a2 + v8);
    int v11 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
    uint64_t v12 = *((void *)v11 - 1);
    int v13 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v12 + 48);
    swift_retain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = sub_21F76CA40(qword_267EE7A88);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      int v16 = *((unsigned __int8 *)v10 + 40);
      if (v16 == 255)
      {
        long long v17 = v10[1];
        *BOOL v9 = *v10;
        v9[1] = v17;
        *(_OWORD *)((char *)v9 + 25) = *(_OWORD *)((char *)v10 + 25);
      }
      else if (v16)
      {
        long long v18 = *(_OWORD *)((char *)v10 + 24);
        *(_OWORD *)((char *)v9 + 24) = v18;
        (**(void (***)(_OWORD *, _OWORD *))(v18 - 8))(v9, v10);
        *((unsigned char *)v9 + 40) = 1;
      }
      else
      {
        *(void *)BOOL v9 = *(void *)v10;
        *((unsigned char *)v9 + 40) = 0;
        swift_retain();
      }
      *((unsigned char *)v9 + 41) = *((unsigned char *)v10 + 41);
      *((void *)v9 + 6) = *((void *)v10 + 6);
      *((void *)v9 + 7) = *((void *)v10 + 7);
      uint64_t v19 = *((void *)v10 + 9);
      *((void *)v9 + 8) = *((void *)v10 + 8);
      *((void *)v9 + 9) = v19;
      *((void *)v9 + 10) = *((void *)v10 + 10);
      int v20 = *((unsigned __int8 *)v10 + 128);
      swift_bridgeObjectRetain();
      uint64_t v127 = v6;
      if (v20 == 255)
      {
        long long v21 = *(_OWORD *)((char *)v10 + 104);
        *(_OWORD *)((char *)v9 + 88) = *(_OWORD *)((char *)v10 + 88);
        *(_OWORD *)((char *)v9 + 104) = v21;
        *(_OWORD *)((char *)v9 + 113) = *(_OWORD *)((char *)v10 + 113);
      }
      else if (v20)
      {
        *((void *)v9 + 11) = *((void *)v10 + 11);
        v9[6] = v10[6];
        *((unsigned char *)v9 + 128) = 1;
        swift_retain();
      }
      else
      {
        long long v22 = v10[7];
        v9[7] = v22;
        (**(void (***)(uint64_t, uint64_t))(v22 - 8))((uint64_t)v9 + 88, (uint64_t)v10 + 88);
        *((unsigned char *)v9 + 128) = 0;
      }
      *(_OWORD *)((char *)v9 + 136) = *(_OWORD *)((char *)v10 + 136);
      *((unsigned char *)v9 + 152) = *((unsigned char *)v10 + 152);
      *((void *)v9 + 20) = *((void *)v10 + 20);
      *((unsigned char *)v9 + 168) = *((unsigned char *)v10 + 168);
      long long v23 = v10[12];
      v9[11] = v10[11];
      v9[12] = v23;
      *((unsigned char *)v9 + 208) = *((unsigned char *)v10 + 208);
      uint64_t v24 = v11[11];
      uint64_t v25 = (char *)v9 + v24;
      uint64_t v26 = (char *)v10 + v24;
      uint64_t v27 = sub_21FA24C90();
      uint64_t v28 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        uint64_t v29 = sub_21F76CA40(&qword_26AD47C20);
        memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      uint64_t v30 = v11[12];
      uint64_t v31 = (char *)v9 + v30;
      uint64_t v32 = (char *)v10 + v30;
      *(void *)uint64_t v31 = *(void *)v32;
      v31[8] = v32[8];
      *(void *)((char *)v9 + v11[13]) = *(void *)((char *)v10 + v11[13]);
      uint64_t v33 = v11[14];
      uint64_t v34 = (char *)v9 + v33;
      uint64_t v35 = (char *)v10 + v33;
      uint64_t v36 = sub_21FA25910();
      uint64_t v37 = *(void *)(v36 - 8);
      uint64_t v126 = v12;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
      {
        uint64_t v38 = sub_21F76CA40(&qword_26AD4A3B8);
        memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      }
      uint64_t v39 = v11[15];
      uint64_t v40 = (char *)v9 + v39;
      uint64_t v41 = (char *)v10 + v39;
      *(void *)uint64_t v40 = *(void *)v41;
      *((_WORD *)v40 + 4) = *((_WORD *)v41 + 4);
      *(void *)((char *)v9 + v11[16]) = *(void *)((char *)v10 + v11[16]);
      *(void *)((char *)v9 + v11[17]) = *(void *)((char *)v10 + v11[17]);
      uint64_t v42 = v11[18];
      uint64_t v43 = (char *)v9 + v42;
      uint64_t v44 = (char *)v10 + v42;
      uint64_t v45 = *(void *)((char *)v10 + v42 + 24);
      swift_retain();
      if (v45)
      {
        uint64_t v46 = *(void *)v44;
        uint64_t v47 = *((void *)v44 + 1);
        char v48 = v44[16];
        sub_21F7652C0(*(void *)v44, v47, v48);
        *(void *)uint64_t v43 = v46;
        *((void *)v43 + 1) = v47;
        v43[16] = v48;
        uint64_t v49 = *((void *)v44 + 4);
        *((void *)v43 + 3) = *((void *)v44 + 3);
        uint64_t v50 = *((void *)v44 + 5);
        char v51 = v44[48];
        swift_bridgeObjectRetain();
        sub_21F770E44(v49, v50, v51);
        *((void *)v43 + 4) = v49;
        *((void *)v43 + 5) = v50;
        v43[48] = v51;
        *(_OWORD *)(v43 + 56) = *(_OWORD *)(v44 + 56);
      }
      else
      {
        long long v52 = *((_OWORD *)v44 + 3);
        *((_OWORD *)v43 + 2) = *((_OWORD *)v44 + 2);
        *((_OWORD *)v43 + 3) = v52;
        *((void *)v43 + 8) = *((void *)v44 + 8);
        long long v53 = *((_OWORD *)v44 + 1);
        *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
        *((_OWORD *)v43 + 1) = v53;
      }
      uint64_t v54 = v11[19];
      uint64_t v55 = (char *)v9 + v54;
      uint64_t v56 = (char *)v10 + v54;
      if (*(void *)((char *)v10 + v54 + 24))
      {
        uint64_t v57 = *(void *)v56;
        uint64_t v58 = *((void *)v56 + 1);
        char v59 = v56[16];
        sub_21F7652C0(*(void *)v56, v58, v59);
        *(void *)uint64_t v55 = v57;
        *((void *)v55 + 1) = v58;
        v55[16] = v59;
        uint64_t v60 = *((void *)v56 + 4);
        *((void *)v55 + 3) = *((void *)v56 + 3);
        uint64_t v61 = *((void *)v56 + 5);
        char v62 = v56[48];
        swift_bridgeObjectRetain();
        sub_21F770E44(v60, v61, v62);
        *((void *)v55 + 4) = v60;
        *((void *)v55 + 5) = v61;
        v55[48] = v62;
        *(_OWORD *)(v55 + 56) = *(_OWORD *)(v56 + 56);
      }
      else
      {
        long long v63 = *((_OWORD *)v56 + 3);
        *((_OWORD *)v55 + 2) = *((_OWORD *)v56 + 2);
        *((_OWORD *)v55 + 3) = v63;
        *((void *)v55 + 8) = *((void *)v56 + 8);
        long long v64 = *((_OWORD *)v56 + 1);
        *(_OWORD *)uint64_t v55 = *(_OWORD *)v56;
        *((_OWORD *)v55 + 1) = v64;
      }
      uint64_t v65 = v11[20];
      uint64_t v66 = (char *)v9 + v65;
      uint64_t v67 = (char *)v10 + v65;
      if (*(void *)((char *)v10 + v65 + 24))
      {
        uint64_t v68 = *(void *)v67;
        uint64_t v69 = *((void *)v67 + 1);
        char v70 = v67[16];
        sub_21F7652C0(*(void *)v67, v69, v70);
        *(void *)uint64_t v66 = v68;
        *((void *)v66 + 1) = v69;
        v66[16] = v70;
        uint64_t v71 = *((void *)v67 + 4);
        *((void *)v66 + 3) = *((void *)v67 + 3);
        uint64_t v72 = *((void *)v67 + 5);
        char v73 = v67[48];
        swift_bridgeObjectRetain();
        sub_21F770E44(v71, v72, v73);
        *((void *)v66 + 4) = v71;
        *((void *)v66 + 5) = v72;
        v66[48] = v73;
        *(_OWORD *)(v66 + 56) = *(_OWORD *)(v67 + 56);
      }
      else
      {
        long long v74 = *((_OWORD *)v67 + 3);
        *((_OWORD *)v66 + 2) = *((_OWORD *)v67 + 2);
        *((_OWORD *)v66 + 3) = v74;
        *((void *)v66 + 8) = *((void *)v67 + 8);
        long long v75 = *((_OWORD *)v67 + 1);
        *(_OWORD *)uint64_t v66 = *(_OWORD *)v67;
        *((_OWORD *)v66 + 1) = v75;
      }
      uint64_t v76 = v11[21];
      uint64_t v77 = (char *)v9 + v76;
      uint64_t v78 = (char *)v10 + v76;
      if (*(void *)((char *)v10 + v76 + 24))
      {
        uint64_t v79 = *(void *)v78;
        uint64_t v80 = *((void *)v78 + 1);
        char v81 = v78[16];
        sub_21F7652C0(*(void *)v78, v80, v81);
        *(void *)uint64_t v77 = v79;
        *((void *)v77 + 1) = v80;
        v77[16] = v81;
        uint64_t v82 = *((void *)v78 + 4);
        *((void *)v77 + 3) = *((void *)v78 + 3);
        uint64_t v83 = *((void *)v78 + 5);
        char v84 = v78[48];
        swift_bridgeObjectRetain();
        sub_21F770E44(v82, v83, v84);
        *((void *)v77 + 4) = v82;
        *((void *)v77 + 5) = v83;
        v77[48] = v84;
        *(_OWORD *)(v77 + 56) = *(_OWORD *)(v78 + 56);
      }
      else
      {
        long long v85 = *((_OWORD *)v78 + 3);
        *((_OWORD *)v77 + 2) = *((_OWORD *)v78 + 2);
        *((_OWORD *)v77 + 3) = v85;
        *((void *)v77 + 8) = *((void *)v78 + 8);
        long long v86 = *((_OWORD *)v78 + 1);
        *(_OWORD *)uint64_t v77 = *(_OWORD *)v78;
        *((_OWORD *)v77 + 1) = v86;
      }
      uint64_t v87 = v11[22];
      uint64_t v88 = (char *)v9 + v87;
      uint64_t v89 = (char *)v10 + v87;
      *(_OWORD *)uint64_t v88 = *(_OWORD *)v89;
      *((void *)v88 + 2) = *((void *)v89 + 2);
      uint64_t v90 = v11[23];
      int v91 = (char *)v9 + v90;
      uint64_t v92 = (char *)v10 + v90;
      *(_OWORD *)int v91 = *(_OWORD *)v92;
      *((void *)v91 + 2) = *((void *)v92 + 2);
      uint64_t v93 = v11[24];
      uint64_t v94 = (char *)v9 + v93;
      uint64_t v95 = (char *)v10 + v93;
      if (*(void *)((char *)v10 + v93 + 24))
      {
        uint64_t v96 = *(void *)v95;
        uint64_t v97 = *((void *)v95 + 1);
        char v98 = v95[16];
        sub_21F7652C0(*(void *)v95, v97, v98);
        *(void *)uint64_t v94 = v96;
        *((void *)v94 + 1) = v97;
        v94[16] = v98;
        *((void *)v94 + 3) = *((void *)v95 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v99 = *((_OWORD *)v95 + 1);
        *(_OWORD *)uint64_t v94 = *(_OWORD *)v95;
        *((_OWORD *)v94 + 1) = v99;
      }
      uint64_t v100 = v11[25];
      double v101 = (char *)v9 + v100;
      double v102 = (char *)v10 + v100;
      if (*(void *)((char *)v10 + v100 + 24))
      {
        uint64_t v103 = *(void *)v102;
        uint64_t v104 = *((void *)v102 + 1);
        char v105 = v102[16];
        sub_21F7652C0(*(void *)v102, v104, v105);
        *(void *)double v101 = v103;
        *((void *)v101 + 1) = v104;
        v101[16] = v105;
        *((void *)v101 + 3) = *((void *)v102 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v106 = *((_OWORD *)v102 + 1);
        *(_OWORD *)double v101 = *(_OWORD *)v102;
        *((_OWORD *)v101 + 1) = v106;
      }
      uint64_t v6 = v127;
      uint64_t v107 = v11[26];
      char v108 = (void *)((char *)v9 + v107);
      uint64_t v109 = (void *)((char *)v10 + v107);
      uint64_t v110 = v109[1];
      *char v108 = *v109;
      v108[1] = v110;
      *((unsigned char *)v9 + v11[27]) = *((unsigned char *)v10 + v11[27]);
      uint64_t v111 = v11[28];
      uint64_t v112 = (char *)v9 + v111;
      char v113 = (char *)v10 + v111;
      uint64_t v114 = *((void *)v113 + 3);
      swift_bridgeObjectRetain();
      if (v114)
      {
        *((void *)v112 + 3) = v114;
        (**(void (***)(char *, char *, uint64_t))(v114 - 8))(v112, v113, v114);
      }
      else
      {
        long long v115 = *((_OWORD *)v113 + 1);
        *(_OWORD *)uint64_t v112 = *(_OWORD *)v113;
        *((_OWORD *)v112 + 1) = v115;
      }
      (*(void (**)(_OWORD *, void, uint64_t, int *))(v126 + 56))(v9, 0, 1, v11);
    }
    uint64_t v116 = v6[9];
    uint64_t v117 = a1 + v116;
    uint64_t v118 = (_OWORD *)((char *)a2 + v116);
    int v119 = *((unsigned __int8 *)a2 + v116 + 40);
    if (v119 == 255)
    {
      long long v120 = v118[1];
      *(_OWORD *)uint64_t v117 = *v118;
      *(_OWORD *)(v117 + 16) = v120;
      *(_OWORD *)(v117 + 25) = *(_OWORD *)((char *)v118 + 25);
    }
    else if (v119)
    {
      *(void *)uint64_t v117 = *(void *)v118;
      *(_OWORD *)(v117 + 8) = *(_OWORD *)((char *)v118 + 8);
      *(unsigned char *)(v117 + 40) = 1;
      swift_retain();
    }
    else
    {
      long long v121 = *(_OWORD *)((char *)v118 + 24);
      *(_OWORD *)(v117 + 24) = v121;
      (**(void (***)(uint64_t))(v121 - 8))(v117);
      *(unsigned char *)(v117 + 40) = 0;
    }
    uint64_t v122 = v6[10];
    uint64_t v123 = a1 + v122;
    uint64_t v124 = (uint64_t)a2 + v122;
    *(_OWORD *)uint64_t v123 = *(_OWORD *)v124;
    *(unsigned char *)(v123 + 16) = *(unsigned char *)(v124 + 16);
  }
  return a1;
}

uint64_t sub_21F982F7C(uint64_t a1)
{
  _s6Charts15AnyChartContentVwxx_0(a1);
  swift_release();
  uint64_t v2 = type metadata accessor for PointsRenderer(0);
  uint64_t v3 = a1 + *(int *)(v2 + 32);
  uint64_t v4 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v4 - 1) + 48))(v3, 1, v4))
  {
    int v5 = *(unsigned __int8 *)(v3 + 40);
    if (v5 != 255)
    {
      if (v5) {
        _s6Charts15AnyChartContentVwxx_0(v3);
      }
      else {
        swift_release();
      }
    }
    swift_bridgeObjectRelease();
    int v6 = *(unsigned __int8 *)(v3 + 128);
    if (v6 != 255)
    {
      if (v6) {
        swift_release();
      }
      else {
        _s6Charts15AnyChartContentVwxx_0(v3 + 88);
      }
    }
    uint64_t v7 = v3 + v4[11];
    uint64_t v8 = sub_21FA24C90();
    uint64_t v9 = *(void *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    }
    uint64_t v10 = v3 + v4[14];
    uint64_t v11 = sub_21FA25910();
    uint64_t v12 = *(void *)(v11 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    }
    swift_release();
    uint64_t v13 = v3 + v4[18];
    if (*(void *)(v13 + 24))
    {
      sub_21F7656A8(*(void *)v13, *(void *)(v13 + 8), *(unsigned char *)(v13 + 16));
      swift_bridgeObjectRelease();
      sub_21F770E38(*(void *)(v13 + 32), *(void *)(v13 + 40), *(unsigned char *)(v13 + 48));
    }
    uint64_t v14 = v3 + v4[19];
    if (*(void *)(v14 + 24))
    {
      sub_21F7656A8(*(void *)v14, *(void *)(v14 + 8), *(unsigned char *)(v14 + 16));
      swift_bridgeObjectRelease();
      sub_21F770E38(*(void *)(v14 + 32), *(void *)(v14 + 40), *(unsigned char *)(v14 + 48));
    }
    uint64_t v15 = v3 + v4[20];
    if (*(void *)(v15 + 24))
    {
      sub_21F7656A8(*(void *)v15, *(void *)(v15 + 8), *(unsigned char *)(v15 + 16));
      swift_bridgeObjectRelease();
      sub_21F770E38(*(void *)(v15 + 32), *(void *)(v15 + 40), *(unsigned char *)(v15 + 48));
    }
    uint64_t v16 = v3 + v4[21];
    if (*(void *)(v16 + 24))
    {
      sub_21F7656A8(*(void *)v16, *(void *)(v16 + 8), *(unsigned char *)(v16 + 16));
      swift_bridgeObjectRelease();
      sub_21F770E38(*(void *)(v16 + 32), *(void *)(v16 + 40), *(unsigned char *)(v16 + 48));
    }
    uint64_t v17 = v3 + v4[24];
    if (*(void *)(v17 + 24))
    {
      sub_21F7656A8(*(void *)v17, *(void *)(v17 + 8), *(unsigned char *)(v17 + 16));
      swift_bridgeObjectRelease();
    }
    uint64_t v18 = v3 + v4[25];
    if (*(void *)(v18 + 24))
    {
      sub_21F7656A8(*(void *)v18, *(void *)(v18 + 8), *(unsigned char *)(v18 + 16));
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v19 = v3 + v4[28];
    if (*(void *)(v19 + 24)) {
      _s6Charts15AnyChartContentVwxx_0(v19);
    }
  }
  uint64_t result = a1 + *(int *)(v2 + 36);
  int v21 = *(unsigned __int8 *)(result + 40);
  if (v21 != 255)
  {
    if (v21)
    {
      return swift_release();
    }
    else
    {
      return _s6Charts15AnyChartContentVwxx_0(result);
    }
  }
  return result;
}

uint64_t sub_21F983308(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  int v5 = (int *)type metadata accessor for PointsRenderer(0);
  uint64_t v6 = v5[8];
  uint64_t v7 = (_OWORD *)(a1 + v6);
  uint64_t v8 = (_OWORD *)(a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v10 = *((void *)v9 - 1);
  uint64_t v11 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v10 + 48);
  swift_retain();
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_21F76CA40(qword_267EE7A88);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    int v13 = *((unsigned __int8 *)v8 + 40);
    if (v13 == 255)
    {
      long long v14 = v8[1];
      *uint64_t v7 = *v8;
      v7[1] = v14;
      *(_OWORD *)((char *)v7 + 25) = *(_OWORD *)((char *)v8 + 25);
    }
    else if (v13)
    {
      long long v15 = *(_OWORD *)((char *)v8 + 24);
      *(_OWORD *)((char *)v7 + 24) = v15;
      (**(void (***)(_OWORD *, _OWORD *))(v15 - 8))(v7, v8);
      *((unsigned char *)v7 + 40) = 1;
    }
    else
    {
      *(void *)uint64_t v7 = *(void *)v8;
      *((unsigned char *)v7 + 40) = 0;
      swift_retain();
    }
    *((unsigned char *)v7 + 41) = *((unsigned char *)v8 + 41);
    *((void *)v7 + 6) = *((void *)v8 + 6);
    *((void *)v7 + 7) = *((void *)v8 + 7);
    uint64_t v16 = *((void *)v8 + 9);
    *((void *)v7 + 8) = *((void *)v8 + 8);
    *((void *)v7 + 9) = v16;
    *((void *)v7 + 10) = *((void *)v8 + 10);
    int v17 = *((unsigned __int8 *)v8 + 128);
    swift_bridgeObjectRetain();
    uint64_t v123 = v10;
    if (v17 == 255)
    {
      long long v18 = *(_OWORD *)((char *)v8 + 104);
      *(_OWORD *)((char *)v7 + 88) = *(_OWORD *)((char *)v8 + 88);
      *(_OWORD *)((char *)v7 + 104) = v18;
      *(_OWORD *)((char *)v7 + 113) = *(_OWORD *)((char *)v8 + 113);
    }
    else if (v17)
    {
      *((void *)v7 + 11) = *((void *)v8 + 11);
      v7[6] = v8[6];
      *((unsigned char *)v7 + 128) = 1;
      swift_retain();
    }
    else
    {
      long long v19 = v8[7];
      v7[7] = v19;
      (**(void (***)(uint64_t, uint64_t))(v19 - 8))((uint64_t)v7 + 88, (uint64_t)v8 + 88);
      *((unsigned char *)v7 + 128) = 0;
    }
    *(_OWORD *)((char *)v7 + 136) = *(_OWORD *)((char *)v8 + 136);
    *((unsigned char *)v7 + 152) = *((unsigned char *)v8 + 152);
    *((void *)v7 + 20) = *((void *)v8 + 20);
    *((unsigned char *)v7 + 168) = *((unsigned char *)v8 + 168);
    long long v20 = v8[12];
    v7[11] = v8[11];
    v7[12] = v20;
    *((unsigned char *)v7 + 208) = *((unsigned char *)v8 + 208);
    uint64_t v21 = v9[11];
    long long v22 = (char *)v7 + v21;
    long long v23 = (char *)v8 + v21;
    uint64_t v24 = sub_21FA24C90();
    uint64_t v25 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      uint64_t v26 = sub_21F76CA40(&qword_26AD47C20);
      memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    uint64_t v27 = v9[12];
    uint64_t v28 = (char *)v7 + v27;
    uint64_t v29 = (char *)v8 + v27;
    *(void *)uint64_t v28 = *(void *)v29;
    v28[8] = v29[8];
    *(void *)((char *)v7 + v9[13]) = *(void *)((char *)v8 + v9[13]);
    uint64_t v30 = v9[14];
    uint64_t v31 = (char *)v7 + v30;
    uint64_t v32 = (char *)v8 + v30;
    uint64_t v33 = sub_21FA25910();
    uint64_t v34 = *(void *)(v33 - 8);
    uint64_t v124 = v5;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      uint64_t v35 = sub_21F76CA40(&qword_26AD4A3B8);
      memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
    }
    uint64_t v36 = v9[15];
    uint64_t v37 = (char *)v7 + v36;
    uint64_t v38 = (char *)v8 + v36;
    *(void *)uint64_t v37 = *(void *)v38;
    *((_WORD *)v37 + 4) = *((_WORD *)v38 + 4);
    *(void *)((char *)v7 + v9[16]) = *(void *)((char *)v8 + v9[16]);
    *(void *)((char *)v7 + v9[17]) = *(void *)((char *)v8 + v9[17]);
    uint64_t v39 = v9[18];
    uint64_t v40 = (char *)v7 + v39;
    uint64_t v41 = (char *)v8 + v39;
    uint64_t v42 = *(void *)((char *)v8 + v39 + 24);
    swift_retain();
    if (v42)
    {
      uint64_t v43 = *(void *)v41;
      uint64_t v44 = *((void *)v41 + 1);
      char v45 = v41[16];
      sub_21F7652C0(*(void *)v41, v44, v45);
      *(void *)uint64_t v40 = v43;
      *((void *)v40 + 1) = v44;
      v40[16] = v45;
      uint64_t v46 = *((void *)v41 + 4);
      *((void *)v40 + 3) = *((void *)v41 + 3);
      uint64_t v47 = *((void *)v41 + 5);
      char v48 = v41[48];
      swift_bridgeObjectRetain();
      sub_21F770E44(v46, v47, v48);
      *((void *)v40 + 4) = v46;
      *((void *)v40 + 5) = v47;
      v40[48] = v48;
      *(_OWORD *)(v40 + 56) = *(_OWORD *)(v41 + 56);
    }
    else
    {
      long long v49 = *((_OWORD *)v41 + 3);
      *((_OWORD *)v40 + 2) = *((_OWORD *)v41 + 2);
      *((_OWORD *)v40 + 3) = v49;
      *((void *)v40 + 8) = *((void *)v41 + 8);
      long long v50 = *((_OWORD *)v41 + 1);
      *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
      *((_OWORD *)v40 + 1) = v50;
    }
    uint64_t v51 = v9[19];
    long long v52 = (char *)v7 + v51;
    long long v53 = (char *)v8 + v51;
    if (*(void *)((char *)v8 + v51 + 24))
    {
      uint64_t v54 = *(void *)v53;
      uint64_t v55 = *((void *)v53 + 1);
      char v56 = v53[16];
      sub_21F7652C0(*(void *)v53, v55, v56);
      *(void *)long long v52 = v54;
      *((void *)v52 + 1) = v55;
      v52[16] = v56;
      uint64_t v57 = *((void *)v53 + 4);
      *((void *)v52 + 3) = *((void *)v53 + 3);
      uint64_t v58 = *((void *)v53 + 5);
      char v59 = v53[48];
      swift_bridgeObjectRetain();
      sub_21F770E44(v57, v58, v59);
      *((void *)v52 + 4) = v57;
      *((void *)v52 + 5) = v58;
      v52[48] = v59;
      *(_OWORD *)(v52 + 56) = *(_OWORD *)(v53 + 56);
    }
    else
    {
      long long v60 = *((_OWORD *)v53 + 3);
      *((_OWORD *)v52 + 2) = *((_OWORD *)v53 + 2);
      *((_OWORD *)v52 + 3) = v60;
      *((void *)v52 + 8) = *((void *)v53 + 8);
      long long v61 = *((_OWORD *)v53 + 1);
      *(_OWORD *)long long v52 = *(_OWORD *)v53;
      *((_OWORD *)v52 + 1) = v61;
    }
    uint64_t v62 = v9[20];
    long long v63 = (char *)v7 + v62;
    long long v64 = (char *)v8 + v62;
    if (*(void *)((char *)v8 + v62 + 24))
    {
      uint64_t v65 = *(void *)v64;
      uint64_t v66 = *((void *)v64 + 1);
      char v67 = v64[16];
      sub_21F7652C0(*(void *)v64, v66, v67);
      *(void *)long long v63 = v65;
      *((void *)v63 + 1) = v66;
      v63[16] = v67;
      uint64_t v68 = *((void *)v64 + 4);
      *((void *)v63 + 3) = *((void *)v64 + 3);
      uint64_t v69 = *((void *)v64 + 5);
      char v70 = v64[48];
      swift_bridgeObjectRetain();
      sub_21F770E44(v68, v69, v70);
      *((void *)v63 + 4) = v68;
      *((void *)v63 + 5) = v69;
      v63[48] = v70;
      *(_OWORD *)(v63 + 56) = *(_OWORD *)(v64 + 56);
    }
    else
    {
      long long v71 = *((_OWORD *)v64 + 3);
      *((_OWORD *)v63 + 2) = *((_OWORD *)v64 + 2);
      *((_OWORD *)v63 + 3) = v71;
      *((void *)v63 + 8) = *((void *)v64 + 8);
      long long v72 = *((_OWORD *)v64 + 1);
      *(_OWORD *)long long v63 = *(_OWORD *)v64;
      *((_OWORD *)v63 + 1) = v72;
    }
    uint64_t v73 = v9[21];
    long long v74 = (char *)v7 + v73;
    long long v75 = (char *)v8 + v73;
    if (*(void *)((char *)v8 + v73 + 24))
    {
      uint64_t v76 = *(void *)v75;
      uint64_t v77 = *((void *)v75 + 1);
      char v78 = v75[16];
      sub_21F7652C0(*(void *)v75, v77, v78);
      *(void *)long long v74 = v76;
      *((void *)v74 + 1) = v77;
      v74[16] = v78;
      uint64_t v79 = *((void *)v75 + 4);
      *((void *)v74 + 3) = *((void *)v75 + 3);
      uint64_t v80 = *((void *)v75 + 5);
      char v81 = v75[48];
      swift_bridgeObjectRetain();
      sub_21F770E44(v79, v80, v81);
      *((void *)v74 + 4) = v79;
      *((void *)v74 + 5) = v80;
      v74[48] = v81;
      *(_OWORD *)(v74 + 56) = *(_OWORD *)(v75 + 56);
    }
    else
    {
      long long v82 = *((_OWORD *)v75 + 3);
      *((_OWORD *)v74 + 2) = *((_OWORD *)v75 + 2);
      *((_OWORD *)v74 + 3) = v82;
      *((void *)v74 + 8) = *((void *)v75 + 8);
      long long v83 = *((_OWORD *)v75 + 1);
      *(_OWORD *)long long v74 = *(_OWORD *)v75;
      *((_OWORD *)v74 + 1) = v83;
    }
    uint64_t v84 = v9[22];
    long long v85 = (char *)v7 + v84;
    long long v86 = (char *)v8 + v84;
    *(_OWORD *)long long v85 = *(_OWORD *)v86;
    *((void *)v85 + 2) = *((void *)v86 + 2);
    uint64_t v87 = v9[23];
    uint64_t v88 = (char *)v7 + v87;
    uint64_t v89 = (char *)v8 + v87;
    *(_OWORD *)uint64_t v88 = *(_OWORD *)v89;
    *((void *)v88 + 2) = *((void *)v89 + 2);
    uint64_t v90 = v9[24];
    int v91 = (char *)v7 + v90;
    uint64_t v92 = (char *)v8 + v90;
    if (*(void *)((char *)v8 + v90 + 24))
    {
      uint64_t v93 = *(void *)v92;
      uint64_t v94 = *((void *)v92 + 1);
      char v95 = v92[16];
      sub_21F7652C0(*(void *)v92, v94, v95);
      *(void *)int v91 = v93;
      *((void *)v91 + 1) = v94;
      v91[16] = v95;
      *((void *)v91 + 3) = *((void *)v92 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v96 = *((_OWORD *)v92 + 1);
      *(_OWORD *)int v91 = *(_OWORD *)v92;
      *((_OWORD *)v91 + 1) = v96;
    }
    uint64_t v97 = v9[25];
    char v98 = (char *)v7 + v97;
    long long v99 = (char *)v8 + v97;
    if (*(void *)((char *)v8 + v97 + 24))
    {
      uint64_t v100 = *(void *)v99;
      uint64_t v101 = *((void *)v99 + 1);
      char v102 = v99[16];
      sub_21F7652C0(*(void *)v99, v101, v102);
      *(void *)char v98 = v100;
      *((void *)v98 + 1) = v101;
      v98[16] = v102;
      *((void *)v98 + 3) = *((void *)v99 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v103 = *((_OWORD *)v99 + 1);
      *(_OWORD *)char v98 = *(_OWORD *)v99;
      *((_OWORD *)v98 + 1) = v103;
    }
    int v5 = v124;
    uint64_t v104 = v9[26];
    char v105 = (void *)((char *)v7 + v104);
    long long v106 = (void *)((char *)v8 + v104);
    uint64_t v107 = v106[1];
    *char v105 = *v106;
    v105[1] = v107;
    *((unsigned char *)v7 + v9[27]) = *((unsigned char *)v8 + v9[27]);
    uint64_t v108 = v9[28];
    uint64_t v109 = (char *)v7 + v108;
    uint64_t v110 = (char *)v8 + v108;
    uint64_t v111 = *((void *)v110 + 3);
    swift_bridgeObjectRetain();
    if (v111)
    {
      *((void *)v109 + 3) = v111;
      (**(void (***)(char *, char *, uint64_t))(v111 - 8))(v109, v110, v111);
    }
    else
    {
      long long v112 = *((_OWORD *)v110 + 1);
      *(_OWORD *)uint64_t v109 = *(_OWORD *)v110;
      *((_OWORD *)v109 + 1) = v112;
    }
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v123 + 56))(v7, 0, 1, v9);
  }
  uint64_t v113 = v5[9];
  uint64_t v114 = a1 + v113;
  long long v115 = (_OWORD *)(a2 + v113);
  int v116 = *(unsigned __int8 *)(a2 + v113 + 40);
  if (v116 == 255)
  {
    long long v117 = v115[1];
    *(_OWORD *)uint64_t v114 = *v115;
    *(_OWORD *)(v114 + 16) = v117;
    *(_OWORD *)(v114 + 25) = *(_OWORD *)((char *)v115 + 25);
  }
  else if (v116)
  {
    *(void *)uint64_t v114 = *(void *)v115;
    *(_OWORD *)(v114 + 8) = *(_OWORD *)((char *)v115 + 8);
    *(unsigned char *)(v114 + 40) = 1;
    swift_retain();
  }
  else
  {
    long long v118 = *(_OWORD *)((char *)v115 + 24);
    *(_OWORD *)(v114 + 24) = v118;
    (**(void (***)(uint64_t))(v118 - 8))(v114);
    *(unsigned char *)(v114 + 40) = 0;
  }
  uint64_t v119 = v5[10];
  uint64_t v120 = a1 + v119;
  uint64_t v121 = a2 + v119;
  *(_OWORD *)uint64_t v120 = *(_OWORD *)v121;
  *(unsigned char *)(v120 + 16) = *(unsigned char *)(v121 + 16);
  return a1;
}

uint64_t sub_21F983BF4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  sub_21F7ABEA8((uint64_t *)a1, a2);
  *(unsigned char *)(a1 + 40) = *((unsigned char *)v2 + 40);
  *(void *)(a1 + 48) = v2[6];
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = v2[7];
  *(void *)(a1 + 64) = v2[8];
  long long v4 = (int *)type metadata accessor for PointsRenderer(0);
  uint64_t v5 = v4[8];
  uint64_t v6 = a1 + v5;
  uint64_t v7 = (char *)v2 + v5;
  uint64_t v8 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v9 = *((void *)v8 - 1);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v9 + 48);
  int v11 = v10(v6, 1, v8);
  int v12 = v10((uint64_t)v7, 1, v8);
  if (v11)
  {
    if (!v12)
    {
      int v13 = v7[40];
      if (v13 == 255)
      {
        long long v14 = *(_OWORD *)v7;
        long long v15 = *((_OWORD *)v7 + 1);
        *(_OWORD *)(v6 + 25) = *(_OWORD *)(v7 + 25);
        *(_OWORD *)uint64_t v6 = v14;
        *(_OWORD *)(v6 + 16) = v15;
      }
      else if (v13)
      {
        uint64_t v20 = *((void *)v7 + 3);
        *(void *)(v6 + 24) = v20;
        *(void *)(v6 + 32) = *((void *)v7 + 4);
        (**(void (***)(uint64_t, char *))(v20 - 8))(v6, v7);
        *(unsigned char *)(v6 + 40) = 1;
      }
      else
      {
        *(void *)uint64_t v6 = *(void *)v7;
        *(unsigned char *)(v6 + 40) = 0;
        swift_retain();
      }
      *(unsigned char *)(v6 + 41) = v7[41];
      *(void *)(v6 + 48) = *((void *)v7 + 6);
      *(_DWORD *)(v6 + 56) = *((_DWORD *)v7 + 14);
      *(_DWORD *)(v6 + 60) = *((_DWORD *)v7 + 15);
      *(void *)(v6 + 64) = *((void *)v7 + 8);
      *(void *)(v6 + 72) = *((void *)v7 + 9);
      *(void *)(v6 + 80) = *((void *)v7 + 10);
      int v21 = v7[128];
      swift_bridgeObjectRetain();
      v349 = v4;
      if (v21 == 255)
      {
        long long v22 = *(_OWORD *)(v7 + 88);
        long long v23 = *(_OWORD *)(v7 + 104);
        *(_OWORD *)(v6 + 113) = *(_OWORD *)(v7 + 113);
        *(_OWORD *)(v6 + 88) = v22;
        *(_OWORD *)(v6 + 104) = v23;
      }
      else if (v21)
      {
        *(void *)(v6 + 88) = *((void *)v7 + 11);
        *(_OWORD *)(v6 + 96) = *((_OWORD *)v7 + 6);
        *(unsigned char *)(v6 + 128) = 1;
        swift_retain();
      }
      else
      {
        uint64_t v24 = *((void *)v7 + 14);
        *(void *)(v6 + 112) = v24;
        *(void *)(v6 + 120) = *((void *)v7 + 15);
        (**(void (***)(uint64_t, uint64_t))(v24 - 8))(v6 + 88, (uint64_t)(v7 + 88));
        *(unsigned char *)(v6 + 128) = 0;
      }
      long long v25 = *(_OWORD *)(v7 + 136);
      *(unsigned char *)(v6 + 152) = v7[152];
      *(_OWORD *)(v6 + 136) = v25;
      uint64_t v26 = *((void *)v7 + 20);
      *(unsigned char *)(v6 + 168) = v7[168];
      *(void *)(v6 + 160) = v26;
      long long v27 = *((_OWORD *)v7 + 11);
      long long v28 = *((_OWORD *)v7 + 12);
      *(unsigned char *)(v6 + 208) = v7[208];
      *(_OWORD *)(v6 + 176) = v27;
      *(_OWORD *)(v6 + 192) = v28;
      uint64_t v29 = v8[11];
      uint64_t v30 = (void *)(v6 + v29);
      uint64_t v31 = &v7[v29];
      uint64_t v32 = sub_21FA24C90();
      uint64_t v33 = *(void *)(v32 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      {
        uint64_t v34 = sub_21F76CA40(&qword_26AD47C20);
        memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      uint64_t v35 = v8[12];
      uint64_t v36 = v6 + v35;
      uint64_t v37 = &v7[v35];
      uint64_t v38 = *(void *)v37;
      *(unsigned char *)(v36 + 8) = v37[8];
      *(void *)uint64_t v36 = v38;
      *(void *)(v6 + v8[13]) = *(void *)&v7[v8[13]];
      uint64_t v39 = v8[14];
      uint64_t v40 = (void *)(v6 + v39);
      uint64_t v41 = &v7[v39];
      uint64_t v42 = sub_21FA25910();
      uint64_t v43 = *(void *)(v42 - 8);
      uint64_t v346 = v9;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        uint64_t v44 = sub_21F76CA40(&qword_26AD4A3B8);
        memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v43 + 16))(v40, v41, v42);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
      uint64_t v45 = v8[15];
      uint64_t v46 = v6 + v45;
      uint64_t v47 = &v7[v45];
      *(void *)uint64_t v46 = *(void *)v47;
      *(_WORD *)(v46 + 8) = *((_WORD *)v47 + 4);
      *(void *)(v6 + v8[16]) = *(void *)&v7[v8[16]];
      *(void *)(v6 + v8[17]) = *(void *)&v7[v8[17]];
      uint64_t v48 = v8[18];
      uint64_t v49 = v6 + v48;
      long long v50 = &v7[v48];
      uint64_t v51 = *(void *)&v7[v48 + 24];
      swift_retain();
      if (v51)
      {
        uint64_t v52 = *(void *)v50;
        uint64_t v53 = *((void *)v50 + 1);
        char v54 = v50[16];
        sub_21F7652C0(*(void *)v50, v53, v54);
        *(void *)uint64_t v49 = v52;
        *(void *)(v49 + 8) = v53;
        *(unsigned char *)(v49 + 16) = v54;
        *(void *)(v49 + 24) = *((void *)v50 + 3);
        uint64_t v55 = *((void *)v50 + 4);
        uint64_t v56 = *((void *)v50 + 5);
        char v57 = v50[48];
        swift_bridgeObjectRetain();
        sub_21F770E44(v55, v56, v57);
        *(void *)(v49 + 32) = v55;
        *(void *)(v49 + 40) = v56;
        *(unsigned char *)(v49 + 48) = v57;
        *(_OWORD *)(v49 + 56) = *(_OWORD *)(v50 + 56);
      }
      else
      {
        *(_OWORD *)uint64_t v49 = *(_OWORD *)v50;
        long long v58 = *((_OWORD *)v50 + 1);
        long long v59 = *((_OWORD *)v50 + 2);
        long long v60 = *((_OWORD *)v50 + 3);
        *(void *)(v49 + 64) = *((void *)v50 + 8);
        *(_OWORD *)(v49 + 32) = v59;
        *(_OWORD *)(v49 + 48) = v60;
        *(_OWORD *)(v49 + 16) = v58;
      }
      uint64_t v61 = v8[19];
      uint64_t v62 = v6 + v61;
      long long v63 = &v7[v61];
      if (*(void *)&v7[v61 + 24])
      {
        uint64_t v64 = *(void *)v63;
        uint64_t v65 = *((void *)v63 + 1);
        char v66 = v63[16];
        sub_21F7652C0(*(void *)v63, v65, v66);
        *(void *)uint64_t v62 = v64;
        *(void *)(v62 + 8) = v65;
        *(unsigned char *)(v62 + 16) = v66;
        *(void *)(v62 + 24) = *((void *)v63 + 3);
        uint64_t v67 = *((void *)v63 + 4);
        uint64_t v68 = *((void *)v63 + 5);
        char v69 = v63[48];
        swift_bridgeObjectRetain();
        sub_21F770E44(v67, v68, v69);
        *(void *)(v62 + 32) = v67;
        *(void *)(v62 + 40) = v68;
        *(unsigned char *)(v62 + 48) = v69;
        *(_OWORD *)(v62 + 56) = *(_OWORD *)(v63 + 56);
      }
      else
      {
        *(_OWORD *)uint64_t v62 = *(_OWORD *)v63;
        long long v70 = *((_OWORD *)v63 + 1);
        long long v71 = *((_OWORD *)v63 + 2);
        long long v72 = *((_OWORD *)v63 + 3);
        *(void *)(v62 + 64) = *((void *)v63 + 8);
        *(_OWORD *)(v62 + 32) = v71;
        *(_OWORD *)(v62 + 48) = v72;
        *(_OWORD *)(v62 + 16) = v70;
      }
      uint64_t v73 = v8[20];
      uint64_t v74 = v6 + v73;
      long long v75 = &v7[v73];
      if (*(void *)&v7[v73 + 24])
      {
        uint64_t v76 = *(void *)v75;
        uint64_t v77 = *((void *)v75 + 1);
        char v78 = v75[16];
        sub_21F7652C0(*(void *)v75, v77, v78);
        *(void *)uint64_t v74 = v76;
        *(void *)(v74 + 8) = v77;
        *(unsigned char *)(v74 + 16) = v78;
        *(void *)(v74 + 24) = *((void *)v75 + 3);
        uint64_t v79 = *((void *)v75 + 4);
        uint64_t v80 = *((void *)v75 + 5);
        char v81 = v75[48];
        swift_bridgeObjectRetain();
        sub_21F770E44(v79, v80, v81);
        *(void *)(v74 + 32) = v79;
        *(void *)(v74 + 40) = v80;
        *(unsigned char *)(v74 + 48) = v81;
        *(_OWORD *)(v74 + 56) = *(_OWORD *)(v75 + 56);
      }
      else
      {
        *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
        long long v82 = *((_OWORD *)v75 + 1);
        long long v83 = *((_OWORD *)v75 + 2);
        long long v84 = *((_OWORD *)v75 + 3);
        *(void *)(v74 + 64) = *((void *)v75 + 8);
        *(_OWORD *)(v74 + 32) = v83;
        *(_OWORD *)(v74 + 48) = v84;
        *(_OWORD *)(v74 + 16) = v82;
      }
      uint64_t v85 = v8[21];
      uint64_t v86 = v6 + v85;
      uint64_t v87 = &v7[v85];
      if (*(void *)&v7[v85 + 24])
      {
        uint64_t v88 = *(void *)v87;
        uint64_t v89 = *((void *)v87 + 1);
        char v90 = v87[16];
        sub_21F7652C0(*(void *)v87, v89, v90);
        *(void *)uint64_t v86 = v88;
        *(void *)(v86 + 8) = v89;
        *(unsigned char *)(v86 + 16) = v90;
        *(void *)(v86 + 24) = *((void *)v87 + 3);
        uint64_t v91 = *((void *)v87 + 4);
        uint64_t v92 = *((void *)v87 + 5);
        char v93 = v87[48];
        swift_bridgeObjectRetain();
        sub_21F770E44(v91, v92, v93);
        *(void *)(v86 + 32) = v91;
        *(void *)(v86 + 40) = v92;
        *(unsigned char *)(v86 + 48) = v93;
        *(_OWORD *)(v86 + 56) = *(_OWORD *)(v87 + 56);
      }
      else
      {
        *(_OWORD *)uint64_t v86 = *(_OWORD *)v87;
        long long v94 = *((_OWORD *)v87 + 1);
        long long v95 = *((_OWORD *)v87 + 2);
        long long v96 = *((_OWORD *)v87 + 3);
        *(void *)(v86 + 64) = *((void *)v87 + 8);
        *(_OWORD *)(v86 + 32) = v95;
        *(_OWORD *)(v86 + 48) = v96;
        *(_OWORD *)(v86 + 16) = v94;
      }
      uint64_t v97 = v8[22];
      uint64_t v98 = v6 + v97;
      long long v99 = &v7[v97];
      long long v100 = *(_OWORD *)v99;
      *(void *)(v98 + 16) = *((void *)v99 + 2);
      *(_OWORD *)uint64_t v98 = v100;
      uint64_t v101 = v8[23];
      uint64_t v102 = v6 + v101;
      long long v103 = &v7[v101];
      long long v104 = *(_OWORD *)v103;
      *(void *)(v102 + 16) = *((void *)v103 + 2);
      *(_OWORD *)uint64_t v102 = v104;
      uint64_t v105 = v8[24];
      uint64_t v106 = v6 + v105;
      uint64_t v107 = &v7[v105];
      if (*(void *)&v7[v105 + 24])
      {
        uint64_t v108 = *(void *)v107;
        uint64_t v109 = *((void *)v107 + 1);
        char v110 = v107[16];
        sub_21F7652C0(*(void *)v107, v109, v110);
        *(void *)uint64_t v106 = v108;
        *(void *)(v106 + 8) = v109;
        *(unsigned char *)(v106 + 16) = v110;
        *(void *)(v106 + 24) = *((void *)v107 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v111 = *((_OWORD *)v107 + 1);
        *(_OWORD *)uint64_t v106 = *(_OWORD *)v107;
        *(_OWORD *)(v106 + 16) = v111;
      }
      uint64_t v112 = v8[25];
      uint64_t v113 = v6 + v112;
      uint64_t v114 = &v7[v112];
      if (*(void *)&v7[v112 + 24])
      {
        uint64_t v115 = *(void *)v114;
        uint64_t v116 = *((void *)v114 + 1);
        char v117 = v114[16];
        sub_21F7652C0(*(void *)v114, v116, v117);
        *(void *)uint64_t v113 = v115;
        *(void *)(v113 + 8) = v116;
        *(unsigned char *)(v113 + 16) = v117;
        *(void *)(v113 + 24) = *((void *)v114 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v118 = *((_OWORD *)v114 + 1);
        *(_OWORD *)uint64_t v113 = *(_OWORD *)v114;
        *(_OWORD *)(v113 + 16) = v118;
      }
      long long v4 = v349;
      uint64_t v119 = v8[26];
      uint64_t v120 = (void *)(v6 + v119);
      uint64_t v121 = &v7[v119];
      void *v120 = *(void *)v121;
      v120[1] = *((void *)v121 + 1);
      *(unsigned char *)(v6 + v8[27]) = v7[v8[27]];
      uint64_t v122 = v8[28];
      uint64_t v123 = v6 + v122;
      uint64_t v124 = &v7[v122];
      uint64_t v125 = *((void *)v124 + 3);
      swift_bridgeObjectRetain();
      if (v125)
      {
        *(void *)(v123 + 24) = v125;
        (**(void (***)(uint64_t, char *, uint64_t))(v125 - 8))(v123, v124, v125);
      }
      else
      {
        long long v126 = *((_OWORD *)v124 + 1);
        *(_OWORD *)uint64_t v123 = *(_OWORD *)v124;
        *(_OWORD *)(v123 + 16) = v126;
      }
      (*(void (**)(uint64_t, void, uint64_t, int *))(v346 + 56))(v6, 0, 1, v8);
      goto LABEL_47;
    }
LABEL_7:
    uint64_t v16 = sub_21F76CA40(qword_267EE7A88);
    memcpy((void *)v6, v7, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_47;
  }
  if (v12)
  {
    sub_21F985244(v6, type metadata accessor for ChartContentRenderContext.Environment);
    goto LABEL_7;
  }
  int v17 = v7[40];
  if (*(unsigned __int8 *)(v6 + 40) == 255)
  {
    if (v17 == 255)
    {
      long long v142 = *(_OWORD *)v7;
      long long v143 = *((_OWORD *)v7 + 1);
      *(_OWORD *)(v6 + 25) = *(_OWORD *)(v7 + 25);
      *(_OWORD *)uint64_t v6 = v142;
      *(_OWORD *)(v6 + 16) = v143;
      goto LABEL_65;
    }
    if (v17) {
      goto LABEL_62;
    }
LABEL_64:
    *(void *)uint64_t v6 = *(void *)v7;
    *(unsigned char *)(v6 + 40) = 0;
    swift_retain();
    goto LABEL_65;
  }
  if (v17 == 255)
  {
    sub_21F7D25BC(v6);
    long long v18 = *(_OWORD *)(v7 + 25);
    long long v19 = *((_OWORD *)v7 + 1);
    *(_OWORD *)uint64_t v6 = *(_OWORD *)v7;
    *(_OWORD *)(v6 + 16) = v19;
    *(_OWORD *)(v6 + 25) = v18;
    goto LABEL_65;
  }
  if ((uint64_t *)a1 != v2)
  {
    sub_21F7D25BC(v6);
    if (v7[40])
    {
LABEL_62:
      uint64_t v144 = *((void *)v7 + 3);
      *(void *)(v6 + 24) = v144;
      *(void *)(v6 + 32) = *((void *)v7 + 4);
      (**(void (***)(uint64_t, char *))(v144 - 8))(v6, v7);
      *(unsigned char *)(v6 + 40) = 1;
      goto LABEL_65;
    }
    goto LABEL_64;
  }
LABEL_65:
  *(unsigned char *)(v6 + 41) = v7[41];
  *(void *)(v6 + 48) = *((void *)v7 + 6);
  *(_DWORD *)(v6 + 56) = *((_DWORD *)v7 + 14);
  *(_DWORD *)(v6 + 60) = *((_DWORD *)v7 + 15);
  *(void *)(v6 + 64) = *((void *)v7 + 8);
  *(void *)(v6 + 72) = *((void *)v7 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v6 + 80) = *((void *)v7 + 10);
  uint64_t v145 = (long long *)(v6 + 88);
  uint64_t v146 = (long long *)(v7 + 88);
  int v147 = v7[128];
  if (*(unsigned __int8 *)(v6 + 128) == 255)
  {
    if (v147 == 255)
    {
      long long v150 = *v146;
      long long v151 = *(_OWORD *)(v7 + 104);
      *(_OWORD *)(v6 + 113) = *(_OWORD *)(v7 + 113);
      *uint64_t v145 = v150;
      *(_OWORD *)(v6 + 104) = v151;
      goto LABEL_75;
    }
    if (v147) {
      goto LABEL_72;
    }
LABEL_74:
    uint64_t v152 = *((void *)v7 + 14);
    *(void *)(v6 + 112) = v152;
    *(void *)(v6 + 120) = *((void *)v7 + 15);
    (**(void (***)(uint64_t, uint64_t))(v152 - 8))(v6 + 88, (uint64_t)(v7 + 88));
    *(unsigned char *)(v6 + 128) = 0;
    goto LABEL_75;
  }
  if (v147 == 255)
  {
    sub_21F7D2610(v6 + 88);
    long long v148 = *(_OWORD *)(v7 + 113);
    long long v149 = *(_OWORD *)(v7 + 104);
    *uint64_t v145 = *v146;
    *(_OWORD *)(v6 + 104) = v149;
    *(_OWORD *)(v6 + 113) = v148;
    goto LABEL_75;
  }
  if ((uint64_t *)a1 != v2)
  {
    sub_21F7D2610(v6 + 88);
    if (v7[128])
    {
LABEL_72:
      *(void *)(v6 + 88) = *((void *)v7 + 11);
      *(_OWORD *)(v6 + 96) = *((_OWORD *)v7 + 6);
      *(unsigned char *)(v6 + 128) = 1;
      swift_retain();
      goto LABEL_75;
    }
    goto LABEL_74;
  }
LABEL_75:
  v345 = v2;
  v350 = v4;
  long long v153 = *(_OWORD *)(v7 + 136);
  *(unsigned char *)(v6 + 152) = v7[152];
  *(_OWORD *)(v6 + 136) = v153;
  uint64_t v154 = *((void *)v7 + 20);
  *(unsigned char *)(v6 + 168) = v7[168];
  *(void *)(v6 + 160) = v154;
  long long v155 = *((_OWORD *)v7 + 11);
  long long v156 = *((_OWORD *)v7 + 12);
  *(unsigned char *)(v6 + 208) = v7[208];
  *(_OWORD *)(v6 + 176) = v155;
  *(_OWORD *)(v6 + 192) = v156;
  uint64_t v157 = v8[11];
  uint64_t v158 = (void *)(v6 + v157);
  uint64_t v159 = &v7[v157];
  uint64_t v160 = sub_21FA24C90();
  uint64_t v161 = *(void *)(v160 - 8);
  uint64_t v162 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v161 + 48);
  v347 = v158;
  LODWORD(v158) = v162(v158, 1, v160);
  int v163 = v162(v159, 1, v160);
  if (v158)
  {
    if (v163)
    {
      size_t v164 = *(void *)(*(void *)(sub_21F76CA40(&qword_26AD47C20) - 8) + 64);
      uint64_t v165 = v347;
LABEL_80:
      memcpy(v165, v159, v164);
      goto LABEL_83;
    }
    (*(void (**)(void *, char *, uint64_t))(v161 + 16))(v347, v159, v160);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v161 + 56))(v347, 0, 1, v160);
  }
  else
  {
    if (v163)
    {
      (*(void (**)(void *, uint64_t))(v161 + 8))(v347, v160);
      size_t v164 = *(void *)(*(void *)(sub_21F76CA40(&qword_26AD47C20) - 8) + 64);
      uint64_t v165 = v347;
      goto LABEL_80;
    }
    (*(void (**)(void *, char *, uint64_t))(v161 + 24))(v347, v159, v160);
  }
LABEL_83:
  uint64_t v166 = v8[12];
  uint64_t v167 = v6 + v166;
  uint64_t v168 = &v7[v166];
  uint64_t v169 = *(void *)v168;
  *(unsigned char *)(v167 + 8) = v168[8];
  *(void *)uint64_t v167 = v169;
  *(void *)(v6 + v8[13]) = *(void *)&v7[v8[13]];
  uint64_t v170 = v8[14];
  uint64_t v171 = (void *)(v6 + v170);
  uint64_t v172 = &v7[v170];
  uint64_t v173 = sub_21FA25910();
  uint64_t v174 = *(void *)(v173 - 8);
  uint64_t v175 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v174 + 48);
  v348 = v171;
  LODWORD(v171) = v175(v171, 1, v173);
  int v176 = v175(v172, 1, v173);
  if (v171)
  {
    if (v176)
    {
      size_t v177 = *(void *)(*(void *)(sub_21F76CA40(&qword_26AD4A3B8) - 8) + 64);
      v178 = v348;
LABEL_88:
      memcpy(v178, v172, v177);
      goto LABEL_91;
    }
    (*(void (**)(void *, char *, uint64_t))(v174 + 16))(v348, v172, v173);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v174 + 56))(v348, 0, 1, v173);
  }
  else
  {
    if (v176)
    {
      (*(void (**)(void *, uint64_t))(v174 + 8))(v348, v173);
      size_t v177 = *(void *)(*(void *)(sub_21F76CA40(&qword_26AD4A3B8) - 8) + 64);
      v178 = v348;
      goto LABEL_88;
    }
    (*(void (**)(void *, char *, uint64_t))(v174 + 24))(v348, v172, v173);
  }
LABEL_91:
  uint64_t v2 = v345;
  uint64_t v179 = v8[15];
  uint64_t v180 = v6 + v179;
  unint64_t v181 = &v7[v179];
  *(void *)(v6 + v179) = *(void *)&v7[v179];
  swift_retain();
  swift_release();
  *(unsigned char *)(v180 + 8) = v181[8];
  *(unsigned char *)(v180 + 9) = v181[9];
  *(void *)(v6 + v8[16]) = *(void *)&v7[v8[16]];
  *(void *)(v6 + v8[17]) = *(void *)&v7[v8[17]];
  uint64_t v182 = v8[18];
  uint64_t v183 = v6 + v182;
  long long v184 = &v7[v182];
  uint64_t v185 = *(void *)(v6 + v182 + 24);
  uint64_t v186 = *(void *)&v7[v182 + 24];
  if (v185)
  {
    if (v186)
    {
      uint64_t v187 = *(void *)v184;
      uint64_t v188 = *((void *)v184 + 1);
      char v189 = v184[16];
      sub_21F7652C0(*(void *)v184, v188, v189);
      uint64_t v190 = *(void *)v183;
      uint64_t v191 = *(void *)(v183 + 8);
      char v192 = *(unsigned char *)(v183 + 16);
      *(void *)uint64_t v183 = v187;
      *(void *)(v183 + 8) = v188;
      *(unsigned char *)(v183 + 16) = v189;
      sub_21F7656A8(v190, v191, v192);
      *(void *)(v183 + 24) = *((void *)v184 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v193 = *((void *)v184 + 4);
      uint64_t v194 = *((void *)v184 + 5);
      char v195 = v184[48];
      sub_21F770E44(v193, v194, v195);
      uint64_t v196 = *(void *)(v183 + 32);
      uint64_t v197 = *(void *)(v183 + 40);
      *(void *)(v183 + 32) = v193;
      *(void *)(v183 + 40) = v194;
      char v198 = *(unsigned char *)(v183 + 48);
      *(unsigned char *)(v183 + 48) = v195;
      sub_21F770E38(v196, v197, v198);
LABEL_96:
      *(_OWORD *)(v183 + 56) = *(_OWORD *)(v184 + 56);
      goto LABEL_99;
    }
    sub_21F7D2664(v183);
    *(_OWORD *)uint64_t v183 = *(_OWORD *)v184;
    long long v206 = *((_OWORD *)v184 + 2);
    long long v205 = *((_OWORD *)v184 + 3);
    long long v207 = *((_OWORD *)v184 + 1);
    *(void *)(v183 + 64) = *((void *)v184 + 8);
    *(_OWORD *)(v183 + 32) = v206;
    *(_OWORD *)(v183 + 48) = v205;
    *(_OWORD *)(v183 + 16) = v207;
  }
  else
  {
    if (v186)
    {
      uint64_t v199 = *(void *)v184;
      uint64_t v200 = *((void *)v184 + 1);
      char v201 = v184[16];
      sub_21F7652C0(*(void *)v184, v200, v201);
      *(void *)uint64_t v183 = v199;
      *(void *)(v183 + 8) = v200;
      *(unsigned char *)(v183 + 16) = v201;
      *(void *)(v183 + 24) = *((void *)v184 + 3);
      uint64_t v202 = *((void *)v184 + 4);
      uint64_t v203 = *((void *)v184 + 5);
      char v204 = v184[48];
      swift_bridgeObjectRetain();
      sub_21F770E44(v202, v203, v204);
      *(void *)(v183 + 32) = v202;
      *(void *)(v183 + 40) = v203;
      *(unsigned char *)(v183 + 48) = v204;
      goto LABEL_96;
    }
    *(_OWORD *)uint64_t v183 = *(_OWORD *)v184;
    long long v208 = *((_OWORD *)v184 + 1);
    long long v209 = *((_OWORD *)v184 + 2);
    long long v210 = *((_OWORD *)v184 + 3);
    *(void *)(v183 + 64) = *((void *)v184 + 8);
    *(_OWORD *)(v183 + 32) = v209;
    *(_OWORD *)(v183 + 48) = v210;
    *(_OWORD *)(v183 + 16) = v208;
  }
LABEL_99:
  uint64_t v211 = v8[19];
  uint64_t v212 = v6 + v211;
  uint64_t v213 = &v7[v211];
  uint64_t v214 = *(void *)(v6 + v211 + 24);
  uint64_t v215 = *(void *)&v7[v211 + 24];
  if (v214)
  {
    if (v215)
    {
      uint64_t v216 = *(void *)v213;
      uint64_t v217 = *((void *)v213 + 1);
      char v218 = v213[16];
      sub_21F7652C0(*(void *)v213, v217, v218);
      uint64_t v219 = *(void *)v212;
      uint64_t v220 = *(void *)(v212 + 8);
      char v221 = *(unsigned char *)(v212 + 16);
      *(void *)uint64_t v212 = v216;
      *(void *)(v212 + 8) = v217;
      *(unsigned char *)(v212 + 16) = v218;
      sub_21F7656A8(v219, v220, v221);
      *(void *)(v212 + 24) = *((void *)v213 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v222 = *((void *)v213 + 4);
      uint64_t v223 = *((void *)v213 + 5);
      char v224 = v213[48];
      sub_21F770E44(v222, v223, v224);
      uint64_t v225 = *(void *)(v212 + 32);
      uint64_t v226 = *(void *)(v212 + 40);
      *(void *)(v212 + 32) = v222;
      *(void *)(v212 + 40) = v223;
      char v227 = *(unsigned char *)(v212 + 48);
      *(unsigned char *)(v212 + 48) = v224;
      sub_21F770E38(v225, v226, v227);
LABEL_104:
      *(_OWORD *)(v212 + 56) = *(_OWORD *)(v213 + 56);
      goto LABEL_107;
    }
    sub_21F7D2664(v212);
    *(_OWORD *)uint64_t v212 = *(_OWORD *)v213;
    long long v235 = *((_OWORD *)v213 + 2);
    long long v234 = *((_OWORD *)v213 + 3);
    long long v236 = *((_OWORD *)v213 + 1);
    *(void *)(v212 + 64) = *((void *)v213 + 8);
    *(_OWORD *)(v212 + 32) = v235;
    *(_OWORD *)(v212 + 48) = v234;
    *(_OWORD *)(v212 + 16) = v236;
  }
  else
  {
    if (v215)
    {
      uint64_t v228 = *(void *)v213;
      uint64_t v229 = *((void *)v213 + 1);
      char v230 = v213[16];
      sub_21F7652C0(*(void *)v213, v229, v230);
      *(void *)uint64_t v212 = v228;
      *(void *)(v212 + 8) = v229;
      *(unsigned char *)(v212 + 16) = v230;
      *(void *)(v212 + 24) = *((void *)v213 + 3);
      uint64_t v231 = *((void *)v213 + 4);
      uint64_t v232 = *((void *)v213 + 5);
      char v233 = v213[48];
      swift_bridgeObjectRetain();
      sub_21F770E44(v231, v232, v233);
      *(void *)(v212 + 32) = v231;
      *(void *)(v212 + 40) = v232;
      *(unsigned char *)(v212 + 48) = v233;
      goto LABEL_104;
    }
    *(_OWORD *)uint64_t v212 = *(_OWORD *)v213;
    long long v237 = *((_OWORD *)v213 + 1);
    long long v238 = *((_OWORD *)v213 + 2);
    long long v239 = *((_OWORD *)v213 + 3);
    *(void *)(v212 + 64) = *((void *)v213 + 8);
    *(_OWORD *)(v212 + 32) = v238;
    *(_OWORD *)(v212 + 48) = v239;
    *(_OWORD *)(v212 + 16) = v237;
  }
LABEL_107:
  uint64_t v240 = v8[20];
  uint64_t v241 = v6 + v240;
  v242 = &v7[v240];
  uint64_t v243 = *(void *)(v6 + v240 + 24);
  uint64_t v244 = *(void *)&v7[v240 + 24];
  if (v243)
  {
    if (v244)
    {
      uint64_t v245 = *(void *)v242;
      uint64_t v246 = *((void *)v242 + 1);
      char v247 = v242[16];
      sub_21F7652C0(*(void *)v242, v246, v247);
      uint64_t v248 = *(void *)v241;
      uint64_t v249 = *(void *)(v241 + 8);
      char v250 = *(unsigned char *)(v241 + 16);
      *(void *)uint64_t v241 = v245;
      *(void *)(v241 + 8) = v246;
      *(unsigned char *)(v241 + 16) = v247;
      sub_21F7656A8(v248, v249, v250);
      *(void *)(v241 + 24) = *((void *)v242 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v251 = *((void *)v242 + 4);
      uint64_t v252 = *((void *)v242 + 5);
      char v253 = v242[48];
      sub_21F770E44(v251, v252, v253);
      uint64_t v254 = *(void *)(v241 + 32);
      uint64_t v255 = *(void *)(v241 + 40);
      *(void *)(v241 + 32) = v251;
      *(void *)(v241 + 40) = v252;
      char v256 = *(unsigned char *)(v241 + 48);
      *(unsigned char *)(v241 + 48) = v253;
      sub_21F770E38(v254, v255, v256);
LABEL_112:
      *(_OWORD *)(v241 + 56) = *(_OWORD *)(v242 + 56);
      goto LABEL_115;
    }
    sub_21F7D2664(v241);
    *(_OWORD *)uint64_t v241 = *(_OWORD *)v242;
    long long v264 = *((_OWORD *)v242 + 2);
    long long v263 = *((_OWORD *)v242 + 3);
    long long v265 = *((_OWORD *)v242 + 1);
    *(void *)(v241 + 64) = *((void *)v242 + 8);
    *(_OWORD *)(v241 + 32) = v264;
    *(_OWORD *)(v241 + 48) = v263;
    *(_OWORD *)(v241 + 16) = v265;
  }
  else
  {
    if (v244)
    {
      uint64_t v257 = *(void *)v242;
      uint64_t v258 = *((void *)v242 + 1);
      char v259 = v242[16];
      sub_21F7652C0(*(void *)v242, v258, v259);
      *(void *)uint64_t v241 = v257;
      *(void *)(v241 + 8) = v258;
      *(unsigned char *)(v241 + 16) = v259;
      *(void *)(v241 + 24) = *((void *)v242 + 3);
      uint64_t v260 = *((void *)v242 + 4);
      uint64_t v261 = *((void *)v242 + 5);
      char v262 = v242[48];
      swift_bridgeObjectRetain();
      sub_21F770E44(v260, v261, v262);
      *(void *)(v241 + 32) = v260;
      *(void *)(v241 + 40) = v261;
      *(unsigned char *)(v241 + 48) = v262;
      goto LABEL_112;
    }
    *(_OWORD *)uint64_t v241 = *(_OWORD *)v242;
    long long v266 = *((_OWORD *)v242 + 1);
    long long v267 = *((_OWORD *)v242 + 2);
    long long v268 = *((_OWORD *)v242 + 3);
    *(void *)(v241 + 64) = *((void *)v242 + 8);
    *(_OWORD *)(v241 + 32) = v267;
    *(_OWORD *)(v241 + 48) = v268;
    *(_OWORD *)(v241 + 16) = v266;
  }
LABEL_115:
  uint64_t v269 = v8[21];
  uint64_t v270 = v6 + v269;
  v271 = &v7[v269];
  uint64_t v272 = *(void *)(v6 + v269 + 24);
  uint64_t v273 = *(void *)&v7[v269 + 24];
  if (v272)
  {
    if (!v273)
    {
      sub_21F7D2664(v270);
      *(_OWORD *)uint64_t v270 = *(_OWORD *)v271;
      long long v293 = *((_OWORD *)v271 + 2);
      long long v292 = *((_OWORD *)v271 + 3);
      long long v294 = *((_OWORD *)v271 + 1);
      *(void *)(v270 + 64) = *((void *)v271 + 8);
      *(_OWORD *)(v270 + 32) = v293;
      *(_OWORD *)(v270 + 48) = v292;
      *(_OWORD *)(v270 + 16) = v294;
      goto LABEL_123;
    }
    uint64_t v274 = *(void *)v271;
    uint64_t v275 = *((void *)v271 + 1);
    char v276 = v271[16];
    sub_21F7652C0(*(void *)v271, v275, v276);
    uint64_t v277 = *(void *)v270;
    uint64_t v278 = *(void *)(v270 + 8);
    char v279 = *(unsigned char *)(v270 + 16);
    *(void *)uint64_t v270 = v274;
    *(void *)(v270 + 8) = v275;
    *(unsigned char *)(v270 + 16) = v276;
    sub_21F7656A8(v277, v278, v279);
    *(void *)(v270 + 24) = *((void *)v271 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v280 = *((void *)v271 + 4);
    uint64_t v281 = *((void *)v271 + 5);
    char v282 = v271[48];
    sub_21F770E44(v280, v281, v282);
    uint64_t v283 = *(void *)(v270 + 32);
    uint64_t v284 = *(void *)(v270 + 40);
    *(void *)(v270 + 32) = v280;
    *(void *)(v270 + 40) = v281;
    char v285 = *(unsigned char *)(v270 + 48);
    *(unsigned char *)(v270 + 48) = v282;
    sub_21F770E38(v283, v284, v285);
  }
  else
  {
    if (!v273)
    {
      *(_OWORD *)uint64_t v270 = *(_OWORD *)v271;
      long long v295 = *((_OWORD *)v271 + 1);
      long long v296 = *((_OWORD *)v271 + 2);
      long long v297 = *((_OWORD *)v271 + 3);
      *(void *)(v270 + 64) = *((void *)v271 + 8);
      *(_OWORD *)(v270 + 32) = v296;
      *(_OWORD *)(v270 + 48) = v297;
      *(_OWORD *)(v270 + 16) = v295;
      goto LABEL_123;
    }
    uint64_t v286 = *(void *)v271;
    uint64_t v287 = *((void *)v271 + 1);
    char v288 = v271[16];
    sub_21F7652C0(*(void *)v271, v287, v288);
    *(void *)uint64_t v270 = v286;
    *(void *)(v270 + 8) = v287;
    *(unsigned char *)(v270 + 16) = v288;
    *(void *)(v270 + 24) = *((void *)v271 + 3);
    uint64_t v289 = *((void *)v271 + 4);
    uint64_t v290 = *((void *)v271 + 5);
    char v291 = v271[48];
    swift_bridgeObjectRetain();
    sub_21F770E44(v289, v290, v291);
    *(void *)(v270 + 32) = v289;
    *(void *)(v270 + 40) = v290;
    *(unsigned char *)(v270 + 48) = v291;
  }
  *(_OWORD *)(v270 + 56) = *(_OWORD *)(v271 + 56);
LABEL_123:
  uint64_t v298 = v8[22];
  v299 = (void *)(v6 + v298);
  v300 = &v7[v298];
  void *v299 = *(void *)v300;
  v299[1] = *((void *)v300 + 1);
  v299[2] = *((void *)v300 + 2);
  uint64_t v301 = v8[23];
  v302 = (void *)(v6 + v301);
  v303 = &v7[v301];
  void *v302 = *(void *)v303;
  v302[1] = *((void *)v303 + 1);
  v302[2] = *((void *)v303 + 2);
  uint64_t v304 = v8[24];
  uint64_t v305 = v6 + v304;
  v306 = &v7[v304];
  uint64_t v307 = *(void *)(v6 + v304 + 24);
  uint64_t v308 = *(void *)&v7[v304 + 24];
  if (v307)
  {
    if (v308)
    {
      uint64_t v309 = *(void *)v306;
      uint64_t v310 = *((void *)v306 + 1);
      char v311 = v306[16];
      sub_21F7652C0(*(void *)v306, v310, v311);
      uint64_t v312 = *(void *)v305;
      uint64_t v313 = *(void *)(v305 + 8);
      char v314 = *(unsigned char *)(v305 + 16);
      *(void *)uint64_t v305 = v309;
      *(void *)(v305 + 8) = v310;
      *(unsigned char *)(v305 + 16) = v311;
      sub_21F7656A8(v312, v313, v314);
      *(void *)(v305 + 24) = *((void *)v306 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21F7D26B8(v305);
      long long v318 = *((_OWORD *)v306 + 1);
      *(_OWORD *)uint64_t v305 = *(_OWORD *)v306;
      *(_OWORD *)(v305 + 16) = v318;
    }
  }
  else if (v308)
  {
    uint64_t v315 = *(void *)v306;
    uint64_t v316 = *((void *)v306 + 1);
    char v317 = v306[16];
    sub_21F7652C0(*(void *)v306, v316, v317);
    *(void *)uint64_t v305 = v315;
    *(void *)(v305 + 8) = v316;
    *(unsigned char *)(v305 + 16) = v317;
    *(void *)(v305 + 24) = *((void *)v306 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v319 = *((_OWORD *)v306 + 1);
    *(_OWORD *)uint64_t v305 = *(_OWORD *)v306;
    *(_OWORD *)(v305 + 16) = v319;
  }
  uint64_t v320 = v8[25];
  uint64_t v321 = v6 + v320;
  v322 = &v7[v320];
  uint64_t v323 = *(void *)(v6 + v320 + 24);
  uint64_t v324 = *(void *)&v7[v320 + 24];
  if (v323)
  {
    if (v324)
    {
      uint64_t v325 = *(void *)v322;
      uint64_t v326 = *((void *)v322 + 1);
      char v327 = v322[16];
      sub_21F7652C0(*(void *)v322, v326, v327);
      uint64_t v328 = *(void *)v321;
      uint64_t v329 = *(void *)(v321 + 8);
      char v330 = *(unsigned char *)(v321 + 16);
      *(void *)uint64_t v321 = v325;
      *(void *)(v321 + 8) = v326;
      *(unsigned char *)(v321 + 16) = v327;
      sub_21F7656A8(v328, v329, v330);
      *(void *)(v321 + 24) = *((void *)v322 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21F7D26B8(v321);
      long long v334 = *((_OWORD *)v322 + 1);
      *(_OWORD *)uint64_t v321 = *(_OWORD *)v322;
      *(_OWORD *)(v321 + 16) = v334;
    }
  }
  else if (v324)
  {
    uint64_t v331 = *(void *)v322;
    uint64_t v332 = *((void *)v322 + 1);
    char v333 = v322[16];
    sub_21F7652C0(*(void *)v322, v332, v333);
    *(void *)uint64_t v321 = v331;
    *(void *)(v321 + 8) = v332;
    *(unsigned char *)(v321 + 16) = v333;
    *(void *)(v321 + 24) = *((void *)v322 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v335 = *((_OWORD *)v322 + 1);
    *(_OWORD *)uint64_t v321 = *(_OWORD *)v322;
    *(_OWORD *)(v321 + 16) = v335;
  }
  long long v4 = v350;
  uint64_t v336 = v8[26];
  v337 = (void *)(v6 + v336);
  v338 = &v7[v336];
  void *v337 = *(void *)v338;
  v337[1] = *((void *)v338 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v6 + v8[27]) = v7[v8[27]];
  uint64_t v339 = v8[28];
  uint64_t v340 = v6 + v339;
  v341 = &v7[v339];
  uint64_t v342 = *((void *)v341 + 3);
  if (*(void *)(v340 + 24))
  {
    if (v342)
    {
      sub_21F7D270C((uint64_t *)v340, (uint64_t *)v341);
    }
    else
    {
      sub_21F7D2934(v340);
      long long v343 = *((_OWORD *)v341 + 1);
      *(_OWORD *)uint64_t v340 = *(_OWORD *)v341;
      *(_OWORD *)(v340 + 16) = v343;
    }
  }
  else if (v342)
  {
    *(void *)(v340 + 24) = v342;
    (**(void (***)(uint64_t, char *))(v342 - 8))(v340, v341);
  }
  else
  {
    long long v344 = *((_OWORD *)v341 + 1);
    *(_OWORD *)uint64_t v340 = *(_OWORD *)v341;
    *(_OWORD *)(v340 + 16) = v344;
  }
LABEL_47:
  uint64_t v127 = v4[9];
  uint64_t v128 = a1 + v127;
  unint64_t v129 = (char *)v2 + v127;
  int v130 = *(unsigned __int8 *)(a1 + v127 + 40);
  int v131 = *((unsigned __int8 *)v2 + v127 + 40);
  if (v130 == 255)
  {
    if (v131 == 255)
    {
      long long v134 = *(_OWORD *)v129;
      long long v135 = *((_OWORD *)v129 + 1);
      *(_OWORD *)(v128 + 25) = *(_OWORD *)(v129 + 25);
      *(_OWORD *)uint64_t v128 = v134;
      *(_OWORD *)(v128 + 16) = v135;
      goto LABEL_57;
    }
    if (v131)
    {
LABEL_54:
      *(void *)uint64_t v128 = *(void *)v129;
      *(_OWORD *)(v128 + 8) = *(_OWORD *)(v129 + 8);
      *(unsigned char *)(v128 + 40) = 1;
      swift_retain();
      goto LABEL_57;
    }
LABEL_56:
    uint64_t v136 = *((void *)v129 + 3);
    *(void *)(v128 + 24) = v136;
    *(void *)(v128 + 32) = *((void *)v129 + 4);
    (**(void (***)(uint64_t, char *))(v136 - 8))(v128, v129);
    *(unsigned char *)(v128 + 40) = 0;
    goto LABEL_57;
  }
  if (v131 != 255)
  {
    if ((uint64_t *)a1 == v2) {
      goto LABEL_57;
    }
    sub_21F7D2610(v128);
    if (v129[40]) {
      goto LABEL_54;
    }
    goto LABEL_56;
  }
  sub_21F7D2610(v128);
  long long v132 = *(_OWORD *)(v129 + 25);
  long long v133 = *((_OWORD *)v129 + 1);
  *(_OWORD *)uint64_t v128 = *(_OWORD *)v129;
  *(_OWORD *)(v128 + 16) = v133;
  *(_OWORD *)(v128 + 25) = v132;
LABEL_57:
  uint64_t v137 = v4[10];
  uint64_t v138 = a1 + v137;
  uint64_t v139 = (char *)v2 + v137;
  long long v140 = *(_OWORD *)v139;
  *(unsigned char *)(v138 + 16) = v139[16];
  *(_OWORD *)uint64_t v138 = v140;
  return a1;
}

uint64_t sub_21F985244(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_21F9852A4(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v5 = (int *)type metadata accessor for PointsRenderer(0);
  uint64_t v6 = v5[8];
  uint64_t v7 = (_OWORD *)(a1 + v6);
  uint64_t v8 = (_OWORD *)(a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v10 = *((void *)v9 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_21F76CA40(qword_267EE7A88);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v81 = v10;
    long long v12 = v8[1];
    *uint64_t v7 = *v8;
    v7[1] = v12;
    *(_OWORD *)((char *)v7 + 25) = *(_OWORD *)((char *)v8 + 25);
    *((unsigned char *)v7 + 41) = *((unsigned char *)v8 + 41);
    long long v13 = v8[4];
    v7[3] = v8[3];
    _OWORD v7[4] = v13;
    *((void *)v7 + 10) = *((void *)v8 + 10);
    long long v14 = *(_OWORD *)((char *)v8 + 88);
    long long v15 = *(_OWORD *)((char *)v8 + 104);
    *(_OWORD *)((char *)v7 + 113) = *(_OWORD *)((char *)v8 + 113);
    *(_OWORD *)((char *)v7 + 104) = v15;
    *(_OWORD *)((char *)v7 + 88) = v14;
    *(_OWORD *)((char *)v7 + 136) = *(_OWORD *)((char *)v8 + 136);
    *((unsigned char *)v7 + 152) = *((unsigned char *)v8 + 152);
    *((void *)v7 + 20) = *((void *)v8 + 20);
    *((unsigned char *)v7 + 168) = *((unsigned char *)v8 + 168);
    long long v16 = v8[12];
    v7[11] = v8[11];
    v7[12] = v16;
    *((unsigned char *)v7 + 208) = *((unsigned char *)v8 + 208);
    uint64_t v17 = v9[11];
    long long v18 = (char *)v7 + v17;
    long long v19 = (char *)v8 + v17;
    uint64_t v20 = sub_21FA24C90();
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      uint64_t v22 = sub_21F76CA40(&qword_26AD47C20);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    uint64_t v23 = v9[12];
    uint64_t v24 = (char *)v7 + v23;
    long long v25 = (char *)v8 + v23;
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    *(void *)((char *)v7 + v9[13]) = *(void *)((char *)v8 + v9[13]);
    uint64_t v26 = v9[14];
    long long v27 = (char *)v7 + v26;
    long long v28 = (char *)v8 + v26;
    uint64_t v29 = sub_21FA25910();
    uint64_t v30 = *(void *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      uint64_t v31 = sub_21F76CA40(&qword_26AD4A3B8);
      memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    uint64_t v32 = v9[15];
    uint64_t v33 = (char *)v7 + v32;
    uint64_t v34 = (char *)v8 + v32;
    *(void *)uint64_t v33 = *(void *)v34;
    *((_WORD *)v33 + 4) = *((_WORD *)v34 + 4);
    *(void *)((char *)v7 + v9[16]) = *(void *)((char *)v8 + v9[16]);
    *(void *)((char *)v7 + v9[17]) = *(void *)((char *)v8 + v9[17]);
    uint64_t v35 = v9[18];
    uint64_t v36 = (char *)v7 + v35;
    uint64_t v37 = (char *)v8 + v35;
    long long v38 = *((_OWORD *)v37 + 3);
    *((_OWORD *)v36 + 2) = *((_OWORD *)v37 + 2);
    *((_OWORD *)v36 + 3) = v38;
    *((void *)v36 + 8) = *((void *)v37 + 8);
    long long v39 = *((_OWORD *)v37 + 1);
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
    *((_OWORD *)v36 + 1) = v39;
    uint64_t v40 = v9[19];
    uint64_t v41 = (char *)v7 + v40;
    uint64_t v42 = (char *)v8 + v40;
    *((void *)v41 + 8) = *((void *)v42 + 8);
    long long v43 = *((_OWORD *)v42 + 3);
    *((_OWORD *)v41 + 2) = *((_OWORD *)v42 + 2);
    *((_OWORD *)v41 + 3) = v43;
    long long v44 = *((_OWORD *)v42 + 1);
    *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
    *((_OWORD *)v41 + 1) = v44;
    uint64_t v45 = v9[20];
    uint64_t v46 = (char *)v7 + v45;
    uint64_t v47 = (char *)v8 + v45;
    long long v48 = *((_OWORD *)v47 + 3);
    *((_OWORD *)v46 + 2) = *((_OWORD *)v47 + 2);
    *((_OWORD *)v46 + 3) = v48;
    *((void *)v46 + 8) = *((void *)v47 + 8);
    long long v49 = *((_OWORD *)v47 + 1);
    *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
    *((_OWORD *)v46 + 1) = v49;
    uint64_t v50 = v9[21];
    uint64_t v51 = (char *)v7 + v50;
    uint64_t v52 = (char *)v8 + v50;
    *((void *)v51 + 8) = *((void *)v52 + 8);
    long long v53 = *((_OWORD *)v52 + 3);
    *((_OWORD *)v51 + 2) = *((_OWORD *)v52 + 2);
    *((_OWORD *)v51 + 3) = v53;
    long long v54 = *((_OWORD *)v52 + 1);
    *(_OWORD *)uint64_t v51 = *(_OWORD *)v52;
    *((_OWORD *)v51 + 1) = v54;
    uint64_t v55 = v9[22];
    uint64_t v56 = (char *)v7 + v55;
    char v57 = (char *)v8 + v55;
    *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
    *((void *)v56 + 2) = *((void *)v57 + 2);
    uint64_t v58 = v9[23];
    long long v59 = (char *)v7 + v58;
    long long v60 = (char *)v8 + v58;
    *(_OWORD *)long long v59 = *(_OWORD *)v60;
    *((void *)v59 + 2) = *((void *)v60 + 2);
    uint64_t v61 = v9[24];
    uint64_t v62 = (_OWORD *)((char *)v7 + v61);
    long long v63 = (_OWORD *)((char *)v8 + v61);
    long long v64 = v63[1];
    *uint64_t v62 = *v63;
    v62[1] = v64;
    uint64_t v65 = v9[25];
    char v66 = (_OWORD *)((char *)v7 + v65);
    uint64_t v67 = (_OWORD *)((char *)v8 + v65);
    long long v68 = v67[1];
    *char v66 = *v67;
    v66[1] = v68;
    *(_OWORD *)((char *)v7 + v9[26]) = *(_OWORD *)((char *)v8 + v9[26]);
    *((unsigned char *)v7 + v9[27]) = *((unsigned char *)v8 + v9[27]);
    uint64_t v69 = v9[28];
    long long v70 = (_OWORD *)((char *)v7 + v69);
    long long v71 = (_OWORD *)((char *)v8 + v69);
    long long v72 = v71[1];
    *long long v70 = *v71;
    v70[1] = v72;
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v81 + 56))(v7, 0, 1, v9);
  }
  uint64_t v73 = v5[9];
  uint64_t v74 = (_OWORD *)(a1 + v73);
  long long v75 = (_OWORD *)(a2 + v73);
  long long v76 = v75[1];
  _OWORD *v74 = *v75;
  v74[1] = v76;
  *(_OWORD *)((char *)v74 + 25) = *(_OWORD *)((char *)v75 + 25);
  uint64_t v77 = v5[10];
  uint64_t v78 = a1 + v77;
  uint64_t v79 = a2 + v77;
  *(unsigned char *)(v78 + 16) = *(unsigned char *)(v79 + 16);
  *(_OWORD *)uint64_t v78 = *(_OWORD *)v79;
  return a1;
}

uint64_t sub_21F9857B0(uint64_t a1, uint64_t a2)
{
  _s6Charts15AnyChartContentVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v5 = (int *)type metadata accessor for PointsRenderer(0);
  uint64_t v6 = v5[8];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v10 = *((void *)v9 - 1);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      uint64_t v199 = v5;
      long long v14 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
      *(_OWORD *)(v7 + 16) = v14;
      *(_OWORD *)(v7 + 25) = *(_OWORD *)(v8 + 25);
      *(unsigned char *)(v7 + 41) = *(unsigned char *)(v8 + 41);
      long long v15 = *(_OWORD *)(v8 + 64);
      *(_OWORD *)(v7 + 48) = *(_OWORD *)(v8 + 48);
      *(_OWORD *)(v7 + 64) = v15;
      *(void *)(v7 + 80) = *(void *)(v8 + 80);
      long long v16 = *(_OWORD *)(v8 + 88);
      long long v17 = *(_OWORD *)(v8 + 104);
      *(_OWORD *)(v7 + 113) = *(_OWORD *)(v8 + 113);
      *(_OWORD *)(v7 + 104) = v17;
      *(_OWORD *)(v7 + 88) = v16;
      *(_OWORD *)(v7 + 136) = *(_OWORD *)(v8 + 136);
      *(unsigned char *)(v7 + 152) = *(unsigned char *)(v8 + 152);
      *(void *)(v7 + 160) = *(void *)(v8 + 160);
      *(unsigned char *)(v7 + 168) = *(unsigned char *)(v8 + 168);
      long long v18 = *(_OWORD *)(v8 + 192);
      *(_OWORD *)(v7 + 176) = *(_OWORD *)(v8 + 176);
      *(_OWORD *)(v7 + 192) = v18;
      *(unsigned char *)(v7 + 208) = *(unsigned char *)(v8 + 208);
      uint64_t v19 = v9[11];
      uint64_t v20 = (void *)(v7 + v19);
      uint64_t v21 = (const void *)(v8 + v19);
      uint64_t v22 = sub_21FA24C90();
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        uint64_t v24 = sub_21F76CA40(&qword_26AD47C20);
        memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v23 + 32))(v20, v21, v22);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      uint64_t v39 = v9[12];
      uint64_t v40 = v7 + v39;
      uint64_t v41 = v8 + v39;
      *(void *)uint64_t v40 = *(void *)v41;
      *(unsigned char *)(v40 + 8) = *(unsigned char *)(v41 + 8);
      *(void *)(v7 + v9[13]) = *(void *)(v8 + v9[13]);
      uint64_t v42 = v9[14];
      long long v43 = (void *)(v7 + v42);
      long long v44 = (const void *)(v8 + v42);
      uint64_t v45 = sub_21FA25910();
      uint64_t v46 = *(void *)(v45 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
      {
        uint64_t v47 = sub_21F76CA40(&qword_26AD4A3B8);
        memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v46 + 32))(v43, v44, v45);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
      }
      uint64_t v5 = v199;
      uint64_t v48 = v9[15];
      uint64_t v49 = v7 + v48;
      uint64_t v50 = v8 + v48;
      *(void *)uint64_t v49 = *(void *)v50;
      *(_WORD *)(v49 + 8) = *(_WORD *)(v50 + 8);
      *(void *)(v7 + v9[16]) = *(void *)(v8 + v9[16]);
      *(void *)(v7 + v9[17]) = *(void *)(v8 + v9[17]);
      uint64_t v51 = v9[18];
      uint64_t v52 = v7 + v51;
      uint64_t v53 = v8 + v51;
      long long v54 = *(_OWORD *)(v53 + 48);
      *(_OWORD *)(v52 + 32) = *(_OWORD *)(v53 + 32);
      *(_OWORD *)(v52 + 48) = v54;
      *(void *)(v52 + 64) = *(void *)(v53 + 64);
      long long v55 = *(_OWORD *)(v53 + 16);
      *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
      *(_OWORD *)(v52 + 16) = v55;
      uint64_t v56 = v9[19];
      uint64_t v57 = v7 + v56;
      uint64_t v58 = v8 + v56;
      *(void *)(v57 + 64) = *(void *)(v58 + 64);
      long long v59 = *(_OWORD *)(v58 + 48);
      *(_OWORD *)(v57 + 32) = *(_OWORD *)(v58 + 32);
      *(_OWORD *)(v57 + 48) = v59;
      long long v60 = *(_OWORD *)(v58 + 16);
      *(_OWORD *)uint64_t v57 = *(_OWORD *)v58;
      *(_OWORD *)(v57 + 16) = v60;
      uint64_t v61 = v9[20];
      uint64_t v62 = v7 + v61;
      uint64_t v63 = v8 + v61;
      long long v64 = *(_OWORD *)(v63 + 48);
      *(_OWORD *)(v62 + 32) = *(_OWORD *)(v63 + 32);
      *(_OWORD *)(v62 + 48) = v64;
      *(void *)(v62 + 64) = *(void *)(v63 + 64);
      long long v65 = *(_OWORD *)(v63 + 16);
      *(_OWORD *)uint64_t v62 = *(_OWORD *)v63;
      *(_OWORD *)(v62 + 16) = v65;
      uint64_t v66 = v9[21];
      uint64_t v67 = v7 + v66;
      uint64_t v68 = v8 + v66;
      *(void *)(v67 + 64) = *(void *)(v68 + 64);
      long long v69 = *(_OWORD *)(v68 + 48);
      *(_OWORD *)(v67 + 32) = *(_OWORD *)(v68 + 32);
      *(_OWORD *)(v67 + 48) = v69;
      long long v70 = *(_OWORD *)(v68 + 16);
      *(_OWORD *)uint64_t v67 = *(_OWORD *)v68;
      *(_OWORD *)(v67 + 16) = v70;
      uint64_t v71 = v9[22];
      uint64_t v72 = v7 + v71;
      uint64_t v73 = v8 + v71;
      *(_OWORD *)uint64_t v72 = *(_OWORD *)v73;
      *(void *)(v72 + 16) = *(void *)(v73 + 16);
      uint64_t v74 = v9[23];
      uint64_t v75 = v7 + v74;
      uint64_t v76 = v8 + v74;
      *(_OWORD *)uint64_t v75 = *(_OWORD *)v76;
      *(void *)(v75 + 16) = *(void *)(v76 + 16);
      uint64_t v77 = v9[24];
      uint64_t v78 = (_OWORD *)(v7 + v77);
      uint64_t v79 = (_OWORD *)(v8 + v77);
      long long v80 = v79[1];
      *uint64_t v78 = *v79;
      v78[1] = v80;
      uint64_t v81 = v9[25];
      long long v82 = (_OWORD *)(v7 + v81);
      long long v83 = (_OWORD *)(v8 + v81);
      long long v84 = v83[1];
      *long long v82 = *v83;
      v82[1] = v84;
      *(_OWORD *)(v7 + v9[26]) = *(_OWORD *)(v8 + v9[26]);
      *(unsigned char *)(v7 + v9[27]) = *(unsigned char *)(v8 + v9[27]);
      uint64_t v85 = v9[28];
      uint64_t v86 = (_OWORD *)(v7 + v85);
      uint64_t v87 = (_OWORD *)(v8 + v85);
      long long v88 = v87[1];
      *uint64_t v86 = *v87;
      v86[1] = v88;
      (*(void (**)(uint64_t, void, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_76;
    }
LABEL_7:
    uint64_t v25 = sub_21F76CA40(qword_267EE7A88);
    memcpy((void *)v7, (const void *)v8, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_76;
  }
  if (v13)
  {
    sub_21F985244(v7, type metadata accessor for ChartContentRenderContext.Environment);
    goto LABEL_7;
  }
  if (*(unsigned __int8 *)(v7 + 40) == 255) {
    goto LABEL_14;
  }
  if (*(unsigned __int8 *)(v8 + 40) == 255 || a1 != a2)
  {
    sub_21F7D25BC(v7);
LABEL_14:
    long long v27 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v27;
    *(_OWORD *)(v7 + 25) = *(_OWORD *)(v8 + 25);
  }
  *(unsigned char *)(v7 + 41) = *(unsigned char *)(v8 + 41);
  uint64_t v28 = *(void *)(v8 + 56);
  *(void *)(v7 + 48) = *(void *)(v8 + 48);
  *(void *)(v7 + 56) = v28;
  *(void *)(v7 + 64) = *(void *)(v8 + 64);
  *(void *)(v7 + 72) = *(void *)(v8 + 72);
  swift_bridgeObjectRelease();
  *(void *)(v7 + 80) = *(void *)(v8 + 80);
  if (*(unsigned __int8 *)(v7 + 128) == 255)
  {
LABEL_19:
    long long v29 = *(_OWORD *)(v8 + 104);
    *(_OWORD *)(v7 + 88) = *(_OWORD *)(v8 + 88);
    *(_OWORD *)(v7 + 104) = v29;
    *(_OWORD *)(v7 + 113) = *(_OWORD *)(v8 + 113);
    goto LABEL_20;
  }
  if (*(unsigned __int8 *)(v8 + 128) == 255 || a1 != a2)
  {
    sub_21F7D2610(v7 + 88);
    goto LABEL_19;
  }
LABEL_20:
  uint64_t v200 = v5;
  *(_OWORD *)(v7 + 136) = *(_OWORD *)(v8 + 136);
  *(unsigned char *)(v7 + 152) = *(unsigned char *)(v8 + 152);
  *(void *)(v7 + 160) = *(void *)(v8 + 160);
  *(unsigned char *)(v7 + 168) = *(unsigned char *)(v8 + 168);
  long long v30 = *(_OWORD *)(v8 + 192);
  *(_OWORD *)(v7 + 176) = *(_OWORD *)(v8 + 176);
  *(_OWORD *)(v7 + 192) = v30;
  *(unsigned char *)(v7 + 208) = *(unsigned char *)(v8 + 208);
  uint64_t v31 = v9[11];
  uint64_t v32 = (void *)(v7 + v31);
  uint64_t v33 = (void *)(v8 + v31);
  uint64_t v34 = sub_21FA24C90();
  uint64_t v195 = *(void *)(v34 - 8);
  uint64_t v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v195 + 48);
  uint64_t v197 = v32;
  LODWORD(v32) = v35(v32, 1, v34);
  int v36 = v35(v33, 1, v34);
  if (v32)
  {
    if (v36)
    {
      size_t v37 = *(void *)(*(void *)(sub_21F76CA40(&qword_26AD47C20) - 8) + 64);
      long long v38 = v197;
LABEL_30:
      memcpy(v38, v33, v37);
      goto LABEL_33;
    }
    (*(void (**)(void *, void *, uint64_t))(v195 + 32))(v197, v33, v34);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v195 + 56))(v197, 0, 1, v34);
  }
  else
  {
    if (v36)
    {
      (*(void (**)(void *, uint64_t))(v195 + 8))(v197, v34);
      size_t v37 = *(void *)(*(void *)(sub_21F76CA40(&qword_26AD47C20) - 8) + 64);
      long long v38 = v197;
      goto LABEL_30;
    }
    (*(void (**)(void *, void *, uint64_t))(v195 + 40))(v197, v33, v34);
  }
LABEL_33:
  uint64_t v89 = v9[12];
  uint64_t v90 = v7 + v89;
  uint64_t v91 = v8 + v89;
  *(void *)uint64_t v90 = *(void *)v91;
  *(unsigned char *)(v90 + 8) = *(unsigned char *)(v91 + 8);
  *(void *)(v7 + v9[13]) = *(void *)(v8 + v9[13]);
  uint64_t v92 = v9[14];
  char v93 = (void *)(v7 + v92);
  long long v94 = (void *)(v8 + v92);
  uint64_t v95 = sub_21FA25910();
  uint64_t v196 = *(void *)(v95 - 8);
  long long v96 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v196 + 48);
  char v198 = v93;
  LODWORD(v93) = v96(v93, 1, v95);
  int v97 = v96(v94, 1, v95);
  if (v93)
  {
    if (v97)
    {
      size_t v98 = *(void *)(*(void *)(sub_21F76CA40(&qword_26AD4A3B8) - 8) + 64);
      long long v99 = v198;
LABEL_38:
      memcpy(v99, v94, v98);
      goto LABEL_41;
    }
    (*(void (**)(void *, void *, uint64_t))(v196 + 32))(v198, v94, v95);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v196 + 56))(v198, 0, 1, v95);
  }
  else
  {
    if (v97)
    {
      (*(void (**)(void *, uint64_t))(v196 + 8))(v198, v95);
      size_t v98 = *(void *)(*(void *)(sub_21F76CA40(&qword_26AD4A3B8) - 8) + 64);
      long long v99 = v198;
      goto LABEL_38;
    }
    (*(void (**)(void *, void *, uint64_t))(v196 + 40))(v198, v94, v95);
  }
LABEL_41:
  uint64_t v100 = v9[15];
  uint64_t v101 = v7 + v100;
  uint64_t v102 = v8 + v100;
  *(void *)(v7 + v100) = *(void *)(v8 + v100);
  swift_release();
  *(unsigned char *)(v101 + 8) = *(unsigned char *)(v102 + 8);
  *(unsigned char *)(v101 + 9) = *(unsigned char *)(v102 + 9);
  *(void *)(v7 + v9[16]) = *(void *)(v8 + v9[16]);
  *(void *)(v7 + v9[17]) = *(void *)(v8 + v9[17]);
  uint64_t v103 = v9[18];
  uint64_t v104 = v7 + v103;
  uint64_t v105 = v8 + v103;
  uint64_t v5 = v200;
  if (*(void *)(v7 + v103 + 24))
  {
    if (*(void *)(v105 + 24))
    {
      char v106 = *(unsigned char *)(v105 + 16);
      uint64_t v107 = *(void *)v104;
      uint64_t v108 = *(void *)(v104 + 8);
      char v109 = *(unsigned char *)(v104 + 16);
      *(_OWORD *)uint64_t v104 = *(_OWORD *)v105;
      *(unsigned char *)(v104 + 16) = v106;
      sub_21F7656A8(v107, v108, v109);
      *(void *)(v104 + 24) = *(void *)(v105 + 24);
      swift_bridgeObjectRelease();
      char v110 = *(unsigned char *)(v105 + 48);
      uint64_t v111 = *(void *)(v104 + 32);
      uint64_t v112 = *(void *)(v104 + 40);
      *(_OWORD *)(v104 + 32) = *(_OWORD *)(v105 + 32);
      char v113 = *(unsigned char *)(v104 + 48);
      *(unsigned char *)(v104 + 48) = v110;
      sub_21F770E38(v111, v112, v113);
      *(_OWORD *)(v104 + 56) = *(_OWORD *)(v105 + 56);
      goto LABEL_46;
    }
    sub_21F7D2664(v104);
  }
  long long v114 = *(_OWORD *)(v105 + 48);
  *(_OWORD *)(v104 + 32) = *(_OWORD *)(v105 + 32);
  *(_OWORD *)(v104 + 48) = v114;
  *(void *)(v104 + 64) = *(void *)(v105 + 64);
  long long v115 = *(_OWORD *)(v105 + 16);
  *(_OWORD *)uint64_t v104 = *(_OWORD *)v105;
  *(_OWORD *)(v104 + 16) = v115;
LABEL_46:
  uint64_t v116 = v9[19];
  uint64_t v117 = v7 + v116;
  uint64_t v118 = v8 + v116;
  if (*(void *)(v7 + v116 + 24))
  {
    if (*(void *)(v118 + 24))
    {
      char v119 = *(unsigned char *)(v118 + 16);
      uint64_t v120 = *(void *)v117;
      uint64_t v121 = *(void *)(v117 + 8);
      char v122 = *(unsigned char *)(v117 + 16);
      *(_OWORD *)uint64_t v117 = *(_OWORD *)v118;
      *(unsigned char *)(v117 + 16) = v119;
      sub_21F7656A8(v120, v121, v122);
      *(void *)(v117 + 24) = *(void *)(v118 + 24);
      swift_bridgeObjectRelease();
      char v123 = *(unsigned char *)(v118 + 48);
      uint64_t v124 = *(void *)(v117 + 32);
      uint64_t v125 = *(void *)(v117 + 40);
      *(_OWORD *)(v117 + 32) = *(_OWORD *)(v118 + 32);
      char v126 = *(unsigned char *)(v117 + 48);
      *(unsigned char *)(v117 + 48) = v123;
      sub_21F770E38(v124, v125, v126);
      *(_OWORD *)(v117 + 56) = *(_OWORD *)(v118 + 56);
      goto LABEL_51;
    }
    sub_21F7D2664(v117);
  }
  long long v127 = *(_OWORD *)(v118 + 48);
  *(_OWORD *)(v117 + 32) = *(_OWORD *)(v118 + 32);
  *(_OWORD *)(v117 + 48) = v127;
  *(void *)(v117 + 64) = *(void *)(v118 + 64);
  long long v128 = *(_OWORD *)(v118 + 16);
  *(_OWORD *)uint64_t v117 = *(_OWORD *)v118;
  *(_OWORD *)(v117 + 16) = v128;
LABEL_51:
  uint64_t v129 = v9[20];
  uint64_t v130 = v7 + v129;
  uint64_t v131 = v8 + v129;
  if (*(void *)(v7 + v129 + 24))
  {
    if (*(void *)(v131 + 24))
    {
      char v132 = *(unsigned char *)(v131 + 16);
      uint64_t v133 = *(void *)v130;
      uint64_t v134 = *(void *)(v130 + 8);
      char v135 = *(unsigned char *)(v130 + 16);
      *(_OWORD *)uint64_t v130 = *(_OWORD *)v131;
      *(unsigned char *)(v130 + 16) = v132;
      sub_21F7656A8(v133, v134, v135);
      *(void *)(v130 + 24) = *(void *)(v131 + 24);
      swift_bridgeObjectRelease();
      char v136 = *(unsigned char *)(v131 + 48);
      uint64_t v137 = *(void *)(v130 + 32);
      uint64_t v138 = *(void *)(v130 + 40);
      *(_OWORD *)(v130 + 32) = *(_OWORD *)(v131 + 32);
      char v139 = *(unsigned char *)(v130 + 48);
      *(unsigned char *)(v130 + 48) = v136;
      sub_21F770E38(v137, v138, v139);
      *(_OWORD *)(v130 + 56) = *(_OWORD *)(v131 + 56);
      goto LABEL_56;
    }
    sub_21F7D2664(v130);
  }
  long long v140 = *(_OWORD *)(v131 + 48);
  *(_OWORD *)(v130 + 32) = *(_OWORD *)(v131 + 32);
  *(_OWORD *)(v130 + 48) = v140;
  *(void *)(v130 + 64) = *(void *)(v131 + 64);
  long long v141 = *(_OWORD *)(v131 + 16);
  *(_OWORD *)uint64_t v130 = *(_OWORD *)v131;
  *(_OWORD *)(v130 + 16) = v141;
LABEL_56:
  uint64_t v142 = v9[21];
  uint64_t v143 = v7 + v142;
  uint64_t v144 = v8 + v142;
  if (*(void *)(v7 + v142 + 24))
  {
    if (*(void *)(v144 + 24))
    {
      char v145 = *(unsigned char *)(v144 + 16);
      uint64_t v146 = *(void *)v143;
      uint64_t v147 = *(void *)(v143 + 8);
      char v148 = *(unsigned char *)(v143 + 16);
      *(_OWORD *)uint64_t v143 = *(_OWORD *)v144;
      *(unsigned char *)(v143 + 16) = v145;
      sub_21F7656A8(v146, v147, v148);
      *(void *)(v143 + 24) = *(void *)(v144 + 24);
      swift_bridgeObjectRelease();
      char v149 = *(unsigned char *)(v144 + 48);
      uint64_t v150 = *(void *)(v143 + 32);
      uint64_t v151 = *(void *)(v143 + 40);
      *(_OWORD *)(v143 + 32) = *(_OWORD *)(v144 + 32);
      char v152 = *(unsigned char *)(v143 + 48);
      *(unsigned char *)(v143 + 48) = v149;
      sub_21F770E38(v150, v151, v152);
      *(_OWORD *)(v143 + 56) = *(_OWORD *)(v144 + 56);
      goto LABEL_61;
    }
    sub_21F7D2664(v143);
  }
  long long v153 = *(_OWORD *)(v144 + 48);
  *(_OWORD *)(v143 + 32) = *(_OWORD *)(v144 + 32);
  *(_OWORD *)(v143 + 48) = v153;
  *(void *)(v143 + 64) = *(void *)(v144 + 64);
  long long v154 = *(_OWORD *)(v144 + 16);
  *(_OWORD *)uint64_t v143 = *(_OWORD *)v144;
  *(_OWORD *)(v143 + 16) = v154;
LABEL_61:
  uint64_t v155 = v9[22];
  uint64_t v156 = v7 + v155;
  uint64_t v157 = v8 + v155;
  *(_OWORD *)uint64_t v156 = *(_OWORD *)v157;
  *(void *)(v156 + 16) = *(void *)(v157 + 16);
  uint64_t v158 = v9[23];
  uint64_t v159 = v7 + v158;
  uint64_t v160 = v8 + v158;
  *(_OWORD *)uint64_t v159 = *(_OWORD *)v160;
  *(void *)(v159 + 16) = *(void *)(v160 + 16);
  uint64_t v161 = v9[24];
  uint64_t v162 = v7 + v161;
  uint64_t v163 = v8 + v161;
  if (*(void *)(v7 + v161 + 24))
  {
    if (*(void *)(v163 + 24))
    {
      char v164 = *(unsigned char *)(v163 + 16);
      uint64_t v165 = *(void *)v162;
      uint64_t v166 = *(void *)(v162 + 8);
      char v167 = *(unsigned char *)(v162 + 16);
      *(_OWORD *)uint64_t v162 = *(_OWORD *)v163;
      *(unsigned char *)(v162 + 16) = v164;
      sub_21F7656A8(v165, v166, v167);
      *(void *)(v162 + 24) = *(void *)(v163 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_66;
    }
    sub_21F7D26B8(v162);
  }
  long long v168 = *(_OWORD *)(v163 + 16);
  *(_OWORD *)uint64_t v162 = *(_OWORD *)v163;
  *(_OWORD *)(v162 + 16) = v168;
LABEL_66:
  uint64_t v169 = v9[25];
  uint64_t v170 = v7 + v169;
  uint64_t v171 = v8 + v169;
  if (!*(void *)(v7 + v169 + 24))
  {
LABEL_70:
    long long v176 = *(_OWORD *)(v171 + 16);
    *(_OWORD *)uint64_t v170 = *(_OWORD *)v171;
    *(_OWORD *)(v170 + 16) = v176;
    goto LABEL_71;
  }
  if (!*(void *)(v171 + 24))
  {
    sub_21F7D26B8(v170);
    goto LABEL_70;
  }
  char v172 = *(unsigned char *)(v171 + 16);
  uint64_t v173 = *(void *)v170;
  uint64_t v174 = *(void *)(v170 + 8);
  char v175 = *(unsigned char *)(v170 + 16);
  *(_OWORD *)uint64_t v170 = *(_OWORD *)v171;
  *(unsigned char *)(v170 + 16) = v172;
  sub_21F7656A8(v173, v174, v175);
  *(void *)(v170 + 24) = *(void *)(v171 + 24);
  swift_bridgeObjectRelease();
LABEL_71:
  uint64_t v177 = v9[26];
  v178 = (void *)(v7 + v177);
  uint64_t v179 = (uint64_t *)(v8 + v177);
  uint64_t v181 = *v179;
  uint64_t v180 = v179[1];
  void *v178 = v181;
  v178[1] = v180;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v7 + v9[27]) = *(unsigned char *)(v8 + v9[27]);
  uint64_t v182 = v9[28];
  uint64_t v183 = v7 + v182;
  uint64_t v184 = v8 + v182;
  if (*(void *)(v183 + 24))
  {
    if (*(void *)(v184 + 24)) {
      _s6Charts15AnyChartContentVwxx_0(v183);
    }
    else {
      sub_21F7D2934(v183);
    }
  }
  long long v185 = *(_OWORD *)(v184 + 16);
  *(_OWORD *)uint64_t v183 = *(_OWORD *)v184;
  *(_OWORD *)(v183 + 16) = v185;
LABEL_76:
  uint64_t v186 = v5[9];
  uint64_t v187 = (_OWORD *)(a1 + v186);
  uint64_t v188 = a2 + v186;
  if (*(unsigned __int8 *)(a1 + v186 + 40) == 255)
  {
LABEL_82:
    long long v190 = *(_OWORD *)(v188 + 16);
    *uint64_t v187 = *(_OWORD *)v188;
    v187[1] = v190;
    *(_OWORD *)((char *)v187 + 25) = *(_OWORD *)(v188 + 25);
    goto LABEL_83;
  }
  if (*(unsigned __int8 *)(v188 + 40) == 255 || a1 != a2)
  {
    sub_21F7D2610((uint64_t)v187);
    goto LABEL_82;
  }
LABEL_83:
  uint64_t v191 = v5[10];
  uint64_t v192 = a1 + v191;
  uint64_t v193 = a2 + v191;
  *(_OWORD *)uint64_t v192 = *(_OWORD *)v193;
  *(unsigned char *)(v192 + 16) = *(unsigned char *)(v193 + 16);
  return a1;
}

uint64_t sub_21F9864F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F98650C);
}

uint64_t sub_21F98650C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PointsRenderer(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_21F986578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F98658C);
}

uint64_t sub_21F98658C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PointsRenderer(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for VectorizedPointPlotContent()
{
  return sub_21F764F08();
}

ValueMetadata *type metadata accessor for PointMarkChartContentKey()
{
  return &type metadata for PointMarkChartContentKey;
}

void *initializeBufferWithCopyOfBuffer for ChartContentList(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ChartContentList(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for ChartContentList(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for ChartContentList()
{
  return &type metadata for ChartContentList;
}

unint64_t sub_21F9866F4(uint64_t a1)
{
  unint64_t result = sub_21F7AA4C0();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21F98671C()
{
  return sub_21F779E60(&qword_267EE9968, &qword_267EE9970);
}

char *sub_21F986758(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ChartContentList.Item() - 8;
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6) {
    return (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v7 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v8 = *(void *)(v3 + 72);
  uint64_t v14 = a1;
  swift_bridgeObjectRetain();
  uint64_t v9 = v6 - 1;
  uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  while (1)
  {
    sub_21F9885F0(v7, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ChartContentList.Item);
    sub_21F987734(v5 + 16, v16);
    sub_21F987734(v16, v17);
    sub_21F987734(v16, v15);
    sub_21F7AA2D0((uint64_t)v15);
    sub_21F988658((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ChartContentList.Item);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v10 = sub_21F7E5EB8(0, *((void *)v10 + 2) + 1, 1, v10);
    }
    unint64_t v12 = *((void *)v10 + 2);
    unint64_t v11 = *((void *)v10 + 3);
    if (v12 >= v11 >> 1) {
      uint64_t v10 = sub_21F7E5EB8((char *)(v11 > 1), v12 + 1, 1, v10);
    }
    *((void *)v10 + 2) = v12 + 1;
    memcpy(&v10[432 * v12 + 32], v17, 0x1B0uLL);
    if (!v9) {
      break;
    }
    --v9;
    v7 += v8;
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_21F986954(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)result;
  if (!a2)
  {
    uint64_t v8 = 0;
    goto LABEL_11;
  }
  uint64_t v8 = a3;
  if (!a3)
  {
LABEL_11:
    *uint64_t v7 = a4;
    v7[1] = a5;
    v7[2] = v8;
    return v8;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a4 + 16);
    if (v9)
    {
      uint64_t v10 = a2;
      unint64_t v11 = 0;
      uint64_t v12 = a3 - 1;
      while (v11 < *(void *)(a4 + 16))
      {
        uint64_t v13 = *(void *)(type metadata accessor for ChartContentList.Item() - 8);
        uint64_t v14 = *(void *)(v13 + 72);
        unint64_t result = sub_21F9885F0(a4+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ v14 * v11, v10, (uint64_t (*)(void))type metadata accessor for ChartContentList.Item);
        if (v12 == v11) {
          goto LABEL_11;
        }
        v10 += v14;
        if (v9 == ++v11) {
          goto LABEL_9;
        }
      }
      __break(1u);
      goto LABEL_13;
    }
LABEL_9:
    uint64_t v8 = v9;
    goto LABEL_11;
  }
LABEL_13:
  __break(1u);
  return result;
}

unint64_t sub_21F986A7C(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a4 + 16);
  if (v4 < result || v4 < a3)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = a3 - result;
  if (a2 >= 1)
  {
    if (v6 < 0 || v6 >= (unint64_t)a2) {
      goto LABEL_13;
    }
    return 0;
  }
  if (v6 <= 0 && v6 > a2) {
    return 0;
  }
LABEL_13:
  BOOL v7 = __OFADD__(result, a2);
  result += a2;
  if (v7) {
    goto LABEL_16;
  }
  if (result > v4) {
LABEL_17:
  }
    __break(1u);
  return result;
}

uint64_t sub_21F986AE8()
{
  sub_21F7DF308(v0, (uint64_t)v5);
  if (v7)
  {
    v3[0] = v5[0];
    v3[1] = v5[1];
    uint64_t v4 = v6;
    sub_21FA26460();
    sub_21FA25D40();
    swift_bridgeObjectRelease();
    sub_21FA25D40();
    uint64_t v1 = 0x63696D616E79642ELL;
    sub_21F7DF260((uint64_t)v3);
  }
  else
  {
    *((void *)&v3[0] + 1) = 0xE900000000000028;
    sub_21FA26860();
    sub_21FA25D40();
    swift_bridgeObjectRelease();
    sub_21FA25D40();
    return 0x6C61636978656C2ELL;
  }
  return v1;
}

uint64_t sub_21F986BEC()
{
  sub_21FA26A00();
  sub_21F7DF308(v0, (uint64_t)v4);
  if (v6)
  {
    v2[0] = v4[0];
    v2[1] = v4[1];
    uint64_t v3 = v5;
    sub_21FA26A10();
    sub_21FA26480();
    sub_21F7DF260((uint64_t)v2);
  }
  else
  {
    sub_21FA26A10();
    sub_21FA26A10();
  }
  return sub_21FA26A50();
}

uint64_t sub_21F986C90()
{
  sub_21F7DF308(v0, (uint64_t)v4);
  if (v6)
  {
    v2[0] = v4[0];
    v2[1] = v4[1];
    uint64_t v3 = v5;
    sub_21FA26A10();
    sub_21FA26480();
    return sub_21F7DF260((uint64_t)v2);
  }
  else
  {
    sub_21FA26A10();
    return sub_21FA26A10();
  }
}

uint64_t sub_21F986D20()
{
  sub_21FA26A00();
  sub_21F7DF308(v0, (uint64_t)v4);
  if (v6)
  {
    v2[0] = v4[0];
    v2[1] = v4[1];
    uint64_t v3 = v5;
    sub_21FA26A10();
    sub_21FA26480();
    sub_21F7DF260((uint64_t)v2);
  }
  else
  {
    sub_21FA26A10();
    sub_21FA26A10();
  }
  return sub_21FA26A50();
}

void sub_21F986DCC()
{
}

uint64_t sub_21F986DDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_21FA26A10();
  if (v3)
  {
    uint64_t v5 = a2 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_21F7DF308(v5, (uint64_t)v11);
      sub_21F7DF308((uint64_t)v11, (uint64_t)v8);
      if (v10)
      {
        v6[0] = v8[0];
        v6[1] = v8[1];
        uint64_t v7 = v9;
        sub_21FA26A10();
        sub_21FA26480();
        sub_21F7DF260((uint64_t)v6);
      }
      else
      {
        sub_21FA26A10();
        sub_21FA26A10();
      }
      sub_21F7DF364((uint64_t)v11);
      v5 += 48;
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_21F986EC4()
{
  uint64_t v1 = *v0;
  sub_21FA26A00();
  swift_bridgeObjectRetain();
  sub_21F7D4CA0((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_21FA26A50();
}

uint64_t sub_21F986F1C(uint64_t a1)
{
  return sub_21F986DDC(a1, *v1);
}

uint64_t sub_21F986F38()
{
  uint64_t v1 = *v0;
  sub_21FA26A00();
  swift_bridgeObjectRetain();
  sub_21F7D4CA0((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_21FA26A50();
}

uint64_t sub_21F986F8C(uint64_t *a1, uint64_t *a2)
{
  return sub_21F7D4220(*a1, *a2);
}

uint64_t sub_21F986F98()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ChartContentList.Item();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (uint64_t *)((char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *v0;
  int64_t v7 = *(void *)(*v0 + 16);
  uint64_t v8 = MEMORY[0x263F8EE78];
  if (v7)
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_21F7A241C(0, v7, 0);
    uint64_t v9 = v6 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v10 = *(void *)(v3 + 72);
    uint64_t v8 = v17;
    do
    {
      sub_21F9885F0(v9, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ChartContentList.Item);
      uint64_t v11 = *v5;
      swift_bridgeObjectRetain();
      sub_21F988658((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ChartContentList.Item);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_21F7A241C(0, *(void *)(v8 + 16) + 1, 1);
        uint64_t v8 = v17;
      }
      unint64_t v13 = *(void *)(v8 + 16);
      unint64_t v12 = *(void *)(v8 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_21F7A241C((char *)(v12 > 1), v13 + 1, 1);
        uint64_t v8 = v17;
      }
      *(void *)(v8 + 16) = v13 + 1;
      *(void *)(v8 + 8 * v13 + 32) = v11;
      v9 += v10;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  sub_21F7C5EA8(v8);
  swift_bridgeObjectRelease();
  sub_21F7C5F78();
  uint64_t v14 = sub_21FA26000();
  uint64_t result = swift_bridgeObjectRelease();
  v1[1] = v14;
  return result;
}

void sub_21F9871A8(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)v1 + 16);
}

uint64_t (*sub_21F9871B8(uint64_t a1, void *a2))(void, void)
{
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*a2 < *(void *)(*(void *)v2 + 16))
  {
    type metadata accessor for ChartContentList.Item();
    return nullsub_1;
  }
  __break(1u);
  return result;
}

uint64_t *sub_21F987274@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0 || (uint64_t v4 = result[1], result = *v2, (*v2)[2] < v4))
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = v2[1];
    *a2 = v3;
    a2[1] = v4;
    a2[2] = result;
    a2[3] = v5;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

void sub_21F9872A4(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  *a1 = 0;
  a1[1] = v2;
}

BOOL sub_21F9872B4()
{
  return *(void *)(*(void *)v0 + 16) == 0;
}

void *sub_21F9872C8@<X0>(void *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if (v4 <= *(void *)(*(void *)v3 + 16))
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t sub_21F9872F4@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result = sub_21F986A7C(*a1, a2, *a3, *v4);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v7 & 1;
  return result;
}

unint64_t *sub_21F987330(unint64_t *result, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *(void *)(*(void *)v2 + 16);
  if (*result <= v4 && v3 <= v4) {
    return (unint64_t *)(v3 - *result);
  }
  __break(1u);
  return result;
}

void sub_21F987358(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = 0;
}

uint64_t sub_21F987368()
{
  return *(void *)(*(void *)v0 + 16);
}

size_t sub_21F987374()
{
  size_t v1 = sub_21F987748(*v0, v0[1]);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_21F9873AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21F986954(a1, a2, a3, *v3, v3[1]);
}

unint64_t sub_21F9873B8()
{
  unint64_t result = qword_267EE9978;
  if (!qword_267EE9978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE9978);
  }
  return result;
}

uint64_t sub_21F98740C()
{
  return sub_21F779E60(&qword_267EE9980, &qword_267EE9988);
}

unint64_t sub_21F98744C()
{
  unint64_t result = qword_267EE9990;
  if (!qword_267EE9990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE9990);
  }
  return result;
}

uint64_t sub_21F9874A0()
{
  return sub_21F987588(&qword_267EE9998, (void (*)(void))sub_21F9874E8);
}

unint64_t sub_21F9874E8()
{
  unint64_t result = qword_267EE99A0;
  if (!qword_267EE99A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE99A0);
  }
  return result;
}

uint64_t sub_21F987540()
{
  return sub_21F987588(&qword_267EE99A8, (void (*)(void))sub_21F9875F8);
}

uint64_t sub_21F987588(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_21F779EA4(&qword_267EE9988);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_21F9875F8()
{
  unint64_t result = qword_267EE99B0;
  if (!qword_267EE99B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE99B0);
  }
  return result;
}

uint64_t sub_21F98764C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_21F9883FC(MEMORY[0x263F8EE78]);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_21F98767C(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v4);
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_21F9EE104(v2);
  sub_21F986F98();

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for ChartContentList.Item()
{
  uint64_t result = qword_267EE99C0;
  if (!qword_267EE99C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *sub_21F987734(void *__src, void *__dst)
{
  return memcpy(__dst, __src, 0x1B0uLL);
}

size_t sub_21F987748(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return MEMORY[0x263F8EE78];
  }
  sub_21F76CA40(&qword_267EE76C8);
  uint64_t v5 = *(void *)(type metadata accessor for ChartContentList.Item() - 8);
  uint64_t v6 = *(void *)(v5 + 72);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (void *)swift_allocObject();
  size_t result = j__malloc_size(v8);
  if (v6)
  {
    if (result - v7 != 0x8000000000000000 || v6 != -1)
    {
      _OWORD v8[2] = v2;
      v8[3] = 2 * ((uint64_t)(result - v7) / v6);
      uint64_t v11 = sub_21F986954((uint64_t)v12, (uint64_t)v8 + v7, v2, a1, a2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v11 == v2) {
        return (size_t)v8;
      }
      __break(1u);
      return MEMORY[0x263F8EE78];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

size_t sub_21F98787C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DateBins(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_21F76CA40(&qword_267EE83B0);
  MEMORY[0x270FA5388](v5 - 8);
  unint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DateBins.Storage(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (uint64_t *)((char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_21F9885F0(a1, (uint64_t)v10, type metadata accessor for DateBins.Storage);
  size_t result = swift_getEnumCaseMultiPayload();
  if (result)
  {
    if (result == 1)
    {
      uint64_t v12 = *(void *)((char *)v10 + *(int *)(sub_21F76CA40(&qword_26AD45E08) + 64));
      size_t result = sub_21F988658((uint64_t)v10, type metadata accessor for CalendarBinningUnit);
    }
    else
    {
      uint64_t v13 = *(void *)(*v10 + 16);
      size_t result = swift_bridgeObjectRelease();
      uint64_t v12 = v13 - 1;
    }
  }
  else
  {
    uint64_t v12 = v10[2];
  }
  if (v12 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (!v12) {
    return MEMORY[0x263F8EE78];
  }
  sub_21F76CA40(&qword_267EE99B8);
  uint64_t v14 = *(void *)(sub_21F76CA40(&qword_26AD47AA8) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  unint64_t v16 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (void *)swift_allocObject();
  size_t result = j__malloc_size(v17);
  if (!v15) {
    goto LABEL_18;
  }
  if (result - v16 != 0x8000000000000000 || v15 != -1)
  {
    v17[2] = v12;
    v17[3] = 2 * ((uint64_t)(result - v16) / v15);
    uint64_t v19 = *(void *)(sub_21F76CA40(&qword_26AD47AA8) - 8);
    uint64_t v20 = (uint64_t)v17 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    sub_21F9885F0(a1, (uint64_t)v4, type metadata accessor for DateBins);
    uint64_t v21 = sub_21F9EE6A0((uint64_t)v7, v20, v12);
    sub_21F76CA84((uint64_t)v7, &qword_267EE83B0);
    if (v21 == v12) {
      return (size_t)v17;
    }
    __break(1u);
    return MEMORY[0x263F8EE78];
  }
LABEL_19:
  __break(1u);
  return result;
}

void sub_21F987B68(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_11:
    __break(1u);
    return;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      if (v4 != a3)
      {
LABEL_7:
        sub_21F76CA40(&qword_267EE6FF0);
        swift_arrayInitWithCopy();
        return;
      }
    }
    else
    {
      sub_21F76CA40(&qword_267EE6FE8);
      unint64_t v7 = (void *)swift_allocObject();
      int64_t v8 = j__malloc_size(v7);
      uint64_t v9 = v8 - 32;
      if (v8 < 32) {
        uint64_t v9 = v8 - 25;
      }
      v7[2] = v5;
      v7[3] = 2 * (v9 >> 3);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
}

void sub_21F987C48(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    goto LABEL_14;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      if (v4 != a3) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_21F76CA40(&qword_267EE6FC0);
      uint64_t v7 = *(void *)(type metadata accessor for AnyVectorizedRenderer(0) - 8);
      uint64_t v8 = *(void *)(v7 + 72);
      unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      if (!v8)
      {
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
        return;
      }
      if (v11 - v9 == 0x8000000000000000 && v8 == -1) {
        goto LABEL_16;
      }
      void v10[2] = v5;
      v10[3] = 2 * ((uint64_t)(v11 - v9) / v8);
      if (v4 != a3)
      {
LABEL_10:
        type metadata accessor for AnyVectorizedRenderer(0);
        swift_arrayInitWithCopy();
        return;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
}

int64_t *sub_21F987DE0(int64_t *result, int64_t a2)
{
  int64_t v2 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    if (!v2) {
      return (int64_t *)MEMORY[0x263F8EE78];
    }
    int64_t v4 = (int64_t)result;
    if (v2 <= 0)
    {
      uint64_t v5 = (int64_t *)MEMORY[0x263F8EE78];
    }
    else
    {
      sub_21F76CA40(&qword_26AD4A480);
      uint64_t v5 = (int64_t *)swift_allocObject();
      int64_t v6 = j__malloc_size(v5);
      uint64_t v7 = v6 - 32;
      if (v6 < 32) {
        uint64_t v7 = v6 - 25;
      }
      _OWORD v5[2] = v2;
      v5[3] = 2 * (v7 >> 3);
    }
    size_t result = sub_21F9EEA2C(v8, v5 + 4, v2, v4, a2);
    if (result == (int64_t *)v2) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_21F987EA8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  sub_21F76CA40(&qword_26AD452F0);
  uint64_t v3 = swift_allocObject();
  size_t v4 = j__malloc_size((const void *)v3);
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = 2 * ((uint64_t)(v4 - 32) / 784);
  uint64_t v5 = sub_21F9EEB5C(&v7, (char *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_21F78AE20();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return MEMORY[0x263F8EE78];
  }
  return v3;
}

uint64_t sub_21F987FA4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  sub_21F76CA40(&qword_26AD46958);
  uint64_t v3 = swift_allocObject();
  size_t v4 = j__malloc_size((const void *)v3);
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = 2 * ((uint64_t)(v4 - 32) / 304);
  uint64_t v5 = sub_21F9EEF88(&v7, (char *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_21F78AE20();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return MEMORY[0x263F8EE78];
  }
  return v3;
}

uint64_t sub_21F9880A0(uint64_t a1, uint64_t a2)
{
  sub_21F7DF308(a1, (uint64_t)v8);
  sub_21F7DF308(a2, (uint64_t)v9);
  if ((v8[40] & 1) == 0)
  {
    sub_21F7DF308((uint64_t)v8, (uint64_t)v7);
    if ((v11 & 1) == 0)
    {
      char v3 = v7[0] == *(void *)&v9[0];
      goto LABEL_6;
    }
LABEL_8:
    sub_21F76CA84((uint64_t)v8, &qword_267EE74E0);
    char v3 = 0;
    return v3 & 1;
  }
  sub_21F7DF308((uint64_t)v8, (uint64_t)v7);
  if (v11 != 1)
  {
    sub_21F7DF260((uint64_t)v7);
    goto LABEL_8;
  }
  v5[0] = v9[0];
  v5[1] = v9[1];
  uint64_t v6 = v10;
  char v3 = MEMORY[0x223C558B0](v7, v5);
  sub_21F7DF260((uint64_t)v5);
  sub_21F7DF260((uint64_t)v7);
LABEL_6:
  sub_21F7DF364((uint64_t)v8);
  return v3 & 1;
}

uint64_t sub_21F988188(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21F76CA40(&qword_267EE77A8);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_21FA24F70();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F98A30C(a1, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_21F76CA84((uint64_t)v6, &qword_267EE77A8);
LABEL_10:
    sub_21F76CA40(qword_267EE7718);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_21FA28550;
    sub_21F7DF308(a2, v11 + 32);
    return v11;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  sub_21F7EB324();
  sub_21FA24F80();
  uint64_t v11 = *(void *)&v15[0];
  if (!*(void *)&v15[0])
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    goto LABEL_10;
  }
  sub_21F7DF308(a2, (uint64_t)v15);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v11 = (uint64_t)sub_21F7E9B8C(0, *(void *)(v11 + 16) + 1, 1, (char *)v11);
  }
  unint64_t v13 = *(void *)(v11 + 16);
  unint64_t v12 = *(void *)(v11 + 24);
  if (v13 >= v12 >> 1) {
    uint64_t v11 = (uint64_t)sub_21F7E9B8C((char *)(v12 > 1), v13 + 1, 1, (char *)v11);
  }
  *(void *)(v11 + 16) = v13 + 1;
  sub_21F8A5E44(v15, (_OWORD *)(v11 + 48 * v13 + 32));
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v11;
}

uint64_t sub_21F9883FC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ChartContentList.Item();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (uint64_t *)((char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (v6)
  {
    uint64_t v15 = MEMORY[0x263F8EE78];
    sub_21F7A241C(0, v6, 0);
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v9 = *(void *)(v3 + 72);
    uint64_t v7 = v15;
    do
    {
      sub_21F9885F0(v8, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ChartContentList.Item);
      uint64_t v10 = *v5;
      swift_bridgeObjectRetain();
      sub_21F988658((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ChartContentList.Item);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_21F7A241C(0, *(void *)(v7 + 16) + 1, 1);
        uint64_t v7 = v15;
      }
      unint64_t v12 = *(void *)(v7 + 16);
      unint64_t v11 = *(void *)(v7 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_21F7A241C((char *)(v11 > 1), v12 + 1, 1);
        uint64_t v7 = v15;
      }
      *(void *)(v7 + 16) = v12 + 1;
      *(void *)(v7 + 8 * v12 + 32) = v10;
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  sub_21F7C5EA8(v7);
  swift_bridgeObjectRelease();
  sub_21F7C5F78();
  sub_21FA26000();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21F9885F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_21F988658(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

ValueMetadata *_s10ChildIDKeyVMa()
{
  return &_s10ChildIDKeyVN;
}

ValueMetadata *type metadata accessor for ChartContentList.ID()
{
  return &type metadata for ChartContentList.ID;
}

uint64_t destroy for ChartContentList.ID.Component(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)a1 + 2;
  }
  if (v1 == 1) {
    return _s6Charts15AnyChartContentVwxx_0(a1);
  }
  return a1;
}

uint64_t initializeWithCopy for ChartContentList.ID.Component(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
    *(void *)a1 = *(void *)a2;
  }
  *(unsigned char *)(a1 + 40) = v5;
  return a1;
}

uint64_t assignWithCopy for ChartContentList.ID.Component(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      _s6Charts15AnyChartContentVwxx_0(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      char v7 = 1;
    }
    else
    {
      char v7 = 0;
      *(void *)a1 = *(void *)a2;
    }
    *(unsigned char *)(a1 + 40) = v7;
  }
  return a1;
}

uint64_t assignWithTake for ChartContentList.ID.Component(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      _s6Charts15AnyChartContentVwxx_0(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      char v7 = 1;
    }
    else
    {
      char v7 = 0;
      *(void *)a1 = *(void *)a2;
    }
    *(unsigned char *)(a1 + 40) = v7;
  }
  return a1;
}

ValueMetadata *type metadata accessor for ChartContentList.ID.Component()
{
  return &type metadata for ChartContentList.ID.Component;
}

uint64_t destroy for PointMark(uint64_t a1)
{
  return sub_21F765354(*(void *)(a1 + 288), *(void *)(a1 + 296), *(void *)(a1 + 304), *(void *)(a1 + 312), *(void *)(a1 + 320), *(void *)(a1 + 328), *(void *)(a1 + 336), *(void *)(a1 + 344), *(void *)(a1 + 352), *(void *)(a1 + 360), *(void *)(a1 + 368), *(void *)(a1 + 376), *(_OWORD *)(a1 + 384), *(void *)(a1 + 392), *(void *)(a1 + 400), *(void *)(a1 + 408), *(void *)(a1 + 416), *(void *)(a1 + 424));
}

uint64_t *initializeWithCopy for PointMark(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  uint64_t v11 = a2[7];
  uint64_t v30 = a2[8];
  uint64_t v32 = a2[9];
  uint64_t v35 = a2[10];
  uint64_t v38 = a2[11];
  uint64_t v41 = a2[12];
  uint64_t v44 = a2[13];
  uint64_t v47 = a2[14];
  uint64_t v50 = a2[15];
  uint64_t v53 = a2[16];
  unint64_t v56 = a2[17];
  sub_21F765124(*a2, v5, v6, v7, v8, v9, v10, v11, v30, v32, v35, v38, v41, v44, v47, v50, v53, v56);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  a1[7] = v11;
  a1[8] = v30;
  a1[9] = v32;
  a1[10] = v35;
  a1[11] = v38;
  a1[12] = v41;
  a1[13] = v44;
  a1[14] = v47;
  a1[15] = v50;
  a1[16] = v53;
  a1[17] = v56;
  uint64_t v12 = a2[18];
  uint64_t v13 = a2[19];
  uint64_t v14 = a2[20];
  uint64_t v15 = a2[21];
  uint64_t v16 = a2[22];
  uint64_t v17 = a2[23];
  uint64_t v18 = a2[24];
  uint64_t v19 = a2[25];
  uint64_t v31 = a2[26];
  uint64_t v33 = a2[27];
  uint64_t v36 = a2[28];
  uint64_t v39 = a2[29];
  uint64_t v42 = a2[30];
  uint64_t v45 = a2[31];
  uint64_t v48 = a2[32];
  uint64_t v51 = a2[33];
  uint64_t v54 = a2[34];
  unint64_t v57 = a2[35];
  sub_21F765124(v12, v13, v14, v15, v16, v17, v18, v19, v31, v33, v36, v39, v42, v45, v48, v51, v54, v57);
  a1[18] = v12;
  a1[19] = v13;
  a1[20] = v14;
  a1[21] = v15;
  a1[22] = v16;
  a1[23] = v17;
  a1[24] = v18;
  a1[25] = v19;
  a1[26] = v31;
  a1[27] = v33;
  a1[28] = v36;
  a1[29] = v39;
  a1[30] = v42;
  a1[31] = v45;
  a1[32] = v48;
  a1[33] = v51;
  a1[34] = v54;
  a1[35] = v57;
  uint64_t v20 = a2[36];
  uint64_t v21 = a2[37];
  uint64_t v22 = a2[38];
  uint64_t v23 = a2[39];
  uint64_t v24 = a2[40];
  uint64_t v25 = a2[41];
  uint64_t v26 = a2[42];
  uint64_t v27 = a2[43];
  uint64_t v34 = a2[45];
  uint64_t v37 = a2[46];
  uint64_t v40 = a2[47];
  uint64_t v43 = a2[48];
  uint64_t v46 = a2[49];
  uint64_t v49 = a2[50];
  uint64_t v52 = a2[51];
  uint64_t v55 = a2[52];
  unint64_t v58 = a2[53];
  uint64_t v28 = a2[44];
  sub_21F765124(v20, v21, v22, v23, v24, v25, v26, v27, v28, v34, v37, v40, v43, v46, v49, v52, v55, v58);
  a1[36] = v20;
  a1[37] = v21;
  a1[38] = v22;
  a1[39] = v23;
  a1[40] = v24;
  a1[41] = v25;
  a1[42] = v26;
  a1[43] = v27;
  a1[44] = v28;
  a1[45] = v34;
  a1[46] = v37;
  a1[47] = v40;
  a1[48] = v43;
  a1[49] = v46;
  a1[50] = v49;
  a1[51] = v52;
  a1[52] = v55;
  a1[53] = v58;
  return a1;
}

uint64_t assignWithCopy for PointMark(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  uint64_t v11 = a2[7];
  uint64_t v74 = a2[8];
  uint64_t v76 = a2[9];
  uint64_t v79 = a2[10];
  uint64_t v82 = a2[11];
  uint64_t v85 = a2[12];
  uint64_t v88 = a2[13];
  uint64_t v91 = a2[14];
  uint64_t v94 = a2[15];
  uint64_t v97 = a2[16];
  unint64_t v100 = a2[17];
  sub_21F765124(*a2, v5, v6, v7, v8, v9, v10, v11, v74, v76, v79, v82, v85, v88, v91, v94, v97, v100);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  uint64_t v24 = *(void *)(a1 + 128);
  unint64_t v25 = *(void *)(a1 + 136);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v74;
  *(void *)(a1 + 72) = v76;
  *(void *)(a1 + 80) = v79;
  *(void *)(a1 + 88) = v82;
  *(void *)(a1 + 96) = v85;
  *(void *)(a1 + 104) = v88;
  *(void *)(a1 + 112) = v91;
  *(void *)(a1 + 120) = v94;
  *(void *)(a1 + 128) = v97;
  *(void *)(a1 + 136) = v100;
  sub_21F765354(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, SBYTE8(v23), v24, v25);
  uint64_t v26 = a2[18];
  uint64_t v27 = a2[19];
  uint64_t v28 = a2[20];
  uint64_t v29 = a2[21];
  uint64_t v30 = a2[22];
  uint64_t v31 = a2[23];
  uint64_t v32 = a2[24];
  uint64_t v33 = a2[25];
  uint64_t v75 = a2[26];
  uint64_t v77 = a2[27];
  uint64_t v80 = a2[28];
  uint64_t v83 = a2[29];
  uint64_t v86 = a2[30];
  uint64_t v89 = a2[31];
  uint64_t v92 = a2[32];
  uint64_t v95 = a2[33];
  uint64_t v98 = a2[34];
  unint64_t v101 = a2[35];
  sub_21F765124(v26, v27, v28, v29, v30, v31, v32, v33, v75, v77, v80, v83, v86, v89, v92, v95, v98, v101);
  uint64_t v34 = *(void *)(a1 + 144);
  uint64_t v35 = *(void *)(a1 + 152);
  uint64_t v36 = *(void *)(a1 + 160);
  uint64_t v37 = *(void *)(a1 + 168);
  uint64_t v38 = *(void *)(a1 + 176);
  uint64_t v39 = *(void *)(a1 + 184);
  uint64_t v40 = *(void *)(a1 + 192);
  uint64_t v41 = *(void *)(a1 + 200);
  long long v42 = *(_OWORD *)(a1 + 208);
  long long v43 = *(_OWORD *)(a1 + 224);
  long long v44 = *(_OWORD *)(a1 + 240);
  long long v45 = *(_OWORD *)(a1 + 256);
  uint64_t v46 = *(void *)(a1 + 272);
  unint64_t v47 = *(void *)(a1 + 280);
  *(void *)(a1 + 144) = v26;
  *(void *)(a1 + 152) = v27;
  *(void *)(a1 + 160) = v28;
  *(void *)(a1 + 168) = v29;
  *(void *)(a1 + 176) = v30;
  *(void *)(a1 + 184) = v31;
  *(void *)(a1 + 192) = v32;
  *(void *)(a1 + 200) = v33;
  *(void *)(a1 + 208) = v75;
  *(void *)(a1 + 216) = v77;
  *(void *)(a1 + 224) = v80;
  *(void *)(a1 + 232) = v83;
  *(void *)(a1 + 240) = v86;
  *(void *)(a1 + 248) = v89;
  *(void *)(a1 + 256) = v92;
  *(void *)(a1 + 264) = v95;
  *(void *)(a1 + 272) = v98;
  *(void *)(a1 + 280) = v101;
  sub_21F765354(v34, v35, v36, v37, v38, v39, v40, v41, v42, *((uint64_t *)&v42 + 1), v43, *((uint64_t *)&v43 + 1), v44, *((uint64_t *)&v44 + 1), v45, SBYTE8(v45), v46, v47);
  uint64_t v48 = a2[36];
  uint64_t v49 = a2[37];
  uint64_t v50 = a2[38];
  uint64_t v51 = a2[39];
  uint64_t v52 = a2[40];
  uint64_t v53 = a2[41];
  uint64_t v54 = a2[42];
  uint64_t v55 = a2[43];
  uint64_t v78 = a2[44];
  uint64_t v81 = a2[45];
  uint64_t v84 = a2[46];
  uint64_t v87 = a2[47];
  uint64_t v90 = a2[48];
  uint64_t v56 = a2[51];
  uint64_t v93 = a2[49];
  uint64_t v96 = a2[50];
  uint64_t v57 = a2[52];
  unint64_t v58 = a2[53];
  uint64_t v99 = v56;
  uint64_t v102 = v57;
  sub_21F765124(v48, v49, v50, v51, v52, v53, v54, v55, v78, v81, v84, v87, v90, v93, v96, v56, v57, v58);
  uint64_t v59 = *(void *)(a1 + 288);
  uint64_t v60 = *(void *)(a1 + 296);
  uint64_t v61 = *(void *)(a1 + 304);
  uint64_t v62 = *(void *)(a1 + 312);
  uint64_t v63 = *(void *)(a1 + 320);
  uint64_t v64 = *(void *)(a1 + 328);
  uint64_t v65 = *(void *)(a1 + 336);
  uint64_t v66 = *(void *)(a1 + 344);
  long long v67 = *(_OWORD *)(a1 + 352);
  long long v68 = *(_OWORD *)(a1 + 368);
  long long v69 = *(_OWORD *)(a1 + 384);
  long long v70 = *(_OWORD *)(a1 + 400);
  uint64_t v71 = *(void *)(a1 + 416);
  unint64_t v72 = *(void *)(a1 + 424);
  *(void *)(a1 + 288) = v48;
  *(void *)(a1 + 296) = v49;
  *(void *)(a1 + 304) = v50;
  *(void *)(a1 + 312) = v51;
  *(void *)(a1 + 320) = v52;
  *(void *)(a1 + 328) = v53;
  *(void *)(a1 + 336) = v54;
  *(void *)(a1 + 344) = v55;
  *(void *)(a1 + 352) = v78;
  *(void *)(a1 + 360) = v81;
  *(void *)(a1 + 368) = v84;
  *(void *)(a1 + 376) = v87;
  *(void *)(a1 + 384) = v90;
  *(void *)(a1 + 392) = v93;
  *(void *)(a1 + 400) = v96;
  *(void *)(a1 + 408) = v99;
  *(void *)(a1 + 416) = v102;
  *(void *)(a1 + 424) = v58;
  sub_21F765354(v59, v60, v61, v62, v63, v64, v65, v66, v67, *((uint64_t *)&v67 + 1), v68, *((uint64_t *)&v68 + 1), v69, *((uint64_t *)&v69 + 1), v70, SBYTE8(v70), v71, v72);
  return a1;
}

void *initializeWithTake for PointMark(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1B0uLL);
}

uint64_t assignWithTake for PointMark(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  long long v12 = *(_OWORD *)(a1 + 64);
  long long v13 = *(_OWORD *)(a1 + 80);
  long long v14 = *(_OWORD *)(a1 + 96);
  long long v15 = *(_OWORD *)(a1 + 112);
  uint64_t v16 = *(void *)(a1 + 128);
  unint64_t v17 = *(void *)(a1 + 136);
  long long v18 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v18;
  long long v19 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v19;
  long long v20 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v20;
  long long v21 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v21;
  *(_OWORD *)(a1 + 128) = a2[8];
  sub_21F765354(v4, v5, v6, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, SBYTE8(v15), v16, v17);
  uint64_t v22 = *(void *)(a1 + 144);
  uint64_t v23 = *(void *)(a1 + 152);
  uint64_t v24 = *(void *)(a1 + 160);
  uint64_t v25 = *(void *)(a1 + 168);
  uint64_t v26 = *(void *)(a1 + 176);
  uint64_t v27 = *(void *)(a1 + 184);
  uint64_t v28 = *(void *)(a1 + 192);
  uint64_t v29 = *(void *)(a1 + 200);
  long long v30 = *(_OWORD *)(a1 + 208);
  long long v31 = *(_OWORD *)(a1 + 224);
  long long v32 = *(_OWORD *)(a1 + 240);
  long long v33 = *(_OWORD *)(a1 + 256);
  uint64_t v34 = *(void *)(a1 + 272);
  unint64_t v35 = *(void *)(a1 + 280);
  long long v36 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v36;
  long long v37 = a2[12];
  *(_OWORD *)(a1 + 176) = a2[11];
  *(_OWORD *)(a1 + 192) = v37;
  long long v38 = a2[14];
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_OWORD *)(a1 + 224) = v38;
  long long v39 = a2[16];
  *(_OWORD *)(a1 + 240) = a2[15];
  *(_OWORD *)(a1 + 256) = v39;
  *(_OWORD *)(a1 + 272) = a2[17];
  sub_21F765354(v22, v23, v24, v25, v26, v27, v28, v29, v30, *((uint64_t *)&v30 + 1), v31, *((uint64_t *)&v31 + 1), v32, *((uint64_t *)&v32 + 1), v33, SBYTE8(v33), v34, v35);
  uint64_t v40 = *(void *)(a1 + 288);
  uint64_t v41 = *(void *)(a1 + 296);
  uint64_t v42 = *(void *)(a1 + 304);
  uint64_t v43 = *(void *)(a1 + 312);
  uint64_t v44 = *(void *)(a1 + 320);
  uint64_t v45 = *(void *)(a1 + 328);
  uint64_t v46 = *(void *)(a1 + 336);
  uint64_t v47 = *(void *)(a1 + 344);
  long long v48 = *(_OWORD *)(a1 + 352);
  long long v49 = *(_OWORD *)(a1 + 368);
  long long v50 = *(_OWORD *)(a1 + 384);
  long long v51 = *(_OWORD *)(a1 + 400);
  uint64_t v52 = *(void *)(a1 + 416);
  unint64_t v53 = *(void *)(a1 + 424);
  long long v54 = a2[19];
  *(_OWORD *)(a1 + 288) = a2[18];
  *(_OWORD *)(a1 + 304) = v54;
  long long v55 = a2[21];
  *(_OWORD *)(a1 + 320) = a2[20];
  *(_OWORD *)(a1 + 336) = v55;
  long long v56 = a2[23];
  *(_OWORD *)(a1 + 352) = a2[22];
  *(_OWORD *)(a1 + 368) = v56;
  long long v57 = a2[25];
  *(_OWORD *)(a1 + 384) = a2[24];
  *(_OWORD *)(a1 + 400) = v57;
  *(_OWORD *)(a1 + 416) = a2[26];
  sub_21F765354(v40, v41, v42, v43, v44, v45, v46, v47, v48, *((uint64_t *)&v48 + 1), v49, *((uint64_t *)&v49 + 1), v50, *((uint64_t *)&v50 + 1), v51, SBYTE8(v51), v52, v53);
  return a1;
}

uint64_t getEnumTagSinglePayload for PointMark(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 432)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = (*(void *)(a1 + 48) >> 3) & 0xFFFFFFE0 | (*(void *)(a1 + 48) >> 2) & 0x1F;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for PointMark(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 424) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 408) = 0u;
    *(_OWORD *)(a1 + 392) = 0u;
    *(_OWORD *)(a1 + 376) = 0u;
    *(_OWORD *)(a1 + 360) = 0u;
    *(_OWORD *)(a1 + 344) = 0u;
    *(_OWORD *)(a1 + 328) = 0u;
    *(_OWORD *)(a1 + 312) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 432) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(void *)(a1 + 48) = (8 * -a2) & 0x7FFFFFF00 | (4 * (-a2 & 0x1FLL));
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      *(void *)(a1 + 136) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 432) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartContentList.Item.Content()
{
  return &type metadata for ChartContentList.Item.Content;
}

uint64_t sub_21F989220(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    uint64_t v53 = a2[2];
    uint64_t v47 = a2[3];
    uint64_t v41 = a2[5];
    uint64_t v44 = a2[4];
    uint64_t v37 = a2[7];
    uint64_t v38 = a2[6];
    uint64_t v36 = a2[8];
    uint64_t v50 = a2[9];
    uint64_t v7 = a2[12];
    uint64_t v61 = a2[11];
    uint64_t v64 = a2[10];
    uint64_t v8 = a2[13];
    uint64_t v9 = a2[14];
    uint64_t v10 = a2[15];
    uint64_t v11 = a2[16];
    uint64_t v12 = a2[17];
    uint64_t v13 = a2[18];
    unint64_t v14 = a2[19];
    swift_bridgeObjectRetain();
    sub_21F765124(v53, v47, v44, v41, v38, v37, v36, v50, v64, v61, v7, v8, v9, v10, v11, v12, v13, v14);
    *(void *)(a1 + 16) = v53;
    *(void *)(a1 + 24) = v47;
    *(void *)(a1 + 32) = v44;
    *(void *)(a1 + 40) = v41;
    *(void *)(a1 + 48) = v38;
    *(void *)(a1 + 56) = v37;
    *(void *)(a1 + 64) = v36;
    *(void *)(a1 + 72) = v50;
    *(void *)(a1 + 80) = v64;
    *(void *)(a1 + 88) = v61;
    *(void *)(a1 + 96) = v7;
    *(void *)(a1 + 104) = v8;
    *(void *)(a1 + 112) = v9;
    *(void *)(a1 + 120) = v10;
    *(void *)(a1 + 128) = v11;
    *(void *)(a1 + 136) = v12;
    *(void *)(a1 + 144) = v13;
    *(void *)(a1 + 152) = v14;
    uint64_t v15 = a2[20];
    uint64_t v16 = a2[21];
    uint64_t v17 = a2[22];
    uint64_t v18 = a2[23];
    uint64_t v19 = a2[24];
    uint64_t v20 = a2[25];
    uint64_t v21 = a2[26];
    uint64_t v22 = a2[27];
    uint64_t v39 = a2[28];
    uint64_t v42 = a2[29];
    uint64_t v45 = a2[30];
    uint64_t v48 = a2[31];
    uint64_t v51 = a2[32];
    uint64_t v54 = a2[33];
    uint64_t v56 = a2[34];
    uint64_t v58 = a2[35];
    uint64_t v62 = a2[36];
    unint64_t v65 = a2[37];
    sub_21F765124(v15, v16, v17, v18, v19, v20, v21, v22, v39, v42, v45, v48, v51, v54, v56, v58, v62, v65);
    *(void *)(a1 + 160) = v15;
    *(void *)(a1 + 168) = v16;
    *(void *)(a1 + 176) = v17;
    *(void *)(a1 + 184) = v18;
    *(void *)(a1 + 192) = v19;
    *(void *)(a1 + 200) = v20;
    *(void *)(a1 + 208) = v21;
    *(void *)(a1 + 216) = v22;
    *(void *)(a1 + 224) = v39;
    *(void *)(a1 + 232) = v42;
    *(void *)(a1 + 240) = v45;
    *(void *)(a1 + 248) = v48;
    *(void *)(a1 + 256) = v51;
    *(void *)(a1 + 264) = v54;
    *(void *)(a1 + 272) = v56;
    *(void *)(a1 + 280) = v58;
    *(void *)(a1 + 288) = v62;
    *(void *)(a1 + 296) = v65;
    uint64_t v23 = a2[38];
    uint64_t v24 = a2[39];
    uint64_t v25 = a2[40];
    uint64_t v26 = a2[41];
    uint64_t v27 = a2[42];
    uint64_t v28 = a2[43];
    uint64_t v29 = a2[44];
    uint64_t v30 = a2[45];
    uint64_t v40 = a2[46];
    uint64_t v43 = a2[47];
    uint64_t v46 = a2[48];
    uint64_t v49 = a2[49];
    uint64_t v52 = a2[50];
    uint64_t v55 = a2[51];
    uint64_t v57 = a2[52];
    uint64_t v59 = a2[53];
    uint64_t v63 = a2[54];
    unint64_t v66 = a2[55];
    sub_21F765124(v23, v24, v25, v26, v27, v28, v29, v30, v40, v43, v46, v49, v52, v55, v57, v59, v63, v66);
    *(void *)(a1 + 304) = v23;
    *(void *)(a1 + 312) = v24;
    *(void *)(a1 + 320) = v25;
    *(void *)(a1 + 328) = v26;
    *(void *)(a1 + 336) = v27;
    *(void *)(a1 + 344) = v28;
    *(void *)(a1 + 352) = v29;
    *(void *)(a1 + 360) = v30;
    *(void *)(a1 + 368) = v40;
    *(void *)(a1 + 376) = v43;
    *(void *)(a1 + 384) = v46;
    *(void *)(a1 + 392) = v49;
    *(void *)(a1 + 400) = v52;
    *(void *)(a1 + 408) = v55;
    *(void *)(a1 + 416) = v57;
    *(void *)(a1 + 424) = v59;
    uint64_t v31 = *(int *)(a3 + 28);
    uint64_t v32 = a1 + v31;
    uint64_t v33 = (uint64_t)a2 + v31;
    *(void *)(a1 + 432) = v63;
    *(void *)(a1 + 440) = v66;
    uint64_t v34 = sub_21FA24F70();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 16))(v32, v33, v34);
  }
  return a1;
}

uint64_t sub_21F9895CC(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  sub_21F765354(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(_OWORD *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(a1 + 152));
  sub_21F765354(*(void *)(a1 + 160), *(void *)(a1 + 168), *(void *)(a1 + 176), *(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)(a1 + 200), *(void *)(a1 + 208), *(void *)(a1 + 216), *(void *)(a1 + 224), *(void *)(a1 + 232), *(void *)(a1 + 240), *(void *)(a1 + 248), *(_OWORD *)(a1 + 256), *(void *)(a1 + 264), *(void *)(a1 + 272), *(void *)(a1 + 280), *(void *)(a1 + 288), *(void *)(a1 + 296));
  sub_21F765354(*(void *)(a1 + 304), *(void *)(a1 + 312), *(void *)(a1 + 320), *(void *)(a1 + 328), *(void *)(a1 + 336), *(void *)(a1 + 344), *(void *)(a1 + 352), *(void *)(a1 + 360), *(void *)(a1 + 368), *(void *)(a1 + 376), *(void *)(a1 + 384), *(void *)(a1 + 392), *(_OWORD *)(a1 + 400), *(void *)(a1 + 408), *(void *)(a1 + 416), *(void *)(a1 + 424), *(void *)(a1 + 432), *(void *)(a1 + 440));
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = sub_21FA24F70();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_21F9896D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v51 = *(void *)(a2 + 16);
  uint64_t v45 = *(void *)(a2 + 24);
  uint64_t v39 = *(void *)(a2 + 40);
  uint64_t v42 = *(void *)(a2 + 32);
  uint64_t v35 = *(void *)(a2 + 56);
  uint64_t v36 = *(void *)(a2 + 48);
  uint64_t v34 = *(void *)(a2 + 64);
  uint64_t v48 = *(void *)(a2 + 72);
  uint64_t v5 = *(void *)(a2 + 96);
  uint64_t v59 = *(void *)(a2 + 88);
  uint64_t v62 = *(void *)(a2 + 80);
  uint64_t v6 = *(void *)(a2 + 104);
  uint64_t v7 = *(void *)(a2 + 112);
  uint64_t v8 = *(void *)(a2 + 120);
  uint64_t v9 = *(void *)(a2 + 128);
  uint64_t v10 = *(void *)(a2 + 136);
  uint64_t v11 = *(void *)(a2 + 144);
  unint64_t v12 = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  sub_21F765124(v51, v45, v42, v39, v36, v35, v34, v48, v62, v59, v5, v6, v7, v8, v9, v10, v11, v12);
  *(void *)(a1 + 16) = v51;
  *(void *)(a1 + 24) = v45;
  *(void *)(a1 + 32) = v42;
  *(void *)(a1 + 40) = v39;
  *(void *)(a1 + 48) = v36;
  *(void *)(a1 + 56) = v35;
  *(void *)(a1 + 64) = v34;
  *(void *)(a1 + 72) = v48;
  *(void *)(a1 + 80) = v62;
  *(void *)(a1 + 88) = v59;
  *(void *)(a1 + 96) = v5;
  *(void *)(a1 + 104) = v6;
  *(void *)(a1 + 112) = v7;
  *(void *)(a1 + 120) = v8;
  *(void *)(a1 + 128) = v9;
  *(void *)(a1 + 136) = v10;
  *(void *)(a1 + 144) = v11;
  *(void *)(a1 + 152) = v12;
  uint64_t v13 = *(void *)(a2 + 160);
  uint64_t v14 = *(void *)(a2 + 168);
  uint64_t v15 = *(void *)(a2 + 176);
  uint64_t v16 = *(void *)(a2 + 184);
  uint64_t v17 = *(void *)(a2 + 192);
  uint64_t v18 = *(void *)(a2 + 200);
  uint64_t v19 = *(void *)(a2 + 208);
  uint64_t v20 = *(void *)(a2 + 216);
  uint64_t v37 = *(void *)(a2 + 224);
  uint64_t v40 = *(void *)(a2 + 232);
  uint64_t v43 = *(void *)(a2 + 240);
  uint64_t v46 = *(void *)(a2 + 248);
  uint64_t v49 = *(void *)(a2 + 256);
  uint64_t v52 = *(void *)(a2 + 264);
  uint64_t v54 = *(void *)(a2 + 272);
  uint64_t v56 = *(void *)(a2 + 280);
  uint64_t v60 = *(void *)(a2 + 288);
  unint64_t v63 = *(void *)(a2 + 296);
  sub_21F765124(v13, v14, v15, v16, v17, v18, v19, v20, v37, v40, v43, v46, v49, v52, v54, v56, v60, v63);
  *(void *)(a1 + 160) = v13;
  *(void *)(a1 + 168) = v14;
  *(void *)(a1 + 176) = v15;
  *(void *)(a1 + 184) = v16;
  *(void *)(a1 + 192) = v17;
  *(void *)(a1 + 200) = v18;
  *(void *)(a1 + 208) = v19;
  *(void *)(a1 + 216) = v20;
  *(void *)(a1 + 224) = v37;
  *(void *)(a1 + 232) = v40;
  *(void *)(a1 + 240) = v43;
  *(void *)(a1 + 248) = v46;
  *(void *)(a1 + 256) = v49;
  *(void *)(a1 + 264) = v52;
  *(void *)(a1 + 272) = v54;
  *(void *)(a1 + 280) = v56;
  *(void *)(a1 + 288) = v60;
  *(void *)(a1 + 296) = v63;
  uint64_t v21 = *(void *)(a2 + 304);
  uint64_t v22 = *(void *)(a2 + 312);
  uint64_t v23 = *(void *)(a2 + 320);
  uint64_t v24 = *(void *)(a2 + 328);
  uint64_t v25 = *(void *)(a2 + 336);
  uint64_t v26 = *(void *)(a2 + 344);
  uint64_t v27 = *(void *)(a2 + 352);
  uint64_t v28 = *(void *)(a2 + 360);
  uint64_t v38 = *(void *)(a2 + 368);
  uint64_t v41 = *(void *)(a2 + 376);
  uint64_t v44 = *(void *)(a2 + 384);
  uint64_t v47 = *(void *)(a2 + 392);
  uint64_t v50 = *(void *)(a2 + 400);
  uint64_t v53 = *(void *)(a2 + 408);
  uint64_t v55 = *(void *)(a2 + 416);
  uint64_t v57 = *(void *)(a2 + 424);
  uint64_t v61 = *(void *)(a2 + 432);
  unint64_t v64 = *(void *)(a2 + 440);
  sub_21F765124(v21, v22, v23, v24, v25, v26, v27, v28, v38, v41, v44, v47, v50, v53, v55, v57, v61, v64);
  *(void *)(a1 + 304) = v21;
  *(void *)(a1 + 312) = v22;
  *(void *)(a1 + 320) = v23;
  *(void *)(a1 + 328) = v24;
  *(void *)(a1 + 336) = v25;
  *(void *)(a1 + 344) = v26;
  *(void *)(a1 + 352) = v27;
  *(void *)(a1 + 360) = v28;
  *(void *)(a1 + 368) = v38;
  *(void *)(a1 + 376) = v41;
  *(void *)(a1 + 384) = v44;
  *(void *)(a1 + 392) = v47;
  *(void *)(a1 + 400) = v50;
  *(void *)(a1 + 408) = v53;
  *(void *)(a1 + 416) = v55;
  *(void *)(a1 + 424) = v57;
  uint64_t v29 = *(int *)(a3 + 28);
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  *(void *)(a1 + 432) = v61;
  *(void *)(a1 + 440) = v64;
  uint64_t v32 = sub_21FA24F70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
  return a1;
}

uint64_t sub_21F989A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v12 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v76 = *(void *)(a2 + 80);
  uint64_t v79 = *(void *)(a2 + 88);
  uint64_t v82 = *(void *)(a2 + 96);
  uint64_t v85 = *(void *)(a2 + 104);
  uint64_t v88 = *(void *)(a2 + 112);
  uint64_t v91 = *(void *)(a2 + 120);
  uint64_t v94 = *(void *)(a2 + 128);
  uint64_t v97 = *(void *)(a2 + 136);
  uint64_t v100 = *(void *)(a2 + 144);
  unint64_t v103 = *(void *)(a2 + 152);
  sub_21F765124(v5, v6, v7, v8, v9, v10, v12, v11, v76, v79, v82, v85, v88, v91, v94, v97, v100, v103);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 48);
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v19 = *(void *)(a1 + 64);
  uint64_t v20 = *(void *)(a1 + 72);
  long long v21 = *(_OWORD *)(a1 + 80);
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  long long v24 = *(_OWORD *)(a1 + 128);
  uint64_t v25 = *(void *)(a1 + 144);
  unint64_t v26 = *(void *)(a1 + 152);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = v76;
  *(void *)(a1 + 88) = v79;
  *(void *)(a1 + 96) = v82;
  *(void *)(a1 + 104) = v85;
  *(void *)(a1 + 112) = v88;
  *(void *)(a1 + 120) = v91;
  *(void *)(a1 + 128) = v94;
  *(void *)(a1 + 136) = v97;
  *(void *)(a1 + 144) = v100;
  *(void *)(a1 + 152) = v103;
  sub_21F765354(v13, v14, v15, v16, v17, v18, v19, v20, v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, SBYTE8(v24), v25, v26);
  uint64_t v27 = *(void *)(a2 + 160);
  uint64_t v28 = *(void *)(a2 + 168);
  uint64_t v29 = *(void *)(a2 + 176);
  uint64_t v30 = *(void *)(a2 + 184);
  uint64_t v31 = *(void *)(a2 + 192);
  uint64_t v32 = *(void *)(a2 + 200);
  uint64_t v33 = *(void *)(a2 + 208);
  uint64_t v34 = *(void *)(a2 + 216);
  uint64_t v77 = *(void *)(a2 + 224);
  uint64_t v80 = *(void *)(a2 + 232);
  uint64_t v83 = *(void *)(a2 + 240);
  uint64_t v86 = *(void *)(a2 + 248);
  uint64_t v89 = *(void *)(a2 + 256);
  uint64_t v92 = *(void *)(a2 + 264);
  uint64_t v95 = *(void *)(a2 + 272);
  uint64_t v98 = *(void *)(a2 + 280);
  uint64_t v101 = *(void *)(a2 + 288);
  unint64_t v104 = *(void *)(a2 + 296);
  sub_21F765124(v27, v28, v29, v30, v31, v32, v33, v34, v77, v80, v83, v86, v89, v92, v95, v98, v101, v104);
  uint64_t v35 = *(void *)(a1 + 160);
  uint64_t v36 = *(void *)(a1 + 168);
  uint64_t v37 = *(void *)(a1 + 176);
  uint64_t v38 = *(void *)(a1 + 184);
  uint64_t v39 = *(void *)(a1 + 192);
  uint64_t v40 = *(void *)(a1 + 200);
  uint64_t v41 = *(void *)(a1 + 208);
  uint64_t v42 = *(void *)(a1 + 216);
  long long v43 = *(_OWORD *)(a1 + 224);
  long long v44 = *(_OWORD *)(a1 + 240);
  long long v45 = *(_OWORD *)(a1 + 256);
  long long v46 = *(_OWORD *)(a1 + 272);
  uint64_t v47 = *(void *)(a1 + 288);
  unint64_t v48 = *(void *)(a1 + 296);
  *(void *)(a1 + 160) = v27;
  *(void *)(a1 + 168) = v28;
  *(void *)(a1 + 176) = v29;
  *(void *)(a1 + 184) = v30;
  *(void *)(a1 + 192) = v31;
  *(void *)(a1 + 200) = v32;
  *(void *)(a1 + 208) = v33;
  *(void *)(a1 + 216) = v34;
  *(void *)(a1 + 224) = v77;
  *(void *)(a1 + 232) = v80;
  *(void *)(a1 + 240) = v83;
  *(void *)(a1 + 248) = v86;
  *(void *)(a1 + 256) = v89;
  *(void *)(a1 + 264) = v92;
  *(void *)(a1 + 272) = v95;
  *(void *)(a1 + 280) = v98;
  *(void *)(a1 + 288) = v101;
  *(void *)(a1 + 296) = v104;
  sub_21F765354(v35, v36, v37, v38, v39, v40, v41, v42, v43, *((uint64_t *)&v43 + 1), v44, *((uint64_t *)&v44 + 1), v45, *((uint64_t *)&v45 + 1), v46, SBYTE8(v46), v47, v48);
  uint64_t v49 = *(void *)(a2 + 304);
  uint64_t v50 = *(void *)(a2 + 312);
  uint64_t v51 = *(void *)(a2 + 320);
  uint64_t v52 = *(void *)(a2 + 328);
  uint64_t v53 = *(void *)(a2 + 336);
  uint64_t v54 = *(void *)(a2 + 344);
  uint64_t v55 = *(void *)(a2 + 352);
  uint64_t v56 = *(void *)(a2 + 360);
  uint64_t v78 = *(void *)(a2 + 368);
  uint64_t v81 = *(void *)(a2 + 376);
  uint64_t v84 = *(void *)(a2 + 384);
  uint64_t v87 = *(void *)(a2 + 392);
  uint64_t v90 = *(void *)(a2 + 400);
  uint64_t v93 = *(void *)(a2 + 408);
  uint64_t v96 = *(void *)(a2 + 416);
  uint64_t v99 = *(void *)(a2 + 424);
  uint64_t v102 = *(void *)(a2 + 432);
  unint64_t v105 = *(void *)(a2 + 440);
  sub_21F765124(v49, v50, v51, v52, v53, v54, v55, v56, v78, v81, v84, v87, v90, v93, v96, v99, v102, v105);
  uint64_t v57 = *(void *)(a1 + 304);
  uint64_t v58 = *(void *)(a1 + 312);
  uint64_t v59 = *(void *)(a1 + 320);
  uint64_t v60 = *(void *)(a1 + 328);
  uint64_t v61 = *(void *)(a1 + 336);
  uint64_t v62 = *(void *)(a1 + 344);
  uint64_t v63 = *(void *)(a1 + 352);
  uint64_t v64 = *(void *)(a1 + 360);
  long long v65 = *(_OWORD *)(a1 + 368);
  long long v66 = *(_OWORD *)(a1 + 384);
  long long v67 = *(_OWORD *)(a1 + 400);
  long long v68 = *(_OWORD *)(a1 + 416);
  uint64_t v69 = *(void *)(a1 + 432);
  unint64_t v70 = *(void *)(a1 + 440);
  *(void *)(a1 + 304) = v49;
  *(void *)(a1 + 312) = v50;
  *(void *)(a1 + 320) = v51;
  *(void *)(a1 + 328) = v52;
  *(void *)(a1 + 336) = v53;
  *(void *)(a1 + 344) = v54;
  *(void *)(a1 + 352) = v55;
  *(void *)(a1 + 360) = v56;
  *(void *)(a1 + 368) = v78;
  *(void *)(a1 + 376) = v81;
  *(void *)(a1 + 384) = v84;
  *(void *)(a1 + 392) = v87;
  *(void *)(a1 + 400) = v90;
  *(void *)(a1 + 408) = v93;
  *(void *)(a1 + 416) = v96;
  *(void *)(a1 + 424) = v99;
  *(void *)(a1 + 432) = v102;
  *(void *)(a1 + 440) = v105;
  sub_21F765354(v57, v58, v59, v60, v61, v62, v63, v64, v65, *((uint64_t *)&v65 + 1), v66, *((uint64_t *)&v66 + 1), v67, *((uint64_t *)&v67 + 1), v68, SBYTE8(v68), v69, v70);
  uint64_t v71 = *(int *)(a3 + 28);
  uint64_t v72 = a1 + v71;
  uint64_t v73 = a2 + v71;
  uint64_t v74 = sub_21FA24F70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 24))(v72, v73, v74);
  return a1;
}

uint64_t sub_21F989DF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  memcpy((void *)(a1 + 16), (const void *)(a2 + 16), 0x1B0uLL);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_21FA24F70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t sub_21F989E90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 72);
  long long v14 = *(_OWORD *)(a1 + 80);
  long long v15 = *(_OWORD *)(a1 + 96);
  long long v16 = *(_OWORD *)(a1 + 112);
  long long v17 = *(_OWORD *)(a1 + 128);
  uint64_t v18 = *(void *)(a1 + 144);
  unint64_t v19 = *(void *)(a1 + 152);
  long long v20 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v20;
  long long v21 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v21;
  long long v22 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v22;
  long long v23 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v23;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  sub_21F765354(v6, v7, v8, v9, v10, v11, v12, v13, v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, SBYTE8(v17), v18, v19);
  uint64_t v24 = *(void *)(a1 + 160);
  uint64_t v25 = *(void *)(a1 + 168);
  uint64_t v26 = *(void *)(a1 + 176);
  uint64_t v27 = *(void *)(a1 + 184);
  uint64_t v28 = *(void *)(a1 + 192);
  uint64_t v29 = *(void *)(a1 + 200);
  uint64_t v30 = *(void *)(a1 + 208);
  uint64_t v31 = *(void *)(a1 + 216);
  long long v32 = *(_OWORD *)(a1 + 224);
  long long v33 = *(_OWORD *)(a1 + 240);
  long long v34 = *(_OWORD *)(a1 + 256);
  long long v35 = *(_OWORD *)(a1 + 272);
  uint64_t v36 = *(void *)(a1 + 288);
  unint64_t v37 = *(void *)(a1 + 296);
  long long v38 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v38;
  long long v39 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v39;
  long long v40 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v40;
  long long v41 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v41;
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  sub_21F765354(v24, v25, v26, v27, v28, v29, v30, v31, v32, *((uint64_t *)&v32 + 1), v33, *((uint64_t *)&v33 + 1), v34, *((uint64_t *)&v34 + 1), v35, SBYTE8(v35), v36, v37);
  uint64_t v42 = *(void *)(a1 + 304);
  uint64_t v43 = *(void *)(a1 + 312);
  uint64_t v44 = *(void *)(a1 + 320);
  uint64_t v45 = *(void *)(a1 + 328);
  uint64_t v46 = *(void *)(a1 + 336);
  uint64_t v47 = *(void *)(a1 + 344);
  uint64_t v48 = *(void *)(a1 + 352);
  uint64_t v49 = *(void *)(a1 + 360);
  long long v50 = *(_OWORD *)(a1 + 368);
  long long v51 = *(_OWORD *)(a1 + 384);
  long long v52 = *(_OWORD *)(a1 + 400);
  long long v53 = *(_OWORD *)(a1 + 416);
  uint64_t v54 = *(void *)(a1 + 432);
  unint64_t v55 = *(void *)(a1 + 440);
  long long v56 = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = v56;
  long long v57 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v57;
  long long v58 = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = v58;
  long long v59 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v59;
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  sub_21F765354(v42, v43, v44, v45, v46, v47, v48, v49, v50, *((uint64_t *)&v50 + 1), v51, *((uint64_t *)&v51 + 1), v52, *((uint64_t *)&v52 + 1), v53, SBYTE8(v53), v54, v55);
  uint64_t v60 = *(int *)(a3 + 28);
  uint64_t v61 = a1 + v60;
  uint64_t v62 = a2 + v60;
  uint64_t v63 = sub_21FA24F70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 40))(v61, v62, v63);
  return a1;
}

uint64_t sub_21F98A028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F98A03C);
}

uint64_t sub_21F98A03C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_21FA24F70();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_21F98A0EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F98A100);
}

void *sub_21F98A100(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *double result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_21FA24F70();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_21F98A1A8()
{
  uint64_t result = sub_21FA24F70();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_21F98A260()
{
  unint64_t result = qword_267EE99D0;
  if (!qword_267EE99D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE99D0);
  }
  return result;
}

unint64_t sub_21F98A2B8()
{
  unint64_t result = qword_267EE99D8;
  if (!qword_267EE99D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE99D8);
  }
  return result;
}

uint64_t sub_21F98A30C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21F76CA40(&qword_267EE77A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for ChartContentList.IDGenerator()
{
  return &type metadata for ChartContentList.IDGenerator;
}

unint64_t sub_21F98A388()
{
  unint64_t result = qword_267EE99E0[0];
  if (!qword_267EE99E0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_267EE99E0);
  }
  return result;
}

void *BarMark.init<A, B>(xStart:xEnd:y:height:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  sub_21F9D598C(a1, a2, a6, a8, (uint64_t)v22);
  sub_21F764AF8((uint64_t)v22, (uint64_t)v21);
  sub_21F9D5E34(a3, a4, a5, a7, a10, (uint64_t)v23);
  sub_21F764AF8((uint64_t)v23, (uint64_t)v24);
  uint64_t v17 = type metadata accessor for PlottableValue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a3, v17);
  uint64_t v18 = type metadata accessor for PlottableValue();
  unint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8);
  v19(a2, v18);
  v19(a1, v18);
  sub_21F764AF8((uint64_t)v21, (uint64_t)v25);
  sub_21F764AF8((uint64_t)v25, (uint64_t)__src);
  sub_21F764AF8((uint64_t)v24, (uint64_t)&__src[144]);
  return memcpy(a9, __src, 0x120uLL);
}

void *BarMark.init<A, B>(x:yStart:yEnd:width:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  sub_21F9D5E34(a1, a4, a5, a6, a8, (uint64_t)v20);
  sub_21F764AF8((uint64_t)v20, (uint64_t)v19);
  sub_21F9D598C(a2, a3, a7, a10, (uint64_t)v21);
  sub_21F764AF8((uint64_t)v21, (uint64_t)v22);
  uint64_t v15 = type metadata accessor for PlottableValue();
  long long v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8);
  v16(a3, v15);
  v16(a2, v15);
  uint64_t v17 = type metadata accessor for PlottableValue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a1, v17);
  sub_21F764AF8((uint64_t)v19, (uint64_t)v23);
  sub_21F764AF8((uint64_t)v23, (uint64_t)__src);
  sub_21F764AF8((uint64_t)v22, (uint64_t)&__src[144]);
  return memcpy(a9, __src, 0x120uLL);
}

void *BarMark.init<A>(x:yStart:yEnd:width:stacking:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, void *a9@<X8>, uint64_t a10, uint64_t a11)
{
  int v26 = a8;
  int v28 = a7;
  uint64_t v27 = a6;
  int v36 = a5;
  uint64_t v35 = a4;
  int v34 = a3;
  uint64_t v33 = a2;
  unint64_t v37 = a9;
  uint64_t v12 = type metadata accessor for PlottableValue();
  uint64_t v13 = *(void *)(v12 - 8);
  __n128 v14 = MEMORY[0x270FA5388](v12);
  long long v16 = &v25[-v15];
  uint64_t v17 = *(void (**)(unsigned char *, uint64_t, uint64_t, __n128))(v13 + 16);
  uint64_t v32 = a1;
  v17(&v25[-v15], a1, v12, v14);
  sub_21F764B80((uint64_t)v16, a10, a11, (uint64_t)v62);
  uint64_t v19 = v62[0];
  uint64_t v18 = v62[1];
  char v20 = v63;
  uint64_t v21 = v65;
  uint64_t v22 = v66;
  char v23 = v67;
  uint64_t v29 = v64;
  uint64_t v30 = v68;
  uint64_t v31 = v69;
  if ((v67 & 0x80000000) == 0)
  {
    if (!v67)
    {
      sub_21F770E38(v65, v66, 0);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v32, v12);
      char v41 = v20;
      uint64_t v43 = v19;
      uint64_t v44 = v18;
      char v45 = v20;
      *(_DWORD *)uint64_t v46 = *(_DWORD *)v40;
      *(_DWORD *)&v46[3] = *(_DWORD *)&v40[3];
      uint64_t v47 = v29;
      uint64_t v48 = v21;
      uint64_t v49 = v22;
      char v50 = 0;
      *(_DWORD *)long long v51 = *(_DWORD *)v39;
      *(_DWORD *)&_OWORD v51[3] = *(_DWORD *)&v39[3];
      uint64_t v52 = v30;
      uint64_t v53 = v31;
      LOBYTE(v54) = v26;
      *(_WORD *)((char *)&v54 + 1) = 0;
      *(_DWORD *)((char *)&v54 + 3) = *(_DWORD *)&v38[7];
      HIBYTE(v54) = v38[11];
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      char v57 = 0;
      *(_DWORD *)long long v58 = *(_DWORD *)v38;
      *(_DWORD *)&v58[3] = *(_DWORD *)&v38[3];
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      char v61 = -4;
      sub_21F76CE2C((uint64_t)&v43);
      goto LABEL_7;
    }
    if (v67 == 1) {
      sub_21F770E38(v65, v66, 1);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v32, v12);
  uint64_t v43 = v19;
  uint64_t v44 = v18;
  char v45 = v20;
  uint64_t v47 = v29;
  uint64_t v48 = v21;
  uint64_t v49 = v22;
  char v50 = v23;
  uint64_t v52 = v30;
  uint64_t v53 = v31;
  uint64_t v54 = v27;
  LOBYTE(v55) = v28;
  sub_21F76CE78((uint64_t)&v43);
LABEL_7:
  v42[0] = v33;
  LOBYTE(v42[1]) = v34 & 1;
  v42[2] = v35;
  LOBYTE(v42[3]) = v36 & 1;
  sub_21F7BC014((uint64_t)v42);
  sub_21F764AF8((uint64_t)v42, (uint64_t)v70);
  sub_21F764AF8((uint64_t)&v43, (uint64_t)v71);
  sub_21F764AF8((uint64_t)v71, (uint64_t)v42);
  sub_21F764AF8((uint64_t)v70, (uint64_t)&v42[18]);
  return memcpy(v37, v42, 0x120uLL);
}

void *BarMark.init<A>(xStart:xEnd:y:height:stacking:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, void *a9@<X8>, uint64_t a10, uint64_t a11)
{
  int v24 = a8;
  int v26 = a7;
  uint64_t v25 = a6;
  int v34 = a4;
  uint64_t v33 = a3;
  int v32 = a2;
  uint64_t v31 = a1;
  uint64_t v35 = a9;
  uint64_t v12 = type metadata accessor for PlottableValue();
  uint64_t v13 = *(void *)(v12 - 8);
  __n128 v14 = MEMORY[0x270FA5388](v12);
  long long v16 = &v23[-v15];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, __n128))(v13 + 16))(&v23[-v15], a5, v12, v14);
  sub_21F764B80((uint64_t)v16, a10, a11, (uint64_t)v45);
  uint64_t v17 = v45[0];
  char v18 = v46;
  uint64_t v19 = v48;
  uint64_t v27 = v45[1];
  uint64_t v28 = v47;
  uint64_t v20 = v49;
  char v21 = v50;
  uint64_t v29 = v51;
  uint64_t v30 = v52;
  if ((v50 & 0x80000000) == 0)
  {
    if (!v50)
    {
      sub_21F770E38(v48, v49, 0);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a5, v12);
      uint64_t v41 = v31;
      char v42 = v32 & 1;
      uint64_t v43 = v33;
      char v44 = v34 & 1;
      sub_21F7BC014((uint64_t)&v41);
      char v39 = v18;
      v40[0] = v17;
      v40[1] = v27;
      LOBYTE(v40[2]) = v18;
      *(_DWORD *)((char *)&v40[2] + 1) = *(_DWORD *)v38;
      HIDWORD(v40[2]) = *(_DWORD *)&v38[3];
      v40[3] = v28;
      v40[4] = v19;
      v40[5] = v20;
      LOBYTE(v40[6]) = 0;
      *(_DWORD *)((char *)&v40[6] + 1) = *(_DWORD *)v37;
      HIDWORD(v40[6]) = *(_DWORD *)&v37[3];
      unsigned char v40[7] = v29;
      v40[8] = v30;
      LOBYTE(v40[9]) = v24;
      *(_WORD *)((char *)&v40[9] + 1) = 1;
      *(_DWORD *)((char *)&v40[9] + 3) = *(_DWORD *)&v36[7];
      HIBYTE(v40[9]) = v36[11];
      memset(&v40[10], 0, 17);
      *(_DWORD *)((char *)&v40[12] + 1) = *(_DWORD *)v36;
      HIDWORD(v40[12]) = *(_DWORD *)&v36[3];
      v40[13] = 0;
      void v40[14] = 0;
      LOBYTE(v40[15]) = -4;
      sub_21F76CE2C((uint64_t)v40);
      goto LABEL_7;
    }
    if (v50 == 1) {
      sub_21F770E38(v48, v49, 1);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a5, v12);
  uint64_t v41 = v31;
  char v42 = v32 & 1;
  uint64_t v43 = v33;
  char v44 = v34 & 1;
  sub_21F7BC014((uint64_t)&v41);
  v40[0] = v17;
  v40[1] = v27;
  LOBYTE(v40[2]) = v18;
  v40[3] = v28;
  v40[4] = v19;
  v40[5] = v20;
  LOBYTE(v40[6]) = v21;
  unsigned char v40[7] = v29;
  v40[8] = v30;
  v40[9] = v25;
  LOBYTE(v40[10]) = v26;
  sub_21F76CE78((uint64_t)v40);
LABEL_7:
  sub_21F764AF8((uint64_t)v40, (uint64_t)v53);
  sub_21F764AF8((uint64_t)&v41, (uint64_t)v54);
  sub_21F764AF8((uint64_t)v54, (uint64_t)v40);
  sub_21F764AF8((uint64_t)v53, (uint64_t)&v40[18]);
  return memcpy(v35, v40, 0x120uLL);
}

void *BarMark.init<A>(xStart:xEnd:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  sub_21F9D598C(a1, a2, a7, a8, (uint64_t)v19);
  sub_21F764AF8((uint64_t)v19, (uint64_t)v20);
  uint64_t v16 = type metadata accessor for PlottableValue();
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8);
  v17(a2, v16);
  v17(a1, v16);
  uint64_t v21 = a3;
  char v22 = a4 & 1;
  uint64_t v23 = a5;
  char v24 = a6 & 1;
  sub_21F7BC014((uint64_t)&v21);
  sub_21F764AF8((uint64_t)v20, (uint64_t)__src);
  sub_21F764AF8((uint64_t)&v21, (uint64_t)&__src[144]);
  return memcpy(a9, __src, 0x120uLL);
}

void *BarMark.init<A>(xStart:xEnd:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v19 = a1;
  char v20 = a2 & 1;
  uint64_t v21 = a3;
  char v22 = a4 & 1;
  sub_21F7BC014((uint64_t)&v19);
  sub_21F764AF8((uint64_t)&v19, (uint64_t)v17);
  sub_21F9D598C(a5, a6, a7, a8, (uint64_t)v18);
  sub_21F764AF8((uint64_t)v18, (uint64_t)v23);
  uint64_t v14 = type metadata accessor for PlottableValue();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8);
  v15(a6, v14);
  v15(a5, v14);
  sub_21F764AF8((uint64_t)v17, (uint64_t)v24);
  sub_21F764AF8((uint64_t)v24, (uint64_t)__src);
  sub_21F764AF8((uint64_t)v23, (uint64_t)&__src[144]);
  return memcpy(a9, __src, 0x120uLL);
}

unint64_t sub_21F98AF98(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = (void *)v5;
  sub_21F764AF8(v5, (uint64_t)v114);
  uint64_t v7 = v137;
  sub_21F764AF8((uint64_t)v114, (uint64_t)v137);
  sub_21F764AF8((uint64_t)v4, (uint64_t)v113);
  uint64_t v8 = v138;
  sub_21F764AF8((uint64_t)v113, (uint64_t)v138);
  sub_21F764AF8((uint64_t)v6, (uint64_t)v123);
  int v9 = sub_21F7607A0((uint64_t)v123);
  if (v9 == 5 || v9 == 3)
  {
    sub_21F7607C4((uint64_t)v123);
    char v10 = 0;
    uint64_t v11 = 1;
    char v12 = 3;
    uint64_t v7 = v138;
    uint64_t v8 = v137;
  }
  else
  {
    uint64_t v11 = 0;
    char v10 = 1;
    char v12 = 2;
  }
  sub_21F764AF8((uint64_t)v8, (uint64_t)v135);
  sub_21F764AF8((uint64_t)v7, (uint64_t)v136);
  sub_21F764AF8((uint64_t)v135, (uint64_t)v133);
  sub_21F764AF8((uint64_t)v136, (uint64_t)v124);
  swift_beginAccess();
  memcpy(__dst, (const void *)(v2 + 80), 0x102uLL);
  uint64_t v77 = (uint64_t)v4;
  sub_21F7BB3F8(v4, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F765124);
  uint64_t v76 = (uint64_t)v6;
  sub_21F7BB3F8(v6, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F765124);
  sub_21F761D2C((uint64_t)__dst, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21F761E74);
  int v82 = v11;
  sub_21F7607D4(v11, (uint64_t)v105);
  sub_21F761D2C((uint64_t)__dst, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21F761EDC);
  sub_21F76C9DC((uint64_t)v105, (uint64_t)&v115, &qword_26AD46A48);
  if (v118)
  {
    uint64_t v13 = v115;
    uint64_t v14 = v116;
    uint64_t v15 = v119;
    uint64_t v16 = v120;
    char v17 = v117 & 1;
    v92[0] = v12;
    uint64_t v93 = v115;
    uint64_t v94 = v116;
    char v95 = v117 & 1;
    uint64_t v96 = v118;
    uint64_t v97 = v119;
    uint64_t v98 = v120;
    char v18 = v121;
    char v99 = v121;
    long long v100 = v122;
    char v101 = 3;
    sub_21F7BB878((uint64_t)v92);
    sub_21F7652C0(v13, v14, v17);
    swift_bridgeObjectRetain();
    sub_21F770E44(v15, v16, v18);
    sub_21F98BF64(v105);
    sub_21F7BB81C((uint64_t)v92, (uint64_t)__src);
    nullsub_1(__src, v19);
  }
  else
  {
    sub_21F7BB380((uint64_t)__src);
  }
  sub_21F76C9DC((uint64_t)__src, (uint64_t)v104, &qword_26AD47B78);
  sub_21F76CA40(&qword_26AD47CE0);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_21FA28820;
  sub_21F7BB3F8(v135, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F765124);
  sub_21F8DDED0(v10, (uint64_t)v133, (uint64_t)v106);
  sub_21F76C9DC((uint64_t)v106, v20 + 32, &qword_26AD47B78);
  uint64_t v79 = v2;
  uint64_t v21 = v2 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  uint64_t v73 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v74 = v21;
  char v22 = (uint64_t *)(v21 + v73[18]);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  uint64_t v26 = v22[2];
  uint64_t v25 = v22[3];
  uint64_t v28 = v22[4];
  uint64_t v27 = v22[5];
  uint64_t v29 = v22[6];
  uint64_t v30 = v22[7];
  uint64_t v31 = v22[8];
  if (v25)
  {
    v92[0] = 4;
    uint64_t v93 = v24;
    uint64_t v94 = v23;
    char v95 = v26 & 1;
    uint64_t v96 = v25;
    uint64_t v97 = v28;
    uint64_t v98 = v27;
    char v99 = v29;
    *(void *)&long long v100 = v30;
    *((void *)&v100 + 1) = v31;
    char v101 = 3;
    sub_21F7BB878((uint64_t)v92);
    sub_21F7BB81C((uint64_t)v92, (uint64_t)__src);
    nullsub_1(__src, v32);
  }
  else
  {
    sub_21F7BB380((uint64_t)__src);
  }
  sub_21F76C9DC((uint64_t)__src, (uint64_t)v103, &qword_26AD47B78);
  sub_21F76C9DC((uint64_t)v103, v20 + 184, &qword_26AD47B78);
  sub_21F761E74(v24, v23, v26, v25, v28, v27, v29);
  uint64_t v81 = sub_21F8C2950(v20);
  uint64_t v75 = v33;
  swift_setDeallocating();
  sub_21F76CA40(&qword_26AD47B78);
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_21F764AF8((uint64_t)v136, (uint64_t)v102);
  int v34 = sub_21F7607A0((uint64_t)v102);
  if (v34 == 2)
  {
    uint64_t v45 = sub_21F7607C4((uint64_t)v102);
    uint64_t v39 = *(void *)(v45 + 8);
    char v40 = *(unsigned char *)(v45 + 16);
    uint64_t v46 = *(void *)(v45 + 24);
    uint64_t v41 = *(void *)(v45 + 32);
    uint64_t v43 = *(void *)(v45 + 40);
    uint64_t v125 = *(void *)v45;
    uint64_t v38 = v125;
    uint64_t v126 = v39;
    char v127 = v40;
    uint64_t v128 = v46;
    uint64_t v129 = v41;
    uint64_t v130 = v43;
    char v131 = *(unsigned char *)(v45 + 48);
    char v44 = v131;
    long long v132 = *(_OWORD *)(v45 + 56);
    sub_21F7652C0(v125, v39, v40);
    swift_bridgeObjectRetain();
    sub_21F770E44(v41, v43, v44);
    uint64_t v36 = v79;
    swift_retain();
    sub_21F7652C0(v38, v39, v40);
    swift_bridgeObjectRetain();
    sub_21F770E44(v41, v43, v44);
    int v35 = v82;
  }
  else
  {
    int v35 = v82;
    uint64_t v36 = v79;
    if (v34)
    {
      sub_21F7BB330((uint64_t)__src);
      sub_21F76C9DC((uint64_t)__src, (uint64_t)v89, &qword_26AD46A38);
      uint64_t v48 = v76;
      uint64_t v47 = v77;
      goto LABEL_18;
    }
    uint64_t v37 = sub_21F7607C4((uint64_t)v102);
    uint64_t v39 = *(void *)(v37 + 8);
    char v40 = *(unsigned char *)(v37 + 16);
    uint64_t v42 = *(void *)(v37 + 24);
    uint64_t v41 = *(void *)(v37 + 32);
    uint64_t v43 = *(void *)(v37 + 40);
    uint64_t v125 = *(void *)v37;
    uint64_t v38 = v125;
    uint64_t v126 = v39;
    char v127 = v40;
    uint64_t v128 = v42;
    uint64_t v129 = v41;
    uint64_t v130 = v43;
    char v131 = *(unsigned char *)(v37 + 48);
    char v44 = v131;
    long long v132 = *(_OWORD *)(v37 + 56);
    sub_21F7652C0(v125, v39, v40);
    swift_bridgeObjectRetain();
    sub_21F770E44(v41, v43, v44);
    sub_21F7652C0(v38, v39, v40);
    swift_bridgeObjectRetain();
    sub_21F770E44(v41, v43, v44);
    swift_retain();
  }
  sub_21F7CC0E4(v35, (_OWORD *)v36, (char *)v36, v35, &v125, (uint64_t)v92);
  sub_21F7656A8(v38, v39, v40);
  swift_bridgeObjectRelease();
  sub_21F770E38(v41, v43, v44);
  sub_21F76C9DC((uint64_t)v92, (uint64_t)__src, &qword_26AD46A38);
  sub_21F76C9DC((uint64_t)__src, (uint64_t)v88, &qword_26AD46A38);
  sub_21F76C9DC((uint64_t)v88, (uint64_t)__src, &qword_26AD46A38);
  uint64_t v48 = v76;
  uint64_t v47 = v77;
  if (sub_21F7BB368((uint64_t)__src) == 1)
  {
    sub_21F76C9DC((uint64_t)v88, (uint64_t)v89, &qword_26AD46A38);
LABEL_18:
    sub_21F75FD64(v48, 0, v107);
    double v49 = v107[0];
    double v50 = v107[1];
    sub_21F75FD64(v47, 1, &v108);
    if (v50 >= v49) {
      double v51 = v49;
    }
    else {
      double v51 = v50;
    }
    if (v109 >= v108) {
      double v52 = v108;
    }
    else {
      double v52 = v109;
    }
    double v53 = vabdd_f64(v50, v49);
    double v54 = vabdd_f64(v109, v108);
    uint64_t v55 = v89;
    goto LABEL_32;
  }
  sub_21F75FD64(v76, 0, &v108);
  double v56 = v110;
  double v57 = v111;
  sub_21F75FD64(v77, 1, v89);
  if (v57 >= v56) {
    double v51 = v56;
  }
  else {
    double v51 = v57;
  }
  if (v91 >= v90) {
    double v52 = v90;
  }
  else {
    double v52 = v91;
  }
  double v53 = vabdd_f64(v57, v56);
  double v54 = vabdd_f64(v91, v90);
  uint64_t v55 = (double *)v88;
LABEL_32:
  sub_21F76C9DC((uint64_t)v55, (uint64_t)v92, &qword_26AD46A38);
  uint64_t v78 = *(void *)(*(void *)(v36 + 16) + 24);
  long long v58 = (uint64_t *)(v74 + v73[26]);
  uint64_t v59 = v58[1];
  uint64_t v80 = *v58;
  uint64_t v60 = v73[25];
  char v61 = (uint64_t *)(v74 + v73[24]);
  uint64_t v62 = *v61;
  uint64_t v63 = v61[1];
  uint64_t v65 = v61[2];
  uint64_t v64 = v61[3];
  uint64_t v66 = *(void *)(v74 + v60);
  uint64_t v67 = *(void *)(v74 + v60 + 8);
  uint64_t v69 = *(void *)(v74 + v60 + 16);
  uint64_t v68 = *(void *)(v74 + v60 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_21F7BB3B4(v62, v63, v65, v64);
  sub_21F7BB3B4(v66, v67, v69, v68);
  sub_21F8DDED0(v82, (uint64_t)v124, (uint64_t)v112);
  sub_21F76C9DC((uint64_t)v112, (uint64_t)v85, &qword_26AD47B78);
  sub_21F7BB3F8(v135, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F765354);
  swift_bridgeObjectRelease();
  sub_21F76C9DC((uint64_t)v92, (uint64_t)v86, &qword_26AD46A38);
  if (sub_21F7BB368((uint64_t)v86) == 1)
  {
    sub_21F7BB380((uint64_t)__src);
  }
  else
  {
    sub_21F7BB81C((uint64_t)&v87, (uint64_t)__src);
    nullsub_1(__src, v70);
  }
  sub_21F76C9DC((uint64_t)__src, (uint64_t)v84, &qword_26AD47B78);
  __src[0] = v78;
  *(double *)&__src[1] = v51;
  *(double *)&__src[2] = v52;
  *(double *)&__src[3] = v53;
  *(double *)&__src[4] = v54;
  __src[5] = v80;
  __src[6] = v59;
  __src[7] = v62;
  __src[8] = v63;
  __src[9] = v65;
  __src[10] = v64;
  __src[11] = v66;
  __src[12] = v67;
  __src[13] = v69;
  __src[14] = v68;
  __src[15] = v81;
  sub_21F76C9DC((uint64_t)v85, (uint64_t)&__src[16], &qword_26AD47B78);
  __src[35] = v75;
  sub_21F76C9DC((uint64_t)v84, (uint64_t)&__src[36], &qword_26AD47B78);
  sub_21F76C9DC((uint64_t)v104, (uint64_t)&__src[55], &qword_26AD47B78);
  LOWORD(__src[74]) = 256;
  __src[75] = 0;
  uint64_t v71 = swift_allocObject();
  memcpy((void *)(v71 + 16), __src, 0x260uLL);
  return v71 | 0xC000000000000000;
}

uint64_t assignWithCopy for BarMark(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  uint64_t v11 = a2[7];
  uint64_t v52 = a2[8];
  uint64_t v53 = a2[9];
  uint64_t v55 = a2[10];
  uint64_t v57 = a2[11];
  uint64_t v59 = a2[12];
  uint64_t v61 = a2[13];
  uint64_t v63 = a2[14];
  uint64_t v65 = a2[15];
  uint64_t v67 = a2[16];
  unint64_t v69 = a2[17];
  sub_21F765124(*a2, v5, v6, v7, v8, v9, v10, v11, v52, v53, v55, v57, v59, v61, v63, v65, v67, v69);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  uint64_t v24 = *(void *)(a1 + 128);
  unint64_t v25 = *(void *)(a1 + 136);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v52;
  *(void *)(a1 + 72) = v53;
  *(void *)(a1 + 80) = v55;
  *(void *)(a1 + 88) = v57;
  *(void *)(a1 + 96) = v59;
  *(void *)(a1 + 104) = v61;
  *(void *)(a1 + 112) = v63;
  *(void *)(a1 + 120) = v65;
  *(void *)(a1 + 128) = v67;
  *(void *)(a1 + 136) = v69;
  sub_21F765354(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, SBYTE8(v23), v24, v25);
  uint64_t v26 = a2[18];
  uint64_t v27 = a2[19];
  uint64_t v28 = a2[20];
  uint64_t v29 = a2[21];
  uint64_t v30 = a2[22];
  uint64_t v31 = a2[23];
  uint64_t v32 = a2[24];
  uint64_t v33 = a2[25];
  uint64_t v54 = a2[26];
  uint64_t v56 = a2[27];
  uint64_t v58 = a2[28];
  uint64_t v60 = a2[29];
  uint64_t v62 = a2[30];
  uint64_t v34 = a2[33];
  uint64_t v64 = a2[31];
  uint64_t v66 = a2[32];
  uint64_t v35 = a2[34];
  unint64_t v36 = a2[35];
  uint64_t v68 = v34;
  uint64_t v70 = v35;
  sub_21F765124(v26, v27, v28, v29, v30, v31, v32, v33, v54, v56, v58, v60, v62, v64, v66, v34, v35, v36);
  uint64_t v37 = *(void *)(a1 + 144);
  uint64_t v38 = *(void *)(a1 + 152);
  uint64_t v39 = *(void *)(a1 + 160);
  uint64_t v40 = *(void *)(a1 + 168);
  uint64_t v41 = *(void *)(a1 + 176);
  uint64_t v42 = *(void *)(a1 + 184);
  uint64_t v43 = *(void *)(a1 + 192);
  uint64_t v44 = *(void *)(a1 + 200);
  long long v45 = *(_OWORD *)(a1 + 208);
  long long v46 = *(_OWORD *)(a1 + 224);
  long long v47 = *(_OWORD *)(a1 + 240);
  long long v48 = *(_OWORD *)(a1 + 256);
  uint64_t v49 = *(void *)(a1 + 272);
  unint64_t v50 = *(void *)(a1 + 280);
  *(void *)(a1 + 144) = v26;
  *(void *)(a1 + 152) = v27;
  *(void *)(a1 + 160) = v28;
  *(void *)(a1 + 168) = v29;
  *(void *)(a1 + 176) = v30;
  *(void *)(a1 + 184) = v31;
  *(void *)(a1 + 192) = v32;
  *(void *)(a1 + 200) = v33;
  *(void *)(a1 + 208) = v54;
  *(void *)(a1 + 216) = v56;
  *(void *)(a1 + 224) = v58;
  *(void *)(a1 + 232) = v60;
  *(void *)(a1 + 240) = v62;
  *(void *)(a1 + 248) = v64;
  *(void *)(a1 + 256) = v66;
  *(void *)(a1 + 264) = v68;
  *(void *)(a1 + 272) = v70;
  *(void *)(a1 + 280) = v36;
  sub_21F765354(v37, v38, v39, v40, v41, v42, v43, v44, v45, *((uint64_t *)&v45 + 1), v46, *((uint64_t *)&v46 + 1), v47, *((uint64_t *)&v47 + 1), v48, SBYTE8(v48), v49, v50);
  return a1;
}

uint64_t assignWithTake for BarMark(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  long long v12 = *(_OWORD *)(a1 + 64);
  long long v13 = *(_OWORD *)(a1 + 80);
  long long v14 = *(_OWORD *)(a1 + 96);
  long long v15 = *(_OWORD *)(a1 + 112);
  uint64_t v16 = *(void *)(a1 + 128);
  unint64_t v17 = *(void *)(a1 + 136);
  long long v18 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v18;
  long long v19 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v19;
  long long v20 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v20;
  long long v21 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v21;
  *(_OWORD *)(a1 + 128) = a2[8];
  sub_21F765354(v4, v5, v6, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, SBYTE8(v15), v16, v17);
  uint64_t v22 = *(void *)(a1 + 144);
  uint64_t v23 = *(void *)(a1 + 152);
  uint64_t v24 = *(void *)(a1 + 160);
  uint64_t v25 = *(void *)(a1 + 168);
  uint64_t v26 = *(void *)(a1 + 176);
  uint64_t v27 = *(void *)(a1 + 184);
  uint64_t v28 = *(void *)(a1 + 192);
  uint64_t v29 = *(void *)(a1 + 200);
  long long v30 = *(_OWORD *)(a1 + 208);
  long long v31 = *(_OWORD *)(a1 + 224);
  long long v32 = *(_OWORD *)(a1 + 240);
  long long v33 = *(_OWORD *)(a1 + 256);
  uint64_t v34 = *(void *)(a1 + 272);
  unint64_t v35 = *(void *)(a1 + 280);
  long long v36 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v36;
  long long v37 = a2[12];
  *(_OWORD *)(a1 + 176) = a2[11];
  *(_OWORD *)(a1 + 192) = v37;
  long long v38 = a2[14];
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_OWORD *)(a1 + 224) = v38;
  long long v39 = a2[16];
  *(_OWORD *)(a1 + 240) = a2[15];
  *(_OWORD *)(a1 + 256) = v39;
  *(_OWORD *)(a1 + 272) = a2[17];
  sub_21F765354(v22, v23, v24, v25, v26, v27, v28, v29, v30, *((uint64_t *)&v30 + 1), v31, *((uint64_t *)&v31 + 1), v32, *((uint64_t *)&v32 + 1), v33, SBYTE8(v33), v34, v35);
  return a1;
}

uint64_t getEnumTagSinglePayload for BarMark(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 288)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = (*(void *)(a1 + 48) >> 3) & 0xFFFFFFE0 | (*(void *)(a1 + 48) >> 2) & 0x1F;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for BarMark(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 280) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 288) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(void *)(a1 + 48) = (8 * -a2) & 0x7FFFFFF00 | (4 * (-a2 & 0x1FLL));
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      *(void *)(a1 + 136) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 288) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_21F98BCF8()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 96))
  {
    sub_21F7656A8(*(void *)(v0 + 72), *(void *)(v0 + 80), *(unsigned char *)(v0 + 88));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 128))
  {
    sub_21F7656A8(*(void *)(v0 + 104), *(void *)(v0 + 112), *(unsigned char *)(v0 + 120));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 144);
  unint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 216);
  unint64_t v6 = *(void *)(v0 + 240);
  uint64_t v7 = *(void *)(v0 + 272);
  uint64_t v8 = *(void *)(v0 + 288);
  if (v6 > 1
    || (v1 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v2 > 1
    || (v5 | v4) & 0xF000000000000007 | v3 & 0xFFFFFFFFFFFFFF7CLL
    || (v8 | *(void *)(v0 + 280)) & 0xF000000000000007 | v7 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_21F7BB724(v1, *(void *)(v0 + 152), *(void *)(v0 + 160), v2, *(void *)(v0 + 176), *(void *)(v0 + 184), *(void *)(v0 + 192), v3, v4, v5, *(void *)(v0 + 224), *(void *)(v0 + 232), v6, *(void *)(v0 + 248), *(void *)(v0 + 256), *(void *)(v0 + 264), v7, *(void *)(v0 + 280), v8);
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v0 + 304);
  unint64_t v10 = *(void *)(v0 + 328);
  uint64_t v11 = *(void *)(v0 + 360);
  uint64_t v12 = *(void *)(v0 + 368);
  uint64_t v13 = *(void *)(v0 + 376);
  unint64_t v14 = *(void *)(v0 + 400);
  uint64_t v15 = *(void *)(v0 + 432);
  uint64_t v16 = *(void *)(v0 + 448);
  if (v14 > 1
    || (v9 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v10 > 1
    || (v13 | v12) & 0xF000000000000007 | v11 & 0xFFFFFFFFFFFFFF7CLL
    || (v16 | *(void *)(v0 + 440)) & 0xF000000000000007 | v15 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_21F7BB724(v9, *(void *)(v0 + 312), *(void *)(v0 + 320), v10, *(void *)(v0 + 336), *(void *)(v0 + 344), *(void *)(v0 + 352), v11, v12, v13, *(void *)(v0 + 384), *(void *)(v0 + 392), v14, *(void *)(v0 + 408), *(void *)(v0 + 416), *(void *)(v0 + 424), v15, *(void *)(v0 + 440), v16);
  }
  uint64_t v17 = *(void *)(v0 + 456);
  unint64_t v18 = *(void *)(v0 + 480);
  uint64_t v19 = *(void *)(v0 + 512);
  uint64_t v20 = *(void *)(v0 + 520);
  uint64_t v21 = *(void *)(v0 + 528);
  unint64_t v22 = *(void *)(v0 + 552);
  uint64_t v23 = *(void *)(v0 + 584);
  uint64_t v24 = *(void *)(v0 + 600);
  if (v22 > 1
    || (v17 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v18 > 1
    || (v21 | v20) & 0xF000000000000007 | v19 & 0xFFFFFFFFFFFFFF7CLL
    || (v24 | *(void *)(v0 + 592)) & 0xF000000000000007 | v23 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_21F7BB724(v17, *(void *)(v0 + 464), *(void *)(v0 + 472), v18, *(void *)(v0 + 488), *(void *)(v0 + 496), *(void *)(v0 + 504), v19, v20, v21, *(void *)(v0 + 536), *(void *)(v0 + 544), v22, *(void *)(v0 + 560), *(void *)(v0 + 568), *(void *)(v0 + 576), v23, *(void *)(v0 + 592), v24);
  }

  return MEMORY[0x270FA0238](v0, 624, 7);
}

uint64_t *sub_21F98BF64(uint64_t *a1)
{
  return a1;
}

uint64_t RulePlot<A>.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F8B0FF0(v2, v4, a2);
  sub_21F8B0FF0(v7, v4, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_21F98C0A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  v19[1] = a6;
  v19[2] = a7;
  v19[0] = a4;
  uint64_t v20 = a8;
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  uint64_t v9 = type metadata accessor for XYRenderer();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v19 - v11;
  uint64_t v13 = type metadata accessor for VectorizedRulePlotContent();
  uint64_t v14 = *(void *)(v13 - 8);
  __n128 v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)v19 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v12, a1, v9, v15);
  sub_21F98C274((uint64_t)v12, (uint64_t)v17);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(v20, v17, v13);
}

uint64_t sub_21F98C274@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for XYRenderer();
  *(void *)(a2 + 24) = v4;
  *(void *)(a2 + 32) = &off_26D1357F0;
  uint64_t v5 = sub_21F77E8F8((uint64_t *)a2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(v5, a1, v4);
  uint64_t v6 = type metadata accessor for RulesRenderer(0);
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  uint64_t v7 = a2 + *(int *)(v6 + 32);
  uint64_t v8 = type metadata accessor for ChartContentRenderContext.Environment(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
}

uint64_t sub_21F98C364(uint64_t a1, uint64_t a2)
{
  return RulePlot<A>.body.getter(a1, *(void *)(a2 - 8));
}

uint64_t RulePlot.init<A, B, C>(_:xStart:xEnd:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v62 = a4;
  uint64_t v63 = a3;
  uint64_t v64 = a2;
  uint64_t v60 = a9;
  uint64_t v61 = a1;
  uint64_t v47 = a11;
  uint64_t v57 = a8;
  swift_getAssociatedTypeWitness();
  uint64_t v15 = a7;
  uint64_t v49 = a7;
  uint64_t v59 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v59);
  uint64_t v56 = (char *)&v46 - v16;
  uint64_t v52 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v52);
  unint64_t v18 = (char *)&v46 - v17;
  uint64_t v58 = *(void *)(a5 - 8);
  uint64_t v19 = v58;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = v22;
  uint64_t v54 = a5;
  uint64_t v65 = a5;
  uint64_t v66 = a6;
  uint64_t v50 = a6;
  uint64_t v51 = a10;
  uint64_t v67 = v15;
  uint64_t v68 = a8;
  uint64_t v23 = v47;
  uint64_t v69 = a10;
  uint64_t v70 = v47;
  uint64_t v24 = type metadata accessor for XYRenderer();
  __n128 v25 = MEMORY[0x270FA5388](v24 - 8);
  uint64_t v55 = (uint64_t)&v46 - v26;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16))(v22, v61, a5, v25);
  uint64_t v27 = type metadata accessor for PlottableProjection();
  uint64_t v28 = v18;
  uint64_t v29 = &v18[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  uint64_t v48 = *(void *)(v27 - 8);
  long long v30 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 16);
  v30(v18, v64, v27);
  v30(v29, v63, v27);
  swift_storeEnumTagMultiPayload();
  uint64_t v31 = v49;
  uint64_t v32 = type metadata accessor for PlottableProjection();
  type metadata accessor for MarkDimensions();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v34 = v56;
  uint64_t v35 = (uint64_t)&v56[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v36 = *(void *)(v32 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v56, v62, v32);
  MarkDimensions.init(integerLiteral:)(v35);
  swift_storeEnumTagMultiPayload();
  uint64_t v37 = v55;
  uint64_t v38 = (uint64_t)v28;
  uint64_t v39 = (uint64_t)v34;
  uint64_t v40 = v54;
  uint64_t v41 = v50;
  uint64_t v42 = v51;
  uint64_t v43 = v57;
  sub_21F836C28((uint64_t)v53, v38, v39, v54, v55);
  sub_21F98C0A0(v37, v40, v41, v31, v43, v42, v23, v60);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v62, v32);
  uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
  v44(v63, v27);
  v44(v64, v27);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v58 + 8))(v61, v40);
}

uint64_t RulePlot.init<A, B, C>(_:x:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v56 = a8;
  uint64_t v57 = a1;
  uint64_t v54 = a4;
  uint64_t v55 = a9;
  uint64_t v58 = a3;
  uint64_t v59 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v53 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v53);
  uint64_t v15 = (char *)&v43 - v14;
  uint64_t v49 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v49);
  uint64_t v17 = (char *)&v43 - v16;
  uint64_t v52 = *(void *)(a5 - 8);
  uint64_t v18 = v52;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = v21;
  uint64_t v47 = a5;
  uint64_t v60 = a5;
  uint64_t v61 = a7;
  uint64_t v44 = a7;
  uint64_t v43 = a6;
  uint64_t v62 = a6;
  uint64_t v63 = v56;
  uint64_t v45 = a11;
  uint64_t v64 = a11;
  uint64_t v65 = a10;
  uint64_t v22 = type metadata accessor for XYRenderer();
  __n128 v23 = MEMORY[0x270FA5388](v22 - 8);
  uint64_t v48 = (uint64_t)&v43 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16))(v21, v57, a5, v23);
  uint64_t v25 = type metadata accessor for PlottableProjection();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v50 = v25;
  uint64_t v51 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v17, v59, v25);
  swift_storeEnumTagMultiPayload();
  uint64_t v27 = type metadata accessor for PlottableProjection();
  uint64_t v28 = &v15[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  uint64_t v29 = *(void *)(v27 - 8);
  long long v30 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  v30(v15, v58, v27);
  uint64_t v31 = v28;
  uint64_t v32 = v54;
  v30(v31, v54, v27);
  swift_storeEnumTagMultiPayload();
  uint64_t v33 = v48;
  uint64_t v34 = (uint64_t)v17;
  uint64_t v35 = (uint64_t)v15;
  uint64_t v36 = v47;
  uint64_t v37 = v44;
  uint64_t v38 = v43;
  uint64_t v39 = v56;
  uint64_t v40 = v45;
  sub_21F836C28((uint64_t)v46, v34, v35, v47, v48);
  sub_21F98C0A0(v33, v36, v37, v38, v39, v40, a10, v55);
  uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
  v41(v32, v27);
  v41(v58, v27);
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v59, v50);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 8))(v57, v36);
}

uint64_t RulePlot.init<A, B>(_:xStart:xEnd:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v47 = a6;
  uint64_t v48 = a9;
  int v45 = a5;
  uint64_t v44 = a4;
  int v43 = a3;
  uint64_t v49 = a11;
  uint64_t v50 = a1;
  uint64_t v41 = a10;
  uint64_t v42 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v13 = a8;
  uint64_t v46 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v46);
  uint64_t v15 = (char *)&v39 - v14;
  uint64_t v16 = MEMORY[0x263F8D538];
  uint64_t v17 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v39 - v18;
  uint64_t v40 = *(void *)(a7 - 8);
  uint64_t v20 = v40;
  MEMORY[0x270FA5388](v21);
  __n128 v23 = (char *)&v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = a7;
  uint64_t v52 = v16;
  uint64_t v53 = v13;
  uint64_t v54 = a10;
  uint64_t v39 = v13;
  uint64_t v55 = &protocol witness table for Double;
  uint64_t v56 = v49;
  uint64_t v24 = type metadata accessor for XYRenderer();
  __n128 v25 = MEMORY[0x270FA5388](v24 - 8);
  uint64_t v27 = (char *)&v39 - v26;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v20 + 16))(v23, v50, a7, v25);
  *(void *)uint64_t v19 = v42;
  uint64_t v19[8] = v43 & 1;
  *((void *)v19 + 2) = v44;
  v19[24] = v45 & 1;
  swift_storeEnumTagMultiPayload();
  uint64_t v28 = type metadata accessor for PlottableProjection();
  type metadata accessor for MarkDimensions();
  uint64_t v29 = (uint64_t)&v15[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  uint64_t v30 = *(void *)(v28 - 8);
  uint64_t v31 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v15, v47, v28);
  MarkDimensions.init(integerLiteral:)(v29);
  swift_storeEnumTagMultiPayload();
  uint64_t v32 = v49;
  uint64_t v33 = (uint64_t)v19;
  uint64_t v34 = (uint64_t)v15;
  uint64_t v35 = MEMORY[0x263F8D538];
  uint64_t v36 = v39;
  uint64_t v37 = v41;
  sub_21F836C28((uint64_t)v23, v33, v34, a7, (uint64_t)v27);
  sub_21F98C0A0((uint64_t)v27, a7, v35, v36, v37, (uint64_t)&protocol witness table for Double, v32, v48);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v31, v28);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8))(v50, a7);
}

uint64_t RulePlot.init<A, B>(_:xStart:xEnd:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  int v51 = a5;
  uint64_t v49 = a3;
  uint64_t v50 = a4;
  uint64_t v48 = a2;
  uint64_t v52 = a9;
  uint64_t v53 = a1;
  uint64_t v44 = a8;
  swift_getAssociatedTypeWitness();
  uint64_t v13 = MEMORY[0x263F8D538];
  uint64_t v47 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v47);
  uint64_t v15 = (char *)&v41 - v14;
  uint64_t v46 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v46);
  uint64_t v17 = (char *)&v41 - v16;
  uint64_t v45 = *(void *)(a6 - 8);
  uint64_t v18 = v45;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = a10;
  int v43 = v21;
  uint64_t v54 = a6;
  uint64_t v55 = a7;
  uint64_t v41 = a7;
  uint64_t v56 = v13;
  uint64_t v57 = a8;
  uint64_t v58 = a10;
  uint64_t v59 = &protocol witness table for Double;
  uint64_t v22 = type metadata accessor for XYRenderer();
  __n128 v23 = MEMORY[0x270FA5388](v22 - 8);
  __n128 v25 = (char *)&v41 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16))(v21, v53, a6, v23);
  uint64_t v26 = type metadata accessor for PlottableProjection();
  uint64_t v27 = &v17[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  uint64_t v28 = *(void *)(v26 - 8);
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  uint64_t v30 = v48;
  v29(v17, v48, v26);
  uint64_t v31 = v27;
  uint64_t v32 = v49;
  v29(v31, v49, v26);
  swift_storeEnumTagMultiPayload();
  *(void *)uint64_t v15 = v50;
  v15[8] = v51 & 1;
  swift_storeEnumTagMultiPayload();
  uint64_t v33 = (uint64_t)v17;
  uint64_t v34 = (uint64_t)v15;
  uint64_t v35 = v41;
  uint64_t v36 = v42;
  uint64_t v37 = MEMORY[0x263F8D538];
  uint64_t v38 = v44;
  sub_21F836C28((uint64_t)v43, v33, v34, a6, (uint64_t)v25);
  sub_21F98C0A0((uint64_t)v25, a6, v35, v37, v38, v36, (uint64_t)&protocol witness table for Double, v52);
  uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
  v39(v32, v26);
  v39(v30, v26);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 8))(v53, a6);
}

uint64_t RulePlot.init<A, B>(_:x:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  int v46 = a6;
  uint64_t v45 = a5;
  int v44 = a4;
  uint64_t v42 = a2;
  uint64_t v43 = a3;
  uint64_t v47 = a9;
  uint64_t v48 = a1;
  uint64_t v39 = a10;
  swift_getAssociatedTypeWitness();
  uint64_t v13 = MEMORY[0x263F8D538];
  uint64_t v41 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v41);
  uint64_t v15 = (char *)&v36 - v14;
  uint64_t v40 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v40);
  uint64_t v17 = (char *)&v36 - v16;
  uint64_t v38 = *(void *)(a7 - 8);
  uint64_t v18 = v38;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = a11;
  uint64_t v37 = v21;
  uint64_t v49 = a7;
  uint64_t v50 = a8;
  uint64_t v51 = v13;
  uint64_t v52 = a10;
  uint64_t v53 = a11;
  uint64_t v54 = &protocol witness table for Double;
  uint64_t v22 = type metadata accessor for XYRenderer();
  __n128 v23 = MEMORY[0x270FA5388](v22 - 8);
  __n128 v25 = (char *)&v36 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16))(v21, v48, a7, v23);
  uint64_t v26 = type metadata accessor for PlottableProjection();
  type metadata accessor for MarkDimensions();
  uint64_t v27 = (uint64_t)&v17[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  uint64_t v28 = *(void *)(v26 - 8);
  uint64_t v29 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v17, v42, v26);
  MarkDimensions.init(integerLiteral:)(v27);
  swift_storeEnumTagMultiPayload();
  *(void *)uint64_t v15 = v43;
  v15[8] = v44 & 1;
  *((void *)v15 + 2) = v45;
  v15[24] = v46 & 1;
  swift_storeEnumTagMultiPayload();
  uint64_t v30 = v36;
  uint64_t v31 = (uint64_t)v17;
  uint64_t v32 = (uint64_t)v15;
  uint64_t v33 = MEMORY[0x263F8D538];
  uint64_t v34 = v39;
  sub_21F836C28((uint64_t)v37, v31, v32, a7, (uint64_t)v25);
  sub_21F98C0A0((uint64_t)v25, a7, a8, v33, v34, v30, (uint64_t)&protocol witness table for Double, v47);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v26);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v48, a7);
}

uint64_t RulePlot.init<A, B>(_:x:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v51 = a5;
  uint64_t v52 = a9;
  uint64_t v53 = a1;
  uint64_t v54 = a4;
  int v49 = a3;
  uint64_t v48 = a2;
  uint64_t v44 = a10;
  uint64_t v46 = a8;
  swift_getAssociatedTypeWitness();
  uint64_t v13 = a7;
  uint64_t v50 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v50);
  uint64_t v15 = (char *)&v43 - v14;
  uint64_t v16 = MEMORY[0x263F8D538];
  uint64_t v17 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v43 - v18;
  uint64_t v47 = *(void *)(a6 - 8);
  uint64_t v20 = v47;
  MEMORY[0x270FA5388](v21);
  __n128 v23 = (char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = a6;
  uint64_t v56 = v16;
  uint64_t v57 = v13;
  uint64_t v58 = a8;
  uint64_t v43 = v13;
  uint64_t v24 = v44;
  uint64_t v59 = &protocol witness table for Double;
  uint64_t v60 = v44;
  uint64_t v25 = type metadata accessor for XYRenderer();
  __n128 v26 = MEMORY[0x270FA5388](v25 - 8);
  uint64_t v45 = (uint64_t)&v43 - v27;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v20 + 16))(v23, v53, a6, v26);
  *(void *)uint64_t v19 = v48;
  uint64_t v19[8] = v49 & 1;
  swift_storeEnumTagMultiPayload();
  uint64_t v28 = type metadata accessor for PlottableProjection();
  uint64_t v29 = &v15[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  uint64_t v30 = *(void *)(v28 - 8);
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
  v31(v15, v54, v28);
  uint64_t v32 = v29;
  uint64_t v33 = v51;
  v31(v32, v51, v28);
  swift_storeEnumTagMultiPayload();
  uint64_t v34 = v45;
  uint64_t v35 = (uint64_t)v23;
  uint64_t v36 = (uint64_t)v19;
  uint64_t v37 = (uint64_t)v15;
  uint64_t v38 = MEMORY[0x263F8D538];
  uint64_t v39 = v43;
  uint64_t v40 = v46;
  sub_21F836C28(v35, v36, v37, a6, v45);
  sub_21F98C0A0(v34, a6, v38, v39, v40, (uint64_t)&protocol witness table for Double, v24, v52);
  uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
  v41(v33, v28);
  v41(v54, v28);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8))(v53, a6);
}

uint64_t RulePlot.init<A, B>(_:xStart:xEnd:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v43 = a8;
  uint64_t v47 = a7;
  uint64_t v48 = a3;
  uint64_t v50 = a4;
  uint64_t v51 = a9;
  uint64_t v52 = a1;
  uint64_t v49 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v49);
  uint64_t v14 = (char *)&v41 - v13;
  uint64_t v15 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (uint64_t *)((char *)&v41 - v16);
  uint64_t v46 = *(void *)(a5 - 8);
  uint64_t v18 = v46;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = a5;
  uint64_t v44 = a5;
  uint64_t v54 = MEMORY[0x263F8D538];
  uint64_t v55 = a6;
  uint64_t v42 = a6;
  uint64_t v56 = a7;
  uint64_t v22 = v43;
  uint64_t v57 = &protocol witness table for Double;
  uint64_t v58 = v43;
  uint64_t v23 = type metadata accessor for XYRenderer();
  __n128 v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v45 = (uint64_t)&v41 - v25;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16))(v21, v52, a5, v24);
  uint64_t v26 = v48;
  *uint64_t v17 = a2;
  v17[1] = v26;
  swift_storeEnumTagMultiPayload();
  uint64_t v27 = v22;
  uint64_t v28 = type metadata accessor for PlottableProjection();
  type metadata accessor for MarkDimensions();
  uint64_t v29 = (uint64_t)&v14[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  uint64_t v30 = *(void *)(v28 - 8);
  uint64_t v31 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v14, v50, v28);
  MarkDimensions.init(integerLiteral:)(v29);
  swift_storeEnumTagMultiPayload();
  uint64_t v32 = v27;
  uint64_t v34 = v44;
  uint64_t v33 = v45;
  uint64_t v35 = (uint64_t)v17;
  uint64_t v36 = (uint64_t)v14;
  uint64_t v37 = MEMORY[0x263F8D538];
  uint64_t v38 = v42;
  uint64_t v39 = v47;
  sub_21F836C28((uint64_t)v21, v35, v36, v44, v45);
  sub_21F98C0A0(v33, v34, v37, v38, v39, (uint64_t)&protocol witness table for Double, v32, v51);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v31, v28);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(v52, v34);
}

{
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _UNKNOWN **v58;

  uint64_t v44 = a7;
  uint64_t v45 = a1;
  uint64_t v49 = a3;
  uint64_t v50 = a4;
  uint64_t v51 = a9;
  uint64_t v52 = a2;
  uint64_t v48 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v48);
  uint64_t v15 = (uint64_t *)((char *)&v41 - v14);
  uint64_t v16 = a8;
  uint64_t v47 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v47);
  uint64_t v18 = (char *)&v41 - v17;
  uint64_t v46 = *(void *)(a5 - 8);
  uint64_t v19 = v46;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = a5;
  uint64_t v54 = a6;
  uint64_t v55 = MEMORY[0x263F8D538];
  uint64_t v56 = a7;
  uint64_t v57 = v16;
  uint64_t v42 = v16;
  uint64_t v58 = &protocol witness table for Double;
  uint64_t v23 = type metadata accessor for XYRenderer();
  __n128 v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v43 = (uint64_t)&v41 - v25;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16))(v22, a1, a5, v24);
  uint64_t v26 = a6;
  uint64_t v27 = type metadata accessor for PlottableProjection();
  uint64_t v28 = &v18[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  uint64_t v29 = *(void *)(v27 - 8);
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  v30(v18, v52, v27);
  uint64_t v31 = v28;
  uint64_t v32 = v49;
  v30(v31, v49, v27);
  swift_storeEnumTagMultiPayload();
  *uint64_t v15 = v50;
  swift_storeEnumTagMultiPayload();
  uint64_t v34 = v42;
  uint64_t v33 = v43;
  uint64_t v35 = (uint64_t)v22;
  uint64_t v36 = (uint64_t)v15;
  uint64_t v37 = MEMORY[0x263F8D538];
  uint64_t v38 = v44;
  sub_21F836C28(v35, (uint64_t)v18, v36, a5, v43);
  sub_21F98C0A0(v33, a5, v26, v37, v38, v34, (uint64_t)&protocol witness table for Double, v51);
  uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
  v39(v32, v27);
  v39(v52, v27);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(v45, a5);
}

uint64_t RulePlot.init<A, B>(_:x:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v44 = a7;
  uint64_t v49 = a4;
  uint64_t v50 = a9;
  uint64_t v46 = a2;
  uint64_t v42 = a1;
  uint64_t v48 = a3;
  uint64_t v47 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v47);
  uint64_t v15 = (uint64_t *)((char *)&v39 - v14);
  uint64_t v45 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v45);
  uint64_t v17 = (char *)&v39 - v16;
  uint64_t v43 = *(void *)(a5 - 8);
  uint64_t v18 = v43;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = a5;
  uint64_t v52 = a6;
  uint64_t v40 = a6;
  uint64_t v53 = MEMORY[0x263F8D538];
  uint64_t v54 = a7;
  uint64_t v55 = a8;
  uint64_t v41 = a8;
  uint64_t v56 = &protocol witness table for Double;
  uint64_t v22 = type metadata accessor for XYRenderer();
  __n128 v23 = MEMORY[0x270FA5388](v22 - 8);
  uint64_t v25 = (char *)&v39 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16))(v21, a1, a5, v23);
  uint64_t v26 = type metadata accessor for PlottableProjection();
  type metadata accessor for MarkDimensions();
  uint64_t v27 = (uint64_t)&v17[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  uint64_t v28 = *(void *)(v26 - 8);
  uint64_t v29 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v17, v46, v26);
  MarkDimensions.init(integerLiteral:)(v27);
  swift_storeEnumTagMultiPayload();
  uint64_t v30 = v49;
  *uint64_t v15 = v48;
  v15[1] = v30;
  swift_storeEnumTagMultiPayload();
  uint64_t v31 = (uint64_t)v21;
  uint64_t v32 = (uint64_t)v17;
  uint64_t v33 = (uint64_t)v15;
  uint64_t v35 = v40;
  uint64_t v34 = v41;
  uint64_t v36 = MEMORY[0x263F8D538];
  uint64_t v37 = v44;
  sub_21F836C28(v31, v32, v33, a5, (uint64_t)v25);
  sub_21F98C0A0((uint64_t)v25, a5, v35, v36, v37, v34, (uint64_t)&protocol witness table for Double, v50);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v26);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v42, a5);
}

uint64_t RulePlot.init<A, B>(_:x:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v41 = a6;
  uint64_t v42 = a8;
  uint64_t v46 = a7;
  uint64_t v49 = a4;
  uint64_t v50 = a9;
  uint64_t v51 = a1;
  uint64_t v52 = a3;
  uint64_t v45 = *(void *)(*a2 + *MEMORY[0x263F8EA20]);
  uint64_t v48 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v48);
  uint64_t v13 = (char *)&v41 - v12;
  uint64_t v14 = MEMORY[0x263F8D538];
  uint64_t v15 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (uint64_t *)((char *)&v41 - v16);
  uint64_t v47 = *(void *)(a5 - 8);
  uint64_t v18 = v47;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = v21;
  uint64_t v44 = a5;
  uint64_t v53 = a5;
  uint64_t v54 = v14;
  uint64_t v22 = v41;
  uint64_t v55 = v41;
  uint64_t v56 = a7;
  uint64_t v23 = v42;
  uint64_t v57 = &protocol witness table for Double;
  uint64_t v58 = v42;
  uint64_t v24 = type metadata accessor for XYRenderer();
  __n128 v25 = MEMORY[0x270FA5388](v24 - 8);
  uint64_t v27 = (char *)&v41 - v26;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16))(v21, v51, a5, v25);
  *uint64_t v17 = a2;
  swift_storeEnumTagMultiPayload();
  uint64_t v28 = type metadata accessor for PlottableProjection();
  uint64_t v29 = &v13[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  uint64_t v30 = *(void *)(v28 - 8);
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
  v31(v13, v52, v28);
  uint64_t v32 = v29;
  uint64_t v33 = v49;
  v31(v32, v49, v28);
  swift_storeEnumTagMultiPayload();
  uint64_t v34 = (uint64_t)v17;
  uint64_t v35 = (uint64_t)v13;
  uint64_t v36 = v44;
  uint64_t v37 = MEMORY[0x263F8D538];
  uint64_t v38 = v46;
  sub_21F836C28((uint64_t)v43, v34, v35, v44, (uint64_t)v27);
  sub_21F98C0A0((uint64_t)v27, v36, v37, v22, v38, (uint64_t)&protocol witness table for Double, v23, v50);
  uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
  v39(v33, v28);
  v39(v52, v28);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8))(v51, v36);
}

uint64_t static VectorizedRulePlotContent._layoutChartContent(_:_:)(uint64_t a1, long long *a2)
{
  uint64_t v4 = type metadata accessor for RulesRenderer(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (void *)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_21F98EE98(a1, (uint64_t)v6, type metadata accessor for RulesRenderer);
  uint64_t v7 = v6[3];
  uint64_t v8 = v6[4];
  sub_21F77E0FC(v6, v7);
  long long v10 = *a2;
  (*(void (**)(long long *, uint64_t, uint64_t))(v8 + 8))(&v10, v7, v8);
  return sub_21F991D6C((uint64_t)v6, type metadata accessor for RulesRenderer);
}

uint64_t static VectorizedRulePlotContent._renderChartContent(_:_:)@<X0>(void *a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6 = sub_21F76CA40(&qword_26AD48A80);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for RulesRenderer(0);
  uint64_t v10 = v9 - 8;
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *a2;
  uint64_t v14 = *((void *)a2 + 1);
  sub_21F98EE98((uint64_t)a1, (uint64_t)v12, type metadata accessor for RulesRenderer);
  swift_retain();
  swift_release();
  *((void *)v12 + 5) = v13;
  *((void *)v12 + 6) = v14;
  uint64_t v15 = (uint64_t)&v12[*(int *)(v10 + 40)];
  sub_21F98EE38(v15);
  uint64_t v16 = v14 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  sub_21F98EE98(v16, v15, type metadata accessor for ChartContentRenderContext.Environment);
  uint64_t v17 = type metadata accessor for ChartContentRenderContext.Environment(0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v15, 0, 1, v17);
  if (v13)
  {
    uint64_t v18 = type metadata accessor for SgGroup(0);
    uint64_t v36 = a3;
    uint64_t v19 = (int *)v18;
    uint64_t v20 = swift_allocBox();
    uint64_t v22 = v21;
    uint64_t v34 = *(void *)(*(void *)(v14 + 16) + 24);
    unint64_t v35 = v20;
    uint64_t v23 = (uint64_t)v8;
    uint64_t v24 = a1[3];
    uint64_t v25 = a1[4];
    sub_21F77E0FC(a1, v24);
    uint64_t v26 = (*(uint64_t (**)(ValueMetadata *, uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v25 + 32))(&type metadata for RuleMark, v14, &type metadata for RuleMark, &off_26D141200, v24, v25);
    uint64_t v27 = type metadata accessor for SgClipRect(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v23, 1, 1, v27);
    uint64_t v28 = *(void *)(v16 + *(int *)(v17 + 64));
    sub_21F991D6C((uint64_t)v12, type metadata accessor for RulesRenderer);
    *uint64_t v22 = v34;
    v22[1] = v26;
    uint64_t result = sub_21F7B94C0(v23, (uint64_t)v22 + v19[6]);
    *(void *)((char *)v22 + v19[7]) = 0x3FF0000000000000;
    *(void *)((char *)v22 + v19[8]) = v28;
    *(void *)((char *)v22 + v19[9]) = MEMORY[0x263F8EE78];
    uint64_t v30 = v19[10];
    unint64_t v31 = v35;
    a3 = v36;
    *((unsigned char *)v22 + v30) = 0;
  }
  else
  {
    type metadata accessor for AnyVectorizedRenderer(0);
    uint64_t v32 = swift_allocBox();
    sub_21F98EF00((uint64_t)v12, v33);
    type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
    uint64_t result = swift_storeEnumTagMultiPayload();
    unint64_t v31 = v32 | 0xD000000000000000;
  }
  *a3 = v31;
  return result;
}

uint64_t sub_21F98EE38(uint64_t a1)
{
  uint64_t v2 = sub_21F76CA40(qword_267EE7A88);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21F98EE98(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_21F98EF00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RulesRenderer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21F98EF64()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21F98EFAC(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21F98F008(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_21F98F164(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x21F98F37CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for RulePlot()
{
  return sub_21F764F08();
}

uint64_t sub_21F98F3BC()
{
  uint64_t result = type metadata accessor for RulesRenderer(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_21F98F448(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for RulesRenderer(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *(void *)a1 = *a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    long long v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    *(void *)(a1 + 48) = a2[6];
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
    uint64_t v8 = *(int *)(v6 + 32);
    BOOL v9 = (_OWORD *)(a1 + v8);
    unsigned int v10 = (_OWORD *)((char *)a2 + v8);
    int v11 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
    uint64_t v12 = *((void *)v11 - 1);
    int v13 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v12 + 48);
    swift_retain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = sub_21F76CA40(qword_267EE7A88);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      int v16 = *((unsigned __int8 *)v10 + 40);
      if (v16 == 255)
      {
        long long v17 = v10[1];
        *BOOL v9 = *v10;
        v9[1] = v17;
        *(_OWORD *)((char *)v9 + 25) = *(_OWORD *)((char *)v10 + 25);
      }
      else if (v16)
      {
        long long v18 = *(_OWORD *)((char *)v10 + 24);
        *(_OWORD *)((char *)v9 + 24) = v18;
        (**(void (***)(_OWORD *, _OWORD *))(v18 - 8))(v9, v10);
        *((unsigned char *)v9 + 40) = 1;
      }
      else
      {
        *(void *)BOOL v9 = *(void *)v10;
        *((unsigned char *)v9 + 40) = 0;
        swift_retain();
      }
      *((unsigned char *)v9 + 41) = *((unsigned char *)v10 + 41);
      *((void *)v9 + 6) = *((void *)v10 + 6);
      *((void *)v9 + 7) = *((void *)v10 + 7);
      uint64_t v19 = *((void *)v10 + 9);
      *((void *)v9 + 8) = *((void *)v10 + 8);
      *((void *)v9 + 9) = v19;
      *((void *)v9 + 10) = *((void *)v10 + 10);
      int v20 = *((unsigned __int8 *)v10 + 128);
      swift_bridgeObjectRetain();
      if (v20 == 255)
      {
        long long v21 = *(_OWORD *)((char *)v10 + 104);
        *(_OWORD *)((char *)v9 + 88) = *(_OWORD *)((char *)v10 + 88);
        *(_OWORD *)((char *)v9 + 104) = v21;
        *(_OWORD *)((char *)v9 + 113) = *(_OWORD *)((char *)v10 + 113);
      }
      else if (v20)
      {
        *((void *)v9 + 11) = *((void *)v10 + 11);
        v9[6] = v10[6];
        *((unsigned char *)v9 + 128) = 1;
        swift_retain();
      }
      else
      {
        long long v22 = v10[7];
        v9[7] = v22;
        (**(void (***)(uint64_t, uint64_t))(v22 - 8))((uint64_t)v9 + 88, (uint64_t)v10 + 88);
        *((unsigned char *)v9 + 128) = 0;
      }
      *(_OWORD *)((char *)v9 + 136) = *(_OWORD *)((char *)v10 + 136);
      *((unsigned char *)v9 + 152) = *((unsigned char *)v10 + 152);
      *((void *)v9 + 20) = *((void *)v10 + 20);
      *((unsigned char *)v9 + 168) = *((unsigned char *)v10 + 168);
      long long v23 = v10[12];
      v9[11] = v10[11];
      v9[12] = v23;
      *((unsigned char *)v9 + 208) = *((unsigned char *)v10 + 208);
      uint64_t v24 = v11[11];
      uint64_t v25 = (char *)v9 + v24;
      uint64_t v26 = (char *)v10 + v24;
      uint64_t v27 = sub_21FA24C90();
      uint64_t v28 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        uint64_t v29 = sub_21F76CA40(&qword_26AD47C20);
        memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      uint64_t v30 = v11[12];
      unint64_t v31 = (char *)v9 + v30;
      uint64_t v32 = (char *)v10 + v30;
      *(void *)unint64_t v31 = *(void *)v32;
      v31[8] = v32[8];
      *(void *)((char *)v9 + v11[13]) = *(void *)((char *)v10 + v11[13]);
      uint64_t v33 = v11[14];
      uint64_t v34 = (char *)v9 + v33;
      unint64_t v35 = (char *)v10 + v33;
      uint64_t v36 = sub_21FA25910();
      uint64_t v37 = *(void *)(v36 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
      {
        uint64_t v38 = sub_21F76CA40(&qword_26AD4A3B8);
        memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      }
      uint64_t v39 = v11[15];
      uint64_t v40 = (char *)v9 + v39;
      uint64_t v41 = (char *)v10 + v39;
      *(void *)uint64_t v40 = *(void *)v41;
      *((_WORD *)v40 + 4) = *((_WORD *)v41 + 4);
      *(void *)((char *)v9 + v11[16]) = *(void *)((char *)v10 + v11[16]);
      *(void *)((char *)v9 + v11[17]) = *(void *)((char *)v10 + v11[17]);
      uint64_t v42 = v11[18];
      uint64_t v43 = (char *)v9 + v42;
      uint64_t v44 = (char *)v10 + v42;
      uint64_t v45 = *(void *)((char *)v10 + v42 + 24);
      swift_retain();
      if (v45)
      {
        uint64_t v46 = *(void *)v44;
        uint64_t v47 = *((void *)v44 + 1);
        char v48 = v44[16];
        sub_21F7652C0(*(void *)v44, v47, v48);
        *(void *)uint64_t v43 = v46;
        *((void *)v43 + 1) = v47;
        v43[16] = v48;
        uint64_t v49 = *((void *)v44 + 4);
        *((void *)v43 + 3) = *((void *)v44 + 3);
        uint64_t v50 = *((void *)v44 + 5);
        char v51 = v44[48];
        swift_bridgeObjectRetain();
        sub_21F770E44(v49, v50, v51);
        *((void *)v43 + 4) = v49;
        *((void *)v43 + 5) = v50;
        v43[48] = v51;
        *(_OWORD *)(v43 + 56) = *(_OWORD *)(v44 + 56);
      }
      else
      {
        long long v52 = *((_OWORD *)v44 + 3);
        *((_OWORD *)v43 + 2) = *((_OWORD *)v44 + 2);
        *((_OWORD *)v43 + 3) = v52;
        *((void *)v43 + 8) = *((void *)v44 + 8);
        long long v53 = *((_OWORD *)v44 + 1);
        *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
        *((_OWORD *)v43 + 1) = v53;
      }
      uint64_t v54 = v11[19];
      uint64_t v55 = (char *)v9 + v54;
      uint64_t v56 = (char *)v10 + v54;
      if (*(void *)((char *)v10 + v54 + 24))
      {
        uint64_t v57 = *(void *)v56;
        uint64_t v58 = *((void *)v56 + 1);
        char v59 = v56[16];
        sub_21F7652C0(*(void *)v56, v58, v59);
        *(void *)uint64_t v55 = v57;
        *((void *)v55 + 1) = v58;
        v55[16] = v59;
        uint64_t v60 = *((void *)v56 + 4);
        *((void *)v55 + 3) = *((void *)v56 + 3);
        uint64_t v61 = *((void *)v56 + 5);
        char v62 = v56[48];
        swift_bridgeObjectRetain();
        sub_21F770E44(v60, v61, v62);
        *((void *)v55 + 4) = v60;
        *((void *)v55 + 5) = v61;
        v55[48] = v62;
        *(_OWORD *)(v55 + 56) = *(_OWORD *)(v56 + 56);
      }
      else
      {
        long long v63 = *((_OWORD *)v56 + 3);
        *((_OWORD *)v55 + 2) = *((_OWORD *)v56 + 2);
        *((_OWORD *)v55 + 3) = v63;
        *((void *)v55 + 8) = *((void *)v56 + 8);
        long long v64 = *((_OWORD *)v56 + 1);
        *(_OWORD *)uint64_t v55 = *(_OWORD *)v56;
        *((_OWORD *)v55 + 1) = v64;
      }
      uint64_t v65 = v11[20];
      uint64_t v66 = (char *)v9 + v65;
      uint64_t v67 = (char *)v10 + v65;
      if (*(void *)((char *)v10 + v65 + 24))
      {
        uint64_t v68 = *(void *)v67;
        uint64_t v69 = *((void *)v67 + 1);
        char v70 = v67[16];
        sub_21F7652C0(*(void *)v67, v69, v70);
        *(void *)uint64_t v66 = v68;
        *((void *)v66 + 1) = v69;
        v66[16] = v70;
        uint64_t v71 = *((void *)v67 + 4);
        *((void *)v66 + 3) = *((void *)v67 + 3);
        uint64_t v72 = *((void *)v67 + 5);
        char v73 = v67[48];
        swift_bridgeObjectRetain();
        sub_21F770E44(v71, v72, v73);
        *((void *)v66 + 4) = v71;
        *((void *)v66 + 5) = v72;
        v66[48] = v73;
        *(_OWORD *)(v66 + 56) = *(_OWORD *)(v67 + 56);
      }
      else
      {
        long long v74 = *((_OWORD *)v67 + 3);
        *((_OWORD *)v66 + 2) = *((_OWORD *)v67 + 2);
        *((_OWORD *)v66 + 3) = v74;
        *((void *)v66 + 8) = *((void *)v67 + 8);
        long long v75 = *((_OWORD *)v67 + 1);
        *(_OWORD *)uint64_t v66 = *(_OWORD *)v67;
        *((_OWORD *)v66 + 1) = v75;
      }
      uint64_t v76 = v11[21];
      uint64_t v77 = (char *)v9 + v76;
      uint64_t v78 = (char *)v10 + v76;
      if (*(void *)((char *)v10 + v76 + 24))
      {
        uint64_t v79 = *(void *)v78;
        uint64_t v80 = *((void *)v78 + 1);
        char v81 = v78[16];
        sub_21F7652C0(*(void *)v78, v80, v81);
        *(void *)uint64_t v77 = v79;
        *((void *)v77 + 1) = v80;
        v77[16] = v81;
        uint64_t v82 = *((void *)v78 + 4);
        *((void *)v77 + 3) = *((void *)v78 + 3);
        uint64_t v83 = *((void *)v78 + 5);
        char v84 = v78[48];
        swift_bridgeObjectRetain();
        sub_21F770E44(v82, v83, v84);
        *((void *)v77 + 4) = v82;
        *((void *)v77 + 5) = v83;
        v77[48] = v84;
        *(_OWORD *)(v77 + 56) = *(_OWORD *)(v78 + 56);
      }
      else
      {
        long long v85 = *((_OWORD *)v78 + 3);
        *((_OWORD *)v77 + 2) = *((_OWORD *)v78 + 2);
        *((_OWORD *)v77 + 3) = v85;
        *((void *)v77 + 8) = *((void *)v78 + 8);
        long long v86 = *((_OWORD *)v78 + 1);
        *(_OWORD *)uint64_t v77 = *(_OWORD *)v78;
        *((_OWORD *)v77 + 1) = v86;
      }
      uint64_t v87 = v11[22];
      uint64_t v88 = (char *)v9 + v87;
      uint64_t v89 = (char *)v10 + v87;
      *(_OWORD *)uint64_t v88 = *(_OWORD *)v89;
      *((void *)v88 + 2) = *((void *)v89 + 2);
      uint64_t v90 = v11[23];
      double v91 = (char *)v9 + v90;
      uint64_t v92 = (char *)v10 + v90;
      *(_OWORD *)double v91 = *(_OWORD *)v92;
      *((void *)v91 + 2) = *((void *)v92 + 2);
      uint64_t v93 = v11[24];
      uint64_t v94 = (char *)v9 + v93;
      char v95 = (char *)v10 + v93;
      if (*(void *)((char *)v10 + v93 + 24))
      {
        uint64_t v96 = *(void *)v95;
        uint64_t v97 = *((void *)v95 + 1);
        char v98 = v95[16];
        sub_21F7652C0(*(void *)v95, v97, v98);
        *(void *)uint64_t v94 = v96;
        *((void *)v94 + 1) = v97;
        v94[16] = v98;
        *((void *)v94 + 3) = *((void *)v95 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v99 = *((_OWORD *)v95 + 1);
        *(_OWORD *)uint64_t v94 = *(_OWORD *)v95;
        *((_OWORD *)v94 + 1) = v99;
      }
      uint64_t v100 = v11[25];
      char v101 = (char *)v9 + v100;
      uint64_t v102 = (char *)v10 + v100;
      if (*(void *)((char *)v10 + v100 + 24))
      {
        uint64_t v103 = *(void *)v102;
        uint64_t v104 = *((void *)v102 + 1);
        char v105 = v102[16];
        sub_21F7652C0(*(void *)v102, v104, v105);
        *(void *)char v101 = v103;
        *((void *)v101 + 1) = v104;
        v101[16] = v105;
        *((void *)v101 + 3) = *((void *)v102 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v106 = *((_OWORD *)v102 + 1);
        *(_OWORD *)char v101 = *(_OWORD *)v102;
        *((_OWORD *)v101 + 1) = v106;
      }
      uint64_t v107 = v11[26];
      double v108 = (void *)((char *)v9 + v107);
      double v109 = (void *)((char *)v10 + v107);
      uint64_t v110 = v109[1];
      *double v108 = *v109;
      v108[1] = v110;
      *((unsigned char *)v9 + v11[27]) = *((unsigned char *)v10 + v11[27]);
      uint64_t v111 = v11[28];
      uint64_t v112 = (char *)v9 + v111;
      char v113 = (char *)v10 + v111;
      uint64_t v114 = *((void *)v113 + 3);
      swift_bridgeObjectRetain();
      if (v114)
      {
        *((void *)v112 + 3) = v114;
        (**(void (***)(char *, char *, uint64_t))(v114 - 8))(v112, v113, v114);
      }
      else
      {
        long long v115 = *((_OWORD *)v113 + 1);
        *(_OWORD *)uint64_t v112 = *(_OWORD *)v113;
        *((_OWORD *)v112 + 1) = v115;
      }
      (*(void (**)(_OWORD *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
    }
  }
  return a1;
}

uint64_t sub_21F98FCD0(uint64_t a1)
{
  _s6Charts15AnyChartContentVwxx_0(a1);
  swift_release();
  uint64_t v2 = a1 + *(int *)(type metadata accessor for RulesRenderer(0) + 32);
  uint64_t v3 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((void *)v3 - 1) + 48))(v2, 1, v3);
  if (!result)
  {
    int v5 = *(unsigned __int8 *)(v2 + 40);
    if (v5 != 255)
    {
      if (v5) {
        _s6Charts15AnyChartContentVwxx_0(v2);
      }
      else {
        swift_release();
      }
    }
    swift_bridgeObjectRelease();
    int v6 = *(unsigned __int8 *)(v2 + 128);
    if (v6 != 255)
    {
      if (v6) {
        swift_release();
      }
      else {
        _s6Charts15AnyChartContentVwxx_0(v2 + 88);
      }
    }
    uint64_t v7 = v2 + v3[11];
    uint64_t v8 = sub_21FA24C90();
    uint64_t v9 = *(void *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    }
    uint64_t v10 = v2 + v3[14];
    uint64_t v11 = sub_21FA25910();
    uint64_t v12 = *(void *)(v11 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    }
    swift_release();
    uint64_t v13 = v2 + v3[18];
    if (*(void *)(v13 + 24))
    {
      sub_21F7656A8(*(void *)v13, *(void *)(v13 + 8), *(unsigned char *)(v13 + 16));
      swift_bridgeObjectRelease();
      sub_21F770E38(*(void *)(v13 + 32), *(void *)(v13 + 40), *(unsigned char *)(v13 + 48));
    }
    uint64_t v14 = v2 + v3[19];
    if (*(void *)(v14 + 24))
    {
      sub_21F7656A8(*(void *)v14, *(void *)(v14 + 8), *(unsigned char *)(v14 + 16));
      swift_bridgeObjectRelease();
      sub_21F770E38(*(void *)(v14 + 32), *(void *)(v14 + 40), *(unsigned char *)(v14 + 48));
    }
    uint64_t v15 = v2 + v3[20];
    if (*(void *)(v15 + 24))
    {
      sub_21F7656A8(*(void *)v15, *(void *)(v15 + 8), *(unsigned char *)(v15 + 16));
      swift_bridgeObjectRelease();
      sub_21F770E38(*(void *)(v15 + 32), *(void *)(v15 + 40), *(unsigned char *)(v15 + 48));
    }
    uint64_t v16 = v2 + v3[21];
    if (*(void *)(v16 + 24))
    {
      sub_21F7656A8(*(void *)v16, *(void *)(v16 + 8), *(unsigned char *)(v16 + 16));
      swift_bridgeObjectRelease();
      sub_21F770E38(*(void *)(v16 + 32), *(void *)(v16 + 40), *(unsigned char *)(v16 + 48));
    }
    uint64_t v17 = v2 + v3[24];
    if (*(void *)(v17 + 24))
    {
      sub_21F7656A8(*(void *)v17, *(void *)(v17 + 8), *(unsigned char *)(v17 + 16));
      swift_bridgeObjectRelease();
    }
    uint64_t v18 = v2 + v3[25];
    if (*(void *)(v18 + 24))
    {
      sub_21F7656A8(*(void *)v18, *(void *)(v18 + 8), *(unsigned char *)(v18 + 16));
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t result = v2 + v3[28];
    if (*(void *)(result + 24)) {
      return _s6Charts15AnyChartContentVwxx_0(result);
    }
  }
  return result;
}

uint64_t sub_21F990008(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v5 = *(int *)(type metadata accessor for RulesRenderer(0) + 32);
  int v6 = (_OWORD *)(a1 + v5);
  uint64_t v7 = (_OWORD *)(a2 + v5);
  uint64_t v8 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v9 = *((void *)v8 - 1);
  uint64_t v10 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v9 + 48);
  swift_retain();
  if (v10(v7, 1, v8))
  {
    uint64_t v11 = sub_21F76CA40(qword_267EE7A88);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    int v12 = *((unsigned __int8 *)v7 + 40);
    if (v12 == 255)
    {
      long long v13 = v7[1];
      *int v6 = *v7;
      v6[1] = v13;
      *(_OWORD *)((char *)v6 + 25) = *(_OWORD *)((char *)v7 + 25);
    }
    else if (v12)
    {
      long long v14 = *(_OWORD *)((char *)v7 + 24);
      *(_OWORD *)((char *)v6 + 24) = v14;
      (**(void (***)(_OWORD *, _OWORD *))(v14 - 8))(v6, v7);
      *((unsigned char *)v6 + 40) = 1;
    }
    else
    {
      *(void *)int v6 = *(void *)v7;
      *((unsigned char *)v6 + 40) = 0;
      swift_retain();
    }
    *((unsigned char *)v6 + 41) = *((unsigned char *)v7 + 41);
    *((void *)v6 + 6) = *((void *)v7 + 6);
    *((void *)v6 + 7) = *((void *)v7 + 7);
    uint64_t v15 = *((void *)v7 + 9);
    *((void *)v6 + 8) = *((void *)v7 + 8);
    *((void *)v6 + 9) = v15;
    *((void *)v6 + 10) = *((void *)v7 + 10);
    int v16 = *((unsigned __int8 *)v7 + 128);
    swift_bridgeObjectRetain();
    if (v16 == 255)
    {
      long long v17 = *(_OWORD *)((char *)v7 + 104);
      *(_OWORD *)((char *)v6 + 88) = *(_OWORD *)((char *)v7 + 88);
      *(_OWORD *)((char *)v6 + 104) = v17;
      *(_OWORD *)((char *)v6 + 113) = *(_OWORD *)((char *)v7 + 113);
    }
    else if (v16)
    {
      *((void *)v6 + 11) = *((void *)v7 + 11);
      v6[6] = v7[6];
      *((unsigned char *)v6 + 128) = 1;
      swift_retain();
    }
    else
    {
      long long v18 = v7[7];
      v6[7] = v18;
      (**(void (***)(uint64_t, uint64_t))(v18 - 8))((uint64_t)v6 + 88, (uint64_t)v7 + 88);
      *((unsigned char *)v6 + 128) = 0;
    }
    *(_OWORD *)((char *)v6 + 136) = *(_OWORD *)((char *)v7 + 136);
    *((unsigned char *)v6 + 152) = *((unsigned char *)v7 + 152);
    *((void *)v6 + 20) = *((void *)v7 + 20);
    *((unsigned char *)v6 + 168) = *((unsigned char *)v7 + 168);
    long long v19 = v7[12];
    v6[11] = v7[11];
    v6[12] = v19;
    *((unsigned char *)v6 + 208) = *((unsigned char *)v7 + 208);
    uint64_t v20 = v8[11];
    long long v21 = (char *)v6 + v20;
    long long v22 = (char *)v7 + v20;
    uint64_t v23 = sub_21FA24C90();
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = sub_21F76CA40(&qword_26AD47C20);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    uint64_t v26 = v8[12];
    uint64_t v27 = (char *)v6 + v26;
    uint64_t v28 = (char *)v7 + v26;
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = v28[8];
    *(void *)((char *)v6 + v8[13]) = *(void *)((char *)v7 + v8[13]);
    uint64_t v29 = v8[14];
    uint64_t v30 = (char *)v6 + v29;
    unint64_t v31 = (char *)v7 + v29;
    uint64_t v32 = sub_21FA25910();
    uint64_t v33 = *(void *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      uint64_t v34 = sub_21F76CA40(&qword_26AD4A3B8);
      memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    }
    uint64_t v35 = v8[15];
    uint64_t v36 = (char *)v6 + v35;
    uint64_t v37 = (char *)v7 + v35;
    *(void *)uint64_t v36 = *(void *)v37;
    *((_WORD *)v36 + 4) = *((_WORD *)v37 + 4);
    *(void *)((char *)v6 + v8[16]) = *(void *)((char *)v7 + v8[16]);
    *(void *)((char *)v6 + v8[17]) = *(void *)((char *)v7 + v8[17]);
    uint64_t v38 = v8[18];
    uint64_t v39 = (char *)v6 + v38;
    uint64_t v40 = (char *)v7 + v38;
    uint64_t v41 = *(void *)((char *)v7 + v38 + 24);
    swift_retain();
    if (v41)
    {
      uint64_t v42 = *(void *)v40;
      uint64_t v43 = *((void *)v40 + 1);
      char v44 = v40[16];
      sub_21F7652C0(*(void *)v40, v43, v44);
      *(void *)uint64_t v39 = v42;
      *((void *)v39 + 1) = v43;
      v39[16] = v44;
      uint64_t v45 = *((void *)v40 + 4);
      *((void *)v39 + 3) = *((void *)v40 + 3);
      uint64_t v46 = *((void *)v40 + 5);
      char v47 = v40[48];
      swift_bridgeObjectRetain();
      sub_21F770E44(v45, v46, v47);
      *((void *)v39 + 4) = v45;
      *((void *)v39 + 5) = v46;
      v39[48] = v47;
      *(_OWORD *)(v39 + 56) = *(_OWORD *)(v40 + 56);
    }
    else
    {
      long long v48 = *((_OWORD *)v40 + 3);
      *((_OWORD *)v39 + 2) = *((_OWORD *)v40 + 2);
      *((_OWORD *)v39 + 3) = v48;
      *((void *)v39 + 8) = *((void *)v40 + 8);
      long long v49 = *((_OWORD *)v40 + 1);
      *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
      *((_OWORD *)v39 + 1) = v49;
    }
    uint64_t v50 = v8[19];
    char v51 = (char *)v6 + v50;
    long long v52 = (char *)v7 + v50;
    if (*(void *)((char *)v7 + v50 + 24))
    {
      uint64_t v53 = *(void *)v52;
      uint64_t v54 = *((void *)v52 + 1);
      char v55 = v52[16];
      sub_21F7652C0(*(void *)v52, v54, v55);
      *(void *)char v51 = v53;
      *((void *)v51 + 1) = v54;
      v51[16] = v55;
      uint64_t v56 = *((void *)v52 + 4);
      *((void *)v51 + 3) = *((void *)v52 + 3);
      uint64_t v57 = *((void *)v52 + 5);
      char v58 = v52[48];
      swift_bridgeObjectRetain();
      sub_21F770E44(v56, v57, v58);
      *((void *)v51 + 4) = v56;
      *((void *)v51 + 5) = v57;
      v51[48] = v58;
      *(_OWORD *)(v51 + 56) = *(_OWORD *)(v52 + 56);
    }
    else
    {
      long long v59 = *((_OWORD *)v52 + 3);
      *((_OWORD *)v51 + 2) = *((_OWORD *)v52 + 2);
      *((_OWORD *)v51 + 3) = v59;
      *((void *)v51 + 8) = *((void *)v52 + 8);
      long long v60 = *((_OWORD *)v52 + 1);
      *(_OWORD *)char v51 = *(_OWORD *)v52;
      *((_OWORD *)v51 + 1) = v60;
    }
    uint64_t v61 = v8[20];
    char v62 = (char *)v6 + v61;
    long long v63 = (char *)v7 + v61;
    if (*(void *)((char *)v7 + v61 + 24))
    {
      uint64_t v64 = *(void *)v63;
      uint64_t v65 = *((void *)v63 + 1);
      char v66 = v63[16];
      sub_21F7652C0(*(void *)v63, v65, v66);
      *(void *)char v62 = v64;
      *((void *)v62 + 1) = v65;
      v62[16] = v66;
      uint64_t v67 = *((void *)v63 + 4);
      *((void *)v62 + 3) = *((void *)v63 + 3);
      uint64_t v68 = *((void *)v63 + 5);
      char v69 = v63[48];
      swift_bridgeObjectRetain();
      sub_21F770E44(v67, v68, v69);
      *((void *)v62 + 4) = v67;
      *((void *)v62 + 5) = v68;
      v62[48] = v69;
      *(_OWORD *)(v62 + 56) = *(_OWORD *)(v63 + 56);
    }
    else
    {
      long long v70 = *((_OWORD *)v63 + 3);
      *((_OWORD *)v62 + 2) = *((_OWORD *)v63 + 2);
      *((_OWORD *)v62 + 3) = v70;
      *((void *)v62 + 8) = *((void *)v63 + 8);
      long long v71 = *((_OWORD *)v63 + 1);
      *(_OWORD *)char v62 = *(_OWORD *)v63;
      *((_OWORD *)v62 + 1) = v71;
    }
    uint64_t v72 = v8[21];
    char v73 = (char *)v6 + v72;
    long long v74 = (char *)v7 + v72;
    if (*(void *)((char *)v7 + v72 + 24))
    {
      uint64_t v75 = *(void *)v74;
      uint64_t v76 = *((void *)v74 + 1);
      char v77 = v74[16];
      sub_21F7652C0(*(void *)v74, v76, v77);
      *(void *)char v73 = v75;
      *((void *)v73 + 1) = v76;
      v73[16] = v77;
      uint64_t v78 = *((void *)v74 + 4);
      *((void *)v73 + 3) = *((void *)v74 + 3);
      uint64_t v79 = *((void *)v74 + 5);
      char v80 = v74[48];
      swift_bridgeObjectRetain();
      sub_21F770E44(v78, v79, v80);
      *((void *)v73 + 4) = v78;
      *((void *)v73 + 5) = v79;
      v73[48] = v80;
      *(_OWORD *)(v73 + 56) = *(_OWORD *)(v74 + 56);
    }
    else
    {
      long long v81 = *((_OWORD *)v74 + 3);
      *((_OWORD *)v73 + 2) = *((_OWORD *)v74 + 2);
      *((_OWORD *)v73 + 3) = v81;
      *((void *)v73 + 8) = *((void *)v74 + 8);
      long long v82 = *((_OWORD *)v74 + 1);
      *(_OWORD *)char v73 = *(_OWORD *)v74;
      *((_OWORD *)v73 + 1) = v82;
    }
    uint64_t v83 = v8[22];
    char v84 = (char *)v6 + v83;
    long long v85 = (char *)v7 + v83;
    *(_OWORD *)char v84 = *(_OWORD *)v85;
    *((void *)v84 + 2) = *((void *)v85 + 2);
    uint64_t v86 = v8[23];
    uint64_t v87 = (char *)v6 + v86;
    uint64_t v88 = (char *)v7 + v86;
    *(_OWORD *)uint64_t v87 = *(_OWORD *)v88;
    *((void *)v87 + 2) = *((void *)v88 + 2);
    uint64_t v89 = v8[24];
    uint64_t v90 = (char *)v6 + v89;
    double v91 = (char *)v7 + v89;
    if (*(void *)((char *)v7 + v89 + 24))
    {
      uint64_t v92 = *(void *)v91;
      uint64_t v93 = *((void *)v91 + 1);
      char v94 = v91[16];
      sub_21F7652C0(*(void *)v91, v93, v94);
      *(void *)uint64_t v90 = v92;
      *((void *)v90 + 1) = v93;
      v90[16] = v94;
      *((void *)v90 + 3) = *((void *)v91 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v95 = *((_OWORD *)v91 + 1);
      *(_OWORD *)uint64_t v90 = *(_OWORD *)v91;
      *((_OWORD *)v90 + 1) = v95;
    }
    uint64_t v96 = v8[25];
    uint64_t v97 = (char *)v6 + v96;
    char v98 = (char *)v7 + v96;
    if (*(void *)((char *)v7 + v96 + 24))
    {
      uint64_t v99 = *(void *)v98;
      uint64_t v100 = *((void *)v98 + 1);
      char v101 = v98[16];
      sub_21F7652C0(*(void *)v98, v100, v101);
      *(void *)uint64_t v97 = v99;
      *((void *)v97 + 1) = v100;
      v97[16] = v101;
      *((void *)v97 + 3) = *((void *)v98 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v102 = *((_OWORD *)v98 + 1);
      *(_OWORD *)uint64_t v97 = *(_OWORD *)v98;
      *((_OWORD *)v97 + 1) = v102;
    }
    uint64_t v103 = v8[26];
    uint64_t v104 = (void *)((char *)v6 + v103);
    char v105 = (void *)((char *)v7 + v103);
    uint64_t v106 = v105[1];
    *uint64_t v104 = *v105;
    v104[1] = v106;
    *((unsigned char *)v6 + v8[27]) = *((unsigned char *)v7 + v8[27]);
    uint64_t v107 = v8[28];
    double v108 = (char *)v6 + v107;
    double v109 = (char *)v7 + v107;
    uint64_t v110 = *((void *)v109 + 3);
    swift_bridgeObjectRetain();
    if (v110)
    {
      *((void *)v108 + 3) = v110;
      (**(void (***)(char *, char *, uint64_t))(v110 - 8))(v108, v109, v110);
    }
    else
    {
      long long v111 = *((_OWORD *)v109 + 1);
      *(_OWORD *)double v108 = *(_OWORD *)v109;
      *((_OWORD *)v108 + 1) = v111;
    }
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t sub_21F990834(uint64_t a1, uint64_t a2)
{
  sub_21F7ABEA8((uint64_t *)a1, (uint64_t *)a2);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v4 = *(int *)(type metadata accessor for RulesRenderer(0) + 32);
  uint64_t v5 = a1 + v4;
  int v6 = (long long *)(a2 + v4);
  uint64_t v7 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v8 = *((void *)v7 - 1);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v8 + 48);
  int v10 = v9(v5, 1, v7);
  int v11 = v9((uint64_t)v6, 1, v7);
  if (v10)
  {
    if (!v11)
    {
      int v12 = *((unsigned __int8 *)v6 + 40);
      if (v12 == 255)
      {
        long long v13 = *v6;
        long long v14 = v6[1];
        *(_OWORD *)(v5 + 25) = *(long long *)((char *)v6 + 25);
        *(_OWORD *)uint64_t v5 = v13;
        *(_OWORD *)(v5 + 16) = v14;
      }
      else if (v12)
      {
        uint64_t v19 = *((void *)v6 + 3);
        *(void *)(v5 + 24) = v19;
        *(void *)(v5 + 32) = *((void *)v6 + 4);
        (**(void (***)(uint64_t, long long *))(v19 - 8))(v5, v6);
        *(unsigned char *)(v5 + 40) = 1;
      }
      else
      {
        *(void *)uint64_t v5 = *(void *)v6;
        *(unsigned char *)(v5 + 40) = 0;
        swift_retain();
      }
      *(unsigned char *)(v5 + 41) = *((unsigned char *)v6 + 41);
      *(void *)(v5 + 48) = *((void *)v6 + 6);
      *(_DWORD *)(v5 + 56) = *((_DWORD *)v6 + 14);
      *(_DWORD *)(v5 + 60) = *((_DWORD *)v6 + 15);
      *(void *)(v5 + 64) = *((void *)v6 + 8);
      *(void *)(v5 + 72) = *((void *)v6 + 9);
      *(void *)(v5 + 80) = *((void *)v6 + 10);
      int v20 = *((unsigned __int8 *)v6 + 128);
      swift_bridgeObjectRetain();
      if (v20 == 255)
      {
        long long v21 = *(long long *)((char *)v6 + 88);
        long long v22 = *(long long *)((char *)v6 + 104);
        *(_OWORD *)(v5 + 113) = *(long long *)((char *)v6 + 113);
        *(_OWORD *)(v5 + 88) = v21;
        *(_OWORD *)(v5 + 104) = v22;
      }
      else if (v20)
      {
        *(void *)(v5 + 88) = *((void *)v6 + 11);
        *(_OWORD *)(v5 + 96) = v6[6];
        *(unsigned char *)(v5 + 128) = 1;
        swift_retain();
      }
      else
      {
        uint64_t v23 = *((void *)v6 + 14);
        *(void *)(v5 + 112) = v23;
        *(void *)(v5 + 120) = *((void *)v6 + 15);
        (**(void (***)(uint64_t, uint64_t))(v23 - 8))(v5 + 88, (uint64_t)v6 + 88);
        *(unsigned char *)(v5 + 128) = 0;
      }
      long long v24 = *(long long *)((char *)v6 + 136);
      *(unsigned char *)(v5 + 152) = *((unsigned char *)v6 + 152);
      *(_OWORD *)(v5 + 136) = v24;
      uint64_t v25 = *((void *)v6 + 20);
      *(unsigned char *)(v5 + 168) = *((unsigned char *)v6 + 168);
      *(void *)(v5 + 160) = v25;
      long long v26 = v6[11];
      long long v27 = v6[12];
      *(unsigned char *)(v5 + 208) = *((unsigned char *)v6 + 208);
      *(_OWORD *)(v5 + 176) = v26;
      *(_OWORD *)(v5 + 192) = v27;
      uint64_t v28 = v7[11];
      uint64_t v29 = (void *)(v5 + v28);
      uint64_t v30 = (char *)v6 + v28;
      uint64_t v31 = sub_21FA24C90();
      uint64_t v32 = *(void *)(v31 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
      {
        uint64_t v33 = sub_21F76CA40(&qword_26AD47C20);
        memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      }
      uint64_t v34 = v7[12];
      uint64_t v35 = v5 + v34;
      uint64_t v36 = (uint64_t *)((char *)v6 + v34);
      uint64_t v37 = *v36;
      *(unsigned char *)(v35 + 8) = *((unsigned char *)v36 + 8);
      *(void *)uint64_t v35 = v37;
      *(void *)(v5 + v7[13]) = *(void *)((char *)v6 + v7[13]);
      uint64_t v38 = v7[14];
      uint64_t v39 = (void *)(v5 + v38);
      uint64_t v40 = (char *)v6 + v38;
      uint64_t v41 = sub_21FA25910();
      uint64_t v42 = *(void *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
      {
        uint64_t v43 = sub_21F76CA40(&qword_26AD4A3B8);
        memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v42 + 16))(v39, v40, v41);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
      }
      uint64_t v44 = v7[15];
      uint64_t v45 = v5 + v44;
      uint64_t v46 = (uint64_t)v6 + v44;
      *(void *)uint64_t v45 = *(void *)v46;
      *(_WORD *)(v45 + 8) = *(_WORD *)(v46 + 8);
      *(void *)(v5 + v7[16]) = *(void *)((char *)v6 + v7[16]);
      *(void *)(v5 + v7[17]) = *(void *)((char *)v6 + v7[17]);
      uint64_t v47 = v7[18];
      uint64_t v48 = v5 + v47;
      uint64_t v49 = (uint64_t)v6 + v47;
      uint64_t v50 = *(void *)((char *)v6 + v47 + 24);
      swift_retain();
      if (v50)
      {
        uint64_t v51 = *(void *)v49;
        uint64_t v52 = *(void *)(v49 + 8);
        char v53 = *(unsigned char *)(v49 + 16);
        sub_21F7652C0(*(void *)v49, v52, v53);
        *(void *)uint64_t v48 = v51;
        *(void *)(v48 + 8) = v52;
        *(unsigned char *)(v48 + 16) = v53;
        *(void *)(v48 + 24) = *(void *)(v49 + 24);
        uint64_t v54 = *(void *)(v49 + 32);
        uint64_t v55 = *(void *)(v49 + 40);
        char v56 = *(unsigned char *)(v49 + 48);
        swift_bridgeObjectRetain();
        sub_21F770E44(v54, v55, v56);
        *(void *)(v48 + 32) = v54;
        *(void *)(v48 + 40) = v55;
        *(unsigned char *)(v48 + 48) = v56;
        *(_OWORD *)(v48 + 56) = *(_OWORD *)(v49 + 56);
      }
      else
      {
        *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
        long long v57 = *(_OWORD *)(v49 + 16);
        long long v58 = *(_OWORD *)(v49 + 32);
        long long v59 = *(_OWORD *)(v49 + 48);
        *(void *)(v48 + 64) = *(void *)(v49 + 64);
        *(_OWORD *)(v48 + 32) = v58;
        *(_OWORD *)(v48 + 48) = v59;
        *(_OWORD *)(v48 + 16) = v57;
      }
      uint64_t v60 = v7[19];
      uint64_t v61 = v5 + v60;
      uint64_t v62 = (uint64_t)v6 + v60;
      if (*(void *)((char *)v6 + v60 + 24))
      {
        uint64_t v63 = *(void *)v62;
        uint64_t v64 = *(void *)(v62 + 8);
        char v65 = *(unsigned char *)(v62 + 16);
        sub_21F7652C0(*(void *)v62, v64, v65);
        *(void *)uint64_t v61 = v63;
        *(void *)(v61 + 8) = v64;
        *(unsigned char *)(v61 + 16) = v65;
        *(void *)(v61 + 24) = *(void *)(v62 + 24);
        uint64_t v66 = *(void *)(v62 + 32);
        uint64_t v67 = *(void *)(v62 + 40);
        char v68 = *(unsigned char *)(v62 + 48);
        swift_bridgeObjectRetain();
        sub_21F770E44(v66, v67, v68);
        *(void *)(v61 + 32) = v66;
        *(void *)(v61 + 40) = v67;
        *(unsigned char *)(v61 + 48) = v68;
        *(_OWORD *)(v61 + 56) = *(_OWORD *)(v62 + 56);
      }
      else
      {
        *(_OWORD *)uint64_t v61 = *(_OWORD *)v62;
        long long v69 = *(_OWORD *)(v62 + 16);
        long long v70 = *(_OWORD *)(v62 + 32);
        long long v71 = *(_OWORD *)(v62 + 48);
        *(void *)(v61 + 64) = *(void *)(v62 + 64);
        *(_OWORD *)(v61 + 32) = v70;
        *(_OWORD *)(v61 + 48) = v71;
        *(_OWORD *)(v61 + 16) = v69;
      }
      uint64_t v72 = v7[20];
      uint64_t v73 = v5 + v72;
      uint64_t v74 = (uint64_t)v6 + v72;
      if (*(void *)((char *)v6 + v72 + 24))
      {
        uint64_t v75 = *(void *)v74;
        uint64_t v76 = *(void *)(v74 + 8);
        char v77 = *(unsigned char *)(v74 + 16);
        sub_21F7652C0(*(void *)v74, v76, v77);
        *(void *)uint64_t v73 = v75;
        *(void *)(v73 + 8) = v76;
        *(unsigned char *)(v73 + 16) = v77;
        *(void *)(v73 + 24) = *(void *)(v74 + 24);
        uint64_t v78 = *(void *)(v74 + 32);
        uint64_t v79 = *(void *)(v74 + 40);
        char v80 = *(unsigned char *)(v74 + 48);
        swift_bridgeObjectRetain();
        sub_21F770E44(v78, v79, v80);
        *(void *)(v73 + 32) = v78;
        *(void *)(v73 + 40) = v79;
        *(unsigned char *)(v73 + 48) = v80;
        *(_OWORD *)(v73 + 56) = *(_OWORD *)(v74 + 56);
      }
      else
      {
        *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
        long long v81 = *(_OWORD *)(v74 + 16);
        long long v82 = *(_OWORD *)(v74 + 32);
        long long v83 = *(_OWORD *)(v74 + 48);
        *(void *)(v73 + 64) = *(void *)(v74 + 64);
        *(_OWORD *)(v73 + 32) = v82;
        *(_OWORD *)(v73 + 48) = v83;
        *(_OWORD *)(v73 + 16) = v81;
      }
      uint64_t v84 = v7[21];
      uint64_t v85 = v5 + v84;
      uint64_t v86 = (uint64_t)v6 + v84;
      if (*(void *)((char *)v6 + v84 + 24))
      {
        uint64_t v87 = *(void *)v86;
        uint64_t v88 = *(void *)(v86 + 8);
        char v89 = *(unsigned char *)(v86 + 16);
        sub_21F7652C0(*(void *)v86, v88, v89);
        *(void *)uint64_t v85 = v87;
        *(void *)(v85 + 8) = v88;
        *(unsigned char *)(v85 + 16) = v89;
        *(void *)(v85 + 24) = *(void *)(v86 + 24);
        uint64_t v90 = *(void *)(v86 + 32);
        uint64_t v91 = *(void *)(v86 + 40);
        char v92 = *(unsigned char *)(v86 + 48);
        swift_bridgeObjectRetain();
        sub_21F770E44(v90, v91, v92);
        *(void *)(v85 + 32) = v90;
        *(void *)(v85 + 40) = v91;
        *(unsigned char *)(v85 + 48) = v92;
        *(_OWORD *)(v85 + 56) = *(_OWORD *)(v86 + 56);
      }
      else
      {
        *(_OWORD *)uint64_t v85 = *(_OWORD *)v86;
        long long v93 = *(_OWORD *)(v86 + 16);
        long long v94 = *(_OWORD *)(v86 + 32);
        long long v95 = *(_OWORD *)(v86 + 48);
        *(void *)(v85 + 64) = *(void *)(v86 + 64);
        *(_OWORD *)(v85 + 32) = v94;
        *(_OWORD *)(v85 + 48) = v95;
        *(_OWORD *)(v85 + 16) = v93;
      }
      uint64_t v96 = v7[22];
      uint64_t v97 = v5 + v96;
      char v98 = (long long *)((char *)v6 + v96);
      long long v99 = *v98;
      *(void *)(v97 + 16) = *((void *)v98 + 2);
      *(_OWORD *)uint64_t v97 = v99;
      uint64_t v100 = v7[23];
      uint64_t v101 = v5 + v100;
      long long v102 = (long long *)((char *)v6 + v100);
      long long v103 = *v102;
      *(void *)(v101 + 16) = *((void *)v102 + 2);
      *(_OWORD *)uint64_t v101 = v103;
      uint64_t v104 = v7[24];
      uint64_t v105 = v5 + v104;
      uint64_t v106 = (uint64_t)v6 + v104;
      if (*(void *)((char *)v6 + v104 + 24))
      {
        uint64_t v107 = *(void *)v106;
        uint64_t v108 = *(void *)(v106 + 8);
        char v109 = *(unsigned char *)(v106 + 16);
        sub_21F7652C0(*(void *)v106, v108, v109);
        *(void *)uint64_t v105 = v107;
        *(void *)(v105 + 8) = v108;
        *(unsigned char *)(v105 + 16) = v109;
        *(void *)(v105 + 24) = *(void *)(v106 + 24);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v110 = *(_OWORD *)(v106 + 16);
        *(_OWORD *)uint64_t v105 = *(_OWORD *)v106;
        *(_OWORD *)(v105 + 16) = v110;
      }
      uint64_t v111 = v7[25];
      uint64_t v112 = v5 + v111;
      uint64_t v113 = (uint64_t)v6 + v111;
      if (*(void *)((char *)v6 + v111 + 24))
      {
        uint64_t v114 = *(void *)v113;
        uint64_t v115 = *(void *)(v113 + 8);
        char v116 = *(unsigned char *)(v113 + 16);
        sub_21F7652C0(*(void *)v113, v115, v116);
        *(void *)uint64_t v112 = v114;
        *(void *)(v112 + 8) = v115;
        *(unsigned char *)(v112 + 16) = v116;
        *(void *)(v112 + 24) = *(void *)(v113 + 24);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v117 = *(_OWORD *)(v113 + 16);
        *(_OWORD *)uint64_t v112 = *(_OWORD *)v113;
        *(_OWORD *)(v112 + 16) = v117;
      }
      uint64_t v118 = v7[26];
      uint64_t v119 = (void *)(v5 + v118);
      uint64_t v120 = (void *)((char *)v6 + v118);
      *uint64_t v119 = *v120;
      v119[1] = v120[1];
      *(unsigned char *)(v5 + v7[27]) = *((unsigned char *)v6 + v7[27]);
      uint64_t v121 = v7[28];
      uint64_t v122 = v5 + v121;
      uint64_t v123 = (uint64_t)v6 + v121;
      uint64_t v124 = *(void *)(v123 + 24);
      swift_bridgeObjectRetain();
      if (v124)
      {
        *(void *)(v122 + 24) = v124;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v124 - 8))(v122, v123, v124);
      }
      else
      {
        long long v125 = *(_OWORD *)(v123 + 16);
        *(_OWORD *)uint64_t v122 = *(_OWORD *)v123;
        *(_OWORD *)(v122 + 16) = v125;
      }
      (*(void (**)(uint64_t, void, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
      return a1;
    }
LABEL_7:
    uint64_t v15 = sub_21F76CA40(qword_267EE7A88);
    memcpy((void *)v5, v6, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  if (v11)
  {
    sub_21F991D6C(v5, type metadata accessor for ChartContentRenderContext.Environment);
    goto LABEL_7;
  }
  int v16 = *((unsigned __int8 *)v6 + 40);
  if (*(unsigned __int8 *)(v5 + 40) == 255)
  {
    if (v16 == 255)
    {
      long long v127 = *v6;
      long long v128 = v6[1];
      *(_OWORD *)(v5 + 25) = *(long long *)((char *)v6 + 25);
      *(_OWORD *)uint64_t v5 = v127;
      *(_OWORD *)(v5 + 16) = v128;
      goto LABEL_55;
    }
    if (v16) {
      goto LABEL_52;
    }
LABEL_54:
    *(void *)uint64_t v5 = *(void *)v6;
    *(unsigned char *)(v5 + 40) = 0;
    swift_retain();
    goto LABEL_55;
  }
  if (v16 == 255)
  {
    sub_21F7D25BC(v5);
    long long v17 = *(long long *)((char *)v6 + 25);
    long long v18 = v6[1];
    *(_OWORD *)uint64_t v5 = *v6;
    *(_OWORD *)(v5 + 16) = v18;
    *(_OWORD *)(v5 + 25) = v17;
    goto LABEL_55;
  }
  if (a1 != a2)
  {
    sub_21F7D25BC(v5);
    if (*((unsigned char *)v6 + 40))
    {
LABEL_52:
      uint64_t v129 = *((void *)v6 + 3);
      *(void *)(v5 + 24) = v129;
      *(void *)(v5 + 32) = *((void *)v6 + 4);
      (**(void (***)(uint64_t, long long *))(v129 - 8))(v5, v6);
      *(unsigned char *)(v5 + 40) = 1;
      goto LABEL_55;
    }
    goto LABEL_54;
  }
LABEL_55:
  *(unsigned char *)(v5 + 41) = *((unsigned char *)v6 + 41);
  *(void *)(v5 + 48) = *((void *)v6 + 6);
  *(_DWORD *)(v5 + 56) = *((_DWORD *)v6 + 14);
  *(_DWORD *)(v5 + 60) = *((_DWORD *)v6 + 15);
  *(void *)(v5 + 64) = *((void *)v6 + 8);
  *(void *)(v5 + 72) = *((void *)v6 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v5 + 80) = *((void *)v6 + 10);
  uint64_t v130 = (long long *)(v5 + 88);
  char v131 = (long long *)((char *)v6 + 88);
  int v132 = *((unsigned __int8 *)v6 + 128);
  if (*(unsigned __int8 *)(v5 + 128) == 255)
  {
    if (v132 == 255)
    {
      long long v135 = *v131;
      long long v136 = *(long long *)((char *)v6 + 104);
      *(_OWORD *)(v5 + 113) = *(long long *)((char *)v6 + 113);
      long long *v130 = v135;
      *(_OWORD *)(v5 + 104) = v136;
      goto LABEL_65;
    }
    if (v132) {
      goto LABEL_62;
    }
LABEL_64:
    uint64_t v137 = *((void *)v6 + 14);
    *(void *)(v5 + 112) = v137;
    *(void *)(v5 + 120) = *((void *)v6 + 15);
    (**(void (***)(uint64_t, uint64_t))(v137 - 8))(v5 + 88, (uint64_t)v6 + 88);
    *(unsigned char *)(v5 + 128) = 0;
    goto LABEL_65;
  }
  if (v132 == 255)
  {
    sub_21F7D2610(v5 + 88);
    long long v133 = *(long long *)((char *)v6 + 113);
    long long v134 = *(long long *)((char *)v6 + 104);
    long long *v130 = *v131;
    *(_OWORD *)(v5 + 104) = v134;
    *(_OWORD *)(v5 + 113) = v133;
    goto LABEL_65;
  }
  if (a1 != a2)
  {
    sub_21F7D2610(v5 + 88);
    if (v6[8])
    {
LABEL_62:
      *(void *)(v5 + 88) = *((void *)v6 + 11);
      *(_OWORD *)(v5 + 96) = v6[6];
      *(unsigned char *)(v5 + 128) = 1;
      swift_retain();
      goto LABEL_65;
    }
    goto LABEL_64;
  }
LABEL_65:
  long long v138 = *(long long *)((char *)v6 + 136);
  *(unsigned char *)(v5 + 152) = *((unsigned char *)v6 + 152);
  *(_OWORD *)(v5 + 136) = v138;
  uint64_t v139 = *((void *)v6 + 20);
  *(unsigned char *)(v5 + 168) = *((unsigned char *)v6 + 168);
  *(void *)(v5 + 160) = v139;
  long long v140 = v6[11];
  long long v141 = v6[12];
  *(unsigned char *)(v5 + 208) = *((unsigned char *)v6 + 208);
  *(_OWORD *)(v5 + 176) = v140;
  *(_OWORD *)(v5 + 192) = v141;
  uint64_t v142 = v7[11];
  uint64_t v143 = (void *)(v5 + v142);
  uint64_t v144 = (char *)v6 + v142;
  uint64_t v145 = sub_21FA24C90();
  uint64_t v146 = *(void *)(v145 - 8);
  uint64_t v147 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v146 + 48);
  char v330 = v143;
  LODWORD(v143) = v147(v143, 1, v145);
  int v148 = v147(v144, 1, v145);
  if (v143)
  {
    if (v148)
    {
      size_t v149 = *(void *)(*(void *)(sub_21F76CA40(&qword_26AD47C20) - 8) + 64);
      uint64_t v150 = v330;
LABEL_70:
      memcpy(v150, v144, v149);
      goto LABEL_73;
    }
    (*(void (**)(void *, char *, uint64_t))(v146 + 16))(v330, v144, v145);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v146 + 56))(v330, 0, 1, v145);
  }
  else
  {
    if (v148)
    {
      (*(void (**)(void *, uint64_t))(v146 + 8))(v330, v145);
      size_t v149 = *(void *)(*(void *)(sub_21F76CA40(&qword_26AD47C20) - 8) + 64);
      uint64_t v150 = v330;
      goto LABEL_70;
    }
    (*(void (**)(void *, char *, uint64_t))(v146 + 24))(v330, v144, v145);
  }
LABEL_73:
  uint64_t v151 = v7[12];
  uint64_t v152 = v5 + v151;
  long long v153 = (uint64_t *)((char *)v6 + v151);
  uint64_t v154 = *v153;
  *(unsigned char *)(v152 + 8) = *((unsigned char *)v153 + 8);
  *(void *)uint64_t v152 = v154;
  *(void *)(v5 + v7[13]) = *(void *)((char *)v6 + v7[13]);
  uint64_t v155 = v7[14];
  uint64_t v156 = (void *)(v5 + v155);
  uint64_t v157 = (char *)v6 + v155;
  uint64_t v158 = sub_21FA25910();
  uint64_t v159 = *(void *)(v158 - 8);
  uint64_t v160 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v159 + 48);
  uint64_t v331 = v156;
  LODWORD(v156) = v160(v156, 1, v158);
  int v161 = v160(v157, 1, v158);
  if (v156)
  {
    if (v161)
    {
      size_t v162 = *(void *)(*(void *)(sub_21F76CA40(&qword_26AD4A3B8) - 8) + 64);
      uint64_t v163 = v331;
LABEL_78:
      memcpy(v163, v157, v162);
      goto LABEL_81;
    }
    (*(void (**)(void *, char *, uint64_t))(v159 + 16))(v331, v157, v158);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v159 + 56))(v331, 0, 1, v158);
  }
  else
  {
    if (v161)
    {
      (*(void (**)(void *, uint64_t))(v159 + 8))(v331, v158);
      size_t v162 = *(void *)(*(void *)(sub_21F76CA40(&qword_26AD4A3B8) - 8) + 64);
      uint64_t v163 = v331;
      goto LABEL_78;
    }
    (*(void (**)(void *, char *, uint64_t))(v159 + 24))(v331, v157, v158);
  }
LABEL_81:
  uint64_t v164 = v7[15];
  uint64_t v165 = v5 + v164;
  uint64_t v166 = (uint64_t)v6 + v164;
  *(void *)(v5 + v164) = *(void *)((char *)v6 + v164);
  swift_retain();
  swift_release();
  *(unsigned char *)(v165 + 8) = *(unsigned char *)(v166 + 8);
  *(unsigned char *)(v165 + 9) = *(unsigned char *)(v166 + 9);
  *(void *)(v5 + v7[16]) = *(void *)((char *)v6 + v7[16]);
  *(void *)(v5 + v7[17]) = *(void *)((char *)v6 + v7[17]);
  uint64_t v167 = v7[18];
  uint64_t v168 = v5 + v167;
  uint64_t v169 = (uint64_t)v6 + v167;
  uint64_t v170 = *(void *)(v5 + v167 + 24);
  uint64_t v171 = *(void *)((char *)v6 + v167 + 24);
  if (v170)
  {
    if (v171)
    {
      uint64_t v172 = *(void *)v169;
      uint64_t v173 = *(void *)(v169 + 8);
      char v174 = *(unsigned char *)(v169 + 16);
      sub_21F7652C0(*(void *)v169, v173, v174);
      uint64_t v175 = *(void *)v168;
      uint64_t v176 = *(void *)(v168 + 8);
      char v177 = *(unsigned char *)(v168 + 16);
      *(void *)uint64_t v168 = v172;
      *(void *)(v168 + 8) = v173;
      *(unsigned char *)(v168 + 16) = v174;
      sub_21F7656A8(v175, v176, v177);
      *(void *)(v168 + 24) = *(void *)(v169 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v178 = *(void *)(v169 + 32);
      uint64_t v179 = *(void *)(v169 + 40);
      char v180 = *(unsigned char *)(v169 + 48);
      sub_21F770E44(v178, v179, v180);
      uint64_t v181 = *(void *)(v168 + 32);
      uint64_t v182 = *(void *)(v168 + 40);
      *(void *)(v168 + 32) = v178;
      *(void *)(v168 + 40) = v179;
      char v183 = *(unsigned char *)(v168 + 48);
      *(unsigned char *)(v168 + 48) = v180;
      sub_21F770E38(v181, v182, v183);
LABEL_86:
      *(_OWORD *)(v168 + 56) = *(_OWORD *)(v169 + 56);
      goto LABEL_89;
    }
    sub_21F7D2664(v168);
    *(_OWORD *)uint64_t v168 = *(_OWORD *)v169;
    long long v191 = *(_OWORD *)(v169 + 32);
    long long v190 = *(_OWORD *)(v169 + 48);
    long long v192 = *(_OWORD *)(v169 + 16);
    *(void *)(v168 + 64) = *(void *)(v169 + 64);
    *(_OWORD *)(v168 + 32) = v191;
    *(_OWORD *)(v168 + 48) = v190;
    *(_OWORD *)(v168 + 16) = v192;
  }
  else
  {
    if (v171)
    {
      uint64_t v184 = *(void *)v169;
      uint64_t v185 = *(void *)(v169 + 8);
      char v186 = *(unsigned char *)(v169 + 16);
      sub_21F7652C0(*(void *)v169, v185, v186);
      *(void *)uint64_t v168 = v184;
      *(void *)(v168 + 8) = v185;
      *(unsigned char *)(v168 + 16) = v186;
      *(void *)(v168 + 24) = *(void *)(v169 + 24);
      uint64_t v187 = *(void *)(v169 + 32);
      uint64_t v188 = *(void *)(v169 + 40);
      char v189 = *(unsigned char *)(v169 + 48);
      swift_bridgeObjectRetain();
      sub_21F770E44(v187, v188, v189);
      *(void *)(v168 + 32) = v187;
      *(void *)(v168 + 40) = v188;
      *(unsigned char *)(v168 + 48) = v189;
      goto LABEL_86;
    }
    *(_OWORD *)uint64_t v168 = *(_OWORD *)v169;
    long long v193 = *(_OWORD *)(v169 + 16);
    long long v194 = *(_OWORD *)(v169 + 32);
    long long v195 = *(_OWORD *)(v169 + 48);
    *(void *)(v168 + 64) = *(void *)(v169 + 64);
    *(_OWORD *)(v168 + 32) = v194;
    *(_OWORD *)(v168 + 48) = v195;
    *(_OWORD *)(v168 + 16) = v193;
  }
LABEL_89:
  uint64_t v196 = v7[19];
  uint64_t v197 = v5 + v196;
  uint64_t v198 = (uint64_t)v6 + v196;
  uint64_t v199 = *(void *)(v5 + v196 + 24);
  uint64_t v200 = *(void *)((char *)v6 + v196 + 24);
  if (v199)
  {
    if (v200)
    {
      uint64_t v201 = *(void *)v198;
      uint64_t v202 = *(void *)(v198 + 8);
      char v203 = *(unsigned char *)(v198 + 16);
      sub_21F7652C0(*(void *)v198, v202, v203);
      uint64_t v204 = *(void *)v197;
      uint64_t v205 = *(void *)(v197 + 8);
      char v206 = *(unsigned char *)(v197 + 16);
      *(void *)uint64_t v197 = v201;
      *(void *)(v197 + 8) = v202;
      *(unsigned char *)(v197 + 16) = v203;
      sub_21F7656A8(v204, v205, v206);
      *(void *)(v197 + 24) = *(void *)(v198 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v207 = *(void *)(v198 + 32);
      uint64_t v208 = *(void *)(v198 + 40);
      char v209 = *(unsigned char *)(v198 + 48);
      sub_21F770E44(v207, v208, v209);
      uint64_t v210 = *(void *)(v197 + 32);
      uint64_t v211 = *(void *)(v197 + 40);
      *(void *)(v197 + 32) = v207;
      *(void *)(v197 + 40) = v208;
      char v212 = *(unsigned char *)(v197 + 48);
      *(unsigned char *)(v197 + 48) = v209;
      sub_21F770E38(v210, v211, v212);
LABEL_94:
      *(_OWORD *)(v197 + 56) = *(_OWORD *)(v198 + 56);
      goto LABEL_97;
    }
    sub_21F7D2664(v197);
    *(_OWORD *)uint64_t v197 = *(_OWORD *)v198;
    long long v220 = *(_OWORD *)(v198 + 32);
    long long v219 = *(_OWORD *)(v198 + 48);
    long long v221 = *(_OWORD *)(v198 + 16);
    *(void *)(v197 + 64) = *(void *)(v198 + 64);
    *(_OWORD *)(v197 + 32) = v220;
    *(_OWORD *)(v197 + 48) = v219;
    *(_OWORD *)(v197 + 16) = v221;
  }
  else
  {
    if (v200)
    {
      uint64_t v213 = *(void *)v198;
      uint64_t v214 = *(void *)(v198 + 8);
      char v215 = *(unsigned char *)(v198 + 16);
      sub_21F7652C0(*(void *)v198, v214, v215);
      *(void *)uint64_t v197 = v213;
      *(void *)(v197 + 8) = v214;
      *(unsigned char *)(v197 + 16) = v215;
      *(void *)(v197 + 24) = *(void *)(v198 + 24);
      uint64_t v216 = *(void *)(v198 + 32);
      uint64_t v217 = *(void *)(v198 + 40);
      char v218 = *(unsigned char *)(v198 + 48);
      swift_bridgeObjectRetain();
      sub_21F770E44(v216, v217, v218);
      *(void *)(v197 + 32) = v216;
      *(void *)(v197 + 40) = v217;
      *(unsigned char *)(v197 + 48) = v218;
      goto LABEL_94;
    }
    *(_OWORD *)uint64_t v197 = *(_OWORD *)v198;
    long long v222 = *(_OWORD *)(v198 + 16);
    long long v223 = *(_OWORD *)(v198 + 32);
    long long v224 = *(_OWORD *)(v198 + 48);
    *(void *)(v197 + 64) = *(void *)(v198 + 64);
    *(_OWORD *)(v197 + 32) = v223;
    *(_OWORD *)(v197 + 48) = v224;
    *(_OWORD *)(v197 + 16) = v222;
  }
LABEL_97:
  uint64_t v225 = v7[20];
  uint64_t v226 = v5 + v225;
  uint64_t v227 = (uint64_t)v6 + v225;
  uint64_t v228 = *(void *)(v5 + v225 + 24);
  uint64_t v229 = *(void *)((char *)v6 + v225 + 24);
  if (v228)
  {
    if (v229)
    {
      uint64_t v230 = *(void *)v227;
      uint64_t v231 = *(void *)(v227 + 8);
      char v232 = *(unsigned char *)(v227 + 16);
      sub_21F7652C0(*(void *)v227, v231, v232);
      uint64_t v233 = *(void *)v226;
      uint64_t v234 = *(void *)(v226 + 8);
      char v235 = *(unsigned char *)(v226 + 16);
      *(void *)uint64_t v226 = v230;
      *(void *)(v226 + 8) = v231;
      *(unsigned char *)(v226 + 16) = v232;
      sub_21F7656A8(v233, v234, v235);
      *(void *)(v226 + 24) = *(void *)(v227 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v236 = *(void *)(v227 + 32);
      uint64_t v237 = *(void *)(v227 + 40);
      char v238 = *(unsigned char *)(v227 + 48);
      sub_21F770E44(v236, v237, v238);
      uint64_t v239 = *(void *)(v226 + 32);
      uint64_t v240 = *(void *)(v226 + 40);
      *(void *)(v226 + 32) = v236;
      *(void *)(v226 + 40) = v237;
      char v241 = *(unsigned char *)(v226 + 48);
      *(unsigned char *)(v226 + 48) = v238;
      sub_21F770E38(v239, v240, v241);
LABEL_102:
      *(_OWORD *)(v226 + 56) = *(_OWORD *)(v227 + 56);
      goto LABEL_105;
    }
    sub_21F7D2664(v226);
    *(_OWORD *)uint64_t v226 = *(_OWORD *)v227;
    long long v249 = *(_OWORD *)(v227 + 32);
    long long v248 = *(_OWORD *)(v227 + 48);
    long long v250 = *(_OWORD *)(v227 + 16);
    *(void *)(v226 + 64) = *(void *)(v227 + 64);
    *(_OWORD *)(v226 + 32) = v249;
    *(_OWORD *)(v226 + 48) = v248;
    *(_OWORD *)(v226 + 16) = v250;
  }
  else
  {
    if (v229)
    {
      uint64_t v242 = *(void *)v227;
      uint64_t v243 = *(void *)(v227 + 8);
      char v244 = *(unsigned char *)(v227 + 16);
      sub_21F7652C0(*(void *)v227, v243, v244);
      *(void *)uint64_t v226 = v242;
      *(void *)(v226 + 8) = v243;
      *(unsigned char *)(v226 + 16) = v244;
      *(void *)(v226 + 24) = *(void *)(v227 + 24);
      uint64_t v245 = *(void *)(v227 + 32);
      uint64_t v246 = *(void *)(v227 + 40);
      char v247 = *(unsigned char *)(v227 + 48);
      swift_bridgeObjectRetain();
      sub_21F770E44(v245, v246, v247);
      *(void *)(v226 + 32) = v245;
      *(void *)(v226 + 40) = v246;
      *(unsigned char *)(v226 + 48) = v247;
      goto LABEL_102;
    }
    *(_OWORD *)uint64_t v226 = *(_OWORD *)v227;
    long long v251 = *(_OWORD *)(v227 + 16);
    long long v252 = *(_OWORD *)(v227 + 32);
    long long v253 = *(_OWORD *)(v227 + 48);
    *(void *)(v226 + 64) = *(void *)(v227 + 64);
    *(_OWORD *)(v226 + 32) = v252;
    *(_OWORD *)(v226 + 48) = v253;
    *(_OWORD *)(v226 + 16) = v251;
  }
LABEL_105:
  uint64_t v254 = v7[21];
  uint64_t v255 = v5 + v254;
  char v256 = (uint64_t *)((char *)v6 + v254);
  uint64_t v257 = *(void *)(v5 + v254 + 24);
  uint64_t v258 = *(void *)((char *)v6 + v254 + 24);
  if (v257)
  {
    if (!v258)
    {
      sub_21F7D2664(v255);
      *(_OWORD *)uint64_t v255 = *(_OWORD *)v256;
      long long v278 = *((_OWORD *)v256 + 2);
      long long v277 = *((_OWORD *)v256 + 3);
      long long v279 = *((_OWORD *)v256 + 1);
      *(void *)(v255 + 64) = v256[8];
      *(_OWORD *)(v255 + 32) = v278;
      *(_OWORD *)(v255 + 48) = v277;
      *(_OWORD *)(v255 + 16) = v279;
      goto LABEL_113;
    }
    uint64_t v259 = *v256;
    uint64_t v260 = v256[1];
    char v261 = *((unsigned char *)v256 + 16);
    sub_21F7652C0(*v256, v260, v261);
    uint64_t v262 = *(void *)v255;
    uint64_t v263 = *(void *)(v255 + 8);
    char v264 = *(unsigned char *)(v255 + 16);
    *(void *)uint64_t v255 = v259;
    *(void *)(v255 + 8) = v260;
    *(unsigned char *)(v255 + 16) = v261;
    sub_21F7656A8(v262, v263, v264);
    *(void *)(v255 + 24) = v256[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v265 = v256[4];
    uint64_t v266 = v256[5];
    char v267 = *((unsigned char *)v256 + 48);
    sub_21F770E44(v265, v266, v267);
    uint64_t v268 = *(void *)(v255 + 32);
    uint64_t v269 = *(void *)(v255 + 40);
    *(void *)(v255 + 32) = v265;
    *(void *)(v255 + 40) = v266;
    char v270 = *(unsigned char *)(v255 + 48);
    *(unsigned char *)(v255 + 48) = v267;
    sub_21F770E38(v268, v269, v270);
  }
  else
  {
    if (!v258)
    {
      *(_OWORD *)uint64_t v255 = *(_OWORD *)v256;
      long long v280 = *((_OWORD *)v256 + 1);
      long long v281 = *((_OWORD *)v256 + 2);
      long long v282 = *((_OWORD *)v256 + 3);
      *(void *)(v255 + 64) = v256[8];
      *(_OWORD *)(v255 + 32) = v281;
      *(_OWORD *)(v255 + 48) = v282;
      *(_OWORD *)(v255 + 16) = v280;
      goto LABEL_113;
    }
    uint64_t v271 = *v256;
    uint64_t v272 = v256[1];
    char v273 = *((unsigned char *)v256 + 16);
    sub_21F7652C0(*v256, v272, v273);
    *(void *)uint64_t v255 = v271;
    *(void *)(v255 + 8) = v272;
    *(unsigned char *)(v255 + 16) = v273;
    *(void *)(v255 + 24) = v256[3];
    uint64_t v274 = v256[4];
    uint64_t v275 = v256[5];
    char v276 = *((unsigned char *)v256 + 48);
    swift_bridgeObjectRetain();
    sub_21F770E44(v274, v275, v276);
    *(void *)(v255 + 32) = v274;
    *(void *)(v255 + 40) = v275;
    *(unsigned char *)(v255 + 48) = v276;
  }
  *(_OWORD *)(v255 + 56) = *(_OWORD *)(v256 + 7);
LABEL_113:
  uint64_t v283 = v7[22];
  uint64_t v284 = (void *)(v5 + v283);
  char v285 = (void *)((char *)v6 + v283);
  *uint64_t v284 = *v285;
  v284[1] = v285[1];
  v284[2] = v285[2];
  uint64_t v286 = v7[23];
  uint64_t v287 = (void *)(v5 + v286);
  char v288 = (void *)((char *)v6 + v286);
  *uint64_t v287 = *v288;
  v287[1] = v288[1];
  v287[2] = v288[2];
  uint64_t v289 = v7[24];
  uint64_t v290 = v5 + v289;
  uint64_t v291 = (uint64_t)v6 + v289;
  uint64_t v292 = *(void *)(v5 + v289 + 24);
  uint64_t v293 = *(void *)((char *)v6 + v289 + 24);
  if (v292)
  {
    if (v293)
    {
      uint64_t v294 = *(void *)v291;
      uint64_t v295 = *(void *)(v291 + 8);
      char v296 = *(unsigned char *)(v291 + 16);
      sub_21F7652C0(*(void *)v291, v295, v296);
      uint64_t v297 = *(void *)v290;
      uint64_t v298 = *(void *)(v290 + 8);
      char v299 = *(unsigned char *)(v290 + 16);
      *(void *)uint64_t v290 = v294;
      *(void *)(v290 + 8) = v295;
      *(unsigned char *)(v290 + 16) = v296;
      sub_21F7656A8(v297, v298, v299);
      *(void *)(v290 + 24) = *(void *)(v291 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21F7D26B8(v290);
      long long v303 = *(_OWORD *)(v291 + 16);
      *(_OWORD *)uint64_t v290 = *(_OWORD *)v291;
      *(_OWORD *)(v290 + 16) = v303;
    }
  }
  else if (v293)
  {
    uint64_t v300 = *(void *)v291;
    uint64_t v301 = *(void *)(v291 + 8);
    char v302 = *(unsigned char *)(v291 + 16);
    sub_21F7652C0(*(void *)v291, v301, v302);
    *(void *)uint64_t v290 = v300;
    *(void *)(v290 + 8) = v301;
    *(unsigned char *)(v290 + 16) = v302;
    *(void *)(v290 + 24) = *(void *)(v291 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v304 = *(_OWORD *)(v291 + 16);
    *(_OWORD *)uint64_t v290 = *(_OWORD *)v291;
    *(_OWORD *)(v290 + 16) = v304;
  }
  uint64_t v305 = v7[25];
  uint64_t v306 = v5 + v305;
  uint64_t v307 = (uint64_t)v6 + v305;
  uint64_t v308 = *(void *)(v5 + v305 + 24);
  uint64_t v309 = *(void *)((char *)v6 + v305 + 24);
  if (v308)
  {
    if (v309)
    {
      uint64_t v310 = *(void *)v307;
      uint64_t v311 = *(void *)(v307 + 8);
      char v312 = *(unsigned char *)(v307 + 16);
      sub_21F7652C0(*(void *)v307, v311, v312);
      uint64_t v313 = *(void *)v306;
      uint64_t v314 = *(void *)(v306 + 8);
      char v315 = *(unsigned char *)(v306 + 16);
      *(void *)uint64_t v306 = v310;
      *(void *)(v306 + 8) = v311;
      *(unsigned char *)(v306 + 16) = v312;
      sub_21F7656A8(v313, v314, v315);
      *(void *)(v306 + 24) = *(void *)(v307 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21F7D26B8(v306);
      long long v319 = *(_OWORD *)(v307 + 16);
      *(_OWORD *)uint64_t v306 = *(_OWORD *)v307;
      *(_OWORD *)(v306 + 16) = v319;
    }
  }
  else if (v309)
  {
    uint64_t v316 = *(void *)v307;
    uint64_t v317 = *(void *)(v307 + 8);
    char v318 = *(unsigned char *)(v307 + 16);
    sub_21F7652C0(*(void *)v307, v317, v318);
    *(void *)uint64_t v306 = v316;
    *(void *)(v306 + 8) = v317;
    *(unsigned char *)(v306 + 16) = v318;
    *(void *)(v306 + 24) = *(void *)(v307 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v320 = *(_OWORD *)(v307 + 16);
    *(_OWORD *)uint64_t v306 = *(_OWORD *)v307;
    *(_OWORD *)(v306 + 16) = v320;
  }
  uint64_t v321 = v7[26];
  v322 = (void *)(v5 + v321);
  uint64_t v323 = (void *)((char *)v6 + v321);
  void *v322 = *v323;
  v322[1] = v323[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v5 + v7[27]) = *((unsigned char *)v6 + v7[27]);
  uint64_t v324 = v7[28];
  uint64_t v325 = v5 + v324;
  uint64_t v326 = (uint64_t)v6 + v324;
  uint64_t v327 = *(void *)(v326 + 24);
  if (*(void *)(v325 + 24))
  {
    if (v327)
    {
      sub_21F7D270C((uint64_t *)v325, (uint64_t *)v326);
    }
    else
    {
      sub_21F7D2934(v325);
      long long v328 = *(_OWORD *)(v326 + 16);
      *(_OWORD *)uint64_t v325 = *(_OWORD *)v326;
      *(_OWORD *)(v325 + 16) = v328;
    }
  }
  else if (v327)
  {
    *(void *)(v325 + 24) = v327;
    (**(void (***)(uint64_t, uint64_t))(v327 - 8))(v325, v326);
  }
  else
  {
    long long v329 = *(_OWORD *)(v326 + 16);
    *(_OWORD *)uint64_t v325 = *(_OWORD *)v326;
    *(_OWORD *)(v325 + 16) = v329;
  }
  return a1;
}

uint64_t sub_21F991D6C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_21F991DCC(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v5 = *(int *)(type metadata accessor for RulesRenderer(0) + 32);
  int v6 = (_OWORD *)(a1 + v5);
  uint64_t v7 = (_OWORD *)(a2 + v5);
  uint64_t v8 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v9 = *((void *)v8 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v9 + 48))(v7, 1, v8))
  {
    uint64_t v10 = sub_21F76CA40(qword_267EE7A88);
    memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    long long v11 = v7[1];
    *int v6 = *v7;
    v6[1] = v11;
    *(_OWORD *)((char *)v6 + 25) = *(_OWORD *)((char *)v7 + 25);
    *((unsigned char *)v6 + 41) = *((unsigned char *)v7 + 41);
    long long v12 = v7[4];
    void v6[3] = v7[3];
    v6[4] = v12;
    *((void *)v6 + 10) = *((void *)v7 + 10);
    long long v13 = *(_OWORD *)((char *)v7 + 88);
    long long v14 = *(_OWORD *)((char *)v7 + 104);
    *(_OWORD *)((char *)v6 + 113) = *(_OWORD *)((char *)v7 + 113);
    *(_OWORD *)((char *)v6 + 104) = v14;
    *(_OWORD *)((char *)v6 + 88) = v13;
    *(_OWORD *)((char *)v6 + 136) = *(_OWORD *)((char *)v7 + 136);
    *((unsigned char *)v6 + 152) = *((unsigned char *)v7 + 152);
    *((void *)v6 + 20) = *((void *)v7 + 20);
    *((unsigned char *)v6 + 168) = *((unsigned char *)v7 + 168);
    long long v15 = v7[12];
    v6[11] = v7[11];
    v6[12] = v15;
    *((unsigned char *)v6 + 208) = *((unsigned char *)v7 + 208);
    uint64_t v16 = v8[11];
    long long v17 = (char *)v6 + v16;
    long long v18 = (char *)v7 + v16;
    uint64_t v19 = sub_21FA24C90();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = sub_21F76CA40(&qword_26AD47C20);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    uint64_t v22 = v8[12];
    uint64_t v23 = (char *)v6 + v22;
    long long v24 = (char *)v7 + v22;
    *(void *)uint64_t v23 = *(void *)v24;
    unsigned __int8 v23[8] = v24[8];
    *(void *)((char *)v6 + v8[13]) = *(void *)((char *)v7 + v8[13]);
    uint64_t v25 = v8[14];
    long long v26 = (char *)v6 + v25;
    long long v27 = (char *)v7 + v25;
    uint64_t v28 = sub_21FA25910();
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      uint64_t v30 = sub_21F76CA40(&qword_26AD4A3B8);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    uint64_t v31 = v8[15];
    uint64_t v32 = (char *)v6 + v31;
    uint64_t v33 = (char *)v7 + v31;
    *(void *)uint64_t v32 = *(void *)v33;
    *((_WORD *)v32 + 4) = *((_WORD *)v33 + 4);
    *(void *)((char *)v6 + v8[16]) = *(void *)((char *)v7 + v8[16]);
    *(void *)((char *)v6 + v8[17]) = *(void *)((char *)v7 + v8[17]);
    uint64_t v34 = v8[18];
    uint64_t v35 = (char *)v6 + v34;
    uint64_t v36 = (char *)v7 + v34;
    long long v37 = *((_OWORD *)v36 + 3);
    *((_OWORD *)v35 + 2) = *((_OWORD *)v36 + 2);
    *((_OWORD *)v35 + 3) = v37;
    *((void *)v35 + 8) = *((void *)v36 + 8);
    long long v38 = *((_OWORD *)v36 + 1);
    *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
    *((_OWORD *)v35 + 1) = v38;
    uint64_t v39 = v8[19];
    uint64_t v40 = (char *)v6 + v39;
    uint64_t v41 = (char *)v7 + v39;
    *((void *)v40 + 8) = *((void *)v41 + 8);
    long long v42 = *((_OWORD *)v41 + 3);
    *((_OWORD *)v40 + 2) = *((_OWORD *)v41 + 2);
    *((_OWORD *)v40 + 3) = v42;
    long long v43 = *((_OWORD *)v41 + 1);
    *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
    *((_OWORD *)v40 + 1) = v43;
    uint64_t v44 = v8[20];
    uint64_t v45 = (char *)v6 + v44;
    uint64_t v46 = (char *)v7 + v44;
    long long v47 = *((_OWORD *)v46 + 3);
    *((_OWORD *)v45 + 2) = *((_OWORD *)v46 + 2);
    *((_OWORD *)v45 + 3) = v47;
    *((void *)v45 + 8) = *((void *)v46 + 8);
    long long v48 = *((_OWORD *)v46 + 1);
    *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
    *((_OWORD *)v45 + 1) = v48;
    uint64_t v49 = v8[21];
    uint64_t v50 = (char *)v6 + v49;
    uint64_t v51 = (char *)v7 + v49;
    *((void *)v50 + 8) = *((void *)v51 + 8);
    long long v52 = *((_OWORD *)v51 + 3);
    *((_OWORD *)v50 + 2) = *((_OWORD *)v51 + 2);
    *((_OWORD *)v50 + 3) = v52;
    long long v53 = *((_OWORD *)v51 + 1);
    *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
    *((_OWORD *)v50 + 1) = v53;
    uint64_t v54 = v8[22];
    uint64_t v55 = (char *)v6 + v54;
    char v56 = (char *)v7 + v54;
    *(_OWORD *)uint64_t v55 = *(_OWORD *)v56;
    *((void *)v55 + 2) = *((void *)v56 + 2);
    uint64_t v57 = v8[23];
    long long v58 = (char *)v6 + v57;
    long long v59 = (char *)v7 + v57;
    *(_OWORD *)long long v58 = *(_OWORD *)v59;
    *((void *)v58 + 2) = *((void *)v59 + 2);
    uint64_t v60 = v8[24];
    uint64_t v61 = (_OWORD *)((char *)v6 + v60);
    uint64_t v62 = (_OWORD *)((char *)v7 + v60);
    long long v63 = v62[1];
    *uint64_t v61 = *v62;
    v61[1] = v63;
    uint64_t v64 = v8[25];
    char v65 = (_OWORD *)((char *)v6 + v64);
    uint64_t v66 = (_OWORD *)((char *)v7 + v64);
    long long v67 = v66[1];
    *char v65 = *v66;
    v65[1] = v67;
    *(_OWORD *)((char *)v6 + v8[26]) = *(_OWORD *)((char *)v7 + v8[26]);
    *((unsigned char *)v6 + v8[27]) = *((unsigned char *)v7 + v8[27]);
    uint64_t v68 = v8[28];
    long long v69 = (_OWORD *)((char *)v6 + v68);
    long long v70 = (_OWORD *)((char *)v7 + v68);
    long long v71 = v70[1];
    *long long v69 = *v70;
    v69[1] = v71;
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t sub_21F99228C(uint64_t a1, uint64_t a2)
{
  _s6Charts15AnyChartContentVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v5 = *(int *)(type metadata accessor for RulesRenderer(0) + 32);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v9 = *((void *)v8 - 1);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v9 + 48);
  int v11 = v10(v6, 1, v8);
  int v12 = v10(v7, 1, v8);
  if (v11)
  {
    if (!v12)
    {
      long long v13 = *(_OWORD *)(v7 + 16);
      *(_OWORD *)uint64_t v6 = *(_OWORD *)v7;
      *(_OWORD *)(v6 + 16) = v13;
      *(_OWORD *)(v6 + 25) = *(_OWORD *)(v7 + 25);
      *(unsigned char *)(v6 + 41) = *(unsigned char *)(v7 + 41);
      long long v14 = *(_OWORD *)(v7 + 64);
      *(_OWORD *)(v6 + 48) = *(_OWORD *)(v7 + 48);
      *(_OWORD *)(v6 + 64) = v14;
      *(void *)(v6 + 80) = *(void *)(v7 + 80);
      long long v15 = *(_OWORD *)(v7 + 88);
      long long v16 = *(_OWORD *)(v7 + 104);
      *(_OWORD *)(v6 + 113) = *(_OWORD *)(v7 + 113);
      *(_OWORD *)(v6 + 104) = v16;
      *(_OWORD *)(v6 + 88) = v15;
      *(_OWORD *)(v6 + 136) = *(_OWORD *)(v7 + 136);
      *(unsigned char *)(v6 + 152) = *(unsigned char *)(v7 + 152);
      *(void *)(v6 + 160) = *(void *)(v7 + 160);
      *(unsigned char *)(v6 + 168) = *(unsigned char *)(v7 + 168);
      long long v17 = *(_OWORD *)(v7 + 192);
      *(_OWORD *)(v6 + 176) = *(_OWORD *)(v7 + 176);
      *(_OWORD *)(v6 + 192) = v17;
      *(unsigned char *)(v6 + 208) = *(unsigned char *)(v7 + 208);
      uint64_t v18 = v8[11];
      uint64_t v19 = (void *)(v6 + v18);
      uint64_t v20 = (const void *)(v7 + v18);
      uint64_t v21 = sub_21FA24C90();
      uint64_t v22 = *(void *)(v21 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        uint64_t v23 = sub_21F76CA40(&qword_26AD47C20);
        memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v19, v20, v21);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      }
      uint64_t v39 = v8[12];
      uint64_t v40 = v6 + v39;
      uint64_t v41 = v7 + v39;
      *(void *)uint64_t v40 = *(void *)v41;
      *(unsigned char *)(v40 + 8) = *(unsigned char *)(v41 + 8);
      *(void *)(v6 + v8[13]) = *(void *)(v7 + v8[13]);
      uint64_t v42 = v8[14];
      long long v43 = (void *)(v6 + v42);
      uint64_t v44 = (const void *)(v7 + v42);
      uint64_t v45 = sub_21FA25910();
      uint64_t v46 = *(void *)(v45 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
      {
        uint64_t v47 = sub_21F76CA40(&qword_26AD4A3B8);
        memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v46 + 32))(v43, v44, v45);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
      }
      uint64_t v48 = v8[15];
      uint64_t v49 = v6 + v48;
      uint64_t v50 = v7 + v48;
      *(void *)uint64_t v49 = *(void *)v50;
      *(_WORD *)(v49 + 8) = *(_WORD *)(v50 + 8);
      *(void *)(v6 + v8[16]) = *(void *)(v7 + v8[16]);
      *(void *)(v6 + v8[17]) = *(void *)(v7 + v8[17]);
      uint64_t v51 = v8[18];
      uint64_t v52 = v6 + v51;
      uint64_t v53 = v7 + v51;
      long long v54 = *(_OWORD *)(v53 + 48);
      *(_OWORD *)(v52 + 32) = *(_OWORD *)(v53 + 32);
      *(_OWORD *)(v52 + 48) = v54;
      *(void *)(v52 + 64) = *(void *)(v53 + 64);
      long long v55 = *(_OWORD *)(v53 + 16);
      *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
      *(_OWORD *)(v52 + 16) = v55;
      uint64_t v56 = v8[19];
      uint64_t v57 = v6 + v56;
      uint64_t v58 = v7 + v56;
      *(void *)(v57 + 64) = *(void *)(v58 + 64);
      long long v59 = *(_OWORD *)(v58 + 48);
      *(_OWORD *)(v57 + 32) = *(_OWORD *)(v58 + 32);
      *(_OWORD *)(v57 + 48) = v59;
      long long v60 = *(_OWORD *)(v58 + 16);
      *(_OWORD *)uint64_t v57 = *(_OWORD *)v58;
      *(_OWORD *)(v57 + 16) = v60;
      uint64_t v61 = v8[20];
      uint64_t v62 = v6 + v61;
      uint64_t v63 = v7 + v61;
      long long v64 = *(_OWORD *)(v63 + 48);
      *(_OWORD *)(v62 + 32) = *(_OWORD *)(v63 + 32);
      *(_OWORD *)(v62 + 48) = v64;
      *(void *)(v62 + 64) = *(void *)(v63 + 64);
      long long v65 = *(_OWORD *)(v63 + 16);
      *(_OWORD *)uint64_t v62 = *(_OWORD *)v63;
      *(_OWORD *)(v62 + 16) = v65;
      uint64_t v66 = v8[21];
      uint64_t v67 = v6 + v66;
      uint64_t v68 = v7 + v66;
      *(void *)(v67 + 64) = *(void *)(v68 + 64);
      long long v69 = *(_OWORD *)(v68 + 48);
      *(_OWORD *)(v67 + 32) = *(_OWORD *)(v68 + 32);
      *(_OWORD *)(v67 + 48) = v69;
      long long v70 = *(_OWORD *)(v68 + 16);
      *(_OWORD *)uint64_t v67 = *(_OWORD *)v68;
      *(_OWORD *)(v67 + 16) = v70;
      uint64_t v71 = v8[22];
      uint64_t v72 = v6 + v71;
      uint64_t v73 = v7 + v71;
      *(_OWORD *)uint64_t v72 = *(_OWORD *)v73;
      *(void *)(v72 + 16) = *(void *)(v73 + 16);
      uint64_t v74 = v8[23];
      uint64_t v75 = v6 + v74;
      uint64_t v76 = v7 + v74;
      *(_OWORD *)uint64_t v75 = *(_OWORD *)v76;
      *(void *)(v75 + 16) = *(void *)(v76 + 16);
      uint64_t v77 = v8[24];
      uint64_t v78 = (_OWORD *)(v6 + v77);
      uint64_t v79 = (_OWORD *)(v7 + v77);
      long long v80 = v79[1];
      *uint64_t v78 = *v79;
      v78[1] = v80;
      uint64_t v81 = v8[25];
      long long v82 = (_OWORD *)(v6 + v81);
      long long v83 = (_OWORD *)(v7 + v81);
      long long v84 = v83[1];
      *long long v82 = *v83;
      v82[1] = v84;
      *(_OWORD *)(v6 + v8[26]) = *(_OWORD *)(v7 + v8[26]);
      *(unsigned char *)(v6 + v8[27]) = *(unsigned char *)(v7 + v8[27]);
      uint64_t v85 = v8[28];
      uint64_t v86 = (_OWORD *)(v6 + v85);
      uint64_t v87 = (_OWORD *)(v7 + v85);
      long long v88 = v87[1];
      *uint64_t v86 = *v87;
      v86[1] = v88;
      (*(void (**)(uint64_t, void, uint64_t, int *))(v9 + 56))(v6, 0, 1, v8);
      return a1;
    }
LABEL_7:
    uint64_t v24 = sub_21F76CA40(qword_267EE7A88);
    memcpy((void *)v6, (const void *)v7, *(void *)(*(void *)(v24 - 8) + 64));
    return a1;
  }
  if (v12)
  {
    sub_21F991D6C(v6, type metadata accessor for ChartContentRenderContext.Environment);
    goto LABEL_7;
  }
  if (*(unsigned __int8 *)(v6 + 40) == 255) {
    goto LABEL_14;
  }
  if (*(unsigned __int8 *)(v7 + 40) == 255 || a1 != a2)
  {
    sub_21F7D25BC(v6);
LABEL_14:
    long long v26 = *(_OWORD *)(v7 + 16);
    *(_OWORD *)uint64_t v6 = *(_OWORD *)v7;
    *(_OWORD *)(v6 + 16) = v26;
    *(_OWORD *)(v6 + 25) = *(_OWORD *)(v7 + 25);
  }
  *(unsigned char *)(v6 + 41) = *(unsigned char *)(v7 + 41);
  uint64_t v27 = *(void *)(v7 + 56);
  *(void *)(v6 + 48) = *(void *)(v7 + 48);
  *(void *)(v6 + 56) = v27;
  *(void *)(v6 + 64) = *(void *)(v7 + 64);
  *(void *)(v6 + 72) = *(void *)(v7 + 72);
  swift_bridgeObjectRelease();
  *(void *)(v6 + 80) = *(void *)(v7 + 80);
  if (*(unsigned __int8 *)(v6 + 128) == 255)
  {
LABEL_19:
    long long v28 = *(_OWORD *)(v7 + 104);
    *(_OWORD *)(v6 + 88) = *(_OWORD *)(v7 + 88);
    *(_OWORD *)(v6 + 104) = v28;
    *(_OWORD *)(v6 + 113) = *(_OWORD *)(v7 + 113);
    goto LABEL_20;
  }
  if (*(unsigned __int8 *)(v7 + 128) == 255 || a1 != a2)
  {
    sub_21F7D2610(v6 + 88);
    goto LABEL_19;
  }
LABEL_20:
  *(_OWORD *)(v6 + 136) = *(_OWORD *)(v7 + 136);
  *(unsigned char *)(v6 + 152) = *(unsigned char *)(v7 + 152);
  *(void *)(v6 + 160) = *(void *)(v7 + 160);
  *(unsigned char *)(v6 + 168) = *(unsigned char *)(v7 + 168);
  long long v29 = *(_OWORD *)(v7 + 192);
  *(_OWORD *)(v6 + 176) = *(_OWORD *)(v7 + 176);
  *(_OWORD *)(v6 + 192) = v29;
  *(unsigned char *)(v6 + 208) = *(unsigned char *)(v7 + 208);
  uint64_t v30 = v8[11];
  uint64_t v31 = (void *)(v6 + v30);
  uint64_t v32 = (void *)(v7 + v30);
  uint64_t v33 = sub_21FA24C90();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
  uint64_t v188 = v31;
  LODWORD(v31) = v35(v31, 1, v33);
  int v36 = v35(v32, 1, v33);
  if (v31)
  {
    if (v36)
    {
      size_t v37 = *(void *)(*(void *)(sub_21F76CA40(&qword_26AD47C20) - 8) + 64);
      long long v38 = v188;
LABEL_30:
      memcpy(v38, v32, v37);
      goto LABEL_33;
    }
    (*(void (**)(void *, void *, uint64_t))(v34 + 32))(v188, v32, v33);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v188, 0, 1, v33);
  }
  else
  {
    if (v36)
    {
      (*(void (**)(void *, uint64_t))(v34 + 8))(v188, v33);
      size_t v37 = *(void *)(*(void *)(sub_21F76CA40(&qword_26AD47C20) - 8) + 64);
      long long v38 = v188;
      goto LABEL_30;
    }
    (*(void (**)(void *, void *, uint64_t))(v34 + 40))(v188, v32, v33);
  }
LABEL_33:
  uint64_t v89 = v8[12];
  uint64_t v90 = v6 + v89;
  uint64_t v91 = v7 + v89;
  *(void *)uint64_t v90 = *(void *)v91;
  *(unsigned char *)(v90 + 8) = *(unsigned char *)(v91 + 8);
  *(void *)(v6 + v8[13]) = *(void *)(v7 + v8[13]);
  uint64_t v92 = v8[14];
  long long v93 = (void *)(v6 + v92);
  long long v94 = (void *)(v7 + v92);
  uint64_t v95 = sub_21FA25910();
  uint64_t v96 = *(void *)(v95 - 8);
  uint64_t v97 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v96 + 48);
  char v189 = v93;
  LODWORD(v93) = v97(v93, 1, v95);
  int v98 = v97(v94, 1, v95);
  if (v93)
  {
    if (v98)
    {
      size_t v99 = *(void *)(*(void *)(sub_21F76CA40(&qword_26AD4A3B8) - 8) + 64);
      uint64_t v100 = v189;
LABEL_38:
      memcpy(v100, v94, v99);
      goto LABEL_41;
    }
    (*(void (**)(void *, void *, uint64_t))(v96 + 32))(v189, v94, v95);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v96 + 56))(v189, 0, 1, v95);
  }
  else
  {
    if (v98)
    {
      (*(void (**)(void *, uint64_t))(v96 + 8))(v189, v95);
      size_t v99 = *(void *)(*(void *)(sub_21F76CA40(&qword_26AD4A3B8) - 8) + 64);
      uint64_t v100 = v189;
      goto LABEL_38;
    }
    (*(void (**)(void *, void *, uint64_t))(v96 + 40))(v189, v94, v95);
  }
LABEL_41:
  uint64_t v101 = v8[15];
  uint64_t v102 = v6 + v101;
  uint64_t v103 = v7 + v101;
  *(void *)(v6 + v101) = *(void *)(v7 + v101);
  swift_release();
  *(unsigned char *)(v102 + 8) = *(unsigned char *)(v103 + 8);
  *(unsigned char *)(v102 + 9) = *(unsigned char *)(v103 + 9);
  *(void *)(v6 + v8[16]) = *(void *)(v7 + v8[16]);
  *(void *)(v6 + v8[17]) = *(void *)(v7 + v8[17]);
  uint64_t v104 = v8[18];
  uint64_t v105 = v6 + v104;
  uint64_t v106 = v7 + v104;
  if (*(void *)(v6 + v104 + 24))
  {
    if (*(void *)(v106 + 24))
    {
      char v107 = *(unsigned char *)(v106 + 16);
      uint64_t v108 = *(void *)v105;
      uint64_t v109 = *(void *)(v105 + 8);
      char v110 = *(unsigned char *)(v105 + 16);
      *(_OWORD *)uint64_t v105 = *(_OWORD *)v106;
      *(unsigned char *)(v105 + 16) = v107;
      sub_21F7656A8(v108, v109, v110);
      *(void *)(v105 + 24) = *(void *)(v106 + 24);
      swift_bridgeObjectRelease();
      char v111 = *(unsigned char *)(v106 + 48);
      uint64_t v112 = *(void *)(v105 + 32);
      uint64_t v113 = *(void *)(v105 + 40);
      *(_OWORD *)(v105 + 32) = *(_OWORD *)(v106 + 32);
      char v114 = *(unsigned char *)(v105 + 48);
      *(unsigned char *)(v105 + 48) = v111;
      sub_21F770E38(v112, v113, v114);
      *(_OWORD *)(v105 + 56) = *(_OWORD *)(v106 + 56);
      goto LABEL_46;
    }
    sub_21F7D2664(v105);
  }
  long long v115 = *(_OWORD *)(v106 + 48);
  *(_OWORD *)(v105 + 32) = *(_OWORD *)(v106 + 32);
  *(_OWORD *)(v105 + 48) = v115;
  *(void *)(v105 + 64) = *(void *)(v106 + 64);
  long long v116 = *(_OWORD *)(v106 + 16);
  *(_OWORD *)uint64_t v105 = *(_OWORD *)v106;
  *(_OWORD *)(v105 + 16) = v116;
LABEL_46:
  uint64_t v117 = v8[19];
  uint64_t v118 = v6 + v117;
  uint64_t v119 = v7 + v117;
  if (*(void *)(v6 + v117 + 24))
  {
    if (*(void *)(v119 + 24))
    {
      char v120 = *(unsigned char *)(v119 + 16);
      uint64_t v121 = *(void *)v118;
      uint64_t v122 = *(void *)(v118 + 8);
      char v123 = *(unsigned char *)(v118 + 16);
      *(_OWORD *)uint64_t v118 = *(_OWORD *)v119;
      *(unsigned char *)(v118 + 16) = v120;
      sub_21F7656A8(v121, v122, v123);
      *(void *)(v118 + 24) = *(void *)(v119 + 24);
      swift_bridgeObjectRelease();
      char v124 = *(unsigned char *)(v119 + 48);
      uint64_t v125 = *(void *)(v118 + 32);
      uint64_t v126 = *(void *)(v118 + 40);
      *(_OWORD *)(v118 + 32) = *(_OWORD *)(v119 + 32);
      char v127 = *(unsigned char *)(v118 + 48);
      *(unsigned char *)(v118 + 48) = v124;
      sub_21F770E38(v125, v126, v127);
      *(_OWORD *)(v118 + 56) = *(_OWORD *)(v119 + 56);
      goto LABEL_51;
    }
    sub_21F7D2664(v118);
  }
  long long v128 = *(_OWORD *)(v119 + 48);
  *(_OWORD *)(v118 + 32) = *(_OWORD *)(v119 + 32);
  *(_OWORD *)(v118 + 48) = v128;
  *(void *)(v118 + 64) = *(void *)(v119 + 64);
  long long v129 = *(_OWORD *)(v119 + 16);
  *(_OWORD *)uint64_t v118 = *(_OWORD *)v119;
  *(_OWORD *)(v118 + 16) = v129;
LABEL_51:
  uint64_t v130 = v8[20];
  uint64_t v131 = v6 + v130;
  uint64_t v132 = v7 + v130;
  if (*(void *)(v6 + v130 + 24))
  {
    if (*(void *)(v132 + 24))
    {
      char v133 = *(unsigned char *)(v132 + 16);
      uint64_t v134 = *(void *)v131;
      uint64_t v135 = *(void *)(v131 + 8);
      char v136 = *(unsigned char *)(v131 + 16);
      *(_OWORD *)uint64_t v131 = *(_OWORD *)v132;
      *(unsigned char *)(v131 + 16) = v133;
      sub_21F7656A8(v134, v135, v136);
      *(void *)(v131 + 24) = *(void *)(v132 + 24);
      swift_bridgeObjectRelease();
      char v137 = *(unsigned char *)(v132 + 48);
      uint64_t v138 = *(void *)(v131 + 32);
      uint64_t v139 = *(void *)(v131 + 40);
      *(_OWORD *)(v131 + 32) = *(_OWORD *)(v132 + 32);
      char v140 = *(unsigned char *)(v131 + 48);
      *(unsigned char *)(v131 + 48) = v137;
      sub_21F770E38(v138, v139, v140);
      *(_OWORD *)(v131 + 56) = *(_OWORD *)(v132 + 56);
      goto LABEL_56;
    }
    sub_21F7D2664(v131);
  }
  long long v141 = *(_OWORD *)(v132 + 48);
  *(_OWORD *)(v131 + 32) = *(_OWORD *)(v132 + 32);
  *(_OWORD *)(v131 + 48) = v141;
  *(void *)(v131 + 64) = *(void *)(v132 + 64);
  long long v142 = *(_OWORD *)(v132 + 16);
  *(_OWORD *)uint64_t v131 = *(_OWORD *)v132;
  *(_OWORD *)(v131 + 16) = v142;
LABEL_56:
  uint64_t v143 = v8[21];
  uint64_t v144 = v6 + v143;
  uint64_t v145 = v7 + v143;
  if (*(void *)(v6 + v143 + 24))
  {
    if (*(void *)(v145 + 24))
    {
      char v146 = *(unsigned char *)(v145 + 16);
      uint64_t v147 = *(void *)v144;
      uint64_t v148 = *(void *)(v144 + 8);
      char v149 = *(unsigned char *)(v144 + 16);
      *(_OWORD *)uint64_t v144 = *(_OWORD *)v145;
      *(unsigned char *)(v144 + 16) = v146;
      sub_21F7656A8(v147, v148, v149);
      *(void *)(v144 + 24) = *(void *)(v145 + 24);
      swift_bridgeObjectRelease();
      char v150 = *(unsigned char *)(v145 + 48);
      uint64_t v151 = *(void *)(v144 + 32);
      uint64_t v152 = *(void *)(v144 + 40);
      *(_OWORD *)(v144 + 32) = *(_OWORD *)(v145 + 32);
      char v153 = *(unsigned char *)(v144 + 48);
      *(unsigned char *)(v144 + 48) = v150;
      sub_21F770E38(v151, v152, v153);
      *(_OWORD *)(v144 + 56) = *(_OWORD *)(v145 + 56);
      goto LABEL_61;
    }
    sub_21F7D2664(v144);
  }
  long long v154 = *(_OWORD *)(v145 + 48);
  *(_OWORD *)(v144 + 32) = *(_OWORD *)(v145 + 32);
  *(_OWORD *)(v144 + 48) = v154;
  *(void *)(v144 + 64) = *(void *)(v145 + 64);
  long long v155 = *(_OWORD *)(v145 + 16);
  *(_OWORD *)uint64_t v144 = *(_OWORD *)v145;
  *(_OWORD *)(v144 + 16) = v155;
LABEL_61:
  uint64_t v156 = v8[22];
  uint64_t v157 = v6 + v156;
  uint64_t v158 = v7 + v156;
  *(_OWORD *)uint64_t v157 = *(_OWORD *)v158;
  *(void *)(v157 + 16) = *(void *)(v158 + 16);
  uint64_t v159 = v8[23];
  uint64_t v160 = v6 + v159;
  uint64_t v161 = v7 + v159;
  *(_OWORD *)uint64_t v160 = *(_OWORD *)v161;
  *(void *)(v160 + 16) = *(void *)(v161 + 16);
  uint64_t v162 = v8[24];
  uint64_t v163 = v6 + v162;
  uint64_t v164 = v7 + v162;
  if (*(void *)(v6 + v162 + 24))
  {
    if (*(void *)(v164 + 24))
    {
      char v165 = *(unsigned char *)(v164 + 16);
      uint64_t v166 = *(void *)v163;
      uint64_t v167 = *(void *)(v163 + 8);
      char v168 = *(unsigned char *)(v163 + 16);
      *(_OWORD *)uint64_t v163 = *(_OWORD *)v164;
      *(unsigned char *)(v163 + 16) = v165;
      sub_21F7656A8(v166, v167, v168);
      *(void *)(v163 + 24) = *(void *)(v164 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_66;
    }
    sub_21F7D26B8(v163);
  }
  long long v169 = *(_OWORD *)(v164 + 16);
  *(_OWORD *)uint64_t v163 = *(_OWORD *)v164;
  *(_OWORD *)(v163 + 16) = v169;
LABEL_66:
  uint64_t v170 = v8[25];
  uint64_t v171 = v6 + v170;
  uint64_t v172 = v7 + v170;
  if (!*(void *)(v6 + v170 + 24))
  {
LABEL_70:
    long long v177 = *(_OWORD *)(v172 + 16);
    *(_OWORD *)uint64_t v171 = *(_OWORD *)v172;
    *(_OWORD *)(v171 + 16) = v177;
    goto LABEL_71;
  }
  if (!*(void *)(v172 + 24))
  {
    sub_21F7D26B8(v171);
    goto LABEL_70;
  }
  char v173 = *(unsigned char *)(v172 + 16);
  uint64_t v174 = *(void *)v171;
  uint64_t v175 = *(void *)(v171 + 8);
  char v176 = *(unsigned char *)(v171 + 16);
  *(_OWORD *)uint64_t v171 = *(_OWORD *)v172;
  *(unsigned char *)(v171 + 16) = v173;
  sub_21F7656A8(v174, v175, v176);
  *(void *)(v171 + 24) = *(void *)(v172 + 24);
  swift_bridgeObjectRelease();
LABEL_71:
  uint64_t v178 = v8[26];
  uint64_t v179 = (void *)(v6 + v178);
  char v180 = (uint64_t *)(v7 + v178);
  uint64_t v182 = *v180;
  uint64_t v181 = v180[1];
  *uint64_t v179 = v182;
  v179[1] = v181;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v6 + v8[27]) = *(unsigned char *)(v7 + v8[27]);
  uint64_t v183 = v8[28];
  uint64_t v184 = v6 + v183;
  uint64_t v185 = v7 + v183;
  if (*(void *)(v184 + 24))
  {
    if (*(void *)(v185 + 24)) {
      _s6Charts15AnyChartContentVwxx_0(v184);
    }
    else {
      sub_21F7D2934(v184);
    }
  }
  long long v186 = *(_OWORD *)(v185 + 16);
  *(_OWORD *)uint64_t v184 = *(_OWORD *)v185;
  *(_OWORD *)(v184 + 16) = v186;
  return a1;
}

uint64_t sub_21F992F4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F992F60);
}

uint64_t sub_21F992F60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RulesRenderer(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_21F992FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F992FE0);
}

uint64_t sub_21F992FE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RulesRenderer(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for VectorizedRulePlotContent()
{
  return sub_21F764F08();
}

unint64_t sub_21F993068@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t result = sub_21F937134(MEMORY[0x263F8EE78]);
  uint64_t v5 = (void *)result;
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
LABEL_20:
    *a2 = v5;
    return result;
  }
  long long v28 = a2;
  swift_bridgeObjectRetain();
  uint64_t v7 = 32;
  while (1)
  {
    long long v8 = *(_OWORD *)(a1 + v7 + 16);
    v37[0] = *(_OWORD *)(a1 + v7);
    uint64_t v38 = *(void *)(a1 + v7 + 48);
    long long v9 = *(_OWORD *)(a1 + v7 + 32);
    v37[1] = v8;
    v37[2] = v9;
    char v10 = v37[0];
    if (!v5[2]) {
      goto LABEL_8;
    }
    unint64_t v11 = sub_21F75BD50(v37[0]);
    if (v12)
    {
      uint64_t v13 = v5[7] + 56 * v11;
      char v14 = *(unsigned char *)v13;
      uint64_t v15 = *(void *)(v13 + 24);
      long long v29 = *(_OWORD *)(v13 + 40);
      long long v30 = *(_OWORD *)(v13 + 8);
      unint64_t v16 = swift_bridgeObjectRetain();
      long long v18 = v29;
      long long v17 = v30;
    }
    else
    {
LABEL_8:
      unint64_t v16 = sub_21F936E60(MEMORY[0x263F8EE78]);
      long long v17 = 0uLL;
      uint64_t v15 = 0;
      char v14 = v10;
      long long v18 = 0uLL;
    }
    v32[0] = v14;
    long long v33 = v17;
    uint64_t v34 = v15;
    unint64_t v35 = v16;
    long long v36 = v18;
    sub_21F994560((uint64_t)v37);
    sub_21F994560((uint64_t)v37);
    sub_21FA2366C((uint64_t)v32, (uint64_t)v37, (uint64_t)v31);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v21 = sub_21F75BD50(v10);
    uint64_t v22 = v5[2];
    BOOL v23 = (v20 & 1) == 0;
    uint64_t v24 = v22 + v23;
    if (__OFADD__(v22, v23)) {
      break;
    }
    char v25 = v20;
    if (v5[3] >= v24)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v20) {
          goto LABEL_16;
        }
      }
      else
      {
        sub_21F87B480();
        if (v25) {
          goto LABEL_16;
        }
      }
    }
    else
    {
      sub_21F8726C8(v24, isUniquelyReferenced_nonNull_native);
      unint64_t v26 = sub_21F75BD50(v10);
      if ((v25 & 1) != (v27 & 1)) {
        goto LABEL_22;
      }
      unint64_t v21 = v26;
      if (v25)
      {
LABEL_16:
        sub_21F9945B8((uint64_t)v31, v5[7] + 56 * v21);
        goto LABEL_4;
      }
    }
    sub_21F876F14(v21, v10, (uint64_t)v31, v5);
LABEL_4:
    swift_bridgeObjectRelease();
    sub_21F99458C((uint64_t)v37);
    v7 += 56;
    if (!--v6)
    {
      unint64_t result = swift_bridgeObjectRelease();
      a2 = v28;
      goto LABEL_20;
    }
  }
  __break(1u);
LABEL_22:
  unint64_t result = sub_21FA26990();
  __break(1u);
  return result;
}

uint64_t **sub_21F9932A0@<X0>(uint64_t **result@<X0>, double *a2@<X8>)
{
  int64_t v2 = 0;
  uint64_t v3 = **result;
  uint64_t v4 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  uint64_t v6 = v3 + 64;
  unint64_t v7 = v5 & *(void *)(v3 + 64);
  int64_t v8 = (unint64_t)(v4 + 63) >> 6;
  double v9 = 0.0;
  double v10 = 0.0;
  double v11 = 0.0;
  double v12 = 0.0;
LABEL_4:
  double v13 = v9;
  while (2)
  {
    if (v7)
    {
      unint64_t v17 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v18 = v17 | (v2 << 6);
LABEL_33:
      uint64_t v22 = *(void *)(v3 + 56) + 56 * v18;
      double v23 = *(double *)(v22 + 24);
      double v24 = *(double *)(v22 + 40);
      switch(*(unsigned char *)v22)
      {
        case 1:
          double v9 = v23 + v24;
          double v15 = 0.0;
          double v14 = 0.0;
          double v16 = 0.0;
          goto LABEL_8;
        case 2:
          double v15 = v23 + v24;
          double v14 = 0.0;
          goto LABEL_6;
        case 3:
          double v14 = v23 + v24;
          double v15 = 0.0;
LABEL_6:
          double v16 = 0.0;
          goto LABEL_7;
        default:
          double v16 = v23 + v24;
          double v15 = 0.0;
          double v14 = 0.0;
LABEL_7:
          double v9 = 0.0;
LABEL_8:
          if (v12 < v15) {
            double v12 = v15;
          }
          if (v11 < v14) {
            double v11 = v14;
          }
          if (v10 < v16) {
            double v10 = v16;
          }
          if (v13 >= v9) {
            continue;
          }
          goto LABEL_4;
      }
    }
    break;
  }
  int64_t v19 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
    goto LABEL_39;
  }
  if (v19 < v8)
  {
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v2;
    if (v20) {
      goto LABEL_32;
    }
    int64_t v2 = v19 + 1;
    if (v19 + 1 >= v8) {
      goto LABEL_37;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v2);
    if (v20) {
      goto LABEL_32;
    }
    int64_t v2 = v19 + 2;
    if (v19 + 2 >= v8) {
      goto LABEL_37;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v2);
    if (v20) {
      goto LABEL_32;
    }
    int64_t v2 = v19 + 3;
    if (v19 + 3 >= v8) {
      goto LABEL_37;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v2);
    if (v20)
    {
LABEL_32:
      unint64_t v7 = (v20 - 1) & v20;
      unint64_t v18 = __clz(__rbit64(v20)) + (v2 << 6);
      goto LABEL_33;
    }
    int64_t v21 = v19 + 4;
    if (v21 < v8)
    {
      unint64_t v20 = *(void *)(v6 + 8 * v21);
      if (v20)
      {
        int64_t v2 = v21;
        goto LABEL_32;
      }
      while (1)
      {
        int64_t v2 = v21 + 1;
        if (__OFADD__(v21, 1)) {
          break;
        }
        if (v2 >= v8) {
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v6 + 8 * v2);
        ++v21;
        if (v20) {
          goto LABEL_32;
        }
      }
LABEL_39:
      __break(1u);
      JUMPOUT(0x21F993460);
    }
  }
LABEL_37:
  *a2 = v12;
  a2[1] = v11;
  a2[2] = v10;
  a2[3] = v13;
  return result;
}

uint64_t **sub_21F993470@<X0>(uint64_t **result@<X0>, uint64_t a2@<X8>)
{
  int64_t v2 = 0;
  uint64_t v3 = **result;
  uint64_t v4 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  uint64_t v6 = v3 + 64;
  unint64_t v7 = v5 & *(void *)(v3 + 64);
  int64_t v8 = (unint64_t)(v4 + 63) >> 6;
  double v9 = 0.0;
  double v10 = 0.0;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v18 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v18 >= v8) {
      goto LABEL_34;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v2;
    if (!v19)
    {
      int64_t v2 = v18 + 1;
      if (v18 + 1 >= v8) {
        goto LABEL_34;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v2);
      if (!v19)
      {
        int64_t v2 = v18 + 2;
        if (v18 + 2 >= v8) {
          goto LABEL_34;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v2);
        if (!v19)
        {
          int64_t v2 = v18 + 3;
          if (v18 + 3 >= v8) {
            goto LABEL_34;
          }
          unint64_t v19 = *(void *)(v6 + 8 * v2);
          if (!v19)
          {
            int64_t v2 = v18 + 4;
            if (v18 + 4 >= v8) {
              goto LABEL_34;
            }
            unint64_t v19 = *(void *)(v6 + 8 * v2);
            if (!v19) {
              break;
            }
          }
        }
      }
    }
LABEL_33:
    unint64_t v7 = (v19 - 1) & v19;
    unint64_t v12 = __clz(__rbit64(v19)) + (v2 << 6);
LABEL_5:
    double v13 = (double *)(*(void *)(v3 + 56) + 56 * v12);
    unsigned int v14 = *(unsigned __int8 *)v13;
    double v15 = v13[6];
    if (v9 <= v15 && v14 < 2) {
      double v9 = v13[6];
    }
    if (v10 <= v15 && (v14 & 0xFE) == 2) {
      double v10 = v13[6];
    }
  }
  int64_t v20 = v18 + 5;
  if (v20 >= v8)
  {
LABEL_34:
    *(double *)a2 = v9;
    *(void *)(a2 + 8) = 0;
    *(double *)(a2 + 16) = v10;
    *(void *)(a2 + 24) = 0;
    return result;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v2 = v20;
    goto LABEL_33;
  }
  while (1)
  {
    int64_t v2 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v2 >= v8) {
      goto LABEL_34;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v2);
    ++v20;
    if (v19) {
      goto LABEL_33;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_21F9935D8@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = **(void **)(a1 + 16);
  char v9 = a4 == 1 || a4 == 2 && a3 == 2;
  uint64_t result = sub_21F8A8478(v8, *(void *)v7, *(unsigned char *)(v7 + 8), a2 & 1, v9, a5 & 1);
  *a6 = result;
  return result;
}

uint64_t sub_21F993650@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_21F8A8DFC(**(void (***)(uint64_t, uint64_t))(a1 + 8), **(void **)(a1 + 16), *(unsigned __int8 *)(*(void *)(a1 + 16) + 8), *(void *)(a1 + 24));
  *a2 = result;
  return result;
}

uint64_t sub_21F993690@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = **(void **)(a1 + 8);
  sub_21F994660(v7, (uint64_t)v6);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      uint64_t v10 = sub_21F76CA40(&qword_26AD46658);
      sub_21F76CA84((uint64_t)&v6[*(int *)(v10 + 64)], &qword_26AD48588);
      uint64_t v11 = sub_21FA24310();
      (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8))(v6, v11);
      goto LABEL_6;
    case 2:
      goto LABEL_6;
    case 3:
      uint64_t v8 = *(void *)v6;
      if (v6[8] >= 2u) {
        goto LABEL_7;
      }
      swift_bridgeObjectRelease();
LABEL_6:
      uint64_t result = sub_21F8A8380();
      uint64_t v8 = MEMORY[0x263F8EE78];
LABEL_7:
      *a2 = v8;
      return result;
    default:
      uint64_t result = swift_bridgeObjectRetain();
      goto LABEL_7;
  }
}

double sub_21F9937F8@<D0>(void *a1@<X8>)
{
  if (qword_267EE6E50 != -1) {
    swift_once();
  }
  double result = *(double *)&qword_267EF2F78;
  *a1 = qword_267EF2F78;
  return result;
}

uint64_t sub_21F993854@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v50 = a5;
  uint64_t v52 = a3;
  LODWORD(v53) = a2;
  double v8 = **(double **)a1;
  double v7 = *(double *)(*(void *)a1 + 8);
  double v10 = *(double *)(*(void *)a1 + 16);
  double v9 = *(double *)(*(void *)a1 + 24);
  uint64_t v11 = **(void **)(a1 + 8);
  uint64_t v12 = *(void **)(a1 + 16);
  uint64_t v13 = **(void **)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)v14;
  uint64_t v45 = *(void *)(v14 + 8);
  uint64_t v46 = v15;
  int v51 = *(unsigned __int8 *)(v14 + 16);
  int v16 = *a4;
  uint64_t v17 = v12[3];
  uint64_t v18 = v12[4];
  unint64_t v19 = sub_21F77E0FC(v12, v17);
  __n128 v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v23 + 16))(v22, v20);
  if (qword_267EE6E58 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_267EF2F80;
  uint64_t v25 = qword_267EE6E60;
  swift_retain();
  if (v25 != -1) {
    swift_once();
  }
  uint64_t v26 = qword_267EF2F88;
  swift_retain();
  uint64_t result = sub_21F8C5DE4((uint64_t)v22, v24, v26, v17, v18, v54);
  uint64_t v28 = v54[0];
  if (v16 == 9)
  {
    char v29 = v53;
    LOBYTE(v16) = v53;
    if (v53 != 1)
    {
      if ((_BYTE)v53)
      {
        __break(1u);
        return result;
      }
      if (v10 != 0.0 && v9 <= 0.0) {
        LOBYTE(v16) = 1;
      }
      else {
        LOBYTE(v16) = 2;
      }
    }
  }
  else
  {
    char v29 = v53;
  }
  uint64_t v47 = v54[4];
  uint64_t v48 = v54[3];
  uint64_t v49 = v54[2];
  uint64_t v53 = v54[1];
  if (v51)
  {
    uint64_t v31 = sub_21F9948C4(v16, v29, v8, v7);
    uint64_t v33 = v32;
  }
  else
  {
    uint64_t v33 = v45;
    uint64_t v31 = v46;
  }
  unint64_t v34 = v16 - 3;
  swift_retain();
  uint64_t v35 = v50;
  swift_retain();
  sub_21F7B9484(v54, (void (*)(void, void, void, void, void))sub_21F7B9394);
  uint64_t v36 = v52;
  double v37 = sub_21F7E1258(v52, v29, v35, v11, (uint64_t)v54, v35);
  double v39 = v38;
  swift_release();
  sub_21F7B9484(v54, (void (*)(void, void, void, void, void))sub_21F7B9430);
  uint64_t result = swift_release();
  *(unsigned char *)a6 = v16;
  if (v34 >= 2) {
    double v40 = v39;
  }
  else {
    double v40 = v37;
  }
  if (v34 >= 2) {
    double v41 = v37;
  }
  else {
    double v41 = v39;
  }
  *(void *)(a6 + 8) = v31;
  *(void *)(a6 + 16) = v33;
  *(void *)(a6 + 24) = v13;
  uint64_t v42 = v53;
  *(void *)(a6 + 32) = v28;
  *(void *)(a6 + 40) = v42;
  uint64_t v43 = v48;
  *(void *)(a6 + 48) = v49;
  *(void *)(a6 + 56) = v43;
  *(void *)(a6 + 64) = v47;
  *(unsigned char *)(a6 + 72) = v34 < 2;
  *(double *)(a6 + 80) = v41;
  *(double *)(a6 + 88) = v40;
  *(void *)(a6 + 96) = v36;
  *(unsigned char *)(a6 + 104) = v29;
  return result;
}

uint64_t sub_21F993B80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  sub_21F7B92C8(a2, (uint64_t)v42);
  uint64_t v37 = v42[0];
  uint64_t v8 = sub_21F76CA40(&qword_26AD46B30);
  MEMORY[0x270FA5388](v8);
  double v10 = (uint64_t *)((char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = sub_21F76CA40(&qword_26AD46B28);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (uint64_t *)((char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v36 = *(void *)(a3 + 24);
  uint64_t v14 = sub_21FA24A00();
  char v16 = v15;
  uint64_t v38 = v17;
  char v19 = v18;
  sub_21F7B92C8(a2, (uint64_t)&v43);
  if (v45 < 0)
  {
    v45 &= ~0x8000000000000000;
    uint64_t v34 = v43;
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v35 = a4;
    uint64_t v29 = a1 + OBJC_IVAR____TtC6Charts14SgMeasurements__dynamicTypeSize;
    swift_beginAccess();
    long long v30 = (char *)v10 + *(int *)(v8 + 28);
    uint64_t v31 = sub_21FA24730();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16))(v30, v29, v31);
    *double v10 = KeyPath;
    sub_21F76C978((uint64_t)v10, (uint64_t)v13 + *(int *)(v11 + 36), &qword_26AD46B30);
    *uint64_t v13 = v34;
    swift_retain();
    a4 = v35;
    sub_21F76CA84((uint64_t)v10, &qword_26AD46B30);
    char v40 = v16 & 1;
    char v39 = v19 & 1;
    double v24 = sub_21F86CC20((uint64_t)v13, v36, v14, v16 & 1, v38, v19 & 1);
    uint64_t v26 = v32;
    uint64_t result = sub_21F76CA84((uint64_t)v13, &qword_26AD46B28);
  }
  else
  {
    uint64_t v20 = v43;
    uint64_t v21 = v44;
    unsigned __int8 v22 = v45 & 1;
    uint64_t v23 = v46;
    sub_21F7652C0(v43, v44, v45 & 1);
    swift_bridgeObjectRetain();
    char v41 = v16 & 1;
    char v40 = v19 & 1;
    double v24 = sub_21F9C2464(v20, v21, v22, v23);
    uint64_t v26 = v25;
    sub_21F7656A8(v20, v21, v22);
    uint64_t result = swift_bridgeObjectRelease();
  }
  *a4 = v24;
  *((void *)a4 + 1) = v26;
  return result;
}

uint64_t sub_21F993E58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v5 = *(long long **)(a1 + 8);
  double v6 = **(double **)a1;
  double v7 = *(double *)(*(void *)a1 + 8);
  double v8 = *(double *)(*(void *)a1 + 16);
  double v9 = *(double *)(*(void *)a1 + 24);
  long long v11 = v5[1];
  long long v10 = v5[2];
  long long v36 = *v5;
  long long v37 = v11;
  long long v38 = v10;
  long long v13 = v5[4];
  long long v12 = v5[5];
  long long v14 = v5[3];
  *(_OWORD *)&v41[9] = *(long long *)((char *)v5 + 89);
  long long v40 = v13;
  *(_OWORD *)char v41 = v12;
  long long v39 = v14;
  char v15 = *(double **)(a1 + 16);
  double v17 = *v15;
  double v16 = v15[1];
  uint64_t v18 = v11;
  double v19 = sub_21F7B6078(*((uint64_t *)&v36 + 1), v11, v36);
  double v22 = v21;
  double v24 = v23;
  if (((1 << v36) & 0x1E1) != 0)
  {
    double v25 = v17 * v19;
LABEL_9:
    double v28 = v16 * v20;
    goto LABEL_10;
  }
  if (((1 << v36) & 6) == 0)
  {
    double v25 = (v7 + v6 + v17) * v19 - v6;
    goto LABEL_9;
  }
  double v26 = v17 * v19;
  double v27 = (v7 + v6 + v17) * v19 - v6;
  if (v41[24] == 1) {
    double v25 = v27;
  }
  else {
    double v25 = v26;
  }
  double v28 = (v9 + v8 + v16) * v20 - v8;
LABEL_10:
  double v29 = sub_21F7B634C(*((double *)&v37 + 1), *((uint64_t *)&v36 + 1), v18, v36);
  double v31 = v30;
  uint64_t v32 = *(void *)&v41[16];
  char v33 = v41[24];
  swift_retain();
  sub_21F9946C4(&v36, (void (*)(void, void, void, void, void))sub_21F7B9394);
  unint64_t v34 = sub_21F7E10A8(v32, v33, a2, a2, (uint64_t)&v36, v25, v28, v29, v31, v22, v24);
  sub_21F9946C4(&v36, (void (*)(void, void, void, void, void))sub_21F7B9430);
  uint64_t result = swift_release();
  *a3 = v34;
  return result;
}

uint64_t sub_21F994020@<X0>(uint64_t result@<X0>, double *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 8);
  double v4 = **(double **)result;
  double v3 = *(double *)(*(void *)result + 8);
  double v6 = *(double *)(*(void *)result + 16);
  double v5 = *(double *)(*(void *)result + 24);
  double v7 = *(double *)(v2 + 24);
  double v9 = *(double *)(v2 + 80);
  double v8 = *(double *)(v2 + 88);
  switch(*(unsigned char *)v2)
  {
    case 1:
      double v6 = v6 + v7 + v8;
      break;
    case 2:
      double v5 = v5 + v7 + v8;
      break;
    case 3:
      double v4 = v4 + v7 + v9;
      break;
    case 4:
      double v3 = v3 + v7 + v9;
      break;
    case 5:
      double v10 = v7 + v9;
      if (v4 <= v10) {
        double v4 = v10;
      }
      goto LABEL_11;
    case 6:
      double v11 = v7 + v9;
      if (v3 <= v11) {
        double v3 = v11;
      }
LABEL_11:
      double v12 = v7 + v8;
      if (v6 <= v12) {
        double v6 = v12;
      }
      break;
    case 7:
      double v13 = v7 + v9;
      if (v4 <= v13) {
        double v4 = v13;
      }
      goto LABEL_19;
    case 8:
      double v14 = v7 + v9;
      if (v3 <= v14) {
        double v3 = v14;
      }
LABEL_19:
      double v15 = v7 + v8;
      if (v5 <= v15) {
        double v5 = v15;
      }
      break;
    default:
      break;
  }
  *a2 = v4;
  a2[1] = v3;
  a2[2] = v6;
  a2[3] = v5;
  return result;
}

uint64_t sub_21F99410C()
{
  return sub_21FA26A50();
}

uint64_t sub_21F99416C()
{
  return sub_21FA26A10();
}

uint64_t sub_21F9941AC()
{
  return sub_21FA26A50();
}

BOOL sub_21F994208(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 == *(void *)a2
      && *(unsigned __int8 *)(a1 + 8) == (unint64_t)*(unsigned __int8 *)(a2 + 8);
}

void sub_21F994228(char a1@<W2>, char a2@<W3>, char *a3@<X8>)
{
  if (a2 == 2) {
    char v3 = 2;
  }
  else {
    char v3 = 1;
  }
  if (!a1) {
    char v3 = 0;
  }
  *a3 = v3;
}

void sub_21F994248(char a1@<W2>, char a2@<W3>, char *a3@<X8>)
{
  if (a2 == 2) {
    char v3 = 2;
  }
  else {
    char v3 = 3;
  }
  if (!a1) {
    char v3 = 1;
  }
  *a3 = v3;
}

uint64_t sub_21F994268@<X0>(uint64_t a1@<X8>)
{
  uint64_t v5 = 0;
  memset(v4, 0, sizeof(v4));
  *(void *)(a1 + 24) = sub_21F76CA40(&qword_267EE7968);
  *(void *)(a1 + 32) = sub_21F80FF54();
  uint64_t v2 = swift_allocObject();
  *(void *)a1 = v2;
  uint64_t result = sub_21F9C2B4C((uint64_t)v4, v2 + 16);
  *(unsigned char *)(a1 + 40) = 0;
  return result;
}

uint64_t sub_21F9942DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = **(void **)(a1 + 16);
  char v8 = **(unsigned char **)(a1 + 8);
  char v9 = **(unsigned char **)a1;
  sub_21F7F3EA0(*(void *)(a1 + 24), (uint64_t)v15);
  type metadata accessor for AxisMarkLayoutContext();
  uint64_t v10 = swift_allocObject();
  unint64_t v11 = sub_21F936E60(MEMORY[0x263F8EE78]);
  *(unsigned char *)(v10 + 184) = 0;
  *(void *)(v10 + 192) = 0;
  *(void *)(v10 + 200) = 0;
  *(void *)(v10 + 208) = 0;
  *(void *)(v10 + 216) = v11;
  *(void *)(v10 + 224) = 0;
  *(void *)(v10 + 232) = 0;
  sub_21F76C978((uint64_t)v15, (uint64_t)v14, &qword_26AD48EB0);
  swift_retain();
  swift_retain();
  uint64_t v12 = sub_21FA22FB0(a2, v9, v8, a3, (uint64_t)v14, v7);
  sub_21F76CA84((uint64_t)v15, &qword_26AD48EB0);
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v12 + 184) = v8;
  *a4 = v12;
  return result;
}

uint64_t sub_21F9943E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = **(void **)(a1 + 24);
  char v8 = **(unsigned char **)(a1 + 8);
  char v9 = **(unsigned char **)a1;
  sub_21F7F3EA0(*(void *)(a1 + 16), (uint64_t)v11);
  type metadata accessor for AxisMarkRenderContext();
  swift_allocObject();
  swift_retain();
  swift_retain();
  uint64_t result = sub_21FA2318C(a2, v9, v8, a3, (uint64_t)v11, v7);
  *a4 = result;
  return result;
}

void sub_21F99449C(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
}

uint64_t sub_21F9944AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_21F7676B0();
  uint64_t result = swift_beginAccess();
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t result = sub_21FA266E0();
    __break(1u);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 40);
    *(unsigned char *)(a2 + 16) = 0;
  }
  return result;
}

uint64_t sub_21F994560(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F99458C(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F9945B8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_21F994614()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21F810028(*(void *)(v0 + 288), *(void *)(v0 + 296), *(unsigned char *)(v0 + 304));

  return MEMORY[0x270FA0238](v0, 305, 7);
}

uint64_t sub_21F994660(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *sub_21F9946C4(void *a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t sub_21F994700()
{
  return sub_21F994814(MEMORY[0x263F8EEA0]);
}

uint64_t sub_21F994718()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

double sub_21F994750@<D0>(double *a1@<X8>)
{
  (*(void (**)(double *__return_ptr, unsigned char *))(v1 + 16))(&v4, v5);
  double result = v4;
  *a1 = v4;
  return result;
}

uint64_t sub_21F994794(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21F76CA40(&qword_26AD47910);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21F9947FC()
{
  return sub_21F994814(MEMORY[0x263F8EF20]);
}

uint64_t sub_21F994814(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 32));

  return MEMORY[0x270FA0238](v1, 40, 7);
}

uint64_t sub_21F994864(uint64_t a1)
{
  return sub_21F80C268(a1, *(void (**)(void *__return_ptr))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_21F994870()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 88, 7);
}

uint64_t sub_21F9948A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21F993854(a1, *(unsigned __int8 *)(v2 + 16), *(void *)(v2 + 24), (unsigned __int8 *)(v2 + 32), *(void *)(v2 + 80), a2);
}

uint64_t sub_21F9948BC@<X0>(uint64_t a1@<X8>)
{
  return sub_21F9944AC(v1, a1);
}

uint64_t sub_21F9948C4(char a1, char a2, double a3, double a4)
{
  switch(a1)
  {
    case 1:
    case 2:
      if (a2 == 1 && (a4 > 0.0 || a3 == 0.0)) {
        uint64_t result = sub_21FA25900();
      }
      else {
        uint64_t result = sub_21FA258F0();
      }
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      uint64_t result = sub_21FA258E0();
      break;
    default:
      uint64_t result = sub_21FA258C0();
      break;
  }
  return result;
}

uint64_t destroy for ResolvedLayout(uint64_t *a1)
{
  return sub_21F7B9430(a1[4], a1[5], a1[6]);
}

uint64_t initializeWithCopy for ResolvedLayout(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 56);
  uint64_t v8 = *(void *)(a2 + 64);
  sub_21F7B9394(v4, v5, v6);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + 64) = v8;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

uint64_t assignWithCopy for ResolvedLayout(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 56);
  uint64_t v8 = *(void *)(a2 + 64);
  sub_21F7B9394(v4, v5, v6);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + 64) = v8;
  sub_21F7B9430(v9, v10, v11);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

__n128 initializeWithTake for ResolvedLayout(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(long long *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for ResolvedLayout(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 64);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  long long v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  *(void *)(a1 + 64) = v4;
  sub_21F7B9430(v5, v6, v7);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedLayout(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 105)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 48) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 104) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 105) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = 0;
      *(void *)(result + 40) = 0;
      *(void *)(result + 56) = 0;
      *(void *)(result + 64) = 0;
      *(void *)(result + 48) = 2 * -a2;
      return result;
    }
    *(unsigned char *)(result + 105) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvedLayout()
{
  return &type metadata for ResolvedLayout;
}

uint64_t getEnumTagSinglePayload for IndexedChannel(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF9 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 249);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 8;
  int v5 = v3 - 8;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for IndexedChannel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 249;
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 7;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IndexedChannel()
{
  return &type metadata for IndexedChannel;
}

uint64_t sub_21F994CCC(uint64_t a1)
{
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if (*(unsigned char *)(a1 + 56) == 1)
  {
    return swift_release();
  }
  else if (!*(unsigned char *)(a1 + 56))
  {
    return _s6Charts15AnyChartContentVwxx_0(a1 + 16);
  }
  return result;
}

uint64_t sub_21F994D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  int v5 = *(unsigned __int8 *)(a2 + 56);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v5 == 1)
  {
    uint64_t v9 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v9;
    *(unsigned char *)(a1 + 56) = 1;
    swift_retain();
  }
  else
  {
    uint64_t v6 = (_OWORD *)(a1 + 16);
    uint64_t v7 = (_OWORD *)(a2 + 16);
    if (v5)
    {
      long long v10 = *(_OWORD *)(a2 + 32);
      *uint64_t v6 = *v7;
      *(_OWORD *)(a1 + 32) = v10;
      *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    }
    else
    {
      long long v8 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 40) = v8;
      (**(void (***)(_OWORD *, _OWORD *))(v8 - 8))(v6, v7);
      *(unsigned char *)(a1 + 56) = 0;
    }
  }
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t sub_21F994E1C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_21F7ABE54(a1 + 16);
    if (*(unsigned char *)(a2 + 56) == 1)
    {
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v6;
      *(unsigned char *)(a1 + 56) = 1;
      swift_retain();
    }
    else
    {
      uint64_t v4 = (long long *)(a2 + 16);
      if (*(unsigned char *)(a2 + 56))
      {
        long long v7 = *v4;
        long long v8 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
        *(_OWORD *)(a1 + 16) = v7;
        *(_OWORD *)(a1 + 32) = v8;
      }
      else
      {
        uint64_t v5 = *(void *)(a2 + 40);
        *(void *)(a1 + 40) = v5;
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        (**(void (***)(uint64_t, long long *))(v5 - 8))(a1 + 16, v4);
        *(unsigned char *)(a1 + 56) = 0;
      }
    }
  }
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t sub_21F994F20(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_21F7ABE54(a1 + 16);
    long long v4 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v4;
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  }
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t sub_21F994F98(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_21F994FE0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for MarksDescriptor()
{
  return sub_21F764F08();
}

unint64_t sub_21F99504C()
{
  unint64_t result = qword_26AD46350;
  if (!qword_26AD46350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD46350);
  }
  return result;
}

ValueMetadata *type metadata accessor for DynamicViewContentOffsetTraitKey()
{
  return &type metadata for DynamicViewContentOffsetTraitKey;
}

void sub_21F9950B4(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

double sub_21F9950C4(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double v25 = a3;
  uint64_t v15 = sub_21FA24970();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26.origin.x = a5;
  v26.origin.y = a6;
  v26.size.width = a7;
  v26.size.height = a8;
  double MinX = CGRectGetMinX(v26);
  (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, *MEMORY[0x263F18DD0], v15);
  char v20 = sub_21FA24960();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if (v20) {
    double v21 = a4;
  }
  else {
    double v21 = a2;
  }
  double v24 = MinX - v21;
  v27.origin.x = a5;
  v27.origin.y = a6;
  v27.size.width = a7;
  v27.size.height = a8;
  v23[1] = CGRectGetMinY(v27) - a1;
  v28.origin.x = a5;
  v28.origin.y = a6;
  v28.size.width = a7;
  v28.size.height = a8;
  CGRectGetMaxX(v28);
  v29.origin.x = a5;
  v29.origin.y = a6;
  v29.size.width = a7;
  v29.size.height = a8;
  CGRectGetMinX(v29);
  v30.origin.x = a5;
  v30.origin.y = a6;
  v30.size.width = a7;
  v30.size.height = a8;
  CGRectGetMaxY(v30);
  v31.origin.x = a5;
  v31.origin.y = a6;
  v31.size.width = a7;
  v31.size.height = a8;
  CGRectGetMinY(v31);
  return v24;
}

uint64_t type metadata accessor for Resolved3DContentList()
{
  return sub_21F764F08();
}

uint64_t sub_21F9952D8()
{
  sub_21F7DF204(v0, (uint64_t)v5);
  if (v7)
  {
    v3[0] = v5[0];
    v3[1] = v5[1];
    uint64_t v4 = v6;
    sub_21FA26460();
    sub_21FA25D40();
    swift_bridgeObjectRelease();
    sub_21FA25D40();
    uint64_t v1 = 0x63696D616E79642ELL;
    sub_21F7DF260((uint64_t)v3);
  }
  else
  {
    *((void *)&v3[0] + 1) = 0xE900000000000028;
    sub_21FA26860();
    sub_21FA25D40();
    swift_bridgeObjectRelease();
    sub_21FA25D40();
    return 0x6C61636978656C2ELL;
  }
  return v1;
}

uint64_t sub_21F9953DC()
{
  sub_21FA26A00();
  sub_21F7DF204(v0, (uint64_t)v4);
  if (v6)
  {
    v2[0] = v4[0];
    v2[1] = v4[1];
    uint64_t v3 = v5;
    sub_21FA26A10();
    sub_21FA26480();
    sub_21F7DF260((uint64_t)v2);
  }
  else
  {
    sub_21FA26A10();
    sub_21FA26A10();
  }
  return sub_21FA26A50();
}

uint64_t sub_21F995480()
{
  sub_21F7DF204(v0, (uint64_t)v4);
  if (v6)
  {
    v2[0] = v4[0];
    v2[1] = v4[1];
    uint64_t v3 = v5;
    sub_21FA26A10();
    sub_21FA26480();
    return sub_21F7DF260((uint64_t)v2);
  }
  else
  {
    sub_21FA26A10();
    return sub_21FA26A10();
  }
}

uint64_t sub_21F995510()
{
  sub_21FA26A00();
  sub_21F7DF204(v0, (uint64_t)v4);
  if (v6)
  {
    v2[0] = v4[0];
    v2[1] = v4[1];
    uint64_t v3 = v5;
    sub_21FA26A10();
    sub_21FA26480();
    sub_21F7DF260((uint64_t)v2);
  }
  else
  {
    sub_21FA26A10();
    sub_21FA26A10();
  }
  return sub_21FA26A50();
}

uint64_t sub_21F9955B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_21FA26A10();
  if (v3)
  {
    uint64_t v5 = a2 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_21F7DF204(v5, (uint64_t)v11);
      sub_21F7DF204((uint64_t)v11, (uint64_t)v8);
      if (v10)
      {
        v6[0] = v8[0];
        v6[1] = v8[1];
        uint64_t v7 = v9;
        sub_21FA26A10();
        sub_21FA26480();
        sub_21F7DF260((uint64_t)v6);
      }
      else
      {
        sub_21FA26A10();
        sub_21FA26A10();
      }
      sub_21F7DF2B4((uint64_t)v11);
      v5 += 48;
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_21F99569C()
{
  uint64_t v1 = *v0;
  sub_21FA26A00();
  swift_bridgeObjectRetain();
  sub_21F7D4C74((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_21FA26A50();
}

uint64_t sub_21F9956F4(uint64_t a1)
{
  return sub_21F9955B4(a1, *v1);
}

uint64_t sub_21F9956FC()
{
  uint64_t v1 = *v0;
  sub_21FA26A00();
  swift_bridgeObjectRetain();
  sub_21F7D4C74((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_21FA26A50();
}

void sub_21F995750()
{
}

uint64_t sub_21F995760(uint64_t *a1, uint64_t *a2)
{
  return sub_21F7D404C(*a1, *a2);
}

void sub_21F99576C()
{
  type metadata accessor for Resolved3DContentList.Item();

  JUMPOUT(0x223C55360);
}

uint64_t sub_21F9957B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E068](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_21F99583C()
{
  swift_getWitnessTable();

  return sub_21FA26050();
}

uint64_t sub_21F9958C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E078](a1, a2, a3, WitnessTable, v7);
}

void sub_21F995934(void *a1@<X8>)
{
  sub_21F99576C();
  *a1 = v2;
}

void (*sub_21F995968(uint64_t **a1))(void *a1)
{
  uint64_t v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)sub_21F9959DC(v2);
  return sub_21F80EA18;
}

void (*sub_21F9959DC(uint64_t *a1))(void *a1)
{
  uint64_t v2 = type metadata accessor for Resolved3DContentList.Item();
  *a1 = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  a1[1] = v3;
  a1[2] = (uint64_t)malloc(*(void *)(v3 + 64));
  sub_21FA25F60();
  return sub_21F8AFF38;
}

uint64_t sub_21F995AAC()
{
  swift_getWitnessTable();

  return sub_21FA26070();
}

uint64_t sub_21F995B18(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t sub_21F995B6C()
{
  swift_getWitnessTable();
  uint64_t v0 = sub_21F8B0C04();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_21F995BC8()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F995BE4()
{
  return sub_21F995CC8();
}

uint64_t sub_21F995BFC()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F995C18()
{
  return sub_21F995CC8();
}

uint64_t sub_21F995C30()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F995C94()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F995CB0()
{
  return sub_21F995CC8();
}

uint64_t sub_21F995CC8()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F995D14()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F995D78(uint64_t a1, uint64_t a2)
{
  sub_21F7DF204(a1, (uint64_t)v8);
  sub_21F7DF204(a2, (uint64_t)v9);
  if ((v8[40] & 1) == 0)
  {
    sub_21F7DF204((uint64_t)v8, (uint64_t)v7);
    if ((v11 & 1) == 0)
    {
      char v3 = v7[0] == *(void *)&v9[0];
      goto LABEL_6;
    }
LABEL_8:
    sub_21F76CA84((uint64_t)v8, &qword_267EE74D0);
    char v3 = 0;
    return v3 & 1;
  }
  sub_21F7DF204((uint64_t)v8, (uint64_t)v7);
  if (v11 != 1)
  {
    sub_21F7DF260((uint64_t)v7);
    goto LABEL_8;
  }
  v5[0] = v9[0];
  v5[1] = v9[1];
  uint64_t v6 = v10;
  char v3 = MEMORY[0x223C558B0](v7, v5);
  sub_21F7DF260((uint64_t)v5);
  sub_21F7DF260((uint64_t)v7);
LABEL_6:
  sub_21F7DF2B4((uint64_t)v8);
  return v3 & 1;
}

uint64_t type metadata accessor for Resolved3DContentList.Item()
{
  return sub_21F764F08();
}

ValueMetadata *_s17Chart3DChildIDKeyVMa()
{
  return &_s17Chart3DChildIDKeyVN;
}

ValueMetadata *type metadata accessor for Resolved3DContentID.Component()
{
  return &type metadata for Resolved3DContentID.Component;
}

ValueMetadata *type metadata accessor for Resolved3DContentID()
{
  return &type metadata for Resolved3DContentID;
}

uint64_t sub_21F995EA8()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_21FA24F70();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_21F995FA4(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = sub_21FA24F70();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = v8 + v11;
  unint64_t v13 = ((v12 + ((v7 + 16) & ~v7)) & ~v11) + *(void *)(v10 + 64);
  int v14 = (*(_DWORD *)(v10 + 80) | v6) & 0x100000;
  uint64_t v15 = *a2;
  *a1 = *a2;
  if ((v11 | (unint64_t)v6) > 7 || v14 != 0 || v13 > 0x18)
  {
    a1 = (uint64_t *)(v15
                   + (((v11 | v6) & 0xF8 ^ 0x1F8) & ((v11 | v6) + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v18 = ~v11;
    double v19 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL);
    char v20 = (_DWORD *)(((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFFCLL);
    _DWORD *v19 = *v20;
    double v21 = (_DWORD *)(((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    double v22 = (_DWORD *)(((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *double v21 = *v22;
    uint64_t v23 = ((unint64_t)v21 + v7 + 4) & ~v7;
    uint64_t v24 = ((unint64_t)v22 + v7 + 4) & ~v7;
    double v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v25(v23, v24, AssociatedTypeWitness);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))((v23 + v12) & v18, (v24 + v12) & v18, v9);
  }
  return a1;
}

uint64_t sub_21F996194(uint64_t a1)
{
  uint64_t v1 = a1 + 11;
  swift_bridgeObjectRelease();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = v3 + 8;
  unint64_t v5 = ((((v1 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + *(unsigned __int8 *)(v3 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v4 + 56);
  uint64_t v7 = sub_21FA24F70();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(uint64_t (**)(unint64_t, uint64_t))(v8 + 8);
  uint64_t v10 = v7;
  unint64_t v11 = (v5 + v6 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);

  return v9(v11, v10);
}

void *sub_21F996288(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v4 = (_DWORD *)(((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v3 = *v4;
  unint64_t v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v5 = *v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  uint64_t v10 = v8 + 16;
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = ((unint64_t)v5 + v11 + 4) & ~v11;
  uint64_t v13 = ((unint64_t)v6 + v11 + 4) & ~v11;
  swift_bridgeObjectRetain();
  v9(v12, v13, AssociatedTypeWitness);
  uint64_t v14 = *(void *)(v10 + 48);
  uint64_t v15 = sub_21FA24F70();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 16))((v14 + *(unsigned __int8 *)(v16 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (v14 + *(unsigned __int8 *)(v16 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), v15);
  return a1;
}

void *sub_21F9963B4(void *a1, void *a2)
{
  unint64_t v3 = (unint64_t)a2 + 11;
  *a1 = *a2;
  unint64_t v4 = (unint64_t)a1 + 11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v5 = (v3 & 0xFFFFFFFFFFFFFFFCLL) + 7;
  *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(v3 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v6 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL;
  *uint64_t v6 = *(_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = v9 + 24;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = ((unint64_t)v6 + v11 + 4) & ~v11;
  uint64_t v13 = (v11 + 4 + v7) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(v12, v13, AssociatedTypeWitness);
  uint64_t v14 = *(void *)(v10 + 40);
  uint64_t v15 = sub_21FA24F70();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 24))((v14 + *(unsigned __int8 *)(v16 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (v14 + *(unsigned __int8 *)(v16 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), v15);
  return a1;
}

void *sub_21F9964E4(void *a1, void *a2)
{
  *a1 = *a2;
  unint64_t v3 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v4 = (_DWORD *)(((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v3 = *v4;
  unint64_t v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v5 = *v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)v5 + v10 + 4) & ~v10;
  uint64_t v12 = ((unint64_t)v6 + v10 + 4) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v11, v12, AssociatedTypeWitness);
  uint64_t v13 = *(void *)(v9 + 32);
  uint64_t v14 = sub_21FA24F70();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 32))((v13 + *(unsigned __int8 *)(v15 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), (v13 + *(unsigned __int8 *)(v15 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), v14);
  return a1;
}

void *sub_21F9965F4(void *a1, void *a2)
{
  unint64_t v3 = (unint64_t)a2 + 11;
  *a1 = *a2;
  unint64_t v4 = (unint64_t)a1 + 11;
  swift_bridgeObjectRelease();
  unint64_t v5 = (v3 & 0xFFFFFFFFFFFFFFFCLL) + 7;
  *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(v3 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v6 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL;
  *uint64_t v6 = *(_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = v9 + 40;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = ((unint64_t)v6 + v11 + 4) & ~v11;
  uint64_t v13 = (v11 + 4 + v7) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 40))(v12, v13, AssociatedTypeWitness);
  uint64_t v14 = *(void *)(v10 + 24);
  uint64_t v15 = sub_21FA24F70();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 40))((v14 + *(unsigned __int8 *)(v16 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (v14 + *(unsigned __int8 *)(v16 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), v15);
  return a1;
}

uint64_t sub_21F99671C(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = sub_21FA24F70();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = *(void *)(v5 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  if (v6 <= *(_DWORD *)(v8 + 84)) {
    unsigned int v12 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v12 = v6;
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = v12;
  }
  if (!a2) {
    return 0;
  }
  if (a2 <= v13) {
    goto LABEL_28;
  }
  uint64_t v14 = ((v10 + v11 + ((v9 + 16) & ~v9)) & ~v11) + *(void *)(*(void *)(v7 - 8) + 64);
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v18 = ((a2 - v13 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v18))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v18 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v18 < 2)
    {
LABEL_28:
      if ((v12 & 0x80000000) != 0)
      {
        unint64_t v23 = ((((((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v9 + 4) & ~v9;
        if (v6 == v13)
        {
          uint64_t v24 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
          return v24(v23, v6, AssociatedTypeWitness);
        }
        else
        {
          unint64_t v25 = (v23 + v10 + v11) & ~v11;
          CGRect v26 = *(uint64_t (**)(unint64_t))(v8 + 48);
          return v26(v25);
        }
      }
      else
      {
        uint64_t v22 = *(void *)a1;
        if (*(void *)a1 >= 0xFFFFFFFFuLL) {
          LODWORD(v22) = -1;
        }
        return (v22 + 1);
      }
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_28;
  }
LABEL_18:
  int v19 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v19 = 0;
  }
  if (v14)
  {
    if (v14 <= 3) {
      int v20 = v14;
    }
    else {
      int v20 = 4;
    }
    switch(v20)
    {
      case 2:
        int v21 = *a1;
        break;
      case 3:
        int v21 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v21 = *(_DWORD *)a1;
        break;
      default:
        int v21 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v21 = 0;
  }
  return v13 + (v21 | v19) + 1;
}

void sub_21F996A0C(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v27 = v7;
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = sub_21FA24F70();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  if (v8 <= *(_DWORD *)(v10 + 84)) {
    unsigned int v14 = *(_DWORD *)(v10 + 84);
  }
  else {
    unsigned int v14 = v8;
  }
  if (v14 <= 0x7FFFFFFF) {
    unsigned int v15 = 0x7FFFFFFF;
  }
  else {
    unsigned int v15 = v14;
  }
  size_t v16 = ((v12 + v13 + ((v11 + 16) & ~v11)) & ~v13) + *(void *)(*(void *)(v9 - 8) + 64);
  if (a3 <= v15)
  {
    int v17 = 0;
  }
  else if (v16 <= 3)
  {
    unsigned int v20 = ((a3 - v15 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
    if (HIWORD(v20))
    {
      int v17 = 4;
    }
    else if (v20 >= 0x100)
    {
      int v17 = 2;
    }
    else
    {
      int v17 = v20 > 1;
    }
  }
  else
  {
    int v17 = 1;
  }
  if (v15 < a2)
  {
    unsigned int v18 = ~v15 + a2;
    if (v16 < 4)
    {
      int v19 = (v18 >> (8 * v16)) + 1;
      if (v16)
      {
        int v21 = v18 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if (v16 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v16 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v16] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v16] = v19;
        return;
      case 3:
        goto LABEL_49;
      case 4:
        *(_DWORD *)&a1[v16] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x21F996D80);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if ((v14 & 0x80000000) != 0)
        {
          unint64_t v23 = (((((unint64_t)(a1 + 11) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v11 + 4) & ~v11;
          if (v8 == v15)
          {
            uint64_t v24 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56);
            v24(v23, a2, v8, AssociatedTypeWitness);
          }
          else
          {
            unint64_t v25 = (v23 + v12 + v13) & ~v13;
            CGRect v26 = *(void (**)(unint64_t, uint64_t))(v10 + 56);
            v26(v25, a2);
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v22 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v22 = (a2 - 1);
          }
          *(void *)a1 = v22;
        }
      }
      return;
  }
}

unint64_t sub_21F996DAC()
{
  unint64_t result = qword_267EE9BF0;
  if (!qword_267EE9BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE9BF0);
  }
  return result;
}

unint64_t sub_21F996E04()
{
  unint64_t result = qword_267EE9BF8;
  if (!qword_267EE9BF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE9BF8);
  }
  return result;
}

uint64_t sub_21F996E58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21F76CA40(&qword_267EE77A8);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_21FA24F70();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F98A30C(a1, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_21F76CA84((uint64_t)v6, &qword_267EE77A8);
LABEL_10:
    sub_21F76CA40(&qword_267EE77A0);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_21FA28550;
    sub_21F7DF204(a2, v11 + 32);
    return v11;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  sub_21F8C0744();
  sub_21FA24F80();
  uint64_t v11 = *(void *)&v15[0];
  if (!*(void *)&v15[0])
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    goto LABEL_10;
  }
  sub_21F7DF204(a2, (uint64_t)v15);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v11 = (uint64_t)sub_21F7EAFB8(0, *(void *)(v11 + 16) + 1, 1, (char *)v11);
  }
  unint64_t v13 = *(void *)(v11 + 16);
  unint64_t v12 = *(void *)(v11 + 24);
  if (v13 >= v12 >> 1) {
    uint64_t v11 = (uint64_t)sub_21F7EAFB8((char *)(v12 > 1), v13 + 1, 1, (char *)v11);
  }
  *(void *)(v11 + 16) = v13 + 1;
  sub_21F8A5E44(v15, (_OWORD *)(v11 + 48 * v13 + 32));
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v11;
}

ValueMetadata *type metadata accessor for Resolved3DContentID.Generator()
{
  return &type metadata for Resolved3DContentID.Generator;
}

uint64_t FunctionGraphMark.init(x:y:function:)@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3)
{
  v11[0] = sub_21FA25340();
  v11[1] = v3;
  char v12 = v4 & 1;
  uint64_t v13 = v5;
  uint64_t v14 = sub_21FA25340();
  uint64_t v15 = v6;
  char v16 = v7 & 1;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v17 = v8;
  char v20 = 1;
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  sub_21F9974D0((uint64_t)v11);
  return sub_21F9974EC((uint64_t)v11, a1);
}

uint64_t FunctionGraphMark.init(x:y:t:domain:function:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v22[0] = sub_21FA25340();
  v22[1] = v11;
  char v23 = v12 & 1;
  uint64_t v24 = v13;
  uint64_t v25 = sub_21FA25340();
  uint64_t v26 = v14;
  char v27 = v15 & 1;
  uint64_t v28 = v16;
  uint64_t v29 = sub_21FA25340();
  uint64_t v30 = v17;
  char v31 = v18 & 1;
  uint64_t v32 = v19;
  double v33 = a2;
  double v34 = a3;
  uint64_t v35 = a8;
  uint64_t v36 = a9;
  sub_21F997548((uint64_t)v22);
  return sub_21F9974EC((uint64_t)v22, a1);
}

uint64_t static FunctionGraphMark._layoutChartContent(_:_:)(_OWORD *a1, long long *a2)
{
  long long v2 = a1[5];
  v8[4] = a1[4];
  v8[5] = v2;
  long long v3 = a1[7];
  v8[6] = a1[6];
  v8[7] = v3;
  long long v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  long long v5 = a1[3];
  _OWORD v8[2] = a1[2];
  int64_t v8[3] = v5;
  long long v7 = *a2;
  return _s6Charts23FunctionLinePlotContentV012_layoutChartE0yyAC_AA01_gE12LayoutInputsVtFZ_0((uint64_t)v8, (uint64_t *)&v7);
}

uint64_t static FunctionGraphMark._renderChartContent(_:_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  long long v3 = a1[5];
  v11[4] = a1[4];
  v11[5] = v3;
  long long v4 = a1[7];
  void v11[6] = a1[6];
  v11[7] = v4;
  long long v5 = a1[1];
  v11[0] = *a1;
  v11[1] = v5;
  long long v6 = a1[3];
  void v11[2] = a1[2];
  v11[3] = v6;
  uint64_t v7 = *(void *)(a2 + 8);
  v9[0] = *(unsigned char *)a2;
  uint64_t v10 = v7;
  return static FunctionLinePlotContent._renderChartContent(_:_:)((uint64_t)v11, v9, a3);
}

uint64_t sub_21F997428(_OWORD *a1, long long *a2)
{
  long long v2 = a1[5];
  v8[4] = a1[4];
  v8[5] = v2;
  long long v3 = a1[7];
  v8[6] = a1[6];
  v8[7] = v3;
  long long v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  long long v5 = a1[3];
  _OWORD v8[2] = a1[2];
  int64_t v8[3] = v5;
  long long v7 = *a2;
  return _s6Charts23FunctionLinePlotContentV012_layoutChartE0yyAC_AA01_gE12LayoutInputsVtFZ_0((uint64_t)v8, (uint64_t *)&v7);
}

uint64_t sub_21F997478@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  long long v3 = a1[5];
  v11[4] = a1[4];
  v11[5] = v3;
  long long v4 = a1[7];
  void v11[6] = a1[6];
  v11[7] = v4;
  long long v5 = a1[1];
  v11[0] = *a1;
  v11[1] = v5;
  long long v6 = a1[3];
  void v11[2] = a1[2];
  v11[3] = v6;
  uint64_t v7 = *(void *)(a2 + 8);
  v9[0] = *(unsigned char *)a2;
  uint64_t v10 = v7;
  return static FunctionLinePlotContent._renderChartContent(_:_:)((uint64_t)v11, v9, a3);
}

uint64_t sub_21F9974D0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 80) & 1;
  *(void *)(result + 48) &= 1uLL;
  *(void *)(result + 80) = v1;
  return result;
}

uint64_t sub_21F9974EC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_21F997548(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 80) & 1 | 0x4000000000000000;
  *(void *)(result + 48) &= 1uLL;
  *(void *)(result + 80) = v1;
  return result;
}

uint64_t sub_21F997568(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  unint64_t v11 = a11 >> 62;
  if (a11 >> 62 != 2)
  {
    if (v11 == 1)
    {
      char v15 = a7 & 1;
      sub_21F7652C0(result, a2, a3 & 1);
      swift_bridgeObjectRetain();
      sub_21F7652C0(a5, a6, v15);
      swift_bridgeObjectRetain();
      sub_21F7652C0(a9, a10, a11 & 1);
    }
    else
    {
      if (v11) {
        return result;
      }
      char v14 = a7 & 1;
      sub_21F7652C0(result, a2, a3 & 1);
      swift_bridgeObjectRetain();
      sub_21F7652C0(a5, a6, v14);
    }
    swift_bridgeObjectRetain();
  }

  return swift_retain();
}

uint64_t destroy for FunctionGraphMark(uint64_t *a1)
{
  return sub_21F9976F4(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]);
}

uint64_t sub_21F9976F4(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  unint64_t v11 = a11 >> 62;
  if (a11 >> 62 == 2)
  {
    return swift_release();
  }
  else
  {
    if (v11 == 1)
    {
      char v15 = a7 & 1;
      sub_21F7656A8(result, a2, a3 & 1);
      swift_bridgeObjectRelease();
      sub_21F7656A8(a5, a6, v15);
      swift_bridgeObjectRelease();
      sub_21F7656A8(a9, a10, a11 & 1);
      swift_release();
    }
    else
    {
      if (v11) {
        return result;
      }
      char v14 = a7 & 1;
      sub_21F7656A8(result, a2, a3 & 1);
      swift_bridgeObjectRelease();
      sub_21F7656A8(a5, a6, v14);
      swift_release();
    }
    return swift_bridgeObjectRelease();
  }
}

uint64_t *initializeWithCopy for FunctionGraphMark(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v13 = a2[9];
  unint64_t v14 = a2[10];
  uint64_t v15 = a2[11];
  uint64_t v16 = a2[12];
  uint64_t v17 = a2[13];
  uint64_t v18 = a2[14];
  uint64_t v19 = a2[15];
  sub_21F997568(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  return a1;
}

uint64_t assignWithCopy for FunctionGraphMark(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v23 = a2[9];
  unint64_t v24 = a2[10];
  uint64_t v25 = a2[11];
  uint64_t v26 = a2[12];
  uint64_t v27 = a2[13];
  uint64_t v28 = a2[14];
  uint64_t v29 = a2[15];
  sub_21F997568(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v23, v24);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v23;
  *(void *)(a1 + 80) = v24;
  *(void *)(a1 + 88) = v25;
  *(void *)(a1 + 96) = v26;
  *(void *)(a1 + 104) = v27;
  *(void *)(a1 + 112) = v28;
  *(void *)(a1 + 120) = v29;
  sub_21F9976F4(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21);
  return a1;
}

__n128 initializeWithTake for FunctionLinePlotContent.FunctionLineRepresentation(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for FunctionGraphMark(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  long long v11 = *(_OWORD *)(a1 + 64);
  long long v12 = *(_OWORD *)(a1 + 80);
  long long v13 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v13;
  long long v14 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v14;
  long long v15 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v15;
  long long v16 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v16;
  sub_21F9976F4(v3, v5, v4, v6, v7, v8, v9, v10, v11, *((uint64_t *)&v11 + 1), v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for FunctionGraphMark(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 128)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 48) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for FunctionGraphMark(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 120) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 128) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(void *)(a1 + 48) = 2 * -a2;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(void *)(a1 + 120) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FunctionGraphMark()
{
  return &type metadata for FunctionGraphMark;
}

unsigned char *storeEnumTagSinglePayload for LegendLayout(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *double result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x21F997CB4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_21F997CDC(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    sub_21F7A244C(0, v2, 0);
    uint64_t result = v8;
    unsigned int v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v5 = *v4;
      uint64_t v9 = result;
      unint64_t v7 = *(void *)(result + 16);
      unint64_t v6 = *(void *)(result + 24);
      if (v7 >= v6 >> 1)
      {
        sub_21F7A244C((char *)(v6 > 1), v7 + 1, 1);
        uint64_t result = v9;
      }
      *(void *)(result + 16) = v7 + 1;
      *(void *)(result + 8 * v7 + 32) = v5;
      v4 += 2;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_21F997DA0(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    sub_21F7A244C(0, v2, 0);
    uint64_t result = v8;
    unsigned int v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *v4;
      uint64_t v9 = result;
      unint64_t v7 = *(void *)(result + 16);
      unint64_t v6 = *(void *)(result + 24);
      if (v7 >= v6 >> 1)
      {
        sub_21F7A244C((char *)(v6 > 1), v7 + 1, 1);
        uint64_t result = v9;
      }
      *(void *)(result + 16) = v7 + 1;
      *(void *)(result + 8 * v7 + 32) = v5;
      v4 += 2;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_21F997E64(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    sub_21F7A278C(0, v2, 0);
    uint64_t result = v9;
    unsigned int v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v6 = *v4;
      v4 += 2;
      uint64_t v5 = v6;
      uint64_t v10 = result;
      unint64_t v8 = *(void *)(result + 16);
      unint64_t v7 = *(void *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        sub_21F7A278C((char *)(v7 > 1), v8 + 1, 1);
        uint64_t result = v10;
      }
      *(void *)(result + 16) = v8 + 1;
      *(void *)(result + 8 * v8 + 32) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_21F997F24(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    sub_21F7A244C(0, v2, 0);
    uint64_t result = v8;
    unsigned int v4 = (uint64_t *)(a1 + 88);
    do
    {
      uint64_t v5 = *v4;
      uint64_t v9 = result;
      unint64_t v7 = *(void *)(result + 16);
      unint64_t v6 = *(void *)(result + 24);
      if (v7 >= v6 >> 1)
      {
        sub_21F7A244C((char *)(v6 > 1), v7 + 1, 1);
        uint64_t result = v9;
      }
      *(void *)(result + 16) = v7 + 1;
      *(void *)(result + 8 * v7 + 32) = v5;
      v4 += 8;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_21F997FE8(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    sub_21F7A244C(0, v2, 0);
    uint64_t result = v8;
    unsigned int v4 = (uint64_t *)(a1 + 80);
    do
    {
      uint64_t v5 = *v4;
      uint64_t v9 = result;
      unint64_t v7 = *(void *)(result + 16);
      unint64_t v6 = *(void *)(result + 24);
      if (v7 >= v6 >> 1)
      {
        sub_21F7A244C((char *)(v6 > 1), v7 + 1, 1);
        uint64_t result = v9;
      }
      *(void *)(result + 16) = v7 + 1;
      *(void *)(result + 8 * v7 + 32) = v5;
      v4 += 8;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_21F9980AC@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

void sub_21F9980B8(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_21F9980C4()
{
  sub_21F998190();
  sub_21FA24B40();
  return v1;
}

uint64_t sub_21F998100()
{
  sub_21F99813C();
  sub_21FA24B40();
  return v1;
}

unint64_t sub_21F99813C()
{
  unint64_t result = qword_267EE9C00;
  if (!qword_267EE9C00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE9C00);
  }
  return result;
}

unint64_t sub_21F998190()
{
  unint64_t result = qword_267EE9C08;
  if (!qword_267EE9C08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE9C08);
  }
  return result;
}

ValueMetadata *type metadata accessor for LegendRenderingContextKey()
{
  return &type metadata for LegendRenderingContextKey;
}

ValueMetadata *type metadata accessor for LegendLayoutKey()
{
  return &type metadata for LegendLayoutKey;
}

uint64_t sub_21F998204(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t destroy for DefaultChartLegend(uint64_t a1)
{
  sub_21F99EC2C(*(void *)a1, *(unsigned char *)(a1 + 8), MEMORY[0x263F8EED8], MEMORY[0x263F8EEA0]);
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);

  return sub_21F99827C(v2, v3);
}

uint64_t sub_21F99827C(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for DefaultChartLegend(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  sub_21F7642F0(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(v2 + 16);
  LOBYTE(v2) = *(unsigned char *)(v2 + 24);
  sub_21F998204(v6, v2);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v2;
  return a1;
}

uint64_t assignWithCopy for DefaultChartLegend(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  sub_21F7642F0(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  sub_21F99EC2C(v6, v7, MEMORY[0x263F8EED8], MEMORY[0x263F8EEA0]);
  uint64_t v8 = *(void *)(v2 + 16);
  LOBYTE(v2) = *(unsigned char *)(v2 + 24);
  sub_21F998204(v8, v2);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 24) = v2;
  sub_21F99827C(v9, v10);
  return a1;
}

uint64_t assignWithTake for DefaultChartLegend(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  sub_21F99EC2C(v6, v7, MEMORY[0x263F8EED8], MEMORY[0x263F8EEA0]);
  char v8 = *((unsigned char *)a2 + 24);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = a2[2];
  *(unsigned char *)(a1 + 24) = v8;
  sub_21F99827C(v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for DefaultChartLegend(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DefaultChartLegend(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DefaultChartLegend()
{
  return &type metadata for DefaultChartLegend;
}

__n128 initializeWithTake for LegendRenderingContext.Category(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

ValueMetadata *type metadata accessor for LegendRenderingContext.Category()
{
  return &type metadata for LegendRenderingContext.Category;
}

uint64_t destroy for LegendRenderingContext.ColorRamp()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for LegendRenderingContext.ColorRamp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for LegendRenderingContext.ColorRamp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithTake for LegendRenderingContext.ColorRamp(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for LegendRenderingContext.ColorRamp(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LegendRenderingContext.ColorRamp(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LegendRenderingContext.ColorRamp()
{
  return &type metadata for LegendRenderingContext.ColorRamp;
}

uint64_t sub_21F998704(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  swift_bridgeObjectRetain();
  if (a4 < 0)
  {
    return swift_retain();
  }
  else
  {
    return swift_bridgeObjectRetain();
  }
}

uint64_t destroy for LegendRenderingContext.Section(uint64_t a1)
{
  return sub_21F998774(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t sub_21F998774(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  swift_bridgeObjectRelease();
  if (a4 < 0)
  {
    return swift_release();
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

uint64_t initializeWithCopy for LegendRenderingContext.Section(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_21F998704(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for LegendRenderingContext.Section(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_21F998704(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  char v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  sub_21F998774(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for LegendRenderingContext.Section(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  char v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  sub_21F998774(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for LegendRenderingContext.Section(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3F && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 63);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 24) >> 1) & 0x3E | (*(unsigned __int8 *)(a1 + 24) >> 7)) ^ 0x3F;
  if (v3 >= 0x3E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for LegendRenderingContext.Section(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3E)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 63;
    if (a3 >= 0x3F) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3F) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      *(unsigned char *)(result + 24) = 4 * (((-a2 >> 1) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t sub_21F9989A0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24) >> 7;
}

uint64_t sub_21F9989AC(uint64_t result)
{
  *(unsigned char *)(result + 24) &= ~0x80u;
  return result;
}

uint64_t sub_21F9989BC(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = *(unsigned char *)(result + 24) & 3 | (a2 << 7);
  return result;
}

uint64_t sub_21F9989D0()
{
  return MEMORY[0x263F8D320];
}

uint64_t sub_21F9989DC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21F9989F8(uint64_t result, uint64_t a2, char a3, double a4)
{
  uint64_t v4 = result;
  if ((a3 & 1) == 0 && (~a2 & 0x7FF0000000000000) != 0)
  {
    uint64_t v6 = *(void *)(result + 16);
    if (v6)
    {
      uint64_t v8 = 0;
      uint64_t v9 = v6 - 1;
      double v10 = *(double *)&a2 + a4;
      long long v11 = (void *)MEMORY[0x263F8EE78];
      char v12 = 1;
      while (1)
      {
        uint64_t v5 = v6;
        if ((v12 & 1) == 0)
        {
          if (v8 < 2) {
            goto LABEL_33;
          }
          uint64_t v5 = v8 - 1;
        }
        uint64_t v13 = v9 / v5;
        if (v9 / v5 < -1) {
          break;
        }
        if (v13 == -1)
        {
          long long v15 = v11;
        }
        else
        {
          long long v14 = (void *)sub_21FA25ED0();
          long long v15 = v14;
          void v14[2] = v13 + 1;
          v14[4] = 0;
          if (v13) {
            bzero(v14 + 5, 8 * v13);
          }
        }
        long long v16 = (double *)(v15 + 4);
        __n128 result = swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v6; ++i)
        {
          unint64_t v18 = i / v5;
          if (i / v5 < 0)
          {
            __break(1u);
LABEL_31:
            __break(1u);
            goto LABEL_32;
          }
          if (v18 >= v15[2]) {
            goto LABEL_31;
          }
          v16[v18] = *(double *)(v4 + 8 * i + 32) + a4 + v16[v18];
        }
        swift_bridgeObjectRelease();
        uint64_t v19 = v15[2];
        if (v19)
        {
          double v20 = *v16;
          uint64_t v21 = v19 - 1;
          if (v21)
          {
            uint64_t v22 = (double *)(v15 + 5);
            do
            {
              double v23 = *v22++;
              double v24 = v23;
              if (v20 < v23) {
                double v20 = v24;
              }
              --v21;
            }
            while (v21);
          }
        }
        else
        {
          double v20 = 0.0;
        }
        __n128 result = swift_bridgeObjectRelease();
        if (v20 > v10)
        {
          char v12 = 0;
          uint64_t v8 = v5;
          if (v5 != 1) {
            continue;
          }
        }
        return v5;
      }
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t sub_21F998BAC(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, int a6, double a7)
{
  int v85 = a4;
  int v86 = a6;
  int v84 = a2;
  uint64_t v88 = sub_21FA24660();
  uint64_t v11 = *(void *)(v88 - 8);
  MEMORY[0x270FA5388](v88);
  uint64_t v13 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA246F0();
  sub_21F99EC40(&qword_26AD48550, MEMORY[0x263F18AB8]);
  uint64_t v14 = sub_21FA260A0();
  uint64_t v15 = MEMORY[0x263F8EE78];
  if (v14)
  {
    uint64_t v16 = v14;
    uint64_t v91 = MEMORY[0x263F8EE78];
    sub_21F7A2DF4(0, v14 & ~(v14 >> 63), 0);
    uint64_t result = sub_21FA26090();
    if (v16 < 0)
    {
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    uint64_t v82 = a1;
    uint64_t v83 = a3;
    unint64_t v18 = (void (**)(char *))(v11 + 16);
    uint64_t v19 = (void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v87 = a5;
    do
    {
      double v20 = (void (*)(void *, void))sub_21FA261F0();
      uint64_t v21 = v88;
      (*v18)(v13);
      v20(v90, 0);
      sub_21FA24A00();
      LOBYTE(v90[0]) = v22 & 1;
      char v89 = v23 & 1;
      sub_21FA24630();
      uint64_t v25 = v24;
      uint64_t v27 = v26;
      (*v19)(v13, v21);
      uint64_t v15 = v91;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_21F7A2DF4(0, *(void *)(v15 + 16) + 1, 1);
        uint64_t v15 = v91;
      }
      unint64_t v29 = *(void *)(v15 + 16);
      unint64_t v28 = *(void *)(v15 + 24);
      if (v29 >= v28 >> 1)
      {
        sub_21F7A2DF4((char *)(v28 > 1), v29 + 1, 1);
        uint64_t v15 = v91;
      }
      *(void *)(v15 + 16) = v29 + 1;
      uint64_t v30 = v15 + 16 * v29;
      *(void *)(v30 + 32) = v25;
      *(void *)(v30 + 40) = v27;
      sub_21FA26120();
      --v16;
    }
    while (v16);
    a3 = v83;
    a1 = v82;
  }
  if ((v86 & 1) == 0)
  {
    char v31 = v84 & 1;
    uint64_t v32 = sub_21F997CDC(v15);
    uint64_t v33 = sub_21F9989F8(v32, a1, v31, a7);
    swift_bridgeObjectRelease();
    int64_t v34 = *(void *)(v15 + 16);
    uint64_t v35 = (void *)MEMORY[0x263F8EE78];
    if (v34)
    {
      v90[0] = MEMORY[0x263F8EE78];
      uint64_t result = (uint64_t)sub_21F7A2DCC(0, v34, 0);
      if (!v33)
      {
LABEL_63:
        __break(1u);
        goto LABEL_64;
      }
      uint64_t v36 = 0;
      uint64_t v35 = (void *)v90[0];
      do
      {
        v90[0] = v35;
        unint64_t v38 = v35[2];
        unint64_t v37 = v35[3];
        if (v38 >= v37 >> 1)
        {
          sub_21F7A2DCC((char *)(v37 > 1), v38 + 1, 1);
          uint64_t v35 = (void *)v90[0];
        }
        v35[2] = v38 + 1;
        long long v39 = &v35[2 * v38];
        v39[4] = v36 % v33;
        v39[5] = v36 / v33;
        ++v36;
      }
      while (v34 != v36);
    }
LABEL_24:
    uint64_t v48 = swift_bridgeObjectRetain();
    uint64_t v49 = sub_21F997E64(v48);
    swift_bridgeObjectRelease();
    int64_t v50 = sub_21F8842E8(v49);
    char v52 = v51;
    uint64_t result = swift_bridgeObjectRelease();
    if (v52) {
      int64_t v53 = 0;
    }
    else {
      int64_t v53 = v50;
    }
    int64_t v54 = v53 + 1;
    if (__OFADD__(v53, 1))
    {
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    uint64_t v55 = swift_bridgeObjectRetain();
    uint64_t v56 = sub_21F90E8D8(v55);
    swift_bridgeObjectRelease();
    int64_t v57 = sub_21F8842E8(v56);
    char v59 = v58;
    uint64_t result = swift_bridgeObjectRelease();
    if (v59) {
      int64_t v60 = 0;
    }
    else {
      int64_t v60 = v57;
    }
    int64_t v61 = v60 + 1;
    if (__OFADD__(v60, 1)) {
      goto LABEL_60;
    }
    if (v54 < 0)
    {
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    if (v53 == -1)
    {
      uint64_t v62 = MEMORY[0x263F8EE78];
      if ((v61 & 0x8000000000000000) == 0)
      {
LABEL_35:
        if (v60 != -1)
        {
          uint64_t v63 = sub_21FA25ED0();
          *(void *)(v63 + 16) = v61;
          bzero((void *)(v63 + 32), 8 * v60 + 8);
          goto LABEL_40;
        }
LABEL_39:
        uint64_t v63 = MEMORY[0x263F8EE78];
LABEL_40:
        v90[0] = v63;
        uint64_t v64 = v35[2];
        if (!v64 || (uint64_t v65 = *(void *)(v15 + 16)) == 0)
        {
LABEL_54:
          uint64_t v75 = swift_bridgeObjectRetain();
          uint64_t v76 = sub_21F99EEE4(v75, a7);
          swift_bridgeObjectRelease();
          uint64_t v77 = swift_bridgeObjectRetain();
          uint64_t v78 = sub_21F99EEE4(v77, a7);
          uint64_t v79 = swift_bridgeObjectRelease();
          MEMORY[0x270FA5388](v79);
          *(&v82 - 4) = (uint64_t)v76;
          *(&v82 - 3) = (uint64_t)v78;
          *(&v82 - 2) = (uint64_t)v90;
          sub_21F99EC88((uint64_t)v35, v15, (double (*)(void, void, double, double))sub_21F99EF68);
          uint64_t v81 = v80;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v81;
        }
        uint64_t v88 = 0;
        unint64_t v67 = v35[4];
        unint64_t v66 = v35[5];
        uint64_t v68 = v62 + 32;
        uint64_t v69 = v63 + 32;
        uint64_t v70 = v64;
        swift_bridgeObjectRetain();
        uint64_t result = swift_bridgeObjectRetain();
        uint64_t v71 = 0;
        uint64_t v72 = v70 - 1;
        while ((v67 & 0x8000000000000000) == 0)
        {
          if (v67 >= *(void *)(v62 + 16)) {
            goto LABEL_56;
          }
          double v74 = *(double *)(v15 + v71 * 8 + 32);
          double v73 = *(double *)(v15 + v71 * 8 + 40);
          if (*(double *)(v68 + 8 * v67) > v74) {
            double v74 = *(double *)(v68 + 8 * v67);
          }
          *(double *)(v68 + 8 * v67) = v74;
          if ((v66 & 0x8000000000000000) != 0) {
            goto LABEL_57;
          }
          if (v66 >= *(void *)(v63 + 16)) {
            goto LABEL_58;
          }
          if (*(double *)(v69 + 8 * v66) > v73) {
            double v73 = *(double *)(v69 + 8 * v66);
          }
          *(double *)(v69 + 8 * v66) = v73;
          if (v72)
          {
            unint64_t v67 = v35[v71 + 6];
            unint64_t v66 = v35[v71 + 7];
            v71 += 2;
            --v72;
            if (--v65) {
              continue;
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v90[0] = v63;
          goto LABEL_54;
        }
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
    }
    else
    {
      uint64_t v62 = sub_21FA25ED0();
      *(void *)(v62 + 16) = v54;
      bzero((void *)(v62 + 32), 8 * v53 + 8);
      if ((v61 & 0x8000000000000000) == 0) {
        goto LABEL_35;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
  char v40 = v85 & 1;
  uint64_t v41 = sub_21F997DA0(v15);
  uint64_t v42 = sub_21F9989F8(v41, a3, v40, a7);
  swift_bridgeObjectRelease();
  int64_t v43 = *(void *)(v15 + 16);
  uint64_t v35 = (void *)MEMORY[0x263F8EE78];
  if (!v43) {
    goto LABEL_24;
  }
  v90[0] = MEMORY[0x263F8EE78];
  uint64_t result = (uint64_t)sub_21F7A2DCC(0, v43, 0);
  if (v42)
  {
    uint64_t v44 = 0;
    uint64_t v35 = (void *)v90[0];
    do
    {
      v90[0] = v35;
      unint64_t v46 = v35[2];
      unint64_t v45 = v35[3];
      if (v46 >= v45 >> 1)
      {
        sub_21F7A2DCC((char *)(v45 > 1), v46 + 1, 1);
        uint64_t v35 = (void *)v90[0];
      }
      v35[2] = v46 + 1;
      uint64_t v47 = &v35[2 * v46];
      uint64_t v47[4] = v44 / v42;
      v47[5] = v44 % v42;
      ++v44;
    }
    while (v43 != v44);
    goto LABEL_24;
  }
LABEL_64:
  __break(1u);
  return result;
}

unint64_t sub_21F9992C0(unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*(void *)(a3 + 16) <= result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(void *)(a4 + 16) <= a2)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (*(void *)(*(void *)a5 + 16) <= a2) {
LABEL_11:
  }
    __break(1u);
  return result;
}

double sub_21F99933C(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, double a6, uint64_t a7, char a8)
{
  sub_21FA246F0();
  sub_21F99EC40(&qword_26AD48550, MEMORY[0x263F18AB8]);
  sub_21FA26090();
  sub_21FA26110();
  double v15 = 0.0;
  double v16 = 0.0;
  if (v28 != v27)
  {
    uint64_t v17 = sub_21F998BAC(a1, a2 & 1, a3, a4 & 1, a5, a8 & 1, a6);
    uint64_t v18 = *(void *)(v17 + 16);
    if (v18)
    {
      uint64_t v19 = (CGFloat *)(v17 + 56);
      do
      {
        CGFloat v20 = *(v19 - 3);
        CGFloat v21 = *(v19 - 2);
        CGFloat v22 = *(v19 - 1);
        CGFloat v23 = *v19;
        v29.origin.x = v20;
        v29.origin.y = v21;
        v29.size.width = v22;
        v29.size.height = *v19;
        double MaxX = CGRectGetMaxX(v29);
        if (v15 <= MaxX) {
          double v15 = MaxX;
        }
        v30.origin.x = v20;
        v30.origin.y = v21;
        v30.size.width = v22;
        v30.size.height = v23;
        double MaxY = CGRectGetMaxY(v30);
        if (v16 <= MaxY) {
          double v16 = MaxY;
        }
        v19 += 4;
        --v18;
      }
      while (v18);
    }
    swift_bridgeObjectRelease();
  }
  return v15;
}

uint64_t sub_21F9994B8(uint64_t a1, int a2, void (**a3)(char *, uint64_t, uint64_t, uint64_t), int a4, uint64_t a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, double a10, uint64_t a11, int a12)
{
  LODWORD(v61) = a12;
  LODWORD(v62) = a4;
  uint64_t v64 = a3;
  LODWORD(v60) = a2;
  uint64_t v63 = a1;
  uint64_t v18 = sub_21F76CA40(&qword_26AD4A260);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v65 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_21FA24660();
  *(void *)&long long v67 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  CGFloat v22 = (char *)&v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_21F76CA40(&qword_267EE9D08);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v55 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_21FA246F0();
  uint64_t v59 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v55 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_21F76CA40(&qword_267EE9D10);
  MEMORY[0x270FA5388](v29 - 8);
  char v31 = (char *)&v55 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = sub_21F76CA40(&qword_267EE9D18);
  MEMORY[0x270FA5388](v58);
  uint64_t v33 = (char *)&v55 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F99EC40(&qword_26AD48550, MEMORY[0x263F18AB8]);
  sub_21FA26090();
  uint64_t result = sub_21FA26110();
  if (v68[0] != v69)
  {
    uint64_t v55 = v23;
    unint64_t v66 = v22;
    LOBYTE(v68[0]) = v60 & 1;
    LOBYTE(v69) = v62 & 1;
    uint64_t v64 = (void (**)(char *, uint64_t, uint64_t, uint64_t))sub_21F998BAC(v63, v60 & 1, (uint64_t)v64, v62 & 1, a5, v61 & 1, a10);
    uint64_t v35 = v59;
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v59 + 16);
    uint64_t v61 = v59 + 16;
    int64_t v60 = v36;
    v36(v31, (char *)a5, v26);
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v28, v31, v26);
    sub_21F99EC40(&qword_267EE9D20, MEMORY[0x263F18AB8]);
    uint64_t v62 = v28;
    sub_21FA25D60();
    uint64_t v37 = v58;
    unint64_t v38 = &v33[*(int *)(v58 + 52)];
    *(void *)unint64_t v38 = v64;
    *((void *)v38 + 1) = 0;
    uint64_t v63 = *(int *)(v37 + 56);
    v33[v63] = 0;
    long long v39 = &v33[*(int *)(sub_21F76CA40(&qword_26AD4A428) + 36)];
    uint64_t v59 = v67 + 16;
    uint64_t v58 = v35 + 8;
    uint64_t v64 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v67 + 56);
    int64_t v57 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
    char v40 = (uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 32);
    uint64_t v56 = (void (**)(char *, uint64_t))(v67 + 8);
    while (1)
    {
      uint64_t v41 = *(void *)v39;
      sub_21FA26110();
      if (v41 == v68[0])
      {
        uint64_t v43 = (uint64_t)v65;
        (*v64)(v65, 1, 1, v20);
LABEL_10:
        sub_21F76CA84(v43, &qword_26AD4A260);
        goto LABEL_12;
      }
      uint64_t v42 = (void (*)(uint64_t *, void))sub_21FA261F0();
      uint64_t v43 = (uint64_t)v65;
      (*(void (**)(char *))v59)(v65);
      v42(v68, 0);
      uint64_t v44 = v62;
      v60(v62, v33, v26);
      sub_21FA26120();
      (*(void (**)(char *, uint64_t))v58)(v44, v26);
      (*v64)((char *)v43, 0, 1, v20);
      if ((*v57)(v43, 1, v20) == 1) {
        goto LABEL_10;
      }
      unint64_t v45 = *v40;
      uint64_t result = (*v40)(v66, v43, v20);
      unint64_t v46 = *((void *)v38 + 1);
      unint64_t v47 = *(void *)(*(void *)v38 + 16);
      if (v46 == v47)
      {
        (*v56)(v66, v20);
LABEL_12:
        v33[v63] = 1;
        return sub_21F76CA84((uint64_t)v33, &qword_267EE9D18);
      }
      if (v46 >= v47) {
        break;
      }
      unint64_t v48 = v46 + 1;
      uint64_t v49 = *(void *)v38 + 32 * v46;
      uint64_t v50 = *(void *)(v49 + 56);
      uint64_t v51 = *(void *)(v49 + 32);
      long long v67 = *(_OWORD *)(v49 + 40);
      *((void *)v38 + 1) = v48;
      char v52 = &v25[*(int *)(v55 + 48)];
      v45(v25, (uint64_t)v66, v20);
      *(void *)char v52 = v51;
      *(_OWORD *)(v52 + 8) = v67;
      *((void *)v52 + 3) = v50;
      v70.origin.x = a6;
      v70.origin.y = a7;
      v70.size.width = a8;
      v70.size.height = a9;
      CGRectGetMinX(v70);
      v71.origin.x = a6;
      v71.origin.y = a7;
      v71.size.width = a8;
      v71.size.height = a9;
      CGRectGetMinY(v71);
      sub_21FA25940();
      sub_21FA24A00();
      LOBYTE(v68[0]) = v53 & 1;
      LOBYTE(v69) = v54 & 1;
      sub_21FA24640();
      (*v56)(v25, v20);
      if (v33[v63] == 1) {
        return sub_21F76CA84((uint64_t)v33, &qword_267EE9D18);
      }
    }
    __break(1u);
  }
  return result;
}

double sub_21F999C08(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  return sub_21F99933C(a1, a2 & 1, a3, a4 & 1, a5, *(double *)(v6 + 8), a6, *(unsigned char *)v6);
}

uint64_t sub_21F999C28(uint64_t a1, char a2, void (**a3)(char *, uint64_t, uint64_t, uint64_t), char a4, uint64_t a5, uint64_t a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10)
{
  return sub_21F9994B8(a1, a2 & 1, a3, a4 & 1, a5, a7, a8, a9, a10, v10[1], a6, *(unsigned __int8 *)v10);
}

void (*sub_21F999C4C(void *a1))(void *)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_21FA24430();
  return sub_21F999CBC;
}

double sub_21F999CC0@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  sub_21FA25270();
  v20.origin.x = a2;
  v20.origin.y = a3;
  v20.size.width = a4;
  v20.size.height = a5;
  CGRectGetMinX(v20);
  v21.origin.x = a2;
  v21.origin.y = a3;
  v21.size.width = a4;
  v21.size.height = a5;
  CGRectGetMidY(v21);
  sub_21FA251D0();
  v22.origin.x = a2;
  v22.origin.y = a3;
  v22.size.width = a4;
  v22.size.height = a5;
  CGRectGetMaxX(v22);
  v23.origin.x = a2;
  v23.origin.y = a3;
  v23.size.width = a4;
  v23.size.height = a5;
  CGRectGetMidY(v23);
  sub_21FA25200();
  v17[0] = v11;
  v17[1] = v12;
  char v18 = v13;
  sub_21F7C48F4((uint64_t)v17, (uint64_t)v19);
  sub_21F76DF78((uint64_t)v19, (void (*)(void, void, void, void, void))sub_21F7C4950);
  sub_21FA25170();
  sub_21F76DF78((uint64_t)v17, (void (*)(void, void, void, void, void))sub_21F7705AC);
  sub_21F76DF78((uint64_t)v17, (void (*)(void, void, void, void, void))sub_21F7705AC);
  double result = *(double *)&v14;
  *(_OWORD *)a1 = v14;
  *(_OWORD *)(a1 + 16) = v15;
  *(unsigned char *)(a1 + 32) = v16;
  return result;
}

uint64_t sub_21F999E38()
{
  return MEMORY[0x270F047C8]();
}

uint64_t sub_21F999E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_21F99FBAC();

  return MEMORY[0x270F04808](a1, a2, a3, v6);
}

uint64_t sub_21F999EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_21F99FBAC();

  return MEMORY[0x270F047D0](a1, a2, a3, v6);
}

uint64_t sub_21F999F18(uint64_t a1)
{
  unint64_t v2 = sub_21F99FBAC();

  return MEMORY[0x270F047E0](a1, v2);
}

uint64_t sub_21F999F64@<X0>(void *a1@<X8>)
{
  unint64_t v2 = (void *)v1;
  sub_21F76C978(v1 + 56, (uint64_t)__src, &qword_26AD43F70);
  if (*(void *)&__src[24])
  {
    long long v21 = *(_OWORD *)__src;
    long long v22 = *(_OWORD *)&__src[16];
    uint64_t v23 = *(void *)&__src[32];
    if ((*(unsigned char *)(v1 + 144) & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_3;
  }
  if (qword_26AD45430 != -1) {
    swift_once();
  }
  sub_21F7C21A4((uint64_t)&qword_26AD521C0, (uint64_t)&v21);
  sub_21F76CA84((uint64_t)__src, &qword_26AD43F70);
  if (*(unsigned char *)(v1 + 144))
  {
LABEL_3:
    if (qword_26AD45718 != -1) {
      swift_once();
    }
  }
LABEL_8:
  if (*(void *)(v1 + 48)) {
    uint64_t v4 = *(void *)(v1 + 48);
  }
  else {
    uint64_t v4 = sub_21FA245C0();
  }
  uint64_t v5 = *((void *)&v22 + 1);
  uint64_t v6 = v23;
  sub_21F77E0FC(&v21, *((uint64_t *)&v22 + 1));
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 16);
  swift_retain();
  v7(v5, v6);
  sub_21F7C21A4((uint64_t)&v21, (uint64_t)__src);
  *(void *)&__src[40] = v4;
  *(_WORD *)&__src[48] = 256;
  swift_retain();
  sub_21FA258E0();
  sub_21FA245B0();
  sub_21F76C978((uint64_t)__src, (uint64_t)v17, &qword_267EE9D50);
  long long v18 = v24;
  long long v19 = v25;
  long long v20 = v26;
  sub_21F76CA84((uint64_t)__src, &qword_267EE9D50);
  uint64_t v8 = *(void *)(v1 + 120);
  sub_21F99F874(v1, (uint64_t)__src);
  if (!v8)
  {
    sub_21F99F8AC((uint64_t)__src);
    sub_21F99F874(v1, (uint64_t)v14);
    goto LABEL_15;
  }
  sub_21F76C978((uint64_t)&__src[56], (uint64_t)v14, &qword_26AD43F70);
  sub_21F99F8AC((uint64_t)__src);
  uint64_t v9 = v15;
  sub_21F76CA84((uint64_t)v14, &qword_26AD43F70);
  sub_21F99F874(v1, (uint64_t)v14);
  if (v9)
  {
LABEL_15:
    sub_21F99F8AC((uint64_t)v14);
    char v11 = 1;
    goto LABEL_16;
  }
  char v10 = v16;
  sub_21F99F8AC((uint64_t)v14);
  char v11 = v10 ^ 1;
LABEL_16:
  *(void *)__src = sub_21FA24BC0();
  *(void *)&__src[8] = 0x4014000000000000;
  __src[16] = 0;
  sub_21F99A290(v11 & 1, (uint64_t)v17, v2, v4, (uint64_t)&__src[24]);
  sub_21F8DE214((uint64_t)&v21);
  swift_release();
  memcpy(a1, __src, 0x118uLL);
  return sub_21F76CA84((uint64_t)v17, &qword_267EE9D58);
}

uint64_t sub_21F99A290@<X0>(char a1@<W0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v25[0] = sub_21FA258E0();
  v25[1] = v10;
  sub_21F99A490(a1, a2, a3, a4, v26);
  if (qword_26AD455D0 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_21FA25330();
  uint64_t v13 = v12;
  char v15 = v14;
  if (qword_26AD455D8 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_21FA25300();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  char v22 = v21 & 1;
  sub_21F7656A8(v11, v13, v15 & 1);
  swift_bridgeObjectRelease();
  sub_21F76C978((uint64_t)v25, (uint64_t)v24, &qword_267EE9D60);
  sub_21F76C978((uint64_t)v24, a5, &qword_267EE9D60);
  *(void *)(a5 + 224) = v16;
  *(void *)(a5 + 232) = v18;
  *(unsigned char *)(a5 + 240) = v22;
  *(void *)(a5 + 248) = v20;
  sub_21F7652C0(v16, v18, v22);
  swift_bridgeObjectRetain();
  sub_21F76CA84((uint64_t)v25, &qword_267EE9D60);
  sub_21F7656A8(v16, v18, v22);
  swift_bridgeObjectRelease();
  return sub_21F76CA84((uint64_t)v24, &qword_267EE9D60);
}

uint64_t sub_21F99A490@<X0>(char a1@<W0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  if (a1)
  {
    sub_21F76C978(a2, (uint64_t)v23, &qword_267EE9D58);
  }
  else
  {
    uint64_t v24 = 0;
    memset(v23, 0, sizeof(v23));
  }
  uint64_t v20 = a3[15];
  if (v20)
  {
    uint64_t v21 = a3[16];
    uint64_t v9 = a3[13];
    uint64_t v8 = a3[14];
    uint64_t v10 = a3[12];
    swift_bridgeObjectRetain();
    swift_retain();
    sub_21FA258E0();
    sub_21FA245B0();
    uint64_t v11 = v25;
    uint64_t v19 = v26;
    uint64_t v17 = v28;
    uint64_t v18 = v27;
    uint64_t v12 = 256;
    uint64_t v13 = a4;
    uint64_t v15 = v30;
    uint64_t v16 = v29;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
    uint64_t v8 = 0;
    uint64_t v21 = 0;
    uint64_t v13 = 0;
    uint64_t v12 = 0;
    uint64_t v11 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v15 = 0;
  }
  sub_21F76C978((uint64_t)v23, (uint64_t)v22, &qword_267EE9D68);
  sub_21F76C978((uint64_t)v22, (uint64_t)a5, &qword_267EE9D68);
  a5[13] = v10;
  a5[14] = v9;
  a5[15] = v8;
  a5[16] = v20;
  a5[17] = v21;
  a5[18] = v13;
  a5[19] = v12;
  a5[20] = v11;
  a5[21] = v19;
  a5[22] = v18;
  a5[23] = v17;
  a5[24] = v16;
  a5[25] = v15;
  sub_21F99F8DC(v10, v9, v8, v20);
  sub_21F76CA84((uint64_t)v23, &qword_267EE9D68);
  sub_21F99F920(v10, v9, v8, v20);
  return sub_21F76CA84((uint64_t)v22, &qword_267EE9D68);
}

uint64_t sub_21F99A6BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21F99E868(a1, a2);
}

uint64_t sub_21F99A6C4()
{
  return sub_21FA257F0();
}

uint64_t sub_21F99A78C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_21FA24220();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  double v7 = COERCE_DOUBLE(sub_21F9F0F9C(v6));
  if (v8) {
    double v9 = 0.0;
  }
  else {
    double v9 = v7;
  }
  double v10 = COERCE_DOUBLE(sub_21F8842A4(v6));
  if (v11) {
    double v12 = 0.0;
  }
  else {
    double v12 = v10;
  }
  if ((~*(void *)&v9 & 0x7FF0000000000000) == 0) {
    return MEMORY[0x263F8EE78];
  }
  if ((~*(void *)&v12 & 0x7FF0000000000000) == 0 || v9 > v12) {
    return MEMORY[0x263F8EE78];
  }
  long double v15 = *((double *)v1 + 2);
  int v16 = *((unsigned __int8 *)v1 + 24);
  uint64_t v42 = v3;
  uint64_t v43 = v2;
  if (v16 && (v16 == 1 || *(void *)&v15 == 2))
  {
    double v41 = v15;
    uint64_t v17 = sub_21F8A8C38(v9, v12);
    uint64_t v18 = *(void *)(v17 + 16);
    uint64_t v40 = v17;
    if (v18)
    {
      uint64_t v19 = (double *)(v17 + 32);
      uint64_t v20 = MEMORY[0x263F8EE78];
      do
      {
        double v23 = *v19;
        if (v9 <= *v19 && v23 <= v12)
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v51[0] = v20;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_21F76CFE0(0, *(void *)(v20 + 16) + 1, 1);
            uint64_t v20 = v51[0];
          }
          unint64_t v22 = *(void *)(v20 + 16);
          unint64_t v21 = *(void *)(v20 + 24);
          if (v22 >= v21 >> 1)
          {
            sub_21F76CFE0((char *)(v21 > 1), v22 + 1, 1);
            uint64_t v20 = v51[0];
          }
          *(void *)(v20 + 16) = v22 + 1;
          *(double *)(v20 + 8 * v22 + 32) = v23;
        }
        ++v19;
        --v18;
      }
      while (v18);
    }
    else
    {
      uint64_t v20 = MEMORY[0x263F8EE78];
    }
    swift_bridgeObjectRelease();
    long double v15 = v41;
  }
  else
  {
    double v26 = sub_21F973520(4, 1, 1, v9, v12, 0.0);
    sub_21F8A8A98((uint64_t)v55, v26, v9, v12);
    sub_21F8A597C();
    uint64_t v20 = v27;
    sub_21F99EBCC((uint64_t)v55);
  }
  double v30 = COERCE_DOUBLE(sub_21F96BCC0(v20));
  double v31 = v28;
  if (v9 <= v30) {
    double v30 = v9;
  }
  if (v12 > v28) {
    double v31 = v12;
  }
  if (v29) {
    double v32 = v9;
  }
  else {
    double v32 = v30;
  }
  if (v29) {
    double v33 = v12;
  }
  else {
    double v33 = v31;
  }
  if (v16)
  {
    if (v16 == 1)
    {
      sub_21F76CA40(&qword_26AD4A478);
      uint64_t v34 = swift_allocObject();
      *(_OWORD *)(v34 + 16) = xmmword_21FA28820;
      *(double *)(v34 + 32) = v32;
      *(double *)(v34 + 40) = v33;
      sub_21F7E3750(v34, (uint64_t)v45, v15);
    }
    else
    {
      sub_21F76CA40(&qword_26AD4A478);
      uint64_t v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = xmmword_21FA28820;
      *(double *)(v36 + 32) = v32;
      *(double *)(v36 + 40) = v33;
      if (*(void *)&v15 == 2) {
        sub_21F7E3450(v36, (uint64_t)v45);
      }
      else {
        sub_21F7741FC(v36, (uint64_t)v45);
      }
    }
  }
  else
  {
    sub_21F76CA40(&qword_26AD4A478);
    uint64_t v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_21FA28820;
    *(double *)(v35 + 32) = v32;
    *(double *)(v35 + 40) = v33;
    sub_21F7E35B4(v35, (uint64_t)v45, v15);
  }
  swift_bridgeObjectRelease();
  uint64_t v37 = *(void *)&v46;
  v52[0] = *(double *)v45;
  v52[1] = *(double *)&v45[1];
  v52[2] = v46;
  uint64_t v52[3] = v47;
  v52[4] = v48;
  long long v53 = v49;
  long long v54 = v50;
  sub_21F774330(v52, (uint64_t)v51, 0.0, *((double *)v1 + 4));
  type metadata accessor for DefaultChartLegend.ColorRampView();
  sub_21FA1B2BC((uint64_t)v5);
  sub_21F9F0FE0((uint64_t)v5, (uint64_t)v44);
  uint64_t v38 = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v5, v43);
  MEMORY[0x270FA5388](v38);
  *(&v40 - 4) = (uint64_t)v44;
  *(&v40 - 3) = (uint64_t)v51;
  *(&v40 - 2) = (uint64_t)v1;
  uint64_t v14 = sub_21F7FB2C4((void (*)(long long *__return_ptr, uint64_t *))sub_21F99EC08, (uint64_t)(&v40 - 6), v20);
  sub_21F96CA78((uint64_t)v51);
  swift_release();
  sub_21F76D5D8(v37);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v32 <= v33)
  {
    sub_21F7F3CCC((uint64_t)v44);
    return v14;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F99AC2C@<X0>(uint64_t *a1@<X0>, void (**a2)(void *__return_ptr, uint64_t *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  void (**v38)(void *__return_ptr, uint64_t *);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void v42[2];

  uint64_t v38 = a2;
  long long v39 = a3;
  uint64_t v6 = sub_21F76CA40(&qword_26AD455F8);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v40 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *a1;
  v42[0] = sub_21F9F8DF4(*a1, 0, 0);
  v42[1] = v9;
  sub_21F7AA27C();
  uint64_t v10 = sub_21FA25350();
  uint64_t v12 = v11;
  char v14 = v13;
  if (qword_26AD455D8 != -1) {
    swift_once();
  }
  char v15 = v14 & 1;
  uint64_t v16 = sub_21FA25300();
  uint64_t v18 = v17;
  char v20 = v19;
  sub_21F7656A8(v10, v12, v15);
  swift_bridgeObjectRelease();
  if (qword_26AD455D0 != -1) {
    swift_once();
  }
  char v21 = v20 & 1;
  uint64_t v22 = sub_21FA25330();
  uint64_t v24 = v23;
  char v26 = v25;
  uint64_t v28 = v27;
  sub_21F7656A8(v16, v18, v21);
  swift_bridgeObjectRelease();
  double v41 = v8;
  (*v38)(v42, &v41);
  uint64_t v29 = v42[0];
  type metadata accessor for DefaultChartLegend.ColorRampView();
  uint64_t v30 = sub_21FA252C0();
  uint64_t v31 = (uint64_t)v40;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v40, 1, 1, v30);
  sub_21FA252D0();
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t result = sub_21F76CA84(v31, &qword_26AD455F8);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v29;
  *(void *)(a4 + 16) = v22;
  *(void *)(a4 + 24) = v24;
  *(unsigned char *)(a4 + 32) = v26 & 1;
  *(void *)(a4 + 40) = v28;
  *(void *)(a4 + 48) = v33;
  *(void *)(a4 + 56) = v35;
  return result;
}

double sub_21F99AEE0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_21FA25270();
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(unsigned char *)(v2 + 25))
  {
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = a1 + 72;
      do
      {
        uint64_t v7 = *(void *)(v6 - 24);
        uint64_t v8 = *(void *)(v6 - 16);
        char v9 = *(unsigned char *)(v6 - 8);
        v6 += 64;
        sub_21F7652C0(v7, v8, v9);
        swift_bridgeObjectRetain();
        sub_21FA251D0();
        sub_21FA25200();
        sub_21F7656A8(v7, v8, v9);
        swift_bridgeObjectRelease();
        --v5;
      }
      while (v5);
LABEL_9:
      swift_bridgeObjectRelease();
    }
  }
  else if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = a1 + 72;
    do
    {
      uint64_t v11 = *(void *)(v10 - 24);
      uint64_t v12 = *(void *)(v10 - 16);
      char v13 = *(unsigned char *)(v10 - 8);
      v10 += 64;
      sub_21F7652C0(v11, v12, v13);
      swift_bridgeObjectRetain();
      sub_21FA251D0();
      sub_21FA25200();
      sub_21F7656A8(v11, v12, v13);
      swift_bridgeObjectRelease();
      --v5;
    }
    while (v5);
    goto LABEL_9;
  }
  double result = *(double *)&v15;
  *(_OWORD *)a2 = v15;
  *(_OWORD *)(a2 + 16) = v16;
  *(unsigned char *)(a2 + 32) = v17;
  return result;
}

uint64_t sub_21F99B07C(uint64_t a1)
{
  if (*(unsigned char *)(v1 + 25))
  {
    uint64_t v3 = sub_21F997FE8(a1);
    sub_21F8842A4(v3);
    swift_bridgeObjectRelease();
    int64_t v4 = *(void *)(a1 + 16);
    uint64_t v5 = MEMORY[0x263F8EE78];
    if (v4)
    {
      uint64_t v33 = MEMORY[0x263F8EE78];
      sub_21F7A244C(0, v4, 0);
      uint64_t v5 = v33;
      unint64_t v6 = *(void *)(v33 + 16);
      uint64_t v7 = (double *)(a1 + 88);
      int64_t v8 = v4;
      do
      {
        double v9 = *(v7 - 6);
        double v10 = *v7;
        unint64_t v11 = *(void *)(v33 + 24);
        if (v6 >= v11 >> 1) {
          sub_21F7A244C((char *)(v11 > 1), v6 + 1, 1);
        }
        *(void *)(v33 + 16) = v6 + 1;
        *(double *)(v33 + 8 * v6 + 32) = v9 + v10 * -0.5;
        v7 += 8;
        ++v6;
        --v8;
      }
      while (v8);
    }
    sub_21F9F0F9C(v5);
    swift_bridgeObjectRelease();
    uint64_t v21 = MEMORY[0x263F8EE78];
    if (v4)
    {
      uint64_t v35 = MEMORY[0x263F8EE78];
      sub_21F7A244C(0, v4, 0);
      uint64_t v21 = v35;
      unint64_t v22 = *(void *)(v35 + 16);
      uint64_t v23 = (double *)(a1 + 88);
      do
      {
        double v24 = *(v23 - 6);
        double v25 = *v23;
        unint64_t v26 = *(void *)(v35 + 24);
        if (v22 >= v26 >> 1) {
          sub_21F7A244C((char *)(v26 > 1), v22 + 1, 1);
        }
        *(void *)(v35 + 16) = v22 + 1;
        *(double *)(v35 + 8 * v22 + 32) = v24 + v25 * 0.5;
        v23 += 8;
        ++v22;
        --v4;
      }
      while (v4);
    }
  }
  else
  {
    uint64_t v12 = sub_21F997F24(a1);
    sub_21F8842A4(v12);
    swift_bridgeObjectRelease();
    int64_t v13 = *(void *)(a1 + 16);
    uint64_t v14 = MEMORY[0x263F8EE78];
    if (v13)
    {
      uint64_t v34 = MEMORY[0x263F8EE78];
      sub_21F7A244C(0, v13, 0);
      uint64_t v14 = v34;
      unint64_t v15 = *(void *)(v34 + 16);
      long long v16 = (double *)(a1 + 80);
      int64_t v17 = v13;
      do
      {
        double v18 = *(v16 - 5);
        double v19 = *v16;
        unint64_t v20 = *(void *)(v34 + 24);
        if (v15 >= v20 >> 1) {
          sub_21F7A244C((char *)(v20 > 1), v15 + 1, 1);
        }
        *(void *)(v34 + 16) = v15 + 1;
        *(double *)(v34 + 8 * v15 + 32) = v18 + v19 * -0.5;
        v16 += 8;
        ++v15;
        --v17;
      }
      while (v17);
    }
    sub_21F9F0F9C(v14);
    swift_bridgeObjectRelease();
    uint64_t v21 = MEMORY[0x263F8EE78];
    if (v13)
    {
      uint64_t v36 = MEMORY[0x263F8EE78];
      sub_21F7A244C(0, v13, 0);
      uint64_t v21 = v36;
      unint64_t v27 = *(void *)(v36 + 16);
      uint64_t v28 = (double *)(a1 + 80);
      do
      {
        double v29 = *(v28 - 5);
        double v30 = *v28;
        unint64_t v31 = *(void *)(v36 + 24);
        if (v27 >= v31 >> 1) {
          sub_21F7A244C((char *)(v31 > 1), v27 + 1, 1);
        }
        *(void *)(v36 + 16) = v27 + 1;
        *(double *)(v36 + 8 * v27 + 32) = v29 + v30 * 0.5;
        v28 += 8;
        ++v27;
        --v13;
      }
      while (v13);
    }
  }
  sub_21F8842A4(v21);
  return swift_bridgeObjectRelease();
}

uint64_t sub_21F99B4D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v43 = a1;
  uint64_t v2 = sub_21FA24BD0();
  uint64_t v41 = *(void *)(v2 - 8);
  uint64_t v42 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v40 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DefaultChartLegend.ColorRampView();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_21F76CA40(&qword_267EE9CF0);
  uint64_t v8 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  double v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_21F76CA40(&qword_267EE9CF8);
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_21F99A78C();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v20 = v15;
  sub_21F99B07C(v15);
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  sub_21F99D394(v1, (uint64_t)v7);
  unint64_t v29 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v30 = (v6 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v31 = (void *)swift_allocObject();
  void v31[2] = v22;
  v31[3] = v24;
  v31[4] = v26;
  v31[5] = v28;
  sub_21F99EA9C((uint64_t)v7, (uint64_t)v31 + v29);
  uint64_t v32 = (void *)((char *)v31 + v30);
  *uint64_t v32 = v17;
  v32[1] = v19;
  *(void *)((char *)v31 + ((v30 + 23) & 0xFFFFFFFFFFFFFFF8)) = v20;
  (*(void (**)(char *, void, uint64_t))(v41 + 104))(v40, *MEMORY[0x263F19790], v42);
  sub_21FA256F0();
  uint64_t v33 = v39;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v14, v10, v39);
  v14[*(int *)(v12 + 44)] = 1;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v33);
  sub_21FA258E0();
  sub_21FA245B0();
  uint64_t v34 = v43;
  sub_21F76C978((uint64_t)v14, v43, &qword_267EE9CF8);
  uint64_t v35 = (_OWORD *)(v34 + *(int *)(sub_21F76CA40(&qword_267EE9D00) + 36));
  long long v36 = v45;
  _OWORD *v35 = v44;
  v35[1] = v36;
  v35[2] = v46;
  return sub_21F76CA84((uint64_t)v14, &qword_267EE9CF8);
}

uint64_t sub_21F99B880(void (***a1)(char *, uint64_t), uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v111 = sub_21FA24B30();
  uint64_t v123 = *(void *)(v111 - 8);
  MEMORY[0x270FA5388](v111);
  char v110 = (char *)v102 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = sub_21F76CA40(&qword_267EE9C80);
  MEMORY[0x270FA5388](v125);
  uint64_t v107 = (uint64_t)v102 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v106 = (uint64_t)v102 - v19;
  MEMORY[0x270FA5388](v20);
  uint64_t v121 = (char *)v102 - v21;
  uint64_t v120 = sub_21FA24970();
  uint64_t v22 = *(void *)(v120 - 8);
  MEMORY[0x270FA5388](v120);
  uint64_t v109 = (void (**)(uint64_t, uint64_t, uint64_t))((char *)v102 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v24);
  *(void *)&long long v108 = (char *)v102 - v25;
  MEMORY[0x270FA5388](v26);
  char v124 = (char *)v102 - v27;
  MEMORY[0x270FA5388](v28);
  uint64_t v117 = (uint64_t)v102 - v29;
  uint64_t v30 = sub_21FA24890();
  uint64_t v31 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  uint64_t v33 = (char *)v102 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA24760();
  double v34 = COERCE_DOUBLE(sub_21F96BCC0(*(void *)a2));
  double v36 = v35;
  if (v37)
  {
    double v36 = 0.0;
    double v34 = 0.0;
  }
  double v38 = a11 - a10;
  double v39 = (v34 - a10) / (a11 - a10);
  char v40 = *(unsigned char *)(a2 + 25);
  uint64_t v41 = (void (**)(char *, uint64_t))(v31 + 8);
  double v42 = (v36 - a10) / v38;
  uint64_t v119 = a2;
  uint64_t v118 = a1;
  if (v40)
  {
    uint64_t v43 = v119;
    sub_21FA25280();
    uint64_t v129 = *(void *)(v43 + 8);
    double v130 = 0.0;
    double v131 = v39;
    double v132 = 0.0;
    double v133 = v42;
    sub_21FA24880();
    sub_21FA24800();
    sub_21F76DF78((uint64_t)v127, (void (*)(void, void, void, void, void))sub_21F7705AC);
    long long v44 = *v41;
    (*v41)(v33, v30);
    sub_21F99AEE0(a3, (uint64_t)v128);
    if (qword_26AD45318 != -1) {
      swift_once();
    }
    sub_21FA24870();
    sub_21FA24860();
    sub_21F76DF78((uint64_t)v128, (void (*)(void, void, void, void, void))sub_21F7705AC);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v44)(v33, v30);
    long long v46 = *(void (***)(char *, uint64_t))(a3 + 16);
    if (v46)
    {
      uint64_t v117 = v119 + *(int *)(type metadata accessor for DefaultChartLegend.ColorRampView() + 48);
      uint64_t v105 = (void (**)(char *, uint64_t))(v123 + 8);
      uint64_t v104 = (void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32);
      LODWORD(v116) = *MEMORY[0x263F18DD0];
      long long v115 = (void (**)(char *, void, uint64_t))(v22 + 104);
      char v114 = (void (**)(char *, uint64_t))(v22 + 8);
      swift_bridgeObjectRetain();
      v102[0] = a3;
      double v47 = (uint64_t *)(a3 + 72);
      *(void *)&long long v48 = 136315138;
      long long v103 = v48;
      v102[1] = MEMORY[0x263F8EE58] + 8;
      long long v49 = v118;
      long long v50 = (char *)v108;
      do
      {
        uint64_t v54 = *(v47 - 3);
        int v55 = *((unsigned __int8 *)v47 - 8);
        uint64_t v56 = *v47;
        uint64_t v122 = *(v47 - 2);
        LODWORD(v121) = v55;
        sub_21F7652C0(v54, v122, v55);
        uint64_t v123 = v56;
        swift_bridgeObjectRetain();
        sub_21FA24930();
        sub_21FA24760();
        uint64_t v57 = v106;
        sub_21F76C978(v117, v106, &qword_267EE9C80);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        uint64_t v112 = v46;
        if (EnumCaseMultiPayload == 1)
        {
          uint64_t v59 = v120;
          (*v104)((uint64_t)v50, v57, v120);
        }
        else
        {
          os_log_type_t v60 = sub_21FA26250();
          uint64_t v61 = sub_21FA250E0();
          os_log_type_t v62 = v60;
          if (os_log_type_enabled(v61, v60))
          {
            uint64_t v63 = swift_slowAlloc();
            uint64_t v64 = swift_slowAlloc();
            v126[0] = v64;
            *(_DWORD *)uint64_t v63 = v103;
            *(void *)(v63 + 4) = sub_21FA1B9BC(0x694474756F79614CLL, 0xEF6E6F6974636572, v126);
            _os_log_impl(&dword_21F741000, v61, v62, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v63, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x223C56A80](v64, -1, -1);
            MEMORY[0x223C56A80](v63, -1, -1);
          }

          uint64_t v65 = v110;
          sub_21FA24B20();
          swift_getAtKeyPath();
          swift_release();
          (*v105)(v65, v111);
          long long v49 = v118;
          uint64_t v59 = v120;
        }
        unint64_t v66 = *v115;
        long long v67 = v124;
        (*v115)(v124, v116, v59);
        char v68 = sub_21FA24960();
        uint64_t v69 = *v114;
        (*v114)(v67, v59);
        v69(v50, v59);
        if (v68) {
          sub_21FA248E0();
        }
        uint64_t v113 = *v49;
        uint64_t v70 = v107;
        sub_21F76C978(v117, v107, &qword_267EE9C80);
        int v71 = swift_getEnumCaseMultiPayload();
        uint64_t v72 = v109;
        if (v71 == 1)
        {
          (*v104)((uint64_t)v109, v70, v59);
          sub_21F7652C0(v54, v122, (char)v121);
          swift_bridgeObjectRetain();
        }
        else
        {
          sub_21F7652C0(v54, v122, (char)v121);
          swift_bridgeObjectRetain();
          os_log_type_t v73 = sub_21FA26250();
          double v74 = sub_21FA250E0();
          if (os_log_type_enabled(v74, v73))
          {
            uint64_t v75 = swift_slowAlloc();
            uint64_t v76 = swift_slowAlloc();
            v126[0] = v76;
            *(_DWORD *)uint64_t v75 = v103;
            *(void *)(v75 + 4) = sub_21FA1B9BC(0x694474756F79614CLL, 0xEF6E6F6974636572, v126);
            _os_log_impl(&dword_21F741000, v74, v73, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v75, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x223C56A80](v76, -1, -1);
            uint64_t v77 = v75;
            uint64_t v72 = v109;
            MEMORY[0x223C56A80](v77, -1, -1);
          }

          uint64_t v78 = v110;
          sub_21FA24B20();
          swift_getAtKeyPath();
          swift_release();
          (*v105)(v78, v111);
          long long v49 = v118;
          uint64_t v59 = v120;
        }
        uint64_t v79 = v124;
        v66(v124, v116, v59);
        char v80 = sub_21FA24960();
        v69(v79, v59);
        v69((char *)v72, v59);
        if (v80) {
          sub_21FA259D0();
        }
        else {
          sub_21FA259C0();
        }
        long long v50 = (char *)v108;
        uint64_t v51 = v112;
        uint64_t v52 = v122;
        char v53 = (char)v121;
        sub_21FA247C0();
        sub_21F7656A8(v54, v52, v53);
        swift_bridgeObjectRelease();
        sub_21FA24940();
        sub_21F7656A8(v54, v52, v53);
        swift_bridgeObjectRelease();
        v47 += 8;
        long long v46 = (void (**)(char *, uint64_t))((char *)v51 - 1);
      }
      while (v46);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v81 = v119;
    sub_21FA25280();
    uint64_t v129 = *(void *)(v81 + 8);
    double v130 = v39;
    double v131 = 0.0;
    double v132 = v42;
    double v133 = 0.0;
    sub_21FA24880();
    sub_21FA24800();
    sub_21F76DF78((uint64_t)v127, (void (*)(void, void, void, void, void))sub_21F7705AC);
    uint64_t v82 = *v41;
    (*v41)(v33, v30);
    sub_21F99AEE0(a3, (uint64_t)v128);
    if (qword_26AD45318 != -1) {
      swift_once();
    }
    sub_21FA24870();
    sub_21FA24860();
    sub_21F76DF78((uint64_t)v128, (void (*)(void, void, void, void, void))sub_21F7705AC);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v82)(v33, v30);
    uint64_t v83 = *(void *)(a3 + 16);
    uint64_t v84 = (uint64_t)v121;
    if (v83)
    {
      uint64_t v116 = v119 + *(int *)(type metadata accessor for DefaultChartLegend.ColorRampView() + 48);
      uint64_t v112 = (void (**)(char *, uint64_t))(v123 + 8);
      uint64_t v109 = (void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32);
      LODWORD(v115) = *MEMORY[0x263F18DD0];
      char v114 = (void (**)(char *, uint64_t))(v22 + 104);
      uint64_t v113 = (void (**)(char *, uint64_t))(v22 + 8);
      swift_bridgeObjectRetain();
      v102[0] = a3;
      int v85 = (void *)(a3 + 72);
      *(void *)&long long v86 = 136315138;
      long long v108 = v86;
      uint64_t v107 = MEMORY[0x263F8EE58] + 8;
      do
      {
        uint64_t v123 = v83;
        uint64_t v88 = *(v85 - 3);
        uint64_t v87 = *(v85 - 2);
        char v89 = *((unsigned char *)v85 - 8);
        uint64_t v90 = *v85;
        sub_21F7652C0(v88, v87, v89);
        uint64_t v122 = v90;
        swift_bridgeObjectRetain();
        sub_21FA24930();
        sub_21FA24760();
        sub_21F76C978(v116, v84, &qword_267EE9C80);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v91 = v117;
          uint64_t v92 = v120;
          (*v109)(v117, v84, v120);
        }
        else
        {
          os_log_type_t v93 = sub_21FA26250();
          long long v94 = sub_21FA250E0();
          os_log_type_t v95 = v93;
          if (os_log_type_enabled(v94, v93))
          {
            uint64_t v96 = swift_slowAlloc();
            uint64_t v97 = swift_slowAlloc();
            v126[0] = v97;
            *(_DWORD *)uint64_t v96 = v108;
            *(void *)(v96 + 4) = sub_21FA1B9BC(0x694474756F79614CLL, 0xEF6E6F6974636572, v126);
            _os_log_impl(&dword_21F741000, v94, v95, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v96, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x223C56A80](v97, -1, -1);
            MEMORY[0x223C56A80](v96, -1, -1);
          }

          int v98 = v110;
          sub_21FA24B20();
          uint64_t v91 = v117;
          swift_getAtKeyPath();
          swift_release();
          (*v112)(v98, v111);
          uint64_t v92 = v120;
        }
        size_t v99 = v124;
        ((void (*)(char *, void, uint64_t))*v114)(v124, v115, v92);
        char v100 = sub_21FA24960();
        uint64_t v101 = *v113;
        (*v113)(v99, v92);
        v101((char *)v91, v92);
        if (v100) {
          sub_21FA248E0();
        }
        sub_21F7652C0(v88, v87, v89);
        swift_bridgeObjectRetain();
        sub_21FA25990();
        sub_21FA247C0();
        sub_21F7656A8(v88, v87, v89);
        swift_bridgeObjectRelease();
        sub_21FA24940();
        sub_21F7656A8(v88, v87, v89);
        swift_bridgeObjectRelease();
        v85 += 8;
        uint64_t v83 = v123 - 1;
        uint64_t v84 = (uint64_t)v121;
      }
      while (v123 != 1);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_21F99C8E8@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10 = sub_21F76CA40(&qword_267EE9C10);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_21F76CA40(&qword_267EE9C18);
  uint64_t v25 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v16 = a4 & 1;
  sub_21F998204(a3, a4 & 1);
  char v17 = sub_21FA1B0DC(a3, a4 & 1);
  sub_21F99827C(a3, v16);
  LOBYTE(a3) = a2 & 1;
  sub_21F7642F0(a1, a2 & 1);
  uint64_t v18 = sub_21FA1AECC(a1, a2 & 1);
  sub_21F99EC2C(a1, a3, MEMORY[0x263F8EED8], MEMORY[0x263F8EEA0]);
  if (v18)
  {
    uint64_t v24 = a5;
    *uint64_t v12 = v17 & 1;
    *((void *)v12 + 1) = 0x4020000000000000;
    uint64_t v19 = *(void *)(v18 + 16);
    uint64_t v26 = 0;
    uint64_t v27 = v19;
    swift_getKeyPath();
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v18;
    *(unsigned char *)(v20 + 24) = v17 & 1;
    sub_21F76CA40(&qword_26AD47CA0);
    sub_21F76CA40(&qword_267EE9C20);
    sub_21F756350();
    sub_21F99CFD8();
    sub_21FA257E0();
    sub_21F99D124();
    sub_21FA25440();
    sub_21F76CA84((uint64_t)v12, &qword_267EE9C10);
    uint64_t v21 = v24;
    sub_21F76C9DC((uint64_t)v15, v24, &qword_267EE9C18);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v13);
  }
  else
  {
    uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56);
    return v23(a5, 1, 1, v13);
  }
}

void sub_21F99CC0C(unint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_21F76CA40(&qword_267EE9C68);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (uint64_t *)((char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for DefaultChartLegend.ColorRampView();
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_21F76CA40(&qword_267EE9C70);
  MEMORY[0x270FA5388](v14);
  char v16 = (uint64_t *)((char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v17 = *a1;
  if ((*a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v17 >= *(void *)(a2 + 16))
  {
LABEL_8:
    __break(1u);
    return;
  }
  uint64_t v18 = a2 + 32 * v17;
  uint64_t v20 = *(void *)(v18 + 32);
  uint64_t v21 = *(void *)(v18 + 40);
  uint64_t v19 = v18 + 32;
  int v22 = *(char *)(v19 + 24);
  if (v22 < 0)
  {
    int v23 = a3 & 1;
    uint64_t v24 = *(void *)(v19 + 16);
    int v27 = v22 & 0x7F;
    int v28 = v23;
    *uint64_t v10 = swift_getKeyPath();
    sub_21F76CA40(&qword_267EE9C78);
    swift_storeEnumTagMultiPayload();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v26 = *(int *)(v11 + 48);
    uint64_t v29 = a4;
    *(void *)&v13[v26] = KeyPath;
    sub_21F76CA40(&qword_267EE9C80);
    swift_storeEnumTagMultiPayload();
    *(void *)uint64_t v13 = v20;
    *((void *)v13 + 1) = v21;
    *((void *)v13 + 2) = v24;
    v13[24] = v27;
    v13[25] = v28;
    *((_OWORD *)v13 + 2) = xmmword_21FA318C0;
    *((_OWORD *)v13 + 3) = xmmword_21FA318D0;
    sub_21F998704(v20, v21, v24, v22);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_21FA252E0();
    sub_21F76C9DC((uint64_t)v10, (uint64_t)&v13[*(int *)(v11 + 44)], &qword_267EE9C68);
    sub_21F99D394((uint64_t)v13, (uint64_t)v16);
    swift_storeEnumTagMultiPayload();
    sub_21F99D084();
    sub_21F99EC40(&qword_267EE9C38, (void (*)(uint64_t))type metadata accessor for DefaultChartLegend.ColorRampView);
    sub_21FA24DC0();
    swift_release();
    swift_bridgeObjectRelease();
    sub_21F99D3F8((uint64_t)v13);
  }
  else
  {
    *char v16 = v20;
    v16[1] = v21;
    swift_storeEnumTagMultiPayload();
    sub_21F99D084();
    sub_21F99EC40(&qword_267EE9C38, (void (*)(uint64_t))type metadata accessor for DefaultChartLegend.ColorRampView);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_21FA24DC0();
  }
}

uint64_t sub_21F99CF74@<X0>(uint64_t a1@<X8>)
{
  return sub_21F99C8E8(*(void *)v1, *(unsigned char *)(v1 + 8), *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), a1);
}

uint64_t sub_21F99CF94()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 25, 7);
}

void sub_21F99CFCC(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_21F99CC0C(a1, *(void *)(v2 + 16), *(unsigned char *)(v2 + 24), a2);
}

unint64_t sub_21F99CFD8()
{
  unint64_t result = qword_267EE9C28;
  if (!qword_267EE9C28)
  {
    sub_21F779EA4(&qword_267EE9C20);
    sub_21F99D084();
    sub_21F99EC40(&qword_267EE9C38, (void (*)(uint64_t))type metadata accessor for DefaultChartLegend.ColorRampView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE9C28);
  }
  return result;
}

unint64_t sub_21F99D084()
{
  unint64_t result = qword_267EE9C30;
  if (!qword_267EE9C30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE9C30);
  }
  return result;
}

uint64_t type metadata accessor for DefaultChartLegend.ColorRampView()
{
  uint64_t result = qword_267EE9C90;
  if (!qword_267EE9C90) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_21F99D124()
{
  unint64_t result = qword_267EE9C40;
  if (!qword_267EE9C40)
  {
    sub_21F779EA4(&qword_267EE9C10);
    sub_21F779E60(&qword_267EE9C48, &qword_267EE9C50);
    sub_21F99E618(&qword_267EE9C58, &qword_267EE9C60, (void (*)(void))sub_21F99CFD8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE9C40);
  }
  return result;
}

uint64_t sub_21F99D1FC()
{
  return sub_21FA24B00();
}

uint64_t sub_21F99D220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21F99D284(a1, a2, a3, a4, MEMORY[0x263F07690], MEMORY[0x263F19590]);
}

uint64_t sub_21F99D260()
{
  return sub_21FA24AD0();
}

uint64_t sub_21F99D284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(char *))
{
  uint64_t v8 = a5(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v13 - v9, a1);
  return a6(v10);
}

uint64_t sub_21F99D354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21F99D284(a1, a2, a3, a4, MEMORY[0x263F18DD8], MEMORY[0x263F19340]);
}

uint64_t sub_21F99D394(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DefaultChartLegend.ColorRampView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21F99D3F8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DefaultChartLegend.ColorRampView();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21F99D454(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v8;
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    *(unsigned char *)(a1 + 25) = *((unsigned char *)a2 + 25);
    long long v9 = *((_OWORD *)a2 + 3);
    uint64_t v10 = a3[10];
    uint64_t v11 = a1 + v10;
    uint64_t v12 = (uint64_t)a2 + v10;
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v9;
    uint64_t v13 = sub_21FA252F0();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_retain();
    v14(v11, v12, v13);
    uint64_t v15 = a3[11];
    char v16 = (void *)(v7 + v15);
    unint64_t v17 = (uint64_t *)((char *)a2 + v15);
    sub_21F76CA40(&qword_267EE9C78);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v18 = sub_21FA24220();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    }
    else
    {
      *char v16 = *v17;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v19 = a3[12];
    uint64_t v20 = (void *)(v7 + v19);
    uint64_t v21 = (uint64_t *)((char *)a2 + v19);
    sub_21F76CA40(&qword_267EE9C80);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v22 = sub_21FA24970();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
    }
    else
    {
      *uint64_t v20 = *v21;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v7;
}

uint64_t sub_21F99D698(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v4 = a1 + a2[10];
  uint64_t v5 = sub_21FA252F0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + a2[11];
  sub_21F76CA40(&qword_267EE9C78);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_21FA24220();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = a1 + a2[12];
  sub_21F76CA40(&qword_267EE9C80);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = sub_21FA24970();
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
    return v10(v8, v9);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_21F99D810(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  long long v7 = *(_OWORD *)(a2 + 48);
  uint64_t v8 = a3[10];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  uint64_t v11 = sub_21FA252F0();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  v12(v9, v10, v11);
  uint64_t v13 = a3[11];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  sub_21F76CA40(&qword_267EE9C78);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = sub_21FA24220();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  else
  {
    *uint64_t v14 = *v15;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v17 = a3[12];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  sub_21F76CA40(&qword_267EE9C80);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = sub_21FA24970();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
  }
  else
  {
    *uint64_t v18 = *v19;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_21F99DA00(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v7 = a3[10];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_21FA252F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  if (a1 != a2)
  {
    uint64_t v11 = a3[11];
    uint64_t v12 = (void *)(a1 + v11);
    uint64_t v13 = (void *)(a2 + v11);
    sub_21F76CA84(a1 + v11, &qword_267EE9C78);
    sub_21F76CA40(&qword_267EE9C78);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = sub_21FA24220();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    }
    else
    {
      *uint64_t v12 = *v13;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = a3[12];
    uint64_t v16 = (void *)(a1 + v15);
    uint64_t v17 = (void *)(a2 + v15);
    sub_21F76CA84(a1 + v15, &qword_267EE9C80);
    sub_21F76CA40(&qword_267EE9C80);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v18 = sub_21FA24970();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    }
    else
    {
      *uint64_t v16 = *v17;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_21F99DC34(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  uint64_t v7 = a3[10];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_21FA252F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[11];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = sub_21F76CA40(&qword_267EE9C78);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = sub_21FA24220();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v12, v13, v15);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
  }
  uint64_t v16 = a3[12];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  uint64_t v19 = sub_21F76CA40(&qword_267EE9C80);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = sub_21FA24970();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v20 - 8) + 32))(v17, v18, v20);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  return a1;
}

uint64_t sub_21F99DE18(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  long long v6 = *(_OWORD *)(a2 + 48);
  uint64_t v7 = a3[10];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  uint64_t v10 = sub_21FA252F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  if (a1 != a2)
  {
    uint64_t v11 = a3[11];
    uint64_t v12 = (void *)(a1 + v11);
    uint64_t v13 = (const void *)(a2 + v11);
    sub_21F76CA84(a1 + v11, &qword_267EE9C78);
    uint64_t v14 = sub_21F76CA40(&qword_267EE9C78);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = sub_21FA24220();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v12, v13, v15);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
    }
    uint64_t v16 = a3[12];
    uint64_t v17 = (void *)(a1 + v16);
    uint64_t v18 = (const void *)(a2 + v16);
    sub_21F76CA84(a1 + v16, &qword_267EE9C80);
    uint64_t v19 = sub_21F76CA40(&qword_267EE9C80);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v20 = sub_21FA24970();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v20 - 8) + 32))(v17, v18, v20);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_21F99E044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F99E058);
}

uint64_t sub_21F99E058(uint64_t *a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = sub_21FA252F0();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[10];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
    return v13((char *)a1 + v11, a2, v9);
  }
  uint64_t v12 = sub_21F76CA40(&qword_267EE9C68);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[11];
    goto LABEL_9;
  }
  uint64_t v14 = sub_21F76CA40(&qword_267EE9C88);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = (char *)a1 + a3[12];

  return v15(v17, a2, v16);
}

uint64_t sub_21F99E1D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F99E1EC);
}

char *sub_21F99E1EC(char *result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)unint64_t result = (a2 - 1);
    return result;
  }
  uint64_t v8 = sub_21FA252F0();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[10];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return (char *)v13(&v5[v11], a2, a2, v9);
  }
  uint64_t v12 = sub_21F76CA40(&qword_267EE9C68);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[11];
    goto LABEL_7;
  }
  uint64_t v14 = sub_21F76CA40(&qword_267EE9C88);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = &v5[a4[12]];

  return (char *)v15(v17, a2, a2, v16);
}

void sub_21F99E36C()
{
  sub_21FA252F0();
  if (v0 <= 0x3F)
  {
    sub_21F99E4D0(319, &qword_267EE9CA0, MEMORY[0x263F07690]);
    if (v1 <= 0x3F)
    {
      sub_21F99E4D0(319, &qword_267EE9CA8, MEMORY[0x263F18DD8]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_21F99E4D0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_21FA244D0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

ValueMetadata *type metadata accessor for DefaultChartLegend.CategoriesView()
{
  return &type metadata for DefaultChartLegend.CategoriesView;
}

uint64_t getEnumTagSinglePayload for DefaultChartLegend.GridLayout(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[16]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DefaultChartLegend.GridLayout(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DefaultChartLegend.GridLayout()
{
  return &type metadata for DefaultChartLegend.GridLayout;
}

uint64_t sub_21F99E5C8()
{
  return sub_21F99E618(&qword_267EE9CB0, &qword_267EE9CB8, (void (*)(void))sub_21F99E684);
}

uint64_t sub_21F99E618(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_21F779EA4(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_21F99E684()
{
  unint64_t result = qword_267EE9CC0;
  if (!qword_267EE9CC0)
  {
    sub_21F779EA4(&qword_267EE9C18);
    sub_21F99D124();
    sub_21F99EC40(&qword_26AD47A28, MEMORY[0x263F1A470]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE9CC0);
  }
  return result;
}

unint64_t sub_21F99E734()
{
  unint64_t result = qword_267EE9CC8;
  if (!qword_267EE9CC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE9CC8);
  }
  return result;
}

uint64_t sub_21F99E788()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21F99E7A4()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_21F99E7C0()
{
  unint64_t result = qword_267EE9CE0;
  if (!qword_267EE9CE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE9CE0);
  }
  return result;
}

unint64_t sub_21F99E814()
{
  unint64_t result = qword_267EE9CE8;
  if (!qword_267EE9CE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE9CE8);
  }
  return result;
}

uint64_t sub_21F99E868(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_21F99E8A0()
{
  unint64_t v1 = (int *)type metadata accessor for DefaultChartLegend.ColorRampView();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v5 = v0 + v3 + v1[10];
  uint64_t v6 = sub_21FA252F0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v0 + v3 + v1[11];
  sub_21F76CA40(&qword_267EE9C78);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_21FA24220();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  uint64_t v9 = v0 + v3 + v1[12];
  sub_21F76CA40(&qword_267EE9C80);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_21FA24970();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_21F99EA9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DefaultChartLegend.ColorRampView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21F99EB00(void (***a1)(char *, uint64_t), double a2, double a3)
{
  uint64_t v7 = *(void *)(type metadata accessor for DefaultChartLegend.ColorRampView() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  double v10 = v3[2];
  double v11 = v3[3];
  double v12 = v3[4];
  double v13 = v3[5];
  uint64_t v14 = *(void *)((char *)v3 + ((v9 + 23) & 0xFFFFFFFFFFFFFFF8));
  double v15 = *(double *)((char *)v3 + v9);
  double v16 = *(double *)((char *)v3 + v9 + 8);

  return sub_21F99B880(a1, (uint64_t)v3 + v8, v14, a2, a3, v10, v11, v12, v13, v15, v16);
}

uint64_t sub_21F99EBCC(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F99EC08@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21F99AC2C(a1, *(void (***)(void *__return_ptr, uint64_t *))(v2 + 24), *(void *)(v2 + 32), a2);
}

uint64_t sub_21F99EC2C(uint64_t a1, char a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  if (a2) {
    return a4();
  }
  else {
    return a3();
  }
}

uint64_t sub_21F99EC40(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_21F99EC88(uint64_t a1, uint64_t a2, double (*a3)(void, void, double, double))
{
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a2 + 16);
  if (v6 >= v5) {
    int64_t v7 = *(void *)(a1 + 16);
  }
  else {
    int64_t v7 = *(void *)(a2 + 16);
  }
  uint64_t v46 = MEMORY[0x263F8EE78];
  sub_21F7A2DAC(0, v7, 0);
  int64_t v40 = v7;
  uint64_t v43 = a2;
  uint64_t v44 = a1;
  unint64_t v41 = v5;
  int64_t v42 = v6;
  if (v7)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v8 = (double *)(a2 + 40);
    unint64_t v9 = v6;
    double v10 = (void *)(a1 + 40);
    unint64_t v11 = v5;
    int64_t v12 = v7;
    while (v11)
    {
      if (!v9) {
        goto LABEL_26;
      }
      double v13 = a3(*(v10 - 1), *v10, *(v8 - 1), *v8);
      uint64_t v15 = v14;
      uint64_t v17 = v16;
      uint64_t v19 = v18;
      unint64_t v21 = *(void *)(v46 + 16);
      unint64_t v20 = *(void *)(v46 + 24);
      if (v21 >= v20 >> 1) {
        sub_21F7A2DAC((char *)(v20 > 1), v21 + 1, 1);
      }
      *(void *)(v46 + 16) = v21 + 1;
      uint64_t v22 = (double *)(v46 + 32 * v21);
      _OWORD v22[4] = v13;
      *((void *)v22 + 5) = v15;
      --v9;
      *((void *)v22 + 6) = v17;
      *((void *)v22 + 7) = v19;
      --v11;
      v8 += 2;
      v10 += 2;
      if (!--v12) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_13:
    if (v41 <= v42)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    if (v40 <= v42) {
      int64_t v23 = v42;
    }
    else {
      int64_t v23 = v40;
    }
    int64_t v24 = v23 - v40;
    unint64_t v25 = v41 - v40;
    int64_t v26 = v42 - v40;
    uint64_t v27 = 16 * v40 + 40;
    int v28 = (void *)(v44 + v27);
    uint64_t v29 = (double *)(v43 + v27);
    while (v25)
    {
      if (!v26) {
        goto LABEL_24;
      }
      if (!v24) {
        goto LABEL_28;
      }
      double v30 = a3(*(v28 - 1), *v28, *(v29 - 1), *v29);
      uint64_t v32 = v31;
      uint64_t v34 = v33;
      uint64_t v36 = v35;
      unint64_t v38 = *(void *)(v46 + 16);
      unint64_t v37 = *(void *)(v46 + 24);
      if (v38 >= v37 >> 1) {
        sub_21F7A2DAC((char *)(v37 > 1), v38 + 1, 1);
      }
      *(void *)(v46 + 16) = v38 + 1;
      double v39 = (double *)(v46 + 32 * v38);
      v39[4] = v30;
      *((void *)v39 + 5) = v32;
      --v24;
      *((void *)v39 + 6) = v34;
      *((void *)v39 + 7) = v36;
      --v26;
      v28 += 2;
      v29 += 2;
      if (!--v25) {
        goto LABEL_24;
      }
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
}

char *sub_21F99EEE4(uint64_t a1, double a2)
{
  uint64_t v3 = (char *)a1;
  uint64_t v4 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v4)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v3 = sub_21F935480((uint64_t)v3);
    }
    uint64_t v5 = 0;
    double v6 = 0.0;
    do
    {
      int64_t v7 = &v3[8 * v5];
      double v8 = *((double *)v7 + 4);
      *((double *)v7 + 4) = v6;
      double v6 = v6 + v8 + a2;
      ++v5;
    }
    while (v4 != v5);
  }
  return v3;
}

unint64_t sub_21F99EF68(unint64_t a1, unint64_t a2)
{
  return sub_21F9992C0(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t destroy for DefaultChartLegend.ColorRampView.Tick(uint64_t a1)
{
  sub_21F7656A8(*(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DefaultChartLegend.ColorRampView.Tick(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  char v6 = *(unsigned char *)(a2 + 32);
  sub_21F7652C0(v4, v5, v6);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DefaultChartLegend.ColorRampView.Tick(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  char v6 = *(unsigned char *)(a2 + 32);
  sub_21F7652C0(v4, v5, v6);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  char v9 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  sub_21F7656A8(v7, v8, v9);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for DefaultChartLegend.ColorRampView.Tick(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  char v7 = *(unsigned char *)(a1 + 32);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 32) = v4;
  sub_21F7656A8(v5, v6, v7);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for DefaultChartLegend.ColorRampView.Tick(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DefaultChartLegend.ColorRampView.Tick(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DefaultChartLegend.ColorRampView.Tick()
{
  return &type metadata for DefaultChartLegend.ColorRampView.Tick;
}

uint64_t _s6Charts22LegendRenderingContextV8CategoryVwxx_0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  sub_21F7656A8(*(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
  swift_bridgeObjectRelease();
  swift_release();
  if (*(void *)(a1 + 80)) {
    _s6Charts15AnyChartContentVwxx_0(a1 + 56);
  }

  return swift_bridgeObjectRelease();
}

uint64_t _s6Charts22LegendRenderingContextV8CategoryVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  sub_21F7652C0(v5, v6, v7);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  uint64_t v9 = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_retain();
  if (v9)
  {
    uint64_t v10 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = v9;
    *(void *)(a1 + 88) = v10;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8))(a1 + 56, a2 + 56, v9);
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v11;
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
  }
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v12 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v12;
  uint64_t v13 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v13;
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s6Charts22LegendRenderingContextV8CategoryVwca_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  char v6 = *(unsigned char *)(a2 + 32);
  sub_21F7652C0(v4, v5, v6);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  char v9 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  sub_21F7656A8(v7, v8, v9);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  uint64_t v10 = (_OWORD *)(a1 + 56);
  long long v11 = (_OWORD *)(a2 + 56);
  uint64_t v12 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80))
  {
    if (v12)
    {
      sub_21F7ABEA8((uint64_t *)(a1 + 56), (uint64_t *)(a2 + 56));
    }
    else
    {
      sub_21F8DE214(a1 + 56);
      uint64_t v13 = *(void *)(a2 + 88);
      long long v14 = *(_OWORD *)(a2 + 72);
      *uint64_t v10 = *v11;
      *(_OWORD *)(a1 + 72) = v14;
      *(void *)(a1 + 88) = v13;
    }
  }
  else if (v12)
  {
    *(void *)(a1 + 80) = v12;
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 56, a2 + 56);
  }
  else
  {
    long long v15 = *v11;
    long long v16 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *uint64_t v10 = v15;
    *(_OWORD *)(a1 + 72) = v16;
  }
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  uint64_t v17 = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 136) = v17;
  return a1;
}

uint64_t _s6Charts22LegendRenderingContextV8CategoryVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  char v5 = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = v5;
  sub_21F7656A8(v6, v7, v8);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  if (*(void *)(a1 + 80))
  {
    if (*(void *)(a2 + 80)) {
      _s6Charts15AnyChartContentVwxx_0(a1 + 56);
    }
    else {
      sub_21F8DE214(a1 + 56);
    }
  }
  long long v9 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v9;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)&long long v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v9;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  return a1;
}

uint64_t _s6Charts22LegendRenderingContextV8CategoryVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 145)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_21F99F610(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 144) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 145) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 145) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DefaultChartLegend.CategoryView()
{
  return &type metadata for DefaultChartLegend.CategoryView;
}

uint64_t sub_21F99F688()
{
  return sub_21F99E618(&qword_267EE9D28, &qword_267EE9D30, (void (*)(void))sub_21F99E7C0);
}

unint64_t sub_21F99F6DC()
{
  unint64_t result = qword_267EE9D38;
  if (!qword_267EE9D38)
  {
    sub_21F779EA4(&qword_267EE9D00);
    sub_21F99F758();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE9D38);
  }
  return result;
}

unint64_t sub_21F99F758()
{
  unint64_t result = qword_267EE9D40;
  if (!qword_267EE9D40)
  {
    sub_21F779EA4(&qword_267EE9CF8);
    sub_21F779E60(&qword_267EE9D48, &qword_267EE9CF0);
    sub_21F99F7F8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE9D40);
  }
  return result;
}

unint64_t sub_21F99F7F8()
{
  unint64_t result = qword_26AD479C8;
  if (!qword_26AD479C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD479C8);
  }
  return result;
}

uint64_t sub_21F99F84C()
{
  return MEMORY[0x263F8D558];
}

uint64_t sub_21F99F858()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21F99F874(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_21F99F8AC(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F99F8DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_21F99F920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t destroy for DefaultChartLegend.LineShape()
{
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for DefaultChartLegend.LineShape(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v3 = a2[3];
  a1[2] = a2[2];
  a1[3] = v3;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DefaultChartLegend.LineShape(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

void *assignWithTake for DefaultChartLegend.LineShape(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

ValueMetadata *type metadata accessor for DefaultChartLegend.LineShape()
{
  return &type metadata for DefaultChartLegend.LineShape;
}

uint64_t sub_21F99FA84()
{
  return sub_21F779E60(&qword_267EE9D70, &qword_267EE9D78);
}

uint64_t sub_21F99FAC0()
{
  return sub_21F779E60(&qword_267EE9D80, &qword_267EE9D88);
}

unint64_t sub_21F99FB00()
{
  unint64_t result = qword_267EE9D90;
  if (!qword_267EE9D90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE9D90);
  }
  return result;
}

unint64_t sub_21F99FB58()
{
  unint64_t result = qword_267EE9D98;
  if (!qword_267EE9D98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE9D98);
  }
  return result;
}

unint64_t sub_21F99FBAC()
{
  unint64_t result = qword_267EE9DA0;
  if (!qword_267EE9DA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE9DA0);
  }
  return result;
}

uint64_t sub_21F99FC08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v23[1] = a3;
  uint64_t v5 = sub_21F76CA40(qword_267EE7868);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v23 - v9;
  uint64_t v25 = sub_21F76CA40(&qword_267EE9DA8);
  uint64_t v11 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for _ChartContentInputs(0);
  MEMORY[0x270FA5388](v14 - 8);
  long long v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_21FA24FE0();
  uint64_t v17 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v19 = (char *)v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA24FF0();
  sub_21F9A035C(a2, (uint64_t)v16);
  uint64_t result = AGTypeGetKind();
  if ((result - 6) < 0xFFFFFFFC)
  {
    __break(1u);
  }
  else
  {
    sub_21F76CA40(&qword_267EE9DB0);
    sub_21F9A065C();
    v23[0] = a1;
    sub_21FA24C70();
    sub_21F99FC08(v13, v16);
    sub_21F7FA9C4((uint64_t)v10, (uint64_t)v7);
    uint64_t v21 = sub_21FA25050();
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v7, 1, v21) == 1)
    {
      sub_21F7FAA2C((uint64_t)v10);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v25);
      sub_21F9A0540((uint64_t)v16);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v24);
      return sub_21F7FAA2C((uint64_t)v7);
    }
    else
    {
      sub_21FA25040();
      sub_21F7FAA2C((uint64_t)v10);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v25);
      sub_21F9A0540((uint64_t)v16);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v24);
      return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v7, v21);
    }
  }
  return result;
}

uint64_t static ChartContent._makeChartContent(content:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v26 = a3;
  uint64_t v4 = sub_21F76CA40(qword_267EE7868);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v24 - v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = sub_21FA24530();
  uint64_t v27 = *(void *)(v11 - 8);
  uint64_t v28 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v24 - v12;
  uint64_t v14 = type metadata accessor for _ChartContentInputs(0);
  MEMORY[0x270FA5388](v14 - 8);
  long long v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_21FA24FE0();
  uint64_t v17 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v19 = (char *)&v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA24FF0();
  sub_21F9A035C(v24, (uint64_t)v16);
  uint64_t v24 = a1;
  sub_21F9A0488();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v13, v16, AssociatedTypeWitness, AssociatedConformanceWitness);
  sub_21F7FA9C4((uint64_t)v9, (uint64_t)v6);
  uint64_t v21 = sub_21FA25050();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v6, 1, v21) == 1)
  {
    sub_21F7FAA2C((uint64_t)v9);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v28);
    sub_21F9A0540((uint64_t)v16);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v25);
    return sub_21F7FAA2C((uint64_t)v6);
  }
  else
  {
    sub_21FA25040();
    sub_21F7FAA2C((uint64_t)v9);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v28);
    sub_21F9A0540((uint64_t)v16);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v25);
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v6, v21);
  }
}

uint64_t sub_21F9A035C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _ChartContentInputs(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static ChartContent._chartContentCount(inputs:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(a1, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t sub_21F9A046C()
{
  return sub_21F9A046C();
}

uint64_t sub_21F9A0488()
{
  uint64_t result = AGTypeGetKind();
  if ((result - 6) < 0xFFFFFFFC)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for ChartContentBodyAccessor();
    swift_getWitnessTable();
    return sub_21FA24C70();
  }
  return result;
}

uint64_t sub_21F9A0540(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for _ChartContentInputs(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21F9A059C(uint64_t result, char a2)
{
  if (a2)
  {
    MEMORY[0x270FA5388](result);
    type metadata accessor for ChartContentBodyAccessor();
    swift_getWitnessTable();
    return sub_21FA24C60();
  }
  return result;
}

uint64_t sub_21F9A0650(uint64_t result, char a2)
{
  return sub_21F9A059C(result, a2);
}

unint64_t sub_21F9A065C()
{
  unint64_t result = qword_267EE9DB8[0];
  if (!qword_267EE9DB8[0])
  {
    sub_21F779EA4(&qword_267EE9DB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_267EE9DB8);
  }
  return result;
}

uint64_t type metadata accessor for ChartContentBodyAccessor()
{
  return sub_21F764F08();
}

uint64_t sub_21F9A06D0()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 24) + 24))(*(void *)(v0 + 16));
}

void *RectangleMark.init<A, B>(x:y:width:height:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11)
{
  sub_21F9D5E34(a1, a3, a4, a7, a10, (uint64_t)v21);
  sub_21F764AF8((uint64_t)v21, (uint64_t)v20);
  sub_21F9D5E34(a2, a5, a6, a8, a11, (uint64_t)v22);
  sub_21F764AF8((uint64_t)v22, (uint64_t)v23);
  uint64_t v17 = type metadata accessor for PlottableValue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a2, v17);
  uint64_t v18 = type metadata accessor for PlottableValue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(a1, v18);
  sub_21F764AF8((uint64_t)v20, (uint64_t)v24);
  sub_21F764AF8((uint64_t)v24, (uint64_t)__src);
  sub_21F764AF8((uint64_t)v23, (uint64_t)&__src[144]);
  return memcpy(a9, __src, 0x120uLL);
}

void *RectangleMark.init<A>(x:yStart:yEnd:width:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  sub_21F9D5E34(a1, a6, a7, a8, a10, (uint64_t)v18);
  sub_21F764AF8((uint64_t)v18, (uint64_t)v19);
  uint64_t v16 = type metadata accessor for PlottableValue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a1, v16);
  uint64_t v20 = a2;
  char v21 = a3 & 1;
  uint64_t v22 = a4;
  char v23 = a5 & 1;
  sub_21F7BC014((uint64_t)&v20);
  sub_21F764AF8((uint64_t)v19, (uint64_t)__src);
  sub_21F764AF8((uint64_t)&v20, (uint64_t)&__src[144]);
  return memcpy(a9, __src, 0x120uLL);
}

void *RectangleMark.init<A>(xStart:xEnd:y:height:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  uint64_t v19 = a1;
  char v20 = a2 & 1;
  uint64_t v21 = a3;
  char v22 = a4 & 1;
  sub_21F7BC014((uint64_t)&v19);
  sub_21F764AF8((uint64_t)&v19, (uint64_t)v17);
  sub_21F9D5E34(a5, a6, a7, a8, a10, (uint64_t)v18);
  sub_21F764AF8((uint64_t)v18, (uint64_t)v23);
  uint64_t v15 = type metadata accessor for PlottableValue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a5, v15);
  sub_21F764AF8((uint64_t)v17, (uint64_t)v24);
  sub_21F764AF8((uint64_t)v24, (uint64_t)__src);
  sub_21F764AF8((uint64_t)v23, (uint64_t)&__src[144]);
  return memcpy(a9, __src, 0x120uLL);
}

void *RectangleMark.init<A, B>(xStart:xEnd:y:height:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  sub_21F9D598C(a1, a2, a6, a8, (uint64_t)v22);
  sub_21F764AF8((uint64_t)v22, (uint64_t)v21);
  sub_21F9D5E34(a3, a4, a5, a7, a10, (uint64_t)v23);
  sub_21F764AF8((uint64_t)v23, (uint64_t)v24);
  uint64_t v17 = type metadata accessor for PlottableValue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a3, v17);
  uint64_t v18 = type metadata accessor for PlottableValue();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8);
  v19(a2, v18);
  v19(a1, v18);
  sub_21F764AF8((uint64_t)v21, (uint64_t)v25);
  sub_21F764AF8((uint64_t)v25, (uint64_t)__src);
  sub_21F764AF8((uint64_t)v24, (uint64_t)&__src[144]);
  return memcpy(a9, __src, 0x120uLL);
}

void *RectangleMark.init<A>(xStart:xEnd:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  sub_21F9D598C(a1, a2, a7, a8, (uint64_t)v19);
  sub_21F764AF8((uint64_t)v19, (uint64_t)v20);
  uint64_t v16 = type metadata accessor for PlottableValue();
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8);
  v17(a2, v16);
  v17(a1, v16);
  uint64_t v21 = a3;
  char v22 = a4 & 1;
  uint64_t v23 = a5;
  char v24 = a6 & 1;
  sub_21F7BC014((uint64_t)&v21);
  sub_21F764AF8((uint64_t)v20, (uint64_t)__src);
  sub_21F764AF8((uint64_t)&v21, (uint64_t)&__src[144]);
  return memcpy(a9, __src, 0x120uLL);
}

void *RectangleMark.init<A, B>(x:yStart:yEnd:width:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  sub_21F9D5E34(a1, a4, a5, a6, a8, (uint64_t)v20);
  sub_21F764AF8((uint64_t)v20, (uint64_t)v19);
  sub_21F9D598C(a2, a3, a7, a10, (uint64_t)v21);
  sub_21F764AF8((uint64_t)v21, (uint64_t)v22);
  uint64_t v15 = type metadata accessor for PlottableValue();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8);
  v16(a3, v15);
  v16(a2, v15);
  uint64_t v17 = type metadata accessor for PlottableValue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a1, v17);
  sub_21F764AF8((uint64_t)v19, (uint64_t)v23);
  sub_21F764AF8((uint64_t)v23, (uint64_t)__src);
  sub_21F764AF8((uint64_t)v22, (uint64_t)&__src[144]);
  return memcpy(a9, __src, 0x120uLL);
}

void *RectangleMark.init<A>(xStart:xEnd:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v19 = a1;
  char v20 = a2 & 1;
  uint64_t v21 = a3;
  char v22 = a4 & 1;
  sub_21F7BC014((uint64_t)&v19);
  sub_21F764AF8((uint64_t)&v19, (uint64_t)v17);
  sub_21F9D598C(a5, a6, a7, a8, (uint64_t)v18);
  sub_21F764AF8((uint64_t)v18, (uint64_t)v23);
  uint64_t v14 = type metadata accessor for PlottableValue();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8);
  v15(a6, v14);
  v15(a5, v14);
  sub_21F764AF8((uint64_t)v17, (uint64_t)v24);
  sub_21F764AF8((uint64_t)v24, (uint64_t)__src);
  sub_21F764AF8((uint64_t)v23, (uint64_t)&__src[144]);
  return memcpy(a9, __src, 0x120uLL);
}

void *RectangleMark.init<A, B>(xStart:xEnd:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  sub_21F9D598C(a1, a2, a5, a7, (uint64_t)v22);
  sub_21F764AF8((uint64_t)v22, (uint64_t)v21);
  sub_21F9D598C(a3, a4, a6, a8, (uint64_t)v23);
  sub_21F764AF8((uint64_t)v23, (uint64_t)v24);
  uint64_t v16 = type metadata accessor for PlottableValue();
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8);
  v17(a4, v16);
  v17(a3, v16);
  uint64_t v18 = type metadata accessor for PlottableValue();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8);
  v19(a2, v18);
  v19(a1, v18);
  sub_21F764AF8((uint64_t)v21, (uint64_t)v25);
  sub_21F764AF8((uint64_t)v25, (uint64_t)__src);
  sub_21F764AF8((uint64_t)v24, (uint64_t)&__src[144]);
  return memcpy(a9, __src, 0x120uLL);
}

void *RectangleMark.init(xStart:xEnd:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, void *a9@<X8>)
{
  uint64_t v15 = a1;
  char v16 = a2 & 1;
  uint64_t v17 = a3;
  char v18 = a4 & 1;
  sub_21F7BC014((uint64_t)&v15);
  uint64_t v19 = a5;
  char v20 = a6 & 1;
  uint64_t v21 = a7;
  char v22 = a8 & 1;
  sub_21F7BC014((uint64_t)&v19);
  sub_21F764AF8((uint64_t)&v15, (uint64_t)__src);
  sub_21F764AF8((uint64_t)&v19, (uint64_t)&__src[144]);
  return memcpy(a9, __src, 0x120uLL);
}

uint64_t static RectangleMark._renderChartContent(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  long long v45 = a3;
  uint64_t v44 = type metadata accessor for ChartContentRenderContext.Environment(0);
  MEMORY[0x270FA5388](v44);
  uint64_t v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_21F76CA40(&qword_26AD47C20);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_21FA24C90();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (int *)type metadata accessor for SgRectangle(0);
  MEMORY[0x270FA5388](v14);
  char v16 = (double *)((char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_21F764AF8(a1, (uint64_t)v50);
  sub_21F764AF8(a1 + 144, (uint64_t)v49);
  LOBYTE(a1) = *(unsigned char *)a2;
  uint64_t v17 = *(void *)(a2 + 8);
  swift_retain();
  if (a1)
  {
    unint64_t v18 = sub_21F9A18CC(v50, v49, v17);
    uint64_t result = swift_release();
  }
  else
  {
    sub_21F75FD64((uint64_t)v50, 0, v46);
    double v20 = v46[0];
    double v21 = v46[1];
    sub_21F75FD64((uint64_t)v49, 1, &v47);
    double v22 = v47;
    double v23 = v48;
    if (v21 >= v20) {
      double v24 = v20;
    }
    else {
      double v24 = v21;
    }
    if (v48 >= v47) {
      double v25 = v47;
    }
    else {
      double v25 = v48;
    }
    double v42 = v25;
    double v43 = v24;
    uint64_t v26 = v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
    swift_beginAccess();
    if (*(unsigned char *)(v26 + 208))
    {
      if ((*(unsigned char *)(v26 + 168) & 1) != 0 && qword_26AD45710 != -1) {
        swift_once();
      }
      sub_21FA24DE0();
      uint64_t v29 = v31;
      uint64_t v30 = v32;
      uint64_t v27 = v33;
      uint64_t v28 = v34;
    }
    else
    {
      uint64_t v27 = *(void *)(v26 + 192);
      uint64_t v28 = *(void *)(v26 + 200);
      uint64_t v29 = *(void *)(v26 + 176);
      uint64_t v30 = *(void *)(v26 + 184);
    }
    double v35 = vabdd_f64(v21, v20);
    double v36 = vabdd_f64(v23, v22);
    sub_21F762518(v26 + *(int *)(v44 + 44), (uint64_t)v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      if (qword_26AD46660 != -1) {
        swift_once();
      }
      uint64_t v37 = sub_21F762480(v10, (uint64_t)qword_26AD52228);
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v37, v10);
      sub_21F7624B8((uint64_t)v9);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    }
    sub_21F7BB184(v26, (uint64_t)v6);
    sub_21F77188C((uint64_t)v6, (uint64_t)v16 + v14[11]);
    uint64_t v38 = *(void *)(v26 + *(int *)(v44 + 64));
    swift_release();
    *char v16 = 0.0;
    double v39 = v42;
    v16[1] = v43;
    void v16[2] = v39;
    v16[3] = v35;
    v16[4] = v36;
    *((void *)v16 + 5) = v29;
    *((void *)v16 + 6) = v30;
    *((void *)v16 + 7) = v27;
    *((void *)v16 + 8) = v28;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))((char *)v16 + v14[10], v13, v10);
    *(void *)((char *)v16 + v14[12]) = v38;
    uint64_t v40 = swift_allocBox();
    uint64_t result = sub_21F9A20F0((uint64_t)v16, v41);
    unint64_t v18 = v40 | 0x4000000000000000;
  }
  *long long v45 = v18;
  return result;
}

uint64_t _s6Charts13RectangleMarkV19_layoutChartContentyyAC_AA01_eF12LayoutInputsVtFZ_0(uint64_t a1, uint64_t *a2)
{
  sub_21F764AF8(a1, (uint64_t)v15);
  sub_21F764AF8(a1 + 144, (uint64_t)v14);
  uint64_t v4 = *a2;
  swift_beginAccess();
  if (*(unsigned char *)(v4 + 881) == 2)
  {
    sub_21F764AF8((uint64_t)v15, (uint64_t)v16);
    switch(sub_21F7607A0((uint64_t)v16))
    {
      case 1u:
        uint64_t v7 = sub_21F7607C4((uint64_t)v16);
        sub_21F76C9DC(v7, (uint64_t)v17, &qword_26AD455C8);
        goto LABEL_13;
      case 3u:
        sub_21F7607C4((uint64_t)v16);
        goto LABEL_10;
      case 4u:
      case 5u:
        sub_21F7607C4((uint64_t)v16);
        goto LABEL_13;
      default:
        uint64_t v5 = sub_21F7607C4((uint64_t)v16);
        if (*(char *)(v5 + 48) < 0) {
          goto LABEL_10;
        }
        if (*(unsigned char *)(v5 + 48))
        {
          if (*(unsigned char *)(v5 + 48) != 1)
          {
LABEL_10:
            *(unsigned char *)(v4 + 881) = 0;
            break;
          }
          char v6 = 1;
        }
        else
        {
          char v6 = 0;
        }
        sub_21F770E38(*(void *)(v5 + 32), *(void *)(v5 + 40), v6);
LABEL_13:
        sub_21F764AF8((uint64_t)v14, (uint64_t)v18);
        switch(sub_21F7607A0((uint64_t)v18))
        {
          case 1u:
            uint64_t v12 = sub_21F7607C4((uint64_t)v18);
            sub_21F76C9DC(v12, (uint64_t)v19, &qword_26AD455C8);
            goto LABEL_22;
          case 3u:
            sub_21F7607C4((uint64_t)v18);
            goto LABEL_21;
          case 4u:
          case 5u:
            sub_21F7607C4((uint64_t)v18);
            goto LABEL_22;
          default:
            uint64_t v8 = sub_21F7607C4((uint64_t)v18);
            int v9 = *(char *)(v8 + 48);
            if (v9 < 0) {
              goto LABEL_21;
            }
            uint64_t v10 = *(void *)(v8 + 40);
            uint64_t v11 = *(void *)(v8 + 32);
            if ((_BYTE)v9)
            {
              if (v9 == 1) {
                sub_21F770E38(v11, v10, 1);
              }
              else {
LABEL_21:
              }
                *(unsigned char *)(v4 + 881) = 1;
            }
            else
            {
              sub_21F770E38(v11, v10, 0);
            }
            break;
        }
        break;
    }
  }
LABEL_22:
  sub_21F760AD8((uint64_t)v15, 0);
  return sub_21F760AD8((uint64_t)v14, 1);
}

unint64_t sub_21F9A18CC(void *a1, void *a2, uint64_t a3)
{
  sub_21F764AF8((uint64_t)a1, (uint64_t)v100);
  char v6 = v111;
  sub_21F764AF8((uint64_t)v100, (uint64_t)v111);
  sub_21F764AF8((uint64_t)a2, (uint64_t)v99);
  sub_21F764AF8((uint64_t)v99, (uint64_t)v112);
  sub_21F75FD64((uint64_t)a1, 0, v94);
  double v7 = v94[0];
  double v8 = v94[1];
  uint64_t v70 = a3;
  sub_21F75FD64((uint64_t)a2, 1, v95);
  double v9 = v95[0];
  double v10 = v95[1];
  int v11 = sub_21F9E7A34((uint64_t)a1, (uint64_t)a2) & 1;
  if (v11) {
    uint64_t v12 = v112;
  }
  else {
    uint64_t v12 = v111;
  }
  if (!v11) {
    char v6 = v112;
  }
  char v66 = v11;
  int v69 = v11 ^ 1;
  sub_21F764AF8((uint64_t)v12, (uint64_t)v92);
  sub_21F764AF8((uint64_t)v6, (uint64_t)v93);
  sub_21F764AF8((uint64_t)v92, (uint64_t)v102);
  sub_21F764AF8((uint64_t)v93, (uint64_t)v101);
  sub_21F764AF8((uint64_t)v93, (uint64_t)v91);
  int v13 = sub_21F7607A0((uint64_t)v91);
  if (v13 == 2)
  {
    uint64_t v23 = sub_21F7607C4((uint64_t)v91);
    uint64_t v25 = *(void *)(v23 + 8);
    char v26 = *(unsigned char *)(v23 + 16);
    uint64_t v28 = *(void *)(v23 + 24);
    uint64_t v27 = *(void *)(v23 + 32);
    uint64_t v20 = *(void *)(v23 + 40);
    uint64_t v103 = *(void *)v23;
    uint64_t v24 = v103;
    uint64_t v104 = v25;
    char v105 = v26;
    uint64_t v106 = v28;
    uint64_t v107 = v27;
    uint64_t v108 = v20;
    char v109 = *(unsigned char *)(v23 + 48);
    char v21 = v109;
    long long v110 = *(_OWORD *)(v23 + 56);
    sub_21F7652C0(v103, v25, v26);
    swift_bridgeObjectRetain();
    sub_21F770E44(v27, v20, v21);
    swift_retain();
    sub_21F7BB3F8(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F765124);
    sub_21F7BB3F8(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F765124);
    sub_21F7652C0(v24, v25, v26);
    swift_bridgeObjectRetain();
    sub_21F770E44(v27, v20, v21);
    sub_21F7CC0E4(v69, (_OWORD *)v70, (char *)v70, v69, &v103, (uint64_t)v90);
    sub_21F7656A8(v24, v25, v26);
    swift_bridgeObjectRelease();
    uint64_t v22 = v27;
    goto LABEL_10;
  }
  if (!v13)
  {
    uint64_t v14 = sub_21F7607C4((uint64_t)v91);
    uint64_t v16 = *(void *)(v14 + 8);
    char v17 = *(unsigned char *)(v14 + 16);
    uint64_t v19 = *(void *)(v14 + 24);
    uint64_t v18 = *(void *)(v14 + 32);
    uint64_t v20 = *(void *)(v14 + 40);
    uint64_t v103 = *(void *)v14;
    uint64_t v15 = v103;
    uint64_t v104 = v16;
    char v105 = v17;
    uint64_t v106 = v19;
    uint64_t v107 = v18;
    uint64_t v108 = v20;
    char v109 = *(unsigned char *)(v14 + 48);
    char v21 = v109;
    long long v110 = *(_OWORD *)(v14 + 56);
    sub_21F7652C0(v103, v16, v17);
    swift_bridgeObjectRetain();
    sub_21F770E44(v18, v20, v21);
    sub_21F7652C0(v15, v16, v17);
    swift_bridgeObjectRetain();
    sub_21F770E44(v18, v20, v21);
    swift_retain();
    sub_21F7BB3F8(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F765124);
    sub_21F7BB3F8(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F765124);
    sub_21F7CC0E4(v69, (_OWORD *)v70, (char *)v70, v69, &v103, (uint64_t)v90);
    sub_21F7656A8(v15, v16, v17);
    swift_bridgeObjectRelease();
    uint64_t v22 = v18;
LABEL_10:
    sub_21F770E38(v22, v20, v21);
    sub_21F76C9DC((uint64_t)v90, (uint64_t)__src, &qword_26AD46A38);
    goto LABEL_12;
  }
  sub_21F7BB330((uint64_t)__src);
  sub_21F7BB3F8(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F765124);
  sub_21F7BB3F8(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F765124);
LABEL_12:
  sub_21F76C9DC((uint64_t)__src, (uint64_t)v90, &qword_26AD46A38);
  sub_21F76CA40(&qword_26AD47CE0);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_21FA28D80;
  sub_21F76C9DC((uint64_t)v90, (uint64_t)v89, &qword_26AD46A38);
  if (sub_21F7BB368((uint64_t)v89) == 1)
  {
    sub_21F7BB3F8(v93, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F765124);
    sub_21F8DDED0(v69, (uint64_t)v101, (uint64_t)v96);
    sub_21F76C9DC((uint64_t)v96, (uint64_t)__src, &qword_26AD47B78);
  }
  else
  {
    sub_21F7BB380((uint64_t)__src);
  }
  sub_21F76C9DC((uint64_t)__src, (uint64_t)v88, &qword_26AD47B78);
  sub_21F76C9DC((uint64_t)v88, v29 + 32, &qword_26AD47B78);
  sub_21F7BB3F8(v92, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F765124);
  sub_21F8DDED0(v66, (uint64_t)v102, (uint64_t)v97);
  sub_21F76C9DC((uint64_t)v97, v29 + 184, &qword_26AD47B78);
  uint64_t v30 = v70 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  uint64_t v31 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v32 = (uint64_t *)(v30 + v31[18]);
  uint64_t v33 = *v32;
  uint64_t v34 = v32[1];
  uint64_t v35 = v32[2];
  uint64_t v36 = v32[3];
  uint64_t v38 = v32[4];
  uint64_t v37 = v32[5];
  uint64_t v40 = v32[6];
  uint64_t v39 = v32[7];
  uint64_t v41 = v32[8];
  char v67 = v40;
  if (v36)
  {
    v76[0] = 4;
    uint64_t v77 = v33;
    uint64_t v78 = v34;
    char v79 = v35 & 1;
    uint64_t v80 = v36;
    uint64_t v81 = v38;
    uint64_t v82 = v37;
    char v83 = v40;
    uint64_t v84 = v39;
    uint64_t v85 = v41;
    char v86 = 3;
    uint64_t v42 = v37;
    sub_21F7BB878((uint64_t)v76);
    sub_21F7BB81C((uint64_t)v76, (uint64_t)__src);
    nullsub_1(__src, v43);
  }
  else
  {
    uint64_t v42 = v32[5];
    sub_21F7BB380((uint64_t)__src);
  }
  sub_21F76C9DC((uint64_t)__src, (uint64_t)v87, &qword_26AD47B78);
  sub_21F76C9DC((uint64_t)v87, v29 + 336, &qword_26AD47B78);
  sub_21F761E74(v33, v34, v35, v36, v38, v42, v67);
  uint64_t v44 = sub_21F8C2950(v29);
  uint64_t v68 = v45;
  swift_setDeallocating();
  sub_21F76CA40(&qword_26AD47B78);
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v46 = (uint64_t *)(v30 + v31[26]);
  uint64_t v47 = v46[1];
  uint64_t v64 = *(void *)(*(void *)(v70 + 16) + 24);
  uint64_t v65 = *v46;
  uint64_t v48 = v31[25];
  long long v49 = (uint64_t *)(v30 + v31[24]);
  uint64_t v50 = *v49;
  uint64_t v51 = v49[1];
  uint64_t v53 = v49[2];
  uint64_t v52 = v49[3];
  uint64_t v54 = v30 + v48;
  uint64_t v55 = *(void *)(v30 + v48);
  uint64_t v56 = *(void *)(v30 + v48 + 8);
  uint64_t v58 = *(void *)(v54 + 16);
  uint64_t v57 = *(void *)(v54 + 24);
  uint64_t v71 = v47;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_21F7BB3B4(v50, v51, v53, v52);
  sub_21F7BB3B4(v55, v56, v58, v57);
  sub_21F8DDED0(v69, (uint64_t)v101, (uint64_t)v98);
  sub_21F76C9DC((uint64_t)v98, (uint64_t)v75, &qword_26AD47B78);
  sub_21F7BB3F8(v92, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F765354);
  swift_bridgeObjectRelease();
  sub_21F76C9DC((uint64_t)v90, (uint64_t)v76, &qword_26AD46A38);
  if (sub_21F7BB368((uint64_t)v76) == 1)
  {
    sub_21F7BB380((uint64_t)__src);
  }
  else
  {
    sub_21F7BB81C((uint64_t)&v78, (uint64_t)__src);
    nullsub_1(__src, v59);
  }
  sub_21F76C9DC((uint64_t)__src, (uint64_t)v74, &qword_26AD47B78);
  double v60 = vabdd_f64(v10, v9);
  double v61 = vabdd_f64(v8, v7);
  if (v10 < v9) {
    double v9 = v10;
  }
  if (v8 < v7) {
    double v7 = v8;
  }
  sub_21F7BB380((uint64_t)v72);
  __src[0] = v64;
  *(double *)&__src[1] = v7;
  *(double *)&__src[2] = v9;
  *(double *)&__src[3] = v61;
  *(double *)&__src[4] = v60;
  __src[5] = v65;
  __src[6] = v71;
  __src[7] = v50;
  __src[8] = v51;
  __src[9] = v53;
  __src[10] = v52;
  __src[11] = v55;
  __src[12] = v56;
  __src[13] = v58;
  __src[14] = v57;
  __src[15] = v44;
  sub_21F76C9DC((uint64_t)v75, (uint64_t)&__src[16], &qword_26AD47B78);
  __src[35] = v68;
  sub_21F76C9DC((uint64_t)v74, (uint64_t)&__src[36], &qword_26AD47B78);
  sub_21F76C9DC((uint64_t)v72, (uint64_t)&__src[55], &qword_26AD47B78);
  LOWORD(__src[74]) = 0;
  __src[75] = 0;
  uint64_t v62 = swift_allocObject();
  memcpy((void *)(v62 + 16), __src, 0x260uLL);
  return v62 | 0xC000000000000000;
}

uint64_t sub_21F9A20F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SgRectangle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for RectangleMark()
{
  return &type metadata for RectangleMark;
}

uint64_t sub_21F9A2164()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 96))
  {
    sub_21F7656A8(*(void *)(v0 + 72), *(void *)(v0 + 80), *(unsigned char *)(v0 + 88));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 128))
  {
    sub_21F7656A8(*(void *)(v0 + 104), *(void *)(v0 + 112), *(unsigned char *)(v0 + 120));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 144);
  unint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 216);
  unint64_t v6 = *(void *)(v0 + 240);
  uint64_t v7 = *(void *)(v0 + 272);
  uint64_t v8 = *(void *)(v0 + 288);
  if (v6 > 1
    || (v1 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v2 > 1
    || (v5 | v4) & 0xF000000000000007 | v3 & 0xFFFFFFFFFFFFFF7CLL
    || (v8 | *(void *)(v0 + 280)) & 0xF000000000000007 | v7 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_21F7BB724(v1, *(void *)(v0 + 152), *(void *)(v0 + 160), v2, *(void *)(v0 + 176), *(void *)(v0 + 184), *(void *)(v0 + 192), v3, v4, v5, *(void *)(v0 + 224), *(void *)(v0 + 232), v6, *(void *)(v0 + 248), *(void *)(v0 + 256), *(void *)(v0 + 264), v7, *(void *)(v0 + 280), v8);
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v0 + 304);
  unint64_t v10 = *(void *)(v0 + 328);
  uint64_t v11 = *(void *)(v0 + 360);
  uint64_t v12 = *(void *)(v0 + 368);
  uint64_t v13 = *(void *)(v0 + 376);
  unint64_t v14 = *(void *)(v0 + 400);
  uint64_t v15 = *(void *)(v0 + 432);
  uint64_t v16 = *(void *)(v0 + 448);
  if (v14 > 1
    || (v9 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v10 > 1
    || (v13 | v12) & 0xF000000000000007 | v11 & 0xFFFFFFFFFFFFFF7CLL
    || (v16 | *(void *)(v0 + 440)) & 0xF000000000000007 | v15 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_21F7BB724(v9, *(void *)(v0 + 312), *(void *)(v0 + 320), v10, *(void *)(v0 + 336), *(void *)(v0 + 344), *(void *)(v0 + 352), v11, v12, v13, *(void *)(v0 + 384), *(void *)(v0 + 392), v14, *(void *)(v0 + 408), *(void *)(v0 + 416), *(void *)(v0 + 424), v15, *(void *)(v0 + 440), v16);
  }
  uint64_t v17 = *(void *)(v0 + 456);
  unint64_t v18 = *(void *)(v0 + 480);
  uint64_t v19 = *(void *)(v0 + 512);
  uint64_t v20 = *(void *)(v0 + 520);
  uint64_t v21 = *(void *)(v0 + 528);
  unint64_t v22 = *(void *)(v0 + 552);
  uint64_t v23 = *(void *)(v0 + 584);
  uint64_t v24 = *(void *)(v0 + 600);
  if (v22 > 1
    || (v17 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v18 > 1
    || (v21 | v20) & 0xF000000000000007 | v19 & 0xFFFFFFFFFFFFFF7CLL
    || (v24 | *(void *)(v0 + 592)) & 0xF000000000000007 | v23 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_21F7BB724(v17, *(void *)(v0 + 464), *(void *)(v0 + 472), v18, *(void *)(v0 + 488), *(void *)(v0 + 496), *(void *)(v0 + 504), v19, v20, v21, *(void *)(v0 + 536), *(void *)(v0 + 544), v22, *(void *)(v0 + 560), *(void *)(v0 + 568), *(void *)(v0 + 576), v23, *(void *)(v0 + 592), v24);
  }

  return MEMORY[0x270FA0238](v0, 624, 7);
}

uint64_t sub_21F9A23D0(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  uint64_t v33 = a2;
  uint64_t v34 = a3;
  uint64_t v32 = sub_21FA24C90();
  uint64_t v7 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  uint64_t v31 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = MEMORY[0x263F8EE78];
  if (!v9) {
    return v10;
  }
  uint64_t v28 = v4;
  uint64_t v43 = MEMORY[0x263F8EE78];
  sub_21F7A2658(0, v9, 0);
  uint64_t v11 = 0;
  uint64_t v10 = v43;
  int64_t v35 = v9;
  uint64_t v36 = a1 + 32;
  uint64_t v29 = (void (**)(uint64_t, uint64_t, double))(v7 + 8);
  uint64_t v30 = (void (**)(char *, uint64_t, uint64_t, double))(v7 + 16);
  while (1)
  {
    uint64_t v12 = *(void *)(v36 + 8 * v11);
    uint64_t v13 = qword_26AD46270;
    swift_bridgeObjectRetain();
    if (v13 != -1) {
      swift_once();
    }
    if (*(double *)&qword_26AD52218 >= a4) {
      break;
    }
    uint64_t v14 = (uint64_t)v31;
    uint64_t v15 = v32;
    (*v30)(v31, v34, v32, *(double *)&qword_26AD52218);
    double v16 = sub_21F8B1A38(v14, v12, v33, (uint64_t)v44, a4);
    uint64_t v17 = v44[1];
    uint64_t v37 = v44[0];
    uint64_t v19 = v44[2];
    uint64_t v18 = v44[3];
    char v20 = v45;
    (*v29)(v14, v15, v16);
    swift_bridgeObjectRelease();
LABEL_13:
    uint64_t v43 = v10;
    unint64_t v26 = *(void *)(v10 + 16);
    unint64_t v25 = *(void *)(v10 + 24);
    if (v26 >= v25 >> 1)
    {
      sub_21F7A2658((char *)(v25 > 1), v26 + 1, 1);
      uint64_t v10 = v43;
    }
    ++v11;
    *(void *)(v10 + 16) = v26 + 1;
    uint64_t v27 = v10 + 40 * v26;
    *(void *)(v27 + 32) = v37;
    *(void *)(v27 + 40) = v17;
    *(void *)(v27 + 48) = v19;
    *(void *)(v27 + 56) = v18;
    *(unsigned char *)(v27 + 64) = v20;
    if (v11 == v35) {
      return v10;
    }
  }
  uint64_t result = sub_21FA25270();
  uint64_t v22 = *(void *)(v12 + 16);
  if (v22)
  {
    sub_21FA251D0();
    uint64_t v23 = v22 - 1;
    if (v23)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v23; ++i)
        sub_21FA25200();
      swift_bridgeObjectRelease();
    }
    sub_21FA251B0();
    swift_bridgeObjectRelease();
    uint64_t v17 = v39;
    uint64_t v37 = v38;
    uint64_t v19 = v40;
    uint64_t v18 = v41;
    char v20 = v42;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

void sub_21F9A26A0(char **a1)
{
  unint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v2 = sub_21F935368((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v4[0] = v2 + 32;
  v4[1] = v3;
  sub_21F9A42C4(v4);
  *a1 = v2;
}

uint64_t ChartContent._horizontalConnection(gradient:width:tolerance:)@<X0>(uint64_t a1@<X0>, double a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v13 = *(void *)(a4 - 8);
  __n128 v14 = MEMORY[0x270FA5388](a1);
  double v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v16, v6, v17, v14);
  if (a3) {
    double v18 = 0.5;
  }
  else {
    double v18 = a2;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a5, v16, a4);
  uint64_t v19 = (int *)type metadata accessor for _HorizontalConnection();
  *(void *)(a5 + v19[9]) = a1;
  *(double *)(a5 + v19[10]) = a6;
  *(double *)(a5 + v19[11]) = v18;
  return swift_bridgeObjectRetain();
}

_UNKNOWN **sub_21F9A285C()
{
  return &off_26B5915E8;
}

uint64_t sub_21F9A2868()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21F9A2914(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v10 = *v11;
    uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v12 = *v13;
    *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_21F9A2A40(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();

  return swift_bridgeObjectRelease();
}

uint64_t sub_21F9A2AB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  uint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  *(void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_21F9A2B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(void *)unint64_t v7 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8);
  v7 += 15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v7 & 0xFFFFFFFFFFFFFFF8) = *(void *)(v9 & 0xFFFFFFFFFFFFFFF8);
  *(void *)(((v7 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v9 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_21F9A2BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v7 = *v8;
  unint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v9 = *v10;
  *(void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_21F9A2C98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  v8 += 15;
  *(void *)unint64_t v7 = v9;
  v7 += 15;
  swift_bridgeObjectRelease();
  *(void *)(v7 & 0xFFFFFFFFFFFFFFF8) = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8);
  *(void *)(((v7 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v8 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_21F9A2D3C(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x21F9A2E98);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_21F9A2EAC(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0) {
                uint64_t v20 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v20 = a2 - 1;
              }
              void *v19 = v20;
            }
            else
            {
              double v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x21F9A30A4);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for _HorizontalConnection()
{
  return sub_21F764F08();
}

void sub_21F9A30E4(unint64_t a1, char **a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for SgRectangle(0);
  MEMORY[0x270FA5388](v12);
  int v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for SgGroup(0);
  MEMORY[0x270FA5388](v15 - 8);
  int v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 60 == 4)
  {
    uint64_t v25 = sub_21FA24C90();
    uint64_t v26 = *(void *)(v25 - 8);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(a4, v25);
    uint64_t v27 = swift_projectBox();
    sub_21F76845C(v27, (uint64_t)v14, type metadata accessor for SgRectangle);
    uint64_t v28 = *((void *)v14 + 1);
    long long v35 = *((_OWORD *)v14 + 1);
    uint64_t v29 = *((void *)v14 + 4);
    uint64_t v30 = *a2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v30 = sub_21F7E8A08(0, *((void *)v30 + 2) + 1, 1, v30);
    }
    unint64_t v32 = *((void *)v30 + 2);
    unint64_t v31 = *((void *)v30 + 3);
    if (v32 >= v31 >> 1) {
      uint64_t v30 = sub_21F7E8A08((char *)(v31 > 1), v32 + 1, 1, v30);
    }
    *((void *)v30 + 2) = v32 + 1;
    uint64_t v33 = &v30[32 * v32];
    *((void *)v33 + 4) = v28;
    *(_OWORD *)(v33 + 40) = v35;
    *((void *)v33 + 7) = v29;
    *a2 = v30;
    double v34 = *((double *)v14 + 5);
    if (v34 <= *((double *)v14 + 8)) {
      double v34 = *((double *)v14 + 8);
    }
    if (v34 <= *((double *)v14 + 7)) {
      double v34 = *((double *)v14 + 7);
    }
    if (v34 <= *((double *)v14 + 6)) {
      double v34 = *((double *)v14 + 6);
    }
    if (v34 <= *a3) {
      double v34 = *a3;
    }
    *a3 = v34;
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 16))(a4, &v14[*(int *)(v12 + 40)], v25);
    uint64_t v23 = type metadata accessor for SgRectangle;
    uint64_t v24 = (uint64_t)v14;
  }
  else
  {
    if (a1 >> 60) {
      return;
    }
    uint64_t v18 = swift_projectBox();
    sub_21F76845C(v18, (uint64_t)v17, type metadata accessor for SgGroup);
    uint64_t v19 = *((void *)v17 + 1);
    uint64_t v20 = *(void *)(v19 + 16);
    if (v20)
    {
      *(void *)&long long v35 = v17;
      swift_bridgeObjectRetain();
      uint64_t v21 = 0;
      do
      {
        uint64_t v22 = *(void *)(v19 + 8 * v21++ + 32);
        swift_retain();
        sub_21F9A30E4(v22, a2, a3, a4, a5, a6);
        swift_release();
      }
      while (v20 != v21);
      swift_bridgeObjectRelease();
      int v17 = (char *)v35;
    }
    uint64_t v23 = type metadata accessor for SgGroup;
    uint64_t v24 = (uint64_t)v17;
  }
  sub_21F9A4CD4(v24, v23);
}

void sub_21F9A341C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  void (*v19)(void *__return_ptr, uint64_t, uint64_t *, uint64_t, uint64_t, __n128);
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  double v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  long long v28;
  long long v29;
  long long v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  double v39;
  uint64_t v40;
  long long v41;
  CGFloat v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  unint64_t v58;
  unint64_t v59;
  double v60;
  char *v61;
  double v62;
  char *v63;
  double v64;
  int64_t v65;
  uint64_t v66;
  double *v67;
  CGFloat v68;
  CGFloat v69;
  CGFloat v70;
  CGFloat v71;
  _OWORD *v72;
  long long v73;
  CGFloat v74;
  CGFloat v75;
  CGFloat v76;
  CGFloat MinY;
  long long v78;
  CGFloat v79;
  CGFloat v80;
  CGFloat v81;
  long long v82;
  CGFloat v83;
  CGFloat v84;
  CGFloat v85;
  CGFloat MaxY;
  long long v87;
  CGFloat v88;
  CGFloat v89;
  CGFloat v90;
  long long v91;
  CGFloat v92;
  CGFloat v93;
  CGFloat v94;
  CGFloat v95;
  long long v96;
  CGFloat v97;
  CGFloat v98;
  CGFloat v99;
  long long v100;
  CGFloat v101;
  CGFloat v102;
  CGFloat v103;
  CGFloat v104;
  long long v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  CGFloat *v109;
  char *v110;
  CGFloat v111;
  CGFloat v112;
  CGFloat v113;
  CGFloat v114;
  double Width;
  double Height;
  double v117;
  double v118;
  double MinX;
  double v120;
  unint64_t v121;
  unint64_t v122;
  double *v123;
  double MaxX;
  double v125;
  unint64_t v126;
  unint64_t v127;
  double *v128;
  double v129;
  double v130;
  unint64_t v131;
  unint64_t v132;
  double *v133;
  double v134;
  double v135;
  unint64_t v136;
  unint64_t v137;
  double *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  long long v145;
  long long v146;
  uint64_t v147;
  long long v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int *v160;
  void *v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void v168[3];
  char *v169;
  double v170;
  unint64_t v171;
  uint64_t v172;
  int *v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  double v181;
  double v182;
  double v183;
  uint64_t v184;
  double v185;
  long long v186;
  long long v187;
  void v188[5];
  char v189;
  uint64_t v190;
  uint64_t v191;
  double v192;
  uint64_t v193;
  unsigned __int8 v194;
  char *v195;
  double v196;
  char *v197;
  long long v198;
  long long v199;
  uint64_t v200;
  _OWORD v201[2];
  char v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unsigned char v209[56];
  CGRect v210;
  CGRect v211;
  CGRect v212;
  CGRect v213;
  CGRect v214;
  CGRect v215;
  CGRect v216;
  CGRect v217;
  CGRect v218;
  CGRect v219;
  CGRect v220;
  CGRect v221;
  CGRect v222;
  CGRect v223;
  CGRect v224;
  CGRect v225;
  CGRect v226;
  CGRect v227;
  CGRect v228;
  CGRect v229;
  CGRect v230;
  CGRect v231;
  CGRect v232;
  CGRect v233;

  char v180 = a1;
  uint64_t v178 = a5;
  uint64_t v8 = sub_21F76CA40(&qword_26AD48A80);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v175 = (char *)v168 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SgPath(0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v168 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_21FA24C90();
  char v176 = *(void *)(v13 - 8);
  long long v177 = v13;
  __n128 v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)v168 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(a2 + 8);
  LOBYTE(v203) = *(unsigned char *)a2;
  char v17 = v203;
  uint64_t v204 = v18;
  uint64_t v19 = *(void (**)(void *__return_ptr, uint64_t, uint64_t *, uint64_t, uint64_t, __n128))(a4 + 40);
  *(void *)&uint64_t v187 = a4;
  v19(v188, v180, &v203, a3, a4, v14);
  if (v17)
  {
    void *v178 = v188[0];
  }
  else
  {
    uint64_t v172 = v188[0];
    char v173 = (int *)v10;
    long long v169 = v12;
    LOBYTE(v203) = v17;
    uint64_t v204 = v18;
    uint64_t v20 = v180;
    uint64_t v21 = v187;
    ((void (*)(void *__return_ptr, uint64_t, uint64_t *, uint64_t, void))v19)(v188, v180, &v203, a3, v187);
    uint64_t v22 = v188[0];
    uint64_t v196 = 0.0;
    uint64_t v197 = (char *)MEMORY[0x263F8EE78];
    (*(void (**)(char *, void, uint64_t))(v176 + 104))(v16, *MEMORY[0x263F19860], v177);
    uint64_t v174 = v16;
    sub_21F9A30E4(v22, &v197, &v196, (uint64_t)v16, a3, v21);
    uint64_t v23 = type metadata accessor for _HorizontalConnection();
    uint64_t v24 = *(double *)(v20 + *(int *)(v23 + 40));
    uint64_t v185 = *(double *)(v20 + *(int *)(v23 + 44));
    uint64_t v170 = v196;
    sub_21F9A26A0(&v197);
    v168[1] = 0;
    v168[2] = v23;
    uint64_t v25 = v197;
    uint64_t v26 = *((void *)v197 + 2);
    uint64_t v27 = v26 != 0;
    uint64_t v171 = v22;
    if (!v26 || v26 == v27)
    {
      swift_bridgeObjectRetain_n();
      double v34 = v25;
LABEL_31:
      uint64_t v64 = v24 * 0.5;
      uint64_t v185 = v24 * 0.5 + v170;
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v65 = *((void *)v34 + 2);
      if (v65)
      {
        char v203 = MEMORY[0x263F8EE78];
        swift_bridgeObjectRetain();
        sub_21F7A2608(0, v65, 0);
        char v66 = v203;
        char v67 = (double *)(v34 + 56);
        long long v186 = xmmword_21FA2CBA0;
        do
        {
          uint64_t v68 = *(v67 - 3) - v64;
          int v69 = *(v67 - 2) - v64;
          uint64_t v70 = v24 + *(v67 - 1);
          uint64_t v71 = v24 + *v67;
          sub_21F76CA40(&qword_26AD441F0);
          uint64_t v72 = (_OWORD *)swift_allocObject();
          v72[1] = v186;
          v223.origin.x = v68;
          v223.origin.y = v69;
          v223.size.width = v70;
          v223.size.height = v71;
          *(double *)&os_log_type_t v73 = CGRectGetMinX(v223);
          uint64_t v187 = v73;
          *(CGFloat *)&os_log_type_t v73 = v68;
          double v74 = v69;
          uint64_t v75 = v70;
          uint64_t v76 = v71;
          MinY = CGRectGetMinY(*(CGRect *)&v73);
          *(void *)&uint64_t v78 = v187;
          *((CGFloat *)&v78 + 1) = MinY;
          v72[2] = v78;
          char v79 = v68;
          *(CGFloat *)&uint64_t v78 = v69;
          uint64_t v80 = v70;
          uint64_t v81 = v71;
          *(double *)&uint64_t v82 = CGRectGetMinX(*(CGRect *)((char *)&v78 - 8));
          uint64_t v187 = v82;
          *(CGFloat *)&uint64_t v82 = v68;
          char v83 = v69;
          uint64_t v84 = v70;
          uint64_t v85 = v71;
          double MaxY = CGRectGetMaxY(*(CGRect *)&v82);
          *(void *)&uint64_t v87 = v187;
          *((CGFloat *)&v87 + 1) = MaxY;
          v72[3] = v87;
          uint64_t v88 = v68;
          *(CGFloat *)&uint64_t v87 = v69;
          char v89 = v70;
          uint64_t v90 = v71;
          *(double *)&uint64_t v91 = CGRectGetMaxX(*(CGRect *)((char *)&v87 - 8));
          uint64_t v187 = v91;
          *(CGFloat *)&uint64_t v91 = v68;
          uint64_t v92 = v69;
          os_log_type_t v93 = v70;
          long long v94 = v71;
          os_log_type_t v95 = CGRectGetMaxY(*(CGRect *)&v91);
          *(void *)&uint64_t v96 = v187;
          *((CGFloat *)&v96 + 1) = v95;
          v72[4] = v96;
          uint64_t v97 = v68;
          *(CGFloat *)&uint64_t v96 = v69;
          int v98 = v70;
          size_t v99 = v71;
          *(double *)&char v100 = CGRectGetMaxX(*(CGRect *)((char *)&v96 - 8));
          uint64_t v187 = v100;
          *(CGFloat *)&char v100 = v68;
          uint64_t v101 = v69;
          uint64_t v102 = v70;
          uint64_t v103 = v71;
          uint64_t v104 = CGRectGetMinY(*(CGRect *)&v100);
          *(void *)&char v105 = v187;
          *((CGFloat *)&v105 + 1) = v104;
          v72[5] = v105;
          char v203 = v66;
          uint64_t v107 = *(void *)(v66 + 16);
          uint64_t v106 = *(void *)(v66 + 24);
          if (v107 >= v106 >> 1)
          {
            sub_21F7A2608((char *)(v106 > 1), v107 + 1, 1);
            char v66 = v203;
          }
          *(void *)(v66 + 16) = v107 + 1;
          *(void *)(v66 + 8 * v107 + 32) = v72;
          v67 += 4;
          --v65;
        }
        while (v65);
        swift_bridgeObjectRelease();
        uint64_t v108 = *((void *)v34 + 2);
        long long v195 = (char *)MEMORY[0x263F8EE78];
        if (v108)
        {
          swift_bridgeObjectRetain();
          char v109 = (CGFloat *)(v34 + 56);
          long long v110 = (char *)MEMORY[0x263F8EE78];
          do
          {
            uint64_t v111 = *(v109 - 3);
            uint64_t v112 = *(v109 - 2);
            uint64_t v113 = *(v109 - 1);
            char v114 = *v109;
            v224.origin.x = v111;
            v224.origin.y = v112;
            v224.size.width = v113;
            v224.size.height = *v109;
            Width = CGRectGetWidth(v224);
            v225.origin.x = v111;
            v225.origin.y = v112;
            v225.size.width = v113;
            v225.size.height = v114;
            Height = CGRectGetHeight(v225);
            if (Height >= Width) {
              Height = Width;
            }
            uint64_t v117 = v64 + Height * 0.5;
            if (v117 >= v185) {
              uint64_t v118 = v185;
            }
            else {
              uint64_t v118 = v117;
            }
            v226.origin.x = v111;
            v226.origin.y = v112;
            v226.size.width = v113;
            v226.size.height = v114;
            double MinX = CGRectGetMinX(v226);
            v227.origin.x = v111;
            v227.origin.y = v112;
            v227.size.width = v113;
            v227.size.height = v114;
            uint64_t v120 = CGRectGetMinY(v227);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              long long v110 = sub_21F7E9398(0, *((void *)v110 + 2) + 1, 1, v110);
            }
            uint64_t v122 = *((void *)v110 + 2);
            uint64_t v121 = *((void *)v110 + 3);
            if (v122 >= v121 >> 1) {
              long long v110 = sub_21F7E9398((char *)(v121 > 1), v122 + 1, 1, v110);
            }
            *((void *)v110 + 2) = v122 + 1;
            uint64_t v123 = (double *)&v110[24 * v122];
            v123[4] = MinX - v64;
            v123[5] = v120 - v64;
            v123[6] = v118;
            v228.origin.x = v111;
            v228.origin.y = v112;
            v228.size.width = v113;
            v228.size.height = v114;
            double MaxX = CGRectGetMaxX(v228);
            v229.origin.x = v111;
            v229.origin.y = v112;
            v229.size.width = v113;
            v229.size.height = v114;
            uint64_t v125 = CGRectGetMinY(v229);
            char v127 = *((void *)v110 + 2);
            uint64_t v126 = *((void *)v110 + 3);
            if (v127 >= v126 >> 1) {
              long long v110 = sub_21F7E9398((char *)(v126 > 1), v127 + 1, 1, v110);
            }
            *((void *)v110 + 2) = v127 + 1;
            long long v128 = (double *)&v110[24 * v127];
            v128[4] = v64 + MaxX;
            v128[5] = v125 - v64;
            v128[6] = v118;
            v230.origin.x = v111;
            v230.origin.y = v112;
            v230.size.width = v113;
            v230.size.height = v114;
            uint64_t v129 = CGRectGetMinX(v230);
            v231.origin.x = v111;
            v231.origin.y = v112;
            v231.size.width = v113;
            v231.size.height = v114;
            double v130 = CGRectGetMaxY(v231);
            double v132 = *((void *)v110 + 2);
            double v131 = *((void *)v110 + 3);
            if (v132 >= v131 >> 1) {
              long long v110 = sub_21F7E9398((char *)(v131 > 1), v132 + 1, 1, v110);
            }
            *((void *)v110 + 2) = v132 + 1;
            double v133 = (double *)&v110[24 * v132];
            v133[4] = v129 - v64;
            v133[5] = v64 + v130;
            v133[6] = v118;
            v232.origin.x = v111;
            v232.origin.y = v112;
            v232.size.width = v113;
            v232.size.height = v114;
            uint64_t v134 = CGRectGetMaxX(v232);
            v233.origin.x = v111;
            v233.origin.y = v112;
            v233.size.width = v113;
            v233.size.height = v114;
            uint64_t v135 = CGRectGetMaxY(v233);
            char v137 = *((void *)v110 + 2);
            char v136 = *((void *)v110 + 3);
            if (v137 >= v136 >> 1) {
              long long v110 = sub_21F7E9398((char *)(v136 > 1), v137 + 1, 1, v110);
            }
            *((void *)v110 + 2) = v137 + 1;
            uint64_t v138 = (double *)&v110[24 * v137];
            v138[4] = v64 + v134;
            v138[5] = v64 + v135;
            v138[6] = v118;
            v109 += 4;
            --v108;
          }
          while (v108);
          swift_bridgeObjectRelease();
          long long v195 = v110;
        }
      }
      else
      {
        char v66 = MEMORY[0x263F8EE78];
        long long v195 = (char *)MEMORY[0x263F8EE78];
      }
      uint64_t v139 = (uint64_t)v174;
      char v140 = (uint64_t)v169;
      long long v141 = sub_21F9373DC(v66);
      swift_bridgeObjectRelease();
      long long v142 = sub_21F9A23D0(v141, (uint64_t *)&v195, v139, v185);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_21FA25270();
      uint64_t v143 = *(void *)(v142 + 16);
      if (v143)
      {
        char v203 = 0x3FF0000000000000;
        uint64_t v204 = 0;
        uint64_t v205 = 0;
        char v206 = 0x3FF0000000000000;
        uint64_t v144 = v142 + 32;
        uint64_t v207 = 0;
        uint64_t v208 = 0;
        do
        {
          uint64_t v145 = *(_OWORD *)v144;
          char v146 = *(_OWORD *)(v144 + 16);
          uint64_t v202 = *(unsigned char *)(v144 + 32);
          v201[0] = v145;
          v201[1] = v146;
          sub_21F7C48F4((uint64_t)v201, (uint64_t)v209);
          sub_21F7C4968((uint64_t)v209, (void (*)(void, void, void, void, void))sub_21F7C4950);
          sub_21FA25160();
          sub_21F7C4968((uint64_t)v201, (void (*)(void, void, void, void, void))sub_21F7705AC);
          v144 += 40;
          --v143;
        }
        while (v143);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_21FA25990();
      sub_21FA259A0();
      sub_21FA24710();
      v188[3] = MEMORY[0x263F18AF0];
      v188[4] = MEMORY[0x263F18AE0];
      uint64_t v147 = swift_allocObject();
      v188[0] = v147;
      uint64_t v148 = v199;
      *(_OWORD *)(v147 + 16) = v198;
      *(_OWORD *)(v147 + 32) = v148;
      *(void *)(v147 + 48) = v200;
      char v189 = 1;
      char v149 = v190;
      char v150 = v191;
      uint64_t v152 = *(void *)&v192;
      uint64_t v151 = v193;
      uint64_t v185 = v192;
      *(void *)&long long v186 = v190;
      uint64_t v184 = v193;
      char v153 = v173;
      long long v154 = v140;
      long long v155 = v140 + v173[6];
      LODWORD(v183) = v194;
      sub_21F772024((uint64_t)v188, v155);
      uint64_t v156 = type metadata accessor for SgShapeStyle();
      uint64_t v157 = v155 + *(int *)(v156 + 32);
      uint64_t v158 = sub_21FA25910();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v158 - 8) + 56))(v157, 1, 1, v158);
      *(unsigned char *)(v155 + 41) = 1;
      *(_OWORD *)(v155 + 48) = 0u;
      *(_OWORD *)(v155 + 64) = 0u;
      *(void *)(v155 + 80) = 0;
      *(void *)(v155 + 88) = 0x3FF0000000000000;
      uint64_t v159 = v155 + *(int *)(v156 + 36);
      *(void *)uint64_t v159 = 0;
      *(_WORD *)(v159 + 8) = 0;
      *(void *)long long v154 = 0;
      *(void *)(v154 + 8) = v149;
      *(void *)(v154 + 16) = v150;
      *(void *)(v154 + 24) = v152;
      *(void *)(v154 + 32) = v151;
      LOBYTE(v149) = LOBYTE(v183);
      *(unsigned char *)(v154 + 40) = LOBYTE(v183);
      *(void *)(v154 + v153[7]) = 0;
      *(void *)(v154 + v153[8]) = 0x3FF0000000000000;
      *(unsigned char *)(v154 + v153[9]) = 0;
      uint64_t v160 = (int *)type metadata accessor for SgGroup(0);
      *(void *)&uint64_t v187 = swift_allocBox();
      uint64_t v162 = v161;
      sub_21F76CA40(&qword_26AD4A470);
      uint64_t v163 = swift_allocObject();
      *(_OWORD *)(v163 + 16) = xmmword_21FA28820;
      uint64_t v164 = swift_allocBox();
      sub_21F76845C(v154, v165, type metadata accessor for SgPath);
      *(void *)(v163 + 32) = v164 | 0x9000000000000000;
      *(void *)(v163 + 40) = v171;
      uint64_t v166 = type metadata accessor for SgClipRect(0);
      uint64_t v167 = (uint64_t)v175;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v166 - 8) + 56))(v175, 1, 1, v166);
      sub_21F7C4950(v186, v150, *(uint64_t *)&v185, v184, v149);
      swift_release();
      sub_21F9A4CD4(v154, type metadata accessor for SgPath);
      sub_21F7705AC(v190, v191, *(uint64_t *)&v192, v193, v194);
      *uint64_t v162 = 0;
      v162[1] = v163;
      sub_21F7B94C0(v167, (uint64_t)v162 + v160[6]);
      *(void *)((char *)v162 + v160[7]) = 0x3FF0000000000000;
      *(void *)((char *)v162 + v160[8]) = 0;
      *(void *)((char *)v162 + v160[9]) = MEMORY[0x263F8EE78];
      *((unsigned char *)v162 + v160[10]) = 0;
      void *v178 = v187;
      sub_21F7D25BC((uint64_t)v188);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v176 + 8))(v174, v177);
    }
    else
    {
      uint64_t v28 = *((_OWORD *)v197 + 2);
      long long v186 = *((_OWORD *)v197 + 3);
      uint64_t v187 = v28;
      swift_bridgeObjectRetain_n();
      uint64_t v29 = v186;
      uint64_t v30 = v187;
      unint64_t v31 = 0;
      unint64_t v32 = v27 - v26;
      uint64_t v33 = 32 * v27 + 32;
      double v34 = v25;
      uint64_t v179 = v27 - v26;
      while (v27 + v31 < v26)
      {
        long long v186 = v29;
        uint64_t v187 = v30;
        uint64_t v36 = *(double *)&v25[v33 + 16];
        long long v35 = *(double *)&v25[v33 + 24];
        uint64_t v38 = *(double *)&v25[v33];
        uint64_t v37 = *(double *)&v25[v33 + 8];
        v210.origin.x = v38;
        v210.origin.y = v37;
        v210.size.width = v36;
        v210.size.height = v35;
        uint64_t v39 = CGRectGetMinX(v210);
        uint64_t v40 = v186;
        uint64_t v41 = v187;
        char v42 = *((double *)&v186 + 1);
        uint64_t v43 = *((void *)&v187 + 1);
        uint64_t v44 = *((void *)&v186 + 1);
        if (v39 - CGRectGetMaxX(*(CGRect *)&v41) < v185)
        {
          *(void *)&v211.size.width = v186;
          *(void *)&v211.origin.x = v187;
          v211.origin.y = *((CGFloat *)&v41 + 1);
          v211.size.height = v42;
          char v45 = CGRectGetMaxX(v211);
          v212.origin.x = v38;
          v212.origin.y = v37;
          v212.size.width = v36;
          v212.size.height = v35;
          uint64_t v46 = CGRectGetMinX(v212);
          if (v46 >= v45) {
            uint64_t v46 = v45;
          }
          uint64_t v184 = *(void *)&v46;
          *(void *)&v213.size.width = v186;
          *(void *)&v213.origin.x = v187;
          v213.origin.y = *((CGFloat *)&v41 + 1);
          v213.size.height = v42;
          uint64_t v47 = CGRectGetMinY(v213);
          v214.origin.x = v38;
          v214.origin.y = v37;
          v214.size.width = v36;
          v214.size.height = v35;
          uint64_t v48 = CGRectGetMinY(v214);
          if (v48 >= v47) {
            uint64_t v48 = v47;
          }
          uint64_t v183 = v48;
          *(void *)&v215.size.width = v186;
          *(void *)&v215.origin.x = v187;
          v215.origin.y = *((CGFloat *)&v41 + 1);
          v215.size.height = v42;
          long long v49 = CGRectGetMaxX(v215);
          v216.origin.x = v38;
          v216.origin.y = v37;
          v216.size.width = v36;
          v216.size.height = v35;
          uint64_t v50 = CGRectGetMinX(v216);
          if (v49 > v50) {
            uint64_t v50 = v49;
          }
          uint64_t v182 = v50;
          *(void *)&v217.size.width = v186;
          *(void *)&v217.origin.x = v187;
          v217.origin.y = *((CGFloat *)&v41 + 1);
          v217.size.height = v42;
          uint64_t v51 = CGRectGetMaxX(v217);
          v218.origin.x = v38;
          v218.origin.y = v37;
          v218.size.width = v36;
          v218.size.height = v35;
          uint64_t v52 = CGRectGetMinX(v218);
          if (v52 >= v51) {
            uint64_t v52 = v51;
          }
          uint64_t v181 = v52;
          *(void *)&v219.size.width = v186;
          *(void *)&v219.origin.x = v187;
          v219.origin.y = *((CGFloat *)&v41 + 1);
          v219.size.height = v42;
          uint64_t v53 = CGRectGetMaxY(v219);
          v220.origin.x = v38;
          v220.origin.y = v37;
          v220.size.width = v36;
          v220.size.height = v35;
          uint64_t v54 = CGRectGetMaxY(v220);
          if (v53 <= v54) {
            uint64_t v53 = v54;
          }
          *(void *)&v221.size.width = v186;
          *(void *)&v221.origin.x = v187;
          v221.origin.y = *((CGFloat *)&v41 + 1);
          v221.size.height = v42;
          uint64_t v55 = CGRectGetMinY(v221);
          v222.origin.x = v38;
          v222.origin.y = v37;
          v222.size.width = v36;
          v222.size.height = v35;
          uint64_t v56 = CGRectGetMinY(v222);
          if (v56 >= v55) {
            uint64_t v57 = v55;
          }
          else {
            uint64_t v57 = v56;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            double v34 = sub_21F7E8A08(0, *((void *)v34 + 2) + 1, 1, v34);
          }
          uint64_t v59 = *((void *)v34 + 2);
          uint64_t v58 = *((void *)v34 + 3);
          if (v59 >= v58 >> 1) {
            double v34 = sub_21F7E8A08((char *)(v58 > 1), v59 + 1, 1, v34);
          }
          double v60 = v182 - v181;
          *((void *)v34 + 2) = v59 + 1;
          double v61 = &v34[32 * v59];
          uint64_t v62 = v183;
          *((void *)v61 + 4) = v184;
          *((double *)v61 + 5) = v62;
          *((double *)v61 + 6) = v60;
          *((double *)v61 + 7) = v53 - v57;
          uint64_t v197 = v34;
          unint64_t v32 = v179;
        }
        if (v31 + 1 == v26) {
          goto LABEL_31;
        }
        if ((unint64_t)(v31 + 1) >= *((void *)v25 + 2)) {
          goto LABEL_61;
        }
        uint64_t v63 = &v25[32 * v31];
        uint64_t v30 = *((_OWORD *)v63 + 4);
        uint64_t v29 = *((_OWORD *)v63 + 5);
        ++v31;
        v33 += 32;
        if (!(v32 + v31)) {
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_61:
      __break(1u);
    }
  }
}

double sub_21F9A41DC(uint64_t *a1, double a2, double a3, double a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*a1 + 16);
  if (v6)
  {
    uint64_t v9 = qword_26AD46270;
    swift_bridgeObjectRetain();
    if (v9 != -1) {
LABEL_15:
    }
      swift_once();
    uint64_t v10 = 0;
    uint64_t v11 = (double *)(v5 + 48);
    while (1)
    {
      uint64_t v12 = v10 + 1;
      if (__OFADD__(v10, 1))
      {
        __break(1u);
        goto LABEL_15;
      }
      double v13 = vabdd_f64(a3, *(v11 - 1));
      if (vabdd_f64(a2, *(v11 - 2)) < *(double *)&qword_26AD52218 && v13 < *(double *)&qword_26AD52218) {
        break;
      }
      v11 += 3;
      ++v10;
      if (v12 == v6) {
        goto LABEL_12;
      }
    }
    a4 = *v11;
LABEL_12:
    swift_bridgeObjectRelease();
  }
  return a4;
}

void sub_21F9A42B8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
}

void sub_21F9A42C4(void *a1)
{
  unint64_t v2 = a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = sub_21FA26850();
  uint64_t v129 = v3;
  if (v4 >= v3)
  {
    if (v3 < 0) {
      goto LABEL_140;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v101 = *v2;
      uint64_t v102 = (double *)(v101 + 32);
      uint64_t v103 = -1;
      uint64_t v104 = 1;
      do
      {
        char v105 = (double *)(v101 + 32 * v104);
        double v106 = *v105;
        uint64_t v107 = *((void *)v105 + 1);
        uint64_t v108 = *((void *)v105 + 2);
        uint64_t v109 = *((void *)v105 + 3);
        uint64_t v110 = v103;
        uint64_t v111 = v102;
        do
        {
          CGFloat v112 = *(v111 - 4);
          CGFloat v113 = *(v111 - 3);
          CGFloat v114 = *(v111 - 2);
          CGFloat v115 = *(v111 - 1);
          double MidX = CGRectGetMidX(*(CGRect *)&v106);
          v135.origin.x = v112;
          v135.origin.y = v113;
          v135.size.width = v114;
          v135.size.height = v115;
          if (MidX >= CGRectGetMidX(v135)) {
            break;
          }
          if (!v101) {
            goto LABEL_144;
          }
          double v106 = *v111;
          uint64_t v107 = *((void *)v111 + 1);
          uint64_t v108 = *((void *)v111 + 2);
          uint64_t v109 = *((void *)v111 + 3);
          long long v117 = *((_OWORD *)v111 - 1);
          *(_OWORD *)uint64_t v111 = *((_OWORD *)v111 - 2);
          *((_OWORD *)v111 + 1) = v117;
          *((void *)v111 - 3) = v107;
          *((void *)v111 - 2) = v108;
          *((void *)v111 - 1) = v109;
          *(v111 - 4) = v106;
          v111 -= 4;
        }
        while (!__CFADD__(v110++, 1));
        ++v104;
        v102 += 4;
        --v103;
      }
      while (v104 != v129);
    }
  }
  else
  {
    if (v3 >= 0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = v3 + 1;
    }
    if (v3 < -1) {
      goto LABEL_139;
    }
    uint64_t v128 = v4;
    if (v3 > 1)
    {
      uint64_t v6 = v5 >> 1;
      type metadata accessor for CGRect(0);
      uint64_t v7 = sub_21FA25ED0();
      *(void *)(v7 + 16) = v6;
      uint64_t v127 = v7;
      double v130 = (CGRect *)(v7 + 32);
LABEL_13:
      uint64_t v9 = 0;
      uint64_t v126 = v2;
      uint64_t v10 = *v2;
      double v131 = (char *)MEMORY[0x263F8EE78];
      while (1)
      {
        uint64_t v12 = v9++;
        if (v9 < v3)
        {
          double v13 = (CGFloat *)(v10 + 32 * v12);
          CGFloat v14 = *v13;
          CGFloat v15 = v13[1];
          CGFloat v16 = v13[2];
          CGFloat v17 = v13[3];
          double v18 = CGRectGetMidX(*(CGRect *)(v10 + 32 * v9));
          v132.origin.x = v14;
          v132.origin.y = v15;
          v132.size.width = v16;
          v132.size.height = v17;
          double v19 = CGRectGetMidX(v132);
          uint64_t v9 = v12 + 2;
          if (v12 + 2 < v3)
          {
            uint64_t v20 = v10 + 48 + 32 * v12;
            while (1)
            {
              CGFloat v21 = *(double *)(v20 - 16);
              CGFloat v22 = *(double *)(v20 - 8);
              CGFloat v23 = *(double *)v20;
              CGFloat v24 = *(double *)(v20 + 8);
              double v25 = CGRectGetMidX(*(CGRect *)(v20 + 16));
              v133.origin.x = v21;
              v133.origin.y = v22;
              v133.size.width = v23;
              v133.size.height = v24;
              if (v18 < v19 == v25 >= CGRectGetMidX(v133)) {
                break;
              }
              ++v9;
              v20 += 32;
              if (v3 == v9)
              {
                uint64_t v9 = v3;
                break;
              }
            }
          }
          if (v18 < v19)
          {
            if (v9 < v12) {
              goto LABEL_141;
            }
            if (v12 < v9)
            {
              uint64_t v26 = 32 * v9;
              uint64_t v27 = 32 * v12;
              uint64_t v28 = v9;
              uint64_t v29 = v12;
              do
              {
                if (v29 != --v28)
                {
                  if (!v10) {
                    goto LABEL_147;
                  }
                  uint64_t v30 = (_OWORD *)(v10 + v27);
                  uint64_t v31 = v10 + v26;
                  long long v32 = *(_OWORD *)(v10 + v27);
                  long long v33 = *(_OWORD *)(v10 + v27 + 16);
                  long long v34 = *(_OWORD *)(v10 + v26 - 16);
                  _OWORD *v30 = *(_OWORD *)(v10 + v26 - 32);
                  v30[1] = v34;
                  *(_OWORD *)(v31 - 32) = v32;
                  *(_OWORD *)(v31 - 16) = v33;
                }
                ++v29;
                v26 -= 32;
                v27 += 32;
              }
              while (v29 < v28);
            }
          }
        }
        if (v9 >= v3) {
          goto LABEL_39;
        }
        if (__OFSUB__(v9, v12)) {
          goto LABEL_138;
        }
        if (v9 - v12 >= v128) {
          goto LABEL_39;
        }
        if (__OFADD__(v12, v128)) {
          goto LABEL_142;
        }
        if (v12 + v128 >= v3) {
          uint64_t v35 = v3;
        }
        else {
          uint64_t v35 = v12 + v128;
        }
        if (v35 < v12)
        {
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
          return;
        }
        if (v9 == v35)
        {
LABEL_39:
          uint64_t v36 = v131;
          if (v9 < v12) {
            goto LABEL_133;
          }
        }
        else
        {
          uint64_t v87 = (double *)(v10 + 32 * v9);
          uint64_t v36 = v131;
          do
          {
            uint64_t v88 = (double *)(v10 + 32 * v9);
            double v89 = *v88;
            uint64_t v90 = *((void *)v88 + 1);
            uint64_t v91 = *((void *)v88 + 2);
            uint64_t v92 = *((void *)v88 + 3);
            uint64_t v93 = v12;
            long long v94 = v87;
            do
            {
              CGFloat v95 = *(v94 - 4);
              CGFloat v96 = *(v94 - 3);
              CGFloat v97 = *(v94 - 2);
              CGFloat v98 = *(v94 - 1);
              double v99 = CGRectGetMidX(*(CGRect *)&v89);
              v134.origin.x = v95;
              v134.origin.y = v96;
              v134.size.width = v97;
              v134.size.height = v98;
              if (v99 >= CGRectGetMidX(v134)) {
                break;
              }
              if (!v10) {
                goto LABEL_145;
              }
              double v89 = *v94;
              uint64_t v90 = *((void *)v94 + 1);
              uint64_t v91 = *((void *)v94 + 2);
              uint64_t v92 = *((void *)v94 + 3);
              long long v100 = *((_OWORD *)v94 - 1);
              *(_OWORD *)long long v94 = *((_OWORD *)v94 - 2);
              *((_OWORD *)v94 + 1) = v100;
              *((void *)v94 - 3) = v90;
              *((void *)v94 - 2) = v91;
              *((void *)v94 - 1) = v92;
              *(v94 - 4) = v89;
              v94 -= 4;
              ++v93;
            }
            while (v9 != v93);
            ++v9;
            v87 += 4;
          }
          while (v9 != v35);
          uint64_t v9 = v35;
          if (v35 < v12) {
            goto LABEL_133;
          }
        }
        uint64_t v37 = v12;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v36 = sub_21F7E929C(0, *((void *)v36 + 2) + 1, 1, v36);
        }
        unint64_t v39 = *((void *)v36 + 2);
        unint64_t v38 = *((void *)v36 + 3);
        unint64_t v11 = v39 + 1;
        if (v39 >= v38 >> 1) {
          uint64_t v36 = sub_21F7E929C((char *)(v38 > 1), v39 + 1, 1, v36);
        }
        *((void *)v36 + 2) = v11;
        uint64_t v40 = v36 + 32;
        uint64_t v41 = &v36[16 * v39 + 32];
        *(void *)uint64_t v41 = v37;
        *((void *)v41 + 1) = v9;
        double v131 = v36;
        if (v39)
        {
          while (1)
          {
            unint64_t v42 = v11 - 1;
            if (v11 >= 4)
            {
              uint64_t v47 = &v40[16 * v11];
              uint64_t v48 = *((void *)v47 - 8);
              uint64_t v49 = *((void *)v47 - 7);
              BOOL v53 = __OFSUB__(v49, v48);
              uint64_t v50 = v49 - v48;
              if (v53) {
                goto LABEL_122;
              }
              uint64_t v52 = *((void *)v47 - 6);
              uint64_t v51 = *((void *)v47 - 5);
              BOOL v53 = __OFSUB__(v51, v52);
              uint64_t v45 = v51 - v52;
              char v46 = v53;
              if (v53) {
                goto LABEL_123;
              }
              unint64_t v54 = v11 - 2;
              uint64_t v55 = &v40[16 * v11 - 32];
              uint64_t v57 = *(void *)v55;
              uint64_t v56 = *((void *)v55 + 1);
              BOOL v53 = __OFSUB__(v56, v57);
              uint64_t v58 = v56 - v57;
              if (v53) {
                goto LABEL_124;
              }
              BOOL v53 = __OFADD__(v45, v58);
              uint64_t v59 = v45 + v58;
              if (v53) {
                goto LABEL_126;
              }
              if (v59 >= v50)
              {
                uint64_t v77 = &v40[16 * v42];
                uint64_t v79 = *(void *)v77;
                uint64_t v78 = *((void *)v77 + 1);
                BOOL v53 = __OFSUB__(v78, v79);
                uint64_t v80 = v78 - v79;
                if (v53) {
                  goto LABEL_132;
                }
                BOOL v70 = v45 < v80;
                goto LABEL_76;
              }
            }
            else
            {
              if (v11 != 3)
              {
                uint64_t v71 = *((void *)v36 + 4);
                uint64_t v72 = *((void *)v36 + 5);
                BOOL v53 = __OFSUB__(v72, v71);
                uint64_t v64 = v72 - v71;
                char v65 = v53;
                goto LABEL_70;
              }
              uint64_t v44 = *((void *)v36 + 4);
              uint64_t v43 = *((void *)v36 + 5);
              BOOL v53 = __OFSUB__(v43, v44);
              uint64_t v45 = v43 - v44;
              char v46 = v53;
            }
            if (v46) {
              goto LABEL_125;
            }
            unint64_t v54 = v11 - 2;
            double v60 = &v40[16 * v11 - 32];
            uint64_t v62 = *(void *)v60;
            uint64_t v61 = *((void *)v60 + 1);
            BOOL v63 = __OFSUB__(v61, v62);
            uint64_t v64 = v61 - v62;
            char v65 = v63;
            if (v63) {
              goto LABEL_127;
            }
            char v66 = &v40[16 * v42];
            uint64_t v68 = *(void *)v66;
            uint64_t v67 = *((void *)v66 + 1);
            BOOL v53 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            if (v53) {
              goto LABEL_129;
            }
            if (__OFADD__(v64, v69)) {
              goto LABEL_131;
            }
            if (v64 + v69 >= v45)
            {
              BOOL v70 = v45 < v69;
LABEL_76:
              if (v70) {
                unint64_t v42 = v54;
              }
              goto LABEL_78;
            }
LABEL_70:
            if (v65) {
              goto LABEL_128;
            }
            os_log_type_t v73 = &v40[16 * v42];
            uint64_t v75 = *(void *)v73;
            uint64_t v74 = *((void *)v73 + 1);
            BOOL v53 = __OFSUB__(v74, v75);
            uint64_t v76 = v74 - v75;
            if (v53) {
              goto LABEL_130;
            }
            if (v76 < v64) {
              goto LABEL_15;
            }
LABEL_78:
            unint64_t v81 = v42 - 1;
            if (v42 - 1 >= v11)
            {
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
              goto LABEL_143;
            }
            if (!v10) {
              goto LABEL_146;
            }
            uint64_t v82 = &v40[16 * v81];
            uint64_t v83 = *(void *)v82;
            uint64_t v84 = &v40[16 * v42];
            uint64_t v85 = *((void *)v84 + 1);
            sub_21F9A4A2C((CGRect *)(v10 + 32 * *(void *)v82), (CGRect *)(v10 + 32 * *(void *)v84), v10 + 32 * v85, v130);
            if (v1) {
              goto LABEL_116;
            }
            if (v85 < v83) {
              goto LABEL_119;
            }
            if (v42 > *((void *)v131 + 2)) {
              goto LABEL_120;
            }
            *(void *)uint64_t v82 = v83;
            *(void *)&v40[16 * v81 + 8] = v85;
            unint64_t v86 = *((void *)v131 + 2);
            if (v42 >= v86) {
              goto LABEL_121;
            }
            uint64_t v36 = v131;
            unint64_t v11 = v86 - 1;
            memmove(&v40[16 * v42], v84 + 16, 16 * (v86 - 1 - v42));
            *((void *)v131 + 2) = v86 - 1;
            if (v86 <= 2) {
              goto LABEL_15;
            }
          }
        }
        unint64_t v11 = 1;
LABEL_15:
        uint64_t v3 = v129;
        if (v9 >= v129)
        {
          uint64_t v8 = v127;
          uint64_t v119 = v131;
          unint64_t v2 = v126;
          goto LABEL_105;
        }
      }
    }
    uint64_t v8 = MEMORY[0x263F8EE78];
    double v130 = (CGRect *)(MEMORY[0x263F8EE78] + 32);
    if (v3 == 1)
    {
      uint64_t v127 = MEMORY[0x263F8EE78];
      goto LABEL_13;
    }
    unint64_t v11 = *(void *)(MEMORY[0x263F8EE78] + 16);
    uint64_t v119 = (char *)MEMORY[0x263F8EE78];
LABEL_105:
    uint64_t v127 = v8;
    if (v11 >= 2)
    {
      uint64_t v120 = *v2;
      do
      {
        unint64_t v121 = v11 - 2;
        if (v11 < 2) {
          goto LABEL_134;
        }
        if (!v120) {
          goto LABEL_148;
        }
        uint64_t v122 = *(void *)&v119[16 * v121 + 32];
        uint64_t v123 = *(void *)&v119[16 * v11 + 24];
        sub_21F9A4A2C((CGRect *)(v120 + 32 * v122), (CGRect *)(v120 + 32 * *(void *)&v119[16 * v11 + 16]), v120 + 32 * v123, v130);
        if (v1) {
          break;
        }
        if (v123 < v122) {
          goto LABEL_135;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v119 = sub_21F936940((uint64_t)v119);
        }
        if (v121 >= *((void *)v119 + 2)) {
          goto LABEL_136;
        }
        char v124 = &v119[16 * v121 + 32];
        *(void *)char v124 = v122;
        *((void *)v124 + 1) = v123;
        unint64_t v125 = *((void *)v119 + 2);
        if (v11 > v125) {
          goto LABEL_137;
        }
        memmove(&v119[16 * v11 + 16], &v119[16 * v11 + 32], 16 * (v125 - v11));
        *((void *)v119 + 2) = v125 - 1;
        unint64_t v11 = v125 - 1;
      }
      while (v125 > 2);
    }
LABEL_116:
    swift_bridgeObjectRelease();
    *(void *)(v127 + 16) = 0;
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_21F9A4A2C(CGRect *__dst, CGRect *__src, unint64_t a3, CGRect *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = (char *)__src - (char *)__dst;
  int64_t v9 = (char *)__src - (char *)__dst + 31;
  if ((char *)__src - (char *)__dst >= 0) {
    int64_t v9 = (char *)__src - (char *)__dst;
  }
  uint64_t v10 = v9 >> 5;
  uint64_t v11 = a3 - (void)__src;
  uint64_t v12 = a3 - (void)__src + 31;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v12 = a3 - (void)__src;
  }
  uint64_t v13 = v12 >> 5;
  if (v10 >= v12 >> 5)
  {
    if (a4 != __src || &__src[v13] <= a4) {
      memmove(a4, __src, 32 * v13);
    }
    CGFloat v14 = (char *)&v4[v13];
    if (v7 >= v6 || v11 < 32) {
      goto LABEL_40;
    }
    CGFloat v23 = (CGRect *)(a3 - 32);
    while (1)
    {
      CGFloat v24 = v23 + 1;
      CGFloat x = v6[-1].origin.x;
      CGFloat y = v6[-1].origin.y;
      p_origin = &v6[-1].origin;
      CGFloat width = v6[-1].size.width;
      CGFloat height = v6[-1].size.height;
      double MidX = CGRectGetMidX(*((CGRect *)v14 - 1));
      v35.origin.CGFloat x = x;
      v35.origin.CGFloat y = y;
      v35.size.CGFloat width = width;
      v35.size.CGFloat height = height;
      if (MidX >= CGRectGetMidX(v35))
      {
        p_origin = (CGPoint *)(v14 - 32);
        if (v24 != (CGRect *)v14)
        {
          v14 -= 32;
          goto LABEL_37;
        }
        BOOL v31 = v23 >= (CGRect *)v14;
        v14 -= 32;
        if (v31) {
          goto LABEL_37;
        }
      }
      else
      {
        if (v24 != v6)
        {
          --v6;
LABEL_37:
          CGSize v32 = (CGSize)p_origin[1];
          v23->origin = *p_origin;
          v23->size = v32;
          goto LABEL_38;
        }
        BOOL v31 = v23 >= v6--;
        if (v31) {
          goto LABEL_37;
        }
      }
LABEL_38:
      if (v6 > v7)
      {
        --v23;
        if (v14 > (char *)v4) {
          continue;
        }
      }
      goto LABEL_40;
    }
  }
  if (a4 != __dst || &__dst[v10] <= a4) {
    memmove(a4, __dst, 32 * v10);
  }
  CGFloat v14 = (char *)&v4[v10];
  if ((unint64_t)v6 < a3 && v8 >= 32)
  {
    while (1)
    {
      CGFloat v15 = v4->origin.x;
      CGFloat v16 = v4->origin.y;
      CGFloat v17 = v4->size.width;
      CGFloat v18 = v4->size.height;
      double v19 = CGRectGetMidX(*v6);
      v34.origin.CGFloat x = v15;
      v34.origin.CGFloat y = v16;
      v34.size.CGFloat width = v17;
      v34.size.CGFloat height = v18;
      if (v19 >= CGRectGetMidX(v34)) {
        break;
      }
      uint64_t v20 = &v6->origin;
      BOOL v21 = v7 == v6++;
      if (!v21) {
        goto LABEL_16;
      }
LABEL_17:
      ++v7;
      if (v4 >= (CGRect *)v14 || (unint64_t)v6 >= a3) {
        goto LABEL_19;
      }
    }
    uint64_t v20 = &v4->origin;
    BOOL v21 = v7 == v4++;
    if (v21) {
      goto LABEL_17;
    }
LABEL_16:
    CGSize v22 = (CGSize)v20[1];
    v7->origin = *v20;
    v7->size = v22;
    goto LABEL_17;
  }
LABEL_19:
  uint64_t v6 = v7;
LABEL_40:
  if (v6 != v4
    || v6 >= (CGRect *)((char *)v4 + ((v14 - (char *)v4 + (v14 - (char *)v4 < 0 ? 0x1FuLL : 0)) & 0xFFFFFFFFFFFFFFE0)))
  {
    memmove(v6, v4, 32 * ((v14 - (char *)v4) / 32));
  }
  return 1;
}

uint64_t sub_21F9A4C9C()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_21F9A4CD4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_21F9A4D34()
{
  return sub_21F779E60(&qword_267EE9E40, &qword_267EE9E48);
}

uint64_t sub_21F9A4D70()
{
  return sub_21F779E60(&qword_267EE9E50, &qword_267EE9E58);
}

uint64_t sub_21F9A4DAC()
{
  return sub_21F779E60(&qword_267EE9E60, &qword_267EE9E68);
}

uint64_t sub_21F9A4DE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  int64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9(v6);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v8, a3);
}

float64_t sub_21F9A4EC8(double a1, float64x2_t a2, float64x2_t a3)
{
  if ((vmovn_s64(vceqq_f64(a2, a3)).u8[0] & 1) == 0)
  {
    a2 = vsubq_f64(a2, a3);
    *(void *)&a2.f64[0] = *(_OWORD *)&vaddq_f64(vmulq_n_f64(a2, (a1 - a3.f64[0]) / a2.f64[0]), a3);
  }
  return a2.f64[0];
}

double sub_21F9A4EF4@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_21F9A4F00(double *a1, void *a2)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_21F9A4F0C@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(double *)(a1 + 8);
  *a2 = result;
  return result;
}

double sub_21F9A4F18(double *a1, uint64_t a2)
{
  double result = *a1;
  *(double *)(a2 + 8) = *a1;
  return result;
}

double sub_21F9A4F24@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(double *)(a1 + 16);
  *a2 = result;
  return result;
}

double sub_21F9A4F30(double *a1, uint64_t a2)
{
  double result = *a1;
  *(double *)(a2 + 16) = *a1;
  return result;
}

double sub_21F9A4F3C@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(double *)(a1 + 24);
  *a2 = result;
  return result;
}

double sub_21F9A4F48(double *a1, uint64_t a2)
{
  double result = *a1;
  *(double *)(a2 + 24) = *a1;
  return result;
}

uint64_t sub_21F9A4F54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA264B0();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t sub_21F9A5018@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void **)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  int64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v26 - v11;
  MEMORY[0x270FA5388](v13);
  CGFloat v15 = (char *)&v26 - v14;
  __n128 v17 = MEMORY[0x270FA5388](v16);
  uint64_t v28 = (char *)&v26 - v18;
  double v19 = (void (*)(char *, __n128))v7[2];
  v19(v15, v17);
  ((void (*)(char *, uint64_t, uint64_t))v19)(v12, a2, a3);
  sub_21FA264B0();
  uint64_t result = sub_21FA264A0();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v21 = result;
    uint64_t v27 = a4;
    if (result)
    {
      uint64_t v22 = 0;
      do
      {
        sub_21FA264C0();
        sub_21FA264C0();
        double v31 = v30 + v29;
        sub_21FA264D0();
        ++v22;
      }
      while (v21 != v22);
    }
    CGFloat v23 = (void (*)(char *, uint64_t))v7[1];
    v23(v12, a3);
    v23(v15, a3);
    CGFloat v24 = (void (*)(char *, char *, uint64_t))v7[4];
    double v25 = v28;
    v24(v28, v9, a3);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v24)(v27, v25, a3);
  }
  return result;
}

uint64_t sub_21F9A527C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void **)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  int64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v26 - v11;
  MEMORY[0x270FA5388](v13);
  CGFloat v15 = (char *)&v26 - v14;
  __n128 v17 = MEMORY[0x270FA5388](v16);
  uint64_t v28 = (char *)&v26 - v18;
  double v19 = (void (*)(char *, __n128))v7[2];
  v19(v15, v17);
  ((void (*)(char *, uint64_t, uint64_t))v19)(v12, a2, a3);
  sub_21FA264B0();
  uint64_t result = sub_21FA264A0();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v21 = result;
    uint64_t v27 = a4;
    if (result)
    {
      uint64_t v22 = 0;
      do
      {
        sub_21FA264C0();
        sub_21FA264C0();
        double v31 = v30 - v29;
        sub_21FA264D0();
        ++v22;
      }
      while (v21 != v22);
    }
    CGFloat v23 = (void (*)(char *, uint64_t))v7[1];
    v23(v12, a3);
    v23(v15, a3);
    CGFloat v24 = (void (*)(char *, char *, uint64_t))v7[4];
    double v25 = v28;
    v24(v28, v9, a3);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v24)(v27, v25, a3);
  }
  return result;
}

uint64_t sub_21F9A54E0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  int64_t v9 = (char *)&v25 - v8;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v25 - v11;
  __n128 v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v25 - v15;
  __n128 v17 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16);
  v17(v12, v1, v3, v14);
  ((void (*)(char *, uint64_t, uint64_t))v17)(v9, v1, v3);
  uint64_t v18 = *(void *)(a1 + 24);
  sub_21FA264B0();
  uint64_t result = sub_21FA264A0();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v20 = result;
    uint64_t v26 = v18;
    uint64_t v27 = v16;
    if (result)
    {
      uint64_t v21 = 0;
      do
      {
        sub_21FA264C0();
        sub_21FA264C0();
        double v30 = v29 * v28;
        sub_21FA264D0();
        ++v21;
      }
      while (v20 != v21);
    }
    uint64_t v22 = *(void (**)(char *, uint64_t))(v4 + 8);
    v22(v9, v3);
    v22(v12, v3);
    CGFloat v23 = v27;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v27, v6, v3);
    unint64_t v24 = sub_21F9A6210();
    sub_21F9A5758(v26, v24, (uint64_t)&v30);
    return ((uint64_t (*)(char *, uint64_t))v22)(v23, v3);
  }
  return result;
}

uint64_t sub_21F9A5758@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  int64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a2 + 16) + 8) + 8);
  sub_21FA26730();
  uint64_t v20 = a3;
  sub_21FA265A0();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v7 + 8);
  v18(v9, AssociatedTypeWitness);
  uint64_t result = sub_21FA264A0();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v12 = result;
    uint64_t v19 = v10;
    uint64_t v13 = v18;
    if (result)
    {
      uint64_t v14 = v5;
      uint64_t result = 0;
      do
      {
        uint64_t v15 = result + 1;
        uint64_t v16 = v14;
        sub_21FA264C0();
        sub_21FA26720();
        v13(v9, AssociatedTypeWitness);
        uint64_t v14 = v16;
        uint64_t result = v15;
      }
      while (v12 != v15);
    }
  }
  return result;
}

uint64_t sub_21F9A5920(uint64_t a1, double a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v25 - v9;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v25 - v12;
  __n128 v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v25 - v16;
  uint64_t v26 = v5;
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 32);
  v27((char *)&v25 - v16, v2, v4, v15);
  sub_21FA264B0();
  uint64_t result = sub_21FA264A0();
  if (result < 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v19 = result;
  uint64_t v25 = v2;
  if (result)
  {
    uint64_t v20 = 0;
    do
    {
      uint64_t v21 = v20 + 1;
      double v30 = a2;
      sub_21FA264D0();
      uint64_t v20 = v21;
    }
    while (v19 != v21);
  }
  ((void (*)(char *, char *, uint64_t))v27)(v13, v10, v4);
  sub_21FA264B0();
  uint64_t result = sub_21FA264A0();
  if (result < 0) {
    goto LABEL_11;
  }
  uint64_t v22 = result;
  if (result)
  {
    uint64_t v23 = 0;
    do
    {
      sub_21FA264C0();
      sub_21FA264C0();
      double v30 = v29 * v28;
      sub_21FA264D0();
      ++v23;
    }
    while (v22 != v23);
  }
  unint64_t v24 = *(void (**)(char *, uint64_t))(v26 + 8);
  v24(v13, v4);
  v24(v17, v4);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(v25, v7, v4);
}

uint64_t sub_21F9A5BDC()
{
  return sub_21FA25CE0() & 1;
}

uint64_t sub_21F9A5C14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21F9A4F54(*(void *)(a1 + 16), a2);
}

uint64_t sub_21F9A5C20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_21F9A5018(a1, a2, *(void *)(a3 + 16), a4);
}

uint64_t sub_21F9A5C2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21F9A4DE8(a1, a2, a3);
}

uint64_t sub_21F9A5C58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_21F9A527C(a1, a2, *(void *)(a3 + 16), a4);
}

uint64_t sub_21F9A5C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21F9A4DE8(a1, a2, a3);
}

uint64_t sub_21F9A5C90()
{
  return sub_21F9A5BDC();
}

double sub_21F9A5C9C()
{
  swift_getKeyPath();
  swift_getAtKeyPath();
  swift_release();
  swift_getKeyPath();
  swift_getAtKeyPath();
  swift_release();
  swift_getKeyPath();
  swift_getAtKeyPath();
  swift_release();
  swift_getKeyPath();
  swift_getAtKeyPath();
  swift_release();
  return v1;
}

double sub_21F9A5DC4@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_21F9A5DD0(double *a1, void *a2)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_21F9A5DDC@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(double *)(a1 + 8);
  *a2 = result;
  return result;
}

double sub_21F9A5DE8(double *a1, uint64_t a2)
{
  double result = *a1;
  *(double *)(a2 + 8) = *a1;
  return result;
}

double sub_21F9A5DF4@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(double *)(a1 + 16);
  *a2 = result;
  return result;
}

double sub_21F9A5E00(double *a1, uint64_t a2)
{
  double result = *a1;
  *(double *)(a2 + 16) = *a1;
  return result;
}

double sub_21F9A5E0C@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(double *)(a1 + 24);
  *a2 = result;
  return result;
}

double sub_21F9A5E18(double *a1, uint64_t a2)
{
  double result = *a1;
  *(double *)(a2 + 24) = *a1;
  return result;
}

uint64_t sub_21F9A5E24(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_21F9A5F80(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x21F9A6198);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for CoordinateVector()
{
  return sub_21F764F08();
}

uint64_t sub_21F9A61D8()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F9A61F4()
{
  return swift_getWitnessTable();
}

unint64_t sub_21F9A6210()
{
  unint64_t result = qword_267EE9E70[0];
  if (!qword_267EE9E70[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_267EE9E70);
  }
  return result;
}

uint64_t ForEach<>.init(_:id:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_21FA257A0();
  swift_release();
  swift_release();
  unsigned int v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8);

  return v7(a1, a5);
}

void ForEach<>.body.getter()
{
}

void sub_21F9A6334()
{
}

uint64_t sub_21F9A6384()
{
  return 48;
}

__n128 sub_21F9A6390(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_21F9A63A4(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21F9A63F4(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

ValueMetadata *_s10CatmullRomVMa()
{
  return &_s10CatmullRomVN;
}

uint64_t sub_21F9A6454(double a1, double a2)
{
  double v5 = v2[6];
  double v6 = v2[7];
  long double v7 = v2[1] * 0.5;
  pow((v2[4] - v5) * (v2[4] - v5) + (v2[5] - v6) * (v2[5] - v6), v7);
  double v8 = v2[8];
  double v9 = v2[9];
  pow((v5 - v8) * (v5 - v8) + (v6 - v9) * (v6 - v9), v7);
  pow((v8 - a1) * (v8 - a1) + (v9 - a2) * (v9 - a2), v7);
  return sub_21FA262A0();
}

void sub_21F9A6644()
{
  uint64_t v1 = v0;
  unint64_t v2 = *(void *)(v0 + 16);
  if (v2 >= 2)
  {
    if (v2 == 2) {
      sub_21FA26290();
    }
    else {
      sub_21F9A66E0(*(double *)(v0 + 48), *(double *)(v0 + 56));
    }
  }
  uint64_t v3 = *(void *)(v0 + 24);
  if (v3 == 1 || !v3 && *(void *)(v1 + 16) == 1) {
    CGPathCloseSubpath(*(CGMutablePathRef *)v1);
  }
  if (__OFSUB__(0, v3)) {
    __break(1u);
  }
  else {
    *(void *)(v1 + 24) = -v3;
  }
}

__n128 sub_21F9A66E0(double a1, double a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  if (v5 == 1)
  {
    *(void *)(v2 + 16) = 2;
    *(double *)(v2 + 48) = a1;
    *(double *)(v2 + 56) = a2;
  }
  else if (v5)
  {
    *(void *)(v2 + 16) = 3;
    sub_21F9A6454(a1, a2);
  }
  else
  {
    *(void *)(v2 + 16) = 1;
    if (*(void *)(v2 + 24) == 1) {
      sub_21FA26290();
    }
    else {
      sub_21FA26280();
    }
  }
  __n128 result = *(__n128 *)(v2 + 48);
  long long v7 = *(_OWORD *)(v2 + 64);
  *(__n128 *)(v2 + 32) = result;
  *(_OWORD *)(v2 + 48) = v7;
  *(double *)(v2 + 64) = a1;
  *(double *)(v2 + 72) = a2;
  return result;
}

uint64_t sub_21F9A67C4()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F9A67E0()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F9A6824()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F9A6840()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F9A685C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v26 = *(void *)(a1 + 24);
  uint64_t v2 = sub_21FA26340();
  uint64_t v3 = sub_21FA26340();
  uint64_t v19 = *(void *)(v3 - 8);
  uint64_t v20 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v19 - v4;
  uint64_t v6 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v7);
  double v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  unsigned int v12 = (char *)&v19 - v11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v25 = AssociatedTypeWitness;
  sub_21FA26350();
  uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v23(v5, 1, v2) == 1)
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v20);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v21, 1, 1);
  }
  else
  {
    unsigned int v14 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    uint64_t v22 = v26 - 8;
    while (1)
    {
      v14(v12, v5, v2);
      v14(v9, v12, v2);
      uint64_t v15 = *(void *)(v26 - 8);
      if ((*(unsigned int (**)(char *, uint64_t))(v15 + 48))(v9, 1) != 1) {
        break;
      }
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v2);
      sub_21FA26350();
      if (v23(v5, 1, v2) == 1) {
        goto LABEL_5;
      }
    }
    uint64_t v17 = v21;
    uint64_t v18 = v26;
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v21, v9, v26);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v17, 0, 1, v18);
  }
}

uint64_t sub_21F9A6BC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v10 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  unsigned int v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v7, v2, v4, v10);
  sub_21FA25D60();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v12, AssociatedTypeWitness);
}

uint64_t sub_21F9A6D58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_21F9A6BC8(a1, a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);

  return v4(v2, a1);
}

uint64_t sub_21F9A6DB8()
{
  return 0;
}

uint64_t sub_21F9A6DC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21F9A8C4C(v2, a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8))(v2, a1);
  return v4;
}

uint64_t sub_21F9A6E30@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v5 = (char *)&v7 - v4;
  sub_21FA26110();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, AssociatedTypeWitness);
}

uint64_t sub_21F9A6F2C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = sub_21FA26340();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v11[-v6];
  uint64_t v8 = (void (*)(unsigned char *, void))sub_21FA261F0();
  (*(void (**)(unsigned char *))(v5 + 16))(v7);
  v8(v11, 0);
  uint64_t v9 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v3);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v9 + 32))(a2, v7, v3);
  }
  __break(1u);
  return result;
}

uint64_t sub_21F9A70AC@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v66 = a3;
  uint64_t v5 = a2[4];
  uint64_t v6 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v64 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v65 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  BOOL v63 = (char *)&v51 - v8;
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = sub_21FA266C0();
  uint64_t v59 = *(void *)(v10 - 8);
  uint64_t v60 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v58 = (char *)&v51 - v11;
  uint64_t v12 = sub_21FA26340();
  uint64_t v53 = *(void *)(v12 - 8);
  uint64_t v54 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v61 = (char *)&v51 - v13;
  uint64_t v69 = v9;
  uint64_t v62 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v55 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v52 = (char *)&v51 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v72 = (char *)&v51 - v19;
  uint64_t v20 = *(a2 - 1);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = a2[3];
  uint64_t v24 = type metadata accessor for CompactedCollection.Index();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v51 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v29 = MEMORY[0x270FA5388](v28);
  double v31 = (char *)&v51 - v30;
  CGSize v32 = *(void (**)(char *, uint64_t *, uint64_t, __n128))(v25 + 16);
  uint64_t v68 = a1;
  v32((char *)&v51 - v30, a1, v24, v29);
  (*(void (**)(char *, uint64_t, void *))(v20 + 16))(v23, v71, a2);
  sub_21F9A6E30((uint64_t)v27);
  uint64_t v33 = v6;
  uint64_t v70 = v5;
  LOBYTE(v6) = sub_21F9A8920();
  CGRect v34 = *(void (**)(char *, uint64_t))(v25 + 8);
  v34(v27, v24);
  CGRect v35 = *(void (**)(char *, void *))(v20 + 8);
  uint64_t v56 = a2;
  v35(v23, a2);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v34)(v31, v24);
  if (v6)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v37 = v70;
  sub_21FA260B0();
  uint64_t v38 = v69;
  uint64_t result = sub_21FA25CE0();
  if ((result & 1) == 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  uint64_t v39 = v62;
  uint64_t v40 = v58;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v58, v72, v38);
  uint64_t v41 = v60;
  swift_getWitnessTable();
  unint64_t v42 = v63;
  uint64_t v43 = sub_21FA261B0();
  uint64_t v68 = &v51;
  MEMORY[0x270FA5388](v43);
  uint64_t v44 = v57;
  *(&v51 - 4) = v33;
  *(&v51 - 3) = v44;
  *(&v51 - 2) = v37;
  uint64_t AssociatedConformanceWitness = v33;
  uint64_t v45 = v65;
  swift_getAssociatedConformanceWitness();
  char v46 = v61;
  sub_21FA26130();
  (*(void (**)(char *, uint64_t))(v64 + 8))(v42, v45);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v40, v41);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v46, 1, v38) == 1)
  {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v46, v54);
    sub_21F9A6E30(v66);
    return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v72, v38);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v72, v38);
    uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
    uint64_t v48 = v52;
    v47(v52, v46, v38);
    uint64_t v49 = v55;
    v47(v55, v48, v38);
    uint64_t v50 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v50 - 8) + 32))(v66, v49, v50);
  }
}

uint64_t sub_21F9A77FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 44);
  uint64_t v5 = type metadata accessor for CompactedCollection.Index();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

void (*sub_21F9A7878(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_21F9A78E8(v6, a2, a3);
  return sub_21F80EA18;
}

void (*sub_21F9A78E8(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v5 = *(void *)(a3 + 24);
  *a1 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  a1[1] = v6;
  uint64_t v7 = malloc(*(void *)(v6 + 64));
  a1[2] = v7;
  sub_21F9A6F2C(a3, (uint64_t)v7);
  return sub_21F8AFF38;
}

uint64_t sub_21F9A79A4@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for CompactedCollection.Index();
  uint64_t v2 = sub_21FA26340();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t sub_21F9A7A2C(uint64_t *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for CompactedCollection.Index();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v9 - v6;
  sub_21F9A70AC(a1, a2, (uint64_t)&v9 - v6);
  (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(a1, v4);
  return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v5 + 32))(a1, v7, v4);
}

uint64_t sub_21F9A7B28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2;
  uint64_t v6 = type metadata accessor for CompactedCollection.Index();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v14 - v9;
  uint64_t v11 = *(void *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v11 + 16))(a2, v4, a1, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v4 + *(int *)(a1 + 44), v6);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v4, a1);
  swift_getWitnessTable();
  uint64_t v12 = sub_21FA266B0();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a2 + *(int *)(v12 + 36), v10, v6);
}

uint64_t sub_21F9A7CBC(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t sub_21F9A7D10(uint64_t a1)
{
  swift_getWitnessTable();
  uint64_t v3 = sub_21F8B0C04();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8))(v1, a1);
  return v3;
}

uint64_t sub_21F9A7D9C@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v91 = a1;
  uint64_t v83 = a4;
  uint64_t v80 = a3;
  uint64_t v5 = *(void *)(a3 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v81 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v82 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v79 = (char *)&v67 - v8;
  uint64_t v9 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v75 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v72 = (char *)&v67 - v12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v86 = sub_21FA26210();
  uint64_t v78 = *(void *)(v86 - 8);
  MEMORY[0x270FA5388](v86);
  uint64_t v71 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v77 = (char *)&v67 - v15;
  uint64_t v93 = v6;
  uint64_t v89 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v88 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_21FA26340();
  uint64_t v68 = *(void *)(v69 - 8);
  MEMORY[0x270FA5388](v69);
  uint64_t v76 = (char *)&v67 - v18;
  uint64_t v94 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v92 = (char *)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v74 = (char *)&v67 - v22;
  uint64_t v23 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&v67 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = *(void *)(a2 + 24);
  uint64_t v27 = type metadata accessor for CompactedCollection.Index();
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v30 = (char *)&v67 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v32 = MEMORY[0x270FA5388](v31);
  CGRect v34 = (char *)&v67 - v33;
  uint64_t v84 = *(void (**)(char *, char *, uint64_t, __n128))(v28 + 16);
  v84((char *)&v67 - v33, v91, v27, v32);
  (*(void (**)(char *, uint64_t *, uint64_t))(v23 + 16))(v26, v90, a2);
  uint64_t v87 = v5;
  LOBYTE(v5) = sub_21F9A8920();
  uint64_t v36 = *(void (**)(char *, uint64_t))(v23 + 8);
  CGRect v35 = (char *)(v23 + 8);
  v36(v26, a2);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v34, v27);
  if (v5)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v37 = v90;
  (*(void (**)(char *, uint64_t *, uint64_t))(v89 + 16))(v88, v90, v93);
  ((void (*)(char *, char *, uint64_t))v84)(v30, (char *)v37 + *(int *)(a2 + 44), v27);
  CGRect v35 = (char *)(v94 + 16);
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v94 + 16);
  v38(v92, v91, v9);
  if ((sub_21FA25C70() & 1) == 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v39 = TupleTypeMetadata2;
  uint64_t v40 = v72;
  uint64_t v41 = &v72[*(int *)(TupleTypeMetadata2 + 48)];
  unint64_t v42 = *(char **)(v94 + 32);
  ((void (*)(char *, char *, uint64_t))v42)(v72, v30, v9);
  uint64_t v91 = v41;
  ((void (*)(char *, char *, uint64_t))v42)(v41, v92, v9);
  uint64_t v43 = v75;
  uint64_t v44 = &v75[*(int *)(v39 + 48)];
  v38(v75, v40, v9);
  v38(v44, v41, v9);
  uint64_t v45 = v71;
  ((void (*)(char *, char *, uint64_t))v42)(v71, v43, v9);
  char v46 = *(void (**)(char *, uint64_t))(v94 + 8);
  v46(v44, v9);
  uint64_t v47 = v46;
  uint64_t v48 = &v43[*(int *)(v39 + 48)];
  ((void (*)(char *, char *, uint64_t))v42)(v43, v40, v9);
  ((void (*)(char *, char *, uint64_t))v42)(v48, v91, v9);
  uint64_t v49 = v86;
  uint64_t v50 = &v45[*(int *)(v86 + 36)];
  uint64_t v91 = v42;
  ((void (*)(char *, char *, uint64_t))v42)(v50, v48, v9);
  v47(v43, v9);
  uint64_t v52 = v77;
  uint64_t v51 = v78;
  uint64_t v53 = v45;
  uint64_t v54 = v93;
  (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v77, v53, v49);
  uint64_t v55 = v79;
  uint64_t v56 = v88;
  sub_21FA261E0();
  uint64_t v57 = (*(uint64_t (**)(char *, uint64_t))(v89 + 8))(v56, v54);
  uint64_t v90 = &v67;
  MEMORY[0x270FA5388](v57);
  uint64_t v58 = v70;
  *(&v67 - 4) = v54;
  *(&v67 - 3) = v58;
  uint64_t v65 = v80;
  uint64_t v59 = v82;
  swift_getAssociatedConformanceWitness();
  CGRect v35 = v76;
  sub_21FA25C20();
  (*(void (**)(char *, uint64_t))(v81 + 8))(v55, v59);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v86);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v35, 1, v9) != 1)
  {
    uint64_t v60 = v74;
    uint64_t v61 = v91;
    ((void (*)(char *, char *, uint64_t))v91)(v74, v35, v9);
    uint64_t v62 = v92;
    ((void (*)(char *, char *, uint64_t))v61)(v92, v60, v9);
    uint64_t v63 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v63 - 8) + 32))(v83, v62, v63);
  }
LABEL_7:
  (*(void (**)(char *, uint64_t))(v68 + 8))(v35, v69);
  int v66 = 0;
  uint64_t v65 = 125;
  uint64_t result = sub_21FA266E0();
  __break(1u);
  return result;
}

uint64_t sub_21F9A8764@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_21F9A7D9C(a1, a2, *(void *)(a3 - 8), a4);
}

uint64_t sub_21F9A876C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  uint64_t v6 = type metadata accessor for CompactedCollection.Index();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v11 - v8;
  sub_21F9A7D9C(a1, a2, v5, (uint64_t)&v11 - v8);
  (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 32))(a1, v9, v6);
}

uint64_t sub_21F9A8888()
{
  return sub_21FA25C50() & 1;
}

uint64_t sub_21F9A8920()
{
  return sub_21FA25CE0() & 1;
}

uint64_t sub_21F9A89B8()
{
  return sub_21F9A8888();
}

uint64_t sub_21F9A89D4()
{
  swift_getAssociatedTypeWitness();

  return sub_21FA25B70();
}

uint64_t sub_21F9A8A40()
{
  return sub_21FA26A50();
}

uint64_t sub_21F9A8AB8()
{
  return sub_21F9A8920();
}

uint64_t sub_21F9A8AC8()
{
  return sub_21F9A8A40();
}

uint64_t sub_21F9A8AD0()
{
  return sub_21F9A89D4();
}

uint64_t sub_21F9A8AD8()
{
  return sub_21FA26A50();
}

uint64_t sub_21F9A8B30()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F9A8B4C()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F9A8B68()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F9A8B84()
{
  return sub_21F9A8BB4();
}

uint64_t sub_21F9A8B9C()
{
  return sub_21F9A8BB4();
}

uint64_t sub_21F9A8BB4()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for CompactedCollection.Index()
{
  return sub_21F764F08();
}

BOOL sub_21F9A8C30(uint64_t a1)
{
  return sub_21F9A8C50(a1);
}

BOOL sub_21F9A8C50(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v1 + 24) - 8) + 48))(a1, 1) != 1;
}

uint64_t sub_21F9A8CAC()
{
  return sub_21F9A91D0();
}

uint64_t *sub_21F9A8CC0(uint64_t *a1, uint64_t *a2)
{
  return sub_21F9A9278(a1, a2);
}

uint64_t sub_21F9A8CD4(uint64_t a1)
{
  return sub_21F9A935C(a1);
}

uint64_t sub_21F9A8CE8(uint64_t a1, uint64_t a2)
{
  return sub_21F9A93E8(a1, a2);
}

uint64_t sub_21F9A8CFC(uint64_t a1, uint64_t a2)
{
  return sub_21F9A9468(a1, a2);
}

uint64_t sub_21F9A8D10(uint64_t a1, uint64_t a2)
{
  return sub_21F9A94E8(a1, a2);
}

uint64_t sub_21F9A8D24(uint64_t a1, uint64_t a2)
{
  return sub_21F9A9568(a1, a2);
}

uint64_t sub_21F9A8D38(unsigned __int16 *a1, unsigned int a2)
{
  return sub_21F9A95E8(a1, a2);
}

void sub_21F9A8D4C(unsigned char *a1, uint64_t a2, unsigned int a3)
{
}

uint64_t type metadata accessor for CompactedSequence.Iterator()
{
  return sub_21F764F08();
}

uint64_t sub_21F9A8D78()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_21F9A8E08(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_21F9A8F64(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x21F9A917CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for CompactedSequence()
{
  return sub_21F764F08();
}

uint64_t sub_21F9A91BC()
{
  return sub_21F9A91D0();
}

uint64_t sub_21F9A91D0()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21F9A9264(uint64_t *a1, uint64_t *a2)
{
  return sub_21F9A9278(a1, a2);
}

uint64_t *sub_21F9A9278(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7
    && *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t sub_21F9A9348(uint64_t a1)
{
  return sub_21F9A935C(a1);
}

uint64_t sub_21F9A935C(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

uint64_t sub_21F9A93D4(uint64_t a1, uint64_t a2)
{
  return sub_21F9A93E8(a1, a2);
}

uint64_t sub_21F9A93E8(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_21F9A9454(uint64_t a1, uint64_t a2)
{
  return sub_21F9A9468(a1, a2);
}

uint64_t sub_21F9A9468(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_21F9A94D4(uint64_t a1, uint64_t a2)
{
  return sub_21F9A94E8(a1, a2);
}

uint64_t sub_21F9A94E8(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_21F9A9554(uint64_t a1, uint64_t a2)
{
  return sub_21F9A9568(a1, a2);
}

uint64_t sub_21F9A9568(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_21F9A95D4(unsigned __int16 *a1, unsigned int a2)
{
  return sub_21F9A95E8(a1, a2);
}

uint64_t sub_21F9A95E8(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v7 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v9 = ((a2 - v5 + ~(-1 << v7)) >> v7) + 1;
    if (HIWORD(v9))
    {
      int v8 = *(_DWORD *)((char *)a1 + v6);
      if (!v8) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 < 2)
    {
LABEL_19:
      if (v5)
      {
        int v11 = *(uint64_t (**)(unsigned __int16 *))(v4 + 48);
        return v11(a1);
      }
      return 0;
    }
  }
  int v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v10 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v10 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v10) + 1;
}

void sub_21F9A978C(unsigned char *a1, uint64_t a2, unsigned int a3)
{
}

void sub_21F9A97A0(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (a3 <= v7)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v8)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        return;
      default:
        return;
    }
  }
  switch(v9)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x21F9A99D8);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unsigned int v14 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
        v14(a1, a2);
      }
      return;
  }
}

uint64_t sub_21F9A9A00()
{
  uint64_t AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *sub_21F9A9AF0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (*(unsigned char *)(v6 + 80) | *(unsigned char *)(v9 + 80));
  if (v12 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (v11 & (unint64_t)~v10) + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) > 0x18)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    uint64_t v16 = AssociatedTypeWitness;
    uint64_t v17 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v17, ((unint64_t)a2 + v11) & v17, v16);
  }
  return a1;
}

uint64_t sub_21F9A9C74(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(uint64_t, void))v3)(a1, *(void *)(a2 + 16));
  uint64_t v4 = *(void *)(v3 + 56) + a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(uint64_t (**)(unint64_t, uint64_t))(v6 + 8);
  uint64_t v8 = AssociatedTypeWitness;
  unint64_t v9 = (v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v9, v8);
}

uint64_t sub_21F9A9D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_21F9A9E14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_21F9A9EE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_21F9A9FBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_21F9AA090(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v7) {
    unsigned int v11 = v7;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (!a2) {
    return 0;
  }
  uint64_t v13 = *(void *)(v6 + 64) + v12;
  if (a2 <= v11) {
    goto LABEL_24;
  }
  uint64_t v14 = (v13 & ~v12) + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v17 = ((a2 - v11 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v17 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v17 < 2)
    {
LABEL_24:
      if (v11)
      {
        if (v7 >= v10)
        {
          uint64_t v23 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
          return v23(a1, v7, v5);
        }
        else
        {
          uint64_t v21 = *(uint64_t (**)(unint64_t))(v9 + 48);
          return v21(((unint64_t)a1 + v13) & ~v12);
        }
      }
      return 0;
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_24;
  }
LABEL_14:
  int v18 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v18 = 0;
  }
  if (v14)
  {
    if (v14 <= 3) {
      int v19 = v14;
    }
    else {
      int v19 = 4;
    }
    switch(v19)
    {
      case 2:
        int v20 = *a1;
        break;
      case 3:
        int v20 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v20 = *(_DWORD *)a1;
        break;
      default:
        int v20 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v20 = 0;
  }
  return v11 + (v20 | v18) + 1;
}

void sub_21F9AA328(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v29 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v11 = v10;
  unsigned int v12 = *(_DWORD *)(v10 + 84);
  if (v12 <= v9) {
    unsigned int v13 = v9;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(v8 + 64) + v14;
  size_t v16 = *(void *)(v10 + 64);
  size_t v17 = (v15 & ~v14) + v16;
  if (a3 <= v13)
  {
    int v18 = 0;
  }
  else if (v17 <= 3)
  {
    unsigned int v21 = ((a3 - v13 + ~(-1 << (8 * v17))) >> (8 * v17)) + 1;
    if (HIWORD(v21))
    {
      int v18 = 4;
    }
    else if (v21 >= 0x100)
    {
      int v18 = 2;
    }
    else
    {
      int v18 = v21 > 1;
    }
  }
  else
  {
    int v18 = 1;
  }
  if (v13 < a2)
  {
    unsigned int v19 = ~v13 + a2;
    if (v17 < 4)
    {
      int v20 = (v19 >> (8 * v17)) + 1;
      if (v17)
      {
        int v22 = v19 & ~(-1 << (8 * v17));
        bzero(a1, v17);
        if (v17 == 3)
        {
          *(_WORD *)a1 = v22;
          a1[2] = BYTE2(v22);
        }
        else if (v17 == 2)
        {
          *(_WORD *)a1 = v22;
        }
        else
        {
          *a1 = v22;
        }
      }
    }
    else
    {
      bzero(a1, (v15 & ~v14) + v16);
      *(_DWORD *)a1 = v19;
      int v20 = 1;
    }
    switch(v18)
    {
      case 1:
        a1[v17] = v20;
        return;
      case 2:
        *(_WORD *)&a1[v17] = v20;
        return;
      case 3:
        goto LABEL_54;
      case 4:
        *(_DWORD *)&a1[v17] = v20;
        return;
      default:
        return;
    }
  }
  switch(v18)
  {
    case 1:
      a1[v17] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v17] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_54:
      __break(1u);
      JUMPOUT(0x21F9AA6D0);
    case 4:
      *(_DWORD *)&a1[v17] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v9 >= v12)
        {
          uint64_t v27 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v29 + 56);
          v27(a1, a2, v9, v7);
        }
        else
        {
          uint64_t v23 = (unsigned char *)((unint64_t)&a1[v15] & ~v14);
          if (v12 >= a2)
          {
            uint64_t v28 = *(void (**)(unsigned char *, uint64_t))(v11 + 56);
            v28(v23, a2);
          }
          else
          {
            if (v16 <= 3) {
              int v24 = ~(-1 << (8 * v16));
            }
            else {
              int v24 = -1;
            }
            if (v16)
            {
              int v25 = v24 & (~v12 + a2);
              if (v16 <= 3) {
                int v26 = v16;
              }
              else {
                int v26 = 4;
              }
              bzero(v23, v16);
              switch(v26)
              {
                case 2:
                  *(_WORD *)uint64_t v23 = v25;
                  break;
                case 3:
                  *(_WORD *)uint64_t v23 = v25;
                  void v23[2] = BYTE2(v25);
                  break;
                case 4:
                  *(_DWORD *)uint64_t v23 = v25;
                  break;
                default:
                  unsigned char *v23 = v25;
                  break;
              }
            }
          }
        }
      }
      return;
  }
}

uint64_t type metadata accessor for CompactedCollection()
{
  return sub_21F764F08();
}

uint64_t sub_21F9AA720(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned __int8 *)(result + 1) << 8 == 512)
  {
    uint64_t v4 = (_WORD *)result;
    nullsub_1(a3, a4);
    uint64_t result = sub_21F773654();
    *uint64_t v4 = result & 0x1FF;
  }
  return result;
}

uint64_t sub_21F9AA780(unint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if (a3 < 0)
  {
    unint64_t v12 = a1;
    if (a3)
    {
      if ((a1 & 0x7FF0000000000000) != 0x7FF0000000000000)
      {
        if (*(unsigned char *)(v5 + 40))
        {
          double v13 = *(double *)&a1;
        }
        else
        {
          double v13 = *(double *)(v5 + 24);
          if (v13 >= *(double *)&a1) {
            double v13 = *(double *)&a1;
          }
          if (*(double *)(v5 + 32) >= *(double *)&a1) {
            unint64_t v12 = *(void *)(v5 + 32);
          }
        }
        *(double *)(v5 + 24) = v13;
        *(void *)(v5 + 32) = v12;
        *(unsigned char *)(v5 + 40) = 0;
      }
      if ((~a2 & 0x7FF0000000000000) != 0)
      {
        if (*(unsigned char *)(v5 + 40))
        {
          *(void *)(v5 + 24) = a2;
          *(void *)(v5 + 32) = a2;
        }
        else
        {
          float64x2_t v18 = *(float64x2_t *)(v5 + 24);
          float64x2_t v19 = (float64x2_t)vdupq_lane_s64(a2, 0);
          v20.i64[0] = vmovn_s64(vcgtq_f64(v19, v18)).i32[0];
          v20.i64[1] = vmovn_s64(vcgeq_f64(v18, v19)).i32[1];
          *(int8x16_t *)(v5 + 24) = vbslq_s8(v20, (int8x16_t)v18, (int8x16_t)v19);
        }
        *(unsigned char *)(v5 + 40) = 0;
      }
    }
    else
    {
      if ((a1 & 0x7FF0000000000000) != 0x7FF0000000000000)
      {
        if (*(unsigned char *)(v5 + 16))
        {
          *(double *)uint64_t v5 = *(double *)&a1;
          *(double *)(v5 + 8) = *(double *)&a1;
        }
        else
        {
          float64x2_t v14 = (float64x2_t)vdupq_lane_s64(a1, 0);
          v15.i64[0] = vmovn_s64(vcgtq_f64(v14, *(float64x2_t *)v5)).i32[0];
          v15.i64[1] = vmovn_s64(vcgeq_f64(*(float64x2_t *)v5, v14)).i32[1];
          *(int8x16_t *)uint64_t v5 = vbslq_s8(v15, *(int8x16_t *)v5, (int8x16_t)v14);
        }
        *(unsigned char *)(v5 + 16) = 0;
      }
      if ((~a2 & 0x7FF0000000000000) != 0)
      {
        if (*(unsigned char *)(v5 + 16))
        {
          *(void *)uint64_t v5 = a2;
          *(void *)(v5 + 8) = a2;
        }
        else
        {
          float64x2_t v16 = (float64x2_t)vdupq_lane_s64(a2, 0);
          v17.i64[0] = vmovn_s64(vcgtq_f64(v16, *(float64x2_t *)v5)).i32[0];
          v17.i64[1] = vmovn_s64(vcgeq_f64(*(float64x2_t *)v5, v16)).i32[1];
          *(int8x16_t *)uint64_t v5 = vbslq_s8(v17, *(int8x16_t *)v5, (int8x16_t)v16);
        }
        *(unsigned char *)(v5 + 16) = 0;
      }
    }
  }
  else
  {
    sub_21F7607AC(a1, a2, a3);
    sub_21F7622A4(a1, a2, a3);
    sub_21F770E38(a1, a2, a3);
  }

  return sub_21F9AA720(v5 + 64, a4, a4, a5);
}

__n128 sub_21F9AA930@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_21F764AF8(a1, (uint64_t)v59);
  sub_21F764AF8((uint64_t)v59, (uint64_t)v61);
  unint64_t v4 = MEMORY[0x263F8EE88];
  swift_bridgeObjectRelease();
  unint64_t v5 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRelease();
  long long v53 = 0uLL;
  char v54 = 1;
  long long v55 = 0uLL;
  char v56 = 1;
  v57.n128_u64[0] = v5;
  v57.n128_u64[1] = v4;
  __int16 v58 = 512;
  sub_21F764AF8(a1, (uint64_t)v60);
  switch(sub_21F7607A0((uint64_t)v60))
  {
    case 1u:
      uint64_t v29 = sub_21F7607C4((uint64_t)v60);
      sub_21F9AAD50(v29, (uint64_t)v52);
      break;
    case 2u:
      uint64_t v14 = sub_21F7607C4((uint64_t)v60);
      uint64_t v15 = *(void *)(v14 + 40);
      unint64_t v50 = *(void *)(v14 + 32);
      uint64_t v16 = *(void *)(v14 + 56);
      uint64_t v17 = *(void *)(v14 + 64);
      char v18 = *(unsigned char *)(v14 + 48);
      sub_21F764AF8((uint64_t)v61, (uint64_t)v52);
      uint64_t v19 = sub_21F7607C4((uint64_t)v52);
      uint64_t v20 = *(void *)(v19 + 32);
      uint64_t v21 = *(void *)(v19 + 40);
      char v22 = *(unsigned char *)(v19 + 48);
      sub_21F7652C0(*(void *)v19, *(void *)(v19 + 8), *(unsigned char *)(v19 + 16));
      swift_bridgeObjectRetain();
      sub_21F770E44(v20, v21, v22);
      sub_21F9AA780(v50, v15, v18, v16, v17);
      sub_21F83F3E8(a1);
      goto LABEL_6;
    case 3u:
      uint64_t v23 = sub_21F7607C4((uint64_t)v60);
      uint64_t v45 = *(void *)(v23 + 8);
      uint64_t v47 = *(void *)v23;
      unint64_t v24 = *(void *)(v23 + 32);
      uint64_t v51 = *(void *)(v23 + 40);
      uint64_t v38 = *(void *)(v23 + 64);
      uint64_t v39 = *(void *)(v23 + 56);
      uint64_t v25 = *(void *)(v23 + 80);
      uint64_t v35 = *(void *)(v23 + 72);
      unint64_t v37 = *(void *)(v23 + 104);
      uint64_t v36 = *(void *)(v23 + 112);
      uint64_t v41 = *(void *)(v23 + 128);
      uint64_t v40 = *(void *)(v23 + 136);
      char v43 = *(unsigned char *)(v23 + 16) & 1;
      char v26 = *(unsigned char *)(v23 + 88) & 1;
      char v27 = *(unsigned char *)(v23 + 48);
      char v28 = *(unsigned char *)(v23 + 120);
      sub_21F7652C0(*(void *)v23, v45, v43);
      swift_bridgeObjectRetain();
      sub_21F770E44(v24, v51, v27);
      sub_21F7652C0(v35, v25, v26);
      swift_bridgeObjectRetain();
      sub_21F770E44(v37, v36, v28);
      sub_21F9AA780(v24, v51, v27, v39, v38);
      sub_21F9AA780(v37, v36, v28, v41, v40);
      sub_21F7656A8(v35, v25, v26);
      swift_bridgeObjectRelease();
      sub_21F770E38(v37, v36, v28);
      sub_21F7656A8(v47, v45, v43);
      swift_bridgeObjectRelease();
      sub_21F770E38(v24, v51, v27);
LABEL_6:
      sub_21F83F3E8(a1);
      break;
    case 4u:
      sub_21F7607C4((uint64_t)v60);
      break;
    case 5u:
      sub_21F7607C4((uint64_t)v60);
      sub_21FA266E0();
      __break(1u);
      JUMPOUT(0x21F9AAD38);
    default:
      uint64_t v6 = sub_21F7607C4((uint64_t)v60);
      uint64_t v48 = *(void *)(v6 + 40);
      unint64_t v49 = *(void *)(v6 + 32);
      uint64_t v44 = *(void *)(v6 + 64);
      uint64_t v46 = *(void *)(v6 + 56);
      char v42 = *(unsigned char *)(v6 + 48);
      sub_21F764AF8((uint64_t)v61, (uint64_t)v52);
      uint64_t v7 = sub_21F7607C4((uint64_t)v52);
      uint64_t v8 = *(void *)v7;
      uint64_t v9 = *(void *)(v7 + 8);
      char v10 = *(unsigned char *)(v7 + 16);
      uint64_t v11 = *(void *)(v7 + 32);
      uint64_t v12 = *(void *)(v7 + 40);
      char v13 = *(unsigned char *)(v7 + 48);
      sub_21F7652C0(*(void *)v7, v9, v10);
      swift_bridgeObjectRetain();
      sub_21F770E44(v11, v12, v13);
      sub_21F9AA780(v49, v48, v42, v46, v44);
      sub_21F83F3E8(a1);
      sub_21F7656A8(v8, v9, v10);
      swift_bridgeObjectRelease();
      sub_21F770E38(v11, v12, v13);
      break;
  }
  char v30 = v54;
  char v31 = v56;
  __int16 v32 = v58;
  __n128 result = v57;
  long long v34 = v55;
  *(_OWORD *)a2 = v53;
  *(unsigned char *)(a2 + 16) = v30;
  *(_OWORD *)(a2 + 24) = v34;
  *(unsigned char *)(a2 + 40) = v31;
  *(__n128 *)(a2 + 48) = result;
  *(_WORD *)(a2 + 64) = v32;
  return result;
}

uint64_t sub_21F9AAD50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21F76CA40(&qword_26AD455C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for PlottedValueLayoutContext()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PlottedValueLayoutContext(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v3;
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  uint64_t v4 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v4;
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  uint64_t v5 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v5;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PlottedValueLayoutContext(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(_OWORD *)a1 = v4;
  long long v5 = *(long long *)((char *)a2 + 24);
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 64) = *((_WORD *)a2 + 32);
  long long v6 = *(long long *)((char *)a2 + 72);
  *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
  *(_OWORD *)(a1 + 72) = v6;
  long long v7 = a2[6];
  *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
  *(_OWORD *)(a1 + 96) = v7;
  *(void *)(a1 + 120) = *((void *)a2 + 15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *((void *)a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 136) = *((_WORD *)a2 + 68);
  long long v8 = a2[9];
  *(unsigned char *)(a1 + 160) = *((unsigned char *)a2 + 160);
  *(_OWORD *)(a1 + 144) = v8;
  long long v9 = *(long long *)((char *)a2 + 168);
  *(unsigned char *)(a1 + 184) = *((unsigned char *)a2 + 184);
  *(_OWORD *)(a1 + 168) = v9;
  *(void *)(a1 + 192) = *((void *)a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *((void *)a2 + 25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 208) = *((_WORD *)a2 + 104);
  return a1;
}

__n128 initializeWithTake for PlottedValueLayoutContext(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v11 = *(_OWORD *)(a2 + 192);
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for PlottedValueLayoutContext(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlottedValueLayoutContext(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 210)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlottedValueLayoutContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 208) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 210) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 210) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlottedValueLayoutContext()
{
  return &type metadata for PlottedValueLayoutContext;
}

uint64_t static BuilderTuple<each A>._layoutAxisMark(_:_:)(uint64_t TupleTypeMetadata, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = a3;
  long long v8 = (void *)(a4 & 0xFFFFFFFFFFFFFFFELL);
  if (a3 != 1)
  {
    MEMORY[0x270FA5388](TupleTypeMetadata);
    long long v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
    {
      unint64_t v11 = 0;
      if (v6 < 4) {
        goto LABEL_8;
      }
      if ((unint64_t)(v10 - (char *)v8) < 0x20) {
        goto LABEL_8;
      }
      unint64_t v11 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v12 = (long long *)(v8 + 2);
      char v13 = v10 + 16;
      unint64_t v14 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *char v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v11 != v6)
      {
LABEL_8:
        unint64_t v16 = v6 - v11;
        uint64_t v17 = v11;
        char v18 = &v10[8 * v11];
        uint64_t v19 = &v8[v17];
        do
        {
          uint64_t v20 = *v19++;
          *(void *)char v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  __n128 v21 = MEMORY[0x270FA5388](TupleTypeMetadata);
  uint64_t v48 = *a2;
  unint64_t v49 = (char *)&v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = 0;
  uint64_t v45 = v24;
  uint64_t v46 = v23;
  (*(void (**)(__n128))(v24 + 16))(v21);
  if (!v6) {
    return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v49, v46);
  }
  uint64_t result = swift_beginAccess();
  uint64_t v26 = 0;
  char v27 = (uint64_t *)(a5 & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v28 = v6;
  unint64_t v47 = v6;
  uint64_t v29 = v48;
  while (1)
  {
    unint64_t v51 = v28;
    unint64_t v50 = &v44;
    uint64_t v30 = *v8;
    uint64_t v31 = *(void *)(*v8 - 8);
    uint64_t v54 = *v27;
    uint64_t v32 = v31;
    __n128 v34 = MEMORY[0x270FA5388](result);
    uint64_t v36 = (char *)&v44 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v52 = v33;
    long long v53 = v8;
    int v37 = v6 == 1 ? 0 : *v33;
    (*(void (**)(char *, char *, uint64_t, __n128))(v32 + 16))(v36, &v49[v37], v30, v34);
    uint64_t v38 = *(void *)(v29 + 16);
    uint64_t v39 = *(void *)(v38 + 16);
    uint64_t v40 = *(void *)(v39 + 32);
    swift_retain();
    uint64_t v41 = sub_21F76633C(v26, v40);
    uint64_t v42 = *(void *)(v39 + 32);
    *(void *)(v39 + 32) = v41;
    uint64_t v43 = *(void *)(v38 + 24);
    *(void *)(v38 + 24) = v41;
    uint64_t v55 = v29;
    (*(void (**)(char *, uint64_t *, uint64_t))(v54 + 8))(v36, &v55, v30);
    *(void *)(v38 + 24) = v43;
    *(void *)(v39 + 32) = v42;
    swift_release();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v36, v30);
    uint64_t v26 = v56 + 1;
    if (__OFADD__(v56, 1)) {
      break;
    }
    ++v56;
    ++v27;
    long long v8 = v53 + 1;
    unint64_t v28 = v51 - 1;
    unint64_t v6 = v47;
    if (v51 == 1) {
      return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v49, v46);
    }
  }
  __break(1u);
  return result;
}

uint64_t static BuilderTuple<each A>._renderAxisMark(_:_:)@<X0>(uint64_t TupleTypeMetadata@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  unint64_t v7 = a3;
  uint64_t v59 = a6;
  uint64_t v9 = (void *)(a4 & 0xFFFFFFFFFFFFFFFELL);
  if (a3 == 1)
  {
    uint64_t v10 = *v9;
  }
  else
  {
    MEMORY[0x270FA5388](TupleTypeMetadata);
    uint64_t v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v7)
    {
      unint64_t v13 = 0;
      if (v7 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)(v12 - (char *)v9) < 0x20) {
        goto LABEL_9;
      }
      unint64_t v13 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v14 = (long long *)(v9 + 2);
      long long v15 = v12 + 16;
      unint64_t v16 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *long long v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != v7)
      {
LABEL_9:
        unint64_t v18 = v7 - v13;
        uint64_t v19 = v13;
        uint64_t v20 = &v12[8 * v13];
        __n128 v21 = &v9[v19];
        do
        {
          uint64_t v22 = *v21++;
          *(void *)uint64_t v20 = v22;
          v20 += 8;
          --v18;
        }
        while (v18);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v10 = TupleTypeMetadata;
  }
  __n128 v23 = MEMORY[0x270FA5388](TupleTypeMetadata);
  uint64_t v61 = *a2;
  uint64_t v62 = (char *)&v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = 0;
  uint64_t v57 = v25;
  (*(void (**)(__n128))(v25 + 16))(v23);
  uint64_t v26 = (char *)MEMORY[0x263F8EE78];
  uint64_t v58 = v10;
  if (v7)
  {
    uint64_t result = swift_beginAccess();
    uint64_t v28 = 0;
    uint64_t v29 = (uint64_t *)(a5 & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v30 = v7;
    unint64_t v60 = v7;
    while (1)
    {
      unint64_t v64 = v30;
      uint64_t v63 = &v57;
      int v66 = v9;
      uint64_t v31 = *v9;
      uint64_t v32 = *v29;
      __n128 v35 = MEMORY[0x270FA5388](result);
      int v37 = (char *)&v57 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v68 = v26;
      uint64_t v65 = v33;
      if (v7 == 1) {
        int v38 = 0;
      }
      else {
        int v38 = *v33;
      }
      uint64_t v67 = v34;
      (*(void (**)(char *, char *, uint64_t, __n128))(v34 + 16))(v37, &v62[v38], v31, v35);
      uint64_t v39 = v61;
      uint64_t v40 = *(void *)(v61 + 16);
      uint64_t v41 = *(void *)(v40 + 16);
      uint64_t v42 = *(void *)(v41 + 32);
      swift_retain();
      uint64_t v43 = sub_21F76633C(v28, v42);
      uint64_t v44 = *(void *)(v41 + 32);
      *(void *)(v41 + 32) = v43;
      uint64_t v45 = *(void *)(v40 + 24);
      *(void *)(v40 + 24) = v43;
      uint64_t v69 = v39;
      (*(void (**)(uint64_t *__return_ptr, char *, uint64_t *, uint64_t, uint64_t))(v32 + 16))(&v70, v37, &v69, v31, v32);
      *(void *)(v40 + 24) = v45;
      *(void *)(v41 + 32) = v44;
      swift_release();
      uint64_t v46 = v70;
      uint64_t v26 = v68;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v26 = sub_21F76B18C(0, *((void *)v26 + 2) + 1, 1, v26);
      }
      unint64_t v48 = *((void *)v26 + 2);
      unint64_t v47 = *((void *)v26 + 3);
      unint64_t v7 = v60;
      if (v48 >= v47 >> 1) {
        uint64_t v26 = sub_21F76B18C((char *)(v47 > 1), v48 + 1, 1, v26);
      }
      *((void *)v26 + 2) = v48 + 1;
      *(void *)&v26[8 * v48 + 32] = v46;
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v37, v31);
      uint64_t v28 = v71 + 1;
      if (__OFADD__(v71, 1)) {
        break;
      }
      ++v71;
      ++v29;
      uint64_t v9 = v66 + 1;
      unint64_t v30 = v64 - 1;
      if (v64 == 1) {
        goto LABEL_23;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_23:
    unint64_t v49 = (int *)type metadata accessor for SgGroup(0);
    uint64_t v50 = swift_allocBox();
    uint64_t v52 = v51;
    uint64_t v53 = *(void *)(*(void *)(v61 + 16) + 24);
    uint64_t v54 = (char *)v51 + v49[6];
    uint64_t v55 = type metadata accessor for SgClipRect(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v54, 1, 1, v55);
    *uint64_t v52 = v53;
    v52[1] = v26;
    *(void *)((char *)v52 + v49[7]) = 0x3FF0000000000000;
    *(void *)((char *)v52 + v49[8]) = 0;
    *(void *)((char *)v52 + v49[9]) = MEMORY[0x263F8EE78];
    *((unsigned char *)v52 + v49[10]) = 0;
    uint64_t v56 = v58;
    *uint64_t v59 = v50;
    return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v62, v56);
  }
  return result;
}

uint64_t sub_21F9ABA7C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static BuilderTuple<each A>._layoutAxisMark(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8));
}

uint64_t sub_21F9ABA8C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return static BuilderTuple<each A>._renderAxisMark(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8), a5);
}

ValueMetadata *type metadata accessor for AxisMarkBuilder()
{
  return &type metadata for AxisMarkBuilder;
}

void static BuilderPair<>._makeAxisContent(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for BuilderPair();
  uint64_t v12 = *(void *)(v11 + 8);
  sub_21F7F7204();
  if (v13)
  {
    unint64_t v14 = sub_21F952A60(v11, v12, (char *)(v11 + 8 * *(unsigned int *)(v13 + 24)), (char *)(v11 + 16));
    MEMORY[0x270FA5388](v14);
    _OWORD v17[2] = a3;
    v17[3] = a4;
    v17[4] = a5;
    void v17[5] = a6;
    v17[6] = v15;
    sub_21F74C95C(a1, (uint64_t)sub_21F9ABDDC, (uint64_t)v17, v11, MEMORY[0x263F8E628], (uint64_t)&type metadata for _AxisContentOutputs, MEMORY[0x263F8E658], v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_21F9ABD38@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = MEMORY[0x263F8EE78];
  uint64_t v12 = MEMORY[0x263F8EE78];
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v7 = result;
    uint64_t v8 = swift_bridgeObjectRetain();
    uint64_t v9 = (uint64_t *)(a2 + 48);
    do
    {
      uint64_t v10 = *(v9 - 2);
      uint64_t v11 = *v9;
      v9 += 3;
      uint64_t v8 = sub_21F9ABE28(v8, v10, *(void *)(v7 + v11));
      --v5;
    }
    while (v5);
    uint64_t v4 = v12;
    uint64_t result = swift_bridgeObjectRelease();
  }
  *a3 = v4;
  return result;
}

uint64_t sub_21F9ABDDC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_21F9ABD38(a1, *(void *)(v2 + 48), a2);
}

void sub_21F9ABE04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_21F9ABE14()
{
  qword_26AD51F70 = MEMORY[0x263F8EE80];
}

uint64_t sub_21F9ABE28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a2 - 8);
  __n128 v8 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t, __n128))(v7 + 16))(v10, *v4 + v4[1], a2, v8);
  (*(void (**)(uint64_t *__return_ptr, char *))(a3 + 8))(&v13, v10);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, a2);
  return sub_21F9ED580(v13);
}

uint64_t View.chartScrollableAxes(_:)(char a1)
{
  swift_getKeyPath();
  *(unsigned char *)(swift_allocObject() + 16) = a1;
  sub_21FA25480();
  swift_release();

  return swift_release();
}

uint64_t sub_21F9ABFF8()
{
  sub_21F7454F4();

  return sub_21FA24B40();
}

uint64_t sub_21F9AC040()
{
  return sub_21FA24B40();
}

uint64_t sub_21F9AC080(uint64_t a1)
{
  sub_21F79B380(a1, (uint64_t)v3);
  sub_21F79B380((uint64_t)v3, (uint64_t)&v2);
  sub_21F7454F4();
  sub_21FA24B50();
  return sub_21F7794A0((uint64_t)v3);
}

uint64_t sub_21F9AC0E4()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

unsigned char *sub_21F9AC0F4(unsigned char *result)
{
  *uint64_t result = *(unsigned char *)(v1 + 16);
  return result;
}

uint64_t View.chartXVisibleDomain<A>(length:start:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.chartXVisibleDomain<A>(length:)(a1, a3, a4, a5, a6);
}

uint64_t View.chartXVisibleDomain<A>(length:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_21F9AC1A8(a1, a2, a3, a4, a5);
}

uint64_t View.chartYVisibleDomain<A>(length:start:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.chartYVisibleDomain<A>(length:)(a1, a3, a4, a5, a6);
}

uint64_t View.chartYVisibleDomain<A>(length:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_21F9AC1A8(a1, a2, a3, a4, a5);
}

uint64_t sub_21F9AC1A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = sub_21F76C248(a1, a3, a5);
  uint64_t v7 = v5;
  if (v8 >= 2u)
  {
    sub_21F7654F0(v5, v6, 2);
    uint64_t result = sub_21FA266E0();
    __break(1u);
  }
  else
  {
    swift_getKeyPath();
    *(void *)(swift_allocObject() + 16) = v7;
    sub_21FA25480();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t View.chartScrollTargetBehavior<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_21F9AC5E0(a1, a2, a3, a4, a5, (uint64_t)sub_21F9B37A0, a6);
}

uint64_t sub_21F9AC2F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v11[3] = a4;
  v11[4] = a6;
  uint64_t v9 = sub_21F77E8F8(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(v9, a2, a4);
  return sub_21F799B78((uint64_t)v11, a1 + 40, &qword_26AD47B88);
}

uint64_t View.chartScrollPosition<A>(initialX:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_21F9AC5E0(a1, a2, a3, a4, a5, (uint64_t)sub_21F9B382C, a6);
}

uint64_t sub_21F9AC3A4()
{
  sub_21F9BED04();

  return sub_21FA24B40();
}

uint64_t sub_21F9AC3EC()
{
  return sub_21FA24B40();
}

uint64_t sub_21F9AC42C(uint64_t a1)
{
  sub_21F9BECCC(a1, (uint64_t)v3);
  sub_21F9BECCC((uint64_t)v3, (uint64_t)&v2);
  sub_21F9BED04();
  sub_21FA24B50();
  return sub_21F9BED58((uint64_t)v3);
}

uint64_t View.chartScrollPosition<A>(x:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_21F9AC770(a1, a2, a3, a4, a5, (uint64_t)sub_21F9B38BC, a6);
}

uint64_t sub_21F9AC4B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21FA25780();
  __n128 v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v10[-v6];
  (*(void (**)(unsigned char *, uint64_t, __n128))(v8 + 16))(&v10[-v6], a2, v5);
  sub_21FA00954((uint64_t)v7, (uint64_t)v10);
  v10[41] = 1;
  return sub_21F799B78((uint64_t)v10, a1, &qword_26AD46A18);
}

uint64_t View.chartScrollPosition<A>(initialY:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_21F9AC5E0(a1, a2, a3, a4, a5, (uint64_t)sub_21F9B3960, a6);
}

uint64_t sub_21F9AC5E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  _OWORD v17[2] = a6;
  v17[1] = a7;
  uint64_t v12 = *(void *)(a3 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x270FA5388](a1);
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a3);
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = (char *)swift_allocObject();
  *((void *)v15 + 2) = a2;
  *((void *)v15 + 3) = a3;
  *((void *)v15 + 4) = a4;
  *((void *)v15 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v15[v14], (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  sub_21FA25480();
  swift_release();
  return swift_release();
}

uint64_t View.chartScrollPosition<A>(y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_21F9AC770(a1, a2, a3, a4, a5, (uint64_t)sub_21F9B3AE8, a6);
}

uint64_t sub_21F9AC770@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  v19[2] = a6;
  v19[0] = a5;
  v19[1] = a7;
  uint64_t v11 = sub_21FA25780();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  unint64_t v14 = (char *)v19 - v13;
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  unint64_t v15 = (*(unsigned __int8 *)(v12 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = a2;
  *((void *)v16 + 3) = a3;
  uint64_t v17 = v19[0];
  *((void *)v16 + 4) = a4;
  *((void *)v16 + 5) = v17;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v16[v15], v14, v11);
  sub_21FA25480();
  swift_release();
  return swift_release();
}

uint64_t sub_21F9AC8F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21FA25780();
  __n128 v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v10[-v6];
  (*(void (**)(unsigned char *, uint64_t, __n128))(v8 + 16))(&v10[-v6], a2, v5);
  sub_21FA00954((uint64_t)v7, (uint64_t)v10);
  v10[41] = 1;
  return sub_21F799B78((uint64_t)v10, a1 + 48, &qword_26AD46A18);
}

uint64_t sub_21F9AC9F8@<X0>(char a1@<W0>, long long *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v6 = sub_21F76CA40(&qword_267EEA1D8);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v9 = type metadata accessor for ValueAlignedChartScrollTargetBehavior(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v13 = type metadata accessor for AutomaticScrollLimitModifier(0);
  unint64_t v14 = (uint64_t *)&a3[*(int *)(v13 + 24)];
  *unint64_t v14 = swift_getKeyPath();
  sub_21F76CA40(&qword_267EEA148);
  swift_storeEnumTagMultiPayload();
  unint64_t v15 = (uint64_t *)&a3[*(int *)(v13 + 28)];
  *unint64_t v15 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  *a3 = a1;
  sub_21F77F300(a2, (uint64_t)v21);
  sub_21F76CA40(&qword_267EEA1B8);
  char v16 = swift_dynamicCast();
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  if (v16)
  {
    v17(v8, 0, 1, v9);
    sub_21F9B3C14((uint64_t)v8, (uint64_t)v12, type metadata accessor for ValueAlignedChartScrollTargetBehavior);
    char v18 = v12[*(int *)(v9 + 32)];
    uint64_t result = sub_21F9B3DFC((uint64_t)v12, type metadata accessor for ValueAlignedChartScrollTargetBehavior);
  }
  else
  {
    v17(v8, 1, 1, v9);
    uint64_t result = sub_21F76CA84((uint64_t)v8, &qword_267EEA1D8);
    char v18 = 3;
  }
  a3[1] = v18;
  return result;
}

uint64_t sub_21F9ACC48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *))
{
  uint64_t v7 = sub_21F76CA40(&qword_26AD4A318);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F76C978(a1, (uint64_t)v9, &qword_26AD4A318);
  return a5(v9);
}

uint64_t sub_21F9ACCEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_21FA24E90();
  uint64_t v61 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v60 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_21F76CA40(&qword_267EEA1A8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v54 - v10;
  uint64_t v12 = sub_21F76CA40(&qword_26AD4A318);
  MEMORY[0x270FA5388](v12 - 8);
  MEMORY[0x270FA5388](v13);
  unint64_t v15 = (char *)&v54 - v14;
  MEMORY[0x270FA5388](v16);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v54 - v18;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v54 - v21;
  MEMORY[0x270FA5388](v23);
  char v27 = (char *)&v54 - v26;
  switch(*(unsigned char *)(v2 + 1))
  {
    case 1:
      sub_21FA24E40();
      goto LABEL_8;
    case 2:
      sub_21FA24E50();
LABEL_8:
      uint64_t v33 = sub_21FA24E60();
      uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56);
      uint64_t v35 = v33;
      uint64_t v36 = a1;
      uint64_t v37 = 0;
      goto LABEL_10;
    case 3:
      uint64_t v38 = sub_21FA24E60();
      uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56);
      uint64_t v35 = v38;
      uint64_t v36 = a1;
      uint64_t v37 = 1;
LABEL_10:
      return v34(v36, v37, 1, v35);
    default:
      uint64_t v57 = v8;
      uint64_t v58 = v25;
      uint64_t v56 = v24;
      uint64_t v59 = a1;
      unsigned __int8 v28 = sub_21FA250F0();
      sub_21FA25100();
      if (sub_21FA25100() != v28) {
        goto LABEL_17;
      }
      type metadata accessor for AutomaticScrollLimitModifier(0);
      sub_21FA1B540((uint64_t)v27);
      uint64_t v29 = v61;
      (*(void (**)(char *, void, uint64_t))(v61 + 104))(v22, *MEMORY[0x263F19F00], v4);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v22, 0, 1, v4);
      uint64_t v30 = (uint64_t)&v11[*(int *)(v6 + 48)];
      sub_21F76C978((uint64_t)v27, (uint64_t)v11, &qword_26AD4A318);
      uint64_t v55 = v30;
      sub_21F76C978((uint64_t)v22, v30, &qword_26AD4A318);
      uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
      if (v31((uint64_t)v11, 1, v4) == 1)
      {
        sub_21F76CA84((uint64_t)v22, &qword_26AD4A318);
        sub_21F76CA84((uint64_t)v27, &qword_26AD4A318);
        if (v31(v55, 1, v4) == 1)
        {
          uint64_t v32 = (uint64_t)v11;
LABEL_21:
          sub_21F76CA84(v32, &qword_26AD4A318);
          goto LABEL_26;
        }
        goto LABEL_15;
      }
      sub_21F76C978((uint64_t)v11, (uint64_t)v19, &qword_26AD4A318);
      if (v31(v55, 1, v4) == 1)
      {
        sub_21F76CA84((uint64_t)v22, &qword_26AD4A318);
        sub_21F76CA84((uint64_t)v27, &qword_26AD4A318);
        (*(void (**)(char *, uint64_t))(v61 + 8))(v19, v4);
LABEL_15:
        sub_21F76CA84((uint64_t)v11, &qword_267EEA1A8);
        goto LABEL_17;
      }
      uint64_t v40 = v61;
      (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(v60, v55, v4);
      sub_21F9BEB30(&qword_267EEA1B0, MEMORY[0x263F19F18]);
      LODWORD(v55) = sub_21FA25CE0();
      uint64_t v41 = *(void (**)(char *, uint64_t))(v40 + 8);
      v41(v60, v4);
      sub_21F76CA84((uint64_t)v22, &qword_26AD4A318);
      sub_21F76CA84((uint64_t)v27, &qword_26AD4A318);
      v41(v19, v4);
      sub_21F76CA84((uint64_t)v11, &qword_26AD4A318);
      if (v55)
      {
LABEL_26:
        uint64_t v52 = v59;
        sub_21FA24E40();
        goto LABEL_28;
      }
LABEL_17:
      unsigned __int8 v42 = sub_21FA25110();
      sub_21FA25100();
      if (sub_21FA25100() != v42) {
        goto LABEL_27;
      }
      type metadata accessor for AutomaticScrollLimitModifier(0);
      uint64_t v43 = v58;
      sub_21FA1B540(v58);
      uint64_t v44 = v61;
      (*(void (**)(char *, void, uint64_t))(v61 + 104))(v15, *MEMORY[0x263F19F00], v4);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v15, 0, 1, v4);
      uint64_t v45 = (uint64_t)v57;
      uint64_t v46 = (uint64_t)&v57[*(int *)(v6 + 48)];
      sub_21F76C978(v43, (uint64_t)v57, &qword_26AD4A318);
      sub_21F76C978((uint64_t)v15, v46, &qword_26AD4A318);
      unint64_t v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48);
      if (v47(v45, 1, v4) == 1)
      {
        sub_21F76CA84((uint64_t)v15, &qword_26AD4A318);
        sub_21F76CA84(v43, &qword_26AD4A318);
        if (v47(v46, 1, v4) == 1)
        {
          uint64_t v32 = v45;
          goto LABEL_21;
        }
        goto LABEL_24;
      }
      uint64_t v48 = v56;
      sub_21F76C978(v45, v56, &qword_26AD4A318);
      if (v47(v46, 1, v4) == 1)
      {
        sub_21F76CA84((uint64_t)v15, &qword_26AD4A318);
        sub_21F76CA84(v58, &qword_26AD4A318);
        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v48, v4);
LABEL_24:
        sub_21F76CA84(v45, &qword_267EEA1A8);
        goto LABEL_27;
      }
      unint64_t v49 = v60;
      (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v60, v46, v4);
      sub_21F9BEB30(&qword_267EEA1B0, MEMORY[0x263F19F18]);
      char v50 = sub_21FA25CE0();
      unint64_t v51 = *(void (**)(char *, uint64_t))(v44 + 8);
      v51(v49, v4);
      sub_21F76CA84((uint64_t)v15, &qword_26AD4A318);
      sub_21F76CA84(v58, &qword_26AD4A318);
      v51((char *)v48, v4);
      sub_21F76CA84(v45, &qword_26AD4A318);
      if (v50) {
        goto LABEL_26;
      }
LABEL_27:
      uint64_t v52 = v59;
      sub_21FA24E50();
LABEL_28:
      uint64_t v53 = sub_21FA24E60();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v52, 0, 1, v53);
  }
}

uint64_t sub_21F9AD57C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v28 = a2;
  uint64_t v2 = sub_21F76CA40(&qword_267EEA180);
  uint64_t v24 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_21F76CA40(&qword_267EEA188);
  MEMORY[0x270FA5388](v25);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_21F76CA40(&qword_267EEA190);
  uint64_t v7 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_21F76CA40(&qword_267EEA198);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_21FA24E60();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F9ACCEC((uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_21F76CA84((uint64_t)v12, &qword_267EEA198);
    uint64_t v17 = v24;
    uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
    v18(v4, v26, v2);
    v18(v6, (uint64_t)v4, v2);
    swift_storeEnumTagMultiPayload();
    uint64_t v19 = sub_21F779E60(&qword_267EEA1A0, &qword_267EEA180);
    uint64_t v29 = v2;
    uint64_t v30 = v19;
    swift_getOpaqueTypeConformance2();
    sub_21FA24DC0();
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v4, v2);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    uint64_t v21 = sub_21F779E60(&qword_267EEA1A0, &qword_267EEA180);
    sub_21FA25430();
    uint64_t v22 = v27;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v6, v9, v27);
    swift_storeEnumTagMultiPayload();
    uint64_t v29 = v2;
    uint64_t v30 = v21;
    swift_getOpaqueTypeConformance2();
    sub_21FA24DC0();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v22);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
}

uint64_t ChartScrollTargetBehaviorContext.chartProxy.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ChartScrollTargetBehaviorContext(0);
  return sub_21F9B3CF4(v1 + *(int *)(v3 + 20), a1, (uint64_t (*)(void))type metadata accessor for ChartProxy);
}

uint64_t ChartScrollTargetBehaviorContext.subscript.getter()
{
  return swift_getAtKeyPath();
}

uint64_t sub_21F9ADA40(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = a1;
  uint64_t v3 = sub_21F76CA40(qword_26AD48608);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for ChartModel.Scenegraph();
  uint64_t v6 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ChartProxy();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_21FA250C0();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for ChartScrollTargetBehaviorContext(0);
  __n128 v16 = MEMORY[0x270FA5388](v20);
  uint64_t v18 = (char *)&v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v15, a2, v12, v16);
  swift_getKeyPath();
  sub_21FA25090();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v5, 1, v21) == 1)
  {
    sub_21F8B2304((uint64_t)v8);
    sub_21F76CA84((uint64_t)v5, qword_26AD48608);
  }
  else
  {
    sub_21F9B3C14((uint64_t)v5, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ChartModel.Scenegraph);
  }
  sub_21F9B3C14((uint64_t)v8, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ChartModel.Scenegraph);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v15, v12);
  sub_21F9B3C14((uint64_t)v11, (uint64_t)&v18[*(int *)(v20 + 20)], (uint64_t (*)(void))type metadata accessor for ChartProxy);
  ValueAlignedChartScrollTargetBehavior.updateTarget(_:context:)(v22, (uint64_t)v18);
  return sub_21F9B3DFC((uint64_t)v18, type metadata accessor for ChartScrollTargetBehaviorContext);
}

uint64_t sub_21F9ADD80(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = a1;
  uint64_t v3 = sub_21F76CA40(qword_26AD48608);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for ChartModel.Scenegraph();
  uint64_t v6 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ChartProxy();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_21FA250C0();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for ChartScrollTargetBehaviorContext(0);
  __n128 v16 = MEMORY[0x270FA5388](v22);
  uint64_t v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v15, a2, v12, v16);
  swift_getKeyPath();
  sub_21FA25090();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v5, 1, v23) == 1)
  {
    sub_21F8B2304((uint64_t)v8);
    sub_21F76CA84((uint64_t)v5, qword_26AD48608);
  }
  else
  {
    sub_21F9B3C14((uint64_t)v5, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ChartModel.Scenegraph);
  }
  sub_21F9B3C14((uint64_t)v8, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ChartModel.Scenegraph);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v15, v12);
  sub_21F9B3C14((uint64_t)v11, (uint64_t)&v18[*(int *)(v22 + 20)], (uint64_t (*)(void))type metadata accessor for ChartProxy);
  uint64_t v19 = v24[3];
  uint64_t v20 = v24[4];
  sub_21F77E0FC(v24, v19);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v20 + 16))(v25, v18, v19, v20);
  return sub_21F9B3DFC((uint64_t)v18, type metadata accessor for ChartScrollTargetBehaviorContext);
}

uint64_t ChartScrollTargetBehavior.updateTarget(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a4;
  uint64_t v24 = a1;
  uint64_t v25 = a3;
  uint64_t v5 = sub_21F76CA40(qword_26AD48608);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for ChartModel.Scenegraph();
  uint64_t v8 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ChartProxy();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_21FA250C0();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for ChartScrollTargetBehaviorContext(0);
  __n128 v18 = MEMORY[0x270FA5388](v22);
  uint64_t v20 = (char *)&v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))(v17, a2, v14, v18);
  swift_getKeyPath();
  sub_21FA25090();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v23) == 1)
  {
    sub_21F8B2304((uint64_t)v10);
    sub_21F76CA84((uint64_t)v7, qword_26AD48608);
  }
  else
  {
    sub_21F9B3C14((uint64_t)v7, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ChartModel.Scenegraph);
  }
  sub_21F9B3C14((uint64_t)v10, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ChartModel.Scenegraph);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v17, v14);
  sub_21F9B3C14((uint64_t)v13, (uint64_t)&v20[*(int *)(v22 + 20)], (uint64_t (*)(void))type metadata accessor for ChartProxy);
  (*(void (**)(uint64_t, char *, uint64_t))(v26 + 16))(v24, v20, v25);
  return sub_21F9B3DFC((uint64_t)v20, type metadata accessor for ChartScrollTargetBehaviorContext);
}

uint64_t sub_21F9AE444()
{
  return sub_21FA24B40();
}

uint64_t sub_21F9AE484(uint64_t a1)
{
  uint64_t v2 = sub_21F76CA40(qword_26AD48608);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v9 - v6;
  sub_21F76C978(a1, (uint64_t)&v9 - v6, qword_26AD48608);
  sub_21F76C978((uint64_t)v7, (uint64_t)v4, qword_26AD48608);
  sub_21F9BEC78();
  sub_21FA24B50();
  return sub_21F76CA84((uint64_t)v7, qword_26AD48608);
}

void static ValueAlignedLimitBehavior.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static ChartScrollTargetBehavior.valueAligned<A>(unit:majorAlignment:limitBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v23 = a6;
  type metadata accessor for MajorValueAlignment();
  uint64_t v13 = sub_21FA26340();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v23 - v15;
  __n128 v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a3) = *a3;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v21 + 16))(v20, a1, a4, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a2, v13);
  char v24 = (char)a3;
  return ValueAlignedChartScrollTargetBehavior.init<A>(unit:majorAlignment:limitBehavior:)((uint64_t)v20, (uint64_t)v16, &v24, a4, a5, a7);
}

uint64_t ValueAlignedChartScrollTargetBehavior.init<A>(unit:majorAlignment:limitBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for MajorValueAlignmentStorage(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v28 - v16;
  uint64_t v29 = type metadata accessor for ValueAlignment(0);
  uint64_t v18 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  uint64_t v20 = (uint64_t *)((char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v21 = *a3;
  sub_21F9B0AEC(a1, a4, a5, v20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a1, a4);
  sub_21F9B3C14((uint64_t)v20, a6, type metadata accessor for ValueAlignment);
  uint64_t v22 = (int *)type metadata accessor for ValueAlignedChartScrollTargetBehavior(0);
  sub_21F9B3CF4(a6, a6 + v22[5], type metadata accessor for ValueAlignment);
  uint64_t v23 = type metadata accessor for MajorValueAlignment();
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(a2, 1, v23) == 1)
  {
    uint64_t v25 = sub_21FA26340();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(a2, v25);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v17, 2, 2, v29);
  }
  else
  {
    sub_21F9B3CF4(a2, (uint64_t)v14, type metadata accessor for MajorValueAlignmentStorage);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(a2, v23);
    sub_21F9B3C14((uint64_t)v14, (uint64_t)v17, type metadata accessor for MajorValueAlignmentStorage);
  }
  uint64_t v26 = a6 + v22[6];
  sub_21F9B3C14((uint64_t)v17, v26, type metadata accessor for MajorValueAlignmentStorage);
  uint64_t result = sub_21F9B3CF4(v26, a6 + v22[7], type metadata accessor for MajorValueAlignmentStorage);
  *(unsigned char *)(a6 + v22[8]) = v21;
  return result;
}

uint64_t static ChartScrollTargetBehavior.valueAligned<>(matching:majorAlignment:limitBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_21F76CA40(&qword_267EEA078);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = sub_21FA23F20();
  __n128 v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = &v17[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  LOBYTE(a3) = *a3;
  (*(void (**)(unsigned char *, uint64_t, __n128))(v15 + 16))(v14, a1, v12);
  sub_21F76C978(a2, (uint64_t)v10, &qword_267EEA078);
  char v18 = (char)a3;
  return ValueAlignedChartScrollTargetBehavior.init(matching:majorAlignment:limitBehavior:)((uint64_t)v14, (uint64_t)v10, &v18, a4);
}

uint64_t ValueAlignedChartScrollTargetBehavior.init(matching:majorAlignment:limitBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for MajorValueAlignmentStorage(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v21 - v12;
  char v14 = *a3;
  uint64_t v15 = sub_21FA23F20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(a4, a1, v15);
  uint64_t v16 = type metadata accessor for ValueAlignment(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v17 = (int *)type metadata accessor for ValueAlignedChartScrollTargetBehavior(0);
  sub_21F9B3CF4(a4, a4 + v17[5], type metadata accessor for ValueAlignment);
  uint64_t v18 = sub_21F76CA40(&qword_267EEA080);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(a2, 1, v18) == 1)
  {
    sub_21F76CA84(a2, &qword_267EEA078);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v13, 2, 2, v16);
  }
  else
  {
    sub_21F9B3CF4(a2, (uint64_t)v10, type metadata accessor for MajorValueAlignmentStorage);
    sub_21F76CA84(a2, &qword_267EEA080);
    sub_21F9B3C14((uint64_t)v10, (uint64_t)v13, type metadata accessor for MajorValueAlignmentStorage);
  }
  uint64_t v19 = a4 + v17[6];
  sub_21F9B3C14((uint64_t)v13, v19, type metadata accessor for MajorValueAlignmentStorage);
  uint64_t result = sub_21F9B3CF4(v19, a4 + v17[7], type metadata accessor for MajorValueAlignmentStorage);
  *(unsigned char *)(a4 + v17[8]) = v14;
  return result;
}

uint64_t static ChartScrollTargetBehavior.valueAligned<A, B>(xUnit:yUnit:xMajorAlignment:yMajorAlignment:limitBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v37 = a8;
  uint64_t v38 = a2;
  uint64_t v34 = a5;
  uint64_t v35 = a1;
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  uint64_t v44 = a9;
  uint64_t v41 = a12;
  uint64_t v42 = a11;
  uint64_t v43 = a10;
  type metadata accessor for MajorValueAlignment();
  uint64_t v36 = sub_21FA26340();
  uint64_t v14 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  uint64_t v33 = (char *)&v32 - v15;
  type metadata accessor for MajorValueAlignment();
  uint64_t v16 = sub_21FA26340();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v32 - v18;
  uint64_t v20 = *(void *)(a7 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v25 = MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v32 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v28 = *v34;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v29 + 16))(v27, v35, a6, v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v38, a7);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v39, v16);
  uint64_t v30 = (uint64_t)v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v33, v40, v36);
  unsigned __int8 v45 = v28;
  return ValueAlignedChartScrollTargetBehavior.init<A, B>(xUnit:yUnit:xMajorAlignment:yMajorAlignment:limitBehavior:)((uint64_t)v27, (uint64_t)v23, (uint64_t)v19, v30, &v45, a6, a7, v37, v44, v43, v42);
}

uint64_t ValueAlignedChartScrollTargetBehavior.init<A, B>(xUnit:yUnit:xMajorAlignment:yMajorAlignment:limitBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v48 = a8;
  uint64_t v49 = a3;
  uint64_t v53 = a4;
  uint64_t v17 = type metadata accessor for MajorValueAlignmentStorage(0);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v47 = (uint64_t)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v54 = (uint64_t)&v45 - v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v46 = (uint64_t)&v45 - v22;
  MEMORY[0x270FA5388](v23);
  __n128 v25 = (char *)&v45 - v24;
  uint64_t v26 = type metadata accessor for ValueAlignment(0);
  uint64_t v50 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  unsigned __int8 v28 = (uint64_t *)((char *)&v45 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  int v52 = *a5;
  sub_21F9B0AEC(a1, a6, v48, a9);
  uint64_t v51 = a11;
  sub_21F9B0AEC(a2, a7, a11, v28);
  uint64_t v29 = a2;
  uint64_t v30 = a9;
  uint64_t v31 = v49;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a7 - 8) + 8))(v29, a7);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a6 - 8) + 8))(a1, a6);
  uint64_t v32 = (int *)type metadata accessor for ValueAlignedChartScrollTargetBehavior(0);
  sub_21F9B3C14((uint64_t)v28, (uint64_t)v30 + v32[5], type metadata accessor for ValueAlignment);
  uint64_t v33 = type metadata accessor for MajorValueAlignment();
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v31, 1, v33) == 1)
  {
    uint64_t v35 = sub_21FA26340();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v35 - 8) + 8))(v31, v35);
    uint64_t v36 = v50;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56))(v25, 2, 2, v26);
  }
  else
  {
    uint64_t v37 = v46;
    sub_21F9B3CF4(v31, v46, type metadata accessor for MajorValueAlignmentStorage);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v31, v33);
    sub_21F9B3C14(v37, (uint64_t)v25, type metadata accessor for MajorValueAlignmentStorage);
    uint64_t v36 = v50;
  }
  sub_21F9B3C14((uint64_t)v25, (uint64_t)v30 + v32[6], type metadata accessor for MajorValueAlignmentStorage);
  uint64_t v38 = type metadata accessor for MajorValueAlignment();
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = v53;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v53, 1, v38) == 1)
  {
    uint64_t v41 = sub_21FA26340();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v41 - 8) + 8))(v40, v41);
    uint64_t v42 = v54;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v54, 2, 2, v26);
  }
  else
  {
    uint64_t v43 = v47;
    sub_21F9B3CF4(v40, v47, type metadata accessor for MajorValueAlignmentStorage);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v40, v38);
    uint64_t v42 = v54;
    sub_21F9B3C14(v43, v54, type metadata accessor for MajorValueAlignmentStorage);
  }
  uint64_t result = sub_21F9B3C14(v42, (uint64_t)v30 + v32[7], type metadata accessor for MajorValueAlignmentStorage);
  *((unsigned char *)v30 + v32[8]) = v52;
  return result;
}

uint64_t static ChartScrollTargetBehavior.valueAligned<>(xMatching:yMatching:xMajorAlignment:yMajorAlignment:limitBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v27 = a6;
  uint64_t v9 = sub_21F76CA40(&qword_267EEA078);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v25 - v13;
  uint64_t v15 = sub_21FA23F20();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v25 - v21;
  LOBYTE(a5) = *a5;
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16);
  v23((char *)&v25 - v21, a1, v15, v20);
  ((void (*)(char *, uint64_t, uint64_t))v23)(v18, a2, v15);
  sub_21F76C978(v25, (uint64_t)v14, &qword_267EEA078);
  sub_21F76C978(v26, (uint64_t)v11, &qword_267EEA078);
  unsigned __int8 v28 = a5;
  return ValueAlignedChartScrollTargetBehavior.init(xMatching:yMatching:xMajorAlignment:yMajorAlignment:limitBehavior:)((uint64_t)v22, (uint64_t)v18, (uint64_t)v14, (uint64_t)v11, &v28, v27);
}

uint64_t ValueAlignedChartScrollTargetBehavior.init(xMatching:yMatching:xMajorAlignment:yMajorAlignment:limitBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v35 = a4;
  uint64_t v33 = a2;
  uint64_t v10 = type metadata accessor for MajorValueAlignmentStorage(0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v32 = (uint64_t)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v36 = (char *)&v31 - v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v31 - v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v31 - v18;
  int v34 = *a5;
  uint64_t v20 = sub_21FA23F20();
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32);
  v21(a6, a1, v20);
  uint64_t v22 = type metadata accessor for ValueAlignment(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v23 = (int *)type metadata accessor for ValueAlignedChartScrollTargetBehavior(0);
  v21(a6 + v23[5], v33, v20);
  swift_storeEnumTagMultiPayload();
  uint64_t v24 = sub_21F76CA40(&qword_267EEA080);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48);
  if (v25(a3, 1, v24) == 1)
  {
    sub_21F76CA84(a3, &qword_267EEA078);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v19, 2, 2, v22);
  }
  else
  {
    sub_21F9B3CF4(a3, (uint64_t)v16, type metadata accessor for MajorValueAlignmentStorage);
    sub_21F76CA84(a3, &qword_267EEA080);
    sub_21F9B3C14((uint64_t)v16, (uint64_t)v19, type metadata accessor for MajorValueAlignmentStorage);
  }
  sub_21F9B3C14((uint64_t)v19, a6 + v23[6], type metadata accessor for MajorValueAlignmentStorage);
  uint64_t v26 = v35;
  unsigned int v27 = v25(v35, 1, v24);
  uint64_t v28 = (uint64_t)v36;
  if (v27 == 1)
  {
    sub_21F76CA84(v26, &qword_267EEA078);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v28, 2, 2, v22);
  }
  else
  {
    uint64_t v29 = v32;
    sub_21F9B3CF4(v26, v32, type metadata accessor for MajorValueAlignmentStorage);
    sub_21F76CA84(v26, &qword_267EEA080);
    sub_21F9B3C14(v29, v28, type metadata accessor for MajorValueAlignmentStorage);
  }
  uint64_t result = sub_21F9B3C14(v28, a6 + v23[7], type metadata accessor for MajorValueAlignmentStorage);
  *(unsigned char *)(a6 + v23[8]) = v34;
  return result;
}

uint64_t static ChartScrollTargetBehavior.valueAligned<A>(xMatching:yUnit:xMajorAlignment:yMajorAlignment:limitBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v34 = a9;
  uint64_t v35 = a8;
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  type metadata accessor for MajorValueAlignment();
  uint64_t v12 = sub_21FA26340();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v29 - v14;
  uint64_t v16 = sub_21F76CA40(&qword_267EEA078);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v29 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_21FA23F20();
  __n128 v24 = MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v29 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a5) = *a5;
  (*(void (**)(char *, uint64_t, __n128))(v27 + 16))(v26, v30, v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v31, a6);
  sub_21F76C978(v32, (uint64_t)v18, &qword_267EEA078);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v33, v12);
  unsigned __int8 v36 = a5;
  return ValueAlignedChartScrollTargetBehavior.init<A>(xMatching:yUnit:xMajorAlignment:yMajorAlignment:limitBehavior:)((uint64_t)v26, (uint64_t)v22, (uint64_t)v18, (uint64_t)v15, &v36, a6, a7, v34);
}

uint64_t ValueAlignedChartScrollTargetBehavior.init<A>(xMatching:yUnit:xMajorAlignment:yMajorAlignment:limitBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v48 = a4;
  uint64_t v44 = a3;
  uint64_t v14 = type metadata accessor for MajorValueAlignmentStorage(0);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v43 = (uint64_t)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v49 = (uint64_t)&v42 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v42 = (uint64_t)&v42 - v19;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v42 - v21;
  uint64_t v23 = type metadata accessor for ValueAlignment(0);
  uint64_t v45 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (uint64_t *)((char *)&v42 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  int v47 = *a5;
  uint64_t v26 = sub_21FA23F20();
  uint64_t v27 = *(void *)(v26 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(a8, a1, v26);
  swift_storeEnumTagMultiPayload();
  uint64_t v46 = a7;
  sub_21F9B0AEC(a2, a6, a7, v25);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a6 - 8) + 8))(a2, a6);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(a1, v26);
  uint64_t v28 = (int *)type metadata accessor for ValueAlignedChartScrollTargetBehavior(0);
  uint64_t v29 = (uint64_t)v25;
  uint64_t v30 = v44;
  sub_21F9B3C14(v29, a8 + v28[5], type metadata accessor for ValueAlignment);
  uint64_t v31 = sub_21F76CA40(&qword_267EEA080);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v30, 1, v31) == 1)
  {
    sub_21F76CA84(v30, &qword_267EEA078);
    uint64_t v32 = v45;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56))(v22, 2, 2, v23);
    uint64_t v33 = v23;
  }
  else
  {
    uint64_t v34 = v42;
    sub_21F9B3CF4(v30, v42, type metadata accessor for MajorValueAlignmentStorage);
    sub_21F76CA84(v30, &qword_267EEA080);
    sub_21F9B3C14(v34, (uint64_t)v22, type metadata accessor for MajorValueAlignmentStorage);
    uint64_t v33 = v23;
    uint64_t v32 = v45;
  }
  sub_21F9B3C14((uint64_t)v22, a8 + v28[6], type metadata accessor for MajorValueAlignmentStorage);
  uint64_t v35 = type metadata accessor for MajorValueAlignment();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = v48;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v48, 1, v35) == 1)
  {
    uint64_t v38 = sub_21FA26340();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(v37, v38);
    uint64_t v39 = v49;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v49, 2, 2, v33);
  }
  else
  {
    uint64_t v40 = v43;
    sub_21F9B3CF4(v37, v43, type metadata accessor for MajorValueAlignmentStorage);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v35);
    uint64_t v39 = v49;
    sub_21F9B3C14(v40, v49, type metadata accessor for MajorValueAlignmentStorage);
  }
  uint64_t result = sub_21F9B3C14(v39, a8 + v28[7], type metadata accessor for MajorValueAlignmentStorage);
  *(unsigned char *)(a8 + v28[8]) = v47;
  return result;
}

uint64_t static ChartScrollTargetBehavior.valueAligned<A>(xUnit:yMatching:xMajorAlignment:yMajorAlignment:limitBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v33 = a9;
  uint64_t v34 = a8;
  uint64_t v30 = a7;
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  uint64_t v11 = sub_21F76CA40(&qword_267EEA078);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MajorValueAlignment();
  uint64_t v14 = sub_21FA26340();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v28 - v16;
  uint64_t v18 = sub_21FA23F20();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v23 = MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v28 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a5) = *a5;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v26 + 16))(v25, v28, a6, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v29, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v31, v14);
  sub_21F76C978(v32, (uint64_t)v13, &qword_267EEA078);
  unsigned __int8 v35 = a5;
  return ValueAlignedChartScrollTargetBehavior.init<A>(xUnit:yMatching:xMajorAlignment:yMajorAlignment:limitBehavior:)((uint64_t)v25, (uint64_t)v21, (uint64_t)v17, (uint64_t)v13, &v35, a6, v30, v33);
}

uint64_t ValueAlignedChartScrollTargetBehavior.init<A>(xUnit:yMatching:xMajorAlignment:yMajorAlignment:limitBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v44 = a4;
  uint64_t v41 = a2;
  uint64_t v14 = type metadata accessor for MajorValueAlignmentStorage(0);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v40 = (uint64_t)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v45 = (char *)&v40 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v40 - v19;
  MEMORY[0x270FA5388](v21);
  __n128 v23 = (char *)&v40 - v22;
  uint64_t v24 = type metadata accessor for ValueAlignment(0);
  uint64_t v42 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (uint64_t *)((char *)&v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  int v43 = *a5;
  sub_21F9B0AEC(a1, a6, a7, v26);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a6 - 8) + 8))(a1, a6);
  sub_21F9B3C14((uint64_t)v26, a8, type metadata accessor for ValueAlignment);
  uint64_t v27 = (int *)type metadata accessor for ValueAlignedChartScrollTargetBehavior(0);
  uint64_t v28 = a8 + v27[5];
  uint64_t v29 = sub_21FA23F20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 32))(v28, v41, v29);
  swift_storeEnumTagMultiPayload();
  uint64_t v30 = type metadata accessor for MajorValueAlignment();
  uint64_t v31 = *(void *)(v30 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(a3, 1, v30) == 1)
  {
    uint64_t v32 = sub_21FA26340();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(a3, v32);
    uint64_t v33 = v42;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 56))(v23, 2, 2, v24);
  }
  else
  {
    sub_21F9B3CF4(a3, (uint64_t)v20, type metadata accessor for MajorValueAlignmentStorage);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(a3, v30);
    sub_21F9B3C14((uint64_t)v20, (uint64_t)v23, type metadata accessor for MajorValueAlignmentStorage);
    uint64_t v33 = v42;
  }
  sub_21F9B3C14((uint64_t)v23, a8 + v27[6], type metadata accessor for MajorValueAlignmentStorage);
  uint64_t v34 = sub_21F76CA40(&qword_267EEA080);
  uint64_t v35 = v44;
  int v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 48))(v44, 1, v34);
  uint64_t v37 = (uint64_t)v45;
  if (v36 == 1)
  {
    sub_21F76CA84(v35, &qword_267EEA078);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56))(v37, 2, 2, v24);
  }
  else
  {
    uint64_t v38 = v40;
    sub_21F9B3CF4(v35, v40, type metadata accessor for MajorValueAlignmentStorage);
    sub_21F76CA84(v35, &qword_267EEA080);
    sub_21F9B3C14(v38, v37, type metadata accessor for MajorValueAlignmentStorage);
  }
  uint64_t result = sub_21F9B3C14(v37, a8 + v27[7], type metadata accessor for MajorValueAlignmentStorage);
  *(unsigned char *)(a8 + v27[8]) = v43;
  return result;
}

void static ValueAlignedLimitBehavior.always.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static ValueAlignedLimitBehavior.never.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_21F9B0AEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = sub_21F76C248(a1, a2, a3);
  if (v7)
  {
    if (v7 != 1) {
      sub_21F7654F0(v5, v6, 2);
    }
    uint64_t result = sub_21FA266E0();
    __break(1u);
  }
  else
  {
    *a4 = v5;
    type metadata accessor for ValueAlignment(0);
    return swift_storeEnumTagMultiPayload();
  }
  return result;
}

uint64_t sub_21F9B0BA4(uint64_t a1, double a2)
{
  uint64_t v118 = a1;
  uint64_t v121 = sub_21FA242A0();
  uint64_t v117 = *(void *)(v121 - 8);
  MEMORY[0x270FA5388](v121);
  uint64_t v116 = (char *)&v92 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = sub_21FA24290();
  uint64_t v126 = *(void *)(v115 - 8);
  MEMORY[0x270FA5388](v115);
  CGFloat v114 = (char *)&v92 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = sub_21FA24260();
  uint64_t v128 = *(void (**)(char *, uint64_t, uint64_t))(v125 - 8);
  MEMORY[0x270FA5388](v125);
  CGFloat v113 = (char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_21F76CA40(&qword_26AD47A98);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v111 = (char *)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v107 = (uint64_t)&v92 - v9;
  MEMORY[0x270FA5388](v10);
  uint64_t v108 = (uint64_t)&v92 - v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v109 = (uint64_t)&v92 - v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v92 - v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v112 = (uint64_t)&v92 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v92 - v20;
  MEMORY[0x270FA5388](v22);
  uint64_t v123 = (uint64_t)&v92 - v23;
  MEMORY[0x270FA5388](v24);
  char v124 = (char *)&v92 - v25;
  uint64_t v26 = sub_21FA241F0();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v119 = v26;
  uint64_t v120 = v27;
  MEMORY[0x270FA5388](v26);
  uint64_t v29 = (char *)&v92 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = (char *)&v92 - v31;
  MEMORY[0x270FA5388](v33);
  uint64_t v35 = (char *)&v92 - v34;
  MEMORY[0x270FA5388](v36);
  uint64_t v127 = (char *)&v92 - v37;
  uint64_t v38 = sub_21FA23F20();
  uint64_t v39 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v41 = (char *)&v92 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for ValueAlignment(0);
  MEMORY[0x270FA5388](v42);
  uint64_t v44 = (double *)((char *)&v92 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_21F9B3CF4(v122, (uint64_t)v44, type metadata accessor for ValueAlignment);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    *(double *)&uint64_t result = *v44 * round(a2 / *v44);
    return result;
  }
  uint64_t v94 = v35;
  uint64_t v93 = v32;
  CGFloat v95 = v16;
  CGFloat v96 = v29;
  double v106 = v21;
  uint64_t v97 = v39;
  uint64_t v45 = *(void (**)(char *, double *, uint64_t))(v39 + 32);
  uint64_t v110 = v41;
  uint64_t v98 = v38;
  v45(v41, v44, v38);
  sub_21FA23FD0();
  LODWORD(v122) = *MEMORY[0x263F07780];
  uint64_t v46 = (void (*)(void))*((void *)v128 + 13);
  uint64_t v104 = (char *)v128 + 104;
  char v105 = (void (*)(char *, void, uint64_t))v46;
  int v47 = v113;
  v46(v113);
  uint64_t v48 = *MEMORY[0x263F077E0];
  uint64_t v49 = v126;
  uint64_t v50 = *(void (**)(char *, void, uint64_t))(v126 + 104);
  uint64_t v100 = v126 + 104;
  uint64_t v103 = v50;
  uint64_t v51 = v114;
  uint64_t v52 = v115;
  ((void (*)(char *, uint64_t))v50)(v114, v48);
  unsigned int v102 = *MEMORY[0x263F07800];
  uint64_t v53 = v117;
  uint64_t v101 = *(void (**)(char *))(v117 + 104);
  uint64_t v54 = v116;
  uint64_t v55 = v121;
  v101(v116);
  sub_21FA242F0();
  uint64_t v117 = *(void *)(v53 + 8);
  ((void (*)(char *, uint64_t))v117)(v54, v55);
  uint64_t v56 = *(void (**)(char *, uint64_t))(v49 + 8);
  uint64_t v126 = v49 + 8;
  double v99 = v56;
  uint64_t v57 = v52;
  v56(v51, v52);
  uint64_t v58 = (void (*)(char *, uint64_t))*((void *)v128 + 1);
  uint64_t v128 = (void (*)(char *, uint64_t, uint64_t))((char *)v128 + 8);
  uint64_t v59 = v125;
  v58(v47, v125);
  v105(v47, v122, v59);
  v103(v51, *MEMORY[0x263F077F0], v57);
  uint64_t v60 = v123;
  uint64_t v61 = v121;
  ((void (*)(char *, void, uint64_t))v101)(v54, v102, v121);
  uint64_t v62 = v120;
  sub_21FA242F0();
  ((void (*)(char *, uint64_t))v117)(v54, v61);
  uint64_t v63 = v119;
  v99(v51, v57);
  uint64_t v64 = (uint64_t)v124;
  v58(v47, v125);
  uint64_t v65 = v64;
  uint64_t v66 = v112;
  sub_21F76C978(v64, v112, &qword_26AD47A98);
  uint64_t v67 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48);
  if (v67(v66, 1, v63) == 1)
  {
    uint64_t v68 = v60;
  }
  else
  {
    uint64_t v70 = *(void (**)(char *, uint64_t, uint64_t))(v62 + 32);
    uint64_t v71 = v94;
    v70(v94, v66, v63);
    uint64_t v66 = (uint64_t)v95;
    sub_21F76C978(v60, (uint64_t)v95, &qword_26AD47A98);
    uint64_t v72 = v67;
    if (v67(v66, 1, v63) != 1)
    {
      uint64_t v80 = v70;
      uint64_t v128 = v70;
      uint64_t v81 = v71;
      uint64_t v82 = v93;
      uint64_t v79 = (uint64_t)v106;
      v80(v93, v66, v63);
      sub_21FA241C0();
      double v84 = fabs(v83);
      sub_21FA241C0();
      double v86 = fabs(v85);
      if (v84 >= v86) {
        uint64_t v87 = v81;
      }
      else {
        uint64_t v87 = v82;
      }
      if (v84 >= v86) {
        uint64_t v88 = v82;
      }
      else {
        uint64_t v88 = v81;
      }
      (*(void (**)(char *, uint64_t))(v62 + 8))(v87, v63);
      v128((char *)v79, (uint64_t)v88, v63);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v62 + 56))(v79, 0, 1, v63);
      uint64_t v65 = (uint64_t)v124;
      uint64_t v77 = v96;
      uint64_t v78 = (uint64_t)v111;
      goto LABEL_18;
    }
    (*(void (**)(char *, uint64_t))(v62 + 8))(v71, v63);
    uint64_t v68 = v123;
    uint64_t v65 = (uint64_t)v124;
  }
  sub_21F76CA84(v66, &qword_26AD47A98);
  uint64_t v73 = v108;
  sub_21F76C978(v65, v108, &qword_26AD47A98);
  uint64_t v74 = v107;
  sub_21F76C978(v68, v107, &qword_26AD47A98);
  uint64_t v72 = v67;
  unsigned int v75 = v67(v73, 1, v63);
  uint64_t v76 = v109;
  if (v75 == 1)
  {
    sub_21F76C9DC(v74, v109, &qword_26AD47A98);
    sub_21F76CA84(v73, &qword_26AD47A98);
    uint64_t v77 = v96;
    uint64_t v78 = (uint64_t)v111;
    uint64_t v62 = v120;
  }
  else
  {
    sub_21F76CA84(v74, &qword_26AD47A98);
    uint64_t v62 = v120;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v120 + 32))(v76, v73, v63);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v62 + 56))(v76, 0, 1, v63);
    uint64_t v77 = v96;
    uint64_t v78 = (uint64_t)v111;
  }
  uint64_t v79 = (uint64_t)v106;
  sub_21F76C9DC(v76, (uint64_t)v106, &qword_26AD47A98);
LABEL_18:
  sub_21F76C978(v79, v78, &qword_26AD47A98);
  if (v72(v78, 1, v63) == 1)
  {
    sub_21F76CA84(v79, &qword_26AD47A98);
    sub_21F76CA84(v123, &qword_26AD47A98);
    sub_21F76CA84(v65, &qword_26AD47A98);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v127, v63);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v110, v98);
    sub_21F76CA84(v78, &qword_26AD47A98);
    *(double *)&uint64_t result = 0.0;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 32))(v77, v78, v63);
    sub_21FA23FE0();
    uint64_t v90 = v89;
    uint64_t v91 = *(void (**)(char *, uint64_t))(v62 + 8);
    v91(v77, v63);
    sub_21F76CA84(v79, &qword_26AD47A98);
    sub_21F76CA84(v123, &qword_26AD47A98);
    sub_21F76CA84(v65, &qword_26AD47A98);
    v91(v127, v63);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v110, v98);
    return v90;
  }
  return result;
}