uint64_t sub_21F9B17BC(unsigned __int8 a1, uint64_t a2, double a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  void (*v27)(char *, double *, uint64_t);
  char *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  char *v41;
  char *v42;
  double v43;
  double v44;
  double v45;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;

  v59 = a2;
  LODWORD(v61) = a1;
  v58 = sub_21FA242A0();
  v55 = *(void *)(v58 - 8);
  MEMORY[0x270FA5388](v58);
  v57 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_21FA24290();
  v50 = *(void *)(v54 - 8);
  MEMORY[0x270FA5388](v54);
  v53 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_21FA24260();
  v6 = *(void *)(v60 - 8);
  MEMORY[0x270FA5388](v60);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_21F76CA40(&qword_26AD47A98);
  MEMORY[0x270FA5388](v9 - 8);
  v56 = (uint64_t)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  v13 = (char *)&v47 - v12;
  v14 = sub_21FA241F0();
  v51 = *(void *)(v14 - 8);
  v52 = v14;
  MEMORY[0x270FA5388](v14);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  v19 = (char *)&v47 - v18;
  v20 = sub_21FA23F20();
  v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  v23 = (char *)&v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for ValueAlignment(0);
  MEMORY[0x270FA5388](v24);
  v26 = (double *)((char *)&v47 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_21F9B3CF4(v62, (uint64_t)v26, type metadata accessor for ValueAlignment);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v47 = v16;
    v48 = v21;
    v27 = *(void (**)(char *, double *, uint64_t))(v21 + 32);
    v49 = v23;
    v62 = v20;
    v27(v23, v26, v20);
    v28 = v19;
    sub_21FA23FD0();
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x263F07780], v60);
    v29 = v50;
    v30 = (unsigned int *)MEMORY[0x263F077E0];
    if (v61) {
      v30 = (unsigned int *)MEMORY[0x263F077F0];
    }
    v32 = v53;
    v31 = v54;
    (*(void (**)(char *, void, uint64_t))(v50 + 104))(v53, *v30, v54);
    v33 = v55;
    v34 = v57;
    v35 = v58;
    (*(void (**)(char *, void, uint64_t))(v55 + 104))(v57, *MEMORY[0x263F07800], v58);
    v61 = v28;
    sub_21FA242F0();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v31);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v60);
    v36 = v56;
    sub_21F76C978((uint64_t)v13, v56, &qword_26AD47A98);
    v37 = v51;
    v38 = v52;
    v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v36, 1, v52);
    v40 = (uint64_t)v13;
    v41 = v49;
    if (v39 == 1)
    {
      v45 = 0.0;
    }
    else
    {
      v42 = v47;
      (*(void (**)(char *, uint64_t, uint64_t))(v37 + 32))(v47, v36, v38);
      sub_21FA23FE0();
      v44 = v43;
      (*(void (**)(char *, uint64_t))(v37 + 8))(v42, v38);
      v45 = v44;
    }
    sub_21F76CA84(v40, &qword_26AD47A98);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v61, v38);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v41, v62);
  }
  else if (v61)
  {
    v45 = a3 - *v26;
  }
  else
  {
    v45 = *v26 + a3;
  }
  return *(void *)&v45;
}

uint64_t static MajorValueAlignment.unit<>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for MajorValueAlignmentStorage(0);
  MEMORY[0x270FA5388](v8 - 8);
  v10 = (uint64_t *)((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_21F9B0AEC(a1, a2, a3, v10);
  uint64_t v11 = type metadata accessor for ValueAlignment(0);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 0, 2, v11);
  return sub_21F9B3C14((uint64_t)v10, a4, type metadata accessor for MajorValueAlignmentStorage);
}

uint64_t static MajorValueAlignment.matching<>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_21FA23F20();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  uint64_t v5 = type metadata accessor for ValueAlignment(0);
  swift_storeEnumTagMultiPayload();
  v6 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);

  return v6(a2, 0, 2, v5);
}

uint64_t static MajorValueAlignment.page.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for MajorValueAlignmentStorage(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ValueAlignment(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 2, v5);
  return sub_21F9B3C14((uint64_t)v4, a1, type metadata accessor for MajorValueAlignmentStorage);
}

uint64_t ValueAlignedChartScrollTargetBehavior.updateTarget(_:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21FA24320();
  uint64_t v190 = *(void *)(v4 - 8);
  uint64_t v191 = v4;
  MEMORY[0x270FA5388](v4);
  v189 = (char *)&v159 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v184 = (int *)type metadata accessor for ValueAlignedChartScrollTargetBehavior(0);
  MEMORY[0x270FA5388](v184);
  uint64_t v182 = (uint64_t)&v159 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v178 = (uint64_t)&v159 - v8;
  uint64_t v9 = type metadata accessor for ValueAlignment(0);
  uint64_t v195 = *(void *)(v9 - 8);
  uint64_t v196 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v183 = (uint64_t)&v159 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v179 = (uint64_t)&v159 - v12;
  uint64_t v13 = type metadata accessor for MajorValueAlignmentStorage(0);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v175 = (uint64_t)&v159 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v180 = (uint64_t)&v159 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v174 = (uint64_t)&v159 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v176 = (uint64_t)&v159 - v20;
  uint64_t v21 = sub_21F76CA40(&qword_267EEA088);
  MEMORY[0x270FA5388](v21 - 8);
  v181 = (char *)&v159 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  v188 = (double *)((char *)&v159 - v24);
  MEMORY[0x270FA5388](v25);
  uint64_t v177 = (uint64_t)&v159 - v26;
  MEMORY[0x270FA5388](v27);
  v187 = (double *)((char *)&v159 - v28);
  uint64_t v29 = type metadata accessor for ChartProxy();
  MEMORY[0x270FA5388](v29 - 8);
  uint64_t v185 = (uint64_t)&v159 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  v33 = (char *)&v159 - v32;
  uint64_t v193 = type metadata accessor for ChartScrollTargetBehaviorContext(0);
  MEMORY[0x270FA5388](v193);
  v35 = (char *)&v159 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_21FA24570();
  uint64_t v37 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  v39 = (char *)&v159 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA24560();
  double v41 = v40;
  double v43 = v42;
  sub_21FA25070();
  double v45 = v44;
  sub_21FA25080();
  double v47 = v45 - v46;
  if (v41 > 0.0) {
    double v48 = v41;
  }
  else {
    double v48 = 0.0;
  }
  if (v47 >= v48) {
    double v49 = v48;
  }
  else {
    double v49 = v47;
  }
  sub_21FA25070();
  double v51 = v50;
  sub_21FA25080();
  double v53 = v51 - v52;
  if (v43 > 0.0) {
    double v54 = v43;
  }
  else {
    double v54 = 0.0;
  }
  if (v53 >= v54) {
    double v53 = v54;
  }
  double v230 = v49;
  double v229 = v53;
  sub_21FA25060();
  sub_21FA24560();
  double v56 = v55;
  double v58 = v57;
  (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v36);
  sub_21FA25070();
  double v60 = v59;
  sub_21FA25080();
  double v62 = v60 - v61;
  if (v56 > 0.0) {
    double v63 = v56;
  }
  else {
    double v63 = 0.0;
  }
  if (v62 >= v63) {
    double v64 = v63;
  }
  else {
    double v64 = v62;
  }
  sub_21FA25070();
  double v66 = v65;
  sub_21FA25080();
  double v68 = v66 - v67;
  if (v58 > 0.0) {
    double v69 = v58;
  }
  else {
    double v69 = 0.0;
  }
  if (v68 >= v69) {
    double v70 = v69;
  }
  else {
    double v70 = v68;
  }
  sub_21FA250B0();
  double v72 = fabs(v71);
  sub_21F9B3CF4(a2, (uint64_t)v35, type metadata accessor for ChartScrollTargetBehaviorContext);
  if (v72 <= 0.3)
  {
    sub_21FA250B0();
    BOOL v73 = fabs(v74) > 0.3;
  }
  else
  {
    BOOL v73 = 1;
  }
  LODWORD(v186) = v73;
  sub_21F9B3DFC((uint64_t)v35, type metadata accessor for ChartScrollTargetBehaviorContext);
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x270FA5388](KeyPath);
  swift_getKeyPath();
  swift_getAtKeyPath();
  swift_release();
  sub_21FA250A0();
  char v76 = sub_21FA250F0();
  sub_21FA25100();
  char v77 = sub_21FA25100();
  uint64_t v194 = a1;
  if (v77 == v76)
  {
    sub_21F9B3CF4(a2 + *(int *)(v193 + 20), (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for ChartProxy);
    sub_21F78B868((uint64_t)(v33 + 400), (uint64_t)&v197);
    sub_21F9B3DFC((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for ChartModel.Scenegraph);
    uint64_t v78 = v198;
    uint64_t v79 = v199;
    uint64_t v80 = v201;
    uint64_t v81 = v203;
    uint64_t v82 = v204;
    uint64_t v83 = v205;
    uint64_t v84 = v207;
    int v85 = v210;
    uint64_t v170 = v209;
    uint64_t v171 = v208;
    uint64_t v168 = v206;
    uint64_t v172 = v200;
    uint64_t v173 = v197;
    uint64_t v169 = v202;
    sub_21F77F4A8(v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, v207, v208, v209, v210);
    sub_21F78A6F8((uint64_t)&v197);
    if (v85 != 255)
    {
      v233[0] = v173;
      v233[1] = v78;
      uint64_t v166 = v79;
      uint64_t v167 = v78;
      v233[2] = v79;
      v233[3] = v172;
      uint64_t v164 = v84;
      uint64_t v165 = v80;
      v233[4] = v80;
      v233[5] = v169;
      v233[6] = v81;
      v233[7] = v82;
      uint64_t v161 = v83;
      uint64_t v162 = v81;
      v233[8] = v83;
      uint64_t v86 = v168;
      v233[9] = v168;
      v233[10] = v84;
      v233[11] = v171;
      v233[12] = v170;
      int v163 = v85;
      char v234 = v85 & 1;
      if ((v186 & 1) == 0)
      {
        v95 = v187;
        (*(void (**)(double *, uint64_t, uint64_t, uint64_t))(v195 + 56))(v187, 1, 1, v196);
        uint64_t v96 = v179;
        uint64_t v97 = v82;
        unsigned __int8 v98 = v161;
        goto LABEL_40;
      }
      uint64_t v87 = v176;
      sub_21F9B3CF4(v192 + v184[6], v176, type metadata accessor for MajorValueAlignmentStorage);
      double v88 = *(double *)&v225[1];
      int v89 = v226;
      uint64_t v90 = v87;
      uint64_t v91 = v174;
      sub_21F9B3CF4(v90, v174, type metadata accessor for MajorValueAlignmentStorage);
      v160 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v195 + 48);
      int v92 = v160(v91, 2, v196);
      uint64_t v93 = v86;
      if (v92)
      {
        if (v92 != 1)
        {
          uint64_t v99 = 1;
          v95 = v187;
LABEL_39:
          uint64_t v97 = v82;
          uint64_t v100 = v196;
          int v101 = 1;
          (*(void (**)(double *, uint64_t, uint64_t, uint64_t))(v195 + 56))(v95, v99, 1, v196);
          sub_21F9B3DFC(v176, type metadata accessor for MajorValueAlignmentStorage);
          int v102 = v160((uint64_t)v95, 1, v100);
          uint64_t v96 = v179;
          unsigned __int8 v98 = v161;
          uint64_t v86 = v93;
          if (v102 != 1)
          {
LABEL_41:
            uint64_t v103 = (uint64_t)v95;
            uint64_t v104 = v177;
            sub_21F76C978(v103, v177, &qword_267EEA088);
            uint64_t v105 = v178;
            sub_21F9B3CF4(v192, v178, type metadata accessor for ValueAlignedChartScrollTargetBehavior);
            int v106 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v195 + 48))(v104, 1, v196);
            uint64_t v107 = v164;
            if (v106 == 1)
            {
              sub_21F9B3CF4(v105, v96, type metadata accessor for ValueAlignment);
              sub_21F9B3DFC(v105, type metadata accessor for ValueAlignedChartScrollTargetBehavior);
              sub_21F76CA84(v104, &qword_267EEA088);
            }
            else
            {
              sub_21F9B3DFC(v105, type metadata accessor for ValueAlignedChartScrollTargetBehavior);
              sub_21F9B3C14(v104, v96, type metadata accessor for ValueAlignment);
            }
            uint64_t v108 = (uint64_t)v189;
            sub_21FA242E0();
            sub_21F9B403C(&v230, v101, v96, (uint64_t)v233, v108, v64);
            sub_21F76EE70(v173, v167, v166, v172, v165, v169, v162, v97, v98, v86, v107, v171, v170, v163);
            (*(void (**)(uint64_t, uint64_t))(v190 + 8))(v108, v191);
            sub_21F9B3DFC(v96, type metadata accessor for ValueAlignment);
            sub_21F76CA84((uint64_t)v187, &qword_267EEA088);
            goto LABEL_45;
          }
LABEL_40:
          int v101 = 0;
          goto LABEL_41;
        }
        double v94 = 1.0;
        if (!v89) {
          double v94 = v88;
        }
        v95 = v187;
        double *v187 = v94;
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        v95 = v187;
        sub_21F9B3C14(v91, (uint64_t)v187, type metadata accessor for ValueAlignment);
      }
      uint64_t v99 = 0;
      goto LABEL_39;
    }
  }
LABEL_45:
  sub_21FA250A0();
  unsigned __int8 v109 = sub_21FA25110();
  sub_21FA25100();
  if (sub_21FA25100() != v109) {
    goto LABEL_64;
  }
  uint64_t v110 = *(int *)(v193 + 20);
  uint64_t v177 = a2;
  uint64_t v111 = v185;
  sub_21F9B3CF4(a2 + v110, v185, (uint64_t (*)(void))type metadata accessor for ChartProxy);
  sub_21F78B868(v111 + 400, (uint64_t)&v197);
  sub_21F9B3DFC(v111, (uint64_t (*)(void))type metadata accessor for ChartModel.Scenegraph);
  uint64_t v112 = v211;
  uint64_t v113 = v212;
  uint64_t v115 = v213;
  uint64_t v114 = v214;
  uint64_t v116 = v220;
  uint64_t v117 = v221;
  uint64_t v118 = v222;
  uint64_t v119 = v223;
  int v120 = v224;
  uint64_t v178 = v219;
  uint64_t v193 = v215;
  v187 = v216;
  uint64_t v185 = v217;
  uint64_t v179 = v218;
  sub_21F77F4A8(v211, v212, v213, v214, v215, (uint64_t)v216, v217, v218, v219, v220, v221, v222, v223, v224);
  sub_21F78A6F8((uint64_t)&v197);
  if (v120 == 255) {
    goto LABEL_64;
  }
  uint64_t v176 = v112;
  v231[0] = v112;
  uint64_t v173 = v115;
  uint64_t v174 = v113;
  v231[1] = v113;
  v231[2] = v115;
  uint64_t v172 = v114;
  v231[3] = v114;
  v231[4] = v193;
  v231[5] = v187;
  v231[6] = v185;
  v231[7] = v179;
  v231[8] = v178;
  v231[9] = v116;
  uint64_t v169 = v118;
  uint64_t v170 = v117;
  v231[10] = v117;
  v231[11] = v118;
  uint64_t v168 = v119;
  v231[12] = v119;
  LODWORD(v167) = v120;
  char v232 = v120 & 1;
  uint64_t v171 = v116;
  if ((v186 & 1) == 0)
  {
    v127 = v188;
    (*(void (**)(double *, uint64_t, uint64_t, uint64_t))(v195 + 56))(v188, 1, 1, v196);
    uint64_t v129 = (uint64_t)v181;
    uint64_t v131 = v169;
    uint64_t v130 = v170;
    uint64_t v132 = v168;
LABEL_59:
    int v135 = 0;
    goto LABEL_60;
  }
  uint64_t v121 = v180;
  sub_21F9B3CF4(v192 + v184[7], v180, type metadata accessor for MajorValueAlignmentStorage);
  double v122 = v227;
  int v123 = v228;
  uint64_t v124 = v121;
  uint64_t v125 = v175;
  sub_21F9B3CF4(v124, v175, type metadata accessor for MajorValueAlignmentStorage);
  v186 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v195 + 48);
  int v126 = v186(v125, 2, v196);
  v127 = v188;
  if (!v126)
  {
    sub_21F9B3C14(v125, (uint64_t)v188, type metadata accessor for ValueAlignment);
LABEL_56:
    uint64_t v133 = 0;
    goto LABEL_58;
  }
  if (v126 == 1)
  {
    double v128 = 1.0;
    if (!v123) {
      double v128 = v122;
    }
    double *v188 = v128;
    swift_storeEnumTagMultiPayload();
    goto LABEL_56;
  }
  uint64_t v133 = 1;
LABEL_58:
  uint64_t v134 = v196;
  int v135 = 1;
  (*(void (**)(double *, uint64_t, uint64_t, uint64_t))(v195 + 56))(v127, v133, 1, v196);
  sub_21F9B3DFC(v180, type metadata accessor for MajorValueAlignmentStorage);
  int v136 = v186((uint64_t)v127, 1, v134);
  uint64_t v129 = (uint64_t)v181;
  uint64_t v131 = v169;
  uint64_t v130 = v170;
  uint64_t v132 = v168;
  if (v136 == 1) {
    goto LABEL_59;
  }
LABEL_60:
  sub_21F76C978((uint64_t)v127, v129, &qword_267EEA088);
  uint64_t v137 = v182;
  sub_21F9B3CF4(v192, v182, type metadata accessor for ValueAlignedChartScrollTargetBehavior);
  int v138 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v195 + 48))(v129, 1, v196);
  uint64_t v139 = v183;
  if (v138 == 1)
  {
    sub_21F9B3CF4(v137 + v184[5], v183, type metadata accessor for ValueAlignment);
    sub_21F9B3DFC(v137, type metadata accessor for ValueAlignedChartScrollTargetBehavior);
    sub_21F76CA84(v129, &qword_267EEA088);
  }
  else
  {
    sub_21F9B3DFC(v137, type metadata accessor for ValueAlignedChartScrollTargetBehavior);
    sub_21F9B3C14(v129, v139, type metadata accessor for ValueAlignment);
  }
  uint64_t v140 = v172;
  uint64_t v141 = (uint64_t)v189;
  sub_21FA242E0();
  sub_21F9B403C(&v229, v135, v139, (uint64_t)v231, v141, v70);
  sub_21F76EE70(v176, v174, v173, v140, v193, (uint64_t)v187, v185, v179, v178, v171, v130, v131, v132, v167);
  (*(void (**)(uint64_t, uint64_t))(v190 + 8))(v141, v191);
  sub_21F9B3DFC(v139, type metadata accessor for ValueAlignment);
  sub_21F76CA84((uint64_t)v188, &qword_267EEA088);
LABEL_64:
  double v142 = v230;
  double v143 = v229;
  sub_21FA25070();
  double v145 = v144;
  sub_21FA25080();
  double v147 = v145 - v146;
  if (v142 > 0.0) {
    double v148 = v142;
  }
  else {
    double v148 = 0.0;
  }
  if (v147 >= v148) {
    double v149 = v148;
  }
  else {
    double v149 = v147;
  }
  sub_21FA25070();
  double v151 = v150;
  sub_21FA25080();
  double v153 = v151 - v152;
  if (v143 > 0.0) {
    double v154 = v143;
  }
  else {
    double v154 = 0.0;
  }
  if (v153 >= v154) {
    double v155 = v154;
  }
  else {
    double v155 = v153;
  }
  v156 = (void (*)(uint64_t *, void))sub_21FA24550();
  double *v157 = v149;
  v157[1] = v155;
  v156(&v197, 0);
  return sub_21F7794A0((uint64_t)v225);
}

uint64_t sub_21F9B3044()
{
  return sub_21FA25CE0() & 1;
}

uint64_t sub_21F9B30B8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[4];
  sub_21F77E0FC(v2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v5, v6);
}

uint64_t sub_21F9B3124()
{
  return AGCompareValues();
}

uint64_t sub_21F9B3178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_21F9BF354();

  return MEMORY[0x270EFF9B8](a1, a2, a3, a4, v8);
}

double sub_21F9B31DC()
{
  qword_26AD520C8 = 0;
  double result = 0.0;
  xmmword_26AD520A8 = 0u;
  unk_26AD520B8 = 0u;
  word_26AD520D0 = -256;
  xmmword_26AD520D8 = 0u;
  unk_26AD520E8 = 0u;
  qword_26AD520F8 = 0;
  word_26AD52100 = -256;
  return result;
}

uint64_t sub_21F9B3208@<X0>(uint64_t a1@<X8>)
{
  if (qword_26AD44910 != -1) {
    swift_once();
  }

  return sub_21F9BECCC((uint64_t)&xmmword_26AD520A8, a1);
}

uint64_t sub_21F9B3274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_21F9BF300();

  return MEMORY[0x270EFF9B8](a1, a2, a3, a4, v8);
}

uint64_t sub_21F9B32D8(uint64_t *a1, uint64_t *a2)
{
  sub_21F9BEB90(a1, (uint64_t)v15);
  sub_21F9BEB90(a2, (uint64_t)&v17);
  if ((v16 & 1) == 0)
  {
    sub_21F9BEB90(v15, (uint64_t)&v12);
    uint64_t v4 = v12;
    uint64_t v5 = v13;
    if (v20)
    {
      sub_21F7654F0(v12, v13, v14);
LABEL_7:
      sub_21F76CA84((uint64_t)v15, &qword_267EEA1C0);
LABEL_22:
      char v3 = 0;
      return v3 & 1;
    }
    uint64_t v6 = *(void *)&v17;
    uint64_t v7 = v18;
    char v8 = v19;
    if (v14)
    {
      if (v14 == 1)
      {
        if (v19 != 1) {
          goto LABEL_20;
        }
        goto LABEL_13;
      }
      if (v19 == 2)
      {
        if (v12 == *(void *)&v17 && v13 == v18)
        {
          sub_21F7654F0(v12, v13, 2);
          sub_21F7654F0(v4, v5, 2);
        }
        else
        {
          char v10 = sub_21FA268D0();
          sub_21F7654F0(v4, v5, 2);
          sub_21F7654F0(v6, v7, 2);
          if ((v10 & 1) == 0) {
            goto LABEL_21;
          }
        }
LABEL_25:
        sub_21F9BE30C((uint64_t)v15);
        char v3 = 1;
        return v3 & 1;
      }
      sub_21F7654F0(v12, v13, 2);
    }
    else if (!v19)
    {
LABEL_13:
      if (*(double *)&v12 != v17) {
        goto LABEL_21;
      }
      goto LABEL_25;
    }
LABEL_20:
    sub_21F7654F0(v6, v7, v8);
LABEL_21:
    sub_21F9BE30C((uint64_t)v15);
    goto LABEL_22;
  }
  sub_21F9BEB90(v15, (uint64_t)&v12);
  if (v20 != 1)
  {
    sub_21F9BEBC8((uint64_t)&v12);
    goto LABEL_7;
  }
  sub_21F9BEC1C((uint64_t)&v17, (uint64_t)v11);
  char v3 = sub_21FA05574((uint64_t)&v12, (uint64_t)v11);
  sub_21F9BEBC8((uint64_t)v11);
  sub_21F9BEBC8((uint64_t)&v12);
  sub_21F9BE30C((uint64_t)v15);
  return v3 & 1;
}

BOOL sub_21F9B34C0(uint64_t a1, uint64_t a2)
{
  sub_21F76C978(a1, (uint64_t)v14, &qword_26AD46A18);
  sub_21F76C978(a2, (uint64_t)v13, &qword_26AD46A18);
  sub_21F76C978((uint64_t)v14, (uint64_t)v9, &qword_26AD46A18);
  sub_21F76C978((uint64_t)v13, (uint64_t)v11, &qword_26AD46A18);
  if (v10 == 255)
  {
    sub_21F76CA84((uint64_t)v13, &qword_26AD46A18);
    sub_21F76CA84((uint64_t)v14, &qword_26AD46A18);
    if (v12 != 255)
    {
LABEL_11:
      sub_21F76CA84((uint64_t)v9, &qword_26AD45750);
      return 0;
    }
    sub_21F76CA84((uint64_t)v9, &qword_26AD46A18);
LABEL_6:
    sub_21F76C978(a1 + 48, (uint64_t)v14, &qword_26AD46A18);
    sub_21F76C978(a2 + 48, (uint64_t)v13, &qword_26AD46A18);
    sub_21F76C978((uint64_t)v14, (uint64_t)v9, &qword_26AD46A18);
    sub_21F76C978((uint64_t)v13, (uint64_t)v11, &qword_26AD46A18);
    if (v10 == 255)
    {
      sub_21F76CA84((uint64_t)v13, &qword_26AD46A18);
      sub_21F76CA84((uint64_t)v14, &qword_26AD46A18);
      if (v12 == 255)
      {
        sub_21F76CA84((uint64_t)v9, &qword_26AD46A18);
        return 1;
      }
      goto LABEL_11;
    }
    sub_21F76C978((uint64_t)v9, (uint64_t)v8, &qword_26AD46A18);
    if (v12 == 255) {
      goto LABEL_10;
    }
    sub_21F9BEB78(v11, v7);
    char v6 = sub_21F9B32D8(v8, (uint64_t *)v7);
    sub_21F9BE30C((uint64_t)v7);
    sub_21F76CA84((uint64_t)v13, &qword_26AD46A18);
    sub_21F76CA84((uint64_t)v14, &qword_26AD46A18);
    sub_21F9BE30C((uint64_t)v8);
    sub_21F76CA84((uint64_t)v9, &qword_26AD46A18);
    return (v6 & 1) != 0;
  }
  sub_21F76C978((uint64_t)v9, (uint64_t)v8, &qword_26AD46A18);
  if (v12 == 255)
  {
LABEL_10:
    sub_21F76CA84((uint64_t)v13, &qword_26AD46A18);
    sub_21F76CA84((uint64_t)v14, &qword_26AD46A18);
    sub_21F9BE30C((uint64_t)v8);
    goto LABEL_11;
  }
  sub_21F9BEB78(v11, v7);
  char v4 = sub_21F9B32D8(v8, (uint64_t *)v7);
  sub_21F9BE30C((uint64_t)v7);
  sub_21F76CA84((uint64_t)v13, &qword_26AD46A18);
  sub_21F76CA84((uint64_t)v14, &qword_26AD46A18);
  sub_21F9BE30C((uint64_t)v8);
  sub_21F76CA84((uint64_t)v9, &qword_26AD46A18);
  if (v4) {
    goto LABEL_6;
  }
  return 0;
}

uint64_t sub_21F9B375C()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

double sub_21F9B376C(uint64_t a1)
{
  double result = *(double *)(v1 + 16);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_21F9B377C()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

double sub_21F9B378C(uint64_t a1)
{
  double result = *(double *)(v1 + 16);
  *(double *)(a1 + 24) = result;
  *(unsigned char *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_21F9B37A0(uint64_t a1)
{
  return sub_21F9AC2F4(a1, (uint64_t)v1+ ((*(unsigned __int8 *)(*(void *)(v1[3] - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1[3] - 8) + 80)), v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_21F9B37E4()
{
  return sub_21FA24B40();
}

uint64_t sub_21F9B382C(uint64_t a1)
{
  v6[0] = sub_21F76C248(v1+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 24) - 8) + 80)), *(void *)(v1 + 24), *(void *)(v1 + 40));
  v6[1] = v3;
  char v7 = v4;
  char v8 = 0;
  return sub_21F799B78((uint64_t)v6, a1, &qword_26AD46A18);
}

uint64_t sub_21F9B38BC(uint64_t a1)
{
  return sub_21F9B3B00(a1, (uint64_t (*)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_21F9AC4B0);
}

uint64_t sub_21F9B38D8()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t sub_21F9B3960(uint64_t a1)
{
  v6[0] = sub_21F76C248(v1+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 24) - 8) + 80)), *(void *)(v1 + 24), *(void *)(v1 + 40));
  v6[1] = v3;
  char v7 = v4;
  char v8 = 0;
  return sub_21F799B78((uint64_t)v6, a1 + 48, &qword_26AD46A18);
}

uint64_t sub_21F9B39F0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = (int *)(sub_21FA25780() - 8);
  uint64_t v3 = *(unsigned __int8 *)(*(void *)v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(*(void *)v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = v0 + v4;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v7 + v2[10], v1);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t sub_21F9B3AE8(uint64_t a1)
{
  return sub_21F9B3B00(a1, (uint64_t (*)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_21F9AC8F0);
}

uint64_t sub_21F9B3B00(uint64_t a1, uint64_t (*a2)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = v2[2];
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[4];
  uint64_t v7 = v2[5];
  uint64_t v8 = *(void *)(sub_21FA25780() - 8);
  uint64_t v9 = (char *)v2 + ((*(unsigned __int8 *)(v8 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));

  return a2(a1, v9, v4, v5, v6, v7);
}

uint64_t type metadata accessor for ChartScrollTargetBehaviorContext(uint64_t a1)
{
  return sub_21F769038(a1, qword_267EEA098);
}

uint64_t sub_21F9B3BD0()
{
  return sub_21FA24B40();
}

uint64_t sub_21F9B3C14(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for MajorValueAlignment()
{
  return sub_21F764F08();
}

uint64_t type metadata accessor for MajorValueAlignmentStorage(uint64_t a1)
{
  return sub_21F769038(a1, (uint64_t *)&unk_267EEA168);
}

uint64_t type metadata accessor for ValueAlignment(uint64_t a1)
{
  return sub_21F769038(a1, (uint64_t *)&unk_267EEA158);
}

uint64_t type metadata accessor for ValueAlignedChartScrollTargetBehavior(uint64_t a1)
{
  return sub_21F769038(a1, (uint64_t *)&unk_267EEA128);
}

uint64_t sub_21F9B3CF4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_21F9B3D5C()
{
  return sub_21FA25090();
}

uint64_t sub_21F9B3D84()
{
  return 8;
}

uint64_t sub_21F9B3D90()
{
  return swift_release();
}

uint64_t sub_21F9B3D98(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_21F9B3DA8()
{
  return sub_21FA25B80();
}

void *sub_21F9B3DF0(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_21F9B3DFC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_21F9B3E5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  sub_21F76C9DC(a1, (uint64_t)v43, &qword_26AD47AB8);
  uint64_t v8 = v43[0];
  uint64_t v9 = v43[1];
  uint64_t v10 = v43[4];
  uint64_t v41 = v43[3];
  uint64_t v42 = v43[2];
  uint64_t v12 = v43[5];
  uint64_t v11 = v43[6];
  uint64_t v13 = v43[7];
  uint64_t v14 = v43[8];
  uint64_t v39 = v43[10];
  uint64_t v40 = v43[9];
  uint64_t v37 = v43[12];
  uint64_t v38 = v43[11];
  char v36 = v44;
  uint64_t result = sub_21F76C9DC(a1, (uint64_t)v45, &qword_26AD47AB8);
  if (v49)
  {
    double v16 = 0.0;
    if (v48)
    {
      double v18 = 0.0;
      uint64_t v20 = v41;
      uint64_t v19 = v42;
      uint64_t v22 = v39;
      uint64_t v21 = v40;
      uint64_t v24 = v37;
      uint64_t v23 = v38;
      char v25 = v36;
    }
    else
    {
      uint64_t v17 = *(void *)(v47 + 16);
      double v18 = 0.0;
      uint64_t v20 = v41;
      uint64_t v19 = v42;
      uint64_t v22 = v39;
      uint64_t v21 = v40;
      uint64_t v24 = v37;
      uint64_t v23 = v38;
      char v25 = v36;
      if (v17)
      {
        double v16 = *(double *)(v47 + 32);
        double v18 = *(double *)(v47 + 32 + 8 * v17 - 8);
      }
    }
    BOOL v28 = v18 - v16 < 0.0;
  }
  else
  {
    uint64_t v26 = *(void *)(v46 + 16);
    if (v26) {
      unint64_t v27 = COERCE_UNSIGNED_INT64(*(double *)(v46 + 32 + 8 * v26 - 8) - *(double *)(v46 + 32)) >> 63;
    }
    else {
      unint64_t v27 = 0;
    }
    uint64_t v20 = v41;
    uint64_t v19 = v42;
    uint64_t v22 = v39;
    uint64_t v21 = v40;
    uint64_t v24 = v37;
    uint64_t v23 = v38;
    char v25 = v36;
    double v29 = 0.0;
    if (v48)
    {
      double v31 = 0.0;
    }
    else
    {
      uint64_t v30 = *(void *)(v47 + 16);
      double v31 = 0.0;
      if (v30)
      {
        double v29 = *(double *)(v47 + 32);
        double v31 = *(double *)(v47 + 32 + 8 * v30 - 8);
      }
    }
    double v32 = v31 - v29;
    BOOL v33 = v27 == 0;
    BOOL v28 = v27 == 0;
    int v34 = !v33;
    if (v32 >= 0.0) {
      BOOL v28 = v34;
    }
  }
  double v35 = 0.0;
  if (v28) {
    double v35 = a4;
  }
  *(void *)a2 = v8;
  *(void *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = v19;
  *(void *)(a2 + 24) = v20;
  *(void *)(a2 + 32) = v10;
  *(void *)(a2 + 40) = v12;
  *(void *)(a2 + 48) = v11;
  *(void *)(a2 + 56) = v13;
  *(void *)(a2 + 64) = v14;
  *(void *)(a2 + 72) = v21;
  *(void *)(a2 + 80) = v22;
  *(void *)(a2 + 88) = v23;
  *(void *)(a2 + 96) = v24;
  *(unsigned char *)(a2 + 104) = v25;
  *(double *)(a2 + 112) = a3;
  *(double *)(a2 + 120) = a4;
  *(double *)(a2 + 128) = v35;
  return result;
}

uint64_t sub_21F9B403C(double *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  void (*v20)(double *__return_ptr, double *);
  double *v21;
  double v22;
  uint64_t v23;
  char v24;
  char v25;
  void (*v26)(char *, uint64_t);
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  char v31;
  char v32;
  void (*v33)(double *__return_ptr, double *);
  double v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  double v38;
  double v39;
  double *v40;
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  void (*v46)(double *__return_ptr, double *);
  uint64_t v47;
  int v48;
  uint64_t v49;
  double *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v56;
  char v57;
  char v58[32];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void v63[3];
  char v64;
  void (*v65)(double *__return_ptr, double *);
  uint64_t v66;
  char v67;

  uint64_t v47 = a5;
  char v49 = a3;
  char v48 = a2;
  double v50 = a1;
  sub_21F76C9DC(a4, (uint64_t)v58, &qword_26AD47AB8);
  uint64_t v8 = v59;
  double v52 = v60;
  double v53 = v61;
  double v54 = v62;
  uint64_t v9 = type metadata accessor for ValueAlignment(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (double *)((char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = sub_21FA24320();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v51 = a4;
  uint64_t result = sub_21F76C9DC(a4, (uint64_t)v63, &qword_26AD47AB8);
  if ((v67 & 1) == 0)
  {
    uint64_t v20 = v65;
    if (!v65) {
      return result;
    }
    uint64_t v46 = (void (*)(double *__return_ptr, double *))v63[0];
    double v45 = v63[1];
    uint64_t v21 = v50;
    double v55 = *v50;
    swift_retain();
    sub_21F7642FC(v8);
    swift_bridgeObjectRetain();
    sub_21F7637E4(v53, v54);
    v20(&v56, &v55);
    if ((v57 & 1) == 0)
    {
      uint64_t v22 = v56;
      sub_21FA242E0();
      *(double *)&uint64_t v23 = COERCE_DOUBLE(sub_21F9B0BA4((uint64_t)v15, v22));
      char v25 = v24;
      uint64_t v26 = *(void (**)(char *, uint64_t))(v13 + 8);
      v26(v15, v12);
      if ((v25 & 1) == 0)
      {
        unint64_t v27 = *(double *)&v23;
        if ((v48 & 1) == 0)
        {
          char v36 = v51;
          BOOL v33 = v46;
LABEL_31:
          double v55 = v27;
          v33(&v56, &v55);
          uint64_t result = sub_21F891F28(v36);
          *uint64_t v21 = v56;
          return result;
        }
        BOOL v28 = vabdd_f64(*v21, a6);
        if (qword_26AD46270 != -1) {
          swift_once();
        }
        if (*(double *)&qword_26AD52218 < v28)
        {
          double v55 = a6;
          ((void (*)(double *__return_ptr, double *, double))v20)(&v56, &v55, *(double *)&qword_26AD52218);
          if ((v57 & 1) == 0)
          {
            double v29 = v56;
            sub_21FA242E0();
            *(double *)&uint64_t v30 = COERCE_DOUBLE(sub_21F9B0BA4((uint64_t)v15, v29));
            double v32 = v31;
            v26(v15, v12);
            if ((v32 & 1) == 0)
            {
              double v55 = *(double *)&v30;
              BOOL v33 = v46;
              v46(&v56, &v55);
              int v34 = v56;
              double v55 = *(double *)&v23;
              v33(&v56, &v55);
              if (vabdd_f64(v34, v56) >= *(double *)&qword_26AD52218)
              {
                char v36 = v51;
                uint64_t v21 = v50;
              }
              else
              {
                uint64_t v21 = v50;
                double v35 = sub_21F9B17BC(COERCE_UNSIGNED_INT64(*v50 - a6) >> 63, v47, *(double *)&v23);
                char v36 = v51;
                if ((v37 & 1) == 0) {
                  unint64_t v27 = *(double *)&v35;
                }
              }
              goto LABEL_31;
            }
          }
        }
      }
    }
    return sub_21F891F28(v51);
  }
  if (*(void *)(v66 + 16))
  {
    double v17 = *(double *)&v63[2];
    char v18 = v64;
    sub_21F9B3CF4(v49, (uint64_t)v11, type metadata accessor for ValueAlignment);
    uint64_t result = swift_getEnumCaseMultiPayload();
    if (result == 1)
    {
      sub_21F76CA40(qword_267EE80E8);
      uint64_t v19 = swift_allocObject();
      *(_OWORD *)(v19 + 16) = xmmword_21FA28550;
      *(void *)(v19 + 56) = MEMORY[0x263F8D310];
      *(void *)(v19 + 32) = 0xD00000000000003ALL;
      *(void *)(v19 + 40) = 0x800000021FA5FAB0;
      swift_retain();
      sub_21F7642FC(v8);
      swift_bridgeObjectRetain();
      sub_21F7637E4(v53, v54);
      sub_21FA269E0();
      swift_bridgeObjectRelease();
      sub_21F891F28(v51);
      return sub_21F9B3DFC((uint64_t)v11, type metadata accessor for ValueAlignment);
    }
    uint64_t v38 = 0.0;
    if ((v18 & 1) == 0) {
      uint64_t v38 = v17;
    }
    uint64_t v39 = v38 * *v11;
    uint64_t v40 = v50;
    uint64_t v41 = *v50;
    uint64_t v42 = v39 * round(*v50 / v39);
    if ((v48 & 1) == 0) {
      goto LABEL_29;
    }
    double v43 = vabdd_f64(v41, a6);
    swift_retain();
    sub_21F7642FC(v8);
    swift_bridgeObjectRetain();
    sub_21F7637E4(v53, v54);
    if (qword_26AD46270 != -1) {
      swift_once();
    }
    char v44 = *(double *)&qword_26AD52218;
    uint64_t result = sub_21F891F28(v51);
    if (v44 < v43)
    {
      if (vabdd_f64(v39 * round(a6 / v39), v42) < v44)
      {
        if (COERCE__INT64(v41 - a6) < 0) {
          uint64_t v42 = v42 - v39;
        }
        else {
          uint64_t v42 = v39 + v42;
        }
      }
      uint64_t v40 = v50;
LABEL_29:
      *uint64_t v40 = v42;
    }
  }
  return result;
}

uint64_t sub_21F9B46C8(uint64_t a1)
{
  uint64_t result = sub_21F9BEB30(&qword_267EEA090, (void (*)(uint64_t))type metadata accessor for ValueAlignedChartScrollTargetBehavior);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ChartScrollTargetBehaviorContext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    uint64_t v19 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return v19;
  }
  uint64_t v7 = sub_21FA250C0();
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = *(uint64_t *)((char *)a2 + v8 + 8);
  *(void *)uint64_t v9 = *(uint64_t *)((char *)a2 + v8);
  *((void *)v9 + 1) = v11;
  uint64_t v12 = *(uint64_t *)((char *)a2 + v8 + 24);
  *((void *)v9 + 2) = *(uint64_t *)((char *)a2 + v8 + 16);
  *((void *)v9 + 3) = v12;
  uint64_t v13 = (_OWORD *)((char *)a2 + v8 + 32);
  char v14 = v10[315];
  swift_retain();
  swift_retain();
  swift_retain();
  if (v14)
  {
    uint64_t v15 = v9 + 32;
    int v16 = v10[72];
    if (v16 == 255)
    {
      long long v17 = *((_OWORD *)v10 + 3);
      *uint64_t v15 = *v13;
      *((_OWORD *)v9 + 3) = v17;
      *(_OWORD *)(v9 + 57) = *(_OWORD *)(v10 + 57);
    }
    else
    {
      long long v20 = *(_OWORD *)(v10 + 56);
      *(_OWORD *)(v9 + 56) = v20;
      (**(void (***)(_OWORD *, uint64_t))(v20 - 8))(v15, (uint64_t)(v10 + 32));
      v9[72] = (v16 & 1) != 0;
    }
    uint64_t v21 = v9 + 80;
    uint64_t v22 = v10 + 80;
    int v23 = v10[120];
    if (v23 == 255)
    {
      long long v24 = *((_OWORD *)v10 + 6);
      *uint64_t v21 = *v22;
      *((_OWORD *)v9 + 6) = v24;
      *(_OWORD *)(v9 + 105) = *(_OWORD *)(v10 + 105);
    }
    else
    {
      long long v25 = *(_OWORD *)(v10 + 104);
      *(_OWORD *)(v9 + 104) = v25;
      (**(void (***)(_OWORD *, _OWORD *))(v25 - 8))(v21, v22);
      v9[120] = (v23 & 1) != 0;
    }
    uint64_t v26 = v9 + 128;
    unint64_t v27 = v10 + 128;
    int v28 = v10[168];
    if (v28 == 255)
    {
      long long v29 = *((_OWORD *)v10 + 9);
      *uint64_t v26 = *v27;
      *((_OWORD *)v9 + 9) = v29;
      *(_OWORD *)(v9 + 153) = *(_OWORD *)(v10 + 153);
    }
    else
    {
      long long v30 = *(_OWORD *)(v10 + 152);
      *(_OWORD *)(v9 + 152) = v30;
      (**(void (***)(_OWORD *, _OWORD *))(v30 - 8))(v26, v27);
      v9[168] = (v28 & 1) != 0;
    }
    double v31 = v9 + 176;
    double v32 = v10 + 176;
    int v33 = v10[216];
    if (v33 == 255)
    {
      long long v34 = *((_OWORD *)v10 + 12);
      *double v31 = *v32;
      *((_OWORD *)v9 + 12) = v34;
      *(_OWORD *)(v9 + 201) = *(_OWORD *)(v10 + 201);
    }
    else
    {
      long long v35 = *(_OWORD *)(v10 + 200);
      *(_OWORD *)(v9 + 200) = v35;
      (**(void (***)(_OWORD *, _OWORD *))(v35 - 8))(v31, v32);
      v9[216] = (v33 & 1) != 0;
    }
    char v36 = v9 + 224;
    uint64_t v37 = v10 + 224;
    int v38 = v10[264];
    if (v38 == 255)
    {
      long long v39 = *((_OWORD *)v10 + 15);
      *char v36 = *v37;
      *((_OWORD *)v9 + 15) = v39;
      *(_OWORD *)(v9 + 249) = *(_OWORD *)(v10 + 249);
    }
    else
    {
      long long v40 = *(_OWORD *)(v10 + 248);
      *(_OWORD *)(v9 + 248) = v40;
      (**(void (***)(_OWORD *, _OWORD *))(v40 - 8))(v36, v37);
      uint64_t v41 = (BOOL *)(v9 + 264);
      *uint64_t v41 = (v38 & 1) != 0;
    }
    uint64_t v42 = v9 + 272;
    double v43 = v10 + 272;
    int v44 = v10[312];
    if (v44 == 255)
    {
      long long v45 = *((_OWORD *)v10 + 18);
      *uint64_t v42 = *v43;
      *((_OWORD *)v9 + 18) = v45;
      *(_OWORD *)(v9 + 297) = *(_OWORD *)(v10 + 297);
    }
    else
    {
      uint64_t v46 = *((void *)v10 + 37);
      uint64_t v47 = *((void *)v10 + 38);
      *((void *)v9 + 37) = v46;
      *((void *)v9 + 38) = v47;
      (**(void (***)(_OWORD *, _OWORD *))(v46 - 8))(v42, v43);
      char v48 = (BOOL *)(v9 + 312);
      *char v48 = (v44 & 1) != 0;
    }
    *(_WORD *)(v9 + 313) = *(_WORD *)(v10 + 313);
    v9[315] = 1;
  }
  else
  {
    *((void *)v9 + 4) = *(void *)v13;
    v9[315] = 0;
    swift_retain();
  }
  v9[316] = v10[316];
  uint64_t v49 = *((void *)v10 + 40);
  if (v49)
  {
    uint64_t v50 = *((void *)v10 + 41);
    *((void *)v9 + 40) = v49;
    *((void *)v9 + 41) = v50;
    swift_retain();
    uint64_t v51 = *((void *)v10 + 42);
    if (v51) {
      goto LABEL_38;
    }
  }
  else
  {
    *((_OWORD *)v9 + 20) = *((_OWORD *)v10 + 20);
    uint64_t v51 = *((void *)v10 + 42);
    if (v51)
    {
LABEL_38:
      uint64_t v52 = *((void *)v10 + 43);
      *((void *)v9 + 42) = v51;
      *((void *)v9 + 43) = v52;
      swift_retain();
      uint64_t v53 = *((void *)v10 + 44);
      if (v53) {
        goto LABEL_39;
      }
      goto LABEL_44;
    }
  }
  *((_OWORD *)v9 + 21) = *((_OWORD *)v10 + 21);
  uint64_t v53 = *((void *)v10 + 44);
  if (v53)
  {
LABEL_39:
    uint64_t v54 = *((void *)v10 + 45);
    *((void *)v9 + 44) = v53;
    *((void *)v9 + 45) = v54;
    swift_retain();
    uint64_t v55 = *((void *)v10 + 46);
    if (v55) {
      goto LABEL_40;
    }
LABEL_45:
    *((_OWORD *)v9 + 23) = *((_OWORD *)v10 + 23);
    uint64_t v57 = *((void *)v10 + 48);
    if (v57) {
      goto LABEL_41;
    }
    goto LABEL_46;
  }
LABEL_44:
  *((_OWORD *)v9 + 22) = *((_OWORD *)v10 + 22);
  uint64_t v55 = *((void *)v10 + 46);
  if (!v55) {
    goto LABEL_45;
  }
LABEL_40:
  uint64_t v56 = *((void *)v10 + 47);
  *((void *)v9 + 46) = v55;
  *((void *)v9 + 47) = v56;
  swift_retain();
  uint64_t v57 = *((void *)v10 + 48);
  if (v57)
  {
LABEL_41:
    uint64_t v58 = *((void *)v10 + 49);
    *((void *)v9 + 48) = v57;
    *((void *)v9 + 49) = v58;
    swift_retain();
    goto LABEL_47;
  }
LABEL_46:
  *((_OWORD *)v9 + 24) = *((_OWORD *)v10 + 24);
LABEL_47:
  int v59 = v10[504];
  v216 = a1;
  if (v59 == 255)
  {
    long long v60 = *((_OWORD *)v10 + 30);
    *((_OWORD *)v9 + 29) = *((_OWORD *)v10 + 29);
    *((_OWORD *)v9 + 30) = v60;
    *(_OWORD *)(v9 + 489) = *(_OWORD *)(v10 + 489);
    long long v61 = *((_OWORD *)v10 + 26);
    *((_OWORD *)v9 + 25) = *((_OWORD *)v10 + 25);
    *((_OWORD *)v9 + 26) = v61;
    long long v62 = *((_OWORD *)v10 + 28);
    *((_OWORD *)v9 + 27) = *((_OWORD *)v10 + 27);
    *((_OWORD *)v9 + 28) = v62;
  }
  else
  {
    char v211 = v59 & 1;
    uint64_t v63 = *((void *)v10 + 50);
    uint64_t v64 = *((void *)v10 + 51);
    uint64_t v65 = *((void *)v10 + 52);
    uint64_t v66 = *((void *)v10 + 53);
    uint64_t v67 = *((void *)v10 + 54);
    uint64_t v68 = *((void *)v10 + 55);
    uint64_t v69 = *((void *)v10 + 56);
    uint64_t v70 = *((void *)v10 + 57);
    uint64_t v187 = *((void *)v10 + 58);
    uint64_t v191 = *((void *)v10 + 59);
    uint64_t v196 = *((void *)v10 + 60);
    uint64_t v201 = *((void *)v10 + 61);
    uint64_t v206 = *((void *)v10 + 62);
    sub_21F764268(v63, v64, v65, v66, v67, v68, v69, v70, v187);
    *((void *)v9 + 50) = v63;
    *((void *)v9 + 51) = v64;
    *((void *)v9 + 52) = v65;
    *((void *)v9 + 53) = v66;
    *((void *)v9 + 54) = v67;
    *((void *)v9 + 55) = v68;
    *((void *)v9 + 56) = v69;
    *((void *)v9 + 57) = v70;
    *((void *)v9 + 58) = v187;
    *((void *)v9 + 59) = v191;
    *((void *)v9 + 60) = v196;
    *((void *)v9 + 61) = v201;
    *((void *)v9 + 62) = v206;
    v9[504] = v211;
  }
  int v71 = v10[616];
  if (v71 == 255)
  {
    long long v72 = *((_OWORD *)v10 + 37);
    *((_OWORD *)v9 + 36) = *((_OWORD *)v10 + 36);
    *((_OWORD *)v9 + 37) = v72;
    *(_OWORD *)(v9 + 601) = *(_OWORD *)(v10 + 601);
    long long v73 = *((_OWORD *)v10 + 33);
    *((_OWORD *)v9 + 32) = *((_OWORD *)v10 + 32);
    *((_OWORD *)v9 + 33) = v73;
    long long v74 = *((_OWORD *)v10 + 35);
    *((_OWORD *)v9 + 34) = *((_OWORD *)v10 + 34);
    *((_OWORD *)v9 + 35) = v74;
  }
  else
  {
    char v212 = v71 & 1;
    uint64_t v75 = *((void *)v10 + 64);
    uint64_t v76 = *((void *)v10 + 65);
    uint64_t v77 = *((void *)v10 + 66);
    uint64_t v78 = *((void *)v10 + 67);
    uint64_t v79 = *((void *)v10 + 68);
    uint64_t v80 = *((void *)v10 + 69);
    uint64_t v81 = *((void *)v10 + 70);
    uint64_t v82 = *((void *)v10 + 71);
    uint64_t v188 = *((void *)v10 + 72);
    uint64_t v192 = *((void *)v10 + 73);
    uint64_t v197 = *((void *)v10 + 74);
    uint64_t v202 = *((void *)v10 + 75);
    uint64_t v207 = *((void *)v10 + 76);
    sub_21F764268(v75, v76, v77, v78, v79, v80, v81, v82, v188);
    *((void *)v9 + 64) = v75;
    *((void *)v9 + 65) = v76;
    *((void *)v9 + 66) = v77;
    *((void *)v9 + 67) = v78;
    *((void *)v9 + 68) = v79;
    *((void *)v9 + 69) = v80;
    *((void *)v9 + 70) = v81;
    *((void *)v9 + 71) = v82;
    *((void *)v9 + 72) = v188;
    *((void *)v9 + 73) = v192;
    *((void *)v9 + 74) = v197;
    *((void *)v9 + 75) = v202;
    *((void *)v9 + 76) = v207;
    v9[616] = v212;
  }
  int v83 = v10[720];
  if (v83 == 255)
  {
    long long v84 = *((_OWORD *)v10 + 44);
    *((_OWORD *)v9 + 43) = *((_OWORD *)v10 + 43);
    *((_OWORD *)v9 + 44) = v84;
    v9[720] = v10[720];
    long long v85 = *((_OWORD *)v10 + 40);
    *((_OWORD *)v9 + 39) = *((_OWORD *)v10 + 39);
    *((_OWORD *)v9 + 40) = v85;
    long long v86 = *((_OWORD *)v10 + 42);
    *((_OWORD *)v9 + 41) = *((_OWORD *)v10 + 41);
    *((_OWORD *)v9 + 42) = v86;
  }
  else
  {
    char v213 = v83 & 1;
    uint64_t v87 = *((void *)v10 + 78);
    uint64_t v88 = *((void *)v10 + 79);
    uint64_t v89 = *((void *)v10 + 80);
    uint64_t v90 = *((void *)v10 + 81);
    uint64_t v91 = *((void *)v10 + 82);
    uint64_t v92 = *((void *)v10 + 83);
    uint64_t v93 = *((void *)v10 + 84);
    uint64_t v94 = *((void *)v10 + 85);
    uint64_t v193 = *((void *)v10 + 86);
    uint64_t v198 = *((void *)v10 + 87);
    uint64_t v203 = *((void *)v10 + 88);
    uint64_t v208 = *((void *)v10 + 89);
    sub_21F7E0AB8(v87, v88, v89, v90, v91, v92, v93, v94);
    *((void *)v9 + 78) = v87;
    *((void *)v9 + 79) = v88;
    *((void *)v9 + 80) = v89;
    *((void *)v9 + 81) = v90;
    *((void *)v9 + 82) = v91;
    *((void *)v9 + 83) = v92;
    *((void *)v9 + 84) = v93;
    *((void *)v9 + 85) = v94;
    *((void *)v9 + 86) = v193;
    *((void *)v9 + 87) = v198;
    *((void *)v9 + 88) = v203;
    *((void *)v9 + 89) = v208;
    v9[720] = v213;
  }
  int v95 = v10[856];
  if (v95 != 255)
  {
    uint64_t v100 = *((void *)v10 + 92);
    *((void *)v9 + 91) = *((void *)v10 + 91);
    *((void *)v9 + 92) = v100;
    int v101 = v9 + 744;
    int v102 = v10 + 744;
    uint64_t v103 = *((void *)v10 + 96);
    swift_retain();
    if ((v95 & 1) == 0)
    {
      if (v103)
      {
        *((void *)v9 + 96) = v103;
        *((void *)v9 + 97) = *((void *)v10 + 97);
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v103 - 8))((uint64_t)(v9 + 744), (uint64_t)(v10 + 744), v103);
        uint64_t v104 = *((void *)v10 + 98);
        if (v104)
        {
LABEL_61:
          uint64_t v105 = *((void *)v10 + 99);
          *((void *)v9 + 98) = v104;
          *((void *)v9 + 99) = v105;
          swift_retain();
LABEL_67:
          *((void *)v9 + 100) = *((void *)v10 + 100);
          unsigned __int8 v109 = (uint64_t *)(v10 + 808);
          int v110 = v10[816];
          swift_bridgeObjectRetain();
          if (v110 == 255)
          {
            *((void *)v9 + 101) = *v109;
            v9[816] = v10[816];
          }
          else
          {
            char v111 = v110 & 1;
            uint64_t v112 = *v109;
            sub_21F7637D8(v112, v111);
            *((void *)v9 + 101) = v112;
            v9[816] = v111;
          }
          long long v113 = *(_OWORD *)(v10 + 840);
          *(_OWORD *)(v9 + 824) = *(_OWORD *)(v10 + 824);
          *(_OWORD *)(v9 + 840) = v113;
          v9[856] = 0;
          goto LABEL_77;
        }
      }
      else
      {
        long long v108 = *(_OWORD *)(v10 + 760);
        *int v101 = *v102;
        *(_OWORD *)(v9 + 760) = v108;
        *((void *)v9 + 97) = *((void *)v10 + 97);
        uint64_t v104 = *((void *)v10 + 98);
        if (v104) {
          goto LABEL_61;
        }
      }
      *((_OWORD *)v9 + 49) = *((_OWORD *)v10 + 49);
      goto LABEL_67;
    }
    if (v103)
    {
      *((void *)v9 + 96) = v103;
      *((void *)v9 + 97) = *((void *)v10 + 97);
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v103 - 8))((uint64_t)(v9 + 744), (uint64_t)(v10 + 744), v103);
      uint64_t v106 = *((void *)v10 + 98);
      if (v106)
      {
LABEL_64:
        uint64_t v107 = *((void *)v10 + 99);
        *((void *)v9 + 98) = v106;
        *((void *)v9 + 99) = v107;
        swift_retain();
LABEL_73:
        *((void *)v9 + 100) = *((void *)v10 + 100);
        uint64_t v115 = (uint64_t *)(v10 + 808);
        int v116 = v10[816];
        swift_bridgeObjectRetain();
        if (v116 == 255)
        {
          *((void *)v9 + 101) = *v115;
          v9[816] = v10[816];
        }
        else
        {
          char v117 = v116 & 1;
          uint64_t v118 = *v115;
          sub_21F7637D8(v118, v117);
          *((void *)v9 + 101) = v118;
          v9[816] = v117;
        }
        long long v119 = *(_OWORD *)(v10 + 840);
        *(_OWORD *)(v9 + 824) = *(_OWORD *)(v10 + 824);
        *(_OWORD *)(v9 + 840) = v119;
        v9[856] = 1;
        goto LABEL_77;
      }
    }
    else
    {
      long long v114 = *(_OWORD *)(v10 + 760);
      *int v101 = *v102;
      *(_OWORD *)(v9 + 760) = v114;
      *((void *)v9 + 97) = *((void *)v10 + 97);
      uint64_t v106 = *((void *)v10 + 98);
      if (v106) {
        goto LABEL_64;
      }
    }
    *((_OWORD *)v9 + 49) = *((_OWORD *)v10 + 49);
    goto LABEL_73;
  }
  long long v96 = *(_OWORD *)(v10 + 840);
  *(_OWORD *)(v9 + 824) = *(_OWORD *)(v10 + 824);
  *(_OWORD *)(v9 + 840) = v96;
  v9[856] = v10[856];
  long long v97 = *(_OWORD *)(v10 + 776);
  *(_OWORD *)(v9 + 760) = *(_OWORD *)(v10 + 760);
  *(_OWORD *)(v9 + 776) = v97;
  long long v98 = *(_OWORD *)(v10 + 808);
  *(_OWORD *)(v9 + 792) = *(_OWORD *)(v10 + 792);
  *(_OWORD *)(v9 + 808) = v98;
  long long v99 = *(_OWORD *)(v10 + 744);
  *(_OWORD *)(v9 + 728) = *(_OWORD *)(v10 + 728);
  *(_OWORD *)(v9 + 744) = v99;
LABEL_77:
  int v120 = v10[968];
  if (v120 == 255)
  {
    long long v121 = *((_OWORD *)v10 + 59);
    *((_OWORD *)v9 + 58) = *((_OWORD *)v10 + 58);
    *((_OWORD *)v9 + 59) = v121;
    *(_OWORD *)(v9 + 953) = *(_OWORD *)(v10 + 953);
    long long v122 = *((_OWORD *)v10 + 55);
    *((_OWORD *)v9 + 54) = *((_OWORD *)v10 + 54);
    *((_OWORD *)v9 + 55) = v122;
    long long v123 = *((_OWORD *)v10 + 57);
    *((_OWORD *)v9 + 56) = *((_OWORD *)v10 + 56);
    *((_OWORD *)v9 + 57) = v123;
  }
  else
  {
    char v214 = v120 & 1;
    uint64_t v124 = *((void *)v10 + 108);
    uint64_t v125 = *((void *)v10 + 109);
    uint64_t v126 = *((void *)v10 + 110);
    uint64_t v127 = *((void *)v10 + 111);
    uint64_t v128 = *((void *)v10 + 112);
    uint64_t v129 = *((void *)v10 + 113);
    uint64_t v130 = *((void *)v10 + 114);
    uint64_t v131 = *((void *)v10 + 115);
    uint64_t v189 = *((void *)v10 + 116);
    uint64_t v194 = *((void *)v10 + 117);
    uint64_t v199 = *((void *)v10 + 118);
    uint64_t v204 = *((void *)v10 + 119);
    uint64_t v209 = *((void *)v10 + 120);
    sub_21F764268(v124, v125, v126, v127, v128, v129, v130, v131, v189);
    *((void *)v9 + 108) = v124;
    *((void *)v9 + 109) = v125;
    *((void *)v9 + 110) = v126;
    *((void *)v9 + 111) = v127;
    *((void *)v9 + 112) = v128;
    *((void *)v9 + 113) = v129;
    *((void *)v9 + 114) = v130;
    *((void *)v9 + 115) = v131;
    *((void *)v9 + 116) = v189;
    *((void *)v9 + 117) = v194;
    *((void *)v9 + 118) = v199;
    *((void *)v9 + 119) = v204;
    *((void *)v9 + 120) = v209;
    v9[968] = v214;
  }
  int v132 = v10[1104];
  if (v132 == 255)
  {
    long long v133 = *((_OWORD *)v10 + 68);
    *((_OWORD *)v9 + 67) = *((_OWORD *)v10 + 67);
    *((_OWORD *)v9 + 68) = v133;
    v9[1104] = v10[1104];
    long long v134 = *((_OWORD *)v10 + 64);
    *((_OWORD *)v9 + 63) = *((_OWORD *)v10 + 63);
    *((_OWORD *)v9 + 64) = v134;
    long long v135 = *((_OWORD *)v10 + 66);
    *((_OWORD *)v9 + 65) = *((_OWORD *)v10 + 65);
    *((_OWORD *)v9 + 66) = v135;
    long long v136 = *((_OWORD *)v10 + 62);
    *((_OWORD *)v9 + 61) = *((_OWORD *)v10 + 61);
    *((_OWORD *)v9 + 62) = v136;
  }
  else
  {
    char v215 = v132 & 1;
    uint64_t v137 = *((void *)v10 + 122);
    uint64_t v138 = *((void *)v10 + 123);
    uint64_t v139 = *((void *)v10 + 124);
    uint64_t v140 = *((void *)v10 + 125);
    uint64_t v141 = *((void *)v10 + 126);
    uint64_t v142 = *((void *)v10 + 127);
    uint64_t v143 = *((void *)v10 + 128);
    uint64_t v144 = *((void *)v10 + 129);
    uint64_t v184 = *((void *)v10 + 130);
    uint64_t v185 = *((void *)v10 + 131);
    uint64_t v186 = *((void *)v10 + 132);
    uint64_t v190 = *((void *)v10 + 133);
    uint64_t v195 = *((void *)v10 + 134);
    uint64_t v200 = *((void *)v10 + 135);
    uint64_t v205 = *((void *)v10 + 136);
    uint64_t v210 = *((void *)v10 + 137);
    sub_21F7E0C30(v137, v138, v139, v140, v141, v142, v143, v144, v184, v185, v186, v190);
    *((void *)v9 + 122) = v137;
    *((void *)v9 + 123) = v138;
    *((void *)v9 + 124) = v139;
    *((void *)v9 + 125) = v140;
    *((void *)v9 + 126) = v141;
    *((void *)v9 + 127) = v142;
    *((void *)v9 + 128) = v143;
    *((void *)v9 + 129) = v144;
    *((void *)v9 + 130) = v184;
    *((void *)v9 + 131) = v185;
    *((void *)v9 + 132) = v186;
    *((void *)v9 + 133) = v190;
    *((void *)v9 + 134) = v195;
    *((void *)v9 + 135) = v200;
    *((void *)v9 + 136) = v205;
    *((void *)v9 + 137) = v210;
    v9[1104] = v215;
  }
  uint64_t v19 = v216;
  *(_OWORD *)(v9 + 1112) = *(_OWORD *)(v10 + 1112);
  *(_OWORD *)(v9 + 1128) = *(_OWORD *)(v10 + 1128);
  v9[1144] = v10[1144];
  *((_OWORD *)v9 + 72) = *((_OWORD *)v10 + 72);
  *((_OWORD *)v9 + 73) = *((_OWORD *)v10 + 73);
  double v145 = (int *)type metadata accessor for ChartModel.Scenegraph();
  uint64_t v146 = v145[14];
  double v147 = &v9[v146];
  double v148 = &v10[v146];
  uint64_t v149 = sub_21FA24970();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v149 - 8) + 16))(v147, v148, v149);
  *(void *)&v9[v145[15]] = *(void *)&v10[v145[15]];
  *(void *)&v9[v145[16]] = *(void *)&v10[v145[16]];
  uint64_t v150 = v145[17];
  double v151 = &v9[v150];
  double v152 = &v10[v150];
  int v153 = v10[v150 + 40];
  swift_retain();
  swift_retain();
  if (v153 == 255)
  {
    long long v154 = *((_OWORD *)v152 + 1);
    *(_OWORD *)double v151 = *(_OWORD *)v152;
    *((_OWORD *)v151 + 1) = v154;
    *(_OWORD *)(v151 + 25) = *(_OWORD *)(v152 + 25);
  }
  else
  {
    long long v155 = *(_OWORD *)(v152 + 24);
    *(_OWORD *)(v151 + 24) = v155;
    (**(void (***)(char *, char *))(v155 - 8))(v151, v152);
    v151[40] = (v153 & 1) != 0;
  }
  v156 = v151 + 48;
  v157 = v152 + 48;
  int v158 = v152[88];
  if (v158 == 255)
  {
    long long v159 = *((_OWORD *)v152 + 4);
    _OWORD *v156 = *v157;
    *((_OWORD *)v151 + 4) = v159;
    *(_OWORD *)(v151 + 73) = *(_OWORD *)(v152 + 73);
  }
  else
  {
    long long v160 = *(_OWORD *)(v152 + 72);
    *(_OWORD *)(v151 + 72) = v160;
    (**(void (***)(_OWORD *, _OWORD *))(v160 - 8))(v156, v157);
    v151[88] = (v158 & 1) != 0;
  }
  uint64_t v161 = v151 + 96;
  uint64_t v162 = v152 + 96;
  int v163 = v152[136];
  if (v163 == 255)
  {
    long long v164 = *((_OWORD *)v152 + 7);
    *uint64_t v161 = *v162;
    *((_OWORD *)v151 + 7) = v164;
    *(_OWORD *)(v151 + 121) = *(_OWORD *)(v152 + 121);
  }
  else
  {
    long long v165 = *(_OWORD *)(v152 + 120);
    *(_OWORD *)(v151 + 120) = v165;
    (**(void (***)(_OWORD *, _OWORD *))(v165 - 8))(v161, v162);
    v151[136] = (v163 & 1) != 0;
  }
  uint64_t v166 = v151 + 144;
  uint64_t v167 = v152 + 144;
  int v168 = v152[184];
  if (v168 == 255)
  {
    long long v169 = *((_OWORD *)v152 + 10);
    *uint64_t v166 = *v167;
    *((_OWORD *)v151 + 10) = v169;
    *(_OWORD *)(v151 + 169) = *(_OWORD *)(v152 + 169);
  }
  else
  {
    long long v170 = *(_OWORD *)(v152 + 168);
    *(_OWORD *)(v151 + 168) = v170;
    (**(void (***)(_OWORD *, _OWORD *))(v170 - 8))(v166, v167);
    v151[184] = (v168 & 1) != 0;
  }
  uint64_t v171 = v151 + 192;
  uint64_t v172 = v152 + 192;
  int v173 = v152[232];
  if (v173 == 255)
  {
    long long v174 = *((_OWORD *)v152 + 13);
    *uint64_t v171 = *v172;
    *((_OWORD *)v151 + 13) = v174;
    *(_OWORD *)(v151 + 217) = *(_OWORD *)(v152 + 217);
  }
  else
  {
    long long v175 = *(_OWORD *)(v152 + 216);
    *(_OWORD *)(v151 + 216) = v175;
    (**(void (***)(_OWORD *, _OWORD *))(v175 - 8))(v171, v172);
    v151[232] = (v173 & 1) != 0;
  }
  uint64_t v176 = v151 + 240;
  uint64_t v177 = v152 + 240;
  int v178 = v152[280];
  if (v178 == 255)
  {
    long long v179 = *((_OWORD *)v152 + 16);
    *uint64_t v176 = *v177;
    *((_OWORD *)v151 + 16) = v179;
    *(_OWORD *)(v151 + 265) = *(_OWORD *)(v152 + 265);
  }
  else
  {
    uint64_t v180 = *((void *)v152 + 33);
    uint64_t v181 = *((void *)v152 + 34);
    *((void *)v151 + 33) = v180;
    *((void *)v151 + 34) = v181;
    (**(void (***)(_OWORD *, _OWORD *))(v180 - 8))(v176, v177);
    uint64_t v182 = (BOOL *)(v151 + 280);
    *uint64_t v182 = (v178 & 1) != 0;
  }
  *(_WORD *)(v151 + 281) = *(_WORD *)(v152 + 281);
  return v19;
}

uint64_t destroy for ChartScrollTargetBehaviorContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21FA250C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  swift_release();
  swift_release();
  swift_release();
  if (*(unsigned char *)(v5 + 315))
  {
    if (*(unsigned __int8 *)(v5 + 72) != 255) {
      _s6Charts15AnyChartContentVwxx_0(v5 + 32);
    }
    if (*(unsigned __int8 *)(v5 + 120) != 255) {
      _s6Charts15AnyChartContentVwxx_0(v5 + 80);
    }
    if (*(unsigned __int8 *)(v5 + 168) != 255) {
      _s6Charts15AnyChartContentVwxx_0(v5 + 128);
    }
    if (*(unsigned __int8 *)(v5 + 216) != 255) {
      _s6Charts15AnyChartContentVwxx_0(v5 + 176);
    }
    if (*(unsigned __int8 *)(v5 + 264) != 255) {
      _s6Charts15AnyChartContentVwxx_0(v5 + 224);
    }
    if (*(unsigned __int8 *)(v5 + 312) != 255) {
      _s6Charts15AnyChartContentVwxx_0(v5 + 272);
    }
  }
  else
  {
    swift_release();
  }
  if (*(void *)(v5 + 320)) {
    swift_release();
  }
  if (*(void *)(v5 + 336)) {
    swift_release();
  }
  if (*(void *)(v5 + 352)) {
    swift_release();
  }
  if (*(void *)(v5 + 368)) {
    swift_release();
  }
  if (*(void *)(v5 + 384)) {
    swift_release();
  }
  if (*(unsigned __int8 *)(v5 + 504) != 255) {
    sub_21F76D570(*(void *)(v5 + 400), *(void *)(v5 + 408), *(void *)(v5 + 416), *(void *)(v5 + 424), *(void *)(v5 + 432), *(void *)(v5 + 440), *(void *)(v5 + 448), *(void *)(v5 + 456), *(_OWORD *)(v5 + 464));
  }
  if (*(unsigned __int8 *)(v5 + 616) != 255) {
    sub_21F76D570(*(void *)(v5 + 512), *(void *)(v5 + 520), *(void *)(v5 + 528), *(void *)(v5 + 536), *(void *)(v5 + 544), *(void *)(v5 + 552), *(void *)(v5 + 560), *(void *)(v5 + 568), *(_OWORD *)(v5 + 576));
  }
  if (*(unsigned __int8 *)(v5 + 720) != 255) {
    sub_21F7E0B38(*(void *)(v5 + 624), *(void *)(v5 + 632), *(void *)(v5 + 640), *(void *)(v5 + 648), *(void *)(v5 + 656), *(void *)(v5 + 664), *(void *)(v5 + 672), *(void *)(v5 + 680));
  }
  if (*(unsigned __int8 *)(v5 + 856) != 255)
  {
    swift_release();
    if (*(void *)(v5 + 768)) {
      _s6Charts15AnyChartContentVwxx_0(v5 + 744);
    }
    if (*(void *)(v5 + 784)) {
      swift_release();
    }
    swift_bridgeObjectRelease();
    int v6 = *(unsigned __int8 *)(v5 + 816);
    if (v6 != 255) {
      sub_21F76D54C(*(void *)(v5 + 808), v6 & 1);
    }
  }
  if (*(unsigned __int8 *)(v5 + 968) != 255) {
    sub_21F76D570(*(void *)(v5 + 864), *(void *)(v5 + 872), *(void *)(v5 + 880), *(void *)(v5 + 888), *(void *)(v5 + 896), *(void *)(v5 + 904), *(void *)(v5 + 912), *(void *)(v5 + 920), *(_OWORD *)(v5 + 928));
  }
  if (*(unsigned __int8 *)(v5 + 1104) != 255) {
    sub_21F7E0CA8(*(void *)(v5 + 976), *(void *)(v5 + 984), *(void *)(v5 + 992), *(void *)(v5 + 1000), *(void *)(v5 + 1008), *(void *)(v5 + 1016), *(void *)(v5 + 1024), *(void *)(v5 + 1032), *(void *)(v5 + 1040), *(void *)(v5 + 1048), *(void *)(v5 + 1056), *(void *)(v5 + 1064));
  }
  uint64_t v7 = type metadata accessor for ChartModel.Scenegraph();
  uint64_t v8 = v5 + *(int *)(v7 + 56);
  uint64_t v9 = sub_21FA24970();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_release();
  uint64_t result = swift_release();
  uint64_t v11 = (unsigned __int8 *)(v5 + *(int *)(v7 + 68));
  if (v11[40] != 255) {
    uint64_t result = _s6Charts15AnyChartContentVwxx_0((uint64_t)v11);
  }
  if (v11[88] != 255) {
    uint64_t result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v11 + 48));
  }
  if (v11[136] != 255) {
    uint64_t result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v11 + 96));
  }
  if (v11[184] != 255) {
    uint64_t result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v11 + 144));
  }
  if (v11[232] != 255) {
    uint64_t result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v11 + 192));
  }
  if (v11[280] != 255)
  {
    return _s6Charts15AnyChartContentVwxx_0((uint64_t)(v11 + 240));
  }
  return result;
}

uint64_t initializeWithCopy for ChartScrollTargetBehaviorContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_21FA250C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a2 + v7 + 8);
  *(void *)uint64_t v8 = *(void *)(a2 + v7);
  *(void *)(v8 + 8) = v10;
  uint64_t v11 = *(void *)(a2 + v7 + 24);
  *(void *)(v8 + 16) = *(void *)(a2 + v7 + 16);
  *(void *)(v8 + 24) = v11;
  uint64_t v12 = (_OWORD *)(a2 + v7 + 32);
  char v13 = *(unsigned char *)(a2 + v7 + 315);
  swift_retain();
  swift_retain();
  swift_retain();
  if (v13)
  {
    char v14 = (_OWORD *)(v8 + 32);
    int v15 = *(unsigned __int8 *)(v9 + 72);
    if (v15 == 255)
    {
      long long v16 = *(_OWORD *)(v9 + 48);
      *char v14 = *v12;
      *(_OWORD *)(v8 + 48) = v16;
      *(_OWORD *)(v8 + 57) = *(_OWORD *)(v9 + 57);
    }
    else
    {
      long long v17 = *(_OWORD *)(v9 + 56);
      *(_OWORD *)(v8 + 56) = v17;
      (**(void (***)(_OWORD *, uint64_t))(v17 - 8))(v14, v9 + 32);
      *(unsigned char *)(v8 + 72) = (v15 & 1) != 0;
    }
    uint64_t v18 = (_OWORD *)(v8 + 80);
    uint64_t v19 = (_OWORD *)(v9 + 80);
    int v20 = *(unsigned __int8 *)(v9 + 120);
    if (v20 == 255)
    {
      long long v21 = *(_OWORD *)(v9 + 96);
      *uint64_t v18 = *v19;
      *(_OWORD *)(v8 + 96) = v21;
      *(_OWORD *)(v8 + 105) = *(_OWORD *)(v9 + 105);
    }
    else
    {
      long long v22 = *(_OWORD *)(v9 + 104);
      *(_OWORD *)(v8 + 104) = v22;
      (**(void (***)(_OWORD *, _OWORD *))(v22 - 8))(v18, v19);
      *(unsigned char *)(v8 + 120) = (v20 & 1) != 0;
    }
    int v23 = (_OWORD *)(v8 + 128);
    long long v24 = (_OWORD *)(v9 + 128);
    int v25 = *(unsigned __int8 *)(v9 + 168);
    if (v25 == 255)
    {
      long long v26 = *(_OWORD *)(v9 + 144);
      *int v23 = *v24;
      *(_OWORD *)(v8 + 144) = v26;
      *(_OWORD *)(v8 + 153) = *(_OWORD *)(v9 + 153);
    }
    else
    {
      long long v27 = *(_OWORD *)(v9 + 152);
      *(_OWORD *)(v8 + 152) = v27;
      (**(void (***)(_OWORD *, _OWORD *))(v27 - 8))(v23, v24);
      *(unsigned char *)(v8 + 168) = (v25 & 1) != 0;
    }
    int v28 = (_OWORD *)(v8 + 176);
    long long v29 = (_OWORD *)(v9 + 176);
    int v30 = *(unsigned __int8 *)(v9 + 216);
    if (v30 == 255)
    {
      long long v31 = *(_OWORD *)(v9 + 192);
      *int v28 = *v29;
      *(_OWORD *)(v8 + 192) = v31;
      *(_OWORD *)(v8 + 201) = *(_OWORD *)(v9 + 201);
    }
    else
    {
      long long v32 = *(_OWORD *)(v9 + 200);
      *(_OWORD *)(v8 + 200) = v32;
      (**(void (***)(_OWORD *, _OWORD *))(v32 - 8))(v28, v29);
      *(unsigned char *)(v8 + 216) = (v30 & 1) != 0;
    }
    int v33 = (_OWORD *)(v8 + 224);
    long long v34 = (_OWORD *)(v9 + 224);
    int v35 = *(unsigned __int8 *)(v9 + 264);
    if (v35 == 255)
    {
      long long v36 = *(_OWORD *)(v9 + 240);
      _OWORD *v33 = *v34;
      *(_OWORD *)(v8 + 240) = v36;
      *(_OWORD *)(v8 + 249) = *(_OWORD *)(v9 + 249);
    }
    else
    {
      long long v37 = *(_OWORD *)(v9 + 248);
      *(_OWORD *)(v8 + 248) = v37;
      (**(void (***)(_OWORD *, _OWORD *))(v37 - 8))(v33, v34);
      int v38 = (BOOL *)(v8 + 264);
      *int v38 = (v35 & 1) != 0;
    }
    long long v39 = (_OWORD *)(v8 + 272);
    long long v40 = (_OWORD *)(v9 + 272);
    int v41 = *(unsigned __int8 *)(v9 + 312);
    if (v41 == 255)
    {
      long long v42 = *(_OWORD *)(v9 + 288);
      _OWORD *v39 = *v40;
      *(_OWORD *)(v8 + 288) = v42;
      *(_OWORD *)(v8 + 297) = *(_OWORD *)(v9 + 297);
    }
    else
    {
      uint64_t v43 = *(void *)(v9 + 296);
      uint64_t v44 = *(void *)(v9 + 304);
      *(void *)(v8 + 296) = v43;
      *(void *)(v8 + 304) = v44;
      (**(void (***)(_OWORD *, _OWORD *))(v43 - 8))(v39, v40);
      long long v45 = (BOOL *)(v8 + 312);
      *long long v45 = (v41 & 1) != 0;
    }
    *(_WORD *)(v8 + 313) = *(_WORD *)(v9 + 313);
    *(unsigned char *)(v8 + 315) = 1;
  }
  else
  {
    *(void *)(v8 + 32) = *(void *)v12;
    *(unsigned char *)(v8 + 315) = 0;
    swift_retain();
  }
  *(unsigned char *)(v8 + 316) = *(unsigned char *)(v9 + 316);
  uint64_t v46 = *(void *)(v9 + 320);
  if (v46)
  {
    uint64_t v47 = *(void *)(v9 + 328);
    *(void *)(v8 + 320) = v46;
    *(void *)(v8 + 328) = v47;
    swift_retain();
    uint64_t v48 = *(void *)(v9 + 336);
    if (v48) {
      goto LABEL_36;
    }
  }
  else
  {
    *(_OWORD *)(v8 + 320) = *(_OWORD *)(v9 + 320);
    uint64_t v48 = *(void *)(v9 + 336);
    if (v48)
    {
LABEL_36:
      uint64_t v49 = *(void *)(v9 + 344);
      *(void *)(v8 + 336) = v48;
      *(void *)(v8 + 344) = v49;
      swift_retain();
      uint64_t v50 = *(void *)(v9 + 352);
      if (v50) {
        goto LABEL_37;
      }
      goto LABEL_42;
    }
  }
  *(_OWORD *)(v8 + 336) = *(_OWORD *)(v9 + 336);
  uint64_t v50 = *(void *)(v9 + 352);
  if (v50)
  {
LABEL_37:
    uint64_t v51 = *(void *)(v9 + 360);
    *(void *)(v8 + 352) = v50;
    *(void *)(v8 + 360) = v51;
    swift_retain();
    uint64_t v52 = *(void *)(v9 + 368);
    if (v52) {
      goto LABEL_38;
    }
LABEL_43:
    *(_OWORD *)(v8 + 368) = *(_OWORD *)(v9 + 368);
    uint64_t v54 = *(void *)(v9 + 384);
    if (v54) {
      goto LABEL_39;
    }
    goto LABEL_44;
  }
LABEL_42:
  *(_OWORD *)(v8 + 352) = *(_OWORD *)(v9 + 352);
  uint64_t v52 = *(void *)(v9 + 368);
  if (!v52) {
    goto LABEL_43;
  }
LABEL_38:
  uint64_t v53 = *(void *)(v9 + 376);
  *(void *)(v8 + 368) = v52;
  *(void *)(v8 + 376) = v53;
  swift_retain();
  uint64_t v54 = *(void *)(v9 + 384);
  if (v54)
  {
LABEL_39:
    uint64_t v55 = *(void *)(v9 + 392);
    *(void *)(v8 + 384) = v54;
    *(void *)(v8 + 392) = v55;
    swift_retain();
    goto LABEL_45;
  }
LABEL_44:
  *(_OWORD *)(v8 + 384) = *(_OWORD *)(v9 + 384);
LABEL_45:
  int v56 = *(unsigned __int8 *)(v9 + 504);
  uint64_t v213 = a1;
  if (v56 == 255)
  {
    long long v57 = *(_OWORD *)(v9 + 480);
    *(_OWORD *)(v8 + 464) = *(_OWORD *)(v9 + 464);
    *(_OWORD *)(v8 + 480) = v57;
    *(_OWORD *)(v8 + 489) = *(_OWORD *)(v9 + 489);
    long long v58 = *(_OWORD *)(v9 + 416);
    *(_OWORD *)(v8 + 400) = *(_OWORD *)(v9 + 400);
    *(_OWORD *)(v8 + 416) = v58;
    long long v59 = *(_OWORD *)(v9 + 448);
    *(_OWORD *)(v8 + 432) = *(_OWORD *)(v9 + 432);
    *(_OWORD *)(v8 + 448) = v59;
  }
  else
  {
    char v208 = v56 & 1;
    uint64_t v60 = *(void *)(v9 + 400);
    uint64_t v61 = *(void *)(v9 + 408);
    uint64_t v62 = *(void *)(v9 + 416);
    uint64_t v63 = *(void *)(v9 + 424);
    uint64_t v64 = *(void *)(v9 + 432);
    uint64_t v65 = *(void *)(v9 + 440);
    uint64_t v66 = *(void *)(v9 + 448);
    uint64_t v67 = *(void *)(v9 + 456);
    uint64_t v184 = *(void *)(v9 + 464);
    uint64_t v188 = *(void *)(v9 + 472);
    uint64_t v193 = *(void *)(v9 + 480);
    uint64_t v198 = *(void *)(v9 + 488);
    uint64_t v203 = *(void *)(v9 + 496);
    sub_21F764268(v60, v61, v62, v63, v64, v65, v66, v67, v184);
    *(void *)(v8 + 400) = v60;
    *(void *)(v8 + 408) = v61;
    *(void *)(v8 + 416) = v62;
    *(void *)(v8 + 424) = v63;
    *(void *)(v8 + 432) = v64;
    *(void *)(v8 + 440) = v65;
    *(void *)(v8 + 448) = v66;
    *(void *)(v8 + 456) = v67;
    *(void *)(v8 + 464) = v184;
    *(void *)(v8 + 472) = v188;
    *(void *)(v8 + 480) = v193;
    *(void *)(v8 + 488) = v198;
    *(void *)(v8 + 496) = v203;
    *(unsigned char *)(v8 + 504) = v208;
  }
  int v68 = *(unsigned __int8 *)(v9 + 616);
  if (v68 == 255)
  {
    long long v69 = *(_OWORD *)(v9 + 592);
    *(_OWORD *)(v8 + 576) = *(_OWORD *)(v9 + 576);
    *(_OWORD *)(v8 + 592) = v69;
    *(_OWORD *)(v8 + 601) = *(_OWORD *)(v9 + 601);
    long long v70 = *(_OWORD *)(v9 + 528);
    *(_OWORD *)(v8 + 512) = *(_OWORD *)(v9 + 512);
    *(_OWORD *)(v8 + 528) = v70;
    long long v71 = *(_OWORD *)(v9 + 560);
    *(_OWORD *)(v8 + 544) = *(_OWORD *)(v9 + 544);
    *(_OWORD *)(v8 + 560) = v71;
  }
  else
  {
    char v209 = v68 & 1;
    uint64_t v72 = *(void *)(v9 + 512);
    uint64_t v73 = *(void *)(v9 + 520);
    uint64_t v74 = *(void *)(v9 + 528);
    uint64_t v75 = *(void *)(v9 + 536);
    uint64_t v76 = *(void *)(v9 + 544);
    uint64_t v77 = *(void *)(v9 + 552);
    uint64_t v78 = *(void *)(v9 + 560);
    uint64_t v79 = *(void *)(v9 + 568);
    uint64_t v185 = *(void *)(v9 + 576);
    uint64_t v189 = *(void *)(v9 + 584);
    uint64_t v194 = *(void *)(v9 + 592);
    uint64_t v199 = *(void *)(v9 + 600);
    uint64_t v204 = *(void *)(v9 + 608);
    sub_21F764268(v72, v73, v74, v75, v76, v77, v78, v79, v185);
    *(void *)(v8 + 512) = v72;
    *(void *)(v8 + 520) = v73;
    *(void *)(v8 + 528) = v74;
    *(void *)(v8 + 536) = v75;
    *(void *)(v8 + 544) = v76;
    *(void *)(v8 + 552) = v77;
    *(void *)(v8 + 560) = v78;
    *(void *)(v8 + 568) = v79;
    *(void *)(v8 + 576) = v185;
    *(void *)(v8 + 584) = v189;
    *(void *)(v8 + 592) = v194;
    *(void *)(v8 + 600) = v199;
    *(void *)(v8 + 608) = v204;
    *(unsigned char *)(v8 + 616) = v209;
  }
  int v80 = *(unsigned __int8 *)(v9 + 720);
  if (v80 == 255)
  {
    long long v81 = *(_OWORD *)(v9 + 704);
    *(_OWORD *)(v8 + 688) = *(_OWORD *)(v9 + 688);
    *(_OWORD *)(v8 + 704) = v81;
    *(unsigned char *)(v8 + 720) = *(unsigned char *)(v9 + 720);
    long long v82 = *(_OWORD *)(v9 + 640);
    *(_OWORD *)(v8 + 624) = *(_OWORD *)(v9 + 624);
    *(_OWORD *)(v8 + 640) = v82;
    long long v83 = *(_OWORD *)(v9 + 672);
    *(_OWORD *)(v8 + 656) = *(_OWORD *)(v9 + 656);
    *(_OWORD *)(v8 + 672) = v83;
  }
  else
  {
    char v210 = v80 & 1;
    uint64_t v84 = *(void *)(v9 + 624);
    uint64_t v85 = *(void *)(v9 + 632);
    uint64_t v86 = *(void *)(v9 + 640);
    uint64_t v87 = *(void *)(v9 + 648);
    uint64_t v88 = *(void *)(v9 + 656);
    uint64_t v89 = *(void *)(v9 + 664);
    uint64_t v90 = *(void *)(v9 + 672);
    uint64_t v91 = *(void *)(v9 + 680);
    uint64_t v190 = *(void *)(v9 + 688);
    uint64_t v195 = *(void *)(v9 + 696);
    uint64_t v200 = *(void *)(v9 + 704);
    uint64_t v205 = *(void *)(v9 + 712);
    sub_21F7E0AB8(v84, v85, v86, v87, v88, v89, v90, v91);
    *(void *)(v8 + 624) = v84;
    *(void *)(v8 + 632) = v85;
    *(void *)(v8 + 640) = v86;
    *(void *)(v8 + 648) = v87;
    *(void *)(v8 + 656) = v88;
    *(void *)(v8 + 664) = v89;
    *(void *)(v8 + 672) = v90;
    *(void *)(v8 + 680) = v91;
    *(void *)(v8 + 688) = v190;
    *(void *)(v8 + 696) = v195;
    *(void *)(v8 + 704) = v200;
    *(void *)(v8 + 712) = v205;
    *(unsigned char *)(v8 + 720) = v210;
  }
  int v92 = *(unsigned __int8 *)(v9 + 856);
  if (v92 == 255)
  {
    long long v93 = *(_OWORD *)(v9 + 840);
    *(_OWORD *)(v8 + 824) = *(_OWORD *)(v9 + 824);
    *(_OWORD *)(v8 + 840) = v93;
    *(unsigned char *)(v8 + 856) = *(unsigned char *)(v9 + 856);
    long long v94 = *(_OWORD *)(v9 + 776);
    *(_OWORD *)(v8 + 760) = *(_OWORD *)(v9 + 760);
    *(_OWORD *)(v8 + 776) = v94;
    long long v95 = *(_OWORD *)(v9 + 808);
    *(_OWORD *)(v8 + 792) = *(_OWORD *)(v9 + 792);
    *(_OWORD *)(v8 + 808) = v95;
    long long v96 = *(_OWORD *)(v9 + 744);
    *(_OWORD *)(v8 + 728) = *(_OWORD *)(v9 + 728);
    *(_OWORD *)(v8 + 744) = v96;
    goto LABEL_75;
  }
  uint64_t v97 = *(void *)(v9 + 736);
  *(void *)(v8 + 728) = *(void *)(v9 + 728);
  *(void *)(v8 + 736) = v97;
  long long v98 = (_OWORD *)(v8 + 744);
  long long v99 = (_OWORD *)(v9 + 744);
  uint64_t v100 = *(void *)(v9 + 768);
  swift_retain();
  if ((v92 & 1) == 0)
  {
    if (v100)
    {
      *(void *)(v8 + 768) = v100;
      *(void *)(v8 + 776) = *(void *)(v9 + 776);
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v100 - 8))(v8 + 744, v9 + 744, v100);
      uint64_t v101 = *(void *)(v9 + 784);
      if (v101)
      {
LABEL_59:
        uint64_t v102 = *(void *)(v9 + 792);
        *(void *)(v8 + 784) = v101;
        *(void *)(v8 + 792) = v102;
        swift_retain();
LABEL_65:
        *(void *)(v8 + 800) = *(void *)(v9 + 800);
        uint64_t v106 = (uint64_t *)(v9 + 808);
        int v107 = *(unsigned __int8 *)(v9 + 816);
        swift_bridgeObjectRetain();
        if (v107 == 255)
        {
          *(void *)(v8 + 808) = *v106;
          *(unsigned char *)(v8 + 816) = *(unsigned char *)(v9 + 816);
        }
        else
        {
          char v108 = v107 & 1;
          uint64_t v109 = *v106;
          sub_21F7637D8(v109, v108);
          *(void *)(v8 + 808) = v109;
          *(unsigned char *)(v8 + 816) = v108;
        }
        long long v110 = *(_OWORD *)(v9 + 840);
        *(_OWORD *)(v8 + 824) = *(_OWORD *)(v9 + 824);
        *(_OWORD *)(v8 + 840) = v110;
        *(unsigned char *)(v8 + 856) = 0;
        goto LABEL_75;
      }
    }
    else
    {
      long long v105 = *(_OWORD *)(v9 + 760);
      *long long v98 = *v99;
      *(_OWORD *)(v8 + 760) = v105;
      *(void *)(v8 + 776) = *(void *)(v9 + 776);
      uint64_t v101 = *(void *)(v9 + 784);
      if (v101) {
        goto LABEL_59;
      }
    }
    *(_OWORD *)(v8 + 784) = *(_OWORD *)(v9 + 784);
    goto LABEL_65;
  }
  if (!v100)
  {
    long long v111 = *(_OWORD *)(v9 + 760);
    *long long v98 = *v99;
    *(_OWORD *)(v8 + 760) = v111;
    *(void *)(v8 + 776) = *(void *)(v9 + 776);
    uint64_t v103 = *(void *)(v9 + 784);
    if (v103) {
      goto LABEL_62;
    }
LABEL_70:
    *(_OWORD *)(v8 + 784) = *(_OWORD *)(v9 + 784);
    goto LABEL_71;
  }
  *(void *)(v8 + 768) = v100;
  *(void *)(v8 + 776) = *(void *)(v9 + 776);
  (**(void (***)(uint64_t, uint64_t, uint64_t))(v100 - 8))(v8 + 744, v9 + 744, v100);
  uint64_t v103 = *(void *)(v9 + 784);
  if (!v103) {
    goto LABEL_70;
  }
LABEL_62:
  uint64_t v104 = *(void *)(v9 + 792);
  *(void *)(v8 + 784) = v103;
  *(void *)(v8 + 792) = v104;
  swift_retain();
LABEL_71:
  *(void *)(v8 + 800) = *(void *)(v9 + 800);
  uint64_t v112 = (uint64_t *)(v9 + 808);
  int v113 = *(unsigned __int8 *)(v9 + 816);
  swift_bridgeObjectRetain();
  if (v113 == 255)
  {
    *(void *)(v8 + 808) = *v112;
    *(unsigned char *)(v8 + 816) = *(unsigned char *)(v9 + 816);
  }
  else
  {
    char v114 = v113 & 1;
    uint64_t v115 = *v112;
    sub_21F7637D8(v115, v114);
    *(void *)(v8 + 808) = v115;
    *(unsigned char *)(v8 + 816) = v114;
  }
  long long v116 = *(_OWORD *)(v9 + 840);
  *(_OWORD *)(v8 + 824) = *(_OWORD *)(v9 + 824);
  *(_OWORD *)(v8 + 840) = v116;
  *(unsigned char *)(v8 + 856) = 1;
LABEL_75:
  int v117 = *(unsigned __int8 *)(v9 + 968);
  if (v117 == 255)
  {
    long long v118 = *(_OWORD *)(v9 + 944);
    *(_OWORD *)(v8 + 928) = *(_OWORD *)(v9 + 928);
    *(_OWORD *)(v8 + 944) = v118;
    *(_OWORD *)(v8 + 953) = *(_OWORD *)(v9 + 953);
    long long v119 = *(_OWORD *)(v9 + 880);
    *(_OWORD *)(v8 + 864) = *(_OWORD *)(v9 + 864);
    *(_OWORD *)(v8 + 880) = v119;
    long long v120 = *(_OWORD *)(v9 + 912);
    *(_OWORD *)(v8 + 896) = *(_OWORD *)(v9 + 896);
    *(_OWORD *)(v8 + 912) = v120;
  }
  else
  {
    char v211 = v117 & 1;
    uint64_t v121 = *(void *)(v9 + 864);
    uint64_t v122 = *(void *)(v9 + 872);
    uint64_t v123 = *(void *)(v9 + 880);
    uint64_t v124 = *(void *)(v9 + 888);
    uint64_t v125 = *(void *)(v9 + 896);
    uint64_t v126 = *(void *)(v9 + 904);
    uint64_t v127 = *(void *)(v9 + 912);
    uint64_t v128 = *(void *)(v9 + 920);
    uint64_t v186 = *(void *)(v9 + 928);
    uint64_t v191 = *(void *)(v9 + 936);
    uint64_t v196 = *(void *)(v9 + 944);
    uint64_t v201 = *(void *)(v9 + 952);
    uint64_t v206 = *(void *)(v9 + 960);
    sub_21F764268(v121, v122, v123, v124, v125, v126, v127, v128, v186);
    *(void *)(v8 + 864) = v121;
    *(void *)(v8 + 872) = v122;
    *(void *)(v8 + 880) = v123;
    *(void *)(v8 + 888) = v124;
    *(void *)(v8 + 896) = v125;
    *(void *)(v8 + 904) = v126;
    *(void *)(v8 + 912) = v127;
    *(void *)(v8 + 920) = v128;
    *(void *)(v8 + 928) = v186;
    *(void *)(v8 + 936) = v191;
    *(void *)(v8 + 944) = v196;
    *(void *)(v8 + 952) = v201;
    *(void *)(v8 + 960) = v206;
    *(unsigned char *)(v8 + 968) = v211;
  }
  int v129 = *(unsigned __int8 *)(v9 + 1104);
  if (v129 == 255)
  {
    long long v130 = *(_OWORD *)(v9 + 1088);
    *(_OWORD *)(v8 + 1072) = *(_OWORD *)(v9 + 1072);
    *(_OWORD *)(v8 + 1088) = v130;
    *(unsigned char *)(v8 + 1104) = *(unsigned char *)(v9 + 1104);
    long long v131 = *(_OWORD *)(v9 + 1024);
    *(_OWORD *)(v8 + 1008) = *(_OWORD *)(v9 + 1008);
    *(_OWORD *)(v8 + 1024) = v131;
    long long v132 = *(_OWORD *)(v9 + 1056);
    *(_OWORD *)(v8 + 1040) = *(_OWORD *)(v9 + 1040);
    *(_OWORD *)(v8 + 1056) = v132;
    long long v133 = *(_OWORD *)(v9 + 992);
    *(_OWORD *)(v8 + 976) = *(_OWORD *)(v9 + 976);
    *(_OWORD *)(v8 + 992) = v133;
  }
  else
  {
    char v212 = v129 & 1;
    uint64_t v134 = *(void *)(v9 + 976);
    uint64_t v135 = *(void *)(v9 + 984);
    uint64_t v136 = *(void *)(v9 + 992);
    uint64_t v137 = *(void *)(v9 + 1000);
    uint64_t v138 = *(void *)(v9 + 1008);
    uint64_t v139 = *(void *)(v9 + 1016);
    uint64_t v140 = *(void *)(v9 + 1024);
    uint64_t v141 = *(void *)(v9 + 1032);
    uint64_t v181 = *(void *)(v9 + 1040);
    uint64_t v182 = *(void *)(v9 + 1048);
    uint64_t v183 = *(void *)(v9 + 1056);
    uint64_t v187 = *(void *)(v9 + 1064);
    uint64_t v192 = *(void *)(v9 + 1072);
    uint64_t v197 = *(void *)(v9 + 1080);
    uint64_t v202 = *(void *)(v9 + 1088);
    uint64_t v207 = *(void *)(v9 + 1096);
    sub_21F7E0C30(v134, v135, v136, v137, v138, v139, v140, v141, v181, v182, v183, v187);
    *(void *)(v8 + 976) = v134;
    *(void *)(v8 + 984) = v135;
    *(void *)(v8 + 992) = v136;
    *(void *)(v8 + 1000) = v137;
    *(void *)(v8 + 1008) = v138;
    *(void *)(v8 + 1016) = v139;
    *(void *)(v8 + 1024) = v140;
    *(void *)(v8 + 1032) = v141;
    *(void *)(v8 + 1040) = v181;
    *(void *)(v8 + 1048) = v182;
    *(void *)(v8 + 1056) = v183;
    *(void *)(v8 + 1064) = v187;
    *(void *)(v8 + 1072) = v192;
    *(void *)(v8 + 1080) = v197;
    *(void *)(v8 + 1088) = v202;
    *(void *)(v8 + 1096) = v207;
    *(unsigned char *)(v8 + 1104) = v212;
  }
  *(_OWORD *)(v8 + 1112) = *(_OWORD *)(v9 + 1112);
  *(_OWORD *)(v8 + 1128) = *(_OWORD *)(v9 + 1128);
  *(unsigned char *)(v8 + 1144) = *(unsigned char *)(v9 + 1144);
  *(_OWORD *)(v8 + 1152) = *(_OWORD *)(v9 + 1152);
  *(_OWORD *)(v8 + 1168) = *(_OWORD *)(v9 + 1168);
  uint64_t v142 = (int *)type metadata accessor for ChartModel.Scenegraph();
  uint64_t v143 = v142[14];
  uint64_t v144 = v8 + v143;
  uint64_t v145 = v9 + v143;
  uint64_t v146 = sub_21FA24970();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v146 - 8) + 16))(v144, v145, v146);
  *(void *)(v8 + v142[15]) = *(void *)(v9 + v142[15]);
  *(void *)(v8 + v142[16]) = *(void *)(v9 + v142[16]);
  uint64_t v147 = v142[17];
  uint64_t v148 = v8 + v147;
  uint64_t v149 = v9 + v147;
  int v150 = *(unsigned __int8 *)(v9 + v147 + 40);
  swift_retain();
  swift_retain();
  if (v150 == 255)
  {
    long long v151 = *(_OWORD *)(v149 + 16);
    *(_OWORD *)uint64_t v148 = *(_OWORD *)v149;
    *(_OWORD *)(v148 + 16) = v151;
    *(_OWORD *)(v148 + 25) = *(_OWORD *)(v149 + 25);
  }
  else
  {
    long long v152 = *(_OWORD *)(v149 + 24);
    *(_OWORD *)(v148 + 24) = v152;
    (**(void (***)(uint64_t, uint64_t))(v152 - 8))(v148, v149);
    *(unsigned char *)(v148 + 40) = (v150 & 1) != 0;
  }
  int v153 = (_OWORD *)(v148 + 48);
  long long v154 = (_OWORD *)(v149 + 48);
  int v155 = *(unsigned __int8 *)(v149 + 88);
  if (v155 == 255)
  {
    long long v156 = *(_OWORD *)(v149 + 64);
    *int v153 = *v154;
    *(_OWORD *)(v148 + 64) = v156;
    *(_OWORD *)(v148 + 73) = *(_OWORD *)(v149 + 73);
  }
  else
  {
    long long v157 = *(_OWORD *)(v149 + 72);
    *(_OWORD *)(v148 + 72) = v157;
    (**(void (***)(_OWORD *, _OWORD *))(v157 - 8))(v153, v154);
    *(unsigned char *)(v148 + 88) = (v155 & 1) != 0;
  }
  int v158 = (_OWORD *)(v148 + 96);
  long long v159 = (_OWORD *)(v149 + 96);
  int v160 = *(unsigned __int8 *)(v149 + 136);
  if (v160 == 255)
  {
    long long v161 = *(_OWORD *)(v149 + 112);
    *int v158 = *v159;
    *(_OWORD *)(v148 + 112) = v161;
    *(_OWORD *)(v148 + 121) = *(_OWORD *)(v149 + 121);
  }
  else
  {
    long long v162 = *(_OWORD *)(v149 + 120);
    *(_OWORD *)(v148 + 120) = v162;
    (**(void (***)(_OWORD *, _OWORD *))(v162 - 8))(v158, v159);
    *(unsigned char *)(v148 + 136) = (v160 & 1) != 0;
  }
  int v163 = (_OWORD *)(v148 + 144);
  long long v164 = (_OWORD *)(v149 + 144);
  int v165 = *(unsigned __int8 *)(v149 + 184);
  if (v165 == 255)
  {
    long long v166 = *(_OWORD *)(v149 + 160);
    *int v163 = *v164;
    *(_OWORD *)(v148 + 160) = v166;
    *(_OWORD *)(v148 + 169) = *(_OWORD *)(v149 + 169);
  }
  else
  {
    long long v167 = *(_OWORD *)(v149 + 168);
    *(_OWORD *)(v148 + 168) = v167;
    (**(void (***)(_OWORD *, _OWORD *))(v167 - 8))(v163, v164);
    *(unsigned char *)(v148 + 184) = (v165 & 1) != 0;
  }
  int v168 = (_OWORD *)(v148 + 192);
  long long v169 = (_OWORD *)(v149 + 192);
  int v170 = *(unsigned __int8 *)(v149 + 232);
  if (v170 == 255)
  {
    long long v171 = *(_OWORD *)(v149 + 208);
    *int v168 = *v169;
    *(_OWORD *)(v148 + 208) = v171;
    *(_OWORD *)(v148 + 217) = *(_OWORD *)(v149 + 217);
  }
  else
  {
    long long v172 = *(_OWORD *)(v149 + 216);
    *(_OWORD *)(v148 + 216) = v172;
    (**(void (***)(_OWORD *, _OWORD *))(v172 - 8))(v168, v169);
    *(unsigned char *)(v148 + 232) = (v170 & 1) != 0;
  }
  int v173 = (_OWORD *)(v148 + 240);
  long long v174 = (_OWORD *)(v149 + 240);
  int v175 = *(unsigned __int8 *)(v149 + 280);
  if (v175 == 255)
  {
    long long v176 = *(_OWORD *)(v149 + 256);
    *int v173 = *v174;
    *(_OWORD *)(v148 + 256) = v176;
    *(_OWORD *)(v148 + 265) = *(_OWORD *)(v149 + 265);
  }
  else
  {
    uint64_t v177 = *(void *)(v149 + 264);
    uint64_t v178 = *(void *)(v149 + 272);
    *(void *)(v148 + 264) = v177;
    *(void *)(v148 + 272) = v178;
    (**(void (***)(_OWORD *, _OWORD *))(v177 - 8))(v173, v174);
    long long v179 = (BOOL *)(v148 + 280);
    *long long v179 = (v175 & 1) != 0;
  }
  *(_WORD *)(v148 + 281) = *(_WORD *)(v149 + 281);
  return v213;
}

uint64_t assignWithCopy for ChartScrollTargetBehaviorContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_21FA250C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)(a2 + v7);
  *(void *)(v8 + 8) = *(void *)(a2 + v7 + 8);
  swift_retain();
  swift_release();
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  swift_retain();
  swift_release();
  *(void *)(v8 + 24) = *(void *)(v9 + 24);
  swift_retain();
  swift_release();
  uint64_t v416 = a2;
  if (a1 != a2)
  {
    uint64_t v10 = (long long *)(v9 + 32);
    sub_21F76CA84(v8 + 32, &qword_26AD4A218);
    if (*(unsigned char *)(v9 + 315))
    {
      int v11 = *(unsigned __int8 *)(v9 + 72);
      if (v11 == 255)
      {
        long long v12 = *v10;
        long long v13 = *(_OWORD *)(v9 + 48);
        *(_OWORD *)(v8 + 57) = *(_OWORD *)(v9 + 57);
        *(_OWORD *)(v8 + 32) = v12;
        *(_OWORD *)(v8 + 48) = v13;
      }
      else
      {
        uint64_t v14 = *(void *)(v9 + 56);
        *(void *)(v8 + 56) = v14;
        *(void *)(v8 + 64) = *(void *)(v9 + 64);
        (**(void (***)(uint64_t, uint64_t))(v14 - 8))(v8 + 32, v9 + 32);
        *(unsigned char *)(v8 + 72) = (v11 & 1) != 0;
      }
      int v15 = (_OWORD *)(v8 + 80);
      long long v16 = (long long *)(v9 + 80);
      int v17 = *(unsigned __int8 *)(v9 + 120);
      if (v17 == 255)
      {
        long long v18 = *v16;
        long long v19 = *(_OWORD *)(v9 + 96);
        *(_OWORD *)(v8 + 105) = *(_OWORD *)(v9 + 105);
        *int v15 = v18;
        *(_OWORD *)(v8 + 96) = v19;
      }
      else
      {
        uint64_t v20 = *(void *)(v9 + 104);
        *(void *)(v8 + 104) = v20;
        *(void *)(v8 + 112) = *(void *)(v9 + 112);
        (**(void (***)(_OWORD *, long long *))(v20 - 8))(v15, v16);
        *(unsigned char *)(v8 + 120) = (v17 & 1) != 0;
      }
      long long v21 = (_OWORD *)(v8 + 128);
      long long v22 = (long long *)(v9 + 128);
      int v23 = *(unsigned __int8 *)(v9 + 168);
      if (v23 == 255)
      {
        long long v24 = *v22;
        long long v25 = *(_OWORD *)(v9 + 144);
        *(_OWORD *)(v8 + 153) = *(_OWORD *)(v9 + 153);
        *long long v21 = v24;
        *(_OWORD *)(v8 + 144) = v25;
      }
      else
      {
        uint64_t v26 = *(void *)(v9 + 152);
        *(void *)(v8 + 152) = v26;
        *(void *)(v8 + 160) = *(void *)(v9 + 160);
        (**(void (***)(_OWORD *, long long *))(v26 - 8))(v21, v22);
        *(unsigned char *)(v8 + 168) = (v23 & 1) != 0;
      }
      long long v27 = (_OWORD *)(v8 + 176);
      int v28 = (long long *)(v9 + 176);
      int v29 = *(unsigned __int8 *)(v9 + 216);
      if (v29 == 255)
      {
        long long v30 = *v28;
        long long v31 = *(_OWORD *)(v9 + 192);
        *(_OWORD *)(v8 + 201) = *(_OWORD *)(v9 + 201);
        *long long v27 = v30;
        *(_OWORD *)(v8 + 192) = v31;
      }
      else
      {
        uint64_t v32 = *(void *)(v9 + 200);
        *(void *)(v8 + 200) = v32;
        *(void *)(v8 + 208) = *(void *)(v9 + 208);
        (**(void (***)(_OWORD *, long long *))(v32 - 8))(v27, v28);
        *(unsigned char *)(v8 + 216) = (v29 & 1) != 0;
      }
      int v33 = (_OWORD *)(v8 + 224);
      long long v34 = (long long *)(v9 + 224);
      int v35 = *(unsigned __int8 *)(v9 + 264);
      if (v35 == 255)
      {
        long long v36 = *v34;
        long long v37 = *(_OWORD *)(v9 + 240);
        *(_OWORD *)(v8 + 249) = *(_OWORD *)(v9 + 249);
        _OWORD *v33 = v36;
        *(_OWORD *)(v8 + 240) = v37;
      }
      else
      {
        uint64_t v38 = *(void *)(v9 + 248);
        *(void *)(v8 + 248) = v38;
        *(void *)(v8 + 256) = *(void *)(v9 + 256);
        (**(void (***)(_OWORD *, long long *))(v38 - 8))(v33, v34);
        long long v39 = (BOOL *)(v8 + 264);
        BOOL *v39 = (v35 & 1) != 0;
      }
      long long v40 = (_OWORD *)(v8 + 272);
      int v41 = (long long *)(v9 + 272);
      int v42 = *(unsigned __int8 *)(v9 + 312);
      if (v42 == 255)
      {
        long long v43 = *v41;
        long long v44 = *(_OWORD *)(v9 + 288);
        *(_OWORD *)(v8 + 297) = *(_OWORD *)(v9 + 297);
        *long long v40 = v43;
        *(_OWORD *)(v8 + 288) = v44;
      }
      else
      {
        uint64_t v45 = *(void *)(v9 + 296);
        *(void *)(v8 + 296) = v45;
        *(void *)(v8 + 304) = *(void *)(v9 + 304);
        (**(void (***)(_OWORD *, long long *))(v45 - 8))(v40, v41);
        uint64_t v46 = (BOOL *)(v8 + 312);
        *uint64_t v46 = (v42 & 1) != 0;
      }
      *(_WORD *)(v8 + 313) = *(_WORD *)(v9 + 313);
      *(unsigned char *)(v8 + 315) = 1;
    }
    else
    {
      *(void *)(v8 + 32) = *(void *)v10;
      *(unsigned char *)(v8 + 315) = 0;
      swift_retain();
    }
  }
  *(unsigned char *)(v8 + 316) = *(unsigned char *)(v9 + 316);
  uint64_t v47 = *(void *)(v9 + 320);
  if (*(void *)(v8 + 320))
  {
    if (v47)
    {
      uint64_t v48 = *(void *)(v9 + 328);
      *(void *)(v8 + 320) = v47;
      *(void *)(v8 + 328) = v48;
      swift_retain();
      swift_release();
      goto LABEL_42;
    }
    swift_release();
  }
  else if (v47)
  {
    uint64_t v49 = *(void *)(v9 + 328);
    *(void *)(v8 + 320) = v47;
    *(void *)(v8 + 328) = v49;
    swift_retain();
    goto LABEL_42;
  }
  *(_OWORD *)(v8 + 320) = *(_OWORD *)(v9 + 320);
LABEL_42:
  uint64_t v50 = *(void *)(v9 + 336);
  if (*(void *)(v8 + 336))
  {
    if (v50)
    {
      uint64_t v51 = *(void *)(v9 + 344);
      *(void *)(v8 + 336) = v50;
      *(void *)(v8 + 344) = v51;
      swift_retain();
      swift_release();
      goto LABEL_49;
    }
    swift_release();
  }
  else if (v50)
  {
    uint64_t v52 = *(void *)(v9 + 344);
    *(void *)(v8 + 336) = v50;
    *(void *)(v8 + 344) = v52;
    swift_retain();
    goto LABEL_49;
  }
  *(_OWORD *)(v8 + 336) = *(_OWORD *)(v9 + 336);
LABEL_49:
  uint64_t v53 = *(void *)(v9 + 352);
  if (*(void *)(v8 + 352))
  {
    if (v53)
    {
      uint64_t v54 = *(void *)(v9 + 360);
      *(void *)(v8 + 352) = v53;
      *(void *)(v8 + 360) = v54;
      swift_retain();
      swift_release();
      goto LABEL_56;
    }
    swift_release();
  }
  else if (v53)
  {
    uint64_t v55 = *(void *)(v9 + 360);
    *(void *)(v8 + 352) = v53;
    *(void *)(v8 + 360) = v55;
    swift_retain();
    goto LABEL_56;
  }
  *(_OWORD *)(v8 + 352) = *(_OWORD *)(v9 + 352);
LABEL_56:
  uint64_t v56 = *(void *)(v9 + 368);
  if (*(void *)(v8 + 368))
  {
    if (v56)
    {
      uint64_t v57 = *(void *)(v9 + 376);
      *(void *)(v8 + 368) = v56;
      *(void *)(v8 + 376) = v57;
      swift_retain();
      swift_release();
      goto LABEL_63;
    }
    swift_release();
  }
  else if (v56)
  {
    uint64_t v58 = *(void *)(v9 + 376);
    *(void *)(v8 + 368) = v56;
    *(void *)(v8 + 376) = v58;
    swift_retain();
    goto LABEL_63;
  }
  *(_OWORD *)(v8 + 368) = *(_OWORD *)(v9 + 368);
LABEL_63:
  uint64_t v59 = *(void *)(v9 + 384);
  if (*(void *)(v8 + 384))
  {
    if (v59)
    {
      uint64_t v60 = *(void *)(v9 + 392);
      *(void *)(v8 + 384) = v59;
      *(void *)(v8 + 392) = v60;
      swift_retain();
      swift_release();
      goto LABEL_70;
    }
    swift_release();
  }
  else if (v59)
  {
    uint64_t v61 = *(void *)(v9 + 392);
    *(void *)(v8 + 384) = v59;
    *(void *)(v8 + 392) = v61;
    swift_retain();
    goto LABEL_70;
  }
  *(_OWORD *)(v8 + 384) = *(_OWORD *)(v9 + 384);
LABEL_70:
  uint64_t v62 = (long long *)(v8 + 400);
  uint64_t v63 = (long long *)(v9 + 400);
  int v64 = *(unsigned __int8 *)(v9 + 504);
  uint64_t v415 = a1;
  if (*(unsigned __int8 *)(v8 + 504) == 255)
  {
    if (v64 == 255)
    {
      long long v70 = *v63;
      long long v71 = *(_OWORD *)(v9 + 432);
      *(_OWORD *)(v8 + 416) = *(_OWORD *)(v9 + 416);
      *(_OWORD *)(v8 + 432) = v71;
      *uint64_t v62 = v70;
      long long v72 = *(_OWORD *)(v9 + 448);
      long long v73 = *(_OWORD *)(v9 + 464);
      long long v74 = *(_OWORD *)(v9 + 480);
      *(_OWORD *)(v8 + 489) = *(_OWORD *)(v9 + 489);
      *(_OWORD *)(v8 + 464) = v73;
      *(_OWORD *)(v8 + 480) = v74;
      *(_OWORD *)(v8 + 448) = v72;
    }
    else
    {
      char v406 = v64 & 1;
      uint64_t v91 = *(void *)(v9 + 400);
      uint64_t v92 = *(void *)(v9 + 408);
      uint64_t v93 = *(void *)(v9 + 416);
      uint64_t v94 = *(void *)(v9 + 424);
      uint64_t v95 = *(void *)(v9 + 432);
      uint64_t v96 = *(void *)(v9 + 440);
      uint64_t v97 = *(void *)(v9 + 448);
      uint64_t v98 = *(void *)(v9 + 456);
      uint64_t v358 = *(void *)(v9 + 464);
      uint64_t v367 = *(void *)(v9 + 472);
      uint64_t v377 = *(void *)(v9 + 480);
      uint64_t v387 = *(void *)(v9 + 488);
      uint64_t v397 = *(void *)(v9 + 496);
      sub_21F764268(v91, v92, v93, v94, v95, v96, v97, v98, v358);
      *(void *)(v8 + 400) = v91;
      *(void *)(v8 + 408) = v92;
      *(void *)(v8 + 416) = v93;
      *(void *)(v8 + 424) = v94;
      *(void *)(v8 + 432) = v95;
      *(void *)(v8 + 440) = v96;
      *(void *)(v8 + 448) = v97;
      *(void *)(v8 + 456) = v98;
      *(void *)(v8 + 464) = v358;
      *(void *)(v8 + 472) = v367;
      *(void *)(v8 + 480) = v377;
      *(void *)(v8 + 488) = v387;
      *(void *)(v8 + 496) = v397;
      *(unsigned char *)(v8 + 504) = v406;
    }
  }
  else if (v64 == 255)
  {
    sub_21F76CA84(v8 + 400, &qword_26AD47AB8);
    long long v66 = *(_OWORD *)(v9 + 416);
    long long v65 = *(_OWORD *)(v9 + 432);
    *uint64_t v62 = *v63;
    *(_OWORD *)(v8 + 416) = v66;
    *(_OWORD *)(v8 + 432) = v65;
    long long v68 = *(_OWORD *)(v9 + 464);
    long long v67 = *(_OWORD *)(v9 + 480);
    long long v69 = *(_OWORD *)(v9 + 448);
    *(_OWORD *)(v8 + 489) = *(_OWORD *)(v9 + 489);
    *(_OWORD *)(v8 + 464) = v68;
    *(_OWORD *)(v8 + 480) = v67;
    *(_OWORD *)(v8 + 448) = v69;
  }
  else
  {
    char v405 = v64 & 1;
    uint64_t v75 = *(void *)(v9 + 408);
    uint64_t v76 = *(void *)(v9 + 416);
    uint64_t v77 = *(void *)(v9 + 424);
    uint64_t v78 = *(void *)(v9 + 432);
    uint64_t v79 = *(void *)(v9 + 440);
    uint64_t v80 = *(void *)(v9 + 448);
    uint64_t v81 = *(void *)(v9 + 456);
    uint64_t v352 = *(void *)(v9 + 400);
    uint64_t v357 = *(void *)(v9 + 464);
    uint64_t v366 = *(void *)(v9 + 472);
    uint64_t v376 = *(void *)(v9 + 480);
    uint64_t v386 = *(void *)(v9 + 488);
    uint64_t v396 = *(void *)(v9 + 496);
    sub_21F764268(v352, v75, v76, v77, v78, v79, v80, v81, v357);
    uint64_t v82 = *(void *)(v8 + 400);
    uint64_t v83 = *(void *)(v8 + 408);
    uint64_t v84 = *(void *)(v8 + 416);
    uint64_t v85 = *(void *)(v8 + 424);
    uint64_t v86 = *(void *)(v8 + 432);
    uint64_t v87 = *(void *)(v8 + 440);
    uint64_t v88 = *(void *)(v8 + 448);
    uint64_t v89 = *(void *)(v8 + 456);
    long long v90 = *(_OWORD *)(v8 + 464);
    *(void *)(v8 + 400) = v352;
    *(void *)(v8 + 408) = v75;
    *(void *)(v8 + 416) = v76;
    *(void *)(v8 + 424) = v77;
    *(void *)(v8 + 432) = v78;
    *(void *)(v8 + 440) = v79;
    *(void *)(v8 + 448) = v80;
    *(void *)(v8 + 456) = v81;
    *(void *)(v8 + 464) = v357;
    *(void *)(v8 + 472) = v366;
    *(void *)(v8 + 480) = v376;
    *(void *)(v8 + 488) = v386;
    *(void *)(v8 + 496) = v396;
    *(unsigned char *)(v8 + 504) = v405;
    sub_21F76D570(v82, v83, v84, v85, v86, v87, v88, v89, v90);
  }
  long long v99 = (long long *)(v8 + 512);
  uint64_t v100 = (long long *)(v9 + 512);
  int v101 = *(unsigned __int8 *)(v9 + 616);
  if (*(unsigned __int8 *)(v8 + 616) == 255)
  {
    if (v101 == 255)
    {
      long long v107 = *v100;
      long long v108 = *(_OWORD *)(v9 + 544);
      *(_OWORD *)(v8 + 528) = *(_OWORD *)(v9 + 528);
      *(_OWORD *)(v8 + 544) = v108;
      *long long v99 = v107;
      long long v109 = *(_OWORD *)(v9 + 560);
      long long v110 = *(_OWORD *)(v9 + 576);
      long long v111 = *(_OWORD *)(v9 + 592);
      *(_OWORD *)(v8 + 601) = *(_OWORD *)(v9 + 601);
      *(_OWORD *)(v8 + 576) = v110;
      *(_OWORD *)(v8 + 592) = v111;
      *(_OWORD *)(v8 + 560) = v109;
    }
    else
    {
      char v408 = v101 & 1;
      uint64_t v128 = *(void *)(v9 + 512);
      uint64_t v129 = *(void *)(v9 + 520);
      uint64_t v130 = *(void *)(v9 + 528);
      uint64_t v131 = *(void *)(v9 + 536);
      uint64_t v132 = *(void *)(v9 + 544);
      uint64_t v133 = *(void *)(v9 + 552);
      uint64_t v134 = *(void *)(v9 + 560);
      uint64_t v135 = *(void *)(v9 + 568);
      uint64_t v360 = *(void *)(v9 + 576);
      uint64_t v369 = *(void *)(v9 + 584);
      uint64_t v379 = *(void *)(v9 + 592);
      uint64_t v389 = *(void *)(v9 + 600);
      uint64_t v399 = *(void *)(v9 + 608);
      sub_21F764268(v128, v129, v130, v131, v132, v133, v134, v135, v360);
      *(void *)(v8 + 512) = v128;
      *(void *)(v8 + 520) = v129;
      *(void *)(v8 + 528) = v130;
      *(void *)(v8 + 536) = v131;
      *(void *)(v8 + 544) = v132;
      *(void *)(v8 + 552) = v133;
      *(void *)(v8 + 560) = v134;
      *(void *)(v8 + 568) = v135;
      *(void *)(v8 + 576) = v360;
      *(void *)(v8 + 584) = v369;
      *(void *)(v8 + 592) = v379;
      *(void *)(v8 + 600) = v389;
      *(void *)(v8 + 608) = v399;
      *(unsigned char *)(v8 + 616) = v408;
    }
  }
  else if (v101 == 255)
  {
    sub_21F76CA84(v8 + 512, &qword_26AD47AB8);
    long long v103 = *(_OWORD *)(v9 + 528);
    long long v102 = *(_OWORD *)(v9 + 544);
    *long long v99 = *v100;
    *(_OWORD *)(v8 + 528) = v103;
    *(_OWORD *)(v8 + 544) = v102;
    long long v105 = *(_OWORD *)(v9 + 576);
    long long v104 = *(_OWORD *)(v9 + 592);
    long long v106 = *(_OWORD *)(v9 + 560);
    *(_OWORD *)(v8 + 601) = *(_OWORD *)(v9 + 601);
    *(_OWORD *)(v8 + 576) = v105;
    *(_OWORD *)(v8 + 592) = v104;
    *(_OWORD *)(v8 + 560) = v106;
  }
  else
  {
    char v407 = v101 & 1;
    uint64_t v112 = *(void *)(v9 + 520);
    uint64_t v113 = *(void *)(v9 + 528);
    uint64_t v114 = *(void *)(v9 + 536);
    uint64_t v115 = *(void *)(v9 + 544);
    uint64_t v116 = *(void *)(v9 + 552);
    uint64_t v117 = *(void *)(v9 + 560);
    uint64_t v118 = *(void *)(v9 + 568);
    uint64_t v353 = *(void *)(v9 + 512);
    uint64_t v359 = *(void *)(v9 + 576);
    uint64_t v368 = *(void *)(v9 + 584);
    uint64_t v378 = *(void *)(v9 + 592);
    uint64_t v388 = *(void *)(v9 + 600);
    uint64_t v398 = *(void *)(v9 + 608);
    sub_21F764268(v353, v112, v113, v114, v115, v116, v117, v118, *(_OWORD *)(v9 + 576));
    uint64_t v119 = *(void *)(v8 + 512);
    uint64_t v120 = *(void *)(v8 + 520);
    uint64_t v121 = *(void *)(v8 + 528);
    uint64_t v122 = *(void *)(v8 + 536);
    uint64_t v123 = *(void *)(v8 + 544);
    uint64_t v124 = *(void *)(v8 + 552);
    uint64_t v125 = *(void *)(v8 + 560);
    uint64_t v126 = *(void *)(v8 + 568);
    long long v127 = *(_OWORD *)(v8 + 576);
    *(void *)(v8 + 512) = v353;
    *(void *)(v8 + 520) = v112;
    *(void *)(v8 + 528) = v113;
    *(void *)(v8 + 536) = v114;
    *(void *)(v8 + 544) = v115;
    *(void *)(v8 + 552) = v116;
    *(void *)(v8 + 560) = v117;
    *(void *)(v8 + 568) = v118;
    *(void *)(v8 + 576) = v359;
    *(void *)(v8 + 584) = v368;
    *(void *)(v8 + 592) = v378;
    *(void *)(v8 + 600) = v388;
    *(void *)(v8 + 608) = v398;
    *(unsigned char *)(v8 + 616) = v407;
    sub_21F76D570(v119, v120, v121, v122, v123, v124, v125, v126, v127);
  }
  uint64_t v136 = (long long *)(v8 + 624);
  uint64_t v137 = (long long *)(v9 + 624);
  int v138 = *(unsigned __int8 *)(v9 + 720);
  if (*(unsigned __int8 *)(v8 + 720) == 255)
  {
    if (v138 == 255)
    {
      long long v144 = *v137;
      long long v145 = *(_OWORD *)(v9 + 656);
      *(_OWORD *)(v8 + 640) = *(_OWORD *)(v9 + 640);
      *(_OWORD *)(v8 + 656) = v145;
      *uint64_t v136 = v144;
      long long v146 = *(_OWORD *)(v9 + 672);
      long long v147 = *(_OWORD *)(v9 + 688);
      long long v148 = *(_OWORD *)(v9 + 704);
      *(unsigned char *)(v8 + 720) = *(unsigned char *)(v9 + 720);
      *(_OWORD *)(v8 + 688) = v147;
      *(_OWORD *)(v8 + 704) = v148;
      *(_OWORD *)(v8 + 672) = v146;
    }
    else
    {
      char v410 = v138 & 1;
      uint64_t v164 = *(void *)(v9 + 624);
      uint64_t v165 = *(void *)(v9 + 632);
      uint64_t v166 = *(void *)(v9 + 640);
      uint64_t v167 = *(void *)(v9 + 648);
      uint64_t v168 = *(void *)(v9 + 656);
      uint64_t v169 = *(void *)(v9 + 664);
      uint64_t v170 = *(void *)(v9 + 672);
      uint64_t v171 = *(void *)(v9 + 680);
      uint64_t v371 = *(void *)(v9 + 688);
      uint64_t v381 = *(void *)(v9 + 696);
      long long v391 = *(_OWORD *)(v9 + 704);
      sub_21F7E0AB8(v164, v165, v166, v167, v168, v169, v170, v171);
      *(void *)(v8 + 624) = v164;
      *(void *)(v8 + 632) = v165;
      *(void *)(v8 + 640) = v166;
      *(void *)(v8 + 648) = v167;
      *(void *)(v8 + 656) = v168;
      *(void *)(v8 + 664) = v169;
      *(void *)(v8 + 672) = v170;
      *(void *)(v8 + 680) = v171;
      *(void *)(v8 + 688) = v371;
      *(void *)(v8 + 696) = v381;
      *(_OWORD *)(v8 + 704) = v391;
      *(unsigned char *)(v8 + 720) = v410;
    }
  }
  else if (v138 == 255)
  {
    sub_21F76CA84(v8 + 624, qword_26AD44A50);
    long long v140 = *(_OWORD *)(v9 + 640);
    long long v139 = *(_OWORD *)(v9 + 656);
    *uint64_t v136 = *v137;
    *(_OWORD *)(v8 + 640) = v140;
    *(_OWORD *)(v8 + 656) = v139;
    long long v142 = *(_OWORD *)(v9 + 688);
    long long v141 = *(_OWORD *)(v9 + 704);
    long long v143 = *(_OWORD *)(v9 + 672);
    *(unsigned char *)(v8 + 720) = *(unsigned char *)(v9 + 720);
    *(_OWORD *)(v8 + 688) = v142;
    *(_OWORD *)(v8 + 704) = v141;
    *(_OWORD *)(v8 + 672) = v143;
  }
  else
  {
    char v409 = v138 & 1;
    uint64_t v149 = *(void *)(v9 + 632);
    uint64_t v150 = *(void *)(v9 + 640);
    uint64_t v151 = *(void *)(v9 + 648);
    uint64_t v152 = *(void *)(v9 + 656);
    uint64_t v153 = *(void *)(v9 + 664);
    uint64_t v154 = *(void *)(v9 + 672);
    uint64_t v155 = *(void *)(v9 + 680);
    uint64_t v361 = *(void *)(v9 + 624);
    uint64_t v370 = *(void *)(v9 + 688);
    uint64_t v380 = *(void *)(v9 + 696);
    uint64_t v390 = *(void *)(v9 + 704);
    uint64_t v400 = *(void *)(v9 + 712);
    sub_21F7E0AB8(v361, v149, v150, v151, v152, v153, v154, v155);
    uint64_t v156 = *(void *)(v8 + 624);
    uint64_t v157 = *(void *)(v8 + 632);
    uint64_t v158 = *(void *)(v8 + 640);
    uint64_t v159 = *(void *)(v8 + 648);
    uint64_t v160 = *(void *)(v8 + 656);
    uint64_t v161 = *(void *)(v8 + 664);
    uint64_t v162 = *(void *)(v8 + 672);
    uint64_t v163 = *(void *)(v8 + 680);
    *(void *)(v8 + 624) = v361;
    *(void *)(v8 + 632) = v149;
    *(void *)(v8 + 640) = v150;
    *(void *)(v8 + 648) = v151;
    *(void *)(v8 + 656) = v152;
    *(void *)(v8 + 664) = v153;
    *(void *)(v8 + 672) = v154;
    *(void *)(v8 + 680) = v155;
    *(void *)(v8 + 688) = v370;
    *(void *)(v8 + 696) = v380;
    *(void *)(v8 + 704) = v390;
    *(void *)(v8 + 712) = v400;
    *(unsigned char *)(v8 + 720) = v409;
    sub_21F7E0B38(v156, v157, v158, v159, v160, v161, v162, v163);
  }
  long long v172 = (_OWORD *)(v8 + 728);
  int v173 = (_OWORD *)(v9 + 728);
  long long v174 = (unsigned char *)(v8 + 856);
  int v175 = *(unsigned __int8 *)(v9 + 856);
  if (*(unsigned __int8 *)(v8 + 856) == 255)
  {
    if (v175 == 255)
    {
      *long long v172 = *v173;
      long long v182 = *(_OWORD *)(v9 + 744);
      long long v183 = *(_OWORD *)(v9 + 760);
      long long v184 = *(_OWORD *)(v9 + 792);
      *(_OWORD *)(v8 + 776) = *(_OWORD *)(v9 + 776);
      *(_OWORD *)(v8 + 792) = v184;
      *(_OWORD *)(v8 + 744) = v182;
      *(_OWORD *)(v8 + 760) = v183;
      long long v185 = *(_OWORD *)(v9 + 808);
      long long v186 = *(_OWORD *)(v9 + 824);
      long long v187 = *(_OWORD *)(v9 + 840);
      *(unsigned char *)(v8 + 856) = *(unsigned char *)(v9 + 856);
      *(_OWORD *)(v8 + 824) = v186;
      *(_OWORD *)(v8 + 840) = v187;
      *(_OWORD *)(v8 + 808) = v185;
      goto LABEL_117;
    }
LABEL_98:
    uint64_t v188 = *(void *)(v9 + 736);
    *(void *)(v8 + 728) = *(void *)(v9 + 728);
    *(void *)(v8 + 736) = v188;
    uint64_t v189 = (_OWORD *)(v8 + 744);
    uint64_t v190 = (long long *)(v9 + 744);
    uint64_t v191 = *(void *)(v9 + 768);
    swift_retain();
    if (v175)
    {
      if (v191)
      {
        *(void *)(v8 + 768) = v191;
        *(void *)(v8 + 776) = *(void *)(v9 + 776);
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v191 - 8))(v8 + 744, v9 + 744, v191);
        uint64_t v192 = *(void *)(v9 + 784);
        if (v192)
        {
LABEL_101:
          uint64_t v193 = *(void *)(v9 + 792);
          *(void *)(v8 + 784) = v192;
          *(void *)(v8 + 792) = v193;
          swift_retain();
LABEL_107:
          *(void *)(v8 + 800) = *(void *)(v9 + 800);
          uint64_t v198 = (uint64_t *)(v9 + 808);
          int v199 = *(unsigned __int8 *)(v9 + 816);
          swift_bridgeObjectRetain();
          if (v199 == 255)
          {
            uint64_t v200 = *v198;
            *(unsigned char *)(v8 + 816) = *(unsigned char *)(v9 + 816);
            *(void *)(v8 + 808) = v200;
          }
          else
          {
            char v201 = v199 & 1;
            uint64_t v202 = *v198;
            sub_21F7637D8(v202, v201);
            *(void *)(v8 + 808) = v202;
            *(unsigned char *)(v8 + 816) = v201;
          }
          long long v203 = *(_OWORD *)(v9 + 840);
          *(_OWORD *)(v8 + 824) = *(_OWORD *)(v9 + 824);
          *(_OWORD *)(v8 + 840) = v203;
          *long long v174 = 1;
          goto LABEL_117;
        }
      }
      else
      {
        long long v196 = *v190;
        long long v197 = *(_OWORD *)(v9 + 760);
        *(void *)(v8 + 776) = *(void *)(v9 + 776);
        _OWORD *v189 = v196;
        *(_OWORD *)(v8 + 760) = v197;
        uint64_t v192 = *(void *)(v9 + 784);
        if (v192) {
          goto LABEL_101;
        }
      }
      *(_OWORD *)(v8 + 784) = *(_OWORD *)(v9 + 784);
      goto LABEL_107;
    }
    if (v191)
    {
      *(void *)(v8 + 768) = v191;
      *(void *)(v8 + 776) = *(void *)(v9 + 776);
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v191 - 8))(v8 + 744, v9 + 744, v191);
      uint64_t v194 = *(void *)(v9 + 784);
      if (v194)
      {
LABEL_104:
        uint64_t v195 = *(void *)(v9 + 792);
        *(void *)(v8 + 784) = v194;
        *(void *)(v8 + 792) = v195;
        swift_retain();
LABEL_113:
        *(void *)(v8 + 800) = *(void *)(v9 + 800);
        uint64_t v206 = (uint64_t *)(v9 + 808);
        int v207 = *(unsigned __int8 *)(v9 + 816);
        swift_bridgeObjectRetain();
        if (v207 == 255)
        {
          uint64_t v208 = *v206;
          *(unsigned char *)(v8 + 816) = *(unsigned char *)(v9 + 816);
          *(void *)(v8 + 808) = v208;
        }
        else
        {
          char v209 = v207 & 1;
          uint64_t v210 = *v206;
          sub_21F7637D8(v210, v209);
          *(void *)(v8 + 808) = v210;
          *(unsigned char *)(v8 + 816) = v209;
        }
        long long v211 = *(_OWORD *)(v9 + 840);
        *(_OWORD *)(v8 + 824) = *(_OWORD *)(v9 + 824);
        *(_OWORD *)(v8 + 840) = v211;
        *long long v174 = 0;
        goto LABEL_117;
      }
    }
    else
    {
      long long v204 = *v190;
      long long v205 = *(_OWORD *)(v9 + 760);
      *(void *)(v8 + 776) = *(void *)(v9 + 776);
      _OWORD *v189 = v204;
      *(_OWORD *)(v8 + 760) = v205;
      uint64_t v194 = *(void *)(v9 + 784);
      if (v194) {
        goto LABEL_104;
      }
    }
    *(_OWORD *)(v8 + 784) = *(_OWORD *)(v9 + 784);
    goto LABEL_113;
  }
  if (v175 == 255)
  {
    sub_21F76CA84(v8 + 728, &qword_267EE74F0);
    *long long v172 = *v173;
    long long v176 = *(_OWORD *)(v9 + 792);
    long long v178 = *(_OWORD *)(v9 + 744);
    long long v177 = *(_OWORD *)(v9 + 760);
    *(_OWORD *)(v8 + 776) = *(_OWORD *)(v9 + 776);
    *(_OWORD *)(v8 + 792) = v176;
    *(_OWORD *)(v8 + 744) = v178;
    *(_OWORD *)(v8 + 760) = v177;
    long long v180 = *(_OWORD *)(v9 + 824);
    long long v179 = *(_OWORD *)(v9 + 840);
    long long v181 = *(_OWORD *)(v9 + 808);
    *(unsigned char *)(v8 + 856) = *(unsigned char *)(v9 + 856);
    *(_OWORD *)(v8 + 824) = v180;
    *(_OWORD *)(v8 + 840) = v179;
    *(_OWORD *)(v8 + 808) = v181;
    goto LABEL_117;
  }
  if (v415 != v416)
  {
    sub_21F76CA84(v8 + 728, &qword_267EE74F0);
    LOBYTE(v175) = *(unsigned char *)(v9 + 856);
    goto LABEL_98;
  }
LABEL_117:
  char v212 = (long long *)(v8 + 864);
  uint64_t v213 = (long long *)(v9 + 864);
  int v214 = *(unsigned __int8 *)(v9 + 968);
  if (*(unsigned __int8 *)(v8 + 968) == 255)
  {
    if (v214 == 255)
    {
      long long v220 = *v213;
      long long v221 = *(_OWORD *)(v9 + 896);
      *(_OWORD *)(v8 + 880) = *(_OWORD *)(v9 + 880);
      *(_OWORD *)(v8 + 896) = v221;
      *char v212 = v220;
      long long v222 = *(_OWORD *)(v9 + 912);
      long long v223 = *(_OWORD *)(v9 + 928);
      long long v224 = *(_OWORD *)(v9 + 944);
      *(_OWORD *)(v8 + 953) = *(_OWORD *)(v9 + 953);
      *(_OWORD *)(v8 + 928) = v223;
      *(_OWORD *)(v8 + 944) = v224;
      *(_OWORD *)(v8 + 912) = v222;
    }
    else
    {
      char v412 = v214 & 1;
      uint64_t v241 = *(void *)(v9 + 864);
      uint64_t v242 = *(void *)(v9 + 872);
      uint64_t v243 = *(void *)(v9 + 880);
      uint64_t v244 = *(void *)(v9 + 888);
      uint64_t v245 = *(void *)(v9 + 896);
      uint64_t v246 = *(void *)(v9 + 904);
      uint64_t v247 = *(void *)(v9 + 912);
      uint64_t v248 = *(void *)(v9 + 920);
      uint64_t v363 = *(void *)(v9 + 928);
      uint64_t v373 = *(void *)(v9 + 936);
      uint64_t v383 = *(void *)(v9 + 944);
      uint64_t v393 = *(void *)(v9 + 952);
      uint64_t v402 = *(void *)(v9 + 960);
      sub_21F764268(v241, v242, v243, v244, v245, v246, v247, v248, v363);
      *(void *)(v8 + 864) = v241;
      *(void *)(v8 + 872) = v242;
      *(void *)(v8 + 880) = v243;
      *(void *)(v8 + 888) = v244;
      *(void *)(v8 + 896) = v245;
      *(void *)(v8 + 904) = v246;
      *(void *)(v8 + 912) = v247;
      *(void *)(v8 + 920) = v248;
      *(void *)(v8 + 928) = v363;
      *(void *)(v8 + 936) = v373;
      *(void *)(v8 + 944) = v383;
      *(void *)(v8 + 952) = v393;
      *(void *)(v8 + 960) = v402;
      *(unsigned char *)(v8 + 968) = v412;
    }
  }
  else if (v214 == 255)
  {
    sub_21F76CA84(v8 + 864, &qword_26AD47AB8);
    long long v216 = *(_OWORD *)(v9 + 880);
    long long v215 = *(_OWORD *)(v9 + 896);
    *char v212 = *v213;
    *(_OWORD *)(v8 + 880) = v216;
    *(_OWORD *)(v8 + 896) = v215;
    long long v218 = *(_OWORD *)(v9 + 928);
    long long v217 = *(_OWORD *)(v9 + 944);
    long long v219 = *(_OWORD *)(v9 + 912);
    *(_OWORD *)(v8 + 953) = *(_OWORD *)(v9 + 953);
    *(_OWORD *)(v8 + 928) = v218;
    *(_OWORD *)(v8 + 944) = v217;
    *(_OWORD *)(v8 + 912) = v219;
  }
  else
  {
    char v411 = v214 & 1;
    uint64_t v225 = *(void *)(v9 + 872);
    uint64_t v226 = *(void *)(v9 + 880);
    uint64_t v227 = *(void *)(v9 + 888);
    uint64_t v228 = *(void *)(v9 + 896);
    uint64_t v229 = *(void *)(v9 + 904);
    uint64_t v230 = *(void *)(v9 + 912);
    uint64_t v231 = *(void *)(v9 + 920);
    uint64_t v354 = *(void *)(v9 + 864);
    uint64_t v362 = *(void *)(v9 + 928);
    uint64_t v372 = *(void *)(v9 + 936);
    uint64_t v382 = *(void *)(v9 + 944);
    uint64_t v392 = *(void *)(v9 + 952);
    uint64_t v401 = *(void *)(v9 + 960);
    sub_21F764268(v354, v225, v226, v227, v228, v229, v230, v231, *(_OWORD *)(v9 + 928));
    uint64_t v232 = *(void *)(v8 + 864);
    uint64_t v233 = *(void *)(v8 + 872);
    uint64_t v234 = *(void *)(v8 + 880);
    uint64_t v235 = *(void *)(v8 + 888);
    uint64_t v236 = *(void *)(v8 + 896);
    uint64_t v237 = *(void *)(v8 + 904);
    uint64_t v238 = *(void *)(v8 + 912);
    uint64_t v239 = *(void *)(v8 + 920);
    long long v240 = *(_OWORD *)(v8 + 928);
    *(void *)(v8 + 864) = v354;
    *(void *)(v8 + 872) = v225;
    *(void *)(v8 + 880) = v226;
    *(void *)(v8 + 888) = v227;
    *(void *)(v8 + 896) = v228;
    *(void *)(v8 + 904) = v229;
    *(void *)(v8 + 912) = v230;
    *(void *)(v8 + 920) = v231;
    *(void *)(v8 + 928) = v362;
    *(void *)(v8 + 936) = v372;
    *(void *)(v8 + 944) = v382;
    *(void *)(v8 + 952) = v392;
    *(void *)(v8 + 960) = v401;
    *(unsigned char *)(v8 + 968) = v411;
    sub_21F76D570(v232, v233, v234, v235, v236, v237, v238, v239, v240);
  }
  v249 = (_OWORD *)(v8 + 976);
  v250 = (_OWORD *)(v9 + 976);
  int v251 = *(unsigned __int8 *)(v9 + 1104);
  if (*(unsigned __int8 *)(v8 + 1104) == 255)
  {
    if (v251 == 255)
    {
      _OWORD *v249 = *v250;
      long long v258 = *(_OWORD *)(v9 + 992);
      long long v259 = *(_OWORD *)(v9 + 1008);
      long long v260 = *(_OWORD *)(v9 + 1040);
      *(_OWORD *)(v8 + 1024) = *(_OWORD *)(v9 + 1024);
      *(_OWORD *)(v8 + 1040) = v260;
      *(_OWORD *)(v8 + 992) = v258;
      *(_OWORD *)(v8 + 1008) = v259;
      long long v261 = *(_OWORD *)(v9 + 1056);
      long long v262 = *(_OWORD *)(v9 + 1072);
      long long v263 = *(_OWORD *)(v9 + 1088);
      *(unsigned char *)(v8 + 1104) = *(unsigned char *)(v9 + 1104);
      *(_OWORD *)(v8 + 1072) = v262;
      *(_OWORD *)(v8 + 1088) = v263;
      *(_OWORD *)(v8 + 1056) = v261;
    }
    else
    {
      char v414 = v251 & 1;
      uint64_t v281 = *(void *)(v9 + 976);
      uint64_t v282 = *(void *)(v9 + 984);
      uint64_t v283 = *(void *)(v9 + 992);
      uint64_t v284 = *(void *)(v9 + 1000);
      uint64_t v285 = *(void *)(v9 + 1008);
      uint64_t v286 = *(void *)(v9 + 1016);
      uint64_t v287 = *(void *)(v9 + 1024);
      uint64_t v288 = *(void *)(v9 + 1032);
      uint64_t v348 = *(void *)(v9 + 1040);
      uint64_t v351 = *(void *)(v9 + 1048);
      uint64_t v356 = *(void *)(v9 + 1056);
      uint64_t v365 = *(void *)(v9 + 1064);
      uint64_t v375 = *(void *)(v9 + 1072);
      uint64_t v385 = *(void *)(v9 + 1080);
      uint64_t v395 = *(void *)(v9 + 1088);
      uint64_t v404 = *(void *)(v9 + 1096);
      sub_21F7E0C30(v281, v282, v283, v284, v285, v286, v287, v288, v348, v351, v356, v365);
      *(void *)(v8 + 976) = v281;
      *(void *)(v8 + 984) = v282;
      *(void *)(v8 + 992) = v283;
      *(void *)(v8 + 1000) = v284;
      *(void *)(v8 + 1008) = v285;
      *(void *)(v8 + 1016) = v286;
      *(void *)(v8 + 1024) = v287;
      *(void *)(v8 + 1032) = v288;
      *(void *)(v8 + 1040) = v348;
      *(void *)(v8 + 1048) = v351;
      *(void *)(v8 + 1056) = v356;
      *(void *)(v8 + 1064) = v365;
      *(void *)(v8 + 1072) = v375;
      *(void *)(v8 + 1080) = v385;
      *(void *)(v8 + 1088) = v395;
      *(void *)(v8 + 1096) = v404;
      *(unsigned char *)(v8 + 1104) = v414;
    }
  }
  else if (v251 == 255)
  {
    sub_21F76CA84(v8 + 976, &qword_267EE74E8);
    _OWORD *v249 = *v250;
    long long v252 = *(_OWORD *)(v9 + 1040);
    long long v254 = *(_OWORD *)(v9 + 992);
    long long v253 = *(_OWORD *)(v9 + 1008);
    *(_OWORD *)(v8 + 1024) = *(_OWORD *)(v9 + 1024);
    *(_OWORD *)(v8 + 1040) = v252;
    *(_OWORD *)(v8 + 992) = v254;
    *(_OWORD *)(v8 + 1008) = v253;
    long long v256 = *(_OWORD *)(v9 + 1072);
    long long v255 = *(_OWORD *)(v9 + 1088);
    long long v257 = *(_OWORD *)(v9 + 1056);
    *(unsigned char *)(v8 + 1104) = *(unsigned char *)(v9 + 1104);
    *(_OWORD *)(v8 + 1072) = v256;
    *(_OWORD *)(v8 + 1088) = v255;
    *(_OWORD *)(v8 + 1056) = v257;
  }
  else
  {
    char v413 = v251 & 1;
    uint64_t v264 = *(void *)(v9 + 976);
    uint64_t v265 = *(void *)(v9 + 984);
    uint64_t v266 = *(void *)(v9 + 992);
    uint64_t v267 = *(void *)(v9 + 1000);
    uint64_t v268 = *(void *)(v9 + 1008);
    uint64_t v269 = *(void *)(v9 + 1016);
    uint64_t v270 = *(void *)(v9 + 1024);
    uint64_t v347 = *(void *)(v9 + 1032);
    uint64_t v349 = *(void *)(v9 + 1040);
    uint64_t v350 = *(void *)(v9 + 1048);
    uint64_t v355 = *(void *)(v9 + 1056);
    uint64_t v364 = *(void *)(v9 + 1064);
    uint64_t v374 = *(void *)(v9 + 1072);
    uint64_t v384 = *(void *)(v9 + 1080);
    uint64_t v394 = *(void *)(v9 + 1088);
    uint64_t v403 = *(void *)(v9 + 1096);
    sub_21F7E0C30(v264, v265, v266, v267, v268, v269, v270, v347, v349, v350, v355, v364);
    uint64_t v271 = *(void *)(v8 + 976);
    uint64_t v272 = *(void *)(v8 + 984);
    uint64_t v273 = *(void *)(v8 + 992);
    uint64_t v274 = *(void *)(v8 + 1000);
    uint64_t v275 = *(void *)(v8 + 1008);
    uint64_t v276 = *(void *)(v8 + 1016);
    uint64_t v277 = *(void *)(v8 + 1024);
    uint64_t v278 = *(void *)(v8 + 1032);
    long long v279 = *(_OWORD *)(v8 + 1040);
    long long v280 = *(_OWORD *)(v8 + 1056);
    *(void *)(v8 + 976) = v264;
    *(void *)(v8 + 984) = v265;
    *(void *)(v8 + 992) = v266;
    *(void *)(v8 + 1000) = v267;
    *(void *)(v8 + 1008) = v268;
    *(void *)(v8 + 1016) = v269;
    *(void *)(v8 + 1024) = v270;
    *(void *)(v8 + 1032) = v347;
    *(void *)(v8 + 1040) = v349;
    *(void *)(v8 + 1048) = v350;
    *(void *)(v8 + 1056) = v355;
    *(void *)(v8 + 1064) = v364;
    *(void *)(v8 + 1072) = v374;
    *(void *)(v8 + 1080) = v384;
    *(void *)(v8 + 1088) = v394;
    *(void *)(v8 + 1096) = v403;
    *(unsigned char *)(v8 + 1104) = v413;
    sub_21F7E0CA8(v271, v272, v273, v274, v275, v276, v277, v278, v279, *((uint64_t *)&v279 + 1), v280, BYTE8(v280));
  }
  *(void *)(v8 + 1112) = *(void *)(v9 + 1112);
  *(void *)(v8 + 1120) = *(void *)(v9 + 1120);
  *(void *)(v8 + 1128) = *(void *)(v9 + 1128);
  *(void *)(v8 + 1136) = *(void *)(v9 + 1136);
  *(unsigned char *)(v8 + 1144) = *(unsigned char *)(v9 + 1144);
  *(void *)(v8 + 1152) = *(void *)(v9 + 1152);
  *(void *)(v8 + 1160) = *(void *)(v9 + 1160);
  *(void *)(v8 + 1168) = *(void *)(v9 + 1168);
  *(void *)(v8 + 1176) = *(void *)(v9 + 1176);
  v289 = (int *)type metadata accessor for ChartModel.Scenegraph();
  uint64_t v290 = v289[14];
  uint64_t v291 = v8 + v290;
  uint64_t v292 = v9 + v290;
  uint64_t v293 = sub_21FA24970();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v293 - 8) + 24))(v291, v292, v293);
  *(void *)(v8 + v289[15]) = *(void *)(v9 + v289[15]);
  swift_retain();
  swift_release();
  *(void *)(v8 + v289[16]) = *(void *)(v9 + v289[16]);
  swift_retain();
  swift_release();
  uint64_t v294 = v289[17];
  uint64_t v295 = v8 + v294;
  v296 = (long long *)(v9 + v294);
  int v297 = *(unsigned __int8 *)(v8 + v294 + 40);
  int v298 = *(unsigned __int8 *)(v9 + v294 + 40);
  if (v297 == 255)
  {
    if (v298 == 255)
    {
      long long v301 = *v296;
      long long v302 = v296[1];
      *(_OWORD *)(v295 + 25) = *(long long *)((char *)v296 + 25);
      *(_OWORD *)uint64_t v295 = v301;
      *(_OWORD *)(v295 + 16) = v302;
      goto LABEL_141;
    }
    if (v298) {
      goto LABEL_138;
    }
LABEL_140:
    uint64_t v304 = *((void *)v296 + 3);
    *(void *)(v295 + 24) = v304;
    *(void *)(v295 + 32) = *((void *)v296 + 4);
    (**(void (***)(uint64_t, long long *))(v304 - 8))(v295, v296);
    *(unsigned char *)(v295 + 40) = 0;
    goto LABEL_141;
  }
  if (v298 == 255)
  {
    sub_21F7B25D8(v295);
    long long v299 = *(long long *)((char *)v296 + 25);
    long long v300 = v296[1];
    *(_OWORD *)uint64_t v295 = *v296;
    *(_OWORD *)(v295 + 16) = v300;
    *(_OWORD *)(v295 + 25) = v299;
    goto LABEL_141;
  }
  if (v415 != v416)
  {
    sub_21F7B25D8(v295);
    if (*((unsigned char *)v296 + 40))
    {
LABEL_138:
      uint64_t v303 = *((void *)v296 + 3);
      *(void *)(v295 + 24) = v303;
      *(void *)(v295 + 32) = *((void *)v296 + 4);
      (**(void (***)(uint64_t, long long *))(v303 - 8))(v295, v296);
      *(unsigned char *)(v295 + 40) = 1;
      goto LABEL_141;
    }
    goto LABEL_140;
  }
LABEL_141:
  v305 = (long long *)(v295 + 48);
  v306 = v296 + 3;
  int v307 = *((unsigned __int8 *)v296 + 88);
  if (*(unsigned __int8 *)(v295 + 88) == 255)
  {
    if (v307 == 255)
    {
      long long v310 = *v306;
      long long v311 = v296[4];
      *(_OWORD *)(v295 + 73) = *(long long *)((char *)v296 + 73);
      long long *v305 = v310;
      *(_OWORD *)(v295 + 64) = v311;
      goto LABEL_151;
    }
    goto LABEL_148;
  }
  if (v307 == 255)
  {
    sub_21F7B26E4(v295 + 48);
    long long v308 = *(long long *)((char *)v296 + 73);
    long long v309 = v296[4];
    long long *v305 = *v306;
    *(_OWORD *)(v295 + 64) = v309;
    *(_OWORD *)(v295 + 73) = v308;
    goto LABEL_151;
  }
  if (v415 != v416)
  {
    sub_21F7B26E4(v295 + 48);
    LOBYTE(v307) = *((unsigned char *)v296 + 88);
LABEL_148:
    uint64_t v312 = *((void *)v296 + 9);
    *(void *)(v295 + 72) = v312;
    *(void *)(v295 + 80) = *((void *)v296 + 10);
    (**(void (***)(uint64_t, uint64_t))(v312 - 8))(v295 + 48, (uint64_t)(v296 + 3));
    *(unsigned char *)(v295 + 88) = (v307 & 1) != 0;
  }
LABEL_151:
  v313 = (long long *)(v295 + 96);
  v314 = v296 + 6;
  int v315 = *((unsigned __int8 *)v296 + 136);
  if (*(unsigned __int8 *)(v295 + 136) == 255)
  {
    if (v315 == 255)
    {
      long long v318 = *v314;
      long long v319 = v296[7];
      *(_OWORD *)(v295 + 121) = *(long long *)((char *)v296 + 121);
      long long *v313 = v318;
      *(_OWORD *)(v295 + 112) = v319;
      goto LABEL_161;
    }
    goto LABEL_158;
  }
  if (v315 == 255)
  {
    sub_21F7B25D8(v295 + 96);
    long long v316 = *(long long *)((char *)v296 + 121);
    long long v317 = v296[7];
    long long *v313 = *v314;
    *(_OWORD *)(v295 + 112) = v317;
    *(_OWORD *)(v295 + 121) = v316;
    goto LABEL_161;
  }
  if (v415 != v416)
  {
    sub_21F7B25D8(v295 + 96);
    LOBYTE(v315) = *((unsigned char *)v296 + 136);
LABEL_158:
    uint64_t v320 = *((void *)v296 + 15);
    *(void *)(v295 + 120) = v320;
    *(void *)(v295 + 128) = *((void *)v296 + 16);
    (**(void (***)(uint64_t, uint64_t))(v320 - 8))(v295 + 96, (uint64_t)(v296 + 6));
    *(unsigned char *)(v295 + 136) = (v315 & 1) != 0;
  }
LABEL_161:
  v321 = (long long *)(v295 + 144);
  v322 = v296 + 9;
  int v323 = *((unsigned __int8 *)v296 + 184);
  if (*(unsigned __int8 *)(v295 + 184) == 255)
  {
    if (v323 == 255)
    {
      long long v326 = *v322;
      long long v327 = v296[10];
      *(_OWORD *)(v295 + 169) = *(long long *)((char *)v296 + 169);
      long long *v321 = v326;
      *(_OWORD *)(v295 + 160) = v327;
      goto LABEL_171;
    }
    goto LABEL_168;
  }
  if (v323 == 255)
  {
    sub_21F7B26E4(v295 + 144);
    long long v324 = *(long long *)((char *)v296 + 169);
    long long v325 = v296[10];
    long long *v321 = *v322;
    *(_OWORD *)(v295 + 160) = v325;
    *(_OWORD *)(v295 + 169) = v324;
    goto LABEL_171;
  }
  if (v415 != v416)
  {
    sub_21F7B26E4(v295 + 144);
    LOBYTE(v323) = *((unsigned char *)v296 + 184);
LABEL_168:
    uint64_t v328 = *((void *)v296 + 21);
    *(void *)(v295 + 168) = v328;
    *(void *)(v295 + 176) = *((void *)v296 + 22);
    (**(void (***)(uint64_t, uint64_t))(v328 - 8))(v295 + 144, (uint64_t)(v296 + 9));
    *(unsigned char *)(v295 + 184) = (v323 & 1) != 0;
  }
LABEL_171:
  v329 = (long long *)(v295 + 192);
  v330 = v296 + 12;
  int v331 = *((unsigned __int8 *)v296 + 232);
  if (*(unsigned __int8 *)(v295 + 232) == 255)
  {
    if (v331 == 255)
    {
      long long v334 = *v330;
      long long v335 = v296[13];
      *(_OWORD *)(v295 + 217) = *(long long *)((char *)v296 + 217);
      long long *v329 = v334;
      *(_OWORD *)(v295 + 208) = v335;
      goto LABEL_181;
    }
    goto LABEL_178;
  }
  if (v331 == 255)
  {
    sub_21F7B25D8(v295 + 192);
    long long v332 = *(long long *)((char *)v296 + 217);
    long long v333 = v296[13];
    long long *v329 = *v330;
    *(_OWORD *)(v295 + 208) = v333;
    *(_OWORD *)(v295 + 217) = v332;
    goto LABEL_181;
  }
  if (v415 != v416)
  {
    sub_21F7B25D8(v295 + 192);
    LOBYTE(v331) = *((unsigned char *)v296 + 232);
LABEL_178:
    uint64_t v336 = *((void *)v296 + 27);
    *(void *)(v295 + 216) = v336;
    *(void *)(v295 + 224) = *((void *)v296 + 28);
    (**(void (***)(uint64_t, uint64_t))(v336 - 8))(v295 + 192, (uint64_t)(v296 + 12));
    *(unsigned char *)(v295 + 232) = (v331 & 1) != 0;
  }
LABEL_181:
  v337 = (long long *)(v295 + 240);
  v338 = v296 + 15;
  v339 = (BOOL *)(v295 + 280);
  int v340 = *((unsigned __int8 *)v296 + 280);
  if (*(unsigned __int8 *)(v295 + 280) == 255)
  {
    if (v340 == 255)
    {
      long long v343 = *v338;
      long long v344 = v296[16];
      *(_OWORD *)(v295 + 265) = *(long long *)((char *)v296 + 265);
      long long *v337 = v343;
      *(_OWORD *)(v295 + 256) = v344;
      goto LABEL_191;
    }
  }
  else
  {
    if (v340 == 255)
    {
      sub_21F7B26E4(v295 + 240);
      long long v341 = *(long long *)((char *)v296 + 265);
      long long v342 = v296[16];
      long long *v337 = *v338;
      *(_OWORD *)(v295 + 256) = v342;
      *(_OWORD *)(v295 + 265) = v341;
      goto LABEL_191;
    }
    if (v415 == v416) {
      goto LABEL_191;
    }
    sub_21F7B26E4(v295 + 240);
    LOBYTE(v340) = *((unsigned char *)v296 + 280);
  }
  uint64_t v345 = *((void *)v296 + 33);
  *(void *)(v295 + 264) = v345;
  *(void *)(v295 + 272) = *((void *)v296 + 34);
  (**(void (***)(uint64_t, uint64_t))(v345 - 8))(v295 + 240, (uint64_t)(v296 + 15));
  BOOL *v339 = (v340 & 1) != 0;
LABEL_191:
  *(unsigned char *)(v295 + 281) = *((unsigned char *)v296 + 281);
  *(unsigned char *)(v295 + 282) = *((unsigned char *)v296 + 282);
  return v415;
}

uint64_t initializeWithTake for ChartScrollTargetBehaviorContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_21FA250C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  long long v10 = *(_OWORD *)(a2 + v7 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)(a2 + v7);
  *(_OWORD *)(v8 + 16) = v10;
  memcpy((void *)(a1 + v7 + 32), (const void *)(a2 + v7 + 32), 0x170uLL);
  memcpy((void *)(v8 + 400), (const void *)(v9 + 400), 0x2C1uLL);
  *(_OWORD *)(v8 + 1112) = *(_OWORD *)(v9 + 1112);
  *(_OWORD *)(v8 + 1128) = *(_OWORD *)(v9 + 1128);
  *(unsigned char *)(v8 + 1144) = *(unsigned char *)(v9 + 1144);
  *(_OWORD *)(v8 + 1152) = *(_OWORD *)(v9 + 1152);
  *(_OWORD *)(v8 + 1168) = *(_OWORD *)(v9 + 1168);
  int v11 = (int *)type metadata accessor for ChartModel.Scenegraph();
  uint64_t v12 = v11[14];
  uint64_t v13 = v8 + v12;
  uint64_t v14 = v9 + v12;
  uint64_t v15 = sub_21FA24970();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  *(void *)(v8 + v11[15]) = *(void *)(v9 + v11[15]);
  *(void *)(v8 + v11[16]) = *(void *)(v9 + v11[16]);
  memcpy((void *)(v8 + v11[17]), (const void *)(v9 + v11[17]), 0x11BuLL);
  return a1;
}

uint64_t assignWithTake for ChartScrollTargetBehaviorContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_21FA250C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  swift_release();
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  swift_release();
  *(void *)(v8 + 24) = *(void *)(v9 + 24);
  swift_release();
  if (a1 != a2)
  {
    sub_21F76CA84(v8 + 32, &qword_26AD4A218);
    memcpy((void *)(v8 + 32), (const void *)(v9 + 32), 0x11CuLL);
  }
  *(unsigned char *)(v8 + 316) = *(unsigned char *)(v9 + 316);
  uint64_t v10 = *(void *)(v9 + 320);
  if (*(void *)(v8 + 320))
  {
    if (v10)
    {
      uint64_t v11 = *(void *)(v9 + 328);
      *(void *)(v8 + 320) = v10;
      *(void *)(v8 + 328) = v11;
      swift_release();
      goto LABEL_10;
    }
    swift_release();
  }
  else if (v10)
  {
    uint64_t v12 = *(void *)(v9 + 328);
    *(void *)(v8 + 320) = v10;
    *(void *)(v8 + 328) = v12;
    goto LABEL_10;
  }
  *(_OWORD *)(v8 + 320) = *(_OWORD *)(v9 + 320);
LABEL_10:
  uint64_t v13 = *(void *)(v9 + 336);
  if (*(void *)(v8 + 336))
  {
    if (v13)
    {
      uint64_t v14 = *(void *)(v9 + 344);
      *(void *)(v8 + 336) = v13;
      *(void *)(v8 + 344) = v14;
      swift_release();
      goto LABEL_17;
    }
    swift_release();
  }
  else if (v13)
  {
    uint64_t v15 = *(void *)(v9 + 344);
    *(void *)(v8 + 336) = v13;
    *(void *)(v8 + 344) = v15;
    goto LABEL_17;
  }
  *(_OWORD *)(v8 + 336) = *(_OWORD *)(v9 + 336);
LABEL_17:
  uint64_t v16 = *(void *)(v9 + 352);
  if (*(void *)(v8 + 352))
  {
    if (v16)
    {
      uint64_t v17 = *(void *)(v9 + 360);
      *(void *)(v8 + 352) = v16;
      *(void *)(v8 + 360) = v17;
      swift_release();
      goto LABEL_24;
    }
    swift_release();
  }
  else if (v16)
  {
    uint64_t v18 = *(void *)(v9 + 360);
    *(void *)(v8 + 352) = v16;
    *(void *)(v8 + 360) = v18;
    goto LABEL_24;
  }
  *(_OWORD *)(v8 + 352) = *(_OWORD *)(v9 + 352);
LABEL_24:
  uint64_t v19 = *(void *)(v9 + 368);
  if (*(void *)(v8 + 368))
  {
    if (v19)
    {
      uint64_t v20 = *(void *)(v9 + 376);
      *(void *)(v8 + 368) = v19;
      *(void *)(v8 + 376) = v20;
      swift_release();
      goto LABEL_31;
    }
    swift_release();
  }
  else if (v19)
  {
    uint64_t v21 = *(void *)(v9 + 376);
    *(void *)(v8 + 368) = v19;
    *(void *)(v8 + 376) = v21;
    goto LABEL_31;
  }
  *(_OWORD *)(v8 + 368) = *(_OWORD *)(v9 + 368);
LABEL_31:
  uint64_t v22 = *(void *)(v9 + 384);
  if (*(void *)(v8 + 384))
  {
    if (v22)
    {
      uint64_t v23 = *(void *)(v9 + 392);
      *(void *)(v8 + 384) = v22;
      *(void *)(v8 + 392) = v23;
      swift_release();
      goto LABEL_38;
    }
    swift_release();
  }
  else if (v22)
  {
    uint64_t v24 = *(void *)(v9 + 392);
    *(void *)(v8 + 384) = v22;
    *(void *)(v8 + 392) = v24;
    goto LABEL_38;
  }
  *(_OWORD *)(v8 + 384) = *(_OWORD *)(v9 + 384);
LABEL_38:
  if (*(unsigned __int8 *)(v8 + 504) == 255)
  {
LABEL_41:
    long long v26 = *(_OWORD *)(v9 + 480);
    *(_OWORD *)(v8 + 464) = *(_OWORD *)(v9 + 464);
    *(_OWORD *)(v8 + 480) = v26;
    *(_OWORD *)(v8 + 489) = *(_OWORD *)(v9 + 489);
    long long v27 = *(_OWORD *)(v9 + 416);
    *(_OWORD *)(v8 + 400) = *(_OWORD *)(v9 + 400);
    *(_OWORD *)(v8 + 416) = v27;
    long long v28 = *(_OWORD *)(v9 + 448);
    *(_OWORD *)(v8 + 432) = *(_OWORD *)(v9 + 432);
    *(_OWORD *)(v8 + 448) = v28;
    goto LABEL_43;
  }
  int v25 = *(unsigned __int8 *)(v9 + 504);
  if (v25 == 255)
  {
    sub_21F76CA84(v8 + 400, &qword_26AD47AB8);
    goto LABEL_41;
  }
  uint64_t v29 = *(void *)(v9 + 496);
  uint64_t v30 = *(void *)(v8 + 400);
  uint64_t v31 = *(void *)(v8 + 408);
  uint64_t v32 = *(void *)(v8 + 416);
  uint64_t v33 = *(void *)(v8 + 424);
  uint64_t v34 = *(void *)(v8 + 432);
  uint64_t v35 = *(void *)(v8 + 440);
  uint64_t v36 = *(void *)(v8 + 448);
  uint64_t v37 = *(void *)(v8 + 456);
  long long v38 = *(_OWORD *)(v8 + 464);
  long long v39 = *(_OWORD *)(v9 + 416);
  *(_OWORD *)(v8 + 400) = *(_OWORD *)(v9 + 400);
  *(_OWORD *)(v8 + 416) = v39;
  long long v40 = *(_OWORD *)(v9 + 448);
  *(_OWORD *)(v8 + 432) = *(_OWORD *)(v9 + 432);
  *(_OWORD *)(v8 + 448) = v40;
  long long v41 = *(_OWORD *)(v9 + 480);
  *(_OWORD *)(v8 + 464) = *(_OWORD *)(v9 + 464);
  *(_OWORD *)(v8 + 480) = v41;
  *(void *)(v8 + 496) = v29;
  *(unsigned char *)(v8 + 504) = v25 & 1;
  sub_21F76D570(v30, v31, v32, v33, v34, v35, v36, v37, v38);
LABEL_43:
  if (*(unsigned __int8 *)(v8 + 616) == 255)
  {
LABEL_46:
    long long v43 = *(_OWORD *)(v9 + 592);
    *(_OWORD *)(v8 + 576) = *(_OWORD *)(v9 + 576);
    *(_OWORD *)(v8 + 592) = v43;
    *(_OWORD *)(v8 + 601) = *(_OWORD *)(v9 + 601);
    long long v44 = *(_OWORD *)(v9 + 528);
    *(_OWORD *)(v8 + 512) = *(_OWORD *)(v9 + 512);
    *(_OWORD *)(v8 + 528) = v44;
    long long v45 = *(_OWORD *)(v9 + 560);
    *(_OWORD *)(v8 + 544) = *(_OWORD *)(v9 + 544);
    *(_OWORD *)(v8 + 560) = v45;
    goto LABEL_48;
  }
  int v42 = *(unsigned __int8 *)(v9 + 616);
  if (v42 == 255)
  {
    sub_21F76CA84(v8 + 512, &qword_26AD47AB8);
    goto LABEL_46;
  }
  uint64_t v46 = *(void *)(v9 + 608);
  uint64_t v47 = *(void *)(v8 + 512);
  uint64_t v48 = *(void *)(v8 + 520);
  uint64_t v49 = *(void *)(v8 + 528);
  uint64_t v50 = *(void *)(v8 + 536);
  uint64_t v51 = *(void *)(v8 + 544);
  uint64_t v52 = *(void *)(v8 + 552);
  uint64_t v53 = *(void *)(v8 + 560);
  uint64_t v54 = *(void *)(v8 + 568);
  long long v55 = *(_OWORD *)(v8 + 576);
  long long v56 = *(_OWORD *)(v9 + 528);
  *(_OWORD *)(v8 + 512) = *(_OWORD *)(v9 + 512);
  *(_OWORD *)(v8 + 528) = v56;
  long long v57 = *(_OWORD *)(v9 + 560);
  *(_OWORD *)(v8 + 544) = *(_OWORD *)(v9 + 544);
  *(_OWORD *)(v8 + 560) = v57;
  long long v58 = *(_OWORD *)(v9 + 592);
  *(_OWORD *)(v8 + 576) = *(_OWORD *)(v9 + 576);
  *(_OWORD *)(v8 + 592) = v58;
  *(void *)(v8 + 608) = v46;
  *(unsigned char *)(v8 + 616) = v42 & 1;
  sub_21F76D570(v47, v48, v49, v50, v51, v52, v53, v54, v55);
LABEL_48:
  if (*(unsigned __int8 *)(v8 + 720) == 255)
  {
LABEL_51:
    long long v60 = *(_OWORD *)(v9 + 704);
    *(_OWORD *)(v8 + 688) = *(_OWORD *)(v9 + 688);
    *(_OWORD *)(v8 + 704) = v60;
    *(unsigned char *)(v8 + 720) = *(unsigned char *)(v9 + 720);
    long long v61 = *(_OWORD *)(v9 + 640);
    *(_OWORD *)(v8 + 624) = *(_OWORD *)(v9 + 624);
    *(_OWORD *)(v8 + 640) = v61;
    long long v62 = *(_OWORD *)(v9 + 672);
    *(_OWORD *)(v8 + 656) = *(_OWORD *)(v9 + 656);
    *(_OWORD *)(v8 + 672) = v62;
    goto LABEL_53;
  }
  int v59 = *(unsigned __int8 *)(v9 + 720);
  if (v59 == 255)
  {
    sub_21F76CA84(v8 + 624, qword_26AD44A50);
    goto LABEL_51;
  }
  uint64_t v63 = *(void *)(v8 + 624);
  uint64_t v64 = *(void *)(v8 + 632);
  uint64_t v65 = *(void *)(v8 + 640);
  uint64_t v66 = *(void *)(v8 + 648);
  uint64_t v67 = *(void *)(v8 + 656);
  uint64_t v68 = *(void *)(v8 + 664);
  uint64_t v69 = *(void *)(v8 + 672);
  uint64_t v70 = *(void *)(v8 + 680);
  long long v71 = *(_OWORD *)(v9 + 640);
  *(_OWORD *)(v8 + 624) = *(_OWORD *)(v9 + 624);
  *(_OWORD *)(v8 + 640) = v71;
  long long v72 = *(_OWORD *)(v9 + 672);
  *(_OWORD *)(v8 + 656) = *(_OWORD *)(v9 + 656);
  *(_OWORD *)(v8 + 672) = v72;
  long long v73 = *(_OWORD *)(v9 + 704);
  *(_OWORD *)(v8 + 688) = *(_OWORD *)(v9 + 688);
  *(_OWORD *)(v8 + 704) = v73;
  *(unsigned char *)(v8 + 720) = v59 & 1;
  sub_21F7E0B38(v63, v64, v65, v66, v67, v68, v69, v70);
LABEL_53:
  if (*(unsigned __int8 *)(v8 + 856) == 255)
  {
LABEL_57:
    long long v74 = *(_OWORD *)(v9 + 840);
    *(_OWORD *)(v8 + 824) = *(_OWORD *)(v9 + 824);
    *(_OWORD *)(v8 + 840) = v74;
    *(unsigned char *)(v8 + 856) = *(unsigned char *)(v9 + 856);
    long long v75 = *(_OWORD *)(v9 + 776);
    *(_OWORD *)(v8 + 760) = *(_OWORD *)(v9 + 760);
    *(_OWORD *)(v8 + 776) = v75;
    long long v76 = *(_OWORD *)(v9 + 808);
    *(_OWORD *)(v8 + 792) = *(_OWORD *)(v9 + 792);
    *(_OWORD *)(v8 + 808) = v76;
    long long v77 = *(_OWORD *)(v9 + 744);
    *(_OWORD *)(v8 + 728) = *(_OWORD *)(v9 + 728);
    *(_OWORD *)(v8 + 744) = v77;
    goto LABEL_58;
  }
  if (*(unsigned __int8 *)(v9 + 856) == 255 || a1 != a2)
  {
    sub_21F76CA84(v8 + 728, &qword_267EE74F0);
    goto LABEL_57;
  }
LABEL_58:
  if (*(unsigned __int8 *)(v8 + 968) == 255)
  {
LABEL_61:
    long long v79 = *(_OWORD *)(v9 + 944);
    *(_OWORD *)(v8 + 928) = *(_OWORD *)(v9 + 928);
    *(_OWORD *)(v8 + 944) = v79;
    *(_OWORD *)(v8 + 953) = *(_OWORD *)(v9 + 953);
    long long v80 = *(_OWORD *)(v9 + 880);
    *(_OWORD *)(v8 + 864) = *(_OWORD *)(v9 + 864);
    *(_OWORD *)(v8 + 880) = v80;
    long long v81 = *(_OWORD *)(v9 + 912);
    *(_OWORD *)(v8 + 896) = *(_OWORD *)(v9 + 896);
    *(_OWORD *)(v8 + 912) = v81;
    goto LABEL_63;
  }
  int v78 = *(unsigned __int8 *)(v9 + 968);
  if (v78 == 255)
  {
    sub_21F76CA84(v8 + 864, &qword_26AD47AB8);
    goto LABEL_61;
  }
  uint64_t v82 = *(void *)(v9 + 960);
  uint64_t v83 = *(void *)(v8 + 864);
  uint64_t v84 = *(void *)(v8 + 872);
  uint64_t v85 = *(void *)(v8 + 880);
  uint64_t v86 = *(void *)(v8 + 888);
  uint64_t v87 = *(void *)(v8 + 896);
  uint64_t v88 = *(void *)(v8 + 904);
  uint64_t v89 = *(void *)(v8 + 912);
  uint64_t v90 = *(void *)(v8 + 920);
  long long v91 = *(_OWORD *)(v8 + 928);
  long long v92 = *(_OWORD *)(v9 + 880);
  *(_OWORD *)(v8 + 864) = *(_OWORD *)(v9 + 864);
  *(_OWORD *)(v8 + 880) = v92;
  long long v93 = *(_OWORD *)(v9 + 912);
  *(_OWORD *)(v8 + 896) = *(_OWORD *)(v9 + 896);
  *(_OWORD *)(v8 + 912) = v93;
  long long v94 = *(_OWORD *)(v9 + 944);
  *(_OWORD *)(v8 + 928) = *(_OWORD *)(v9 + 928);
  *(_OWORD *)(v8 + 944) = v94;
  *(void *)(v8 + 960) = v82;
  *(unsigned char *)(v8 + 968) = v78 & 1;
  sub_21F76D570(v83, v84, v85, v86, v87, v88, v89, v90, v91);
LABEL_63:
  if (*(unsigned __int8 *)(v8 + 1104) == 255)
  {
LABEL_66:
    long long v96 = *(_OWORD *)(v9 + 1088);
    *(_OWORD *)(v8 + 1072) = *(_OWORD *)(v9 + 1072);
    *(_OWORD *)(v8 + 1088) = v96;
    *(unsigned char *)(v8 + 1104) = *(unsigned char *)(v9 + 1104);
    long long v97 = *(_OWORD *)(v9 + 1024);
    *(_OWORD *)(v8 + 1008) = *(_OWORD *)(v9 + 1008);
    *(_OWORD *)(v8 + 1024) = v97;
    long long v98 = *(_OWORD *)(v9 + 1056);
    *(_OWORD *)(v8 + 1040) = *(_OWORD *)(v9 + 1040);
    *(_OWORD *)(v8 + 1056) = v98;
    long long v99 = *(_OWORD *)(v9 + 992);
    *(_OWORD *)(v8 + 976) = *(_OWORD *)(v9 + 976);
    *(_OWORD *)(v8 + 992) = v99;
    goto LABEL_68;
  }
  int v95 = *(unsigned __int8 *)(v9 + 1104);
  if (v95 == 255)
  {
    sub_21F76CA84(v8 + 976, &qword_267EE74E8);
    goto LABEL_66;
  }
  uint64_t v100 = *(void *)(v8 + 976);
  uint64_t v101 = *(void *)(v8 + 984);
  uint64_t v102 = *(void *)(v8 + 992);
  uint64_t v103 = *(void *)(v8 + 1000);
  uint64_t v104 = *(void *)(v8 + 1008);
  uint64_t v105 = *(void *)(v8 + 1016);
  uint64_t v106 = *(void *)(v8 + 1024);
  uint64_t v107 = *(void *)(v8 + 1032);
  long long v108 = *(_OWORD *)(v8 + 1040);
  long long v109 = *(_OWORD *)(v8 + 1056);
  long long v110 = *(_OWORD *)(v9 + 992);
  *(_OWORD *)(v8 + 976) = *(_OWORD *)(v9 + 976);
  *(_OWORD *)(v8 + 992) = v110;
  long long v111 = *(_OWORD *)(v9 + 1024);
  *(_OWORD *)(v8 + 1008) = *(_OWORD *)(v9 + 1008);
  *(_OWORD *)(v8 + 1024) = v111;
  *(_OWORD *)(v8 + 1040) = *(_OWORD *)(v9 + 1040);
  *(_OWORD *)(v8 + 1056) = *(_OWORD *)(v9 + 1056);
  *(_OWORD *)(v8 + 1072) = *(_OWORD *)(v9 + 1072);
  *(_OWORD *)(v8 + 1088) = *(_OWORD *)(v9 + 1088);
  *(unsigned char *)(v8 + 1104) = v95 & 1;
  sub_21F7E0CA8(v100, v101, v102, v103, v104, v105, v106, v107, v108, *((uint64_t *)&v108 + 1), v109, BYTE8(v109));
LABEL_68:
  *(void *)(v8 + 1112) = *(void *)(v9 + 1112);
  *(_OWORD *)(v8 + 1120) = *(_OWORD *)(v9 + 1120);
  *(void *)(v8 + 1136) = *(void *)(v9 + 1136);
  *(unsigned char *)(v8 + 1144) = *(unsigned char *)(v9 + 1144);
  *(_OWORD *)(v8 + 1152) = *(_OWORD *)(v9 + 1152);
  *(_OWORD *)(v8 + 1168) = *(_OWORD *)(v9 + 1168);
  uint64_t v112 = (int *)type metadata accessor for ChartModel.Scenegraph();
  uint64_t v113 = v112[14];
  uint64_t v114 = v8 + v113;
  uint64_t v115 = v9 + v113;
  uint64_t v116 = sub_21FA24970();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v116 - 8) + 40))(v114, v115, v116);
  *(void *)(v8 + v112[15]) = *(void *)(v9 + v112[15]);
  swift_release();
  *(void *)(v8 + v112[16]) = *(void *)(v9 + v112[16]);
  swift_release();
  uint64_t v117 = v112[17];
  uint64_t v118 = v8 + v117;
  uint64_t v119 = v9 + v117;
  if (*(unsigned __int8 *)(v8 + v117 + 40) == 255)
  {
LABEL_72:
    long long v120 = *(_OWORD *)(v119 + 16);
    *(_OWORD *)uint64_t v118 = *(_OWORD *)v119;
    *(_OWORD *)(v118 + 16) = v120;
    *(_OWORD *)(v118 + 25) = *(_OWORD *)(v119 + 25);
    goto LABEL_73;
  }
  if (*(unsigned __int8 *)(v119 + 40) == 255 || a1 != a2)
  {
    sub_21F7B25D8(v118);
    goto LABEL_72;
  }
LABEL_73:
  if (*(unsigned __int8 *)(v118 + 88) == 255)
  {
LABEL_77:
    long long v121 = *(_OWORD *)(v119 + 64);
    *(_OWORD *)(v118 + 48) = *(_OWORD *)(v119 + 48);
    *(_OWORD *)(v118 + 64) = v121;
    *(_OWORD *)(v118 + 73) = *(_OWORD *)(v119 + 73);
    goto LABEL_78;
  }
  if (*(unsigned __int8 *)(v119 + 88) == 255 || a1 != a2)
  {
    sub_21F7B26E4(v118 + 48);
    goto LABEL_77;
  }
LABEL_78:
  if (*(unsigned __int8 *)(v118 + 136) == 255)
  {
LABEL_82:
    long long v122 = *(_OWORD *)(v119 + 112);
    *(_OWORD *)(v118 + 96) = *(_OWORD *)(v119 + 96);
    *(_OWORD *)(v118 + 112) = v122;
    *(_OWORD *)(v118 + 121) = *(_OWORD *)(v119 + 121);
    goto LABEL_83;
  }
  if (*(unsigned __int8 *)(v119 + 136) == 255 || a1 != a2)
  {
    sub_21F7B25D8(v118 + 96);
    goto LABEL_82;
  }
LABEL_83:
  if (*(unsigned __int8 *)(v118 + 184) == 255)
  {
LABEL_87:
    long long v123 = *(_OWORD *)(v119 + 160);
    *(_OWORD *)(v118 + 144) = *(_OWORD *)(v119 + 144);
    *(_OWORD *)(v118 + 160) = v123;
    *(_OWORD *)(v118 + 169) = *(_OWORD *)(v119 + 169);
    goto LABEL_88;
  }
  if (*(unsigned __int8 *)(v119 + 184) == 255 || a1 != a2)
  {
    sub_21F7B26E4(v118 + 144);
    goto LABEL_87;
  }
LABEL_88:
  if (*(unsigned __int8 *)(v118 + 232) == 255)
  {
LABEL_92:
    long long v124 = *(_OWORD *)(v119 + 208);
    *(_OWORD *)(v118 + 192) = *(_OWORD *)(v119 + 192);
    *(_OWORD *)(v118 + 208) = v124;
    *(_OWORD *)(v118 + 217) = *(_OWORD *)(v119 + 217);
    goto LABEL_93;
  }
  if (*(unsigned __int8 *)(v119 + 232) == 255 || a1 != a2)
  {
    sub_21F7B25D8(v118 + 192);
    goto LABEL_92;
  }
LABEL_93:
  if (*(unsigned __int8 *)(v118 + 280) == 255)
  {
LABEL_97:
    long long v125 = *(_OWORD *)(v119 + 256);
    *(_OWORD *)(v118 + 240) = *(_OWORD *)(v119 + 240);
    *(_OWORD *)(v118 + 256) = v125;
    *(_OWORD *)(v118 + 265) = *(_OWORD *)(v119 + 265);
    goto LABEL_98;
  }
  if (*(unsigned __int8 *)(v119 + 280) == 255 || a1 != a2)
  {
    sub_21F7B26E4(v118 + 240);
    goto LABEL_97;
  }
LABEL_98:
  *(unsigned char *)(v118 + 281) = *(unsigned char *)(v119 + 281);
  *(unsigned char *)(v118 + 282) = *(unsigned char *)(v119 + 282);
  return a1;
}

uint64_t getEnumTagSinglePayload for ChartScrollTargetBehaviorContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F9B8FE8);
}

uint64_t sub_21F9B8FE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_21FA250C0();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for ChartProxy();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for ChartScrollTargetBehaviorContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F9B90F4);
}

uint64_t sub_21F9B90F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_21FA250C0();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for ChartProxy();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t sub_21F9B91F8()
{
  uint64_t result = sub_21FA250C0();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ChartModel.Scenegraph();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t dispatch thunk of ChartScrollTargetBehavior.updateTarget(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

ValueMetadata *type metadata accessor for ValueAlignedLimitBehavior()
{
  return &type metadata for ValueAlignedLimitBehavior;
}

uint64_t sub_21F9B92E8()
{
  uint64_t result = type metadata accessor for MajorValueAlignmentStorage(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21F9B9374(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(type metadata accessor for MajorValueAlignmentStorage(0) - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = type metadata accessor for ValueAlignment(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v10 = sub_21FA23F20();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(v8 + 64));
      }
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

void *sub_21F9B9520(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for ValueAlignment(0);
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 2, v4))
  {
    uint64_t v6 = type metadata accessor for MajorValueAlignmentStorage(0);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_21FA23F20();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 2, v4);
  }
  return a1;
}

void *sub_21F9B9680(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for ValueAlignment(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 2, v4);
  int v8 = v6(a2, 2, v4);
  if (!v7)
  {
    if (!v8)
    {
      if (a1 == a2) {
        return a1;
      }
      sub_21F9B3DFC((uint64_t)a1, type metadata accessor for ValueAlignment);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v11 = sub_21FA23F20();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      size_t v10 = *(void *)(v5 + 64);
      goto LABEL_8;
    }
    sub_21F9B3DFC((uint64_t)a1, type metadata accessor for ValueAlignment);
LABEL_7:
    size_t v10 = *(void *)(*(void *)(type metadata accessor for MajorValueAlignmentStorage(0) - 8) + 64);
LABEL_8:
    memcpy(a1, a2, v10);
    return a1;
  }
  if (v8) {
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = sub_21FA23F20();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(v5 + 64));
  }
  (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 2, v4);
  return a1;
}

void *sub_21F9B98C0(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for ValueAlignment(0);
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 2, v4))
  {
    uint64_t v6 = type metadata accessor for MajorValueAlignmentStorage(0);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_21FA23F20();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 2, v4);
  }
  return a1;
}

void *sub_21F9B9A20(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for ValueAlignment(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 2, v4);
  int v8 = v6(a2, 2, v4);
  if (!v7)
  {
    if (!v8)
    {
      if (a1 == a2) {
        return a1;
      }
      sub_21F9B3DFC((uint64_t)a1, type metadata accessor for ValueAlignment);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v11 = sub_21FA23F20();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      size_t v10 = *(void *)(v5 + 64);
      goto LABEL_8;
    }
    sub_21F9B3DFC((uint64_t)a1, type metadata accessor for ValueAlignment);
LABEL_7:
    size_t v10 = *(void *)(*(void *)(type metadata accessor for MajorValueAlignmentStorage(0) - 8) + 64);
LABEL_8:
    memcpy(a1, a2, v10);
    return a1;
  }
  if (v8) {
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = sub_21FA23F20();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(v5 + 64));
  }
  (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 2, v4);
  return a1;
}

uint64_t sub_21F9B9C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F9B9C74);
}

uint64_t sub_21F9B9C74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MajorValueAlignmentStorage(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_21F9B9CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F9B9CF4);
}

uint64_t sub_21F9B9CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MajorValueAlignmentStorage(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t *initializeBufferWithCopyOfBuffer for ValueAlignedChartScrollTargetBehavior(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for ValueAlignment(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v8 = sub_21FA23F20();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = sub_21FA23F20();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
      swift_storeEnumTagMultiPayload();
      uint64_t v14 = *(void *)(v7 - 8);
    }
    else
    {
      uint64_t v14 = *(void *)(v7 - 8);
      memcpy(v11, v12, *(void *)(v14 + 64));
    }
    uint64_t v15 = a3[6];
    uint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = v14;
    uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    if (v19((char *)a2 + v15, 2, v7))
    {
      uint64_t v20 = type metadata accessor for MajorValueAlignmentStorage(0);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v21 = sub_21FA23F20();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v16, v17, v21);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v16, v17, *(void *)(v18 + 64));
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v16, 0, 2, v7);
    }
    uint64_t v22 = a3[7];
    uint64_t v23 = (char *)a1 + v22;
    uint64_t v24 = (char *)a2 + v22;
    if (v19((char *)a2 + v22, 2, v7))
    {
      uint64_t v25 = type metadata accessor for MajorValueAlignmentStorage(0);
      memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v26 = sub_21FA23F20();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v23, v24, v26);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v23, v24, *(void *)(v18 + 64));
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v23, 0, 2, v7);
    }
    *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  }
  return a1;
}

uint64_t destroy for ValueAlignedChartScrollTargetBehavior(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for ValueAlignment(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_21FA23F20();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  }
  uint64_t v6 = a1 + a2[5];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_21FA23F20();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  uint64_t v8 = a1 + a2[6];
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  if (!v9(v8, 2, v4) && swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_21FA23F20();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v8, v10);
  }
  uint64_t v11 = a1 + a2[7];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9)(v11, 2, v4);
  if (!result)
  {
    uint64_t result = swift_getEnumCaseMultiPayload();
    if (result == 1)
    {
      uint64_t v13 = sub_21FA23F20();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8);
      return v14(v11, v13);
    }
  }
  return result;
}

char *initializeWithCopy for ValueAlignedChartScrollTargetBehavior(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ValueAlignment(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_21FA23F20();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_21FA23F20();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    swift_storeEnumTagMultiPayload();
    uint64_t v12 = *(void *)(v6 - 8);
  }
  else
  {
    uint64_t v12 = *(void *)(v6 - 8);
    memcpy(v9, v10, *(void *)(v12 + 64));
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = v12;
  uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v17(&a2[v13], 2, v6))
  {
    uint64_t v18 = type metadata accessor for MajorValueAlignmentStorage(0);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v19 = sub_21FA23F20();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v14, v15, v19);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v14, v15, *(void *)(v16 + 64));
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v14, 0, 2, v6);
  }
  uint64_t v20 = a3[7];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  if (v17(&a2[v20], 2, v6))
  {
    uint64_t v23 = type metadata accessor for MajorValueAlignmentStorage(0);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v24 = sub_21FA23F20();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16))(v21, v22, v24);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v21, v22, *(void *)(v16 + 64));
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v21, 0, 2, v6);
  }
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

char *assignWithCopy for ValueAlignedChartScrollTargetBehavior(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_21F9B3DFC((uint64_t)a1, type metadata accessor for ValueAlignment);
    uint64_t v6 = type metadata accessor for ValueAlignment(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_21FA23F20();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    uint64_t v8 = a3[5];
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    sub_21F9B3DFC((uint64_t)&a1[v8], type metadata accessor for ValueAlignment);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = sub_21FA23F20();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for ValueAlignment(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 2, v15);
  int v19 = v17(v14, 2, v15);
  if (!v18)
  {
    if (!v19)
    {
      if (a1 == a2) {
        goto LABEL_21;
      }
      sub_21F9B3DFC((uint64_t)v13, type metadata accessor for ValueAlignment);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v22 = sub_21FA23F20();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v13, v14, v22);
        swift_storeEnumTagMultiPayload();
        goto LABEL_21;
      }
      size_t v21 = *(void *)(v16 + 64);
LABEL_15:
      memcpy(v13, v14, v21);
      goto LABEL_21;
    }
    sub_21F9B3DFC((uint64_t)v13, type metadata accessor for ValueAlignment);
LABEL_14:
    size_t v21 = *(void *)(*(void *)(type metadata accessor for MajorValueAlignmentStorage(0) - 8) + 64);
    goto LABEL_15;
  }
  if (v19) {
    goto LABEL_14;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = sub_21FA23F20();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v13, v14, v20);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v13, v14, *(void *)(v16 + 64));
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 2, v15);
LABEL_21:
  uint64_t v23 = a3[7];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  int v26 = v17(&a1[v23], 2, v15);
  int v27 = v17(v25, 2, v15);
  if (!v26)
  {
    if (!v27)
    {
      if (a1 == a2) {
        goto LABEL_34;
      }
      sub_21F9B3DFC((uint64_t)v24, type metadata accessor for ValueAlignment);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v30 = sub_21FA23F20();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16))(v24, v25, v30);
        swift_storeEnumTagMultiPayload();
        goto LABEL_34;
      }
      size_t v29 = *(void *)(v16 + 64);
      goto LABEL_28;
    }
    sub_21F9B3DFC((uint64_t)v24, type metadata accessor for ValueAlignment);
LABEL_27:
    size_t v29 = *(void *)(*(void *)(type metadata accessor for MajorValueAlignmentStorage(0) - 8) + 64);
LABEL_28:
    memcpy(v24, v25, v29);
    goto LABEL_34;
  }
  if (v27) {
    goto LABEL_27;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v28 = sub_21FA23F20();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16))(v24, v25, v28);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v24, v25, *(void *)(v16 + 64));
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v24, 0, 2, v15);
LABEL_34:
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

char *initializeWithTake for ValueAlignedChartScrollTargetBehavior(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ValueAlignment(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_21FA23F20();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_21FA23F20();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    swift_storeEnumTagMultiPayload();
    uint64_t v12 = *(void *)(v6 - 8);
  }
  else
  {
    uint64_t v12 = *(void *)(v6 - 8);
    memcpy(v9, v10, *(void *)(v12 + 64));
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = v12;
  uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v17(&a2[v13], 2, v6))
  {
    uint64_t v18 = type metadata accessor for MajorValueAlignmentStorage(0);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v19 = sub_21FA23F20();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v14, v15, v19);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v14, v15, *(void *)(v16 + 64));
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v14, 0, 2, v6);
  }
  uint64_t v20 = a3[7];
  size_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  if (v17(&a2[v20], 2, v6))
  {
    uint64_t v23 = type metadata accessor for MajorValueAlignmentStorage(0);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v24 = sub_21FA23F20();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v21, v22, v24);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v21, v22, *(void *)(v16 + 64));
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v21, 0, 2, v6);
  }
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

char *assignWithTake for ValueAlignedChartScrollTargetBehavior(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_21F9B3DFC((uint64_t)a1, type metadata accessor for ValueAlignment);
    uint64_t v6 = type metadata accessor for ValueAlignment(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_21FA23F20();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    uint64_t v8 = a3[5];
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    sub_21F9B3DFC((uint64_t)&a1[v8], type metadata accessor for ValueAlignment);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = sub_21FA23F20();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for ValueAlignment(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 2, v15);
  int v19 = v17(v14, 2, v15);
  if (!v18)
  {
    if (!v19)
    {
      if (a1 == a2) {
        goto LABEL_21;
      }
      sub_21F9B3DFC((uint64_t)v13, type metadata accessor for ValueAlignment);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v22 = sub_21FA23F20();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v13, v14, v22);
        swift_storeEnumTagMultiPayload();
        goto LABEL_21;
      }
      size_t v21 = *(void *)(v16 + 64);
LABEL_15:
      memcpy(v13, v14, v21);
      goto LABEL_21;
    }
    sub_21F9B3DFC((uint64_t)v13, type metadata accessor for ValueAlignment);
LABEL_14:
    size_t v21 = *(void *)(*(void *)(type metadata accessor for MajorValueAlignmentStorage(0) - 8) + 64);
    goto LABEL_15;
  }
  if (v19) {
    goto LABEL_14;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = sub_21FA23F20();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v13, v14, v20);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v13, v14, *(void *)(v16 + 64));
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 2, v15);
LABEL_21:
  uint64_t v23 = a3[7];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  int v26 = v17(&a1[v23], 2, v15);
  int v27 = v17(v25, 2, v15);
  if (!v26)
  {
    if (!v27)
    {
      if (a1 == a2) {
        goto LABEL_34;
      }
      sub_21F9B3DFC((uint64_t)v24, type metadata accessor for ValueAlignment);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v30 = sub_21FA23F20();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v24, v25, v30);
        swift_storeEnumTagMultiPayload();
        goto LABEL_34;
      }
      size_t v29 = *(void *)(v16 + 64);
      goto LABEL_28;
    }
    sub_21F9B3DFC((uint64_t)v24, type metadata accessor for ValueAlignment);
LABEL_27:
    size_t v29 = *(void *)(*(void *)(type metadata accessor for MajorValueAlignmentStorage(0) - 8) + 64);
LABEL_28:
    memcpy(v24, v25, v29);
    goto LABEL_34;
  }
  if (v27) {
    goto LABEL_27;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v28 = sub_21FA23F20();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v24, v25, v28);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v24, v25, *(void *)(v16 + 64));
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v24, 0, 2, v15);
LABEL_34:
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

uint64_t getEnumTagSinglePayload for ValueAlignedChartScrollTargetBehavior(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F9BB594);
}

uint64_t sub_21F9BB594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ValueAlignment(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v11 = type metadata accessor for MajorValueAlignmentStorage(0);
    uint64_t v12 = *(void *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) != a2)
    {
      unsigned int v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 32));
      if (v14 >= 3) {
        return v14 - 2;
      }
      else {
        return 0;
      }
    }
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 24);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }

  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ValueAlignedChartScrollTargetBehavior(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F9BB6B8);
}

uint64_t sub_21F9BB6B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for ValueAlignment(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for MajorValueAlignmentStorage(0);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(unsigned char *)(a1 + *(int *)(a4 + 32)) = a2 + 2;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 24);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t sub_21F9BB7C8()
{
  uint64_t result = type metadata accessor for ValueAlignment(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for MajorValueAlignmentStorage(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_21F9BB89C()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F9BB938(uint64_t a1)
{
  return sub_21F9BB960(a1, &qword_26AD44A18, &qword_26AD44A10);
}

uint64_t sub_21F9BB94C(uint64_t a1)
{
  return sub_21F9BB960(a1, &qword_26AD44A18, &qword_26AD44A10);
}

uint64_t sub_21F9BB960(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  return swift_getWitnessTable();
}

uint64_t sub_21F9BB9FC(uint64_t a1)
{
  return sub_21F9BB960(a1, &qword_267EEA138, &qword_267EEA140);
}

unsigned char *_s6Charts25ValueAlignedLimitBehaviorV4RoleOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x21F9BBADCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ValueAlignedLimitBehavior.Role()
{
  return &type metadata for ValueAlignedLimitBehavior.Role;
}

uint64_t *sub_21F9BBB14(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (uint64_t *)((char *)a1 + v7);
    uint64_t v9 = (uint64_t *)((char *)a2 + v7);
    sub_21F76CA40(&qword_267EEA148);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = sub_21FA24E90();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        uint64_t v12 = sub_21F76CA40(&qword_26AD4A318);
        memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
    }
    else
    {
      *uint64_t v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v14 = *(int *)(a3 + 28);
    uint64_t v15 = (uint64_t *)((char *)v4 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v17 = sub_21FA24E90();
      uint64_t v18 = *(void *)(v17 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        uint64_t v19 = sub_21F76CA40(&qword_26AD4A318);
        memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v18 + 16))(v15, v16, v17);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
    }
    else
    {
      *uint64_t v15 = *v16;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v4;
}

uint64_t sub_21F9BBE18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  sub_21F76CA40(&qword_267EEA148);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_21FA24E90();
    uint64_t v6 = *(void *)(v5 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v7 = a1 + *(int *)(a2 + 28);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_21FA24E90();
    uint64_t v11 = *(void *)(v8 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v7, 1, v8);
    if (!result)
    {
      uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
      return v10(v7, v8);
    }
  }
  else
  {
    return swift_release();
  }
  return result;
}

_WORD *sub_21F9BC00C(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  sub_21F76CA40(&qword_267EEA148);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = sub_21FA24E90();
    uint64_t v10 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    {
      uint64_t v11 = sub_21F76CA40(&qword_26AD4A318);
      memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  else
  {
    *uint64_t v7 = *v8;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = sub_21FA24E90();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = sub_21F76CA40(&qword_26AD4A318);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  else
  {
    *uint64_t v13 = *v14;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

unsigned char *sub_21F9BC2C0(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = &a1[v6];
    uint64_t v8 = &a2[v6];
    sub_21F76CA84((uint64_t)&a1[v6], &qword_267EEA148);
    sub_21F76CA40(&qword_267EEA148);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = sub_21FA24E90();
      uint64_t v10 = *(void *)(v9 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        uint64_t v11 = sub_21F76CA40(&qword_26AD4A318);
        memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
    }
    else
    {
      *uint64_t v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v12 = *(int *)(a3 + 28);
    uint64_t v13 = &a1[v12];
    uint64_t v14 = &a2[v12];
    sub_21F76CA84((uint64_t)&a1[v12], &qword_267EEA148);
    sub_21F76CA40(&qword_267EEA148);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = sub_21FA24E90();
      uint64_t v16 = *(void *)(v15 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
      {
        uint64_t v17 = sub_21F76CA40(&qword_26AD4A318);
        memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v13, v14, v15);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      }
    }
    else
    {
      *uint64_t v13 = *v14;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_WORD *sub_21F9BC5B4(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_21F76CA40(&qword_267EEA148);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_21FA24E90();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
    {
      uint64_t v12 = sub_21F76CA40(&qword_26AD4A318);
      memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v7, v8, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = sub_21FA24E90();
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = sub_21F76CA40(&qword_26AD4A318);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v14, v15, *(void *)(*(void *)(v9 - 8) + 64));
  }
  return a1;
}

_WORD *sub_21F9BC87C(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    sub_21F76CA84((uint64_t)a1 + v6, &qword_267EEA148);
    uint64_t v9 = sub_21F76CA40(&qword_267EEA148);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = sub_21FA24E90();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
      {
        uint64_t v12 = sub_21F76CA40(&qword_26AD4A318);
        memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v7, v8, v10);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
    }
    uint64_t v13 = *(int *)(a3 + 28);
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    sub_21F76CA84((uint64_t)a1 + v13, &qword_267EEA148);
    uint64_t v16 = sub_21F76CA40(&qword_267EEA148);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v17 = sub_21FA24E90();
      uint64_t v18 = *(void *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v15, 1, v17))
      {
        uint64_t v19 = sub_21F76CA40(&qword_26AD4A318);
        memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v14, v15, v17);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v14, 0, 1, v17);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_21F9BCB78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F9BCB8C);
}

uint64_t sub_21F9BCB8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 252)
  {
    if (*(unsigned __int8 *)(a1 + 1) <= 3u) {
      int v4 = 3;
    }
    else {
      int v4 = *(unsigned __int8 *)(a1 + 1);
    }
    unsigned int v5 = v4 - 3;
    if (*(unsigned __int8 *)(a1 + 1) >= 3u) {
      return v5;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v9 = sub_21F76CA40(&qword_267EEA150);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 24);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_21F9BCC44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F9BCC58);
}

uint64_t sub_21F9BCC58(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 252)
  {
    *(unsigned char *)(result + 1) = a2 + 3;
  }
  else
  {
    uint64_t v7 = sub_21F76CA40(&qword_267EEA150);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t *sub_21F9BCD00(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_21FA23F20();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
  }
  return a1;
}

uint64_t sub_21F9BCDFC(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t v3 = sub_21FA23F20();
    int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *sub_21F9BCE78(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_21FA23F20();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_21F9BCF30(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_21F9B3DFC((uint64_t)a1, type metadata accessor for ValueAlignment);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_21FA23F20();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void *sub_21F9BD00C(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_21FA23F20();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_21F9BD0C4(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_21F9B3DFC((uint64_t)a1, type metadata accessor for ValueAlignment);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_21FA23F20();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_21F9BD1A0()
{
  uint64_t result = sub_21FA23F20();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *sub_21F9BD238(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = type metadata accessor for ValueAlignment(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v10 = sub_21FA23F20();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(v8 + 64));
      }
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t sub_21F9BD3D8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ValueAlignment(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 2, v2);
  if (!result)
  {
    uint64_t result = swift_getEnumCaseMultiPayload();
    if (result == 1)
    {
      uint64_t v4 = sub_21FA23F20();
      int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
      return v5(a1, v4);
    }
  }
  return result;
}

void *sub_21F9BD4A0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ValueAlignment(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v8 = sub_21FA23F20();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v7 + 64));
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *sub_21F9BD604(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ValueAlignment(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 2, v6);
  int v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      if (a1 == a2) {
        return a1;
      }
      sub_21F9B3DFC((uint64_t)a1, type metadata accessor for ValueAlignment);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v13 = sub_21FA23F20();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      size_t v12 = *(void *)(v7 + 64);
      goto LABEL_8;
    }
    sub_21F9B3DFC((uint64_t)a1, type metadata accessor for ValueAlignment);
LABEL_7:
    size_t v12 = *(void *)(*(void *)(a3 - 8) + 64);
LABEL_8:
    memcpy(a1, a2, v12);
    return a1;
  }
  if (v10) {
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_21FA23F20();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(v7 + 64));
  }
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

void *sub_21F9BD840(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ValueAlignment(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v8 = sub_21FA23F20();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v7 + 64));
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *sub_21F9BD9A4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ValueAlignment(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 2, v6);
  int v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      if (a1 == a2) {
        return a1;
      }
      sub_21F9B3DFC((uint64_t)a1, type metadata accessor for ValueAlignment);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v13 = sub_21FA23F20();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      size_t v12 = *(void *)(v7 + 64);
      goto LABEL_8;
    }
    sub_21F9B3DFC((uint64_t)a1, type metadata accessor for ValueAlignment);
LABEL_7:
    size_t v12 = *(void *)(*(void *)(a3 - 8) + 64);
LABEL_8:
    memcpy(a1, a2, v12);
    return a1;
  }
  if (v10) {
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_21FA23F20();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(v7 + 64));
  }
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

uint64_t sub_21F9BDBE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F9BDBF4);
}

uint64_t sub_21F9BDBF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ValueAlignment(0);
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3) {
    return v5 - 2;
  }
  else {
    return 0;
  }
}

uint64_t sub_21F9BDC60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F9BDC74);
}

uint64_t sub_21F9BDC74(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 2);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for ValueAlignment(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t sub_21F9BDCF8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ValueAlignment(0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 2, v2);
}

uint64_t sub_21F9BDD60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ValueAlignment(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 2, v4);
}

uint64_t sub_21F9BDDD0()
{
  uint64_t result = type metadata accessor for ValueAlignment(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t destroy for ChartScrollPositionConfiguration(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(unsigned __int16 *)(result + 40);
  if (v2 >> 8 <= 0xFE)
  {
    if ((v2 & 0x100) != 0) {
      uint64_t result = _s6Charts15AnyChartContentVwxx_0(result);
    }
    else {
      uint64_t result = sub_21F7654F0(*(void *)result, *(void *)(result + 8), *(unsigned char *)(result + 16));
    }
  }
  unsigned int v3 = *(unsigned __int16 *)(v1 + 88);
  if (v3 >> 8 <= 0xFE)
  {
    if ((v3 & 0x100) != 0)
    {
      return _s6Charts15AnyChartContentVwxx_0(v1 + 48);
    }
    else
    {
      uint64_t v4 = *(void *)(v1 + 48);
      uint64_t v5 = *(void *)(v1 + 56);
      char v6 = *(unsigned char *)(v1 + 64);
      return sub_21F7654F0(v4, v5, v6);
    }
  }
  return result;
}

uint64_t initializeWithCopy for ChartScrollPositionConfiguration(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int16 *)(a2 + 40);
  if (v4 >> 8 <= 0xFE)
  {
    if ((v4 & 0x100) != 0)
    {
      long long v9 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v9;
      (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = v4 & 1;
      *(unsigned char *)(a1 + 41) = 1;
    }
    else
    {
      uint64_t v6 = *(void *)a2;
      uint64_t v7 = *(void *)(a2 + 8);
      char v8 = *(unsigned char *)(a2 + 16);
      sub_21F7607AC(*(void *)a2, v7, v8);
      *(void *)a1 = v6;
      *(void *)(a1 + 8) = v7;
      *(unsigned char *)(a1 + 16) = v8;
      *(unsigned char *)(a1 + 41) = 0;
    }
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  }
  int v10 = (_OWORD *)(a1 + 48);
  uint64_t v11 = (_OWORD *)(a2 + 48);
  unsigned int v12 = *(unsigned __int16 *)(a2 + 88);
  if (v12 >> 8 <= 0xFE)
  {
    if ((v12 & 0x100) != 0)
    {
      long long v17 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 72) = v17;
      (**(void (***)(_OWORD *, _OWORD *))(v17 - 8))(v10, v11);
      *(unsigned char *)(a1 + 88) = v12 & 1;
      *(unsigned char *)(a1 + 89) = 1;
    }
    else
    {
      uint64_t v14 = *(void *)(a2 + 48);
      uint64_t v15 = *(void *)(a2 + 56);
      char v16 = *(unsigned char *)(a2 + 64);
      sub_21F7607AC(v14, v15, v16);
      *(void *)(a1 + 48) = v14;
      *(void *)(a1 + 56) = v15;
      *(unsigned char *)(a1 + 64) = v16;
      *(unsigned char *)(a1 + 89) = 0;
    }
  }
  else
  {
    long long v13 = *(_OWORD *)(a2 + 64);
    _OWORD *v10 = *v11;
    *(_OWORD *)(a1 + 64) = v13;
    *(_OWORD *)(a1 + 74) = *(_OWORD *)(a2 + 74);
  }
  return a1;
}

uint64_t assignWithCopy for ChartScrollPositionConfiguration(uint64_t a1, long long *a2)
{
  unsigned int v4 = *((unsigned __int16 *)a2 + 20);
  if (*(unsigned __int8 *)(a1 + 41) == 255)
  {
    if (v4 >> 8 > 0xFE)
    {
      long long v5 = *a2;
      long long v6 = a2[1];
      *(_OWORD *)(a1 + 26) = *(long long *)((char *)a2 + 26);
      *(_OWORD *)a1 = v5;
      *(_OWORD *)(a1 + 16) = v6;
      goto LABEL_13;
    }
    if ((v4 & 0x100) != 0)
    {
      uint64_t v9 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v9;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v9 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = v4 & 1;
LABEL_11:
      *(unsigned char *)(a1 + 41) = 1;
      goto LABEL_13;
    }
LABEL_12:
    uint64_t v12 = *(void *)a2;
    uint64_t v13 = *((void *)a2 + 1);
    char v14 = *((unsigned char *)a2 + 16);
    sub_21F7607AC(*(void *)a2, v13, v14);
    *(void *)a1 = v12;
    *(void *)(a1 + 8) = v13;
    *(unsigned char *)(a1 + 16) = v14;
    *(unsigned char *)(a1 + 41) = 0;
    goto LABEL_13;
  }
  if (v4 >> 8 > 0xFE)
  {
    sub_21F9BE30C(a1);
    long long v7 = *(long long *)((char *)a2 + 26);
    long long v8 = a2[1];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v8;
    *(_OWORD *)(a1 + 26) = v7;
    goto LABEL_13;
  }
  if ((long long *)a1 != a2)
  {
    sub_21F9BE30C(a1);
    if (*((unsigned char *)a2 + 41))
    {
      char v10 = *((unsigned char *)a2 + 40);
      uint64_t v11 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v11;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v11 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = v10;
      goto LABEL_11;
    }
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v15 = (_OWORD *)(a1 + 48);
  char v16 = a2 + 3;
  unsigned int v17 = *((unsigned __int16 *)a2 + 44);
  if (*(unsigned __int8 *)(a1 + 89) != 255)
  {
    if (v17 >> 8 > 0xFE)
    {
      sub_21F9BE30C(a1 + 48);
      long long v20 = *(long long *)((char *)a2 + 74);
      long long v21 = a2[4];
      *uint64_t v15 = *v16;
      *(_OWORD *)(a1 + 64) = v21;
      *(_OWORD *)(a1 + 74) = v20;
      return a1;
    }
    if ((long long *)a1 == a2) {
      return a1;
    }
    sub_21F9BE30C(a1 + 48);
    if (*((unsigned char *)a2 + 89))
    {
      char v23 = *((unsigned char *)a2 + 88);
      uint64_t v24 = *((void *)a2 + 9);
      *(void *)(a1 + 72) = v24;
      *(void *)(a1 + 80) = *((void *)a2 + 10);
      (**(void (***)(uint64_t, uint64_t))(v24 - 8))(a1 + 48, (uint64_t)(a2 + 3));
      *(unsigned char *)(a1 + 88) = v23;
      goto LABEL_23;
    }
LABEL_24:
    uint64_t v25 = *((void *)a2 + 6);
    uint64_t v26 = *((void *)a2 + 7);
    char v27 = *((unsigned char *)a2 + 64);
    sub_21F7607AC(v25, v26, v27);
    *(void *)(a1 + 48) = v25;
    *(void *)(a1 + 56) = v26;
    *(unsigned char *)(a1 + 64) = v27;
    *(unsigned char *)(a1 + 89) = 0;
    return a1;
  }
  if (v17 >> 8 <= 0xFE)
  {
    if ((v17 & 0x100) != 0)
    {
      uint64_t v22 = *((void *)a2 + 9);
      *(void *)(a1 + 72) = v22;
      *(void *)(a1 + 80) = *((void *)a2 + 10);
      (**(void (***)(uint64_t, uint64_t))(v22 - 8))(a1 + 48, (uint64_t)(a2 + 3));
      *(unsigned char *)(a1 + 88) = v17 & 1;
LABEL_23:
      *(unsigned char *)(a1 + 89) = 1;
      return a1;
    }
    goto LABEL_24;
  }
  long long v18 = *v16;
  long long v19 = a2[4];
  *(_OWORD *)(a1 + 74) = *(long long *)((char *)a2 + 74);
  *uint64_t v15 = v18;
  *(_OWORD *)(a1 + 64) = v19;
  return a1;
}

uint64_t sub_21F9BE30C(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for ChartScrollPositionConfiguration(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 74) = *(_OWORD *)(a2 + 74);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for ChartScrollPositionConfiguration(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 41) == 255) {
    goto LABEL_7;
  }
  if (*(unsigned __int8 *)(a2 + 41) == 255 || a1 != a2)
  {
    sub_21F9BE30C(a1);
LABEL_7:
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  }
  if (*(unsigned __int8 *)(a1 + 89) == 255)
  {
LABEL_14:
    long long v7 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v7;
    *(_OWORD *)(a1 + 74) = *(_OWORD *)(a2 + 74);
    return a1;
  }
  if (*(unsigned __int8 *)(a2 + 89) == 255 || a1 != a2)
  {
    sub_21F9BE30C(a1 + 48);
    goto LABEL_14;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ChartScrollPositionConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 90)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 41);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = (v3 ^ 0xFF) - 1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ChartScrollPositionConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 88) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 90) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 90) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 41) = ~(_BYTE)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartScrollPositionConfiguration()
{
  return &type metadata for ChartScrollPositionConfiguration;
}

uint64_t destroy for ChartScrollPosition(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 41);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)a1 + 2;
  }
  if (v1 == 1) {
    return _s6Charts15AnyChartContentVwxx_0(a1);
  }
  else {
    return sub_21F7654F0(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  }
}

uint64_t initializeWithCopy for ChartScrollPosition(uint64_t a1, uint64_t *a2)
{
  unsigned int v3 = *((unsigned __int8 *)a2 + 41);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    unsigned int v4 = *((unsigned __int8 *)a2 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a2 + 2;
    }
    if (v4 == 1)
    {
      long long v5 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v5;
      char v6 = 1;
    }
    else
    {
      char v6 = 0;
      long long v5 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v5;
    }
    (**(void (***)(uint64_t))(v5 - 8))(a1);
    *(unsigned char *)(a1 + 40) = v6;
    char v10 = 1;
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    char v9 = *((unsigned char *)a2 + 16);
    sub_21F7607AC(*a2, v8, v9);
    char v10 = 0;
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
  }
  *(unsigned char *)(a1 + 41) = v10;
  return a1;
}

uint64_t assignWithCopy for ChartScrollPosition(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 41);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      _s6Charts15AnyChartContentVwxx_0(a1);
    }
    else {
      sub_21F7654F0(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 41);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      unsigned int v6 = *(unsigned __int8 *)(a2 + 40);
      if (v6 >= 2) {
        unsigned int v6 = *(_DWORD *)a2 + 2;
      }
      if (v6 == 1)
      {
        uint64_t v7 = *(void *)(a2 + 24);
        *(void *)(a1 + 24) = v7;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        char v8 = 1;
      }
      else
      {
        char v8 = 0;
        uint64_t v7 = *(void *)(a2 + 24);
        *(void *)(a1 + 24) = v7;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
      }
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = v8;
      char v12 = 1;
    }
    else
    {
      uint64_t v9 = *(void *)a2;
      uint64_t v10 = *(void *)(a2 + 8);
      char v11 = *(unsigned char *)(a2 + 16);
      sub_21F7607AC(v9, v10, v11);
      char v12 = 0;
      *(void *)a1 = v9;
      *(void *)(a1 + 8) = v10;
      *(unsigned char *)(a1 + 16) = v11;
    }
    *(unsigned char *)(a1 + 41) = v12;
  }
  return a1;
}

__n128 initializeWithTake for ChartScrollPosition(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ChartScrollPosition(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 41);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      _s6Charts15AnyChartContentVwxx_0(a1);
    }
    else {
      sub_21F7654F0(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 41);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      unsigned int v6 = *(unsigned __int8 *)(a2 + 40);
      if (v6 >= 2) {
        unsigned int v6 = *(_DWORD *)a2 + 2;
      }
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 40) = v6 == 1;
      char v8 = 1;
    }
    else
    {
      char v8 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    }
    *(unsigned char *)(a1 + 41) = v8;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ChartScrollPosition(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 42)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 41);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ChartScrollPosition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 26) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 42) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 42) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 41) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_21F9BE86C(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 41);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t sub_21F9BE888(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 41) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ChartScrollPosition()
{
  return &type metadata for ChartScrollPosition;
}

uint64_t assignWithCopy for ChartScrollZoomConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = a1 + 40;
  unsigned int v6 = (long long *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64))
  {
    if (v7)
    {
      sub_21F7ABEA8((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
    }
    else
    {
      sub_21F7AC0D8(a1 + 40);
      uint64_t v8 = *((void *)v6 + 4);
      long long v9 = v6[1];
      *(_OWORD *)uint64_t v5 = *v6;
      *(_OWORD *)(v5 + 16) = v9;
      *(void *)(v5 + 32) = v8;
    }
  }
  else if (v7)
  {
    *(void *)(a1 + 64) = v7;
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 40, a2 + 40);
  }
  else
  {
    long long v10 = *v6;
    long long v11 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)uint64_t v5 = v10;
    *(_OWORD *)(a1 + 56) = v11;
  }
  return a1;
}

uint64_t assignWithTake for ChartScrollZoomConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = a1 + 40;
  if (*(void *)(a1 + 64))
  {
    if (*(void *)(a2 + 64)) {
      _s6Charts15AnyChartContentVwxx_0(a1 + 40);
    }
    else {
      sub_21F7AC0D8(a1 + 40);
    }
  }
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 16) = v5;
  *(void *)(v4 + 32) = *(void *)(a2 + 72);
  return a1;
}

unint64_t sub_21F9BEA40(uint64_t a1)
{
  unint64_t result = sub_21F9BEA68();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_21F9BEA68()
{
  unint64_t result = qword_26AD448F0;
  if (!qword_26AD448F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD448F0);
  }
  return result;
}

uint64_t sub_21F9BEABC()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_21F9BEADC()
{
  unint64_t result = qword_267EEA178;
  if (!qword_267EEA178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EEA178);
  }
  return result;
}

uint64_t sub_21F9BEB30(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

_OWORD *sub_21F9BEB78(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(_OWORD *)((char *)a2 + 26) = *(long long *)((char *)a1 + 26);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

uint64_t sub_21F9BEB90(uint64_t *a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_21F9BEBC8(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F9BEC1C(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_21F9BEC78()
{
  unint64_t result = qword_26AD448D8;
  if (!qword_26AD448D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD448D8);
  }
  return result;
}

uint64_t sub_21F9BECCC(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_21F9BED04()
{
  unint64_t result = qword_26AD44918;
  if (!qword_26AD44918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD44918);
  }
  return result;
}

uint64_t sub_21F9BED58(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F9BED88()
{
  return sub_21FA24AF0();
}

uint64_t sub_21F9BEDAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21F9ACC48(a1, a2, a3, a4, MEMORY[0x263F19448]);
}

uint64_t sub_21F9BEDD8()
{
  return sub_21FA24AE0();
}

uint64_t sub_21F9BEDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21F9ACC48(a1, a2, a3, a4, MEMORY[0x263F193D0]);
}

ValueMetadata *type metadata accessor for ChartScrollZoomConfigurationKey()
{
  return &type metadata for ChartScrollZoomConfigurationKey;
}

ValueMetadata *type metadata accessor for ChartScrollPositionConfigurationKey()
{
  return &type metadata for ChartScrollPositionConfigurationKey;
}

uint64_t destroy for ScrollViewMapping(uint64_t a1)
{
  return sub_21F76D570(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(_OWORD *)(a1 + 64));
}

uint64_t initializeWithCopy for ScrollViewMapping(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 64);
  uint64_t v14 = *(void *)(a2 + 72);
  uint64_t v15 = *(void *)(a2 + 80);
  uint64_t v16 = *(void *)(a2 + 88);
  uint64_t v17 = *(void *)(a2 + 96);
  char v18 = *(unsigned char *)(a2 + 104);
  sub_21F764268(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v13);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v13;
  *(void *)(a1 + 72) = v14;
  *(void *)(a1 + 80) = v15;
  *(void *)(a1 + 88) = v16;
  *(void *)(a1 + 96) = v17;
  *(unsigned char *)(a1 + 104) = v18;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  return a1;
}

uint64_t assignWithCopy for ScrollViewMapping(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v22 = *(void *)(a2 + 64);
  uint64_t v23 = *(void *)(a2 + 72);
  uint64_t v24 = *(void *)(a2 + 80);
  uint64_t v25 = *(void *)(a2 + 88);
  uint64_t v26 = *(void *)(a2 + 96);
  char v27 = *(unsigned char *)(a2 + 104);
  sub_21F764268(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v22);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v22;
  *(void *)(a1 + 72) = v23;
  *(void *)(a1 + 80) = v24;
  *(void *)(a1 + 88) = v25;
  *(void *)(a1 + 96) = v26;
  *(unsigned char *)(a1 + 104) = v27;
  sub_21F76D570(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  return a1;
}

uint64_t assignWithTake for ScrollViewMapping(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 96);
  char v5 = *(unsigned char *)(a2 + 104);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
  long long v14 = *(_OWORD *)(a1 + 64);
  long long v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  long long v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  long long v17 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v17;
  *(void *)(a1 + 96) = v4;
  *(unsigned char *)(a1 + 104) = v5;
  sub_21F76D570(v6, v7, v8, v9, v10, v11, v12, v13, v14);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollViewMapping(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 136)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 104);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollViewMapping(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 136) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 104) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollViewMapping()
{
  return &type metadata for ScrollViewMapping;
}

unint64_t sub_21F9BF228()
{
  unint64_t result = qword_267EEA1E0;
  if (!qword_267EEA1E0)
  {
    sub_21F779EA4(qword_267EEA1E8);
    sub_21F779EA4(&qword_267EEA180);
    sub_21F779E60(&qword_267EEA1A0, &qword_267EEA180);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EEA1E0);
  }
  return result;
}

unint64_t sub_21F9BF300()
{
  unint64_t result = qword_26AD44908;
  if (!qword_26AD44908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD44908);
  }
  return result;
}

unint64_t sub_21F9BF354()
{
  unint64_t result = qword_26AD44900;
  if (!qword_26AD44900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD44900);
  }
  return result;
}

uint64_t sub_21F9BF3A8()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_21F9BF44C()
{
  swift_arrayDestroy();

  JUMPOUT(0x223C56A80);
}

void sub_21F9BF49C()
{
}

uint64_t sub_21F9BF4C0()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ThreadSpecific()
{
  return sub_21F764F08();
}

void sub_21F9BF51C()
{
}

void static BuilderPair<>._layoutAxisMark(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for BuilderPair();
  uint64_t v13 = *(void *)(v12 + 8);
  sub_21F7F7204();
  if (v14)
  {
    uint64_t v15 = *a2;
    long long v16 = sub_21F952A84(v12, v13, (char *)(v12 + 8 * *(unsigned int *)(v14 + 24)), (char *)(v12 + 16));
    MEMORY[0x270FA5388](v16);
    v19[2] = a3;
    v19[3] = a4;
    v19[4] = a5;
    v19[5] = a6;
    v19[6] = v15;
    v19[7] = v17;
    sub_21F74C95C(a1, (uint64_t)sub_21F9BF978, (uint64_t)v19, v12, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_21F9BF868(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (v3)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(a2 + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v7 = 0;
    uint64_t v8 = (void *)(a3 + 48);
    do
    {
      uint64_t v15 = *(v8 - 2);
      uint64_t v14 = *(void *)(v5 + *v8);
      uint64_t v9 = *(void *)(v6 + 16);
      uint64_t v10 = *(void *)(v9 + 32);
      swift_retain();
      uint64_t v11 = sub_21F76633C(v7, v10);
      uint64_t v12 = *(void *)(v9 + 32);
      *(void *)(v9 + 32) = v11;
      uint64_t v13 = *(void *)(v6 + 24);
      *(void *)(v6 + 24) = v11;
      sub_21F9BFD2C(v11, v15, v14);
      *(void *)(v6 + 24) = v13;
      *(void *)(v9 + 32) = v12;
      swift_release();
      v8 += 3;
      ++v7;
    }
    while (v3 != v7);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_21F9BF978(uint64_t a1)
{
  return sub_21F9BF868(a1, *(void *)(v1 + 48), *(void *)(v1 + 56));
}

void static BuilderPair<>._renderAxisMark(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for BuilderPair();
  uint64_t v13 = *(void *)(v12 + 8);
  sub_21F7F7204();
  if (v14)
  {
    uint64_t v15 = *a2;
    long long v16 = sub_21F952A84(v12, v13, (char *)(v12 + 8 * *(unsigned int *)(v14 + 24)), (char *)(v12 + 16));
    MEMORY[0x270FA5388](v16);
    v19[2] = a3;
    v19[3] = a4;
    v19[4] = a5;
    v19[5] = a6;
    v19[6] = v15;
    v19[7] = v17;
    sub_21F74C95C(a1, (uint64_t)sub_21F9BFCD0, (uint64_t)v19, v12, MEMORY[0x263F8E628], (uint64_t)&type metadata for _AxisMarkRenderOutputs, MEMORY[0x263F8E658], v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_21F9BFABC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4 = a2;
  uint64_t v5 = a4;
  uint64_t v6 = MEMORY[0x263F8EE78];
  uint64_t v7 = *(void *)(a3 + 16);
  if (v7)
  {
    uint64_t v10 = *(void *)(a2 + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v11 = 0;
    uint64_t v12 = (void *)(a3 + 48);
    do
    {
      uint64_t v30 = *(void *)(a1 + *v12);
      uint64_t v31 = *(v12 - 2);
      uint64_t v13 = *(void *)(v10 + 16);
      uint64_t v14 = *(void *)(v13 + 32);
      swift_retain();
      uint64_t v15 = sub_21F76633C(v11, v14);
      uint64_t v16 = *(void *)(v13 + 32);
      *(void *)(v13 + 32) = v15;
      uint64_t v17 = *(void *)(v10 + 24);
      *(void *)(v10 + 24) = v15;
      sub_21F9BFE44(v15, v31, v30);
      *(void *)(v10 + 24) = v17;
      *(void *)(v13 + 32) = v16;
      swift_release();
      v12 += 3;
      ++v11;
    }
    while (v7 != v11);
    swift_bridgeObjectRelease();
    uint64_t v5 = a4;
    uint64_t v6 = MEMORY[0x263F8EE78];
    uint64_t v4 = a2;
  }
  else
  {
    swift_retain();
  }
  uint64_t v18 = (int *)type metadata accessor for SgGroup(0);
  uint64_t v19 = swift_allocBox();
  long long v21 = v20;
  uint64_t v22 = *(void *)(*(void *)(v4 + 16) + 24);
  uint64_t v23 = swift_bridgeObjectRetain();
  uint64_t v24 = sub_21F7812C4(v23);
  swift_bridgeObjectRelease();
  uint64_t v25 = (char *)v21 + v18[6];
  uint64_t v26 = type metadata accessor for SgClipRect(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
  *long long v21 = v22;
  v21[1] = v24;
  *(void *)((char *)v21 + v18[7]) = 0x3FF0000000000000;
  *(void *)((char *)v21 + v18[8]) = 0;
  *(void *)((char *)v21 + v18[9]) = v6;
  *((unsigned char *)v21 + v18[10]) = 0;
  *uint64_t v5 = v19;
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_21F9BFCD0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_21F9BFABC(a1, *(void *)(v2 + 48), *(void *)(v2 + 56), a2);
}

void sub_21F9BFCF8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

void sub_21F9BFD08(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

void sub_21F9BFD18()
{
  qword_26AD52200 = MEMORY[0x263F8EE80];
}

uint64_t sub_21F9BFD2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v6 + 16))(v8, *v3 + v3[2], a2);
  uint64_t v11 = v3[1];
  (*(void (**)(char *, uint64_t *, uint64_t, uint64_t))(a3 + 8))(v8, &v11, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a2);
}

uint64_t sub_21F9BFE44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a2 - 8);
  __n128 v8 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t, __n128))(v7 + 16))(v10, *v4 + v4[2], a2, v8);
  uint64_t v16 = v4[1];
  (*(void (**)(uint64_t *__return_ptr, char *, uint64_t *, uint64_t, uint64_t))(a3 + 16))(&v17, v10, &v16, a2, a3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, a2);
  uint64_t v11 = v17;
  uint64_t v12 = v4[3];
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_21F7EB0E8(0, *(void *)(v12 + 16) + 1, 1, (char *)v12);
    uint64_t v12 = result;
  }
  unint64_t v15 = *(void *)(v12 + 16);
  unint64_t v14 = *(void *)(v12 + 24);
  if (v15 >= v14 >> 1)
  {
    uint64_t result = (uint64_t)sub_21F7EB0E8((char *)(v14 > 1), v15 + 1, 1, (char *)v12);
    uint64_t v12 = result;
  }
  *(void *)(v12 + 16) = v15 + 1;
  *(void *)(v12 + 8 * v15 + 32) = v11;
  v4[3] = v12;
  return result;
}

uint64_t SectorPlot<A>.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F8B0FF0(v2, v4, a2);
  sub_21F8B0FF0(v7, v4, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_21F9C00BC(uint64_t a1, uint64_t a2)
{
  return SectorPlot<A>.body.getter(a1, *(void *)(a2 - 8));
}

uint64_t SectorPlot.init<A, B>(_:angle:innerRadius:outerRadius:angularInset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, long long *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v62 = a8;
  int v67 = a6;
  uint64_t v66 = a5;
  uint64_t v68 = a9;
  uint64_t v69 = a2;
  uint64_t v59 = a1;
  uint64_t v63 = a11;
  uint64_t v56 = a10;
  swift_getAssociatedTypeWitness();
  uint64_t v58 = type metadata accessor for PlottableProjection();
  uint64_t v15 = *(void *)(v58 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  MEMORY[0x270FA5388](v58);
  long long v55 = (char *)&v54 - v17;
  uint64_t v60 = *(void *)(a7 - 8);
  uint64_t v18 = v60;
  MEMORY[0x270FA5388](v19);
  long long v21 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v57 = v21;
  uint64_t v22 = type metadata accessor for VectorizedSectorPlotContent();
  uint64_t v64 = *(void *)(v22 - 8);
  uint64_t v65 = v22;
  MEMORY[0x270FA5388](v22);
  uint64_t v61 = (uint64_t)&v54 - v23;
  long long v24 = a3[5];
  long long v74 = a3[4];
  long long v75 = v24;
  long long v76 = a3[6];
  char v77 = *((unsigned char *)a3 + 112);
  long long v25 = a3[1];
  long long v70 = *a3;
  long long v71 = v25;
  long long v26 = a3[3];
  long long v72 = a3[2];
  long long v73 = v26;
  long long v27 = *a4;
  long long v28 = a4[1];
  long long v29 = a4[3];
  long long v80 = a4[2];
  long long v81 = v29;
  long long v78 = v27;
  long long v79 = v28;
  long long v30 = a4[4];
  long long v31 = a4[5];
  long long v32 = a4[6];
  char v85 = *((unsigned char *)a4 + 112);
  long long v83 = v31;
  long long v84 = v32;
  long long v82 = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, a1, a7);
  uint64_t v33 = v55;
  uint64_t v34 = v58;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v55, v69, v58);
  unint64_t v35 = (*(unsigned __int8 *)(v15 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v36 = (v35 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v54 = (v35 + v16 + 127) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v37 = (v35 + v16 + 247) & 0xFFFFFFFFFFFFFFF8;
  long long v38 = (char *)swift_allocObject();
  uint64_t v39 = v62;
  *((void *)v38 + 2) = a7;
  *((void *)v38 + 3) = v39;
  uint64_t v40 = v56;
  uint64_t v41 = v63;
  *((void *)v38 + 4) = v56;
  *((void *)v38 + 5) = v41;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v38[v35], v33, v34);
  int v42 = &v38[v36];
  long long v43 = v73;
  *((_OWORD *)v42 + 2) = v72;
  *((_OWORD *)v42 + 3) = v43;
  long long v44 = v71;
  *(_OWORD *)int v42 = v70;
  *((_OWORD *)v42 + 1) = v44;
  v42[112] = v77;
  long long v45 = v76;
  long long v46 = v74;
  *((_OWORD *)v42 + 5) = v75;
  *((_OWORD *)v42 + 6) = v45;
  *((_OWORD *)v42 + 4) = v46;
  uint64_t v47 = &v38[v54];
  long long v48 = v83;
  *((_OWORD *)v47 + 4) = v82;
  *((_OWORD *)v47 + 5) = v48;
  *((_OWORD *)v47 + 6) = v84;
  v47[112] = v85;
  long long v49 = v79;
  *(_OWORD *)uint64_t v47 = v78;
  *((_OWORD *)v47 + 1) = v49;
  long long v50 = v81;
  *((_OWORD *)v47 + 2) = v80;
  *((_OWORD *)v47 + 3) = v50;
  uint64_t v51 = &v38[v37];
  *(void *)uint64_t v51 = v66;
  v51[8] = v67 & 1;
  uint64_t v52 = v61;
  sub_21F9C0C94((uint64_t)v57, (uint64_t)sub_21F9C0B74, (uint64_t)v38, a7, (uint64_t)&type metadata for SectorMark, v40, (uint64_t)&protocol witness table for SectorMark, v61);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v69, v34);
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, a7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v64 + 32))(v68, v52, v65);
}

uint64_t type metadata accessor for VectorizedSectorPlotContent()
{
  return sub_21F764F08();
}

void *sub_21F9C050C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double a5@<X4>, char a6@<W5>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9, uint64_t a10)
{
  double v47 = a5;
  long long v48 = a8;
  uint64_t v45 = a2;
  int v46 = a6 & 1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v49 = a7;
  uint64_t v41 = a10;
  uint64_t v15 = type metadata accessor for PlottableProjection();
  uint64_t v42 = *(void *)(v15 - 8);
  uint64_t v43 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v40 - v16;
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v19);
  long long v21 = (char *)&v40 - v20;
  uint64_t v22 = type metadata accessor for PlottableValue();
  __n128 v23 = MEMORY[0x270FA5388](v22 - 8);
  long long v25 = (char *)&v40 - v24;
  uint64_t v44 = (uint64_t)&v40 - v24;
  long long v26 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16);
  v26(v21, a1, AssociatedTypeWitness, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v17, v45, v43);
  uint64_t v27 = (uint64_t)v25;
  uint64_t v28 = v41;
  sub_21F83BFDC((uint64_t)v21, (uint64_t)v17, v49, AssociatedTypeWitness, v41, v27);
  ((void (*)(char *, uint64_t, uint64_t))v26)(v21, a1, AssociatedTypeWitness);
  long long v29 = *(_OWORD *)(a3 + 80);
  v50[4] = *(_OWORD *)(a3 + 64);
  v50[5] = v29;
  v50[6] = *(_OWORD *)(a3 + 96);
  LOBYTE(v50[7]) = *(unsigned char *)(a3 + 112);
  long long v30 = *(_OWORD *)(a3 + 16);
  v50[0] = *(_OWORD *)a3;
  v50[1] = v30;
  long long v31 = *(_OWORD *)(a3 + 48);
  v50[2] = *(_OWORD *)(a3 + 32);
  v50[3] = v31;
  sub_21F9C2394(a3);
  uint64_t v32 = sub_21F83C49C((uint64_t)v21, (uint64_t)v50, AssociatedTypeWitness);
  LODWORD(a3) = v33;
  ((void (*)(char *, uint64_t, uint64_t))v26)(v21, a1, AssociatedTypeWitness);
  long long v34 = *(_OWORD *)(a4 + 80);
  v50[4] = *(_OWORD *)(a4 + 64);
  v50[5] = v34;
  v50[6] = *(_OWORD *)(a4 + 96);
  LOBYTE(v50[7]) = *(unsigned char *)(a4 + 112);
  long long v35 = *(_OWORD *)(a4 + 16);
  v50[0] = *(_OWORD *)a4;
  v50[1] = v35;
  long long v36 = *(_OWORD *)(a4 + 48);
  v50[2] = *(_OWORD *)(a4 + 32);
  v50[3] = v36;
  sub_21F9C2394(a4);
  uint64_t v37 = sub_21F83C49C((uint64_t)v21, (uint64_t)v50, AssociatedTypeWitness);
  SectorMark.init<A>(angle:innerRadius:outerRadius:angularInset:)(v44, v32, a3, v37, v38, v47, v46, v49, v50, v28);
  return memcpy(v48, v50, 0x149uLL);
}

uint64_t sub_21F9C082C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t v2 = (int *)(type metadata accessor for PlottableProjection() - 8);
  uint64_t v3 = *(unsigned __int8 *)(*(void *)v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(*(void *)v2 + 64);
  unint64_t v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v0 + v4;
  sub_21F7656A8(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8), *(unsigned char *)(v0 + v4 + 16));
  swift_bridgeObjectRelease();
  uint64_t v8 = v7 + v2[13];
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v8, v1);
      break;
    case 1u:
      uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8);
      v9(v8, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v9(v8 + *(int *)(TupleTypeMetadata2 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v11 = sub_21FA24310();
      uint64_t v12 = sub_21FA24320();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v8 + *(int *)(TupleTypeMetadata3 + 48), v11);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v8 + *(int *)(TupleTypeMetadata3 + 64), v12);
      break;
    default:
      break;
  }
  unint64_t v14 = (v5 + 127) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = v0 + v6;
  int v16 = *(unsigned __int8 *)(v0 + v6 + 96);
  if (v16 != 255) {
    sub_21F82B5F8(*(void *)(v15 + 88), v16 & 1);
  }
  sub_21F82B5F8(*(void *)(v15 + 104), *(unsigned char *)(v15 + 112));
  uint64_t v17 = v0 + v14;
  int v18 = *(unsigned __int8 *)(v0 + v14 + 96);
  if (v18 != 255) {
    sub_21F82B5F8(*(void *)(v17 + 88), v18 & 1);
  }
  sub_21F82B5F8(*(void *)(v17 + 104), *(unsigned char *)(v17 + 112));

  return MEMORY[0x270FA0238](v0, ((v5 + 247) & 0xFFFFFFFFFFFFFFF8) + 9, v3 | 7);
}

void *sub_21F9C0B74@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v6 = v2[5];
  swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  return sub_21F9C050C(a1, (uint64_t)v2 + v9, (uint64_t)v2 + ((v9 + *(void *)(v8 + 64) + 7) & 0xFFFFFFFFFFFFFFF8), (uint64_t)v2 + ((v9 + *(void *)(v8 + 64) + 127) & 0xFFFFFFFFFFFFFFF8), *(double *)((char *)v2 + ((v9 + *(void *)(v8 + 64) + 247) & 0xFFFFFFFFFFFFFFF8)), *((unsigned char *)v2 + ((v9 + *(void *)(v8 + 64) + 247) & 0xFFFFFFFFFFFFFFF8) + 8), v5, a2, v7, v6);
}

uint64_t sub_21F9C0C94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v23 = a5;
  uint64_t v24 = a7;
  uint64_t v25 = a8;
  uint64_t v13 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Vectorizer();
  uint64_t v17 = *(void *)(v16 - 8);
  __n128 v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v22 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v15, a1, a4, v18);
  sub_21F83C640((uint64_t)v15, a2, a3, a4, v23, a6, v24, (uint64_t)v20);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, a4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(v25, v20, v16);
}

uint64_t SectorPlot.init<A, B>(_:angle:innerRadius:outerRadius:angularInset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, long long *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v62 = a8;
  uint64_t v67 = a7;
  uint64_t v72 = a9;
  uint64_t v73 = a2;
  uint64_t v64 = a1;
  uint64_t v68 = a10;
  uint64_t v71 = a5;
  uint64_t v63 = type metadata accessor for PlottableProjection();
  uint64_t v14 = *(void *)(v63 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x270FA5388](v63);
  uint64_t v60 = (char *)&v58 - v16;
  uint64_t v65 = *(void *)(a6 - 8);
  uint64_t v17 = v65;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = v20;
  uint64_t v21 = type metadata accessor for VectorizedSectorPlotContent();
  uint64_t v69 = *(void *)(v21 - 8);
  uint64_t v70 = v21;
  MEMORY[0x270FA5388](v21);
  uint64_t v66 = (uint64_t)&v58 - v22;
  long long v23 = a3[5];
  long long v78 = a3[4];
  long long v79 = v23;
  long long v80 = a3[6];
  char v81 = *((unsigned char *)a3 + 112);
  long long v24 = a3[1];
  long long v74 = *a3;
  long long v75 = v24;
  long long v25 = a3[3];
  long long v76 = a3[2];
  long long v77 = v25;
  long long v26 = *a4;
  long long v27 = a4[1];
  long long v28 = a4[3];
  long long v84 = a4[2];
  long long v85 = v28;
  long long v82 = v26;
  long long v83 = v27;
  long long v29 = a4[4];
  long long v30 = a4[5];
  long long v31 = a4[6];
  char v89 = *((unsigned char *)a4 + 112);
  long long v87 = v30;
  long long v88 = v31;
  long long v86 = v29;
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  int v33 = v20;
  uint64_t v34 = a6;
  uint64_t v59 = a6;
  v32(v33, a1, a6);
  long long v35 = v60;
  uint64_t v36 = v63;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v60, v73, v63);
  unint64_t v37 = (*(unsigned __int8 *)(v14 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v38 = (v37 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v39 = (v37 + v15 + 127) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v40 = (v37 + v15 + 247) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v41 = (char *)swift_allocObject();
  uint64_t v42 = v67;
  *((void *)v41 + 2) = v34;
  *((void *)v41 + 3) = v42;
  uint64_t v43 = v62;
  uint64_t v44 = v68;
  *((void *)v41 + 4) = v62;
  *((void *)v41 + 5) = v44;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v41[v37], v35, v36);
  uint64_t v45 = &v41[v38];
  long long v46 = v77;
  *((_OWORD *)v45 + 2) = v76;
  *((_OWORD *)v45 + 3) = v46;
  long long v47 = v75;
  *(_OWORD *)uint64_t v45 = v74;
  *((_OWORD *)v45 + 1) = v47;
  v45[112] = v81;
  long long v48 = v80;
  long long v49 = v78;
  *((_OWORD *)v45 + 5) = v79;
  *((_OWORD *)v45 + 6) = v48;
  *((_OWORD *)v45 + 4) = v49;
  long long v50 = &v41[v39];
  long long v51 = v87;
  *((_OWORD *)v50 + 4) = v86;
  *((_OWORD *)v50 + 5) = v51;
  *((_OWORD *)v50 + 6) = v88;
  v50[112] = v89;
  long long v52 = v83;
  *(_OWORD *)long long v50 = v82;
  *((_OWORD *)v50 + 1) = v52;
  long long v53 = v85;
  *((_OWORD *)v50 + 2) = v84;
  *((_OWORD *)v50 + 3) = v53;
  *(void *)&v41[v40] = v71;
  uint64_t v54 = v66;
  uint64_t v55 = (uint64_t)v41;
  uint64_t v56 = v59;
  sub_21F9C0C94((uint64_t)v61, (uint64_t)sub_21F9C1918, v55, v59, (uint64_t)&type metadata for SectorMark, v43, (uint64_t)&protocol witness table for SectorMark, v66);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v73, v36);
  (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v56);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v69 + 32))(v72, v54, v70);
}

void *sub_21F9C1270@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X6>, void *a7@<X8>, uint64_t a8)
{
  uint64_t v44 = a2;
  long long v47 = a7;
  long long v46 = a5;
  uint64_t v11 = *(void *)(*a5 + *MEMORY[0x263F8EA20]);
  uint64_t v48 = a6;
  uint64_t v12 = type metadata accessor for PlottableProjection();
  uint64_t v41 = *(void *)(v12 - 8);
  uint64_t v42 = v12;
  MEMORY[0x270FA5388](v12);
  unint64_t v40 = (char *)v39 - v13;
  uint64_t v14 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)v39 - v16;
  uint64_t v43 = a8;
  uint64_t v18 = type metadata accessor for PlottableValue();
  __n128 v19 = MEMORY[0x270FA5388](v18 - 8);
  uint64_t v21 = (char *)v39 - v20;
  uint64_t v45 = (uint64_t)v39 - v20;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16);
  v39[1] = v14 + 16;
  v22(v17, a1, v11, v19);
  long long v23 = (void (*)(char *, uint64_t, uint64_t))v22;
  uint64_t v24 = (uint64_t)v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v40, v44, v42);
  sub_21F83BFDC((uint64_t)v17, v24, v48, v11, a8, (uint64_t)v21);
  uint64_t v25 = a1;
  v23(v17, a1, v11);
  long long v26 = v23;
  long long v27 = *(_OWORD *)(a3 + 80);
  v50[4] = *(_OWORD *)(a3 + 64);
  v50[5] = v27;
  v50[6] = *(_OWORD *)(a3 + 96);
  LOBYTE(v50[7]) = *(unsigned char *)(a3 + 112);
  long long v28 = *(_OWORD *)(a3 + 16);
  v50[0] = *(_OWORD *)a3;
  v50[1] = v28;
  long long v29 = *(_OWORD *)(a3 + 48);
  v50[2] = *(_OWORD *)(a3 + 32);
  v50[3] = v29;
  sub_21F9C2394(a3);
  uint64_t v30 = sub_21F83C49C((uint64_t)v17, (uint64_t)v50, v11);
  int v32 = v31;
  v26(v17, v25, v11);
  long long v33 = *(_OWORD *)(a4 + 80);
  v50[4] = *(_OWORD *)(a4 + 64);
  v50[5] = v33;
  v50[6] = *(_OWORD *)(a4 + 96);
  LOBYTE(v50[7]) = *(unsigned char *)(a4 + 112);
  long long v34 = *(_OWORD *)(a4 + 16);
  v50[0] = *(_OWORD *)a4;
  v50[1] = v34;
  long long v35 = *(_OWORD *)(a4 + 48);
  v50[2] = *(_OWORD *)(a4 + 32);
  v50[3] = v35;
  sub_21F9C2394(a4);
  uint64_t v36 = sub_21F83C49C((uint64_t)v17, (uint64_t)v50, v11);
  LODWORD(v11) = v37;
  swift_getAtKeyPath();
  SectorMark.init<A>(angle:innerRadius:outerRadius:angularInset:)(v45, v30, v32, v36, v11, v49, 0, v48, v50, v43);
  return memcpy(v47, v50, 0x149uLL);
}

uint64_t sub_21F9C15C8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t v2 = (int *)(type metadata accessor for PlottableProjection() - 8);
  uint64_t v3 = *(unsigned __int8 *)(*(void *)v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(*(void *)v2 + 64);
  unint64_t v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v0 + v4;
  sub_21F7656A8(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8), *(unsigned char *)(v0 + v4 + 16));
  swift_bridgeObjectRelease();
  uint64_t v8 = v7 + v2[13];
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v8, v1);
      break;
    case 1u:
      unint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8);
      v9(v8, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v9(v8 + *(int *)(TupleTypeMetadata2 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v11 = sub_21FA24310();
      uint64_t v12 = sub_21FA24320();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v8 + *(int *)(TupleTypeMetadata3 + 48), v11);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v8 + *(int *)(TupleTypeMetadata3 + 64), v12);
      break;
    default:
      break;
  }
  unint64_t v14 = (v5 + 127) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = v0 + v6;
  int v16 = *(unsigned __int8 *)(v0 + v6 + 96);
  if (v16 != 255) {
    sub_21F82B5F8(*(void *)(v15 + 88), v16 & 1);
  }
  sub_21F82B5F8(*(void *)(v15 + 104), *(unsigned char *)(v15 + 112));
  uint64_t v17 = v0 + v14;
  int v18 = *(unsigned __int8 *)(v0 + v14 + 96);
  if (v18 != 255) {
    sub_21F82B5F8(*(void *)(v17 + 88), v18 & 1);
  }
  sub_21F82B5F8(*(void *)(v17 + 104), *(unsigned char *)(v17 + 112));
  swift_release();

  return MEMORY[0x270FA0238](v0, ((v5 + 247) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

void *sub_21F9C1918@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(v2 + 40);
  swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  return sub_21F9C1270(a1, v2 + v8, v2 + ((v8 + *(void *)(v7 + 64) + 7) & 0xFFFFFFFFFFFFFFF8), v2 + ((v8 + *(void *)(v7 + 64) + 127) & 0xFFFFFFFFFFFFFFF8), *(void **)(v2 + ((v8 + *(void *)(v7 + 64) + 247) & 0xFFFFFFFFFFFFFFF8)), v5, a2, v6);
}

uint64_t VectorizedSectorPlotContent.body.getter()
{
  uint64_t v1 = type metadata accessor for Vectorizer();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v6 - v3;
  sub_21F8B0FF0(v0, v1, &off_26B58FDA0);
  sub_21F8B0FF0(v4, v1, &off_26B58FDA0);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_21F9C1B28()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21F9C1B70(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21F9C1BC4(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21F9C1C00()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21F9C1C48(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_21F9C1DA4(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x21F9C1FBCLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for SectorPlot()
{
  return sub_21F764F08();
}

uint64_t sub_21F9C1FFC(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x21F9C2150);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_21F9C2164(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              __n128 v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v20 = a2 ^ 0x80000000;
                v19[1] = 0;
              }
              else
              {
                uint64_t v20 = a2 - 1;
              }
              *__n128 v19 = v20;
            }
            else
            {
              int v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x21F9C2358);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t sub_21F9C2380(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

_UNKNOWN **sub_21F9C2388()
{
  return &off_26B58FDA0;
}

uint64_t sub_21F9C2394(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  char v3 = *(unsigned char *)(a1 + 112);
  sub_21F9324C0(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(unsigned char *)(a1 + 96));
  sub_21F829E74(v2, v3);
  return a1;
}

uint64_t sub_21F9C240C()
{
  return swift_deallocClassInstance();
}

void sub_21F9C241C(double a1, double a2, uint64_t a3, uint64_t a4, double *a5)
{
  *a5 = a1;
  a5[1] = a2;
}

uint64_t sub_21F9C2424()
{
  return swift_release();
}

uint64_t sub_21F9C242C()
{
  swift_release();

  return swift_deallocClassInstance();
}

double sub_21F9C2464(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v22 = a2;
  uint64_t v23 = a4;
  v20[1] = a3;
  uint64_t v21 = a1;
  uint64_t v5 = sub_21F76CA40(&qword_26AD455F8);
  MEMORY[0x270FA5388](v5 - 8);
  unsigned int v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_21FA252F0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unsigned int v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_21F76CA40(&qword_26AD4A358);
  MEMORY[0x270FA5388](v12 - 8);
  int v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v4 + OBJC_IVAR____TtC6Charts14SgMeasurements__measurements;
  swift_beginAccess();
  sub_21F9C28A4(v15, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8))
  {
    sub_21F76CA84((uint64_t)v14, &qword_26AD4A358);
    return 0.0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v14, v8);
    sub_21F76CA84((uint64_t)v14, &qword_26AD4A358);
    uint64_t v17 = sub_21FA252C0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v7, 1, 1, v17);
    sub_21FA252D0();
    double v16 = v18;
    sub_21F76CA84((uint64_t)v7, &qword_26AD455F8);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return v16;
}

uint64_t sub_21F9C272C()
{
  sub_21F76CA84(v0 + OBJC_IVAR____TtC6Charts14SgMeasurements__measurements, &qword_26AD4A358);
  uint64_t v1 = v0 + OBJC_IVAR____TtC6Charts14SgMeasurements__dynamicTypeSize;
  uint64_t v2 = sub_21FA24730();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_21F9C2804()
{
  return type metadata accessor for SgMeasurements();
}

uint64_t type metadata accessor for SgMeasurements.CacheContent()
{
  return self;
}

uint64_t sub_21F9C2830()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for SgMeasurements.ImageRendererCacheContent()
{
  return sub_21F764F08();
}

BOOL sub_21F9C2890(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_21F9C28A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21F76CA40(&qword_26AD4A358);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21F9C290C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v20 = a5;
  uint64_t v21 = a4;
  uint64_t v23 = a6;
  uint64_t v9 = sub_21F898AC4(a2, (uint64_t)v47);
  uint64_t v10 = v47[0];
  uint64_t v22 = v47[1];
  uint64_t v11 = v47[2];
  uint64_t v12 = v47[3];
  uint64_t v13 = v47[4];
  __n128 v14 = MEMORY[0x270FA5388](v9);
  double v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16))(v16, a1, a3, v14);
  long long v48 = 0uLL;
  LOWORD(v49) = 0;
  BYTE2(v49) = 1;
  v36[0] = 3;
  sub_21F7C1A10(a2);
  sub_21F7C1A10(a2);
  AxisValueLabel.init<A>(format:centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:)((uint64_t)v16, 2, 0, 0, 1, 0, 0, 1, (uint64_t)v24, (uint64_t *)&v48, 2, v36, 0, 1, 0, 1, a3, v21, v20);
  v36[0] = 2;
  uint64_t v37 = 0;
  char v38 = -1;
  uint64_t v39 = v10;
  uint64_t v40 = v22;
  uint64_t v41 = v11;
  uint64_t v42 = v12;
  uint64_t v43 = v13;
  __int16 v44 = 1;
  uint64_t v45 = 0;
  v46[0] = v36;
  char v26 = 2;
  uint64_t v27 = 0;
  char v28 = -1;
  uint64_t v29 = v10;
  uint64_t v30 = v22;
  uint64_t v31 = v11;
  uint64_t v32 = v12;
  uint64_t v33 = v13;
  __int16 v34 = 0;
  uint64_t v35 = 0;
  v46[1] = &v26;
  v46[2] = (char *)v24;
  sub_21F809728(v46, v23);
  long long v54 = v24[6];
  long long v55 = v24[7];
  char v56 = v25;
  long long v50 = v24[2];
  long long v51 = v24[3];
  long long v52 = v24[4];
  long long v53 = v24[5];
  long long v48 = v24[0];
  long long v49 = v24[1];
  sub_21F81022C((uint64_t)&v48);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21F9C2B4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_21F898AC4(a1, (uint64_t)&v35);
  char v44 = 1;
  char v43 = 1;
  char v42 = 1;
  char v41 = 1;
  char v40 = 1;
  char v24 = 2;
  uint64_t v25 = 0;
  char v26 = -1;
  uint64_t v27 = v35;
  uint64_t v28 = v36;
  uint64_t v29 = v37;
  uint64_t v30 = v38;
  uint64_t v31 = v39;
  __int16 v32 = 1;
  char v14 = 2;
  uint64_t v15 = 0;
  char v16 = -1;
  uint64_t v17 = v35;
  uint64_t v18 = v36;
  uint64_t v19 = v37;
  uint64_t v20 = v38;
  uint64_t v21 = v39;
  __int16 v22 = 0;
  uint64_t v23 = 0;
  uint64_t v33 = 0;
  v34[0] = &v24;
  v34[1] = &v14;
  LOBYTE(v5) = 2;
  *((void *)&v5 + 1) = 0;
  *(void *)&long long v6 = 0;
  BYTE8(v6) = 1;
  long long v7 = 0uLL;
  LOBYTE(v8) = 1;
  *((void *)&v8 + 1) = 0;
  *(void *)&long long v9 = 0;
  WORD4(v9) = 0;
  BYTE10(v9) = 1;
  *(_WORD *)((char *)&v9 + 11) = 770;
  *(void *)&long long v10 = 0;
  BYTE8(v10) = 1;
  *(void *)&long long v11 = 0;
  BYTE8(v11) = 1;
  long long v12 = 0uLL;
  char v13 = 2;
  v34[2] = (char *)&v5;
  sub_21F809728(v34, a2);
  v45[6] = v11;
  v45[7] = v12;
  char v46 = v13;
  v45[2] = v7;
  v45[3] = v8;
  v45[4] = v9;
  v45[5] = v10;
  v45[0] = v5;
  v45[1] = v6;
  sub_21F7C1A10(a1);
  sub_21F7C1A10(a1);
  sub_21F81022C((uint64_t)v45);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21F9C2CCC(uint64_t a1)
{
  return sub_21F9C2D24(a1, (SEL *)&selRef_tertiaryLabelColor, &qword_26AD521B0);
}

void sub_21F9C2CE0()
{
  qword_26AD52140 = 0x4010000000000000;
}

uint64_t sub_21F9C2CF0()
{
  uint64_t result = sub_21FA25140();
  qword_26AD521F0 = result;
  return result;
}

uint64_t sub_21F9C2D10(uint64_t a1)
{
  return sub_21F9C2D24(a1, (SEL *)&selRef_secondaryLabelColor, &qword_26AD521F8);
}

uint64_t sub_21F9C2D24(uint64_t a1, SEL *a2, uint64_t *a3)
{
  id v4 = [self *a2];
  uint64_t result = MEMORY[0x223C54940](v4);
  *a3 = result;
  return result;
}

void sub_21F9C2D6C()
{
  qword_26AD521A8 = 0x4010000000000000;
}

void sub_21F9C2D7C()
{
  qword_26AD521E8 = 0x4010000000000000;
}

void sub_21F9C2D8C()
{
  qword_267EF2F78 = 0x4020000000000000;
}

uint64_t sub_21F9C2D9C(uint64_t a1)
{
  return sub_21F9C2DF4(a1, &qword_26AD455D0, &qword_26AD521F0, &qword_267EF2F80);
}

uint64_t sub_21F9C2DC8(uint64_t a1)
{
  return sub_21F9C2DF4(a1, &qword_26AD455D8, &qword_26AD521F8, &qword_267EF2F88);
}

uint64_t sub_21F9C2DF4(uint64_t a1, void *a2, void *a3, void *a4)
{
  if (*a2 != -1) {
    swift_once();
  }
  *a4 = *a3;

  return swift_retain();
}

double sub_21F9C2E4C@<D0>(char a1@<W0>, double *a2@<X8>)
{
  if ((a1 & 0xFE) != 2)
  {
    id v3 = objc_msgSend(self, sel_currentDevice);
    id v4 = objc_msgSend(v3, sel_userInterfaceIdiom);

    sub_21F76CA40(&qword_26AD48568);
    uint64_t v5 = swift_allocObject();
    if (v4 == (id)1) {
      __asm { FMOV            V1.2D, #3.0 }
    }
    else {
      __asm { FMOV            V1.2D, #2.0 }
    }
    *(_OWORD *)(v5 + 16) = xmmword_21FA28820;
    *(_OWORD *)(v5 + 32) = _Q1;
  }
  sub_21FA24500();
  double result = v14;
  *(void *)a2 = v12;
  *((void *)a2 + 1) = v13;
  a2[2] = v14;
  *((void *)a2 + 3) = v15;
  *((void *)a2 + 4) = v16;
  return result;
}

uint64_t sub_21F9C2F70(float64x2_t a1, float64x2_t a2, float64x2_t a3, float64x2_t a4)
{
  float64x2_t v4 = vsubq_f64(a1, a2);
  double v5 = fabs(vmuld_lane_f64(a1.f64[0], a4, 1)+ vmuld_lane_f64(a3.f64[0], v4, 1)+ vmulq_laneq_f64(a2, vsubq_f64(a3, a1), 1).f64[0]);
  if (qword_26AD44B80 != -1)
  {
    float64x2_t v11 = v4;
    float64x2_t v12 = a4;
    swift_once();
    float64x2_t v4 = v11;
    a4 = v12;
  }
  if (v5 >= *(double *)&qword_26AD52130) {
    return 0;
  }
  int64x2_t v6 = (int64x2_t)vabsq_f64(a4);
  double v7 = v4.f64[0] / (0.0 - a4.f64[0]);
  if (vmovn_s64(vcgtq_f64((float64x2_t)v6, (float64x2_t)vdupq_laneq_s64(v6, 1))).u8[0]) {
    double v8 = v7;
  }
  else {
    double v8 = v4.f64[1] / (0.0 - a4.f64[1]);
  }
  if (qword_26AD46268 != -1) {
    swift_once();
  }
  if (v8 > *(double *)&qword_26AD52210 + 1.0 || v8 < -*(double *)&qword_26AD52210) {
    return 0;
  }
  else {
    return *(void *)&v8;
  }
}

uint64_t sub_21F9C30A0(float64x2_t a1, float64x2_t a2, int64x2_t a3, float64x2_t a4, float64x2_t a5, int64x2_t a6)
{
  float64x2_t v7 = a2;
  float64x2_t v8 = a1;
  double v9 = vmlad_n_f64(-*(double *)&a3.i64[1] * *(double *)a6.i64, *(double *)&a6.i64[1], *(double *)a3.i64);
  double v10 = fabs(v9);
  if (qword_26AD44B80 != -1)
  {
    int64x2_t v64 = a6;
    float64x2_t v57 = a4;
    double v52 = v9;
    int64x2_t v55 = a3;
    swift_once();
    double v9 = v52;
    a3 = v55;
    float64x2_t v8 = a1;
    float64x2_t v7 = a2;
    a4 = v57;
    a6 = v64;
  }
  if (v10 >= *(double *)&qword_26AD52130)
  {
    float64x2_t v19 = vsubq_f64(a4, v8);
    float64x2_t v20 = vdivq_f64(vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(a6, a3), -v19.f64[1]), (float64x2_t)vzip2q_s64(a6, a3), v19.f64[0])), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v9, 0));
    if (qword_26AD46268 != -1)
    {
      float64x2_t v68 = v20;
      swift_once();
      float64x2_t v20 = v68;
    }
    int v21 = (v20.f64[0] >= -*(double *)&qword_26AD52210) << 31 >> 31;
    if ((v20.f64[1] >= -*(double *)&qword_26AD52210) << 31 >> 31 > v21) {
      LOBYTE(v21) = (v20.f64[1] >= -*(double *)&qword_26AD52210) << 31 >> 31;
    }
    if ((v21 & 1) == 0) {
      return MEMORY[0x263F8EE78];
    }
    int v22 = (v20.f64[0] <= *(double *)&qword_26AD52210 + 1.0) << 31 >> 31;
    if ((v20.f64[1] <= *(double *)&qword_26AD52210 + 1.0) << 31 >> 31 > v22) {
      LOBYTE(v22) = (v20.f64[1] <= *(double *)&qword_26AD52210 + 1.0) << 31 >> 31;
    }
    if (v22)
    {
      float64x2_t v66 = v20;
      sub_21F76CA40(&qword_26AD441F0);
      uint64_t v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_21FA28550;
      *(float64x2_t *)(v16 + 32) = v66;
    }
    else
    {
      return MEMORY[0x263F8EE78];
    }
  }
  else
  {
    float64x2_t v61 = v7;
    int64x2_t v63 = a6;
    float64x2_t v56 = a4;
    float64x2_t v58 = v8;
    float64x2_t v53 = (float64x2_t)a3;
    uint64_t v11 = sub_21F9C2F70(a4, v8, v7, (float64x2_t)a3);
    if (v12)
    {
      uint64_t v16 = MEMORY[0x263F8EE78];
    }
    else
    {
      uint64_t v13 = v11;
      sub_21F76CA40(&qword_26AD4A478);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_21FA28820;
      *(void *)(inited + 32) = v13;
      *(void *)(inited + 40) = 0;
      sub_21F9524DC(inited);
      long long v51 = v15;
      swift_setDeallocating();
      uint64_t v16 = (uint64_t)sub_21F7E86D8(0, 1, 1, MEMORY[0x263F8EE78]);
      unint64_t v18 = *(void *)(v16 + 16);
      unint64_t v17 = *(void *)(v16 + 24);
      if (v18 >= v17 >> 1) {
        uint64_t v16 = (uint64_t)sub_21F7E86D8((char *)(v17 > 1), v18 + 1, 1, (char *)v16);
      }
      *(void *)(v16 + 16) = v18 + 1;
      *(_OWORD *)(v16 + 16 * v18 + 32) = v51;
    }
    uint64_t v23 = sub_21F9C2F70(a5, v58, v61, v53);
    if (v24)
    {
      float64x2_t v30 = (float64x2_t)v63;
      float64x2_t v31 = v58;
    }
    else
    {
      uint64_t v25 = v23;
      sub_21F76CA40(&qword_26AD4A478);
      uint64_t v26 = swift_initStackObject();
      *(_OWORD *)(v26 + 16) = xmmword_21FA28820;
      *(void *)(v26 + 32) = v25;
      *(void *)(v26 + 40) = 0x3FF0000000000000;
      sub_21F9524DC(v26);
      long long v54 = v27;
      swift_setDeallocating();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v16 = (uint64_t)sub_21F7E86D8(0, *(void *)(v16 + 16) + 1, 1, (char *)v16);
      }
      unint64_t v29 = *(void *)(v16 + 16);
      unint64_t v28 = *(void *)(v16 + 24);
      float64x2_t v30 = (float64x2_t)v63;
      float64x2_t v31 = v58;
      if (v29 >= v28 >> 1)
      {
        long long v49 = sub_21F7E86D8((char *)(v28 > 1), v29 + 1, 1, (char *)v16);
        float64x2_t v31 = v58;
        float64x2_t v30 = (float64x2_t)v63;
        uint64_t v16 = (uint64_t)v49;
      }
      *(void *)(v16 + 16) = v29 + 1;
      *(_OWORD *)(v16 + 16 * v29 + 32) = v54;
    }
    uint64_t v32 = sub_21F9C2F70(v31, v56, a5, v30);
    if (v33)
    {
      float64x2_t v39 = v61;
      float64x2_t v40 = (float64x2_t)v63;
    }
    else
    {
      uint64_t v34 = v32;
      sub_21F76CA40(&qword_26AD4A478);
      uint64_t v35 = swift_initStackObject();
      *(_OWORD *)(v35 + 16) = xmmword_21FA28820;
      *(void *)(v35 + 32) = 0;
      *(void *)(v35 + 40) = v34;
      sub_21F9524DC(v35);
      long long v59 = v36;
      swift_setDeallocating();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v16 = (uint64_t)sub_21F7E86D8(0, *(void *)(v16 + 16) + 1, 1, (char *)v16);
      }
      unint64_t v38 = *(void *)(v16 + 16);
      unint64_t v37 = *(void *)(v16 + 24);
      float64x2_t v39 = v61;
      float64x2_t v40 = (float64x2_t)v63;
      if (v38 >= v37 >> 1)
      {
        long long v50 = sub_21F7E86D8((char *)(v37 > 1), v38 + 1, 1, (char *)v16);
        float64x2_t v39 = v61;
        float64x2_t v40 = (float64x2_t)v63;
        uint64_t v16 = (uint64_t)v50;
      }
      *(void *)(v16 + 16) = v38 + 1;
      *(_OWORD *)(v16 + 16 * v38 + 32) = v59;
    }
    uint64_t v41 = sub_21F9C2F70(v39, v56, a5, v40);
    if ((v42 & 1) == 0)
    {
      uint64_t v43 = v41;
      sub_21F76CA40(&qword_26AD4A478);
      uint64_t v44 = swift_initStackObject();
      *(_OWORD *)(v44 + 16) = xmmword_21FA28820;
      *(void *)(v44 + 32) = 0x3FF0000000000000;
      *(void *)(v44 + 40) = v43;
      sub_21F9524DC(v44);
      long long v67 = v45;
      swift_setDeallocating();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v16 = (uint64_t)sub_21F7E86D8(0, *(void *)(v16 + 16) + 1, 1, (char *)v16);
      }
      unint64_t v47 = *(void *)(v16 + 16);
      unint64_t v46 = *(void *)(v16 + 24);
      if (v47 >= v46 >> 1) {
        uint64_t v16 = (uint64_t)sub_21F7E86D8((char *)(v46 > 1), v47 + 1, 1, (char *)v16);
      }
      *(void *)(v16 + 16) = v47 + 1;
      *(_OWORD *)(v16 + 16 * v47 + 32) = v67;
    }
  }
  return v16;
}

uint64_t sub_21F9C3580(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  if (v1 > 1)
  {
    unint64_t v3 = 0;
    uint64_t v4 = result + 32;
    uint64_t v2 = (char *)MEMORY[0x263F8EE78];
    uint64_t v5 = 1;
LABEL_6:
    unint64_t v6 = v5;
    float64x2_t v7 = (_OWORD *)(v4 + 48 * v3);
    float64x2_t v16 = *((float64x2_t *)v7 + 1);
    float64x2_t v17 = *(float64x2_t *)v7;
    int64x2_t v15 = *((int64x2_t *)v7 + 2);
    unint64_t v14 = v6;
    while (v6 < v1)
    {
      uint64_t v8 = sub_21F9C30A0(v17, v16, v15, *(float64x2_t *)(v4 + 48 * v6), *(float64x2_t *)(v4 + 48 * v6 + 16), *(int64x2_t *)(v4 + 48 * v6 + 32));
      uint64_t v9 = *(void *)(v8 + 16);
      if (v9)
      {
        double v10 = (long long *)(v8 + 32);
        do
        {
          long long v18 = *v10;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v2 = sub_21F7E8B04(0, *((void *)v2 + 2) + 1, 1, v2);
          }
          unint64_t v12 = *((void *)v2 + 2);
          unint64_t v11 = *((void *)v2 + 3);
          if (v12 >= v11 >> 1) {
            uint64_t v2 = sub_21F7E8B04((char *)(v11 > 1), v12 + 1, 1, v2);
          }
          *((void *)v2 + 2) = v12 + 1;
          uint64_t v13 = &v2[32 * v12];
          *((void *)v13 + 4) = v3;
          *((void *)v13 + 5) = v6;
          *((_OWORD *)v13 + 3) = v18;
          ++v10;
          --v9;
        }
        while (v9);
      }
      ++v6;
      double result = swift_bridgeObjectRelease();
      if (v6 == v1)
      {
        unint64_t v3 = v14;
        uint64_t v5 = v14 + 1;
        if (v14 + 1 == v1) {
          return (uint64_t)v2;
        }
        goto LABEL_6;
      }
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

__n128 _s11LineSegmentVwcp(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *_s11LineSegmentVMa()
{
  return &_s11LineSegmentVN;
}

uint64_t destroy for AnyPlottableValue.Storage(uint64_t a1)
{
  return sub_21F770E38(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s6Charts17AnyPlottableValueV7StorageOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_21F770E44(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AnyPlottableValue.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_21F770E44(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_21F770E38(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AnyPlottableValue.Storage(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_21F770E38(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyPlottableValue.Storage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3F && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 63);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 16) >> 1) & 0x3E | (*(unsigned __int8 *)(a1 + 16) >> 7)) ^ 0x3F;
  if (v3 >= 0x3E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AnyPlottableValue.Storage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3E)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 63;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x3F) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3F) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = 0;
      *(unsigned char *)(result + 16) = 4 * (((-a2 >> 1) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t sub_21F9C38D0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) >> 7;
}

uint64_t sub_21F9C38DC(uint64_t result)
{
  *(unsigned char *)(result + 16) &= ~0x80u;
  return result;
}

uint64_t sub_21F9C38EC(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = *(unsigned char *)(result + 16) & 3 | (a2 << 7);
  return result;
}

ValueMetadata *type metadata accessor for AnyPlottableValue.Storage()
{
  return &type metadata for AnyPlottableValue.Storage;
}

uint64_t initializeWithCopy for AnyPlottableValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_21F7652C0(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  sub_21F770E44(v7, v8, v9);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for AnyPlottableValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_21F7652C0(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  sub_21F7656A8(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(a2 + 40);
  char v12 = *(unsigned char *)(a2 + 48);
  sub_21F770E44(v10, v11, v12);
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v11;
  char v15 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v12;
  sub_21F770E38(v13, v14, v15);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for AnyPlottableValue(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  sub_21F7656A8(v5, v6, v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  char v8 = *(unsigned char *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  char v11 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v8;
  sub_21F770E38(v9, v10, v11);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyPlottableValue(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyPlottableValue(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyPlottableValue()
{
  return &type metadata for AnyPlottableValue;
}

uint64_t sub_21F9C3B70()
{
  uint64_t v5 = "\t";
  uint64_t v6 = &unk_21FA33188;
  uint64_t v7 = MEMORY[0x263F8CF88] + 64;
  char v8 = &unk_21FA331A0;
  uint64_t result = type metadata accessor for PlottableProjection();
  if (v1 <= 0x3F)
  {
    uint64_t v9 = *(void *)(result - 8) + 64;
    swift_getTupleTypeLayout2();
    uint64_t v10 = &v4;
    swift_getTupleTypeLayout2();
    char v11 = &v3;
    swift_getTupleTypeLayout2();
    char v12 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t sub_21F9C3C84(unint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v186 = *(void *)(a3 + 24);
  uint64_t v4 = *(void *)(v186 - 8);
  uint64_t v187 = v4;
  int v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = v5;
  uint64_t v7 = sub_21FA24310();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v184 = v8;
  uint64_t v185 = v7;
  int v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v9;
  uint64_t v11 = sub_21FA24320();
  uint64_t v12 = v4;
  int v13 = *(_DWORD *)(*(void *)(v11 - 8) + 80);
  unint64_t v14 = v9 | (unint64_t)v13 | v5;
  uint64_t v15 = v14 | 7;
  unint64_t v16 = v14 + 32;
  unint64_t v17 = *(void *)(v12 + 64);
  unint64_t v18 = v17 + v5;
  if (((v17 + v6) & ~v6) + v17 > v17) {
    v17 += (v17 + v5) & ~(unint64_t)v5;
  }
  uint64_t v19 = *(void *)(v8 + 64) + v13;
  unint64_t v20 = ((v19 + ((v9 + 8) & ~(unint64_t)v9)) & ~(unint64_t)v13)
      + *(void *)(*(void *)(v11 - 8) + 64);
  if (v17 > v20) {
    unint64_t v20 = v17;
  }
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v21 = v20;
  unint64_t v22 = v20 + ((v14 + 32) & ~(v14 | 7));
  unint64_t v23 = v22 + 1;
  uint64_t v24 = v22 + 1 + v15;
  unint64_t v25 = (v24 & ~v15) + v22 + 1;
  if (v22 + 1 > v25) {
    unint64_t v25 = v22 + 1;
  }
  unint64_t v26 = (v22 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v25 <= v26 + 113) {
    unint64_t v25 = v26 + 113;
  }
  unint64_t v27 = v26 + 49;
  if (v25 > v27) {
    unint64_t v27 = v25;
  }
  uint64_t v28 = 25;
  if (v27 > 0x19) {
    uint64_t v28 = v27;
  }
  BOOL v29 = v14 <= 7 && ((v9 | v13 | v5) & 0x100000) == 0;
  if (v29 && (unint64_t)(v28 + 1) <= 0x18)
  {
    float64x2_t v30 = a2;
    unsigned int v31 = *((unsigned __int8 *)a2 + v28);
    if (v31 >= 8) {
      unsigned int v31 = *(_DWORD *)a2 + 8;
    }
    unint64_t v32 = a1;
    switch(v31)
    {
      case 1u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 9) = *(_OWORD *)((char *)a2 + 9);
        *(unsigned char *)(a1 + v28) = 1;
        break;
      case 2u:
        *(void *)a1 = *a2;
        *(unsigned char *)(a1 + v28) = 2;
        goto LABEL_26;
      case 3u:
        uint64_t v35 = a2[1];
        *(void *)unint64_t v32 = *a2;
        *(void *)(v32 + 8) = v35;
        *(unsigned char *)(v32 + v28) = 3;
        swift_retain();
        goto LABEL_26;
      case 4u:
        uint64_t v180 = ~v10;
        uint64_t v153 = ~v6;
        unint64_t v157 = v18;
        unint64_t v161 = ~(unint64_t)v13;
        uint64_t v165 = v19;
        uint64_t v36 = v10 + 8;
        uint64_t v169 = *(void *)(v11 - 8);
        uint64_t v173 = v11;
        uint64_t v37 = v28;
        uint64_t v38 = *a2;
        uint64_t v39 = a2[1];
        char v40 = *((unsigned char *)a2 + 16);
        uint64_t v41 = ~(v14 | 7);
        sub_21F7652C0(*a2, v39, v40);
        *(void *)unint64_t v32 = v38;
        *(void *)(v32 + 8) = v39;
        *(unsigned char *)(v32 + 16) = v40;
        *(void *)(v32 + 24) = a2[3];
        char v42 = (void *)((v32 + v15 + 32) & v41);
        uint64_t v43 = (unsigned __int8 *)(((unint64_t)a2 + v15 + 32) & v41);
        unsigned int v44 = v43[v21];
        swift_bridgeObjectRetain();
        if (v44 >= 5)
        {
          if (v21 <= 3) {
            uint64_t v45 = v21;
          }
          else {
            uint64_t v45 = 4;
          }
          switch(v45)
          {
            case 1:
              int v46 = *v43;
              goto LABEL_59;
            case 2:
              int v46 = *(unsigned __int16 *)v43;
              goto LABEL_59;
            case 3:
              int v46 = *(unsigned __int16 *)v43 | (v43[2] << 16);
              goto LABEL_59;
            case 4:
              int v46 = *(_DWORD *)v43;
LABEL_59:
              int v80 = (v46 | ((v44 - 5) << (8 * v21))) + 5;
              unsigned int v81 = v46 + 5;
              if (v21 >= 4) {
                unsigned int v44 = v81;
              }
              else {
                unsigned int v44 = v80;
              }
              break;
            default:
              break;
          }
        }
        switch(v44)
        {
          case 1u:
            long long v82 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v187 + 16);
            v82(v42, v43, v186);
            v82((void *)(((unint64_t)v42 + v157) & v153), (unsigned __int8 *)((unint64_t)&v43[v157] & v153), v186);
            char v83 = 1;
            goto LABEL_68;
          case 2u:
            *char v42 = *(void *)v43;
            *((unsigned char *)v42 + v21) = 2;
            swift_retain();
            break;
          case 3u:
            *char v42 = *(void *)v43;
            v42[1] = *((void *)v43 + 1);
            *((unsigned char *)v42 + v21) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *char v42 = *(void *)v43;
            unint64_t v84 = ((unint64_t)v42 + v36) & v180;
            unint64_t v85 = (unint64_t)&v43[v36] & v180;
            long long v86 = *(void (**)(unint64_t, unint64_t, uint64_t))(v184 + 16);
            swift_retain();
            v86(v84, v85, v185);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v169 + 16))((v165 + v84) & v161, (v165 + v85) & v161, v173);
            char v83 = 4;
LABEL_68:
            *((unsigned char *)v42 + v21) = v83;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v187 + 16))(v42, v43, v186);
            *((unsigned char *)v42 + v21) = 0;
            break;
        }
        *(unsigned char *)(v32 + v37) = 4;
        break;
      case 5u:
        uint64_t v177 = v28;
        uint64_t v181 = ~v10;
        uint64_t v152 = v10 + 8;
        uint64_t v154 = ~v6;
        unint64_t v158 = v18;
        unint64_t v162 = ~(unint64_t)v13;
        uint64_t v166 = v19;
        uint64_t v170 = *(void *)(v11 - 8);
        uint64_t v174 = v11;
        uint64_t v47 = *a2;
        uint64_t v48 = a2[1];
        char v49 = *((unsigned char *)a2 + 16);
        uint64_t v50 = ~(v14 | 7);
        sub_21F7652C0(*a2, v48, v49);
        *(void *)unint64_t v32 = v47;
        *(void *)(v32 + 8) = v48;
        *(unsigned char *)(v32 + 16) = v49;
        *(void *)(v32 + 24) = a2[3];
        long long v51 = (void *)((v32 + v15 + 32) & v50);
        uint64_t v151 = v50;
        double v52 = (unsigned __int8 *)(((unint64_t)a2 + v15 + 32) & v50);
        unint64_t v53 = v21;
        unsigned int v54 = v52[v21];
        swift_bridgeObjectRetain();
        if (v54 < 5)
        {
          uint64_t v56 = v152;
        }
        else
        {
          if (v21 <= 3) {
            uint64_t v55 = v21;
          }
          else {
            uint64_t v55 = 4;
          }
          uint64_t v56 = v152;
          switch(v55)
          {
            case 1:
              int v57 = *v52;
              goto LABEL_73;
            case 2:
              int v57 = *(unsigned __int16 *)v52;
              goto LABEL_73;
            case 3:
              int v57 = *(unsigned __int16 *)v52 | (v52[2] << 16);
              goto LABEL_73;
            case 4:
              int v57 = *(_DWORD *)v52;
LABEL_73:
              int v87 = (v57 | ((v54 - 5) << (8 * v21))) + 5;
              unsigned int v88 = v57 + 5;
              if (v21 >= 4) {
                unsigned int v54 = v88;
              }
              else {
                unsigned int v54 = v87;
              }
              break;
            default:
              break;
          }
        }
        switch(v54)
        {
          case 1u:
            char v89 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v187 + 16);
            v89(v51, v52, v186);
            v89((void *)(((unint64_t)v51 + v158) & v154), (unsigned __int8 *)((unint64_t)&v52[v158] & v154), v186);
            float64x2_t v30 = a2;
            char v90 = 1;
            goto LABEL_82;
          case 2u:
            *long long v51 = *(void *)v52;
            *((unsigned char *)v51 + v21) = 2;
            swift_retain();
            break;
          case 3u:
            *long long v51 = *(void *)v52;
            v51[1] = *((void *)v52 + 1);
            *((unsigned char *)v51 + v21) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *long long v51 = *(void *)v52;
            unint64_t v91 = ((unint64_t)v51 + v56) & v181;
            unint64_t v92 = (unint64_t)&v52[v56] & v181;
            long long v93 = *(void (**)(unint64_t, unint64_t, uint64_t))(v184 + 16);
            swift_retain();
            v93(v91, v92, v185);
            float64x2_t v30 = a2;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v170 + 16))((v166 + v91) & v162, (v166 + v92) & v162, v174);
            char v90 = 4;
LABEL_82:
            *((unsigned char *)v51 + v53) = v90;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v187 + 16))(v51, v52, v186);
            *((unsigned char *)v51 + v21) = 0;
            break;
        }
        unint64_t v94 = (v24 + v32) & v151;
        uint64_t v95 = ((unint64_t)v30 + v24) & v151;
        uint64_t v97 = *(void *)v95;
        uint64_t v96 = *(void *)(v95 + 8);
        char v98 = *(unsigned char *)(v95 + 16);
        sub_21F7652C0(*(void *)v95, v96, v98);
        *(void *)unint64_t v94 = v97;
        *(void *)(v94 + 8) = v96;
        *(unsigned char *)(v94 + 16) = v98;
        *(void *)(v94 + 24) = *(void *)(v95 + 24);
        long long v99 = (void *)((v16 + v94) & v151);
        uint64_t v100 = (unsigned __int8 *)((v16 + v95) & v151);
        unsigned int v101 = v100[v53];
        swift_bridgeObjectRetain();
        if (v101 < 5)
        {
          uint64_t v103 = v177;
          uint64_t v104 = v152;
        }
        else
        {
          if (v53 <= 3) {
            uint64_t v102 = v53;
          }
          else {
            uint64_t v102 = 4;
          }
          uint64_t v103 = v177;
          uint64_t v104 = v152;
          switch(v102)
          {
            case 1:
              int v105 = *v100;
              goto LABEL_127;
            case 2:
              int v105 = *(unsigned __int16 *)v100;
              goto LABEL_127;
            case 3:
              int v105 = *(unsigned __int16 *)v100 | (v100[2] << 16);
              goto LABEL_127;
            case 4:
              int v105 = *(_DWORD *)v100;
LABEL_127:
              int v144 = (v105 | ((v101 - 5) << (8 * v53))) + 5;
              unsigned int v145 = v105 + 5;
              if (v53 >= 4) {
                unsigned int v101 = v145;
              }
              else {
                unsigned int v101 = v144;
              }
              break;
            default:
              break;
          }
        }
        switch(v101)
        {
          case 1u:
            long long v146 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v187 + 16);
            v146(v99, v100, v186);
            v146((void *)(((unint64_t)v99 + v158) & v154), (unsigned __int8 *)((unint64_t)&v100[v158] & v154), v186);
            char v147 = 1;
            goto LABEL_136;
          case 2u:
            *long long v99 = *(void *)v100;
            *((unsigned char *)v99 + v53) = 2;
            swift_retain();
            break;
          case 3u:
            *long long v99 = *(void *)v100;
            v99[1] = *((void *)v100 + 1);
            *((unsigned char *)v99 + v53) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *long long v99 = *(void *)v100;
            unint64_t v148 = ((unint64_t)v99 + v104) & v181;
            unint64_t v149 = (unint64_t)&v100[v104] & v181;
            uint64_t v150 = *(void (**)(unint64_t, unint64_t, uint64_t))(v184 + 16);
            swift_retain();
            v150(v148, v149, v185);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v170 + 16))((v166 + v148) & v162, (v166 + v149) & v162, v174);
            char v147 = 4;
LABEL_136:
            *((unsigned char *)v99 + v53) = v147;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v187 + 16))(v99, v100, v186);
            *((unsigned char *)v99 + v53) = 0;
            break;
        }
        *(unsigned char *)(v32 + v103) = 5;
        break;
      case 6u:
        uint64_t v178 = v28;
        uint64_t v182 = ~v10;
        uint64_t v155 = ~v6;
        unint64_t v159 = v18;
        unint64_t v163 = ~(unint64_t)v13;
        uint64_t v167 = v19;
        uint64_t v58 = v10 + 8;
        uint64_t v171 = *(void *)(v11 - 8);
        uint64_t v175 = v11;
        uint64_t v59 = *a2;
        uint64_t v60 = a2[1];
        char v61 = *((unsigned char *)a2 + 16);
        uint64_t v62 = ~(v14 | 7);
        sub_21F7652C0(*a2, v60, v61);
        *(void *)unint64_t v32 = v59;
        *(void *)(v32 + 8) = v60;
        *(unsigned char *)(v32 + 16) = v61;
        *(void *)(v32 + 24) = a2[3];
        int64x2_t v63 = (void *)((v32 + v15 + 32) & v62);
        int64x2_t v64 = (unsigned __int8 *)(((unint64_t)a2 + v15 + 32) & v62);
        unint64_t v65 = v21;
        unsigned int v66 = v64[v21];
        swift_bridgeObjectRetain();
        if (v66 >= 5)
        {
          if (v21 <= 3) {
            uint64_t v67 = v21;
          }
          else {
            uint64_t v67 = 4;
          }
          switch(v67)
          {
            case 1:
              int v68 = *v64;
              goto LABEL_93;
            case 2:
              int v68 = *(unsigned __int16 *)v64;
              goto LABEL_93;
            case 3:
              int v68 = *(unsigned __int16 *)v64 | (v64[2] << 16);
              goto LABEL_93;
            case 4:
              int v68 = *(_DWORD *)v64;
LABEL_93:
              int v106 = (v68 | ((v66 - 5) << (8 * v21))) + 5;
              unsigned int v107 = v68 + 5;
              if (v21 >= 4) {
                unsigned int v66 = v107;
              }
              else {
                unsigned int v66 = v106;
              }
              break;
            default:
              break;
          }
        }
        switch(v66)
        {
          case 1u:
            long long v108 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v187 + 16);
            v108(v63, v64, v186);
            v108((void *)(((unint64_t)v63 + v159) & v155), (unsigned __int8 *)((unint64_t)&v64[v159] & v155), v186);
            char v109 = 1;
            goto LABEL_102;
          case 2u:
            *int64x2_t v63 = *(void *)v64;
            *((unsigned char *)v63 + v21) = 2;
            swift_retain();
            break;
          case 3u:
            *int64x2_t v63 = *(void *)v64;
            v63[1] = *((void *)v64 + 1);
            *((unsigned char *)v63 + v21) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *int64x2_t v63 = *(void *)v64;
            unint64_t v110 = ((unint64_t)v63 + v58) & v182;
            unint64_t v111 = (unint64_t)&v64[v58] & v182;
            uint64_t v112 = *(void (**)(unint64_t, unint64_t, uint64_t))(v184 + 16);
            swift_retain();
            v112(v110, v111, v185);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v171 + 16))((v167 + v110) & v163, (v167 + v111) & v163, v175);
            char v109 = 4;
LABEL_102:
            *((unsigned char *)v63 + v65) = v109;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v187 + 16))(v63, v64, v186);
            *((unsigned char *)v63 + v21) = 0;
            break;
        }
        unint64_t v113 = (v32 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v114 = ((unint64_t)a2 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
        *(unsigned char *)unint64_t v113 = *(unsigned char *)v114;
        uint64_t v115 = (_OWORD *)(v113 + 8);
        uint64_t v116 = (_OWORD *)(v114 + 8);
        if (*(unsigned __int8 *)(v114 + 96) == 255)
        {
          long long v122 = *(_OWORD *)(v114 + 24);
          *uint64_t v115 = *v116;
          *(_OWORD *)(v113 + 24) = v122;
          long long v123 = *(_OWORD *)(v114 + 40);
          long long v124 = *(_OWORD *)(v114 + 56);
          long long v125 = *(_OWORD *)(v114 + 72);
          *(_OWORD *)(v113 + 81) = *(_OWORD *)(v114 + 81);
          *(_OWORD *)(v113 + 56) = v124;
          *(_OWORD *)(v113 + 72) = v125;
          *(_OWORD *)(v113 + 40) = v123;
        }
        else
        {
          *uint64_t v115 = *v116;
          long long v117 = *(_OWORD *)(v114 + 24);
          long long v118 = *(_OWORD *)(v114 + 40);
          long long v119 = *(_OWORD *)(v114 + 72);
          *(_OWORD *)(v113 + 56) = *(_OWORD *)(v114 + 56);
          *(_OWORD *)(v113 + 72) = v119;
          *(_OWORD *)(v113 + 24) = v117;
          *(_OWORD *)(v113 + 40) = v118;
          uint64_t v120 = *(void *)(v114 + 88);
          char v121 = *(unsigned char *)(v114 + 96);
          sub_21F829E74(v120, v121);
          *(void *)(v113 + 88) = v120;
          *(unsigned char *)(v113 + 96) = v121;
        }
        uint64_t v126 = *(void *)(v114 + 104);
        char v127 = *(unsigned char *)(v114 + 112);
        sub_21F829E74(v126, v127);
        *(void *)(v113 + 104) = v126;
        *(unsigned char *)(v113 + 112) = v127;
        *(unsigned char *)(v32 + v178) = 6;
        break;
      case 7u:
        uint64_t v179 = v28;
        uint64_t v183 = ~v10;
        uint64_t v156 = ~v6;
        unint64_t v160 = v18;
        unint64_t v164 = ~(unint64_t)v13;
        uint64_t v168 = v19;
        uint64_t v69 = v10 + 8;
        uint64_t v172 = *(void *)(v11 - 8);
        uint64_t v176 = v11;
        uint64_t v70 = *a2;
        uint64_t v71 = a2[1];
        char v72 = *((unsigned char *)a2 + 16);
        uint64_t v73 = ~(v14 | 7);
        sub_21F7652C0(*a2, v71, v72);
        *(void *)unint64_t v32 = v70;
        *(void *)(v32 + 8) = v71;
        *(unsigned char *)(v32 + 16) = v72;
        *(void *)(v32 + 24) = a2[3];
        long long v74 = (void *)((v32 + v15 + 32) & v73);
        long long v75 = (unsigned __int8 *)(((unint64_t)a2 + v15 + 32) & v73);
        unint64_t v76 = v21;
        unsigned int v77 = v75[v21];
        swift_bridgeObjectRetain();
        if (v77 >= 5)
        {
          if (v21 <= 3) {
            uint64_t v78 = v21;
          }
          else {
            uint64_t v78 = 4;
          }
          switch(v78)
          {
            case 1:
              int v79 = *v75;
              goto LABEL_110;
            case 2:
              int v79 = *(unsigned __int16 *)v75;
              goto LABEL_110;
            case 3:
              int v79 = *(unsigned __int16 *)v75 | (v75[2] << 16);
              goto LABEL_110;
            case 4:
              int v79 = *(_DWORD *)v75;
LABEL_110:
              int v128 = (v79 | ((v77 - 5) << (8 * v21))) + 5;
              unsigned int v129 = v79 + 5;
              if (v21 >= 4) {
                unsigned int v77 = v129;
              }
              else {
                unsigned int v77 = v128;
              }
              break;
            default:
              break;
          }
        }
        switch(v77)
        {
          case 1u:
            uint64_t v130 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v187 + 16);
            v130(v74, v75, v186);
            v130((void *)(((unint64_t)v74 + v160) & v156), (unsigned __int8 *)((unint64_t)&v75[v160] & v156), v186);
            char v131 = 1;
            goto LABEL_119;
          case 2u:
            *long long v74 = *(void *)v75;
            *((unsigned char *)v74 + v21) = 2;
            swift_retain();
            break;
          case 3u:
            *long long v74 = *(void *)v75;
            v74[1] = *((void *)v75 + 1);
            *((unsigned char *)v74 + v21) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *long long v74 = *(void *)v75;
            unint64_t v132 = ((unint64_t)v74 + v69) & v183;
            unint64_t v133 = (unint64_t)&v75[v69] & v183;
            uint64_t v134 = *(void (**)(unint64_t, unint64_t, uint64_t))(v184 + 16);
            swift_retain();
            v134(v132, v133, v185);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v172 + 16))((v168 + v132) & v164, (v168 + v133) & v164, v176);
            char v131 = 4;
LABEL_119:
            *((unsigned char *)v74 + v76) = v131;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v187 + 16))(v74, v75, v186);
            *((unsigned char *)v74 + v21) = 0;
            break;
        }
        unint64_t v135 = (v32 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v136 = ((unint64_t)a2 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
        *(unsigned char *)unint64_t v135 = *(unsigned char *)v136;
        *(unsigned char *)(v135 + 1) = *(unsigned char *)(v136 + 1);
        *(unsigned char *)(v135 + 2) = *(unsigned char *)(v136 + 2);
        uint64_t v137 = *(void *)(v136 + 8);
        uint64_t v138 = *(void *)(v136 + 16);
        char v139 = *(unsigned char *)(v136 + 24);
        sub_21F770E44(v137, v138, v139);
        *(void *)(v135 + 8) = v137;
        *(void *)(v135 + 16) = v138;
        *(unsigned char *)(v135 + 24) = v139;
        unsigned int v140 = *(unsigned __int8 *)(v136 + 48);
        if (v140 <= 0xFB)
        {
          uint64_t v142 = *(void *)(v136 + 32);
          uint64_t v143 = *(void *)(v136 + 40);
          sub_21F770E44(v142, v143, *(unsigned char *)(v136 + 48));
          *(void *)(v135 + 32) = v142;
          *(void *)(v135 + 40) = v143;
          *(unsigned char *)(v135 + 48) = v140;
        }
        else
        {
          long long v141 = *(_OWORD *)(v136 + 32);
          *(unsigned char *)(v135 + 48) = *(unsigned char *)(v136 + 48);
          *(_OWORD *)(v135 + 32) = v141;
        }
        *(unsigned char *)(v32 + v179) = 7;
        break;
      default:
        *(void *)a1 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        *(unsigned char *)(a1 + v28) = 0;
        break;
    }
  }
  else
  {
    uint64_t v33 = *a2;
    *(void *)a1 = *a2;
    unint64_t v32 = v33 + ((v14 + 16) & ~(v14 | 7));
LABEL_26:
    swift_retain();
  }
  return v32;
}

uint64_t sub_21F9C4C88(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v102 = *(void *)(a2 + 24);
  uint64_t v3 = *(void *)(v102 - 8);
  uint64_t v103 = v3;
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = sub_21FA24310();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v99 = v6;
  uint64_t v100 = v5;
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t result = sub_21FA24320();
  uint64_t v9 = *(unsigned __int8 *)(*(void *)(result - 8) + 80);
  uint64_t v10 = v7 | v9 | v4;
  uint64_t v11 = v10 | 7;
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (v10 + 32) & ~(v10 | 7);
  unint64_t v14 = *(void *)(v3 + 64);
  uint64_t v15 = v14 + v4;
  uint64_t v16 = *(void *)(v6 + 64);
  if (((v14 + v4) & ~v4) + v14 <= v14) {
    unint64_t v17 = *(void *)(v3 + 64);
  }
  else {
    unint64_t v17 = ((v14 + v4) & ~v4) + v14;
  }
  uint64_t v18 = v7 + 8;
  uint64_t v19 = v16 + v9;
  unint64_t v20 = ((v16 + v9 + ((v7 + 8) & ~v7)) & ~v9) + *(void *)(*(void *)(result - 8) + 64);
  if (v17 > v20) {
    unint64_t v20 = v17;
  }
  if (v20 <= 0x10) {
    uint64_t v21 = 16;
  }
  else {
    uint64_t v21 = v20;
  }
  uint64_t v22 = v21 + v13;
  unint64_t v23 = v21 + v13 + 1;
  unint64_t v24 = ((v23 + v11) & ~v11) + v23;
  if (v23 > v24) {
    unint64_t v24 = v22 + 1;
  }
  unint64_t v25 = (v22 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v24 <= v25 + 113) {
    unint64_t v24 = v25 + 113;
  }
  unint64_t v26 = v25 + 49;
  if (v24 > v26) {
    unint64_t v26 = v24;
  }
  if (v26 <= 0x19) {
    unint64_t v26 = 25;
  }
  unsigned int v27 = a1[v26];
  unsigned int v28 = v27 - 8;
  if (v27 >= 8)
  {
    if (v26 <= 3) {
      uint64_t v29 = v26;
    }
    else {
      uint64_t v29 = 4;
    }
    switch(v29)
    {
      case 1:
        int v30 = *a1;
        if (v26 < 4) {
          goto LABEL_27;
        }
        goto LABEL_29;
      case 2:
        int v30 = *(unsigned __int16 *)a1;
        if (v26 >= 4) {
          goto LABEL_29;
        }
        goto LABEL_27;
      case 3:
        int v30 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v26 < 4) {
          goto LABEL_27;
        }
        goto LABEL_29;
      case 4:
        int v30 = *(_DWORD *)a1;
        if (v26 < 4) {
LABEL_27:
        }
          unsigned int v27 = (v30 | (v28 << (8 * v26))) + 8;
        else {
LABEL_29:
        }
          unsigned int v27 = v30 + 8;
        break;
      default:
        break;
    }
  }
  uint64_t v31 = ~v11;
  uint64_t v32 = ~v4;
  uint64_t v33 = ~v7;
  uint64_t v34 = ~v9;
  switch(v27)
  {
    case 2u:
      goto LABEL_121;
    case 3u:
LABEL_120:
      swift_release();
LABEL_121:
      uint64_t result = swift_release();
      break;
    case 4u:
      uint64_t v35 = v32;
      uint64_t v36 = v15;
      uint64_t v93 = *(void *)(result - 8);
      uint64_t v96 = result;
      sub_21F7656A8(*(void *)a1, *((void *)a1 + 1), a1[16]);
      swift_bridgeObjectRelease();
      uint64_t v37 = (unsigned __int8 *)((unint64_t)&a1[v11 + 32] & v31);
      unsigned int v38 = v37[v21];
      unsigned int v39 = v38 - 5;
      if (v38 >= 5)
      {
        if (v21 <= 3) {
          uint64_t v40 = v21;
        }
        else {
          uint64_t v40 = 4;
        }
        switch(v40)
        {
          case 1:
            int v41 = *v37;
            goto LABEL_59;
          case 2:
            int v41 = *(unsigned __int16 *)v37;
            goto LABEL_59;
          case 3:
            int v41 = *(unsigned __int16 *)v37 | (v37[2] << 16);
            goto LABEL_59;
          case 4:
            int v41 = *(_DWORD *)v37;
LABEL_59:
            int v59 = (v41 | (v39 << (8 * v21))) + 5;
            unsigned int v38 = v41 + 5;
            if (v21 < 4) {
              unsigned int v38 = v59;
            }
            break;
          default:
            break;
        }
      }
      switch(v38)
      {
        case 1u:
          uint64_t v60 = v102;
          unsigned int v101 = *(void (**)(unsigned __int8 *, uint64_t))(v103 + 8);
          v101(v37, v102);
          char v61 = (unsigned __int8 *)((unint64_t)&v37[v36] & v35);
          goto LABEL_125;
        case 2u:
          goto LABEL_121;
        case 3u:
          goto LABEL_120;
        case 4u:
          swift_release();
          (*(void (**)(unint64_t, uint64_t))(v99 + 8))((unint64_t)&v37[v18] & v33, v100);
          char v61 = (unsigned __int8 *)((v19 + ((unint64_t)&v37[v18] & v33)) & v34);
          goto LABEL_127;
        default:
          goto LABEL_119;
      }
    case 5u:
      uint64_t v86 = v15;
      uint64_t v87 = v32;
      uint64_t v90 = v16 + v9;
      uint64_t v93 = *(void *)(result - 8);
      uint64_t v96 = result;
      sub_21F7656A8(*(void *)a1, *((void *)a1 + 1), a1[16]);
      swift_bridgeObjectRelease();
      char v42 = (unsigned __int8 *)((unint64_t)&a1[v11 + 32] & v31);
      unsigned int v43 = v42[v21];
      unsigned int v44 = v43 - 5;
      if (v43 >= 5)
      {
        if (v21 <= 3) {
          uint64_t v45 = v21;
        }
        else {
          uint64_t v45 = 4;
        }
        switch(v45)
        {
          case 1:
            int v46 = *v42;
            goto LABEL_67;
          case 2:
            int v46 = *(unsigned __int16 *)v42;
            goto LABEL_67;
          case 3:
            int v46 = *(unsigned __int16 *)v42 | (*(unsigned __int8 *)(((unint64_t)&a1[v11 + 32] & v31) + 2) << 16);
            goto LABEL_67;
          case 4:
            int v46 = *(_DWORD *)v42;
LABEL_67:
            int v62 = (v46 | (v44 << (8 * v21))) + 5;
            unsigned int v43 = v46 + 5;
            if (v21 < 4) {
              unsigned int v43 = v62;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v85 = v34;
      switch(v43)
      {
        case 1u:
          unint64_t v84 = *(void (**)(unint64_t, uint64_t))(v103 + 8);
          v84((unint64_t)&a1[v11 + 32] & v31, v102);
          v84((unint64_t)&v42[v86] & v87, v102);
          break;
        case 2u:
          swift_release();
          break;
        case 3u:
          swift_release();
          swift_release();
          break;
        case 4u:
          swift_release();
          unint64_t v63 = (unint64_t)&v42[v18] & v33;
          (*(void (**)(unint64_t, uint64_t))(v99 + 8))(v63, v100);
          (*(void (**)(unint64_t, uint64_t))(v93 + 8))((v90 + v63) & v34, v96);
          break;
        default:
          (*(void (**)(unint64_t, uint64_t))(v103 + 8))((unint64_t)&a1[v11 + 32] & v31, v102);
          break;
      }
      unint64_t v64 = (unint64_t)&a1[v11 + v23] & v31;
      sub_21F7656A8(*(void *)v64, *(void *)(v64 + 8), *(unsigned char *)(v64 + 0x10));
      swift_bridgeObjectRelease();
      uint64_t v37 = (unsigned __int8 *)((v12 + v64) & v31);
      unsigned int v65 = v37[v21];
      unsigned int v66 = v65 - 5;
      if (v65 >= 5)
      {
        if (v21 <= 3) {
          uint64_t v67 = v21;
        }
        else {
          uint64_t v67 = 4;
        }
        switch(v67)
        {
          case 1:
            int v68 = *v37;
            goto LABEL_116;
          case 2:
            int v68 = *(unsigned __int16 *)v37;
            goto LABEL_116;
          case 3:
            int v68 = *(unsigned __int16 *)v37 | (*(unsigned __int8 *)(((v12 + v64) & v31) + 2) << 16);
            goto LABEL_116;
          case 4:
            int v68 = *(_DWORD *)v37;
LABEL_116:
            int v81 = (v68 | (v66 << (8 * v21))) + 5;
            unsigned int v65 = v68 + 5;
            if (v21 < 4) {
              unsigned int v65 = v81;
            }
            break;
          default:
            break;
        }
      }
      switch(v65)
      {
        case 1u:
          uint64_t v60 = v102;
          unsigned int v101 = *(void (**)(unsigned __int8 *, uint64_t))(v103 + 8);
          v101(v37, v102);
          char v61 = (unsigned __int8 *)((unint64_t)&v37[v86] & v87);
LABEL_125:
          uint64_t v82 = v60;
          char v83 = (uint64_t (*)(unsigned __int8 *, uint64_t))v101;
          break;
        case 2u:
          goto LABEL_121;
        case 3u:
          goto LABEL_120;
        case 4u:
          swift_release();
          (*(void (**)(unint64_t, uint64_t))(v99 + 8))((unint64_t)&v37[v18] & v33, v100);
          char v61 = (unsigned __int8 *)((v90 + ((unint64_t)&v37[v18] & v33)) & v85);
LABEL_127:
          uint64_t v82 = v96;
          char v83 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v93 + 8);
          break;
        default:
LABEL_119:
          uint64_t v82 = v102;
          char v83 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v103 + 8);
          char v61 = v37;
          break;
      }
      uint64_t result = v83(v61, v82);
      break;
    case 6u:
      uint64_t v88 = v32;
      uint64_t v91 = v16 + v9;
      uint64_t v47 = v15;
      uint64_t v94 = *(void *)(result - 8);
      uint64_t v97 = result;
      sub_21F7656A8(*(void *)a1, *((void *)a1 + 1), a1[16]);
      swift_bridgeObjectRelease();
      uint64_t v48 = (unsigned __int8 *)((unint64_t)&a1[v11 + 32] & v31);
      unsigned int v49 = v48[v21];
      unsigned int v50 = v49 - 5;
      if (v49 >= 5)
      {
        if (v21 <= 3) {
          uint64_t v51 = v21;
        }
        else {
          uint64_t v51 = 4;
        }
        switch(v51)
        {
          case 1:
            int v52 = *v48;
            goto LABEL_84;
          case 2:
            int v52 = *(unsigned __int16 *)v48;
            goto LABEL_84;
          case 3:
            int v52 = *(unsigned __int16 *)v48 | (*(unsigned __int8 *)(((unint64_t)&a1[v11 + 32] & v31) + 2) << 16);
            goto LABEL_84;
          case 4:
            int v52 = *(_DWORD *)v48;
LABEL_84:
            int v69 = (v52 | (v50 << (8 * v21))) + 5;
            unsigned int v49 = v52 + 5;
            if (v21 < 4) {
              unsigned int v49 = v69;
            }
            break;
          default:
            break;
        }
      }
      switch(v49)
      {
        case 1u:
          uint64_t v70 = *(void (**)(unint64_t, uint64_t))(v103 + 8);
          v70((unint64_t)&a1[v11 + 32] & v31, v102);
          v70((unint64_t)&v48[v47] & v88, v102);
          break;
        case 2u:
          swift_release();
          break;
        case 3u:
          swift_release();
          swift_release();
          break;
        case 4u:
          swift_release();
          (*(void (**)(unint64_t, uint64_t))(v99 + 8))((unint64_t)&v48[v18] & v33, v100);
          (*(void (**)(unint64_t, uint64_t))(v94 + 8))((v91 + ((unint64_t)&v48[v18] & v33)) & v34, v97);
          break;
        default:
          (*(void (**)(unint64_t, uint64_t))(v103 + 8))((unint64_t)&a1[v11 + 32] & v31, v102);
          break;
      }
      unint64_t v71 = (unint64_t)&a1[v23 + 7] & 0xFFFFFFFFFFFFFFF8;
      int v72 = *(unsigned __int8 *)(v71 + 96);
      if (v72 != 255) {
        sub_21F82B5F8(*(void *)(v71 + 88), v72 & 1);
      }
      uint64_t v73 = *(void *)(v71 + 104);
      char v74 = *(unsigned char *)(v71 + 112);
      uint64_t result = sub_21F82B5F8(v73, v74);
      break;
    case 7u:
      uint64_t v89 = v32;
      uint64_t v92 = v16 + v9;
      uint64_t v53 = v15;
      uint64_t v95 = *(void *)(result - 8);
      uint64_t v98 = result;
      sub_21F7656A8(*(void *)a1, *((void *)a1 + 1), a1[16]);
      swift_bridgeObjectRelease();
      unsigned int v54 = (unsigned __int8 *)((unint64_t)&a1[v11 + 32] & v31);
      unsigned int v55 = v54[v21];
      unsigned int v56 = v55 - 5;
      if (v55 >= 5)
      {
        if (v21 <= 3) {
          uint64_t v57 = v21;
        }
        else {
          uint64_t v57 = 4;
        }
        switch(v57)
        {
          case 1:
            int v58 = *v54;
            goto LABEL_101;
          case 2:
            int v58 = *(unsigned __int16 *)v54;
            goto LABEL_101;
          case 3:
            int v58 = *(unsigned __int16 *)v54 | (*(unsigned __int8 *)(((unint64_t)&a1[v11 + 32] & v31) + 2) << 16);
            goto LABEL_101;
          case 4:
            int v58 = *(_DWORD *)v54;
LABEL_101:
            int v75 = (v58 | (v56 << (8 * v21))) + 5;
            unsigned int v55 = v58 + 5;
            if (v21 < 4) {
              unsigned int v55 = v75;
            }
            break;
          default:
            break;
        }
      }
      switch(v55)
      {
        case 1u:
          unint64_t v76 = *(void (**)(unint64_t, uint64_t))(v103 + 8);
          v76((unint64_t)&a1[v11 + 32] & v31, v102);
          v76((unint64_t)&v54[v53] & v89, v102);
          break;
        case 2u:
          swift_release();
          break;
        case 3u:
          swift_release();
          swift_release();
          break;
        case 4u:
          swift_release();
          (*(void (**)(unint64_t, uint64_t))(v99 + 8))((unint64_t)&v54[v18] & v33, v100);
          (*(void (**)(unint64_t, uint64_t))(v95 + 8))((v92 + ((unint64_t)&v54[v18] & v33)) & v34, v98);
          break;
        default:
          (*(void (**)(unint64_t, uint64_t))(v103 + 8))((unint64_t)&a1[v11 + 32] & v31, v102);
          break;
      }
      unint64_t v77 = (unint64_t)&a1[v23 + 7] & 0xFFFFFFFFFFFFFFF8;
      uint64_t result = sub_21F770E38(*(void *)(v77 + 8), *(void *)(v77 + 16), *(unsigned char *)(v77 + 24));
      unsigned int v78 = *(unsigned __int8 *)(v77 + 48);
      if (v78 <= 0xFB)
      {
        uint64_t v79 = *(void *)(v77 + 32);
        uint64_t v80 = *(void *)(v77 + 40);
        uint64_t result = sub_21F770E38(v79, v80, v78);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_21F9C5880(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v179 = *(void *)(a3 + 24);
  uint64_t v4 = *(void *)(v179 - 8);
  uint64_t v180 = v4;
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = sub_21FA24310();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v177 = v7;
  uint64_t v178 = v6;
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = sub_21FA24320();
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v9 - 8) + 80);
  uint64_t v11 = v8 | v10 | v5;
  uint64_t v12 = v11 | 7;
  uint64_t v13 = v11 + 32;
  uint64_t v14 = (v11 + 32) & ~(v11 | 7);
  unint64_t v15 = *(void *)(v4 + 64);
  uint64_t v16 = v15 + v5;
  if (((v15 + v5) & ~v5) + v15 > v15) {
    v15 += (v15 + v5) & ~v5;
  }
  unint64_t v17 = ((*(void *)(v7 + 64) + v10 + ((v8 + 8) & ~v8)) & ~v10) + *(void *)(*(void *)(v9 - 8) + 64);
  if (v15 > v17) {
    unint64_t v17 = v15;
  }
  if (v17 <= 0x10) {
    unint64_t v17 = 16;
  }
  unint64_t v18 = v17;
  unint64_t v19 = v17 + v14;
  unint64_t v20 = v19 + 1;
  uint64_t v21 = v19 + 1 + v12;
  unint64_t v22 = (v21 & ~v12) + v19 + 1;
  if (v19 + 1 > v22) {
    unint64_t v22 = v19 + 1;
  }
  unint64_t v23 = (v19 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v22 <= v23 + 113) {
    unint64_t v22 = v23 + 113;
  }
  unint64_t v24 = v23 + 49;
  if (v22 > v24) {
    unint64_t v24 = v22;
  }
  if (v24 <= 0x19) {
    uint64_t v25 = 25;
  }
  else {
    uint64_t v25 = v24;
  }
  unsigned int v26 = a2[v25];
  unsigned int v27 = v26 - 8;
  if (v26 >= 8)
  {
    if (v25 <= 3) {
      uint64_t v28 = v25;
    }
    else {
      uint64_t v28 = 4;
    }
    switch(v28)
    {
      case 1:
        int v29 = *a2;
        if (v25 < 4) {
          goto LABEL_24;
        }
        goto LABEL_28;
      case 2:
        int v29 = *(unsigned __int16 *)a2;
        if (v25 < 4) {
          goto LABEL_24;
        }
        goto LABEL_28;
      case 3:
        int v29 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v25 < 4) {
          goto LABEL_24;
        }
        goto LABEL_28;
      case 4:
        int v29 = *(_DWORD *)a2;
        if (v25 < 4) {
LABEL_24:
        }
          unsigned int v26 = (v29 | (v27 << (8 * v25))) + 8;
        else {
LABEL_28:
        }
          unsigned int v26 = v29 + 8;
        break;
      default:
        break;
    }
  }
  uint64_t v30 = ~v12;
  switch(v26)
  {
    case 1u:
      uint64_t v31 = a1;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
      *(unsigned char *)(a1 + v25) = 1;
      break;
    case 2u:
      uint64_t v31 = a1;
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + v25) = 2;
      swift_retain();
      break;
    case 3u:
      uint64_t v32 = *((void *)a2 + 1);
      uint64_t v31 = a1;
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v32;
      *(unsigned char *)(a1 + v25) = 3;
      swift_retain();
      swift_retain();
      break;
    case 4u:
      uint64_t v33 = ~v8;
      uint64_t v150 = ~v5;
      uint64_t v154 = v16;
      uint64_t v158 = ~v10;
      uint64_t v162 = *(void *)(v7 + 64) + v10;
      uint64_t v34 = v8 + 8;
      uint64_t v166 = *(void *)(v9 - 8);
      uint64_t v170 = v9;
      uint64_t v174 = v25;
      uint64_t v35 = *(void *)a2;
      uint64_t v36 = *((void *)a2 + 1);
      char v37 = a2[16];
      sub_21F7652C0(*(void *)a2, v36, v37);
      *(void *)a1 = v35;
      *(void *)(a1 + 8) = v36;
      *(unsigned char *)(a1 + 16) = v37;
      uint64_t v31 = a1;
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      unsigned int v38 = &a2[v12];
      unsigned int v39 = (void *)((a1 + v12 + 32) & v30);
      uint64_t v40 = (unsigned __int8 *)((unint64_t)(v38 + 32) & v30);
      unsigned int v41 = v40[v18];
      swift_bridgeObjectRetain();
      if (v41 >= 5)
      {
        if (v18 <= 3) {
          uint64_t v42 = v18;
        }
        else {
          uint64_t v42 = 4;
        }
        switch(v42)
        {
          case 1:
            int v43 = *v40;
            goto LABEL_61;
          case 2:
            int v43 = *(unsigned __int16 *)v40;
            goto LABEL_61;
          case 3:
            int v43 = *(unsigned __int16 *)v40 | (v40[2] << 16);
            goto LABEL_61;
          case 4:
            int v43 = *(_DWORD *)v40;
LABEL_61:
            int v70 = (v43 | ((v41 - 5) << (8 * v18))) + 5;
            unsigned int v71 = v43 + 5;
            if (v18 >= 4) {
              unsigned int v41 = v71;
            }
            else {
              unsigned int v41 = v70;
            }
            break;
          default:
            break;
        }
      }
      switch(v41)
      {
        case 1u:
          int v72 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v180 + 16);
          v72(v39, v40, v179);
          v72((void *)(((unint64_t)v39 + v154) & v150), (unsigned __int8 *)((unint64_t)&v40[v154] & v150), v179);
          char v73 = 1;
          goto LABEL_70;
        case 2u:
          void *v39 = *(void *)v40;
          *((unsigned char *)v39 + v18) = 2;
          swift_retain();
          break;
        case 3u:
          void *v39 = *(void *)v40;
          *(void *)(((a1 + v12 + 32) & v30) + 8) = *((void *)v40 + 1);
          *((unsigned char *)v39 + v18) = 3;
          swift_retain();
          swift_retain();
          break;
        case 4u:
          void *v39 = *(void *)v40;
          uint64_t v74 = v34;
          unint64_t v75 = ((unint64_t)v39 + v34) & v33;
          unint64_t v76 = (unint64_t)&v40[v74] & v33;
          unint64_t v77 = *(void (**)(unint64_t, unint64_t, uint64_t))(v177 + 16);
          swift_retain();
          v77(v75, v76, v178);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v166 + 16))((v162 + v75) & v158, (v162 + v76) & v158, v170);
          char v73 = 4;
LABEL_70:
          *((unsigned char *)v39 + v18) = v73;
          break;
        default:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v180 + 16))(v39, v40, v179);
          *((unsigned char *)v39 + v18) = 0;
          break;
      }
      char v78 = 4;
      goto LABEL_140;
    case 5u:
      uint64_t v146 = v13;
      uint64_t v147 = ~v8;
      uint64_t v151 = ~v5;
      uint64_t v155 = v16;
      uint64_t v159 = ~v10;
      uint64_t v163 = *(void *)(v7 + 64) + v10;
      uint64_t v145 = v8 + 8;
      uint64_t v167 = *(void *)(v9 - 8);
      uint64_t v171 = v9;
      uint64_t v174 = v25;
      uint64_t v44 = *(void *)a2;
      uint64_t v45 = *((void *)a2 + 1);
      char v46 = a2[16];
      sub_21F7652C0(*(void *)a2, v45, v46);
      *(void *)a1 = v44;
      *(void *)(a1 + 8) = v45;
      *(unsigned char *)(a1 + 16) = v46;
      uint64_t v31 = a1;
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      uint64_t v47 = (void *)((a1 + v12 + 32) & v30);
      uint64_t v48 = (unsigned __int8 *)((unint64_t)&a2[v12 + 32] & v30);
      unsigned int v49 = v48[v18];
      swift_bridgeObjectRetain();
      if (v49 >= 5)
      {
        if (v18 <= 3) {
          uint64_t v50 = v18;
        }
        else {
          uint64_t v50 = 4;
        }
        switch(v50)
        {
          case 1:
            int v51 = *v48;
            goto LABEL_75;
          case 2:
            int v51 = *(unsigned __int16 *)v48;
            goto LABEL_75;
          case 3:
            int v51 = *(unsigned __int16 *)((unint64_t)&a2[v12 + 32] & v30) | (*(unsigned __int8 *)(((unint64_t)&a2[v12 + 32] & v30) + 2) << 16);
            goto LABEL_75;
          case 4:
            int v51 = *(_DWORD *)v48;
LABEL_75:
            int v79 = (v51 | ((v49 - 5) << (8 * v18))) + 5;
            unsigned int v80 = v51 + 5;
            if (v18 >= 4) {
              unsigned int v49 = v80;
            }
            else {
              unsigned int v49 = v79;
            }
            break;
          default:
            break;
        }
      }
      switch(v49)
      {
        case 1u:
          int v81 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v180 + 16);
          v81(v47, v48, v179);
          v81((void *)(((unint64_t)v47 + v155) & v151), (unsigned __int8 *)((unint64_t)&v48[v155] & v151), v179);
          char v82 = 1;
          goto LABEL_84;
        case 2u:
          *uint64_t v47 = *(void *)v48;
          *((unsigned char *)v47 + v18) = 2;
          swift_retain();
          break;
        case 3u:
          *uint64_t v47 = *(void *)v48;
          *(void *)(((a1 + v12 + 32) & v30) + 8) = *(void *)(((unint64_t)&a2[v12 + 32] & v30) + 8);
          *((unsigned char *)v47 + v18) = 3;
          swift_retain();
          swift_retain();
          break;
        case 4u:
          *uint64_t v47 = *(void *)v48;
          unint64_t v83 = ((unint64_t)v47 + v145) & v147;
          unint64_t v84 = (unint64_t)&v48[v145] & v147;
          uint64_t v85 = *(void (**)(unint64_t, unint64_t, uint64_t))(v177 + 16);
          swift_retain();
          v85(v83, v84, v178);
          uint64_t v86 = v163 + v83;
          uint64_t v31 = a1;
          (*(void (**)(uint64_t, unint64_t, uint64_t))(v167 + 16))(v86 & v159, (v163 + v84) & v159, v171);
          char v82 = 4;
LABEL_84:
          *((unsigned char *)v47 + v18) = v82;
          break;
        default:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v180 + 16))(v47, v48, v179);
          *((unsigned char *)v47 + v18) = 0;
          break;
      }
      uint64_t v87 = (v21 + v31) & v30;
      unint64_t v88 = (unint64_t)&a2[v21] & v30;
      uint64_t v89 = *(void *)v88;
      uint64_t v90 = *(void *)(v88 + 8);
      char v91 = *(unsigned char *)(v88 + 16);
      sub_21F7652C0(*(void *)v88, v90, v91);
      *(void *)uint64_t v87 = v89;
      *(void *)(v87 + 8) = v90;
      *(unsigned char *)(v87 + 0x10) = v91;
      *(void *)(v87 + 0x18) = *(void *)(v88 + 24);
      uint64_t v92 = (void *)((v146 + v87) & v30);
      uint64_t v93 = (unsigned __int8 *)((v146 + v88) & v30);
      unsigned int v94 = v93[v18];
      swift_bridgeObjectRetain();
      if (v94 >= 5)
      {
        if (v18 <= 3) {
          uint64_t v95 = v18;
        }
        else {
          uint64_t v95 = 4;
        }
        switch(v95)
        {
          case 1:
            int v96 = *v93;
            goto LABEL_128;
          case 2:
            int v96 = *(unsigned __int16 *)v93;
            goto LABEL_128;
          case 3:
            int v96 = *(unsigned __int16 *)((v146 + v88) & v30) | (*(unsigned __int8 *)(((v146 + v88) & v30) + 2) << 16);
            goto LABEL_128;
          case 4:
            int v96 = *(_DWORD *)v93;
LABEL_128:
            int v137 = (v96 | ((v94 - 5) << (8 * v18))) + 5;
            unsigned int v138 = v96 + 5;
            if (v18 >= 4) {
              unsigned int v94 = v138;
            }
            else {
              unsigned int v94 = v137;
            }
            break;
          default:
            break;
        }
      }
      switch(v94)
      {
        case 1u:
          char v139 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v180 + 16);
          v139(v92, v93, v179);
          v139((void *)(((unint64_t)v92 + v155) & v151), (unsigned __int8 *)((unint64_t)&v93[v155] & v151), v179);
          char v140 = 1;
          goto LABEL_138;
        case 2u:
          *uint64_t v92 = *(void *)v93;
          *((unsigned char *)v92 + v18) = 2;
          goto LABEL_136;
        case 3u:
          *uint64_t v92 = *(void *)v93;
          v92[1] = *(void *)(((v146 + v88) & v30) + 8);
          *((unsigned char *)v92 + v18) = 3;
          swift_retain();
LABEL_136:
          swift_retain();
          break;
        case 4u:
          *uint64_t v92 = *(void *)v93;
          unint64_t v141 = ((unint64_t)v92 + v145) & v147;
          unint64_t v142 = (unint64_t)&v93[v145] & v147;
          uint64_t v143 = *(void (**)(unint64_t, unint64_t, uint64_t))(v177 + 16);
          swift_retain();
          v143(v141, v142, v178);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v167 + 16))((v163 + v141) & v159, (v163 + v142) & v159, v171);
          char v140 = 4;
LABEL_138:
          *((unsigned char *)v92 + v18) = v140;
          break;
        default:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v180 + 16))(v92, v93, v179);
          *((unsigned char *)v92 + v18) = 0;
          break;
      }
      char v78 = 5;
LABEL_140:
      *(unsigned char *)(v31 + v174) = v78;
      break;
    case 6u:
      uint64_t v148 = ~v8;
      uint64_t v152 = ~v5;
      uint64_t v156 = v16;
      uint64_t v160 = ~v10;
      uint64_t v52 = v8 + 8;
      uint64_t v164 = *(void *)(v7 + 64) + v10;
      uint64_t v168 = *(void *)(v9 - 8);
      uint64_t v172 = v9;
      uint64_t v175 = v25;
      uint64_t v53 = *(void *)a2;
      uint64_t v54 = *((void *)a2 + 1);
      char v55 = a2[16];
      sub_21F7652C0(*(void *)a2, v54, v55);
      *(void *)a1 = v53;
      *(void *)(a1 + 8) = v54;
      *(unsigned char *)(a1 + 16) = v55;
      uint64_t v31 = a1;
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      unsigned int v56 = (void *)((a1 + v12 + 32) & v30);
      uint64_t v57 = (unsigned __int8 *)((unint64_t)&a2[v12 + 32] & v30);
      unsigned int v58 = v57[v18];
      swift_bridgeObjectRetain();
      if (v58 >= 5)
      {
        if (v18 <= 3) {
          uint64_t v59 = v18;
        }
        else {
          uint64_t v59 = 4;
        }
        switch(v59)
        {
          case 1:
            int v60 = *v57;
            goto LABEL_94;
          case 2:
            int v60 = *(unsigned __int16 *)v57;
            goto LABEL_94;
          case 3:
            int v60 = *(unsigned __int16 *)((unint64_t)&a2[v12 + 32] & v30) | (*(unsigned __int8 *)(((unint64_t)&a2[v12 + 32] & v30) + 2) << 16);
            goto LABEL_94;
          case 4:
            int v60 = *(_DWORD *)v57;
LABEL_94:
            int v97 = (v60 | ((v58 - 5) << (8 * v18))) + 5;
            unsigned int v98 = v60 + 5;
            if (v18 >= 4) {
              unsigned int v58 = v98;
            }
            else {
              unsigned int v58 = v97;
            }
            break;
          default:
            break;
        }
      }
      switch(v58)
      {
        case 1u:
          uint64_t v104 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v180 + 16);
          v104(v56, v57, v179);
          v104((void *)(((unint64_t)v56 + v156) & v152), (unsigned __int8 *)((unint64_t)&v57[v156] & v152), v179);
          char v103 = 1;
          goto LABEL_103;
        case 2u:
          *unsigned int v56 = *(void *)v57;
          *((unsigned char *)v56 + v18) = 2;
          swift_retain();
          break;
        case 3u:
          *unsigned int v56 = *(void *)v57;
          *(void *)(((a1 + v12 + 32) & v30) + 8) = *(void *)(((unint64_t)&a2[v12 + 32] & v30) + 8);
          *((unsigned char *)v56 + v18) = 3;
          swift_retain();
          swift_retain();
          break;
        case 4u:
          *unsigned int v56 = *(void *)v57;
          uint64_t v99 = v52;
          unint64_t v100 = ((unint64_t)v56 + v52) & v148;
          unint64_t v101 = (unint64_t)&v57[v99] & v148;
          uint64_t v102 = *(void (**)(unint64_t, unint64_t, uint64_t))(v177 + 16);
          swift_retain();
          v102(v100, v101, v178);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v168 + 16))((v164 + v100) & v160, (v164 + v101) & v160, v172);
          char v103 = 4;
LABEL_103:
          *((unsigned char *)v56 + v18) = v103;
          break;
        default:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v180 + 16))(v56, v57, v179);
          *((unsigned char *)v56 + v18) = 0;
          break;
      }
      unint64_t v105 = (a1 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v106 = (unint64_t)&a2[v20 + 7] & 0xFFFFFFFFFFFFFFF8;
      *(unsigned char *)unint64_t v105 = *(unsigned char *)v106;
      unsigned int v107 = (_OWORD *)(v105 + 8);
      long long v108 = (_OWORD *)(v106 + 8);
      if (*(unsigned __int8 *)(v106 + 96) == 255)
      {
        long long v114 = *(_OWORD *)(v106 + 24);
        *unsigned int v107 = *v108;
        *(_OWORD *)(v105 + 24) = v114;
        long long v115 = *(_OWORD *)(v106 + 40);
        long long v116 = *(_OWORD *)(v106 + 56);
        long long v117 = *(_OWORD *)(v106 + 72);
        *(_OWORD *)(v105 + 81) = *(_OWORD *)(v106 + 81);
        *(_OWORD *)(v105 + 56) = v116;
        *(_OWORD *)(v105 + 72) = v117;
        *(_OWORD *)(v105 + 40) = v115;
      }
      else
      {
        *unsigned int v107 = *v108;
        long long v109 = *(_OWORD *)(v106 + 24);
        long long v110 = *(_OWORD *)(v106 + 40);
        long long v111 = *(_OWORD *)(v106 + 72);
        *(_OWORD *)(v105 + 56) = *(_OWORD *)(v106 + 56);
        *(_OWORD *)(v105 + 72) = v111;
        *(_OWORD *)(v105 + 24) = v109;
        *(_OWORD *)(v105 + 40) = v110;
        uint64_t v112 = *(void *)(v106 + 88);
        char v113 = *(unsigned char *)(v106 + 96);
        sub_21F829E74(v112, v113);
        *(void *)(v105 + 88) = v112;
        *(unsigned char *)(v105 + 96) = v113;
      }
      uint64_t v118 = *(void *)(v106 + 104);
      char v119 = *(unsigned char *)(v106 + 112);
      sub_21F829E74(v118, v119);
      *(void *)(v105 + 104) = v118;
      *(unsigned char *)(v105 + 112) = v119;
      *(unsigned char *)(a1 + v175) = 6;
      break;
    case 7u:
      uint64_t v149 = ~v8;
      uint64_t v153 = ~v5;
      uint64_t v157 = v16;
      uint64_t v161 = ~v10;
      uint64_t v61 = v8 + 8;
      uint64_t v165 = *(void *)(v7 + 64) + v10;
      uint64_t v169 = *(void *)(v9 - 8);
      uint64_t v173 = v9;
      uint64_t v176 = v25;
      uint64_t v62 = *(void *)a2;
      uint64_t v63 = *((void *)a2 + 1);
      char v64 = a2[16];
      sub_21F7652C0(*(void *)a2, v63, v64);
      *(void *)a1 = v62;
      *(void *)(a1 + 8) = v63;
      *(unsigned char *)(a1 + 16) = v64;
      uint64_t v31 = a1;
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      unsigned int v65 = (void *)((a1 + v12 + 32) & v30);
      unsigned int v66 = (unsigned __int8 *)((unint64_t)&a2[v12 + 32] & v30);
      unsigned int v67 = v66[v18];
      swift_bridgeObjectRetain();
      if (v67 >= 5)
      {
        if (v18 <= 3) {
          uint64_t v68 = v18;
        }
        else {
          uint64_t v68 = 4;
        }
        switch(v68)
        {
          case 1:
            int v69 = *v66;
            goto LABEL_111;
          case 2:
            int v69 = *(unsigned __int16 *)v66;
            goto LABEL_111;
          case 3:
            int v69 = *(unsigned __int16 *)((unint64_t)&a2[v12 + 32] & v30) | (*(unsigned __int8 *)(((unint64_t)&a2[v12 + 32] & v30) + 2) << 16);
            goto LABEL_111;
          case 4:
            int v69 = *(_DWORD *)v66;
LABEL_111:
            int v120 = (v69 | ((v67 - 5) << (8 * v18))) + 5;
            unsigned int v121 = v69 + 5;
            if (v18 >= 4) {
              unsigned int v67 = v121;
            }
            else {
              unsigned int v67 = v120;
            }
            break;
          default:
            break;
        }
      }
      switch(v67)
      {
        case 1u:
          long long v122 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v180 + 16);
          v122(v65, v66, v179);
          v122((void *)(((unint64_t)v65 + v157) & v153), (unsigned __int8 *)((unint64_t)&v66[v157] & v153), v179);
          char v123 = 1;
          goto LABEL_120;
        case 2u:
          *unsigned int v65 = *(void *)v66;
          *((unsigned char *)v65 + v18) = 2;
          swift_retain();
          break;
        case 3u:
          *unsigned int v65 = *(void *)v66;
          *(void *)(((a1 + v12 + 32) & v30) + 8) = *(void *)(((unint64_t)&a2[v12 + 32] & v30) + 8);
          *((unsigned char *)v65 + v18) = 3;
          swift_retain();
          swift_retain();
          break;
        case 4u:
          *unsigned int v65 = *(void *)v66;
          uint64_t v124 = v61;
          unint64_t v125 = ((unint64_t)v65 + v61) & v149;
          unint64_t v126 = (unint64_t)&v66[v124] & v149;
          char v127 = *(void (**)(unint64_t, unint64_t, uint64_t))(v177 + 16);
          swift_retain();
          v127(v125, v126, v178);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v169 + 16))((v165 + v125) & v161, (v165 + v126) & v161, v173);
          char v123 = 4;
LABEL_120:
          *((unsigned char *)v65 + v18) = v123;
          break;
        default:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v180 + 16))(v65, v66, v179);
          *((unsigned char *)v65 + v18) = 0;
          break;
      }
      unint64_t v128 = (a1 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v129 = (unint64_t)&a2[v20 + 7] & 0xFFFFFFFFFFFFFFF8;
      *(unsigned char *)unint64_t v128 = *(unsigned char *)v129;
      *(unsigned char *)(v128 + 1) = *(unsigned char *)(v129 + 1);
      *(unsigned char *)(v128 + 2) = *(unsigned char *)(v129 + 2);
      uint64_t v130 = *(void *)(v129 + 8);
      uint64_t v131 = *(void *)(v129 + 16);
      char v132 = *(unsigned char *)(v129 + 24);
      sub_21F770E44(v130, v131, v132);
      *(void *)(v128 + 8) = v130;
      *(void *)(v128 + 16) = v131;
      *(unsigned char *)(v128 + 24) = v132;
      unsigned int v133 = *(unsigned __int8 *)(v129 + 48);
      if (v133 <= 0xFB)
      {
        uint64_t v135 = *(void *)(v129 + 32);
        uint64_t v136 = *(void *)(v129 + 40);
        sub_21F770E44(v135, v136, *(unsigned char *)(v129 + 48));
        *(void *)(v128 + 32) = v135;
        *(void *)(v128 + 40) = v136;
        *(unsigned char *)(v128 + 48) = v133;
      }
      else
      {
        long long v134 = *(_OWORD *)(v129 + 32);
        *(unsigned char *)(v128 + 48) = *(unsigned char *)(v129 + 48);
        *(_OWORD *)(v128 + 32) = v134;
      }
      *(unsigned char *)(a1 + v176) = 7;
      break;
    default:
      uint64_t v31 = a1;
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = a2[8];
      *(unsigned char *)(a1 + v25) = 0;
      break;
  }
  return v31;
}

unsigned __int8 *sub_21F9C68C8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v211 = *(void *)(a3 + 24);
    uint64_t v5 = *(void *)(v211 - 8);
    uint64_t v212 = v5;
    uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v7 = sub_21FA24310();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v207 = v8;
    uint64_t v208 = v7;
    uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v10 = sub_21FA24320();
    uint64_t v209 = *(void *)(v10 - 8);
    uint64_t v210 = v10;
    uint64_t v11 = *(unsigned __int8 *)(v209 + 80);
    uint64_t v12 = v9 | v11 | v6;
    uint64_t v13 = v12 | 7;
    uint64_t v202 = v12 + 32;
    uint64_t v14 = (v12 + 32) & ~(v12 | 7);
    unint64_t v15 = *(void *)(v5 + 64);
    uint64_t v200 = v15 + v6;
    if (((v15 + v6) & ~v6) + v15 > v15) {
      v15 += (v15 + v6) & ~v6;
    }
    uint64_t v206 = v9 + 8;
    uint64_t v16 = *(void *)(v8 + 64);
    uint64_t v17 = v16 + v11;
    unint64_t v18 = ((v16 + v11 + ((v9 + 8) & ~v9)) & ~v11) + *(void *)(*(void *)(v10 - 8) + 64);
    if (v15 > v18) {
      unint64_t v18 = v15;
    }
    if (v18 <= 0x10) {
      uint64_t v19 = 16;
    }
    else {
      uint64_t v19 = v18;
    }
    uint64_t v20 = v19 + v14;
    unint64_t v21 = v19 + v14 + 1;
    unint64_t v201 = v21 + v13;
    unint64_t v22 = ((v21 + v13) & ~v13) + v21;
    if (v21 > v22) {
      unint64_t v22 = v20 + 1;
    }
    unint64_t v23 = (v20 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v22 <= v23 + 113) {
      unint64_t v22 = v23 + 113;
    }
    unint64_t v24 = v23 + 49;
    if (v22 > v24) {
      unint64_t v24 = v22;
    }
    if (v24 <= 0x19) {
      uint64_t v25 = 25;
    }
    else {
      uint64_t v25 = v24;
    }
    unsigned int v26 = a1[v25];
    unsigned int v27 = v26 - 8;
    if (v26 >= 8)
    {
      if (v25 <= 3) {
        uint64_t v28 = v25;
      }
      else {
        uint64_t v28 = 4;
      }
      switch(v28)
      {
        case 1:
          int v29 = *a1;
          if (v25 < 4) {
            goto LABEL_26;
          }
          goto LABEL_30;
        case 2:
          int v29 = *(unsigned __int16 *)a1;
          if (v25 < 4) {
            goto LABEL_26;
          }
          goto LABEL_30;
        case 3:
          int v29 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v25 < 4) {
            goto LABEL_26;
          }
          goto LABEL_30;
        case 4:
          int v29 = *(_DWORD *)a1;
          if (v25 < 4) {
LABEL_26:
          }
            unsigned int v26 = (v29 | (v27 << (8 * v25))) + 8;
          else {
LABEL_30:
          }
            unsigned int v26 = v29 + 8;
          break;
        default:
          break;
      }
    }
    uint64_t v213 = ~v13;
    uint64_t v199 = ~v6;
    uint64_t v205 = ~v9;
    uint64_t v30 = ~v11;
    switch(v26)
    {
      case 2u:
LABEL_32:
        swift_release();
        break;
      case 3u:
LABEL_33:
        swift_release();
        swift_release();
        break;
      case 4u:
        sub_21F7656A8(*(void *)a1, *((void *)a1 + 1), a1[16]);
        swift_bridgeObjectRelease();
        uint64_t v31 = (unsigned __int8 *)((unint64_t)&a1[v13 + 32] & v213);
        unsigned int v32 = v31[v19];
        unsigned int v33 = v32 - 5;
        if (v32 >= 5)
        {
          if (v19 <= 3) {
            uint64_t v34 = v19;
          }
          else {
            uint64_t v34 = 4;
          }
          switch(v34)
          {
            case 1:
              int v35 = *v31;
              goto LABEL_61;
            case 2:
              int v35 = *(unsigned __int16 *)v31;
              goto LABEL_61;
            case 3:
              int v35 = *(unsigned __int16 *)v31 | (*(unsigned __int8 *)(((unint64_t)&a1[v13 + 32] & v213) + 2) << 16);
              goto LABEL_61;
            case 4:
              int v35 = *(_DWORD *)v31;
LABEL_61:
              int v51 = (v35 | (v33 << (8 * v19))) + 5;
              unsigned int v32 = v35 + 5;
              if (v19 < 4) {
                unsigned int v32 = v51;
              }
              break;
            default:
              break;
          }
        }
        switch(v32)
        {
          case 1u:
            goto LABEL_116;
          case 2u:
            goto LABEL_32;
          case 3u:
            goto LABEL_33;
          case 4u:
            goto LABEL_117;
          default:
            goto LABEL_115;
        }
      case 5u:
        sub_21F7656A8(*(void *)a1, *((void *)a1 + 1), a1[16]);
        swift_bridgeObjectRelease();
        uint64_t v36 = (unsigned __int8 *)((unint64_t)&a1[v13 + 32] & v213);
        unsigned int v37 = v36[v19];
        unsigned int v38 = v37 - 5;
        if (v37 >= 5)
        {
          if (v19 <= 3) {
            uint64_t v39 = v19;
          }
          else {
            uint64_t v39 = 4;
          }
          switch(v39)
          {
            case 1:
              int v40 = *v36;
              goto LABEL_67;
            case 2:
              int v40 = *(unsigned __int16 *)v36;
              goto LABEL_67;
            case 3:
              int v40 = *(unsigned __int16 *)v36 | (*(unsigned __int8 *)(((unint64_t)&a1[v13 + 32] & v213) + 2) << 16);
              goto LABEL_67;
            case 4:
              int v40 = *(_DWORD *)v36;
LABEL_67:
              int v52 = (v40 | (v38 << (8 * v19))) + 5;
              unsigned int v37 = v40 + 5;
              if (v19 < 4) {
                unsigned int v37 = v52;
              }
              break;
            default:
              break;
          }
        }
        switch(v37)
        {
          case 1u:
            uint64_t v192 = v17;
            uint64_t v53 = *(void (**)(unint64_t, uint64_t))(v212 + 8);
            v53((unint64_t)&a1[v13 + 32] & v213, v211);
            v53((unint64_t)&v36[v200] & v199, v211);
            uint64_t v17 = v192;
            break;
          case 2u:
            swift_release();
            break;
          case 3u:
            swift_release();
            swift_release();
            break;
          case 4u:
            swift_release();
            unint64_t v54 = (unint64_t)&v36[v206] & v205;
            (*(void (**)(unint64_t, uint64_t))(v207 + 8))(v54, v208);
            (*(void (**)(unint64_t, uint64_t))(v209 + 8))((v17 + v54) & v30, v210);
            break;
          default:
            (*(void (**)(unint64_t, uint64_t))(v212 + 8))((unint64_t)&a1[v13 + 32] & v213, v211);
            break;
        }
        unint64_t v55 = (unint64_t)&a1[v201] & v213;
        sub_21F7656A8(*(void *)v55, *(void *)(v55 + 8), *(unsigned char *)(v55 + 0x10));
        swift_bridgeObjectRelease();
        uint64_t v31 = (unsigned __int8 *)((v202 + v55) & v213);
        unsigned int v56 = v31[v19];
        unsigned int v57 = v56 - 5;
        if (v56 >= 5)
        {
          if (v19 <= 3) {
            uint64_t v58 = v19;
          }
          else {
            uint64_t v58 = 4;
          }
          switch(v58)
          {
            case 1:
              int v59 = *v31;
              goto LABEL_112;
            case 2:
              int v59 = *(unsigned __int16 *)v31;
              goto LABEL_112;
            case 3:
              int v59 = *(unsigned __int16 *)((v202 + v55) & v213) | (*(unsigned __int8 *)(((v202 + v55) & v213) + 2) << 16);
              goto LABEL_112;
            case 4:
              int v59 = *(_DWORD *)v31;
LABEL_112:
              int v70 = (v59 | (v57 << (8 * v19))) + 5;
              unsigned int v56 = v59 + 5;
              if (v19 < 4) {
                unsigned int v56 = v70;
              }
              break;
            default:
              break;
          }
        }
        switch(v56)
        {
          case 1u:
LABEL_116:
            uint64_t v195 = v17;
            unsigned int v71 = *(void (**)(unsigned __int8 *, uint64_t))(v212 + 8);
            v71(v31, v211);
            v71((unsigned __int8 *)((unint64_t)&v31[v200] & v199), v211);
            uint64_t v17 = v195;
            break;
          case 2u:
            goto LABEL_32;
          case 3u:
            goto LABEL_33;
          case 4u:
LABEL_117:
            swift_release();
            unint64_t v72 = (unint64_t)&v31[v206] & v205;
            (*(void (**)(unint64_t, uint64_t))(v207 + 8))(v72, v208);
            (*(void (**)(unint64_t, uint64_t))(v209 + 8))((v17 + v72) & v30, v210);
            break;
          default:
LABEL_115:
            (*(void (**)(unsigned __int8 *, uint64_t))(v212 + 8))(v31, v211);
            break;
        }
        break;
      case 6u:
        sub_21F7656A8(*(void *)a1, *((void *)a1 + 1), a1[16]);
        swift_bridgeObjectRelease();
        unsigned int v41 = (unsigned __int8 *)((unint64_t)&a1[v13 + 32] & v213);
        unsigned int v42 = v41[v19];
        unsigned int v43 = v42 - 5;
        if (v42 >= 5)
        {
          if (v19 <= 3) {
            uint64_t v44 = v19;
          }
          else {
            uint64_t v44 = 4;
          }
          switch(v44)
          {
            case 1:
              int v45 = *v41;
              goto LABEL_84;
            case 2:
              int v45 = *(unsigned __int16 *)v41;
              goto LABEL_84;
            case 3:
              int v45 = *(unsigned __int16 *)v41 | (*(unsigned __int8 *)(((unint64_t)&a1[v13 + 32] & v213) + 2) << 16);
              goto LABEL_84;
            case 4:
              int v45 = *(_DWORD *)v41;
LABEL_84:
              int v60 = (v45 | (v43 << (8 * v19))) + 5;
              unsigned int v42 = v45 + 5;
              if (v19 < 4) {
                unsigned int v42 = v60;
              }
              break;
            default:
              break;
          }
        }
        switch(v42)
        {
          case 1u:
            uint64_t v193 = v17;
            uint64_t v62 = *(void (**)(unint64_t, uint64_t))(v212 + 8);
            v62((unint64_t)&a1[v13 + 32] & v213, v211);
            v62((unint64_t)&v41[v200] & v199, v211);
            uint64_t v17 = v193;
            break;
          case 2u:
            swift_release();
            break;
          case 3u:
            swift_release();
            swift_release();
            break;
          case 4u:
            swift_release();
            unint64_t v61 = (unint64_t)&v41[v206] & v205;
            (*(void (**)(unint64_t, uint64_t))(v207 + 8))(v61, v208);
            (*(void (**)(unint64_t, uint64_t))(v209 + 8))((v17 + v61) & v30, v210);
            break;
          default:
            (*(void (**)(unint64_t, uint64_t))(v212 + 8))((unint64_t)&a1[v13 + 32] & v213, v211);
            break;
        }
        unint64_t v63 = (unint64_t)&a1[v21 + 7] & 0xFFFFFFFFFFFFFFF8;
        int v64 = *(unsigned __int8 *)(v63 + 96);
        if (v64 != 255) {
          sub_21F82B5F8(*(void *)(v63 + 88), v64 & 1);
        }
        sub_21F82B5F8(*(void *)(v63 + 104), *(unsigned char *)(v63 + 112));
        break;
      case 7u:
        sub_21F7656A8(*(void *)a1, *((void *)a1 + 1), a1[16]);
        swift_bridgeObjectRelease();
        char v46 = (unsigned __int8 *)((unint64_t)&a1[v13 + 32] & v213);
        unsigned int v47 = v46[v19];
        unsigned int v48 = v47 - 5;
        if (v47 >= 5)
        {
          if (v19 <= 3) {
            uint64_t v49 = v19;
          }
          else {
            uint64_t v49 = 4;
          }
          switch(v49)
          {
            case 1:
              int v50 = *v46;
              goto LABEL_99;
            case 2:
              int v50 = *(unsigned __int16 *)v46;
              goto LABEL_99;
            case 3:
              int v50 = *(unsigned __int16 *)v46 | (*(unsigned __int8 *)(((unint64_t)&a1[v13 + 32] & v213) + 2) << 16);
              goto LABEL_99;
            case 4:
              int v50 = *(_DWORD *)v46;
LABEL_99:
              int v65 = (v50 | (v48 << (8 * v19))) + 5;
              unsigned int v47 = v50 + 5;
              if (v19 < 4) {
                unsigned int v47 = v65;
              }
              break;
            default:
              break;
          }
        }
        switch(v47)
        {
          case 1u:
            uint64_t v194 = v17;
            unsigned int v66 = *(void (**)(unint64_t, uint64_t))(v212 + 8);
            v66((unint64_t)&a1[v13 + 32] & v213, v211);
            v66((unint64_t)&v46[v200] & v199, v211);
            uint64_t v17 = v194;
            break;
          case 2u:
            swift_release();
            break;
          case 3u:
            swift_release();
            swift_release();
            break;
          case 4u:
            swift_release();
            unint64_t v67 = (unint64_t)&v46[v206] & v205;
            (*(void (**)(unint64_t, uint64_t))(v207 + 8))(v67, v208);
            (*(void (**)(unint64_t, uint64_t))(v209 + 8))((v17 + v67) & v30, v210);
            break;
          default:
            (*(void (**)(unint64_t, uint64_t))(v212 + 8))((unint64_t)&a1[v13 + 32] & v213, v211);
            break;
        }
        unint64_t v68 = (unint64_t)&a1[v21 + 7] & 0xFFFFFFFFFFFFFFF8;
        sub_21F770E38(*(void *)(v68 + 8), *(void *)(v68 + 16), *(unsigned char *)(v68 + 24));
        unsigned int v69 = *(unsigned __int8 *)(v68 + 48);
        if (v69 <= 0xFB) {
          sub_21F770E38(*(void *)(v68 + 32), *(void *)(v68 + 40), v69);
        }
        break;
      default:
        break;
    }
    unsigned int v73 = a2[v25];
    unsigned int v74 = v73 - 8;
    if (v73 >= 8)
    {
      if (v25 <= 3) {
        uint64_t v75 = v25;
      }
      else {
        uint64_t v75 = 4;
      }
      switch(v75)
      {
        case 1:
          int v76 = *a2;
          if (v25 < 4) {
            goto LABEL_126;
          }
          goto LABEL_130;
        case 2:
          int v76 = *(unsigned __int16 *)a2;
          if (v25 < 4) {
            goto LABEL_126;
          }
          goto LABEL_130;
        case 3:
          int v76 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v25 < 4) {
            goto LABEL_126;
          }
          goto LABEL_130;
        case 4:
          int v76 = *(_DWORD *)a2;
          if (v25 < 4) {
LABEL_126:
          }
            unsigned int v73 = (v76 | (v74 << (8 * v25))) + 8;
          else {
LABEL_130:
          }
            unsigned int v73 = v76 + 8;
          break;
        default:
          break;
      }
    }
    switch(v73)
    {
      case 1u:
        long long v78 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
        *(_OWORD *)a1 = v78;
        char v79 = 1;
        goto LABEL_245;
      case 2u:
        *(void *)a1 = *(void *)a2;
        a1[v25] = 2;
        swift_retain();
        return a1;
      case 3u:
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = *((void *)a2 + 1);
        a1[v25] = 3;
        swift_retain();
        swift_retain();
        return a1;
      case 4u:
        uint64_t v191 = v25;
        uint64_t v80 = v30;
        uint64_t v81 = v17;
        uint64_t v82 = *(void *)a2;
        uint64_t v83 = *((void *)a2 + 1);
        char v84 = a2[16];
        sub_21F7652C0(*(void *)a2, v83, v84);
        *(void *)a1 = v82;
        *((void *)a1 + 1) = v83;
        a1[16] = v84;
        *((void *)a1 + 3) = *((void *)a2 + 3);
        uint64_t v85 = &a2[v13];
        uint64_t v86 = (void *)((unint64_t)&a1[v13 + 32] & v213);
        uint64_t v87 = (unsigned __int8 *)((unint64_t)(v85 + 32) & v213);
        unsigned int v88 = v87[v19];
        swift_bridgeObjectRetain();
        if (v88 < 5)
        {
          uint64_t v90 = v81;
          uint64_t v91 = v80;
          uint64_t v25 = v191;
        }
        else
        {
          if (v19 <= 3) {
            uint64_t v89 = v19;
          }
          else {
            uint64_t v89 = 4;
          }
          uint64_t v90 = v81;
          uint64_t v91 = v80;
          uint64_t v25 = v191;
          switch(v89)
          {
            case 1:
              int v92 = *v87;
              goto LABEL_165;
            case 2:
              int v92 = *(unsigned __int16 *)v87;
              goto LABEL_165;
            case 3:
              int v92 = *(unsigned __int16 *)v87 | (v87[2] << 16);
              goto LABEL_165;
            case 4:
              int v92 = *(_DWORD *)v87;
LABEL_165:
              int v119 = (v92 | ((v88 - 5) << (8 * v19))) + 5;
              unsigned int v120 = v92 + 5;
              if (v19 >= 4) {
                unsigned int v88 = v120;
              }
              else {
                unsigned int v88 = v119;
              }
              break;
            default:
              break;
          }
        }
        switch(v88)
        {
          case 1u:
            unsigned int v121 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v212 + 16);
            v121(v86, v87, v211);
            v121((void *)(((unint64_t)v86 + v200) & v199), (unsigned __int8 *)((unint64_t)&v87[v200] & v199), v211);
            char v122 = 1;
            goto LABEL_175;
          case 2u:
            *uint64_t v86 = *(void *)v87;
            *((unsigned char *)v86 + v19) = 2;
            goto LABEL_173;
          case 3u:
            *uint64_t v86 = *(void *)v87;
            *(void *)(((unint64_t)&a1[v13 + 32] & v213) + 8) = *((void *)v87 + 1);
            *((unsigned char *)v86 + v19) = 3;
            swift_retain();
LABEL_173:
            swift_retain();
            char v79 = 4;
            break;
          case 4u:
            *uint64_t v86 = *(void *)v87;
            unint64_t v123 = ((unint64_t)v86 + v206) & v205;
            unint64_t v124 = (unint64_t)&v87[v206] & v205;
            unint64_t v125 = *(void (**)(unint64_t, unint64_t, uint64_t))(v207 + 16);
            swift_retain();
            v125(v123, v124, v208);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v209 + 16))((v90 + v123) & v91, (v90 + v124) & v91, v210);
            char v122 = 4;
LABEL_175:
            *((unsigned char *)v86 + v19) = v122;
            char v79 = 4;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v212 + 16))(v86, v87, v211);
            *((unsigned char *)v86 + v19) = 0;
            char v79 = 4;
            break;
        }
        goto LABEL_245;
      case 5u:
        uint64_t v93 = v30;
        uint64_t v196 = v17;
        uint64_t v94 = *(void *)a2;
        uint64_t v95 = *((void *)a2 + 1);
        char v96 = a2[16];
        sub_21F7652C0(*(void *)a2, v95, v96);
        *(void *)a1 = v94;
        *((void *)a1 + 1) = v95;
        a1[16] = v96;
        *((void *)a1 + 3) = *((void *)a2 + 3);
        int v97 = (void *)((unint64_t)&a1[v13 + 32] & v213);
        unsigned int v98 = (unsigned __int8 *)((unint64_t)&a2[v13 + 32] & v213);
        unsigned int v99 = v98[v19];
        swift_bridgeObjectRetain();
        if (v99 < 5)
        {
          uint64_t v101 = v93;
        }
        else
        {
          if (v19 <= 3) {
            uint64_t v100 = v19;
          }
          else {
            uint64_t v100 = 4;
          }
          uint64_t v101 = v93;
          switch(v100)
          {
            case 1:
              int v102 = *v98;
              goto LABEL_179;
            case 2:
              int v102 = *(unsigned __int16 *)v98;
              goto LABEL_179;
            case 3:
              int v102 = *(unsigned __int16 *)((unint64_t)&a2[v13 + 32] & v213) | (*(unsigned __int8 *)(((unint64_t)&a2[v13 + 32] & v213) + 2) << 16);
              goto LABEL_179;
            case 4:
              int v102 = *(_DWORD *)v98;
LABEL_179:
              int v126 = (v102 | ((v99 - 5) << (8 * v19))) + 5;
              unsigned int v127 = v102 + 5;
              if (v19 >= 4) {
                unsigned int v99 = v127;
              }
              else {
                unsigned int v99 = v126;
              }
              break;
            default:
              break;
          }
        }
        switch(v99)
        {
          case 1u:
            unint64_t v128 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v212 + 16);
            v128(v97, v98, v211);
            v128((void *)(((unint64_t)v97 + v200) & v199), (unsigned __int8 *)((unint64_t)&v98[v200] & v199), v211);
            char v129 = 1;
            goto LABEL_188;
          case 2u:
            *int v97 = *(void *)v98;
            *((unsigned char *)v97 + v19) = 2;
            swift_retain();
            break;
          case 3u:
            *int v97 = *(void *)v98;
            *(void *)(((unint64_t)&a1[v13 + 32] & v213) + 8) = *(void *)(((unint64_t)&a2[v13 + 32] & v213)
                                                                                  + 8);
            *((unsigned char *)v97 + v19) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *int v97 = *(void *)v98;
            unint64_t v130 = ((unint64_t)v97 + v206) & v205;
            unint64_t v131 = (unint64_t)&v98[v206] & v205;
            char v132 = *(void (**)(unint64_t, unint64_t, uint64_t))(v207 + 16);
            swift_retain();
            v132(v130, v131, v208);
            uint64_t v133 = v196 + v130;
            uint64_t v101 = v93;
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v209 + 16))(v133 & v93, (v196 + v131) & v93, v210);
            char v129 = 4;
LABEL_188:
            *((unsigned char *)v97 + v19) = v129;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v212 + 16))(v97, v98, v211);
            *((unsigned char *)v97 + v19) = 0;
            break;
        }
        unint64_t v134 = (unint64_t)&a1[v201] & v213;
        unint64_t v135 = (unint64_t)&a2[v201] & v213;
        uint64_t v136 = *(void *)v135;
        uint64_t v137 = *(void *)(v135 + 8);
        char v138 = *(unsigned char *)(v135 + 16);
        sub_21F7652C0(*(void *)v135, v137, v138);
        *(void *)unint64_t v134 = v136;
        *(void *)(v134 + 8) = v137;
        *(unsigned char *)(v134 + 16) = v138;
        *(void *)(v134 + 24) = *(void *)(v135 + 24);
        char v139 = (void *)((v202 + v134) & v213);
        char v140 = (unsigned __int8 *)((v202 + v135) & v213);
        unsigned int v141 = v140[v19];
        swift_bridgeObjectRetain();
        if (v141 < 5)
        {
          uint64_t v143 = v196;
        }
        else
        {
          if (v19 <= 3) {
            uint64_t v142 = v19;
          }
          else {
            uint64_t v142 = 4;
          }
          uint64_t v143 = v196;
          switch(v142)
          {
            case 1:
              int v144 = *v140;
              goto LABEL_233;
            case 2:
              int v144 = *(unsigned __int16 *)v140;
              goto LABEL_233;
            case 3:
              int v144 = *(unsigned __int16 *)((v202 + v135) & v213) | (*(unsigned __int8 *)(((v202 + v135) & v213) + 2) << 16);
              goto LABEL_233;
            case 4:
              int v144 = *(_DWORD *)v140;
LABEL_233:
              int v183 = (v144 | ((v141 - 5) << (8 * v19))) + 5;
              unsigned int v184 = v144 + 5;
              if (v19 >= 4) {
                unsigned int v141 = v184;
              }
              else {
                unsigned int v141 = v183;
              }
              break;
            default:
              break;
          }
        }
        switch(v141)
        {
          case 1u:
            uint64_t v185 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v212 + 16);
            v185(v139, v140, v211);
            v185((void *)(((unint64_t)v139 + v200) & v199), (unsigned __int8 *)((unint64_t)&v140[v200] & v199), v211);
            char v186 = 1;
            goto LABEL_243;
          case 2u:
            *char v139 = *(void *)v140;
            *((unsigned char *)v139 + v19) = 2;
            goto LABEL_241;
          case 3u:
            *char v139 = *(void *)v140;
            v139[1] = *(void *)(((v202 + v135) & v213) + 8);
            *((unsigned char *)v139 + v19) = 3;
            swift_retain();
LABEL_241:
            swift_retain();
            break;
          case 4u:
            *char v139 = *(void *)v140;
            unint64_t v187 = ((unint64_t)v139 + v206) & v205;
            unint64_t v188 = (unint64_t)&v140[v206] & v205;
            uint64_t v189 = *(void (**)(unint64_t, unint64_t, uint64_t))(v207 + 16);
            swift_retain();
            v189(v187, v188, v208);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v209 + 16))((v143 + v187) & v101, (v143 + v188) & v101, v210);
            char v186 = 4;
LABEL_243:
            *((unsigned char *)v139 + v19) = v186;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v212 + 16))(v139, v140, v211);
            *((unsigned char *)v139 + v19) = 0;
            break;
        }
        char v79 = 5;
        goto LABEL_245;
      case 6u:
        uint64_t v203 = v30;
        uint64_t v197 = v17;
        uint64_t v103 = *(void *)a2;
        uint64_t v104 = *((void *)a2 + 1);
        char v105 = a2[16];
        sub_21F7652C0(*(void *)a2, v104, v105);
        *(void *)a1 = v103;
        *((void *)a1 + 1) = v104;
        a1[16] = v105;
        *((void *)a1 + 3) = *((void *)a2 + 3);
        unint64_t v106 = (void *)((unint64_t)&a1[v13 + 32] & v213);
        unsigned int v107 = (unsigned __int8 *)((unint64_t)&a2[v13 + 32] & v213);
        unsigned int v108 = v107[v19];
        swift_bridgeObjectRetain();
        if (v108 >= 5)
        {
          if (v19 <= 3) {
            uint64_t v109 = v19;
          }
          else {
            uint64_t v109 = 4;
          }
          switch(v109)
          {
            case 1:
              int v110 = *v107;
              goto LABEL_199;
            case 2:
              int v110 = *(unsigned __int16 *)v107;
              goto LABEL_199;
            case 3:
              int v110 = *(unsigned __int16 *)((unint64_t)&a2[v13 + 32] & v213) | (*(unsigned __int8 *)(((unint64_t)&a2[v13 + 32] & v213) + 2) << 16);
              goto LABEL_199;
            case 4:
              int v110 = *(_DWORD *)v107;
LABEL_199:
              int v145 = (v110 | ((v108 - 5) << (8 * v19))) + 5;
              unsigned int v146 = v110 + 5;
              if (v19 >= 4) {
                unsigned int v108 = v146;
              }
              else {
                unsigned int v108 = v145;
              }
              break;
            default:
              break;
          }
        }
        switch(v108)
        {
          case 1u:
            uint64_t v151 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v212 + 16);
            v151(v106, v107, v211);
            v151((void *)(((unint64_t)v106 + v200) & v199), (unsigned __int8 *)((unint64_t)&v107[v200] & v199), v211);
            char v150 = 1;
            goto LABEL_208;
          case 2u:
            *unint64_t v106 = *(void *)v107;
            *((unsigned char *)v106 + v19) = 2;
            swift_retain();
            break;
          case 3u:
            *unint64_t v106 = *(void *)v107;
            *(void *)(((unint64_t)&a1[v13 + 32] & v213) + 8) = *(void *)(((unint64_t)&a2[v13 + 32] & v213)
                                                                                  + 8);
            *((unsigned char *)v106 + v19) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *unint64_t v106 = *(void *)v107;
            unint64_t v147 = ((unint64_t)v106 + v206) & v205;
            unint64_t v148 = (unint64_t)&v107[v206] & v205;
            uint64_t v149 = *(void (**)(unint64_t, unint64_t, uint64_t))(v207 + 16);
            swift_retain();
            v149(v147, v148, v208);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v209 + 16))((v197 + v147) & v203, (v197 + v148) & v203, v210);
            char v150 = 4;
LABEL_208:
            *((unsigned char *)v106 + v19) = v150;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v212 + 16))(v106, v107, v211);
            *((unsigned char *)v106 + v19) = 0;
            break;
        }
        unint64_t v152 = (unint64_t)&a1[v21 + 7] & 0xFFFFFFFFFFFFFFF8;
        unint64_t v153 = (unint64_t)&a2[v21 + 7] & 0xFFFFFFFFFFFFFFF8;
        *(unsigned char *)unint64_t v152 = *(unsigned char *)v153;
        uint64_t v154 = (_OWORD *)(v152 + 8);
        uint64_t v155 = (_OWORD *)(v153 + 8);
        if (*(unsigned __int8 *)(v153 + 96) == 255)
        {
          long long v161 = *(_OWORD *)(v153 + 24);
          *uint64_t v154 = *v155;
          *(_OWORD *)(v152 + 24) = v161;
          long long v162 = *(_OWORD *)(v153 + 40);
          long long v163 = *(_OWORD *)(v153 + 56);
          long long v164 = *(_OWORD *)(v153 + 72);
          *(_OWORD *)(v152 + 81) = *(_OWORD *)(v153 + 81);
          *(_OWORD *)(v152 + 56) = v163;
          *(_OWORD *)(v152 + 72) = v164;
          *(_OWORD *)(v152 + 40) = v162;
        }
        else
        {
          *uint64_t v154 = *v155;
          long long v156 = *(_OWORD *)(v153 + 24);
          long long v157 = *(_OWORD *)(v153 + 40);
          long long v158 = *(_OWORD *)(v153 + 72);
          *(_OWORD *)(v152 + 56) = *(_OWORD *)(v153 + 56);
          *(_OWORD *)(v152 + 72) = v158;
          *(_OWORD *)(v152 + 24) = v156;
          *(_OWORD *)(v152 + 40) = v157;
          uint64_t v159 = *(void *)(v153 + 88);
          char v160 = *(unsigned char *)(v153 + 96);
          sub_21F829E74(v159, v160);
          *(void *)(v152 + 88) = v159;
          *(unsigned char *)(v152 + 96) = v160;
        }
        uint64_t v165 = *(void *)(v153 + 104);
        char v166 = *(unsigned char *)(v153 + 112);
        sub_21F829E74(v165, v166);
        *(void *)(v152 + 104) = v165;
        *(unsigned char *)(v152 + 112) = v166;
        char v79 = 6;
        goto LABEL_245;
      case 7u:
        uint64_t v204 = v30;
        uint64_t v198 = v17;
        uint64_t v111 = *(void *)a2;
        uint64_t v112 = *((void *)a2 + 1);
        char v113 = a2[16];
        sub_21F7652C0(*(void *)a2, v112, v113);
        *(void *)a1 = v111;
        *((void *)a1 + 1) = v112;
        a1[16] = v113;
        *((void *)a1 + 3) = *((void *)a2 + 3);
        long long v114 = (void *)((unint64_t)&a1[v13 + 32] & v213);
        long long v115 = (unsigned __int8 *)((unint64_t)&a2[v13 + 32] & v213);
        unsigned int v116 = v115[v19];
        swift_bridgeObjectRetain();
        if (v116 >= 5)
        {
          if (v19 <= 3) {
            uint64_t v117 = v19;
          }
          else {
            uint64_t v117 = 4;
          }
          switch(v117)
          {
            case 1:
              int v118 = *v115;
              goto LABEL_216;
            case 2:
              int v118 = *(unsigned __int16 *)v115;
              goto LABEL_216;
            case 3:
              int v118 = *(unsigned __int16 *)((unint64_t)&a2[v13 + 32] & v213) | (*(unsigned __int8 *)(((unint64_t)&a2[v13 + 32] & v213) + 2) << 16);
              goto LABEL_216;
            case 4:
              int v118 = *(_DWORD *)v115;
LABEL_216:
              int v167 = (v118 | ((v116 - 5) << (8 * v19))) + 5;
              unsigned int v168 = v118 + 5;
              if (v19 >= 4) {
                unsigned int v116 = v168;
              }
              else {
                unsigned int v116 = v167;
              }
              break;
            default:
              break;
          }
        }
        switch(v116)
        {
          case 1u:
            uint64_t v169 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v212 + 16);
            v169(v114, v115, v211);
            v169((void *)(((unint64_t)v114 + v200) & v199), (unsigned __int8 *)((unint64_t)&v115[v200] & v199), v211);
            char v170 = 1;
            goto LABEL_225;
          case 2u:
            *long long v114 = *(void *)v115;
            *((unsigned char *)v114 + v19) = 2;
            swift_retain();
            break;
          case 3u:
            *long long v114 = *(void *)v115;
            *(void *)(((unint64_t)&a1[v13 + 32] & v213) + 8) = *(void *)(((unint64_t)&a2[v13 + 32] & v213)
                                                                                  + 8);
            *((unsigned char *)v114 + v19) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *long long v114 = *(void *)v115;
            unint64_t v171 = ((unint64_t)v114 + v206) & v205;
            unint64_t v172 = (unint64_t)&v115[v206] & v205;
            uint64_t v173 = *(void (**)(unint64_t, unint64_t, uint64_t))(v207 + 16);
            swift_retain();
            v173(v171, v172, v208);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v209 + 16))((v198 + v171) & v204, (v198 + v172) & v204, v210);
            char v170 = 4;
LABEL_225:
            *((unsigned char *)v114 + v19) = v170;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v212 + 16))(v114, v115, v211);
            *((unsigned char *)v114 + v19) = 0;
            break;
        }
        unint64_t v174 = (unint64_t)&a1[v21 + 7] & 0xFFFFFFFFFFFFFFF8;
        unint64_t v175 = (unint64_t)&a2[v21 + 7] & 0xFFFFFFFFFFFFFFF8;
        *(unsigned char *)unint64_t v174 = *(unsigned char *)v175;
        *(unsigned char *)(v174 + 1) = *(unsigned char *)(v175 + 1);
        *(unsigned char *)(v174 + 2) = *(unsigned char *)(v175 + 2);
        uint64_t v176 = *(void *)(v175 + 8);
        uint64_t v177 = *(void *)(v175 + 16);
        char v178 = *(unsigned char *)(v175 + 24);
        sub_21F770E44(v176, v177, v178);
        *(void *)(v174 + 8) = v176;
        *(void *)(v174 + 16) = v177;
        *(unsigned char *)(v174 + 24) = v178;
        unsigned int v179 = *(unsigned __int8 *)(v175 + 48);
        if (v179 <= 0xFB)
        {
          uint64_t v181 = *(void *)(v175 + 32);
          uint64_t v182 = *(void *)(v175 + 40);
          sub_21F770E44(v181, v182, *(unsigned char *)(v175 + 48));
          *(void *)(v174 + 32) = v181;
          *(void *)(v174 + 40) = v182;
          *(unsigned char *)(v174 + 48) = v179;
        }
        else
        {
          long long v180 = *(_OWORD *)(v175 + 32);
          *(unsigned char *)(v174 + 48) = *(unsigned char *)(v175 + 48);
          *(_OWORD *)(v174 + 32) = v180;
        }
        char v79 = 7;
LABEL_245:
        a1[v25] = v79;
        break;
      default:
        uint64_t v77 = *(void *)a2;
        a1[8] = a2[8];
        *(void *)a1 = v77;
        a1[v25] = 0;
        break;
    }
  }
  return a1;
}

uint64_t sub_21F9C8260(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v158 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v158 - 8);
  uint64_t v155 = v5;
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = sub_21FA24310();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v153 = v8;
  uint64_t v154 = v7;
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = sub_21FA24320();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = v9 | v12 | v6;
  uint64_t v14 = v13 | 7;
  uint64_t v15 = v13 + 32;
  uint64_t v16 = (v13 + 32) & ~(v13 | 7);
  unint64_t v17 = *(void *)(v5 + 64);
  uint64_t v18 = v17 + v6;
  if (((v17 + v6) & ~v6) + v17 > v17) {
    v17 += (v17 + v6) & ~v6;
  }
  uint64_t v19 = v9 + 8;
  uint64_t v20 = *(void *)(v8 + 64) + v12;
  unint64_t v21 = ((v20 + ((v9 + 8) & ~v9)) & ~v12) + *(void *)(*(void *)(v10 - 8) + 64);
  if (v17 > v21) {
    unint64_t v21 = v17;
  }
  if (v21 <= 0x10) {
    uint64_t v22 = 16;
  }
  else {
    uint64_t v22 = v21;
  }
  uint64_t v23 = v22 + v16;
  unint64_t v24 = v22 + v16 + 1;
  unint64_t v25 = v24 + v14;
  unint64_t v26 = ((v24 + v14) & ~v14) + v24;
  if (v24 > v26) {
    unint64_t v26 = v23 + 1;
  }
  unint64_t v27 = (v23 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v26 <= v27 + 113) {
    unint64_t v26 = v27 + 113;
  }
  unint64_t v28 = v27 + 49;
  if (v26 > v28) {
    unint64_t v28 = v26;
  }
  if (v28 <= 0x19) {
    uint64_t v29 = 25;
  }
  else {
    uint64_t v29 = v28;
  }
  unsigned int v30 = a2[v29];
  unsigned int v31 = v30 - 8;
  if (v30 >= 8)
  {
    if (v29 <= 3) {
      uint64_t v32 = v29;
    }
    else {
      uint64_t v32 = 4;
    }
    switch(v32)
    {
      case 1:
        int v33 = *a2;
        if (v29 < 4) {
          goto LABEL_27;
        }
        goto LABEL_29;
      case 2:
        int v33 = *(unsigned __int16 *)a2;
        if (v29 >= 4) {
          goto LABEL_29;
        }
        goto LABEL_27;
      case 3:
        int v33 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v29 < 4) {
          goto LABEL_27;
        }
        goto LABEL_29;
      case 4:
        int v33 = *(_DWORD *)a2;
        if (v29 < 4) {
LABEL_27:
        }
          unsigned int v30 = (v33 | (v31 << (8 * v29))) + 8;
        else {
LABEL_29:
        }
          unsigned int v30 = v33 + 8;
        break;
      default:
        break;
    }
  }
  uint64_t v34 = ~v14;
  uint64_t v35 = ~v6;
  uint64_t v36 = ~v9;
  uint64_t v37 = ~v12;
  switch(v30)
  {
    case 1u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
      char v38 = 1;
      break;
    case 2u:
      *(void *)a1 = *(void *)a2;
      char v38 = 2;
      break;
    case 3u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      char v38 = 3;
      break;
    case 4u:
      long long v39 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v39;
      uint64_t v40 = a1 + v14;
      unsigned int v41 = &a2[v14];
      unsigned int v42 = (void *)((v40 + 32) & v34);
      unsigned int v43 = (unsigned __int8 *)((unint64_t)(v41 + 32) & v34);
      unsigned int v44 = v43[v22];
      unsigned int v45 = v44 - 5;
      if (v44 >= 5)
      {
        if (v22 <= 3) {
          uint64_t v46 = v22;
        }
        else {
          uint64_t v46 = 4;
        }
        switch(v46)
        {
          case 1:
            int v47 = *v43;
            goto LABEL_62;
          case 2:
            int v47 = *(unsigned __int16 *)v43;
            goto LABEL_62;
          case 3:
            int v47 = *(unsigned __int16 *)v43 | (v43[2] << 16);
            goto LABEL_62;
          case 4:
            int v47 = *(_DWORD *)v43;
LABEL_62:
            int v69 = (v47 | (v45 << (8 * v22))) + 5;
            unsigned int v44 = v47 + 5;
            if (v22 < 4) {
              unsigned int v44 = v69;
            }
            break;
          default:
            break;
        }
      }
      switch(v44)
      {
        case 1u:
          unsigned int v71 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v155 + 32);
          uint64_t v72 = v18;
          uint64_t v73 = v35;
          v71(v42, v43, v158);
          v71((void *)(((unint64_t)v42 + v72) & v73), (unsigned __int8 *)((unint64_t)&v43[v72] & v73), v158);
          char v70 = 1;
          break;
        case 2u:
          *unsigned int v42 = *(void *)v43;
          char v70 = 2;
          break;
        case 3u:
          *(_OWORD *)unsigned int v42 = *(_OWORD *)v43;
          char v70 = 3;
          break;
        case 4u:
          *unsigned int v42 = *(void *)v43;
          unint64_t v74 = ((unint64_t)v42 + v19) & v36;
          unint64_t v75 = (unint64_t)&v43[v19] & v36;
          uint64_t v76 = v10;
          uint64_t v77 = v11;
          uint64_t v78 = v20;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v153 + 32))(v74, v75, v154);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v77 + 32))((v78 + v74) & v37, (v78 + v75) & v37, v76);
          char v70 = 4;
          break;
        default:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v155 + 32))(v42, v43, v158);
          char v70 = 0;
          break;
      }
      *((unsigned char *)v42 + v22) = v70;
      char v38 = 4;
      break;
    case 5u:
      long long v48 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v48;
      uint64_t v49 = (void *)((a1 + v14 + 32) & v34);
      int v50 = (unsigned __int8 *)((unint64_t)&a2[v14 + 32] & v34);
      unsigned int v51 = v50[v22];
      unsigned int v52 = v51 - 5;
      if (v51 >= 5)
      {
        if (v22 <= 3) {
          uint64_t v53 = v22;
        }
        else {
          uint64_t v53 = 4;
        }
        switch(v53)
        {
          case 1:
            int v54 = *v50;
            goto LABEL_74;
          case 2:
            int v54 = *(unsigned __int16 *)v50;
            goto LABEL_74;
          case 3:
            int v54 = *(unsigned __int16 *)v50 | (v50[2] << 16);
            goto LABEL_74;
          case 4:
            int v54 = *(_DWORD *)v50;
LABEL_74:
            int v79 = (v54 | (v52 << (8 * v22))) + 5;
            unsigned int v51 = v54 + 5;
            if (v22 < 4) {
              unsigned int v51 = v79;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v144 = v35;
      uint64_t v145 = v18;
      uint64_t v146 = v20;
      uint64_t v147 = v11;
      uint64_t v149 = v19;
      uint64_t v150 = v10;
      uint64_t v148 = v36;
      switch(v51)
      {
        case 1u:
          uint64_t v142 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v155 + 32);
          v142(v49, v50, v158);
          v142((void *)(((unint64_t)v49 + v145) & v144), (unsigned __int8 *)((unint64_t)&v50[v145] & v144), v158);
          char v80 = 1;
          break;
        case 2u:
          *uint64_t v49 = *(void *)v50;
          char v80 = 2;
          break;
        case 3u:
          *(_OWORD *)uint64_t v49 = *(_OWORD *)v50;
          char v80 = 3;
          break;
        case 4u:
          *uint64_t v49 = *(void *)v50;
          unint64_t v143 = ((unint64_t)v49 + v19) & v36;
          unint64_t v81 = (unint64_t)&v50[v19] & v36;
          (*(void (**)(void))(v153 + 32))();
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v147 + 32))((v146 + v143) & v37, (v146 + v81) & v37, v150);
          char v80 = 4;
          break;
        default:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v155 + 32))(v49, v50, v158);
          char v80 = 0;
          break;
      }
      *((unsigned char *)v49 + v22) = v80;
      uint64_t v82 = (_OWORD *)((v25 + a1) & v34);
      uint64_t v83 = (_OWORD *)((unint64_t)&a2[v25] & v34);
      long long v84 = v83[1];
      *uint64_t v82 = *v83;
      v82[1] = v84;
      uint64_t v85 = (void *)(((unint64_t)v82 + v15) & v34);
      uint64_t v86 = (unsigned __int8 *)(((unint64_t)v83 + v15) & v34);
      unsigned int v87 = v86[v22];
      unsigned int v88 = v87 - 5;
      if (v87 < 5)
      {
        uint64_t v91 = v148;
        uint64_t v90 = v149;
      }
      else
      {
        if (v22 <= 3) {
          uint64_t v89 = v22;
        }
        else {
          uint64_t v89 = 4;
        }
        uint64_t v91 = v148;
        uint64_t v90 = v149;
        switch(v89)
        {
          case 1:
            int v92 = *v86;
            goto LABEL_116;
          case 2:
            int v92 = *(unsigned __int16 *)v86;
            goto LABEL_116;
          case 3:
            int v92 = *(unsigned __int16 *)v86 | (v86[2] << 16);
            goto LABEL_116;
          case 4:
            int v92 = *(_DWORD *)v86;
LABEL_116:
            int v136 = (v92 | (v88 << (8 * v22))) + 5;
            unsigned int v87 = v92 + 5;
            if (v22 < 4) {
              unsigned int v87 = v136;
            }
            break;
          default:
            break;
        }
      }
      switch(v87)
      {
        case 1u:
          char v138 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v155 + 32);
          v138(v85, v86, v158);
          v138((void *)(((unint64_t)v85 + v145) & v144), (unsigned __int8 *)((unint64_t)&v86[v145] & v144), v158);
          char v137 = 1;
          break;
        case 2u:
          *uint64_t v85 = *(void *)v86;
          char v137 = 2;
          break;
        case 3u:
          *(_OWORD *)uint64_t v85 = *(_OWORD *)v86;
          char v137 = 3;
          break;
        case 4u:
          *uint64_t v85 = *(void *)v86;
          unint64_t v139 = ((unint64_t)v85 + v90) & v91;
          unint64_t v140 = (unint64_t)&v86[v90] & v91;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v153 + 32))(v139, v140, v154);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v147 + 32))((v146 + v139) & v37, (v146 + v140) & v37, v150);
          char v137 = 4;
          break;
        default:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v155 + 32))(v85, v86, v158);
          char v137 = 0;
          break;
      }
      *((unsigned char *)v85 + v22) = v137;
      char v38 = 5;
      break;
    case 6u:
      long long v55 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v55;
      unsigned int v56 = (void *)((a1 + v14 + 32) & v34);
      unsigned int v57 = (unsigned __int8 *)((unint64_t)&a2[v14 + 32] & v34);
      unsigned int v58 = v57[v22];
      unsigned int v59 = v58 - 5;
      if (v58 >= 5)
      {
        if (v22 <= 3) {
          uint64_t v60 = v22;
        }
        else {
          uint64_t v60 = 4;
        }
        switch(v60)
        {
          case 1:
            int v61 = *v57;
            goto LABEL_92;
          case 2:
            int v61 = *(unsigned __int16 *)v57;
            goto LABEL_92;
          case 3:
            int v61 = *(unsigned __int16 *)v57 | (v57[2] << 16);
            goto LABEL_92;
          case 4:
            int v61 = *(_DWORD *)v57;
LABEL_92:
            int v93 = (v61 | (v59 << (8 * v22))) + 5;
            unsigned int v58 = v61 + 5;
            if (v22 < 4) {
              unsigned int v58 = v93;
            }
            break;
          default:
            break;
        }
      }
      switch(v58)
      {
        case 1u:
          long long v156 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v155 + 32);
          int v102 = v56;
          uint64_t v103 = v18;
          uint64_t v104 = v56;
          uint64_t v105 = v35;
          v156(v102, v57, v158);
          unint64_t v106 = ((unint64_t)v104 + v103) & v105;
          unint64_t v107 = (unint64_t)&v57[v103] & v105;
          unsigned int v56 = v104;
          v156((void *)v106, (unsigned __int8 *)v107, v158);
          char v94 = 1;
          break;
        case 2u:
          *unsigned int v56 = *(void *)v57;
          char v94 = 2;
          break;
        case 3u:
          *(_OWORD *)unsigned int v56 = *(_OWORD *)v57;
          char v94 = 3;
          break;
        case 4u:
          *unsigned int v56 = *(void *)v57;
          unint64_t v95 = ((unint64_t)v56 + v19) & v36;
          unint64_t v96 = (unint64_t)&v57[v19] & v36;
          uint64_t v151 = v10;
          uint64_t v97 = v11;
          uint64_t v159 = v56;
          uint64_t v98 = ~v12;
          uint64_t v99 = v20;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v153 + 32))(v95, v96, v154);
          unint64_t v100 = (v99 + v95) & v98;
          unint64_t v101 = (v99 + v96) & v98;
          unsigned int v56 = v159;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v97 + 32))(v100, v101, v151);
          char v94 = 4;
          break;
        default:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v155 + 32))(v56, v57, v158);
          char v94 = 0;
          break;
      }
      *((unsigned char *)v56 + v22) = v94;
      unint64_t v108 = (a1 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v109 = (unint64_t)&a2[v24 + 7] & 0xFFFFFFFFFFFFFFF8;
      long long v110 = *(_OWORD *)v109;
      long long v111 = *(_OWORD *)(v109 + 16);
      long long v112 = *(_OWORD *)(v109 + 48);
      *(_OWORD *)(v108 + 32) = *(_OWORD *)(v109 + 32);
      *(_OWORD *)(v108 + 48) = v112;
      *(_OWORD *)unint64_t v108 = v110;
      *(_OWORD *)(v108 + 16) = v111;
      long long v113 = *(_OWORD *)(v109 + 64);
      long long v114 = *(_OWORD *)(v109 + 80);
      long long v115 = *(_OWORD *)(v109 + 96);
      *(unsigned char *)(v108 + 112) = *(unsigned char *)(v109 + 112);
      *(_OWORD *)(v108 + 80) = v114;
      *(_OWORD *)(v108 + 96) = v115;
      *(_OWORD *)(v108 + 64) = v113;
      char v38 = 6;
      break;
    case 7u:
      long long v62 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v62;
      unint64_t v63 = (void *)((a1 + v14 + 32) & v34);
      int v64 = (unsigned __int8 *)((unint64_t)&a2[v14 + 32] & v34);
      unsigned int v65 = v64[v22];
      unsigned int v66 = v65 - 5;
      if (v65 >= 5)
      {
        if (v22 <= 3) {
          uint64_t v67 = v22;
        }
        else {
          uint64_t v67 = 4;
        }
        switch(v67)
        {
          case 1:
            int v68 = *v64;
            goto LABEL_104;
          case 2:
            int v68 = *(unsigned __int16 *)v64;
            goto LABEL_104;
          case 3:
            int v68 = *(unsigned __int16 *)v64 | (v64[2] << 16);
            goto LABEL_104;
          case 4:
            int v68 = *(_DWORD *)v64;
LABEL_104:
            int v116 = (v68 | (v66 << (8 * v22))) + 5;
            unsigned int v65 = v68 + 5;
            if (v22 < 4) {
              unsigned int v65 = v116;
            }
            break;
          default:
            break;
        }
      }
      switch(v65)
      {
        case 1u:
          long long v157 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v155 + 32);
          int v118 = v63;
          uint64_t v119 = v18;
          unsigned int v120 = v63;
          uint64_t v121 = v35;
          v157(v118, v64, v158);
          unint64_t v122 = ((unint64_t)v120 + v119) & v121;
          unint64_t v123 = (unint64_t)&v64[v119] & v121;
          unint64_t v63 = v120;
          v157((void *)v122, (unsigned __int8 *)v123, v158);
          char v117 = 1;
          break;
        case 2u:
          *unint64_t v63 = *(void *)v64;
          char v117 = 2;
          break;
        case 3u:
          *(_OWORD *)unint64_t v63 = *(_OWORD *)v64;
          char v117 = 3;
          break;
        case 4u:
          *unint64_t v63 = *(void *)v64;
          unint64_t v124 = ((unint64_t)v63 + v19) & v36;
          unint64_t v125 = (unint64_t)&v64[v19] & v36;
          uint64_t v152 = v10;
          uint64_t v126 = v11;
          char v160 = v63;
          uint64_t v127 = ~v12;
          uint64_t v128 = v20;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v153 + 32))(v124, v125, v154);
          unint64_t v129 = (v128 + v124) & v127;
          unint64_t v130 = (v128 + v125) & v127;
          unint64_t v63 = v160;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v126 + 32))(v129, v130, v152);
          char v117 = 4;
          break;
        default:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v155 + 32))(v63, v64, v158);
          char v117 = 0;
          break;
      }
      *((unsigned char *)v63 + v22) = v117;
      unint64_t v131 = (a1 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v132 = (unint64_t)&a2[v24 + 7] & 0xFFFFFFFFFFFFFFF8;
      long long v133 = *(_OWORD *)v132;
      long long v134 = *(_OWORD *)(v132 + 16);
      long long v135 = *(_OWORD *)(v132 + 32);
      *(unsigned char *)(v131 + 48) = *(unsigned char *)(v132 + 48);
      *(_OWORD *)(v131 + 16) = v134;
      *(_OWORD *)(v131 + 32) = v135;
      *(_OWORD *)unint64_t v131 = v133;
      char v38 = 7;
      break;
    default:
      char v38 = 0;
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = a2[8];
      break;
  }
  *(unsigned char *)(a1 + v29) = v38;
  return a1;
}

unsigned __int8 *sub_21F9C9000(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v177 = *(void *)(a3 + 24);
    uint64_t v5 = *(void *)(v177 - 8);
    uint64_t v178 = v5;
    uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v7 = sub_21FA24310();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v171 = v8;
    uint64_t v172 = v7;
    uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v10 = sub_21FA24320();
    uint64_t v173 = *(void *)(v10 - 8);
    uint64_t v174 = v10;
    uint64_t v11 = *(unsigned __int8 *)(v173 + 80);
    uint64_t v12 = v9 | v11 | v6;
    uint64_t v13 = v12 | 7;
    uint64_t v168 = v12 + 32;
    uint64_t v14 = (v12 + 32) & ~(v12 | 7);
    unint64_t v15 = *(void *)(v5 + 64);
    uint64_t v166 = v15 + v6;
    if (((v15 + v6) & ~v6) + v15 > v15) {
      v15 += (v15 + v6) & ~v6;
    }
    uint64_t v170 = v9 + 8;
    uint64_t v16 = *(void *)(v8 + 64);
    uint64_t v17 = v16 + v11;
    unint64_t v18 = ((v16 + v11 + ((v9 + 8) & ~v9)) & ~v11) + *(void *)(*(void *)(v10 - 8) + 64);
    if (v15 > v18) {
      unint64_t v18 = v15;
    }
    if (v18 <= 0x10) {
      uint64_t v19 = 16;
    }
    else {
      uint64_t v19 = v18;
    }
    uint64_t v20 = v19 + v14;
    unint64_t v21 = v19 + v14 + 1;
    unint64_t v167 = v21 + v13;
    unint64_t v22 = ((v21 + v13) & ~v13) + v21;
    if (v21 > v22) {
      unint64_t v22 = v20 + 1;
    }
    unint64_t v23 = (v20 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v22 <= v23 + 113) {
      unint64_t v22 = v23 + 113;
    }
    unint64_t v24 = v23 + 49;
    if (v22 > v24) {
      unint64_t v24 = v22;
    }
    if (v24 <= 0x19) {
      uint64_t v25 = 25;
    }
    else {
      uint64_t v25 = v24;
    }
    unsigned int v26 = a1[v25];
    unsigned int v27 = v26 - 8;
    if (v26 >= 8)
    {
      if (v25 <= 3) {
        uint64_t v28 = v25;
      }
      else {
        uint64_t v28 = 4;
      }
      switch(v28)
      {
        case 1:
          int v29 = *a1;
          if (v25 < 4) {
            goto LABEL_26;
          }
          goto LABEL_30;
        case 2:
          int v29 = *(unsigned __int16 *)a1;
          if (v25 < 4) {
            goto LABEL_26;
          }
          goto LABEL_30;
        case 3:
          int v29 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v25 < 4) {
            goto LABEL_26;
          }
          goto LABEL_30;
        case 4:
          int v29 = *(_DWORD *)a1;
          if (v25 < 4) {
LABEL_26:
          }
            unsigned int v26 = (v29 | (v27 << (8 * v25))) + 8;
          else {
LABEL_30:
          }
            unsigned int v26 = v29 + 8;
          break;
        default:
          break;
      }
    }
    uint64_t v30 = ~v13;
    uint64_t v165 = ~v6;
    uint64_t v169 = ~v9;
    uint64_t v31 = ~v11;
    switch(v26)
    {
      case 2u:
        swift_release();
        break;
      case 3u:
        swift_release();
        swift_release();
        break;
      case 4u:
        sub_21F7656A8(*(void *)a1, *((void *)a1 + 1), a1[16]);
        swift_bridgeObjectRelease();
        uint64_t v175 = ~v13;
        uint64_t v32 = (unsigned __int8 *)((unint64_t)&a1[v13 + 32] & v30);
        unsigned int v33 = v32[v19];
        unsigned int v34 = v33 - 5;
        if (v33 >= 5)
        {
          if (v19 <= 3) {
            uint64_t v35 = v19;
          }
          else {
            uint64_t v35 = 4;
          }
          switch(v35)
          {
            case 1:
              int v36 = *v32;
              goto LABEL_61;
            case 2:
              int v36 = *(unsigned __int16 *)v32;
              goto LABEL_61;
            case 3:
              int v36 = *(unsigned __int16 *)v32 | (v32[2] << 16);
              goto LABEL_61;
            case 4:
              int v36 = *(_DWORD *)v32;
LABEL_61:
              int v52 = (v36 | (v34 << (8 * v19))) + 5;
              unsigned int v33 = v36 + 5;
              if (v19 < 4) {
                unsigned int v33 = v52;
              }
              break;
            default:
              break;
          }
        }
        switch(v33)
        {
          case 1u:
            goto LABEL_116;
          case 2u:
            goto LABEL_118;
          case 3u:
            goto LABEL_117;
          case 4u:
            goto LABEL_119;
          default:
            goto LABEL_115;
        }
      case 5u:
        sub_21F7656A8(*(void *)a1, *((void *)a1 + 1), a1[16]);
        swift_bridgeObjectRelease();
        uint64_t v175 = ~v13;
        uint64_t v37 = (unsigned __int8 *)((unint64_t)&a1[v13 + 32] & v30);
        unsigned int v38 = v37[v19];
        unsigned int v39 = v38 - 5;
        if (v38 >= 5)
        {
          if (v19 <= 3) {
            uint64_t v40 = v19;
          }
          else {
            uint64_t v40 = 4;
          }
          switch(v40)
          {
            case 1:
              int v41 = *v37;
              goto LABEL_67;
            case 2:
              int v41 = *(unsigned __int16 *)v37;
              goto LABEL_67;
            case 3:
              int v41 = *(unsigned __int16 *)v37 | (v37[2] << 16);
              goto LABEL_67;
            case 4:
              int v41 = *(_DWORD *)v37;
LABEL_67:
              int v53 = (v41 | (v39 << (8 * v19))) + 5;
              unsigned int v38 = v41 + 5;
              if (v19 < 4) {
                unsigned int v38 = v53;
              }
              break;
            default:
              break;
          }
        }
        switch(v38)
        {
          case 1u:
            uint64_t v158 = v31;
            int v54 = *(void (**)(unsigned __int8 *, uint64_t))(v178 + 8);
            v54(v37, v177);
            v54((unsigned __int8 *)((unint64_t)&v37[v166] & v165), v177);
            uint64_t v31 = v158;
            break;
          case 2u:
            swift_release();
            break;
          case 3u:
            swift_release();
            swift_release();
            break;
          case 4u:
            swift_release();
            unint64_t v55 = (unint64_t)&v37[v170] & v169;
            (*(void (**)(unint64_t, uint64_t))(v171 + 8))(v55, v172);
            (*(void (**)(unint64_t, uint64_t))(v173 + 8))((v17 + v55) & v31, v174);
            break;
          default:
            (*(void (**)(unsigned __int8 *, uint64_t))(v178 + 8))(v37, v177);
            break;
        }
        unint64_t v56 = (unint64_t)&a1[v167] & v175;
        sub_21F7656A8(*(void *)v56, *(void *)(v56 + 8), *(unsigned char *)(v56 + 0x10));
        swift_bridgeObjectRelease();
        uint64_t v32 = (unsigned __int8 *)((v168 + v56) & v175);
        unsigned int v57 = v32[v19];
        unsigned int v58 = v57 - 5;
        if (v57 >= 5)
        {
          if (v19 <= 3) {
            uint64_t v59 = v19;
          }
          else {
            uint64_t v59 = 4;
          }
          switch(v59)
          {
            case 1:
              int v60 = *v32;
              goto LABEL_112;
            case 2:
              int v60 = *(unsigned __int16 *)v32;
              goto LABEL_112;
            case 3:
              int v60 = *(unsigned __int16 *)((v168 + v56) & v175) | (*(unsigned __int8 *)(((v168 + v56) & v175) + 2) << 16);
              goto LABEL_112;
            case 4:
              int v60 = *(_DWORD *)v32;
LABEL_112:
              int v71 = (v60 | (v58 << (8 * v19))) + 5;
              unsigned int v57 = v60 + 5;
              if (v19 < 4) {
                unsigned int v57 = v71;
              }
              break;
            default:
              break;
          }
        }
        switch(v57)
        {
          case 1u:
LABEL_116:
            uint64_t v161 = v31;
            uint64_t v72 = *(void (**)(unsigned __int8 *, uint64_t))(v178 + 8);
            v72(v32, v177);
            v72((unsigned __int8 *)((unint64_t)&v32[v166] & v165), v177);
            uint64_t v31 = v161;
            break;
          case 2u:
            goto LABEL_118;
          case 3u:
LABEL_117:
            swift_release();
LABEL_118:
            swift_release();
            break;
          case 4u:
LABEL_119:
            swift_release();
            unint64_t v73 = (unint64_t)&v32[v170] & v169;
            (*(void (**)(unint64_t, uint64_t))(v171 + 8))(v73, v172);
            (*(void (**)(unint64_t, uint64_t))(v173 + 8))((v17 + v73) & v31, v174);
            break;
          default:
LABEL_115:
            (*(void (**)(unsigned __int8 *, uint64_t))(v178 + 8))(v32, v177);
            break;
        }
        uint64_t v30 = v175;
        break;
      case 6u:
        sub_21F7656A8(*(void *)a1, *((void *)a1 + 1), a1[16]);
        swift_bridgeObjectRelease();
        unsigned int v42 = (unsigned __int8 *)((unint64_t)&a1[v13 + 32] & v30);
        unsigned int v43 = v42[v19];
        unsigned int v44 = v43 - 5;
        if (v43 >= 5)
        {
          if (v19 <= 3) {
            uint64_t v45 = v19;
          }
          else {
            uint64_t v45 = 4;
          }
          switch(v45)
          {
            case 1:
              int v46 = *v42;
              goto LABEL_84;
            case 2:
              int v46 = *(unsigned __int16 *)v42;
              goto LABEL_84;
            case 3:
              int v46 = *(unsigned __int16 *)v42 | (v42[2] << 16);
              goto LABEL_84;
            case 4:
              int v46 = *(_DWORD *)v42;
LABEL_84:
              int v61 = (v46 | (v44 << (8 * v19))) + 5;
              unsigned int v43 = v46 + 5;
              if (v19 < 4) {
                unsigned int v43 = v61;
              }
              break;
            default:
              break;
          }
        }
        switch(v43)
        {
          case 1u:
            uint64_t v159 = v31;
            unint64_t v63 = *(void (**)(unsigned __int8 *, uint64_t))(v178 + 8);
            v63(v42, v177);
            v63((unsigned __int8 *)((unint64_t)&v42[v166] & v165), v177);
            uint64_t v31 = v159;
            break;
          case 2u:
            swift_release();
            break;
          case 3u:
            swift_release();
            swift_release();
            break;
          case 4u:
            swift_release();
            unint64_t v62 = (unint64_t)&v42[v170] & v169;
            (*(void (**)(unint64_t, uint64_t))(v171 + 8))(v62, v172);
            (*(void (**)(unint64_t, uint64_t))(v173 + 8))((v17 + v62) & v31, v174);
            break;
          default:
            (*(void (**)(unsigned __int8 *, uint64_t))(v178 + 8))(v42, v177);
            break;
        }
        uint64_t v30 = ~v13;
        unint64_t v64 = (unint64_t)&a1[v21 + 7] & 0xFFFFFFFFFFFFFFF8;
        int v65 = *(unsigned __int8 *)(v64 + 96);
        if (v65 != 255) {
          sub_21F82B5F8(*(void *)(v64 + 88), v65 & 1);
        }
        sub_21F82B5F8(*(void *)(v64 + 104), *(unsigned char *)(v64 + 112));
        break;
      case 7u:
        sub_21F7656A8(*(void *)a1, *((void *)a1 + 1), a1[16]);
        swift_bridgeObjectRelease();
        int v47 = (unsigned __int8 *)((unint64_t)&a1[v13 + 32] & v30);
        unsigned int v48 = v47[v19];
        unsigned int v49 = v48 - 5;
        if (v48 >= 5)
        {
          if (v19 <= 3) {
            uint64_t v50 = v19;
          }
          else {
            uint64_t v50 = 4;
          }
          switch(v50)
          {
            case 1:
              int v51 = *v47;
              goto LABEL_99;
            case 2:
              int v51 = *(unsigned __int16 *)v47;
              goto LABEL_99;
            case 3:
              int v51 = *(unsigned __int16 *)v47 | (v47[2] << 16);
              goto LABEL_99;
            case 4:
              int v51 = *(_DWORD *)v47;
LABEL_99:
              int v66 = (v51 | (v49 << (8 * v19))) + 5;
              unsigned int v48 = v51 + 5;
              if (v19 < 4) {
                unsigned int v48 = v66;
              }
              break;
            default:
              break;
          }
        }
        switch(v48)
        {
          case 1u:
            uint64_t v160 = v31;
            uint64_t v67 = *(void (**)(unsigned __int8 *, uint64_t))(v178 + 8);
            v67(v47, v177);
            v67((unsigned __int8 *)((unint64_t)&v47[v166] & v165), v177);
            uint64_t v31 = v160;
            break;
          case 2u:
            swift_release();
            break;
          case 3u:
            swift_release();
            swift_release();
            break;
          case 4u:
            swift_release();
            unint64_t v68 = (unint64_t)&v47[v170] & v169;
            (*(void (**)(unint64_t, uint64_t))(v171 + 8))(v68, v172);
            (*(void (**)(unint64_t, uint64_t))(v173 + 8))((v17 + v68) & v31, v174);
            break;
          default:
            (*(void (**)(unsigned __int8 *, uint64_t))(v178 + 8))(v47, v177);
            break;
        }
        unint64_t v69 = (unint64_t)&a1[v21 + 7] & 0xFFFFFFFFFFFFFFF8;
        sub_21F770E38(*(void *)(v69 + 8), *(void *)(v69 + 16), *(unsigned char *)(v69 + 24));
        unsigned int v70 = *(unsigned __int8 *)(v69 + 48);
        uint64_t v30 = ~v13;
        if (v70 <= 0xFB) {
          sub_21F770E38(*(void *)(v69 + 32), *(void *)(v69 + 40), v70);
        }
        break;
      default:
        break;
    }
    unsigned int v74 = a2[v25];
    unsigned int v75 = v74 - 8;
    if (v74 >= 8)
    {
      if (v25 <= 3) {
        uint64_t v76 = v25;
      }
      else {
        uint64_t v76 = 4;
      }
      switch(v76)
      {
        case 1:
          int v77 = *a2;
          if (v25 < 4) {
            goto LABEL_129;
          }
          goto LABEL_133;
        case 2:
          int v77 = *(unsigned __int16 *)a2;
          if (v25 < 4) {
            goto LABEL_129;
          }
          goto LABEL_133;
        case 3:
          int v77 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v25 < 4) {
            goto LABEL_129;
          }
          goto LABEL_133;
        case 4:
          int v77 = *(_DWORD *)a2;
          if (v25 < 4) {
LABEL_129:
          }
            unsigned int v74 = (v77 | (v75 << (8 * v25))) + 8;
          else {
LABEL_133:
          }
            unsigned int v74 = v77 + 8;
          break;
        default:
          break;
      }
    }
    switch(v74)
    {
      case 1u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
        char v78 = 1;
        break;
      case 2u:
        *(void *)a1 = *(void *)a2;
        char v78 = 2;
        break;
      case 3u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v78 = 3;
        break;
      case 4u:
        long long v79 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v79;
        char v80 = &a2[v13];
        unint64_t v81 = (void *)((unint64_t)&a1[v13 + 32] & v30);
        uint64_t v82 = (unsigned __int8 *)((unint64_t)(v80 + 32) & v30);
        unsigned int v83 = v82[v19];
        unsigned int v84 = v83 - 5;
        if (v83 >= 5)
        {
          if (v19 <= 3) {
            uint64_t v85 = v19;
          }
          else {
            uint64_t v85 = 4;
          }
          switch(v85)
          {
            case 1:
              int v86 = *v82;
              goto LABEL_166;
            case 2:
              int v86 = *(unsigned __int16 *)v82;
              goto LABEL_166;
            case 3:
              int v86 = *(unsigned __int16 *)v82 | (v82[2] << 16);
              goto LABEL_166;
            case 4:
              int v86 = *(_DWORD *)v82;
LABEL_166:
              int v113 = (v86 | (v84 << (8 * v19))) + 5;
              unsigned int v83 = v86 + 5;
              if (v19 < 4) {
                unsigned int v83 = v113;
              }
              break;
            default:
              break;
          }
        }
        switch(v83)
        {
          case 1u:
            long long v115 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v178 + 32);
            v115(v81, v82, v177);
            v115((void *)(((unint64_t)v81 + v166) & v165), (unsigned __int8 *)((unint64_t)&v82[v166] & v165), v177);
            char v114 = 1;
            break;
          case 2u:
            *unint64_t v81 = *(void *)v82;
            char v114 = 2;
            break;
          case 3u:
            *(_OWORD *)unint64_t v81 = *(_OWORD *)v82;
            char v114 = 3;
            break;
          case 4u:
            *unint64_t v81 = *(void *)v82;
            unint64_t v116 = (unint64_t)&v82[v170] & v169;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v171 + 32))(((unint64_t)v81 + v170) & v169, v116, v172);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v173 + 32))((v17 + (((unint64_t)v81 + v170) & v169)) & v31, (v17 + v116) & v31, v174);
            char v114 = 4;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v178 + 32))(v81, v82, v177);
            char v114 = 0;
            break;
        }
        *((unsigned char *)v81 + v19) = v114;
        char v78 = 4;
        break;
      case 5u:
        uint64_t v157 = v17;
        long long v87 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v87;
        uint64_t v88 = v30;
        uint64_t v89 = (void *)((unint64_t)&a1[v13 + 32] & v30);
        uint64_t v176 = v88;
        uint64_t v90 = (unsigned __int8 *)((unint64_t)&a2[v13 + 32] & v88);
        unsigned int v91 = v90[v19];
        unsigned int v92 = v91 - 5;
        if (v91 >= 5)
        {
          if (v19 <= 3) {
            uint64_t v93 = v19;
          }
          else {
            uint64_t v93 = 4;
          }
          switch(v93)
          {
            case 1:
              int v94 = *v90;
              goto LABEL_178;
            case 2:
              int v94 = *(unsigned __int16 *)v90;
              goto LABEL_178;
            case 3:
              int v94 = *(unsigned __int16 *)((unint64_t)&a2[v13 + 32] & v88) | (*(unsigned __int8 *)(((unint64_t)&a2[v13 + 32] & v88) + 2) << 16);
              goto LABEL_178;
            case 4:
              int v94 = *(_DWORD *)v90;
LABEL_178:
              int v117 = (v94 | (v92 << (8 * v19))) + 5;
              unsigned int v91 = v94 + 5;
              if (v19 < 4) {
                unsigned int v91 = v117;
              }
              break;
            default:
              break;
          }
        }
        uint64_t v164 = v31;
        switch(v91)
        {
          case 1u:
            unsigned int v120 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v178 + 32);
            v120(v89, v90, v177);
            v120((void *)(((unint64_t)v89 + v166) & v165), (unsigned __int8 *)((unint64_t)&v90[v166] & v165), v177);
            char v118 = 1;
            uint64_t v119 = v157;
            break;
          case 2u:
            *uint64_t v89 = *(void *)v90;
            char v118 = 2;
            uint64_t v119 = v157;
            break;
          case 3u:
            *(_OWORD *)uint64_t v89 = *(_OWORD *)v90;
            char v118 = 3;
            uint64_t v119 = v157;
            break;
          case 4u:
            *uint64_t v89 = *(void *)v90;
            unint64_t v121 = (unint64_t)&v90[v170] & v169;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v171 + 32))(((unint64_t)v89 + v170) & v169, v121, v172);
            uint64_t v119 = v157;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v173 + 32))((v157 + (((unint64_t)v89 + v170) & v169)) & v164, (v157 + v121) & v164, v174);
            char v118 = 4;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v178 + 32))(v89, v90, v177);
            char v118 = 0;
            uint64_t v119 = v157;
            break;
        }
        *((unsigned char *)v89 + v19) = v118;
        unint64_t v122 = (_OWORD *)((unint64_t)&a1[v167] & v176);
        unint64_t v123 = (_OWORD *)((unint64_t)&a2[v167] & v176);
        long long v124 = v123[1];
        *unint64_t v122 = *v123;
        v122[1] = v124;
        unint64_t v125 = (void *)(((unint64_t)v122 + v168) & v176);
        uint64_t v126 = (unsigned __int8 *)(((unint64_t)v123 + v168) & v176);
        unsigned int v127 = v126[v19];
        unsigned int v128 = v127 - 5;
        if (v127 >= 5)
        {
          if (v19 <= 3) {
            uint64_t v129 = v19;
          }
          else {
            uint64_t v129 = 4;
          }
          switch(v129)
          {
            case 1:
              int v130 = *v126;
              goto LABEL_219;
            case 2:
              int v130 = *(unsigned __int16 *)v126;
              goto LABEL_219;
            case 3:
              int v130 = *(unsigned __int16 *)v126 | (v126[2] << 16);
              goto LABEL_219;
            case 4:
              int v130 = *(_DWORD *)v126;
LABEL_219:
              int v152 = (v130 | (v128 << (8 * v19))) + 5;
              unsigned int v127 = v130 + 5;
              if (v19 < 4) {
                unsigned int v127 = v152;
              }
              break;
            default:
              break;
          }
        }
        switch(v127)
        {
          case 1u:
            uint64_t v154 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v178 + 32);
            v154(v125, v126, v177);
            v154((void *)(((unint64_t)v125 + v166) & v165), (unsigned __int8 *)((unint64_t)&v126[v166] & v165), v177);
            char v153 = 1;
            break;
          case 2u:
            *unint64_t v125 = *(void *)v126;
            char v153 = 2;
            break;
          case 3u:
            *(_OWORD *)unint64_t v125 = *(_OWORD *)v126;
            char v153 = 3;
            break;
          case 4u:
            *unint64_t v125 = *(void *)v126;
            unint64_t v155 = (unint64_t)&v126[v170] & v169;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v171 + 32))(((unint64_t)v125 + v170) & v169, v155, v172);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v173 + 32))((v119 + (((unint64_t)v125 + v170) & v169)) & v164, (v119 + v155) & v164, v174);
            char v153 = 4;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v178 + 32))(v125, v126, v177);
            char v153 = 0;
            break;
        }
        *((unsigned char *)v125 + v19) = v153;
        char v78 = 5;
        break;
      case 6u:
        uint64_t v162 = v31;
        uint64_t v95 = v17;
        long long v96 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v96;
        uint64_t v97 = v30;
        uint64_t v98 = (void *)((unint64_t)&a1[v13 + 32] & v30);
        uint64_t v99 = (unsigned __int8 *)((unint64_t)&a2[v13 + 32] & v97);
        unsigned int v100 = v99[v19];
        unsigned int v101 = v100 - 5;
        if (v100 >= 5)
        {
          if (v19 <= 3) {
            uint64_t v102 = v19;
          }
          else {
            uint64_t v102 = 4;
          }
          switch(v102)
          {
            case 1:
              int v103 = *v99;
              goto LABEL_195;
            case 2:
              int v103 = *(unsigned __int16 *)v99;
              goto LABEL_195;
            case 3:
              int v103 = *(unsigned __int16 *)((unint64_t)&a2[v13 + 32] & v97) | (*(unsigned __int8 *)(((unint64_t)&a2[v13 + 32] & v97) + 2) << 16);
              goto LABEL_195;
            case 4:
              int v103 = *(_DWORD *)v99;
LABEL_195:
              int v131 = (v103 | (v101 << (8 * v19))) + 5;
              unsigned int v100 = v103 + 5;
              if (v19 < 4) {
                unsigned int v100 = v131;
              }
              break;
            default:
              break;
          }
        }
        switch(v100)
        {
          case 1u:
            long long v134 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v178 + 32);
            v134(v98, v99, v177);
            v134((void *)(((unint64_t)v98 + v166) & v165), (unsigned __int8 *)((unint64_t)&v99[v166] & v165), v177);
            char v132 = 1;
            break;
          case 2u:
            *uint64_t v98 = *(void *)v99;
            char v132 = 2;
            break;
          case 3u:
            *(_OWORD *)uint64_t v98 = *(_OWORD *)v99;
            char v132 = 3;
            break;
          case 4u:
            *uint64_t v98 = *(void *)v99;
            unint64_t v133 = (unint64_t)&v99[v170] & v169;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v171 + 32))(((unint64_t)v98 + v170) & v169, v133, v172);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v173 + 32))((v95 + (((unint64_t)v98 + v170) & v169)) & v162, (v95 + v133) & v162, v174);
            char v132 = 4;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v178 + 32))(v98, v99, v177);
            char v132 = 0;
            break;
        }
        *((unsigned char *)v98 + v19) = v132;
        unint64_t v135 = (unint64_t)&a1[v21 + 7] & 0xFFFFFFFFFFFFFFF8;
        unint64_t v136 = (unint64_t)&a2[v21 + 7] & 0xFFFFFFFFFFFFFFF8;
        long long v137 = *(_OWORD *)v136;
        long long v138 = *(_OWORD *)(v136 + 16);
        long long v139 = *(_OWORD *)(v136 + 48);
        *(_OWORD *)(v135 + 32) = *(_OWORD *)(v136 + 32);
        *(_OWORD *)(v135 + 48) = v139;
        *(_OWORD *)unint64_t v135 = v137;
        *(_OWORD *)(v135 + 16) = v138;
        long long v140 = *(_OWORD *)(v136 + 64);
        long long v141 = *(_OWORD *)(v136 + 80);
        long long v142 = *(_OWORD *)(v136 + 96);
        *(unsigned char *)(v135 + 112) = *(unsigned char *)(v136 + 112);
        *(_OWORD *)(v135 + 80) = v141;
        *(_OWORD *)(v135 + 96) = v142;
        *(_OWORD *)(v135 + 64) = v140;
        char v78 = 6;
        break;
      case 7u:
        uint64_t v163 = v31;
        uint64_t v104 = v17;
        long long v105 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v105;
        uint64_t v106 = v30;
        unint64_t v107 = (void *)((unint64_t)&a1[v13 + 32] & v30);
        unint64_t v108 = (unsigned __int8 *)((unint64_t)&a2[v13 + 32] & v106);
        unsigned int v109 = v108[v19];
        unsigned int v110 = v109 - 5;
        if (v109 >= 5)
        {
          if (v19 <= 3) {
            uint64_t v111 = v19;
          }
          else {
            uint64_t v111 = 4;
          }
          switch(v111)
          {
            case 1:
              int v112 = *v108;
              goto LABEL_207;
            case 2:
              int v112 = *(unsigned __int16 *)v108;
              goto LABEL_207;
            case 3:
              int v112 = *(unsigned __int16 *)((unint64_t)&a2[v13 + 32] & v106) | (*(unsigned __int8 *)(((unint64_t)&a2[v13 + 32] & v106) + 2) << 16);
              goto LABEL_207;
            case 4:
              int v112 = *(_DWORD *)v108;
LABEL_207:
              int v143 = (v112 | (v110 << (8 * v19))) + 5;
              unsigned int v109 = v112 + 5;
              if (v19 < 4) {
                unsigned int v109 = v143;
              }
              break;
            default:
              break;
          }
        }
        switch(v109)
        {
          case 1u:
            uint64_t v145 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v178 + 32);
            v145(v107, v108, v177);
            v145((void *)(((unint64_t)v107 + v166) & v165), (unsigned __int8 *)((unint64_t)&v108[v166] & v165), v177);
            char v144 = 1;
            break;
          case 2u:
            *unint64_t v107 = *(void *)v108;
            char v144 = 2;
            break;
          case 3u:
            *(_OWORD *)unint64_t v107 = *(_OWORD *)v108;
            char v144 = 3;
            break;
          case 4u:
            *unint64_t v107 = *(void *)v108;
            unint64_t v146 = (unint64_t)&v108[v170] & v169;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v171 + 32))(((unint64_t)v107 + v170) & v169, v146, v172);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v173 + 32))((v104 + (((unint64_t)v107 + v170) & v169)) & v163, (v104 + v146) & v163, v174);
            char v144 = 4;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v178 + 32))(v107, v108, v177);
            char v144 = 0;
            break;
        }
        *((unsigned char *)v107 + v19) = v144;
        unint64_t v147 = (unint64_t)&a1[v21 + 7] & 0xFFFFFFFFFFFFFFF8;
        unint64_t v148 = (unint64_t)&a2[v21 + 7] & 0xFFFFFFFFFFFFFFF8;
        long long v149 = *(_OWORD *)v148;
        long long v150 = *(_OWORD *)(v148 + 16);
        long long v151 = *(_OWORD *)(v148 + 32);
        *(unsigned char *)(v147 + 48) = *(unsigned char *)(v148 + 48);
        *(_OWORD *)(v147 + 16) = v150;
        *(_OWORD *)(v147 + 32) = v151;
        *(_OWORD *)unint64_t v147 = v149;
        char v78 = 7;
        break;
      default:
        char v78 = 0;
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        break;
    }
    a1[v25] = v78;
  }
  return a1;
}

uint64_t sub_21F9CA67C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(sub_21FA24310() - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(sub_21FA24320() - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = v8 | v10 | v6;
  uint64_t v12 = v11 | 7;
  uint64_t v13 = (v11 + 32) & ~(v11 | 7);
  unint64_t v14 = *(void *)(v5 + 64);
  if (((v14 + v6) & ~v6) + v14 > v14) {
    v14 += (v14 + v6) & ~v6;
  }
  unint64_t v15 = ((*(void *)(v7 + 64) + v10 + ((v8 + 8) & ~v8)) & ~v10) + *(void *)(v9 + 64);
  if (v14 > v15) {
    unint64_t v15 = v14;
  }
  if (v15 <= 0x10) {
    unint64_t v15 = 16;
  }
  unint64_t v16 = v15 + v13;
  if (v16 + 1 > ((v16 + 1 + v12) & ~v12) + v16 + 1) {
    unint64_t v17 = v16 + 1;
  }
  else {
    unint64_t v17 = ((v16 + 1 + v12) & ~v12) + v16 + 1;
  }
  unint64_t v18 = (v16 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v17 <= v18 + 113) {
    unint64_t v17 = v18 + 113;
  }
  unint64_t v19 = v18 + 49;
  if (v17 > v19) {
    unint64_t v19 = v17;
  }
  uint64_t v20 = 25;
  if (v19 > 0x19) {
    uint64_t v20 = v19;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_35;
  }
  uint64_t v21 = v20 + 1;
  char v22 = 8 * (v20 + 1);
  if ((v20 + 1) <= 3)
  {
    unsigned int v25 = ((a2 + ~(-1 << v22) - 248) >> v22) + 1;
    if (HIWORD(v25))
    {
      int v23 = *(_DWORD *)((char *)a1 + v21);
      if (!v23) {
        goto LABEL_35;
      }
      goto LABEL_27;
    }
    if (v25 > 0xFF)
    {
      int v23 = *(unsigned __int16 *)((char *)a1 + v21);
      if (!*(unsigned __int16 *)((char *)a1 + v21)) {
        goto LABEL_35;
      }
      goto LABEL_27;
    }
    if (v25 < 2)
    {
LABEL_35:
      unsigned int v27 = *((unsigned __int8 *)a1 + v20);
      if (v27 >= 8) {
        return (v27 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v23 = *((unsigned __int8 *)a1 + v21);
  if (!*((unsigned char *)a1 + v21)) {
    goto LABEL_35;
  }
LABEL_27:
  int v26 = (v23 - 1) << v22;
  if (v21 > 3) {
    int v26 = 0;
  }
  if (v21)
  {
    if (v21 > 3) {
      LODWORD(v21) = 4;
    }
    switch((int)v21)
    {
      case 2:
        LODWORD(v21) = *a1;
        break;
      case 3:
        LODWORD(v21) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v21) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v21) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v21 | v26) + 249;
}

void sub_21F9CA93C(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a4 + 24) - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(sub_21FA24310() - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(sub_21FA24320() - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = v10 | v12 | v8;
  uint64_t v14 = v13 | 7;
  uint64_t v15 = (v13 + 32) & ~(v13 | 7);
  unint64_t v16 = *(void *)(v7 + 64);
  if (((v16 + v8) & ~v8) + v16 > v16) {
    v16 += (v16 + v8) & ~v8;
  }
  unint64_t v17 = ((*(void *)(v9 + 64) + v12 + ((v10 + 8) & ~v10)) & ~v12) + *(void *)(v11 + 64);
  if (v16 > v17) {
    unint64_t v17 = v16;
  }
  if (v17 <= 0x10) {
    unint64_t v17 = 16;
  }
  unint64_t v18 = v17 + v15;
  if (v18 + 1 > ((v18 + 1 + v14) & ~v14) + v18 + 1) {
    unint64_t v19 = v18 + 1;
  }
  else {
    unint64_t v19 = ((v18 + 1 + v14) & ~v14) + v18 + 1;
  }
  unint64_t v20 = (v18 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v19 <= v20 + 113) {
    unint64_t v19 = v20 + 113;
  }
  unint64_t v21 = v20 + 49;
  if (v19 > v21) {
    unint64_t v21 = v19;
  }
  if (v21 <= 0x19) {
    unint64_t v21 = 25;
  }
  size_t v22 = v21 + 1;
  if (a3 < 0xF9)
  {
    int v23 = 0;
  }
  else if (v22 <= 3)
  {
    unsigned int v26 = ((a3 + ~(-1 << (8 * v22)) - 248) >> (8 * v22)) + 1;
    if (HIWORD(v26))
    {
      int v23 = 4;
    }
    else if (v26 >= 0x100)
    {
      int v23 = 2;
    }
    else
    {
      int v23 = v26 > 1;
    }
  }
  else
  {
    int v23 = 1;
  }
  if (a2 > 0xF8)
  {
    unsigned int v24 = a2 - 249;
    if (v22 < 4)
    {
      int v25 = (v24 >> (8 * v22)) + 1;
      if (v21 != -1)
      {
        int v27 = v24 & ~(-1 << (8 * v22));
        bzero(a1, v22);
        if (v22 == 3)
        {
          *(_WORD *)a1 = v27;
          a1[2] = BYTE2(v27);
        }
        else if (v22 == 2)
        {
          *(_WORD *)a1 = v27;
        }
        else
        {
          *a1 = v27;
        }
      }
    }
    else
    {
      bzero(a1, v21 + 1);
      *(_DWORD *)a1 = v24;
      int v25 = 1;
    }
    switch(v23)
    {
      case 1:
        a1[v22] = v25;
        break;
      case 2:
        *(_WORD *)&a1[v22] = v25;
        break;
      case 3:
LABEL_47:
        __break(1u);
        JUMPOUT(0x21F9CAC70);
      case 4:
        *(_DWORD *)&a1[v22] = v25;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v23)
    {
      case 1:
        a1[v22] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_36;
      case 2:
        *(_WORD *)&a1[v22] = 0;
        goto LABEL_35;
      case 3:
        goto LABEL_47;
      case 4:
        *(_DWORD *)&a1[v22] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_36;
      default:
LABEL_35:
        if (a2) {
LABEL_36:
        }
          a1[v21] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_21F9CAC98(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(sub_21FA24310() - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(sub_21FA24320() - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = v6 | v8 | v4;
  uint64_t v10 = v9 | 7;
  uint64_t v11 = (v9 + 32) & ~(v9 | 7);
  unint64_t v12 = *(void *)(v3 + 64);
  if (((v12 + v4) & ~v4) + v12 > v12) {
    v12 += (v12 + v4) & ~v4;
  }
  unint64_t v13 = ((*(void *)(v5 + 64) + v8 + ((v6 + 8) & ~v6)) & ~v8) + *(void *)(v7 + 64);
  if (v12 > v13) {
    unint64_t v13 = v12;
  }
  if (v13 <= 0x10) {
    unint64_t v13 = 16;
  }
  unint64_t v14 = v13 + v11;
  if (v14 + 1 > ((v14 + 1 + v10) & ~v10) + v14 + 1) {
    unint64_t v15 = v14 + 1;
  }
  else {
    unint64_t v15 = ((v14 + 1 + v10) & ~v10) + v14 + 1;
  }
  unint64_t v16 = (v14 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v15 <= v16 + 113) {
    unint64_t v15 = v16 + 113;
  }
  unint64_t v17 = v16 + 49;
  if (v15 > v17) {
    unint64_t v17 = v15;
  }
  if (v17 <= 0x19) {
    unint64_t v17 = 25;
  }
  uint64_t result = a1[v17];
  if (result >= 8)
  {
    if (v17 <= 3) {
      uint64_t v19 = v17;
    }
    else {
      uint64_t v19 = 4;
    }
    switch(v19)
    {
      case 1:
        int v20 = *a1;
        if (v17 < 4) {
          goto LABEL_26;
        }
        goto LABEL_28;
      case 2:
        int v20 = *(unsigned __int16 *)a1;
        if (v17 >= 4) {
          goto LABEL_28;
        }
        goto LABEL_26;
      case 3:
        int v20 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v17 < 4) {
          goto LABEL_26;
        }
        goto LABEL_28;
      case 4:
        int v20 = *(_DWORD *)a1;
        if (v17 < 4) {
LABEL_26:
        }
          uint64_t result = (v20 | ((result - 8) << (8 * v17))) + 8;
        else {
LABEL_28:
        }
          uint64_t result = (v20 + 8);
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_21F9CAEEC(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  if (a2 > 7)
  {
    uint64_t v22 = *(unsigned __int8 *)(*(void *)(*(void *)(a3 + 24) - 8) + 80);
    uint64_t v23 = *(void *)(sub_21FA24310() - 8);
    uint64_t v24 = *(unsigned __int8 *)(v23 + 80);
    uint64_t v25 = *(void *)(sub_21FA24320() - 8);
    uint64_t v26 = *(unsigned __int8 *)(v25 + 80);
    uint64_t v27 = v24 | v26 | v22;
    uint64_t v28 = v27 | 7;
    uint64_t v29 = (v27 + 32) & ~(v27 | 7);
    unint64_t v30 = *(void *)(v5 + 64);
    if (((v30 + v22) & ~v22) + v30 > v30) {
      v30 += (v30 + v22) & ~v22;
    }
    unint64_t v31 = ((*(void *)(v23 + 64) + v26 + ((v24 + 8) & ~v24)) & ~v26) + *(void *)(v25 + 64);
    if (v30 > v31) {
      unint64_t v31 = v30;
    }
    if (v31 <= 0x10) {
      unint64_t v31 = 16;
    }
    unint64_t v32 = v31 + v29;
    if (v32 + 1 > ((v32 + 1 + v28) & ~v28) + v32 + 1) {
      unint64_t v33 = v32 + 1;
    }
    else {
      unint64_t v33 = ((v32 + 1 + v28) & ~v28) + v32 + 1;
    }
    unint64_t v34 = (v32 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v33 <= v34 + 113) {
      unint64_t v33 = v34 + 113;
    }
    unint64_t v35 = v34 + 49;
    if (v33 > v35) {
      unint64_t v35 = v33;
    }
    if (v35 <= 0x19) {
      size_t v36 = 25;
    }
    else {
      size_t v36 = v35;
    }
    unsigned int v37 = a2 - 8;
    if (v36 < 4)
    {
      unsigned int v38 = v37 >> (8 * v36);
      int v39 = v37 & ~(-1 << (8 * v36));
      a1[v36] = v38 + 8;
      bzero(a1, v36);
      if (v36 == 3)
      {
        *(_WORD *)a1 = v39;
        a1[2] = BYTE2(v39);
      }
      else if (v36 == 2)
      {
        *(_WORD *)a1 = v39;
      }
      else
      {
        *a1 = v39;
      }
    }
    else
    {
      a1[v36] = 8;
      bzero(a1, v36);
      *(_DWORD *)a1 = v37;
    }
  }
  else
  {
    uint64_t v6 = *(void *)(sub_21FA24310() - 8);
    uint64_t v7 = *(void *)(sub_21FA24320() - 8);
    uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
    uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v11 = v9 | v10 | v8;
    uint64_t v12 = v11 + 32;
    uint64_t v13 = v11 | 7;
    uint64_t v14 = v12 & ~v13;
    unint64_t v15 = *(void *)(v5 + 64);
    unint64_t v16 = ((v15 + v8) & ~v8) + v15;
    if (v16 <= v15) {
      unint64_t v16 = *(void *)(v5 + 64);
    }
    unint64_t v17 = ((*(void *)(v6 + 64) + v9 + ((v10 + 8) & ~v10)) & ~v9) + *(void *)(v7 + 64);
    if (v16 > v17) {
      unint64_t v17 = v16;
    }
    if (v17 <= 0x10) {
      unint64_t v17 = 16;
    }
    unint64_t v18 = v17 + v14;
    if (v18 + 1 > ((v18 + 1 + v13) & ~v13) + v18 + 1) {
      unint64_t v19 = v18 + 1;
    }
    else {
      unint64_t v19 = ((v18 + 1 + v13) & ~v13) + v18 + 1;
    }
    unint64_t v20 = (v18 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v19 <= v20 + 113) {
      unint64_t v19 = v20 + 113;
    }
    unint64_t v21 = v20 + 49;
    if (v19 > v21) {
      unint64_t v21 = v19;
    }
    if (v21 <= 0x19) {
      unint64_t v21 = 25;
    }
    a1[v21] = a2;
  }
}

uint64_t type metadata accessor for BoundingSectionSpecification()
{
  return sub_21F764F08();
}

uint64_t destroy for MarkPosition(uint64_t a1)
{
  return sub_21F765354(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(_OWORD *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136));
}

uint64_t *initializeWithCopy for MarkPosition(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v13 = a2[9];
  uint64_t v14 = a2[10];
  uint64_t v15 = a2[11];
  uint64_t v16 = a2[12];
  uint64_t v17 = a2[13];
  uint64_t v18 = a2[14];
  uint64_t v19 = a2[15];
  uint64_t v20 = a2[16];
  unint64_t v21 = a2[17];
  sub_21F765124(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  a1[17] = v21;
  return a1;
}

uint64_t assignWithCopy for MarkPosition(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v27 = a2[9];
  uint64_t v28 = a2[10];
  uint64_t v29 = a2[11];
  uint64_t v30 = a2[12];
  uint64_t v31 = a2[13];
  uint64_t v32 = a2[14];
  uint64_t v33 = a2[15];
  uint64_t v34 = a2[16];
  unint64_t v35 = a2[17];
  sub_21F765124(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v27, v28, v29, v30, v31, v32, v33, v34, v35);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  uint64_t v24 = *(void *)(a1 + 128);
  unint64_t v25 = *(void *)(a1 + 136);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v27;
  *(void *)(a1 + 80) = v28;
  *(void *)(a1 + 88) = v29;
  *(void *)(a1 + 96) = v30;
  *(void *)(a1 + 104) = v31;
  *(void *)(a1 + 112) = v32;
  *(void *)(a1 + 120) = v33;
  *(void *)(a1 + 128) = v34;
  *(void *)(a1 + 136) = v35;
  sub_21F765354(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, SBYTE8(v23), v24, v25);
  return a1;
}

uint64_t assignWithTake for MarkPosition(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  long long v11 = *(_OWORD *)(a1 + 64);
  long long v12 = *(_OWORD *)(a1 + 80);
  long long v13 = *(_OWORD *)(a1 + 96);
  long long v14 = *(_OWORD *)(a1 + 112);
  uint64_t v15 = *(void *)(a1 + 128);
  unint64_t v16 = *(void *)(a1 + 136);
  long long v17 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v17;
  long long v18 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v18;
  long long v19 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v19;
  long long v20 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v20;
  *(_OWORD *)(a1 + 128) = a2[8];
  sub_21F765354(v3, v5, v4, v6, v7, v8, v9, v10, v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, SBYTE8(v14), v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for MarkPosition(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 144)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = (*(void *)(a1 + 48) >> 3) & 0xFFFFFFE0 | (*(void *)(a1 + 48) >> 2) & 0x1F;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for MarkPosition(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 136) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 144) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(void *)(a1 + 48) = (8 * -a2) & 0x7FFFFFF00 | (4 * (-a2 & 0x1FLL));
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      *(void *)(a1 + 136) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 144) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

int8x16_t sub_21F9CB680(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 64) & 0xFFFFFFFFFFFFFF8;
  uint64_t v3 = *(void *)(a1 + 136) & 0xFFFFFFFFFFFFFF8 | (a2 << 61);
  *(int8x16_t *)(a1 + 48) = vandq_s8(*(int8x16_t *)(a1 + 48), (int8x16_t)xmmword_21FA28D90);
  *(void *)(a1 + 64) = v2;
  int8x16_t result = vandq_s8(*(int8x16_t *)(a1 + 120), (int8x16_t)xmmword_21FA28DA0);
  *(int8x16_t *)(a1 + 120) = result;
  *(void *)(a1 + 136) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MarkPosition()
{
  return &type metadata for MarkPosition;
}

uint64_t sub_21F9CB6D8(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    sub_21F7A2C08(0, v2, 0);
    uint64_t result = v9;
    uint64_t v4 = (double *)(a1 + 40);
    do
    {
      double v5 = *(v4 - 1);
      double v6 = *v4;
      uint64_t v10 = result;
      unint64_t v8 = *(void *)(result + 16);
      unint64_t v7 = *(void *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        sub_21F7A2C08((char *)(v7 > 1), v8 + 1, 1);
        uint64_t result = v10;
      }
      *(void *)(result + 16) = v8 + 1;
      *(int64x2_t *)(result + 16 * v8 + 32) = vdupq_lane_s64(COERCE__INT64((v5 + v6) * 0.5), 0);
      v4 += 2;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_21F9CB7B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_21FA241F0();
  double v5 = *(void **)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  unsigned int v44 = (char *)&v41 - v9;
  MEMORY[0x270FA5388](v10);
  long long v12 = (char *)&v41 - v11;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v41 - v14;
  uint64_t v16 = sub_21F76CA40(&qword_26AD45B68);
  MEMORY[0x270FA5388](v16);
  long long v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)a1;
  uint64_t v46 = *(void *)(a1 + 8);
  uint64_t v47 = v19;
  int v45 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v48 = *(void *)(a1 + 24);
  uint64_t v20 = sub_21F76CA40(&qword_26AD46A40);
  sub_21F76C978(a1 + *(int *)(v20 + 36), (uint64_t)v18, &qword_26AD45B68);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v21 = &v18[*(int *)(sub_21F76CA40(&qword_26AD455C0) + 48)];
    int v41 = v7;
    long long v22 = v15;
    long long v23 = (void (*)(char *, char *, uint64_t))v5[4];
    unsigned int v43 = v22;
    v23(v22, v18, v4);
    v23(v12, v21, v4);
    uint64_t v24 = (void (*)(char *, char *, uint64_t))v5[2];
    uint64_t v25 = (uint64_t)v44;
    v24(v44, v22, v4);
    uint64_t v26 = (uint64_t)v41;
    v24(v41, v12, v4);
    unsigned int v42 = v12;
    uint64_t v27 = v46;
    uint64_t v28 = v47;
    char v29 = v45;
    sub_21F7652C0(v47, v46, v45);
    swift_bridgeObjectRetain();
    sub_21F9D5BA4(v25);
    uint64_t v31 = v30;
    sub_21F9D5BA4(v26);
    uint64_t v33 = v32;
    uint64_t v34 = (void (*)(uint64_t, uint64_t))v5[1];
    v34(v26, v4);
    uint64_t v35 = v25;
    uint64_t v36 = v28;
    v34(v35, v4);
    sub_21F76CA84(a1, &qword_26AD46A40);
    v34((uint64_t)v42, v4);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v34)(v43, v4);
    char v38 = -127;
  }
  else
  {
    ((void (*)(char *, char *, uint64_t))v5[4])(v15, v18, v4);
    ((void (*)(char *, char *, uint64_t))v5[2])(v12, v15, v4);
    uint64_t v27 = v46;
    uint64_t v36 = v47;
    char v29 = v45;
    sub_21F7652C0(v47, v46, v45);
    swift_bridgeObjectRetain();
    sub_21F9D5BA4((uint64_t)v12);
    uint64_t v31 = v39;
    uint64_t v40 = (void (*)(char *, uint64_t))v5[1];
    v40(v12, v4);
    sub_21F76CA84(a1, &qword_26AD46A40);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v40)(v15, v4);
    char v38 = 1;
    uint64_t v33 = 0;
  }
  *(void *)a2 = v36;
  *(void *)(a2 + 8) = v27;
  *(unsigned char *)(a2 + 16) = v29;
  *(void *)(a2 + 24) = v48;
  *(void *)(a2 + 32) = v31;
  *(void *)(a2 + 40) = v33;
  *(unsigned char *)(a2 + 48) = v38;
  *(void *)(a2 + 56) = v4;
  *(void *)(a2 + 64) = &protocol witness table for Date;
  return result;
}

__n128 sub_21F9CBBA4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v113 = a2;
  uint64_t v114 = a1;
  uint64_t v111 = a6;
  uint64_t v88 = sub_21F76CA40(&qword_26AD4A490);
  MEMORY[0x270FA5388](v88);
  uint64_t v89 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  int v86 = (char *)&v81 - v11;
  uint64_t v100 = sub_21F76CA40(&qword_26AD45360);
  MEMORY[0x270FA5388](v100);
  uint64_t v90 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v92 = (uint64_t)&v81 - v14;
  uint64_t v87 = sub_21F76CA40(&qword_26AD46A40);
  MEMORY[0x270FA5388](v87);
  unsigned int v91 = (uint64_t *)((char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = sub_21FA241F0();
  uint64_t v99 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  int v94 = (char *)&v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v98 = (char *)&v81 - v19;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v95 = (void (*)(char *, uint64_t))((char *)&v81 - v20);
  uint64_t v21 = sub_21F76CA40(&qword_26AD45870);
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v97 = (uint64_t)&v81 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_21FA23EA0();
  uint64_t v108 = *(void *)(v23 - 8);
  unsigned int v109 = (uint64_t *)v23;
  MEMORY[0x270FA5388](v23);
  unsigned int v101 = (char *)&v81 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_21FA24320();
  uint64_t v106 = *(void *)(v25 - 8);
  uint64_t v107 = v25;
  MEMORY[0x270FA5388](v25);
  long long v105 = (char *)&v81 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = sub_21FA24310();
  uint64_t v103 = *(void *)(v104 - 8);
  MEMORY[0x270FA5388](v104);
  uint64_t v102 = (char *)&v81 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v29);
  uint64_t v31 = (char *)&v81 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for PlottableValue();
  MEMORY[0x270FA5388](v32 - 8);
  uint64_t v34 = (char *)&v81 - v33;
  uint64_t v35 = type metadata accessor for PlottableProjection.Storage();
  uint64_t v36 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  char v38 = (uint64_t *)((char *)&v81 - v37);
  uint64_t v112 = a5;
  uint64_t v110 = type metadata accessor for PlottableProjection();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v36 + 16))(v38, v114 + *(int *)(v110 + 44), v35);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      goto LABEL_10;
    case 2u:
      uint64_t v39 = v114;
      uint64_t v93 = a3;
      uint64_t v42 = *(void *)v114;
      uint64_t v43 = *(void *)(v114 + 8);
      char v44 = *(unsigned char *)(v114 + 16);
      uint64_t v45 = *(void *)(v114 + 24);
      swift_getAtKeyPath();
      char v46 = v44;
      uint64_t v47 = v112;
      static PlottableValue.value(_:_:)(v42, v43, v46, v45, a4, (uint64_t)v34);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v31, a4);
      sub_21F764B80((uint64_t)v34, a4, v47, (uint64_t)&v115);
      swift_release();
      (*(void (**)(uint64_t))(*(void *)(v93 - 8) + 8))(v113);
      uint64_t v41 = v111;
      goto LABEL_7;
    case 3u:
      swift_release();
      swift_release();
      goto LABEL_12;
    case 4u:
      uint64_t v48 = *v38;
      uint64_t v93 = a3;
      sub_21FA26AD0();
      uint64_t v49 = v104;
      uint64_t v50 = v107;
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      int v52 = (char *)v38 + *(int *)(TupleTypeMetadata3 + 48);
      int v53 = (char *)v38 + *(int *)(TupleTypeMetadata3 + 64);
      (*(void (**)(char *, char *, uint64_t))(v103 + 32))(v102, v52, v49);
      (*(void (**)(char *, char *, uint64_t))(v106 + 32))(v105, v53, v50);
      uint64_t v85 = v48;
      swift_getAtKeyPath();
      (*(void (**)(uint64_t))(v112 + 24))(a4);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v31, a4);
      int v54 = v98;
      swift_dynamicCast();
      a4 = v97;
      sub_21FA24250();
      uint64_t v28 = v99;
      unint64_t v55 = *(void (**)(char *, uint64_t))(v99 + 8);
      uint64_t AssociatedTypeWitness = v99 + 8;
      uint64_t v95 = v55;
      v55(v54, v16);
      uint64_t v56 = v108;
      char v38 = v109;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(v108 + 48))(a4, 1, v109) == 1) {
        goto LABEL_9;
      }
      (*(void (**)(char *, uint64_t, uint64_t *))(v56 + 32))(v101, a4, v38);
      a4 = *(void *)v114;
      uint64_t v84 = *(void *)(v114 + 8);
      int v83 = *(unsigned __int8 *)(v114 + 16);
      uint64_t v57 = *(void *)(v114 + 24);
      sub_21FA23E90();
      unsigned int v58 = v94;
      sub_21FA23E80();
      sub_21F76CEC0();
      if ((sub_21FA25C70() & 1) == 0)
      {
        __break(1u);
LABEL_9:
        __break(1u);
LABEL_10:
        TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
        char v80 = *(void (**)(char *, uint64_t))(v28 + 8);
        v80((char *)v38 + *(int *)(TupleTypeMetadata2 + 48), a4);
        v80((char *)v38, a4);
LABEL_12:
        sub_21FA266E0();
        __break(1u);
        JUMPOUT(0x21F9CC9B0);
      }
      uint64_t v112 = v57;
      uint64_t v59 = v88;
      int v60 = v86;
      int v61 = &v86[*(int *)(v88 + 48)];
      uint64_t v97 = a4;
      unint64_t v62 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
      v62(v86, v54, v16);
      uint64_t v82 = v61;
      v62(v61, v58, v16);
      unint64_t v63 = v89;
      unint64_t v64 = &v89[*(int *)(v59 + 48)];
      int v65 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
      v65(v89, v60, v16);
      v65(v64, v61, v16);
      uint64_t v66 = (uint64_t)v90;
      v62(v90, v63, v16);
      uint64_t v67 = v95;
      v95(v64, v16);
      unint64_t v68 = &v63[*(int *)(v59 + 48)];
      v62(v63, v60, v16);
      v62(v68, v82, v16);
      v62((char *)(v66 + *(int *)(v100 + 36)), v68, v16);
      v67(v63, v16);
      uint64_t v69 = v92;
      sub_21F76C9DC(v66, v92, &qword_26AD45360);
      sub_21F76C978(v69, v66, &qword_26AD45360);
      uint64_t v70 = (uint64_t)v91;
      uint64_t v71 = v84;
      *unsigned int v91 = v97;
      *(void *)(v70 + 8) = v71;
      LOBYTE(v65) = v83;
      *(unsigned char *)(v70 + 16) = v83;
      *(void *)(v70 + 24) = v112;
      uint64_t v72 = v70 + *(int *)(v87 + 36);
      uint64_t v73 = v72 + *(int *)(sub_21F76CA40(&qword_26AD455C0) + 48);
      v62((char *)v72, (char *)v66, v16);
      v62((char *)v73, (char *)(v66 + *(int *)(v100 + 36)), v16);
      sub_21F76CA40(&qword_26AD45B68);
      swift_storeEnumTagMultiPayload();
      sub_21F7652C0(v97, v71, (char)v65);
      swift_bridgeObjectRetain();
      sub_21F76CA84(v69, &qword_26AD45360);
      sub_21F9CB7B4(v70, (uint64_t)&v115);
      swift_release();
      (*(void (**)(uint64_t))(*(void *)(v93 - 8) + 8))(v113);
      (*(void (**)(char *, uint64_t *))(v108 + 8))(v101, v109);
      (*(void (**)(char *, uint64_t))(v106 + 8))(v105, v107);
      (*(void (**)(char *, uint64_t))(v103 + 8))(v102, v104);
      uint64_t v41 = v111;
      uint64_t v39 = v114;
LABEL_7:
      (*(void (**)(uint64_t))(*(void *)(v110 - 8) + 8))(v39);
      char v74 = v119;
      char v75 = v116;
      uint64_t v76 = v117;
      __n128 result = v120;
      long long v78 = v118;
      *(_OWORD *)uint64_t v41 = v115;
      *(unsigned char *)(v41 + 16) = v75 & 1;
      *(void *)(v41 + 24) = v76;
      *(_OWORD *)(v41 + 32) = v78;
      *(unsigned char *)(v41 + 48) = v74;
      *(__n128 *)(v41 + 56) = result;
      return result;
    default:
      (*(void (**)(char *, uint64_t *, uint64_t))(v28 + 32))(v31, v38, a4);
      uint64_t v39 = v114;
      uint64_t v40 = v112;
      static PlottableValue.value(_:_:)(*(void *)v114, *(void *)(v114 + 8), *(unsigned char *)(v114 + 16), *(void *)(v114 + 24), a4, (uint64_t)v34);
      sub_21F764B80((uint64_t)v34, a4, v40, (uint64_t)&v115);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(v113, a3);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v31, a4);
      uint64_t v41 = v111;
      goto LABEL_7;
  }
}

uint64_t sub_21F9CC9C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v89 = a6;
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v87 = a2;
  uint64_t v88 = v10;
  MEMORY[0x270FA5388](a1);
  uint64_t v82 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PlottableProjection();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v72 - v17;
  MEMORY[0x270FA5388](v19);
  uint64_t v85 = (char *)&v72 - v20;
  MEMORY[0x270FA5388](v21);
  int v86 = (char *)&v72 - v22;
  uint64_t v83 = a4;
  uint64_t v84 = a5;
  uint64_t v23 = type metadata accessor for BoundingSectionSpecification();
  uint64_t v24 = *(void *)(v23 - 8);
  __n128 v25 = MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)&v72 - v26;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v24 + 16))((char *)&v72 - v26, a1, v23, v25);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v87, a3);
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(a1, v23);
      char v30 = v27[8];
      uint64_t v31 = *((void *)v27 + 2);
      char v32 = v27[24];
      uint64_t v91 = *(void *)v27;
      char v92 = v30;
      uint64_t v93 = v31;
      char v94 = v32;
      sub_21F7BC014((uint64_t)&v91);
      uint64_t v29 = &v91;
      break;
    case 2u:
      uint64_t v33 = v87;
      sub_21F9D5780((uint64_t)&v91);
      sub_21F764AF8((uint64_t)&v91, (uint64_t)v90);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v33, a3);
      goto LABEL_6;
    case 3u:
      uint64_t v34 = v87;
      sub_21F9D57DC((uint64_t)&v91);
      sub_21F764AF8((uint64_t)&v91, (uint64_t)v90);
      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v34, a3);
LABEL_6:
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(a1, v23);
      goto LABEL_12;
    case 4u:
      uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
      uint64_t v36 = v86;
      uint64_t v37 = v12;
      uint64_t v81 = v12;
      v35(v86, v27, v12);
      char v38 = v85;
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v85, v36, v37);
      uint64_t v40 = v87;
      uint64_t v39 = v88;
      uint64_t v41 = v82;
      (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v82, v87, a3);
      uint64_t v42 = (uint64_t)v38;
      uint64_t v43 = (uint64_t)v41;
      goto LABEL_11;
    case 5u:
      *(void *)&long long v78 = &v27[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v80 = a1;
      *(void *)&long long v79 = v13;
      char v44 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
      v44(v86, v27, v12);
      v44(v85, (char *)v78, v12);
      uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v79 + 16);
      v45(v18, v86, v12);
      v45(v15, v85, v12);
      uint64_t v47 = v87;
      uint64_t v46 = v88;
      uint64_t v48 = (uint64_t)v82;
      (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v82, v87, a3);
      sub_21F9D382C((uint64_t)v18, (uint64_t)v15, v48, a3, v83, v84, (uint64_t)&v91);
      sub_21F764AF8((uint64_t)&v91, (uint64_t)v90);
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, a3);
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v80, v23);
      uint64_t v49 = *(void (**)(char *, uint64_t))(v79 + 8);
      v49(v85, v12);
      v49(v86, v12);
      goto LABEL_12;
    case 6u:
      type metadata accessor for MarkDimensions();
      uint64_t v50 = &v27[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      unsigned __int8 v51 = *v50;
      long long v52 = *(_OWORD *)(v50 + 8);
      long long v78 = *(_OWORD *)(v50 + 24);
      long long v79 = v52;
      long long v53 = *(_OWORD *)(v50 + 40);
      long long v76 = *(_OWORD *)(v50 + 56);
      long long v77 = v53;
      long long v75 = *(_OWORD *)(v50 + 72);
      uint64_t v74 = *((void *)v50 + 11);
      int v54 = v50[96];
      uint64_t v80 = a1;
      uint64_t v81 = v12;
      uint64_t v55 = *((void *)v50 + 13);
      int v72 = v50[112];
      int v73 = v54;
      uint64_t v56 = v86;
      uint64_t v57 = v27;
      uint64_t v58 = v12;
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v86, v57, v12);
      uint64_t v59 = (uint64_t)v85;
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v85, v56, v58);
      v95[0] = v51;
      long long v96 = v79;
      long long v97 = v78;
      long long v98 = v77;
      long long v99 = v76;
      long long v100 = v75;
      uint64_t v101 = v74;
      char v102 = v73;
      uint64_t v103 = v55;
      char v104 = v72;
      uint64_t v61 = v87;
      uint64_t v60 = v88;
      uint64_t v62 = (uint64_t)v82;
      (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v82, v87, a3);
      sub_21F9D41B4(v59, v95, v62, a3, v83, v84, (uint64_t)&v91);
      sub_21F764AF8((uint64_t)&v91, (uint64_t)v90);
      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v61, a3);
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v80, v23);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v56, v81);
      goto LABEL_12;
    case 7u:
      uint64_t v81 = v12;
      unint64_t v63 = &v27[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v64 = *((void *)v63 + 4);
      uint64_t v65 = *((void *)v63 + 5);
      char v66 = v63[48];
      sub_21F770E38(*((void *)v63 + 1), *((void *)v63 + 2), v63[24]);
      sub_21F770E50(v64, v65, v66);
      uint64_t v67 = v86;
      uint64_t v68 = v81;
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v86, v27, v81);
      uint64_t v69 = v85;
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v85, v67, v68);
      uint64_t v40 = v87;
      uint64_t v39 = v88;
      uint64_t v70 = v82;
      (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v82, v87, a3);
      uint64_t v42 = (uint64_t)v69;
      uint64_t v43 = (uint64_t)v70;
LABEL_11:
      sub_21F9D28A8(v42, v43, a3, v83, v84, (uint64_t)&v91);
      sub_21F764AF8((uint64_t)&v91, (uint64_t)v90);
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v40, a3);
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(a1, v23);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v86, v81);
LABEL_12:
      uint64_t v29 = (uint64_t *)v90;
      break;
    default:
      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v87, a3);
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(a1, v23);
      char v28 = v27[8];
      uint64_t v91 = *(void *)v27;
      char v92 = v28;
      sub_21F9D5DEC((uint64_t)&v91);
      uint64_t v29 = &v91;
      break;
  }
  sub_21F764AF8((uint64_t)v29, (uint64_t)v95);
  return sub_21F764AF8((uint64_t)v95, v89);
}

int64_t sub_21F9CD278(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  void (*v141)(unsigned long long *__return_ptr, unsigned long long *);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  double v145;
  double v146;
  double v147;
  double v148;
  uint64_t v149;
  char *v150;
  void (*v151)(uint64_t, char *, uint64_t);
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  void (*v160)(uint64_t, uint64_t, uint64_t);
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void (*v165)(uint64_t, uint64_t, uint64_t);
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  double v169;
  char v170;
  uint64_t v171;
  double v172;
  char *v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t *v185;
  int v186;
  unsigned __int8 v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  void *v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  unsigned __int8 v205;
  double v206;
  uint64_t v207;
  unsigned long long v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unsigned __int8 v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int64_t v238;
  int64_t v239;
  void (*v240)(uint64_t, uint64_t);
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  int64_t v247;
  uint64_t v248;
  uint64_t v249;
  void (*v250)(uint64_t, uint64_t);
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  void (*v255)(uint64_t, uint64_t);
  void (*v256)(uint64_t, uint64_t);
  uint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t TupleTypeMetadata3;
  char *v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unsigned __int8 v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  int64_t v284;
  uint64_t v285;
  uint64_t v286;
  double v287;
  uint64_t v288;
  uint64_t v289;
  double v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unsigned __int8 v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  int64_t v309;
  uint64_t v310;
  int64_t v311;
  uint64_t v312;
  uint64_t v313;
  char *v314;
  uint64_t v315;
  void (*v316)(char *);
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  void (*v322)(uint64_t, uint64_t);
  uint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  uint64_t v326;
  char *v327;
  char *v328;
  uint64_t v329;
  unsigned __int8 v330;
  uint64_t v331;
  uint64_t *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  void *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  void *v344;
  uint64_t v345;
  int v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unsigned __int8 v350;
  uint64_t v351;
  uint64_t *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  void *v362;
  void *v363;
  uint64_t v364;
  int v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  int v369;
  uint64_t *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  void *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t *v381;
  uint64_t v382;
  void *v383;
  uint64_t v384;
  int v385;
  uint64_t v386;
  int v387;
  uint64_t *v388;
  uint64_t v389;
  char *v390;
  void (*v391)(char *, uint64_t *, uint64_t);
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  void *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  void *v405;
  uint64_t v406;
  int v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  int64_t v414;
  int64x2_t v415;
  uint64_t v416;
  unint64_t v417;
  unint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  void *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  void *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t *v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  char *v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  char *v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  char *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  char *v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t *v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  void (*v516)(char *, uint64_t);
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  char *v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  char *v531;
  uint64_t v532;
  uint64_t WitnessTable;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  char v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  char *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  char *v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  unint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  char v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  unsigned __int8 v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  char *v596;
  char *v597;
  void (*v598)(char *, uint64_t);
  char *v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  char *v603;
  char *v604;
  uint64_t v605;
  char *v606;
  void (*v607)(char *, uint64_t);
  char *v608;
  uint64_t v609;
  uint64_t v610;
  void (*v611)(char *, uint64_t);
  char *v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  double v618;
  double v619;
  uint64_t i;
  double v621;
  uint64_t v622;
  char *v623;
  char *v624;
  char *v625;
  char *v626;
  char *v627;
  char *v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  char *v634;
  uint64_t v635;
  uint64_t v636;
  char *v637;
  uint64_t v638;
  uint64_t v639;
  char *v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  char *v645;
  char *v646;
  char *v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t *v652;
  uint64_t TupleTypeMetadata2;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  void *v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t *v664;
  uint64_t v665;
  int v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  double v678;
  uint64_t *v679;
  uint64_t *v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t *v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  double v691;
  uint64_t v692;
  uint64_t v693;
  int64x2_t v694;
  unsigned long long v695;
  long long v696;
  long long v697;
  _OWORD v698[2];
  long long v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t *v706;
  uint64_t v707;
  uint64_t v708;
  void *v709;
  uint64_t v710;
  uint64_t v711;
  unsigned __int8 v712;
  void v713[13];
  unsigned __int8 v714;
  unsigned char v715[104];
  unsigned __int8 v716;
  unsigned char v717[112];
  unsigned long long v718;
  _OWORD v719[6];
  unsigned long long v720;
  unsigned char v721[88];
  char v722;
  unsigned long long v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t *v727;
  uint64_t v728;
  uint64_t v729;
  void *v730;
  uint64_t v731;
  uint64_t v732;
  unsigned __int8 v733;

  v694.i64[0] = a1;
  v687 = a2;
  sub_21F76C9DC(a2, (uint64_t)v713, &qword_26AD491D0);
  v673 = v713[0];
  v674 = v713[1];
  v667 = v713[3];
  v668 = v713[4];
  v669 = v713[5];
  v670 = v713[6];
  v671 = v713[7];
  v675 = v713[2];
  v676 = v713[8];
  v679 = (uint64_t *)v713[10];
  v680 = (uint64_t *)v713[9];
  v677 = v713[12];
  v678 = *(double *)&v713[11];
  v666 = v714;
  uint64_t v22 = a3[3];
  v692 = a3[2];
  uint64_t v23 = a3[4];
  uint64_t v24 = type metadata accessor for PlottableProjection.Storage();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  v663 = (uint64_t)&v622 - v25;
  uint64_t v26 = sub_21F779EA4(&qword_267EEA378);
  v681 = a5;
  v693 = *(void *)(*(void *)(a5 + 8) + 8);
  uint64_t v27 = *(void *)(v693 + 8);
  uint64_t v28 = sub_21F779E60(&qword_267EEA380, &qword_267EEA378);
  *(void *)&v720 = a4;
  v633 = v26;
  *((void *)&v720 + 1) = v26;
  *(void *)v721 = v27;
  v631 = v28;
  *(void *)&v721[8] = v28;
  uint64_t v29 = sub_21FA26550();
  v638 = *(void *)(v29 - 8);
  v639 = v29;
  MEMORY[0x270FA5388](v29);
  v637 = (char *)&v622 - v30;
  uint64_t v31 = sub_21F779EA4(&qword_267EEA388);
  uint64_t v32 = sub_21F779E60(&qword_267EEA390, &qword_267EEA388);
  *(void *)&v720 = a4;
  v629 = v32;
  v630 = v31;
  *((void *)&v720 + 1) = v31;
  *(void *)v721 = v27;
  *(void *)&v721[8] = v32;
  uint64_t v33 = sub_21FA26550();
  v635 = *(void *)(v33 - 8);
  v636 = v33;
  MEMORY[0x270FA5388](v33);
  v634 = (char *)&v622 - v34;
  v659 = sub_21FA24320();
  v650 = *(void *)(v659 - 8);
  MEMORY[0x270FA5388](v659);
  v627 = (char *)&v622 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v36);
  v649 = (uint64_t)&v622 - v37;
  uint64_t v38 = sub_21FA24310();
  v657 = *(void *)(v38 - 8);
  v658 = v38;
  MEMORY[0x270FA5388](v38);
  v626 = (char *)&v622 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v40);
  v648 = (uint64_t)&v622 - v41;
  v672 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v42);
  *(void *)&v691 = (char *)&v622 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v44);
  v625 = (char *)&v622 - v45;
  MEMORY[0x270FA5388](v46);
  v628 = (char *)&v622 - v47;
  MEMORY[0x270FA5388](v48);
  v655 = (uint64_t)&v622 - v49;
  MEMORY[0x270FA5388](v50);
  v654 = (uint64_t)&v622 - v51;
  MEMORY[0x270FA5388](v52);
  v645 = (char *)&v622 - v53;
  MEMORY[0x270FA5388](v54);
  v647 = (char *)&v622 - v55;
  MEMORY[0x270FA5388](v56);
  v646 = (char *)&v622 - v57;
  MEMORY[0x270FA5388](v58);
  v643 = (uint64_t)&v622 - v59;
  uint64_t v60 = sub_21F779EA4(&qword_26AD45358);
  uint64_t v61 = sub_21F779E60(&qword_267EEA398, &qword_26AD45358);
  *(void *)&v720 = a4;
  *((void *)&v720 + 1) = v60;
  v651 = v27;
  *(void *)v721 = v27;
  v632 = v61;
  *(void *)&v721[8] = v61;
  uint64_t v62 = sub_21FA26550();
  v641 = *(void *)(v62 - 8);
  v642 = v62;
  MEMORY[0x270FA5388](v62);
  v640 = (char *)&v622 - v63;
  v683 = v24;
  v684 = *(uint64_t **)(v24 - 8);
  MEMORY[0x270FA5388](v64);
  v664 = (uint64_t *)((char *)&v622 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v66);
  v624 = (char *)&v622 - v67;
  MEMORY[0x270FA5388](v68);
  v623 = (char *)&v622 - v69;
  MEMORY[0x270FA5388](v70);
  v644 = (uint64_t)&v622 - v71;
  MEMORY[0x270FA5388](v72);
  uint64_t v74 = (uint64_t *)((char *)&v622 - v73);
  MEMORY[0x270FA5388](v75);
  v660 = (uint64_t *)((char *)&v622 - v76);
  MEMORY[0x270FA5388](v77);
  v652 = (uint64_t *)((char *)&v622 - v78);
  v685 = v23;
  v686 = v22;
  v688 = type metadata accessor for PlottableProjection();
  v689 = *(void *)(v688 - 8);
  MEMORY[0x270FA5388](v688);
  v665 = (uint64_t)&v622 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v80);
  v661 = (uint64_t)&v622 - v81;
  MEMORY[0x270FA5388](v82);
  v662 = (uint64_t)&v622 - v83;
  MEMORY[0x270FA5388](v84);
  v656 = (uint64_t)&v622 - v85;
  MEMORY[0x270FA5388](v86);
  uint64_t v88 = (char *)&v622 - v87;
  uint64_t v89 = *(a3 - 1);
  MEMORY[0x270FA5388](v90);
  char v92 = (char *)&v622 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
  v682 = a4;
  char v93 = sub_21FA260F0();
  uint64_t v94 = MEMORY[0x263F8EE78];
  if (v93) {
    return v94;
  }
  (*(void (**)(char *, uint64_t, void *))(v89 + 16))(v92, v690, a3);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v97 = *(void *)&v691;
  switch((int)EnumCaseMultiPayload)
  {
    case 1:
      uint64_t v145 = *(double *)v92;
      if (v92[8]) {
        uint64_t v145 = a11;
      }
      unint64_t v146 = v145 + a7;
      if (v92[24]) {
        unint64_t v147 = a12;
      }
      else {
        unint64_t v147 = *((double *)v92 + 2);
      }
      unint64_t v148 = v147 + a8;
      sub_21F76CA40(&qword_26AD44BD8);
      uint64_t v94 = swift_allocObject();
      *(_OWORD *)(v94 + 16) = xmmword_21FA28550;
      *(double *)(v94 + 32) = v146;
      *(double *)(v94 + 40) = v148;
      return v94;
    case 2:
      double v117 = *(double *)v92;
      MEMORY[0x270FA5388](EnumCaseMultiPayload);
      uint64_t v118 = v682;
      *(&v622 - 8) = v686;
      *(&v622 - 7) = v118;
      v616 = v685;
      v617 = v681;
      v618 = v117;
      v619 = a6;
      i = *(void *)&a7;
      v621 = a8;
      uint64_t v119 = sub_21F76CA40(&qword_26AD447E0);
      uint64_t v94 = sub_21F751B50((void (*)(char *, char *))sub_21F9D6004, (uint64_t)(&v622 - 10), v118, v119, MEMORY[0x263F8E628], v693, MEMORY[0x263F8E658], v120);
      swift_release();
      return v94;
    case 3:
      double v121 = *(double *)v92;
      uint64_t v122 = *((void *)v92 + 1);
      MEMORY[0x270FA5388](EnumCaseMultiPayload);
      uint64_t v123 = v682;
      *(&v622 - 10) = v686;
      *(&v622 - 9) = v123;
      uint64_t v124 = v681;
      *(&v622 - 8) = v685;
      *(&v622 - 7) = v124;
      v616 = *(void *)&v121;
      v617 = *(void *)&a6;
      v618 = a7;
      v619 = a8;
      i = v122;
      uint64_t v125 = sub_21F76CA40(&qword_26AD447E0);
      uint64_t v94 = sub_21F751B50((void (*)(char *, char *))sub_21F9D5F88, (uint64_t)(&v622 - 12), v123, v125, MEMORY[0x263F8E628], v693, MEMORY[0x263F8E658], v126);
      swift_release();
      swift_release();
      return v94;
    case 4:
      uint64_t v99 = v689;
      uint64_t v100 = v665;
      uint64_t v101 = v688;
      (*(void (**)(uint64_t, char *, uint64_t))(v689 + 32))(v665, v92, v688);
      uint64_t v102 = v687;
      sub_21F76C9DC(v687, (uint64_t)v715, &qword_26AD491D0);
      if (v716 != 255)
      {
        sub_21F76C9DC((uint64_t)v715, (uint64_t)v717, &qword_26AD47AB8);
        ((void (*)(uint64_t *, uint64_t, uint64_t))v684[2])(v664, v100 + *(int *)(v101 + 44), v683);
        int v103 = swift_getEnumCaseMultiPayload();
        uint64_t v105 = v658;
        uint64_t v104 = v659;
        uint64_t v106 = v657;
        switch(v103)
        {
          case 1:
            v313 = v686;
            v314 = (char *)v664 + *(int *)(swift_getTupleTypeMetadata2() + 48);
            int v315 = v672;
            long long v316 = *(void (**)(char *))(v672 + 32);
            long long v317 = (uint64_t)v625;
            v316(v625);
            ((void (*)(uint64_t, char *, uint64_t))v316)(v97, v314, v313);
            sub_21F76C9DC((uint64_t)v717, (uint64_t)&v720, &qword_26AD47AB8);
            if ((v722 & 1) == 0)
            {
              v719[3] = *(_OWORD *)&v721[48];
              v719[4] = *(_OWORD *)&v721[64];
              *(void *)&v719[5] = *(void *)&v721[80];
              v718 = v720;
              v719[0] = *(_OWORD *)v721;
              v719[2] = *(_OWORD *)&v721[32];
              v719[1] = *(_OWORD *)&v721[16];
              sub_21F76CA40(&qword_26AD44BD8);
              long long v318 = swift_allocObject();
              *(_OWORD *)(v318 + 16) = xmmword_21FA28550;
              v698[1] = *(_OWORD *)&v721[48];
              v699 = *(_OWORD *)&v721[64];
              v700 = *(void *)&v721[80];
              v695 = v720;
              v696 = *(_OWORD *)v721;
              v697 = *(_OWORD *)&v721[16];
              v698[0] = *(_OWORD *)&v721[32];
              LOBYTE(v621) = v666 & 1;
              i = v677;
              v619 = v678;
              v618 = *(double *)&v679;
              v617 = (uint64_t)v680;
              sub_21F764268(v673, v674, v675, v667, v668, v669, v670, v671, v676);
              long long v319 = sub_21F76CA40(&qword_267EEA3A0);
              uint64_t v320 = v685;
              sub_21F8B54F0(v317, v319, v313, v685);
              v698[1] = v719[3];
              v699 = v719[4];
              v700 = *(void *)&v719[5];
              v695 = v718;
              v696 = v719[0];
              v697 = v719[1];
              v698[0] = v719[2];
              v321 = *(void *)&v691;
              sub_21F8B54F0(*(uint64_t *)&v691, v319, v313, v320);
              sub_21F9D6318(v687, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
              v322 = *(void (**)(uint64_t, uint64_t))(v315 + 8);
              v322(v321, v313);
              v322(v317, v313);
              uint64_t v94 = v318;
              (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v665, v688);
              return v94;
            }
            LODWORD(v621) = 0;
            v615 = 481;
            goto LABEL_144;
          case 2:
            uint64_t v270 = *v664;
            sub_21F76C9DC((uint64_t)v717, (uint64_t)&v720, &qword_26AD47AB8);
            if (v722)
            {
              v718 = v720;
              v691 = *(double *)v721;
              *(void *)&v719[0] = *(void *)v721;
              LODWORD(v690) = v721[8];
              BYTE8(v719[0]) = v721[8];
              *(_OWORD *)((char *)&v719[1] + 9) = *(_OWORD *)&v721[25];
              *(_OWORD *)((char *)&v719[2] + 9) = *(_OWORD *)&v721[41];
              *(_OWORD *)((char *)&v719[3] + 9) = *(_OWORD *)&v721[57];
              *(_OWORD *)((char *)&v719[4] + 8) = *(_OWORD *)&v721[72];
              *(_OWORD *)((char *)v719 + 9) = *(_OWORD *)&v721[9];
              LODWORD(v692) = v666 & 1;
              uint64_t v271 = v676;
              v693 = v270;
              uint64_t v273 = v673;
              uint64_t v272 = v674;
              uint64_t v274 = v675;
              uint64_t v275 = v667;
              uint64_t v276 = v668;
              uint64_t v278 = v669;
              uint64_t v277 = v670;
              long long v279 = v671;
              sub_21F764268(v673, v674, v675, v667, v668, v669, v670, v671, v676);
              LOBYTE(v621) = v692;
              i = v677;
              v619 = v678;
              v618 = *(double *)&v679;
              v617 = (uint64_t)v680;
              long long v280 = v273;
              uint64_t v281 = v693;
              sub_21F764268(v280, v272, v274, v275, v276, v278, v277, v279, v271);
              uint64_t v282 = sub_21F76CA40(&qword_267EEA3A8);
              uint64_t v283 = sub_21F8B555C(v694.i64[0], v281, v282, v682, v685, v681);
              uint64_t v284 = *(void *)(v283 + 16);
              if (v284)
              {
                *(void *)&v718 = MEMORY[0x263F8EE78];
                sub_21F7A2C08(0, v284, 0);
                uint64_t v285 = 0;
                uint64_t v286 = v718;
                if (v690) {
                  uint64_t v287 = 0.0;
                }
                else {
                  uint64_t v287 = v691;
                }
                uint64_t v288 = *(void *)(v718 + 16);
                v289 = 16 * v288;
                do
                {
                  uint64_t v290 = *(double *)(v283 + 32 + 8 * v285);
                  *(void *)&v718 = v286;
                  uint64_t v291 = *(void *)(v286 + 24);
                  uint64_t v292 = v288 + v285 + 1;
                  if (v288 + v285 >= v291 >> 1)
                  {
                    sub_21F7A2C08((char *)(v291 > 1), v288 + v285 + 1, 1);
                    uint64_t v286 = v718;
                  }
                  ++v285;
                  *(void *)(v286 + 16) = v292;
                  uint64_t v293 = v286 + v289;
                  *(double *)(v293 + 32) = v290 + a7 + a9;
                  *(double *)(v293 + 40) = v287 + v290 + a8 - a10;
                  v289 += 16;
                }
                while (v284 != v285);
                v518 = v286;
                swift_release();
                v519 = v687;
                sub_21F9D6318(v687, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
                swift_bridgeObjectRelease();
              }
              else
              {
                swift_release();
                v519 = v687;
                sub_21F9D6318(v687, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
                swift_bridgeObjectRelease();
                v518 = MEMORY[0x263F8EE78];
              }
              (*(void (**)(uint64_t, uint64_t))(v689 + 8))(v665, v688);
              sub_21F9D6318(v519, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
              return v518;
            }
            else
            {
              v719[3] = *(_OWORD *)&v721[48];
              v719[4] = *(_OWORD *)&v721[64];
              *(void *)&v719[5] = *(void *)&v721[80];
              v718 = v720;
              v719[0] = *(_OWORD *)v721;
              v719[2] = *(_OWORD *)&v721[32];
              v719[1] = *(_OWORD *)&v721[16];
              LOBYTE(v621) = v666 & 1;
              i = v677;
              v619 = v678;
              v618 = *(double *)&v679;
              v617 = (uint64_t)v680;
              sub_21F764268(v673, v674, v675, v667, v668, v669, v670, v671, v676);
              char v412 = sub_21F76CA40(&qword_267EEA3A0);
              char v413 = sub_21F8B5C30(v694.i64[0], v270, v412, v682, v685, v681);
              char v414 = *(void *)(v413 + 16);
              if (v414)
              {
                *(void *)&v718 = MEMORY[0x263F8EE78];
                sub_21F7A2C08(0, v414, 0);
                uint64_t v416 = 0;
                uint64_t v94 = v718;
                v417 = *(void *)(v718 + 16);
                do
                {
                  v415.i64[0] = *(void *)(v413 + 8 * v416 + 32);
                  *(void *)&v718 = v94;
                  v418 = *(void *)(v94 + 24);
                  if (v417 >= v418 >> 1)
                  {
                    v694 = v415;
                    sub_21F7A2C08((char *)(v418 > 1), v417 + 1, 1);
                    v415.i64[0] = v694.i64[0];
                    uint64_t v94 = v718;
                  }
                  ++v416;
                  *(void *)(v94 + 16) = v417 + 1;
                  uint64_t v415 = vdupq_lane_s64(v415.i64[0], 0);
                  *(int64x2_t *)(v94 + 16 * v417++ + 32) = v415;
                }
                while (v414 != v416);
                swift_release();
                sub_21F9D6318(v687, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
                swift_bridgeObjectRelease();
                uint64_t v101 = v688;
              }
              else
              {
                swift_release();
                sub_21F9D6318(v687, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
                swift_bridgeObjectRelease();
                uint64_t v94 = MEMORY[0x263F8EE78];
              }
              (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v665, v101);
            }
            return v94;
          case 3:
            uint64_t v294 = v664[1];
            v692 = *v664;
            v693 = v294;
            sub_21F76C9DC((uint64_t)v717, (uint64_t)&v720, &qword_26AD47AB8);
            if ((v722 & 1) == 0)
            {
              v719[3] = *(_OWORD *)&v721[48];
              v719[4] = *(_OWORD *)&v721[64];
              *(void *)&v719[5] = *(void *)&v721[80];
              v718 = v720;
              v719[0] = *(_OWORD *)v721;
              v719[2] = *(_OWORD *)&v721[32];
              v719[1] = *(_OWORD *)&v721[16];
              v698[1] = *(_OWORD *)&v721[48];
              v699 = *(_OWORD *)&v721[64];
              v700 = *(void *)&v721[80];
              v695 = v720;
              v696 = *(_OWORD *)v721;
              v697 = *(_OWORD *)&v721[16];
              v698[0] = *(_OWORD *)&v721[32];
              LODWORD(v691) = v666 & 1;
              uint64_t v295 = v676;
              int v297 = v673;
              v296 = v674;
              int v298 = v675;
              long long v300 = v667;
              long long v299 = v668;
              long long v302 = v669;
              long long v301 = v670;
              uint64_t v303 = v671;
              sub_21F764268(v673, v674, v675, v667, v668, v669, v670, v671, v676);
              LOBYTE(v621) = LOBYTE(v691);
              i = v677;
              v619 = v678;
              v618 = *(double *)&v679;
              v617 = (uint64_t)v680;
              sub_21F764268(v297, v296, v298, v300, v299, v302, v301, v303, v295);
              uint64_t v304 = sub_21F76CA40(&qword_267EEA3A0);
              v305 = v694.i64[0];
              int v307 = v681;
              v306 = v682;
              long long v308 = v685;
              long long v309 = sub_21F8B5C30(v694.i64[0], v692, v304, v682, v685, v681);
              v698[1] = v719[3];
              v699 = v719[4];
              v700 = *(void *)&v719[5];
              v695 = v718;
              v696 = v719[0];
              v697 = v719[1];
              v698[0] = v719[2];
              long long v310 = sub_21F8B5C30(v305, v693, v304, v306, v308, v307);
              long long v311 = sub_21F7A97F0(v309, v310);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v312 = v687;
              sub_21F9D6318(v687, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
              swift_release();
              swift_release();
              uint64_t v94 = v311;
              sub_21F9D6318(v312, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
LABEL_66:
              (*(void (**)(uint64_t, uint64_t))(v689 + 8))(v665, v688);
              return v94;
            }
            LODWORD(v621) = 0;
            v615 = 465;
            break;
          case 4:
            long long v258 = v664;
            long long v259 = *v664;
            sub_21FA26AD0();
            TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
            long long v261 = (char *)v258 + *(int *)(TupleTypeMetadata3 + 48);
            long long v262 = (char *)v258 + *(int *)(TupleTypeMetadata3 + 64);
            long long v263 = (uint64_t)v626;
            (*(void (**)(char *, char *, uint64_t))(v106 + 32))(v626, v261, v105);
            uint64_t v264 = v650;
            uint64_t v265 = (uint64_t)v627;
            (*(void (**)(char *, char *, uint64_t))(v650 + 32))(v627, v262, v104);
            sub_21F76C9DC((uint64_t)v717, (uint64_t)&v720, &qword_26AD47AB8);
            if (v722) {
              goto LABEL_137;
            }
            v719[3] = *(_OWORD *)&v721[48];
            v719[4] = *(_OWORD *)&v721[64];
            *(void *)&v719[5] = *(void *)&v721[80];
            v718 = v720;
            v719[0] = *(_OWORD *)v721;
            v719[2] = *(_OWORD *)&v721[32];
            v719[1] = *(_OWORD *)&v721[16];
            LOBYTE(v621) = v666 & 1;
            i = v677;
            v619 = v678;
            v618 = *(double *)&v679;
            v617 = (uint64_t)v680;
            sub_21F764268(v673, v674, v675, v667, v668, v669, v670, v671, v676);
            uint64_t v266 = sub_21F76CA40(&qword_267EEA3A0);
            uint64_t v267 = sub_21F8B5894(v694.i64[0], v259, v263, v265, v266, v682, v685, v681);
            uint64_t v268 = v265;
            uint64_t v269 = sub_21F9CB6D8(v267);
            swift_release();
            sub_21F9D6318(v687, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
            uint64_t v94 = v269;
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v264 + 8))(v268, v104);
            (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v263, v105);
            goto LABEL_66;
          default:
            uint64_t v107 = v665;
            uint64_t v108 = v672;
            uint64_t v109 = (uint64_t)v628;
            uint64_t v110 = v686;
            (*(void (**)(char *, uint64_t *, uint64_t))(v672 + 32))(v628, v664, v686);
            sub_21F76C9DC((uint64_t)v717, (uint64_t)&v720, &qword_26AD47AB8);
            if (v722)
            {
              v718 = v720;
              double v111 = *(double *)v721;
              uint64_t v112 = v102;
              char v113 = v721[8];
              *(void *)&v719[0] = *(void *)v721;
              BYTE8(v719[0]) = v721[8];
              *(_OWORD *)((char *)&v719[1] + 9) = *(_OWORD *)&v721[25];
              *(_OWORD *)((char *)&v719[2] + 9) = *(_OWORD *)&v721[41];
              *(_OWORD *)((char *)&v719[3] + 9) = *(_OWORD *)&v721[57];
              *(_OWORD *)((char *)&v719[4] + 8) = *(_OWORD *)&v721[72];
              *(_OWORD *)((char *)v719 + 9) = *(_OWORD *)&v721[9];
              LOBYTE(v621) = v666 & 1;
              i = v677;
              v619 = v678;
              v618 = *(double *)&v679;
              v617 = (uint64_t)v680;
              sub_21F764268(v673, v674, v675, v667, v668, v669, v670, v671, v676);
              sub_21F76CA40(&qword_267EEA3A8);
              sub_21F8B53F0(v109);
              double v114 = *(double *)&v695;
              sub_21F76CA40(&qword_26AD44BD8);
              uint64_t v115 = swift_allocObject();
              uint64_t v94 = v115;
              *(_OWORD *)(v115 + 16) = xmmword_21FA28550;
              double v116 = v111;
              if (v113) {
                double v116 = 0.0;
              }
              *(double *)(v115 + 32) = v114 + a7 + a9;
              *(double *)(v115 + 40) = v114 + v116 + a8 - a10;
              sub_21F9D6318(v112, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
              (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v109, v110);
              (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v107, v688);
            }
            else
            {
              v719[3] = *(_OWORD *)&v721[48];
              v719[4] = *(_OWORD *)&v721[64];
              *(void *)&v719[5] = *(void *)&v721[80];
              v718 = v720;
              v719[0] = *(_OWORD *)v721;
              v719[2] = *(_OWORD *)&v721[32];
              v719[1] = *(_OWORD *)&v721[16];
              LOBYTE(v621) = v666 & 1;
              i = v677;
              v619 = v678;
              v618 = *(double *)&v679;
              v617 = (uint64_t)v680;
              sub_21F764268(v673, v674, v675, v667, v668, v669, v670, v671, v676);
              v419 = sub_21F76CA40(&qword_267EEA3A0);
              sub_21F8B54F0(v109, v419, v110, v685);
              v420 = v695;
              sub_21F76CA40(&qword_26AD44BD8);
              uint64_t v94 = swift_allocObject();
              *(_OWORD *)(v94 + 16) = xmmword_21FA28550;
              *(void *)(v94 + 32) = v420;
              *(void *)(v94 + 40) = v420;
              sub_21F9D6318(v102, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
              (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v109, v110);
              (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v107, v101);
            }
            return v94;
        }
        goto LABEL_144;
      }
      LODWORD(v621) = 0;
      i = 449;
      goto LABEL_136;
    case 5:
      long long v149 = v688;
      long long v150 = &v92[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      long long v151 = *(void (**)(uint64_t, char *, uint64_t))(v689 + 32);
      int v152 = v662;
      v151(v662, v92, v149);
      char v153 = v661;
      v151(v661, v150, v149);
      sub_21F76C9DC(v687, (uint64_t)v715, &qword_26AD491D0);
      if (v716 == 255)
      {
        LODWORD(v621) = 0;
        i = 424;
        goto LABEL_136;
      }
      sub_21F76C9DC((uint64_t)v715, (uint64_t)v717, &qword_26AD47AB8);
      uint64_t v154 = *(int *)(v149 + 44);
      unint64_t v155 = v152 + v154;
      long long v156 = v153 + v154;
      uint64_t v157 = v663;
      uint64_t v158 = (uint64_t *)(v663 + *(int *)(TupleTypeMetadata2 + 48));
      uint64_t v159 = v683;
      uint64_t v160 = (void (*)(uint64_t, uint64_t, uint64_t))v684[2];
      v160(v663, v155, v683);
      v160((uint64_t)v158, v156, v159);
      uint64_t v161 = swift_getEnumCaseMultiPayload();
      uint64_t v162 = v654;
      uint64_t v163 = v655;
      switch(v161)
      {
        case 1:
          v604 = v624;
          v160((uint64_t)v624, v157, v159);
          v605 = *(int *)(swift_getTupleTypeMetadata2() + 48);
          v606 = &v604[v605];
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            LOBYTE(v621) = v666 & 1;
            i = v677;
            v619 = v678;
            v618 = *(double *)&v679;
            v617 = (uint64_t)v680;
            sub_21F764268(v673, v674, v675, v667, v668, v669, v670, v671, v676);
            v607 = *(void (**)(char *, uint64_t))(v672 + 8);
            v608 = (char *)v158 + v605;
            v609 = v686;
            v607(v608, v686);
            v607((char *)v158, v609);
            v607(v606, v609);
            v607(v624, v609);
LABEL_125:
            ((void (*)(uint64_t, uint64_t))v684[1])(v663, v683);
            LODWORD(v621) = 0;
            i = 444;
            goto LABEL_136;
          }
          LOBYTE(v621) = v666 & 1;
          i = v677;
          v619 = v678;
          v618 = *(double *)&v679;
          v617 = (uint64_t)v680;
          sub_21F764268(v673, v674, v675, v667, v668, v669, v670, v671, v676);
          v611 = *(void (**)(char *, uint64_t))(v672 + 8);
          v612 = v606;
          v613 = v686;
          v611(v612, v686);
          v611(v624, v613);
          goto LABEL_135;
        case 2:
          v160((uint64_t)v74, v157, v159);
          long long v220 = *v74;
          if (swift_getEnumCaseMultiPayload() == 2)
          {
            v693 = v220;
            v692 = *v158;
            sub_21F76C9DC((uint64_t)v717, (uint64_t)&v720, &qword_26AD47AB8);
            v719[3] = *(_OWORD *)&v721[48];
            v719[4] = *(_OWORD *)&v721[64];
            *(void *)&v719[5] = *(void *)&v721[80];
            v718 = v720;
            v719[0] = *(_OWORD *)v721;
            v719[2] = *(_OWORD *)&v721[32];
            v719[1] = *(_OWORD *)&v721[16];
            v698[1] = *(_OWORD *)&v721[48];
            v699 = *(_OWORD *)&v721[64];
            v700 = *(void *)&v721[80];
            v695 = v720;
            v696 = *(_OWORD *)v721;
            v697 = *(_OWORD *)&v721[16];
            v698[0] = *(_OWORD *)&v721[32];
            LODWORD(v691) = v666 & 1;
            long long v221 = v676;
            long long v223 = v673;
            long long v222 = v674;
            long long v224 = v675;
            uint64_t v226 = v667;
            uint64_t v225 = v668;
            uint64_t v228 = v669;
            uint64_t v227 = v670;
            uint64_t v229 = v671;
            if (v722)
            {
              sub_21F764268(v673, v674, v675, v667, v668, v669, v670, v671, v676);
              sub_21F764268(v223, v222, v224, v226, v225, v228, v227, v229, v221);
              uint64_t v230 = sub_21F76CA40(&qword_267EEA3A8);
              uint64_t v231 = v694.i64[0];
              uint64_t v232 = v681;
              uint64_t v233 = v682;
              uint64_t v234 = v685;
              uint64_t v235 = sub_21F8B555C(v694.i64[0], v693, v230, v682, v685, v681);
              v698[1] = v719[3];
              v699 = v719[4];
              v700 = *(void *)&v719[5];
              v695 = v718;
              v696 = v719[0];
              v697 = v719[1];
              v698[0] = v719[2];
              uint64_t v236 = sub_21F8B555C(v231, v692, v230, v233, v234, v232);
              uint64_t v237 = v687;
              MEMORY[0x270FA5388](v236);
              v616 = *(void *)&a6;
              v617 = *(void *)&a7;
              v618 = a8;
              v619 = a9;
              i = *(void *)&a10;
              v621 = COERCE_DOUBLE(&v718);
              sub_21F9D6088(v235, v236, (double (*)(uint64_t, double, double))sub_21F9D6050);
              uint64_t v239 = v238;
              swift_release();
              swift_release();
              sub_21F9D6318(v237, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              long long v240 = *(void (**)(uint64_t, uint64_t))(v689 + 8);
              uint64_t v241 = v688;
              v240(v661, v688);
              v240(v662, v241);
              sub_21F9D6318(v237, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
            }
            else
            {
              sub_21F764268(v673, v674, v675, v667, v668, v669, v670, v671, v676);
              LOBYTE(v621) = LOBYTE(v691);
              i = v677;
              v619 = v678;
              v618 = *(double *)&v679;
              v617 = (uint64_t)v680;
              sub_21F764268(v223, v222, v224, v226, v225, v228, v227, v229, v221);
              uint64_t v242 = sub_21F76CA40(&qword_267EEA3A0);
              uint64_t v243 = v694.i64[0];
              uint64_t v244 = v681;
              uint64_t v245 = v682;
              uint64_t v246 = v685;
              uint64_t v247 = sub_21F8B5C30(v694.i64[0], v693, v242, v682, v685, v681);
              v698[1] = v719[3];
              v699 = v719[4];
              v700 = *(void *)&v719[5];
              v695 = v718;
              v696 = v719[0];
              v697 = v719[1];
              v698[0] = v719[2];
              uint64_t v248 = sub_21F8B5C30(v243, v692, v242, v245, v246, v244);
              uint64_t v239 = sub_21F7A97F0(v247, v248);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v249 = v687;
              sub_21F9D6318(v687, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
              swift_release();
              swift_release();
              sub_21F9D6318(v249, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
              v250 = *(void (**)(uint64_t, uint64_t))(v689 + 8);
              int v251 = v688;
              v250(v661, v688);
              v250(v662, v251);
            }
            ((void (*)(uint64_t, uint64_t))v684[1])(v663, v683);
            return v239;
          }
          LOBYTE(v621) = v666 & 1;
          i = v677;
          v619 = v678;
          v618 = *(double *)&v679;
          v617 = (uint64_t)v680;
          sub_21F764268(v673, v674, v675, v667, v668, v669, v670, v671, v676);
          swift_release();
          goto LABEL_135;
        case 3:
          v160((uint64_t)v623, v157, v159);
          LOBYTE(v621) = v666 & 1;
          i = v677;
          v619 = v678;
          v618 = *(double *)&v679;
          v617 = (uint64_t)v680;
          sub_21F764268(v673, v674, v675, v667, v668, v669, v670, v671, v676);
          swift_release();
          swift_release();
          if (swift_getEnumCaseMultiPayload() != 3) {
            goto LABEL_135;
          }
          swift_release();
          swift_release();
          goto LABEL_125;
        case 4:
          LOBYTE(v621) = v666 & 1;
          i = v677;
          v619 = v678;
          v618 = *(double *)&v679;
          v617 = (uint64_t)v680;
          sub_21F764268(v673, v674, v675, v667, v668, v669, v670, v671, v676);
          goto LABEL_135;
        default:
          uint64_t v164 = v644;
          v160(v644, v157, v159);
          if (swift_getEnumCaseMultiPayload())
          {
            LOBYTE(v621) = v666 & 1;
            i = v677;
            v619 = v678;
            v618 = *(double *)&v679;
            v617 = (uint64_t)v680;
            sub_21F764268(v673, v674, v675, v667, v668, v669, v670, v671, v676);
            (*(void (**)(uint64_t, uint64_t))(v672 + 8))(v164, v686);
LABEL_135:
            LODWORD(v621) = 0;
            i = 446;
            goto LABEL_136;
          }
          uint64_t v165 = *(void (**)(uint64_t, uint64_t, uint64_t))(v672 + 32);
          uint64_t v166 = v164;
          unint64_t v167 = v686;
          v165(v162, v166, v686);
          v165(v163, (uint64_t)v158, v167);
          sub_21F76C9DC((uint64_t)v717, (uint64_t)&v720, &qword_26AD47AB8);
          uint64_t v168 = v689;
          if (v722)
          {
            v723 = v720;
            uint64_t v169 = *(double *)v721;
            uint64_t v170 = v721[8];
            v697 = *(_OWORD *)&v721[41];
            v698[0] = *(_OWORD *)&v721[57];
            *(_OWORD *)((char *)v698 + 15) = *(_OWORD *)&v721[72];
            v695 = *(_OWORD *)&v721[9];
            v696 = *(_OWORD *)&v721[25];
            sub_21F76CA40(&qword_26AD44BD8);
            uint64_t v171 = swift_allocObject();
            *(_OWORD *)(v171 + 16) = xmmword_21FA28550;
            v718 = v720;
            *(double *)v719 = v169;
            BYTE8(v719[0]) = v170;
            *(_OWORD *)((char *)&v719[1] + 9) = *(_OWORD *)&v721[25];
            *(_OWORD *)((char *)&v719[2] + 9) = *(_OWORD *)&v721[41];
            *(_OWORD *)((char *)&v719[3] + 9) = *(_OWORD *)&v721[57];
            *(_OWORD *)((char *)&v719[4] + 8) = *(_OWORD *)&v721[72];
            *(_OWORD *)((char *)v719 + 9) = *(_OWORD *)&v721[9];
            LOBYTE(v621) = v666 & 1;
            i = v677;
            v619 = v678;
            v618 = *(double *)&v679;
            v617 = (uint64_t)v680;
            sub_21F764268(v673, v674, v675, v667, v668, v669, v670, v671, v676);
            sub_21F76CA40(&qword_267EEA3A8);
            sub_21F8B53F0(v162);
            *(double *)(v171 + 32) = *(double *)&v701 + a7 + a9;
            v718 = v723;
            *(double *)v719 = v169;
            BYTE8(v719[0]) = v170;
            *(_OWORD *)((char *)&v719[1] + 9) = v696;
            *(_OWORD *)((char *)&v719[2] + 9) = v697;
            *(_OWORD *)((char *)&v719[3] + 9) = v698[0];
            *(_OWORD *)((char *)&v719[4] + 8) = *(_OWORD *)((char *)v698 + 15);
            *(_OWORD *)((char *)v719 + 9) = v695;
            unint64_t v167 = v686;
            sub_21F8B53F0(v163);
            uint64_t v172 = v169;
            uint64_t v168 = v689;
            if (v170) {
              uint64_t v172 = 0.0;
            }
            v694.i64[0] = v171;
            *(double *)(v171 + 40) = *(double *)&v701 + v172 + a8 - a10;
            uint64_t v159 = v683;
          }
          else
          {
            v719[3] = *(_OWORD *)&v721[48];
            v719[4] = *(_OWORD *)&v721[64];
            *(void *)&v719[5] = *(void *)&v721[80];
            v718 = v720;
            v719[0] = *(_OWORD *)v721;
            v719[2] = *(_OWORD *)&v721[32];
            v719[1] = *(_OWORD *)&v721[16];
            sub_21F76CA40(&qword_26AD44BD8);
            long long v252 = swift_allocObject();
            *(_OWORD *)(v252 + 16) = xmmword_21FA28550;
            v694.i64[0] = v252;
            v698[1] = *(_OWORD *)&v721[48];
            v699 = *(_OWORD *)&v721[64];
            v700 = *(void *)&v721[80];
            v695 = v720;
            v696 = *(_OWORD *)v721;
            v697 = *(_OWORD *)&v721[16];
            v698[0] = *(_OWORD *)&v721[32];
            LOBYTE(v621) = v666 & 1;
            i = v677;
            v619 = v678;
            v618 = *(double *)&v679;
            v617 = (uint64_t)v680;
            sub_21F764268(v673, v674, v675, v667, v668, v669, v670, v671, v676);
            long long v253 = sub_21F76CA40(&qword_267EEA3A0);
            long long v254 = v685;
            sub_21F8B54F0(v162, v253, v167, v685);
            v698[1] = v719[3];
            v699 = v719[4];
            v700 = *(void *)&v719[5];
            v695 = v718;
            v696 = v719[0];
            v697 = v719[1];
            v698[0] = v719[2];
            sub_21F8B54F0(v163, v253, v167, v254);
          }
          sub_21F9D6318(v687, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
          long long v255 = *(void (**)(uint64_t, uint64_t))(v672 + 8);
          v255(v163, v167);
          v255(v162, v167);
          long long v256 = *(void (**)(uint64_t, uint64_t))(v168 + 8);
          long long v257 = v688;
          v256(v661, v688);
          v256(v662, v257);
          ((void (*)(uint64_t, uint64_t))v684[1])(v663, v159);
          uint64_t v94 = v694.i64[0];
          break;
      }
      return v94;
    case 6:
      v628 = (char *)v60;
      type metadata accessor for MarkDimensions();
      uint64_t v173 = v88;
      uint64_t v174 = v688;
      uint64_t v175 = &v92[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v176 = *((void *)v175 + 1);
      v690 = *((void *)v175 + 2);
      v665 = *((void *)v175 + 3);
      uint64_t v177 = *((void *)v175 + 4);
      v656 = *((void *)v175 + 5);
      uint64_t v178 = (uint64_t *)*((void *)v175 + 6);
      v663 = v176;
      v664 = v178;
      unsigned int v179 = *((void *)v175 + 7);
      long long v180 = *((void *)v175 + 8);
      v661 = v177;
      v662 = v179;
      v660 = (void *)*((void *)v175 + 9);
      v691 = *((double *)v175 + 10);
      v655 = *((void *)v175 + 11);
      uint64_t v181 = v175[96];
      uint64_t v182 = *((void *)v175 + 13);
      int v183 = v175[112];
      (*(void (**)(char *, char *, uint64_t))(v689 + 32))(v173, v92, v174);
      sub_21F76C9DC(v687, (uint64_t)v715, &qword_26AD491D0);
      if (v716 != 255)
      {
        sub_21F76C9DC((uint64_t)v715, (uint64_t)v717, &qword_26AD47AB8);
        unsigned int v184 = *(int *)(v174 + 44);
        TupleTypeMetadata2 = (uint64_t)v173;
        uint64_t v185 = v652;
        ((void (*)(uint64_t *, char *, uint64_t))v684[2])(v652, &v173[v184], v683);
        char v186 = swift_getEnumCaseMultiPayload();
        LODWORD(v645) = v183;
        v644 = v182;
        v654 = v180;
        switch(v186)
        {
          case 1:
            uint64_t v388 = v185;
            uint64_t v389 = v686;
            uint64_t v390 = (char *)v388 + *(int *)(swift_getTupleTypeMetadata2() + 48);
            long long v391 = *(void (**)(char *, uint64_t *, uint64_t))(v672 + 32);
            v391(v646, v388, v389);
            v391(v647, (uint64_t *)v390, v389);
            uint64_t v392 = sub_21F76C9DC((uint64_t)v717, (uint64_t)&v720, &qword_26AD47AB8);
            if ((v722 & 1) == 0)
            {
              v719[3] = *(_OWORD *)&v721[48];
              v719[4] = *(_OWORD *)&v721[64];
              *(void *)&v719[5] = *(void *)&v721[80];
              v718 = v720;
              v719[0] = *(_OWORD *)v721;
              v719[2] = *(_OWORD *)&v721[32];
              v719[1] = *(_OWORD *)&v721[16];
              uint64_t v393 = v663;
              if (v181 == 255)
              {
                v501 = *(void *)&v691;
                char v411 = v692;
                sub_21F882770((uint64_t)&v723);
                uint64_t v395 = *((void *)&v723 + 1);
                uint64_t v394 = v723;
                uint64_t v396 = v724;
                uint64_t v399 = v725;
                uint64_t v400 = v726;
                uint64_t v401 = v727;
                uint64_t v403 = v728;
                uint64_t v404 = v729;
                char v405 = v730;
                char v406 = v731;
                char v409 = v732;
                char v410 = v501;
                char v407 = v733;
                uint64_t v402 = v393;
                uint64_t v398 = v660;
                uint64_t v397 = v661;
                char v408 = v655;
              }
              else
              {
                uint64_t v394 = v663;
                uint64_t v395 = v690;
                uint64_t v396 = v665;
                uint64_t v398 = v660;
                uint64_t v397 = v661;
                uint64_t v399 = v661;
                uint64_t v400 = v656;
                uint64_t v401 = v664;
                uint64_t v402 = v663;
                uint64_t v403 = v662;
                uint64_t v404 = v180;
                char v405 = v660;
                char v406 = *(void *)&v691;
                char v407 = v181 & 1;
                char v408 = v655;
                char v409 = v655;
                char v410 = *(void *)&v691;
                char v411 = v692;
              }
              v680 = (uint64_t *)v409;
              LODWORD(v683) = v407;
              v684 = &v622;
              *(void *)&v695 = v394;
              *((void *)&v695 + 1) = v395;
              *(void *)&v696 = v396;
              *((void *)&v696 + 1) = v399;
              *(void *)&v697 = v400;
              *((void *)&v697 + 1) = v401;
              *(void *)&v698[0] = v403;
              *((void *)&v698[0] + 1) = v404;
              *(void *)&v698[1] = v405;
              *((void *)&v698[1] + 1) = v406;
              *(void *)&v699 = v409;
              BYTE8(v699) = v407;
              MEMORY[0x270FA5388](v392);
              v679 = &v622 - 14;
              v502 = v686;
              *(&v622 - 12) = v411;
              *(&v622 - 11) = v502;
              v503 = v681;
              v504 = v682;
              v505 = v685;
              *(&v622 - 10) = v682;
              *(&v622 - 9) = v505;
              *(&v622 - 8) = v503;
              *(&v622 - 7) = (uint64_t)&v695;
              v616 = (uint64_t)&v718;
              v617 = (uint64_t)v646;
              v506 = v687;
              sub_21F9D6318(v687, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F77F4A8);
              sub_21F9D6318(v506, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F77F4A8);
              v619 = *(double *)&v410;
              i = v408;
              v618 = *(double *)&v398;
              v507 = v402;
              v508 = v402;
              v509 = v664;
              v510 = v397;
              v511 = v656;
              v512 = v662;
              v513 = v654;
              sub_21F9324C0(v508, v690, v665, v510, v656, (uint64_t)v664, v662, v654, *(uint64_t *)&v618, *(uint64_t *)&v619, i, v181);
              v514 = sub_21F76CA40(&qword_26AD447E0);
              v694.i64[0] = sub_21F751B50((void (*)(char *, char *))sub_21F9D62D4, (uint64_t)v679, v504, v514, MEMORY[0x263F8E628], v693, MEMORY[0x263F8E658], v515);
              sub_21F9D6318(v506, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
              sub_21F83FAEC(v507, v690, v665, v661, v511, (uint64_t)v509, v512, v513, (uint64_t)v660, *(uint64_t *)&v691, v655, v181);
              sub_21F82B5F8(v644, (char)v645);
              (*(void (**)(uint64_t, uint64_t))(v689 + 8))(TupleTypeMetadata2, v688);
              sub_21F82B5F8((uint64_t)v680, v683);
              sub_21F9D6318(v506, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
              v516 = *(void (**)(char *, uint64_t))(v672 + 8);
              v517 = v686;
              v516(v647, v686);
              v516(v646, v517);
              return v694.i64[0];
            }
            LODWORD(v621) = 0;
            v615 = 397;
            break;
          case 2:
            v693 = *v185;
            sub_21F76C9DC((uint64_t)v717, (uint64_t)&v720, &qword_26AD47AB8);
            if (v722)
            {
              uint64_t v349 = v655;
              v719[3] = *(_OWORD *)&v721[48];
              v719[4] = *(_OWORD *)&v721[64];
              *(void *)&v719[5] = *(void *)&v721[80];
              v718 = v720;
              v719[0] = *(_OWORD *)v721;
              v719[2] = *(_OWORD *)&v721[32];
              v719[1] = *(_OWORD *)&v721[16];
              uint64_t v350 = v181;
              if (v181 == 255)
              {
                sub_21F882770((uint64_t)&v701);
                uint64_t v351 = v701;
                uint64_t v354 = v702;
                uint64_t v355 = v703;
                uint64_t v358 = v704;
                uint64_t v359 = v705;
                uint64_t v352 = v706;
                uint64_t v360 = v707;
                uint64_t v361 = v708;
                uint64_t v363 = v709;
                uint64_t v364 = v710;
                uint64_t v367 = v711;
                uint64_t v365 = v712;
                uint64_t v362 = v660;
                uint64_t v357 = v661;
                uint64_t v356 = v662;
                uint64_t v366 = v349;
                uint64_t v353 = v690;
              }
              else
              {
                uint64_t v351 = v663;
                uint64_t v352 = v664;
                uint64_t v353 = v690;
                uint64_t v354 = v690;
                uint64_t v355 = v665;
                uint64_t v357 = v661;
                uint64_t v356 = v662;
                uint64_t v358 = v661;
                uint64_t v359 = v656;
                uint64_t v360 = v662;
                uint64_t v361 = v180;
                uint64_t v362 = v660;
                uint64_t v363 = v660;
                uint64_t v364 = *(void *)&v691;
                uint64_t v365 = v350 & 1;
                uint64_t v366 = v655;
                uint64_t v367 = v655;
              }
              v683 = v367;
              LODWORD(v684) = v365;
              *(void *)&v723 = v351;
              *((void *)&v723 + 1) = v354;
              v724 = v355;
              v725 = v358;
              v726 = v359;
              v727 = v352;
              v728 = v360;
              v729 = v361;
              v730 = v363;
              v731 = v364;
              v732 = v367;
              v733 = v365;
              v698[1] = v719[3];
              v699 = v719[4];
              v700 = *(void *)&v719[5];
              v695 = v718;
              v696 = v719[0];
              v697 = v719[1];
              v698[0] = v719[2];
              v520 = v687;
              sub_21F9D6318(v687, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F77F4A8);
              sub_21F9D6318(v520, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F77F4A8);
              sub_21F9324C0(v663, v353, v665, v357, v656, (uint64_t)v664, v356, v180, (uint64_t)v362, *(uint64_t *)&v691, v366, v350);
              v521 = sub_21F76CA40(&qword_267EEA3A8);
              v522 = v681;
              v523 = v682;
              v524 = v685;
              *(void *)&v695 = sub_21F8B555C(v694.i64[0], v693, v521, v682, v685, v681);
              v525 = v640;
              sub_21FA26960();
              v526 = swift_bridgeObjectRelease();
              MEMORY[0x270FA5388](v526);
              v527 = v686;
              *(&v622 - 12) = v692;
              *(&v622 - 11) = v527;
              *(&v622 - 10) = v523;
              *(&v622 - 9) = v524;
              *(&v622 - 8) = v522;
              *(&v622 - 7) = (uint64_t)&v718;
              MEMORY[0x270FA5388](v528);
              *(&v622 - 8) = v530;
              *(&v622 - 7) = v529;
              v616 = v523;
              v617 = v524;
              v531 = (char *)sub_21F76CA40(&qword_26AD447E0);
              v532 = v642;
              WitnessTable = swift_getWitnessTable();
              v535 = sub_21F83A86C((void (*)(char *, char *))sub_21F9D6668, (uint64_t)(&v622 - 10), v532, v531, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v534);
              swift_release();
              sub_21F83FAEC(v663, v690, v665, v661, v656, (uint64_t)v664, v662, v654, (uint64_t)v660, *(uint64_t *)&v691, v655, v350);
              sub_21F82B5F8(v644, (char)v645);
              sub_21F9D6318(v520, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
              (*(void (**)(char *, uint64_t))(v641 + 8))(v525, v532);
              (*(void (**)(uint64_t, uint64_t))(v689 + 8))(TupleTypeMetadata2, v688);
              v536 = v520;
              goto LABEL_110;
            }
            v719[3] = *(_OWORD *)&v721[48];
            v719[4] = *(_OWORD *)&v721[64];
            *(void *)&v719[5] = *(void *)&v721[80];
            v718 = v720;
            v719[0] = *(_OWORD *)v721;
            v719[2] = *(_OWORD *)&v721[32];
            v719[1] = *(_OWORD *)&v721[16];
            LODWORD(v627) = v181;
            if (v181 == 255)
            {
              v537 = v666 & 1;
              v538 = v674;
              v539 = v667;
              v540 = v668;
              v542 = v669;
              v541 = v670;
              v543 = v671;
              sub_21F764268(v673, v674, v675, v667, v668, v669, v670, v671, v676);
              LOBYTE(v621) = v537;
              i = v677;
              v619 = v678;
              v618 = *(double *)&v679;
              v617 = (uint64_t)v680;
              sub_21F764268(v673, v538, v675, v539, v540, v542, v541, v543, v676);
              sub_21F8826D0((uint64_t)&v701);
              v440 = v701;
              v439 = v702;
              v437 = v703;
              v438 = v704;
              v422 = v705;
              v421 = v706;
              v423 = v707;
              v424 = v708;
              v425 = v709;
              v426 = v710;
              v442 = v711;
              LODWORD(v684) = v712;
              v436 = v661;
              v441 = v655;
            }
            else
            {
              v421 = v664;
              v683 = v663;
              v672 = v690;
              v659 = v665;
              v658 = v661;
              v422 = v656;
              v423 = v662;
              v424 = v180;
              v425 = v660;
              v426 = *(void *)&v691;
              LODWORD(v684) = v181 & 1;
              v666 &= 1u;
              v427 = v673;
              v428 = v674;
              v429 = v675;
              v431 = v667;
              v430 = v668;
              v433 = v669;
              v432 = v670;
              v434 = v671;
              sub_21F764268(v673, v674, v675, v667, v668, v669, v670, v671, v676);
              LOBYTE(v621) = v666;
              i = v677;
              v619 = v678;
              v618 = *(double *)&v679;
              v617 = (uint64_t)v680;
              v435 = v427;
              v436 = v661;
              sub_21F764268(v435, v428, v429, v431, v430, v433, v432, v434, v676);
              v438 = v658;
              v437 = v659;
              v439 = v672;
              v440 = v683;
              v441 = v655;
              v442 = v655;
            }
            v683 = v442;
            *(void *)&v723 = v440;
            *((void *)&v723 + 1) = v439;
            v724 = v437;
            v725 = v438;
            v726 = v422;
            v727 = v421;
            v728 = v423;
            v729 = v424;
            v730 = v425;
            v731 = v426;
            v732 = v442;
            v733 = v684;
            v698[1] = v719[3];
            v699 = v719[4];
            v700 = *(void *)&v719[5];
            v695 = v718;
            v696 = v719[0];
            v697 = v719[1];
            v698[0] = v719[2];
            v544 = v662;
            sub_21F9324C0(v663, v690, v665, v436, v656, (uint64_t)v664, v662, v180, (uint64_t)v660, *(uint64_t *)&v691, v441, v627);
            v545 = sub_21F76CA40(&qword_267EEA3A0);
            v546 = v682;
            v547 = v685;
            v548 = v441;
            *(void *)&v695 = sub_21F8B5C30(v694.i64[0], v693, v545, v682, v685, v681);
            v549 = v640;
            sub_21FA26960();
            v550 = swift_bridgeObjectRelease();
            MEMORY[0x270FA5388](v550);
            v551 = v686;
            *(&v622 - 8) = v692;
            *(&v622 - 7) = v551;
            MEMORY[0x270FA5388](v552);
            *(&v622 - 8) = v554;
            *(&v622 - 7) = v553;
            v616 = v546;
            v617 = v547;
            v555 = (char *)sub_21F76CA40(&qword_26AD447E0);
            v556 = v642;
            v557 = swift_getWitnessTable();
            v559 = sub_21F83A86C((void (*)(char *, char *))sub_21F9D6668, (uint64_t)(&v622 - 10), v556, v555, MEMORY[0x263F8E628], v557, MEMORY[0x263F8E658], v558);
            v560 = v687;
            sub_21F9D6318(v687, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
            swift_release();
            sub_21F83FAEC(v663, v690, v665, v661, v656, (uint64_t)v664, v544, v654, (uint64_t)v660, *(uint64_t *)&v691, v548, v627);
            sub_21F82B5F8(v644, (char)v645);
            uint64_t v94 = v559;
            sub_21F9D6318(v560, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
            (*(void (**)(char *, uint64_t))(v641 + 8))(v549, v556);
            (*(void (**)(uint64_t, uint64_t))(v689 + 8))(TupleTypeMetadata2, v688);
            sub_21F82B5F8(v683, (char)v684);
            return v94;
          case 3:
            uint64_t v368 = *v185;
            v684 = (uint64_t *)v185[1];
            sub_21F76C9DC((uint64_t)v717, (uint64_t)&v720, &qword_26AD47AB8);
            if ((v722 & 1) == 0)
            {
              v719[3] = *(_OWORD *)&v721[48];
              v719[4] = *(_OWORD *)&v721[64];
              *(void *)&v719[5] = *(void *)&v721[80];
              v718 = v720;
              v719[0] = *(_OWORD *)v721;
              v719[2] = *(_OWORD *)&v721[32];
              v719[1] = *(_OWORD *)&v721[16];
              uint64_t v369 = v181;
              uint64_t v370 = v664;
              v693 = v368;
              if (v181 == 255)
              {
                sub_21F882770((uint64_t)&v701);
                uint64_t v371 = v701;
                uint64_t v373 = v702;
                uint64_t v374 = v703;
                uint64_t v377 = v704;
                uint64_t v380 = v705;
                uint64_t v381 = v706;
                uint64_t v372 = v707;
                uint64_t v382 = v708;
                uint64_t v383 = v709;
                uint64_t v384 = v710;
                uint64_t v386 = v711;
                uint64_t v385 = v712;
                uint64_t v387 = 255;
                uint64_t v378 = v655;
                uint64_t v379 = v656;
                uint64_t v375 = v660;
                uint64_t v376 = v661;
              }
              else
              {
                uint64_t v372 = v662;
                uint64_t v371 = v663;
                uint64_t v373 = v690;
                uint64_t v374 = v665;
                uint64_t v375 = v660;
                uint64_t v376 = v661;
                uint64_t v377 = v661;
                uint64_t v378 = v655;
                uint64_t v379 = v656;
                uint64_t v380 = v656;
                uint64_t v381 = v664;
                uint64_t v382 = v180;
                uint64_t v383 = v660;
                uint64_t v384 = *(void *)&v691;
                uint64_t v385 = v369 & 1;
                uint64_t v386 = v655;
                uint64_t v387 = v369;
              }
              v481 = v180;
              LODWORD(v627) = v387;
              v680 = (uint64_t *)v386;
              LODWORD(v683) = v385;
              *(void *)&v723 = v371;
              *((void *)&v723 + 1) = v373;
              v724 = v374;
              v725 = v377;
              v726 = v380;
              v727 = v381;
              v728 = v372;
              v729 = v382;
              v730 = v383;
              v731 = v384;
              v732 = v386;
              v733 = v385;
              v698[1] = v719[3];
              v699 = v719[4];
              v700 = *(void *)&v719[5];
              v695 = v718;
              v696 = v719[0];
              v697 = v719[1];
              v698[0] = v719[2];
              v482 = v687;
              sub_21F9D6318(v687, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F77F4A8);
              sub_21F9D6318(v482, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F77F4A8);
              sub_21F9324C0(v663, v690, v665, v376, v379, (uint64_t)v370, v662, v481, (uint64_t)v375, *(uint64_t *)&v691, v378, v387);
              v483 = sub_21F76CA40(&qword_267EEA3A0);
              v484 = v694.i64[0];
              v485 = v681;
              v486 = v682;
              v487 = v685;
              v488 = sub_21F8B5C30(v694.i64[0], v693, v483, v682, v685, v681);
              v698[1] = v719[3];
              v699 = v719[4];
              v700 = *(void *)&v719[5];
              v695 = v718;
              v696 = v719[0];
              v697 = v719[1];
              v698[0] = v719[2];
              v489 = sub_21F8B5C30(v484, (uint64_t)v684, v483, v486, v487, v485);
              *(void *)&v695 = v488;
              *((void *)&v695 + 1) = v489;
              v490 = v637;
              sub_21FA26960();
              swift_bridgeObjectRelease();
              v491 = swift_bridgeObjectRelease();
              MEMORY[0x270FA5388](v491);
              v492 = v686;
              *(&v622 - 8) = v692;
              *(&v622 - 7) = v492;
              MEMORY[0x270FA5388](v493);
              *(&v622 - 8) = v495;
              *(&v622 - 7) = v494;
              v616 = v486;
              v617 = v487;
              v496 = (char *)sub_21F76CA40(&qword_26AD447E0);
              v497 = v639;
              v498 = swift_getWitnessTable();
              v500 = sub_21F83A86C((void (*)(char *, char *))sub_21F9D6380, (uint64_t)(&v622 - 10), v497, v496, MEMORY[0x263F8E628], v498, MEMORY[0x263F8E658], v499);
              sub_21F9D6318(v482, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
              swift_release();
              swift_release();
              uint64_t v94 = v500;
              sub_21F9D6318(v482, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
              sub_21F83FAEC(v663, v690, v665, v661, v656, (uint64_t)v664, v662, v654, (uint64_t)v660, *(uint64_t *)&v691, v655, v627);
              sub_21F82B5F8(v644, (char)v645);
              (*(void (**)(char *, uint64_t))(v638 + 8))(v490, v497);
              (*(void (**)(uint64_t, uint64_t))(v689 + 8))(TupleTypeMetadata2, v688);
              sub_21F82B5F8((uint64_t)v680, v683);
              return v94;
            }
            LODWORD(v621) = 0;
            v615 = 383;
            break;
          case 4:
            v693 = *v185;
            sub_21FA26AD0();
            int v323 = v658;
            long long v324 = v185;
            long long v325 = v659;
            long long v326 = swift_getTupleTypeMetadata3();
            long long v327 = (char *)v324 + *(int *)(v326 + 48);
            uint64_t v328 = (char *)v324 + *(int *)(v326 + 64);
            (*(void (**)(uint64_t, char *, uint64_t))(v657 + 32))(v648, v327, v323);
            (*(void (**)(uint64_t, char *, uint64_t))(v650 + 32))(v649, v328, v325);
            sub_21F76C9DC((uint64_t)v717, (uint64_t)&v720, &qword_26AD47AB8);
            if (v722)
            {
              LODWORD(v621) = 0;
              v614 = 369;
              goto LABEL_141;
            }
            v329 = v655;
            v719[3] = *(_OWORD *)&v721[48];
            v719[4] = *(_OWORD *)&v721[64];
            *(void *)&v719[5] = *(void *)&v721[80];
            v718 = v720;
            v719[0] = *(_OWORD *)v721;
            v719[2] = *(_OWORD *)&v721[32];
            v719[1] = *(_OWORD *)&v721[16];
            v330 = v181;
            if (v181 == 255)
            {
              sub_21F882770((uint64_t)&v701);
              int v331 = v701;
              long long v334 = v702;
              uint64_t v336 = v703;
              v339 = v704;
              long long v341 = v705;
              long long v332 = v706;
              long long v342 = v707;
              long long v343 = v708;
              long long v344 = v709;
              uint64_t v345 = v710;
              uint64_t v348 = v711;
              v346 = v712;
              int v340 = v656;
              v337 = v660;
              v338 = v661;
              long long v335 = v665;
              uint64_t v347 = v329;
              long long v333 = v690;
            }
            else
            {
              int v331 = v663;
              long long v332 = v664;
              long long v333 = v690;
              long long v334 = v690;
              long long v335 = v665;
              uint64_t v336 = v665;
              v337 = v660;
              v338 = v661;
              v339 = v661;
              int v340 = v656;
              long long v341 = v656;
              long long v342 = v662;
              long long v343 = v654;
              long long v344 = v660;
              uint64_t v345 = *(void *)&v691;
              v346 = v330 & 1;
              uint64_t v347 = v655;
              uint64_t v348 = v655;
            }
            v683 = v348;
            LODWORD(v684) = v346;
            *(void *)&v723 = v331;
            *((void *)&v723 + 1) = v334;
            v724 = v336;
            v725 = v339;
            v726 = v341;
            v727 = v332;
            v728 = v342;
            v729 = v343;
            v730 = v344;
            v731 = v345;
            v732 = v348;
            v733 = v346;
            v698[1] = v719[3];
            v699 = v719[4];
            v700 = *(void *)&v719[5];
            v695 = v718;
            v696 = v719[0];
            v697 = v719[1];
            v698[0] = v719[2];
            v466 = v687;
            sub_21F9D6318(v687, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F77F4A8);
            sub_21F9D6318(v466, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F77F4A8);
            sub_21F9324C0(v663, v333, v335, v338, v340, (uint64_t)v664, v662, v654, (uint64_t)v337, *(uint64_t *)&v691, v347, v330);
            v467 = sub_21F76CA40(&qword_267EEA3A0);
            v468 = v682;
            v469 = v685;
            *(void *)&v695 = sub_21F8B5894(v694.i64[0], v693, v648, v649, v467, v682, v685, v681);
            v470 = v634;
            sub_21FA26960();
            v471 = swift_bridgeObjectRelease();
            MEMORY[0x270FA5388](v471);
            v472 = v686;
            *(&v622 - 8) = v692;
            *(&v622 - 7) = v472;
            MEMORY[0x270FA5388](v473);
            *(&v622 - 8) = v475;
            *(&v622 - 7) = v474;
            v616 = v468;
            v617 = v469;
            v476 = (char *)sub_21F76CA40(&qword_26AD447E0);
            v477 = v636;
            v478 = swift_getWitnessTable();
            v480 = sub_21F83A86C((void (*)(char *, char *))sub_21F9D6380, (uint64_t)(&v622 - 10), v477, v476, MEMORY[0x263F8E628], v478, MEMORY[0x263F8E658], v479);
            sub_21F9D6318(v466, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
            swift_release();
            uint64_t v94 = v480;
            sub_21F9D6318(v466, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
            sub_21F83FAEC(v663, v690, v665, v661, v656, (uint64_t)v664, v662, v654, (uint64_t)v660, *(uint64_t *)&v691, v655, v330);
            sub_21F82B5F8(v644, (char)v645);
            (*(void (**)(char *, uint64_t))(v635 + 8))(v470, v477);
            (*(void (**)(uint64_t, uint64_t))(v650 + 8))(v649, v659);
            (*(void (**)(uint64_t, uint64_t))(v657 + 8))(v648, v658);
            (*(void (**)(uint64_t, uint64_t))(v689 + 8))(TupleTypeMetadata2, v688);
LABEL_111:
            sub_21F82B5F8(v683, (char)v684);
            return v94;
          default:
            (*(void (**)(uint64_t, uint64_t *, uint64_t))(v672 + 32))(v643, v185, v686);
            sub_21F76C9DC((uint64_t)v717, (uint64_t)&v720, &qword_26AD47AB8);
            LODWORD(v627) = v181;
            if ((v722 & 1) == 0)
            {
              v719[3] = *(_OWORD *)&v721[48];
              v719[4] = *(_OWORD *)&v721[64];
              *(void *)&v719[5] = *(void *)&v721[80];
              v718 = v720;
              v719[0] = *(_OWORD *)v721;
              v719[2] = *(_OWORD *)&v721[32];
              v719[1] = *(_OWORD *)&v721[16];
              if (v181 == 255)
              {
                v571 = v666 & 1;
                v572 = v673;
                v573 = v675;
                v575 = v667;
                v574 = v668;
                v577 = v669;
                v576 = v670;
                v578 = v671;
                sub_21F764268(v673, v674, v675, v667, v668, v669, v670, v671, v676);
                LOBYTE(v621) = v571;
                i = v677;
                v619 = v678;
                v618 = *(double *)&v679;
                v617 = (uint64_t)v680;
                sub_21F764268(v572, v674, v573, v575, v574, v577, v576, v578, v676);
                sub_21F8826D0((uint64_t)&v701);
                v460 = v701;
                v459 = v702;
                v457 = v703;
                v458 = v704;
                v445 = v705;
                v443 = v706;
                v444 = v707;
                v446 = v708;
                v447 = v709;
                v448 = v710;
                v461 = v664;
                v462 = v654;
                v463 = v655;
                v465 = v711;
                LODWORD(v684) = v712;
                v464 = v661;
              }
              else
              {
                v443 = v664;
                v683 = v663;
                v658 = v665;
                v659 = v690;
                v444 = v662;
                v657 = v661;
                v445 = v656;
                v446 = v180;
                v447 = v660;
                v448 = *(void *)&v691;
                LODWORD(v684) = v181 & 1;
                v666 &= 1u;
                v449 = v673;
                v450 = v674;
                v451 = v675;
                v453 = v667;
                v452 = v668;
                v455 = v669;
                v454 = v670;
                v456 = v671;
                sub_21F764268(v673, v674, v675, v667, v668, v669, v670, v671, v676);
                LOBYTE(v621) = v666;
                i = v677;
                v619 = v678;
                v618 = *(double *)&v679;
                v617 = (uint64_t)v680;
                sub_21F764268(v449, v450, v451, v453, v452, v455, v454, v456, v676);
                v458 = v657;
                v457 = v658;
                v459 = v659;
                v460 = v683;
                v461 = v664;
                v462 = v654;
                v463 = v655;
                v464 = v661;
                v465 = v655;
              }
              v683 = v465;
              *(void *)&v723 = v460;
              *((void *)&v723 + 1) = v459;
              v724 = v457;
              v725 = v458;
              v726 = v445;
              v727 = v443;
              v728 = v444;
              v729 = v446;
              v730 = v447;
              v731 = v448;
              v732 = v465;
              v733 = v684;
              v698[1] = v719[3];
              v699 = v719[4];
              v700 = *(void *)&v719[5];
              v695 = v718;
              v696 = v719[0];
              v697 = v719[1];
              v698[0] = v719[2];
              v579 = v627;
              v580 = v662;
              v581 = v663;
              v582 = v665;
              sub_21F9324C0(v663, v690, v665, v464, v656, (uint64_t)v461, v662, v462, (uint64_t)v660, *(uint64_t *)&v691, v463, v627);
              v583 = sub_21F76CA40(&qword_267EEA3A0);
              v584 = v643;
              v585 = v685;
              v586 = v686;
              v587 = sub_21F8B54F0(v643, v583, v686, v685);
              v680 = &v622;
              MEMORY[0x270FA5388](v587);
              *(&v622 - 10) = v692;
              *(&v622 - 9) = v586;
              v588 = v681;
              v589 = v682;
              *(&v622 - 8) = v682;
              *(&v622 - 7) = v585;
              v616 = v588;
              v617 = (uint64_t)&v723;
              v590 = sub_21F76CA40(&qword_26AD447E0);
              v592 = sub_21F751B50((void (*)(char *, char *))sub_21F9D6544, (uint64_t)(&v622 - 12), v589, v590, MEMORY[0x263F8E628], v693, MEMORY[0x263F8E658], v591);
              v593 = v687;
              sub_21F9D6318(v687, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
              uint64_t v94 = v592;
              sub_21F9D6318(v593, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
              sub_21F83FAEC(v581, v690, v582, v661, v656, (uint64_t)v664, v580, v654, (uint64_t)v660, *(uint64_t *)&v691, v655, v579);
              sub_21F82B5F8(v644, (char)v645);
              (*(void (**)(uint64_t, uint64_t))(v672 + 8))(v584, v586);
              (*(void (**)(uint64_t, uint64_t))(v689 + 8))(TupleTypeMetadata2, v688);
              sub_21F82B5F8(v683, (char)v684);
              return v94;
            }
            v719[3] = *(_OWORD *)&v721[48];
            v719[4] = *(_OWORD *)&v721[64];
            *(void *)&v719[5] = *(void *)&v721[80];
            v718 = v720;
            v719[0] = *(_OWORD *)v721;
            v719[2] = *(_OWORD *)&v721[32];
            v719[1] = *(_OWORD *)&v721[16];
            unint64_t v187 = v181;
            if (v181 == 255)
            {
              sub_21F882770((uint64_t)&v701);
              unint64_t v188 = v701;
              uint64_t v190 = v702;
              uint64_t v191 = v703;
              uint64_t v194 = v704;
              uint64_t v197 = v705;
              uint64_t v189 = v706;
              uint64_t v198 = v707;
              uint64_t v199 = v708;
              unint64_t v201 = v709;
              uint64_t v202 = v710;
              uint64_t v205 = -1;
              uint64_t v195 = v711;
              uint64_t v203 = v712;
              uint64_t v204 = v655;
              uint64_t v196 = v656;
              uint64_t v200 = v660;
              uint64_t v193 = v661;
              uint64_t v192 = v662;
            }
            else
            {
              unint64_t v188 = v663;
              uint64_t v189 = v664;
              uint64_t v190 = v690;
              uint64_t v191 = v665;
              uint64_t v193 = v661;
              uint64_t v192 = v662;
              uint64_t v194 = v661;
              uint64_t v195 = v655;
              uint64_t v196 = v656;
              uint64_t v197 = v656;
              uint64_t v198 = v662;
              uint64_t v199 = v180;
              uint64_t v200 = v660;
              unint64_t v201 = v660;
              uint64_t v202 = *(void *)&v691;
              uint64_t v203 = v187 & 1;
              uint64_t v204 = v655;
              uint64_t v205 = v187;
            }
            v683 = v195;
            LODWORD(v684) = v203;
            *(void *)&v723 = v188;
            *((void *)&v723 + 1) = v190;
            v724 = v191;
            v725 = v194;
            v726 = v197;
            v727 = v189;
            v728 = v198;
            v729 = v199;
            v730 = v201;
            v731 = v202;
            v732 = v195;
            v733 = v203;
            v698[1] = v719[3];
            v699 = v719[4];
            v700 = *(void *)&v719[5];
            v695 = v718;
            v696 = v719[0];
            v697 = v719[1];
            v698[0] = v719[2];
            v561 = v687;
            sub_21F9D6318(v687, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F77F4A8);
            sub_21F9D6318(v561, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F77F4A8);
            sub_21F9324C0(v663, v690, v665, v193, v196, (uint64_t)v664, v192, v654, (uint64_t)v200, *(uint64_t *)&v691, v204, v205);
            sub_21F76CA40(&qword_267EEA3A8);
            v562 = v643;
            v563 = v685;
            v564 = v686;
            v565 = sub_21F8B53F0(v643);
            v566 = MEMORY[0x270FA5388](v565).n128_u64[0];
            *(&v622 - 12) = v692;
            *(&v622 - 11) = v564;
            v567 = v681;
            v568 = v682;
            *(&v622 - 10) = v682;
            *(&v622 - 9) = v563;
            *(&v622 - 8) = v567;
            *(&v622 - 7) = (uint64_t)&v718;
            v616 = (uint64_t)&v723;
            v617 = v566;
            v569 = sub_21F76CA40(&qword_26AD447E0);
            v535 = sub_21F751B50((void (*)(char *, char *))sub_21F9D6490, (uint64_t)(&v622 - 14), v568, v569, MEMORY[0x263F8E628], v693, MEMORY[0x263F8E658], v570);
            sub_21F9D6318(v561, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
            sub_21F83FAEC(v663, v690, v665, v661, v196, (uint64_t)v664, v662, v654, (uint64_t)v200, *(uint64_t *)&v691, v655, v627);
            sub_21F82B5F8(v644, (char)v645);
            (*(void (**)(uint64_t, uint64_t))(v672 + 8))(v562, v564);
            (*(void (**)(uint64_t, uint64_t))(v689 + 8))(TupleTypeMetadata2, v688);
            v536 = v561;
LABEL_110:
            uint64_t v94 = v535;
            sub_21F9D6318(v536, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
            goto LABEL_111;
        }
LABEL_144:
        i = v615;
        goto LABEL_136;
      }
      LODWORD(v621) = 0;
      v594 = 308;
      goto LABEL_128;
    case 7:
      uint64_t v127 = v94;
      uint64_t v128 = v688;
      uint64_t v129 = &v92[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v130 = *((void *)v129 + 4);
      uint64_t v131 = *((void *)v129 + 5);
      char v132 = v129[48];
      sub_21F770E38(*((void *)v129 + 1), *((void *)v129 + 2), v129[24]);
      sub_21F770E50(v130, v131, v132);
      uint64_t v133 = v689;
      uint64_t v134 = v656;
      (*(void (**)(uint64_t, char *, uint64_t))(v689 + 32))(v656, v92, v128);
      uint64_t v135 = v687;
      sub_21F76C9DC(v687, (uint64_t)v715, &qword_26AD491D0);
      if (v716 == 255)
      {
        LODWORD(v621) = 0;
        v594 = 401;
LABEL_128:
        for (i = v594; ; i = v614)
        {
LABEL_136:
          sub_21FA266E0();
          __break(1u);
LABEL_137:
          LODWORD(v621) = 0;
          v614 = 491;
LABEL_141:
          ;
        }
      }
      sub_21F76C9DC((uint64_t)v715, (uint64_t)v717, &qword_26AD47AB8);
      ((void (*)(void *, uint64_t, uint64_t))v684[2])(v660, v134 + *(int *)(v128 + 44), v683);
      int v136 = swift_getEnumCaseMultiPayload();
      uint64_t v137 = v672;
      uint64_t v138 = v686;
      switch(v136)
      {
        case 1:
          v595 = swift_getTupleTypeMetadata2();
          v596 = (char *)v660;
          v597 = (char *)v660 + *(int *)(v595 + 48);
          LOBYTE(v621) = v666 & 1;
          i = v677;
          v619 = v678;
          v618 = *(double *)&v679;
          v617 = (uint64_t)v680;
          sub_21F764268(v673, v674, v675, v667, v668, v669, v670, v671, v676);
          v598 = *(void (**)(char *, uint64_t))(v137 + 8);
          v598(v597, v138);
          v598(v596, v138);
          goto LABEL_119;
        case 2:
          uint64_t v207 = *v660;
          sub_21F76C9DC((uint64_t)v717, (uint64_t)&v720, &qword_26AD47AB8);
          if (v722)
          {
            LODWORD(v621) = 0;
            v610 = 409;
LABEL_132:
            i = v610;
            goto LABEL_136;
          }
          uint64_t v208 = v720;
          v697 = *(_OWORD *)&v721[32];
          v698[0] = *(_OWORD *)&v721[48];
          v698[1] = *(_OWORD *)&v721[64];
          *(void *)&v699 = *(void *)&v721[80];
          v695 = *(_OWORD *)v721;
          v696 = *(_OWORD *)&v721[16];
          *(void *)&v723 = 0;
          LOBYTE(v621) = v666 & 1;
          i = v677;
          v619 = v678;
          v618 = *(double *)&v679;
          v617 = (uint64_t)v680;
          sub_21F764268(v673, v674, v675, v667, v668, v669, v670, v671, v676);
          ((void (*)(unsigned long long *__return_ptr, unsigned long long *))v208)(&v718, &v723);
          uint64_t v209 = v718;
          v718 = v208;
          v719[2] = v697;
          v719[3] = v698[0];
          v719[4] = v698[1];
          *(void *)&v719[5] = v699;
          v719[0] = v695;
          v719[1] = v696;
          uint64_t v210 = sub_21F76CA40(&qword_267EEA3A0);
          uint64_t v211 = sub_21F8B5C30(v694.i64[0], v207, v210, v682, v685, v681);
          uint64_t v212 = *(void *)(v211 + 16);
          if (v212)
          {
            *(void *)&v718 = v127;
            sub_21F7A2C08(0, v212, 0);
            uint64_t v213 = 0;
            uint64_t v94 = v718;
            int v214 = *(void *)(v718 + 16);
            long long v215 = 16 * v214;
            do
            {
              long long v216 = *(void *)(v211 + 32 + 8 * v213);
              *(void *)&v718 = *((void *)&v208 + 1);
              long long v217 = *(void *)(*((void *)&v208 + 1) + 24);
              long long v218 = v214 + v213 + 1;
              if (v214 + v213 >= v217 >> 1)
              {
                sub_21F7A2C08((char *)(v217 > 1), v214 + v213 + 1, 1);
                uint64_t v94 = v718;
              }
              ++v213;
              *(void *)(v94 + 16) = v218;
              long long v219 = v94 + v215;
              *(void *)(v219 + 32) = v209;
              *(void *)(v219 + 40) = v216;
              v215 += 16;
            }
            while (v212 != v213);
            swift_release();
            sub_21F9D6318(v687, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
            swift_bridgeObjectRelease();
            uint64_t v128 = v688;
            uint64_t v134 = v656;
          }
          else
          {
            swift_release();
            sub_21F9D6318(v135, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
            swift_bridgeObjectRelease();
            uint64_t v94 = MEMORY[0x263F8EE78];
          }
          (*(void (**)(uint64_t, uint64_t))(v689 + 8))(v134, v128);
          return v94;
        case 3:
          LOBYTE(v621) = v666 & 1;
          i = v677;
          v619 = v678;
          v618 = *(double *)&v679;
          v617 = (uint64_t)v680;
          sub_21F764268(v673, v674, v675, v667, v668, v669, v670, v671, v676);
          swift_release();
          swift_release();
          goto LABEL_119;
        case 4:
          v599 = (char *)v660;
          LOBYTE(v621) = v666 & 1;
          i = v677;
          v619 = v678;
          v618 = *(double *)&v679;
          v617 = (uint64_t)v680;
          sub_21F764268(v673, v674, v675, v667, v668, v669, v670, v671, v676);
          swift_release();
          sub_21FA26AD0();
          v601 = v658;
          v600 = v659;
          v602 = swift_getTupleTypeMetadata3();
          v603 = &v599[*(int *)(v602 + 48)];
          (*(void (**)(char *, uint64_t))(v650 + 8))(&v599[*(int *)(v602 + 64)], v600);
          (*(void (**)(char *, uint64_t))(v657 + 8))(v603, v601);
LABEL_119:
          LODWORD(v621) = 0;
          i = 421;
          goto LABEL_136;
        default:
          uint64_t v139 = (uint64_t)v645;
          (*(void (**)(char *, void *, uint64_t))(v672 + 32))(v645, v660, v686);
          sub_21F76C9DC((uint64_t)v717, (uint64_t)&v720, &qword_26AD47AB8);
          if ((v722 & 1) == 0)
          {
            unint64_t v140 = *((void *)&v720 + 1);
            long long v141 = (void (*)(unsigned long long *__return_ptr, unsigned long long *))v720;
            v697 = *(_OWORD *)&v721[32];
            v698[0] = *(_OWORD *)&v721[48];
            v698[1] = *(_OWORD *)&v721[64];
            *(void *)&v699 = *(void *)&v721[80];
            v695 = *(_OWORD *)v721;
            v696 = *(_OWORD *)&v721[16];
            *(void *)&v723 = 0;
            LOBYTE(v621) = v666 & 1;
            i = v677;
            v619 = v678;
            v618 = *(double *)&v679;
            v617 = (uint64_t)v680;
            sub_21F764268(v673, v674, v675, v667, v668, v669, v670, v671, v676);
            v141(&v718, &v723);
            long long v142 = v718;
            v718 = __PAIR128__(v140, (unint64_t)v141);
            v719[2] = v697;
            v719[3] = v698[0];
            v719[4] = v698[1];
            *(void *)&v719[5] = v699;
            v719[0] = v695;
            v719[1] = v696;
            int v143 = sub_21F76CA40(&qword_267EEA3A0);
            sub_21F8B54F0(v139, v143, v138, v685);
            char v144 = v723;
            sub_21F76CA40(&qword_26AD44BD8);
            uint64_t v94 = swift_allocObject();
            *(_OWORD *)(v94 + 16) = xmmword_21FA28550;
            *(void *)(v94 + 32) = v142;
            *(void *)(v94 + 40) = v144;
            sub_21F9D6318(v135, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F76EE70);
            (*(void (**)(uint64_t, uint64_t))(v137 + 8))(v139, v138);
            (*(void (**)(uint64_t, uint64_t))(v133 + 8))(v134, v128);
            return v94;
          }
          LODWORD(v621) = 0;
          v610 = 418;
          goto LABEL_132;
      }
    default:
      if (v92[8]) {
        double v98 = (a11 + a12) * 0.5;
      }
      else {
        double v98 = *(double *)v92;
      }
      uint64_t v206 = v98 + a6;
      sub_21F76CA40(&qword_26AD44BD8);
      uint64_t v94 = swift_allocObject();
      *(_OWORD *)(v94 + 16) = xmmword_21FA28550;
      *(double *)(v94 + 32) = v206;
      *(double *)(v94 + 40) = v206;
      return v94;
  }
}

uint64_t sub_21F9D2428()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  int v3 = *(char *)(v0 + 16);
  sub_21FA26A00();
  sub_21FA26A10();
  if (v3 < 0) {
    sub_21F767A6C();
  }
  else {
    sub_21FA027D8((uint64_t)v5, v1, v2, v3);
  }
  return sub_21FA26A50();
}

uint64_t sub_21F9D24BC(uint64_t a1)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  int v5 = *(char *)(v1 + 16);
  if (v5 < 0)
  {
    sub_21FA26A10();
    return sub_21F767A6C();
  }
  else
  {
    sub_21FA26A10();
    return sub_21FA027D8(a1, v3, v4, v5);
  }
}

uint64_t sub_21F9D2568()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  int v3 = *(char *)(v0 + 16);
  sub_21FA26A00();
  sub_21FA26A10();
  if (v3 < 0) {
    sub_21F767A6C();
  }
  else {
    sub_21FA027D8((uint64_t)v5, v1, v2, v3);
  }
  return sub_21FA26A50();
}

uint64_t sub_21F9D25F8(uint64_t a1, uint64_t a2)
{
  return sub_21F9D5564(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

uint64_t sub_21F9D2614()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  int v3 = *(char *)(v0 + 48);
  sub_21FA26A00();
  sub_21FA26A10();
  if (v3 < 0) {
    sub_21F767A6C();
  }
  else {
    sub_21FA027D8((uint64_t)v5, v1, v2, v3);
  }
  return sub_21FA26A50();
}

uint64_t sub_21F9D26A8(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  int v5 = *(char *)(v1 + 48);
  if (v5 < 0)
  {
    sub_21FA26A10();
    return sub_21F767A6C();
  }
  else
  {
    sub_21FA26A10();
    return sub_21FA027D8(a1, v3, v4, v5);
  }
}

uint64_t sub_21F9D2754()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  int v3 = *(char *)(v0 + 48);
  sub_21FA26A00();
  sub_21FA26A10();
  if (v3 < 0) {
    sub_21F767A6C();
  }
  else {
    sub_21FA027D8((uint64_t)v5, v1, v2, v3);
  }
  return sub_21FA26A50();
}

BOOL sub_21F9D27E4(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  LOBYTE(v11) = *(unsigned char *)(a2 + 16);
  return sub_21F9D5674(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 48), *(void *)a2, *(double *)(a2 + 24), a4, a5, a6, a7, a8, a9, a10, *(void *)(a2 + 8), v11, *(void *)(a2 + 24),
           *(double *)(a2 + 32),
           *(double *)(a2 + 40),
           *(unsigned char *)(a2 + 48));
}

unint64_t sub_21F9D2854()
{
  unint64_t result = qword_267EEA370;
  if (!qword_267EEA370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EEA370);
  }
  return result;
}

uint64_t sub_21F9D28A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v132 = a2;
  uint64_t v133 = a1;
  uint64_t v128 = a6;
  uint64_t v113 = sub_21F76CA40(&qword_26AD46A40);
  MEMORY[0x270FA5388](v113);
  uint64_t v105 = (uint64_t)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v106 = (char *)&v105 - v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v114 = (uint64_t)&v105 - v13;
  uint64_t v112 = sub_21FA241F0();
  uint64_t v110 = *(void *)(v112 - 8);
  MEMORY[0x270FA5388](v112);
  double v111 = (char *)&v105 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v107 = (uint64_t)&v105 - v15;
  uint64_t v16 = sub_21F76CA40(&qword_26AD45870);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v109 = (char *)&v105 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_21FA23EA0();
  uint64_t v121 = *(void *)(v18 - 8);
  uint64_t v122 = v18;
  MEMORY[0x270FA5388](v18);
  uint64_t v124 = (char *)&v105 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_21FA24320();
  uint64_t v119 = *(void *)(v20 - 8);
  uint64_t v120 = v20;
  MEMORY[0x270FA5388](v20);
  uint64_t v118 = (char *)&v105 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_21FA24310();
  uint64_t v116 = *(void *)(v22 - 8);
  uint64_t v117 = v22;
  MEMORY[0x270FA5388](v22);
  uint64_t v115 = (char *)&v105 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for PlottableValue();
  uint64_t v126 = *(void *)(v24 - 8);
  uint64_t v127 = v24;
  MEMORY[0x270FA5388](v24);
  *(void *)&long long v123 = (char *)&v105 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v130 = (uint64_t *)((char *)&v105 - v27);
  *(void *)&long long v131 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v105 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  uint64_t v33 = (char *)&v105 - v32;
  uint64_t v34 = type metadata accessor for PlottableProjection.Storage();
  uint64_t v35 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v37 = (char **)((char *)&v105 - v36);
  uint64_t v129 = a3;
  uint64_t v38 = type metadata accessor for PlottableProjection();
  (*(void (**)(char **, uint64_t, uint64_t))(v35 + 16))(v37, v133 + *(int *)(v38 + 44), v34);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v42 = (char **)((char *)v37 + *(int *)(swift_getTupleTypeMetadata2() + 48));
      uint64_t v125 = v38;
      uint64_t v43 = *(void (**)(char *, char **, uint64_t))(v131 + 32);
      v43(v33, v37, a4);
      v43(v30, v42, a4);
      uint64_t v44 = *(void *)v133;
      uint64_t v45 = *(void *)(v133 + 8);
      char v46 = *(unsigned char *)(v133 + 16);
      uint64_t v47 = *(void *)(v133 + 24);
      static PlottableValue.value(_:_:)(*(void *)v133, v45, v46, v47, a4, (uint64_t)v130);
      uint64_t v48 = v123;
      static PlottableValue.value(_:_:)(v44, v45, v46, v47, a4, v123);
      uint64_t v49 = (void (*)(void, void))v130;
      sub_21F9D598C((uint64_t)v130, v48, a4, a5, (uint64_t)v146);
      sub_21F764AF8((uint64_t)v146, (uint64_t)v134);
      uint64_t v50 = v127;
      uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v126 + 8);
      v51(v48, v127);
      v51((uint64_t)v49, v50);
      (*(void (**)(uint64_t))(*(void *)(v129 - 8) + 8))(v132);
      uint64_t v52 = *(void (**)(char *, uint64_t))(v131 + 8);
      v52(v30, a4);
      v52(v33, a4);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v125 - 8) + 8))(v133, v125);
      goto LABEL_7;
    case 2u:
      uint64_t v124 = *v37;
      uint64_t v125 = v38;
      uint64_t v53 = v133;
      uint64_t v54 = *(void *)v133;
      uint64_t v55 = *(void *)(v133 + 8);
      char v56 = *(unsigned char *)(v133 + 16);
      uint64_t v57 = *(void *)(v133 + 24);
      swift_getAtKeyPath();
      uint64_t v58 = (void (*)(void, void))v130;
      static PlottableValue.value(_:_:)(v54, v55, v56, v57, a4, (uint64_t)v130);
      (*(void (**)(char *, uint64_t))(v131 + 8))(v33, a4);
      sub_21F9D5860((uint64_t)v58, a4, a5, (uint64_t)v146);
      sub_21F764AF8((uint64_t)v146, (uint64_t)v134);
      (*(void (**)(void, uint64_t))(v126 + 8))(v58, v127);
      goto LABEL_6;
    case 3u:
      uint64_t v59 = v37[1];
      uint64_t v122 = (uint64_t)*v37;
      uint64_t v124 = v59;
      uint64_t v125 = v38;
      uint64_t v53 = v133;
      uint64_t v60 = *(void *)v133;
      uint64_t v61 = *(void *)(v133 + 8);
      char v62 = *(unsigned char *)(v133 + 16);
      uint64_t v63 = *(void *)(v133 + 24);
      swift_getAtKeyPath();
      static PlottableValue.value(_:_:)(v60, v61, v62, v63, a4, (uint64_t)v130);
      *(void *)&long long v131 = *(void *)(v131 + 8);
      ((void (*)(char *, uint64_t))v131)(v33, a4);
      uint64_t v64 = *(void *)(v53 + 8);
      uint64_t v121 = *(void *)v53;
      LOBYTE(v63) = *(unsigned char *)(v53 + 16);
      uint64_t v65 = *(void *)(v53 + 24);
      swift_getAtKeyPath();
      uint64_t v66 = v123;
      static PlottableValue.value(_:_:)(v121, v64, v63, v65, a4, v123);
      ((void (*)(char *, uint64_t))v131)(v33, a4);
      uint64_t v67 = (void (*)(void, void))v130;
      sub_21F9D598C((uint64_t)v130, v66, a4, a5, (uint64_t)v146);
      sub_21F764AF8((uint64_t)v146, (uint64_t)v134);
      uint64_t v68 = v127;
      uint64_t v69 = *(void (**)(uint64_t, uint64_t))(v126 + 8);
      v69(v66, v127);
      v69((uint64_t)v67, v68);
      swift_release();
LABEL_6:
      swift_release();
      (*(void (**)(uint64_t))(*(void *)(v129 - 8) + 8))(v132);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v125 - 8) + 8))(v53, v125);
      goto LABEL_7;
    case 4u:
      uint64_t v125 = v38;
      uint64_t v72 = *v37;
      sub_21FA26AD0();
      uint64_t v73 = v117;
      uint64_t v74 = v120;
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      uint64_t v76 = (char *)v37 + *(int *)(TupleTypeMetadata3 + 48);
      uint64_t v77 = (char *)v37 + *(int *)(TupleTypeMetadata3 + 64);
      (*(void (**)(char *, char *, uint64_t))(v116 + 32))(v115, v76, v73);
      (*(void (**)(char *, char *, uint64_t))(v119 + 32))(v118, v77, v74);
      uint64_t v127 = (uint64_t)v72;
      swift_getAtKeyPath();
      (*(void (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5);
      (*(void (**)(char *, uint64_t))(v131 + 8))(v33, a4);
      uint64_t v78 = v111;
      uint64_t v79 = v112;
      swift_dynamicCast();
      uint64_t v80 = v109;
      sub_21FA24250();
      uint64_t v81 = v110;
      uint64_t v82 = v79;
      uint64_t v130 = *(uint64_t **)(v110 + 8);
      *(void *)&long long v131 = v110 + 8;
      ((void (*)(char *, uint64_t))v130)(v78, v79);
      uint64_t v83 = v121;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v121 + 48))(v80, 1, v122) == 1)
      {
        __break(1u);
        JUMPOUT(0x21F9D3818);
      }
      (*(void (**)(void))(v83 + 32))();
      uint64_t v84 = v133;
      uint64_t v85 = *(void *)v133;
      uint64_t v109 = *(char **)(v133 + 8);
      char v86 = *(unsigned char *)(v133 + 16);
      uint64_t v87 = *(void *)(v133 + 24);
      uint64_t v107 = v85;
      uint64_t AssociatedTypeWitness = v87;
      sub_21FA23E90();
      uint64_t v88 = v114;
      uint64_t v89 = v114 + *(int *)(v113 + 36);
      uint64_t v126 = *(void *)(v81 + 16);
      ((void (*)(uint64_t, char *, uint64_t))v126)(v89, v78, v82);
      *(void *)uint64_t v88 = v85;
      uint64_t v91 = AssociatedTypeWitness;
      uint64_t v90 = (uint64_t)v109;
      *(void *)(v88 + 8) = v109;
      *(unsigned char *)(v88 + 16) = v86;
      *(void *)(v88 + 24) = v91;
      *(void *)&long long v123 = sub_21F76CA40(&qword_26AD45B68);
      swift_storeEnumTagMultiPayload();
      sub_21F7652C0(v107, v90, v86);
      swift_bridgeObjectRetain();
      ((void (*)(char *, uint64_t))v130)(v78, v82);
      uint64_t v92 = *(void *)v84;
      uint64_t v93 = *(void *)(v84 + 8);
      char v94 = *(unsigned char *)(v84 + 16);
      uint64_t v95 = *(void *)(v84 + 24);
      sub_21FA23E80();
      uint64_t v96 = (uint64_t)v106;
      ((void (*)(char *, char *, uint64_t))v126)(&v106[*(int *)(v113 + 36)], v78, v82);
      *(void *)uint64_t v96 = v92;
      *(void *)(v96 + 8) = v93;
      *(unsigned char *)(v96 + 16) = v94;
      *(void *)(v96 + 24) = v95;
      swift_storeEnumTagMultiPayload();
      sub_21F7652C0(v92, v93, v94);
      swift_bridgeObjectRetain();
      ((void (*)(char *, uint64_t))v130)(v78, v82);
      uint64_t v97 = v114;
      uint64_t v98 = v105;
      sub_21F76C978(v114, v105, &qword_26AD46A40);
      sub_21F9CB7B4(v98, (uint64_t)v163);
      double v111 = (char *)v163[0];
      uint64_t v99 = v163[1];
      char v100 = v164;
      long long v131 = v165;
      uint64_t v130 = v166;
      LODWORD(v126) = v167;
      sub_21F76C978(v96, v98, &qword_26AD46A40);
      sub_21F9CB7B4(v98, (uint64_t)v134);
      uint64_t v101 = v134[0];
      uint64_t v102 = v134[1];
      char v103 = v135;
      long long v123 = v136;
      uint64_t v113 = v137;
      LODWORD(v112) = v138;
      sub_21F76CA84(v96, &qword_26AD46A40);
      sub_21F76CA84(v97, &qword_26AD46A40);
      swift_release();
      char v145 = v100;
      char v142 = v103;
      v146[0] = v111;
      v146[1] = v99;
      char v147 = v100;
      *(_DWORD *)unint64_t v148 = *(_DWORD *)v144;
      *(_DWORD *)&v148[3] = *(_DWORD *)&v144[3];
      long long v149 = v131;
      long long v150 = (void (*)(void, void))v130;
      char v151 = v126;
      *(_DWORD *)int v152 = *(_DWORD *)v143;
      *(_DWORD *)&v152[3] = *(_DWORD *)&v143[3];
      long long v153 = v168;
      uint64_t v154 = v101;
      uint64_t v155 = v102;
      char v156 = v103;
      *(_DWORD *)uint64_t v157 = *(_DWORD *)v141;
      *(_DWORD *)&v157[3] = *(_DWORD *)&v141[3];
      long long v158 = v123;
      uint64_t v159 = v113;
      char v160 = v112;
      *(_DWORD *)uint64_t v161 = *(_DWORD *)v140;
      *(_DWORD *)&v161[3] = *(_DWORD *)&v140[3];
      long long v162 = v139;
      int8x16_t v104 = sub_21F860DAC((uint64_t)v146);
      (*(void (**)(uint64_t, int8x16_t))(*(void *)(v129 - 8) + 8))(v132, v104);
      (*(void (**)(char *, uint64_t))(v121 + 8))(v124, v122);
      (*(void (**)(char *, uint64_t))(v119 + 8))(v118, v120);
      (*(void (**)(char *, uint64_t))(v116 + 8))(v115, v117);
      (*(void (**)(uint64_t))(*(void *)(v125 - 8) + 8))(v133);
      uint64_t v70 = v146;
      goto LABEL_8;
    default:
      uint64_t v39 = v131;
      (*(void (**)(char *, char **, uint64_t))(v131 + 32))(v33, v37, a4);
      uint64_t v40 = v133;
      uint64_t v41 = (void (*)(void, void))v130;
      static PlottableValue.value(_:_:)(*(void *)v133, *(void *)(v133 + 8), *(unsigned char *)(v133 + 16), *(void *)(v133 + 24), a4, (uint64_t)v130);
      sub_21F9D5860((uint64_t)v41, a4, a5, (uint64_t)v146);
      sub_21F764AF8((uint64_t)v146, (uint64_t)v134);
      (*(void (**)(void, uint64_t))(v126 + 8))(v41, v127);
      (*(void (**)(uint64_t))(*(void *)(v129 - 8) + 8))(v132);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v33, a4);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(v40, v38);
LABEL_7:
      uint64_t v70 = v134;
LABEL_8:
      sub_21F764AF8((uint64_t)v70, (uint64_t)v169);
      return sub_21F764AF8((uint64_t)v169, v128);
  }
}

uint64_t sub_21F9D382C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v99 = a3;
  uint64_t v100 = a2;
  uint64_t v101 = a1;
  uint64_t v95 = a7;
  uint64_t v10 = type metadata accessor for PlottableValue();
  uint64_t v91 = *(void *)(v10 - 8);
  uint64_t v92 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v88 = (uint64_t)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v97 = (uint64_t)&v81 - v13;
  uint64_t v98 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v14);
  char v86 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v96 = (char *)&v81 - v17;
  uint64_t v18 = type metadata accessor for PlottableProjection.Storage();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (uint64_t *)((char *)&v81 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v22);
  uint64_t v85 = (char *)&v81 - v23;
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&v81 - v25;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v28 = TupleTypeMetadata2 - 8;
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v30 = (char *)&v81 - v29;
  uint64_t v93 = a4;
  uint64_t v89 = a5;
  uint64_t v90 = a6;
  uint64_t v31 = type metadata accessor for PlottableProjection();
  uint64_t v32 = *(int *)(v31 + 44);
  uint64_t v33 = v100 + v32;
  uint64_t v34 = &v30[*(int *)(v28 + 56)];
  uint64_t v94 = v19;
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v35(v30, v101 + v32, v18);
  v35(v34, v33, v18);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v87 = v31;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      uint64_t v72 = v85;
      v35(v85, (uint64_t)v30, v18);
      uint64_t v73 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      uint64_t v74 = &v72[v73];
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v75 = &v34[v73];
        uint64_t v76 = *(void (**)(char *, uint64_t))(v98 + 8);
        uint64_t v77 = v89;
        v76(v75, v89);
        v76(v34, v77);
        v76(v74, v77);
        v76(v85, v77);
        (*(void (**)(char *, uint64_t))(v94 + 8))(v30, v18);
      }
      else
      {
        uint64_t v79 = *(void (**)(char *, uint64_t))(v98 + 8);
        uint64_t v80 = v89;
        v79(&v72[v73], v89);
        v79(v85, v80);
      }
      goto LABEL_14;
    case 2:
      uint64_t v52 = v18;
      uint64_t v85 = v30;
      v35((char *)v21, (uint64_t)v30, v18);
      uint64_t v53 = *v21;
      uint64_t v84 = v52;
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        char v86 = *(char **)v34;
        uint64_t v54 = *(void *)v101;
        uint64_t v55 = *(void *)(v101 + 8);
        char v56 = *(unsigned char *)(v101 + 16);
        uint64_t v57 = *(void *)(v101 + 24);
        uint64_t v58 = v96;
        swift_getAtKeyPath();
        uint64_t v59 = v57;
        uint64_t v60 = v89;
        uint64_t v61 = v90;
        static PlottableValue.value(_:_:)(v54, v55, v56, v59, v89, v97);
        uint64_t v83 = *(void (**)(char *, uint64_t))(v98 + 8);
        v83(v58, v60);
        uint64_t v98 = v53;
        uint64_t v62 = v100;
        uint64_t v63 = *(void *)v100;
        uint64_t v81 = *(void *)(v100 + 8);
        uint64_t v82 = v63;
        LOBYTE(v55) = *(unsigned char *)(v100 + 16);
        uint64_t v64 = *(void *)(v100 + 24);
        swift_getAtKeyPath();
        uint64_t v65 = v88;
        static PlottableValue.value(_:_:)(v82, v81, v55, v64, v60, v88);
        v83(v58, v60);
        uint64_t v66 = v97;
        sub_21F9D598C(v97, v65, v60, v61, (uint64_t)v103);
        sub_21F764AF8((uint64_t)v103, (uint64_t)v102);
        uint64_t v67 = v92;
        uint64_t v68 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
        v68(v65, v92);
        v68(v66, v67);
        swift_release();
        swift_release();
        (*(void (**)(uint64_t))(*(void *)(v93 - 8) + 8))(v99);
        uint64_t v69 = v87;
        uint64_t v70 = *(void (**)(uint64_t, uint64_t))(*(void *)(v87 - 8) + 8);
        v70(v62, v87);
        v70(v101, v69);
        sub_21F764AF8((uint64_t)v102, (uint64_t)v104);
        uint64_t v50 = v94;
        uint64_t v51 = v95;
        uint64_t v18 = v84;
        uint64_t v30 = v85;
        goto LABEL_6;
      }
      swift_release();
      goto LABEL_14;
    case 3:
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v78 = *(void (**)(char *, uint64_t))(v94 + 8);
        v78(v34, v18);
        v78(v30, v18);
      }
      goto LABEL_14;
    case 4:
      goto LABEL_14;
    default:
      v35(v26, (uint64_t)v30, v18);
      if (swift_getEnumCaseMultiPayload())
      {
        (*(void (**)(char *, uint64_t))(v98 + 8))(v26, v89);
LABEL_14:
        sub_21FA266E0();
        __break(1u);
        JUMPOUT(0x21F9D41A0);
      }
      uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v98 + 32);
      uint64_t v38 = v89;
      v37(v96, v26, v89);
      v37(v86, v34, v38);
      uint64_t v39 = v101;
      uint64_t v40 = v97;
      uint64_t v41 = v90;
      static PlottableValue.value(_:_:)(*(void *)v101, *(void *)(v101 + 8), *(unsigned char *)(v101 + 16), *(void *)(v101 + 24), v38, v97);
      uint64_t v42 = v100;
      uint64_t v43 = v88;
      static PlottableValue.value(_:_:)(*(void *)v100, *(void *)(v100 + 8), *(unsigned char *)(v100 + 16), *(void *)(v100 + 24), v38, v88);
      sub_21F9D598C(v40, v43, v38, v41, (uint64_t)v103);
      sub_21F764AF8((uint64_t)v103, (uint64_t)v102);
      uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
      uint64_t v45 = v43;
      uint64_t v46 = v92;
      v44(v45, v92);
      v44(v40, v46);
      (*(void (**)(uint64_t))(*(void *)(v93 - 8) + 8))(v99);
      uint64_t v47 = *(void (**)(char *, uint64_t))(v98 + 8);
      v47(v86, v38);
      v47(v96, v38);
      uint64_t v48 = v87;
      uint64_t v49 = *(void (**)(uint64_t, uint64_t))(*(void *)(v87 - 8) + 8);
      v49(v42, v87);
      v49(v39, v48);
      sub_21F764AF8((uint64_t)v102, (uint64_t)v104);
      uint64_t v50 = v94;
      uint64_t v51 = v95;
LABEL_6:
      (*(void (**)(char *, uint64_t))(v50 + 8))(v30, v18);
      return sub_21F764AF8((uint64_t)v104, v51);
  }
}

uint64_t sub_21F9D41B4@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v185 = a3;
  uint64_t v180 = a1;
  uint64_t v176 = a7;
  uint64_t v154 = sub_21F76CA40(&qword_26AD46A40);
  MEMORY[0x270FA5388](v154);
  uint64_t v144 = (uint64_t)&v143 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  char v145 = (char *)&v143 - v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v155 = (uint64_t)&v143 - v15;
  uint64_t v166 = sub_21FA241F0();
  uint64_t v156 = *(void *)(v166 - 8);
  MEMORY[0x270FA5388](v166);
  long long v149 = (char *)&v143 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v146 = (char *)&v143 - v17;
  uint64_t v18 = sub_21F76CA40(&qword_26AD45870);
  MEMORY[0x270FA5388](v18 - 8);
  unint64_t v148 = (char *)&v143 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_21FA23EA0();
  uint64_t v161 = *(void *)(v20 - 8);
  uint64_t v162 = v20;
  MEMORY[0x270FA5388](v20);
  long long v165 = (char *)&v143 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_21FA24320();
  uint64_t v178 = *(void *)(v22 - 8);
  uint64_t v179 = v22;
  MEMORY[0x270FA5388](v22);
  uint64_t v159 = (char *)&v143 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v160 = sub_21FA24310();
  uint64_t v158 = *(void *)(v160 - 8);
  MEMORY[0x270FA5388](v160);
  uint64_t v157 = (char *)&v143 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for PlottableValue();
  uint64_t v167 = *(void *)(v25 - 8);
  uint64_t v168 = v25;
  MEMORY[0x270FA5388](v25);
  uint64_t v164 = (uint64_t)&v143 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v177 = (uint64_t)&v143 - v28;
  uint64_t v182 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v29);
  uint64_t v163 = (char *)&v143 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  uint64_t v181 = (char *)&v143 - v32;
  uint64_t v33 = a4;
  *(void *)&long long v175 = a5;
  *(void *)&long long v183 = a6;
  uint64_t v34 = type metadata accessor for PlottableProjection.Storage();
  uint64_t v172 = *(void *)(v34 - 8);
  uint64_t v173 = v34;
  MEMORY[0x270FA5388](v34);
  uint64_t v36 = (uint64_t *)((char *)&v143 - v35);
  uint64_t v38 = *((void *)a2 + 1);
  uint64_t v37 = *((void *)a2 + 2);
  uint64_t v39 = *((void *)a2 + 3);
  uint64_t v40 = *((void *)a2 + 4);
  uint64_t v41 = *((void *)a2 + 5);
  uint64_t v42 = *((void *)a2 + 6);
  uint64_t v43 = *((void *)a2 + 7);
  uint64_t v44 = *((void *)a2 + 8);
  uint64_t v46 = *((void *)a2 + 9);
  uint64_t v45 = *((void *)a2 + 10);
  uint64_t v47 = *((void *)a2 + 11);
  int v48 = a2[96];
  uint64_t v49 = *((void *)a2 + 13);
  int v50 = a2[112];
  uint64_t v184 = v33;
  if (v48 != 255)
  {
    uint64_t v51 = *a2;
    uint64_t v150 = v49;
    int v151 = v50;
    uint64_t v169 = v39;
    uint64_t v170 = v40;
    uint64_t v171 = v41;
    uint64_t v174 = v42;
    uint64_t v152 = v43;
    uint64_t v153 = v44;
    switch(v51)
    {
      case 1:
        sub_21F829E74(v47, v48 & 1);
        double v62 = sub_21F81698C(v185, v47, v48 & 1);
        uint64_t v64 = v152;
        uint64_t v63 = v153;
        sub_21F83FAEC(v38, v37, v169, v170, v171, v174, v152, v153, v46, v45, v47, v48);
        sub_21F82B5F8(v150, v151);
        sub_21F83FAEC(v38, v37, v169, v170, v171, v174, v64, v63, v46, v45, v47, v48);
        uint64_t v56 = *(void *)&v62;
        char v55 = 1;
        goto LABEL_7;
      case 2:
        sub_21F829E74(v47, v48 & 1);
        double v59 = sub_21F81698C(v185, v47, v48 & 1);
        uint64_t v61 = v152;
        uint64_t v60 = v153;
        sub_21F83FAEC(v38, v37, v169, v170, v171, v174, v152, v153, v46, v45, v47, v48);
        sub_21F82B5F8(v150, v151);
        sub_21F83FAEC(v38, v37, v169, v170, v171, v174, v61, v60, v46, v45, v47, v48);
        uint64_t v56 = *(void *)&v59;
        char v55 = 2;
        goto LABEL_7;
      case 3:
        goto LABEL_18;
      default:
        sub_21F829E74(v47, v48 & 1);
        double v52 = sub_21F81698C(v185, v47, v48 & 1);
        uint64_t v54 = v152;
        uint64_t v53 = v153;
        sub_21F83FAEC(v38, v37, v169, v170, v171, v174, v152, v153, v46, v45, v47, v48);
        sub_21F82B5F8(v150, v151);
        sub_21F83FAEC(v38, v37, v169, v170, v171, v174, v54, v53, v46, v45, v47, v48);
        char v55 = 0;
        uint64_t v56 = *(void *)&v52;
        goto LABEL_7;
    }
  }
  uint64_t v141 = v45;
  uint64_t v142 = v47;
  uint64_t v57 = v49;
  char v58 = v50;
  sub_21F83FAEC(v38, v37, v39, v40, v41, v42, v43, v44, v46, v141, v142, 0xFFu);
  sub_21F82B5F8(v57, v58);
  uint64_t v56 = 0;
  char v55 = 3;
LABEL_7:
  uint64_t v65 = v175;
  uint64_t v174 = type metadata accessor for PlottableProjection();
  uint64_t v66 = v180;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v172 + 16))(v36, v180 + *(int *)(v174 + 44), v173);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v69 = v178;
  uint64_t v68 = v179;
  uint64_t v70 = v185;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      uint64_t v127 = (char *)v36 + *(int *)(swift_getTupleTypeMetadata2() + 48);
      uint64_t v128 = *(void (**)(char *, uint64_t *, uint64_t))(v182 + 32);
      v128(v181, v36, v65);
      v128(v163, (uint64_t *)v127, v65);
      uint64_t v129 = *(void *)v66;
      uint64_t v130 = *(void *)(v66 + 8);
      LOBYTE(v128) = *(unsigned char *)(v66 + 16);
      uint64_t v131 = *(void *)(v66 + 24);
      uint64_t v132 = v177;
      uint64_t v133 = v183;
      static PlottableValue.value(_:_:)(*(void *)v66, v130, (char)v128, v131, v65, v177);
      uint64_t v134 = v164;
      uint64_t v135 = v131;
      long long v136 = v163;
      static PlottableValue.value(_:_:)(v129, v130, (char)v128, v135, v65, v164);
      sub_21F9D598C(v132, v134, v65, v133, (uint64_t)v199);
      sub_21F764AF8((uint64_t)v199, (uint64_t)v186);
      uint64_t v137 = v168;
      unsigned __int8 v138 = *(void (**)(uint64_t, uint64_t))(v167 + 8);
      v138(v134, v168);
      v138(v132, v137);
      (*(void (**)(uint64_t))(*(void *)(v184 - 8) + 8))(v185);
      long long v139 = *(void (**)(char *, uint64_t))(v182 + 8);
      v139(v136, v65);
      v139(v181, v65);
      goto LABEL_15;
    case 2:
      uint64_t v103 = *v36;
      uint64_t v178 = v56;
      uint64_t v179 = v103;
      uint64_t v104 = *(void *)v66;
      uint64_t v105 = *(void *)(v66 + 8);
      char v106 = *(unsigned char *)(v66 + 16);
      uint64_t v107 = *(void *)(v66 + 24);
      uint64_t v108 = v181;
      swift_getAtKeyPath();
      uint64_t v109 = v177;
      uint64_t v110 = v104;
      uint64_t v111 = v183;
      static PlottableValue.value(_:_:)(v110, v105, v106, v107, v65, v177);
      (*(void (**)(char *, uint64_t))(v182 + 8))(v108, v65);
      sub_21F9D5E34(v109, v178, v55, v65, v111, (uint64_t)v199);
      sub_21F764AF8((uint64_t)v199, (uint64_t)v186);
      (*(void (**)(uint64_t, uint64_t))(v167 + 8))(v109, v168);
      goto LABEL_13;
    case 3:
      uint64_t v112 = v36[1];
      uint64_t v178 = *v36;
      uint64_t v179 = v112;
      uint64_t v113 = *(void *)v66;
      uint64_t v114 = *(void *)(v66 + 8);
      char v115 = *(unsigned char *)(v66 + 16);
      uint64_t v116 = *(void *)(v66 + 24);
      uint64_t v117 = v181;
      swift_getAtKeyPath();
      uint64_t v118 = v183;
      static PlottableValue.value(_:_:)(v113, v114, v115, v116, v65, v177);
      uint64_t v182 = *(void *)(v182 + 8);
      ((void (*)(char *, uint64_t))v182)(v117, v65);
      uint64_t v119 = *(void *)v66;
      uint64_t v120 = *(void *)(v66 + 8);
      char v121 = *(unsigned char *)(v66 + 16);
      uint64_t v173 = *(void *)(v66 + 24);
      swift_getAtKeyPath();
      uint64_t v122 = v164;
      static PlottableValue.value(_:_:)(v119, v120, v121, v173, v65, v164);
      ((void (*)(char *, uint64_t))v182)(v117, v65);
      uint64_t v123 = v177;
      sub_21F9D598C(v177, v122, v65, v118, (uint64_t)v199);
      sub_21F764AF8((uint64_t)v199, (uint64_t)v186);
      uint64_t v124 = *(void (**)(uint64_t, uint64_t))(v167 + 8);
      uint64_t v125 = v122;
      uint64_t v126 = v168;
      v124(v125, v168);
      v124(v123, v126);
      swift_release();
LABEL_13:
      swift_release();
      (*(void (**)(uint64_t))(*(void *)(v184 - 8) + 8))(v185);
      goto LABEL_15;
    case 4:
      uint64_t v177 = *v36;
      sub_21FA26AD0();
      uint64_t v75 = v160;
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      uint64_t v77 = (char *)v36 + *(int *)(TupleTypeMetadata3 + 64);
      (*(void (**)(char *, char *, uint64_t))(v158 + 32))(v157, (char *)v36 + *(int *)(TupleTypeMetadata3 + 48), v75);
      (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v159, v77, v68);
      uint64_t v78 = v181;
      swift_getAtKeyPath();
      (*(void (**)(uint64_t))(v183 + 24))(v65);
      (*(void (**)(char *, uint64_t))(v182 + 8))(v78, v65);
      uint64_t v79 = v149;
      uint64_t v80 = v166;
      swift_dynamicCast();
      uint64_t v81 = v148;
      sub_21FA24250();
      uint64_t v182 = *(void *)(v156 + 8);
      *(void *)&long long v183 = v156 + 8;
      ((void (*)(char *, uint64_t))v182)(v79, v80);
      uint64_t v82 = v161;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v161 + 48))(v81, 1, v162) == 1)
      {
        __break(1u);
LABEL_18:
        sub_21FA266E0();
        __break(1u);
        JUMPOUT(0x21F9D5400);
      }
      (*(void (**)(void))(v82 + 32))();
      uint64_t v83 = *(void *)v66;
      uint64_t v84 = *(void *)(v66 + 8);
      char v85 = *(unsigned char *)(v66 + 16);
      uint64_t v86 = *(void *)(v66 + 24);
      sub_21FA23E90();
      uint64_t v87 = v155;
      uint64_t v88 = v155 + *(int *)(v154 + 36);
      uint64_t v181 = *(char **)(v156 + 16);
      ((void (*)(uint64_t, char *, uint64_t))v181)(v88, v79, v166);
      *(void *)uint64_t v87 = v83;
      *(void *)(v87 + 8) = v84;
      *(unsigned char *)(v87 + 16) = v85;
      *(void *)(v87 + 24) = v86;
      *(void *)&long long v175 = sub_21F76CA40(&qword_26AD45B68);
      swift_storeEnumTagMultiPayload();
      sub_21F7652C0(v83, v84, v85);
      swift_bridgeObjectRetain();
      uint64_t v89 = v166;
      ((void (*)(char *, uint64_t))v182)(v79, v166);
      uint64_t v90 = *(void *)v66;
      uint64_t v91 = *(void *)(v66 + 8);
      char v92 = *(unsigned char *)(v66 + 16);
      uint64_t v93 = *(void *)(v66 + 24);
      sub_21FA23E80();
      uint64_t v94 = (uint64_t)v145;
      ((void (*)(char *, char *, uint64_t))v181)(&v145[*(int *)(v154 + 36)], v79, v89);
      *(void *)uint64_t v94 = v90;
      *(void *)(v94 + 8) = v91;
      *(unsigned char *)(v94 + 16) = v92;
      *(void *)(v94 + 24) = v93;
      swift_storeEnumTagMultiPayload();
      sub_21F7652C0(v90, v91, v92);
      swift_bridgeObjectRetain();
      ((void (*)(char *, uint64_t))v182)(v79, v89);
      uint64_t v95 = v155;
      uint64_t v96 = v144;
      sub_21F76C978(v155, v144, &qword_26AD46A40);
      sub_21F9CB7B4(v96, (uint64_t)v216);
      uint64_t v97 = v216[0];
      uint64_t v171 = v216[1];
      LOBYTE(v91) = v217;
      long long v183 = v218;
      uint64_t v182 = v219;
      LODWORD(v181) = v220;
      sub_21F76C978(v94, v96, &qword_26AD46A40);
      sub_21F9CB7B4(v96, (uint64_t)v186);
      uint64_t v99 = v186[0];
      uint64_t v98 = v186[1];
      char v100 = v187;
      long long v175 = v188;
      uint64_t v173 = v189;
      LODWORD(v172) = v190;
      sub_21F76CA84(v94, &qword_26AD46A40);
      sub_21F76CA84(v95, &qword_26AD46A40);
      swift_release();
      char v197 = v91;
      char v194 = v100;
      v199[0] = v97;
      v199[1] = v171;
      char v200 = v91;
      *(_DWORD *)unint64_t v201 = *(_DWORD *)v196;
      *(_DWORD *)&v201[3] = *(_DWORD *)&v196[3];
      long long v202 = v183;
      uint64_t v203 = v182;
      char v204 = (char)v181;
      *(_DWORD *)uint64_t v205 = *(_DWORD *)v195;
      *(_DWORD *)&v205[3] = *(_DWORD *)&v195[3];
      long long v206 = v221;
      uint64_t v207 = v99;
      uint64_t v208 = v98;
      char v209 = v100;
      *(_DWORD *)uint64_t v210 = *(_DWORD *)v193;
      *(_DWORD *)&v210[3] = *(_DWORD *)&v193[3];
      long long v211 = v175;
      uint64_t v212 = v173;
      char v213 = v172;
      *(_DWORD *)int v214 = *(_DWORD *)v192;
      *(_DWORD *)&v214[3] = *(_DWORD *)&v192[3];
      long long v215 = v191;
      int8x16_t v101 = sub_21F860DAC((uint64_t)v199);
      (*(void (**)(uint64_t, int8x16_t))(*(void *)(v184 - 8) + 8))(v185, v101);
      (*(void (**)(char *, uint64_t))(v161 + 8))(v165, v162);
      (*(void (**)(char *, uint64_t))(v178 + 8))(v159, v179);
      (*(void (**)(char *, uint64_t))(v158 + 8))(v157, v160);
      (*(void (**)(uint64_t))(*(void *)(v174 - 8) + 8))(v180);
      uint64_t v102 = v199;
LABEL_16:
      sub_21F764AF8((uint64_t)v102, (uint64_t)v198);
      return sub_21F764AF8((uint64_t)v198, v176);
    default:
      uint64_t v72 = v181;
      uint64_t v71 = v182;
      (*(void (**)(char *, uint64_t *, uint64_t))(v182 + 32))(v181, v36, v65);
      uint64_t v73 = v177;
      uint64_t v74 = v183;
      static PlottableValue.value(_:_:)(*(void *)v66, *(void *)(v66 + 8), *(unsigned char *)(v66 + 16), *(void *)(v66 + 24), v65, v177);
      sub_21F9D5E34(v73, v56, v55, v65, v74, (uint64_t)v199);
      sub_21F764AF8((uint64_t)v199, (uint64_t)v186);
      (*(void (**)(uint64_t, uint64_t))(v167 + 8))(v73, v168);
      (*(void (**)(uint64_t))(*(void *)(v184 - 8) + 8))(v70);
      (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v65);
LABEL_15:
      (*(void (**)(uint64_t))(*(void *)(v174 - 8) + 8))(v66);
      uint64_t v102 = v186;
      goto LABEL_16;
  }
}

double sub_21F9D5424@<D0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X6>, double *a5@<X8>, double a6@<D0>, double a7@<D1>, uint64_t a8)
{
  uint64_t v14 = sub_21F76CA40(&qword_267EEA3A0);
  sub_21F8B54F0(a2, v14, a4, a8);
  sub_21F8B54F0(a3, v14, a4, a8);
  type metadata accessor for MappedCoefficients();
  double result = sub_21F8827E0(a1, v19, v18) + a6;
  *a5 = result;
  a5[1] = v16 + a7;
  return result;
}

uint64_t sub_21F9D5564(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3 < 0)
  {
    if (a6 < 0)
    {
      if (a3)
      {
        if ((a6 & 1) != 0 && *(double *)&a1 == *(double *)&a4 && *(double *)&a2 == *(double *)&a5) {
          return 1;
        }
      }
      else if ((a6 & 1) == 0 && *(double *)&a1 == *(double *)&a4 && *(double *)&a2 == *(double *)&a5)
      {
        return 1;
      }
    }
  }
  else if ((a6 & 0x80) == 0)
  {
    if (a3)
    {
      if (a3 == 1)
      {
        if (a6 == 1 && *(double *)&a1 == *(double *)&a4) {
          return 1;
        }
      }
      else if (a6 == 2)
      {
        if (a1 == a4 && a2 == a5) {
          return 1;
        }
        if (sub_21FA268D0()) {
          return 1;
        }
      }
    }
    else if (!a6 && *(double *)&a1 == *(double *)&a4)
    {
      return 1;
    }
  }
  return 0;
}

BOOL sub_21F9D5674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, uint64_t a18, uint64_t a19, double a20,double a21,char a22)
{
  if ((sub_21FA25320() & 1) == 0) {
    return 0;
  }
  if (a7 < 0)
  {
    if (a22 < 0)
    {
      if (a7)
      {
        if ((a22 & 1) == 0) {
          return 0;
        }
      }
      else if (a22)
      {
        return 0;
      }
      return *(double *)&a5 == a20 && *(double *)&a6 == a21;
    }
    return 0;
  }
  if (a22 < 0) {
    return 0;
  }
  if (!a7)
  {
    if (!a22) {
      return *(double *)&a5 == a20;
    }
    return 0;
  }
  if (a7 != 1) {
    return a22 == 2 && (a5 == *(void *)&a20 && a6 == *(void *)&a21 || (sub_21FA268D0() & 1) != 0);
  }
  if (a22 != 1) {
    return 0;
  }
  return *(double *)&a5 == a20;
}

uint64_t sub_21F9D5780@<X0>(uint64_t a1@<X8>)
{
  swift_getAtKeyPath();
  uint64_t v4 = v3;
  char v5 = 0;
  sub_21F9D5DEC((uint64_t)&v4);
  return sub_21F764AF8((uint64_t)&v4, a1);
}

uint64_t sub_21F9D57DC@<X0>(uint64_t a1@<X8>)
{
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  uint64_t v5 = v4;
  char v6 = 0;
  uint64_t v7 = v3;
  char v8 = 0;
  sub_21F7BC014((uint64_t)&v5);
  return sub_21F764AF8((uint64_t)&v5, a1);
}

uint64_t sub_21F9D5860@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for PlottableValue();
  __n128 v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v14 - v10;
  (*(void (**)(char *, uint64_t, __n128))(v12 + 16))((char *)&v14 - v10, a1, v9);
  sub_21F764B80((uint64_t)v11, a2, a3, (uint64_t)&v14);
  long long v20 = v14;
  char v21 = v15;
  uint64_t v22 = v16;
  long long v23 = v17;
  char v24 = v18;
  long long v25 = v19;
  sub_21F860BB0((uint64_t)&v20);
  return sub_21F764AF8((uint64_t)&v20, a4);
}

uint64_t sub_21F9D598C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v24 = a5;
  uint64_t v8 = type metadata accessor for PlottableValue();
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v17 - v11;
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16);
  v13((char *)&v17 - v11, a1, v8, v10);
  sub_21F764B80((uint64_t)v12, a3, a4, (uint64_t)v25);
  uint64_t v14 = v25[0];
  uint64_t v18 = v25[1];
  char v15 = v26;
  uint64_t v20 = v28;
  int v19 = v29;
  long long v21 = v27;
  long long v22 = v30;
  ((void (*)(char *, uint64_t, uint64_t))v13)(v12, v23, v8);
  sub_21F764B80((uint64_t)v12, a3, a4, (uint64_t)&v31);
  char v42 = v15;
  char v39 = v32;
  v43[0] = v14;
  v43[1] = v18;
  char v44 = v15;
  *(_DWORD *)uint64_t v45 = *(_DWORD *)v41;
  *(_DWORD *)&v45[3] = *(_DWORD *)&v41[3];
  long long v46 = v21;
  uint64_t v47 = v20;
  char v48 = v19;
  *(_DWORD *)&v49[3] = *(_DWORD *)&v40[3];
  *(_DWORD *)uint64_t v49 = *(_DWORD *)v40;
  long long v50 = v22;
  long long v51 = v31;
  char v52 = v32;
  *(_DWORD *)uint64_t v53 = *(_DWORD *)v38;
  *(_DWORD *)&v53[3] = *(_DWORD *)&v38[3];
  uint64_t v54 = v33;
  long long v55 = v34;
  char v56 = v35;
  *(_DWORD *)&v57[3] = *(_DWORD *)&v37[3];
  *(_DWORD *)uint64_t v57 = *(_DWORD *)v37;
  long long v58 = v36;
  sub_21F860DAC((uint64_t)v43);
  return sub_21F764AF8((uint64_t)v43, v24);
}

uint64_t sub_21F9D5BA4(uint64_t a1)
{
  uint64_t v2 = sub_21F76CA40(&qword_26AD47A98);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_21FA241F0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v16 - v11;
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16);
  v13((char *)&v16 - v11, a1, v5, v10);
  ((void (*)(char *, char *, uint64_t))v13)(v4, v12, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    uint64_t result = sub_21F76CA84((uint64_t)v4, &qword_26AD47A98);
    if (v7 == 8) {
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v12, v5);
    }
    else {
      __break(1u);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    sub_21FA23FE0();
    char v15 = *(void (**)(char *, uint64_t))(v6 + 8);
    v15(v8, v5);
    return ((uint64_t (*)(char *, uint64_t))v15)(v12, v5);
  }
  return result;
}

int8x16_t sub_21F9D5DEC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64) & 0xFFFFFFFFFFFFFF8;
  uint64_t v2 = *(void *)(a1 + 136) & 0xFFFFFFFFFFFFFF8 | 0x2000000000000000;
  *(int8x16_t *)(a1 + 48) = vandq_s8(*(int8x16_t *)(a1 + 48), (int8x16_t)xmmword_21FA28D90);
  *(void *)(a1 + 64) = v1;
  int8x16_t result = vandq_s8(*(int8x16_t *)(a1 + 120), (int8x16_t)xmmword_21FA28DA0);
  *(int8x16_t *)(a1 + 120) = result;
  *(void *)(a1 + 136) = v2;
  return result;
}

uint64_t sub_21F9D5E34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for PlottableValue();
  __n128 v13 = MEMORY[0x270FA5388](v12);
  char v15 = (char *)&v18 - v14;
  (*(void (**)(char *, uint64_t, __n128))(v16 + 16))((char *)&v18 - v14, a1, v13);
  sub_21F764B80((uint64_t)v15, a4, a5, (uint64_t)&v18);
  long long v24 = v18;
  char v25 = v19;
  uint64_t v26 = v20;
  long long v27 = v21;
  char v28 = v22;
  long long v29 = v23;
  uint64_t v30 = a2;
  char v31 = a3;
  sub_21F76CE78((uint64_t)&v24);
  return sub_21F764AF8((uint64_t)&v24, a6);
}

double sub_21F9D5F88@<D0>(double *a1@<X8>)
{
  double v3 = *(double *)(v1 + 64);
  double v4 = *(double *)(v1 + 72);
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  double result = v4 + v6;
  *a1 = v3 + v6;
  a1[1] = v4 + v6;
  return result;
}

double sub_21F9D6004@<D0>(double *a1@<X8>)
{
  double v3 = *(double *)(v1 + 56);
  swift_getAtKeyPath();
  double result = v3 + v5;
  *a1 = v3 + v5;
  a1[1] = v3 + v5;
  return result;
}

double sub_21F9D6050(double a1)
{
  return *(double *)(v1 + 24) + a1 + *(double *)(v1 + 40);
}

void sub_21F9D6088(uint64_t a1, uint64_t a2, double (*a3)(uint64_t, double, double))
{
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a2 + 16);
  if (v6 >= v5) {
    int64_t v7 = *(void *)(a1 + 16);
  }
  else {
    int64_t v7 = *(void *)(a2 + 16);
  }
  uint64_t v39 = MEMORY[0x263F8EE78];
  sub_21F7A2C08(0, v7, 0);
  int64_t v33 = v6;
  uint64_t v35 = a2;
  uint64_t v36 = a1;
  unint64_t v34 = v5;
  int64_t v32 = v7;
  if (v7)
  {
    unint64_t v8 = v5;
    uint64_t v9 = (double *)(a1 + 32);
    __n128 v10 = (double *)(a2 + 32);
    swift_bridgeObjectRetain();
    uint64_t v11 = swift_bridgeObjectRetain();
    unint64_t v12 = v6;
    unint64_t v13 = v8;
    while (v13)
    {
      if (!v12) {
        goto LABEL_26;
      }
      double v14 = a3(v11, *v9, *v10);
      uint64_t v16 = v15;
      unint64_t v18 = *(void *)(v39 + 16);
      unint64_t v17 = *(void *)(v39 + 24);
      if (v18 >= v17 >> 1) {
        uint64_t v11 = (uint64_t)sub_21F7A2C08((char *)(v17 > 1), v18 + 1, 1);
      }
      *(void *)(v39 + 16) = v18 + 1;
      uint64_t v19 = v39 + 16 * v18;
      --v12;
      *(double *)(v19 + 32) = v14;
      *(void *)(v19 + 40) = v16;
      --v13;
      ++v10;
      ++v9;
      if (!--v7) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = swift_bridgeObjectRetain();
LABEL_13:
    if (v34 <= v33)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v20 = 0;
    if (v32 <= v33) {
      int64_t v21 = v33;
    }
    else {
      int64_t v21 = v32;
    }
    int64_t v37 = v21 - v32;
    unint64_t v22 = v34 - v32;
    uint64_t v23 = 8 * v32 + 32;
    uint64_t v24 = v36 + v23;
    uint64_t v25 = v35 + v23;
    while (v22 != v20)
    {
      if (v33 - v32 == v20) {
        goto LABEL_24;
      }
      if (v37 == v20) {
        goto LABEL_28;
      }
      double v26 = a3(v11, *(double *)(v24 + 8 * v20), *(double *)(v25 + 8 * v20));
      uint64_t v28 = v27;
      unint64_t v30 = *(void *)(v39 + 16);
      unint64_t v29 = *(void *)(v39 + 24);
      if (v30 >= v29 >> 1) {
        uint64_t v11 = (uint64_t)sub_21F7A2C08((char *)(v29 > 1), v30 + 1, 1);
      }
      *(void *)(v39 + 16) = v30 + 1;
      uint64_t v31 = v39 + 16 * v30;
      *(double *)(v31 + 32) = v26;
      *(void *)(v31 + 40) = v28;
      if (v22 == ++v20) {
        goto LABEL_24;
      }
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
}

double sub_21F9D62D4@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return sub_21F9D5424(a1, *(void *)(v2 + 72), *(void *)(v2 + 80), *(void *)(v2 + 24), a2, *(double *)(v2 + 88), *(double *)(v2 + 96), *(void *)(v2 + 40));
}

uint64_t sub_21F9D6318(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 104);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), v4);
  return a1;
}

void sub_21F9D6380(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

double sub_21F9D6398(uint64_t a1, double a2, double a3)
{
  double v7 = *(double *)(v3 + 64);
  type metadata accessor for MappedCoefficients();
  return v7 + sub_21F8827E0(a1, a2, a3);
}

void sub_21F9D640C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = *(double (**)(uint64_t, double, double))(v2 + 56);
  sub_21F779EA4(&qword_26AD447E0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(double *)a2 = v5(a1, *(double *)(a1 + *(int *)(TupleTypeMetadata2 + 48)), *(double *)(a1 + *(int *)(TupleTypeMetadata2 + 48) + 8));
  *(void *)(a2 + 8) = v7;
}

double sub_21F9D6490@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 56);
  double v6 = *(double *)(v2 + 72);
  double v7 = *(double *)(v2 + 80);
  double v8 = *(double *)(v2 + 88);
  double v9 = *(double *)(v2 + 96);
  double v10 = *(double *)(v2 + 104);
  double v11 = *(double *)(v5 + 16);
  if (*(unsigned char *)(v5 + 24)) {
    double v11 = 0.0;
  }
  double v12 = v6 + v11;
  type metadata accessor for MappedCoefficients();
  double result = v8 + v7 + sub_21F8827E0(a1, v6, v12);
  *a2 = result;
  a2[1] = v10 + v14 - v9;
  return result;
}

double sub_21F9D6544@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double v5 = v2[8];
  double v6 = v2[9];
  double v7 = v2[10];
  type metadata accessor for MappedCoefficients();
  double result = v6 + sub_21F8827E0(a1, v5, v5);
  *a2 = result;
  a2[1] = v7 + v9;
  return result;
}

double sub_21F9D65CC(uint64_t a1, double a2)
{
  uint64_t v5 = *(void *)(v2 + 56);
  double v6 = *(double *)(v2 + 72);
  double v7 = *(double *)(v2 + 80);
  double v8 = *(double *)(v5 + 16);
  if (*(unsigned char *)(v5 + 24)) {
    double v8 = 0.0;
  }
  double v9 = v8 + a2;
  type metadata accessor for MappedCoefficients();
  return v7 + v6 + sub_21F8827E0(a1, a2, v9);
}

void sub_21F9D6668(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

double sub_21F9D6680(uint64_t a1, double a2)
{
  double v5 = *(double *)(v2 + 64);
  type metadata accessor for MappedCoefficients();
  return v5 + sub_21F8827E0(a1, a2, a2);
}

void sub_21F9D66F0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v5 = *(double (**)(uint64_t, double))(v2 + 56);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(double *)a2 = v5(a1, *(double *)(a1 + *(int *)(TupleTypeMetadata2 + 48)));
  *(void *)(a2 + 8) = v7;
}

uint64_t LinePlot<A>.init(x:y:domain:function:)@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  v14[0] = sub_21FA25340();
  v14[1] = v6;
  char v15 = v7 & 1;
  uint64_t v16 = v8;
  uint64_t v17 = sub_21FA25340();
  uint64_t v18 = v9;
  char v19 = v10 & 1;
  uint64_t v20 = v11;
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  char v23 = a4 & 1;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  sub_21F9974D0((uint64_t)v14);
  return sub_21F9974EC((uint64_t)v14, a1);
}

uint64_t LinePlot<A>.init(x:y:t:domain:function:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v22[0] = sub_21FA25340();
  v22[1] = v11;
  char v23 = v12 & 1;
  uint64_t v24 = v13;
  uint64_t v25 = sub_21FA25340();
  uint64_t v26 = v14;
  char v27 = v15 & 1;
  uint64_t v28 = v16;
  uint64_t v29 = sub_21FA25340();
  uint64_t v30 = v17;
  char v31 = v18 & 1;
  uint64_t v32 = v19;
  double v33 = a2;
  double v34 = a3;
  uint64_t v35 = a8;
  uint64_t v36 = a9;
  sub_21F997548((uint64_t)v22);
  return sub_21F9974EC((uint64_t)v22, a1);
}

uint64_t LinePlot<A>.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  char v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F8B0FF0(v2, v4, a2);
  sub_21F8B0FF0(v7, v4, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_21F9D6B08(uint64_t a1, uint64_t a2)
{
  return LinePlot<A>.body.getter(a1, *(void *)(a2 - 8));
}

uint64_t LinePlot.init<A, B, C>(_:x:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v52 = a5;
  uint64_t v53 = a8;
  uint64_t v56 = a3;
  uint64_t v57 = a6;
  uint64_t v59 = a9;
  uint64_t v60 = a2;
  uint64_t v48 = a1;
  uint64_t v58 = a10;
  uint64_t v44 = a7;
  swift_getAssociatedTypeWitness();
  uint64_t v50 = type metadata accessor for PlottableProjection();
  uint64_t v12 = *(void *)(v50 - 8);
  uint64_t v51 = *(void *)(v12 + 64);
  MEMORY[0x270FA5388](v50);
  uint64_t v47 = (char *)&v42 - v13;
  uint64_t v14 = type metadata accessor for PlottableProjection();
  uint64_t v42 = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  MEMORY[0x270FA5388](v14);
  char v18 = (char *)&v42 - v17;
  uint64_t v43 = (char *)&v42 - v17;
  uint64_t v49 = *(void *)(a4 - 8);
  uint64_t v19 = v49;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = v22;
  uint64_t v23 = type metadata accessor for VectorizedLinePlotContent();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v54 = v23;
  uint64_t v55 = v24;
  __n128 v25 = MEMORY[0x270FA5388](v23);
  uint64_t v46 = (uint64_t)&v42 - v26;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16))(v22, a1, a4, v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v60, v14);
  char v27 = v47;
  uint64_t v28 = v56;
  uint64_t v29 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v47, v56, v50);
  unint64_t v30 = (*(unsigned __int8 *)(v15 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v31 = (v16 + *(unsigned __int8 *)(v12 + 80) + v30) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v32 = (char *)swift_allocObject();
  uint64_t v33 = v52;
  *((void *)v32 + 2) = a4;
  *((void *)v32 + 3) = v33;
  double v34 = v43;
  uint64_t v35 = v44;
  *((void *)v32 + 4) = v57;
  *((void *)v32 + 5) = v35;
  uint64_t v36 = v58;
  *((void *)v32 + 6) = v53;
  *((void *)v32 + 7) = v36;
  int64_t v37 = &v32[v30];
  uint64_t v38 = v42;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v37, v34, v42);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v32[v31], v27, v29);
  uint64_t v39 = v46;
  sub_21F9D7300((uint64_t)v45, (uint64_t)sub_21F9D8830, (uint64_t)v32, a4, (uint64_t)&type metadata for LineMark, v35, (uint64_t)&protocol witness table for LineMark, v46);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v28, v29);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v60, v38);
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, a4);
  uint64_t v40 = v54;
  swift_getWitnessTable();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 32))(v59, v39, v40);
}

void *sub_21F9D6F84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, void *a7@<X8>, uint64_t a8)
{
  uint64_t v49 = a2;
  uint64_t v50 = a3;
  uint64_t v51 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v45 = a5;
  uint64_t v46 = a8;
  uint64_t v13 = type metadata accessor for PlottableProjection();
  uint64_t v47 = *(void *)(v13 - 8);
  uint64_t v48 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v44 = (char *)&v40 - v14;
  uint64_t v15 = type metadata accessor for PlottableValue();
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v42 = a6;
  uint64_t v43 = (uint64_t)&v40 - v16;
  uint64_t v41 = a4;
  uint64_t v17 = type metadata accessor for PlottableProjection();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v40 - v19;
  uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v40 - v23;
  uint64_t v25 = type metadata accessor for PlottableValue();
  __n128 v26 = MEMORY[0x270FA5388](v25 - 8);
  uint64_t v28 = (char *)&v40 - v27;
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v21 + 16);
  v29(v24, a1, AssociatedTypeWitness, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v49, v17);
  uint64_t v30 = (uint64_t)v20;
  uint64_t v32 = v41;
  uint64_t v31 = v42;
  sub_21F83BFDC((uint64_t)v24, v30, v41, AssociatedTypeWitness, v42, (uint64_t)v28);
  ((void (*)(char *, uint64_t, uint64_t))v29)(v24, a1, AssociatedTypeWitness);
  uint64_t v33 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v44, v50, v48);
  uint64_t v34 = v43;
  uint64_t v35 = (uint64_t)v24;
  uint64_t v36 = (uint64_t)v33;
  uint64_t v37 = v45;
  uint64_t v38 = v46;
  sub_21F83BFDC(v35, v36, v45, AssociatedTypeWitness, v46, v43);
  LineMark.init<A, B>(x:y:)((uint64_t)v28, v34, v32, v37, v31, v38, v52);
  return memcpy(v51, v52, 0x131uLL);
}

uint64_t sub_21F9D7300@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v23 = a5;
  uint64_t v24 = a7;
  uint64_t v25 = a8;
  uint64_t v13 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Vectorizer();
  uint64_t v17 = *(void *)(v16 - 8);
  __n128 v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v22 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v15, a1, a4, v18);
  sub_21F83C640((uint64_t)v15, a2, a3, a4, v23, a6, v24, (uint64_t)v20);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, a4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(v25, v20, v16);
}

uint64_t LinePlot.init<A, B, C, D>(_:x:y:series:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v78 = a4;
  uint64_t v79 = a2;
  uint64_t v80 = a3;
  uint64_t v77 = a1;
  uint64_t v73 = a9;
  uint64_t v67 = a7;
  uint64_t v68 = a12;
  uint64_t v71 = a8;
  uint64_t v72 = a13;
  uint64_t v62 = a6;
  uint64_t v63 = a11;
  uint64_t v74 = a10;
  swift_getAssociatedTypeWitness();
  uint64_t v65 = type metadata accessor for PlottableProjection();
  uint64_t v76 = *(void *)(v65 - 8);
  uint64_t v66 = *(void *)(v76 + 64);
  MEMORY[0x270FA5388](v65);
  uint64_t v75 = (char *)&v56 - v14;
  uint64_t v61 = type metadata accessor for PlottableProjection();
  uint64_t v15 = *(void *)(v61 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  MEMORY[0x270FA5388](v61);
  __n128 v18 = (char *)&v56 - v17;
  uint64_t v58 = (char *)&v56 - v17;
  uint64_t v19 = type metadata accessor for PlottableProjection();
  uint64_t v56 = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(void *)(v20 + 64);
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v56 - v22;
  uint64_t v57 = (char *)&v56 - v22;
  uint64_t v24 = a5;
  uint64_t v25 = *(void *)(a5 - 8);
  uint64_t v64 = v25;
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v56 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = v28;
  uint64_t v29 = type metadata accessor for VectorizedLinePlotContent();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v69 = v29;
  uint64_t v70 = v30;
  __n128 v31 = MEMORY[0x270FA5388](v29);
  uint64_t v60 = (uint64_t)&v56 - v32;
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16);
  uint64_t v34 = v24;
  v33(v28, v77, v24, v31);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v79, v19);
  uint64_t v35 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v80, v61);
  uint64_t v36 = v76;
  uint64_t v37 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v75, v78, v65);
  unint64_t v38 = (*(unsigned __int8 *)(v20 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  unint64_t v39 = (v21 + *(unsigned __int8 *)(v15 + 80) + v38) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v40 = (v16 + *(unsigned __int8 *)(v36 + 80) + v39) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
  uint64_t v41 = (char *)swift_allocObject();
  uint64_t v42 = v34;
  uint64_t v43 = v62;
  *((void *)v41 + 2) = v34;
  *((void *)v41 + 3) = v43;
  uint64_t v44 = v71;
  *((void *)v41 + 4) = v67;
  *((void *)v41 + 5) = v44;
  uint64_t v45 = v74;
  uint64_t v46 = v63;
  *((void *)v41 + 6) = v74;
  *((void *)v41 + 7) = v46;
  uint64_t v47 = v72;
  *((void *)v41 + 8) = v68;
  *((void *)v41 + 9) = v47;
  uint64_t v48 = &v41[v38];
  uint64_t v49 = v56;
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v48, v57, v56);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v41[v39], v58, v35);
  uint64_t v50 = &v41[v40];
  uint64_t v51 = v76;
  uint64_t v52 = v37;
  (*(void (**)(char *, char *, uint64_t))(v76 + 32))(v50, v75, v37);
  uint64_t v53 = v60;
  sub_21F9D7300((uint64_t)v59, (uint64_t)sub_21F9D9148, (uint64_t)v41, v42, (uint64_t)&type metadata for LineMark, v45, (uint64_t)&protocol witness table for LineMark, v60);
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v78, v52);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v80, v35);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v79, v49);
  (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v77, v42);
  uint64_t v54 = v69;
  swift_getWitnessTable();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v70 + 32))(v73, v53, v54);
}

void *sub_21F9D7A74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v66 = a3;
  uint64_t v67 = a4;
  uint64_t v61 = a2;
  uint64_t v59 = a1;
  uint64_t v68 = a8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v62 = a7;
  uint64_t v63 = a12;
  uint64_t v16 = type metadata accessor for PlottableProjection();
  uint64_t v64 = *(void *)(v16 - 8);
  uint64_t v65 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v60 = (char *)&v50 - v17;
  uint64_t v18 = type metadata accessor for PlottableValue();
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v58 = (uint64_t)&v50 - v19;
  uint64_t v54 = a6;
  uint64_t v55 = a11;
  uint64_t v20 = type metadata accessor for PlottableProjection();
  uint64_t v56 = *(void *)(v20 - 8);
  uint64_t v57 = v20;
  MEMORY[0x270FA5388](v20);
  uint64_t v53 = (char *)&v50 - v21;
  uint64_t v22 = type metadata accessor for PlottableValue();
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v52 = (uint64_t)&v50 - v23;
  uint64_t v69 = a5;
  uint64_t v51 = type metadata accessor for PlottableProjection();
  uint64_t v24 = *(void *)(v51 - 8);
  MEMORY[0x270FA5388](v51);
  uint64_t v26 = (char *)&v50 - v25;
  uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v50 - v29;
  uint64_t v50 = a10;
  uint64_t v31 = type metadata accessor for PlottableValue();
  __n128 v32 = MEMORY[0x270FA5388](v31 - 8);
  uint64_t v34 = (char *)&v50 - v33;
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v27 + 16);
  uint64_t v36 = v59;
  v35(v30, v59, AssociatedTypeWitness, v32);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v26, v61, v51);
  sub_21F83BFDC((uint64_t)v30, (uint64_t)v26, v69, AssociatedTypeWitness, a10, (uint64_t)v34);
  uint64_t v37 = v36;
  ((void (*)(char *, uint64_t, uint64_t))v35)(v30, v36, AssociatedTypeWitness);
  unint64_t v38 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v53, v66, v57);
  uint64_t v39 = v52;
  uint64_t v40 = (uint64_t)v38;
  uint64_t v41 = v54;
  uint64_t v42 = v55;
  sub_21F83BFDC((uint64_t)v30, v40, v54, AssociatedTypeWitness, v55, v52);
  ((void (*)(char *, uint64_t, uint64_t))v35)(v30, v37, AssociatedTypeWitness);
  uint64_t v43 = v60;
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v60, v67, v65);
  uint64_t v44 = v58;
  uint64_t v45 = (uint64_t)v43;
  uint64_t v46 = v62;
  uint64_t v47 = AssociatedTypeWitness;
  uint64_t v48 = v63;
  sub_21F83BFDC((uint64_t)v30, v45, v62, v47, v63, v58);
  LineMark.init<A, B, C>(x:y:series:)((uint64_t)v34, v39, v44, v69, v41, v46, v50, v42, v70, v48);
  return memcpy(v68, v70, 0x131uLL);
}

uint64_t LinePlot<A>.init(x:y:domain:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  v16[0] = a1;
  v16[1] = a2;
  char v17 = a3 & 1;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v20 = a6;
  char v21 = a7 & 1;
  uint64_t v22 = a8;
  uint64_t v23 = a10;
  uint64_t v24 = a11;
  char v25 = a12 & 1;
  uint64_t v26 = a13;
  uint64_t v27 = a14;
  sub_21F9974D0((uint64_t)v16);
  return sub_21F9974EC((uint64_t)v16, a9);
}

uint64_t LinePlot<A>.init<A, B>(x:y:domain:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v40 = a6;
  uint64_t v41 = a7;
  int v39 = a5;
  uint64_t v38 = a4;
  uint64_t v37 = a3;
  uint64_t v36 = a1;
  uint64_t v42 = a9;
  uint64_t v12 = *(void *)(a10 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v15 - 8);
  __n128 v18 = MEMORY[0x270FA5388](v17);
  (*(void (**)(char *, __n128))(v16 + 16))((char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v18);
  uint64_t v34 = sub_21FA25350();
  uint64_t v33 = v20;
  char v22 = v21;
  uint64_t v35 = v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, a10);
  uint64_t v24 = sub_21FA25350();
  uint64_t v26 = v25;
  char v28 = v27;
  uint64_t v30 = v29;
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a2, a10);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v36, a8);
  v43[0] = v34;
  v43[1] = v33;
  char v44 = v22 & 1;
  uint64_t v45 = v35;
  uint64_t v46 = v24;
  uint64_t v47 = v26;
  char v48 = v28 & 1;
  uint64_t v49 = v30;
  uint64_t v50 = v37;
  uint64_t v51 = v38;
  char v52 = v39 & 1;
  uint64_t v53 = v40;
  uint64_t v54 = v41;
  sub_21F9974D0((uint64_t)v43);
  return sub_21F9974EC((uint64_t)v43, v42);
}

uint64_t LinePlot<A>.init(x:y:t:domain:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  v19[0] = a1;
  v19[1] = a2;
  char v20 = a3 & 1;
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  uint64_t v23 = a6;
  char v24 = a7 & 1;
  uint64_t v25 = a8;
  uint64_t v26 = a12;
  uint64_t v27 = a13;
  char v28 = a14 & 1;
  uint64_t v29 = a15;
  double v30 = a10;
  double v31 = a11;
  uint64_t v32 = a16;
  uint64_t v33 = a17;
  sub_21F997548((uint64_t)v19);
  return sub_21F9974EC((uint64_t)v19, a9);
}

uint64_t type metadata accessor for VectorizedLinePlotContent()
{
  return sub_21F764F08();
}

uint64_t sub_21F9D82E4()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  swift_getAssociatedTypeWitness();
  uint64_t v3 = (int *)(type metadata accessor for PlottableProjection() - 8);
  uint64_t v24 = *(unsigned __int8 *)(*(void *)v3 + 80);
  uint64_t v4 = (v24 + 64) & ~v24;
  uint64_t v5 = *(void *)(*(void *)v3 + 64);
  uint64_t v6 = type metadata accessor for PlottableProjection();
  uint64_t v23 = *(unsigned __int8 *)(*(void *)(v6 - 8) + 80);
  uint64_t v7 = (v4 + v5 + v23) & ~v23;
  uint64_t v22 = *(void *)(*(void *)(v6 - 8) + 64);
  uint64_t v8 = v0 + v4;
  sub_21F7656A8(*(void *)v8, *(void *)(v8 + 8), *(unsigned char *)(v8 + 16));
  swift_bridgeObjectRelease();
  uint64_t v9 = v8 + v3[13];
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v9, v1);
      break;
    case 1u:
      char v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8);
      v10(v9, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v10(v9 + *(int *)(TupleTypeMetadata2 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v12 = sub_21FA24310();
      uint64_t v13 = sub_21FA24320();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v9 + *(int *)(TupleTypeMetadata3 + 48), v12);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v9 + *(int *)(TupleTypeMetadata3 + 64), v13);
      break;
    default:
      break;
  }
  sub_21F7656A8(*(void *)(v0 + v7), *(void *)(v0 + v7 + 8), *(unsigned char *)(v0 + v7 + 16));
  swift_bridgeObjectRelease();
  uint64_t v15 = v0 + v7 + *(int *)(v6 + 44);
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v15, v2);
      break;
    case 1u:
      uint64_t v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
      v16(v15, v2);
      uint64_t v17 = swift_getTupleTypeMetadata2();
      v16(v15 + *(int *)(v17 + 48), v2);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v18 = sub_21FA24310();
      uint64_t v19 = sub_21FA24320();
      uint64_t v20 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v15 + *(int *)(v20 + 48), v18);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v15 + *(int *)(v20 + 64), v19);
      break;
    default:
      break;
  }

  return MEMORY[0x270FA0238](v0, v7 + v22, v24 | v23 | 7);
}

void *sub_21F9D8830@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  uint64_t v5 = v2[6];
  uint64_t v6 = v2[7];
  swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  return sub_21F9D6F84(a1, (uint64_t)v2 + v8, (uint64_t)v2+ ((v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), v3, v4, v5, a2, v6);
}

uint64_t sub_21F9D8980()
{
  uint64_t v1 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v2 = v0[5];
  swift_getAssociatedTypeWitness();
  uint64_t v4 = (int *)(type metadata accessor for PlottableProjection() - 8);
  uint64_t v43 = *(unsigned __int8 *)(*(void *)v4 + 80);
  uint64_t v5 = (v43 + 80) & ~v43;
  uint64_t v6 = *(void *)(*(void *)v4 + 64);
  uint64_t v38 = v3;
  uint64_t v37 = type metadata accessor for PlottableProjection();
  uint64_t v42 = *(unsigned __int8 *)(*(void *)(v37 - 8) + 80);
  uint64_t v7 = (v5 + v6 + v42) & ~v42;
  uint64_t v8 = *(void *)(*(void *)(v37 - 8) + 64);
  uint64_t v40 = v2;
  uint64_t v9 = v1;
  uint64_t v39 = type metadata accessor for PlottableProjection();
  uint64_t v41 = *(unsigned __int8 *)(*(void *)(v39 - 8) + 80);
  uint64_t v10 = v7 + v8 + v41;
  uint64_t v11 = *(void *)(*(void *)(v39 - 8) + 64);
  uint64_t v12 = (char *)v0 + v5;
  sub_21F7656A8(*(void *)v12, *((void *)v12 + 1), v12[16]);
  swift_bridgeObjectRelease();
  uint64_t v13 = &v12[v4[13]];
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(void *)(v1 - 8) + 8))(v13, v1);
      break;
    case 1u:
      uint64_t v14 = *(void (**)(char *, uint64_t))(*(void *)(v1 - 8) + 8);
      v14(v13, v9);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v14(&v13[*(int *)(TupleTypeMetadata2 + 48)], v9);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v16 = sub_21FA24310();
      uint64_t v17 = sub_21FA24320();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8))(&v13[*(int *)(TupleTypeMetadata3 + 48)], v16);
      (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8))(&v13[*(int *)(TupleTypeMetadata3 + 64)], v17);
      break;
    default:
      break;
  }
  uint64_t v19 = v10 & ~v41;
  uint64_t v20 = (char *)v0 + v7;
  sub_21F7656A8(*(void *)v20, *((void *)v20 + 1), v20[16]);
  swift_bridgeObjectRelease();
  uint64_t v21 = &v20[*(int *)(v37 + 44)];
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(void *)(v38 - 8) + 8))(v21, v38);
      break;
    case 1u:
      uint64_t v22 = *(void (**)(char *, uint64_t))(*(void *)(v38 - 8) + 8);
      v22(v21, v38);
      uint64_t v23 = swift_getTupleTypeMetadata2();
      v22(&v21[*(int *)(v23 + 48)], v38);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v24 = sub_21FA24310();
      uint64_t v25 = v11;
      uint64_t v26 = sub_21FA24320();
      uint64_t v27 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8))(&v21[*(int *)(v27 + 48)], v24);
      char v28 = *(void (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8);
      uint64_t v29 = v26;
      uint64_t v11 = v25;
      v28(&v21[*(int *)(v27 + 64)], v29);
      break;
    default:
      break;
  }
  sub_21F7656A8(*(void *)((char *)v0 + v19), *(void *)((char *)v0 + v19 + 8), *((unsigned char *)v0 + v19 + 16));
  swift_bridgeObjectRelease();
  double v30 = (char *)v0 + v19 + *(int *)(v39 + 44);
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(void *)(v40 - 8) + 8))(v30, v40);
      break;
    case 1u:
      double v31 = *(void (**)(char *, uint64_t))(*(void *)(v40 - 8) + 8);
      v31(v30, v40);
      uint64_t v32 = swift_getTupleTypeMetadata2();
      v31(&v30[*(int *)(v32 + 48)], v40);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v33 = sub_21FA24310();
      uint64_t v34 = sub_21FA24320();
      uint64_t v35 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(void *)(v33 - 8) + 8))(&v30[*(int *)(v35 + 48)], v33);
      (*(void (**)(char *, uint64_t))(*(void *)(v34 - 8) + 8))(&v30[*(int *)(v35 + 64)], v34);
      break;
    default:
      break;
  }

  return MEMORY[0x270FA0238](v0, v19 + v11, v43 | v42 | v41 | 7);
}

void *sub_21F9D9148@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v17 = v2[3];
  uint64_t v3 = v2[4];
  uint64_t v16 = v2[5];
  uint64_t v4 = v2[6];
  uint64_t v5 = v2[7];
  uint64_t v6 = v2[8];
  uint64_t v7 = v2[9];
  swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 64);
  uint64_t v11 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  unint64_t v12 = (v9 + v10 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = *(void *)(v11 + 64);
  uint64_t v14 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  return sub_21F9D7A74(a1, (uint64_t)v2 + v9, (uint64_t)v2 + v12, (uint64_t)v2+ ((v12 + v13 + *(unsigned __int8 *)(v14 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)), v17, v3, v16, a2, v4, v5, v6, v7);
}

uint64_t LinePlot<A>.init<A, B, C>(x:y:t:domain:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v60 = a5;
  uint64_t v59 = a4;
  uint64_t v57 = a3;
  uint64_t v56 = a2;
  uint64_t v51 = a1;
  uint64_t v61 = a9;
  uint64_t v58 = a14;
  uint64_t v19 = *(void *)(a8 - 8);
  uint64_t v55 = a13;
  MEMORY[0x270FA5388](a1);
  uint64_t v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&v46 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = *(void *)(v27 - 8);
  __n128 v30 = MEMORY[0x270FA5388](v29);
  (*(void (**)(char *, __n128))(v28 + 16))((char *)&v46 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0), v30);
  uint64_t v54 = sub_21FA25350();
  uint64_t v53 = v32;
  int v50 = v33;
  uint64_t v52 = v34;
  uint64_t v35 = v56;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v26, v56, a7);
  uint64_t v55 = sub_21FA25350();
  uint64_t v49 = v36;
  int v47 = v37;
  uint64_t v48 = v38;
  uint64_t v39 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v57, a8);
  uint64_t v40 = sub_21FA25350();
  uint64_t v58 = v41;
  char v43 = v42;
  uint64_t v46 = v44;
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v39, a8);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v35, a7);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v51, a6);
  char v64 = v50 & 1;
  char v63 = v47 & 1;
  char v62 = v43 & 1;
  v65[0] = v54;
  v65[1] = v53;
  char v66 = v50 & 1;
  uint64_t v67 = v52;
  uint64_t v68 = v55;
  uint64_t v69 = v49;
  char v70 = v47 & 1;
  uint64_t v71 = v48;
  uint64_t v72 = v40;
  uint64_t v73 = v58;
  char v74 = v43 & 1;
  uint64_t v75 = v46;
  double v76 = a10;
  double v77 = a11;
  uint64_t v78 = v59;
  uint64_t v79 = v60;
  sub_21F997548((uint64_t)v65);
  return sub_21F9974EC((uint64_t)v65, v61);
}

uint64_t LinePlot<A>.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v4[1] = 0;
  v4[2] = 0;
  v4[0] = a1;
  char v5 = 1;
  sub_21F9D9750((uint64_t)v4);
  return sub_21F9974EC((uint64_t)v4, a2);
}

uint64_t sub_21F9D9750(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 80) & 1 | 0x8000000000000000;
  *(void *)(result + 48) &= 1uLL;
  *(void *)(result + 80) = v1;
  return result;
}

uint64_t LinePlot<A>.init(_:domain:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3;
  char v8 = a4 & 1;
  sub_21F9D9750((uint64_t)v7);
  return sub_21F9974EC((uint64_t)v7, a5);
}

uint64_t static FunctionLinePlotContent._renderChartContent(_:_:)@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_21F76CA40(qword_267EE7CB8);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)v169 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ChartContentRenderContext.Environment(0);
  MEMORY[0x270FA5388](v10);
  unint64_t v12 = (char *)v169 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SgShapeStyle();
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)v169 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_21F9974EC(a1, (uint64_t)v224);
  uint64_t v17 = *((void *)a2 + 1);
  double v18 = *(double *)(v17 + 24);
  double v19 = *(double *)(v17 + 32);
  if (v19 >= v18) {
    double v20 = *(double *)(v17 + 24);
  }
  else {
    double v20 = *(double *)(v17 + 32);
  }
  if (v18 > v19) {
    double v21 = *(double *)(v17 + 24);
  }
  else {
    double v21 = *(double *)(v17 + 32);
  }
  if (v20 > v21)
  {
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  uint64_t v22 = (uint64_t *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale);
  int v23 = *(unsigned __int8 *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale + 104);
  if (v23) {
    goto LABEL_12;
  }
  uint64_t v24 = (uint64_t *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale);
  int v25 = *(unsigned __int8 *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale + 104);
  if (v25) {
    goto LABEL_12;
  }
  uint64_t v205 = v12;
  uint64_t v26 = v22[10];
  if (*((unsigned char *)v22 + 80) == 0xFF) {
    goto LABEL_12;
  }
  uint64_t v206 = v24[10];
  if ((_BYTE)v206 == 0xFF) {
    goto LABEL_12;
  }
  uint64_t v178 = v15;
  uint64_t v174 = v10;
  *(void *)&long long v172 = v7;
  uint64_t v176 = v17;
  int v192 = v25;
  LODWORD(v207) = *a2;
  uint64_t v28 = v22[1];
  uint64_t v194 = *v22;
  uint64_t v195 = v28;
  uint64_t v29 = v22[3];
  uint64_t v196 = v22[2];
  uint64_t v197 = v29;
  uint64_t v30 = v22[5];
  uint64_t v198 = v22[4];
  uint64_t v199 = v30;
  uint64_t v31 = v22[7];
  uint64_t v200 = v22[6];
  uint64_t v201 = v31;
  uint64_t v193 = v22[8];
  uint64_t v204 = v22[9];
  uint64_t v33 = v22[11];
  uint64_t v32 = v22[12];
  uint64_t v34 = v24[1];
  uint64_t v184 = *v24;
  uint64_t v185 = v34;
  uint64_t v35 = v24[3];
  uint64_t v186 = v24[2];
  uint64_t v187 = v35;
  uint64_t v36 = v24[5];
  uint64_t v188 = v24[4];
  uint64_t v189 = v36;
  uint64_t v37 = v24[7];
  uint64_t v190 = v24[6];
  uint64_t v191 = v37;
  uint64_t v183 = v24[8];
  uint64_t v38 = v24[9];
  uint64_t v202 = v32;
  uint64_t v203 = v38;
  double v39 = *(double *)&v33;
  double v40 = *(double *)&v32;
  uint64_t v42 = v24[11];
  uint64_t v41 = v24[12];
  sub_21F9974EC((uint64_t)v224, (uint64_t)v220);
  int v43 = sub_21F9DB2D0((uint64_t)v220);
  uint64_t v180 = v33;
  uint64_t v181 = v26;
  int v177 = v23;
  uint64_t v179 = v42;
  uint64_t v182 = v41;
  uint64_t v173 = v6;
  if (v43)
  {
    double v44 = *(double *)&v42;
    double v45 = *(double *)&v41;
    if (v43 == 1)
    {
      uint64_t v46 = v41;
      int v47 = (double *)sub_21F9DB2DC((uint64_t)v220);
      double v48 = v47[12];
      double v49 = v47[13];
      unsigned __int8 v50 = v23;
      uint64_t v51 = (double (*)(double))*((void *)v47 + 14);
      uint64_t v52 = *((void *)v47 + 15);
      uint64_t v166 = v33;
      uint64_t v53 = v204;
      sub_21F77F4A8(v194, v195, v196, v197, v198, v199, v200, v201, v193, v204, v26, v166, v202, v50);
      uint64_t v166 = v42;
      char v54 = v206;
      uint64_t v55 = v203;
      sub_21F77F4A8(v184, v185, v186, v187, v188, v189, v190, v191, v183, v203, v206, v166, v46, v192);
      swift_retain();
      uint64_t v208 = (uint64_t)sub_21F9684C0(4, 7, 1, v51, v52, v53, v26, v55, v48, v49, v39, v40, v44, v45, v54);
      swift_release();
    }
    else
    {
      uint64_t v73 = sub_21F9DB2DC((uint64_t)v220);
      uint64_t v74 = *(void *)v73;
      sub_21F9DAB48(*(void *)(v73 + 8), *(void *)(v73 + 16), *(unsigned char *)(v73 + 24), v204, v26, *(double *)&v33, v40);
      if (v26 < 2u || v204 || v206 < 2u || v203) {
        goto LABEL_80;
      }
      double v77 = v75;
      double v78 = v76;
      double v79 = (v75 - v40) / *(double *)&v33;
      double v80 = (v76 - v40) / *(double *)&v33;
      if ((~*(void *)&v79 & 0x7FF0000000000000) == 0
        || (~*(void *)&v80 & 0x7FF0000000000000) == 0
        || v79 == v80)
      {
        sub_21F77F4A8(v194, v195, v196, v197, v198, v199, v200, v201, v193, 0, v26, v33, v202, v23);
        sub_21F77F4A8(v184, v185, v186, v187, v188, v189, v190, v191, v183, 0, v206, v42, v182, v192);
        uint64_t v208 = MEMORY[0x263F8EE78];
      }
      else
      {
        if (v79 > v80)
        {
LABEL_79:
          __break(1u);
LABEL_80:
          int v168 = 0;
          uint64_t v167 = 202;
          uint64_t result = sub_21FA266E0();
          __break(1u);
          return result;
        }
        sub_21F94FD68((uint64_t)v221, v79, v80, 1.5, 1.0);
        sub_21F77F4A8(v194, v195, v196, v197, v198, v199, v200, v201, v193, 0, v26, v33, v202, v23);
        sub_21F77F4A8(v184, v185, v186, v187, v188, v189, v190, v191, v183, 0, v206, v42, v182, v192);
        sub_21F9DB474(v224, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F997568);
        uint64_t v83 = sub_21F94FEC0((uint64_t)v221, *(double *)&v33, v40, *(double *)&v42, v45, v74, 0, 2, 0, 2);
        uint64_t v208 = sub_21F950304(v83, v77, v78);
        swift_bridgeObjectRelease();
        sub_21F9DB474(v224, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F9976F4);
      }
    }
  }
  else
  {
    uint64_t v56 = sub_21F9DB2DC((uint64_t)v220);
    uint64_t v58 = *(void *)(v56 + 64);
    uint64_t v57 = *(void *)(v56 + 72);
    char v59 = *(unsigned char *)(v56 + 80);
    long long v170 = *(_OWORD *)(v56 + 88);
    uint64_t v60 = v33;
    uint64_t v61 = v204;
    sub_21F9DAB48(v58, v57, v59, v204, v26, v39, v40);
    unint64_t v63 = v62;
    unint64_t v65 = v64;
    uint64_t v171 = v169;
    MEMORY[0x270FA5388](v66);
    uint64_t v208 = (uint64_t)&v169[-12];
    v169[-10] = v61;
    LOBYTE(v169[-9]) = v26;
    uint64_t v67 = v202;
    uint64_t v68 = v203;
    v169[-8] = v60;
    v169[-7] = v67;
    uint64_t v69 = v206;
    sub_21F77F4A8(v194, v195, v196, v197, v198, v199, v200, v201, v193, v61, v26, v60, v67, v70);
    sub_21F77F4A8(v184, v185, v186, v187, v188, v189, v190, v191, v183, v68, v69, v42, v41, v192);
    v71.n128_u64[0] = v63;
    v72.n128_u64[0] = v65;
    uint64_t v208 = (uint64_t)sub_21F96702C(4, 7, 1, (uint64_t)sub_21F9DB4D8, (void *)v208, v71, v72);
  }
  if ((v207 & 1) == 0)
  {
    uint64_t v173 = 0;
    sub_21FA25270();
    if (!*(void *)(v208 + 16))
    {
      swift_bridgeObjectRelease();
LABEL_69:
      uint64_t v173 = type metadata accessor for SgPath(0);
      uint64_t v128 = (void *)swift_allocBox();
      uint64_t v130 = v129;
      uint64_t v207 = *(void **)(*(void *)(v176 + 16) + 24);
      uint64_t v208 = (uint64_t)v128;
      uint64_t v132 = v213;
      uint64_t v131 = v214;
      uint64_t v133 = v215;
      uint64_t v134 = v216;
      *(void *)&long long v172 = v215;
      uint64_t v135 = v176 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
      unsigned __int8 v136 = v217;
      swift_beginAccess();
      uint64_t v137 = (uint64_t)v205;
      sub_21F7BB184(v135, (uint64_t)v205);
      sub_21F7C4950(v132, v131, v133, v134, v136);
      sub_21F77188C(v137, (uint64_t)v178);
      sub_21F76EE70(v184, v185, v186, v187, v188, v189, v190, v191, v183, v203, v206, v179, v182, v192);
      sub_21F76EE70(v194, v195, v196, v197, v198, v199, v200, v201, v193, v204, v181, v180, v202, v177);
      uint64_t v138 = v172;
      sub_21F7705AC(v132, v131, v172, v134, v136);
      uint64_t v139 = *(void *)(v135 + *(int *)(v174 + 64));
      uint64_t v140 = *(void *)(v135 + *(int *)(v174 + 68));
      *(void *)uint64_t v130 = v207;
      *(void *)(v130 + 8) = v132;
      *(void *)(v130 + 16) = v131;
      *(void *)(v130 + 24) = v138;
      *(void *)(v130 + 32) = v134;
      *(unsigned char *)(v130 + 40) = v136;
      uint64_t v141 = (int *)v173;
      uint64_t result = sub_21F85FB54((uint64_t)v178, v130 + *(int *)(v173 + 24));
      *(void *)(v130 + v141[7]) = v139;
      *(void *)(v130 + v141[8]) = v140;
      *(unsigned char *)(v130 + v141[9]) = 1;
      unint64_t v27 = v208 | 0x9000000000000000;
      goto LABEL_13;
    }
    uint64_t v98 = *(void *)(v208 + 16);
    long long v175 = a3;
    unint64_t v99 = 0;
    v219[0] = 0x3FF0000000000000;
    v219[1] = 0;
    v219[2] = 0;
    v219[3] = 0x3FF0000000000000;
    uint64_t v207 = (void *)(v208 + 32);
    v219[5] = 0;
    v219[4] = 0;
    while (v99 < *(void *)(v208 + 16))
    {
      uint64_t v100 = v207[v99];
      swift_bridgeObjectRetain();
      sub_21FA25270();
      int64_t v101 = *(void *)(v100 + 16);
      if (v101)
      {
        uint64_t v209 = MEMORY[0x263F8EE78];
        sub_21F7A25E0(0, v101, 0);
        uint64_t v102 = 0;
        uint64_t v103 = v209;
        unint64_t v104 = *(void *)(v209 + 16);
        do
        {
          long long v105 = *(_OWORD *)(v100 + 16 * v102 + 32);
          uint64_t v209 = v103;
          unint64_t v106 = *(void *)(v103 + 24);
          if (v104 >= v106 >> 1)
          {
            long long v172 = v105;
            sub_21F7A25E0((char *)(v106 > 1), v104 + 1, 1);
            long long v105 = v172;
            uint64_t v103 = v209;
          }
          ++v102;
          *(void *)(v103 + 16) = v104 + 1;
          *(_OWORD *)(v103 + 16 * v104++ + 32) = v105;
        }
        while (v101 != v102);
      }
      swift_bridgeObjectRelease();
      ++v99;
      sub_21FA25230();
      swift_bridgeObjectRelease();
      v222[0] = v210;
      v222[1] = v211;
      char v223 = v212;
      sub_21F7C48F4((uint64_t)v222, (uint64_t)v218);
      sub_21F7C4968((uint64_t)v218, (void (*)(void, void, void, void, void))sub_21F7C4950);
      sub_21FA25160();
      sub_21F7C4968((uint64_t)v222, (void (*)(void, void, void, void, void))sub_21F7705AC);
      sub_21F7C4968((uint64_t)v222, (void (*)(void, void, void, void, void))sub_21F7705AC);
      if (v99 == v98)
      {
        swift_bridgeObjectRelease();
        a3 = v175;
        goto LABEL_69;
      }
    }
    goto LABEL_74;
  }
  uint64_t v84 = v208;
  uint64_t v85 = *(void *)(v208 + 16);
  long long v175 = a3;
  if (v85)
  {
    swift_bridgeObjectRetain();
    uint64_t v86 = 0;
    uint64_t v87 = (char *)MEMORY[0x263F8EE78];
    while (1)
    {
      uint64_t v88 = *(void *)(v84 + 8 * v86 + 32);
      uint64_t v89 = *(void *)(v88 + 16);
      int64_t v90 = *((void *)v87 + 2);
      int64_t v91 = v90 + v89;
      if (__OFADD__(v90, v89)) {
        goto LABEL_75;
      }
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native && v91 <= *((void *)v87 + 3) >> 1)
      {
        if (*(void *)(v88 + 16)) {
          goto LABEL_47;
        }
      }
      else
      {
        if (v90 <= v91) {
          int64_t v93 = v90 + v89;
        }
        else {
          int64_t v93 = v90;
        }
        uint64_t v87 = sub_21F7E86D8(isUniquelyReferenced_nonNull_native, v93, 1, v87);
        if (*(void *)(v88 + 16))
        {
LABEL_47:
          uint64_t v94 = *((void *)v87 + 2);
          if ((*((void *)v87 + 3) >> 1) - v94 < v89) {
            goto LABEL_77;
          }
          memcpy(&v87[16 * v94 + 32], (const void *)(v88 + 32), 16 * v89);
          if (v89)
          {
            uint64_t v95 = *((void *)v87 + 2);
            BOOL v96 = __OFADD__(v95, v89);
            uint64_t v97 = v95 + v89;
            if (v96) {
              goto LABEL_78;
            }
            *((void *)v87 + 2) = v97;
          }
          goto LABEL_37;
        }
      }
      if (v89) {
        goto LABEL_76;
      }
LABEL_37:
      swift_bridgeObjectRelease();
      if (v85 == ++v86)
      {
        swift_bridgeObjectRelease();
        a3 = v175;
        goto LABEL_65;
      }
    }
  }
  uint64_t v87 = (char *)MEMORY[0x263F8EE78];
LABEL_65:
  swift_bridgeObjectRelease();
  sub_21F9974EC((uint64_t)v224, (uint64_t)v219);
  int v107 = sub_21F9DB2D0((uint64_t)v219);
  if (v107)
  {
    if (v107 != 1)
    {
      sub_21F9DB2DC((uint64_t)v219);
      swift_bridgeObjectRelease();
      sub_21F76EE70(v194, v195, v196, v197, v198, v199, v200, v201, v193, v204, v181, v180, v202, v177);
      uint64_t result = sub_21F76EE70(v184, v185, v186, v187, v188, v189, v190, v191, v183, v203, v206, v179, v182, v192);
LABEL_12:
      unint64_t v27 = 0xE000000000000000;
LABEL_13:
      *a3 = v27;
      return result;
    }
    uint64_t v108 = sub_21F9DB2DC((uint64_t)v219);
    uint64_t v109 = *(void *)v108;
    uint64_t v208 = *(void *)(v108 + 8);
    LODWORD(v207) = *(unsigned __int8 *)(v108 + 16);
    uint64_t v110 = *(void *)(v108 + 24);
    uint64_t v174 = *(void *)(v108 + 32);
    uint64_t v171 = *(void **)(v108 + 40);
    LODWORD(v170) = *(unsigned __int8 *)(v108 + 48);
    uint64_t v111 = *(void *)(v108 + 64);
    uint64_t v178 = *(char **)(v108 + 56);
    uint64_t v112 = *(void *)(v108 + 72);
    char v113 = *(unsigned char *)(v108 + 80);
    sub_21F9974EC((uint64_t)v224, (uint64_t)v218);
    uint64_t v114 = sub_21F9DB2DC((uint64_t)v218);
    sub_21F9DB2EC(v114);
    swift_release();
    sub_21F7656A8(v111, v112, v113);
    swift_bridgeObjectRelease();
    uint64_t v115 = *((void *)v87 + 2);
    swift_getKeyPath();
    uint64_t v116 = swift_allocObject();
    *(void *)(v116 + 16) = v87;
    uint64_t v117 = v109;
    uint64_t v205 = (char *)v109;
    uint64_t v118 = (void *)v208;
    *(void *)(v116 + 24) = v109;
    *(void *)(v116 + 32) = v118;
    char v119 = (char)v207;
    *(unsigned char *)(v116 + 40) = (_BYTE)v207;
    uint64_t v120 = v204;
    *(void *)(v116 + 48) = v110;
    *(void *)(v116 + 56) = v120;
    *(unsigned char *)(v116 + 64) = v181;
    uint64_t v121 = v202;
    *(void *)(v116 + 72) = v180;
    *(void *)(v116 + 80) = v121;
    uint64_t v122 = v174;
    uint64_t v123 = (uint64_t)v171;
    *(void *)(v116 + 88) = v174;
    *(void *)(v116 + 96) = v123;
    char v124 = v170;
    *(unsigned char *)(v116 + 104) = v170;
    uint64_t v125 = v203;
    *(void *)(v116 + 112) = v178;
    *(void *)(v116 + 120) = v125;
    *(unsigned char *)(v116 + 128) = v206;
    uint64_t v126 = v182;
    *(void *)(v116 + 136) = v179;
    *(void *)(v116 + 144) = v126;
    *(void *)&v222[0] = 0;
    *((void *)&v222[0] + 1) = v115;
    sub_21F7652C0(v117, (uint64_t)v118, v119);
    swift_bridgeObjectRetain();
    sub_21F7652C0(v122, v123, v124);
    swift_bridgeObjectRetain();
    sub_21F76CA40(&qword_26AD47CA0);
    sub_21F756350();
    sub_21FA257A0();
    swift_release();
    swift_release();
    sub_21F85E8C4((uint64_t)v9, 1, v176, v175);
    sub_21F7656A8(v122, v123, v124);
    swift_bridgeObjectRelease();
    uint64_t v127 = (uint64_t)v205;
  }
  else
  {
    uint64_t v142 = sub_21F9DB2DC((uint64_t)v219);
    uint64_t v143 = *(void *)v142;
    uint64_t v208 = *(void *)(v142 + 8);
    LODWORD(v207) = *(unsigned __int8 *)(v142 + 16);
    uint64_t v144 = *(void *)(v142 + 24);
    uint64_t v178 = *(char **)(v142 + 32);
    uint64_t v174 = *(void *)(v142 + 40);
    LODWORD(v171) = *(unsigned __int8 *)(v142 + 48);
    uint64_t v205 = *(char **)(v142 + 56);
    sub_21F9974EC((uint64_t)v224, (uint64_t)v218);
    uint64_t v145 = sub_21F9DB2DC((uint64_t)v218);
    uint64_t v147 = *(void *)v145;
    uint64_t v146 = *(void *)(v145 + 8);
    char v148 = *(unsigned char *)(v145 + 16);
    uint64_t v149 = *(void *)(v145 + 32);
    uint64_t v150 = *(void *)(v145 + 40);
    char v151 = *(unsigned char *)(v145 + 48);
    uint64_t v152 = *(void *)(v145 + 96);
    v169[0] = *(void *)(v145 + 56);
    v169[1] = v152;
    sub_21F7652C0(v147, v146, v148);
    swift_bridgeObjectRetain();
    sub_21F7652C0(v149, v150, v151);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    uint64_t v153 = *((void *)v87 + 2);
    swift_getKeyPath();
    uint64_t v154 = swift_allocObject();
    *(void *)(v154 + 16) = v87;
    uint64_t v155 = v143;
    *(void *)&long long v170 = v143;
    uint64_t v156 = (void *)v208;
    *(void *)(v154 + 24) = v143;
    *(void *)(v154 + 32) = v156;
    char v157 = (char)v207;
    *(unsigned char *)(v154 + 40) = (_BYTE)v207;
    uint64_t v158 = v204;
    uint64_t v159 = (uint64_t)v205;
    *(void *)(v154 + 48) = v144;
    *(void *)(v154 + 56) = v158;
    *(unsigned char *)(v154 + 64) = v181;
    uint64_t v160 = v202;
    *(void *)(v154 + 72) = v180;
    *(void *)(v154 + 80) = v160;
    uint64_t v161 = (uint64_t)v178;
    uint64_t v162 = v174;
    *(void *)(v154 + 88) = v178;
    *(void *)(v154 + 96) = v162;
    char v163 = (char)v171;
    *(unsigned char *)(v154 + 104) = (_BYTE)v171;
    uint64_t v164 = v203;
    *(void *)(v154 + 112) = v159;
    *(void *)(v154 + 120) = v164;
    *(unsigned char *)(v154 + 128) = v206;
    uint64_t v165 = v182;
    *(void *)(v154 + 136) = v179;
    *(void *)(v154 + 144) = v165;
    *(void *)&v222[0] = 0;
    *((void *)&v222[0] + 1) = v153;
    sub_21F7652C0(v155, (uint64_t)v156, v157);
    swift_bridgeObjectRetain();
    sub_21F7652C0(v161, v162, v163);
    swift_bridgeObjectRetain();
    sub_21F76CA40(&qword_26AD47CA0);
    sub_21F756350();
    sub_21FA257A0();
    swift_release();
    swift_release();
    sub_21F85E8C4((uint64_t)v9, 1, v176, v175);
    sub_21F7656A8(v161, v162, v163);
    swift_bridgeObjectRelease();
    uint64_t v127 = v170;
  }
  sub_21F7656A8(v127, v208, (char)v207);
  swift_bridgeObjectRelease();
  sub_21F76EE70(v184, v185, v186, v187, v188, v189, v190, v191, v183, v203, v206, v179, v182, v192);
  sub_21F76EE70(v194, v195, v196, v197, v198, v199, v200, v201, v193, v204, v181, v180, v202, v177);
  return (*(uint64_t (**)(char *, uint64_t))(v172 + 8))(v9, v173);
}

unint64_t *sub_21F9DA98C@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, void *a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  unint64_t v19 = *result;
  if ((*result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v19 < *(void *)(a2 + 16))
  {
    *(_OWORD *)int v25 = *(_OWORD *)(a2 + 16 * v19 + 32);
    v34[0] = a3;
    v34[1] = a4;
    char v35 = a5 & 1;
    uint64_t v36 = a6;
    double v37 = sub_21F7E33A4(a7, a8, v25[0], a10, a11);
    char v38 = 0;
    v29[0] = a14;
    v29[1] = a15;
    char v30 = a16 & 1;
    uint64_t v31 = a17;
    double v32 = sub_21F7E33A4(a18, a19, v25[1], a12, a13);
    char v33 = 0;
    sub_21F9DBDB8((uint64_t)v34, (uint64_t)v27);
    sub_21F764AF8((uint64_t)v27, (uint64_t)v39);
    sub_21F9DBDB8((uint64_t)v29, (uint64_t)v28);
    sub_21F764AF8((uint64_t)v28, (uint64_t)v40);
    sub_21F7652C0(a3, a4, a5 & 1);
    swift_bridgeObjectRetain();
    sub_21F7652C0(a14, a15, a16 & 1);
    swift_bridgeObjectRetain();
    sub_21F860B70((uint64_t)v29);
    sub_21F860B70((uint64_t)v34);
    sub_21F764AF8((uint64_t)v39, (uint64_t)__src);
    sub_21F764AF8((uint64_t)v40, (uint64_t)&__src[18]);
    __src[37] = 0;
    __src[36] = 0;
    LOBYTE(__src[38]) = -1;
    return (unint64_t *)memcpy(a9, __src, 0x131uLL);
  }
  __break(1u);
  return result;
}

void sub_21F9DAB48(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, double a6, double a7)
{
  if (a3) {
    return;
  }
  long double v10 = *(double *)&a2;
  if (a5)
  {
    if (a5 == 1)
    {
      double v12 = *(double *)&a1 * *(double *)&a4;
      if (a1 < 0) {
        double v13 = a7 - log(1.0 - v12) * a6;
      }
      else {
        double v13 = log(v12 + 1.0) * a6 + a7;
      }
      double v16 = v10 * *(double *)&a4;
      if (a2 < 0)
      {
        long double v10 = -log(1.0 - v16);
        goto LABEL_15;
      }
      double v15 = v16 + 1.0;
    }
    else
    {
      if (*(double *)&a4 == 0.0)
      {
        double v13 = *(double *)&a1 * a6 + a7;
        goto LABEL_15;
      }
      double v13 = log(*(long double *)&a1) * a6 + a7;
      double v15 = v10;
    }
    long double v10 = log(v15);
  }
  else
  {
    double v13 = pow(*(long double *)&a1, *(long double *)&a4) * a6 + a7;
    long double v10 = pow(v10, *(long double *)&a4);
  }
LABEL_15:
  double v17 = v10 * a6 + a7;
  if (v17 >= v13) {
    double v18 = v13;
  }
  else {
    double v18 = v10 * a6 + a7;
  }
  if (v13 > v17) {
    double v19 = v13;
  }
  else {
    double v19 = v10 * a6 + a7;
  }
  if (v18 > v19) {
    __break(1u);
  }
}

uint64_t VectorizedLinePlotContent.body.getter()
{
  uint64_t v1 = type metadata accessor for Vectorizer();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v6 - v3;
  sub_21F8B0FF0(v0, v1, &off_26B58FDA0);
  sub_21F8B0FF0(v4, v1, &off_26B58FDA0);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t _s6Charts23FunctionLinePlotContentV012_layoutChartE0yyAC_AA01_gE12LayoutInputsVtFZ_0(uint64_t a1, uint64_t *a2)
{
  sub_21F9974EC(a1, (uint64_t)v68);
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (!*(void *)(v3 + 16))
  {
    BOOL v6 = 0;
    goto LABEL_11;
  }
  unint64_t v5 = sub_21F75BD50(0);
  BOOL v6 = 0;
  if ((v7 & 1) == 0) {
    goto LABEL_5;
  }
  unsigned int v8 = *(unsigned __int16 *)(*(void *)(v3 + 56) + 72 * v5 + 40);
  if (v8 >> 8 <= 0xFE)
  {
    BOOL v6 = (v8 & 0xFF00) != 768;
    if (*(void *)(v3 + 16)) {
      goto LABEL_9;
    }
LABEL_11:
    BOOL v12 = 0;
    goto LABEL_12;
  }
  BOOL v6 = 0;
LABEL_5:
  if (!*(void *)(v3 + 16)) {
    goto LABEL_11;
  }
LABEL_9:
  unint64_t v9 = sub_21F75BD50(1u);
  if ((v10 & 1) == 0) {
    goto LABEL_11;
  }
  unsigned int v11 = *(unsigned __int16 *)(*(void *)(v3 + 56) + 72 * v9 + 40);
  if (v11 >> 8 > 0xFE) {
    goto LABEL_11;
  }
  BOOL v12 = (v11 & 0xFF00) != 768;
LABEL_12:
  sub_21F9974EC((uint64_t)v68, (uint64_t)v67);
  int v13 = sub_21F9DB2D0((uint64_t)v67);
  if (v13)
  {
    if (v13 != 1) {
      return sub_21F9DB2DC((uint64_t)v67);
    }
    BOOL v64 = v12;
    uint64_t v14 = sub_21F9DB2DC((uint64_t)v67);
    uint64_t v56 = *(void *)(v14 + 8);
    uint64_t v58 = *(void *)v14;
    char v54 = *(unsigned char *)(v14 + 16);
    uint64_t v15 = *(void *)(v14 + 32);
    uint64_t v16 = *(void *)(v14 + 40);
    char v17 = *(unsigned char *)(v14 + 48);
    uint64_t v18 = *(void *)(v14 + 64);
    uint64_t v19 = *(void *)(v14 + 72);
    char v20 = *(unsigned char *)(v14 + 80);
    double v21 = *(double *)(v14 + 96);
    double v22 = *(double *)(v14 + 104);
    uint64_t v60 = *(void *)(v14 + 112);
    BOOL v62 = v6;
    uint64_t v23 = *(void *)(v14 + 120);
    sub_21F9974EC((uint64_t)v68, (uint64_t)v66);
    uint64_t v24 = sub_21F9DB2DC((uint64_t)v66);
    sub_21F9DB2EC(v24);
    sub_21F7656A8(v18, v19, v20);
    swift_bridgeObjectRelease();
    sub_21F7656A8(v15, v16, v17);
    swift_bridgeObjectRelease();
    sub_21F7656A8(v58, v56, v54);
    swift_bridgeObjectRelease();
    if (!v62)
    {
      swift_retain();
      uint64_t v25 = sub_21F966014(0, 0, 0, 1, v60, v23, v21, v22);
      uint64_t v27 = v26;
      swift_release();
      sub_21F7CB48C(v25, 0, 0, 1);
      sub_21F7CB48C(v27, 0, 0, 1);
    }
    if (!v64)
    {
      uint64_t v37 = sub_21F966018(0, 0, 0, 1, v60, v23, v21, v22);
      uint64_t v39 = v38;
      swift_release();
      sub_21F7CB48C(0, 1, v37, 0);
      return sub_21F7CB48C(0, 1, v39, 0);
    }
  }
  else
  {
    BOOL v65 = v12;
    uint64_t v28 = sub_21F9DB2DC((uint64_t)v67);
    uint64_t v57 = *(void *)(v28 + 8);
    uint64_t v59 = *(void *)v28;
    char v55 = *(unsigned char *)(v28 + 16);
    uint64_t v29 = *(void *)(v28 + 32);
    BOOL v63 = v6;
    uint64_t v30 = *(void *)(v28 + 40);
    char v53 = *(unsigned char *)(v28 + 48);
    uint64_t v51 = *(void *)(v28 + 72);
    uint64_t v52 = *(void *)(v28 + 64);
    int v31 = *(unsigned __int8 *)(v28 + 80);
    unsigned __int8 v50 = *(double (**)(double))(v28 + 88);
    uint64_t v61 = *(void *)(v28 + 96);
    sub_21F9974EC((uint64_t)v68, (uint64_t)v66);
    uint64_t v32 = sub_21F9DB2DC((uint64_t)v66);
    uint64_t v33 = *(void *)(v32 + 32);
    uint64_t v34 = *(void *)(v32 + 40);
    char v35 = *(unsigned char *)(v32 + 48);
    sub_21F7652C0(*(void *)v32, *(void *)(v32 + 8), *(unsigned char *)(v32 + 16));
    swift_bridgeObjectRetain();
    sub_21F7652C0(v33, v34, v35);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_21F7656A8(v29, v30, v53);
    swift_bridgeObjectRelease();
    sub_21F7656A8(v59, v57, v55);
    swift_bridgeObjectRelease();
    if (((v63 | v31) & 1) == 0)
    {
      sub_21F7CB48C(v52, 0, 0, 1);
      sub_21F7CB48C(v51, 0, 0, 1);
    }
    if (!v65)
    {
      if (v31)
      {
        uint64_t v40 = swift_allocObject();
        *(void *)(v40 + 16) = v50;
        *(void *)(v40 + 24) = v61;
        uint64_t v41 = swift_allocObject();
        *(void *)(v41 + 16) = v50;
        *(void *)(v41 + 24) = v61;
        uint64_t v42 = *(char **)(v4 + 168);
        swift_retain_n();
        swift_retain();
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v4 + 168) = v42;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v42 = sub_21F7E62F0(0, *((void *)v42 + 2) + 1, 1, v42);
          *(void *)(v4 + 168) = v42;
        }
        unint64_t v45 = *((void *)v42 + 2);
        unint64_t v44 = *((void *)v42 + 3);
        if (v45 >= v44 >> 1)
        {
          uint64_t v42 = sub_21F7E62F0((char *)(v44 > 1), v45 + 1, 1, v42);
          *(void *)(v4 + 168) = v42;
        }
        *((void *)v42 + 2) = v45 + 1;
        uint64_t v46 = &v42[32 * v45];
        *((void *)v46 + 4) = sub_21F860E94;
        *((void *)v46 + 5) = v40;
        *((void *)v46 + 6) = sub_21F860EAC;
        *((void *)v46 + 7) = v41;
        swift_release();
        swift_release();
      }
      else
      {
        sub_21F965B04(0, 0, 0, 1, v50, *(double *)&v52, *(double *)&v51);
        uint64_t v48 = v47;
        sub_21F7CB48C(0, 1, v49, 0);
        sub_21F7CB48C(0, 1, v48, 0);
      }
    }
  }
  return swift_release();
}

uint64_t sub_21F9DB2D0(uint64_t a1)
{
  return *(void *)(a1 + 80) >> 62;
}

uint64_t sub_21F9DB2DC(uint64_t result)
{
  *(void *)(result + 80) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_21F9DB2EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  char v4 = *(unsigned char *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  char v7 = *(unsigned char *)(a1 + 80);
  sub_21F7652C0(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRetain();
  sub_21F7652C0(v2, v3, v4);
  swift_bridgeObjectRetain();
  sub_21F7652C0(v5, v6, v7);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_21F9DB3B8()
{
  swift_bridgeObjectRelease();
  sub_21F7656A8(*(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  swift_bridgeObjectRelease();
  sub_21F7656A8(*(void *)(v0 + 88), *(void *)(v0 + 96), *(unsigned char *)(v0 + 104));
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 152, 7);
}

unint64_t *sub_21F9DB418@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_21F9DA98C(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(unsigned char *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(unsigned char *)(v2 + 64), a2, *(double *)(v2 + 72), *(double *)(v2 + 80), *(double *)(v2 + 136), *(double *)(v2 + 144), *(void *)(v2 + 88), *(void *)(v2 + 96), *(unsigned char *)(v2 + 104), *(void *)(v2 + 112), *(void *)(v2 + 120), *(unsigned char *)(v2 + 128));
}

void *sub_21F9DB474(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

double sub_21F9DB4D8(__n128 a1)
{
  return sub_21F85ED30(*(void *)(v1 + 16), *(unsigned char *)(v1 + 24), *(void (**)(__n128))(v1 + 48), a1, *(double *)(v1 + 32), *(double *)(v1 + 40), *(double *)(v1 + 80), *(double *)(v1 + 88), *(void *)(v1 + 56), *(void *)(v1 + 64), *(unsigned char *)(v1 + 72));
}

uint64_t sub_21F9DB4F8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21F9DB540(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21F9DB594(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21F9DB5D0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21F9DB614(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_21F9DB770(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x21F9DB988);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for LinePlot()
{
  return sub_21F764F08();
}

ValueMetadata *type metadata accessor for FunctionLinePlotContent()
{
  return &type metadata for FunctionLinePlotContent;
}

uint64_t sub_21F9DB9F0(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x21F9DBB44);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_21F9DBB58(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v20 = a2 ^ 0x80000000;
                v19[1] = 0;
              }
              else
              {
                uint64_t v20 = a2 - 1;
              }
              *uint64_t v19 = v20;
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x21F9DBD4CLL);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t sub_21F9DBD74(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

_UNKNOWN **sub_21F9DBD7C()
{
  return &off_26B58FDA0;
}

uint64_t sub_21F9DBD88(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 80) & 1 | (a2 << 62);
  *(void *)(result + 48) &= 1uLL;
  *(void *)(result + 80) = v2;
  return result;
}

ValueMetadata *type metadata accessor for FunctionLinePlotContent.FunctionLineRepresentation()
{
  return &type metadata for FunctionLinePlotContent.FunctionLineRepresentation;
}

uint64_t sub_21F9DBDB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = *(unsigned char *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 48) == 1)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    char v9 = 0x80;
  }
  else
  {
    uint64_t v8 = 0;
    char v9 = 0;
  }
  sub_21F7652C0(*(void *)a1, v4, v5);
  swift_bridgeObjectRetain();
  v11[0] = v3;
  v11[1] = v4;
  char v12 = v5;
  uint64_t v13 = v6;
  uint64_t v14 = v7;
  uint64_t v15 = v8;
  char v16 = v9;
  uint64_t v17 = MEMORY[0x263F8D538];
  uint64_t v18 = &protocol witness table for Double;
  sub_21F860BB0((uint64_t)v11);
  return sub_21F764AF8((uint64_t)v11, a2);
}

uint64_t sub_21F9DBE78()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_21F9DBEB4()
{
  uint64_t v0 = sub_21F76CA40(qword_267EEA3E0);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_21F76CA40(&qword_267EEA3C8);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (unsigned int *)((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v7);
  char v9 = (char *)&v13 - v8;
  sub_21F7F8198();
  sub_21FA24F40();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_21F76CA84((uint64_t)v2, qword_267EEA3E0);
    return *MEMORY[0x263F288F8];
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v2, v3);
  uint64_t result = (*(uint64_t (**)(unsigned int *, char *, uint64_t))(v4 + 16))(v6, v9, v3);
  if (v5 == 4)
  {
    uint64_t v10 = *v6;
    char v12 = *(void (**)(unsigned int *, uint64_t))(v4 + 8);
    v12(v6, v3);
    v12((unsigned int *)v9, v3);
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F9DC0B4()
{
  uint64_t v0 = sub_21F76CA40(&qword_267EEA3D8);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_21F76CA40(&qword_267EEA3C0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (unsigned int *)((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v7);
  char v9 = (char *)&v13 - v8;
  sub_21F7F81EC();
  sub_21FA24F40();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_21F76CA84((uint64_t)v2, &qword_267EEA3D8);
    return *MEMORY[0x263F288F8];
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v2, v3);
  uint64_t result = (*(uint64_t (**)(unsigned int *, char *, uint64_t))(v4 + 16))(v6, v9, v3);
  if (v5 == 4)
  {
    uint64_t v10 = *v6;
    char v12 = *(void (**)(unsigned int *, uint64_t))(v4 + 8);
    v12(v6, v3);
    v12((unsigned int *)v9, v3);
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F9DC2B4()
{
  uint64_t v0 = sub_21F76CA40(&qword_267EEA3D0);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_21F76CA40(&qword_267EE81F8);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (unsigned int *)((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v7);
  char v9 = (char *)&v13 - v8;
  sub_21F7C53CC();
  sub_21FA24F40();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_21F76CA84((uint64_t)v2, &qword_267EEA3D0);
    return *MEMORY[0x263F288F8];
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v2, v3);
  uint64_t result = (*(uint64_t (**)(unsigned int *, char *, uint64_t))(v4 + 16))(v6, v9, v3);
  if (v5 == 4)
  {
    uint64_t v10 = *v6;
    char v12 = *(void (**)(unsigned int *, uint64_t))(v4 + 8);
    v12(v6, v3);
    v12((unsigned int *)v9, v3);
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F9DC4B4@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  return sub_21F9DC4CC(a1, &qword_267EEA3C8, a2);
}

uint64_t sub_21F9DC4C0@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  return sub_21F9DC4CC(a1, &qword_267EEA3C0, a2);
}

uint64_t sub_21F9DC4CC@<X0>(int a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = a1;
  uint64_t result = sub_21F76CA40(a2);
  if (*(void *)(*(void *)(result - 8) + 64) == 4) {
    return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)(result - 8) + 16))(a3, &v5, result);
  }
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for _Chart3DContentOutputs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F9DC580);
}

uint64_t sub_21F9DC580(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21FA24F30();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for _Chart3DContentOutputs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F9DC600);
}

uint64_t sub_21F9DC600(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21FA24F30();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for _Chart3DContentOutputs()
{
  uint64_t result = qword_267EEA3B0;
  if (!qword_267EEA3B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t AxisContent.compositingLayer()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_21FA24E30();
  uint64_t WitnessTable = swift_getWitnessTable();
  return AxisContent.compositingLayer<A>(style:)(a1, v6, a2, WitnessTable, a3);
}

uint64_t sub_21F9DC75C(uint64_t a1)
{
  uint64_t v2 = sub_21FA24E30();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  int v5 = (char *)&v8 - v4;
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_21F8B0FF0(a1, v2, WitnessTable);
  sub_21F8B0FF0(v5, v2, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_21F9DC868(uint64_t a1)
{
  return sub_21F9DC75C(a1);
}

uint64_t AxisContent.compositingLayer<A>(style:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v20 = a5;
  uint64_t v21 = a3;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t v24 = a4;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  MEMORY[0x270FA5388](OpaqueTypeMetadata2);
  char v12 = (char *)&v19 - v11;
  __n128 v14 = MEMORY[0x270FA5388](v13);
  char v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16))(v16, v6, a1, v14);
  sub_21FA24E20();
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t v24 = a4;
  swift_getOpaqueTypeConformance2();
  return sub_21F9DCA18((uint64_t)v16, (uint64_t)v12, a1, OpaqueTypeMetadata2, v20);
}

uint64_t sub_21F9DCA18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for CompositingLayerContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

_UNKNOWN **sub_21F9DCAE0()
{
  return &off_26D13F048;
}

_UNKNOWN **sub_21F9DCAEC()
{
  return &off_26D13F048;
}

uint64_t sub_21F9DCAF8(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void sub_21F9DCCF0(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x21F9DCFBCLL);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for CompositingLayerContent()
{
  return swift_getGenericMetadata();
}

size_t sub_21F9DCFFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  size_t result = (size_t)(*(void *(**)(void **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 8))(&v23, a1, a2, a3, a5);
  size_t v14 = v23;
  uint64_t v15 = v23[2];
  if (v15)
  {
    v20[0] = a3;
    v20[1] = a4;
    _DWORD v20[2] = a5;
    uint64_t v21 = a6;
    unint64_t v16 = 0;
    uint64_t v17 = a1 + *(int *)(type metadata accessor for CompositingLayerContent() + 52);
    while (1)
    {
      uint64_t v21 = a4;
      uint64_t v22 = a6;
      unsigned int v18 = sub_21F77E8F8(v20);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(v18, v17, a4);
      size_t result = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v23 = v14;
      if ((result & 1) == 0)
      {
        size_t result = sub_21F9352DC(v14);
        size_t v14 = (void *)result;
        uint64_t v23 = (void *)result;
      }
      if (v16 >= v14[2]) {
        break;
      }
      uint64_t v19 = type metadata accessor for AxisMarksConfiguration();
      size_t result = sub_21F9DD1AC((uint64_t)v20, (uint64_t)v14+ ((*(unsigned __int8 *)(*(void *)(v19 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v19 - 8) + 80))+ *(void *)(*(void *)(v19 - 8) + 72) * v16+ *(int *)(v19 + 32));
      size_t v14 = v23;
      if (v15 == ++v16) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_7:
    *a7 = v14;
  }
  return result;
}

size_t sub_21F9DD19C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  return sub_21F9DCFFC(a1, a2, a3[2], a3[3], a3[4], a3[5], a4);
}

uint64_t sub_21F9DD1AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21F76CA40(&qword_26AD46820);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_21F9DD214(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*MEMORY[0x263F8DE50] + *a1 + 8);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = type metadata accessor for _EnvironmentKeyWritingChart3DContentModifier();
  uint64_t v11 = *(void *)(v10 - 8);
  __n128 v12 = MEMORY[0x270FA5388](v10);
  size_t v14 = (uint64_t **)((char *)&v16 - v13);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))(v9, a2, v6, v12);
  sub_21F9DF034(a1, (uint64_t)v9, v14);
  swift_retain();
  Chart3DContent.modifier<A>(_:)((uint64_t)v14, a3, v10);
  return (*(uint64_t (**)(uint64_t **, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t sub_21F9DD3E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static _Chart3DContentModifier._makeChart3DContent(modifier:inputs:body:)(a1, a2, a3, a4, a5);
}

uint64_t sub_21F9DD400@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v24 = a4;
  uint64_t v5 = sub_21F76CA40(qword_267EE7868);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v24 - v9;
  uint64_t v27 = sub_21F76CA40(&qword_267EE9DA8);
  uint64_t v11 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for _Chart3DContentInputs();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_21FA24FE0();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  unsigned int v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA24FF0();
  sub_21F7FA948(a1, (uint64_t)v16);
  sub_21F76CA40(&qword_267EEA4F0);
  sub_21F9E0544();
  sub_21FA24C70();
  sub_21F9DD400(v13, v16, v25, v26);
  sub_21F7FA9C4((uint64_t)v10, (uint64_t)v7);
  uint64_t v21 = sub_21FA25050();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v7, 1, v21) == 1)
  {
    sub_21F76CA84((uint64_t)v10, qword_267EE7868);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v27);
    sub_21F7FAA8C((uint64_t)v16);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    return sub_21F76CA84((uint64_t)v7, qword_267EE7868);
  }
  else
  {
    sub_21FA25040();
    sub_21F76CA84((uint64_t)v10, qword_267EE7868);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v27);
    sub_21F7FAA8C((uint64_t)v16);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v7, v21);
  }
}

uint64_t static _Chart3DContentModifier._makeChart3DContent(modifier:inputs:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  v27[1] = a1;
  v27[2] = a5;
  uint64_t v6 = sub_21F76CA40(qword_267EE7868);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v27 - v10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = sub_21FA24530();
  uint64_t v31 = *(void *)(v13 - 8);
  uint64_t v32 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v27 - v14;
  uint64_t v16 = type metadata accessor for _Chart3DContentInputs();
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_21FA24FE0();
  uint64_t v19 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v21 = (char *)v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA24FF0();
  sub_21F7FA948(a2, (uint64_t)v18);
  type metadata accessor for Chart3DContentModifierBodyAccessor();
  swift_getWitnessTable();
  uint64_t v22 = (uint64_t)v8;
  sub_21FA24C70();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v15, v18, v29, v30, AssociatedTypeWitness, AssociatedConformanceWitness);
  sub_21F7FA9C4((uint64_t)v11, (uint64_t)v8);
  uint64_t v24 = sub_21FA25050();
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24) == 1)
  {
    sub_21F76CA84((uint64_t)v11, qword_267EE7868);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v15, v32);
    sub_21F7FAA8C((uint64_t)v18);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v28);
    return sub_21F76CA84(v22, qword_267EE7868);
  }
  else
  {
    sub_21FA25040();
    sub_21F76CA84((uint64_t)v11, qword_267EE7868);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v15, v32);
    sub_21F7FAA8C((uint64_t)v18);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v28);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v22, v24);
  }
}

uint64_t sub_21F9DDB98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static _Chart3DContentModifier._chart3DContentCount(inputs:body:)(a1, a2, a3);
}

uint64_t static _Chart3DContentModifier._chart3DContentCount(inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(a1, a2, a3, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t type metadata accessor for Chart3DContentModifierBodyAccessor()
{
  return sub_21F764F08();
}

uint64_t sub_21F9DDC80(uint64_t result, char a2)
{
  if (a2)
  {
    MEMORY[0x270FA5388](result);
    type metadata accessor for Chart3DContentModifierBodyAccessor();
    swift_getWitnessTable();
    return sub_21FA24C60();
  }
  return result;
}

uint64_t sub_21F9DDD34(uint64_t result, char a2)
{
  return sub_21F9DDC80(result, a2);
}

void ModifiedContent<>.body.getter()
{
}

uint64_t static ModifiedContent<>._makeChart3DContent(content:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v23 = a3;
  uint64_t v24 = a5;
  uint64_t v26 = a7;
  uint64_t v27 = a2;
  sub_21FA249D0();
  uint64_t v11 = sub_21FA24530();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v25 = sub_21FA24530();
  uint64_t v15 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v17 = (char *)&v22 - v16;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v18 = v24;
  uint64_t v30 = v24;
  uint64_t v31 = a6;
  sub_21F8115A8((void (*)(uint64_t))sub_21F9DE08C, a4, (uint64_t)&v22 - v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  unint64_t v19 = (*(unsigned __int8 *)(v12 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v20 = (char *)swift_allocObject();
  *((void *)v20 + 2) = v23;
  *((void *)v20 + 3) = a4;
  *((void *)v20 + 4) = v18;
  *((void *)v20 + 5) = a6;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v20[v19], v14, v11);
  (*(void (**)(char *, uint64_t, uint64_t (*)(uint64_t), char *, uint64_t, uint64_t))(a6 + 32))(v17, v27, sub_21F9DE2A4, v20, a4, a6);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v25);
}

uint64_t sub_21F9DDFF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_21FA249D0();
  uint64_t v6 = a1 + *(int *)(v5 + 36);
  v10[2] = v5;
  v10[3] = a3;
  uint64_t v7 = sub_21FA243A0();
  sub_21F74CD38(v6, (uint64_t)sub_21F9E1674, (uint64_t)v10, a3, MEMORY[0x263F8E628], v7, MEMORY[0x263F8E658], v8);
  return v10[5];
}

uint64_t sub_21F9DE08C(uint64_t a1)
{
  return sub_21F9DDFF0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_21F9DE098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = sub_21FA24530();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = &v16[-v13];
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v20 = a6;
  sub_21FA249D0();
  sub_21FA24530();
  sub_21F8115A8((void (*)(uint64_t))sub_21F9E05A0, a3, (uint64_t)v14);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(a5 + 32))(v14, a1, a3, a5);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_21F9DE204()
{
  sub_21FA249D0();
  uint64_t v1 = sub_21FA24530();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t sub_21F9DE2A4(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  sub_21FA249D0();
  uint64_t v7 = *(void *)(sub_21FA24530() - 8);
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return sub_21F9DE098(a1, v8, v3, v4, v5, v6);
}

uint64_t sub_21F9DE360(uint64_t a1, uint64_t a2)
{
  v7[2] = sub_21FA249D0();
  void v7[3] = a2;
  uint64_t v4 = sub_21FA243A0();
  sub_21F74CD38(a1, (uint64_t)sub_21F7AA57C, (uint64_t)v7, a2, MEMORY[0x263F8E628], v4, MEMORY[0x263F8E658], v5);
  return v7[5];
}

uint64_t static ModifiedContent<>._chart3DContentCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t (*)(uint64_t), void *, uint64_t, uint64_t))(a5 + 40))(a1, sub_21F9DE4B8, v10, a3, a5);
  swift_release();
  return v11;
}

uint64_t sub_21F9DE4A8()
{
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_21F9DE4B8(uint64_t a1)
{
  return static Chart3DContent._chart3DContentCount(inputs:)(a1);
}

void sub_21F9DE4E8()
{
}

uint64_t sub_21F9DE534@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static ModifiedContent<>._makeChart3DContent(content:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8), *(void *)(a4 - 16), a5);
}

uint64_t Chart3DContent.modifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v11 = MEMORY[0x270FA5388](v10);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))((char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a2, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a3);
  return sub_21FA24980();
}

_UNKNOWN **sub_21F9DE6B4()
{
  return &protocol witness table for Never;
}

uint64_t sub_21F9DE6C0(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of _Chart3DContentModifier.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static _Chart3DContentModifier._makeChart3DContent(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t dispatch thunk of static _Chart3DContentModifier._chart3DContentCount(inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t sub_21F9DE76C()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F9DE7C8()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21F9DE868(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 8) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    uint64_t v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t sub_21F9DE96C(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void *sub_21F9DE9E0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  swift_retain();
  v5(v7, v8, v4);
  return a1;
}

void *sub_21F9DEA70(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

void *sub_21F9DEB00(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void *sub_21F9DEB70(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t sub_21F9DEBF8(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 8) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
      }
      uint64_t v15 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void sub_21F9DED98(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 8) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x21F9DEFF4);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 8] & ~v9;
          uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(v19);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v18 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v18 = a2 - 1;
          }
          *(void *)a1 = v18;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for _EnvironmentKeyWritingChart3DContentModifier()
{
  return sub_21F764F08();
}

uint64_t sub_21F9DF034@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v4 = *a1;
  *a3 = a1;
  uint64_t v5 = *(void *)(*MEMORY[0x263F8DE50] + v4 + 8);
  uint64_t v6 = (char *)a3 + *(int *)(type metadata accessor for _EnvironmentKeyWritingChart3DContentModifier() + 28);
  unsigned int v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);

  return v7(v6, a2, v5);
}

uint64_t sub_21F9DF0EC@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v30 = a4;
  uint64_t v31 = a3;
  uint64_t v32 = a1;
  uint64_t v29 = a5;
  uint64_t v34 = *MEMORY[0x263EF8340];
  type metadata accessor for _EnvironmentKeyWritingChart3DContentModifier();
  uint64_t v6 = sub_21FA26340();
  MEMORY[0x270FA5388](v6 - 8);
  unsigned int v8 = (char *)&v26 - v7;
  uint64_t v28 = sub_21F76CA40(&qword_267EE8178);
  uint64_t v9 = *(void *)(v28 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v28);
  BOOL v11 = (int *)((char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for ChildEnvironment();
  uint64_t v27 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  unsigned int v14 = (_DWORD *)((char *)&v26 - v13);
  uint64_t v15 = type metadata accessor for _Chart3DContentInputs();
  MEMORY[0x270FA5388](v15 - 8);
  int v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F7FA948(a2, (uint64_t)v17);
  int v18 = sub_21F74D6C4(v32);
  sub_21FA24B60();
  if (v10 != 4) {
    __break(1u);
  }
  int v19 = *v11;
  uint64_t v20 = v28;
  (*(void (**)(uint64_t *, uint64_t))(v9 + 8))(&v26 - 2, v28);
  uint64_t v21 = type metadata accessor for _EnvironmentKeyWritingChart3DContentModifier();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v8, 1, 1, v21);
  uint64_t v22 = sub_21F9DF4A8(v18, v19, (uint64_t)v8, v14);
  MEMORY[0x270FA5388](v22);
  *(&v26 - 2) = v12;
  *(&v26 - 1) = swift_getWitnessTable();
  uint64_t v23 = sub_21F76CA40(&qword_267EEA4E8);
  sub_21F74C95C((uint64_t)v14, (uint64_t)sub_21F9E04DC, (uint64_t)(&v26 - 4), v12, MEMORY[0x263F8E628], v23, MEMORY[0x263F8E658], v24);
  (*(void (**)(_DWORD *, uint64_t))(v27 + 8))(v14, v12);
  (*(void (**)(int *, unsigned char *, uint64_t))(v9 + 16))(v11, v33, v20);
  sub_21FA24B70();
  v31(v17);
  return sub_21F7FAA8C((uint64_t)v17);
}

uint64_t sub_21F9DF4A8@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  uint64_t v5 = (char *)a4 + *(int *)(type metadata accessor for ChildEnvironment() + 32);
  type metadata accessor for _EnvironmentKeyWritingChart3DContentModifier();
  uint64_t v6 = sub_21FA26340();
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);

  return v7(v5, a3, v6);
}

uint64_t sub_21F9DF548(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_21F9DF574()
{
}

uint64_t sub_21F9DF5C0@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_21F9DF0EC(a1, a2, a3, a4, a5);
}

uint64_t sub_21F9DF5C8(uint64_t a1, uint64_t (*a2)(void))
{
  return sub_21F9DF548(a1, a2);
}

uint64_t sub_21F9DF5E4()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 24) + 24))(*(void *)(v0 + 16));
}

uint64_t type metadata accessor for ChildEnvironment()
{
  return sub_21F764F08();
}

uint64_t sub_21F9DF634(uint64_t a1)
{
  uint64_t v100 = *MEMORY[0x263EF8340];
  uint64_t v98 = sub_21FA24B30();
  uint64_t v96 = *(void *)(v98 - 8);
  MEMORY[0x270FA5388](v98);
  uint64_t v85 = (char *)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = a1;
  uint64_t v83 = *(void *)(*(void *)(a1 + 16) - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v84 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = v6;
  uint64_t v7 = type metadata accessor for _EnvironmentKeyWritingChart3DContentModifier();
  uint64_t v8 = sub_21FA26340();
  uint64_t v92 = *(void *)(v8 - 8);
  uint64_t v93 = v8;
  MEMORY[0x270FA5388](v8);
  double v77 = (char *)&v73 - v9;
  uint64_t v10 = sub_21F76CA40(&qword_267EEA580);
  uint64_t v11 = v10 - 8;
  MEMORY[0x270FA5388](v10);
  uint64_t v97 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v89 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  double v80 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v82 = (char *)&v73 - v15;
  MEMORY[0x270FA5388](v16);
  double v76 = (char *)&v73 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v88 = (char *)&v73 - v19;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v73 - v21;
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v73 - v24;
  uint64_t v27 = *(int *)(v26 + 48);
  uint64_t Value = AGGraphGetValue();
  LOBYTE(a1) = v29;
  uint64_t v81 = *(void *)(v7 - 8);
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v81 + 16);
  v30(v25, Value, v7);
  uint64_t v31 = a1 & 1;
  v25[v27] = v31;
  uint64_t v32 = *(int *)(v11 + 56);
  uint64_t v95 = v1;
  uint64_t v33 = v98;
  uint64_t v34 = AGGraphGetValue();
  char v36 = v35;
  uint64_t v37 = (uint64_t)v97;
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v96 + 16);
  uint64_t v79 = v96 + 16;
  double v78 = v38;
  v38(v97, v34, v33);
  uint64_t v39 = TupleTypeMetadata2;
  *(unsigned char *)(v37 + v32) = v36 & 1;
  uint64_t v40 = *(int *)(v39 + 48);
  uint64_t v87 = v25;
  uint64_t v41 = v25;
  uint64_t v42 = v30;
  v30(v22, (uint64_t)v41, v7);
  v22[v40] = v31;
  uint64_t v90 = v31;
  if (v36)
  {
    (*(void (**)(char *, uint64_t))(v89 + 8))(v22, v39);
    uint64_t v45 = v39;
    uint64_t v46 = v7;
  }
  else
  {
    uint64_t v43 = *(int *)(v39 + 48);
    unint64_t v44 = v88;
    double v75 = v22;
    v30(v88, (uint64_t)v22, v7);
    v44[v43] = v31;
    uint64_t v45 = v39;
    uint64_t v46 = v7;
    if (v31)
    {
      uint64_t v49 = v92;
      uint64_t v48 = v93;
      unsigned __int8 v50 = v42;
      uint64_t v51 = v77;
      uint64_t v52 = v46;
      (*(void (**)(char *, uint64_t, uint64_t))(v92 + 16))(v77, v95 + *(int *)(v94 + 32), v93);
      uint64_t v53 = *(int *)(v45 + 48);
      char v54 = v76;
      char v55 = v88;
      uint64_t v73 = v52;
      uint64_t v74 = v50;
      uint64_t v56 = ((uint64_t (*)(char *, char *, uint64_t))v50)(v76, v88, v52);
      v54[v53] = 1;
      MEMORY[0x270FA5388](v56);
      *(&v73 - 2) = v91;
      *(&v73 - 1) = (uint64_t)v54;
      sub_21F769724((void (*)(char *, char *))sub_21F9E152C, (uint64_t)(&v73 - 4), MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], v57, (uint64_t)&v99);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v51, v48);
      uint64_t v47 = *(void (**)(char *, uint64_t))(v89 + 8);
      v47(v55, v45);
      v47(v75, v45);
      v47(v54, v45);
      if (v99 == 2)
      {
        uint64_t v42 = v74;
        LOBYTE(v31) = v90;
        uint64_t v46 = v73;
        goto LABEL_10;
      }
      uint64_t v42 = v74;
      LOBYTE(v31) = v90;
      uint64_t v46 = v73;
      if (v99) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v47 = *(void (**)(char *, uint64_t))(v89 + 8);
      v47(v88, v39);
      v47(v75, v39);
    }
    if (AGGraphGetOutputValue())
    {
      sub_21F76CA84((uint64_t)v97, &qword_267EEA580);
      return ((uint64_t (*)(char *, uint64_t))v47)(v87, v45);
    }
  }
LABEL_10:
  uint64_t v59 = *(int *)(v45 + 48);
  uint64_t v60 = v82;
  uint64_t v61 = v87;
  v42(v82, (uint64_t)v87, v46);
  v60[v59] = v31;
  uint64_t v62 = v81;
  BOOL v63 = *(void (**)(char *, uint64_t))(v81 + 8);
  swift_retain();
  v63(v60, v46);
  uint64_t v64 = *(int *)(v45 + 48);
  BOOL v65 = (void (*)(char *, char *, uint64_t))v42;
  uint64_t v66 = v80;
  v65(v80, v61, v46);
  uint64_t v67 = v91;
  v66[v64] = v90;
  (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v84, &v66[*(int *)(v46 + 28)], v67);
  v63(v66, v46);
  uint64_t v68 = (uint64_t)v97;
  swift_setAtWritableKeyPath();
  swift_release();
  uint64_t v69 = v85;
  uint64_t v70 = v98;
  v78(v85, v68, v98);
  AGGraphSetOutputValue();
  (*(void (**)(char *, uint64_t))(v96 + 8))(v69, v70);
  sub_21F76CA84(v68, &qword_267EEA580);
  __n128 v71 = (char *)(v95 + *(int *)(v94 + 32));
  (*(void (**)(char *, uint64_t))(v92 + 8))(v71, v93);
  __n128 v72 = *(void (**)(char *, char *, uint64_t))(v62 + 32);
  v72(v60, v61, v46);
  v72(v71, v60, v46);
  return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v71, 0, 1, v46);
}

uint64_t sub_21F9DFEDC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t v58 = a4;
  uint64_t v5 = a1;
  uint64_t v60 = (uint64_t)a1;
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v61 = a3;
  uint64_t v57 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  unsigned __int8 v50 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v55 = (uint64_t)&v47 - v8;
  uint64_t v9 = type metadata accessor for _EnvironmentKeyWritingChart3DContentModifier();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v62 = (char *)&v47 - v11;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v54 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v59 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (uint64_t *)((char *)&v47 - v16);
  uint64_t v64 = *v5;
  uint64_t v19 = *(int *)(v18 + 48);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16);
  uint64_t v51 = a2;
  v20((char *)&v47 - v16, a2, v9, v15);
  uint64_t v52 = v19;
  *((unsigned char *)v17 + v19) = *(unsigned char *)(a2 + v19);
  uint64_t v21 = *v17;
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  swift_retain();
  swift_retain();
  uint64_t v56 = v10 + 8;
  uint64_t v53 = v22;
  v22((char *)v17, v9);
  uint64_t v63 = v21;
  sub_21FA24B30();
  sub_21FA26690();
  LOBYTE(v5) = sub_21FA25CE0();
  swift_release();
  swift_release();
  ((void (*)(char *, uint64_t, uint64_t))v20)(v62, v60, v9);
  uint64_t v60 = TupleTypeMetadata2;
  uint64_t v23 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v24 = v59;
  uint64_t v25 = v51;
  uint64_t v26 = v9;
  uint64_t v49 = v20;
  ((void (*)(char *, uint64_t, uint64_t))v20)(v59, v51, v9);
  char v27 = *(unsigned char *)(v25 + v52);
  uint64_t v28 = v24;
  v24[v23] = v27;
  if (v5)
  {
    uint64_t v29 = v26;
    uint64_t v30 = v61;
    uint64_t v31 = &v62[*(int *)(v26 + 28)];
    uint64_t v32 = *(void (**)(uint64_t, char *, uint64_t))(v57 + 16);
    v32(v55, v31, v61);
    uint64_t v33 = *(int *)(v60 + 48);
    uint64_t v34 = v28;
    uint64_t v35 = v29;
    ((void (*)(void *, char *, uint64_t))v49)(v17, v34, v29);
    *((unsigned char *)v17 + v33) = v27;
    uint64_t v36 = *(int *)(v29 + 28);
    uint64_t v48 = v29;
    uint64_t v37 = v50;
    v32((uint64_t)v50, (char *)v17 + v36, v30);
    uint64_t v38 = (char *)v17;
    uint64_t v39 = v53;
    uint64_t v40 = v53(v38, v35);
    MEMORY[0x270FA5388](v40);
    *(&v47 - 4) = v30;
    *(&v47 - 3) = (uint64_t)v37;
    *((_DWORD *)&v47 - 4) = 2;
    uint64_t v41 = v55;
    sub_21F74C95C(v55, (uint64_t)sub_21F9E154C, (uint64_t)(&v47 - 6), v30, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], v42);
    char v43 = v64;
    unint64_t v44 = *(void (**)(char *, uint64_t))(v57 + 8);
    v44(v37, v30);
    v44((char *)v41, v30);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v59, v60);
    uint64_t result = v39(v62, v48);
    char v46 = v43 ^ 1;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v54 + 8))(v24, v60);
    uint64_t result = v53(v62, v26);
    char v46 = 1;
  }
  *uint64_t v58 = v46 & 1;
  return result;
}

uint64_t sub_21F9E0408@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_21FA24B30();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

unint64_t sub_21F9E0478()
{
  return sub_21F9E15F0();
}

uint64_t sub_21F9E0480(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[2] = a4;
  v9[3] = a1;
  int v10 = a3;
  return sub_21F74C95C(a2, (uint64_t)sub_21F9E15B0, (uint64_t)v9, a4, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], a8);
}

uint64_t sub_21F9E04DC@<X0>(_DWORD *a1@<X8>)
{
  return sub_21F7C84B0(a1);
}

unint64_t sub_21F9E0544()
{
  unint64_t result = qword_267EEA4F8[0];
  if (!qword_267EEA4F8[0])
  {
    sub_21F779EA4(&qword_267EEA4F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_267EEA4F8);
  }
  return result;
}

uint64_t sub_21F9E05A0(uint64_t a1)
{
  return sub_21F9DE360(a1, *(void *)(v1 + 16));
}

uint64_t sub_21F9E05AC()
{
  type metadata accessor for _EnvironmentKeyWritingChart3DContentModifier();
  uint64_t result = sub_21FA26340();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_21F9E0658(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v8 = *(_DWORD *)(v6 + 80);
  int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v9 = v8;
  unint64_t v10 = v8 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = v8 + 8;
  size_t v12 = ((v9 + 8) & ~v9) + *(void *)(v6 + 64);
  int v13 = v8 & 0x100000;
  if (v9 <= 7 && v13 == 0 && (v10 & (v9 + 8)) + v12 <= 0x18)
  {
    uint64_t v17 = ~v9;
    *a1 = *a2;
    uint64_t v18 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v19 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v18 = *v19;
    uint64_t v20 = (void *)(v10 & ((unint64_t)v18 + 11));
    uint64_t v21 = (uint64_t *)(v10 & ((unint64_t)v19 + 11));
    if (v7 < 0)
    {
      if ((*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v21 + v11) & v17))
      {
LABEL_14:
        memcpy(v20, v21, v12);
        return v4;
      }
    }
    else
    {
      uint64_t v22 = *v21;
      if ((unint64_t)*v21 >= 0xFFFFFFFF) {
        LODWORD(v22) = -1;
      }
      if (v22 != -1) {
        goto LABEL_14;
      }
    }
    *uint64_t v20 = *v21;
    uint64_t v23 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    v23(((unint64_t)v20 + v11) & v17, ((unint64_t)v21 + v11) & v17, v5);
    return v4;
  }
  uint64_t v16 = *(void *)a2;
  *uint64_t v4 = *(void *)a2;
  uint64_t v4 = (void *)(v16 + (v10 & (v9 + 16)));
  swift_retain();
  return v4;
}

uint64_t sub_21F9E07E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (uint64_t *)((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + (v5 | 7) + 4) & ~(v5 | 7));
  uint64_t v7 = ~v5;
  if ((*(_DWORD *)(v3 + 84) & 0x80000000) != 0)
  {
    uint64_t v11 = *(void *)(*(void *)(a2 + 16) - 8);
    uint64_t result = (*(uint64_t (**)(unint64_t))(v3 + 48))(((unint64_t)v6 + v5 + 8) & v7);
    uint64_t v4 = v11;
    if (result) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v8 = *v6;
  if ((unint64_t)*v6 >= 0xFFFFFFFF) {
    LODWORD(v8) = -1;
  }
  uint64_t result = (v8 + 1);
  if (v8 == -1)
  {
LABEL_7:
    uint64_t v12 = v4;
    swift_release();
    unint64_t v10 = *(uint64_t (**)(unint64_t, uint64_t))(v12 + 8);
    return v10(((unint64_t)v6 + v5 + 8) & v7, v2);
  }
  return result;
}

_DWORD *sub_21F9E0904(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v8 | 7) + 4;
  unint64_t v10 = (void *)(((unint64_t)v4 + v9) & ~(v8 | 7));
  uint64_t v11 = (uint64_t *)(((unint64_t)v5 + v9) & ~(v8 | 7));
  uint64_t v12 = ~v8;
  uint64_t v13 = *(void *)(v7 + 64);
  uint64_t v14 = v8 + 8;
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) == 0)
  {
    uint64_t v15 = *v11;
    if ((unint64_t)*v11 >= 0xFFFFFFFF) {
      LODWORD(v15) = -1;
    }
    if (v15 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    void *v10 = *v11;
    uint64_t v16 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_retain();
    v16(((unint64_t)v10 + v14) & v12, ((unint64_t)v11 + v14) & v12, v6);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v11 + v14) & v12)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v10, v11, (v14 & ~v8) + v13);
  return a1;
}

_DWORD *sub_21F9E0A64(_DWORD *a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + 4;
  uint64_t v11 = (void *)(((unint64_t)v6 + v10) & ~(v9 | 7));
  uint64_t v12 = (void *)((v10 + (v4 & 0xFFFFFFFFFFFFFFFCLL)) & ~(v9 | 7));
  uint64_t v13 = *(unsigned int *)(v8 + 84);
  uint64_t v14 = ~v9;
  uint64_t v15 = v9 + 8;
  size_t v16 = ((v9 + 8) & ~v9) + *(void *)(v8 + 64);
  if ((v13 & 0x80000000) != 0)
  {
    uint64_t v23 = ((v9 + 8) & ~v9) + *(void *)(v8 + 64);
    uint64_t v19 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    int v20 = v19(((unint64_t)v11 + v15) & v14, v13, v7);
    int v18 = v19(((unint64_t)v12 + v15) & v14, v13, v7);
    size_t v16 = v23;
    if (!v20)
    {
LABEL_5:
      if (!v18)
      {
        *uint64_t v11 = *v12;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))(((unint64_t)v11 + v15) & v14, ((unint64_t)v12 + v15) & v14, v7);
        return a1;
      }
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((unint64_t)v11 + v15) & v14, v7);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v17 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL) {
      LODWORD(v17) = -1;
    }
    int v18 = v17 + 1;
    if (*v11 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v18)
  {
    *uint64_t v11 = *v12;
    uint64_t v21 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16);
    swift_retain();
    v21(((unint64_t)v11 + v15) & v14, ((unint64_t)v12 + v15) & v14, v7);
    return a1;
  }
LABEL_9:
  memcpy(v11, v12, v16);
  return a1;
}

_DWORD *sub_21F9E0C78(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v8 | 7) + 4;
  uint64_t v10 = (void *)(((unint64_t)v4 + v9) & ~(v8 | 7));
  uint64_t v11 = (uint64_t *)(((unint64_t)v5 + v9) & ~(v8 | 7));
  uint64_t v12 = ~v8;
  uint64_t v13 = *(void *)(v7 + 64);
  uint64_t v14 = v8 + 8;
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) == 0)
  {
    uint64_t v15 = *v11;
    if ((unint64_t)*v11 >= 0xFFFFFFFF) {
      LODWORD(v15) = -1;
    }
    if (v15 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    void *v10 = *v11;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)v10 + v14) & v12, ((unint64_t)v11 + v14) & v12, v6);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v11 + v14) & v12)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v10, v11, (v14 & ~v8) + v13);
  return a1;
}

_DWORD *sub_21F9E0DCC(_DWORD *a1, int *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + 4;
  uint64_t v11 = (void *)(((unint64_t)v6 + v10) & ~(v9 | 7));
  uint64_t v12 = (void *)((v10 + (v4 & 0xFFFFFFFFFFFFFFFCLL)) & ~(v9 | 7));
  uint64_t v13 = *(unsigned int *)(v8 + 84);
  uint64_t v14 = ~v9;
  uint64_t v15 = v9 + 8;
  size_t v16 = ((v9 + 8) & ~v9) + *(void *)(v8 + 64);
  if ((v13 & 0x80000000) != 0)
  {
    uint64_t v19 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    int v20 = v19(((unint64_t)v11 + v15) & v14, v13, v7);
    int v18 = v19(((unint64_t)v12 + v15) & v14, v13, v7);
    uint64_t v3 = a1;
    if (!v20)
    {
LABEL_5:
      if (!v18)
      {
        *uint64_t v11 = *v12;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))(((unint64_t)v11 + v15) & v14, ((unint64_t)v12 + v15) & v14, v7);
        return v3;
      }
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((unint64_t)v11 + v15) & v14, v7);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v17 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL) {
      LODWORD(v17) = -1;
    }
    int v18 = v17 + 1;
    if (*v11 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v18)
  {
    *uint64_t v11 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(((unint64_t)v11 + v15) & v14, ((unint64_t)v12 + v15) & v14, v7);
    return v3;
  }
LABEL_9:
  memcpy(v11, v12, v16);
  return v3;
}

uint64_t sub_21F9E0FCC(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    int v7 = 0x7FFFFFFF;
  }
  else {
    int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = v6 | 7;
  uint64_t v9 = v6 + 8;
  if (v7 - 1 >= a2) {
    goto LABEL_25;
  }
  uint64_t v10 = (v9 & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + (v9 & ~v8);
  char v11 = 8 * v10;
  if (v10 > 3) {
    goto LABEL_7;
  }
  unsigned int v14 = (((1 << v11) + a2 - v7) >> v11) + 1;
  if (HIWORD(v14))
  {
    int v12 = *(_DWORD *)((char *)a1 + v10);
    if (v12) {
      goto LABEL_15;
    }
LABEL_25:
    int v18 = (unint64_t *)(((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v8 + 4) & ~v8);
    if ((v5 & 0x80000000) != 0)
    {
      unsigned int v20 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v18 + v9) & ~v6);
    }
    else
    {
      unint64_t v19 = *v18;
      if (v19 >= 0xFFFFFFFF) {
        LODWORD(v19) = -1;
      }
      unsigned int v20 = v19 + 1;
    }
    if (v20 >= 2) {
      return v20 - 1;
    }
    else {
      return 0;
    }
  }
  if (v14 > 0xFF)
  {
    int v12 = *(unsigned __int16 *)((char *)a1 + v10);
    if (*(unsigned __int16 *)((char *)a1 + v10)) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
  if (v14 < 2) {
    goto LABEL_25;
  }
LABEL_7:
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_25;
  }
LABEL_15:
  int v15 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v15 = 0;
  }
  if (v10)
  {
    if (v10 <= 3) {
      int v16 = (v9 & ~v6) + *(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + (v9 & ~v8);
    }
    else {
      int v16 = 4;
    }
    switch(v16)
    {
      case 2:
        int v17 = *a1;
        break;
      case 3:
        int v17 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v17 = *(_DWORD *)a1;
        break;
      default:
        int v17 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v17 = 0;
  }
  return (v17 | v15) + v7;
}

void sub_21F9E11BC(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  unsigned int v9 = v8 - 1;
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = v10 | 7;
  uint64_t v12 = v10 + 8;
  size_t v13 = ((v10 + 8) & ~v10) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v14 = v13 + ((v10 + 8) & ~(v10 | 7));
  if (v8 - 1 >= a3)
  {
    int v15 = 0;
LABEL_13:
    if (v9 >= a2) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  int v15 = 1;
  if (v14 > 3) {
    goto LABEL_13;
  }
  unsigned int v16 = (((1 << (8 * v14)) + a3 - v8) >> (8 * v14)) + 1;
  if (HIWORD(v16))
  {
    int v15 = 4;
    if (v9 >= a2) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v16 >= 0x100) {
      int v15 = 2;
    }
    else {
      int v15 = v16 > 1;
    }
    if (v9 >= a2)
    {
LABEL_21:
      uint64_t v20 = ~v10;
      switch(v15)
      {
        case 1:
          a1[v14] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 2:
          *(_WORD *)&a1[v14] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 3:
          goto LABEL_57;
        case 4:
          *(_DWORD *)&a1[v14] = 0;
          goto LABEL_25;
        default:
LABEL_25:
          if (a2)
          {
LABEL_26:
            uint64_t v21 = (unsigned char *)((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v11 + 4) & ~v11);
            if (a2 + 1 <= v8)
            {
              if (a2 != -1)
              {
                if ((v7 & 0x80000000) != 0)
                {
                  uint64_t v26 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
                  uint64_t v27 = a2 + 1;
                  v26((unint64_t)&v21[v12] & v20, v27);
                }
                else
                {
                  if (((a2 + 1) & 0x80000000) != 0) {
                    uint64_t v25 = a2 - 0x7FFFFFFF;
                  }
                  else {
                    uint64_t v25 = a2;
                  }
                  *(void *)uint64_t v21 = v25;
                }
              }
            }
            else
            {
              if (v13 <= 3) {
                int v22 = ~(-1 << (8 * v13));
              }
              else {
                int v22 = -1;
              }
              if (v13)
              {
                int v23 = v22 & (a2 - v8);
                if (v13 <= 3) {
                  int v24 = v13;
                }
                else {
                  int v24 = 4;
                }
                bzero(v21, v13);
                switch(v24)
                {
                  case 2:
                    *(_WORD *)uint64_t v21 = v23;
                    break;
                  case 3:
                    *(_WORD *)uint64_t v21 = v23;
                    v21[2] = BYTE2(v23);
                    break;
                  case 4:
                    *(_DWORD *)uint64_t v21 = v23;
                    break;
                  default:
                    *uint64_t v21 = v23;
                    break;
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
LABEL_14:
  unsigned int v17 = a2 - v8;
  if (v14 < 4)
  {
    int v18 = (v17 >> (8 * v14)) + 1;
    if (v14)
    {
      int v19 = v17 & ~(-1 << (8 * v14));
      bzero(a1, v14);
      if (v14 == 3)
      {
        *(_WORD *)a1 = v19;
        a1[2] = BYTE2(v19);
      }
      else if (v14 == 2)
      {
        *(_WORD *)a1 = v19;
      }
      else
      {
        *a1 = v19;
      }
    }
  }
  else
  {
    bzero(a1, v13 + ((v10 + 8) & ~(v10 | 7)));
    *(_DWORD *)a1 = v17;
    int v18 = 1;
  }
  switch(v15)
  {
    case 1:
      a1[v14] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v14] = v18;
      break;
    case 3:
LABEL_57:
      __break(1u);
      JUMPOUT(0x21F9E14D8);
    case 4:
      *(_DWORD *)&a1[v14] = v18;
      break;
    default:
      return;
  }
}

uint64_t sub_21F9E1510()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F9E152C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_21F9DFEDC(a1, *(void *)(v2 + 24), *(void *)(v2 + 16), a2);
}

uint64_t sub_21F9E154C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(v8 + 24);
  int v10 = *(_DWORD *)(v8 + 32);
  uint64_t v13 = *(void *)(v8 + 16);
  uint64_t v14 = a1;
  int v15 = v10;
  return sub_21F74C95C(v9, (uint64_t)sub_21F9E15B0, (uint64_t)&v12, v13, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], a8);
}

uint64_t sub_21F9E15B0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = AGCompareValues();
  *a1 = result;
  return result;
}

unint64_t sub_21F9E15F0()
{
  return 0xD000000000000014;
}

uint64_t sub_21F9E1674@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_21F7AA57C(a1, a2);
}

ValueMetadata *type metadata accessor for Spec()
{
  return &type metadata for Spec;
}

unsigned char *storeEnumTagSinglePayload for Spec.Channel(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x21F9E1768);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

uint64_t sub_21F9E1790(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v6 = sub_21F76CA40(&qword_26AD46A20);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ChartContentRenderContext.Bins(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __n128 v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v10 + 48))(a1, 1, v9, v11) == 1)
  {
    sub_21F76CA84(a1, &qword_26AD46A20);
    unint64_t v14 = sub_21F75BD50(a2);
    if (v15)
    {
      unint64_t v16 = v14;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v18 = *v3;
      uint64_t v22 = *v3;
      *int v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_21F87A778();
        uint64_t v18 = v22;
      }
      sub_21F9E6774(*(void *)(v18 + 56) + *(void *)(v10 + 72) * v16, (uint64_t)v8);
      sub_21F8FD304(v16, v18);
      *int v3 = v18;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    }
    return sub_21F76CA84((uint64_t)v8, &qword_26AD46A20);
  }
  else
  {
    sub_21F9E6774(a1, (uint64_t)v13);
    char v19 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v22 = *v3;
    *int v3 = 0x8000000000000000;
    sub_21F873590((uint64_t)v13, a2, v19);
    *int v3 = v22;
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_21F9E19C8(uint64_t a1, uint64_t a2)
{
  return sub_21F7885E4(a1, a2, &qword_26AD45640, (void (*)(uint64_t, uint64_t))sub_21F7642FC);
}

uint64_t sub_21F9E19E8(uint64_t a1, uint64_t a2)
{
  return sub_21F7885E4(a1, a2, &qword_267EEA598, (void (*)(uint64_t, uint64_t))sub_21F7642D0);
}

uint64_t sub_21F9E1A08(uint64_t a1)
{
  return sub_21F785F78(a1, &qword_26AD44140);
}

uint64_t sub_21F9E1A14(uint64_t a1)
{
  return sub_21F785F78(a1, &qword_267EEA5A8);
}

uint64_t sub_21F9E1A20(uint64_t a1, uint64_t a2)
{
  return sub_21F9E1A50(a1, a2, &qword_267EEA5C0);
}

uint64_t sub_21F9E1A2C(uint64_t a1, uint64_t a2)
{
  return sub_21F9E1A50(a1, a2, &qword_267EEA5C8);
}

uint64_t sub_21F9E1A38(uint64_t a1, uint64_t a2)
{
  return sub_21F9E1A50(a1, a2, &qword_267EEA5D0);
}

uint64_t sub_21F9E1A44(uint64_t a1, uint64_t a2)
{
  return sub_21F9E1A50(a1, a2, &qword_267EEA5D8);
}

uint64_t sub_21F9E1A50(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = result;
    *(void *)(v4 + 16) = v6;
    v9[3] = sub_21F76CA40(a3);
    void v9[4] = &off_26D1331C0;
    v9[0] = v8;
    v9[1] = a2;
    swift_beginAccess();
    swift_retain();
    sub_21F77E1A8((uint64_t)v9, v6);
    swift_endAccess();
    return *(void *)(v4 + 16);
  }
  return result;
}

uint64_t sub_21F9E1AF0(uint64_t a1)
{
  return sub_21F785F78(a1, qword_26AD44148);
}

uint64_t sub_21F9E1AFC(uint64_t a1)
{
  return sub_21F785F78(a1, &qword_267EEA5A0);
}

uint64_t sub_21F9E1B08(uint64_t result)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = result;
    *(void *)(v2 + 16) = v4;
    v6[3] = sub_21F76CA40(&qword_267EEA5B0);
    v6[4] = &off_26D1331C0;
    v6[0] = v5;
    swift_beginAccess();
    swift_retain();
    sub_21F77E1A8((uint64_t)v6, v4);
    swift_endAccess();
    return *(void *)(v2 + 16);
  }
  return result;
}

uint64_t sub_21F9E1BA8(uint64_t a1)
{
  return sub_21F785F78(a1, &qword_267EEA5B8);
}

BOOL sub_21F9E1BB4(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  void v7[3] = v2;
  uint64_t v8 = *(void *)(a1 + 64);
  long long v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  uint64_t v10 = *(void *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_21F9E2A74((uint64_t)v7, (uint64_t)v9);
}

void sub_21F9E1C10(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_21F9E1C18@<X0>(void *a1@<X8>)
{
  if (qword_26AD447F0 != -1) {
    swift_once();
  }
  *a1 = qword_26AD51FB0;

  return swift_bridgeObjectRetain();
}

uint64_t sub_21F9E1C84(char a1)
{
  if (a1 == 2)
  {
    uint64_t v1 = swift_allocObject();
    *(void *)(v1 + 16) = sub_21F9E1D4C;
    *(void *)(v1 + 24) = 0;
    return sub_21F809EA4(MEMORY[0x263F8EE78], (uint64_t)sub_21F9E668C, v1);
  }
  else
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = sub_21F9E1E80;
    *(void *)(v3 + 24) = 0;
    return sub_21F809E68(MEMORY[0x263F8EE78], (uint64_t)sub_21F9E6690, v3);
  }
}

uint64_t sub_21F9E1D4C@<X0>(void *a1@<X8>)
{
  if (qword_267EE6E70 != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v2 = *(void *)(qword_267EF2F98 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v7 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_21FA26630();
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = v4 + 1;
      swift_retain();
      sub_21FA245C0();
      sub_21FA26600();
      sub_21FA26640();
      sub_21FA26650();
      sub_21FA26610();
      uint64_t v4 = v5;
    }
    while (v2 != v5);
    uint64_t v3 = v7;
    uint64_t result = swift_bridgeObjectRelease();
  }
  *a1 = v3;
  return result;
}

uint64_t sub_21F9E1E80@<X0>(void *a1@<X8>)
{
  if (qword_267EE6E78 != -1) {
    swift_once();
  }
  *a1 = qword_267EF2FA0;

  return swift_retain();
}

uint64_t sub_21F9E1EEC(char a1, uint64_t a2)
{
  if (a1 == 2)
  {
    uint64_t v3 = swift_allocObject();
    long long v4 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v3 + 48) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v3 + 64) = v4;
    *(_OWORD *)(v3 + 80) = *(_OWORD *)(a2 + 64);
    *(_WORD *)(v3 + 96) = *(_WORD *)(a2 + 80);
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v3 + 16) = *(_OWORD *)a2;
    *(_OWORD *)(v3 + 32) = v5;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = sub_21F9E671C;
    *(void *)(v6 + 24) = v3;
    sub_21F790DC4(a2);
    return sub_21F80A48C(MEMORY[0x263F8EE78], (uint64_t)sub_21F9E668C, v6);
  }
  else
  {
    uint64_t result = sub_21FA266E0();
    __break(1u);
  }
  return result;
}

uint64_t sub_21F9E200C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  if ((*(unsigned char *)(a1 + 80) & 1) == 0)
  {
    if (qword_26AD447E8 == -1) {
      goto LABEL_5;
    }
    goto LABEL_6;
  }
  if (qword_267EE6E88 != -1) {
LABEL_6:
  }
    swift_once();
LABEL_5:
  uint64_t result = swift_bridgeObjectRetain();
  *a2 = result;
  return result;
}

uint64_t sub_21F9E20B4@<X0>(char a1@<W1>, uint64_t *a2@<X8>)
{
  if (a1 == 2)
  {
    if (qword_267EE6E90 == -1) {
      goto LABEL_5;
    }
    goto LABEL_6;
  }
  if (qword_267EE6E98 != -1) {
LABEL_6:
  }
    swift_once();
LABEL_5:
  uint64_t result = swift_bridgeObjectRetain();
  *a2 = result;
  return result;
}

double sub_21F9E2160@<D0>(uint64_t *a1@<X8>)
{
  sub_21F76CA40(&qword_26AD48568);
  uint64_t v2 = swift_allocObject();
  *(void *)&double result = 2;
  *(_OWORD *)(v2 + 16) = xmmword_21FA28820;
  *(_OWORD *)(v2 + 32) = xmmword_21FA2EAA0;
  *a1 = v2;
  return result;
}

BOOL sub_21F9E21B0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_21F9E21C4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_21F9E21D8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_21F9E21EC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

uint64_t sub_21F9E2200()
{
  if (v0[8] == 1)
  {
    sub_21FA26A20();
  }
  else
  {
    sub_21FA26A20();
    sub_21FA26A10();
  }
  if (v0[24] == 1)
  {
    sub_21FA26A20();
  }
  else
  {
    sub_21FA26A20();
    sub_21FA26A10();
  }
  if (v0[40] == 1)
  {
    sub_21FA26A20();
  }
  else
  {
    sub_21FA26A20();
    sub_21FA26A10();
  }
  if (v0[56] == 1)
  {
    sub_21FA26A20();
  }
  else
  {
    sub_21FA26A20();
    sub_21FA26A10();
  }
  if (v0[72] == 1) {
    return sub_21FA26A20();
  }
  sub_21FA26A20();
  return sub_21FA26A10();
}

uint64_t sub_21F9E2308()
{
  return sub_21FA26A50();
}

uint64_t sub_21F9E234C()
{
  return sub_21FA26A50();
}

BOOL sub_21F9E2388(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[3];
  v7[2] = a1[2];
  v8[0] = v2;
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)a1 + 57);
  long long v3 = a1[1];
  v7[0] = *a1;
  v7[1] = v3;
  long long v4 = a2[3];
  v9[2] = a2[2];
  v10[0] = v4;
  *(_OWORD *)((char *)v10 + 9) = *(_OWORD *)((char *)a2 + 57);
  long long v5 = a2[1];
  v9[0] = *a2;
  v9[1] = v5;
  return sub_21F9E29A0((uint64_t)v7, (uint64_t)v9);
}

uint64_t sub_21F9E23E4()
{
  uint64_t v1 = *v0;
  sub_21FA26A00();
  sub_21FA26A20();
  if (v1 != 9) {
    sub_21FA26A10();
  }
  if (v0[16] == 1)
  {
    sub_21FA26A20();
  }
  else
  {
    sub_21FA26A20();
    sub_21FA26A10();
  }
  if (v0[32] == 1)
  {
    sub_21FA26A20();
  }
  else
  {
    sub_21FA26A20();
    sub_21FA26A10();
  }
  sub_21FA26A10();
  return sub_21FA26A50();
}

uint64_t sub_21F9E24D8()
{
  int v1 = v0[16];
  int v2 = v0[32];
  if (*v0 == 9)
  {
    sub_21FA26A20();
    if (!v1) {
      goto LABEL_3;
    }
LABEL_6:
    sub_21FA26A20();
    if (!v2) {
      goto LABEL_4;
    }
LABEL_7:
    sub_21FA26A20();
    return sub_21FA26A10();
  }
  sub_21FA26A20();
  sub_21FA26A10();
  if (v1) {
    goto LABEL_6;
  }
LABEL_3:
  sub_21FA26A20();
  sub_21FA26A10();
  if (v2) {
    goto LABEL_7;
  }
LABEL_4:
  sub_21FA26A20();
  sub_21FA26A10();
  return sub_21FA26A10();
}

uint64_t sub_21F9E2598()
{
  uint64_t v1 = *v0;
  int v2 = v0[16];
  int v3 = v0[32];
  sub_21FA26A00();
  if (v1 == 9)
  {
    sub_21FA26A20();
    if (!v2) {
      goto LABEL_3;
    }
LABEL_6:
    sub_21FA26A20();
    if (!v3) {
      goto LABEL_4;
    }
LABEL_7:
    sub_21FA26A20();
    goto LABEL_8;
  }
  sub_21FA26A20();
  sub_21FA26A10();
  if (v2) {
    goto LABEL_6;
  }
LABEL_3:
  sub_21FA26A20();
  sub_21FA26A10();
  if (v3) {
    goto LABEL_7;
  }
LABEL_4:
  sub_21FA26A20();
  sub_21FA26A10();
LABEL_8:
  sub_21FA26A10();
  return sub_21FA26A50();
}

BOOL sub_21F9E268C(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  long long v5 = a2[2];
  v8[1] = v4;
  _OWORD v8[2] = v5;
  return sub_21F9E28F0((unsigned __int8 *)v7, (unsigned __int8 *)v8);
}

uint64_t sub_21F9E26D4()
{
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v1 = *(void *)(v0 + 16);
  sub_21FA26A00();
  sub_21FA26A20();
  sub_21FA26A20();
  if (v2) {
    sub_21F7D4B00((uint64_t)v4, v2);
  }
  sub_21F7D4A10((uint64_t)v4, v1);
  return sub_21FA26A50();
}

uint64_t sub_21F9E275C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  sub_21FA26A20();
  sub_21FA26A20();
  if (v4) {
    sub_21F7D4B00(a1, v4);
  }

  return sub_21F7D4A10(a1, v3);
}

uint64_t sub_21F9E27D8()
{
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v1 = *(void *)(v0 + 16);
  sub_21FA26A00();
  sub_21FA26A20();
  sub_21FA26A20();
  if (v2) {
    sub_21F7D4B00((uint64_t)v4, v2);
  }
  sub_21F7D4A10((uint64_t)v4, v1);
  return sub_21FA26A50();
}

uint64_t sub_21F9E285C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *((void *)a1 + 2);
  uint64_t v7 = *((void *)a2 + 1);
  uint64_t v8 = *((void *)a2 + 2);
  if (!v5)
  {
    if (!v7) {
      goto LABEL_8;
    }
    return 0;
  }
  if (!v7 || (sub_21F7D3D14(v5, v7) & 1) == 0) {
    return 0;
  }
LABEL_8:

  return sub_21F7D3E38(v6, v8);
}

BOOL sub_21F9E28F0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 9)
  {
    if (v3 != 9) {
      return 0;
    }
  }
  else if (v3 == 9 || v2 != v3)
  {
    return 0;
  }
  char v6 = a2[16];
  if (a1[16])
  {
    if (!a2[16]) {
      return 0;
    }
  }
  else
  {
    if (*((void *)a1 + 1) != *((void *)a2 + 1)) {
      char v6 = 1;
    }
    if (v6) {
      return 0;
    }
  }
  char v7 = a2[32];
  if (a1[32])
  {
    if (!a2[32]) {
      return 0;
    }
  }
  else
  {
    if (*((void *)a1 + 3) != *((void *)a2 + 3)) {
      char v7 = 1;
    }
    if (v7) {
      return 0;
    }
  }
  return *((void *)a1 + 5) == *((void *)a2 + 5);
}

BOOL sub_21F9E29A0(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    if (!*(unsigned char *)(a2 + 8)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)a1 != *(void *)a2) {
      char v2 = 1;
    }
    if (v2) {
      return 0;
    }
  }
  char v3 = *(unsigned char *)(a2 + 24);
  if (*(unsigned char *)(a1 + 24))
  {
    if (!*(unsigned char *)(a2 + 24)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      char v3 = 1;
    }
    if (v3) {
      return 0;
    }
  }
  char v4 = *(unsigned char *)(a2 + 40);
  if (*(unsigned char *)(a1 + 40))
  {
    if (!*(unsigned char *)(a2 + 40)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      char v4 = 1;
    }
    if (v4) {
      return 0;
    }
  }
  char v5 = *(unsigned char *)(a2 + 56);
  if (*(unsigned char *)(a1 + 56))
  {
    if (!*(unsigned char *)(a2 + 56)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)(a1 + 48) != *(void *)(a2 + 48)) {
      char v5 = 1;
    }
    if (v5) {
      return 0;
    }
  }
  char v6 = *(unsigned char *)(a2 + 72);
  if ((*(unsigned char *)(a1 + 72) & 1) == 0)
  {
    if (*(void *)(a1 + 64) != *(void *)(a2 + 64)) {
      char v6 = 1;
    }
    return (v6 & 1) == 0;
  }
  return (*(unsigned char *)(a2 + 72) & 1) != 0;
}

BOOL sub_21F9E2A74(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 == *(void *)a2
      && *(void *)(a1 + 8) == *(void *)(a2 + 8)
      && *(void *)(a1 + 16) == *(void *)(a2 + 16)
      && ((*(unsigned __int8 *)(a1 + 24) ^ *(unsigned __int8 *)(a2 + 24)) & 1) == 0
      && (sub_21F798A00(*(void *)(a1 + 32), *(void *)(a2 + 32)) & 1) != 0
      && (sub_21F798600(*(void *)(a1 + 40), *(void *)(a2 + 40)) & 1) != 0
      && ((*(_WORD *)(a1 + 48) ^ *(_WORD *)(a2 + 48)) & 1) == 0
      && ((*(_WORD *)(a1 + 48) ^ *(_WORD *)(a2 + 48)) & 0x100) == 0
      && *(void *)(a1 + 56) == *(void *)(a2 + 56)
      && *(void *)(a1 + 64) == *(void *)(a2 + 64);
}

uint64_t sub_21F9E2B54@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int16 a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9 = a1;
  sub_21F76C9DC(a1, (uint64_t)v58, &qword_26AD48BA0);
  uint64_t v12 = v59;
  uint64_t v11 = v60;
  uint64_t v13 = v61;
  LOWORD(v14) = v62;
  sub_21F76C9DC(v9, (uint64_t)v69, &qword_26AD48BA0);
  if (BYTE8(v69[0]) == 254
    || (long long v73 = v69[2],
        long long v74 = v69[3],
        char v75 = v70,
        long long v71 = v69[0],
        long long v72 = v69[1],
        sub_21F76C9DC((uint64_t)&v74, (uint64_t)v76, &qword_26AD46C30),
        sub_21F76C9DC((uint64_t)v76, (uint64_t)v77, &qword_26AD46C30),
        v77[16] == 255))
  {
    uint64_t v82 = 32;
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = sub_21F9E2160;
    *(void *)(v15 + 24) = 0;
    uint64_t v53 = sub_21F809B18(MEMORY[0x263F8EE78], (uint64_t)sub_21F9E668C, v15);
    uint64_t v54 = 0;
  }
  else
  {
    sub_21F9E6630((uint64_t)v77, (uint64_t)v78);
    sub_21F9E6630((uint64_t)v78, (uint64_t)&v79);
    switch(v81)
    {
      case 1:
        uint64_t v54 = 0;
        uint64_t v16 = 33;
        goto LABEL_12;
      case 2:
        uint64_t v54 = 0;
        uint64_t v16 = 65;
        goto LABEL_12;
      case 3:
        uint64_t v54 = 0;
        uint64_t v16 = 97;
        goto LABEL_12;
      case 4:
        uint64_t v54 = 0;
        uint64_t v16 = 129;
        goto LABEL_12;
      case 5:
        uint64_t v54 = 0;
        uint64_t v16 = 161;
        goto LABEL_12;
      case 6:
        uint64_t v54 = 0;
        uint64_t v16 = 193;
LABEL_12:
        uint64_t v82 = v16;
        uint64_t v53 = v79;
        break;
      case 7:
        uint64_t v53 = v79;
        uint64_t v54 = v80;
        uint64_t v82 = 224;
        break;
      default:
        uint64_t v82 = 0;
        uint64_t v53 = v79;
        uint64_t v54 = v80;
        break;
    }
  }
  if (!(_BYTE)a3)
  {
    sub_21F76C9DC(v9, (uint64_t)&v63, &qword_26AD48BA0);
    int v17 = 2;
    if (v64 == 254)
    {
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v28 = v11;
      if (v64 == 255) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = v63;
      }
      if (v64 == 255) {
        int v17 = 2;
      }
      else {
        int v17 = v64;
      }
      if ((~(_WORD)v14 & 0xFF00) != 0)
      {
        if (BYTE1(v14) != 3)
        {
          if (!BYTE1(v14))
          {
            uint64_t result = swift_release();
            a3 = 0;
            uint64_t v26 = 0;
            uint64_t v13 = 0;
            int64x2_t v40 = (int64x2_t)xmmword_21FA33750;
            char v41 = v82;
            uint64_t v42 = v54;
            uint64_t v18 = v11;
            goto LABEL_76;
          }
LABEL_87:
          sub_21F9E65DC();
          swift_allocError();
          *char v43 = 0xD00000000000003BLL;
          unint64_t v44 = 0x800000021FA5FFF0;
          goto LABEL_93;
        }
        int v47 = v14;
        if (!(_BYTE)v14)
        {
          uint64_t v49 = v13;
          a3 = v12;
          uint64_t v9 = a4;
          uint64_t v14 = v11;
          uint64_t v13 = v28;
          if (v17 == 1) {
            goto LABEL_51;
          }
LABEL_49:
          if (v17 != 2 || v14 != 2)
          {
            uint64_t v11 = v14;
            if (a2 <= 7u)
            {
              uint64_t v32 = 1;
              if (((1 << a2) & 0xC3) != 0) {
                goto LABEL_71;
              }
            }
            goto LABEL_100;
          }
LABEL_51:
          uint64_t v11 = v14;
          uint64_t v31 = swift_allocObject();
          *(void *)(v31 + 16) = sub_21F9E1C10;
          *(void *)(v31 + 24) = 0;
          a3 = sub_21F809858(MEMORY[0x263F8EE78], (uint64_t)sub_21F8100A8, v31);
          uint64_t v32 = 0;
          uint64_t v33 = 0;
          goto LABEL_72;
        }
        uint64_t v14 = v11;
        uint64_t v13 = v28;
        if (v47 != 255)
        {
          sub_21F79BB10(v53, v54, v82, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B347C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B3460);
          __break(1u);
LABEL_97:
          int v48 = v14;
          if (v14 == 2)
          {
            uint64_t v12 = a4;
            __int16 v38 = a5;
            uint64_t v18 = v9;
LABEL_64:
            if ((v38 & 0xFF00) == 0x200 || v38 != 2) {
              uint64_t v12 = sub_21F785F78(MEMORY[0x263F8EE78], qword_26AD44148);
            }
            uint64_t v39 = swift_allocObject();
            *(void *)(v39 + 16) = sub_21F9E1C10;
            *(void *)(v39 + 24) = 0;
            a3 = sub_21F809858(MEMORY[0x263F8EE78], (uint64_t)sub_21F8100A8, v39);
            uint64_t result = swift_release();
            uint64_t v26 = 0;
            unint64_t v27 = 0x4000000000000100;
            goto LABEL_68;
          }
          uint64_t v18 = v9;
          if (v48 == 255)
          {
LABEL_63:
            uint64_t v13 = sub_21F7885E4(0, 0, &qword_267EEA598, (void (*)(uint64_t, uint64_t))sub_21F7642D0);
            uint64_t v12 = a4;
            __int16 v38 = a5;
            goto LABEL_64;
          }
          sub_21F79BB10(v53, v54, v82, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B347C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B3460);
          __break(1u);
LABEL_100:
          uint64_t v32 = 0;
LABEL_71:
          uint64_t v33 = 512;
LABEL_72:
          if ((a5 & 0xFF00) == 0x200 || (_BYTE)a5) {
            uint64_t v9 = sub_21F785F78(MEMORY[0x263F8EE78], &qword_26AD477B0);
          }
          uint64_t result = swift_release();
          uint64_t v26 = v33 | v32;
          int64x2_t v40 = vdupq_n_s64(0x100uLL);
          v40.i64[0] = v13;
          uint64_t v12 = v9;
          char v41 = v82;
          uint64_t v42 = v54;
          uint64_t v18 = v11;
          uint64_t v13 = v49;
          goto LABEL_76;
        }
LABEL_48:
        uint64_t v49 = sub_21F7885E4(0, 0, &qword_26AD45640, (void (*)(uint64_t, uint64_t))sub_21F7642FC);
        a3 = v12;
        uint64_t v9 = a4;
        if (v17 == 1) {
          goto LABEL_51;
        }
        goto LABEL_49;
      }
      uint64_t v14 = v11;
    }
    uint64_t v29 = *(void *)(a6 + 16);
    uint64_t v30 = v29 + 1;
    if (__OFADD__(v29, 1))
    {
LABEL_106:
      __break(1u);
      goto LABEL_107;
    }
    *(void *)(a6 + 16) = v30;
    uint64_t v56 = sub_21F76CA40(qword_26AD45650);
    uint64_t v57 = &off_26D1331C0;
    LOBYTE(v55) = 2;
    swift_beginAccess();
    sub_21F77E1A8((uint64_t)&v55, v30);
    uint64_t v12 = *(void *)(a6 + 16);
    if (__OFADD__(v12, 1))
    {
LABEL_109:
      __break(1u);
      goto LABEL_110;
    }
    *(void *)(a6 + 16) = v12 + 1;
    uint64_t v56 = sub_21F76CA40(&qword_26AD45648);
    uint64_t v57 = &off_26D1331C0;
    LOBYTE(v55) = 0;
    sub_21F77E1A8((uint64_t)&v55, v12 + 1);
    swift_endAccess();
    uint64_t v13 = *(void *)(a6 + 16);
    goto LABEL_48;
  }
  if (a3 != 1)
  {
    sub_21F76C9DC(v9, (uint64_t)&v67, &qword_26AD48BA0);
    LOBYTE(v17) = 2;
    if (v68 == 254)
    {
      uint64_t v18 = 0;
LABEL_60:
      uint64_t v34 = *(void *)(a6 + 16);
      uint64_t v35 = v34 + 1;
      if (__OFADD__(v34, 1))
      {
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
        goto LABEL_109;
      }
      *(void *)(a6 + 16) = v35;
      uint64_t v56 = sub_21F76CA40(qword_26AD45650);
      uint64_t v57 = &off_26D1331C0;
      LOBYTE(v55) = 2;
      swift_beginAccess();
      sub_21F77E1A8((uint64_t)&v55, v35);
      uint64_t v36 = *(void *)(a6 + 16);
      uint64_t v37 = v36 + 1;
      if (__OFADD__(v36, 1))
      {
LABEL_110:
        __break(1u);
        JUMPOUT(0x21F9E3644);
      }
      *(void *)(a6 + 16) = v37;
      uint64_t v56 = sub_21F76CA40(&qword_26AD45648);
      uint64_t v57 = &off_26D1331C0;
      LOBYTE(v55) = 0;
      sub_21F77E1A8((uint64_t)&v55, v37);
      swift_endAccess();
      uint64_t v11 = *(void *)(a6 + 16);
      goto LABEL_63;
    }
    if (v68 == 255) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = v67;
    }
    if (v68 == 255) {
      LOBYTE(v17) = 2;
    }
    else {
      LOBYTE(v17) = v68;
    }
    if ((~(_WORD)v14 & 0xFF00) == 0)
    {
      uint64_t v18 = v9;
      goto LABEL_60;
    }
    if (BYTE1(v14) != 3)
    {
      if (BYTE1(v14) == 2)
      {
        uint64_t result = swift_release();
        a3 = 0;
        uint64_t v26 = 0;
        uint64_t v13 = 0;
        int64x2_t v40 = (int64x2_t)xmmword_21FA33730;
        goto LABEL_86;
      }
      goto LABEL_87;
    }
    goto LABEL_97;
  }
  sub_21F76C9DC(v9, (uint64_t)&v65, &qword_26AD48BA0);
  LOBYTE(v17) = 2;
  if (v66 == 254)
  {
    uint64_t v18 = 0;
LABEL_29:
    uint64_t v19 = *(void *)(a6 + 16);
    uint64_t v20 = v19 + 1;
    if (!__OFADD__(v19, 1))
    {
      *(void *)(a6 + 16) = v20;
      uint64_t v56 = sub_21F76CA40(qword_26AD45650);
      uint64_t v57 = &off_26D1331C0;
      LOBYTE(v55) = 2;
      swift_beginAccess();
      sub_21F77E1A8((uint64_t)&v55, v20);
      uint64_t v21 = *(void *)(a6 + 16);
      uint64_t v22 = v21 + 1;
      if (!__OFADD__(v21, 1))
      {
        *(void *)(a6 + 16) = v22;
        uint64_t v56 = sub_21F76CA40(&qword_26AD45648);
        uint64_t v57 = &off_26D1331C0;
        LOBYTE(v55) = 0;
        sub_21F77E1A8((uint64_t)&v55, v22);
        swift_endAccess();
        uint64_t v11 = *(void *)(a6 + 16);
        goto LABEL_32;
      }
      goto LABEL_108;
    }
    __break(1u);
    goto LABEL_106;
  }
  if (v66 == 255) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v65;
  }
  if (v66 == 255) {
    LOBYTE(v17) = 2;
  }
  else {
    LOBYTE(v17) = v66;
  }
  if ((~(_WORD)v14 & 0xFF00) == 0)
  {
    uint64_t v18 = v9;
    goto LABEL_29;
  }
  if (BYTE1(v14) == 3)
  {
    int v45 = v14;
    if (v14 == 1)
    {
      uint64_t v12 = a4;
      __int16 v23 = a5;
      uint64_t v18 = v9;
LABEL_33:
      if ((v23 & 0xFF00) == 0x200 || v23 != 1) {
        uint64_t v12 = sub_21F785F78(MEMORY[0x263F8EE78], &qword_26AD477B0);
      }
      uint64_t v24 = swift_allocObject();
      *(void *)(v24 + 16) = sub_21F9E1C10;
      *(void *)(v24 + 24) = 0;
      a3 = sub_21F809858(MEMORY[0x263F8EE78], (uint64_t)sub_21F8100A8, v24);
      uint64_t result = swift_release();
      uint64_t v26 = 0;
      unint64_t v27 = 0x2000000000000100;
LABEL_68:
      int64x2_t v40 = vdupq_n_s64(v27);
      v40.i64[0] = v11;
      char v41 = v82;
      uint64_t v42 = v54;
LABEL_76:
      *(void *)a7 = v18;
      *(unsigned char *)(a7 + 8) = v17;
      *(void *)(a7 + 16) = v12;
      *(void *)(a7 + 24) = a3;
      *(void *)(a7 + 32) = v26;
      *(int64x2_t *)(a7 + 40) = v40;
      *(void *)(a7 + 56) = v13;
      *(void *)(a7 + 64) = v53;
      *(void *)(a7 + 72) = v42;
      *(unsigned char *)(a7 + 80) = v41;
      return result;
    }
    uint64_t v18 = v9;
    if (v45 == 255)
    {
LABEL_32:
      uint64_t v13 = sub_21F7885E4(0, 0, &qword_26AD45640, (void (*)(uint64_t, uint64_t))sub_21F7642FC);
      uint64_t v12 = a4;
      __int16 v23 = a5;
      goto LABEL_33;
    }
    sub_21F79BB10(v53, v54, v82, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B347C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B3460);
    __break(1u);
  }
  else if (BYTE1(v14) == 1)
  {
    uint64_t result = swift_release();
    a3 = 0;
    uint64_t v26 = 0;
    uint64_t v13 = 0;
    int64x2_t v40 = (int64x2_t)xmmword_21FA33740;
LABEL_86:
    char v41 = v82;
    uint64_t v42 = v54;
    uint64_t v18 = v9;
    goto LABEL_76;
  }
  sub_21FA26510();
  sub_21FA25D40();
  sub_21FA266A0();
  unint64_t v44 = 0xE000000000000000;
  sub_21F9E65DC();
  swift_allocError();
  *char v43 = 0;
LABEL_93:
  unsigned __int8 v46 = v82;
  v43[1] = v44;
  swift_willThrow();
  swift_release();
  return sub_21F79BB10(v53, v54, v46, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B347C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B3460);
}

uint64_t sub_21F9E3664@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int16 a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9 = a1;
  sub_21F76C9DC(a1, (uint64_t)v58, &qword_26AD48BA0);
  uint64_t v12 = v59;
  uint64_t v11 = v60;
  uint64_t v13 = v61;
  LOWORD(v14) = v62;
  sub_21F76C9DC(v9, (uint64_t)v69, &qword_26AD48BA0);
  if (BYTE8(v69[0]) == 254
    || (long long v73 = v69[2],
        long long v74 = v69[3],
        char v75 = v70,
        long long v71 = v69[0],
        long long v72 = v69[1],
        sub_21F76C9DC((uint64_t)&v74, (uint64_t)v76, &qword_26AD46C30),
        sub_21F76C9DC((uint64_t)v76, (uint64_t)v77, &qword_26AD46C30),
        v77[16] == 255))
  {
    uint64_t v82 = 32;
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = sub_21F9E1C18;
    *(void *)(v15 + 24) = 0;
    uint64_t v53 = sub_21F809B18(MEMORY[0x263F8EE78], (uint64_t)sub_21F9E668C, v15);
    uint64_t v54 = 0;
  }
  else
  {
    sub_21F9E6630((uint64_t)v77, (uint64_t)v78);
    sub_21F9E6630((uint64_t)v78, (uint64_t)&v79);
    switch(v81)
    {
      case 1:
        uint64_t v54 = 0;
        uint64_t v16 = 33;
        goto LABEL_12;
      case 2:
        uint64_t v54 = 0;
        uint64_t v16 = 65;
        goto LABEL_12;
      case 3:
        uint64_t v54 = 0;
        uint64_t v16 = 97;
        goto LABEL_12;
      case 4:
        uint64_t v54 = 0;
        uint64_t v16 = 129;
        goto LABEL_12;
      case 5:
        uint64_t v54 = 0;
        uint64_t v16 = 161;
        goto LABEL_12;
      case 6:
        uint64_t v54 = 0;
        uint64_t v16 = 193;
LABEL_12:
        uint64_t v82 = v16;
        uint64_t v53 = v79;
        break;
      case 7:
        uint64_t v53 = v79;
        uint64_t v54 = v80;
        uint64_t v82 = 224;
        break;
      default:
        uint64_t v82 = 0;
        uint64_t v53 = v79;
        uint64_t v54 = v80;
        break;
    }
  }
  if (!(_BYTE)a3)
  {
    sub_21F76C9DC(v9, (uint64_t)&v63, &qword_26AD48BA0);
    int v17 = 2;
    if (v64 == 254)
    {
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v28 = v11;
      if (v64 == 255) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = v63;
      }
      if (v64 == 255) {
        int v17 = 2;
      }
      else {
        int v17 = v64;
      }
      if ((~(_WORD)v14 & 0xFF00) != 0)
      {
        if (BYTE1(v14) != 3)
        {
          if (!BYTE1(v14))
          {
            uint64_t result = swift_release();
            a3 = 0;
            uint64_t v26 = 0;
            uint64_t v13 = 0;
            int64x2_t v40 = (int64x2_t)xmmword_21FA33750;
            char v41 = v82;
            uint64_t v42 = v54;
            uint64_t v18 = v11;
            goto LABEL_76;
          }
LABEL_87:
          sub_21F9E65DC();
          swift_allocError();
          *char v43 = 0xD00000000000003BLL;
          unint64_t v44 = 0x800000021FA5FFF0;
          goto LABEL_93;
        }
        int v47 = v14;
        if (!(_BYTE)v14)
        {
          uint64_t v49 = v13;
          a3 = v12;
          uint64_t v9 = a4;
          uint64_t v14 = v11;
          uint64_t v13 = v28;
          if (v17 == 1) {
            goto LABEL_51;
          }
LABEL_49:
          if (v17 != 2 || v14 != 2)
          {
            uint64_t v11 = v14;
            if (a2 <= 7u)
            {
              uint64_t v32 = 1;
              if (((1 << a2) & 0xC3) != 0) {
                goto LABEL_71;
              }
            }
            goto LABEL_100;
          }
LABEL_51:
          uint64_t v11 = v14;
          uint64_t v31 = swift_allocObject();
          *(void *)(v31 + 16) = sub_21F9E1C10;
          *(void *)(v31 + 24) = 0;
          a3 = sub_21F809858(MEMORY[0x263F8EE78], (uint64_t)sub_21F8100A8, v31);
          uint64_t v32 = 0;
          uint64_t v33 = 0;
          goto LABEL_72;
        }
        uint64_t v14 = v11;
        uint64_t v13 = v28;
        if (v47 != 255)
        {
          sub_21F79BB10(v53, v54, v82, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B347C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B3460);
          __break(1u);
LABEL_97:
          int v48 = v14;
          if (v14 == 2)
          {
            uint64_t v12 = a4;
            __int16 v38 = a5;
            uint64_t v18 = v9;
LABEL_64:
            if ((v38 & 0xFF00) == 0x200 || v38 != 2) {
              uint64_t v12 = sub_21F785F78(MEMORY[0x263F8EE78], qword_26AD44148);
            }
            uint64_t v39 = swift_allocObject();
            *(void *)(v39 + 16) = sub_21F9E1C10;
            *(void *)(v39 + 24) = 0;
            a3 = sub_21F809858(MEMORY[0x263F8EE78], (uint64_t)sub_21F8100A8, v39);
            uint64_t result = swift_release();
            uint64_t v26 = 0;
            unint64_t v27 = 0x4000000000000100;
            goto LABEL_68;
          }
          uint64_t v18 = v9;
          if (v48 == 255)
          {
LABEL_63:
            uint64_t v13 = sub_21F7885E4(0, 0, &qword_267EEA598, (void (*)(uint64_t, uint64_t))sub_21F7642D0);
            uint64_t v12 = a4;
            __int16 v38 = a5;
            goto LABEL_64;
          }
          sub_21F79BB10(v53, v54, v82, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B347C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B3460);
          __break(1u);
LABEL_100:
          uint64_t v32 = 0;
LABEL_71:
          uint64_t v33 = 512;
LABEL_72:
          if ((a5 & 0xFF00) == 0x200 || (_BYTE)a5) {
            uint64_t v9 = sub_21F785F78(MEMORY[0x263F8EE78], &qword_26AD477B0);
          }
          uint64_t result = swift_release();
          uint64_t v26 = v33 | v32;
          int64x2_t v40 = vdupq_n_s64(0x100uLL);
          v40.i64[0] = v13;
          uint64_t v12 = v9;
          char v41 = v82;
          uint64_t v42 = v54;
          uint64_t v18 = v11;
          uint64_t v13 = v49;
          goto LABEL_76;
        }
LABEL_48:
        uint64_t v49 = sub_21F7885E4(0, 0, &qword_26AD45640, (void (*)(uint64_t, uint64_t))sub_21F7642FC);
        a3 = v12;
        uint64_t v9 = a4;
        if (v17 == 1) {
          goto LABEL_51;
        }
        goto LABEL_49;
      }
      uint64_t v14 = v11;
    }
    uint64_t v29 = *(void *)(a6 + 16);
    uint64_t v30 = v29 + 1;
    if (__OFADD__(v29, 1))
    {
LABEL_106:
      __break(1u);
      goto LABEL_107;
    }
    *(void *)(a6 + 16) = v30;
    uint64_t v56 = sub_21F76CA40(qword_26AD45650);
    uint64_t v57 = &off_26D1331C0;
    LOBYTE(v55) = 2;
    swift_beginAccess();
    sub_21F77E1A8((uint64_t)&v55, v30);
    uint64_t v12 = *(void *)(a6 + 16);
    if (__OFADD__(v12, 1))
    {
LABEL_109:
      __break(1u);
      goto LABEL_110;
    }
    *(void *)(a6 + 16) = v12 + 1;
    uint64_t v56 = sub_21F76CA40(&qword_26AD45648);
    uint64_t v57 = &off_26D1331C0;
    LOBYTE(v55) = 0;
    sub_21F77E1A8((uint64_t)&v55, v12 + 1);
    swift_endAccess();
    uint64_t v13 = *(void *)(a6 + 16);
    goto LABEL_48;
  }
  if (a3 != 1)
  {
    sub_21F76C9DC(v9, (uint64_t)&v67, &qword_26AD48BA0);
    LOBYTE(v17) = 2;
    if (v68 == 254)
    {
      uint64_t v18 = 0;
LABEL_60:
      uint64_t v34 = *(void *)(a6 + 16);
      uint64_t v35 = v34 + 1;
      if (__OFADD__(v34, 1))
      {
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
        goto LABEL_109;
      }
      *(void *)(a6 + 16) = v35;
      uint64_t v56 = sub_21F76CA40(qword_26AD45650);
      uint64_t v57 = &off_26D1331C0;
      LOBYTE(v55) = 2;
      swift_beginAccess();
      sub_21F77E1A8((uint64_t)&v55, v35);
      uint64_t v36 = *(void *)(a6 + 16);
      uint64_t v37 = v36 + 1;
      if (__OFADD__(v36, 1))
      {
LABEL_110:
        __break(1u);
        JUMPOUT(0x21F9E4154);
      }
      *(void *)(a6 + 16) = v37;
      uint64_t v56 = sub_21F76CA40(&qword_26AD45648);
      uint64_t v57 = &off_26D1331C0;
      LOBYTE(v55) = 0;
      sub_21F77E1A8((uint64_t)&v55, v37);
      swift_endAccess();
      uint64_t v11 = *(void *)(a6 + 16);
      goto LABEL_63;
    }
    if (v68 == 255) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = v67;
    }
    if (v68 == 255) {
      LOBYTE(v17) = 2;
    }
    else {
      LOBYTE(v17) = v68;
    }
    if ((~(_WORD)v14 & 0xFF00) == 0)
    {
      uint64_t v18 = v9;
      goto LABEL_60;
    }
    if (BYTE1(v14) != 3)
    {
      if (BYTE1(v14) == 2)
      {
        uint64_t result = swift_release();
        a3 = 0;
        uint64_t v26 = 0;
        uint64_t v13 = 0;
        int64x2_t v40 = (int64x2_t)xmmword_21FA33730;
        goto LABEL_86;
      }
      goto LABEL_87;
    }
    goto LABEL_97;
  }
  sub_21F76C9DC(v9, (uint64_t)&v65, &qword_26AD48BA0);
  LOBYTE(v17) = 2;
  if (v66 == 254)
  {
    uint64_t v18 = 0;
LABEL_29:
    uint64_t v19 = *(void *)(a6 + 16);
    uint64_t v20 = v19 + 1;
    if (!__OFADD__(v19, 1))
    {
      *(void *)(a6 + 16) = v20;
      uint64_t v56 = sub_21F76CA40(qword_26AD45650);
      uint64_t v57 = &off_26D1331C0;
      LOBYTE(v55) = 2;
      swift_beginAccess();
      sub_21F77E1A8((uint64_t)&v55, v20);
      uint64_t v21 = *(void *)(a6 + 16);
      uint64_t v22 = v21 + 1;
      if (!__OFADD__(v21, 1))
      {
        *(void *)(a6 + 16) = v22;
        uint64_t v56 = sub_21F76CA40(&qword_26AD45648);
        uint64_t v57 = &off_26D1331C0;
        LOBYTE(v55) = 0;
        sub_21F77E1A8((uint64_t)&v55, v22);
        swift_endAccess();
        uint64_t v11 = *(void *)(a6 + 16);
        goto LABEL_32;
      }
      goto LABEL_108;
    }
    __break(1u);
    goto LABEL_106;
  }
  if (v66 == 255) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v65;
  }
  if (v66 == 255) {
    LOBYTE(v17) = 2;
  }
  else {
    LOBYTE(v17) = v66;
  }
  if ((~(_WORD)v14 & 0xFF00) == 0)
  {
    uint64_t v18 = v9;
    goto LABEL_29;
  }
  if (BYTE1(v14) == 3)
  {
    int v45 = v14;
    if (v14 == 1)
    {
      uint64_t v12 = a4;
      __int16 v23 = a5;
      uint64_t v18 = v9;
LABEL_33:
      if ((v23 & 0xFF00) == 0x200 || v23 != 1) {
        uint64_t v12 = sub_21F785F78(MEMORY[0x263F8EE78], &qword_26AD477B0);
      }
      uint64_t v24 = swift_allocObject();
      *(void *)(v24 + 16) = sub_21F9E1C10;
      *(void *)(v24 + 24) = 0;
      a3 = sub_21F809858(MEMORY[0x263F8EE78], (uint64_t)sub_21F8100A8, v24);
      uint64_t result = swift_release();
      uint64_t v26 = 0;
      unint64_t v27 = 0x2000000000000100;
LABEL_68:
      int64x2_t v40 = vdupq_n_s64(v27);
      v40.i64[0] = v11;
      char v41 = v82;
      uint64_t v42 = v54;
LABEL_76:
      *(void *)a7 = v18;
      *(unsigned char *)(a7 + 8) = v17;
      *(void *)(a7 + 16) = v12;
      *(void *)(a7 + 24) = a3;
      *(void *)(a7 + 32) = v26;
      *(int64x2_t *)(a7 + 40) = v40;
      *(void *)(a7 + 56) = v13;
      *(void *)(a7 + 64) = v53;
      *(void *)(a7 + 72) = v42;
      *(unsigned char *)(a7 + 80) = v41;
      return result;
    }
    uint64_t v18 = v9;
    if (v45 == 255)
    {
LABEL_32:
      uint64_t v13 = sub_21F7885E4(0, 0, &qword_26AD45640, (void (*)(uint64_t, uint64_t))sub_21F7642FC);
      uint64_t v12 = a4;
      __int16 v23 = a5;
      goto LABEL_33;
    }
    sub_21F79BB10(v53, v54, v82, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B347C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B3460);
    __break(1u);
  }
  else if (BYTE1(v14) == 1)
  {
    uint64_t result = swift_release();
    a3 = 0;
    uint64_t v26 = 0;
    uint64_t v13 = 0;
    int64x2_t v40 = (int64x2_t)xmmword_21FA33740;
LABEL_86:
    char v41 = v82;
    uint64_t v42 = v54;
    uint64_t v18 = v9;
    goto LABEL_76;
  }
  sub_21FA26510();
  sub_21FA25D40();
  sub_21FA266A0();
  unint64_t v44 = 0xE000000000000000;
  sub_21F9E65DC();
  swift_allocError();
  *char v43 = 0;
LABEL_93:
  unsigned __int8 v46 = v82;
  v43[1] = v44;
  swift_willThrow();
  swift_release();
  return sub_21F79BB10(v53, v54, v46, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B347C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B3460);
}

uint64_t sub_21F9E4174@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  int v82 = a5;
  sub_21F76C9DC(a1, (uint64_t)v58, &qword_26AD48BA0);
  uint64_t v14 = v59;
  uint64_t v13 = v60;
  LOWORD(v15) = v62;
  uint64_t v51 = v61;
  sub_21F76C9DC(a1, (uint64_t)v69, &qword_26AD48BA0);
  if (BYTE8(v69[0]) == 254
    || (long long v73 = v69[2],
        long long v74 = v69[3],
        char v75 = v70,
        long long v71 = v69[0],
        long long v72 = v69[1],
        sub_21F76C9DC((uint64_t)&v74, (uint64_t)v76, &qword_26AD46C30),
        sub_21F76C9DC((uint64_t)v76, (uint64_t)v77, &qword_26AD46C30),
        v77[16] == 255))
  {
    uint64_t v53 = sub_21F9E1C84(a7);
    uint64_t v54 = v16;
    int v83 = v17;
  }
  else
  {
    sub_21F9E6630((uint64_t)v77, (uint64_t)v78);
    sub_21F9E6630((uint64_t)v78, (uint64_t)&v79);
    switch(v81)
    {
      case 1:
        uint64_t v54 = 0;
        int v18 = 33;
        goto LABEL_12;
      case 2:
        uint64_t v54 = 0;
        int v18 = 65;
        goto LABEL_12;
      case 3:
        uint64_t v54 = 0;
        int v18 = 97;
        goto LABEL_12;
      case 4:
        uint64_t v54 = 0;
        int v18 = 129;
        goto LABEL_12;
      case 5:
        uint64_t v54 = 0;
        int v18 = 161;
        goto LABEL_12;
      case 6:
        uint64_t v54 = 0;
        int v18 = 193;
LABEL_12:
        int v83 = v18;
        uint64_t v53 = v79;
        break;
      case 7:
        uint64_t v53 = v79;
        uint64_t v54 = v80;
        int v83 = 224;
        break;
      default:
        int v83 = 0;
        uint64_t v53 = v79;
        uint64_t v54 = v80;
        break;
    }
  }
  if (!(_BYTE)a3)
  {
    sub_21F76C9DC(a1, (uint64_t)&v63, &qword_26AD48BA0);
    int v19 = 2;
    if (v64 == 254)
    {
      uint64_t v15 = 0;
    }
    else
    {
      if (v64 == 255) {
        uint64_t v21 = 0;
      }
      else {
        uint64_t v21 = v63;
      }
      if (v64 == 255) {
        int v19 = 2;
      }
      else {
        int v19 = v64;
      }
      if ((~(_WORD)v15 & 0xFF00) != 0)
      {
        if (BYTE1(v15) != 3)
        {
          if (!BYTE1(v15))
          {
            uint64_t result = swift_release();
            a3 = 0;
            uint64_t v30 = 0;
            int64x2_t v44 = (int64x2_t)xmmword_21FA33750;
            goto LABEL_86;
          }
          goto LABEL_88;
        }
        int v48 = v15;
        if (!(_BYTE)v15)
        {
          a3 = v14;
          uint64_t v34 = v51;
          uint64_t v14 = a4;
          uint64_t v15 = v21;
          goto LABEL_49;
        }
        uint64_t v15 = v21;
        if (v48 != 255)
        {
          sub_21F79BB10(v53, v54, v83, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B347C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B3460);
          __break(1u);
LABEL_98:
          int v49 = v15;
          if (v15 == 2)
          {
            __int16 v42 = v82;
            uint64_t v20 = v21;
            uint64_t v26 = v51;
            uint64_t v14 = a4;
LABEL_65:
            if ((v42 & 0xFF00) == 0x200 || v42 != 2) {
              uint64_t v14 = sub_21F785F78(MEMORY[0x263F8EE78], qword_26AD44148);
            }
            uint64_t v43 = swift_allocObject();
            *(void *)(v43 + 16) = sub_21F9E1C10;
            *(void *)(v43 + 24) = 0;
            a3 = sub_21F809858(MEMORY[0x263F8EE78], (uint64_t)sub_21F8100A8, v43);
            uint64_t result = swift_release();
            uint64_t v30 = 0;
            unint64_t v31 = 0x4000000000000100;
            goto LABEL_69;
          }
          uint64_t v20 = v21;
          if (v49 == 255)
          {
LABEL_64:
            uint64_t v26 = sub_21F7885E4(0, 0, &qword_267EEA598, (void (*)(uint64_t, uint64_t))sub_21F7642D0);
            uint64_t v14 = a4;
            __int16 v42 = v82;
            goto LABEL_65;
          }
          sub_21F79BB10(v53, v54, v83, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B347C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B3460);
          __break(1u);
          goto LABEL_101;
        }
LABEL_48:
        uint64_t v34 = sub_21F7885E4(0, 0, &qword_26AD45640, (void (*)(uint64_t, uint64_t))sub_21F7642FC);
        a3 = v14;
        uint64_t v14 = a4;
LABEL_49:
        uint64_t v51 = v34;
        a4 = v13;
        if (v19 == 1 || v19 == 2 && v15 == 2)
        {
          uint64_t v13 = v15;
          uint64_t v35 = swift_allocObject();
          *(void *)(v35 + 16) = sub_21F9E1C10;
          *(void *)(v35 + 24) = 0;
          a3 = sub_21F809858(MEMORY[0x263F8EE78], (uint64_t)sub_21F8100A8, v35);
          uint64_t v36 = 0;
          uint64_t v37 = 0;
          goto LABEL_73;
        }
        uint64_t v13 = v15;
        if (a2 <= 7u)
        {
          uint64_t v36 = 1;
          if (((1 << a2) & 0xC3) != 0)
          {
LABEL_72:
            uint64_t v37 = 512;
LABEL_73:
            if ((v82 & 0xFF00) == 0x200 || (_BYTE)v82) {
              uint64_t v14 = sub_21F785F78(MEMORY[0x263F8EE78], &qword_26AD477B0);
            }
            uint64_t result = swift_release();
            uint64_t v30 = v37 | v36;
            int64x2_t v44 = vdupq_n_s64(0x100uLL);
            uint64_t v26 = v51;
            v44.i64[0] = a4;
            uint64_t v20 = v13;
            goto LABEL_87;
          }
        }
LABEL_101:
        uint64_t v36 = 0;
        goto LABEL_72;
      }
      uint64_t v15 = v21;
    }
    uint64_t v32 = *(void *)(a6 + 16);
    uint64_t v33 = v32 + 1;
    if (__OFADD__(v32, 1))
    {
LABEL_106:
      __break(1u);
      goto LABEL_107;
    }
    *(void *)(a6 + 16) = v33;
    uint64_t v56 = sub_21F76CA40(qword_26AD45650);
    uint64_t v57 = &off_26D1331C0;
    LOBYTE(v55) = 2;
    swift_beginAccess();
    sub_21F77E1A8((uint64_t)&v55, v33);
    uint64_t v14 = *(void *)(a6 + 16);
    if (__OFADD__(v14, 1))
    {
LABEL_109:
      __break(1u);
      goto LABEL_110;
    }
    *(void *)(a6 + 16) = v14 + 1;
    uint64_t v56 = sub_21F76CA40(&qword_26AD45648);
    uint64_t v57 = &off_26D1331C0;
    LOBYTE(v55) = 0;
    sub_21F77E1A8((uint64_t)&v55, v14 + 1);
    swift_endAccess();
    uint64_t v13 = *(void *)(a6 + 16);
    goto LABEL_48;
  }
  if (a3 != 1)
  {
    sub_21F76C9DC(a1, (uint64_t)&v67, &qword_26AD48BA0);
    LOBYTE(v19) = 2;
    if (v68 == 254)
    {
      uint64_t v20 = 0;
LABEL_61:
      uint64_t v38 = *(void *)(a6 + 16);
      uint64_t v39 = v38 + 1;
      if (__OFADD__(v38, 1))
      {
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
        goto LABEL_109;
      }
      *(void *)(a6 + 16) = v39;
      uint64_t v56 = sub_21F76CA40(qword_26AD45650);
      uint64_t v57 = &off_26D1331C0;
      LOBYTE(v55) = 2;
      swift_beginAccess();
      sub_21F77E1A8((uint64_t)&v55, v39);
      uint64_t v40 = *(void *)(a6 + 16);
      uint64_t v41 = v40 + 1;
      if (__OFADD__(v40, 1))
      {
LABEL_110:
        __break(1u);
        JUMPOUT(0x21F9E4BECLL);
      }
      *(void *)(a6 + 16) = v41;
      uint64_t v56 = sub_21F76CA40(&qword_26AD45648);
      uint64_t v57 = &off_26D1331C0;
      LOBYTE(v55) = 0;
      sub_21F77E1A8((uint64_t)&v55, v41);
      swift_endAccess();
      uint64_t v13 = *(void *)(a6 + 16);
      goto LABEL_64;
    }
    if (v68 == 255) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = v67;
    }
    if (v68 == 255) {
      LOBYTE(v19) = 2;
    }
    else {
      LOBYTE(v19) = v68;
    }
    if ((~(_WORD)v15 & 0xFF00) == 0)
    {
      uint64_t v20 = v21;
      goto LABEL_61;
    }
    if (BYTE1(v15) != 3)
    {
      if (BYTE1(v15) == 2)
      {
        uint64_t result = swift_release();
        a3 = 0;
        uint64_t v30 = 0;
        int64x2_t v44 = (int64x2_t)xmmword_21FA33730;
        goto LABEL_86;
      }
LABEL_88:
      sub_21F9E65DC();
      swift_allocError();
      *int v45 = 0xD00000000000003BLL;
      unint64_t v46 = 0x800000021FA5FFF0;
      goto LABEL_94;
    }
    goto LABEL_98;
  }
  sub_21F76C9DC(a1, (uint64_t)&v65, &qword_26AD48BA0);
  LOBYTE(v19) = 2;
  if (v66 == 254)
  {
    uint64_t v20 = 0;
LABEL_29:
    uint64_t v22 = *(void *)(a6 + 16);
    uint64_t v23 = v22 + 1;
    if (!__OFADD__(v22, 1))
    {
      *(void *)(a6 + 16) = v23;
      uint64_t v56 = sub_21F76CA40(qword_26AD45650);
      uint64_t v57 = &off_26D1331C0;
      LOBYTE(v55) = 2;
      swift_beginAccess();
      sub_21F77E1A8((uint64_t)&v55, v23);
      uint64_t v24 = *(void *)(a6 + 16);
      uint64_t v25 = v24 + 1;
      if (!__OFADD__(v24, 1))
      {
        *(void *)(a6 + 16) = v25;
        uint64_t v56 = sub_21F76CA40(&qword_26AD45648);
        uint64_t v57 = &off_26D1331C0;
        LOBYTE(v55) = 0;
        sub_21F77E1A8((uint64_t)&v55, v25);
        swift_endAccess();
        uint64_t v13 = *(void *)(a6 + 16);
        goto LABEL_32;
      }
      goto LABEL_108;
    }
    __break(1u);
    goto LABEL_106;
  }
  if (v66 == 255) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = v65;
  }
  if (v66 == 255) {
    LOBYTE(v19) = 2;
  }
  else {
    LOBYTE(v19) = v66;
  }
  if ((~(_WORD)v15 & 0xFF00) == 0)
  {
    uint64_t v20 = v21;
    goto LABEL_29;
  }
  if (BYTE1(v15) == 3)
  {
    int v47 = v15;
    if (v15 == 1)
    {
      __int16 v27 = v82;
      uint64_t v20 = v21;
      uint64_t v26 = v51;
      uint64_t v14 = a4;
LABEL_33:
      if ((v27 & 0xFF00) == 0x200 || v27 != 1) {
        uint64_t v14 = sub_21F785F78(MEMORY[0x263F8EE78], &qword_26AD477B0);
      }
      uint64_t v28 = swift_allocObject();
      *(void *)(v28 + 16) = sub_21F9E1C10;
      *(void *)(v28 + 24) = 0;
      a3 = sub_21F809858(MEMORY[0x263F8EE78], (uint64_t)sub_21F8100A8, v28);
      uint64_t result = swift_release();
      uint64_t v30 = 0;
      unint64_t v31 = 0x2000000000000100;
LABEL_69:
      int64x2_t v44 = vdupq_n_s64(v31);
      v44.i64[0] = v13;
LABEL_87:
      *(void *)a8 = v20;
      *(unsigned char *)(a8 + 8) = v19;
      *(void *)(a8 + 16) = v14;
      *(void *)(a8 + 24) = a3;
      *(void *)(a8 + 32) = v30;
      *(int64x2_t *)(a8 + 40) = v44;
      *(void *)(a8 + 56) = v26;
      *(void *)(a8 + 64) = v53;
      *(void *)(a8 + 72) = v54;
      *(unsigned char *)(a8 + 80) = v83;
      return result;
    }
    uint64_t v20 = v21;
    if (v47 == 255)
    {
LABEL_32:
      uint64_t v26 = sub_21F7885E4(0, 0, &qword_26AD45640, (void (*)(uint64_t, uint64_t))sub_21F7642FC);
      uint64_t v14 = a4;
      __int16 v27 = v82;
      goto LABEL_33;
    }
    sub_21F79BB10(v53, v54, v83, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B347C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B3460);
    __break(1u);
  }
  else if (BYTE1(v15) == 1)
  {
    uint64_t result = swift_release();
    a3 = 0;
    uint64_t v30 = 0;
    int64x2_t v44 = (int64x2_t)xmmword_21FA33740;
LABEL_86:
    uint64_t v20 = v21;
    uint64_t v26 = 0;
    goto LABEL_87;
  }
  sub_21FA26510();
  sub_21FA25D40();
  sub_21FA266A0();
  unint64_t v46 = 0xE000000000000000;
  sub_21F9E65DC();
  swift_allocError();
  *int v45 = 0;
LABEL_94:
  v45[1] = v46;
  swift_willThrow();
  swift_release();
  return sub_21F79BB10(v53, v54, v83, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B347C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B3460);
}

uint64_t sub_21F9E4C0C@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int16 a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13 = a1;
  sub_21F76C9DC(a1, (uint64_t)v59, &qword_26AD48BA0);
  uint64_t v15 = v60;
  uint64_t v83 = v61;
  __int16 v16 = v63;
  uint64_t v49 = v62;
  sub_21F76C9DC(v13, (uint64_t)v70, &qword_26AD48BA0);
  if (BYTE8(v70[0]) == 254
    || (long long v74 = v70[2],
        long long v75 = v70[3],
        char v76 = v71,
        long long v72 = v70[0],
        long long v73 = v70[1],
        sub_21F76C9DC((uint64_t)&v75, (uint64_t)v77, &qword_26AD46C30),
        sub_21F76C9DC((uint64_t)v77, (uint64_t)v78, &qword_26AD46C30),
        v78[16] == 255))
  {
    uint64_t v55 = sub_21F9E1EEC(a7, a8);
    uint64_t v53 = v17;
    unsigned __int8 v54 = v18;
  }
  else
  {
    sub_21F9E6630((uint64_t)v78, (uint64_t)v79);
    sub_21F9E6630((uint64_t)v79, (uint64_t)&v80);
    switch(v82)
    {
      case 1:
        uint64_t v53 = 0;
        char v19 = 33;
        goto LABEL_12;
      case 2:
        uint64_t v53 = 0;
        char v19 = 65;
        goto LABEL_12;
      case 3:
        uint64_t v53 = 0;
        char v19 = 97;
        goto LABEL_12;
      case 4:
        uint64_t v53 = 0;
        char v19 = -127;
        goto LABEL_12;
      case 5:
        uint64_t v53 = 0;
        char v19 = -95;
        goto LABEL_12;
      case 6:
        uint64_t v53 = 0;
        char v19 = -63;
LABEL_12:
        unsigned __int8 v54 = v19;
        uint64_t v55 = v80;
        break;
      case 7:
        uint64_t v55 = v80;
        uint64_t v53 = v81;
        unsigned __int8 v54 = -32;
        break;
      default:
        unsigned __int8 v54 = 0;
        uint64_t v55 = v80;
        uint64_t v53 = v81;
        break;
    }
  }
  if (!(_BYTE)a3)
  {
    sub_21F76C9DC(v13, (uint64_t)&v64, &qword_26AD48BA0);
    int v20 = 2;
    if (v65 == 254)
    {
      uint64_t v21 = 0;
    }
    else
    {
      if (v65 == 255) {
        uint64_t v21 = 0;
      }
      else {
        uint64_t v21 = v64;
      }
      if (v65 == 255) {
        int v20 = 2;
      }
      else {
        int v20 = v65;
      }
      if ((~v16 & 0xFF00) != 0)
      {
        if (HIBYTE(v16) != 3)
        {
          if (!HIBYTE(v16))
          {
            uint64_t result = swift_release();
            a3 = 0;
            uint64_t v31 = 0;
            uint64_t v13 = 0;
            int64x2_t v44 = (int64x2_t)xmmword_21FA33750;
            goto LABEL_73;
          }
          goto LABEL_84;
        }
        if (!(_BYTE)v16)
        {
          a3 = v15;
          uint64_t v15 = a4;
          uint64_t v13 = v49;
          if (v20 == 1) {
            goto LABEL_49;
          }
LABEL_47:
          if (v20 != 2 || v21 != 2)
          {
            if (a2 <= 7u)
            {
              uint64_t v36 = 1;
              if (((1 << a2) & 0xC3) != 0) {
                goto LABEL_68;
              }
            }
            goto LABEL_97;
          }
LABEL_49:
          uint64_t v35 = swift_allocObject();
          *(void *)(v35 + 16) = sub_21F9E1C10;
          *(void *)(v35 + 24) = 0;
          a3 = sub_21F809858(MEMORY[0x263F8EE78], (uint64_t)sub_21F8100A8, v35);
          uint64_t v36 = 0;
          uint64_t v37 = 0;
          goto LABEL_69;
        }
        if (v16 != 255)
        {
          sub_21F79BB10(v55, v53, v54, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B347C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B3460);
          __break(1u);
LABEL_94:
          int v48 = v16;
          if (v16 == 2)
          {
            unsigned __int8 v26 = v54;
            uint64_t v27 = v53;
            uint64_t v15 = a4;
            __int16 v42 = a5;
            uint64_t v13 = v49;
LABEL_61:
            if ((v42 & 0xFF00) == 0x200 || v42 != 2) {
              uint64_t v15 = sub_21F785F78(MEMORY[0x263F8EE78], qword_26AD44148);
            }
            uint64_t v43 = swift_allocObject();
            *(void *)(v43 + 16) = sub_21F9E1C10;
            *(void *)(v43 + 24) = 0;
            a3 = sub_21F809858(MEMORY[0x263F8EE78], (uint64_t)sub_21F8100A8, v43);
            uint64_t result = swift_release();
            uint64_t v31 = 0;
            unint64_t v32 = 0x4000000000000100;
            goto LABEL_65;
          }
          unsigned __int8 v26 = v54;
          uint64_t v27 = v53;
          if (v48 == 255)
          {
LABEL_60:
            uint64_t v13 = sub_21F7885E4(0, 0, &qword_267EEA598, (void (*)(uint64_t, uint64_t))sub_21F7642D0);
            uint64_t v15 = a4;
            __int16 v42 = a5;
            goto LABEL_61;
          }
          sub_21F79BB10(v55, v53, v54, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B347C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B3460);
          __break(1u);
LABEL_97:
          uint64_t v36 = 0;
LABEL_68:
          uint64_t v37 = 512;
LABEL_69:
          if ((a5 & 0xFF00) == 0x200 || (_BYTE)a5) {
            uint64_t v15 = sub_21F785F78(MEMORY[0x263F8EE78], &qword_26AD477B0);
          }
          uint64_t result = swift_release();
          uint64_t v31 = v37 | v36;
          int64x2_t v44 = vdupq_n_s64(0x100uLL);
          v44.i64[0] = v83;
          goto LABEL_73;
        }
LABEL_46:
        uint64_t v13 = sub_21F7885E4(0, 0, &qword_26AD45640, (void (*)(uint64_t, uint64_t))sub_21F7642FC);
        a3 = v15;
        uint64_t v15 = a4;
        if (v20 == 1) {
          goto LABEL_49;
        }
        goto LABEL_47;
      }
    }
    uint64_t v33 = *(void *)(a6 + 16);
    uint64_t v34 = v33 + 1;
    if (__OFADD__(v33, 1))
    {
LABEL_103:
      __break(1u);
      goto LABEL_104;
    }
    *(void *)(a6 + 16) = v34;
    uint64_t v57 = sub_21F76CA40(qword_26AD45650);
    uint64_t v58 = &off_26D1331C0;
    LOBYTE(v56) = 2;
    swift_beginAccess();
    sub_21F77E1A8((uint64_t)&v56, v34);
    uint64_t v15 = *(void *)(a6 + 16);
    if (__OFADD__(v15, 1))
    {
LABEL_106:
      __break(1u);
      goto LABEL_107;
    }
    *(void *)(a6 + 16) = v15 + 1;
    uint64_t v57 = sub_21F76CA40(&qword_26AD45648);
    uint64_t v58 = &off_26D1331C0;
    LOBYTE(v56) = 0;
    sub_21F77E1A8((uint64_t)&v56, v15 + 1);
    swift_endAccess();
    uint64_t v83 = *(void *)(a6 + 16);
    goto LABEL_46;
  }
  if (a3 != 1)
  {
    sub_21F76C9DC(v13, (uint64_t)&v68, &qword_26AD48BA0);
    LOBYTE(v20) = 2;
    if (v69 == 254)
    {
      uint64_t v21 = 0;
LABEL_57:
      uint64_t v38 = *(void *)(a6 + 16);
      uint64_t v39 = v38 + 1;
      if (__OFADD__(v38, 1))
      {
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
        goto LABEL_106;
      }
      *(void *)(a6 + 16) = v39;
      uint64_t v57 = sub_21F76CA40(qword_26AD45650);
      uint64_t v58 = &off_26D1331C0;
      LOBYTE(v56) = 2;
      swift_beginAccess();
      sub_21F77E1A8((uint64_t)&v56, v39);
      uint64_t v40 = *(void *)(a6 + 16);
      uint64_t v41 = v40 + 1;
      if (__OFADD__(v40, 1))
      {
LABEL_107:
        __break(1u);
        JUMPOUT(0x21F9E56DCLL);
      }
      *(void *)(a6 + 16) = v41;
      uint64_t v57 = sub_21F76CA40(&qword_26AD45648);
      uint64_t v58 = &off_26D1331C0;
      LOBYTE(v56) = 0;
      sub_21F77E1A8((uint64_t)&v56, v41);
      swift_endAccess();
      uint64_t v83 = *(void *)(a6 + 16);
      unsigned __int8 v26 = v54;
      uint64_t v27 = v53;
      goto LABEL_60;
    }
    if (v69 == 255) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = v68;
    }
    if (v69 == 255) {
      LOBYTE(v20) = 2;
    }
    else {
      LOBYTE(v20) = v69;
    }
    if ((~v16 & 0xFF00) == 0) {
      goto LABEL_57;
    }
    if (HIBYTE(v16) != 3)
    {
      if (HIBYTE(v16) == 2)
      {
        uint64_t result = swift_release();
        a3 = 0;
        uint64_t v31 = 0;
        uint64_t v13 = 0;
        int64x2_t v44 = (int64x2_t)xmmword_21FA33730;
        goto LABEL_73;
      }
LABEL_84:
      sub_21F9E65DC();
      swift_allocError();
      *int v45 = 0xD00000000000003BLL;
      unint64_t v46 = 0x800000021FA5FFF0;
      goto LABEL_90;
    }
    goto LABEL_94;
  }
  sub_21F76C9DC(v13, (uint64_t)&v66, &qword_26AD48BA0);
  LOBYTE(v20) = 2;
  if (v67 == 254)
  {
    uint64_t v21 = 0;
LABEL_28:
    uint64_t v22 = *(void *)(a6 + 16);
    uint64_t v23 = v22 + 1;
    if (!__OFADD__(v22, 1))
    {
      *(void *)(a6 + 16) = v23;
      uint64_t v57 = sub_21F76CA40(qword_26AD45650);
      uint64_t v58 = &off_26D1331C0;
      LOBYTE(v56) = 2;
      swift_beginAccess();
      sub_21F77E1A8((uint64_t)&v56, v23);
      uint64_t v24 = *(void *)(a6 + 16);
      uint64_t v25 = v24 + 1;
      if (!__OFADD__(v24, 1))
      {
        *(void *)(a6 + 16) = v25;
        uint64_t v57 = sub_21F76CA40(&qword_26AD45648);
        uint64_t v58 = &off_26D1331C0;
        LOBYTE(v56) = 0;
        sub_21F77E1A8((uint64_t)&v56, v25);
        swift_endAccess();
        uint64_t v83 = *(void *)(a6 + 16);
        unsigned __int8 v26 = v54;
        uint64_t v27 = v53;
        goto LABEL_31;
      }
      goto LABEL_105;
    }
    __break(1u);
    goto LABEL_103;
  }
  if (v67 == 255) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = v66;
  }
  if (v67 == 255) {
    LOBYTE(v20) = 2;
  }
  else {
    LOBYTE(v20) = v67;
  }
  if ((~v16 & 0xFF00) == 0) {
    goto LABEL_28;
  }
  if (HIBYTE(v16) == 3)
  {
    int v47 = v16;
    if (v16 == 1)
    {
      unsigned __int8 v26 = v54;
      uint64_t v27 = v53;
      uint64_t v15 = a4;
      __int16 v28 = a5;
      uint64_t v13 = v49;
LABEL_32:
      if ((v28 & 0xFF00) == 0x200 || v28 != 1) {
        uint64_t v15 = sub_21F785F78(MEMORY[0x263F8EE78], &qword_26AD477B0);
      }
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + 16) = sub_21F9E1C10;
      *(void *)(v29 + 24) = 0;
      a3 = sub_21F809858(MEMORY[0x263F8EE78], (uint64_t)sub_21F8100A8, v29);
      uint64_t result = swift_release();
      uint64_t v31 = 0;
      unint64_t v32 = 0x2000000000000100;
LABEL_65:
      int64x2_t v44 = vdupq_n_s64(v32);
      v44.i64[0] = v83;
LABEL_74:
      *(void *)a9 = v21;
      *(unsigned char *)(a9 + 8) = v20;
      *(void *)(a9 + 16) = v15;
      *(void *)(a9 + 24) = a3;
      *(void *)(a9 + 32) = v31;
      *(int64x2_t *)(a9 + 40) = v44;
      *(void *)(a9 + 56) = v13;
      *(void *)(a9 + 64) = v55;
      *(void *)(a9 + 72) = v27;
      *(unsigned char *)(a9 + 80) = v26;
      return result;
    }
    unsigned __int8 v26 = v54;
    uint64_t v27 = v53;
    if (v47 == 255)
    {
LABEL_31:
      uint64_t v13 = sub_21F7885E4(0, 0, &qword_26AD45640, (void (*)(uint64_t, uint64_t))sub_21F7642FC);
      uint64_t v15 = a4;
      __int16 v28 = a5;
      goto LABEL_32;
    }
    sub_21F79BB10(v55, v53, v54, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B347C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B3460);
    __break(1u);
  }
  else if (HIBYTE(v16) == 1)
  {
    uint64_t result = swift_release();
    a3 = 0;
    uint64_t v31 = 0;
    uint64_t v13 = 0;
    int64x2_t v44 = (int64x2_t)xmmword_21FA33740;
LABEL_73:
    unsigned __int8 v26 = v54;
    uint64_t v27 = v53;
    goto LABEL_74;
  }
  sub_21FA26510();
  sub_21FA25D40();
  sub_21FA266A0();
  unint64_t v46 = 0xE000000000000000;
  sub_21F9E65DC();
  swift_allocError();
  *int v45 = 0;
LABEL_90:
  v45[1] = v46;
  swift_willThrow();
  swift_release();
  return sub_21F79BB10(v55, v53, v54, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B347C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B3460);
}

uint64_t sub_21F9E56FC@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  int v83 = a5;
  sub_21F76C9DC(a1, (uint64_t)v59, &qword_26AD48BA0);
  uint64_t v14 = v60;
  uint64_t v13 = v61;
  LOWORD(v15) = v63;
  uint64_t v52 = v62;
  sub_21F76C9DC(a1, (uint64_t)v70, &qword_26AD48BA0);
  if (BYTE8(v70[0]) == 254
    || (long long v74 = v70[2],
        long long v75 = v70[3],
        char v76 = v71,
        long long v72 = v70[0],
        long long v73 = v70[1],
        sub_21F76C9DC((uint64_t)&v75, (uint64_t)v77, &qword_26AD46C30),
        sub_21F76C9DC((uint64_t)v77, (uint64_t)v78, &qword_26AD46C30),
        v78[16] == 255))
  {
    uint64_t v16 = swift_allocObject();
    *(unsigned char *)(v16 + 16) = a7;
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = sub_21F9E6734;
    *(void *)(v17 + 24) = v16;
    uint64_t v54 = sub_21F809E2C(MEMORY[0x263F8EE78], (uint64_t)sub_21F9E668C, v17);
    uint64_t v55 = 0;
    int v18 = 192;
LABEL_6:
    int v84 = v18;
  }
  else
  {
    sub_21F9E6630((uint64_t)v78, (uint64_t)v79);
    sub_21F9E6630((uint64_t)v79, (uint64_t)&v80);
    switch(v82)
    {
      case 1:
        uint64_t v55 = 0;
        int v19 = 33;
        goto LABEL_13;
      case 2:
        uint64_t v55 = 0;
        int v19 = 65;
        goto LABEL_13;
      case 3:
        uint64_t v55 = 0;
        int v19 = 97;
        goto LABEL_13;
      case 4:
        uint64_t v55 = 0;
        int v19 = 129;
        goto LABEL_13;
      case 5:
        uint64_t v55 = 0;
        int v19 = 161;
        goto LABEL_13;
      case 6:
        uint64_t v55 = 0;
        int v19 = 193;
LABEL_13:
        int v84 = v19;
        uint64_t v54 = v80;
        break;
      case 7:
        uint64_t v54 = v80;
        uint64_t v55 = v81;
        int v18 = 224;
        goto LABEL_6;
      default:
        int v84 = 0;
        uint64_t v54 = v80;
        uint64_t v55 = v81;
        break;
    }
  }
  if (!(_BYTE)a3)
  {
    sub_21F76C9DC(a1, (uint64_t)&v64, &qword_26AD48BA0);
    int v20 = 2;
    if (v65 == 254)
    {
      uint64_t v15 = 0;
    }
    else
    {
      if (v65 == 255) {
        uint64_t v22 = 0;
      }
      else {
        uint64_t v22 = v64;
      }
      if (v65 == 255) {
        int v20 = 2;
      }
      else {
        int v20 = v65;
      }
      if ((~(_WORD)v15 & 0xFF00) != 0)
      {
        if (BYTE1(v15) != 3)
        {
          if (!BYTE1(v15))
          {
            uint64_t result = swift_release();
            a3 = 0;
            uint64_t v31 = 0;
            int64x2_t v45 = (int64x2_t)xmmword_21FA33750;
            goto LABEL_87;
          }
          goto LABEL_89;
        }
        int v49 = v15;
        if (!(_BYTE)v15)
        {
          a3 = v14;
          uint64_t v35 = v52;
          uint64_t v14 = a4;
          uint64_t v15 = v22;
          goto LABEL_50;
        }
        uint64_t v15 = v22;
        if (v49 != 255)
        {
          sub_21F79BB10(v54, v55, v84, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B347C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B3460);
          __break(1u);
LABEL_99:
          int v50 = v15;
          if (v15 == 2)
          {
            __int16 v43 = v83;
            uint64_t v21 = v22;
            uint64_t v27 = v52;
            uint64_t v14 = a4;
LABEL_66:
            if ((v43 & 0xFF00) == 0x200 || v43 != 2) {
              uint64_t v14 = sub_21F785F78(MEMORY[0x263F8EE78], qword_26AD44148);
            }
            uint64_t v44 = swift_allocObject();
            *(void *)(v44 + 16) = sub_21F9E1C10;
            *(void *)(v44 + 24) = 0;
            a3 = sub_21F809858(MEMORY[0x263F8EE78], (uint64_t)sub_21F8100A8, v44);
            uint64_t result = swift_release();
            uint64_t v31 = 0;
            unint64_t v32 = 0x4000000000000100;
            goto LABEL_70;
          }
          uint64_t v21 = v22;
          if (v50 == 255)
          {
LABEL_65:
            uint64_t v27 = sub_21F7885E4(0, 0, &qword_267EEA598, (void (*)(uint64_t, uint64_t))sub_21F7642D0);
            uint64_t v14 = a4;
            __int16 v43 = v83;
            goto LABEL_66;
          }
          sub_21F79BB10(v54, v55, v84, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B347C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B3460);
          __break(1u);
          goto LABEL_102;
        }
LABEL_49:
        uint64_t v35 = sub_21F7885E4(0, 0, &qword_26AD45640, (void (*)(uint64_t, uint64_t))sub_21F7642FC);
        a3 = v14;
        uint64_t v14 = a4;
LABEL_50:
        uint64_t v52 = v35;
        a4 = v13;
        if (v20 == 1 || v20 == 2 && v15 == 2)
        {
          uint64_t v13 = v15;
          uint64_t v36 = swift_allocObject();
          *(void *)(v36 + 16) = sub_21F9E1C10;
          *(void *)(v36 + 24) = 0;
          a3 = sub_21F809858(MEMORY[0x263F8EE78], (uint64_t)sub_21F8100A8, v36);
          uint64_t v37 = 0;
          uint64_t v38 = 0;
          goto LABEL_74;
        }
        uint64_t v13 = v15;
        if (a2 <= 7u)
        {
          uint64_t v37 = 1;
          if (((1 << a2) & 0xC3) != 0)
          {
LABEL_73:
            uint64_t v38 = 512;
LABEL_74:
            if ((v83 & 0xFF00) == 0x200 || (_BYTE)v83) {
              uint64_t v14 = sub_21F785F78(MEMORY[0x263F8EE78], &qword_26AD477B0);
            }
            uint64_t result = swift_release();
            uint64_t v31 = v38 | v37;
            int64x2_t v45 = vdupq_n_s64(0x100uLL);
            uint64_t v27 = v52;
            v45.i64[0] = a4;
            uint64_t v21 = v13;
            goto LABEL_88;
          }
        }
LABEL_102:
        uint64_t v37 = 0;
        goto LABEL_73;
      }
      uint64_t v15 = v22;
    }
    uint64_t v33 = *(void *)(a6 + 16);
    uint64_t v34 = v33 + 1;
    if (__OFADD__(v33, 1))
    {
LABEL_107:
      __break(1u);
      goto LABEL_108;
    }
    *(void *)(a6 + 16) = v34;
    uint64_t v57 = sub_21F76CA40(qword_26AD45650);
    uint64_t v58 = &off_26D1331C0;
    LOBYTE(v56) = 2;
    swift_beginAccess();
    sub_21F77E1A8((uint64_t)&v56, v34);
    uint64_t v14 = *(void *)(a6 + 16);
    if (__OFADD__(v14, 1))
    {
LABEL_110:
      __break(1u);
      goto LABEL_111;
    }
    *(void *)(a6 + 16) = v14 + 1;
    uint64_t v57 = sub_21F76CA40(&qword_26AD45648);
    uint64_t v58 = &off_26D1331C0;
    LOBYTE(v56) = 0;
    sub_21F77E1A8((uint64_t)&v56, v14 + 1);
    swift_endAccess();
    uint64_t v13 = *(void *)(a6 + 16);
    goto LABEL_49;
  }
  if (a3 != 1)
  {
    sub_21F76C9DC(a1, (uint64_t)&v68, &qword_26AD48BA0);
    LOBYTE(v20) = 2;
    if (v69 == 254)
    {
      uint64_t v21 = 0;
LABEL_62:
      uint64_t v39 = *(void *)(a6 + 16);
      uint64_t v40 = v39 + 1;
      if (__OFADD__(v39, 1))
      {
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
        goto LABEL_110;
      }
      *(void *)(a6 + 16) = v40;
      uint64_t v57 = sub_21F76CA40(qword_26AD45650);
      uint64_t v58 = &off_26D1331C0;
      LOBYTE(v56) = 2;
      swift_beginAccess();
      sub_21F77E1A8((uint64_t)&v56, v40);
      uint64_t v41 = *(void *)(a6 + 16);
      uint64_t v42 = v41 + 1;
      if (__OFADD__(v41, 1))
      {
LABEL_111:
        __break(1u);
        JUMPOUT(0x21F9E61D4);
      }
      *(void *)(a6 + 16) = v42;
      uint64_t v57 = sub_21F76CA40(&qword_26AD45648);
      uint64_t v58 = &off_26D1331C0;
      LOBYTE(v56) = 0;
      sub_21F77E1A8((uint64_t)&v56, v42);
      swift_endAccess();
      uint64_t v13 = *(void *)(a6 + 16);
      goto LABEL_65;
    }
    if (v69 == 255) {
      uint64_t v22 = 0;
    }
    else {
      uint64_t v22 = v68;
    }
    if (v69 == 255) {
      LOBYTE(v20) = 2;
    }
    else {
      LOBYTE(v20) = v69;
    }
    if ((~(_WORD)v15 & 0xFF00) == 0)
    {
      uint64_t v21 = v22;
      goto LABEL_62;
    }
    if (BYTE1(v15) != 3)
    {
      if (BYTE1(v15) == 2)
      {
        uint64_t result = swift_release();
        a3 = 0;
        uint64_t v31 = 0;
        int64x2_t v45 = (int64x2_t)xmmword_21FA33730;
        goto LABEL_87;
      }
LABEL_89:
      sub_21F9E65DC();
      swift_allocError();
      *unint64_t v46 = 0xD00000000000003BLL;
      unint64_t v47 = 0x800000021FA5FFF0;
      goto LABEL_95;
    }
    goto LABEL_99;
  }
  sub_21F76C9DC(a1, (uint64_t)&v66, &qword_26AD48BA0);
  LOBYTE(v20) = 2;
  if (v67 == 254)
  {
    uint64_t v21 = 0;
LABEL_30:
    uint64_t v23 = *(void *)(a6 + 16);
    uint64_t v24 = v23 + 1;
    if (!__OFADD__(v23, 1))
    {
      *(void *)(a6 + 16) = v24;
      uint64_t v57 = sub_21F76CA40(qword_26AD45650);
      uint64_t v58 = &off_26D1331C0;
      LOBYTE(v56) = 2;
      swift_beginAccess();
      sub_21F77E1A8((uint64_t)&v56, v24);
      uint64_t v25 = *(void *)(a6 + 16);
      uint64_t v26 = v25 + 1;
      if (!__OFADD__(v25, 1))
      {
        *(void *)(a6 + 16) = v26;
        uint64_t v57 = sub_21F76CA40(&qword_26AD45648);
        uint64_t v58 = &off_26D1331C0;
        LOBYTE(v56) = 0;
        sub_21F77E1A8((uint64_t)&v56, v26);
        swift_endAccess();
        uint64_t v13 = *(void *)(a6 + 16);
        goto LABEL_33;
      }
      goto LABEL_109;
    }
    __break(1u);
    goto LABEL_107;
  }
  if (v67 == 255) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = v66;
  }
  if (v67 == 255) {
    LOBYTE(v20) = 2;
  }
  else {
    LOBYTE(v20) = v67;
  }
  if ((~(_WORD)v15 & 0xFF00) == 0)
  {
    uint64_t v21 = v22;
    goto LABEL_30;
  }
  if (BYTE1(v15) == 3)
  {
    int v48 = v15;
    if (v15 == 1)
    {
      __int16 v28 = v83;
      uint64_t v21 = v22;
      uint64_t v27 = v52;
      uint64_t v14 = a4;
LABEL_34:
      if ((v28 & 0xFF00) == 0x200 || v28 != 1) {
        uint64_t v14 = sub_21F785F78(MEMORY[0x263F8EE78], &qword_26AD477B0);
      }
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + 16) = sub_21F9E1C10;
      *(void *)(v29 + 24) = 0;
      a3 = sub_21F809858(MEMORY[0x263F8EE78], (uint64_t)sub_21F8100A8, v29);
      uint64_t result = swift_release();
      uint64_t v31 = 0;
      unint64_t v32 = 0x2000000000000100;
LABEL_70:
      int64x2_t v45 = vdupq_n_s64(v32);
      v45.i64[0] = v13;
LABEL_88:
      *(void *)a8 = v21;
      *(unsigned char *)(a8 + 8) = v20;
      *(void *)(a8 + 16) = v14;
      *(void *)(a8 + 24) = a3;
      *(void *)(a8 + 32) = v31;
      *(int64x2_t *)(a8 + 40) = v45;
      *(void *)(a8 + 56) = v27;
      *(void *)(a8 + 64) = v54;
      *(void *)(a8 + 72) = v55;
      *(unsigned char *)(a8 + 80) = v84;
      return result;
    }
    uint64_t v21 = v22;
    if (v48 == 255)
    {
LABEL_33:
      uint64_t v27 = sub_21F7885E4(0, 0, &qword_26AD45640, (void (*)(uint64_t, uint64_t))sub_21F7642FC);
      uint64_t v14 = a4;
      __int16 v28 = v83;
      goto LABEL_34;
    }
    sub_21F79BB10(v54, v55, v84, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B347C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B3460);
    __break(1u);
  }
  else if (BYTE1(v15) == 1)
  {
    uint64_t result = swift_release();
    a3 = 0;
    uint64_t v31 = 0;
    int64x2_t v45 = (int64x2_t)xmmword_21FA33740;
LABEL_87:
    uint64_t v21 = v22;
    uint64_t v27 = 0;
    goto LABEL_88;
  }
  sub_21FA26510();
  sub_21FA25D40();
  sub_21FA266A0();
  unint64_t v47 = 0xE000000000000000;
  sub_21F9E65DC();
  swift_allocError();
  *unint64_t v46 = 0;
LABEL_95:
  v46[1] = v47;
  swift_willThrow();
  swift_release();
  return sub_21F79BB10(v54, v55, v84, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B347C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B3460);
}

unint64_t sub_21F9E6214@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_21F790148(MEMORY[0x263F8EE78]);
  uint64_t v28 = 0;
  memset(v27, 0, sizeof(v27));
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_6;
  }
  unint64_t v7 = result;
  *(void *)(a1 + 16) = v6;
  v26[3] = sub_21F76CA40(&qword_26AD477A8);
  v26[4] = &off_26D1331C0;
  v26[0] = swift_allocObject();
  sub_21F9E6490((uint64_t)v27, v26[0] + 16);
  swift_beginAccess();
  sub_21F77E1A8((uint64_t)v26, v6);
  swift_endAccess();
  uint64_t v8 = *(void *)(a1 + 16);
  sub_21F76CA84((uint64_t)v27, &qword_26AD476F0);
  uint64_t v9 = sub_21F7885E4(0, 0, &qword_26AD477A0, (void (*)(uint64_t, uint64_t))sub_21F75F008);
  sub_21F9E64F8((uint64_t)v27);
  sub_21F76C9DC((uint64_t)v27, (uint64_t)v26, &qword_26AD49360);
  uint64_t v10 = sub_21F788698((uint64_t)v26);
  uint64_t v11 = MEMORY[0x263F8EE78];
  unint64_t v12 = sub_21F7884F0(MEMORY[0x263F8EE78]);
  unint64_t result = sub_21F936D28(v11);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  unint64_t v19 = result;
  unint64_t v20 = v12;
  unint64_t v21 = v7;
  *(void *)(a1 + 16) = v14;
  uint64_t v15 = sub_21F76CA40(&qword_26AD477B8);
  uint64_t v24 = v15;
  uint64_t v25 = &off_26D1331C0;
  uint64_t v22 = 0;
  char v23 = 1;
  swift_beginAccess();
  unint64_t result = sub_21F77E1A8((uint64_t)&v22, v14);
  uint64_t v16 = *(void *)(a1 + 16);
  uint64_t v17 = v16 + 1;
  if (!__OFADD__(v16, 1))
  {
    *(void *)(a1 + 16) = v17;
    uint64_t v24 = v15;
    uint64_t v25 = &off_26D1331C0;
    uint64_t v22 = 0;
    char v23 = 1;
    sub_21F77E1A8((uint64_t)&v22, v17);
    unint64_t result = swift_endAccess();
    uint64_t v18 = *(void *)(a1 + 16);
    *(void *)a2 = v8;
    *(void *)(a2 + 8) = v9;
    *(void *)(a2 + 16) = v10;
    *(unsigned char *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = v20;
    *(void *)(a2 + 40) = v19;
    *(_WORD *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = v16;
    *(void *)(a2 + 64) = v18;
    *(void *)(a2 + 72) = v21;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_21F9E6450()
{
  if (*(void *)(v0 + 40)) {
    _s6Charts15AnyChartContentVwxx_0(v0 + 16);
  }

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_21F9E6490(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21F76CA40(&qword_26AD476F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

double sub_21F9E64F8(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_WORD *)(a1 + 256) = 0;
  return result;
}

uint64_t sub_21F9E652C()
{
  uint64_t v1 = *(void *)(v0 + 40);
  if (v1)
  {
    if (v1 == 1) {
      goto LABEL_8;
    }
    sub_21F7656A8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_bridgeObjectRelease();
    sub_21F770E38(*(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));
  }
  if (*(void *)(v0 + 128))
  {
    sub_21F7656A8(*(void *)(v0 + 104), *(void *)(v0 + 112), *(unsigned char *)(v0 + 120));
    swift_bridgeObjectRelease();
    sub_21F770E38(*(void *)(v0 + 136), *(void *)(v0 + 144), *(unsigned char *)(v0 + 152));
  }
  if (*(void *)(v0 + 216))
  {
    sub_21F7656A8(*(void *)(v0 + 192), *(void *)(v0 + 200), *(unsigned char *)(v0 + 208));
    swift_bridgeObjectRelease();
    sub_21F770E38(*(void *)(v0 + 224), *(void *)(v0 + 232), *(unsigned char *)(v0 + 240));
  }
LABEL_8:

  return MEMORY[0x270FA0238](v0, 274, 7);
}

unint64_t sub_21F9E65DC()
{
  unint64_t result = qword_267EEA590;
  if (!qword_267EEA590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EEA590);
  }
  return result;
}

uint64_t sub_21F9E6630(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_21F9E6690@<X0>(void *a1@<X8>)
{
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr, unsigned char *))(v1 + 16))(&v4, v5);
  *a1 = v4;
  return result;
}

uint64_t sub_21F9E66D4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 98, 7);
}

uint64_t sub_21F9E671C@<X0>(uint64_t *a1@<X8>)
{
  return sub_21F9E200C(v1 + 16, a1);
}

uint64_t sub_21F9E6724()
{
  return MEMORY[0x270FA0238](v0, 17, 7);
}

uint64_t sub_21F9E6734@<X0>(uint64_t *a1@<X8>)
{
  return sub_21F9E20B4(*(unsigned char *)(v1 + 16), a1);
}

uint64_t sub_21F9E673C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_21F9E6774(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ChartContentRenderContext.Bins(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for Spec.Axis.Label(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF7 && a1[48]) {
    return (*(_DWORD *)a1 + 247);
  }
  if (*a1 <= 9u) {
    int v3 = 9;
  }
  else {
    int v3 = *a1;
  }
  int v4 = v3 - 10;
  if (*a1 < 9u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Spec.Axis.Label(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF6)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 247;
    if (a3 >= 0xF7) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF7) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 9;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Spec.Axis.Label()
{
  return &type metadata for Spec.Axis.Label;
}

uint64_t getEnumTagSinglePayload for Spec.Axis.Marks(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 73)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Spec.Axis.Marks(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 73) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Spec.Axis.Marks()
{
  return &type metadata for Spec.Axis.Marks;
}

unsigned char *storeEnumTagSinglePayload for Spec.ScaleDomainType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x21F9E69C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScaleResolutionFailure()
{
  return &type metadata for ScaleResolutionFailure;
}

uint64_t initializeWithCopy for Spec.Scale(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  unint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  unint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 56);
  sub_21F79B9E4(v4, v5, v6, v7, v8, v9, (void (*)(uint64_t, unint64_t, unint64_t))sub_21F7B34A4);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  uint64_t v10 = *(void *)(v2 + 64);
  uint64_t v11 = *(void *)(v2 + 72);
  LOBYTE(v2) = *(unsigned char *)(v2 + 80);
  sub_21F79BB10(v10, v11, v2, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B34E8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B34CC);
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v11;
  *(unsigned char *)(a1 + 80) = v2;
  return a1;
}

uint64_t assignWithCopy for Spec.Scale(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  unint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  sub_21F79B9E4(v5, v6, v7, v8, v9, v10, (void (*)(uint64_t, unint64_t, unint64_t))sub_21F7B34A4);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  unint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 40);
  unint64_t v15 = *(void *)(a1 + 48);
  uint64_t v16 = *(void *)(a1 + 56);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  sub_21F79B9E4(v11, v12, v13, v14, v15, v16, (void (*)(uint64_t, unint64_t, unint64_t))sub_21F7B3450);
  uint64_t v17 = v2[8];
  uint64_t v18 = v2[9];
  LOBYTE(v2) = *((unsigned char *)v2 + 80);
  sub_21F79BB10(v17, v18, v2, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B34E8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B34CC);
  uint64_t v19 = *(void *)(a1 + 64);
  uint64_t v20 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = v17;
  *(void *)(a1 + 72) = v18;
  unsigned __int8 v21 = *(unsigned char *)(a1 + 80);
  *(unsigned char *)(a1 + 80) = (_BYTE)v2;
  sub_21F79BB10(v19, v20, v21, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B347C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B3460);
  return a1;
}

uint64_t assignWithTake for Spec.Scale(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  unint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  unint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  long long v10 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_21F79B9E4(v4, v5, v6, v7, v8, v9, (void (*)(uint64_t, unint64_t, unint64_t))sub_21F7B3450);
  char v11 = *(unsigned char *)(a2 + 80);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  unsigned __int8 v14 = *(unsigned char *)(a1 + 80);
  *(unsigned char *)(a1 + 80) = v11;
  sub_21F79BB10(v12, v13, v14, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B347C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B3460);
  return a1;
}

uint64_t getEnumTagSinglePayload for Spec.Scale(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 81)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 32) >> 10;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for Spec.Scale(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = 0;
      *(void *)(result + 32) = (unint64_t)-a2 << 10;
      *(void *)(result + 40) = 0;
      *(void *)(result + 48) = 0;
      *(void *)(result + 56) = 0;
      return result;
    }
    *(unsigned char *)(result + 81) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t destroy for Spec.ScaleRange(uint64_t a1)
{
  return sub_21F79BB10(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B347C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B3460);
}

uint64_t _s6Charts4SpecO10ScaleRangeOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_21F79BB10(*(void *)a2, v4, v5, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B34E8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B34CC);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for Spec.ScaleRange(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_21F79BB10(*(void *)a2, v4, v5, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B34E8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B34CC);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_21F79BB10(v6, v7, v8, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B347C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B3460);
  return a1;
}

uint64_t assignWithTake for Spec.ScaleRange(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_21F79BB10(v4, v5, v6, (uint64_t (*)(uint64_t, uint64_t, void))sub_21F7B347C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F7B3460);
  return a1;
}

ValueMetadata *type metadata accessor for Spec.ScaleRange()
{
  return &type metadata for Spec.ScaleRange;
}

uint64_t destroy for Spec.ScaleDomain(void *a1, uint64_t a2)
{
  return sub_21F9E6F9C(a1, a2, (uint64_t (*)(void, void, void, void, void, void, uint64_t (*)(uint64_t, uint64_t, char)))sub_21F79B9E4);
}

uint64_t sub_21F9E6F9C(void *a1, uint64_t a2, uint64_t (*a3)(void, void, void, void, void, void, uint64_t (*)(uint64_t a1, uint64_t a2, char a3)))
{
  return a3(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], sub_21F7B3450);
}

void *initializeWithCopy for Spec.ScaleDomain(void *a1, void *a2, uint64_t a3)
{
  return sub_21F9E6FF8(a1, a2, a3, (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, char)))sub_21F79B9E4);
}

void *sub_21F9E6FF8(void *a1, void *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t a1, uint64_t a2, char a3)))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  uint64_t v10 = a2[5];
  a4(*a2, v6, v7, v8, v9, v10, sub_21F7B34A4);
  *a1 = v5;
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v9;
  a1[5] = v10;
  return a1;
}

uint64_t *assignWithCopy for Spec.ScaleDomain(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_21F9E709C(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, char)))sub_21F79B9E4);
}

uint64_t *sub_21F9E709C(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t a1, uint64_t a2, char a3)))
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  uint64_t v11 = a2[5];
  a4(*a2, v7, v8, v9, v10, v11, sub_21F7B34A4);
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  uint64_t v14 = a1[2];
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  uint64_t v17 = a1[5];
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = v10;
  a1[5] = v11;
  a4(v12, v13, v14, v15, v16, v17, sub_21F7B3450);
  return a1;
}

void *assignWithTake for Spec.ScaleDomain(void *a1, _OWORD *a2, uint64_t a3)
{
  return sub_21F9E7168(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, char)))sub_21F79B9E4);
}

void *sub_21F9E7168(void *a1, _OWORD *a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t a1, uint64_t a2, char a3)))
{
  uint64_t v6 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  uint64_t v11 = a1[5];
  long long v12 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v12;
  *((_OWORD *)a1 + 2) = a2[2];
  a4(v6, v8, v7, v9, v10, v11, sub_21F7B3450);
  return a1;
}

uint64_t sub_21F9E71D8(uint64_t a1)
{
  return (*(void *)(a1 + 32) >> 61) & 3;
}

uint64_t sub_21F9E71E4(uint64_t result)
{
  *(void *)(result + 32) &= 0x9FFFFFFFFFFFFFFFLL;
  return result;
}

uint64_t sub_21F9E71F4(uint64_t result, char a2)
{
  unint64_t v2 = *(void *)(result + 32) & 0x80000000000003FFLL | ((unint64_t)(a2 & 3) << 61);
  *(void *)(result + 16) &= 0x3FFuLL;
  *(void *)(result + 32) = v2;
  return result;
}

ValueMetadata *type metadata accessor for Spec.ScaleDomain()
{
  return &type metadata for Spec.ScaleDomain;
}

uint64_t sub_21F9E7228(void *a1, uint64_t a2)
{
  return sub_21F9E6F9C(a1, a2, (uint64_t (*)(void, void, void, void, void, void, uint64_t (*)(uint64_t, uint64_t, char)))sub_21F79BA1C);
}

void *sub_21F9E7240(void *a1, void *a2, uint64_t a3)
{
  return sub_21F9E6FF8(a1, a2, a3, (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, char)))sub_21F79BA1C);
}

uint64_t *sub_21F9E7258(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_21F9E709C(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, char)))sub_21F79BA1C);
}

void *sub_21F9E7270(void *a1, _OWORD *a2, uint64_t a3)
{
  return sub_21F9E7168(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, char)))sub_21F79BA1C);
}

uint64_t _s6Charts4SpecO11ScaleDomainOwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 16) >> 10;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t sub_21F9E72D8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = (unint64_t)-a2 << 10;
      *(void *)(result + 24) = 0;
      *(void *)(result + 32) = 0;
      *(void *)(result + 40) = 0;
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_21F9E7330(uint64_t a1)
{
  return *(void *)(a1 + 32) >> 63;
}

uint64_t sub_21F9E733C(uint64_t result)
{
  *(void *)(result + 32) &= ~0x8000000000000000;
  return result;
}

uint64_t sub_21F9E734C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 32) & 0x3FFLL | (a2 << 63);
  *(void *)(result + 16) &= 0x3FFuLL;
  *(void *)(result + 32) = v2;
  return result;
}

uint64_t destroy for BaseSpec()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for BaseSpec(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BaseSpec(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for BaseSpec(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for BaseSpec(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BaseSpec(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BaseSpec()
{
  return &type metadata for BaseSpec;
}

unint64_t sub_21F9E75C4()
{
  unint64_t result = qword_267EEA5E0;
  if (!qword_267EEA5E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EEA5E0);
  }
  return result;
}

unint64_t sub_21F9E761C()
{
  unint64_t result = qword_267EEA5E8;
  if (!qword_267EEA5E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EEA5E8);
  }
  return result;
}

unint64_t sub_21F9E7674()
{
  unint64_t result = qword_267EEA5F0;
  if (!qword_267EEA5F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EEA5F0);
  }
  return result;
}

unint64_t sub_21F9E76CC()
{
  unint64_t result = qword_267EEA5F8[0];
  if (!qword_267EEA5F8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_267EEA5F8);
  }
  return result;
}

uint64_t sub_21F9E7720(uint64_t a1)
{
  sub_21F7B3450(*(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(unsigned char *)(a1 + 17));
  uint64_t v2 = *(void *)(a1 + 24);
  char v3 = *(unsigned char *)(a1 + 33);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 32);

  return sub_21F7B3450(v2, v4, v3);
}

uint64_t sub_21F9E776C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 17);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 16);
  sub_21F7B34A4(v4, v6, v5);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 17) = v5;
  uint64_t v7 = *(void *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 33);
  unsigned __int8 v9 = *(unsigned char *)(a2 + 32);
  sub_21F7B34A4(v7, v9, v8);
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v9;
  *(unsigned char *)(a1 + 33) = v8;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t sub_21F9E7800(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 17);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 16);
  sub_21F7B34A4(v4, v6, v5);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  uint64_t v8 = *(unsigned __int8 *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v6;
  char v9 = *(unsigned char *)(a1 + 17);
  *(unsigned char *)(a1 + 17) = v5;
  sub_21F7B3450(v7, v8, v9);
  uint64_t v10 = *(void *)(a2 + 24);
  char v11 = *(unsigned char *)(a2 + 33);
  unsigned __int8 v12 = *(unsigned char *)(a2 + 32);
  sub_21F7B34A4(v10, v12, v11);
  uint64_t v13 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v10;
  uint64_t v14 = *(unsigned __int8 *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v12;
  char v15 = *(unsigned char *)(a1 + 33);
  *(unsigned char *)(a1 + 33) = v11;
  sub_21F7B3450(v13, v14, v15);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t sub_21F9E78B8(uint64_t a1, uint64_t a2)
{
  __int16 v4 = *(_WORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 17);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 16);
  *(_WORD *)(a1 + 16) = v4;
  sub_21F7B3450(v5, v7, v6);
  __int16 v8 = *(_WORD *)(a2 + 32);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  char v10 = *(unsigned char *)(a1 + 33);
  uint64_t v11 = *(unsigned __int8 *)(a1 + 32);
  *(_WORD *)(a1 + 32) = v8;
  sub_21F7B3450(v9, v11, v10);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t sub_21F9E7928(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 17);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t sub_21F9E7970(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 17) = -(char)a2;
    }
  }
  return result;
}

uint64_t type metadata accessor for Spec.GenericScaleDomain.InferredDomain()
{
  return sub_21F764F08();
}

uint64_t sub_21F9E7A34(uint64_t a1, uint64_t a2)
{
  sub_21F764AF8(a1, (uint64_t)v24);
  switch(sub_21F7607A0((uint64_t)v24))
  {
    case 1u:
      uint64_t v11 = sub_21F7607C4((uint64_t)v24);
      sub_21F9AAD50(v11, (uint64_t)v25);
      goto LABEL_9;
    case 4u:
      sub_21F7607C4((uint64_t)v24);
LABEL_9:
      BOOL v10 = 0;
      int v8 = 0;
      LOBYTE(v5) = 3;
      char v9 = 1;
      break;
    default:
      uint64_t v3 = sub_21F7607C4((uint64_t)v24);
      int v5 = *(char *)(v3 + 48);
      if (v5 < 0)
      {
        char v9 = 0;
        int v8 = *(char *)(v3 + 48);
        v5 &= 1u;
        BOOL v10 = v5 == 0;
      }
      else
      {
        int v4 = (uint64_t *)(v3 + 40);
        uint64_t v6 = *(void *)(v3 + 40);
        uint64_t v7 = *(void *)(v3 + 32);
        if (*(unsigned char *)(v3 + 48))
        {
          if (*(unsigned char *)(v3 + 48) == 1)
          {
            int v8 = 1;
            sub_21F770E38(v7, *v4, 1);
            sub_21F770E38(v7, v6, 1);
            char v9 = 0;
            BOOL v10 = 0;
            LOBYTE(v5) = 1;
          }
          else
          {
            char v9 = 0;
            BOOL v10 = 0;
            int v8 = 0;
          }
        }
        else
        {
          sub_21F770E38(v7, *v4, 0);
          sub_21F770E38(v7, v6, 0);
          char v9 = 0;
          int v8 = 0;
          LOBYTE(v5) = 0;
          BOOL v10 = 1;
        }
      }
      break;
  }
  sub_21F764AF8(a2, (uint64_t)v22);
  switch(sub_21F7607A0((uint64_t)v22))
  {
    case 1u:
      uint64_t v21 = sub_21F7607C4((uint64_t)v22);
      sub_21F9AAD50(v21, (uint64_t)v23);
      goto LABEL_28;
    case 4u:
      sub_21F7607C4((uint64_t)v22);
LABEL_28:
      BOOL v18 = 0;
      LOBYTE(v14) = 3;
      int v17 = 1;
      int v19 = 1;
      if (v9) {
        goto LABEL_29;
      }
      goto LABEL_19;
    default:
      uint64_t v12 = sub_21F7607C4((uint64_t)v22);
      int v14 = *(char *)(v12 + 48);
      if (v14 < 0)
      {
        int v17 = 0;
        v14 &= 1u;
        BOOL v18 = v14 == 0;
        int v19 = v18;
        if (v9) {
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v13 = (uint64_t *)(v12 + 40);
        uint64_t v15 = *(void *)(v12 + 40);
        uint64_t v16 = *(void *)(v12 + 32);
        if (*(unsigned char *)(v12 + 48))
        {
          if (*(unsigned char *)(v12 + 48) == 1)
          {
            LOBYTE(v14) = 1;
            sub_21F770E38(*(void *)(v12 + 32), *v13, 1);
            sub_21F770E38(v16, v15, 1);
            int v17 = 0;
            BOOL v18 = 0;
            int v19 = 0;
            if (v9) {
              goto LABEL_29;
            }
          }
          else
          {
            int v17 = 0;
            BOOL v18 = 0;
            int v19 = 1;
            if (v9)
            {
LABEL_29:
              if ((v17 | v18)) {
                return 1;
              }
              return v17 | v19;
            }
          }
        }
        else
        {
          sub_21F770E38(*(void *)(v12 + 32), *v13, 0);
          sub_21F770E38(v16, v15, 0);
          int v17 = 0;
          LOBYTE(v14) = 0;
          BOOL v18 = 1;
          int v19 = 1;
          if (v9) {
            goto LABEL_29;
          }
        }
      }
LABEL_19:
      if (v5 == v14) {
        uint64_t result = v17 ^ 1u;
      }
      else {
        uint64_t result = 0;
      }
      if (((v10 | result) & 1) == 0)
      {
        if (v17)
        {
          if (v8) {
            return 1;
          }
        }
        else if ((v8 | v18))
        {
          return 1;
        }
        return v17 | v19;
      }
      return result;
  }
}

void sub_21F9E7D38()
{
  qword_26AD52208 = 0x404921FB54442D18;
}

uint64_t sub_21F9E7D54()
{
  if (qword_26AD45430 != -1) {
    swift_once();
  }

  return sub_21F7C21A4((uint64_t)&qword_26AD521C0, (uint64_t)&unk_26AD52148);
}

void sub_21F9E7DB8()
{
  qword_267EF2F90 = 0x4020000000000000;
}

void sub_21F9E7DC8()
{
  qword_26AD52108 = 0;
}

void sub_21F9E7DD4()
{
  qword_26AD521A0 = 0x4010000000000000;
}

uint64_t sub_21F9E7DE4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  char v76 = a2;
  uint64_t v3 = sub_21F76CA40(&qword_26AD47A98);
  MEMORY[0x270FA5388](v3 - 8);
  unsigned __int8 v67 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  char v70 = (char *)&v60 - v6;
  MEMORY[0x270FA5388](v7);
  char v9 = (char *)&v60 - v8;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v60 - v11;
  uint64_t v13 = sub_21FA241F0();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v68 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  BOOL v18 = (char *)&v60 - v17;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v60 - v20;
  MEMORY[0x270FA5388](v22);
  __n128 v25 = MEMORY[0x270FA5388](v23);
  uint64_t v80 = (char *)&v60 - v26;
  unint64_t v75 = *(void *)(a1 + 16);
  if (!v75)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v14 + 56))(v12, 1, 1, v13, v25);
    goto LABEL_6;
  }
  uint64_t v66 = v24;
  unint64_t v27 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v62 = a1;
  uint64_t v28 = *(void (**)(char *, __n128))(v14 + 16);
  uint64_t v73 = a1 + v27;
  v28(v12, v25);
  double v78 = *(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56);
  uint64_t v79 = v14 + 56;
  v78(v12, 0, 1, v13);
  char v71 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  uint64_t v72 = v14 + 48;
  if (v71(v12, 1, v13) == 1)
  {
LABEL_6:
    sub_21F9E91BC((uint64_t)v12);
    uint64_t v31 = sub_21F76CA40(&qword_26AD44290);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v76, 1, 1, v31);
  }
  uint64_t v61 = v21;
  uint64_t v29 = v14 + 32;
  unsigned __int8 v69 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v69(v80, v12, v13);
  unint64_t v30 = v75;
  if (v75 == 1)
  {
    v78(v9, 1, 1, v13);
LABEL_8:
    sub_21F9E91BC((uint64_t)v9);
    uint64_t v33 = sub_21F76CA40(&qword_26AD44290);
    uint64_t v34 = v76;
    uint64_t v35 = &v76[*(int *)(v33 + 48)];
    uint64_t v36 = v80;
    ((void (*)(char *, char *, uint64_t))v28)(v76, v80, v13);
    v69(v35, v36, v13);
    return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v34, 0, 1, v33);
  }
  uint64_t v65 = *(void *)(v14 + 72);
  ((void (*)(char *, uint64_t, uint64_t))v28)(v9, v73 + v65, v13);
  v78(v9, 0, 1, v13);
  if (v71(v9, 1, v13) == 1) {
    goto LABEL_8;
  }
  v69(v66, v9, v13);
  unint64_t v37 = sub_21F76CEC0();
  swift_bridgeObjectRetain();
  unint64_t v74 = v37;
  uint64_t result = sub_21FA25C50();
  if (result)
  {
    uint64_t v38 = v80;
    uint64_t v39 = v69;
    v69(v61, v80, v13);
    uint64_t v40 = v38;
    uint64_t v41 = v66;
    v39(v40, v66, v13);
    uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v39)(v41, v61, v13);
  }
  uint64_t v42 = (uint64_t)v70;
  if (v30 == 2)
  {
LABEL_12:
    v78((char *)v42, 1, 1, v13);
LABEL_13:
    swift_bridgeObjectRelease();
    sub_21F9E91BC(v42);
    uint64_t v33 = sub_21F76CA40(&qword_26AD44290);
    uint64_t v34 = v76;
    __int16 v43 = (uint64_t)&v76[*(int *)(v33 + 48)];
    uint64_t v44 = (void (*)(uint64_t, char *, uint64_t))v69;
    v69(v76, v80, v13);
    v44(v43, v66, v13);
    return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v34, 0, 1, v33);
  }
  uint64_t v63 = (void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v64 = v14 + 16;
  unint64_t v45 = 2;
  while (v45 < v30)
  {
    ((void (*)(uint64_t, unint64_t, uint64_t))v28)(v42, v73 + v45 * v65, v13);
    v78((char *)v42, 0, 1, v13);
    if (v71((char *)v42, 1, v13) == 1) {
      goto LABEL_13;
    }
    unint64_t v77 = v45;
    unint64_t v47 = v45 + 1;
    int v48 = (void (*)(char *, uint64_t, uint64_t))v69;
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v69)(v18, v42, v13);
    if (v47 == v30)
    {
      uint64_t v49 = (uint64_t)v67;
      v78(v67, 1, 1, v13);
      unint64_t v77 = v30;
      int v50 = v68;
    }
    else
    {
      int v50 = v68;
      if (v47 >= v30) {
        goto LABEL_33;
      }
      uint64_t v51 = v73 + v47 * v65;
      uint64_t v49 = (uint64_t)v67;
      ((void (*)(char *, uint64_t, uint64_t))v28)(v67, v51, v13);
      v77 += 2;
      v78((char *)v49, 0, 1, v13);
      if (v71((char *)v49, 1, v13) != 1)
      {
        v48(v50, v49, v13);
        goto LABEL_26;
      }
    }
    ((void (*)(char *, char *, uint64_t))v28)(v50, v18, v13);
    sub_21F9E91BC(v49);
LABEL_26:
    if (sub_21FA25C50())
    {
      uint64_t v52 = v61;
      v48(v61, (uint64_t)v18, v13);
      v48(v18, (uint64_t)v50, v13);
      v48(v50, (uint64_t)v52, v13);
    }
    uint64_t v53 = v29;
    if (sub_21FA25C50())
    {
      uint64_t v54 = v80;
      (*v63)(v80, v13);
      ((void (*)(char *, char *, uint64_t))v28)(v54, v18, v13);
    }
    uint64_t v55 = v28;
    uint64_t v56 = v66;
    char v57 = sub_21FA25C50();
    uint64_t v58 = v50;
    uint64_t v59 = *v63;
    (*v63)(v18, v13);
    if (v57)
    {
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v59)(v58, v13);
      uint64_t v29 = v53;
    }
    else
    {
      v59(v56, v13);
      unint64_t v46 = v56;
      uint64_t v29 = v53;
      uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v69)(v46, v58, v13);
    }
    unint64_t v45 = v77;
    uint64_t v42 = (uint64_t)v70;
    uint64_t v28 = v55;
    unint64_t v30 = v75;
    if (v77 == v75) {
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_21F9E867C@<X0>(uint64_t (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v102 = (uint64_t (*)(char *, char *))a1;
  uint64_t v103 = a2;
  uint64_t v96 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v101 = sub_21FA26340();
  uint64_t v98 = *(void *)(v101 - 8);
  MEMORY[0x270FA5388](v101);
  uint64_t v92 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v95 = (char *)&v82 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v94 = (void (*)(void))((char *)&v82 - v10);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v82 - v12;
  char v99 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v90 = (char *)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v91 = (char *)&v82 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v97 = (char *)&v82 - v19;
  MEMORY[0x270FA5388](v20);
  unint64_t v104 = (char *)&v82 - v21;
  uint64_t v22 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v23);
  __n128 v25 = (char *)&v82 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(v26 - 8);
  __n128 v28 = MEMORY[0x270FA5388](v26);
  unint64_t v30 = (char *)&v82 - v29;
  (*(void (**)(char *, void (**)(void, void), uint64_t, __n128))(v22 + 16))(v25, v100, a3, v28);
  uint64_t v31 = AssociatedTypeWitness;
  sub_21FA25D60();
  unint64_t v32 = v99;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_21FA26350();
  uint64_t v34 = v32[6];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v34)(v13, 1, v31) == 1)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v30, v26);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v13, v101);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56))(v96, 1, 1, TupleTypeMetadata2);
  }
  uint64_t v89 = v27;
  unint64_t v37 = v13;
  uint64_t v38 = (void (*)(void))v32[4];
  uint64_t v100 = (void (**)(void, void))(v32 + 4);
  ((void (*)(char *, char *, uint64_t))v38)(v104, v37, v31);
  uint64_t v39 = (char *)v94;
  uint64_t v93 = (void (**)(void, void))(v32 + 6);
  sub_21FA26350();
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v34)(v39, 1, v31) == 1)
  {
    (*(void (**)(char *, uint64_t))(v89 + 8))(v30, v26);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v39, v101);
    uint64_t v40 = v31;
    uint64_t v41 = swift_getTupleTypeMetadata2();
    uint64_t v42 = v96;
    uint64_t v43 = v96 + *(int *)(v41 + 48);
    uint64_t v44 = v104;
    ((void (*)(uint64_t, char *, uint64_t))v32[2])(v96, v104, v40);
    ((void (*)(uint64_t, char *, uint64_t))v38)(v43, v44, v40);
    unint64_t v45 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56);
    uint64_t v46 = v42;
    return v45(v46, 0, 1, v41);
  }
  uint64_t v86 = AssociatedConformanceWitness;
  uint64_t v87 = v30;
  uint64_t v88 = v26;
  unint64_t v47 = v97;
  v38();
  int v48 = v104;
  uint64_t v49 = v105;
  char v50 = v102(v47, v104);
  uint64_t v51 = v48;
  uint64_t v52 = v31;
  if (v49)
  {
    uint64_t v53 = v32[1];
    v53(v47, v52);
    uint64_t v54 = v51;
  }
  else
  {
    uint64_t v85 = v34;
    if (v50) {
      sub_21FA26970();
    }
    uint64_t v55 = v95;
    uint64_t v56 = v87;
    sub_21FA26350();
    char v57 = v55;
    uint64_t v58 = v85;
    unsigned int v59 = ((uint64_t (*)(char *, uint64_t, uint64_t))v85)(v57, 1, v31);
    uint64_t v94 = v38;
    uint64_t v105 = 0;
    if (v59 == 1)
    {
      uint64_t v60 = v56;
      uint64_t v61 = v88;
      uint64_t v62 = v95;
LABEL_13:
      (*(void (**)(char *, uint64_t))(v89 + 8))(v60, v61);
      (*(void (**)(char *, uint64_t))(v98 + 8))(v62, v101);
      uint64_t v63 = v52;
      uint64_t v41 = swift_getTupleTypeMetadata2();
      uint64_t v64 = v96;
      uint64_t v65 = v96 + *(int *)(v41 + 48);
      uint64_t v66 = v52;
      unsigned __int8 v67 = v94;
      ((void (*)(uint64_t, char *, uint64_t))v94)(v96, v104, v66);
      ((void (*)(uint64_t, char *, uint64_t))v67)(v65, v97, v63);
      unint64_t v45 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56);
      uint64_t v46 = v64;
      return v45(v46, 0, 1, v41);
    }
    int v84 = (void (**)(char *, char *, uint64_t))(v32 + 2);
    int v83 = (void (**)(char *, uint64_t))(v98 + 8);
    uint64_t v62 = v95;
    char v99 = v32 + 1;
    while (1)
    {
      unsigned __int8 v69 = v91;
      ((void (*)(char *, char *, uint64_t))v94)(v91, v62, v52);
      char v70 = v92;
      sub_21FA26350();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v58)(v70, 1, v52) == 1)
      {
        char v71 = v90;
        (*v84)(v90, v69, v52);
        (*v83)(v70, v101);
      }
      else
      {
        char v71 = v90;
        ((void (*)(char *, char *, uint64_t))v94)(v90, v70, v52);
      }
      uint64_t v72 = v104;
      uint64_t v73 = v69;
      uint64_t v74 = v105;
      char v75 = v102(v71, v69);
      char v76 = v99;
      if (v74) {
        break;
      }
      if (v75) {
        sub_21FA26970();
      }
      char v77 = v102(v69, v72);
      double v78 = v94;
      if (v77)
      {
        (*v76)(v72, v52);
        (*v84)(v72, v69, v52);
      }
      char v79 = v102(v71, v97);
      uint64_t v80 = *v76;
      (*v76)(v69, v52);
      uint64_t v105 = 0;
      if (v79)
      {
        v80(v71, v52);
      }
      else
      {
        uint64_t v81 = v97;
        v80(v97, v52);
        ((void (*)(char *, char *, uint64_t))v78)(v81, v71, v52);
      }
      uint64_t v60 = v87;
      uint64_t v68 = v95;
      uint64_t v61 = v88;
      sub_21FA26350();
      uint64_t v62 = v68;
      uint64_t v58 = v85;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v85)(v68, 1, v52) == 1) {
        goto LABEL_13;
      }
    }
    uint64_t v53 = *v99;
    (*v99)(v71, v52);
    v53(v73, v52);
    v53(v97, v52);
    uint64_t v54 = v72;
  }
  v53(v54, v52);
  return (*(uint64_t (**)(char *, uint64_t))(v89 + 8))(v87, v88);
}

uint64_t sub_21F9E90B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1;
  uint64_t v8 = a2;
  uint64_t v9 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return sub_21F9E867C((uint64_t (*)(char *, char *))sub_21F9E9148, (uint64_t)&v6, v7, a4);
}

uint64_t sub_21F9E9148()
{
  return sub_21FA25C50() & 1;
}

uint64_t sub_21F9E91BC(uint64_t a1)
{
  uint64_t v2 = sub_21F76CA40(&qword_26AD47A98);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21F9E921C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W3>, char a4@<W4>, uint64_t a5@<X5>, int64_t a6@<X6>, uint64_t a7@<X8>)
{
  if (MEMORY[0x223C55340](a2, a5) != 1)
  {
    uint64_t v43 = a1;
    *(void *)&long long v47 = a2;
    uint64_t v15 = sub_21FA25F30();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t result = sub_21FA26190();
    if (result)
    {
      __break(1u);
    }
    else
    {
      uint64_t v39 = a7;
      uint64_t v50 = a2;
      MEMORY[0x270FA5388](result);
      uint64_t v33 = a5;
      int64_t v34 = a6;
      uint64_t v35 = v43;
      int v41 = a3 & 1;
      LOBYTE(v36) = a3 & 1;
      int64_t v40 = a6;
      char v17 = a4 & 1;
      BYTE1(v36) = a4 & 1;
      uint64_t v42 = v18;
      uint64_t v37 = v18;
      uint64_t v19 = sub_21F76CA40(&qword_267EEA690);
      uint64_t v21 = sub_21F751B50((void (*)(char *, char *))sub_21F9E9758, (uint64_t)v32, v15, v19, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v20);
      uint64_t v22 = sub_21F90E8D8(v21);
      int64_t v23 = sub_21F9F0EE8(v22);
      char v25 = v24;
      uint64_t result = swift_bridgeObjectRelease();
      if ((v25 & 1) == 0)
      {
        *(void *)&long long v46 = a2;
        swift_getWitnessTable();
        uint64_t v26 = MEMORY[0x263F8D708];
        uint64_t v27 = sub_21FA26070();
        long long v46 = v47;
        MEMORY[0x270FA5388](v27);
        v32[0] = a5;
        v32[1] = v40;
        uint64_t v33 = v21;
        int64_t v34 = v23;
        uint64_t v35 = a2;
        uint64_t v36 = v43;
        LOBYTE(v37) = v41;
        BYTE1(v37) = v17;
        uint64_t v38 = v42;
        sub_21F76CA40(&qword_26AD47CA0);
        unint64_t v28 = sub_21F79CC84();
        uint64_t v44 = v26;
        unint64_t v45 = v28;
        uint64_t v29 = (void (*)(char *, char *, uint64_t))swift_getWitnessTable();
        unint64_t v30 = sub_21F9E9810();
        sub_21F813354((void (*)(char *))sub_21F9E97D4, (uint64_t)&v31, (uint64_t)&type metadata for DiffToDesiredCount, v29, v30, (char *)&v48);
        uint64_t result = swift_bridgeObjectRelease();
        if ((v49 & 1) == 0) {
          return sub_21FA25F60();
        }
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }

  return sub_21FA25F60();
}

uint64_t sub_21F9E9530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v4 = __OFSUB__(a2, a1);
  uint64_t result = a2 - a1;
  if (result < 0 == v4)
  {
    if (!v4)
    {
      if (!__OFSUB__(a3, a1))
      {
        if (a3 - a1 >= result) {
          return result;
        }
        goto LABEL_21;
      }
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t result = a1 - a3;
  if (a1 < a3)
  {
    uint64_t v6 = a1 - a2;
    if (!__OFSUB__(a1, a2))
    {
      BOOL v4 = __OFSUB__(a1, a3);
      uint64_t v7 = a1 - a3;
      if (!v4)
      {
        if (v7 <= v6) {
          uint64_t v8 = v6;
        }
        else {
          uint64_t v8 = v7;
        }
        if ((v8 & 0x8000000000000000) == 0) {
          return 0;
        }
        goto LABEL_24;
      }
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (__OFSUB__(a1, a3))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  BOOL v4 = __OFSUB__(a1, a2);
  uint64_t v9 = a1 - a2;
  if (v4)
  {
LABEL_26:
    __break(1u);
    return result;
  }
  if (v9 < result)
  {
    __break(1u);
    goto LABEL_19;
  }
  return result;
}

unint64_t sub_21F9E95B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, char a3@<W5>, char a4@<W6>, int64_t a5@<X7>, uint64_t *a6@<X8>, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = *(void *)(a7 - 8);
  MEMORY[0x270FA5388](a1);
  char v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t result = *v18;
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (result >= *(void *)(v14 + 16))
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (*(void *)(v14 + 16 * result + 32) > v15)
  {
    uint64_t v21 = qword_267EEA680;
    uint64_t v20 = unk_267EEA688;
LABEL_11:
    *a6 = v21;
    a6[1] = v20;
    return result;
  }
  sub_21FA25F60();
  unint64_t result = (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t))(a8 + 32))(a2, a3 & 1, a4 & 1, a7, a8);
  uint64_t v21 = result - a5;
  if (__OFSUB__(result, a5)) {
    goto LABEL_14;
  }
  int64_t v22 = result;
  if ((v21 & 0x8000000000000000) == 0 || (v23 = __OFSUB__(0, v21), uint64_t v21 = a5 - result, !v23))
  {
    unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v17, a7);
    if (v22 >= a5) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = -1;
    }
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
  return result;
}

BOOL sub_21F9E9738(void *a1, void *a2)
{
  if (*a1 == *a2) {
    return a2[1] < a1[1];
  }
  else {
    return *a1 < *a2;
  }
}

uint64_t sub_21F9E9758@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 48);
  uint64_t v4 = (*(uint64_t (**)(void, void, void, void))(*(void *)(v1 + 24) + 40))(*(void *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(unsigned __int8 *)(v1 + 41), *(void *)(v1 + 16));
  uint64_t result = sub_21F9E9530(v3, v4, v5);
  *a1 = result;
  a1[1] = v7;
  return result;
}

unint64_t sub_21F9E97D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_21F9E95B8(a1, *(void *)(v2 + 56), *(unsigned char *)(v2 + 64), *(unsigned char *)(v2 + 65), *(void *)(v2 + 72), a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

unint64_t sub_21F9E9810()
{
  unint64_t result = qword_267EEA698;
  if (!qword_267EEA698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EEA698);
  }
  return result;
}

ValueMetadata *type metadata accessor for DiffToDesiredCount()
{
  return &type metadata for DiffToDesiredCount;
}

BOOL sub_21F9E9874(void *a1, void *a2)
{
  if (*a2 == *a1) {
    return a1[1] >= a2[1];
  }
  else {
    return *a2 >= *a1;
  }
}

BOOL sub_21F9E9894(void *a1, void *a2)
{
  if (*a1 == *a2) {
    return a2[1] >= a1[1];
  }
  else {
    return *a1 >= *a2;
  }
}

BOOL sub_21F9E98B4(void *a1, void *a2)
{
  if (*a2 == *a1) {
    return a1[1] < a2[1];
  }
  else {
    return *a2 < *a1;
  }
}

unint64_t sub_21F9E98D8()
{
  unint64_t result = qword_267EEA6A0;
  if (!qword_267EEA6A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EEA6A0);
  }
  return result;
}

uint64_t sub_21F9E992C()
{
  sub_21F76CA40(&qword_267EEA6A8);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_21FA33BB0;
  *(void *)(v0 + 32) = sub_21FA25550();
  *(void *)(v0 + 40) = sub_21FA255A0();
  *(void *)(v0 + 48) = sub_21FA255B0();
  *(void *)(v0 + 56) = sub_21FA255C0();
  *(void *)(v0 + 64) = sub_21FA25540();
  *(void *)(v0 + 72) = sub_21FA25570();
  *(void *)(v0 + 80) = sub_21FA255D0();
  uint64_t result = sub_21FA25E60();
  qword_267EF2F98 = v0;
  return result;
}

uint64_t sub_21F9E99C8()
{
  uint64_t v0 = sub_21FA25840();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F76CA40(&qword_267EEA6A8);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_21FA28820;
  if (qword_267EE6E80 != -1) {
    swift_once();
  }
  *(void *)(v4 + 32) = qword_267EF2FA8;
  swift_retain();
  *(void *)(v4 + 40) = sub_21FA25550();
  uint64_t v8 = v4;
  sub_21FA25E60();
  MEMORY[0x223C54CA0](v8);
  sub_21FA25830();
  uint64_t v5 = sub_21FA25850();
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  qword_267EF2FA0 = v5;
  return result;
}

double sub_21F9E9B3C()
{
  sub_21F76CA40(&qword_26AD48568);
  uint64_t v0 = swift_allocObject();
  *(void *)&double result = 2;
  *(_OWORD *)(v0 + 16) = xmmword_21FA28820;
  *(_OWORD *)(v0 + 32) = xmmword_21FA33BC0;
  qword_26AD51FB0 = v0;
  return result;
}

uint64_t sub_21F9E9B84()
{
  sub_21F76CA40(&qword_26AD44880);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_21FA33BB0;
  if (qword_26AD45430 != -1) {
    swift_once();
  }
  sub_21F7C21A4((uint64_t)&qword_26AD521C0, v0 + 32);
  if (qword_26AD44838 != -1) {
    swift_once();
  }
  sub_21F7C21A4((uint64_t)&qword_26AD51FE0, v0 + 72);
  if (qword_26AD44858 != -1) {
    swift_once();
  }
  sub_21F7C21A4((uint64_t)&qword_26AD52080, v0 + 112);
  if (qword_26AD44830 != -1) {
    swift_once();
  }
  sub_21F7C21A4((uint64_t)&qword_26AD51FB8, v0 + 152);
  if (qword_26AD44840 != -1) {
    swift_once();
  }
  sub_21F7C21A4((uint64_t)&qword_26AD52008, v0 + 192);
  if (qword_26AD44850 != -1) {
    swift_once();
  }
  sub_21F7C21A4((uint64_t)&qword_26AD52058, v0 + 232);
  if (qword_26AD44848 != -1) {
    swift_once();
  }
  uint64_t result = sub_21F7C21A4((uint64_t)&qword_26AD52030, v0 + 272);
  qword_26AD51FA8 = v0;
  return result;
}

id sub_21F9E9DA8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10 = objc_msgSend(a1, sel_accessibilityContrast);
  id v11 = objc_msgSend(a1, sel_userInterfaceStyle);
  id v12 = objc_allocWithZone(MEMORY[0x263F825C8]);
  if (v11 == (id)2) {
    uint64_t v13 = a2;
  }
  else {
    uint64_t v13 = a3;
  }
  if (v11 == (id)2) {
    uint64_t v14 = a4;
  }
  else {
    uint64_t v14 = a5;
  }
  if (v10 == (id)1) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v14;
  }

  return objc_msgSend(v12, sel_initWithCGColor_, v15);
}

void sub_21F9E9E44()
{
  CGColorRef SRGB = CGColorCreateSRGB(0.82745098, 0.905882353, 1.0, 1.0);
  CGColorRef v1 = CGColorCreateSRGB(0.031372549, 0.0549019608, 0.129411765, 1.0);
  CGColorRef v2 = CGColorCreateSRGB(0.803921569, 0.870588235, 0.992156863, 1.0);
  CGColorRef v3 = CGColorCreateSRGB(0.0, 0.0431372549, 0.105882353, 1.0);
  uint64_t v4 = (void *)swift_allocObject();
  v4[2] = v3;
  void v4[3] = v2;
  v4[4] = v1;
  v4[5] = SRGB;
  id v5 = objc_allocWithZone(MEMORY[0x263F825C8]);
  v13[4] = sub_21F9EA058;
  v13[5] = v4;
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 1107296256;
  v13[2] = sub_21F9EA508;
  v13[3] = &unk_26D13FC40;
  uint64_t v6 = _Block_copy(v13);
  uint64_t v7 = v3;
  uint64_t v8 = v2;
  uint64_t v9 = v1;
  id v10 = SRGB;
  id v11 = objc_msgSend(v5, sel_initWithDynamicProvider_, v6);
  _Block_release(v6);
  swift_release();
  uint64_t v12 = MEMORY[0x223C54940](v11);

  qword_267EF2FA8 = v12;
}

uint64_t sub_21F9EA008()
{
  return MEMORY[0x270FA0238](v0, 48, 7);
}

id sub_21F9EA058(void *a1)
{
  return sub_21F9E9DA8(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_21F9EA064()
{
  sub_21F76CA40(&qword_26AD44880);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_21FA2A550;
  if (qword_26AD45430 != -1) {
    swift_once();
  }
  sub_21F7C21A4((uint64_t)&qword_26AD521C0, v0 + 32);
  if (qword_26AD44840 != -1) {
    swift_once();
  }
  sub_21F7C21A4((uint64_t)&qword_26AD52008, v0 + 72);
  if (qword_26AD44858 != -1) {
    swift_once();
  }
  sub_21F7C21A4((uint64_t)&qword_26AD52080, v0 + 112);
  if (qword_26AD44848 != -1) {
    swift_once();
  }
  sub_21F7C21A4((uint64_t)&qword_26AD52030, v0 + 152);
  if (qword_267EE6EA0 != -1) {
    swift_once();
  }
  uint64_t result = sub_21F7C21A4((uint64_t)&qword_267EF2FC8, v0 + 192);
  qword_267EF2FB0 = v0;
  return result;
}

double sub_21F9EA200()
{
  sub_21F76CA40(&qword_267EE6FD8);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_21FA2A550;
  if (qword_26AD46C38 != -1) {
    swift_once();
  }
  sub_21FA24500();
  *(_OWORD *)(v0 + 32) = v11;
  *(_OWORD *)(v0 + 48) = v12;
  *(void *)(v0 + 64) = v13;
  sub_21F76CA40(&qword_26AD48568);
  uint64_t v1 = swift_allocObject();
  __asm { FMOV            V0.2D, #4.0 }
  *(_OWORD *)(v1 + 16) = xmmword_21FA28820;
  *(_OWORD *)(v1 + 32) = _Q0;
  sub_21FA24500();
  *(_OWORD *)(v0 + 72) = v14;
  *(_OWORD *)(v0 + 88) = v15;
  *(void *)(v0 + 104) = v16;
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_21FA28820;
  *(_OWORD *)(v7 + 32) = xmmword_21FA33BD0;
  sub_21FA24500();
  *(_OWORD *)(v0 + 112) = v17;
  *(_OWORD *)(v0 + 128) = v18;
  *(void *)(v0 + 144) = v19;
  uint64_t v8 = (_OWORD *)swift_allocObject();
  v8[1] = xmmword_21FA2CBA0;
  _OWORD v8[2] = xmmword_21FA318D0;
  _OWORD v8[3] = xmmword_21FA33BD0;
  sub_21FA24500();
  *(_OWORD *)(v0 + 152) = v20;
  *(_OWORD *)(v0 + 168) = v21;
  *(void *)(v0 + 184) = v22;
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_21FA28820;
  *(_OWORD *)(v9 + 32) = xmmword_21FA33BE0;
  sub_21FA24500();
  double result = *(double *)&v23;
  *(_OWORD *)(v0 + 192) = v23;
  *(_OWORD *)(v0 + 208) = v24;
  *(void *)(v0 + 224) = v25;
  qword_267EF2FB8 = v0;
  return result;
}

double sub_21F9EA444()
{
  sub_21F76CA40(&qword_267EE6FD8);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_21FA28820;
  sub_21FA24500();
  *(_OWORD *)(v0 + 32) = v2;
  *(_OWORD *)(v0 + 48) = v3;
  *(void *)(v0 + 64) = v4;
  sub_21FA24500();
  double result = *(double *)&v5;
  *(_OWORD *)(v0 + 72) = v5;
  *(_OWORD *)(v0 + 88) = v6;
  *(void *)(v0 + 104) = v7;
  qword_267EF2FC0 = v0;
  return result;
}

id sub_21F9EA508(uint64_t a1, void *a2)
{
  long long v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  long long v5 = (void *)v3();
  swift_release();

  return v5;
}

uint64_t sub_21F9EA570(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_21F9EA580()
{
  return swift_release();
}

uint64_t _s4StepVwcp(uint64_t a1, uint64_t a2)
{
  long long v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  id v4 = v3;
  return a1;
}

uint64_t _s4StepVwca(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  long long v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t _s4StepVwta(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

ValueMetadata *_s4StepVMa()
{
  return &_s4StepVN;
}

void sub_21F9EA69C()
{
  uint64_t v1 = v0;
  double v2 = *(double *)(v0 + 24);
  BOOL v3 = v2 > 0.0 && v2 < 1.0;
  if (v3 && *(void *)(v0 + 8) == 2) {
    sub_21FA26290();
  }
  uint64_t v4 = *(void *)(v0 + 16);
  if (v4 == 1)
  {
    CGPathCloseSubpath(*(CGMutablePathRef *)v1);
LABEL_15:
    if (__OFSUB__(0, v4))
    {
      __break(1u);
    }
    else
    {
      *(void *)(v1 + 16) = -v4;
      *(double *)(v1 + 24) = 1.0 - v2;
    }
    return;
  }
  if (v4) {
    goto LABEL_15;
  }
  if (*(void *)(v1 + 8) == 1)
  {
    long long v5 = *(CGPath **)v1;
    CGPathCloseSubpath(v5);
  }
}

uint64_t sub_21F9EA774(double a1, double a2)
{
  if (*(void *)(v2 + 8))
  {
    *(void *)(v2 + 8) = 2;
    sub_21FA26290();
  }
  else
  {
    *(void *)(v2 + 8) = 1;
    if (*(void *)(v2 + 16) != 1)
    {
      uint64_t result = sub_21FA26280();
      goto LABEL_6;
    }
  }
  uint64_t result = sub_21FA26290();
LABEL_6:
  *(double *)(v2 + 32) = a1;
  *(double *)(v2 + 40) = a2;
  return result;
}

int64x2_t sub_21F9EA89C()
{
  v0->i64[1] = 0;
  int64x2_t result = vdupq_n_s64(0x7FF8000000000000uLL);
  v0[2] = result;
  return result;
}

uint64_t AnyChartSymbolShape.init(_:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21F77F300(a1, a2);
}

double AnyChartSymbolShape.path(in:)@<D0>(uint64_t a1@<X8>)
{
  sub_21F77E0FC(v1, v1[3]);
  sub_21FA255F0();
  double result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  return result;
}

uint64_t sub_21F9EA964@<X0>(uint64_t a1@<X8>)
{
  unint64_t v38 = MEMORY[0x263F8EE78];
  CGMutablePathRef Mutable = CGPathCreateMutable();
  uint64_t v2 = (const CGPath *)sub_21FA25150();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = &Mutable;
  *(void *)(v3 + 24) = &v38;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = sub_21F9ED4F8;
  *(void *)(v4 + 24) = v3;
  uint64_t v35 = sub_21F9ED510;
  uint64_t v36 = v4;
  *(void *)&long long aBlock = MEMORY[0x263EF8330];
  *((void *)&aBlock + 1) = 1107296256;
  uint64_t v33 = sub_21F9EB5E8;
  int64_t v34 = &unk_26D13FFC8;
  long long v5 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  CGPathApplyWithBlock(v2, v5);

  _Block_release(v5);
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t isEscapingClosureAtFileLocation = v38;
    if (!(v38 >> 62))
    {
      uint64_t v7 = *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain_n();
      if (v7) {
        goto LABEL_4;
      }
LABEL_21:
      swift_bridgeObjectRelease_n();
      goto LABEL_22;
    }
  }
  swift_bridgeObjectRetain_n();
  uint64_t result = sub_21FA26790();
  uint64_t v7 = result;
  if (!result) {
    goto LABEL_21;
  }
LABEL_4:
  if (v7 >= 1)
  {
    if ((isEscapingClosureAtFileLocation & 0xC000000000000001) != 0) {
      uint64_t v9 = (const CGPath *)MEMORY[0x223C559B0](0, isEscapingClosureAtFileLocation);
    }
    else {
      uint64_t v9 = (const CGPath *)*(id *)(isEscapingClosureAtFileLocation + 32);
    }
    id v10 = v9;
    PathBoundingBoCGFloat x = CGPathGetPathBoundingBox(v9);
    CGFloat x = PathBoundingBox.origin.x;
    CGFloat y = PathBoundingBox.origin.y;
    CGFloat width = PathBoundingBox.size.width;
    CGFloat height = PathBoundingBox.size.height;
    double v15 = CGRectGetWidth(PathBoundingBox);
    v40.origin.CGFloat x = x;
    v40.origin.CGFloat y = y;
    v40.size.CGFloat width = width;
    v40.size.CGFloat height = height;
    double v16 = CGRectGetHeight(v40);
    uint64_t v17 = v7 - 1;
    if (v7 != 1)
    {
      uint64_t v18 = 0;
      double v19 = -(v15 * v16);
      do
      {
        if ((isEscapingClosureAtFileLocation & 0xC000000000000001) != 0) {
          long long v20 = (const CGPath *)MEMORY[0x223C559B0](v18 + 1, isEscapingClosureAtFileLocation);
        }
        else {
          long long v20 = (const CGPath *)*(id *)(isEscapingClosureAtFileLocation + 8 * v18 + 40);
        }
        long long v21 = v20;
        CGRect v41 = CGPathGetPathBoundingBox(v20);
        CGFloat v22 = v41.origin.x;
        CGFloat v23 = v41.origin.y;
        CGFloat v24 = v41.size.width;
        CGFloat v25 = v41.size.height;
        double v26 = CGRectGetWidth(v41);
        v42.origin.CGFloat x = v22;
        v42.origin.CGFloat y = v23;
        v42.size.CGFloat width = v24;
        v42.size.CGFloat height = v25;
        double v27 = -(v26 * CGRectGetHeight(v42));
        if (v27 < v19)
        {

          id v10 = v21;
          double v19 = v27;
        }
        else
        {
        }
        ++v18;
      }
      while (v17 != v18);
    }
    swift_bridgeObjectRelease_n();
    if (v10)
    {
      sub_21FA25290();
LABEL_23:
      long long v31 = aBlock;
      unint64_t v28 = v33;
      uint64_t v29 = v34;
      char v30 = (char)v35;

      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      *(_OWORD *)a1 = v31;
      *(void *)(a1 + 16) = v28;
      *(void *)(a1 + 24) = v29;
      *(unsigned char *)(a1 + 32) = v30;
      return result;
    }
LABEL_22:
    sub_21FA25270();
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t AnyChartSymbolShape.perceptualUnitRect.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  sub_21F77E0FC(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

double ChartSymbolShape<>.strokeBorder(lineWidth:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 - 8);
  __n128 v6 = MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, v2, a1, v6);
  sub_21FA24500();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v8, a1);
  uint64_t v9 = a2 + *(int *)(type metadata accessor for StrokedSymbolShape() + 44);
  double result = *(double *)&v13;
  long long v11 = v14;
  *(_OWORD *)uint64_t v9 = v13;
  *(_OWORD *)(v9 + 16) = v11;
  *(void *)(v9 + 32) = v15;
  return result;
}

uint64_t ChartSymbolShape<>.strokeBorder(style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 - 8);
  __n128 v8 = MEMORY[0x270FA5388](a1);
  id v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))(v10, v3, a2, v8);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v10, a2);
  uint64_t v11 = a3 + *(int *)(type metadata accessor for StrokedSymbolShape() + 44);
  long long v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a1;
  *(_OWORD *)(v11 + 16) = v12;
  *(void *)(v11 + 32) = *(void *)(a1 + 32);
  return swift_bridgeObjectRetain();
}

double sub_21F9EAF70@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  long long v21 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  __n128 v6 = (char *)&v20 - v5;
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = sub_21FA246C0();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  id v10 = (char *)&v20 - v9;
  uint64_t v11 = (uint64_t *)(v2 + *(int *)(a1 + 44));
  uint64_t v12 = *v11;
  sub_21FA24950();
  uint64_t v13 = v11[3];
  uint64_t v14 = v11[4];
  uint64_t v16 = v11[1];
  uint64_t v15 = v11[2];
  uint64_t v25 = v12;
  uint64_t v26 = v16;
  uint64_t v27 = v15;
  uint64_t v28 = v13;
  uint64_t v29 = v14;
  sub_21FA25650();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v6, AssociatedTypeWitness);
  sub_21FA246B0();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  double result = *(double *)&v22;
  long long v18 = v23;
  double v19 = v21;
  *long long v21 = v22;
  v19[1] = v18;
  *((unsigned char *)v19 + 32) = v24;
  return result;
}

uint64_t sub_21F9EB1DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))(*(void *)(a1 + 16));
}

double sub_21F9EB1F8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_21F9EAF70(a1, v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 32) = v6;
  return result;
}

uint64_t sub_21F9EB244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return nullsub_1(a2, a3);
}

uint64_t sub_21F9EB250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F04808](a1, a2, a3, WitnessTable);
}

uint64_t sub_21F9EB2CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F047D0](a1, a2, a3, WitnessTable);
}

uint64_t sub_21F9EB348(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F047E0](a1, WitnessTable);
}

uint64_t sub_21F9EB3AC(_DWORD *a1, id *a2, void *a3)
{
  switch(*a1)
  {
    case 0:
      id v9 = *a2;
      uint64_t Mutable = sub_21FA26280();
      id v5 = v9;
      break;
    case 1:
      id v10 = *a2;
      uint64_t Mutable = sub_21FA26290();
      id v5 = v10;
      break;
    case 2:
      id v11 = *a2;
      uint64_t Mutable = sub_21FA26270();
      id v5 = v11;
      break;
    case 3:
      id v12 = *a2;
      uint64_t Mutable = sub_21FA262A0();
      id v5 = v12;
      break;
    case 4:
      CGPathCloseSubpath((CGMutablePathRef)*a2);
      if (!CGPathIsEmpty((CGPathRef)*a2))
      {
        id v7 = *a2;
        MEMORY[0x223C55260]();
        if (*(void *)((*a3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_21FA25E90();
        }
        sub_21FA25EF0();
        sub_21FA25E60();
      }
      uint64_t Mutable = (uint64_t)CGPathCreateMutable();
      id v5 = *a2;
      *a2 = (id)Mutable;
      break;
    default:
      __break(1u);
      JUMPOUT(0x21F9EB5D4);
  }

  return MEMORY[0x270F9A758](Mutable, v5);
}

uint64_t sub_21F9EB5E8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a2);
}

unint64_t sub_21F9EB614()
{
  qword_26AD521D8 = (uint64_t)&type metadata for BasicChartSymbolShape;
  unint64_t result = sub_21F8DE268();
  qword_26AD521E0 = result;
  qword_26AD521C0 = 0;
  byte_26AD521C8 = 5;
  return result;
}

void static ChartSymbolShape<>.circle.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 5;
}

unint64_t sub_21F9EB668()
{
  qword_26AD52020 = (uint64_t)&type metadata for BasicChartSymbolShape;
  unint64_t result = sub_21F8DE268();
  qword_26AD52028 = result;
  qword_26AD52008 = 1;
  byte_26AD52010 = 5;
  return result;
}

void static ChartSymbolShape<>.square.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 1;
  *(unsigned char *)(a1 + 8) = 5;
}

unint64_t sub_21F9EB6C4()
{
  qword_26AD52098 = (uint64_t)&type metadata for BasicChartSymbolShape;
  unint64_t result = sub_21F8DE268();
  qword_26AD520A0 = result;
  qword_26AD52080 = 3;
  byte_26AD52088 = 5;
  return result;
}

void static ChartSymbolShape<>.triangle.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 3;
  *(unsigned char *)(a1 + 8) = 5;
}

unint64_t sub_21F9EB720()
{
  qword_26AD52048 = (uint64_t)&type metadata for BasicChartSymbolShape;
  unint64_t result = sub_21F8DE268();
  qword_26AD52050 = result;
  qword_26AD52030 = 2;
  byte_26AD52038 = 5;
  return result;
}

void static ChartSymbolShape<>.diamond.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 2;
  *(unsigned char *)(a1 + 8) = 5;
}

unint64_t sub_21F9EB77C()
{
  qword_267EF2FE0 = (uint64_t)&type metadata for BasicChartSymbolShape;
  unint64_t result = sub_21F8DE268();
  qword_267EF2FE8 = result;
  qword_267EF2FC8 = 4;
  byte_267EF2FD0 = 5;
  return result;
}

void static ChartSymbolShape<>.pentagon.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 4;
  *(unsigned char *)(a1 + 8) = 5;
}

unint64_t sub_21F9EB7D8()
{
  qword_26AD51FD0 = (uint64_t)&type metadata for BasicChartSymbolShape;
  unint64_t result = sub_21F8DE268();
  qword_26AD51FD8 = result;
  qword_26AD51FB8 = 6;
  byte_26AD51FC0 = 5;
  return result;
}

void static ChartSymbolShape<>.plus.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 6;
  *(unsigned char *)(a1 + 8) = 5;
}

unint64_t sub_21F9EB834()
{
  qword_26AD51FF8 = (uint64_t)&type metadata for BasicChartSymbolShape;
  unint64_t result = sub_21F8DE268();
  qword_26AD52000 = result;
  qword_26AD51FE0 = 5;
  byte_26AD51FE8 = 5;
  return result;
}

void static ChartSymbolShape<>.cross.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 5;
  *(unsigned char *)(a1 + 8) = 5;
}

unint64_t sub_21F9EB888()
{
  qword_26AD52070 = (uint64_t)&type metadata for BasicChartSymbolShape;
  unint64_t result = sub_21F8DE268();
  qword_26AD52078 = result;
  qword_26AD52058 = 7;
  byte_26AD52060 = 5;
  return result;
}

void static ChartSymbolShape<>.asterisk.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 7;
  *(unsigned char *)(a1 + 8) = 5;
}

uint64_t sub_21F9EB8E4()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  sub_21F77E0FC(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

double sub_21F9EB938@<D0>(uint64_t a1@<X8>)
{
  sub_21F77E0FC(v1, v1[3]);
  sub_21FA255F0();
  double result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  return result;
}

uint64_t sub_21F9EB9D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_21F9EC804();

  return MEMORY[0x270F04808](a1, a2, a3, v6);
}

uint64_t sub_21F9EBA34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_21F9EC804();

  return MEMORY[0x270F047D0](a1, a2, a3, v6);
}

uint64_t sub_21F9EBA98(uint64_t a1)
{
  unint64_t v2 = sub_21F9EC804();

  return MEMORY[0x270F047E0](a1, v2);
}

double Circle.perceptualUnitRect.getter()
{
  return -0.0641895835;
}

double sub_21F9EBB00()
{
  return -0.0641895835;
}

BOOL sub_21F9EBB1C(uint64_t a1, uint64_t a2)
{
  return sub_21F9EC610(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

__n128 BasicChartSymbolShape.path(in:)@<Q0>(__n128 *a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  double v11 = *(double *)v5;
  uint64_t v12 = *(unsigned __int8 *)(v5 + 8);
  double Width = CGRectGetWidth(*(CGRect *)&a2);
  v48.origin.CGFloat x = a2;
  v48.origin.CGFloat y = a3;
  v48.size.CGFloat width = a4;
  v48.size.CGFloat height = a5;
  double Height = CGRectGetHeight(v48);
  if (Height >= Width) {
    double Height = Width;
  }
  double v15 = Height * 0.5;
  v49.origin.CGFloat x = a2;
  v49.origin.CGFloat y = a3;
  v49.size.CGFloat width = a4;
  v49.size.CGFloat height = a5;
  CGFloat MidX = CGRectGetMidX(v49);
  v50.origin.CGFloat x = a2;
  v50.origin.CGFloat y = a3;
  v50.size.CGFloat width = a4;
  v50.size.CGFloat height = a5;
  CGFloat MidY = CGRectGetMidY(v50);
  switch(v12)
  {
    case 1:
      double v19 = v15 * 3.65858451;
      if (qword_26AD44F38 != -1) {
        swift_once();
      }
      double v41 = v19 / *(double *)&qword_26AD52120;
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      double v44 = v19 / *(double *)&qword_26AD52120;
      CGFloat v45 = MidX;
      CGFloat v46 = MidY;
      sub_21F9F7AB4((uint64_t)v39, v11 / (v19 / *(double *)&qword_26AD52120));
      goto LABEL_21;
    case 2:
      double v20 = v15 * 3.4016116;
      if (qword_26AD44F38 != -1) {
        swift_once();
      }
      double v41 = v20 / *(double *)&qword_26AD52120;
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      double v44 = v20 / *(double *)&qword_26AD52120;
      CGFloat v45 = MidX;
      CGFloat v46 = MidY;
      sub_21F9F80F8((uint64_t)v39, v11 / (v20 / *(double *)&qword_26AD52120));
      goto LABEL_21;
    case 3:
      double v21 = v15 * 2.94048146;
      if (qword_26AD44F38 != -1) {
        swift_once();
      }
      double v41 = v21 / *(double *)&qword_26AD52120;
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      double v44 = v21 / *(double *)&qword_26AD52120;
      CGFloat v45 = MidX;
      CGFloat v46 = MidY;
      sub_21F9F7D90((uint64_t)v39, v11 / (v21 / *(double *)&qword_26AD52120));
      goto LABEL_21;
    case 4:
      double v22 = v15 * 3.84062453;
      if (qword_26AD44F38 != -1) {
        swift_once();
      }
      double v41 = v22 / *(double *)&qword_26AD52120;
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      double v44 = v22 / *(double *)&qword_26AD52120;
      CGFloat v45 = MidX;
      CGFloat v46 = MidY;
      sub_21F9F845C((uint64_t)v39, v11 / (v22 / *(double *)&qword_26AD52120));
      goto LABEL_21;
    case 5:
      switch(*(void *)&v11)
      {
        case 1:
          double v29 = v15 * 3.65858451;
          if (qword_26AD44F38 != -1) {
            swift_once();
          }
          double v41 = v29 / *(double *)&qword_26AD52120;
          uint64_t v42 = 0;
          uint64_t v43 = 0;
          double v44 = v29 / *(double *)&qword_26AD52120;
          CGFloat v45 = MidX;
          CGFloat v46 = MidY;
          if (qword_267EE6EC0 != -1) {
            swift_once();
          }
          uint64_t v28 = &xmmword_267EF3070;
          break;
        case 2:
          double v30 = v15 * 3.4016116;
          if (qword_26AD44F38 != -1) {
            swift_once();
          }
          double v41 = v30 / *(double *)&qword_26AD52120;
          uint64_t v42 = 0;
          uint64_t v43 = 0;
          double v44 = v30 / *(double *)&qword_26AD52120;
          CGFloat v45 = MidX;
          CGFloat v46 = MidY;
          if (qword_267EE6ED0 != -1) {
            swift_once();
          }
          uint64_t v28 = &xmmword_267EF30C0;
          break;
        case 3:
          double v31 = v15 * 2.94048146;
          if (qword_26AD44F38 != -1) {
            swift_once();
          }
          double v41 = v31 / *(double *)&qword_26AD52120;
          uint64_t v42 = 0;
          uint64_t v43 = 0;
          double v44 = v31 / *(double *)&qword_26AD52120;
          CGFloat v45 = MidX;
          CGFloat v46 = MidY;
          if (qword_267EE6EB0 != -1) {
            swift_once();
          }
          uint64_t v28 = &xmmword_267EF3020;
          break;
        case 4:
          double v32 = v15 * 3.84062453;
          if (qword_26AD44F38 != -1) {
            swift_once();
          }
          double v41 = v32 / *(double *)&qword_26AD52120;
          uint64_t v42 = 0;
          uint64_t v43 = 0;
          double v44 = v32 / *(double *)&qword_26AD52120;
          CGFloat v45 = MidX;
          CGFloat v46 = MidY;
          if (qword_267EE6ED8 != -1) {
            swift_once();
          }
          uint64_t v28 = &xmmword_267EF30F0;
          break;
        case 5:
          double v33 = v15 * 4.66398225;
          if (qword_26AD44F38 != -1) {
            swift_once();
          }
          double v41 = v33 / *(double *)&qword_26AD52120;
          uint64_t v42 = 0;
          uint64_t v43 = 0;
          double v44 = v33 / *(double *)&qword_26AD52120;
          CGFloat v45 = MidX;
          CGFloat v46 = MidY;
          if (qword_267EE6EA8 != -1) {
            swift_once();
          }
          uint64_t v28 = &xmmword_267EF2FF8;
          break;
        case 6:
          double v34 = v15 * 4.5521075;
          if (qword_26AD44F38 != -1) {
            swift_once();
          }
          double v41 = v34 / *(double *)&qword_26AD52120;
          uint64_t v42 = 0;
          uint64_t v43 = 0;
          double v44 = v34 / *(double *)&qword_26AD52120;
          CGFloat v45 = MidX;
          CGFloat v46 = MidY;
          if (qword_267EE6EB8 != -1) {
            swift_once();
          }
          uint64_t v28 = &xmmword_267EF3048;
          break;
        case 7:
          double v35 = v15 * 4.66398225;
          if (qword_26AD44F38 != -1) {
            swift_once();
          }
          double v41 = v35 / *(double *)&qword_26AD52120;
          uint64_t v42 = 0;
          uint64_t v43 = 0;
          double v44 = v35 / *(double *)&qword_26AD52120;
          CGFloat v45 = MidX;
          CGFloat v46 = MidY;
          if (qword_267EE6EC8 != -1) {
            swift_once();
          }
          uint64_t v28 = &xmmword_267EF3098;
          break;
        default:
          if (qword_26AD44F38 != -1) {
            swift_once();
          }
          double v41 = v15 * *(double *)&qword_26AD52120 / *(double *)&qword_26AD52120;
          uint64_t v42 = 0;
          uint64_t v43 = 0;
          double v44 = v41;
          CGFloat v45 = MidX;
          CGFloat v46 = MidY;
          if (qword_26AD44F40 != -1) {
            swift_once();
          }
          uint64_t v28 = &xmmword_26AD52170;
          break;
      }
      long long v36 = v28[1];
      v39[0] = *v28;
      v39[1] = v36;
      char v40 = *((unsigned char *)v28 + 32);
      sub_21F7C48F4((uint64_t)v39, (uint64_t)v47);
      sub_21F76DF78((uint64_t)v47, (void (*)(void, void, void, void, void))sub_21F7C4950);
      long long v23 = &v38;
      goto LABEL_22;
    default:
      if (qword_267EE6EE0 != -1) {
        swift_once();
      }
      double v18 = v15 * *(double *)&qword_267EF3118;
      if (qword_26AD44F38 != -1) {
        swift_once();
      }
      double v41 = v18 / *(double *)&qword_26AD52120;
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      double v44 = v18 / *(double *)&qword_26AD52120;
      CGFloat v45 = MidX;
      CGFloat v46 = MidY;
      sub_21F9F788C((uint64_t)v39);
LABEL_21:
      long long v23 = v47;
LABEL_22:
      sub_21FA25240();
      __n128 v37 = *(__n128 *)v23;
      unint64_t v24 = *((void *)v23 + 2);
      unint64_t v25 = *((void *)v23 + 3);
      unsigned __int8 v26 = v23[32];
      sub_21F76DF78((uint64_t)v39, (void (*)(void, void, void, void, void))sub_21F7705AC);
      __n128 result = v37;
      *a1 = v37;
      a1[1].n128_u64[0] = v24;
      a1[1].n128_u64[1] = v25;
      a1[2].n128_u8[0] = v26;
      return result;
  }
}

double BasicChartSymbolShape.perceptualUnitRect.getter()
{
  return -0.0641895835;
}

void BasicChartSymbolShape.strokeBorder(lineWidth:)(uint64_t a1@<X8>, double a2@<D0>)
{
  double v3 = *(double *)v2;
  unsigned int v4 = *(unsigned __int8 *)(v2 + 8);
  if (v4 >= 5)
  {
    LOBYTE(v4) = 5;
    switch(*(void *)&v3)
    {
      case 1:
        double v3 = a2;
        LOBYTE(v4) = 1;
        break;
      case 2:
        double v3 = a2;
        LOBYTE(v4) = 2;
        break;
      case 3:
        double v3 = a2;
        LOBYTE(v4) = 3;
        break;
      case 4:
        double v3 = a2;
        LOBYTE(v4) = 4;
        break;
      case 5:
      case 6:
      case 7:
        break;
      default:
        LOBYTE(v4) = 0;
        double v3 = a2;
        break;
    }
  }
  *(double *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
}

double sub_21F9EC4B8@<D0>(__n128 *a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  BasicChartSymbolShape.path(in:)(v8, a2, a3, a4, a5);
  double result = v8[0].n128_f64[0];
  __n128 v7 = v8[1];
  *a1 = v8[0];
  a1[1] = v7;
  a1[2].n128_u8[0] = v9;
  return result;
}

uint64_t sub_21F9EC4FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_21F9EC9D4();

  return MEMORY[0x270F04808](a1, a2, a3, v6);
}

uint64_t sub_21F9EC560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_21F9EC9D4();

  return MEMORY[0x270F047D0](a1, a2, a3, v6);
}

uint64_t sub_21F9EC5C4(uint64_t a1)
{
  unint64_t v2 = sub_21F9EC9D4();

  return MEMORY[0x270F047E0](a1, v2);
}

BOOL sub_21F9EC610(uint64_t a1, char a2, uint64_t a3, char a4)
{
  switch(a2)
  {
    case 1:
      if (a4 != 1) {
        return 0;
      }
      double v4 = *(double *)&a1;
      double v5 = *(double *)&a3;
      return v4 == v5;
    case 2:
      if (a4 != 2) {
        return 0;
      }
      goto LABEL_11;
    case 3:
      if (a4 != 3) {
        return 0;
      }
      goto LABEL_11;
    case 4:
      if (a4 == 4) {
        goto LABEL_11;
      }
      return 0;
    case 5:
      switch(a1)
      {
        case 1:
          if (a4 != 5 || a3 != 1) {
            return 0;
          }
          BOOL result = 1;
          break;
        case 2:
          if (a4 != 5 || a3 != 2) {
            return 0;
          }
          BOOL result = 1;
          break;
        case 3:
          if (a4 != 5 || a3 != 3) {
            return 0;
          }
          BOOL result = 1;
          break;
        case 4:
          if (a4 != 5 || a3 != 4) {
            return 0;
          }
          BOOL result = 1;
          break;
        case 5:
          if (a4 != 5 || a3 != 5) {
            return 0;
          }
          BOOL result = 1;
          break;
        case 6:
          if (a4 != 5 || a3 != 6) {
            return 0;
          }
          BOOL result = 1;
          break;
        case 7:
          if (a4 != 5 || a3 != 7) {
            return 0;
          }
          BOOL result = 1;
          break;
        default:
          if (a4 != 5 || a3 != 0) {
            return 0;
          }
          BOOL result = 1;
          break;
      }
      return result;
    default:
      if (a4) {
        return 0;
      }
LABEL_11:
      double v4 = *(double *)&a1;
      double v5 = *(double *)&a3;
      return v4 == v5;
  }
}

unint64_t sub_21F9EC7DC(uint64_t a1)
{
  unint64_t result = sub_21F9EC804();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_21F9EC804()
{
  unint64_t result = qword_26AD44030;
  if (!qword_26AD44030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD44030);
  }
  return result;
}

unint64_t sub_21F9EC85C()
{
  unint64_t result = qword_26AD44038;
  if (!qword_26AD44038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD44038);
  }
  return result;
}

unint64_t sub_21F9EC8B4()
{
  unint64_t result = qword_26AD44040;
  if (!qword_26AD44040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD44040);
  }
  return result;
}

uint64_t sub_21F9EC908()
{
  return sub_21F9ECB00(&qword_267EEA6B0, &qword_267EEA6B8);
}

unint64_t sub_21F9EC930(uint64_t a1)
{
  unint64_t result = sub_21F9EC958();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_21F9EC958()
{
  unint64_t result = qword_26AD43F80;
  if (!qword_26AD43F80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD43F80);
  }
  return result;
}

unint64_t sub_21F9EC9AC(uint64_t a1)
{
  unint64_t result = sub_21F9EC9D4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_21F9EC9D4()
{
  unint64_t result = qword_26AD44F48;
  if (!qword_26AD44F48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD44F48);
  }
  return result;
}

unint64_t sub_21F9ECA2C()
{
  unint64_t result = qword_26AD44F50;
  if (!qword_26AD44F50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD44F50);
  }
  return result;
}

unint64_t sub_21F9ECA84()
{
  unint64_t result = qword_26AD44F58;
  if (!qword_26AD44F58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD44F58);
  }
  return result;
}

uint64_t sub_21F9ECAD8()
{
  return sub_21F9ECB00(&qword_267EEA6C0, &qword_267EEA6C8);
}

uint64_t sub_21F9ECB00(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_21F779EA4(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t dispatch thunk of ChartSymbolShape.perceptualUnitRect.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

ValueMetadata *type metadata accessor for BasicChartSymbolShape()
{
  return &type metadata for BasicChartSymbolShape;
}

uint64_t sub_21F9ECB7C()
{
  type metadata accessor for StrokedSymbolShape();

  return swift_getWitnessTable();
}

uint64_t type metadata accessor for StrokedSymbolShape()
{
  return sub_21F764F08();
}

uint64_t sub_21F9ECBE4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21F9ECC7C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  double v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 40 > 0x18)
  {
    uint64_t v9 = *a2;
    *double v4 = *a2;
    double v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v10 = *(void *)v11;
    *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
    *(_DWORD *)(v10 + 12) = *(_DWORD *)(v11 + 12);
    *(void *)(v10 + 16) = *(void *)(v11 + 16);
    *(void *)(v10 + 24) = *(void *)(v11 + 24);
    *(void *)(v10 + 32) = *(void *)(v11 + 32);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_21F9ECDA0(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();

  return swift_bridgeObjectRelease();
}

uint64_t sub_21F9ECE10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v7 + 12) = *(_DWORD *)(v8 + 12);
  *(void *)(v7 + 16) = *(void *)(v8 + 16);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  *(void *)(v7 + 32) = *(void *)(v8 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_21F9ECEB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v7 + 12) = *(_DWORD *)(v8 + 12);
  *(void *)(v7 + 16) = *(void *)(v8 + 16);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v7 + 32) = *(void *)(v8 + 32);
  return a1;
}

uint64_t sub_21F9ECF6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v7 + 12) = *(_DWORD *)(v8 + 12);
  *(void *)(v7 + 16) = *(void *)(v8 + 16);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  swift_bridgeObjectRelease();
  *(void *)(v7 + 32) = *(void *)(v8 + 32);
  return a1;
}

uint64_t sub_21F9ED018(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 40;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x21F9ED164);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

double sub_21F9ED178(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 40;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFD8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFD8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFD8)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 40);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return result;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return result;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return result;
      default:
        return result;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x21F9ED364);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
          if ((a2 & 0x80000000) != 0)
          {
            double result = 0.0;
            *(_OWORD *)(v19 + 8) = 0u;
            *(_OWORD *)(v19 + 24) = 0u;
            *(void *)unint64_t v19 = a2 ^ 0x80000000;
          }
          else
          {
            *(void *)(v19 + 24) = a2 - 1;
          }
        }
        else
        {
          double v18 = *(void (**)(void))(v6 + 56);
          v18();
        }
      }
      return result;
  }
}

uint64_t _s6Charts21BasicChartSymbolShapeV9ShapeTypeOwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 251);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 5) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t _s6Charts21BasicChartSymbolShapeV9ShapeTypeOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)double result = a2 - 251;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_21F9ED418(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 4u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 5);
  }
}

uint64_t sub_21F9ED430(uint64_t result, unsigned int a2)
{
  if (a2 >= 5)
  {
    *(void *)double result = a2 - 5;
    LOBYTE(a2) = 5;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for BasicChartSymbolShape.ShapeType()
{
  return &type metadata for BasicChartSymbolShape.ShapeType;
}

uint64_t sub_21F9ED458()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F9ED474()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F9ED490()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F9ED4AC(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21F9ED4E8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_21F9ED4F8(_DWORD *a1)
{
  return sub_21F9EB3AC(a1, *(id **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_21F9ED500()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_21F9ED510()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_21F9ED538(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_21F9ED548()
{
  return swift_release();
}

uint64_t sub_21F9ED550(unint64_t a1)
{
  return sub_21F78C9A8(a1, &qword_26AD46640, &qword_267EEA6D8, &qword_267EEA6D0, (uint64_t *)sub_21F80E9B0);
}

uint64_t sub_21F9ED580(uint64_t a1)
{
  return sub_21F9EE130(a1, (uint64_t (*)(void))sub_21F7E835C, (uint64_t (*)(void))type metadata accessor for AxisMarksConfiguration);
}

uint64_t sub_21F9ED5AC(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  uint64_t result = (uint64_t)sub_21F76B18C((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_21F9ED698(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v11 = v4 + v2;
  }
  else {
    int64_t v11 = v4;
  }
  uint64_t result = (uint64_t)sub_21F7E8D04((char *)result, v11, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v7 = *(void *)(v3 + 16);
  if ((*(void *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = (uint64_t)memcpy((void *)(v3 + 40 * v7 + 32), (const void *)(v6 + 32), 40 * v2);
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v8 = *(void *)(v3 + 16);
  BOOL v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    *(void *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_21F9ED784(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v11 = v4 + v2;
  }
  else {
    int64_t v11 = v4;
  }
  uint64_t result = (uint64_t)sub_21F7E9184((char *)result, v11, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v7 = *(void *)(v3 + 16);
  if ((*(void *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = (uint64_t)memcpy((void *)(v3 + 48 * v7 + 32), (const void *)(v6 + 32), 48 * v2);
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v8 = *(void *)(v3 + 16);
  BOOL v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    *(void *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_21F9ED870(uint64_t a1, uint64_t a2)
{
  int64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  int64_t v6 = v5 + a1;
  if (__OFADD__(v5, a1))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (int64_t v10 = v4[3] >> 1, v10 < v6))
  {
    if (v5 <= v6) {
      int64_t v11 = v6;
    }
    else {
      int64_t v11 = v5;
    }
    int64_t v4 = sub_21F7E9048(isUniquelyReferenced_nonNull_native, v11, 1, v4);
    int64_t v10 = v4[3] >> 1;
  }
  uint64_t v12 = v4[2];
  unsigned int v13 = (uint64_t *)(v10 - v12);
  uint64_t v14 = sub_21F9EE95C(&v44, &v4[v12 + 4], v10 - v12, a1, a2);
  if ((uint64_t)v14 < a1) {
    goto LABEL_15;
  }
  if ((uint64_t)v14 >= 1)
  {
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, v14);
    unint64_t v17 = (char *)v14 + v15;
    if (v16)
    {
      __break(1u);
LABEL_34:
      uint64_t v31 = v39 + v3 + 1;
      goto LABEL_35;
    }
    v4[2] = v17;
  }
  if (v14 != v13)
  {
LABEL_13:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v2 = v4;
    return result;
  }
LABEL_16:
  uint64_t v19 = v46;
  uint64_t v20 = v44;
  if (v46 == v44) {
    goto LABEL_13;
  }
  int64_t v21 = v4[2];
  uint64_t v41 = v45;
  uint64_t v42 = v44;
  double v22 = sub_21F9EF298((uint64_t (*)())v43, v46, v44, v45);
  uint64_t v24 = *v23;
  swift_bridgeObjectRetain();
  uint64_t result = ((uint64_t (*)(unsigned char *, void))v22)(v43, 0);
  uint64_t v25 = v20;
  if (v19 < 0 || v19 >= v20) {
    goto LABEL_38;
  }
  uint64_t v26 = v19 + 1;
  uint64_t v27 = -v20;
  int64_t v28 = v21;
LABEL_21:
  while (1)
  {
    unint64_t v29 = v4[3];
    int64_t v30 = v29 >> 1;
    uint64_t v31 = v28 + 1;
    if ((uint64_t)(v29 >> 1) < v28 + 1) {
      break;
    }
    if (v28 < v30) {
      goto LABEL_23;
    }
LABEL_20:
    v4[2] = v28;
  }
  int64_t v4 = sub_21F7E9048((void *)(v29 > 1), v28 + 1, 1, v4);
  int64_t v30 = v4[3] >> 1;
  if (v28 >= v30) {
    goto LABEL_20;
  }
LABEL_23:
  int64_t v40 = v30;
  double v32 = &v4[v28];
  v32[4] = v24;
  uint64_t v33 = v41;
  if (v26 == v25)
  {
LABEL_35:
    v4[2] = v31;
    goto LABEL_13;
  }
  uint64_t v3 = 0;
  uint64_t v34 = v27 + v26;
  int64_t v39 = v28;
  int64_t v35 = ~v28 + v30;
  long long v36 = v32 + 5;
  while (1)
  {
    __n128 v37 = sub_21F9EF298((uint64_t (*)())v43, v26 + v3, v25, v33);
    uint64_t v24 = *v38;
    swift_bridgeObjectRetain();
    uint64_t result = ((uint64_t (*)(unsigned char *, void))v37)(v43, 0);
    uint64_t v25 = v42;
    if (v26 < 0 || v26 + v3 >= v42) {
      break;
    }
    if (v35 == v3)
    {
      v26 += v3 + 1;
      int64_t v28 = v40;
      uint64_t v27 = -v42;
      v4[2] = v40;
      goto LABEL_21;
    }
    v36[v3++] = v24;
    uint64_t v33 = v41;
    if (!(v34 + v3)) {
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_21F9EDB14(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v11 = v4 + v2;
  }
  else {
    int64_t v11 = v4;
  }
  uint64_t result = (uint64_t)sub_21F7E8F4C((char *)result, v11, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v7 = *(void *)(v3 + 16);
  if ((*(void *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = (uint64_t)memcpy((void *)(v3 + 8 * v7 + 32), (const void *)(v6 + 32), 8 * v2);
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v8 = *(void *)(v3 + 16);
  BOOL v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    *(void *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_21F9EDBF8(uint64_t a1)
{
  return sub_21F9EE130(a1, (uint64_t (*)(void))sub_21F7E9B24, type metadata accessor for AnyVectorizedRenderer);
}

uint64_t sub_21F9EDC24(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  uint64_t result = (uint64_t)sub_21F7E5FD8((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_21F9EDD10(uint64_t a1)
{
  return sub_21F9EDD50(a1, (uint64_t (*)(void))sub_21F7E9B44, &qword_267EE7308);
}

uint64_t sub_21F9EDD30(uint64_t a1)
{
  return sub_21F9EDD50(a1, (uint64_t (*)(void))sub_21F7E9DE4, &qword_26AD47C00);
}

uint64_t sub_21F9EDD50(uint64_t result, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t v4 = *(void *)(result + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v9 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v6 + v4 <= *(void *)(v5 + 24) >> 1)
  {
    if (*(void *)(v9 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  uint64_t result = a2();
  uint64_t v5 = result;
  if (!*(void *)(v9 + 16))
  {
LABEL_10:
    if (!v4) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
LABEL_5:
  uint64_t v10 = (*(void *)(v5 + 24) >> 1) - *(void *)(v5 + 16);
  uint64_t result = sub_21F76CA40(a3);
  if (v10 < v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_11:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = v5;
    return result;
  }
  uint64_t v11 = *(void *)(v5 + 16);
  BOOL v12 = __OFADD__(v11, v4);
  uint64_t v13 = v11 + v4;
  if (!v12)
  {
    *(void *)(v5 + 16) = v13;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_21F9EDE8C(uint64_t result, unint64_t a2)
{
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  int64_t v6 = v5 + result;
  if (__OFADD__(v5, result))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v8 = result;
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (int64_t v10 = *((void *)v4 + 3) >> 1, v10 < v6))
  {
    if (v5 <= v6) {
      int64_t v11 = v6;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_21F7E8CF8(isUniquelyReferenced_nonNull_native, v11, 1, v4);
    int64_t v10 = *((void *)v4 + 3) >> 1;
  }
  uint64_t v12 = *((void *)v4 + 2);
  uint64_t v13 = v10 - v12;
  uint64_t result = (uint64_t)sub_21F9EF1B0(&v38, (unint64_t *)&v4[8 * v12 + 32], v10 - v12, v8, a2);
  if (result < v8) {
    goto LABEL_15;
  }
  if (result >= 1)
  {
    uint64_t v14 = *((void *)v4 + 2);
    BOOL v15 = __OFADD__(v14, result);
    uint64_t v16 = v14 + result;
    if (v15)
    {
      __break(1u);
LABEL_34:
      uint64_t v27 = v34 + v3 + 1;
      goto LABEL_35;
    }
    *((void *)v4 + 2) = v16;
  }
  if (result != v13)
  {
LABEL_13:
    *uint64_t v2 = v4;
    return result;
  }
LABEL_16:
  uint64_t v17 = v40;
  uint64_t v18 = v38;
  if (v40 == v38) {
    goto LABEL_13;
  }
  int64_t v19 = *((void *)v4 + 2);
  uint64_t v36 = v39;
  uint64_t v20 = sub_21F9EF2F4(v37, v40, v38, v39);
  uint64_t v22 = *v21;
  uint64_t result = ((uint64_t (*)(void *, void))v20)(v37, 0);
  if (v17 < 0 || v17 >= v18) {
    goto LABEL_37;
  }
  uint64_t v23 = v17 + 1;
  uint64_t v24 = -v18;
LABEL_21:
  while (1)
  {
    unint64_t v25 = *((void *)v4 + 3);
    int64_t v26 = v25 >> 1;
    uint64_t v27 = v19 + 1;
    if ((uint64_t)(v25 >> 1) < v19 + 1) {
      break;
    }
    if (v19 < v26) {
      goto LABEL_23;
    }
LABEL_20:
    *((void *)v4 + 2) = v19;
  }
  uint64_t result = (uint64_t)sub_21F7E8CF8((char *)(v25 > 1), v19 + 1, 1, v4);
  uint64_t v4 = (char *)result;
  int64_t v26 = *(void *)(result + 24) >> 1;
  if (v19 >= v26) {
    goto LABEL_20;
  }
LABEL_23:
  int64_t v35 = v26;
  int64_t v28 = &v4[8 * v19];
  *((void *)v28 + 4) = v22;
  if (v23 == v18)
  {
LABEL_35:
    *((void *)v4 + 2) = v27;
    goto LABEL_13;
  }
  uint64_t v3 = 0;
  uint64_t v29 = v24 + v23;
  int64_t v34 = v19;
  int64_t v30 = ~v19 + v26;
  uint64_t v31 = v28 + 40;
  while (1)
  {
    double v32 = sub_21F9EF2F4(v37, v23 + v3, v18, v36);
    uint64_t v22 = *v33;
    uint64_t result = ((uint64_t (*)(void *, void))v32)(v37, 0);
    if (v23 < 0 || v23 + v3 >= v18) {
      break;
    }
    if (v30 == v3)
    {
      v23 += v3 + 1;
      int64_t v19 = v35;
      uint64_t v24 = -v18;
      *((void *)v4 + 2) = v35;
      goto LABEL_21;
    }
    *(void *)&v31[8 * v3++] = v22;
    if (!(v29 + v3)) {
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_21F9EE104(uint64_t a1)
{
  return sub_21F9EE130(a1, (uint64_t (*)(void))sub_21F7EAA34, (uint64_t (*)(void))type metadata accessor for ChartContentList.Item);
}

uint64_t sub_21F9EE130(uint64_t result, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v4 = *(void *)(result + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v9 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v6 + v4 <= *(void *)(v5 + 24) >> 1)
  {
    if (*(void *)(v9 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  uint64_t result = a2();
  uint64_t v5 = result;
  if (!*(void *)(v9 + 16))
  {
LABEL_10:
    if (!v4) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
LABEL_5:
  uint64_t v10 = (*(void *)(v5 + 24) >> 1) - *(void *)(v5 + 16);
  uint64_t result = a3(0);
  if (v10 < v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_11:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = v5;
    return result;
  }
  uint64_t v11 = *(void *)(v5 + 16);
  BOOL v12 = __OFADD__(v11, v4);
  uint64_t v13 = v11 + v4;
  if (!v12)
  {
    *(void *)(v5 + 16) = v13;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
  return result;
}

void *static BuilderTuple<each A>._makeAxisContent(_:_:)@<X0>(uint64_t TupleTypeMetadata@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  unint64_t v6 = a2;
  uint64_t v51 = a5;
  uint64_t v7 = (void *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    uint64_t v8 = *v7;
  }
  else
  {
    MEMORY[0x270FA5388](TupleTypeMetadata);
    uint64_t v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
    {
      unint64_t v11 = 0;
      if (v6 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)(v10 - (char *)v7) < 0x20) {
        goto LABEL_9;
      }
      unint64_t v11 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      BOOL v12 = (long long *)(v7 + 2);
      uint64_t v13 = v10 + 16;
      unint64_t v14 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *uint64_t v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v11 != v6)
      {
LABEL_9:
        unint64_t v16 = v6 - v11;
        uint64_t v17 = v11;
        uint64_t v18 = &v10[8 * v11];
        int64_t v19 = &v7[v17];
        do
        {
          uint64_t v20 = *v19++;
          *(void *)uint64_t v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v8 = TupleTypeMetadata;
  }
  __n128 v21 = MEMORY[0x270FA5388](TupleTypeMetadata);
  uint64_t v49 = v23;
  uint64_t v24 = *(uint64_t (**)(__n128))(v23 + 16);
  uint64_t v53 = (char *)&v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = v24(v21);
  uint64_t v50 = v8;
  if (!v6)
  {
    int64_t v28 = (void *)MEMORY[0x263F8EE78];
LABEL_33:
    uint64_t v47 = v50;
    *uint64_t v51 = v28;
    return (void *)(*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v53, v47);
  }
  int64_t v26 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFFELL);
  uint64_t v27 = (_DWORD *)(v8 + 32);
  int64_t v28 = (void *)MEMORY[0x263F8EE78];
  unint64_t v52 = v6;
  while (1)
  {
    uint64_t v56 = v7;
    uint64_t v29 = *v7;
    uint64_t v30 = *v26;
    __n128 v32 = MEMORY[0x270FA5388](v25);
    int64_t v34 = (char *)&v48 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v55 = v35;
    int v36 = v52 == 1 ? 0 : *v27;
    uint64_t v54 = v31;
    (*(void (**)(char *, char *, uint64_t, __n128))(v31 + 16))(v34, &v53[v36], v29, v32);
    swift_getDynamicType();
    uint64_t result = (*(void *(**)(uint64_t *__return_ptr, char *))(v30 + 8))(&v57, v34);
    uint64_t v38 = v57;
    uint64_t v39 = *(void *)(v57 + 16);
    int64_t v40 = v28[2];
    int64_t v41 = v40 + v39;
    if (__OFADD__(v40, v39)) {
      break;
    }
    uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
    if (result && v41 <= v28[3] >> 1)
    {
      if (*(void *)(v38 + 16)) {
        goto LABEL_28;
      }
    }
    else
    {
      if (v40 <= v41) {
        int64_t v42 = v40 + v39;
      }
      else {
        int64_t v42 = v40;
      }
      uint64_t result = (void *)sub_21F7E835C((size_t)result, v42, 1, v28);
      int64_t v28 = result;
      if (*(void *)(v38 + 16))
      {
LABEL_28:
        uint64_t v43 = (v28[3] >> 1) - v28[2];
        uint64_t result = (void *)type metadata accessor for AxisMarksConfiguration();
        if (v43 < v39) {
          goto LABEL_36;
        }
        uint64_t result = (void *)swift_arrayInitWithCopy();
        if (v39)
        {
          uint64_t v44 = v28[2];
          BOOL v45 = __OFADD__(v44, v39);
          uint64_t v46 = v44 + v39;
          if (v45) {
            goto LABEL_37;
          }
          v28[2] = v46;
        }
        goto LABEL_15;
      }
    }
    if (v39) {
      goto LABEL_35;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    uint64_t v25 = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v34, v29);
    v27 += 4;
    ++v26;
    uint64_t v7 = v56 + 1;
    if (!--v6) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

void *sub_21F9EE690@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  return static BuilderTuple<each A>._makeAxisContent(_:_:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a3 - 8), a4);
}

uint64_t sub_21F9EE6A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v29 = a1;
  uint64_t v32 = type metadata accessor for DateBins.Storage(0);
  MEMORY[0x270FA5388](v32);
  uint64_t v8 = (uint64_t *)((char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = sub_21F76CA40(&qword_26AD47AA8);
  uint64_t v31 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9 - 8);
  unint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  unint64_t v14 = (char *)&v27 - v13;
  uint64_t v15 = sub_21F76CA40(&qword_267EE83B0);
  uint64_t v16 = v15 - 8;
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_21F9EF37C(v4, (uint64_t)v18);
  uint64_t v20 = *(int *)(v16 + 44);
  *(void *)&v18[v20] = 0;
  if (!a2)
  {
    a3 = 0;
    goto LABEL_17;
  }
  if (!a3)
  {
LABEL_17:
    sub_21F76C9DC((uint64_t)v18, v29, &qword_267EE83B0);
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    unint64_t v21 = 0;
    uint64_t v22 = a3;
    a3 = 0;
    uint64_t v28 = v22;
    uint64_t v30 = v22 - 1;
    while (1)
    {
      sub_21F9EF3E0((uint64_t)v18, (uint64_t)v8);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload == 1)
        {
          uint64_t v24 = *(void *)((char *)v8 + *(int *)(sub_21F76CA40(&qword_26AD45E08) + 64));
          sub_21F9EF444((uint64_t)v8);
          if (v21 == v24) {
            goto LABEL_17;
          }
        }
        else
        {
          uint64_t v25 = *(void *)(*v8 + 16);
          swift_bridgeObjectRelease();
          if (v21 == v25 - 1) {
            goto LABEL_17;
          }
        }
      }
      else if (v21 == v8[2])
      {
        goto LABEL_17;
      }
      uint64_t result = DateBins.subscript.getter(v21, (uint64_t)v11);
      uint64_t v26 = *(void *)&v18[v20];
      unint64_t v21 = v26 + 1;
      if (__OFADD__(v26, 1)) {
        break;
      }
      *(void *)&v18[v20] = v21;
      sub_21F76C9DC((uint64_t)v11, (uint64_t)v14, &qword_26AD47AA8);
      sub_21F76C9DC((uint64_t)v14, a2, &qword_26AD47AA8);
      if (v30 == a3)
      {
        a3 = v28;
        goto LABEL_17;
      }
      a2 += *(void *)(v31 + 72);
      ++a3;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t *sub_21F9EE95C(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = result;
  if (!a2)
  {
    uint64_t v9 = 0;
    uint64_t result = 0;
    goto LABEL_16;
  }
  uint64_t v8 = a3;
  if (!a3)
  {
    uint64_t v9 = 0;
LABEL_15:
    uint64_t result = (uint64_t *)v8;
    goto LABEL_16;
  }
  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v9 = a4;
  uint64_t result = (uint64_t *)a4;
  if (!a4)
  {
LABEL_16:
    *uint64_t v7 = a4;
    v7[1] = a5;
    v7[2] = v9;
    return result;
  }
  if (a4 >= 1)
  {
    *a2 = a5;
    if (a3 != 1)
    {
      uint64_t v11 = 1;
      while (a4 != v11)
      {
        uint64_t v12 = v11 + 1;
        a2[v11] = a5;
        swift_bridgeObjectRetain();
        uint64_t v11 = v12;
        if (v8 == v12) {
          goto LABEL_14;
        }
      }
      uint64_t v8 = a4;
    }
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v9 = v8;
    goto LABEL_15;
  }
LABEL_18:
  __break(1u);
  return result;
}

int64_t *sub_21F9EEA2C(int64_t *result, int64_t *a2, int64_t a3, int64_t a4, int64_t a5)
{
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
LABEL_6:
    unint64_t v5 = a4;
LABEL_7:
    *uint64_t result = a4;
    result[1] = a5;
    result[2] = v5;
    return (int64_t *)a3;
  }
  if (a3 < 0) {
    goto LABEL_31;
  }
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (a5 < a4) {
    goto LABEL_32;
  }
  if (a5 > a4)
  {
    unint64_t v5 = a4 + 1;
    *a2 = a4;
    unint64_t v6 = a3 - 1;
    if (a3 == 1) {
      goto LABEL_7;
    }
    unint64_t v7 = a3 - 2;
    if (a3 - 2 >= (unint64_t)(~a4 + a5)) {
      unint64_t v7 = ~a4 + a5;
    }
    if (v7 < v6) {
      unint64_t v6 = v7;
    }
    unint64_t v8 = v6 + 1;
    if (v8 > 4)
    {
      uint64_t v11 = v8 & 3;
      if ((v8 & 3) == 0) {
        uint64_t v11 = 4;
      }
      unint64_t v12 = v8 - v11;
      uint64_t v9 = v8 - v11 + 1;
      unint64_t v13 = v5 + v12;
      uint64_t v10 = &a2[v12];
      int64x2_t v14 = vaddq_s64(vdupq_n_s64(v5), (int64x2_t)xmmword_21FA28230);
      uint64_t v15 = (int64x2_t *)(a2 + 3);
      int64x2_t v16 = vdupq_n_s64(2uLL);
      do
      {
        v15[-1] = v14;
        *uint64_t v15 = vaddq_s64(v14, v16);
        int64x2_t v14 = vaddq_s64(v14, vdupq_n_s64(4uLL));
        v15 += 2;
        v12 -= 4;
      }
      while (v12);
      unint64_t v5 = v13;
    }
    else
    {
      uint64_t v9 = 1;
      uint64_t v10 = a2;
    }
    uint64_t v17 = v10 + 1;
    int64_t v18 = v5;
    while (a3 != v9)
    {
      if (a5 == v18)
      {
        unint64_t v5 = a5;
        a3 = a5 - a4;
        goto LABEL_7;
      }
      if (v18 >= a5) {
        goto LABEL_30;
      }
      ++v9;
      unint64_t v5 = v18 + 1;
      *v17++ = v18++;
      if (a3 == v9) {
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_21F9EEB5C(void *result, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1 << -(char)v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v11 = 0;
    uint64_t v12 = 0;
LABEL_36:
    *uint64_t result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (void *)v12;
  }
  if (!a3)
  {
    int64_t v11 = 0;
    uint64_t v12 = 0;
    goto LABEL_36;
  }
  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v10 = a2;
  uint64_t v20 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v21 = result;
  int64_t v11 = 0;
  uint64_t v12 = 0;
  int64_t v13 = (unint64_t)(63 - v6) >> 6;
  while (v8)
  {
    unint64_t v14 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v15 = v14 | (v11 << 6);
LABEL_9:
    ++v12;
    uint64_t v16 = *(void *)(*(void *)(a4 + 48) + 8 * v15);
    sub_21F756FB4(*(void *)(a4 + 56) + 776 * v15, (uint64_t)&__src[1]);
    __src[0] = v16;
    memcpy(__dst, __src, sizeof(__dst));
    uint64_t result = memcpy(v10, __dst, 0x309uLL);
    v10 += 784;
    if (v12 == a3)
    {
      uint64_t v12 = a3;
LABEL_35:
      uint64_t v6 = v20;
      uint64_t result = v21;
      goto LABEL_36;
    }
  }
  int64_t v17 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v17 >= v13) {
    goto LABEL_34;
  }
  unint64_t v18 = *(void *)(v5 + 8 * v17);
  if (v18) {
    goto LABEL_23;
  }
  int64_t v19 = v11 + 2;
  ++v11;
  if (v17 + 1 >= v13) {
    goto LABEL_34;
  }
  unint64_t v18 = *(void *)(v5 + 8 * v19);
  if (v18) {
    goto LABEL_16;
  }
  int64_t v11 = v17 + 1;
  if (v17 + 2 >= v13) {
    goto LABEL_34;
  }
  unint64_t v18 = *(void *)(v5 + 8 * (v17 + 2));
  if (v18)
  {
    v17 += 2;
    goto LABEL_23;
  }
  int64_t v11 = v17 + 2;
  if (v17 + 3 >= v13) {
    goto LABEL_34;
  }
  unint64_t v18 = *(void *)(v5 + 8 * (v17 + 3));
  if (v18)
  {
    v17 += 3;
    goto LABEL_23;
  }
  int64_t v19 = v17 + 4;
  int64_t v11 = v17 + 3;
  if (v17 + 4 >= v13)
  {
LABEL_34:
    unint64_t v8 = 0;
    goto LABEL_35;
  }
  unint64_t v18 = *(void *)(v5 + 8 * v19);
  if (v18)
  {
LABEL_16:
    int64_t v17 = v19;
LABEL_23:
    unint64_t v8 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v11 = v17;
    goto LABEL_9;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v13)
    {
      int64_t v11 = v13 - 1;
      goto LABEL_34;
    }
    unint64_t v18 = *(void *)(v5 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_23;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_21F9EED84(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    _OWORD v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  int64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    *int64_t v11 = *(void *)(*(void *)(a4 + 48) + 8 * v16);
    v11[1] = v20;
    if (v13 == v10)
    {
      swift_retain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_retain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *sub_21F9EEF88(void *result, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1 << -(char)v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v11 = 0;
    uint64_t v9 = 0;
LABEL_39:
    *uint64_t result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (void *)v9;
  }
  uint64_t v9 = a3;
  if (!a3)
  {
    int64_t v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v10 = a2;
  uint64_t v20 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v21 = result;
  int64_t v11 = 0;
  uint64_t v12 = 0;
  int64_t v13 = (unint64_t)(63 - v6) >> 6;
  if (!v8) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v15 = v14 | (v11 << 6);
  while (1)
  {
    ++v12;
    int64_t v19 = (const void *)(*(void *)(a4 + 56) + 304 * v15);
    memcpy(__dst, v19, 0x130uLL);
    memmove(v10, v19, 0x130uLL);
    if (v12 == v9)
    {
      sub_21F7F3F44((uint64_t)__dst);
      goto LABEL_38;
    }
    v10 += 304;
    uint64_t result = (void *)sub_21F7F3F44((uint64_t)__dst);
    if (v8) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v16 >= v13) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v5 + 8 * v16);
    if (!v17)
    {
      v11 += 2;
      if (v16 + 1 >= v13)
      {
        unint64_t v8 = 0;
        int64_t v11 = v16;
      }
      else
      {
        unint64_t v17 = *(void *)(v5 + 8 * v11);
        if (v17) {
          goto LABEL_14;
        }
        int64_t v18 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v5 + 8 * v18);
        if (v17)
        {
LABEL_17:
          int64_t v16 = v18;
          goto LABEL_18;
        }
        int64_t v11 = v16 + 3;
        if (v16 + 3 < v13)
        {
          unint64_t v17 = *(void *)(v5 + 8 * v11);
          if (v17)
          {
LABEL_14:
            int64_t v16 = v11;
            goto LABEL_18;
          }
          int64_t v18 = v16 + 4;
          if (v16 + 4 >= v13)
          {
LABEL_33:
            unint64_t v8 = 0;
            goto LABEL_37;
          }
          unint64_t v17 = *(void *)(v5 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              int64_t v16 = v18 + 1;
              if (__OFADD__(v18, 1)) {
                goto LABEL_42;
              }
              if (v16 >= v13)
              {
                unint64_t v8 = 0;
                int64_t v11 = v13 - 1;
                goto LABEL_37;
              }
              unint64_t v17 = *(void *)(v5 + 8 * v16);
              ++v18;
              if (v17) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v8 = 0;
        int64_t v11 = v16 + 2;
      }
LABEL_37:
      uint64_t v9 = v12;
LABEL_38:
      uint64_t v6 = v20;
      uint64_t result = v21;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v16 << 6);
    int64_t v11 = v16;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t *sub_21F9EF1B0(uint64_t *result, unint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!a2)
  {
    uint64_t v5 = 0;
    goto LABEL_23;
  }
  if (!a3)
  {
LABEL_22:
    uint64_t v5 = a3;
    goto LABEL_23;
  }
  if (a3 < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v5 = a4;
  if (!a4)
  {
LABEL_23:
    *uint64_t result = a4;
    result[1] = a5;
    result[2] = v5;
    return (uint64_t *)v5;
  }
  unint64_t v6 = a4 - 1;
  if (a4 >= 1)
  {
    *a2 = a5;
    if (a3 != 1)
    {
      if (a3 - 2 < v6) {
        unint64_t v6 = a3 - 2;
      }
      if (v6 >= a3 - 1) {
        unint64_t v6 = a3 - 1;
      }
      unint64_t v7 = v6 + 1;
      if (v7 > 4)
      {
        uint64_t v10 = v7 & 3;
        if ((v7 & 3) == 0) {
          uint64_t v10 = 4;
        }
        unint64_t v11 = v7 - v10;
        uint64_t v8 = v7 - v10 + 1;
        uint64_t v9 = &a2[v11];
        int64x2_t v12 = vdupq_n_s64(a5);
        int64_t v13 = (int64x2_t *)(a2 + 3);
        do
        {
          v13[-1] = v12;
          *int64_t v13 = v12;
          v13 += 2;
          v11 -= 4;
        }
        while (v11);
      }
      else
      {
        uint64_t v8 = 1;
        uint64_t v9 = a2;
      }
      unint64_t v14 = v9 + 1;
      while (a3 != v8)
      {
        if (a4 == v8)
        {
          uint64_t v5 = a4;
          goto LABEL_23;
        }
        ++v8;
        *v14++ = a5;
        if (a3 == v8) {
          goto LABEL_22;
        }
      }
      __break(1u);
      goto LABEL_26;
    }
    goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for AxisContentBuilder()
{
  return &type metadata for AxisContentBuilder;
}

uint64_t (*sub_21F9EF298(uint64_t (*result)(), uint64_t a2, uint64_t a3, uint64_t a4))()
{
  if (a2 < 0 || a2 >= a3)
  {
    __break(1u);
  }
  else
  {
    *(void *)uint64_t result = a4;
    swift_bridgeObjectRetain();
    return destroy for AnyPrimitivePlottableArray;
  }
  return result;
}

void *sub_21F9EF2F4(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 < 0 || a2 >= a3)
  {
    __break(1u);
  }
  else
  {
    *uint64_t result = a4;
    return nullsub_1;
  }
  return result;
}

uint64_t sub_21F9EF32C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_21F779EA4(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21F9EF37C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DateBins(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21F9EF3E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DateBins.Storage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21F9EF444(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CalendarBinningUnit(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21F9EF4A0(uint64_t a1)
{
  uint64_t v2 = sub_21FA23F20();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v73 = (char *)v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  unint64_t v7 = (char *)v63 - v6;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v63 - v9;
  MEMORY[0x270FA5388](v11);
  uint64_t v72 = (char *)v63 - v12;
  MEMORY[0x270FA5388](v13);
  unint64_t v15 = (char *)v63 - v14;
  uint64_t v16 = sub_21F76CA40(&qword_26AD45880);
  MEMORY[0x270FA5388](v16 - 8);
  int64_t v18 = (char *)v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(a1 + 16);
  v63[1] = a1;
  if (!v19)
  {
    uint64_t v57 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    swift_bridgeObjectRetain();
LABEL_17:
    uint64_t v56 = 1;
    v57(v18, 1, 1, v2);
    goto LABEL_29;
  }
  uint64_t v68 = v7;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  uint64_t v21 = v3 + 16;
  uint64_t v20 = v22;
  uint64_t v23 = a1 + ((*(unsigned __int8 *)(v21 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 64));
  uint64_t v64 = *(void *)(v21 + 56);
  char v70 = (uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 32);
  char v71 = (void *)(v21 + 40);
  unsigned __int8 v69 = (void (**)(char *, char *, uint64_t))(v21 + 16);
  char v77 = (void (**)(char *, uint64_t))(v21 - 8);
  swift_bridgeObjectRetain();
  uint64_t v65 = v10;
  uint64_t v66 = v18;
  while (1)
  {
    uint64_t v75 = v19;
    v20(v18, v23, v2);
    uint64_t v24 = (void (*)(char *, void, uint64_t, uint64_t))*v71;
    ((void (*)(char *, void, uint64_t, uint64_t))*v71)(v18, 0, 1, v2);
    int v25 = (*v70)(v18, 1, v2);
    BOOL v76 = v25 == 1;
    if (v25 == 1)
    {
      uint64_t v56 = v76;
      goto LABEL_29;
    }
    (*v69)(v15, v18, v2);
    uint64_t v26 = sub_21FA23EE0();
    uint64_t v27 = v77;
    uint64_t v67 = (unint64_t)v77 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    if (v28)
    {
      uint64_t v30 = v10;
      uint64_t v31 = v72;
      v20(v72, (uint64_t)v15, v2);
LABEL_20:
      uint64_t v58 = *v27;
      uint64_t v59 = v2;
      uint64_t v41 = v2;
      int64_t v42 = v58;
      v58(v31, v59);
LABEL_22:
      uint64_t v43 = v30;
      uint64_t v32 = (void (*)(char *, char *, uint64_t))v20;
      v20(v30, (uint64_t)v15, v41);
LABEL_23:
      uint64_t v60 = v68;
      v42(v43, v41);
LABEL_24:
      v32(v60, v15, v41);
      goto LABEL_25;
    }
    uint64_t v29 = v26;
    uint64_t v74 = v23;
    uint64_t v30 = v10;
    uint64_t v31 = v72;
    v20(v72, (uint64_t)v15, v2);
    if (v29 != 1) {
      goto LABEL_20;
    }
    v63[0] = v24;
    uint64_t v32 = (void (*)(char *, char *, uint64_t))v20;
    uint64_t v33 = v21;
    uint64_t v34 = sub_21FA23EB0();
    uint64_t v35 = v31;
    uint64_t v36 = v34;
    char v38 = v37;
    uint64_t v39 = *v27;
    uint64_t v40 = v2;
    uint64_t v41 = v2;
    int64_t v42 = v39;
    v39(v35, v40);
    if (v38)
    {
      uint64_t v20 = (void (*)(char *, uint64_t, uint64_t))v32;
      goto LABEL_22;
    }
    uint64_t v43 = v30;
    v32(v30, v15, v41);
    if (v36 != 1) {
      goto LABEL_23;
    }
    uint64_t v44 = sub_21FA23EC0();
    char v46 = v45;
    v42(v43, v41);
    if (v46)
    {
      uint64_t v60 = v68;
      goto LABEL_24;
    }
    uint64_t v47 = v68;
    v32(v68, v15, v41);
    if (v44) {
      break;
    }
    uint64_t v48 = sub_21FA23F00();
    char v50 = v49;
    v42(v47, v41);
    if (v50) {
      goto LABEL_26;
    }
    uint64_t v51 = v73;
    v32(v73, v15, v41);
    if (v48) {
      goto LABEL_27;
    }
    uint64_t v52 = sub_21FA23F10();
    uint64_t v53 = v51;
    char v55 = v54;
    v42(v53, v41);
    if (v55) {
      goto LABEL_28;
    }
    v42(v15, v41);
    uint64_t v56 = v76;
    if (v52) {
      goto LABEL_29;
    }
    uint64_t v10 = v65;
    uint64_t v23 = v74 + v64;
    uint64_t v19 = v75 - 1;
    uint64_t v21 = v33;
    uint64_t v20 = (void (*)(char *, uint64_t, uint64_t))v32;
    uint64_t v2 = v41;
    int64_t v18 = v66;
    if (v75 == 1)
    {
      uint64_t v57 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v63[0];
      goto LABEL_17;
    }
  }
  uint64_t v60 = v47;
LABEL_25:
  v42(v60, v41);
LABEL_26:
  uint64_t v61 = v73;
  v32(v73, v15, v41);
  uint64_t v51 = v61;
LABEL_27:
  v42(v51, v41);
LABEL_28:
  v42(v15, v41);
  uint64_t v56 = 0;
LABEL_29:
  swift_bridgeObjectRelease();
  return v56;
}

uint64_t sub_21F9EFA5C(uint64_t a1)
{
  uint64_t v2 = sub_21FA23F20();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v57 = (char *)v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  unint64_t v7 = (char *)v49 - v6;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v49 - v9;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v49 - v12;
  uint64_t v14 = sub_21F76CA40(&qword_26AD45880);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(a1 + 16);
  v49[2] = a1;
  if (v17)
  {
    uint64_t v53 = v7;
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v18 = v3 + 16;
    uint64_t v62 = v19;
    uint64_t v20 = a1 + ((*(unsigned __int8 *)(v18 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 64));
    uint64_t v51 = *(void *)(v18 + 56);
    char v54 = (void (**)(char *, char *, uint64_t))(v18 + 16);
    char v55 = (uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 32);
    uint64_t v21 = (void (**)(char *, uint64_t))(v18 - 8);
    swift_bridgeObjectRetain();
    uint64_t v56 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 40);
    v49[1] = (v18 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v61 = v13;
    uint64_t v52 = v16;
    while (1)
    {
      uint64_t v59 = v20;
      v62(v16, v20, v2);
      uint64_t v22 = *v56;
      (*v56)(v16, 0, 1, v2);
      int v23 = (*v55)(v16, 1, v2);
      BOOL v60 = v23 == 1;
      if (v23 == 1)
      {
        uint64_t v45 = v60;
        goto LABEL_27;
      }
      (*v54)(v13, v16, v2);
      uint64_t v24 = sub_21FA23EB0();
      if (v25)
      {
        v62(v10, (uint64_t)v13, v2);
LABEL_18:
        uint64_t v34 = *v21;
        (*v21)(v10, v2);
LABEL_20:
        uint64_t v36 = v53;
        v62(v53, (uint64_t)v61, v2);
LABEL_22:
        v34(v36, v2);
LABEL_24:
        uint64_t v47 = v57;
        v62(v57, (uint64_t)v61, v2);
        uint64_t v40 = v47;
LABEL_25:
        v34(v40, v2);
        goto LABEL_26;
      }
      uint64_t v26 = v24;
      v62(v10, (uint64_t)v13, v2);
      if (v26 != 1) {
        goto LABEL_18;
      }
      char v50 = v22;
      uint64_t v58 = v17;
      uint64_t v27 = v18;
      uint64_t v28 = sub_21FA23EC0();
      uint64_t v29 = v10;
      uint64_t v30 = v2;
      uint64_t v31 = v28;
      char v33 = v32;
      uint64_t v34 = *v21;
      uint64_t v35 = v29;
      (*v21)(v29, v30);
      if (v33)
      {
        uint64_t v2 = v30;
        goto LABEL_20;
      }
      uint64_t v36 = v53;
      v62(v53, (uint64_t)v61, v30);
      if (v31)
      {
        uint64_t v2 = v30;
        goto LABEL_22;
      }
      uint64_t v37 = sub_21FA23F00();
      char v39 = v38;
      v34(v36, v30);
      if (v39)
      {
        uint64_t v2 = v30;
        goto LABEL_24;
      }
      uint64_t v40 = v57;
      v62(v57, (uint64_t)v61, v30);
      if (v37)
      {
        uint64_t v2 = v30;
        goto LABEL_25;
      }
      uint64_t v41 = sub_21FA23F10();
      int64_t v42 = v40;
      char v44 = v43;
      v34(v42, v30);
      if (v44) {
        break;
      }
      uint64_t v13 = v61;
      uint64_t v2 = v30;
      v34(v61, v30);
      uint64_t v45 = v60;
      if (v41) {
        goto LABEL_27;
      }
      uint64_t v20 = v59 + v51;
      uint64_t v17 = v58 - 1;
      uint64_t v18 = v27;
      uint64_t v10 = v35;
      uint64_t v16 = v52;
      if (v58 == 1)
      {
        char v46 = v50;
        goto LABEL_15;
      }
    }
    uint64_t v2 = v30;
LABEL_26:
    v34(v61, v2);
    uint64_t v45 = 0;
  }
  else
  {
    char v46 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    swift_bridgeObjectRetain();
LABEL_15:
    uint64_t v45 = 1;
    v46(v16, 1, 1, v2);
  }
LABEL_27:
  swift_bridgeObjectRelease();
  return v45;
}

BOOL sub_21F9EFF44(uint64_t a1)
{
  uint64_t v2 = sub_21FA23F20();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  char v46 = (char *)v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  unint64_t v7 = (char *)v38 - v6;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v38 - v9;
  uint64_t v11 = sub_21F76CA40(&qword_26AD45880);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a1 + 16);
  v38[1] = a1;
  if (v14)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v15 = v3 + 16;
    char v50 = v16;
    uint64_t v17 = a1 + ((*(unsigned __int8 *)(v15 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 64));
    uint64_t v41 = *(void *)(v15 + 56);
    char v43 = (void (**)(char *, char *, uint64_t))(v15 + 16);
    char v44 = (uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 32);
    uint64_t v18 = (void (**)(char *, uint64_t))(v15 - 8);
    swift_bridgeObjectRetain();
    uint64_t v45 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 40);
    v38[0] = (v15 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    int64_t v42 = v13;
    uint64_t v40 = v7;
    while (1)
    {
      uint64_t v49 = v17;
      v50(v13, v17, v2);
      uint64_t v19 = *v45;
      (*v45)(v13, 0, 1, v2);
      int v20 = (*v44)(v13, 1, v2);
      BOOL v47 = v20 == 1;
      if (v20 == 1) {
        break;
      }
      char v39 = v19;
      uint64_t v48 = v14;
      (*v43)(v10, v13, v2);
      uint64_t v21 = sub_21FA23EC0();
      if (v22)
      {
        uint64_t v24 = v7;
        v50(v7, (uint64_t)v10, v2);
LABEL_15:
        uint64_t v29 = *v18;
        (*v18)(v24, v2);
LABEL_16:
        uint64_t v36 = v46;
        v50(v46, (uint64_t)v10, v2);
        uint64_t v30 = v36;
LABEL_17:
        v29(v30, v2);
LABEL_18:
        v29(v10, v2);
        BOOL v47 = 0;
        break;
      }
      uint64_t v23 = v21;
      uint64_t v24 = v7;
      v50(v7, (uint64_t)v10, v2);
      if (v23) {
        goto LABEL_15;
      }
      uint64_t v25 = v15;
      uint64_t v26 = sub_21FA23F00();
      char v28 = v27;
      uint64_t v29 = *v18;
      (*v18)(v24, v2);
      if (v28) {
        goto LABEL_16;
      }
      uint64_t v30 = v46;
      v50(v46, (uint64_t)v10, v2);
      if (v26) {
        goto LABEL_17;
      }
      uint64_t v31 = sub_21FA23F10();
      char v32 = v30;
      char v34 = v33;
      v29(v32, v2);
      if (v34) {
        goto LABEL_18;
      }
      v29(v10, v2);
      if (v31) {
        break;
      }
      uint64_t v13 = v42;
      uint64_t v17 = v49 + v41;
      uint64_t v14 = v48 - 1;
      uint64_t v15 = v25;
      unint64_t v7 = v40;
      if (v48 == 1)
      {
        uint64_t v35 = v39;
        goto LABEL_13;
      }
    }
  }
  else
  {
    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    swift_bridgeObjectRetain();
LABEL_13:
    BOOL v47 = 1;
    v35(v13, 1, 1, v2);
  }
  swift_bridgeObjectRelease();
  return v47;
}

BOOL sub_21F9F035C(uint64_t a1)
{
  uint64_t v2 = sub_21FA23F20();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  char v43 = (char *)v35 - v7;
  uint64_t v8 = sub_21F76CA40(&qword_26AD45880);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a1 + 16);
  v35[1] = a1;
  if (v11)
  {
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v12 = v3 + 16;
    uint64_t v13 = v14;
    uint64_t v15 = a1 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
    uint64_t v37 = *(void *)(v12 + 56);
    uint64_t v40 = (void (**)(char *, char *, uint64_t))(v12 + 16);
    uint64_t v41 = (uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 32);
    uint64_t v16 = (void (**)(char *, uint64_t))(v12 - 8);
    swift_bridgeObjectRetain();
    int64_t v42 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 40);
    v35[0] = (v12 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v17 = v43;
    char v38 = v14;
    char v39 = v10;
    while (1)
    {
      v13(v10, v15, v2);
      uint64_t v36 = *v42;
      v36(v10, 0, 1, v2);
      int v18 = (*v41)(v10, 1, v2);
      BOOL v44 = v18 == 1;
      if (v18 == 1) {
        goto LABEL_17;
      }
      uint64_t v45 = v15;
      uint64_t v19 = v16;
      (*v40)(v17, v10, v2);
      uint64_t v20 = v2;
      uint64_t v21 = sub_21FA23F00();
      if (v22) {
        break;
      }
      uint64_t v23 = v21;
      v13(v5, (uint64_t)v17, v20);
      if (v23) {
        goto LABEL_14;
      }
      uint64_t v24 = v11;
      uint64_t v25 = v12;
      uint64_t v26 = sub_21FA23F10();
      char v28 = v27;
      uint64_t v29 = *v19;
      (*v19)(v5, v20);
      uint64_t v2 = v20;
      if (v28)
      {
        v29(v43, v20);
        goto LABEL_16;
      }
      uint64_t v17 = v43;
      v29(v43, v20);
      if (v26) {
        goto LABEL_17;
      }
      uint64_t v16 = v19;
      uint64_t v15 = v45 + v37;
      uint64_t v11 = v24 - 1;
      BOOL v30 = v24 == 1;
      uint64_t v12 = v25;
      uint64_t v13 = v38;
      uint64_t v10 = v39;
      if (v30)
      {
        uint64_t v31 = v36;
        goto LABEL_12;
      }
    }
    v13(v5, (uint64_t)v17, v2);
LABEL_14:
    char v32 = v17;
    char v33 = *v19;
    (*v19)(v5, v20);
    v33(v32, v20);
LABEL_16:
    BOOL v44 = 0;
    goto LABEL_17;
  }
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
  swift_bridgeObjectRetain();
LABEL_12:
  BOOL v44 = 1;
  v31(v10, 1, 1, v2);
LABEL_17:
  swift_bridgeObjectRelease();
  return v44;
}

BOOL sub_21F9F06D4(uint64_t a1)
{
  uint64_t v2 = sub_21FA23F20();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_21F76CA40(&qword_26AD45880);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a1 + 16);
  v20[1] = a1;
  if (v9)
  {
    uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v10 = v3 + 16;
    uint64_t v26 = v11;
    uint64_t v12 = a1 + ((*(unsigned __int8 *)(v10 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 64));
    uint64_t v21 = *(void *)(v10 + 56);
    char v22 = (void (**)(char *, char *, uint64_t))(v10 + 16);
    uint64_t v23 = (void (**)(char *, uint64_t))(v10 - 8);
    uint64_t v24 = (uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 32);
    swift_bridgeObjectRetain();
    uint64_t v25 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 40);
    v20[0] = (v10 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    while (1)
    {
      v26(v8, v12, v2);
      uint64_t v13 = *v25;
      (*v25)(v8, 0, 1, v2);
      int v14 = (*v24)(v8, 1, v2);
      BOOL v15 = v14 == 1;
      if (v14 == 1) {
        break;
      }
      (*v22)(v5, v8, v2);
      uint64_t v16 = sub_21FA23F10();
      if (v17)
      {
        (*v23)(v5, v2);
        BOOL v15 = 0;
        break;
      }
      uint64_t v18 = v16;
      (*v23)(v5, v2);
      if (v18) {
        break;
      }
      v12 += v21;
      if (!--v9) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    swift_bridgeObjectRetain();
LABEL_9:
    BOOL v15 = 1;
    v13(v8, 1, 1, v2);
  }
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_21F9F0960(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v10 = sub_21FA23F20();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_21F76CA40(&qword_26AD45880);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v17 = a4 >> 1;
  if (v17 == a3)
  {
    uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    swift_unknownObjectRetain();
    char v38 = (char *)MEMORY[0x263F8EE78];
LABEL_15:
    v18(v16, 1, 1, v10);
LABEL_16:
    swift_unknownObjectRelease();
    return (uint64_t)v38;
  }
  else
  {
    uint64_t v36 = v11 + 16;
    uint64_t v37 = a2;
    uint64_t v34 = v11 + 48;
    uint64_t v31 = (uint64_t (**)(char *, uint64_t))(v11 + 8);
    char v32 = (uint64_t (**)(char *, char *, uint64_t))(v11 + 32);
    v28[1] = a1;
    uint64_t result = swift_unknownObjectRetain();
    char v38 = (char *)MEMORY[0x263F8EE78];
    uint64_t v35 = v11 + 56;
    v28[0] = (v11 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v29 = a5;
    BOOL v30 = v13;
    uint64_t v33 = v11;
    while (a3 < v17)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v16, v37 + *(void *)(v11 + 72) * a3, v10);
      uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
      v18(v16, 0, 1, v10);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v16, 1, v10) == 1) {
        goto LABEL_16;
      }
      uint64_t v20 = (*v32)(v13, v16, v10);
      uint64_t v21 = a5;
      uint64_t v22 = a5(v20);
      char v24 = v23;
      uint64_t result = (*v31)(v13, v10);
      if (v24)
      {
        a5 = v21;
      }
      else
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_21F7E8CF8(0, *((void *)v38 + 2) + 1, 1, v38);
          char v38 = (char *)result;
        }
        unint64_t v26 = *((void *)v38 + 2);
        unint64_t v25 = *((void *)v38 + 3);
        if (v26 >= v25 >> 1)
        {
          uint64_t result = (uint64_t)sub_21F7E8CF8((char *)(v25 > 1), v26 + 1, 1, v38);
          char v38 = (char *)result;
        }
        char v27 = v38;
        *((void *)v38 + 2) = v26 + 1;
        *(void *)&v27[8 * v26 + 32] = v22;
        a5 = v29;
      }
      ++a3;
      uint64_t v13 = v30;
      uint64_t v11 = v33;
      if (v17 == a3) {
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  return result;
}

void *sub_21F9F0C90(void *result)
{
  uint64_t v1 = result[3];
  uint64_t v23 = result[4] >> 1;
  if (!__OFSUB__(v23, v1))
  {
    uint64_t v22 = result[3];
    uint64_t v2 = *result;
    uint64_t v21 = result[2];
    uint64_t v3 = *(void *)(*result + 16);
    if (v23 - v1 >= v3) {
      uint64_t v4 = *(void *)(v2 + 16);
    }
    else {
      uint64_t v4 = v23 - v1;
    }
    uint64_t v24 = MEMORY[0x263F8EE78];
    uint64_t result = sub_21F76CFE0(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0) {
      goto LABEL_36;
    }
    if (v4)
    {
      uint64_t v5 = (double *)(v2 + 32);
      uint64_t v6 = v22;
      if (v22 <= v23) {
        uint64_t v7 = v23;
      }
      else {
        uint64_t v7 = v22;
      }
      swift_bridgeObjectRetain();
      uint64_t result = (void *)swift_unknownObjectRetain();
      uint64_t v8 = v4;
      uint64_t v9 = v22;
      uint64_t v10 = v21;
      while (v3)
      {
        if (v23 == v9) {
          goto LABEL_31;
        }
        if (v7 == v9) {
          goto LABEL_32;
        }
        double v11 = *(double *)(v10 + 8 * v9);
        double v12 = *v5;
        unint64_t v14 = *(void *)(v24 + 16);
        unint64_t v13 = *(void *)(v24 + 24);
        if (v14 >= v13 >> 1)
        {
          uint64_t result = sub_21F76CFE0((char *)(v13 > 1), v14 + 1, 1);
          uint64_t v10 = v21;
          uint64_t v6 = v22;
        }
        *(void *)(v24 + 16) = v14 + 1;
        *(double *)(v24 + 8 * v14 + 32) = vabdd_f64(v11, v12);
        ++v5;
        ++v9;
        if (!--v8) {
          goto LABEL_19;
        }
      }
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t result = (void *)swift_unknownObjectRetain();
      uint64_t v10 = v21;
      uint64_t v6 = v22;
      uint64_t v9 = v22;
LABEL_19:
      unint64_t v15 = *(void *)(v2 + 16);
      if (v4 == v15)
      {
LABEL_20:
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        return (void *)v24;
      }
      uint64_t v16 = v9;
      while (v4 < v15)
      {
        if (v23 == v16) {
          goto LABEL_20;
        }
        if (v9 < v6 || v16 >= v23) {
          goto LABEL_34;
        }
        double v17 = *(double *)(v2 + 32 + 8 * v4);
        double v18 = *(double *)(v10 + 8 * v16);
        unint64_t v20 = *(void *)(v24 + 16);
        unint64_t v19 = *(void *)(v24 + 24);
        if (v20 >= v19 >> 1)
        {
          uint64_t result = sub_21F76CFE0((char *)(v19 > 1), v20 + 1, 1);
          uint64_t v10 = v21;
          uint64_t v6 = v22;
        }
        ++v4;
        *(void *)(v24 + 16) = v20 + 1;
        *(double *)(v24 + 8 * v20 + 32) = vabdd_f64(v18, v17);
        unint64_t v15 = *(void *)(v2 + 16);
        ++v16;
        if (v4 == v15) {
          goto LABEL_20;
        }
      }
    }
    __break(1u);
LABEL_34:
    __break(1u);
  }
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

int64_t sub_21F9F0EE8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  int64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = v1 - 1;
  if (v1 != 1)
  {
    if (v1 >= 5)
    {
      unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFCLL | 1;
      int64x2_t v5 = vdupq_n_s64(v2);
      uint64_t v6 = (int64x2_t *)(a1 + 56);
      unint64_t v7 = v3 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v8 = v5;
      do
      {
        int64x2_t v5 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v5, v6[-1]), (int8x16_t)v6[-1], (int8x16_t)v5);
        int64x2_t v8 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v8, *v6), *(int8x16_t *)v6, (int8x16_t)v8);
        v6 += 2;
        v7 -= 4;
      }
      while (v7);
      int8x16_t v9 = vbslq_s8((int8x16_t)vcgtq_s64(v8, v5), (int8x16_t)v5, (int8x16_t)v8);
      uint64_t v10 = vextq_s8(v9, v9, 8uLL).u64[0];
      int64_t v2 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v10, v9.i64[0]), *(int8x8_t *)v9.i8, (int8x8_t)v10);
      if (v3 == (v3 & 0xFFFFFFFFFFFFFFFCLL)) {
        return v2;
      }
    }
    else
    {
      unint64_t v4 = 1;
    }
    unint64_t v11 = v1 - v4;
    double v12 = (int64_t *)(a1 + 8 * v4 + 32);
    do
    {
      int64_t v14 = *v12++;
      int64_t v13 = v14;
      if (v14 < v2) {
        int64_t v2 = v13;
      }
      --v11;
    }
    while (v11);
  }
  return v2;
}

uint64_t sub_21F9F0F9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  double v2 = *(double *)(a1 + 32);
  uint64_t v3 = v1 - 1;
  if (v1 != 1)
  {
    unint64_t v4 = (double *)(a1 + 40);
    do
    {
      double v5 = *v4++;
      double v6 = v5;
      if (v5 < v2) {
        double v2 = v6;
      }
      --v3;
    }
    while (v3);
  }
  return *(void *)&v2;
}

void sub_21F9F0FE0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v55 = a2;
  uint64_t v54 = sub_21F76CA40(&qword_26AD44E50);
  MEMORY[0x270FA5388](v54);
  unint64_t v4 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_21FA23FA0();
  uint64_t v51 = *(void *)(v5 - 8);
  uint64_t v52 = v5;
  MEMORY[0x270FA5388](v5);
  char v50 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_21FA23F70();
  uint64_t v48 = *(void *)(v7 - 8);
  uint64_t v49 = v7;
  MEMORY[0x270FA5388](v7);
  int8x16_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_21FA24220();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  int64_t v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_21F76CA40(qword_26AD48308);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  BOOL v47 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v53 = (char *)&v46 - v18;
  __n128 v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v46 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v13, a1, v10, v20);
  sub_21F885234();
  sub_21FA23F30();
  uint64_t v23 = swift_bridgeObjectRetain();
  uint64_t v24 = sub_21F7F5F88(v23);
  swift_bridgeObjectRelease();
  uint64_t v25 = *(void *)(v24 + 16);
  v58[0] = v24;
  v58[1] = v24;
  v58[2] = v24 + 32;
  v58[3] = v25 != 0;
  v58[4] = (2 * v25) | 1;
  swift_bridgeObjectRetain();
  unint64_t v26 = (double *)sub_21F9F0C90(v58);
  swift_bridgeObjectRelease_n();
  uint64_t v27 = *((void *)v26 + 2);
  if (v27)
  {
    double v28 = v26[4];
    uint64_t v29 = v27 - 1;
    if (v29)
    {
      BOOL v30 = v26 + 5;
      do
      {
        double v31 = *v30++;
        double v32 = v31;
        if (v31 < v28) {
          double v28 = v32;
        }
        --v29;
      }
      while (v29);
    }
  }
  else
  {
    double v28 = INFINITY;
  }
  swift_bridgeObjectRelease();
  if ((~*(void *)&v28 & 0x7FF0000000000000) == 0) {
    goto LABEL_32;
  }
  if (v28 < 0.000001)
  {
    sub_21FA23F60();
    uint64_t v33 = v47;
    MEMORY[0x223C53380](v9, v14);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v9, v49);
    uint64_t v34 = v50;
    sub_21FA23F80();
    uint64_t v35 = v53;
LABEL_30:
    MEMORY[0x223C53390](v34, v14);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v34, v52);
    int64_t v42 = *(void (**)(char *, uint64_t))(v15 + 8);
    v42(v33, v14);
    v42(v22, v14);
    goto LABEL_31;
  }
  uint64_t v35 = v53;
  if (v28 >= 1.0)
  {
    if (v28 >= 1000000.0)
    {
      sub_21FA23F60();
      uint64_t v33 = v47;
      MEMORY[0x223C53380](v9, v14);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v9, v49);
      uint64_t v34 = v50;
      sub_21FA23F80();
      goto LABEL_30;
    }
    uint64_t v41 = v50;
    sub_21FA23F80();
LABEL_28:
    MEMORY[0x223C53390](v41, v14);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v41, v52);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v22, v14);
LABEL_31:
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v22, v35, v14);
LABEL_32:
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v4, v22, v14);
    sub_21FA24200();
    uint64_t v43 = v54;
    sub_21FA23F30();
    *(void *)&v4[*(int *)(v43 + 80)] = 0;
    uint64_t v44 = v55;
    *(void *)(v55 + 24) = v43;
    *(void *)(v44 + 32) = sub_21F779E60(&qword_26AD44E48, &qword_26AD44E50);
    uint64_t v45 = sub_21F77E8F8((uint64_t *)v44);
    sub_21F9F51E8((uint64_t)v4, (uint64_t)v45);
    *(unsigned char *)(v44 + 40) = 0;
    sub_21F9F5250((uint64_t)v4);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v22, v14);
    return;
  }
  double v36 = floor(1.0 - log10(v28) + -0.000000001);
  double v37 = __exp10(-v36);
  if (vabdd_f64(v28 / v37, rint(v28 / v37)) <= 0.01) {
    double v38 = v36;
  }
  else {
    double v38 = v36 + 1.0;
  }
  if (v38 <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v38 >= 9.22337204e18)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  double v39 = v38 + 2.0;
  if ((*(void *)&v38 & 0x7FF0000000000000) == 0x7FF0000000000000
    || (COERCE_UNSIGNED_INT64(v38 + 2.0) & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_35;
  }
  if (v39 <= -9.22337204e18)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v39 >= 9.22337204e18)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if ((uint64_t)v39 >= (uint64_t)v38)
  {
    uint64_t v56 = (uint64_t)v38;
    uint64_t v57 = (uint64_t)v39;
    sub_21F76CA40(&qword_267EEA690);
    sub_21F779E60(qword_267EEA6F0, &qword_267EEA690);
    uint64_t v41 = v50;
    sub_21FA23F90();
    goto LABEL_28;
  }
LABEL_38:
  __break(1u);
}

void sub_21F9F1744(void **a1)
{
  uint64_t v2 = *(void *)(sub_21FA241F0() - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_21F9369CC(v3);
  }
  uint64_t v4 = v3[2];
  v5[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_21F9F3C9C(v5);
  *a1 = v3;
}

uint64_t sub_21F9F17EC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v150 = a2;
  uint64_t v153 = a4;
  uint64_t v123 = sub_21FA24160();
  uint64_t v122 = *(void *)(v123 - 8);
  MEMORY[0x270FA5388](v123);
  uint64_t v121 = (char *)&v121 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = sub_21FA24140();
  uint64_t v125 = *(void *)(v126 - 8);
  MEMORY[0x270FA5388](v126);
  char v124 = (char *)&v121 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = sub_21FA240D0();
  uint64_t v129 = *(void *)(v130 - 8);
  MEMORY[0x270FA5388](v130);
  uint64_t v127 = (char *)&v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = sub_21FA240E0();
  uint64_t v128 = *(void *)(v132 - 8);
  MEMORY[0x270FA5388](v132);
  uint64_t v131 = (char *)&v121 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = sub_21FA240A0();
  uint64_t v135 = *(void *)(v136 - 8);
  MEMORY[0x270FA5388](v136);
  uint64_t v134 = (char *)&v121 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_21FA24120();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v139 = v11;
  uint64_t v140 = v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v138 = (char *)&v121 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_21FA24100();
  uint64_t v142 = *(void *)(v14 - 8);
  uint64_t v143 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v141 = (char *)&v121 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_21FA23FC0();
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v149 = (uint64_t)&v121 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_21FA24340();
  MEMORY[0x270FA5388](v18 - 8);
  char v148 = (char *)&v121 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_21FA24320();
  uint64_t v145 = *(void *)(v20 - 8);
  uint64_t v146 = v20;
  MEMORY[0x270FA5388](v20);
  uint64_t v147 = (char *)&v121 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = sub_21FA24220();
  uint64_t v22 = *(void *)(v144 - 8);
  MEMORY[0x270FA5388](v144);
  uint64_t v24 = (char *)&v121 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_21F76CA40(&qword_26AD46A50);
  MEMORY[0x270FA5388](v25 - 8);
  uint64_t v27 = (char *)&v121 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_21F76CA40(&qword_26AD46A58);
  MEMORY[0x270FA5388](v28 - 8);
  BOOL v30 = (char *)&v121 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_21FA24190();
  uint64_t v151 = *(void *)(v31 - 8);
  uint64_t v152 = v31;
  MEMORY[0x270FA5388](v31);
  uint64_t v133 = (char *)&v121 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v33);
  uint64_t v137 = (char *)&v121 - v34;
  MEMORY[0x270FA5388](v35);
  uint64_t v154 = (char *)&v121 - v36;
  MEMORY[0x270FA5388](v37);
  double v39 = (char *)&v121 - v38;
  uint64_t v155 = a1;
  swift_bridgeObjectRetain();
  sub_21F9F1744(&v155);
  uint64_t v40 = v155;
  MEMORY[0x270FA5388](v41);
  *(&v121 - 2) = a3;
  uint64_t v42 = sub_21F7FB0B8((void (*)(uint64_t))sub_21F9F52B0, (uint64_t)(&v121 - 4), (uint64_t)v40);
  swift_release();
  uint64_t v43 = sub_21FA24000();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v30, 1, 1, v43);
  uint64_t v44 = sub_21FA23FF0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v27, 1, 1, v44);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, v150, v144);
  (*(void (**)(char *, char *, uint64_t))(v145 + 16))(v147, a3, v146);
  sub_21FA24330();
  sub_21FA23FB0();
  sub_21FA24030();
  if (sub_21F9EF4A0(v42))
  {
    swift_bridgeObjectRelease();
    uint64_t v45 = v141;
    sub_21FA240F0();
    uint64_t v46 = v154;
    sub_21FA24050();
    (*(void (**)(char *, uint64_t))(v142 + 8))(v45, v143);
    uint64_t v48 = v151;
    uint64_t v47 = v152;
LABEL_41:
    uint64_t v74 = *(void (**)(char *, uint64_t))(v48 + 8);
    v74(v39, v47);
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v39, v46, v47);
    goto LABEL_42;
  }
  BOOL v49 = 1;
  uint64_t v50 = sub_21F8FAFD0(1, v42);
  uint64_t v52 = v51;
  uint64_t v54 = v53;
  unint64_t v56 = v55;
  uint64_t v150 = v42;
  swift_bridgeObjectRetain();
  uint64_t v57 = sub_21F9F0960(v50, v52, v54, v56, MEMORY[0x263F063A0]);
  uint64_t v58 = *(void *)(v57 + 16);
  uint64_t v48 = v151;
  uint64_t v47 = v152;
  if (v58)
  {
    uint64_t v59 = (uint64_t *)(v57 + 32);
    uint64_t v60 = *(void *)(v57 + 32);
    uint64_t v61 = v58 - 1;
    do
    {
      uint64_t v63 = *v59++;
      uint64_t v62 = v63;
      BOOL v64 = v61-- != 0;
      char v65 = v64;
      BOOL v49 = v62 == v60;
    }
    while (v62 == v60 && (v65 & 1) != 0);
  }
  swift_bridgeObjectRelease();
  uint64_t v66 = v150;
  if (sub_21F9EFA5C(v150))
  {
    swift_bridgeObjectRelease();
    if (v49)
    {
      uint64_t v67 = v138;
      sub_21FA24110();
      uint64_t v46 = v154;
      sub_21FA24060();
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v140 + 8))(v67, v139);
      goto LABEL_41;
    }
    uint64_t v72 = v141;
    sub_21FA240F0();
    unsigned __int8 v69 = v137;
    sub_21FA24050();
    (*(void (**)(char *, uint64_t))(v142 + 8))(v72, v143);
    uint64_t v73 = v138;
    sub_21FA24110();
    char v71 = v154;
    sub_21FA24060();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v140 + 8))(v73, v139);
    goto LABEL_17;
  }
  if (sub_21F9EFF44(v66))
  {
    swift_bridgeObjectRelease();
    if (!v49)
    {
      int v84 = v141;
      sub_21FA240F0();
      uint64_t v149 = v50;
      uint64_t v85 = v133;
      sub_21FA24050();
      (*(void (**)(char *, uint64_t))(v142 + 8))(v84, v143);
      uint64_t v86 = v138;
      sub_21FA24110();
      uint64_t v87 = v137;
      sub_21FA24060();
      (*(void (**)(char *, uint64_t))(v140 + 8))(v86, v139);
      uint64_t v74 = *(void (**)(char *, uint64_t))(v48 + 8);
      v74(v85, v47);
      uint64_t v88 = v134;
      sub_21FA24090();
      uint64_t v89 = v154;
      sub_21FA24020();
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v135 + 8))(v88, v136);
      v74(v87, v47);
      v74(v39, v47);
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v39, v89, v47);
      goto LABEL_42;
    }
    uint64_t v68 = v138;
    sub_21FA24110();
    unsigned __int8 v69 = v137;
    sub_21FA24060();
    (*(void (**)(char *, uint64_t))(v140 + 8))(v68, v139);
    char v70 = v134;
    sub_21FA24090();
    char v71 = v154;
    sub_21FA24020();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v135 + 8))(v70, v136);
LABEL_17:
    uint64_t v74 = *(void (**)(char *, uint64_t))(v48 + 8);
    v74(v69, v47);
    v74(v39, v47);
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v39, v71, v47);
LABEL_42:
    uint64_t v106 = v153;
    goto LABEL_43;
  }
  uint64_t v149 = v50;
  uint64_t v75 = sub_21F9F0960(v50, v52, v54, v56, MEMORY[0x263F063A8]);
  uint64_t v76 = *(void *)(v75 + 16);
  if (v76)
  {
    char v77 = (uint64_t *)(v75 + 32);
    uint64_t v78 = *(void *)(v75 + 32);
    uint64_t v79 = v76 - 1;
    do
    {
      uint64_t v81 = *v77++;
      uint64_t v80 = v81;
      BOOL v64 = v79-- != 0;
      char v82 = v64;
      BOOL v83 = v80 == v78;
    }
    while (v80 == v78 && (v82 & 1) != 0);
  }
  else
  {
    BOOL v83 = 1;
  }
  swift_bridgeObjectRelease();
  uint64_t v90 = sub_21F9F0960(v149, v52, v54, v56, MEMORY[0x263F06398]);
  uint64_t v91 = *(void *)(v90 + 16);
  if (v91)
  {
    uint64_t v92 = 0;
    while (*(void *)(v90 + 8 * v92 + 32) == *(void *)(v90 + 32))
    {
      if (v91 == ++v92) {
        goto LABEL_32;
      }
    }
    swift_bridgeObjectRelease();
    if (v49) {
      goto LABEL_36;
    }
LABEL_37:
    uint64_t v97 = v141;
    sub_21FA240F0();
    uint64_t v98 = v133;
    sub_21FA24050();
    (*(void (**)(char *, uint64_t))(v142 + 8))(v97, v143);
    char v99 = v138;
    sub_21FA24110();
    uint64_t v100 = v137;
    sub_21FA24060();
    (*(void (**)(char *, uint64_t))(v140 + 8))(v99, v139);
    uint64_t v101 = *(void (**)(char *, uint64_t))(v48 + 8);
    v101(v98, v47);
    uint64_t v102 = v134;
    sub_21FA24090();
    sub_21FA24020();
    (*(void (**)(char *, uint64_t))(v135 + 8))(v102, v136);
    v101(v100, v47);
    v101(v39, v47);
    goto LABEL_38;
  }
LABEL_32:
  swift_bridgeObjectRelease();
  if (!v49) {
    goto LABEL_37;
  }
  if (!v83)
  {
LABEL_36:
    uint64_t v93 = v138;
    sub_21FA24110();
    uint64_t v94 = v137;
    sub_21FA24060();
    (*(void (**)(char *, uint64_t))(v140 + 8))(v93, v139);
    uint64_t v95 = v134;
    sub_21FA24090();
    sub_21FA24020();
    (*(void (**)(char *, uint64_t))(v135 + 8))(v95, v136);
    uint64_t v96 = *(void (**)(char *, uint64_t))(v48 + 8);
    v96(v94, v47);
    v96(v39, v47);
LABEL_38:
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v39, v154, v47);
  }
  uint64_t v103 = v150;
  if (sub_21F9F035C(v150))
  {
    swift_bridgeObjectRelease();
    unint64_t v104 = v127;
    sub_21FA240C0();
    uint64_t v105 = v131;
    sub_21FA240B0();
    (*(void (**)(char *, uint64_t))(v129 + 8))(v104, v130);
    uint64_t v46 = v154;
    sub_21FA24040();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v128 + 8))(v105, v132);
    goto LABEL_41;
  }
  BOOL v109 = sub_21F9F06D4(v103);
  swift_bridgeObjectRelease();
  uint64_t v110 = v127;
  sub_21FA240C0();
  uint64_t v111 = v131;
  sub_21FA240B0();
  (*(void (**)(char *, uint64_t))(v129 + 8))(v110, v130);
  uint64_t v112 = (void (**)(char *, uint64_t))(v128 + 8);
  uint64_t v106 = v153;
  if (v109)
  {
    char v113 = v137;
    sub_21FA24040();
    (*v112)(v111, v132);
    uint64_t v114 = v124;
    sub_21FA24130();
    uint64_t v115 = v154;
    sub_21FA24170();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v125 + 8))(v114, v126);
    uint64_t v74 = *(void (**)(char *, uint64_t))(v48 + 8);
    v74(v113, v47);
    v74(v39, v47);
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v39, v115, v47);
  }
  else
  {
    uint64_t v116 = v133;
    sub_21FA24040();
    (*v112)(v111, v132);
    uint64_t v117 = v124;
    sub_21FA24130();
    sub_21FA24170();
    (*(void (**)(char *, uint64_t))(v125 + 8))(v117, v126);
    uint64_t v74 = *(void (**)(char *, uint64_t))(v48 + 8);
    v74(v116, v47);
    uint64_t v118 = v121;
    sub_21FA24130();
    char v119 = v154;
    uint64_t v120 = v137;
    sub_21FA24180();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v122 + 8))(v118, v123);
    v74(v120, v47);
    v74(v39, v47);
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v39, v119, v47);
  }
LABEL_43:
  *(void *)(v106 + 24) = v47;
  *(void *)(v106 + 32) = sub_21F9F55E8((unint64_t *)&qword_26AD46A60, MEMORY[0x263F07258]);
  int v107 = sub_21F77E8F8((uint64_t *)v106);
  (*(void (**)(uint64_t *, char *, uint64_t))(v48 + 16))(v107, v39, v47);
  *(unsigned char *)(v106 + 40) = 1;
  return ((uint64_t (*)(char *, uint64_t))v74)(v39, v47);
}

uint64_t sub_21F9F2A68()
{
  swift_getAssociatedTypeWitness();
  if ((sub_21FA25CE0() & 1) == 0 && ((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0) {
    __break(0xC471u);
  }
  return sub_21FA23E50();
}

uint64_t sub_21F9F2B4C()
{
  return sub_21FA25B70();
}

uint64_t sub_21F9F2BEC()
{
  if (sub_21FA25CE0() & 1) != 0 && (type metadata accessor for SpecialCaseFormatStyle(), (sub_21FA25CE0()))
  {
    swift_getAssociatedTypeWitness();
    char v0 = sub_21FA25CE0();
  }
  else
  {
    char v0 = 0;
  }
  return v0 & 1;
}

BOOL sub_21F9F2CF4(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_21F9F2D04()
{
  return sub_21FA26A10();
}

uint64_t sub_21F9F2D2C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1702060386 && a2 == 0xE400000000000000;
  if (v2 || (sub_21FA268D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C616963657073 && a2 == 0xE700000000000000 || (sub_21FA268D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x566C616963657073 && a2 == 0xEC00000065756C61)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_21FA268D0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_21F9F2E8C()
{
  return sub_21FA26A50();
}

uint64_t sub_21F9F2ED4(char a1)
{
  if (!a1) {
    return 1702060386;
  }
  if (a1 == 1) {
    return 0x6C616963657073;
  }
  return 0x566C616963657073;
}

BOOL sub_21F9F2F2C(char *a1, char *a2)
{
  return sub_21F9F2CF4(*a1, *a2);
}

uint64_t sub_21F9F2F70()
{
  return sub_21F9F2E8C();
}

uint64_t sub_21F9F2F88()
{
  return sub_21F9F2D04();
}

uint64_t sub_21F9F2FC0()
{
  return sub_21FA26A50();
}

uint64_t sub_21F9F3018()
{
  return sub_21F9F2ED4(*v0);
}

uint64_t sub_21F9F3030@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_21F9F2D2C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_21F9F3078()
{
  return 0;
}

uint64_t sub_21F9F3084@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_21F9F683C();
  *a1 = result;
  return result;
}

uint64_t sub_21F9F30C0(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t sub_21F9F3114(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t sub_21F9F3168(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v14 = *(void *)(a2 + 32);
  uint64_t v15 = v4;
  uint64_t v16 = v4;
  uint64_t v17 = v3;
  uint64_t v13 = v3;
  uint64_t v18 = v14;
  long long v12 = *(_OWORD *)(a2 + 40);
  long long v11 = *(_OWORD *)(a2 + 56);
  long long v19 = v12;
  long long v20 = v11;
  type metadata accessor for SpecialCaseFormatStyle.CodingKeys();
  swift_getWitnessTable();
  uint64_t v5 = sub_21FA26840();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v11 - v7;
  sub_21F77E0FC(a1, a1[3]);
  sub_21FA26AC0();
  LOBYTE(v16) = 0;
  uint64_t v9 = v21;
  sub_21FA26830();
  if (!v9)
  {
    LOBYTE(v16) = 1;
    sub_21FA26830();
    LOBYTE(v16) = 2;
    swift_getAssociatedTypeWitness();
    sub_21FA26830();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_21F9F33A8()
{
  return sub_21FA26A50();
}

uint64_t sub_21F9F33F0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v57 = a7;
  uint64_t v58 = a1;
  uint64_t v43 = a9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v42 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v45 = (char *)&v39 - v16;
  uint64_t v48 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v50 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v19);
  unint64_t v55 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = a2;
  uint64_t v60 = a3;
  uint64_t v61 = a4;
  uint64_t v62 = a5;
  uint64_t v63 = a6;
  BOOL v64 = a7;
  uint64_t v65 = a8;
  type metadata accessor for SpecialCaseFormatStyle.CodingKeys();
  swift_getWitnessTable();
  uint64_t v56 = sub_21FA26820();
  uint64_t v49 = *(void *)(v56 - 8);
  MEMORY[0x270FA5388](v56);
  uint64_t v22 = (char *)&v39 - v21;
  uint64_t v51 = a2;
  uint64_t v52 = a5;
  uint64_t v59 = a2;
  uint64_t v60 = a3;
  uint64_t v53 = a3;
  uint64_t v54 = a4;
  uint64_t v61 = a4;
  uint64_t v62 = a5;
  uint64_t v46 = a6;
  uint64_t v63 = a6;
  BOOL v64 = v57;
  uint64_t v65 = a8;
  uint64_t v23 = type metadata accessor for SpecialCaseFormatStyle();
  uint64_t v41 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v39 - v24;
  uint64_t v26 = v58;
  sub_21F77E0FC(v58, v58[3]);
  uint64_t v57 = v22;
  uint64_t v27 = v66;
  sub_21FA26AB0();
  if (v27) {
    return _s6Charts15AnyChartContentVwxx_0((uint64_t)v26);
  }
  uint64_t v29 = v49;
  uint64_t v28 = v50;
  uint64_t v66 = v25;
  uint64_t v40 = v23;
  uint64_t v30 = v53;
  uint64_t v31 = (uint64_t)v26;
  LOBYTE(v59) = 0;
  uint64_t v32 = v51;
  sub_21FA26810();
  (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v66, v55, v32);
  LOBYTE(v59) = 1;
  sub_21FA26810();
  (*(void (**)(char *, char *, uint64_t))(v48 + 32))(&v66[*(int *)(v40 + 76)], v28, v30);
  LOBYTE(v59) = 2;
  uint64_t v33 = v45;
  uint64_t v34 = AssociatedTypeWitness;
  sub_21FA26810();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v57, v56);
  uint64_t v35 = v40;
  uint64_t v36 = v66;
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(&v66[*(int *)(v40 + 80)], v33, v34);
  uint64_t v37 = v41;
  (*(void (**)(uint64_t, char *, uint64_t))(v41 + 16))(v43, v36, v35);
  _s6Charts15AnyChartContentVwxx_0(v31);
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v36, v35);
}

uint64_t sub_21F9F39C8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_21F9F33F0(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 32), *(void *)(a2 + 40), *(void *)(a2 + 48), *(char **)(a2 + 56), *(void *)(a2 + 64), a3);
}

uint64_t sub_21F9F39F4(void *a1, uint64_t a2)
{
  return sub_21F9F3168(a1, a2);
}

uint64_t sub_21F9F3A14()
{
  return sub_21FA26A50();
}

uint64_t sub_21F9F3A58()
{
  return sub_21F9F2BEC() & 1;
}

uint64_t sub_21F9F3A94()
{
  sub_21F76CA40(&qword_26AD46B48);
  uint64_t v0 = sub_21FA24310();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_21FA30510;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = *(void (**)(unint64_t, void, uint64_t))(v1 + 104);
  v6(v5, *MEMORY[0x263F078A0], v0);
  v6(v5 + v2, *MEMORY[0x263F078A8], v0);
  v6(v5 + 2 * v2, *MEMORY[0x263F07870], v0);
  v6(v5 + 3 * v2, *MEMORY[0x263F07890], v0);
  v6(v5 + 4 * v2, *MEMORY[0x263F078C0], v0);
  v6(v5 + 5 * v2, *MEMORY[0x263F078C8], v0);
  sub_21F9F52D0(v4);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_21FA24280();
  return swift_bridgeObjectRelease();
}

void sub_21F9F3C9C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_21FA241F0();
  unint64_t v5 = *(void **)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v136 = (char *)&v131 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v151 = (char *)&v131 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v146 = (char *)&v131 - v10;
  MEMORY[0x270FA5388](v11);
  uint64_t v147 = (char *)&v131 - v12;
  uint64_t v13 = a1[1];
  uint64_t v14 = sub_21FA26850();
  if (v14 >= v13)
  {
    if (v13 < 0) {
      goto LABEL_141;
    }
    if (v13) {
      sub_21F9F4810(0, v13, 1, a1);
    }
    return;
  }
  if (v13 >= 0) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v13 + 1;
  }
  if (v13 < -1) {
    goto LABEL_140;
  }
  uint64_t v149 = v4;
  uint64_t v150 = a1;
  uint64_t v133 = v14;
  if (v13 > 1)
  {
    uint64_t v16 = v15 >> 1;
    uint64_t v17 = sub_21FA25ED0();
    *(void *)(v17 + 16) = v16;
    unint64_t v18 = (*((unsigned __int8 *)v5 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v5 + 80);
    uint64_t v132 = v17;
    unint64_t v138 = v17 + v18;
LABEL_12:
    uint64_t v20 = 0;
    uint64_t v144 = (void (**)(char *, uint64_t))(v5 + 1);
    uint64_t v145 = v5 + 2;
    uint64_t v154 = (void (**)(char *, uint64_t, uint64_t))(v5 + 4);
    uint64_t v19 = (char *)MEMORY[0x263F8EE78];
    uint64_t v139 = v5;
    while (1)
    {
      uint64_t v22 = v20;
      uint64_t v23 = v20 + 1;
      uint64_t v137 = v20;
      if (v20 + 1 >= v13) {
        break;
      }
      uint64_t v24 = v149;
      uint64_t v25 = *v150;
      uint64_t v141 = v25;
      uint64_t v142 = v20 + 1;
      uint64_t v153 = v139[9];
      uint64_t v26 = v153;
      uint64_t v27 = (void (*)(char *, uint64_t, uint64_t))v139[2];
      v27(v147, v25 + v153 * v23, v149);
      uint64_t v28 = v25 + v26 * v22;
      uint64_t v29 = v146;
      v27(v146, v28, v24);
      uint64_t v30 = sub_21F9F55E8((unint64_t *)&qword_26AD46C28, MEMORY[0x263F07490]);
      uint64_t v31 = v147;
      uint64_t v148 = v30;
      LODWORD(v152) = sub_21FA25C50();
      uint64_t v32 = v13;
      uint64_t v33 = (void (*)(char *, uint64_t))v139[1];
      uint64_t v34 = v29;
      uint64_t v22 = v137;
      v33(v34, v24);
      v33(v31, v24);
      uint64_t v35 = v153;
      uint64_t v23 = v22 + 2;
      uint64_t v143 = v32;
      if (v22 + 2 >= v32)
      {
        uint64_t v13 = v143;
        if ((v152 & 1) == 0) {
          break;
        }
      }
      else
      {
        uint64_t v134 = v19;
        uint64_t v131 = v2;
        v142 *= v153;
        uint64_t v36 = v141;
        uint64_t v37 = v153 * v23;
        while (1)
        {
          uint64_t v38 = v23;
          uint64_t v39 = v147;
          uint64_t v40 = v149;
          v27(v147, v36 + v37, v149);
          uint64_t v41 = v146;
          v27(v146, v36 + v142, v40);
          int v42 = sub_21FA25C50();
          v33(v41, v40);
          v33(v39, v40);
          if ((v152 ^ v42)) {
            break;
          }
          uint64_t v23 = v38 + 1;
          uint64_t v35 = v153;
          v36 += v153;
          if (v143 == v38 + 1)
          {
            uint64_t v13 = v143;
            uint64_t v23 = v143;
            uint64_t v2 = v131;
            uint64_t v19 = v134;
            uint64_t v22 = v137;
            if (v152) {
              goto LABEL_25;
            }
            goto LABEL_37;
          }
        }
        uint64_t v2 = v131;
        uint64_t v19 = v134;
        uint64_t v23 = v38;
        uint64_t v22 = v137;
        uint64_t v13 = v143;
        uint64_t v35 = v153;
        if ((v152 & 1) == 0) {
          break;
        }
      }
LABEL_25:
      if (v23 < v22) {
        goto LABEL_142;
      }
      if (v22 >= v23) {
        break;
      }
      uint64_t v134 = v19;
      uint64_t v43 = 0;
      uint64_t v44 = v35 * (v23 - 1);
      uint64_t v45 = v23 * v35;
      uint64_t v46 = v22 * v35;
      uint64_t v47 = v150;
      uint64_t v148 = v23;
      do
      {
        if (v22 != v23 + v43 - 1)
        {
          uint64_t v49 = v141;
          if (!v141) {
            goto LABEL_147;
          }
          uint64_t v50 = v2;
          unint64_t v51 = v141 + v46;
          uint64_t v52 = (char *)(v141 + v44);
          uint64_t v152 = *v154;
          v152(v136, v141 + v46, v149);
          if (v46 < v44 || v51 >= v49 + v45)
          {
            uint64_t v48 = v149;
            swift_arrayInitWithTakeFrontToBack();
          }
          else
          {
            uint64_t v48 = v149;
            if (v46 != v44) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          v152(v52, (uint64_t)v136, v48);
          uint64_t v2 = v50;
          uint64_t v47 = v150;
          uint64_t v23 = v148;
          uint64_t v35 = v153;
        }
        ++v22;
        --v43;
        v44 -= v35;
        v45 -= v35;
        v46 += v35;
      }
      while (v22 < v23 + v43);
      uint64_t v19 = v134;
      uint64_t v22 = v137;
      uint64_t v13 = v143;
LABEL_38:
      uint64_t v53 = v149;
      if (v23 < v13)
      {
        if (__OFSUB__(v23, v22)) {
          goto LABEL_139;
        }
        if (v23 - v22 < v133)
        {
          if (__OFADD__(v22, v133)) {
            goto LABEL_143;
          }
          if (v22 + v133 >= v13) {
            uint64_t v54 = v13;
          }
          else {
            uint64_t v54 = v22 + v133;
          }
          if (v54 < v22)
          {
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
            return;
          }
          if (v23 != v54)
          {
            uint64_t v134 = v19;
            uint64_t v131 = v2;
            uint64_t v55 = v139[9];
            uint64_t v140 = (void (*)(char *, uint64_t, uint64_t))v139[2];
            uint64_t v141 = v55;
            uint64_t v56 = v55 * (v23 - 1);
            uint64_t v57 = v23 * v55;
            uint64_t v135 = v54;
            do
            {
              uint64_t v59 = 0;
              uint64_t v148 = v23;
              uint64_t v142 = v57;
              uint64_t v143 = v56;
              while (1)
              {
                uint64_t v60 = *v47;
                uint64_t v152 = (void (*)(char *, uint64_t, uint64_t))(v57 + v59);
                uint64_t v153 = v22;
                uint64_t v61 = v57 + v59 + v60;
                uint64_t v62 = v147;
                uint64_t v63 = v47;
                BOOL v64 = v140;
                v140(v147, v61, v53);
                uint64_t v65 = v56 + v59 + v60;
                uint64_t v66 = v146;
                v64(v146, v65, v53);
                sub_21F9F55E8((unint64_t *)&qword_26AD46C28, MEMORY[0x263F07490]);
                LOBYTE(v60) = sub_21FA25C50();
                uint64_t v67 = *v144;
                (*v144)(v66, v53);
                v67(v62, v53);
                if ((v60 & 1) == 0) {
                  break;
                }
                uint64_t v68 = *v63;
                if (!*v63) {
                  goto LABEL_145;
                }
                uint64_t v57 = v142;
                uint64_t v56 = v143;
                unsigned __int8 v69 = (char *)(v68 + v143 + v59);
                char v70 = *v154;
                uint64_t v71 = v149;
                (*v154)(v151, v68 + v142 + v59, v149);
                uint64_t v53 = v71;
                swift_arrayInitWithTakeFrontToBack();
                v70(v69, (uint64_t)v151, v71);
                v59 -= v141;
                uint64_t v22 = v153 + 1;
                uint64_t v58 = v148;
                uint64_t v47 = v150;
                if (v148 == v153 + 1) {
                  goto LABEL_49;
                }
              }
              uint64_t v58 = v148;
              uint64_t v53 = v149;
              uint64_t v47 = v63;
              uint64_t v57 = v142;
              uint64_t v56 = v143;
LABEL_49:
              uint64_t v23 = v58 + 1;
              v56 += v141;
              v57 += v141;
              uint64_t v22 = v137;
            }
            while (v23 != v135);
            uint64_t v23 = v135;
            uint64_t v2 = v131;
            uint64_t v19 = v134;
          }
        }
      }
      if (v23 < v22) {
        goto LABEL_134;
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v148 = v23;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        uint64_t v19 = sub_21F7E929C(0, *((void *)v19 + 2) + 1, 1, v19);
      }
      unint64_t v74 = *((void *)v19 + 2);
      unint64_t v73 = *((void *)v19 + 3);
      unint64_t v21 = v74 + 1;
      if (v74 >= v73 >> 1) {
        uint64_t v19 = sub_21F7E929C((char *)(v73 > 1), v74 + 1, 1, v19);
      }
      *((void *)v19 + 2) = v21;
      uint64_t v75 = v19 + 32;
      uint64_t v76 = &v19[16 * v74 + 32];
      uint64_t v77 = v148;
      *(void *)uint64_t v76 = v22;
      *((void *)v76 + 1) = v77;
      if (v74)
      {
        while (1)
        {
          unint64_t v78 = v21 - 1;
          if (v21 >= 4)
          {
            BOOL v83 = &v75[16 * v21];
            uint64_t v84 = *((void *)v83 - 8);
            uint64_t v85 = *((void *)v83 - 7);
            BOOL v89 = __OFSUB__(v85, v84);
            uint64_t v86 = v85 - v84;
            if (v89) {
              goto LABEL_123;
            }
            uint64_t v88 = *((void *)v83 - 6);
            uint64_t v87 = *((void *)v83 - 5);
            BOOL v89 = __OFSUB__(v87, v88);
            uint64_t v81 = v87 - v88;
            char v82 = v89;
            if (v89) {
              goto LABEL_124;
            }
            unint64_t v90 = v21 - 2;
            uint64_t v91 = &v75[16 * v21 - 32];
            uint64_t v93 = *(void *)v91;
            uint64_t v92 = *((void *)v91 + 1);
            BOOL v89 = __OFSUB__(v92, v93);
            uint64_t v94 = v92 - v93;
            if (v89) {
              goto LABEL_125;
            }
            BOOL v89 = __OFADD__(v81, v94);
            uint64_t v95 = v81 + v94;
            if (v89) {
              goto LABEL_127;
            }
            if (v95 >= v86)
            {
              char v113 = &v75[16 * v78];
              uint64_t v115 = *(void *)v113;
              uint64_t v114 = *((void *)v113 + 1);
              BOOL v89 = __OFSUB__(v114, v115);
              uint64_t v116 = v114 - v115;
              if (v89) {
                goto LABEL_133;
              }
              BOOL v106 = v81 < v116;
              goto LABEL_94;
            }
          }
          else
          {
            if (v21 != 3)
            {
              uint64_t v107 = *((void *)v19 + 4);
              uint64_t v108 = *((void *)v19 + 5);
              BOOL v89 = __OFSUB__(v108, v107);
              uint64_t v100 = v108 - v107;
              char v101 = v89;
              goto LABEL_88;
            }
            uint64_t v80 = *((void *)v19 + 4);
            uint64_t v79 = *((void *)v19 + 5);
            BOOL v89 = __OFSUB__(v79, v80);
            uint64_t v81 = v79 - v80;
            char v82 = v89;
          }
          if (v82) {
            goto LABEL_126;
          }
          unint64_t v90 = v21 - 2;
          uint64_t v96 = &v75[16 * v21 - 32];
          uint64_t v98 = *(void *)v96;
          uint64_t v97 = *((void *)v96 + 1);
          BOOL v99 = __OFSUB__(v97, v98);
          uint64_t v100 = v97 - v98;
          char v101 = v99;
          if (v99) {
            goto LABEL_128;
          }
          uint64_t v102 = &v75[16 * v78];
          uint64_t v104 = *(void *)v102;
          uint64_t v103 = *((void *)v102 + 1);
          BOOL v89 = __OFSUB__(v103, v104);
          uint64_t v105 = v103 - v104;
          if (v89) {
            goto LABEL_130;
          }
          if (__OFADD__(v100, v105)) {
            goto LABEL_132;
          }
          if (v100 + v105 >= v81)
          {
            BOOL v106 = v81 < v105;
LABEL_94:
            if (v106) {
              unint64_t v78 = v90;
            }
            goto LABEL_96;
          }
LABEL_88:
          if (v101) {
            goto LABEL_129;
          }
          BOOL v109 = &v75[16 * v78];
          uint64_t v111 = *(void *)v109;
          uint64_t v110 = *((void *)v109 + 1);
          BOOL v89 = __OFSUB__(v110, v111);
          uint64_t v112 = v110 - v111;
          if (v89) {
            goto LABEL_131;
          }
          if (v112 < v100) {
            goto LABEL_14;
          }
LABEL_96:
          unint64_t v117 = v78 - 1;
          if (v78 - 1 >= v21)
          {
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
            goto LABEL_144;
          }
          if (!*v150) {
            goto LABEL_146;
          }
          uint64_t v118 = v19;
          char v119 = &v75[16 * v117];
          uint64_t v120 = *(void *)v119;
          uint64_t v121 = &v75[16 * v78];
          uint64_t v122 = *((void *)v121 + 1);
          sub_21F9F4B30(*v150 + v139[9] * *(void *)v119, *v150 + v139[9] * *(void *)v121, *v150 + v139[9] * v122, v138);
          if (v2) {
            goto LABEL_117;
          }
          if (v122 < v120) {
            goto LABEL_120;
          }
          if (v78 > *((void *)v118 + 2)) {
            goto LABEL_121;
          }
          uint64_t v123 = v118;
          *(void *)char v119 = v120;
          *(void *)&v75[16 * v117 + 8] = v122;
          unint64_t v124 = *((void *)v118 + 2);
          if (v78 >= v124) {
            goto LABEL_122;
          }
          uint64_t v19 = v123;
          unint64_t v21 = v124 - 1;
          memmove(&v75[16 * v78], v121 + 16, 16 * (v124 - 1 - v78));
          *((void *)v19 + 2) = v124 - 1;
          if (v124 <= 2) {
            goto LABEL_14;
          }
        }
      }
      unint64_t v21 = 1;
LABEL_14:
      uint64_t v13 = v150[1];
      uint64_t v20 = v148;
      unint64_t v5 = v139;
      if (v148 >= v13) {
        goto LABEL_106;
      }
    }
LABEL_37:
    uint64_t v47 = v150;
    goto LABEL_38;
  }
  uint64_t v19 = (char *)MEMORY[0x263F8EE78];
  unint64_t v138 = MEMORY[0x263F8EE78]
       + ((*((unsigned __int8 *)v5 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v5 + 80));
  uint64_t v132 = MEMORY[0x263F8EE78];
  if (v13 == 1) {
    goto LABEL_12;
  }
  unint64_t v21 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_106:
  if (v21 >= 2)
  {
    uint64_t v125 = *v150;
    do
    {
      unint64_t v126 = v21 - 2;
      if (v21 < 2) {
        goto LABEL_135;
      }
      if (!v125) {
        goto LABEL_148;
      }
      uint64_t v127 = *(void *)&v19[16 * v126 + 32];
      uint64_t v128 = *(void *)&v19[16 * v21 + 24];
      sub_21F9F4B30(v125 + v5[9] * v127, v125 + v5[9] * *(void *)&v19[16 * v21 + 16], v125 + v5[9] * v128, v138);
      if (v2) {
        break;
      }
      if (v128 < v127) {
        goto LABEL_136;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v19 = sub_21F936940((uint64_t)v19);
      }
      if (v126 >= *((void *)v19 + 2)) {
        goto LABEL_137;
      }
      uint64_t v129 = &v19[16 * v126 + 32];
      *(void *)uint64_t v129 = v127;
      *((void *)v129 + 1) = v128;
      unint64_t v130 = *((void *)v19 + 2);
      if (v21 > v130) {
        goto LABEL_138;
      }
      memmove(&v19[16 * v21 + 16], &v19[16 * v21 + 32], 16 * (v130 - v21));
      *((void *)v19 + 2) = v130 - 1;
      unint64_t v21 = v130 - 1;
    }
    while (v130 > 2);
  }
LABEL_117:
  swift_bridgeObjectRelease();
  *(void *)(v132 + 16) = 0;
  swift_bridgeObjectRelease();
}

void sub_21F9F4810(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v31 = a1;
  uint64_t v7 = sub_21FA241F0();
  MEMORY[0x270FA5388](v7);
  uint64_t v41 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v37 = (char *)&v29 - v10;
  __n128 v13 = MEMORY[0x270FA5388](v11);
  uint64_t v36 = (char *)&v29 - v14;
  uint64_t v39 = a3;
  uint64_t v30 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void (**)(void, void, void, __n128))(v12 + 16);
    uint64_t v15 = v12 + 16;
    uint64_t v17 = *(void *)(v15 + 56);
    uint64_t v32 = (void (**)(char *, uint64_t))(v15 - 8);
    uint64_t v33 = (void (*)(char *, uint64_t, uint64_t))v16;
    uint64_t v34 = a4;
    uint64_t v35 = v15;
    uint64_t v40 = (void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    uint64_t v44 = v17 * (v39 - 1);
    uint64_t v38 = v17;
    uint64_t v43 = v17 * v39;
LABEL_5:
    uint64_t v18 = 0;
    uint64_t v42 = v31;
    while (1)
    {
      uint64_t v19 = *a4;
      uint64_t v20 = v43 + v18 + *a4;
      unint64_t v21 = v36;
      uint64_t v22 = v33;
      ((void (*)(char *, uint64_t, uint64_t, __n128))v33)(v36, v20, v7, v13);
      uint64_t v23 = v37;
      v22(v37, v44 + v18 + v19, v7);
      sub_21F9F55E8((unint64_t *)&qword_26AD46C28, MEMORY[0x263F07490]);
      LOBYTE(v22) = sub_21FA25C50();
      uint64_t v24 = *v32;
      (*v32)(v23, v7);
      uint64_t v25 = v21;
      a4 = v34;
      v24(v25, v7);
      if ((v22 & 1) == 0)
      {
LABEL_4:
        v44 += v38;
        v43 += v38;
        if (++v39 == v30) {
          return;
        }
        goto LABEL_5;
      }
      uint64_t v26 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v27 = (char *)(v26 + v44 + v18);
      uint64_t v28 = *v40;
      (*v40)(v41, v26 + v43 + v18, v7);
      swift_arrayInitWithTakeFrontToBack();
      v28(v27, (uint64_t)v41, v7);
      v18 -= v38;
      if (v39 == ++v42) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

void sub_21F9F4B30(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = sub_21FA241F0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v57 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v56 = (char *)&v48 - v12;
  uint64_t v54 = *(void *)(v13 + 72);
  if (!v54)
  {
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    return;
  }
  if (a2 - a1 == 0x8000000000000000 && v54 == -1) {
    goto LABEL_67;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v54 == -1) {
    goto LABEL_68;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v54;
  unint64_t v60 = a1;
  unint64_t v59 = a4;
  if (v15 >= v14 / v54)
  {
    uint64_t v17 = v14 / v54 * v54;
    if (a4 < a2 || a2 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
      uint64_t v18 = v9;
    }
    else
    {
      uint64_t v18 = v9;
      if (a4 != a2) {
        swift_arrayInitWithTakeBackToFront();
      }
    }
    unint64_t v34 = a4 + v17;
    unint64_t v58 = a4 + v17;
    unint64_t v60 = a2;
    unint64_t v52 = a1;
    if (v17 >= 1 && a1 < a2)
    {
      unint64_t v36 = -v54;
      uint64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v18 + 16);
      uint64_t v37 = v18 + 16;
      uint64_t v50 = v37 - 8;
      unint64_t v51 = v38;
      unint64_t v53 = -v54;
      uint64_t v55 = v37;
      unint64_t v49 = a4;
      uint64_t v39 = v56;
      uint64_t v40 = (void (**)(char *, uint64_t))(v37 - 8);
      do
      {
        uint64_t v54 = a3 + v36;
        uint64_t v41 = v51;
        v51(v39, v34 + v36, v8);
        unint64_t v42 = a2 + v36;
        unint64_t v43 = a3;
        uint64_t v44 = v57;
        v41(v57, v42, v8);
        sub_21F9F55E8((unint64_t *)&qword_26AD46C28, MEMORY[0x263F07490]);
        LOBYTE(v41) = sub_21FA25C50();
        uint64_t v45 = *v40;
        (*v40)(v44, v8);
        v45(v39, v8);
        if (v41)
        {
          a3 = v54;
          if (v43 < a2 || v54 >= a2)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v46 = v49;
          }
          else
          {
            unint64_t v46 = v49;
            if (v43 != a2) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          unint64_t v36 = v53;
          v60 += v53;
        }
        else
        {
          unint64_t v47 = v58;
          a3 = v54;
          v58 += v53;
          if (v43 < v47 || v54 >= v47)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v42 = a2;
            unint64_t v46 = v49;
          }
          else
          {
            unint64_t v46 = v49;
            if (v43 != v47) {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v42 = a2;
          }
          unint64_t v36 = v53;
        }
        unint64_t v34 = v58;
        if (v58 <= v46) {
          break;
        }
        a2 = v42;
      }
      while (v42 > v52);
    }
  }
  else
  {
    uint64_t v16 = v15 * v54;
    if (a4 < a1 || a1 + v16 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v53 = a4 + v16;
    unint64_t v58 = a4 + v16;
    if (v16 >= 1 && a2 < a3)
    {
      uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
      uint64_t v55 = v9 + 16;
      unint64_t v21 = (void (**)(char *, uint64_t))(v9 + 8);
      do
      {
        unint64_t v22 = a3;
        uint64_t v23 = v56;
        v20(v56, a2, v8);
        unint64_t v24 = a4;
        uint64_t v25 = v57;
        v20(v57, v24, v8);
        sub_21F9F55E8((unint64_t *)&qword_26AD46C28, MEMORY[0x263F07490]);
        char v26 = sub_21FA25C50();
        uint64_t v27 = *v21;
        (*v21)(v25, v8);
        v27(v23, v8);
        unint64_t v28 = v60;
        if (v26)
        {
          uint64_t v29 = v54;
          unint64_t v30 = a2 + v54;
          if (v60 < a2 || v60 >= v30)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v22;
          }
          else
          {
            a3 = v22;
            if (v60 == a2) {
              unint64_t v28 = a2;
            }
            else {
              swift_arrayInitWithTakeBackToFront();
            }
          }
        }
        else
        {
          uint64_t v29 = v54;
          unint64_t v32 = v59 + v54;
          if (v60 < v59 || v60 >= v32)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v22;
          }
          else
          {
            a3 = v22;
            if (v60 != v59) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          unint64_t v59 = v32;
          unint64_t v30 = a2;
        }
        unint64_t v60 = v28 + v29;
        a4 = v59;
        if (v59 >= v53) {
          break;
        }
        a2 = v30;
      }
      while (v30 < a3);
    }
  }
  sub_21F9F5104(&v60, &v59, (uint64_t *)&v58);
}

uint64_t sub_21F9F5104(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t result = sub_21FA241F0();
  uint64_t v7 = *(void *)(*(void *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  if (v5 - v4 == 0x8000000000000000 && v7 == -1) {
    goto LABEL_17;
  }
  if (v3 < v4 || v3 >= v4 + (uint64_t)(v5 - v4) / v7 * v7)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v3 != v4)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

uint64_t sub_21F9F51E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21F76CA40(&qword_26AD44E50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21F9F5250(uint64_t a1)
{
  uint64_t v2 = sub_21F76CA40(&qword_26AD44E50);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21F9F52B0()
{
  return sub_21F9F3A94();
}

uint64_t sub_21F9F52D0(uint64_t a1)
{
  uint64_t v2 = sub_21FA24310();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_21F76CA40(&qword_26AD46B38);
    uint64_t v9 = sub_21FA26500();
    uint64_t v10 = 0;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_21F9F55E8(&qword_26AD46A90, MEMORY[0x263F07908]);
      uint64_t v16 = sub_21FA25B60();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v5, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_21F9F55E8(&qword_26AD45898, MEMORY[0x263F07908]);
          char v23 = sub_21FA25CE0();
          unint64_t v24 = *v15;
          (*v15)(v5, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        uint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return v9;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

uint64_t sub_21F9F55E8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21F9F5630()
{
  uint64_t AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t v2 = swift_checkMetadataState();
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      if (v4 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *sub_21F9F5770(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v23 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v23 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v5 + 64) + v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = v9 + v12;
  uint64_t v14 = (v7 | *(unsigned char *)(v5 + 80) | *(unsigned char *)(v11 + 80));
  if (v14 <= 7
    && ((v13 + (v8 & ~(unint64_t)v7)) & ~v12)
     + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) <= 0x18
    && ((v7 | *(_DWORD *)(v5 + 80) | *(_DWORD *)(v11 + 80)) & 0x100000) == 0)
  {
    uint64_t v18 = ~v12;
    uint64_t v22 = AssociatedTypeWitness;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, v4);
    unint64_t v19 = ((unint64_t)a1 + v8) & ~(unint64_t)v7;
    unint64_t v20 = ((unint64_t)a2 + v8) & ~(unint64_t)v7;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(v19, v20, v23);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))((v19 + v13) & v18, (v20 + v13) & v18, v22);
  }
  else
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain();
  }
  return a1;
}

uint64_t sub_21F9F5998(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(uint64_t, void))v4)(a1, *(void *)(a2 + 16));
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v8);
  uint64_t v9 = *(void *)(v7 + 56);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = *(uint64_t (**)(unint64_t, uint64_t))(v11 + 8);
  uint64_t v13 = AssociatedTypeWitness;
  unint64_t v14 = (v8 + v9 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);

  return v12(v14, v13);
}

uint64_t sub_21F9F5AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, void))v6)(a1, a2, *(void *)(a3 + 16));
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7 + 16;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 48) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 48);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 16))((v13 + *(unsigned __int8 *)(v15 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), (v13 + *(unsigned __int8 *)(v15 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_21F9F5BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, void))v6)(a1, a2, *(void *)(a3 + 16));
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7 + 24;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 40) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 24))((v13 + *(unsigned __int8 *)(v15 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), (v13 + *(unsigned __int8 *)(v15 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_21F9F5CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, void))v6)(a1, a2, *(void *)(a3 + 16));
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 32) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 32))((v13 + *(unsigned __int8 *)(v15 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), (v13 + *(unsigned __int8 *)(v15 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_21F9F5E14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, void))v6)(a1, a2, *(void *)(a3 + 16));
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 24) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 40))((v13 + *(unsigned __int8 *)(v15 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), (v13 + *(unsigned __int8 *)(v15 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_21F9F5F38(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v32 = *(void *)(a3 + 24);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(v32 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= v7) {
    unsigned int v10 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v14 = *(void *)(v8 + 64);
  uint64_t v15 = *(unsigned __int8 *)(v12 + 80);
  if (*(_DWORD *)(v12 + 84) <= v10) {
    unsigned int v16 = v10;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v12 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v17 = *(void *)(v6 + 64) + v13;
  if (a2 <= v16) {
    goto LABEL_27;
  }
  uint64_t v18 = ((v14 + v15 + (v17 & ~v13)) & ~v15) + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  char v19 = 8 * v18;
  if (v18 > 3) {
    goto LABEL_10;
  }
  unsigned int v21 = ((a2 - v16 + ~(-1 << v19)) >> v19) + 1;
  if (HIWORD(v21))
  {
    int v20 = *(_DWORD *)((char *)a1 + v18);
    if (!v20) {
      goto LABEL_27;
    }
    goto LABEL_17;
  }
  if (v21 > 0xFF)
  {
    int v20 = *(unsigned __int16 *)((char *)a1 + v18);
    if (!*(unsigned __int16 *)((char *)a1 + v18)) {
      goto LABEL_27;
    }
    goto LABEL_17;
  }
  if (v21 >= 2)
  {
LABEL_10:
    int v20 = *((unsigned __int8 *)a1 + v18);
    if (!*((unsigned char *)a1 + v18)) {
      goto LABEL_27;
    }
LABEL_17:
    int v22 = (v20 - 1) << v19;
    if (v18 > 3) {
      int v22 = 0;
    }
    if (v18)
    {
      if (v18 <= 3) {
        int v23 = v18;
      }
      else {
        int v23 = 4;
      }
      switch(v23)
      {
        case 2:
          int v24 = *a1;
          break;
        case 3:
          int v24 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
          break;
        case 4:
          int v24 = *(_DWORD *)a1;
          break;
        default:
          int v24 = *(unsigned __int8 *)a1;
          break;
      }
    }
    else
    {
      int v24 = 0;
    }
    return v16 + (v24 | v22) + 1;
  }
LABEL_27:
  if (!v16) {
    return 0;
  }
  if (v7 == v16)
  {
    uint64_t v25 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
    char v26 = a1;
    uint64_t v27 = v7;
    uint64_t v28 = v5;
LABEL_33:
    return v25(v26, v27, v28);
  }
  char v26 = (unsigned __int16 *)(((unint64_t)a1 + v17) & ~v13);
  if (v9 == v16)
  {
    uint64_t v25 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v8 + 48);
    uint64_t v27 = v9;
    uint64_t v28 = v32;
    goto LABEL_33;
  }
  unint64_t v30 = ((unint64_t)v26 + v14 + v15) & ~v15;
  uint64_t v31 = *(uint64_t (**)(unint64_t))(v12 + 48);

  return v31(v30);
}

void sub_21F9F6278(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v30 = v6;
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= v7) {
    unsigned int v10 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v12 = v11;
  if (*(_DWORD *)(v11 + 84) <= v10) {
    unsigned int v13 = v10;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v11 + 84);
  }
  uint64_t v14 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v15 = *(void *)(v6 + 64) + v14;
  uint64_t v16 = *(void *)(v8 + 64);
  uint64_t v17 = *(unsigned __int8 *)(v11 + 80);
  size_t v18 = ((v16 + v17 + (v15 & ~v14)) & ~v17) + *(void *)(v11 + 64);
  if (a3 <= v13)
  {
    int v20 = 0;
    char v19 = a1;
  }
  else
  {
    char v19 = a1;
    if (v18 <= 3)
    {
      unsigned int v24 = ((a3 - v13 + ~(-1 << (8 * v18))) >> (8 * v18)) + 1;
      if (HIWORD(v24))
      {
        int v20 = 4;
      }
      else if (v24 >= 0x100)
      {
        int v20 = 2;
      }
      else
      {
        int v20 = v24 > 1;
      }
    }
    else
    {
      int v20 = 1;
    }
  }
  if (v13 < a2)
  {
    unsigned int v21 = ~v13 + a2;
    if (v18 < 4)
    {
      int v22 = (v21 >> (8 * v18)) + 1;
      if (v18)
      {
        int v25 = v21 & ~(-1 << (8 * v18));
        bzero(v19, v18);
        if (v18 == 3)
        {
          *(_WORD *)char v19 = v25;
          void v19[2] = BYTE2(v25);
        }
        else if (v18 == 2)
        {
          *(_WORD *)char v19 = v25;
        }
        else
        {
          *char v19 = v25;
        }
      }
    }
    else
    {
      bzero(v19, v18);
      *(_DWORD *)char v19 = v21;
      int v22 = 1;
    }
    switch(v20)
    {
      case 1:
        v19[v18] = v22;
        return;
      case 2:
        *(_WORD *)&v19[v18] = v22;
        return;
      case 3:
        goto LABEL_47;
      case 4:
        *(_DWORD *)&v19[v18] = v22;
        return;
      default:
        return;
    }
  }
  uint64_t v23 = ~v14;
  switch(v20)
  {
    case 1:
      v19[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&v19[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_47:
      __break(1u);
      JUMPOUT(0x21F9F662CLL);
    case 4:
      *(_DWORD *)&v19[v18] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (!a2) {
        return;
      }
LABEL_27:
      if (v7 == v13)
      {
        char v26 = *(void (**)(unsigned char *))(v30 + 56);
        uint64_t v27 = v19;
LABEL_31:
        v26(v27);
        return;
      }
      uint64_t v27 = (unsigned char *)((unint64_t)&v19[v15] & v23);
      if (v9 == v13)
      {
        char v26 = *(void (**)(unsigned char *))(v8 + 56);
        goto LABEL_31;
      }
      unint64_t v28 = (unint64_t)&v27[v16 + v17] & ~v17;
      uint64_t v29 = *(void (**)(unint64_t))(v12 + 56);
      v29(v28);
      return;
  }
}

uint64_t type metadata accessor for SpecialCaseFormatStyle()
{
  return swift_getGenericMetadata();
}

uint64_t sub_21F9F666C()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F9F6688()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F9F66A4()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F9F66C0()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for SpecialCaseFormatStyle.CodingKeys()
{
  return swift_getGenericMetadata();
}

unsigned char *sub_21F9F66F4(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x21F9F67C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_21F9F67E8()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F9F6804()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F9F6820()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F9F683C()
{
  return 3;
}

void sub_21F9F6844()
{
  qword_26AD52120 = 0x4010000000000000;
}

double sub_21F9F6854()
{
  sub_21FA25270();
  sub_21FA25190();
  double result = *(double *)&v1;
  xmmword_26AD52170 = v1;
  unk_26AD52180 = v2;
  byte_26AD52190 = v3;
  return result;
}

double sub_21F9F68C4()
{
  sub_21F9F6904((uint64_t)v1);
  double result = *(double *)v1;
  xmmword_267EF2FF8 = v1[0];
  unk_267EF3008 = v1[1];
  byte_267EF3018 = v2;
  return result;
}

double sub_21F9F6904@<D0>(uint64_t a1@<X8>)
{
  sub_21FA25270();
  sub_21FA251D0();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA251B0();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

double sub_21F9F6BB4()
{
  sub_21FA25270();
  sub_21FA251D0();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA251B0();
  double result = *(double *)&v1;
  xmmword_267EF3020 = v1;
  *(_OWORD *)algn_267EF3030 = v2;
  byte_267EF3040 = v3;
  return result;
}

double sub_21F9F6CF4()
{
  sub_21F9F6D34((uint64_t)v1);
  double result = *(double *)v1;
  xmmword_267EF3048 = v1[0];
  unk_267EF3058 = v1[1];
  byte_267EF3068 = v2;
  return result;
}

double sub_21F9F6D34@<D0>(uint64_t a1@<X8>)
{
  sub_21FA25270();
  sub_21FA251D0();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA251B0();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

double sub_21F9F6FBC()
{
  sub_21FA25270();
  sub_21FA251D0();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA251B0();
  double result = *(double *)&v1;
  xmmword_267EF3070 = v1;
  unk_267EF3080 = v2;
  byte_267EF3090 = v3;
  return result;
}

double sub_21F9F70F8()
{
  sub_21F9F7138((uint64_t)v1);
  double result = *(double *)v1;
  xmmword_267EF3098 = v1[0];
  unk_267EF30A8 = v1[1];
  byte_267EF30B8 = v2;
  return result;
}

double sub_21F9F7138@<D0>(uint64_t a1@<X8>)
{
  sub_21FA25270();
  sub_21FA251D0();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA251B0();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

double sub_21F9F7528()
{
  sub_21FA25270();
  sub_21FA251D0();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA251B0();
  double result = *(double *)&v1;
  xmmword_267EF30C0 = v1;
  *(_OWORD *)algn_267EF30D0 = v2;
  byte_267EF30E0 = v3;
  return result;
}

double sub_21F9F768C()
{
  sub_21FA25270();
  sub_21FA251D0();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA251B0();
  double result = *(double *)&v1;
  xmmword_267EF30F0 = v1;
  unk_267EF3100 = v2;
  byte_267EF3110 = v3;
  return result;
}

void sub_21F9F787C()
{
  qword_267EF3118 = 0x4010000000000000;
}

double sub_21F9F788C@<D0>(uint64_t a1@<X8>)
{
  sub_21FA25270();
  sub_21FA251D0();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA251B0();
  sub_21FA251D0();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA251B0();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

double sub_21F9F7AB4@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  if (a2 <= 0.0) {
    a2 = 0.0;
  }
  if (a2 <= 1.0) {
    double v3 = a2;
  }
  else {
    double v3 = 1.0;
  }
  sub_21FA25270();
  sub_21FA251D0();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA251B0();
  sub_21FA251D0();
  if (v3 >= 0.271820972)
  {
    sub_21FA25200();
    sub_21FA25200();
    sub_21FA25200();
    sub_21FA25200();
    sub_21FA25200();
    sub_21FA25200();
    sub_21FA25200();
  }
  else
  {
    sub_21FA25220();
    sub_21FA25200();
    sub_21FA25220();
    sub_21FA25200();
    sub_21FA25220();
    sub_21FA25200();
    sub_21FA25220();
  }
  sub_21FA251B0();
  double result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return result;
}

double sub_21F9F7D90@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  if (a2 <= 0.0) {
    a2 = 0.0;
  }
  if (a2 <= 1.0) {
    double v3 = a2;
  }
  else {
    double v3 = 1.0;
  }
  sub_21FA25270();
  sub_21FA251D0();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA251B0();
  sub_21FA251D0();
  if (v3 >= 0.338203119)
  {
    sub_21FA25200();
    sub_21FA25200();
    sub_21FA25200();
    sub_21FA25200();
    sub_21FA25200();
  }
  else
  {
    sub_21FA25220();
    sub_21FA25200();
    sub_21FA25220();
    sub_21FA25200();
    sub_21FA25220();
  }
  sub_21FA251B0();
  double result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return result;
}

double sub_21F9F80F8@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  if (a2 <= 0.0) {
    a2 = 0.0;
  }
  if (a2 > 1.0) {
    a2 = 1.0;
  }
  double v4 = a2;
  sub_21FA25270();
  sub_21FA251D0();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA251B0();
  sub_21FA251D0();
  if (v4 >= 0.292355541)
  {
    sub_21FA25200();
    sub_21FA25200();
    sub_21FA25200();
    sub_21FA25200();
    sub_21FA25200();
    sub_21FA25200();
    sub_21FA25200();
  }
  else
  {
    sub_21FA25220();
    sub_21FA25200();
    sub_21FA25220();
    sub_21FA25200();
    sub_21FA25220();
    sub_21FA25200();
    sub_21FA25220();
  }
  sub_21FA251B0();
  double result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return result;
}

double sub_21F9F845C@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  if (a2 <= 0.0) {
    a2 = 0.0;
  }
  if (a2 <= 1.0) {
    double v3 = a2;
  }
  else {
    double v3 = 1.0;
  }
  sub_21FA25270();
  sub_21FA251D0();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA25200();
  sub_21FA25220();
  sub_21FA251B0();
  sub_21FA251D0();
  if (v3 >= 0.258937054)
  {
    sub_21FA25200();
    sub_21FA25200();
    sub_21FA25200();
    sub_21FA25200();
    sub_21FA25200();
    sub_21FA25200();
    sub_21FA25200();
    sub_21FA25200();
    sub_21FA25200();
  }
  else
  {
    sub_21FA25220();
    sub_21FA25200();
    sub_21FA25220();
    sub_21FA25200();
    sub_21FA25220();
    sub_21FA25200();
    sub_21FA25220();
    sub_21FA25200();
    sub_21FA25220();
  }
  sub_21FA251B0();
  double result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return result;
}

uint64_t destroy for AnyFormatStyle(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 3) {
    unsigned int v1 = *(_DWORD *)a1 + 3;
  }
  if (v1 <= 2) {
    return _s6Charts15AnyChartContentVwxx_0(a1);
  }
  return a1;
}

uint64_t initializeWithCopy for AnyFormatStyle(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 3) {
    unsigned int v3 = *(_DWORD *)a2 + 3;
  }
  if (v3 == 2)
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t))(v5 - 8))(a1);
    *(unsigned char *)(a1 + 40) = 2;
  }
  else if (v3 == 1)
  {
    long long v6 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v6;
    (**(void (***)(uint64_t))(v6 - 8))(a1);
    *(unsigned char *)(a1 + 40) = 1;
  }
  else if (v3)
  {
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(unsigned char *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for AnyFormatStyle(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    if (v4 <= 2) {
      _s6Charts15AnyChartContentVwxx_0(a1);
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2)
    {
      uint64_t v7 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v7;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v7 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 2;
    }
    else if (v5 == 1)
    {
      uint64_t v8 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v8;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v8 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      long long v9 = *a2;
      long long v10 = a2[1];
      *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v10;
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for AnyFormatStyle(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    if (v4 <= 2) {
      _s6Charts15AnyChartContentVwxx_0(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2)
    {
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 40) = 2;
    }
    else if (v5 == 1)
    {
      long long v8 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v8;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 40) = 1;
    }
    else
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      if (v5)
      {
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 40) = 0;
      }
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyFormatStyle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 4) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AnyFormatStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)double result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)double result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_21F9F8DB0(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 3) {
    return (*(_DWORD *)a1 + 3);
  }
  return result;
}

uint64_t sub_21F9F8DCC(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 40) = a2;
  return result;
}

uint64_t sub_21F9F8DF4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v30 = a2;
  uint64_t v6 = sub_21FA24190();
  uint64_t v29 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  long long v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_21FA241F0();
  uint64_t v31 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_21FA24220();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v13 = sub_21F76CA40(qword_26AD48308);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    uint64_t v18 = v14;
    sub_21F7F3EA0(v3, (uint64_t)&v36);
    if (v39 - 1 >= 2)
    {
      if (v39)
      {
        v32[0] = a1;
        sub_21FA24200();
        sub_21F885234();
        sub_21FA23F30();
        sub_21F779E60((unint64_t *)&qword_26AD46C20, qword_26AD48308);
        sub_21FA25A70();
        (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v13);
        return v33;
      }
      else
      {
        long long v33 = v36;
        long long v34 = v37;
        uint64_t v35 = v38;
        v32[0] = a1;
        char v19 = sub_21F77E0FC(&v33, *((uint64_t *)&v37 + 1));
        sub_21F9F9DA8((uint64_t)v19, (uint64_t)v32, MEMORY[0x263F8D538]);
        a1 = v20;
        sub_21F76CA84((uint64_t)&v33, qword_26AD46C40);
      }
      return a1;
    }
LABEL_9:
    sub_21F7F3CCC((uint64_t)&v36);
    return 0;
  }
  if (a3 != 1)
  {
    sub_21F7F3EA0(v3, (uint64_t)&v36);
    if (v39 >= 2u)
    {
      if (v39 == 2)
      {
        long long v33 = v36;
        long long v34 = v37;
        uint64_t v35 = v38;
        uint64_t v21 = v30;
        v32[0] = a1;
        v32[1] = v30;
        int v22 = sub_21F77E0FC(&v33, *((uint64_t *)&v37 + 1));
        swift_bridgeObjectRetain();
        sub_21F9F9DA8((uint64_t)v22, (uint64_t)v32, MEMORY[0x263F8D310]);
        uint64_t v24 = v23;
        sub_21F76CA84((uint64_t)&v33, &qword_26AD44898);
        sub_21F7654F0(a1, v21, 2);
        return v24;
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      return a1;
    }
    goto LABEL_9;
  }
  sub_21FA23FD0();
  uint64_t v17 = sub_21F7F3EA0(v3, (uint64_t)&v36);
  switch(v39)
  {
    case 1u:
      long long v33 = v36;
      long long v34 = v37;
      uint64_t v35 = v38;
      int v25 = sub_21F77E0FC(&v33, *((uint64_t *)&v37 + 1));
      sub_21F9F9DA8((uint64_t)v25, (uint64_t)v11, v9);
      a1 = v26;
      sub_21F76CA84((uint64_t)&v33, &qword_26AD46A98);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v9);
      break;
    case 3u:
      MEMORY[0x223C532A0](v17);
      sub_21F8BD6E8();
      sub_21FA241D0();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v6);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v9);
      return v33;
    default:
      sub_21F7F3CCC((uint64_t)&v36);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v9);
      return 0;
  }
  return a1;
}

uint64_t sub_21F9F9320(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = sub_21FA24190();
  uint64_t v51 = *(void *)(v6 - 8);
  uint64_t v52 = v6;
  MEMORY[0x270FA5388](v6);
  long long v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_21FA241F0();
  uint64_t v53 = *(void *)(v9 - 8);
  uint64_t v54 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v51 - v13;
  uint64_t v15 = sub_21FA24220();
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v16 = sub_21F76CA40(qword_26AD48308);
  MEMORY[0x270FA5388](v16);
  char v19 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    sub_21FA23FD0();
    sub_21FA23FD0();
    sub_21F7F3EA0(v55, (uint64_t)&v60);
    switch(v63)
    {
      case 1u:
        long long v57 = v60;
        long long v58 = v61;
        uint64_t v59 = v62;
        sub_21F76CA40(&qword_26AD46E18);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_21FA28820;
        long long v33 = sub_21F77E0FC(&v57, *((uint64_t *)&v58 + 1));
        uint64_t v34 = v54;
        sub_21F9F9DA8((uint64_t)v33, (uint64_t)v14, v54);
        *(void *)(inited + 32) = v35;
        *(void *)(inited + 40) = v36;
        long long v37 = sub_21F77E0FC(&v57, *((uint64_t *)&v58 + 1));
        sub_21F9F9DA8((uint64_t)v37, (uint64_t)v11, v34);
        *(void *)(inited + 48) = v38;
        *(void *)(inited + 56) = v39;
        uint64_t v23 = sub_21F97D100(0x4025204F54204025, 0xE800000000000000, inited);
        swift_setDeallocating();
        swift_arrayDestroy();
        sub_21F76CA84((uint64_t)&v57, &qword_26AD46A98);
        uint64_t v40 = *(void (**)(char *, uint64_t))(v53 + 8);
        v40(v11, v34);
        v40(v14, v34);
        break;
      case 3u:
        sub_21F76CA40(&qword_26AD46E18);
        uint64_t v41 = swift_initStackObject();
        *(_OWORD *)(v41 + 16) = xmmword_21FA28820;
        uint64_t v55 = v41 + 32;
        MEMORY[0x223C532A0]();
        sub_21F8BD6E8();
        uint64_t v42 = v52;
        sub_21FA241D0();
        unint64_t v43 = *(uint64_t (**)(char *, uint64_t))(v51 + 8);
        uint64_t v44 = v43(v8, v42);
        MEMORY[0x223C532A0](v44);
        sub_21FA241D0();
        v43(v8, v42);
        uint64_t v23 = sub_21F97D100(0x4025204F54204025, 0xE800000000000000, v41);
        swift_setDeallocating();
        swift_arrayDestroy();
        uint64_t v45 = *(void (**)(char *, uint64_t))(v53 + 8);
        unint64_t v46 = v11;
        uint64_t v47 = v54;
        v45(v46, v54);
        v45(v14, v47);
        break;
      default:
        sub_21F7F3CCC((uint64_t)&v60);
        uint64_t v21 = v54;
        int v22 = *(void (**)(char *, uint64_t))(v53 + 8);
        v22(v11, v54);
        v22(v14, v21);
        return 0;
    }
  }
  else
  {
    uint64_t v20 = v17;
    uint64_t v54 = a2;
    sub_21F7F3EA0(v55, (uint64_t)&v60);
    if (v63 - 1 >= 2)
    {
      if (v63)
      {
        sub_21F76CA40(&qword_26AD46E18);
        uint64_t v48 = swift_initStackObject();
        *(_OWORD *)(v48 + 16) = xmmword_21FA28820;
        uint64_t v55 = v48 + 32;
        *(void *)&long long v57 = a1;
        sub_21FA24200();
        sub_21F885234();
        sub_21FA23F30();
        sub_21F779E60((unint64_t *)&qword_26AD46C20, qword_26AD48308);
        sub_21FA25A70();
        unint64_t v49 = *(void (**)(char *, uint64_t))(v20 + 8);
        v49(v19, v16);
        uint64_t v53 = v48 + 48;
        *(void *)&long long v57 = v54;
        sub_21FA24200();
        sub_21FA23F30();
        sub_21FA25A70();
        v49(v19, v16);
        uint64_t v23 = sub_21F97D100(0x4025204F54204025, 0xE800000000000000, v48);
        swift_setDeallocating();
        swift_arrayDestroy();
      }
      else
      {
        long long v57 = v60;
        long long v58 = v61;
        uint64_t v59 = v62;
        sub_21F76CA40(&qword_26AD46E18);
        uint64_t v24 = swift_initStackObject();
        *(_OWORD *)(v24 + 16) = xmmword_21FA28820;
        v56[0] = a1;
        int v25 = sub_21F77E0FC(&v57, *((uint64_t *)&v58 + 1));
        uint64_t v26 = MEMORY[0x263F8D538];
        sub_21F9F9DA8((uint64_t)v25, (uint64_t)v56, MEMORY[0x263F8D538]);
        *(void *)(v24 + 32) = v27;
        *(void *)(v24 + 40) = v28;
        v56[0] = v54;
        uint64_t v29 = sub_21F77E0FC(&v57, *((uint64_t *)&v58 + 1));
        sub_21F9F9DA8((uint64_t)v29, (uint64_t)v56, v26);
        *(void *)(v24 + 48) = v30;
        *(void *)(v24 + 56) = v31;
        uint64_t v23 = sub_21F97D100(0x4025204F54204025, 0xE800000000000000, v24);
        swift_setDeallocating();
        swift_arrayDestroy();
        sub_21F76CA84((uint64_t)&v57, qword_26AD46C40);
      }
    }
    else
    {
      sub_21F7F3CCC((uint64_t)&v60);
      return 0;
    }
  }
  return v23;
}

uint64_t sub_21F9F9AC4()
{
  qword_26AD51F90 = sub_21F76CA40(&qword_26AD43F48);
  uint64_t result = sub_21F779E60(&qword_26AD43F40, &qword_26AD43F48);
  qword_26AD51F98 = result;
  byte_26AD51FA0 = 2;
  return result;
}

uint64_t sub_21F9F9B2C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = sub_21F77E0FC(a1, v5);

  return sub_21F9F9B84((uint64_t)v6, a2, a3, v5);
}

uint64_t sub_21F9F9B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_21FA26340();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = &v19[-v8 - 8];
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = &v19[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_21F77E098(a2, (uint64_t)v19);
  sub_21F76CA40(&qword_26AD46C10);
  int v14 = swift_dynamicCast();
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  if (v14)
  {
    v15(v9, 0, 1, a4);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v9, a4);
    char v16 = sub_21FA25CE0();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, a4);
  }
  else
  {
    v15(v9, 1, 1, a4);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    char v16 = 0;
  }
  return v16 & 1;
}

void sub_21F9F9DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v18[0] = a2;
  v18[1] = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v8 = (char *)v18 - v7;
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __n128 v13 = MEMORY[0x270FA5388](v9);
  uint64_t v15 = (char *)v18 - v14;
  if (*(void *)(*(void *)(a3 - 8) + 64) == v6)
  {
    uint64_t v16 = v12;
    (*(void (**)(char *, void, uint64_t, __n128))(v5 + 16))(v8, v18[0], AssociatedTypeWitness, v13);
    sub_21FA23E50();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
    if (v11 == 16)
    {
      uint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
      swift_bridgeObjectRetain();
      v17(v15, v16);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_21F9F9FC4(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_21F9F9B2C(a1, a2, *(void *)(a3 + 16));
}

uint64_t sub_21F9F9FCC(uint64_t a1)
{
  return _s6Charts15AnyChartContentVwxx_0(a1);
}

uint64_t sub_21F9F9FF4()
{
  return 0;
}

uint64_t sub_21F9FA000@<X0>(unsigned char *a1@<X8>)
{
  char v2 = sub_21F9FA160();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 & 1;
  return result;
}

uint64_t sub_21F9FA048@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_21F9FA160();
  *a1 = result & 1;
  return result;
}

uint64_t sub_21F9FA078(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t sub_21F9FA0CC(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t sub_21F9FA120@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_21F8B0FF4(a1, *(void *)(a2 + 16), a3);
}

uint64_t sub_21F9FA128(uint64_t a1)
{
  return sub_21F9F9FCC(a1);
}

uint64_t sub_21F9FA144(void *a1)
{
  return sub_21F9FA454(a1);
}

uint64_t sub_21F9FA160()
{
  return 1;
}

uint64_t sub_21F9FA16C(uint64_t a1, uint64_t a2)
{
  sub_21F7F3EA0(a1, (uint64_t)v20);
  sub_21F7F3EA0(a2, (uint64_t)v21);
  switch(v20[40])
  {
    case 1:
      sub_21F7F3EA0((uint64_t)v20, (uint64_t)v18);
      if (v22 == 1)
      {
        long long v15 = *(_OWORD *)v21;
        long long v16 = *(_OWORD *)&v21[16];
        uint64_t v17 = *(void *)&v21[32];
        uint64_t v4 = v19;
        uint64_t v5 = sub_21F77E0FC(v18, v19);
        uint64_t v6 = sub_21FA241F0();
        char v7 = sub_21F9F9B84((uint64_t)v5, (uint64_t)&v15, v6, v4);
        uint64_t v8 = &qword_26AD46A98;
        goto LABEL_16;
      }
      uint64_t v3 = &qword_26AD46A98;
      goto LABEL_13;
    case 2:
      sub_21F7F3EA0((uint64_t)v20, (uint64_t)v18);
      if (v22 == 2)
      {
        long long v15 = *(_OWORD *)v21;
        long long v16 = *(_OWORD *)&v21[16];
        uint64_t v17 = *(void *)&v21[32];
        uint64_t v9 = v19;
        uint64_t v10 = sub_21F77E0FC(v18, v19);
        char v7 = sub_21F9F9B84((uint64_t)v10, (uint64_t)&v15, MEMORY[0x263F8D310], v9);
        uint64_t v8 = &qword_26AD44898;
        goto LABEL_16;
      }
      uint64_t v3 = &qword_26AD44898;
      goto LABEL_13;
    case 3:
      if (v22 != 3) {
        goto LABEL_14;
      }
      int8x16_t v11 = vorrq_s8(*(int8x16_t *)&v21[8], *(int8x16_t *)&v21[24]);
      if (*(void *)&vorr_s8(*(int8x8_t *)v11.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)) | *(void *)v21) {
        goto LABEL_14;
      }
      sub_21F7F3CCC((uint64_t)v20);
      char v7 = 1;
      return v7 & 1;
    default:
      sub_21F7F3EA0((uint64_t)v20, (uint64_t)v18);
      if (v22)
      {
        uint64_t v3 = qword_26AD46C40;
LABEL_13:
        sub_21F76CA84((uint64_t)v18, v3);
LABEL_14:
        sub_21F76CA84((uint64_t)v20, qword_26AD447F8);
        char v7 = 0;
      }
      else
      {
        long long v15 = *(_OWORD *)v21;
        long long v16 = *(_OWORD *)&v21[16];
        uint64_t v17 = *(void *)&v21[32];
        uint64_t v12 = v19;
        __n128 v13 = sub_21F77E0FC(v18, v19);
        char v7 = sub_21F9F9B84((uint64_t)v13, (uint64_t)&v15, MEMORY[0x263F8D538], v12);
        uint64_t v8 = qword_26AD46C40;
LABEL_16:
        sub_21F76CA84((uint64_t)&v15, v8);
        sub_21F76CA84((uint64_t)v18, v8);
        sub_21F7F3CCC((uint64_t)v20);
      }
      return v7 & 1;
  }
}

uint64_t type metadata accessor for AnyFormatStyle.IdentityFormatStyle()
{
  return sub_21F764F08();
}

uint64_t type metadata accessor for AnyFormatStyle.Wrapper()
{
  return sub_21F764F08();
}

uint64_t sub_21F9FA3E4()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F9FA400()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F9FA41C()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F9FA438()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F9FA454(void *a1)
{
  type metadata accessor for AnyFormatStyle.IdentityFormatStyle.CodingKeys();
  swift_getWitnessTable();
  uint64_t v2 = sub_21FA26840();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - v4;
  sub_21F77E0FC(a1, a1[3]);
  sub_21FA26AC0();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t type metadata accessor for AnyFormatStyle.IdentityFormatStyle.CodingKeys()
{
  return sub_21F764F08();
}

uint64_t sub_21F9FA5A8()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F9FA5C4()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for MakePlottedValueStylingContext()
{
  return &type metadata for MakePlottedValueStylingContext;
}

ValueMetadata *type metadata accessor for PlottedValueStylingContext()
{
  return &type metadata for PlottedValueStylingContext;
}

double sub_21F9FA604@<D0>(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t *sub_21F9FA618@<X0>(uint64_t a1@<X8>)
{
  sub_21F76CA40(&qword_267EE80B8);
  double result = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = result[3];
  uint64_t v4 = MEMORY[0x263F8EE88];
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v6 = result[7];
    uint64_t v13 = result[8];
    uint64_t v8 = result[5];
    uint64_t v7 = result[6];
    unint64_t v9 = result[4];
    uint64_t v10 = result[2];
    uint64_t v14 = *result;
    uint64_t v15 = result[1];
    char v16 = v10 & 1;
    sub_21F761E74(*result, v15, v10, v3, v9, v8, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_21F9AA780(v9, v8, v7, v6, v13);
    sub_21F7656A8(v14, v15, v16);
    swift_bridgeObjectRelease();
    double result = (uint64_t *)sub_21F770E38(v9, v8, v7);
    long long v12 = 0uLL;
    long long v11 = 0uLL;
  }
  else
  {
    long long v11 = 0uLL;
    long long v12 = 0uLL;
  }
  *(_OWORD *)a1 = v11;
  *(unsigned char *)(a1 + 16) = 1;
  *(_OWORD *)(a1 + 24) = v12;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v4;
  *(_WORD *)(a1 + 64) = 512;
  return result;
}

uint64_t ChartContent.id<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))(v14, v16, a2, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  return sub_21F9FA91C((uint64_t)v14, (uint64_t)v10, a2, a3, a4);
}

uint64_t sub_21F9FA91C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for ModifiedChartContent_ID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

_UNKNOWN **sub_21F9FA9E4()
{
  return &off_26B591C18;
}

uint64_t sub_21F9FA9F0(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void sub_21F9FABE8(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x21F9FAEB4);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for ModifiedChartContent_ID()
{
  return swift_getGenericMetadata();
}

uint64_t sub_21F9FAEF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v21 = *v14;
  uint64_t v28 = v15;
  uint64_t v29 = v16;
  uint64_t v30 = v17;
  uint64_t v31 = v18;
  uint64_t v19 = type metadata accessor for ModifiedChartContent_ID();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1 + *(int *)(v19 + 52), a4);
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v26 = a1;
  long long v27 = v21;
  swift_retain();
  sub_21F75895C((uint64_t)v13);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, a4);
}

uint64_t sub_21F9FB06C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  v23[1] = a6;
  uint64_t v11 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v15 = *v14;
  uint64_t v16 = *((void *)v14 + 1);
  uint64_t v26 = v17;
  uint64_t v27 = v18;
  uint64_t v28 = v19;
  uint64_t v29 = v20;
  uint64_t v21 = type metadata accessor for ModifiedChartContent_ID();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1 + *(int *)(v21 + 52), a3);
  v23[4] = a2;
  v23[5] = a3;
  v23[6] = a4;
  v23[7] = a5;
  v23[8] = a1;
  char v24 = v15;
  uint64_t v25 = v16;
  sub_21F75895C((uint64_t)v13);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, a3);
}

uint64_t sub_21F9FB1D8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_21F9FAEF4(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

uint64_t sub_21F9FB1E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  return sub_21F9FB06C(a1, a2[2], a2[3], a2[4], a2[5], a3);
}

void *PointMark.init<A, B>(x:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  sub_21F9D5860(a1, a3, a5, (uint64_t)v16);
  sub_21F764AF8((uint64_t)v16, (uint64_t)v15);
  sub_21F9D5860(a2, a4, a6, (uint64_t)v17);
  sub_21F764AF8((uint64_t)v17, (uint64_t)v18);
  uint64_t v12 = type metadata accessor for PlottableValue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(a2, v12);
  uint64_t v13 = type metadata accessor for PlottableValue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a1, v13);
  uint64_t v19 = 0;
  char v20 = 1;
  sub_21F9D5DEC((uint64_t)&v19);
  sub_21F764AF8((uint64_t)v15, (uint64_t)v21);
  sub_21F764AF8((uint64_t)v21, (uint64_t)__src);
  sub_21F764AF8((uint64_t)v18, (uint64_t)&__src[144]);
  sub_21F764AF8((uint64_t)&v19, (uint64_t)&__src[288]);
  return memcpy(a7, __src, 0x1B0uLL);
}

void *PointMark.init<A>(x:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  sub_21F9D5860(a1, a4, a5, (uint64_t)v12);
  sub_21F764AF8((uint64_t)v12, (uint64_t)v13);
  uint64_t v10 = type metadata accessor for PlottableValue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
  uint64_t v14 = a2;
  char v15 = a3 & 1;
  sub_21F9D5DEC((uint64_t)&v14);
  uint64_t v16 = 0;
  char v17 = 1;
  sub_21F9D5DEC((uint64_t)&v16);
  sub_21F764AF8((uint64_t)v13, (uint64_t)__src);
  sub_21F764AF8((uint64_t)&v14, (uint64_t)&__src[144]);
  sub_21F764AF8((uint64_t)&v16, (uint64_t)&__src[288]);
  return memcpy(a6, __src, 0x1B0uLL);
}

void *PointMark.init<A>(x:y:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v14 = a1;
  char v15 = a2 & 1;
  sub_21F9D5DEC((uint64_t)&v14);
  sub_21F764AF8((uint64_t)&v14, (uint64_t)v12);
  sub_21F9D5860(a3, a4, a5, (uint64_t)v13);
  sub_21F764AF8((uint64_t)v13, (uint64_t)v16);
  uint64_t v10 = type metadata accessor for PlottableValue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a3, v10);
  uint64_t v17 = 0;
  char v18 = 1;
  sub_21F9D5DEC((uint64_t)&v17);
  sub_21F764AF8((uint64_t)v12, (uint64_t)v19);
  sub_21F764AF8((uint64_t)v19, (uint64_t)__src);
  sub_21F764AF8((uint64_t)v16, (uint64_t)&__src[144]);
  sub_21F764AF8((uint64_t)&v17, (uint64_t)&__src[288]);
  return memcpy(a6, __src, 0x1B0uLL);
}

uint64_t static PointMark._renderChartContent(_:_:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t *a3@<X8>)
{
  long long v58 = a3;
  uint64_t v5 = type metadata accessor for ChartContentRenderContext.Environment(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v57 = (uint64_t)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for SgPoint(0);
  MEMORY[0x270FA5388](v56);
  uint64_t v8 = (double *)((char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_21F764AF8(a1, (uint64_t)v61);
  sub_21F764AF8(a1 + 144, (uint64_t)v62);
  char v9 = *a2;
  uint64_t v10 = *((void *)a2 + 1);
  sub_21F764AF8((uint64_t)v61, (uint64_t)v64);
  int v11 = sub_21F7607A0((uint64_t)v64);
  if ((v11 - 2) >= 4)
  {
    if (v11)
    {
      uint64_t v23 = sub_21F7607C4((uint64_t)v64);
      if (*(unsigned char *)(v23 + 8)) {
        double v24 = (*(double *)(v10 + 24) + *(double *)(v10 + 32)) * 0.5;
      }
      else {
        double v24 = *(double *)v23;
      }
      uint64_t v25 = v10 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
      swift_beginAccess();
      double v12 = v24 + *(double *)(v25 + *(int *)(v5 + 88));
      swift_retain();
    }
    else
    {
      uint64_t v13 = sub_21F7607C4((uint64_t)v64);
      uint64_t v14 = *(void *)(v13 + 32);
      uint64_t v15 = *(void *)(v13 + 40);
      long long v16 = *(_OWORD *)(v13 + 16);
      long long v65 = *(_OWORD *)v13;
      long long v66 = v16;
      uint64_t v17 = *(unsigned __int8 *)(v13 + 48);
      sub_21F7E0D5C((uint64_t)&v65, (uint64_t)v68);
      uint64_t v67 = *((void *)&v66 + 1);
      swift_retain_n();
      sub_21F7744A4((uint64_t)&v67);
      sub_21F7E0DEC((uint64_t)v68);
      sub_21F770E44(v14, v15, v17);
      double v18 = COERCE_DOUBLE(sub_21F7DFD84(0, v10, v14, v15, v17));
      char v19 = v9;
      char v21 = v20;
      swift_release();
      sub_21F7E0DB8((uint64_t)v68);
      sub_21F7741D0((uint64_t)&v67);
      sub_21F770E38(v14, v15, v17);
      BOOL v22 = (v21 & 1) == 0;
      char v9 = v19;
      if (v22) {
        double v12 = v18;
      }
      else {
        double v12 = NAN;
      }
    }
  }
  else
  {
    sub_21F7607C4((uint64_t)v64);
    swift_retain();
    double v12 = NAN;
  }
  sub_21F764AF8((uint64_t)v62, (uint64_t)v63);
  switch(sub_21F7607A0((uint64_t)v63))
  {
    case 1u:
      uint64_t v36 = sub_21F7607C4((uint64_t)v63);
      if (*(unsigned char *)(v36 + 8)) {
        double v37 = (*(double *)(v10 + 40) + *(double *)(v10 + 48)) * 0.5;
      }
      else {
        double v37 = *(double *)v36;
      }
      uint64_t v38 = v10 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
      swift_beginAccess();
      if (v9) {
        goto LABEL_23;
      }
      double v26 = v37 + *(double *)(v38 + *(int *)(v5 + 92));
      goto LABEL_25;
    case 2u:
    case 3u:
    case 4u:
    case 5u:
      sub_21F7607C4((uint64_t)v63);
      if (v9) {
        goto LABEL_23;
      }
      double v26 = NAN;
LABEL_25:
      uint64_t v41 = *(void *)(*(void *)(v10 + 16) + 24);
      uint64_t v42 = v10 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
      swift_beginAccess();
      int v43 = *(unsigned __int8 *)(v42 + 152);
      uint64_t v55 = v41;
      uint64_t v44 = v5;
      if (v43 == 255)
      {
        if (qword_26AD45718 != -1) {
          swift_once();
        }
        uint64_t v45 = 0;
        char v46 = 0;
        uint64_t v47 = &qword_26AD52208;
      }
      else
      {
        uint64_t v47 = (uint64_t *)(v42 + 136);
        uint64_t v45 = *(void *)(v42 + 144);
        char v46 = v43 & 1;
      }
      uint64_t v48 = *v47;
      sub_21F97FB9C(v42 + 88, (uint64_t)v59);
      if (v59[40] == 255)
      {
        if (qword_26AD44A40 != -1) {
          swift_once();
        }
        sub_21F7C21A4((uint64_t)&unk_26AD52148, (uint64_t)v60);
        v60[40] = 0;
        sub_21F97FC04((uint64_t)v59);
      }
      else
      {
        sub_21F87B8B4((uint64_t)v59, (uint64_t)v60);
      }
      uint64_t v49 = v57;
      sub_21F760A70(v42, v57, type metadata accessor for ChartContentRenderContext.Environment);
      uint64_t v50 = v56;
      sub_21F77188C(v49, (uint64_t)v8 + *(int *)(v56 + 36));
      uint64_t v51 = *(void *)(v42 + *(int *)(v44 + 64));
      swift_release();
      *(void *)uint64_t v8 = v55;
      v8[1] = v12;
      __n128 v8[2] = v26;
      *((void *)v8 + 3) = v48;
      *((void *)v8 + 4) = v45;
      *((unsigned char *)v8 + 40) = v46;
      sub_21F87B8B4((uint64_t)v60, (uint64_t)(v8 + 6));
      *(void *)((char *)v8 + *(int *)(v50 + 40)) = v51;
      uint64_t v52 = swift_allocBox();
      uint64_t result = sub_21F9FD15C((uint64_t)v8, v53, type metadata accessor for SgPoint);
      unint64_t v39 = v52 | 0x3000000000000000;
      break;
    default:
      uint64_t v27 = sub_21F7607C4((uint64_t)v63);
      uint64_t v28 = *(void *)(v27 + 32);
      uint64_t v29 = *(void *)(v27 + 40);
      long long v30 = *(_OWORD *)(v27 + 16);
      long long v69 = *(_OWORD *)v27;
      long long v70 = v30;
      uint64_t v31 = *(unsigned __int8 *)(v27 + 48);
      sub_21F7E0D5C((uint64_t)&v69, (uint64_t)v72);
      uint64_t v71 = *((void *)&v70 + 1);
      swift_retain();
      sub_21F7744A4((uint64_t)&v71);
      sub_21F7E0DEC((uint64_t)v72);
      sub_21F770E44(v28, v29, v31);
      char v32 = v9;
      double v33 = COERCE_DOUBLE(sub_21F7DFD84(1, v10, v28, v29, v31));
      char v35 = v34;
      swift_release();
      sub_21F7E0DB8((uint64_t)v72);
      sub_21F7741D0((uint64_t)&v71);
      sub_21F770E38(v28, v29, v31);
      if (v35) {
        double v26 = NAN;
      }
      else {
        double v26 = v33;
      }
      if ((v32 & 1) == 0) {
        goto LABEL_25;
      }
LABEL_23:
      unint64_t v39 = sub_21F9FC510((uint64_t)v61);
      uint64_t result = swift_release();
      break;
  }
  *long long v58 = v39;
  return result;
}

uint64_t static PointMark._makeChartContent(content:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_21F76CA40(&qword_267EE8180);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (_DWORD *)((char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  _s6Charts11BuilderPairVA2A12ChartContentRzAaDR_rlE05_makedE07content6inputsAA01_dE7OutputsV7SwiftUI11_GraphValueVyACyxq_GG_AA01_dE6InputsVtFZ_0();
  (*(void (**)(int *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  if (v6 != 4) {
    __break(1u);
  }
  int v8 = *v7;
  (*(void (**)(int *, uint64_t))(v5 + 8))(v7, v4);
  unsigned int v9 = *(_DWORD *)(a2 + *(int *)(type metadata accessor for _ChartContentInputs(0) + 28));
  v13[3] = v8;
  uint64_t v14 = v9;
  sub_21F74D6BC();
  sub_21F9FD0EC();
  uint64_t v10 = sub_21FA24370();
  MEMORY[0x270FA5388](v10);
  v13[-4] = v11;
  sub_21F7AA4C0();
  return sub_21FA24F00();
}

uint64_t static PointMark._chartContentCount(inputs:)()
{
  return 1;
}

uint64_t sub_21F9FBD90()
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v40 = type metadata accessor for ChartContentList.Item();
  uint64_t v42 = *(void *)(v40 - 8);
  MEMORY[0x270FA5388](v40);
  uint64_t v41 = (uint64_t *)((char *)&v37 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v2);
  uint64_t v43 = (uint64_t)&v37 - v3;
  uint64_t v4 = sub_21F76CA40(&qword_267EE81E8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  unsigned int v9 = (char *)&v37 - v8;
  uint64_t v10 = sub_21FA24F70();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  unint64_t v39 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v44 = (char *)&v37 - v14;
  uint64_t Value = (const void *)AGGraphGetValue();
  uint64_t v17 = v16;
  memcpy(v48, Value, sizeof(v48));
  uint64_t v18 = *(int *)(v4 + 48);
  if (*(_DWORD *)(v0 + 4) == *MEMORY[0x263F288F8])
  {
    sub_21F8C05C0((uint64_t)v48, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_21F765124);
    sub_21FA24F60();
    int v19 = 0;
    v9[v18] = 0;
    char v20 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  }
  else
  {
    uint64_t v21 = AGGraphGetValue();
    char v23 = v22;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v6, v21, v10);
    v6[v18] = v23 & 1;
    uint64_t v38 = v17;
    uint64_t v17 = *(int *)(v4 + 48);
    char v20 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v20(v9, v6, v10);
    char v24 = v6[v17];
    LOBYTE(v17) = v38;
    v9[v18] = v24;
    sub_21F8C05C0((uint64_t)v48, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_21F765124);
    int v19 = v9[v18];
  }
  uint64_t v25 = v44;
  v20(v44, v9, v10);
  if ((v17 & 1) != 0 || v19)
  {
    int v27 = *(_DWORD *)(v0 + 8) + 1;
    *(_DWORD *)(v0 + 8) = v27;
    uint64_t v28 = v39;
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v39, v25, v10);
    memcpy(v47, v48, sizeof(v47));
    nullsub_1(v47, v29);
    sub_21F8C05C0((uint64_t)v48, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_21F765124);
    sub_21F7EB324();
    sub_21FA24F80();
    uint64_t v30 = v45;
    if (!v45)
    {
      sub_21F76CA40(qword_267EE7718);
      uint64_t v30 = swift_allocObject();
      *(_OWORD *)(v30 + 16) = xmmword_21FA28550;
      *(void *)(v30 + 32) = 0;
      *(unsigned char *)(v30 + 72) = 0;
    }
    uint64_t v31 = v40;
    uint64_t v32 = (uint64_t)v41;
    *uint64_t v41 = v30;
    v20((char *)(v32 + *(int *)(v31 + 28)), v28, v10);
    *(_DWORD *)(v32 + 8) = v27;
    sub_21F987734(v47, (void *)(v32 + 16));
    uint64_t v33 = v43;
    sub_21F9FD15C(v32, v43, (uint64_t (*)(void))type metadata accessor for ChartContentList.Item);
    sub_21F76CA40(&qword_267EE76C8);
    unint64_t v34 = (*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
    uint64_t v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_21FA28550;
    sub_21F760A70(v33, v35 + v34, (uint64_t (*)(void))type metadata accessor for ChartContentList.Item);
    uint64_t v45 = sub_21F9883FC(v35);
    uint64_t v46 = v36;
    AGGraphSetOutputValue();
    sub_21F8C05C0((uint64_t)v48, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_21F765354);
    swift_bridgeObjectRelease();
    sub_21F9FD1C4(v33);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v25, v10);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v25, v10);
    return sub_21F8C05C0((uint64_t)v48, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, uint64_t, uint64_t))sub_21F765354);
  }
}

uint64_t _s6Charts9PointMarkV19_layoutChartContentyyAC_AA01_eF12LayoutInputsVtFZ_0(uint64_t a1, uint64_t *a2)
{
  sub_21F764AF8(a1, (uint64_t)v15);
  sub_21F764AF8(a1 + 144, (uint64_t)v14);
  uint64_t v4 = *a2;
  swift_beginAccess();
  if (*(unsigned char *)(v4 + 881) == 2)
  {
    sub_21F764AF8((uint64_t)v15, (uint64_t)v16);
    switch(sub_21F7607A0((uint64_t)v16))
    {
      case 1u:
        uint64_t v7 = sub_21F7607C4((uint64_t)v16);
        sub_21F76C9DC(v7, (uint64_t)v17, &qword_26AD455C8);
        goto LABEL_13;
      case 3u:
        sub_21F7607C4((uint64_t)v16);
        goto LABEL_10;
      case 4u:
      case 5u:
        sub_21F7607C4((uint64_t)v16);
        goto LABEL_13;
      default:
        uint64_t v5 = sub_21F7607C4((uint64_t)v16);
        if (*(char *)(v5 + 48) < 0) {
          goto LABEL_10;
        }
        if (*(unsigned char *)(v5 + 48))
        {
          if (*(unsigned char *)(v5 + 48) != 1)
          {
LABEL_10:
            *(unsigned char *)(v4 + 881) = 0;
            break;
          }
          char v6 = 1;
        }
        else
        {
          char v6 = 0;
        }
        sub_21F770E38(*(void *)(v5 + 32), *(void *)(v5 + 40), v6);
LABEL_13:
        sub_21F764AF8((uint64_t)v14, (uint64_t)v18);
        switch(sub_21F7607A0((uint64_t)v18))
        {
          case 1u:
            uint64_t v12 = sub_21F7607C4((uint64_t)v18);
            sub_21F76C9DC(v12, (uint64_t)v19, &qword_26AD455C8);
            goto LABEL_22;
          case 3u:
            sub_21F7607C4((uint64_t)v18);
            goto LABEL_21;
          case 4u:
          case 5u:
            sub_21F7607C4((uint64_t)v18);
            goto LABEL_22;
          default:
            uint64_t v8 = sub_21F7607C4((uint64_t)v18);
            int v9 = *(char *)(v8 + 48);
            if (v9 < 0) {
              goto LABEL_21;
            }
            uint64_t v10 = *(void *)(v8 + 40);
            uint64_t v11 = *(void *)(v8 + 32);
            if ((_BYTE)v9)
            {
              if (v9 == 1) {
                sub_21F770E38(v11, v10, 1);
              }
              else {
LABEL_21:
              }
                *(unsigned char *)(v4 + 881) = 1;
            }
            else
            {
              sub_21F770E38(v11, v10, 0);
            }
            break;
        }
        break;
    }
  }
LABEL_22:
  sub_21F760AD8((uint64_t)v15, 0);
  return sub_21F760AD8((uint64_t)v14, 1);
}

unint64_t sub_21F9FC510(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  char v6 = (void *)v5;
  sub_21F764AF8(v5, (uint64_t)v169);
  uint64_t v7 = v191;
  sub_21F764AF8((uint64_t)v169, (uint64_t)v191);
  sub_21F764AF8((uint64_t)v4, (uint64_t)v168);
  sub_21F764AF8((uint64_t)v168, (uint64_t)v192);
  int v8 = sub_21F9E7A34((uint64_t)v6, (uint64_t)v4) & 1;
  if (v8) {
    int v9 = v192;
  }
  else {
    int v9 = v191;
  }
  if (!v8) {
    uint64_t v7 = v192;
  }
  sub_21F764AF8((uint64_t)v9, (uint64_t)v189);
  sub_21F764AF8((uint64_t)v7, (uint64_t)v190);
  sub_21F764AF8((uint64_t)v189, (uint64_t)v188);
  sub_21F764AF8((uint64_t)v190, (uint64_t)v180);
  sub_21F76CA40(&qword_26AD47CE0);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_21FA2CBA0;
  uint64_t v110 = (uint64_t)v4;
  sub_21F7BB3F8(v4, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F765124);
  uint64_t v109 = (uint64_t)v6;
  sub_21F7BB3F8(v6, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F765124);
  sub_21F7BB3F8(v189, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F765124);
  int v114 = v8;
  sub_21F8DDED0(v8, (uint64_t)v188, (uint64_t)v166);
  sub_21F76C9DC((uint64_t)v166, v10 + 32, &qword_26AD47B78);
  uint64_t v11 = (double *)((char *)v2 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment);
  swift_beginAccess();
  uint64_t v12 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v13 = (uint64_t *)((char *)v11 + v12[18]);
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  uint64_t v16 = v13[2];
  uint64_t v17 = v13[3];
  uint64_t v18 = v13[4];
  uint64_t v19 = v13[5];
  uint64_t v20 = v13[6];
  uint64_t v21 = v13[7];
  uint64_t v22 = v13[8];
  uint64_t v141 = *v13;
  char v142 = v16;
  uint64_t v135 = v17;
  uint64_t v138 = v15;
  uint64_t v129 = v18;
  char v132 = v20;
  uint64_t v126 = v19;
  if (v17)
  {
    LOBYTE(v151) = 4;
    double v152 = *(double *)&v14;
    uint64_t v153 = v15;
    char v154 = v16 & 1;
    uint64_t v155 = v17;
    uint64_t v156 = v18;
    uint64_t v157 = v19;
    char v158 = v20;
    uint64_t v159 = v21;
    uint64_t v160 = v22;
    char v161 = 3;
    sub_21F7BB878((uint64_t)&v151);
    sub_21F7BB81C((uint64_t)&v151, (uint64_t)__src);
    nullsub_1(__src, v23);
  }
  else
  {
    sub_21F7BB380((uint64_t)__src);
  }
  sub_21F76C9DC((uint64_t)__src, (uint64_t)v165, &qword_26AD47B78);
  sub_21F76C9DC((uint64_t)v165, v10 + 184, &qword_26AD47B78);
  char v24 = (uint64_t *)((char *)v11 + v12[19]);
  uint64_t v25 = *v24;
  uint64_t v26 = v24[1];
  uint64_t v27 = v24[2];
  uint64_t v28 = v24[3];
  uint64_t v29 = v24[4];
  uint64_t v30 = v24[5];
  uint64_t v31 = v24[6];
  uint64_t v32 = v24[7];
  uint64_t v33 = v24[8];
  char v113 = v2;
  uint64_t v120 = *v24;
  char v122 = v27;
  uint64_t v118 = v28;
  uint64_t v119 = v26;
  uint64_t v116 = v29;
  char v117 = v31;
  uint64_t v115 = v30;
  if (v28)
  {
    LOBYTE(v151) = 5;
    double v152 = *(double *)&v25;
    uint64_t v153 = v26;
    char v154 = v27 & 1;
    uint64_t v155 = v28;
    uint64_t v156 = v29;
    uint64_t v157 = v30;
    char v158 = v31;
    uint64_t v159 = v32;
    uint64_t v160 = v33;
    char v161 = 3;
    sub_21F7BB878((uint64_t)&v151);
    sub_21F7BB81C((uint64_t)&v151, (uint64_t)__src);
    nullsub_1(__src, v34);
  }
  else
  {
    sub_21F7BB380((uint64_t)__src);
  }
  sub_21F76C9DC((uint64_t)__src, (uint64_t)v164, &qword_26AD47B78);
  sub_21F76C9DC((uint64_t)v164, v10 + 336, &qword_26AD47B78);
  uint64_t v111 = v12;
  uint64_t v112 = v11;
  uint64_t v35 = (uint64_t *)((char *)v11 + v12[20]);
  uint64_t v36 = *v35;
  uint64_t v37 = v35[1];
  uint64_t v38 = v35[2];
  uint64_t v39 = v35[3];
  uint64_t v40 = v35[4];
  uint64_t v41 = v35[5];
  uint64_t v43 = v35[6];
  uint64_t v42 = v35[7];
  uint64_t v44 = v35[8];
  if (v39)
  {
    LOBYTE(v151) = 6;
    double v152 = *(double *)&v36;
    uint64_t v153 = v37;
    char v154 = v38 & 1;
    uint64_t v155 = v39;
    uint64_t v156 = v40;
    uint64_t v157 = v41;
    char v158 = v43;
    uint64_t v159 = v42;
    uint64_t v160 = v44;
    char v161 = 3;
    sub_21F7BB878((uint64_t)&v151);
    sub_21F7BB81C((uint64_t)&v151, (uint64_t)__src);
    nullsub_1(__src, v45);
  }
  else
  {
    sub_21F7BB380((uint64_t)__src);
  }
  sub_21F76C9DC((uint64_t)__src, (uint64_t)v163, &qword_26AD47B78);
  sub_21F76C9DC((uint64_t)v163, v10 + 488, &qword_26AD47B78);
  sub_21F761E74(v141, v138, v142, v135, v129, v126, v132);
  sub_21F761E74(v120, v119, v122, v118, v116, v115, v117);
  sub_21F761E74(v36, v37, v38, v39, v40, v41, v43);
  uint64_t v46 = sub_21F8C2950(v10);
  uint64_t v48 = v47;
  swift_setDeallocating();
  sub_21F76CA40(&qword_26AD47B78);
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_21F764AF8((uint64_t)v190, (uint64_t)v162);
  if (sub_21F7607A0((uint64_t)v162))
  {
    swift_bridgeObjectRelease();
LABEL_19:
    swift_bridgeObjectRelease();
    sub_21F7BB3F8(v189, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F765354);
    sub_21F7BB3F8(v190, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F765354);
    return 0xE000000000000000;
  }
  uint64_t v139 = v46;
  uint64_t v143 = v48;
  int v144 = v114 ^ 1;
  uint64_t v49 = sub_21F7607C4((uint64_t)v162);
  uint64_t v50 = *(void *)(v49 + 8);
  char v52 = *(unsigned char *)(v49 + 16);
  uint64_t v53 = *(void *)(v49 + 24);
  uint64_t v54 = *(void *)(v49 + 32);
  uint64_t v55 = *(void *)(v49 + 40);
  char v56 = *(unsigned char *)(v49 + 48);
  v181[0] = *(void *)v49;
  uint64_t v51 = v181[0];
  v181[1] = v50;
  char v182 = v52;
  uint64_t v183 = v53;
  uint64_t v184 = v54;
  uint64_t v185 = v55;
  char v186 = v56;
  long long v187 = *(_OWORD *)(v49 + 56);
  sub_21F764AF8((uint64_t)v190, (uint64_t)v149);
  uint64_t v57 = sub_21F7607C4((uint64_t)v149);
  uint64_t v58 = *(void *)(v57 + 8);
  uint64_t v127 = *(void *)v57;
  char v125 = *(unsigned char *)(v57 + 16);
  uint64_t v133 = *(void *)(v57 + 40);
  uint64_t v136 = *(void *)(v57 + 32);
  char v130 = *(unsigned char *)(v57 + 48);
  uint64_t v59 = v113;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_21F7652C0(v51, v50, v52);
  sub_21F770E44(v54, v55, v56);
  sub_21F7652C0(v127, v58, v125);
  sub_21F770E44(v136, v133, v130);
  sub_21F7CC0E4(v144, v59, (char *)v59, v144, v181, (uint64_t)__src);
  sub_21F76C9DC((uint64_t)__src, (uint64_t)v150, &qword_26AD46A38);
  sub_21F76C9DC((uint64_t)v150, (uint64_t)&v151, &qword_26AD46A38);
  if (sub_21F7BB368((uint64_t)&v151) == 1)
  {
    sub_21F7656A8(v51, v50, v52);
    swift_bridgeObjectRelease();
    sub_21F770E38(v54, v55, v56);
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  char v131 = v52;
  sub_21F764AF8(v109, (uint64_t)v171);
  uint64_t v134 = v50;
  uint64_t v137 = v54;
  switch(sub_21F7607A0((uint64_t)v171))
  {
    case 1u:
      uint64_t v70 = sub_21F7607C4((uint64_t)v171);
      if (*(unsigned char *)(v70 + 8)) {
        double v71 = (v113[3] + v113[4]) * 0.5;
      }
      else {
        double v71 = *(double *)v70;
      }
      double v61 = v71 + *(double *)((char *)v112 + v111[22]);
      break;
    case 2u:
    case 3u:
    case 4u:
    case 5u:
      sub_21F7607C4((uint64_t)v171);
      double v61 = NAN;
      break;
    default:
      uint64_t v62 = sub_21F7607C4((uint64_t)v171);
      uint64_t v63 = *(void *)(v62 + 32);
      uint64_t v64 = *(void *)(v62 + 40);
      long long v65 = *(_OWORD *)(v62 + 16);
      long long v172 = *(_OWORD *)v62;
      long long v173 = v65;
      uint64_t v66 = *(unsigned __int8 *)(v62 + 48);
      sub_21F7E0D5C((uint64_t)&v172, (uint64_t)v175);
      uint64_t v174 = *((void *)&v173 + 1);
      swift_retain();
      sub_21F7744A4((uint64_t)&v174);
      sub_21F7E0DEC((uint64_t)v175);
      sub_21F770E44(v63, v64, v66);
      double v67 = COERCE_DOUBLE(sub_21F7DFD84(0, v113, v63, v64, v66));
      char v69 = v68;
      swift_release();
      sub_21F7E0DB8((uint64_t)v175);
      sub_21F7741D0((uint64_t)&v174);
      sub_21F770E38(v63, v64, v66);
      if (v69) {
        double v61 = NAN;
      }
      else {
        double v61 = v67;
      }
      break;
  }
  sub_21F764AF8(v110, (uint64_t)v170);
  switch(sub_21F7607A0((uint64_t)v170))
  {
    case 1u:
      uint64_t v107 = sub_21F7607C4((uint64_t)v170);
      if (*(unsigned char *)(v107 + 8)) {
        double v108 = (v113[5] + v113[6]) * 0.5;
      }
      else {
        double v108 = *(double *)v107;
      }
      char v82 = v112;
      uint64_t v83 = v139;
      double v72 = v108 + *(double *)((char *)v112 + v111[23]);
      break;
    case 2u:
    case 3u:
    case 4u:
    case 5u:
      sub_21F7607C4((uint64_t)v170);
      double v72 = NAN;
      goto LABEL_34;
    default:
      uint64_t v73 = sub_21F7607C4((uint64_t)v170);
      uint64_t v74 = *(void *)(v73 + 32);
      uint64_t v75 = *(void *)(v73 + 40);
      long long v76 = *(_OWORD *)(v73 + 16);
      long long v176 = *(_OWORD *)v73;
      long long v177 = v76;
      uint64_t v77 = *(unsigned __int8 *)(v73 + 48);
      sub_21F7E0D5C((uint64_t)&v176, (uint64_t)v179);
      uint64_t v178 = *((void *)&v177 + 1);
      swift_retain();
      sub_21F7744A4((uint64_t)&v178);
      sub_21F7E0DEC((uint64_t)v179);
      sub_21F770E44(v74, v75, v77);
      double v78 = COERCE_DOUBLE(sub_21F7DFD84(1, v113, v74, v75, v77));
      char v80 = v79;
      swift_release();
      sub_21F7E0DB8((uint64_t)v179);
      sub_21F7741D0((uint64_t)&v178);
      char v81 = v77;
      uint64_t v59 = v113;
      sub_21F770E38(v74, v75, v81);
      if (v80) {
        double v72 = NAN;
      }
      else {
        double v72 = v78;
      }
LABEL_34:
      char v82 = v112;
      uint64_t v83 = v139;
      break;
  }
  int v84 = *((unsigned __int8 *)v82 + 152);
  if (v84 == 255)
  {
    if (qword_26AD45718 != -1) {
      swift_once();
    }
    double v85 = *(double *)&qword_26AD52208;
  }
  else
  {
    double v85 = v82[17];
    if (v84)
    {
      double v86 = v82[18];
      goto LABEL_42;
    }
  }
  double v86 = sqrt(v85);
  double v85 = v86;
LABEL_42:
  uint64_t v124 = v55;
  char v123 = v56;
  uint64_t v121 = v51;
  if (*((unsigned char *)v82 + v111[27]) == 1)
  {
    double v87 = v61 - v85 * 0.5;
    double v88 = v72 - v86 * 0.5;
  }
  else if ((_BYTE)v114)
  {
    if (v152 >= v151) {
      double v87 = v151;
    }
    else {
      double v87 = v152;
    }
    double v91 = v59[5];
    double v92 = v59[6];
    if (v92 >= v91) {
      double v88 = v59[5];
    }
    else {
      double v88 = v59[6];
    }
    double v85 = vabdd_f64(v152, v151);
    double v86 = vabdd_f64(v92, v91);
  }
  else
  {
    double v89 = v59[3];
    double v90 = v59[4];
    if (v90 >= v89) {
      double v87 = v59[3];
    }
    else {
      double v87 = v59[4];
    }
    if (v152 >= v151) {
      double v88 = v151;
    }
    else {
      double v88 = v152;
    }
    double v85 = vabdd_f64(v90, v89);
    double v86 = vabdd_f64(v152, v151);
  }
  uint64_t v128 = *(void *)(*((void *)v59 + 2) + 24);
  uint64_t v93 = (uint64_t *)((char *)v82 + v111[26]);
  uint64_t v94 = v93[1];
  uint64_t v140 = *v93;
  uint64_t v95 = v111[25];
  uint64_t v96 = (uint64_t *)((char *)v82 + v111[24]);
  uint64_t v97 = *v96;
  uint64_t v98 = v96[1];
  uint64_t v100 = v96[2];
  uint64_t v99 = v96[3];
  uint64_t v102 = *(void *)((char *)v82 + v95);
  uint64_t v101 = *(void *)((char *)v82 + v95 + 8);
  uint64_t v104 = *(void *)((char *)v82 + v95 + 16);
  uint64_t v103 = *(void *)((char *)v82 + v95 + 24);
  swift_bridgeObjectRetain();
  sub_21F7BB3B4(v97, v98, v100, v99);
  sub_21F7BB3B4(v102, v101, v104, v103);
  swift_bridgeObjectRetain();
  sub_21F8DDED0(v144, (uint64_t)v180, (uint64_t)v167);
  sub_21F76C9DC((uint64_t)v167, (uint64_t)v145, &qword_26AD47B78);
  sub_21F7BB3F8(v189, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F765354);
  sub_21F7656A8(v121, v134, v131);
  swift_bridgeObjectRelease();
  sub_21F770E38(v137, v124, v123);
  swift_bridgeObjectRelease();
  sub_21F7BB81C((uint64_t)&v153, (uint64_t)v146);
  nullsub_1(v146, v105);
  sub_21F7BB380((uint64_t)v147);
  __src[0] = v128;
  *(double *)&__src[1] = v87;
  *(double *)&__src[2] = v88;
  *(double *)&__src[3] = v85;
  *(double *)&__src[4] = v86;
  __src[5] = v140;
  __src[6] = v94;
  __src[7] = v97;
  __src[8] = v98;
  __src[9] = v100;
  __src[10] = v99;
  __src[11] = v102;
  __src[12] = v101;
  __src[13] = v104;
  __src[14] = v103;
  __src[15] = v83;
  sub_21F76C9DC((uint64_t)v145, (uint64_t)&__src[16], &qword_26AD47B78);
  __src[35] = v143;
  sub_21F76C9DC((uint64_t)v146, (uint64_t)&__src[36], &qword_26AD47B78);
  sub_21F76C9DC((uint64_t)v147, (uint64_t)&__src[55], &qword_26AD47B78);
  LOWORD(__src[74]) = 0;
  __src[75] = 0;
  uint64_t v106 = swift_allocObject();
  memcpy((void *)(v106 + 16), __src, 0x260uLL);
  return v106 | 0xC000000000000000;
}

unint64_t sub_21F9FD0EC()
{
  unint64_t result = qword_267EEA878;
  if (!qword_267EEA878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EEA878);
  }
  return result;
}

uint64_t sub_21F9FD140@<X0>(uint64_t a1@<X8>)
{
  return sub_21F886A6C(*(_DWORD *)(v1 + 16), a1);
}

ValueMetadata *type metadata accessor for PointMark.MakeList()
{
  return &type metadata for PointMark.MakeList;
}

uint64_t sub_21F9FD15C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_21F9FD1C4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ChartContentList.Item();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21F9FD220()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 96))
  {
    sub_21F7656A8(*(void *)(v0 + 72), *(void *)(v0 + 80), *(unsigned char *)(v0 + 88));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 128))
  {
    sub_21F7656A8(*(void *)(v0 + 104), *(void *)(v0 + 112), *(unsigned char *)(v0 + 120));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 144);
  unint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 216);
  unint64_t v6 = *(void *)(v0 + 240);
  uint64_t v7 = *(void *)(v0 + 272);
  uint64_t v8 = *(void *)(v0 + 288);
  if (v6 > 1
    || (v1 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v2 > 1
    || (v5 | v4) & 0xF000000000000007 | v3 & 0xFFFFFFFFFFFFFF7CLL
    || (v8 | *(void *)(v0 + 280)) & 0xF000000000000007 | v7 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_21F7BB724(v1, *(void *)(v0 + 152), *(void *)(v0 + 160), v2, *(void *)(v0 + 176), *(void *)(v0 + 184), *(void *)(v0 + 192), v3, v4, v5, *(void *)(v0 + 224), *(void *)(v0 + 232), v6, *(void *)(v0 + 248), *(void *)(v0 + 256), *(void *)(v0 + 264), v7, *(void *)(v0 + 280), v8);
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v0 + 304);
  unint64_t v10 = *(void *)(v0 + 328);
  uint64_t v11 = *(void *)(v0 + 360);
  uint64_t v12 = *(void *)(v0 + 368);
  uint64_t v13 = *(void *)(v0 + 376);
  unint64_t v14 = *(void *)(v0 + 400);
  uint64_t v15 = *(void *)(v0 + 432);
  uint64_t v16 = *(void *)(v0 + 448);
  if (v14 > 1
    || (v9 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v10 > 1
    || (v13 | v12) & 0xF000000000000007 | v11 & 0xFFFFFFFFFFFFFF7CLL
    || (v16 | *(void *)(v0 + 440)) & 0xF000000000000007 | v15 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_21F7BB724(v9, *(void *)(v0 + 312), *(void *)(v0 + 320), v10, *(void *)(v0 + 336), *(void *)(v0 + 344), *(void *)(v0 + 352), v11, v12, v13, *(void *)(v0 + 384), *(void *)(v0 + 392), v14, *(void *)(v0 + 408), *(void *)(v0 + 416), *(void *)(v0 + 424), v15, *(void *)(v0 + 440), v16);
  }
  uint64_t v17 = *(void *)(v0 + 456);
  unint64_t v18 = *(void *)(v0 + 480);
  uint64_t v19 = *(void *)(v0 + 512);
  uint64_t v20 = *(void *)(v0 + 520);
  uint64_t v21 = *(void *)(v0 + 528);
  unint64_t v22 = *(void *)(v0 + 552);
  uint64_t v23 = *(void *)(v0 + 584);
  uint64_t v24 = *(void *)(v0 + 600);
  if (v22 > 1
    || (v17 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v18 > 1
    || (v21 | v20) & 0xF000000000000007 | v19 & 0xFFFFFFFFFFFFFF7CLL
    || (v24 | *(void *)(v0 + 592)) & 0xF000000000000007 | v23 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_21F7BB724(v17, *(void *)(v0 + 464), *(void *)(v0 + 472), v18, *(void *)(v0 + 488), *(void *)(v0 + 496), *(void *)(v0 + 504), v19, v20, v21, *(void *)(v0 + 536), *(void *)(v0 + 544), v22, *(void *)(v0 + 560), *(void *)(v0 + 568), *(void *)(v0 + 576), v23, *(void *)(v0 + 592), v24);
  }

  return MEMORY[0x270FA0238](v0, 624, 7);
}

uint64_t sub_21F9FD48C()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 256);
  uint64_t v2 = sub_21FA26340();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = *(void *)(v0 + *(void *)(*(void *)v0 + 264));

  return sub_21F76D5D8(v3);
}

uint64_t sub_21F9FD53C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_21F9FD584(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_21F9FD5A4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

uint64_t sub_21F9FD5CC()
{
  return sub_21FA26A50();
}

uint64_t sub_21F9FD618()
{
  return sub_21FA26A10();
}

uint64_t sub_21F9FD648()
{
  return sub_21FA26A50();
}

unint64_t sub_21F9FD690()
{
  unint64_t result = qword_267EEA880[0];
  if (!qword_267EEA880[0])
  {
    type metadata accessor for AnySignal();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_267EEA880);
  }
  return result;
}

uint64_t sub_21F9FD6E4()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t sub_21F9FD76C@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)(*(void *)(v1 + 16) - 8) + 16))(a1, v1+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80)));
}

uint64_t sub_21F9FD7AC()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_21F9FD7E4()
{
  (*(void (**)(void))(v0 + 24))();
  return 0;
}

void static Never._makeChart3DContent(content:inputs:)()
{
}

void Never._body.getter()
{
}

_UNKNOWN **sub_21F9FD8B0()
{
  return &protocol witness table for Never;
}

void sub_21F9FD8BC()
{
}

void sub_21F9FD908()
{
}

uint64_t AnyAxisContent.init(_:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21F77F300(a1, a2);
}

uint64_t AnyAxisContent.storage.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21F77E098(v1, a1);
}

uint64_t AnyAxisContent.init<A>(erasing:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  unint64_t v6 = sub_21F77E8F8(a4);
  uint64_t v7 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32);

  return v7(v6, a1, a2);
}

uint64_t static AnyAxisContent._makeAxisContent(_:_:)(void *a1)
{
  uint64_t v1 = a1[4];
  uint64_t v2 = sub_21F77E0FC(a1, a1[3]);
  return (*(uint64_t (**)(void *))(v1 + 8))(v2);
}

uint64_t sub_21F9FDA2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 8))(a1, a2, a2, a3);
}

uint64_t sub_21F9FDA68(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  uint64_t v3 = sub_21F77E0FC(a1, v1);

  return sub_21F9FDA2C((uint64_t)v3, v1, v2);
}

uint64_t static Optional<A>._makeAxisContent(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = sub_21FA26340();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v12 = *(void *)(a2 - 8);
  __n128 v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v11, a1, v8, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a2) == 1)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *a4 = MEMORY[0x263F8EE78];
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v11, a2);
    (*(void (**)(char *))(a3 + 8))(v16);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v16, a2);
  }
  return result;
}

uint64_t sub_21F9FDCB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  return static Optional<A>._makeAxisContent(_:_:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), a4);
}

uint64_t static BuilderConditional<>._makeAxisContent(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  v24[0] = a5;
  v24[1] = a6;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for BuilderConditional.Storage();
  __n128 v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)v24 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v22 + 16))((char *)v24 - v20, a1, v18, v19);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v21, a3);
    (*(void (**)(char *))(v24[0] + 8))(v12);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a3);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v21, a2);
    (*(void (**)(char *))(a4 + 8))(v17);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, a2);
  }
}

uint64_t sub_21F9FDF5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return static BuilderConditional<>._makeAxisContent(_:_:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a3 - 8), *(void *)(a3 - 16), a4);
}

void static BuilderEmpty._makeAxisContent(_:_:)(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
}

uint64_t dispatch thunk of static AxisContent._makeAxisContent(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

ValueMetadata *type metadata accessor for _AxisContentInputs()
{
  return &type metadata for _AxisContentInputs;
}

ValueMetadata *type metadata accessor for _AxisContentOutputs()
{
  return &type metadata for _AxisContentOutputs;
}

ValueMetadata *type metadata accessor for AnyAxisContent()
{
  return &type metadata for AnyAxisContent;
}

uint64_t Plot.init(content:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t static Plot._layoutChartContent(_:_:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  long long v5 = *a2;
  return (*(uint64_t (**)(uint64_t, long long *))(a4 + 32))(a1, &v5);
}

uint64_t static Plot._renderChartContent(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  uint64_t v9 = *(void *)(a2 + 8);
  if ((*(unsigned char *)a2 & 1) == 0)
  {
    LOBYTE(__src[0]) = 0;
LABEL_13:
    __src[1] = v9;
    return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(a4 + 40))(a1, __src, a3, a4);
  }
  uint64_t v10 = v9 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  uint64_t v11 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v12 = (uint64_t *)(v10 + v11[24]);
  uint64_t v13 = (uint64_t *)(v10 + v11[25]);
  uint64_t v14 = v13[3];
  uint64_t v15 = (uint64_t *)(v10 + v11[26]);
  if (v12[3]) {
    BOOL v16 = 0;
  }
  else {
    BOOL v16 = v14 == 0;
  }
  if (v16 && v15[1] == 0)
  {
    LOBYTE(__src[0]) = 1;
    goto LABEL_13;
  }
  uint64_t v18 = v11;
  char v69 = a5;
  uint64_t v19 = v12[1];
  uint64_t v76 = v9;
  uint64_t v77 = *v12;
  uint64_t v78 = v12[3];
  uint64_t v71 = a1;
  uint64_t v73 = v15[1];
  uint64_t v20 = *v13;
  uint64_t v21 = v13[1];
  uint64_t v74 = *v13;
  uint64_t v75 = v21;
  uint64_t v22 = v13[2];
  uint64_t v68 = v12[2];
  uint64_t v70 = *v15;
  *(_OWORD *)uint64_t v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  uint64_t v23 = v14;
  swift_retain();
  sub_21F7BB3B4(v20, v21, v22, v23);
  swift_bridgeObjectRetain();
  sub_21F7BB3B4(v77, v19, v68, v78);
  sub_21F7F42EC(v77, v19, v68, v78);
  uint64_t v24 = (uint64_t *)(v10 + v18[25]);
  uint64_t v25 = *v24;
  uint64_t v26 = v24[1];
  uint64_t v27 = v24[2];
  uint64_t v28 = v24[3];
  *(_OWORD *)uint64_t v24 = 0u;
  *((_OWORD *)v24 + 1) = 0u;
  sub_21F7F42EC(v25, v26, v27, v28);
  uint64_t v29 = (void *)(v10 + v18[26]);
  *uint64_t v29 = 0;
  v29[1] = 0;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v10 + v18[27]) = 1;
  LOBYTE(__src[0]) = 1;
  __src[1] = v76;
  (*(void (**)(void *__return_ptr, uint64_t, void *, uint64_t, uint64_t))(a4 + 40))(v79, v71, __src, a3, a4);
  unint64_t v72 = v79[0];
  uint64_t v30 = (uint64_t *)(v10 + v18[24]);
  uint64_t v31 = *v30;
  uint64_t v32 = v30[1];
  uint64_t v33 = v30[2];
  uint64_t v34 = v30[3];
  *uint64_t v30 = v77;
  v30[1] = v19;
  v30[2] = v68;
  v30[3] = v78;
  uint64_t v35 = v78;
  sub_21F7BB3B4(v77, v19, v68, v78);
  sub_21F7F42EC(v31, v32, v33, v34);
  uint64_t v36 = (uint64_t *)(v10 + v18[25]);
  uint64_t v37 = *v36;
  uint64_t v38 = v36[1];
  uint64_t v39 = v36[2];
  uint64_t v40 = v36[3];
  *uint64_t v36 = v74;
  v36[1] = v75;
  v36[2] = v22;
  v36[3] = v23;
  sub_21F7BB3B4(v74, v75, v22, v23);
  sub_21F7F42EC(v37, v38, v39, v40);
  uint64_t v41 = (void *)(v10 + v18[26]);
  *uint64_t v41 = v70;
  v41[1] = v73;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v10 + v18[27]) = 0;
  swift_retain();
  double v42 = sub_21F8C1DF0(v72);
  CGFloat v44 = v43;
  CGFloat v46 = v45;
  CGFloat v48 = v47;
  swift_release();
  v81.origin.CGFloat x = v42;
  v81.origin.CGFloat y = v44;
  v81.size.CGFloat width = v46;
  v81.size.CGFloat height = v48;
  if (CGRectEqualToRect(v81, *MEMORY[0x263F001A0]))
  {
    sub_21F7F42EC(v74, v75, v22, v23);
    sub_21F7F42EC(v77, v19, v68, v78);
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    *char v69 = v72;
  }
  else
  {
    uint64_t v50 = v19;
    uint64_t v66 = *(void *)(*(void *)(v76 + 16) + 24);
    uint64_t v67 = v23;
    if (v78)
    {
      unsigned int v51 = v68 & 1;
      uint64_t v52 = v75;
      uint64_t v53 = v74;
      uint64_t v54 = v70;
      uint64_t v55 = v77;
    }
    else
    {
      sub_21FA24C40();
      type metadata accessor for FindClass();
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      uint64_t v57 = self;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v58 = objc_msgSend(v57, sel_bundleForClass_, ObjCClassFromMetadata);
      uint64_t v55 = sub_21FA25340();
      uint64_t v50 = v59;
      char v61 = v60;
      uint64_t v35 = v62;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unsigned int v51 = v61 & 1;
      uint64_t v52 = v75;
      uint64_t v53 = v74;
      uint64_t v54 = v70;
    }
    uint64_t v63 = v51;
    sub_21F7BB380((uint64_t)v79);
    sub_21F76CA40(&qword_26AD4A470);
    uint64_t v64 = swift_allocObject();
    *(_OWORD *)(v64 + 16) = xmmword_21FA28550;
    *(void *)(v64 + 32) = v72;
    swift_release();
    __src[0] = v66;
    *(double *)&__src[1] = v42;
    *(CGFloat *)&__src[2] = v44;
    *(CGFloat *)&__src[3] = v46;
    *(CGFloat *)&__src[4] = v48;
    __src[5] = v54;
    __src[6] = v73;
    __src[7] = v55;
    __src[8] = v50;
    __src[9] = v63;
    __src[10] = v35;
    __src[11] = v53;
    __src[12] = v52;
    __src[13] = v22;
    __src[14] = v67;
    sub_21F815840((uint64_t)v79, (uint64_t)&__src[15]);
    __src[34] = v64;
    __src[35] = 0;
    uint64_t v65 = swift_allocObject();
    uint64_t result = (uint64_t)memcpy((void *)(v65 + 16), __src, 0x120uLL);
    *char v69 = v65 | 0xB000000000000000;
  }
  return result;
}

uint64_t sub_21F9FE570()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 96))
  {
    sub_21F7656A8(*(void *)(v0 + 72), *(void *)(v0 + 80), *(unsigned char *)(v0 + 88));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 128))
  {
    sub_21F7656A8(*(void *)(v0 + 104), *(void *)(v0 + 112), *(unsigned char *)(v0 + 120));
    swift_bridgeObjectRelease();
  }
  uint64_t v1 = *(void *)(v0 + 136);
  unint64_t v2 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v5 = *(void *)(v0 + 208);
  unint64_t v6 = *(void *)(v0 + 232);
  uint64_t v7 = *(void *)(v0 + 264);
  uint64_t v8 = *(void *)(v0 + 280);
  if (v6 > 1
    || (v1 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v2 > 1
    || (v5 | v4) & 0xF000000000000007 | v3 & 0xFFFFFFFFFFFFFF7CLL
    || (v8 | *(void *)(v0 + 272)) & 0xF000000000000007 | v7 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_21F7BB724(v1, *(void *)(v0 + 144), *(void *)(v0 + 152), v2, *(void *)(v0 + 168), *(void *)(v0 + 176), *(void *)(v0 + 184), v3, v4, v5, *(void *)(v0 + 216), *(void *)(v0 + 224), v6, *(void *)(v0 + 240), *(void *)(v0 + 248), *(void *)(v0 + 256), v7, *(void *)(v0 + 272), v8);
  }
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 304, 7);
}

uint64_t sub_21F9FE68C(uint64_t a1, long long *a2, uint64_t a3)
{
  return static Plot._layoutChartContent(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t sub_21F9FE698@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  return static Plot._renderChartContent(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t sub_21F9FE6A4(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_21F9FE800(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x21F9FEA18);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        BOOL v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for Plot()
{
  return sub_21F764F08();
}

uint64_t (*sub_21F9FEA58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1)
{
  swift_retain();
  BOOL v9 = sub_21FA00E68(a2, a3, a4, a5);
  swift_release_n();
  return v9;
}

uint64_t sub_21F9FEACC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v4 = v3;
  sub_21FA05CE8(v4, (uint64_t)v20);
  if ((v21 & 1) == 0)
  {
    sub_21F77F300(v20, (uint64_t)v17);
    if (a3 != 255)
    {
      if (a3 == 2)
      {
        uint64_t v10 = v18;
        uint64_t v11 = v19;
        sub_21F77E0FC(v17, v18);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 24))(a1, a2, v10, v11);
        return _s6Charts15AnyChartContentVwxx_0((uint64_t)v17);
      }
      sub_21F7B24B8(a1, a2, a3);
    }
    uint64_t v14 = v18;
    uint64_t v15 = v19;
    sub_21F77E0FC(v17, v18);
    (*(void (**)(void, void, uint64_t, uint64_t))(v15 + 24))(0, 0, v14, v15);
    return _s6Charts15AnyChartContentVwxx_0((uint64_t)v17);
  }
  sub_21F77F300(v20, (uint64_t)v17);
  if (a3 == 255)
  {
LABEL_9:
    uint64_t v12 = v18;
    uint64_t v13 = v19;
    sub_21F77E0FC(v17, v18);
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v13 + 24))(0, 1, v12, v13);
    return _s6Charts15AnyChartContentVwxx_0((uint64_t)v17);
  }
  if (a3)
  {
    sub_21F7B24B8(a1, a2, a3);
    goto LABEL_9;
  }
  uint64_t v8 = v18;
  uint64_t v9 = v19;
  sub_21F77E0FC(v17, v18);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 24))(a1, 0, v8, v9);
  return _s6Charts15AnyChartContentVwxx_0((uint64_t)v17);
}

void *sub_21F9FEC58(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  uint64_t v7 = v6;
  sub_21F7B2688(v7, (uint64_t)v21);
  sub_21F77F300(v21, (uint64_t)v22);
  if (a3 == 255) {
    goto LABEL_7;
  }
  if (a3)
  {
    sub_21F7B24B8(a1, a2, a3);
    goto LABEL_7;
  }
  if (a6)
  {
    if (a6 == 255)
    {
LABEL_8:
      uint64_t v14 = v23;
      uint64_t v15 = v24;
      sub_21F77E0FC(v22, v23);
      (*(void (**)(void, void, uint64_t, uint64_t, uint64_t))(v15 + 24))(0, 0, 1, v14, v15);
      return (void *)_s6Charts15AnyChartContentVwxx_0((uint64_t)v22);
    }
LABEL_7:
    sub_21F7B24B8(a4, a5, a6);
    goto LABEL_8;
  }
  uint64_t v17 = v23;
  uint64_t v18 = v24;
  uint64_t result = sub_21F77E0FC(v22, v23);
  if (*(double *)&a4 >= *(double *)&a1) {
    double v19 = *(double *)&a1;
  }
  else {
    double v19 = *(double *)&a4;
  }
  if (*(double *)&a1 > *(double *)&a4) {
    double v20 = *(double *)&a1;
  }
  else {
    double v20 = *(double *)&a4;
  }
  if (v19 <= v20)
  {
    (*(void (**)(double, double, void, uint64_t, uint64_t))(v18 + 24))(COERCE_DOUBLE(*(void *)&v19), COERCE_DOUBLE(*(void *)&v20), 0, v17, v18);
    return (void *)_s6Charts15AnyChartContentVwxx_0((uint64_t)v22);
  }
  __break(1u);
  return result;
}

uint64_t sub_21F9FEDA0@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(*a1);
  *a3 = result;
  return result;
}

uint64_t sub_21F9FEDD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  void (*v101)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  int v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  void (*v166)(char *, uint64_t, uint64_t);
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  char v179;
  char v180;
  char *v181;
  void (*v182)(char *, uint64_t);
  uint64_t *v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  char *v189;
  void (*v190)(char *, char *, uint64_t);
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  int v195;
  uint64_t v196;
  char *v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  char *v205;
  char *v206;
  char *v207;
  char *v208;
  char *v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  char *v214;
  char *v215;
  uint64_t v216;
  char *v217;
  char *v218;
  char *v219;
  char *v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  void v249[2];
  char v250;
  uint64_t v251;

  uint64_t v248 = a5;
  uint64_t v247 = a3;
  uint64_t v242 = a2;
  uint64_t v245 = a6;
  uint64_t v246 = a1;
  uint64_t v202 = sub_21FA241F0();
  uint64_t v201 = *(void *)(v202 - 8);
  MEMORY[0x270FA5388](v202);
  uint64_t v216 = v7;
  uint64_t v219 = (char *)&v198 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_21FA26340();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v235 = v8;
  uint64_t v236 = v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v200 = (char *)&v198 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v199 = (char *)&v198 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v198 = (char *)&v198 - v14;
  MEMORY[0x270FA5388](v15);
  long long v221 = (char *)&v198 - v16;
  MEMORY[0x270FA5388](v17);
  unsigned __int8 v220 = (char *)&v198 - v18;
  MEMORY[0x270FA5388](v19);
  long long v218 = (char *)&v198 - v20;
  MEMORY[0x270FA5388](v21);
  unsigned __int8 v217 = (char *)&v198 - v22;
  MEMORY[0x270FA5388](v23);
  uint64_t v215 = (char *)&v198 - v24;
  MEMORY[0x270FA5388](v25);
  uint64_t v214 = (char *)&v198 - v26;
  MEMORY[0x270FA5388](v27);
  uint64_t v213 = (char *)&v198 - v28;
  MEMORY[0x270FA5388](v29);
  char v212 = (char *)&v198 - v30;
  MEMORY[0x270FA5388](v31);
  long long v211 = (char *)&v198 - v32;
  MEMORY[0x270FA5388](v33);
  long long v210 = (char *)&v198 - v34;
  MEMORY[0x270FA5388](v35);
  uint64_t v209 = (char *)&v198 - v36;
  MEMORY[0x270FA5388](v37);
  uint64_t v208 = (char *)&v198 - v38;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v40 = sub_21FA26340();
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v237 = v40;
  uint64_t v238 = v41;
  MEMORY[0x270FA5388](v40);
  uint64_t v233 = (uint64_t)&v198 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v43);
  uint64_t v232 = (uint64_t)&v198 - v44;
  MEMORY[0x270FA5388](v45);
  uint64_t v231 = (uint64_t)&v198 - v46;
  MEMORY[0x270FA5388](v47);
  uint64_t v230 = (uint64_t)&v198 - v48;
  MEMORY[0x270FA5388](v49);
  uint64_t v229 = (uint64_t)&v198 - v50;
  MEMORY[0x270FA5388](v51);
  uint64_t v228 = (uint64_t)&v198 - v52;
  MEMORY[0x270FA5388](v53);
  uint64_t v227 = (uint64_t)&v198 - v54;
  MEMORY[0x270FA5388](v55);
  uint64_t v226 = (uint64_t)&v198 - v56;
  MEMORY[0x270FA5388](v57);
  uint64_t v225 = (uint64_t)&v198 - v58;
  MEMORY[0x270FA5388](v59);
  long long v224 = (uint64_t)&v198 - v60;
  MEMORY[0x270FA5388](v61);
  char v223 = (uint64_t)&v198 - v62;
  MEMORY[0x270FA5388](v63);
  long long v222 = (uint64_t)&v198 - v64;
  long long v240 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v65 = *(void *)(v240 + 64);
  MEMORY[0x270FA5388](v66);
  uint64_t v207 = (char *)&v198 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v67);
  uint64_t v206 = (char *)&v198 - v68;
  MEMORY[0x270FA5388](v69);
  uint64_t v205 = (char *)&v198 - v70;
  MEMORY[0x270FA5388](v71);
  uint64_t v204 = (char *)&v198 - v72;
  MEMORY[0x270FA5388](v73);
  uint64_t v203 = (char *)&v198 - v74;
  MEMORY[0x270FA5388](v75);
  uint64_t v77 = (char *)&v198 - v76;
  MEMORY[0x270FA5388](v78);
  char v80 = (char *)&v198 - v79;
  MEMORY[0x270FA5388](v81);
  uint64_t v83 = (char *)&v198 - v82;
  MEMORY[0x270FA5388](v84);
  double v86 = (char *)&v198 - v85;
  MEMORY[0x270FA5388](v87);
  double v89 = (char *)&v198 - v88;
  MEMORY[0x270FA5388](v90);
  double v92 = (char *)&v198 - v91;
  MEMORY[0x270FA5388](v93);
  uint64_t v239 = (char *)&v198 - v94;
  MEMORY[0x270FA5388](v95);
  uint64_t v97 = (char *)&v198 - v96;
  uint64_t v244 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v98);
  uint64_t v234 = (char *)&v198 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v243 = a4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v101 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
  uint64_t v241 = AssociatedTypeWitness;
  v101(&v251, AssociatedTypeWitness, AssociatedConformanceWitness);
  switch((char)v251)
  {
    case 1:
      sub_21FA06798();
      uint64_t v102 = v223;
      uint64_t v112 = v246;
      char v113 = v242;
      uint64_t v105 = v243;
      int v114 = v247;
      uint64_t v115 = v248;
      sub_21FA02440(v246, v223);
      sub_21F7654F0(v112, v113, v114);
      char v117 = v240;
      uint64_t v116 = v241;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v240 + 48))(v102, 1, v241) == 1) {
        goto LABEL_26;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v117 + 32))(v92, v102, v116);
      uint64_t v118 = v239;
      (*(void (**)(char *, char *, uint64_t))(v117 + 16))(v239, v92, v116);
      uint64_t v111 = v209;
      (*(void (**)(char *, uint64_t, uint64_t))(v115 + 32))(v118, v105, v115);
      (*(void (**)(char *, uint64_t))(v117 + 8))(v92, v116);
      goto LABEL_44;
    case 2:
      sub_21FA06744();
      uint64_t v119 = v224;
      uint64_t v120 = v246;
      uint64_t v121 = v242;
      uint64_t v105 = v243;
      char v122 = v247;
      char v123 = v248;
      sub_21FA02440(v246, v224);
      sub_21F7654F0(v120, v121, v122);
      char v125 = v240;
      uint64_t v124 = v241;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v240 + 48))(v119, 1, v241) == 1) {
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v125 + 32))(v89, v119, v124);
      uint64_t v126 = v239;
      (*(void (**)(char *, char *, uint64_t))(v125 + 16))(v239, v89, v124);
      uint64_t v111 = v210;
      (*(void (**)(char *, uint64_t, uint64_t))(v123 + 32))(v126, v105, v123);
      (*(void (**)(char *, uint64_t))(v125 + 8))(v89, v124);
      goto LABEL_44;
    case 3:
      sub_21FA066F0();
      uint64_t v119 = v225;
      uint64_t v127 = v246;
      uint64_t v128 = v242;
      uint64_t v105 = v243;
      uint64_t v129 = v247;
      char v130 = v248;
      sub_21FA02440(v246, v225);
      sub_21F7654F0(v127, v128, v129);
      char v132 = v240;
      char v131 = v241;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v240 + 48))(v119, 1, v241) == 1) {
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v132 + 32))(v86, v119, v131);
      uint64_t v133 = v239;
      (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v239, v86, v131);
      uint64_t v111 = v211;
      (*(void (**)(char *, uint64_t, uint64_t))(v130 + 32))(v133, v105, v130);
      (*(void (**)(char *, uint64_t))(v132 + 8))(v86, v131);
      goto LABEL_44;
    case 4:
      sub_21F97A8D4();
      uint64_t v119 = v226;
      uint64_t v134 = v246;
      uint64_t v135 = v242;
      uint64_t v105 = v243;
      uint64_t v136 = v247;
      uint64_t v137 = v248;
      sub_21FA02440(v246, v226);
      sub_21F7654F0(v134, v135, v136);
      uint64_t v139 = v240;
      uint64_t v138 = v241;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v240 + 48))(v119, 1, v241) == 1) {
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v139 + 32))(v83, v119, v138);
      uint64_t v140 = v239;
      (*(void (**)(char *, char *, uint64_t))(v139 + 16))(v239, v83, v138);
      uint64_t v111 = v212;
      (*(void (**)(char *, uint64_t, uint64_t))(v137 + 32))(v140, v105, v137);
      (*(void (**)(char *, uint64_t))(v139 + 8))(v83, v138);
      goto LABEL_44;
    case 5:
      sub_21FA0669C();
      uint64_t v102 = v227;
      uint64_t v141 = v246;
      char v142 = v242;
      uint64_t v105 = v243;
      uint64_t v143 = v247;
      int v144 = v248;
      sub_21FA02440(v246, v227);
      sub_21F7654F0(v141, v142, v143);
      uint64_t v146 = v240;
      uint64_t v145 = v241;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v240 + 48))(v102, 1, v241) == 1) {
        goto LABEL_26;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v146 + 32))(v80, v102, v145);
      uint64_t v147 = v239;
      (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v239, v80, v145);
      uint64_t v148 = v213;
      (*(void (**)(char *, uint64_t, uint64_t))(v144 + 32))(v147, v105, v144);
      (*(void (**)(char *, uint64_t))(v146 + 8))(v80, v145);
      uint64_t v149 = v244;
      uint64_t v150 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v244 + 48))(v148, 1, v105);
      double v151 = v245;
      if (v150)
      {
        (*(void (**)(char *, uint64_t))(v236 + 8))(v148, v235);
        goto LABEL_52;
      }
      uint64_t v190 = *(void (**)(char *, char *, uint64_t))(v149 + 32);
      uint64_t v189 = v234;
      v190(v234, v148, v105);
      goto LABEL_48;
    case 6:
      sub_21FA06648();
      uint64_t v119 = v228;
      double v152 = v246;
      uint64_t v153 = v242;
      uint64_t v105 = v243;
      char v154 = v247;
      uint64_t v155 = v248;
      sub_21FA02440(v246, v228);
      sub_21F7654F0(v152, v153, v154);
      uint64_t v157 = v240;
      uint64_t v156 = v241;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v240 + 48))(v119, 1, v241) == 1)
      {
LABEL_16:
        (*(void (**)(uint64_t, uint64_t))(v238 + 8))(v119, v237);
        goto LABEL_51;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v157 + 32))(v77, v119, v156);
      uint64_t v193 = v239;
      (*(void (**)(char *, char *, uint64_t))(v157 + 16))(v239, v77, v156);
      uint64_t v194 = v214;
      (*(void (**)(char *, uint64_t, uint64_t))(v155 + 32))(v193, v105, v155);
      (*(void (**)(char *, uint64_t))(v157 + 8))(v77, v156);
      uint64_t v149 = v244;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v244 + 48))(v194, 1, v105))
      {
        (*(void (**)(char *, uint64_t))(v236 + 8))(v194, v235);
        double v151 = v245;
        goto LABEL_52;
      }
      uint64_t v190 = *(void (**)(char *, char *, uint64_t))(v149 + 32);
      uint64_t v189 = v234;
      v190(v234, v194, v105);
      double v151 = v245;
      goto LABEL_48;
    case 7:
      sub_21FA065F4();
      uint64_t v102 = v229;
      char v158 = v246;
      uint64_t v159 = v242;
      uint64_t v105 = v243;
      uint64_t v160 = v247;
      char v161 = v248;
      sub_21FA02440(v246, v229);
      sub_21F7654F0(v158, v159, v160);
      char v163 = v240;
      uint64_t v162 = v241;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v240 + 48))(v102, 1, v241) == 1) {
        goto LABEL_26;
      }
      uint64_t v164 = v203;
      (*(void (**)(char *, uint64_t, uint64_t))(v163 + 32))(v203, v102, v162);
      uint64_t v165 = v239;
      (*(void (**)(char *, char *, uint64_t))(v163 + 16))(v239, v164, v162);
      uint64_t v166 = *(void (**)(char *, uint64_t, uint64_t))(v161 + 32);
      uint64_t v167 = &v246;
      goto LABEL_43;
    case 8:
      sub_21FA065A0();
      uint64_t v102 = v230;
      int v168 = v246;
      uint64_t v169 = v242;
      uint64_t v105 = v243;
      long long v170 = v247;
      char v161 = v248;
      sub_21FA02440(v246, v230);
      sub_21F7654F0(v168, v169, v170);
      char v163 = v240;
      uint64_t v162 = v241;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v240 + 48))(v102, 1, v241) == 1) {
        goto LABEL_26;
      }
      uint64_t v164 = v204;
      (*(void (**)(char *, uint64_t, uint64_t))(v163 + 32))(v204, v102, v162);
      uint64_t v165 = v239;
      (*(void (**)(char *, char *, uint64_t))(v163 + 16))(v239, v164, v162);
      uint64_t v166 = *(void (**)(char *, uint64_t, uint64_t))(v161 + 32);
      uint64_t v167 = &v248;
      goto LABEL_43;
    case 9:
      sub_21FA0654C();
      uint64_t v102 = v231;
      uint64_t v171 = v246;
      long long v172 = v242;
      uint64_t v105 = v243;
      long long v173 = v247;
      char v161 = v248;
      sub_21FA02440(v246, v231);
      sub_21F7654F0(v171, v172, v173);
      char v163 = v240;
      uint64_t v162 = v241;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v240 + 48))(v102, 1, v241) == 1) {
        goto LABEL_26;
      }
      uint64_t v164 = v205;
      (*(void (**)(char *, uint64_t, uint64_t))(v163 + 32))(v205, v102, v162);
      uint64_t v165 = v239;
      (*(void (**)(char *, char *, uint64_t))(v163 + 16))(v239, v164, v162);
      uint64_t v166 = *(void (**)(char *, uint64_t, uint64_t))(v161 + 32);
      uint64_t v167 = v249;
      goto LABEL_43;
    case 10:
      sub_21FA064F8();
      uint64_t v102 = v232;
      uint64_t v174 = v246;
      long long v175 = v242;
      uint64_t v105 = v243;
      long long v176 = v247;
      char v161 = v248;
      sub_21FA02600(v246, v232);
      sub_21F7654F0(v174, v175, v176);
      char v163 = v240;
      uint64_t v162 = v241;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v240 + 48))(v102, 1, v241) == 1) {
        goto LABEL_26;
      }
      uint64_t v164 = v206;
      (*(void (**)(char *, uint64_t, uint64_t))(v163 + 32))(v206, v102, v162);
      uint64_t v165 = v239;
      (*(void (**)(char *, char *, uint64_t))(v163 + 16))(v239, v164, v162);
      uint64_t v166 = *(void (**)(char *, uint64_t, uint64_t))(v161 + 32);
      uint64_t v167 = (uint64_t *)&v250;
      goto LABEL_43;
    case 11:
      sub_21FA064A4();
      uint64_t v102 = v233;
      long long v177 = v246;
      uint64_t v178 = v242;
      uint64_t v105 = v243;
      uint64_t v179 = v247;
      char v161 = v248;
      sub_21FA02600(v246, v233);
      sub_21F7654F0(v177, v178, v179);
      char v163 = v240;
      uint64_t v162 = v241;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v240 + 48))(v102, 1, v241) == 1) {
        goto LABEL_26;
      }
      uint64_t v164 = v207;
      (*(void (**)(char *, uint64_t, uint64_t))(v163 + 32))(v207, v102, v162);
      uint64_t v165 = v239;
      (*(void (**)(char *, char *, uint64_t))(v163 + 16))(v239, v164, v162);
      uint64_t v166 = *(void (**)(char *, uint64_t, uint64_t))(v161 + 32);
      uint64_t v167 = (uint64_t *)((char *)&v251 + 1);
LABEL_43:
      uint64_t v111 = (char *)*(v167 - 32);
      v166(v165, v105, v161);
      (*(void (**)(char *, uint64_t))(v163 + 8))(v164, v162);
      goto LABEL_44;
    case 12:
      uint64_t v180 = v247;
      if ((_BYTE)v247) {
        goto LABEL_39;
      }
      double v151 = v245;
      v249[0] = v246;
      uint64_t v149 = v244;
      if (*(void *)(*(void *)(MEMORY[0x263F8D538] - 8) + 64) != v65) {
        goto LABEL_58;
      }
      uint64_t v181 = v239;
      (*(void (**)(char *, void *, uint64_t))(v240 + 16))(v239, v249, v241);
      char v182 = *(void (**)(char *, uint64_t))(v248 + 32);
      uint64_t v183 = &v230;
      goto LABEL_36;
    case 13:
      if (v247 < 2u)
      {
        uint64_t v184 = v219;
        sub_21FA23FD0();
        uint64_t v149 = v244;
        double v151 = v245;
        if (v216 == v65)
        {
          uint64_t v185 = v239;
          (*(void (**)(char *, char *, uint64_t))(v240 + 16))(v239, v184, v241);
          uint64_t v111 = v199;
          uint64_t v105 = v243;
          (*(void (**)(char *, uint64_t))(v248 + 32))(v185, v243);
          (*(void (**)(char *, uint64_t))(v201 + 8))(v184, v202);
          goto LABEL_37;
        }
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        JUMPOUT(0x21FA006C0);
      }
      uint64_t v191 = v246;
      int v192 = v242;
      uint64_t v180 = 2;
      goto LABEL_50;
    case 14:
      uint64_t v180 = v247;
      if (v247 != 2)
      {
LABEL_39:
        uint64_t v191 = v246;
        int v192 = v242;
LABEL_50:
        sub_21F7654F0(v191, v192, v180);
        uint64_t v105 = v243;
LABEL_51:
        uint64_t v149 = v244;
        double v151 = v245;
        goto LABEL_52;
      }
      double v151 = v245;
      char v186 = v246;
      long long v187 = v242;
      v249[0] = v246;
      v249[1] = v242;
      uint64_t v149 = v244;
      if (*(void *)(*(void *)(MEMORY[0x263F8D310] - 8) + 64) != v65) {
        goto LABEL_57;
      }
      uint64_t v181 = v239;
      (*(void (**)(char *, void *, uint64_t))(v240 + 16))(v239, v249, v241);
      sub_21F7654F0(v186, v187, 2);
      char v182 = *(void (**)(char *, uint64_t))(v248 + 32);
      uint64_t v183 = &v232;
LABEL_36:
      uint64_t v111 = (char *)*(v183 - 32);
      uint64_t v105 = v243;
      v182(v181, v243);
LABEL_37:
      uint64_t v188 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v149 + 48))(v111, 1, v105);
      uint64_t v189 = v234;
      if (v188)
      {
LABEL_45:
        (*(void (**)(char *, uint64_t))(v236 + 8))(v111, v235);
LABEL_52:
        uint64_t v196 = 1;
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v149 + 56))(v151, v196, 1, v105);
      }
      uint64_t v190 = *(void (**)(char *, char *, uint64_t))(v149 + 32);
      v190(v234, v111, v105);
LABEL_48:
      v190(v151, v189, v105);
      uint64_t v196 = 0;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v149 + 56))(v151, v196, 1, v105);
    default:
      sub_21FA067EC();
      uint64_t v102 = v222;
      uint64_t v103 = v246;
      uint64_t v104 = v242;
      uint64_t v105 = v243;
      uint64_t v106 = v247;
      uint64_t v107 = v248;
      sub_21FA02440(v246, v222);
      sub_21F7654F0(v103, v104, v106);
      uint64_t v109 = v240;
      double v108 = v241;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v240 + 48))(v102, 1, v241) == 1)
      {
LABEL_26:
        (*(void (**)(uint64_t, uint64_t))(v238 + 8))(v102, v237);
        goto LABEL_51;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v109 + 32))(v97, v102, v108);
      uint64_t v110 = v239;
      (*(void (**)(char *, char *, uint64_t))(v109 + 16))(v239, v97, v108);
      uint64_t v111 = v208;
      (*(void (**)(char *, uint64_t, uint64_t))(v107 + 32))(v110, v105, v107);
      (*(void (**)(char *, uint64_t))(v109 + 8))(v97, v108);
LABEL_44:
      uint64_t v149 = v244;
      uint64_t v195 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v244 + 48))(v111, 1, v105);
      double v151 = v245;
      if (v195) {
        goto LABEL_45;
      }
      uint64_t v190 = *(void (**)(char *, char *, uint64_t))(v149 + 32);
      uint64_t v189 = v234;
      v190(v234, v111, v105);
      goto LABEL_48;
  }
}

uint64_t sub_21FA006FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(&v9, AssociatedTypeWitness, AssociatedConformanceWitness);
  int v6 = v9;
  if (v9 == 14) {
    *(void *)(a2 + 24) = type metadata accessor for CategoryOptionalValueBindingBox();
  }
  else {
    *(void *)(a2 + 24) = type metadata accessor for NumberOptionalValueBindingBox();
  }
  *(void *)(a2 + 32) = swift_getWitnessTable();
  uint64_t v7 = sub_21F77E8F8((uint64_t *)a2);
  uint64_t result = sub_21FA03E44(a1, (uint64_t)v7);
  *(unsigned char *)(a2 + 40) = v6 != 14;
  return result;
}

uint64_t sub_21FA00838@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(&v9, AssociatedTypeWitness, AssociatedConformanceWitness);
  BOOL v6 = v9 != 13;
  *(void *)(a2 + 24) = type metadata accessor for NumberOptionalRangeBindingBox();
  *(void *)(a2 + 32) = swift_getWitnessTable();
  uint64_t v7 = sub_21F77E8F8((uint64_t *)a2);
  uint64_t result = sub_21FA04740(a1, (uint64_t)v7);
  *(unsigned char *)(a2 + 40) = v6;
  return result;
}

uint64_t sub_21FA00954@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(&v10, AssociatedTypeWitness, AssociatedConformanceWitness);
  int v6 = v10;
  if (v10 == 14) {
    *(void *)(a2 + 24) = type metadata accessor for CategoryValueBindingBox();
  }
  else {
    *(void *)(a2 + 24) = type metadata accessor for NumberValueBindingBox();
  }
  *(void *)(a2 + 32) = swift_getWitnessTable();
  uint64_t v7 = sub_21F77E8F8((uint64_t *)a2);
  uint64_t v8 = sub_21FA25780();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7, a1, v8);
  *(unsigned char *)(a2 + 40) = v6 != 14;
  return result;
}

uint64_t sub_21FA00AC4()
{
  sub_21FA05CB0(v0, (uint64_t)v10);
  if (v11)
  {
    sub_21F77F300(v10, (uint64_t)v7);
    uint64_t v1 = v8;
    uint64_t v2 = v9;
    sub_21F77E0FC(v7, v8);
    uint64_t v3 = (*(double (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  }
  else
  {
    sub_21F77F300(v10, (uint64_t)v7);
    uint64_t v4 = v8;
    uint64_t v5 = v9;
    sub_21F77E0FC(v7, v8);
    uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  }
  _s6Charts15AnyChartContentVwxx_0((uint64_t)v7);
  return v3;
}

uint64_t PrimitivePlottableProtocol.primitivePlottable.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t PrimitivePlottableProtocol.init(primitivePlottable:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56);

  return v5(a3, 0, 1, a2);
}

void sub_21FA00CA0(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6 = sub_21FA241F0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __n128 v9 = MEMORY[0x270FA5388](v6);
  if (v10 == a1)
  {
    sub_21FA23FD0();
    if (v8 == *(void *)(*(void *)(a1 - 8) + 64))
    {
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(a1 - 8) + 16))(a2, (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
      (*(void (**)(char *, uint64_t))(v7 + 8))((char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
      return;
    }
  }
  else
  {
    double v12 = a3;
    if (*(void *)(*(void *)(a1 - 8) + 64) == 8)
    {
      (*(void (**)(uint64_t, double *, uint64_t, __n128))(*(void *)(a1 - 8) + 16))(a2, &v12, a1, v9);
      return;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t (*sub_21FA00E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(&v37, AssociatedTypeWitness, AssociatedConformanceWitness);
  switch((char)v37)
  {
    case 1:
      unint64_t v10 = sub_21FA06798();
      uint64_t v11 = (void *)swift_allocObject();
      uint64_t v14 = MEMORY[0x263F8E4F0];
      void v11[2] = a3;
      v11[3] = v14;
      uint64_t v13 = &protocol witness table for Int16;
      goto LABEL_12;
    case 2:
      unint64_t v10 = sub_21FA06744();
      uint64_t v11 = (void *)swift_allocObject();
      uint64_t v15 = MEMORY[0x263F8E548];
      void v11[2] = a3;
      v11[3] = v15;
      uint64_t v13 = &protocol witness table for Int32;
      goto LABEL_12;
    case 3:
      unint64_t v10 = sub_21FA066F0();
      uint64_t v11 = (void *)swift_allocObject();
      uint64_t v16 = MEMORY[0x263F8E5C0];
      void v11[2] = a3;
      v11[3] = v16;
      uint64_t v13 = &protocol witness table for Int64;
      goto LABEL_12;
    case 4:
      unint64_t v10 = sub_21F97A8D4();
      uint64_t v11 = (void *)swift_allocObject();
      uint64_t v17 = MEMORY[0x263F8D6C8];
      void v11[2] = a3;
      v11[3] = v17;
      uint64_t v13 = &protocol witness table for Int;
      goto LABEL_12;
    case 5:
      unint64_t v10 = sub_21FA0669C();
      uint64_t v11 = (void *)swift_allocObject();
      uint64_t v18 = MEMORY[0x263F8E778];
      void v11[2] = a3;
      v11[3] = v18;
      uint64_t v13 = &protocol witness table for UInt8;
      goto LABEL_12;
    case 6:
      unint64_t v10 = sub_21FA06648();
      uint64_t v11 = (void *)swift_allocObject();
      uint64_t v19 = MEMORY[0x263F8E888];
      void v11[2] = a3;
      v11[3] = v19;
      uint64_t v13 = &protocol witness table for UInt16;
      goto LABEL_12;
    case 7:
      unint64_t v10 = sub_21FA065F4();
      uint64_t v11 = (void *)swift_allocObject();
      uint64_t v20 = MEMORY[0x263F8E8F8];
      void v11[2] = a3;
      v11[3] = v20;
      uint64_t v13 = &protocol witness table for UInt32;
      goto LABEL_12;
    case 8:
      unint64_t v10 = sub_21FA065A0();
      uint64_t v11 = (void *)swift_allocObject();
      uint64_t v21 = MEMORY[0x263F8E970];
      void v11[2] = a3;
      v11[3] = v21;
      uint64_t v13 = &protocol witness table for UInt64;
      goto LABEL_12;
    case 9:
      unint64_t v10 = sub_21FA0654C();
      uint64_t v11 = (void *)swift_allocObject();
      uint64_t v22 = MEMORY[0x263F8D9D0];
      void v11[2] = a3;
      v11[3] = v22;
      uint64_t v13 = &protocol witness table for UInt;
      goto LABEL_12;
    case 10:
      unint64_t v27 = sub_21FA064F8();
      uint64_t v28 = (void *)swift_allocObject();
      uint64_t v29 = MEMORY[0x263F8E9F8];
      void v28[2] = a3;
      v28[3] = v29;
      uint64_t v30 = &protocol witness table for Float16;
      goto LABEL_16;
    case 11:
      unint64_t v27 = sub_21FA064A4();
      uint64_t v28 = (void *)swift_allocObject();
      uint64_t v31 = MEMORY[0x263F8D5C8];
      void v28[2] = a3;
      v28[3] = v31;
      uint64_t v30 = &protocol witness table for Float;
LABEL_16:
      v28[4] = a4;
      v28[5] = v30;
      v28[6] = v27;
      v28[7] = a1;
      uint64_t v23 = v28 + 8;
      uint64_t v24 = sub_21FA069C8;
      break;
    case 12:
      uint64_t v32 = (void *)swift_allocObject();
      uint64_t v33 = MEMORY[0x263F8D538];
      void v32[2] = a3;
      v32[3] = v33;
      v32[4] = a4;
      v32[5] = &protocol witness table for Double;
      v32[6] = a1;
      uint64_t v23 = v32 + 7;
      uint64_t v24 = sub_21FA06B60;
      break;
    case 13:
      uint64_t v34 = (void *)swift_allocObject();
      void v34[2] = a3;
      v34[3] = a4;
      v34[4] = a1;
      uint64_t v23 = v34 + 5;
      uint64_t v24 = sub_21FA06878;
      break;
    case 14:
      uint64_t v35 = (void *)swift_allocObject();
      uint64_t v36 = MEMORY[0x263F8D310];
      void v35[2] = a3;
      v35[3] = v36;
      v35[4] = a4;
      v35[5] = &protocol witness table for String;
      v35[6] = a1;
      uint64_t v23 = v35 + 7;
      uint64_t v24 = sub_21FA06B60;
      break;
    default:
      unint64_t v10 = sub_21FA067EC();
      uint64_t v11 = (void *)swift_allocObject();
      uint64_t v12 = MEMORY[0x263F8E498];
      void v11[2] = a3;
      v11[3] = v12;
      uint64_t v13 = &protocol witness table for Int8;
LABEL_12:
      v11[4] = a4;
      v11[5] = v13;
      v11[6] = v10;
      v11[7] = a1;
      uint64_t v23 = v11 + 8;
      uint64_t v24 = sub_21FA068BC;
      break;
  }
  uint64_t v25 = v24;
  *uint64_t v23 = a2;
  swift_retain();
  return v25;
}

uint64_t sub_21FA01374@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](a1);
  v9[1] = round(*v7);
  sub_21F885234();
  sub_21FA263D0();
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v6 == *(void *)(*(void *)(result - 8) + 64))
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(result - 8) + 16))(a3, (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), result);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))((char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_21FA01510@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, double *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_21F76C0E4(a1, AssociatedTypeWitness, a2, (uint64_t)v8);
  if (sub_21FA263B0() < 65)
  {
    char v12 = sub_21FA263C0();
    uint64_t v13 = sub_21FA263A0();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a2);
    if (v12) {
      double v11 = (double)v13;
    }
    else {
      double v11 = (double)(unint64_t)v13;
    }
  }
  else
  {
    sub_21F885234();
    sub_21F97A928();
    sub_21FA25A90();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a2);
    double v11 = *(double *)&v14[1];
  }
  *a3 = v11;
  return result;
}

uint64_t sub_21FA016D8(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(char *, char *), uint64_t a10, void (*a11)(char *, char *))
{
  uint64_t v46 = a1;
  uint64_t v41 = a4;
  uint64_t v42 = a5;
  uint64_t v43 = a6;
  uint64_t v44 = a7;
  uint64_t v45 = a8;
  uint64_t v16 = sub_21F76CA40(&qword_26AD46C18);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v18 = sub_21FA06928();
  uint64_t v46 = sub_21F751B50(a9, (uint64_t)v40, v16, AssociatedTypeWitness, MEMORY[0x263F8E628], v18, MEMORY[0x263F8E658], v19);
  uint64_t v34 = a4;
  uint64_t v35 = a5;
  uint64_t v36 = a6;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a4;
  sub_21FA25F30();
  swift_getWitnessTable();
  uint64_t v20 = sub_21FA25D80();
  swift_bridgeObjectRelease();
  uint64_t v21 = a2(v20);
  swift_bridgeObjectRelease();
  uint64_t v46 = v21;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  uint64_t v32 = a7;
  uint64_t v33 = a8;
  uint64_t v22 = sub_21FA25F30();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v25 = sub_21F751B50(a11, (uint64_t)v28, v22, MEMORY[0x263F8D538], MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v24);
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t sub_21FA018B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](a1);
  sub_21FA25AA0();
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v6 == *(void *)(*(void *)(result - 8) + 64))
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(result - 8) + 16))(a3, (char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), result);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_21FA01A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __n128 v9 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  double v11 = (char *)v14 - v10;
  (*(void (**)(char *, uint64_t, __n128))(v12 + 16))((char *)v14 - v10, a1, v9);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a5 + 32))(v11, a3, a5);
}

uint64_t sub_21FA01B40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_21F76C0E4(a1, AssociatedTypeWitness, a3, (uint64_t)v6);
  sub_21F885234();
  return sub_21FA25A80();
}

uint64_t sub_21FA01C3C(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v38 = a1;
  uint64_t v34 = a4;
  uint64_t v35 = a5;
  uint64_t v36 = a6;
  uint64_t v37 = a7;
  uint64_t v11 = sub_21FA25F30();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v38 = sub_21F751B50((void (*)(char *, char *))sub_21FA06B70, (uint64_t)v33, v11, AssociatedTypeWitness, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v14);
  uint64_t v28 = a4;
  uint64_t v29 = a5;
  uint64_t v30 = a6;
  uint64_t v31 = a7;
  uint64_t v32 = a4;
  sub_21FA25F30();
  swift_getWitnessTable();
  uint64_t v15 = sub_21FA25D80();
  swift_bridgeObjectRelease();
  uint64_t v16 = a2(v15);
  swift_bridgeObjectRelease();
  uint64_t v38 = v16;
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  uint64_t v27 = a7;
  uint64_t v17 = sub_21FA25F30();
  uint64_t v18 = swift_getWitnessTable();
  uint64_t v20 = sub_21F751B50((void (*)(char *, char *))sub_21FA06BB8, (uint64_t)v23, v17, a5, MEMORY[0x263F8E628], v18, MEMORY[0x263F8E658], v19);
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t sub_21FA01E40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (*(void *)(*(void *)(a2 - 8) + 64) == *(void *)(*(void *)(result - 8) + 64)) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(result - 8) + 16))(a3, a1, result);
  }
  __break(1u);
  return result;
}

uint64_t sub_21FA01F1C(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v25 = a1;
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v8 = sub_21F76CA40(&qword_26AD46C18);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v10 = sub_21FA06928();
  uint64_t v11 = MEMORY[0x263F8E628];
  uint64_t v12 = MEMORY[0x263F8E658];
  uint64_t v25 = sub_21F751B50((void (*)(char *, char *))sub_21FA06C38, (uint64_t)v22, v8, AssociatedTypeWitness, MEMORY[0x263F8E628], v10, MEMORY[0x263F8E658], v13);
  v21[6] = a4;
  v21[7] = a5;
  v21[8] = a4;
  sub_21FA25F30();
  swift_getWitnessTable();
  uint64_t v14 = sub_21FA25D80();
  swift_bridgeObjectRelease();
  uint64_t v15 = a2(v14);
  swift_bridgeObjectRelease();
  uint64_t v25 = v15;
  v21[2] = a4;
  long long v21[3] = a5;
  uint64_t v16 = sub_21FA25F30();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v19 = sub_21F751B50((void (*)(char *, char *))sub_21F751F50, (uint64_t)v21, v16, MEMORY[0x263F8D538], v11, WitnessTable, v12, v18);
  swift_bridgeObjectRelease();
  return v19;
}

void sub_21FA02100(double *a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = *a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_21FA00CA0(AssociatedTypeWitness, a2, v3);
}

uint64_t sub_21FA02164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __n128 v8 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v10 = (char *)v13 - v9;
  (*(void (**)(char *, uint64_t, __n128))(v11 + 16))((char *)v13 - v9, a1, v8);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 32))(v10, a3, a4);
}

uint64_t Plottable<>.primitivePlottable.getter()
{
  sub_21FA25E00();
  return v1;
}

uint64_t Plottable<>.init(primitivePlottable:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_21FA26340();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v15 - v10;
  v15[0] = a1;
  v15[1] = a2;
  sub_21FA25E10();
  uint64_t v12 = *(void *)(a3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a3))
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v13 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a4, v11, a3);
    uint64_t v13 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a4, v13, 1, a3);
}

uint64_t sub_21FA02440@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  MEMORY[0x270FA5388](a1);
  if (v3)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);
    return v5(a2, 1, 1, AssociatedTypeWitness);
  }
  else
  {
    sub_21F885234();
    sub_21FA263D0();
    uint64_t v7 = swift_getAssociatedTypeWitness();
    if (swift_dynamicCast())
    {
      uint64_t v8 = a2;
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v8 = a2;
      uint64_t v9 = 1;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v8, v9, 1, v7);
  }
}

uint64_t sub_21FA02600@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  MEMORY[0x270FA5388](a1);
  if (v3)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);
    return v5(a2, 1, 1, AssociatedTypeWitness);
  }
  else
  {
    sub_21FA25AA0();
    uint64_t v7 = swift_getAssociatedTypeWitness();
    if (swift_dynamicCast())
    {
      uint64_t v8 = a2;
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v8 = a2;
      uint64_t v9 = 1;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v8, v9, 1, v7);
  }
}

uint64_t sub_21FA027D8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 > 1u)
  {
    sub_21FA26A10();
    return sub_21FA25D30();
  }
  else
  {
    sub_21FA26A10();
    return sub_21FA26A30();
  }
}

uint64_t sub_21FA02868()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  unsigned __int8 v3 = *(unsigned char *)(v0 + 16);
  sub_21FA26A00();
  sub_21FA027D8((uint64_t)v5, v1, v2, v3);
  return sub_21FA26A50();
}

uint64_t sub_21FA028C4(uint64_t a1)
{
  return sub_21FA027D8(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
}

uint64_t sub_21FA028D0()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  unsigned __int8 v3 = *(unsigned char *)(v0 + 16);
  sub_21FA26A00();
  sub_21FA027D8((uint64_t)v5, v1, v2, v3);
  return sub_21FA26A50();
}

uint64_t sub_21FA02928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FA04800(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))sub_21FA056BC);
}

uint64_t sub_21FA0297C()
{
  return sub_21FA26A50();
}

uint64_t sub_21FA029D8()
{
  return sub_21F767A6C();
}

uint64_t sub_21FA029E4()
{
  return sub_21FA26A50();
}

BOOL sub_21FA02A3C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    if ((*(unsigned char *)(a2 + 16) & 1) == 0) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 16))
  {
    return 0;
  }
  if (*(double *)a1 == *(double *)a2) {
    return *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return 0;
}

double sub_21FA02AC4@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_21F76C0E4(a1, AssociatedTypeWitness, MEMORY[0x263F8E498], (uint64_t)&v6);
  double result = (double)v6;
  *a2 = result;
  return result;
}

double sub_21FA02B54@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_21F76C0E4(a1, AssociatedTypeWitness, MEMORY[0x263F8E4F0], (uint64_t)&v7);
  v5.i16[0] = v7;
  double result = (double)vmovl_s16(v5).i32[0];
  *a2 = result;
  return result;
}

double sub_21FA02BEC@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_21F76C0E4(a1, AssociatedTypeWitness, MEMORY[0x263F8E548], (uint64_t)&v6);
  double result = (double)v6;
  *a2 = result;
  return result;
}

double sub_21FA02C80@<D0>(uint64_t a1@<X0>, uint64_t a2@<X4>, double *a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_21F76C0E4(a1, AssociatedTypeWitness, a2, (uint64_t)&v8);
  double result = (double)v8;
  *a3 = (double)v8;
  return result;
}

double sub_21FA02D18@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_21F76C0E4(a1, AssociatedTypeWitness, MEMORY[0x263F8E778], (uint64_t)&v7);
  LOBYTE(v5) = v7;
  double result = (double)v5;
  *a2 = result;
  return result;
}

double sub_21FA02DA8@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_21F76C0E4(a1, AssociatedTypeWitness, MEMORY[0x263F8E888], (uint64_t)&v7);
  LOWORD(v5) = v7;
  double result = (double)v5;
  *a2 = result;
  return result;
}

double sub_21FA02E38@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_21F76C0E4(a1, AssociatedTypeWitness, MEMORY[0x263F8E8F8], (uint64_t)&v7);
  LODWORD(v5) = v7;
  double result = (double)v5;
  *a2 = result;
  return result;
}

double sub_21FA02EC8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X4>, double *a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_21F76C0E4(a1, AssociatedTypeWitness, a2, (uint64_t)&v8);
  double result = (double)v8;
  *a3 = (double)v8;
  return result;
}

double sub_21FA02F60@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_21F76C0E4(a1, AssociatedTypeWitness, MEMORY[0x263F8E9F8], (uint64_t)&v11);
  _H0 = v11;
  __asm { FCVT            D0, H0 }
  *a2 = result;
  return result;
}

double sub_21FA02FF0@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_21F76C0E4(a1, AssociatedTypeWitness, MEMORY[0x263F8D5C8], (uint64_t)&v6);
  double result = v6;
  *a2 = v6;
  return result;
}

uint64_t sub_21FA03080(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  int v5 = *(unsigned __int8 *)(a1 + 8);
  float v6 = *(void **)a2;
  int v7 = *(unsigned __int8 *)(a2 + 8);
  if (v5)
  {
    if (v5 == 1)
    {
      if (v7 != 1) {
        return 0;
      }
      return sub_21F7D3F18((uint64_t)v4, (uint64_t)v6);
    }
    if (v7 == 2) {
      return sub_21F7D3F84(v4, v6);
    }
  }
  else if (!v7)
  {
    return sub_21F7D3F18((uint64_t)v4, (uint64_t)v6);
  }
  return 0;
}

uint64_t sub_21FA030CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](a1);
  int v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_21FA25780();
  MEMORY[0x223C54BA0](v6);
  uint64_t v7 = sub_21F76BD74((uint64_t)v5, v2, *(void *)(a1 + 24));
  unsigned int v9 = v8;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v9 >= 2) {
    return v7;
  }
  uint64_t result = sub_21FA266E0();
  __break(1u);
  return result;
}

uint64_t sub_21FA0320C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = sub_21FA26340();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v19 - v16;
  sub_21F9FEDD4(a1, a2, 2, v6, *(void *)(a3 + 24), v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v6) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v17, v10, v6);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v17, v6);
  sub_21FA25780();
  sub_21FA25770();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v17, v6);
}

uint64_t sub_21FA03448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FA037FC(a1, a2, *(void *)(a3 + 16), a4, (uint64_t)sub_21FA0A118) & 1;
}

uint64_t sub_21FA0347C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](a1);
  int v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_21FA25780();
  MEMORY[0x223C54BA0](v6);
  uint64_t v7 = sub_21F76BD74((uint64_t)v5, v2, *(void *)(a1 + 24));
  uint64_t v9 = v8;
  unsigned int v11 = v10;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v11 >= 2)
  {
    sub_21F7654F0(v7, v9, 2);
    uint64_t result = sub_21FA266E0();
    __break(1u);
  }
  return result;
}

uint64_t sub_21FA035C8(uint64_t a1, double a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = sub_21FA26340();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v17 - v14;
  sub_21F9FEDD4(*(uint64_t *)&a2, 0, 0, v4, *(void *)(a1 + 24), v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v4) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v15, v8, v4);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v15, v4);
  sub_21FA25780();
  sub_21FA25770();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v15, v4);
}

uint64_t sub_21FA037FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = sub_21FA25780();
  uint64_t v12 = a2;
  int v13 = 3;
  sub_21F74C95C(a1, a5, (uint64_t)&v10, v11, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], v8);
  return v14;
}

uint64_t sub_21FA0388C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  sub_21FA05CB0(v4, (uint64_t)v19);
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  char v22 = a3;
  if (v19[40])
  {
    sub_21FA05CB0((uint64_t)v19, (uint64_t)v18);
    if (!a3)
    {
      double v8 = *(double *)&a1;
      sub_21F77F300(v18, (uint64_t)v15);
      uint64_t v9 = v16;
      uint64_t v10 = v17;
      sub_21F77E0FC(v15, v16);
      (*(void (**)(uint64_t, uint64_t, double))(v10 + 24))(v9, v10, v8);
LABEL_6:
      _s6Charts15AnyChartContentVwxx_0((uint64_t)v15);
      sub_21F7654F0(v20, v21, v22);
      return sub_21F9BEBC8((uint64_t)v19);
    }
  }
  else
  {
    sub_21FA05CB0((uint64_t)v19, (uint64_t)v18);
    if (a3 == 2)
    {
      sub_21F77F300(v18, (uint64_t)v15);
      uint64_t v11 = v16;
      uint64_t v12 = v17;
      sub_21F77E0FC(v15, v16);
      int v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 24);
      swift_bridgeObjectRetain();
      v13(a1, a2, v11, v12);
      goto LABEL_6;
    }
  }
  _s6Charts15AnyChartContentVwxx_0((uint64_t)v18);
  return sub_21F76CA84((uint64_t)v19, &qword_267EEA9A0);
}

uint64_t sub_21FA039FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = sub_21FA26340();
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = &v19[-v9];
  uint64_t v11 = sub_21FA25780();
  uint64_t v12 = *(void *)(v11 - 8);
  __n128 v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = &v19[-v14];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, __n128))(v12 + 16))(&v19[-v14], v3, v11, v13);
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t v16 = *(void *)(a3 + 24);
  uint64_t v20 = v7;
  uint64_t v21 = v16;
  sub_21F76CA40(&qword_26AD46898);
  sub_21F8887FC((void (*)(char *, char *))sub_21FA0A068, (uint64_t)v19, MEMORY[0x263F8E628], v7, v17, (uint64_t)v10);
  swift_bridgeObjectRelease();
  sub_21FA25770();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t sub_21FA03BBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FA03DB0(a1, a2, *(void *)(a3 + 16), a4, (uint64_t)sub_21FA0A118) & 1;
}

uint64_t sub_21FA03BF0(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = sub_21FA26340();
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = &v20[-v10];
  uint64_t v12 = sub_21FA25780();
  uint64_t v13 = *(void *)(v12 - 8);
  __n128 v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = &v20[-v15];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, __n128))(v13 + 16))(&v20[-v15], v4, v12, v14);
  uint64_t v23 = a1;
  char v24 = a2 & 1;
  uint64_t v17 = *(void *)(a3 + 24);
  uint64_t v21 = v8;
  uint64_t v22 = v17;
  sub_21F76CA40(&qword_26AD46E20);
  sub_21F8887FC((void (*)(char *, char *))sub_21FA0A02C, (uint64_t)v20, MEMORY[0x263F8E628], v8, v18, (uint64_t)v11);
  sub_21FA25770();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t sub_21FA03DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_21FA26340();
  uint64_t v11 = sub_21FA25780();
  uint64_t v12 = a2;
  int v13 = 3;
  sub_21F74C95C(a1, a5, (uint64_t)&v10, v11, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], v8);
  return v14;
}

uint64_t sub_21FA03E44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_21FA26340();
  uint64_t v4 = sub_21FA25780();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

uint64_t sub_21FA03EBC(uint64_t a1, char a2, uint64_t a3)
{
  return sub_21FA03BF0(a1, a2 & 1, a3);
}

uint64_t sub_21FA03EC4(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v5 = v4;
  int v23 = a3;
  uint64_t v22 = a2;
  uint64_t v8 = a4[2];
  uint64_t v9 = a4[4];
  uint64_t v10 = sub_21FA25CC0();
  uint64_t v11 = sub_21FA26340();
  MEMORY[0x270FA5388](v11);
  int v13 = (char *)&v22 - v12;
  uint64_t v14 = sub_21FA25780();
  uint64_t v15 = *(void *)(v14 - 8);
  __n128 v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v22 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))((char *)&v22 - v17, v5, v14, v16);
  uint64_t v28 = a1;
  uint64_t v29 = v22;
  char v30 = v23 & 1;
  uint64_t v19 = a4[3];
  uint64_t v25 = v8;
  uint64_t v26 = v19;
  uint64_t v27 = v9;
  sub_21F76CA40(&qword_267EEAD50);
  sub_21F8887FC((void (*)(char *, char *))sub_21FA0A0D0, (uint64_t)v24, MEMORY[0x263F8E628], v10, v20, (uint64_t)v13);
  sub_21FA25770();
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t sub_21FA040AC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v59 = a5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v56 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v54 = (char *)&v51 - v11;
  uint64_t v62 = a4;
  uint64_t v12 = sub_21FA25CC0();
  uint64_t v57 = *(void *)(v12 - 8);
  uint64_t v58 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v55 = (char *)&v51 - v13;
  uint64_t v14 = sub_21FA26340();
  uint64_t v52 = *(void *)(v14 - 8);
  uint64_t v53 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (uint64_t)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v51 - v18;
  uint64_t v20 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v61 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v60 = (char *)&v51 - v24;
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v51 - v26;
  MEMORY[0x270FA5388](v28);
  char v30 = (char *)&v51 - v29;
  uint64_t v31 = *a1;
  uint64_t v63 = (void (*)(char *, uint64_t))a1[1];
  sub_21F9FEDD4(v31, 0, 0, a2, a3, v19);
  uint64_t v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  if (v32(v19, 1, a2) == 1)
  {
LABEL_6:
    (*(void (**)(char *, uint64_t))(v52 + 8))(v19, v53);
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v66 = v20;
  uint64_t v65 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
  v65(v30, v19, a2);
  sub_21F9FEDD4((uint64_t)v63, 0, 0, a2, a3, (char *)v16);
  if (v32((char *)v16, 1, a2) != 1)
  {
    v65(v27, (char *)v16, a2);
    uint64_t v33 = v60;
    sub_21FA26950();
    uint64_t v34 = v61;
    sub_21FA26940();
    uint64_t v16 = sub_21FA25C70();
    uint64_t v19 = (char *)(v66 + 8);
    uint64_t v35 = *(void (**)(char *, uint64_t))(v66 + 8);
    v35(v27, a2);
    v35(v30, a2);
    if (v16)
    {
      uint64_t v63 = v35;
      uint64_t v36 = v34;
      uint64_t v37 = v65;
      uint64_t v38 = TupleTypeMetadata2;
      uint64_t v39 = v33;
      uint64_t v40 = v54;
      uint64_t v41 = &v54[*(int *)(TupleTypeMetadata2 + 48)];
      v65(v54, v39, a2);
      uint64_t v62 = v19;
      uint64_t v53 = (uint64_t)v41;
      v37(v41, v36, a2);
      uint64_t v42 = v56;
      uint64_t v43 = &v56[*(int *)(v38 + 48)];
      uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
      v44(v56, v40, a2);
      v44(v43, v41, a2);
      uint64_t v45 = v55;
      v37(v55, v42, a2);
      v63(v43, a2);
      uint64_t v46 = &v42[*(int *)(TupleTypeMetadata2 + 48)];
      v37(v42, v40, a2);
      v37(v46, (char *)v53, a2);
      uint64_t v47 = v58;
      v37(&v45[*(int *)(v58 + 36)], v46, a2);
      v63(v42, a2);
      uint64_t v48 = v57;
      uint64_t v49 = v59;
      (*(void (**)(uint64_t, char *, uint64_t))(v57 + 32))(v59, v45, v47);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v48 + 56))(v49, 0, 1, v47);
    }
    __break(1u);
    goto LABEL_6;
  }
LABEL_7:
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 8))(v16, v53);
  __break(1u);
  return result;
}

uint64_t sub_21FA04690(uint64_t a1, uint64_t a2)
{
  sub_21FA25CC0();
  sub_21FA26340();
  uint64_t v7 = sub_21FA25780();
  uint64_t v8 = a2;
  int v9 = 3;
  sub_21F74C95C(a1, (uint64_t)sub_21FA0A0F4, (uint64_t)&v6, v7, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], v4);
  return v10;
}

uint64_t sub_21FA04740@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_21FA25CC0();
  sub_21FA26340();
  uint64_t v4 = sub_21FA25780();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

uint64_t sub_21FA047C8(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  return sub_21FA03EC4(a1, a2, a3 & 1, a4);
}

uint64_t sub_21FA047D0(uint64_t a1, uint64_t a2)
{
  return sub_21FA04690(a1, a2);
}

uint64_t sub_21FA047E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21FA04800(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))sub_21FA059B8);
}

uint64_t sub_21FA04800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  return a5(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

void static Never._primitivePlottableKind.getter()
{
}

void Never.primitivePlottable.getter()
{
}

void Never.init(primitivePlottable:)()
{
}

void sub_21FA04908()
{
}

void sub_21FA04954()
{
}

void sub_21FA049A0()
{
}

void static Double._primitivePlottableKind.getter(unsigned char *a1@<X8>)
{
  *a1 = 12;
}

void static String._primitivePlottableKind.getter(unsigned char *a1@<X8>)
{
  *a1 = 14;
}

void *sub_21FA04A04@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

void sub_21FA04A10(unsigned char *a1@<X8>)
{
  *a1 = 14;
}

void static Date._primitivePlottableKind.getter(unsigned char *a1@<X8>)
{
  *a1 = 13;
}

uint64_t sub_21FA04A28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56);

  return v5(a3, 0, 1, a2);
}

void static Float16._primitivePlottableKind.getter(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

void sub_21FA04AF0(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

__int16 sub_21FA04AFC@<H0>(__int16 *a1@<X8>)
{
  __int16 result = *v1;
  *a1 = *v1;
  return result;
}

void static Float._primitivePlottableKind.getter(unsigned char *a1@<X8>)
{
  *a1 = 11;
}

void sub_21FA04B14(unsigned char *a1@<X8>)
{
  *a1 = 11;
}

float sub_21FA04B20@<S0>(_DWORD *a1@<X8>)
{
  float result = *v1;
  *a1 = *(_DWORD *)v1;
  return result;
}

double NSDecimal.primitivePlottable.getter(uint64_t a1, uint64_t a2, int a3)
{
  v7[0] = a1;
  v7[1] = a2;
  int v8 = a3;
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F087B0]), sel_initWithDecimal_, v7);
  objc_msgSend(v3, sel_doubleValue);
  double v5 = v4;

  return v5;
}

void __swiftcall NSDecimal.init(primitivePlottable:)(NSDecimal_optional *__return_ptr retstr, Swift::Double primitivePlottable)
{
}

void sub_21FA04C28(void *a1@<X8>)
{
  int v3 = *v1;
  id v4 = objc_allocWithZone(MEMORY[0x263F087B0]);
  int v8 = v3;
  long long v9 = *(_OWORD *)(v1 + 1);
  id v5 = objc_msgSend(v4, sel_initWithDecimal_, &v8);
  objc_msgSend(v5, sel_doubleValue);
  uint64_t v7 = v6;

  *a1 = v7;
}

uint64_t sub_21FA04CA8@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = MEMORY[0x223C55760](*a1);
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = v5;
  *(unsigned char *)(a2 + 20) = 0;
  return result;
}

Swift::Int_optional __swiftcall Int.init(primitivePlottable:)(Swift::Int primitivePlottable)
{
  Swift::Bool v1 = 0;
  result.value = primitivePlottable;
  result.is_nil = v1;
  return result;
}

void static Int._primitivePlottableKind.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

void sub_21FA04CF4(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

void static Int8._primitivePlottableKind.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void sub_21FA04D08(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned __int8 *sub_21FA04D14@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

Swift::Int16_optional __swiftcall Int16.init(primitivePlottable:)(Swift::Int16 primitivePlottable)
{
  *(_DWORD *)&primitivePlottable = (unsigned __int16)primitivePlottable;
  result.value = primitivePlottable;
  return result;
}

void static Int16._primitivePlottableKind.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void sub_21FA04D44(_WORD *a1@<X8>)
{
  *a1 = *v1;
}

_WORD *sub_21FA04D50@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *result;
  *(unsigned char *)(a2 + 2) = 0;
  return result;
}

void static Int32._primitivePlottableKind.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static Int64._primitivePlottableKind.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

void sub_21FA04D7C(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

void static UInt._primitivePlottableKind.getter(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

void sub_21FA04D94(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

Swift::UInt8_optional __swiftcall UInt8.init(primitivePlottable:)(Swift::UInt8 primitivePlottable)
{
  *(_WORD *)&primitivePlottable = primitivePlottable;
  result.value = primitivePlottable;
  return result;
}

void static UInt8._primitivePlottableKind.getter(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

void sub_21FA04DC0(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

void static UInt16._primitivePlottableKind.getter(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

void sub_21FA04DD8(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

void static UInt32._primitivePlottableKind.getter(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

void sub_21FA04DF0(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

void static UInt64._primitivePlottableKind.getter(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

_UNKNOWN **sub_21FA04E08()
{
  return &protocol witness table for Never;
}

_UNKNOWN **sub_21FA04E14()
{
  return &protocol witness table for String;
}

_UNKNOWN **sub_21FA04E20()
{
  return &protocol witness table for Float16;
}

_UNKNOWN **sub_21FA04E2C()
{
  return &protocol witness table for Float;
}

_UNKNOWN **sub_21FA04E38()
{
  return &protocol witness table for Int;
}

_UNKNOWN **sub_21FA04E44()
{
  return &protocol witness table for Int8;
}

_UNKNOWN **sub_21FA04E50()
{
  return &protocol witness table for Int16;
}

_UNKNOWN **sub_21FA04E5C()
{
  return &protocol witness table for Int32;
}

_UNKNOWN **sub_21FA04E68()
{
  return &protocol witness table for Int64;
}

_UNKNOWN **sub_21FA04E74()
{
  return &protocol witness table for UInt;
}

_UNKNOWN **sub_21FA04E80()
{
  return &protocol witness table for UInt8;
}

_UNKNOWN **sub_21FA04E8C()
{
  return &protocol witness table for UInt16;
}

_UNKNOWN **sub_21FA04E98()
{
  return &protocol witness table for UInt32;
}

void sub_21FA04EA4(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

_UNKNOWN **sub_21FA04EB0()
{
  return &protocol witness table for UInt64;
}

uint64_t dispatch thunk of Plottable.primitivePlottable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Plottable.init(primitivePlottable:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of static PrimitivePlottableProtocol._primitivePlottableKind.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t type metadata accessor for _PrimitivePlottableKind()
{
  return sub_21F764F08();
}

unsigned char *storeEnumTagSinglePayload for PrimitivePlottableType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *Swift::UInt8_optional result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x21FA04FE4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *Swift::UInt8_optional result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PrimitivePlottableType()
{
  return &type metadata for PrimitivePlottableType;
}

uint64_t sub_21FA0501C(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF2) {
    goto LABEL_17;
  }
  if (a2 + 14 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 14) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 14;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xF;
  int v8 = v6 - 15;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *sub_21FA050AC(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF1)
  {
    unsigned int v6 = ((a2 - 242) >> 8) + 1;
    *Swift::UInt8_optional result = a2 + 14;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x21FA05178);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *Swift::UInt8_optional result = a2 + 14;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for _PrimitivePlottableKind.Storage()
{
  return sub_21F764F08();
}

uint64_t initializeBufferWithCopyOfBuffer for AnyPrimitivePlottableTransform(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_21FA05378(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_21F7A5B4C);
}

uint64_t destroy for AnyPrimitivePlottableTransform(uint64_t a1)
{
  return sub_21F7A5C94(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t *assignWithCopy for AnyPrimitivePlottableTransform(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_21FA053F4(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_21F7A5B4C, (void (*)(uint64_t, uint64_t, uint64_t))sub_21F7A5C94);
}

uint64_t *assignWithTake for AnyPrimitivePlottableTransform(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_21FA05478(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_21F7A5C94);
}

ValueMetadata *type metadata accessor for AnyPrimitivePlottableTransform()
{
  return &type metadata for AnyPrimitivePlottableTransform;
}

uint64_t initializeWithCopy for AnyPrimitivePlottableRangeBinding(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  BOOL v4 = v3 == 1;
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v5;
  (**(void (***)(uint64_t))(v5 - 8))(a1);
  *(unsigned char *)(a1 + 40) = v4;
  return a1;
}

uint64_t assignWithCopy for AnyPrimitivePlottableRangeBinding(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    _s6Charts15AnyChartContentVwxx_0(a1);
    unsigned int v4 = *(unsigned __int8 *)(a2 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a2 + 2;
    }
    BOOL v5 = v4 == 1;
    uint64_t v6 = *(void *)(a2 + 24);
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
    *(unsigned char *)(a1 + 40) = v5;
  }
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for AnyPrimitivePlottable(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_21FA05378(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_21F7607AC);
}

uint64_t sub_21FA05378(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v6, v7);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  return a1;
}

uint64_t *assignWithCopy for AnyPrimitivePlottable(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_21FA053F4(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_21F7607AC, (void (*)(uint64_t, uint64_t, uint64_t))sub_21F7654F0);
}

uint64_t *sub_21FA053F4(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  *a1 = v7;
  a1[1] = v8;
  uint64_t v12 = *((unsigned __int8 *)a1 + 16);
  *((unsigned char *)a1 + 16) = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for AnyPrimitivePlottable(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_21FA05478(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_21F7654F0);
}

uint64_t *sub_21FA05478(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v8 = *((unsigned __int8 *)a1 + 16);
  *((unsigned char *)a1 + 16) = v5;
  a4(v6, v7, v8);
  return a1;
}

unint64_t sub_21FA054C8()
{
  unint64_t result = qword_267EEA988;
  if (!qword_267EEA988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EEA988);
  }
  return result;
}

unint64_t sub_21FA05520()
{
  unint64_t result = qword_267EEA990;
  if (!qword_267EEA990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EEA990);
  }
  return result;
}

uint64_t sub_21FA05574(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  sub_21FA05CB0(a1, (uint64_t)v9);
  sub_21FA05CB0(a2, (uint64_t)v10);
  if (v9[40])
  {
    sub_21FA05CB0((uint64_t)v9, (uint64_t)v8);
    if (v11 == 1)
    {
      sub_21F77F300(v8, (uint64_t)v7);
      sub_21F77F300(v10, (uint64_t)v6);
      unsigned int v3 = (uint64_t *)&unk_267EEA9B0;
LABEL_7:
      sub_21F76CA40(v3);
      uint64_t v4 = AGCompareValues();
      _s6Charts15AnyChartContentVwxx_0((uint64_t)v6);
      _s6Charts15AnyChartContentVwxx_0((uint64_t)v7);
      sub_21F9BEBC8((uint64_t)v9);
      return v4;
    }
  }
  else
  {
    sub_21FA05CB0((uint64_t)v9, (uint64_t)v8);
    if ((v11 & 1) == 0)
    {
      sub_21F77F300(v8, (uint64_t)v7);
      sub_21F77F300(v10, (uint64_t)v6);
      unsigned int v3 = (uint64_t *)&unk_267EEA9B8;
      goto LABEL_7;
    }
  }
  _s6Charts15AnyChartContentVwxx_0((uint64_t)v8);
  sub_21F76CA84((uint64_t)v9, &qword_267EEA9A8);
  return 0;
}

uint64_t sub_21FA056BC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3)
  {
    if (a3 == 1)
    {
      return a6 == 1 && *(double *)&a1 == *(double *)&a4;
    }
    else if (a6 == 2)
    {
      if (a1 == a4 && a2 == a5) {
        return 1;
      }
      else {
        return sub_21FA268D0();
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return !a6 && *(double *)&a1 == *(double *)&a4;
  }
}

uint64_t sub_21FA0574C(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  sub_21FA05CE8(a1, (uint64_t)v9);
  sub_21FA05CE8(a2, (uint64_t)v10);
  if (v9[40])
  {
    sub_21FA05CE8((uint64_t)v9, (uint64_t)v8);
    if (v11 == 1)
    {
      sub_21F77F300(v8, (uint64_t)v7);
      sub_21F77F300(v10, (uint64_t)v6);
      unsigned int v3 = (uint64_t *)&unk_267EEA9C8;
LABEL_7:
      sub_21F76CA40(v3);
      uint64_t v4 = AGCompareValues();
      _s6Charts15AnyChartContentVwxx_0((uint64_t)v6);
      _s6Charts15AnyChartContentVwxx_0((uint64_t)v7);
      sub_21F9BEBC8((uint64_t)v9);
      return v4;
    }
  }
  else
  {
    sub_21FA05CE8((uint64_t)v9, (uint64_t)v8);
    if ((v11 & 1) == 0)
    {
      sub_21F77F300(v8, (uint64_t)v7);
      sub_21F77F300(v10, (uint64_t)v6);
      unsigned int v3 = (uint64_t *)&unk_267EEA9D0;
      goto LABEL_7;
    }
  }
  _s6Charts15AnyChartContentVwxx_0((uint64_t)v8);
  sub_21F76CA84((uint64_t)v9, &qword_267EEA9C0);
  return 0;
}

uint64_t sub_21FA05894(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  sub_21F7B2688(a1, (uint64_t)v8);
  sub_21F7B2688(a2, (uint64_t)v9);
  if ((v8[40] & 1) == 0)
  {
    sub_21F7B2688((uint64_t)v8, (uint64_t)v7);
    if (v10) {
      goto LABEL_3;
    }
LABEL_5:
    sub_21F77F300(v7, (uint64_t)v6);
    sub_21F77F300(v9, (uint64_t)v5);
    sub_21F76CA40(&qword_267EEA9E0);
    uint64_t v3 = AGCompareValues();
    _s6Charts15AnyChartContentVwxx_0((uint64_t)v5);
    _s6Charts15AnyChartContentVwxx_0((uint64_t)v6);
    sub_21F9BEBC8((uint64_t)v8);
    return v3;
  }
  sub_21F7B2688((uint64_t)v8, (uint64_t)v7);
  if (v10 == 1) {
    goto LABEL_5;
  }
LABEL_3:
  _s6Charts15AnyChartContentVwxx_0((uint64_t)v7);
  sub_21F76CA84((uint64_t)v8, &qword_267EEA9D8);
  return 0;
}

uint64_t sub_21FA059B8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (!a3)
  {
    if (!a6)
    {
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = a1;
      *(void *)(v15 + 24) = a2;
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = a4;
      *(void *)(v16 + 24) = a5;
      sub_21F76CA40(&qword_26AD44A28);
      sub_21F7A5B4C(a1, a2, 0);
      uint64_t v12 = a4;
      uint64_t v13 = a5;
      unsigned __int8 v14 = 0;
      goto LABEL_9;
    }
    return 0;
  }
  if (a3 != 1)
  {
    if (a6 == 2)
    {
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = a1;
      *(void *)(v17 + 24) = a2;
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 16) = a4;
      *(void *)(v18 + 24) = a5;
      sub_21F76CA40(&qword_267EEA998);
      sub_21F7A5B4C(a1, a2, 2u);
      uint64_t v12 = a4;
      uint64_t v13 = a5;
      unsigned __int8 v14 = 2;
      goto LABEL_9;
    }
    return 0;
  }
  if (a6 != 1) {
    return 0;
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a4;
  *(void *)(v11 + 24) = a5;
  sub_21F76CA40(&qword_26AD44A28);
  sub_21F7A5B4C(a1, a2, 1u);
  uint64_t v12 = a4;
  uint64_t v13 = a5;
  unsigned __int8 v14 = 1;
LABEL_9:
  sub_21F7A5B4C(v12, v13, v14);
  uint64_t v19 = AGCompareValues();
  swift_release();
  swift_release();
  return v19;
}

uint64_t sub_21FA05C44()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_21FA05C7C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_21FA05CB0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_21FA05CE8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_21FA05D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v47 = a5;
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  uint64_t v8 = sub_21F76CA40(&qword_26AD45870);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v43 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_21FA23EA0();
  uint64_t v44 = *(void *)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  uint64_t v40 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_21F76CA40(&qword_26AD47A98);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_21FA241F0();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v39 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v38 = (char *)&v38 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v45 = (char *)&v38 - v20;
  uint64_t v21 = *(void *)(a4 - 8);
  uint64_t v22 = *(void *)(v21 + 64);
  MEMORY[0x270FA5388](v23);
  __n128 v25 = MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v38 - v26;
  (*(void (**)(uint64_t, uint64_t, __n128))(a6 + 24))(v47, a6, v25);
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))((char *)&v38 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v27, a4);
  int v28 = swift_dynamicCast();
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  if (!v28)
  {
    v29(v13, 1, 1, v14);
    goto LABEL_6;
  }
  v29(v13, 0, 1, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
LABEL_6:
    uint64_t result = sub_21F76CA84((uint64_t)v13, &qword_26AD47A98);
    if (v22 == 8) {
      return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v27, a4);
    }
    __break(1u);
    goto LABEL_9;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v45, v13, v14);
  char v30 = v43;
  sub_21FA24250();
  uint64_t v31 = v44;
  uint64_t v32 = v46;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48))(v30, 1, v46);
  if (result != 1)
  {
    uint64_t v34 = v40;
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v40, v30, v32);
    uint64_t v35 = v38;
    sub_21FA23E90();
    sub_21FA23FE0();
    uint64_t v36 = *(void (**)(char *, uint64_t))(v15 + 8);
    v36(v35, v14);
    uint64_t v37 = v39;
    sub_21FA23E80();
    sub_21FA23FE0();
    v36(v37, v14);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v34, v46);
    v36(v45, v14);
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v27, a4);
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for NumberValueBindingBox()
{
  return sub_21F764F08();
}

uint64_t type metadata accessor for CategoryValueBindingBox()
{
  return sub_21F764F08();
}

uint64_t type metadata accessor for NumberOptionalValueBindingBox()
{
  return sub_21F764F08();
}

uint64_t type metadata accessor for CategoryOptionalValueBindingBox()
{
  return sub_21F764F08();
}

uint64_t type metadata accessor for NumberOptionalRangeBindingBox()
{
  return sub_21F764F08();
}

uint64_t sub_21FA06284@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return sub_21F76C0E4(a1, AssociatedTypeWitness, MEMORY[0x263F8D310], a2);
}

double sub_21FA06304@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return sub_21FA02FF0(a1, a2);
}

double sub_21FA06324@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return sub_21FA02F60(a1, a2);
}

double sub_21FA06344@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return sub_21FA02EC8(a1, MEMORY[0x263F8D9D0], a2);
}

double sub_21FA0636C@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return sub_21FA02EC8(a1, MEMORY[0x263F8E970], a2);
}

double sub_21FA06394@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return sub_21FA02E38(a1, a2);
}

double sub_21FA063B4@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return sub_21FA02DA8(a1, a2);
}

double sub_21FA063D4@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return sub_21FA02D18(a1, a2);
}

double sub_21FA063F4@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return sub_21FA02C80(a1, MEMORY[0x263F8D6C8], a2);
}

double sub_21FA0641C@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return sub_21FA02C80(a1, MEMORY[0x263F8E5C0], a2);
}

double sub_21FA06444@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return sub_21FA02BEC(a1, a2);
}

double sub_21FA06464@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return sub_21FA02B54(a1, a2);
}

double sub_21FA06484@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return sub_21FA02AC4(a1, a2);
}

unint64_t sub_21FA064A4()
{
  unint64_t result = qword_267EEA9E8;
  if (!qword_267EEA9E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EEA9E8);
  }
  return result;
}

unint64_t sub_21FA064F8()
{
  unint64_t result = qword_267EEA9F0;
  if (!qword_267EEA9F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EEA9F0);
  }
  return result;
}

unint64_t sub_21FA0654C()
{
  unint64_t result = qword_267EEA9F8;
  if (!qword_267EEA9F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EEA9F8);
  }
  return result;
}

unint64_t sub_21FA065A0()
{
  unint64_t result = qword_267EEAA00;
  if (!qword_267EEAA00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EEAA00);
  }
  return result;
}

unint64_t sub_21FA065F4()
{
  unint64_t result = qword_267EEAA08;
  if (!qword_267EEAA08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EEAA08);
  }
  return result;
}

unint64_t sub_21FA06648()
{
  unint64_t result = qword_267EEAA10;
  if (!qword_267EEAA10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EEAA10);
  }
  return result;
}

unint64_t sub_21FA0669C()
{
  unint64_t result = qword_267EEAA18;
  if (!qword_267EEAA18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EEAA18);
  }
  return result;
}

unint64_t sub_21FA066F0()
{
  unint64_t result = qword_267EEAA20;
  if (!qword_267EEAA20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EEAA20);
  }
  return result;
}

unint64_t sub_21FA06744()
{
  unint64_t result = qword_267EEAA28;
  if (!qword_267EEAA28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EEAA28);
  }
  return result;
}

unint64_t sub_21FA06798()
{
  unint64_t result = qword_267EEAA30;
  if (!qword_267EEAA30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EEAA30);
  }
  return result;
}

unint64_t sub_21FA067EC()
{
  unint64_t result = qword_267EEAA38;
  if (!qword_267EEAA38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EEAA38);
  }
  return result;
}

uint64_t sub_21FA06840()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_21FA06878(uint64_t a1)
{
  return sub_21FA01F1C(a1, *(uint64_t (**)(uint64_t))(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_21FA06884()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t sub_21FA068BC(uint64_t a1)
{
  return sub_21FA06A08(a1, (void (*)(char *, char *))sub_21FA068FC, (uint64_t)sub_21FA06984, (void (*)(char *, char *))sub_21FA0699C);
}

uint64_t sub_21FA068FC(uint64_t a1, uint64_t a2)
{
  return sub_21FA06A78(a1, a2, (uint64_t (*)(uint64_t, void, void, void, void, void, uint64_t))sub_21FA01374);
}

unint64_t sub_21FA06928()
{
  unint64_t result = qword_267EEAA40[0];
  if (!qword_267EEAA40[0])
  {
    sub_21F779EA4(&qword_26AD46C18);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_267EEAA40);
  }
  return result;
}

uint64_t sub_21FA06984(uint64_t a1)
{
  return sub_21FA06AA8(a1);
}

uint64_t sub_21FA0699C(uint64_t a1, uint64_t a2)
{
  return sub_21FA06AF8(a1, a2, (uint64_t (*)(uint64_t, void, void, void, void, void, uint64_t))sub_21FA01510);
}

uint64_t sub_21FA069C8(uint64_t a1)
{
  return sub_21FA06A08(a1, (void (*)(char *, char *))sub_21FA06A4C, (uint64_t)sub_21FA06984, (void (*)(char *, char *))sub_21FA06ACC);
}

uint64_t sub_21FA06A08(uint64_t a1, void (*a2)(char *, char *), uint64_t a3, void (*a4)(char *, char *))
{
  return sub_21FA016D8(a1, *(uint64_t (**)(uint64_t))(v4 + 56), *(void *)(v4 + 64), *(void *)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32), *(void *)(v4 + 40), *(void *)(v4 + 48), a2, a3, a4);
}

uint64_t sub_21FA06A4C(uint64_t a1, uint64_t a2)
{
  return sub_21FA06A78(a1, a2, (uint64_t (*)(uint64_t, void, void, void, void, void, uint64_t))sub_21FA018B4);
}

uint64_t sub_21FA06A78(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, void, void, void, void, void, uint64_t))
{
  return a3(a1, v3[2], v3[3], v3[4], v3[5], v3[6], a2);
}

uint64_t sub_21FA06AA8(uint64_t a1)
{
  return sub_21FA01A28(a1, v1[7], v1[2], v1[3], v1[4]);
}

uint64_t sub_21FA06ACC(uint64_t a1, uint64_t a2)
{
  return sub_21FA06AF8(a1, a2, (uint64_t (*)(uint64_t, void, void, void, void, void, uint64_t))sub_21FA01B40);
}

uint64_t sub_21FA06AF8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, void, void, void, void, void, uint64_t))
{
  return a3(a1, v3[2], v3[3], v3[4], v3[5], v3[6], a2);
}

uint64_t sub_21FA06B28()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_21FA06B60(uint64_t a1)
{
  return sub_21FA01C3C(a1, *(uint64_t (**)(uint64_t))(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_21FA06B70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21FA01E40(a1, *(void *)(v2 + 24), a2);
}

uint64_t sub_21FA06B94(uint64_t a1)
{
  return sub_21FA01A28(a1, v1[6], v1[2], v1[3], v1[4]);
}

uint64_t sub_21FA06BB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return sub_21F76C0E4(a1, AssociatedTypeWitness, v5, a2);
}

void sub_21FA06C38(double *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_21FA06C58(uint64_t a1)
{
  return sub_21FA02164(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_21FA06C78()
{
  sub_21FA25CC0();
  sub_21FA26340();
  uint64_t result = sub_21FA25780();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21FA06D24(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(unsigned int *)(v5 + 84);
  uint64_t v8 = v6;
  uint64_t v9 = *(void *)(v5 + 64);
  uint64_t v10 = v9 + v6;
  uint64_t v11 = ((v9 + v8) & ~v8) + v9;
  if (v7) {
    size_t v12 = ((v9 + v6) & ~(unint64_t)v6) + v9;
  }
  else {
    size_t v12 = v11 + 1;
  }
  int v13 = v6 & 0x100000;
  uint64_t v14 = *a2;
  *a1 = *a2;
  if (v8 > 7 || v13 != 0 || v12 + ((v8 + 16) & ~v8) > 0x18)
  {
    a1 = (uint64_t *)(v14 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
    swift_retain();
    return a1;
  }
  uint64_t v17 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v17 = *v18;
  uint64_t v19 = (void *)(((unint64_t)v17 + v8 + 8) & ~v8);
  uint64_t v26 = ~v8;
  uint64_t v20 = (unsigned __int16 *)(((unint64_t)v18 + v8 + 8) & ~v8);
  swift_retain();
  swift_retain();
  if (!v7)
  {
    if (!*((unsigned char *)v20 + v11)) {
      goto LABEL_31;
    }
    int v21 = (*((unsigned __int8 *)v20 + v11) - 1) << (8 * v11);
    if (v11 > 3) {
      int v21 = 0;
    }
    if (v11)
    {
      int v22 = v11 <= 3 ? v11 : 4;
      switch(v22)
      {
        case 2:
          int v23 = *v20;
          break;
        case 3:
          int v23 = *v20 | (*((unsigned __int8 *)v20 + 2) << 16);
          break;
        case 4:
          int v23 = *(_DWORD *)v20;
          break;
        default:
          int v23 = *(unsigned __int8 *)v20;
          break;
      }
    }
    else
    {
      int v23 = 0;
    }
    if ((v23 | v21) == 0xFFFFFFFF) {
      goto LABEL_31;
    }
LABEL_30:
    memcpy(v19, v20, v12);
    return a1;
  }
  if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48))(v20, v7, v4)) {
    goto LABEL_30;
  }
LABEL_31:
  uint64_t v24 = *(void (**)(void *, unsigned __int16 *, uint64_t))(v5 + 16);
  v24(v19, v20, v4);
  v24((void *)(((unint64_t)v19 + v10) & v26), (unsigned __int16 *)(((unint64_t)v20 + v10) & v26), v4);
  if (!v7) {
    *((unsigned char *)v19 + v11) = 0;
  }
  return a1;
}

uint64_t sub_21FA06F78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 15;
  swift_release();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (unsigned __int16 *)(((v3 & 0xFFFFFFFFFFFFFFF8) + v6 + 8) & ~v6);
  uint64_t v8 = *(unsigned int *)(v5 + 84);
  uint64_t v9 = *(void *)(v5 + 64);
  uint64_t v10 = v9 + v6;
  if (v8)
  {
    uint64_t v16 = *(void *)(v4 - 8);
    uint64_t result = (*(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48))(v7, v8, v4);
    uint64_t v5 = v16;
    if (result) {
      return result;
    }
    goto LABEL_17;
  }
  uint64_t v12 = (v10 & ~v6) + v9;
  if (!*((unsigned char *)v7 + v12)) {
    goto LABEL_17;
  }
  int v13 = (*((unsigned __int8 *)v7 + v12) - 1) << (8 * v12);
  if (v12 > 3) {
    int v13 = 0;
  }
  if (v12)
  {
    if (v12 > 3) {
      LODWORD(v12) = 4;
    }
    switch((int)v12)
    {
      case 2:
        LODWORD(v12) = *v7;
        break;
      case 3:
        LODWORD(v12) = *v7 | (*((unsigned __int8 *)v7 + 2) << 16);
        break;
      case 4:
        LODWORD(v12) = *(_DWORD *)v7;
        break;
      default:
        LODWORD(v12) = *(unsigned __int8 *)v7;
        break;
    }
  }
  int v14 = v12 | v13;
  uint64_t result = (v14 + 1);
  if (v14 == -1)
  {
LABEL_17:
    uint64_t v15 = *(void (**)(unsigned __int16 *, uint64_t))(v5 + 8);
    v15(v7, v4);
    return ((uint64_t (*)(unint64_t, uint64_t))v15)(((unint64_t)v7 + v10) & ~v6, v4);
  }
  return result;
}

void *sub_21FA07148(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v6 = *(void *)(v4 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (unsigned char *)(((unint64_t)v6 + v9 + 8) & ~v9);
  uint64_t v11 = (unsigned __int16 *)((v9 + 8 + (v4 & 0xFFFFFFFFFFFFFFF8)) & ~v9);
  uint64_t v12 = *(unsigned int *)(v8 + 84);
  uint64_t v13 = *(void *)(v8 + 64);
  uint64_t v14 = v13 + v9;
  size_t v15 = ((v13 + v9) & ~v9) + v13;
  swift_retain();
  swift_retain();
  if (v12)
  {
    if (!(*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v8 + 48))(v11, v12, v7))
    {
LABEL_22:
      uint64_t v20 = *(void (**)(unsigned char *, unsigned __int16 *, uint64_t))(v8 + 16);
      v20(v10, v11, v7);
      v20((unsigned char *)((unint64_t)&v10[v14] & ~v9), (unsigned __int16 *)(((unint64_t)v11 + v14) & ~v9), v7);
      if (!v12) {
        v10[v15] = 0;
      }
      return a1;
    }
  }
  else
  {
    if (!*((unsigned char *)v11 + v15)) {
      goto LABEL_22;
    }
    int v16 = (*((unsigned __int8 *)v11 + v15) - 1) << (8 * v15);
    if (v15 > 3) {
      int v16 = 0;
    }
    if (v15)
    {
      int v17 = v15 <= 3 ? v15 : 4;
      switch(v17)
      {
        case 2:
          int v18 = *v11;
          break;
        case 3:
          int v18 = *v11 | (*((unsigned __int8 *)v11 + 2) << 16);
          break;
        case 4:
          int v18 = *(_DWORD *)v11;
          break;
        default:
          int v18 = *(unsigned __int8 *)v11;
          break;
      }
    }
    else
    {
      int v18 = 0;
    }
    if ((v18 | v16) == 0xFFFFFFFF) {
      goto LABEL_22;
    }
  }
  if (v12) {
    size_t v19 = v15;
  }
  else {
    size_t v19 = v15 + 1;
  }
  memcpy(v10, v11, v19);
  return a1;
}

void *sub_21FA07348(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v6 = *(void *)(v5 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = ~v9;
  uint64_t v11 = (unsigned __int16 *)(((unint64_t)v6 + v9 + 8) & ~v9);
  uint64_t v12 = (unsigned __int16 *)((v9 + 8 + (v5 & 0xFFFFFFFFFFFFFFF8)) & ~v9);
  uint64_t v13 = *(unsigned int *)(v8 + 84);
  uint64_t v14 = *(void *)(v8 + 64);
  uint64_t v15 = v14 + v9;
  size_t v16 = ((v14 + v9) & ~v9) + v14;
  uint64_t v35 = v8;
  if (!v13)
  {
    char v20 = 8 * v16;
    if (*((unsigned char *)v11 + v16))
    {
      int v21 = (*((unsigned __int8 *)v11 + v16) - 1) << v20;
      if (v16 > 3) {
        int v21 = 0;
      }
      if (v16)
      {
        int v22 = v16 <= 3 ? v16 : 4;
        switch(v22)
        {
          case 2:
            int v23 = *v11;
            break;
          case 3:
            int v23 = *v11 | (*((unsigned __int8 *)v11 + 2) << 16);
            break;
          case 4:
            int v23 = *(_DWORD *)v11;
            break;
          default:
            int v23 = *(unsigned __int8 *)v11;
            break;
        }
      }
      else
      {
        int v23 = 0;
      }
      if ((v23 | v21) != 0xFFFFFFFF)
      {
        if (!*((unsigned char *)v12 + v16)) {
          goto LABEL_54;
        }
        int v24 = (*((unsigned __int8 *)v12 + v16) - 1) << v20;
        if (v16 > 3) {
          int v24 = 0;
        }
        if (v16)
        {
          int v25 = v16 <= 3 ? v16 : 4;
          switch(v25)
          {
            case 2:
              int v26 = *v12;
              break;
            case 3:
              int v26 = *v12 | (*((unsigned __int8 *)v12 + 2) << 16);
              break;
            case 4:
              int v26 = *(_DWORD *)v12;
              break;
            default:
              int v26 = *(unsigned __int8 *)v12;
              break;
          }
        }
        else
        {
          int v26 = 0;
        }
        if ((v26 | v24) == 0xFFFFFFFF) {
          goto LABEL_54;
        }
        goto LABEL_45;
      }
    }
    if (!*((unsigned char *)v12 + v16))
    {
LABEL_49:
      uint64_t v32 = *(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v8 + 24);
      v32(v11, v12, v7);
      v32((unsigned __int16 *)(((unint64_t)v11 + v15) & v10), (unsigned __int16 *)(((unint64_t)v12 + v15) & v10), v7);
      return a1;
    }
    int v27 = (*((unsigned __int8 *)v12 + v16) - 1) << v20;
    if (v16 > 3) {
      int v27 = 0;
    }
    __dst = v11;
    if (v16)
    {
      if (v16 <= 3) {
        int v28 = v16;
      }
      else {
        int v28 = 4;
      }
      switch(v28)
      {
        case 2:
          int v29 = *v12;
          break;
        case 3:
          int v29 = *v12 | (*((unsigned __int8 *)v12 + 2) << 16);
          break;
        case 4:
          int v29 = *(_DWORD *)v12;
          break;
        default:
          int v29 = *(unsigned __int8 *)v12;
          break;
      }
    }
    else
    {
      int v29 = 0;
    }
    int v19 = (v29 | v27) + 1;
LABEL_43:
    uint64_t v8 = v35;
    uint64_t v11 = __dst;
    if (v19)
    {
      char v30 = *(void (**)(unsigned __int16 *, uint64_t))(v35 + 8);
      v30(__dst, v7);
      v30((unsigned __int16 *)(((unint64_t)__dst + v15) & v10), v7);
      goto LABEL_45;
    }
    goto LABEL_49;
  }
  int v17 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v8 + 48);
  __dst = v11;
  int v18 = v17(v11, v13, v7);
  int v19 = v17(v12, v13, v7);
  if (!v18) {
    goto LABEL_43;
  }
  uint64_t v11 = __dst;
  if (!v19)
  {
LABEL_54:
    uint64_t v33 = *(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v35 + 16);
    v33(v11, v12, v7);
    v33((unsigned __int16 *)(((unint64_t)v11 + v15) & v10), (unsigned __int16 *)(((unint64_t)v12 + v15) & v10), v7);
    if (!v13) {
      *((unsigned char *)v11 + v16) = 0;
    }
    return a1;
  }
LABEL_45:
  if (v13) {
    size_t v31 = v16;
  }
  else {
    size_t v31 = v16 + 1;
  }
  memcpy(v11, v12, v31);
  return a1;
}

void *sub_21FA07760(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (unsigned char *)(((unint64_t)v4 + v8 + 8) & ~v8);
  uint64_t v10 = (unsigned __int16 *)(((unint64_t)v5 + v8 + 8) & ~v8);
  uint64_t v11 = *(unsigned int *)(v7 + 84);
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t v13 = v12 + v8;
  size_t v14 = ((v12 + v8) & ~v8) + v12;
  if (v11)
  {
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)v5 + v8 + 8) & ~v8, v11, v6))
    {
LABEL_22:
      int v19 = *(void (**)(unsigned char *, unsigned __int16 *, uint64_t))(v7 + 32);
      v19(v9, v10, v6);
      v19((unsigned char *)((unint64_t)&v9[v13] & ~v8), (unsigned __int16 *)(((unint64_t)v10 + v13) & ~v8), v6);
      if (!v11) {
        v9[v14] = 0;
      }
      return a1;
    }
  }
  else
  {
    if (!*((unsigned char *)v10 + v14)) {
      goto LABEL_22;
    }
    int v15 = (*((unsigned __int8 *)v10 + v14) - 1) << (8 * v14);
    if (v14 > 3) {
      int v15 = 0;
    }
    if (v14)
    {
      int v16 = v14 <= 3 ? v14 : 4;
      switch(v16)
      {
        case 2:
          int v17 = *v10;
          break;
        case 3:
          int v17 = *(unsigned __int16 *)(((unint64_t)v5 + v8 + 8) & ~v8) | (*(unsigned __int8 *)((((unint64_t)v5 + v8 + 8) & ~v8) + 2) << 16);
          break;
        case 4:
          int v17 = *(_DWORD *)v10;
          break;
        default:
          int v17 = *(unsigned __int8 *)v10;
          break;
      }
    }
    else
    {
      int v17 = 0;
    }
    if ((v17 | v15) == 0xFFFFFFFF) {
      goto LABEL_22;
    }
  }
  if (v11) {
    size_t v18 = v14;
  }
  else {
    size_t v18 = v14 + 1;
  }
  memcpy(v9, v10, v18);
  return a1;
}

void *sub_21FA07954(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v6 = *(void *)(v5 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = ~v9;
  uint64_t v11 = (unsigned __int16 *)(((unint64_t)v6 + v9 + 8) & ~v9);
  uint64_t v12 = (unsigned __int16 *)((v9 + 8 + (v5 & 0xFFFFFFFFFFFFFFF8)) & ~v9);
  uint64_t v13 = *(unsigned int *)(v8 + 84);
  uint64_t v14 = *(void *)(v8 + 64);
  uint64_t v15 = v14 + v9;
  size_t v16 = ((v14 + v9) & ~v9) + v14;
  uint64_t v35 = v8;
  if (!v13)
  {
    char v20 = 8 * v16;
    if (*((unsigned char *)v11 + v16))
    {
      int v21 = (*((unsigned __int8 *)v11 + v16) - 1) << v20;
      if (v16 > 3) {
        int v21 = 0;
      }
      if (v16)
      {
        int v22 = v16 <= 3 ? v16 : 4;
        switch(v22)
        {
          case 2:
            int v23 = *v11;
            break;
          case 3:
            int v23 = *v11 | (*((unsigned __int8 *)v11 + 2) << 16);
            break;
          case 4:
            int v23 = *(_DWORD *)v11;
            break;
          default:
            int v23 = *(unsigned __int8 *)v11;
            break;
        }
      }
      else
      {
        int v23 = 0;
      }
      if ((v23 | v21) != 0xFFFFFFFF)
      {
        if (!*((unsigned char *)v12 + v16)) {
          goto LABEL_54;
        }
        int v24 = (*((unsigned __int8 *)v12 + v16) - 1) << v20;
        if (v16 > 3) {
          int v24 = 0;
        }
        if (v16)
        {
          int v25 = v16 <= 3 ? v16 : 4;
          switch(v25)
          {
            case 2:
              int v26 = *v12;
              break;
            case 3:
              int v26 = *v12 | (*((unsigned __int8 *)v12 + 2) << 16);
              break;
            case 4:
              int v26 = *(_DWORD *)v12;
              break;
            default:
              int v26 = *(unsigned __int8 *)v12;
              break;
          }
        }
        else
        {
          int v26 = 0;
        }
        if ((v26 | v24) == 0xFFFFFFFF) {
          goto LABEL_54;
        }
        goto LABEL_45;
      }
    }
    if (!*((unsigned char *)v12 + v16))
    {
LABEL_49:
      uint64_t v32 = *(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v8 + 40);
      v32(v11, v12, v7);
      v32((unsigned __int16 *)(((unint64_t)v11 + v15) & v10), (unsigned __int16 *)(((unint64_t)v12 + v15) & v10), v7);
      return a1;
    }
    int v27 = (*((unsigned __int8 *)v12 + v16) - 1) << v20;
    if (v16 > 3) {
      int v27 = 0;
    }
    __dst = v11;
    if (v16)
    {
      if (v16 <= 3) {
        int v28 = v16;
      }
      else {
        int v28 = 4;
      }
      switch(v28)
      {
        case 2:
          int v29 = *v12;
          break;
        case 3:
          int v29 = *v12 | (*((unsigned __int8 *)v12 + 2) << 16);
          break;
        case 4:
          int v29 = *(_DWORD *)v12;
          break;
        default:
          int v29 = *(unsigned __int8 *)v12;
          break;
      }
    }
    else
    {
      int v29 = 0;
    }
    int v19 = (v29 | v27) + 1;
LABEL_43:
    uint64_t v8 = v35;
    uint64_t v11 = __dst;
    if (v19)
    {
      char v30 = *(void (**)(unsigned __int16 *, uint64_t))(v35 + 8);
      v30(__dst, v7);
      v30((unsigned __int16 *)(((unint64_t)__dst + v15) & v10), v7);
      goto LABEL_45;
    }
    goto LABEL_49;
  }
  int v17 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v8 + 48);
  __dst = v11;
  int v18 = v17(v11, v13, v7);
  int v19 = v17(v12, v13, v7);
  if (!v18) {
    goto LABEL_43;
  }
  uint64_t v11 = __dst;
  if (!v19)
  {
LABEL_54:
    uint64_t v33 = *(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v35 + 32);
    v33(v11, v12, v7);
    v33((unsigned __int16 *)(((unint64_t)v11 + v15) & v10), (unsigned __int16 *)(((unint64_t)v12 + v15) & v10), v7);
    if (!v13) {
      *((unsigned char *)v11 + v16) = 0;
    }
    return a1;
  }
LABEL_45:
  if (v13) {
    size_t v31 = v16;
  }
  else {
    size_t v31 = v16 + 1;
  }
  memcpy(v11, v12, v31);
  return a1;
}

uint64_t sub_21FA07D5C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  if (v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = *(void *)(v4 + 64);
  if (v6) {
    uint64_t v11 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v11 = v10 + 1;
  }
  if (!a2) {
    return 0;
  }
  int v12 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_28;
  }
  uint64_t v13 = v11 + ((v10 + v9) & ~v9) + ((v9 + 16) & ~v9);
  char v14 = 8 * v13;
  if (v13 > 3) {
    goto LABEL_13;
  }
  unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
  if (HIWORD(v16))
  {
    int v15 = *(_DWORD *)((char *)a1 + v13);
    if (v15) {
      goto LABEL_20;
    }
LABEL_28:
    int v18 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v7 & 0x80000000) == 0)
    {
      unint64_t v19 = *v18;
      if (v19 >= 0xFFFFFFFF) {
        LODWORD(v19) = -1;
      }
      return (v19 + 1);
    }
    if (v6)
    {
      int v21 = (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v18 + v9 + 8) & ~v9);
      BOOL v22 = v21 != 0;
      uint64_t result = (v21 - 1);
      if (result != 0 && v22) {
        return result;
      }
    }
    return 0;
  }
  if (v16 > 0xFF)
  {
    int v15 = *(unsigned __int16 *)((char *)a1 + v13);
    if (*(unsigned __int16 *)((char *)a1 + v13)) {
      goto LABEL_20;
    }
    goto LABEL_28;
  }
  if (v16 < 2) {
    goto LABEL_28;
  }
LABEL_13:
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_28;
  }
LABEL_20:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 > 3) {
      LODWORD(v13) = 4;
    }
    switch((int)v13)
    {
      case 2:
        LODWORD(v13) = *a1;
        break;
      case 3:
        LODWORD(v13) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v13) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v13) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v13 | v17) + 1;
}

void sub_21FA07F44(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11) & ~v11)
      + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v8) {
    size_t v13 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11) & ~v11)
  }
        + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  else {
    size_t v13 = v12 + 1;
  }
  size_t v14 = v13 + ((v11 + 16) & ~v11);
  BOOL v15 = a3 >= v10;
  unsigned int v16 = a3 - v10;
  if (v16 == 0 || !v15)
  {
LABEL_20:
    if (v10 < a2) {
      goto LABEL_21;
    }
    goto LABEL_13;
  }
  if (v14 > 3)
  {
    int v6 = 1;
    if (v10 < a2) {
      goto LABEL_21;
    }
    goto LABEL_13;
  }
  unsigned int v17 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
  if (!HIWORD(v17))
  {
    if (v17 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v17 > 1;
    }
    goto LABEL_20;
  }
  int v6 = 4;
  if (v10 < a2)
  {
LABEL_21:
    unsigned int v18 = ~v10 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v20 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v20;
          a1[2] = BYTE2(v20);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v20;
        }
        else
        {
          *a1 = v20;
        }
      }
    }
    else
    {
      bzero(a1, v13 + ((v11 + 16) & ~v11));
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_71;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
LABEL_13:
  switch(v6)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_29;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_29;
    case 3:
LABEL_71:
      __break(1u);
      JUMPOUT(0x21FA082D0);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_28;
    default:
LABEL_28:
      if (a2)
      {
LABEL_29:
        int v21 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v9 & 0x80000000) != 0)
        {
          uint64_t v23 = ((unint64_t)v21 + v11 + 8) & ~v11;
          if (v9 >= a2)
          {
            if (a2 + 1 <= v8)
            {
              if (a2 != -1)
              {
                int v29 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
                uint64_t v30 = a2 + 1;
                v29(((unint64_t)v21 + v11 + 8) & ~v11, v30);
              }
            }
            else
            {
              if (v12 <= 3) {
                int v27 = ~(-1 << (8 * v12));
              }
              else {
                int v27 = -1;
              }
              if (v12)
              {
                int v25 = v27 & (a2 - v8);
                if (v12 <= 3) {
                  int v28 = v12;
                }
                else {
                  int v28 = 4;
                }
                bzero((void *)(((unint64_t)v21 + v11 + 8) & ~v11), v12);
                switch(v28)
                {
                  case 2:
LABEL_69:
                    *(_WORD *)uint64_t v23 = v25;
                    break;
                  case 3:
LABEL_68:
                    *(_WORD *)uint64_t v23 = v25;
                    *(unsigned char *)(v23 + 2) = BYTE2(v25);
                    break;
                  case 4:
LABEL_70:
                    *(_DWORD *)uint64_t v23 = v25;
                    break;
                  default:
LABEL_56:
                    *(unsigned char *)uint64_t v23 = v25;
                    break;
                }
              }
            }
          }
          else
          {
            if (v13 <= 3) {
              int v24 = ~(-1 << (8 * v13));
            }
            else {
              int v24 = -1;
            }
            if (v13)
            {
              int v25 = v24 & (~v9 + a2);
              if (v13 <= 3) {
                int v26 = v13;
              }
              else {
                int v26 = 4;
              }
              bzero((void *)(((unint64_t)v21 + v11 + 8) & ~v11), v13);
              switch(v26)
              {
                case 2:
                  goto LABEL_69;
                case 3:
                  goto LABEL_68;
                case 4:
                  goto LABEL_70;
                default:
                  goto LABEL_56;
              }
            }
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v22 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v22 = a2 - 1;
          }
          *int v21 = v22;
        }
      }
      return;
  }
}

uint64_t sub_21FA0833C()
{
  sub_21FA26340();
  uint64_t result = sub_21FA25780();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21FA083D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  int v9 = v7 + 16;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v10 = *(void *)(v5 + 64);
  }
  else {
    size_t v10 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v11 = ((v7 + 16) & ~(unint64_t)v7) + v10;
  int v12 = v7 & 0x100000;
  uint64_t v13 = *a2;
  *a1 = *a2;
  if (v8 > 7 || v12 != 0 || v11 > 0x18)
  {
    a1 = (uint64_t *)(v13 + ((v8 & 0xF8 ^ 0x1F8) & v9));
    swift_retain();
  }
  else
  {
    unsigned int v16 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v17 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v16 = *v17;
    unsigned int v18 = (void *)(((unint64_t)v16 + v8 + 8) & ~v8);
    int v19 = (const void *)(((unint64_t)v17 + v8 + 8) & ~v8);
    int v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    swift_retain();
    if (v20(v19, 1, v4))
    {
      memcpy(v18, v19, v10);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v18, v19, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v18, 0, 1, v4);
    }
  }
  return a1;
}

uint64_t sub_21FA0856C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 15;
  swift_release();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v6 = ((v3 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = v5;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(unint64_t, uint64_t))(v9 + 8);
    return v8(v6, v4);
  }
  return result;
}

void *sub_21FA08648(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  unint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v6 = *(void *)(v4 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  size_t v10 = (void *)(((unint64_t)v6 + v9 + 8) & ~v9);
  unint64_t v11 = (const void *)((v9 + 8 + (v4 & 0xFFFFFFFFFFFFFFF8)) & ~v9);
  int v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  swift_retain();
  swift_retain();
  if (v12(v11, 1, v7))
  {
    if (*(_DWORD *)(v8 + 84)) {
      size_t v13 = *(void *)(v8 + 64);
    }
    else {
      size_t v13 = *(void *)(v8 + 64) + 1;
    }
    memcpy(v10, v11, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v10, v11, v7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
  }
  return a1;
}

void *sub_21FA0878C(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  unint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFF8;
  *unint64_t v6 = *(void *)(v5 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  unint64_t v11 = (void *)(((unint64_t)v6 + v10 + 8) & ~v10);
  int v12 = (void *)((v10 + 8 + v7) & ~v10);
  size_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  LODWORD(v7) = v13(v11, 1, v8);
  int v14 = v13(v12, 1, v8);
  if (v7)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v11, v12, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v8);
      return a1;
    }
    int v15 = *(_DWORD *)(v9 + 84);
    size_t v16 = *(void *)(v9 + 64);
  }
  else
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 24))(v11, v12, v8);
      return a1;
    }
    unsigned int v18 = *(void (**)(void *, uint64_t))(v9 + 8);
    uint64_t v17 = v9 + 8;
    v18(v11, v8);
    int v15 = *(_DWORD *)(v17 + 76);
    size_t v16 = *(void *)(v17 + 56);
  }
  if (v15) {
    size_t v19 = v16;
  }
  else {
    size_t v19 = v16 + 1;
  }
  memcpy(v11, v12, v19);
  return a1;
}

void *sub_21FA08940(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (void *)(((unint64_t)v4 + v8 + 8) & ~v8);
  uint64_t v10 = (const void *)(((unint64_t)v5 + v8 + 8) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    if (*(_DWORD *)(v7 + 84)) {
      size_t v11 = *(void *)(v7 + 64);
    }
    else {
      size_t v11 = *(void *)(v7 + 64) + 1;
    }
    memcpy(v9, v10, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  return a1;
}

void *sub_21FA08A70(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFF8;
  *uint64_t v6 = *(void *)(v5 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  size_t v11 = (void *)(((unint64_t)v6 + v10 + 8) & ~v10);
  int v12 = (void *)((v10 + 8 + v7) & ~v10);
  size_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  LODWORD(v7) = v13(v11, 1, v8);
  int v14 = v13(v12, 1, v8);
  if (v7)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v11, v12, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v8);
      return a1;
    }
    int v15 = *(_DWORD *)(v9 + 84);
    size_t v16 = *(void *)(v9 + 64);
  }
  else
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v11, v12, v8);
      return a1;
    }
    unsigned int v18 = *(void (**)(void *, uint64_t))(v9 + 8);
    uint64_t v17 = v9 + 8;
    v18(v11, v8);
    int v15 = *(_DWORD *)(v17 + 76);
    size_t v16 = *(void *)(v17 + 56);
  }
  if (v15) {
    size_t v19 = v16;
  }
  else {
    size_t v19 = v16 + 1;
  }
  memcpy(v11, v12, v19);
  return a1;
}

uint64_t sub_21FA08C14(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = v6;
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v9;
  }
  if (!a2) {
    return 0;
  }
  int v10 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_28;
  }
  uint64_t v11 = v9 + ((v8 + 16) & ~v8);
  char v12 = 8 * v11;
  if (v11 <= 3)
  {
    unsigned int v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(unsigned __int16 *)((char *)a1 + v11)) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_28:
      uint64_t v17 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v6 & 0x80000000) != 0)
      {
        unsigned int v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v17 + v8 + 8) & ~v8);
        if (v19 >= 2) {
          return v19 - 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        unint64_t v18 = *v17;
        if (v18 >= 0xFFFFFFFF) {
          LODWORD(v18) = -1;
        }
        return (v18 + 1);
      }
    }
  }
  int v13 = *((unsigned __int8 *)a1 + v11);
  if (!*((unsigned char *)a1 + v11)) {
    goto LABEL_28;
  }
LABEL_20:
  int v16 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v16 = 0;
  }
  if (v11)
  {
    if (v11 > 3) {
      LODWORD(v11) = 4;
    }
    switch((int)v11)
    {
      case 2:
        LODWORD(v11) = *a1;
        break;
      case 3:
        LODWORD(v11) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v11) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v11) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v11 | v16) + 1;
}

void sub_21FA08DF8(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((v11 + 16) & ~v11) + v12;
  BOOL v14 = a3 >= v10;
  unsigned int v15 = a3 - v10;
  if (v15 == 0 || !v14)
  {
LABEL_17:
    if (v10 < a2) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  if (v13 > 3)
  {
    int v6 = 1;
    if (v10 < a2) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  unsigned int v16 = ((v15 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
  if (!HIWORD(v16))
  {
    if (v16 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v16 > 1;
    }
    goto LABEL_17;
  }
  int v6 = 4;
  if (v10 < a2)
  {
LABEL_18:
    unsigned int v17 = ~v10 + a2;
    if (v13 < 4)
    {
      int v18 = (v17 >> (8 * v13)) + 1;
      if (v13)
      {
        int v19 = v17 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if (v13 == 3)
        {
          *(_WORD *)a1 = v19;
          a1[2] = BYTE2(v19);
        }
        else if (v13 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v17;
      int v18 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v13] = v18;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v18;
        return;
      case 3:
        goto LABEL_60;
      case 4:
        *(_DWORD *)&a1[v13] = v18;
        return;
      default:
        return;
    }
  }
LABEL_25:
  switch(v6)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 3:
LABEL_60:
      __break(1u);
      JUMPOUT(0x21FA0910CLL);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_29;
    default:
LABEL_29:
      if (a2)
      {
LABEL_30:
        int v20 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v9 & 0x80000000) != 0)
        {
          uint64_t v22 = (unsigned char *)(((unint64_t)v20 + v11 + 8) & ~v11);
          if (v9 >= a2)
          {
            uint64_t v26 = a2 + 1;
            int v27 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
            v27(((unint64_t)v20 + v11 + 8) & ~v11, v26);
          }
          else
          {
            if (v12 <= 3) {
              int v23 = ~(-1 << (8 * v12));
            }
            else {
              int v23 = -1;
            }
            if (v12)
            {
              int v24 = v23 & (~v9 + a2);
              if (v12 <= 3) {
                int v25 = v12;
              }
              else {
                int v25 = 4;
              }
              bzero(v22, v12);
              switch(v25)
              {
                case 2:
                  *(_WORD *)uint64_t v22 = v24;
                  break;
                case 3:
                  *(_WORD *)uint64_t v22 = v24;
                  void v22[2] = BYTE2(v24);
                  break;
                case 4:
                  *(_DWORD *)uint64_t v22 = v24;
                  break;
                default:
                  *uint64_t v22 = v24;
                  break;
              }
            }
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v21 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v21 = a2 - 1;
          }
          *int v20 = v21;
        }
      }
      return;
  }
}

uint64_t sub_21FA09168()
{
  uint64_t result = sub_21FA25780();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21FA091F8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 16) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    size_t v12 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    size_t v13 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *size_t v12 = *v13;
    uint64_t v14 = ((unint64_t)v12 + v6 + 8) & ~v6;
    uint64_t v15 = ((unint64_t)v13 + v6 + 8) & ~v6;
    unsigned int v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v16(v14, v15, v4);
  }
  return a1;
}

uint64_t sub_21FA09320(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 15;
  swift_release();
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = ((v3 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void *sub_21FA093A0(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  unint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v6 = *(void *)(v4 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = *(void *)(a3 + 16);
  int v8 = *(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  uint64_t v9 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v10 = ((unint64_t)v6 + v9 + 8) & ~v9;
  unint64_t v11 = (v9 + 8 + (v4 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  swift_retain();
  swift_retain();
  v8(v10, v11, v7);
  return a1;
}

void *sub_21FA09454(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  unint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v6 = *(void *)(v5 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))(((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 8 + (v5 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

void *sub_21FA09510(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

void *sub_21FA09594(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v6 = *(void *)v5;
  swift_release();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 8 + v5) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_21FA09638(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      uint64_t v15 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v15 + v6 + 8) & ~v6);
      }
      unint64_t v16 = *v15;
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void sub_21FA097E0(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 16) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x21FA09A44);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        int v18 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v7 & 0x80000000) != 0)
        {
          int v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(((unint64_t)v18 + v9 + 8) & ~v9);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v19 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v19 = a2 - 1;
          }
          *int v18 = v19;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for _PrimitivePlottableKind.TypeWitness()
{
  return swift_getGenericMetadata();
}

uint64_t getEnumTagSinglePayload for PlottableHints(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
LABEL_17:
  unsigned int v6 = *((unsigned __int8 *)a1 + 1);
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PlottableHints(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x21FA09BF4);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)(result + 1) = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t _s6Charts36AnyPrimitivePlottableOptionalBindingOwcp_0(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
    long long v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
  }
  (**(void (***)(uint64_t))(v4 - 8))(a1);
  *(unsigned char *)(a1 + 40) = v5;
  return a1;
}

uint64_t _s6Charts36AnyPrimitivePlottableOptionalBindingOwca_0(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    _s6Charts15AnyChartContentVwxx_0(a1);
    unsigned int v4 = *(unsigned __int8 *)(a2 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a2 + 2;
    }
    if (v4 == 1)
    {
      uint64_t v5 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v5;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      char v6 = 1;
    }
    else
    {
      char v6 = 0;
      uint64_t v5 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v5;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
    }
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    *(unsigned char *)(a1 + 40) = v6;
  }
  return a1;
}

uint64_t _s6Charts36AnyPrimitivePlottableOptionalBindingOwta_0(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    _s6Charts15AnyChartContentVwxx_0(a1);
    unsigned int v4 = *(unsigned __int8 *)(a2 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a2 + 2;
    }
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(unsigned char *)(a1 + 40) = v4 == 1;
  }
  return a1;
}

ValueMetadata *type metadata accessor for AnyPrimitivePlottableBinding()
{
  return &type metadata for AnyPrimitivePlottableBinding;
}

uint64_t initializeBufferWithCopyOfBuffer for AnyPrimitivePlottableArray(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AnyPrimitivePlottableArray(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AnyPrimitivePlottableArray(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AnyPrimitivePlottableRange()
{
  return &type metadata for AnyPrimitivePlottableRange;
}

unint64_t sub_21FA09EAC()
{
  unint64_t result = qword_267EEAD48;
  if (!qword_267EEAD48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EEAD48);
  }
  return result;
}

uint64_t sub_21FA09F00(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21FA09F3C(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21FA09F78(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21FA09FB4(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21FA09FF0(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21FA0A02C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  return sub_21F9FEDD4(*a1, 0, 0, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_21FA0A068@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  swift_bridgeObjectRetain();
  return sub_21F9FEDD4(v6, v7, 2, v5, v4, a2);
}

uint64_t sub_21FA0A0D0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21FA040AC(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(char **)(v2 + 32), a2);
}

uint64_t sub_21FA0A0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_21F9E0480(a1, *(void *)(v8 + 24), *(_DWORD *)(v8 + 32), *(void *)(v8 + 16), a2, a6, a7, a8);
}

uint64_t sub_21FA0A118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_21FA0A0F4(a1, a2, a3, a4, a5, a6, a7, a8);
}

void *RuleMark.init<A>(xStart:xEnd:y:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v16 = a1;
  char v17 = a2 & 1;
  uint64_t v18 = a3;
  char v19 = a4 & 1;
  sub_21F7BC014((uint64_t)&v16);
  sub_21F764AF8((uint64_t)&v16, (uint64_t)v14);
  sub_21F9D5860(a5, a6, a7, (uint64_t)v15);
  sub_21F764AF8((uint64_t)v15, (uint64_t)v20);
  uint64_t v12 = type metadata accessor for PlottableValue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(a5, v12);
  sub_21F764AF8((uint64_t)v14, (uint64_t)v21);
  sub_21F764AF8((uint64_t)v21, (uint64_t)__src);
  sub_21F764AF8((uint64_t)v20, (uint64_t)&__src[144]);
  return memcpy(a8, __src, 0x120uLL);
}

void *RuleMark.init<A, B>(xStart:xEnd:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  sub_21F9D598C(a1, a2, a4, a6, (uint64_t)v19);
  sub_21F764AF8((uint64_t)v19, (uint64_t)v18);
  sub_21F9D5860(a3, a5, a7, (uint64_t)v20);
  sub_21F764AF8((uint64_t)v20, (uint64_t)v21);
  uint64_t v14 = type metadata accessor for PlottableValue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a3, v14);
  uint64_t v15 = type metadata accessor for PlottableValue();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8);
  v16(a2, v15);
  v16(a1, v15);
  sub_21F764AF8((uint64_t)v18, (uint64_t)v22);
  sub_21F764AF8((uint64_t)v22, (uint64_t)__src);
  sub_21F764AF8((uint64_t)v21, (uint64_t)&__src[144]);
  return memcpy(a8, __src, 0x120uLL);
}

void *RuleMark.init<A>(xStart:xEnd:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  sub_21F9D598C(a1, a2, a5, a6, (uint64_t)v15);
  sub_21F764AF8((uint64_t)v15, (uint64_t)v16);
  uint64_t v12 = type metadata accessor for PlottableValue();
  int v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
  v13(a2, v12);
  v13(a1, v12);
  uint64_t v17 = a3;
  char v18 = a4 & 1;
  sub_21F9D5DEC((uint64_t)&v17);
  sub_21F764AF8((uint64_t)v16, (uint64_t)__src);
  sub_21F764AF8((uint64_t)&v17, (uint64_t)&__src[144]);
  return memcpy(a7, __src, 0x120uLL);
}

void *RuleMark.init<A>(x:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  sub_21F9D5860(a1, a6, a7, (uint64_t)v16);
  sub_21F764AF8((uint64_t)v16, (uint64_t)v17);
  uint64_t v14 = type metadata accessor for PlottableValue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a1, v14);
  uint64_t v18 = a2;
  char v19 = a3 & 1;
  uint64_t v20 = a4;
  char v21 = a5 & 1;
  sub_21F7BC014((uint64_t)&v18);
  sub_21F764AF8((uint64_t)v17, (uint64_t)__src);
  sub_21F764AF8((uint64_t)&v18, (uint64_t)&__src[144]);
  return memcpy(a8, __src, 0x120uLL);
}

void *RuleMark.init<A, B>(x:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  sub_21F9D5860(a1, a4, a6, (uint64_t)v19);
  sub_21F764AF8((uint64_t)v19, (uint64_t)v18);
  sub_21F9D598C(a2, a3, a5, a7, (uint64_t)v20);
  sub_21F764AF8((uint64_t)v20, (uint64_t)v21);
  uint64_t v14 = type metadata accessor for PlottableValue();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8);
  v15(a3, v14);
  v15(a2, v14);
  uint64_t v16 = type metadata accessor for PlottableValue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a1, v16);
  sub_21F764AF8((uint64_t)v18, (uint64_t)v22);
  sub_21F764AF8((uint64_t)v22, (uint64_t)__src);
  sub_21F764AF8((uint64_t)v21, (uint64_t)&__src[144]);
  return memcpy(a8, __src, 0x120uLL);
}

void *RuleMark.init<A>(x:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v17 = a1;
  char v18 = a2 & 1;
  sub_21F9D5DEC((uint64_t)&v17);
  sub_21F764AF8((uint64_t)&v17, (uint64_t)v15);
  sub_21F9D598C(a3, a4, a5, a6, (uint64_t)v16);
  sub_21F764AF8((uint64_t)v16, (uint64_t)v19);
  uint64_t v12 = type metadata accessor for PlottableValue();
  int v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
  v13(a4, v12);
  v13(a3, v12);
  sub_21F764AF8((uint64_t)v15, (uint64_t)v20);
  sub_21F764AF8((uint64_t)v20, (uint64_t)__src);
  sub_21F764AF8((uint64_t)v19, (uint64_t)&__src[144]);
  return memcpy(a7, __src, 0x120uLL);
}

uint64_t static RuleMark._renderChartContent(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for ChartContentRenderContext.Environment(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = &v24[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for SgRule(0);
  MEMORY[0x270FA5388](v9);
  BOOL v11 = (double *)&v24[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_21F764AF8(a1, (uint64_t)v28);
  sub_21F764AF8(a1 + 144, (uint64_t)v27);
  LOBYTE(a1) = *(unsigned char *)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  swift_retain();
  if (a1)
  {
    unint64_t v13 = sub_21FA0ACEC((uint64_t)v28, (uint64_t)v27, v12);
    uint64_t result = swift_release();
  }
  else
  {
    sub_21F75FD64((uint64_t)v28, 0, v25);
    double v15 = v25[0];
    double v16 = v25[1];
    sub_21F75FD64((uint64_t)v27, 1, v26);
    double v17 = v26[0];
    double v18 = v26[1];
    uint64_t v19 = *(void *)(*(void *)(v12 + 16) + 24);
    uint64_t v20 = v12 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
    swift_beginAccess();
    sub_21F7BB184(v20, (uint64_t)v8);
    sub_21F77188C((uint64_t)v8, (uint64_t)v11 + *(int *)(v9 + 36));
    uint64_t v21 = *(void *)(v20 + *(int *)(v6 + 64));
    swift_release();
    *(void *)BOOL v11 = v19;
    v11[1] = v15;
    void v11[2] = v17;
    v11[3] = v16;
    v11[4] = v18;
    *(void *)((char *)v11 + *(int *)(v9 + 40)) = v21;
    uint64_t v22 = swift_allocBox();
    uint64_t result = sub_21FA0B08C((uint64_t)v11, v23);
    unint64_t v13 = v22 | 0x6000000000000000;
  }
  *a3 = v13;
  return result;
}

uint64_t _s6Charts8RuleMarkV19_layoutChartContentyyAC_AA01_eF12LayoutInputsVtFZ_0(uint64_t a1, uint64_t *a2)
{
  sub_21F764AF8(a1, (uint64_t)v15);
  sub_21F764AF8(a1 + 144, (uint64_t)v14);
  uint64_t v4 = *a2;
  swift_beginAccess();
  if (*(unsigned char *)(v4 + 881) == 2)
  {
    sub_21F764AF8((uint64_t)v15, (uint64_t)v16);
    switch(sub_21F7607A0((uint64_t)v16))
    {
      case 1u:
        uint64_t v7 = sub_21F7607C4((uint64_t)v16);
        sub_21F76C9DC(v7, (uint64_t)v17, &qword_26AD455C8);
        goto LABEL_13;
      case 3u:
        sub_21F7607C4((uint64_t)v16);
        goto LABEL_10;
      case 4u:
      case 5u:
        sub_21F7607C4((uint64_t)v16);
        goto LABEL_13;
      default:
        uint64_t v5 = sub_21F7607C4((uint64_t)v16);
        if (*(char *)(v5 + 48) < 0) {
          goto LABEL_10;
        }
        if (*(unsigned char *)(v5 + 48))
        {
          if (*(unsigned char *)(v5 + 48) != 1)
          {
LABEL_10:
            *(unsigned char *)(v4 + 881) = 0;
            break;
          }
          char v6 = 1;
        }
        else
        {
          char v6 = 0;
        }
        sub_21F770E38(*(void *)(v5 + 32), *(void *)(v5 + 40), v6);
LABEL_13:
        sub_21F764AF8((uint64_t)v14, (uint64_t)v18);
        switch(sub_21F7607A0((uint64_t)v18))
        {
          case 1u:
            uint64_t v12 = sub_21F7607C4((uint64_t)v18);
            sub_21F76C9DC(v12, (uint64_t)v19, &qword_26AD455C8);
            goto LABEL_22;
          case 3u:
            sub_21F7607C4((uint64_t)v18);
            goto LABEL_21;
          case 4u:
          case 5u:
            sub_21F7607C4((uint64_t)v18);
            goto LABEL_22;
          default:
            uint64_t v8 = sub_21F7607C4((uint64_t)v18);
            int v9 = *(char *)(v8 + 48);
            if (v9 < 0) {
              goto LABEL_21;
            }
            uint64_t v10 = *(void *)(v8 + 40);
            uint64_t v11 = *(void *)(v8 + 32);
            if ((_BYTE)v9)
            {
              if (v9 == 1) {
                sub_21F770E38(v11, v10, 1);
              }
              else {
LABEL_21:
              }
                *(unsigned char *)(v4 + 881) = 1;
            }
            else
            {
              sub_21F770E38(v11, v10, 0);
            }
            break;
        }
        break;
    }
  }
LABEL_22:
  sub_21F760AD8((uint64_t)v15, 0);
  return sub_21F760AD8((uint64_t)v14, 1);
}

unint64_t sub_21FA0ACEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_21F75FD64(a1, 0, v62);
  double v6 = v62[0];
  double v7 = v62[1];
  sub_21F75FD64(a2, 1, v63);
  double v8 = v63[0];
  double v9 = v63[1];
  sub_21F76CA40(&qword_26AD47CE0);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_21FA28D80;
  sub_21F8C04D4(a1);
  sub_21F8DDED0(0, a1, (uint64_t)v64);
  sub_21F76C9DC((uint64_t)v64, v10 + 32, &qword_26AD47B78);
  sub_21F8C04D4(a2);
  sub_21F8DDED0(1, a2, (uint64_t)v65);
  sub_21F76C9DC((uint64_t)v65, v10 + 184, &qword_26AD47B78);
  uint64_t v48 = a3;
  uint64_t v11 = a3 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  uint64_t v12 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  unint64_t v13 = (uint64_t *)(v11 + v12[18]);
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  uint64_t v16 = v13[2];
  uint64_t v17 = v13[3];
  uint64_t v18 = v13[4];
  uint64_t v19 = v13[5];
  uint64_t v21 = v13[6];
  uint64_t v20 = v13[7];
  uint64_t v22 = v13[8];
  char v45 = v21;
  if (v17)
  {
    v49[0] = 4;
    uint64_t v50 = v14;
    uint64_t v51 = v15;
    char v52 = v16 & 1;
    uint64_t v53 = v17;
    uint64_t v54 = v18;
    uint64_t v55 = v19;
    char v56 = v21;
    uint64_t v57 = v20;
    uint64_t v58 = v22;
    char v59 = 3;
    uint64_t v23 = v18;
    sub_21F7BB878((uint64_t)v49);
    sub_21F7BB81C((uint64_t)v49, (uint64_t)__src);
    nullsub_1(__src, v24);
  }
  else
  {
    uint64_t v23 = v13[4];
    sub_21F7BB380((uint64_t)__src);
  }
  sub_21F76C9DC((uint64_t)__src, (uint64_t)v61, &qword_26AD47B78);
  double v25 = vabdd_f64(v9, v8);
  double v26 = vabdd_f64(v7, v6);
  if (v9 < v8) {
    double v8 = v9;
  }
  if (v7 < v6) {
    double v6 = v7;
  }
  sub_21F76C9DC((uint64_t)v61, v10 + 336, &qword_26AD47B78);
  sub_21F761E74(v14, v15, v16, v17, v23, v19, v45);
  uint64_t v44 = sub_21F8C2950(v10);
  uint64_t v46 = v27;
  swift_setDeallocating();
  sub_21F76CA40(&qword_26AD47B78);
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v28 = *(void *)(*(void *)(v48 + 16) + 24);
  int v29 = (uint64_t *)(v11 + v12[26]);
  uint64_t v30 = v29[1];
  uint64_t v47 = *v29;
  uint64_t v31 = v12[25];
  uint64_t v32 = (uint64_t *)(v11 + v12[24]);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  uint64_t v35 = v32[2];
  uint64_t v36 = v32[3];
  uint64_t v37 = v11 + v31;
  uint64_t v39 = *(void *)(v11 + v31);
  uint64_t v38 = *(void *)(v11 + v31 + 8);
  uint64_t v41 = *(void *)(v37 + 16);
  uint64_t v40 = *(void *)(v37 + 24);
  sub_21F7BB380((uint64_t)v49);
  __src[0] = v28;
  *(double *)&__src[1] = v6;
  *(double *)&__src[2] = v8;
  *(double *)&__src[3] = v26;
  *(double *)&__src[4] = v25;
  __src[5] = v47;
  __src[6] = v30;
  __src[7] = v34;
  __src[8] = v33;
  __src[9] = v35;
  __src[10] = v36;
  __src[11] = v39;
  __src[12] = v38;
  __src[13] = v41;
  __src[14] = v40;
  __src[15] = v44;
  sub_21F76C9DC((uint64_t)v49, (uint64_t)&__src[16], &qword_26AD47B78);
  __src[35] = v46;
  sub_21F76C9DC((uint64_t)v49, (uint64_t)&__src[36], &qword_26AD47B78);
  sub_21F76C9DC((uint64_t)v49, (uint64_t)&__src[55], &qword_26AD47B78);
  LOWORD(__src[74]) = 0;
  __src[75] = 0;
  uint64_t v42 = swift_allocObject();
  memcpy((void *)(v42 + 16), __src, 0x260uLL);
  swift_bridgeObjectRetain();
  sub_21F7BB3B4(v34, v33, v35, v36);
  sub_21F7BB3B4(v39, v38, v41, v40);
  return v42 | 0xC000000000000000;
}

uint64_t sub_21FA0B08C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SgRule(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for RuleMark()
{
  return &type metadata for RuleMark;
}

uint64_t sub_21FA0B100()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 96))
  {
    sub_21F7656A8(*(void *)(v0 + 72), *(void *)(v0 + 80), *(unsigned char *)(v0 + 88));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 128))
  {
    sub_21F7656A8(*(void *)(v0 + 104), *(void *)(v0 + 112), *(unsigned char *)(v0 + 120));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 144);
  unint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 216);
  unint64_t v6 = *(void *)(v0 + 240);
  uint64_t v7 = *(void *)(v0 + 272);
  uint64_t v8 = *(void *)(v0 + 288);
  if (v6 > 1
    || (v1 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v2 > 1
    || (v5 | v4) & 0xF000000000000007 | v3 & 0xFFFFFFFFFFFFFF7CLL
    || (v8 | *(void *)(v0 + 280)) & 0xF000000000000007 | v7 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_21F7BB724(v1, *(void *)(v0 + 152), *(void *)(v0 + 160), v2, *(void *)(v0 + 176), *(void *)(v0 + 184), *(void *)(v0 + 192), v3, v4, v5, *(void *)(v0 + 224), *(void *)(v0 + 232), v6, *(void *)(v0 + 248), *(void *)(v0 + 256), *(void *)(v0 + 264), v7, *(void *)(v0 + 280), v8);
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v0 + 304);
  unint64_t v10 = *(void *)(v0 + 328);
  uint64_t v11 = *(void *)(v0 + 360);
  uint64_t v12 = *(void *)(v0 + 368);
  uint64_t v13 = *(void *)(v0 + 376);
  unint64_t v14 = *(void *)(v0 + 400);
  uint64_t v15 = *(void *)(v0 + 432);
  uint64_t v16 = *(void *)(v0 + 448);
  if (v14 > 1
    || (v9 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v10 > 1
    || (v13 | v12) & 0xF000000000000007 | v11 & 0xFFFFFFFFFFFFFF7CLL
    || (v16 | *(void *)(v0 + 440)) & 0xF000000000000007 | v15 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_21F7BB724(v9, *(void *)(v0 + 312), *(void *)(v0 + 320), v10, *(void *)(v0 + 336), *(void *)(v0 + 344), *(void *)(v0 + 352), v11, v12, v13, *(void *)(v0 + 384), *(void *)(v0 + 392), v14, *(void *)(v0 + 408), *(void *)(v0 + 416), *(void *)(v0 + 424), v15, *(void *)(v0 + 440), v16);
  }
  uint64_t v17 = *(void *)(v0 + 456);
  unint64_t v18 = *(void *)(v0 + 480);
  uint64_t v19 = *(void *)(v0 + 512);
  uint64_t v20 = *(void *)(v0 + 520);
  uint64_t v21 = *(void *)(v0 + 528);
  unint64_t v22 = *(void *)(v0 + 552);
  uint64_t v23 = *(void *)(v0 + 584);
  uint64_t v24 = *(void *)(v0 + 600);
  if (v22 > 1
    || (v17 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v18 > 1
    || (v21 | v20) & 0xF000000000000007 | v19 & 0xFFFFFFFFFFFFFF7CLL
    || (v24 | *(void *)(v0 + 592)) & 0xF000000000000007 | v23 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_21F7BB724(v17, *(void *)(v0 + 464), *(void *)(v0 + 472), v18, *(void *)(v0 + 488), *(void *)(v0 + 496), *(void *)(v0 + 504), v19, v20, v21, *(void *)(v0 + 536), *(void *)(v0 + 544), v22, *(void *)(v0 + 560), *(void *)(v0 + 568), *(void *)(v0 + 576), v23, *(void *)(v0 + 592), v24);
  }

  return MEMORY[0x270FA0238](v0, 624, 7);
}

uint64_t *sub_21FA0B36C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = sub_21FA24F30();
    unint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_21FA0B450(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_21FA24F30();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_21FA0B4C8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_21FA24F30();
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

void *sub_21FA0B560(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_21FA24F30();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *sub_21FA0B5F4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_21FA24F30();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_21FA0B670(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_21FA24F30();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_21FA0B6FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21FA0B710);
}

uint64_t sub_21FA0B710(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_21FA24F30();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_21FA0B7C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21FA0B7D4);
}

void *sub_21FA0B7D4(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_21FA24F30();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for MultiPreferenceCombinerVisitor()
{
  uint64_t result = qword_267EEAD58;
  if (!qword_267EEAD58) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_21FA0B8C8()
{
  uint64_t result = sub_21FA24F30();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_21FA0B964@<X0>(uint64_t a1@<X0>, void (**a2)(char *, uint64_t, uint64_t)@<X1>, void (**a3)(char *, uint64_t, uint64_t)@<X2>, char *a4@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v33 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v39 = (char *)&v32 - v12;
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  sub_21FA24670();
  uint64_t v13 = sub_21FA24360();
  uint64_t v14 = swift_bridgeObjectRetain();
  if (MEMORY[0x223C55360](v14, v13))
  {
    uint64_t v38 = a4;
    uint64_t v15 = 0;
    uint64_t v32 = (void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    uint64_t v34 = (void (**)(uint64_t, uint64_t))(v9 + 8);
    uint64_t v35 = v13;
    uint64_t v16 = (void (**)(char *, char *, uint64_t))(v9 + 32);
    uint64_t v17 = a1 + 36;
    char v18 = 1;
    while (1)
    {
      char v22 = sub_21FA25EE0();
      uint64_t v23 = sub_21FA25E80();
      if (v22)
      {
        uint64_t v24 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_14;
        }
      }
      else
      {
        sub_21FA26560();
        uint64_t v23 = swift_unknownObjectRelease();
        uint64_t v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_14:
          __break(1u);
          return swift_bridgeObjectRelease();
        }
      }
      if (v18)
      {
        Weakuint64_t Value = AGGraphGetWeakValue();
        if (WeakValue)
        {
          uint64_t v26 = a1;
          uint64_t v27 = v33;
          (*v32)(v33, WeakValue, AssociatedTypeWitness);
          uint64_t v28 = v38;
          (*v34)((uint64_t)v38, AssociatedTypeWitness);
          int v29 = *v16;
          uint64_t v30 = v27;
          a1 = v26;
          (*v16)(v39, v30, AssociatedTypeWitness);
        }
        else
        {
          sub_21FA24670();
          uint64_t v28 = v38;
          (*v34)((uint64_t)v38, AssociatedTypeWitness);
          int v29 = *v16;
        }
        v29(v28, v39, AssociatedTypeWitness);
        uint64_t v13 = v35;
      }
      else
      {
        MEMORY[0x270FA5388](v23);
        uint64_t v19 = v37;
        *(&v32 - 4) = v36;
        *(&v32 - 3) = v19;
        *((_DWORD *)&v32 - 4) = v20;
        *((_DWORD *)&v32 - 3) = v21;
        sub_21FA24680();
      }
      char v18 = 0;
      v17 += 8;
      ++v15;
      if (v24 == MEMORY[0x223C55360](a1, v13)) {
        return swift_bridgeObjectRelease();
      }
    }
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_21FA0BCB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (!WeakValue) {
    return sub_21FA24670();
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v4(a1, WeakValue, AssociatedTypeWitness);
}

uint64_t sub_21FA0BD94@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_21FA0B964(*v2, *(void (***)(char *, uint64_t, uint64_t))(a1 + 16), *(void (***)(char *, uint64_t, uint64_t))(a1 + 24), a2);
}

uint64_t sub_21FA0BDA4()
{
  return sub_21FA0C798();
}

uint64_t sub_21FA0BDB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a1, Value, AssociatedTypeWitness);
  return sub_21FA24680();
}

uint64_t sub_21FA0BE90@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v4(a1, Value, AssociatedTypeWitness);
}

uint64_t sub_21FA0BF34@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v3(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t sub_21FA0BFB4@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA0BDB0(a1);
}

uint64_t sub_21FA0BFC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  v28[6] = *MEMORY[0x263EF8340];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_21FA24530();
  uint64_t v9 = sub_21FA26340();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v24 - v10;
  v28[0] = *v3;
  v28[3] = a2;
  v28[4] = a3;
  swift_bridgeObjectRetain();
  sub_21F76CA40(&qword_267EEAD68);
  uint64_t v12 = sub_21FA24380();
  sub_21FA0C598();
  uint64_t v13 = sub_21FA25D80();
  swift_bridgeObjectRelease();
  uint64_t v14 = MEMORY[0x223C55340](v13, v12);
  if (v14 == 2)
  {
    sub_21FA25F60();
    unsigned int v16 = v28[0];
    sub_21FA25F60();
    uint64_t v17 = swift_bridgeObjectRelease();
    double v25 = &v24;
    v28[0] = __PAIR64__(v28[0], v16);
    MEMORY[0x270FA5388](v17);
    uint64_t v26 = v4;
    *(&v24 - 4) = AssociatedTypeWitness;
    uint64_t v18 = type metadata accessor for PairPreferenceCombiner();
    *(&v24 - 3) = v18;
    *(&v24 - 2) = swift_getWitnessTable();
    sub_21F74C95C((uint64_t)v28, (uint64_t)sub_21FA0C7EC, (uint64_t)(&v24 - 6), v18, MEMORY[0x263F8E628], v12, MEMORY[0x263F8E658], v19);
LABEL_8:
    sub_21F74CA38(v27, (uint64_t)v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v11, 0, 1, v8);
    type metadata accessor for MultiPreferenceCombinerVisitor();
    return sub_21FA24F50();
  }
  if (v14 != 1)
  {
    if (!v14) {
      return swift_bridgeObjectRelease();
    }
    uint64_t v20 = sub_21FA0C5F4(v13, a2, a3);
    uint64_t v21 = swift_bridgeObjectRelease();
    double v25 = &v24;
    v28[0] = v20;
    MEMORY[0x270FA5388](v21);
    uint64_t v26 = v4;
    *(&v24 - 4) = AssociatedTypeWitness;
    uint64_t v22 = type metadata accessor for PreferenceCombiner();
    *(&v24 - 3) = v22;
    *(&v24 - 2) = swift_getWitnessTable();
    sub_21F74C95C((uint64_t)v28, (uint64_t)sub_21F74D630, (uint64_t)(&v24 - 6), v22, MEMORY[0x263F8E628], v12, MEMORY[0x263F8E658], v23);
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_21FA25F60();
  swift_bridgeObjectRelease();
  sub_21F74CA38(v28[0], (uint64_t)v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v11, 0, 1, v8);
  type metadata accessor for MultiPreferenceCombinerVisitor();
  return sub_21FA24F50();
}

uint64_t sub_21FA0C3F4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  swift_getAssociatedTypeWitness();
  sub_21FA24530();
  uint64_t v6 = sub_21FA26340();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = &v13[-v8];
  sub_21FA24F40();
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  uint64_t v10 = sub_21FA24380();
  sub_21F769724((void (*)(char *, char *))sub_21F8886EC, (uint64_t)v13, MEMORY[0x263F8E628], v10, v11, a3);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_21FA0C57C@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA0C3F4(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

unint64_t sub_21FA0C598()
{
  unint64_t result = qword_267EEAD70[0];
  if (!qword_267EEAD70[0])
  {
    sub_21F779EA4(&qword_267EEAD68);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_267EEAD70);
  }
  return result;
}

uint64_t sub_21FA0C5F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[5] = a1;
  __n128 v8[2] = a2;
  long long v8[3] = a3;
  swift_getAssociatedTypeWitness();
  sub_21FA24380();
  uint64_t v3 = sub_21FA25F30();
  uint64_t v4 = sub_21FA24360();
  uint64_t WitnessTable = swift_getWitnessTable();
  return sub_21F751B50((void (*)(char *, char *))sub_21FA0C708, (uint64_t)v8, v3, v4, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v6);
}

uint64_t type metadata accessor for PreferenceCombiner()
{
  return sub_21F764F08();
}

uint64_t type metadata accessor for PairPreferenceCombiner()
{
  return sub_21F764F08();
}

uint64_t sub_21FA0C708@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AGCreateWeakAttribute();
  *a1 = result;
  return result;
}

void *sub_21FA0C73C(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t sub_21FA0C748()
{
  return swift_getWitnessTable();
}

uint64_t sub_21FA0C764()
{
  return swift_getWitnessTable();
}

uint64_t sub_21FA0C780@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA0BCB8(a1);
}

uint64_t sub_21FA0C78C@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA0BE90(a1);
}

uint64_t sub_21FA0C798()
{
  return 548047074;
}

uint64_t sub_21FA0C7EC@<X0>(_DWORD *a1@<X8>)
{
  return sub_21F74D630(a1);
}

unint64_t sub_21FA0C804(unint64_t a1, uint64_t a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    unint64_t v25 = v24 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
    return v25;
  }
  uint64_t v7 = *(void *)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 24);
  char v11 = *(unsigned char *)(a2 + 32);
  sub_21F764300(*(void *)a2, v8, v9, v10, v11);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v10;
  *(unsigned char *)(a1 + 32) = v11;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  uint64_t v15 = sub_21FA24970();
  unsigned int v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16);
  v16(v13, v14, v15);
  uint64_t v17 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  *(unsigned char *)uint64_t v18 = *(unsigned char *)v19;
  *(void *)(v18 + 8) = *(void *)(v19 + 8);
  *(unsigned char *)(v18 + 16) = *(unsigned char *)(v19 + 16);
  *(void *)(v18 + 24) = *(void *)(v19 + 24);
  *(unsigned char *)(v18 + 32) = *(unsigned char *)(v19 + 32);
  uint64_t v20 = (_OWORD *)(v18 + 40);
  uint64_t v21 = (_OWORD *)(v19 + 40);
  uint64_t v22 = *(void *)(v19 + 64);
  if (v22)
  {
    uint64_t v23 = *(void *)(v19 + 72);
    *(void *)(v18 + 64) = v22;
    *(void *)(v18 + 72) = v23;
    (**(void (***)(_OWORD *, _OWORD *))(v22 - 8))(v20, v21);
  }
  else
  {
    long long v26 = *(_OWORD *)(v19 + 56);
    *uint64_t v20 = *v21;
    *(_OWORD *)(v18 + 56) = v26;
    *(void *)(v18 + 72) = *(void *)(v19 + 72);
  }
  uint64_t v27 = a3[10];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  uint64_t v30 = *(void *)(a2 + v27 + 8);
  *(void *)uint64_t v28 = *(void *)(a2 + v27);
  *(void *)(v28 + 8) = v30;
  uint64_t v31 = *(void *)(a2 + v27 + 24);
  *(void *)(v28 + 16) = *(void *)(a2 + v27 + 16);
  *(void *)(v28 + 24) = v31;
  uint64_t v32 = (_OWORD *)(a2 + v27 + 32);
  char v33 = *(unsigned char *)(v29 + 315);
  swift_retain();
  swift_retain();
  swift_retain();
  if (v33)
  {
    uint64_t v34 = (_OWORD *)(v28 + 32);
    int v35 = *(unsigned __int8 *)(v29 + 72);
    if (v35 == 255)
    {
      long long v36 = *(_OWORD *)(v29 + 48);
      *uint64_t v34 = *v32;
      *(_OWORD *)(v28 + 48) = v36;
      *(_OWORD *)(v28 + 57) = *(_OWORD *)(v29 + 57);
    }
    else
    {
      long long v37 = *(_OWORD *)(v29 + 56);
      *(_OWORD *)(v28 + 56) = v37;
      (**(void (***)(_OWORD *, uint64_t))(v37 - 8))(v34, v29 + 32);
      *(unsigned char *)(v28 + 72) = (v35 & 1) != 0;
    }
    uint64_t v38 = (_OWORD *)(v28 + 80);
    uint64_t v39 = (_OWORD *)(v29 + 80);
    int v40 = *(unsigned __int8 *)(v29 + 120);
    if (v40 == 255)
    {
      long long v41 = *(_OWORD *)(v29 + 96);
      *uint64_t v38 = *v39;
      *(_OWORD *)(v28 + 96) = v41;
      *(_OWORD *)(v28 + 105) = *(_OWORD *)(v29 + 105);
    }
    else
    {
      long long v42 = *(_OWORD *)(v29 + 104);
      *(_OWORD *)(v28 + 104) = v42;
      (**(void (***)(_OWORD *, _OWORD *))(v42 - 8))(v38, v39);
      *(unsigned char *)(v28 + 120) = (v40 & 1) != 0;
    }
    uint64_t v43 = (_OWORD *)(v28 + 128);
    uint64_t v44 = (_OWORD *)(v29 + 128);
    int v45 = *(unsigned __int8 *)(v29 + 168);
    if (v45 == 255)
    {
      long long v46 = *(_OWORD *)(v29 + 144);
      *uint64_t v43 = *v44;
      *(_OWORD *)(v28 + 144) = v46;
      *(_OWORD *)(v28 + 153) = *(_OWORD *)(v29 + 153);
    }
    else
    {
      long long v47 = *(_OWORD *)(v29 + 152);
      *(_OWORD *)(v28 + 152) = v47;
      (**(void (***)(_OWORD *, _OWORD *))(v47 - 8))(v43, v44);
      *(unsigned char *)(v28 + 168) = (v45 & 1) != 0;
    }
    uint64_t v48 = (_OWORD *)(v28 + 176);
    uint64_t v49 = (_OWORD *)(v29 + 176);
    int v50 = *(unsigned __int8 *)(v29 + 216);
    if (v50 == 255)
    {
      long long v51 = *(_OWORD *)(v29 + 192);
      *uint64_t v48 = *v49;
      *(_OWORD *)(v28 + 192) = v51;
      *(_OWORD *)(v28 + 201) = *(_OWORD *)(v29 + 201);
    }
    else
    {
      long long v52 = *(_OWORD *)(v29 + 200);
      *(_OWORD *)(v28 + 200) = v52;
      (**(void (***)(_OWORD *, _OWORD *))(v52 - 8))(v48, v49);
      *(unsigned char *)(v28 + 216) = (v50 & 1) != 0;
    }
    uint64_t v53 = (_OWORD *)(v28 + 224);
    uint64_t v54 = (_OWORD *)(v29 + 224);
    int v55 = *(unsigned __int8 *)(v29 + 264);
    if (v55 == 255)
    {
      long long v56 = *(_OWORD *)(v29 + 240);
      *uint64_t v53 = *v54;
      *(_OWORD *)(v28 + 240) = v56;
      *(_OWORD *)(v28 + 249) = *(_OWORD *)(v29 + 249);
    }
    else
    {
      long long v57 = *(_OWORD *)(v29 + 248);
      *(_OWORD *)(v28 + 248) = v57;
      (**(void (***)(_OWORD *, _OWORD *))(v57 - 8))(v53, v54);
      uint64_t v58 = (BOOL *)(v28 + 264);
      *uint64_t v58 = (v55 & 1) != 0;
    }
    char v59 = (_OWORD *)(v28 + 272);
    uint64_t v60 = (_OWORD *)(v29 + 272);
    int v61 = *(unsigned __int8 *)(v29 + 312);
    if (v61 == 255)
    {
      long long v62 = *(_OWORD *)(v29 + 288);
      *char v59 = *v60;
      *(_OWORD *)(v28 + 288) = v62;
      *(_OWORD *)(v28 + 297) = *(_OWORD *)(v29 + 297);
    }
    else
    {
      uint64_t v63 = *(void *)(v29 + 296);
      uint64_t v64 = *(void *)(v29 + 304);
      *(void *)(v28 + 296) = v63;
      *(void *)(v28 + 304) = v64;
      (**(void (***)(_OWORD *, _OWORD *))(v63 - 8))(v59, v60);
      uint64_t v65 = (BOOL *)(v28 + 312);
      *uint64_t v65 = (v61 & 1) != 0;
    }
    *(_WORD *)(v28 + 313) = *(_WORD *)(v29 + 313);
    *(unsigned char *)(v28 + 315) = 1;
  }
  else
  {
    *(void *)(v28 + 32) = *(void *)v32;
    *(unsigned char *)(v28 + 315) = 0;
    swift_retain();
  }
  *(unsigned char *)(v28 + 316) = *(unsigned char *)(v29 + 316);
  uint64_t v66 = *(void *)(v29 + 320);
  if (v66)
  {
    uint64_t v67 = *(void *)(v29 + 328);
    *(void *)(v28 + 320) = v66;
    *(void *)(v28 + 328) = v67;
    swift_retain();
    uint64_t v68 = *(void *)(v29 + 336);
    if (v68) {
      goto LABEL_41;
    }
  }
  else
  {
    *(_OWORD *)(v28 + 320) = *(_OWORD *)(v29 + 320);
    uint64_t v68 = *(void *)(v29 + 336);
    if (v68)
    {
LABEL_41:
      uint64_t v69 = *(void *)(v29 + 344);
      *(void *)(v28 + 336) = v68;
      *(void *)(v28 + 344) = v69;
      swift_retain();
      uint64_t v70 = *(void *)(v29 + 352);
      if (v70) {
        goto LABEL_42;
      }
      goto LABEL_47;
    }
  }
  *(_OWORD *)(v28 + 336) = *(_OWORD *)(v29 + 336);
  uint64_t v70 = *(void *)(v29 + 352);
  if (v70)
  {
LABEL_42:
    uint64_t v71 = *(void *)(v29 + 360);
    *(void *)(v28 + 352) = v70;
    *(void *)(v28 + 360) = v71;
    swift_retain();
    uint64_t v72 = *(void *)(v29 + 368);
    if (v72) {
      goto LABEL_43;
    }
LABEL_48:
    *(_OWORD *)(v28 + 368) = *(_OWORD *)(v29 + 368);
    uint64_t v74 = *(void *)(v29 + 384);
    if (v74) {
      goto LABEL_44;
    }
    goto LABEL_49;
  }
LABEL_47:
  *(_OWORD *)(v28 + 352) = *(_OWORD *)(v29 + 352);
  uint64_t v72 = *(void *)(v29 + 368);
  if (!v72) {
    goto LABEL_48;
  }
LABEL_43:
  uint64_t v73 = *(void *)(v29 + 376);
  *(void *)(v28 + 368) = v72;
  *(void *)(v28 + 376) = v73;
  swift_retain();
  uint64_t v74 = *(void *)(v29 + 384);
  if (v74)
  {
LABEL_44:
    uint64_t v75 = *(void *)(v29 + 392);
    *(void *)(v28 + 384) = v74;
    *(void *)(v28 + 392) = v75;
    swift_retain();
    goto LABEL_50;
  }
LABEL_49:
  *(_OWORD *)(v28 + 384) = *(_OWORD *)(v29 + 384);
LABEL_50:
  int v76 = *(unsigned __int8 *)(v29 + 504);
  uint64_t v230 = v15;
  unint64_t v231 = a1;
  uint64_t v229 = v16;
  if (v76 == 255)
  {
    long long v77 = *(_OWORD *)(v29 + 480);
    *(_OWORD *)(v28 + 464) = *(_OWORD *)(v29 + 464);
    *(_OWORD *)(v28 + 480) = v77;
    *(_OWORD *)(v28 + 489) = *(_OWORD *)(v29 + 489);
    long long v78 = *(_OWORD *)(v29 + 416);
    *(_OWORD *)(v28 + 400) = *(_OWORD *)(v29 + 400);
    *(_OWORD *)(v28 + 416) = v78;
    long long v79 = *(_OWORD *)(v29 + 448);
    *(_OWORD *)(v28 + 432) = *(_OWORD *)(v29 + 432);
    *(_OWORD *)(v28 + 448) = v79;
  }
  else
  {
    char v224 = v76 & 1;
    uint64_t v80 = *(void *)(v29 + 400);
    uint64_t v81 = *(void *)(v29 + 408);
    uint64_t v82 = *(void *)(v29 + 416);
    uint64_t v83 = *(void *)(v29 + 424);
    uint64_t v84 = *(void *)(v29 + 432);
    uint64_t v85 = *(void *)(v29 + 440);
    uint64_t v86 = *(void *)(v29 + 448);
    uint64_t v87 = *(void *)(v29 + 456);
    uint64_t v200 = *(void *)(v29 + 464);
    uint64_t v204 = *(void *)(v29 + 472);
    uint64_t v209 = *(void *)(v29 + 480);
    uint64_t v214 = *(void *)(v29 + 488);
    uint64_t v219 = *(void *)(v29 + 496);
    sub_21F764268(v80, v81, v82, v83, v84, v85, v86, v87, v200);
    *(void *)(v28 + 400) = v80;
    *(void *)(v28 + 408) = v81;
    *(void *)(v28 + 416) = v82;
    *(void *)(v28 + 424) = v83;
    *(void *)(v28 + 432) = v84;
    *(void *)(v28 + 440) = v85;
    *(void *)(v28 + 448) = v86;
    *(void *)(v28 + 456) = v87;
    *(void *)(v28 + 464) = v200;
    *(void *)(v28 + 472) = v204;
    *(void *)(v28 + 480) = v209;
    *(void *)(v28 + 488) = v214;
    *(void *)(v28 + 496) = v219;
    *(unsigned char *)(v28 + 504) = v224;
  }
  int v88 = *(unsigned __int8 *)(v29 + 616);
  if (v88 == 255)
  {
    long long v89 = *(_OWORD *)(v29 + 592);
    *(_OWORD *)(v28 + 576) = *(_OWORD *)(v29 + 576);
    *(_OWORD *)(v28 + 592) = v89;
    *(_OWORD *)(v28 + 601) = *(_OWORD *)(v29 + 601);
    long long v90 = *(_OWORD *)(v29 + 528);
    *(_OWORD *)(v28 + 512) = *(_OWORD *)(v29 + 512);
    *(_OWORD *)(v28 + 528) = v90;
    long long v91 = *(_OWORD *)(v29 + 560);
    *(_OWORD *)(v28 + 544) = *(_OWORD *)(v29 + 544);
    *(_OWORD *)(v28 + 560) = v91;
  }
  else
  {
    char v225 = v88 & 1;
    uint64_t v92 = *(void *)(v29 + 512);
    uint64_t v93 = *(void *)(v29 + 520);
    uint64_t v94 = *(void *)(v29 + 528);
    uint64_t v95 = *(void *)(v29 + 536);
    uint64_t v96 = *(void *)(v29 + 544);
    uint64_t v97 = *(void *)(v29 + 552);
    uint64_t v98 = *(void *)(v29 + 560);
    uint64_t v99 = *(void *)(v29 + 568);
    uint64_t v201 = *(void *)(v29 + 576);
    uint64_t v205 = *(void *)(v29 + 584);
    uint64_t v210 = *(void *)(v29 + 592);
    uint64_t v215 = *(void *)(v29 + 600);
    uint64_t v220 = *(void *)(v29 + 608);
    sub_21F764268(v92, v93, v94, v95, v96, v97, v98, v99, v201);
    *(void *)(v28 + 512) = v92;
    *(void *)(v28 + 520) = v93;
    *(void *)(v28 + 528) = v94;
    *(void *)(v28 + 536) = v95;
    *(void *)(v28 + 544) = v96;
    *(void *)(v28 + 552) = v97;
    *(void *)(v28 + 560) = v98;
    *(void *)(v28 + 568) = v99;
    *(void *)(v28 + 576) = v201;
    *(void *)(v28 + 584) = v205;
    *(void *)(v28 + 592) = v210;
    *(void *)(v28 + 600) = v215;
    *(void *)(v28 + 608) = v220;
    *(unsigned char *)(v28 + 616) = v225;
  }
  int v100 = *(unsigned __int8 *)(v29 + 720);
  if (v100 == 255)
  {
    long long v101 = *(_OWORD *)(v29 + 704);
    *(_OWORD *)(v28 + 688) = *(_OWORD *)(v29 + 688);
    *(_OWORD *)(v28 + 704) = v101;
    *(unsigned char *)(v28 + 720) = *(unsigned char *)(v29 + 720);
    long long v102 = *(_OWORD *)(v29 + 640);
    *(_OWORD *)(v28 + 624) = *(_OWORD *)(v29 + 624);
    *(_OWORD *)(v28 + 640) = v102;
    long long v103 = *(_OWORD *)(v29 + 672);
    *(_OWORD *)(v28 + 656) = *(_OWORD *)(v29 + 656);
    *(_OWORD *)(v28 + 672) = v103;
  }
  else
  {
    char v226 = v100 & 1;
    uint64_t v104 = *(void *)(v29 + 624);
    uint64_t v105 = *(void *)(v29 + 632);
    uint64_t v106 = *(void *)(v29 + 640);
    uint64_t v107 = *(void *)(v29 + 648);
    uint64_t v108 = *(void *)(v29 + 656);
    uint64_t v109 = *(void *)(v29 + 664);
    uint64_t v110 = *(void *)(v29 + 672);
    uint64_t v111 = *(void *)(v29 + 680);
    uint64_t v206 = *(void *)(v29 + 688);
    uint64_t v211 = *(void *)(v29 + 696);
    uint64_t v216 = *(void *)(v29 + 704);
    uint64_t v221 = *(void *)(v29 + 712);
    sub_21F7E0AB8(v104, v105, v106, v107, v108, v109, v110, v111);
    *(void *)(v28 + 624) = v104;
    *(void *)(v28 + 632) = v105;
    *(void *)(v28 + 640) = v106;
    *(void *)(v28 + 648) = v107;
    *(void *)(v28 + 656) = v108;
    *(void *)(v28 + 664) = v109;
    *(void *)(v28 + 672) = v110;
    *(void *)(v28 + 680) = v111;
    *(void *)(v28 + 688) = v206;
    *(void *)(v28 + 696) = v211;
    *(void *)(v28 + 704) = v216;
    *(void *)(v28 + 712) = v221;
    *(unsigned char *)(v28 + 720) = v226;
  }
  int v112 = *(unsigned __int8 *)(v29 + 856);
  if (v112 != 255)
  {
    uint64_t v117 = *(void *)(v29 + 736);
    *(void *)(v28 + 728) = *(void *)(v29 + 728);
    *(void *)(v28 + 736) = v117;
    uint64_t v118 = (_OWORD *)(v28 + 744);
    uint64_t v119 = (_OWORD *)(v29 + 744);
    uint64_t v120 = *(void *)(v29 + 768);
    swift_retain();
    if ((v112 & 1) == 0)
    {
      if (v120)
      {
        *(void *)(v28 + 768) = v120;
        *(void *)(v28 + 776) = *(void *)(v29 + 776);
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v120 - 8))(v28 + 744, v29 + 744, v120);
        uint64_t v121 = *(void *)(v29 + 784);
        if (v121)
        {
LABEL_64:
          uint64_t v122 = *(void *)(v29 + 792);
          *(void *)(v28 + 784) = v121;
          *(void *)(v28 + 792) = v122;
          swift_retain();
LABEL_70:
          *(void *)(v28 + 800) = *(void *)(v29 + 800);
          uint64_t v126 = (uint64_t *)(v29 + 808);
          int v127 = *(unsigned __int8 *)(v29 + 816);
          swift_bridgeObjectRetain();
          if (v127 == 255)
          {
            *(void *)(v28 + 808) = *v126;
            *(unsigned char *)(v28 + 816) = *(unsigned char *)(v29 + 816);
          }
          else
          {
            char v128 = v127 & 1;
            uint64_t v129 = *v126;
            sub_21F7637D8(v129, v128);
            *(void *)(v28 + 808) = v129;
            *(unsigned char *)(v28 + 816) = v128;
          }
          long long v130 = *(_OWORD *)(v29 + 840);
          *(_OWORD *)(v28 + 824) = *(_OWORD *)(v29 + 824);
          *(_OWORD *)(v28 + 840) = v130;
          *(unsigned char *)(v28 + 856) = 0;
          goto LABEL_80;
        }
      }
      else
      {
        long long v125 = *(_OWORD *)(v29 + 760);
        *uint64_t v118 = *v119;
        *(_OWORD *)(v28 + 760) = v125;
        *(void *)(v28 + 776) = *(void *)(v29 + 776);
        uint64_t v121 = *(void *)(v29 + 784);
        if (v121) {
          goto LABEL_64;
        }
      }
      *(_OWORD *)(v28 + 784) = *(_OWORD *)(v29 + 784);
      goto LABEL_70;
    }
    if (v120)
    {
      *(void *)(v28 + 768) = v120;
      *(void *)(v28 + 776) = *(void *)(v29 + 776);
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v120 - 8))(v28 + 744, v29 + 744, v120);
      uint64_t v123 = *(void *)(v29 + 784);
      if (v123)
      {
LABEL_67:
        uint64_t v124 = *(void *)(v29 + 792);
        *(void *)(v28 + 784) = v123;
        *(void *)(v28 + 792) = v124;
        swift_retain();
LABEL_76:
        *(void *)(v28 + 800) = *(void *)(v29 + 800);
        char v132 = (uint64_t *)(v29 + 808);
        int v133 = *(unsigned __int8 *)(v29 + 816);
        swift_bridgeObjectRetain();
        if (v133 == 255)
        {
          *(void *)(v28 + 808) = *v132;
          *(unsigned char *)(v28 + 816) = *(unsigned char *)(v29 + 816);
        }
        else
        {
          char v134 = v133 & 1;
          uint64_t v135 = *v132;
          sub_21F7637D8(v135, v134);
          *(void *)(v28 + 808) = v135;
          *(unsigned char *)(v28 + 816) = v134;
        }
        long long v136 = *(_OWORD *)(v29 + 840);
        *(_OWORD *)(v28 + 824) = *(_OWORD *)(v29 + 824);
        *(_OWORD *)(v28 + 840) = v136;
        *(unsigned char *)(v28 + 856) = 1;
        goto LABEL_80;
      }
    }
    else
    {
      long long v131 = *(_OWORD *)(v29 + 760);
      *uint64_t v118 = *v119;
      *(_OWORD *)(v28 + 760) = v131;
      *(void *)(v28 + 776) = *(void *)(v29 + 776);
      uint64_t v123 = *(void *)(v29 + 784);
      if (v123) {
        goto LABEL_67;
      }
    }
    *(_OWORD *)(v28 + 784) = *(_OWORD *)(v29 + 784);
    goto LABEL_76;
  }
  long long v113 = *(_OWORD *)(v29 + 840);
  *(_OWORD *)(v28 + 824) = *(_OWORD *)(v29 + 824);
  *(_OWORD *)(v28 + 840) = v113;
  *(unsigned char *)(v28 + 856) = *(unsigned char *)(v29 + 856);
  long long v114 = *(_OWORD *)(v29 + 776);
  *(_OWORD *)(v28 + 760) = *(_OWORD *)(v29 + 760);
  *(_OWORD *)(v28 + 776) = v114;
  long long v115 = *(_OWORD *)(v29 + 808);
  *(_OWORD *)(v28 + 792) = *(_OWORD *)(v29 + 792);
  *(_OWORD *)(v28 + 808) = v115;
  long long v116 = *(_OWORD *)(v29 + 744);
  *(_OWORD *)(v28 + 728) = *(_OWORD *)(v29 + 728);
  *(_OWORD *)(v28 + 744) = v116;
LABEL_80:
  int v137 = *(unsigned __int8 *)(v29 + 968);
  if (v137 == 255)
  {
    long long v138 = *(_OWORD *)(v29 + 944);
    *(_OWORD *)(v28 + 928) = *(_OWORD *)(v29 + 928);
    *(_OWORD *)(v28 + 944) = v138;
    *(_OWORD *)(v28 + 953) = *(_OWORD *)(v29 + 953);
    long long v139 = *(_OWORD *)(v29 + 880);
    *(_OWORD *)(v28 + 864) = *(_OWORD *)(v29 + 864);
    *(_OWORD *)(v28 + 880) = v139;
    long long v140 = *(_OWORD *)(v29 + 912);
    *(_OWORD *)(v28 + 896) = *(_OWORD *)(v29 + 896);
    *(_OWORD *)(v28 + 912) = v140;
  }
  else
  {
    char v227 = v137 & 1;
    uint64_t v141 = *(void *)(v29 + 864);
    uint64_t v142 = *(void *)(v29 + 872);
    uint64_t v143 = *(void *)(v29 + 880);
    uint64_t v144 = *(void *)(v29 + 888);
    uint64_t v145 = *(void *)(v29 + 896);
    uint64_t v146 = *(void *)(v29 + 904);
    uint64_t v147 = *(void *)(v29 + 912);
    uint64_t v148 = *(void *)(v29 + 920);
    uint64_t v202 = *(void *)(v29 + 928);
    uint64_t v207 = *(void *)(v29 + 936);
    uint64_t v212 = *(void *)(v29 + 944);
    uint64_t v217 = *(void *)(v29 + 952);
    uint64_t v222 = *(void *)(v29 + 960);
    sub_21F764268(v141, v142, v143, v144, v145, v146, v147, v148, v202);
    *(void *)(v28 + 864) = v141;
    *(void *)(v28 + 872) = v142;
    *(void *)(v28 + 880) = v143;
    *(void *)(v28 + 888) = v144;
    *(void *)(v28 + 896) = v145;
    *(void *)(v28 + 904) = v146;
    *(void *)(v28 + 912) = v147;
    *(void *)(v28 + 920) = v148;
    *(void *)(v28 + 928) = v202;
    *(void *)(v28 + 936) = v207;
    *(void *)(v28 + 944) = v212;
    *(void *)(v28 + 952) = v217;
    *(void *)(v28 + 960) = v222;
    *(unsigned char *)(v28 + 968) = v227;
  }
  int v149 = *(unsigned __int8 *)(v29 + 1104);
  if (v149 == 255)
  {
    long long v150 = *(_OWORD *)(v29 + 1088);
    *(_OWORD *)(v28 + 1072) = *(_OWORD *)(v29 + 1072);
    *(_OWORD *)(v28 + 1088) = v150;
    *(unsigned char *)(v28 + 1104) = *(unsigned char *)(v29 + 1104);
    long long v151 = *(_OWORD *)(v29 + 1024);
    *(_OWORD *)(v28 + 1008) = *(_OWORD *)(v29 + 1008);
    *(_OWORD *)(v28 + 1024) = v151;
    long long v152 = *(_OWORD *)(v29 + 1056);
    *(_OWORD *)(v28 + 1040) = *(_OWORD *)(v29 + 1040);
    *(_OWORD *)(v28 + 1056) = v152;
    long long v153 = *(_OWORD *)(v29 + 992);
    *(_OWORD *)(v28 + 976) = *(_OWORD *)(v29 + 976);
    *(_OWORD *)(v28 + 992) = v153;
  }
  else
  {
    char v228 = v149 & 1;
    uint64_t v154 = *(void *)(v29 + 976);
    uint64_t v155 = *(void *)(v29 + 984);
    uint64_t v156 = *(void *)(v29 + 992);
    uint64_t v157 = *(void *)(v29 + 1000);
    uint64_t v158 = *(void *)(v29 + 1008);
    uint64_t v159 = *(void *)(v29 + 1016);
    uint64_t v160 = *(void *)(v29 + 1024);
    uint64_t v161 = *(void *)(v29 + 1032);
    uint64_t v197 = *(void *)(v29 + 1040);
    uint64_t v198 = *(void *)(v29 + 1048);
    uint64_t v199 = *(void *)(v29 + 1056);
    uint64_t v203 = *(void *)(v29 + 1064);
    uint64_t v208 = *(void *)(v29 + 1072);
    uint64_t v213 = *(void *)(v29 + 1080);
    uint64_t v218 = *(void *)(v29 + 1088);
    uint64_t v223 = *(void *)(v29 + 1096);
    sub_21F7E0C30(v154, v155, v156, v157, v158, v159, v160, v161, v197, v198, v199, v203);
    *(void *)(v28 + 976) = v154;
    *(void *)(v28 + 984) = v155;
    *(void *)(v28 + 992) = v156;
    *(void *)(v28 + 1000) = v157;
    *(void *)(v28 + 1008) = v158;
    *(void *)(v28 + 1016) = v159;
    *(void *)(v28 + 1024) = v160;
    *(void *)(v28 + 1032) = v161;
    *(void *)(v28 + 1040) = v197;
    *(void *)(v28 + 1048) = v198;
    *(void *)(v28 + 1056) = v199;
    *(void *)(v28 + 1064) = v203;
    *(void *)(v28 + 1072) = v208;
    *(void *)(v28 + 1080) = v213;
    *(void *)(v28 + 1088) = v218;
    *(void *)(v28 + 1096) = v223;
    *(unsigned char *)(v28 + 1104) = v228;
  }
  unint64_t v25 = v231;
  *(_OWORD *)(v28 + 1112) = *(_OWORD *)(v29 + 1112);
  *(_OWORD *)(v28 + 1128) = *(_OWORD *)(v29 + 1128);
  *(unsigned char *)(v28 + 1144) = *(unsigned char *)(v29 + 1144);
  *(_OWORD *)(v28 + 1152) = *(_OWORD *)(v29 + 1152);
  *(_OWORD *)(v28 + 1168) = *(_OWORD *)(v29 + 1168);
  uint64_t v162 = (int *)type metadata accessor for ChartModel.Scenegraph();
  v229(v28 + v162[14], v29 + v162[14], v230);
  *(void *)(v28 + v162[15]) = *(void *)(v29 + v162[15]);
  *(void *)(v28 + v162[16]) = *(void *)(v29 + v162[16]);
  uint64_t v163 = v162[17];
  uint64_t v164 = v28 + v163;
  uint64_t v165 = v29 + v163;
  int v166 = *(unsigned __int8 *)(v29 + v163 + 40);
  swift_retain();
  swift_retain();
  if (v166 == 255)
  {
    long long v167 = *(_OWORD *)(v165 + 16);
    *(_OWORD *)uint64_t v164 = *(_OWORD *)v165;
    *(_OWORD *)(v164 + 16) = v167;
    *(_OWORD *)(v164 + 25) = *(_OWORD *)(v165 + 25);
  }
  else
  {
    long long v168 = *(_OWORD *)(v165 + 24);
    *(_OWORD *)(v164 + 24) = v168;
    (**(void (***)(uint64_t, uint64_t))(v168 - 8))(v164, v165);
    *(unsigned char *)(v164 + 40) = (v166 & 1) != 0;
  }
  uint64_t v169 = (_OWORD *)(v164 + 48);
  long long v170 = (_OWORD *)(v165 + 48);
  int v171 = *(unsigned __int8 *)(v165 + 88);
  if (v171 == 255)
  {
    long long v172 = *(_OWORD *)(v165 + 64);
    *uint64_t v169 = *v170;
    *(_OWORD *)(v164 + 64) = v172;
    *(_OWORD *)(v164 + 73) = *(_OWORD *)(v165 + 73);
  }
  else
  {
    long long v173 = *(_OWORD *)(v165 + 72);
    *(_OWORD *)(v164 + 72) = v173;
    (**(void (***)(_OWORD *, _OWORD *))(v173 - 8))(v169, v170);
    *(unsigned char *)(v164 + 88) = (v171 & 1) != 0;
  }
  uint64_t v174 = (_OWORD *)(v164 + 96);
  long long v175 = (_OWORD *)(v165 + 96);
  int v176 = *(unsigned __int8 *)(v165 + 136);
  if (v176 == 255)
  {
    long long v177 = *(_OWORD *)(v165 + 112);
    *uint64_t v174 = *v175;
    *(_OWORD *)(v164 + 112) = v177;
    *(_OWORD *)(v164 + 121) = *(_OWORD *)(v165 + 121);
  }
  else
  {
    long long v178 = *(_OWORD *)(v165 + 120);
    *(_OWORD *)(v164 + 120) = v178;
    (**(void (***)(_OWORD *, _OWORD *))(v178 - 8))(v174, v175);
    *(unsigned char *)(v164 + 136) = (v176 & 1) != 0;
  }
  uint64_t v179 = (_OWORD *)(v164 + 144);
  uint64_t v180 = (_OWORD *)(v165 + 144);
  int v181 = *(unsigned __int8 *)(v165 + 184);
  if (v181 == 255)
  {
    long long v182 = *(_OWORD *)(v165 + 160);
    *uint64_t v179 = *v180;
    *(_OWORD *)(v164 + 160) = v182;
    *(_OWORD *)(v164 + 169) = *(_OWORD *)(v165 + 169);
  }
  else
  {
    long long v183 = *(_OWORD *)(v165 + 168);
    *(_OWORD *)(v164 + 168) = v183;
    (**(void (***)(_OWORD *, _OWORD *))(v183 - 8))(v179, v180);
    *(unsigned char *)(v164 + 184) = (v181 & 1) != 0;
  }
  uint64_t v184 = (_OWORD *)(v164 + 192);
  uint64_t v185 = (_OWORD *)(v165 + 192);
  int v186 = *(unsigned __int8 *)(v165 + 232);
  if (v186 == 255)
  {
    long long v187 = *(_OWORD *)(v165 + 208);
    _OWORD *v184 = *v185;
    *(_OWORD *)(v164 + 208) = v187;
    *(_OWORD *)(v164 + 217) = *(_OWORD *)(v165 + 217);
  }
  else
  {
    long long v188 = *(_OWORD *)(v165 + 216);
    *(_OWORD *)(v164 + 216) = v188;
    (**(void (***)(_OWORD *, _OWORD *))(v188 - 8))(v184, v185);
    *(unsigned char *)(v164 + 232) = (v186 & 1) != 0;
  }
  uint64_t v189 = (_OWORD *)(v164 + 240);
  uint64_t v190 = (_OWORD *)(v165 + 240);
  int v191 = *(unsigned __int8 *)(v165 + 280);
  if (v191 == 255)
  {
    long long v192 = *(_OWORD *)(v165 + 256);
    _OWORD *v189 = *v190;
    *(_OWORD *)(v164 + 256) = v192;
    *(_OWORD *)(v164 + 265) = *(_OWORD *)(v165 + 265);
  }
  else
  {
    uint64_t v193 = *(void *)(v165 + 264);
    uint64_t v194 = *(void *)(v165 + 272);
    *(void *)(v164 + 264) = v193;
    *(void *)(v164 + 272) = v194;
    (**(void (***)(_OWORD *, _OWORD *))(v193 - 8))(v189, v190);
    uint64_t v195 = (BOOL *)(v164 + 280);
    *uint64_t v195 = (v191 & 1) != 0;
  }
  *(_WORD *)(v164 + 281) = *(_WORD *)(v165 + 281);
  return v25;
}

uint64_t sub_21FA0D8A0(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v7 = a3[7];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  uint64_t v10 = sub_21FA24970();
  char v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v13 = (_OWORD *)(a1 + v12);
  uint64_t v14 = (_OWORD *)(a2 + v12);
  long long v15 = v14[3];
  void v13[2] = v14[2];
  v13[3] = v15;
  _DWORD v13[4] = v14[4];
  long long v16 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v16;
  uint64_t v17 = a3[10];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  long long v20 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16) = v20;
  memcpy((void *)(a1 + v17 + 32), (const void *)(v19 + 32), 0x170uLL);
  memcpy((void *)(v18 + 400), (const void *)(v19 + 400), 0x2C1uLL);
  *(_OWORD *)(v18 + 1112) = *(_OWORD *)(v19 + 1112);
  *(_OWORD *)(v18 + 1128) = *(_OWORD *)(v19 + 1128);
  *(unsigned char *)(v18 + 1144) = *(unsigned char *)(v19 + 1144);
  *(_OWORD *)(v18 + 1152) = *(_OWORD *)(v19 + 1152);
  *(_OWORD *)(v18 + 1168) = *(_OWORD *)(v19 + 1168);
  uint64_t v21 = (int *)type metadata accessor for ChartModel.Scenegraph();
  v11(v18 + v21[14], v19 + v21[14], v10);
  *(void *)(v18 + v21[15]) = *(void *)(v19 + v21[15]);
  *(void *)(v18 + v21[16]) = *(void *)(v19 + v21[16]);
  memcpy((void *)(v18 + v21[17]), (const void *)(v19 + v21[17]), 0x11BuLL);
  return a1;
}

uint64_t sub_21FA0DA4C(uint64_t a1, uint64_t a2, int *a3)
{
  char v6 = *(unsigned char *)(a2 + 32);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  char v11 = *(unsigned char *)(a1 + 32);
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(unsigned char *)(a1 + 32) = v6;
  sub_21F77580C(v7, v8, v9, v10, v11);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = sub_21FA24970();
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 40);
  v17(v14, v15, v16);
  uint64_t v18 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v19 = a1 + v18;
  *(unsigned char *)uint64_t v19 = *(unsigned char *)(a2 + v18);
  *(void *)(v19 + 8) = *(void *)(a2 + v18 + 8);
  *(unsigned char *)(v19 + 16) = *(unsigned char *)(a2 + v18 + 16);
  *(void *)(v19 + 24) = *(void *)(a2 + v18 + 24);
  *(unsigned char *)(v19 + 32) = *(unsigned char *)(a2 + v18 + 32);
  uint64_t v20 = a1 + v18 + 40;
  uint64_t v21 = a2 + v18 + 40;
  if (*(void *)(a1 + v18 + 64))
  {
    if (*(void *)(a2 + v18 + 64)) {
      _s6Charts15AnyChartContentVwxx_0(v20);
    }
    else {
      sub_21F7AC0D8(v20);
    }
  }
  long long v22 = *(_OWORD *)(v21 + 16);
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
  *(_OWORD *)(v20 + 16) = v22;
  *(void *)(v20 + 32) = *(void *)(v21 + 32);
  uint64_t v23 = a3[10];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  *(_OWORD *)(a1 + v23) = *(_OWORD *)(a2 + v23);
  swift_release();
  *(void *)(v24 + 16) = *(void *)(v25 + 16);
  swift_release();
  *(void *)(v24 + 24) = *(void *)(v25 + 24);
  swift_release();
  if (a1 != a2)
  {
    sub_21F76CA84(v24 + 32, &qword_26AD4A218);
    memcpy((void *)(v24 + 32), (const void *)(v25 + 32), 0x11CuLL);
  }
  *(unsigned char *)(v24 + 316) = *(unsigned char *)(v25 + 316);
  uint64_t v26 = *(void *)(v25 + 320);
  if (*(void *)(v24 + 320))
  {
    if (v26)
    {
      uint64_t v27 = *(void *)(v25 + 328);
      *(void *)(v24 + 320) = v26;
      *(void *)(v24 + 328) = v27;
      swift_release();
      goto LABEL_14;
    }
    swift_release();
  }
  else if (v26)
  {
    uint64_t v28 = *(void *)(v25 + 328);
    *(void *)(v24 + 320) = v26;
    *(void *)(v24 + 328) = v28;
    goto LABEL_14;
  }
  *(_OWORD *)(v24 + 320) = *(_OWORD *)(v25 + 320);
LABEL_14:
  uint64_t v29 = *(void *)(v25 + 336);
  if (*(void *)(v24 + 336))
  {
    if (v29)
    {
      uint64_t v30 = *(void *)(v25 + 344);
      *(void *)(v24 + 336) = v29;
      *(void *)(v24 + 344) = v30;
      swift_release();
      goto LABEL_21;
    }
    swift_release();
  }
  else if (v29)
  {
    uint64_t v31 = *(void *)(v25 + 344);
    *(void *)(v24 + 336) = v29;
    *(void *)(v24 + 344) = v31;
    goto LABEL_21;
  }
  *(_OWORD *)(v24 + 336) = *(_OWORD *)(v25 + 336);
LABEL_21:
  uint64_t v32 = *(void *)(v25 + 352);
  if (*(void *)(v24 + 352))
  {
    if (v32)
    {
      uint64_t v33 = *(void *)(v25 + 360);
      *(void *)(v24 + 352) = v32;
      *(void *)(v24 + 360) = v33;
      swift_release();
      goto LABEL_28;
    }
    swift_release();
  }
  else if (v32)
  {
    uint64_t v34 = *(void *)(v25 + 360);
    *(void *)(v24 + 352) = v32;
    *(void *)(v24 + 360) = v34;
    goto LABEL_28;
  }
  *(_OWORD *)(v24 + 352) = *(_OWORD *)(v25 + 352);
LABEL_28:
  uint64_t v35 = *(void *)(v25 + 368);
  if (*(void *)(v24 + 368))
  {
    if (v35)
    {
      uint64_t v36 = *(void *)(v25 + 376);
      *(void *)(v24 + 368) = v35;
      *(void *)(v24 + 376) = v36;
      swift_release();
      goto LABEL_35;
    }
    swift_release();
  }
  else if (v35)
  {
    uint64_t v37 = *(void *)(v25 + 376);
    *(void *)(v24 + 368) = v35;
    *(void *)(v24 + 376) = v37;
    goto LABEL_35;
  }
  *(_OWORD *)(v24 + 368) = *(_OWORD *)(v25 + 368);
LABEL_35:
  uint64_t v38 = *(void *)(v25 + 384);
  if (*(void *)(v24 + 384))
  {
    if (v38)
    {
      uint64_t v39 = *(void *)(v25 + 392);
      *(void *)(v24 + 384) = v38;
      *(void *)(v24 + 392) = v39;
      swift_release();
      goto LABEL_42;
    }
    swift_release();
  }
  else if (v38)
  {
    uint64_t v40 = *(void *)(v25 + 392);
    *(void *)(v24 + 384) = v38;
    *(void *)(v24 + 392) = v40;
    goto LABEL_42;
  }
  *(_OWORD *)(v24 + 384) = *(_OWORD *)(v25 + 384);
LABEL_42:
  if (*(unsigned __int8 *)(v24 + 504) == 255)
  {
LABEL_45:
    long long v42 = *(_OWORD *)(v25 + 480);
    *(_OWORD *)(v24 + 464) = *(_OWORD *)(v25 + 464);
    *(_OWORD *)(v24 + 480) = v42;
    *(_OWORD *)(v24 + 489) = *(_OWORD *)(v25 + 489);
    long long v43 = *(_OWORD *)(v25 + 416);
    *(_OWORD *)(v24 + 400) = *(_OWORD *)(v25 + 400);
    *(_OWORD *)(v24 + 416) = v43;
    long long v44 = *(_OWORD *)(v25 + 448);
    *(_OWORD *)(v24 + 432) = *(_OWORD *)(v25 + 432);
    *(_OWORD *)(v24 + 448) = v44;
    goto LABEL_47;
  }
  int v41 = *(unsigned __int8 *)(v25 + 504);
  if (v41 == 255)
  {
    sub_21F76CA84(v24 + 400, &qword_26AD47AB8);
    goto LABEL_45;
  }
  uint64_t v45 = *(void *)(v25 + 496);
  uint64_t v46 = *(void *)(v24 + 400);
  uint64_t v47 = *(void *)(v24 + 408);
  uint64_t v48 = *(void *)(v24 + 416);
  uint64_t v49 = *(void *)(v24 + 424);
  uint64_t v50 = *(void *)(v24 + 432);
  uint64_t v51 = *(void *)(v24 + 440);
  uint64_t v52 = *(void *)(v24 + 448);
  uint64_t v53 = *(void *)(v24 + 456);
  long long v54 = *(_OWORD *)(v24 + 464);
  long long v55 = *(_OWORD *)(v25 + 416);
  *(_OWORD *)(v24 + 400) = *(_OWORD *)(v25 + 400);
  *(_OWORD *)(v24 + 416) = v55;
  long long v56 = *(_OWORD *)(v25 + 448);
  *(_OWORD *)(v24 + 432) = *(_OWORD *)(v25 + 432);
  *(_OWORD *)(v24 + 448) = v56;
  long long v57 = *(_OWORD *)(v25 + 480);
  *(_OWORD *)(v24 + 464) = *(_OWORD *)(v25 + 464);
  *(_OWORD *)(v24 + 480) = v57;
  *(void *)(v24 + 496) = v45;
  *(unsigned char *)(v24 + 504) = v41 & 1;
  sub_21F76D570(v46, v47, v48, v49, v50, v51, v52, v53, v54);
LABEL_47:
  if (*(unsigned __int8 *)(v24 + 616) == 255)
  {
LABEL_50:
    long long v59 = *(_OWORD *)(v25 + 592);
    *(_OWORD *)(v24 + 576) = *(_OWORD *)(v25 + 576);
    *(_OWORD *)(v24 + 592) = v59;
    *(_OWORD *)(v24 + 601) = *(_OWORD *)(v25 + 601);
    long long v60 = *(_OWORD *)(v25 + 528);
    *(_OWORD *)(v24 + 512) = *(_OWORD *)(v25 + 512);
    *(_OWORD *)(v24 + 528) = v60;
    long long v61 = *(_OWORD *)(v25 + 560);
    *(_OWORD *)(v24 + 544) = *(_OWORD *)(v25 + 544);
    *(_OWORD *)(v24 + 560) = v61;
    goto LABEL_52;
  }
  int v58 = *(unsigned __int8 *)(v25 + 616);
  if (v58 == 255)
  {
    sub_21F76CA84(v24 + 512, &qword_26AD47AB8);
    goto LABEL_50;
  }
  uint64_t v62 = *(void *)(v25 + 608);
  uint64_t v63 = *(void *)(v24 + 512);
  uint64_t v64 = *(void *)(v24 + 520);
  uint64_t v65 = *(void *)(v24 + 528);
  uint64_t v66 = *(void *)(v24 + 536);
  uint64_t v67 = *(void *)(v24 + 544);
  uint64_t v68 = *(void *)(v24 + 552);
  uint64_t v69 = *(void *)(v24 + 560);
  uint64_t v70 = *(void *)(v24 + 568);
  long long v71 = *(_OWORD *)(v24 + 576);
  long long v72 = *(_OWORD *)(v25 + 528);
  *(_OWORD *)(v24 + 512) = *(_OWORD *)(v25 + 512);
  *(_OWORD *)(v24 + 528) = v72;
  long long v73 = *(_OWORD *)(v25 + 560);
  *(_OWORD *)(v24 + 544) = *(_OWORD *)(v25 + 544);
  *(_OWORD *)(v24 + 560) = v73;
  long long v74 = *(_OWORD *)(v25 + 592);
  *(_OWORD *)(v24 + 576) = *(_OWORD *)(v25 + 576);
  *(_OWORD *)(v24 + 592) = v74;
  *(void *)(v24 + 608) = v62;
  *(unsigned char *)(v24 + 616) = v58 & 1;
  sub_21F76D570(v63, v64, v65, v66, v67, v68, v69, v70, v71);
LABEL_52:
  if (*(unsigned __int8 *)(v24 + 720) == 255)
  {
LABEL_55:
    long long v76 = *(_OWORD *)(v25 + 704);
    *(_OWORD *)(v24 + 688) = *(_OWORD *)(v25 + 688);
    *(_OWORD *)(v24 + 704) = v76;
    *(unsigned char *)(v24 + 720) = *(unsigned char *)(v25 + 720);
    long long v77 = *(_OWORD *)(v25 + 640);
    *(_OWORD *)(v24 + 624) = *(_OWORD *)(v25 + 624);
    *(_OWORD *)(v24 + 640) = v77;
    long long v78 = *(_OWORD *)(v25 + 672);
    *(_OWORD *)(v24 + 656) = *(_OWORD *)(v25 + 656);
    *(_OWORD *)(v24 + 672) = v78;
    goto LABEL_57;
  }
  int v75 = *(unsigned __int8 *)(v25 + 720);
  if (v75 == 255)
  {
    sub_21F76CA84(v24 + 624, qword_26AD44A50);
    goto LABEL_55;
  }
  uint64_t v79 = *(void *)(v24 + 624);
  uint64_t v80 = *(void *)(v24 + 632);
  uint64_t v81 = *(void *)(v24 + 640);
  uint64_t v82 = *(void *)(v24 + 648);
  uint64_t v83 = *(void *)(v24 + 656);
  uint64_t v84 = *(void *)(v24 + 664);
  uint64_t v85 = *(void *)(v24 + 672);
  uint64_t v86 = *(void *)(v24 + 680);
  long long v87 = *(_OWORD *)(v25 + 640);
  *(_OWORD *)(v24 + 624) = *(_OWORD *)(v25 + 624);
  *(_OWORD *)(v24 + 640) = v87;
  long long v88 = *(_OWORD *)(v25 + 672);
  *(_OWORD *)(v24 + 656) = *(_OWORD *)(v25 + 656);
  *(_OWORD *)(v24 + 672) = v88;
  long long v89 = *(_OWORD *)(v25 + 704);
  *(_OWORD *)(v24 + 688) = *(_OWORD *)(v25 + 688);
  *(_OWORD *)(v24 + 704) = v89;
  *(unsigned char *)(v24 + 720) = v75 & 1;
  sub_21F7E0B38(v79, v80, v81, v82, v83, v84, v85, v86);
LABEL_57:
  if (*(unsigned __int8 *)(v24 + 856) == 255)
  {
LABEL_61:
    long long v90 = *(_OWORD *)(v25 + 840);
    *(_OWORD *)(v24 + 824) = *(_OWORD *)(v25 + 824);
    *(_OWORD *)(v24 + 840) = v90;
    *(unsigned char *)(v24 + 856) = *(unsigned char *)(v25 + 856);
    long long v91 = *(_OWORD *)(v25 + 776);
    *(_OWORD *)(v24 + 760) = *(_OWORD *)(v25 + 760);
    *(_OWORD *)(v24 + 776) = v91;
    long long v92 = *(_OWORD *)(v25 + 808);
    *(_OWORD *)(v24 + 792) = *(_OWORD *)(v25 + 792);
    *(_OWORD *)(v24 + 808) = v92;
    long long v93 = *(_OWORD *)(v25 + 744);
    *(_OWORD *)(v24 + 728) = *(_OWORD *)(v25 + 728);
    *(_OWORD *)(v24 + 744) = v93;
    goto LABEL_62;
  }
  if (*(unsigned __int8 *)(v25 + 856) == 255 || a1 != a2)
  {
    sub_21F76CA84(v24 + 728, &qword_267EE74F0);
    goto LABEL_61;
  }
LABEL_62:
  if (*(unsigned __int8 *)(v24 + 968) == 255)
  {
LABEL_65:
    long long v95 = *(_OWORD *)(v25 + 944);
    *(_OWORD *)(v24 + 928) = *(_OWORD *)(v25 + 928);
    *(_OWORD *)(v24 + 944) = v95;
    *(_OWORD *)(v24 + 953) = *(_OWORD *)(v25 + 953);
    long long v96 = *(_OWORD *)(v25 + 880);
    *(_OWORD *)(v24 + 864) = *(_OWORD *)(v25 + 864);
    *(_OWORD *)(v24 + 880) = v96;
    long long v97 = *(_OWORD *)(v25 + 912);
    *(_OWORD *)(v24 + 896) = *(_OWORD *)(v25 + 896);
    *(_OWORD *)(v24 + 912) = v97;
    goto LABEL_67;
  }
  int v94 = *(unsigned __int8 *)(v25 + 968);
  if (v94 == 255)
  {
    sub_21F76CA84(v24 + 864, &qword_26AD47AB8);
    goto LABEL_65;
  }
  uint64_t v98 = *(void *)(v25 + 960);
  uint64_t v99 = *(void *)(v24 + 864);
  uint64_t v100 = *(void *)(v24 + 872);
  uint64_t v101 = *(void *)(v24 + 880);
  uint64_t v102 = *(void *)(v24 + 888);
  uint64_t v103 = *(void *)(v24 + 896);
  uint64_t v104 = *(void *)(v24 + 904);
  uint64_t v105 = *(void *)(v24 + 912);
  uint64_t v106 = *(void *)(v24 + 920);
  long long v107 = *(_OWORD *)(v24 + 928);
  long long v108 = *(_OWORD *)(v25 + 880);
  *(_OWORD *)(v24 + 864) = *(_OWORD *)(v25 + 864);
  *(_OWORD *)(v24 + 880) = v108;
  long long v109 = *(_OWORD *)(v25 + 912);
  *(_OWORD *)(v24 + 896) = *(_OWORD *)(v25 + 896);
  *(_OWORD *)(v24 + 912) = v109;
  long long v110 = *(_OWORD *)(v25 + 944);
  *(_OWORD *)(v24 + 928) = *(_OWORD *)(v25 + 928);
  *(_OWORD *)(v24 + 944) = v110;
  *(void *)(v24 + 960) = v98;
  *(unsigned char *)(v24 + 968) = v94 & 1;
  sub_21F76D570(v99, v100, v101, v102, v103, v104, v105, v106, v107);
LABEL_67:
  if (*(unsigned __int8 *)(v24 + 1104) == 255)
  {
LABEL_70:
    long long v112 = *(_OWORD *)(v25 + 1088);
    *(_OWORD *)(v24 + 1072) = *(_OWORD *)(v25 + 1072);
    *(_OWORD *)(v24 + 1088) = v112;
    *(unsigned char *)(v24 + 1104) = *(unsigned char *)(v25 + 1104);
    long long v113 = *(_OWORD *)(v25 + 1024);
    *(_OWORD *)(v24 + 1008) = *(_OWORD *)(v25 + 1008);
    *(_OWORD *)(v24 + 1024) = v113;
    long long v114 = *(_OWORD *)(v25 + 1056);
    *(_OWORD *)(v24 + 1040) = *(_OWORD *)(v25 + 1040);
    *(_OWORD *)(v24 + 1056) = v114;
    long long v115 = *(_OWORD *)(v25 + 992);
    *(_OWORD *)(v24 + 976) = *(_OWORD *)(v25 + 976);
    *(_OWORD *)(v24 + 992) = v115;
    goto LABEL_72;
  }
  int v111 = *(unsigned __int8 *)(v25 + 1104);
  if (v111 == 255)
  {
    sub_21F76CA84(v24 + 976, &qword_267EE74E8);
    goto LABEL_70;
  }
  uint64_t v116 = *(void *)(v24 + 976);
  uint64_t v117 = *(void *)(v24 + 984);
  uint64_t v118 = *(void *)(v24 + 992);
  uint64_t v119 = *(void *)(v24 + 1000);
  uint64_t v120 = *(void *)(v24 + 1008);
  uint64_t v121 = *(void *)(v24 + 1016);
  uint64_t v122 = *(void *)(v24 + 1024);
  uint64_t v123 = *(void *)(v24 + 1032);
  long long v124 = *(_OWORD *)(v24 + 1040);
  long long v125 = *(_OWORD *)(v24 + 1056);
  long long v126 = *(_OWORD *)(v25 + 992);
  *(_OWORD *)(v24 + 976) = *(_OWORD *)(v25 + 976);
  *(_OWORD *)(v24 + 992) = v126;
  long long v127 = *(_OWORD *)(v25 + 1024);
  *(_OWORD *)(v24 + 1008) = *(_OWORD *)(v25 + 1008);
  *(_OWORD *)(v24 + 1024) = v127;
  *(_OWORD *)(v24 + 1040) = *(_OWORD *)(v25 + 1040);
  *(_OWORD *)(v24 + 1056) = *(_OWORD *)(v25 + 1056);
  *(_OWORD *)(v24 + 1072) = *(_OWORD *)(v25 + 1072);
  *(_OWORD *)(v24 + 1088) = *(_OWORD *)(v25 + 1088);
  *(unsigned char *)(v24 + 1104) = v111 & 1;
  sub_21F7E0CA8(v116, v117, v118, v119, v120, v121, v122, v123, v124, *((uint64_t *)&v124 + 1), v125, BYTE8(v125));
LABEL_72:
  *(void *)(v24 + 1112) = *(void *)(v25 + 1112);
  *(_OWORD *)(v24 + 1120) = *(_OWORD *)(v25 + 1120);
  *(void *)(v24 + 1136) = *(void *)(v25 + 1136);
  *(unsigned char *)(v24 + 1144) = *(unsigned char *)(v25 + 1144);
  *(_OWORD *)(v24 + 1152) = *(_OWORD *)(v25 + 1152);
  *(_OWORD *)(v24 + 1168) = *(_OWORD *)(v25 + 1168);
  char v128 = (int *)type metadata accessor for ChartModel.Scenegraph();
  v17(v24 + v128[14], v25 + v128[14], v16);
  *(void *)(v24 + v128[15]) = *(void *)(v25 + v128[15]);
  swift_release();
  *(void *)(v24 + v128[16]) = *(void *)(v25 + v128[16]);
  swift_release();
  uint64_t v129 = v128[17];
  uint64_t v130 = v24 + v129;
  uint64_t v131 = v25 + v129;
  if (*(unsigned __int8 *)(v24 + v129 + 40) == 255)
  {
LABEL_76:
    long long v132 = *(_OWORD *)(v131 + 16);
    *(_OWORD *)uint64_t v130 = *(_OWORD *)v131;
    *(_OWORD *)(v130 + 16) = v132;
    *(_OWORD *)(v130 + 25) = *(_OWORD *)(v131 + 25);
    goto LABEL_77;
  }
  if (*(unsigned __int8 *)(v131 + 40) == 255 || a1 != a2)
  {
    sub_21F7B25D8(v130);
    goto LABEL_76;
  }
LABEL_77:
  if (*(unsigned __int8 *)(v130 + 88) == 255)
  {
LABEL_81:
    long long v133 = *(_OWORD *)(v131 + 64);
    *(_OWORD *)(v130 + 48) = *(_OWORD *)(v131 + 48);
    *(_OWORD *)(v130 + 64) = v133;
    *(_OWORD *)(v130 + 73) = *(_OWORD *)(v131 + 73);
    goto LABEL_82;
  }
  if (*(unsigned __int8 *)(v131 + 88) == 255 || a1 != a2)
  {
    sub_21F7B26E4(v130 + 48);
    goto LABEL_81;
  }
LABEL_82:
  if (*(unsigned __int8 *)(v130 + 136) == 255)
  {
LABEL_86:
    long long v134 = *(_OWORD *)(v131 + 112);
    *(_OWORD *)(v130 + 96) = *(_OWORD *)(v131 + 96);
    *(_OWORD *)(v130 + 112) = v134;
    *(_OWORD *)(v130 + 121) = *(_OWORD *)(v131 + 121);
    goto LABEL_87;
  }
  if (*(unsigned __int8 *)(v131 + 136) == 255 || a1 != a2)
  {
    sub_21F7B25D8(v130 + 96);
    goto LABEL_86;
  }
LABEL_87:
  if (*(unsigned __int8 *)(v130 + 184) == 255)
  {
LABEL_91:
    long long v135 = *(_OWORD *)(v131 + 160);
    *(_OWORD *)(v130 + 144) = *(_OWORD *)(v131 + 144);
    *(_OWORD *)(v130 + 160) = v135;
    *(_OWORD *)(v130 + 169) = *(_OWORD *)(v131 + 169);
    goto LABEL_92;
  }
  if (*(unsigned __int8 *)(v131 + 184) == 255 || a1 != a2)
  {
    sub_21F7B26E4(v130 + 144);
    goto LABEL_91;
  }
LABEL_92:
  if (*(unsigned __int8 *)(v130 + 232) == 255)
  {
LABEL_96:
    long long v136 = *(_OWORD *)(v131 + 208);
    *(_OWORD *)(v130 + 192) = *(_OWORD *)(v131 + 192);
    *(_OWORD *)(v130 + 208) = v136;
    *(_OWORD *)(v130 + 217) = *(_OWORD *)(v131 + 217);
    goto LABEL_97;
  }
  if (*(unsigned __int8 *)(v131 + 232) == 255 || a1 != a2)
  {
    sub_21F7B25D8(v130 + 192);
    goto LABEL_96;
  }
LABEL_97:
  if (*(unsigned __int8 *)(v130 + 280) == 255)
  {
LABEL_101:
    long long v137 = *(_OWORD *)(v131 + 256);
    *(_OWORD *)(v130 + 240) = *(_OWORD *)(v131 + 240);
    *(_OWORD *)(v130 + 256) = v137;
    *(_OWORD *)(v130 + 265) = *(_OWORD *)(v131 + 265);
    goto LABEL_102;
  }
  if (*(unsigned __int8 *)(v131 + 280) == 255 || a1 != a2)
  {
    sub_21F7B26E4(v130 + 240);
    goto LABEL_101;
  }
LABEL_102:
  *(unsigned char *)(v130 + 281) = *(unsigned char *)(v131 + 281);
  *(unsigned char *)(v130 + 282) = *(unsigned char *)(v131 + 282);
  return a1;
}

uint64_t sub_21FA0E3DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_21FA24970();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + a3[7];
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else if (a2 == 2147483646)
  {
    unint64_t v12 = *(void *)(a1 + a3[9] + 64);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    int v13 = v12 - 1;
    if (v13 < 0) {
      int v13 = -1;
    }
    return (v13 + 1);
  }
  else
  {
    uint64_t v14 = type metadata accessor for ChartModel.Scenegraph();
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + a3[10];
    return v15(v17, a2, v16);
  }
}

uint64_t sub_21FA0E51C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = sub_21FA24970();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + a4[7];
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else if (a3 == 2147483646)
  {
    *(void *)(a1 + a4[9] + 64) = a2;
  }
  else
  {
    uint64_t v13 = type metadata accessor for ChartModel.Scenegraph();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    uint64_t v15 = v13;
    uint64_t v16 = a1 + a4[10];
    return v14(v16, a2, a2, v15);
  }
  return result;
}

uint64_t *sub_21FA0E650(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64) + 7;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((((((((((v6 + ((v5 + 1) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 143) & 0xFFFFFFFFFFFFFFF8) + 143) & 0xFFFFFFFFFFFFFFF8)
         + 186) & 0xFFFFFFFFFFFFFFF8)
       + 39) & 0xFFFFFFFFFFFFFFF8)
     + 32 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    uint64_t v10 = (uint64_t *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    goto LABEL_43;
  }
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v11 = ((unint64_t)a1 + v5 + 1) & ~v5;
  uint64_t v12 = ((unint64_t)a2 + v5 + 1) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v11, v12);
  unint64_t v13 = (v6 + v11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v6 + v12) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v15 = *(unsigned __int8 *)(v14 + 104);
  if (v15 > 1)
  {
    *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
    long long v24 = *(_OWORD *)(v14 + 16);
    long long v25 = *(_OWORD *)(v14 + 32);
    long long v26 = *(_OWORD *)(v14 + 64);
    *(_OWORD *)(v13 + 48) = *(_OWORD *)(v14 + 48);
    *(_OWORD *)(v13 + 64) = v26;
    *(_OWORD *)(v13 + 16) = v24;
    *(_OWORD *)(v13 + 32) = v25;
    long long v27 = *(_OWORD *)(v14 + 80);
    long long v28 = *(_OWORD *)(v14 + 96);
    long long v29 = *(_OWORD *)(v14 + 112);
    *(void *)(v13 + 128) = *(void *)(v14 + 128);
    *(_OWORD *)(v13 + 96) = v28;
    *(_OWORD *)(v13 + 112) = v29;
    *(_OWORD *)(v13 + 80) = v27;
  }
  else
  {
    uint64_t v16 = *(void *)v14;
    uint64_t v17 = *(void *)(v14 + 8);
    uint64_t v18 = *(void *)(v14 + 16);
    uint64_t v19 = *(void *)(v14 + 24);
    uint64_t v20 = *(void *)(v14 + 32);
    uint64_t v21 = *(void *)(v14 + 40);
    uint64_t v22 = *(void *)(v14 + 48);
    uint64_t v23 = *(void *)(v14 + 56);
    uint64_t v89 = *(void *)(v14 + 64);
    uint64_t v91 = *(void *)(v14 + 72);
    uint64_t v93 = *(void *)(v14 + 80);
    uint64_t v95 = *(void *)(v14 + 88);
    uint64_t v97 = *(void *)(v14 + 96);
    BOOL v87 = v15 != 0;
    sub_21F764268(*(void *)v14, v17, v18, v19, v20, v21, v22, v23, v89);
    *(void *)unint64_t v13 = v16;
    *(void *)(v13 + 8) = v17;
    *(void *)(v13 + 16) = v18;
    *(void *)(v13 + 24) = v19;
    *(void *)(v13 + 32) = v20;
    *(void *)(v13 + 40) = v21;
    *(void *)(v13 + 48) = v22;
    *(void *)(v13 + 56) = v23;
    *(void *)(v13 + 64) = v89;
    *(void *)(v13 + 72) = v91;
    *(void *)(v13 + 80) = v93;
    *(void *)(v13 + 88) = v95;
    *(void *)(v13 + 96) = v97;
    *(unsigned char *)(v13 + 104) = v87;
    *(void *)(v13 + 112) = *(void *)(v14 + 112);
    *(void *)(v13 + 120) = *(void *)(v14 + 120);
    *(void *)(v13 + 128) = *(void *)(v14 + 128);
  }
  unint64_t v30 = (v13 + 143) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v31 = (v14 + 143) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v32 = *(unsigned __int8 *)(v31 + 104);
  if (v32 > 1)
  {
    *(_OWORD *)unint64_t v30 = *(_OWORD *)v31;
    long long v41 = *(_OWORD *)(v31 + 16);
    long long v42 = *(_OWORD *)(v31 + 32);
    long long v43 = *(_OWORD *)(v31 + 64);
    *(_OWORD *)(v30 + 48) = *(_OWORD *)(v31 + 48);
    *(_OWORD *)(v30 + 64) = v43;
    *(_OWORD *)(v30 + 16) = v41;
    *(_OWORD *)(v30 + 32) = v42;
    long long v44 = *(_OWORD *)(v31 + 80);
    long long v45 = *(_OWORD *)(v31 + 96);
    long long v46 = *(_OWORD *)(v31 + 112);
    *(void *)(v30 + 128) = *(void *)(v31 + 128);
    *(_OWORD *)(v30 + 96) = v45;
    *(_OWORD *)(v30 + 112) = v46;
    *(_OWORD *)(v30 + 80) = v44;
  }
  else
  {
    uint64_t v33 = *(void *)v31;
    uint64_t v34 = *(void *)(v31 + 8);
    uint64_t v35 = *(void *)(v31 + 16);
    uint64_t v36 = *(void *)(v31 + 24);
    uint64_t v37 = *(void *)(v31 + 32);
    uint64_t v38 = *(void *)(v31 + 40);
    uint64_t v39 = *(void *)(v31 + 48);
    uint64_t v40 = *(void *)(v31 + 56);
    uint64_t v90 = *(void *)(v31 + 64);
    uint64_t v92 = *(void *)(v31 + 72);
    uint64_t v94 = *(void *)(v31 + 80);
    uint64_t v96 = *(void *)(v31 + 88);
    uint64_t v98 = *(void *)(v31 + 96);
    BOOL v88 = v32 != 0;
    sub_21F764268(*(void *)v31, v34, v35, v36, v37, v38, v39, v40, v90);
    *(void *)unint64_t v30 = v33;
    *(void *)(v30 + 8) = v34;
    *(void *)(v30 + 16) = v35;
    *(void *)(v30 + 24) = v36;
    *(void *)(v30 + 32) = v37;
    *(void *)(v30 + 40) = v38;
    *(void *)(v30 + 48) = v39;
    *(void *)(v30 + 56) = v40;
    *(void *)(v30 + 64) = v90;
    *(void *)(v30 + 72) = v92;
    *(void *)(v30 + 80) = v94;
    *(void *)(v30 + 88) = v96;
    *(void *)(v30 + 96) = v98;
    *(unsigned char *)(v30 + 104) = v88;
    *(void *)(v30 + 112) = *(void *)(v31 + 112);
    *(void *)(v30 + 120) = *(void *)(v31 + 120);
    *(void *)(v30 + 128) = *(void *)(v31 + 128);
  }
  unint64_t v47 = (v30 + 143) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v48 = (v31 + 143) & 0xFFFFFFFFFFFFFFF8;
  if ((*(unsigned char *)(v48 + 90) & 1) == 0)
  {
    *(void *)unint64_t v47 = *(void *)v48;
    *(unsigned char *)(v47 + 90) = 0;
    swift_retain();
    uint64_t v10 = a1;
    goto LABEL_30;
  }
  unsigned int v49 = *(unsigned __int16 *)(v48 + 40);
  if (v49 >> 8 <= 0xFE)
  {
    if ((v49 & 0x100) != 0)
    {
      uint64_t v10 = a1;
      uint64_t v55 = *(void *)(v48 + 24);
      *(void *)(v47 + 24) = v55;
      *(void *)(v47 + 32) = *(void *)(v48 + 32);
      (**(void (***)(unint64_t, unint64_t))(v55 - 8))((v30 + 143) & 0xFFFFFFFFFFFFFFF8, v48);
      *(unsigned char *)(v47 + 40) = v49 & 1;
      *(unsigned char *)(v47 + 41) = 1;
      goto LABEL_24;
    }
    uint64_t v52 = *(void *)v48;
    uint64_t v53 = *(void *)(v48 + 8);
    char v54 = *(unsigned char *)(v48 + 16);
    sub_21F7607AC(*(void *)v48, v53, v54);
    *(void *)unint64_t v47 = v52;
    *(void *)(v47 + 8) = v53;
    *(unsigned char *)(v47 + 16) = v54;
    *(unsigned char *)(v47 + 41) = 0;
  }
  else
  {
    long long v50 = *(_OWORD *)v48;
    long long v51 = *(_OWORD *)(v48 + 16);
    *(_OWORD *)(v47 + 26) = *(_OWORD *)(v48 + 26);
    *(_OWORD *)unint64_t v47 = v50;
    *(_OWORD *)(v47 + 16) = v51;
  }
  uint64_t v10 = a1;
LABEL_24:
  long long v56 = (_OWORD *)(v47 + 48);
  long long v57 = (long long *)(v48 + 48);
  unsigned int v58 = *(unsigned __int16 *)(v48 + 88);
  if (v58 >> 8 <= 0xFE)
  {
    if ((v58 & 0x100) != 0)
    {
      uint64_t v64 = *(void *)(v48 + 72);
      *(void *)(v47 + 72) = v64;
      *(void *)(v47 + 80) = *(void *)(v48 + 80);
      (**(void (***)(_OWORD *, long long *))(v64 - 8))(v56, v57);
      *(unsigned char *)(v47 + 88) = v58 & 1;
      *(unsigned char *)(v47 + 89) = 1;
    }
    else
    {
      uint64_t v61 = *(void *)(v48 + 48);
      uint64_t v62 = *(void *)(v48 + 56);
      char v63 = *(unsigned char *)(v48 + 64);
      sub_21F7607AC(v61, v62, v63);
      *(void *)(v47 + 48) = v61;
      *(void *)(v47 + 56) = v62;
      *(unsigned char *)(v47 + 64) = v63;
      *(unsigned char *)(v47 + 89) = 0;
    }
  }
  else
  {
    long long v59 = *v57;
    long long v60 = *(_OWORD *)(v48 + 64);
    *(_OWORD *)(v47 + 74) = *(_OWORD *)(v48 + 74);
    *long long v56 = v59;
    *(_OWORD *)(v47 + 64) = v60;
  }
  *(unsigned char *)(v47 + 90) = 1;
LABEL_30:
  unint64_t v65 = (v47 + 98) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v66 = (v48 + 98) & 0xFFFFFFFFFFFFFFF8;
  if (*(unsigned char *)(v66 + 80))
  {
    *(unsigned char *)unint64_t v65 = *(unsigned char *)v66;
    uint64_t v67 = *(void *)(v66 + 8);
    *(unsigned char *)(v65 + 16) = *(unsigned char *)(v66 + 16);
    *(void *)(v65 + 8) = v67;
    uint64_t v68 = *(void *)(v66 + 24);
    *(unsigned char *)(v65 + 32) = *(unsigned char *)(v66 + 32);
    *(void *)(v65 + 24) = v68;
    uint64_t v69 = (_OWORD *)(v65 + 40);
    uint64_t v70 = (long long *)(v66 + 40);
    uint64_t v71 = *(void *)(v66 + 64);
    if (v71)
    {
      *(void *)(v65 + 64) = v71;
      *(void *)(v65 + 72) = *(void *)(v66 + 72);
      (**(void (***)(_OWORD *, long long *))(v71 - 8))(v69, v70);
    }
    else
    {
      long long v72 = *v70;
      long long v73 = *(_OWORD *)(v66 + 56);
      *(void *)(v65 + 72) = *(void *)(v66 + 72);
      *uint64_t v69 = v72;
      *(_OWORD *)(v65 + 56) = v73;
    }
    *(unsigned char *)(v65 + 80) = 1;
  }
  else
  {
    *(void *)unint64_t v65 = *(void *)v66;
    *(unsigned char *)(v65 + 80) = 0;
    swift_retain();
  }
  unint64_t v74 = (v47 + 186) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v75 = (v48 + 186) & 0xFFFFFFFFFFFFFFF8;
  int v76 = *(unsigned __int8 *)(v75 + 16);
  if (v76 == 255)
  {
    long long v79 = *(_OWORD *)v75;
    *(unsigned char *)(v74 + 16) = *(unsigned char *)(v75 + 16);
    *(_OWORD *)unint64_t v74 = v79;
  }
  else
  {
    uint64_t v77 = *(void *)v75;
    uint64_t v78 = *(void *)(v75 + 8);
    sub_21F7607AC(*(void *)v75, v78, *(unsigned char *)(v75 + 16));
    *(void *)unint64_t v74 = v77;
    *(void *)(v74 + 8) = v78;
    *(unsigned char *)(v74 + 16) = v76;
  }
  *(void *)(v74 + 24) = *(void *)(v75 + 24);
  unint64_t v80 = (v74 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v81 = (v75 + 39) & 0xFFFFFFFFFFFFFFF8;
  int v82 = *(unsigned __int8 *)(v81 + 16);
  swift_retain();
  if (v82 == 255)
  {
    long long v85 = *(_OWORD *)v81;
    *(unsigned char *)(v80 + 16) = *(unsigned char *)(v81 + 16);
    *(_OWORD *)unint64_t v80 = v85;
  }
  else
  {
    uint64_t v83 = *(void *)v81;
    uint64_t v84 = *(void *)(v81 + 8);
    sub_21F7607AC(*(void *)v81, v84, v82);
    *(void *)unint64_t v80 = v83;
    *(void *)(v80 + 8) = v84;
    *(unsigned char *)(v80 + 16) = v82;
  }
  *(void *)(v80 + 24) = *(void *)(v81 + 24);
LABEL_43:
  swift_retain();
  return v10;
}

uint64_t sub_21FA0EC8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = v2 + 8;
  unint64_t v4 = (a1 + *(unsigned __int8 *)(v2 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  (*(void (**)(unint64_t))(v2 + 8))(v4);
  unint64_t v5 = (*(void *)(v3 + 56) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(unsigned __int8 *)(v5 + 104) <= 1u) {
    sub_21F76D570(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(void *)(v5 + 32), *(void *)(v5 + 40), *(void *)(v5 + 48), *(void *)(v5 + 56), *(_OWORD *)(v5 + 64));
  }
  unint64_t v6 = (v5 + 143) & 0xFFFFFFFFFFFFFFF8;
  if (*(unsigned __int8 *)(v6 + 104) <= 1u) {
    sub_21F76D570(*(void *)v6, *(void *)(v6 + 8), *(void *)(v6 + 16), *(void *)(v6 + 24), *(void *)(v6 + 32), *(void *)(v6 + 40), *(void *)(v6 + 48), *(void *)(v6 + 56), *(_OWORD *)(v6 + 64));
  }
  unint64_t v7 = (v6 + 143) & 0xFFFFFFFFFFFFFFF8;
  if (*(unsigned char *)(v7 + 90))
  {
    unsigned int v8 = *(unsigned __int16 *)(v7 + 40);
    if (v8 >> 8 <= 0xFE)
    {
      if ((v8 & 0x100) != 0) {
        _s6Charts15AnyChartContentVwxx_0(v7);
      }
      else {
        sub_21F7654F0(*(void *)v7, *(void *)(v7 + 8), *(unsigned char *)(v7 + 16));
      }
    }
    unsigned int v9 = *(unsigned __int16 *)(v7 + 88);
    if (v9 >> 8 <= 0xFE)
    {
      if ((v9 & 0x100) != 0) {
        _s6Charts15AnyChartContentVwxx_0(v7 + 48);
      }
      else {
        sub_21F7654F0(*(void *)(v7 + 48), *(void *)(v7 + 56), *(unsigned char *)(v7 + 64));
      }
    }
  }
  else
  {
    swift_release();
  }
  unint64_t v10 = (v7 + 98) & 0xFFFFFFFFFFFFFFF8;
  if (*(unsigned char *)(v10 + 80))
  {
    if (*(void *)(v10 + 64)) {
      _s6Charts15AnyChartContentVwxx_0(v10 + 40);
    }
  }
  else
  {
    swift_release();
  }
  unint64_t v11 = (v7 + 186) & 0xFFFFFFFFFFFFFFF8;
  int v12 = *(unsigned __int8 *)(v11 + 16);
  if (v12 != 255) {
    sub_21F7654F0(*(void *)v11, *(void *)(v11 + 8), v12);
  }
  swift_release();
  unint64_t v13 = (v11 + 39) & 0xFFFFFFFFFFFFFFF8;
  int v14 = *(unsigned __int8 *)(v13 + 16);
  if (v14 != 255) {
    sub_21F7654F0(*(void *)v13, *(void *)(v13 + 8), v14);
  }

  return swift_release();
}

unsigned char *sub_21FA0EE74(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = v3 + 16;
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (unint64_t)&a1[v5 + 1] & ~v5;
  uint64_t v7 = (unint64_t)&a2[v5 + 1] & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v3 + 16))(v6, v7);
  uint64_t v8 = *(void *)(v4 + 48) + 7;
  unint64_t v9 = (v8 + v6) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v11 = *(unsigned __int8 *)(v10 + 104);
  if (v11 > 1)
  {
    *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
    long long v20 = *(_OWORD *)(v10 + 16);
    long long v21 = *(_OWORD *)(v10 + 32);
    long long v22 = *(_OWORD *)(v10 + 64);
    *(_OWORD *)(v9 + 48) = *(_OWORD *)(v10 + 48);
    *(_OWORD *)(v9 + 64) = v22;
    *(_OWORD *)(v9 + 16) = v20;
    *(_OWORD *)(v9 + 32) = v21;
    long long v23 = *(_OWORD *)(v10 + 80);
    long long v24 = *(_OWORD *)(v10 + 96);
    long long v25 = *(_OWORD *)(v10 + 112);
    *(void *)(v9 + 128) = *(void *)(v10 + 128);
    *(_OWORD *)(v9 + 96) = v24;
    *(_OWORD *)(v9 + 112) = v25;
    *(_OWORD *)(v9 + 80) = v23;
  }
  else
  {
    uint64_t v12 = *(void *)v10;
    uint64_t v13 = *(void *)(v10 + 8);
    uint64_t v14 = *(void *)(v10 + 16);
    uint64_t v15 = *(void *)(v10 + 24);
    uint64_t v16 = *(void *)(v10 + 32);
    uint64_t v17 = *(void *)(v10 + 40);
    uint64_t v18 = *(void *)(v10 + 48);
    uint64_t v19 = *(void *)(v10 + 56);
    uint64_t v86 = *(void *)(v10 + 64);
    uint64_t v88 = *(void *)(v10 + 72);
    uint64_t v90 = *(void *)(v10 + 80);
    uint64_t v92 = *(void *)(v10 + 88);
    uint64_t v94 = *(void *)(v10 + 96);
    BOOL v84 = v11 != 0;
    sub_21F764268(*(void *)v10, v13, v14, v15, v16, v17, v18, v19, v86);
    *(void *)unint64_t v9 = v12;
    *(void *)(v9 + 8) = v13;
    *(void *)(v9 + 16) = v14;
    *(void *)(v9 + 24) = v15;
    *(void *)(v9 + 32) = v16;
    *(void *)(v9 + 40) = v17;
    *(void *)(v9 + 48) = v18;
    *(void *)(v9 + 56) = v19;
    *(void *)(v9 + 64) = v86;
    *(void *)(v9 + 72) = v88;
    *(void *)(v9 + 80) = v90;
    *(void *)(v9 + 88) = v92;
    *(void *)(v9 + 96) = v94;
    *(unsigned char *)(v9 + 104) = v84;
    *(void *)(v9 + 112) = *(void *)(v10 + 112);
    *(void *)(v9 + 120) = *(void *)(v10 + 120);
    *(void *)(v9 + 128) = *(void *)(v10 + 128);
  }
  unint64_t v26 = (v9 + 143) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = (v10 + 143) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v28 = *(unsigned __int8 *)(v27 + 104);
  if (v28 > 1)
  {
    *(_OWORD *)unint64_t v26 = *(_OWORD *)v27;
    long long v37 = *(_OWORD *)(v27 + 16);
    long long v38 = *(_OWORD *)(v27 + 32);
    long long v39 = *(_OWORD *)(v27 + 64);
    *(_OWORD *)(v26 + 48) = *(_OWORD *)(v27 + 48);
    *(_OWORD *)(v26 + 64) = v39;
    *(_OWORD *)(v26 + 16) = v37;
    *(_OWORD *)(v26 + 32) = v38;
    long long v40 = *(_OWORD *)(v27 + 80);
    long long v41 = *(_OWORD *)(v27 + 96);
    long long v42 = *(_OWORD *)(v27 + 112);
    *(void *)(v26 + 128) = *(void *)(v27 + 128);
    *(_OWORD *)(v26 + 96) = v41;
    *(_OWORD *)(v26 + 112) = v42;
    *(_OWORD *)(v26 + 80) = v40;
  }
  else
  {
    uint64_t v29 = *(void *)v27;
    uint64_t v30 = *(void *)(v27 + 8);
    uint64_t v31 = *(void *)(v27 + 16);
    uint64_t v32 = *(void *)(v27 + 24);
    uint64_t v33 = *(void *)(v27 + 32);
    uint64_t v34 = *(void *)(v27 + 40);
    uint64_t v35 = *(void *)(v27 + 48);
    uint64_t v36 = *(void *)(v27 + 56);
    uint64_t v87 = *(void *)(v27 + 64);
    uint64_t v89 = *(void *)(v27 + 72);
    uint64_t v91 = *(void *)(v27 + 80);
    uint64_t v93 = *(void *)(v27 + 88);
    uint64_t v95 = *(void *)(v27 + 96);
    BOOL v85 = v28 != 0;
    sub_21F764268(*(void *)v27, v30, v31, v32, v33, v34, v35, v36, v87);
    *(void *)unint64_t v26 = v29;
    *(void *)(v26 + 8) = v30;
    *(void *)(v26 + 16) = v31;
    *(void *)(v26 + 24) = v32;
    *(void *)(v26 + 32) = v33;
    *(void *)(v26 + 40) = v34;
    *(void *)(v26 + 48) = v35;
    *(void *)(v26 + 56) = v36;
    *(void *)(v26 + 64) = v87;
    *(void *)(v26 + 72) = v89;
    *(void *)(v26 + 80) = v91;
    *(void *)(v26 + 88) = v93;
    *(void *)(v26 + 96) = v95;
    *(unsigned char *)(v26 + 104) = v85;
    *(void *)(v26 + 112) = *(void *)(v27 + 112);
    *(void *)(v26 + 120) = *(void *)(v27 + 120);
    *(void *)(v26 + 128) = *(void *)(v27 + 128);
  }
  unint64_t v43 = (v26 + 143) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v44 = (v27 + 143) & 0xFFFFFFFFFFFFFFF8;
  if (*(unsigned char *)(v44 + 90))
  {
    unsigned int v45 = *(unsigned __int16 *)(v44 + 40);
    if (v45 >> 8 <= 0xFE)
    {
      if ((v45 & 0x100) != 0)
      {
        unint64_t v48 = a1;
        uint64_t v52 = *(void *)(v44 + 24);
        *(void *)(v43 + 24) = v52;
        *(void *)(v43 + 32) = *(void *)(v44 + 32);
        (**(void (***)(unint64_t, unint64_t))(v52 - 8))((v26 + 143) & 0xFFFFFFFFFFFFFFF8, v44);
        *(unsigned char *)(v43 + 40) = v45 & 1;
        *(unsigned char *)(v43 + 41) = 1;
        goto LABEL_15;
      }
      uint64_t v49 = *(void *)v44;
      uint64_t v50 = *(void *)(v44 + 8);
      char v51 = *(unsigned char *)(v44 + 16);
      sub_21F7607AC(*(void *)v44, v50, v51);
      *(void *)unint64_t v43 = v49;
      *(void *)(v43 + 8) = v50;
      *(unsigned char *)(v43 + 16) = v51;
      *(unsigned char *)(v43 + 41) = 0;
    }
    else
    {
      long long v46 = *(_OWORD *)v44;
      long long v47 = *(_OWORD *)(v44 + 16);
      *(_OWORD *)(v43 + 26) = *(_OWORD *)(v44 + 26);
      *(_OWORD *)unint64_t v43 = v46;
      *(_OWORD *)(v43 + 16) = v47;
    }
    unint64_t v48 = a1;
LABEL_15:
    uint64_t v53 = (_OWORD *)(v43 + 48);
    char v54 = (long long *)(v44 + 48);
    unsigned int v55 = *(unsigned __int16 *)(v44 + 88);
    if (v55 >> 8 <= 0xFE)
    {
      if ((v55 & 0x100) != 0)
      {
        uint64_t v61 = *(void *)(v44 + 72);
        *(void *)(v43 + 72) = v61;
        *(void *)(v43 + 80) = *(void *)(v44 + 80);
        (**(void (***)(_OWORD *, long long *))(v61 - 8))(v53, v54);
        *(unsigned char *)(v43 + 88) = v55 & 1;
        *(unsigned char *)(v43 + 89) = 1;
      }
      else
      {
        uint64_t v58 = *(void *)(v44 + 48);
        uint64_t v59 = *(void *)(v44 + 56);
        char v60 = *(unsigned char *)(v44 + 64);
        sub_21F7607AC(v58, v59, v60);
        *(void *)(v43 + 48) = v58;
        *(void *)(v43 + 56) = v59;
        *(unsigned char *)(v43 + 64) = v60;
        *(unsigned char *)(v43 + 89) = 0;
      }
    }
    else
    {
      long long v56 = *v54;
      long long v57 = *(_OWORD *)(v44 + 64);
      *(_OWORD *)(v43 + 74) = *(_OWORD *)(v44 + 74);
      *uint64_t v53 = v56;
      *(_OWORD *)(v43 + 64) = v57;
    }
    *(unsigned char *)(v43 + 90) = 1;
    goto LABEL_21;
  }
  *(void *)unint64_t v43 = *(void *)v44;
  *(unsigned char *)(v43 + 90) = 0;
  swift_retain();
  unint64_t v48 = a1;
LABEL_21:
  unint64_t v62 = (v43 + 98) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v63 = (v44 + 98) & 0xFFFFFFFFFFFFFFF8;
  if (*(unsigned char *)(v63 + 80))
  {
    *(unsigned char *)unint64_t v62 = *(unsigned char *)v63;
    uint64_t v64 = *(void *)(v63 + 8);
    *(unsigned char *)(v62 + 16) = *(unsigned char *)(v63 + 16);
    *(void *)(v62 + 8) = v64;
    uint64_t v65 = *(void *)(v63 + 24);
    *(unsigned char *)(v62 + 32) = *(unsigned char *)(v63 + 32);
    *(void *)(v62 + 24) = v65;
    unint64_t v66 = (_OWORD *)(v62 + 40);
    uint64_t v67 = (long long *)(v63 + 40);
    uint64_t v68 = *(void *)(v63 + 64);
    if (v68)
    {
      *(void *)(v62 + 64) = v68;
      *(void *)(v62 + 72) = *(void *)(v63 + 72);
      (**(void (***)(_OWORD *, long long *))(v68 - 8))(v66, v67);
    }
    else
    {
      long long v69 = *v67;
      long long v70 = *(_OWORD *)(v63 + 56);
      *(void *)(v62 + 72) = *(void *)(v63 + 72);
      *unint64_t v66 = v69;
      *(_OWORD *)(v62 + 56) = v70;
    }
    *(unsigned char *)(v62 + 80) = 1;
  }
  else
  {
    *(void *)unint64_t v62 = *(void *)v63;
    *(unsigned char *)(v62 + 80) = 0;
    swift_retain();
  }
  unint64_t v71 = (v43 + 186) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v72 = (v44 + 186) & 0xFFFFFFFFFFFFFFF8;
  int v73 = *(unsigned __int8 *)(v72 + 16);
  if (v73 == 255)
  {
    long long v76 = *(_OWORD *)v72;
    *(unsigned char *)(v71 + 16) = *(unsigned char *)(v72 + 16);
    *(_OWORD *)unint64_t v71 = v76;
  }
  else
  {
    uint64_t v74 = *(void *)v72;
    uint64_t v75 = *(void *)(v72 + 8);
    sub_21F7607AC(*(void *)v72, v75, *(unsigned char *)(v72 + 16));
    *(void *)unint64_t v71 = v74;
    *(void *)(v71 + 8) = v75;
    *(unsigned char *)(v71 + 16) = v73;
  }
  *(void *)(v71 + 24) = *(void *)(v72 + 24);
  unint64_t v77 = (v71 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v78 = (v72 + 39) & 0xFFFFFFFFFFFFFFF8;
  int v79 = *(unsigned __int8 *)(v78 + 16);
  swift_retain();
  if (v79 == 255)
  {
    long long v82 = *(_OWORD *)v78;
    *(unsigned char *)(v77 + 16) = *(unsigned char *)(v78 + 16);
    *(_OWORD *)unint64_t v77 = v82;
  }
  else
  {
    uint64_t v80 = *(void *)v78;
    uint64_t v81 = *(void *)(v78 + 8);
    sub_21F7607AC(*(void *)v78, v81, v79);
    *(void *)unint64_t v77 = v80;
    *(void *)(v77 + 8) = v81;
    *(unsigned char *)(v77 + 16) = v79;
  }
  *(void *)(v77 + 24) = *(void *)(v78 + 24);
  swift_retain();
  return v48;
}

unsigned char *sub_21FA0F410(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 24;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  uint64_t v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 40) + 7;
  unint64_t v10 = (v9 + v7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v9 + v8) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v12 = *(unsigned __int8 *)(v11 + 104);
  uint64_t v154 = a1;
  if (*(unsigned __int8 *)(v10 + 104) > 1u)
  {
    if (v12 <= 1)
    {
      uint64_t v30 = *(void *)v11;
      uint64_t v31 = *(void *)(v11 + 8);
      uint64_t v32 = *(void *)(v11 + 16);
      uint64_t v33 = *(void *)(v11 + 24);
      uint64_t v34 = *(void *)(v11 + 32);
      uint64_t v35 = *(void *)(v11 + 40);
      uint64_t v36 = *(void *)(v11 + 48);
      uint64_t v37 = *(void *)(v11 + 56);
      uint64_t v133 = *(void *)(v11 + 64);
      uint64_t v137 = *(void *)(v11 + 72);
      uint64_t v141 = *(void *)(v11 + 80);
      uint64_t v145 = *(void *)(v11 + 88);
      uint64_t v149 = *(void *)(v11 + 96);
      BOOL v130 = v12 != 0;
      sub_21F764268(*(void *)v11, v31, v32, v33, v34, v35, v36, v37, v133);
      *(void *)unint64_t v10 = v30;
      *(void *)(v10 + 8) = v31;
      *(void *)(v10 + 16) = v32;
      *(void *)(v10 + 24) = v33;
      *(void *)(v10 + 32) = v34;
      *(void *)(v10 + 40) = v35;
      *(void *)(v10 + 48) = v36;
      *(void *)(v10 + 56) = v37;
      *(void *)(v10 + 64) = v133;
      *(void *)(v10 + 72) = v137;
      *(void *)(v10 + 80) = v141;
      *(void *)(v10 + 88) = v145;
      *(void *)(v10 + 96) = v149;
      *(unsigned char *)(v10 + 104) = v130;
      *(void *)(v10 + 112) = *(void *)(v11 + 112);
      *(void *)(v10 + 120) = *(void *)(v11 + 120);
      *(void *)(v10 + 128) = *(void *)(v11 + 128);
      goto LABEL_8;
    }
  }
  else
  {
    if (v12 <= 1)
    {
      BOOL v152 = v12 != 0;
      uint64_t v13 = *(void *)v11;
      uint64_t v14 = *(void *)(v11 + 8);
      uint64_t v15 = *(void *)(v11 + 16);
      uint64_t v16 = *(void *)(v11 + 24);
      uint64_t v17 = *(void *)(v11 + 32);
      uint64_t v18 = *(void *)(v11 + 40);
      uint64_t v19 = *(void *)(v11 + 48);
      uint64_t v20 = *(void *)(v11 + 56);
      uint64_t v132 = *(void *)(v11 + 64);
      uint64_t v136 = *(void *)(v11 + 72);
      uint64_t v140 = *(void *)(v11 + 80);
      uint64_t v144 = *(void *)(v11 + 88);
      uint64_t v148 = *(void *)(v11 + 96);
      sub_21F764268(*(void *)v11, v14, v15, v16, v17, v18, v19, v20, v132);
      uint64_t v21 = *(void *)v10;
      uint64_t v22 = *(void *)(v10 + 8);
      uint64_t v23 = *(void *)(v10 + 16);
      uint64_t v24 = *(void *)(v10 + 24);
      uint64_t v25 = *(void *)(v10 + 32);
      uint64_t v26 = *(void *)(v10 + 40);
      uint64_t v27 = *(void *)(v10 + 48);
      uint64_t v28 = *(void *)(v10 + 56);
      long long v29 = *(_OWORD *)(v10 + 64);
      *(void *)unint64_t v10 = v13;
      *(void *)(v10 + 8) = v14;
      *(void *)(v10 + 16) = v15;
      *(void *)(v10 + 24) = v16;
      *(void *)(v10 + 32) = v17;
      *(void *)(v10 + 40) = v18;
      *(void *)(v10 + 48) = v19;
      *(void *)(v10 + 56) = v20;
      *(void *)(v10 + 64) = v132;
      *(void *)(v10 + 72) = v136;
      *(void *)(v10 + 80) = v140;
      *(void *)(v10 + 88) = v144;
      *(void *)(v10 + 96) = v148;
      *(unsigned char *)(v10 + 104) = v152;
      sub_21F76D570(v21, v22, v23, v24, v25, v26, v27, v28, v29);
      *(void *)(v10 + 112) = *(void *)(v11 + 112);
      *(void *)(v10 + 120) = *(void *)(v11 + 120);
      *(void *)(v10 + 128) = *(void *)(v11 + 128);
      goto LABEL_8;
    }
    sub_21F76D570(*(void *)v10, *(void *)(v10 + 8), *(void *)(v10 + 16), *(void *)(v10 + 24), *(void *)(v10 + 32), *(void *)(v10 + 40), *(void *)(v10 + 48), *(void *)(v10 + 56), *(_OWORD *)(v10 + 64));
  }
  *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
  long long v38 = *(_OWORD *)(v11 + 16);
  long long v39 = *(_OWORD *)(v11 + 32);
  long long v40 = *(_OWORD *)(v11 + 64);
  *(_OWORD *)(v10 + 48) = *(_OWORD *)(v11 + 48);
  *(_OWORD *)(v10 + 64) = v40;
  *(_OWORD *)(v10 + 16) = v38;
  *(_OWORD *)(v10 + 32) = v39;
  long long v41 = *(_OWORD *)(v11 + 80);
  long long v42 = *(_OWORD *)(v11 + 96);
  long long v43 = *(_OWORD *)(v11 + 112);
  *(void *)(v10 + 128) = *(void *)(v11 + 128);
  *(_OWORD *)(v10 + 96) = v42;
  *(_OWORD *)(v10 + 112) = v43;
  *(_OWORD *)(v10 + 80) = v41;
LABEL_8:
  unint64_t v44 = (v10 + 143) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v45 = (v11 + 143) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v46 = *(unsigned __int8 *)(v45 + 104);
  if (*(unsigned __int8 *)(v44 + 104) > 1u)
  {
    if (v46 <= 1)
    {
      uint64_t v64 = *(void *)v45;
      uint64_t v65 = *(void *)(v45 + 8);
      uint64_t v66 = *(void *)(v45 + 16);
      uint64_t v67 = *(void *)(v45 + 24);
      uint64_t v68 = *(void *)(v45 + 32);
      uint64_t v69 = *(void *)(v45 + 40);
      uint64_t v70 = *(void *)(v45 + 48);
      uint64_t v71 = *(void *)(v45 + 56);
      uint64_t v135 = *(void *)(v45 + 64);
      uint64_t v139 = *(void *)(v45 + 72);
      uint64_t v143 = *(void *)(v45 + 80);
      uint64_t v147 = *(void *)(v45 + 88);
      uint64_t v151 = *(void *)(v45 + 96);
      BOOL v131 = v46 != 0;
      sub_21F764268(*(void *)v45, v65, v66, v67, v68, v69, v70, v71, v135);
      *(void *)unint64_t v44 = v64;
      *(void *)(v44 + 8) = v65;
      *(void *)(v44 + 16) = v66;
      *(void *)(v44 + 24) = v67;
      *(void *)(v44 + 32) = v68;
      *(void *)(v44 + 40) = v69;
      *(void *)(v44 + 48) = v70;
      *(void *)(v44 + 56) = v71;
      *(void *)(v44 + 64) = v135;
      *(void *)(v44 + 72) = v139;
      *(void *)(v44 + 80) = v143;
      *(void *)(v44 + 88) = v147;
      *(void *)(v44 + 96) = v151;
      *(unsigned char *)(v44 + 104) = v131;
      *(void *)(v44 + 112) = *(void *)(v45 + 112);
      *(void *)(v44 + 120) = *(void *)(v45 + 120);
      *(void *)(v44 + 128) = *(void *)(v45 + 128);
      goto LABEL_15;
    }
  }
  else
  {
    if (v46 <= 1)
    {
      BOOL v153 = v46 != 0;
      uint64_t v47 = *(void *)v45;
      uint64_t v48 = *(void *)(v45 + 8);
      uint64_t v49 = *(void *)(v45 + 16);
      uint64_t v50 = *(void *)(v45 + 24);
      uint64_t v51 = *(void *)(v45 + 32);
      uint64_t v52 = *(void *)(v45 + 40);
      uint64_t v53 = *(void *)(v45 + 48);
      uint64_t v54 = *(void *)(v45 + 56);
      uint64_t v134 = *(void *)(v45 + 64);
      uint64_t v138 = *(void *)(v45 + 72);
      uint64_t v142 = *(void *)(v45 + 80);
      uint64_t v146 = *(void *)(v45 + 88);
      uint64_t v150 = *(void *)(v45 + 96);
      sub_21F764268(*(void *)v45, v48, v49, v50, v51, v52, v53, v54, v134);
      uint64_t v55 = *(void *)v44;
      uint64_t v56 = *(void *)(v44 + 8);
      uint64_t v57 = *(void *)(v44 + 16);
      uint64_t v58 = *(void *)(v44 + 24);
      uint64_t v59 = *(void *)(v44 + 32);
      uint64_t v60 = *(void *)(v44 + 40);
      uint64_t v61 = *(void *)(v44 + 48);
      uint64_t v62 = *(void *)(v44 + 56);
      long long v63 = *(_OWORD *)(v44 + 64);
      *(void *)unint64_t v44 = v47;
      *(void *)(v44 + 8) = v48;
      *(void *)(v44 + 16) = v49;
      *(void *)(v44 + 24) = v50;
      *(void *)(v44 + 32) = v51;
      *(void *)(v44 + 40) = v52;
      *(void *)(v44 + 48) = v53;
      *(void *)(v44 + 56) = v54;
      *(void *)(v44 + 64) = v134;
      *(void *)(v44 + 72) = v138;
      *(void *)(v44 + 80) = v142;
      *(void *)(v44 + 88) = v146;
      *(void *)(v44 + 96) = v150;
      *(unsigned char *)(v44 + 104) = v153;
      sub_21F76D570(v55, v56, v57, v58, v59, v60, v61, v62, v63);
      *(void *)(v44 + 112) = *(void *)(v45 + 112);
      *(void *)(v44 + 120) = *(void *)(v45 + 120);
      *(void *)(v44 + 128) = *(void *)(v45 + 128);
      goto LABEL_15;
    }
    sub_21F76D570(*(void *)v44, *(void *)(v44 + 8), *(void *)(v44 + 16), *(void *)(v44 + 24), *(void *)(v44 + 32), *(void *)(v44 + 40), *(void *)(v44 + 48), *(void *)(v44 + 56), *(_OWORD *)(v44 + 64));
  }
  *(_OWORD *)unint64_t v44 = *(_OWORD *)v45;
  long long v72 = *(_OWORD *)(v45 + 16);
  long long v73 = *(_OWORD *)(v45 + 32);
  long long v74 = *(_OWORD *)(v45 + 64);
  *(_OWORD *)(v44 + 48) = *(_OWORD *)(v45 + 48);
  *(_OWORD *)(v44 + 64) = v74;
  *(_OWORD *)(v44 + 16) = v72;
  *(_OWORD *)(v44 + 32) = v73;
  long long v75 = *(_OWORD *)(v45 + 80);
  long long v76 = *(_OWORD *)(v45 + 96);
  long long v77 = *(_OWORD *)(v45 + 112);
  *(void *)(v44 + 128) = *(void *)(v45 + 128);
  *(_OWORD *)(v44 + 96) = v76;
  *(_OWORD *)(v44 + 112) = v77;
  *(_OWORD *)(v44 + 80) = v75;
LABEL_15:
  unint64_t v78 = (v44 + 143) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v79 = (v45 + 143) & 0xFFFFFFFFFFFFFFF8;
  if (v78 != v79)
  {
    sub_21F76CA84((v44 + 143) & 0xFFFFFFFFFFFFFFF8, &qword_26AD44928);
    if (*(unsigned char *)(v79 + 90))
    {
      unsigned int v80 = *(unsigned __int16 *)(v79 + 40);
      if (v80 >> 8 <= 0xFE)
      {
        if ((v80 & 0x100) != 0)
        {
          uint64_t v86 = *(void *)(v79 + 24);
          *(void *)(v78 + 24) = v86;
          *(void *)(v78 + 32) = *(void *)(v79 + 32);
          (**(void (***)(unint64_t, unint64_t))(v86 - 8))((v44 + 143) & 0xFFFFFFFFFFFFFFF8, v79);
          *(unsigned char *)(v78 + 40) = v80 & 1;
          *(unsigned char *)(v78 + 41) = 1;
        }
        else
        {
          uint64_t v83 = *(void *)v79;
          uint64_t v84 = *(void *)(v79 + 8);
          char v85 = *(unsigned char *)(v79 + 16);
          sub_21F7607AC(*(void *)v79, v84, v85);
          *(void *)unint64_t v78 = v83;
          *(void *)(v78 + 8) = v84;
          *(unsigned char *)(v78 + 16) = v85;
          *(unsigned char *)(v78 + 41) = 0;
        }
      }
      else
      {
        long long v81 = *(_OWORD *)v79;
        long long v82 = *(_OWORD *)(v79 + 16);
        *(_OWORD *)(v78 + 26) = *(_OWORD *)(v79 + 26);
        *(_OWORD *)unint64_t v78 = v81;
        *(_OWORD *)(v78 + 16) = v82;
      }
      uint64_t v87 = (_OWORD *)(v78 + 48);
      uint64_t v88 = (long long *)(v79 + 48);
      unsigned int v89 = *(unsigned __int16 *)(v79 + 88);
      if (v89 >> 8 <= 0xFE)
      {
        if ((v89 & 0x100) != 0)
        {
          uint64_t v95 = *(void *)(v79 + 72);
          *(void *)(v78 + 72) = v95;
          *(void *)(v78 + 80) = *(void *)(v79 + 80);
          (**(void (***)(_OWORD *, long long *))(v95 - 8))(v87, v88);
          *(unsigned char *)(v78 + 88) = v89 & 1;
          *(unsigned char *)(v78 + 89) = 1;
        }
        else
        {
          uint64_t v92 = *(void *)(v79 + 48);
          uint64_t v93 = *(void *)(v79 + 56);
          char v94 = *(unsigned char *)(v79 + 64);
          sub_21F7607AC(v92, v93, v94);
          *(void *)(v78 + 48) = v92;
          *(void *)(v78 + 56) = v93;
          *(unsigned char *)(v78 + 64) = v94;
          *(unsigned char *)(v78 + 89) = 0;
        }
      }
      else
      {
        long long v90 = *v88;
        long long v91 = *(_OWORD *)(v79 + 64);
        *(_OWORD *)(v78 + 74) = *(_OWORD *)(v79 + 74);
        *uint64_t v87 = v90;
        *(_OWORD *)(v78 + 64) = v91;
      }
      *(unsigned char *)(v78 + 90) = 1;
    }
    else
    {
      *(void *)unint64_t v78 = *(void *)v79;
      *(unsigned char *)(v78 + 90) = 0;
      swift_retain();
    }
  }
  unint64_t v96 = (v78 + 98) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v97 = (v79 + 98) & 0xFFFFFFFFFFFFFFF8;
  if (v96 != v97)
  {
    sub_21F76CA84((v78 + 98) & 0xFFFFFFFFFFFFFFF8, &qword_26AD4A228);
    if (*(unsigned char *)(v97 + 80))
    {
      *(unsigned char *)unint64_t v96 = *(unsigned char *)v97;
      uint64_t v98 = *(void *)(v97 + 8);
      *(unsigned char *)(v96 + 16) = *(unsigned char *)(v97 + 16);
      *(void *)(v96 + 8) = v98;
      uint64_t v99 = *(void *)(v97 + 24);
      *(unsigned char *)(v96 + 32) = *(unsigned char *)(v97 + 32);
      *(void *)(v96 + 24) = v99;
      uint64_t v100 = (_OWORD *)(v96 + 40);
      uint64_t v101 = (long long *)(v97 + 40);
      uint64_t v102 = *(void *)(v97 + 64);
      if (v102)
      {
        *(void *)(v96 + 64) = v102;
        *(void *)(v96 + 72) = *(void *)(v97 + 72);
        (**(void (***)(_OWORD *, long long *))(v102 - 8))(v100, v101);
      }
      else
      {
        long long v103 = *v101;
        long long v104 = *(_OWORD *)(v97 + 56);
        *(void *)(v96 + 72) = *(void *)(v97 + 72);
        *uint64_t v100 = v103;
        *(_OWORD *)(v96 + 56) = v104;
      }
      *(unsigned char *)(v96 + 80) = 1;
    }
    else
    {
      *(void *)unint64_t v96 = *(void *)v97;
      *(unsigned char *)(v96 + 80) = 0;
      swift_retain();
    }
  }
  unint64_t v105 = (v78 + 186) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v106 = (v79 + 186) & 0xFFFFFFFFFFFFFFF8;
  int v107 = *(unsigned __int8 *)(v106 + 16);
  if (*(unsigned __int8 *)(v105 + 16) == 255)
  {
    if (v107 == 255)
    {
      long long v116 = *(_OWORD *)v106;
      *(unsigned char *)(v105 + 16) = *(unsigned char *)(v106 + 16);
      *(_OWORD *)unint64_t v105 = v116;
    }
    else
    {
      uint64_t v113 = *(void *)v106;
      uint64_t v114 = *(void *)(v106 + 8);
      sub_21F7607AC(*(void *)v106, v114, *(unsigned char *)(v106 + 16));
      *(void *)unint64_t v105 = v113;
      *(void *)(v105 + 8) = v114;
      *(unsigned char *)(v105 + 16) = v107;
    }
  }
  else if (v107 == 255)
  {
    sub_21F909D60(v105);
    char v115 = *(unsigned char *)(v106 + 16);
    *(_OWORD *)unint64_t v105 = *(_OWORD *)v106;
    *(unsigned char *)(v105 + 16) = v115;
  }
  else
  {
    uint64_t v108 = *(void *)v106;
    uint64_t v109 = *(void *)(v106 + 8);
    sub_21F7607AC(*(void *)v106, v109, *(unsigned char *)(v106 + 16));
    uint64_t v110 = *(void *)v105;
    uint64_t v111 = *(void *)(v105 + 8);
    *(void *)unint64_t v105 = v108;
    *(void *)(v105 + 8) = v109;
    char v112 = *(unsigned char *)(v105 + 16);
    *(unsigned char *)(v105 + 16) = v107;
    sub_21F7654F0(v110, v111, v112);
  }
  *(void *)(v105 + 24) = *(void *)(v106 + 24);
  swift_retain();
  swift_release();
  unint64_t v117 = (v105 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v118 = (v106 + 39) & 0xFFFFFFFFFFFFFFF8;
  int v119 = *(unsigned __int8 *)(v118 + 16);
  if (*(unsigned __int8 *)(v117 + 16) == 255)
  {
    if (v119 == 255)
    {
      long long v128 = *(_OWORD *)v118;
      *(unsigned char *)(v117 + 16) = *(unsigned char *)(v118 + 16);
      *(_OWORD *)unint64_t v117 = v128;
    }
    else
    {
      uint64_t v125 = *(void *)v118;
      uint64_t v126 = *(void *)(v118 + 8);
      sub_21F7607AC(*(void *)v118, v126, *(unsigned char *)(v118 + 16));
      *(void *)unint64_t v117 = v125;
      *(void *)(v117 + 8) = v126;
      *(unsigned char *)(v117 + 16) = v119;
    }
  }
  else if (v119 == 255)
  {
    sub_21F909D60(v117);
    char v127 = *(unsigned char *)(v118 + 16);
    *(_OWORD *)unint64_t v117 = *(_OWORD *)v118;
    *(unsigned char *)(v117 + 16) = v127;
  }
  else
  {
    uint64_t v120 = *(void *)v118;
    uint64_t v121 = *(void *)(v118 + 8);
    sub_21F7607AC(*(void *)v118, v121, *(unsigned char *)(v118 + 16));
    uint64_t v122 = *(void *)v117;
    uint64_t v123 = *(void *)(v117 + 8);
    *(void *)unint64_t v117 = v120;
    *(void *)(v117 + 8) = v121;
    char v124 = *(unsigned char *)(v117 + 16);
    *(unsigned char *)(v117 + 16) = v119;
    sub_21F7654F0(v122, v123, v124);
  }
  *(void *)(v117 + 24) = *(void *)(v118 + 24);
  swift_retain();
  swift_release();
  return v154;
}

unsigned char *sub_21FA0FD08(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  uint64_t v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 32) + 7;
  unint64_t v10 = (v9 + v7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v9 + v8) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
  long long v12 = *(_OWORD *)(v11 + 64);
  long long v14 = *(_OWORD *)(v11 + 16);
  long long v13 = *(_OWORD *)(v11 + 32);
  *(_OWORD *)(v10 + 48) = *(_OWORD *)(v11 + 48);
  *(_OWORD *)(v10 + 64) = v12;
  *(_OWORD *)(v10 + 16) = v14;
  *(_OWORD *)(v10 + 32) = v13;
  long long v16 = *(_OWORD *)(v11 + 96);
  long long v15 = *(_OWORD *)(v11 + 112);
  long long v17 = *(_OWORD *)(v11 + 80);
  *(void *)(v10 + 128) = *(void *)(v11 + 128);
  *(_OWORD *)(v10 + 96) = v16;
  *(_OWORD *)(v10 + 112) = v15;
  *(_OWORD *)(v10 + 80) = v17;
  unint64_t v18 = (v10 + 143) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v11 + 143) & 0xFFFFFFFFFFFFFFF8;
  long long v20 = *(_OWORD *)(v19 + 80);
  long long v21 = *(_OWORD *)(v19 + 96);
  long long v22 = *(_OWORD *)(v19 + 112);
  *(void *)(v18 + 128) = *(void *)(v19 + 128);
  *(_OWORD *)(v18 + 96) = v21;
  *(_OWORD *)(v18 + 112) = v22;
  *(_OWORD *)(v18 + 80) = v20;
  long long v23 = *(_OWORD *)(v19 + 16);
  long long v24 = *(_OWORD *)(v19 + 32);
  long long v25 = *(_OWORD *)(v19 + 64);
  *(_OWORD *)(v18 + 48) = *(_OWORD *)(v19 + 48);
  *(_OWORD *)(v18 + 64) = v25;
  *(_OWORD *)(v18 + 16) = v23;
  *(_OWORD *)(v18 + 32) = v24;
  *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
  uint64_t v26 = (_OWORD *)((v18 + 143) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v27 = (_OWORD *)((v19 + 143) & 0xFFFFFFFFFFFFFFF8);
  long long v28 = v27[2];
  long long v29 = v27[3];
  long long v30 = v27[4];
  *(_OWORD *)((char *)v26 + 75) = *(_OWORD *)((char *)v27 + 75);
  v26[3] = v29;
  v26[4] = v30;
  v26[2] = v28;
  long long v31 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v31;
  unint64_t v32 = ((unint64_t)v26 + 98) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v33 = ((unint64_t)v27 + 98) & 0xFFFFFFFFFFFFFFF8;
  long long v34 = *(_OWORD *)(v33 + 16);
  *(_OWORD *)unint64_t v32 = *(_OWORD *)v33;
  *(_OWORD *)(v32 + 16) = v34;
  long long v36 = *(_OWORD *)(v33 + 48);
  long long v35 = *(_OWORD *)(v33 + 64);
  long long v37 = *(_OWORD *)(v33 + 32);
  *(unsigned char *)(v32 + 80) = *(unsigned char *)(v33 + 80);
  *(_OWORD *)(v32 + 48) = v36;
  *(_OWORD *)(v32 + 64) = v35;
  *(_OWORD *)(v32 + 32) = v37;
  long long v38 = (_OWORD *)(((unint64_t)v26 + 186) & 0xFFFFFFFFFFFFFFF8);
  long long v39 = (_OWORD *)(((unint64_t)v27 + 186) & 0xFFFFFFFFFFFFFFF8);
  long long v40 = v39[1];
  *long long v38 = *v39;
  v38[1] = v40;
  long long v41 = (_OWORD *)(((unint64_t)v38 + 39) & 0xFFFFFFFFFFFFFFF8);
  long long v42 = (_OWORD *)(((unint64_t)v39 + 39) & 0xFFFFFFFFFFFFFFF8);
  long long v43 = v42[1];
  *long long v41 = *v42;
  v41[1] = v43;
  return a1;
}

unsigned char *sub_21FA0FE98(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 40;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  uint64_t v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 24) + 7;
  unint64_t v10 = (v9 + v7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v9 + v8) & 0xFFFFFFFFFFFFFFF8;
  if (*(unsigned __int8 *)(v10 + 104) > 1u) {
    goto LABEL_8;
  }
  unsigned int v12 = *(unsigned __int8 *)(v11 + 104);
  if (v12 > 1)
  {
    sub_21F76D570(*(void *)v10, *(void *)(v10 + 8), *(void *)(v10 + 16), *(void *)(v10 + 24), *(void *)(v10 + 32), *(void *)(v10 + 40), *(void *)(v10 + 48), *(void *)(v10 + 56), *(_OWORD *)(v10 + 64));
LABEL_8:
    *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
    long long v30 = *(_OWORD *)(v11 + 16);
    long long v31 = *(_OWORD *)(v11 + 32);
    long long v32 = *(_OWORD *)(v11 + 64);
    *(_OWORD *)(v10 + 48) = *(_OWORD *)(v11 + 48);
    *(_OWORD *)(v10 + 64) = v32;
    *(_OWORD *)(v10 + 16) = v30;
    *(_OWORD *)(v10 + 32) = v31;
    long long v33 = *(_OWORD *)(v11 + 80);
    long long v34 = *(_OWORD *)(v11 + 96);
    long long v35 = *(_OWORD *)(v11 + 112);
    *(void *)(v10 + 128) = *(void *)(v11 + 128);
    *(_OWORD *)(v10 + 96) = v34;
    *(_OWORD *)(v10 + 112) = v35;
    *(_OWORD *)(v10 + 80) = v33;
    goto LABEL_9;
  }
  BOOL v13 = v12 == 0;
  uint64_t v14 = *(void *)(v11 + 96);
  char v15 = !v13;
  uint64_t v16 = *(void *)v10;
  uint64_t v17 = *(void *)(v10 + 8);
  uint64_t v18 = *(void *)(v10 + 16);
  uint64_t v19 = *(void *)(v10 + 24);
  uint64_t v20 = *(void *)(v10 + 32);
  uint64_t v21 = *(void *)(v10 + 40);
  uint64_t v22 = *(void *)(v10 + 48);
  uint64_t v23 = *(void *)(v10 + 56);
  long long v24 = *(_OWORD *)(v10 + 64);
  long long v25 = *(_OWORD *)(v11 + 16);
  long long v26 = *(_OWORD *)(v11 + 32);
  long long v27 = *(_OWORD *)(v11 + 48);
  long long v28 = *(_OWORD *)(v11 + 64);
  long long v29 = *(_OWORD *)(v11 + 80);
  *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v25;
  *(_OWORD *)(v10 + 32) = v26;
  *(_OWORD *)(v10 + 48) = v27;
  *(_OWORD *)(v10 + 64) = v28;
  *(_OWORD *)(v10 + 80) = v29;
  *(void *)(v10 + 96) = v14;
  *(unsigned char *)(v10 + 104) = v15;
  sub_21F76D570(v16, v17, v18, v19, v20, v21, v22, v23, v24);
  *(void *)(v10 + 112) = *(void *)(v11 + 112);
  *(void *)(v10 + 120) = *(void *)(v11 + 120);
  *(void *)(v10 + 128) = *(void *)(v11 + 128);
LABEL_9:
  unint64_t v36 = (v10 + 143) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v37 = (v11 + 143) & 0xFFFFFFFFFFFFFFF8;
  if (*(unsigned __int8 *)(v36 + 104) > 1u)
  {
LABEL_16:
    *(_OWORD *)unint64_t v36 = *(_OWORD *)v37;
    long long v55 = *(_OWORD *)(v37 + 16);
    long long v56 = *(_OWORD *)(v37 + 32);
    long long v57 = *(_OWORD *)(v37 + 64);
    *(_OWORD *)(v36 + 48) = *(_OWORD *)(v37 + 48);
    *(_OWORD *)(v36 + 64) = v57;
    *(_OWORD *)(v36 + 16) = v55;
    *(_OWORD *)(v36 + 32) = v56;
    long long v58 = *(_OWORD *)(v37 + 80);
    long long v59 = *(_OWORD *)(v37 + 96);
    long long v60 = *(_OWORD *)(v37 + 112);
    *(void *)(v36 + 128) = *(void *)(v37 + 128);
    *(_OWORD *)(v36 + 96) = v59;
    *(_OWORD *)(v36 + 112) = v60;
    *(_OWORD *)(v36 + 80) = v58;
    goto LABEL_17;
  }
  unsigned int v38 = *(unsigned __int8 *)(v37 + 104);
  if (v38 > 1)
  {
    sub_21F76D570(*(void *)v36, *(void *)(v36 + 8), *(void *)(v36 + 16), *(void *)(v36 + 24), *(void *)(v36 + 32), *(void *)(v36 + 40), *(void *)(v36 + 48), *(void *)(v36 + 56), *(_OWORD *)(v36 + 64));
    goto LABEL_16;
  }
  BOOL v13 = v38 == 0;
  uint64_t v39 = *(void *)(v37 + 96);
  char v40 = !v13;
  uint64_t v41 = *(void *)v36;
  uint64_t v42 = *(void *)(v36 + 8);
  uint64_t v43 = *(void *)(v36 + 16);
  uint64_t v44 = *(void *)(v36 + 24);
  uint64_t v45 = *(void *)(v36 + 32);
  uint64_t v46 = *(void *)(v36 + 40);
  uint64_t v47 = *(void *)(v36 + 48);
  uint64_t v48 = *(void *)(v36 + 56);
  long long v49 = *(_OWORD *)(v36 + 64);
  long long v50 = *(_OWORD *)(v37 + 16);
  long long v51 = *(_OWORD *)(v37 + 32);
  long long v52 = *(_OWORD *)(v37 + 48);
  long long v53 = *(_OWORD *)(v37 + 64);
  long long v54 = *(_OWORD *)(v37 + 80);
  *(_OWORD *)unint64_t v36 = *(_OWORD *)v37;
  *(_OWORD *)(v36 + 16) = v50;
  *(_OWORD *)(v36 + 32) = v51;
  *(_OWORD *)(v36 + 48) = v52;
  *(_OWORD *)(v36 + 64) = v53;
  *(_OWORD *)(v36 + 80) = v54;
  *(void *)(v36 + 96) = v39;
  *(unsigned char *)(v36 + 104) = v40;
  sub_21F76D570(v41, v42, v43, v44, v45, v46, v47, v48, v49);
  *(void *)(v36 + 112) = *(void *)(v37 + 112);
  *(void *)(v36 + 120) = *(void *)(v37 + 120);
  *(void *)(v36 + 128) = *(void *)(v37 + 128);
LABEL_17:
  uint64_t v61 = (_OWORD *)((v36 + 143) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v62 = (_OWORD *)((v37 + 143) & 0xFFFFFFFFFFFFFFF8);
  if (v61 != v62)
  {
    sub_21F76CA84((uint64_t)v61, &qword_26AD44928);
    long long v63 = v62[1];
    *uint64_t v61 = *v62;
    v61[1] = v63;
    long long v65 = v62[3];
    long long v64 = v62[4];
    long long v66 = v62[2];
    *(_OWORD *)((char *)v61 + 75) = *(_OWORD *)((char *)v62 + 75);
    v61[3] = v65;
    v61[4] = v64;
    v61[2] = v66;
  }
  unint64_t v67 = ((unint64_t)v61 + 98) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v68 = ((unint64_t)v62 + 98) & 0xFFFFFFFFFFFFFFF8;
  if (v67 != v68)
  {
    sub_21F76CA84(((unint64_t)v61 + 98) & 0xFFFFFFFFFFFFFFF8, &qword_26AD4A228);
    long long v69 = *(_OWORD *)(v68 + 16);
    *(_OWORD *)unint64_t v67 = *(_OWORD *)v68;
    *(_OWORD *)(v67 + 16) = v69;
    long long v71 = *(_OWORD *)(v68 + 48);
    long long v70 = *(_OWORD *)(v68 + 64);
    long long v72 = *(_OWORD *)(v68 + 32);
    *(unsigned char *)(v67 + 80) = *(unsigned char *)(v68 + 80);
    *(_OWORD *)(v67 + 48) = v71;
    *(_OWORD *)(v67 + 64) = v70;
    *(_OWORD *)(v67 + 32) = v72;
  }
  unint64_t v73 = ((unint64_t)v61 + 186) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v74 = ((unint64_t)v62 + 186) & 0xFFFFFFFFFFFFFFF8;
  int v75 = *(unsigned __int8 *)(v73 + 16);
  if (v75 == 255)
  {
    long long v79 = *(_OWORD *)v74;
    *(unsigned char *)(v73 + 16) = *(unsigned char *)(v74 + 16);
    *(_OWORD *)unint64_t v73 = v79;
  }
  else
  {
    int v76 = *(unsigned __int8 *)(v74 + 16);
    if (v76 == 255)
    {
      sub_21F909D60(v73);
      char v80 = *(unsigned char *)(v74 + 16);
      *(_OWORD *)unint64_t v73 = *(_OWORD *)v74;
      *(unsigned char *)(v73 + 16) = v80;
    }
    else
    {
      uint64_t v77 = *(void *)v73;
      uint64_t v78 = *(void *)(v73 + 8);
      *(_OWORD *)unint64_t v73 = *(_OWORD *)v74;
      *(unsigned char *)(v73 + 16) = v76;
      sub_21F7654F0(v77, v78, v75);
    }
  }
  *(void *)(v73 + 24) = *(void *)(v74 + 24);
  swift_release();
  unint64_t v81 = (v73 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v82 = (v74 + 39) & 0xFFFFFFFFFFFFFFF8;
  int v83 = *(unsigned __int8 *)(v81 + 16);
  if (v83 == 255)
  {
    long long v87 = *(_OWORD *)v82;
    *(unsigned char *)(v81 + 16) = *(unsigned char *)(v82 + 16);
    *(_OWORD *)unint64_t v81 = v87;
  }
  else
  {
    int v84 = *(unsigned __int8 *)(v82 + 16);
    if (v84 == 255)
    {
      sub_21F909D60(v81);
      char v88 = *(unsigned char *)(v82 + 16);
      *(_OWORD *)unint64_t v81 = *(_OWORD *)v82;
      *(unsigned char *)(v81 + 16) = v88;
    }
    else
    {
      uint64_t v85 = *(void *)v81;
      uint64_t v86 = *(void *)(v81 + 8);
      *(_OWORD *)unint64_t v81 = *(_OWORD *)v82;
      *(unsigned char *)(v81 + 16) = v84;
      sub_21F7654F0(v85, v86, v83);
    }
  }
  *(void *)(v81 + 24) = *(void *)(v82 + 24);
  swift_release();
  return a1;
}

uint64_t sub_21FA102A8(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7;
  if (v7 < a2)
  {
    unint64_t v9 = ((((((((((v8 + ((v6 + 1) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 143) & 0xFFFFFFFFFFFFFFF8) + 143) & 0xFFFFFFFFFFFFFFF8)
           + 186) & 0xFFFFFFFFFFFFFFF8)
         + 39) & 0xFFFFFFFFFFFFFFF8)
       + 32;
    unsigned int v10 = a2 - v7;
    uint64_t v11 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v12 = 2;
    }
    else {
      unsigned int v12 = v10 + 1;
    }
    if (v12 >= 0x10000) {
      unsigned int v13 = 4;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v12 < 0x100) {
      unsigned int v13 = 1;
    }
    if (v12 >= 2) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    switch(v14)
    {
      case 1:
        int v15 = *((unsigned __int8 *)a1 + v9);
        if (!v15) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v15 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v15) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x21FA10454);
      case 4:
        int v15 = *(_DWORD *)((char *)a1 + v9);
        if (!v15) {
          break;
        }
LABEL_22:
        int v17 = v15 - 1;
        if (v11)
        {
          int v17 = 0;
          LODWORD(v11) = *a1;
        }
        return v7 + (v11 | v17) + 1;
      default:
        break;
    }
  }
  uint64_t v18 = ((unint64_t)a1 + v6 + 1) & ~v6;
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(v18);
  }
  unint64_t v19 = *(void *)(((((((((v8 + v18) & 0xFFFFFFFFFFFFFFF8) + 143) & 0xFFFFFFFFFFFFFFF8) + 143) & 0xFFFFFFFFFFFFFFF8)
                    + 186) & 0xFFFFFFFFFFFFFFF8)
                  + 24);
  if (v19 >= 0xFFFFFFFF) {
    LODWORD(v19) = -1;
  }
  int v20 = v19 - 1;
  if (v20 < 0) {
    int v20 = -1;
  }
  return (v20 + 1);
}

void sub_21FA10468(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + 7;
  unint64_t v11 = ((((((((((v10 + ((v9 + 1) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 143) & 0xFFFFFFFFFFFFFFF8) + 143) & 0xFFFFFFFFFFFFFFF8)
          + 186) & 0xFFFFFFFFFFFFFFF8)
        + 39) & 0xFFFFFFFFFFFFFFF8)
      + 32;
  if (v8 >= a3)
  {
    int v15 = 0;
    int v16 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v11] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            unint64_t v19 = (unint64_t)&a1[v9 + 1] & ~v9;
            if (v7 < 0x7FFFFFFE)
            {
              uint64_t v21 = (void *)((((((((v10 + v19) & 0xFFFFFFFFFFFFFFF8) + 143) & 0xFFFFFFFFFFFFFFF8) + 143) & 0xFFFFFFFFFFFFFFF8)
                              + 186) & 0xFFFFFFFFFFFFFFF8);
              if (a2 > 0x7FFFFFFE)
              {
                v21[2] = 0;
                long long v21[3] = 0;
                *uint64_t v21 = a2 - 0x7FFFFFFF;
                v21[1] = 0;
              }
              else
              {
                long long v21[3] = a2;
              }
            }
            else
            {
              int v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(v19);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = a3 - v8;
    if (((((((((((v10 + ((v9 + 1) & ~v9)) & 0xFFFFFFF8) + 143) & 0xFFFFFFF8) + 143) & 0xFFFFFFF8)
           + 186) & 0xFFFFFFF8)
         + 39) & 0xFFFFFFF8) == 0xFFFFFFE0)
      unsigned int v13 = v12 + 1;
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    int v16 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((((((((v10 + ((v9 + 1) & ~v9)) & 0xFFFFFFF8) + 143) & 0xFFFFFFF8) + 143) & 0xFFFFFFF8)
         + 186) & 0xFFFFFFF8)
       + 39) & 0xFFFFFFF8) == 0xFFFFFFE0)
    int v17 = v16;
  else {
    int v17 = 1;
  }
  if (((((((((((v10 + ((v9 + 1) & ~v9)) & 0xFFFFFFF8) + 143) & 0xFFFFFFF8) + 143) & 0xFFFFFFF8)
         + 186) & 0xFFFFFFF8)
       + 39) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    unsigned int v18 = ~v8 + a2;
    bzero(a1, ((((((((((v10 + ((v9 + 1) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 143) & 0xFFFFFFFFFFFFFFF8) + 143) & 0xFFFFFFFFFFFFFFF8)+ 186) & 0xFFFFFFFFFFFFFFF8)+ 39) & 0xFFFFFFFFFFFFFFF8)+ 32);
    *(_DWORD *)a1 = v18;
  }
  switch(v15)
  {
    case 1:
      a1[v11] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v11] = v17;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x21FA106B0);
    case 4:
      *(_DWORD *)&a1[v11] = v17;
      break;
    default:
      return;
  }
}

uint64_t getEnumTagSinglePayload for ChartLayout(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF8 && *(unsigned char *)(a1 + 73)) {
    return (*(_DWORD *)a1 + 248);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  BOOL v4 = v3 >= 9;
  int v5 = v3 - 9;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ChartLayout(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF7)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)uint64_t result = a2 - 248;
    if (a3 >= 0xF8) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF8) {
      *(unsigned char *)(result + 73) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = a2 + 8;
    }
  }
  return result;
}

void *sub_21FA10774(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (void *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_21FA24220();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_21FA24320();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[6];
    unsigned int v13 = (char *)a1 + v12;
    int v14 = (char *)a2 + v12;
    uint64_t v15 = sub_21FA24970();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    uint64_t v16 = a3[8];
    *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
    int v17 = (char *)a1 + v16;
    unsigned int v18 = (char *)a2 + v16;
    uint64_t v19 = sub_21FA24730();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  }
  return a1;
}

uint64_t sub_21FA10928(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_21FA24220();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_21FA24320();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_21FA24970();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v15 = a3[8];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = sub_21FA24730();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_21FA10A90(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_21FA24220();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_21FA24320();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_21FA24970();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  uint64_t v15 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = sub_21FA24730();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_21FA10BF4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_21FA24220();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_21FA24320();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_21FA24970();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  uint64_t v15 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = sub_21FA24730();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_21FA10D58(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_21FA24220();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v11 = sub_21FA24320();
    if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
    {
      uint64_t v8 = v11;
      uint64_t v12 = *(void *)(v11 - 8);
      uint64_t v13 = a3[5];
    }
    else
    {
      uint64_t v14 = sub_21FA24970();
      if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
      {
        uint64_t v8 = v14;
        uint64_t v12 = *(void *)(v14 - 8);
        uint64_t v13 = a3[6];
      }
      else
      {
        uint64_t v15 = sub_21FA24730();
        if (*(_DWORD *)(*(void *)(v15 - 8) + 84) != a2)
        {
          unsigned int v17 = *(unsigned __int8 *)(a1 + a3[9]);
          if (v17 >= 2) {
            return ((v17 + 2147483646) & 0x7FFFFFFF) + 1;
          }
          else {
            return 0;
          }
        }
        uint64_t v8 = v15;
        uint64_t v12 = *(void *)(v15 - 8);
        uint64_t v13 = a3[8];
      }
    }
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_21FA10F14(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_21FA24220();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = sub_21FA24320();
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      uint64_t v16 = sub_21FA24970();
      if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
      {
        uint64_t v10 = v16;
        uint64_t v14 = *(void *)(v16 - 8);
        uint64_t v15 = a4[6];
      }
      else
      {
        uint64_t result = sub_21FA24730();
        if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
        {
          *(unsigned char *)(a1 + a4[9]) = a2 + 1;
          return result;
        }
        uint64_t v10 = result;
        uint64_t v14 = *(void *)(result - 8);
        uint64_t v15 = a4[8];
      }
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t *sub_21FA110BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v152 = *(void *)(a3 + 16);
  uint64_t v162 = *(void *)(v152 - 8);
  uint64_t v153 = *(void *)(v162 + 64);
  uint64_t v150 = sub_21FA24220();
  uint64_t v3 = *(void *)(v150 - 8);
  uint64_t v146 = v3;
  int v159 = *(_DWORD *)(v3 + 80);
  uint64_t v149 = sub_21FA24320();
  uint64_t v4 = *(void *)(v149 - 8);
  uint64_t v145 = v4;
  int v157 = *(_DWORD *)(v4 + 80);
  uint64_t v148 = sub_21FA24970();
  uint64_t v5 = *(void *)(v148 - 8);
  uint64_t v144 = v5;
  int v155 = *(_DWORD *)(v5 + 80);
  uint64_t v151 = sub_21FA24730();
  uint64_t v6 = v3;
  uint64_t v147 = *(void *)(v151 - 8);
  int v7 = *(_DWORD *)(v147 + 80);
  int v8 = v157 | v159 & 0xF8 | v155 | v7;
  uint64_t v142 = v157;
  uint64_t v138 = *(void *)(v6 + 64) + v157;
  uint64_t v139 = v155;
  uint64_t v140 = *(void *)(v4 + 64) + v155;
  uint64_t v141 = *(void *)(v5 + 64) + 7;
  uint64_t v137 = v7;
  uint64_t v143 = *(void *)(v147 + 64);
  uint64_t v9 = v143
     + ((v7
       + 8
       + ((v141 + ((v140 + (v138 & ~(unint64_t)v157)) & ~(unint64_t)v155)) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v7);
  if ((unint64_t)(v9 + 1) > 8) {
    uint64_t v10 = v9 + 1;
  }
  else {
    uint64_t v10 = 8;
  }
  uint64_t v11 = sub_21F76CA40(&qword_26AD47EF8);
  uint64_t v12 = *(void *)(v11 - 8);
  int v13 = *(_DWORD *)(v12 + 80);
  uint64_t v14 = *(void *)(v12 + 64);
  uint64_t v15 = sub_21FA252F0();
  int v16 = *(_DWORD *)(*(void *)(v15 - 8) + 80);
  uint64_t v17 = v16;
  int v18 = *(_DWORD *)(v162 + 80);
  unsigned int v19 = (v13 | v18) & 0xF8 | v8 | v16;
  if (v19 > 7
    || ((v157 | v159 | v155 | v7 | v13 | v16 | v18) & 0x100000) != 0
    || (uint64_t v20 = v8 | 7u,
        uint64_t v21 = v153 + v20,
        uint64_t v22 = v10 + 1,
        ((((v14 + 7) & 0xFFFFFFFFFFFFFFF8)
        + v17
        + 8
        + (((v13 & 0xF8)
          + 88
          + ((((((v153 + v20) & ~v20) + v10 + 1 + 175) & 0xFFFFFFFFFFFFFFF8) + 307) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)(v13 & 0xF8) & 0xFFFFFFFFFFFFFFF8)) & ~v17)
      + *(void *)(*(void *)(v15 - 8) + 64) > 0x18))
  {
    uint64_t v30 = *a2;
    *a1 = *a2;
    uint64_t v31 = v30 + (((v19 | 7) + 16) & ~(unint64_t)(v19 | 7));
    swift_retain();
  }
  else
  {
    uint64_t v131 = v7 + 8;
    uint64_t v132 = v17;
    uint64_t v133 = (v13 & 0xF8) + 88;
    unint64_t v134 = ~(unint64_t)(v13 & 0xF8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v135 = v14 + 7;
    unint64_t v154 = ((v14 + 7) & 0xFFFFFFFFFFFFFFF8) + v17 + 8;
    uint64_t v156 = v11;
    uint64_t v158 = *(void *)(v15 - 8);
    uint64_t v160 = v15;
    uint64_t v23 = ~v20;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v162 + 16))(a1, a2, v152);
    long long v24 = (void *)(((unint64_t)a1 + v21) & v23);
    long long v25 = (unsigned __int8 *)(((unint64_t)a2 + v21) & v23);
    unsigned int v26 = v25[v10];
    unsigned int v27 = v26 - 2;
    if (v26 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v28 = v10;
      }
      else {
        uint64_t v28 = 4;
      }
      switch(v28)
      {
        case 1:
          int v29 = *v25;
          if (v10 < 4) {
            goto LABEL_18;
          }
          goto LABEL_20;
        case 2:
          int v29 = *(unsigned __int16 *)v25;
          if (v10 >= 4) {
            goto LABEL_20;
          }
          goto LABEL_18;
        case 3:
          int v29 = *(unsigned __int16 *)(((unint64_t)a2 + v21) & v23) | (*(unsigned __int8 *)((((unint64_t)a2
                                                                                                  + v21) & v23)
                                                                                                + 2) << 16);
          if (v10 < 4) {
            goto LABEL_18;
          }
          goto LABEL_20;
        case 4:
          int v29 = *(_DWORD *)v25;
          if (v10 < 4) {
LABEL_18:
          }
            unsigned int v26 = (v29 | (v27 << (8 * v10))) + 2;
          else {
LABEL_20:
          }
            unsigned int v26 = v29 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v136 = v12;
    if (v26 == 1)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v146 + 16))(v24, v25, v150);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v145 + 16))(((unint64_t)v24 + v138) & ~v142, (unint64_t)&v25[v138] & ~v142, v149);
      unint64_t v32 = (v140 + (((unint64_t)v24 + v138) & ~v142)) & ~v139;
      unint64_t v33 = (v140 + ((unint64_t)&v25[v138] & ~v142)) & ~v139;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v144 + 16))(v32, v33, v148);
      long long v34 = (void *)((v141 + v32) & 0xFFFFFFFFFFFFFFF8);
      long long v35 = (void *)((v141 + v33) & 0xFFFFFFFFFFFFFFF8);
      *long long v34 = *v35;
      unint64_t v36 = ((unint64_t)v34 + v131) & ~v137;
      unint64_t v37 = ((unint64_t)v35 + v131) & ~v137;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v147 + 16))(v36, v37, v151);
      *(unsigned char *)(v36 + v143) = *(unsigned char *)(v37 + v143);
      char v38 = 1;
    }
    else
    {
      *long long v24 = *(void *)v25;
      swift_retain();
      char v38 = 0;
    }
    *((unsigned char *)v24 + v10) = v38;
    uint64_t v39 = (char *)v24 + v22;
    unint64_t v40 = ((unint64_t)v24 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v41 = (unint64_t)&v25[v22 + 7] & 0xFFFFFFFFFFFFFFF8;
    uint64_t v42 = *(void *)v41;
    uint64_t v43 = *(void *)(v41 + 8);
    char v44 = *(unsigned char *)(v41 + 16);
    sub_21F7642E0(*(void *)v41, v43, v44, (uint64_t (*)(void))sub_21F7642FC);
    *(void *)unint64_t v40 = v42;
    *(void *)(v40 + 8) = v43;
    *(unsigned char *)(v40 + 16) = v44;
    unint64_t v45 = ((unint64_t)v24 + v22 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v46 = (unint64_t)&v25[v22 + 31] & 0xFFFFFFFFFFFFFFF8;
    uint64_t v47 = *(void *)v46;
    uint64_t v48 = *(void *)(v46 + 8);
    char v49 = *(unsigned char *)(v46 + 16);
    sub_21F7642E0(*(void *)v46, v48, v49, (uint64_t (*)(void))sub_21F7642D0);
    *(void *)unint64_t v45 = v47;
    *(void *)(v45 + 8) = v48;
    *(unsigned char *)(v45 + 16) = v49;
    unint64_t v50 = ((unint64_t)v24 + v22 + 55) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v51 = (unint64_t)&v25[v22 + 55] & 0xFFFFFFFFFFFFFFF8;
    uint64_t v52 = *(void *)v51;
    LOBYTE(v48) = *(unsigned char *)(v51 + 8);
    sub_21F7642F0(*(void *)v51, v48);
    *(void *)unint64_t v50 = v52;
    *(unsigned char *)(v50 + 8) = v48;
    unint64_t v53 = ((unint64_t)v24 + v22 + 71) & 0xFFFFFFFFFFFFFFF8;
    long long v54 = &v25[v22];
    uint64_t v163 = &v25[v22];
    unint64_t v55 = (unint64_t)&v25[v22 + 71] & 0xFFFFFFFFFFFFFFF8;
    uint64_t v56 = *(void *)v55;
    uint64_t v57 = *(void *)(v55 + 8);
    uint64_t v58 = *(void *)(v55 + 16);
    uint64_t v59 = *(void *)(v55 + 24);
    char v60 = *(unsigned char *)(v55 + 32);
    sub_21F764300(*(void *)v55, v57, v58, v59, v60);
    *(void *)unint64_t v53 = v56;
    *(void *)(v53 + 8) = v57;
    *(void *)(v53 + 16) = v58;
    *(void *)(v53 + 24) = v59;
    *(unsigned char *)(v53 + 32) = v60;
    unint64_t v61 = (unint64_t)(v39 + 111) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v62 = (unint64_t)(v54 + 111) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v63 = *(void *)v62;
    uint64_t v64 = *(void *)(v62 + 8);
    uint64_t v65 = *(void *)(v62 + 16);
    uint64_t v66 = *(void *)(v62 + 24);
    uint64_t v67 = *(void *)(v62 + 32);
    uint64_t v68 = *(void *)(v62 + 40);
    uint64_t v69 = *(void *)(v62 + 48);
    LOBYTE(v53) = *(unsigned char *)(v62 + 56);
    sub_21F7644A8(*(void *)v62, v64, v65, v66, v67, v68, v69, v53);
    *(void *)unint64_t v61 = v63;
    *(void *)(v61 + 8) = v64;
    *(void *)(v61 + 16) = v65;
    *(void *)(v61 + 24) = v66;
    *(void *)(v61 + 32) = v67;
    *(void *)(v61 + 40) = v68;
    *(void *)(v61 + 48) = v69;
    *(unsigned char *)(v61 + 56) = v53;
    unint64_t v70 = (unint64_t)(v39 + 175) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v71 = (unint64_t)(v163 + 175) & 0xFFFFFFFFFFFFFFF8;
    if (*(unsigned char *)(v71 + 283))
    {
      int v72 = *(unsigned __int8 *)(v71 + 40);
      if (v72 == 255)
      {
        long long v73 = *(_OWORD *)v71;
        long long v74 = *(_OWORD *)(v71 + 16);
        *(_OWORD *)(v70 + 25) = *(_OWORD *)(v71 + 25);
        *(_OWORD *)unint64_t v70 = v73;
        *(_OWORD *)(v70 + 16) = v74;
      }
      else
      {
        uint64_t v76 = *(void *)(v71 + 24);
        *(void *)(v70 + 24) = v76;
        *(void *)(v70 + 32) = *(void *)(v71 + 32);
        if (v72)
        {
          (**(void (***)(unint64_t, unint64_t))(v76 - 8))((unint64_t)(v39 + 175) & 0xFFFFFFFFFFFFFFF8, v71);
          *(unsigned char *)(v70 + 40) = 1;
        }
        else
        {
          (**(void (***)(unint64_t, unint64_t))(v76 - 8))((unint64_t)(v39 + 175) & 0xFFFFFFFFFFFFFFF8, v71);
          *(unsigned char *)(v70 + 40) = 0;
        }
      }
      uint64_t v77 = (_OWORD *)(v70 + 48);
      uint64_t v78 = (long long *)(v71 + 48);
      int v79 = *(unsigned __int8 *)(v71 + 88);
      if (v79 == 255)
      {
        long long v80 = *v78;
        long long v81 = *(_OWORD *)(v71 + 64);
        *(_OWORD *)(v70 + 73) = *(_OWORD *)(v71 + 73);
        *uint64_t v77 = v80;
        *(_OWORD *)(v70 + 64) = v81;
      }
      else
      {
        uint64_t v82 = *(void *)(v71 + 72);
        *(void *)(v70 + 72) = v82;
        *(void *)(v70 + 80) = *(void *)(v71 + 80);
        (**(void (***)(_OWORD *, long long *))(v82 - 8))(v77, v78);
        *(unsigned char *)(v70 + 88) = (v79 & 1) != 0;
      }
      int v83 = (_OWORD *)(v70 + 96);
      int v84 = (long long *)(v71 + 96);
      int v85 = *(unsigned __int8 *)(v71 + 136);
      if (v85 == 255)
      {
        long long v86 = *v84;
        long long v87 = *(_OWORD *)(v71 + 112);
        *(_OWORD *)(v70 + 121) = *(_OWORD *)(v71 + 121);
        *int v83 = v86;
        *(_OWORD *)(v70 + 112) = v87;
      }
      else
      {
        uint64_t v88 = *(void *)(v71 + 120);
        *(void *)(v70 + 120) = v88;
        *(void *)(v70 + 128) = *(void *)(v71 + 128);
        (**(void (***)(_OWORD *, long long *))(v88 - 8))(v83, v84);
        *(unsigned char *)(v70 + 136) = (v85 & 1) != 0;
      }
      unsigned int v89 = (_OWORD *)(v70 + 144);
      long long v90 = (long long *)(v71 + 144);
      int v91 = *(unsigned __int8 *)(v71 + 184);
      if (v91 == 255)
      {
        long long v92 = *v90;
        long long v93 = *(_OWORD *)(v71 + 160);
        *(_OWORD *)(v70 + 169) = *(_OWORD *)(v71 + 169);
        *unsigned int v89 = v92;
        *(_OWORD *)(v70 + 160) = v93;
      }
      else
      {
        uint64_t v94 = *(void *)(v71 + 168);
        *(void *)(v70 + 168) = v94;
        *(void *)(v70 + 176) = *(void *)(v71 + 176);
        (**(void (***)(_OWORD *, long long *))(v94 - 8))(v89, v90);
        *(unsigned char *)(v70 + 184) = (v91 & 1) != 0;
      }
      uint64_t v95 = (_OWORD *)(v70 + 192);
      unint64_t v96 = (long long *)(v71 + 192);
      int v97 = *(unsigned __int8 *)(v71 + 232);
      if (v97 == 255)
      {
        long long v98 = *v96;
        long long v99 = *(_OWORD *)(v71 + 208);
        *(_OWORD *)(v70 + 217) = *(_OWORD *)(v71 + 217);
        _OWORD *v95 = v98;
        *(_OWORD *)(v70 + 208) = v99;
      }
      else
      {
        uint64_t v100 = *(void *)(v71 + 216);
        *(void *)(v70 + 216) = v100;
        *(void *)(v70 + 224) = *(void *)(v71 + 224);
        (**(void (***)(_OWORD *, long long *))(v100 - 8))(v95, v96);
        *(unsigned char *)(v70 + 232) = (v97 & 1) != 0;
      }
      uint64_t v101 = (_OWORD *)(v70 + 240);
      uint64_t v102 = (long long *)(v71 + 240);
      int v103 = *(unsigned __int8 *)(v71 + 280);
      if (v103 == 255)
      {
        long long v104 = *v102;
        long long v105 = *(_OWORD *)(v71 + 256);
        *(_OWORD *)(v70 + 265) = *(_OWORD *)(v71 + 265);
        *uint64_t v101 = v104;
        *(_OWORD *)(v70 + 256) = v105;
      }
      else
      {
        uint64_t v106 = *(void *)(v71 + 264);
        *(void *)(v70 + 264) = v106;
        *(void *)(v70 + 272) = *(void *)(v71 + 272);
        (**(void (***)(_OWORD *, long long *))(v106 - 8))(v101, v102);
        int v107 = (BOOL *)(v70 + 280);
        *int v107 = (v103 & 1) != 0;
      }
      uint64_t v75 = v132;
      *(_WORD *)(v70 + 281) = *(_WORD *)(v71 + 281);
      *(unsigned char *)(v70 + 283) = 1;
    }
    else
    {
      *(void *)unint64_t v70 = *(void *)v71;
      *(unsigned char *)(v70 + 283) = 0;
      swift_retain();
      uint64_t v75 = v132;
    }
    uint64_t v108 = ~v75;
    unint64_t v109 = (v70 + 291) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v110 = (v71 + 291) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v111 = *(void *)v110;
    char v112 = *(unsigned char *)(v110 + 8);
    sub_21F7642F0(*(void *)v110, v112);
    *(void *)unint64_t v109 = v111;
    *(unsigned char *)(v109 + 8) = v112;
    unint64_t v113 = (v70 + 307) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v114 = (v71 + 307) & 0xFFFFFFFFFFFFFFF8;
    if (*(unsigned char *)(v114 + 80))
    {
      *(unsigned char *)unint64_t v113 = *(unsigned char *)v114;
      uint64_t v115 = *(void *)(v114 + 8);
      *(unsigned char *)(v113 + 16) = *(unsigned char *)(v114 + 16);
      *(void *)(v113 + 8) = v115;
      uint64_t v116 = *(void *)(v114 + 24);
      *(unsigned char *)(v113 + 32) = *(unsigned char *)(v114 + 32);
      *(void *)(v113 + 24) = v116;
      unint64_t v117 = (_OWORD *)(v113 + 40);
      unint64_t v118 = (long long *)(v114 + 40);
      uint64_t v119 = *(void *)(v114 + 64);
      uint64_t v120 = v136;
      if (v119)
      {
        *(void *)(v113 + 64) = v119;
        *(void *)(v113 + 72) = *(void *)(v114 + 72);
        (**(void (***)(_OWORD *, long long *))(v119 - 8))(v117, v118);
      }
      else
      {
        long long v123 = *v118;
        long long v124 = *(_OWORD *)(v114 + 56);
        *(void *)(v113 + 72) = *(void *)(v114 + 72);
        *unint64_t v117 = v123;
        *(_OWORD *)(v113 + 56) = v124;
      }
      uint64_t v122 = v133;
      unint64_t v121 = v134;
      *(unsigned char *)(v113 + 80) = 1;
    }
    else
    {
      *(void *)unint64_t v113 = *(void *)v114;
      *(unsigned char *)(v113 + 80) = 0;
      swift_retain();
      uint64_t v120 = v136;
      uint64_t v122 = v133;
      unint64_t v121 = v134;
    }
    unint64_t v125 = (v122 + v113) & v121;
    unint64_t v126 = (v122 + v114) & v121;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v120 + 16))(v125, v126, v156);
    *(void *)((v135 + v125) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v135 + v126) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v127 = (v154 + v125) & v108;
    unint64_t v128 = (v154 + v126) & v108;
    uint64_t v129 = *(void (**)(unint64_t, unint64_t, uint64_t))(v158 + 16);
    swift_retain();
    v129(v127, v128, v160);
    return a1;
  }
  return (uint64_t *)v31;
}

uint64_t sub_21FA11D0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v169 = sub_21FA24220();
  uint64_t v7 = *(void *)(v169 - 8);
  uint64_t v167 = v7;
  int v8 = *(_DWORD *)(v7 + 80) & 0xF8;
  uint64_t v170 = sub_21FA24320();
  uint64_t v9 = *(void *)(v170 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v168 = sub_21FA24970();
  uint64_t v11 = *(void *)(v168 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = sub_21FA24730();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = v8 | v10 | v12 | v15 | 7;
  uint64_t v17 = v6 + v16;
  uint64_t v172 = a1;
  int v18 = (unsigned __int8 *)((v6 + v16 + a1) & ~v16);
  unsigned int v19 = (unsigned __int8 *)((v17 + a2) & ~v16);
  uint64_t v20 = *(void *)(v7 + 64);
  if (v18 == v19)
  {
    unint64_t v27 = *(void *)(v14 + 64)
        + ((v15
          + ((*(void *)(v11 + 64) + ((*(void *)(v9 + 64) + v12 + ((v20 + v10) & ~v10)) & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8)
          + 8) & ~v15);
    if (v27 + 1 > 8) {
      uint64_t v22 = v27 + 1;
    }
    else {
      uint64_t v22 = 8;
    }
  }
  else
  {
    uint64_t v163 = *(void *)(v9 + 64) + v12;
    uint64_t v164 = *(void *)(v11 + 64) + 7;
    uint64_t v165 = v15 + 8;
    uint64_t v160 = *(void *)(v14 + 64);
    uint64_t v21 = v160 + ((v15 + 8 + ((v164 + ((v163 + ((v20 + v10) & ~v10)) & ~v12)) & 0xFFFFFFFFFFFFFFF8)) & ~v15);
    if ((unint64_t)(v21 + 1) > 8) {
      uint64_t v22 = v21 + 1;
    }
    else {
      uint64_t v22 = 8;
    }
    unsigned int v23 = v18[v22];
    unsigned int v24 = v23 - 2;
    if (v23 >= 2)
    {
      if (v22 <= 3) {
        uint64_t v25 = v22;
      }
      else {
        uint64_t v25 = 4;
      }
      switch(v25)
      {
        case 1:
          int v26 = *v18;
          if (v22 < 4) {
            goto LABEL_18;
          }
          goto LABEL_20;
        case 2:
          int v26 = *(unsigned __int16 *)v18;
          if (v22 >= 4) {
            goto LABEL_20;
          }
          goto LABEL_18;
        case 3:
          int v26 = *(unsigned __int16 *)v18 | (v18[2] << 16);
          if (v22 < 4) {
            goto LABEL_18;
          }
          goto LABEL_20;
        case 4:
          int v26 = *(_DWORD *)v18;
          if (v22 < 4) {
LABEL_18:
          }
            unsigned int v23 = (v26 | (v24 << (8 * v22))) + 2;
          else {
LABEL_20:
          }
            unsigned int v23 = v26 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v166 = v13;
    uint64_t v28 = ~v10;
    uint64_t v29 = ~v12;
    uint64_t v161 = ~v15;
    uint64_t v162 = *(void *)(v13 - 8);
    if (v23 == 1)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v167 + 8))(v18, v169);
      unint64_t v30 = (unint64_t)&v18[v10 + v20] & v28;
      (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v30, v170);
      unint64_t v31 = (v163 + v30) & v29;
      (*(void (**)(unint64_t, uint64_t))(v11 + 8))(v31, v168);
      unint64_t v32 = v164 + v31;
      uint64_t v28 = ~v10;
      (*(void (**)(unint64_t, uint64_t))(v162 + 8))((v165 + (v32 & 0xFFFFFFFFFFFFFFF8)) & v161, v166);
    }
    else
    {
      swift_release();
    }
    unsigned int v33 = v19[v22];
    unsigned int v34 = v33 - 2;
    if (v33 >= 2)
    {
      if (v22 <= 3) {
        uint64_t v35 = v22;
      }
      else {
        uint64_t v35 = 4;
      }
      switch(v35)
      {
        case 1:
          int v36 = *v19;
          if (v22 >= 4) {
            goto LABEL_38;
          }
          goto LABEL_34;
        case 2:
          int v36 = *(unsigned __int16 *)v19;
          if (v22 >= 4) {
            goto LABEL_38;
          }
          goto LABEL_34;
        case 3:
          int v36 = *(unsigned __int16 *)v19 | (v19[2] << 16);
          if (v22 < 4) {
            goto LABEL_34;
          }
          goto LABEL_38;
        case 4:
          int v36 = *(_DWORD *)v19;
          if (v22 < 4)
          {
LABEL_34:
            unsigned int v33 = (v36 | (v34 << (8 * v22))) + 2;
            break;
          }
LABEL_38:
          if (v36 != -1) {
            goto LABEL_39;
          }
          goto LABEL_36;
        default:
          break;
      }
    }
    if (v33 == 1)
    {
LABEL_36:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v167 + 16))(v18, v19, v169);
      unint64_t v37 = (unint64_t)&v18[v10 + v20] & v28;
      unint64_t v38 = (unint64_t)&v19[v10 + v20] & v28;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(v37, v38, v170);
      unint64_t v39 = (v163 + v37) & v29;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))(v39, (v163 + v38) & v29, v168);
      unint64_t v40 = (void *)((v164 + v39) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v41 = (void *)((v164 + ((v163 + v38) & v29)) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v40 = *v41;
      unint64_t v42 = ((unint64_t)v40 + v165) & v161;
      unint64_t v43 = ((unint64_t)v41 + v165) & v161;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v162 + 16))(v42, v43, v166);
      *(unsigned char *)(v42 + v160) = *(unsigned char *)(v43 + v160);
      v18[v22] = 1;
    }
    else
    {
LABEL_39:
      *(void *)int v18 = *(void *)v19;
      v18[v22] = 0;
      swift_retain();
    }
  }
  char v44 = &v18[v22 + 1];
  unint64_t v45 = (unint64_t)(v44 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v46 = &v19[v22 + 1];
  unint64_t v47 = (unint64_t)(v46 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v48 = *(void *)v47;
  uint64_t v49 = *(void *)(v47 + 8);
  char v50 = *(unsigned char *)(v47 + 16);
  sub_21F7642E0(*(void *)v47, v49, v50, (uint64_t (*)(void))sub_21F7642FC);
  uint64_t v51 = *(void *)v45;
  uint64_t v52 = *(void *)(v45 + 8);
  char v53 = *(unsigned char *)(v45 + 16);
  *(void *)unint64_t v45 = v48;
  *(void *)(v45 + 8) = v49;
  *(unsigned char *)(v45 + 16) = v50;
  sub_21F7757E8(v51, v52, v53, (uint64_t (*)(void))sub_21F7757E4);
  unint64_t v54 = (unint64_t)(v44 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v55 = (unint64_t)(v46 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v56 = *(void *)v55;
  uint64_t v57 = *(void *)(v55 + 8);
  char v58 = *(unsigned char *)(v55 + 16);
  sub_21F7642E0(*(void *)v55, v57, v58, (uint64_t (*)(void))sub_21F7642D0);
  uint64_t v59 = *(void *)v54;
  uint64_t v60 = *(void *)(v54 + 8);
  char v61 = *(unsigned char *)(v54 + 16);
  *(void *)unint64_t v54 = v56;
  *(void *)(v54 + 8) = v57;
  *(unsigned char *)(v54 + 16) = v58;
  sub_21F7757E8(v59, v60, v61, (uint64_t (*)(void))sub_21F7757E4);
  unint64_t v62 = (unint64_t)(v44 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v63 = (unint64_t)(v46 + 55) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v64 = *(void *)v63;
  LOBYTE(v57) = *(unsigned char *)(v63 + 8);
  sub_21F7642F0(*(void *)v63, v57);
  uint64_t v65 = *(void *)v62;
  char v66 = *(unsigned char *)(v62 + 8);
  *(void *)unint64_t v62 = v64;
  *(unsigned char *)(v62 + 8) = v57;
  sub_21F7757F8(v65, v66, MEMORY[0x263F8EED8], MEMORY[0x263F8EEA0]);
  unint64_t v67 = (unint64_t)(v44 + 71) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v68 = v46;
  int v171 = v46;
  unint64_t v69 = (unint64_t)(v46 + 71) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v70 = *(void *)v69;
  uint64_t v71 = *(void *)(v69 + 8);
  uint64_t v72 = *(void *)(v69 + 16);
  uint64_t v73 = *(void *)(v69 + 24);
  char v74 = *(unsigned char *)(v69 + 32);
  sub_21F764300(*(void *)v69, v71, v72, v73, v74);
  uint64_t v75 = *(void *)v67;
  uint64_t v76 = *(void *)(v67 + 8);
  uint64_t v77 = *(void *)(v67 + 16);
  uint64_t v78 = *(void *)(v67 + 24);
  char v79 = *(unsigned char *)(v67 + 32);
  *(void *)unint64_t v67 = v70;
  *(void *)(v67 + 8) = v71;
  *(void *)(v67 + 16) = v72;
  *(void *)(v67 + 24) = v73;
  *(unsigned char *)(v67 + 32) = v74;
  sub_21F77580C(v75, v76, v77, v78, v79);
  unint64_t v80 = (unint64_t)(v44 + 111) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v81 = (unint64_t)(v68 + 111) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v82 = *(void *)v81;
  uint64_t v83 = *(void *)(v81 + 8);
  uint64_t v84 = *(void *)(v81 + 16);
  uint64_t v85 = *(void *)(v81 + 24);
  uint64_t v86 = *(void *)(v81 + 32);
  uint64_t v87 = *(void *)(v81 + 40);
  uint64_t v88 = *(void *)(v81 + 48);
  char v89 = *(unsigned char *)(v81 + 56);
  sub_21F7644A8(*(void *)v81, v83, v84, v85, v86, v87, v88, v89);
  uint64_t v90 = *(void *)v80;
  uint64_t v91 = *(void *)(v80 + 8);
  uint64_t v92 = *(void *)(v80 + 16);
  uint64_t v93 = *(void *)(v80 + 24);
  uint64_t v94 = *(void *)(v80 + 32);
  uint64_t v95 = *(void *)(v80 + 40);
  uint64_t v96 = *(void *)(v80 + 48);
  char v97 = *(unsigned char *)(v80 + 56);
  *(void *)unint64_t v80 = v82;
  *(void *)(v80 + 8) = v83;
  *(void *)(v80 + 16) = v84;
  *(void *)(v80 + 24) = v85;
  *(void *)(v80 + 32) = v86;
  *(void *)(v80 + 40) = v87;
  *(void *)(v80 + 48) = v88;
  *(unsigned char *)(v80 + 56) = v89;
  sub_21F77598C(v90, v91, v92, v93, v94, v95, v96, v97);
  unint64_t v98 = (unint64_t)(v44 + 175) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v99 = (unint64_t)(v171 + 175) & 0xFFFFFFFFFFFFFFF8;
  if (v98 != v99)
  {
    sub_21F76CA84((unint64_t)(v44 + 175) & 0xFFFFFFFFFFFFFFF8, &qword_26AD4A218);
    if (*(unsigned char *)(v99 + 283))
    {
      int v100 = *(unsigned __int8 *)(v99 + 40);
      if (v100 == 255)
      {
        long long v101 = *(_OWORD *)v99;
        long long v102 = *(_OWORD *)(v99 + 16);
        *(_OWORD *)(v98 + 25) = *(_OWORD *)(v99 + 25);
        *(_OWORD *)unint64_t v98 = v101;
        *(_OWORD *)(v98 + 16) = v102;
      }
      else
      {
        uint64_t v103 = *(void *)(v99 + 24);
        *(void *)(v98 + 24) = v103;
        *(void *)(v98 + 32) = *(void *)(v99 + 32);
        if (v100)
        {
          (**(void (***)(unint64_t, unint64_t))(v103 - 8))((unint64_t)(v44 + 175) & 0xFFFFFFFFFFFFFFF8, v99);
          *(unsigned char *)(v98 + 40) = 1;
        }
        else
        {
          (**(void (***)(unint64_t, unint64_t))(v103 - 8))((unint64_t)(v44 + 175) & 0xFFFFFFFFFFFFFFF8, v99);
          *(unsigned char *)(v98 + 40) = 0;
        }
      }
      long long v104 = (_OWORD *)(v98 + 48);
      long long v105 = (long long *)(v99 + 48);
      int v106 = *(unsigned __int8 *)(v99 + 88);
      if (v106 == 255)
      {
        long long v107 = *v105;
        long long v108 = *(_OWORD *)(v99 + 64);
        *(_OWORD *)(v98 + 73) = *(_OWORD *)(v99 + 73);
        *long long v104 = v107;
        *(_OWORD *)(v98 + 64) = v108;
      }
      else
      {
        uint64_t v109 = *(void *)(v99 + 72);
        *(void *)(v98 + 72) = v109;
        *(void *)(v98 + 80) = *(void *)(v99 + 80);
        (**(void (***)(_OWORD *, long long *))(v109 - 8))(v104, v105);
        *(unsigned char *)(v98 + 88) = (v106 & 1) != 0;
      }
      unint64_t v110 = (_OWORD *)(v98 + 96);
      uint64_t v111 = (long long *)(v99 + 96);
      int v112 = *(unsigned __int8 *)(v99 + 136);
      if (v112 == 255)
      {
        long long v113 = *v111;
        long long v114 = *(_OWORD *)(v99 + 112);
        *(_OWORD *)(v98 + 121) = *(_OWORD *)(v99 + 121);
        *unint64_t v110 = v113;
        *(_OWORD *)(v98 + 112) = v114;
      }
      else
      {
        uint64_t v115 = *(void *)(v99 + 120);
        *(void *)(v98 + 120) = v115;
        *(void *)(v98 + 128) = *(void *)(v99 + 128);
        (**(void (***)(_OWORD *, long long *))(v115 - 8))(v110, v111);
        *(unsigned char *)(v98 + 136) = (v112 & 1) != 0;
      }
      uint64_t v116 = (_OWORD *)(v98 + 144);
      unint64_t v117 = (long long *)(v99 + 144);
      int v118 = *(unsigned __int8 *)(v99 + 184);
      if (v118 == 255)
      {
        long long v119 = *v117;
        long long v120 = *(_OWORD *)(v99 + 160);
        *(_OWORD *)(v98 + 169) = *(_OWORD *)(v99 + 169);
        *uint64_t v116 = v119;
        *(_OWORD *)(v98 + 160) = v120;
      }
      else
      {
        uint64_t v121 = *(void *)(v99 + 168);
        *(void *)(v98 + 168) = v121;
        *(void *)(v98 + 176) = *(void *)(v99 + 176);
        (**(void (***)(_OWORD *, long long *))(v121 - 8))(v116, v117);
        *(unsigned char *)(v98 + 184) = (v118 & 1) != 0;
      }
      uint64_t v122 = (_OWORD *)(v98 + 192);
      long long v123 = (long long *)(v99 + 192);
      int v124 = *(unsigned __int8 *)(v99 + 232);
      if (v124 == 255)
      {
        long long v125 = *v123;
        long long v126 = *(_OWORD *)(v99 + 208);
        *(_OWORD *)(v98 + 217) = *(_OWORD *)(v99 + 217);
        *uint64_t v122 = v125;
        *(_OWORD *)(v98 + 208) = v126;
      }
      else
      {
        uint64_t v127 = *(void *)(v99 + 216);
        *(void *)(v98 + 216) = v127;
        *(void *)(v98 + 224) = *(void *)(v99 + 224);
        (**(void (***)(_OWORD *, long long *))(v127 - 8))(v122, v123);
        *(unsigned char *)(v98 + 232) = (v124 & 1) != 0;
      }
      unint64_t v128 = (_OWORD *)(v98 + 240);
      uint64_t v129 = (long long *)(v99 + 240);
      int v130 = *(unsigned __int8 *)(v99 + 280);
      if (v130 == 255)
      {
        long long v131 = *v129;
        long long v132 = *(_OWORD *)(v99 + 256);
        *(_OWORD *)(v98 + 265) = *(_OWORD *)(v99 + 265);
        *unint64_t v128 = v131;
        *(_OWORD *)(v98 + 256) = v132;
      }
      else
      {
        uint64_t v133 = *(void *)(v99 + 264);
        *(void *)(v98 + 264) = v133;
        *(void *)(v98 + 272) = *(void *)(v99 + 272);
        (**(void (***)(_OWORD *, long long *))(v133 - 8))(v128, v129);
        unint64_t v134 = (BOOL *)(v98 + 280);
        *unint64_t v134 = (v130 & 1) != 0;
      }
      *(_WORD *)(v98 + 281) = *(_WORD *)(v99 + 281);
      *(unsigned char *)(v98 + 283) = 1;
    }
    else
    {
      *(void *)unint64_t v98 = *(void *)v99;
      *(unsigned char *)(v98 + 283) = 0;
      swift_retain();
    }
  }
  unint64_t v135 = (v98 + 291) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v136 = (v99 + 291) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v137 = *(void *)v136;
  char v138 = *(unsigned char *)(v136 + 8);
  sub_21F7642F0(*(void *)v136, v138);
  uint64_t v139 = *(void *)v135;
  char v140 = *(unsigned char *)(v135 + 8);
  *(void *)unint64_t v135 = v137;
  *(unsigned char *)(v135 + 8) = v138;
  sub_21F7757F8(v139, v140, MEMORY[0x263F8EED8], MEMORY[0x263F8EEA0]);
  unint64_t v141 = (v98 + 307) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v142 = (v99 + 307) & 0xFFFFFFFFFFFFFFF8;
  if (v141 != v142)
  {
    sub_21F76CA84(v141, &qword_26AD4A228);
    if (*(unsigned char *)(v142 + 80))
    {
      *(unsigned char *)unint64_t v141 = *(unsigned char *)v142;
      uint64_t v143 = *(void *)(v142 + 8);
      *(unsigned char *)(v141 + 16) = *(unsigned char *)(v142 + 16);
      *(void *)(v141 + 8) = v143;
      uint64_t v144 = *(void *)(v142 + 24);
      *(unsigned char *)(v141 + 32) = *(unsigned char *)(v142 + 32);
      *(void *)(v141 + 24) = v144;
      uint64_t v145 = (_OWORD *)(v141 + 40);
      uint64_t v146 = (long long *)(v142 + 40);
      uint64_t v147 = *(void *)(v142 + 64);
      if (v147)
      {
        *(void *)(v141 + 64) = v147;
        *(void *)(v141 + 72) = *(void *)(v142 + 72);
        (**(void (***)(_OWORD *, long long *))(v147 - 8))(v145, v146);
      }
      else
      {
        long long v148 = *v146;
        long long v149 = *(_OWORD *)(v142 + 56);
        *(void *)(v141 + 72) = *(void *)(v142 + 72);
        *uint64_t v145 = v148;
        *(_OWORD *)(v141 + 56) = v149;
      }
      *(unsigned char *)(v141 + 80) = 1;
    }
    else
    {
      *(void *)unint64_t v141 = *(void *)v142;
      *(unsigned char *)(v141 + 80) = 0;
      swift_retain();
    }
  }
  uint64_t v150 = sub_21F76CA40(&qword_26AD47EF8);
  uint64_t v151 = *(void *)(v150 - 8);
  uint64_t v152 = v151 + 24;
  uint64_t v153 = *(_DWORD *)(v151 + 80) & 0xF8 | 7;
  uint64_t v154 = (v141 + v153 + 81) & ~v153;
  uint64_t v155 = (v142 + v153 + 81) & ~v153;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v151 + 24))(v154, v155, v150);
  uint64_t v156 = *(void *)(v152 + 40) + 7;
  *(void *)((v156 + v154) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v156 + v155) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  uint64_t v157 = sub_21FA252F0();
  uint64_t v158 = *(void *)(v157 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v158 + 24))(((v156 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v158 + 80) + 8 + v154) & ~(unint64_t)*(unsigned __int8 *)(v158 + 80), ((v156 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v158 + 80) + 8 + v155) & ~(unint64_t)*(unsigned __int8 *)(v158 + 80), v157);
  return v172;
}

uint64_t sub_21FA12A04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v4)();
  uint64_t v98 = *(void *)(v4 + 32);
  uint64_t v94 = sub_21FA24220();
  uint64_t v5 = *(void *)(v94 - 8);
  uint64_t v90 = v5;
  int v6 = *(_DWORD *)(v5 + 80) & 0xF8;
  uint64_t v93 = sub_21FA24320();
  uint64_t v7 = *(void *)(v93 - 8);
  uint64_t v89 = v7;
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v92 = sub_21FA24970();
  uint64_t v9 = *(void *)(v92 - 8);
  uint64_t v88 = v9;
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = sub_21FA24730();
  uint64_t v12 = v10;
  uint64_t v13 = *(unsigned __int8 *)(*(void *)(v11 - 8) + 80);
  uint64_t v14 = v6 | v8 | v10 | v13 | 7;
  uint64_t v15 = v98 + v14;
  uint64_t v99 = a1;
  uint64_t v16 = (void *)((v15 + a1) & ~v14);
  uint64_t v17 = (unsigned __int8 *)((v15 + a2) & ~v14);
  uint64_t v18 = *(void *)(v5 + 64) + v8;
  uint64_t v19 = *(void *)(v7 + 64) + v12;
  uint64_t v20 = *(void *)(v9 + 64) + 7;
  uint64_t v21 = v13 + 8;
  unint64_t v22 = *(void *)(*(void *)(v11 - 8) + 64)
      + ((v13 + 8 + ((v20 + ((v19 + (v18 & ~v8)) & ~v12)) & 0xFFFFFFFFFFFFFFF8)) & ~v13);
  if (v22 + 1 > 8) {
    uint64_t v23 = v22 + 1;
  }
  else {
    uint64_t v23 = 8;
  }
  unsigned int v24 = v17[v23];
  unsigned int v25 = v24 - 2;
  if (v24 >= 2)
  {
    if (v23 <= 3) {
      uint64_t v26 = v23;
    }
    else {
      uint64_t v26 = 4;
    }
    switch(v26)
    {
      case 1:
        int v27 = *v17;
        if (v23 >= 4) {
          goto LABEL_18;
        }
        goto LABEL_14;
      case 2:
        int v27 = *(unsigned __int16 *)v17;
        if (v23 >= 4) {
          goto LABEL_18;
        }
        goto LABEL_14;
      case 3:
        int v27 = *(unsigned __int16 *)((v15 + a2) & ~v14) | (*(unsigned __int8 *)(((v15 + a2) & ~v14) + 2) << 16);
        if (v23 < 4) {
          goto LABEL_14;
        }
        goto LABEL_18;
      case 4:
        int v27 = *(_DWORD *)v17;
        if (v23 < 4)
        {
LABEL_14:
          unsigned int v24 = (v27 | (v25 << (8 * v23))) + 2;
          break;
        }
LABEL_18:
        if (v27 != -1) {
          goto LABEL_19;
        }
        goto LABEL_16;
      default:
        break;
    }
  }
  if (v24 == 1)
  {
LABEL_16:
    uint64_t v28 = ~v8;
    uint64_t v29 = ~v12;
    uint64_t v87 = ~v13;
    unint64_t v30 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v90 + 32);
    uint64_t v91 = v11;
    uint64_t v31 = v94;
    uint64_t v32 = *(void *)(v11 - 8);
    uint64_t v95 = *(void *)(v32 + 64);
    v30(v16, v17, v31);
    char v97 = v16;
    unint64_t v33 = ((unint64_t)v16 + v18) & v28;
    unint64_t v34 = (unint64_t)&v17[v18] & v28;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v89 + 32))(v33, v34, v93);
    unint64_t v35 = (v19 + v33) & v29;
    unint64_t v36 = (v19 + v34) & v29;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v88 + 32))(v35, v36, v92);
    unint64_t v37 = (void *)((v20 + v35) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v38 = (void *)((v20 + v36) & 0xFFFFFFFFFFFFFFF8);
    *unint64_t v37 = *v38;
    unint64_t v39 = ((unint64_t)v37 + v21) & v87;
    unint64_t v40 = ((unint64_t)v38 + v21) & v87;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v32 + 32))(v39, v40, v91);
    *(unsigned char *)(v39 + v95) = *(unsigned char *)(v40 + v95);
    uint64_t v16 = v97;
    char v41 = 1;
  }
  else
  {
LABEL_19:
    char v41 = 0;
    *uint64_t v16 = *(void *)v17;
  }
  *((unsigned char *)v16 + v23) = v41;
  unint64_t v42 = (char *)v16 + v23 + 1;
  unint64_t v43 = &v17[v23 + 1];
  unint64_t v44 = (unint64_t)(v42 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v45 = (unint64_t)(v43 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v46 = *(_OWORD *)v45;
  *(unsigned char *)(v44 + 16) = *(unsigned char *)(v45 + 16);
  *(_OWORD *)unint64_t v44 = v46;
  unint64_t v47 = (unint64_t)(v42 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v48 = (unint64_t)(v43 + 31) & 0xFFFFFFFFFFFFFFF8;
  long long v49 = *(_OWORD *)v48;
  *(unsigned char *)(v47 + 16) = *(unsigned char *)(v48 + 16);
  *(_OWORD *)unint64_t v47 = v49;
  unint64_t v50 = (unint64_t)(v42 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v51 = (unint64_t)(v43 + 55) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v52 = *(void *)v51;
  *(unsigned char *)(v50 + 8) = *(unsigned char *)(v51 + 8);
  *(void *)unint64_t v50 = v52;
  unint64_t v53 = (unint64_t)(v42 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v54 = (unint64_t)(v43 + 71) & 0xFFFFFFFFFFFFFFF8;
  long long v55 = *(_OWORD *)v54;
  long long v56 = *(_OWORD *)(v54 + 16);
  *(unsigned char *)(v53 + 32) = *(unsigned char *)(v54 + 32);
  *(_OWORD *)unint64_t v53 = v55;
  *(_OWORD *)(v53 + 16) = v56;
  uint64_t v57 = (_OWORD *)((unint64_t)(v42 + 111) & 0xFFFFFFFFFFFFFFF8);
  char v58 = (long long *)((unint64_t)(v43 + 111) & 0xFFFFFFFFFFFFFFF8);
  long long v59 = *v58;
  long long v60 = v58[1];
  long long v61 = v58[2];
  *(_OWORD *)((char *)v57 + 41) = *(long long *)((char *)v58 + 41);
  v57[1] = v60;
  v57[2] = v61;
  *uint64_t v57 = v59;
  unint64_t v62 = (void *)((unint64_t)(v42 + 175) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v63 = (const void *)((unint64_t)(v43 + 175) & 0xFFFFFFFFFFFFFFF8);
  memcpy(v62, v63, 0x11CuLL);
  unint64_t v64 = ((unint64_t)v62 + 291) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v65 = ((unint64_t)v63 + 291) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v66 = *(void *)v65;
  *(unsigned char *)(v64 + 8) = *(unsigned char *)(v65 + 8);
  *(void *)unint64_t v64 = v66;
  unint64_t v67 = ((unint64_t)v62 + 307) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v68 = ((unint64_t)v63 + 307) & 0xFFFFFFFFFFFFFFF8;
  long long v69 = *(_OWORD *)(v68 + 16);
  *(_OWORD *)unint64_t v67 = *(_OWORD *)v68;
  *(_OWORD *)(v67 + 16) = v69;
  long long v71 = *(_OWORD *)(v68 + 48);
  long long v70 = *(_OWORD *)(v68 + 64);
  long long v72 = *(_OWORD *)(v68 + 32);
  *(unsigned char *)(v67 + 80) = *(unsigned char *)(v68 + 80);
  *(_OWORD *)(v67 + 48) = v71;
  *(_OWORD *)(v67 + 64) = v70;
  *(_OWORD *)(v67 + 32) = v72;
  uint64_t v73 = sub_21F76CA40(&qword_26AD47EF8);
  uint64_t v74 = *(void *)(v73 - 8);
  uint64_t v75 = v74 + 32;
  uint64_t v76 = *(_DWORD *)(v74 + 80) & 0xF8;
  uint64_t v77 = v76 + 88;
  unint64_t v78 = v76 + 88 + v67;
  unint64_t v79 = ~v76 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v80 = v78 & v79;
  unint64_t v81 = (v77 + v68) & v79;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v74 + 32))(v78 & v79, v81, v73);
  uint64_t v82 = *(void *)(v75 + 32) + 7;
  *(void *)((v82 + v80) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v82 + v81) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v83 = v82 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v84 = sub_21FA252F0();
  uint64_t v85 = *(void *)(v84 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v85 + 32))((v83 + *(unsigned __int8 *)(v85 + 80) + 8 + v80) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80), (v83 + *(unsigned __int8 *)(v85 + 80) + 8 + v81) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80), v84);
  return v99;
}

uint64_t sub_21FA13004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v118 = sub_21FA24220();
  uint64_t v7 = *(void *)(v118 - 8);
  uint64_t v116 = v7;
  int v8 = *(_DWORD *)(v7 + 80) & 0xF8;
  uint64_t v119 = sub_21FA24320();
  uint64_t v9 = *(void *)(v119 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v117 = sub_21FA24970();
  uint64_t v11 = *(void *)(v117 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = sub_21FA24730();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = v8 | v10 | v12 | v15 | 7;
  uint64_t v17 = v6 + v16;
  uint64_t v120 = a1;
  uint64_t v18 = (unsigned __int8 *)((v6 + v16 + a1) & ~v16);
  uint64_t v19 = (unsigned __int8 *)((v17 + a2) & ~v16);
  uint64_t v20 = *(void *)(v7 + 64);
  if (v18 == v19)
  {
    unint64_t v27 = *(void *)(v14 + 64)
        + ((v15
          + ((*(void *)(v11 + 64) + ((*(void *)(v9 + 64) + v12 + ((v20 + v10) & ~v10)) & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8)
          + 8) & ~v15);
    if (v27 + 1 > 8) {
      uint64_t v22 = v27 + 1;
    }
    else {
      uint64_t v22 = 8;
    }
  }
  else
  {
    uint64_t v112 = *(void *)(v9 + 64) + v12;
    uint64_t v113 = *(void *)(v11 + 64) + 7;
    uint64_t v114 = v15 + 8;
    uint64_t v109 = *(void *)(v14 + 64);
    uint64_t v21 = v109 + ((v15 + 8 + ((v113 + ((v112 + ((v20 + v10) & ~v10)) & ~v12)) & 0xFFFFFFFFFFFFFFF8)) & ~v15);
    if ((unint64_t)(v21 + 1) > 8) {
      uint64_t v22 = v21 + 1;
    }
    else {
      uint64_t v22 = 8;
    }
    unsigned int v23 = v18[v22];
    unsigned int v24 = v23 - 2;
    if (v23 >= 2)
    {
      if (v22 <= 3) {
        uint64_t v25 = v22;
      }
      else {
        uint64_t v25 = 4;
      }
      switch(v25)
      {
        case 1:
          int v26 = *v18;
          if (v22 < 4) {
            goto LABEL_18;
          }
          goto LABEL_20;
        case 2:
          int v26 = *(unsigned __int16 *)v18;
          if (v22 >= 4) {
            goto LABEL_20;
          }
          goto LABEL_18;
        case 3:
          int v26 = *(unsigned __int16 *)v18 | (v18[2] << 16);
          if (v22 < 4) {
            goto LABEL_18;
          }
          goto LABEL_20;
        case 4:
          int v26 = *(_DWORD *)v18;
          if (v22 < 4) {
LABEL_18:
          }
            unsigned int v23 = (v26 | (v24 << (8 * v22))) + 2;
          else {
LABEL_20:
          }
            unsigned int v23 = v26 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v115 = v13;
    uint64_t v28 = ~v10;
    uint64_t v29 = ~v12;
    uint64_t v110 = ~v15;
    uint64_t v111 = *(void *)(v13 - 8);
    if (v23 == 1)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v116 + 8))(v18, v118);
      unint64_t v30 = (unint64_t)&v18[v10 + v20] & v28;
      (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v30, v119);
      unint64_t v31 = (v112 + v30) & v29;
      (*(void (**)(unint64_t, uint64_t))(v11 + 8))(v31, v117);
      unint64_t v32 = v113 + v31;
      uint64_t v28 = ~v10;
      (*(void (**)(unint64_t, uint64_t))(v111 + 8))((v114 + (v32 & 0xFFFFFFFFFFFFFFF8)) & v110, v115);
    }
    else
    {
      swift_release();
    }
    unsigned int v33 = v19[v22];
    unsigned int v34 = v33 - 2;
    if (v33 >= 2)
    {
      if (v22 <= 3) {
        uint64_t v35 = v22;
      }
      else {
        uint64_t v35 = 4;
      }
      switch(v35)
      {
        case 1:
          int v36 = *v19;
          if (v22 >= 4) {
            goto LABEL_38;
          }
          goto LABEL_34;
        case 2:
          int v36 = *(unsigned __int16 *)v19;
          if (v22 >= 4) {
            goto LABEL_38;
          }
          goto LABEL_34;
        case 3:
          int v36 = *(unsigned __int16 *)v19 | (v19[2] << 16);
          if (v22 < 4) {
            goto LABEL_34;
          }
          goto LABEL_38;
        case 4:
          int v36 = *(_DWORD *)v19;
          if (v22 < 4)
          {
LABEL_34:
            unsigned int v33 = (v36 | (v34 << (8 * v22))) + 2;
            break;
          }
LABEL_38:
          if (v36 != -1) {
            goto LABEL_39;
          }
          goto LABEL_36;
        default:
          break;
      }
    }
    if (v33 == 1)
    {
LABEL_36:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v116 + 32))(v18, v19, v118);
      unint64_t v37 = (unint64_t)&v18[v10 + v20] & v28;
      unint64_t v38 = (unint64_t)&v19[v10 + v20] & v28;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))(v37, v38, v119);
      unint64_t v39 = (v112 + v37) & v29;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 32))(v39, (v112 + v38) & v29, v117);
      unint64_t v40 = (void *)((v113 + v39) & 0xFFFFFFFFFFFFFFF8);
      char v41 = (void *)((v113 + ((v112 + v38) & v29)) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v40 = *v41;
      unint64_t v42 = ((unint64_t)v40 + v114) & v110;
      unint64_t v43 = ((unint64_t)v41 + v114) & v110;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v111 + 32))(v42, v43, v115);
      *(unsigned char *)(v42 + v109) = *(unsigned char *)(v43 + v109);
      v18[v22] = 1;
    }
    else
    {
LABEL_39:
      *(void *)uint64_t v18 = *(void *)v19;
      v18[v22] = 0;
    }
  }
  unint64_t v44 = &v18[v22 + 1];
  unint64_t v45 = &v19[v22 + 1];
  unint64_t v46 = (unint64_t)(v44 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v47 = (unint64_t)(v45 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v48 = *(unsigned char *)(v47 + 16);
  uint64_t v49 = *(void *)v46;
  uint64_t v50 = *(void *)(v46 + 8);
  char v51 = *(unsigned char *)(v46 + 16);
  *(_OWORD *)unint64_t v46 = *(_OWORD *)v47;
  *(unsigned char *)(v46 + 16) = v48;
  sub_21F7757E8(v49, v50, v51, (uint64_t (*)(void))sub_21F7757E4);
  unint64_t v52 = (unint64_t)(v44 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v53 = (unint64_t)(v45 + 31) & 0xFFFFFFFFFFFFFFF8;
  char v54 = *(unsigned char *)(v53 + 16);
  uint64_t v55 = *(void *)v52;
  uint64_t v56 = *(void *)(v52 + 8);
  char v57 = *(unsigned char *)(v52 + 16);
  *(_OWORD *)unint64_t v52 = *(_OWORD *)v53;
  *(unsigned char *)(v52 + 16) = v54;
  sub_21F7757E8(v55, v56, v57, (uint64_t (*)(void))sub_21F7757E4);
  unint64_t v58 = (unint64_t)(v44 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v59 = (unint64_t)(v45 + 55) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v60 = *(void *)v59;
  LOBYTE(v59) = *(unsigned char *)(v59 + 8);
  uint64_t v61 = *(void *)v58;
  char v62 = *(unsigned char *)(v58 + 8);
  *(void *)unint64_t v58 = v60;
  *(unsigned char *)(v58 + 8) = v59;
  sub_21F7757F8(v61, v62, MEMORY[0x263F8EED8], MEMORY[0x263F8EEA0]);
  unint64_t v63 = (unint64_t)(v45 + 71) & 0xFFFFFFFFFFFFFFF8;
  char v64 = *(unsigned char *)(v63 + 32);
  unint64_t v65 = (unint64_t)(v44 + 71) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v66 = *(void *)v65;
  uint64_t v67 = *(void *)(v65 + 8);
  uint64_t v68 = *(void *)(v65 + 16);
  uint64_t v69 = *(void *)(v65 + 24);
  char v70 = *(unsigned char *)(v65 + 32);
  long long v71 = *(_OWORD *)(v63 + 16);
  *(_OWORD *)unint64_t v65 = *(_OWORD *)v63;
  *(_OWORD *)(v65 + 16) = v71;
  *(unsigned char *)(v65 + 32) = v64;
  sub_21F77580C(v66, v67, v68, v69, v70);
  unint64_t v72 = (unint64_t)(v45 + 111) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v73 = *(void *)(v72 + 48);
  char v74 = *(unsigned char *)(v72 + 56);
  unint64_t v75 = (unint64_t)(v44 + 111) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v76 = *(void *)v75;
  uint64_t v77 = *(void *)(v75 + 8);
  uint64_t v78 = *(void *)(v75 + 16);
  uint64_t v79 = *(void *)(v75 + 24);
  uint64_t v80 = *(void *)(v75 + 32);
  uint64_t v81 = *(void *)(v75 + 40);
  uint64_t v82 = *(void *)(v75 + 48);
  char v83 = *(unsigned char *)(v75 + 56);
  long long v84 = *(_OWORD *)(v72 + 16);
  long long v85 = *(_OWORD *)(v72 + 32);
  *(_OWORD *)unint64_t v75 = *(_OWORD *)v72;
  *(_OWORD *)(v75 + 16) = v84;
  *(_OWORD *)(v75 + 32) = v85;
  *(void *)(v75 + 48) = v73;
  *(unsigned char *)(v75 + 56) = v74;
  sub_21F77598C(v76, v77, v78, v79, v80, v81, v82, v83);
  uint64_t v86 = (void *)((unint64_t)(v44 + 175) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v87 = (unint64_t)(v45 + 175) & 0xFFFFFFFFFFFFFFF8;
  if (v86 != (void *)v87)
  {
    sub_21F76CA84((uint64_t)v86, &qword_26AD4A218);
    memcpy(v86, (const void *)((unint64_t)(v45 + 175) & 0xFFFFFFFFFFFFFFF8), 0x11CuLL);
  }
  unint64_t v88 = ((unint64_t)v86 + 291) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v89 = (v87 + 291) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v90 = *(void *)v89;
  LOBYTE(v89) = *(unsigned char *)(v89 + 8);
  uint64_t v91 = *(void *)v88;
  char v92 = *(unsigned char *)(v88 + 8);
  *(void *)unint64_t v88 = v90;
  *(unsigned char *)(v88 + 8) = v89;
  sub_21F7757F8(v91, v92, MEMORY[0x263F8EED8], MEMORY[0x263F8EEA0]);
  unint64_t v93 = ((unint64_t)v86 + 307) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v94 = (v87 + 307) & 0xFFFFFFFFFFFFFFF8;
  if (v93 != v94)
  {
    sub_21F76CA84(v93, &qword_26AD4A228);
    long long v95 = *(_OWORD *)(v94 + 16);
    *(_OWORD *)unint64_t v93 = *(_OWORD *)v94;
    *(_OWORD *)(v93 + 16) = v95;
    long long v97 = *(_OWORD *)(v94 + 48);
    long long v96 = *(_OWORD *)(v94 + 64);
    long long v98 = *(_OWORD *)(v94 + 32);
    *(unsigned char *)(v93 + 80) = *(unsigned char *)(v94 + 80);
    *(_OWORD *)(v93 + 48) = v97;
    *(_OWORD *)(v93 + 64) = v96;
    *(_OWORD *)(v93 + 32) = v98;
  }
  uint64_t v99 = sub_21F76CA40(&qword_26AD47EF8);
  uint64_t v100 = *(void *)(v99 - 8);
  uint64_t v101 = v100 + 40;
  uint64_t v102 = *(_DWORD *)(v100 + 80) & 0xF8 | 7;
  uint64_t v103 = (v93 + v102 + 81) & ~v102;
  uint64_t v104 = (v94 + v102 + 81) & ~v102;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v100 + 40))(v103, v104, v99);
  uint64_t v105 = *(void *)(v101 + 24) + 7;
  *(void *)((v105 + v103) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v105 + v104) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  uint64_t v106 = sub_21FA252F0();
  uint64_t v107 = *(void *)(v106 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v107 + 40))(((v105 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v107 + 80) + 8 + v103) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80), ((v105 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v107 + 80) + 8 + v104) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80), v106);
  return v120;
}

uint64_t sub_21FA13890(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v45 = *(void *)(a3 + 16);
  uint64_t v3 = *(void *)(v45 - 8);
  unsigned int v4 = *(_DWORD *)(v3 + 84);
  uint64_t v48 = *(void *)(sub_21FA24220() - 8);
  uint64_t v5 = *(void *)(v48 + 64);
  uint64_t v6 = *(void *)(sub_21FA24320() - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(sub_21FA24970() - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  unint64_t v11 = (*(void *)(v9 + 64) + ((((v5 + v7) & ~v7) + v8 + v10) & ~v10) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void *)(sub_21FA24730() - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = *(void *)(v12 + 64) + ((v11 + v13 + 8) & ~v13);
  if ((unint64_t)(v14 + 1) > 8) {
    uint64_t v15 = v14 + 1;
  }
  else {
    uint64_t v15 = 8;
  }
  uint64_t v16 = *(void *)(sub_21F76CA40(&qword_26AD47EF8) - 8);
  unsigned int v44 = *(_DWORD *)(v16 + 84);
  if (v44 <= 0x7FFFFFFE) {
    unsigned int v17 = 2147483646;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v16 + 84);
  }
  unsigned int v46 = v4;
  if (v4 <= v17) {
    unsigned int v4 = v17;
  }
  uint64_t v18 = sub_21FA252F0();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  if (v4 <= *(_DWORD *)(v19 + 84)) {
    unsigned int v21 = *(_DWORD *)(v19 + 84);
  }
  else {
    unsigned int v21 = v4;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v22 = v10 | v7 | *(_DWORD *)(v48 + 80) & 0xF8 | v13 | 7;
  uint64_t v23 = *(void *)(v3 + 64) + v22;
  uint64_t v24 = v15 + 176;
  uint64_t v25 = *(_DWORD *)(v16 + 80) & 0xF8;
  unint64_t v26 = ~v25 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v27 = v25 + 88;
  uint64_t v28 = *(void *)(v16 + 64) + 7;
  unint64_t v29 = (v28 & 0xFFFFFFFFFFFFFFF8) + v20 + 8;
  if (a2 <= v21) {
    goto LABEL_33;
  }
  unint64_t v30 = ((v29 + ((v27 + ((((v24 + (v23 & ~v22)) & 0xFFFFFFFFFFFFFFF8) + 307) & 0xFFFFFFFFFFFFFFF8)) & v26)) & ~v20)
      + *(void *)(*(void *)(v18 - 8) + 64);
  char v31 = 8 * v30;
  if (v30 <= 3)
  {
    unsigned int v34 = ((a2 - v21 + ~(-1 << v31)) >> v31) + 1;
    if (HIWORD(v34))
    {
      int v32 = *(_DWORD *)((char *)a1 + v30);
      if (!v32) {
        goto LABEL_33;
      }
      goto LABEL_23;
    }
    if (v34 > 0xFF)
    {
      int v32 = *(unsigned __int16 *)((char *)a1 + v30);
      if (!*(unsigned __int16 *)((char *)a1 + v30)) {
        goto LABEL_33;
      }
      goto LABEL_23;
    }
    if (v34 < 2)
    {
LABEL_33:
      if (v46 == v21)
      {
        unint64_t v38 = *(uint64_t (**)(unsigned __int16 *, void, uint64_t))(v3 + 48);
        return v38(a1, v46, v45);
      }
      else
      {
        unint64_t v39 = (v27
             + ((((v24 + (((unint64_t)a1 + v23) & ~v22)) & 0xFFFFFFFFFFFFFFF8) + 307) & 0xFFFFFFFFFFFFFFF8)) & v26;
        if (v17 == v21)
        {
          if (v44 < 0x7FFFFFFE)
          {
            unint64_t v43 = *(void *)((v28 + v39) & 0xFFFFFFFFFFFFFFF8);
            if (v43 >= 0xFFFFFFFF) {
              LODWORD(v43) = -1;
            }
            if ((v43 + 1) >= 2) {
              return v43;
            }
            else {
              return 0;
            }
          }
          else
          {
            unint64_t v40 = *(uint64_t (**)(unint64_t))(v16 + 48);
            return v40(v39);
          }
        }
        else
        {
          unint64_t v41 = (v29 + v39) & ~v20;
          unint64_t v42 = *(uint64_t (**)(unint64_t))(v19 + 48);
          return v42(v41);
        }
      }
    }
  }
  int v32 = *((unsigned __int8 *)a1 + v30);
  if (!*((unsigned char *)a1 + v30)) {
    goto LABEL_33;
  }
LABEL_23:
  int v35 = (v32 - 1) << v31;
  if (v30 > 3) {
    int v35 = 0;
  }
  if (v30)
  {
    if (v30 <= 3) {
      int v36 = v30;
    }
    else {
      int v36 = 4;
    }
    switch(v36)
    {
      case 2:
        int v37 = *a1;
        break;
      case 3:
        int v37 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v37 = *(_DWORD *)a1;
        break;
      default:
        int v37 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v37 = 0;
  }
  return v21 + (v37 | v35) + 1;
}

void sub_21FA13E18(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v49 = v4;
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v51 = *(void *)(sub_21FA24220() - 8);
  uint64_t v6 = *(void *)(v51 + 64);
  uint64_t v7 = *(void *)(sub_21FA24320() - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(sub_21FA24970() - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  unint64_t v12 = (*(void *)(v10 + 64) + ((((v6 + v8) & ~v8) + v9 + v11) & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = *(void *)(sub_21FA24730() - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = *(void *)(v13 + 64) + ((v12 + v14 + 8) & ~v14);
  if ((unint64_t)(v15 + 1) > 8) {
    uint64_t v16 = v15 + 1;
  }
  else {
    uint64_t v16 = 8;
  }
  uint64_t v17 = *(void *)(sub_21F76CA40(&qword_26AD47EF8) - 8);
  unsigned int v48 = *(_DWORD *)(v17 + 84);
  if (v48 <= 0x7FFFFFFE) {
    unsigned int v18 = 2147483646;
  }
  else {
    unsigned int v18 = *(_DWORD *)(v17 + 84);
  }
  unsigned int v50 = v5;
  if (v5 <= v18) {
    unsigned int v5 = v18;
  }
  uint64_t v19 = *(void *)(sub_21FA252F0() - 8);
  uint64_t v20 = v19;
  if (v5 <= *(_DWORD *)(v19 + 84)) {
    unsigned int v21 = *(_DWORD *)(v19 + 84);
  }
  else {
    unsigned int v21 = v5;
  }
  uint64_t v22 = *(void *)(v4 + 64);
  uint64_t v23 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v24 = *(void *)(v19 + 64);
  uint64_t v25 = v11 | v8 | *(_DWORD *)(v51 + 80) & 0xF8 | v14 | 7;
  uint64_t v26 = v22 + v25;
  uint64_t v27 = v16 + 176;
  unint64_t v28 = (((v16 + 176 + ((v22 + v25) & ~v25)) & 0xFFFFFFFFFFFFFFF8) + 307) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v29 = *(_DWORD *)(v17 + 80) & 0xF8;
  unint64_t v30 = ~v29 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v31 = v29 + 88;
  uint64_t v32 = (v29 + 88 + v28) & v30;
  uint64_t v33 = *(void *)(v17 + 64) + 7;
  unint64_t v34 = (v33 & 0xFFFFFFFFFFFFFFF8) + v23 + 8;
  size_t v35 = ((v34 + v32) & ~v23) + v24;
  if (a3 <= v21)
  {
    int v37 = 0;
    int v36 = a1;
  }
  else
  {
    int v36 = a1;
    if (v35 <= 3)
    {
      unsigned int v41 = ((a3 - v21 + ~(-1 << (8 * v35))) >> (8 * v35)) + 1;
      if (HIWORD(v41))
      {
        int v37 = 4;
      }
      else if (v41 >= 0x100)
      {
        int v37 = 2;
      }
      else
      {
        int v37 = v41 > 1;
      }
    }
    else
    {
      int v37 = 1;
    }
  }
  if (v21 < a2)
  {
    unsigned int v38 = ~v21 + a2;
    if (v35 < 4)
    {
      int v39 = (v38 >> (8 * v35)) + 1;
      if (v35)
      {
        int v42 = v38 & ~(-1 << (8 * v35));
        bzero(v36, v35);
        if (v35 == 3)
        {
          *(_WORD *)int v36 = v42;
          v36[2] = BYTE2(v42);
        }
        else if (v35 == 2)
        {
          *(_WORD *)int v36 = v42;
        }
        else
        {
          *int v36 = v42;
        }
      }
    }
    else
    {
      bzero(v36, v35);
      *(_DWORD *)int v36 = v38;
      int v39 = 1;
    }
    switch(v37)
    {
      case 1:
        v36[v35] = v39;
        return;
      case 2:
        *(_WORD *)&v36[v35] = v39;
        return;
      case 3:
        goto LABEL_56;
      case 4:
        *(_DWORD *)&v36[v35] = v39;
        return;
      default:
        return;
    }
  }
  uint64_t v40 = ~v23;
  switch(v37)
  {
    case 1:
      v36[v35] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 2:
      *(_WORD *)&v36[v35] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 3:
LABEL_56:
      __break(1u);
      JUMPOUT(0x21FA143E8);
    case 4:
      *(_DWORD *)&v36[v35] = 0;
      goto LABEL_31;
    default:
LABEL_31:
      if (!a2) {
        return;
      }
LABEL_32:
      if (v50 == v21)
      {
        unint64_t v43 = *(void (**)(unint64_t))(v49 + 56);
        unint64_t v44 = (unint64_t)v36;
LABEL_34:
        v43(v44);
        return;
      }
      unint64_t v44 = (v31 + ((((v27 + ((unint64_t)&v36[v26] & ~v25)) & 0xFFFFFFFFFFFFFFF8) + 307) & 0xFFFFFFFFFFFFFFF8)) & v30;
      if (v18 == v21)
      {
        if (v48 < 0x7FFFFFFE)
        {
          unint64_t v47 = (void *)((v33 + v44) & 0xFFFFFFFFFFFFFFF8);
          if (a2 > 0x7FFFFFFE)
          {
            *unint64_t v47 = 0;
            *(_DWORD *)unint64_t v47 = a2 - 0x7FFFFFFF;
          }
          else
          {
            *unint64_t v47 = a2;
          }
          return;
        }
        unint64_t v43 = *(void (**)(unint64_t))(v17 + 56);
        goto LABEL_34;
      }
      unint64_t v45 = (v34 + v44) & v40;
      unsigned int v46 = *(void (**)(unint64_t))(v20 + 56);
      v46(v45);
      return;
  }
}

uint64_t sub_21FA14410(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21FA24DB0();
  __n128 v5 = MEMORY[0x270FA5388](v4);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(*(void *)(a2 - 8) + 16))((char *)&v8 - v6, a1, a2, v5);
  swift_storeEnumTagMultiPayload();
  return sub_21FA24DC0();
}

uint64_t sub_21FA14508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_21FA24DB0();
  __n128 v6 = MEMORY[0x270FA5388](v5);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(*(void *)(a3 - 8) + 16))((char *)&v9 - v7, a1, a3, v6);
  swift_storeEnumTagMultiPayload();
  return sub_21FA24DC0();
}

uint64_t sub_21FA14600()
{
  sub_21F9BEC78();

  return sub_21FA24B40();
}

double sub_21FA14648(char a1, double a2, double a3)
{
  uint64_t v5 = a1 & 1;
  char v6 = sub_21FA25120();
  char v7 = sub_21FA25120();
  sub_21F779288(&v14);
  if (v6 == v7)
  {
    uint64_t v8 = *((void *)&v14 + 1);
    char v9 = v15;
    sub_21F7794A0((uint64_t)&v14);
  }
  else
  {
    uint64_t v8 = v16;
    char v9 = v17;
    sub_21F7794A0((uint64_t)&v14);
    a2 = a3;
  }
  sub_21F779288(&v14);
  sub_21F7794A0((uint64_t)&v14);
  if (v6 == v7) {
    unsigned __int8 v10 = sub_21FA250F0();
  }
  else {
    unsigned __int8 v10 = sub_21FA25110();
  }
  unsigned __int8 v11 = v10;
  sub_21FA25100();
  if (sub_21FA25100() == v11)
  {
    sub_21F76CA40(&qword_26AD47F00);
    sub_21FA25930();
    sub_21F8B26AC(v5, v8, v9);
    a2 = v12;
    swift_release();
  }
  return a2;
}

uint64_t sub_21FA147A8@<X0>(void *a1@<X8>)
{
  type metadata accessor for RenderBasedChartView();
  sub_21F76CA40(&qword_26AD47F00);
  sub_21FA25930();
  uint64_t v2 = *(void *)(v8 + 320);
  swift_retain();
  swift_release();
  if (!v2)
  {
    __break(1u);
    goto LABEL_7;
  }
  sub_21F7676B0();
  swift_beginAccess();
  uint64_t v3 = *(void *)(v2 + 40);
  if (!v3) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  swift_release();
  sub_21F76CA40(&qword_26AD47F00);
  sub_21FA25930();
  uint64_t v4 = *(void *)(v7 + 328);
  swift_retain();
  swift_release();
  if (!v4)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  sub_21F7676B0();
  swift_beginAccess();
  uint64_t v5 = *(void *)(v4 + 40);
  if (v5 != 1)
  {
    sub_21FA1EE4C(*(id *)(v4 + 40));
    uint64_t result = swift_release();
    *a1 = v3;
    a1[1] = v5;
    return result;
  }
LABEL_8:
  uint64_t result = sub_21FA266E0();
  __break(1u);
  return result;
}

uint64_t sub_21FA1491C@<X0>(_OWORD *a1@<X0>, uint64_t (**a2)(_OWORD *)@<X1>, uint64_t *a3@<X8>)
{
  long long v4 = a1[5];
  long long v5 = a1[3];
  long long v20 = a1[4];
  long long v21 = v4;
  long long v6 = a1[5];
  long long v7 = a1[7];
  long long v22 = a1[6];
  long long v23 = v7;
  long long v8 = a1[1];
  v17[0] = *a1;
  v17[1] = v8;
  long long v9 = a1[3];
  long long v11 = *a1;
  long long v10 = a1[1];
  long long v18 = a1[2];
  long long v19 = v9;
  v16[4] = v20;
  v16[5] = v6;
  long long v12 = a1[7];
  v16[6] = v22;
  v16[7] = v12;
  v16[0] = v11;
  v16[1] = v10;
  uint64_t v13 = *a2;
  void v16[2] = v18;
  v16[3] = v5;
  sub_21FA1EE94((uint64_t)v17);
  sub_21F76CA40(&qword_26AD479A0);
  sub_21F75558C();
  *(void *)&v16[0] = sub_21FA25750();
  uint64_t v14 = v13(v16);
  uint64_t result = swift_release();
  *a3 = v14;
  return result;
}

uint64_t sub_21FA149EC@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(void *)@<X1>, uint64_t *a3@<X8>)
{
  long long v4 = *(_OWORD *)(a1 + 80);
  long long v5 = *(_OWORD *)(a1 + 112);
  long long v29 = *(_OWORD *)(a1 + 96);
  long long v30 = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  long long v7 = *(_OWORD *)(a1 + 48);
  long long v25 = *(_OWORD *)(a1 + 32);
  long long v26 = v7;
  long long v8 = *(_OWORD *)(a1 + 48);
  long long v9 = *(_OWORD *)(a1 + 80);
  long long v27 = *(_OWORD *)(a1 + 64);
  long long v28 = v9;
  long long v10 = *(_OWORD *)(a1 + 16);
  v24[0] = *(_OWORD *)a1;
  v24[1] = v10;
  long long v11 = *(_OWORD *)(a1 + 112);
  long long v21 = v29;
  long long v22 = v11;
  long long v17 = v25;
  long long v18 = v8;
  long long v19 = v27;
  long long v20 = v4;
  char v31 = *(unsigned char *)(a1 + 128);
  long long v12 = *a2;
  char v23 = *(unsigned char *)(a1 + 128);
  v15[1] = *((void *)&v24[0] + 1);
  long long v16 = v6;
  swift_retain();
  sub_21FA1EEC0((uint64_t)v24, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F754CAC);
  sub_21F76CA40(&qword_26AD47A08);
  sub_21F755558();
  v15[0] = sub_21FA25750();
  uint64_t v13 = v12(v15);
  swift_release();
  uint64_t result = swift_release();
  *a3 = v13;
  return result;
}

uint64_t sub_21FA14AF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v78 = a1;
  uint64_t v91 = sub_21F76CA40(&qword_26AD44990);
  MEMORY[0x270FA5388](v91);
  long long v6 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_21F76CA40(&qword_26AD44950);
  MEMORY[0x270FA5388](v7);
  uint64_t v74 = (uint64_t)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_21F76CA40(qword_26AD48608);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v85 = (uint64_t)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v11 = (int *)sub_21F76CA40(&qword_26AD448C8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v81 = sub_21F76CA40(&qword_26AD44938);
  MEMORY[0x270FA5388](v81);
  uint64_t v83 = (uint64_t)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = sub_21F76CA40(&qword_26AD44968);
  MEMORY[0x270FA5388](v82);
  uint64_t v84 = (uint64_t)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_21F76CA40(&qword_26AD44980);
  MEMORY[0x270FA5388](v87);
  uint64_t v90 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_21F76CA40(&qword_26AD449A8);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v86 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v89 = (uint64_t)&v71 - v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v88 = (uint64_t)&v71 - v22;
  uint64_t v23 = type metadata accessor for ChartModel.Scenegraph();
  uint64_t v79 = *(void *)(v23 - 8);
  uint64_t v80 = v23;
  MEMORY[0x270FA5388](v23);
  char v92 = (uint64_t *)((char *)&v71 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_21F76CA40(&qword_26AD47F00);
  sub_21FA25930();
  uint64_t v25 = *(void *)(*(void *)&v105[0] + 216);
  swift_retain();
  swift_release();
  if (!v25)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v75 = v7;
  uint64_t v76 = v6;
  uint64_t v77 = a3;
  sub_21F7676B0();
  swift_beginAccess();
  if (*(unsigned char *)(v25 + 72))
  {
LABEL_17:
    uint64_t result = sub_21FA266E0();
    __break(1u);
    return result;
  }
  double v26 = *(double *)(v25 + 56);
  double v27 = *(double *)(v25 + 64);
  double v28 = *(double *)(v25 + 40);
  double v29 = *(double *)(v25 + 48);
  swift_release();
  sub_21F779288(v105);
  int v30 = LOBYTE(v105[0]);
  sub_21F7794A0((uint64_t)v105);
  unsigned __int8 v31 = sub_21FA250F0();
  sub_21FA25100();
  double v32 = 0.0;
  if (sub_21FA25100() != v31) {
    double v26 = 0.0;
  }
  unsigned __int8 v33 = sub_21FA25110();
  sub_21FA25100();
  if (sub_21FA25100() != v33) {
    double v28 = 0.0;
  }
  unsigned __int8 v34 = sub_21FA250F0();
  sub_21FA25100();
  if (sub_21FA25100() == v34) {
    double v35 = v27;
  }
  else {
    double v35 = 0.0;
  }
  unsigned __int8 v36 = sub_21FA25110();
  sub_21FA25100();
  if (sub_21FA25100() == v36) {
    double v32 = v29;
  }
  sub_21FA245D0();
  double v38 = v37;
  double v40 = v39;
  double v41 = sub_21FA14648(0, v37, v39);
  double v42 = sub_21FA14648(1, v38, v40);
  sub_21F76CA40(&qword_26AD47F00);
  sub_21FA25930();
  sub_21F77C218(v105);
  unint64_t v43 = v92;
  sub_21F789034((uint64_t)v105, (uint64_t)v92, v41, v42, v38, v40);
  swift_release();
  sub_21F77C424((uint64_t)v105);
  sub_21F76CA40(&qword_26AD47F00);
  sub_21FA25930();
  sub_21F8B2C00(0, (uint64_t)v106, v38, v40);
  swift_release();
  sub_21F76CA40(&qword_26AD47F00);
  sub_21FA25930();
  sub_21F8B2C00(1, (uint64_t)v105, v38, v40);
  swift_release();
  unint64_t v44 = &v13[v11[12]];
  *(void *)unint64_t v44 = swift_getKeyPath();
  v44[90] = 0;
  unint64_t v45 = &v13[v11[13]];
  *(void *)unint64_t v45 = swift_getKeyPath();
  v45[80] = 0;
  unsigned int v46 = &v13[v11[14]];
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  char v100 = -1;
  sub_21FA1D6E4(v106, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21FA1D748);
  sub_21FA1D6E4(v105, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21FA1D748);
  sub_21F76CA40(&qword_26AD448E0);
  sub_21FA25670();
  char v47 = v102;
  uint64_t v48 = v103;
  *(_OWORD *)unsigned int v46 = v101;
  v46[16] = v47;
  *((void *)v46 + 3) = v48;
  uint64_t v49 = &v13[v11[15]];
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  char v100 = -1;
  sub_21FA25670();
  char v50 = v102;
  uint64_t v51 = v103;
  *(_OWORD *)uint64_t v49 = v101;
  v49[16] = v50;
  *((void *)v49 + 3) = v51;
  LODWORD(v78) = v30;
  *uint64_t v13 = v30;
  uint64_t v52 = (uint64_t)&v13[v11[9]];
  uint64_t v53 = *(void *)(a2 + 16);
  uint64_t v72 = *(void *)(a2 + 24);
  uint64_t v73 = v53;
  sub_21FA155F8(v43, v53, v72, v52, v26, v28, v35, v32);
  sub_21F76C9DC((uint64_t)v106, (uint64_t)&v13[v11[10]], &qword_26AD448D0);
  sub_21F76C9DC((uint64_t)v105, (uint64_t)&v13[v11[11]], &qword_26AD448D0);
  LOBYTE(v45) = sub_21FA25130();
  uint64_t v54 = v83;
  sub_21F76C978((uint64_t)v13, v83, &qword_26AD448C8);
  uint64_t v55 = v54 + *(int *)(v81 + 36);
  *(unsigned char *)uint64_t v55 = (_BYTE)v45;
  *(double *)(v55 + 8) = -v26;
  *(double *)(v55 + 16) = -v28;
  *(double *)(v55 + 24) = -v35;
  *(double *)(v55 + 32) = -v32;
  *(unsigned char *)(v55 + 40) = 0;
  sub_21F76CA84((uint64_t)v13, &qword_26AD448C8);
  sub_21FA25280();
  long long v81 = v107;
  uint64_t v56 = v108;
  uint64_t v57 = v109;
  char v58 = v110;
  uint64_t v59 = v84;
  sub_21F76C978(v54, v84, &qword_26AD44938);
  uint64_t v60 = v59 + *(int *)(v82 + 36);
  *(_OWORD *)uint64_t v60 = v81;
  *(void *)(v60 + 16) = v56;
  *(void *)(v60 + 24) = v57;
  *(unsigned char *)(v60 + 32) = v58;
  *(_WORD *)(v60 + 33) = 256;
  sub_21F76CA84(v54, &qword_26AD44938);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v62 = v85;
  sub_21F772A40((uint64_t)v43, v85, (uint64_t (*)(void))type metadata accessor for ChartModel.Scenegraph);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v79 + 56))(v62, 0, 1, v80);
  uint64_t v63 = (uint64_t)v90;
  char v64 = (uint64_t *)&v90[*(int *)(v87 + 36)];
  uint64_t v65 = sub_21F76CA40(&qword_26AD44A08);
  sub_21F76C978(v62, (uint64_t)v64 + *(int *)(v65 + 28), qword_26AD48608);
  *char v64 = KeyPath;
  sub_21F76C978(v59, v63, &qword_26AD44968);
  sub_21F76CA84(v62, qword_26AD48608);
  sub_21F76CA84(v59, &qword_26AD44968);
  sub_21F779288(&v101);
  sub_21F76C9DC((uint64_t)&v104, (uint64_t)&v98, &qword_26AD47B88);
  sub_21F76C978((uint64_t)&v98, (uint64_t)&v93, &qword_26AD47B88);
  if (*((void *)&v94 + 1))
  {
    v96[0] = v93;
    v96[1] = v94;
    uint64_t v97 = v95;
    uint64_t v66 = v74;
    sub_21FA15D9C((uint64_t)v96, v78, v74);
    sub_21F76C978(v66, (uint64_t)v76, &qword_26AD44950);
    swift_storeEnumTagMultiPayload();
    sub_21FA1E34C();
    sub_21FA1E448();
    uint64_t v67 = (uint64_t)v86;
    sub_21FA24DC0();
    sub_21F76CA84(v66, &qword_26AD44950);
    sub_21F7AC0D8((uint64_t)v96);
  }
  else
  {
    sub_21F76CA84((uint64_t)&v93, &qword_26AD47B88);
    sub_21F76C978(v63, (uint64_t)v76, &qword_26AD44980);
    swift_storeEnumTagMultiPayload();
    sub_21FA1E34C();
    sub_21FA1E448();
    uint64_t v67 = (uint64_t)v86;
    sub_21FA24DC0();
  }
  uint64_t v68 = v89;
  sub_21F76C9DC(v67, v89, &qword_26AD449A8);
  sub_21FA1D6E4(v105, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21FA1C1B8);
  sub_21FA1D6E4(v106, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21FA1C1B8);
  sub_21F76CA84((uint64_t)&v98, &qword_26AD47B88);
  sub_21F76CA84(v63, &qword_26AD44980);
  uint64_t v69 = v88;
  sub_21F76C9DC(v68, v88, &qword_26AD449A8);
  sub_21F76C9DC(v69, v77, &qword_26AD449A8);
  return sub_21F76B0C4((uint64_t)v92, (uint64_t (*)(void))type metadata accessor for ChartModel.Scenegraph);
}

uint64_t sub_21FA155F8@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  uint64_t v53 = a4;
  uint64_t v51 = sub_21F76CA40(&qword_26AD449A0);
  MEMORY[0x270FA5388](v51);
  uint64_t v52 = (void *)((char *)v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v44 = sub_21F76CA40(&qword_26AD44998);
  MEMORY[0x270FA5388](v44);
  uint64_t v17 = (void *)((char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v45 = sub_21F76CA40(&qword_26AD479B0);
  MEMORY[0x270FA5388](v45);
  uint64_t v19 = (char *)v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_21F76CA40(&qword_26AD449C0);
  MEMORY[0x270FA5388](v48);
  uint64_t v21 = (char *)v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v50 = (uint64_t)v43 - v23;
  uint64_t v24 = sub_21F76CA40(&qword_26AD449C8);
  MEMORY[0x270FA5388](v24 - 8);
  unsigned int v46 = (char *)v43 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v49 = (uint64_t)v43 - v27;
  uint64_t v47 = sub_21F76CA40(&qword_26AD44940);
  MEMORY[0x270FA5388](v47);
  double v29 = (char *)v43 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v30 = (uint64_t (*)())type metadata accessor for RenderBasedChartView();
  sub_21F78AFE8(a1, v30, (uint64_t)v19);
  unsigned __int8 v31 = (uint64_t (*)(uint64_t *))sub_21F774A70((uint64_t)v30);
  uint64_t v33 = (uint64_t)v31;
  v43[0] = a2;
  v43[1] = a3;
  if (v31)
  {
    uint64_t v55 = v31;
    uint64_t v56 = v32;
    sub_21FA15B1C((uint64_t)v19, &v55, &v54);
    *uint64_t v17 = v54;
  }
  else
  {
    sub_21F76C978((uint64_t)v19, (uint64_t)v17, &qword_26AD479B0);
  }
  swift_storeEnumTagMultiPayload();
  sub_21FA1E684();
  sub_21FA24DC0();
  uint64_t v34 = v50;
  sub_21F76C9DC((uint64_t)v21, v50, &qword_26AD449C0);
  sub_21F76D5D8(v33);
  sub_21F76CA84((uint64_t)v19, &qword_26AD479B0);
  double v35 = (uint64_t (*)(uint64_t *))sub_21F755C84((uint64_t)v30);
  uint64_t v37 = (uint64_t)v35;
  if (v35)
  {
    uint64_t v55 = v35;
    uint64_t v56 = v36;
    sub_21FA15C40(v34, &v55, &v54);
    *uint64_t v52 = v54;
  }
  else
  {
    sub_21F76C978(v34, (uint64_t)v52, &qword_26AD449C0);
  }
  swift_storeEnumTagMultiPayload();
  sub_21F754EB4(&qword_26AD449B8, &qword_26AD449C0, (void (*)(void))sub_21FA1E684);
  uint64_t v38 = (uint64_t)v46;
  sub_21FA24DC0();
  uint64_t v39 = v49;
  sub_21F76C9DC(v38, v49, &qword_26AD449C8);
  sub_21F76D5D8(v37);
  sub_21F76CA84(v34, &qword_26AD449C0);
  char v40 = sub_21FA25130();
  sub_21F76C978(v39, (uint64_t)v29, &qword_26AD449C8);
  double v41 = &v29[*(int *)(v47 + 36)];
  *double v41 = v40;
  *((double *)v41 + 1) = a5;
  *((double *)v41 + 2) = a6;
  *((double *)v41 + 3) = a7;
  *((double *)v41 + 4) = a8;
  v41[40] = 0;
  sub_21F76CA84(v39, &qword_26AD449C8);
  return sub_21F76C9DC((uint64_t)v29, v53, &qword_26AD44940);
}

uint64_t sub_21FA15B1C@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t *)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_21F76CA40(&qword_26AD479B0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  long long v11 = (char *)&v16 - v10;
  uint64_t v12 = *a2;
  sub_21F76C978(a1, (uint64_t)&v16 - v10, &qword_26AD479B0);
  sub_21F76C978((uint64_t)v11, (uint64_t)v8, &qword_26AD479B0);
  sub_21FA1E684();
  uint64_t v13 = sub_21FA25750();
  sub_21F76CA84((uint64_t)v11, &qword_26AD479B0);
  uint64_t v17 = v13;
  uint64_t v14 = v12(&v17);
  uint64_t result = swift_release();
  *a3 = v14;
  return result;
}

uint64_t sub_21FA15C40@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t *)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_21F76CA40(&qword_26AD449C0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  long long v11 = (char *)&v16 - v10;
  uint64_t v12 = *a2;
  sub_21F76C978(a1, (uint64_t)&v16 - v10, &qword_26AD449C0);
  sub_21F76C978((uint64_t)v11, (uint64_t)v8, &qword_26AD449C0);
  sub_21F754EB4(&qword_26AD449B8, &qword_26AD449C0, (void (*)(void))sub_21FA1E684);
  swift_retain();
  uint64_t v13 = sub_21FA25750();
  sub_21F76CA84((uint64_t)v11, &qword_26AD449C0);
  uint64_t v17 = v13;
  uint64_t v14 = v12(&v17);
  swift_release();
  uint64_t result = swift_release();
  *a3 = v14;
  return result;
}

uint64_t sub_21FA15D9C@<X0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  sub_21F76CA40(&qword_26AD44980);
  sub_21FA1E448();
  sub_21F9BEA68();
  sub_21FA25470();
  sub_21FA1E628(a1, (uint64_t)v8);
  uint64_t v6 = sub_21F76CA40(&qword_26AD44950);
  return sub_21F9AC9F8(a2, v8, (unsigned char *)(a3 + *(int *)(v6 + 36)));
}

uint64_t sub_21FA15E48@<X0>(uint64_t a1@<X0>, uint64_t (**a2)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __n128 v6 = MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v4 + 16))(v7, v6);
  unint64_t v8 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(a1 + 16);
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v9 + v8, v7, a1);
  uint64_t result = sub_21FA256A0();
  *a2 = sub_21FA1E2B4;
  a2[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v9;
  a2[2] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))result;
  a2[3] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))sub_21FA15F84;
  a2[4] = 0;
  return result;
}

uint64_t sub_21FA15F84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ChartModel.Scenegraph();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4);
  if (!result)
  {
    *(void *)(a1 + *(int *)(v4 + 64)) = a2;
    swift_retain();
    return swift_release();
  }
  return result;
}

uint64_t sub_21FA1602C()
{
  return sub_21FA24B50();
}

double sub_21FA1608C(char a1, char a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10)
{
  if (a1)
  {
    v42.origin.CGFloat x = a7;
    v42.origin.CGFloat y = a8;
    v42.size.CGFloat width = a9;
    v42.size.CGFloat height = a10;
    double MinX = CGRectGetMinX(v42);
    v43.origin.CGFloat x = a3;
    v43.origin.CGFloat y = a4;
    v43.size.CGFloat width = a5;
    v43.size.CGFloat height = a6;
    CGFloat v19 = CGRectGetMinX(v43);
    double v37 = MinX;
    BOOL v20 = MinX < v19;
    double v21 = v19;
    char v22 = v20;
    v44.origin.CGFloat x = a7;
    CGFloat v23 = a8;
    v44.origin.CGFloat y = a8;
    v44.size.CGFloat width = a9;
    v44.size.CGFloat height = a10;
    CGRectGetMaxX(v44);
    CGFloat v24 = a3;
    v45.origin.CGFloat x = a3;
    CGFloat v25 = a4;
    v45.origin.CGFloat y = a4;
    v45.size.CGFloat width = a5;
    v45.size.CGFloat height = a6;
    CGRectGetMaxX(v45);
    if ((a2 & 1) == 0)
    {
      BOOL v28 = 0;
      CGFloat v29 = a6;
      CGFloat v30 = a5;
      if (v37 < v21) {
        goto LABEL_10;
      }
      goto LABEL_12;
    }
    CGFloat v26 = a5;
  }
  else
  {
    CGFloat v23 = a8;
    CGFloat v24 = a3;
    CGFloat v25 = a4;
    if ((a2 & 1) == 0)
    {
      CGFloat v30 = a5;
      CGFloat v29 = a6;
      double v31 = CGRectGetMinX(*(CGRect *)&a3) + -10000.0;
      v53.origin.CGFloat x = v24;
      v53.origin.CGFloat y = a4;
      v53.size.CGFloat width = v30;
      v53.size.CGFloat height = a6;
      CGRectGetMaxX(v53);
      v54.origin.CGFloat x = v24;
      v54.origin.CGFloat y = v25;
      v54.size.CGFloat width = v30;
      v54.size.CGFloat height = a6;
      CGRectGetMinY(v54);
      goto LABEL_17;
    }
    char v22 = 0;
    CGFloat v26 = a5;
  }
  v46.origin.CGFloat x = a7;
  v46.origin.CGFloat y = v23;
  v46.size.CGFloat width = a9;
  v46.size.CGFloat height = a10;
  double MinY = CGRectGetMinY(v46);
  v47.origin.CGFloat x = v24;
  v47.origin.CGFloat y = v25;
  v47.size.CGFloat width = v26;
  v47.size.CGFloat height = a6;
  BOOL v28 = MinY < CGRectGetMinY(v47);
  v48.origin.CGFloat x = a7;
  v48.origin.CGFloat y = v23;
  CGFloat v29 = a6;
  v48.size.CGFloat width = a9;
  v48.size.CGFloat height = a10;
  CGFloat v30 = a5;
  CGRectGetMaxY(v48);
  v49.origin.CGFloat x = v24;
  v49.origin.CGFloat y = v25;
  v49.size.CGFloat width = a5;
  v49.size.CGFloat height = a6;
  CGRectGetMaxY(v49);
  if (v22)
  {
LABEL_10:
    v50.origin.CGFloat x = v24;
    v50.origin.CGFloat y = v25;
    v50.size.CGFloat width = v30;
    v50.size.CGFloat height = v29;
    double v31 = CGRectGetMinX(v50);
    goto LABEL_13;
  }
LABEL_12:
  v51.origin.CGFloat x = v24;
  v51.origin.CGFloat y = v25;
  v51.size.CGFloat width = v30;
  v51.size.CGFloat height = v29;
  double v31 = CGRectGetMinX(v51) + -10000.0;
LABEL_13:
  v52.origin.CGFloat x = v24;
  v52.origin.CGFloat y = v25;
  v52.size.CGFloat width = v30;
  v52.size.CGFloat height = v29;
  CGRectGetMaxX(v52);
  CGFloat v32 = v24;
  CGFloat v33 = v25;
  CGFloat v34 = v30;
  CGFloat v35 = v29;
  if (v28) {
    CGRectGetMinY(*(CGRect *)&v32);
  }
  else {
    CGRectGetMinY(*(CGRect *)&v32);
  }
LABEL_17:
  v55.origin.CGFloat x = v24;
  v55.origin.CGFloat y = v25;
  v55.size.CGFloat width = v30;
  v55.size.CGFloat height = v29;
  CGRectGetMaxY(v55);
  return v31;
}

uint64_t sub_21FA163B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_21FA24B30();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v6 = MEMORY[0x270FA5388](v4);
  unint64_t v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, v2, v4, v6);
  sub_21FA24B00();
  uint64_t v9 = type metadata accessor for ChartEnvironmentValues(0);
  sub_21FA24B10();
  sub_21FA24AD0();
  sub_21FA24AA0();
  *(void *)(a1 + *(int *)(v9 + 28)) = v10;
  sub_21FA24AB0();
  sub_21F747A68();
  sub_21FA24B40();
  char v11 = v13[15];
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v4);
  *(unsigned char *)(a1 + *(int *)(v9 + 36)) = v11;
  return result;
}

void sub_21FA16508()
{
  qword_267EEAE78 = 0x4020000000000000;
}

void sub_21FA16518(double a1@<X0>, int a2@<W1>, double a3@<X2>, int a4@<W3>, double a5@<X4>, double a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8 = v7;
  double v108 = a6;
  double v109 = a5;
  double v104 = a3;
  double v107 = a1;
  int v105 = a2;
  int v100 = a2 & 1;
  int v106 = a4;
  int v99 = a4 & 1;
  uint64_t v98 = sub_21FA24520();
  uint64_t v97 = *(void *)(v98 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v98);
  uint64_t v12 = (char *)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  long long v96 = (char *)&v94 - v13;
  uint64_t v14 = sub_21FA24660();
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  BOOL v20 = (char *)&v94 - v19;
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  CGFloat v23 = (char *)&v94 - v22;
  MEMORY[0x270FA5388](v21);
  CGFloat v26 = (char *)&v94 - v24;
  uint64_t v27 = *(unsigned __int8 *)(v7 + 32);
  uint64_t v102 = *(void *)(v7 + 40);
  uint64_t v101 = *(void *)(v7 + 48);
  char v122 = *(unsigned char *)(v7 + 56);
  double v28 = *(double *)(v7 + 64);
  char v29 = *(unsigned char *)(v8 + 72);
  uint64_t v103 = v27;
  switch(v27)
  {
    case 1:
    case 2:
      CGRect v54 = *(void (**)(char *, void, uint64_t))(v25 + 16);
      uint64_t v95 = v25;
      v54((char *)&v94 - v24, *(void *)&v109, v14);
      v54(v23, *(void *)&v108, v14);
      if (v29)
      {
        uint64_t v60 = v96;
        sub_21FA24650();
        sub_21FA24650();
        sub_21FA24510();
        double v56 = v61;
        uint64_t v62 = *(void (**)(char *, uint64_t))(v97 + 8);
        uint64_t v63 = v98;
        v62(v12, v98);
        v62(v60, v63);
        char v64 = *(void (**)(char *, uint64_t))(v95 + 8);
        v64(v23, v14);
        v64(v26, v14);
      }
      else
      {
        CGRect v55 = *(void (**)(char *, uint64_t))(v95 + 8);
        v55(v23, v14);
        v55(v26, v14);
        double v56 = v28;
      }
      char v31 = v106;
      char v32 = v105;
      double v33 = v104;
      double v65 = v104;
      if (v106) {
        double v46 = v104;
      }
      else {
        double v46 = (v104 - v56) * 0.5;
      }
      char v113 = v105 & 1;
      char v112 = v106 & 1;
      double v34 = v107;
      sub_21FA24630();
      double v48 = v67;
      double v44 = v66;
      if ((v32 & 1) == 0) {
        double v34 = v107 - (*(double *)(v8 + 8) + *(double *)(v8 + 24));
      }
      if ((v31 & 1) == 0) {
        double v33 = v65 - (*(double *)v8 + *(double *)(v8 + 16)) - v66 - v56;
      }
      char v111 = v32 & 1;
      char v110 = v31 & 1;
      sub_21FA24630();
      double v35 = *(double *)v8;
      double v36 = *(double *)(v8 + 8);
      double v70 = v69 + *(double *)v8 + *(double *)(v8 + 16);
      int v53 = v103;
      if (v103 == 2)
      {
        double v71 = v56 + v70;
        char v51 = v100;
        char v52 = v99;
        goto LABEL_40;
      }
      char v51 = v100;
      char v52 = v99;
      if (v103 == 1)
      {
        double v35 = v56 + v44 + v35;
        double v71 = 0.0;
LABEL_40:
        double v43 = v68 + v36 + *(double *)(v8 + 24);
        double v40 = v56 + v44 + v70;
        double v41 = 0.0;
        double v109 = v43;
        double v45 = v107;
        double v50 = v44;
        double v42 = v71;
        goto LABEL_43;
      }
      __break(1u);
      goto LABEL_50;
    case 3:
    case 4:
      uint64_t v57 = *(void (**)(char *, void, uint64_t))(v25 + 16);
      uint64_t v95 = v25;
      v57(v20, *(void *)&v109, v14);
      v57(v17, *(void *)&v108, v14);
      if (v29)
      {
        uint64_t v72 = v96;
        sub_21FA24650();
        sub_21FA24650();
        sub_21FA24510();
        double v59 = v73;
        uint64_t v74 = *(void (**)(char *, uint64_t))(v97 + 8);
        uint64_t v75 = v98;
        v74(v12, v98);
        v74(v72, v75);
        uint64_t v76 = *(void (**)(char *, uint64_t))(v95 + 8);
        v76(v17, v14);
        v76(v20, v14);
      }
      else
      {
        char v58 = *(void (**)(char *, uint64_t))(v95 + 8);
        v58(v17, v14);
        v58(v20, v14);
        double v59 = v28;
      }
      double v34 = v107;
      double v77 = v107;
      char v32 = v105;
      int v78 = v105 & 1;
      if (v105) {
        double v45 = v107;
      }
      else {
        double v45 = (v107 - v59) * 0.5;
      }
      char v117 = v105 & 1;
      char v31 = v106;
      char v116 = v106 & 1;
      double v46 = v104;
      sub_21FA24630();
      double v43 = v79;
      if (!v78) {
        double v34 = v77 - (*(double *)(v8 + 8) + *(double *)(v8 + 24)) - v79 - v59;
      }
      double v81 = v80;
      double v33 = v46;
      if ((v31 & 1) == 0) {
        double v33 = v46 - (*(double *)v8 + *(double *)(v8 + 16));
      }
      char v115 = v32 & 1;
      char v114 = v31 & 1;
      sub_21FA24630();
      double v35 = *(double *)v8;
      double v36 = *(double *)(v8 + 8);
      double v84 = v83 + v36 + *(double *)(v8 + 24);
      int v53 = v103;
      if (v103 == 4)
      {
        double v41 = v59 + v84;
        char v51 = v100;
        char v52 = v99;
      }
      else
      {
        char v51 = v100;
        char v52 = v99;
        if (v103 != 3)
        {
LABEL_50:
          __break(1u);
          JUMPOUT(0x21FA16ED0);
        }
        double v36 = v59 + v43 + v36;
        double v41 = 0.0;
      }
      double v50 = v81;
      double v44 = v82 + v35 + *(double *)(v8 + 16);
      double v109 = v59 + v43 + v84;
      double v40 = v44;
      double v42 = 0.0;
      double v48 = v43;
LABEL_43:
      if (v122 == 1)
      {
        double v108 = v36;
        double v85 = v35;
        double v86 = v43;
        double v87 = v44;
        double v88 = v42;
        double v89 = v41;
        double v90 = v48;
        double v91 = v50;
        if (v53) {
          sub_21FA25870();
        }
        else {
          sub_21FA25880();
        }
        double v50 = v91;
        double v48 = v90;
        double v41 = v89;
        double v42 = v88;
        double v44 = v87;
        double v43 = v86;
        double v35 = v85;
        double v36 = v108;
      }
      double v92 = sub_21FA1C6EC(v48, v50, v41, v42, v43, v44);
      *(double *)a7 = v109;
      *(double *)(a7 + 8) = v40;
      *(double *)(a7 + 16) = v34;
      *(unsigned char *)(a7 + 24) = v32 & 1;
      *(double *)(a7 + 32) = v33;
      *(unsigned char *)(a7 + 40) = v31 & 1;
      *(double *)(a7 + 48) = v36;
      *(double *)(a7 + 56) = v35;
      *(double *)(a7 + 64) = v45;
      *(unsigned char *)(a7 + 72) = v51;
      *(double *)(a7 + 80) = v46;
      *(unsigned char *)(a7 + 88) = v52;
      *(double *)(a7 + 96) = v92;
      *(void *)(a7 + 104) = v93;
      return;
    case 5:
    case 6:
    case 7:
    case 8:
      sub_21F96D5C0(6);
      goto LABEL_3;
    default:
LABEL_3:
      if (v29)
      {
        char v31 = v106;
        char v32 = v105;
        double v33 = v104;
        if (qword_267EE6EE8 != -1) {
          swift_once();
        }
        double v30 = *(double *)&qword_267EEAE78;
      }
      else
      {
        double v30 = v28;
        char v31 = v106;
        char v32 = v105;
        double v33 = v104;
      }
      double v34 = v107;
      if ((v32 & 1) == 0) {
        double v34 = v107 - (*(double *)(v8 + 8) + *(double *)(v8 + 24));
      }
      if ((v31 & 1) == 0) {
        double v33 = v33 - (*(double *)v8 + *(double *)(v8 + 16));
      }
      char v121 = v32 & 1;
      char v120 = v31 & 1;
      sub_21FA24630();
      double v35 = *(double *)v8;
      double v36 = *(double *)(v8 + 8);
      double v37 = *(double *)(v8 + 16);
      double v109 = v38 + v36 + *(double *)(v8 + 24);
      double v40 = v39 + v35 + v37;
      double v41 = v30 + v36;
      double v42 = v30 + v35;
      double v43 = v38 - (v30 + v30);
      double v44 = v39 - (v30 + v30);
      double v45 = v43;
      double v46 = v44;
      char v119 = 0;
      char v118 = 0;
      sub_21FA24630();
      double v48 = v47;
      double v50 = v49;
      char v51 = 0;
      char v52 = 0;
      int v53 = v103;
      goto LABEL_43;
  }
}

uint64_t sub_21FA16EF8()
{
  sub_21F76CA40(&qword_267EEAE88);
  sub_21FA25680();
  return v1;
}

uint64_t sub_21FA16F5C()
{
  return sub_21FA25690();
}

uint64_t sub_21FA16FC4(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = sub_21F76CA40(qword_26AD48608);
  MEMORY[0x270FA5388](v4 - 8);
  __n128 v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F76C978(a1, (uint64_t)v6, qword_26AD48608);
  uint64_t v7 = type metadata accessor for ChartModel.Scenegraph();
  int v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  uint64_t result = sub_21F76CA84((uint64_t)v6, qword_26AD48608);
  if (v8 == 1)
  {
    uint64_t v10 = sub_21F76CA84(a1, qword_26AD48608);
    return a2(v10);
  }
  return result;
}

uint64_t sub_21FA170CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_21FA1D780();

  return MEMORY[0x270EFF9B8](a1, a2, a3, a4, v8);
}

uint64_t sub_21FA17130()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21FA17174()
{
  sub_21F76CA40(&qword_267EEAE88);
  sub_21FA25680();
  return v1;
}

uint64_t sub_21FA171D8()
{
  return sub_21FA25690();
}

uint64_t sub_21FA17240@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v77 = a2;
  uint64_t v64 = 0;
  uint64_t v5 = a1 - 8;
  uint64_t v66 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v75 = v6;
  uint64_t v76 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v5 + 24);
  sub_21F779EA4(&qword_26AD449F8);
  uint64_t v79 = v7;
  uint64_t v8 = sub_21FA249D0();
  uint64_t v9 = *(void *)(v5 + 32);
  uint64_t v10 = sub_21F779E60(&qword_26AD449F0, &qword_26AD449F8);
  uint64_t v78 = v9;
  uint64_t v94 = v9;
  uint64_t v95 = v10;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v12 = sub_21FA1C11C();
  *(void *)&long long v87 = v8;
  *((void *)&v87 + 1) = &type metadata for XYBindingValue;
  uint64_t v88 = WitnessTable;
  unint64_t v89 = v12;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  *(void *)&long long v87 = v8;
  *((void *)&v87 + 1) = &type metadata for XYBindingValue;
  uint64_t v88 = WitnessTable;
  unint64_t v89 = v12;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  unint64_t v15 = sub_21F9BF300();
  *(void *)&long long v87 = OpaqueTypeMetadata2;
  *((void *)&v87 + 1) = &type metadata for ChartScrollPositionConfiguration;
  uint64_t v88 = OpaqueTypeConformance2;
  unint64_t v89 = v15;
  uint64_t v16 = swift_getOpaqueTypeMetadata2();
  *(void *)&long long v87 = OpaqueTypeMetadata2;
  *((void *)&v87 + 1) = &type metadata for ChartScrollPositionConfiguration;
  uint64_t v88 = OpaqueTypeConformance2;
  unint64_t v89 = v15;
  uint64_t v17 = swift_getOpaqueTypeConformance2();
  unint64_t v18 = sub_21F9BF354();
  *(void *)&long long v87 = v16;
  *((void *)&v87 + 1) = &type metadata for ChartScrollZoomConfiguration;
  uint64_t v88 = v17;
  unint64_t v89 = v18;
  swift_getOpaqueTypeMetadata2();
  *(void *)&long long v87 = v16;
  *((void *)&v87 + 1) = &type metadata for ChartScrollZoomConfiguration;
  uint64_t v19 = v3;
  uint64_t v88 = v17;
  unint64_t v89 = v18;
  swift_getOpaqueTypeConformance2();
  sub_21FA24E80();
  swift_getWitnessTable();
  uint64_t v20 = sub_21FA24460();
  uint64_t v21 = swift_getWitnessTable();
  *(void *)&long long v87 = v20;
  *((void *)&v87 + 1) = v21;
  uint64_t v22 = swift_getOpaqueTypeMetadata2();
  *(void *)&long long v87 = v20;
  *((void *)&v87 + 1) = v21;
  uint64_t v67 = swift_getOpaqueTypeConformance2();
  uint64_t v68 = v22;
  uint64_t v23 = sub_21FA24A70();
  uint64_t v24 = swift_getWitnessTable();
  *(void *)&long long v87 = v23;
  *((void *)&v87 + 1) = v24;
  uint64_t v69 = swift_getOpaqueTypeMetadata2();
  uint64_t v25 = sub_21FA24DD0();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v70 = (uint64_t)&v64 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  double v30 = (char *)&v64 - v29;
  sub_21FA1B7A4(&v87);
  sub_21F76C978((uint64_t)&v87, (uint64_t)&v91, &qword_26AD46A18);
  sub_21F9BED58((uint64_t)&v87);
  uint64_t v73 = v23;
  uint64_t v74 = v26;
  double v71 = v30;
  uint64_t v72 = v24;
  if (v93 == 255)
  {
    sub_21F76CA84((uint64_t)&v91, &qword_26AD46A18);
    uint64_t v31 = 0;
    int v32 = 1;
    uint64_t v33 = v66;
  }
  else
  {
    sub_21F9BEB90(&v91, (uint64_t)&v81);
    if (v84)
    {
      sub_21F9BEC1C((uint64_t)&v81, (uint64_t)v80);
      uint64_t v34 = sub_21FA00AC4();
      uint64_t v36 = v35;
      char v38 = v37;
      sub_21F9BEBC8((uint64_t)v80);
    }
    else
    {
      uint64_t v34 = v81;
      uint64_t v36 = v82;
      char v38 = v83;
    }
    uint64_t v33 = v66;
    sub_21F9BE30C((uint64_t)&v91);
    if (v38 == -1)
    {
      uint64_t v31 = 0;
      int v32 = 1;
    }
    else
    {
      *(void *)&long long v87 = v34;
      *((void *)&v87 + 1) = v36;
      LOBYTE(v88) = v38;
      uint64_t v39 = v64;
      sub_21FA17A14((uint64_t)&v87, v19, (uint64_t)&v91);
      uint64_t v64 = v39;
      sub_21F7B24B8(v34, v36, v38);
      uint64_t v31 = v91;
      int v32 = v92;
    }
  }
  sub_21FA1B7A4(&v87);
  sub_21F76C978((uint64_t)&v90, (uint64_t)&v91, &qword_26AD46A18);
  sub_21F9BED58((uint64_t)&v87);
  uint64_t v66 = v31;
  int v65 = v32;
  if (v93 == 255)
  {
    sub_21F76CA84((uint64_t)&v91, &qword_26AD46A18);
LABEL_16:
    uint64_t v45 = 0;
    int v46 = 1;
    goto LABEL_17;
  }
  sub_21F9BEB90(&v91, (uint64_t)&v81);
  if (v84)
  {
    sub_21F9BEC1C((uint64_t)&v81, (uint64_t)v80);
    uint64_t v40 = sub_21FA00AC4();
    uint64_t v42 = v41;
    char v44 = v43;
    sub_21F9BEBC8((uint64_t)v80);
  }
  else
  {
    uint64_t v40 = v81;
    uint64_t v42 = v82;
    char v44 = v83;
  }
  sub_21F9BE30C((uint64_t)&v91);
  if (v44 == -1) {
    goto LABEL_16;
  }
  *(void *)&long long v87 = v40;
  *((void *)&v87 + 1) = v42;
  LOBYTE(v88) = v44;
  sub_21FA17BD4((uint64_t)&v87, v19, (uint64_t)&v91);
  sub_21F7B24B8(v40, v42, v44);
  uint64_t v45 = v91;
  int v46 = v92;
LABEL_17:
  double v47 = v76;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v76, v19, a1);
  unint64_t v48 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  uint64_t v49 = swift_allocObject();
  uint64_t v50 = a1;
  uint64_t v51 = v78;
  uint64_t v52 = v79;
  *(void *)(v49 + 16) = v79;
  *(void *)(v49 + 24) = v51;
  (*(void (**)(unint64_t, char *, uint64_t))(v33 + 32))(v49 + v48, v47, v50);
  *(void *)&long long v87 = sub_21FA24A60();
  *((void *)&v87 + 1) = v53;
  uint64_t v54 = v65 & v46 ^ 1u;
  MEMORY[0x270FA5388](v87);
  *(&v64 - 6) = v52;
  *(&v64 - 5) = v51;
  *(&v64 - 4) = v66;
  *((unsigned char *)&v64 - 24) = v55;
  *(&v64 - 2) = v45;
  *((unsigned char *)&v64 - 8) = v46;
  uint64_t v57 = v72;
  uint64_t v56 = v73;
  uint64_t v91 = v73;
  uint64_t v92 = v72;
  uint64_t v58 = swift_getOpaqueTypeConformance2();
  uint64_t v59 = v70;
  sub_21FA1A9A4(v54, (void (*)(uint64_t, __n128))sub_21FA1C1A0, (uint64_t)(&v64 - 8), v56, v69, v57, v58, v70);
  swift_release();
  uint64_t v85 = v58;
  uint64_t v86 = v57;
  uint64_t v60 = swift_getWitnessTable();
  double v61 = v71;
  sub_21F8B0FF0(v59, v25, v60);
  uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
  v62(v59, v25);
  sub_21F8B0FF0(v61, v25, v60);
  return ((uint64_t (*)(char *, uint64_t))v62)(v61, v25);
}

uint64_t sub_21FA17A14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 16);
  uint64_t v8 = type metadata accessor for ChartScrollView();
  sub_21F76C9DC(a2 + *(int *)(v8 + 40), (uint64_t)v19, &qword_26AD448D0);
  sub_21F76C9DC((uint64_t)v19, (uint64_t)v20, &qword_26AD448D0);
  uint64_t result = sub_21F897D10((uint64_t)v20);
  int v10 = result;
  double v11 = 0.0;
  if (result != 1)
  {
    sub_21F764268(v20[0], v20[1], v20[2], v20[3], v20[4], v20[5], v20[6], v20[7], v21);
    double v12 = COERCE_DOUBLE(sub_21F888AA8(v5, v6, v7));
    char v14 = v13;
    uint64_t result = (uint64_t)sub_21FA1D6E4(v19, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21FA1C1B8);
    if (v14) {
      double v15 = 0.0;
    }
    else {
      double v15 = v12;
    }
    double v17 = v23;
    double v16 = v24;
    double v18 = v22;
    if (qword_26AD46270 != -1) {
      uint64_t result = swift_once();
    }
    if (v17 + *(double *)&qword_26AD52218 < v18) {
      double v11 = (v15 - v16) / (v18 - v17);
    }
  }
  *(double *)a3 = v11;
  *(unsigned char *)(a3 + 8) = v10 == 1;
  return result;
}

uint64_t sub_21FA17BD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 16);
  uint64_t v8 = type metadata accessor for ChartScrollView();
  sub_21F76C9DC(a2 + *(int *)(v8 + 44), (uint64_t)v19, &qword_26AD448D0);
  sub_21F76C9DC((uint64_t)v19, (uint64_t)v20, &qword_26AD448D0);
  uint64_t result = sub_21F897D10((uint64_t)v20);
  int v10 = result;
  double v11 = 0.0;
  if (result != 1)
  {
    sub_21F764268(v20[0], v20[1], v20[2], v20[3], v20[4], v20[5], v20[6], v20[7], v21);
    double v12 = COERCE_DOUBLE(sub_21F888AA8(v5, v6, v7));
    char v14 = v13;
    uint64_t result = (uint64_t)sub_21FA1D6E4(v19, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21FA1C1B8);
    if (v14) {
      double v15 = 0.0;
    }
    else {
      double v15 = v12;
    }
    double v17 = v23;
    double v16 = v24;
    double v18 = v22;
    if (qword_26AD46270 != -1) {
      uint64_t result = swift_once();
    }
    if (v17 + *(double *)&qword_26AD52218 < v18) {
      double v11 = (v15 - v16) / (v18 - v17);
    }
  }
  *(double *)a3 = v11;
  *(unsigned char *)(a3 + 8) = v10 == 1;
  return result;
}

uint64_t sub_21FA17D94@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v36 = a4;
  uint64_t v37 = a3;
  uint64_t v38 = a2;
  uint64_t v39 = a1;
  uint64_t v42 = a5;
  uint64_t v6 = sub_21FA24FB0();
  uint64_t v40 = *(void *)(v6 - 8);
  uint64_t v41 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F779EA4(&qword_26AD449F8);
  uint64_t v9 = sub_21FA249D0();
  uint64_t v10 = sub_21F779E60(&qword_26AD449F0, &qword_26AD449F8);
  uint64_t v51 = a4;
  uint64_t v52 = v10;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v12 = sub_21FA1C11C();
  uint64_t v47 = v9;
  unint64_t v48 = &type metadata for XYBindingValue;
  uint64_t v49 = WitnessTable;
  unint64_t v50 = v12;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v47 = v9;
  unint64_t v48 = &type metadata for XYBindingValue;
  uint64_t v49 = WitnessTable;
  unint64_t v50 = v12;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  unint64_t v15 = sub_21F9BF300();
  uint64_t v47 = OpaqueTypeMetadata2;
  unint64_t v48 = &type metadata for ChartScrollPositionConfiguration;
  uint64_t v49 = OpaqueTypeConformance2;
  unint64_t v50 = v15;
  uint64_t v16 = swift_getOpaqueTypeMetadata2();
  uint64_t v47 = OpaqueTypeMetadata2;
  unint64_t v48 = &type metadata for ChartScrollPositionConfiguration;
  uint64_t v49 = OpaqueTypeConformance2;
  unint64_t v50 = v15;
  uint64_t v17 = swift_getOpaqueTypeConformance2();
  unint64_t v18 = sub_21F9BF354();
  uint64_t v47 = v16;
  unint64_t v48 = &type metadata for ChartScrollZoomConfiguration;
  uint64_t v49 = v17;
  unint64_t v50 = v18;
  swift_getOpaqueTypeMetadata2();
  uint64_t v47 = v16;
  unint64_t v48 = &type metadata for ChartScrollZoomConfiguration;
  uint64_t v49 = v17;
  unint64_t v50 = v18;
  swift_getOpaqueTypeConformance2();
  sub_21FA24E80();
  swift_getWitnessTable();
  uint64_t v19 = sub_21FA24460();
  uint64_t v35 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v35 - v20;
  uint64_t v22 = swift_getWitnessTable();
  uint64_t v47 = v19;
  unint64_t v48 = (ValueMetadata *)v22;
  uint64_t v23 = swift_getOpaqueTypeMetadata2();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v35 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = (char *)&v35 - v28;
  uint64_t v43 = v37;
  uint64_t v44 = v36;
  uint64_t v45 = v38;
  int v46 = v39;
  sub_21FA24470();
  uint64_t v39 = v8;
  sub_21FA24FA0();
  LOBYTE(v8) = sub_21FA25110();
  unsigned __int8 v30 = sub_21FA250F0();
  sub_21FA25100();
  sub_21FA25100();
  if (sub_21FA25100() != v8) {
    sub_21FA25100();
  }
  sub_21FA25100();
  if (sub_21FA25100() != v30) {
    sub_21FA25100();
  }
  uint64_t v31 = v39;
  sub_21FA25410();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v31, v41);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v21, v19);
  uint64_t v47 = v19;
  unint64_t v48 = (ValueMetadata *)v22;
  uint64_t v32 = swift_getOpaqueTypeConformance2();
  sub_21F8B0FF0(v26, v23, v32);
  uint64_t v33 = *(void (**)(char *, uint64_t))(v24 + 8);
  v33(v26, v23);
  sub_21F8B0FF0(v29, v23, v32);
  return ((uint64_t (*)(char *, uint64_t))v33)(v29, v23);
}

uint64_t sub_21FA182E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v51 = a2;
  uint64_t v52 = a5;
  uint64_t v49 = a1;
  uint64_t v48 = sub_21FA249F0();
  uint64_t v53 = *(void *)(v48 - 8);
  uint64_t v50 = *(void *)(v53 + 64);
  MEMORY[0x270FA5388](v48);
  uint64_t v46 = a3;
  uint64_t v47 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a4;
  uint64_t v45 = a4;
  uint64_t v9 = type metadata accessor for ChartScrollView();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x270FA5388](v9);
  char v13 = (char *)v43 - v12;
  v43[0] = (char *)v43 - v12;
  sub_21F779EA4(&qword_26AD449F8);
  uint64_t v14 = sub_21FA249D0();
  uint64_t v15 = sub_21F779E60(&qword_26AD449F0, &qword_26AD449F8);
  uint64_t v58 = v8;
  uint64_t v59 = v15;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v17 = sub_21FA1C11C();
  uint64_t v54 = v14;
  char v55 = &type metadata for XYBindingValue;
  uint64_t v56 = WitnessTable;
  unint64_t v57 = v17;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v54 = v14;
  char v55 = &type metadata for XYBindingValue;
  uint64_t v56 = WitnessTable;
  unint64_t v57 = v17;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  unint64_t v20 = sub_21F9BF300();
  uint64_t v54 = OpaqueTypeMetadata2;
  char v55 = &type metadata for ChartScrollPositionConfiguration;
  uint64_t v56 = OpaqueTypeConformance2;
  unint64_t v57 = v20;
  uint64_t v21 = swift_getOpaqueTypeMetadata2();
  uint64_t v54 = OpaqueTypeMetadata2;
  char v55 = &type metadata for ChartScrollPositionConfiguration;
  uint64_t v56 = OpaqueTypeConformance2;
  unint64_t v57 = v20;
  uint64_t v22 = swift_getOpaqueTypeConformance2();
  unint64_t v23 = sub_21F9BF354();
  uint64_t v54 = v21;
  char v55 = &type metadata for ChartScrollZoomConfiguration;
  uint64_t v56 = v22;
  unint64_t v57 = v23;
  void v43[2] = swift_getOpaqueTypeMetadata2();
  uint64_t v54 = v21;
  char v55 = &type metadata for ChartScrollZoomConfiguration;
  uint64_t v56 = v22;
  unint64_t v57 = v23;
  v43[1] = swift_getOpaqueTypeConformance2();
  uint64_t v24 = sub_21FA24E80();
  uint64_t v44 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)v43 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v28 = MEMORY[0x270FA5388](v27);
  unsigned __int8 v30 = (char *)v43 - v29;
  uint64_t v31 = v10;
  uint64_t v32 = v9;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v13, v49, v9, v28);
  uint64_t v33 = v53;
  uint64_t v34 = v47;
  uint64_t v35 = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v47, v51, v48);
  unint64_t v36 = (*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
  unint64_t v37 = (v11 + *(unsigned __int8 *)(v33 + 80) + v36) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  uint64_t v38 = swift_allocObject();
  uint64_t v39 = v45;
  *(void *)(v38 + 16) = v46;
  *(void *)(v38 + 24) = v39;
  (*(void (**)(unint64_t, void, uint64_t))(v31 + 32))(v38 + v36, v43[0], v32);
  (*(void (**)(unint64_t, char *, uint64_t))(v53 + 32))(v38 + v37, v34, v35);
  sub_21FA24E70();
  uint64_t v40 = swift_getWitnessTable();
  sub_21F8B0FF0(v26, v24, v40);
  uint64_t v41 = *(void (**)(char *, uint64_t))(v44 + 8);
  v41(v26, v24);
  sub_21F8B0FF0(v30, v24, v40);
  return ((uint64_t (*)(char *, uint64_t))v41)(v30, v24);
}

uint64_t sub_21FA187D8@<X0>(void (*a1)(char *, uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v141 = a3;
  uint64_t v145 = a2;
  unint64_t v136 = a1;
  uint64_t v124 = a6;
  uint64_t v139 = sub_21FA249F0();
  uint64_t v146 = *(void *)(v139 - 8);
  uint64_t v140 = *(void *)(v146 + 64);
  MEMORY[0x270FA5388](v139);
  char v138 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a5;
  uint64_t v143 = a5;
  uint64_t v106 = type metadata accessor for ChartScrollView();
  uint64_t v147 = *(void **)(v106 - 8);
  uint64_t v135 = v147[8];
  MEMORY[0x270FA5388](v106);
  int v130 = (char *)&v97 - v10;
  uint64_t v129 = sub_21FA24A50();
  uint64_t v144 = *(void **)(v129 - 8);
  uint64_t v131 = v144[8];
  MEMORY[0x270FA5388](v129);
  uint64_t v12 = (char *)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v125 = v12;
  uint64_t v13 = a4;
  uint64_t v132 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = v16;
  sub_21F779EA4(&qword_26AD449F8);
  uint64_t v17 = sub_21FA249D0();
  uint64_t v118 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v137 = (char *)&v97 - v18;
  uint64_t v19 = sub_21F779E60(&qword_26AD449F0, &qword_26AD449F8);
  uint64_t v156 = v9;
  uint64_t v157 = v19;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v21 = sub_21FA1C11C();
  *(void *)&long long v153 = v17;
  *((void *)&v153 + 1) = &type metadata for XYBindingValue;
  uint64_t v22 = v17;
  uint64_t v107 = v17;
  uint64_t v154 = WitnessTable;
  unint64_t v155 = v21;
  uint64_t v109 = WitnessTable;
  unint64_t v23 = v21;
  unint64_t v108 = v21;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v119 = *(void *)(OpaqueTypeMetadata2 - 8);
  MEMORY[0x270FA5388](OpaqueTypeMetadata2);
  uint64_t v133 = (char *)&v97 - v25;
  *(void *)&long long v153 = v22;
  *((void *)&v153 + 1) = &type metadata for XYBindingValue;
  uint64_t v154 = WitnessTable;
  unint64_t v155 = v23;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  unint64_t v27 = sub_21F9BF300();
  *(void *)&long long v153 = OpaqueTypeMetadata2;
  *((void *)&v153 + 1) = &type metadata for ChartScrollPositionConfiguration;
  uint64_t v110 = OpaqueTypeMetadata2;
  uint64_t v154 = OpaqueTypeConformance2;
  unint64_t v155 = v27;
  uint64_t v112 = OpaqueTypeConformance2;
  unint64_t v111 = v27;
  uint64_t v28 = swift_getOpaqueTypeMetadata2();
  uint64_t v117 = v28;
  uint64_t v123 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  unint64_t v134 = (char *)&v97 - v29;
  *(void *)&long long v153 = OpaqueTypeMetadata2;
  *((void *)&v153 + 1) = &type metadata for ChartScrollPositionConfiguration;
  uint64_t v154 = OpaqueTypeConformance2;
  unint64_t v155 = v27;
  uint64_t v30 = swift_getOpaqueTypeConformance2();
  uint64_t v116 = v30;
  unint64_t v115 = sub_21F9BF354();
  *(void *)&long long v153 = v28;
  *((void *)&v153 + 1) = &type metadata for ChartScrollZoomConfiguration;
  uint64_t v154 = v30;
  unint64_t v155 = v115;
  uint64_t v120 = MEMORY[0x263F1B270];
  uint64_t v121 = swift_getOpaqueTypeMetadata2();
  uint64_t v122 = *(void *)(v121 - 8);
  MEMORY[0x270FA5388](v121);
  char v113 = (char *)&v97 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v33 = MEMORY[0x270FA5388](v32);
  char v114 = (char *)&v97 - v34;
  uint64_t v35 = v106;
  uint64_t v36 = v145;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v132 + 16))(v16, v145 + *(int *)(v106 + 36), v13, v33);
  unint64_t v37 = v144;
  uint64_t v103 = (void (*)(char *, void, uint64_t))v144[2];
  uint64_t v38 = v129;
  v103(v12, v136, v129);
  uint64_t v39 = v147;
  uint64_t v40 = (void (*)(char *, uint64_t, uint64_t))v147[2];
  unint64_t v142 = v147 + 2;
  unint64_t v128 = v40;
  uint64_t v41 = v130;
  uint64_t v42 = v35;
  v40(v130, v36, v35);
  uint64_t v43 = *((unsigned __int8 *)v37 + 80);
  uint64_t v44 = v37;
  uint64_t v105 = *((unsigned __int8 *)v39 + 80);
  uint64_t v45 = (v43 + 32) & ~v43;
  uint64_t v104 = v45;
  uint64_t v46 = (v131 + v105 + v45) & ~v105;
  uint64_t v99 = v46 + v135;
  uint64_t v101 = v46;
  uint64_t v131 = v105 | 7;
  uint64_t v100 = v105 | 7 | v43;
  uint64_t v47 = swift_allocObject();
  uint64_t v48 = v143;
  *(void *)(v47 + 16) = v13;
  *(void *)(v47 + 24) = v48;
  uint64_t v49 = v47 + v45;
  uint64_t v50 = (void (*)(uint64_t, char *, uint64_t))v44[4];
  uint64_t v144 = v44 + 4;
  uint64_t v102 = v50;
  uint64_t v51 = v125;
  v50(v49, v125, v38);
  uint64_t v52 = v47 + v46;
  uint64_t v53 = (void (*)(uint64_t, char *, uint64_t))v147[4];
  v147 += 4;
  long long v126 = v53;
  uint64_t v54 = v41;
  uint64_t v55 = v42;
  v53(v52, v41, v42);
  uint64_t v56 = v13;
  unint64_t v57 = v98;
  sub_21FA19B90((uint64_t)sub_21FA1C5EC, v47);
  swift_release();
  uint64_t v58 = *(void (**)(char *, uint64_t))(v132 + 8);
  uint64_t v127 = v13;
  v58(v57, v13);
  uint64_t v59 = v145;
  sub_21FA1B7A4(&v153);
  sub_21FA1C8D8((uint64_t)&v153, (uint64_t)v148);
  uint64_t v60 = v129;
  v103(v51, v136, v129);
  v128(v54, v59, v55);
  uint64_t v61 = v146;
  uint64_t v62 = *(void (**)(char *, uint64_t, uint64_t))(v146 + 16);
  uint64_t v132 = v146 + 16;
  unint64_t v136 = v62;
  uint64_t v63 = v138;
  uint64_t v64 = v139;
  v62(v138, v141, v139);
  uint64_t v65 = *(unsigned __int8 *)(v61 + 80);
  uint64_t v66 = (v99 + v65) & ~v65;
  uint64_t v67 = swift_allocObject();
  *(void *)(v67 + 16) = v56;
  *(void *)(v67 + 24) = v48;
  v102(v67 + v104, v125, v60);
  uint64_t v68 = v130;
  uint64_t v69 = v126;
  v126(v67 + v101, v130, v55);
  uint64_t v70 = *(void **)(v61 + 32);
  uint64_t v146 = v61 + 32;
  uint64_t v144 = v70;
  ((void (*)(uint64_t, char *, uint64_t))v70)(v67 + v66, v63, v64);
  uint64_t v71 = v107;
  uint64_t v72 = v137;
  sub_21FA254E0();
  swift_release();
  sub_21F7B24B8(v148[0], v148[1], v149);
  sub_21F7B24B8(v150, v151, v152);
  (*(void (**)(char *, uint64_t))(v118 + 8))(v72, v71);
  uint64_t v73 = v145;
  sub_21FA1B7A4(&v153);
  uint64_t v74 = v68;
  uint64_t v75 = v68;
  uint64_t v76 = v128;
  v128(v75, v73, v55);
  uint64_t v77 = (v105 + 32) & ~v105;
  uint64_t v137 = (char *)(v77 + v135);
  uint64_t v78 = swift_allocObject();
  uint64_t v79 = v143;
  *(void *)(v78 + 16) = v127;
  *(void *)(v78 + 24) = v79;
  v69(v78 + v77, v74, v55);
  uint64_t v80 = v110;
  uint64_t v81 = v133;
  sub_21FA254E0();
  swift_release();
  sub_21F9BED58((uint64_t)&v153);
  (*(void (**)(char *, uint64_t))(v119 + 8))(v81, v80);
  sub_21F779288(&v153);
  v76(v74, v73, v55);
  uint64_t v82 = v138;
  uint64_t v83 = v139;
  v136(v138, v141, v139);
  unint64_t v84 = (unint64_t)&v137[v65] & ~v65;
  uint64_t v85 = swift_allocObject();
  uint64_t v86 = v143;
  *(void *)(v85 + 16) = v127;
  *(void *)(v85 + 24) = v86;
  v126(v85 + v77, v74, v55);
  ((void (*)(unint64_t, char *, uint64_t))v144)(v85 + v84, v82, v83);
  long long v87 = v113;
  uint64_t v88 = v117;
  uint64_t v89 = v116;
  unint64_t v90 = v115;
  uint64_t v91 = v134;
  sub_21FA254F0();
  swift_release();
  sub_21F7794A0((uint64_t)&v153);
  (*(void (**)(char *, uint64_t))(v123 + 8))(v91, v88);
  *(void *)&long long v153 = v88;
  *((void *)&v153 + 1) = &type metadata for ChartScrollZoomConfiguration;
  uint64_t v154 = v89;
  unint64_t v155 = v90;
  uint64_t v92 = swift_getOpaqueTypeConformance2();
  unsigned __int8 v93 = v114;
  uint64_t v94 = v121;
  sub_21F8B0FF0(v87, v121, v92);
  uint64_t v95 = *(void (**)(char *, uint64_t))(v122 + 8);
  v95(v87, v94);
  sub_21F8B0FF0(v93, v94, v92);
  return ((uint64_t (*)(char *, uint64_t))v95)(v93, v94);
}

void *sub_21FA195D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v20)(_OWORD *__return_ptr, void *);
  double v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  CGFloat MinY;
  void (*v26)(_OWORD *__return_ptr, void *);
  double v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void v31[5];
  unsigned __int16 v32;
  _OWORD v33[3];
  uint64_t v34;
  unsigned char v35[48];
  void v36[5];
  unsigned __int16 v37;
  _OWORD v38[8];
  unsigned char v39[32];
  void (*v40)(_OWORD *__return_ptr, void *);
  char v41;
  double v42;
  void v43[17];
  unsigned char v44[32];
  void (*v45)(_OWORD *__return_ptr, void *);
  char v46;
  double v47;
  void v48[4];
  char v49;
  CGRect v50;
  CGRect v51;

  uint64_t v7 = sub_21FA24A50();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (void *)sub_21F76C9DC(a2, (uint64_t)v48, &qword_26AD4A408);
  if ((v49 & 1) == 0)
  {
    CGFloat v12 = *(double *)v48;
    CGFloat v13 = *(double *)&v48[1];
    CGFloat v14 = *(double *)&v48[2];
    CGFloat v15 = *(double *)&v48[3];
    char v16 = sub_21FA24A30();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a3, v7);
    if (v16) {
      char v17 = sub_21FA24A20() ^ 1;
    }
    else {
      char v17 = 0;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v18 = type metadata accessor for ChartScrollView();
    sub_21F76C9DC(a4 + *(int *)(v18 + 40), (uint64_t)v43, &qword_26AD448D0);
    sub_21F76C9DC((uint64_t)v43, (uint64_t)v44, &qword_26AD448D0);
    if (sub_21F897D10((uint64_t)v44) != 1)
    {
      sub_21F76C9DC((uint64_t)v43, (uint64_t)v39, &qword_26AD448D0);
      sub_21FA1D688((uint64_t)v39);
      v50.origin.CGFloat x = v12;
      v50.origin.CGFloat y = v13;
      v50.size.CGFloat width = v14;
      v50.size.CGFloat height = v15;
      CGFloat MinX = CGRectGetMinX(v50);
      unint64_t v20 = v45;
      unint64_t v21 = MinX + v47;
      if (v46)
      {
        if (!v45) {
          goto LABEL_19;
        }
        *(double *)uint64_t v36 = v21;
        sub_21FA1D6E4(v43, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21FA1D748);
        v20(v38, v36);
        uint64_t v22 = *((void *)&v38[0] + 1);
        unint64_t v23 = *(void *)&v38[0];
        sub_21FA1D6E4(v43, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21FA1C1B8);
        if (!v22) {
          goto LABEL_19;
        }
        uint64_t v24 = 2;
        if ((v17 & 1) == 0)
        {
LABEL_18:
          sub_21FA16F5C();
LABEL_19:
          sub_21FA1D6E4(v43, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21FA1C1B8);
          goto LABEL_20;
        }
      }
      else
      {
        if (!v45) {
          goto LABEL_19;
        }
        *(double *)uint64_t v36 = v21;
        sub_21FA1D6E4(v43, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21FA1D748);
        v20(v38, v36);
        sub_21FA1D6E4(v43, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21FA1C1B8);
        if (BYTE8(v38[0])) {
          goto LABEL_19;
        }
        uint64_t v22 = 0;
        uint64_t v24 = 0;
        unint64_t v23 = *(void *)&v38[0];
        if ((v17 & 1) == 0) {
          goto LABEL_18;
        }
      }
      sub_21FA1B7A4(v38);
      sub_21F76C978((uint64_t)v38, (uint64_t)v36, &qword_26AD46A18);
      sub_21F9BED58((uint64_t)v38);
      if (HIBYTE(v37) >= 0xFFu)
      {
        sub_21F76CA84((uint64_t)v36, &qword_26AD46A18);
        goto LABEL_18;
      }
      if ((v37 & 0x100) == 0)
      {
        sub_21F9BE30C((uint64_t)v36);
        goto LABEL_18;
      }
      sub_21F9BEC1C((uint64_t)v36, (uint64_t)v33);
      sub_21FA0388C(v23, v22, v24);
      sub_21FA1D6E4(v43, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21FA1C1B8);
      sub_21F9BEBC8((uint64_t)v33);
    }
LABEL_20:
    sub_21F76C9DC(a4 + *(int *)(v18 + 44), (uint64_t)v38, &qword_26AD448D0);
    sub_21F76C9DC((uint64_t)v38, (uint64_t)v39, &qword_26AD448D0);
    uint64_t result = (void *)sub_21F897D10((uint64_t)v39);
    if (result == 1) {
      return result;
    }
    sub_21F76C9DC((uint64_t)v38, (uint64_t)v36, &qword_26AD448D0);
    sub_21FA1D688((uint64_t)v36);
    v51.origin.CGFloat x = v12;
    v51.origin.CGFloat y = v13;
    v51.size.CGFloat width = v14;
    v51.size.CGFloat height = v15;
    double MinY = CGRectGetMinY(v51);
    uint64_t v26 = v40;
    unint64_t v27 = MinY + v42;
    if (v41)
    {
      if (!v40) {
        return sub_21FA1D6E4(v38, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21FA1C1B8);
      }
      *(double *)uint64_t v31 = v27;
      sub_21FA1D6E4(v38, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21FA1D748);
      v26(v33, v31);
      uint64_t v28 = *((void *)&v33[0] + 1);
      uint64_t v29 = *(void *)&v33[0];
      sub_21FA1D6E4(v38, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21FA1C1B8);
      if (!v28) {
        return sub_21FA1D6E4(v38, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21FA1C1B8);
      }
      uint64_t v30 = 2;
      if ((v17 & 1) == 0)
      {
LABEL_33:
        sub_21FA171D8();
        return sub_21FA1D6E4(v38, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21FA1C1B8);
      }
    }
    else
    {
      if (!v40) {
        return sub_21FA1D6E4(v38, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21FA1C1B8);
      }
      *(double *)uint64_t v31 = v27;
      sub_21FA1D6E4(v38, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21FA1D748);
      v26(v33, v31);
      sub_21FA1D6E4(v38, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21FA1C1B8);
      if (BYTE8(v33[0])) {
        return sub_21FA1D6E4(v38, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21FA1C1B8);
      }
      uint64_t v28 = 0;
      uint64_t v30 = 0;
      uint64_t v29 = *(void *)&v33[0];
      if ((v17 & 1) == 0) {
        goto LABEL_33;
      }
    }
    sub_21FA1B7A4(v33);
    sub_21F76C978((uint64_t)&v34, (uint64_t)v31, &qword_26AD46A18);
    sub_21F9BED58((uint64_t)v33);
    if (HIBYTE(v32) < 0xFFu)
    {
      if ((v32 & 0x100) != 0)
      {
        sub_21F9BEC1C((uint64_t)v31, (uint64_t)v35);
        sub_21FA0388C(v29, v28, v30);
        sub_21FA1D6E4(v38, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21FA1C1B8);
        return (void *)sub_21F9BEBC8((uint64_t)v35);
      }
      sub_21F9BE30C((uint64_t)v31);
    }
    else
    {
      sub_21F76CA84((uint64_t)v31, &qword_26AD46A18);
    }
    goto LABEL_33;
  }
  return result;
}

uint64_t sub_21FA19B90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  sub_21FA1D634();
  swift_retain();
  sub_21FA253C0();

  return swift_release();
}

uint64_t sub_21FA19C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v29 = a7;
  uint64_t v32 = a6;
  uint64_t v33 = a5;
  uint64_t v31 = a4;
  uint64_t v9 = sub_21FA24A50();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  CGFloat v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a2 + 8);
  uint64_t v28 = *(void *)a2;
  int v14 = *(unsigned __int8 *)(a2 + 16);
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v15 = *(void *)(a2 + 32);
  int v30 = *(unsigned __int8 *)(a2 + 40);
  LOBYTE(a2) = sub_21FA24A10();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  if (a2) {
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  uint64_t v26 = v13;
  uint64_t v27 = v15;
  uint64_t v18 = v31;
  char v19 = sub_21FA24A40();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  int v20 = v30;
  if ((v19 & 1) == 0)
  {
    if (v14 == 255
      || (uint64_t v21 = type metadata accessor for ChartScrollView(),
          sub_21F76C9DC(v18 + *(int *)(v21 + 40), (uint64_t)v34, &qword_26AD448D0),
          sub_21F76C9DC((uint64_t)v34, (uint64_t)&v35, &qword_26AD448D0),
          uint64_t result = sub_21F897D10((uint64_t)&v35),
          result == 1))
    {
      if (v20 == 255) {
        return result;
      }
      char v22 = 1;
    }
    else
    {
      uint64_t v63 = v35;
      uint64_t v64 = v36;
      uint64_t v65 = v37;
      uint64_t v66 = v38;
      uint64_t v67 = v39;
      uint64_t v68 = v40;
      uint64_t v69 = v41;
      uint64_t v70 = v42;
      uint64_t v71 = v43;
      uint64_t v72 = v44;
      uint64_t v73 = v45;
      uint64_t v74 = v46;
      uint64_t v75 = v47;
      char v76 = v48;
      sub_21F764268(v35, v36, v37, v38, v39, v40, v41, v42, v43);
      sub_21F888AA8(v28, v26, v14);
      sub_21FA1D6E4(v34, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21FA1C1B8);
      if (v20 == 255) {
        return sub_21FA249E0();
      }
      char v22 = 0;
    }
    uint64_t v23 = v27;
    uint64_t v24 = type metadata accessor for ChartScrollView();
    sub_21F76C9DC(v18 + *(int *)(v24 + 44), (uint64_t)v34, &qword_26AD448D0);
    sub_21F76C9DC((uint64_t)v34, (uint64_t)&v35, &qword_26AD448D0);
    uint64_t result = sub_21F897D10((uint64_t)&v35);
    if (result == 1)
    {
      if (v22) {
        return result;
      }
    }
    else
    {
      uint64_t v49 = v35;
      uint64_t v50 = v36;
      uint64_t v51 = v37;
      uint64_t v52 = v38;
      uint64_t v53 = v39;
      uint64_t v54 = v40;
      uint64_t v55 = v41;
      uint64_t v56 = v42;
      uint64_t v57 = v43;
      uint64_t v58 = v44;
      uint64_t v59 = v45;
      uint64_t v60 = v46;
      uint64_t v61 = v47;
      char v62 = v48;
      sub_21F764268(v35, v36, v37, v38, v39, v40, v41, v42, v43);
      sub_21F888AA8(v16, v23, v20);
      sub_21FA1D6E4(v34, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21FA1C1B8);
    }
    return sub_21FA249E0();
  }
  return result;
}

uint64_t sub_21FA19FFC(uint64_t a1, uint64_t a2)
{
  sub_21F76C978(a2, (uint64_t)v7, &qword_26AD46A18);
  if (v8 == 255)
  {
    sub_21F76CA84((uint64_t)v7, &qword_26AD46A18);
  }
  else
  {
    sub_21F9BEB90(v7, (uint64_t)v5);
    if (v6 == 1)
    {
      sub_21F9BEC1C((uint64_t)v5, (uint64_t)v4);
      sub_21FA00AC4();
      sub_21F9BEBC8((uint64_t)v4);
      sub_21F9BE30C((uint64_t)v7);
      type metadata accessor for ChartScrollView();
      sub_21FA16F5C();
    }
    else
    {
      sub_21F9BE30C((uint64_t)v5);
      sub_21F9BE30C((uint64_t)v7);
    }
  }
  sub_21F76C978(a2 + 48, (uint64_t)v7, &qword_26AD46A18);
  if (v8 == 255) {
    return sub_21F76CA84((uint64_t)v7, &qword_26AD46A18);
  }
  sub_21F9BEB90(v7, (uint64_t)v5);
  if (v6 == 1)
  {
    sub_21F9BEC1C((uint64_t)v5, (uint64_t)v4);
    sub_21FA00AC4();
    sub_21F9BEBC8((uint64_t)v4);
    sub_21F9BE30C((uint64_t)v7);
    type metadata accessor for ChartScrollView();
    return sub_21FA171D8();
  }
  else
  {
    sub_21F9BE30C((uint64_t)v5);
    return sub_21F9BE30C((uint64_t)v7);
  }
}

uint64_t sub_21FA1A1B0(uint64_t a1, uint64_t a2)
{
  v30[1] = a2;
  uint64_t v3 = type metadata accessor for ChartScrollView();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v6 = (char *)v30 - v5;
  uint64_t v7 = sub_21FA16EF8();
  int v9 = ~v8;
  sub_21F7B24B8(v7, v10, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  if (v9)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  else
  {
    uint64_t v11 = sub_21FA17174();
    uint64_t v13 = v12;
    char v15 = v14;
    int v16 = ~v14;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t result = sub_21F7B24B8(v11, v13, v15);
    if (!v16) {
      return result;
    }
  }
  uint64_t v18 = sub_21FA16EF8();
  if (v20 != -1)
  {
    uint64_t v21 = v18;
    uint64_t v22 = v19;
    char v23 = v20;
    uint64_t v31 = v18;
    uint64_t v32 = v19;
    char v33 = v20;
    sub_21FA1A414((uint64_t)&v31, a1, (uint64_t)&v34);
    sub_21F7B24B8(v21, v22, v23);
  }
  uint64_t v24 = sub_21FA17174();
  if (v26 != -1)
  {
    uint64_t v27 = v24;
    uint64_t v28 = v25;
    char v29 = v26;
    uint64_t v31 = v24;
    uint64_t v32 = v25;
    char v33 = v26;
    sub_21FA1A570((uint64_t)&v31, a1, (uint64_t)&v34);
    sub_21F7B24B8(v27, v28, v29);
  }
  return sub_21FA249E0();
}

uint64_t sub_21FA1A414@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 16);
  uint64_t v8 = type metadata accessor for ChartScrollView();
  sub_21F76C9DC(a2 + *(int *)(v8 + 40), (uint64_t)v16, &qword_26AD448D0);
  sub_21F76C9DC((uint64_t)v16, (uint64_t)v17, &qword_26AD448D0);
  uint64_t result = sub_21F897D10((uint64_t)v17);
  int v10 = result;
  double v11 = 0.0;
  if (result != 1)
  {
    sub_21F764268(v17[0], v17[1], v17[2], v17[3], v17[4], v17[5], v17[6], v17[7], v18);
    uint64_t v12 = sub_21F888AA8(v5, v6, v7);
    char v14 = v13;
    uint64_t result = (uint64_t)sub_21FA1D6E4(v16, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21FA1C1B8);
    double v15 = *(double *)&v12;
    if (v14) {
      double v15 = 0.0;
    }
    double v11 = v15 - v19;
  }
  *(double *)a3 = v11;
  *(unsigned char *)(a3 + 8) = v10 == 1;
  return result;
}

uint64_t sub_21FA1A570@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 16);
  uint64_t v8 = type metadata accessor for ChartScrollView();
  sub_21F76C9DC(a2 + *(int *)(v8 + 44), (uint64_t)v16, &qword_26AD448D0);
  sub_21F76C9DC((uint64_t)v16, (uint64_t)v17, &qword_26AD448D0);
  uint64_t result = sub_21F897D10((uint64_t)v17);
  int v10 = result;
  double v11 = 0.0;
  if (result != 1)
  {
    sub_21F764268(v17[0], v17[1], v17[2], v17[3], v17[4], v17[5], v17[6], v17[7], v18);
    uint64_t v12 = sub_21F888AA8(v5, v6, v7);
    char v14 = v13;
    uint64_t result = (uint64_t)sub_21FA1D6E4(v16, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21FA1C1B8);
    double v15 = *(double *)&v12;
    if (v14) {
      double v15 = 0.0;
    }
    double v11 = v15 - v19;
  }
  *(double *)a3 = v11;
  *(unsigned char *)(a3 + 8) = v10 == 1;
  return result;
}

uint64_t sub_21FA1A6CC()
{
  return sub_21FA25450();
}

uint64_t sub_21FA1A9A4@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, __n128)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v40 = a7;
  uint64_t v41 = a6;
  uint64_t v34 = a3;
  uint64_t v35 = a2;
  int v36 = a1;
  uint64_t v39 = a8;
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  double v15 = (char *)&v34 - v14;
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v18);
  char v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  char v23 = (char *)&v34 - v22;
  uint64_t v24 = sub_21FA24DD0();
  uint64_t v38 = *(void *)(v24 - 8);
  __n128 v25 = MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v34 - v26;
  if (v36)
  {
    v35(v37, v25);
    uint64_t v28 = v40;
    sub_21F8B0FF0(v20, a5, v40);
    char v29 = *(void (**)(char *, uint64_t))(v17 + 8);
    v29(v20, a5);
    sub_21F8B0FF0(v23, a5, v28);
    sub_21FA14410((uint64_t)v20, a5);
    v29(v20, a5);
    v29(v23, a5);
  }
  else
  {
    uint64_t v30 = v41;
    sub_21F8B0FF0(v37, a4, v41);
    sub_21F8B0FF0(v15, a4, v30);
    sub_21FA14508((uint64_t)v12, a5, a4);
    uint64_t v31 = *(void (**)(char *, uint64_t))(v10 + 8);
    v31(v12, a4);
    v31(v15, a4);
  }
  uint64_t v42 = v40;
  uint64_t v43 = v41;
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_21F8B0FF0(v27, v24, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v27, v24);
}

uint64_t sub_21FA1AD14()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  swift_retain();
  sub_21F76CA40(&qword_26AD449D8);
  sub_21F76CA40(&qword_26AD4A408);
  sub_21F779E60(&qword_26AD449D0, &qword_26AD449D8);
  sub_21FA1FA18();
  sub_21FA254E0();
  return swift_release();
}

uint64_t sub_21FA1AE1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_21F76C9DC(a1, (uint64_t)v10, &qword_26AD4A408);
  char v7 = v11;
  long long v8 = v10[1];
  *(_OWORD *)a4 = v10[0];
  *(_OWORD *)(a4 + 16) = v8;
  *(unsigned char *)(a4 + 32) = v7;
  *(void *)(a4 + 40) = a2;
  *(void *)(a4 + 48) = a3;
  return swift_retain();
}

uint64_t sub_21FA1AE80(long long *a1, long long *a2)
{
  long long v2 = a1[1];
  long long v5 = *a1;
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 9) = *(long long *)((char *)a1 + 25);
  long long v3 = a2[1];
  long long v7 = *a2;
  v8[0] = v3;
  *(_OWORD *)((char *)v8 + 9) = *(long long *)((char *)a2 + 25);
  return sub_21FA1BE18((uint64_t)&v5, (uint64_t)&v7) & 1;
}

uint64_t sub_21FA1AECC(uint64_t a1, char a2)
{
  uint64_t v4 = sub_21FA24B30();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  long long v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_retain();
    os_log_type_t v8 = sub_21FA26250();
    int v9 = sub_21FA250E0();
    if (os_log_type_enabled(v9, v8))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v14 = v11;
      *(_DWORD *)uint64_t v10 = 136315138;
      *(void *)(v10 + 4) = sub_21FA1B9BC(0xD000000000000020, 0x800000021FA60440, &v14);
      _os_log_impl(&dword_21F741000, v9, v8, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x223C56A80](v11, -1, -1);
      MEMORY[0x223C56A80](v10, -1, -1);
    }

    sub_21FA24B20();
    swift_getAtKeyPath();
    sub_21F7757F8(a1, 0, MEMORY[0x263F8EED8], MEMORY[0x263F8EEA0]);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v14;
  }
  return a1;
}

uint64_t sub_21FA1B0DC(uint64_t a1, char a2)
{
  uint64_t v4 = sub_21FA24B30();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  long long v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0)
  {
    swift_retain();
    os_log_type_t v8 = sub_21FA26250();
    int v9 = sub_21FA250E0();
    if (os_log_type_enabled(v9, v8))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v13 = v11;
      *(_DWORD *)uint64_t v10 = 136315138;
      *(void *)(v10 + 4) = sub_21FA1B9BC(0xD000000000000016, 0x800000021FA60470, &v13);
      _os_log_impl(&dword_21F741000, v9, v8, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x223C56A80](v11, -1, -1);
      MEMORY[0x223C56A80](v10, -1, -1);
    }

    sub_21FA24B20();
    swift_getAtKeyPath();
    sub_21F99827C(a1, 0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v14;
  }
  return a1;
}

uint64_t sub_21FA1B2BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_21FA24B30();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  long long v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_21F76CA40(&qword_267EE9C78);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F76C978(v2, (uint64_t)v10, &qword_267EE9C78);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_21FA24220();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, v10, v11);
  }
  else
  {
    os_log_type_t v13 = sub_21FA26250();
    unsigned __int8 v14 = sub_21FA250E0();
    if (os_log_type_enabled(v14, v13))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      uint64_t v18 = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      *(void *)(v15 + 4) = sub_21FA1B9BC(0x656C61636F4CLL, 0xE600000000000000, &v18);
      _os_log_impl(&dword_21F741000, v14, v13, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x223C56A80](v16, -1, -1);
      MEMORY[0x223C56A80](v15, -1, -1);
    }

    sub_21FA24B20();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_21FA1B540@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_21FA24B30();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  long long v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_21F76CA40(&qword_267EEA148);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F76C978(v2, (uint64_t)v10, &qword_267EEA148);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return sub_21F76C9DC((uint64_t)v10, a1, &qword_26AD4A318);
  }
  os_log_type_t v12 = sub_21FA26250();
  os_log_type_t v13 = sub_21FA250E0();
  if (os_log_type_enabled(v13, v12))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t v17 = v15;
    *(_DWORD *)uint64_t v14 = 136315138;
    *(void *)(v14 + 4) = sub_21FA1B9BC(0xD000000000000020, 0x800000021FA60290, &v17);
    _os_log_impl(&dword_21F741000, v13, v12, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x223C56A80](v15, -1, -1);
    MEMORY[0x223C56A80](v14, -1, -1);
  }

  sub_21FA24B20();
  swift_getAtKeyPath();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_21FA1B7A4@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_21FA24B30();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  long long v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_21F76C978(v2, (uint64_t)v17, &qword_26AD44928);
  if (v19 == 1)
  {
    long long v9 = v17[3];
    a1[2] = v17[2];
    a1[3] = v9;
    a1[4] = *(_OWORD *)v18;
    *(_OWORD *)((char *)a1 + 74) = *(_OWORD *)&v18[10];
    long long v10 = v17[1];
    *a1 = v17[0];
    a1[1] = v10;
  }
  else
  {
    os_log_type_t v11 = sub_21FA26250();
    os_log_type_t v12 = sub_21FA250E0();
    if (os_log_type_enabled(v12, v11))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      uint64_t v16 = v14;
      *(_DWORD *)uint64_t v13 = 136315138;
      *(void *)(v13 + 4) = sub_21FA1B9BC(0xD000000000000020, 0x800000021FA60300, &v16);
      _os_log_impl(&dword_21F741000, v12, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x223C56A80](v14, -1, -1);
      MEMORY[0x223C56A80](v13, -1, -1);
    }

    sub_21FA24B20();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

unint64_t sub_21FA1B9BC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6 = sub_21FA1BA90(v12, 0, 0, 1, a1, a2);
  unint64_t v7 = v12[0];
  if (v6)
  {
    unint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_21F83E3D8((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_21F83E3D8((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  _s6Charts15AnyChartContentVwxx_0((uint64_t)v12);
  return v7;
}

unint64_t sub_21FA1BA90(unint64_t *a1, void *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v10 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v10)
        {
          v12[0] = a5;
          v12[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          memcpy(__dst, v12, HIBYTE(a6) & 0xF);
          unint64_t result = 0;
          *((unsigned char *)__dst + v10) = 0;
          *a1 = (unint64_t)__dst;
          return result;
        }
      }
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    unint64_t result = sub_21FA1BB90(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    unint64_t result = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    unint64_t result = sub_21FA265B0();
    if (!result)
    {
      __break(1u);
      return result;
    }
  }
  *a1 = result;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_21FA1BB90(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_21FA1BC28(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (uint64_t)sub_21FA1BD2C(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = (uint64_t)sub_21FA1BD2C((char *)(v3 > 1), v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_21FA1BC28(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_9;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_21FA1BCC4(v2, 0);
      uint64_t result = sub_21FA26520();
      if (v5) {
        break;
      }
      if (result == v2) {
        return (uint64_t)v3;
      }
      __break(1u);
LABEL_9:
      uint64_t v2 = sub_21FA25D50();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

void *sub_21FA1BCC4(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  sub_21F76CA40(&qword_267EEAE80);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  void v4[3] = 2 * v5 - 64;
  return v4;
}

char *sub_21FA1BD2C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_21F76CA40(&qword_267EEAE80);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  os_log_type_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_21FA1BE18(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 16);
  int v5 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 255)
  {
    if (v5 != 255) {
      return 0;
    }
LABEL_11:
    int v9 = *(unsigned __int8 *)(a1 + 40);
    int v10 = *(unsigned __int8 *)(a2 + 40);
    if (v9 == 255) {
      return v10 == 255;
    }
    if (v10 != 255)
    {
      double v11 = *(double *)(a1 + 24);
      double v12 = *(double *)(a2 + 24);
      if (*(unsigned char *)(a1 + 40))
      {
        if (v9 != 1) {
          return v10 == 2
        }
              && (*(void *)&v11 == *(void *)&v12 && *(void *)(a1 + 32) == *(void *)(a2 + 32)
               || (sub_21FA268D0() & 1) != 0);
        if (v10 != 1) {
          return 0;
        }
      }
      else if (*(unsigned char *)(a2 + 40))
      {
        return 0;
      }
      if (v11 == v12) {
        return 1;
      }
    }
    return 0;
  }
  if (v5 == 255) {
    return 0;
  }
  double v6 = *(double *)a1;
  double v7 = *(double *)a2;
  if (!*(unsigned char *)(a1 + 16))
  {
    uint64_t result = 0;
    if (*(unsigned char *)(a2 + 16)) {
      return result;
    }
    goto LABEL_10;
  }
  if (v4 == 1)
  {
    uint64_t result = 0;
    if (v5 != 1) {
      return result;
    }
LABEL_10:
    if (v6 != v7) {
      return result;
    }
    goto LABEL_11;
  }
  if (v5 != 2) {
    return 0;
  }
  if (*(void *)&v6 == *(void *)&v7 && *(void *)(a1 + 8) == *(void *)(a2 + 8)) {
    goto LABEL_11;
  }
  char v13 = sub_21FA268D0();
  uint64_t result = 0;
  if (v13) {
    goto LABEL_11;
  }
  return result;
}

unint64_t sub_21FA1BF68()
{
  unint64_t result = qword_26AD46520;
  if (!qword_26AD46520)
  {
    sub_21F779EA4(&qword_26AD4A2A8);
    sub_21FA1C008();
    sub_21F779E60(&qword_26AD4A238, &qword_26AD4A240);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD46520);
  }
  return result;
}

unint64_t sub_21FA1C008()
{
  unint64_t result = qword_26AD46518;
  if (!qword_26AD46518)
  {
    sub_21F779EA4(&qword_26AD4A280);
    sub_21F74C488(&qword_26AD49200, (void (*)(uint64_t))type metadata accessor for SgCanvasRenderer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD46518);
  }
  return result;
}

uint64_t sub_21FA1C0B4()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_21FA1C0EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

unint64_t sub_21FA1C11C()
{
  unint64_t result = qword_26AD448B8;
  if (!qword_26AD448B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD448B8);
  }
  return result;
}

uint64_t sub_21FA1C174(uint64_t a1)
{
  return sub_21F7461E8(a1, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ChartScrollView, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_21FA17D94);
}

uint64_t sub_21FA1C1A0()
{
  return sub_21FA1A6CC();
}

uint64_t sub_21FA1C1B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14 != -1) {
    return sub_21F76D570(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  return a1;
}

uint64_t sub_21FA1C1F0@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA182E8(v1[4], v1[5], v1[2], v1[3], a1);
}

uint64_t sub_21FA1C200@<X0>(void (*a1)(char *, uint64_t, uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for ChartScrollView() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(sub_21FA249F0() - 8);
  uint64_t v11 = v2 + ((v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));

  return sub_21FA187D8(a1, v2 + v8, v11, v5, v6, a2);
}

uint64_t sub_21FA1C300()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = sub_21FA24A50();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = (int *)type metadata accessor for ChartScrollView();
  uint64_t v8 = *(unsigned __int8 *)(*((void *)v7 - 1) + 80);
  uint64_t v9 = (v6 + v8) & ~v8;
  uint64_t v10 = *(void *)(*((void *)v7 - 1) + 64);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v5, v2);
  uint64_t v11 = v0 + v9;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v9 + v7[9], v1);
  uint64_t v12 = v0 + v9 + v7[10];
  if (*(unsigned __int8 *)(v12 + 104) != 255) {
    sub_21F76D570(*(void *)v12, *(void *)(v12 + 8), *(void *)(v12 + 16), *(void *)(v12 + 24), *(void *)(v12 + 32), *(void *)(v12 + 40), *(void *)(v12 + 48), *(void *)(v12 + 56), *(_OWORD *)(v12 + 64));
  }
  uint64_t v13 = v11 + v7[11];
  if (*(unsigned __int8 *)(v13 + 104) != 255) {
    sub_21F76D570(*(void *)v13, *(void *)(v13 + 8), *(void *)(v13 + 16), *(void *)(v13 + 24), *(void *)(v13 + 32), *(void *)(v13 + 40), *(void *)(v13 + 48), *(void *)(v13 + 56), *(_OWORD *)(v13 + 64));
  }
  uint64_t v14 = v11 + v7[12];
  if (*(unsigned char *)(v14 + 90))
  {
    unsigned int v15 = *(unsigned __int16 *)(v14 + 40);
    if (v15 >> 8 <= 0xFE)
    {
      if ((v15 & 0x100) != 0) {
        _s6Charts15AnyChartContentVwxx_0(v11 + v7[12]);
      }
      else {
        sub_21F7654F0(*(void *)v14, *(void *)(v14 + 8), *(unsigned char *)(v14 + 16));
      }
    }
    unsigned int v16 = *(unsigned __int16 *)(v14 + 88);
    if (v16 >> 8 <= 0xFE)
    {
      if ((v16 & 0x100) != 0) {
        _s6Charts15AnyChartContentVwxx_0(v14 + 48);
      }
      else {
        sub_21F7654F0(*(void *)(v14 + 48), *(void *)(v14 + 56), *(unsigned char *)(v14 + 64));
      }
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v17 = v11 + v7[13];
  if (*(unsigned char *)(v17 + 80))
  {
    if (*(void *)(v17 + 64)) {
      _s6Charts15AnyChartContentVwxx_0(v17 + 40);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v18 = v11 + v7[14];
  int v19 = *(unsigned __int8 *)(v18 + 16);
  if (v19 != 255) {
    sub_21F7654F0(*(void *)v18, *(void *)(v18 + 8), v19);
  }
  swift_release();
  uint64_t v20 = v11 + v7[15];
  int v21 = *(unsigned __int8 *)(v20 + 16);
  if (v21 != 255) {
    sub_21F7654F0(*(void *)v20, *(void *)(v20 + 8), v21);
  }
  swift_release();

  return MEMORY[0x270FA0238](v0, v9 + v10, v4 | v8 | 7);
}

void *sub_21FA1C5EC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(sub_21FA24A50() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = v6 + *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(type metadata accessor for ChartScrollView() - 8);
  uint64_t v9 = v2 + ((v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));

  return sub_21FA195D4(a1, a2, v2 + v6, v9);
}

double sub_21FA1C6EC(double a1, double a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  sub_21FA24CC0();
  if (sub_21FA24B90())
  {
    v13.origin.CGFloat x = a3;
    v13.origin.CGFloat y = a4;
    v13.size.CGFloat width = a5;
    v13.size.CGFloat height = a6;
    double MinX = CGRectGetMinX(v13);
  }
  else
  {
    sub_21FA24CD0();
    if (sub_21FA24B90())
    {
      v14.origin.CGFloat x = a3;
      v14.origin.CGFloat y = a4;
      v14.size.CGFloat width = a5;
      v14.size.CGFloat height = a6;
      double MinX = CGRectGetMaxX(v14) - a1;
    }
    else
    {
      sub_21FA24CB0();
      sub_21FA24B90();
      v15.origin.CGFloat x = a3;
      v15.origin.CGFloat y = a4;
      v15.size.CGFloat width = a5;
      v15.size.CGFloat height = a6;
      double MinX = CGRectGetMidX(v15) + a1 * -0.5;
    }
  }
  sub_21FA24CC0();
  if ((sub_21FA24B90() & 1) == 0)
  {
    sub_21FA24CD0();
    if ((sub_21FA24B90() & 1) == 0)
    {
      sub_21FA24CB0();
      if ((sub_21FA24B90() & 1) == 0) {
        sub_21F96D5C0(7);
      }
    }
  }
  sub_21FA24BA0();
  if (sub_21FA24B90())
  {
    v16.origin.CGFloat x = a3;
    v16.origin.CGFloat y = a4;
    v16.size.CGFloat width = a5;
    v16.size.CGFloat height = a6;
    CGRectGetMinY(v16);
  }
  else
  {
    sub_21FA24BB0();
    if (sub_21FA24B90())
    {
      v17.origin.CGFloat x = a3;
      v17.origin.CGFloat y = a4;
      v17.size.CGFloat width = a5;
      v17.size.CGFloat height = a6;
      CGRectGetMaxY(v17);
    }
    else
    {
      sub_21FA24BC0();
      sub_21FA24B90();
      v18.origin.CGFloat x = a3;
      v18.origin.CGFloat y = a4;
      v18.size.CGFloat width = a5;
      v18.size.CGFloat height = a6;
      CGRectGetMidY(v18);
    }
  }
  sub_21FA24BA0();
  if ((sub_21FA24B90() & 1) == 0)
  {
    sub_21FA24BB0();
    if ((sub_21FA24B90() & 1) == 0)
    {
      sub_21FA24BC0();
      if ((sub_21FA24B90() & 1) == 0) {
        sub_21F96D5C0(8);
      }
    }
  }
  return MinX;
}

uint64_t sub_21FA1C8D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_21F76C978(a1, (uint64_t)v18, &qword_26AD46A18);
  if (v19 == 255)
  {
    sub_21F76CA84((uint64_t)v18, &qword_26AD46A18);
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    char v6 = -1;
  }
  else
  {
    sub_21F9BEB90(v18, (uint64_t)v16);
    if (v17)
    {
      sub_21F9BEC1C((uint64_t)v16, (uint64_t)v15);
      uint64_t v4 = sub_21FA00AC4();
      uint64_t v5 = v7;
      char v6 = v8;
      sub_21F9BEBC8((uint64_t)v15);
    }
    else
    {
      sub_21F9BE30C((uint64_t)v16);
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      char v6 = -1;
    }
    sub_21F9BE30C((uint64_t)v18);
  }
  sub_21F76C978(a1 + 48, (uint64_t)v18, &qword_26AD46A18);
  if (v19 == 255)
  {
    sub_21F9BED58(a1);
    uint64_t result = sub_21F76CA84((uint64_t)v18, &qword_26AD46A18);
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    char v12 = -1;
  }
  else
  {
    sub_21F9BEB90(v18, (uint64_t)v16);
    if (v17)
    {
      sub_21F9BEC1C((uint64_t)v16, (uint64_t)v15);
      uint64_t v10 = sub_21FA00AC4();
      uint64_t v11 = v13;
      char v12 = v14;
      sub_21F9BEBC8((uint64_t)v15);
    }
    else
    {
      sub_21F9BE30C((uint64_t)v16);
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      char v12 = -1;
    }
    sub_21F9BED58(a1);
    uint64_t result = sub_21F9BE30C((uint64_t)v18);
  }
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v10;
  *(void *)(a2 + 32) = v11;
  *(unsigned char *)(a2 + 40) = v12;
  return result;
}

uint64_t sub_21FA1CA70()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = sub_21FA24A50();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v27 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v4 = (v27 + 32) & ~v27;
  uint64_t v5 = v4 + *(void *)(v3 + 64);
  char v6 = (int *)type metadata accessor for ChartScrollView();
  uint64_t v7 = *(unsigned __int8 *)(*((void *)v6 - 1) + 80);
  uint64_t v8 = (v5 + v7) & ~v7;
  uint64_t v25 = *(void *)(*((void *)v6 - 1) + 64);
  uint64_t v26 = sub_21FA249F0();
  uint64_t v9 = *(void *)(v26 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v24 = *(void *)(v9 + 64);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v4, v2);
  uint64_t v11 = v0 + v8;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v8 + v6[9], v1);
  uint64_t v12 = v0 + v8 + v6[10];
  if (*(unsigned __int8 *)(v12 + 104) != 255) {
    sub_21F76D570(*(void *)v12, *(void *)(v12 + 8), *(void *)(v12 + 16), *(void *)(v12 + 24), *(void *)(v12 + 32), *(void *)(v12 + 40), *(void *)(v12 + 48), *(void *)(v12 + 56), *(_OWORD *)(v12 + 64));
  }
  uint64_t v13 = v11 + v6[11];
  if (*(unsigned __int8 *)(v13 + 104) != 255) {
    sub_21F76D570(*(void *)v13, *(void *)(v13 + 8), *(void *)(v13 + 16), *(void *)(v13 + 24), *(void *)(v13 + 32), *(void *)(v13 + 40), *(void *)(v13 + 48), *(void *)(v13 + 56), *(_OWORD *)(v13 + 64));
  }
  uint64_t v14 = v11 + v6[12];
  if (*(unsigned char *)(v14 + 90))
  {
    unsigned int v15 = *(unsigned __int16 *)(v14 + 40);
    if (v15 >> 8 <= 0xFE)
    {
      if ((v15 & 0x100) != 0) {
        _s6Charts15AnyChartContentVwxx_0(v11 + v6[12]);
      }
      else {
        sub_21F7654F0(*(void *)v14, *(void *)(v14 + 8), *(unsigned char *)(v14 + 16));
      }
    }
    unsigned int v16 = *(unsigned __int16 *)(v14 + 88);
    if (v16 >> 8 <= 0xFE)
    {
      if ((v16 & 0x100) != 0) {
        _s6Charts15AnyChartContentVwxx_0(v14 + 48);
      }
      else {
        sub_21F7654F0(*(void *)(v14 + 48), *(void *)(v14 + 56), *(unsigned char *)(v14 + 64));
      }
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v17 = v11 + v6[13];
  if (*(unsigned char *)(v17 + 80))
  {
    if (*(void *)(v17 + 64)) {
      _s6Charts15AnyChartContentVwxx_0(v17 + 40);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v18 = v11 + v6[14];
  int v19 = *(unsigned __int8 *)(v18 + 16);
  if (v19 != 255) {
    sub_21F7654F0(*(void *)v18, *(void *)(v18 + 8), v19);
  }
  swift_release();
  uint64_t v20 = v11 + v6[15];
  int v21 = *(unsigned __int8 *)(v20 + 16);
  if (v21 != 255) {
    sub_21F7654F0(*(void *)v20, *(void *)(v20 + 8), v21);
  }
  uint64_t v22 = (v8 + v25 + v10) & ~v10;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0 + v22, v26);

  return MEMORY[0x270FA0238](v0, v22 + v24, v27 | v7 | v10 | 7);
}

uint64_t sub_21FA1CDF0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(sub_21FA24A50() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = v8 + *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(type metadata accessor for ChartScrollView() - 8);
  unint64_t v11 = (v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = *(void *)(v10 + 64);
  uint64_t v13 = *(void *)(sub_21FA249F0() - 8);
  uint64_t v14 = v2 + ((v11 + v12 + *(unsigned __int8 *)(v13 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));

  return sub_21FA19C4C(a1, a2, v2 + v8, v2 + v11, v14, v5, v6);
}

uint64_t sub_21FA1CF50()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)type metadata accessor for ChartScrollView();
  uint64_t v3 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(*((void *)v2 - 1) + 64);
  uint64_t v6 = v0 + v4;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v4 + v2[9], v1);
  uint64_t v7 = v0 + v4 + v2[10];
  if (*(unsigned __int8 *)(v7 + 104) != 255) {
    sub_21F76D570(*(void *)v7, *(void *)(v7 + 8), *(void *)(v7 + 16), *(void *)(v7 + 24), *(void *)(v7 + 32), *(void *)(v7 + 40), *(void *)(v7 + 48), *(void *)(v7 + 56), *(_OWORD *)(v7 + 64));
  }
  uint64_t v8 = v6 + v2[11];
  if (*(unsigned __int8 *)(v8 + 104) != 255) {
    sub_21F76D570(*(void *)v8, *(void *)(v8 + 8), *(void *)(v8 + 16), *(void *)(v8 + 24), *(void *)(v8 + 32), *(void *)(v8 + 40), *(void *)(v8 + 48), *(void *)(v8 + 56), *(_OWORD *)(v8 + 64));
  }
  uint64_t v9 = v6 + v2[12];
  if (*(unsigned char *)(v9 + 90))
  {
    unsigned int v10 = *(unsigned __int16 *)(v9 + 40);
    if (v10 >> 8 <= 0xFE)
    {
      if ((v10 & 0x100) != 0) {
        _s6Charts15AnyChartContentVwxx_0(v6 + v2[12]);
      }
      else {
        sub_21F7654F0(*(void *)v9, *(void *)(v9 + 8), *(unsigned char *)(v9 + 16));
      }
    }
    unsigned int v11 = *(unsigned __int16 *)(v9 + 88);
    if (v11 >> 8 <= 0xFE)
    {
      if ((v11 & 0x100) != 0) {
        _s6Charts15AnyChartContentVwxx_0(v9 + 48);
      }
      else {
        sub_21F7654F0(*(void *)(v9 + 48), *(void *)(v9 + 56), *(unsigned char *)(v9 + 64));
      }
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v12 = v6 + v2[13];
  if (*(unsigned char *)(v12 + 80))
  {
    if (*(void *)(v12 + 64)) {
      _s6Charts15AnyChartContentVwxx_0(v12 + 40);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v13 = v6 + v2[14];
  int v14 = *(unsigned __int8 *)(v13 + 16);
  if (v14 != 255) {
    sub_21F7654F0(*(void *)v13, *(void *)(v13 + 8), v14);
  }
  swift_release();
  uint64_t v15 = v6 + v2[15];
  int v16 = *(unsigned __int8 *)(v15 + 16);
  if (v16 != 255) {
    sub_21F7654F0(*(void *)v15, *(void *)(v15 + 8), v16);
  }
  swift_release();

  return MEMORY[0x270FA0238](v0, v4 + v5, v3 | 7);
}

uint64_t sub_21FA1D1B4(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ChartScrollView();

  return sub_21FA19FFC(a1, a2);
}

uint64_t sub_21FA1D254()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)type metadata accessor for ChartScrollView();
  uint64_t v3 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v23 = *(void *)(*((void *)v2 - 1) + 64);
  uint64_t v5 = sub_21FA249F0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = v0 + v4;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v4 + v2[9], v1);
  uint64_t v10 = v0 + v4 + v2[10];
  if (*(unsigned __int8 *)(v10 + 104) != 255) {
    sub_21F76D570(*(void *)v10, *(void *)(v10 + 8), *(void *)(v10 + 16), *(void *)(v10 + 24), *(void *)(v10 + 32), *(void *)(v10 + 40), *(void *)(v10 + 48), *(void *)(v10 + 56), *(_OWORD *)(v10 + 64));
  }
  uint64_t v11 = v9 + v2[11];
  if (*(unsigned __int8 *)(v11 + 104) != 255) {
    sub_21F76D570(*(void *)v11, *(void *)(v11 + 8), *(void *)(v11 + 16), *(void *)(v11 + 24), *(void *)(v11 + 32), *(void *)(v11 + 40), *(void *)(v11 + 48), *(void *)(v11 + 56), *(_OWORD *)(v11 + 64));
  }
  uint64_t v12 = v9 + v2[12];
  if (*(unsigned char *)(v12 + 90))
  {
    unsigned int v13 = *(unsigned __int16 *)(v12 + 40);
    if (v13 >> 8 <= 0xFE)
    {
      if ((v13 & 0x100) != 0) {
        _s6Charts15AnyChartContentVwxx_0(v9 + v2[12]);
      }
      else {
        sub_21F7654F0(*(void *)v12, *(void *)(v12 + 8), *(unsigned char *)(v12 + 16));
      }
    }
    unsigned int v14 = *(unsigned __int16 *)(v12 + 88);
    if (v14 >> 8 <= 0xFE)
    {
      if ((v14 & 0x100) != 0) {
        _s6Charts15AnyChartContentVwxx_0(v12 + 48);
      }
      else {
        sub_21F7654F0(*(void *)(v12 + 48), *(void *)(v12 + 56), *(unsigned char *)(v12 + 64));
      }
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v15 = v9 + v2[13];
  if (*(unsigned char *)(v15 + 80))
  {
    if (*(void *)(v15 + 64)) {
      _s6Charts15AnyChartContentVwxx_0(v15 + 40);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v16 = v9 + v2[14];
  int v17 = *(unsigned __int8 *)(v16 + 16);
  if (v17 != 255) {
    sub_21F7654F0(*(void *)v16, *(void *)(v16 + 8), v17);
  }
  swift_release();
  uint64_t v18 = v9 + v2[15];
  int v19 = *(unsigned __int8 *)(v18 + 16);
  if (v19 != 255) {
    sub_21F7654F0(*(void *)v18, *(void *)(v18 + 8), v19);
  }
  uint64_t v20 = v3 | v7 | 7;
  uint64_t v21 = (v4 + v23 + v7) & ~v7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v21, v5);

  return MEMORY[0x270FA0238](v0, v21 + v8, v20);
}

uint64_t sub_21FA1D544()
{
  uint64_t v1 = *(void *)(type metadata accessor for ChartScrollView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(sub_21FA249F0() - 8);
  uint64_t v5 = v0 + ((v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return sub_21FA1A1B0(v0 + v2, v5);
}

uint64_t sub_21FA1D62C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21FA1AE1C(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

unint64_t sub_21FA1D634()
{
  unint64_t result = qword_26AD448E8;
  if (!qword_26AD448E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD448E8);
  }
  return result;
}

uint64_t sub_21FA1D688(uint64_t a1)
{
  return a1;
}

void *sub_21FA1D6E4(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_21FA1D748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14 != -1) {
    return sub_21F764268(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  return a1;
}

unint64_t sub_21FA1D780()
{
  unint64_t result = qword_267EEAE90;
  if (!qword_267EEAE90)
  {
    sub_21F779EA4(qword_26AD48608);
    sub_21F74C488(&qword_267EEAE98, (void (*)(uint64_t))type metadata accessor for ChartModel.Scenegraph);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EEAE90);
  }
  return result;
}

uint64_t sub_21FA1D824(uint64_t result)
{
  *(unsigned char *)(result + 297) = 1;
  return result;
}

uint64_t *sub_21FA1D834(uint64_t *a1)
{
  return a1;
}

uint64_t sub_21FA1D870@<X0>(void *a1@<X8>)
{
  sub_21F998190();
  uint64_t result = sub_21FA24B40();
  *a1 = v3;
  return result;
}

uint64_t sub_21FA1D8C4@<X0>(unsigned char *a1@<X8>)
{
  sub_21F99813C();
  uint64_t result = sub_21FA24B40();
  *a1 = v3;
  return result;
}

uint64_t sub_21FA1D914()
{
  return sub_21FA24B50();
}

unint64_t sub_21FA1D960()
{
  unint64_t result = qword_26AD44828;
  if (!qword_26AD44828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD44828);
  }
  return result;
}

uint64_t sub_21FA1D9B4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)type metadata accessor for RenderBasedChartView();
  uint64_t v3 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = *(void *)(*((void *)v2 - 1) + 64);
  uint64_t v41 = type metadata accessor for ChartModel.Scenegraph();
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(v41 - 8) + 80);
  uint64_t v7 = v5 + v6;
  uint64_t v8 = *(void *)(*(void *)(v41 - 8) + 64);
  swift_release();
  swift_release();
  uint64_t v9 = v0;
  uint64_t v10 = v0 + v4;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v4, v1);
  uint64_t v11 = v0 + v4 + v2[9];
  sub_21F76CA40(&qword_26AD4A208);
  uint64_t v42 = v8;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = sub_21FA24220();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
    uint64_t v13 = v7;
    unsigned int v14 = (int *)type metadata accessor for ChartEnvironmentValues(0);
    uint64_t v15 = v6;
    uint64_t v16 = v3;
    uint64_t v17 = v11 + v14[5];
    uint64_t v18 = sub_21FA24320();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);
    uint64_t v19 = v11 + v14[6];
    uint64_t v20 = sub_21FA24970();
    uint64_t v21 = v19;
    uint64_t v3 = v16;
    uint64_t v6 = v15;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v21, v20);
    uint64_t v22 = v14[8];
    uint64_t v7 = v13;
    uint64_t v23 = v11 + v22;
    uint64_t v24 = sub_21FA24730();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v23, v24);
  }
  else
  {
    swift_release();
  }
  uint64_t v25 = v4 + v7;
  sub_21F7757E8(*(void *)(v10 + v2[10]), *(void *)(v10 + v2[10] + 8), *(unsigned char *)(v10 + v2[10] + 16), (uint64_t (*)(void))sub_21F7757E4);
  sub_21F7757E8(*(void *)(v10 + v2[11]), *(void *)(v10 + v2[11] + 8), *(unsigned char *)(v10 + v2[11] + 16), (uint64_t (*)(void))sub_21F7757E4);
  sub_21F7757F8(*(void *)(v10 + v2[12]), *(unsigned char *)(v10 + v2[12] + 8), MEMORY[0x263F8EED8], MEMORY[0x263F8EEA0]);
  uint64_t v26 = v10 + v2[13];
  sub_21F77580C(*(void *)v26, *(void *)(v26 + 8), *(void *)(v26 + 16), *(void *)(v26 + 24), *(unsigned char *)(v26 + 32));
  uint64_t v27 = v10 + v2[14];
  sub_21F77598C(*(void *)v27, *(void *)(v27 + 8), *(void *)(v27 + 16), *(void *)(v27 + 24), *(void *)(v27 + 32), *(void *)(v27 + 40), *(void *)(v27 + 48), *(unsigned char *)(v27 + 56));
  uint64_t v28 = (unsigned __int8 *)(v10 + v2[15]);
  if (v28[283])
  {
    if (v28[40] != 255) {
      _s6Charts15AnyChartContentVwxx_0(v10 + v2[15]);
    }
    if (v28[88] != 255) {
      _s6Charts15AnyChartContentVwxx_0((uint64_t)(v28 + 48));
    }
    if (v28[136] != 255) {
      _s6Charts15AnyChartContentVwxx_0((uint64_t)(v28 + 96));
    }
    if (v28[184] != 255) {
      _s6Charts15AnyChartContentVwxx_0((uint64_t)(v28 + 144));
    }
    if (v28[232] != 255) {
      _s6Charts15AnyChartContentVwxx_0((uint64_t)(v28 + 192));
    }
    if (v28[280] != 255) {
      _s6Charts15AnyChartContentVwxx_0((uint64_t)(v28 + 240));
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v29 = v25 & ~v6;
  sub_21F7757F8(*(void *)(v10 + v2[16]), *(unsigned char *)(v10 + v2[16] + 8), MEMORY[0x263F8EED8], MEMORY[0x263F8EEA0]);
  uint64_t v30 = v10 + v2[17];
  if (*(unsigned char *)(v30 + 80))
  {
    if (*(void *)(v30 + 64)) {
      _s6Charts15AnyChartContentVwxx_0(v30 + 40);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v31 = v10 + v2[18];
  uint64_t v32 = sub_21F76CA40(&qword_26AD47EF8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(v31, v32);
  sub_21F76CA40(&qword_26AD47F00);
  swift_release();
  uint64_t v33 = v10 + v2[19];
  uint64_t v34 = sub_21FA252F0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8))(v33, v34);
  uint64_t v35 = v9 + v29;
  swift_release();
  swift_release();
  swift_release();
  if (*(unsigned char *)(v9 + v29 + 315))
  {
    if (*(unsigned __int8 *)(v35 + 72) != 255) {
      _s6Charts15AnyChartContentVwxx_0(v9 + v29 + 32);
    }
    if (*(unsigned __int8 *)(v35 + 120) != 255) {
      _s6Charts15AnyChartContentVwxx_0(v35 + 80);
    }
    if (*(unsigned __int8 *)(v35 + 168) != 255) {
      _s6Charts15AnyChartContentVwxx_0(v35 + 128);
    }
    if (*(unsigned __int8 *)(v35 + 216) != 255) {
      _s6Charts15AnyChartContentVwxx_0(v35 + 176);
    }
    if (*(unsigned __int8 *)(v35 + 264) != 255) {
      _s6Charts15AnyChartContentVwxx_0(v35 + 224);
    }
    if (*(unsigned __int8 *)(v35 + 312) != 255) {
      _s6Charts15AnyChartContentVwxx_0(v35 + 272);
    }
  }
  else
  {
    swift_release();
  }
  if (*(void *)(v35 + 320)) {
    swift_release();
  }
  if (*(void *)(v35 + 336)) {
    swift_release();
  }
  if (*(void *)(v35 + 352)) {
    swift_release();
  }
  if (*(void *)(v35 + 368)) {
    swift_release();
  }
  if (*(void *)(v35 + 384)) {
    swift_release();
  }
  if (*(unsigned __int8 *)(v35 + 504) != 255) {
    sub_21F76D570(*(void *)(v35 + 400), *(void *)(v35 + 408), *(void *)(v35 + 416), *(void *)(v35 + 424), *(void *)(v35 + 432), *(void *)(v35 + 440), *(void *)(v35 + 448), *(void *)(v35 + 456), *(_OWORD *)(v35 + 464));
  }
  if (*(unsigned __int8 *)(v35 + 616) != 255) {
    sub_21F76D570(*(void *)(v35 + 512), *(void *)(v35 + 520), *(void *)(v35 + 528), *(void *)(v35 + 536), *(void *)(v35 + 544), *(void *)(v35 + 552), *(void *)(v35 + 560), *(void *)(v35 + 568), *(_OWORD *)(v35 + 576));
  }
  if (*(unsigned __int8 *)(v35 + 720) != 255) {
    sub_21F7E0B38(*(void *)(v35 + 624), *(void *)(v35 + 632), *(void *)(v35 + 640), *(void *)(v35 + 648), *(void *)(v35 + 656), *(void *)(v35 + 664), *(void *)(v35 + 672), *(void *)(v35 + 680));
  }
  if (*(unsigned __int8 *)(v35 + 856) != 255)
  {
    swift_release();
    if (*(void *)(v35 + 768)) {
      _s6Charts15AnyChartContentVwxx_0(v35 + 744);
    }
    if (*(void *)(v35 + 784)) {
      swift_release();
    }
    swift_bridgeObjectRelease();
    int v36 = *(unsigned __int8 *)(v35 + 816);
    if (v36 != 255) {
      sub_21F7757F8(*(void *)(v35 + 808), v36 & 1, MEMORY[0x263F8EEA0], MEMORY[0x263F8EED8]);
    }
  }
  if (*(unsigned __int8 *)(v35 + 968) != 255) {
    sub_21F76D570(*(void *)(v35 + 864), *(void *)(v35 + 872), *(void *)(v35 + 880), *(void *)(v35 + 888), *(void *)(v35 + 896), *(void *)(v35 + 904), *(void *)(v35 + 912), *(void *)(v35 + 920), *(_OWORD *)(v35 + 928));
  }
  if (*(unsigned __int8 *)(v35 + 1104) != 255) {
    sub_21F7E0CA8(*(void *)(v35 + 976), *(void *)(v35 + 984), *(void *)(v35 + 992), *(void *)(v35 + 1000), *(void *)(v35 + 1008), *(void *)(v35 + 1016), *(void *)(v35 + 1024), *(void *)(v35 + 1032), *(void *)(v35 + 1040), *(void *)(v35 + 1048), *(void *)(v35 + 1056), *(void *)(v35 + 1064));
  }
  uint64_t v37 = v35 + *(int *)(v41 + 56);
  uint64_t v38 = sub_21FA24970();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(v37, v38);
  swift_release();
  swift_release();
  uint64_t v39 = (unsigned __int8 *)(v35 + *(int *)(v41 + 68));
  if (v39[40] != 255) {
    _s6Charts15AnyChartContentVwxx_0((uint64_t)v39);
  }
  if (v39[88] != 255) {
    _s6Charts15AnyChartContentVwxx_0((uint64_t)(v39 + 48));
  }
  if (v39[136] != 255) {
    _s6Charts15AnyChartContentVwxx_0((uint64_t)(v39 + 96));
  }
  if (v39[184] != 255) {
    _s6Charts15AnyChartContentVwxx_0((uint64_t)(v39 + 144));
  }
  if (v39[232] != 255) {
    _s6Charts15AnyChartContentVwxx_0((uint64_t)(v39 + 192));
  }
  if (v39[280] != 255) {
    _s6Charts15AnyChartContentVwxx_0((uint64_t)(v39 + 240));
  }

  return MEMORY[0x270FA0238](v9, v29 + v42, v3 | v6 | 7);
}

uint64_t sub_21FA1E2A8(uint64_t result)
{
  *(unsigned char *)(result + 130) = 0;
  return result;
}

uint64_t sub_21FA1E2B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for RenderBasedChartView();
  return sub_21FA14AF0(a1, v4, a2);
}

unint64_t sub_21FA1E34C()
{
  unint64_t result = qword_26AD44948;
  if (!qword_26AD44948)
  {
    sub_21F779EA4(&qword_26AD44950);
    sub_21F779EA4(&qword_26AD44980);
    sub_21FA1E448();
    sub_21F9BEA68();
    swift_getOpaqueTypeConformance2();
    sub_21F74C488(&qword_26AD448F8, (void (*)(uint64_t))type metadata accessor for AutomaticScrollLimitModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD44948);
  }
  return result;
}

unint64_t sub_21FA1E448()
{
  unint64_t result = qword_26AD44978;
  if (!qword_26AD44978)
  {
    sub_21F779EA4(&qword_26AD44980);
    sub_21FA1E4E8();
    sub_21F779E60(&qword_26AD44A00, &qword_26AD44A08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD44978);
  }
  return result;
}

unint64_t sub_21FA1E4E8()
{
  unint64_t result = qword_26AD44960;
  if (!qword_26AD44960)
  {
    sub_21F779EA4(&qword_26AD44968);
    sub_21FA1E588();
    sub_21F779E60(&qword_26AD4A238, &qword_26AD4A240);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD44960);
  }
  return result;
}

unint64_t sub_21FA1E588()
{
  unint64_t result = qword_26AD44930;
  if (!qword_26AD44930)
  {
    sub_21F779EA4(&qword_26AD44938);
    sub_21F779E60(&qword_26AD448C0, &qword_26AD448C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD44930);
  }
  return result;
}

uint64_t sub_21FA1E628(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_21FA1E684()
{
  unint64_t result = qword_26AD44988;
  if (!qword_26AD44988)
  {
    sub_21F779EA4(&qword_26AD479B0);
    sub_21FA1E700();
    sub_21FA1E8F0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD44988);
  }
  return result;
}

unint64_t sub_21FA1E700()
{
  unint64_t result = qword_26AD44970;
  if (!qword_26AD44970)
  {
    sub_21F779EA4(&qword_26AD479A8);
    sub_21FA1E7A0();
    sub_21F779E60(&qword_26AD4A2E8, &qword_26AD4A2F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD44970);
  }
  return result;
}

unint64_t sub_21FA1E7A0()
{
  unint64_t result = qword_26AD44958;
  if (!qword_26AD44958)
  {
    sub_21F779EA4(&qword_26AD47C18);
    type metadata accessor for SgCanvasRenderer(255);
    sub_21F779EA4(&qword_26AD49370);
    sub_21F74C488(&qword_26AD49200, (void (*)(uint64_t))type metadata accessor for SgCanvasRenderer);
    sub_21F779E60(&qword_26AD49368, &qword_26AD49370);
    swift_getOpaqueTypeConformance2();
    sub_21F779E60(&qword_26AD449E0, &qword_26AD449E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD44958);
  }
  return result;
}

unint64_t sub_21FA1E8F0()
{
  unint64_t result = qword_26AD44920;
  if (!qword_26AD44920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD44920);
  }
  return result;
}

uint64_t sub_21FA1E948@<X0>(void *a1@<X8>)
{
  type metadata accessor for RenderBasedChartView();

  return sub_21FA147A8(a1);
}

uint64_t sub_21FA1E9D4()
{
  uint64_t v1 = type metadata accessor for ChartModel.Scenegraph();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v5 = v0 + v3;
  swift_release();
  swift_release();
  swift_release();
  if (*(unsigned char *)(v0 + v3 + 315))
  {
    if (*(unsigned __int8 *)(v5 + 72) != 255) {
      _s6Charts15AnyChartContentVwxx_0(v0 + v3 + 32);
    }
    if (*(unsigned __int8 *)(v5 + 120) != 255) {
      _s6Charts15AnyChartContentVwxx_0(v5 + 80);
    }
    if (*(unsigned __int8 *)(v5 + 168) != 255) {
      _s6Charts15AnyChartContentVwxx_0(v5 + 128);
    }
    if (*(unsigned __int8 *)(v5 + 216) != 255) {
      _s6Charts15AnyChartContentVwxx_0(v5 + 176);
    }
    if (*(unsigned __int8 *)(v5 + 264) != 255) {
      _s6Charts15AnyChartContentVwxx_0(v5 + 224);
    }
    if (*(unsigned __int8 *)(v5 + 312) != 255) {
      _s6Charts15AnyChartContentVwxx_0(v5 + 272);
    }
  }
  else
  {
    swift_release();
  }
  if (*(void *)(v5 + 320)) {
    swift_release();
  }
  if (*(void *)(v5 + 336)) {
    swift_release();
  }
  if (*(void *)(v5 + 352)) {
    swift_release();
  }
  if (*(void *)(v5 + 368)) {
    swift_release();
  }
  if (*(void *)(v5 + 384)) {
    swift_release();
  }
  if (*(unsigned __int8 *)(v5 + 504) != 255) {
    sub_21F76D570(*(void *)(v5 + 400), *(void *)(v5 + 408), *(void *)(v5 + 416), *(void *)(v5 + 424), *(void *)(v5 + 432), *(void *)(v5 + 440), *(void *)(v5 + 448), *(void *)(v5 + 456), *(_OWORD *)(v5 + 464));
  }
  if (*(unsigned __int8 *)(v5 + 616) != 255) {
    sub_21F76D570(*(void *)(v5 + 512), *(void *)(v5 + 520), *(void *)(v5 + 528), *(void *)(v5 + 536), *(void *)(v5 + 544), *(void *)(v5 + 552), *(void *)(v5 + 560), *(void *)(v5 + 568), *(_OWORD *)(v5 + 576));
  }
  if (*(unsigned __int8 *)(v5 + 720) != 255) {
    sub_21F7E0B38(*(void *)(v5 + 624), *(void *)(v5 + 632), *(void *)(v5 + 640), *(void *)(v5 + 648), *(void *)(v5 + 656), *(void *)(v5 + 664), *(void *)(v5 + 672), *(void *)(v5 + 680));
  }
  if (*(unsigned __int8 *)(v5 + 856) != 255)
  {
    swift_release();
    if (*(void *)(v5 + 768)) {
      _s6Charts15AnyChartContentVwxx_0(v5 + 744);
    }
    if (*(void *)(v5 + 784)) {
      swift_release();
    }
    swift_bridgeObjectRelease();
    int v6 = *(unsigned __int8 *)(v5 + 816);
    if (v6 != 255) {
      sub_21F7757F8(*(void *)(v5 + 808), v6 & 1, MEMORY[0x263F8EEA0], MEMORY[0x263F8EED8]);
    }
  }
  if (*(unsigned __int8 *)(v5 + 968) != 255) {
    sub_21F76D570(*(void *)(v5 + 864), *(void *)(v5 + 872), *(void *)(v5 + 880), *(void *)(v5 + 888), *(void *)(v5 + 896), *(void *)(v5 + 904), *(void *)(v5 + 912), *(void *)(v5 + 920), *(_OWORD *)(v5 + 928));
  }
  if (*(unsigned __int8 *)(v5 + 1104) != 255) {
    sub_21F7E0CA8(*(void *)(v5 + 976), *(void *)(v5 + 984), *(void *)(v5 + 992), *(void *)(v5 + 1000), *(void *)(v5 + 1008), *(void *)(v5 + 1016), *(void *)(v5 + 1024), *(void *)(v5 + 1032), *(void *)(v5 + 1040), *(void *)(v5 + 1048), *(void *)(v5 + 1056), *(void *)(v5 + 1064));
  }
  uint64_t v7 = v5 + *(int *)(v1 + 56);
  uint64_t v8 = sub_21FA24970();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_release();
  swift_release();
  uint64_t v9 = (unsigned __int8 *)(v5 + *(int *)(v1 + 68));
  if (v9[40] != 255) {
    _s6Charts15AnyChartContentVwxx_0((uint64_t)v9);
  }
  if (v9[88] != 255) {
    _s6Charts15AnyChartContentVwxx_0((uint64_t)(v9 + 48));
  }
  if (v9[136] != 255) {
    _s6Charts15AnyChartContentVwxx_0((uint64_t)(v9 + 96));
  }
  if (v9[184] != 255) {
    _s6Charts15AnyChartContentVwxx_0((uint64_t)(v9 + 144));
  }
  if (v9[232] != 255) {
    _s6Charts15AnyChartContentVwxx_0((uint64_t)(v9 + 192));
  }
  if (v9[280] != 255) {
    _s6Charts15AnyChartContentVwxx_0((uint64_t)(v9 + 240));
  }

  return MEMORY[0x270FA0238](v0, v3 + v4, v2 | 7);
}

id sub_21FA1EE4C(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

uint64_t sub_21FA1EE60(uint64_t result)
{
  *(unsigned char *)(result + 129) = 0;
  return result;
}

uint64_t sub_21FA1EE68(uint64_t a1)
{
  return a1;
}

uint64_t sub_21FA1EE94(uint64_t a1)
{
  return a1;
}

uint64_t sub_21FA1EEC0(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 128);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), v4);
  return a1;
}

uint64_t destroy for XYBindingValue(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(unsigned __int8 *)(result + 16);
  if (v2 != 255) {
    unint64_t result = sub_21F7654F0(*(void *)result, *(void *)(result + 8), v2);
  }
  int v3 = *(unsigned __int8 *)(v1 + 40);
  if (v3 != 255)
  {
    uint64_t v4 = *(void *)(v1 + 24);
    uint64_t v5 = *(void *)(v1 + 32);
    return sub_21F7654F0(v4, v5, v3);
  }
  return result;
}

uint64_t initializeWithCopy for XYBindingValue(uint64_t a1, uint64_t *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 16);
  if (v4 == 255)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  }
  else
  {
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    sub_21F7607AC(*a2, v6, v4);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    *(unsigned char *)(a1 + 16) = v4;
  }
  int v7 = *((unsigned __int8 *)a2 + 40);
  if (v7 == 255)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  }
  else
  {
    uint64_t v9 = a2[3];
    uint64_t v8 = a2[4];
    sub_21F7607AC(v9, v8, v7);
    *(void *)(a1 + 24) = v9;
    *(void *)(a1 + 32) = v8;
    *(unsigned char *)(a1 + 40) = v7;
  }
  return a1;
}

uint64_t assignWithCopy for XYBindingValue(uint64_t a1, long long *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 16);
  if (*(unsigned __int8 *)(a1 + 16) == 255)
  {
    if (v4 == 255)
    {
      long long v13 = *a2;
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
      *(_OWORD *)a1 = v13;
    }
    else
    {
      uint64_t v10 = *(void *)a2;
      uint64_t v11 = *((void *)a2 + 1);
      sub_21F7607AC(*(void *)a2, v11, v4);
      *(void *)a1 = v10;
      *(void *)(a1 + 8) = v11;
      *(unsigned char *)(a1 + 16) = v4;
    }
  }
  else if (v4 == 255)
  {
    sub_21F909D60(a1);
    char v12 = *((unsigned char *)a2 + 16);
    *(_OWORD *)a1 = *a2;
    *(unsigned char *)(a1 + 16) = v12;
  }
  else
  {
    uint64_t v5 = *(void *)a2;
    uint64_t v6 = *((void *)a2 + 1);
    sub_21F7607AC(*(void *)a2, v6, v4);
    uint64_t v7 = *(void *)a1;
    uint64_t v8 = *(void *)(a1 + 8);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    char v9 = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v4;
    sub_21F7654F0(v7, v8, v9);
  }
  unsigned int v14 = (long long *)(a1 + 24);
  uint64_t v15 = (long long *)((char *)a2 + 24);
  int v16 = *((unsigned __int8 *)a2 + 40);
  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    if (v16 == 255)
    {
      long long v25 = *v15;
      *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
      *unsigned int v14 = v25;
    }
    else
    {
      uint64_t v23 = *((void *)a2 + 3);
      uint64_t v22 = *((void *)a2 + 4);
      sub_21F7607AC(v23, v22, v16);
      *(void *)(a1 + 24) = v23;
      *(void *)(a1 + 32) = v22;
      *(unsigned char *)(a1 + 40) = v16;
    }
  }
  else if (v16 == 255)
  {
    sub_21F909D60(a1 + 24);
    char v24 = *((unsigned char *)a2 + 40);
    *unsigned int v14 = *v15;
    *(unsigned char *)(a1 + 40) = v24;
  }
  else
  {
    uint64_t v18 = *((void *)a2 + 3);
    uint64_t v17 = *((void *)a2 + 4);
    sub_21F7607AC(v18, v17, v16);
    uint64_t v19 = *(void *)(a1 + 24);
    uint64_t v20 = *(void *)(a1 + 32);
    *(void *)(a1 + 24) = v18;
    *(void *)(a1 + 32) = v17;
    char v21 = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v16;
    sub_21F7654F0(v19, v20, v21);
  }
  return a1;
}

uint64_t assignWithTake for XYBindingValue(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 != 255)
  {
    int v5 = *(unsigned __int8 *)(a2 + 16);
    if (v5 != 255)
    {
      uint64_t v6 = *(void *)a1;
      uint64_t v7 = *(void *)(a1 + 8);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = v5;
      sub_21F7654F0(v6, v7, v4);
      goto LABEL_6;
    }
    sub_21F909D60(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
LABEL_6:
  uint64_t v8 = (_OWORD *)(a2 + 24);
  int v9 = *(unsigned __int8 *)(a1 + 40);
  if (v9 == 255)
  {
LABEL_10:
    *(_OWORD *)(a1 + 24) = *v8;
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    return a1;
  }
  int v10 = *(unsigned __int8 *)(a2 + 40);
  if (v10 == 255)
  {
    sub_21F909D60(a1 + 24);
    goto LABEL_10;
  }
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *v8;
  *(unsigned char *)(a1 + 40) = v10;
  sub_21F7654F0(v11, v12, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for XYBindingValue(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = (v3 ^ 0xFF) - 1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for XYBindingValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = ~(_BYTE)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XYBindingValue()
{
  return &type metadata for XYBindingValue;
}

uint64_t initializeWithCopy for ScrollViewBoundsReader(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScrollViewBoundsReader(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  long long v4 = a2[1];
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *((void *)a2 + 6);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(void *)(a1 + 48) = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ScrollViewBoundsReader(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollViewBoundsReader(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollViewBoundsReader(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollViewBoundsReader()
{
  return &type metadata for ScrollViewBoundsReader;
}

uint64_t getEnumTagSinglePayload for ChartLayout.LegendParameters(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF8 && a1[41]) {
    return (*(_DWORD *)a1 + 248);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 9;
  int v5 = v3 - 9;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ChartLayout.LegendParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF7)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)unint64_t result = a2 - 248;
    if (a3 >= 0xF8) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF8) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 8;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ChartCanvasMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x21FA1F608);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_21FA1F638()
{
  return swift_getWitnessTable();
}

unint64_t sub_21FA1F940()
{
  unint64_t result = qword_267EEAEA0[0];
  if (!qword_267EEAEA0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_267EEAEA0);
  }
  return result;
}

uint64_t sub_21FA1F994()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21FA1F9B0(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(uint64_t (**)(unsigned char *, unsigned char *))(v2 + 16);
  sub_21F76C9DC(a1, (uint64_t)v6, &qword_26AD4A408);
  sub_21F76C9DC(a2, (uint64_t)v7, &qword_26AD4A408);
  return v4(v6, v7);
}

unint64_t sub_21FA1FA18()
{
  unint64_t result = qword_26AD44A20;
  if (!qword_26AD44A20)
  {
    sub_21F779EA4(&qword_26AD4A408);
    sub_21F74C488(&qword_26AD48390, type metadata accessor for CGRect);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD44A20);
  }
  return result;
}

uint64_t sub_21FA1FABC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21FA1FB74@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_21F76CA40(&qword_26AD4A2B8);
  MEMORY[0x270FA5388](v4);
  unsigned int v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  int v9 = (char *)v21 - v8;
  double v11 = a1[1];
  CGFloat v10 = a1[2];
  CGFloat v13 = a1[3];
  CGFloat v12 = a1[4];
  v23.origin.CGFloat x = v11;
  v23.origin.CGFloat y = v10;
  v23.size.CGFloat width = v13;
  v23.size.CGFloat height = v12;
  if (CGRectGetWidth(v23) <= 0.0)
  {
    v24.origin.CGFloat x = v11;
    v24.origin.CGFloat y = v10;
    v24.size.CGFloat width = v13;
    v24.size.CGFloat height = v12;
    double v11 = CGRectGetMidX(v24) + -0.5;
    CGFloat v13 = 1.0;
  }
  v25.origin.CGFloat x = v11;
  v25.origin.CGFloat y = v10;
  v25.size.CGFloat width = v13;
  v25.size.CGFloat height = v12;
  if (CGRectGetHeight(v25) <= 0.0)
  {
    v26.origin.CGFloat x = v11;
    v26.origin.CGFloat y = v10;
    v26.size.CGFloat width = v13;
    v26.size.CGFloat height = v12;
    CGRectGetMidY(v26);
  }
  sub_21FA25280();
  *(_OWORD *)char v21 = *(_OWORD *)&v21[3];
  uint64_t v14 = v21[5];
  uint64_t v15 = v21[6];
  char v16 = v22;
  uint64_t v17 = (char *)a1 + *(int *)(sub_21F76CA40(&qword_26AD47C00) + 36);
  uint64_t v18 = &v6[*(int *)(v4 + 36)];
  uint64_t v19 = sub_21FA250D0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v18, v17, v19);
  *(_OWORD *)unsigned int v6 = *(_OWORD *)v21;
  *((void *)v6 + 2) = v14;
  *((void *)v6 + 3) = v15;
  v6[32] = v16;
  v6[33] = 1;
  sub_21FA249C0();
  sub_21F76CA84((uint64_t)v6, &qword_26AD4A2B8);
  return sub_21F76C9DC((uint64_t)v9, a2, &qword_26AD4A2B8);
}

uint64_t sub_21FA1FD90@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v52 = sub_21F76CA40(&qword_26AD4A2C8);
  MEMORY[0x270FA5388](v52);
  uint64_t v55 = (uint64_t)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_21FA24FD0();
  uint64_t v50 = *(void (***)(char *, void))(v7 - 8);
  MEMORY[0x270FA5388](v7);
  int v9 = (char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_21F76CA40(&qword_26AD4A3A0);
  MEMORY[0x270FA5388](v54);
  double v11 = (void *)((char *)v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (void *)((char *)v44 - v13);
  uint64_t v51 = sub_21F76CA40(&qword_26AD4A368);
  uint64_t v15 = *(void *)(v51 - 8);
  MEMORY[0x270FA5388](v51);
  uint64_t v17 = (char *)v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_21F76CA40(&qword_26AD48560);
  uint64_t v18 = *(void *)(v53 - 8);
  MEMORY[0x270FA5388](v53);
  MEMORY[0x270FA5388](v19);
  if (a2)
  {
    uint64_t v47 = v18;
    char v48 = (char *)v44 - v20;
    uint64_t v46 = v21;
    id v45 = a2;
    *uint64_t v14 = sub_21FA258E0();
    v14[1] = v22;
    sub_21F76CA40(&qword_26AD4A268);
    uint64_t v57 = a1;
    swift_getKeyPath();
    v44[0] = v7;
    swift_bridgeObjectRetain();
    sub_21F76CA40(&qword_26AD4A3F0);
    uint64_t v49 = a3;
    sub_21F76CA40(&qword_26AD4A2B8);
    sub_21F779E60(&qword_26AD4A3F8, &qword_26AD4A3F0);
    sub_21FA207E0();
    sub_21FA257E0();
    sub_21FA24FC0();
    uint64_t v23 = sub_21F779E60(&qword_26AD4A398, &qword_26AD4A3A0);
    uint64_t v24 = v54;
    uint64_t v25 = v23;
    v44[1] = v23;
    sub_21FA25460();
    v50[1](v9, v44[0]);
    sub_21F76CA84((uint64_t)v14, &qword_26AD4A3A0);
    uint64_t v26 = type metadata accessor for ChartAXAudiograph();
    uint64_t v27 = swift_allocObject();
    uint64_t v28 = v45;
    *(void *)(v27 + 16) = v45;
    uint64_t v56 = v27;
    uint64_t v50 = v28;
    uint64_t v57 = v24;
    uint64_t v58 = v25;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v31 = sub_21FA209C8(&qword_26AD492A0, v30, (void (*)(uint64_t))type metadata accessor for ChartAXAudiograph);
    uint64_t v32 = v46;
    uint64_t v33 = v51;
    sub_21FA254A0();
    swift_release();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v33);
    uint64_t v34 = v47;
    uint64_t v35 = v48;
    uint64_t v36 = v53;
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v48, v32, v53);
    (*(void (**)(uint64_t, char *, uint64_t))(v34 + 16))(v55, v35, v36);
    swift_storeEnumTagMultiPayload();
    uint64_t v57 = v33;
    uint64_t v58 = v26;
    uint64_t v59 = OpaqueTypeConformance2;
    uint64_t v60 = v31;
    swift_getOpaqueTypeConformance2();
    sub_21FA24DC0();

    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v35, v36);
  }
  else
  {
    *double v11 = sub_21FA258E0();
    v11[1] = v38;
    sub_21F76CA40(&qword_26AD4A268);
    uint64_t v57 = a1;
    swift_getKeyPath();
    swift_bridgeObjectRetain();
    sub_21F76CA40(&qword_26AD4A3F0);
    sub_21F76CA40(&qword_26AD4A2B8);
    sub_21F779E60(&qword_26AD4A3F8, &qword_26AD4A3F0);
    sub_21FA207E0();
    sub_21FA257E0();
    sub_21F76C9DC((uint64_t)v11, (uint64_t)v14, &qword_26AD4A3A0);
    sub_21FA20960((uint64_t)v14, v55);
    swift_storeEnumTagMultiPayload();
    uint64_t v39 = type metadata accessor for ChartAXAudiograph();
    uint64_t v40 = sub_21F779E60(&qword_26AD4A398, &qword_26AD4A3A0);
    uint64_t v57 = v54;
    uint64_t v58 = v40;
    uint64_t v41 = swift_getOpaqueTypeConformance2();
    uint64_t v43 = sub_21FA209C8(&qword_26AD492A0, v42, (void (*)(uint64_t))type metadata accessor for ChartAXAudiograph);
    uint64_t v57 = v51;
    uint64_t v58 = v39;
    uint64_t v59 = v41;
    uint64_t v60 = v43;
    swift_getOpaqueTypeConformance2();
    sub_21FA24DC0();
    return sub_21F76CA84((uint64_t)v14, &qword_26AD4A3A0);
  }
}

uint64_t sub_21FA20518@<X0>(uint64_t a1@<X8>)
{
  return sub_21FA1FD90(*(void *)v1, *(void **)(v1 + 8), a1);
}

void sub_21FA20520(void *a1)
{
  int v3 = *(void **)(v1 + 16);
  sub_21FA262C0();
  sub_21FA262D0();
  id v4 = objc_msgSend(v3, sel_yAxis);
  objc_msgSend(a1, sel_setYAxis_, v4);

  id v5 = objc_msgSend(v3, sel_series);
  if (!v5)
  {
    sub_21FA20A10();
    sub_21FA25E40();
    id v6 = (id)sub_21FA25E30();
    swift_bridgeObjectRelease();
    id v5 = v6;
  }
  id v7 = v5;
  objc_msgSend(a1, sel_setSeries_);
}

uint64_t sub_21FA20610()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ChartAXAudiograph()
{
  return self;
}

void *initializeBufferWithCopyOfBuffer for SgAccessibilityRenderer(void *a1, void *a2)
{
  int v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  id v4 = v3;
  return a1;
}

void destroy for SgAccessibilityRenderer(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 8);
}

void *assignWithCopy for SgAccessibilityRenderer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v4 = (void *)a1[1];
  id v5 = (void *)a2[1];
  a1[1] = v5;
  id v6 = v5;

  return a1;
}

uint64_t assignWithTake for SgAccessibilityRenderer(uint64_t a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t sub_21FA20778()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21FA20794()
{
  return swift_getOpaqueTypeConformance2();
}

id sub_21FA207B0()
{
  return *(id *)(*(void *)v0 + 16);
}

void sub_21FA207BC(void *a1)
{
}

unint64_t sub_21FA207E0()
{
  unint64_t result = qword_26AD4A2B0;
  if (!qword_26AD4A2B0)
  {
    sub_21F779EA4(&qword_26AD4A2B8);
    sub_21FA20890();
    sub_21FA209C8(&qword_26AD47A28, 255, MEMORY[0x263F1A470]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD4A2B0);
  }
  return result;
}

unint64_t sub_21FA20890()
{
  unint64_t result = qword_26AD4A298;
  if (!qword_26AD4A298)
  {
    sub_21F779EA4(&qword_26AD4A2A0);
    sub_21FA2090C();
    sub_21F99F7F8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD4A298);
  }
  return result;
}

unint64_t sub_21FA2090C()
{
  unint64_t result = qword_26AD4A350;
  if (!qword_26AD4A350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD4A350);
  }
  return result;
}

uint64_t sub_21FA20960(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21F76CA40(&qword_26AD4A3A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21FA209C8(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_21FA20A10()
{
  unint64_t result = qword_26AD45438[0];
  if (!qword_26AD45438[0])
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, qword_26AD45438);
  }
  return result;
}

uint64_t sub_21FA20A50()
{
  return MEMORY[0x263F1BA00];
}

unint64_t sub_21FA20A60()
{
  unint64_t result = qword_26AD4A2D8;
  if (!qword_26AD4A2D8)
  {
    sub_21F779EA4(&qword_26AD48430);
    sub_21F779EA4(&qword_26AD4A368);
    type metadata accessor for ChartAXAudiograph();
    sub_21F779EA4(&qword_26AD4A3A0);
    sub_21F779E60(&qword_26AD4A398, &qword_26AD4A3A0);
    swift_getOpaqueTypeConformance2();
    sub_21FA209C8(&qword_26AD492A0, v1, (void (*)(uint64_t))type metadata accessor for ChartAXAudiograph);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD4A2D8);
  }
  return result;
}

void BuilderEmpty._body.getter()
{
}

uint64_t static BuilderEmpty._chart3DContentCount(inputs:)()
{
  return 0;
}

void sub_21FA20C18()
{
}

uint64_t sub_21FA20C64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static _ChartContentModifier._makeChartContent(modifier:inputs:body:)(a1, a2, a3, a4, a5);
}

uint64_t sub_21FA20C7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v26[1] = a5;
  uint64_t v27 = a3;
  v26[0] = a1;
  uint64_t v7 = sub_21F76CA40(qword_267EE7868);
  MEMORY[0x270FA5388](v7 - 8);
  int v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v26 - v11;
  uint64_t v28 = sub_21F76CA40(&qword_267EE9DA8);
  uint64_t v13 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for _ChartContentInputs(0);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_21FA24FE0();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)v26 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA24FF0();
  sub_21F9A035C(a2, (uint64_t)v18);
  sub_21F76CA40(&qword_267EEAF28);
  sub_21FA2207C();
  sub_21FA24C70();
  sub_21FA20C7C(v15, v18, v27, a4);
  sub_21F7FA9C4((uint64_t)v12, (uint64_t)v9);
  uint64_t v23 = sub_21FA25050();
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v9, 1, v23) == 1)
  {
    sub_21F7FAA2C((uint64_t)v12);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v28);
    sub_21F9A0540((uint64_t)v18);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    return sub_21F7FAA2C((uint64_t)v9);
  }
  else
  {
    sub_21FA25040();
    sub_21F7FAA2C((uint64_t)v12);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v28);
    sub_21F9A0540((uint64_t)v18);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v9, v23);
  }
}

uint64_t static _ChartContentModifier._makeChartContent(modifier:inputs:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  v27[1] = a1;
  uint64_t v29 = a5;
  uint64_t v6 = sub_21F76CA40(qword_267EE7868);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v27 - v10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = sub_21FA24530();
  uint64_t v32 = *(void *)(v13 - 8);
  uint64_t v33 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v27 - v14;
  uint64_t v16 = type metadata accessor for _ChartContentInputs(0);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_21FA24FE0();
  uint64_t v19 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v21 = (char *)v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA24FF0();
  sub_21F9A035C(a2, (uint64_t)v18);
  type metadata accessor for ChartContentModifierBodyAccessor();
  swift_getWitnessTable();
  sub_21FA24C70();
  uint64_t v22 = (uint64_t)v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v15, v18, v30, v31, AssociatedTypeWitness, AssociatedConformanceWitness);
  sub_21F7FA9C4((uint64_t)v11, (uint64_t)v8);
  uint64_t v24 = sub_21FA25050();
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24) == 1)
  {
    sub_21F7FAA2C((uint64_t)v11);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v15, v33);
    sub_21F9A0540((uint64_t)v18);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v28);
    return sub_21F7FAA2C(v22);
  }
  else
  {
    sub_21FA25040();
    sub_21F7FAA2C((uint64_t)v11);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v15, v33);
    sub_21F9A0540((uint64_t)v18);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v28);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v22, v24);
  }
}

uint64_t sub_21FA213E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static _ChartContentModifier._chartContentCount(inputs:body:)(a1, a2, a3);
}

uint64_t static _ChartContentModifier._chartContentCount(inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(a1, a2, a3, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t type metadata accessor for ChartContentModifierBodyAccessor()
{
  return sub_21F764F08();
}

uint64_t sub_21FA214D0(uint64_t result, char a2)
{
  if (a2)
  {
    MEMORY[0x270FA5388](result);
    type metadata accessor for ChartContentModifierBodyAccessor();
    swift_getWitnessTable();
    return sub_21FA24C60();
  }
  return result;
}

uint64_t sub_21FA21584(uint64_t result, char a2)
{
  return sub_21FA214D0(result, a2);
}

void ChartModifiedContent<>.body.getter()
{
}

uint64_t static ChartModifiedContent<>._makeChartContent(content:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v23 = a3;
  uint64_t v24 = a5;
  uint64_t v26 = a7;
  uint64_t v27 = a2;
  type metadata accessor for ChartModifiedContent();
  uint64_t v11 = sub_21FA24530();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v25 = sub_21FA24530();
  uint64_t v15 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v17 = (char *)&v22 - v16;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v18 = v24;
  uint64_t v30 = v24;
  uint64_t v31 = a6;
  sub_21F8115A8((void (*)(uint64_t))sub_21FA218DC, a4, (uint64_t)&v22 - v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  unint64_t v19 = (*(unsigned __int8 *)(v12 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v20 = (char *)swift_allocObject();
  *((void *)v20 + 2) = v23;
  *((void *)v20 + 3) = a4;
  *((void *)v20 + 4) = v18;
  *((void *)v20 + 5) = a6;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v20[v19], v14, v11);
  (*(void (**)(char *, uint64_t, uint64_t (*)(uint64_t), char *, uint64_t, uint64_t))(a6 + 32))(v17, v27, sub_21FA21AF4, v20, a4, a6);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v25);
}

uint64_t sub_21FA21840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for ChartModifiedContent();
  uint64_t v6 = a1 + *(int *)(v5 + 36);
  _OWORD v10[2] = v5;
  v10[3] = a3;
  uint64_t v7 = sub_21FA243A0();
  sub_21F74CD38(v6, (uint64_t)sub_21FA220F0, (uint64_t)v10, a3, MEMORY[0x263F8E628], v7, MEMORY[0x263F8E658], v8);
  return v10[5];
}

uint64_t sub_21FA218DC(uint64_t a1)
{
  return sub_21FA21840(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_21FA218E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = sub_21FA24530();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = &v16[-v13];
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v20 = a6;
  type metadata accessor for ChartModifiedContent();
  sub_21FA24530();
  sub_21F8115A8((void (*)(uint64_t))sub_21FA220D8, a3, (uint64_t)v14);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(a5 + 48))(v14, a1, a3, a5);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_21FA21A54()
{
  type metadata accessor for ChartModifiedContent();
  uint64_t v1 = sub_21FA24530();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t sub_21FA21AF4(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  type metadata accessor for ChartModifiedContent();
  uint64_t v7 = *(void *)(sub_21FA24530() - 8);
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return sub_21FA218E8(a1, v8, v3, v4, v5, v6);
}

uint64_t sub_21FA21BB0(uint64_t a1, uint64_t a2)
{
  void v7[2] = type metadata accessor for ChartModifiedContent();
  long long v7[3] = a2;
  uint64_t v4 = sub_21FA243A0();
  sub_21F74CD38(a1, (uint64_t)sub_21FA220E4, (uint64_t)v7, a2, MEMORY[0x263F8E628], v4, MEMORY[0x263F8E658], v5);
  return v7[5];
}

uint64_t static ChartModifiedContent<>._chartContentCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_allocObject();
  _OWORD v10[2] = a2;
  v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t (*)(), void *, uint64_t, uint64_t))(a5 + 40))(a1, sub_21FA21D08, v10, a3, a5);
  swift_release();
  return v11;
}

uint64_t sub_21FA21CF8()
{
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_21FA21D08()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 32) + 56))();
}

void sub_21FA21D48()
{
}

uint64_t sub_21FA21D94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static ChartModifiedContent<>._makeChartContent(content:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8), *(void *)(a4 - 16), a5);
}

uint64_t sub_21FA21DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static ChartModifiedContent<>._chartContentCount(inputs:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t ChartContent.modifier<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16))(v15, v4, a2, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a3);
  return ChartModifiedContent.init(content:modifier:)((uint64_t)v15, (uint64_t)v11, a2, a3, a4);
}

_UNKNOWN **sub_21FA21F3C()
{
  return &protocol witness table for Never;
}

uint64_t sub_21FA21F48(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21FA21F98(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of _ChartContentModifier.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static _ChartContentModifier._makeChartContent(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t dispatch thunk of static _ChartContentModifier._chartContentCount(inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t sub_21FA22044()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 24) + 24))(*(void *)(v0 + 16));
}

unint64_t sub_21FA2207C()
{
  unint64_t result = qword_267EEAF30;
  if (!qword_267EEAF30)
  {
    sub_21F779EA4(&qword_267EEAF28);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EEAF30);
  }
  return result;
}

uint64_t sub_21FA220D8(uint64_t a1)
{
  return sub_21FA21BB0(a1, *(void *)(v1 + 16));
}

uint64_t sub_21FA220E4@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result - 1;
  return result;
}

uint64_t sub_21FA220F0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_21FA220E4(a1, a2);
}

uint64_t AnyAxisMark.init(_:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21F77F300(a1, a2);
}

uint64_t static AnyAxisMark._renderAxisMark(_:_:)(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = sub_21F77E0FC(a1, v3);
  uint64_t v7 = v2;
  return (*(uint64_t (**)(void *, uint64_t *, uint64_t, uint64_t))(v4 + 16))(v5, &v7, v3, v4);
}

uint64_t static AnyAxisMark._layoutAxisMark(_:_:)(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v5 = sub_21F77E0FC(a1, v4);
  uint64_t v7 = v2;
  return (*(uint64_t (**)(void *, uint64_t *, uint64_t, uint64_t))(v3 + 8))(v5, &v7, v4, v3);
}

uint64_t AnyAxisMark.storage.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21F77E098(v1, a1);
}

uint64_t AnyAxisMark.init<A>(erasing:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v6 = sub_21F77E8F8(a4);
  uint64_t v7 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32);

  return v7(v6, a1, a2);
}

uint64_t sub_21FA22258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(a4 + 8))(a1, &v5);
}

uint64_t sub_21FA2229C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(a4 + 16))(a1, &v5);
}

uint64_t sub_21FA222E0(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = sub_21F77E0FC(a1, v3);

  return sub_21FA22258((uint64_t)v5, v2, v3, v4);
}

uint64_t sub_21FA22330(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = sub_21F77E0FC(a1, v3);

  return sub_21FA2229C((uint64_t)v5, v2, v3, v4);
}

uint64_t static Optional<A>._layoutAxisMark(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_21FA26340();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v19 - v10;
  uint64_t v12 = *(void *)(a3 - 8);
  __n128 v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *a2;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v11, a1, v8, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a3) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v11, a3);
  uint64_t v20 = v17;
  (*(void (**)(char *, uint64_t *, uint64_t, uint64_t))(a4 + 8))(v16, &v20, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v16, a3);
}

uint64_t static Optional<A>._renderAxisMark(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = sub_21FA26340();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v21 - v12;
  uint64_t v14 = *(void *)(a3 - 8);
  __n128 v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *a2;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v13, a1, v10, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, a3) == 1)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    *a5 = 0xE000000000000000;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v13, a3);
    uint64_t v22 = v19;
    (*(void (**)(char *, uint64_t *, uint64_t, uint64_t))(a4 + 16))(v18, &v22, a3, a4);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, a3);
  }
  return result;
}

uint64_t sub_21FA22798(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static Optional<A>._layoutAxisMark(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

uint64_t sub_21FA227A4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return static Optional<A>._renderAxisMark(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8), a5);
}

void static BuilderEmpty._renderAxisMark(_:_:)(void *a1@<X8>)
{
  *a1 = 0xE000000000000000;
}

uint64_t static BuilderConditional<>._layoutAxisMark(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v29 = a5;
  uint64_t v30 = a6;
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for BuilderConditional.Storage();
  __n128 v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v29 - v20;
  uint64_t v22 = *a2;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v23 + 16))((char *)&v29 - v20, a1, v18, v19);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v12, v21, a4);
    MEMORY[0x270FA5388](v24);
    *(&v29 - 6) = a3;
    *(&v29 - 5) = a4;
    uint64_t v25 = v30;
    *(&v29 - 4) = v29;
    *(&v29 - 3) = v25;
    *(&v29 - 2) = (uint64_t)v12;
    *(&v29 - 1) = v22;
    sub_21F7803DC(0, (void (*)(void))sub_21FA22AD0, (uint64_t)(&v29 - 8));
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a4);
  }
  else
  {
    uint64_t v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v17, v21, a3);
    MEMORY[0x270FA5388](v27);
    *(&v29 - 6) = a3;
    *(&v29 - 5) = a4;
    uint64_t v28 = v30;
    *(&v29 - 4) = v29;
    *(&v29 - 3) = v28;
    *(&v29 - 2) = (uint64_t)v17;
    *(&v29 - 1) = v22;
    sub_21F7803DC(1, (void (*)(void))sub_21FA22B20, (uint64_t)(&v29 - 8));
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, a3);
  }
}

uint64_t sub_21FA22AD0()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v4 = v0[7];
  return (*(uint64_t (**)(uint64_t, uint64_t *))(v2 + 8))(v1, &v4);
}

uint64_t sub_21FA22B20()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[6];
  uint64_t v4 = v0[7];
  return (*(uint64_t (**)(uint64_t, uint64_t *))(v1 + 8))(v2, &v4);
}

uint64_t static BuilderConditional<>._renderAxisMark(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v31 = a5;
  uint64_t v32 = a6;
  uint64_t v33 = a7;
  uint64_t v11 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for BuilderConditional.Storage();
  __n128 v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v30 - v21;
  uint64_t v23 = *a2;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v24 + 16))((char *)&v30 - v21, a1, v19, v20);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v13, v22, a4);
    MEMORY[0x270FA5388](v25);
    *(&v30 - 6) = a3;
    *(&v30 - 5) = a4;
    uint64_t v26 = v32;
    *(&v30 - 4) = v31;
    *(&v30 - 3) = v26;
    *(&v30 - 2) = (uint64_t)v13;
    *(&v30 - 1) = v23;
    sub_21F7809C0(0, (void (*)(void))sub_21FA22E88, (uint64_t)(&v30 - 8));
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, a4);
  }
  else
  {
    uint64_t v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v18, v22, a3);
    MEMORY[0x270FA5388](v28);
    *(&v30 - 6) = a3;
    *(&v30 - 5) = a4;
    uint64_t v29 = v32;
    *(&v30 - 4) = v31;
    *(&v30 - 3) = v29;
    *(&v30 - 2) = (uint64_t)v18;
    *(&v30 - 1) = v23;
    sub_21F7809C0(1, (void (*)(void))sub_21FA22ED8, (uint64_t)(&v30 - 8));
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, a3);
  }
}

uint64_t sub_21FA22E88()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v4 = v0[7];
  return (*(uint64_t (**)(uint64_t, uint64_t *))(v2 + 16))(v1, &v4);
}

uint64_t sub_21FA22ED8()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[6];
  uint64_t v4 = v0[7];
  return (*(uint64_t (**)(uint64_t, uint64_t *))(v1 + 16))(v2, &v4);
}

uint64_t sub_21FA22F28(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static BuilderConditional<>._layoutAxisMark(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8), *(void *)(a4 - 16));
}

uint64_t sub_21FA22F38@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static BuilderConditional<>._renderAxisMark(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8), *(void *)(a4 - 16), a5);
}

uint64_t dispatch thunk of static AxisMark._layoutAxisMark(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of static AxisMark._renderAxisMark(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

ValueMetadata *type metadata accessor for _AxisMarkLayoutInputs()
{
  return &type metadata for _AxisMarkLayoutInputs;
}

ValueMetadata *type metadata accessor for _AxisMarkRenderInputs()
{
  return &type metadata for _AxisMarkRenderInputs;
}

ValueMetadata *type metadata accessor for _AxisMarkRenderOutputs()
{
  return &type metadata for _AxisMarkRenderOutputs;
}

ValueMetadata *type metadata accessor for AnyAxisMark()
{
  return &type metadata for AnyAxisMark;
}

uint64_t sub_21FA22FB0(uint64_t a1, char a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(void *)(v6 + 104) = 0;
  *(_OWORD *)(v6 + 72) = 0u;
  *(unsigned char *)(v6 + 112) = -1;
  *(void *)(v6 + 128) = 0;
  *(void *)(v6 + 144) = 0;
  *(void *)(v6 + 152) = 0;
  *(void *)(v6 + 168) = 0;
  *(void *)(v6 + 176) = 0;
  *(void *)(v6 + 160) = 255;
  *(void *)(v6 + 16) = a1;
  *(unsigned char *)(v6 + 24) = a2;
  *(unsigned char *)(v6 + 64) = a3;
  *(unsigned char *)(v6 + 136) = a4;
  swift_beginAccess();
  sub_21FA239D4(a5, v6 + 72);
  swift_endAccess();
  *(void *)(v6 + 120) = a6;
  return v6;
}

uint64_t sub_21FA23054()
{
  swift_release();
  swift_release();
  swift_release();
  sub_21FA2360C((uint64_t)(v0 + 9));
  swift_release();
  sub_21F80FEF8(v0[18], v0[19], v0[20]);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AxisMarkContext()
{
  return self;
}

uint64_t sub_21FA230E8()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_21FA230F0()
{
  swift_release();
  swift_release();
  swift_release();
  sub_21FA2360C((uint64_t)(v0 + 9));
  swift_release();
  sub_21F80FEF8(v0[18], v0[19], v0[20]);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AxisMarkLayoutContext()
{
  return self;
}

uint64_t sub_21FA2318C(uint64_t a1, char a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 232) = 0;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  uint64_t v13 = qword_26AD46848;
  swift_retain();
  if (v13 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_26AD52110;
  uint64_t v15 = *(void *)algn_26AD52118;
  *(void *)(v6 + 240) = qword_26AD52110;
  *(void *)(v6 + 248) = v15;
  *(void *)(v6 + 256) = v14;
  *(void *)(v6 + 264) = v15;
  *(void *)(v6 + 272) = v14;
  *(void *)(v6 + 280) = v15;
  *(void *)(v6 + 288) = v14;
  *(void *)(v6 + 296) = v15;
  *(void *)(v6 + 304) = 0x7FF8000000000000;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(void *)(v6 + 344) = 0x3FF0000000000000;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_OWORD *)(v6 + 368) = 0u;
  swift_release();
  sub_21F897D24(a5, (uint64_t)v17);
  sub_21FA22FB0(a1, a2, a3, a4, (uint64_t)v17, a6);
  sub_21FA2360C(a5);
  return v6;
}

uint64_t sub_21FA232A4()
{
  swift_release();
  swift_release();
  swift_release();
  sub_21FA2360C((uint64_t)(v0 + 9));
  swift_release();
  sub_21F80FEF8(v0[18], v0[19], v0[20]);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AxisMarkRenderContext()
{
  return self;
}

uint64_t destroy for AxisLayoutInformation()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AxisLayoutInformation(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AxisLayoutInformation(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for AxisLayoutInformation(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for AxisLayoutInformation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AxisLayoutInformation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AxisLayoutInformation()
{
  return &type metadata for AxisLayoutInformation;
}

uint64_t initializeWithCopy for AxisMarkEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for AxisMarkEnvironment(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

_OWORD *assignWithTake for AxisMarkEnvironment(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for AxisMarkEnvironment()
{
  return &type metadata for AxisMarkEnvironment;
}

uint64_t sub_21FA2360C(uint64_t a1)
{
  uint64_t v2 = sub_21F76CA40(&qword_26AD48EB0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21FA2366C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (void *)sub_21F936E60(MEMORY[0x263F8EE78]);
  char v43 = *(unsigned char *)a1;
  double v6 = *(double *)(a1 + 8);
  double v7 = *(double *)(a1 + 16);
  double v8 = *(double *)(a2 + 8);
  double v9 = *(double *)(a2 + 16);
  double v10 = *(double *)(a1 + 24);
  double v11 = *(double *)(a2 + 24);
  uint64_t v12 = *(void *)(a2 + 32);
  uint64_t v46 = v12 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(v12 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v12 + 64);
  uint64_t v44 = a2;
  sub_21F994560(a2);
  int64_t v16 = 0;
  int64_t v47 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v16 << 6);
      goto LABEL_22;
    }
    int64_t v19 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      goto LABEL_47;
    }
    if (v19 >= v47) {
      break;
    }
    unint64_t v20 = *(void *)(v46 + 8 * v19);
    ++v16;
    if (!v20)
    {
      int64_t v16 = v19 + 1;
      if (v19 + 1 >= v47) {
        break;
      }
      unint64_t v20 = *(void *)(v46 + 8 * v16);
      if (!v20)
      {
        int64_t v16 = v19 + 2;
        if (v19 + 2 >= v47) {
          break;
        }
        unint64_t v20 = *(void *)(v46 + 8 * v16);
        if (!v20)
        {
          int64_t v21 = v19 + 3;
          if (v21 >= v47) {
            break;
          }
          unint64_t v20 = *(void *)(v46 + 8 * v21);
          if (!v20)
          {
            while (1)
            {
              int64_t v16 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                goto LABEL_48;
              }
              if (v16 >= v47) {
                goto LABEL_38;
              }
              unint64_t v20 = *(void *)(v46 + 8 * v16);
              ++v21;
              if (v20) {
                goto LABEL_21;
              }
            }
          }
          int64_t v16 = v21;
        }
      }
    }
LABEL_21:
    unint64_t v15 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v16 << 6);
LABEL_22:
    uint64_t v22 = 8 * v18;
    uint64_t v23 = *(void *)(*(void *)(v12 + 48) + v22);
    double v24 = *(double *)(*(void *)(v12 + 56) + v22);
    uint64_t v25 = *(void *)(a1 + 32);
    double v26 = 0.0;
    if (*(void *)(v25 + 16))
    {
      uint64_t v27 = sub_21F78C550(v23);
      if (v28) {
        double v26 = *(double *)(*(void *)(v25 + 56) + 8 * v27);
      }
    }
    if (v26 > v24) {
      double v24 = v26;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v31 = sub_21F78C550(v23);
    uint64_t v32 = v5[2];
    BOOL v33 = (v30 & 1) == 0;
    uint64_t v34 = v32 + v33;
    if (__OFADD__(v32, v33))
    {
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      uint64_t result = sub_21FA26990();
      __break(1u);
      return result;
    }
    char v35 = v30;
    if (v5[3] >= v34)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v30) {
          goto LABEL_4;
        }
      }
      else
      {
        sub_21F87B15C();
        if (v35) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      sub_21F872134(v34, isUniquelyReferenced_nonNull_native);
      uint64_t v36 = sub_21F78C550(v23);
      if ((v35 & 1) != (v37 & 1)) {
        goto LABEL_49;
      }
      unint64_t v31 = v36;
      if (v35)
      {
LABEL_4:
        *(double *)(v5[7] + 8 * v31) = v24;
        goto LABEL_5;
      }
    }
    v5[(v31 >> 6) + 8] |= 1 << v31;
    uint64_t v38 = 8 * v31;
    *(void *)(v5[6] + v38) = v23;
    *(double *)(v5[7] + v38) = v24;
    uint64_t v39 = v5[2];
    BOOL v40 = __OFADD__(v39, 1);
    uint64_t v41 = v39 + 1;
    if (v40) {
      goto LABEL_46;
    }
    void v5[2] = v41;
LABEL_5:
    swift_bridgeObjectRelease();
  }
LABEL_38:
  swift_release();
  sub_21F99458C(a1);
  if (v10 <= v11) {
    double v10 = v11;
  }
  if (v7 <= v9) {
    double v7 = v9;
  }
  if (v6 <= v8) {
    double v6 = v8;
  }
  uint64_t result = sub_21F99458C(v44);
  *(unsigned char *)a3 = v43;
  *(double *)(a3 + 8) = v6;
  *(double *)(a3 + 16) = v7;
  *(double *)(a3 + 24) = v10;
  *(void *)(a3 + 32) = v5;
  *(int8x16_t *)(a3 + 40) = vbslq_s8((int8x16_t)vcgeq_f64(*(float64x2_t *)(v44 + 40), *(float64x2_t *)(a1 + 40)), *(int8x16_t *)(v44 + 40), *(int8x16_t *)(a1 + 40));
  return result;
}

uint64_t sub_21FA239D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21F76CA40(&qword_26AD48EB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

_UNKNOWN **sub_21FA23A3C()
{
  return &off_26D13EFC8;
}

uint64_t getEnumTagSinglePayload for _Chart3DContentInputs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21FA23A5C);
}

uint64_t sub_21FA23A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_21FA24B80();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    double v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_21FA24540();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    double v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  uint64_t v14 = sub_21FA24EF0();
  unint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);

  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for _Chart3DContentInputs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21FA23BBC);
}

uint64_t sub_21FA23BBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_21FA24B80();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = sub_21FA24540();
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  uint64_t v16 = sub_21FA24EF0();
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);

  return v17(v19, a2, a2, v18);
}

uint64_t type metadata accessor for _Chart3DContentInputs()
{
  uint64_t result = qword_267EEAF38;
  if (!qword_267EEAF38) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_21FA23D60()
{
  qword_26AD52218 = 0x3D83880000000000;
}

double sub_21FA23D74()
{
  if (qword_26AD46270 != -1) {
    swift_once();
  }
  double result = *(double *)&qword_26AD52218 * 4.0;
  *(double *)&qword_26AD52130 = *(double *)&qword_26AD52218 * 4.0;
  return result;
}

void sub_21FA23DD0()
{
  qword_26AD52210 = 0x3CE0000000000000;
}

double sub_21FA23DE0()
{
  if (qword_26AD46268 != -1) {
    swift_once();
  }
  double result = *(double *)&qword_26AD52210 * 6.28318531;
  *(double *)&qword_26AD52138 = *(double *)&qword_26AD52210 * 6.28318531;
  return result;
}

ValueMetadata *type metadata accessor for Geometry()
{
  return &type metadata for Geometry;
}

uint64_t sub_21FA23E50()
{
  return MEMORY[0x270EEDCC0]();
}

uint64_t sub_21FA23E60()
{
  return MEMORY[0x270EEDD10]();
}

uint64_t sub_21FA23E70()
{
  return MEMORY[0x270EEDD40]();
}

uint64_t sub_21FA23E80()
{
  return MEMORY[0x270EEE2F0]();
}

uint64_t sub_21FA23E90()
{
  return MEMORY[0x270EEE308]();
}

uint64_t sub_21FA23EA0()
{
  return MEMORY[0x270EEE338]();
}

uint64_t sub_21FA23EB0()
{
  return MEMORY[0x270EEE768]();
}

uint64_t sub_21FA23EC0()
{
  return MEMORY[0x270EEE7B8]();
}

uint64_t sub_21FA23ED0()
{
  return MEMORY[0x270EEE7D8]();
}

uint64_t sub_21FA23EE0()
{
  return MEMORY[0x270EEE800]();
}

uint64_t sub_21FA23EF0()
{
  return MEMORY[0x270EEE818]();
}

uint64_t sub_21FA23F00()
{
  return MEMORY[0x270EEE828]();
}

uint64_t sub_21FA23F10()
{
  return MEMORY[0x270EEE848]();
}

uint64_t sub_21FA23F20()
{
  return MEMORY[0x270EEE8E8]();
}

uint64_t sub_21FA23F30()
{
  return MEMORY[0x270EEF950]();
}

uint64_t sub_21FA23F40()
{
  return MEMORY[0x270EEF9B0]();
}

uint64_t sub_21FA23F50()
{
  return MEMORY[0x270EEF9B8]();
}

uint64_t sub_21FA23F60()
{
  return MEMORY[0x270EEFAF8]();
}

uint64_t sub_21FA23F70()
{
  return MEMORY[0x270EEFB00]();
}

uint64_t sub_21FA23F80()
{
  return MEMORY[0x270EEFB10]();
}

uint64_t sub_21FA23F90()
{
  return MEMORY[0x270EEFB20]();
}

uint64_t sub_21FA23FA0()
{
  return MEMORY[0x270EEFB28]();
}

uint64_t sub_21FA23FB0()
{
  return MEMORY[0x270EEFB78]();
}

uint64_t sub_21FA23FC0()
{
  return MEMORY[0x270EEFB88]();
}

uint64_t sub_21FA23FD0()
{
  return MEMORY[0x270EF02B0]();
}

uint64_t sub_21FA23FE0()
{
  return MEMORY[0x270EF02C8]();
}

uint64_t sub_21FA23FF0()
{
  return MEMORY[0x270EF0320]();
}

uint64_t sub_21FA24000()
{
  return MEMORY[0x270EF0360]();
}

uint64_t sub_21FA24010()
{
  return MEMORY[0x270EF0408]();
}

uint64_t sub_21FA24020()
{
  return MEMORY[0x270EF0420]();
}

uint64_t sub_21FA24030()
{
  return MEMORY[0x270EF0428]();
}

uint64_t sub_21FA24040()
{
  return MEMORY[0x270EF0430]();
}

uint64_t sub_21FA24050()
{
  return MEMORY[0x270EF0440]();
}

uint64_t sub_21FA24060()
{
  return MEMORY[0x270EF0448]();
}

uint64_t sub_21FA24070()
{
  return MEMORY[0x270EF0480]();
}

uint64_t sub_21FA24080()
{
  return MEMORY[0x270EF0490]();
}

uint64_t sub_21FA24090()
{
  return MEMORY[0x270EF0498]();
}

uint64_t sub_21FA240A0()
{
  return MEMORY[0x270EF04B0]();
}

uint64_t sub_21FA240B0()
{
  return MEMORY[0x270EF04D0]();
}

uint64_t sub_21FA240C0()
{
  return MEMORY[0x270EF04E8]();
}

uint64_t sub_21FA240D0()
{
  return MEMORY[0x270EF0508]();
}

uint64_t sub_21FA240E0()
{
  return MEMORY[0x270EF0518]();
}

uint64_t sub_21FA240F0()
{
  return MEMORY[0x270EF0548]();
}

uint64_t sub_21FA24100()
{
  return MEMORY[0x270EF0568]();
}

uint64_t sub_21FA24110()
{
  return MEMORY[0x270EF0570]();
}

uint64_t sub_21FA24120()
{
  return MEMORY[0x270EF0598]();
}

uint64_t sub_21FA24130()
{
  return MEMORY[0x270EF05A0]();
}

uint64_t sub_21FA24140()
{
  return MEMORY[0x270EF05B8]();
}

uint64_t sub_21FA24150()
{
  return MEMORY[0x270EF05C0]();
}

uint64_t sub_21FA24160()
{
  return MEMORY[0x270EF05D8]();
}

uint64_t sub_21FA24170()
{
  return MEMORY[0x270EF0690]();
}

uint64_t sub_21FA24180()
{
  return MEMORY[0x270EF0698]();
}

uint64_t sub_21FA24190()
{
  return MEMORY[0x270EF06E0]();
}

uint64_t sub_21FA241A0()
{
  return MEMORY[0x270EF0B88]();
}

uint64_t sub_21FA241B0()
{
  return MEMORY[0x270EF0BD8]();
}

uint64_t sub_21FA241C0()
{
  return MEMORY[0x270EF0BE8]();
}

uint64_t sub_21FA241D0()
{
  return MEMORY[0x270EF0C20]();
}

uint64_t sub_21FA241E0()
{
  return MEMORY[0x270EF0C30]();
}

uint64_t sub_21FA241F0()
{
  return MEMORY[0x270EF0C40]();
}

uint64_t sub_21FA24200()
{
  return MEMORY[0x270EF0EF8]();
}

uint64_t sub_21FA24210()
{
  return MEMORY[0x270EF0F30]();
}

uint64_t sub_21FA24220()
{
  return MEMORY[0x270EF10A8]();
}

uint64_t sub_21FA24230()
{
  return MEMORY[0x270EF10C8]();
}

uint64_t sub_21FA24240()
{
  return MEMORY[0x270EF10E0]();
}

uint64_t sub_21FA24250()
{
  return MEMORY[0x270EF1110]();
}

uint64_t sub_21FA24260()
{
  return MEMORY[0x270EF1160]();
}

uint64_t sub_21FA24270()
{
  return MEMORY[0x270EF1248]();
}

uint64_t sub_21FA24280()
{
  return MEMORY[0x270EF1258]();
}

uint64_t sub_21FA24290()
{
  return MEMORY[0x270EF1280]();
}

uint64_t sub_21FA242A0()
{
  return MEMORY[0x270EF12C0]();
}

uint64_t sub_21FA242B0()
{
  return MEMORY[0x270EF12E0]();
}

uint64_t sub_21FA242C0()
{
  return MEMORY[0x270EF1330]();
}

uint64_t sub_21FA242D0()
{
  return MEMORY[0x270EF1388]();
}

uint64_t sub_21FA242E0()
{
  return MEMORY[0x270EF13D8]();
}

uint64_t sub_21FA242F0()
{
  return MEMORY[0x270EF13F0]();
}

uint64_t sub_21FA24300()
{
  return MEMORY[0x270EF1418]();
}

uint64_t sub_21FA24310()
{
  return MEMORY[0x270EF1428]();
}

uint64_t sub_21FA24320()
{
  return MEMORY[0x270EF1440]();
}

uint64_t sub_21FA24330()
{
  return MEMORY[0x270EF15D0]();
}

uint64_t sub_21FA24340()
{
  return MEMORY[0x270EF1608]();
}

uint64_t sub_21FA24350()
{
  return MEMORY[0x270F28690]();
}

uint64_t sub_21FA24360()
{
  return MEMORY[0x270F0F0A8]();
}

uint64_t sub_21FA24370()
{
  return MEMORY[0x270F0F0B0]();
}

uint64_t sub_21FA24380()
{
  return MEMORY[0x270F0F0B8]();
}

uint64_t sub_21FA24390()
{
  return MEMORY[0x270F0F0C0]();
}

uint64_t sub_21FA243A0()
{
  return MEMORY[0x270F0F0C8]();
}

uint64_t sub_21FA243B0()
{
  return MEMORY[0x270F0F0D0]();
}

uint64_t sub_21FA243D0()
{
  return MEMORY[0x270F0F0F0]();
}

uint64_t sub_21FA243E0()
{
  return MEMORY[0x270FA2C78]();
}

uint64_t sub_21FA243F0()
{
  return MEMORY[0x270FA2C98]();
}

uint64_t sub_21FA24400()
{
  return MEMORY[0x270FA2CF8]();
}

uint64_t sub_21FA24410()
{
  return MEMORY[0x270FA2D00]();
}

uint64_t sub_21FA24430()
{
  return MEMORY[0x270EFEBA0]();
}

uint64_t sub_21FA24440()
{
  return MEMORY[0x270EFEBB8]();
}

uint64_t sub_21FA24450()
{
  return MEMORY[0x270EFEBD0]();
}

uint64_t sub_21FA24460()
{
  return MEMORY[0x270EFEDF0]();
}

uint64_t sub_21FA24470()
{
  return MEMORY[0x270EFEDF8]();
}

uint64_t sub_21FA24480()
{
  return MEMORY[0x270EFEE20]();
}

uint64_t sub_21FA24490()
{
  return MEMORY[0x270EFEEB0]();
}

uint64_t sub_21FA244A0()
{
  return MEMORY[0x270EFEED8]();
}

uint64_t sub_21FA244B0()
{
  return MEMORY[0x270EFEEE0]();
}

uint64_t sub_21FA244C0()
{
  return MEMORY[0x270EFEEE8]();
}

uint64_t sub_21FA244D0()
{
  return MEMORY[0x270EFEFD0]();
}

uint64_t sub_21FA244E0()
{
  return MEMORY[0x270EFF008]();
}

uint64_t sub_21FA244F0()
{
  return MEMORY[0x270EFF120]();
}

uint64_t sub_21FA24500()
{
  return MEMORY[0x270EFF128]();
}

uint64_t sub_21FA24510()
{
  return MEMORY[0x270EFF208]();
}

uint64_t sub_21FA24520()
{
  return MEMORY[0x270EFF220]();
}

uint64_t sub_21FA24530()
{
  return MEMORY[0x270EFF238]();
}

uint64_t sub_21FA24540()
{
  return MEMORY[0x270EFF270]();
}

uint64_t sub_21FA24550()
{
  return MEMORY[0x270EFF448]();
}

uint64_t sub_21FA24560()
{
  return MEMORY[0x270EFF450]();
}

uint64_t sub_21FA24570()
{
  return MEMORY[0x270EFF458]();
}

uint64_t sub_21FA24580()
{
  return MEMORY[0x270EFF510]();
}

uint64_t sub_21FA24590()
{
  return MEMORY[0x270EFF520]();
}

uint64_t sub_21FA245A0()
{
  return MEMORY[0x270EFF538]();
}

uint64_t sub_21FA245B0()
{
  return MEMORY[0x270EFF598]();
}

uint64_t sub_21FA245C0()
{
  return MEMORY[0x270EFF5E0]();
}

uint64_t sub_21FA245D0()
{
  return MEMORY[0x270EFF6D0]();
}

uint64_t sub_21FA245E0()
{
  return MEMORY[0x270EFF700]();
}

uint64_t sub_21FA245F0()
{
  return MEMORY[0x270EFF718]();
}

uint64_t sub_21FA24600()
{
  return MEMORY[0x270EFF730]();
}

uint64_t sub_21FA24610()
{
  return MEMORY[0x270EFF748]();
}

uint64_t sub_21FA24620()
{
  return MEMORY[0x270EFF750]();
}

uint64_t sub_21FA24630()
{
  return MEMORY[0x270EFF7D0]();
}

uint64_t sub_21FA24640()
{
  return MEMORY[0x270EFF7D8]();
}

uint64_t sub_21FA24650()
{
  return MEMORY[0x270EFF7E0]();
}

uint64_t sub_21FA24660()
{
  return MEMORY[0x270EFF7F0]();
}

uint64_t sub_21FA24670()
{
  return MEMORY[0x270EFF870]();
}

uint64_t sub_21FA24680()
{
  return MEMORY[0x270EFF878]();
}

uint64_t sub_21FA24690()
{
  return MEMORY[0x270EFF888]();
}

uint64_t sub_21FA246A0()
{
  return MEMORY[0x270EFF898]();
}

uint64_t sub_21FA246B0()
{
  return MEMORY[0x270EFF8F0]();
}

uint64_t sub_21FA246C0()
{
  return MEMORY[0x270EFF900]();
}

uint64_t sub_21FA246D0()
{
  return MEMORY[0x270EFF9A0]();
}

uint64_t sub_21FA246F0()
{
  return MEMORY[0x270EFFA58]();
}

uint64_t sub_21FA24700()
{
  return MEMORY[0x270EFFA60]();
}

uint64_t sub_21FA24710()
{
  return MEMORY[0x270EFFA68]();
}

uint64_t sub_21FA24720()
{
  return MEMORY[0x270EFFED0]();
}

uint64_t sub_21FA24730()
{
  return MEMORY[0x270EFFEE0]();
}

uint64_t sub_21FA24740()
{
  return MEMORY[0x270EFFEE8]();
}

uint64_t sub_21FA24750()
{
  return MEMORY[0x270EFFEF0]();
}

uint64_t sub_21FA24760()
{
  return MEMORY[0x270EFFEF8]();
}

uint64_t sub_21FA24770()
{
  return MEMORY[0x270EFFF08]();
}

uint64_t sub_21FA24780()
{
  return MEMORY[0x270EFFF10]();
}

uint64_t sub_21FA24790()
{
  return MEMORY[0x270EFFF18]();
}

uint64_t sub_21FA247A0()
{
  return MEMORY[0x270EFFF30]();
}

uint64_t sub_21FA247B0()
{
  return MEMORY[0x270EFFF38]();
}

uint64_t sub_21FA247C0()
{
  return MEMORY[0x270EFFF40]();
}

uint64_t sub_21FA247D0()
{
  return MEMORY[0x270EFFF50]();
}

uint64_t sub_21FA247E0()
{
  return MEMORY[0x270EFFF58]();
}

uint64_t sub_21FA247F0()
{
  return MEMORY[0x270EFFF60]();
}

uint64_t sub_21FA24800()
{
  return MEMORY[0x270EFFF78]();
}

uint64_t sub_21FA24810()
{
  return MEMORY[0x270EFFF90]();
}

uint64_t sub_21FA24820()
{
  return MEMORY[0x270EFFF98]();
}

uint64_t sub_21FA24830()
{
  return MEMORY[0x270EFFFA0]();
}

uint64_t sub_21FA24840()
{
  return MEMORY[0x270EFFFA8]();
}

uint64_t sub_21FA24850()
{
  return MEMORY[0x270EFFFB0]();
}

uint64_t sub_21FA24860()
{
  return MEMORY[0x270EFFFB8]();
}

uint64_t sub_21FA24870()
{
  return MEMORY[0x270EFFFD8]();
}

uint64_t sub_21FA24880()
{
  return MEMORY[0x270EFFFE0]();
}

uint64_t sub_21FA24890()
{
  return MEMORY[0x270EFFFE8]();
}

uint64_t sub_21FA248A0()
{
  return MEMORY[0x270EFFFF0]();
}

uint64_t sub_21FA248B0()
{
  return MEMORY[0x270EFFFF8]();
}

uint64_t sub_21FA248C0()
{
  return MEMORY[0x270F00000]();
}

uint64_t sub_21FA248D0()
{
  return MEMORY[0x270F00008]();
}

uint64_t sub_21FA248E0()
{
  return MEMORY[0x270F00010]();
}

uint64_t sub_21FA248F0()
{
  return MEMORY[0x270F00018]();
}

uint64_t sub_21FA24900()
{
  return MEMORY[0x270F00020]();
}

uint64_t sub_21FA24910()
{
  return MEMORY[0x270F00028]();
}

uint64_t sub_21FA24920()
{
  return MEMORY[0x270F00030]();
}

uint64_t sub_21FA24930()
{
  return MEMORY[0x270F00038]();
}

uint64_t sub_21FA24940()
{
  return MEMORY[0x270F00040]();
}

uint64_t sub_21FA24950()
{
  return MEMORY[0x270F00048]();
}

uint64_t sub_21FA24960()
{
  return MEMORY[0x270F00050]();
}

uint64_t sub_21FA24970()
{
  return MEMORY[0x270F00058]();
}

uint64_t sub_21FA24980()
{
  return MEMORY[0x270F00078]();
}

uint64_t sub_21FA24990()
{
  return MEMORY[0x270F00080]();
}

uint64_t sub_21FA249A0()
{
  return MEMORY[0x270F000F0]();
}

uint64_t sub_21FA249B0()
{
  return MEMORY[0x270F00148]();
}

uint64_t sub_21FA249C0()
{
  return MEMORY[0x270F00180]();
}

uint64_t sub_21FA249D0()
{
  return MEMORY[0x270F001A8]();
}

uint64_t sub_21FA249E0()
{
  return MEMORY[0x270F00250]();
}

uint64_t sub_21FA249F0()
{
  return MEMORY[0x270F00270]();
}

uint64_t sub_21FA24A00()
{
  return MEMORY[0x270F00538]();
}

uint64_t sub_21FA24A10()
{
  return MEMORY[0x270F005A8]();
}

uint64_t sub_21FA24A20()
{
  return MEMORY[0x270F005B0]();
}

uint64_t sub_21FA24A30()
{
  return MEMORY[0x270F005B8]();
}

uint64_t sub_21FA24A40()
{
  return MEMORY[0x270F005C0]();
}

uint64_t sub_21FA24A50()
{
  return MEMORY[0x270F005C8]();
}

uint64_t sub_21FA24A60()
{
  return MEMORY[0x270F005D0]();
}

uint64_t sub_21FA24A70()
{
  return MEMORY[0x270F005D8]();
}

uint64_t sub_21FA24A80()
{
  return MEMORY[0x270F00688]();
}

uint64_t sub_21FA24AA0()
{
  return MEMORY[0x270F00940]();
}

uint64_t sub_21FA24AB0()
{
  return MEMORY[0x270F00A00]();
}

uint64_t sub_21FA24AC0()
{
  return MEMORY[0x270F00A18]();
}

uint64_t sub_21FA24AD0()
{
  return MEMORY[0x270F00A50]();
}

uint64_t sub_21FA24AE0()
{
  return MEMORY[0x270F00B18]();
}

uint64_t sub_21FA24AF0()
{
  return MEMORY[0x270F00BC8]();
}

uint64_t sub_21FA24B00()
{
  return MEMORY[0x270F00DC0]();
}

uint64_t sub_21FA24B10()
{
  return MEMORY[0x270F00E18]();
}

uint64_t sub_21FA24B20()
{
  return MEMORY[0x270F00ED8]();
}

uint64_t sub_21FA24B30()
{
  return MEMORY[0x270F00EE0]();
}

uint64_t sub_21FA24B40()
{
  return MEMORY[0x270F00F10]();
}

uint64_t sub_21FA24B50()
{
  return MEMORY[0x270F00F20]();
}

uint64_t sub_21FA24B60()
{
  return MEMORY[0x270F00F70]();
}

uint64_t sub_21FA24B70()
{
  return MEMORY[0x270F00F78]();
}

uint64_t sub_21FA24B80()
{
  return MEMORY[0x270F00F80]();
}

uint64_t sub_21FA24B90()
{
  return MEMORY[0x270F01048]();
}

uint64_t sub_21FA24BA0()
{
  return MEMORY[0x270F01050]();
}

uint64_t sub_21FA24BB0()
{
  return MEMORY[0x270F01060]();
}

uint64_t sub_21FA24BC0()
{
  return MEMORY[0x270F01070]();
}

uint64_t sub_21FA24BD0()
{
  return MEMORY[0x270F01130]();
}

uint64_t sub_21FA24BE0()
{
  return MEMORY[0x270F011F0]();
}

uint64_t sub_21FA24BF0()
{
  return MEMORY[0x270F01210]();
}

uint64_t sub_21FA24C00()
{
  return MEMORY[0x270F01228]();
}

uint64_t sub_21FA24C10()
{
  return MEMORY[0x270F01238]();
}

uint64_t sub_21FA24C20()
{
  return MEMORY[0x270F01248]();
}

uint64_t sub_21FA24C30()
{
  return MEMORY[0x270F01258]();
}

uint64_t sub_21FA24C40()
{
  return MEMORY[0x270F01270]();
}

uint64_t sub_21FA24C50()
{
  return MEMORY[0x270F01280]();
}

uint64_t sub_21FA24C60()
{
  return MEMORY[0x270F012A0]();
}

uint64_t sub_21FA24C70()
{
  return MEMORY[0x270F012A8]();
}

uint64_t sub_21FA24C80()
{
  return MEMORY[0x270F01348]();
}

uint64_t sub_21FA24C90()
{
  return MEMORY[0x270F01358]();
}

uint64_t sub_21FA24CA0()
{
  return MEMORY[0x270F014F8]();
}

uint64_t sub_21FA24CB0()
{
  return MEMORY[0x270F01510]();
}

uint64_t sub_21FA24CC0()
{
  return MEMORY[0x270F01520]();
}

uint64_t sub_21FA24CD0()
{
  return MEMORY[0x270F01528]();
}

uint64_t sub_21FA24CE0()
{
  return MEMORY[0x270F016E0]();
}

uint64_t sub_21FA24CF0()
{
  return MEMORY[0x270F016F8]();
}

uint64_t sub_21FA24D00()
{
  return MEMORY[0x270F01708]();
}

uint64_t sub_21FA24D20()
{
  return MEMORY[0x270F01728]();
}

uint64_t sub_21FA24D30()
{
  return MEMORY[0x270F01738]();
}

uint64_t sub_21FA24D40()
{
  return MEMORY[0x270F01748]();
}

uint64_t sub_21FA24D50()
{
  return MEMORY[0x270F01758]();
}

uint64_t sub_21FA24D60()
{
  return MEMORY[0x270F01768]();
}

uint64_t sub_21FA24D70()
{
  return MEMORY[0x270F01778]();
}

uint64_t sub_21FA24D90()
{
  return MEMORY[0x270F01790]();
}

uint64_t sub_21FA24DA0()
{
  return MEMORY[0x270F017C0]();
}

uint64_t sub_21FA24DB0()
{
  return MEMORY[0x270F017F8]();
}

uint64_t sub_21FA24DC0()
{
  return MEMORY[0x270F01800]();
}

uint64_t sub_21FA24DD0()
{
  return MEMORY[0x270F01818]();
}

uint64_t sub_21FA24DE0()
{
  return MEMORY[0x270F01938]();
}

uint64_t sub_21FA24DF0()
{
  return MEMORY[0x270F01970]();
}

uint64_t sub_21FA24E00()
{
  return MEMORY[0x270F01978]();
}

uint64_t sub_21FA24E10()
{
  return MEMORY[0x270F01C68]();
}

uint64_t sub_21FA24E20()
{
  return MEMORY[0x270F01D98]();
}

uint64_t sub_21FA24E30()
{
  return MEMORY[0x270F01DA0]();
}

uint64_t sub_21FA24E40()
{
  return MEMORY[0x270F01DC8]();
}

uint64_t sub_21FA24E50()
{
  return MEMORY[0x270F01DD0]();
}

uint64_t sub_21FA24E60()
{
  return MEMORY[0x270F01DD8]();
}

uint64_t sub_21FA24E70()
{
  return MEMORY[0x270F01DE0]();
}

uint64_t sub_21FA24E80()
{
  return MEMORY[0x270F01DE8]();
}

uint64_t sub_21FA24E90()
{
  return MEMORY[0x270F01E68]();
}

uint64_t sub_21FA24EC0()
{
  return MEMORY[0x270F02040]();
}

uint64_t sub_21FA24ED0()
{
  return MEMORY[0x270F02048]();
}

uint64_t sub_21FA24EE0()
{
  return MEMORY[0x270F02050]();
}

uint64_t sub_21FA24EF0()
{
  return MEMORY[0x270F02058]();
}

uint64_t sub_21FA24F00()
{
  return MEMORY[0x270F02148]();
}

uint64_t sub_21FA24F10()
{
  return MEMORY[0x270F02150]();
}

uint64_t _s6Charts11BuilderPairVA2A12ChartContentRzAaDR_rlE05_makedE07content6inputsAA01_dE7OutputsV7SwiftUI11_GraphValueVyACyxq_GG_AA01_dE6InputsVtFZ_0()
{
  return MEMORY[0x270F02158]();
}

uint64_t sub_21FA24F30()
{
  return MEMORY[0x270F02160]();
}

uint64_t sub_21FA24F40()
{
  return MEMORY[0x270F02168]();
}

uint64_t sub_21FA24F50()
{
  return MEMORY[0x270F02170]();
}

uint64_t sub_21FA24F60()
{
  return MEMORY[0x270F022C0]();
}

uint64_t sub_21FA24F70()
{
  return MEMORY[0x270F022C8]();
}

uint64_t sub_21FA24F80()
{
  return MEMORY[0x270F022D0]();
}

uint64_t sub_21FA24F90()
{
  return MEMORY[0x270F022D8]();
}

uint64_t sub_21FA24FA0()
{
  return MEMORY[0x270F02318]();
}

uint64_t sub_21FA24FB0()
{
  return MEMORY[0x270F02330]();
}

uint64_t sub_21FA24FC0()
{
  return MEMORY[0x270F02390]();
}

uint64_t sub_21FA24FD0()
{
  return MEMORY[0x270F023A0]();
}

uint64_t sub_21FA24FE0()
{
  return MEMORY[0x270F023D8]();
}

uint64_t sub_21FA24FF0()
{
  return MEMORY[0x270F023E0]();
}

uint64_t _s7SwiftUI26PagingScrollTargetBehaviorV6ChartsE06updateE0_7contextyAA0dE0Vz_AD05ChartdeF7ContextVtF_0()
{
  return MEMORY[0x270F023E8]();
}

uint64_t sub_21FA25010()
{
  return MEMORY[0x270F02458]();
}

uint64_t sub_21FA25040()
{
  return MEMORY[0x270F024F0]();
}

uint64_t sub_21FA25050()
{
  return MEMORY[0x270F024F8]();
}

uint64_t sub_21FA25060()
{
  return MEMORY[0x270F02530]();
}

uint64_t sub_21FA25070()
{
  return MEMORY[0x270F02538]();
}

uint64_t sub_21FA25080()
{
  return MEMORY[0x270F02540]();
}

uint64_t sub_21FA25090()
{
  return MEMORY[0x270F02548]();
}

uint64_t sub_21FA250A0()
{
  return MEMORY[0x270F02550]();
}

uint64_t sub_21FA250B0()
{
  return MEMORY[0x270F02558]();
}

uint64_t sub_21FA250C0()
{
  return MEMORY[0x270F02560]();
}

uint64_t sub_21FA250D0()
{
  return MEMORY[0x270F027A8]();
}

uint64_t sub_21FA250E0()
{
  return MEMORY[0x270F029E0]();
}

uint64_t sub_21FA250F0()
{
  return MEMORY[0x270F029F0]();
}

uint64_t sub_21FA25100()
{
  return MEMORY[0x270F029F8]();
}

uint64_t sub_21FA25110()
{
  return MEMORY[0x270F02A00]();
}

uint64_t sub_21FA25120()
{
  return MEMORY[0x270F02A10]();
}

uint64_t sub_21FA25130()
{
  return MEMORY[0x270F02A30]();
}

uint64_t sub_21FA25140()
{
  return MEMORY[0x270F02CF8]();
}

uint64_t sub_21FA25150()
{
  return MEMORY[0x270F02E18]();
}

uint64_t sub_21FA25160()
{
  return MEMORY[0x270F02E20]();
}

uint64_t sub_21FA25170()
{
  return MEMORY[0x270F02E28]();
}

uint64_t sub_21FA25180()
{
  return MEMORY[0x270F02E30]();
}

uint64_t sub_21FA25190()
{
  return MEMORY[0x270F02E38]();
}

uint64_t sub_21FA251A0()
{
  return MEMORY[0x270F02E60]();
}

uint64_t sub_21FA251B0()
{
  return MEMORY[0x270F02E68]();
}

uint64_t sub_21FA251C0()
{
  return MEMORY[0x270F02E80]();
}

uint64_t sub_21FA251D0()
{
  return MEMORY[0x270F02E88]();
}

uint64_t sub_21FA251E0()
{
  return MEMORY[0x270F02E98]();
}

uint64_t sub_21FA251F0()
{
  return MEMORY[0x270F02EA0]();
}

uint64_t sub_21FA25200()
{
  return MEMORY[0x270F02EA8]();
}

uint64_t sub_21FA25210()
{
  return MEMORY[0x270F02EB8]();
}

uint64_t sub_21FA25220()
{
  return MEMORY[0x270F02EC0]();
}

uint64_t sub_21FA25230()
{
  return MEMORY[0x270F02EC8]();
}

uint64_t sub_21FA25240()
{
  return MEMORY[0x270F02ED0]();
}

uint64_t sub_21FA25250()
{
  return MEMORY[0x270F02ED8]();
}

uint64_t sub_21FA25260()
{
  return MEMORY[0x270F02EE0]();
}

uint64_t sub_21FA25270()
{
  return MEMORY[0x270F02EE8]();
}

uint64_t sub_21FA25280()
{
  return MEMORY[0x270F02EF8]();
}

uint64_t sub_21FA25290()
{
  return MEMORY[0x270F02F00]();
}

uint64_t sub_21FA252A0()
{
  return MEMORY[0x270F02F08]();
}

uint64_t sub_21FA252B0()
{
  return MEMORY[0x270F02F10]();
}

uint64_t sub_21FA252C0()
{
  return MEMORY[0x270F02F50]();
}

uint64_t sub_21FA252D0()
{
  return MEMORY[0x270F02F60]();
}

uint64_t sub_21FA252E0()
{
  return MEMORY[0x270F02F68]();
}

uint64_t sub_21FA252F0()
{
  return MEMORY[0x270F02F70]();
}

uint64_t sub_21FA25300()
{
  return MEMORY[0x270F03008]();
}

uint64_t sub_21FA25310()
{
  return MEMORY[0x270F03060]();
}

uint64_t sub_21FA25320()
{
  return MEMORY[0x270F03078]();
}

uint64_t sub_21FA25330()
{
  return MEMORY[0x270F030A8]();
}

uint64_t sub_21FA25340()
{
  return MEMORY[0x270F03228]();
}

uint64_t sub_21FA25350()
{
  return MEMORY[0x270F03250]();
}

uint64_t sub_21FA25380()
{
  return MEMORY[0x270F03288]();
}

uint64_t sub_21FA25390()
{
  return MEMORY[0x270F032A0]();
}

uint64_t sub_21FA253A0()
{
  return MEMORY[0x270F032C0]();
}

uint64_t sub_21FA253B0()
{
  return MEMORY[0x270F032D0]();
}

uint64_t sub_21FA253C0()
{
  return MEMORY[0x270F032E8]();
}

uint64_t sub_21FA253D0()
{
  return MEMORY[0x270F034A0]();
}

uint64_t sub_21FA253E0()
{
  return MEMORY[0x270F036C0]();
}

uint64_t sub_21FA253F0()
{
  return MEMORY[0x270F037A0]();
}

uint64_t sub_21FA25400()
{
  return MEMORY[0x270F037B0]();
}

uint64_t sub_21FA25410()
{
  return MEMORY[0x270F038D0]();
}

uint64_t sub_21FA25420()
{
  return MEMORY[0x270F039A0]();
}

uint64_t sub_21FA25430()
{
  return MEMORY[0x270F03AB8]();
}

uint64_t sub_21FA25440()
{
  return MEMORY[0x270F03B00]();
}

uint64_t sub_21FA25450()
{
  return MEMORY[0x270F03B28]();
}

uint64_t sub_21FA25460()
{
  return MEMORY[0x270F03BC0]();
}

uint64_t sub_21FA25470()
{
  return MEMORY[0x270F03C40]();
}

uint64_t sub_21FA25480()
{
  return MEMORY[0x270F03C48]();
}

uint64_t sub_21FA25490()
{
  return MEMORY[0x270F03C50]();
}

uint64_t sub_21FA254A0()
{
  return MEMORY[0x270F03E30]();
}

uint64_t sub_21FA254B0()
{
  return MEMORY[0x270F03F00]();
}

uint64_t sub_21FA254C0()
{
  return MEMORY[0x270F040B0]();
}

uint64_t sub_21FA254D0()
{
  return MEMORY[0x270F04170]();
}

uint64_t sub_21FA254E0()
{
  return MEMORY[0x270F04188]();
}

uint64_t sub_21FA254F0()
{
  return MEMORY[0x270F041A0]();
}

uint64_t sub_21FA25500()
{
  return MEMORY[0x270F04378]();
}

uint64_t sub_21FA25510()
{
  return MEMORY[0x270F04388]();
}

uint64_t sub_21FA25520()
{
  return MEMORY[0x270F043C0]();
}

uint64_t sub_21FA25530()
{
  return MEMORY[0x270F043D8]();
}

uint64_t sub_21FA25540()
{
  return MEMORY[0x270F043E8]();
}

uint64_t sub_21FA25550()
{
  return MEMORY[0x270F043F8]();
}

uint64_t sub_21FA25560()
{
  return MEMORY[0x270F04410]();
}

uint64_t sub_21FA25570()
{
  return MEMORY[0x270F04450]();
}

uint64_t sub_21FA25580()
{
  return MEMORY[0x270F04460]();
}

uint64_t sub_21FA25590()
{
  return MEMORY[0x270F04478]();
}

uint64_t sub_21FA255A0()
{
  return MEMORY[0x270F04488]();
}

uint64_t sub_21FA255B0()
{
  return MEMORY[0x270F044C0]();
}

uint64_t sub_21FA255C0()
{
  return MEMORY[0x270F044C8]();
}

uint64_t sub_21FA255D0()
{
  return MEMORY[0x270F044D8]();
}

uint64_t sub_21FA255E0()
{
  return MEMORY[0x270F044F0]();
}

uint64_t sub_21FA255F0()
{
  return MEMORY[0x270F047B0]();
}

uint64_t sub_21FA25620()
{
  return MEMORY[0x270F047D8]();
}

uint64_t sub_21FA25640()
{
  return MEMORY[0x270F047E8]();
}

uint64_t sub_21FA25650()
{
  return MEMORY[0x270F047F8]();
}

uint64_t sub_21FA25670()
{
  return MEMORY[0x270F04818]();
}

uint64_t sub_21FA25680()
{
  return MEMORY[0x270F04820]();
}

uint64_t sub_21FA25690()
{
  return MEMORY[0x270F04830]();
}

uint64_t sub_21FA256A0()
{
  return MEMORY[0x270F04870]();
}

uint64_t sub_21FA256B0()
{
  return MEMORY[0x270F04888]();
}

uint64_t sub_21FA256C0()
{
  return MEMORY[0x270F04908]();
}

uint64_t sub_21FA256D0()
{
  return MEMORY[0x270F04910]();
}

uint64_t sub_21FA256E0()
{
  return MEMORY[0x270F04928]();
}

uint64_t sub_21FA256F0()
{
  return MEMORY[0x270F04930]();
}

uint64_t sub_21FA25700()
{
  return MEMORY[0x270F04980]();
}

uint64_t sub_21FA25710()
{
  return MEMORY[0x270F04988]();
}

uint64_t sub_21FA25720()
{
  return MEMORY[0x270F04990]();
}

uint64_t sub_21FA25730()
{
  return MEMORY[0x270F04998]();
}

uint64_t sub_21FA25740()
{
  return MEMORY[0x270F049A0]();
}

uint64_t sub_21FA25750()
{
  return MEMORY[0x270F04B20]();
}

uint64_t sub_21FA25760()
{
  return MEMORY[0x270F04B30]();
}

uint64_t sub_21FA25770()
{
  return MEMORY[0x270F04B48]();
}

uint64_t sub_21FA25780()
{
  return MEMORY[0x270F04BF8]();
}

uint64_t sub_21FA25790()
{
  return MEMORY[0x270F04C40]();
}

uint64_t sub_21FA257A0()
{
  return MEMORY[0x270F04C50]();
}

uint64_t sub_21FA257B0()
{
  return MEMORY[0x270F04C58]();
}

uint64_t sub_21FA257C0()
{
  return MEMORY[0x270F04C60]();
}

uint64_t sub_21FA257D0()
{
  return MEMORY[0x270F04C68]();
}

uint64_t sub_21FA257E0()
{
  return MEMORY[0x270F04C90]();
}

uint64_t sub_21FA257F0()
{
  return MEMORY[0x270F04CA8]();
}

uint64_t sub_21FA25800()
{
  return MEMORY[0x270F04CC0]();
}

uint64_t sub_21FA25810()
{
  return MEMORY[0x270F04DD0]();
}

uint64_t sub_21FA25820()
{
  return MEMORY[0x270F04DD8]();
}

uint64_t sub_21FA25830()
{
  return MEMORY[0x270F04EA0]();
}

uint64_t sub_21FA25840()
{
  return MEMORY[0x270F04EB0]();
}

uint64_t sub_21FA25850()
{
  return MEMORY[0x270F04EB8]();
}

uint64_t sub_21FA25860()
{
  return MEMORY[0x270F04EE8]();
}

uint64_t sub_21FA25870()
{
  return MEMORY[0x270F05010]();
}

uint64_t sub_21FA25880()
{
  return MEMORY[0x270F05020]();
}

uint64_t sub_21FA25890()
{
  return MEMORY[0x270F05030]();
}

uint64_t sub_21FA258A0()
{
  return MEMORY[0x270F05048]();
}

uint64_t sub_21FA258B0()
{
  return MEMORY[0x270F05050]();
}

uint64_t sub_21FA258C0()
{
  return MEMORY[0x270F05058]();
}

uint64_t sub_21FA258D0()
{
  return MEMORY[0x270F05068]();
}

uint64_t sub_21FA258E0()
{
  return MEMORY[0x270F05078]();
}

uint64_t sub_21FA258F0()
{
  return MEMORY[0x270F05088]();
}

uint64_t sub_21FA25900()
{
  return MEMORY[0x270F05098]();
}

uint64_t sub_21FA25910()
{
  return MEMORY[0x270F05198]();
}

uint64_t sub_21FA25930()
{
  return MEMORY[0x270F051D0]();
}

uint64_t sub_21FA25940()
{
  return MEMORY[0x270F05368]();
}

uint64_t sub_21FA25950()
{
  return MEMORY[0x270F05370]();
}

uint64_t sub_21FA25960()
{
  return MEMORY[0x270F05378]();
}

uint64_t sub_21FA25970()
{
  return MEMORY[0x270F05380]();
}

uint64_t sub_21FA25980()
{
  return MEMORY[0x270F05390]();
}

uint64_t sub_21FA25990()
{
  return MEMORY[0x270F05398]();
}

uint64_t sub_21FA259A0()
{
  return MEMORY[0x270F053B8]();
}

uint64_t sub_21FA259B0()
{
  return MEMORY[0x270F053C8]();
}

uint64_t sub_21FA259C0()
{
  return MEMORY[0x270F053D0]();
}

uint64_t sub_21FA259D0()
{
  return MEMORY[0x270F053D8]();
}

uint64_t sub_21FA259E0()
{
  return MEMORY[0x270FA0970]();
}

uint64_t sub_21FA259F0()
{
  return MEMORY[0x270FA09A8]();
}

uint64_t sub_21FA25A00()
{
  return MEMORY[0x270FA0AC0]();
}

uint64_t sub_21FA25A10()
{
  return MEMORY[0x270FA0AD0]();
}

uint64_t sub_21FA25A20()
{
  return MEMORY[0x270FA0B00]();
}

uint64_t sub_21FA25A30()
{
  return MEMORY[0x270FA0B48]();
}

uint64_t sub_21FA25A40()
{
  return MEMORY[0x270FA0B60]();
}

uint64_t sub_21FA25A50()
{
  return MEMORY[0x270FA0B88]();
}

uint64_t sub_21FA25A60()
{
  return MEMORY[0x270FA0B98]();
}

uint64_t sub_21FA25A70()
{
  return MEMORY[0x270EF1808]();
}

uint64_t sub_21FA25A80()
{
  return MEMORY[0x270F9D010]();
}

uint64_t sub_21FA25A90()
{
  return MEMORY[0x270F9D030]();
}

uint64_t sub_21FA25AA0()
{
  return MEMORY[0x270F9D040]();
}

uint64_t sub_21FA25AB0()
{
  return MEMORY[0x270F9D050]();
}

uint64_t sub_21FA25AC0()
{
  return MEMORY[0x270F9D068]();
}

uint64_t sub_21FA25AD0()
{
  return MEMORY[0x270F9D0A8]();
}

uint64_t sub_21FA25AE0()
{
  return MEMORY[0x270F9D0E8]();
}

uint64_t sub_21FA25AF0()
{
  return MEMORY[0x270F9D1D0]();
}

uint64_t sub_21FA25B00()
{
  return MEMORY[0x270F9D208]();
}

uint64_t sub_21FA25B10()
{
  return MEMORY[0x270F9D210]();
}

uint64_t sub_21FA25B20()
{
  return MEMORY[0x270F9D260]();
}

uint64_t sub_21FA25B30()
{
  return MEMORY[0x270F9D2C8]();
}

uint64_t sub_21FA25B40()
{
  return MEMORY[0x270F9D2D8]();
}

uint64_t sub_21FA25B50()
{
  return MEMORY[0x270F9D2F0]();
}

uint64_t sub_21FA25B60()
{
  return MEMORY[0x270F9D318]();
}

uint64_t sub_21FA25B70()
{
  return MEMORY[0x270F9D320]();
}

uint64_t sub_21FA25B80()
{
  return MEMORY[0x270F9D328]();
}

uint64_t sub_21FA25B90()
{
  return MEMORY[0x270F9D338]();
}

uint64_t sub_21FA25BA0()
{
  return MEMORY[0x270F9D340]();
}

uint64_t sub_21FA25BB0()
{
  return MEMORY[0x270F9D348]();
}

uint64_t sub_21FA25BC0()
{
  return MEMORY[0x270F9D350]();
}

uint64_t sub_21FA25BE0()
{
  return MEMORY[0x270F9D428]();
}

uint64_t sub_21FA25BF0()
{
  return MEMORY[0x270F9D430]();
}

uint64_t sub_21FA25C00()
{
  return MEMORY[0x270F9D438]();
}

uint64_t sub_21FA25C10()
{
  return MEMORY[0x270F9D448]();
}

uint64_t sub_21FA25C20()
{
  return MEMORY[0x270F9D460]();
}

uint64_t sub_21FA25C30()
{
  return MEMORY[0x270F9D478]();
}

uint64_t sub_21FA25C40()
{
  return MEMORY[0x270F9D480]();
}

uint64_t sub_21FA25C50()
{
  return MEMORY[0x270F9D488]();
}

uint64_t sub_21FA25C60()
{
  return MEMORY[0x270F9D490]();
}

uint64_t sub_21FA25C70()
{
  return MEMORY[0x270F9D498]();
}

uint64_t sub_21FA25C80()
{
  return MEMORY[0x270F9D4A0]();
}

uint64_t sub_21FA25C90()
{
  return MEMORY[0x270F9D4A8]();
}

uint64_t sub_21FA25CA0()
{
  return MEMORY[0x270F9D4B0]();
}

uint64_t sub_21FA25CB0()
{
  return MEMORY[0x270F9D548]();
}

uint64_t sub_21FA25CC0()
{
  return MEMORY[0x270F9D550]();
}

uint64_t sub_21FA25CD0()
{
  return MEMORY[0x270F9D578]();
}

uint64_t sub_21FA25CE0()
{
  return MEMORY[0x270F9D598]();
}

uint64_t sub_21FA25CF0()
{
  return MEMORY[0x270EF19B0]();
}

uint64_t sub_21FA25D00()
{
  return MEMORY[0x270EF19E8]();
}

uint64_t sub_21FA25D10()
{
  return MEMORY[0x270EF1A38]();
}

uint64_t sub_21FA25D20()
{
  return MEMORY[0x270F9D5E0]();
}

uint64_t sub_21FA25D30()
{
  return MEMORY[0x270F9D708]();
}

uint64_t sub_21FA25D40()
{
  return MEMORY[0x270F9D798]();
}

uint64_t sub_21FA25D50()
{
  return MEMORY[0x270F9D7E0]();
}

uint64_t sub_21FA25D60()
{
  return MEMORY[0x270F9D8F8]();
}

uint64_t sub_21FA25D70()
{
  return MEMORY[0x270F9D908]();
}

uint64_t sub_21FA25D80()
{
  return MEMORY[0x270F9D938]();
}

uint64_t sub_21FA25D90()
{
  return MEMORY[0x270F9D940]();
}

uint64_t sub_21FA25DA0()
{
  return MEMORY[0x270F9D948]();
}

uint64_t sub_21FA25DB0()
{
  return MEMORY[0x270F9D968]();
}

uint64_t sub_21FA25DC0()
{
  return MEMORY[0x270F9D980]();
}

uint64_t sub_21FA25DD0()
{
  return MEMORY[0x270F9D9A0]();
}

uint64_t sub_21FA25DE0()
{
  return MEMORY[0x270F9DA00]();
}

uint64_t sub_21FA25DF0()
{
  return MEMORY[0x270F9DA18]();
}

uint64_t sub_21FA25E00()
{
  return MEMORY[0x270F9DA70]();
}

uint64_t sub_21FA25E10()
{
  return MEMORY[0x270F9DA78]();
}

uint64_t sub_21FA25E20()
{
  return MEMORY[0x270F9DBA0]();
}

uint64_t sub_21FA25E30()
{
  return MEMORY[0x270EF1B88]();
}

uint64_t sub_21FA25E40()
{
  return MEMORY[0x270EF1BB8]();
}

uint64_t sub_21FA25E50()
{
  return MEMORY[0x270F9DBB0]();
}

uint64_t sub_21FA25E60()
{
  return MEMORY[0x270F9DBB8]();
}

uint64_t sub_21FA25E70()
{
  return MEMORY[0x270F9DBC8]();
}

uint64_t sub_21FA25E80()
{
  return MEMORY[0x270F9DBD0]();
}

uint64_t sub_21FA25E90()
{
  return MEMORY[0x270F9DBF0]();
}

uint64_t sub_21FA25EA0()
{
  return MEMORY[0x270F9DBF8]();
}

uint64_t sub_21FA25EB0()
{
  return MEMORY[0x270F9DC00]();
}

uint64_t sub_21FA25EC0()
{
  return MEMORY[0x270F9DC10]();
}

uint64_t sub_21FA25ED0()
{
  return MEMORY[0x270F9DC20]();
}

uint64_t sub_21FA25EE0()
{
  return MEMORY[0x270F9DC30]();
}

uint64_t sub_21FA25EF0()
{
  return MEMORY[0x270F9DC50]();
}

uint64_t sub_21FA25F00()
{
  return MEMORY[0x270F9DC60]();
}

uint64_t sub_21FA25F10()
{
  return MEMORY[0x270F9DC88]();
}

uint64_t sub_21FA25F20()
{
  return MEMORY[0x270F9DCA8]();
}

uint64_t sub_21FA25F30()
{
  return MEMORY[0x270F9DCD8]();
}

uint64_t sub_21FA25F40()
{
  return MEMORY[0x270F9DCF8]();
}

uint64_t sub_21FA25F50()
{
  return MEMORY[0x270F9DD08]();
}

uint64_t sub_21FA25F60()
{
  return MEMORY[0x270F9DD28]();
}

uint64_t sub_21FA25F70()
{
  return MEMORY[0x270F9DD60]();
}

uint64_t sub_21FA25F80()
{
  return MEMORY[0x270F9DD68]();
}

uint64_t sub_21FA25F90()
{
  return MEMORY[0x270F9DD78]();
}

uint64_t sub_21FA25FA0()
{
  return MEMORY[0x270F9DDA0]();
}

uint64_t sub_21FA25FB0()
{
  return MEMORY[0x270F9DDB0]();
}

uint64_t sub_21FA25FC0()
{
  return MEMORY[0x270EF1CC0]();
}

uint64_t sub_21FA25FD0()
{
  return MEMORY[0x270F9DEF0]();
}

uint64_t sub_21FA25FE0()
{
  return MEMORY[0x270F9DF60]();
}

uint64_t sub_21FA25FF0()
{
  return MEMORY[0x270F9DF80]();
}

uint64_t sub_21FA26000()
{
  return MEMORY[0x270F9DFC0]();
}

uint64_t sub_21FA26010()
{
  return MEMORY[0x270F9DFD0]();
}

uint64_t sub_21FA26020()
{
  return MEMORY[0x270F9DFE8]();
}

uint64_t sub_21FA26040()
{
  return MEMORY[0x270F9E018]();
}

uint64_t sub_21FA26050()
{
  return MEMORY[0x270F9E050]();
}

uint64_t sub_21FA26070()
{
  return MEMORY[0x270F9E070]();
}

uint64_t sub_21FA26090()
{
  return MEMORY[0x270F9E080]();
}

uint64_t sub_21FA260A0()
{
  return MEMORY[0x270F9E0A0]();
}

uint64_t sub_21FA260B0()
{
  return MEMORY[0x270F9E0A8]();
}

uint64_t sub_21FA260E0()
{
  return MEMORY[0x270F9E0C0]();
}

uint64_t sub_21FA260F0()
{
  return MEMORY[0x270F9E0C8]();
}

uint64_t sub_21FA26100()
{
  return MEMORY[0x270F9E0D0]();
}

uint64_t sub_21FA26110()
{
  return MEMORY[0x270F9E0D8]();
}

uint64_t sub_21FA26120()
{
  return MEMORY[0x270F9E0E0]();
}

uint64_t sub_21FA26130()
{
  return MEMORY[0x270F9E0F0]();
}

uint64_t sub_21FA26150()
{
  return MEMORY[0x270F9E138]();
}

uint64_t sub_21FA26160()
{
  return MEMORY[0x270F9E140]();
}

uint64_t sub_21FA26170()
{
  return MEMORY[0x270F9E148]();
}

uint64_t sub_21FA26180()
{
  return MEMORY[0x270F9E150]();
}

uint64_t sub_21FA26190()
{
  return MEMORY[0x270F9E178]();
}

uint64_t sub_21FA261A0()
{
  return MEMORY[0x270F9E180]();
}

uint64_t sub_21FA261B0()
{
  return MEMORY[0x270F9E1A8]();
}

uint64_t sub_21FA261C0()
{
  return MEMORY[0x270F9E1B8]();
}

uint64_t sub_21FA261D0()
{
  return MEMORY[0x270F9E1D0]();
}

uint64_t sub_21FA261E0()
{
  return MEMORY[0x270F9E1D8]();
}

uint64_t sub_21FA261F0()
{
  return MEMORY[0x270F9E1E0]();
}

uint64_t sub_21FA26200()
{
  return MEMORY[0x270F9E328]();
}

uint64_t sub_21FA26210()
{
  return MEMORY[0x270F9E330]();
}

uint64_t sub_21FA26220()
{
  return MEMORY[0x270EE0610]();
}

uint64_t sub_21FA26230()
{
  return MEMORY[0x270EE0618]();
}

uint64_t sub_21FA26240()
{
  return MEMORY[0x270FA2E60]();
}

uint64_t sub_21FA26250()
{
  return MEMORY[0x270FA2E70]();
}

uint64_t sub_21FA26260()
{
  return MEMORY[0x270EE5898]();
}

uint64_t sub_21FA26270()
{
  return MEMORY[0x270EE58A8]();
}

uint64_t sub_21FA26280()
{
  return MEMORY[0x270EE58B8]();
}

uint64_t sub_21FA26290()
{
  return MEMORY[0x270EE58D8]();
}

uint64_t sub_21FA262A0()
{
  return MEMORY[0x270EE58E8]();
}

uint64_t sub_21FA262B0()
{
  return MEMORY[0x270EE0620]();
}

uint64_t sub_21FA262C0()
{
  return MEMORY[0x270EE0628]();
}

uint64_t sub_21FA262D0()
{
  return MEMORY[0x270EE0630]();
}

uint64_t sub_21FA262E0()
{
  return MEMORY[0x270FA2E90]();
}

uint64_t sub_21FA262F0()
{
  return MEMORY[0x270FA2EA8]();
}

uint64_t sub_21FA26300()
{
  return MEMORY[0x270EE0648]();
}

uint64_t sub_21FA26310()
{
  return MEMORY[0x270FA1180]();
}

uint64_t sub_21FA26320()
{
  return MEMORY[0x270EF22F0]();
}

uint64_t sub_21FA26330()
{
  return MEMORY[0x270FA2F00]();
}

uint64_t sub_21FA26340()
{
  return MEMORY[0x270F9E3C0]();
}

uint64_t sub_21FA26350()
{
  return MEMORY[0x270F9E518]();
}

uint64_t sub_21FA26360()
{
  return MEMORY[0x270F9E5B8]();
}

uint64_t sub_21FA26370()
{
  return MEMORY[0x270F9E5C8]();
}

uint64_t sub_21FA26380()
{
  return MEMORY[0x270F9E5D8]();
}

uint64_t sub_21FA26390()
{
  return MEMORY[0x270F9E5E8]();
}

uint64_t sub_21FA263A0()
{
  return MEMORY[0x270F9E640]();
}

uint64_t sub_21FA263B0()
{
  return MEMORY[0x270F9E648]();
}

uint64_t sub_21FA263C0()
{
  return MEMORY[0x270F9E650]();
}

uint64_t sub_21FA263D0()
{
  return MEMORY[0x270F9E660]();
}

uint64_t sub_21FA263E0()
{
  return MEMORY[0x270F9E668]();
}

uint64_t sub_21FA263F0()
{
  return MEMORY[0x270F9E670]();
}

uint64_t sub_21FA26400()
{
  return MEMORY[0x270F9E708]();
}

uint64_t sub_21FA26410()
{
  return MEMORY[0x270F9E7E8]();
}

uint64_t sub_21FA26420()
{
  return MEMORY[0x270F9E7F0]();
}

uint64_t sub_21FA26430()
{
  return MEMORY[0x270F9E800]();
}

uint64_t sub_21FA26440()
{
  return MEMORY[0x270F9E818]();
}

uint64_t sub_21FA26450()
{
  return MEMORY[0x270F9E870]();
}

uint64_t sub_21FA26460()
{
  return MEMORY[0x270F9E8B8]();
}

uint64_t sub_21FA26470()
{
  return MEMORY[0x270F9E8C8]();
}

uint64_t sub_21FA26480()
{
  return MEMORY[0x270F9E8D8]();
}

uint64_t sub_21FA26490()
{
  return MEMORY[0x270F9E8E8]();
}

uint64_t sub_21FA264A0()
{
  return MEMORY[0x270F9E938]();
}

uint64_t sub_21FA264B0()
{
  return MEMORY[0x270F9E940]();
}

uint64_t sub_21FA264C0()
{
  return MEMORY[0x270F9E948]();
}

uint64_t sub_21FA264D0()
{
  return MEMORY[0x270F9E950]();
}

uint64_t sub_21FA264E0()
{
  return MEMORY[0x270F9E958]();
}

uint64_t sub_21FA264F0()
{
  return MEMORY[0x270F9E960]();
}

uint64_t sub_21FA26500()
{
  return MEMORY[0x270F9E970]();
}

uint64_t sub_21FA26510()
{
  return MEMORY[0x270F9E9A8]();
}

uint64_t sub_21FA26520()
{
  return MEMORY[0x270F9E9B0]();
}

uint64_t sub_21FA26530()
{
  return MEMORY[0x270F9E9D0]();
}

uint64_t sub_21FA26540()
{
  return MEMORY[0x270F9E9E0]();
}

uint64_t sub_21FA26550()
{
  return MEMORY[0x270F9EA08]();
}

uint64_t sub_21FA26560()
{
  return MEMORY[0x270F9EA38]();
}

uint64_t sub_21FA26570()
{
  return MEMORY[0x270F9EA40]();
}

uint64_t sub_21FA26580()
{
  return MEMORY[0x270F9EA48]();
}

uint64_t sub_21FA26590()
{
  return MEMORY[0x270F9EAC8]();
}

uint64_t sub_21FA265A0()
{
  return MEMORY[0x270F9EB00]();
}

uint64_t sub_21FA265B0()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t sub_21FA265C0()
{
  return MEMORY[0x270F9EB78]();
}

uint64_t sub_21FA265D0()
{
  return MEMORY[0x270F9EB80]();
}

uint64_t sub_21FA265E0()
{
  return MEMORY[0x270F9EB88]();
}

uint64_t sub_21FA265F0()
{
  return MEMORY[0x270F9EB90]();
}

uint64_t sub_21FA26600()
{
  return MEMORY[0x270F9EB98]();
}

uint64_t sub_21FA26610()
{
  return MEMORY[0x270F9EBC0]();
}

uint64_t sub_21FA26620()
{
  return MEMORY[0x270F9EBD8]();
}

uint64_t sub_21FA26630()
{
  return MEMORY[0x270F9EBE0]();
}

uint64_t sub_21FA26640()
{
  return MEMORY[0x270F9EC08]();
}

uint64_t sub_21FA26650()
{
  return MEMORY[0x270F9EC10]();
}

uint64_t sub_21FA26660()
{
  return MEMORY[0x270F9EC48]();
}

uint64_t sub_21FA26670()
{
  return MEMORY[0x270F9EC88]();
}

uint64_t sub_21FA26680()
{
  return MEMORY[0x270F9EC90]();
}

uint64_t sub_21FA26690()
{
  return MEMORY[0x270F9ED10]();
}

uint64_t sub_21FA266A0()
{
  return MEMORY[0x270F9ED70]();
}

uint64_t sub_21FA266B0()
{
  return MEMORY[0x270F9ED90]();
}

uint64_t sub_21FA266C0()
{
  return MEMORY[0x270F9EDA8]();
}

uint64_t sub_21FA266D0()
{
  return MEMORY[0x270F9EEB0]();
}

uint64_t sub_21FA266E0()
{
  return MEMORY[0x270F9EFF0]();
}

uint64_t sub_21FA266F0()
{
  return MEMORY[0x270F9F000]();
}

uint64_t sub_21FA26700()
{
  return MEMORY[0x270F9F010]();
}

uint64_t sub_21FA26710()
{
  return MEMORY[0x270F9F018]();
}

uint64_t sub_21FA26720()
{
  return MEMORY[0x270F9F020]();
}

uint64_t sub_21FA26730()
{
  return MEMORY[0x270F9F030]();
}

uint64_t sub_21FA26740()
{
  return MEMORY[0x270F9F038]();
}

uint64_t sub_21FA26750()
{
  return MEMORY[0x270F9F040]();
}

uint64_t sub_21FA26760()
{
  return MEMORY[0x270F9F048]();
}

uint64_t sub_21FA26770()
{
  return MEMORY[0x270F9F050]();
}

uint64_t sub_21FA26780()
{
  return MEMORY[0x270F9F060]();
}

uint64_t sub_21FA26790()
{
  return MEMORY[0x270F9F080]();
}

uint64_t sub_21FA267A0()
{
  return MEMORY[0x270F9F098]();
}

uint64_t sub_21FA267B0()
{
  return MEMORY[0x270F9F0A0]();
}

uint64_t sub_21FA267C0()
{
  return MEMORY[0x270F9F0B0]();
}

uint64_t sub_21FA267D0()
{
  return MEMORY[0x270F9F138]();
}

uint64_t sub_21FA267E0()
{
  return MEMORY[0x270F9F158]();
}

uint64_t sub_21FA267F0()
{
  return MEMORY[0x270F9F1A8]();
}

uint64_t sub_21FA26800()
{
  return MEMORY[0x270F9F228]();
}

uint64_t sub_21FA26810()
{
  return MEMORY[0x270F9F318]();
}

uint64_t sub_21FA26820()
{
  return MEMORY[0x270F9F378]();
}

uint64_t sub_21FA26830()
{
  return MEMORY[0x270F9F458]();
}

uint64_t sub_21FA26840()
{
  return MEMORY[0x270F9F4A8]();
}

uint64_t sub_21FA26850()
{
  return MEMORY[0x270F9F4C8]();
}

uint64_t sub_21FA26860()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t sub_21FA26880()
{
  return MEMORY[0x270F9F740]();
}

uint64_t sub_21FA26890()
{
  return MEMORY[0x270F9F750]();
}

uint64_t sub_21FA268A0()
{
  return MEMORY[0x270F9F7A8]();
}

uint64_t sub_21FA268B0()
{
  return MEMORY[0x270F9F7B0]();
}

uint64_t sub_21FA268C0()
{
  return MEMORY[0x270F9F7C0]();
}

uint64_t sub_21FA268D0()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t sub_21FA268E0()
{
  return MEMORY[0x270F9F918]();
}

uint64_t sub_21FA268F0()
{
  return MEMORY[0x270F9F920]();
}

uint64_t sub_21FA26900()
{
  return MEMORY[0x270F9FA28]();
}

uint64_t sub_21FA26910()
{
  return MEMORY[0x270F9FA60]();
}

uint64_t sub_21FA26920()
{
  return MEMORY[0x270F9FA70]();
}

uint64_t sub_21FA26930()
{
  return MEMORY[0x270F9FA80]();
}

uint64_t sub_21FA26940()
{
  return MEMORY[0x270F9FA98]();
}

uint64_t sub_21FA26950()
{
  return MEMORY[0x270F9FAA8]();
}

uint64_t sub_21FA26960()
{
  return MEMORY[0x270F9FAB8]();
}

uint64_t sub_21FA26970()
{
  return MEMORY[0x270F9FB08]();
}

uint64_t sub_21FA26980()
{
  return MEMORY[0x270F9FB10]();
}

uint64_t sub_21FA26990()
{
  return MEMORY[0x270F9FB18]();
}

uint64_t sub_21FA269A0()
{
  return MEMORY[0x270F9FB30]();
}

uint64_t sub_21FA269B0()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t sub_21FA269C0()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t sub_21FA269D0()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t sub_21FA269E0()
{
  return MEMORY[0x270F9FC28]();
}

uint64_t sub_21FA269F0()
{
  return MEMORY[0x270F9FC40]();
}

uint64_t sub_21FA26A00()
{
  return MEMORY[0x270F9FC48]();
}

uint64_t sub_21FA26A10()
{
  return MEMORY[0x270F9FC60]();
}

uint64_t sub_21FA26A20()
{
  return MEMORY[0x270F9FC68]();
}

uint64_t sub_21FA26A30()
{
  return MEMORY[0x270F9FC80]();
}

uint64_t sub_21FA26A40()
{
  return MEMORY[0x270F9FC88]();
}

uint64_t sub_21FA26A50()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t sub_21FA26A60()
{
  return MEMORY[0x270F9FC98]();
}

uint64_t sub_21FA26A80()
{
  return MEMORY[0x270EF2770]();
}

uint64_t sub_21FA26A90()
{
  return MEMORY[0x270EF2778]();
}

uint64_t sub_21FA26AA0()
{
  return MEMORY[0x270EF2780]();
}

uint64_t sub_21FA26AB0()
{
  return MEMORY[0x270F9FD70]();
}

uint64_t sub_21FA26AC0()
{
  return MEMORY[0x270F9FD98]();
}

uint64_t sub_21FA26AD0()
{
  return MEMORY[0x270F9FDD0]();
}

uint64_t sub_21FA26B00()
{
  return MEMORY[0x270FA0128]();
}

uint64_t AGCompareValues()
{
  return MEMORY[0x270F0F118]();
}

uint64_t AGCreateWeakAttribute()
{
  return MEMORY[0x270F0F120]();
}

uint64_t AGGraphClearUpdate()
{
  return MEMORY[0x270F0F170]();
}

uint64_t AGGraphCreateIndirectAttribute2()
{
  return MEMORY[0x270F0F188]();
}

uint64_t AGGraphCreateOffsetAttribute2()
{
  return MEMORY[0x270F0F190]();
}

uint64_t AGGraphGetAttributeSubgraph()
{
  return MEMORY[0x270F0F1C0]();
}

uint64_t AGGraphGetCurrentAttribute()
{
  return MEMORY[0x270F0F1E0]();
}

uint64_t AGGraphGetOutputValue()
{
  return MEMORY[0x270F0F1F8]();
}

uint64_t AGGraphGetValue()
{
  return MEMORY[0x270F0F200]();
}

uint64_t AGGraphGetWeakValue()
{
  return MEMORY[0x270F0F210]();
}

uint64_t AGGraphMutateAttribute()
{
  return MEMORY[0x270F0F238]();
}

uint64_t AGGraphSetIndirectAttribute()
{
  return MEMORY[0x270F0F268]();
}

uint64_t AGGraphSetIndirectDependency()
{
  return MEMORY[0x270F0F270]();
}

uint64_t AGGraphSetOutputValue()
{
  return MEMORY[0x270F0F288]();
}

uint64_t AGGraphSetUpdate()
{
  return MEMORY[0x270F0F298]();
}

uint64_t AGGraphSetValue()
{
  return MEMORY[0x270F0F2A8]();
}

uint64_t AGSubgraphAddChild()
{
  return MEMORY[0x270F0F2F8]();
}

uint64_t AGSubgraphCreate()
{
  return MEMORY[0x270F0F328]();
}

uint64_t AGSubgraphGetCurrent()
{
  return MEMORY[0x270F0F350]();
}

uint64_t AGSubgraphGetGraph()
{
  return MEMORY[0x270F0F358]();
}

uint64_t AGSubgraphInvalidate()
{
  return MEMORY[0x270F0F370]();
}

uint64_t AGSubgraphIsValid()
{
  return MEMORY[0x270F0F388]();
}

uint64_t AGSubgraphRemoveChild()
{
  return MEMORY[0x270F0F390]();
}

uint64_t AGSubgraphSetCurrent()
{
  return MEMORY[0x270F0F3A0]();
}

uint64_t AGTupleElementOffset()
{
  return MEMORY[0x270F0F418]();
}

uint64_t AGTypeGetKind()
{
  return MEMORY[0x270F0F448]();
}

CGColorRef CGColorCreateSRGB(CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x270EE5B88](red, green, blue, alpha);
}

void CGPathApplyWithBlock(CGPathRef path, CGPathApplyBlock block)
{
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x270EE7030]();
}

CGRect CGPathGetPathBoundingBox(CGPathRef path)
{
  MEMORY[0x270EE7090](path);
  result.size.CGFloat height = v4;
  result.size.CGFloat width = v3;
  result.origin.CGFloat y = v2;
  result.origin.CGFloat x = v1;
  return result;
}

BOOL CGPathIsEmpty(CGPathRef path)
{
  return MEMORY[0x270EE70C8](path);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x270EE71A0]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  MEMORY[0x270EE71A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  MEMORY[0x270EE71C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  MEMORY[0x270EE71D0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  MEMORY[0x270EE71D8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  MEMORY[0x270EE71F0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  MEMORY[0x270EE71F8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  MEMORY[0x270EE7210]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  MEMORY[0x270EE7218]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  MEMORY[0x270EE7228]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.CGFloat height = v6;
  result.size.CGFloat width = v5;
  result.origin.CGFloat y = v4;
  result.origin.CGFloat x = v3;
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  MEMORY[0x270EE7238]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.CGFloat height = v5;
  result.size.CGFloat width = v4;
  result.origin.CGFloat y = v3;
  result.origin.CGFloat x = v2;
  return result;
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x270EE7250]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x270EE7260]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)
{
  MEMORY[0x270EE7280]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.CGFloat height = v6;
  result.size.CGFloat width = v5;
  result.origin.CGFloat y = v4;
  result.origin.CGFloat x = v3;
  return result;
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  MEMORY[0x270EE7290]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.CGFloat height = v5;
  result.size.CGFloat width = v4;
  result.origin.CGFloat y = v3;
  result.origin.CGFloat x = v2;
  return result;
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_release(const void *aBlock)
{
}

double __exp10(double a1)
{
  MEMORY[0x270ED7DC8](a1);
  return result;
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x270ED7E88](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

double _simd_orient_pd2(simd_double2 a1, simd_double2 a2, simd_double2 a3)
{
  MEMORY[0x270ED82F0]((__n128)a1, (__n128)a2, (__n128)a3);
  return result;
}

long double acos(long double __x)
{
  MEMORY[0x270ED8588](__x);
  return result;
}

long double asin(long double __x)
{
  MEMORY[0x270ED8610](__x);
  return result;
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x270ED86A8](__y, __x);
  return result;
}

void bzero(void *a1, size_t a2)
{
}

long double cbrt(long double __x)
{
  MEMORY[0x270ED87B8](__x);
  return result;
}

long double exp(long double __x)
{
  MEMORY[0x270ED9858](__x);
  return result;
}

void free(void *a1)
{
}

long double log(long double __x)
{
  MEMORY[0x270EDA0A8](__x);
  return result;
}

long double log10(long double __x)
{
  MEMORY[0x270EDA0B0](__x);
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x270EDA328](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x270F9A538](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x270EDACF8](__x, __y);
  return result;
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x270EDAEF0](a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x270EDAF18](a1, a2);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x270EDB048](a1, a2);
}

long double sin(long double __x)
{
  MEMORY[0x270EDB4E8](__x);
  return result;
}

uint64_t swift_allocBox()
{
  return MEMORY[0x270FA0180]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x270FA01A0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x270FA01C8]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x270FA01D0]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x270FA01D8]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x270FA01F0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x270FA0208]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x270FA0228]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x270FA0268]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x270FA0288]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x270FA02D0]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x270FA02F8]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x270FA0300]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x270FA0310]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x270FA0330]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x270FA0338]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x270FA0370]();
}

uint64_t swift_getFunctionTypeMetadata0()
{
  return MEMORY[0x270FA0388]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x270FA03B0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x270FA03B8]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x270FA03C8]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x270FA03D0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x270FA03F0]();
}

uint64_t swift_getOpaqueTypeMetadata2()
{
  return MEMORY[0x270FA03F8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x270FA0400]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x270FA0410]();
}

uint64_t swift_getTupleTypeLayout3()
{
  return MEMORY[0x270FA0418]();
}

uint64_t swift_getTupleTypeMetadata()
{
  return MEMORY[0x270FA0420]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x270FA0428]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x270FA0430]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x270FA0440]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x270FA0448]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x270FA0458]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x270FA0460]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x270FA0470]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x270FA0490]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x270FA0498]();
}

uint64_t swift_isUniquelyReferenced_nonNull()
{
  return MEMORY[0x270FA04B8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x270FA04C0]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x270FA04D8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x270FA04F8]();
}

uint64_t swift_readAtKeyPath()
{
  return MEMORY[0x270FA0500]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x270FA0528]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x270FA0538]();
}

uint64_t swift_setAtWritableKeyPath()
{
  return MEMORY[0x270FA0548]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x270FA0550]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x270FA0568]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x270FA0578]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x270FA0588]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x270FA05A8]();
}

uint64_t swift_unknownObjectWeakCopyAssign()
{
  return MEMORY[0x270FA05D8]();
}

uint64_t swift_unknownObjectWeakCopyInit()
{
  return MEMORY[0x270FA05E0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x270FA05E8]();
}

uint64_t swift_unknownObjectWeakTakeAssign()
{
  return MEMORY[0x270FA0600]();
}

uint64_t swift_unknownObjectWeakTakeInit()
{
  return MEMORY[0x270FA0608]();
}

uint64_t swift_unownedRelease()
{
  return MEMORY[0x270FA0610]();
}

uint64_t swift_unownedRetain()
{
  return MEMORY[0x270FA0618]();
}

uint64_t swift_unownedRetainStrong()
{
  return MEMORY[0x270FA0620]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x270FA0628]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x270FA0650]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x270FA0658]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x270FA0670]();
}

long double tan(long double __x)
{
  MEMORY[0x270EDB810](__x);
  return result;
}

void vDSP_sve_svesq(const float *__A, vDSP_Stride __IA, float *__Sum, float *__SumOfSquares, vDSP_Length __N)
{
}