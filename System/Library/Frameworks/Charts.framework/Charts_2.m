uint64_t sub_21F835AAC(int *a1, unsigned int a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  int v47;
  int v48;
  uint64_t (*v49)(int *, uint64_t, uint64_t);
  unint64_t v50;
  uint64_t v51;
  uint64_t vars8;

  v51 = a3[2];
  v4 = *(void *)(v51 - 8);
  v5 = *(unsigned int *)(v4 + 84);
  v6 = *(void *)(a3[3] - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = *(void *)(sub_21FA24310() - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(void *)(sub_21FA24320() - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v11 | v9;
  v13 = v11 | v9 | v7;
  v14 = v13 | 7;
  v15 = (v13 + 32) & ~(v13 | 7);
  v16 = *(void *)(v6 + 64);
  if (((v16 + v7) & ~v7) + v16 > v16) {
    v16 += (v16 + v7) & ~v7;
  }
  v17 = (*(void *)(v8 + 64) + v11 + ((v9 + 8) & ~v9)) & ~v11;
  v18 = *(void *)(v10 + 64);
  v19 = v17 + v18;
  if (v16 <= v17 + v18) {
    v20 = v17 + v18;
  }
  else {
    v20 = v16;
  }
  if (v20 <= 0x10) {
    v20 = 16;
  }
  v21 = v20 + v15;
  if (v21 + 1 > ((v21 + 1 + v14) & ~v14) + v21 + 1) {
    v22 = v21 + 1;
  }
  else {
    v22 = ((v21 + 1 + v14) & ~v14) + v21 + 1;
  }
  v23 = (v21 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v22 <= v23 + 113) {
    v22 = v23 + 113;
  }
  v24 = v23 + 49;
  if (v22 <= v24) {
    v22 = v24;
  }
  v25 = *(void *)(a3[4] - 8);
  if (v22 <= 0x19) {
    v26 = 25;
  }
  else {
    v26 = v22;
  }
  v27 = *(unsigned __int8 *)(v25 + 80);
  v28 = v12 | v27;
  v29 = v28 | 7;
  v30 = (v28 + 32) & ~(v28 | 7);
  v31 = *(void *)(v25 + 64);
  if (((v31 + v27) & ~v27) + v31 > v31) {
    v31 += (v31 + v27) & ~v27;
  }
  if (v31 <= v19) {
    v31 = v19;
  }
  if (v31 <= 0x10) {
    v31 = 16;
  }
  v32 = v31 + v30;
  if (v32 + 1 > ((v32 + 1 + v29) & ~v29) + v32 + 1) {
    v33 = v32 + 1;
  }
  else {
    v33 = ((v32 + 1 + v29) & ~v29) + v32 + 1;
  }
  v34 = (v32 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v33 <= v34 + 113) {
    v33 = v34 + 113;
  }
  v35 = v34 + 49;
  if (v33 > v35) {
    v35 = v33;
  }
  if (v35 <= 0x19) {
    v36 = 25;
  }
  else {
    v36 = v35;
  }
  if (v5 <= 0x7FFFFFFF) {
    v37 = 0x7FFFFFFF;
  }
  else {
    v37 = v5;
  }
  if (!a2) {
    return 0;
  }
  v38 = *(void *)(v4 + 64) + v14;
  v39 = v26 + 1;
  if (v37 < a2)
  {
    v40 = ((v36 + ((v39 + v29 + (v38 & ~v14)) & ~v29) + 8) & 0xFFFFFFFFFFFFFFF8) + 8;
    v41 = v40 & 0xFFFFFFF8;
    if ((v40 & 0xFFFFFFF8) != 0) {
      v42 = 2;
    }
    else {
      v42 = a2 - v37 + 1;
    }
    if (v42 >= 0x10000) {
      v43 = 4;
    }
    else {
      v43 = 2;
    }
    if (v42 < 0x100) {
      v43 = 1;
    }
    if (v42 >= 2) {
      v44 = v43;
    }
    else {
      v44 = 0;
    }
    switch(v44)
    {
      case 1:
        v45 = *((unsigned __int8 *)a1 + v40);
        if (!v45) {
          break;
        }
        goto LABEL_55;
      case 2:
        v45 = *(unsigned __int16 *)((char *)a1 + v40);
        if (v45) {
          goto LABEL_55;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x21F835EECLL);
      case 4:
        v45 = *(int *)((char *)a1 + v40);
        if (!v45) {
          break;
        }
LABEL_55:
        v47 = v45 - 1;
        if (v41)
        {
          v47 = 0;
          v48 = *a1;
        }
        else
        {
          v48 = 0;
        }
        return v37 + (v48 | v47) + 1;
      default:
        break;
    }
  }
  if (v5 < 0x7FFFFFFF)
  {
    v50 = *(void *)(((((((unint64_t)a1 + v38) & ~v14) + v29 + v39) & ~v29 | 7) + v36 + 1) & 0xFFFFFFFFFFFFFFF8);
    if (v50 >= 0xFFFFFFFF) {
      LODWORD(v50) = -1;
    }
    return (v50 + 1);
  }
  else
  {
    v49 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v4 + 48);
    return v49(a1, v5, v51);
  }
}

void sub_21F835F00(_DWORD *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v52 = *(void *)(a4[2] - 8);
  unsigned int v6 = *(_DWORD *)(v52 + 84);
  uint64_t v7 = *(void *)(a4[3] - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(sub_21FA24310() - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = sub_21FA24320();
  unsigned int v12 = v6;
  uint64_t v13 = *(void *)(v11 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v14 | v10;
  uint64_t v16 = v14 | v10 | v8;
  uint64_t v17 = v16 | 7;
  uint64_t v18 = (v16 + 32) & ~(v16 | 7);
  unint64_t v19 = *(void *)(v7 + 64);
  if (((v19 + v8) & ~v8) + v19 > v19) {
    v19 += (v19 + v8) & ~v8;
  }
  uint64_t v20 = (*(void *)(v9 + 64) + v14 + ((v10 + 8) & ~v10)) & ~v14;
  uint64_t v21 = *(void *)(v13 + 64);
  unint64_t v22 = v20 + v21;
  if (v19 <= v20 + v21) {
    unint64_t v23 = v20 + v21;
  }
  else {
    unint64_t v23 = v19;
  }
  if (v23 <= 0x10) {
    unint64_t v23 = 16;
  }
  unint64_t v24 = v23 + v18;
  if (v24 + 1 > ((v24 + 1 + v17) & ~v17) + v24 + 1) {
    unint64_t v25 = v24 + 1;
  }
  else {
    unint64_t v25 = ((v24 + 1 + v17) & ~v17) + v24 + 1;
  }
  unint64_t v26 = (v24 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v25 <= v26 + 113) {
    unint64_t v25 = v26 + 113;
  }
  unint64_t v27 = v26 + 49;
  if (v25 > v27) {
    unint64_t v27 = v25;
  }
  uint64_t v28 = 25;
  if (v27 <= 0x19) {
    uint64_t v29 = 25;
  }
  else {
    uint64_t v29 = v27;
  }
  uint64_t v30 = *(void *)(a4[4] - 8);
  uint64_t v31 = *(unsigned __int8 *)(v30 + 80);
  uint64_t v32 = v15 | v31;
  uint64_t v33 = v32 | 7;
  uint64_t v34 = (v32 + 32) & ~(v32 | 7);
  unint64_t v35 = *(void *)(v30 + 64);
  if (((v35 + v31) & ~v31) + v35 > v35) {
    v35 += (v35 + v31) & ~v31;
  }
  if (v35 <= v22) {
    unint64_t v35 = v22;
  }
  if (v35 <= 0x10) {
    unint64_t v35 = 16;
  }
  unint64_t v36 = v35 + v34;
  if (v36 + 1 > ((v36 + 1 + v33) & ~v33) + v36 + 1) {
    unint64_t v37 = v36 + 1;
  }
  else {
    unint64_t v37 = ((v36 + 1 + v33) & ~v33) + v36 + 1;
  }
  unint64_t v38 = (v36 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v37 <= v38 + 113) {
    unint64_t v37 = v38 + 113;
  }
  unint64_t v39 = v38 + 49;
  if (v37 > v39) {
    unint64_t v39 = v37;
  }
  if (v39 > 0x19) {
    uint64_t v28 = v39;
  }
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v40 = 0x7FFFFFFF;
  }
  else {
    unsigned int v40 = v6;
  }
  uint64_t v41 = *(void *)(v52 + 64) + v17;
  uint64_t v42 = v29 + 1;
  size_t v43 = ((v28 + ((v29 + 1 + v33 + (v41 & ~v17)) & ~v33) + 8) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v40 >= a3)
  {
    int v46 = 0;
  }
  else
  {
    if (((v28 + ((v29 + 1 + v33 + (v41 & ~v17)) & ~v33) + 8) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v44 = a3 - v40 + 1;
    }
    else {
      unsigned int v44 = 2;
    }
    if (v44 >= 0x10000) {
      int v45 = 4;
    }
    else {
      int v45 = 2;
    }
    if (v44 < 0x100) {
      int v45 = 1;
    }
    if (v44 >= 2) {
      int v46 = v45;
    }
    else {
      int v46 = 0;
    }
  }
  if (a2 > v40)
  {
    if (v43) {
      int v47 = 1;
    }
    else {
      int v47 = a2 - v40;
    }
    if (v43)
    {
      int v48 = ~v40 + a2;
      bzero(a1, v43);
      *a1 = v48;
    }
    switch(v46)
    {
      case 1:
        *((unsigned char *)a1 + v43) = v47;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v43) = v47;
        return;
      case 3:
        goto LABEL_75;
      case 4:
        *(_DWORD *)((char *)a1 + v43) = v47;
        return;
      default:
        return;
    }
  }
  switch(v46)
  {
    case 1:
      *((unsigned char *)a1 + v43) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_64;
    case 2:
      *(_WORD *)((char *)a1 + v43) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_64;
    case 3:
LABEL_75:
      __break(1u);
      JUMPOUT(0x21F83638CLL);
    case 4:
      *(_DWORD *)((char *)a1 + v43) = 0;
      goto LABEL_63;
    default:
LABEL_63:
      if (a2)
      {
LABEL_64:
        if (v12 < 0x7FFFFFFF)
        {
          v50 = (void *)(((((((unint64_t)a1 + v41) & ~v17) + v33 + v42) & ~v33 | 7) + v28 + 1) & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0) {
            uint64_t v51 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v51 = a2 - 1;
          }
          void *v50 = v51;
        }
        else
        {
          v49 = *(void (**)(_DWORD *))(v52 + 56);
          v49(a1);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for XYRenderer()
{
  return swift_getGenericMetadata();
}

uint64_t sub_21F8363CC()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21F83646C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v14 = (void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_21F83658C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  swift_release();

  return swift_release();
}

uint64_t sub_21F83660C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  uint64_t v10 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_21F8366AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  uint64_t v10 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_21F836760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  *(_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_21F8367EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 23;
  *int v7 = *(_OWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  *(_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_21F83688C(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x21F8369E0);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_21F8369F4(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              unint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v20 = a2 ^ 0x80000000;
                v19[1] = 0;
              }
              else
              {
                uint64_t v20 = a2 - 1;
              }
              *unint64_t v19 = v20;
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x21F836BE8);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for Vectorizer()
{
  return sub_21F764F08();
}

uint64_t sub_21F836C28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v8 = (int *)type metadata accessor for XYRenderer();
  uint64_t v9 = v8[19];
  type metadata accessor for VectorizedModifiers();
  unint64_t v10 = (_OWORD *)swift_allocObject();
  v10[1] = 0u;
  v10[2] = 0u;
  v10[3] = 0u;
  v10[4] = 0u;
  v10[5] = 0u;
  v10[6] = 0u;
  v10[7] = 0u;
  v10[8] = 0u;
  v10[9] = 0u;
  v10[10] = 0u;
  v10[11] = 0u;
  v10[12] = 0u;
  v10[13] = 0u;
  v10[14] = 0u;
  *(void *)(a5 + v9) = v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t v11 = a5 + v8[17];
  swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for BoundingSectionSpecification();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v11, a2, v12);
  uint64_t v13 = a5 + v8[18];
  uint64_t v14 = type metadata accessor for BoundingSectionSpecification();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v13, a3, v14);
}

uint64_t sub_21F836DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v35 = a1;
  uint64_t v7 = type metadata accessor for ConcreteScale();
  uint64_t v33 = *(void *)(v7 - 8);
  uint64_t v34 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v31 - v8;
  uint64_t v10 = type metadata accessor for ConcreteScale();
  uint64_t v31 = *(void *)(v10 - 8);
  uint64_t v32 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v31 - v11;
  uint64_t v13 = type metadata accessor for AnyConcreteScale();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  int v16 = (char *)&v31 - v15;
  uint64_t v17 = *(int *)(a3 + 76);
  uint64_t v36 = v4;
  uint64_t v37 = *(void *)(v4 + v17);
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v35, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = v31;
    uint64_t v18 = v32;
    uint64_t v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v31 + 32))(v12, v16, v32);
    MEMORY[0x270FA5388](v20);
    *((_OWORD *)&v31 - 5) = *(_OWORD *)(a3 + 16);
    *(&v31 - 8) = *(void *)(a3 + 32);
    *(&v31 - 7) = a4;
    *((_OWORD *)&v31 - 3) = *(_OWORD *)(a3 + 40);
    uint64_t v21 = v36;
    *(&v31 - 4) = *(void *)(a3 + 56);
    *(&v31 - 3) = v21;
    *(&v31 - 2) = (uint64_t)v12;
    sub_21F76CA40(qword_26AD44558);
    uint64_t v22 = type metadata accessor for RepeatedValueCollection();
    sub_21F769724((void (*)(char *, char *))sub_21F83F914, (uint64_t)(&v31 - 12), MEMORY[0x263F8E628], v22, v23, (uint64_t)&v37);
    sub_21F76CA84((uint64_t)v38, qword_26AD44558);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v12, v18);
  }
  else
  {
    uint64_t v25 = v33;
    uint64_t v24 = v34;
    uint64_t v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v33 + 32))(v9, v16, v34);
    MEMORY[0x270FA5388](v26);
    *((_OWORD *)&v31 - 5) = *(_OWORD *)(a3 + 16);
    *(&v31 - 8) = *(void *)(a3 + 32);
    *(&v31 - 7) = a4;
    *((_OWORD *)&v31 - 3) = *(_OWORD *)(a3 + 40);
    uint64_t v27 = v36;
    *(&v31 - 4) = *(void *)(a3 + 56);
    *(&v31 - 3) = v27;
    *(&v31 - 2) = (uint64_t)v9;
    sub_21F76CA40(qword_26AD44558);
    uint64_t v28 = type metadata accessor for RepeatedValueCollection();
    sub_21F769724((void (*)(char *, char *))sub_21F83F8E4, (uint64_t)(&v31 - 12), MEMORY[0x263F8E628], v28, v29, (uint64_t)&v37);
    sub_21F76CA84((uint64_t)v38, qword_26AD44558);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v24);
  }
  return v37;
}

double sub_21F8371F0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v10 = *(void *)(a1 + 8);
  sub_21F76C978(a2, (uint64_t)v20, qword_26AD44558);
  if (!v21)
  {
    sub_21F76CA84((uint64_t)v20, qword_26AD44558);
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    uint64_t v25 = 0;
    goto LABEL_10;
  }
  uint64_t v11 = *(void *)(a4 + 40);
  uint64_t v12 = *(void *)(a4 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_21F959BA4(AssociatedTypeWitness, (uint64_t)&v22);
  sub_21F8182CC((uint64_t)v20);
  if (!*((void *)&v23 + 1))
  {
LABEL_10:
    sub_21F76CA84((uint64_t)&v22, qword_26AD44558);
    *(void *)(a5 + 48) = 0;
    double result = 0.0;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)a5 = 0u;
    return result;
  }
  long long v26 = v22;
  long long v27 = v23;
  long long v28 = v24;
  uint64_t v29 = v25;
  if (!*(void *)(v10 + 16)
    || (unint64_t v14 = sub_21F75BD50(a3), (v15 & 1) == 0)
    || (unsigned int v16 = *(unsigned __int16 *)(*(void *)(v10 + 56) + 72 * v14 + 40), v16 >> 8 > 0xFE)
    || (v16 & 0xFF00) == 0x300)
  {
    sub_21F7CA08C((uint64_t)&v26, v6, a3, v12, v11);
  }
  double result = *(double *)&v26;
  long long v18 = v27;
  long long v19 = v28;
  *(_OWORD *)a5 = v26;
  *(_OWORD *)(a5 + 16) = v18;
  *(_OWORD *)(a5 + 32) = v19;
  *(void *)(a5 + 48) = v29;
  return result;
}

uint64_t sub_21F83738C(uint64_t *a1, void *a2)
{
  uint64_t v4 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = a2[4];
  uint64_t v80 = a2[7];
  uint64_t v81 = v6;
  uint64_t v79 = type metadata accessor for BoundingSectionSpecification();
  v67 = *(void (***)(char *, uint64_t, uint64_t))(v79 - 8);
  MEMORY[0x270FA5388](v79);
  uint64_t v7 = a2[3];
  v82 = a2;
  uint64_t v8 = a2[6];
  uint64_t v77 = v7;
  v78 = (char *)&v63 - v9;
  uint64_t v76 = v8;
  uint64_t v75 = type metadata accessor for BoundingSectionSpecification();
  v68 = *(void (***)(uint64_t, uint64_t, uint64_t))(v75 - 8);
  MEMORY[0x270FA5388](v75);
  v74 = (char *)&v63 - v10;
  uint64_t v83 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v11);
  v73 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  v87 = (char *)&v63 - v14;
  uint64_t v15 = sub_21FA26340();
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v63 - v16;
  uint64_t v18 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v4;
  uint64_t v85 = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(v85 - 8);
  MEMORY[0x270FA5388](v85);
  v84 = (char *)&v63 - v24;
  uint64_t v25 = a1[1];
  uint64_t v65 = *a1;
  uint64_t v26 = v65 + 888;
  swift_beginAccess();
  sub_21F83E678(v26, (uint64_t)v91);
  if (*(void *)(v25 + 16)
    && (unint64_t v27 = sub_21F75BD50(0), (v28 & 1) != 0)
    && (unsigned int v29 = *(unsigned __int16 *)(*(void *)(v25 + 56) + 72 * v27 + 40), v29 >> 8 <= 0xFE)
    && (v29 & 0xFF00) != 0x300
    && *(void *)(v25 + 16)
    && (unint64_t v30 = sub_21F75BD50(1u), (v31 & 1) != 0)
    && (unsigned int v32 = *(unsigned __int16 *)(*(void *)(v25 + 56) + 72 * v30 + 40), v32 >> 8 <= 0xFE)
    && (v32 & 0xFF00) != 0x300)
  {
    swift_retain();
  }
  else
  {
    uint64_t v63 = v23;
    uint64_t v64 = v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v86, v22);
    uint64_t v33 = v65;
    swift_retain();
    sub_21FA25D60();
    swift_beginAccess();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    sub_21FA26350();
    v70 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48);
    uint64_t v71 = v83 + 48;
    if (v70(v17, 1, AssociatedTypeWitness) != 1)
    {
      size_t v43 = *(void (**)(char *, char *, uint64_t))(v83 + 32);
      v68 += 2;
      v69 = v43;
      unsigned int v44 = (void (**)(uint64_t, char *, uint64_t))(v83 + 16);
      v83 += 32;
      v66 = (void (**)(char *, uint64_t))(v83 - 24);
      v67 += 2;
      uint64_t v46 = (uint64_t)v73;
      uint64_t v45 = (uint64_t)v74;
      v43(v87, v17, AssociatedTypeWitness);
      while (1)
      {
        uint64_t v47 = (uint64_t)v82;
        int v48 = v17;
        uint64_t v49 = v86;
        (*v68)(v45, v86 + *((int *)v82 + 17), v75);
        v50 = *v44;
        (*v44)(v46, v87, AssociatedTypeWitness);
        sub_21F9CC9C4(v45, v46, AssociatedTypeWitness, v77, v76, (uint64_t)v95);
        uint64_t v51 = *(int *)(v47 + 72);
        uint64_t v52 = v87;
        uint64_t v53 = v49 + v51;
        uint64_t v54 = (uint64_t)v78;
        (*v67)(v78, v53, v79);
        v50(v46, v52, AssociatedTypeWitness);
        sub_21F9CC9C4(v54, v46, AssociatedTypeWitness, v81, v80, (uint64_t)v96);
        if (*(unsigned char *)(v33 + 881) == 2)
        {
          sub_21F764AF8((uint64_t)v95, (uint64_t)v99);
          switch(sub_21F7607A0((uint64_t)v99))
          {
            case 1u:
              uint64_t v57 = sub_21F7607C4((uint64_t)v99);
              sub_21F76C9DC(v57, (uint64_t)v100, &qword_26AD455C8);
              goto LABEL_29;
            case 3u:
              sub_21F7607C4((uint64_t)v99);
              goto LABEL_26;
            case 4u:
            case 5u:
              sub_21F7607C4((uint64_t)v99);
              goto LABEL_29;
            default:
              uint64_t v55 = sub_21F7607C4((uint64_t)v99);
              if (*(char *)(v55 + 48) < 0) {
                goto LABEL_26;
              }
              if (*(unsigned char *)(v55 + 48))
              {
                if (*(unsigned char *)(v55 + 48) != 1)
                {
LABEL_26:
                  *(unsigned char *)(v33 + 881) = 0;
                  break;
                }
                char v56 = 1;
              }
              else
              {
                char v56 = 0;
              }
              sub_21F770E38(*(void *)(v55 + 32), *(void *)(v55 + 40), v56);
LABEL_29:
              sub_21F764AF8((uint64_t)v96, (uint64_t)v97);
              switch(sub_21F7607A0((uint64_t)v97))
              {
                case 1u:
                  uint64_t v62 = sub_21F7607C4((uint64_t)v97);
                  sub_21F76C9DC(v62, (uint64_t)&v98, &qword_26AD455C8);
                  goto LABEL_15;
                case 3u:
                  sub_21F7607C4((uint64_t)v97);
                  goto LABEL_36;
                case 4u:
                case 5u:
                  sub_21F7607C4((uint64_t)v97);
                  goto LABEL_15;
                default:
                  uint64_t v58 = sub_21F7607C4((uint64_t)v97);
                  int v59 = *(char *)(v58 + 48);
                  if (v59 < 0) {
                    goto LABEL_36;
                  }
                  uint64_t v60 = *(void *)(v58 + 40);
                  uint64_t v61 = *(void *)(v58 + 32);
                  if ((_BYTE)v59)
                  {
                    if (v59 == 1) {
                      sub_21F770E38(v61, v60, 1);
                    }
                    else {
LABEL_36:
                    }
                      *(unsigned char *)(v33 + 881) = 1;
                  }
                  else
                  {
                    sub_21F770E38(v61, v60, 0);
                  }
                  break;
              }
              break;
          }
        }
LABEL_15:
        sub_21F760AD8((uint64_t)v95, 0);
        sub_21F760AD8((uint64_t)v96, 1);
        sub_21F83F3E8((uint64_t)v96);
        sub_21F83F3E8((uint64_t)v95);
        (*v66)(v52, AssociatedTypeWitness);
        sub_21FA26350();
        uint64_t v17 = v48;
        if (v70(v48, 1, AssociatedTypeWitness) == 1) {
          break;
        }
        v69(v52, v48, AssociatedTypeWitness);
      }
    }
    (*(void (**)(char *, uint64_t))(v63 + 8))(v84, v85);
    uint64_t v25 = v64;
  }
  uint64_t v34 = (uint64_t)v82;
  uint64_t v35 = *((int *)v82 + 19);
  uint64_t v36 = v86;
  uint64_t v37 = *(void *)(v86 + v35);
  uint64_t v38 = v65;
  uint64_t v88 = v65;
  uint64_t v89 = v25;
  sub_21F8371F0((uint64_t)&v88, (uint64_t)v91, 4u, (uint64_t)v82, (uint64_t)v90);
  swift_beginAccess();
  sub_21F799B78((uint64_t)v90, v37 + 16, qword_26AD44558);
  swift_endAccess();
  uint64_t v39 = *(void *)(v36 + v35);
  uint64_t v88 = v38;
  uint64_t v89 = v25;
  sub_21F8371F0((uint64_t)&v88, (uint64_t)&v92, 7u, v34, (uint64_t)v90);
  swift_beginAccess();
  sub_21F799B78((uint64_t)v90, v39 + 72, qword_26AD44558);
  swift_endAccess();
  uint64_t v40 = *(void *)(v36 + v35);
  uint64_t v88 = v38;
  uint64_t v89 = v25;
  sub_21F8371F0((uint64_t)&v88, (uint64_t)&v93, 5u, v34, (uint64_t)v90);
  swift_beginAccess();
  sub_21F799B78((uint64_t)v90, v40 + 128, qword_26AD44558);
  swift_endAccess();
  uint64_t v41 = *(void *)(v36 + v35);
  uint64_t v88 = v38;
  uint64_t v89 = v25;
  sub_21F8371F0((uint64_t)&v88, (uint64_t)&v94, 6u, v34, (uint64_t)v90);
  swift_release();
  sub_21F74BCC8((uint64_t)v91);
  swift_beginAccess();
  sub_21F799B78((uint64_t)v90, v41 + 184, qword_26AD44558);
  return swift_endAccess();
}

int *sub_21F837D4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v12 = type metadata accessor for XYRenderer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(a6, a1, v12);
  double result = (int *)type metadata accessor for XYRenderer.ResolvedKeyframe();
  *(double *)(a6 + result[17]) = a7;
  *(void *)(a6 + result[18]) = a2;
  *(void *)(a6 + result[19]) = a3;
  uint64_t v14 = (void *)(a6 + result[20]);
  *uint64_t v14 = a4;
  v14[1] = a5;
  return result;
}

uint64_t sub_21F837E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v259 = a8;
  uint64_t v251 = a6;
  uint64_t v282 = a4;
  uint64_t v270 = a3;
  uint64_t v244 = a2;
  uint64_t v262 = a1;
  uint64_t v261 = a9;
  uint64_t v11 = *((void *)a7 + 5);
  uint64_t v12 = *(void *)(*(void *)(v11 + 8) + 8);
  unint64_t v13 = *((void *)a7 + 2);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v230 = *(void (***)(void, uint64_t, uint64_t))(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  v224 = (char *)&v216 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  v271 = (char *)&v216 - v16;
  uint64_t v291 = swift_getAssociatedTypeWitness();
  uint64_t v253 = *(void *)(v291 - 8);
  MEMORY[0x270FA5388](v291);
  v223 = (char *)&v216 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  v295 = (char *)&v216 - v19;
  uint64_t v216 = v20;
  MEMORY[0x270FA5388](v21);
  v264 = (char *)&v216 - v22;
  v260 = (void (**)(char *, uint64_t *, uint64_t))sub_21FA24970();
  uint64_t v257 = (uint64_t)*(v260 - 1);
  MEMORY[0x270FA5388](v260);
  v255 = (char *)&v216 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v246 = sub_21FA24890();
  unint64_t v263 = *(void *)(v246 - 8);
  MEMORY[0x270FA5388](v246);
  uint64_t v240 = (uint64_t)&v216 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v243 = (uint64_t)&v216 - v26;
  MEMORY[0x270FA5388](v27);
  v258 = (void (**)(char *, unint64_t, char *))((char *)&v216 - v28);
  uint64_t v250 = type metadata accessor for SgShapeStyle();
  MEMORY[0x270FA5388](v250);
  uint64_t v256 = (uint64_t)&v216 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v30 = (void (**)(char *, char *))*((void *)a7 + 3);
  double v31 = a7[4];
  double v32 = a7[6];
  unint64_t v33 = *((void *)a7 + 7);
  unint64_t v319 = v13;
  v281 = v30;
  v320 = v30;
  double v279 = v31;
  double v280 = v32;
  double v321 = v31;
  v273 = (void (**)(uint64_t))v11;
  uint64_t v322 = v11;
  *(double *)v323 = v32;
  unint64_t v276 = v33;
  v323[1] = v33;
  uint64_t v34 = (char *)type metadata accessor for XYRenderer.ResolvedKeyframe();
  uint64_t v35 = sub_21FA26340();
  MEMORY[0x270FA5388](v35 - 8);
  *(void *)&double v265 = (char *)&v216 - v36;
  v298 = v34;
  v275 = (char *)*((void *)v34 - 1);
  MEMORY[0x270FA5388](v37);
  v297 = (char *)&v216 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v39);
  v296 = (char *)&v216 - v40;
  uint64_t v217 = v41;
  MEMORY[0x270FA5388](v42);
  v225 = (char *)&v216 - v43;
  uint64_t v293 = v12;
  uint64_t v289 = swift_getAssociatedTypeWitness();
  uint64_t v218 = *(void *)(v289 - 8);
  MEMORY[0x270FA5388](v289);
  v288 = (char *)&v216 - v44;
  v245 = a7;
  uint64_t v45 = sub_21FA26340();
  uint64_t v268 = *(void *)(v45 - 8);
  uint64_t v269 = v45;
  MEMORY[0x270FA5388](v45);
  uint64_t v278 = (uint64_t)&v216 - v46;
  unint64_t v294 = v13;
  uint64_t v222 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v47);
  uint64_t v277 = (uint64_t)&v216 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v49);
  v229 = (char *)&v216 - v50;
  uint64_t v51 = type metadata accessor for SgVectorized(0);
  MEMORY[0x270FA5388](v51);
  uint64_t v53 = (char *)&v216 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for RulesRenderer(0);
  MEMORY[0x270FA5388](v54 - 8);
  uint64_t v290 = (uint64_t)&v216 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for PointsRenderer(0);
  MEMORY[0x270FA5388](v56 - 8);
  unint64_t v287 = (unint64_t)&v216 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for RectanglesRenderer(0);
  MEMORY[0x270FA5388](v58 - 8);
  uint64_t v286 = (uint64_t)&v216 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
  MEMORY[0x270FA5388](v60);
  uint64_t v62 = (char *)&v216 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for AnyVectorizedRenderer(0) - 8;
  MEMORY[0x270FA5388](v63);
  v67 = (char *)&v216 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v319 = MEMORY[0x263F8EE78];
  uint64_t v68 = *(void *)(a5 + 16);
  if (v68)
  {
    uint64_t v69 = a5 + ((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80));
    uint64_t v70 = *(void *)(v65 + 72);
    v285 = v53;
    v284 = v53 + 8;
    uint64_t v274 = a5;
    swift_bridgeObjectRetain();
    uint64_t v283 = v51;
    uint64_t v71 = (uint64_t)v62;
    while (2)
    {
      sub_21F7609A0(v69, (uint64_t)v67, type metadata accessor for AnyVectorizedRenderer);
      sub_21F7609A0((uint64_t)v67, v71, type metadata accessor for AnyVectorizedRenderer.MarkRenderer);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v72 = v287;
          sub_21F83F0AC(v71, v287, type metadata accessor for PointsRenderer);
          uint64_t v73 = *(void *)(v72 + 48);
          swift_retain();
          v74 = type metadata accessor for PointsRenderer;
          goto LABEL_11;
        case 2u:
          uint64_t v72 = v290;
          sub_21F83F0AC(v71, v290, type metadata accessor for RulesRenderer);
          uint64_t v73 = *(void *)(v72 + 48);
          swift_retain();
          v74 = type metadata accessor for RulesRenderer;
          goto LABEL_11;
        case 3u:
          uint64_t v75 = swift_projectBox();
          uint64_t v76 = (uint64_t)v285;
          sub_21F7609A0(v75, (uint64_t)v285, type metadata accessor for SgVectorized);
          uint64_t v77 = *(void *)&v284[*(int *)(v283 + 36)];
          swift_retain();
          uint64_t v78 = v76;
          uint64_t v71 = (uint64_t)v62;
          sub_21F83E378(v78, type metadata accessor for SgVectorized);
          swift_release();
          if (!v77) {
            goto LABEL_3;
          }
          goto LABEL_12;
        default:
          uint64_t v72 = v286;
          sub_21F83F0AC(v71, v286, type metadata accessor for RectanglesRenderer);
          uint64_t v73 = *(void *)(v72 + 48);
          swift_retain();
          v74 = type metadata accessor for RectanglesRenderer;
LABEL_11:
          sub_21F83E378(v72, v74);
          if (v73)
          {
LABEL_12:
            uint64_t v79 = sub_21F83E378((uint64_t)v67, type metadata accessor for AnyVectorizedRenderer);
            MEMORY[0x223C55260](v79);
            if (*(void *)((v319 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v319 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              sub_21FA25E90();
            }
            sub_21FA25EF0();
            sub_21FA25E60();
            uint64_t v71 = (uint64_t)v62;
          }
          else
          {
LABEL_3:
            sub_21F83E378((uint64_t)v67, type metadata accessor for AnyVectorizedRenderer);
          }
          v69 += v70;
          if (--v68) {
            continue;
          }
          a5 = v274;
          uint64_t v64 = swift_bridgeObjectRelease();
          unint64_t v287 = v319;
          break;
      }
      break;
    }
  }
  else
  {
    unint64_t v287 = MEMORY[0x263F8EE78];
  }
  unint64_t v319 = a5;
  MEMORY[0x270FA5388](v64);
  uint64_t v80 = v281;
  *(&v216 - 8) = v294;
  *(&v216 - 7) = (uint64_t)v80;
  uint64_t v81 = v259;
  *((double *)&v216 - 6) = v279;
  *(&v216 - 5) = v81;
  double v82 = v280;
  *(&v216 - 4) = (uint64_t)v273;
  *((double *)&v216 - 3) = v82;
  uint64_t v214 = v276;
  uint64_t v215 = v261;
  sub_21F76CA40(&qword_267EE7B10);
  sub_21F83F548();
  uint64_t v83 = (uint64_t)v245;
  v84 = 0;
  uint64_t v85 = sub_21FA25D80();
  uint64_t v86 = *(void *)(v282 + 16);
  if (v86 != MEMORY[0x223C55340](v85, v83)) {
    goto LABEL_88;
  }
  if (v287 >> 62) {
    goto LABEL_87;
  }
  if (*(void *)((v287 & 0xFFFFFFFFFFFFFF8) + 0x10) != v86)
  {
LABEL_88:
    LODWORD(v215) = 0;
    uint64_t v214 = 362;
    goto LABEL_93;
  }
LABEL_20:
  v285 = v84;
  uint64_t v87 = v85;
  unint64_t v319 = v85;
  uint64_t v88 = sub_21FA25F30();
  swift_getWitnessTable();
  uint64_t v89 = v278;
  sub_21FA25BE0();
  uint64_t v90 = *(void *)(v83 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v89, 1, v83) == 1) {
    goto LABEL_92;
  }
  uint64_t v91 = v222;
  uint64_t v92 = v277;
  unint64_t v93 = v294;
  (*(void (**)(uint64_t, uint64_t, unint64_t))(v222 + 16))(v277, v89, v294);
  (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v89, v83);
  (*(void (**)(char *, uint64_t, unint64_t))(v91 + 32))(v229, v92, v93);
  sub_21FA260E0();
  uint64_t v286 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v254 = sub_21FA25F50();
  uint64_t v94 = type metadata accessor for ChartContentRenderContext.Environment(0);
  sub_21F76C978(v270 + *(int *)(v94 + 112), (uint64_t)&v305, &qword_267EE7B20);
  uint64_t v283 = v94;
  if (v308)
  {
    sub_21F817950(&v319);
    sub_21F7D2934((uint64_t)&v305);
  }
  else
  {
    sub_21F76CA84((uint64_t)&v305, &qword_267EE7B20);
    unint64_t v319 = 0;
    v320 = 0;
    double v321 = 0.0;
    uint64_t v322 = 2;
    bzero(v323, 0x2A9uLL);
  }
  uint64_t v95 = type metadata accessor for TypedVectorizedProperties();
  uint64_t v96 = sub_21FA26340();
  uint64_t v97 = *(void *)(v96 - 8);
  uint64_t v98 = *(void (**)(uint64_t *, unint64_t *, uint64_t))(v97 + 16);
  v98(&v305, &v319, v96);
  if (v308 == 2)
  {
    (*(void (**)(uint64_t *, uint64_t))(v97 + 8))(&v305, v96);
    uint64_t v232 = 0;
    uint64_t v233 = 0;
    uint64_t v231 = 0;
    uint64_t v227 = 0;
    uint64_t v228 = 0;
    int v226 = 0;
    uint64_t v252 = 1;
  }
  else
  {
    uint64_t v232 = v313;
    uint64_t v233 = v312;
    uint64_t v231 = v314;
    uint64_t v252 = v315;
    uint64_t v227 = v317;
    uint64_t v228 = v316;
    int v226 = v318;
    sub_21F83F82C(v312, v313, v314, v315, v316, v317, v318);
    (*(void (**)(uint64_t *, uint64_t))(*(void *)(v95 - 8) + 8))(&v305, v95);
  }
  v98(&v305, &v319, v96);
  uint64_t v290 = v96;
  uint64_t v221 = v97;
  if (v308 == 2)
  {
    (*(void (**)(uint64_t *, uint64_t))(v97 + 8))(&v305, v96);
    uint64_t v268 = 0;
    uint64_t v269 = 0;
    uint64_t v277 = 0;
    uint64_t v278 = 0;
    uint64_t v267 = 0;
    int v266 = 0;
    uint64_t v274 = 1;
  }
  else
  {
    uint64_t v268 = v307;
    uint64_t v269 = v305;
    uint64_t v277 = v310;
    uint64_t v278 = v306;
    uint64_t v274 = v308;
    uint64_t v267 = v309;
    int v266 = v311;
    sub_21F83F7D0(v305, v306, v307, v308, v309, v310, v311);
    (*(void (**)(uint64_t *, uint64_t))(*(void *)(v95 - 8) + 8))(&v305, v95);
  }
  uint64_t v305 = v87;
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x223C551D0](&v304, v88, WitnessTable);
  uint64_t v100 = swift_bridgeObjectRelease();
  uint64_t v303 = v304;
  MEMORY[0x270FA5388](v100);
  v101 = v281;
  *(&v216 - 12) = v294;
  *(&v216 - 11) = (uint64_t)v101;
  double v102 = v280;
  uint64_t v103 = v259;
  *((double *)&v216 - 10) = v279;
  *(&v216 - 9) = v103;
  v104 = v272;
  *(&v216 - 8) = (uint64_t)v273;
  *((double *)&v216 - 7) = v102;
  uint64_t v105 = v261;
  *(&v216 - 6) = v276;
  *(&v216 - 5) = v105;
  *(&v216 - 4) = v287;
  *(&v216 - 3) = (uint64_t)v104;
  MEMORY[0x270FA5388](v101);
  *(&v216 - 10) = v107;
  *(&v216 - 9) = v106;
  *(&v216 - 8) = v108;
  *(&v216 - 7) = v109;
  *(&v216 - 6) = v111;
  *(&v216 - 5) = v110;
  *(&v216 - 4) = v112;
  *(&v216 - 3) = v113;
  uint64_t v214 = (uint64_t)sub_21F83F5A4;
  uint64_t v215 = v114;
  uint64_t v115 = sub_21FA26770();
  uint64_t v116 = swift_getWitnessTable();
  v117 = v298;
  uint64_t v119 = sub_21F83A86C((void (*)(char *, char *))sub_21F83F5E4, (uint64_t)(&v216 - 12), v115, v298, MEMORY[0x263F8E628], v116, MEMORY[0x263F8E658], v118);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v287 = v119;
  uint64_t v305 = v119;
  sub_21FA25F30();
  swift_getWitnessTable();
  uint64_t v89 = *(void *)&v265;
  sub_21FA25BE0();
  v120 = v275;
  if ((*((unsigned int (**)(uint64_t, uint64_t, char *))v275 + 6))(v89, 1, v117) == 1) {
    goto LABEL_91;
  }
  unint64_t v121 = v263;
  v122 = (char *)*((void *)v120 + 4);
  v285 = v120 + 32;
  v284 = v122;
  ((void (*)(char *, uint64_t, char *))v122)(v225, v89, v298);
  sub_21FA248A0();
  uint64_t v220 = v123;
  sub_21FA24930();
  int v124 = sub_21FA24900();
  double v265 = *(double *)(v270 + *(int *)(v283 + 52));
  sub_21F76C978(v270, (uint64_t)&v305, &qword_26AD48C60);
  int v219 = v124;
  if (v310 == 255)
  {
    v301[3] = MEMORY[0x263F18DB0];
    v301[4] = MEMORY[0x263F18DA8];
    char v302 = 1;
    sub_21F76CA84((uint64_t)&v305, &qword_26AD48C60);
  }
  else
  {
    sub_21F771AD8((uint64_t)&v305, (uint64_t)v301);
  }
  uint64_t v125 = v256;
  unint64_t v126 = v287;
  sub_21F772024((uint64_t)v301, v256);
  uint64_t v127 = v250;
  uint64_t v128 = v125 + *(int *)(v250 + 32);
  uint64_t v129 = sub_21FA25910();
  uint64_t v130 = *(void *)(v129 - 8);
  v131 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v130 + 56);
  uint64_t v238 = v129;
  uint64_t v239 = v128;
  uint64_t v236 = v130 + 56;
  v237 = v131;
  ((void (*)(uint64_t, uint64_t, uint64_t))v131)(v128, 1, 1);
  *(unsigned char *)(v125 + 41) = 0;
  *(_OWORD *)(v125 + 48) = 0u;
  v235 = (_OWORD *)(v125 + 48);
  *(_OWORD *)(v125 + 64) = 0u;
  *(void *)(v125 + 80) = 0;
  *(double *)(v125 + 88) = v265;
  uint64_t v132 = v125 + *(int *)(v127 + 36);
  *(void *)uint64_t v132 = 0;
  v234 = (void *)v132;
  *(_WORD *)(v132 + 8) = 0;
  memset(v324, 0, 32);
  v324[32] = 1;
  swift_retain();
  uint64_t v133 = v243;
  sub_21F7C29C0(v125, (uint64_t)v324, v243);
  sub_21FA248D0();
  swift_release();
  v134 = *(void (**)(void (**)(char *, unint64_t, char *), uint64_t))(v121 + 8);
  uint64_t v85 = v121 + 8;
  v241 = v134;
  uint64_t v242 = v85;
  v134((void (**)(char *, unint64_t, char *))v133, v246);
  type metadata accessor for RenderParams(0);
  uint64_t v135 = v257;
  uint64_t v89 = (uint64_t)v255;
  v136 = (char **)v260;
  (*(void (**)(char *, void, char **))(v257 + 104))(v255, *MEMORY[0x263F18DD0], (char **)v260);
  char v137 = sub_21FA24960();
  (*(void (**)(uint64_t, char **))(v135 + 8))(v89, v136);
  if (v137) {
    sub_21FA248E0();
  }
  uint64_t v138 = v254;
  uint64_t v139 = MEMORY[0x223C55360](v254, v291);
  v140 = v258;
  uint64_t v141 = v290;
  if (v139)
  {
    unint64_t v142 = 0;
    v249 = (uint64_t *)&v225[*((int *)v298 + 20)];
    v247 = *(void (**)(uint64_t, char *, uint64_t, void (**)(char *, unint64_t, char *), uint64_t, uint64_t, double, double, double, double))(v261 + 8);
    uint64_t v248 = v261 + 8;
    v260 = (void (**)(char *, uint64_t *, uint64_t))(v253 + 16);
    uint64_t v250 = v253 + 32;
    uint64_t v283 = (uint64_t)(v275 + 16);
    uint64_t v282 = v218 + 8;
    v281 = (void (**)(char *, char *))(v275 + 8);
    v272 = (void (**)(uint64_t, uint64_t))(v230 + 1);
    v273 = (void (**)(uint64_t))(v230 + 2);
    uint64_t v257 = v253 + 8;
    v230 = (void (**)(void, uint64_t, uint64_t))(v263 + 32);
    do
    {
      char v168 = sub_21FA25EE0();
      sub_21FA25E80();
      unint64_t v276 = v142;
      if (v168)
      {
        unint64_t v169 = v138
             + ((*(unsigned __int8 *)(v253 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v253 + 80))
             + *(void *)(v253 + 72) * v142;
        v170 = *(void (**)(char *, uint64_t *, uint64_t))(v253 + 16);
        v170(v264, (uint64_t *)v169, v291);
        v140 = (void (**)(char *, unint64_t, char *))v275;
        unint64_t v171 = v142 + 1;
        if (__OFADD__(v142, 1)) {
          goto LABEL_78;
        }
      }
      else
      {
        uint64_t v211 = sub_21FA26560();
        v140 = (void (**)(char *, unint64_t, char *))v275;
        if (v216 != 8) {
          goto LABEL_90;
        }
        uint64_t v305 = v211;
        v170 = *v260;
        (*v260)(v264, &v305, v291);
        swift_unknownObjectRelease();
        unint64_t v171 = v276 + 1;
        if (__OFADD__(v276, 1))
        {
LABEL_78:
          __break(1u);
          break;
        }
      }
      v255 = (char *)v170;
      (*(void (**)(char *, char *, uint64_t))v250)(v295, v264, v291);
      double v172 = 0.0;
      if (v274 == 1) {
        double v173 = v265;
      }
      else {
        double v173 = 0.0;
      }
      uint64_t v174 = swift_bridgeObjectRetain();
      uint64_t v175 = MEMORY[0x223C55360](v174, v298);
      unint64_t v263 = v171;
      if (v175)
      {
        uint64_t v86 = 0;
        double v176 = 0.0;
        double v177 = 0.0;
        double v178 = 0.0;
        while (1)
        {
          v84 = v298;
          char v179 = sub_21FA25EE0();
          sub_21FA25E80();
          if (v179)
          {
            v140[2](v296, v126+ ((*((unsigned __int8 *)v140 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v140 + 80))+ (void)v140[9] * v86, v298);
            uint64_t v89 = v86 + 1;
            if (__OFADD__(v86, 1)) {
              goto LABEL_80;
            }
          }
          else
          {
            uint64_t v206 = sub_21FA26560();
            if (v217 != 8)
            {
              __break(1u);
LABEL_90:
              __break(1u);
LABEL_91:
              __break(1u);
LABEL_92:
              (*(void (**)(uint64_t, uint64_t))(v268 + 8))(v89, v269);
              LODWORD(v215) = 0;
              uint64_t v214 = 363;
LABEL_93:
              sub_21FA266E0();
              __break(1u);
              JUMPOUT(0x21F839E70);
            }
            uint64_t v305 = v206;
            (*(void (**)(char *, uint64_t *, char *))v283)(v296, &v305, v298);
            swift_unknownObjectRelease();
            uint64_t v89 = v86 + 1;
            if (__OFADD__(v86, 1))
            {
LABEL_80:
              __break(1u);
LABEL_81:
              __break(1u);
LABEL_82:
              __break(1u);
LABEL_83:
              __break(1u);
LABEL_84:
              __break(1u);
LABEL_85:
              __break(1u);
LABEL_86:
              __break(1u);
LABEL_87:
              swift_bridgeObjectRetain();
              uint64_t v213 = sub_21FA26790();
              swift_bridgeObjectRelease();
              if (v213 != v86) {
                goto LABEL_88;
              }
              goto LABEL_20;
            }
          }
          v180 = v297;
          v84 = v298;
          ((void (*)(char *, char *, char *))v284)(v297, v296, v298);
          v181 = v288;
          uint64_t v83 = v293;
          sub_21FA260E0();
          swift_getAssociatedConformanceWitness();
          uint64_t v85 = v289;
          char v182 = sub_21FA25DF0();
          (*(void (**)(char *, uint64_t))v282)(v181, v85);
          if (v182)
          {
            uint64_t v183 = *(void *)&v180[*((int *)v84 + 18)];
            unint64_t v184 = *(void *)(v183 + 16);
            uint64_t v185 = (uint64_t)v271;
            if (!v184) {
              goto LABEL_81;
            }
            uint64_t v186 = *(void *)&v297[*((int *)v298 + 19)];
            unint64_t v187 = *(void *)(v186 + 16);
            if (!v187) {
              goto LABEL_82;
            }
            double v188 = *(double *)&v297[*((int *)v298 + 17)];
            uint64_t v189 = v183 + 16 * (v276 % v184);
            uint64_t v190 = *(uint64_t *)(v189 + 32);
            double v191 = *(double *)(v189 + 40);
            uint64_t v192 = v186 + 16 * (v276 % v187);
            double v193 = *(double *)(v192 + 40);
            double v279 = *(double *)(v192 + 32);
            double v280 = v193;
            v194 = (void (*)(uint64_t *, void))sub_21FA261F0();
            (*v273)(v185);
            v194(&v305, 0);
            uint64_t v195 = v274;
            if (v274 != 1)
            {
              uint64_t v85 = v268;
              uint64_t v196 = v269;
              uint64_t v305 = v269;
              uint64_t v197 = v277;
              uint64_t v306 = v278;
              uint64_t v307 = v268;
              uint64_t v308 = v274;
              uint64_t v83 = v267;
              uint64_t v309 = v267;
              uint64_t v310 = v277;
              char v198 = v266;
              unsigned __int8 v311 = v266;
              sub_21F7BB3B4(v269, v278, v268, v274);
              sub_21F83F7B0(v83, v197, v198);
              uint64_t v199 = type metadata accessor for VisualMapper();
              sub_21F816810(v185, v199, (uint64_t)v299);
              uint64_t v270 = v190;
              double v200 = v191;
              double v201 = v178;
              double v202 = v177;
              double v203 = v172;
              double v204 = v176;
              double v205 = v188 * v299[0];
              sub_21F7F42EC(v196, v278, v85, v195);
              sub_21F83F6FC(v83, v277, v198);
              double v173 = v173 + v205;
              double v176 = v204;
              double v172 = v203;
              double v177 = v202;
              double v178 = v201;
              double v191 = v200;
              uint64_t v190 = v270;
            }
            uint64_t v141 = v290;
            unint64_t v126 = v287;
            double v178 = v178 + v188 * *(double *)&v190;
            double v177 = v177 + v188 * v279;
            double v176 = v176 + v188 * v191;
            double v172 = v172 + v188 * v280;
            (*v272)(v185, AssociatedTypeWitness);
            (*v281)(v297, v298);
            v140 = (void (**)(char *, unint64_t, char *))v275;
          }
          else
          {
            (*v281)(v180, v84);
            uint64_t v141 = v290;
            unint64_t v126 = v287;
          }
          ++v86;
          if (v89 == MEMORY[0x223C55360](v126, v298)) {
            goto LABEL_64;
          }
        }
      }
      double v176 = 0.0;
      double v177 = 0.0;
      double v178 = 0.0;
LABEL_64:
      swift_bridgeObjectRelease();
      uint64_t v207 = *v249;
      if (*v249)
      {
        uint64_t v86 = v249[1];
        v84 = (char *)v276;
        if (v276 >= *(void *)(v86 + 16)) {
          goto LABEL_83;
        }
        if (*(uint64_t *)(v86 + 32 + 8 * v276) > 0)
        {
LABEL_73:
          uint64_t v165 = v262;
          v140 = v258;
          uint64_t v89 = v256;
          if (v173 == v265) {
            goto LABEL_41;
          }
          goto LABEL_40;
        }
        uint64_t v308 = MEMORY[0x263F188A8];
        uint64_t v309 = MEMORY[0x263F18898];
        unint64_t v208 = *(void *)(v86 + 32 + 8 * v276);
        if ((v208 & 0x8000000000000000) != 0)
        {
          BOOL v209 = __OFSUB__(0, v208);
          unint64_t v208 = -(uint64_t)v208;
          if (v209) {
            goto LABEL_86;
          }
          if ((v208 & 0x8000000000000000) != 0) {
            goto LABEL_84;
          }
        }
        if (v208 >= *(void *)(v207 + 16)) {
          goto LABEL_85;
        }
        uint64_t v210 = *(void *)(v207 + 8 * v208 + 32);
        sub_21F75F008(v207);
        swift_retain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v305 = v210;
        sub_21F7D25BC((uint64_t)v301);
        LOBYTE(v310) = 1;
        v155 = &v305;
      }
      else
      {
        v84 = (char *)v276;
        if (v252 == 1) {
          goto LABEL_73;
        }
        uint64_t v143 = v232;
        uint64_t v144 = v233;
        uint64_t v305 = v233;
        uint64_t v306 = v232;
        char v145 = v231;
        uint64_t v307 = v231;
        uint64_t v146 = v252;
        uint64_t v308 = v252;
        uint64_t v147 = v227;
        uint64_t v148 = v228;
        uint64_t v309 = v228;
        uint64_t v310 = v227;
        unsigned __int8 v149 = v226;
        unsigned __int8 v311 = v226;
        uint64_t v83 = (uint64_t)v223;
        ((void (*)(char *, char *, uint64_t))v255)(v223, v295, v291);
        sub_21F7BB3B4(v144, v143, v145, v146);
        uint64_t v150 = v147;
        LOBYTE(v144) = v149;
        sub_21F83F794(v148, v147, v149);
        v151 = (void (*)(double *, void))sub_21FA261F0();
        uint64_t v152 = (uint64_t)v224;
        uint64_t v153 = AssociatedTypeWitness;
        (*v273)((uint64_t)v224);
        v151(v299, 0);
        (*(void (**)(uint64_t, uint64_t))v257)(v83, v291);
        *(void *)&v299[3] = MEMORY[0x263F188A8];
        *(void *)&v299[4] = MEMORY[0x263F18898];
        uint64_t v154 = type metadata accessor for VisualMapper();
        sub_21F816810(v152, v154, (uint64_t)v299);
        (*v272)(v152, v153);
        sub_21F7D25BC((uint64_t)v301);
        sub_21F7F42EC(v233, v232, v231, v252);
        sub_21F83F778(v148, v150, v144);
        char v300 = 1;
        v155 = (uint64_t *)v299;
      }
      sub_21F771AD8((uint64_t)v155, (uint64_t)v301);
      v140 = v258;
      uint64_t v89 = v256;
LABEL_40:
      sub_21F83E378(v89, (uint64_t (*)(void))type metadata accessor for SgShapeStyle);
      sub_21F772024((uint64_t)v301, v89);
      v237(v239, 1, 1, v238);
      *(unsigned char *)(v89 + 41) = 0;
      v156 = v235;
      _OWORD *v235 = 0u;
      v156[1] = 0u;
      *((void *)v156 + 4) = 0;
      *(double *)(v89 + 88) = v173;
      v157 = v234;
      void *v234 = 0;
      *((_WORD *)v157 + 4) = 0;
      swift_retain();
      v158 = v140;
      uint64_t v159 = v240;
      sub_21F7C29C0(v89, (uint64_t)v324, v240);
      uint64_t v85 = v243;
      sub_21FA248D0();
      swift_release();
      uint64_t v160 = v159;
      uint64_t v161 = v246;
      v162 = v241;
      v241((void (**)(char *, unint64_t, char *))v160, v246);
      v162(v158, v161);
      v140 = v158;
      v84 = (char *)v276;
      v163 = v158;
      uint64_t v141 = v290;
      uint64_t v164 = v161;
      uint64_t v165 = v262;
      (*v230)(v163, v85, v164);
      double v265 = v173;
LABEL_41:
      v247(v165, v84, v89, v140, v259, v261, v178, v176, v177, v172);
      uint64_t v166 = v291;
      (*(void (**)(char *, uint64_t))v257)(v295, v291);
      uint64_t v138 = v254;
      uint64_t v167 = MEMORY[0x223C55360](v254, v166);
      unint64_t v142 = v263;
    }
    while (v263 != v167);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21FA248B0();
  sub_21FA24940();
  sub_21FA24910();
  sub_21F83F6A0(v269, v278, v268, v274, v267, v277, v266);
  sub_21F83F71C(v233, v232, v231, v252, v228, v227, v226);
  v241(v140, v246);
  sub_21F83E378(v256, (uint64_t (*)(void))type metadata accessor for SgShapeStyle);
  (*((void (**)(char *, char *))v275 + 1))(v225, v298);
  (*(void (**)(unint64_t *, uint64_t))(v221 + 8))(&v319, v141);
  (*(void (**)(char *, unint64_t))(v222 + 8))(v229, v294);
  return sub_21F7D25BC((uint64_t)v301);
}

uint64_t sub_21F839E80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v43 = a6;
  uint64_t v35 = a4;
  uint64_t v36 = a5;
  uint64_t v33 = a2;
  uint64_t v34 = a3;
  uint64_t v11 = type metadata accessor for RulesRenderer(0);
  MEMORY[0x270FA5388](v11 - 8);
  unint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for PointsRenderer(0);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for RectanglesRenderer(0);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F7609A0(a1, (uint64_t)v22, type metadata accessor for AnyVectorizedRenderer.MarkRenderer);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_21F83F0AC((uint64_t)v22, (uint64_t)v16, type metadata accessor for PointsRenderer);
      sub_21F77E098((uint64_t)v16, (uint64_t)&v37);
      uint64_t v23 = type metadata accessor for PointsRenderer;
      uint64_t v24 = (uint64_t)v16;
      break;
    case 2u:
      sub_21F83F0AC((uint64_t)v22, (uint64_t)v13, type metadata accessor for RulesRenderer);
      sub_21F77E098((uint64_t)v13, (uint64_t)&v37);
      uint64_t v23 = type metadata accessor for RulesRenderer;
      uint64_t v24 = (uint64_t)v13;
      break;
    case 3u:
      sub_21FA266E0();
      __break(1u);
      JUMPOUT(0x21F83A210);
    default:
      sub_21F83F0AC((uint64_t)v22, (uint64_t)v19, type metadata accessor for RectanglesRenderer);
      sub_21F77E098((uint64_t)v19, (uint64_t)&v37);
      uint64_t v23 = type metadata accessor for RectanglesRenderer;
      uint64_t v24 = (uint64_t)v19;
      break;
  }
  sub_21F83E378(v24, v23);
  uint64_t v25 = v43;
  uint64_t v27 = v35;
  uint64_t v26 = v36;
  uint64_t v28 = v34;
  sub_21F77F300(&v37, (uint64_t)v42);
  sub_21F76CA40(qword_267EE7B28);
  *(void *)&long long v37 = v33;
  *((void *)&v37 + 1) = v28;
  uint64_t v38 = v27;
  uint64_t v39 = v26;
  uint64_t v40 = v25;
  uint64_t v41 = a7;
  uint64_t v29 = type metadata accessor for XYRenderer();
  int v30 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(a8, v30 ^ 1u, 1, v29);
}

void sub_21F83A220(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, long long a12)
{
  uint64_t v65 = a5;
  uint64_t v63 = a4;
  *(void *)&long long v75 = a6;
  *((void *)&v75 + 1) = a7;
  uint64_t v70 = a12;
  uint64_t v71 = a7;
  uint64_t v67 = *((void *)&a12 + 1);
  uint64_t v68 = a8;
  *(void *)&long long v76 = a8;
  *((void *)&v76 + 1) = a11;
  long long v77 = a12;
  uint64_t v72 = type metadata accessor for XYRenderer();
  uint64_t v17 = *(void *)(v72 - 8);
  MEMORY[0x270FA5388](v72);
  uint64_t v69 = (uint64_t)v62 - v18;
  uint64_t v19 = *(void *)(a6 - 8);
  __n128 v21 = MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = a9;
  if ((a3 & 0xC000000000000001) == 0)
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a1)
    {
      uint64_t v24 = *(double **)(a3 + 8 * a1 + 32);
      swift_retain();
      goto LABEL_5;
    }
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v24 = (double *)MEMORY[0x223C559B0](a1, a3, v21);
LABEL_5:
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v23, a2, a6);
  uint64_t v66 = a11;
  swift_getAssociatedTypeWitness();
  uint64_t v25 = sub_21FA25F50();
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = (long long *)((char *)v24 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale);
  int v29 = *((unsigned __int8 *)v24 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 96);
  if (v29 != 255)
  {
    long long v30 = v28[1];
    long long v31 = v28[2];
    long long v32 = v28[3];
    long long v33 = v28[4];
    long long v34 = v28[5];
    long long v75 = *v28;
    long long v76 = v30;
    long long v77 = v31;
    long long v78 = v32;
    long long v79 = v33;
    long long v80 = v34;
    char v81 = v29 & 1;
    sub_21F83A718((uint64_t)&v75, v74);
    uint64_t v27 = v74[0];
    uint64_t v26 = v74[1];
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v69, a2, v72);
  if ((a1 & 0x8000000000000000) != 0) {
    goto LABEL_13;
  }
  if (*(void *)(v65 + 16) > a1)
  {
    double v35 = *(double *)(v65 + 8 * a1 + 32);
    v62[1] = a2;
    v74[0] = v25;
    sub_21F76C9DC((uint64_t)v24 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale, (uint64_t)&v75, &qword_26AD491D0);
    uint64_t v65 = v27;
    uint64_t v36 = (char *)v24 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
    swift_beginAccess();
    uint64_t v37 = type metadata accessor for ChartContentRenderContext.Environment(0);
    v62[2] = a6;
    uint64_t v63 = v26;
    uint64_t v38 = v37;
    uint64_t v39 = (double *)&v36[*(int *)(v37 + 88)];
    double v40 = *v39;
    double v41 = v39[1];
    double v42 = v39[2];
    double v43 = v24[44];
    double v44 = v24[45];
    double v45 = v24[3];
    double v46 = v24[4];
    uint64_t v47 = (void *)type metadata accessor for BoundingSectionSpecification();
    uint64_t v48 = sub_21FA25F30();
    uint64_t v49 = v25;
    uint64_t WitnessTable = swift_getWitnessTable();
    int64_t v51 = sub_21F9CD278((uint64_t)v74, (uint64_t)&v75, v47, v48, WitnessTable, v40, v41, v42, v43, v44, v45, v46);
    v73[0] = v49;
    sub_21F76C9DC((uint64_t)v24 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale, (uint64_t)v74, &qword_26AD491D0);
    uint64_t v52 = (double *)&v36[*(int *)(v38 + 92)];
    double v53 = *v52;
    double v54 = v52[1];
    double v55 = v52[2];
    double v56 = v24[46];
    double v57 = v24[47];
    double v58 = v24[5];
    double v59 = v24[6];
    uint64_t v60 = (void *)type metadata accessor for BoundingSectionSpecification();
    int64_t v61 = sub_21F9CD278((uint64_t)v73, (uint64_t)v74, v60, v48, WitnessTable, v53, v54, v55, v56, v57, v58, v59);
    swift_bridgeObjectRelease();
    swift_release();
    sub_21F837D4C(v69, v51, v61, v65, v63, v64, v35);
    return;
  }
LABEL_14:
  __break(1u);
}

uint64_t sub_21F83A718@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  char v3 = *(unsigned char *)(a1 + 96);
  long long v4 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  v13[2] = *(_OWORD *)(a1 + 32);
  v13[3] = v5;
  long long v6 = *(_OWORD *)(a1 + 80);
  v13[4] = *(_OWORD *)(a1 + 64);
  v13[5] = v6;
  char v14 = v3;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v8 = type metadata accessor for XYRenderer();
  uint64_t v9 = sub_21F836DE4((uint64_t)v13, KeyPath, v8, MEMORY[0x263F188A8]);
  uint64_t v11 = v10;
  uint64_t result = swift_release();
  *a2 = v9;
  a2[1] = v11;
  return result;
}

uint64_t sub_21F83A7FC(uint64_t a1, void *a2)
{
  sub_21F76C978(a1, (uint64_t)v5, qword_26AD44558);
  uint64_t v3 = *a2 + 16;
  swift_beginAccess();
  sub_21F799B78((uint64_t)v5, v3, qword_26AD44558);
  return swift_endAccess();
}

uint64_t sub_21F83A86C(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = a8;
  uint64_t v44 = a5;
  uint64_t v9 = v8;
  uint64_t v58 = a2;
  double v59 = a4;
  double v57 = a1;
  uint64_t v42 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  double v55 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  double v53 = (char *)&v40 - v13;
  uint64_t v15 = v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  double v41 = (char *)&v40 - v17;
  uint64_t v18 = sub_21FA26340();
  uint64_t v45 = *(void *)(v18 - 8);
  uint64_t v46 = v18;
  MEMORY[0x270FA5388](v18);
  int64_t v51 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v40 - v21;
  MEMORY[0x270FA5388](v23);
  double v40 = (char *)&v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v50 = *((void *)v15 - 1);
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v40 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = a6;
  uint64_t v52 = v15;
  uint64_t v60 = swift_getAssociatedTypeWitness();
  uint64_t v47 = *(void *)(v60 - 8);
  MEMORY[0x270FA5388](v60);
  long long v30 = (char *)&v40 - v29;
  uint64_t v31 = sub_21FA25D70();
  uint64_t v61 = sub_21FA26670();
  uint64_t v56 = sub_21FA26680();
  sub_21FA26620();
  (*(void (**)(char *, uint64_t, void))(v50 + 16))(v28, v48, v52);
  double v59 = v30;
  uint64_t result = sub_21FA25D60();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    long long v33 = (uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
    long long v34 = (uint64_t (**)(char *, uint64_t))(v54 + 8);
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      sub_21FA26350();
      uint64_t result = (*v33)(v22, 1, AssociatedTypeWitness);
      if (result == 1) {
        goto LABEL_18;
      }
      v57(v22, v55);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v55, v44);
        return (*v34)(v22, AssociatedTypeWitness);
      }
      uint64_t v9 = 0;
      (*v34)(v22, AssociatedTypeWitness);
      sub_21FA26660();
      if (!--v31)
      {
        uint64_t v35 = v54;
        uint64_t v36 = v51;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v35 = v54;
  uint64_t v36 = v51;
LABEL_9:
  sub_21FA26350();
  double v55 = *(char **)(v35 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v36, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v37 = v51;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v46);
    return v61;
  }
  else
  {
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    uint64_t v54 = v35 + 32;
    uint64_t v38 = (void (**)(char *, uint64_t))(v35 + 8);
    uint64_t v39 = v41;
    uint64_t v37 = v51;
    while (1)
    {
      v52(v39, v37, AssociatedTypeWitness);
      v57(v39, v53);
      if (v9) {
        break;
      }
      uint64_t v9 = 0;
      (*v38)(v39, AssociatedTypeWitness);
      sub_21FA26660();
      sub_21FA26350();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v37, 1, AssociatedTypeWitness) == 1) {
        goto LABEL_14;
      }
    }
    (*v38)(v39, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v53, v44);
  }
}

char *sub_21F83AF68(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v214 = a5;
  uint64_t v210 = a4;
  uint64_t AssociatedConformanceWitness = a3[5];
  uint64_t v7 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(*(void *)(AssociatedConformanceWitness + 8)
                                                                           + 8)
                                                               + 8);
  uint64_t v8 = a3[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = a3[4];
  uint64_t v208 = a3[7];
  uint64_t v167 = type metadata accessor for BoundingSectionSpecification();
  uint64_t v161 = *(void (***)(char *, uint64_t, uint64_t))(v167 - 8);
  MEMORY[0x270FA5388](v167);
  uint64_t v166 = (char *)v157 - v11;
  uint64_t v12 = a3[3];
  unint64_t v169 = a3;
  uint64_t v216 = a3[6];
  uint64_t v217 = v12;
  uint64_t v165 = type metadata accessor for BoundingSectionSpecification();
  uint64_t v160 = *(void (***)(char *, uint64_t, uint64_t))(v165 - 8);
  MEMORY[0x270FA5388](v165);
  uint64_t v164 = (char *)v157 - v13;
  uint64_t v231 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v14);
  v163 = (char *)v157 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v215 = (uint64_t)v157 - v17;
  uint64_t v18 = sub_21FA26340();
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)v157 - v19;
  uint64_t v220 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v221 = (char *)v157 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v233 = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(v233 - 8);
  MEMORY[0x270FA5388](v233);
  uint64_t v232 = (char *)v157 - v24;
  uint64_t v168 = a2;
  uint64_t v25 = a2 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  v212 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v213 = v25;
  uint64_t v26 = v25 + v212[28];
  uint64_t v27 = *(void *)(v26 + 24);
  uint64_t v177 = v23;
  uint64_t v222 = v7;
  if (v27)
  {
    sub_21F83E3D8(v26, (uint64_t)&v250);
    sub_21F817950(v247);
    uint64_t v28 = sub_21F7D2934((uint64_t)&v250);
  }
  else
  {
    memset(v247, 0, 24);
    v247[3] = 2;
    bzero(&v248, 0x2A9uLL);
  }
  MEMORY[0x270FA5388](v28);
  uint64_t v223 = v8;
  uint64_t v29 = v217;
  v157[-8] = v8;
  v157[-7] = v29;
  uint64_t v30 = v29;
  uint64_t v209 = v10;
  v157[-6] = v10;
  uint64_t v31 = v210;
  uint64_t v32 = AssociatedConformanceWitness;
  v157[-5] = v210;
  v157[-4] = v32;
  v157[-3] = v216;
  type metadata accessor for TypedVectorizedProperties();
  uint64_t v211 = sub_21FA26340();
  uint64_t v218 = type metadata accessor for VisualMapper();
  uint64_t v34 = sub_21F8887FC((void (*)(char *, char *))sub_21F83F114, (uint64_t)&v157[-10], MEMORY[0x263F8E628], v218, v33, (uint64_t)&v250);
  uint64_t v206 = 0;
  uint64_t v207 = (char *)v157;
  uint64_t v228 = v250;
  uint64_t v230 = v251;
  uint64_t v35 = v253;
  uint64_t v229 = v252;
  uint64_t v227 = v254;
  uint64_t v226 = v255;
  int v225 = v256;
  MEMORY[0x270FA5388](v34);
  uint64_t v36 = v223;
  v157[-8] = v223;
  v157[-7] = v30;
  uint64_t v38 = v208;
  uint64_t v37 = v209;
  v157[-6] = v209;
  v157[-5] = v31;
  uint64_t v39 = v216;
  v157[-4] = AssociatedConformanceWitness;
  v157[-3] = v39;
  uint64_t v234 = v40;
  uint64_t v159 = type metadata accessor for VisualMapper();
  uint64_t v41 = v206;
  uint64_t v43 = sub_21F8887FC((void (*)(char *, char *))sub_21F83F16C, (uint64_t)&v157[-10], MEMORY[0x263F8E628], v159, v42, (uint64_t)&v250);
  uint64_t v207 = (char *)v157;
  uint64_t v193 = v251;
  uint64_t v191 = v250;
  uint64_t v192 = v252;
  uint64_t v205 = v41;
  uint64_t v206 = v253;
  uint64_t v189 = v255;
  uint64_t v190 = v254;
  int v188 = v256;
  MEMORY[0x270FA5388](v43);
  uint64_t v44 = v217;
  v157[-8] = v36;
  v157[-7] = v44;
  v157[-6] = v37;
  v157[-5] = v31;
  uint64_t v45 = v216;
  v157[-4] = AssociatedConformanceWitness;
  v157[-3] = v45;
  uint64_t v46 = v214;
  uint64_t v47 = type metadata accessor for VisualMapper();
  uint64_t v49 = sub_21F8887FC((void (*)(char *, char *))sub_21F83F1B8, (uint64_t)&v157[-10], MEMORY[0x263F8E628], v47, v48, (uint64_t)&v250);
  uint64_t v207 = (char *)v157;
  uint64_t v187 = v251;
  uint64_t v185 = v250;
  uint64_t v186 = v252;
  uint64_t v205 = v253;
  uint64_t v198 = v255;
  uint64_t v199 = v254;
  uint64_t v184 = v256;
  uint64_t v197 = v257;
  int v183 = v258;
  MEMORY[0x270FA5388](v49);
  uint64_t v50 = v217;
  v157[-8] = v223;
  v157[-7] = v50;
  uint64_t v51 = v210;
  v157[-6] = v209;
  v157[-5] = v51;
  v157[-4] = AssociatedConformanceWitness;
  v157[-3] = v45;
  uint64_t v155 = v38;
  uint64_t v156 = v46;
  uint64_t v162 = v47;
  sub_21F8887FC((void (*)(char *, char *))sub_21F83F228, (uint64_t)&v157[-10], MEMORY[0x263F8E628], v47, v52, (uint64_t)&v250);
  uint64_t v180 = v250;
  uint64_t v181 = v251;
  uint64_t v182 = v252;
  uint64_t v204 = v253;
  uint64_t v195 = v255;
  uint64_t v196 = v254;
  uint64_t v179 = v256;
  uint64_t v194 = v257;
  int v178 = v258;
  double v53 = (uint64_t *)(v213 + v212[26]);
  uint64_t v55 = *v53;
  uint64_t v54 = v53[1];
  uint64_t v174 = v55;
  uint64_t v201 = v54;
  uint64_t v56 = (uint64_t *)(v213 + v212[24]);
  uint64_t v57 = *v56;
  uint64_t v58 = v56[1];
  uint64_t v60 = v56[2];
  uint64_t v59 = v56[3];
  uint64_t v61 = (uint64_t *)(v213 + v212[25]);
  uint64_t v62 = *v61;
  uint64_t v63 = v61[2];
  uint64_t v202 = v61[1];
  uint64_t v203 = v62;
  uint64_t v64 = v61[3];
  (*(void (**)(char *, uint64_t, uint64_t))(v220 + 16))(v221, v200, v223);
  swift_bridgeObjectRetain();
  uint64_t v170 = v57;
  uint64_t v171 = v58;
  uint64_t v172 = v60;
  uint64_t v173 = v59;
  sub_21F7BB3B4(v57, v58, v60, v59);
  uint64_t v175 = v64;
  uint64_t v176 = v63;
  sub_21F7BB3B4(v203, v202, v63, v64);
  sub_21FA25D60();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_21FA26350();
  uint64_t v65 = v231;
  uint64_t v66 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v231 + 48);
  uint64_t v223 = v231 + 48;
  uint64_t v222 = v66;
  if (v66(v20, 1, v234) == 1)
  {
    uint64_t v207 = (char *)MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v87 = *(char **)(v65 + 32);
    uint64_t v86 = v65 + 32;
    uint64_t v221 = v87;
    uint64_t v220 = v86 - 24;
    v160 += 2;
    v161 += 2;
    uint64_t v88 = v215;
    v157[1] = v214 + 8;
    v158 = (void (**)(char *, uint64_t, uint64_t))(v86 - 16);
    uint64_t v207 = (char *)MEMORY[0x263F8EE78];
    uint64_t v231 = v86;
    int v219 = v20;
    do
    {
      uint64_t v89 = v234;
      while (1)
      {
        ((void (*)(uint64_t, char *, uint64_t))v221)(v88, v20, v89);
        if (v35 == 1) {
          break;
        }
        uint64_t v90 = v228;
        uint64_t v235 = v228;
        uint64_t v91 = v230;
        uint64_t v236 = v230;
        char v92 = v229;
        uint64_t v237 = v229;
        uint64_t v238 = v35;
        uint64_t v93 = v227;
        uint64_t v239 = v227;
        uint64_t v94 = v88;
        uint64_t v95 = v35;
        uint64_t v96 = v226;
        uint64_t v240 = v226;
        char v97 = v225;
        LOBYTE(v241) = v225;
        sub_21F7BB3B4(v228, v230, v229, v95);
        sub_21F83F7B0(v93, v96, v97);
        sub_21F816810(v94, v218, (uint64_t)&v244);
        sub_21F7F42EC(v90, v91, v92, v95);
        uint64_t v98 = v96;
        uint64_t v35 = v95;
        uint64_t v88 = v94;
        sub_21F83F6FC(v93, v98, v97);
        if (v244 != 1) {
          break;
        }
        uint64_t v89 = v234;
        (*(void (**)(uint64_t, uint64_t))v220)(v94, v234);
        uint64_t v20 = v219;
        sub_21FA26350();
        if (v222(v20, 1, v89) == 1) {
          goto LABEL_6;
        }
      }
      if (v206 != 1)
      {
        uint64_t v100 = v191;
        char v99 = v192;
        uint64_t v235 = v191;
        uint64_t v101 = v193;
        uint64_t v236 = v193;
        uint64_t v237 = v192;
        uint64_t v102 = v206;
        uint64_t v238 = v206;
        uint64_t v104 = v189;
        uint64_t v103 = v190;
        uint64_t v239 = v190;
        uint64_t v240 = v189;
        char v105 = v188;
        LOBYTE(v241) = v188;
        sub_21F7BB3B4(v191, v193, v192, v206);
        sub_21F85139C(v103, v104, v105);
        sub_21F816810(v215, v159, (uint64_t)&v244);
        sub_21F7F42EC(v100, v101, v99, v102);
        sub_21F83F3BC(v103, v104, v105);
        uint64_t v106 = *((void *)&v244 + 1);
        uint64_t v107 = (void *)(v213 + v212[26]);
        *uint64_t v107 = v244;
        v107[1] = v106;
        swift_bridgeObjectRelease();
      }
      if (v205 != 1)
      {
        uint64_t v109 = v185;
        char v108 = v186;
        uint64_t v235 = v185;
        uint64_t v110 = v187;
        uint64_t v236 = v187;
        uint64_t v237 = v186;
        uint64_t v111 = v205;
        uint64_t v238 = v205;
        uint64_t v112 = v199;
        uint64_t v239 = v199;
        uint64_t v240 = v198;
        char v113 = v184;
        uint64_t v241 = v184;
        uint64_t v114 = v197;
        uint64_t v242 = v197;
        char v115 = v183;
        char v243 = v183;
        sub_21F7BB3B4(v185, v187, v186, v205);
        uint64_t v116 = v112;
        uint64_t v117 = v198;
        sub_21F8513C8(v116, v198, v113, v114, v115);
        sub_21F816810(v215, v162, (uint64_t)&v244);
        sub_21F7F42EC(v109, v110, v108, v111);
        sub_21F83F300(v199, v117, v113, v197, v115);
        uint64_t v118 = v245;
        uint64_t v119 = v246;
        v120 = (uint64_t *)(v213 + v212[24]);
        uint64_t v121 = *v120;
        uint64_t v122 = v120[1];
        uint64_t v123 = v120[2];
        uint64_t v124 = v120[3];
        *(_OWORD *)v120 = v244;
        v120[2] = v118;
        v120[3] = v119;
        sub_21F7F42EC(v121, v122, v123, v124);
      }
      if (v204 != 1)
      {
        uint64_t v126 = v180;
        uint64_t v125 = v181;
        uint64_t v235 = v180;
        uint64_t v236 = v181;
        char v127 = v182;
        uint64_t v237 = v182;
        uint64_t v128 = v204;
        uint64_t v238 = v204;
        uint64_t v129 = v196;
        uint64_t v239 = v196;
        uint64_t v240 = v195;
        char v130 = v179;
        uint64_t v241 = v179;
        uint64_t v131 = v194;
        uint64_t v242 = v194;
        char v132 = v178;
        char v243 = v178;
        sub_21F7BB3B4(v180, v181, v182, v204);
        uint64_t v133 = v129;
        uint64_t v134 = v195;
        sub_21F8513C8(v133, v195, v130, v131, v132);
        sub_21F816810(v215, v162, (uint64_t)&v244);
        sub_21F7F42EC(v126, v125, v127, v128);
        sub_21F83F300(v196, v134, v130, v194, v132);
        uint64_t v135 = v245;
        uint64_t v136 = v246;
        char v137 = (uint64_t *)(v213 + v212[25]);
        uint64_t v138 = *v137;
        uint64_t v139 = v137[1];
        uint64_t v140 = v137[2];
        uint64_t v141 = v137[3];
        *(_OWORD *)char v137 = v244;
        v137[2] = v135;
        v137[3] = v136;
        sub_21F7F42EC(v138, v139, v140, v141);
      }
      unint64_t v142 = v169;
      uint64_t v143 = v200;
      uint64_t v144 = (uint64_t)v164;
      (*v160)(v164, v200 + *((int *)v169 + 17), v165);
      char v145 = *v158;
      uint64_t v146 = v215;
      uint64_t v147 = (uint64_t)v163;
      uint64_t v148 = v234;
      (*v158)(v163, v215, v234);
      sub_21F9CC9C4(v144, v147, v148, v217, v216, (uint64_t)v249);
      uint64_t v149 = (uint64_t)v166;
      (*v161)(v166, v143 + *((int *)v142 + 18), v167);
      v145((char *)v147, v146, v148);
      sub_21F9CC9C4(v149, v147, v148, v209, v208, (uint64_t)&v250);
      uint64_t v150 = (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t))(v214 + 8))(v249, &v250, v168);
      sub_21F83F3E8((uint64_t)&v250);
      sub_21F83F3E8((uint64_t)v249);
      v151 = v207;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        v151 = sub_21F76B18C(0, *((void *)v151 + 2) + 1, 1, v151);
      }
      unint64_t v153 = *((void *)v151 + 2);
      unint64_t v152 = *((void *)v151 + 3);
      uint64_t v88 = v215;
      if (v153 >= v152 >> 1) {
        v151 = sub_21F76B18C((char *)(v152 > 1), v153 + 1, 1, v151);
      }
      *((void *)v151 + 2) = v153 + 1;
      uint64_t v207 = v151;
      *(void *)&v151[8 * v153 + 32] = v150;
      uint64_t v154 = v234;
      (*(void (**)(uint64_t, uint64_t))v220)(v88, v234);
      uint64_t v20 = v219;
      sub_21FA26350();
    }
    while (v222(v20, 1, v154) != 1);
  }
LABEL_6:
  sub_21F83F298(v180, v181, v182, v204, v196, v195, v179, v194, v178);
  sub_21F83F298(v185, v187, v186, v205, v199, v198, v184, v197, v183);
  sub_21F83F36C(v191, v193, v192, v206, v190, v189, v188);
  sub_21F83F6A0(v228, v230, v229, v35, v227, v226, v225);
  (*(void (**)(char *, uint64_t))(v177 + 8))(v232, v233);
  (*(void (**)(void *))(*(void *)(v211 - 8) + 8))(v247);
  uint64_t v68 = v212;
  uint64_t v67 = v213;
  uint64_t v69 = (void *)(v213 + v212[26]);
  uint64_t v70 = v201;
  *uint64_t v69 = v174;
  v69[1] = v70;
  swift_bridgeObjectRelease();
  uint64_t v71 = (uint64_t *)(v67 + v68[24]);
  uint64_t v72 = *v71;
  uint64_t v73 = v71[1];
  uint64_t v74 = v71[2];
  uint64_t v75 = v71[3];
  uint64_t v76 = v171;
  *uint64_t v71 = v170;
  v71[1] = v76;
  uint64_t v77 = v173;
  v71[2] = v172;
  v71[3] = v77;
  sub_21F7F42EC(v72, v73, v74, v75);
  long long v78 = (uint64_t *)(v67 + v68[25]);
  uint64_t v79 = *v78;
  uint64_t v80 = v78[1];
  uint64_t v81 = v78[2];
  uint64_t v82 = v78[3];
  uint64_t v83 = v202;
  uint64_t *v78 = v203;
  v78[1] = v83;
  uint64_t v84 = v175;
  v78[2] = v176;
  v78[3] = v84;
  sub_21F7F42EC(v79, v80, v81, v82);
  return v207;
}

uint64_t sub_21F83BFA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21F836DE4(a1, a2, a4, a3);
}

uint64_t sub_21F83BFB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double *a9)
{
  return sub_21F837E54(a1, a2, a3, a4, a5, a6, a9, a7, a8);
}

char *sub_21F83BFC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return sub_21F83AF68(a1, a2, a5, a3, a4);
}

uint64_t sub_21F83BFDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v40 = a1;
  uint64_t v41 = a6;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for PlottableProjection.Storage();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v39 - v15;
  uint64_t v42 = a5;
  uint64_t v17 = type metadata accessor for PlottableProjection();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a2 + *(int *)(v17 + 44), v13);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      uint64_t v34 = *(void (**)(char *, uint64_t))(v10 + 8);
      v34(&v16[*(int *)(TupleTypeMetadata2 + 48)], a3);
      v34(v16, a3);
      goto LABEL_8;
    case 2u:
      uint64_t v29 = *(void *)a2;
      uint64_t v28 = *(void *)(a2 + 8);
      char v30 = *(unsigned char *)(a2 + 16);
      uint64_t v39 = *(void *)(a2 + 24);
      sub_21F7652C0(v29, v28, v30);
      swift_bridgeObjectRetain();
      uint64_t v31 = v40;
      swift_getAtKeyPath();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a2, v17);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(v31, a4);
      uint64_t v23 = v41;
      uint64_t v24 = v29;
      uint64_t v25 = v28;
      char v26 = v30;
      uint64_t v27 = v39;
      return sub_21F753D84(v24, v25, v26, v27, (uint64_t)v12, a3, v23);
    case 3u:
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      goto LABEL_8;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v35 = sub_21FA24310();
      uint64_t v36 = sub_21FA24320();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      uint64_t v38 = &v16[*(int *)(TupleTypeMetadata3 + 48)];
      (*(void (**)(char *, uint64_t))(*(void *)(v36 - 8) + 8))(&v16[*(int *)(TupleTypeMetadata3 + 64)], v36);
      (*(void (**)(char *, uint64_t))(*(void *)(v35 - 8) + 8))(v38, v35);
LABEL_8:
      sub_21FA266E0();
      __break(1u);
      JUMPOUT(0x21F83C488);
    default:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(v40, a4);
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v16, a3);
      uint64_t v18 = *(void *)a2;
      uint64_t v19 = *(void *)(a2 + 8);
      char v20 = *(unsigned char *)(a2 + 16);
      uint64_t v21 = *(void *)(a2 + 24);
      sub_21F7652C0(*(void *)a2, v19, v20);
      uint64_t v22 = *(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
      swift_bridgeObjectRetain();
      v22(a2, v17);
      uint64_t v23 = v41;
      uint64_t v24 = v18;
      uint64_t v25 = v19;
      char v26 = v20;
      uint64_t v27 = v21;
      return sub_21F753D84(v24, v25, v26, v27, (uint64_t)v12, a3, v23);
  }
}

uint64_t sub_21F83C49C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 72);
  uint64_t v8 = *(void *)(a2 + 80);
  uint64_t v9 = *(void *)(a2 + 88);
  unsigned __int8 v10 = *(unsigned char *)(a2 + 96);
  uint64_t v11 = *(void *)(a2 + 104);
  char v12 = *(unsigned char *)(a2 + 112);
  if (*(unsigned char *)a2 == 3)
  {
    sub_21F83FAEC(*(void *)(a2 + 8), v4, *(void *)(a2 + 24), v6, *(void *)(a2 + 40), *(void *)(a2 + 48), *(void *)(a2 + 56), *(void *)(a2 + 64), *(void *)(a2 + 72), v8, v9, v10);
    sub_21F82B5F8(v11, v12);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
    return 0;
  }
  else
  {
    uint64_t v19 = *(void *)(a2 + 56);
    uint64_t v20 = *(void *)(a2 + 64);
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = *(void *)(a2 + 48);
    double v13 = sub_21F81698C(a1, v11, v12);
    sub_21F83FAEC(v3, v4, v5, v6, v17, v18, v19, v20, v7, v8, v9, v10);
    sub_21F82B5F8(v11, v12);
    (*(void (**)(uint64_t))(*(void *)(a3 - 8) + 8))(a1);
    return *(void *)&v13;
  }
}

uint64_t sub_21F83C640@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v26 = a8;
  uint64_t v15 = type metadata accessor for Vectorizer();
  uint64_t v16 = *(void *)(v15 - 8);
  __n128 v17 = MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v25 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(*(void *)(a4 - 8) + 32))((char *)&v25 - v18, a1, a4, v17);
  uint64_t v20 = (uint64_t (*)(long long *, uint64_t, uint64_t))swift_allocObject();
  *((void *)v20 + 2) = a4;
  *((void *)v20 + 3) = a5;
  *((void *)v20 + 4) = a6;
  *((void *)v20 + 5) = a7;
  *((void *)v20 + 6) = a2;
  *((void *)v20 + 7) = a3;
  uint64_t v21 = (uint64_t (**)(long long *, uint64_t, uint64_t))&v19[*(int *)(v15 + 36)];
  *uint64_t v21 = sub_21F83F9D4;
  v21[1] = v20;
  uint64_t v22 = (uint64_t (*)(char *, uint64_t, uint64_t))swift_allocObject();
  *((void *)v22 + 2) = a4;
  *((void *)v22 + 3) = a5;
  *((void *)v22 + 4) = a6;
  *((void *)v22 + 5) = a7;
  *((void *)v22 + 6) = a2;
  *((void *)v22 + 7) = a3;
  uint64_t v23 = (uint64_t (**)(char *, uint64_t, uint64_t))&v19[*(int *)(v15 + 40)];
  *uint64_t v23 = sub_21F83FA04;
  v23[1] = v22;
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v26, v19, v15);
  return swift_retain();
}

uint64_t sub_21F83C7F0(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  long long v10 = *a1;
  v12[2] = a6;
  v12[3] = a7;
  v12[4] = a8;
  v12[5] = a9;
  v12[6] = a4;
  v12[7] = a5;
  v12[8] = a2;
  long long v13 = v10;
  swift_retain();
  sub_21F7803DC(a3, (void (*)(void))sub_21F83FAB4, (uint64_t)v12);
  return swift_release();
}

uint64_t sub_21F83C86C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12 = *(void *)(a7 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16(v15);
  v18[0] = a4;
  v18[1] = a5;
  (*(void (**)(char *, void *, uint64_t, uint64_t))(a9 + 32))(v14, v18, a7, a9);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a7);
}

uint64_t sub_21F83C980(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void *)(a7 - 8);
  char v12 = a4 & 1;
  MEMORY[0x270FA5388](a1);
  uint64_t v14 = &v18[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16(v15);
  v18[0] = v12;
  uint64_t v19 = a5;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t, uint64_t))(a9 + 40))(v14, v18, a7, a9);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v11 + 8))(v14, a7);
}

uint64_t sub_21F83CAA0(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a4 + 8) + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v40 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v45 = (char *)&v35 - v10;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v53 = sub_21FA26340();
  uint64_t v39 = *(void *)(v53 - 8);
  MEMORY[0x270FA5388](v53);
  uint64_t v52 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (uint64_t *)((char *)&v35 - v14);
  uint64_t v38 = sub_21FA26770();
  MEMORY[0x270FA5388](v38);
  uint64_t v37 = (char *)&v35 - v16;
  uint64_t v51 = v8;
  uint64_t v54 = sub_21FA26760();
  uint64_t v42 = *(void *)(v54 - 8);
  MEMORY[0x270FA5388](v54);
  uint64_t v55 = (char *)&v35 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v49 = *a2;
  uint64_t v43 = v21;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  uint64_t v47 = a1;
  v22(v20, a1, a3);
  uint64_t v23 = v49;
  swift_beginAccess();
  sub_21F83E678(v23 + 888, (uint64_t)v62);
  sub_21F76C978((uint64_t)&v66, (uint64_t)v61, &qword_26AD44550);
  sub_21F76C978((uint64_t)v62, (uint64_t)v57, qword_26AD44558);
  if (*((void *)&v57[1] + 1))
  {
    v58[0] = v57[0];
    v58[1] = v57[1];
    v58[2] = v57[2];
    *(void *)&v58[3] = *(void *)&v57[3];
    swift_retain();
    sub_21F7CA08C((uint64_t)v58, (uint64_t)v20, 4u, a3, a4);
    sub_21F8182CC((uint64_t)v58);
  }
  else
  {
    swift_retain();
    sub_21F76CA84((uint64_t)v57, qword_26AD44558);
  }
  sub_21F76C978((uint64_t)&v63, (uint64_t)v57, qword_26AD44558);
  if (*((void *)&v57[1] + 1))
  {
    v58[0] = v57[0];
    v58[1] = v57[1];
    v58[2] = v57[2];
    *(void *)&v58[3] = *(void *)&v57[3];
    sub_21F7CA08C((uint64_t)v58, (uint64_t)v20, 7u, a3, a4);
    sub_21F8182CC((uint64_t)v58);
  }
  else
  {
    sub_21F76CA84((uint64_t)v57, qword_26AD44558);
  }
  sub_21F76C978((uint64_t)&v64, (uint64_t)v57, qword_26AD44558);
  if (*((void *)&v57[1] + 1))
  {
    v58[0] = v57[0];
    v58[1] = v57[1];
    v58[2] = v57[2];
    *(void *)&v58[3] = *(void *)&v57[3];
    sub_21F7CA08C((uint64_t)v58, (uint64_t)v20, 5u, a3, a4);
    sub_21F8182CC((uint64_t)v58);
  }
  else
  {
    sub_21F76CA84((uint64_t)v57, qword_26AD44558);
  }
  sub_21F76C978((uint64_t)&v65, (uint64_t)v58, qword_26AD44558);
  uint64_t v46 = AssociatedTypeWitness;
  uint64_t v48 = a4;
  if (*((void *)&v58[1] + 1))
  {
    v59[0] = v58[0];
    v59[1] = v58[1];
    v59[2] = v58[2];
    uint64_t v60 = *(void *)&v58[3];
    sub_21F7CA08C((uint64_t)v59, (uint64_t)v20, 6u, a3, a4);
    sub_21F8182CC((uint64_t)v59);
  }
  else
  {
    sub_21F76CA84((uint64_t)v58, qword_26AD44558);
  }
  uint64_t v44 = v23;
  swift_beginAccess();
  uint64_t v36 = (void *)(v23 + 624);
  memcpy(v58, (const void *)(v23 + 624), 0x102uLL);
  sub_21F761D2C((uint64_t)v58, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21F761E74);
  uint64_t v50 = a3;
  uint64_t v41 = v20;
  MEMORY[0x223C551D0](a3, v51);
  sub_21FA26740();
  uint64_t v24 = (void (**)(uint64_t *, char *, uint64_t))(v39 + 32);
  uint64_t v51 = TupleTypeMetadata2 - 8;
  uint64_t v25 = (void (**)(char *, char *, uint64_t))(v40 + 32);
  uint64_t v26 = (void (**)(uint64_t, uint64_t))(v40 + 8);
  while (1)
  {
    uint64_t v28 = v52;
    sub_21FA26750();
    (*v24)(v15, v28, v53);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v15, 1, TupleTypeMetadata2) == 1)break; {
    uint64_t v29 = *v15;
    }
    uint64_t v30 = TupleTypeMetadata2;
    uint64_t v31 = (char *)v15 + *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v32 = (uint64_t)v45;
    uint64_t v33 = v46;
    (*v25)(v45, v31, v46);
    sub_21F76C978((uint64_t)v61, (uint64_t)v57, &qword_26AD44550);
    if (*(void *)&v57[3])
    {
      v56[2] = v57[2];
      v56[3] = v57[3];
      v56[4] = v57[4];
      v56[0] = v57[0];
      v56[1] = v57[1];
      sub_21F7CB174((uint64_t)v56, v32, v33);
      sub_21F818320((uint64_t)v56);
    }
    uint64_t v27 = *(void (**)(_OWORD *, uint64_t, uint64_t))(v47
                                                            + *(int *)(type metadata accessor for Vectorizer() + 36));
    v57[0] = v49;
    v27(v57, v32, v29);
    (*v26)(v32, v33);
    TupleTypeMetadata2 = v30;
  }
  (*(void (**)(char *, uint64_t))(v42 + 8))(v55, v54);
  sub_21F76CA84((uint64_t)v61, &qword_26AD44550);
  sub_21F74BCC8((uint64_t)v62);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v41, v50);
  memcpy(v57, v36, 0x102uLL);
  memcpy(v36, v58, 0x102uLL);
  sub_21F761D2C((uint64_t)v58, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21F761E74);
  sub_21F761D2C((uint64_t)v57, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21F761EDC);
  swift_release();
  return sub_21F761D2C((uint64_t)v58, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21F761EDC);
}

uint64_t sub_21F83D26C@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v66 = a5;
  uint64_t v9 = sub_21F76CA40(&qword_26AD48A80);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v65 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = a4;
  uint64_t v11 = *(void *)(*(void *)(a4 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v62 = AssociatedTypeWitness;
  uint64_t v63 = v13;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v59 = (char *)&v52 - v14;
  uint64_t v15 = type metadata accessor for ChartContentRenderContext.Environment(0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v19 = MEMORY[0x270FA5388](v18);
  int v58 = *a2;
  uint64_t v21 = *((void *)a2 + 1);
  uint64_t v22 = a3;
  uint64_t v64 = v23;
  uint64_t v24 = *(void (**)(__n128))(v23 + 16);
  uint64_t v67 = (char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = a1;
  v24(v19);
  uint64_t v25 = v21 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  uint64_t v26 = v25 + *(int *)(v15 + 112);
  if (!*(void *)(v26 + 24))
  {
    memset(v73, 0, 24);
    v73[3] = 2;
    bzero(&v73[4], 0x2A9uLL);
    uint64_t v27 = v22;
    swift_getAssociatedTypeWitness();
    uint64_t v28 = v21;
    swift_retain();
    goto LABEL_5;
  }
  sub_21F83E3D8(v26, (uint64_t)v74);
  uint64_t v27 = v22;
  swift_getAssociatedTypeWitness();
  uint64_t v28 = v21;
  swift_retain();
  sub_21F817950(v73);
  sub_21F7D2934((uint64_t)v74);
  if (v73[3] == 2)
  {
LABEL_5:
    sub_21F8173E4((uint64_t)v74);
    type metadata accessor for TypedVectorizedProperties();
    uint64_t v29 = sub_21FA26340();
    (*(void (**)(void *, uint64_t))(*(void *)(v29 - 8) + 8))(v73, v29);
    goto LABEL_6;
  }
  memcpy(v74, v73, 0x2C9uLL);
LABEL_6:
  sub_21F7609A0(v25, (uint64_t)v17, type metadata accessor for ChartContentRenderContext.Environment);
  uint64_t v54 = v17;
  uint64_t v30 = v28;
  uint64_t v31 = (void *)(v28 + 80);
  swift_beginAccess();
  memcpy(v71, (const void *)(v28 + 80), 0x102uLL);
  uint64_t v57 = v15;
  *(void *)(v25 + *(int *)(v15 + 64)) = 0;
  uint64_t v70 = 0;
  uint64_t v53 = sub_21F761E74;
  sub_21F761D2C((uint64_t)v71, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21F761E74);
  uint64_t v32 = v59;
  uint64_t v33 = v67;
  uint64_t v34 = sub_21FA260E0();
  uint64_t v55 = v11;
  uint64_t v68 = MEMORY[0x263F8EE78];
  MEMORY[0x270FA5388](v34);
  uint64_t v56 = v27;
  uint64_t v35 = v61;
  *(&v52 - 10) = v27;
  *(&v52 - 9) = v35;
  *(&v52 - 8) = (uint64_t)v33;
  *(&v52 - 7) = (uint64_t)v74;
  uint64_t v36 = v60;
  *(&v52 - 6) = v30;
  *(&v52 - 5) = v36;
  *((unsigned char *)&v52 - 32) = v58;
  *(&v52 - 3) = v30;
  *(&v52 - 2) = (uint64_t)&v70;
  sub_21F76CA40(&qword_26AD47A38);
  uint64_t v37 = v62;
  swift_getAssociatedConformanceWitness();
  sub_21FA25DD0();
  (*(void (**)(char *, uint64_t))(v63 + 8))(v32, v37);
  uint64_t v38 = v69;
  swift_beginAccess();
  uint64_t v39 = (uint64_t)v54;
  sub_21F83E314((uint64_t)v54, v25);
  swift_endAccess();
  memcpy(v72, v31, 0x102uLL);
  memcpy(v31, v71, 0x102uLL);
  sub_21F761D2C((uint64_t)v71, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))v53);
  sub_21F761D2C((uint64_t)v72, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21F761EDC);
  uint64_t v40 = (int *)type metadata accessor for SgGroup(0);
  uint64_t v41 = swift_allocBox();
  uint64_t v43 = v42;
  uint64_t v44 = *(void *)(*(void *)(v30 + 16) + 24);
  uint64_t v45 = sub_21F7812C4(v38);
  swift_bridgeObjectRelease();
  uint64_t v46 = type metadata accessor for SgClipRect(0);
  uint64_t v47 = (uint64_t)v65;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v65, 1, 1, v46);
  swift_release();
  sub_21F761D2C((uint64_t)v71, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21F761EDC);
  uint64_t v48 = *(void *)(v39 + *(int *)(v57 + 64));
  sub_21F83E378(v39, type metadata accessor for ChartContentRenderContext.Environment);
  *uint64_t v43 = v44;
  v43[1] = v45;
  sub_21F76C9DC(v47, (uint64_t)v43 + v40[6], &qword_26AD48A80);
  *(void *)((char *)v43 + v40[7]) = 0x3FF0000000000000;
  *(void *)((char *)v43 + v40[8]) = v48;
  *(void *)((char *)v43 + v40[9]) = MEMORY[0x263F8EE78];
  *((unsigned char *)v43 + v40[10]) = 0;
  *uint64_t v66 = v41;
  uint64_t v49 = v56;
  swift_getAssociatedTypeWitness();
  uint64_t v50 = type metadata accessor for TypedVectorizedProperties();
  (*(void (**)(unsigned char *, uint64_t))(*(void *)(v50 - 8) + 8))(v74, v50);
  return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v67, v49);
}

uint64_t sub_21F83D984(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, char **a9, uint64_t a10, uint64_t a11)
{
  void (*v71)(void *__return_ptr, void, void, void);
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t result;
  long long v76;
  uint64_t v77;
  uint64_t v78;
  long long v79;
  long long v80;
  char **v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  long long v91;
  _OWORD v92[2];
  long long v93;
  long long v94;
  long long v95;
  uint64_t v96;
  char v97;
  void v98[2];
  unsigned __int8 v99;
  long long v100;
  char *v101;
  unsigned __int8 v102;
  uint64_t v103;
  uint64_t v104;
  char v105[8];
  uint64_t v106;
  long long v107;
  long long v108;
  long long v109;
  _OWORD v110[5];
  long long v111;
  unsigned char v112[72];
  long long v113;
  long long v114;
  uint64_t v115;
  char v116;

  uint64_t v81 = a1;
  uint64_t v85 = a6;
  uint64_t v86 = a8;
  uint64_t v82 = a7;
  uint64_t v88 = a5;
  uint64_t v84 = a11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v76 - v14;
  uint64_t v83 = a10;
  uint64_t v16 = (void (*)(void, void))sub_21FA261F0();
  uint64_t v87 = v13;
  uint64_t v17 = *(void (**)(void))(v13 + 16);
  uint64_t v89 = v15;
  uint64_t v90 = AssociatedTypeWitness;
  v17(v15);
  v16(&v111, 0);
  uint64_t v18 = *(void *)(a4 + 24);
  if (v18 != 1)
  {
    uint64_t v20 = *(void *)(a4 + 32);
    uint64_t v19 = *(void *)(a4 + 40);
    *(void *)&uint64_t v80 = v19;
    uint64_t v22 = *(void *)(a4 + 8);
    uint64_t v21 = *(void *)(a4 + 16);
    char v24 = *(unsigned char *)(a4 + 48);
    *(void *)&uint64_t v111 = *(void *)a4;
    uint64_t v23 = v111;
    *((void *)&v111 + 1) = v22;
    *(void *)uint64_t v112 = v21;
    *(void *)&v112[8] = v18;
    *(void *)&v112[16] = v20;
    *(void *)&v112[24] = v19;
    v112[32] = v24;
    sub_21F7BB3B4(v111, v22, v21, v18);
    sub_21F83F7B0(v20, v19, v24);
    uint64_t v25 = type metadata accessor for VisualMapper();
    sub_21F816810((uint64_t)v89, v25, (uint64_t)&v107);
    sub_21F7F42EC(v23, v22, v21, v18);
    sub_21F83F6FC(v20, v80, v24);
    uint64_t v26 = v107;
    uint64_t v27 = v88 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
    swift_beginAccess();
    *(void *)(v27 + *(int *)(type metadata accessor for ChartContentRenderContext.Environment(0) + 52)) = v26;
  }
  uint64_t v28 = *(void *)(a4 + 80);
  if (v28 != 1)
  {
    uint64_t v30 = *(void *)(a4 + 88);
    uint64_t v29 = *(void *)(a4 + 96);
    uint64_t v32 = *(void *)(a4 + 64);
    uint64_t v31 = *(void *)(a4 + 72);
    uint64_t v33 = *(void *)(a4 + 56);
    unsigned __int8 v34 = *(unsigned char *)(a4 + 104);
    *(void *)&uint64_t v111 = v33;
    *((void *)&v111 + 1) = v32;
    *(void *)uint64_t v112 = v31;
    *(void *)&v112[8] = v28;
    *(void *)&v112[16] = v30;
    *(void *)&v112[24] = v29;
    *(void *)&uint64_t v80 = v29;
    v112[32] = v34;
    *((void *)&v108 + 1) = MEMORY[0x263F188A8];
    *(void *)&uint64_t v109 = MEMORY[0x263F18898];
    sub_21F7BB3B4(v33, v32, v31, v28);
    sub_21F83F794(v30, v29, v34);
    uint64_t v35 = type metadata accessor for VisualMapper();
    sub_21F816810((uint64_t)v89, v35, (uint64_t)&v107);
    sub_21F7F42EC(v33, v32, v31, v28);
    sub_21F83F778(v30, v80, v34);
    BYTE8(v109) = 1;
    uint64_t v36 = v88 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
    swift_beginAccess();
    sub_21F799B78((uint64_t)&v107, v36, &qword_26AD48C60);
    swift_endAccess();
  }
  uint64_t v37 = *(void *)(a4 + 136);
  if (v37 != 1)
  {
    char v38 = *(unsigned char *)(a4 + 184);
    uint64_t v39 = *(void *)(a4 + 176);
    uint64_t v40 = *(void *)(a4 + 128);
    uint64_t v111 = *(_OWORD *)(a4 + 112);
    *(void *)uint64_t v112 = v40;
    *(void *)&v112[8] = v37;
    long long v41 = *(_OWORD *)(a4 + 160);
    *(_OWORD *)&v112[16] = *(_OWORD *)(a4 + 144);
    *(_OWORD *)&v112[32] = v41;
    *(void *)&v112[48] = v39;
    v112[56] = v38;
    uint64_t v42 = type metadata accessor for VisualMapper();
    sub_21F816810((uint64_t)v89, v42, (uint64_t)&v107);
    uint64_t v79 = v108;
    uint64_t v80 = v107;
    uint64_t v43 = v109;
    uint64_t v44 = v88 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
    swift_beginAccess();
    long long v45 = v79;
    *(_OWORD *)(v44 + 48) = v80;
    *(_OWORD *)(v44 + 64) = v45;
    *(void *)(v44 + 80) = v43;
    swift_bridgeObjectRelease();
  }
  uint64_t v46 = type metadata accessor for VisualMapper();
  uint64_t v47 = sub_21FA26340();
  uint64_t v48 = *(void *)(v47 - 8);
  (*(void (**)(long long *, uint64_t, uint64_t))(v48 + 16))(&v107, a4 + 192, v47);
  if (*((void *)&v108 + 1) == 1)
  {
    (*(void (**)(long long *, uint64_t))(v48 + 8))(&v107, v47);
  }
  else
  {
    *(_OWORD *)uint64_t v112 = v108;
    *(_OWORD *)&v112[16] = v109;
    *(_OWORD *)&v112[32] = v110[0];
    *(_OWORD *)&v112[41] = *(_OWORD *)((char *)v110 + 9);
    uint64_t v111 = v107;
    sub_21F816810((uint64_t)v89, v46, (uint64_t)&v107);
    (*(void (**)(long long *, uint64_t))(*(void *)(v46 - 8) + 8))(&v111, v46);
    BYTE8(v109) = 0;
    uint64_t v49 = v88 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
    swift_beginAccess();
    sub_21F799B78((uint64_t)&v107, v49 + 88, &qword_26AD46858);
    swift_endAccess();
  }
  uint64_t v50 = a9;
  v82 &= 1u;
  unsigned int v51 = *(unsigned __int8 *)(a4 + 320);
  if (v51 <= 0xFB)
  {
    uint64_t v52 = *(void *)(a4 + 280);
    uint64_t v54 = *(void *)(a4 + 288);
    uint64_t v53 = *(void *)(a4 + 296);
    uint64_t v56 = *(void *)(a4 + 304);
    uint64_t v55 = *(void *)(a4 + 312);
    *(void *)&uint64_t v111 = *(void *)(a4 + 272);
    *((void *)&v111 + 1) = v52;
    *(void *)uint64_t v112 = v54;
    *(void *)&v112[8] = v53;
    *(void *)&v112[16] = v56;
    *(void *)&v112[24] = v55;
    if ((v51 & 0x80) != 0)
    {
      v112[32] = v51 & 0x7F;
      type metadata accessor for CGSize(255);
      uint64_t v61 = type metadata accessor for VisualMapper();
      sub_21F816810((uint64_t)v89, v61, (uint64_t)&v107);
      uint64_t v58 = *((void *)&v107 + 1);
      uint64_t v60 = v107;
      char v59 = 1;
    }
    else
    {
      v112[32] = v51;
      uint64_t v57 = type metadata accessor for VisualMapper();
      sub_21F816810((uint64_t)v89, v57, (uint64_t)&v107);
      uint64_t v58 = 0;
      char v59 = 0;
      uint64_t v60 = v107;
    }
    uint64_t v62 = v88 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
    swift_beginAccess();
    *(void *)(v62 + 136) = v60;
    *(void *)(v62 + 144) = v58;
    *(unsigned char *)(v62 + 152) = v59;
  }
  uint64_t v63 = (char *)(a4 + 328);
  type metadata accessor for TypedVectorizedProperties.Position();
  uint64_t v64 = sub_21FA26340();
  uint64_t v65 = *(char ***)(*(void *)(v64 - 8) + 32);
  ((void (*)(long long *, uint64_t, uint64_t))v65)(&v107, a4 + 328, v64);
  ((void (*)(long long *, long long *, uint64_t))v65)(&v111, &v107, v64);
  if (sub_21F83E464((uint64_t)&v111) != 1)
  {
    *(void *)&uint64_t v80 = swift_getKeyPath();
    uint64_t v91 = *(_OWORD *)&v112[8];
    v92[0] = *(_OWORD *)&v112[24];
    v92[1] = *(_OWORD *)&v112[40];
    uint64_t v93 = *(_OWORD *)&v112[56];
    uint64_t v94 = v113;
    uint64_t v95 = v114;
    uint64_t v96 = v115;
    char v97 = v116;
    ((void (*)(char *, long long *, uint64_t))v65)(v105, &v107, v64);
    sub_21F83E488((uint64_t)v105);
    uint64_t v66 = type metadata accessor for VisualMapper();
    sub_21F816810((uint64_t)v89, v66, (uint64_t)v98);
    long long v78 = v98[1];
    *(void *)&uint64_t v79 = v98[0];
    uint64_t v77 = v99;
    uint64_t v76 = v100;
    uint64_t v63 = v101;
    uint64_t v67 = v102;
    uint64_t v68 = v103;
    uint64_t v69 = v104;
    uint64_t v70 = *((void *)&v111 + 1);
    uint64_t v65 = (char **)v112[0];
    swift_beginAccess();
    *(void *)&uint64_t v91 = v79;
    *((void *)&v91 + 1) = v78;
    *(void *)&v92[0] = v77;
    *(_OWORD *)((char *)v92 + 8) = v76;
    *((void *)&v92[1] + 1) = v63;
    *(void *)&uint64_t v93 = v67;
    *((void *)&v93 + 1) = v68;
    *(void *)&uint64_t v94 = v69;
    uint64_t v50 = a9;
    *((void *)&v94 + 1) = v70;
    LOBYTE(v95) = (_BYTE)v65;
    swift_setAtWritableKeyPath();
    swift_endAccess();
    swift_release();
    sub_21F83E528((uint64_t)&v107);
  }
  uint64_t v71 = *(void (**)(void *__return_ptr, void, void, void))(v85
                                                                            + *(int *)(type metadata accessor for Vectorizer()
                                                                                     + 40));
  v105[0] = v82;
  uint64_t v106 = v86;
  v71(&v91, v105, v89, *v50);
  uint64_t v72 = v91;
  if ((void)v91 == 0xE000000000000000) {
    goto LABEL_22;
  }
  uint64_t v65 = v50;
  uint64_t v50 = v81;
  uint64_t v63 = *v81;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v74 = *((void *)v63 + 2);
    uint64_t v73 = *((void *)v63 + 3);
    if (v74 >= v73 >> 1) {
      uint64_t v63 = sub_21F759678((char *)(v73 > 1), v74 + 1, 1, v63);
    }
    *((void *)v63 + 2) = v74 + 1;
    *(void *)&v63[8 * v74 + 32] = v72;
    swift_release();
    void *v50 = v63;
    uint64_t v50 = v65;
LABEL_22:
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v87 + 8))(v89, v90);
    if (!__OFADD__(*v50, 1)) {
      break;
    }
    __break(1u);
LABEL_25:
    uint64_t v63 = sub_21F759678(0, *((void *)v63 + 2) + 1, 1, v63);
  }
  ++*v50;
  return result;
}

uint64_t sub_21F83E2A8(uint64_t a1, long long *a2, uint64_t a3)
{
  return sub_21F83CAA0(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t sub_21F83E2B4@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_21F83D26C(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t type metadata accessor for TypedVectorizedProperties()
{
  return sub_21F764F08();
}

uint64_t sub_21F83E2D8(char **a1, uint64_t a2)
{
  return sub_21F83D984(a1, a2, *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(unsigned __int8 *)(v2 + 64), *(void *)(v2 + 72), *(char ***)(v2 + 80), *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_21F83E314(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ChartContentRenderContext.Environment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_21F83E378(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_21F83E3D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for VisualMapper()
{
  return sub_21F764F08();
}

uint64_t type metadata accessor for TypedVectorizedProperties.Position()
{
  return sub_21F764F08();
}

uint64_t sub_21F83E464(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 48);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_21F83E488(uint64_t a1)
{
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 88);
  uint64_t v6 = *(void *)(a1 + 96);
  uint64_t v7 = *(void *)(a1 + 104);
  uint64_t v8 = *(void *)(a1 + 112);
  uint64_t v9 = *(void *)(a1 + 120);
  char v10 = *(unsigned char *)(a1 + 128);
  sub_21F7BB3B4(*(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48));
  sub_21F8512F0(v12, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t sub_21F83E528(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F83E58C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a7 != 1)
  {
    sub_21F7F42EC(a4, a5, a6, a7);
    return sub_21F83E99C(a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  }
  return result;
}

uint64_t type metadata accessor for VisualMapper.Mapping()
{
  return sub_21F764F08();
}

double sub_21F83E64C(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 48) = 1;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 113) = 0u;
  return result;
}

uint64_t sub_21F83E678(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_21F83E6B0()
{
  uint64_t v1 = *(void *)(v0 + 40);
  if (v1)
  {
    if (v1 == 1) {
      goto LABEL_5;
    }
    sub_21F7656A8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  sub_21F83F6FC(*(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));
LABEL_5:
  uint64_t v2 = *(void *)(v0 + 96);
  if (v2)
  {
    if (v2 == 1) {
      goto LABEL_9;
    }
    sub_21F7656A8(*(void *)(v0 + 72), *(void *)(v0 + 80), *(unsigned char *)(v0 + 88));
    swift_bridgeObjectRelease();
  }
  sub_21F83F778(*(void *)(v0 + 104), *(void *)(v0 + 112), *(unsigned char *)(v0 + 120));
LABEL_9:
  uint64_t v3 = *(void *)(v0 + 152);
  if (v3)
  {
    if (v3 == 1) {
      goto LABEL_13;
    }
    sub_21F7656A8(*(void *)(v0 + 128), *(void *)(v0 + 136), *(unsigned char *)(v0 + 144));
    swift_bridgeObjectRelease();
  }
  sub_21F83E970(*(void *)(v0 + 160), *(void *)(v0 + 168), *(void *)(v0 + 176), *(void *)(v0 + 184), *(void *)(v0 + 192), *(unsigned char *)(v0 + 200));
LABEL_13:
  uint64_t v4 = *(void *)(v0 + 232);
  if (v4)
  {
    if (v4 == 1) {
      goto LABEL_21;
    }
    sub_21F7656A8(*(void *)(v0 + 208), *(void *)(v0 + 216), *(unsigned char *)(v0 + 224));
    swift_bridgeObjectRelease();
  }
  int v5 = *(unsigned __int8 *)(v0 + 280);
  if (v5 == 2 || v5 == 1)
  {
    swift_release();
  }
  else if (!*(unsigned char *)(v0 + 280))
  {
    _s6Charts15AnyChartContentVwxx_0(v0 + 240);
  }
LABEL_21:
  uint64_t v6 = *(unsigned __int8 *)(v0 + 336);
  if (v6 <= 0xFB) {
    sub_21F84EDA8(*(void *)(v0 + 288), *(void *)(v0 + 296), *(void *)(v0 + 304), *(void *)(v0 + 312), *(void *)(v0 + 320), *(void *)(v0 + 328), v6, (void (*)(void))sub_21F7F42EC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F85453C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F85453C);
  }
  uint64_t v7 = *(void *)(v0 + 392);
  if (v7)
  {
    if (v7 == 1) {
      goto LABEL_27;
    }
    sub_21F7656A8(*(void *)(v0 + 368), *(void *)(v0 + 376), *(unsigned char *)(v0 + 384));
    swift_bridgeObjectRelease();
  }
  sub_21F83E99C(*(void *)(v0 + 400), *(void *)(v0 + 408), *(void *)(v0 + 416), *(void *)(v0 + 424), *(void *)(v0 + 432), *(void *)(v0 + 440), *(void *)(v0 + 448), *(void *)(v0 + 456), *(void *)(v0 + 464), *(unsigned char *)(v0 + 472));
LABEL_27:
  uint64_t v8 = *(void *)(v0 + 504);
  if (v8)
  {
    if (v8 == 1) {
      goto LABEL_31;
    }
    sub_21F7656A8(*(void *)(v0 + 480), *(void *)(v0 + 488), *(unsigned char *)(v0 + 496));
    swift_bridgeObjectRelease();
  }
  sub_21F83F3BC(*(void *)(v0 + 512), *(void *)(v0 + 520), *(unsigned char *)(v0 + 528));
LABEL_31:
  uint64_t v9 = *(void *)(v0 + 560);
  if (v9)
  {
    if (v9 == 1) {
      goto LABEL_35;
    }
    sub_21F7656A8(*(void *)(v0 + 536), *(void *)(v0 + 544), *(unsigned char *)(v0 + 552));
    swift_bridgeObjectRelease();
  }
  sub_21F83F6FC(*(void *)(v0 + 568), *(void *)(v0 + 576), *(unsigned char *)(v0 + 584));
LABEL_35:
  uint64_t v10 = *(void *)(v0 + 616);
  if (v10)
  {
    if (v10 == 1) {
      goto LABEL_39;
    }
    sub_21F7656A8(*(void *)(v0 + 592), *(void *)(v0 + 600), *(unsigned char *)(v0 + 608));
    swift_bridgeObjectRelease();
  }
  sub_21F83F300(*(void *)(v0 + 624), *(void *)(v0 + 632), *(void *)(v0 + 640), *(void *)(v0 + 648), *(unsigned char *)(v0 + 656));
LABEL_39:
  uint64_t v11 = *(void *)(v0 + 688);
  if (v11)
  {
    if (v11 == 1) {
      goto LABEL_43;
    }
    sub_21F7656A8(*(void *)(v0 + 664), *(void *)(v0 + 672), *(unsigned char *)(v0 + 680));
    swift_bridgeObjectRelease();
  }
  sub_21F83F300(*(void *)(v0 + 696), *(void *)(v0 + 704), *(void *)(v0 + 712), *(void *)(v0 + 720), *(unsigned char *)(v0 + 728));
LABEL_43:

  return MEMORY[0x270FA0238](v0, 729, 7);
}

uint64_t sub_21F83E970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6 == 2 || a6 == 1) {
    return swift_release();
  }
  if (!a6) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_21F83E99C(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, char a10)
{
  if (a10 == 2 || a10 == 1)
  {
    return swift_release();
  }
  else if (!a10)
  {
    sub_21F7656A8(result, a2, a3 & 1);
    swift_bridgeObjectRelease();
    return sub_21F770E38(a5, a6, a7);
  }
  return result;
}

uint64_t type metadata accessor for TypedVectorizedProperties.SymbolSizeMapper()
{
  return sub_21F764F08();
}

uint64_t sub_21F83EA60()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(type metadata accessor for AnyConcreteScale() - 8);
  uint64_t v28 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v4 = (v28 + 48) & ~v28;
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = type metadata accessor for PlottableProjection();
  uint64_t v27 = *(unsigned __int8 *)(*(void *)(v6 - 8) + 80);
  uint64_t v7 = (v4 + v5 + v27) & ~v27;
  uint64_t v26 = *(void *)(*(void *)(v6 - 8) + 64);
  uint64_t v8 = *(void *)(v1 - 8);
  uint64_t v25 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v24 = *(void *)(v8 + 64);
  uint64_t v9 = v0 + v4;
  swift_getEnumCaseMultiPayload();
  swift_release();
  uint64_t v10 = (int *)type metadata accessor for ConcreteScale();
  uint64_t v11 = v0 + v4 + v10[9];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v11, 1, v1)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v1);
  }
  if (*(void *)(v9 + v10[10])) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = v9 + v10[12];
  int v13 = *(unsigned __int8 *)(v12 + 8);
  uint64_t v14 = v7;
  if (v13 != 255) {
    sub_21F76D54C(*(void *)v12, v13 & 1);
  }
  sub_21F7656A8(*(void *)(v0 + v7), *(void *)(v0 + v7 + 8), *(unsigned char *)(v0 + v7 + 16));
  swift_bridgeObjectRelease();
  uint64_t v15 = v0 + v7 + *(int *)(v6 + 44);
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v15, v2);
      break;
    case 1u:
      uint64_t v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
      v16(v15, v2);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v16(v15 + *(int *)(TupleTypeMetadata2 + 48), v2);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v18 = sub_21FA24310();
      uint64_t v19 = sub_21FA24320();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v15 + *(int *)(TupleTypeMetadata3 + 48), v18);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v15 + *(int *)(TupleTypeMetadata3 + 64), v19);
      break;
    default:
      break;
  }
  uint64_t v21 = (v14 + v26 + v25) & ~v25;
  uint64_t v22 = v21 + v24;
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0 + v21, v1);

  return MEMORY[0x270FA0238](v0, v22, v28 | v27 | v25 | 7);
}

uint64_t sub_21F83EEF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v9 = *(void *)(type metadata accessor for AnyConcreteScale() - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 64);
  uint64_t v12 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  unint64_t v13 = (v10 + v11 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = (uint64_t)v2
      + ((v13 + *(void *)(v12 + 64) + *(unsigned __int8 *)(*(void *)(v6 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80));

  return sub_21F816074(a1, (uint64_t)v2 + v10, (uint64_t)v2 + v13, v14, v5, v6, v7, v8, a2);
}

uint64_t sub_21F83F06C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_21F83F0A4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_21F815B18(a1, a2);
}

uint64_t sub_21F83F0AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_21F83F114@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 520);
  uint64_t v3 = *(void *)(a1 + 528);
  uint64_t v4 = *(void *)(a1 + 536);
  uint64_t v5 = *(void *)(a1 + 544);
  uint64_t v6 = *(void *)(a1 + 552);
  uint64_t v7 = *(void *)(a1 + 560);
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 40) = v7;
  char v8 = *(unsigned char *)(a1 + 568);
  *(unsigned char *)(a2 + 48) = v8;
  return sub_21F83F7D0(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_21F83F16C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 464);
  uint64_t v2 = *(void *)(a1 + 472);
  uint64_t v4 = *(void *)(a1 + 480);
  uint64_t v5 = *(void *)(a1 + 488);
  uint64_t v6 = *(void *)(a1 + 496);
  uint64_t v7 = *(void *)(a1 + 504);
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 40) = v7;
  char v8 = *(unsigned char *)(a1 + 512);
  *(unsigned char *)(a2 + 48) = v8;
  return sub_21F83F4AC(v3, v2, v4, v5, v6, v7, v8);
}

uint64_t sub_21F83F1B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 576);
  uint64_t v3 = *(void *)(a1 + 584);
  uint64_t v4 = *(void *)(a1 + 592);
  uint64_t v5 = *(void *)(a1 + 600);
  uint64_t v6 = *(void *)(a1 + 608);
  uint64_t v7 = *(void *)(a1 + 616);
  uint64_t v8 = *(void *)(a1 + 624);
  uint64_t v9 = *(void *)(a1 + 632);
  char v10 = *(unsigned char *)(a1 + 640);
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = v8;
  *(void *)(a2 + 56) = v9;
  *(unsigned char *)(a2 + 64) = v10;
  return sub_21F83F444(v2, v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_21F83F228@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 648);
  uint64_t v3 = *(void *)(a1 + 656);
  uint64_t v4 = *(void *)(a1 + 664);
  uint64_t v5 = *(void *)(a1 + 672);
  uint64_t v6 = *(void *)(a1 + 680);
  uint64_t v7 = *(void *)(a1 + 688);
  uint64_t v8 = *(void *)(a1 + 696);
  uint64_t v9 = *(void *)(a1 + 704);
  char v10 = *(unsigned char *)(a1 + 712);
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = v8;
  *(void *)(a2 + 56) = v9;
  *(unsigned char *)(a2 + 64) = v10;
  return sub_21F83F444(v2, v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_21F83F298(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, char a9)
{
  if (a4 != 1)
  {
    sub_21F7F42EC(result, a2, a3, a4);
    return sub_21F83F300(a5, a6, a7, a8, a9);
  }
  return result;
}

uint64_t sub_21F83F300(uint64_t result, uint64_t a2, char a3, uint64_t a4, char a5)
{
  if (a5 == 2 || a5 == 1)
  {
    return swift_release();
  }
  else if (!a5)
  {
    sub_21F7656A8(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_21F83F36C(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a4 != 1)
  {
    sub_21F7F42EC(result, a2, a3, a4);
    return sub_21F83F3BC(a5, a6, a7);
  }
  return result;
}

uint64_t sub_21F83F3BC(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2 || a3 == 1) {
    return swift_release();
  }
  if (!a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_21F83F3E8(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F83F444(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, char a9)
{
  if (a4 != 1)
  {
    sub_21F7BB3B4(result, a2, a3, a4);
    return sub_21F8513C8(a5, a6, a7, a8, a9);
  }
  return result;
}

uint64_t sub_21F83F4AC(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a4 != 1)
  {
    sub_21F7BB3B4(result, a2, a3, a4);
    return sub_21F85139C(a5, a6, a7);
  }
  return result;
}

uint64_t type metadata accessor for XYRenderer.ResolvedKeyframe()
{
  return swift_getGenericMetadata();
}

uint64_t sub_21F83F514@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21F839E80(a1, v2[2], v2[3], v2[4], v2[6], v2[7], v2[8], a2);
}

unint64_t sub_21F83F548()
{
  unint64_t result = qword_267EE7B18;
  if (!qword_267EE7B18)
  {
    sub_21F779EA4(&qword_267EE7B10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE7B18);
  }
  return result;
}

void sub_21F83F5A4(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_21F83A220(a1, a2, *(void *)(v3 + 80), *(void *)(v3 + 88), *(void *)(v3 + 96), *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), a3, *(void *)(v3 + 40), *(void *)(v3 + 48), *(_OWORD *)(v3 + 56));
}

uint64_t sub_21F83F5E4(char *a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, char *))(v1 + 80);
  uint64_t v4 = *(void *)a1;
  type metadata accessor for XYRenderer();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v3(v4, &a1[*(int *)(TupleTypeMetadata2 + 48)]);
}

uint64_t sub_21F83F6A0(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a4 != 1)
  {
    sub_21F7F42EC(result, a2, a3, a4);
    return sub_21F83F6FC(a5, a6, a7);
  }
  return result;
}

uint64_t sub_21F83F6FC(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1 || a3 == 2) {
    return swift_release();
  }
  return result;
}

uint64_t sub_21F83F71C(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  if (a4 != 1)
  {
    sub_21F7F42EC(result, a2, a3, a4);
    return sub_21F83F778(a5, a6, a7);
  }
  return result;
}

uint64_t sub_21F83F778(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_release();
  }
  return result;
}

uint64_t sub_21F83F794(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_21F83F7B0(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1 || a3 == 2) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_21F83F7D0(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a4 != 1)
  {
    sub_21F7BB3B4(result, a2, a3, a4);
    return sub_21F83F7B0(a5, a6, a7);
  }
  return result;
}

uint64_t sub_21F83F82C(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  if (a4 != 1)
  {
    sub_21F7BB3B4(result, a2, a3, a4);
    return sub_21F83F794(a5, a6, a7);
  }
  return result;
}

uint64_t sub_21F83F888@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + 16;
  swift_beginAccess();
  return sub_21F76C978(v3, a2, qword_26AD44558);
}

uint64_t sub_21F83F8E4@<X0>(uint64_t *a1@<X8>)
{
  return sub_21F83F944(MEMORY[0x263F8D538], (uint64_t)&protocol witness table for Double, MEMORY[0x263F8D568], a1);
}

uint64_t sub_21F83F914@<X0>(uint64_t *a1@<X8>)
{
  return sub_21F83F944(MEMORY[0x263F8D310], (uint64_t)&protocol witness table for String, MEMORY[0x263F8D338], a1);
}

uint64_t sub_21F83F944@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  uint64_t result = sub_21F959B04(v4[9], v4[10], v4[2], a1, v4[5], v4[6], a2, a3);
  *a4 = result;
  a4[1] = v7;
  return result;
}

uint64_t sub_21F83F99C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_21F83F9D4(long long *a1, uint64_t a2, uint64_t a3)
{
  return sub_21F83C7F0(a1, a2, a3, v3[6], v3[7], v3[2], v3[3], v3[4], v3[5]);
}

uint64_t sub_21F83FA04(char *a1, uint64_t a2, uint64_t a3)
{
  char v4 = *a1;
  uint64_t v5 = *((void *)a1 + 1);
  long long v6 = v3[2];
  v8[1] = v3[1];
  v8[2] = v6;
  v8[3] = v3[3];
  uint64_t v9 = a2;
  char v10 = v4;
  uint64_t v11 = v5;
  return sub_21F7809C0(a3, (void (*)(void))sub_21F83FA78, (uint64_t)v8);
}

uint64_t sub_21F83FA78()
{
  return sub_21F83C980(*(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(unsigned char *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_21F83FAB4()
{
  return sub_21F83C86C(v0[6], v0[7], v0[8], v0[9], v0[10], v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_21F83FAEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  if (a12 != 255) {
    return sub_21F82B5F8(a11, a12 & 1);
  }
  return result;
}

uint64_t sub_21F83FB08()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = (int *)(type metadata accessor for PlottableProjection() - 8);
  uint64_t v3 = *(unsigned __int8 *)(*(void *)v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(*(void *)v2 + 64);
  sub_21F7656A8(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8), *(unsigned char *)(v0 + v4 + 16));
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v4 + v2[13];
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v6, v1);
      break;
    case 1u:
      uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8);
      v7(v6, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v7(v6 + *(int *)(TupleTypeMetadata2 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v9 = sub_21FA24310();
      uint64_t v10 = sub_21FA24320();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v6 + *(int *)(TupleTypeMetadata3 + 48), v9);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v6 + *(int *)(TupleTypeMetadata3 + 64), v10);
      break;
    default:
      break;
  }

  return MEMORY[0x270FA0238](v0, v4 + v5, v3 | 7);
}

double sub_21F83FDB4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v8 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  uint64_t v9 = (uint64_t)v2 + ((*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));

  *(void *)&double result = sub_21F816658(a1, v9, v5, v6, v7, a2).n128_u64[0];
  return result;
}

uint64_t sub_21F83FE5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 72);
}

uint64_t sub_21F83FE64()
{
  uint64_t result = type metadata accessor for XYRenderer();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21F83FF2C(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v313 = a3[2];
  uint64_t v4 = *(void *)(v313 - 8);
  uint64_t v317 = *(void *)(v4 + 64);
  uint64_t v306 = a3[3];
  uint64_t v5 = *(void *)(v306 - 8);
  uint64_t v307 = v5;
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = sub_21FA24310();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v309 = v8;
  uint64_t v310 = v7;
  int v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v9;
  uint64_t v11 = sub_21FA24320();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = v5;
  uint64_t v14 = *(_DWORD *)(v12 + 80);
  uint64_t v15 = v14 | v9 | v6;
  uint64_t v311 = v15 + 32;
  unint64_t v16 = *(void *)(v13 + 64);
  unint64_t v17 = v16 + v6;
  uint64_t v316 = v6;
  uint64_t v18 = v15 | 7;
  unint64_t v19 = ((v16 + v316) & ~v316) + v16;
  unint64_t v304 = v16;
  if (v19 <= v16) {
    unint64_t v19 = *(void *)(v13 + 64);
  }
  uint64_t v308 = v9 + 8;
  uint64_t v20 = *(void *)(v8 + 64);
  uint64_t v21 = *(void *)(*(void *)(v11 - 8) + 64);
  unint64_t v22 = ((v20 + v14 + (v308 & ~(unint64_t)v9)) & ~v14) + v21;
  if (v19 <= v22) {
    unint64_t v23 = ((v20 + v14 + ((v9 + 8) & ~(unint64_t)v9)) & ~v14) + v21;
  }
  else {
    unint64_t v23 = v19;
  }
  if (v23 <= 0x10) {
    unint64_t v23 = 16;
  }
  unint64_t v315 = v23;
  unint64_t v24 = v23 + ((v15 + 32) & ~(v15 | 7));
  unint64_t v25 = v24 + 1;
  unint64_t v26 = ((v24 + 1 + v18) & ~v18) + v24 + 1;
  if (v24 + 1 > v26) {
    unint64_t v26 = v24 + 1;
  }
  unint64_t v27 = (v24 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v26 <= v27 + 113) {
    unint64_t v26 = v27 + 113;
  }
  unint64_t v28 = v27 + 49;
  if (v26 > v28) {
    unint64_t v28 = v26;
  }
  uint64_t v29 = 25;
  if (v28 <= 0x19) {
    uint64_t v30 = 25;
  }
  else {
    uint64_t v30 = v28;
  }
  int v31 = *(_DWORD *)(*(void *)(a3[4] - 8) + 80);
  uint64_t v32 = v31;
  uint64_t v33 = v14 | v9 | v31;
  uint64_t v34 = v33 | 7;
  uint64_t v35 = v33 + 32;
  uint64_t v36 = (v33 + 32) & ~(v33 | 7);
  unint64_t v37 = *(void *)(*(void *)(a3[4] - 8) + 64);
  unint64_t v38 = v37 + v31;
  if (((v37 + v32) & ~v32) + v37 > v37) {
    v37 += (v37 + v31) & ~(unint64_t)v31;
  }
  if (v37 <= v22) {
    unint64_t v37 = v22;
  }
  if (v37 <= 0x10) {
    unint64_t v37 = 16;
  }
  unint64_t v312 = v37;
  unint64_t v39 = v37 + v36;
  uint64_t v40 = v39 + 1 + v34;
  if (v39 + 1 > (v40 & ~v34) + v39 + 1) {
    unint64_t v41 = v39 + 1;
  }
  else {
    unint64_t v41 = (v40 & ~v34) + v39 + 1;
  }
  unint64_t v42 = v39 + 8;
  unint64_t v43 = (v39 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v41 <= v43 + 113) {
    unint64_t v41 = v43 + 113;
  }
  unint64_t v44 = v43 + 49;
  if (v41 > v44) {
    unint64_t v44 = v41;
  }
  if (v44 > 0x19) {
    uint64_t v29 = v44;
  }
  uint64_t v45 = v15 | *(_DWORD *)(v4 + 80) & 0xF8 | v31 | 7u;
  if (v45 != 7
    || ((v9 | *(_DWORD *)(v12 + 80) | v6 | v31 | *(_DWORD *)(v4 + 80)) & 0x100000) != 0
    || (uint64_t v46 = v18 + v317,
        uint64_t v47 = v30 + v34 + 1,
        ((((((((((v29 + ((v47 + ((v18 + v317) & ~v18)) & ~v34) + 8) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16 > 0x18))
  {
    uint64_t v56 = *a2;
    *a1 = *a2;
    uint64_t v48 = (uint64_t *)(v56 + ((v45 + 16) & ~v45));
    swift_retain();
  }
  else
  {
    unint64_t v300 = (v29 + ((v47 + (v46 & ~v18)) & ~v34) + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v303 = v30 + v34 + 1;
    unint64_t v297 = v25;
    unint64_t v287 = v38;
    uint64_t v288 = v40;
    uint64_t v299 = v35;
    uint64_t v290 = *(void *)(a3[4] - 8);
    unint64_t v291 = v42;
    uint64_t v289 = a3[4];
    uint64_t v293 = v20 + v14;
    uint64_t v294 = *(void *)(v11 - 8);
    uint64_t v295 = v11;
    uint64_t v318 = v30;
    uint64_t v319 = v29;
    uint64_t v48 = a1;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 16))(a1, a2, v313);
    unint64_t v49 = ((unint64_t)a1 + v46) & ~v18;
    uint64_t v298 = ~v18;
    uint64_t v50 = (unsigned __int8 *)(((unint64_t)a2 + v46) & ~v18);
    unsigned int v51 = v50[v318];
    unsigned int v52 = v51 - 8;
    if (v51 < 8)
    {
      uint64_t v54 = v319;
    }
    else
    {
      if (v318 <= 3) {
        uint64_t v53 = v318;
      }
      else {
        uint64_t v53 = 4;
      }
      uint64_t v54 = v319;
      switch(v53)
      {
        case 1:
          int v55 = *v50;
          if (v318 < 4) {
            goto LABEL_49;
          }
          goto LABEL_50;
        case 2:
          int v55 = *(unsigned __int16 *)v50;
          if (v318 >= 4) {
            goto LABEL_50;
          }
          goto LABEL_49;
        case 3:
          int v55 = *(unsigned __int16 *)(((unint64_t)a2 + v46) & ~v18) | (*(unsigned __int8 *)((((unint64_t)a2 + v46) & ~v18)
                                                                                                 + 2) << 16);
          if (v318 >= 4) {
            goto LABEL_50;
          }
          goto LABEL_49;
        case 4:
          int v55 = *(_DWORD *)v50;
          if (v318 < 4) {
LABEL_49:
          }
            v55 |= v52 << (8 * v318);
LABEL_50:
          unsigned int v51 = v55 + 8;
          break;
        default:
          break;
      }
    }
    uint64_t v57 = v18;
    unint64_t v58 = ~(unint64_t)v6;
    uint64_t v292 = ~v10;
    uint64_t v59 = ~v14;
    uint64_t v305 = ~v34;
    uint64_t v286 = ~v32;
    uint64_t v60 = v54 + 1;
    unint64_t v314 = v300 + 8;
    uint64_t v296 = ~v14;
    unint64_t v61 = v315;
    switch(v51)
    {
      case 1u:
        long long v64 = *(_OWORD *)v50;
        unint64_t v63 = v49;
        *(_OWORD *)(v49 + 9) = *(_OWORD *)(v50 + 9);
        *(_OWORD *)unint64_t v49 = v64;
        *(unsigned char *)(v49 + v318) = 1;
        goto LABEL_57;
      case 2u:
        unint64_t v63 = v49;
        *(void *)unint64_t v49 = *(void *)v50;
        *(unsigned char *)(v49 + v318) = 2;
        uint64_t v65 = v50;
        goto LABEL_56;
      case 3u:
        unint64_t v63 = v49;
        *(void *)unint64_t v49 = *(void *)v50;
        *(void *)(v49 + 8) = *((void *)v50 + 1);
        *(unsigned char *)(v49 + v318) = 3;
        uint64_t v65 = v50;
        swift_retain();
LABEL_56:
        swift_retain();
        uint64_t v54 = v319;
        uint64_t v50 = v65;
        goto LABEL_57;
      case 4u:
        uint64_t v70 = *(void *)v50;
        uint64_t v71 = *((void *)v50 + 1);
        char v72 = v50[16];
        uint64_t v73 = v50;
        sub_21F7652C0(*(void *)v50, v71, v72);
        *(void *)unint64_t v49 = v70;
        *(void *)(v49 + 8) = v71;
        *(unsigned char *)(v49 + 16) = v72;
        unint64_t v63 = v49;
        *(void *)(v49 + 24) = *((void *)v73 + 3);
        uint64_t v74 = (void *)((v311 + v49) & v298);
        unint64_t v301 = (unint64_t)v73;
        uint64_t v75 = (unsigned __int8 *)((unint64_t)&v73[v311] & v298);
        unsigned int v76 = v75[v315];
        swift_bridgeObjectRetain();
        if (v76 >= 5)
        {
          if (v315 <= 3) {
            uint64_t v77 = v315;
          }
          else {
            uint64_t v77 = 4;
          }
          switch(v77)
          {
            case 1:
              int v78 = *v75;
              goto LABEL_87;
            case 2:
              int v78 = *(unsigned __int16 *)v75;
              goto LABEL_87;
            case 3:
              int v78 = *(unsigned __int16 *)v75 | (v75[2] << 16);
              goto LABEL_87;
            case 4:
              int v78 = *(_DWORD *)v75;
LABEL_87:
              if (v315 < 4) {
                unsigned int v76 = (v78 | ((v76 - 5) << (8 * v315))) + 5;
              }
              else {
                unsigned int v76 = v78 + 5;
              }
              break;
            default:
              break;
          }
        }
        uint64_t v66 = v305;
        uint64_t v69 = v60;
        switch(v76)
        {
          case 1u:
            uint64_t v106 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v307 + 16);
            v106(v74, v75, v306);
            v106((void *)(((unint64_t)v74 + v316 + v304) & ~v316), (unsigned __int8 *)((unint64_t)&v75[v316 + v304] & ~v316), v306);
            *((unsigned char *)v74 + v315) = 1;
            break;
          case 2u:
            void *v74 = *(void *)v75;
            *((unsigned char *)v74 + v315) = 2;
            swift_retain();
            break;
          case 3u:
            void *v74 = *(void *)v75;
            *(void *)(((v311 + v49) & v298) + 8) = *((void *)v75 + 1);
            *((unsigned char *)v74 + v315) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            void *v74 = *(void *)v75;
            unint64_t v107 = ((unint64_t)v74 + v308) & v292;
            unint64_t v108 = (unint64_t)&v75[v308] & v292;
            uint64_t v109 = *(void (**)(unint64_t, unint64_t, uint64_t))(v309 + 16);
            swift_retain();
            v109(v107, v108, v310);
            uint64_t v66 = v305;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v294 + 16))((v293 + v107) & v59, (v293 + v108) & v59, v295);
            *((unsigned char *)v74 + v315) = 4;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v307 + 16))(v74, v75, v306);
            *((unsigned char *)v74 + v315) = 0;
            break;
        }
        unint64_t v68 = v314;
        char v110 = 4;
        goto LABEL_162;
      case 5u:
        unint64_t v284 = (unint64_t)a1 + v46;
        unint64_t v285 = (unint64_t)a2 + v46;
        uint64_t v79 = *(void *)v50;
        uint64_t v80 = *((void *)v50 + 1);
        char v81 = v50[16];
        uint64_t v82 = v50;
        sub_21F7652C0(*(void *)v50, v80, v81);
        *(void *)unint64_t v49 = v79;
        *(void *)(v49 + 8) = v80;
        *(unsigned char *)(v49 + 16) = v81;
        *(void *)(v49 + 24) = *((void *)v82 + 3);
        uint64_t v83 = (void *)((v311 + v49) & v298);
        unint64_t v301 = (unint64_t)v82;
        uint64_t v84 = (unsigned __int8 *)((unint64_t)&v82[v311] & v298);
        unsigned int v85 = v84[v315];
        swift_bridgeObjectRetain();
        if (v85 >= 5)
        {
          if (v315 <= 3) {
            uint64_t v86 = v315;
          }
          else {
            uint64_t v86 = 4;
          }
          switch(v86)
          {
            case 1:
              int v87 = *v84;
              goto LABEL_100;
            case 2:
              int v87 = *(unsigned __int16 *)v84;
              goto LABEL_100;
            case 3:
              int v87 = *(unsigned __int16 *)v84 | (v84[2] << 16);
              goto LABEL_100;
            case 4:
              int v87 = *(_DWORD *)v84;
LABEL_100:
              if (v315 < 4) {
                unsigned int v85 = (v87 | ((v85 - 5) << (8 * v315))) + 5;
              }
              else {
                unsigned int v85 = v87 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v85)
        {
          case 1u:
            uint64_t v111 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v307 + 16);
            v111(v83, v84, v306);
            v111((void *)(((unint64_t)v83 + v316 + v304) & v58), (unsigned __int8 *)((unint64_t)&v84[v316 + v304] & v58), v306);
            unint64_t v61 = v315;
            char v112 = 1;
            goto LABEL_109;
          case 2u:
            *uint64_t v83 = *(void *)v84;
            *((unsigned char *)v83 + v315) = 2;
            swift_retain();
            break;
          case 3u:
            *uint64_t v83 = *(void *)v84;
            *(void *)(((v311 + v49) & v298) + 8) = *((void *)v84 + 1);
            *((unsigned char *)v83 + v315) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *uint64_t v83 = *(void *)v84;
            unint64_t v113 = ((unint64_t)v83 + v308) & v292;
            unint64_t v114 = (unint64_t)&v84[v308] & v292;
            char v115 = *(void (**)(unint64_t, unint64_t, uint64_t))(v309 + 16);
            swift_retain();
            v115(v113, v114, v310);
            unint64_t v61 = v315;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v294 + 16))((v293 + v113) & v59, (v293 + v114) & v59, v295);
            char v112 = 4;
LABEL_109:
            *((unsigned char *)v83 + v61) = v112;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v307 + 16))(v83, v84, v306);
            *((unsigned char *)v83 + v315) = 0;
            break;
        }
        unint64_t v116 = ((v284 | v57) + v297) & v298;
        unint64_t v117 = ((v285 | v57) + v297) & v298;
        uint64_t v118 = *(void *)v117;
        uint64_t v119 = *(void *)(v117 + 8);
        char v120 = *(unsigned char *)(v117 + 0x10);
        sub_21F7652C0(*(void *)v117, v119, v120);
        *(void *)unint64_t v116 = v118;
        *(void *)(v116 + 8) = v119;
        *(unsigned char *)(v116 + 16) = v120;
        *(void *)(v116 + 24) = *(void *)(v117 + 0x18);
        uint64_t v121 = (void *)((v311 + v116) & v298);
        uint64_t v122 = (unsigned __int8 *)((v311 + v117) & v298);
        unsigned int v123 = v122[v61];
        swift_bridgeObjectRetain();
        if (v123 < 5)
        {
          uint64_t v66 = v305;
          unint64_t v63 = v49;
          uint64_t v69 = v60;
          uint64_t v125 = v296;
        }
        else
        {
          if (v61 <= 3) {
            uint64_t v124 = v61;
          }
          else {
            uint64_t v124 = 4;
          }
          uint64_t v66 = v305;
          unint64_t v63 = v49;
          uint64_t v69 = v60;
          uint64_t v125 = v296;
          switch(v124)
          {
            case 1:
              int v126 = *v122;
              goto LABEL_152;
            case 2:
              int v126 = *(unsigned __int16 *)v122;
              goto LABEL_152;
            case 3:
              int v126 = *(unsigned __int16 *)v122 | (v122[2] << 16);
              goto LABEL_152;
            case 4:
              int v126 = *(_DWORD *)v122;
LABEL_152:
              if (v61 < 4) {
                unsigned int v123 = (v126 | ((v123 - 5) << (8 * v61))) + 5;
              }
              else {
                unsigned int v123 = v126 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v123)
        {
          case 1u:
            uint64_t v161 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v307 + 16);
            v161(v121, v122, v306);
            v161((void *)(((unint64_t)v121 + v17) & ~v316), (unsigned __int8 *)((unint64_t)&v122[v17] & ~v316), v306);
            *((unsigned char *)v121 + v61) = 1;
            break;
          case 2u:
            *uint64_t v121 = *(void *)v122;
            *((unsigned char *)v121 + v61) = 2;
            swift_retain();
            break;
          case 3u:
            *uint64_t v121 = *(void *)v122;
            v121[1] = *((void *)v122 + 1);
            *((unsigned char *)v121 + v61) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *uint64_t v121 = *(void *)v122;
            unint64_t v162 = v61;
            unint64_t v163 = ((unint64_t)v121 + v308) & v292;
            unint64_t v164 = (unint64_t)&v122[v308] & v292;
            uint64_t v165 = *(void (**)(unint64_t, unint64_t, uint64_t))(v309 + 16);
            swift_retain();
            v165(v163, v164, v310);
            uint64_t v66 = v305;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v294 + 16))((v293 + v163) & v125, (v293 + v164) & v125, v295);
            *((unsigned char *)v121 + v162) = 4;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v307 + 16))(v121, v122, v306);
            *((unsigned char *)v121 + v61) = 0;
            break;
        }
        unint64_t v68 = v314;
        char v110 = 5;
LABEL_162:
        *(unsigned char *)(v63 + v318) = v110;
        uint64_t v48 = a1;
        goto LABEL_163;
      case 6u:
        uint64_t v88 = *(void *)v50;
        uint64_t v89 = *((void *)v50 + 1);
        char v90 = v50[16];
        uint64_t v91 = v50;
        sub_21F7652C0(*(void *)v50, v89, v90);
        *(void *)unint64_t v49 = v88;
        *(void *)(v49 + 8) = v89;
        *(unsigned char *)(v49 + 16) = v90;
        unint64_t v63 = v49;
        *(void *)(v49 + 24) = *((void *)v91 + 3);
        char v92 = (void *)((v311 + v49) & v298);
        unint64_t v301 = (unint64_t)v91;
        uint64_t v93 = (unsigned __int8 *)((unint64_t)&v91[v311] & v298);
        unsigned int v94 = v93[v315];
        swift_bridgeObjectRetain();
        if (v94 < 5)
        {
          uint64_t v69 = v60;
        }
        else
        {
          if (v315 <= 3) {
            uint64_t v95 = v315;
          }
          else {
            uint64_t v95 = 4;
          }
          uint64_t v69 = v60;
          switch(v95)
          {
            case 1:
              int v96 = *v93;
              goto LABEL_120;
            case 2:
              int v96 = *(unsigned __int16 *)v93;
              goto LABEL_120;
            case 3:
              int v96 = *(unsigned __int16 *)v93 | (v93[2] << 16);
              goto LABEL_120;
            case 4:
              int v96 = *(_DWORD *)v93;
LABEL_120:
              if (v315 < 4) {
                unsigned int v94 = (v96 | ((v94 - 5) << (8 * v315))) + 5;
              }
              else {
                unsigned int v94 = v96 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v94)
        {
          case 1u:
            uint64_t v131 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v307 + 16);
            v131(v92, v93, v306);
            v131((void *)(((unint64_t)v92 + v316 + v304) & v58), (unsigned __int8 *)((unint64_t)&v93[v316 + v304] & v58), v306);
            *((unsigned char *)v92 + v315) = 1;
            break;
          case 2u:
            *char v92 = *(void *)v93;
            *((unsigned char *)v92 + v315) = 2;
            swift_retain();
            break;
          case 3u:
            *char v92 = *(void *)v93;
            *(void *)(((v311 + v49) & v298) + 8) = *((void *)v93 + 1);
            *((unsigned char *)v92 + v315) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *char v92 = *(void *)v93;
            unint64_t v127 = ((unint64_t)v92 + v308) & v292;
            unint64_t v128 = (unint64_t)&v93[v308] & v292;
            uint64_t v129 = v59;
            char v130 = *(void (**)(unint64_t, unint64_t, uint64_t))(v309 + 16);
            swift_retain();
            v130(v127, v128, v310);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v294 + 16))((v293 + v127) & v129, (v293 + v128) & v129, v295);
            *((unsigned char *)v92 + v315) = 4;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v307 + 16))(v92, v93, v306);
            *((unsigned char *)v92 + v315) = 0;
            break;
        }
        unint64_t v68 = v314;
        unint64_t v132 = ((v49 | 7) + v297) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v133 = ((v301 | 7) + v297) & 0xFFFFFFFFFFFFFFF8;
        *(unsigned char *)unint64_t v132 = *(unsigned char *)v133;
        uint64_t v134 = (_OWORD *)(v132 + 8);
        uint64_t v135 = (_OWORD *)(v133 + 8);
        if (*(unsigned __int8 *)(v133 + 96) == 255)
        {
          long long v141 = *(_OWORD *)(v133 + 24);
          *uint64_t v134 = *v135;
          *(_OWORD *)(v132 + 24) = v141;
          long long v142 = *(_OWORD *)(v133 + 40);
          long long v143 = *(_OWORD *)(v133 + 56);
          long long v144 = *(_OWORD *)(v133 + 72);
          *(_OWORD *)(v132 + 81) = *(_OWORD *)(v133 + 81);
          *(_OWORD *)(v132 + 56) = v143;
          *(_OWORD *)(v132 + 72) = v144;
          *(_OWORD *)(v132 + 40) = v142;
        }
        else
        {
          *uint64_t v134 = *v135;
          long long v136 = *(_OWORD *)(v133 + 24);
          long long v137 = *(_OWORD *)(v133 + 40);
          long long v138 = *(_OWORD *)(v133 + 72);
          *(_OWORD *)(v132 + 56) = *(_OWORD *)(v133 + 56);
          *(_OWORD *)(v132 + 72) = v138;
          *(_OWORD *)(v132 + 24) = v136;
          *(_OWORD *)(v132 + 40) = v137;
          uint64_t v139 = *(void *)(v133 + 88);
          char v140 = *(unsigned char *)(v133 + 96);
          sub_21F829E74(v139, v140);
          *(void *)(v132 + 88) = v139;
          *(unsigned char *)(v132 + 96) = v140;
        }
        uint64_t v145 = *(void *)(v133 + 104);
        char v146 = *(unsigned char *)(v133 + 112);
        sub_21F829E74(v145, v146);
        *(void *)(v132 + 104) = v145;
        *(unsigned char *)(v132 + 112) = v146;
        *(unsigned char *)(v49 + v318) = 6;
        uint64_t v48 = a1;
        uint64_t v66 = v305;
LABEL_163:
        uint64_t v50 = (unsigned __int8 *)v301;
        uint64_t v67 = v303;
        uint64_t v54 = v319;
        break;
      case 7u:
        uint64_t v97 = *(void *)v50;
        uint64_t v98 = *((void *)v50 + 1);
        char v99 = v50[16];
        uint64_t v100 = v50;
        sub_21F7652C0(*(void *)v50, v98, v99);
        *(void *)unint64_t v49 = v97;
        *(void *)(v49 + 8) = v98;
        *(unsigned char *)(v49 + 16) = v99;
        unint64_t v63 = v49;
        *(void *)(v49 + 24) = *((void *)v100 + 3);
        uint64_t v101 = (void *)((v311 + v49) & v298);
        unint64_t v302 = (unint64_t)v100;
        uint64_t v102 = (unsigned __int8 *)((unint64_t)&v100[v311] & v298);
        unsigned int v103 = v102[v315];
        swift_bridgeObjectRetain();
        if (v103 < 5)
        {
          uint64_t v69 = v60;
        }
        else
        {
          if (v315 <= 3) {
            uint64_t v104 = v315;
          }
          else {
            uint64_t v104 = 4;
          }
          uint64_t v69 = v60;
          switch(v104)
          {
            case 1:
              int v105 = *v102;
              goto LABEL_136;
            case 2:
              int v105 = *(unsigned __int16 *)v102;
              goto LABEL_136;
            case 3:
              int v105 = *(unsigned __int16 *)v102 | (v102[2] << 16);
              goto LABEL_136;
            case 4:
              int v105 = *(_DWORD *)v102;
LABEL_136:
              if (v315 < 4) {
                unsigned int v103 = (v105 | ((v103 - 5) << (8 * v315))) + 5;
              }
              else {
                unsigned int v103 = v105 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v103)
        {
          case 1u:
            uint64_t v147 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v307 + 16);
            v147(v101, v102, v306);
            v147((void *)(((unint64_t)v101 + v316 + v304) & v58), (unsigned __int8 *)((unint64_t)&v102[v316 + v304] & v58), v306);
            *((unsigned char *)v101 + v315) = 1;
            break;
          case 2u:
            *uint64_t v101 = *(void *)v102;
            *((unsigned char *)v101 + v315) = 2;
            swift_retain();
            break;
          case 3u:
            *uint64_t v101 = *(void *)v102;
            *(void *)(((v311 + v49) & v298) + 8) = *((void *)v102 + 1);
            *((unsigned char *)v101 + v315) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *uint64_t v101 = *(void *)v102;
            unint64_t v148 = ((unint64_t)v101 + v308) & v292;
            unint64_t v149 = (unint64_t)&v102[v308] & v292;
            uint64_t v150 = v59;
            v151 = *(void (**)(unint64_t, unint64_t, uint64_t))(v309 + 16);
            swift_retain();
            v151(v148, v149, v310);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v294 + 16))((v293 + v148) & v150, (v293 + v149) & v150, v295);
            *((unsigned char *)v101 + v315) = 4;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v307 + 16))(v101, v102, v306);
            *((unsigned char *)v101 + v315) = 0;
            break;
        }
        unint64_t v68 = v314;
        unint64_t v152 = ((v49 | 7) + v297) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v153 = ((v302 | 7) + v297) & 0xFFFFFFFFFFFFFFF8;
        *(unsigned char *)unint64_t v152 = *(unsigned char *)v153;
        *(unsigned char *)(v152 + 1) = *(unsigned char *)(v153 + 1);
        *(unsigned char *)(v152 + 2) = *(unsigned char *)(v153 + 2);
        uint64_t v154 = *(void *)(v153 + 8);
        uint64_t v155 = *(void *)(v153 + 16);
        char v156 = *(unsigned char *)(v153 + 24);
        sub_21F770E44(v154, v155, v156);
        *(void *)(v152 + 8) = v154;
        *(void *)(v152 + 16) = v155;
        *(unsigned char *)(v152 + 24) = v156;
        unsigned int v157 = *(unsigned __int8 *)(v153 + 48);
        if (v157 <= 0xFB)
        {
          uint64_t v159 = *(void *)(v153 + 32);
          uint64_t v160 = *(void *)(v153 + 40);
          sub_21F770E44(v159, v160, *(unsigned char *)(v153 + 48));
          *(void *)(v152 + 32) = v159;
          *(void *)(v152 + 40) = v160;
          *(unsigned char *)(v152 + 48) = v157;
        }
        else
        {
          long long v158 = *(_OWORD *)(v153 + 32);
          *(unsigned char *)(v152 + 48) = *(unsigned char *)(v153 + 48);
          *(_OWORD *)(v152 + 32) = v158;
        }
        uint64_t v54 = v319;
        uint64_t v48 = a1;
        uint64_t v50 = (unsigned __int8 *)v302;
        uint64_t v67 = v303;
        *(unsigned char *)(v49 + v318) = 7;
        uint64_t v66 = v305;
        break;
      default:
        uint64_t v62 = *(void *)v50;
        unint64_t v63 = v49;
        *(unsigned char *)(v49 + 8) = v50[8];
        *(void *)unint64_t v49 = v62;
        *(unsigned char *)(v49 + v318) = 0;
LABEL_57:
        uint64_t v66 = v305;
        uint64_t v67 = v303;
        unint64_t v68 = v300 + 8;
        uint64_t v69 = v60;
        break;
    }
    uint64_t v166 = (v67 + v63) & v66;
    unint64_t v167 = (unint64_t)&v50[v67] & v66;
    unsigned int v168 = *(unsigned __int8 *)(v167 + v54);
    unsigned int v169 = v168 - 8;
    if (v168 >= 8)
    {
      if (v54 <= 3) {
        uint64_t v170 = v54;
      }
      else {
        uint64_t v170 = 4;
      }
      switch(v170)
      {
        case 1:
          int v171 = *(unsigned __int8 *)v167;
          goto LABEL_173;
        case 2:
          int v171 = *(unsigned __int16 *)v167;
          goto LABEL_173;
        case 3:
          int v171 = *(unsigned __int16 *)((unint64_t)&v50[v67] & v66) | (*(unsigned __int8 *)(((unint64_t)&v50[v67] & v66)
                                                                                                + 2) << 16);
          goto LABEL_173;
        case 4:
          int v171 = *(_DWORD *)v167;
LABEL_173:
          int v172 = (v171 | (v169 << (8 * v54))) + 8;
          unsigned int v168 = v171 + 8;
          if (v54 < 4) {
            unsigned int v168 = v172;
          }
          break;
        default:
          break;
      }
    }
    switch(v168)
    {
      case 1u:
        long long v174 = *(_OWORD *)v167;
        *(_OWORD *)(v166 + 9) = *(_OWORD *)(((unint64_t)&v50[v67] & v66) + 9);
        *(_OWORD *)uint64_t v166 = v174;
        *(unsigned char *)(v166 + v54) = 1;
        break;
      case 2u:
        *(void *)uint64_t v166 = *(void *)v167;
        *(unsigned char *)(v166 + v54) = 2;
        swift_retain();
        break;
      case 3u:
        *(void *)uint64_t v166 = *(void *)v167;
        *(void *)(v166 + 8) = *(void *)(((unint64_t)&v50[v67] & v66) + 8);
        *(unsigned char *)(v166 + v54) = 3;
        swift_retain();
        swift_retain();
        break;
      case 4u:
        uint64_t v175 = *(void *)v167;
        uint64_t v176 = *(void *)(((unint64_t)&v50[v67] & v66) + 8);
        char v177 = *(unsigned char *)(((unint64_t)&v50[v67] & v66) + 0x10);
        sub_21F7652C0(*(void *)((unint64_t)&v50[v67] & v66), v176, v177);
        *(void *)uint64_t v166 = v175;
        *(void *)(v166 + 8) = v176;
        *(unsigned char *)(v166 + 16) = v177;
        *(void *)(v166 + 24) = *(void *)(v167 + 24);
        int v178 = (void *)((v299 + v166) & v66);
        uint64_t v179 = (unsigned __int8 *)((v299 + v167) & v66);
        unsigned int v180 = v179[v312];
        swift_bridgeObjectRetain();
        if (v180 >= 5)
        {
          if (v312 <= 3) {
            uint64_t v181 = v312;
          }
          else {
            uint64_t v181 = 4;
          }
          switch(v181)
          {
            case 1:
              int v182 = *v179;
              goto LABEL_207;
            case 2:
              int v182 = *(unsigned __int16 *)v179;
              goto LABEL_207;
            case 3:
              int v182 = *(unsigned __int16 *)((v299 + v167) & v66) | (*(unsigned __int8 *)(((v299 + v167) & v66) + 2) << 16);
              goto LABEL_207;
            case 4:
              int v182 = *(_DWORD *)v179;
LABEL_207:
              int v207 = (v182 | ((v180 - 5) << (8 * v312))) + 5;
              unsigned int v208 = v182 + 5;
              if (v312 >= 4) {
                unsigned int v180 = v208;
              }
              else {
                unsigned int v180 = v207;
              }
              break;
            default:
              break;
          }
        }
        switch(v180)
        {
          case 1u:
            uint64_t v209 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v290 + 16);
            v209(v178, v179, v289);
            v209((void *)(((unint64_t)v178 + v287) & v286), (unsigned __int8 *)((unint64_t)&v179[v287] & v286), v289);
            char v210 = 1;
            goto LABEL_216;
          case 2u:
            *int v178 = *(void *)v179;
            *((unsigned char *)v178 + v312) = 2;
            swift_retain();
            break;
          case 3u:
            *int v178 = *(void *)v179;
            *(void *)(((v299 + v166) & v66) + 8) = *(void *)(((v299 + v167) & v66) + 8);
            *((unsigned char *)v178 + v312) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *int v178 = *(void *)v179;
            unint64_t v211 = ((unint64_t)v178 + v308) & v292;
            unint64_t v212 = (unint64_t)&v179[v308] & v292;
            uint64_t v213 = *(void (**)(unint64_t, unint64_t, uint64_t))(v309 + 16);
            swift_retain();
            v213(v211, v212, v310);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v294 + 16))((v293 + v211) & v296, (v293 + v212) & v296, v295);
            char v210 = 4;
LABEL_216:
            *((unsigned char *)v178 + v312) = v210;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v290 + 16))(v178, v179, v289);
            *((unsigned char *)v178 + v312) = 0;
            break;
        }
        char v214 = 4;
        goto LABEL_287;
      case 5u:
        uint64_t v183 = *(void *)v167;
        uint64_t v184 = *(void *)(((unint64_t)&v50[v67] & v66) + 8);
        char v185 = *(unsigned char *)(((unint64_t)&v50[v67] & v66) + 0x10);
        sub_21F7652C0(*(void *)((unint64_t)&v50[v67] & v66), v184, v185);
        *(void *)uint64_t v166 = v183;
        *(void *)(v166 + 8) = v184;
        *(unsigned char *)(v166 + 16) = v185;
        *(void *)(v166 + 24) = *(void *)(v167 + 24);
        uint64_t v186 = (void *)((v299 + v166) & v66);
        uint64_t v187 = (unsigned __int8 *)((v299 + v167) & v66);
        unsigned int v188 = v187[v312];
        swift_bridgeObjectRetain();
        if (v188 >= 5)
        {
          if (v312 <= 3) {
            uint64_t v189 = v312;
          }
          else {
            uint64_t v189 = 4;
          }
          switch(v189)
          {
            case 1:
              int v190 = *v187;
              goto LABEL_221;
            case 2:
              int v190 = *(unsigned __int16 *)v187;
              goto LABEL_221;
            case 3:
              int v190 = *(unsigned __int16 *)((v299 + v167) & v66) | (*(unsigned __int8 *)(((v299 + v167) & v66) + 2) << 16);
              goto LABEL_221;
            case 4:
              int v190 = *(_DWORD *)v187;
LABEL_221:
              if (v312 < 4) {
                unsigned int v188 = (v190 | ((v188 - 5) << (8 * v312))) + 5;
              }
              else {
                unsigned int v188 = v190 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v188)
        {
          case 1u:
            uint64_t v216 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v290 + 16);
            v216(v186, v187, v289);
            v216((void *)(((unint64_t)v186 + v287) & v286), (unsigned __int8 *)((unint64_t)&v187[v287] & v286), v289);
            uint64_t v66 = v305;
            *((unsigned char *)v186 + v312) = 1;
            unint64_t v215 = v312;
            break;
          case 2u:
            *uint64_t v186 = *(void *)v187;
            *((unsigned char *)v186 + v312) = 2;
            goto LABEL_229;
          case 3u:
            *uint64_t v186 = *(void *)v187;
            *(void *)(((v299 + v166) & v66) + 8) = *(void *)(((v299 + v167) & v66) + 8);
            *((unsigned char *)v186 + v312) = 3;
            swift_retain();
LABEL_229:
            swift_retain();
            unint64_t v215 = v312;
            break;
          case 4u:
            *uint64_t v186 = *(void *)v187;
            unint64_t v215 = v312;
            unint64_t v217 = ((unint64_t)v186 + v308) & v292;
            unint64_t v218 = (unint64_t)&v187[v308] & v292;
            int v219 = *(void (**)(unint64_t, unint64_t, uint64_t))(v309 + 16);
            swift_retain();
            v219(v217, v218, v310);
            uint64_t v66 = v305;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v294 + 16))((v293 + v217) & v296, (v293 + v218) & v296, v295);
            *((unsigned char *)v186 + v312) = 4;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v290 + 16))(v186, v187, v289);
            *((unsigned char *)v186 + v312) = 0;
            unint64_t v215 = v312;
            break;
        }
        uint64_t v220 = (v288 + v166) & v66;
        uint64_t v221 = v66;
        unint64_t v222 = (v288 + v167) & v66;
        uint64_t v223 = *(void *)v222;
        uint64_t v224 = *(void *)(v222 + 8);
        char v225 = *(unsigned char *)(v222 + 16);
        sub_21F7652C0(*(void *)v222, v224, v225);
        *(void *)uint64_t v220 = v223;
        *(void *)(v220 + 8) = v224;
        *(unsigned char *)(v220 + 16) = v225;
        *(void *)(v220 + 24) = *(void *)(v222 + 24);
        uint64_t v226 = (void *)((v299 + v220) & v221);
        uint64_t v227 = (unsigned __int8 *)((v299 + v222) & v221);
        unsigned int v228 = v227[v215];
        swift_bridgeObjectRetain();
        unint64_t v229 = v215;
        if (v228 < 5)
        {
          unint64_t v68 = v314;
        }
        else
        {
          if (v215 <= 3) {
            uint64_t v230 = v215;
          }
          else {
            uint64_t v230 = 4;
          }
          unint64_t v68 = v314;
          switch(v230)
          {
            case 1:
              int v231 = *v227;
              goto LABEL_275;
            case 2:
              int v231 = *(unsigned __int16 *)v227;
              goto LABEL_275;
            case 3:
              int v231 = *(unsigned __int16 *)((v299 + v222) & v221) | (*(unsigned __int8 *)(((v299 + v222) & v221) + 2) << 16);
              goto LABEL_275;
            case 4:
              int v231 = *(_DWORD *)v227;
LABEL_275:
              if (v229 < 4) {
                unsigned int v228 = (v231 | ((v228 - 5) << (8 * v229))) + 5;
              }
              else {
                unsigned int v228 = v231 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v228)
        {
          case 1u:
            uint64_t v269 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v290 + 16);
            v269(v226, v227, v289);
            v269((void *)(((unint64_t)v226 + v287) & v286), (unsigned __int8 *)((unint64_t)&v227[v287] & v286), v289);
            char v270 = 1;
            goto LABEL_285;
          case 2u:
            *uint64_t v226 = *(void *)v227;
            *((unsigned char *)v226 + v229) = 2;
            goto LABEL_283;
          case 3u:
            *uint64_t v226 = *(void *)v227;
            v226[1] = *(void *)(((v299 + v222) & v221) + 8);
            *((unsigned char *)v226 + v229) = 3;
            swift_retain();
LABEL_283:
            swift_retain();
            break;
          case 4u:
            *uint64_t v226 = *(void *)v227;
            unint64_t v271 = ((unint64_t)v226 + v308) & v292;
            unint64_t v272 = (unint64_t)&v227[v308] & v292;
            v273 = *(void (**)(unint64_t, unint64_t, uint64_t))(v309 + 16);
            swift_retain();
            v273(v271, v272, v310);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v294 + 16))((v293 + v271) & v296, (v293 + v272) & v296, v295);
            char v270 = 4;
LABEL_285:
            *((unsigned char *)v226 + v229) = v270;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v290 + 16))(v226, v227, v289);
            *((unsigned char *)v226 + v229) = 0;
            break;
        }
        char v214 = 5;
LABEL_287:
        uint64_t v268 = v319;
        uint64_t v48 = a1;
        goto LABEL_288;
      case 6u:
        uint64_t v191 = *(void *)v167;
        uint64_t v192 = *(void *)(((unint64_t)&v50[v67] & v66) + 8);
        char v193 = *(unsigned char *)(((unint64_t)&v50[v67] & v66) + 0x10);
        sub_21F7652C0(*(void *)((unint64_t)&v50[v67] & v66), v192, v193);
        *(void *)uint64_t v166 = v191;
        *(void *)(v166 + 8) = v192;
        *(unsigned char *)(v166 + 16) = v193;
        *(void *)(v166 + 24) = *(void *)(v167 + 24);
        uint64_t v194 = (void *)((v299 + v166) & v66);
        uint64_t v195 = (unsigned __int8 *)((v299 + v167) & v66);
        unsigned int v196 = v195[v312];
        swift_bridgeObjectRetain();
        if (v196 >= 5)
        {
          if (v312 <= 3) {
            uint64_t v197 = v312;
          }
          else {
            uint64_t v197 = 4;
          }
          switch(v197)
          {
            case 1:
              int v198 = *v195;
              goto LABEL_241;
            case 2:
              int v198 = *(unsigned __int16 *)v195;
              goto LABEL_241;
            case 3:
              int v198 = *(unsigned __int16 *)((v299 + v167) & v66) | (*(unsigned __int8 *)(((v299 + v167) & v66) + 2) << 16);
              goto LABEL_241;
            case 4:
              int v198 = *(_DWORD *)v195;
LABEL_241:
              if (v312 < 4) {
                unsigned int v196 = (v198 | ((v196 - 5) << (8 * v312))) + 5;
              }
              else {
                unsigned int v196 = v198 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v196)
        {
          case 1u:
            uint64_t v236 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v290 + 16);
            v236(v194, v195, v289);
            v236((void *)(((unint64_t)v194 + v287) & v286), (unsigned __int8 *)((unint64_t)&v195[v287] & v286), v289);
            char v235 = 1;
            goto LABEL_250;
          case 2u:
            *uint64_t v194 = *(void *)v195;
            *((unsigned char *)v194 + v312) = 2;
            swift_retain();
            break;
          case 3u:
            *uint64_t v194 = *(void *)v195;
            *(void *)(((v299 + v166) & v66) + 8) = *(void *)(((v299 + v167) & v66) + 8);
            *((unsigned char *)v194 + v312) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *uint64_t v194 = *(void *)v195;
            unint64_t v232 = ((unint64_t)v194 + v308) & v292;
            unint64_t v233 = (unint64_t)&v195[v308] & v292;
            uint64_t v234 = *(void (**)(unint64_t, unint64_t, uint64_t))(v309 + 16);
            swift_retain();
            v234(v232, v233, v310);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v294 + 16))((v293 + v232) & v296, (v293 + v233) & v296, v295);
            char v235 = 4;
LABEL_250:
            *((unsigned char *)v194 + v312) = v235;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v290 + 16))(v194, v195, v289);
            *((unsigned char *)v194 + v312) = 0;
            break;
        }
        uint64_t v48 = a1;
        unint64_t v237 = v68;
        unint64_t v238 = (v291 + v166) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v239 = (v291 + v167) & 0xFFFFFFFFFFFFFFF8;
        *(unsigned char *)unint64_t v238 = *(unsigned char *)v239;
        uint64_t v240 = (_OWORD *)(v238 + 8);
        uint64_t v241 = (_OWORD *)(v239 + 8);
        if (*(unsigned __int8 *)(v239 + 96) == 255)
        {
          long long v247 = *(_OWORD *)(v239 + 24);
          *uint64_t v240 = *v241;
          *(_OWORD *)(v238 + 24) = v247;
          long long v248 = *(_OWORD *)(v239 + 40);
          long long v249 = *(_OWORD *)(v239 + 56);
          long long v250 = *(_OWORD *)(v239 + 72);
          *(_OWORD *)(v238 + 81) = *(_OWORD *)(v239 + 81);
          *(_OWORD *)(v238 + 56) = v249;
          *(_OWORD *)(v238 + 72) = v250;
          *(_OWORD *)(v238 + 40) = v248;
        }
        else
        {
          *uint64_t v240 = *v241;
          long long v242 = *(_OWORD *)(v239 + 24);
          long long v243 = *(_OWORD *)(v239 + 40);
          long long v244 = *(_OWORD *)(v239 + 72);
          *(_OWORD *)(v238 + 56) = *(_OWORD *)(v239 + 56);
          *(_OWORD *)(v238 + 72) = v244;
          *(_OWORD *)(v238 + 24) = v242;
          *(_OWORD *)(v238 + 40) = v243;
          uint64_t v245 = *(void *)(v239 + 88);
          char v246 = *(unsigned char *)(v239 + 96);
          sub_21F829E74(v245, v246);
          *(void *)(v238 + 88) = v245;
          *(unsigned char *)(v238 + 96) = v246;
        }
        uint64_t v251 = *(void *)(v239 + 104);
        char v252 = *(unsigned char *)(v239 + 112);
        sub_21F829E74(v251, v252);
        *(void *)(v238 + 104) = v251;
        *(unsigned char *)(v238 + 112) = v252;
        *(unsigned char *)(v166 + v319) = 6;
        unint64_t v68 = v237;
        break;
      case 7u:
        uint64_t v199 = *(void *)v167;
        uint64_t v200 = *(void *)(((unint64_t)&v50[v67] & v66) + 8);
        char v201 = *(unsigned char *)(((unint64_t)&v50[v67] & v66) + 0x10);
        sub_21F7652C0(*(void *)((unint64_t)&v50[v67] & v66), v200, v201);
        *(void *)uint64_t v166 = v199;
        *(void *)(v166 + 8) = v200;
        *(unsigned char *)(v166 + 16) = v201;
        *(void *)(v166 + 24) = *(void *)(v167 + 24);
        uint64_t v202 = (void *)((v299 + v166) & v66);
        uint64_t v203 = (unsigned __int8 *)((v299 + v167) & v66);
        unsigned int v204 = v203[v312];
        swift_bridgeObjectRetain();
        if (v204 >= 5)
        {
          if (v312 <= 3) {
            uint64_t v205 = v312;
          }
          else {
            uint64_t v205 = 4;
          }
          switch(v205)
          {
            case 1:
              int v206 = *v203;
              goto LABEL_258;
            case 2:
              int v206 = *(unsigned __int16 *)v203;
              goto LABEL_258;
            case 3:
              int v206 = *(unsigned __int16 *)((v299 + v167) & v66) | (*(unsigned __int8 *)(((v299 + v167) & v66) + 2) << 16);
              goto LABEL_258;
            case 4:
              int v206 = *(_DWORD *)v203;
LABEL_258:
              if (v312 < 4) {
                unsigned int v204 = (v206 | ((v204 - 5) << (8 * v312))) + 5;
              }
              else {
                unsigned int v204 = v206 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v204)
        {
          case 1u:
            uint64_t v253 = v69;
            uint64_t v254 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v290 + 16);
            v254(v202, v203, v289);
            v254((void *)(((unint64_t)v202 + v287) & v286), (unsigned __int8 *)((unint64_t)&v203[v287] & v286), v289);
            char v255 = 1;
            goto LABEL_267;
          case 2u:
            uint64_t v253 = v69;
            *uint64_t v202 = *(void *)v203;
            *((unsigned char *)v202 + v312) = 2;
            swift_retain();
            break;
          case 3u:
            uint64_t v253 = v69;
            *uint64_t v202 = *(void *)v203;
            *(void *)(((v299 + v166) & v66) + 8) = *(void *)(((v299 + v167) & v66) + 8);
            *((unsigned char *)v202 + v312) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            uint64_t v253 = v69;
            *uint64_t v202 = *(void *)v203;
            unint64_t v256 = ((unint64_t)v202 + v308) & v292;
            unint64_t v257 = (unint64_t)&v203[v308] & v292;
            unsigned __int8 v258 = *(void (**)(unint64_t, unint64_t, uint64_t))(v309 + 16);
            swift_retain();
            v258(v256, v257, v310);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v294 + 16))((v293 + v256) & v296, (v293 + v257) & v296, v295);
            char v255 = 4;
LABEL_267:
            *((unsigned char *)v202 + v312) = v255;
            break;
          default:
            uint64_t v253 = v69;
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v290 + 16))(v202, v203, v289);
            *((unsigned char *)v202 + v312) = 0;
            break;
        }
        unint64_t v259 = (v291 + v166) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v260 = (v291 + v167) & 0xFFFFFFFFFFFFFFF8;
        *(unsigned char *)unint64_t v259 = *(unsigned char *)v260;
        *(unsigned char *)(v259 + 1) = *(unsigned char *)(v260 + 1);
        *(unsigned char *)(v259 + 2) = *(unsigned char *)(v260 + 2);
        uint64_t v261 = *(void *)(v260 + 8);
        uint64_t v262 = *(void *)(v260 + 16);
        char v263 = *(unsigned char *)(v260 + 24);
        sub_21F770E44(v261, v262, v263);
        *(void *)(v259 + 8) = v261;
        *(void *)(v259 + 16) = v262;
        *(unsigned char *)(v259 + 24) = v263;
        unsigned int v264 = *(unsigned __int8 *)(v260 + 48);
        uint64_t v48 = a1;
        if (v264 <= 0xFB)
        {
          uint64_t v266 = *(void *)(v260 + 32);
          uint64_t v267 = *(void *)(v260 + 40);
          sub_21F770E44(v266, v267, *(unsigned char *)(v260 + 48));
          *(void *)(v259 + 32) = v266;
          *(void *)(v259 + 40) = v267;
          *(unsigned char *)(v259 + 48) = v264;
        }
        else
        {
          long long v265 = *(_OWORD *)(v260 + 32);
          *(unsigned char *)(v259 + 48) = *(unsigned char *)(v260 + 48);
          *(_OWORD *)(v259 + 32) = v265;
        }
        uint64_t v268 = v319;
        unint64_t v68 = v314;
        uint64_t v69 = v253;
        char v214 = 7;
LABEL_288:
        *(unsigned char *)(v166 + v268) = v214;
        break;
      default:
        uint64_t v173 = *(void *)v167;
        *(unsigned char *)(v166 + 8) = *(unsigned char *)(((unint64_t)&v50[v67] & v66) + 8);
        *(void *)uint64_t v166 = v173;
        *(unsigned char *)(v166 + v54) = 0;
        break;
    }
    *(void *)(((v166 | 7) + v69) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v167 | 7) + v69) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v274 = (void *)(((unint64_t)a2 + v68 + 7) & 0xFFFFFFFFFFFFFFF8);
    v275 = (void *)(((unint64_t)v48 + v68 + 7) & 0xFFFFFFFFFFFFFFF8);
    void *v275 = *v274;
    unint64_t v276 = (void *)(((unint64_t)v274 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v277 = (void *)(((unint64_t)v275 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v277 = *v276;
    uint64_t v278 = (void *)(((unint64_t)v276 + 15) & 0xFFFFFFFFFFFFFFF8);
    double v279 = (void *)(((unint64_t)v277 + 15) & 0xFFFFFFFFFFFFFFF8);
    *double v279 = *v278;
    unint64_t v280 = ((unint64_t)v279 + 15) & 0xFFFFFFFFFFFFFFF8;
    v281 = (unint64_t *)(((unint64_t)v278 + 15) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v282 = *v281;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v282 < 0xFFFFFFFF)
    {
      *(_OWORD *)unint64_t v280 = *(_OWORD *)v281;
    }
    else
    {
      *(void *)unint64_t v280 = v282;
      *(void *)(v280 + 8) = v281[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  return v48;
}

unint64_t sub_21F8421B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56);
  uint64_t v178 = a2;
  uint64_t v173 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(v173 - 8);
  uint64_t v163 = v6;
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = sub_21FA24310();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v169 = v9;
  uint64_t v170 = v8;
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = sub_21FA24320();
  uint64_t v12 = v6;
  uint64_t v171 = *(void *)(v11 - 8);
  uint64_t v172 = v11;
  uint64_t v13 = *(unsigned __int8 *)(v171 + 80);
  uint64_t v14 = v13 | v10;
  uint64_t v15 = v13 | v10 | v7;
  uint64_t v16 = v15 | 7;
  uint64_t v176 = (v15 | 7) + v5;
  uint64_t v177 = a1;
  uint64_t v17 = v176 + a1;
  uint64_t v18 = (unsigned __int8 *)((v176 + a1) & ~(v15 | 7));
  uint64_t v19 = v15 + 32;
  uint64_t v20 = (v15 + 32) & ~(v15 | 7);
  unint64_t v21 = *(void *)(v12 + 64);
  unint64_t v22 = ((v21 + v7) & ~v7) + v21;
  if (v22 <= v21) {
    unint64_t v22 = *(void *)(v12 + 64);
  }
  uint64_t v167 = v10 + 8;
  uint64_t v23 = *(void *)(v9 + 64) + v13;
  uint64_t v168 = v23;
  uint64_t v24 = *(void *)(*(void *)(v11 - 8) + 64);
  unint64_t v25 = ((v23 + ((v10 + 8) & ~v10)) & ~v13) + v24;
  if (v22 <= v25) {
    unint64_t v26 = ((v23 + ((v10 + 8) & ~v10)) & ~v13) + v24;
  }
  else {
    unint64_t v26 = v22;
  }
  if (v26 <= 0x10) {
    uint64_t v27 = 16;
  }
  else {
    uint64_t v27 = v26;
  }
  uint64_t v28 = v27 + v20;
  unint64_t v29 = v27 + v20 + 1;
  unint64_t v30 = ((v29 + v16) & ~v16) + v29;
  if (v29 > v30) {
    unint64_t v30 = v28 + 1;
  }
  uint64_t v31 = v28 + 8;
  unint64_t v32 = (v28 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v30 <= v32 + 113) {
    unint64_t v30 = v32 + 113;
  }
  unint64_t v33 = v32 + 49;
  if (v30 > v33) {
    unint64_t v33 = v30;
  }
  if (v33 <= 0x19) {
    uint64_t v34 = 25;
  }
  else {
    uint64_t v34 = v33;
  }
  unsigned int v35 = v18[v34];
  unsigned int v36 = v35 - 8;
  if (v35 >= 8)
  {
    if (v34 <= 3) {
      uint64_t v37 = v34;
    }
    else {
      uint64_t v37 = 4;
    }
    switch(v37)
    {
      case 1:
        int v38 = *v18;
        if (v34 < 4) {
          goto LABEL_26;
        }
        goto LABEL_30;
      case 2:
        int v38 = *(unsigned __int16 *)v18;
        if (v34 < 4) {
          goto LABEL_26;
        }
        goto LABEL_30;
      case 3:
        int v38 = *(unsigned __int16 *)v18 | (v18[2] << 16);
        if (v34 < 4) {
          goto LABEL_26;
        }
        goto LABEL_30;
      case 4:
        int v38 = *(_DWORD *)v18;
        if (v34 < 4) {
LABEL_26:
        }
          unsigned int v35 = (v38 | (v36 << (8 * v34))) + 8;
        else {
LABEL_30:
        }
          unsigned int v35 = v38 + 8;
        break;
      default:
        break;
    }
  }
  uint64_t v180 = ~v16;
  uint64_t v166 = ~v10;
  uint64_t v39 = ~v13;
  uint64_t v162 = ~v13;
  switch(v35)
  {
    case 2u:
      uint64_t v40 = v14;
      unint64_t v41 = v25;
      uint64_t v42 = v34;
      goto LABEL_34;
    case 3u:
      uint64_t v40 = v14;
      unint64_t v41 = v25;
      uint64_t v42 = v34;
      swift_release();
LABEL_34:
      swift_release();
      uint64_t v34 = v42;
      unint64_t v25 = v41;
      uint64_t v14 = v40;
      break;
    case 4u:
      uint64_t v159 = v34;
      unint64_t v43 = v25;
      uint64_t v44 = v14;
      sub_21F7656A8(*(void *)v18, *((void *)v18 + 1), v18[16]);
      swift_bridgeObjectRelease();
      uint64_t v45 = (unsigned __int8 *)((unint64_t)&v18[v19] & v180);
      unsigned int v46 = v45[v27];
      unsigned int v47 = v46 - 5;
      if (v46 >= 5)
      {
        if (v27 <= 3) {
          uint64_t v48 = v27;
        }
        else {
          uint64_t v48 = 4;
        }
        switch(v48)
        {
          case 1:
            int v49 = *v45;
            goto LABEL_62;
          case 2:
            int v49 = *(unsigned __int16 *)v45;
            goto LABEL_62;
          case 3:
            int v49 = *(unsigned __int16 *)v45 | (*(unsigned __int8 *)(((unint64_t)&v18[v19] & v180) + 2) << 16);
            goto LABEL_62;
          case 4:
            int v49 = *(_DWORD *)v45;
LABEL_62:
            if (v27 < 4) {
              unsigned int v46 = (v49 | (v47 << (8 * v27))) + 5;
            }
            else {
              unsigned int v46 = v49 + 5;
            }
            break;
          default:
            break;
        }
      }
      switch(v46)
      {
        case 1u:
          uint64_t v66 = *(void (**)(unsigned __int8 *, uint64_t))(v163 + 8);
          v66(v45, v173);
          v66((unsigned __int8 *)((unint64_t)&v45[v7 + v21] & ~v7), v173);
          break;
        case 2u:
          goto LABEL_69;
        case 3u:
          swift_release();
LABEL_69:
          swift_release();
          break;
        case 4u:
          swift_release();
          (*(void (**)(unint64_t, uint64_t))(v169 + 8))((unint64_t)&v45[v167] & v166, v170);
          (*(void (**)(unint64_t, uint64_t))(v171 + 8))((v168 + ((unint64_t)&v45[v167] & v166)) & v39, v172);
          break;
        default:
          (*(void (**)(unint64_t, uint64_t))(v163 + 8))((unint64_t)&v18[v19] & v180, v173);
          break;
      }
      uint64_t v14 = v44;
      unint64_t v25 = v43;
      goto LABEL_132;
    case 5u:
      uint64_t v153 = v21 + v7;
      uint64_t v154 = ~v7;
      uint64_t v156 = v14;
      uint64_t v159 = v34;
      unint64_t v155 = v25;
      sub_21F7656A8(*(void *)v18, *((void *)v18 + 1), v18[16]);
      swift_bridgeObjectRelease();
      uint64_t v50 = (unsigned __int8 *)((unint64_t)&v18[v19] & v180);
      unsigned int v51 = v50[v27];
      unsigned int v52 = v51 - 5;
      if (v51 >= 5)
      {
        if (v27 <= 3) {
          uint64_t v53 = v27;
        }
        else {
          uint64_t v53 = 4;
        }
        switch(v53)
        {
          case 1:
            int v54 = *v50;
            goto LABEL_75;
          case 2:
            int v54 = *(unsigned __int16 *)v50;
            goto LABEL_75;
          case 3:
            int v54 = *(unsigned __int16 *)v50 | (*(unsigned __int8 *)(((unint64_t)&v18[v19] & v180) + 2) << 16);
            goto LABEL_75;
          case 4:
            int v54 = *(_DWORD *)v50;
LABEL_75:
            if (v27 < 4) {
              unsigned int v51 = (v54 | (v52 << (8 * v27))) + 5;
            }
            else {
              unsigned int v51 = v54 + 5;
            }
            break;
          default:
            break;
        }
      }
      switch(v51)
      {
        case 1u:
          unint64_t v152 = *(void (**)(unint64_t, uint64_t))(v163 + 8);
          v152((unint64_t)&v18[v19] & v180, v173);
          v152((unint64_t)&v50[v7 + v21] & v154, v173);
          uint64_t v39 = v162;
          break;
        case 2u:
          swift_release();
          break;
        case 3u:
          swift_release();
          swift_release();
          break;
        case 4u:
          swift_release();
          (*(void (**)(unint64_t, uint64_t))(v169 + 8))((unint64_t)&v50[v167] & v166, v170);
          (*(void (**)(unint64_t, uint64_t))(v171 + 8))((v168 + ((unint64_t)&v50[v167] & v166)) & v39, v172);
          break;
        default:
          (*(void (**)(unint64_t, uint64_t))(v163 + 8))((unint64_t)&v18[v19] & v180, v173);
          break;
      }
      unint64_t v67 = ((v17 | v16) + v29) & v180;
      sub_21F7656A8(*(void *)v67, *(void *)(v67 + 8), *(unsigned char *)(v67 + 0x10));
      swift_bridgeObjectRelease();
      unint64_t v68 = (unsigned __int8 *)((v19 + v67) & v180);
      unsigned int v69 = v68[v27];
      unsigned int v70 = v69 - 5;
      if (v69 >= 5)
      {
        if (v27 <= 3) {
          uint64_t v71 = v27;
        }
        else {
          uint64_t v71 = 4;
        }
        switch(v71)
        {
          case 1:
            int v72 = *v68;
            goto LABEL_122;
          case 2:
            int v72 = *(unsigned __int16 *)v68;
            goto LABEL_122;
          case 3:
            int v72 = *(unsigned __int16 *)v68 | (*(unsigned __int8 *)(((v19 + v67) & v180) + 2) << 16);
            goto LABEL_122;
          case 4:
            int v72 = *(_DWORD *)v68;
LABEL_122:
            if (v27 < 4) {
              unsigned int v69 = (v72 | (v70 << (8 * v27))) + 5;
            }
            else {
              unsigned int v69 = v72 + 5;
            }
            break;
          default:
            break;
        }
      }
      switch(v69)
      {
        case 1u:
          uint64_t v79 = *(void (**)(unsigned __int8 *, uint64_t))(v163 + 8);
          v79(v68, v173);
          v79((unsigned __int8 *)((unint64_t)&v68[v153] & v154), v173);
          break;
        case 2u:
          goto LABEL_129;
        case 3u:
          swift_release();
LABEL_129:
          swift_release();
          break;
        case 4u:
          swift_release();
          (*(void (**)(unint64_t, uint64_t))(v169 + 8))((unint64_t)&v68[v167] & v166, v170);
          (*(void (**)(unint64_t, uint64_t))(v171 + 8))((v168 + ((unint64_t)&v68[v167] & v166)) & v39, v172);
          break;
        default:
          (*(void (**)(unint64_t, uint64_t))(v163 + 8))((v19 + v67) & v180, v173);
          break;
      }
      goto LABEL_131;
    case 6u:
      uint64_t v156 = v14;
      uint64_t v159 = v34;
      unint64_t v155 = v25;
      sub_21F7656A8(*(void *)v18, *((void *)v18 + 1), v18[16]);
      swift_bridgeObjectRelease();
      int v55 = (unsigned __int8 *)((unint64_t)&v18[v19] & v180);
      unsigned int v56 = v55[v27];
      unsigned int v57 = v56 - 5;
      if (v56 >= 5)
      {
        if (v27 <= 3) {
          uint64_t v58 = v27;
        }
        else {
          uint64_t v58 = 4;
        }
        switch(v58)
        {
          case 1:
            int v59 = *v55;
            goto LABEL_93;
          case 2:
            int v59 = *(unsigned __int16 *)v55;
            goto LABEL_93;
          case 3:
            int v59 = *(unsigned __int16 *)v55 | (*(unsigned __int8 *)(((unint64_t)&v18[v19] & v180) + 2) << 16);
            goto LABEL_93;
          case 4:
            int v59 = *(_DWORD *)v55;
LABEL_93:
            if (v27 < 4) {
              unsigned int v56 = (v59 | (v57 << (8 * v27))) + 5;
            }
            else {
              unsigned int v56 = v59 + 5;
            }
            break;
          default:
            break;
        }
      }
      switch(v56)
      {
        case 1u:
          uint64_t v73 = *(void (**)(unsigned __int8 *, uint64_t))(v163 + 8);
          v73(v55, v173);
          v73((unsigned __int8 *)((unint64_t)&v55[v7 + v21] & ~v7), v173);
          break;
        case 2u:
          swift_release();
          break;
        case 3u:
          swift_release();
          swift_release();
          break;
        case 4u:
          swift_release();
          (*(void (**)(unint64_t, uint64_t))(v169 + 8))((unint64_t)&v55[v167] & v166, v170);
          (*(void (**)(unint64_t, uint64_t))(v171 + 8))((v168 + ((unint64_t)&v55[v167] & v166)) & v39, v172);
          break;
        default:
          (*(void (**)(unint64_t, uint64_t))(v163 + 8))((unint64_t)&v18[v19] & v180, v173);
          break;
      }
      unint64_t v74 = (unint64_t)&v18[v31] & 0xFFFFFFFFFFFFFFF8;
      int v75 = *(unsigned __int8 *)(v74 + 96);
      if (v75 != 255) {
        sub_21F82B5F8(*(void *)(v74 + 88), v75 & 1);
      }
      sub_21F82B5F8(*(void *)(v74 + 104), *(unsigned char *)(v74 + 112));
LABEL_131:
      unint64_t v25 = v155;
      uint64_t v14 = v156;
LABEL_132:
      uint64_t v34 = v159;
      break;
    case 7u:
      uint64_t v157 = v14;
      uint64_t v160 = v34;
      unint64_t v60 = v25;
      sub_21F7656A8(*(void *)v18, *((void *)v18 + 1), v18[16]);
      swift_bridgeObjectRelease();
      unint64_t v61 = (unsigned __int8 *)((unint64_t)&v18[v19] & v180);
      unsigned int v62 = v61[v27];
      unsigned int v63 = v62 - 5;
      if (v62 >= 5)
      {
        if (v27 <= 3) {
          uint64_t v64 = v27;
        }
        else {
          uint64_t v64 = 4;
        }
        switch(v64)
        {
          case 1:
            int v65 = *v61;
            goto LABEL_108;
          case 2:
            int v65 = *(unsigned __int16 *)v61;
            goto LABEL_108;
          case 3:
            int v65 = *(unsigned __int16 *)v61 | (*(unsigned __int8 *)(((unint64_t)&v18[v19] & v180) + 2) << 16);
            goto LABEL_108;
          case 4:
            int v65 = *(_DWORD *)v61;
LABEL_108:
            if (v27 < 4) {
              unsigned int v62 = (v65 | (v63 << (8 * v27))) + 5;
            }
            else {
              unsigned int v62 = v65 + 5;
            }
            break;
          default:
            break;
        }
      }
      switch(v62)
      {
        case 1u:
          unsigned int v76 = *(void (**)(unsigned __int8 *, uint64_t))(v163 + 8);
          v76(v61, v173);
          v76((unsigned __int8 *)((unint64_t)&v61[v7 + v21] & ~v7), v173);
          break;
        case 2u:
          swift_release();
          break;
        case 3u:
          swift_release();
          swift_release();
          break;
        case 4u:
          swift_release();
          (*(void (**)(unint64_t, uint64_t))(v169 + 8))((unint64_t)&v61[v167] & v166, v170);
          (*(void (**)(unint64_t, uint64_t))(v171 + 8))((v168 + ((unint64_t)&v61[v167] & v166)) & v39, v172);
          break;
        default:
          (*(void (**)(unint64_t, uint64_t))(v163 + 8))((unint64_t)&v18[v19] & v180, v173);
          break;
      }
      unint64_t v77 = (unint64_t)&v18[v31] & 0xFFFFFFFFFFFFFFF8;
      sub_21F770E38(*(void *)(v77 + 8), *(void *)(v77 + 16), *(unsigned char *)(v77 + 24));
      unsigned int v78 = *(unsigned __int8 *)(v77 + 48);
      uint64_t v14 = v157;
      uint64_t v34 = v160;
      unint64_t v25 = v60;
      if (v78 <= 0xFB)
      {
        sub_21F770E38(*(void *)(v77 + 32), *(void *)(v77 + 40), v78);
        uint64_t v14 = v157;
        uint64_t v34 = v160;
        unint64_t v25 = v60;
      }
      break;
    default:
      break;
  }
  uint64_t v80 = *(void *)(v178 + 32);
  uint64_t v81 = *(void *)(v80 - 8);
  uint64_t v82 = *(unsigned __int8 *)(v81 + 80);
  uint64_t v83 = v14 | v82 | 7;
  uint64_t v84 = v34 + v83 + 1;
  unint64_t v85 = (unint64_t)&v18[v84];
  unint64_t v86 = (unint64_t)&v18[v84] & ~v83;
  uint64_t v87 = (v14 | v82) + 32;
  uint64_t v88 = v87 & ~v83;
  unint64_t v89 = *(void *)(v81 + 64);
  uint64_t v90 = v89 + v82;
  if (((v89 + v82) & ~v82) + v89 > v89) {
    v89 += (v89 + v82) & ~v82;
  }
  if (v89 <= v25) {
    unint64_t v89 = v25;
  }
  if (v89 <= 0x10) {
    uint64_t v91 = 16;
  }
  else {
    uint64_t v91 = v89;
  }
  uint64_t v92 = v91 + v88;
  unint64_t v93 = v91 + v88 + 1;
  unint64_t v94 = ((v93 + v83) & ~v83) + v93;
  if (v93 > v94) {
    unint64_t v94 = v92 + 1;
  }
  unint64_t v95 = (v92 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v94 <= v95 + 113) {
    unint64_t v94 = v95 + 113;
  }
  unint64_t v96 = v95 + 49;
  if (v94 > v96) {
    unint64_t v96 = v94;
  }
  if (v96 <= 0x19) {
    uint64_t v97 = 25;
  }
  else {
    uint64_t v97 = v96;
  }
  unsigned int v98 = *(unsigned __int8 *)(v86 + v97);
  unsigned int v99 = v98 - 8;
  if (v98 >= 8)
  {
    if (v97 <= 3) {
      uint64_t v100 = v97;
    }
    else {
      uint64_t v100 = 4;
    }
    switch(v100)
    {
      case 1:
        int v101 = *(unsigned __int8 *)v86;
        goto LABEL_158;
      case 2:
        int v101 = *(unsigned __int16 *)v86;
        goto LABEL_158;
      case 3:
        int v101 = *(unsigned __int16 *)v86 | (*(unsigned __int8 *)(v86 + 2) << 16);
        goto LABEL_158;
      case 4:
        int v101 = *(_DWORD *)v86;
LABEL_158:
        int v102 = (v101 | (v99 << (8 * v97))) + 8;
        unsigned int v98 = v101 + 8;
        if (v97 < 4) {
          unsigned int v98 = v102;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v179 = ~v83;
  uint64_t v103 = ~v82;
  switch(v98)
  {
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      uint64_t v104 = v103;
      uint64_t v105 = v90;
      uint64_t v106 = v84;
      sub_21F7656A8(*(void *)v86, *(void *)(v86 + 8), *(unsigned char *)(v86 + 16));
      swift_bridgeObjectRelease();
      unint64_t v107 = (unsigned __int8 *)((v87 + v86) & v179);
      unsigned int v108 = v107[v91];
      unsigned int v109 = v108 - 5;
      if (v108 >= 5)
      {
        if (v91 <= 3) {
          uint64_t v110 = v91;
        }
        else {
          uint64_t v110 = 4;
        }
        switch(v110)
        {
          case 1:
            int v111 = *v107;
            goto LABEL_190;
          case 2:
            int v111 = *(unsigned __int16 *)v107;
            goto LABEL_190;
          case 3:
            int v111 = *(unsigned __int16 *)v107 | (*(unsigned __int8 *)(((v87 + v86) & v179) + 2) << 16);
            goto LABEL_190;
          case 4:
            int v111 = *(_DWORD *)v107;
LABEL_190:
            int v131 = (v111 | (v109 << (8 * v91))) + 5;
            unsigned int v108 = v111 + 5;
            if (v91 < 4) {
              unsigned int v108 = v131;
            }
            break;
          default:
            break;
        }
      }
      switch(v108)
      {
        case 1u:
          unint64_t v132 = *(void (**)(unint64_t, uint64_t))(v81 + 8);
          v132((v87 + v86) & v179, v80);
          v132((unint64_t)&v107[v105] & v104, v80);
          uint64_t v84 = v106;
          break;
        case 2u:
          goto LABEL_196;
        case 3u:
          swift_release();
LABEL_196:
          swift_release();
          uint64_t v84 = v106;
          break;
        case 4u:
          swift_release();
          (*(void (**)(unint64_t, uint64_t))(v169 + 8))((unint64_t)&v107[v167] & v166, v170);
          (*(void (**)(unint64_t, uint64_t))(v171 + 8))((v168 + ((unint64_t)&v107[v167] & v166)) & v162, v172);
          uint64_t v84 = v106;
          break;
        default:
          (*(void (**)(unint64_t, uint64_t))(v81 + 8))((v87 + v86) & v179, v80);
          uint64_t v84 = v106;
          break;
      }
      break;
    case 5u:
      uint64_t v164 = v103;
      uint64_t v161 = v90;
      uint64_t v174 = v84;
      sub_21F7656A8(*(void *)v86, *(void *)(v86 + 8), *(unsigned char *)(v86 + 16));
      swift_bridgeObjectRelease();
      char v112 = (unsigned __int8 *)((v87 + v86) & v179);
      unsigned int v113 = v112[v91];
      unsigned int v114 = v113 - 5;
      if (v113 >= 5)
      {
        if (v91 <= 3) {
          uint64_t v115 = v91;
        }
        else {
          uint64_t v115 = 4;
        }
        switch(v115)
        {
          case 1:
            int v116 = *v112;
            goto LABEL_201;
          case 2:
            int v116 = *(unsigned __int16 *)v112;
            goto LABEL_201;
          case 3:
            int v116 = *(unsigned __int16 *)v112 | (*(unsigned __int8 *)(((v87 + v86) & v179) + 2) << 16);
            goto LABEL_201;
          case 4:
            int v116 = *(_DWORD *)v112;
LABEL_201:
            int v133 = (v116 | (v114 << (8 * v91))) + 5;
            unsigned int v113 = v116 + 5;
            if (v91 < 4) {
              unsigned int v113 = v133;
            }
            break;
          default:
            break;
        }
      }
      switch(v113)
      {
        case 1u:
          long long v158 = *(void (**)(unint64_t, uint64_t))(v81 + 8);
          v158((v87 + v86) & v179, v80);
          v158((unint64_t)&v112[v161] & v164, v80);
          break;
        case 2u:
          swift_release();
          break;
        case 3u:
          swift_release();
          swift_release();
          break;
        case 4u:
          swift_release();
          unint64_t v134 = (unint64_t)&v112[v167] & v166;
          (*(void (**)(unint64_t, uint64_t))(v169 + 8))(v134, v170);
          (*(void (**)(unint64_t, uint64_t))(v171 + 8))((v168 + v134) & v162, v172);
          break;
        default:
          (*(void (**)(unint64_t, uint64_t))(v81 + 8))((v87 + v86) & v179, v80);
          break;
      }
      unint64_t v135 = ((v85 | v83) + v93) & v179;
      sub_21F7656A8(*(void *)v135, *(void *)(v135 + 8), *(unsigned char *)(v135 + 0x10));
      swift_bridgeObjectRelease();
      long long v136 = (unsigned __int8 *)((v87 + v135) & v179);
      unsigned int v137 = v136[v91];
      unsigned int v138 = v137 - 5;
      if (v137 >= 5)
      {
        if (v91 <= 3) {
          uint64_t v139 = v91;
        }
        else {
          uint64_t v139 = 4;
        }
        switch(v139)
        {
          case 1:
            int v140 = *v136;
            goto LABEL_245;
          case 2:
            int v140 = *(unsigned __int16 *)v136;
            goto LABEL_245;
          case 3:
            int v140 = *(unsigned __int16 *)v136 | (v136[2] << 16);
            goto LABEL_245;
          case 4:
            int v140 = *(_DWORD *)v136;
LABEL_245:
            int v149 = (v140 | (v138 << (8 * v91))) + 5;
            unsigned int v137 = v140 + 5;
            if (v91 < 4) {
              unsigned int v137 = v149;
            }
            break;
          default:
            break;
        }
      }
      switch(v137)
      {
        case 1u:
          uint64_t v150 = *(void (**)(unsigned __int8 *, uint64_t))(v81 + 8);
          v150(v136, v80);
          v150((unsigned __int8 *)((unint64_t)&v136[v161] & v164), v80);
          break;
        case 2u:
          goto LABEL_251;
        case 3u:
          swift_release();
LABEL_251:
          swift_release();
          break;
        case 4u:
          swift_release();
          (*(void (**)(unint64_t, uint64_t))(v169 + 8))((unint64_t)&v136[v167] & v166, v170);
          (*(void (**)(unint64_t, uint64_t))(v171 + 8))((v168 + ((unint64_t)&v136[v167] & v166)) & v162, v172);
          break;
        default:
          (*(void (**)(unsigned __int8 *, uint64_t))(v81 + 8))(v136, v80);
          break;
      }
      uint64_t v84 = v174;
      break;
    case 6u:
      uint64_t v165 = v103;
      uint64_t v117 = v90;
      uint64_t v118 = v84;
      sub_21F7656A8(*(void *)v86, *(void *)(v86 + 8), *(unsigned char *)(v86 + 16));
      swift_bridgeObjectRelease();
      uint64_t v119 = (unsigned __int8 *)((v87 + v86) & v179);
      unsigned int v120 = v119[v91];
      unsigned int v121 = v120 - 5;
      if (v120 >= 5)
      {
        if (v91 <= 3) {
          uint64_t v122 = v91;
        }
        else {
          uint64_t v122 = 4;
        }
        switch(v122)
        {
          case 1:
            int v123 = *v119;
            goto LABEL_218;
          case 2:
            int v123 = *(unsigned __int16 *)v119;
            goto LABEL_218;
          case 3:
            int v123 = *(unsigned __int16 *)v119 | (*(unsigned __int8 *)(((v87 + v86) & v179) + 2) << 16);
            goto LABEL_218;
          case 4:
            int v123 = *(_DWORD *)v119;
LABEL_218:
            int v141 = (v123 | (v121 << (8 * v91))) + 5;
            unsigned int v120 = v123 + 5;
            if (v91 < 4) {
              unsigned int v120 = v141;
            }
            break;
          default:
            break;
        }
      }
      switch(v120)
      {
        case 1u:
          long long v142 = *(void (**)(unint64_t, uint64_t))(v81 + 8);
          v142((v87 + v86) & v179, v80);
          v142((unint64_t)&v119[v117] & v165, v80);
          break;
        case 2u:
          swift_release();
          break;
        case 3u:
          swift_release();
          swift_release();
          break;
        case 4u:
          swift_release();
          (*(void (**)(unint64_t, uint64_t))(v169 + 8))((unint64_t)&v119[v167] & v166, v170);
          (*(void (**)(unint64_t, uint64_t))(v171 + 8))((v168 + ((unint64_t)&v119[v167] & v166)) & v162, v172);
          break;
        default:
          (*(void (**)(unint64_t, uint64_t))(v81 + 8))((v87 + v86) & v179, v80);
          break;
      }
      uint64_t v84 = v118;
      unint64_t v143 = ((v86 | 7) + v93) & 0xFFFFFFFFFFFFFFF8;
      int v144 = *(unsigned __int8 *)(v143 + 96);
      if (v144 != 255) {
        sub_21F82B5F8(*(void *)(v143 + 88), v144 & 1);
      }
      sub_21F82B5F8(*(void *)(v143 + 104), *(unsigned char *)(v143 + 112));
      break;
    case 7u:
      uint64_t v124 = v103;
      uint64_t v125 = v90;
      uint64_t v175 = v84;
      sub_21F7656A8(*(void *)v86, *(void *)(v86 + 8), *(unsigned char *)(v86 + 16));
      swift_bridgeObjectRelease();
      int v126 = (unsigned __int8 *)((v87 + v86) & v179);
      unsigned int v127 = v126[v91];
      unsigned int v128 = v127 - 5;
      if (v127 >= 5)
      {
        if (v91 <= 3) {
          uint64_t v129 = v91;
        }
        else {
          uint64_t v129 = 4;
        }
        switch(v129)
        {
          case 1:
            int v130 = *v126;
            goto LABEL_232;
          case 2:
            int v130 = *(unsigned __int16 *)v126;
            goto LABEL_232;
          case 3:
            int v130 = *(unsigned __int16 *)v126 | (*(unsigned __int8 *)(((v87 + v86) & v179) + 2) << 16);
            goto LABEL_232;
          case 4:
            int v130 = *(_DWORD *)v126;
LABEL_232:
            int v145 = (v130 | (v128 << (8 * v91))) + 5;
            unsigned int v127 = v130 + 5;
            if (v91 < 4) {
              unsigned int v127 = v145;
            }
            break;
          default:
            break;
        }
      }
      switch(v127)
      {
        case 1u:
          char v146 = *(void (**)(unint64_t, uint64_t))(v81 + 8);
          v146((v87 + v86) & v179, v80);
          v146((unint64_t)&v126[v125] & v124, v80);
          break;
        case 2u:
          swift_release();
          break;
        case 3u:
          swift_release();
          swift_release();
          break;
        case 4u:
          swift_release();
          (*(void (**)(unint64_t, uint64_t))(v169 + 8))((unint64_t)&v126[v167] & v166, v170);
          (*(void (**)(unint64_t, uint64_t))(v171 + 8))((v168 + ((unint64_t)&v126[v167] & v166)) & v162, v172);
          break;
        default:
          (*(void (**)(unint64_t, uint64_t))(v81 + 8))((v87 + v86) & v179, v80);
          break;
      }
      unint64_t v147 = ((v86 | 7) + v93) & 0xFFFFFFFFFFFFFFF8;
      sub_21F770E38(*(void *)(v147 + 8), *(void *)(v147 + 16), *(unsigned char *)(v147 + 24));
      unsigned int v148 = *(unsigned __int8 *)(v147 + 48);
      uint64_t v84 = v175;
      if (v148 <= 0xFB) {
        sub_21F770E38(*(void *)(v147 + 32), *(void *)(v147 + 40), v148);
      }
      break;
    default:
      break;
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t result = *(void *)((((((((v177 + ((v97 + ((v84 + (v176 & v180)) & v179) + 8) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_21F8439FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v338 = a3;
  uint64_t v330 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v330 - 8);
  uint64_t v314 = v8;
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = sub_21FA24310();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v326 = v11;
  uint64_t v327 = v10;
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = sub_21FA24320();
  uint64_t v14 = v8;
  uint64_t v328 = *(void *)(v13 - 8);
  uint64_t v329 = v13;
  uint64_t v15 = *(unsigned __int8 *)(v328 + 80);
  uint64_t v16 = v15 | v12;
  uint64_t v17 = v15 | v12 | v9;
  uint64_t v18 = v17 | 7;
  uint64_t v19 = (v17 | 7) + v7;
  uint64_t v335 = a2;
  uint64_t v336 = a1;
  uint64_t v20 = v19 + a1;
  uint64_t v340 = (v19 + a1) & ~(v17 | 7);
  uint64_t v21 = v19 + a2;
  unint64_t v22 = (unsigned __int8 *)((v19 + a2) & ~(v17 | 7));
  uint64_t v23 = v17 + 32;
  uint64_t v24 = (v17 + 32) & ~(v17 | 7);
  unint64_t v25 = *(void *)(v14 + 64);
  unint64_t v26 = ((v25 + v9) & ~v9) + v25;
  if (v26 <= v25) {
    unint64_t v26 = *(void *)(v14 + 64);
  }
  uint64_t v324 = v12 + 8;
  uint64_t v325 = *(void *)(v11 + 64) + v15;
  uint64_t v27 = (v325 + ((v12 + 8) & ~v12)) & ~v15;
  uint64_t v28 = *(void *)(*(void *)(v13 - 8) + 64);
  unint64_t v29 = v27 + v28;
  if (v26 <= v27 + v28) {
    unint64_t v30 = v27 + v28;
  }
  else {
    unint64_t v30 = v26;
  }
  if (v30 <= 0x10) {
    unint64_t v30 = 16;
  }
  unint64_t v332 = v30;
  unint64_t v31 = v30 + v24;
  unint64_t v32 = v31 + 1;
  unint64_t v33 = ((v31 + 1 + v18) & ~v18) + v31 + 1;
  if (v31 + 1 > v33) {
    unint64_t v33 = v31 + 1;
  }
  unint64_t v34 = v31 + 8;
  unint64_t v35 = (v31 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v33 <= v35 + 113) {
    unint64_t v33 = v35 + 113;
  }
  unint64_t v36 = v35 + 49;
  if (v33 > v36) {
    unint64_t v36 = v33;
  }
  if (v36 <= 0x19) {
    uint64_t v37 = 25;
  }
  else {
    uint64_t v37 = v36;
  }
  unsigned int v38 = v22[v37];
  unsigned int v39 = v38 - 8;
  if (v38 >= 8)
  {
    if (v37 <= 3) {
      uint64_t v40 = v37;
    }
    else {
      uint64_t v40 = 4;
    }
    switch(v40)
    {
      case 1:
        int v41 = *v22;
        if (v37 < 4) {
          goto LABEL_25;
        }
        goto LABEL_29;
      case 2:
        int v41 = *(unsigned __int16 *)v22;
        if (v37 < 4) {
          goto LABEL_25;
        }
        goto LABEL_29;
      case 3:
        int v41 = *(unsigned __int16 *)v22 | (v22[2] << 16);
        if (v37 < 4) {
          goto LABEL_25;
        }
        goto LABEL_29;
      case 4:
        int v41 = *(_DWORD *)v22;
        if (v37 < 4) {
LABEL_25:
        }
          unsigned int v38 = (v41 | (v39 << (8 * v37))) + 8;
        else {
LABEL_29:
        }
          unsigned int v38 = v41 + 8;
        break;
      default:
        break;
    }
  }
  uint64_t v42 = ~v9;
  uint64_t v322 = ~v12;
  uint64_t v323 = ~v15;
  uint64_t v334 = v19;
  uint64_t v337 = ~v18;
  switch(v38)
  {
    case 1u:
      long long v46 = *(_OWORD *)v22;
      uint64_t v44 = v338;
      uint64_t v45 = v340;
      *(_OWORD *)(v340 + 9) = *(_OWORD *)(v22 + 9);
      *(_OWORD *)uint64_t v340 = v46;
      *(unsigned char *)(v340 + v37) = 1;
      break;
    case 2u:
      uint64_t v45 = v340;
      *(void *)uint64_t v340 = *(void *)v22;
      *(unsigned char *)(v340 + v37) = 2;
      uint64_t v47 = v16;
      uint64_t v48 = v22;
      goto LABEL_35;
    case 3u:
      uint64_t v45 = v340;
      *(void *)uint64_t v340 = *(void *)v22;
      *(void *)(v340 + 8) = *((void *)v22 + 1);
      *(unsigned char *)(v340 + v37) = 3;
      uint64_t v47 = v16;
      uint64_t v48 = v22;
      swift_retain();
LABEL_35:
      swift_retain();
      unint64_t v22 = v48;
      uint64_t v16 = v47;
      uint64_t v44 = v338;
      break;
    case 4u:
      uint64_t v302 = v37;
      uint64_t v308 = v15 | v12;
      uint64_t v49 = *(void *)v22;
      uint64_t v50 = *((void *)v22 + 1);
      char v51 = v22[16];
      unsigned int v52 = v22;
      uint64_t v53 = ~v18;
      sub_21F7652C0(*(void *)v22, v50, v51);
      *(void *)uint64_t v340 = v49;
      *(void *)(v340 + 8) = v50;
      *(unsigned char *)(v340 + 16) = v51;
      uint64_t v45 = v340;
      *(void *)(v340 + 24) = *((void *)v52 + 3);
      int v54 = (void *)((v23 + v340) & v53);
      uint64_t v319 = v52;
      int v55 = (unsigned __int8 *)((unint64_t)&v52[v23] & v53);
      unsigned int v56 = v55[v332];
      swift_bridgeObjectRetain();
      if (v56 >= 5)
      {
        if (v332 <= 3) {
          uint64_t v57 = v332;
        }
        else {
          uint64_t v57 = 4;
        }
        switch(v57)
        {
          case 1:
            int v58 = *v55;
            goto LABEL_64;
          case 2:
            int v58 = *(unsigned __int16 *)v55;
            goto LABEL_64;
          case 3:
            int v58 = *(unsigned __int16 *)v55 | (v55[2] << 16);
            goto LABEL_64;
          case 4:
            int v58 = *(_DWORD *)v55;
LABEL_64:
            if (v332 < 4) {
              unsigned int v56 = (v58 | ((v56 - 5) << (8 * v332))) + 5;
            }
            else {
              unsigned int v56 = v58 + 5;
            }
            break;
          default:
            break;
        }
      }
      switch(v56)
      {
        case 1u:
          uint64_t v88 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v314 + 16);
          v88(v54, v55, v330);
          v88((void *)(((unint64_t)v54 + v9 + v25) & v42), (unsigned __int8 *)((unint64_t)&v55[v9 + v25] & v42), v330);
          *((unsigned char *)v54 + v332) = 1;
          break;
        case 2u:
          *int v54 = *(void *)v55;
          *((unsigned char *)v54 + v332) = 2;
          swift_retain();
          break;
        case 3u:
          *int v54 = *(void *)v55;
          v54[1] = *((void *)v55 + 1);
          *((unsigned char *)v54 + v332) = 3;
          swift_retain();
          swift_retain();
          break;
        case 4u:
          *int v54 = *(void *)v55;
          unint64_t v89 = ((unint64_t)v54 + v324) & v322;
          unint64_t v90 = (unint64_t)&v55[v324] & v322;
          uint64_t v91 = *(void (**)(unint64_t, unint64_t, uint64_t))(v326 + 16);
          swift_retain();
          v91(v89, v90, v327);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v328 + 16))((v325 + v89) & v323, (v325 + v90) & v323, v329);
          *((unsigned char *)v54 + v332) = 4;
          break;
        default:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v314 + 16))(v54, v55, v330);
          *((unsigned char *)v54 + v332) = 0;
          break;
      }
      uint64_t v44 = v338;
      char v92 = 4;
      goto LABEL_140;
    case 5u:
      uint64_t v295 = v20;
      uint64_t v296 = v21;
      uint64_t v293 = v25 + v9;
      uint64_t v294 = ~v9;
      unint64_t v298 = v29;
      uint64_t v302 = v37;
      uint64_t v308 = v15 | v12;
      uint64_t v59 = *(void *)v22;
      uint64_t v60 = *((void *)v22 + 1);
      char v61 = v22[16];
      unsigned int v62 = v22;
      sub_21F7652C0(*(void *)v22, v60, v61);
      *(void *)uint64_t v340 = v59;
      *(void *)(v340 + 8) = v60;
      *(unsigned char *)(v340 + 16) = v61;
      *(void *)(v340 + 24) = *((void *)v62 + 3);
      unsigned int v63 = (void *)((v23 + v340) & ~v18);
      uint64_t v319 = v62;
      uint64_t v64 = (unsigned __int8 *)((unint64_t)&v62[v23] & ~v18);
      unsigned int v65 = v64[v332];
      swift_bridgeObjectRetain();
      if (v65 < 5)
      {
        unint64_t v29 = v298;
      }
      else
      {
        if (v332 <= 3) {
          uint64_t v66 = v332;
        }
        else {
          uint64_t v66 = 4;
        }
        unint64_t v29 = v298;
        switch(v66)
        {
          case 1:
            int v67 = *v64;
            goto LABEL_77;
          case 2:
            int v67 = *(unsigned __int16 *)v64;
            goto LABEL_77;
          case 3:
            int v67 = *(unsigned __int16 *)v64 | (v64[2] << 16);
            goto LABEL_77;
          case 4:
            int v67 = *(_DWORD *)v64;
LABEL_77:
            if (v332 < 4) {
              unsigned int v65 = (v67 | ((v65 - 5) << (8 * v332))) + 5;
            }
            else {
              unsigned int v65 = v67 + 5;
            }
            break;
          default:
            break;
        }
      }
      switch(v65)
      {
        case 1u:
          unint64_t v95 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v314 + 16);
          v95(v63, v64, v330);
          v95((void *)(((unint64_t)v63 + v9 + v25) & v294), (unsigned __int8 *)((unint64_t)&v64[v9 + v25] & v294), v330);
          unint64_t v29 = v298;
          uint64_t v93 = ~v18;
          char v96 = 1;
          goto LABEL_87;
        case 2u:
          *unsigned int v63 = *(void *)v64;
          unint64_t v94 = v332;
          *((unsigned char *)v63 + v332) = 2;
          goto LABEL_85;
        case 3u:
          *unsigned int v63 = *(void *)v64;
          *(void *)(((v23 + v340) & ~v18) + 8) = *((void *)v64 + 1);
          unint64_t v94 = v332;
          *((unsigned char *)v63 + v332) = 3;
          swift_retain();
LABEL_85:
          swift_retain();
          uint64_t v93 = ~v18;
          break;
        case 4u:
          *unsigned int v63 = *(void *)v64;
          unint64_t v97 = ((unint64_t)v63 + v324) & v322;
          unint64_t v98 = (unint64_t)&v64[v324] & v322;
          unsigned int v99 = *(void (**)(unint64_t, unint64_t, uint64_t))(v326 + 16);
          swift_retain();
          v99(v97, v98, v327);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v328 + 16))((v325 + v97) & v323, (v325 + v98) & v323, v329);
          uint64_t v93 = ~v18;
          char v96 = 4;
LABEL_87:
          unint64_t v94 = v332;
          *((unsigned char *)v63 + v332) = v96;
          break;
        default:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v314 + 16))(v63, v64, v330);
          uint64_t v93 = ~v18;
          unint64_t v94 = v332;
          *((unsigned char *)v63 + v332) = 0;
          break;
      }
      uint64_t v44 = v338;
      uint64_t v100 = ((v295 | v18) + v32) & v93;
      uint64_t v101 = ((v296 | v18) + v32) & v93;
      uint64_t v102 = *(void *)v101;
      uint64_t v103 = *(void *)(v101 + 8);
      char v104 = *(unsigned char *)(v101 + 0x10);
      uint64_t v105 = v93;
      sub_21F7652C0(*(void *)v101, v103, v104);
      *(void *)uint64_t v100 = v102;
      *(void *)(v100 + 8) = v103;
      *(unsigned char *)(v100 + 16) = v104;
      *(void *)(v100 + 24) = *(void *)(v101 + 24);
      uint64_t v106 = (void *)((v23 + v100) & v105);
      unint64_t v107 = (unsigned __int8 *)((v23 + v101) & v105);
      unsigned int v108 = v107[v94];
      swift_bridgeObjectRetain();
      unint64_t v109 = v94;
      if (v108 < 5)
      {
        uint64_t v45 = v340;
      }
      else
      {
        if (v94 <= 3) {
          uint64_t v110 = v94;
        }
        else {
          uint64_t v110 = 4;
        }
        uint64_t v45 = v340;
        switch(v110)
        {
          case 1:
            int v111 = *v107;
            goto LABEL_130;
          case 2:
            int v111 = *(unsigned __int16 *)v107;
            goto LABEL_130;
          case 3:
            int v111 = *(unsigned __int16 *)v107 | (v107[2] << 16);
            goto LABEL_130;
          case 4:
            int v111 = *(_DWORD *)v107;
LABEL_130:
            if (v94 < 4) {
              unsigned int v108 = (v111 | ((v108 - 5) << (8 * v94))) + 5;
            }
            else {
              unsigned int v108 = v111 + 5;
            }
            break;
          default:
            break;
        }
      }
      switch(v108)
      {
        case 1u:
          int v144 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v314 + 16);
          v144(v106, v107, v330);
          v144((void *)(((unint64_t)v106 + v293) & v294), (unsigned __int8 *)((unint64_t)&v107[v293] & v294), v330);
          *((unsigned char *)v106 + v94) = 1;
          char v92 = 5;
          break;
        case 2u:
          *uint64_t v106 = *(void *)v107;
          *((unsigned char *)v106 + v94) = 2;
          goto LABEL_138;
        case 3u:
          *uint64_t v106 = *(void *)v107;
          v106[1] = *((void *)v107 + 1);
          *((unsigned char *)v106 + v94) = 3;
          swift_retain();
LABEL_138:
          swift_retain();
          char v92 = 5;
          break;
        case 4u:
          *uint64_t v106 = *(void *)v107;
          unint64_t v145 = ((unint64_t)v106 + v324) & v322;
          unint64_t v146 = (unint64_t)&v107[v324] & v322;
          unint64_t v147 = v109;
          unsigned int v148 = *(void (**)(unint64_t, unint64_t, uint64_t))(v326 + 16);
          swift_retain();
          v148(v145, v146, v327);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v328 + 16))((v325 + v145) & v323, (v325 + v146) & v323, v329);
          *((unsigned char *)v106 + v147) = 4;
          char v92 = 5;
          break;
        default:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v314 + 16))(v106, v107, v330);
          *((unsigned char *)v106 + v94) = 0;
          char v92 = 5;
          break;
      }
LABEL_140:
      uint64_t v37 = v302;
      goto LABEL_141;
    case 6u:
      unint64_t v299 = v34;
      uint64_t v303 = v37;
      uint64_t v308 = v15 | v12;
      uint64_t v68 = *(void *)v22;
      uint64_t v69 = *((void *)v22 + 1);
      char v70 = v22[16];
      uint64_t v71 = v22;
      uint64_t v72 = ~v18;
      sub_21F7652C0(*(void *)v22, v69, v70);
      *(void *)uint64_t v340 = v68;
      *(void *)(v340 + 8) = v69;
      *(unsigned char *)(v340 + 16) = v70;
      uint64_t v45 = v340;
      *(void *)(v340 + 24) = *((void *)v71 + 3);
      uint64_t v73 = (void *)((v23 + v340) & v72);
      uint64_t v319 = v71;
      unint64_t v74 = (unsigned __int8 *)((unint64_t)&v71[v23] & v72);
      unsigned int v75 = v74[v332];
      swift_bridgeObjectRetain();
      if (v75 >= 5)
      {
        if (v332 <= 3) {
          uint64_t v76 = v332;
        }
        else {
          uint64_t v76 = 4;
        }
        switch(v76)
        {
          case 1:
            int v77 = *v74;
            goto LABEL_98;
          case 2:
            int v77 = *(unsigned __int16 *)v74;
            goto LABEL_98;
          case 3:
            int v77 = *(unsigned __int16 *)v74 | (v74[2] << 16);
            goto LABEL_98;
          case 4:
            int v77 = *(_DWORD *)v74;
LABEL_98:
            if (v332 < 4) {
              unsigned int v75 = (v77 | ((v75 - 5) << (8 * v332))) + 5;
            }
            else {
              unsigned int v75 = v77 + 5;
            }
            break;
          default:
            break;
        }
      }
      switch(v75)
      {
        case 1u:
          uint64_t v115 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v314 + 16);
          v115(v73, v74, v330);
          v115((void *)(((unint64_t)v73 + v9 + v25) & v42), (unsigned __int8 *)((unint64_t)&v74[v9 + v25] & v42), v330);
          *((unsigned char *)v73 + v332) = 1;
          break;
        case 2u:
          void *v73 = *(void *)v74;
          *((unsigned char *)v73 + v332) = 2;
          swift_retain();
          break;
        case 3u:
          void *v73 = *(void *)v74;
          v73[1] = *((void *)v74 + 1);
          *((unsigned char *)v73 + v332) = 3;
          swift_retain();
          swift_retain();
          break;
        case 4u:
          void *v73 = *(void *)v74;
          unint64_t v112 = ((unint64_t)v73 + v324) & v322;
          unint64_t v113 = (unint64_t)&v74[v324] & v322;
          unsigned int v114 = *(void (**)(unint64_t, unint64_t, uint64_t))(v326 + 16);
          swift_retain();
          v114(v112, v113, v327);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v328 + 16))((v325 + v112) & v323, (v325 + v113) & v323, v329);
          *((unsigned char *)v73 + v332) = 4;
          break;
        default:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v314 + 16))(v73, v74, v330);
          *((unsigned char *)v73 + v332) = 0;
          break;
      }
      uint64_t v44 = v338;
      uint64_t v37 = v303;
      unint64_t v116 = (v299 + v340) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v117 = (unint64_t)&v319[v299] & 0xFFFFFFFFFFFFFFF8;
      *(unsigned char *)unint64_t v116 = *(unsigned char *)v117;
      uint64_t v118 = (_OWORD *)(v116 + 8);
      uint64_t v119 = (_OWORD *)(v117 + 8);
      if (*(unsigned __int8 *)(v117 + 96) == 255)
      {
        long long v125 = *(_OWORD *)(v117 + 24);
        *uint64_t v118 = *v119;
        *(_OWORD *)(v116 + 24) = v125;
        long long v126 = *(_OWORD *)(v117 + 40);
        long long v127 = *(_OWORD *)(v117 + 56);
        long long v128 = *(_OWORD *)(v117 + 72);
        *(_OWORD *)(v116 + 81) = *(_OWORD *)(v117 + 81);
        *(_OWORD *)(v116 + 56) = v127;
        *(_OWORD *)(v116 + 72) = v128;
        *(_OWORD *)(v116 + 40) = v126;
      }
      else
      {
        *uint64_t v118 = *v119;
        long long v120 = *(_OWORD *)(v117 + 24);
        long long v121 = *(_OWORD *)(v117 + 40);
        long long v122 = *(_OWORD *)(v117 + 72);
        *(_OWORD *)(v116 + 56) = *(_OWORD *)(v117 + 56);
        *(_OWORD *)(v116 + 72) = v122;
        *(_OWORD *)(v116 + 24) = v120;
        *(_OWORD *)(v116 + 40) = v121;
        uint64_t v123 = *(void *)(v117 + 88);
        char v124 = *(unsigned char *)(v117 + 96);
        sub_21F829E74(v123, v124);
        *(void *)(v116 + 88) = v123;
        *(unsigned char *)(v116 + 96) = v124;
      }
      uint64_t v129 = *(void *)(v117 + 104);
      char v130 = *(unsigned char *)(v117 + 112);
      sub_21F829E74(v129, v130);
      *(void *)(v116 + 104) = v129;
      *(unsigned char *)(v116 + 112) = v130;
      char v92 = 6;
LABEL_141:
      *(unsigned char *)(v45 + v37) = v92;
      uint64_t v19 = v334;
      uint64_t v16 = v308;
      goto LABEL_142;
    case 7u:
      unint64_t v300 = v34;
      uint64_t v304 = v37;
      uint64_t v309 = v15 | v12;
      uint64_t v78 = *(void *)v22;
      uint64_t v79 = *((void *)v22 + 1);
      char v80 = v22[16];
      uint64_t v81 = v22;
      uint64_t v82 = ~v18;
      sub_21F7652C0(*(void *)v22, v79, v80);
      *(void *)uint64_t v340 = v78;
      *(void *)(v340 + 8) = v79;
      *(unsigned char *)(v340 + 16) = v80;
      uint64_t v45 = v340;
      *(void *)(v340 + 24) = *((void *)v81 + 3);
      uint64_t v83 = (void *)((v23 + v340) & v82);
      uint64_t v319 = v81;
      uint64_t v84 = (unsigned __int8 *)((unint64_t)&v81[v23] & v82);
      unsigned int v85 = v84[v332];
      swift_bridgeObjectRetain();
      if (v85 >= 5)
      {
        if (v332 <= 3) {
          uint64_t v86 = v332;
        }
        else {
          uint64_t v86 = 4;
        }
        switch(v86)
        {
          case 1:
            int v87 = *v84;
            goto LABEL_114;
          case 2:
            int v87 = *(unsigned __int16 *)v84;
            goto LABEL_114;
          case 3:
            int v87 = *(unsigned __int16 *)v84 | (v84[2] << 16);
            goto LABEL_114;
          case 4:
            int v87 = *(_DWORD *)v84;
LABEL_114:
            if (v332 < 4) {
              unsigned int v85 = (v87 | ((v85 - 5) << (8 * v332))) + 5;
            }
            else {
              unsigned int v85 = v87 + 5;
            }
            break;
          default:
            break;
        }
      }
      switch(v85)
      {
        case 1u:
          int v131 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v314 + 16);
          v131(v83, v84, v330);
          v131((void *)(((unint64_t)v83 + v9 + v25) & v42), (unsigned __int8 *)((unint64_t)&v84[v9 + v25] & v42), v330);
          *((unsigned char *)v83 + v332) = 1;
          break;
        case 2u:
          *uint64_t v83 = *(void *)v84;
          *((unsigned char *)v83 + v332) = 2;
          swift_retain();
          break;
        case 3u:
          *uint64_t v83 = *(void *)v84;
          v83[1] = *((void *)v84 + 1);
          *((unsigned char *)v83 + v332) = 3;
          swift_retain();
          swift_retain();
          break;
        case 4u:
          *uint64_t v83 = *(void *)v84;
          unint64_t v132 = ((unint64_t)v83 + v324) & v322;
          unint64_t v133 = (unint64_t)&v84[v324] & v322;
          unint64_t v134 = *(void (**)(unint64_t, unint64_t, uint64_t))(v326 + 16);
          swift_retain();
          v134(v132, v133, v327);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v328 + 16))((v325 + v132) & v323, (v325 + v133) & v323, v329);
          *((unsigned char *)v83 + v332) = 4;
          break;
        default:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v314 + 16))(v83, v84, v330);
          *((unsigned char *)v83 + v332) = 0;
          break;
      }
      uint64_t v44 = v338;
      unint64_t v135 = (v300 + v340) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v136 = (unint64_t)&v319[v300] & 0xFFFFFFFFFFFFFFF8;
      *(unsigned char *)unint64_t v135 = *(unsigned char *)v136;
      *(unsigned char *)(v135 + 1) = *(unsigned char *)(v136 + 1);
      *(unsigned char *)(v135 + 2) = *(unsigned char *)(v136 + 2);
      uint64_t v137 = *(void *)(v136 + 8);
      uint64_t v138 = *(void *)(v136 + 16);
      char v139 = *(unsigned char *)(v136 + 24);
      sub_21F770E44(v137, v138, v139);
      *(void *)(v135 + 8) = v137;
      *(void *)(v135 + 16) = v138;
      *(unsigned char *)(v135 + 24) = v139;
      unsigned int v140 = *(unsigned __int8 *)(v136 + 48);
      if (v140 <= 0xFB)
      {
        uint64_t v142 = *(void *)(v136 + 32);
        uint64_t v143 = *(void *)(v136 + 40);
        sub_21F770E44(v142, v143, *(unsigned char *)(v136 + 48));
        *(void *)(v135 + 32) = v142;
        *(void *)(v135 + 40) = v143;
        *(unsigned char *)(v135 + 48) = v140;
      }
      else
      {
        long long v141 = *(_OWORD *)(v136 + 32);
        *(unsigned char *)(v135 + 48) = *(unsigned char *)(v136 + 48);
        *(_OWORD *)(v135 + 32) = v141;
      }
      uint64_t v19 = v334;
      uint64_t v37 = v304;
      uint64_t v16 = v309;
      *(unsigned char *)(v340 + v304) = 7;
LABEL_142:
      unint64_t v22 = v319;
      break;
    default:
      uint64_t v43 = *(void *)v22;
      uint64_t v44 = v338;
      uint64_t v45 = v340;
      *(unsigned char *)(v340 + 8) = v22[8];
      *(void *)uint64_t v340 = v43;
      *(unsigned char *)(v340 + v37) = 0;
      break;
  }
  uint64_t v149 = *(void *)(v44 + 32);
  uint64_t v331 = *(void *)(v149 - 8);
  uint64_t v150 = *(unsigned __int8 *)(v331 + 80);
  uint64_t v151 = v16 | v150 | 7;
  uint64_t v152 = v37 + v151 + 1;
  uint64_t v153 = v152 + v45;
  uint64_t v339 = (v152 + v45) & ~v151;
  unint64_t v154 = (unint64_t)&v22[v152];
  unint64_t v155 = (unint64_t)&v22[v152] & ~v151;
  uint64_t v156 = (v16 | v150) + 32;
  unint64_t v157 = *(void *)(v331 + 64);
  uint64_t v158 = v157 + v150;
  if (((v157 + v150) & ~v150) + v157 > v157) {
    v157 += (v157 + v150) & ~v150;
  }
  if (v157 <= v29) {
    unint64_t v157 = v29;
  }
  if (v157 <= 0x10) {
    unint64_t v157 = 16;
  }
  unint64_t v333 = v157;
  unint64_t v159 = v157 + (v156 & ~v151);
  unint64_t v160 = v159 + 1;
  unint64_t v161 = ((v159 + 1 + v151) & ~v151) + v159 + 1;
  if (v159 + 1 > v161) {
    unint64_t v161 = v159 + 1;
  }
  unint64_t v162 = v159 + 8;
  unint64_t v163 = (v159 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v161 <= v163 + 113) {
    unint64_t v161 = v163 + 113;
  }
  unint64_t v164 = v163 + 49;
  if (v161 > v164) {
    unint64_t v164 = v161;
  }
  if (v164 <= 0x19) {
    uint64_t v165 = 25;
  }
  else {
    uint64_t v165 = v164;
  }
  unsigned int v166 = *(unsigned __int8 *)(v155 + v165);
  unsigned int v167 = v166 - 8;
  if (v166 >= 8)
  {
    if (v165 <= 3) {
      uint64_t v168 = v165;
    }
    else {
      uint64_t v168 = 4;
    }
    switch(v168)
    {
      case 1:
        int v169 = *(unsigned __int8 *)v155;
        goto LABEL_167;
      case 2:
        int v169 = *(unsigned __int16 *)v155;
        goto LABEL_167;
      case 3:
        int v169 = *(unsigned __int16 *)v155 | (*(unsigned __int8 *)(((unint64_t)&v22[v152] & ~v151) + 2) << 16);
        goto LABEL_167;
      case 4:
        int v169 = *(_DWORD *)v155;
LABEL_167:
        int v170 = (v169 | (v167 << (8 * v165))) + 8;
        unsigned int v166 = v169 + 8;
        if (v165 < 4) {
          unsigned int v166 = v170;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v341 = ~v151;
  uint64_t v171 = ~v150;
  switch(v166)
  {
    case 1u:
      long long v175 = *(_OWORD *)v155;
      uint64_t v173 = v339;
      *(_OWORD *)(v339 + 9) = *(_OWORD *)(((unint64_t)&v22[v152] & ~v151) + 9);
      *(_OWORD *)uint64_t v339 = v175;
      *(unsigned char *)(v339 + v165) = 1;
      uint64_t v174 = v336;
      break;
    case 2u:
      uint64_t v173 = v339;
      *(void *)uint64_t v339 = *(void *)v155;
      *(unsigned char *)(v339 + v165) = 2;
      goto LABEL_174;
    case 3u:
      uint64_t v173 = v339;
      *(void *)uint64_t v339 = *(void *)v155;
      *(void *)(v339 + 8) = *(void *)(((unint64_t)&v22[v152] & ~v151) + 8);
      *(unsigned char *)(v339 + v165) = 3;
      swift_retain();
LABEL_174:
      swift_retain();
      uint64_t v174 = v336;
      break;
    case 4u:
      uint64_t v310 = v171;
      uint64_t v315 = v158;
      uint64_t v176 = v149;
      uint64_t v320 = v37 + v151 + 1;
      uint64_t v177 = *(void *)v155;
      uint64_t v178 = *(void *)(v155 + 8);
      char v179 = *(unsigned char *)(v155 + 16);
      sub_21F7652C0(*(void *)v155, v178, v179);
      uint64_t v173 = v339;
      *(void *)uint64_t v339 = v177;
      *(void *)(v339 + 8) = v178;
      *(unsigned char *)(v339 + 16) = v179;
      *(void *)(v339 + 24) = *(void *)(v155 + 24);
      uint64_t v180 = (void *)((v156 + v339) & v341);
      uint64_t v181 = (unsigned __int8 *)((v156 + v155) & v341);
      unsigned int v182 = v181[v333];
      swift_bridgeObjectRetain();
      if (v182 >= 5)
      {
        if (v333 <= 3) {
          uint64_t v183 = v333;
        }
        else {
          uint64_t v183 = 4;
        }
        switch(v183)
        {
          case 1:
            int v184 = *v181;
            goto LABEL_202;
          case 2:
            int v184 = *(unsigned __int16 *)v181;
            goto LABEL_202;
          case 3:
            int v184 = *(unsigned __int16 *)v181 | (v181[2] << 16);
            goto LABEL_202;
          case 4:
            int v184 = *(_DWORD *)v181;
LABEL_202:
            int v212 = (v184 | ((v182 - 5) << (8 * v333))) + 5;
            unsigned int v213 = v184 + 5;
            if (v333 >= 4) {
              unsigned int v182 = v213;
            }
            else {
              unsigned int v182 = v212;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v174 = v336;
      switch(v182)
      {
        case 1u:
          char v214 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v331 + 16);
          v214(v180, v181, v176);
          v214((void *)(((unint64_t)v180 + v315) & v310), (unsigned __int8 *)((unint64_t)&v181[v315] & v310), v176);
          *((unsigned char *)v180 + v333) = 1;
          break;
        case 2u:
          void *v180 = *(void *)v181;
          *((unsigned char *)v180 + v333) = 2;
          swift_retain();
          break;
        case 3u:
          void *v180 = *(void *)v181;
          v180[1] = *((void *)v181 + 1);
          *((unsigned char *)v180 + v333) = 3;
          swift_retain();
          swift_retain();
          break;
        case 4u:
          void *v180 = *(void *)v181;
          unint64_t v215 = ((unint64_t)v180 + v324) & v322;
          unint64_t v216 = (unint64_t)&v181[v324] & v322;
          unint64_t v217 = *(void (**)(unint64_t, unint64_t, uint64_t))(v326 + 16);
          swift_retain();
          v217(v215, v216, v327);
          uint64_t v218 = v325 + v215;
          uint64_t v173 = v339;
          (*(void (**)(uint64_t, unint64_t, uint64_t))(v328 + 16))(v218 & v323, (v325 + v216) & v323, v329);
          *((unsigned char *)v180 + v333) = 4;
          break;
        default:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v331 + 16))(v180, v181, v176);
          *((unsigned char *)v180 + v333) = 0;
          break;
      }
      char v219 = 4;
      goto LABEL_277;
    case 5u:
      uint64_t v311 = v171;
      uint64_t v316 = v158;
      uint64_t v305 = v149;
      uint64_t v320 = v37 + v151 + 1;
      uint64_t v185 = *(void *)v155;
      uint64_t v186 = *(void *)(v155 + 8);
      char v187 = *(unsigned char *)(v155 + 16);
      sub_21F7652C0(*(void *)v155, v186, v187);
      *(void *)uint64_t v339 = v185;
      *(void *)(v339 + 8) = v186;
      *(unsigned char *)(v339 + 16) = v187;
      *(void *)(v339 + 24) = *(void *)(v155 + 24);
      unsigned int v188 = (void *)((v156 + v339) & v341);
      unint64_t v301 = (unsigned __int8 *)v155;
      uint64_t v189 = (unsigned __int8 *)((v156 + v155) & v341);
      unsigned int v190 = v189[v333];
      swift_bridgeObjectRetain();
      if (v190 >= 5)
      {
        if (v333 <= 3) {
          uint64_t v191 = v333;
        }
        else {
          uint64_t v191 = 4;
        }
        switch(v191)
        {
          case 1:
            int v192 = *v189;
            goto LABEL_215;
          case 2:
            int v192 = *(unsigned __int16 *)v189;
            goto LABEL_215;
          case 3:
            int v192 = *(unsigned __int16 *)((v156 + v155) & v341) | (*(unsigned __int8 *)(((v156 + v155) & v341) + 2) << 16);
            goto LABEL_215;
          case 4:
            int v192 = *(_DWORD *)v189;
LABEL_215:
            int v220 = (v192 | ((v190 - 5) << (8 * v333))) + 5;
            unsigned int v221 = v192 + 5;
            if (v333 >= 4) {
              unsigned int v190 = v221;
            }
            else {
              unsigned int v190 = v220;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v297 = v165;
      switch(v190)
      {
        case 1u:
          uint64_t v223 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v331 + 16);
          v223(v188, v189, v305);
          v223((void *)(((unint64_t)v188 + v316) & v311), (unsigned __int8 *)((unint64_t)&v189[v316] & v311), v305);
          char v224 = 1;
          goto LABEL_224;
        case 2u:
          *unsigned int v188 = *(void *)v189;
          unint64_t v222 = v333;
          *((unsigned char *)v188 + v333) = 2;
          swift_retain();
          break;
        case 3u:
          *unsigned int v188 = *(void *)v189;
          *(void *)(((v156 + v339) & v341) + 8) = *(void *)(((v156 + v155) & v341) + 8);
          unint64_t v222 = v333;
          *((unsigned char *)v188 + v333) = 3;
          swift_retain();
          swift_retain();
          break;
        case 4u:
          *unsigned int v188 = *(void *)v189;
          unint64_t v225 = ((unint64_t)v188 + v324) & v322;
          unint64_t v226 = (unint64_t)&v189[v324] & v322;
          uint64_t v227 = *(void (**)(unint64_t, unint64_t, uint64_t))(v326 + 16);
          swift_retain();
          v227(v225, v226, v327);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v328 + 16))((v325 + v225) & v323, (v325 + v226) & v323, v329);
          char v224 = 4;
LABEL_224:
          unint64_t v222 = v333;
          *((unsigned char *)v188 + v333) = v224;
          break;
        default:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v331 + 16))(v188, v189, v305);
          unint64_t v222 = v333;
          *((unsigned char *)v188 + v333) = 0;
          break;
      }
      uint64_t v228 = ((v153 | v151) + v160) & v341;
      uint64_t v229 = ((v154 | v151) + v160) & v341;
      uint64_t v230 = *(void *)v229;
      uint64_t v231 = *(void *)(v229 + 8);
      char v232 = *(unsigned char *)(v229 + 0x10);
      sub_21F7652C0(*(void *)v229, v231, v232);
      *(void *)uint64_t v228 = v230;
      *(void *)(v228 + 8) = v231;
      *(unsigned char *)(v228 + 16) = v232;
      *(void *)(v228 + 24) = *(void *)(v229 + 24);
      unint64_t v233 = (void *)((v156 + v228) & v341);
      uint64_t v234 = (unsigned __int8 *)((v156 + v229) & v341);
      unsigned int v235 = v234[v222];
      swift_bridgeObjectRetain();
      unint64_t v236 = v222;
      if (v235 < 5)
      {
        uint64_t v174 = v336;
        uint64_t v173 = v339;
        uint64_t v165 = v297;
        unint64_t v155 = (unint64_t)v301;
      }
      else
      {
        if (v222 <= 3) {
          uint64_t v237 = v222;
        }
        else {
          uint64_t v237 = 4;
        }
        uint64_t v174 = v336;
        uint64_t v173 = v339;
        uint64_t v165 = v297;
        unint64_t v155 = (unint64_t)v301;
        switch(v237)
        {
          case 1:
            int v238 = *v234;
            goto LABEL_267;
          case 2:
            int v238 = *(unsigned __int16 *)v234;
            goto LABEL_267;
          case 3:
            int v238 = *(unsigned __int16 *)v234 | (v234[2] << 16);
            goto LABEL_267;
          case 4:
            int v238 = *(_DWORD *)v234;
LABEL_267:
            int v275 = (v238 | ((v235 - 5) << (8 * v236))) + 5;
            unsigned int v276 = v238 + 5;
            if (v236 >= 4) {
              unsigned int v235 = v276;
            }
            else {
              unsigned int v235 = v275;
            }
            break;
          default:
            break;
        }
      }
      switch(v235)
      {
        case 1u:
          uint64_t v277 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v331 + 16);
          v277(v233, v234, v305);
          v277((void *)(((unint64_t)v233 + v316) & v311), (unsigned __int8 *)((unint64_t)&v234[v316] & v311), v305);
          *((unsigned char *)v233 + v236) = 1;
          char v219 = 5;
          break;
        case 2u:
          *unint64_t v233 = *(void *)v234;
          *((unsigned char *)v233 + v236) = 2;
          goto LABEL_275;
        case 3u:
          *unint64_t v233 = *(void *)v234;
          v233[1] = *((void *)v234 + 1);
          *((unsigned char *)v233 + v236) = 3;
          swift_retain();
LABEL_275:
          swift_retain();
          char v219 = 5;
          break;
        case 4u:
          *unint64_t v233 = *(void *)v234;
          unint64_t v278 = ((unint64_t)v233 + v324) & v322;
          unint64_t v279 = (unint64_t)&v234[v324] & v322;
          unint64_t v280 = *(void (**)(unint64_t, unint64_t, uint64_t))(v326 + 16);
          swift_retain();
          v280(v278, v279, v327);
          uint64_t v281 = v325 + v278;
          uint64_t v173 = v339;
          (*(void (**)(uint64_t, unint64_t, uint64_t))(v328 + 16))(v281 & v323, (v325 + v279) & v323, v329);
          *((unsigned char *)v233 + v236) = 4;
          unint64_t v155 = (unint64_t)v301;
          char v219 = 5;
          break;
        default:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v331 + 16))(v233, v234, v305);
          *((unsigned char *)v233 + v236) = 0;
          char v219 = 5;
          break;
      }
LABEL_277:
      *(unsigned char *)(v173 + v165) = v219;
      uint64_t v19 = v334;
      goto LABEL_278;
    case 6u:
      unint64_t v306 = v162;
      uint64_t v312 = v171;
      uint64_t v317 = v158;
      uint64_t v321 = v37 + v151 + 1;
      uint64_t v193 = v149;
      uint64_t v194 = *(void *)v155;
      uint64_t v195 = *(void *)(v155 + 8);
      char v196 = *(unsigned char *)(v155 + 16);
      sub_21F7652C0(*(void *)v155, v195, v196);
      uint64_t v197 = v339;
      *(void *)uint64_t v339 = v194;
      *(void *)(v339 + 8) = v195;
      *(unsigned char *)(v339 + 16) = v196;
      *(void *)(v339 + 24) = *(void *)(v155 + 24);
      int v198 = (void *)((v156 + v339) & v341);
      uint64_t v199 = (unsigned __int8 *)((v156 + v155) & v341);
      unsigned int v200 = v199[v333];
      swift_bridgeObjectRetain();
      if (v200 >= 5)
      {
        if (v333 <= 3) {
          uint64_t v201 = v333;
        }
        else {
          uint64_t v201 = 4;
        }
        switch(v201)
        {
          case 1:
            int v202 = *v199;
            goto LABEL_235;
          case 2:
            int v202 = *(unsigned __int16 *)v199;
            goto LABEL_235;
          case 3:
            int v202 = *(unsigned __int16 *)v199 | (v199[2] << 16);
            goto LABEL_235;
          case 4:
            int v202 = *(_DWORD *)v199;
LABEL_235:
            int v239 = (v202 | ((v200 - 5) << (8 * v333))) + 5;
            unsigned int v240 = v202 + 5;
            if (v333 >= 4) {
              unsigned int v200 = v240;
            }
            else {
              unsigned int v200 = v239;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v174 = v336;
      switch(v200)
      {
        case 1u:
          long long v244 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v331 + 16);
          v244(v198, v199, v193);
          v244((void *)(((unint64_t)v198 + v317) & v312), (unsigned __int8 *)((unint64_t)&v199[v317] & v312), v193);
          *((unsigned char *)v198 + v333) = 1;
          break;
        case 2u:
          *int v198 = *(void *)v199;
          *((unsigned char *)v198 + v333) = 2;
          swift_retain();
          break;
        case 3u:
          *int v198 = *(void *)v199;
          v198[1] = *((void *)v199 + 1);
          *((unsigned char *)v198 + v333) = 3;
          swift_retain();
          swift_retain();
          break;
        case 4u:
          *int v198 = *(void *)v199;
          unint64_t v241 = ((unint64_t)v198 + v324) & v322;
          unint64_t v242 = (unint64_t)&v199[v324] & v322;
          long long v243 = *(void (**)(unint64_t, unint64_t, uint64_t))(v326 + 16);
          swift_retain();
          v243(v241, v242, v327);
          uint64_t v197 = v339;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v328 + 16))((v325 + v241) & v323, (v325 + v242) & v323, v329);
          *((unsigned char *)v198 + v333) = 4;
          break;
        default:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v331 + 16))(v198, v199, v193);
          *((unsigned char *)v198 + v333) = 0;
          break;
      }
      uint64_t v19 = v334;
      uint64_t v152 = v321;
      unint64_t v245 = (v306 + v197) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v246 = (v306 + v155) & 0xFFFFFFFFFFFFFFF8;
      *(unsigned char *)unint64_t v245 = *(unsigned char *)v246;
      long long v247 = (_OWORD *)(v245 + 8);
      long long v248 = (_OWORD *)(v246 + 8);
      if (*(unsigned __int8 *)(v246 + 96) == 255)
      {
        long long v254 = *(_OWORD *)(v246 + 24);
        *long long v247 = *v248;
        *(_OWORD *)(v245 + 24) = v254;
        long long v255 = *(_OWORD *)(v246 + 40);
        long long v256 = *(_OWORD *)(v246 + 56);
        long long v257 = *(_OWORD *)(v246 + 72);
        *(_OWORD *)(v245 + 81) = *(_OWORD *)(v246 + 81);
        *(_OWORD *)(v245 + 56) = v256;
        *(_OWORD *)(v245 + 72) = v257;
        *(_OWORD *)(v245 + 40) = v255;
      }
      else
      {
        *long long v247 = *v248;
        long long v249 = *(_OWORD *)(v246 + 24);
        long long v250 = *(_OWORD *)(v246 + 40);
        long long v251 = *(_OWORD *)(v246 + 72);
        *(_OWORD *)(v245 + 56) = *(_OWORD *)(v246 + 56);
        *(_OWORD *)(v245 + 72) = v251;
        *(_OWORD *)(v245 + 24) = v249;
        *(_OWORD *)(v245 + 40) = v250;
        uint64_t v252 = *(void *)(v246 + 88);
        char v253 = *(unsigned char *)(v246 + 96);
        sub_21F829E74(v252, v253);
        *(void *)(v245 + 88) = v252;
        *(unsigned char *)(v245 + 96) = v253;
      }
      uint64_t v258 = *(void *)(v246 + 104);
      char v259 = *(unsigned char *)(v246 + 112);
      sub_21F829E74(v258, v259);
      *(void *)(v245 + 104) = v258;
      *(unsigned char *)(v245 + 112) = v259;
      uint64_t v173 = v339;
      *(unsigned char *)(v339 + v165) = 6;
      break;
    case 7u:
      unint64_t v307 = v162;
      uint64_t v313 = v171;
      uint64_t v318 = v158;
      uint64_t v320 = v37 + v151 + 1;
      uint64_t v203 = v149;
      uint64_t v204 = *(void *)v155;
      uint64_t v205 = *(void *)(v155 + 8);
      char v206 = *(unsigned char *)(v155 + 16);
      sub_21F7652C0(*(void *)v155, v205, v206);
      *(void *)uint64_t v339 = v204;
      *(void *)(v339 + 8) = v205;
      *(unsigned char *)(v339 + 16) = v206;
      *(void *)(v339 + 24) = *(void *)(v155 + 24);
      int v207 = (void *)((v156 + v339) & v341);
      unsigned int v208 = (unsigned __int8 *)((v156 + v155) & v341);
      unsigned int v209 = v208[v333];
      swift_bridgeObjectRetain();
      if (v209 >= 5)
      {
        if (v333 <= 3) {
          uint64_t v210 = v333;
        }
        else {
          uint64_t v210 = 4;
        }
        switch(v210)
        {
          case 1:
            int v211 = *v208;
            goto LABEL_251;
          case 2:
            int v211 = *(unsigned __int16 *)v208;
            goto LABEL_251;
          case 3:
            int v211 = *(unsigned __int16 *)v208 | (v208[2] << 16);
            goto LABEL_251;
          case 4:
            int v211 = *(_DWORD *)v208;
LABEL_251:
            int v260 = (v211 | ((v209 - 5) << (8 * v333))) + 5;
            unsigned int v261 = v211 + 5;
            if (v333 >= 4) {
              unsigned int v209 = v261;
            }
            else {
              unsigned int v209 = v260;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v174 = v336;
      switch(v209)
      {
        case 1u:
          uint64_t v262 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v331 + 16);
          v262(v207, v208, v203);
          v262((void *)(((unint64_t)v207 + v318) & v313), (unsigned __int8 *)((unint64_t)&v208[v318] & v313), v203);
          *((unsigned char *)v207 + v333) = 1;
          break;
        case 2u:
          *int v207 = *(void *)v208;
          *((unsigned char *)v207 + v333) = 2;
          swift_retain();
          break;
        case 3u:
          *int v207 = *(void *)v208;
          v207[1] = *((void *)v208 + 1);
          *((unsigned char *)v207 + v333) = 3;
          swift_retain();
          swift_retain();
          break;
        case 4u:
          *int v207 = *(void *)v208;
          unint64_t v263 = ((unint64_t)v207 + v324) & v322;
          unint64_t v264 = (unint64_t)&v208[v324] & v322;
          long long v265 = *(void (**)(unint64_t, unint64_t, uint64_t))(v326 + 16);
          swift_retain();
          v265(v263, v264, v327);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v328 + 16))((v325 + v263) & v323, (v325 + v264) & v323, v329);
          *((unsigned char *)v207 + v333) = 4;
          break;
        default:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v331 + 16))(v207, v208, v203);
          *((unsigned char *)v207 + v333) = 0;
          break;
      }
      unint64_t v266 = (v307 + v339) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v267 = (v307 + v155) & 0xFFFFFFFFFFFFFFF8;
      *(unsigned char *)unint64_t v266 = *(unsigned char *)v267;
      *(unsigned char *)(v266 + 1) = *(unsigned char *)(v267 + 1);
      *(unsigned char *)(v266 + 2) = *(unsigned char *)(v267 + 2);
      uint64_t v268 = *(void *)(v267 + 8);
      uint64_t v269 = *(void *)(v267 + 16);
      char v270 = *(unsigned char *)(v267 + 24);
      sub_21F770E44(v268, v269, v270);
      *(void *)(v266 + 8) = v268;
      *(void *)(v266 + 16) = v269;
      *(unsigned char *)(v266 + 24) = v270;
      unsigned int v271 = *(unsigned __int8 *)(v267 + 48);
      uint64_t v19 = v334;
      if (v271 <= 0xFB)
      {
        uint64_t v273 = *(void *)(v267 + 32);
        uint64_t v274 = *(void *)(v267 + 40);
        sub_21F770E44(v273, v274, *(unsigned char *)(v267 + 48));
        *(void *)(v266 + 32) = v273;
        *(void *)(v266 + 40) = v274;
        *(unsigned char *)(v266 + 48) = v271;
      }
      else
      {
        long long v272 = *(_OWORD *)(v267 + 32);
        *(unsigned char *)(v266 + 48) = *(unsigned char *)(v267 + 48);
        *(_OWORD *)(v266 + 32) = v272;
      }
      uint64_t v173 = v339;
      *(unsigned char *)(v339 + v165) = 7;
LABEL_278:
      uint64_t v152 = v320;
      break;
    default:
      uint64_t v172 = *(void *)v155;
      uint64_t v173 = v339;
      *(unsigned char *)(v339 + 8) = *(unsigned char *)(((unint64_t)&v22[v152] & ~v151) + 8);
      *(void *)uint64_t v339 = v172;
      *(unsigned char *)(v339 + v165) = 0;
      uint64_t v174 = v336;
      break;
  }
  *(void *)(((v173 | 7) + v165 + 1) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v155 | 7) + v165 + 1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v282 = ((v165 + ((v152 + (v19 & v337)) & v341) + 8) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v283 = v174 + v282 + 7;
  unint64_t v284 = (void *)((v335 + v282 + 7) & 0xFFFFFFFFFFFFFFF8);
  v283 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v283 = *v284;
  unint64_t v285 = (void *)(((unint64_t)v284 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v286 = (void *)((v283 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v286 = *v285;
  unint64_t v287 = (void *)(((unint64_t)v285 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v288 = (void *)(((unint64_t)v286 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v288 = *v287;
  unint64_t v289 = ((unint64_t)v288 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v290 = (unint64_t *)(((unint64_t)v287 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v291 = *v290;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v291 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v289 = *(_OWORD *)v290;
  }
  else
  {
    *(void *)unint64_t v289 = v291;
    *(void *)(v289 + 8) = v290[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v174;
}

uint64_t sub_21F845C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v443 = a3;
  uint64_t v420 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v420 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v418 = sub_21FA24310();
  uint64_t v10 = *(void *)(v418 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v419 = sub_21FA24320();
  uint64_t v12 = *(void *)(v419 - 8);
  uint64_t v13 = v12;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = v14 | v11;
  uint64_t v16 = v14 | v11 | v9;
  uint64_t v17 = v16 | 7;
  uint64_t v18 = (v16 | 7) + v7;
  uint64_t v19 = a1;
  uint64_t v20 = v18 + a1;
  uint64_t v21 = ~(v16 | 7);
  uint64_t v22 = v20 & v21;
  uint64_t v447 = v18;
  uint64_t v448 = a2;
  uint64_t v23 = v18 + a2;
  uint64_t v24 = v23 & v21;
  uint64_t v449 = v21;
  uint64_t v442 = v12;
  uint64_t v416 = v14;
  uint64_t v417 = v10;
  if ((v20 & v21) == (v23 & v21))
  {
    unint64_t v40 = *(void *)(v8 + 64);
    uint64_t v41 = *(void *)(v10 + 64);
    uint64_t v42 = *(void *)(v12 + 64);
    uint64_t v43 = (v16 + 32) & v21;
    if (((v40 + v9) & ~v9) + v40 > v40) {
      v40 += (v40 + v9) & ~v9;
    }
    uint64_t v413 = ~v11;
    uint64_t v414 = *(void *)(v10 + 64);
    uint64_t v412 = v11 + 8;
    uint64_t v415 = ~v14;
    unint64_t v44 = ((((v11 + 8) & ~v11) + v14 + v41) & ~v14) + v42;
    if (v40 <= v44) {
      unint64_t v40 = ((((v11 + 8) & ~v11) + v14 + v41) & ~v14) + v42;
    }
    if (v40 <= 0x10) {
      unint64_t v40 = 16;
    }
    unint64_t v45 = (v43 | 1) + v40;
    unint64_t v46 = ((v45 + v17) & v21) + v45;
    if (v45 > v46) {
      unint64_t v46 = v45;
    }
    unint64_t v47 = (v45 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v46 <= v47 + 113) {
      unint64_t v46 = v47 + 113;
    }
    unint64_t v48 = v47 + 49;
    if (v46 > v48) {
      unint64_t v48 = v46;
    }
    if (v48 <= 0x19) {
      uint64_t v34 = 25;
    }
    else {
      uint64_t v34 = v48;
    }
    uint64_t v38 = v19;
  }
  else
  {
    uint64_t v396 = v23;
    uint64_t v403 = v20;
    uint64_t v405 = v8;
    uint64_t v436 = v16 + 32;
    uint64_t v25 = (v16 + 32) & v21;
    uint64_t v26 = v10;
    unint64_t v27 = *(void *)(v8 + 64);
    uint64_t v394 = v27 + v9;
    unint64_t v28 = ((v27 + v9) & ~v9) + v27;
    if (v28 <= v27) {
      unint64_t v28 = *(void *)(v8 + 64);
    }
    uint64_t v413 = ~v11;
    uint64_t v412 = v11 + 8;
    uint64_t v414 = *(void *)(v26 + 64);
    uint64_t v415 = ~v14;
    unint64_t v29 = ((((v11 + 8) & ~v11) + v14 + v414) & ~v14) + *(void *)(v12 + 64);
    if (v28 <= v29) {
      unint64_t v28 = ((((v11 + 8) & ~v11) + v14 + v414) & ~v14) + *(void *)(v12 + 64);
    }
    if (v28 <= 0x10) {
      unint64_t v28 = 16;
    }
    unint64_t v438 = v28;
    unint64_t v30 = (v25 | 1) + v28;
    unint64_t v31 = ((v30 + v17) & v21) + v30;
    if (v30 > v31) {
      unint64_t v31 = v30;
    }
    unint64_t v32 = (v30 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v31 <= v32 + 113) {
      unint64_t v31 = v32 + 113;
    }
    unint64_t v33 = v32 + 49;
    if (v31 <= v33) {
      unint64_t v31 = v33;
    }
    if (v31 <= 0x19) {
      uint64_t v34 = 25;
    }
    else {
      uint64_t v34 = v31;
    }
    unsigned int v35 = *(unsigned __int8 *)(v22 + v34);
    unsigned int v36 = v35 - 8;
    if (v35 < 8)
    {
      uint64_t v38 = v19;
    }
    else
    {
      if (v34 <= 3) {
        uint64_t v37 = v34;
      }
      else {
        uint64_t v37 = 4;
      }
      uint64_t v38 = v19;
      switch(v37)
      {
        case 1:
          int v39 = *(unsigned __int8 *)v22;
          if (v34 < 4) {
            goto LABEL_42;
          }
          goto LABEL_46;
        case 2:
          int v39 = *(unsigned __int16 *)v22;
          if (v34 < 4) {
            goto LABEL_42;
          }
          goto LABEL_46;
        case 3:
          int v39 = *(unsigned __int16 *)(v20 & v21) | (*(unsigned __int8 *)((v20 & v21) + 2) << 16);
          if (v34 < 4) {
            goto LABEL_42;
          }
          goto LABEL_46;
        case 4:
          int v39 = *(_DWORD *)v22;
          if (v34 < 4) {
LABEL_42:
          }
            unsigned int v35 = (v39 | (v36 << (8 * v34))) + 8;
          else {
LABEL_46:
          }
            unsigned int v35 = v39 + 8;
          break;
        default:
          break;
      }
    }
    unint64_t v408 = v29;
    uint64_t v410 = v14 | v11;
    uint64_t v398 = ~v9;
    uint64_t v440 = v34;
    switch(v35)
    {
      case 2u:
        swift_release();
        goto LABEL_143;
      case 3u:
        swift_release();
        swift_release();
        goto LABEL_143;
      case 4u:
        sub_21F7656A8(*(void *)(v20 & v21), *(void *)((v20 & v21) + 8), *(unsigned char *)((v20 & v21) + 0x10));
        swift_bridgeObjectRelease();
        uint64_t v49 = (unsigned __int8 *)((v436 + v22) & v21);
        unsigned int v50 = v49[v438];
        unsigned int v51 = v50 - 5;
        if (v50 >= 5)
        {
          if (v438 <= 3) {
            uint64_t v52 = v438;
          }
          else {
            uint64_t v52 = 4;
          }
          switch(v52)
          {
            case 1:
              int v53 = *v49;
              goto LABEL_77;
            case 2:
              int v53 = *(unsigned __int16 *)v49;
              goto LABEL_77;
            case 3:
              int v53 = *(unsigned __int16 *)v49 | (*(unsigned __int8 *)(((v436 + v22) & v21) + 2) << 16);
              goto LABEL_77;
            case 4:
              int v53 = *(_DWORD *)v49;
LABEL_77:
              if (v438 < 4) {
                unsigned int v50 = (v53 | (v51 << (8 * v438))) + 5;
              }
              else {
                unsigned int v50 = v53 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v50)
        {
          case 1u:
            uint64_t v422 = v38;
            uint64_t v69 = *(void (**)(unint64_t, uint64_t))(v405 + 8);
            unint64_t v70 = (v436 + v22) & v21;
            uint64_t v71 = v420;
            v69(v70, v420);
            uint64_t v72 = &v49[v9 + v27];
            goto LABEL_141;
          case 2u:
            goto LABEL_139;
          case 3u:
            goto LABEL_138;
          case 4u:
            goto LABEL_142;
          default:
            goto LABEL_137;
        }
      case 5u:
        sub_21F7656A8(*(void *)(v20 & v21), *(void *)((v20 & v21) + 8), *(unsigned char *)((v20 & v21) + 0x10));
        swift_bridgeObjectRelease();
        int v54 = (unsigned __int8 *)((v436 + v22) & v21);
        unsigned int v55 = v54[v438];
        unsigned int v56 = v55 - 5;
        if (v55 >= 5)
        {
          if (v438 <= 3) {
            uint64_t v57 = v438;
          }
          else {
            uint64_t v57 = 4;
          }
          switch(v57)
          {
            case 1:
              int v58 = *v54;
              goto LABEL_85;
            case 2:
              int v58 = *(unsigned __int16 *)v54;
              goto LABEL_85;
            case 3:
              int v58 = *(unsigned __int16 *)v54 | (*(unsigned __int8 *)(((v436 + v22) & v21) + 2) << 16);
              goto LABEL_85;
            case 4:
              int v58 = *(_DWORD *)v54;
LABEL_85:
              if (v438 < 4) {
                unsigned int v55 = (v58 | (v56 << (8 * v438))) + 5;
              }
              else {
                unsigned int v55 = v58 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v55)
        {
          case 1u:
            uint64_t v423 = v38;
            uint64_t v73 = *(void (**)(uint64_t, uint64_t))(v405 + 8);
            v73((v436 + v22) & v21, v420);
            v73((unint64_t)&v54[v9 + v27] & v398, v420);
            uint64_t v38 = v423;
            break;
          case 2u:
            swift_release();
            break;
          case 3u:
            swift_release();
            swift_release();
            break;
          case 4u:
            swift_release();
            unint64_t v74 = (unint64_t)&v54[v412] & v413;
            (*(void (**)(unint64_t, uint64_t))(v417 + 8))(v74, v418);
            (*(void (**)(unint64_t, uint64_t))(v442 + 8))((v74 + v416 + v414) & v415, v419);
            break;
          default:
            (*(void (**)(uint64_t, uint64_t))(v405 + 8))((v436 + v22) & v21, v420);
            break;
        }
        uint64_t v75 = ((v403 | v17) + v30) & v21;
        sub_21F7656A8(*(void *)v75, *(void *)(v75 + 8), *(unsigned char *)(v75 + 0x10));
        swift_bridgeObjectRelease();
        uint64_t v49 = (unsigned __int8 *)((v436 + v75) & v21);
        unsigned int v76 = v49[v438];
        unsigned int v77 = v76 - 5;
        if (v76 >= 5)
        {
          if (v438 <= 3) {
            uint64_t v78 = v438;
          }
          else {
            uint64_t v78 = 4;
          }
          switch(v78)
          {
            case 1:
              int v79 = *v49;
              goto LABEL_133;
            case 2:
              int v79 = *(unsigned __int16 *)v49;
              goto LABEL_133;
            case 3:
              int v79 = *(unsigned __int16 *)v49 | (*(unsigned __int8 *)(((v436 + v75) & v21) + 2) << 16);
              goto LABEL_133;
            case 4:
              int v79 = *(_DWORD *)v49;
LABEL_133:
              if (v438 < 4) {
                unsigned int v76 = (v79 | (v77 << (8 * v438))) + 5;
              }
              else {
                unsigned int v76 = v79 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v76)
        {
          case 1u:
            uint64_t v422 = v38;
            uint64_t v69 = *(void (**)(unint64_t, uint64_t))(v405 + 8);
            uint64_t v71 = v420;
            v69((unint64_t)v49, v420);
            uint64_t v72 = &v49[v394];
LABEL_141:
            v69((unint64_t)v72 & v398, v71);
            uint64_t v38 = v422;
            uint64_t v13 = v442;
            break;
          case 2u:
            goto LABEL_139;
          case 3u:
LABEL_138:
            swift_release();
LABEL_139:
            swift_release();
            uint64_t v13 = v442;
            break;
          case 4u:
LABEL_142:
            swift_release();
            unint64_t v90 = (unint64_t)&v49[v412] & v413;
            (*(void (**)(unint64_t, uint64_t))(v417 + 8))(v90, v418);
            unint64_t v91 = v414 + v416 + v90;
            uint64_t v13 = v442;
            (*(void (**)(unint64_t, uint64_t))(v442 + 8))(v91 & v415, v419);
            break;
          default:
LABEL_137:
            (*(void (**)(unsigned __int8 *, uint64_t))(v405 + 8))(v49, v420);
            uint64_t v13 = v442;
            break;
        }
        goto LABEL_143;
      case 6u:
        sub_21F7656A8(*(void *)(v20 & v21), *(void *)((v20 & v21) + 8), *(unsigned char *)((v20 & v21) + 0x10));
        swift_bridgeObjectRelease();
        uint64_t v59 = (unsigned __int8 *)((v436 + v22) & v21);
        unsigned int v60 = v59[v438];
        unsigned int v61 = v60 - 5;
        if (v60 >= 5)
        {
          if (v438 <= 3) {
            uint64_t v62 = v438;
          }
          else {
            uint64_t v62 = 4;
          }
          switch(v62)
          {
            case 1:
              int v63 = *v59;
              goto LABEL_103;
            case 2:
              int v63 = *(unsigned __int16 *)v59;
              goto LABEL_103;
            case 3:
              int v63 = *(unsigned __int16 *)v59 | (*(unsigned __int8 *)(((v436 + v22) & v21) + 2) << 16);
              goto LABEL_103;
            case 4:
              int v63 = *(_DWORD *)v59;
LABEL_103:
              if (v438 < 4) {
                unsigned int v60 = (v63 | (v61 << (8 * v438))) + 5;
              }
              else {
                unsigned int v60 = v63 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v60)
        {
          case 1u:
            uint64_t v424 = v38;
            uint64_t v82 = *(void (**)(uint64_t, uint64_t))(v405 + 8);
            v82((v436 + v22) & v21, v420);
            v82((unint64_t)&v59[v9 + v27] & v398, v420);
            uint64_t v38 = v424;
            goto LABEL_112;
          case 2u:
            goto LABEL_109;
          case 3u:
            swift_release();
LABEL_109:
            swift_release();
            goto LABEL_112;
          case 4u:
            swift_release();
            unint64_t v80 = (unint64_t)&v59[v412] & v413;
            (*(void (**)(unint64_t, uint64_t))(v417 + 8))(v80, v418);
            unint64_t v81 = (v80 + v416 + v414) & v415;
            uint64_t v13 = v442;
            (*(void (**)(unint64_t, uint64_t))(v442 + 8))(v81, v419);
            goto LABEL_113;
          default:
            (*(void (**)(uint64_t, uint64_t))(v405 + 8))((v436 + v22) & v21, v420);
LABEL_112:
            uint64_t v13 = v442;
LABEL_113:
            unint64_t v83 = ((v22 | 7) + v30) & 0xFFFFFFFFFFFFFFF8;
            int v84 = *(unsigned __int8 *)(v83 + 96);
            if (v84 != 255) {
              sub_21F82B5F8(*(void *)(v83 + 88), v84 & 1);
            }
            sub_21F82B5F8(*(void *)(v83 + 104), *(unsigned char *)(v83 + 112));
            break;
        }
        goto LABEL_143;
      case 7u:
        sub_21F7656A8(*(void *)(v20 & v21), *(void *)((v20 & v21) + 8), *(unsigned char *)((v20 & v21) + 0x10));
        swift_bridgeObjectRelease();
        uint64_t v64 = (unsigned __int8 *)((v436 + v22) & v21);
        unsigned int v65 = v64[v438];
        unsigned int v66 = v65 - 5;
        if (v65 >= 5)
        {
          if (v438 <= 3) {
            uint64_t v67 = v438;
          }
          else {
            uint64_t v67 = 4;
          }
          switch(v67)
          {
            case 1:
              int v68 = *v64;
              goto LABEL_119;
            case 2:
              int v68 = *(unsigned __int16 *)v64;
              goto LABEL_119;
            case 3:
              int v68 = *(unsigned __int16 *)v64 | (*(unsigned __int8 *)(((v436 + v22) & v21) + 2) << 16);
              goto LABEL_119;
            case 4:
              int v68 = *(_DWORD *)v64;
LABEL_119:
              if (v438 < 4) {
                unsigned int v65 = (v68 | (v66 << (8 * v438))) + 5;
              }
              else {
                unsigned int v65 = v68 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v65)
        {
          case 1u:
            uint64_t v425 = v38;
            unsigned int v85 = *(void (**)(uint64_t, uint64_t))(v405 + 8);
            v85((v436 + v22) & v21, v420);
            v85((unint64_t)&v64[v9 + v27] & v398, v420);
            uint64_t v38 = v425;
            uint64_t v13 = v442;
            break;
          case 2u:
            goto LABEL_126;
          case 3u:
            swift_release();
LABEL_126:
            swift_release();
            uint64_t v13 = v442;
            break;
          case 4u:
            swift_release();
            unint64_t v86 = (unint64_t)&v64[v412] & v413;
            (*(void (**)(unint64_t, uint64_t))(v417 + 8))(v86, v418);
            unint64_t v87 = (v86 + v416 + v414) & v415;
            uint64_t v13 = v442;
            (*(void (**)(unint64_t, uint64_t))(v442 + 8))(v87, v419);
            break;
          default:
            (*(void (**)(uint64_t, uint64_t))(v405 + 8))((v436 + v22) & v21, v420);
            uint64_t v13 = v442;
            break;
        }
        unint64_t v88 = ((v22 | 7) + v30) & 0xFFFFFFFFFFFFFFF8;
        sub_21F770E38(*(void *)(v88 + 8), *(void *)(v88 + 16), *(unsigned char *)(v88 + 24));
        unsigned int v89 = *(unsigned __int8 *)(v88 + 48);
        uint64_t v34 = v440;
        if (v89 > 0xFB) {
          goto LABEL_144;
        }
        sub_21F770E38(*(void *)(v88 + 32), *(void *)(v88 + 40), v89);
LABEL_143:
        uint64_t v34 = v440;
LABEL_144:
        unsigned int v92 = *(unsigned __int8 *)(v24 + v34);
        unsigned int v93 = v92 - 8;
        if (v92 >= 8)
        {
          if (v34 <= 3) {
            uint64_t v94 = v34;
          }
          else {
            uint64_t v94 = 4;
          }
          switch(v94)
          {
            case 1:
              int v95 = *(unsigned __int8 *)v24;
              if (v34 < 4) {
                goto LABEL_152;
              }
              goto LABEL_156;
            case 2:
              int v95 = *(unsigned __int16 *)v24;
              if (v34 < 4) {
                goto LABEL_152;
              }
              goto LABEL_156;
            case 3:
              int v95 = *(unsigned __int16 *)v24 | (*(unsigned __int8 *)(v24 + 2) << 16);
              if (v34 < 4) {
                goto LABEL_152;
              }
              goto LABEL_156;
            case 4:
              int v95 = *(_DWORD *)v24;
              if (v34 < 4) {
LABEL_152:
              }
                unsigned int v92 = (v95 | (v93 << (8 * v34))) + 8;
              else {
LABEL_156:
              }
                unsigned int v92 = v95 + 8;
              break;
            default:
              break;
          }
        }
        switch(v92)
        {
          case 1u:
            long long v97 = *(_OWORD *)v24;
            *(_OWORD *)(v22 + 9) = *(_OWORD *)(v24 + 9);
            *(_OWORD *)uint64_t v22 = v97;
            *(unsigned char *)(v22 + v34) = 1;
            goto LABEL_272;
          case 2u:
            *(void *)uint64_t v22 = *(void *)v24;
            *(unsigned char *)(v22 + v34) = 2;
            goto LABEL_162;
          case 3u:
            *(void *)uint64_t v22 = *(void *)v24;
            *(void *)(v22 + 8) = *(void *)(v24 + 8);
            *(unsigned char *)(v22 + v34) = 3;
            swift_retain();
LABEL_162:
            swift_retain();
            uint64_t v34 = v440;
            goto LABEL_272;
          case 4u:
            uint64_t v426 = v38;
            uint64_t v98 = *(void *)v24;
            uint64_t v99 = *(void *)(v24 + 8);
            char v100 = *(unsigned char *)(v24 + 16);
            sub_21F7652C0(*(void *)v24, v99, v100);
            *(void *)uint64_t v22 = v98;
            *(void *)(v22 + 8) = v99;
            *(unsigned char *)(v22 + 16) = v100;
            *(void *)(v22 + 24) = *(void *)(v24 + 24);
            uint64_t v101 = (void *)((v436 + v22) & v449);
            uint64_t v102 = (unsigned __int8 *)((v436 + v24) & v449);
            unsigned int v103 = v102[v438];
            swift_bridgeObjectRetain();
            if (v103 >= 5)
            {
              if (v438 <= 3) {
                uint64_t v104 = v438;
              }
              else {
                uint64_t v104 = 4;
              }
              switch(v104)
              {
                case 1:
                  int v105 = *v102;
                  goto LABEL_190;
                case 2:
                  int v105 = *(unsigned __int16 *)v102;
                  goto LABEL_190;
                case 3:
                  int v105 = *(unsigned __int16 *)((v436 + v24) & v449) | (*(unsigned __int8 *)(((v436 + v24) & v449) + 2) << 16);
                  goto LABEL_190;
                case 4:
                  int v105 = *(_DWORD *)v102;
LABEL_190:
                  if (v438 < 4) {
                    unsigned int v103 = (v105 | ((v103 - 5) << (8 * v438))) + 5;
                  }
                  else {
                    unsigned int v103 = v105 + 5;
                  }
                  break;
                default:
                  break;
              }
            }
            switch(v103)
            {
              case 1u:
                char v130 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v405 + 16);
                v130(v101, v102, v420);
                v130((void *)(((unint64_t)v101 + v9 + v27) & v398), (unsigned __int8 *)((unint64_t)&v102[v9 + v27] & v398), v420);
                char v131 = 1;
                goto LABEL_199;
              case 2u:
                *uint64_t v101 = *(void *)v102;
                *((unsigned char *)v101 + v438) = 2;
                swift_retain();
                break;
              case 3u:
                *uint64_t v101 = *(void *)v102;
                *(void *)(((v436 + v22) & v449) + 8) = *(void *)(((v436 + v24) & v449) + 8);
                *((unsigned char *)v101 + v438) = 3;
                swift_retain();
                swift_retain();
                break;
              case 4u:
                *uint64_t v101 = *(void *)v102;
                unint64_t v132 = ((unint64_t)v101 + v412) & v413;
                unint64_t v133 = (unint64_t)&v102[v412] & v413;
                unint64_t v134 = *(void (**)(unint64_t, unint64_t, uint64_t))(v417 + 16);
                swift_retain();
                v134(v132, v133, v418);
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v442 + 16))((v132 + v416 + v414) & v415, (v133 + v416 + v414) & v415, v419);
                char v131 = 4;
LABEL_199:
                *((unsigned char *)v101 + v438) = v131;
                break;
              default:
                (*(void (**)(void *, unsigned __int8 *, uint64_t))(v405 + 16))(v101, v102, v420);
                *((unsigned char *)v101 + v438) = 0;
                break;
            }
            char v135 = 4;
            goto LABEL_270;
          case 5u:
            uint64_t v426 = v38;
            uint64_t v106 = *(void *)v24;
            uint64_t v107 = *(void *)(v24 + 8);
            char v108 = *(unsigned char *)(v24 + 16);
            sub_21F7652C0(*(void *)v24, v107, v108);
            *(void *)uint64_t v22 = v106;
            *(void *)(v22 + 8) = v107;
            *(unsigned char *)(v22 + 16) = v108;
            *(void *)(v22 + 24) = *(void *)(v24 + 24);
            uint64_t v109 = v449;
            v392 = (void *)((v436 + v22) & v449);
            uint64_t v110 = (unsigned __int8 *)((v436 + v24) & v449);
            unsigned int v111 = v110[v438];
            swift_bridgeObjectRetain();
            if (v111 >= 5)
            {
              if (v438 <= 3) {
                uint64_t v112 = v438;
              }
              else {
                uint64_t v112 = 4;
              }
              switch(v112)
              {
                case 1:
                  int v113 = *v110;
                  goto LABEL_204;
                case 2:
                  int v113 = *(unsigned __int16 *)v110;
                  goto LABEL_204;
                case 3:
                  int v113 = *(unsigned __int16 *)((v436 + v24) & v449) | (*(unsigned __int8 *)(((v436 + v24) & v449) + 2) << 16);
                  goto LABEL_204;
                case 4:
                  int v113 = *(_DWORD *)v110;
LABEL_204:
                  if (v438 < 4) {
                    unsigned int v111 = (v113 | ((v111 - 5) << (8 * v438))) + 5;
                  }
                  else {
                    unsigned int v111 = v113 + 5;
                  }
                  break;
                default:
                  break;
              }
            }
            switch(v111)
            {
              case 1u:
                uint64_t v137 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v405 + 16);
                unint64_t v138 = (v436 + v22) & v449;
                v137(v392, v110, v420);
                v137((void *)(((unint64_t)v392 + v9 + v27) & v398), (unsigned __int8 *)((unint64_t)&v110[v9 + v27] & v398), v420);
                uint64_t v109 = v449;
                char v139 = 1;
                goto LABEL_213;
              case 2u:
                void *v392 = *(void *)v110;
                unint64_t v136 = v438;
                *((unsigned char *)v392 + v438) = 2;
                swift_retain();
                break;
              case 3u:
                void *v392 = *(void *)v110;
                *(void *)(((v436 + v22) & v449) + 8) = *(void *)(((v436 + v24) & v449) + 8);
                unint64_t v136 = v438;
                *((unsigned char *)v392 + v438) = 3;
                swift_retain();
                swift_retain();
                break;
              case 4u:
                unint64_t v138 = (v436 + v22) & v449;
                void *v392 = *(void *)v110;
                unint64_t v140 = ((unint64_t)v392 + v412) & v413;
                unint64_t v141 = (unint64_t)&v110[v412] & v413;
                uint64_t v142 = *(void (**)(unint64_t, unint64_t, uint64_t))(v417 + 16);
                swift_retain();
                v142(v140, v141, v418);
                unint64_t v143 = v140 + v416 + v414;
                uint64_t v109 = v449;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v442 + 16))(v143 & v415, (v141 + v416 + v414) & v415, v419);
                char v139 = 4;
LABEL_213:
                unint64_t v136 = v438;
                *(unsigned char *)(v138 + v438) = v139;
                break;
              default:
                (*(void (**)(void *, unsigned __int8 *, uint64_t))(v405 + 16))(v392, v110, v420);
                unint64_t v136 = v438;
                *((unsigned char *)v392 + v438) = 0;
                break;
            }
            uint64_t v144 = ((v403 | v17) + v30) & v109;
            uint64_t v145 = ((v396 | v17) + v30) & v109;
            uint64_t v146 = *(void *)v145;
            uint64_t v147 = *(void *)(v145 + 8);
            char v148 = *(unsigned char *)(v145 + 0x10);
            sub_21F7652C0(*(void *)v145, v147, v148);
            *(void *)uint64_t v144 = v146;
            *(void *)(v144 + 8) = v147;
            *(unsigned char *)(v144 + 16) = v148;
            *(void *)(v144 + 24) = *(void *)(v145 + 24);
            uint64_t v149 = (void *)((v436 + v144) & v449);
            uint64_t v150 = (unsigned __int8 *)((v436 + v145) & v449);
            unsigned int v151 = v150[v136];
            swift_bridgeObjectRetain();
            if (v151 < 5)
            {
              uint64_t v153 = v405;
            }
            else
            {
              if (v136 <= 3) {
                uint64_t v152 = v136;
              }
              else {
                uint64_t v152 = 4;
              }
              uint64_t v153 = v405;
              switch(v152)
              {
                case 1:
                  int v154 = *v150;
                  goto LABEL_258;
                case 2:
                  int v154 = *(unsigned __int16 *)v150;
                  goto LABEL_258;
                case 3:
                  int v154 = *(unsigned __int16 *)v150 | (v150[2] << 16);
                  goto LABEL_258;
                case 4:
                  int v154 = *(_DWORD *)v150;
LABEL_258:
                  if (v136 < 4) {
                    unsigned int v151 = (v154 | ((v151 - 5) << (8 * v136))) + 5;
                  }
                  else {
                    unsigned int v151 = v154 + 5;
                  }
                  break;
                default:
                  break;
              }
            }
            switch(v151)
            {
              case 1u:
                uint64_t v189 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v153 + 16);
                v189(v149, v150, v420);
                v189((void *)(((unint64_t)v149 + v394) & v398), (unsigned __int8 *)((unint64_t)&v150[v394] & v398), v420);
                char v190 = 1;
                goto LABEL_268;
              case 2u:
                *uint64_t v149 = *(void *)v150;
                *((unsigned char *)v149 + v136) = 2;
                goto LABEL_266;
              case 3u:
                *uint64_t v149 = *(void *)v150;
                v149[1] = *((void *)v150 + 1);
                *((unsigned char *)v149 + v136) = 3;
                swift_retain();
LABEL_266:
                swift_retain();
                break;
              case 4u:
                *uint64_t v149 = *(void *)v150;
                unint64_t v191 = ((unint64_t)v149 + v412) & v413;
                unint64_t v192 = (unint64_t)&v150[v412] & v413;
                uint64_t v193 = *(void (**)(unint64_t, unint64_t, uint64_t))(v417 + 16);
                swift_retain();
                v193(v191, v192, v418);
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v442 + 16))((v414 + v416 + v191) & v415, (v414 + v416 + v192) & v415, v419);
                char v190 = 4;
LABEL_268:
                *((unsigned char *)v149 + v136) = v190;
                break;
              default:
                (*(void (**)(void *, unsigned __int8 *, uint64_t))(v153 + 16))(v149, v150, v420);
                *((unsigned char *)v149 + v136) = 0;
                break;
            }
            char v135 = 5;
LABEL_270:
            uint64_t v34 = v440;
            *(unsigned char *)(v22 + v440) = v135;
            uint64_t v38 = v426;
            goto LABEL_271;
          case 6u:
            uint64_t v427 = v38;
            uint64_t v114 = *(void *)v24;
            uint64_t v115 = *(void *)(v24 + 8);
            char v116 = *(unsigned char *)(v24 + 16);
            sub_21F7652C0(*(void *)v24, v115, v116);
            *(void *)uint64_t v22 = v114;
            *(void *)(v22 + 8) = v115;
            *(unsigned char *)(v22 + 16) = v116;
            *(void *)(v22 + 24) = *(void *)(v24 + 24);
            unint64_t v117 = (void *)((v436 + v22) & v449);
            uint64_t v118 = (unsigned __int8 *)((v436 + v24) & v449);
            unsigned int v119 = v118[v438];
            swift_bridgeObjectRetain();
            if (v119 >= 5)
            {
              if (v438 <= 3) {
                uint64_t v120 = v438;
              }
              else {
                uint64_t v120 = 4;
              }
              switch(v120)
              {
                case 1:
                  int v121 = *v118;
                  goto LABEL_224;
                case 2:
                  int v121 = *(unsigned __int16 *)v118;
                  goto LABEL_224;
                case 3:
                  int v121 = *(unsigned __int16 *)((v436 + v24) & v449) | (*(unsigned __int8 *)(((v436 + v24) & v449) + 2) << 16);
                  goto LABEL_224;
                case 4:
                  int v121 = *(_DWORD *)v118;
LABEL_224:
                  if (v438 < 4) {
                    unsigned int v119 = (v121 | ((v119 - 5) << (8 * v438))) + 5;
                  }
                  else {
                    unsigned int v119 = v121 + 5;
                  }
                  break;
                default:
                  break;
              }
            }
            switch(v119)
            {
              case 1u:
                unint64_t v159 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v405 + 16);
                v159(v117, v118, v420);
                v159((void *)(((unint64_t)v117 + v9 + v27) & v398), (unsigned __int8 *)((unint64_t)&v118[v9 + v27] & v398), v420);
                char v158 = 1;
                goto LABEL_233;
              case 2u:
                void *v117 = *(void *)v118;
                *((unsigned char *)v117 + v438) = 2;
                swift_retain();
                break;
              case 3u:
                void *v117 = *(void *)v118;
                *(void *)(((v436 + v22) & v449) + 8) = *(void *)(((v436 + v24) & v449) + 8);
                *((unsigned char *)v117 + v438) = 3;
                swift_retain();
                swift_retain();
                break;
              case 4u:
                void *v117 = *(void *)v118;
                unint64_t v155 = ((unint64_t)v117 + v412) & v413;
                unint64_t v156 = (unint64_t)&v118[v412] & v413;
                unint64_t v157 = *(void (**)(unint64_t, unint64_t, uint64_t))(v417 + 16);
                swift_retain();
                v157(v155, v156, v418);
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v442 + 16))((v155 + v416 + v414) & v415, (v156 + v416 + v414) & v415, v419);
                char v158 = 4;
LABEL_233:
                *((unsigned char *)v117 + v438) = v158;
                break;
              default:
                (*(void (**)(void *, unsigned __int8 *, uint64_t))(v405 + 16))(v117, v118, v420);
                *((unsigned char *)v117 + v438) = 0;
                break;
            }
            uint64_t v38 = v427;
            unint64_t v160 = ((v22 | 7) + v30) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v161 = ((v24 | 7) + v30) & 0xFFFFFFFFFFFFFFF8;
            *(unsigned char *)unint64_t v160 = *(unsigned char *)v161;
            unint64_t v162 = (_OWORD *)(v160 + 8);
            unint64_t v163 = (_OWORD *)(v161 + 8);
            if (*(unsigned __int8 *)(v161 + 96) == 255)
            {
              long long v169 = *(_OWORD *)(v161 + 24);
              *unint64_t v162 = *v163;
              *(_OWORD *)(v160 + 24) = v169;
              long long v170 = *(_OWORD *)(v161 + 40);
              long long v171 = *(_OWORD *)(v161 + 56);
              long long v172 = *(_OWORD *)(v161 + 72);
              *(_OWORD *)(v160 + 81) = *(_OWORD *)(v161 + 81);
              *(_OWORD *)(v160 + 56) = v171;
              *(_OWORD *)(v160 + 72) = v172;
              *(_OWORD *)(v160 + 40) = v170;
            }
            else
            {
              *unint64_t v162 = *v163;
              long long v164 = *(_OWORD *)(v161 + 24);
              long long v165 = *(_OWORD *)(v161 + 40);
              long long v166 = *(_OWORD *)(v161 + 72);
              *(_OWORD *)(v160 + 56) = *(_OWORD *)(v161 + 56);
              *(_OWORD *)(v160 + 72) = v166;
              *(_OWORD *)(v160 + 24) = v164;
              *(_OWORD *)(v160 + 40) = v165;
              uint64_t v167 = *(void *)(v161 + 88);
              char v168 = *(unsigned char *)(v161 + 96);
              sub_21F829E74(v167, v168);
              *(void *)(v160 + 88) = v167;
              *(unsigned char *)(v160 + 96) = v168;
            }
            uint64_t v173 = *(void *)(v161 + 104);
            char v174 = *(unsigned char *)(v161 + 112);
            sub_21F829E74(v173, v174);
            *(void *)(v160 + 104) = v173;
            *(unsigned char *)(v160 + 112) = v174;
            uint64_t v34 = v440;
            *(unsigned char *)(v22 + v440) = 6;
LABEL_271:
            uint64_t v13 = v442;
            goto LABEL_272;
          case 7u:
            uint64_t v428 = v38;
            uint64_t v122 = *(void *)v24;
            uint64_t v123 = *(void *)(v24 + 8);
            char v124 = *(unsigned char *)(v24 + 16);
            sub_21F7652C0(*(void *)v24, v123, v124);
            *(void *)uint64_t v22 = v122;
            *(void *)(v22 + 8) = v123;
            *(unsigned char *)(v22 + 16) = v124;
            *(void *)(v22 + 24) = *(void *)(v24 + 24);
            long long v125 = (void *)((v436 + v22) & v449);
            long long v126 = (unsigned __int8 *)((v436 + v24) & v449);
            unsigned int v127 = v126[v438];
            swift_bridgeObjectRetain();
            if (v127 >= 5)
            {
              if (v438 <= 3) {
                uint64_t v128 = v438;
              }
              else {
                uint64_t v128 = 4;
              }
              switch(v128)
              {
                case 1:
                  int v129 = *v126;
                  goto LABEL_241;
                case 2:
                  int v129 = *(unsigned __int16 *)v126;
                  goto LABEL_241;
                case 3:
                  int v129 = *(unsigned __int16 *)((v436 + v24) & v449) | (*(unsigned __int8 *)(((v436 + v24) & v449) + 2) << 16);
                  goto LABEL_241;
                case 4:
                  int v129 = *(_DWORD *)v126;
LABEL_241:
                  if (v438 < 4) {
                    unsigned int v127 = (v129 | ((v127 - 5) << (8 * v438))) + 5;
                  }
                  else {
                    unsigned int v127 = v129 + 5;
                  }
                  break;
                default:
                  break;
              }
            }
            switch(v127)
            {
              case 1u:
                long long v175 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v405 + 16);
                v175(v125, v126, v420);
                v175((void *)(((unint64_t)v125 + v9 + v27) & v398), (unsigned __int8 *)((unint64_t)&v126[v9 + v27] & v398), v420);
                char v176 = 1;
                goto LABEL_250;
              case 2u:
                *long long v125 = *(void *)v126;
                *((unsigned char *)v125 + v438) = 2;
                swift_retain();
                break;
              case 3u:
                *long long v125 = *(void *)v126;
                *(void *)(((v436 + v22) & v449) + 8) = *(void *)(((v436 + v24) & v449) + 8);
                *((unsigned char *)v125 + v438) = 3;
                swift_retain();
                swift_retain();
                break;
              case 4u:
                *long long v125 = *(void *)v126;
                unint64_t v177 = ((unint64_t)v125 + v412) & v413;
                unint64_t v178 = (unint64_t)&v126[v412] & v413;
                char v179 = *(void (**)(unint64_t, unint64_t, uint64_t))(v417 + 16);
                swift_retain();
                v179(v177, v178, v418);
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v442 + 16))((v177 + v416 + v414) & v415, (v178 + v416 + v414) & v415, v419);
                char v176 = 4;
LABEL_250:
                *((unsigned char *)v125 + v438) = v176;
                break;
              default:
                (*(void (**)(void *, unsigned __int8 *, uint64_t))(v405 + 16))(v125, v126, v420);
                *((unsigned char *)v125 + v438) = 0;
                break;
            }
            unint64_t v180 = ((v22 | 7) + v30) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v181 = ((v24 | 7) + v30) & 0xFFFFFFFFFFFFFFF8;
            *(unsigned char *)unint64_t v180 = *(unsigned char *)v181;
            *(unsigned char *)(v180 + 1) = *(unsigned char *)(v181 + 1);
            *(unsigned char *)(v180 + 2) = *(unsigned char *)(v181 + 2);
            uint64_t v182 = *(void *)(v181 + 8);
            uint64_t v183 = *(void *)(v181 + 16);
            char v184 = *(unsigned char *)(v181 + 24);
            sub_21F770E44(v182, v183, v184);
            *(void *)(v180 + 8) = v182;
            *(void *)(v180 + 16) = v183;
            *(unsigned char *)(v180 + 24) = v184;
            unsigned int v185 = *(unsigned __int8 *)(v181 + 48);
            if (v185 <= 0xFB)
            {
              uint64_t v187 = *(void *)(v181 + 32);
              uint64_t v188 = *(void *)(v181 + 40);
              sub_21F770E44(v187, v188, *(unsigned char *)(v181 + 48));
              *(void *)(v180 + 32) = v187;
              *(void *)(v180 + 40) = v188;
              *(unsigned char *)(v180 + 48) = v185;
            }
            else
            {
              long long v186 = *(_OWORD *)(v181 + 32);
              *(unsigned char *)(v180 + 48) = *(unsigned char *)(v181 + 48);
              *(_OWORD *)(v180 + 32) = v186;
            }
            uint64_t v38 = v428;
            uint64_t v34 = v440;
            uint64_t v13 = v442;
            unint64_t v44 = v408;
            uint64_t v15 = v410;
            *(unsigned char *)(v22 + v440) = 7;
            goto LABEL_273;
          default:
            uint64_t v96 = *(void *)v24;
            *(unsigned char *)(v22 + 8) = *(unsigned char *)(v24 + 8);
            *(void *)uint64_t v22 = v96;
            *(unsigned char *)(v22 + v34) = 0;
LABEL_272:
            unint64_t v44 = v408;
            uint64_t v15 = v410;
            break;
        }
        break;
      default:
        goto LABEL_144;
    }
  }
LABEL_273:
  uint64_t v194 = *(void *)(*(void *)(v443 + 32) - 8);
  uint64_t v195 = *(unsigned __int8 *)(v194 + 80);
  uint64_t v196 = v15 | v195;
  uint64_t v197 = v15 | v195 | 7;
  uint64_t v198 = v34 + v197 + 1;
  uint64_t v199 = v198 + v22;
  uint64_t v200 = ~v197;
  uint64_t v201 = v199 & ~v197;
  int v202 = (unsigned __int8 *)(v198 + v24);
  unint64_t v203 = (v198 + v24) & ~v197;
  uint64_t v204 = ~v195;
  if (v201 == v203)
  {
    unint64_t v217 = *(void *)(v194 + 64);
    uint64_t v218 = (v196 + 32) & v200;
    if (((v217 + v195) & v204) + v217 > v217) {
      v217 += (v217 + v195) & v204;
    }
    if (v217 <= v44) {
      unint64_t v217 = v44;
    }
    if (v217 <= 0x10) {
      unint64_t v217 = 16;
    }
    unint64_t v219 = (v218 | 1) + v217;
    unint64_t v220 = ((v219 + v197) & v200) + v219;
    if (v219 > v220) {
      unint64_t v220 = v219;
    }
    unint64_t v221 = (v219 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v220 <= v221 + 113) {
      unint64_t v220 = v221 + 113;
    }
    unint64_t v222 = v221 + 49;
    if (v220 > v222) {
      unint64_t v222 = v220;
    }
    if (v222 <= 0x19) {
      uint64_t v212 = 25;
    }
    else {
      uint64_t v212 = v222;
    }
  }
  else
  {
    v404 = v202;
    uint64_t v411 = v199;
    uint64_t v437 = *(void *)(v443 + 32);
    uint64_t v439 = v198;
    uint64_t v444 = v196 + 32;
    uint64_t v205 = (v196 + 32) & v200;
    uint64_t v421 = v194;
    unint64_t v406 = *(void *)(v194 + 64);
    uint64_t v409 = ~v195;
    uint64_t v397 = v406 + v195;
    unint64_t v206 = ((v406 + v195) & v204) + v406;
    if (v206 <= v406) {
      unint64_t v206 = *(void *)(v194 + 64);
    }
    if (v206 <= v44) {
      unint64_t v206 = v44;
    }
    if (v206 <= 0x10) {
      uint64_t v207 = 16;
    }
    else {
      uint64_t v207 = v206;
    }
    unint64_t v208 = (v205 | 1) + v207;
    unint64_t v209 = ((v208 + v197) & v200) + v208;
    if (v208 > v209) {
      unint64_t v209 = v208;
    }
    unint64_t v210 = (v208 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v209 <= v210 + 113) {
      unint64_t v209 = v210 + 113;
    }
    unint64_t v211 = v210 + 49;
    if (v209 <= v211) {
      unint64_t v209 = v211;
    }
    if (v209 <= 0x19) {
      uint64_t v212 = 25;
    }
    else {
      uint64_t v212 = v209;
    }
    unsigned int v213 = *(unsigned __int8 *)(v201 + v212);
    unsigned int v214 = v213 - 8;
    if (v213 >= 8)
    {
      if (v212 <= 3) {
        uint64_t v215 = v212;
      }
      else {
        uint64_t v215 = 4;
      }
      switch(v215)
      {
        case 1:
          int v216 = *(unsigned __int8 *)v201;
          goto LABEL_314;
        case 2:
          int v216 = *(unsigned __int16 *)v201;
          goto LABEL_314;
        case 3:
          int v216 = *(unsigned __int16 *)v201 | (*(unsigned __int8 *)(v201 + 2) << 16);
          goto LABEL_314;
        case 4:
          int v216 = *(_DWORD *)v201;
LABEL_314:
          int v223 = (v216 | (v214 << (8 * v212))) + 8;
          unsigned int v213 = v216 + 8;
          if (v212 < 4) {
            unsigned int v213 = v223;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v441 = v207;
    switch(v213)
    {
      case 2u:
LABEL_317:
        swift_release();
        break;
      case 3u:
LABEL_318:
        swift_release();
        swift_release();
        break;
      case 4u:
        sub_21F7656A8(*(void *)v201, *(void *)(v201 + 8), *(unsigned char *)(v201 + 16));
        swift_bridgeObjectRelease();
        char v224 = (unsigned __int8 *)((v444 + v201) & v200);
        unsigned int v225 = v224[v441];
        unsigned int v226 = v225 - 5;
        if (v225 >= 5)
        {
          if (v441 <= 3) {
            uint64_t v227 = v441;
          }
          else {
            uint64_t v227 = 4;
          }
          switch(v227)
          {
            case 1:
              int v228 = *v224;
              goto LABEL_346;
            case 2:
              int v228 = *(unsigned __int16 *)v224;
              goto LABEL_346;
            case 3:
              int v228 = *(unsigned __int16 *)v224 | (*(unsigned __int8 *)(((v444 + v201) & v200) + 2) << 16);
              goto LABEL_346;
            case 4:
              int v228 = *(_DWORD *)v224;
LABEL_346:
              int v244 = (v228 | (v226 << (8 * v441))) + 5;
              unsigned int v225 = v228 + 5;
              if (v441 < 4) {
                unsigned int v225 = v244;
              }
              break;
            default:
              break;
          }
        }
        switch(v225)
        {
          case 1u:
            uint64_t v429 = v38;
            unint64_t v245 = *(void (**)(uint64_t, uint64_t))(v421 + 8);
            unint64_t v395 = v208;
            uint64_t v246 = v437;
            v245((v444 + v201) & v200, v437);
            long long v247 = &v224[v195 + v406];
            goto LABEL_404;
          case 2u:
            goto LABEL_317;
          case 3u:
            goto LABEL_318;
          case 4u:
            goto LABEL_402;
          default:
            goto LABEL_401;
        }
      case 5u:
        sub_21F7656A8(*(void *)v201, *(void *)(v201 + 8), *(unsigned char *)(v201 + 16));
        swift_bridgeObjectRelease();
        uint64_t v229 = (unsigned __int8 *)((v444 + v201) & v200);
        unsigned int v230 = v229[v441];
        unsigned int v231 = v230 - 5;
        if (v230 >= 5)
        {
          if (v441 <= 3) {
            uint64_t v232 = v441;
          }
          else {
            uint64_t v232 = 4;
          }
          switch(v232)
          {
            case 1:
              int v233 = *v229;
              goto LABEL_353;
            case 2:
              int v233 = *(unsigned __int16 *)v229;
              goto LABEL_353;
            case 3:
              int v233 = *(unsigned __int16 *)v229 | (*(unsigned __int8 *)(((v444 + v201) & v200) + 2) << 16);
              goto LABEL_353;
            case 4:
              int v233 = *(_DWORD *)v229;
LABEL_353:
              int v248 = (v233 | (v231 << (8 * v441))) + 5;
              unsigned int v230 = v233 + 5;
              if (v441 < 4) {
                unsigned int v230 = v248;
              }
              break;
            default:
              break;
          }
        }
        switch(v230)
        {
          case 1u:
            uint64_t v430 = v38;
            long long v249 = *(void (**)(uint64_t, uint64_t))(v421 + 8);
            v249((v444 + v201) & v200, v437);
            v249((unint64_t)&v229[v195 + v406] & v409, v437);
            uint64_t v13 = v442;
            uint64_t v38 = v430;
            break;
          case 2u:
            swift_release();
            break;
          case 3u:
            swift_release();
            swift_release();
            break;
          case 4u:
            swift_release();
            unint64_t v250 = (unint64_t)&v229[v412] & v413;
            (*(void (**)(unint64_t, uint64_t))(v417 + 8))(v250, v418);
            (*(void (**)(unint64_t, uint64_t))(v13 + 8))((v414 + v416 + v250) & v415, v419);
            break;
          default:
            (*(void (**)(uint64_t, uint64_t))(v421 + 8))((v444 + v201) & v200, v437);
            break;
        }
        uint64_t v251 = ((v411 | v197) + v208) & v200;
        sub_21F7656A8(*(void *)v251, *(void *)(v251 + 8), *(unsigned char *)(v251 + 0x10));
        swift_bridgeObjectRelease();
        char v224 = (unsigned __int8 *)((v444 + v251) & v200);
        unsigned int v252 = v224[v441];
        unsigned int v253 = v252 - 5;
        if (v252 >= 5)
        {
          if (v441 <= 3) {
            uint64_t v254 = v441;
          }
          else {
            uint64_t v254 = 4;
          }
          switch(v254)
          {
            case 1:
              int v255 = *v224;
              goto LABEL_398;
            case 2:
              int v255 = *(unsigned __int16 *)v224;
              goto LABEL_398;
            case 3:
              int v255 = *(unsigned __int16 *)v224 | (v224[2] << 16);
              goto LABEL_398;
            case 4:
              int v255 = *(_DWORD *)v224;
LABEL_398:
              int v266 = (v255 | (v253 << (8 * v441))) + 5;
              unsigned int v252 = v255 + 5;
              if (v441 < 4) {
                unsigned int v252 = v266;
              }
              break;
            default:
              break;
          }
        }
        switch(v252)
        {
          case 1u:
            uint64_t v429 = v38;
            unint64_t v245 = *(void (**)(uint64_t, uint64_t))(v421 + 8);
            unint64_t v395 = v208;
            uint64_t v246 = v437;
            v245((uint64_t)v224, v437);
            long long v247 = &v224[v397];
LABEL_404:
            uint64_t v268 = v246;
            unint64_t v208 = v395;
            v245((unint64_t)v247 & v409, v268);
            uint64_t v38 = v429;
            break;
          case 2u:
            goto LABEL_317;
          case 3u:
            goto LABEL_318;
          case 4u:
LABEL_402:
            swift_release();
            unint64_t v267 = (unint64_t)&v224[v412] & v413;
            (*(void (**)(unint64_t, uint64_t))(v417 + 8))(v267, v418);
            (*(void (**)(unint64_t, uint64_t))(v13 + 8))((v414 + v416 + v267) & v415, v419);
            break;
          default:
LABEL_401:
            (*(void (**)(unsigned __int8 *, uint64_t))(v421 + 8))(v224, v437);
            break;
        }
        break;
      case 6u:
        sub_21F7656A8(*(void *)v201, *(void *)(v201 + 8), *(unsigned char *)(v201 + 16));
        swift_bridgeObjectRelease();
        uint64_t v234 = (unsigned __int8 *)((v444 + v201) & v200);
        unsigned int v235 = v234[v441];
        unsigned int v236 = v235 - 5;
        if (v235 >= 5)
        {
          if (v441 <= 3) {
            uint64_t v237 = v441;
          }
          else {
            uint64_t v237 = 4;
          }
          switch(v237)
          {
            case 1:
              int v238 = *v234;
              goto LABEL_370;
            case 2:
              int v238 = *(unsigned __int16 *)v234;
              goto LABEL_370;
            case 3:
              int v238 = *(unsigned __int16 *)v234 | (*(unsigned __int8 *)(((v444 + v201) & v200) + 2) << 16);
              goto LABEL_370;
            case 4:
              int v238 = *(_DWORD *)v234;
LABEL_370:
              int v256 = (v238 | (v236 << (8 * v441))) + 5;
              unsigned int v235 = v238 + 5;
              if (v441 < 4) {
                unsigned int v235 = v256;
              }
              break;
            default:
              break;
          }
        }
        switch(v235)
        {
          case 1u:
            uint64_t v431 = v38;
            uint64_t v258 = *(void (**)(uint64_t, uint64_t))(v421 + 8);
            v258((v444 + v201) & v200, v437);
            v258((unint64_t)&v234[v195 + v406] & v409, v437);
            uint64_t v38 = v431;
            break;
          case 2u:
            swift_release();
            break;
          case 3u:
            swift_release();
            swift_release();
            break;
          case 4u:
            swift_release();
            unint64_t v257 = (unint64_t)&v234[v412] & v413;
            (*(void (**)(unint64_t, uint64_t))(v417 + 8))(v257, v418);
            (*(void (**)(unint64_t, uint64_t))(v13 + 8))((v414 + v416 + v257) & v415, v419);
            break;
          default:
            (*(void (**)(uint64_t, uint64_t))(v421 + 8))((v444 + v201) & v200, v437);
            break;
        }
        unint64_t v259 = ((v201 | 7) + v208) & 0xFFFFFFFFFFFFFFF8;
        int v260 = *(unsigned __int8 *)(v259 + 96);
        if (v260 != 255) {
          sub_21F82B5F8(*(void *)(v259 + 88), v260 & 1);
        }
        sub_21F82B5F8(*(void *)(v259 + 104), *(unsigned char *)(v259 + 112));
        break;
      case 7u:
        sub_21F7656A8(*(void *)v201, *(void *)(v201 + 8), *(unsigned char *)(v201 + 16));
        swift_bridgeObjectRelease();
        int v239 = (unsigned __int8 *)((v444 + v201) & v200);
        unsigned int v240 = v239[v441];
        unsigned int v241 = v240 - 5;
        if (v240 >= 5)
        {
          if (v441 <= 3) {
            uint64_t v242 = v441;
          }
          else {
            uint64_t v242 = 4;
          }
          switch(v242)
          {
            case 1:
              int v243 = *v239;
              goto LABEL_385;
            case 2:
              int v243 = *(unsigned __int16 *)v239;
              goto LABEL_385;
            case 3:
              int v243 = *(unsigned __int16 *)v239 | (*(unsigned __int8 *)(((v444 + v201) & v200) + 2) << 16);
              goto LABEL_385;
            case 4:
              int v243 = *(_DWORD *)v239;
LABEL_385:
              int v261 = (v243 | (v241 << (8 * v441))) + 5;
              unsigned int v240 = v243 + 5;
              if (v441 < 4) {
                unsigned int v240 = v261;
              }
              break;
            default:
              break;
          }
        }
        switch(v240)
        {
          case 1u:
            uint64_t v432 = v38;
            uint64_t v262 = *(void (**)(uint64_t, uint64_t))(v421 + 8);
            v262((v444 + v201) & v200, v437);
            v262((unint64_t)&v239[v195 + v406] & v409, v437);
            uint64_t v38 = v432;
            break;
          case 2u:
            swift_release();
            break;
          case 3u:
            swift_release();
            swift_release();
            break;
          case 4u:
            swift_release();
            unint64_t v263 = (unint64_t)&v239[v412] & v413;
            (*(void (**)(unint64_t, uint64_t))(v417 + 8))(v263, v418);
            (*(void (**)(unint64_t, uint64_t))(v13 + 8))((v414 + v416 + v263) & v415, v419);
            break;
          default:
            (*(void (**)(uint64_t, uint64_t))(v421 + 8))((v444 + v201) & v200, v437);
            break;
        }
        unint64_t v264 = ((v201 | 7) + v208) & 0xFFFFFFFFFFFFFFF8;
        sub_21F770E38(*(void *)(v264 + 8), *(void *)(v264 + 16), *(unsigned char *)(v264 + 24));
        unsigned int v265 = *(unsigned __int8 *)(v264 + 48);
        if (v265 <= 0xFB) {
          sub_21F770E38(*(void *)(v264 + 32), *(void *)(v264 + 40), v265);
        }
        break;
      default:
        break;
    }
    unsigned int v269 = *(unsigned __int8 *)(v203 + v212);
    unsigned int v270 = v269 - 8;
    if (v269 >= 8)
    {
      if (v212 <= 3) {
        uint64_t v271 = v212;
      }
      else {
        uint64_t v271 = 4;
      }
      switch(v271)
      {
        case 1:
          int v272 = *(unsigned __int8 *)v203;
          goto LABEL_414;
        case 2:
          int v272 = *(unsigned __int16 *)v203;
          goto LABEL_414;
        case 3:
          int v272 = *(unsigned __int16 *)v203 | (*(unsigned __int8 *)(v203 + 2) << 16);
          goto LABEL_414;
        case 4:
          int v272 = *(_DWORD *)v203;
LABEL_414:
          int v273 = (v272 | (v270 << (8 * v212))) + 8;
          unsigned int v269 = v272 + 8;
          if (v212 < 4) {
            unsigned int v269 = v273;
          }
          break;
        default:
          break;
      }
    }
    switch(v269)
    {
      case 1u:
        long long v275 = *(_OWORD *)v203;
        *(_OWORD *)(v201 + 9) = *(_OWORD *)(v203 + 9);
        *(_OWORD *)uint64_t v201 = v275;
        char v276 = 1;
        goto LABEL_498;
      case 2u:
        *(void *)uint64_t v201 = *(void *)v203;
        *(unsigned char *)(v201 + v212) = 2;
        goto LABEL_421;
      case 3u:
        *(void *)uint64_t v201 = *(void *)v203;
        *(void *)(v201 + 8) = *(void *)(v203 + 8);
        *(unsigned char *)(v201 + v212) = 3;
        swift_retain();
LABEL_421:
        swift_retain();
        uint64_t v198 = v439;
        break;
      case 4u:
        uint64_t v277 = v38;
        uint64_t v278 = *(void *)v203;
        uint64_t v279 = *(void *)(v203 + 8);
        char v280 = *(unsigned char *)(v203 + 16);
        sub_21F7652C0(*(void *)v203, v279, v280);
        *(void *)uint64_t v201 = v278;
        *(void *)(v201 + 8) = v279;
        *(unsigned char *)(v201 + 16) = v280;
        *(void *)(v201 + 24) = *(void *)(v203 + 24);
        uint64_t v281 = (void *)((v444 + v201) & v200);
        uint64_t v399 = ~v197;
        unint64_t v282 = (unsigned __int8 *)((v444 + v203) & v200);
        unsigned int v283 = v282[v441];
        swift_bridgeObjectRetain();
        if (v283 < 5)
        {
          uint64_t v38 = v277;
          uint64_t v198 = v439;
          uint64_t v285 = v441;
        }
        else
        {
          if (v441 <= 3) {
            uint64_t v284 = v441;
          }
          else {
            uint64_t v284 = 4;
          }
          uint64_t v285 = v441;
          uint64_t v38 = v277;
          uint64_t v198 = v439;
          switch(v284)
          {
            case 1:
              int v286 = *v282;
              goto LABEL_452;
            case 2:
              int v286 = *(unsigned __int16 *)v282;
              goto LABEL_452;
            case 3:
              int v286 = *(unsigned __int16 *)((v444 + v203) & v200) | (*(unsigned __int8 *)(((v444 + v203) & v200) + 2) << 16);
              goto LABEL_452;
            case 4:
              int v286 = *(_DWORD *)v282;
LABEL_452:
              int v313 = (v286 | ((v283 - 5) << (8 * v441))) + 5;
              unsigned int v314 = v286 + 5;
              if (v441 >= 4) {
                unsigned int v283 = v314;
              }
              else {
                unsigned int v283 = v313;
              }
              break;
            default:
              break;
          }
        }
        switch(v283)
        {
          case 1u:
            uint64_t v316 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v421 + 16);
            v316(v281, v282, v437);
            v316((void *)(((unint64_t)v281 + v195 + v406) & v409), (unsigned __int8 *)((unint64_t)&v282[v195 + v406] & v409), v437);
            *((unsigned char *)v281 + v441) = 1;
            break;
          case 2u:
            void *v281 = *(void *)v282;
            *((unsigned char *)v281 + v285) = 2;
            swift_retain();
            break;
          case 3u:
            void *v281 = *(void *)v282;
            *(void *)(((v444 + v201) & v200) + 8) = *(void *)(((v444 + v203) & v200) + 8);
            *((unsigned char *)v281 + v285) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            void *v281 = *(void *)v282;
            unint64_t v317 = ((unint64_t)v281 + v412) & v413;
            unint64_t v318 = (unint64_t)&v282[v412] & v413;
            uint64_t v319 = *(void (**)(unint64_t, unint64_t, uint64_t))(v417 + 16);
            uint64_t v320 = v285;
            swift_retain();
            v319(v317, v318, v418);
            unint64_t v321 = v414 + v416 + v317;
            uint64_t v198 = v439;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v442 + 16))(v321 & v415, (v414 + v416 + v318) & v415, v419);
            *((unsigned char *)v281 + v320) = 4;
            break;
          default:
            uint64_t v315 = v285;
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v421 + 16))(v281, v282, v437);
            *((unsigned char *)v281 + v315) = 0;
            break;
        }
        uint64_t v200 = v399;
        char v322 = 4;
        goto LABEL_515;
      case 5u:
        uint64_t v433 = v38;
        uint64_t v287 = *(void *)v203;
        uint64_t v288 = *(void *)(v203 + 8);
        char v289 = *(unsigned char *)(v203 + 16);
        sub_21F7652C0(*(void *)v203, v288, v289);
        *(void *)uint64_t v201 = v287;
        *(void *)(v201 + 8) = v288;
        *(unsigned char *)(v201 + 16) = v289;
        *(void *)(v201 + 24) = *(void *)(v203 + 24);
        uint64_t v290 = (void *)((v444 + v201) & v200);
        uint64_t v400 = ~v197;
        unint64_t v291 = (unsigned __int8 *)((v444 + v203) & v200);
        unsigned int v292 = v291[v441];
        swift_bridgeObjectRetain();
        if (v292 >= 5)
        {
          if (v441 <= 3) {
            uint64_t v293 = v441;
          }
          else {
            uint64_t v293 = 4;
          }
          switch(v293)
          {
            case 1:
              int v294 = *v291;
              goto LABEL_465;
            case 2:
              int v294 = *(unsigned __int16 *)v291;
              goto LABEL_465;
            case 3:
              int v294 = *(unsigned __int16 *)((v444 + v203) & v200) | (*(unsigned __int8 *)(((v444 + v203) & v200) + 2) << 16);
              goto LABEL_465;
            case 4:
              int v294 = *(_DWORD *)v291;
LABEL_465:
              int v323 = (v294 | ((v292 - 5) << (8 * v441))) + 5;
              unsigned int v324 = v294 + 5;
              if (v441 >= 4) {
                unsigned int v292 = v324;
              }
              else {
                unsigned int v292 = v323;
              }
              break;
            default:
              break;
          }
        }
        switch(v292)
        {
          case 1u:
            v393 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v421 + 16);
            v393(v290, v291, v437);
            v393((void *)(((unint64_t)v290 + v195 + v406) & v409), (unsigned __int8 *)((unint64_t)&v291[v195 + v406] & v409), v437);
            char v325 = 1;
            goto LABEL_474;
          case 2u:
            *uint64_t v290 = *(void *)v291;
            *((unsigned char *)v290 + v441) = 2;
            swift_retain();
            break;
          case 3u:
            *uint64_t v290 = *(void *)v291;
            *(void *)(((v444 + v201) & v200) + 8) = *(void *)(((v444 + v203) & v200) + 8);
            *((unsigned char *)v290 + v441) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *uint64_t v290 = *(void *)v291;
            unint64_t v326 = ((unint64_t)v290 + v412) & v413;
            unint64_t v327 = (unint64_t)&v291[v412] & v413;
            v407 = *(void (**)(unint64_t, unint64_t, uint64_t))(v417 + 16);
            swift_retain();
            v407(v326, v327, v418);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v442 + 16))((v414 + v416 + v326) & v415, (v414 + v416 + v327) & v415, v419);
            char v325 = 4;
LABEL_474:
            *((unsigned char *)v290 + v441) = v325;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v421 + 16))(v290, v291, v437);
            *((unsigned char *)v290 + v441) = 0;
            break;
        }
        uint64_t v328 = ((v411 | v197) + v208) & v400;
        uint64_t v329 = (((unint64_t)v404 | v197) + v208) & v400;
        uint64_t v330 = *(void *)v329;
        uint64_t v331 = *(void *)(v329 + 8);
        char v332 = *(unsigned char *)(v329 + 0x10);
        sub_21F7652C0(*(void *)v329, v331, v332);
        *(void *)uint64_t v328 = v330;
        *(void *)(v328 + 8) = v331;
        *(unsigned char *)(v328 + 16) = v332;
        *(void *)(v328 + 24) = *(void *)(v329 + 24);
        unint64_t v333 = (void *)((v444 + v328) & v400);
        uint64_t v334 = (unsigned __int8 *)((v444 + v329) & v400);
        unsigned int v335 = v334[v441];
        swift_bridgeObjectRetain();
        if (v335 < 5)
        {
          uint64_t v38 = v433;
          uint64_t v198 = v439;
        }
        else
        {
          if (v441 <= 3) {
            uint64_t v336 = v441;
          }
          else {
            uint64_t v336 = 4;
          }
          uint64_t v38 = v433;
          uint64_t v198 = v439;
          switch(v336)
          {
            case 1:
              int v337 = *v334;
              goto LABEL_519;
            case 2:
              int v337 = *(unsigned __int16 *)v334;
              goto LABEL_519;
            case 3:
              int v337 = *(unsigned __int16 *)((v444 + v329) & v400) | (*(unsigned __int8 *)(((v444 + v329) & v400) + 2) << 16);
              goto LABEL_519;
            case 4:
              int v337 = *(_DWORD *)v334;
LABEL_519:
              if (v441 < 4) {
                unsigned int v335 = (v337 | ((v335 - 5) << (8 * v441))) + 5;
              }
              else {
                unsigned int v335 = v337 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v335)
        {
          case 1u:
            v376 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v421 + 16);
            v376(v333, v334, v437);
            v376((void *)(((unint64_t)v333 + v397) & v409), (unsigned __int8 *)((unint64_t)&v334[v397] & v409), v437);
            char v377 = 1;
            goto LABEL_528;
          case 2u:
            *unint64_t v333 = *(void *)v334;
            *((unsigned char *)v333 + v441) = 2;
            swift_retain();
            break;
          case 3u:
            *unint64_t v333 = *(void *)v334;
            v333[1] = *(void *)(((v444 + v329) & v400) + 8);
            *((unsigned char *)v333 + v441) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *unint64_t v333 = *(void *)v334;
            unint64_t v378 = ((unint64_t)v333 + v412) & v413;
            unint64_t v379 = (unint64_t)&v334[v412] & v413;
            v380 = *(void (**)(unint64_t, unint64_t, uint64_t))(v417 + 16);
            swift_retain();
            v380(v378, v379, v418);
            unint64_t v381 = v414 + v416 + v378;
            uint64_t v198 = v439;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v442 + 16))(v381 & v415, (v414 + v416 + v379) & v415, v419);
            char v377 = 4;
LABEL_528:
            *((unsigned char *)v333 + v441) = v377;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v421 + 16))(v333, v334, v437);
            *((unsigned char *)v333 + v441) = 0;
            break;
        }
        *(unsigned char *)(v201 + v212) = 5;
        uint64_t v200 = v400;
        break;
      case 6u:
        uint64_t v434 = v38;
        uint64_t v295 = *(void *)v203;
        uint64_t v296 = *(void *)(v203 + 8);
        char v297 = *(unsigned char *)(v203 + 16);
        sub_21F7652C0(*(void *)v203, v296, v297);
        *(void *)uint64_t v201 = v295;
        *(void *)(v201 + 8) = v296;
        *(unsigned char *)(v201 + 16) = v297;
        *(void *)(v201 + 24) = *(void *)(v203 + 24);
        unint64_t v298 = (void *)((v444 + v201) & v200);
        uint64_t v401 = ~v197;
        unint64_t v299 = (unsigned __int8 *)((v444 + v203) & v200);
        unsigned int v300 = v299[v441];
        swift_bridgeObjectRetain();
        if (v300 < 5)
        {
          uint64_t v38 = v434;
          uint64_t v302 = v441;
        }
        else
        {
          if (v441 <= 3) {
            uint64_t v301 = v441;
          }
          else {
            uint64_t v301 = 4;
          }
          uint64_t v302 = v441;
          uint64_t v38 = v434;
          switch(v301)
          {
            case 1:
              int v303 = *v299;
              goto LABEL_485;
            case 2:
              int v303 = *(unsigned __int16 *)v299;
              goto LABEL_485;
            case 3:
              int v303 = *(unsigned __int16 *)((v444 + v203) & v200) | (*(unsigned __int8 *)(((v444 + v203) & v200) + 2) << 16);
              goto LABEL_485;
            case 4:
              int v303 = *(_DWORD *)v299;
LABEL_485:
              int v338 = (v303 | ((v300 - 5) << (8 * v441))) + 5;
              unsigned int v339 = v303 + 5;
              if (v441 >= 4) {
                unsigned int v300 = v339;
              }
              else {
                unsigned int v300 = v338;
              }
              break;
            default:
              break;
          }
        }
        switch(v300)
        {
          case 1u:
            v344 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v421 + 16);
            v344(v298, v299, v437);
            v344((void *)(((unint64_t)v298 + v195 + v406) & v409), (unsigned __int8 *)((unint64_t)&v299[v195 + v406] & v409), v437);
            *((unsigned char *)v298 + v441) = 1;
            break;
          case 2u:
            void *v298 = *(void *)v299;
            *((unsigned char *)v298 + v302) = 2;
            swift_retain();
            break;
          case 3u:
            void *v298 = *(void *)v299;
            *(void *)(((v444 + v201) & v200) + 8) = *(void *)(((v444 + v203) & v200) + 8);
            *((unsigned char *)v298 + v302) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            void *v298 = *(void *)v299;
            unint64_t v341 = ((unint64_t)v298 + v412) & v413;
            unint64_t v342 = (unint64_t)&v299[v412] & v413;
            v445 = *(void (**)(unint64_t, unint64_t, uint64_t))(v417 + 16);
            uint64_t v343 = v302;
            swift_retain();
            v445(v341, v342, v418);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v442 + 16))((v414 + v416 + v341) & v415, (v414 + v416 + v342) & v415, v419);
            *((unsigned char *)v298 + v343) = 4;
            break;
          default:
            uint64_t v340 = v302;
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v421 + 16))(v298, v299, v437);
            *((unsigned char *)v298 + v340) = 0;
            break;
        }
        uint64_t v200 = v401;
        unint64_t v345 = ((v201 | 7) + v208) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v346 = ((v203 | 7) + v208) & 0xFFFFFFFFFFFFFFF8;
        *(unsigned char *)unint64_t v345 = *(unsigned char *)v346;
        v347 = (_OWORD *)(v345 + 8);
        v348 = (_OWORD *)(v346 + 8);
        if (*(unsigned __int8 *)(v346 + 96) == 255)
        {
          long long v354 = *(_OWORD *)(v346 + 24);
          _OWORD *v347 = *v348;
          *(_OWORD *)(v345 + 24) = v354;
          long long v355 = *(_OWORD *)(v346 + 40);
          long long v356 = *(_OWORD *)(v346 + 56);
          long long v357 = *(_OWORD *)(v346 + 72);
          *(_OWORD *)(v345 + 81) = *(_OWORD *)(v346 + 81);
          *(_OWORD *)(v345 + 56) = v356;
          *(_OWORD *)(v345 + 72) = v357;
          *(_OWORD *)(v345 + 40) = v355;
        }
        else
        {
          _OWORD *v347 = *v348;
          long long v349 = *(_OWORD *)(v346 + 24);
          long long v350 = *(_OWORD *)(v346 + 40);
          long long v351 = *(_OWORD *)(v346 + 72);
          *(_OWORD *)(v345 + 56) = *(_OWORD *)(v346 + 56);
          *(_OWORD *)(v345 + 72) = v351;
          *(_OWORD *)(v345 + 24) = v349;
          *(_OWORD *)(v345 + 40) = v350;
          uint64_t v352 = *(void *)(v346 + 88);
          char v353 = *(unsigned char *)(v346 + 96);
          sub_21F829E74(v352, v353);
          *(void *)(v345 + 88) = v352;
          *(unsigned char *)(v345 + 96) = v353;
        }
        uint64_t v358 = *(void *)(v346 + 104);
        char v359 = *(unsigned char *)(v346 + 112);
        sub_21F829E74(v358, v359);
        *(void *)(v345 + 104) = v358;
        *(unsigned char *)(v345 + 112) = v359;
        char v276 = 6;
LABEL_498:
        *(unsigned char *)(v201 + v212) = v276;
        uint64_t v198 = v439;
        break;
      case 7u:
        uint64_t v435 = v38;
        uint64_t v304 = *(void *)v203;
        uint64_t v305 = *(void *)(v203 + 8);
        char v306 = *(unsigned char *)(v203 + 16);
        sub_21F7652C0(*(void *)v203, v305, v306);
        *(void *)uint64_t v201 = v304;
        *(void *)(v201 + 8) = v305;
        *(unsigned char *)(v201 + 16) = v306;
        *(void *)(v201 + 24) = *(void *)(v203 + 24);
        unint64_t v307 = (void *)((v444 + v201) & v200);
        uint64_t v402 = ~v197;
        uint64_t v308 = (unsigned __int8 *)((v444 + v203) & v200);
        unsigned int v309 = v308[v441];
        swift_bridgeObjectRetain();
        if (v309 < 5)
        {
          uint64_t v38 = v435;
          uint64_t v311 = v441;
        }
        else
        {
          if (v441 <= 3) {
            uint64_t v310 = v441;
          }
          else {
            uint64_t v310 = 4;
          }
          uint64_t v311 = v441;
          uint64_t v38 = v435;
          switch(v310)
          {
            case 1:
              int v312 = *v308;
              goto LABEL_502;
            case 2:
              int v312 = *(unsigned __int16 *)v308;
              goto LABEL_502;
            case 3:
              int v312 = *(unsigned __int16 *)((v444 + v203) & v200) | (*(unsigned __int8 *)(((v444 + v203) & v200) + 2) << 16);
              goto LABEL_502;
            case 4:
              int v312 = *(_DWORD *)v308;
LABEL_502:
              int v360 = (v312 | ((v309 - 5) << (8 * v441))) + 5;
              unsigned int v361 = v312 + 5;
              if (v441 >= 4) {
                unsigned int v309 = v361;
              }
              else {
                unsigned int v309 = v360;
              }
              break;
            default:
              break;
          }
        }
        switch(v309)
        {
          case 1u:
            v363 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v421 + 16);
            v363(v307, v308, v437);
            v363((void *)(((unint64_t)v307 + v195 + v406) & v409), (unsigned __int8 *)((unint64_t)&v308[v195 + v406] & v409), v437);
            *((unsigned char *)v307 + v441) = 1;
            break;
          case 2u:
            *unint64_t v307 = *(void *)v308;
            *((unsigned char *)v307 + v311) = 2;
            swift_retain();
            break;
          case 3u:
            *unint64_t v307 = *(void *)v308;
            *(void *)(((v444 + v201) & v200) + 8) = *(void *)(((v444 + v203) & v200) + 8);
            *((unsigned char *)v307 + v311) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4u:
            *unint64_t v307 = *(void *)v308;
            unint64_t v364 = ((unint64_t)v307 + v412) & v413;
            unint64_t v365 = (unint64_t)&v308[v412] & v413;
            v446 = *(void (**)(unint64_t, unint64_t, uint64_t))(v417 + 16);
            uint64_t v366 = v311;
            swift_retain();
            v446(v364, v365, v418);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v442 + 16))((v414 + v416 + v364) & v415, (v414 + v416 + v365) & v415, v419);
            *((unsigned char *)v307 + v366) = 4;
            break;
          default:
            uint64_t v362 = v311;
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v421 + 16))(v307, v308, v437);
            *((unsigned char *)v307 + v362) = 0;
            break;
        }
        uint64_t v200 = v402;
        unint64_t v367 = ((v201 | 7) + v208) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v368 = ((v203 | 7) + v208) & 0xFFFFFFFFFFFFFFF8;
        *(unsigned char *)unint64_t v367 = *(unsigned char *)v368;
        *(unsigned char *)(v367 + 1) = *(unsigned char *)(v368 + 1);
        *(unsigned char *)(v367 + 2) = *(unsigned char *)(v368 + 2);
        uint64_t v369 = *(void *)(v368 + 8);
        uint64_t v370 = *(void *)(v368 + 16);
        char v371 = *(unsigned char *)(v368 + 24);
        sub_21F770E44(v369, v370, v371);
        *(void *)(v367 + 8) = v369;
        *(void *)(v367 + 16) = v370;
        *(unsigned char *)(v367 + 24) = v371;
        unsigned int v372 = *(unsigned __int8 *)(v368 + 48);
        if (v372 <= 0xFB)
        {
          uint64_t v374 = *(void *)(v368 + 32);
          uint64_t v375 = *(void *)(v368 + 40);
          sub_21F770E44(v374, v375, *(unsigned char *)(v368 + 48));
          *(void *)(v367 + 32) = v374;
          *(void *)(v367 + 40) = v375;
          *(unsigned char *)(v367 + 48) = v372;
        }
        else
        {
          long long v373 = *(_OWORD *)(v368 + 32);
          *(unsigned char *)(v367 + 48) = *(unsigned char *)(v368 + 48);
          *(_OWORD *)(v367 + 32) = v373;
        }
        uint64_t v198 = v439;
        char v322 = 7;
LABEL_515:
        *(unsigned char *)(v201 + v212) = v322;
        break;
      default:
        uint64_t v274 = *(void *)v203;
        *(unsigned char *)(v201 + 8) = *(unsigned char *)(v203 + 8);
        *(void *)uint64_t v201 = v274;
        *(unsigned char *)(v201 + v212) = 0;
        uint64_t v198 = v439;
        break;
    }
  }
  *(void *)(((v201 | 7) + v212 + 1) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v203 | 7) + v212 + 1) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  unint64_t v382 = ((v212 + ((v198 + (v447 & v449)) & v200) + 8) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v383 = (v38 + v382 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v384 = (v448 + v382 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v385 = *(void *)v384;
  v384 += 15;
  *(void *)unint64_t v383 = v385;
  v383 += 15;
  unint64_t v386 = (v384 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(void *)(v383 & 0xFFFFFFFFFFFFFFF8) = *(void *)(v384 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v387 = (v383 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v387 &= 0xFFFFFFFFFFFFFFF8;
  v386 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v387 = *(void *)v386;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v388 = (void *)((v387 + 15) & 0xFFFFFFFFFFFFFFF8);
  v389 = (unint64_t *)((v386 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v390 = *v389;
  if (*v388 < 0xFFFFFFFFuLL)
  {
    if (v390 >= 0xFFFFFFFF)
    {
      void *v388 = v390;
      v388[1] = v389[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return v38;
    }
LABEL_536:
    *(_OWORD *)v388 = *(_OWORD *)v389;
    return v38;
  }
  if (v390 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_536;
  }
  void *v388 = v390;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v388[1] = v389[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v38;
}

__n128 sub_21F8493E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v450 = a3;
  uint64_t v430 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v430 - 8);
  uint64_t v432 = v8;
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v445 = sub_21FA24310();
  uint64_t v10 = *(void *)(v445 - 8);
  uint64_t v444 = v10;
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = sub_21FA24320();
  uint64_t v446 = *(void *)(v12 - 8);
  uint64_t v447 = v12;
  uint64_t v13 = *(unsigned __int8 *)(v446 + 80);
  uint64_t v14 = v13 | v11;
  uint64_t v15 = v13 | v11 | v9;
  uint64_t v16 = v15 | 7;
  uint64_t v17 = (v15 | 7) + v7;
  uint64_t v458 = a2;
  uint64_t v459 = a1;
  uint64_t v18 = v17 + a1;
  uint64_t v19 = v18 & ~(v15 | 7);
  uint64_t v20 = v17 + a2;
  uint64_t v21 = (unsigned __int8 *)(v20 & ~(v15 | 7));
  uint64_t v22 = v15 + 32;
  uint64_t v23 = (v15 + 32) & ~(v15 | 7);
  unint64_t v24 = *(void *)(v8 + 64);
  unint64_t v25 = ((v24 + v9) & ~v9) + v24;
  if (v25 <= v24) {
    unint64_t v25 = v24;
  }
  uint64_t v26 = v11 + 8;
  uint64_t v443 = *(void *)(v10 + 64) + v13;
  uint64_t v27 = (v443 + ((v11 + 8) & ~v11)) & ~v13;
  uint64_t v28 = *(void *)(*(void *)(v12 - 8) + 64);
  unint64_t v29 = v27 + v28;
  if (v25 <= v27 + v28) {
    unint64_t v30 = v27 + v28;
  }
  else {
    unint64_t v30 = v25;
  }
  if (v30 <= 0x10) {
    uint64_t v31 = 16;
  }
  else {
    uint64_t v31 = v30;
  }
  uint64_t v32 = v31 + v23;
  unint64_t v33 = v31 + v23 + 1;
  unint64_t v34 = ((v33 + v16) & ~v16) + v33;
  if (v33 > v34) {
    unint64_t v34 = v32 + 1;
  }
  uint64_t v35 = v32 + 8;
  unint64_t v36 = (v32 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v34 <= v36 + 113) {
    unint64_t v34 = v36 + 113;
  }
  unint64_t v37 = v36 + 49;
  if (v34 > v37) {
    unint64_t v37 = v34;
  }
  if (v37 <= 0x19) {
    uint64_t v38 = 25;
  }
  else {
    uint64_t v38 = v37;
  }
  unsigned int v39 = v21[v38];
  unsigned int v40 = v39 - 8;
  if (v39 >= 8)
  {
    if (v38 <= 3) {
      uint64_t v41 = v38;
    }
    else {
      uint64_t v41 = 4;
    }
    switch(v41)
    {
      case 1:
        int v42 = *v21;
        if (v38 < 4) {
          goto LABEL_28;
        }
        goto LABEL_30;
      case 2:
        int v42 = *(unsigned __int16 *)v21;
        if (v38 >= 4) {
          goto LABEL_30;
        }
        goto LABEL_28;
      case 3:
        int v42 = *(unsigned __int16 *)v21 | (v21[2] << 16);
        if (v38 < 4) {
          goto LABEL_28;
        }
        goto LABEL_30;
      case 4:
        int v42 = *(_DWORD *)v21;
        if (v38 < 4) {
LABEL_28:
        }
          unsigned int v39 = (v42 | (v40 << (8 * v38))) + 8;
        else {
LABEL_30:
        }
          unsigned int v39 = v42 + 8;
        break;
      default:
        break;
    }
  }
  uint64_t v43 = ~v16;
  uint64_t v44 = ~v11;
  uint64_t v442 = ~v13;
  switch(v39)
  {
    case 1u:
      long long v48 = *(_OWORD *)v21;
      *(_OWORD *)(v19 + 9) = *(_OWORD *)(v21 + 9);
      *(_OWORD *)uint64_t v19 = v48;
      char v45 = 1;
      uint64_t v47 = a3;
      break;
    case 2u:
      *(void *)uint64_t v19 = *(void *)v21;
      char v45 = 2;
      uint64_t v47 = a3;
      break;
    case 3u:
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v21;
      char v45 = 3;
      uint64_t v47 = a3;
      break;
    case 4u:
      long long v49 = *((_OWORD *)v21 + 1);
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v21;
      *(_OWORD *)(v19 + 16) = v49;
      unsigned int v50 = (void *)((v22 + v19) & v43);
      unsigned int v51 = (unsigned __int8 *)((unint64_t)&v21[v22] & v43);
      unsigned int v52 = v51[v31];
      unsigned int v53 = v52 - 5;
      if (v52 >= 5)
      {
        if (v31 <= 3) {
          uint64_t v54 = v31;
        }
        else {
          uint64_t v54 = 4;
        }
        switch(v54)
        {
          case 1:
            int v55 = *v51;
            goto LABEL_63;
          case 2:
            int v55 = *(unsigned __int16 *)v51;
            goto LABEL_63;
          case 3:
            int v55 = *(unsigned __int16 *)v51 | (*(unsigned __int8 *)(((unint64_t)&v21[v22] & v43) + 2) << 16);
            goto LABEL_63;
          case 4:
            int v55 = *(_DWORD *)v51;
LABEL_63:
            if (v31 < 4) {
              unsigned int v52 = (v55 | (v53 << (8 * v31))) + 5;
            }
            else {
              unsigned int v52 = v55 + 5;
            }
            break;
          default:
            break;
        }
      }
      switch(v52)
      {
        case 1u:
          unint64_t v90 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v432 + 32);
          uint64_t v411 = v17;
          uint64_t v422 = v11 + 8;
          uint64_t v388 = v19;
          uint64_t v395 = v14;
          unint64_t v91 = v50;
          uint64_t v403 = ~v16;
          uint64_t v408 = v44;
          unint64_t v377 = v29;
          unint64_t v383 = v21;
          uint64_t v92 = v38;
          uint64_t v93 = v31;
          v90(v50, v51, v430);
          v90((void *)(((unint64_t)v91 + v9 + v24) & ~v9), (unsigned __int8 *)((unint64_t)&v51[v9 + v24] & ~v9), v430);
          unsigned int v50 = v91;
          uint64_t v31 = v93;
          uint64_t v38 = v92;
          unint64_t v29 = v377;
          uint64_t v21 = v383;
          uint64_t v19 = v388;
          uint64_t v14 = v395;
          uint64_t v43 = v403;
          uint64_t v44 = v408;
          uint64_t v17 = v411;
          uint64_t v26 = v422;
          char v89 = 1;
          break;
        case 2u:
          void *v50 = *(void *)v51;
          char v89 = 2;
          break;
        case 3u:
          *(_OWORD *)unsigned int v50 = *(_OWORD *)v51;
          char v89 = 3;
          break;
        case 4u:
          void *v50 = *(void *)v51;
          unint64_t v94 = ((unint64_t)v50 + v26) & v44;
          unint64_t v95 = (unint64_t)&v51[v26] & v44;
          uint64_t v423 = v11 + 8;
          uint64_t v396 = v14;
          uint64_t v96 = v19;
          uint64_t v433 = (void *)((v22 + v19) & v43);
          uint64_t v97 = v17;
          uint64_t v98 = ~v16;
          uint64_t v99 = ~v11;
          char v100 = v21;
          unint64_t v101 = v29;
          uint64_t v102 = v38;
          uint64_t v103 = v31;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v444 + 32))(v94, v95, v445);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v446 + 32))((v443 + v94) & v442, (v443 + v95) & v442, v447);
          unsigned int v50 = v433;
          uint64_t v31 = v103;
          uint64_t v38 = v102;
          unint64_t v29 = v101;
          uint64_t v21 = v100;
          uint64_t v19 = v96;
          uint64_t v14 = v396;
          uint64_t v44 = v99;
          uint64_t v26 = v423;
          uint64_t v43 = v98;
          uint64_t v17 = v97;
          char v89 = 4;
          break;
        default:
          uint64_t v421 = v11 + 8;
          uint64_t v77 = (v22 + v19) & v43;
          uint64_t v78 = v14;
          unint64_t v79 = (unint64_t)&v21[v22] & v43;
          uint64_t v80 = v19;
          unint64_t v81 = (void *)v77;
          uint64_t v82 = v17;
          uint64_t v83 = ~v16;
          uint64_t v84 = ~v11;
          unsigned int v85 = v21;
          unint64_t v86 = v29;
          uint64_t v87 = v38;
          uint64_t v88 = v31;
          (*(void (**)(uint64_t, unint64_t, uint64_t))(v432 + 32))(v77, v79, v430);
          unsigned int v50 = v81;
          uint64_t v31 = v88;
          uint64_t v38 = v87;
          unint64_t v29 = v86;
          uint64_t v21 = v85;
          uint64_t v19 = v80;
          uint64_t v14 = v78;
          uint64_t v44 = v84;
          uint64_t v26 = v421;
          uint64_t v43 = v83;
          uint64_t v17 = v82;
          char v89 = 0;
          break;
      }
      uint64_t v47 = v450;
      *((unsigned char *)v50 + v31) = v89;
      char v45 = 4;
      break;
    case 5u:
      long long v56 = *((_OWORD *)v21 + 1);
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v21;
      *(_OWORD *)(v19 + 16) = v56;
      uint64_t v57 = (void *)((v22 + v19) & v43);
      int v58 = (unsigned __int8 *)((unint64_t)&v21[v22] & v43);
      unsigned int v59 = v58[v31];
      unsigned int v60 = v59 - 5;
      if (v59 >= 5)
      {
        if (v31 <= 3) {
          uint64_t v61 = v31;
        }
        else {
          uint64_t v61 = 4;
        }
        switch(v61)
        {
          case 1:
            int v62 = *v58;
            goto LABEL_76;
          case 2:
            int v62 = *(unsigned __int16 *)v58;
            goto LABEL_76;
          case 3:
            int v62 = *(unsigned __int16 *)v58 | (*(unsigned __int8 *)(((unint64_t)&v21[v22] & v43) + 2) << 16);
            goto LABEL_76;
          case 4:
            int v62 = *(_DWORD *)v58;
LABEL_76:
            if (v31 < 4) {
              unsigned int v59 = (v62 | (v60 << (8 * v31))) + 5;
            }
            else {
              unsigned int v59 = v62 + 5;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v370 = v24 + v9;
      uint64_t v371 = ~v9;
      uint64_t v372 = v38;
      unint64_t v378 = v29;
      unint64_t v384 = v21;
      uint64_t v389 = v19;
      uint64_t v397 = v14;
      uint64_t v412 = v17;
      uint64_t v424 = v26;
      uint64_t v409 = v44;
      switch(v59)
      {
        case 1u:
          unint64_t v368 = *(void (**)(void *, unint64_t, uint64_t))(v432 + 32);
          uint64_t v369 = (void *)((v22 + v19) & v43);
          uint64_t v367 = v31;
          v368(v369, (unint64_t)&v21[v22] & v43, v430);
          uint64_t v57 = v369;
          v368((void *)(((unint64_t)v369 + v9 + v24) & v371), (unint64_t)&v58[v9 + v24] & v371, v430);
          uint64_t v31 = v367;
          uint64_t v43 = ~v16;
          char v105 = 1;
          break;
        case 2u:
          *uint64_t v57 = *(void *)v58;
          char v105 = 2;
          break;
        case 3u:
          *(_OWORD *)uint64_t v57 = *(_OWORD *)v58;
          char v105 = 3;
          break;
        case 4u:
          *uint64_t v57 = *(void *)v58;
          unint64_t v106 = ((unint64_t)v57 + v26) & v44;
          unint64_t v107 = (unint64_t)&v58[v26] & v44;
          uint64_t v108 = v31;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v444 + 32))(v106, v107, v445);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v446 + 32))((v443 + v106) & v442, (v443 + v107) & v442, v447);
          uint64_t v31 = v108;
          uint64_t v43 = ~v16;
          char v105 = 4;
          break;
        default:
          uint64_t v104 = v31;
          (*(void (**)(uint64_t, unint64_t, uint64_t))(v432 + 32))((v22 + v19) & v43, (unint64_t)&v21[v22] & v43, v430);
          uint64_t v31 = v104;
          uint64_t v43 = ~v16;
          char v105 = 0;
          break;
      }
      *((unsigned char *)v57 + v31) = v105;
      uint64_t v109 = (_OWORD *)(((v18 | v16) + v33) & v43);
      uint64_t v110 = (_OWORD *)(((v20 | v16) + v33) & v43);
      long long v111 = v110[1];
      *uint64_t v109 = *v110;
      v109[1] = v111;
      uint64_t v112 = (void *)(((unint64_t)v109 + v22) & v43);
      int v113 = (unsigned __int8 *)(((unint64_t)v110 + v22) & v43);
      unsigned int v114 = v113[v31];
      unsigned int v115 = v114 - 5;
      if (v114 < 5)
      {
        uint64_t v26 = v424;
        uint64_t v44 = v409;
      }
      else
      {
        if (v31 <= 3) {
          uint64_t v116 = v31;
        }
        else {
          uint64_t v116 = 4;
        }
        uint64_t v26 = v424;
        uint64_t v44 = v409;
        switch(v116)
        {
          case 1:
            int v117 = *v113;
            goto LABEL_121;
          case 2:
            int v117 = *(unsigned __int16 *)v113;
            goto LABEL_121;
          case 3:
            int v117 = *(unsigned __int16 *)v113 | (v113[2] << 16);
            goto LABEL_121;
          case 4:
            int v117 = *(_DWORD *)v113;
LABEL_121:
            if (v31 < 4) {
              unsigned int v114 = (v117 | (v115 << (8 * v31))) + 5;
            }
            else {
              unsigned int v114 = v117 + 5;
            }
            break;
          default:
            break;
        }
      }
      switch(v114)
      {
        case 1u:
          long long v186 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v432 + 32);
          uint64_t v187 = v26;
          uint64_t v188 = v43;
          uint64_t v189 = v44;
          uint64_t v190 = v31;
          v186(v112, v113, v430);
          v186((void *)(((unint64_t)v112 + v370) & v371), (unsigned __int8 *)((unint64_t)&v113[v370] & v371), v430);
          uint64_t v31 = v190;
          uint64_t v44 = v189;
          uint64_t v26 = v187;
          uint64_t v43 = v188;
          char v185 = 1;
          break;
        case 2u:
          *uint64_t v112 = *(void *)v113;
          char v185 = 2;
          break;
        case 3u:
          *(_OWORD *)uint64_t v112 = *(_OWORD *)v113;
          char v185 = 3;
          break;
        case 4u:
          *uint64_t v112 = *(void *)v113;
          unint64_t v191 = ((unint64_t)v112 + v26) & v44;
          unint64_t v192 = (unint64_t)&v113[v26] & v44;
          uint64_t v193 = v26;
          uint64_t v194 = v43;
          uint64_t v195 = v44;
          uint64_t v196 = v31;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v444 + 32))(v191, v192, v445);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v446 + 32))((v443 + v191) & v442, (v443 + v192) & v442, v447);
          uint64_t v31 = v196;
          uint64_t v44 = v195;
          uint64_t v26 = v193;
          uint64_t v43 = v194;
          char v185 = 4;
          break;
        default:
          uint64_t v181 = v26;
          uint64_t v182 = v43;
          uint64_t v183 = v44;
          uint64_t v184 = v31;
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v432 + 32))(v112, v113, v430);
          uint64_t v31 = v184;
          uint64_t v44 = v183;
          uint64_t v26 = v181;
          uint64_t v43 = v182;
          char v185 = 0;
          break;
      }
      uint64_t v17 = v412;
      uint64_t v47 = v450;
      uint64_t v19 = v389;
      uint64_t v14 = v397;
      unint64_t v29 = v378;
      uint64_t v21 = v384;
      uint64_t v38 = v372;
      *((unsigned char *)v112 + v31) = v185;
      char v45 = 5;
      break;
    case 6u:
      long long v63 = *((_OWORD *)v21 + 1);
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v21;
      *(_OWORD *)(v19 + 16) = v63;
      uint64_t v64 = (void *)((v22 + v19) & v43);
      unsigned int v65 = (unsigned __int8 *)((unint64_t)&v21[v22] & v43);
      unsigned int v66 = v65[v31];
      unsigned int v67 = v66 - 5;
      if (v66 >= 5)
      {
        if (v31 <= 3) {
          uint64_t v68 = v31;
        }
        else {
          uint64_t v68 = 4;
        }
        switch(v68)
        {
          case 1:
            int v69 = *v65;
            goto LABEL_95;
          case 2:
            int v69 = *(unsigned __int16 *)v65;
            goto LABEL_95;
          case 3:
            int v69 = *(unsigned __int16 *)v65 | (*(unsigned __int8 *)(((unint64_t)&v21[v22] & v43) + 2) << 16);
            goto LABEL_95;
          case 4:
            int v69 = *(_DWORD *)v65;
LABEL_95:
            if (v31 < 4) {
              unsigned int v66 = (v69 | (v67 << (8 * v31))) + 5;
            }
            else {
              unsigned int v66 = v69 + 5;
            }
            break;
          default:
            break;
        }
      }
      switch(v66)
      {
        case 1u:
          unint64_t v140 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v432 + 32);
          uint64_t v413 = v17;
          uint64_t v391 = v19;
          uint64_t v399 = v14;
          unint64_t v141 = v64;
          unint64_t v379 = v29;
          uint64_t v385 = v21;
          uint64_t v373 = v38;
          uint64_t v142 = v31;
          v140(v64, v65, v430);
          v140((void *)(((unint64_t)v141 + v9 + v24) & ~v9), (unsigned __int8 *)((unint64_t)&v65[v9 + v24] & ~v9), v430);
          uint64_t v64 = v141;
          uint64_t v31 = v142;
          uint64_t v38 = v373;
          unint64_t v29 = v379;
          uint64_t v21 = v385;
          uint64_t v19 = v391;
          uint64_t v14 = v399;
          uint64_t v43 = ~v16;
          uint64_t v44 = ~v11;
          uint64_t v17 = v413;
          uint64_t v26 = v11 + 8;
          char v130 = 1;
          break;
        case 2u:
          *uint64_t v64 = *(void *)v65;
          char v130 = 2;
          break;
        case 3u:
          *(_OWORD *)uint64_t v64 = *(_OWORD *)v65;
          char v130 = 3;
          break;
        case 4u:
          *uint64_t v64 = *(void *)v65;
          unint64_t v131 = ((unint64_t)v64 + v26) & v44;
          unint64_t v132 = (unint64_t)&v65[v26] & v44;
          uint64_t v426 = v11 + 8;
          uint64_t v390 = v19;
          uint64_t v398 = v14;
          uint64_t v435 = (void *)((v22 + v19) & v43);
          uint64_t v133 = v17;
          uint64_t v134 = ~v16;
          uint64_t v135 = ~v11;
          unint64_t v136 = v21;
          unint64_t v137 = v29;
          uint64_t v138 = v38;
          uint64_t v139 = v31;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v444 + 32))(v131, v132, v445);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v446 + 32))((v443 + v131) & v442, (v443 + v132) & v442, v447);
          uint64_t v64 = v435;
          uint64_t v31 = v139;
          uint64_t v38 = v138;
          unint64_t v29 = v137;
          uint64_t v21 = v136;
          uint64_t v19 = v390;
          uint64_t v14 = v398;
          uint64_t v44 = v135;
          uint64_t v26 = v426;
          uint64_t v43 = v134;
          uint64_t v17 = v133;
          char v130 = 4;
          break;
        default:
          uint64_t v118 = *(void (**)(uint64_t, unint64_t, uint64_t))(v432 + 32);
          uint64_t v425 = v11 + 8;
          uint64_t v119 = (v22 + v19) & v43;
          uint64_t v120 = v14;
          unint64_t v121 = (unint64_t)&v21[v22] & v43;
          uint64_t v122 = v19;
          uint64_t v434 = (void *)v119;
          uint64_t v123 = v17;
          uint64_t v124 = ~v16;
          uint64_t v125 = ~v11;
          long long v126 = v21;
          unint64_t v127 = v29;
          uint64_t v128 = v38;
          uint64_t v129 = v31;
          v118(v119, v121, v430);
          uint64_t v64 = v434;
          uint64_t v31 = v129;
          uint64_t v38 = v128;
          unint64_t v29 = v127;
          uint64_t v21 = v126;
          uint64_t v19 = v122;
          uint64_t v14 = v120;
          uint64_t v44 = v125;
          uint64_t v26 = v425;
          uint64_t v43 = v124;
          uint64_t v17 = v123;
          char v130 = 0;
          break;
      }
      uint64_t v47 = v450;
      *((unsigned char *)v64 + v31) = v130;
      unint64_t v143 = (v35 + v19) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v144 = (unint64_t)&v21[v35] & 0xFFFFFFFFFFFFFFF8;
      long long v145 = *(_OWORD *)v144;
      long long v146 = *(_OWORD *)(v144 + 16);
      long long v147 = *(_OWORD *)(v144 + 48);
      *(_OWORD *)(v143 + 32) = *(_OWORD *)(v144 + 32);
      *(_OWORD *)(v143 + 48) = v147;
      *(_OWORD *)unint64_t v143 = v145;
      *(_OWORD *)(v143 + 16) = v146;
      long long v148 = *(_OWORD *)(v144 + 64);
      long long v149 = *(_OWORD *)(v144 + 80);
      long long v150 = *(_OWORD *)(v144 + 96);
      *(unsigned char *)(v143 + 112) = *(unsigned char *)(v144 + 112);
      *(_OWORD *)(v143 + 80) = v149;
      *(_OWORD *)(v143 + 96) = v150;
      *(_OWORD *)(v143 + 64) = v148;
      char v45 = 6;
      break;
    case 7u:
      long long v70 = *((_OWORD *)v21 + 1);
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v21;
      *(_OWORD *)(v19 + 16) = v70;
      uint64_t v71 = (void *)((v22 + v19) & v43);
      uint64_t v72 = (unsigned __int8 *)((unint64_t)&v21[v22] & v43);
      unsigned int v73 = v72[v31];
      unsigned int v74 = v73 - 5;
      if (v73 >= 5)
      {
        if (v31 <= 3) {
          uint64_t v75 = v31;
        }
        else {
          uint64_t v75 = 4;
        }
        switch(v75)
        {
          case 1:
            int v76 = *v72;
            goto LABEL_108;
          case 2:
            int v76 = *(unsigned __int16 *)v72;
            goto LABEL_108;
          case 3:
            int v76 = *(unsigned __int16 *)v72 | (*(unsigned __int8 *)(((unint64_t)&v21[v22] & v43) + 2) << 16);
            goto LABEL_108;
          case 4:
            int v76 = *(_DWORD *)v72;
LABEL_108:
            if (v31 < 4) {
              unsigned int v73 = (v76 | (v74 << (8 * v31))) + 5;
            }
            else {
              unsigned int v73 = v76 + 5;
            }
            break;
          default:
            break;
        }
      }
      switch(v73)
      {
        case 1u:
          long long v164 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v432 + 32);
          uint64_t v414 = v17;
          uint64_t v392 = v19;
          uint64_t v400 = v14;
          long long v165 = v71;
          unint64_t v380 = v29;
          unint64_t v386 = v21;
          uint64_t v374 = v38;
          uint64_t v166 = v31;
          v164(v71, v72, v430);
          v164((void *)(((unint64_t)v165 + v9 + v24) & ~v9), (unsigned __int8 *)((unint64_t)&v72[v9 + v24] & ~v9), v430);
          uint64_t v71 = v165;
          uint64_t v31 = v166;
          uint64_t v38 = v374;
          unint64_t v29 = v380;
          uint64_t v21 = v386;
          uint64_t v19 = v392;
          uint64_t v14 = v400;
          uint64_t v43 = ~v16;
          uint64_t v44 = ~v11;
          uint64_t v17 = v414;
          uint64_t v26 = v11 + 8;
          char v163 = 1;
          break;
        case 2u:
          *uint64_t v71 = *(void *)v72;
          char v163 = 2;
          break;
        case 3u:
          *(_OWORD *)uint64_t v71 = *(_OWORD *)v72;
          char v163 = 3;
          break;
        case 4u:
          *uint64_t v71 = *(void *)v72;
          unint64_t v167 = ((unint64_t)v71 + v26) & v44;
          unint64_t v168 = (unint64_t)&v72[v26] & v44;
          uint64_t v428 = v11 + 8;
          uint64_t v393 = v19;
          uint64_t v401 = v14;
          uint64_t v437 = (void *)((v22 + v19) & v43);
          uint64_t v169 = v17;
          uint64_t v170 = ~v16;
          uint64_t v171 = ~v11;
          long long v172 = v21;
          unint64_t v173 = v29;
          uint64_t v174 = v38;
          uint64_t v175 = v31;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v444 + 32))(v167, v168, v445);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v446 + 32))((v443 + v167) & v442, (v443 + v168) & v442, v447);
          uint64_t v71 = v437;
          uint64_t v31 = v175;
          uint64_t v38 = v174;
          unint64_t v29 = v173;
          uint64_t v21 = v172;
          uint64_t v19 = v393;
          uint64_t v14 = v401;
          uint64_t v44 = v171;
          uint64_t v26 = v428;
          uint64_t v43 = v170;
          uint64_t v17 = v169;
          char v163 = 4;
          break;
        default:
          unsigned int v151 = *(void (**)(uint64_t, unint64_t, uint64_t))(v432 + 32);
          uint64_t v427 = v11 + 8;
          uint64_t v152 = (v22 + v19) & v43;
          uint64_t v153 = v14;
          unint64_t v154 = (unint64_t)&v21[v22] & v43;
          uint64_t v155 = v19;
          uint64_t v436 = (void *)v152;
          uint64_t v156 = v17;
          uint64_t v157 = ~v16;
          uint64_t v158 = ~v11;
          unint64_t v159 = v21;
          unint64_t v160 = v29;
          uint64_t v161 = v38;
          uint64_t v162 = v31;
          v151(v152, v154, v430);
          uint64_t v71 = v436;
          uint64_t v31 = v162;
          uint64_t v38 = v161;
          unint64_t v29 = v160;
          uint64_t v21 = v159;
          uint64_t v19 = v155;
          uint64_t v14 = v153;
          uint64_t v44 = v158;
          uint64_t v26 = v427;
          uint64_t v43 = v157;
          uint64_t v17 = v156;
          char v163 = 0;
          break;
      }
      uint64_t v47 = v450;
      *((unsigned char *)v71 + v31) = v163;
      unint64_t v176 = (v35 + v19) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v177 = (unint64_t)&v21[v35] & 0xFFFFFFFFFFFFFFF8;
      long long v178 = *(_OWORD *)v177;
      long long v179 = *(_OWORD *)(v177 + 16);
      long long v180 = *(_OWORD *)(v177 + 32);
      *(unsigned char *)(v176 + 48) = *(unsigned char *)(v177 + 48);
      *(_OWORD *)(v176 + 16) = v179;
      *(_OWORD *)(v176 + 32) = v180;
      *(_OWORD *)unint64_t v176 = v178;
      char v45 = 7;
      break;
    default:
      char v45 = 0;
      uint64_t v46 = *(void *)v21;
      *(unsigned char *)(v19 + 8) = v21[8];
      *(void *)uint64_t v19 = v46;
      uint64_t v47 = a3;
      break;
  }
  *(unsigned char *)(v19 + v38) = v45;
  uint64_t v197 = *(void *)(v47 + 32);
  uint64_t v198 = *(void *)(v197 - 8);
  uint64_t v199 = *(unsigned __int8 *)(v198 + 80);
  uint64_t v200 = v14 | v199;
  uint64_t v201 = v14 | v199 | 7;
  uint64_t v202 = v38 + v201 + 1;
  uint64_t v203 = v202 + v19;
  uint64_t v204 = (v202 + v19) & ~v201;
  unint64_t v205 = (unint64_t)&v21[v202];
  unint64_t v206 = (unint64_t)&v21[v202] & ~v201;
  uint64_t v207 = v200 + 32;
  uint64_t v208 = (v200 + 32) & ~v201;
  unint64_t v209 = *(void *)(v198 + 64);
  uint64_t v210 = v209 + v199;
  if (((v209 + v199) & ~v199) + v209 > v209) {
    v209 += (v209 + v199) & ~v199;
  }
  if (v209 <= v29) {
    unint64_t v209 = v29;
  }
  if (v209 <= 0x10) {
    uint64_t v211 = 16;
  }
  else {
    uint64_t v211 = v209;
  }
  uint64_t v212 = v211 + v208;
  unint64_t v213 = v211 + v208 + 1;
  unint64_t v214 = ((v213 + v201) & ~v201) + v213;
  if (v213 > v214) {
    unint64_t v214 = v212 + 1;
  }
  uint64_t v215 = v212 + 8;
  unint64_t v216 = (v212 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v214 <= v216 + 113) {
    unint64_t v214 = v216 + 113;
  }
  unint64_t v217 = v216 + 49;
  if (v214 > v217) {
    unint64_t v217 = v214;
  }
  if (v217 <= 0x19) {
    uint64_t v218 = 25;
  }
  else {
    uint64_t v218 = v217;
  }
  unsigned int v219 = *(unsigned __int8 *)(v206 + v218);
  unsigned int v220 = v219 - 8;
  if (v219 >= 8)
  {
    if (v218 <= 3) {
      uint64_t v221 = v218;
    }
    else {
      uint64_t v221 = 4;
    }
    switch(v221)
    {
      case 1:
        int v222 = *(unsigned __int8 *)v206;
        goto LABEL_156;
      case 2:
        int v222 = *(unsigned __int16 *)v206;
        goto LABEL_156;
      case 3:
        int v222 = *(unsigned __int16 *)v206 | (*(unsigned __int8 *)(v206 + 2) << 16);
        goto LABEL_156;
      case 4:
        int v222 = *(_DWORD *)v206;
LABEL_156:
        int v223 = (v222 | (v220 << (8 * v218))) + 8;
        unsigned int v219 = v222 + 8;
        if (v218 < 4) {
          unsigned int v219 = v223;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v224 = ~v201;
  uint64_t v225 = ~v199;
  switch(v219)
  {
    case 1u:
      long long v228 = *(_OWORD *)v206;
      *(_OWORD *)(((v202 + v19) & ~v201) + 9) = *(_OWORD *)(v206 + 9);
      *(_OWORD *)uint64_t v204 = v228;
      char v226 = 1;
      goto LABEL_163;
    case 2u:
      *(void *)uint64_t v204 = *(void *)v206;
      char v226 = 2;
      goto LABEL_163;
    case 3u:
      *(_OWORD *)uint64_t v204 = *(_OWORD *)v206;
      char v226 = 3;
      goto LABEL_163;
    case 4u:
      long long v240 = *(_OWORD *)(v206 + 16);
      *(_OWORD *)uint64_t v204 = *(_OWORD *)v206;
      *(_OWORD *)(((v202 + v19) & ~v201) + 0x10) = v240;
      unsigned int v241 = (void *)((v207 + v204) & v224);
      uint64_t v242 = (unsigned __int8 *)((v207 + v206) & v224);
      unsigned int v243 = v242[v211];
      unsigned int v244 = v243 - 5;
      if (v243 >= 5)
      {
        if (v211 <= 3) {
          uint64_t v245 = v211;
        }
        else {
          uint64_t v245 = 4;
        }
        switch(v245)
        {
          case 1:
            int v246 = *v242;
            goto LABEL_192;
          case 2:
            int v246 = *(unsigned __int16 *)v242;
            goto LABEL_192;
          case 3:
            int v246 = *(unsigned __int16 *)v242 | (*(unsigned __int8 *)(((v207 + v206) & v224) + 2) << 16);
            goto LABEL_192;
          case 4:
            int v246 = *(_DWORD *)v242;
LABEL_192:
            int v268 = (v246 | (v244 << (8 * v211))) + 5;
            unsigned int v243 = v246 + 5;
            if (v211 < 4) {
              unsigned int v243 = v268;
            }
            break;
          default:
            break;
        }
      }
      switch(v243)
      {
        case 1u:
          char v276 = *(void (**)(unint64_t, unint64_t, uint64_t))(v198 + 32);
          uint64_t v451 = v202;
          uint64_t v415 = v17;
          uint64_t v404 = v43;
          uint64_t v431 = v224;
          uint64_t v438 = v197;
          uint64_t v277 = v210;
          uint64_t v278 = (void *)((v207 + v204) & v224);
          uint64_t v279 = v225;
          ((void (*)(void *, unint64_t))v276)(v278, (v207 + v206) & v224);
          unint64_t v280 = ((unint64_t)v278 + v277) & v279;
          unint64_t v281 = (unint64_t)&v242[v277] & v279;
          unsigned int v241 = v278;
          v276(v280, v281, v438);
          uint64_t v224 = v431;
          uint64_t v202 = v451;
          uint64_t v43 = v404;
          uint64_t v17 = v415;
          char v275 = 1;
          break;
        case 2u:
          *unsigned int v241 = *(void *)v242;
          char v275 = 2;
          break;
        case 3u:
          *(_OWORD *)unsigned int v241 = *(_OWORD *)v242;
          char v275 = 3;
          break;
        case 4u:
          *unsigned int v241 = *(void *)v242;
          unint64_t v282 = ((unint64_t)v241 + v26) & v44;
          unint64_t v283 = (unint64_t)&v242[v26] & v44;
          uint64_t v452 = v38 + v201 + 1;
          uint64_t v284 = v17;
          uint64_t v285 = v43;
          int v286 = (void *)((v207 + v204) & v224);
          uint64_t v287 = v224;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v444 + 32))(v282, v283, v445);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v446 + 32))((v443 + v282) & v442, (v443 + v283) & v442, v447);
          uint64_t v224 = v287;
          unsigned int v241 = v286;
          uint64_t v202 = v452;
          uint64_t v43 = v285;
          uint64_t v17 = v284;
          char v275 = 4;
          break;
        default:
          unint64_t v269 = (v207 + v204) & v224;
          uint64_t v270 = v38 + v201 + 1;
          unint64_t v271 = (v207 + v206) & v224;
          uint64_t v272 = v17;
          uint64_t v273 = v43;
          uint64_t v274 = v224;
          (*(void (**)(unint64_t, unint64_t))(v198 + 32))(v269, v271);
          uint64_t v224 = v274;
          uint64_t v202 = v270;
          uint64_t v43 = v273;
          uint64_t v17 = v272;
          char v275 = 0;
          break;
      }
      uint64_t v230 = v458;
      uint64_t v229 = v459;
      *((unsigned char *)v241 + v211) = v275;
      char v226 = 4;
      goto LABEL_164;
    case 5u:
      long long v247 = *(_OWORD *)(v206 + 16);
      *(_OWORD *)uint64_t v204 = *(_OWORD *)v206;
      *(_OWORD *)(((v202 + v19) & ~v201) + 0x10) = v247;
      int v248 = (void *)((v207 + v204) & v224);
      long long v249 = (unsigned __int8 *)((v207 + v206) & v224);
      unsigned int v250 = v249[v211];
      unsigned int v251 = v250 - 5;
      if (v250 >= 5)
      {
        if (v211 <= 3) {
          uint64_t v252 = v211;
        }
        else {
          uint64_t v252 = 4;
        }
        switch(v252)
        {
          case 1:
            int v253 = *v249;
            goto LABEL_204;
          case 2:
            int v253 = *(unsigned __int16 *)v249;
            goto LABEL_204;
          case 3:
            int v253 = *(unsigned __int16 *)v249 | (*(unsigned __int8 *)(((v207 + v206) & v224) + 2) << 16);
            goto LABEL_204;
          case 4:
            int v253 = *(_DWORD *)v249;
LABEL_204:
            int v288 = (v253 | (v251 << (8 * v211))) + 5;
            unsigned int v250 = v253 + 5;
            if (v211 < 4) {
              unsigned int v250 = v288;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v387 = v225;
      uint64_t v394 = v210;
      uint64_t v453 = v202;
      uint64_t v405 = v43;
      uint64_t v410 = v44;
      uint64_t v416 = v17;
      uint64_t v429 = v26;
      uint64_t v402 = v198;
      uint64_t v439 = v197;
      switch(v250)
      {
        case 1u:
          uint64_t v375 = *(void (**)(unint64_t, unint64_t, uint64_t))(v198 + 32);
          unint64_t v381 = (void *)((v207 + v204) & v224);
          ((void (*)(void *, unint64_t))v375)(v381, (v207 + v206) & v224);
          v375(((unint64_t)v381 + v394) & v387, (unint64_t)&v249[v394] & v387, v439);
          int v248 = v381;
          uint64_t v224 = ~v201;
          char v290 = 1;
          break;
        case 2u:
          *int v248 = *(void *)v249;
          char v290 = 2;
          break;
        case 3u:
          *(_OWORD *)int v248 = *(_OWORD *)v249;
          char v290 = 3;
          break;
        case 4u:
          *int v248 = *(void *)v249;
          unint64_t v376 = ((unint64_t)v248 + v26) & v44;
          unint64_t v291 = (unint64_t)&v249[v26] & v44;
          unint64_t v382 = (void *)((v207 + v204) & v224);
          (*(void (**)(void))(v444 + 32))();
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v446 + 32))((v443 + v376) & v442, (v443 + v291) & v442, v447);
          int v248 = v382;
          uint64_t v224 = ~v201;
          char v290 = 4;
          break;
        default:
          char v289 = (void *)((v207 + v204) & v224);
          (*(void (**)(void *, unint64_t))(v198 + 32))(v289, (v207 + v206) & v224);
          int v248 = v289;
          uint64_t v224 = ~v201;
          char v290 = 0;
          break;
      }
      *((unsigned char *)v248 + v211) = v290;
      unsigned int v292 = (_OWORD *)(((v203 | v201) + v213) & v224);
      uint64_t v293 = (_OWORD *)(((v205 | v201) + v213) & v224);
      long long v294 = v293[1];
      *unsigned int v292 = *v293;
      v292[1] = v294;
      uint64_t v295 = (void *)(((unint64_t)v292 + v207) & v224);
      uint64_t v296 = (unsigned __int8 *)(((unint64_t)v293 + v207) & v224);
      unsigned int v297 = v296[v211];
      unsigned int v298 = v297 - 5;
      if (v297 < 5)
      {
        uint64_t v300 = v429;
        uint64_t v301 = v410;
        uint64_t v302 = v402;
        uint64_t v303 = v439;
      }
      else
      {
        if (v211 <= 3) {
          uint64_t v299 = v211;
        }
        else {
          uint64_t v299 = 4;
        }
        uint64_t v300 = v429;
        uint64_t v301 = v410;
        uint64_t v302 = v402;
        uint64_t v303 = v439;
        switch(v299)
        {
          case 1:
            int v304 = *v296;
            goto LABEL_246;
          case 2:
            int v304 = *(unsigned __int16 *)v296;
            goto LABEL_246;
          case 3:
            int v304 = *(unsigned __int16 *)v296 | (v296[2] << 16);
            goto LABEL_246;
          case 4:
            int v304 = *(_DWORD *)v296;
LABEL_246:
            int v358 = (v304 | (v298 << (8 * v211))) + 5;
            unsigned int v297 = v304 + 5;
            if (v211 < 4) {
              unsigned int v297 = v358;
            }
            break;
          default:
            break;
        }
      }
      switch(v297)
      {
        case 1u:
          unsigned int v361 = *(void (**)(unint64_t, unint64_t, uint64_t))(v302 + 32);
          uint64_t v362 = v224;
          uint64_t v363 = v303;
          ((void (*)(void *, unsigned __int8 *))v361)(v295, v296);
          v361(((unint64_t)v295 + v394) & v387, (unint64_t)&v296[v394] & v387, v363);
          uint64_t v224 = v362;
          char v360 = 1;
          break;
        case 2u:
          void *v295 = *(void *)v296;
          char v360 = 2;
          break;
        case 3u:
          *(_OWORD *)uint64_t v295 = *(_OWORD *)v296;
          char v360 = 3;
          break;
        case 4u:
          void *v295 = *(void *)v296;
          unint64_t v364 = ((unint64_t)v295 + v300) & v301;
          unint64_t v365 = (unint64_t)&v296[v300] & v301;
          uint64_t v366 = v224;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v444 + 32))(v364, v365, v445);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v446 + 32))((v443 + v364) & v442, (v443 + v365) & v442, v447);
          uint64_t v224 = v366;
          char v360 = 4;
          break;
        default:
          uint64_t v359 = v224;
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v302 + 32))(v295, v296, v303);
          uint64_t v224 = v359;
          char v360 = 0;
          break;
      }
      uint64_t v230 = v458;
      uint64_t v229 = v459;
      uint64_t v17 = v416;
      uint64_t v43 = v405;
      uint64_t v202 = v453;
      *((unsigned char *)v295 + v211) = v360;
      char v226 = 5;
      goto LABEL_164;
    case 6u:
      long long v254 = *(_OWORD *)(v206 + 16);
      *(_OWORD *)uint64_t v204 = *(_OWORD *)v206;
      *(_OWORD *)(((v202 + v19) & ~v201) + 0x10) = v254;
      int v255 = (void *)((v207 + v204) & v224);
      int v256 = (unsigned __int8 *)((v207 + v206) & v224);
      unsigned int v257 = v256[v211];
      unsigned int v258 = v257 - 5;
      if (v257 >= 5)
      {
        if (v211 <= 3) {
          uint64_t v259 = v211;
        }
        else {
          uint64_t v259 = 4;
        }
        switch(v259)
        {
          case 1:
            int v260 = *v256;
            goto LABEL_222;
          case 2:
            int v260 = *(unsigned __int16 *)v256;
            goto LABEL_222;
          case 3:
            int v260 = *(unsigned __int16 *)v256 | (*(unsigned __int8 *)(((v207 + v206) & v224) + 2) << 16);
            goto LABEL_222;
          case 4:
            int v260 = *(_DWORD *)v256;
LABEL_222:
            int v305 = (v260 | (v258 << (8 * v211))) + 5;
            unsigned int v257 = v260 + 5;
            if (v211 < 4) {
              unsigned int v257 = v305;
            }
            break;
          default:
            break;
        }
      }
      switch(v257)
      {
        case 1u:
          uint64_t v448 = *(void (**)(unint64_t, unint64_t))(v198 + 32);
          uint64_t v455 = v38 + v201 + 1;
          unint64_t v318 = (v207 + v204) & v224;
          unint64_t v319 = (v207 + v206) & v224;
          uint64_t v418 = v17;
          uint64_t v406 = v43;
          uint64_t v440 = v197;
          uint64_t v320 = (void *)v318;
          uint64_t v321 = v210;
          uint64_t v322 = v225;
          v448(v318, v319);
          unint64_t v323 = ((unint64_t)v320 + v321) & v322;
          unint64_t v324 = (unint64_t)&v256[v321];
          int v255 = v320;
          ((void (*)(unint64_t, unint64_t, uint64_t))v448)(v323, v324 & v322, v440);
          uint64_t v224 = ~v201;
          uint64_t v202 = v455;
          uint64_t v43 = v406;
          uint64_t v17 = v418;
          char v312 = 1;
          break;
        case 2u:
          void *v255 = *(void *)v256;
          char v312 = 2;
          break;
        case 3u:
          *(_OWORD *)int v255 = *(_OWORD *)v256;
          char v312 = 3;
          break;
        case 4u:
          void *v255 = *(void *)v256;
          unint64_t v313 = ((unint64_t)v255 + v26) & v44;
          unint64_t v314 = (unint64_t)&v256[v26] & v44;
          uint64_t v454 = v38 + v201 + 1;
          uint64_t v417 = v17;
          uint64_t v315 = v43;
          uint64_t v316 = v255;
          uint64_t v317 = v224;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v444 + 32))(v313, v314, v445);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v446 + 32))((v443 + v313) & v442, (v443 + v314) & v442, v447);
          uint64_t v224 = v317;
          int v255 = v316;
          uint64_t v202 = v454;
          uint64_t v43 = v315;
          uint64_t v17 = v417;
          char v312 = 4;
          break;
        default:
          unint64_t v306 = (v207 + v204) & v224;
          uint64_t v307 = v38 + v201 + 1;
          uint64_t v308 = v256;
          uint64_t v309 = v17;
          uint64_t v310 = v43;
          uint64_t v311 = v224;
          (*(void (**)(unint64_t, unsigned __int8 *))(v198 + 32))(v306, v308);
          uint64_t v224 = v311;
          uint64_t v202 = v307;
          uint64_t v43 = v310;
          uint64_t v17 = v309;
          char v312 = 0;
          break;
      }
      uint64_t v230 = v458;
      uint64_t v229 = v459;
      *((unsigned char *)v255 + v211) = v312;
      unint64_t v325 = (v215 + v204) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v326 = (v215 + v206) & 0xFFFFFFFFFFFFFFF8;
      long long v327 = *(_OWORD *)v326;
      long long v328 = *(_OWORD *)(v326 + 16);
      long long v329 = *(_OWORD *)(v326 + 48);
      *(_OWORD *)(v325 + 32) = *(_OWORD *)(v326 + 32);
      *(_OWORD *)(v325 + 48) = v329;
      *(_OWORD *)unint64_t v325 = v327;
      *(_OWORD *)(v325 + 16) = v328;
      long long v330 = *(_OWORD *)(v326 + 64);
      long long v331 = *(_OWORD *)(v326 + 80);
      long long v332 = *(_OWORD *)(v326 + 96);
      *(unsigned char *)(v325 + 112) = *(unsigned char *)(v326 + 112);
      *(_OWORD *)(v325 + 80) = v331;
      *(_OWORD *)(v325 + 96) = v332;
      *(_OWORD *)(v325 + 64) = v330;
      char v226 = 6;
      goto LABEL_164;
    case 7u:
      long long v261 = *(_OWORD *)(v206 + 16);
      *(_OWORD *)uint64_t v204 = *(_OWORD *)v206;
      *(_OWORD *)(((v202 + v19) & ~v201) + 0x10) = v261;
      uint64_t v262 = (void *)((v207 + v204) & v224);
      unint64_t v263 = (unsigned __int8 *)((v207 + v206) & v224);
      unsigned int v264 = v263[v211];
      unsigned int v265 = v264 - 5;
      if (v264 >= 5)
      {
        if (v211 <= 3) {
          uint64_t v266 = v211;
        }
        else {
          uint64_t v266 = 4;
        }
        switch(v266)
        {
          case 1:
            int v267 = *v263;
            goto LABEL_234;
          case 2:
            int v267 = *(unsigned __int16 *)v263;
            goto LABEL_234;
          case 3:
            int v267 = *(unsigned __int16 *)v263 | (*(unsigned __int8 *)(((v207 + v206) & v224) + 2) << 16);
            goto LABEL_234;
          case 4:
            int v267 = *(_DWORD *)v263;
LABEL_234:
            int v333 = (v267 | (v265 << (8 * v211))) + 5;
            unsigned int v264 = v267 + 5;
            if (v211 < 4) {
              unsigned int v264 = v333;
            }
            break;
          default:
            break;
        }
      }
      switch(v264)
      {
        case 1u:
          uint64_t v449 = *(void (**)(unint64_t, unint64_t))(v198 + 32);
          uint64_t v456 = v38 + v201 + 1;
          unint64_t v341 = (v207 + v204) & v224;
          unint64_t v342 = (v207 + v206) & v224;
          uint64_t v419 = v17;
          uint64_t v407 = v43;
          uint64_t v441 = v197;
          uint64_t v343 = (void *)v341;
          uint64_t v344 = v210;
          uint64_t v345 = v225;
          v449(v341, v342);
          unint64_t v346 = ((unint64_t)v343 + v344) & v345;
          unint64_t v347 = (unint64_t)&v263[v344];
          uint64_t v262 = v343;
          ((void (*)(unint64_t, unint64_t, uint64_t))v449)(v346, v347 & v345, v441);
          uint64_t v224 = ~v201;
          uint64_t v202 = v456;
          uint64_t v43 = v407;
          uint64_t v17 = v419;
          char v340 = 1;
          break;
        case 2u:
          *uint64_t v262 = *(void *)v263;
          char v340 = 2;
          break;
        case 3u:
          *(_OWORD *)uint64_t v262 = *(_OWORD *)v263;
          char v340 = 3;
          break;
        case 4u:
          *uint64_t v262 = *(void *)v263;
          unint64_t v348 = ((unint64_t)v262 + v26) & v44;
          unint64_t v349 = (unint64_t)&v263[v26] & v44;
          uint64_t v457 = v38 + v201 + 1;
          uint64_t v420 = v17;
          uint64_t v350 = v43;
          long long v351 = v262;
          uint64_t v352 = v224;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v444 + 32))(v348, v349, v445);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v446 + 32))((v443 + v348) & v442, (v443 + v349) & v442, v447);
          uint64_t v224 = v352;
          uint64_t v262 = v351;
          uint64_t v202 = v457;
          uint64_t v43 = v350;
          uint64_t v17 = v420;
          char v340 = 4;
          break;
        default:
          unint64_t v334 = (v207 + v204) & v224;
          uint64_t v335 = v38 + v201 + 1;
          uint64_t v336 = v263;
          uint64_t v337 = v17;
          uint64_t v338 = v43;
          uint64_t v339 = v224;
          (*(void (**)(unint64_t, unsigned __int8 *))(v198 + 32))(v334, v336);
          uint64_t v224 = v339;
          uint64_t v202 = v335;
          uint64_t v43 = v338;
          uint64_t v17 = v337;
          char v340 = 0;
          break;
      }
      uint64_t v230 = v458;
      uint64_t v229 = v459;
      *((unsigned char *)v262 + v211) = v340;
      unint64_t v353 = (v215 + v204) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v354 = (v215 + v206) & 0xFFFFFFFFFFFFFFF8;
      long long v355 = *(_OWORD *)v354;
      long long v356 = *(_OWORD *)(v354 + 16);
      long long v357 = *(_OWORD *)(v354 + 32);
      *(unsigned char *)(v353 + 48) = *(unsigned char *)(v354 + 48);
      *(_OWORD *)(v353 + 16) = v356;
      *(_OWORD *)(v353 + 32) = v357;
      *(_OWORD *)unint64_t v353 = v355;
      char v226 = 7;
      goto LABEL_164;
    default:
      char v226 = 0;
      uint64_t v227 = *(void *)v206;
      *(unsigned char *)(((v202 + v19) & ~v201) + 8) = *(unsigned char *)(v206 + 8);
      *(void *)uint64_t v204 = v227;
LABEL_163:
      uint64_t v230 = v458;
      uint64_t v229 = v459;
LABEL_164:
      *(unsigned char *)(v204 + v218) = v226;
      *(void *)(((v204 | 7) + v218 + 1) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v206 | 7) + v218 + 1) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v231 = ((v218 + ((v202 + (v17 & v43)) & v224) + 8) & 0xFFFFFFFFFFFFFFF8) + 8;
      uint64_t v232 = (void *)((v229 + v231 + 7) & 0xFFFFFFFFFFFFFFF8);
      int v233 = (void *)((v230 + v231 + 7) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v232 = *v233;
      uint64_t v234 = (void *)(((unint64_t)v232 + 15) & 0xFFFFFFFFFFFFFFF8);
      unsigned int v235 = (void *)(((unint64_t)v233 + 15) & 0xFFFFFFFFFFFFFFF8);
      void *v234 = *v235;
      unsigned int v236 = (void *)(((unint64_t)v234 + 15) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v237 = (void *)(((unint64_t)v235 + 15) & 0xFFFFFFFFFFFFFFF8);
      *unsigned int v236 = *v237;
      int v238 = (__n128 *)(((unint64_t)v237 + 15) & 0xFFFFFFFFFFFFFFF8);
      __n128 result = *v238;
      *(__n128 *)(((unint64_t)v236 + 15) & 0xFFFFFFFFFFFFFFF8) = *v238;
      return result;
  }
}

uint64_t sub_21F84B354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v347 = *(void *)(v3 + 24);
  uint64_t v8 = *(void *)(v347 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v338 = sub_21FA24310();
  uint64_t v10 = *(void *)(v338 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v340 = sub_21FA24320();
  uint64_t v12 = *(void *)(v340 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = v13 | v11;
  uint64_t v15 = v13 | v11 | v9;
  uint64_t v16 = v15 | 7;
  uint64_t v17 = (v15 | 7) + v7;
  uint64_t v354 = a2;
  uint64_t v355 = a1;
  uint64_t v18 = v17 + a1;
  uint64_t v19 = ~(v15 | 7);
  uint64_t v20 = (v17 + a1) & v19;
  uint64_t v353 = v17;
  uint64_t v21 = v17 + a2;
  uint64_t v22 = v21 & v19;
  uint64_t v356 = v19;
  uint64_t v339 = v12;
  uint64_t v336 = v13;
  uint64_t v337 = v10;
  if (v20 == (v21 & v19))
  {
    unint64_t v37 = *(void *)(v8 + 64);
    uint64_t v38 = *(void *)(v10 + 64);
    uint64_t v39 = *(void *)(v12 + 64);
    uint64_t v40 = (v15 + 32) & v19;
    if (((v37 + v9) & ~v9) + v37 > v37) {
      v37 += (v37 + v9) & ~v9;
    }
    uint64_t v333 = ~v11;
    uint64_t v334 = *(void *)(v10 + 64);
    uint64_t v332 = v11 + 8;
    uint64_t v335 = ~v13;
    unint64_t v26 = ((((v11 + 8) & ~v11) + v13 + v38) & ~v13) + v39;
    if (v37 <= v26) {
      unint64_t v37 = ((((v11 + 8) & ~v11) + v13 + v38) & ~v13) + v39;
    }
    if (v37 <= 0x10) {
      unint64_t v37 = 16;
    }
    unint64_t v41 = (v40 | 1) + v37;
    unint64_t v42 = ((v41 + v16) & v19) + v41;
    if (v41 > v42) {
      unint64_t v42 = v41;
    }
    unint64_t v43 = (v41 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v42 <= v43 + 113) {
      unint64_t v42 = v43 + 113;
    }
    unint64_t v44 = v43 + 49;
    if (v42 > v44) {
      unint64_t v44 = v42;
    }
    if (v44 <= 0x19) {
      uint64_t v32 = 25;
    }
    else {
      uint64_t v32 = v44;
    }
  }
  else
  {
    uint64_t v320 = v21;
    uint64_t v324 = v18;
    uint64_t v328 = v8;
    uint64_t v330 = v3;
    uint64_t v343 = v15 + 32;
    uint64_t v23 = (v15 + 32) & v19;
    unint64_t v24 = *(void *)(v8 + 64);
    uint64_t v315 = v24 + v9;
    unint64_t v25 = ((v24 + v9) & ~v9) + v24;
    if (v25 <= v24) {
      unint64_t v25 = *(void *)(v8 + 64);
    }
    uint64_t v333 = ~v11;
    uint64_t v332 = v11 + 8;
    uint64_t v334 = *(void *)(v10 + 64);
    uint64_t v335 = ~v13;
    unint64_t v26 = ((((v11 + 8) & ~v11) + v13 + v334) & ~v13) + *(void *)(v12 + 64);
    if (v25 <= v26) {
      unint64_t v25 = ((((v11 + 8) & ~v11) + v13 + v334) & ~v13) + *(void *)(v12 + 64);
    }
    if (v25 <= 0x10) {
      uint64_t v27 = 16;
    }
    else {
      uint64_t v27 = v25;
    }
    unint64_t v28 = (v23 | 1) + v27;
    unint64_t v29 = ((v28 + v16) & v19) + v28;
    if (v28 > v29) {
      unint64_t v29 = v28;
    }
    unint64_t v30 = (v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v29 <= v30 + 113) {
      unint64_t v29 = v30 + 113;
    }
    unint64_t v31 = v30 + 49;
    if (v29 <= v31) {
      unint64_t v29 = v31;
    }
    if (v29 <= 0x19) {
      uint64_t v32 = 25;
    }
    else {
      uint64_t v32 = v29;
    }
    unsigned int v33 = *(unsigned __int8 *)(v20 + v32);
    unsigned int v34 = v33 - 8;
    if (v33 >= 8)
    {
      if (v32 <= 3) {
        uint64_t v35 = v32;
      }
      else {
        uint64_t v35 = 4;
      }
      switch(v35)
      {
        case 1:
          int v36 = *(unsigned __int8 *)v20;
          if (v32 < 4) {
            goto LABEL_41;
          }
          goto LABEL_45;
        case 2:
          int v36 = *(unsigned __int16 *)v20;
          if (v32 < 4) {
            goto LABEL_41;
          }
          goto LABEL_45;
        case 3:
          int v36 = *(unsigned __int16 *)v20 | (*(unsigned __int8 *)(v20 + 2) << 16);
          if (v32 < 4) {
            goto LABEL_41;
          }
          goto LABEL_45;
        case 4:
          int v36 = *(_DWORD *)v20;
          if (v32 < 4) {
LABEL_41:
          }
            unsigned int v33 = (v36 | (v34 << (8 * v32))) + 8;
          else {
LABEL_45:
          }
            unsigned int v33 = v36 + 8;
          break;
        default:
          break;
      }
    }
    uint64_t v351 = v27;
    uint64_t v322 = ~v9;
    uint64_t v341 = v14;
    switch(v33)
    {
      case 2u:
LABEL_47:
        swift_release();
        goto LABEL_140;
      case 3u:
LABEL_48:
        swift_release();
        swift_release();
        goto LABEL_140;
      case 4u:
        sub_21F7656A8(*(void *)v20, *(void *)(v20 + 8), *(unsigned char *)(v20 + 16));
        swift_bridgeObjectRelease();
        char v45 = (unsigned __int8 *)((v343 + v20) & v19);
        unsigned int v46 = v45[v351];
        unsigned int v47 = v46 - 5;
        if (v46 >= 5)
        {
          if (v351 <= 3) {
            uint64_t v48 = v351;
          }
          else {
            uint64_t v48 = 4;
          }
          switch(v48)
          {
            case 1:
              int v49 = *v45;
              goto LABEL_76;
            case 2:
              int v49 = *(unsigned __int16 *)v45;
              goto LABEL_76;
            case 3:
              int v49 = *(unsigned __int16 *)v45 | (*(unsigned __int8 *)(((v343 + v20) & v19) + 2) << 16);
              goto LABEL_76;
            case 4:
              int v49 = *(_DWORD *)v45;
LABEL_76:
              if (v351 < 4) {
                unsigned int v46 = (v49 | (v47 << (8 * v351))) + 5;
              }
              else {
                unsigned int v46 = v49 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v46)
        {
          case 1u:
            uint64_t v310 = *(void (**)(unsigned __int8 *, uint64_t))(v328 + 8);
            v310(v45, v347);
            unsigned int v65 = &v45[v9 + v24];
            goto LABEL_138;
          case 2u:
            goto LABEL_47;
          case 3u:
            goto LABEL_48;
          case 4u:
            goto LABEL_139;
          default:
            goto LABEL_136;
        }
      case 5u:
        sub_21F7656A8(*(void *)v20, *(void *)(v20 + 8), *(unsigned char *)(v20 + 16));
        swift_bridgeObjectRelease();
        unsigned int v50 = (unsigned __int8 *)((v343 + v20) & v19);
        unsigned int v51 = v50[v351];
        unsigned int v52 = v51 - 5;
        if (v51 >= 5)
        {
          if (v351 <= 3) {
            uint64_t v53 = v351;
          }
          else {
            uint64_t v53 = 4;
          }
          switch(v53)
          {
            case 1:
              int v54 = *v50;
              goto LABEL_84;
            case 2:
              int v54 = *(unsigned __int16 *)v50;
              goto LABEL_84;
            case 3:
              int v54 = *(unsigned __int16 *)v50 | (*(unsigned __int8 *)(((v343 + v20) & v19) + 2) << 16);
              goto LABEL_84;
            case 4:
              int v54 = *(_DWORD *)v50;
LABEL_84:
              if (v351 < 4) {
                unsigned int v51 = (v54 | (v52 << (8 * v351))) + 5;
              }
              else {
                unsigned int v51 = v54 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v51)
        {
          case 1u:
            uint64_t v311 = *(void (**)(unsigned __int8 *, uint64_t))(v328 + 8);
            v311(v50, v347);
            v311((unsigned __int8 *)((unint64_t)&v50[v9 + v24] & v322), v347);
            break;
          case 2u:
            swift_release();
            break;
          case 3u:
            swift_release();
            swift_release();
            break;
          case 4u:
            swift_release();
            unint64_t v66 = (unint64_t)&v50[v332] & v333;
            (*(void (**)(unint64_t, uint64_t))(v337 + 8))(v66, v338);
            (*(void (**)(unint64_t, uint64_t))(v339 + 8))((v66 + v336 + v334) & v335, v340);
            break;
          default:
            (*(void (**)(uint64_t, uint64_t))(v328 + 8))((v343 + v20) & v19, v347);
            break;
        }
        uint64_t v67 = ((v324 | v16) + v28) & v19;
        sub_21F7656A8(*(void *)v67, *(void *)(v67 + 8), *(unsigned char *)(v67 + 0x10));
        swift_bridgeObjectRelease();
        char v45 = (unsigned __int8 *)((v343 + v67) & v19);
        unsigned int v68 = v45[v351];
        unsigned int v69 = v68 - 5;
        if (v68 >= 5)
        {
          if (v351 <= 3) {
            uint64_t v70 = v351;
          }
          else {
            uint64_t v70 = 4;
          }
          switch(v70)
          {
            case 1:
              int v71 = *v45;
              goto LABEL_132;
            case 2:
              int v71 = *(unsigned __int16 *)v45;
              goto LABEL_132;
            case 3:
              int v71 = *(unsigned __int16 *)v45 | (v45[2] << 16);
              goto LABEL_132;
            case 4:
              int v71 = *(_DWORD *)v45;
LABEL_132:
              if (v351 < 4) {
                unsigned int v68 = (v71 | (v69 << (8 * v351))) + 5;
              }
              else {
                unsigned int v68 = v71 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v68)
        {
          case 1u:
            uint64_t v310 = *(void (**)(unsigned __int8 *, uint64_t))(v328 + 8);
            v310(v45, v347);
            unsigned int v65 = &v45[v315];
LABEL_138:
            v310((unsigned __int8 *)((unint64_t)v65 & v322), v347);
            break;
          case 2u:
            goto LABEL_47;
          case 3u:
            goto LABEL_48;
          case 4u:
LABEL_139:
            swift_release();
            unint64_t v78 = (unint64_t)&v45[v332] & v333;
            (*(void (**)(unint64_t, uint64_t))(v337 + 8))(v78, v338);
            (*(void (**)(unint64_t, uint64_t))(v339 + 8))((v334 + v336 + v78) & v335, v340);
            break;
          default:
LABEL_136:
            (*(void (**)(unsigned __int8 *, uint64_t))(v328 + 8))(v45, v347);
            break;
        }
        goto LABEL_140;
      case 6u:
        sub_21F7656A8(*(void *)v20, *(void *)(v20 + 8), *(unsigned char *)(v20 + 16));
        swift_bridgeObjectRelease();
        int v55 = (unsigned __int8 *)((v343 + v20) & v19);
        unsigned int v56 = v55[v351];
        unsigned int v57 = v56 - 5;
        if (v56 >= 5)
        {
          if (v351 <= 3) {
            uint64_t v58 = v351;
          }
          else {
            uint64_t v58 = 4;
          }
          switch(v58)
          {
            case 1:
              int v59 = *v55;
              goto LABEL_102;
            case 2:
              int v59 = *(unsigned __int16 *)v55;
              goto LABEL_102;
            case 3:
              int v59 = *(unsigned __int16 *)v55 | (*(unsigned __int8 *)(((v343 + v20) & v19) + 2) << 16);
              goto LABEL_102;
            case 4:
              int v59 = *(_DWORD *)v55;
LABEL_102:
              if (v351 < 4) {
                unsigned int v56 = (v59 | (v57 << (8 * v351))) + 5;
              }
              else {
                unsigned int v56 = v59 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v56)
        {
          case 1u:
            char v312 = *(void (**)(unsigned __int8 *, uint64_t))(v328 + 8);
            v312(v55, v347);
            v312((unsigned __int8 *)((unint64_t)&v55[v9 + v24] & v322), v347);
            break;
          case 2u:
            swift_release();
            break;
          case 3u:
            swift_release();
            swift_release();
            break;
          case 4u:
            swift_release();
            unint64_t v72 = (unint64_t)&v55[v332] & v333;
            (*(void (**)(unint64_t, uint64_t))(v337 + 8))(v72, v338);
            (*(void (**)(unint64_t, uint64_t))(v339 + 8))((v72 + v336 + v334) & v335, v340);
            break;
          default:
            (*(void (**)(uint64_t, uint64_t))(v328 + 8))((v343 + v20) & v19, v347);
            break;
        }
        unint64_t v73 = ((v20 | 7) + v28) & 0xFFFFFFFFFFFFFFF8;
        int v74 = *(unsigned __int8 *)(v73 + 96);
        if (v74 != 255) {
          sub_21F82B5F8(*(void *)(v73 + 88), v74 & 1);
        }
        sub_21F82B5F8(*(void *)(v73 + 104), *(unsigned char *)(v73 + 112));
        goto LABEL_140;
      case 7u:
        sub_21F7656A8(*(void *)v20, *(void *)(v20 + 8), *(unsigned char *)(v20 + 16));
        swift_bridgeObjectRelease();
        unsigned int v60 = (unsigned __int8 *)((v343 + v20) & v19);
        unsigned int v61 = v60[v351];
        unsigned int v62 = v61 - 5;
        if (v61 >= 5)
        {
          if (v351 <= 3) {
            uint64_t v63 = v351;
          }
          else {
            uint64_t v63 = 4;
          }
          switch(v63)
          {
            case 1:
              int v64 = *v60;
              goto LABEL_118;
            case 2:
              int v64 = *(unsigned __int16 *)v60;
              goto LABEL_118;
            case 3:
              int v64 = *(unsigned __int16 *)v60 | (*(unsigned __int8 *)(((v343 + v20) & v19) + 2) << 16);
              goto LABEL_118;
            case 4:
              int v64 = *(_DWORD *)v60;
LABEL_118:
              if (v351 < 4) {
                unsigned int v61 = (v64 | (v62 << (8 * v351))) + 5;
              }
              else {
                unsigned int v61 = v64 + 5;
              }
              break;
            default:
              break;
          }
        }
        switch(v61)
        {
          case 1u:
            unint64_t v313 = *(void (**)(unsigned __int8 *, uint64_t))(v328 + 8);
            v313(v60, v347);
            v313((unsigned __int8 *)((unint64_t)&v60[v9 + v24] & v322), v347);
            break;
          case 2u:
            swift_release();
            break;
          case 3u:
            swift_release();
            swift_release();
            break;
          case 4u:
            swift_release();
            unint64_t v75 = (unint64_t)&v60[v332] & v333;
            (*(void (**)(unint64_t, uint64_t))(v337 + 8))(v75, v338);
            (*(void (**)(unint64_t, uint64_t))(v339 + 8))((v75 + v336 + v334) & v335, v340);
            break;
          default:
            (*(void (**)(uint64_t, uint64_t))(v328 + 8))((v343 + v20) & v19, v347);
            break;
        }
        unint64_t v76 = ((v20 | 7) + v28) & 0xFFFFFFFFFFFFFFF8;
        sub_21F770E38(*(void *)(v76 + 8), *(void *)(v76 + 16), *(unsigned char *)(v76 + 24));
        unsigned int v77 = *(unsigned __int8 *)(v76 + 48);
        uint64_t v14 = v341;
        if (v77 > 0xFB) {
          goto LABEL_141;
        }
        sub_21F770E38(*(void *)(v76 + 32), *(void *)(v76 + 40), v77);
LABEL_140:
        uint64_t v14 = v341;
LABEL_141:
        unsigned int v79 = *(unsigned __int8 *)(v22 + v32);
        unsigned int v80 = v79 - 8;
        if (v79 < 8)
        {
          uint64_t v82 = v351;
        }
        else
        {
          if (v32 <= 3) {
            uint64_t v81 = v32;
          }
          else {
            uint64_t v81 = 4;
          }
          uint64_t v82 = v351;
          switch(v81)
          {
            case 1:
              int v83 = *(unsigned __int8 *)v22;
              if (v32 < 4) {
                goto LABEL_150;
              }
              goto LABEL_154;
            case 2:
              int v83 = *(unsigned __int16 *)v22;
              if (v32 < 4) {
                goto LABEL_150;
              }
              goto LABEL_154;
            case 3:
              int v83 = *(unsigned __int16 *)v22 | (*(unsigned __int8 *)(v22 + 2) << 16);
              if (v32 < 4) {
                goto LABEL_150;
              }
              goto LABEL_154;
            case 4:
              int v83 = *(_DWORD *)v22;
              if (v32 < 4) {
LABEL_150:
              }
                unsigned int v79 = (v83 | (v80 << (8 * v32))) + 8;
              else {
LABEL_154:
              }
                unsigned int v79 = v83 + 8;
              break;
            default:
              break;
          }
        }
        switch(v79)
        {
          case 1u:
            long long v85 = *(_OWORD *)v22;
            *(_OWORD *)(v20 + 9) = *(_OWORD *)(v22 + 9);
            *(_OWORD *)uint64_t v20 = v85;
            char v86 = 1;
            goto LABEL_160;
          case 2u:
            *(void *)uint64_t v20 = *(void *)v22;
            char v86 = 2;
            goto LABEL_160;
          case 3u:
            *(_OWORD *)uint64_t v20 = *(_OWORD *)v22;
            char v86 = 3;
LABEL_160:
            *(unsigned char *)(v20 + v32) = v86;
            uint64_t v3 = v330;
            goto LABEL_256;
          case 4u:
            long long v87 = *(_OWORD *)(v22 + 16);
            *(_OWORD *)uint64_t v20 = *(_OWORD *)v22;
            *(_OWORD *)(v20 + 16) = v87;
            uint64_t v88 = (void *)((v343 + v20) & v19);
            char v89 = (unsigned __int8 *)((v343 + v22) & v19);
            unsigned int v90 = v89[v82];
            unsigned int v91 = v90 - 5;
            if (v90 >= 5)
            {
              if (v82 <= 3) {
                uint64_t v92 = v82;
              }
              else {
                uint64_t v92 = 4;
              }
              switch(v92)
              {
                case 1:
                  int v93 = *v89;
                  goto LABEL_188;
                case 2:
                  int v93 = *(unsigned __int16 *)v89;
                  goto LABEL_188;
                case 3:
                  int v93 = *(unsigned __int16 *)v89 | (v89[2] << 16);
                  goto LABEL_188;
                case 4:
                  int v93 = *(_DWORD *)v89;
LABEL_188:
                  if (v82 < 4) {
                    unsigned int v90 = (v93 | (v91 << (8 * v82))) + 5;
                  }
                  else {
                    unsigned int v90 = v93 + 5;
                  }
                  break;
                default:
                  break;
              }
            }
            switch(v90)
            {
              case 1u:
                uint64_t v116 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v328 + 32);
                v116(v88, v89, v347);
                v116((void *)(((unint64_t)v88 + v9 + v24) & v322), (unsigned __int8 *)((unint64_t)&v89[v9 + v24] & v322), v347);
                uint64_t v82 = v351;
                uint64_t v14 = v341;
                char v115 = 1;
                break;
              case 2u:
                *uint64_t v88 = *(void *)v89;
                char v115 = 2;
                break;
              case 3u:
                *(_OWORD *)uint64_t v88 = *(_OWORD *)v89;
                char v115 = 3;
                break;
              case 4u:
                *uint64_t v88 = *(void *)v89;
                unint64_t v117 = (unint64_t)&v89[v332] & v333;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 32))(((unint64_t)v88 + v332) & v333, v117, v338);
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v339 + 32))(((((unint64_t)v88 + v332) & v333) + v336 + v334) & v335, (v117 + v336 + v334) & v335, v340);
                uint64_t v82 = v351;
                uint64_t v14 = v341;
                char v115 = 4;
                break;
              default:
                (*(void (**)(void *, unsigned __int8 *, uint64_t))(v328 + 32))(v88, v89, v347);
                uint64_t v82 = v351;
                uint64_t v14 = v341;
                char v115 = 0;
                break;
            }
            uint64_t v3 = v330;
            *((unsigned char *)v88 + v82) = v115;
            char v118 = 4;
            goto LABEL_255;
          case 5u:
            long long v94 = *(_OWORD *)(v22 + 16);
            *(_OWORD *)uint64_t v20 = *(_OWORD *)v22;
            *(_OWORD *)(v20 + 16) = v94;
            unint64_t v95 = (void *)((v343 + v20) & v19);
            uint64_t v96 = (unsigned __int8 *)((v343 + v22) & v19);
            unsigned int v97 = v96[v82];
            unsigned int v98 = v97 - 5;
            if (v97 >= 5)
            {
              if (v82 <= 3) {
                uint64_t v99 = v82;
              }
              else {
                uint64_t v99 = 4;
              }
              switch(v99)
              {
                case 1:
                  int v100 = *v96;
                  goto LABEL_201;
                case 2:
                  int v100 = *(unsigned __int16 *)v96;
                  goto LABEL_201;
                case 3:
                  int v100 = *(unsigned __int16 *)v96 | (v96[2] << 16);
                  goto LABEL_201;
                case 4:
                  int v100 = *(_DWORD *)v96;
LABEL_201:
                  if (v82 < 4) {
                    unsigned int v97 = (v100 | (v98 << (8 * v82))) + 5;
                  }
                  else {
                    unsigned int v97 = v100 + 5;
                  }
                  break;
                default:
                  break;
              }
            }
            switch(v97)
            {
              case 1u:
                uint64_t v309 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v328 + 32);
                v309(v95, v96, v347);
                v309((void *)(((unint64_t)v95 + v9 + v24) & v322), (unsigned __int8 *)((unint64_t)&v96[v9 + v24] & v322), v347);
                uint64_t v82 = v351;
                char v119 = 1;
                break;
              case 2u:
                *unint64_t v95 = *(void *)v96;
                char v119 = 2;
                break;
              case 3u:
                *(_OWORD *)unint64_t v95 = *(_OWORD *)v96;
                char v119 = 3;
                break;
              case 4u:
                *unint64_t v95 = *(void *)v96;
                unint64_t v120 = (unint64_t)&v96[v332] & v333;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 32))(((unint64_t)v95 + v332) & v333, v120, v338);
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v339 + 32))(((((unint64_t)v95 + v332) & v333) + v336 + v334) & v335, (v120 + v336 + v334) & v335, v340);
                uint64_t v82 = v351;
                char v119 = 4;
                break;
              default:
                (*(void (**)(void *, unsigned __int8 *, uint64_t))(v328 + 32))(v95, v96, v347);
                uint64_t v82 = v351;
                char v119 = 0;
                break;
            }
            uint64_t v3 = v330;
            *((unsigned char *)v95 + v82) = v119;
            unint64_t v121 = (_OWORD *)(((v324 | v16) + v28) & v356);
            uint64_t v122 = (_OWORD *)(((v320 | v16) + v28) & v356);
            long long v123 = v122[1];
            *unint64_t v121 = *v122;
            v121[1] = v123;
            uint64_t v124 = (void *)(((unint64_t)v121 + v343) & v356);
            uint64_t v125 = (unsigned __int8 *)(((unint64_t)v122 + v343) & v356);
            unsigned int v126 = v125[v82];
            unsigned int v127 = v126 - 5;
            if (v126 >= 5)
            {
              if (v82 <= 3) {
                uint64_t v128 = v82;
              }
              else {
                uint64_t v128 = 4;
              }
              switch(v128)
              {
                case 1:
                  int v129 = *v125;
                  goto LABEL_245;
                case 2:
                  int v129 = *(unsigned __int16 *)v125;
                  goto LABEL_245;
                case 3:
                  int v129 = *(unsigned __int16 *)v125 | (v125[2] << 16);
                  goto LABEL_245;
                case 4:
                  int v129 = *(_DWORD *)v125;
LABEL_245:
                  if (v82 < 4) {
                    unsigned int v126 = (v129 | (v127 << (8 * v82))) + 5;
                  }
                  else {
                    unsigned int v126 = v129 + 5;
                  }
                  break;
                default:
                  break;
              }
            }
            switch(v126)
            {
              case 1u:
                long long v148 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v328 + 32);
                v148(v124, v125, v347);
                v148((void *)(((unint64_t)v124 + v315) & v322), (unsigned __int8 *)((unint64_t)&v125[v315] & v322), v347);
                uint64_t v82 = v351;
                char v147 = 1;
                break;
              case 2u:
                *uint64_t v124 = *(void *)v125;
                char v147 = 2;
                break;
              case 3u:
                *(_OWORD *)uint64_t v124 = *(_OWORD *)v125;
                char v147 = 3;
                break;
              case 4u:
                *uint64_t v124 = *(void *)v125;
                unint64_t v149 = (unint64_t)&v125[v332] & v333;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 32))(((unint64_t)v124 + v332) & v333, v149, v338);
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v339 + 32))((v334 + v336 + (((unint64_t)v124 + v332) & v333)) & v335, (v334 + v336 + v149) & v335, v340);
                uint64_t v82 = v351;
                char v147 = 4;
                break;
              default:
                (*(void (**)(void *, unsigned __int8 *, uint64_t))(v328 + 32))(v124, v125, v347);
                uint64_t v82 = v351;
                char v147 = 0;
                break;
            }
            uint64_t v14 = v341;
            *((unsigned char *)v124 + v82) = v147;
            char v118 = 5;
            goto LABEL_255;
          case 6u:
            long long v101 = *(_OWORD *)(v22 + 16);
            *(_OWORD *)uint64_t v20 = *(_OWORD *)v22;
            *(_OWORD *)(v20 + 16) = v101;
            uint64_t v102 = (void *)((v343 + v20) & v19);
            uint64_t v103 = (unsigned __int8 *)((v343 + v22) & v19);
            unsigned int v104 = v103[v82];
            unsigned int v105 = v104 - 5;
            if (v104 >= 5)
            {
              if (v82 <= 3) {
                uint64_t v106 = v82;
              }
              else {
                uint64_t v106 = 4;
              }
              switch(v106)
              {
                case 1:
                  int v107 = *v103;
                  goto LABEL_219;
                case 2:
                  int v107 = *(unsigned __int16 *)v103;
                  goto LABEL_219;
                case 3:
                  int v107 = *(unsigned __int16 *)v103 | (v103[2] << 16);
                  goto LABEL_219;
                case 4:
                  int v107 = *(_DWORD *)v103;
LABEL_219:
                  if (v82 < 4) {
                    unsigned int v104 = (v107 | (v105 << (8 * v82))) + 5;
                  }
                  else {
                    unsigned int v104 = v107 + 5;
                  }
                  break;
                default:
                  break;
              }
            }
            switch(v104)
            {
              case 1u:
                uint64_t v344 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v328 + 32);
                v344(v102, v103, v347);
                v344((void *)(((unint64_t)v102 + v9 + v24) & v322), (unsigned __int8 *)((unint64_t)&v103[v9 + v24] & v322), v347);
                uint64_t v82 = v351;
                uint64_t v14 = v341;
                char v130 = 1;
                break;
              case 2u:
                *uint64_t v102 = *(void *)v103;
                char v130 = 2;
                break;
              case 3u:
                *(_OWORD *)uint64_t v102 = *(_OWORD *)v103;
                char v130 = 3;
                break;
              case 4u:
                *uint64_t v102 = *(void *)v103;
                unint64_t v131 = (unint64_t)&v103[v332] & v333;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 32))(((unint64_t)v102 + v332) & v333, v131, v338);
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v339 + 32))(((((unint64_t)v102 + v332) & v333) + v336 + v334) & v335, (v131 + v336 + v334) & v335, v340);
                uint64_t v82 = v351;
                uint64_t v14 = v341;
                char v130 = 4;
                break;
              default:
                (*(void (**)(void *, unsigned __int8 *, uint64_t))(v328 + 32))(v102, v103, v347);
                uint64_t v82 = v351;
                uint64_t v14 = v341;
                char v130 = 0;
                break;
            }
            uint64_t v3 = v330;
            *((unsigned char *)v102 + v82) = v130;
            unint64_t v132 = ((v20 | 7) + v28) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v133 = ((v22 | 7) + v28) & 0xFFFFFFFFFFFFFFF8;
            long long v134 = *(_OWORD *)v133;
            long long v135 = *(_OWORD *)(v133 + 16);
            long long v136 = *(_OWORD *)(v133 + 48);
            *(_OWORD *)(v132 + 32) = *(_OWORD *)(v133 + 32);
            *(_OWORD *)(v132 + 48) = v136;
            *(_OWORD *)unint64_t v132 = v134;
            *(_OWORD *)(v132 + 16) = v135;
            long long v137 = *(_OWORD *)(v133 + 64);
            long long v138 = *(_OWORD *)(v133 + 80);
            long long v139 = *(_OWORD *)(v133 + 96);
            *(unsigned char *)(v132 + 112) = *(unsigned char *)(v133 + 112);
            *(_OWORD *)(v132 + 80) = v138;
            *(_OWORD *)(v132 + 96) = v139;
            *(_OWORD *)(v132 + 64) = v137;
            char v118 = 6;
            goto LABEL_255;
          case 7u:
            long long v108 = *(_OWORD *)(v22 + 16);
            *(_OWORD *)uint64_t v20 = *(_OWORD *)v22;
            *(_OWORD *)(v20 + 16) = v108;
            uint64_t v109 = (void *)((v343 + v20) & v19);
            uint64_t v110 = (unsigned __int8 *)((v343 + v22) & v19);
            unsigned int v111 = v110[v82];
            unsigned int v112 = v111 - 5;
            if (v111 >= 5)
            {
              if (v82 <= 3) {
                uint64_t v113 = v82;
              }
              else {
                uint64_t v113 = 4;
              }
              switch(v113)
              {
                case 1:
                  int v114 = *v110;
                  goto LABEL_232;
                case 2:
                  int v114 = *(unsigned __int16 *)v110;
                  goto LABEL_232;
                case 3:
                  int v114 = *(unsigned __int16 *)v110 | (v110[2] << 16);
                  goto LABEL_232;
                case 4:
                  int v114 = *(_DWORD *)v110;
LABEL_232:
                  if (v82 < 4) {
                    unsigned int v111 = (v114 | (v112 << (8 * v82))) + 5;
                  }
                  else {
                    unsigned int v111 = v114 + 5;
                  }
                  break;
                default:
                  break;
              }
            }
            switch(v111)
            {
              case 1u:
                uint64_t v345 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v328 + 32);
                v345(v109, v110, v347);
                v345((void *)(((unint64_t)v109 + v9 + v24) & v322), (unsigned __int8 *)((unint64_t)&v110[v9 + v24] & v322), v347);
                uint64_t v82 = v351;
                uint64_t v14 = v341;
                char v140 = 1;
                break;
              case 2u:
                *uint64_t v109 = *(void *)v110;
                char v140 = 2;
                break;
              case 3u:
                *(_OWORD *)uint64_t v109 = *(_OWORD *)v110;
                char v140 = 3;
                break;
              case 4u:
                *uint64_t v109 = *(void *)v110;
                unint64_t v141 = (unint64_t)&v110[v332] & v333;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 32))(((unint64_t)v109 + v332) & v333, v141, v338);
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v339 + 32))(((((unint64_t)v109 + v332) & v333) + v336 + v334) & v335, (v141 + v336 + v334) & v335, v340);
                uint64_t v82 = v351;
                uint64_t v14 = v341;
                char v140 = 4;
                break;
              default:
                (*(void (**)(void *, unsigned __int8 *, uint64_t))(v328 + 32))(v109, v110, v347);
                uint64_t v82 = v351;
                uint64_t v14 = v341;
                char v140 = 0;
                break;
            }
            uint64_t v3 = v330;
            *((unsigned char *)v109 + v82) = v140;
            unint64_t v142 = ((v20 | 7) + v28) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v143 = ((v22 | 7) + v28) & 0xFFFFFFFFFFFFFFF8;
            long long v144 = *(_OWORD *)v143;
            long long v145 = *(_OWORD *)(v143 + 16);
            long long v146 = *(_OWORD *)(v143 + 32);
            *(unsigned char *)(v142 + 48) = *(unsigned char *)(v143 + 48);
            *(_OWORD *)(v142 + 16) = v145;
            *(_OWORD *)(v142 + 32) = v146;
            *(_OWORD *)unint64_t v142 = v144;
            char v118 = 7;
LABEL_255:
            *(unsigned char *)(v20 + v32) = v118;
            break;
          default:
            uint64_t v84 = *(void *)v22;
            *(unsigned char *)(v20 + 8) = *(unsigned char *)(v22 + 8);
            *(void *)uint64_t v20 = v84;
            *(unsigned char *)(v20 + v32) = 0;
            uint64_t v3 = v330;
            break;
        }
        break;
      default:
        goto LABEL_141;
    }
  }
LABEL_256:
  uint64_t v150 = *(void *)(v3 + 32);
  uint64_t v151 = *(void *)(v150 - 8);
  uint64_t v152 = *(unsigned __int8 *)(v151 + 80);
  uint64_t v153 = v14 | v152;
  uint64_t v154 = v14 | v152 | 7;
  uint64_t v155 = v32 + v154 + 1;
  uint64_t v156 = v155 + v20;
  uint64_t v157 = ~v154;
  uint64_t v158 = v156 & ~v154;
  unint64_t v159 = (unsigned __int8 *)(v155 + v22);
  unint64_t v160 = (v155 + v22) & ~v154;
  uint64_t v161 = ~v152;
  if (v158 == v160)
  {
    unint64_t v175 = *(void *)(v151 + 64);
    uint64_t v176 = (v153 + 32) & v157;
    if (((v175 + v152) & v161) + v175 > v175) {
      v175 += (v175 + v152) & v161;
    }
    if (v175 <= v26) {
      unint64_t v175 = v26;
    }
    if (v175 <= 0x10) {
      unint64_t v175 = 16;
    }
    unint64_t v177 = (v176 | 1) + v175;
    unint64_t v178 = ((v177 + v154) & v157) + v177;
    if (v177 > v178) {
      unint64_t v178 = v177;
    }
    unint64_t v179 = (v177 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v178 <= v179 + 113) {
      unint64_t v178 = v179 + 113;
    }
    unint64_t v180 = v179 + 49;
    if (v178 > v180) {
      unint64_t v180 = v178;
    }
    if (v180 <= 0x19) {
      uint64_t v170 = 25;
    }
    else {
      uint64_t v170 = v180;
    }
    uint64_t v181 = v356;
  }
  else
  {
    unint64_t v323 = v159;
    uint64_t v331 = v156;
    uint64_t v346 = v150;
    uint64_t v348 = v153 + 32;
    uint64_t v162 = (v153 + 32) & v157;
    uint64_t v342 = *(void *)(v150 - 8);
    unint64_t v163 = *(void *)(v151 + 64);
    uint64_t v329 = ~v152;
    uint64_t v321 = v163 + v152;
    unint64_t v164 = ((v163 + v152) & v161) + v163;
    if (v164 <= v163) {
      unint64_t v164 = *(void *)(v151 + 64);
    }
    if (v164 <= v26) {
      unint64_t v164 = v26;
    }
    if (v164 <= 0x10) {
      uint64_t v165 = 16;
    }
    else {
      uint64_t v165 = v164;
    }
    unint64_t v166 = (v162 | 1) + v165;
    unint64_t v167 = ((v166 + v154) & v157) + v166;
    if (v166 > v167) {
      unint64_t v167 = v166;
    }
    unint64_t v168 = (v166 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v167 <= v168 + 113) {
      unint64_t v167 = v168 + 113;
    }
    unint64_t v169 = v168 + 49;
    if (v167 <= v169) {
      unint64_t v167 = v169;
    }
    if (v167 <= 0x19) {
      uint64_t v170 = 25;
    }
    else {
      uint64_t v170 = v167;
    }
    unsigned int v171 = *(unsigned __int8 *)(v158 + v170);
    unsigned int v172 = v171 - 8;
    if (v171 >= 8)
    {
      if (v170 <= 3) {
        uint64_t v173 = v170;
      }
      else {
        uint64_t v173 = 4;
      }
      switch(v173)
      {
        case 1:
          int v174 = *(unsigned __int8 *)v158;
          goto LABEL_298;
        case 2:
          int v174 = *(unsigned __int16 *)v158;
          goto LABEL_298;
        case 3:
          int v174 = *(unsigned __int16 *)v158 | (*(unsigned __int8 *)(v158 + 2) << 16);
          goto LABEL_298;
        case 4:
          int v174 = *(_DWORD *)v158;
LABEL_298:
          int v182 = (v174 | (v172 << (8 * v170))) + 8;
          unsigned int v171 = v174 + 8;
          if (v170 < 4) {
            unsigned int v171 = v182;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v352 = v165;
    switch(v171)
    {
      case 2u:
LABEL_301:
        swift_release();
        break;
      case 3u:
LABEL_302:
        swift_release();
        swift_release();
        break;
      case 4u:
        sub_21F7656A8(*(void *)v158, *(void *)(v158 + 8), *(unsigned char *)(v158 + 16));
        swift_bridgeObjectRelease();
        uint64_t v183 = (unsigned __int8 *)((v348 + v158) & v157);
        unsigned int v184 = v183[v352];
        unsigned int v185 = v184 - 5;
        if (v184 >= 5)
        {
          if (v352 <= 3) {
            uint64_t v186 = v352;
          }
          else {
            uint64_t v186 = 4;
          }
          switch(v186)
          {
            case 1:
              int v187 = *v183;
              goto LABEL_330;
            case 2:
              int v187 = *(unsigned __int16 *)v183;
              goto LABEL_330;
            case 3:
              int v187 = *(unsigned __int16 *)v183 | (*(unsigned __int8 *)(((v348 + v158) & v157) + 2) << 16);
              goto LABEL_330;
            case 4:
              int v187 = *(_DWORD *)v183;
LABEL_330:
              int v203 = (v187 | (v185 << (8 * v352))) + 5;
              unsigned int v184 = v187 + 5;
              if (v352 < 4) {
                unsigned int v184 = v203;
              }
              break;
            default:
              break;
          }
        }
        switch(v184)
        {
          case 1u:
            uint64_t v325 = v155;
            uint64_t v316 = *(void (**)(uint64_t, uint64_t))(v342 + 8);
            v316((v348 + v158) & v157, v346);
            uint64_t v204 = &v183[v152 + v163];
            goto LABEL_388;
          case 2u:
            goto LABEL_301;
          case 3u:
            goto LABEL_302;
          case 4u:
            goto LABEL_386;
          default:
            goto LABEL_385;
        }
      case 5u:
        sub_21F7656A8(*(void *)v158, *(void *)(v158 + 8), *(unsigned char *)(v158 + 16));
        swift_bridgeObjectRelease();
        uint64_t v188 = (unsigned __int8 *)((v348 + v158) & v157);
        unsigned int v189 = v188[v352];
        unsigned int v190 = v189 - 5;
        if (v189 >= 5)
        {
          if (v352 <= 3) {
            uint64_t v191 = v352;
          }
          else {
            uint64_t v191 = 4;
          }
          switch(v191)
          {
            case 1:
              int v192 = *v188;
              goto LABEL_337;
            case 2:
              int v192 = *(unsigned __int16 *)v188;
              goto LABEL_337;
            case 3:
              int v192 = *(unsigned __int16 *)v188 | (*(unsigned __int8 *)(((v348 + v158) & v157) + 2) << 16);
              goto LABEL_337;
            case 4:
              int v192 = *(_DWORD *)v188;
LABEL_337:
              int v205 = (v192 | (v190 << (8 * v352))) + 5;
              unsigned int v189 = v192 + 5;
              if (v352 < 4) {
                unsigned int v189 = v205;
              }
              break;
            default:
              break;
          }
        }
        switch(v189)
        {
          case 1u:
            uint64_t v317 = *(void (**)(uint64_t, uint64_t))(v342 + 8);
            v317((v348 + v158) & v157, v346);
            v317((unint64_t)&v188[v152 + v163] & v329, v346);
            break;
          case 2u:
            swift_release();
            break;
          case 3u:
            swift_release();
            swift_release();
            break;
          case 4u:
            swift_release();
            unint64_t v206 = (unint64_t)&v188[v332] & v333;
            (*(void (**)(unint64_t, uint64_t))(v337 + 8))(v206, v338);
            (*(void (**)(unint64_t, uint64_t))(v339 + 8))((v334 + v336 + v206) & v335, v340);
            break;
          default:
            (*(void (**)(uint64_t, uint64_t))(v342 + 8))((v348 + v158) & v157, v346);
            break;
        }
        uint64_t v207 = ((v331 | v154) + v166) & v157;
        sub_21F7656A8(*(void *)v207, *(void *)(v207 + 8), *(unsigned char *)(v207 + 0x10));
        swift_bridgeObjectRelease();
        uint64_t v183 = (unsigned __int8 *)((v348 + v207) & v157);
        unsigned int v208 = v183[v352];
        unsigned int v209 = v208 - 5;
        if (v208 >= 5)
        {
          if (v352 <= 3) {
            uint64_t v210 = v352;
          }
          else {
            uint64_t v210 = 4;
          }
          switch(v210)
          {
            case 1:
              int v211 = *v183;
              goto LABEL_382;
            case 2:
              int v211 = *(unsigned __int16 *)v183;
              goto LABEL_382;
            case 3:
              int v211 = *(unsigned __int16 *)v183 | (v183[2] << 16);
              goto LABEL_382;
            case 4:
              int v211 = *(_DWORD *)v183;
LABEL_382:
              int v220 = (v211 | (v209 << (8 * v352))) + 5;
              unsigned int v208 = v211 + 5;
              if (v352 < 4) {
                unsigned int v208 = v220;
              }
              break;
            default:
              break;
          }
        }
        switch(v208)
        {
          case 1u:
            uint64_t v325 = v155;
            uint64_t v316 = *(void (**)(uint64_t, uint64_t))(v342 + 8);
            v316((uint64_t)v183, v346);
            uint64_t v204 = &v183[v321];
LABEL_388:
            v316((unint64_t)v204 & v329, v346);
            uint64_t v155 = v325;
            break;
          case 2u:
            goto LABEL_301;
          case 3u:
            goto LABEL_302;
          case 4u:
LABEL_386:
            swift_release();
            unint64_t v221 = (unint64_t)&v183[v332] & v333;
            (*(void (**)(unint64_t, uint64_t))(v337 + 8))(v221, v338);
            (*(void (**)(unint64_t, uint64_t))(v339 + 8))((v334 + v336 + v221) & v335, v340);
            break;
          default:
LABEL_385:
            (*(void (**)(unsigned __int8 *, uint64_t))(v342 + 8))(v183, v346);
            break;
        }
        break;
      case 6u:
        sub_21F7656A8(*(void *)v158, *(void *)(v158 + 8), *(unsigned char *)(v158 + 16));
        swift_bridgeObjectRelease();
        uint64_t v193 = (unsigned __int8 *)((v348 + v158) & v157);
        unsigned int v194 = v193[v352];
        unsigned int v195 = v194 - 5;
        if (v194 >= 5)
        {
          if (v352 <= 3) {
            uint64_t v196 = v352;
          }
          else {
            uint64_t v196 = 4;
          }
          switch(v196)
          {
            case 1:
              int v197 = *v193;
              goto LABEL_354;
            case 2:
              int v197 = *(unsigned __int16 *)v193;
              goto LABEL_354;
            case 3:
              int v197 = *(unsigned __int16 *)v193 | (*(unsigned __int8 *)(((v348 + v158) & v157) + 2) << 16);
              goto LABEL_354;
            case 4:
              int v197 = *(_DWORD *)v193;
LABEL_354:
              int v212 = (v197 | (v195 << (8 * v352))) + 5;
              unsigned int v194 = v197 + 5;
              if (v352 < 4) {
                unsigned int v194 = v212;
              }
              break;
            default:
              break;
          }
        }
        switch(v194)
        {
          case 1u:
            unint64_t v318 = *(void (**)(uint64_t, uint64_t))(v342 + 8);
            v318((v348 + v158) & v157, v346);
            v318((unint64_t)&v193[v152 + v163] & v329, v346);
            break;
          case 2u:
            swift_release();
            break;
          case 3u:
            swift_release();
            swift_release();
            break;
          case 4u:
            swift_release();
            unint64_t v213 = (unint64_t)&v193[v332] & v333;
            (*(void (**)(unint64_t, uint64_t))(v337 + 8))(v213, v338);
            (*(void (**)(unint64_t, uint64_t))(v339 + 8))((v334 + v336 + v213) & v335, v340);
            break;
          default:
            (*(void (**)(uint64_t, uint64_t))(v342 + 8))((v348 + v158) & v157, v346);
            break;
        }
        unint64_t v214 = ((v158 | 7) + v166) & 0xFFFFFFFFFFFFFFF8;
        int v215 = *(unsigned __int8 *)(v214 + 96);
        if (v215 != 255) {
          sub_21F82B5F8(*(void *)(v214 + 88), v215 & 1);
        }
        sub_21F82B5F8(*(void *)(v214 + 104), *(unsigned char *)(v214 + 112));
        break;
      case 7u:
        sub_21F7656A8(*(void *)v158, *(void *)(v158 + 8), *(unsigned char *)(v158 + 16));
        swift_bridgeObjectRelease();
        uint64_t v198 = (unsigned __int8 *)((v348 + v158) & v157);
        unsigned int v199 = v198[v352];
        unsigned int v200 = v199 - 5;
        if (v199 >= 5)
        {
          if (v352 <= 3) {
            uint64_t v201 = v352;
          }
          else {
            uint64_t v201 = 4;
          }
          switch(v201)
          {
            case 1:
              int v202 = *v198;
              goto LABEL_369;
            case 2:
              int v202 = *(unsigned __int16 *)v198;
              goto LABEL_369;
            case 3:
              int v202 = *(unsigned __int16 *)v198 | (*(unsigned __int8 *)(((v348 + v158) & v157) + 2) << 16);
              goto LABEL_369;
            case 4:
              int v202 = *(_DWORD *)v198;
LABEL_369:
              int v216 = (v202 | (v200 << (8 * v352))) + 5;
              unsigned int v199 = v202 + 5;
              if (v352 < 4) {
                unsigned int v199 = v216;
              }
              break;
            default:
              break;
          }
        }
        switch(v199)
        {
          case 1u:
            unint64_t v319 = *(void (**)(uint64_t, uint64_t))(v342 + 8);
            v319((v348 + v158) & v157, v346);
            v319((unint64_t)&v198[v152 + v163] & v329, v346);
            break;
          case 2u:
            swift_release();
            break;
          case 3u:
            swift_release();
            swift_release();
            break;
          case 4u:
            swift_release();
            unint64_t v217 = (unint64_t)&v198[v332] & v333;
            (*(void (**)(unint64_t, uint64_t))(v337 + 8))(v217, v338);
            (*(void (**)(unint64_t, uint64_t))(v339 + 8))((v334 + v336 + v217) & v335, v340);
            break;
          default:
            (*(void (**)(uint64_t, uint64_t))(v342 + 8))((v348 + v158) & v157, v346);
            break;
        }
        unint64_t v218 = ((v158 | 7) + v166) & 0xFFFFFFFFFFFFFFF8;
        sub_21F770E38(*(void *)(v218 + 8), *(void *)(v218 + 16), *(unsigned char *)(v218 + 24));
        unsigned int v219 = *(unsigned __int8 *)(v218 + 48);
        if (v219 <= 0xFB) {
          sub_21F770E38(*(void *)(v218 + 32), *(void *)(v218 + 40), v219);
        }
        break;
      default:
        break;
    }
    unsigned int v222 = *(unsigned __int8 *)(v160 + v170);
    unsigned int v223 = v222 - 8;
    if (v222 < 8)
    {
      uint64_t v225 = v352;
    }
    else
    {
      if (v170 <= 3) {
        uint64_t v224 = v170;
      }
      else {
        uint64_t v224 = 4;
      }
      uint64_t v225 = v352;
      switch(v224)
      {
        case 1:
          int v226 = *(unsigned __int8 *)v160;
          goto LABEL_399;
        case 2:
          int v226 = *(unsigned __int16 *)v160;
          goto LABEL_399;
        case 3:
          int v226 = *(unsigned __int16 *)v160 | (*(unsigned __int8 *)(v160 + 2) << 16);
          goto LABEL_399;
        case 4:
          int v226 = *(_DWORD *)v160;
LABEL_399:
          int v227 = (v226 | (v223 << (8 * v170))) + 8;
          unsigned int v222 = v226 + 8;
          if (v170 < 4) {
            unsigned int v222 = v227;
          }
          break;
        default:
          break;
      }
    }
    switch(v222)
    {
      case 1u:
        long long v229 = *(_OWORD *)v160;
        *(_OWORD *)(v158 + 9) = *(_OWORD *)(v160 + 9);
        *(_OWORD *)uint64_t v158 = v229;
        char v230 = 1;
        goto LABEL_406;
      case 2u:
        *(void *)uint64_t v158 = *(void *)v160;
        char v230 = 2;
        goto LABEL_406;
      case 3u:
        *(_OWORD *)uint64_t v158 = *(_OWORD *)v160;
        char v230 = 3;
LABEL_406:
        *(unsigned char *)(v158 + v170) = v230;
        uint64_t v181 = v356;
        break;
      case 4u:
        uint64_t v326 = v155;
        long long v231 = *(_OWORD *)(v160 + 16);
        *(_OWORD *)uint64_t v158 = *(_OWORD *)v160;
        *(_OWORD *)(v158 + 16) = v231;
        uint64_t v232 = (void *)((v348 + v158) & v157);
        int v233 = (unsigned __int8 *)((v348 + v160) & v157);
        unsigned int v234 = v233[v225];
        unsigned int v235 = v234 - 5;
        if (v234 >= 5)
        {
          if (v225 <= 3) {
            uint64_t v236 = v225;
          }
          else {
            uint64_t v236 = 4;
          }
          switch(v236)
          {
            case 1:
              int v237 = *v233;
              goto LABEL_434;
            case 2:
              int v237 = *(unsigned __int16 *)v233;
              goto LABEL_434;
            case 3:
              int v237 = *(unsigned __int16 *)v233 | (*(unsigned __int8 *)(((v348 + v160) & v157) + 2) << 16);
              goto LABEL_434;
            case 4:
              int v237 = *(_DWORD *)v233;
LABEL_434:
              int v259 = (v237 | (v235 << (8 * v225))) + 5;
              unsigned int v234 = v237 + 5;
              if (v225 < 4) {
                unsigned int v234 = v259;
              }
              break;
            default:
              break;
          }
        }
        switch(v234)
        {
          case 1u:
            long long v261 = *(void (**)(uint64_t, unint64_t, uint64_t))(v342 + 32);
            v261((v348 + v158) & v157, (v348 + v160) & v157, v346);
            v261(((unint64_t)v232 + v152 + v163) & v329, (unint64_t)&v233[v152 + v163] & v329, v346);
            uint64_t v225 = v352;
            char v260 = 1;
            break;
          case 2u:
            *uint64_t v232 = *(void *)v233;
            char v260 = 2;
            break;
          case 3u:
            *(_OWORD *)uint64_t v232 = *(_OWORD *)v233;
            char v260 = 3;
            break;
          case 4u:
            *uint64_t v232 = *(void *)v233;
            unint64_t v262 = (unint64_t)&v233[v332] & v333;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 32))(((unint64_t)v232 + v332) & v333, v262, v338);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v339 + 32))((v334 + v336 + (((unint64_t)v232 + v332) & v333)) & v335, (v334 + v336 + v262) & v335, v340);
            uint64_t v225 = v352;
            char v260 = 4;
            break;
          default:
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v342 + 32))((v348 + v158) & v157, (v348 + v160) & v157, v346);
            uint64_t v225 = v352;
            char v260 = 0;
            break;
        }
        uint64_t v181 = v356;
        *((unsigned char *)v232 + v225) = v260;
        char v263 = 4;
        goto LABEL_497;
      case 5u:
        uint64_t v326 = v155;
        long long v238 = *(_OWORD *)(v160 + 16);
        *(_OWORD *)uint64_t v158 = *(_OWORD *)v160;
        *(_OWORD *)(v158 + 16) = v238;
        int v239 = (void *)((v348 + v158) & v157);
        long long v240 = (unsigned __int8 *)((v348 + v160) & v157);
        unsigned int v241 = v240[v225];
        unsigned int v242 = v241 - 5;
        if (v241 >= 5)
        {
          if (v225 <= 3) {
            uint64_t v243 = v225;
          }
          else {
            uint64_t v243 = 4;
          }
          switch(v243)
          {
            case 1:
              int v244 = *v240;
              goto LABEL_446;
            case 2:
              int v244 = *(unsigned __int16 *)v240;
              goto LABEL_446;
            case 3:
              int v244 = *(unsigned __int16 *)v240 | (*(unsigned __int8 *)(((v348 + v160) & v157) + 2) << 16);
              goto LABEL_446;
            case 4:
              int v244 = *(_DWORD *)v240;
LABEL_446:
              int v264 = (v244 | (v242 << (8 * v225))) + 5;
              unsigned int v241 = v244 + 5;
              if (v225 < 4) {
                unsigned int v241 = v264;
              }
              break;
            default:
              break;
          }
        }
        switch(v241)
        {
          case 1u:
            unint64_t v314 = *(void (**)(uint64_t, unint64_t, uint64_t))(v342 + 32);
            v314((v348 + v158) & v157, (v348 + v160) & v157, v346);
            v314((((v348 + v158) & v157) + v152 + v163) & v329, (unint64_t)&v240[v152 + v163] & v329, v346);
            int v239 = (void *)((v348 + v158) & v157);
            uint64_t v225 = v352;
            char v265 = 1;
            break;
          case 2u:
            *int v239 = *(void *)v240;
            char v265 = 2;
            break;
          case 3u:
            *(_OWORD *)int v239 = *(_OWORD *)v240;
            char v265 = 3;
            break;
          case 4u:
            *int v239 = *(void *)v240;
            unint64_t v266 = (unint64_t)&v240[v332] & v333;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 32))(((unint64_t)v239 + v332) & v333, v266, v338);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v339 + 32))((v334 + v336 + (((unint64_t)v239 + v332) & v333)) & v335, (v334 + v336 + v266) & v335, v340);
            uint64_t v225 = v352;
            char v265 = 4;
            break;
          default:
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v342 + 32))((v348 + v158) & v157, (v348 + v160) & v157, v346);
            uint64_t v225 = v352;
            char v265 = 0;
            break;
        }
        uint64_t v181 = v356;
        *((unsigned char *)v239 + v225) = v265;
        int v267 = (_OWORD *)(((v331 | v154) + v166) & v157);
        int v268 = (_OWORD *)((((unint64_t)v323 | v154) + v166) & v157);
        long long v269 = v268[1];
        *int v267 = *v268;
        v267[1] = v269;
        uint64_t v270 = (void *)(((unint64_t)v267 + v348) & v157);
        unint64_t v271 = (unsigned __int8 *)(((unint64_t)v268 + v348) & v157);
        unsigned int v272 = v271[v225];
        unsigned int v273 = v272 - 5;
        if (v272 < 5)
        {
          uint64_t v275 = v346;
        }
        else
        {
          if (v225 <= 3) {
            uint64_t v274 = v225;
          }
          else {
            uint64_t v274 = 4;
          }
          uint64_t v275 = v346;
          switch(v274)
          {
            case 1:
              int v276 = *v271;
              goto LABEL_488;
            case 2:
              int v276 = *(unsigned __int16 *)v271;
              goto LABEL_488;
            case 3:
              int v276 = *(unsigned __int16 *)v271 | (v271[2] << 16);
              goto LABEL_488;
            case 4:
              int v276 = *(_DWORD *)v271;
LABEL_488:
              int v296 = (v276 | (v273 << (8 * v225))) + 5;
              unsigned int v272 = v276 + 5;
              if (v225 < 4) {
                unsigned int v272 = v296;
              }
              break;
            default:
              break;
          }
        }
        switch(v272)
        {
          case 1u:
            unsigned int v298 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v342 + 32);
            v298(v270, v271, v275);
            v298((void *)(((unint64_t)v270 + v321) & v329), (unsigned __int8 *)((unint64_t)&v271[v321] & v329), v275);
            uint64_t v225 = v352;
            char v297 = 1;
            break;
          case 2u:
            *uint64_t v270 = *(void *)v271;
            char v297 = 2;
            break;
          case 3u:
            *(_OWORD *)uint64_t v270 = *(_OWORD *)v271;
            char v297 = 3;
            break;
          case 4u:
            *uint64_t v270 = *(void *)v271;
            unint64_t v299 = (unint64_t)&v271[v332] & v333;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 32))(((unint64_t)v270 + v332) & v333, v299, v338);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v339 + 32))((v334 + v336 + (((unint64_t)v270 + v332) & v333)) & v335, (v334 + v336 + v299) & v335, v340);
            uint64_t v225 = v352;
            char v297 = 4;
            break;
          default:
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v342 + 32))(v270, v271, v275);
            uint64_t v225 = v352;
            char v297 = 0;
            break;
        }
        *((unsigned char *)v270 + v225) = v297;
        char v263 = 5;
        goto LABEL_497;
      case 6u:
        uint64_t v327 = v155;
        long long v245 = *(_OWORD *)(v160 + 16);
        *(_OWORD *)uint64_t v158 = *(_OWORD *)v160;
        *(_OWORD *)(v158 + 16) = v245;
        int v246 = (void *)((v348 + v158) & v157);
        long long v247 = (unsigned __int8 *)((v348 + v160) & v157);
        unsigned int v248 = v247[v225];
        unsigned int v249 = v248 - 5;
        if (v248 >= 5)
        {
          if (v225 <= 3) {
            uint64_t v250 = v225;
          }
          else {
            uint64_t v250 = 4;
          }
          switch(v250)
          {
            case 1:
              int v251 = *v247;
              goto LABEL_464;
            case 2:
              int v251 = *(unsigned __int16 *)v247;
              goto LABEL_464;
            case 3:
              int v251 = *(unsigned __int16 *)v247 | (*(unsigned __int8 *)(((v348 + v160) & v157) + 2) << 16);
              goto LABEL_464;
            case 4:
              int v251 = *(_DWORD *)v247;
LABEL_464:
              int v277 = (v251 | (v249 << (8 * v225))) + 5;
              unsigned int v248 = v251 + 5;
              if (v225 < 4) {
                unsigned int v248 = v277;
              }
              break;
            default:
              break;
          }
        }
        switch(v248)
        {
          case 1u:
            unint64_t v349 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v342 + 32);
            v349(v246, v247, v346);
            v349((void *)(((unint64_t)v246 + v152 + v163) & v329), (unsigned __int8 *)((unint64_t)&v247[v152 + v163] & v329), v346);
            uint64_t v225 = v352;
            char v278 = 1;
            break;
          case 2u:
            *int v246 = *(void *)v247;
            char v278 = 2;
            break;
          case 3u:
            *(_OWORD *)int v246 = *(_OWORD *)v247;
            char v278 = 3;
            break;
          case 4u:
            *int v246 = *(void *)v247;
            unint64_t v279 = (unint64_t)&v247[v332] & v333;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 32))(((unint64_t)v246 + v332) & v333, v279, v338);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v339 + 32))((v334 + v336 + (((unint64_t)v246 + v332) & v333)) & v335, (v334 + v336 + v279) & v335, v340);
            uint64_t v225 = v352;
            char v278 = 4;
            break;
          default:
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v342 + 32))((v348 + v158) & v157, (v348 + v160) & v157, v346);
            uint64_t v225 = v352;
            char v278 = 0;
            break;
        }
        uint64_t v181 = v356;
        uint64_t v155 = v327;
        *((unsigned char *)v246 + v225) = v278;
        unint64_t v280 = ((v158 | 7) + v166) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v281 = ((v160 | 7) + v166) & 0xFFFFFFFFFFFFFFF8;
        long long v282 = *(_OWORD *)v281;
        long long v283 = *(_OWORD *)(v281 + 16);
        long long v284 = *(_OWORD *)(v281 + 48);
        *(_OWORD *)(v280 + 32) = *(_OWORD *)(v281 + 32);
        *(_OWORD *)(v280 + 48) = v284;
        *(_OWORD *)unint64_t v280 = v282;
        *(_OWORD *)(v280 + 16) = v283;
        long long v285 = *(_OWORD *)(v281 + 64);
        long long v286 = *(_OWORD *)(v281 + 80);
        long long v287 = *(_OWORD *)(v281 + 96);
        *(unsigned char *)(v280 + 112) = *(unsigned char *)(v281 + 112);
        *(_OWORD *)(v280 + 80) = v286;
        *(_OWORD *)(v280 + 96) = v287;
        *(_OWORD *)(v280 + 64) = v285;
        *(unsigned char *)(v158 + v170) = 6;
        break;
      case 7u:
        uint64_t v326 = v155;
        long long v252 = *(_OWORD *)(v160 + 16);
        *(_OWORD *)uint64_t v158 = *(_OWORD *)v160;
        *(_OWORD *)(v158 + 16) = v252;
        int v253 = (void *)((v348 + v158) & v157);
        long long v254 = (unsigned __int8 *)((v348 + v160) & v157);
        unsigned int v255 = v254[v225];
        unsigned int v256 = v255 - 5;
        if (v255 >= 5)
        {
          if (v225 <= 3) {
            uint64_t v257 = v225;
          }
          else {
            uint64_t v257 = 4;
          }
          switch(v257)
          {
            case 1:
              int v258 = *v254;
              goto LABEL_476;
            case 2:
              int v258 = *(unsigned __int16 *)v254;
              goto LABEL_476;
            case 3:
              int v258 = *(unsigned __int16 *)v254 | (*(unsigned __int8 *)(((v348 + v160) & v157) + 2) << 16);
              goto LABEL_476;
            case 4:
              int v258 = *(_DWORD *)v254;
LABEL_476:
              int v288 = (v258 | (v256 << (8 * v225))) + 5;
              unsigned int v255 = v258 + 5;
              if (v225 < 4) {
                unsigned int v255 = v288;
              }
              break;
            default:
              break;
          }
        }
        switch(v255)
        {
          case 1u:
            uint64_t v350 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v342 + 32);
            v350(v253, v254, v346);
            v350((void *)(((unint64_t)v253 + v152 + v163) & v329), (unsigned __int8 *)((unint64_t)&v254[v152 + v163] & v329), v346);
            uint64_t v225 = v352;
            char v289 = 1;
            break;
          case 2u:
            *int v253 = *(void *)v254;
            char v289 = 2;
            break;
          case 3u:
            *(_OWORD *)int v253 = *(_OWORD *)v254;
            char v289 = 3;
            break;
          case 4u:
            *int v253 = *(void *)v254;
            unint64_t v290 = (unint64_t)&v254[v332] & v333;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 32))(((unint64_t)v253 + v332) & v333, v290, v338);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v339 + 32))((v334 + v336 + (((unint64_t)v253 + v332) & v333)) & v335, (v334 + v336 + v290) & v335, v340);
            uint64_t v225 = v352;
            char v289 = 4;
            break;
          default:
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v342 + 32))((v348 + v158) & v157, (v348 + v160) & v157, v346);
            uint64_t v225 = v352;
            char v289 = 0;
            break;
        }
        uint64_t v181 = v356;
        *((unsigned char *)v253 + v225) = v289;
        unint64_t v291 = ((v158 | 7) + v166) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v292 = ((v160 | 7) + v166) & 0xFFFFFFFFFFFFFFF8;
        long long v293 = *(_OWORD *)v292;
        long long v294 = *(_OWORD *)(v292 + 16);
        long long v295 = *(_OWORD *)(v292 + 32);
        *(unsigned char *)(v291 + 48) = *(unsigned char *)(v292 + 48);
        *(_OWORD *)(v291 + 16) = v294;
        *(_OWORD *)(v291 + 32) = v295;
        *(_OWORD *)unint64_t v291 = v293;
        char v263 = 7;
LABEL_497:
        *(unsigned char *)(v158 + v170) = v263;
        uint64_t v155 = v326;
        break;
      default:
        uint64_t v228 = *(void *)v160;
        *(unsigned char *)(v158 + 8) = *(unsigned char *)(v160 + 8);
        *(void *)uint64_t v158 = v228;
        *(unsigned char *)(v158 + v170) = 0;
        uint64_t v181 = v356;
        break;
    }
  }
  *(void *)(((v158 | 7) + v170 + 1) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v160 | 7) + v170 + 1) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  unint64_t v300 = ((v170 + ((v155 + (v353 & v181)) & v157) + 8) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v301 = (v355 + v300 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v302 = (void *)((v354 + v300 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v301 = *v302;
  v301 += 15;
  uint64_t v303 = (void *)(((unint64_t)v302 + 15) & 0xFFFFFFFFFFFFFFF8);
  *(void *)(v301 & 0xFFFFFFFFFFFFFFF8) = *v303;
  unint64_t v304 = (v301 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_bridgeObjectRelease();
  v304 &= 0xFFFFFFFFFFFFFFF8;
  int v305 = (void *)(((unint64_t)v303 + 15) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v304 = *v305;
  swift_bridgeObjectRelease();
  unint64_t v306 = (void *)((v304 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v307 = ((unint64_t)v305 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (*v306 < 0xFFFFFFFFuLL) {
    goto LABEL_502;
  }
  if (*(void *)v307 < 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_502:
    *(_OWORD *)unint64_t v306 = *(_OWORD *)v307;
    return v355;
  }
  *unint64_t v306 = *(void *)v307;
  swift_bridgeObjectRelease();
  v306[1] = *(void *)(v307 + 8);
  swift_bridgeObjectRelease();
  return v355;
}

uint64_t sub_21F84E460(int *a1, unsigned int a2, void *a3)
{
  uint64_t v51 = a3[2];
  uint64_t v4 = *(void *)(v51 - 8);
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  uint64_t v6 = *(void *)(a3[3] - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(sub_21FA24310() - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(sub_21FA24320() - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = v11 | v9;
  uint64_t v13 = v11 | v9 | v7;
  uint64_t v14 = v13 | 7;
  uint64_t v15 = (v13 + 32) & ~(v13 | 7);
  unint64_t v16 = *(void *)(v6 + 64);
  if (((v16 + v7) & ~v7) + v16 > v16) {
    v16 += (v16 + v7) & ~v7;
  }
  uint64_t v17 = (*(void *)(v8 + 64) + v11 + ((v9 + 8) & ~v9)) & ~v11;
  uint64_t v18 = *(void *)(v10 + 64);
  unint64_t v19 = v17 + v18;
  if (v16 <= v17 + v18) {
    unint64_t v20 = v17 + v18;
  }
  else {
    unint64_t v20 = v16;
  }
  if (v20 <= 0x10) {
    unint64_t v20 = 16;
  }
  unint64_t v21 = v20 + v15;
  if (v21 + 1 > ((v21 + 1 + v14) & ~v14) + v21 + 1) {
    unint64_t v22 = v21 + 1;
  }
  else {
    unint64_t v22 = ((v21 + 1 + v14) & ~v14) + v21 + 1;
  }
  unint64_t v23 = (v21 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v22 <= v23 + 113) {
    unint64_t v22 = v23 + 113;
  }
  unint64_t v24 = v23 + 49;
  if (v22 <= v24) {
    unint64_t v22 = v24;
  }
  uint64_t v25 = *(void *)(a3[4] - 8);
  if (v22 <= 0x19) {
    uint64_t v26 = 25;
  }
  else {
    uint64_t v26 = v22;
  }
  uint64_t v27 = *(unsigned __int8 *)(v25 + 80);
  uint64_t v28 = v12 | v27;
  uint64_t v29 = v28 | 7;
  uint64_t v30 = (v28 + 32) & ~(v28 | 7);
  unint64_t v31 = *(void *)(v25 + 64);
  if (((v31 + v27) & ~v27) + v31 > v31) {
    v31 += (v31 + v27) & ~v27;
  }
  if (v31 <= v19) {
    unint64_t v31 = v19;
  }
  if (v31 <= 0x10) {
    unint64_t v31 = 16;
  }
  unint64_t v32 = v31 + v30;
  if (v32 + 1 > ((v32 + 1 + v29) & ~v29) + v32 + 1) {
    unint64_t v33 = v32 + 1;
  }
  else {
    unint64_t v33 = ((v32 + 1 + v29) & ~v29) + v32 + 1;
  }
  unint64_t v34 = (v32 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v33 <= v34 + 113) {
    unint64_t v33 = v34 + 113;
  }
  unint64_t v35 = v34 + 49;
  if (v33 > v35) {
    unint64_t v35 = v33;
  }
  if (v35 <= 0x19) {
    uint64_t v36 = 25;
  }
  else {
    uint64_t v36 = v35;
  }
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v37 = 0x7FFFFFFF;
  }
  else {
    unsigned int v37 = v5;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v38 = *(void *)(v4 + 64) + v14;
  uint64_t v39 = v26 + 1;
  if (v37 < a2)
  {
    unint64_t v40 = ((((((((((v36 + ((v39 + v29 + (v38 & ~v14)) & ~v29) + 8) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    uint64_t v41 = v40 & 0xFFFFFFF8;
    if ((v40 & 0xFFFFFFF8) != 0) {
      unsigned int v42 = 2;
    }
    else {
      unsigned int v42 = a2 - v37 + 1;
    }
    if (v42 >= 0x10000) {
      unsigned int v43 = 4;
    }
    else {
      unsigned int v43 = 2;
    }
    if (v42 < 0x100) {
      unsigned int v43 = 1;
    }
    if (v42 >= 2) {
      uint64_t v44 = v43;
    }
    else {
      uint64_t v44 = 0;
    }
    switch(v44)
    {
      case 1:
        int v45 = *((unsigned __int8 *)a1 + v40);
        if (!v45) {
          break;
        }
        goto LABEL_55;
      case 2:
        int v45 = *(unsigned __int16 *)((char *)a1 + v40);
        if (v45) {
          goto LABEL_55;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x21F84E8C0);
      case 4:
        int v45 = *(int *)((char *)a1 + v40);
        if (!v45) {
          break;
        }
LABEL_55:
        int v47 = v45 - 1;
        if (v41)
        {
          int v47 = 0;
          int v48 = *a1;
        }
        else
        {
          int v48 = 0;
        }
        return v37 + (v48 | v47) + 1;
      default:
        break;
    }
  }
  if (v5 < 0x7FFFFFFF)
  {
    unint64_t v50 = *(void *)(((((((unint64_t)a1 + v38) & ~v14) + v29 + v39) & ~v29 | 7) + v36 + 1) & 0xFFFFFFFFFFFFFFF8);
    if (v50 >= 0xFFFFFFFF) {
      LODWORD(v50) = -1;
    }
    return (v50 + 1);
  }
  else
  {
    int v49 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v4 + 48);
    return v49(a1, v5, v51);
  }
}

void sub_21F84E8D4(_DWORD *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v52 = *(void *)(a4[2] - 8);
  unsigned int v6 = *(_DWORD *)(v52 + 84);
  uint64_t v7 = *(void *)(a4[3] - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(sub_21FA24310() - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = sub_21FA24320();
  unsigned int v12 = v6;
  uint64_t v13 = *(void *)(v11 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v14 | v10;
  uint64_t v16 = v14 | v10 | v8;
  uint64_t v17 = v16 | 7;
  uint64_t v18 = (v16 + 32) & ~(v16 | 7);
  unint64_t v19 = *(void *)(v7 + 64);
  if (((v19 + v8) & ~v8) + v19 > v19) {
    v19 += (v19 + v8) & ~v8;
  }
  uint64_t v20 = (*(void *)(v9 + 64) + v14 + ((v10 + 8) & ~v10)) & ~v14;
  uint64_t v21 = *(void *)(v13 + 64);
  unint64_t v22 = v20 + v21;
  if (v19 <= v20 + v21) {
    unint64_t v23 = v20 + v21;
  }
  else {
    unint64_t v23 = v19;
  }
  if (v23 <= 0x10) {
    unint64_t v23 = 16;
  }
  unint64_t v24 = v23 + v18;
  if (v24 + 1 > ((v24 + 1 + v17) & ~v17) + v24 + 1) {
    unint64_t v25 = v24 + 1;
  }
  else {
    unint64_t v25 = ((v24 + 1 + v17) & ~v17) + v24 + 1;
  }
  unint64_t v26 = (v24 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v25 <= v26 + 113) {
    unint64_t v25 = v26 + 113;
  }
  unint64_t v27 = v26 + 49;
  if (v25 > v27) {
    unint64_t v27 = v25;
  }
  uint64_t v28 = 25;
  if (v27 <= 0x19) {
    uint64_t v29 = 25;
  }
  else {
    uint64_t v29 = v27;
  }
  uint64_t v30 = *(void *)(a4[4] - 8);
  uint64_t v31 = *(unsigned __int8 *)(v30 + 80);
  uint64_t v32 = v15 | v31;
  uint64_t v33 = v32 | 7;
  uint64_t v34 = (v32 + 32) & ~(v32 | 7);
  unint64_t v35 = *(void *)(v30 + 64);
  if (((v35 + v31) & ~v31) + v35 > v35) {
    v35 += (v35 + v31) & ~v31;
  }
  if (v35 <= v22) {
    unint64_t v35 = v22;
  }
  if (v35 <= 0x10) {
    unint64_t v35 = 16;
  }
  unint64_t v36 = v35 + v34;
  if (v36 + 1 > ((v36 + 1 + v33) & ~v33) + v36 + 1) {
    unint64_t v37 = v36 + 1;
  }
  else {
    unint64_t v37 = ((v36 + 1 + v33) & ~v33) + v36 + 1;
  }
  unint64_t v38 = (v36 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v37 <= v38 + 113) {
    unint64_t v37 = v38 + 113;
  }
  unint64_t v39 = v38 + 49;
  if (v37 > v39) {
    unint64_t v39 = v37;
  }
  if (v39 > 0x19) {
    uint64_t v28 = v39;
  }
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v40 = 0x7FFFFFFF;
  }
  else {
    unsigned int v40 = v6;
  }
  uint64_t v41 = *(void *)(v52 + 64) + v17;
  uint64_t v42 = v29 + 1;
  size_t v43 = ((((((((((v28 + ((v29 + 1 + v33 + (v41 & ~v17)) & ~v33) + 8) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v40 >= a3)
  {
    int v46 = 0;
  }
  else
  {
    if (((((((((((v28
                 + ((v29 + 1 + v33 + (v41 & ~v17)) & ~v33)
                 + 8) & 0xFFFFFFF8)
               + 15) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8)
           + 15) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) == 0xFFFFFFF0)
      unsigned int v44 = a3 - v40 + 1;
    else {
      unsigned int v44 = 2;
    }
    if (v44 >= 0x10000) {
      int v45 = 4;
    }
    else {
      int v45 = 2;
    }
    if (v44 < 0x100) {
      int v45 = 1;
    }
    if (v44 >= 2) {
      int v46 = v45;
    }
    else {
      int v46 = 0;
    }
  }
  if (a2 > v40)
  {
    if (v43) {
      int v47 = 1;
    }
    else {
      int v47 = a2 - v40;
    }
    if (v43)
    {
      int v48 = ~v40 + a2;
      bzero(a1, v43);
      *a1 = v48;
    }
    switch(v46)
    {
      case 1:
        *((unsigned char *)a1 + v43) = v47;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v43) = v47;
        return;
      case 3:
        goto LABEL_75;
      case 4:
        *(_DWORD *)((char *)a1 + v43) = v47;
        return;
      default:
        return;
    }
  }
  switch(v46)
  {
    case 1:
      *((unsigned char *)a1 + v43) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_64;
    case 2:
      *(_WORD *)((char *)a1 + v43) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_64;
    case 3:
LABEL_75:
      __break(1u);
      JUMPOUT(0x21F84ED80);
    case 4:
      *(_DWORD *)((char *)a1 + v43) = 0;
      goto LABEL_63;
    default:
LABEL_63:
      if (a2)
      {
LABEL_64:
        if (v12 < 0x7FFFFFFF)
        {
          unint64_t v50 = (void *)(((((((unint64_t)a1 + v41) & ~v17) + v33 + v42) & ~v33 | 7) + v28 + 1) & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0) {
            uint64_t v51 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v51 = a2 - 1;
          }
          void *v50 = v51;
        }
        else
        {
          int v49 = *(void (**)(_DWORD *))(v52 + 56);
          v49(a1);
        }
      }
      return;
  }
}

uint64_t sub_21F84EDA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(void), uint64_t (*a9)(uint64_t, uint64_t, uint64_t), uint64_t (*a10)(uint64_t, uint64_t, uint64_t))
{
  if ((a7 & 0x80) != 0)
  {
    a8();
    uint64_t v13 = a5;
    uint64_t v14 = a6;
    uint64_t v15 = a7 & 0x7F;
    a9 = a10;
  }
  else
  {
    a8();
    uint64_t v13 = a5;
    uint64_t v14 = a6;
    uint64_t v15 = a7;
  }
  return a9(v13, v14, v15);
}

uint64_t sub_21F84EE64(uint64_t a1)
{
  return sub_21F84EDA8(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), (void (*)(void))sub_21F7F42EC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F85453C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F85453C);
}

uint64_t sub_21F84EED4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(unsigned __int8 *)(a2 + 48);
  sub_21F84EDA8(*(void *)a2, v4, v5, v6, v7, v8, v9, (void (*)(void))sub_21F7BB3B4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F854540, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F854540);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = v9;
  return a1;
}

uint64_t sub_21F84EF94(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(unsigned __int8 *)(a2 + 48);
  sub_21F84EDA8(*(void *)a2, v4, v5, v6, v7, v8, v9, (void (*)(void))sub_21F7BB3B4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F854540, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F854540);
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  uint64_t v16 = *(unsigned __int8 *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v9;
  sub_21F84EDA8(v10, v11, v12, v13, v14, v15, v16, (void (*)(void))sub_21F7F42EC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F85453C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F85453C);
  return a1;
}

uint64_t sub_21F84F0A4(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v11 = *(unsigned __int8 *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v3;
  sub_21F84EDA8(v4, v6, v5, v7, v8, v9, v11, (void (*)(void))sub_21F7F42EC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F85453C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F85453C);
  return a1;
}

uint64_t sub_21F84F140(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3F && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 63);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 48) >> 1) & 0x3E | (*(unsigned __int8 *)(a1 + 48) >> 7)) ^ 0x3F;
  if (v3 >= 0x3E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t sub_21F84F194(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3E)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 63;
    if (a3 >= 0x3F) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3F) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2)
    {
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)__n128 result = 0u;
      *(unsigned char *)(result + 48) = 4 * (((-a2 >> 1) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t sub_21F84F200(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48) >> 7;
}

uint64_t sub_21F84F20C(uint64_t result)
{
  *(unsigned char *)(result + 48) &= ~0x80u;
  return result;
}

uint64_t sub_21F84F21C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 48) = *(unsigned char *)(result + 48) & 3 | (a2 << 7);
  return result;
}

uint64_t sub_21F84F230()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *sub_21F84F2D8(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned int v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *(void *)a2;
    *unsigned int v3 = *(void *)a2;
    unsigned int v3 = (void *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
  }
  else
  {
    unsigned int v9 = a2[v5];
    unsigned int v10 = v9 - 3;
    if (v9 >= 3)
    {
      if (v5 <= 3) {
        uint64_t v11 = v5;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_19;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_19;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_19;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_19:
          int v13 = (v12 | (v10 << (8 * v5))) + 3;
          unsigned int v9 = v12 + 3;
          if (v5 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v9 == 2)
    {
      uint64_t v15 = *((void *)a2 + 1);
      *unsigned int v3 = *(void *)a2;
      v3[1] = v15;
      char v14 = 2;
    }
    else
    {
      if (v9 != 1)
      {
        (*(void (**)(void *))(v4 + 16))(a1);
        *((unsigned char *)v3 + v5) = 0;
        return v3;
      }
      *a1 = *(void *)a2;
      char v14 = 1;
    }
    *((unsigned char *)v3 + v5) = v14;
  }
  swift_retain();
  return v3;
}

uint64_t sub_21F84F468(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8) + 64);
  if (v2 <= 0x10) {
    unint64_t v2 = 16;
  }
  unsigned int v3 = a1[v2];
  unsigned int v4 = v3 - 3;
  if (v3 >= 3)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        int v7 = (v6 | (v4 << (8 * v2))) + 3;
        unsigned int v3 = v6 + 3;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 == 2 || v3 == 1) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 24) - 8) + 8))();
  }
}

void *sub_21F84F578(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) <= 0x10uLL) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 3;
  if (v5 >= 3)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 3;
        unsigned int v5 = v8 + 3;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 2)
  {
    uint64_t v11 = *((void *)a2 + 1);
    *a1 = *(void *)a2;
    a1[1] = v11;
    char v10 = 2;
  }
  else
  {
    if (v5 != 1)
    {
      (*(void (**)(void *))(*(void *)(*(void *)(a3 + 24) - 8) + 16))(a1);
      *((unsigned char *)a1 + v4) = 0;
      return a1;
    }
    *a1 = *(void *)a2;
    char v10 = 1;
  }
  *((unsigned char *)a1 + v4) = v10;
  swift_retain();
  return a1;
}

unsigned __int8 *sub_21F84F6CC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 24);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 3;
    if (v8 >= 3)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 3;
          unsigned int v8 = v11 + 3;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 2 || v8 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 3;
    if (v13 >= 3)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_29;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_29;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_29;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_29:
          int v17 = (v16 | (v14 << (8 * v7))) + 3;
          unsigned int v13 = v16 + 3;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 2)
    {
      uint64_t v19 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v19;
      char v18 = 2;
    }
    else
    {
      if (v13 != 1)
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
        a1[v7] = 0;
        return a1;
      }
      *(void *)a1 = *(void *)a2;
      char v18 = 1;
    }
    a1[v7] = v18;
    swift_retain();
  }
  return a1;
}

_OWORD *sub_21F84F910(_OWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) <= 0x10uLL) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 3;
  if (v5 >= 3)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 3;
        unsigned int v5 = v8 + 3;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 2)
  {
    *a1 = *(_OWORD *)a2;
    char v10 = 2;
  }
  else if (v5 == 1)
  {
    *(void *)a1 = *(void *)a2;
    char v10 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *))(*(void *)(*(void *)(a3 + 24) - 8) + 32))(a1);
    char v10 = 0;
  }
  *((unsigned char *)a1 + v4) = v10;
  return a1;
}

unsigned __int8 *sub_21F84FA60(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 24);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 3;
    if (v8 >= 3)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 3;
          unsigned int v8 = v11 + 3;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 2 || v8 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 3;
    if (v13 >= 3)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_29;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_29;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_29;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_29:
          int v17 = (v16 | (v14 << (8 * v7))) + 3;
          unsigned int v13 = v16 + 3;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      char v18 = 2;
    }
    else if (v13 == 1)
    {
      *(void *)a1 = *(void *)a2;
      char v18 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 0;
    }
    a1[v7] = v18;
  }
  return a1;
}

uint64_t sub_21F84FCA0(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v4 = 16;
  if (*(void *)(v3 + 64) > 0x10uLL) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 253) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 3) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 254;
}

void sub_21F84FDD4(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v8 = a2 - 254;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x21F84FF9CLL);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_21F84FFC4(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v3 = 16;
  if (*(void *)(v2 + 64) > 0x10uLL) {
    uint64_t v3 = *(void *)(v2 + 64);
  }
  uint64_t v4 = a1[v3];
  int v5 = v4 - 3;
  if (v4 >= 3)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v8 = (v7 | (v5 << (8 * v3))) + 3;
        LODWORD(v4) = v7 + 3;
        if (v3 >= 4) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v8;
        }
        break;
      default:
        return v4;
    }
  }
  return v4;
}

void sub_21F85007C(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) <= 0x10uLL) {
    size_t v4 = 16;
  }
  else {
    size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  }
  if (a2 > 2)
  {
    unsigned int v5 = a2 - 3;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 3;
      bzero(a1, v4);
      if (v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if (v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 3;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t sub_21F850154()
{
  uint64_t result = type metadata accessor for VisualMapper.Mapping();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_OWORD *sub_21F8501F0(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  size_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6 & 0xF8 | 7;
  uint64_t v8 = ~v7;
  if (*(void *)(v5 + 64) <= 0x10uLL) {
    uint64_t v9 = 16;
  }
  else {
    uint64_t v9 = *(void *)(v5 + 64);
  }
  if ((v6 & 0x1000F8) != 0 || v9 + (((v6 & 0xF8) + 39) & (unint64_t)~v7) + 1 > 0x18)
  {
    uint64_t v11 = *(void *)a2;
    *(void *)size_t v4 = *(void *)a2;
    size_t v4 = (_OWORD *)(v11 + ((v7 + 16) & v8));
  }
  else
  {
    unint64_t v12 = *(void *)(a2 + 24);
    if (v12 < 0xFFFFFFFF)
    {
      long long v16 = *(_OWORD *)(a2 + 16);
      *a1 = *(_OWORD *)a2;
      a1[1] = v16;
    }
    else
    {
      uint64_t v13 = *(void *)a2;
      uint64_t v14 = *(void *)(a2 + 8);
      char v15 = *(unsigned char *)(a2 + 16);
      sub_21F7652C0(*(void *)a2, v14, v15);
      *(void *)size_t v4 = v13;
      *((void *)v4 + 1) = v14;
      *((unsigned char *)v4 + 16) = v15;
      *((void *)v4 + 3) = v12;
      swift_bridgeObjectRetain();
    }
    int v17 = (void *)(((unint64_t)v4 + 39) & v8);
    char v18 = (unsigned __int8 *)((a2 + 39) & v8);
    unsigned int v19 = v18[v9];
    unsigned int v20 = v19 - 3;
    if (v19 >= 3)
    {
      if (v9 <= 3) {
        uint64_t v21 = v9;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *v18;
          goto LABEL_22;
        case 2:
          int v22 = *(unsigned __int16 *)v18;
          goto LABEL_22;
        case 3:
          int v22 = *(unsigned __int16 *)v18 | (*(unsigned __int8 *)(((a2 + 39) & v8) + 2) << 16);
          goto LABEL_22;
        case 4:
          int v22 = *(_DWORD *)v18;
LABEL_22:
          int v23 = (v22 | (v20 << (8 * v9))) + 3;
          unsigned int v19 = v22 + 3;
          if (v9 < 4) {
            unsigned int v19 = v23;
          }
          break;
        default:
          break;
      }
    }
    if (v19 == 2)
    {
      uint64_t v25 = *(void *)(((a2 + 39) & v8) + 8);
      *int v17 = *(void *)v18;
      *(void *)((((unint64_t)v4 + 39) & v8) + 8) = v25;
      char v24 = 2;
    }
    else
    {
      if (v19 != 1)
      {
        (*(void (**)(unint64_t))(v5 + 16))(((unint64_t)v4 + 39) & v8);
        *((unsigned char *)v17 + v9) = 0;
        return v4;
      }
      *int v17 = *(void *)v18;
      char v24 = 1;
    }
    *((unsigned char *)v17 + v9) = v24;
  }
  swift_retain();
  return v4;
}

uint64_t sub_21F850410(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL)
  {
    sub_21F7656A8(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80) & 0xF8 | 7;
  int v6 = (unsigned __int8 *)((a1 + v5 + 32) & ~v5);
  unint64_t v7 = *(void *)(v4 + 64);
  if (v7 <= 0x10) {
    unint64_t v7 = 16;
  }
  unsigned int v8 = v6[v7];
  unsigned int v9 = v8 - 3;
  if (v8 >= 3)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *v6;
        goto LABEL_14;
      case 2:
        int v11 = *(unsigned __int16 *)v6;
        goto LABEL_14;
      case 3:
        int v11 = *(unsigned __int16 *)v6 | (v6[2] << 16);
        goto LABEL_14;
      case 4:
        int v11 = *(_DWORD *)v6;
LABEL_14:
        int v12 = (v11 | (v9 << (8 * v7))) + 3;
        unsigned int v8 = v11 + 3;
        if (v7 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  if (v8 == 2 || v8 == 1)
  {
    return swift_release();
  }
  else
  {
    uint64_t v14 = *(uint64_t (**)(void))(v4 + 8);
    return v14();
  }
}

uint64_t sub_21F8505B0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = a2[3];
  if (v6 < 0xFFFFFFFF)
  {
    long long v10 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    char v9 = *((unsigned char *)a2 + 16);
    sub_21F7652C0(*a2, v8, v9);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v6;
    swift_bridgeObjectRetain();
  }
  uint64_t v11 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80) & 0xF8;
  uint64_t v13 = v12 + 39;
  uint64_t v14 = v12 + 39 + a1;
  unint64_t v15 = ~v12 & 0xFFFFFFFFFFFFFFF8;
  long long v16 = (void *)(v14 & v15);
  int v17 = (unsigned __int8 *)(((unint64_t)a2 + v13) & v15);
  if (*(void *)(v11 + 64) <= 0x10uLL) {
    uint64_t v18 = 16;
  }
  else {
    uint64_t v18 = *(void *)(v11 + 64);
  }
  unsigned int v19 = v17[v18];
  unsigned int v20 = v19 - 3;
  if (v19 >= 3)
  {
    if (v18 <= 3) {
      uint64_t v21 = v18;
    }
    else {
      uint64_t v21 = 4;
    }
    switch(v21)
    {
      case 1:
        int v22 = *v17;
        goto LABEL_16;
      case 2:
        int v22 = *(unsigned __int16 *)v17;
        goto LABEL_16;
      case 3:
        int v22 = *(unsigned __int16 *)v17 | (v17[2] << 16);
        goto LABEL_16;
      case 4:
        int v22 = *(_DWORD *)v17;
LABEL_16:
        int v23 = (v22 | (v20 << (8 * v18))) + 3;
        unsigned int v19 = v22 + 3;
        if (v18 < 4) {
          unsigned int v19 = v23;
        }
        break;
      default:
        break;
    }
  }
  if (v19 == 2)
  {
    uint64_t v25 = *((void *)v17 + 1);
    *long long v16 = *(void *)v17;
    *(void *)((v14 & v15) + 8) = v25;
    char v24 = 2;
  }
  else
  {
    if (v19 != 1)
    {
      (*(void (**)(void *))(v11 + 16))(v16);
      *((unsigned char *)v16 + v18) = 0;
      return a1;
    }
    *long long v16 = *(void *)v17;
    char v24 = 1;
  }
  *((unsigned char *)v16 + v18) = v24;
  swift_retain();
  return a1;
}

uint64_t sub_21F850790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v6 >= 0xFFFFFFFF)
    {
      uint64_t v13 = *(void *)a2;
      uint64_t v14 = *(void *)(a2 + 8);
      char v15 = *(unsigned char *)(a2 + 16);
      sub_21F7652C0(*(void *)a2, v14, v15);
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v14;
      *(unsigned char *)(a1 + 16) = v15;
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v6 >= 0xFFFFFFFF)
    {
      uint64_t v7 = *(void *)a2;
      uint64_t v8 = *(void *)(a2 + 8);
      char v9 = *(unsigned char *)(a2 + 16);
      sub_21F7652C0(*(void *)a2, v8, v9);
      uint64_t v10 = *(void *)a1;
      uint64_t v11 = *(void *)(a1 + 8);
      char v12 = *(unsigned char *)(a1 + 16);
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v8;
      *(unsigned char *)(a1 + 16) = v9;
      sub_21F7656A8(v10, v11, v12);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_21F7656A8(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  long long v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
LABEL_8:
  uint64_t v17 = *(void *)(a3 + 24);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(_DWORD *)(v18 + 80) & 0xF8;
  uint64_t v20 = v19 + 39;
  uint64_t v21 = v19 + 39 + a1;
  unint64_t v22 = ~v19 & 0xFFFFFFFFFFFFFFF8;
  int v23 = (unsigned __int8 *)(v21 & v22);
  uint64_t v24 = v20 + a2;
  uint64_t v25 = (unsigned __int8 *)(v24 & v22);
  if ((v21 & v22) != (v24 & v22))
  {
    uint64_t v26 = *(void *)(v17 - 8);
    if (*(void *)(v18 + 64) <= 0x10uLL) {
      uint64_t v27 = 16;
    }
    else {
      uint64_t v27 = *(void *)(v18 + 64);
    }
    unsigned int v28 = v23[v27];
    unsigned int v29 = v28 - 3;
    if (v28 >= 3)
    {
      if (v27 <= 3) {
        uint64_t v30 = v27;
      }
      else {
        uint64_t v30 = 4;
      }
      switch(v30)
      {
        case 1:
          int v31 = *v23;
          goto LABEL_21;
        case 2:
          int v31 = *(unsigned __int16 *)v23;
          goto LABEL_21;
        case 3:
          int v31 = *(unsigned __int16 *)v23 | (v23[2] << 16);
          goto LABEL_21;
        case 4:
          int v31 = *(_DWORD *)v23;
LABEL_21:
          int v32 = (v31 | (v29 << (8 * v27))) + 3;
          unsigned int v28 = v31 + 3;
          if (v27 < 4) {
            unsigned int v28 = v32;
          }
          break;
        default:
          break;
      }
    }
    if (v28 == 2 || v28 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v26 + 8))(v23, v17);
    }
    unsigned int v33 = v25[v27];
    unsigned int v34 = v33 - 3;
    if (v33 >= 3)
    {
      if (v27 <= 3) {
        uint64_t v35 = v27;
      }
      else {
        uint64_t v35 = 4;
      }
      switch(v35)
      {
        case 1:
          int v36 = *v25;
          goto LABEL_36;
        case 2:
          int v36 = *(unsigned __int16 *)v25;
          goto LABEL_36;
        case 3:
          int v36 = *(unsigned __int16 *)v25 | (v25[2] << 16);
          goto LABEL_36;
        case 4:
          int v36 = *(_DWORD *)v25;
LABEL_36:
          int v37 = (v36 | (v34 << (8 * v27))) + 3;
          unsigned int v33 = v36 + 3;
          if (v27 < 4) {
            unsigned int v33 = v37;
          }
          break;
        default:
          break;
      }
    }
    if (v33 == 2)
    {
      uint64_t v39 = *((void *)v25 + 1);
      *(void *)int v23 = *(void *)v25;
      *((void *)v23 + 1) = v39;
      char v38 = 2;
    }
    else
    {
      if (v33 != 1)
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v26 + 16))(v23, v25, v17);
        v23[v27] = 0;
        return a1;
      }
      *(void *)int v23 = *(void *)v25;
      char v38 = 1;
    }
    v23[v27] = v38;
    swift_retain();
  }
  return a1;
}

_OWORD *sub_21F850AA8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80) & 0xF8;
  uint64_t v7 = v6 + 39;
  unint64_t v8 = (unint64_t)a1 + v6 + 39;
  unint64_t v9 = ~v6 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = (_OWORD *)(v8 & v9);
  uint64_t v11 = (unsigned __int8 *)(((unint64_t)a2 + v7) & v9);
  if (*(void *)(v5 + 64) <= 0x10uLL) {
    uint64_t v12 = 16;
  }
  else {
    uint64_t v12 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  }
  unsigned int v13 = v11[v12];
  unsigned int v14 = v13 - 3;
  if (v13 >= 3)
  {
    if (v12 <= 3) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *v11;
        goto LABEL_13;
      case 2:
        int v16 = *(unsigned __int16 *)v11;
        goto LABEL_13;
      case 3:
        int v16 = *(unsigned __int16 *)v11 | (v11[2] << 16);
        goto LABEL_13;
      case 4:
        int v16 = *(_DWORD *)v11;
LABEL_13:
        int v17 = (v16 | (v14 << (8 * v12))) + 3;
        unsigned int v13 = v16 + 3;
        if (v12 < 4) {
          unsigned int v13 = v17;
        }
        break;
      default:
        break;
    }
  }
  if (v13 == 2)
  {
    *uint64_t v10 = *(_OWORD *)v11;
    char v18 = 2;
  }
  else if (v13 == 1)
  {
    *(void *)uint64_t v10 = *(void *)v11;
    char v18 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *))(v5 + 32))(v10);
    char v18 = 0;
  }
  *((unsigned char *)v10 + v12) = v18;
  return a1;
}

uint64_t sub_21F850C2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(void *)(a2 + 24) >= 0xFFFFFFFFuLL)
    {
      char v6 = *(unsigned char *)(a2 + 16);
      uint64_t v7 = *(void *)a1;
      uint64_t v8 = *(void *)(a1 + 8);
      char v9 = *(unsigned char *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = v6;
      sub_21F7656A8(v7, v8, v9);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_21F7656A8(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
LABEL_6:
  uint64_t v11 = *(void *)(a3 + 24);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(_DWORD *)(v12 + 80) & 0xF8;
  uint64_t v14 = v13 + 39;
  uint64_t v15 = v13 + 39 + a1;
  unint64_t v16 = ~v13 & 0xFFFFFFFFFFFFFFF8;
  int v17 = (unsigned __int8 *)(v15 & v16);
  uint64_t v18 = v14 + a2;
  uint64_t v19 = (unsigned __int8 *)(v18 & v16);
  if ((v15 & v16) != (v18 & v16))
  {
    uint64_t v20 = *(void *)(v11 - 8);
    if (*(void *)(v12 + 64) <= 0x10uLL) {
      uint64_t v21 = 16;
    }
    else {
      uint64_t v21 = *(void *)(v12 + 64);
    }
    unsigned int v22 = v17[v21];
    unsigned int v23 = v22 - 3;
    if (v22 >= 3)
    {
      if (v21 <= 3) {
        uint64_t v24 = v21;
      }
      else {
        uint64_t v24 = 4;
      }
      switch(v24)
      {
        case 1:
          int v25 = *v17;
          goto LABEL_19;
        case 2:
          int v25 = *(unsigned __int16 *)v17;
          goto LABEL_19;
        case 3:
          int v25 = *(unsigned __int16 *)v17 | (v17[2] << 16);
          goto LABEL_19;
        case 4:
          int v25 = *(_DWORD *)v17;
LABEL_19:
          int v26 = (v25 | (v23 << (8 * v21))) + 3;
          unsigned int v22 = v25 + 3;
          if (v21 < 4) {
            unsigned int v22 = v26;
          }
          break;
        default:
          break;
      }
    }
    if (v22 == 2 || v22 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v20 + 8))(v17, v11);
    }
    unsigned int v27 = v19[v21];
    unsigned int v28 = v27 - 3;
    if (v27 >= 3)
    {
      if (v21 <= 3) {
        uint64_t v29 = v21;
      }
      else {
        uint64_t v29 = 4;
      }
      switch(v29)
      {
        case 1:
          int v30 = *v19;
          goto LABEL_34;
        case 2:
          int v30 = *(unsigned __int16 *)v19;
          goto LABEL_34;
        case 3:
          int v30 = *(unsigned __int16 *)v19 | (v19[2] << 16);
          goto LABEL_34;
        case 4:
          int v30 = *(_DWORD *)v19;
LABEL_34:
          int v31 = (v30 | (v28 << (8 * v21))) + 3;
          unsigned int v27 = v30 + 3;
          if (v21 < 4) {
            unsigned int v27 = v31;
          }
          break;
        default:
          break;
      }
    }
    if (v27 == 2)
    {
      *(_OWORD *)int v17 = *(_OWORD *)v19;
      char v32 = 2;
    }
    else if (v27 == 1)
    {
      *(void *)int v17 = *(void *)v19;
      char v32 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v20 + 32))(v17, v19, v11);
      char v32 = 0;
    }
    v17[v21] = v32;
  }
  return a1;
}

uint64_t sub_21F850EEC(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 24) - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  if (v4 <= 0x10) {
    unint64_t v4 = 16;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0x7FFFFFFF) {
    goto LABEL_22;
  }
  uint64_t v5 = v4
     + ((unsigned __int16)((*(_WORD *)(v3 + 80) & 0xF8) + 39) & (unsigned __int16)~(*(_WORD *)(v3 + 80) & 0xF8) & 0x1F8)
     + 1;
  char v6 = 8 * v5;
  if (v5 > 3) {
    goto LABEL_6;
  }
  unsigned int v9 = (a2 - 2147483646 + ~(-1 << v6)) >> v6;
  if (v9 > 0xFFFE)
  {
    int v7 = *(_DWORD *)((char *)a1 + v5);
    if (v7) {
      goto LABEL_14;
    }
LABEL_22:
    unint64_t v11 = *((void *)a1 + 3);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    if ((v11 + 1) >= 2) {
      return v11;
    }
    else {
      return 0;
    }
  }
  if (v9 > 0xFE)
  {
    int v7 = *(unsigned __int16 *)((char *)a1 + v5);
    if (*(unsigned __int16 *)((char *)a1 + v5)) {
      goto LABEL_14;
    }
    goto LABEL_22;
  }
  if (!v9) {
    goto LABEL_22;
  }
LABEL_6:
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 0x7FFFFFFF;
}

void sub_21F85107C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 24) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  if (v6 <= 0x10) {
    unint64_t v6 = 16;
  }
  size_t v7 = v6
     + ((unsigned __int16)((*(_WORD *)(v5 + 80) & 0xF8) + 39) & (unsigned __int16)~(*(_WORD *)(v5 + 80) & 0xF8) & 0x1F8)
     + 1;
  if (a3 < 0x7FFFFFFF)
  {
    int v8 = 0;
  }
  else if (v7 <= 3)
  {
    unsigned int v11 = (a3 - 2147483646 + ~(-1 << (8 * v7))) >> (8 * v7);
    if (v11 > 0xFFFE)
    {
      int v8 = 4;
    }
    else if (v11 >= 0xFF)
    {
      int v8 = 2;
    }
    else
    {
      int v8 = v11 != 0;
    }
  }
  else
  {
    int v8 = 1;
  }
  if (a2 > 0x7FFFFFFE)
  {
    unsigned int v9 = a2 - 0x7FFFFFFF;
    if (v7 < 4)
    {
      int v10 = (v9 >> (8 * v7)) + 1;
      if (v7)
      {
        int v12 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if (v7 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if (v7 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
      int v10 = 1;
    }
    switch(v8)
    {
      case 1:
        a1[v7] = v10;
        break;
      case 2:
        *(_WORD *)&a1[v7] = v10;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x21F85129CLL);
      case 4:
        *(_DWORD *)&a1[v7] = v10;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v8)
    {
      case 1:
        a1[v7] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v7] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v7] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          *((void *)a1 + 3) = a2;
        break;
    }
  }
}

uint64_t sub_21F8512C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6 == 2 || a6 == 1) {
    return swift_retain();
  }
  if (!a6) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_21F8512F0(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, char a10)
{
  if (a10 == 2 || a10 == 1)
  {
    return swift_retain();
  }
  else if (!a10)
  {
    sub_21F7652C0(result, a2, a3 & 1);
    swift_bridgeObjectRetain();
    return sub_21F770E44(a5, a6, a7);
  }
  return result;
}

uint64_t sub_21F85139C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2 || a3 == 1) {
    return swift_retain();
  }
  if (!a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_21F8513C8(uint64_t result, uint64_t a2, char a3, uint64_t a4, char a5)
{
  if (a5 == 2 || a5 == 1)
  {
    return swift_retain();
  }
  else if (!a5)
  {
    sub_21F7652C0(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_21F851434(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 24);
  if (v2)
  {
    if (v2 == 1) {
      goto LABEL_5;
    }
    sub_21F7656A8(*(void *)result, *(void *)(result + 8), *(unsigned char *)(result + 16));
    swift_bridgeObjectRelease();
  }
  uint64_t result = sub_21F83F6FC(*(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned char *)(v1 + 48));
LABEL_5:
  uint64_t v3 = *(void *)(v1 + 80);
  if (v3)
  {
    if (v3 == 1) {
      goto LABEL_9;
    }
    sub_21F7656A8(*(void *)(v1 + 56), *(void *)(v1 + 64), *(unsigned char *)(v1 + 72));
    swift_bridgeObjectRelease();
  }
  uint64_t result = sub_21F83F778(*(void *)(v1 + 88), *(void *)(v1 + 96), *(unsigned char *)(v1 + 104));
LABEL_9:
  uint64_t v4 = *(void *)(v1 + 136);
  if (v4)
  {
    if (v4 == 1) {
      goto LABEL_13;
    }
    sub_21F7656A8(*(void *)(v1 + 112), *(void *)(v1 + 120), *(unsigned char *)(v1 + 128));
    swift_bridgeObjectRelease();
  }
  uint64_t result = sub_21F83E970(*(void *)(v1 + 144), *(void *)(v1 + 152), *(void *)(v1 + 160), *(void *)(v1 + 168), *(void *)(v1 + 176), *(unsigned char *)(v1 + 184));
LABEL_13:
  uint64_t v5 = *(void *)(v1 + 216);
  if (v5)
  {
    if (v5 == 1) {
      goto LABEL_21;
    }
    sub_21F7656A8(*(void *)(v1 + 192), *(void *)(v1 + 200), *(unsigned char *)(v1 + 208));
    swift_bridgeObjectRelease();
  }
  int v6 = *(unsigned __int8 *)(v1 + 264);
  if (v6 == 2 || (uint64_t result = v1 + 224, v6 == 1))
  {
    uint64_t result = swift_release();
  }
  else if (!*(unsigned char *)(v1 + 264))
  {
    uint64_t result = _s6Charts15AnyChartContentVwxx_0(result);
  }
LABEL_21:
  uint64_t v7 = *(unsigned __int8 *)(v1 + 320);
  if (v7 <= 0xFB) {
    uint64_t result = sub_21F84EDA8(*(void *)(v1 + 272), *(void *)(v1 + 280), *(void *)(v1 + 288), *(void *)(v1 + 296), *(void *)(v1 + 304), *(void *)(v1 + 312), v7, (void (*)(void))sub_21F7F42EC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F85453C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F85453C);
  }
  uint64_t v8 = *(void *)(v1 + 376);
  if (v8)
  {
    if (v8 == 1) {
      goto LABEL_27;
    }
    sub_21F7656A8(*(void *)(v1 + 352), *(void *)(v1 + 360), *(unsigned char *)(v1 + 368));
    swift_bridgeObjectRelease();
  }
  uint64_t result = sub_21F83E99C(*(void *)(v1 + 384), *(void *)(v1 + 392), *(void *)(v1 + 400), *(void *)(v1 + 408), *(void *)(v1 + 416), *(void *)(v1 + 424), *(void *)(v1 + 432), *(void *)(v1 + 440), *(void *)(v1 + 448), *(unsigned char *)(v1 + 456));
LABEL_27:
  uint64_t v9 = *(void *)(v1 + 488);
  if (v9)
  {
    if (v9 == 1) {
      goto LABEL_31;
    }
    sub_21F7656A8(*(void *)(v1 + 464), *(void *)(v1 + 472), *(unsigned char *)(v1 + 480));
    swift_bridgeObjectRelease();
  }
  uint64_t result = sub_21F83F3BC(*(void *)(v1 + 496), *(void *)(v1 + 504), *(unsigned char *)(v1 + 512));
LABEL_31:
  uint64_t v10 = *(void *)(v1 + 544);
  if (v10)
  {
    if (v10 == 1) {
      goto LABEL_35;
    }
    sub_21F7656A8(*(void *)(v1 + 520), *(void *)(v1 + 528), *(unsigned char *)(v1 + 536));
    swift_bridgeObjectRelease();
  }
  uint64_t result = sub_21F83F6FC(*(void *)(v1 + 552), *(void *)(v1 + 560), *(unsigned char *)(v1 + 568));
LABEL_35:
  uint64_t v11 = *(void *)(v1 + 600);
  if (v11)
  {
    if (v11 == 1) {
      goto LABEL_39;
    }
    sub_21F7656A8(*(void *)(v1 + 576), *(void *)(v1 + 584), *(unsigned char *)(v1 + 592));
    swift_bridgeObjectRelease();
  }
  uint64_t result = sub_21F83F300(*(void *)(v1 + 608), *(void *)(v1 + 616), *(void *)(v1 + 624), *(void *)(v1 + 632), *(unsigned char *)(v1 + 640));
LABEL_39:
  uint64_t v12 = *(void *)(v1 + 672);
  if (v12)
  {
    if (v12 == 1) {
      return result;
    }
    sub_21F7656A8(*(void *)(v1 + 648), *(void *)(v1 + 656), *(unsigned char *)(v1 + 664));
    swift_bridgeObjectRelease();
  }
  return sub_21F83F300(*(void *)(v1 + 680), *(void *)(v1 + 688), *(void *)(v1 + 696), *(void *)(v1 + 704), *(unsigned char *)(v1 + 712));
}

uint64_t sub_21F8516D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a2[3];
  if (v4)
  {
    if (v4 == 1)
    {
      long long v5 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v5;
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
      goto LABEL_7;
    }
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    char v9 = *((unsigned char *)a2 + 16);
    sub_21F7652C0(*a2, v8, v9);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = a2[3];
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
  }
  uint64_t v10 = a2[4];
  uint64_t v11 = a2[5];
  char v12 = *((unsigned char *)a2 + 48);
  sub_21F83F7B0(v10, v11, v12);
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v11;
  *(unsigned char *)(a1 + 48) = v12;
LABEL_7:
  uint64_t v13 = (_OWORD *)(a1 + 56);
  uint64_t v14 = a2 + 7;
  uint64_t v15 = a2[10];
  if (v15)
  {
    if (v15 == 1)
    {
      long long v16 = *(_OWORD *)(a2 + 9);
      *uint64_t v13 = *v14;
      *(_OWORD *)(a1 + 72) = v16;
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
      *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
      goto LABEL_13;
    }
    uint64_t v18 = a2[7];
    uint64_t v19 = a2[8];
    char v20 = *((unsigned char *)a2 + 72);
    sub_21F7652C0(v18, v19, v20);
    *(void *)(a1 + 56) = v18;
    *(void *)(a1 + 64) = v19;
    *(unsigned char *)(a1 + 72) = v20;
    *(void *)(a1 + 80) = a2[10];
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v17 = *(_OWORD *)(a2 + 9);
    *uint64_t v13 = *v14;
    *(_OWORD *)(a1 + 72) = v17;
  }
  uint64_t v21 = a2[11];
  uint64_t v22 = a2[12];
  unsigned __int8 v23 = *((unsigned char *)a2 + 104);
  sub_21F83F794(v21, v22, v23);
  *(void *)(a1 + 88) = v21;
  *(void *)(a1 + 96) = v22;
  *(unsigned char *)(a1 + 104) = v23;
LABEL_13:
  uint64_t v24 = (_OWORD *)(a1 + 112);
  int v25 = a2 + 14;
  uint64_t v26 = a2[17];
  if (v26)
  {
    if (v26 == 1)
    {
      long long v27 = *((_OWORD *)a2 + 10);
      *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
      *(_OWORD *)(a1 + 160) = v27;
      *(_OWORD *)(a1 + 169) = *(_OWORD *)((char *)a2 + 169);
      long long v28 = *((_OWORD *)a2 + 8);
      *uint64_t v24 = *v25;
      *(_OWORD *)(a1 + 128) = v28;
      goto LABEL_19;
    }
    uint64_t v30 = a2[14];
    uint64_t v31 = a2[15];
    char v32 = *((unsigned char *)a2 + 128);
    sub_21F7652C0(v30, v31, v32);
    *(void *)(a1 + 112) = v30;
    *(void *)(a1 + 120) = v31;
    *(unsigned char *)(a1 + 128) = v32;
    *(void *)(a1 + 136) = a2[17];
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v29 = *((_OWORD *)a2 + 8);
    *uint64_t v24 = *v25;
    *(_OWORD *)(a1 + 128) = v29;
  }
  uint64_t v33 = a2[18];
  uint64_t v34 = a2[19];
  uint64_t v35 = a2[20];
  uint64_t v36 = a2[21];
  uint64_t v37 = a2[22];
  char v38 = *((unsigned char *)a2 + 184);
  sub_21F8512C4(v33, v34, v35, v36, v37, v38);
  *(void *)(a1 + 144) = v33;
  *(void *)(a1 + 152) = v34;
  *(void *)(a1 + 160) = v35;
  *(void *)(a1 + 168) = v36;
  *(void *)(a1 + 176) = v37;
  *(unsigned char *)(a1 + 184) = v38;
LABEL_19:
  uint64_t v39 = (_OWORD *)(a1 + 192);
  unsigned int v40 = a2 + 24;
  uint64_t v41 = a2[27];
  if (v41)
  {
    if (v41 == 1)
    {
      long long v42 = *((_OWORD *)a2 + 15);
      *(_OWORD *)(a1 + 224) = *((_OWORD *)a2 + 14);
      *(_OWORD *)(a1 + 240) = v42;
      *(_OWORD *)(a1 + 249) = *(_OWORD *)((char *)a2 + 249);
      long long v43 = *((_OWORD *)a2 + 13);
      *uint64_t v39 = *v40;
      *(_OWORD *)(a1 + 208) = v43;
      goto LABEL_30;
    }
    uint64_t v45 = a2[24];
    uint64_t v46 = a2[25];
    char v47 = *((unsigned char *)a2 + 208);
    sub_21F7652C0(v45, v46, v47);
    *(void *)(a1 + 192) = v45;
    *(void *)(a1 + 200) = v46;
    *(unsigned char *)(a1 + 208) = v47;
    *(void *)(a1 + 216) = a2[27];
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v44 = *((_OWORD *)a2 + 13);
    *uint64_t v39 = *v40;
    *(_OWORD *)(a1 + 208) = v44;
  }
  int v48 = *((unsigned __int8 *)a2 + 264);
  if (v48 == 2)
  {
    uint64_t v50 = a2[29];
    *(void *)(a1 + 224) = a2[28];
    *(void *)(a1 + 232) = v50;
    LOBYTE(v48) = 2;
    goto LABEL_28;
  }
  int v49 = a2 + 28;
  if (v48 == 1)
  {
    *(void *)(a1 + 224) = *v49;
LABEL_28:
    *(unsigned char *)(a1 + 264) = v48;
    swift_retain();
    goto LABEL_30;
  }
  long long v51 = *(_OWORD *)(a2 + 31);
  *(_OWORD *)(a1 + 248) = v51;
  (**(void (***)(uint64_t, void *))(v51 - 8))(a1 + 224, v49);
  *(unsigned char *)(a1 + 264) = 0;
LABEL_30:
  uint64_t v52 = *((unsigned __int8 *)a2 + 320);
  if (v52 <= 0xFB)
  {
    uint64_t v54 = a2[34];
    uint64_t v55 = a2[35];
    uint64_t v56 = a2[36];
    uint64_t v57 = a2[37];
    uint64_t v58 = a2[38];
    uint64_t v59 = a2[39];
    sub_21F84EDA8(v54, v55, v56, v57, v58, v59, v52, (void (*)(void))sub_21F7BB3B4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F854540, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F854540);
    *(void *)(a1 + 272) = v54;
    *(void *)(a1 + 280) = v55;
    *(void *)(a1 + 288) = v56;
    *(void *)(a1 + 296) = v57;
    *(void *)(a1 + 304) = v58;
    *(void *)(a1 + 312) = v59;
    *(unsigned char *)(a1 + 320) = v52;
  }
  else
  {
    long long v53 = *((_OWORD *)a2 + 18);
    *(_OWORD *)(a1 + 272) = *((_OWORD *)a2 + 17);
    *(_OWORD *)(a1 + 288) = v53;
    *(_OWORD *)(a1 + 304) = *((_OWORD *)a2 + 19);
    *(unsigned char *)(a1 + 320) = *((unsigned char *)a2 + 320);
  }
  unsigned int v60 = (char *)(a1 + 368);
  unsigned int v61 = (char *)(a2 + 46);
  uint64_t v62 = a2[47];
  if (v62 == 1)
  {
    long long v63 = *(_OWORD *)(a2 + 55);
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 53);
    *(_OWORD *)(a1 + 440) = v63;
    *(unsigned char *)(a1 + 456) = *((unsigned char *)a2 + 456);
    long long v64 = *(_OWORD *)(a2 + 47);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 45);
    *(_OWORD *)(a1 + 376) = v64;
    long long v65 = *(_OWORD *)(a2 + 51);
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 49);
    *(_OWORD *)(a1 + 408) = v65;
    long long v66 = *(_OWORD *)(a2 + 43);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
    *(_OWORD *)(a1 + 344) = v66;
  }
  else
  {
    *(unsigned char *)(a1 + 328) = *((unsigned char *)a2 + 328);
    *(void *)(a1 + 336) = a2[42];
    *(unsigned char *)(a1 + 344) = *((unsigned char *)a2 + 344);
    if (v62)
    {
      uint64_t v67 = a2[44];
      uint64_t v68 = a2[45];
      char v69 = *v61;
      sub_21F7652C0(v67, v68, *v61);
      *(void *)(a1 + 352) = v67;
      *(void *)(a1 + 360) = v68;
      *unsigned int v60 = v69;
      *(void *)(a1 + 376) = a2[47];
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v70 = *((_OWORD *)a2 + 23);
      *(_OWORD *)(a1 + 352) = *((_OWORD *)a2 + 22);
      *(_OWORD *)(a1 + 368) = v70;
    }
    uint64_t v71 = a2[48];
    uint64_t v72 = a2[49];
    uint64_t v73 = a2[50];
    uint64_t v74 = a2[51];
    uint64_t v75 = a2[52];
    uint64_t v76 = a2[53];
    uint64_t v77 = a2[54];
    uint64_t v78 = a2[55];
    uint64_t v130 = a2[56];
    char v131 = *((unsigned char *)a2 + 456);
    sub_21F8512F0(v71, v72, v73, v74, v75, v76, v77, v78, v130, v131);
    *(void *)(a1 + 384) = v71;
    *(void *)(a1 + 392) = v72;
    *(void *)(a1 + 400) = v73;
    *(void *)(a1 + 408) = v74;
    *(void *)(a1 + 416) = v75;
    *(void *)(a1 + 424) = v76;
    *(void *)(a1 + 432) = v77;
    *(void *)(a1 + 440) = v78;
    *(void *)(a1 + 448) = v130;
    *(unsigned char *)(a1 + 456) = v131;
    unsigned int v61 = (char *)(a2 + 46);
    unsigned int v60 = (char *)(a1 + 368);
  }
  unsigned int v79 = (_OWORD *)(a1 + 464);
  unsigned int v80 = a2 + 58;
  uint64_t v81 = a2[61];
  if (v81)
  {
    if (v81 == 1)
    {
      long long v82 = *((_OWORD *)a2 + 30);
      *unsigned int v79 = *v80;
      *(_OWORD *)(a1 + 480) = v82;
      *(_OWORD *)(a1 + 496) = *((_OWORD *)a2 + 31);
      *(unsigned char *)(a1 + 512) = *((unsigned char *)a2 + 512);
      goto LABEL_45;
    }
    uint64_t v84 = a2[58];
    uint64_t v85 = a2[59];
    char v86 = v61[112];
    sub_21F7652C0(v84, v85, v86);
    *(void *)(a1 + 464) = v84;
    *(void *)(a1 + 472) = v85;
    v60[112] = v86;
    *(void *)(a1 + 488) = a2[61];
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v83 = *((_OWORD *)a2 + 30);
    *unsigned int v79 = *v80;
    *(_OWORD *)(a1 + 480) = v83;
  }
  uint64_t v87 = a2[62];
  uint64_t v88 = a2[63];
  char v89 = *((unsigned char *)a2 + 512);
  sub_21F85139C(v87, v88, v89);
  *(void *)(a1 + 496) = v87;
  *(void *)(a1 + 504) = v88;
  *(unsigned char *)(a1 + 512) = v89;
LABEL_45:
  unsigned int v90 = (_OWORD *)(a1 + 520);
  unsigned int v91 = a2 + 65;
  uint64_t v92 = a2[68];
  if (v92)
  {
    if (v92 == 1)
    {
      long long v93 = *(_OWORD *)(a2 + 67);
      *unsigned int v90 = *v91;
      *(_OWORD *)(a1 + 536) = v93;
      *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 69);
      *(unsigned char *)(a1 + 568) = *((unsigned char *)a2 + 568);
      goto LABEL_51;
    }
    uint64_t v95 = a2[65];
    uint64_t v96 = a2[66];
    char v97 = v61[168];
    sub_21F7652C0(v95, v96, v97);
    *(void *)(a1 + 520) = v95;
    *(void *)(a1 + 528) = v96;
    v60[168] = v97;
    *(void *)(a1 + 544) = a2[68];
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v94 = *(_OWORD *)(a2 + 67);
    *unsigned int v90 = *v91;
    *(_OWORD *)(a1 + 536) = v94;
  }
  uint64_t v98 = a2[69];
  uint64_t v99 = a2[70];
  char v100 = *((unsigned char *)a2 + 568);
  sub_21F83F7B0(v98, v99, v100);
  *(void *)(a1 + 552) = v98;
  *(void *)(a1 + 560) = v99;
  *(unsigned char *)(a1 + 568) = v100;
LABEL_51:
  long long v101 = (_OWORD *)(a1 + 576);
  uint64_t v102 = a2 + 72;
  uint64_t v103 = a2[75];
  if (v103)
  {
    if (v103 == 1)
    {
      long long v104 = *((_OWORD *)a2 + 39);
      *(_OWORD *)(a1 + 608) = *((_OWORD *)a2 + 38);
      *(_OWORD *)(a1 + 624) = v104;
      *(unsigned char *)(a1 + 640) = *((unsigned char *)a2 + 640);
      long long v105 = *((_OWORD *)a2 + 37);
      *long long v101 = *v102;
      *(_OWORD *)(a1 + 592) = v105;
      goto LABEL_57;
    }
    uint64_t v107 = a2[72];
    uint64_t v108 = a2[73];
    char v109 = v61[224];
    sub_21F7652C0(v107, v108, v109);
    *(void *)(a1 + 576) = v107;
    *(void *)(a1 + 584) = v108;
    v60[224] = v109;
    *(void *)(a1 + 600) = a2[75];
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v106 = *((_OWORD *)a2 + 37);
    *long long v101 = *v102;
    *(_OWORD *)(a1 + 592) = v106;
  }
  uint64_t v110 = a2[76];
  uint64_t v111 = a2[77];
  uint64_t v112 = a2[78];
  uint64_t v113 = a2[79];
  char v114 = *((unsigned char *)a2 + 640);
  sub_21F8513C8(v110, v111, v112, v113, v114);
  *(void *)(a1 + 608) = v110;
  *(void *)(a1 + 616) = v111;
  *(void *)(a1 + 624) = v112;
  *(void *)(a1 + 632) = v113;
  *(unsigned char *)(a1 + 640) = v114;
LABEL_57:
  char v115 = (_OWORD *)(a1 + 648);
  uint64_t v116 = a2 + 81;
  uint64_t v117 = a2[84];
  if (!v117)
  {
    long long v120 = *(_OWORD *)(a2 + 83);
    *char v115 = *v116;
    *(_OWORD *)(a1 + 664) = v120;
LABEL_62:
    uint64_t v124 = a2[85];
    uint64_t v125 = a2[86];
    uint64_t v126 = a2[87];
    uint64_t v127 = a2[88];
    char v128 = *((unsigned char *)a2 + 712);
    sub_21F8513C8(v124, v125, v126, v127, v128);
    *(void *)(a1 + 680) = v124;
    *(void *)(a1 + 688) = v125;
    *(void *)(a1 + 696) = v126;
    *(void *)(a1 + 704) = v127;
    *(unsigned char *)(a1 + 712) = v128;
    return a1;
  }
  if (v117 != 1)
  {
    uint64_t v121 = a2[81];
    uint64_t v122 = a2[82];
    char v123 = v61[296];
    sub_21F7652C0(v121, v122, v123);
    *(void *)(a1 + 648) = v121;
    *(void *)(a1 + 656) = v122;
    v60[296] = v123;
    *(void *)(a1 + 672) = a2[84];
    swift_bridgeObjectRetain();
    goto LABEL_62;
  }
  long long v118 = *(_OWORD *)(a2 + 87);
  *(_OWORD *)(a1 + 680) = *(_OWORD *)(a2 + 85);
  *(_OWORD *)(a1 + 696) = v118;
  *(unsigned char *)(a1 + 712) = *((unsigned char *)a2 + 712);
  long long v119 = *(_OWORD *)(a2 + 83);
  *char v115 = *v116;
  *(_OWORD *)(a1 + 664) = v119;
  return a1;
}

uint64_t sub_21F851E14(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *((void *)a2 + 3);
  if (v4 == 1)
  {
    if (v5 != 1)
    {
      if (v5)
      {
        uint64_t v6 = *(void *)a2;
        uint64_t v7 = *((void *)a2 + 1);
        char v8 = *((unsigned char *)a2 + 16);
        sub_21F7652C0(*(void *)a2, v7, v8);
        *(void *)a1 = v6;
        *(void *)(a1 + 8) = v7;
        *(unsigned char *)(a1 + 16) = v8;
        *(void *)(a1 + 24) = *((void *)a2 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v19 = a2[1];
        *(_OWORD *)a1 = *a2;
        *(_OWORD *)(a1 + 16) = v19;
      }
      uint64_t v20 = *((void *)a2 + 4);
      uint64_t v21 = *((void *)a2 + 5);
      char v22 = *((unsigned char *)a2 + 48);
      sub_21F83F7B0(v20, v21, v22);
      *(void *)(a1 + 32) = v20;
      *(void *)(a1 + 40) = v21;
      *(unsigned char *)(a1 + 48) = v22;
      goto LABEL_18;
    }
LABEL_7:
    long long v10 = *a2;
    long long v11 = a2[1];
    long long v12 = a2[2];
    *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    *(_OWORD *)(a1 + 16) = v11;
    *(_OWORD *)(a1 + 32) = v12;
    *(_OWORD *)a1 = v10;
    goto LABEL_18;
  }
  if (v5 == 1)
  {
    uint64_t v9 = type metadata accessor for VisualMapper();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
    goto LABEL_7;
  }
  if (v4)
  {
    if (v5)
    {
      uint64_t v13 = *(void *)a2;
      uint64_t v14 = *((void *)a2 + 1);
      char v15 = *((unsigned char *)a2 + 16);
      sub_21F7652C0(*(void *)a2, v14, v15);
      uint64_t v16 = *(void *)a1;
      uint64_t v17 = *(void *)(a1 + 8);
      char v18 = *(unsigned char *)(a1 + 16);
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v14;
      *(unsigned char *)(a1 + 16) = v15;
      sub_21F7656A8(v16, v17, v18);
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21F7D26B8(a1);
      long long v26 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v26;
    }
  }
  else if (v5)
  {
    uint64_t v23 = *(void *)a2;
    uint64_t v24 = *((void *)a2 + 1);
    char v25 = *((unsigned char *)a2 + 16);
    sub_21F7652C0(*(void *)a2, v24, v25);
    *(void *)a1 = v23;
    *(void *)(a1 + 8) = v24;
    *(unsigned char *)(a1 + 16) = v25;
    *(void *)(a1 + 24) = *((void *)a2 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v27 = a2[1];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v27;
  }
  uint64_t v28 = *((void *)a2 + 4);
  uint64_t v29 = *((void *)a2 + 5);
  char v30 = *((unsigned char *)a2 + 48);
  sub_21F83F7B0(v28, v29, v30);
  uint64_t v31 = *(void *)(a1 + 32);
  uint64_t v32 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v28;
  *(void *)(a1 + 40) = v29;
  char v33 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v30;
  sub_21F83F6FC(v31, v32, v33);
LABEL_18:
  uint64_t v34 = (_OWORD *)(a1 + 56);
  uint64_t v35 = (long long *)((char *)a2 + 56);
  uint64_t v36 = *(void *)(a1 + 80);
  uint64_t v37 = *((void *)a2 + 10);
  if (v36 == 1)
  {
    if (!v37)
    {
      long long v51 = *(long long *)((char *)a2 + 72);
      *uint64_t v34 = *v35;
      *(_OWORD *)(a1 + 72) = v51;
      goto LABEL_29;
    }
    if (v37 != 1)
    {
      uint64_t v38 = *((void *)a2 + 7);
      uint64_t v39 = *((void *)a2 + 8);
      char v40 = *((unsigned char *)a2 + 72);
      sub_21F7652C0(v38, v39, v40);
      *(void *)(a1 + 56) = v38;
      *(void *)(a1 + 64) = v39;
      *(unsigned char *)(a1 + 72) = v40;
      *(void *)(a1 + 80) = *((void *)a2 + 10);
      swift_bridgeObjectRetain();
LABEL_29:
      uint64_t v52 = *((void *)a2 + 11);
      uint64_t v53 = *((void *)a2 + 12);
      unsigned __int8 v54 = *((unsigned char *)a2 + 104);
      sub_21F83F794(v52, v53, v54);
      *(void *)(a1 + 88) = v52;
      *(void *)(a1 + 96) = v53;
      *(unsigned char *)(a1 + 104) = v54;
      goto LABEL_35;
    }
LABEL_24:
    long long v42 = *v35;
    long long v43 = *(long long *)((char *)a2 + 72);
    long long v44 = *(long long *)((char *)a2 + 88);
    *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
    *(_OWORD *)(a1 + 72) = v43;
    *(_OWORD *)(a1 + 88) = v44;
    *uint64_t v34 = v42;
    goto LABEL_35;
  }
  if (v37 == 1)
  {
    uint64_t v41 = type metadata accessor for VisualMapper();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v41 - 8) + 8))(a1 + 56, v41);
    goto LABEL_24;
  }
  if (v36)
  {
    if (v37)
    {
      uint64_t v45 = *((void *)a2 + 7);
      uint64_t v46 = *((void *)a2 + 8);
      char v47 = *((unsigned char *)a2 + 72);
      sub_21F7652C0(v45, v46, v47);
      uint64_t v48 = *(void *)(a1 + 56);
      uint64_t v49 = *(void *)(a1 + 64);
      char v50 = *(unsigned char *)(a1 + 72);
      *(void *)(a1 + 56) = v45;
      *(void *)(a1 + 64) = v46;
      *(unsigned char *)(a1 + 72) = v47;
      sub_21F7656A8(v48, v49, v50);
      *(void *)(a1 + 80) = *((void *)a2 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21F7D26B8(a1 + 56);
      long long v58 = *(long long *)((char *)a2 + 72);
      *uint64_t v34 = *v35;
      *(_OWORD *)(a1 + 72) = v58;
    }
  }
  else if (v37)
  {
    uint64_t v55 = *((void *)a2 + 7);
    uint64_t v56 = *((void *)a2 + 8);
    char v57 = *((unsigned char *)a2 + 72);
    sub_21F7652C0(v55, v56, v57);
    *(void *)(a1 + 56) = v55;
    *(void *)(a1 + 64) = v56;
    *(unsigned char *)(a1 + 72) = v57;
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v59 = *(long long *)((char *)a2 + 72);
    *uint64_t v34 = *v35;
    *(_OWORD *)(a1 + 72) = v59;
  }
  uint64_t v60 = *((void *)a2 + 11);
  uint64_t v61 = *((void *)a2 + 12);
  unsigned __int8 v62 = *((unsigned char *)a2 + 104);
  sub_21F83F794(v60, v61, v62);
  uint64_t v63 = *(void *)(a1 + 88);
  uint64_t v64 = *(void *)(a1 + 96);
  *(void *)(a1 + 88) = v60;
  *(void *)(a1 + 96) = v61;
  unsigned __int8 v65 = *(unsigned char *)(a1 + 104);
  *(unsigned char *)(a1 + 104) = v62;
  sub_21F83F778(v63, v64, v65);
LABEL_35:
  long long v66 = (_OWORD *)(a1 + 112);
  uint64_t v67 = a2 + 7;
  uint64_t v68 = *(void *)(a1 + 136);
  uint64_t v69 = *((void *)a2 + 17);
  if (v68 == 1)
  {
    if (!v69)
    {
      long long v83 = a2[8];
      *long long v66 = *v67;
      *(_OWORD *)(a1 + 128) = v83;
      goto LABEL_46;
    }
    if (v69 != 1)
    {
      uint64_t v70 = *((void *)a2 + 14);
      uint64_t v71 = *((void *)a2 + 15);
      char v72 = *((unsigned char *)a2 + 128);
      sub_21F7652C0(v70, v71, v72);
      *(void *)(a1 + 112) = v70;
      *(void *)(a1 + 120) = v71;
      *(unsigned char *)(a1 + 128) = v72;
      *(void *)(a1 + 136) = *((void *)a2 + 17);
      swift_bridgeObjectRetain();
LABEL_46:
      uint64_t v84 = *((void *)a2 + 18);
      uint64_t v85 = *((void *)a2 + 19);
      uint64_t v86 = *((void *)a2 + 20);
      uint64_t v87 = *((void *)a2 + 21);
      uint64_t v88 = *((void *)a2 + 22);
      char v89 = *((unsigned char *)a2 + 184);
      sub_21F8512C4(v84, v85, v86, v87, v88, v89);
      *(void *)(a1 + 144) = v84;
      *(void *)(a1 + 152) = v85;
      *(void *)(a1 + 160) = v86;
      *(void *)(a1 + 168) = v87;
      *(void *)(a1 + 176) = v88;
      *(unsigned char *)(a1 + 184) = v89;
      goto LABEL_52;
    }
LABEL_41:
    *long long v66 = *v67;
    long long v74 = a2[8];
    long long v75 = a2[9];
    long long v76 = a2[10];
    *(_OWORD *)(a1 + 169) = *(long long *)((char *)a2 + 169);
    *(_OWORD *)(a1 + 144) = v75;
    *(_OWORD *)(a1 + 160) = v76;
    *(_OWORD *)(a1 + 128) = v74;
    goto LABEL_52;
  }
  if (v69 == 1)
  {
    uint64_t v73 = type metadata accessor for VisualMapper();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v73 - 8) + 8))(a1 + 112, v73);
    goto LABEL_41;
  }
  if (v68)
  {
    if (v69)
    {
      uint64_t v77 = *((void *)a2 + 14);
      uint64_t v78 = *((void *)a2 + 15);
      char v79 = *((unsigned char *)a2 + 128);
      sub_21F7652C0(v77, v78, v79);
      uint64_t v80 = *(void *)(a1 + 112);
      uint64_t v81 = *(void *)(a1 + 120);
      char v82 = *(unsigned char *)(a1 + 128);
      *(void *)(a1 + 112) = v77;
      *(void *)(a1 + 120) = v78;
      *(unsigned char *)(a1 + 128) = v79;
      sub_21F7656A8(v80, v81, v82);
      *(void *)(a1 + 136) = *((void *)a2 + 17);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21F7D26B8(a1 + 112);
      long long v93 = a2[8];
      *long long v66 = *v67;
      *(_OWORD *)(a1 + 128) = v93;
    }
  }
  else if (v69)
  {
    uint64_t v90 = *((void *)a2 + 14);
    uint64_t v91 = *((void *)a2 + 15);
    char v92 = *((unsigned char *)a2 + 128);
    sub_21F7652C0(v90, v91, v92);
    *(void *)(a1 + 112) = v90;
    *(void *)(a1 + 120) = v91;
    *(unsigned char *)(a1 + 128) = v92;
    *(void *)(a1 + 136) = *((void *)a2 + 17);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v94 = a2[8];
    *long long v66 = *v67;
    *(_OWORD *)(a1 + 128) = v94;
  }
  uint64_t v95 = *((void *)a2 + 18);
  uint64_t v96 = *((void *)a2 + 19);
  uint64_t v97 = *((void *)a2 + 20);
  uint64_t v98 = *((void *)a2 + 21);
  uint64_t v99 = *((void *)a2 + 22);
  char v100 = *((unsigned char *)a2 + 184);
  sub_21F8512C4(v95, v96, v97, v98, v99, v100);
  uint64_t v101 = *(void *)(a1 + 144);
  uint64_t v102 = *(void *)(a1 + 152);
  uint64_t v103 = *(void *)(a1 + 160);
  uint64_t v104 = *(void *)(a1 + 168);
  uint64_t v105 = *(void *)(a1 + 176);
  *(void *)(a1 + 144) = v95;
  *(void *)(a1 + 152) = v96;
  *(void *)(a1 + 160) = v97;
  *(void *)(a1 + 168) = v98;
  *(void *)(a1 + 176) = v99;
  char v106 = *(unsigned char *)(a1 + 184);
  *(unsigned char *)(a1 + 184) = v100;
  sub_21F83E970(v101, v102, v103, v104, v105, v106);
LABEL_52:
  uint64_t v107 = (_OWORD *)(a1 + 192);
  uint64_t v108 = a2 + 12;
  uint64_t v109 = *(void *)(a1 + 216);
  uint64_t v110 = *((void *)a2 + 27);
  if (v109 == 1)
  {
    if (!v110)
    {
      long long v124 = a2[13];
      *uint64_t v107 = *v108;
      *(_OWORD *)(a1 + 208) = v124;
LABEL_64:
      int v125 = *((unsigned __int8 *)a2 + 264);
      if (v125 != 2)
      {
        uint64_t v126 = a2 + 14;
        if (v125 != 1) {
          goto LABEL_78;
        }
LABEL_75:
        *(void *)(a1 + 224) = *v126;
LABEL_77:
        *(unsigned char *)(a1 + 264) = v125;
        swift_retain();
        goto LABEL_79;
      }
      goto LABEL_76;
    }
    if (v110 != 1)
    {
      uint64_t v111 = *((void *)a2 + 24);
      uint64_t v112 = *((void *)a2 + 25);
      char v113 = *((unsigned char *)a2 + 208);
      sub_21F7652C0(v111, v112, v113);
      *(void *)(a1 + 192) = v111;
      *(void *)(a1 + 200) = v112;
      *(unsigned char *)(a1 + 208) = v113;
      *(void *)(a1 + 216) = *((void *)a2 + 27);
      swift_bridgeObjectRetain();
      goto LABEL_64;
    }
LABEL_58:
    *uint64_t v107 = *v108;
    long long v115 = a2[13];
    long long v116 = a2[14];
    long long v117 = a2[15];
    *(_OWORD *)(a1 + 249) = *(long long *)((char *)a2 + 249);
    *(_OWORD *)(a1 + 224) = v116;
    *(_OWORD *)(a1 + 240) = v117;
    *(_OWORD *)(a1 + 208) = v115;
    goto LABEL_79;
  }
  if (v110 == 1)
  {
    uint64_t v114 = type metadata accessor for VisualMapper();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v114 - 8) + 8))(a1 + 192, v114);
    goto LABEL_58;
  }
  if (v109)
  {
    if (v110)
    {
      uint64_t v118 = *((void *)a2 + 24);
      uint64_t v119 = *((void *)a2 + 25);
      char v120 = *((unsigned char *)a2 + 208);
      sub_21F7652C0(v118, v119, v120);
      uint64_t v121 = *(void *)(a1 + 192);
      uint64_t v122 = *(void *)(a1 + 200);
      char v123 = *(unsigned char *)(a1 + 208);
      *(void *)(a1 + 192) = v118;
      *(void *)(a1 + 200) = v119;
      *(unsigned char *)(a1 + 208) = v120;
      sub_21F7656A8(v121, v122, v123);
      *(void *)(a1 + 216) = *((void *)a2 + 27);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if ((long long *)a1 == a2) {
        goto LABEL_79;
      }
LABEL_73:
      uint64_t v132 = type metadata accessor for VisualMapper.Mapping();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v132 - 8) + 8))(a1 + 224, v132);
      int v125 = *((unsigned __int8 *)a2 + 264);
      if (v125 != 2)
      {
        uint64_t v126 = a2 + 14;
        if (v125 != 1)
        {
LABEL_78:
          uint64_t v134 = *((void *)a2 + 31);
          *(void *)(a1 + 248) = v134;
          *(void *)(a1 + 256) = *((void *)a2 + 32);
          (**(void (***)(uint64_t, void *))(v134 - 8))(a1 + 224, v126);
          *(unsigned char *)(a1 + 264) = 0;
          goto LABEL_79;
        }
        goto LABEL_75;
      }
LABEL_76:
      uint64_t v133 = *((void *)a2 + 29);
      *(void *)(a1 + 224) = *((void *)a2 + 28);
      *(void *)(a1 + 232) = v133;
      LOBYTE(v125) = 2;
      goto LABEL_77;
    }
    sub_21F7D26B8(a1 + 192);
    long long v130 = a2[13];
    *uint64_t v107 = *v108;
    *(_OWORD *)(a1 + 208) = v130;
    if ((long long *)a1 != a2) {
      goto LABEL_73;
    }
  }
  else
  {
    if (!v110)
    {
      long long v131 = a2[13];
      *uint64_t v107 = *v108;
      *(_OWORD *)(a1 + 208) = v131;
      if ((long long *)a1 == a2) {
        goto LABEL_79;
      }
      goto LABEL_73;
    }
    uint64_t v127 = *((void *)a2 + 24);
    uint64_t v128 = *((void *)a2 + 25);
    char v129 = *((unsigned char *)a2 + 208);
    sub_21F7652C0(v127, v128, v129);
    *(void *)(a1 + 192) = v127;
    *(void *)(a1 + 200) = v128;
    *(unsigned char *)(a1 + 208) = v129;
    *(void *)(a1 + 216) = *((void *)a2 + 27);
    swift_bridgeObjectRetain();
    if ((long long *)a1 != a2) {
      goto LABEL_73;
    }
  }
LABEL_79:
  uint64_t v135 = *((unsigned __int8 *)a2 + 320);
  if (*(unsigned __int8 *)(a1 + 320) > 0xFBu)
  {
    if (v135 <= 0xFB)
    {
      uint64_t v136 = *((void *)a2 + 34);
      uint64_t v137 = *((void *)a2 + 35);
      uint64_t v138 = *((void *)a2 + 36);
      uint64_t v139 = *((void *)a2 + 37);
      uint64_t v140 = *((void *)a2 + 38);
      uint64_t v141 = *((void *)a2 + 39);
      sub_21F84EDA8(v136, v137, v138, v139, v140, v141, v135, (void (*)(void))sub_21F7BB3B4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F854540, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F854540);
      *(void *)(a1 + 272) = v136;
      *(void *)(a1 + 280) = v137;
      *(void *)(a1 + 288) = v138;
      *(void *)(a1 + 296) = v139;
      *(void *)(a1 + 304) = v140;
      *(void *)(a1 + 312) = v141;
      *(unsigned char *)(a1 + 320) = v135;
      goto LABEL_86;
    }
    goto LABEL_84;
  }
  if (v135 > 0xFB)
  {
    uint64_t v142 = type metadata accessor for TypedVectorizedProperties.SymbolSizeMapper();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v142 - 8) + 8))(a1 + 272, v142);
LABEL_84:
    long long v143 = a2[17];
    long long v144 = a2[18];
    long long v145 = a2[19];
    *(unsigned char *)(a1 + 320) = *((unsigned char *)a2 + 320);
    *(_OWORD *)(a1 + 288) = v144;
    *(_OWORD *)(a1 + 304) = v145;
    *(_OWORD *)(a1 + 272) = v143;
    goto LABEL_86;
  }
  uint64_t v146 = *((void *)a2 + 34);
  uint64_t v147 = *((void *)a2 + 35);
  uint64_t v148 = *((void *)a2 + 36);
  uint64_t v149 = *((void *)a2 + 37);
  uint64_t v150 = *((void *)a2 + 38);
  uint64_t v151 = *((void *)a2 + 39);
  sub_21F84EDA8(v146, v147, v148, v149, v150, v151, v135, (void (*)(void))sub_21F7BB3B4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F854540, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F854540);
  uint64_t v152 = *(void *)(a1 + 272);
  uint64_t v153 = *(void *)(a1 + 280);
  uint64_t v154 = *(void *)(a1 + 288);
  uint64_t v155 = *(void *)(a1 + 296);
  uint64_t v156 = *(void *)(a1 + 304);
  uint64_t v157 = *(void *)(a1 + 312);
  *(void *)(a1 + 272) = v146;
  *(void *)(a1 + 280) = v147;
  *(void *)(a1 + 288) = v148;
  *(void *)(a1 + 296) = v149;
  *(void *)(a1 + 304) = v150;
  *(void *)(a1 + 312) = v151;
  uint64_t v158 = *(unsigned __int8 *)(a1 + 320);
  *(unsigned char *)(a1 + 320) = v135;
  sub_21F84EDA8(v152, v153, v154, v155, v156, v157, v158, (void (*)(void))sub_21F7F42EC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F85453C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F85453C);
LABEL_86:
  unint64_t v159 = (char *)(a1 + 368);
  unint64_t v160 = (char *)(a2 + 23);
  uint64_t v161 = *(void *)(a1 + 376);
  uint64_t v162 = *((void *)a2 + 47);
  if (v161 != 1)
  {
    if (v162 != 1)
    {
      *(unsigned char *)(a1 + 328) = *((unsigned char *)a2 + 328);
      uint64_t v174 = *((void *)a2 + 42);
      *(unsigned char *)(a1 + 344) = *((unsigned char *)a2 + 344);
      *(void *)(a1 + 336) = v174;
      unint64_t v175 = (_OWORD *)(a1 + 352);
      uint64_t v176 = a2 + 22;
      uint64_t v177 = *((void *)a2 + 47);
      uint64_t v362 = (char *)(a1 + 368);
      unsigned int v361 = (char *)(a2 + 23);
      if (v161)
      {
        if (v177)
        {
          uint64_t v178 = *((void *)a2 + 44);
          uint64_t v179 = *((void *)a2 + 45);
          char v180 = *v160;
          sub_21F7652C0(v178, v179, *v160);
          uint64_t v181 = *(void *)(a1 + 352);
          uint64_t v182 = *(void *)(a1 + 360);
          char v183 = *v159;
          *(void *)(a1 + 352) = v178;
          *(void *)(a1 + 360) = v179;
          *unint64_t v159 = v180;
          sub_21F7656A8(v181, v182, v183);
          *(void *)(a1 + 376) = *((void *)a2 + 47);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        else
        {
          sub_21F7D26B8(a1 + 352);
          long long v196 = a2[23];
          *unint64_t v175 = *v176;
          *(_OWORD *)(a1 + 368) = v196;
        }
      }
      else if (v177)
      {
        uint64_t v193 = *((void *)a2 + 44);
        uint64_t v194 = *((void *)a2 + 45);
        char v195 = *v160;
        sub_21F7652C0(v193, v194, *v160);
        *(void *)(a1 + 352) = v193;
        *(void *)(a1 + 360) = v194;
        *unint64_t v159 = v195;
        *(void *)(a1 + 376) = *((void *)a2 + 47);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v197 = a2[23];
        *unint64_t v175 = *v176;
        *(_OWORD *)(a1 + 368) = v197;
      }
      uint64_t v198 = *((void *)a2 + 48);
      uint64_t v199 = *((void *)a2 + 49);
      uint64_t v200 = *((void *)a2 + 50);
      uint64_t v201 = *((void *)a2 + 51);
      uint64_t v202 = *((void *)a2 + 52);
      uint64_t v203 = *((void *)a2 + 53);
      uint64_t v205 = *((void *)a2 + 54);
      uint64_t v204 = *((void *)a2 + 55);
      uint64_t v358 = *((void *)a2 + 56);
      char v360 = *((unsigned char *)a2 + 456);
      sub_21F8512F0(v198, v199, v200, v201, v202, v203, v205, v204, v358, v360);
      uint64_t v206 = *(void *)(a1 + 384);
      uint64_t v207 = *(void *)(a1 + 392);
      uint64_t v208 = *(void *)(a1 + 400);
      uint64_t v209 = *(void *)(a1 + 408);
      uint64_t v210 = *(void *)(a1 + 416);
      uint64_t v211 = *(void *)(a1 + 424);
      uint64_t v212 = *(void *)(a1 + 432);
      uint64_t v213 = *(void *)(a1 + 440);
      uint64_t v214 = *(void *)(a1 + 448);
      char v215 = *(unsigned char *)(a1 + 456);
      *(void *)(a1 + 384) = v198;
      *(void *)(a1 + 392) = v199;
      *(void *)(a1 + 400) = v200;
      *(void *)(a1 + 408) = v201;
      *(void *)(a1 + 416) = v202;
      *(void *)(a1 + 424) = v203;
      *(void *)(a1 + 432) = v205;
      *(void *)(a1 + 440) = v204;
      *(void *)(a1 + 448) = v358;
      *(unsigned char *)(a1 + 456) = v360;
      sub_21F83E99C(v206, v207, v208, v209, v210, v211, v212, v213, v214, v215);
      goto LABEL_103;
    }
    uint64_t v167 = type metadata accessor for TypedVectorizedProperties.Position();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v167 - 8) + 8))(a1 + 328, v167);
LABEL_92:
    *(_OWORD *)(a1 + 328) = *(long long *)((char *)a2 + 328);
    long long v168 = *(long long *)((char *)a2 + 344);
    long long v169 = *(long long *)((char *)a2 + 360);
    long long v170 = *(long long *)((char *)a2 + 392);
    *(_OWORD *)(a1 + 376) = *(long long *)((char *)a2 + 376);
    *(_OWORD *)(a1 + 392) = v170;
    *(_OWORD *)(a1 + 344) = v168;
    *(_OWORD *)(a1 + 360) = v169;
    long long v171 = *(long long *)((char *)a2 + 408);
    long long v172 = *(long long *)((char *)a2 + 424);
    long long v173 = *(long long *)((char *)a2 + 440);
    *(unsigned char *)(a1 + 456) = *((unsigned char *)a2 + 456);
    *(_OWORD *)(a1 + 424) = v172;
    *(_OWORD *)(a1 + 440) = v173;
    *(_OWORD *)(a1 + 408) = v171;
    goto LABEL_104;
  }
  if (v162 == 1) {
    goto LABEL_92;
  }
  *(unsigned char *)(a1 + 328) = *((unsigned char *)a2 + 328);
  uint64_t v163 = *((void *)a2 + 42);
  *(unsigned char *)(a1 + 344) = *((unsigned char *)a2 + 344);
  *(void *)(a1 + 336) = v163;
  uint64_t v362 = (char *)(a1 + 368);
  unsigned int v361 = (char *)(a2 + 23);
  if (*((void *)a2 + 47))
  {
    uint64_t v164 = *((void *)a2 + 44);
    uint64_t v165 = *((void *)a2 + 45);
    char v166 = *v160;
    sub_21F7652C0(v164, v165, *v160);
    *(void *)(a1 + 352) = v164;
    *(void *)(a1 + 360) = v165;
    *unint64_t v159 = v166;
    *(void *)(a1 + 376) = *((void *)a2 + 47);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v184 = a2[23];
    *(_OWORD *)(a1 + 352) = a2[22];
    *(_OWORD *)(a1 + 368) = v184;
  }
  uint64_t v185 = *((void *)a2 + 48);
  uint64_t v186 = *((void *)a2 + 49);
  uint64_t v187 = *((void *)a2 + 50);
  uint64_t v188 = *((void *)a2 + 51);
  uint64_t v189 = *((void *)a2 + 52);
  uint64_t v190 = *((void *)a2 + 53);
  uint64_t v191 = *((void *)a2 + 54);
  uint64_t v192 = *((void *)a2 + 55);
  uint64_t v357 = *((void *)a2 + 56);
  char v359 = *((unsigned char *)a2 + 456);
  sub_21F8512F0(v185, v186, v187, v188, v189, v190, v191, v192, v357, v359);
  *(void *)(a1 + 384) = v185;
  *(void *)(a1 + 392) = v186;
  *(void *)(a1 + 400) = v187;
  *(void *)(a1 + 408) = v188;
  *(void *)(a1 + 416) = v189;
  *(void *)(a1 + 424) = v190;
  *(void *)(a1 + 432) = v191;
  *(void *)(a1 + 440) = v192;
  *(void *)(a1 + 448) = v357;
  *(unsigned char *)(a1 + 456) = v359;
LABEL_103:
  unint64_t v159 = v362;
  unint64_t v160 = v361;
LABEL_104:
  int v216 = (_OWORD *)(a1 + 464);
  unint64_t v217 = a2 + 29;
  uint64_t v218 = *(void *)(a1 + 488);
  uint64_t v219 = *((void *)a2 + 61);
  if (v218 == 1)
  {
    if (!v219)
    {
      long long v233 = a2[30];
      *int v216 = *v217;
      *(_OWORD *)(a1 + 480) = v233;
      goto LABEL_115;
    }
    if (v219 != 1)
    {
      uint64_t v220 = *((void *)a2 + 58);
      uint64_t v221 = *((void *)a2 + 59);
      char v222 = v160[112];
      sub_21F7652C0(v220, v221, v222);
      *(void *)(a1 + 464) = v220;
      *(void *)(a1 + 472) = v221;
      v159[112] = v222;
      *(void *)(a1 + 488) = *((void *)a2 + 61);
      swift_bridgeObjectRetain();
LABEL_115:
      uint64_t v234 = *((void *)a2 + 62);
      uint64_t v235 = *((void *)a2 + 63);
      char v236 = *((unsigned char *)a2 + 512);
      sub_21F85139C(v234, v235, v236);
      *(void *)(a1 + 496) = v234;
      *(void *)(a1 + 504) = v235;
      *(unsigned char *)(a1 + 512) = v236;
      goto LABEL_121;
    }
LABEL_110:
    long long v224 = *v217;
    long long v225 = a2[30];
    long long v226 = a2[31];
    *(unsigned char *)(a1 + 512) = *((unsigned char *)a2 + 512);
    *(_OWORD *)(a1 + 480) = v225;
    *(_OWORD *)(a1 + 496) = v226;
    *int v216 = v224;
    goto LABEL_121;
  }
  if (v219 == 1)
  {
    uint64_t v223 = type metadata accessor for VisualMapper();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v223 - 8) + 8))(a1 + 464, v223);
    goto LABEL_110;
  }
  if (v218)
  {
    if (v219)
    {
      uint64_t v227 = *((void *)a2 + 58);
      uint64_t v228 = *((void *)a2 + 59);
      char v229 = v160[112];
      sub_21F7652C0(v227, v228, v229);
      uint64_t v230 = *(void *)(a1 + 464);
      uint64_t v231 = *(void *)(a1 + 472);
      char v232 = v159[112];
      *(void *)(a1 + 464) = v227;
      *(void *)(a1 + 472) = v228;
      v159[112] = v229;
      sub_21F7656A8(v230, v231, v232);
      *(void *)(a1 + 488) = *((void *)a2 + 61);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21F7D26B8(a1 + 464);
      long long v240 = a2[30];
      *int v216 = *v217;
      *(_OWORD *)(a1 + 480) = v240;
    }
  }
  else if (v219)
  {
    uint64_t v237 = *((void *)a2 + 58);
    uint64_t v238 = *((void *)a2 + 59);
    char v239 = v160[112];
    sub_21F7652C0(v237, v238, v239);
    *(void *)(a1 + 464) = v237;
    *(void *)(a1 + 472) = v238;
    v159[112] = v239;
    *(void *)(a1 + 488) = *((void *)a2 + 61);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v241 = a2[30];
    *int v216 = *v217;
    *(_OWORD *)(a1 + 480) = v241;
  }
  uint64_t v242 = *((void *)a2 + 62);
  uint64_t v243 = *((void *)a2 + 63);
  char v244 = *((unsigned char *)a2 + 512);
  sub_21F85139C(v242, v243, v244);
  uint64_t v245 = *(void *)(a1 + 496);
  uint64_t v246 = *(void *)(a1 + 504);
  *(void *)(a1 + 496) = v242;
  *(void *)(a1 + 504) = v243;
  char v247 = *(unsigned char *)(a1 + 512);
  *(unsigned char *)(a1 + 512) = v244;
  sub_21F83F3BC(v245, v246, v247);
LABEL_121:
  unsigned int v248 = (_OWORD *)(a1 + 520);
  unsigned int v249 = (long long *)((char *)a2 + 520);
  uint64_t v250 = *(void *)(a1 + 544);
  uint64_t v251 = *((void *)a2 + 68);
  if (v250 == 1)
  {
    if (!v251)
    {
      long long v265 = *(long long *)((char *)a2 + 536);
      *unsigned int v248 = *v249;
      *(_OWORD *)(a1 + 536) = v265;
      goto LABEL_132;
    }
    if (v251 != 1)
    {
      uint64_t v252 = *((void *)a2 + 65);
      uint64_t v253 = *((void *)a2 + 66);
      char v254 = v160[168];
      sub_21F7652C0(v252, v253, v254);
      *(void *)(a1 + 520) = v252;
      *(void *)(a1 + 528) = v253;
      v159[168] = v254;
      *(void *)(a1 + 544) = *((void *)a2 + 68);
      swift_bridgeObjectRetain();
LABEL_132:
      uint64_t v266 = *((void *)a2 + 69);
      uint64_t v267 = *((void *)a2 + 70);
      char v268 = *((unsigned char *)a2 + 568);
      sub_21F83F7B0(v266, v267, v268);
      *(void *)(a1 + 552) = v266;
      *(void *)(a1 + 560) = v267;
      *(unsigned char *)(a1 + 568) = v268;
      goto LABEL_138;
    }
LABEL_127:
    long long v256 = *v249;
    long long v257 = *(long long *)((char *)a2 + 536);
    long long v258 = *(long long *)((char *)a2 + 552);
    *(unsigned char *)(a1 + 568) = *((unsigned char *)a2 + 568);
    *(_OWORD *)(a1 + 536) = v257;
    *(_OWORD *)(a1 + 552) = v258;
    *unsigned int v248 = v256;
    goto LABEL_138;
  }
  if (v251 == 1)
  {
    uint64_t v255 = type metadata accessor for VisualMapper();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v255 - 8) + 8))(a1 + 520, v255);
    goto LABEL_127;
  }
  if (v250)
  {
    if (v251)
    {
      uint64_t v259 = *((void *)a2 + 65);
      uint64_t v260 = *((void *)a2 + 66);
      char v261 = v160[168];
      sub_21F7652C0(v259, v260, v261);
      uint64_t v262 = *(void *)(a1 + 520);
      uint64_t v263 = *(void *)(a1 + 528);
      char v264 = v159[168];
      *(void *)(a1 + 520) = v259;
      *(void *)(a1 + 528) = v260;
      v159[168] = v261;
      sub_21F7656A8(v262, v263, v264);
      *(void *)(a1 + 544) = *((void *)a2 + 68);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21F7D26B8(a1 + 520);
      long long v272 = *(long long *)((char *)a2 + 536);
      *unsigned int v248 = *v249;
      *(_OWORD *)(a1 + 536) = v272;
    }
  }
  else if (v251)
  {
    uint64_t v269 = *((void *)a2 + 65);
    uint64_t v270 = *((void *)a2 + 66);
    char v271 = v160[168];
    sub_21F7652C0(v269, v270, v271);
    *(void *)(a1 + 520) = v269;
    *(void *)(a1 + 528) = v270;
    v159[168] = v271;
    *(void *)(a1 + 544) = *((void *)a2 + 68);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v273 = *(long long *)((char *)a2 + 536);
    *unsigned int v248 = *v249;
    *(_OWORD *)(a1 + 536) = v273;
  }
  uint64_t v274 = *((void *)a2 + 69);
  uint64_t v275 = *((void *)a2 + 70);
  char v276 = *((unsigned char *)a2 + 568);
  sub_21F83F7B0(v274, v275, v276);
  uint64_t v277 = *(void *)(a1 + 552);
  uint64_t v278 = *(void *)(a1 + 560);
  *(void *)(a1 + 552) = v274;
  *(void *)(a1 + 560) = v275;
  char v279 = *(unsigned char *)(a1 + 568);
  *(unsigned char *)(a1 + 568) = v276;
  sub_21F83F6FC(v277, v278, v279);
LABEL_138:
  unint64_t v280 = (_OWORD *)(a1 + 576);
  unint64_t v281 = a2 + 36;
  uint64_t v282 = *(void *)(a1 + 600);
  uint64_t v283 = *((void *)a2 + 75);
  if (v282 == 1)
  {
    if (!v283)
    {
      long long v297 = a2[37];
      *unint64_t v280 = *v281;
      *(_OWORD *)(a1 + 592) = v297;
      goto LABEL_149;
    }
    if (v283 != 1)
    {
      uint64_t v284 = *((void *)a2 + 72);
      uint64_t v285 = *((void *)a2 + 73);
      char v286 = v160[224];
      sub_21F7652C0(v284, v285, v286);
      *(void *)(a1 + 576) = v284;
      *(void *)(a1 + 584) = v285;
      v159[224] = v286;
      *(void *)(a1 + 600) = *((void *)a2 + 75);
      swift_bridgeObjectRetain();
LABEL_149:
      uint64_t v298 = *((void *)a2 + 76);
      uint64_t v299 = *((void *)a2 + 77);
      uint64_t v300 = *((void *)a2 + 78);
      uint64_t v301 = *((void *)a2 + 79);
      char v302 = *((unsigned char *)a2 + 640);
      sub_21F8513C8(v298, v299, v300, v301, v302);
      *(void *)(a1 + 608) = v298;
      *(void *)(a1 + 616) = v299;
      *(void *)(a1 + 624) = v300;
      *(void *)(a1 + 632) = v301;
      *(unsigned char *)(a1 + 640) = v302;
      goto LABEL_155;
    }
LABEL_144:
    *unint64_t v280 = *v281;
    long long v288 = a2[37];
    long long v289 = a2[38];
    long long v290 = a2[39];
    *(unsigned char *)(a1 + 640) = *((unsigned char *)a2 + 640);
    *(_OWORD *)(a1 + 608) = v289;
    *(_OWORD *)(a1 + 624) = v290;
    *(_OWORD *)(a1 + 592) = v288;
    goto LABEL_155;
  }
  if (v283 == 1)
  {
    uint64_t v287 = type metadata accessor for VisualMapper();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v287 - 8) + 8))(a1 + 576, v287);
    goto LABEL_144;
  }
  if (v282)
  {
    if (v283)
    {
      uint64_t v291 = *((void *)a2 + 72);
      uint64_t v292 = *((void *)a2 + 73);
      char v293 = v160[224];
      sub_21F7652C0(v291, v292, v293);
      uint64_t v294 = *(void *)(a1 + 576);
      uint64_t v295 = *(void *)(a1 + 584);
      char v296 = v159[224];
      *(void *)(a1 + 576) = v291;
      *(void *)(a1 + 584) = v292;
      v159[224] = v293;
      sub_21F7656A8(v294, v295, v296);
      *(void *)(a1 + 600) = *((void *)a2 + 75);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21F7D26B8(a1 + 576);
      long long v306 = a2[37];
      *unint64_t v280 = *v281;
      *(_OWORD *)(a1 + 592) = v306;
    }
  }
  else if (v283)
  {
    uint64_t v303 = *((void *)a2 + 72);
    uint64_t v304 = *((void *)a2 + 73);
    char v305 = v160[224];
    sub_21F7652C0(v303, v304, v305);
    *(void *)(a1 + 576) = v303;
    *(void *)(a1 + 584) = v304;
    v159[224] = v305;
    *(void *)(a1 + 600) = *((void *)a2 + 75);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v307 = a2[37];
    *unint64_t v280 = *v281;
    *(_OWORD *)(a1 + 592) = v307;
  }
  uint64_t v308 = *((void *)a2 + 76);
  uint64_t v309 = *((void *)a2 + 77);
  uint64_t v310 = *((void *)a2 + 78);
  uint64_t v311 = *((void *)a2 + 79);
  char v312 = *((unsigned char *)a2 + 640);
  sub_21F8513C8(v308, v309, v310, v311, v312);
  uint64_t v313 = *(void *)(a1 + 608);
  uint64_t v314 = *(void *)(a1 + 616);
  uint64_t v315 = *(void *)(a1 + 624);
  uint64_t v316 = *(void *)(a1 + 632);
  *(void *)(a1 + 608) = v308;
  *(void *)(a1 + 616) = v309;
  *(void *)(a1 + 624) = v310;
  *(void *)(a1 + 632) = v311;
  char v317 = *(unsigned char *)(a1 + 640);
  *(unsigned char *)(a1 + 640) = v312;
  sub_21F83F300(v313, v314, v315, v316, v317);
LABEL_155:
  unint64_t v318 = (_OWORD *)(a1 + 648);
  unint64_t v319 = (long long *)((char *)a2 + 648);
  uint64_t v320 = *(void *)(a1 + 672);
  uint64_t v321 = *((void *)a2 + 84);
  if (v320 == 1)
  {
    if (!v321)
    {
      long long v335 = *(long long *)((char *)a2 + 664);
      *unint64_t v318 = *v319;
      *(_OWORD *)(a1 + 664) = v335;
      goto LABEL_166;
    }
    if (v321 != 1)
    {
      uint64_t v322 = *((void *)a2 + 81);
      uint64_t v323 = *((void *)a2 + 82);
      char v324 = v160[296];
      sub_21F7652C0(v322, v323, v324);
      *(void *)(a1 + 648) = v322;
      *(void *)(a1 + 656) = v323;
      v159[296] = v324;
      *(void *)(a1 + 672) = *((void *)a2 + 84);
      swift_bridgeObjectRetain();
LABEL_166:
      uint64_t v336 = *((void *)a2 + 85);
      uint64_t v337 = *((void *)a2 + 86);
      uint64_t v338 = *((void *)a2 + 87);
      uint64_t v339 = *((void *)a2 + 88);
      char v340 = *((unsigned char *)a2 + 712);
      sub_21F8513C8(v336, v337, v338, v339, v340);
      *(void *)(a1 + 680) = v336;
      *(void *)(a1 + 688) = v337;
      *(void *)(a1 + 696) = v338;
      *(void *)(a1 + 704) = v339;
      *(unsigned char *)(a1 + 712) = v340;
      return a1;
    }
    goto LABEL_161;
  }
  if (v321 == 1)
  {
    uint64_t v325 = type metadata accessor for VisualMapper();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v325 - 8) + 8))(a1 + 648, v325);
LABEL_161:
    *unint64_t v318 = *v319;
    long long v326 = *(long long *)((char *)a2 + 664);
    long long v327 = *(long long *)((char *)a2 + 680);
    long long v328 = *(long long *)((char *)a2 + 696);
    *(unsigned char *)(a1 + 712) = *((unsigned char *)a2 + 712);
    *(_OWORD *)(a1 + 680) = v327;
    *(_OWORD *)(a1 + 696) = v328;
    *(_OWORD *)(a1 + 664) = v326;
    return a1;
  }
  if (v320)
  {
    if (v321)
    {
      uint64_t v329 = *((void *)a2 + 81);
      uint64_t v330 = *((void *)a2 + 82);
      char v331 = v160[296];
      sub_21F7652C0(v329, v330, v331);
      uint64_t v332 = *(void *)(a1 + 648);
      uint64_t v333 = *(void *)(a1 + 656);
      char v334 = v159[296];
      *(void *)(a1 + 648) = v329;
      *(void *)(a1 + 656) = v330;
      v159[296] = v331;
      sub_21F7656A8(v332, v333, v334);
      *(void *)(a1 + 672) = *((void *)a2 + 84);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21F7D26B8(a1 + 648);
      long long v344 = *(long long *)((char *)a2 + 664);
      *unint64_t v318 = *v319;
      *(_OWORD *)(a1 + 664) = v344;
    }
  }
  else if (v321)
  {
    uint64_t v341 = *((void *)a2 + 81);
    uint64_t v342 = *((void *)a2 + 82);
    char v343 = v160[296];
    sub_21F7652C0(v341, v342, v343);
    *(void *)(a1 + 648) = v341;
    *(void *)(a1 + 656) = v342;
    v159[296] = v343;
    *(void *)(a1 + 672) = *((void *)a2 + 84);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v345 = *(long long *)((char *)a2 + 664);
    *unint64_t v318 = *v319;
    *(_OWORD *)(a1 + 664) = v345;
  }
  uint64_t v346 = *((void *)a2 + 85);
  uint64_t v347 = *((void *)a2 + 86);
  uint64_t v348 = *((void *)a2 + 87);
  uint64_t v349 = *((void *)a2 + 88);
  char v350 = *((unsigned char *)a2 + 712);
  sub_21F8513C8(v346, v347, v348, v349, v350);
  uint64_t v351 = *(void *)(a1 + 680);
  uint64_t v352 = *(void *)(a1 + 688);
  uint64_t v353 = *(void *)(a1 + 696);
  uint64_t v354 = *(void *)(a1 + 704);
  *(void *)(a1 + 680) = v346;
  *(void *)(a1 + 688) = v347;
  *(void *)(a1 + 696) = v348;
  *(void *)(a1 + 704) = v349;
  char v355 = *(unsigned char *)(a1 + 712);
  *(unsigned char *)(a1 + 712) = v350;
  sub_21F83F300(v351, v352, v353, v354, v355);
  return a1;
}

void *sub_21F8532F0(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x2C9uLL);
}

uint64_t sub_21F8532F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4 == 1) {
    goto LABEL_4;
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5 == 1)
  {
    uint64_t v6 = type metadata accessor for VisualMapper();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
LABEL_4:
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
    goto LABEL_11;
  }
  if (!v4) {
    goto LABEL_9;
  }
  if (!v5)
  {
    sub_21F7D26B8(a1);
LABEL_9:
    long long v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
    goto LABEL_10;
  }
  char v8 = *(unsigned char *)(a2 + 16);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  char v11 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v8;
  sub_21F7656A8(v9, v10, v11);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
LABEL_10:
  char v13 = *(unsigned char *)(a2 + 48);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  char v16 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v13;
  sub_21F83F6FC(v14, v15, v16);
LABEL_11:
  uint64_t v17 = (_OWORD *)(a1 + 56);
  char v18 = (_OWORD *)(a2 + 56);
  uint64_t v19 = *(void *)(a1 + 80);
  if (v19 == 1)
  {
LABEL_14:
    long long v22 = *(_OWORD *)(a2 + 72);
    *uint64_t v17 = *v18;
    *(_OWORD *)(a1 + 72) = v22;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
    goto LABEL_21;
  }
  uint64_t v20 = *(void *)(a2 + 80);
  if (v20 == 1)
  {
    uint64_t v21 = type metadata accessor for VisualMapper();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(a1 + 56, v21);
    goto LABEL_14;
  }
  if (!v19) {
    goto LABEL_19;
  }
  if (!v20)
  {
    sub_21F7D26B8(a1 + 56);
LABEL_19:
    long long v27 = *(_OWORD *)(a2 + 72);
    *uint64_t v17 = *v18;
    *(_OWORD *)(a1 + 72) = v27;
    goto LABEL_20;
  }
  char v23 = *(unsigned char *)(a2 + 72);
  uint64_t v24 = *(void *)(a1 + 56);
  uint64_t v25 = *(void *)(a1 + 64);
  char v26 = *(unsigned char *)(a1 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = v23;
  sub_21F7656A8(v24, v25, v26);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
LABEL_20:
  char v28 = *(unsigned char *)(a2 + 104);
  uint64_t v29 = *(void *)(a1 + 88);
  uint64_t v30 = *(void *)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  unsigned __int8 v31 = *(unsigned char *)(a1 + 104);
  *(unsigned char *)(a1 + 104) = v28;
  sub_21F83F778(v29, v30, v31);
LABEL_21:
  uint64_t v32 = (_OWORD *)(a1 + 112);
  char v33 = (_OWORD *)(a2 + 112);
  uint64_t v34 = *(void *)(a1 + 136);
  if (v34 == 1)
  {
LABEL_24:
    long long v37 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v37;
    *(_OWORD *)(a1 + 169) = *(_OWORD *)(a2 + 169);
    long long v38 = *(_OWORD *)(a2 + 128);
    *uint64_t v32 = *v33;
    *(_OWORD *)(a1 + 128) = v38;
    goto LABEL_31;
  }
  uint64_t v35 = *(void *)(a2 + 136);
  if (v35 == 1)
  {
    uint64_t v36 = type metadata accessor for VisualMapper();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8))(a1 + 112, v36);
    goto LABEL_24;
  }
  if (!v34) {
    goto LABEL_29;
  }
  if (!v35)
  {
    sub_21F7D26B8(a1 + 112);
LABEL_29:
    long long v43 = *(_OWORD *)(a2 + 128);
    *uint64_t v32 = *v33;
    *(_OWORD *)(a1 + 128) = v43;
    goto LABEL_30;
  }
  char v39 = *(unsigned char *)(a2 + 128);
  uint64_t v40 = *(void *)(a1 + 112);
  uint64_t v41 = *(void *)(a1 + 120);
  char v42 = *(unsigned char *)(a1 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 128) = v39;
  sub_21F7656A8(v40, v41, v42);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
LABEL_30:
  uint64_t v44 = *(void *)(a2 + 176);
  char v45 = *(unsigned char *)(a2 + 184);
  uint64_t v46 = *(void *)(a1 + 144);
  uint64_t v47 = *(void *)(a1 + 152);
  uint64_t v48 = *(void *)(a1 + 160);
  uint64_t v49 = *(void *)(a1 + 168);
  uint64_t v50 = *(void *)(a1 + 176);
  long long v51 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v51;
  *(void *)(a1 + 176) = v44;
  char v52 = *(unsigned char *)(a1 + 184);
  *(unsigned char *)(a1 + 184) = v45;
  sub_21F83E970(v46, v47, v48, v49, v50, v52);
LABEL_31:
  uint64_t v53 = (_OWORD *)(a1 + 192);
  unsigned __int8 v54 = (_OWORD *)(a2 + 192);
  uint64_t v55 = *(void *)(a1 + 216);
  if (v55 == 1)
  {
LABEL_34:
    long long v58 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v58;
    *(_OWORD *)(a1 + 249) = *(_OWORD *)(a2 + 249);
    long long v59 = *(_OWORD *)(a2 + 208);
    *uint64_t v53 = *v54;
    *(_OWORD *)(a1 + 208) = v59;
    goto LABEL_35;
  }
  uint64_t v56 = *(void *)(a2 + 216);
  if (v56 == 1)
  {
    uint64_t v57 = type metadata accessor for VisualMapper();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v57 - 8) + 8))(a1 + 192, v57);
    goto LABEL_34;
  }
  if (!v55)
  {
LABEL_52:
    long long v87 = *(_OWORD *)(a2 + 208);
    *uint64_t v53 = *v54;
    *(_OWORD *)(a1 + 208) = v87;
    if (a1 == a2) {
      goto LABEL_35;
    }
    goto LABEL_53;
  }
  if (!v56)
  {
    sub_21F7D26B8(a1 + 192);
    goto LABEL_52;
  }
  char v65 = *(unsigned char *)(a2 + 208);
  uint64_t v66 = *(void *)(a1 + 192);
  uint64_t v67 = *(void *)(a1 + 200);
  char v68 = *(unsigned char *)(a1 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(unsigned char *)(a1 + 208) = v65;
  sub_21F7656A8(v66, v67, v68);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
LABEL_53:
    uint64_t v88 = type metadata accessor for VisualMapper.Mapping();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v88 - 8) + 8))(a1 + 224, v88);
    long long v89 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v89;
    *(_OWORD *)(a1 + 249) = *(_OWORD *)(a2 + 249);
  }
LABEL_35:
  uint64_t v60 = (char *)(a1 + 368);
  uint64_t v61 = *(unsigned __int8 *)(a1 + 320);
  if (v61 > 0xFB)
  {
LABEL_38:
    long long v64 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = v64;
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
    goto LABEL_44;
  }
  unsigned int v62 = *(unsigned __int8 *)(a2 + 320);
  if (v62 > 0xFB)
  {
    uint64_t v63 = type metadata accessor for TypedVectorizedProperties.SymbolSizeMapper();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8))(a1 + 272, v63);
    goto LABEL_38;
  }
  uint64_t v69 = *(void *)(a1 + 272);
  uint64_t v70 = *(void *)(a1 + 280);
  uint64_t v71 = *(void *)(a1 + 288);
  uint64_t v72 = *(void *)(a1 + 296);
  uint64_t v73 = *(void *)(a1 + 304);
  uint64_t v74 = *(void *)(a1 + 312);
  long long v75 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v75;
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(unsigned char *)(a1 + 320) = v62;
  sub_21F84EDA8(v69, v70, v71, v72, v73, v74, v61, (void (*)(void))sub_21F7F42EC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F85453C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_21F85453C);
LABEL_44:
  uint64_t v76 = *(void *)(a1 + 376);
  if (v76 == 1)
  {
LABEL_47:
    long long v79 = *(_OWORD *)(a2 + 440);
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
    *(_OWORD *)(a1 + 440) = v79;
    *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
    long long v80 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v80;
    long long v81 = *(_OWORD *)(a2 + 408);
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 408) = v81;
    long long v82 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v82;
    goto LABEL_57;
  }
  uint64_t v77 = *(void *)(a2 + 376);
  if (v77 == 1)
  {
    uint64_t v78 = type metadata accessor for TypedVectorizedProperties.Position();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v78 - 8) + 8))(a1 + 328, v78);
    goto LABEL_47;
  }
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(unsigned char *)(a1 + 344) = *(unsigned char *)(a2 + 344);
  if (!v76) {
    goto LABEL_55;
  }
  if (!v77)
  {
    sub_21F7D26B8(a1 + 352);
LABEL_55:
    long long v90 = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 368) = v90;
    goto LABEL_56;
  }
  char v83 = *(unsigned char *)(a2 + 368);
  uint64_t v84 = *(void *)(a1 + 352);
  uint64_t v85 = *(void *)(a1 + 360);
  char v86 = *v60;
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *uint64_t v60 = v83;
  sub_21F7656A8(v84, v85, v86);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  swift_bridgeObjectRelease();
LABEL_56:
  uint64_t v91 = *(void *)(a2 + 448);
  char v92 = *(unsigned char *)(a2 + 456);
  uint64_t v93 = *(void *)(a1 + 384);
  uint64_t v94 = *(void *)(a1 + 392);
  uint64_t v95 = *(void *)(a1 + 400);
  uint64_t v96 = *(void *)(a1 + 408);
  uint64_t v97 = *(void *)(a1 + 416);
  uint64_t v98 = *(void *)(a1 + 424);
  uint64_t v99 = *(void *)(a1 + 432);
  uint64_t v100 = *(void *)(a1 + 440);
  uint64_t v101 = *(void *)(a1 + 448);
  char v102 = *(unsigned char *)(a1 + 456);
  long long v103 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v103;
  long long v104 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 432) = v104;
  *(void *)(a1 + 448) = v91;
  *(unsigned char *)(a1 + 456) = v92;
  sub_21F83E99C(v93, v94, v95, v96, v97, v98, v99, v100, v101, v102);
LABEL_57:
  uint64_t v105 = (_OWORD *)(a1 + 464);
  char v106 = (_OWORD *)(a2 + 464);
  uint64_t v107 = *(void *)(a1 + 488);
  if (v107 == 1)
  {
LABEL_60:
    long long v110 = *(_OWORD *)(a2 + 480);
    *uint64_t v105 = *v106;
    *(_OWORD *)(a1 + 480) = v110;
    *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
    *(unsigned char *)(a1 + 512) = *(unsigned char *)(a2 + 512);
    goto LABEL_67;
  }
  uint64_t v108 = *(void *)(a2 + 488);
  if (v108 == 1)
  {
    uint64_t v109 = type metadata accessor for VisualMapper();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v109 - 8) + 8))(a1 + 464, v109);
    goto LABEL_60;
  }
  if (!v107) {
    goto LABEL_65;
  }
  if (!v108)
  {
    sub_21F7D26B8(a1 + 464);
LABEL_65:
    long long v115 = *(_OWORD *)(a2 + 480);
    *uint64_t v105 = *v106;
    *(_OWORD *)(a1 + 480) = v115;
    goto LABEL_66;
  }
  char v111 = *(unsigned char *)(a2 + 480);
  uint64_t v112 = *(void *)(a1 + 464);
  uint64_t v113 = *(void *)(a1 + 472);
  char v114 = *(unsigned char *)(a1 + 480);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(unsigned char *)(a1 + 480) = v111;
  sub_21F7656A8(v112, v113, v114);
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  swift_bridgeObjectRelease();
LABEL_66:
  char v116 = *(unsigned char *)(a2 + 512);
  uint64_t v117 = *(void *)(a1 + 496);
  uint64_t v118 = *(void *)(a1 + 504);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  char v119 = *(unsigned char *)(a1 + 512);
  *(unsigned char *)(a1 + 512) = v116;
  sub_21F83F3BC(v117, v118, v119);
LABEL_67:
  char v120 = (_OWORD *)(a1 + 520);
  uint64_t v121 = (_OWORD *)(a2 + 520);
  uint64_t v122 = *(void *)(a1 + 544);
  if (v122 == 1)
  {
LABEL_70:
    long long v125 = *(_OWORD *)(a2 + 536);
    _OWORD *v120 = *v121;
    *(_OWORD *)(a1 + 536) = v125;
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(unsigned char *)(a1 + 568) = *(unsigned char *)(a2 + 568);
    goto LABEL_77;
  }
  uint64_t v123 = *(void *)(a2 + 544);
  if (v123 == 1)
  {
    uint64_t v124 = type metadata accessor for VisualMapper();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v124 - 8) + 8))(a1 + 520, v124);
    goto LABEL_70;
  }
  if (!v122) {
    goto LABEL_75;
  }
  if (!v123)
  {
    sub_21F7D26B8(a1 + 520);
LABEL_75:
    long long v130 = *(_OWORD *)(a2 + 536);
    _OWORD *v120 = *v121;
    *(_OWORD *)(a1 + 536) = v130;
    goto LABEL_76;
  }
  char v126 = *(unsigned char *)(a2 + 536);
  uint64_t v127 = *(void *)(a1 + 520);
  uint64_t v128 = *(void *)(a1 + 528);
  char v129 = *(unsigned char *)(a1 + 536);
  *(_OWORD *)(a1 + 520) = *(_OWORD *)(a2 + 520);
  *(unsigned char *)(a1 + 536) = v126;
  sub_21F7656A8(v127, v128, v129);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  swift_bridgeObjectRelease();
LABEL_76:
  char v131 = *(unsigned char *)(a2 + 568);
  uint64_t v132 = *(void *)(a1 + 552);
  uint64_t v133 = *(void *)(a1 + 560);
  *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
  char v134 = *(unsigned char *)(a1 + 568);
  *(unsigned char *)(a1 + 568) = v131;
  sub_21F83F6FC(v132, v133, v134);
LABEL_77:
  uint64_t v135 = (_OWORD *)(a1 + 576);
  uint64_t v136 = (_OWORD *)(a2 + 576);
  uint64_t v137 = *(void *)(a1 + 600);
  if (v137 == 1)
  {
LABEL_80:
    long long v140 = *(_OWORD *)(a2 + 624);
    *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
    *(_OWORD *)(a1 + 624) = v140;
    *(unsigned char *)(a1 + 640) = *(unsigned char *)(a2 + 640);
    long long v141 = *(_OWORD *)(a2 + 592);
    *uint64_t v135 = *v136;
    *(_OWORD *)(a1 + 592) = v141;
    goto LABEL_87;
  }
  uint64_t v138 = *(void *)(a2 + 600);
  if (v138 == 1)
  {
    uint64_t v139 = type metadata accessor for VisualMapper();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v139 - 8) + 8))(a1 + 576, v139);
    goto LABEL_80;
  }
  if (!v137) {
    goto LABEL_85;
  }
  if (!v138)
  {
    sub_21F7D26B8(a1 + 576);
LABEL_85:
    long long v146 = *(_OWORD *)(a2 + 592);
    *uint64_t v135 = *v136;
    *(_OWORD *)(a1 + 592) = v146;
    goto LABEL_86;
  }
  char v142 = *(unsigned char *)(a2 + 592);
  uint64_t v143 = *(void *)(a1 + 576);
  uint64_t v144 = *(void *)(a1 + 584);
  char v145 = *(unsigned char *)(a1 + 592);
  *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
  *(unsigned char *)(a1 + 592) = v142;
  sub_21F7656A8(v143, v144, v145);
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  swift_bridgeObjectRelease();
LABEL_86:
  char v147 = *(unsigned char *)(a2 + 640);
  uint64_t v148 = *(void *)(a1 + 608);
  uint64_t v149 = *(void *)(a1 + 616);
  uint64_t v150 = *(void *)(a1 + 624);
  uint64_t v151 = *(void *)(a1 + 632);
  long long v152 = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
  *(_OWORD *)(a1 + 624) = v152;
  char v153 = *(unsigned char *)(a1 + 640);
  *(unsigned char *)(a1 + 640) = v147;
  sub_21F83F300(v148, v149, v150, v151, v153);
LABEL_87:
  uint64_t v154 = (_OWORD *)(a1 + 648);
  uint64_t v155 = (_OWORD *)(a2 + 648);
  uint64_t v156 = *(void *)(a1 + 672);
  if (v156 != 1)
  {
    uint64_t v157 = *(void *)(a2 + 672);
    if (v157 == 1)
    {
      uint64_t v158 = type metadata accessor for VisualMapper();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v158 - 8) + 8))(a1 + 648, v158);
      goto LABEL_90;
    }
    if (v156)
    {
      if (v157)
      {
        char v161 = *(unsigned char *)(a2 + 664);
        uint64_t v162 = *(void *)(a1 + 648);
        uint64_t v163 = *(void *)(a1 + 656);
        char v164 = *(unsigned char *)(a1 + 664);
        *uint64_t v154 = *v155;
        *(unsigned char *)(a1 + 664) = v161;
        sub_21F7656A8(v162, v163, v164);
        *(void *)(a1 + 672) = *(void *)(a2 + 672);
        swift_bridgeObjectRelease();
LABEL_96:
        char v166 = *(unsigned char *)(a2 + 712);
        uint64_t v167 = *(void *)(a1 + 680);
        uint64_t v168 = *(void *)(a1 + 688);
        uint64_t v169 = *(void *)(a1 + 696);
        uint64_t v170 = *(void *)(a1 + 704);
        long long v171 = *(_OWORD *)(a2 + 696);
        *(_OWORD *)(a1 + 680) = *(_OWORD *)(a2 + 680);
        *(_OWORD *)(a1 + 696) = v171;
        char v172 = *(unsigned char *)(a1 + 712);
        *(unsigned char *)(a1 + 712) = v166;
        sub_21F83F300(v167, v168, v169, v170, v172);
        return a1;
      }
      sub_21F7D26B8(a1 + 648);
    }
    long long v165 = *(_OWORD *)(a2 + 664);
    *uint64_t v154 = *v155;
    *(_OWORD *)(a1 + 664) = v165;
    goto LABEL_96;
  }
LABEL_90:
  long long v159 = *(_OWORD *)(a2 + 696);
  *(_OWORD *)(a1 + 680) = *(_OWORD *)(a2 + 680);
  *(_OWORD *)(a1 + 696) = v159;
  *(unsigned char *)(a1 + 712) = *(unsigned char *)(a2 + 712);
  long long v160 = *(_OWORD *)(a2 + 664);
  *uint64_t v154 = *v155;
  *(_OWORD *)(a1 + 664) = v160;
  return a1;
}

uint64_t sub_21F853CF4(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFD && *(unsigned char *)(a1 + 713)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t sub_21F853D58(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 712) = 0;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 713) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 713) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_21F853E64(uint64_t a1)
{
  if (*(void *)(a1 + 48))
  {
    sub_21F7656A8(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
    swift_bridgeObjectRelease();
  }
  return sub_21F83E99C(*(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(unsigned char *)(a1 + 128));
}

uint64_t sub_21F853ECC(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 48);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 24);
    uint64_t v6 = *(void *)(a2 + 32);
    char v7 = *(unsigned char *)(a2 + 40);
    sub_21F7652C0(v5, v6, v7);
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = v6;
    *(unsigned char *)(a1 + 40) = v7;
    *(void *)(a1 + 48) = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v8;
  }
  uint64_t v9 = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  uint64_t v13 = *(void *)(a2 + 88);
  uint64_t v14 = *(void *)(a2 + 96);
  uint64_t v15 = *(void *)(a2 + 104);
  uint64_t v16 = *(void *)(a2 + 112);
  uint64_t v19 = *(void *)(a2 + 120);
  char v17 = *(unsigned char *)(a2 + 128);
  sub_21F8512F0(v9, v10, v11, v12, v13, v14, v15, v16, v19, v17);
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = v12;
  *(void *)(a1 + 88) = v13;
  *(void *)(a1 + 96) = v14;
  *(void *)(a1 + 104) = v15;
  *(void *)(a1 + 112) = v16;
  *(void *)(a1 + 120) = v19;
  *(unsigned char *)(a1 + 128) = v17;
  return a1;
}

uint64_t sub_21F853FE0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = (_OWORD *)(a1 + 24);
  uint64_t v6 = (_OWORD *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48))
  {
    if (v7)
    {
      uint64_t v8 = *(void *)(a2 + 24);
      uint64_t v9 = *(void *)(a2 + 32);
      char v10 = *(unsigned char *)(a2 + 40);
      sub_21F7652C0(v8, v9, v10);
      uint64_t v11 = *(void *)(a1 + 24);
      uint64_t v12 = *(void *)(a1 + 32);
      char v13 = *(unsigned char *)(a1 + 40);
      *(void *)(a1 + 24) = v8;
      *(void *)(a1 + 32) = v9;
      *(unsigned char *)(a1 + 40) = v10;
      sub_21F7656A8(v11, v12, v13);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21F7D26B8(a1 + 24);
      long long v17 = v6[1];
      *uint64_t v5 = *v6;
      v5[1] = v17;
    }
  }
  else if (v7)
  {
    uint64_t v14 = *(void *)(a2 + 24);
    uint64_t v15 = *(void *)(a2 + 32);
    char v16 = *(unsigned char *)(a2 + 40);
    sub_21F7652C0(v14, v15, v16);
    *(void *)(a1 + 24) = v14;
    *(void *)(a1 + 32) = v15;
    *(unsigned char *)(a1 + 40) = v16;
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v18 = *(_OWORD *)(a2 + 40);
    *uint64_t v5 = *v6;
    *(_OWORD *)(a1 + 40) = v18;
  }
  uint64_t v19 = *(void *)(a2 + 56);
  uint64_t v20 = *(void *)(a2 + 64);
  uint64_t v21 = *(void *)(a2 + 72);
  uint64_t v22 = *(void *)(a2 + 80);
  uint64_t v23 = *(void *)(a2 + 88);
  uint64_t v24 = *(void *)(a2 + 96);
  uint64_t v25 = *(void *)(a2 + 104);
  uint64_t v26 = *(void *)(a2 + 112);
  uint64_t v39 = *(void *)(a2 + 120);
  char v27 = *(unsigned char *)(a2 + 128);
  sub_21F8512F0(v19, v20, v21, v22, v23, v24, v25, v26, v39, v27);
  uint64_t v28 = *(void *)(a1 + 56);
  uint64_t v29 = *(void *)(a1 + 64);
  uint64_t v30 = *(void *)(a1 + 72);
  uint64_t v31 = *(void *)(a1 + 80);
  uint64_t v32 = *(void *)(a1 + 88);
  uint64_t v33 = *(void *)(a1 + 96);
  uint64_t v34 = *(void *)(a1 + 104);
  uint64_t v35 = *(void *)(a1 + 112);
  uint64_t v36 = *(void *)(a1 + 120);
  char v37 = *(unsigned char *)(a1 + 128);
  *(void *)(a1 + 56) = v19;
  *(void *)(a1 + 64) = v20;
  *(void *)(a1 + 72) = v21;
  *(void *)(a1 + 80) = v22;
  *(void *)(a1 + 88) = v23;
  *(void *)(a1 + 96) = v24;
  *(void *)(a1 + 104) = v25;
  *(void *)(a1 + 112) = v26;
  *(void *)(a1 + 120) = v39;
  *(unsigned char *)(a1 + 128) = v27;
  sub_21F83E99C(v28, v29, v30, v31, v32, v33, v34, v35, v36, v37);
  return a1;
}

__n128 sub_21F854180(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t sub_21F8541B4(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  long long v4 = (_OWORD *)(a1 + 24);
  uint64_t v5 = (_OWORD *)(a2 + 24);
  if (!*(void *)(a1 + 48)) {
    goto LABEL_5;
  }
  uint64_t v6 = *(void *)(a2 + 48);
  if (!v6)
  {
    sub_21F7D26B8(a1 + 24);
LABEL_5:
    long long v11 = v5[1];
    _OWORD *v4 = *v5;
    v4[1] = v11;
    goto LABEL_6;
  }
  char v7 = *(unsigned char *)(a2 + 40);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  char v10 = *(unsigned char *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = v7;
  sub_21F7656A8(v8, v9, v10);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v12 = *(void *)(a2 + 120);
  char v13 = *(unsigned char *)(a2 + 128);
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v16 = *(void *)(a1 + 72);
  uint64_t v17 = *(void *)(a1 + 80);
  uint64_t v18 = *(void *)(a1 + 88);
  uint64_t v19 = *(void *)(a1 + 96);
  uint64_t v20 = *(void *)(a1 + 104);
  uint64_t v21 = *(void *)(a1 + 112);
  uint64_t v22 = *(void *)(a1 + 120);
  char v23 = *(unsigned char *)(a1 + 128);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = v12;
  *(unsigned char *)(a1 + 128) = v13;
  sub_21F83E99C(v14, v15, v16, v17, v18, v19, v20, v21, v22, v23);
  return a1;
}

uint64_t sub_21F8542B4(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 129)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_21F854310(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 128) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 129) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 129) = 0;
    }
    if (a2) {
      *(void *)(result + 48) = a2;
    }
  }
  return result;
}

uint64_t sub_21F854388(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_21F829E74(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_21F8543D0(uint64_t a1)
{
  return sub_21F82B5F8(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_21F8543E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_21F829E74(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  sub_21F82B5F8(v5, v6);
  return a1;
}

uint64_t sub_21F854434(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  sub_21F82B5F8(v5, v6);
  return a1;
}

uint64_t sub_21F854474(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t sub_21F8544BC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_21F854500(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_21F854508(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

uint64_t type metadata accessor for DimensionMapper.Mapping()
{
  return sub_21F764F08();
}

uint64_t sub_21F854544(uint64_t result, uint64_t (*a2)(uint64_t *, void *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = result;
  uint64_t v6 = a5 - a4;
  if (a5 != a4)
  {
    if (a5 >= a4)
    {
      uint64_t v10 = 0;
      while (a4 + v10 < a5)
      {
        if (__OFADD__(v10, 1)) {
          goto LABEL_12;
        }
        v11[0] = v10;
        v11[1] = a4 + v10;
        __n128 result = a2(&v12, v11);
        if (v5) {
          return swift_bridgeObjectRelease();
        }
        if (v6 == ++v10) {
          return v12;
        }
      }
      __break(1u);
LABEL_12:
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t AreaPlot<A>.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  char v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F8B0FF0(v2, v4, a2);
  sub_21F8B0FF0(v7, v4, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_21F8546EC(uint64_t a1, uint64_t a2)
{
  return AreaPlot<A>.body.getter(a1, *(void *)(a2 - 8));
}

uint64_t AreaPlot.init<A, B, C>(_:x:y:stacking:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  int v62 = a4;
  uint64_t v65 = a2;
  uint64_t v66 = a3;
  uint64_t v63 = a9;
  uint64_t v64 = a1;
  uint64_t v56 = a6;
  uint64_t v57 = a10;
  uint64_t v60 = a7;
  uint64_t v61 = a11;
  uint64_t v50 = a8;
  swift_getAssociatedTypeWitness();
  uint64_t v55 = type metadata accessor for PlottableProjection();
  uint64_t v12 = *(void *)(v55 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x270FA5388](v55);
  uint64_t v53 = (char *)&v48 - v14;
  uint64_t v15 = type metadata accessor for PlottableProjection();
  uint64_t v49 = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v48 - v18;
  uint64_t v54 = *(void *)(a5 - 8);
  uint64_t v20 = v54;
  MEMORY[0x270FA5388](v21);
  char v23 = (char *)&v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v51 = v23;
  uint64_t v24 = type metadata accessor for VectorizedAreaPlotContent();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v58 = v24;
  uint64_t v59 = v25;
  __n128 v26 = MEMORY[0x270FA5388](v24);
  uint64_t v52 = (uint64_t)&v48 - v27;
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v20 + 16);
  uint64_t v29 = v23;
  uint64_t v30 = a5;
  uint64_t v48 = a5;
  v28(v29, v64, a5, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v65, v15);
  uint64_t v31 = v53;
  uint64_t v32 = v55;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v53, v66, v55);
  unint64_t v33 = (*(unsigned __int8 *)(v16 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v34 = (v17 + *(unsigned __int8 *)(v12 + 80) + v33) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v35 = v34 + v13;
  uint64_t v36 = (char *)swift_allocObject();
  uint64_t v37 = v56;
  *((void *)v36 + 2) = v30;
  *((void *)v36 + 3) = v37;
  uint64_t v38 = v50;
  *((void *)v36 + 4) = v60;
  *((void *)v36 + 5) = v38;
  uint64_t v39 = v61;
  *((void *)v36 + 6) = v57;
  *((void *)v36 + 7) = v39;
  uint64_t v40 = v19;
  uint64_t v41 = v49;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v36[v33], v40, v49);
  char v42 = &v36[v34];
  uint64_t v43 = v32;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v42, v31, v32);
  v36[v35] = v62;
  uint64_t v44 = v52;
  uint64_t v45 = v48;
  sub_21F855940((uint64_t)v51, (uint64_t)sub_21F855470, (uint64_t)v36, v48, (uint64_t)&type metadata for AreaMark, v38, (uint64_t)&protocol witness table for AreaMark, v52);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v66, v43);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v65, v41);
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v64, v45);
  uint64_t v46 = v58;
  swift_getWitnessTable();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59 + 32))(v63, v44, v46);
}

uint64_t type metadata accessor for VectorizedAreaPlotContent()
{
  return sub_21F764F08();
}

void *sub_21F854B90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X5>, uint64_t a6@<X6>, void *a7@<X8>, uint64_t a8, uint64_t a9)
{
  int v47 = a4;
  uint64_t v45 = a2;
  uint64_t v46 = a3;
  uint64_t v43 = a1;
  uint64_t v48 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v40 = a6;
  uint64_t v41 = a9;
  uint64_t v44 = type metadata accessor for PlottableProjection();
  uint64_t v42 = *(void *)(v44 - 8);
  MEMORY[0x270FA5388](v44);
  uint64_t v39 = (char *)&v35 - v12;
  uint64_t v13 = type metadata accessor for PlottableValue();
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v38 = (uint64_t)&v35 - v14;
  uint64_t v36 = a5;
  uint64_t v37 = type metadata accessor for PlottableProjection();
  uint64_t v15 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  uint64_t v17 = (char *)&v35 - v16;
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v35 - v20;
  uint64_t v22 = type metadata accessor for PlottableValue();
  __n128 v23 = MEMORY[0x270FA5388](v22 - 8);
  uint64_t v25 = (char *)&v35 - v24;
  __n128 v26 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16);
  uint64_t v27 = v43;
  v26(v21, v43, AssociatedTypeWitness, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v45, v37);
  uint64_t v28 = v36;
  sub_21F83BFDC((uint64_t)v21, (uint64_t)v17, v36, AssociatedTypeWitness, a8, (uint64_t)v25);
  ((void (*)(char *, uint64_t, uint64_t))v26)(v21, v27, AssociatedTypeWitness);
  uint64_t v29 = (uint64_t)v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v39, v46, v44);
  uint64_t v30 = v38;
  uint64_t v31 = (uint64_t)v21;
  uint64_t v32 = v40;
  uint64_t v33 = v41;
  sub_21F83BFDC(v31, v29, v40, AssociatedTypeWitness, v41, v38);
  AreaMark.init<A, B>(x:y:stacking:)((uint64_t)v25, v30, v47, v28, v32, a8, v33, v49);
  return memcpy(v48, v49, 0x131uLL);
}

uint64_t sub_21F854F20()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  swift_getAssociatedTypeWitness();
  unsigned int v3 = (int *)(type metadata accessor for PlottableProjection() - 8);
  uint64_t v24 = *(unsigned __int8 *)(*(void *)v3 + 80);
  uint64_t v4 = (v24 + 64) & ~v24;
  uint64_t v5 = *(void *)(*(void *)v3 + 64);
  uint64_t v6 = type metadata accessor for PlottableProjection();
  uint64_t v23 = *(unsigned __int8 *)(*(void *)(v6 - 8) + 80);
  uint64_t v7 = (v4 + v5 + v23) & ~v23;
  uint64_t v22 = *(void *)(*(void *)(v6 - 8) + 64);
  uint64_t v8 = v0 + v4;
  sub_21F7656A8(*(void *)v8, *(void *)(v8 + 8), *(unsigned char *)(v8 + 16));
  swift_bridgeObjectRelease();
  uint64_t v9 = v8 + v3[13];
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v9, v1);
      break;
    case 1u:
      uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8);
      v10(v9, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v10(v9 + *(int *)(TupleTypeMetadata2 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v12 = sub_21FA24310();
      uint64_t v13 = sub_21FA24320();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v9 + *(int *)(TupleTypeMetadata3 + 48), v12);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v9 + *(int *)(TupleTypeMetadata3 + 64), v13);
      break;
    default:
      break;
  }
  sub_21F7656A8(*(void *)(v0 + v7), *(void *)(v0 + v7 + 8), *(unsigned char *)(v0 + v7 + 16));
  swift_bridgeObjectRelease();
  uint64_t v15 = v0 + v7 + *(int *)(v6 + 44);
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v15, v2);
      break;
    case 1u:
      uint64_t v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
      v16(v15, v2);
      uint64_t v17 = swift_getTupleTypeMetadata2();
      v16(v15 + *(int *)(v17 + 48), v2);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v18 = sub_21FA24310();
      uint64_t v19 = sub_21FA24320();
      uint64_t v20 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v15 + *(int *)(v20 + 48), v18);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v15 + *(int *)(v20 + 64), v19);
      break;
    default:
      break;
  }

  return MEMORY[0x270FA0238](v0, v22 + v7 + 1, v24 | v23 | 7);
}

void *sub_21F855470@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  uint64_t v5 = v2[6];
  uint64_t v6 = v2[7];
  swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  unint64_t v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  return sub_21F854B90(a1, (uint64_t)v2 + v8, (uint64_t)v2 + v11, *((unsigned __int8 *)v2 + v11 + *(void *)(v10 + 64)), v3, v4, a2, v5, v6);
}

void *sub_21F8555E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  int v10 = *(unsigned __int8 *)(a1 + 48);
  if (v10 == 1)
  {
    uint64_t v23 = *(void *)(a1 + 40);
    char v24 = 0x80;
  }
  else
  {
    uint64_t v23 = 0;
    char v24 = 0;
  }
  uint64_t v25 = *(void *)(a1 + 32);
  sub_21F7652C0(v6, v7, v8);
  swift_bridgeObjectRetain();
  uint64_t v12 = *(void *)a2;
  uint64_t v11 = *(void *)(a2 + 8);
  char v13 = *(unsigned char *)(a2 + 16);
  uint64_t v14 = *(void *)(a2 + 24);
  uint64_t v26 = *(void *)(a2 + 32);
  if (*(unsigned char *)(a2 + 48))
  {
    uint64_t v20 = *(void *)(a2 + 8);
    uint64_t v21 = *(void *)(a2 + 40);
    sub_21F7652C0(v12, v11, v13);
    swift_bridgeObjectRetain();
    if (v10)
    {
      sub_21F860B70(a2);
      sub_21F860B70(a1);
      uint64_t v29 = v6;
      uint64_t v30 = v7;
      char v31 = v8;
      uint64_t v32 = v9;
      uint64_t v33 = v25;
      uint64_t v34 = v23;
      char v35 = v24;
      uint64_t v15 = MEMORY[0x263F8D538];
      uint64_t v36 = MEMORY[0x263F8D538];
      uint64_t v37 = &protocol witness table for Double;
      sub_21F860BB0((uint64_t)&v29);
    }
    else
    {
      sub_21F770E38(v25, v23, v24);
      sub_21F860B70(a2);
      sub_21F860B70(a1);
      uint64_t v29 = v6;
      uint64_t v30 = v7;
      char v31 = v8;
      uint64_t v32 = v9;
      uint64_t v33 = v25;
      uint64_t v34 = v23;
      char v35 = v24;
      uint64_t v15 = MEMORY[0x263F8D538];
      uint64_t v36 = MEMORY[0x263F8D538];
      uint64_t v37 = &protocol witness table for Double;
      char v38 = a3;
      __int16 v39 = 256;
      uint64_t v40 = v26;
      uint64_t v41 = v21;
      char v42 = 0x80;
      uint64_t v44 = 0;
      uint64_t v43 = 0;
      char v45 = -4;
      sub_21F76CE2C((uint64_t)&v29);
    }
    __src[0] = v12;
    __src[1] = v20;
    LOBYTE(__src[2]) = v13;
    __src[3] = v14;
    __src[4] = v26;
    __src[5] = v21;
    LOBYTE(__src[6]) = 0x80;
    __src[7] = v15;
    __src[8] = &protocol witness table for Double;
    sub_21F860BB0((uint64_t)__src);
  }
  else
  {
    uint64_t v16 = *(void *)(a2 + 24);
    uint64_t v17 = *(void *)(a2 + 8);
    sub_21F7652C0(v12, v11, v13);
    swift_bridgeObjectRetain();
    sub_21F860B70(a2);
    sub_21F860B70(a1);
    uint64_t v29 = v6;
    uint64_t v30 = v7;
    char v31 = v8;
    uint64_t v32 = v9;
    uint64_t v33 = v25;
    uint64_t v34 = v23;
    char v35 = v24;
    uint64_t v18 = MEMORY[0x263F8D538];
    uint64_t v36 = MEMORY[0x263F8D538];
    uint64_t v37 = &protocol witness table for Double;
    sub_21F860BB0((uint64_t)&v29);
    __src[0] = v12;
    __src[1] = v17;
    LOBYTE(__src[2]) = v13;
    __src[3] = v16;
    __src[4] = v26;
    __src[5] = 0;
    LOBYTE(__src[6]) = 0;
    __src[7] = v18;
    __src[8] = &protocol witness table for Double;
    LOBYTE(__src[9]) = a3;
    *(_WORD *)((char *)&__src[9] + 1) = 257;
    __src[10] = v25;
    __src[11] = v23;
    LOBYTE(__src[12]) = v24;
    __src[13] = 0;
    __src[14] = 0;
    LOBYTE(__src[15]) = -4;
    sub_21F76CE2C((uint64_t)__src);
    sub_21F770E44(v25, v23, v24);
  }
  sub_21F764AF8((uint64_t)__src, (uint64_t)v46);
  sub_21F764AF8((uint64_t)&v29, (uint64_t)v47);
  sub_21F764AF8((uint64_t)v47, (uint64_t)__src);
  sub_21F764AF8((uint64_t)v46, (uint64_t)&__src[18]);
  __src[36] = 0;
  __src[37] = 0;
  LOBYTE(__src[38]) = -1;
  return memcpy(a4, __src, 0x131uLL);
}

uint64_t sub_21F855940@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v23 = a5;
  uint64_t v24 = a7;
  uint64_t v25 = a8;
  uint64_t v13 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Vectorizer();
  uint64_t v17 = *(void *)(v16 - 8);
  __n128 v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v22 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v15, a1, a4, v18);
  sub_21F83C640((uint64_t)v15, a2, a3, a4, v23, a6, v24, (uint64_t)v20);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, a4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(v25, v20, v16);
}

uint64_t AreaPlot.init<A, B, C>(_:xStart:xEnd:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v74 = a4;
  uint64_t v75 = a3;
  uint64_t v73 = a2;
  uint64_t v62 = a1;
  uint64_t v71 = a9;
  uint64_t v65 = a6;
  uint64_t v66 = a10;
  uint64_t v69 = a7;
  uint64_t v70 = a11;
  uint64_t v57 = a8;
  swift_getAssociatedTypeWitness();
  uint64_t v61 = type metadata accessor for PlottableProjection();
  uint64_t v72 = *(void *)(v61 - 8);
  uint64_t v63 = *(void *)(v72 + 64);
  MEMORY[0x270FA5388](v61);
  uint64_t v60 = (char *)&v53 - v13;
  uint64_t v14 = type metadata accessor for PlottableProjection();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  MEMORY[0x270FA5388](v14);
  uint64_t v56 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v53 - v18;
  uint64_t v55 = (char *)&v53 - v18;
  uint64_t v20 = a5;
  uint64_t v21 = *(void *)(a5 - 8);
  uint64_t v64 = v21;
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = v24;
  uint64_t v25 = type metadata accessor for VectorizedAreaPlotContent();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v67 = v25;
  uint64_t v68 = v26;
  __n128 v27 = MEMORY[0x270FA5388](v25);
  uint64_t v59 = (uint64_t)&v53 - v28;
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v21 + 16);
  uint64_t v30 = v24;
  uint64_t v31 = v20;
  uint64_t v54 = v20;
  v29(v30, a1, v20, v27);
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v32(v19, v73, v14);
  v32((char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v75, v14);
  uint64_t v33 = v72;
  char v35 = v60;
  uint64_t v34 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v60, v74, v61);
  uint64_t v36 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v37 = (v36 + 64) & ~v36;
  uint64_t v38 = (v16 + v36 + v37) & ~v36;
  unint64_t v39 = (v16 + *(unsigned __int8 *)(v33 + 80) + v38) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  uint64_t v40 = (char *)swift_allocObject();
  uint64_t v41 = v65;
  *((void *)v40 + 2) = v31;
  *((void *)v40 + 3) = v41;
  uint64_t v42 = v57;
  *((void *)v40 + 4) = v69;
  *((void *)v40 + 5) = v42;
  uint64_t v43 = v70;
  *((void *)v40 + 6) = v66;
  *((void *)v40 + 7) = v43;
  uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v44(&v40[v37], v55, v14);
  v44(&v40[v38], v56, v14);
  char v45 = &v40[v39];
  uint64_t v46 = v72;
  uint64_t v47 = v34;
  (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v45, v35, v34);
  uint64_t v48 = v59;
  uint64_t v49 = v54;
  sub_21F855940((uint64_t)v58, (uint64_t)sub_21F856B68, (uint64_t)v40, v54, (uint64_t)&type metadata for AreaMark, v42, (uint64_t)&protocol witness table for AreaMark, v59);
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v74, v47);
  uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v50(v75, v14);
  v50(v73, v14);
  (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v62, v49);
  uint64_t v51 = v67;
  swift_getWitnessTable();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v68 + 32))(v71, v48, v51);
}

void *sub_21F856004@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, void *a7@<X8>, uint64_t a8, uint64_t a9)
{
  uint64_t v61 = a3;
  uint64_t v62 = a4;
  uint64_t v56 = a2;
  uint64_t v63 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v57 = a6;
  uint64_t v58 = a9;
  uint64_t v13 = type metadata accessor for PlottableProjection();
  uint64_t v59 = *(void *)(v13 - 8);
  uint64_t v60 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v55 = (char *)&v46 - v14;
  uint64_t v15 = type metadata accessor for PlottableValue();
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v54 = (uint64_t)&v46 - v16;
  uint64_t v17 = a5;
  uint64_t v49 = a8;
  uint64_t v18 = type metadata accessor for PlottableProjection();
  uint64_t v52 = *(void *)(v18 - 8);
  uint64_t v53 = v18;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v46 - v19;
  uint64_t v21 = AssociatedTypeWitness;
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v46 - v24;
  uint64_t v26 = type metadata accessor for PlottableValue();
  MEMORY[0x270FA5388](v26 - 8);
  uint64_t v50 = (uint64_t)&v46 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v29 = MEMORY[0x270FA5388](v28);
  uint64_t v31 = (char *)&v46 - v30;
  uint64_t v51 = (uint64_t)&v46 - v30;
  uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v22 + 16);
  uint64_t v48 = v22 + 16;
  uint64_t v46 = a1;
  v47(v25, a1, v21, v29);
  uint64_t v32 = v53;
  uint64_t v52 = *(void *)(v52 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v52)(v20, v56, v53);
  uint64_t v33 = (uint64_t)v31;
  uint64_t v34 = v49;
  sub_21F83BFDC((uint64_t)v25, (uint64_t)v20, v17, v21, v49, v33);
  uint64_t v35 = a1;
  uint64_t v36 = v21;
  uint64_t v37 = v21;
  uint64_t v38 = (void (*)(char *, uint64_t, uint64_t))v47;
  ((void (*)(char *, uint64_t, uint64_t))v47)(v25, v35, v36);
  ((void (*)(char *, uint64_t, uint64_t))v52)(v20, v61, v32);
  uint64_t v39 = v50;
  sub_21F83BFDC((uint64_t)v25, (uint64_t)v20, v17, v37, v34, v50);
  v38(v25, v46, v37);
  uint64_t v40 = v55;
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v55, v62, v60);
  uint64_t v41 = v54;
  uint64_t v42 = (uint64_t)v40;
  uint64_t v43 = v57;
  uint64_t v44 = v58;
  sub_21F83BFDC((uint64_t)v25, v42, v57, v37, v58, v54);
  AreaMark.init<A, B>(xStart:xEnd:y:)(v51, v39, v41, v17, v43, v34, v44, v64);
  return memcpy(v63, v64, 0x131uLL);
}

uint64_t sub_21F856420()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for PlottableProjection();
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(v3 - 8) + 80);
  uint64_t v5 = (v4 + 64) & ~v4;
  uint64_t v6 = *(void *)(*(void *)(v3 - 8) + 64);
  uint64_t v39 = v4;
  uint64_t v7 = (v6 + v4 + v5) & ~v4;
  uint64_t v37 = v2;
  uint64_t v8 = type metadata accessor for PlottableProjection();
  uint64_t v40 = *(unsigned __int8 *)(*(void *)(v8 - 8) + 80);
  uint64_t v9 = v7 + v6 + v40;
  uint64_t v38 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v10 = v0 + v5;
  sub_21F7656A8(*(void *)v10, *(void *)(v10 + 8), *(unsigned char *)(v10 + 16));
  swift_bridgeObjectRelease();
  uint64_t v11 = v10 + *(int *)(v3 + 44);
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v11, v1);
      break;
    case 1u:
      uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8);
      v12(v11, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v12(v11 + *(int *)(TupleTypeMetadata2 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v35 = v8;
      uint64_t v14 = sub_21FA24310();
      uint64_t v36 = v9;
      uint64_t v15 = sub_21FA24320();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v11 + *(int *)(TupleTypeMetadata3 + 48), v14);
      uint64_t v17 = v11 + *(int *)(TupleTypeMetadata3 + 64);
      uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8);
      uint64_t v19 = v15;
      uint64_t v8 = v35;
      uint64_t v9 = v36;
      v18(v17, v19);
      break;
    default:
      break;
  }
  uint64_t v20 = v9 & ~v40;
  uint64_t v21 = v0 + v7;
  sub_21F7656A8(*(void *)v21, *(void *)(v21 + 8), *(unsigned char *)(v21 + 16));
  swift_bridgeObjectRelease();
  uint64_t v22 = v21 + *(int *)(v3 + 44);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v22, v1);
      break;
    case 1u:
      uint64_t v23 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8);
      v23(v22, v1);
      uint64_t v24 = swift_getTupleTypeMetadata2();
      v23(v22 + *(int *)(v24 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v25 = sub_21FA24310();
      uint64_t v26 = sub_21FA24320();
      uint64_t v27 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v22 + *(int *)(v27 + 48), v25);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(v22 + *(int *)(v27 + 64), v26);
      break;
    default:
      break;
  }
  sub_21F7656A8(*(void *)(v0 + v20), *(void *)(v0 + v20 + 8), *(unsigned char *)(v0 + v20 + 16));
  swift_bridgeObjectRelease();
  uint64_t v28 = v0 + v20 + *(int *)(v8 + 44);
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v37 - 8) + 8))(v28, v37);
      break;
    case 1u:
      __n128 v29 = *(void (**)(uint64_t, uint64_t))(*(void *)(v37 - 8) + 8);
      v29(v28, v37);
      uint64_t v30 = swift_getTupleTypeMetadata2();
      v29(v28 + *(int *)(v30 + 48), v37);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v31 = sub_21FA24310();
      uint64_t v32 = sub_21FA24320();
      uint64_t v33 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v28 + *(int *)(v33 + 48), v31);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(v28 + *(int *)(v33 + 64), v32);
      break;
    default:
      break;
  }

  return MEMORY[0x270FA0238](v0, v20 + v38, v39 | v40 | 7);
}

void *sub_21F856B68@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  uint64_t v5 = v2[6];
  uint64_t v6 = v2[7];
  swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v8 + 64) & ~v8;
  uint64_t v10 = *(void *)(v7 + 64);
  uint64_t v11 = (v10 + v8 + v9) & ~v8;
  uint64_t v12 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  return sub_21F856004(a1, (uint64_t)v2 + v9, (uint64_t)v2 + v11, (uint64_t)v2+ ((v11 + v10 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)), v3, v4, a2, v5, v6);
}

uint64_t AreaPlot.init<A, B, C>(_:x:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v64 = a6;
  uint64_t v70 = a4;
  uint64_t v71 = a3;
  uint64_t v72 = a2;
  uint64_t v69 = a1;
  uint64_t v60 = a7;
  uint64_t v61 = a11;
  uint64_t v66 = a10;
  uint64_t v67 = a9;
  uint64_t v55 = a8;
  swift_getAssociatedTypeWitness();
  uint64_t v59 = type metadata accessor for PlottableProjection();
  uint64_t v12 = *(void *)(v59 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x270FA5388](v59);
  uint64_t v68 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v56 = (char *)&v50 - v15;
  uint64_t v16 = type metadata accessor for PlottableProjection();
  uint64_t v53 = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v50 - v19;
  uint64_t v54 = (char *)&v50 - v19;
  uint64_t v62 = *(void *)(a5 - 8);
  uint64_t v21 = v62;
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v50 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = v24;
  uint64_t v51 = a5;
  uint64_t v63 = type metadata accessor for VectorizedAreaPlotContent();
  uint64_t v65 = *(void *)(v63 - 8);
  __n128 v25 = MEMORY[0x270FA5388](v63);
  uint64_t v58 = (uint64_t)&v50 - v26;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v21 + 16))(v24, v69, a5, v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v72, v16);
  uint64_t v27 = v12;
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  __n128 v29 = v56;
  uint64_t v30 = v59;
  v28(v56, v71, v59);
  v28(v68, v70, v30);
  uint64_t v31 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v52 = v17;
  uint64_t v32 = (v31 + 64) & ~v31;
  uint64_t v33 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v34 = (v18 + v33 + v32) & ~v33;
  uint64_t v35 = (v13 + v33 + v34) & ~v33;
  uint64_t v36 = (char *)swift_allocObject();
  uint64_t v37 = v51;
  uint64_t v38 = v64;
  *((void *)v36 + 2) = v51;
  *((void *)v36 + 3) = v38;
  uint64_t v39 = v54;
  uint64_t v40 = v55;
  *((void *)v36 + 4) = v60;
  *((void *)v36 + 5) = v40;
  uint64_t v41 = v61;
  *((void *)v36 + 6) = v66;
  *((void *)v36 + 7) = v41;
  uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  uint64_t v43 = v53;
  v42(&v36[v32], v39, v53);
  uint64_t v44 = &v36[v34];
  char v45 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
  v45(v44, v29, v30);
  v45(&v36[v35], v68, v30);
  uint64_t v46 = v58;
  sub_21F855940((uint64_t)v57, (uint64_t)sub_21F857D0C, (uint64_t)v36, v37, (uint64_t)&type metadata for AreaMark, v40, (uint64_t)&protocol witness table for AreaMark, v58);
  uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v47(v70, v30);
  v47(v71, v30);
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v72, v43);
  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v69, v37);
  uint64_t v48 = v63;
  swift_getWitnessTable();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v65 + 32))(v67, v46, v48);
}

void *sub_21F8571C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, void *a7@<X8>, uint64_t a8, uint64_t a9)
{
  uint64_t v47 = a3;
  uint64_t v48 = a4;
  uint64_t v46 = a2;
  uint64_t v49 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v42 = a5;
  uint64_t v43 = a8;
  uint64_t v45 = type metadata accessor for PlottableProjection();
  uint64_t v52 = *(void *)(v45 - 8);
  MEMORY[0x270FA5388](v45);
  uint64_t v41 = (char *)&v37 - v13;
  uint64_t v14 = type metadata accessor for PlottableValue();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v44 = (uint64_t)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v50 = a6;
  uint64_t v51 = (uint64_t)&v37 - v17;
  uint64_t v40 = type metadata accessor for PlottableProjection();
  uint64_t v18 = *(void *)(v40 - 8);
  MEMORY[0x270FA5388](v40);
  uint64_t v20 = (char *)&v37 - v19;
  uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v39 = a9;
  uint64_t v25 = type metadata accessor for PlottableValue();
  __n128 v26 = MEMORY[0x270FA5388](v25 - 8);
  uint64_t v28 = (char *)&v37 - v27;
  uint64_t v37 = a1;
  uint64_t v38 = (uint64_t)&v37 - v27;
  __n128 v29 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v21 + 16);
  v29(v24, a1, AssociatedTypeWitness, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v46, v40);
  sub_21F83BFDC((uint64_t)v24, (uint64_t)v20, v50, AssociatedTypeWitness, a9, (uint64_t)v28);
  ((void (*)(char *, uint64_t, uint64_t))v29)(v24, a1, AssociatedTypeWitness);
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v52 + 16);
  v52 += 16;
  uint64_t v31 = (uint64_t)v41;
  uint64_t v32 = v45;
  v30(v41, v47, v45);
  uint64_t v34 = v42;
  uint64_t v33 = v43;
  sub_21F83BFDC((uint64_t)v24, v31, v42, AssociatedTypeWitness, v43, v51);
  ((void (*)(char *, uint64_t, uint64_t))v29)(v24, v37, AssociatedTypeWitness);
  v30((char *)v31, v48, v32);
  uint64_t v35 = v44;
  sub_21F83BFDC((uint64_t)v24, v31, v34, AssociatedTypeWitness, v33, v44);
  AreaMark.init<A, B>(x:yStart:yEnd:)(v38, v51, v35, v50, v34, v39, v33, v53);
  return memcpy(v49, v53, 0x131uLL);
}

uint64_t sub_21F8575C8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  swift_getAssociatedTypeWitness();
  uint64_t v3 = (int *)(type metadata accessor for PlottableProjection() - 8);
  uint64_t v37 = *(unsigned __int8 *)(*(void *)v3 + 80);
  uint64_t v4 = (v37 + 64) & ~v37;
  uint64_t v5 = *(void *)(*(void *)v3 + 64);
  uint64_t v38 = type metadata accessor for PlottableProjection();
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(v38 - 8) + 80);
  uint64_t v7 = (v4 + v5 + v6) & ~v6;
  uint64_t v36 = *(void *)(*(void *)(v38 - 8) + 64);
  uint64_t v8 = v0 + v4;
  sub_21F7656A8(*(void *)v8, *(void *)(v8 + 8), *(unsigned char *)(v8 + 16));
  swift_bridgeObjectRelease();
  uint64_t v9 = v8 + v3[13];
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v9, v2);
      break;
    case 1u:
      uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
      v10(v9, v2);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v10(v9 + *(int *)(TupleTypeMetadata2 + 48), v2);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v12 = sub_21FA24310();
      uint64_t v13 = sub_21FA24320();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v9 + *(int *)(TupleTypeMetadata3 + 48), v12);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v9 + *(int *)(TupleTypeMetadata3 + 64), v13);
      break;
    default:
      break;
  }
  uint64_t v35 = v36 + v6 + v7;
  uint64_t v15 = v35 & ~v6;
  uint64_t v16 = v0 + v7;
  sub_21F7656A8(*(void *)v16, *(void *)(v16 + 8), *(unsigned char *)(v16 + 16));
  swift_bridgeObjectRelease();
  uint64_t v17 = v38;
  uint64_t v18 = v16 + *(int *)(v38 + 44);
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v18, v1);
      break;
    case 1u:
      uint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8);
      v19(v18, v1);
      uint64_t v20 = swift_getTupleTypeMetadata2();
      v19(v18 + *(int *)(v20 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v21 = sub_21FA24310();
      uint64_t v22 = sub_21FA24320();
      uint64_t v23 = swift_getTupleTypeMetadata3();
      uint64_t v24 = *(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8);
      uint64_t v25 = v21;
      uint64_t v17 = v38;
      v24(v18 + *(int *)(v23 + 48), v25);
      __n128 v26 = *(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8);
      uint64_t v27 = v22;
      uint64_t v15 = v35 & ~v6;
      v26(v18 + *(int *)(v23 + 64), v27);
      break;
    default:
      break;
  }
  sub_21F7656A8(*(void *)(v0 + v15), *(void *)(v0 + v15 + 8), *(unsigned char *)(v0 + v15 + 16));
  swift_bridgeObjectRelease();
  uint64_t v28 = v0 + v15 + *(int *)(v17 + 44);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v28, v1);
      break;
    case 1u:
      __n128 v29 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8);
      v29(v28, v1);
      uint64_t v30 = swift_getTupleTypeMetadata2();
      v29(v28 + *(int *)(v30 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v31 = sub_21FA24310();
      uint64_t v32 = sub_21FA24320();
      uint64_t v33 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v28 + *(int *)(v33 + 48), v31);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(v28 + *(int *)(v33 + 64), v32);
      break;
    default:
      break;
  }

  return MEMORY[0x270FA0238](v0, v15 + v36, v37 | v6 | 7);
}

void *sub_21F857D0C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  uint64_t v5 = v2[6];
  uint64_t v6 = v2[7];
  swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  return sub_21F8571C4(a1, (uint64_t)v2 + v8, (uint64_t)v2 + ((v8 + v9 + v11) & ~v11), (uint64_t)v2 + ((*(void *)(v10 + 64) + v11 + ((v8 + v9 + v11) & ~v11)) & ~v11), v3, v4, a2, v5, v6);
}

uint64_t AreaPlot.init<A, B, C, D>(_:x:y:series:stacking:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v74 = a5;
  uint64_t v82 = a3;
  uint64_t v83 = a4;
  uint64_t v81 = a2;
  uint64_t v79 = a1;
  uint64_t v75 = a9;
  uint64_t v64 = a7;
  uint64_t v65 = a12;
  uint64_t v68 = a8;
  uint64_t v69 = a13;
  uint64_t v72 = a10;
  uint64_t v73 = a14;
  uint64_t v77 = a11;
  swift_getAssociatedTypeWitness();
  uint64_t v80 = type metadata accessor for PlottableProjection();
  uint64_t v76 = *(void *)(v80 - 8);
  uint64_t v67 = *(void *)(v76 + 64);
  MEMORY[0x270FA5388](v80);
  uint64_t v78 = (char *)&v55 - v15;
  uint64_t v16 = type metadata accessor for PlottableProjection();
  uint64_t v59 = v16;
  uint64_t v61 = *(void *)(v16 - 8);
  uint64_t v17 = *(void *)(v61 + 64);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v55 - v18;
  uint64_t v60 = (char *)&v55 - v18;
  uint64_t v20 = type metadata accessor for PlottableProjection();
  uint64_t v58 = v20;
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void *)(v21 + 64);
  MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v55 - v23;
  uint64_t v66 = *(void *)(a6 - 8);
  uint64_t v25 = v66;
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v55 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = v28;
  uint64_t v56 = a6;
  uint64_t v29 = type metadata accessor for VectorizedAreaPlotContent();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v70 = v29;
  uint64_t v71 = v30;
  __n128 v31 = MEMORY[0x270FA5388](v29);
  uint64_t v63 = (uint64_t)&v55 - v32;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16))(v28, v79, a6, v31);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v24, v81, v20);
  uint64_t v33 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v19, v82, v16);
  uint64_t v34 = v76;
  (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v78, v83, v80);
  uint64_t v35 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v57 = v21;
  uint64_t v36 = (v35 + 80) & ~v35;
  unint64_t v37 = (v22 + *(unsigned __int8 *)(v33 + 80) + v36) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  unint64_t v38 = (v17 + *(unsigned __int8 *)(v34 + 80) + v37) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  uint64_t v39 = v38 + v67;
  uint64_t v40 = (char *)swift_allocObject();
  uint64_t v41 = v56;
  uint64_t v42 = v64;
  *((void *)v40 + 2) = v56;
  *((void *)v40 + 3) = v42;
  uint64_t v43 = v72;
  *((void *)v40 + 4) = v68;
  *((void *)v40 + 5) = v43;
  uint64_t v44 = v77;
  uint64_t v45 = v65;
  *((void *)v40 + 6) = v77;
  *((void *)v40 + 7) = v45;
  uint64_t v46 = v73;
  *((void *)v40 + 8) = v69;
  *((void *)v40 + 9) = v46;
  uint64_t v47 = &v40[v36];
  uint64_t v48 = v58;
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v47, v24, v58);
  uint64_t v49 = v59;
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(&v40[v37], v60, v59);
  uint64_t v50 = v76;
  uint64_t v51 = v80;
  (*(void (**)(char *, char *, uint64_t))(v76 + 32))(&v40[v38], v78, v80);
  v40[v39] = v74;
  uint64_t v52 = v63;
  sub_21F855940((uint64_t)v62, (uint64_t)sub_21F8590F8, (uint64_t)v40, v41, (uint64_t)&type metadata for AreaMark, v44, (uint64_t)&protocol witness table for AreaMark, v63);
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v83, v51);
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v82, v49);
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v81, v48);
  (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v79, v41);
  uint64_t v53 = v70;
  swift_getWitnessTable();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v71 + 32))(v75, v52, v53);
}

void *sub_21F858468@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int v66 = a5;
  uint64_t v64 = a3;
  uint64_t v65 = a4;
  uint64_t v59 = a2;
  uint64_t v57 = a1;
  uint64_t v67 = a8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v60 = a9;
  uint64_t v61 = a13;
  uint64_t v16 = type metadata accessor for PlottableProjection();
  uint64_t v62 = *(void *)(v16 - 8);
  uint64_t v63 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v58 = (char *)&v50 - v17;
  uint64_t v18 = type metadata accessor for PlottableValue();
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v56 = (uint64_t)&v50 - v19;
  uint64_t v52 = a7;
  uint64_t v53 = a12;
  uint64_t v20 = type metadata accessor for PlottableProjection();
  uint64_t v54 = *(void *)(v20 - 8);
  uint64_t v55 = v20;
  MEMORY[0x270FA5388](v20);
  uint64_t v51 = (char *)&v50 - v21;
  uint64_t v22 = type metadata accessor for PlottableValue();
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v50 = (uint64_t)&v50 - v23;
  uint64_t v68 = a6;
  uint64_t v69 = a11;
  uint64_t v24 = type metadata accessor for PlottableProjection();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v50 - v26;
  uint64_t v28 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v29);
  __n128 v31 = (char *)&v50 - v30;
  uint64_t v32 = type metadata accessor for PlottableValue();
  __n128 v33 = MEMORY[0x270FA5388](v32 - 8);
  uint64_t v35 = (char *)&v50 - v34;
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v28 + 16);
  uint64_t v37 = v57;
  v36(v31, v57, AssociatedTypeWitness, v33);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v27, v59, v24);
  sub_21F83BFDC((uint64_t)v31, (uint64_t)v27, v68, AssociatedTypeWitness, v69, (uint64_t)v35);
  uint64_t v38 = v37;
  ((void (*)(char *, uint64_t, uint64_t))v36)(v31, v37, AssociatedTypeWitness);
  uint64_t v39 = v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v51, v64, v55);
  uint64_t v40 = v50;
  uint64_t v41 = (uint64_t)v39;
  uint64_t v42 = v52;
  uint64_t v43 = v53;
  sub_21F83BFDC((uint64_t)v31, v41, v52, AssociatedTypeWitness, v53, v50);
  ((void (*)(char *, uint64_t, uint64_t))v36)(v31, v38, AssociatedTypeWitness);
  uint64_t v44 = v58;
  (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v58, v65, v63);
  uint64_t v45 = v56;
  uint64_t v46 = (uint64_t)v44;
  uint64_t v47 = v60;
  uint64_t v48 = v61;
  sub_21F83BFDC((uint64_t)v31, v46, v60, AssociatedTypeWitness, v61, v56);
  AreaMark.init<A, B, C>(x:y:series:stacking:)((uint64_t)v35, v40, v45, v66, v68, v42, v47, v69, v70, v43, v48);
  return memcpy(v67, v70, 0x131uLL);
}

uint64_t sub_21F85892C()
{
  uint64_t v1 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v2 = v0[5];
  swift_getAssociatedTypeWitness();
  uint64_t v4 = (int *)(type metadata accessor for PlottableProjection() - 8);
  uint64_t v43 = *(unsigned __int8 *)(*(void *)v4 + 80);
  uint64_t v5 = (v43 + 80) & ~v43;
  uint64_t v6 = *(void *)(*(void *)v4 + 64);
  uint64_t v38 = v3;
  uint64_t v37 = type metadata accessor for PlottableProjection();
  uint64_t v42 = *(unsigned __int8 *)(*(void *)(v37 - 8) + 80);
  uint64_t v7 = (v5 + v6 + v42) & ~v42;
  uint64_t v8 = *(void *)(*(void *)(v37 - 8) + 64);
  uint64_t v40 = v2;
  uint64_t v9 = v1;
  uint64_t v39 = type metadata accessor for PlottableProjection();
  uint64_t v41 = *(unsigned __int8 *)(*(void *)(v39 - 8) + 80);
  uint64_t v10 = v7 + v8 + v41;
  uint64_t v11 = *(void *)(*(void *)(v39 - 8) + 64);
  uint64_t v12 = (char *)v0 + v5;
  sub_21F7656A8(*(void *)v12, *((void *)v12 + 1), v12[16]);
  swift_bridgeObjectRelease();
  uint64_t v13 = &v12[v4[13]];
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(void *)(v1 - 8) + 8))(v13, v1);
      break;
    case 1u:
      uint64_t v14 = *(void (**)(char *, uint64_t))(*(void *)(v1 - 8) + 8);
      v14(v13, v9);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v14(&v13[*(int *)(TupleTypeMetadata2 + 48)], v9);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v16 = sub_21FA24310();
      uint64_t v17 = sub_21FA24320();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8))(&v13[*(int *)(TupleTypeMetadata3 + 48)], v16);
      (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8))(&v13[*(int *)(TupleTypeMetadata3 + 64)], v17);
      break;
    default:
      break;
  }
  uint64_t v19 = v10 & ~v41;
  uint64_t v20 = (char *)v0 + v7;
  sub_21F7656A8(*(void *)v20, *((void *)v20 + 1), v20[16]);
  swift_bridgeObjectRelease();
  uint64_t v21 = &v20[*(int *)(v37 + 44)];
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(void *)(v38 - 8) + 8))(v21, v38);
      break;
    case 1u:
      uint64_t v22 = *(void (**)(char *, uint64_t))(*(void *)(v38 - 8) + 8);
      v22(v21, v38);
      uint64_t v23 = swift_getTupleTypeMetadata2();
      v22(&v21[*(int *)(v23 + 48)], v38);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v24 = sub_21FA24310();
      uint64_t v25 = v11;
      uint64_t v26 = sub_21FA24320();
      uint64_t v27 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8))(&v21[*(int *)(v27 + 48)], v24);
      uint64_t v28 = *(void (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8);
      uint64_t v29 = v26;
      uint64_t v11 = v25;
      v28(&v21[*(int *)(v27 + 64)], v29);
      break;
    default:
      break;
  }
  sub_21F7656A8(*(void *)((char *)v0 + v19), *(void *)((char *)v0 + v19 + 8), *((unsigned char *)v0 + v19 + 16));
  swift_bridgeObjectRelease();
  uint64_t v30 = (char *)v0 + v19 + *(int *)(v39 + 44);
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(void *)(v40 - 8) + 8))(v30, v40);
      break;
    case 1u:
      __n128 v31 = *(void (**)(char *, uint64_t))(*(void *)(v40 - 8) + 8);
      v31(v30, v40);
      uint64_t v32 = swift_getTupleTypeMetadata2();
      v31(&v30[*(int *)(v32 + 48)], v40);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v33 = sub_21FA24310();
      uint64_t v34 = sub_21FA24320();
      uint64_t v35 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(void *)(v33 - 8) + 8))(&v30[*(int *)(v35 + 48)], v33);
      (*(void (**)(char *, uint64_t))(*(void *)(v34 - 8) + 8))(&v30[*(int *)(v35 + 64)], v34);
      break;
    default:
      break;
  }

  return MEMORY[0x270FA0238](v0, v11 + v19 + 1, v43 | v42 | v41 | 7);
}

void *sub_21F8590F8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v18 = v2[3];
  uint64_t v3 = v2[5];
  uint64_t v17 = v2[4];
  uint64_t v4 = v2[6];
  uint64_t v5 = v2[7];
  uint64_t v6 = v2[8];
  uint64_t v7 = v2[9];
  swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 64);
  uint64_t v11 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  unint64_t v12 = (v9 + v10 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = *(void *)(v11 + 64);
  uint64_t v14 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  unint64_t v15 = (v12 + v13 + *(unsigned __int8 *)(v14 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  return sub_21F858468(a1, (uint64_t)v2 + v9, (uint64_t)v2 + v12, (uint64_t)v2 + v15, *((unsigned __int8 *)v2 + v15 + *(void *)(v14 + 64)), v18, v17, a2, v3, v4, v5, v6, v7);
}

uint64_t AreaPlot.init<A, B, C, D>(_:xStart:xEnd:y:series:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v71 = a8;
  uint64_t v66 = a7;
  uint64_t v86 = a5;
  uint64_t v87 = a4;
  uint64_t v88 = a3;
  uint64_t v84 = a1;
  uint64_t v85 = a2;
  uint64_t v77 = a9;
  uint64_t v67 = a12;
  uint64_t v72 = a13;
  uint64_t v75 = a10;
  uint64_t v76 = a14;
  uint64_t v79 = a11;
  swift_getAssociatedTypeWitness();
  uint64_t v68 = type metadata accessor for PlottableProjection();
  uint64_t v82 = *(void *)(v68 - 8);
  uint64_t v70 = *(void *)(v82 + 64);
  MEMORY[0x270FA5388](v68);
  uint64_t v83 = (char *)&v60 - v15;
  uint64_t v81 = type metadata accessor for PlottableProjection();
  uint64_t v78 = *(void *)(v81 - 8);
  uint64_t v16 = *(void *)(v78 + 64);
  MEMORY[0x270FA5388](v81);
  uint64_t v80 = (char *)&v60 - v17;
  uint64_t v18 = type metadata accessor for PlottableProjection();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void *)(v19 + 64);
  MEMORY[0x270FA5388](v18);
  uint64_t v63 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v60 - v22;
  uint64_t v62 = (char *)&v60 - v22;
  uint64_t v24 = a6;
  uint64_t v25 = *(void *)(a6 - 8);
  uint64_t v69 = v25;
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v60 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = v28;
  uint64_t v61 = v24;
  uint64_t v29 = v79;
  uint64_t v30 = type metadata accessor for VectorizedAreaPlotContent();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v73 = v30;
  uint64_t v74 = v31;
  __n128 v32 = MEMORY[0x270FA5388](v30);
  uint64_t v65 = (uint64_t)&v60 - v33;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16))(v28, v84, v24, v32);
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v34(v23, v85, v18);
  v34((char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), v88, v18);
  uint64_t v35 = v78;
  (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v80, v87, v81);
  uint64_t v36 = v82;
  uint64_t v37 = v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v83, v86, v68);
  uint64_t v38 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v39 = (v38 + 80) & ~v38;
  uint64_t v40 = (v20 + v38 + v39) & ~v38;
  unint64_t v41 = (v20 + *(unsigned __int8 *)(v35 + 80) + v40) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  unint64_t v42 = (v16 + *(unsigned __int8 *)(v36 + 80) + v41) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
  uint64_t v43 = (char *)swift_allocObject();
  uint64_t v44 = v61;
  uint64_t v45 = v66;
  *((void *)v43 + 2) = v61;
  *((void *)v43 + 3) = v45;
  uint64_t v46 = v75;
  *((void *)v43 + 4) = v71;
  *((void *)v43 + 5) = v46;
  uint64_t v47 = v67;
  *((void *)v43 + 6) = v29;
  *((void *)v43 + 7) = v47;
  uint64_t v48 = v76;
  *((void *)v43 + 8) = v72;
  *((void *)v43 + 9) = v48;
  uint64_t v49 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
  v49(&v43[v39], v62, v18);
  v49(&v43[v40], v63, v18);
  uint64_t v50 = &v43[v41];
  uint64_t v51 = v78;
  uint64_t v52 = v81;
  (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v50, v80, v81);
  uint64_t v53 = &v43[v42];
  uint64_t v54 = v82;
  uint64_t v55 = v37;
  (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v53, v83, v37);
  uint64_t v56 = v65;
  sub_21F855940((uint64_t)v64, (uint64_t)sub_21F85A860, (uint64_t)v43, v44, (uint64_t)&type metadata for AreaMark, v79, (uint64_t)&protocol witness table for AreaMark, v65);
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v86, v55);
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v87, v52);
  uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  v57(v88, v18);
  v57(v85, v18);
  (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v84, v44);
  uint64_t v58 = v73;
  swift_getWitnessTable();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v74 + 32))(v77, v56, v58);
}

void *sub_21F85991C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v75 = a4;
  uint64_t v76 = a5;
  uint64_t v70 = a3;
  uint64_t v67 = a2;
  uint64_t v77 = a8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v71 = a9;
  uint64_t v72 = a13;
  uint64_t v17 = type metadata accessor for PlottableProjection();
  uint64_t v73 = *(void *)(v17 - 8);
  uint64_t v74 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v69 = (char *)v55 - v18;
  uint64_t v19 = type metadata accessor for PlottableValue();
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v68 = (uint64_t)v55 - v20;
  uint64_t v63 = a7;
  uint64_t v64 = a12;
  uint64_t v21 = type metadata accessor for PlottableProjection();
  uint64_t v65 = *(void *)(v21 - 8);
  uint64_t v66 = v21;
  MEMORY[0x270FA5388](v21);
  uint64_t v62 = (char *)v55 - v22;
  uint64_t v23 = type metadata accessor for PlottableValue();
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v61 = (uint64_t)v55 - v24;
  uint64_t v58 = a6;
  uint64_t v78 = a11;
  uint64_t v59 = type metadata accessor for PlottableProjection();
  uint64_t v25 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  uint64_t v27 = (char *)v55 - v26;
  uint64_t v28 = AssociatedTypeWitness;
  uint64_t v29 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v30);
  __n128 v32 = (char *)v55 - v31;
  uint64_t v33 = type metadata accessor for PlottableValue();
  MEMORY[0x270FA5388](v33 - 8);
  uint64_t v79 = (uint64_t)v55 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v36 = MEMORY[0x270FA5388](v35);
  uint64_t v38 = (char *)v55 - v37;
  uint64_t v60 = (uint64_t)v55 - v37;
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v29 + 16);
  uint64_t v57 = v29 + 16;
  v39(v32, a1, v28, v36);
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  v55[1] = v25 + 16;
  uint64_t v56 = v40;
  uint64_t v41 = v59;
  v40(v27, v67, v59);
  uint64_t v42 = v58;
  uint64_t v43 = v78;
  sub_21F83BFDC((uint64_t)v32, (uint64_t)v27, v58, v28, v78, (uint64_t)v38);
  ((void (*)(char *, uint64_t, uint64_t))v39)(v32, a1, v28);
  v56(v27, v70, v41);
  sub_21F83BFDC((uint64_t)v32, (uint64_t)v27, v42, v28, v43, v79);
  ((void (*)(char *, uint64_t, uint64_t))v39)(v32, a1, v28);
  uint64_t v44 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v62, v75, v66);
  uint64_t v45 = v61;
  uint64_t v46 = (uint64_t)v44;
  uint64_t v47 = v63;
  uint64_t v48 = v64;
  sub_21F83BFDC((uint64_t)v32, v46, v63, v28, v64, v61);
  ((void (*)(char *, uint64_t, uint64_t))v39)(v32, a1, v28);
  uint64_t v49 = (uint64_t)v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v69, v76, v74);
  uint64_t v50 = v68;
  uint64_t v51 = (uint64_t)v32;
  uint64_t v53 = v71;
  uint64_t v52 = v72;
  sub_21F83BFDC(v51, v49, v71, v28, v72, v68);
  AreaMark.init<A, B, C>(xStart:xEnd:y:series:)(v60, v79, v45, v50, v42, v47, v53, v78, v80, v48, v52);
  return memcpy(v77, v80, 0x131uLL);
}

uint64_t sub_21F859E78()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v43 = v0[3];
  swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for PlottableProjection();
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(v3 - 8) + 80);
  uint64_t v5 = (v4 + 80) & ~v4;
  uint64_t v6 = *(void *)(*(void *)(v3 - 8) + 64);
  uint64_t v53 = v4;
  uint64_t v47 = v1;
  uint64_t v45 = (v6 + v4 + v5) & ~v4;
  uint64_t v46 = type metadata accessor for PlottableProjection();
  uint64_t v52 = *(unsigned __int8 *)(*(void *)(v46 - 8) + 80);
  uint64_t v7 = (v45 + v6 + v52) & ~v52;
  uint64_t v8 = *(void *)(*(void *)(v46 - 8) + 64);
  uint64_t v51 = v2;
  uint64_t v9 = v43;
  uint64_t v48 = type metadata accessor for PlottableProjection();
  uint64_t v50 = *(unsigned __int8 *)(*(void *)(v48 - 8) + 80);
  uint64_t v10 = v8 + v50;
  uint64_t v49 = *(void *)(*(void *)(v48 - 8) + 64);
  uint64_t v11 = (char *)v0 + v5;
  sub_21F7656A8(*(void *)v11, *((void *)v11 + 1), v11[16]);
  swift_bridgeObjectRelease();
  unint64_t v12 = &v11[*(int *)(v3 + 44)];
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(void *)(v43 - 8) + 8))(v12, v43);
      break;
    case 1u:
      uint64_t v13 = *(void (**)(char *, uint64_t))(*(void *)(v43 - 8) + 8);
      v13(v12, v43);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v13(&v12[*(int *)(TupleTypeMetadata2 + 48)], v43);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v15 = sub_21FA24310();
      uint64_t v44 = v10;
      uint64_t v16 = sub_21FA24320();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      uint64_t v18 = *(void (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8);
      uint64_t v19 = v15;
      uint64_t v9 = v43;
      v18(&v12[*(int *)(TupleTypeMetadata3 + 48)], v19);
      uint64_t v20 = *(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8);
      uint64_t v21 = v16;
      uint64_t v10 = v44;
      v20(&v12[*(int *)(TupleTypeMetadata3 + 64)], v21);
      break;
    default:
      break;
  }
  uint64_t v22 = v7 + v10;
  sub_21F7656A8(*(void *)((char *)v0 + v45), *(void *)((char *)v0 + v45 + 8), *((unsigned char *)v0 + v45 + 16));
  swift_bridgeObjectRelease();
  uint64_t v23 = (char *)v0 + v45 + *(int *)(v3 + 44);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8))(v23, v9);
      break;
    case 1u:
      uint64_t v24 = *(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8);
      v24(v23, v9);
      uint64_t v25 = swift_getTupleTypeMetadata2();
      v24(&v23[*(int *)(v25 + 48)], v9);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v26 = sub_21FA24310();
      uint64_t v27 = sub_21FA24320();
      uint64_t v28 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8))(&v23[*(int *)(v28 + 48)], v26);
      (*(void (**)(char *, uint64_t))(*(void *)(v27 - 8) + 8))(&v23[*(int *)(v28 + 64)], v27);
      break;
    default:
      break;
  }
  uint64_t v29 = v22 & ~v50;
  sub_21F7656A8(*(void *)((char *)v0 + v7), *(void *)((char *)v0 + v7 + 8), *((unsigned char *)v0 + v7 + 16));
  swift_bridgeObjectRelease();
  uint64_t v30 = (char *)v0 + v7 + *(int *)(v46 + 44);
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(void *)(v47 - 8) + 8))(v30, v47);
      break;
    case 1u:
      uint64_t v31 = *(void (**)(char *, uint64_t))(*(void *)(v47 - 8) + 8);
      v31(v30, v47);
      uint64_t v32 = swift_getTupleTypeMetadata2();
      v31(&v30[*(int *)(v32 + 48)], v47);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v33 = sub_21FA24310();
      uint64_t v34 = sub_21FA24320();
      uint64_t v35 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(void *)(v33 - 8) + 8))(&v30[*(int *)(v35 + 48)], v33);
      (*(void (**)(char *, uint64_t))(*(void *)(v34 - 8) + 8))(&v30[*(int *)(v35 + 64)], v34);
      break;
    default:
      break;
  }
  sub_21F7656A8(*(void *)((char *)v0 + v29), *(void *)((char *)v0 + v29 + 8), *((unsigned char *)v0 + v29 + 16));
  swift_bridgeObjectRelease();
  __n128 v36 = (char *)v0 + v29 + *(int *)(v48 + 44);
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(void *)(v51 - 8) + 8))(v36, v51);
      break;
    case 1u:
      uint64_t v37 = *(void (**)(char *, uint64_t))(*(void *)(v51 - 8) + 8);
      v37(v36, v51);
      uint64_t v38 = swift_getTupleTypeMetadata2();
      v37(&v36[*(int *)(v38 + 48)], v51);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v39 = sub_21FA24310();
      uint64_t v40 = sub_21FA24320();
      uint64_t v41 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(void *)(v39 - 8) + 8))(&v36[*(int *)(v41 + 48)], v39);
      (*(void (**)(char *, uint64_t))(*(void *)(v40 - 8) + 8))(&v36[*(int *)(v41 + 64)], v40);
      break;
    default:
      break;
  }

  return MEMORY[0x270FA0238](v0, v29 + v49, v53 | v52 | v50 | 7);
}

void *sub_21F85A860@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v19 = v2[3];
  uint64_t v17 = v2[4];
  uint64_t v18 = v2[5];
  uint64_t v3 = v2[6];
  uint64_t v4 = v2[7];
  uint64_t v5 = v2[8];
  uint64_t v6 = v2[9];
  swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v8 + 80) & ~v8;
  uint64_t v10 = *(void *)(v7 + 64);
  uint64_t v11 = (v10 + v8 + v9) & ~v8;
  uint64_t v12 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  unint64_t v13 = (v11 + v10 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = *(void *)(v12 + 64);
  uint64_t v15 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  return sub_21F85991C(a1, (uint64_t)v2 + v9, (uint64_t)v2 + v11, (uint64_t)v2 + v13, (uint64_t)v2+ ((v13 + v14 + *(unsigned __int8 *)(v15 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80)), v19, v17, a2, v18, v3, v4, v5, v6);
}

uint64_t AreaPlot.init<A, B, C, D>(_:x:yStart:yEnd:series:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v69 = a8;
  uint64_t v88 = a5;
  uint64_t v89 = a4;
  uint64_t v90 = a3;
  uint64_t v86 = a1;
  uint64_t v87 = a2;
  uint64_t v70 = a13;
  uint64_t v73 = a7;
  uint64_t v74 = a12;
  uint64_t v78 = a14;
  uint64_t v79 = a9;
  uint64_t v77 = a10;
  uint64_t v82 = a11;
  swift_getAssociatedTypeWitness();
  uint64_t v85 = type metadata accessor for PlottableProjection();
  uint64_t v81 = *(void *)(v85 - 8);
  uint64_t v72 = *(void *)(v81 + 64);
  MEMORY[0x270FA5388](v85);
  uint64_t v84 = (char *)&v62 - v15;
  uint64_t v16 = type metadata accessor for PlottableProjection();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  MEMORY[0x270FA5388](v16);
  uint64_t v83 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v80 = (char *)&v62 - v20;
  uint64_t v21 = type metadata accessor for PlottableProjection();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(void *)(v22 + 64);
  MEMORY[0x270FA5388](v21);
  uint64_t v25 = (char *)&v62 - v24;
  uint64_t v66 = (char *)&v62 - v24;
  uint64_t v26 = a6;
  uint64_t v27 = *(void *)(a6 - 8);
  uint64_t v71 = v27;
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v62 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = v30;
  uint64_t v31 = type metadata accessor for VectorizedAreaPlotContent();
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v75 = v31;
  uint64_t v76 = v32;
  __n128 v33 = MEMORY[0x270FA5388](v31);
  uint64_t v68 = (uint64_t)&v62 - v34;
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v27 + 16);
  uint64_t v64 = v26;
  v35(v30, v86, v26, v33);
  __n128 v36 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v37 = v21;
  uint64_t v65 = v21;
  v36(v25, v87, v21);
  uint64_t v38 = v17;
  uint64_t v63 = v17;
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v39(v80, v90, v16);
  v39(v83, v89, v16);
  uint64_t v40 = v81;
  (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v84, v88, v85);
  unint64_t v41 = (*(unsigned __int8 *)(v22 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  uint64_t v42 = *(unsigned __int8 *)(v38 + 80);
  unint64_t v43 = (v23 + v42 + v41) & ~v42;
  unint64_t v44 = (v18 + v42 + v43) & ~v42;
  unint64_t v45 = (v18 + *(unsigned __int8 *)(v40 + 80) + v44) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
  uint64_t v46 = (char *)swift_allocObject();
  uint64_t v47 = v73;
  *((void *)v46 + 2) = v26;
  *((void *)v46 + 3) = v47;
  uint64_t v48 = v77;
  *((void *)v46 + 4) = v69;
  *((void *)v46 + 5) = v48;
  uint64_t v49 = v82;
  uint64_t v50 = v74;
  *((void *)v46 + 6) = v82;
  *((void *)v46 + 7) = v50;
  uint64_t v51 = v78;
  *((void *)v46 + 8) = v70;
  *((void *)v46 + 9) = v51;
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(&v46[v41], v66, v37);
  uint64_t v52 = v63;
  uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v63 + 32);
  v53(&v46[v43], v80, v16);
  v53(&v46[v44], v83, v16);
  uint64_t v54 = v81;
  uint64_t v55 = v85;
  (*(void (**)(char *, char *, uint64_t))(v81 + 32))(&v46[v45], v84, v85);
  uint64_t v56 = v68;
  uint64_t v57 = (uint64_t)v46;
  uint64_t v58 = v64;
  sub_21F855940((uint64_t)v67, (uint64_t)sub_21F85BFA4, v57, v64, (uint64_t)&type metadata for AreaMark, v49, (uint64_t)&protocol witness table for AreaMark, v68);
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v88, v55);
  uint64_t v59 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
  v59(v89, v16);
  v59(v90, v16);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v87, v65);
  (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v86, v58);
  uint64_t v60 = v75;
  swift_getWitnessTable();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v76 + 32))(v79, v56, v60);
}

void *sub_21F85B074@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v69 = a4;
  uint64_t v70 = a5;
  uint64_t v66 = a3;
  uint64_t v60 = a1;
  uint64_t v61 = a2;
  uint64_t v71 = a8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v64 = a9;
  uint64_t v65 = a13;
  uint64_t v16 = type metadata accessor for PlottableProjection();
  uint64_t v67 = *(void *)(v16 - 8);
  uint64_t v68 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v63 = (char *)&v51 - v17;
  uint64_t v18 = type metadata accessor for PlottableValue();
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v62 = (uint64_t)&v51 - v19;
  uint64_t v56 = a6;
  uint64_t v57 = a11;
  uint64_t v59 = type metadata accessor for PlottableProjection();
  uint64_t v74 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  uint64_t v55 = (char *)&v51 - v20;
  uint64_t v21 = type metadata accessor for PlottableValue();
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v58 = (uint64_t)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v72 = a7;
  uint64_t v73 = (uint64_t)&v51 - v24;
  uint64_t v52 = type metadata accessor for PlottableProjection();
  uint64_t v25 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  uint64_t v27 = (char *)&v51 - v26;
  uint64_t v28 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v29);
  uint64_t v31 = (char *)&v51 - v30;
  uint64_t v54 = a12;
  uint64_t v32 = type metadata accessor for PlottableValue();
  __n128 v33 = MEMORY[0x270FA5388](v32 - 8);
  uint64_t v35 = (char *)&v51 - v34;
  uint64_t v53 = (uint64_t)&v51 - v34;
  uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v28 + 16);
  uint64_t v36 = v60;
  v51(v31, v60, AssociatedTypeWitness, v33);
  (*(void (**)(char *, void, uint64_t))(v25 + 16))(v27, v61, v52);
  sub_21F83BFDC((uint64_t)v31, (uint64_t)v27, v72, AssociatedTypeWitness, a12, (uint64_t)v35);
  uint64_t v37 = v36;
  uint64_t v38 = (void (*)(char *, uint64_t, uint64_t))v51;
  ((void (*)(char *, uint64_t, uint64_t))v51)(v31, v36, AssociatedTypeWitness);
  uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 16);
  v74 += 16;
  uint64_t v61 = v39;
  uint64_t v40 = (uint64_t)v55;
  uint64_t v41 = v59;
  v39((uint64_t)v55, v66, v59);
  uint64_t v42 = v56;
  uint64_t v43 = v57;
  sub_21F83BFDC((uint64_t)v31, v40, v56, AssociatedTypeWitness, v57, v73);
  v38(v31, v37, AssociatedTypeWitness);
  v61(v40, v69, v41);
  uint64_t v44 = v58;
  sub_21F83BFDC((uint64_t)v31, v40, v42, AssociatedTypeWitness, v43, v58);
  v38(v31, v37, AssociatedTypeWitness);
  unint64_t v45 = v63;
  (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v63, v70, v68);
  uint64_t v46 = v62;
  uint64_t v47 = (uint64_t)v45;
  uint64_t v49 = v64;
  uint64_t v48 = v65;
  sub_21F83BFDC((uint64_t)v31, v47, v64, AssociatedTypeWitness, v65, v62);
  AreaMark.init<A, B, C>(x:yStart:yEnd:series:)(v53, v73, v44, v46, v72, v42, v49, v54, v75, v43, v48);
  return memcpy(v71, v75, 0x131uLL);
}

uint64_t sub_21F85B5D0()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  swift_getAssociatedTypeWitness();
  uint64_t v4 = (int *)(type metadata accessor for PlottableProjection() - 8);
  uint64_t v60 = *(unsigned __int8 *)(*(void *)v4 + 80);
  uint64_t v5 = (v60 + 80) & ~v60;
  uint64_t v6 = *(void *)(*(void *)v4 + 64);
  uint64_t v62 = v1;
  uint64_t v61 = type metadata accessor for PlottableProjection();
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v61 - 8) + 80);
  uint64_t v8 = (v5 + v6 + v7) & ~v7;
  uint64_t v9 = *(void *)(*(void *)(v61 - 8) + 64);
  uint64_t v58 = v3;
  uint64_t v59 = v7;
  uint64_t v64 = (v9 + v7 + v8) & ~v7;
  uint64_t v10 = v2;
  uint64_t v11 = type metadata accessor for PlottableProjection();
  uint64_t v63 = *(unsigned __int8 *)(*(void *)(v11 - 8) + 80);
  uint64_t v12 = v9 + v63;
  uint64_t v57 = *(void *)(*(void *)(v11 - 8) + 64);
  unint64_t v13 = (char *)v0 + v5;
  sub_21F7656A8(*(void *)v13, *((void *)v13 + 1), v13[16]);
  swift_bridgeObjectRelease();
  uint64_t v14 = &v13[v4[13]];
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v14, v2);
      break;
    case 1u:
      uint64_t v15 = *(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8);
      v15(v14, v10);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v15(&v14[*(int *)(TupleTypeMetadata2 + 48)], v10);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v17 = sub_21FA24310();
      uint64_t v18 = sub_21FA24320();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8))(&v14[*(int *)(TupleTypeMetadata3 + 48)], v17);
      (*(void (**)(char *, uint64_t))(*(void *)(v18 - 8) + 8))(&v14[*(int *)(TupleTypeMetadata3 + 64)], v18);
      break;
    default:
      break;
  }
  uint64_t v20 = v64;
  uint64_t v21 = v64 + v12;
  uint64_t v22 = (char *)v0 + v8;
  sub_21F7656A8(*(void *)v22, *((void *)v22 + 1), v22[16]);
  swift_bridgeObjectRelease();
  uint64_t v23 = v61;
  uint64_t v24 = v62;
  uint64_t v25 = &v22[*(int *)(v61 + 44)];
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(void *)(v62 - 8) + 8))(v25, v62);
      break;
    case 1u:
      uint64_t v26 = *(void (**)(char *, uint64_t))(*(void *)(v62 - 8) + 8);
      v26(v25, v62);
      uint64_t v27 = swift_getTupleTypeMetadata2();
      v26(&v25[*(int *)(v27 + 48)], v62);
      uint64_t v20 = v64;
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v28 = sub_21FA24310();
      uint64_t v29 = sub_21FA24320();
      uint64_t v30 = swift_getTupleTypeMetadata3();
      uint64_t v31 = *(void (**)(char *, uint64_t))(*(void *)(v28 - 8) + 8);
      uint64_t v32 = v28;
      uint64_t v23 = v61;
      v31(&v25[*(int *)(v30 + 48)], v32);
      uint64_t v33 = *(int *)(v30 + 64);
      uint64_t v20 = v64;
      uint64_t v34 = &v25[v33];
      uint64_t v35 = *(void (**)(char *, uint64_t))(*(void *)(v29 - 8) + 8);
      uint64_t v36 = v29;
      uint64_t v24 = v62;
      v35(v34, v36);
      break;
    default:
      break;
  }
  uint64_t v37 = v21 & ~v63;
  uint64_t v38 = v63;
  sub_21F7656A8(*(void *)((char *)v0 + v20), *(void *)((char *)v0 + v20 + 8), *((unsigned char *)v0 + v20 + 16));
  swift_bridgeObjectRelease();
  uint64_t v39 = (char *)v0 + v20 + *(int *)(v23 + 44);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8))(v39, v24);
      break;
    case 1u:
      uint64_t v40 = *(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8);
      v40(v39, v24);
      uint64_t v41 = swift_getTupleTypeMetadata2();
      v40(&v39[*(int *)(v41 + 48)], v24);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v42 = v11;
      uint64_t v43 = sub_21FA24310();
      uint64_t v44 = sub_21FA24320();
      uint64_t v45 = swift_getTupleTypeMetadata3();
      uint64_t v46 = *(void (**)(char *, uint64_t))(*(void *)(v43 - 8) + 8);
      uint64_t v47 = v43;
      uint64_t v11 = v42;
      v46(&v39[*(int *)(v45 + 48)], v47);
      uint64_t v48 = *(void (**)(char *, uint64_t))(*(void *)(v44 - 8) + 8);
      uint64_t v49 = v44;
      uint64_t v38 = v63;
      v48(&v39[*(int *)(v45 + 64)], v49);
      break;
    default:
      break;
  }
  sub_21F7656A8(*(void *)((char *)v0 + v37), *(void *)((char *)v0 + v37 + 8), *((unsigned char *)v0 + v37 + 16));
  swift_bridgeObjectRelease();
  uint64_t v50 = (char *)v0 + v37 + *(int *)(v11 + 44);
  type metadata accessor for PlottableProjection.Storage();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(void *)(v58 - 8) + 8))(v50, v58);
      break;
    case 1u:
      uint64_t v51 = *(void (**)(char *, uint64_t))(*(void *)(v58 - 8) + 8);
      v51(v50, v58);
      uint64_t v52 = swift_getTupleTypeMetadata2();
      v51(&v50[*(int *)(v52 + 48)], v58);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_21FA26AD0();
      uint64_t v53 = sub_21FA24310();
      uint64_t v54 = sub_21FA24320();
      uint64_t v55 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(void *)(v53 - 8) + 8))(&v50[*(int *)(v55 + 48)], v53);
      (*(void (**)(char *, uint64_t))(*(void *)(v54 - 8) + 8))(&v50[*(int *)(v55 + 64)], v54);
      break;
    default:
      break;
  }

  return MEMORY[0x270FA0238](v0, v37 + v57, v60 | v59 | v38 | 7);
}

void *sub_21F85BFA4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v19 = v2[4];
  uint64_t v17 = v2[3];
  uint64_t v18 = v2[5];
  uint64_t v3 = v2[6];
  uint64_t v4 = v2[7];
  uint64_t v5 = v2[8];
  uint64_t v6 = v2[9];
  swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  unint64_t v12 = (v8 + v9 + v11) & ~v11;
  uint64_t v13 = *(void *)(v10 + 64);
  unint64_t v14 = (v13 + v11 + v12) & ~v11;
  uint64_t v15 = *(void *)(type metadata accessor for PlottableProjection() - 8);
  return sub_21F85B074(a1, (void (*)(uint64_t, uint64_t, uint64_t))((char *)v2 + v8), (uint64_t)v2 + v12, (uint64_t)v2 + v14, (uint64_t)v2+ ((v14 + v13 + *(unsigned __int8 *)(v15 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80)), v17, v19, a2, v18, v3, v4, v5, v6);
}

uint64_t AreaPlot<A>.init(x:yStart:yEnd:domain:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, long long a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17)
{
  v19[0] = a1;
  v19[1] = a2;
  char v20 = a3 & 1;
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  uint64_t v23 = a6;
  char v24 = a7 & 1;
  uint64_t v25 = a8;
  uint64_t v26 = a10;
  uint64_t v27 = a11;
  char v28 = a12 & 1;
  long long v29 = a13;
  uint64_t v30 = a14;
  char v31 = a15 & 1;
  uint64_t v32 = a16;
  uint64_t v33 = a17;
  sub_21F85C218(v19);
  return sub_21F85C250((uint64_t)v19, a9);
}

void *sub_21F85C218(void *result)
{
  uint64_t v1 = result[6] & 1;
  uint64_t v2 = result[10] & 1;
  unint64_t v3 = result[14] & 1 | 0x8000000000000000;
  result[2] &= 1uLL;
  result[6] = v1;
  result[10] = v2;
  result[14] = v3;
  return result;
}

uint64_t sub_21F85C250(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  long long v2 = *(_OWORD *)(a1 + 16);
  long long v3 = *(_OWORD *)(a1 + 32);
  long long v4 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 64) = v4;
  *(_OWORD *)(a2 + 16) = v2;
  *(_OWORD *)(a2 + 32) = v3;
  long long v5 = *(_OWORD *)(a1 + 80);
  long long v6 = *(_OWORD *)(a1 + 96);
  long long v7 = *(_OWORD *)(a1 + 112);
  *(void *)(a2 + 128) = *(void *)(a1 + 128);
  *(_OWORD *)(a2 + 96) = v6;
  *(_OWORD *)(a2 + 112) = v7;
  *(_OWORD *)(a2 + 80) = v5;
  return a2;
}

uint64_t AreaPlot<A>.init(x:yStart:yEnd:domain:function:)@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  v21[0] = sub_21FA25340();
  v21[1] = v10;
  char v22 = v11 & 1;
  uint64_t v23 = v12;
  uint64_t v24 = sub_21FA25340();
  uint64_t v25 = v13;
  char v26 = v14 & 1;
  uint64_t v27 = v15;
  uint64_t v28 = sub_21FA25340();
  uint64_t v29 = v16;
  char v30 = v17 & 1;
  uint64_t v31 = v18;
  uint64_t v32 = a6;
  uint64_t v33 = a7;
  char v34 = a8 & 1;
  uint64_t v35 = a9;
  uint64_t v36 = a10;
  sub_21F85C218(v21);
  return sub_21F85C250((uint64_t)v21, a1);
}

uint64_t AreaPlot<A>.init<A, B, C>(x:yStart:yEnd:domain:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v58 = a8;
  uint64_t v57 = a7;
  int v54 = a6;
  uint64_t v56 = a5;
  uint64_t v55 = a4;
  uint64_t v52 = a3;
  uint64_t v50 = a2;
  uint64_t v46 = a1;
  uint64_t v59 = a9;
  uint64_t v53 = a15;
  uint64_t v51 = a14;
  uint64_t v15 = *(void *)(a12 - 8);
  MEMORY[0x270FA5388](a1);
  char v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(a11 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(void *)(a10 - 8);
  __n128 v24 = MEMORY[0x270FA5388](v23);
  (*(void (**)(char *, __n128))(v22 + 16))((char *)&v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0), v24);
  uint64_t v49 = sub_21FA25350();
  uint64_t v48 = v26;
  int v45 = v27;
  uint64_t v47 = v28;
  uint64_t v29 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v50, a11);
  uint64_t v51 = sub_21FA25350();
  uint64_t v44 = v30;
  int v42 = v31;
  uint64_t v43 = v32;
  uint64_t v33 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v52, a12);
  uint64_t v34 = sub_21FA25350();
  uint64_t v53 = v35;
  char v37 = v36;
  uint64_t v41 = v38;
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v33, a12);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v29, a11);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v46, a10);
  char v63 = v45 & 1;
  char v62 = v42 & 1;
  char v61 = v37 & 1;
  char v60 = v54 & 1;
  v64[0] = v49;
  v64[1] = v48;
  char v65 = v45 & 1;
  uint64_t v66 = v47;
  uint64_t v67 = v51;
  uint64_t v68 = v44;
  char v69 = v42 & 1;
  uint64_t v70 = v43;
  uint64_t v71 = v34;
  uint64_t v72 = v53;
  char v73 = v37 & 1;
  uint64_t v74 = v41;
  uint64_t v75 = v55;
  uint64_t v76 = v56;
  char v77 = v54 & 1;
  uint64_t v78 = v57;
  uint64_t v79 = v58;
  sub_21F85C218(v64);
  return sub_21F85C250((uint64_t)v64, v59);
}

uint64_t AreaPlot<A>.init(x:y:domain:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  v16[0] = a1;
  v16[1] = a2;
  char v17 = a3 & 1;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v20 = a6;
  char v21 = a7 & 1;
  uint64_t v22 = a8;
  uint64_t v23 = a10;
  uint64_t v24 = a11;
  char v25 = a12 & 1;
  uint64_t v26 = a13;
  uint64_t v27 = a14;
  sub_21F85C8C8(v16);
  return sub_21F85C250((uint64_t)v16, a9);
}

void *sub_21F85C8C8(void *result)
{
  uint64_t v1 = result[6] & 1;
  uint64_t v2 = result[10] & 1;
  uint64_t v3 = result[14] & 1;
  result[2] &= 1uLL;
  result[6] = v1;
  result[10] = v2;
  result[14] = v3;
  return result;
}

uint64_t AreaPlot<A>.init(x:y:domain:function:)@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  v14[0] = sub_21FA25340();
  v14[1] = v6;
  char v15 = v7 & 1;
  uint64_t v16 = v8;
  uint64_t v17 = sub_21FA25340();
  uint64_t v18 = v9;
  char v19 = v10 & 1;
  uint64_t v20 = v11;
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  char v23 = a4 & 1;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  sub_21F85C8C8(v14);
  return sub_21F85C250((uint64_t)v14, a1);
}

uint64_t AreaPlot<A>.init<A, B>(x:y:domain:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v39 = a6;
  uint64_t v40 = a7;
  int v38 = a5;
  uint64_t v37 = a4;
  uint64_t v36 = a3;
  uint64_t v35 = a1;
  uint64_t v41 = a9;
  uint64_t v12 = *(void *)(a10 - 8);
  MEMORY[0x270FA5388](a1);
  char v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v15 - 8);
  __n128 v18 = MEMORY[0x270FA5388](v17);
  (*(void (**)(char *, __n128))(v16 + 16))((char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v18);
  uint64_t v33 = sub_21FA25350();
  uint64_t v32 = v20;
  char v22 = v21;
  uint64_t v34 = v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, a10);
  uint64_t v24 = sub_21FA25350();
  uint64_t v26 = v25;
  char v28 = v27;
  uint64_t v30 = v29;
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a2, a10);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v35, a8);
  v42[0] = v33;
  v42[1] = v32;
  char v43 = v22 & 1;
  uint64_t v44 = v34;
  uint64_t v45 = v24;
  uint64_t v46 = v26;
  char v47 = v28 & 1;
  uint64_t v48 = v30;
  uint64_t v49 = v36;
  uint64_t v50 = v37;
  char v51 = v38 & 1;
  uint64_t v52 = v39;
  uint64_t v53 = v40;
  sub_21F85C8C8(v42);
  return sub_21F85C250((uint64_t)v42, v41);
}

void sub_21F85CCB4(double (*a1)(double), uint64_t a2)
{
  sub_21F969738(a1, 0.014959965, 659.734457, a2, 1000);
  if ((v4 & 1) == 0)
  {
    if (v3 * -1.5 <= v3 * 1.5) {
      return;
    }
    __break(1u);
  }
  sub_21F969DB4((double (*)(void))a1);
  double v6 = v5;
  char v8 = v7;
  sub_21F96A44C(a1);
  if (v8) {
    goto LABEL_10;
  }
  double v12 = v6;
  if (v10)
  {
LABEL_13:
    if (v12 < 0.0) {
      __break(1u);
    }
    return;
  }
  v11.n128_f64[0] = v9;
  if (v6 <= v9) {
    double v12 = v9;
  }
  if (v12 < 0.0)
  {
    __break(1u);
LABEL_10:
    if (v10)
    {
      sub_21F96AC94((uint64_t (*)(__n128))a1, v11);
      return;
    }
    double v12 = v9;
    if (v9 >= 0.0) {
      return;
    }
    __break(1u);
    goto LABEL_13;
  }
}

uint64_t sub_21F85CD94(uint64_t a1, uint64_t a2, double a3, double a4)
{
  swift_retain();
  double v8 = sub_21F966014(0, 0, 0, 1, a1, a2, a3, a4);
  double v10 = v9;
  swift_release();
  swift_retain();
  double v11 = sub_21F966018(0, 0, 0, 1, a1, a2, a3, a4);
  double v13 = v12;
  uint64_t result = swift_release();
  if (v11 >= v8) {
    double v15 = v8;
  }
  else {
    double v15 = v11;
  }
  if (v10 > v13) {
    double v16 = v10;
  }
  else {
    double v16 = v13;
  }
  if (v15 > v16) {
    __break(1u);
  }
  return result;
}

uint64_t sub_21F85CE64(uint64_t (*a1)(double))
{
  swift_retain_n();
  sub_21F96AFF4(1000, a1, 0.014959965, 659.734457);
  if ((v3 & 1) == 0)
  {
    double v4 = v2;
    uint64_t result = swift_release_n();
    if (v4 * -1.5 <= v4 * 1.5) {
      return result;
    }
    __break(1u);
  }
  swift_retain();
  sub_21F96B28C((void (*)(void))a1);
  double v7 = v6;
  char v9 = v8;
  swift_release();
  sub_21F96A44C((double (*)(double))sub_21F860EB4);
  double v11 = v10;
  char v13 = v12;
  if (v9) {
    goto LABEL_10;
  }
  uint64_t result = swift_release_n();
  double v14 = v7;
  if (v13)
  {
LABEL_13:
    if (v14 >= 0.0) {
      return result;
    }
    __break(1u);
LABEL_32:
    __break(1u);
    return result;
  }
  if (v7 <= v11) {
    double v14 = v11;
  }
  if (v14 < 0.0)
  {
    __break(1u);
LABEL_10:
    if ((v13 & 1) == 0)
    {
      uint64_t result = swift_release_n();
      double v14 = v11;
      if (v11 >= 0.0) {
        return result;
      }
      __break(1u);
      goto LABEL_13;
    }
    swift_retain_n();
    v15.n128_u64[0] = 0xC0F86A0000000000;
    sub_21F96B924((uint64_t)a1, v15, 100000.0);
    if (v16 <= 0.1)
    {
      swift_retain();
      v17.n128_u64[0] = -10.0;
      sub_21F96B924((uint64_t)a1, v17, 10.0);
      double v19 = v18;
      uint64_t result = swift_release();
      if (v19 < 0.4)
      {
        double v20 = *(double *)&qword_26D12FAC8;
        if (*(double *)&qword_26D12FAC8 < 0.0) {
          goto LABEL_32;
        }
        swift_retain();
        v21.n128_f64[0] = -v20;
        sub_21F96B924((uint64_t)a1, v21, v20);
        double v23 = v22;
        uint64_t result = swift_release();
        if (v23 < 0.4)
        {
          double v24 = *(double *)&qword_26D12FAD0;
          if (*(double *)&qword_26D12FAD0 < 0.0) {
            goto LABEL_32;
          }
          swift_retain();
          v25.n128_f64[0] = -v24;
          sub_21F96B924((uint64_t)a1, v25, v24);
          double v27 = v26;
          uint64_t result = swift_release();
          if (v27 < 0.4)
          {
            double v28 = *(double *)&qword_26D12FAD8;
            if (*(double *)&qword_26D12FAD8 < 0.0) {
              goto LABEL_32;
            }
            swift_retain();
            v29.n128_f64[0] = -v28;
            sub_21F96B924((uint64_t)a1, v29, v28);
            double v31 = v30;
            uint64_t result = swift_release();
            if (v31 < 0.4)
            {
              double v32 = *(double *)&qword_26D12FAE0;
              if (*(double *)&qword_26D12FAE0 < 0.0) {
                goto LABEL_32;
              }
              swift_retain();
              v33.n128_f64[0] = -v32;
              sub_21F96B924((uint64_t)a1, v33, v32);
              double v35 = v34;
              uint64_t result = swift_release();
              if (v35 < 0.4)
              {
                double v36 = *(double *)&qword_26D12FAE8;
                if (*(double *)&qword_26D12FAE8 < 0.0) {
                  goto LABEL_32;
                }
                swift_retain();
                v37.n128_f64[0] = -v36;
                sub_21F96B924((uint64_t)a1, v37, v36);
                double v39 = v38;
                uint64_t result = swift_release();
                if (v39 < 0.4)
                {
                  double v40 = *(double *)&qword_26D12FAF0;
                  if (*(double *)&qword_26D12FAF0 < 0.0) {
                    goto LABEL_32;
                  }
                  swift_retain();
                  v41.n128_f64[0] = -v40;
                  sub_21F96B924((uint64_t)a1, v41, v40);
                  swift_release();
                }
              }
            }
          }
        }
      }
    }
    return swift_release_n();
  }
  return result;
}

void static FunctionAreaPlotContent._renderChartContent(_:_:)(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_21F76CA40(&qword_267EE7CB0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  *(void *)&long long v184 = &v139[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for ChartContentRenderContext.Environment(0);
  MEMORY[0x270FA5388](v9);
  double v11 = &v139[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for SgShapeStyle();
  MEMORY[0x270FA5388](v12 - 8);
  double v14 = &v139[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_21F85C250(a1, (uint64_t)v198);
  sub_21F85C250(a1, (uint64_t)v204);
  uint64_t v15 = *((void *)a2 + 1);
  double v16 = *(double *)(v15 + 24);
  double v17 = *(double *)(v15 + 32);
  if (v17 >= v16) {
    double v18 = *(double *)(v15 + 24);
  }
  else {
    double v18 = *(double *)(v15 + 32);
  }
  if (v16 > v17) {
    double v19 = *(double *)(v15 + 24);
  }
  else {
    double v19 = *(double *)(v15 + 32);
  }
  if (v18 > v19)
  {
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
    return;
  }
  double v20 = (uint64_t *)(v15 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale);
  int v21 = *(unsigned __int8 *)(v15 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale + 104);
  if ((v21 & 1) != 0
    || (double v22 = (uint64_t *)(v15 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale),
        int v23 = *(unsigned __int8 *)(v15 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale + 104),
        (v23 & 1) != 0)
    || (uint64_t v24 = v20[10], *((unsigned char *)v20 + 80) == 0xFF)
    || (uint64_t v25 = v22[10], *((unsigned char *)v22 + 80) == 0xFF))
  {
    *a3 = 0xE000000000000000;
    return;
  }
  uint64_t v152 = v7;
  uint64_t v153 = v6;
  long long v165 = a3;
  LODWORD(v166) = *a2;
  uint64_t v26 = *v20;
  uint64_t v27 = v20[1];
  uint64_t v28 = v20[2];
  uint64_t v29 = v20[3];
  uint64_t v182 = v25;
  uint64_t v30 = v20[4];
  uint64_t v31 = v20[5];
  uint64_t v32 = v20[6];
  uint64_t v33 = v20[7];
  uint64_t v34 = v20[8];
  uint64_t v183 = v20[9];
  int v181 = v23;
  uint64_t v36 = v20[11];
  uint64_t v35 = v20[12];
  uint64_t v173 = *v22;
  uint64_t v174 = v22[1];
  uint64_t v175 = v22[2];
  uint64_t v176 = v22[3];
  uint64_t v177 = v22[4];
  uint64_t v178 = v22[5];
  uint64_t v179 = v22[6];
  uint64_t v37 = v22[8];
  uint64_t v180 = v22[7];
  uint64_t v38 = v22[11];
  uint64_t v39 = v22[12];
  uint64_t v40 = v24;
  double v41 = *(double *)&v35;
  double v42 = *(double *)&v36;
  double v43 = *(double *)&v39;
  uint64_t v44 = v22[9];
  int v164 = v21;
  uint64_t v171 = v35;
  uint64_t v172 = v36;
  uint64_t v155 = v34;
  uint64_t v156 = v26;
  uint64_t v157 = v27;
  uint64_t v158 = v28;
  uint64_t v159 = v29;
  uint64_t v160 = v30;
  uint64_t v161 = v31;
  uint64_t v162 = v32;
  uint64_t v163 = v33;
  sub_21F77F4A8(v26, v27, v28, v29, v30, v31, v32, v33, v34, v183, v24, v36, v35, v21);
  uint64_t v168 = v39;
  uint64_t v138 = v39;
  uint64_t v45 = v40;
  uint64_t v170 = v38;
  LODWORD(v40) = v182;
  uint64_t v154 = v37;
  sub_21F77F4A8(v173, v174, v175, v176, v177, v178, v179, v180, v37, v44, v182, v38, v138, v181);
  uint64_t v169 = v44;
  sub_21F85DFC4(v183, v45, v44, v40, v42, v41, *(double *)&v38, v43, v18, v19);
  uint64_t v47 = v46;
  if ((v166 & 1) == 0)
  {
    sub_21FA25270();
    uint64_t v61 = *(void *)(v47 + 16);
    if (!v61)
    {
LABEL_48:
      swift_bridgeObjectRelease();
      uint64_t v152 = type metadata accessor for SgPath(0);
      unint64_t v166 = swift_allocBox();
      uint64_t v72 = v71;
      uint64_t v153 = *(void *)(*(void *)(v15 + 16) + 24);
      uint64_t v73 = v189;
      *(void *)&long long v184 = v188;
      uint64_t v150 = (void *)v189;
      uint64_t v74 = v191;
      uint64_t v148 = v190;
      uint64_t v75 = v15 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
      unsigned __int8 v76 = v192;
      LODWORD(v149) = v192;
      uint64_t v151 = v75;
      swift_beginAccess();
      sub_21F7BB184(v75, (uint64_t)v11);
      uint64_t v77 = v148;
      sub_21F7C4950(v184, v73, v148, v74, v76);
      sub_21F77188C((uint64_t)v11, (uint64_t)v14);
      sub_21F76EE70(v173, v174, v175, v176, v177, v178, v179, v180, v154, v169, v182, v170, v168, v181);
      sub_21F76EE70(v156, v157, v158, v159, v160, v161, v162, v163, v155, v183, v45, v172, v171, v164);
      uint64_t v78 = v184;
      uint64_t v79 = (uint64_t)v150;
      uint64_t v80 = v77;
      uint64_t v81 = v77;
      LOBYTE(v77) = (_BYTE)v149;
      sub_21F7705AC(v184, (uint64_t)v150, v81, v74, v149);
      uint64_t v82 = *(void *)(v151 + *(int *)(v9 + 64));
      uint64_t v83 = *(void *)(v151 + *(int *)(v9 + 68));
      *(void *)uint64_t v72 = v153;
      *(void *)(v72 + 8) = v78;
      *(void *)(v72 + 16) = v79;
      *(void *)(v72 + 24) = v80;
      *(void *)(v72 + 32) = v74;
      *(unsigned char *)(v72 + 40) = v77;
      uint64_t v84 = (int *)v152;
      sub_21F85FB54((uint64_t)v14, v72 + *(int *)(v152 + 24));
      *(void *)(v72 + v84[7]) = v82;
      *(void *)(v72 + v84[8]) = v83;
      *(unsigned char *)(v72 + v84[9]) = 0;
      *long long v165 = v166 | 0x9000000000000000;
      return;
    }
    unint64_t v62 = 0;
    uint64_t v63 = v47 + 32;
    uint64_t v149 = &v201;
    uint64_t v150 = v200;
    uint64_t v167 = v45;
    uint64_t v151 = v47;
    uint64_t v152 = v47 + 32;
    uint64_t v153 = v61;
    while (v62 < *(void *)(v47 + 16))
    {
      uint64_t v66 = *(void *)(v63 + 8 * v62);
      if (*(void *)(v66 + 16) >= 2uLL)
      {
        unint64_t v166 = v62;
        swift_bridgeObjectRetain();
        sub_21FA25270();
        uint64_t v67 = *(void *)(v66 + 16);
        if (v67)
        {
          swift_bridgeObjectRetain();
          for (uint64_t i = 0; i != v67; ++i)
          {
            long long v184 = *(_OWORD *)(v66 + 32 * i + 32);
            v196[0] = v185;
            v196[1] = v186;
            char v197 = v187;
            sub_21F7C48F4((uint64_t)v196, (uint64_t)&v202);
            sub_21F7C4968((uint64_t)&v202, (void (*)(void, void, void, void, void))sub_21F7C4950);
            char v69 = sub_21FA25210();
            sub_21F7C4968((uint64_t)v196, (void (*)(void, void, void, void, void))sub_21F7705AC);
            if (v69) {
              sub_21FA251D0();
            }
            else {
              sub_21FA25200();
            }
          }
          swift_bridgeObjectRelease();
          while (1)
          {
            unint64_t v70 = v67 - 1;
            if (v67 < 1) {
              break;
            }
            if (v70 >= *(void *)(v66 + 16)) {
              goto LABEL_55;
            }
            sub_21FA25200();
            --v67;
            if (!v70) {
              goto LABEL_33;
            }
          }
          __break(1u);
LABEL_55:
          __break(1u);
          goto LABEL_56;
        }
LABEL_33:
        swift_bridgeObjectRelease();
        sub_21FA251B0();
        v194[0] = v185;
        v194[1] = v186;
        char v195 = v187;
        uint64_t v64 = (uint64_t)v150;
        *uint64_t v150 = 0;
        *(void *)(v64 + 8) = 0;
        uint64_t v199 = 0x3FF0000000000000;
        v200[2] = 0x3FF0000000000000;
        uint64_t v65 = (uint64_t)v149;
        *uint64_t v149 = 0;
        *(void *)(v65 + 8) = 0;
        sub_21F7C48F4((uint64_t)v194, (uint64_t)v193);
        sub_21F7C4968((uint64_t)v193, (void (*)(void, void, void, void, void))sub_21F7C4950);
        sub_21FA25160();
        sub_21F7C4968((uint64_t)v194, (void (*)(void, void, void, void, void))sub_21F7705AC);
        sub_21F7C4968((uint64_t)v194, (void (*)(void, void, void, void, void))sub_21F7705AC);
        unint64_t v62 = v166;
        uint64_t v45 = v167;
        uint64_t v47 = v151;
        uint64_t v63 = v152;
        uint64_t v61 = v153;
      }
      if (++v62 == v61) {
        goto LABEL_48;
      }
    }
    goto LABEL_61;
  }
  uint64_t v167 = v45;
  uint64_t v48 = *(void *)(v46 + 16);
  if (v48)
  {
    uint64_t v49 = (uint64_t *)(v46 + 32);
    uint64_t v50 = (char *)MEMORY[0x263F8EE78];
    while (1)
    {
      uint64_t v51 = *v49;
      uint64_t v52 = *(void *)(*v49 + 16);
      int64_t v53 = *((void *)v50 + 2);
      int64_t v54 = v53 + v52;
      if (__OFADD__(v53, v52)) {
        goto LABEL_57;
      }
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native && v54 <= *((void *)v50 + 3) >> 1)
      {
        if (!*(void *)(v51 + 16)) {
          goto LABEL_16;
        }
      }
      else
      {
        if (v53 <= v54) {
          int64_t v56 = v53 + v52;
        }
        else {
          int64_t v56 = v53;
        }
        uint64_t v50 = sub_21F7E87E8(isUniquelyReferenced_nonNull_native, v56, 1, v50);
        if (!*(void *)(v51 + 16))
        {
LABEL_16:
          if (v52) {
            goto LABEL_58;
          }
          goto LABEL_17;
        }
      }
      uint64_t v57 = *((void *)v50 + 2);
      if ((*((void *)v50 + 3) >> 1) - v57 < v52) {
        goto LABEL_59;
      }
      memcpy(&v50[32 * v57 + 32], (const void *)(v51 + 32), 32 * v52);
      if (v52)
      {
        uint64_t v58 = *((void *)v50 + 2);
        BOOL v59 = __OFADD__(v58, v52);
        uint64_t v60 = v58 + v52;
        if (v59) {
          goto LABEL_60;
        }
        *((void *)v50 + 2) = v60;
      }
LABEL_17:
      swift_bridgeObjectRelease();
      ++v49;
      if (!--v48) {
        goto LABEL_50;
      }
    }
  }
  uint64_t v50 = (char *)MEMORY[0x263F8EE78];
LABEL_50:
  swift_bridgeObjectRelease();
  sub_21F85C250((uint64_t)v198, (uint64_t)&v199);
  if (sub_21F85F8CC((uint64_t)&v199) == 1)
  {
    uint64_t v85 = sub_21F85F8D8((uint64_t)&v199);
    uint64_t v86 = *(void *)v85;
    uint64_t v87 = *(void *)(v85 + 8);
    char v88 = *(unsigned char *)(v85 + 16);
    unint64_t v166 = *(void *)(v85 + 24);
    uint64_t v89 = *(void *)(v85 + 32);
    uint64_t v149 = *(uint64_t **)(v85 + 40);
    uint64_t v150 = (void *)v89;
    char v90 = *(unsigned char *)(v85 + 48);
    uint64_t v91 = *(void *)(v85 + 64);
    uint64_t v151 = *(void *)(v85 + 56);
    uint64_t v92 = v151;
    uint64_t v148 = v91;
    uint64_t v143 = *(void *)(v85 + 72);
    LOBYTE(v91) = *(unsigned char *)(v85 + 80);
    uint64_t v142 = *(void *)(v85 + 88);
    int v93 = v88 & 1;
    char v94 = v90 & 1;
    int v140 = v90 & 1;
    char v95 = v91 & 1;
    sub_21F85C250((uint64_t)v204, (uint64_t)v193);
    uint64_t v96 = sub_21F85F8D8((uint64_t)v193);
    sub_21F85F8E8(v96);
    swift_release();
    uint64_t v141 = *((void *)v50 + 2);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v97 = swift_allocObject();
    *(void *)(v97 + 16) = v50;
    uint64_t v98 = v86;
    uint64_t v146 = v87;
    uint64_t v147 = v86;
    *(void *)(v97 + 24) = v86;
    *(void *)(v97 + 32) = v87;
    uint64_t v99 = v87;
    char v100 = v93;
    LODWORD(v145) = v93;
    *(unsigned char *)(v97 + 40) = v93;
    uint64_t v101 = v183;
    *(void *)(v97 + 48) = v166;
    *(void *)(v97 + 56) = v101;
    *(unsigned char *)(v97 + 64) = v167;
    uint64_t v102 = v171;
    *(void *)(v97 + 72) = v172;
    *(void *)(v97 + 80) = v102;
    uint64_t v104 = (uint64_t)v149;
    uint64_t v103 = (uint64_t)v150;
    *(void *)(v97 + 88) = v150;
    *(void *)(v97 + 96) = v104;
    *(unsigned char *)(v97 + 104) = v94;
    uint64_t v105 = v169;
    *(void *)(v97 + 112) = v92;
    *(void *)(v97 + 120) = v105;
    *(unsigned char *)(v97 + 128) = v182;
    uint64_t v106 = v168;
    *(void *)(v97 + 136) = v170;
    *(void *)(v97 + 144) = v106;
    uint64_t v107 = v148;
    uint64_t v109 = v142;
    uint64_t v108 = v143;
    *(void *)(v97 + 152) = v148;
    *(void *)(v97 + 160) = v108;
    *(unsigned char *)(v97 + 168) = v95;
    *(void *)(v97 + 176) = v109;
    uint64_t v202 = 0;
    uint64_t v203 = v141;
    sub_21F7652C0(v98, v99, v100);
    swift_bridgeObjectRetain();
    uint64_t v110 = v104;
    LOBYTE(v104) = v140;
    sub_21F7652C0(v103, v110, v140);
    swift_bridgeObjectRetain();
    uint64_t v111 = v108;
    sub_21F7652C0(v107, v108, v95);
    swift_bridgeObjectRetain();
    sub_21F76CA40(&qword_26AD47CA0);
    sub_21F756350();
    uint64_t v112 = v184;
    sub_21FA257A0();
    swift_release();
    swift_release();
    sub_21F85E8E4(v112, 1, v15, &qword_267EE7CB0, (uint64_t (*)(uint64_t *, void *))sub_21F860BF4, v165);
    sub_21F7656A8(v148, v111, v95);
    swift_bridgeObjectRelease();
    sub_21F7656A8((uint64_t)v150, (uint64_t)v149, v104);
    swift_bridgeObjectRelease();
    sub_21F7656A8(v147, v146, v145);
  }
  else
  {
    uint64_t v113 = sub_21F85F8D8((uint64_t)&v199);
    uint64_t v114 = *(void *)v113;
    uint64_t v115 = *(void *)(v113 + 8);
    LODWORD(v151) = *(unsigned __int8 *)(v113 + 16);
    uint64_t v117 = *(void *)(v113 + 24);
    uint64_t v116 = *(void *)(v113 + 32);
    unint64_t v166 = *(void *)(v113 + 40);
    LODWORD(v148) = *(unsigned __int8 *)(v113 + 48);
    uint64_t v118 = *(void *)(v113 + 56);
    uint64_t v149 = (uint64_t *)v116;
    uint64_t v150 = (void *)v118;
    sub_21F85C250((uint64_t)v204, (uint64_t)v193);
    uint64_t v119 = sub_21F85F8D8((uint64_t)v193);
    uint64_t v121 = *(void *)v119;
    uint64_t v120 = *(void *)(v119 + 8);
    char v122 = *(unsigned char *)(v119 + 16);
    uint64_t v123 = *(void *)(v119 + 32);
    uint64_t v124 = *(void *)(v119 + 40);
    LODWORD(v142) = *(unsigned __int8 *)(v119 + 48);
    uint64_t v125 = *(void *)(v119 + 96);
    uint64_t v143 = *(void *)(v119 + 56);
    uint64_t KeyPath = v125;
    sub_21F7652C0(v121, v120, v122);
    swift_bridgeObjectRetain();
    sub_21F7652C0(v123, v124, v142);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    uint64_t v126 = *((void *)v50 + 2);
    swift_getKeyPath();
    uint64_t v127 = swift_allocObject();
    *(void *)(v127 + 16) = v50;
    uint64_t v128 = v114;
    uint64_t v145 = v115;
    uint64_t v146 = v114;
    *(void *)(v127 + 24) = v114;
    *(void *)(v127 + 32) = v115;
    uint64_t v129 = v115;
    char v130 = v151;
    *(unsigned char *)(v127 + 40) = v151;
    uint64_t v147 = v117;
    uint64_t v131 = v183;
    *(void *)(v127 + 48) = v117;
    *(void *)(v127 + 56) = v131;
    uint64_t v132 = v166;
    *(unsigned char *)(v127 + 64) = v167;
    uint64_t v133 = v171;
    *(void *)(v127 + 72) = v172;
    *(void *)(v127 + 80) = v133;
    uint64_t v134 = (uint64_t)v149;
    uint64_t v135 = (uint64_t)v150;
    *(void *)(v127 + 88) = v149;
    *(void *)(v127 + 96) = v132;
    LOBYTE(v114) = v148;
    *(unsigned char *)(v127 + 104) = v148;
    uint64_t v136 = v169;
    *(void *)(v127 + 112) = v135;
    *(void *)(v127 + 120) = v136;
    *(unsigned char *)(v127 + 128) = v182;
    uint64_t v137 = v168;
    *(void *)(v127 + 136) = v170;
    *(void *)(v127 + 144) = v137;
    uint64_t v202 = 0;
    uint64_t v203 = v126;
    sub_21F7652C0(v128, v129, v130);
    swift_bridgeObjectRetain();
    sub_21F7652C0(v134, v132, v114);
    swift_bridgeObjectRetain();
    sub_21F76CA40(&qword_26AD47CA0);
    sub_21F756350();
    uint64_t v112 = v184;
    sub_21FA257A0();
    swift_release();
    swift_release();
    sub_21F85E8E4(v112, 1, v15, &qword_267EE7CB0, (uint64_t (*)(uint64_t *, void *))sub_21F860BF4, v165);
    sub_21F7656A8(v134, v166, v114);
    swift_bridgeObjectRelease();
    sub_21F7656A8(v146, v145, v151);
  }
  swift_bridgeObjectRelease();
  sub_21F76EE70(v173, v174, v175, v176, v177, v178, v179, v180, v154, v169, v182, v170, v168, v181);
  sub_21F76EE70(v156, v157, v158, v159, v160, v161, v162, v163, v155, v183, v167, v172, v171, v164);
  (*(void (**)(uint64_t, uint64_t))(v152 + 8))(v112, v153);
}

void sub_21F85DFC4(uint64_t a1, int a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  int v103 = a4;
  LODWORD(v102) = a2;
  sub_21F85C250(v10, (uint64_t)v108);
  int v19 = sub_21F85F8CC((uint64_t)v108);
  uint64_t v20 = sub_21F85F8D8((uint64_t)v108);
  if (v19 == 1)
  {
    if (*(unsigned char *)(v20 + 112)) {
      goto LABEL_26;
    }
    int v21 = (double *)(v20 + 96);
    double v22 = (double *)(v20 + 104);
  }
  else
  {
    if (*(unsigned char *)(v20 + 80)) {
      goto LABEL_26;
    }
    int v21 = (double *)(v20 + 64);
    double v22 = (double *)(v20 + 72);
  }
  long double v23 = *v21;
  double v24 = *v22;
  long double v25 = *v22;
  if (!(_BYTE)v102)
  {
    double v27 = pow(v23, *(long double *)&a1) * a5 + a6;
    long double v25 = pow(v25, *(long double *)&a1);
    goto LABEL_19;
  }
  if (v102 == 1)
  {
    double v26 = *(double *)&a1 * v23;
    if ((*(void *)&v23 & 0x8000000000000000) != 0) {
      double v27 = a6 - log(1.0 - v26) * a5;
    }
    else {
      double v27 = log(v26 + 1.0) * a5 + a6;
    }
    double v29 = *(double *)&a1 * v25;
    if ((*(void *)&v24 & 0x8000000000000000) == 0)
    {
      double v28 = v29 + 1.0;
      goto LABEL_16;
    }
    long double v25 = -log(1.0 - v29);
  }
  else
  {
    if (*(double *)&a1 != 0.0)
    {
      double v27 = log(v23) * a5 + a6;
      double v28 = v25;
LABEL_16:
      long double v25 = log(v28);
      goto LABEL_19;
    }
    double v27 = v23 * a5 + a6;
  }
LABEL_19:
  double v30 = v25 * a5 + a6;
  if (v30 >= v27) {
    a9 = v27;
  }
  else {
    a9 = v25 * a5 + a6;
  }
  if (v27 > v30) {
    a10 = v27;
  }
  else {
    a10 = v25 * a5 + a6;
  }
  if (a9 > a10)
  {
    __break(1u);
    return;
  }
LABEL_26:
  sub_21F85C250(v10, (uint64_t)v107);
  int v31 = sub_21F85F8CC((uint64_t)v107);
  uint64_t v32 = (void *)sub_21F85F8D8((uint64_t)v107);
  if (v31 != 1)
  {
    uint64_t v59 = v32[12];
    MEMORY[0x270FA5388](v32);
    double v85 = *(double *)&a1;
    char v86 = (char)v102;
    double v87 = a5;
    double v88 = a6;
    uint64_t v89 = v60;
    uint64_t v90 = v59;
    uint64_t v91 = a3;
    char v92 = v103;
    double v93 = a7;
    double v94 = a8;
    swift_retain();
    v61.n128_f64[0] = a9;
    v62.n128_f64[0] = a10;
    uint64_t v63 = sub_21F96702C(4, 7, 1, (uint64_t)sub_21F860E0C, v84, v61, v62);
    int64_t v64 = v63[2];
    if (!v64)
    {
LABEL_75:
      swift_bridgeObjectRelease();
      swift_release();
      return;
    }
    uint64_t v101 = v59;
    uint64_t v106 = MEMORY[0x263F8EE78];
    sub_21F7A2590(0, v64, 0);
    uint64_t v65 = v106;
    double v100 = *(double *)&v63;
    uint64_t v102 = v63 + 4;
    double v66 = log(0.0);
    long double v67 = *(double *)&a3;
    double v69 = log(*(double *)&a3 * 0.0 + 1.0);
    uint64_t v70 = 0;
    if (*(double *)&a3 == 0.0) {
      double v66 = 0.0;
    }
    while (1)
    {
      uint64_t v71 = v102[v70];
      if ((_BYTE)v103)
      {
        if (v103 == 1) {
          *(double *)v68.i64 = v69;
        }
        else {
          *(double *)v68.i64 = v66;
        }
        int64_t v72 = *(void *)(v71 + 16);
        if (v72)
        {
LABEL_65:
          *(double *)v68.i64 = *(double *)v68.i64 * a7 + a8;
          int64x2_t v104 = v68;
          uint64_t v105 = MEMORY[0x263F8EE78];
          swift_bridgeObjectRetain();
          sub_21F7A25C0(0, v72, 0);
          uint64_t v73 = v104.i64[0];
          uint64_t v74 = 0;
          uint64_t v75 = v105;
          int64_t v76 = *(void *)(v105 + 16) + 1;
          int64x2_t v77 = 0uLL;
          do
          {
            int64x2_t v78 = *(int64x2_t *)(v71 + 16 * v74 + 32);
            uint64_t v105 = v75;
            unint64_t v79 = *(void *)(v75 + 24);
            if (v76 - 1 >= v79 >> 1)
            {
              int64x2_t v99 = v78;
              sub_21F7A25C0((char *)(v79 > 1), v76, 1);
              int64x2_t v78 = v99;
              uint64_t v73 = v104.i64[0];
              int64x2_t v77 = 0uLL;
              uint64_t v75 = v105;
            }
            ++v74;
            int64x2_t v80 = vzip2q_s64(v78, v77);
            v78.i64[1] = v73;
            *(void *)(v75 + 16) = v76;
            uint64_t v81 = (int64x2_t *)(v75 + 32 * v76);
            *uint64_t v81 = v78;
            v81[1] = v80;
            ++v76;
          }
          while (v72 != v74);
          swift_bridgeObjectRelease();
          goto LABEL_72;
        }
      }
      else
      {
        *(double *)v68.i64 = pow(0.0, v67);
        int64_t v72 = *(void *)(v71 + 16);
        if (v72) {
          goto LABEL_65;
        }
      }
      uint64_t v75 = MEMORY[0x263F8EE78];
LABEL_72:
      uint64_t v106 = v65;
      unint64_t v83 = *(void *)(v65 + 16);
      unint64_t v82 = *(void *)(v65 + 24);
      if (v83 >= v82 >> 1)
      {
        sub_21F7A2590((void *)(v82 > 1), v83 + 1, 1);
        uint64_t v65 = v106;
      }
      ++v70;
      *(void *)(v65 + 16) = v83 + 1;
      *(void *)(v65 + 8 * v83 + 32) = v75;
      if (v70 == v64) {
        goto LABEL_75;
      }
    }
  }
  double v33 = *(double *)&a1;
  uint64_t v34 = (double (*)(__n128))v32[15];
  uint64_t v35 = v32[16];
  MEMORY[0x270FA5388](v32);
  double v85 = v33;
  char v86 = (char)v102;
  double v87 = a5;
  double v88 = a6;
  uint64_t v89 = v34;
  uint64_t v90 = v35;
  uint64_t v91 = a3;
  char v92 = v103;
  double v93 = a7;
  double v94 = a8;
  swift_retain();
  v36.n128_f64[0] = a9;
  v37.n128_f64[0] = a10;
  uint64_t v38 = sub_21F96702C(4, 7, 1, (uint64_t)sub_21F860DF4, v84, v36, v37);
  int64_t v39 = v38[2];
  if (v39)
  {
    uint64_t v106 = MEMORY[0x263F8EE78];
    sub_21F7A2590(0, v39, 0);
    uint64_t v40 = 0;
    uint64_t v41 = v106;
    char v95 = v38;
    int64_t v96 = v39;
    uint64_t v97 = v38 + 4;
    double v100 = v33;
    uint64_t v101 = a3;
    long double v42 = *(double *)&a3;
    while (1)
    {
      v99.i64[0] = v41;
      uint64_t v43 = v97[v40];
      int64_t v44 = *(void *)(v43 + 16);
      if (v44) {
        break;
      }
      uint64_t v46 = MEMORY[0x263F8EE78];
LABEL_53:
      uint64_t v41 = v99.i64[0];
      uint64_t v106 = v99.i64[0];
      unint64_t v57 = *(void *)(v99.i64[0] + 16);
      unint64_t v56 = *(void *)(v99.i64[0] + 24);
      if (v57 >= v56 >> 1)
      {
        uint64_t v58 = v40;
        sub_21F7A2590((void *)(v56 > 1), v57 + 1, 1);
        uint64_t v40 = v58;
        uint64_t v41 = v106;
      }
      ++v40;
      *(void *)(v41 + 16) = v57 + 1;
      *(void *)(v41 + 8 * v57 + 32) = v46;
      if (v40 == v39) {
        goto LABEL_56;
      }
    }
    uint64_t v98 = v40;
    uint64_t v105 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_21F7A25C0(0, v44, 0);
    uint64_t v45 = 0;
    uint64_t v46 = v105;
    while (1)
    {
      __n128 v47 = *(__n128 *)(v43 + 16 * v45 + 32);
      int64x2_t v104 = (int64x2_t)v47;
      v47.n128_f64[0] = (v47.n128_f64[0] - a6) / a5;
      if ((_BYTE)v102)
      {
        if (v102 == 1)
        {
          if ((v47.n128_u64[0] & 0x8000000000000000) != 0) {
            v47.n128_f64[0] = 1.0 - exp(-v47.n128_f64[0]);
          }
          else {
            v47.n128_f64[0] = exp(v47.n128_f64[0]) + -1.0;
          }
          v47.n128_f64[0] = v47.n128_f64[0] / v33;
        }
        else if (v100 != 0.0)
        {
          v47.n128_f64[0] = exp(v47.n128_f64[0]);
        }
      }
      else
      {
        v47.n128_f64[0] = pow(v47.n128_f64[0], 1.0 / v33);
      }
      double v48 = v34(v47);
      double v49 = v48;
      if ((_BYTE)v103)
      {
        if (v103 == 1)
        {
          double v50 = v48 * v42;
          if ((*(void *)&v49 & 0x8000000000000000) != 0)
          {
            double v49 = -log(1.0 - v50);
            goto LABEL_48;
          }
          double v48 = v50 + 1.0;
LABEL_46:
          double v49 = log(v48);
          goto LABEL_48;
        }
        if (v101) {
          goto LABEL_46;
        }
      }
      else
      {
        double v49 = pow(v48, v42);
      }
LABEL_48:
      uint64_t v105 = v46;
      unint64_t v52 = *(void *)(v46 + 16);
      unint64_t v51 = *(void *)(v46 + 24);
      if (v52 >= v51 >> 1)
      {
        sub_21F7A25C0((char *)(v51 > 1), v52 + 1, 1);
        uint64_t v46 = v105;
      }
      ++v45;
      *(void *)&long long v53 = v104.i64[0];
      *((double *)&v53 + 1) = v49 * a7 + a8;
      int64x2_t v54 = vzip2q_s64(v104, (int64x2_t)0);
      *(void *)(v46 + 16) = v52 + 1;
      uint64_t v55 = v46 + 32 * v52;
      *(_OWORD *)(v55 + 32) = v53;
      *(int64x2_t *)(v55 + 48) = v54;
      if (v44 == v45)
      {
        swift_bridgeObjectRelease();
        int64_t v39 = v96;
        uint64_t v40 = v98;
        goto LABEL_53;
      }
    }
  }
LABEL_56:
  swift_release();
  swift_bridgeObjectRelease();
}

unint64_t *sub_21F85E75C@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, void *a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  unint64_t v19 = *result;
  if ((*result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v19 < *(void *)(a2 + 16))
  {
    uint64_t v26 = a2 + 32 * v19;
    double v27 = *(double *)(v26 + 48);
    double v28 = sub_21F7E33A4(a7, a8, *(double *)(v26 + 32), a10, a11);
    v30[0] = a3;
    v30[1] = a4;
    char v31 = a5 & 1;
    uint64_t v32 = a6;
    double v33 = v28;
    char v34 = 0;
    v35[0] = a14;
    v35[1] = a15;
    char v36 = a16 & 1;
    uint64_t v37 = a17;
    double v38 = sub_21F7E33A4(a18, a19, v27, a12, a13);
    char v39 = 0;
    sub_21F7652C0(a3, a4, a5 & 1);
    swift_bridgeObjectRetain();
    sub_21F7652C0(a14, a15, a16 & 1);
    swift_bridgeObjectRetain();
    sub_21F8555E0((uint64_t)v30, (uint64_t)v35, 0, __src);
    return (unint64_t *)memcpy(a9, __src, 0x131uLL);
  }
  __break(1u);
  return result;
}

uint64_t sub_21F85E8C4@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_21F85E8E4(a1, a2, a3, qword_267EE7CB8, (uint64_t (*)(uint64_t *, void *))sub_21F860B1C, a4);
}

uint64_t sub_21F85E8E4@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t (*a5)(uint64_t *, void *)@<X4>, uint64_t *a6@<X8>)
{
  char v11 = a2 & 1;
  uint64_t v12 = a3 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  uint64_t v13 = type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v14 = *(int *)(v13 + 64);
  uint64_t v15 = *(void *)(v12 + v14);
  *(void *)(v12 + v14) = 0;
  sub_21F76CA40(a4);
  sub_21FA257B0();
  v27[16] = v11;
  uint64_t v28 = a3;
  uint64_t v29 = a1;
  uint64_t v16 = MEMORY[0x263F8EE78];
  uint64_t v17 = sub_21F854544(MEMORY[0x263F8EE78], a5, (uint64_t)v27, v30, v31);
  *(void *)(v12 + *(int *)(v13 + 64)) = v15;
  double v18 = (int *)type metadata accessor for SgGroup(0);
  uint64_t v19 = swift_allocBox();
  int v21 = v20;
  uint64_t v22 = *(void *)(*(void *)(a3 + 16) + 24);
  uint64_t v23 = sub_21F7812C4(v17);
  swift_bridgeObjectRelease();
  double v24 = (char *)v21 + v18[6];
  uint64_t v25 = type metadata accessor for SgClipRect(0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
  *int v21 = v22;
  v21[1] = v23;
  *(void *)((char *)v21 + v18[7]) = 0x3FF0000000000000;
  *(void *)((char *)v21 + v18[8]) = v15;
  *(void *)((char *)v21 + v18[9]) = v16;
  *((unsigned char *)v21 + v18[10]) = 0;
  *a6 = v19;
  return result;
}

unint64_t *sub_21F85EA78@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, void *a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23)
{
  unint64_t v23 = *result;
  if ((*result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v23 < *(void *)(a2 + 16))
  {
    uint64_t v27 = a2 + 32 * v23;
    long long v35 = *(_OWORD *)(v27 + 32);
    double v28 = *(double *)(v27 + 48);
    double v32 = sub_21F7E33A4(a7, a8, *(double *)(v27 + 32), a10, a11);
    char v58 = a5 & 1;
    char v57 = 0;
    v60[0] = a3;
    v60[1] = a4;
    char v61 = a5 & 1;
    uint64_t v62 = a6;
    double v63 = v32;
    char v64 = 0;
    double v33 = sub_21F7E33A4(a18, a19, *((double *)&v35 + 1), a12, a13);
    double v34 = sub_21F7E33A4(a18, a19, v28, a12, a13);
    sub_21F9DBDB8((uint64_t)v60, (uint64_t)v59);
    sub_21F764AF8((uint64_t)v59, (uint64_t)v65);
    sub_21F7652C0(a14, a15, a16 & 1);
    swift_bridgeObjectRetain();
    sub_21F7652C0(a20, a21, a22 & 1);
    swift_bridgeObjectRetain();
    sub_21F7652C0(a3, a4, a5 & 1);
    swift_bridgeObjectRetain();
    sub_21F7652C0(a14, a15, a16 & 1);
    swift_bridgeObjectRetain();
    sub_21F7652C0(a20, a21, a22 & 1);
    swift_bridgeObjectRetain();
    sub_21F7656A8(a20, a21, a22 & 1);
    swift_bridgeObjectRelease();
    sub_21F7656A8(a14, a15, a16 & 1);
    swift_bridgeObjectRelease();
    sub_21F860B70((uint64_t)v60);
    v39[0] = a14;
    v39[1] = a15;
    char v40 = a16 & 1;
    uint64_t v41 = a17;
    double v42 = v33;
    uint64_t v43 = 0;
    char v44 = 0;
    uint64_t v45 = MEMORY[0x263F8D538];
    uint64_t v46 = &protocol witness table for Double;
    uint64_t v47 = a20;
    uint64_t v48 = a21;
    char v49 = a22 & 1;
    uint64_t v50 = a23;
    double v51 = v34;
    uint64_t v52 = 0;
    char v53 = 0;
    uint64_t v54 = MEMORY[0x263F8D538];
    uint64_t v55 = &protocol witness table for Double;
    sub_21F860DAC((uint64_t)v39);
    sub_21F764AF8((uint64_t)v65, (uint64_t)__src);
    sub_21F764AF8((uint64_t)v39, (uint64_t)&__src[18]);
    __src[37] = 0;
    __src[36] = 0;
    LOBYTE(__src[38]) = -1;
    return (unint64_t *)memcpy(a9, __src, 0x131uLL);
  }
  __break(1u);
  return result;
}

double sub_21F85ED30(uint64_t a1, char a2, void (*a3)(__n128), __n128 a4, double a5, double a6, double a7, double a8, uint64_t a9, uint64_t a10, char a11)
{
  a4.n128_f64[0] = (a4.n128_f64[0] - a6) / a5;
  if (a2)
  {
    if (a2 == 1)
    {
      if ((a4.n128_u64[0] & 0x8000000000000000) != 0) {
        a4.n128_f64[0] = 1.0 - exp(-a4.n128_f64[0]);
      }
      else {
        a4.n128_f64[0] = exp(a4.n128_f64[0]) + -1.0;
      }
      a4.n128_f64[0] = a4.n128_f64[0] / *(double *)&a1;
    }
    else if (*(double *)&a1 != 0.0)
    {
      a4.n128_f64[0] = exp(a4.n128_f64[0]);
    }
  }
  else
  {
    a4.n128_f64[0] = pow(a4.n128_f64[0], 1.0 / *(double *)&a1);
  }
  a3(a4);
  if (a11)
  {
    if (a11 == 1)
    {
      double v18 = v17;
      double v19 = v17 * *(double *)&a10;
      if ((*(void *)&v18 & 0x8000000000000000) != 0)
      {
        double v17 = -log(1.0 - v19);
        return v17 * a7 + a8;
      }
      double v17 = v19 + 1.0;
      goto LABEL_16;
    }
    if (*(double *)&a10 != 0.0) {
LABEL_16:
    }
      double v17 = log(v17);
  }
  else
  {
    double v17 = pow(v17, *(long double *)&a10);
  }
  return v17 * a7 + a8;
}

double sub_21F85EE44(uint64_t a1, char a2, void (*a3)(__n128), __n128 a4, double a5, double a6, double a7, double a8, uint64_t a9, uint64_t a10, char a11)
{
  a4.n128_f64[0] = (a4.n128_f64[0] - a6) / a5;
  if (a2)
  {
    if (a2 == 1)
    {
      if ((a4.n128_u64[0] & 0x8000000000000000) != 0) {
        a4.n128_f64[0] = 1.0 - exp(-a4.n128_f64[0]);
      }
      else {
        a4.n128_f64[0] = exp(a4.n128_f64[0]) + -1.0;
      }
      a4.n128_f64[0] = a4.n128_f64[0] / *(double *)&a1;
    }
    else if (*(double *)&a1 != 0.0)
    {
      a4.n128_f64[0] = exp(a4.n128_f64[0]);
    }
  }
  else
  {
    a4.n128_f64[0] = pow(a4.n128_f64[0], 1.0 / *(double *)&a1);
  }
  a3(a4);
  double v18 = v17;
  if (a11)
  {
    if (a11 == 1)
    {
      double v19 = v17 * *(double *)&a10;
      if ((*(void *)&v17 & 0x8000000000000000) != 0)
      {
        double v18 = -log(1.0 - v19);
        return v18 * a7 + a8;
      }
      double v18 = v19 + 1.0;
      goto LABEL_16;
    }
    if (*(double *)&a10 != 0.0) {
LABEL_16:
    }
      double v18 = log(v18);
  }
  else
  {
    double v18 = pow(v17, *(long double *)&a10);
  }
  return v18 * a7 + a8;
}

uint64_t VectorizedAreaPlotContent.body.getter()
{
  uint64_t v1 = type metadata accessor for Vectorizer();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  double v4 = (char *)&v6 - v3;
  sub_21F8B0FF0(v0, v1, &off_26B58FDA0);
  sub_21F8B0FF0(v4, v1, &off_26B58FDA0);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_21F85F05C(char **a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t *a7, void (*a8)(void))
{
  uint64_t v23 = a3;
  char v12 = a4 & 1;
  sub_21F76CA40(a7);
  sub_21FA257C0();
  void v18[2] = a6;
  v18[3] = &v23;
  char v19 = v12;
  uint64_t v20 = a5;
  uint64_t result = sub_21F7809C0(v21, a8, (uint64_t)v18);
  uint64_t v14 = v22;
  if (v22 != 0xE000000000000000)
  {
    uint64_t v15 = *a1;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v15 = sub_21F759678(0, *((void *)v15 + 2) + 1, 1, v15);
    }
    unint64_t v17 = *((void *)v15 + 2);
    unint64_t v16 = *((void *)v15 + 3);
    if (v17 >= v16 >> 1) {
      uint64_t v15 = sub_21F759678((char *)(v16 > 1), v17 + 1, 1, v15);
    }
    *((void *)v15 + 2) = v17 + 1;
    *(void *)&v15[8 * v17 + 32] = v14;
    uint64_t result = swift_release();
    *a1 = v15;
  }
  return result;
}

uint64_t sub_21F85F19C(uint64_t a1, uint64_t *a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(void *, void *))
{
  void (*v10)(void *__return_ptr, void *);
  void v12[2];
  void __src[39];
  unsigned char __dst[312];

  char v8 = a3 & 1;
  uint64_t v9 = *a2;
  sub_21F76CA40(a5);
  uint64_t v10 = (void (*)(void *__return_ptr, void *))sub_21FA257D0();
  sub_21FA257B0();
  v12[0] = v9;
  v10(__src, v12);
  swift_release();
  LOBYTE(v12[0]) = v8;
  v12[1] = a4;
  a6(__src, v12);
  memcpy(__dst, __src, 0x131uLL);
  return sub_21F860CA4((uint64_t)__dst);
}

unint64_t _s6Charts23FunctionAreaPlotContentV012_layoutChartE0yyAC_AA01_gE12LayoutInputsVtFZ_0(uint64_t a1, uint64_t *a2)
{
  sub_21F85C250(a1, (uint64_t)v82);
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (!*(void *)(v3 + 16)) {
    goto LABEL_10;
  }
  unint64_t v5 = sub_21F75BD50(0);
  BOOL v6 = 0;
  if (v7)
  {
    unsigned int v8 = *(unsigned __int16 *)(*(void *)(v3 + 56) + 72 * v5 + 40);
    unsigned int v9 = v8 >> 8;
    BOOL v10 = (v8 & 0xFF00) != 768;
    BOOL v6 = v9 <= 0xFE && v10;
  }
  if (*(void *)(v3 + 16)
    && (unint64_t result = sub_21F75BD50(1u), (v12 & 1) != 0)
    && (unsigned int v13 = *(unsigned __int16 *)(*(void *)(v3 + 56) + 72 * result + 40), v13 >> 8 <= 0xFE))
  {
    int v68 = v13 & 0xFF00;
    BOOL v14 = v68 != 768;
    if (!v6)
    {
LABEL_11:
      sub_21F85C250((uint64_t)v82, (uint64_t)v81);
      int v15 = sub_21F85F8CC((uint64_t)v81);
      unint64_t result = sub_21F85F8D8((uint64_t)v81);
      uint64_t v16 = 64;
      if (v15 == 1) {
        uint64_t v16 = 96;
      }
      uint64_t v17 = 72;
      if (v15 == 1) {
        uint64_t v17 = 104;
      }
      uint64_t v18 = 80;
      if (v15 == 1) {
        uint64_t v18 = 112;
      }
      if ((*(unsigned char *)(result + v18) & 1) == 0)
      {
        uint64_t v19 = *(void *)(result + v17);
        sub_21F7CB48C(*(void *)(result + v16), 0, 0, 1);
        unint64_t result = sub_21F7CB48C(v19, 0, 0, 1);
      }
      if (v14) {
        return result;
      }
      goto LABEL_20;
    }
    if (v68 != 768) {
      return result;
    }
  }
  else if (!v6)
  {
LABEL_10:
    BOOL v14 = 0;
    goto LABEL_11;
  }
LABEL_20:
  uint64_t v79 = v4;
  sub_21F85C250((uint64_t)v82, (uint64_t)v81);
  if (sub_21F85F8CC((uint64_t)v81) != 1)
  {
    uint64_t v40 = sub_21F85F8D8((uint64_t)v81);
    uint64_t v70 = *(void *)(v40 + 8);
    uint64_t v72 = *(void *)v40;
    char v69 = *(unsigned char *)(v40 + 16);
    uint64_t v41 = *(void *)(v40 + 32);
    uint64_t v42 = *(void *)(v40 + 40);
    char v43 = *(unsigned char *)(v40 + 48);
    double v44 = *(double *)(v40 + 64);
    double v45 = *(double *)(v40 + 72);
    char v75 = *(unsigned char *)(v40 + 80);
    int64_t v76 = *(double (**)(double))(v40 + 88);
    uint64_t v78 = *(void *)(v40 + 96);
    sub_21F85C250((uint64_t)v82, (uint64_t)v80);
    uint64_t v46 = sub_21F85F8D8((uint64_t)v80);
    uint64_t v47 = *(void *)(v46 + 32);
    uint64_t v48 = *(void *)(v46 + 40);
    char v49 = *(unsigned char *)(v46 + 48);
    sub_21F7652C0(*(void *)v46, *(void *)(v46 + 8), *(unsigned char *)(v46 + 16));
    swift_bridgeObjectRetain();
    sub_21F7652C0(v47, v48, v49);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_21F7656A8(v41, v42, v43);
    swift_bridgeObjectRelease();
    sub_21F7656A8(v72, v70, v69);
    swift_bridgeObjectRelease();
    sub_21F7CB48C(0, 1, 0, 0);
    if (v75)
    {
      uint64_t v50 = swift_allocObject();
      *(void *)(v50 + 16) = v76;
      *(void *)(v50 + 24) = v78;
      uint64_t v51 = swift_allocObject();
      *(void *)(v51 + 16) = v76;
      *(void *)(v51 + 24) = v78;
      uint64_t v52 = *(char **)(v79 + 168);
      swift_retain_n();
      swift_retain();
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v79 + 168) = v52;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v52 = sub_21F7E62F0(0, *((void *)v52 + 2) + 1, 1, v52);
        *(void *)(v79 + 168) = v52;
      }
      unint64_t v55 = *((void *)v52 + 2);
      unint64_t v54 = *((void *)v52 + 3);
      if (v55 >= v54 >> 1)
      {
        uint64_t v52 = sub_21F7E62F0((char *)(v54 > 1), v55 + 1, 1, v52);
        *(void *)(v79 + 168) = v52;
      }
      *((void *)v52 + 2) = v55 + 1;
      unint64_t v56 = &v52[32 * v55];
      *((void *)v56 + 4) = sub_21F860E94;
      *((void *)v56 + 5) = v50;
      *((void *)v56 + 6) = sub_21F860EAC;
      *((void *)v56 + 7) = v51;
      swift_release();
      swift_release();
    }
    else
    {
      sub_21F965B04(0, 0, 0, 1, v76, v44, v45);
      uint64_t v66 = v65;
      sub_21F7CB48C(0, 1, v67, 0);
      sub_21F7CB48C(0, 1, v66, 0);
    }
    return swift_release();
  }
  uint64_t v20 = sub_21F85F8D8((uint64_t)v81);
  sub_21F85C250((uint64_t)v82, (uint64_t)v80);
  uint64_t v21 = sub_21F85F8D8((uint64_t)v80);
  uint64_t v73 = *(void *)(v20 + 8);
  uint64_t v74 = *(void *)v20;
  char v71 = *(unsigned char *)(v20 + 16);
  uint64_t v22 = *(void *)(v20 + 32);
  uint64_t v23 = *(void *)(v20 + 40);
  char v24 = *(unsigned char *)(v20 + 48);
  uint64_t v25 = *(void *)(v20 + 64);
  uint64_t v26 = *(void *)(v20 + 72);
  char v27 = *(unsigned char *)(v20 + 80);
  double v28 = *(double *)(v20 + 96);
  double v29 = *(double *)(v20 + 104);
  char v30 = *(unsigned char *)(v20 + 112);
  uint64_t v31 = *(void *)(v20 + 120);
  uint64_t v32 = *(void *)(v20 + 128);
  uint64_t v77 = v31;
  sub_21F85F8E8(v21);
  sub_21F7656A8(v25, v26, v27);
  swift_bridgeObjectRelease();
  sub_21F7656A8(v22, v23, v24);
  swift_bridgeObjectRelease();
  sub_21F7656A8(v74, v73, v71);
  swift_bridgeObjectRelease();
  if (v30)
  {
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = v77;
    *(void *)(v33 + 24) = v32;
    uint64_t v34 = swift_allocObject();
    *(void *)(v34 + 16) = v77;
    *(void *)(v34 + 24) = v32;
    long long v35 = *(char **)(v79 + 168);
    swift_retain_n();
    swift_retain();
    swift_retain();
    char v36 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v79 + 168) = v35;
    if ((v36 & 1) == 0)
    {
      long long v35 = sub_21F7E62F0(0, *((void *)v35 + 2) + 1, 1, v35);
      *(void *)(v79 + 168) = v35;
    }
    unint64_t v38 = *((void *)v35 + 2);
    unint64_t v37 = *((void *)v35 + 3);
    if (v38 >= v37 >> 1)
    {
      long long v35 = sub_21F7E62F0((char *)(v37 > 1), v38 + 1, 1, v35);
      *(void *)(v79 + 168) = v35;
    }
    *((void *)v35 + 2) = v38 + 1;
    char v39 = &v35[32 * v38];
    *((void *)v39 + 4) = sub_21F860E84;
    *((void *)v39 + 5) = v33;
    *((void *)v39 + 6) = sub_21F860E8C;
    *((void *)v39 + 7) = v34;
    swift_release();
    swift_release();
    return swift_release();
  }
  swift_retain();
  double v57 = sub_21F966014(0, 0, 0, 1, v77, v32, v28, v29);
  double v59 = v58;
  swift_release();
  double v60 = sub_21F966018(0, 0, 0, 1, v77, v32, v28, v29);
  double v62 = v61;
  swift_release();
  if (v60 >= v57) {
    *(double *)&uint64_t v63 = v57;
  }
  else {
    *(double *)&uint64_t v63 = v60;
  }
  sub_21F7CB48C(0, 1, v63, 0);
  if (v59 > v62) {
    *(double *)&uint64_t v64 = v59;
  }
  else {
    *(double *)&uint64_t v64 = v62;
  }
  return sub_21F7CB48C(0, 1, v64, 0);
}

uint64_t sub_21F85F8CC(uint64_t a1)
{
  return *(void *)(a1 + 112) >> 63;
}

uint64_t sub_21F85F8D8(uint64_t result)
{
  *(void *)(result + 112) &= ~0x8000000000000000;
  return result;
}

uint64_t sub_21F85F8E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  char v4 = *(unsigned char *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  char v7 = *(unsigned char *)(a1 + 80);
  sub_21F7652C0(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRetain();
  sub_21F7652C0(v2, v3, v4);
  swift_bridgeObjectRetain();
  sub_21F7652C0(v5, v6, v7);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_21F85F9A8()
{
  swift_bridgeObjectRelease();
  sub_21F7656A8(*(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  swift_bridgeObjectRelease();
  sub_21F7656A8(*(void *)(v0 + 88), *(void *)(v0 + 96), *(unsigned char *)(v0 + 104));
  swift_bridgeObjectRelease();
  sub_21F7656A8(*(void *)(v0 + 152), *(void *)(v0 + 160), *(unsigned char *)(v0 + 168));
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 184, 7);
}

unint64_t *sub_21F85FA1C@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_21F85EA78(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(unsigned char *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(unsigned char *)(v2 + 64), a2, *(double *)(v2 + 72), *(double *)(v2 + 80), *(double *)(v2 + 136), *(double *)(v2 + 144), *(void *)(v2 + 88), *(void *)(v2 + 96), *(unsigned char *)(v2 + 104), *(void *)(v2 + 112), *(void *)(v2 + 120), *(unsigned char *)(v2 + 128),
           *(void *)(v2 + 152),
           *(void *)(v2 + 160),
           *(unsigned char *)(v2 + 168),
           *(void *)(v2 + 176));
}

uint64_t sub_21F85FA98()
{
  swift_bridgeObjectRelease();
  sub_21F7656A8(*(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  swift_bridgeObjectRelease();
  sub_21F7656A8(*(void *)(v0 + 88), *(void *)(v0 + 96), *(unsigned char *)(v0 + 104));
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 152, 7);
}

unint64_t *sub_21F85FAF8@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_21F85E75C(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(unsigned char *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(unsigned char *)(v2 + 64), a2, *(double *)(v2 + 72), *(double *)(v2 + 80), *(double *)(v2 + 136), *(double *)(v2 + 144), *(void *)(v2 + 88), *(void *)(v2 + 96), *(unsigned char *)(v2 + 104), *(void *)(v2 + 112), *(void *)(v2 + 120), *(unsigned char *)(v2 + 128));
}

uint64_t sub_21F85FB54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SgShapeStyle();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21F85FBB8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21F85FC00(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21F85FC54(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21F85FC90()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21F85FCD4(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_21F85FE30(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x21F860048);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for AreaPlot()
{
  return sub_21F764F08();
}

uint64_t sub_21F860088(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15 < 0)
  {
    char v18 = a7 & 1;
    sub_21F7652C0(a1, a2, a3 & 1);
    swift_bridgeObjectRetain();
    sub_21F7652C0(a5, a6, v18);
    swift_bridgeObjectRetain();
    sub_21F7652C0(a9, a10, a11 & 1);
  }
  else
  {
    char v17 = a7 & 1;
    sub_21F7652C0(a1, a2, a3 & 1);
    swift_bridgeObjectRetain();
    sub_21F7652C0(a5, a6, v17);
  }
  swift_bridgeObjectRetain();

  return swift_retain();
}

uint64_t sub_21F860178(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15 < 0)
  {
    char v18 = a7 & 1;
    sub_21F7656A8(a1, a2, a3 & 1);
    swift_bridgeObjectRelease();
    sub_21F7656A8(a5, a6, v18);
    swift_bridgeObjectRelease();
    sub_21F7656A8(a9, a10, a11 & 1);
  }
  else
  {
    char v17 = a7 & 1;
    sub_21F7656A8(a1, a2, a3 & 1);
    swift_bridgeObjectRelease();
    sub_21F7656A8(a5, a6, v17);
  }
  swift_release();

  return swift_bridgeObjectRelease();
}

__n128 initializeWithTake for FunctionAreaPlotContent.FunctionAreaRepresentation(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

ValueMetadata *type metadata accessor for FunctionAreaPlotContent()
{
  return &type metadata for FunctionAreaPlotContent;
}

uint64_t sub_21F8602BC()
{
  uint64_t result = type metadata accessor for Vectorizer();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_21F86034C(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x21F8604A0);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_21F8604B4(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v20 = a2 ^ 0x80000000;
                v19[1] = 0;
              }
              else
              {
                uint64_t v20 = a2 - 1;
              }
              *uint64_t v19 = v20;
            }
            else
            {
              char v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x21F8606A8);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t sub_21F8606D0(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

_UNKNOWN **sub_21F8606D8()
{
  return &off_26B58FDA0;
}

uint64_t _s6Charts23FunctionAreaPlotContentV26FunctionAreaRepresentationOwxx_0(uint64_t a1)
{
  return sub_21F860178(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(_OWORD *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112));
}

uint64_t *_s6Charts23FunctionAreaPlotContentV26FunctionAreaRepresentationOwcp_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v13 = a2[9];
  uint64_t v14 = a2[10];
  uint64_t v15 = a2[11];
  uint64_t v16 = a2[12];
  uint64_t v17 = a2[13];
  uint64_t v18 = a2[14];
  uint64_t v19 = a2[15];
  uint64_t v20 = a2[16];
  sub_21F860088(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  return a1;
}

uint64_t _s6Charts23FunctionAreaPlotContentV26FunctionAreaRepresentationOwca_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v25 = a2[9];
  uint64_t v26 = a2[10];
  uint64_t v27 = a2[11];
  uint64_t v28 = a2[12];
  uint64_t v29 = a2[13];
  uint64_t v30 = a2[14];
  uint64_t v31 = a2[15];
  uint64_t v32 = a2[16];
  sub_21F860088(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v25, v26, v27, v28, v29, v30);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v25;
  *(void *)(a1 + 80) = v26;
  *(void *)(a1 + 88) = v27;
  *(void *)(a1 + 96) = v28;
  *(void *)(a1 + 104) = v29;
  *(void *)(a1 + 112) = v30;
  *(void *)(a1 + 120) = v31;
  *(void *)(a1 + 128) = v32;
  sub_21F860178(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23);
  return a1;
}

uint64_t _s6Charts23FunctionAreaPlotContentV26FunctionAreaRepresentationOwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 128);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  long long v12 = *(_OWORD *)(a1 + 64);
  long long v13 = *(_OWORD *)(a1 + 80);
  long long v14 = *(_OWORD *)(a1 + 96);
  long long v15 = *(_OWORD *)(a1 + 112);
  long long v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
  long long v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
  long long v18 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v18;
  long long v19 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v19;
  *(void *)(a1 + 128) = v3;
  sub_21F860178(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15);
  return a1;
}

uint64_t _s6Charts23FunctionAreaPlotContentV26FunctionAreaRepresentationOwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 136)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 16) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double sub_21F860A4C(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 136) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 2 * -a2;
      double result = 0.0;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      return result;
    }
    *(unsigned char *)(a1 + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *sub_21F860AD4(void *result, uint64_t a2)
{
  uint64_t v2 = result[6] & 1;
  uint64_t v3 = result[10] & 1;
  uint64_t v4 = result[14] & 1 | (a2 << 63);
  result[2] &= 1uLL;
  result[6] = v2;
  result[10] = v3;
  result[14] = v4;
  return result;
}

ValueMetadata *type metadata accessor for FunctionAreaPlotContent.FunctionAreaRepresentation()
{
  return &type metadata for FunctionAreaPlotContent.FunctionAreaRepresentation;
}

uint64_t sub_21F860B1C(char **a1, uint64_t *a2)
{
  return sub_21F860C28(a1, a2, qword_267EE7CB8, (void (*)(void))sub_21F860B50);
}

uint64_t sub_21F860B50()
{
  return sub_21F860C78(qword_267EE7CB8, (void (*)(void *, void *))static LineMark._renderChartContent(_:_:));
}

uint64_t sub_21F860B70(uint64_t a1)
{
  return a1;
}

int8x16_t sub_21F860BB0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64) & 0xFFFFFFFFFFFFFF8;
  uint64_t v2 = *(void *)(a1 + 136) & 0xFFFFFFFFFFFFFF8;
  *(int8x16_t *)(a1 + 48) = vandq_s8(*(int8x16_t *)(a1 + 48), (int8x16_t)xmmword_21FA28D90);
  *(void *)(a1 + 64) = v1;
  int8x16_t result = vandq_s8(*(int8x16_t *)(a1 + 120), (int8x16_t)xmmword_21FA28DA0);
  *(int8x16_t *)(a1 + 120) = result;
  *(void *)(a1 + 136) = v2;
  return result;
}

uint64_t sub_21F860BF4(char **a1, uint64_t *a2)
{
  return sub_21F860C28(a1, a2, &qword_267EE7CB0, (void (*)(void))sub_21F860C58);
}

uint64_t sub_21F860C28(char **a1, uint64_t *a2, uint64_t *a3, void (*a4)(void))
{
  return sub_21F85F05C(a1, *a2, a2[1], *(unsigned char *)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32), a3, a4);
}

uint64_t sub_21F860C58()
{
  return sub_21F860C78(&qword_267EE7CB0, (void (*)(void *, void *))static AreaMark._renderChartContent(_:_:));
}

uint64_t sub_21F860C78(uint64_t *a1, void (*a2)(void *, void *))
{
  return sub_21F85F19C(*(void *)(v2 + 16), *(uint64_t **)(v2 + 24), *(unsigned char *)(v2 + 32), *(void *)(v2 + 40), a1, a2);
}

uint64_t sub_21F860CA4(uint64_t a1)
{
  uint64_t v18 = *(void *)(a1 + 152);
  uint64_t v19 = *(void *)(a1 + 144);
  uint64_t v2 = *(void *)(a1 + 176);
  uint64_t v16 = *(void *)(a1 + 168);
  uint64_t v17 = *(void *)(a1 + 160);
  uint64_t v3 = *(void *)(a1 + 184);
  uint64_t v4 = *(void *)(a1 + 192);
  uint64_t v5 = *(void *)(a1 + 200);
  long long v14 = *(_OWORD *)(a1 + 224);
  long long v15 = *(_OWORD *)(a1 + 208);
  long long v12 = *(_OWORD *)(a1 + 256);
  long long v13 = *(_OWORD *)(a1 + 240);
  uint64_t v6 = *(void *)(a1 + 272);
  unint64_t v7 = *(void *)(a1 + 280);
  uint64_t v9 = *(void *)(a1 + 288);
  uint64_t v8 = *(void *)(a1 + 296);
  char v10 = *(unsigned char *)(a1 + 304);
  sub_21F765354(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(_OWORD *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136));
  sub_21F765354(v19, v18, v17, v16, v2, v3, v4, v5, v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, SBYTE8(v12), v6, v7);
  sub_21F7B24B8(v9, v8, v10);
  return a1;
}

int8x16_t sub_21F860DAC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64) & 0xFFFFFFFFFFFFFF8;
  uint64_t v2 = *(void *)(a1 + 136) & 0xFFFFFFFFFFFFFF8 | 0x6000000000000000;
  *(int8x16_t *)(a1 + 48) = vandq_s8(*(int8x16_t *)(a1 + 48), (int8x16_t)xmmword_21FA28D90);
  *(void *)(a1 + 64) = v1;
  int8x16_t result = vandq_s8(*(int8x16_t *)(a1 + 120), (int8x16_t)xmmword_21FA28DA0);
  *(int8x16_t *)(a1 + 120) = result;
  *(void *)(a1 + 136) = v2;
  return result;
}

uint64_t sub_21F860DF4(__n128 a1)
{
  return sub_21F860E24((uint64_t (*)(void, void, void, void, void, void, __n128, double, double, double, double))sub_21F85EE44, a1);
}

uint64_t sub_21F860E0C(__n128 a1)
{
  return sub_21F860E24((uint64_t (*)(void, void, void, void, void, void, __n128, double, double, double, double))sub_21F85ED30, a1);
}

uint64_t sub_21F860E24(uint64_t (*a1)(void, void, void, void, void, void, __n128, double, double, double, double), __n128 a2)
{
  return a1(*(void *)(v2 + 16), *(unsigned __int8 *)(v2 + 24), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(unsigned __int8 *)(v2 + 72), a2, *(double *)(v2 + 32), *(double *)(v2 + 40), *(double *)(v2 + 80), *(double *)(v2 + 88));
}

uint64_t sub_21F860E4C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_21F860E84(double a1, double a2)
{
  return sub_21F85CD94(*(void *)(v2 + 16), *(void *)(v2 + 24), a1, a2);
}

uint64_t sub_21F860E8C()
{
  return sub_21F85CE64(*(uint64_t (**)(double))(v0 + 16));
}

char *sub_21F860E94(double a1, double a2)
{
  return sub_21F965B04(0, 0, 0, 1, *(double (**)(double))(v2 + 16), a1, a2);
}

void sub_21F860EAC()
{
  sub_21F85CCB4(*(double (**)(double))(v0 + 16), *(void *)(v0 + 24));
}

double sub_21F860EB4()
{
  (*(void (**)(void))(v0 + 16))();
  return v1;
}

uint64_t assignWithCopy for SgShapeStyle.Shading(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      _s6Charts15AnyChartContentVwxx_0(a1);
    }
    else {
      swift_release();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 1;
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 40) = 0;
      swift_retain();
    }
  }
  return a1;
}

uint64_t assignWithTake for SgShapeStyle.Shading(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      _s6Charts15AnyChartContentVwxx_0(a1);
    }
    else {
      swift_release();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      char v7 = 1;
    }
    else
    {
      char v7 = 0;
      *(void *)a1 = *(void *)a2;
    }
    *(unsigned char *)(a1 + 40) = v7;
  }
  return a1;
}

uint64_t sub_21F861068(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t sub_21F861084(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 40) = a2;
  return result;
}

uint64_t sub_21F8610AC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v9 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    char v7 = *((unsigned char *)a2 + 40);
    if (v7)
    {
      long long v8 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v8;
      (**(void (***)(uint64_t, uint64_t *))(v8 - 8))(a1, a2);
    }
    else
    {
      *(void *)a1 = *a2;
      swift_retain();
    }
    *(unsigned char *)(v4 + 40) = v7;
    *(unsigned char *)(v4 + 41) = *((unsigned char *)a2 + 41);
    *(void *)(v4 + 48) = a2[6];
    *(void *)(v4 + 56) = a2[7];
    uint64_t v10 = a2[9];
    *(void *)(v4 + 64) = a2[8];
    *(void *)(v4 + 72) = v10;
    uint64_t v11 = *(int *)(a3 + 32);
    long long v12 = (void *)(v4 + v11);
    long long v13 = (char *)a2 + v11;
    *(_OWORD *)(v4 + 80) = *((_OWORD *)a2 + 5);
    uint64_t v14 = sub_21FA25910();
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
    swift_bridgeObjectRetain();
    if (v16(v13, 1, v14))
    {
      uint64_t v17 = sub_21F76CA40(&qword_26AD4A3B8);
      memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    uint64_t v18 = *(int *)(a3 + 36);
    uint64_t v19 = v4 + v18;
    uint64_t v20 = (uint64_t)a2 + v18;
    *(void *)uint64_t v19 = *(void *)v20;
    *(_WORD *)(v19 + 8) = *(_WORD *)(v20 + 8);
  }
  swift_retain();
  return v4;
}

uint64_t sub_21F8612C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_21F7D25BC(a1);
    if (*(unsigned char *)(a2 + 40))
    {
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 1;
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 40) = 0;
      swift_retain();
    }
  }
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v7 = *(int *)(a3 + 32);
  long long v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = sub_21FA25910();
  uint64_t v11 = *(void *)(v10 - 8);
  long long v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
      goto LABEL_11;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_10;
  }
  if (v14)
  {
LABEL_10:
    uint64_t v15 = sub_21F76CA40(&qword_26AD4A3B8);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_11:
  uint64_t v16 = *(int *)(a3 + 36);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  swift_retain();
  swift_release();
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  *(unsigned char *)(v17 + 9) = *(unsigned char *)(v18 + 9);
  return a1;
}

uint64_t sub_21F86153C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v8 = *(_OWORD *)(a2 + 64);
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  uint64_t v10 = *(int *)(a3 + 32);
  uint64_t v11 = (void *)(a1 + v10);
  long long v12 = (const void *)(a2 + v10);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = v8;
  uint64_t v13 = sub_21FA25910();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = sub_21F76CA40(&qword_26AD4A3B8);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v16 = *(int *)(a3 + 36);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(void *)uint64_t v17 = *(void *)v18;
  *(_WORD *)(v17 + 8) = *(_WORD *)(v18 + 8);
  return a1;
}

uint64_t sub_21F86169C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_21F7D25BC(a1);
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = sub_21FA25910();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_9;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_8;
  }
  if (v15)
  {
LABEL_8:
    uint64_t v16 = sub_21F76CA40(&qword_26AD4A3B8);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_9;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_9:
  uint64_t v17 = *(int *)(a3 + 36);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  *(void *)(a1 + v17) = *(void *)v19;
  swift_release();
  *(unsigned char *)(v18 + 8) = *(unsigned char *)(v19 + 8);
  *(unsigned char *)(v18 + 9) = *(unsigned char *)(v19 + 9);
  return a1;
}

uint64_t sub_21F861898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F8618AC);
}

uint64_t sub_21F8618AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 72);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = sub_21F76CA40(&qword_26AD4A3B8);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 32);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_21F86196C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F861980);
}

uint64_t sub_21F861980(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 72) = a2;
  }
  else
  {
    uint64_t v7 = sub_21F76CA40(&qword_26AD4A3B8);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t RectanglePlot<A>.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F8B0FF0(v2, v4, a2);
  sub_21F8B0FF0(v7, v4, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_21F861B14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  v19[1] = a6;
  void v19[2] = a7;
  v19[0] = a4;
  uint64_t v20 = a8;
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  uint64_t v9 = type metadata accessor for XYRenderer();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v19 - v11;
  uint64_t v13 = type metadata accessor for VectorizedRectanglePlotContent();
  uint64_t v14 = *(void *)(v13 - 8);
  __n128 v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)v19 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v12, a1, v9, v15);
  sub_21F861CE8((uint64_t)v12, (uint64_t)v17);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(v20, v17, v13);
}

uint64_t sub_21F861CE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for XYRenderer();
  *(void *)(a2 + 24) = v4;
  *(void *)(a2 + 32) = &off_26D1357F0;
  uint64_t v5 = sub_21F77E8F8((uint64_t *)a2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(v5, a1, v4);
  uint64_t v6 = (int *)type metadata accessor for RectanglesRenderer(0);
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  uint64_t v7 = a2 + v6[8];
  uint64_t v8 = type metadata accessor for ChartContentRenderContext.Environment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = a2 + v6[9];
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(unsigned char *)(v9 + 32) = 1;
  uint64_t v10 = a2 + v6[10];
  uint64_t v11 = *MEMORY[0x263F19860];
  uint64_t v12 = sub_21FA24C90();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(v10, v11, v12);
}

uint64_t sub_21F861E44(uint64_t a1, uint64_t a2)
{
  return RectanglePlot<A>.body.getter(a1, *(void *)(a2 - 8));
}

uint64_t RectanglePlot.init<A, B, C>(_:x:y:width:height:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v76 = a3;
  uint64_t v77 = a9;
  uint64_t v79 = a1;
  uint64_t v80 = a2;
  uint64_t v78 = a12;
  uint64_t v73 = a10;
  swift_getAssociatedTypeWitness();
  uint64_t v75 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v75);
  uint64_t v74 = &v44[-v17];
  uint64_t v71 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v71);
  unint64_t v55 = &v44[-v18];
  uint64_t v72 = *(void *)(a6 - 8);
  uint64_t v19 = v72;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = &v44[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  char v69 = v22;
  uint64_t v70 = a6;
  uint64_t v81 = a6;
  uint64_t v82 = a7;
  uint64_t v83 = a8;
  uint64_t v84 = a10;
  uint64_t v68 = a11;
  uint64_t v85 = a11;
  uint64_t v86 = v78;
  uint64_t v23 = type metadata accessor for XYRenderer();
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v25 = &v44[-v24];
  int v54 = *a4;
  long long v53 = *(_OWORD *)(a4 + 8);
  long long v52 = *(_OWORD *)(a4 + 24);
  long long v51 = *(_OWORD *)(a4 + 40);
  long long v50 = *(_OWORD *)(a4 + 56);
  long long v49 = *(_OWORD *)(a4 + 72);
  uint64_t v48 = *((void *)a4 + 11);
  int v47 = a4[96];
  uint64_t v46 = *((void *)a4 + 13);
  int v45 = a4[112];
  int v67 = *a5;
  long long v66 = *(_OWORD *)(a5 + 8);
  long long v65 = *(_OWORD *)(a5 + 24);
  long long v64 = *(_OWORD *)(a5 + 40);
  long long v63 = *(_OWORD *)(a5 + 56);
  long long v62 = *(_OWORD *)(a5 + 72);
  uint64_t v61 = *((void *)a5 + 11);
  int v60 = a5[96];
  uint64_t v59 = *((void *)a5 + 13);
  int v58 = a5[112];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v19 + 16))(v22, v79, a6);
  uint64_t v26 = type metadata accessor for PlottableProjection();
  type metadata accessor for MarkDimensions();
  uint64_t v27 = &v55[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  uint64_t v56 = v26;
  uint64_t v57 = *(void *)(v26 - 8);
  uint64_t v28 = v55;
  (*(void (**)(void))(v57 + 16))();
  *uint64_t v27 = v54;
  *(_OWORD *)(v27 + 8) = v53;
  *(_OWORD *)(v27 + 24) = v52;
  *(_OWORD *)(v27 + 40) = v51;
  *(_OWORD *)(v27 + 56) = v50;
  *(_OWORD *)(v27 + 72) = v49;
  *((void *)v27 + 11) = v48;
  v27[96] = v47;
  *((void *)v27 + 13) = v46;
  v27[112] = v45;
  swift_storeEnumTagMultiPayload();
  uint64_t v29 = v78;
  uint64_t v30 = type metadata accessor for PlottableProjection();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v32 = v74;
  uint64_t v33 = &v74[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v34 = *(void *)(v30 - 8);
  uint64_t v35 = v76;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v34 + 16))(v74, v76, v30);
  *uint64_t v33 = v67;
  *(_OWORD *)(v33 + 8) = v66;
  *(_OWORD *)(v33 + 24) = v65;
  *(_OWORD *)(v33 + 40) = v64;
  *(_OWORD *)(v33 + 56) = v63;
  *(_OWORD *)(v33 + 72) = v62;
  *((void *)v33 + 11) = v61;
  v33[96] = v60;
  *((void *)v33 + 13) = v59;
  v33[112] = v58;
  swift_storeEnumTagMultiPayload();
  uint64_t v36 = v29;
  uint64_t v37 = (uint64_t)v28;
  uint64_t v38 = (uint64_t)v32;
  uint64_t v39 = v70;
  uint64_t v40 = a8;
  uint64_t v41 = v73;
  uint64_t v42 = v68;
  sub_21F836C28((uint64_t)v69, v37, v38, v70, (uint64_t)v25);
  sub_21F861B14((uint64_t)v25, v39, a7, v40, v41, v42, v36, v77);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v35, v30);
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v80, v56);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v72 + 8))(v79, v39);
}

uint64_t RectanglePlot.init<A, B, C>(_:xStart:xEnd:y:height:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v69 = a4;
  uint64_t v70 = a3;
  uint64_t v71 = a2;
  uint64_t v66 = a9;
  uint64_t v67 = a10;
  uint64_t v68 = a1;
  swift_getAssociatedTypeWitness();
  uint64_t v46 = a12;
  uint64_t v65 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v65);
  long long v63 = (char *)&v45 - v16;
  uint64_t v62 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v62);
  uint64_t v18 = (char *)&v45 - v17;
  uint64_t v19 = a6;
  uint64_t v64 = *(void *)(a6 - 8);
  uint64_t v20 = v64;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v45 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v60 = v23;
  uint64_t v61 = v19;
  uint64_t v72 = v19;
  uint64_t v73 = a7;
  uint64_t v57 = a7;
  uint64_t v58 = a11;
  uint64_t v74 = a8;
  uint64_t v75 = v67;
  uint64_t v76 = a11;
  uint64_t v77 = a12;
  uint64_t v24 = type metadata accessor for XYRenderer();
  MEMORY[0x270FA5388](v24 - 8);
  uint64_t v26 = (char *)&v45 - v25;
  int v56 = *a5;
  long long v55 = *(_OWORD *)(a5 + 8);
  long long v54 = *(_OWORD *)(a5 + 24);
  long long v53 = *(_OWORD *)(a5 + 40);
  long long v52 = *(_OWORD *)(a5 + 56);
  long long v51 = *(_OWORD *)(a5 + 72);
  uint64_t v50 = *((void *)a5 + 11);
  int v49 = a5[96];
  uint64_t v48 = *((void *)a5 + 13);
  int v47 = a5[112];
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v68, v19);
  uint64_t v27 = type metadata accessor for PlottableProjection();
  uint64_t v28 = &v18[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  uint64_t v59 = *(void *)(v27 - 8);
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v59 + 16);
  v29(v18, v71, v27);
  v29(v28, v70, v27);
  swift_storeEnumTagMultiPayload();
  uint64_t v30 = v46;
  uint64_t v31 = type metadata accessor for PlottableProjection();
  type metadata accessor for MarkDimensions();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v33 = v63;
  uint64_t v34 = &v63[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v35 = *(void *)(v31 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v63, v69, v31);
  *uint64_t v34 = v56;
  *(_OWORD *)(v34 + 8) = v55;
  *(_OWORD *)(v34 + 24) = v54;
  *(_OWORD *)(v34 + 40) = v53;
  *(_OWORD *)(v34 + 56) = v52;
  *(_OWORD *)(v34 + 72) = v51;
  *((void *)v34 + 11) = v50;
  v34[96] = v49;
  *((void *)v34 + 13) = v48;
  v34[112] = v47;
  swift_storeEnumTagMultiPayload();
  uint64_t v36 = (uint64_t)v18;
  uint64_t v37 = (uint64_t)v33;
  uint64_t v38 = v61;
  uint64_t v39 = v57;
  uint64_t v40 = a8;
  uint64_t v41 = v67;
  uint64_t v42 = v58;
  sub_21F836C28((uint64_t)v60, v36, v37, v61, (uint64_t)v26);
  sub_21F861B14((uint64_t)v26, v38, v39, v40, v41, v42, v30, v66);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v69, v31);
  char v43 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
  v43(v70, v27);
  v43(v71, v27);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 8))(v68, v38);
}

uint64_t RectanglePlot.init<A, B, C>(_:x:yStart:yEnd:width:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v69 = a4;
  uint64_t v70 = a9;
  uint64_t v73 = a3;
  uint64_t v74 = a2;
  uint64_t v72 = a1;
  uint64_t v55 = a11;
  uint64_t v65 = a10;
  swift_getAssociatedTypeWitness();
  uint64_t v56 = a7;
  uint64_t v68 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v68);
  uint64_t v67 = (char *)&v48 - v16;
  uint64_t v64 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v64);
  uint64_t v71 = (uint64_t)&v48 - v17;
  uint64_t v66 = *(void *)(a6 - 8);
  uint64_t v18 = v66;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = v21;
  uint64_t v62 = a6;
  uint64_t v75 = a6;
  uint64_t v76 = a8;
  uint64_t v57 = a8;
  uint64_t v77 = a7;
  uint64_t v78 = a10;
  uint64_t v59 = a12;
  uint64_t v22 = v55;
  uint64_t v79 = a12;
  uint64_t v80 = v55;
  uint64_t v23 = type metadata accessor for XYRenderer();
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v63 = (uint64_t)&v48 - v24;
  char v25 = *a5;
  long long v54 = *(_OWORD *)(a5 + 8);
  long long v53 = *(_OWORD *)(a5 + 24);
  long long v52 = *(_OWORD *)(a5 + 40);
  long long v51 = *(_OWORD *)(a5 + 56);
  long long v50 = *(_OWORD *)(a5 + 72);
  uint64_t v26 = *((void *)a5 + 11);
  int v49 = a5[96];
  uint64_t v48 = *((void *)a5 + 13);
  LOBYTE(a5) = a5[112];
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v72, a6);
  uint64_t v27 = type metadata accessor for PlottableProjection();
  type metadata accessor for MarkDimensions();
  uint64_t v28 = v71 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t v58 = v27;
  uint64_t v60 = *(void *)(v27 - 8);
  (*(void (**)(void))(v60 + 16))();
  *(unsigned char *)uint64_t v28 = v25;
  *(_OWORD *)(v28 + 8) = v54;
  *(_OWORD *)(v28 + 24) = v53;
  *(_OWORD *)(v28 + 40) = v52;
  *(_OWORD *)(v28 + 56) = v51;
  *(_OWORD *)(v28 + 72) = v50;
  *(void *)(v28 + 88) = v26;
  *(unsigned char *)(v28 + 96) = v49;
  *(void *)(v28 + 104) = v48;
  *(unsigned char *)(v28 + 112) = (_BYTE)a5;
  swift_storeEnumTagMultiPayload();
  uint64_t v29 = v56;
  uint64_t v30 = v22;
  uint64_t v31 = type metadata accessor for PlottableProjection();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v33 = v67;
  uint64_t v34 = &v67[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v35 = *(void *)(v31 - 8);
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 16);
  v36(v67, v73, v31);
  uint64_t v37 = v34;
  uint64_t v38 = v69;
  v36(v37, v69, v31);
  swift_storeEnumTagMultiPayload();
  uint64_t v40 = v62;
  uint64_t v39 = v63;
  uint64_t v41 = (uint64_t)v33;
  uint64_t v42 = v57;
  uint64_t v43 = v29;
  uint64_t v44 = v65;
  uint64_t v45 = v59;
  sub_21F836C28((uint64_t)v61, v71, v41, v62, v63);
  sub_21F861B14(v39, v40, v42, v43, v44, v45, v30, v70);
  uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
  v46(v38, v31);
  v46(v73, v31);
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v74, v58);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 8))(v72, v40);
}

uint64_t RectanglePlot.init<A, B, C>(_:xStart:xEnd:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v62 = a5;
  uint64_t v63 = a9;
  uint64_t v65 = a4;
  uint64_t v66 = a3;
  uint64_t v67 = a2;
  uint64_t v64 = a1;
  uint64_t v59 = a10;
  v50[1] = swift_getAssociatedTypeWitness();
  uint64_t v15 = a8;
  uint64_t v51 = a8;
  uint64_t v61 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v61);
  uint64_t v17 = (char *)v50 - v16;
  uint64_t v18 = a7;
  uint64_t v58 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v58);
  uint64_t v20 = (char *)v50 - v19;
  uint64_t v60 = *(void *)(a6 - 8);
  uint64_t v21 = v60;
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)v50 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v54 = v24;
  uint64_t v55 = a6;
  uint64_t v68 = a6;
  uint64_t v69 = v18;
  uint64_t v52 = v18;
  uint64_t v70 = v15;
  uint64_t v71 = a10;
  uint64_t v53 = a11;
  uint64_t v72 = a11;
  uint64_t v73 = a12;
  uint64_t v25 = type metadata accessor for XYRenderer();
  __n128 v26 = MEMORY[0x270FA5388](v25 - 8);
  uint64_t v56 = (uint64_t)v50 - v27;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v21 + 16))(v24, v64, a6, v26);
  uint64_t v28 = type metadata accessor for PlottableProjection();
  uint64_t v29 = &v20[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  uint64_t v57 = *(void *)(v28 - 8);
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v57 + 16);
  v30(v20, v67, v28);
  v30(v29, v66, v28);
  swift_storeEnumTagMultiPayload();
  uint64_t v31 = v51;
  v50[0] = a12;
  uint64_t v32 = type metadata accessor for PlottableProjection();
  uint64_t v33 = &v17[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  uint64_t v34 = *(void *)(v32 - 8);
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 16);
  v35(v17, v65, v32);
  uint64_t v36 = v33;
  uint64_t v37 = v62;
  v35(v36, v62, v32);
  swift_storeEnumTagMultiPayload();
  uint64_t v38 = v55;
  uint64_t v39 = v56;
  uint64_t v40 = (uint64_t)v20;
  uint64_t v41 = (uint64_t)v17;
  uint64_t v42 = v52;
  uint64_t v43 = v59;
  uint64_t v44 = v53;
  sub_21F836C28((uint64_t)v54, v40, v41, v55, v56);
  uint64_t v45 = v39;
  uint64_t v46 = v38;
  sub_21F861B14(v45, v38, v42, v31, v43, v44, v50[0], v63);
  int v47 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
  v47(v37, v32);
  v47(v65, v32);
  uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
  v48(v66, v28);
  v48(v67, v28);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 8))(v64, v46);
}

uint64_t RectanglePlot.init<A, B>(_:x:yStart:yEnd:width:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, unsigned __int8 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v56 = a6;
  uint64_t v55 = a5;
  int v54 = a4;
  uint64_t v52 = a2;
  uint64_t v53 = a3;
  uint64_t v57 = a9;
  uint64_t v58 = a1;
  uint64_t v49 = a11;
  swift_getAssociatedTypeWitness();
  uint64_t v51 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v51);
  uint64_t v15 = &v35[-v14];
  uint64_t v50 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v50);
  uint64_t v17 = &v35[-v16];
  uint64_t v48 = *(void *)(a8 - 8);
  uint64_t v18 = v48;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = &v35[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v46 = a10;
  int v47 = v21;
  uint64_t v59 = a8;
  uint64_t v60 = a10;
  uint64_t v61 = MEMORY[0x263F8D538];
  uint64_t v62 = a11;
  uint64_t v63 = a12;
  uint64_t v64 = &protocol witness table for Double;
  uint64_t v22 = type metadata accessor for XYRenderer();
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v24 = &v35[-v23];
  int v45 = *a7;
  long long v44 = *(_OWORD *)(a7 + 8);
  long long v43 = *(_OWORD *)(a7 + 24);
  long long v42 = *(_OWORD *)(a7 + 40);
  long long v41 = *(_OWORD *)(a7 + 56);
  long long v40 = *(_OWORD *)(a7 + 72);
  uint64_t v39 = *((void *)a7 + 11);
  int v38 = a7[96];
  uint64_t v37 = *((void *)a7 + 13);
  int v36 = a7[112];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v18 + 16))(v21, v58, a8);
  uint64_t v25 = type metadata accessor for PlottableProjection();
  type metadata accessor for MarkDimensions();
  __n128 v26 = &v17[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  uint64_t v27 = *(void *)(v25 - 8);
  uint64_t v28 = v52;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v27 + 16))(v17, v52, v25);
  *__n128 v26 = v45;
  *(_OWORD *)(v26 + 8) = v44;
  *(_OWORD *)(v26 + 24) = v43;
  *(_OWORD *)(v26 + 40) = v42;
  *(_OWORD *)(v26 + 56) = v41;
  *(_OWORD *)(v26 + 72) = v40;
  *((void *)v26 + 11) = v39;
  v26[96] = v38;
  *((void *)v26 + 13) = v37;
  v26[112] = v36;
  swift_storeEnumTagMultiPayload();
  *(void *)uint64_t v15 = v53;
  v15[8] = v54 & 1;
  *((void *)v15 + 2) = v55;
  v15[24] = v56 & 1;
  swift_storeEnumTagMultiPayload();
  uint64_t v29 = v46;
  uint64_t v30 = (uint64_t)v17;
  uint64_t v31 = (uint64_t)v15;
  uint64_t v32 = MEMORY[0x263F8D538];
  uint64_t v33 = v49;
  sub_21F836C28((uint64_t)v47, v30, v31, a8, (uint64_t)v24);
  sub_21F861B14((uint64_t)v24, a8, v29, v32, v33, a12, (uint64_t)&protocol witness table for Double, v57);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v25);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 8))(v58, a8);
}

uint64_t RectanglePlot.init<A, B>(_:xStart:xEnd:y:height:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, unsigned __int8 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v63 = a6;
  uint64_t v64 = a9;
  int v61 = a5;
  uint64_t v60 = a4;
  int v59 = a3;
  uint64_t v58 = a2;
  uint64_t v65 = a1;
  uint64_t v44 = a12;
  uint64_t v57 = a11;
  swift_getAssociatedTypeWitness();
  uint64_t v62 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v62);
  uint64_t v15 = (char *)&v43 - v14;
  uint64_t v16 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v43 - v17;
  uint64_t v56 = *(void *)(a8 - 8);
  uint64_t v19 = v56;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = a8;
  uint64_t v67 = MEMORY[0x263F8D538];
  uint64_t v68 = a10;
  uint64_t v43 = a10;
  uint64_t v69 = a11;
  uint64_t v23 = v44;
  uint64_t v70 = &protocol witness table for Double;
  uint64_t v71 = v44;
  uint64_t v24 = type metadata accessor for XYRenderer();
  MEMORY[0x270FA5388](v24 - 8);
  uint64_t v55 = (uint64_t)&v43 - v25;
  int v54 = *a7;
  long long v53 = *(_OWORD *)(a7 + 8);
  long long v52 = *(_OWORD *)(a7 + 24);
  long long v51 = *(_OWORD *)(a7 + 40);
  long long v50 = *(_OWORD *)(a7 + 56);
  long long v49 = *(_OWORD *)(a7 + 72);
  uint64_t v48 = *((void *)a7 + 11);
  int v47 = a7[96];
  uint64_t v46 = *((void *)a7 + 13);
  int v45 = a7[112];
  __n128 v26 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  uint64_t v27 = a8;
  v26(v22, v65, a8);
  *(void *)uint64_t v18 = v58;
  unsigned char v18[8] = v59 & 1;
  *((void *)v18 + 2) = v60;
  v18[24] = v61 & 1;
  swift_storeEnumTagMultiPayload();
  uint64_t v28 = v23;
  uint64_t v29 = type metadata accessor for PlottableProjection();
  type metadata accessor for MarkDimensions();
  uint64_t v30 = &v15[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  uint64_t v31 = *(void *)(v29 - 8);
  uint64_t v32 = v63;
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v15, v63, v29);
  *uint64_t v30 = v54;
  *(_OWORD *)(v30 + 8) = v53;
  *(_OWORD *)(v30 + 24) = v52;
  *(_OWORD *)(v30 + 40) = v51;
  *(_OWORD *)(v30 + 56) = v50;
  *(_OWORD *)(v30 + 72) = v49;
  *((void *)v30 + 11) = v48;
  v30[96] = v47;
  *((void *)v30 + 13) = v46;
  v30[112] = v45;
  swift_storeEnumTagMultiPayload();
  uint64_t v33 = v28;
  uint64_t v34 = v55;
  uint64_t v35 = (uint64_t)v18;
  uint64_t v36 = (uint64_t)v15;
  uint64_t v37 = v27;
  uint64_t v38 = v27;
  uint64_t v39 = MEMORY[0x263F8D538];
  uint64_t v40 = v43;
  uint64_t v41 = v57;
  sub_21F836C28((uint64_t)v22, v35, v36, v38, v55);
  sub_21F861B14(v34, v37, v39, v40, v41, (uint64_t)&protocol witness table for Double, v33, v64);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v29);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 8))(v65, v37);
}

uint64_t RectanglePlot.init<A, B>(_:xStart:xEnd:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v53 = a7;
  uint64_t v52 = a6;
  int v51 = a5;
  uint64_t v49 = a3;
  uint64_t v50 = a4;
  uint64_t v48 = a2;
  uint64_t v54 = a9;
  uint64_t v55 = a1;
  uint64_t v44 = a11;
  swift_getAssociatedTypeWitness();
  uint64_t v13 = MEMORY[0x263F8D538];
  uint64_t v47 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v47);
  uint64_t v15 = (char *)&v41 - v14;
  uint64_t v46 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v46);
  uint64_t v17 = (char *)&v41 - v16;
  uint64_t v45 = *(void *)(a8 - 8);
  uint64_t v18 = v45;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = a12;
  uint64_t v43 = v21;
  uint64_t v56 = a8;
  uint64_t v57 = a10;
  uint64_t v41 = a10;
  uint64_t v58 = v13;
  uint64_t v59 = a11;
  uint64_t v60 = a12;
  int v61 = &protocol witness table for Double;
  uint64_t v22 = type metadata accessor for XYRenderer();
  __n128 v23 = MEMORY[0x270FA5388](v22 - 8);
  uint64_t v25 = (char *)&v41 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16))(v21, v55, a8, v23);
  uint64_t v26 = type metadata accessor for PlottableProjection();
  uint64_t v27 = &v17[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  uint64_t v28 = *(void *)(v26 - 8);
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  uint64_t v30 = v48;
  v29(v17, v48, v26);
  uint64_t v31 = v27;
  uint64_t v32 = v49;
  v29(v31, v49, v26);
  swift_storeEnumTagMultiPayload();
  *(void *)uint64_t v15 = v50;
  v15[8] = v51 & 1;
  *((void *)v15 + 2) = v52;
  v15[24] = v53 & 1;
  swift_storeEnumTagMultiPayload();
  uint64_t v33 = v44;
  uint64_t v34 = (uint64_t)v17;
  uint64_t v35 = (uint64_t)v15;
  uint64_t v37 = v41;
  uint64_t v36 = v42;
  uint64_t v38 = MEMORY[0x263F8D538];
  sub_21F836C28((uint64_t)v43, v34, v35, a8, (uint64_t)v25);
  sub_21F861B14((uint64_t)v25, a8, v37, v38, v33, v36, (uint64_t)&protocol witness table for Double, v54);
  uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
  v39(v32, v26);
  v39(v30, v26);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 8))(v55, a8);
}

uint64_t RectanglePlot.init<A, B>(_:xStart:xEnd:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v55 = a7;
  uint64_t v56 = a9;
  uint64_t v57 = a1;
  uint64_t v58 = a6;
  int v53 = a5;
  uint64_t v52 = a4;
  int v51 = a3;
  uint64_t v50 = a2;
  uint64_t v46 = a12;
  uint64_t v48 = a11;
  swift_getAssociatedTypeWitness();
  uint64_t v54 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v54);
  uint64_t v14 = (char *)&v44 - v13;
  uint64_t v15 = MEMORY[0x263F8D538];
  uint64_t v16 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v44 - v17;
  uint64_t v49 = *(void *)(a8 - 8);
  uint64_t v19 = v49;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = a8;
  uint64_t v60 = v15;
  uint64_t v61 = a10;
  uint64_t v62 = a11;
  uint64_t v45 = a10;
  uint64_t v23 = v46;
  uint64_t v63 = &protocol witness table for Double;
  uint64_t v64 = v46;
  uint64_t v24 = type metadata accessor for XYRenderer();
  __n128 v25 = MEMORY[0x270FA5388](v24 - 8);
  uint64_t v47 = (uint64_t)&v44 - v26;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16))(v22, v57, a8, v25);
  *(void *)uint64_t v18 = v50;
  unsigned char v18[8] = v51 & 1;
  *((void *)v18 + 2) = v52;
  v18[24] = v53 & 1;
  swift_storeEnumTagMultiPayload();
  uint64_t v27 = v23;
  uint64_t v28 = type metadata accessor for PlottableProjection();
  uint64_t v29 = &v14[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  uint64_t v30 = *(void *)(v28 - 8);
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
  v31(v14, v58, v28);
  uint64_t v32 = v29;
  uint64_t v33 = v55;
  v31(v32, v55, v28);
  swift_storeEnumTagMultiPayload();
  uint64_t v34 = v27;
  uint64_t v35 = v47;
  uint64_t v36 = (uint64_t)v22;
  uint64_t v37 = (uint64_t)v18;
  uint64_t v38 = (uint64_t)v14;
  uint64_t v39 = MEMORY[0x263F8D538];
  uint64_t v40 = v45;
  uint64_t v41 = v48;
  sub_21F836C28(v36, v37, v38, a8, v47);
  sub_21F861B14(v35, a8, v39, v40, v41, (uint64_t)&protocol witness table for Double, v34, v56);
  uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
  v42(v33, v28);
  v42(v58, v28);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 8))(v57, a8);
}

uint64_t RectanglePlot.init<A, B>(_:x:yStart:yEnd:width:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v52 = a8;
  uint64_t v57 = a4;
  uint64_t v58 = a9;
  uint64_t v54 = a2;
  uint64_t v59 = a1;
  uint64_t v56 = a3;
  uint64_t v55 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v55);
  uint64_t v15 = &v38[-v14];
  uint64_t v53 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v53);
  uint64_t v17 = &v38[-v16];
  uint64_t v51 = *(void *)(a6 - 8);
  uint64_t v18 = v51;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = &v38[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v60 = a6;
  uint64_t v61 = a7;
  uint64_t v49 = a7;
  uint64_t v62 = MEMORY[0x263F8D538];
  uint64_t v63 = a8;
  uint64_t v64 = a10;
  uint64_t v50 = a10;
  uint64_t v65 = &protocol witness table for Double;
  uint64_t v22 = type metadata accessor for XYRenderer();
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v24 = &v38[-v23];
  int v48 = *a5;
  long long v47 = *(_OWORD *)(a5 + 8);
  long long v46 = *(_OWORD *)(a5 + 24);
  long long v45 = *(_OWORD *)(a5 + 40);
  long long v44 = *(_OWORD *)(a5 + 56);
  long long v43 = *(_OWORD *)(a5 + 72);
  uint64_t v42 = *((void *)a5 + 11);
  int v41 = a5[96];
  uint64_t v40 = *((void *)a5 + 13);
  int v39 = a5[112];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v18 + 16))(v21, v59, a6);
  uint64_t v25 = type metadata accessor for PlottableProjection();
  type metadata accessor for MarkDimensions();
  uint64_t v26 = &v17[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  uint64_t v27 = *(void *)(v25 - 8);
  uint64_t v28 = v54;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v27 + 16))(v17, v54, v25);
  *uint64_t v26 = v48;
  *(_OWORD *)(v26 + 8) = v47;
  *(_OWORD *)(v26 + 24) = v46;
  *(_OWORD *)(v26 + 40) = v45;
  *(_OWORD *)(v26 + 56) = v44;
  *(_OWORD *)(v26 + 72) = v43;
  *((void *)v26 + 11) = v42;
  v26[96] = v41;
  *((void *)v26 + 13) = v40;
  v26[112] = v39;
  swift_storeEnumTagMultiPayload();
  uint64_t v29 = v57;
  *uint64_t v15 = v56;
  v15[1] = v29;
  swift_storeEnumTagMultiPayload();
  uint64_t v30 = (uint64_t)v21;
  uint64_t v31 = (uint64_t)v17;
  uint64_t v32 = (uint64_t)v15;
  uint64_t v33 = v49;
  uint64_t v34 = v50;
  uint64_t v35 = MEMORY[0x263F8D538];
  uint64_t v36 = v52;
  sub_21F836C28(v30, v31, v32, a6, (uint64_t)v24);
  sub_21F861B14((uint64_t)v24, a6, v33, v35, v36, v34, (uint64_t)&protocol witness table for Double, v58);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v25);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 8))(v59, a6);
}

uint64_t RectanglePlot.init<A, B>(_:xStart:xEnd:y:height:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v57 = a7;
  uint64_t v58 = a8;
  uint64_t v55 = a4;
  uint64_t v56 = a9;
  uint64_t v52 = a2;
  uint64_t v53 = a3;
  uint64_t v59 = a1;
  uint64_t v40 = a10;
  uint64_t v54 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v54);
  uint64_t v13 = (char *)&v39 - v12;
  uint64_t v14 = MEMORY[0x263F8D538];
  uint64_t v15 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (uint64_t *)((char *)&v39 - v16);
  uint64_t v51 = *(void *)(a6 - 8);
  uint64_t v18 = v51;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = a6;
  uint64_t v61 = v14;
  uint64_t v62 = v57;
  uint64_t v63 = v58;
  uint64_t v64 = &protocol witness table for Double;
  uint64_t v65 = a10;
  uint64_t v22 = type metadata accessor for XYRenderer();
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v24 = (char *)&v39 - v23;
  int v50 = *a5;
  long long v25 = *(_OWORD *)(a5 + 8);
  long long v48 = *(_OWORD *)(a5 + 24);
  long long v49 = v25;
  long long v47 = *(_OWORD *)(a5 + 40);
  long long v46 = *(_OWORD *)(a5 + 56);
  long long v45 = *(_OWORD *)(a5 + 72);
  uint64_t v44 = *((void *)a5 + 11);
  int v43 = a5[96];
  uint64_t v42 = *((void *)a5 + 13);
  int v41 = a5[112];
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v59, a6);
  uint64_t v26 = v53;
  *uint64_t v17 = v52;
  v17[1] = v26;
  swift_storeEnumTagMultiPayload();
  uint64_t v27 = v40;
  uint64_t v28 = type metadata accessor for PlottableProjection();
  type metadata accessor for MarkDimensions();
  uint64_t v29 = &v13[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  uint64_t v30 = *(void *)(v28 - 8);
  uint64_t v31 = v55;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v13, v55, v28);
  *uint64_t v29 = v50;
  *(_OWORD *)(v29 + 8) = v49;
  *(_OWORD *)(v29 + 24) = v48;
  *(_OWORD *)(v29 + 40) = v47;
  *(_OWORD *)(v29 + 56) = v46;
  *(_OWORD *)(v29 + 72) = v45;
  *((void *)v29 + 11) = v44;
  v29[96] = v43;
  *((void *)v29 + 13) = v42;
  v29[112] = v41;
  swift_storeEnumTagMultiPayload();
  uint64_t v32 = (uint64_t)v21;
  uint64_t v33 = (uint64_t)v17;
  uint64_t v34 = (uint64_t)v13;
  uint64_t v35 = MEMORY[0x263F8D538];
  uint64_t v37 = v57;
  uint64_t v36 = v58;
  sub_21F836C28(v32, v33, v34, a6, (uint64_t)v24);
  sub_21F861B14((uint64_t)v24, a6, v35, v37, v36, (uint64_t)&protocol witness table for Double, v27, v56);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v31, v28);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 8))(v59, a6);
}

uint64_t RectanglePlot.init<A, B>(_:xStart:xEnd:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v45 = a8;
  uint64_t v46 = a1;
  uint64_t v52 = a5;
  uint64_t v53 = a9;
  uint64_t v50 = a3;
  uint64_t v51 = a4;
  uint64_t v54 = a2;
  uint64_t v49 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v49);
  uint64_t v15 = (uint64_t *)((char *)&v42 - v14);
  uint64_t v48 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v48);
  uint64_t v17 = (char *)&v42 - v16;
  uint64_t v47 = *(void *)(a6 - 8);
  uint64_t v18 = v47;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = a6;
  uint64_t v56 = a7;
  uint64_t v44 = a6;
  uint64_t v42 = a7;
  uint64_t v57 = MEMORY[0x263F8D538];
  uint64_t v58 = a8;
  uint64_t v59 = a10;
  uint64_t v43 = a10;
  uint64_t v60 = &protocol witness table for Double;
  uint64_t v22 = type metadata accessor for XYRenderer();
  __n128 v23 = MEMORY[0x270FA5388](v22 - 8);
  long long v25 = (char *)&v42 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16))(v21, a1, a6, v23);
  uint64_t v26 = type metadata accessor for PlottableProjection();
  uint64_t v27 = &v17[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  uint64_t v28 = *(void *)(v26 - 8);
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  v29(v17, v54, v26);
  uint64_t v30 = v27;
  uint64_t v31 = v50;
  v29(v30, v50, v26);
  swift_storeEnumTagMultiPayload();
  uint64_t v32 = v52;
  *uint64_t v15 = v51;
  v15[1] = v32;
  swift_storeEnumTagMultiPayload();
  uint64_t v33 = (uint64_t)v21;
  uint64_t v34 = (uint64_t)v15;
  uint64_t v35 = v44;
  uint64_t v36 = v45;
  uint64_t v37 = v42;
  uint64_t v38 = v43;
  uint64_t v39 = MEMORY[0x263F8D538];
  sub_21F836C28(v33, (uint64_t)v17, v34, v44, (uint64_t)v25);
  sub_21F861B14((uint64_t)v25, v35, v37, v39, v36, v38, (uint64_t)&protocol witness table for Double, v53);
  uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
  v40(v31, v26);
  v40(v54, v26);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8))(v46, v35);
}

{
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _UNKNOWN **v57;
  uint64_t v58;

  uint64_t v44 = a8;
  uint64_t v50 = a7;
  uint64_t v51 = a1;
  uint64_t v48 = a5;
  uint64_t v49 = a9;
  uint64_t v52 = a4;
  uint64_t v46 = a3;
  int v41 = a10;
  uint64_t v47 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v47);
  uint64_t v14 = (char *)&v41 - v13;
  uint64_t v15 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (uint64_t *)((char *)&v41 - v16);
  uint64_t v45 = *(void *)(a6 - 8);
  uint64_t v18 = v45;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = v21;
  uint64_t v53 = a6;
  uint64_t v54 = MEMORY[0x263F8D538];
  uint64_t v55 = v50;
  uint64_t v56 = a8;
  uint64_t v22 = v41;
  uint64_t v57 = &protocol witness table for Double;
  uint64_t v58 = v41;
  __n128 v23 = type metadata accessor for XYRenderer();
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v43 = (uint64_t)&v41 - v25;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16))(v21, v51, a6, v24);
  uint64_t v26 = v46;
  *uint64_t v17 = a2;
  v17[1] = v26;
  swift_storeEnumTagMultiPayload();
  uint64_t v27 = type metadata accessor for PlottableProjection();
  uint64_t v28 = &v14[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  uint64_t v29 = *(void *)(v27 - 8);
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  v30(v14, v52, v27);
  uint64_t v31 = v28;
  uint64_t v32 = v48;
  v30(v31, v48, v27);
  swift_storeEnumTagMultiPayload();
  uint64_t v33 = v22;
  uint64_t v34 = v43;
  uint64_t v35 = (uint64_t)v17;
  uint64_t v36 = MEMORY[0x263F8D538];
  uint64_t v37 = v50;
  uint64_t v38 = v44;
  sub_21F836C28((uint64_t)v42, v35, (uint64_t)v14, a6, v43);
  sub_21F861B14(v34, a6, v36, v37, v38, (uint64_t)&protocol witness table for Double, v33, v49);
  uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
  v39(v32, v27);
  v39(v52, v27);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 8))(v51, a6);
}

uint64_t RectanglePlot.init<A>(_:xStart:xEnd:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v31 = a7;
  uint64_t v32 = a1;
  uint64_t v34 = a4;
  uint64_t v35 = a5;
  uint64_t v33 = a3;
  uint64_t v36 = a8;
  uint64_t v11 = MEMORY[0x263F8D538];
  uint64_t v12 = type metadata accessor for BoundingSectionSpecification();
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (uint64_t *)((char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (uint64_t *)((char *)&v31 - v16);
  uint64_t v18 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = a6;
  uint64_t v38 = v11;
  uint64_t v39 = v11;
  uint64_t v40 = a7;
  int v41 = &protocol witness table for Double;
  uint64_t v42 = &protocol witness table for Double;
  uint64_t v22 = type metadata accessor for XYRenderer();
  __n128 v23 = MEMORY[0x270FA5388](v22 - 8);
  long long v25 = (char *)&v31 - v24;
  uint64_t v26 = v32;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16))(v21, v32, a6, v23);
  uint64_t v27 = v33;
  *uint64_t v17 = a2;
  v17[1] = v27;
  swift_storeEnumTagMultiPayload();
  uint64_t v28 = v35;
  *uint64_t v14 = v34;
  v14[1] = v28;
  swift_storeEnumTagMultiPayload();
  uint64_t v29 = v31;
  sub_21F836C28((uint64_t)v21, (uint64_t)v17, (uint64_t)v14, a6, (uint64_t)v25);
  sub_21F861B14((uint64_t)v25, a6, v11, v11, v29, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol witness table for Double, v36);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v26, a6);
}

uint64_t static VectorizedRectanglePlotContent._layoutChartContent(_:_:)(uint64_t a1, long long *a2)
{
  uint64_t v4 = type metadata accessor for RectanglesRenderer(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (void *)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_21F865934(a1, (uint64_t)v6);
  uint64_t v7 = v6[3];
  uint64_t v8 = v6[4];
  sub_21F77E0FC(v6, v7);
  long long v10 = *a2;
  (*(void (**)(long long *, uint64_t, uint64_t))(v8 + 8))(&v10, v7, v8);
  return sub_21F868C70((uint64_t)v6, type metadata accessor for RectanglesRenderer);
}

uint64_t sub_21F865934(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RectanglesRenderer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static VectorizedRectanglePlotContent._renderChartContent(_:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6 = sub_21F76CA40(&qword_26AD48A80);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for RectanglesRenderer(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v12 = *(unsigned char *)a2;
  uint64_t v13 = *(void *)(a2 + 8);
  sub_21F865934((uint64_t)a1, (uint64_t)v11);
  v32[0] = v12;
  uint64_t v33 = v13;
  sub_21F8C5604(v32);
  if (v12)
  {
    uint64_t v14 = type metadata accessor for SgGroup(0);
    uint64_t v31 = a3;
    uint64_t v15 = (int *)v14;
    unint64_t v16 = swift_allocBox();
    uint64_t v18 = v17;
    uint64_t v30 = *(void *)(*(void *)(v13 + 16) + 24);
    uint64_t v20 = a1[3];
    uint64_t v19 = a1[4];
    sub_21F77E0FC(a1, v20);
    uint64_t v21 = (*(uint64_t (**)(ValueMetadata *, uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v19 + 32))(&type metadata for RectangleMark, v13, &type metadata for RectangleMark, &off_26D13DDD0, v20, v19);
    uint64_t v22 = type metadata accessor for SgClipRect(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v8, 1, 1, v22);
    uint64_t v23 = v13 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
    swift_beginAccess();
    uint64_t v24 = *(void *)(v23 + *(int *)(type metadata accessor for ChartContentRenderContext.Environment(0) + 64));
    sub_21F868C70((uint64_t)v11, type metadata accessor for RectanglesRenderer);
    *uint64_t v18 = v30;
    v18[1] = v21;
    uint64_t result = sub_21F7B94C0((uint64_t)v8, (uint64_t)v18 + v15[6]);
    *(void *)((char *)v18 + v15[7]) = 0x3FF0000000000000;
    *(void *)((char *)v18 + v15[8]) = v24;
    *(void *)((char *)v18 + v15[9]) = MEMORY[0x263F8EE78];
    uint64_t v26 = v15[10];
    a3 = v31;
    *((unsigned char *)v18 + v26) = 0;
  }
  else
  {
    type metadata accessor for AnyVectorizedRenderer(0);
    uint64_t v27 = swift_allocBox();
    sub_21F865C34((uint64_t)v11, v28);
    type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
    uint64_t result = swift_storeEnumTagMultiPayload();
    unint64_t v16 = v27 | 0xD000000000000000;
  }
  *a3 = v16;
  return result;
}

uint64_t sub_21F865C34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RectanglesRenderer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21F865C98()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21F865CE0(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21F865D3C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_21F865E98(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x21F8660B0);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for RectanglePlot()
{
  return sub_21F764F08();
}

uint64_t sub_21F8660F0()
{
  uint64_t result = type metadata accessor for RectanglesRenderer(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_21F86617C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for RectanglesRenderer(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *(void *)a1 = *a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v6 = (int *)v4;
    long long v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    *(void *)(a1 + 48) = a2[6];
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
    uint64_t v8 = v6[8];
    BOOL v9 = (_OWORD *)(a1 + v8);
    unsigned int v10 = (_OWORD *)((char *)a2 + v8);
    int v11 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
    uint64_t v12 = *((void *)v11 - 1);
    int v13 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v12 + 48);
    swift_retain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = sub_21F76CA40(qword_267EE7A88);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      int v16 = *((unsigned __int8 *)v10 + 40);
      if (v16 == 255)
      {
        long long v17 = v10[1];
        *BOOL v9 = *v10;
        v9[1] = v17;
        *(_OWORD *)((char *)v9 + 25) = *(_OWORD *)((char *)v10 + 25);
      }
      else if (v16)
      {
        long long v18 = *(_OWORD *)((char *)v10 + 24);
        *(_OWORD *)((char *)v9 + 24) = v18;
        (**(void (***)(_OWORD *, _OWORD *))(v18 - 8))(v9, v10);
        *((unsigned char *)v9 + 40) = 1;
      }
      else
      {
        *(void *)BOOL v9 = *(void *)v10;
        *((unsigned char *)v9 + 40) = 0;
        swift_retain();
      }
      *((unsigned char *)v9 + 41) = *((unsigned char *)v10 + 41);
      *((void *)v9 + 6) = *((void *)v10 + 6);
      *((void *)v9 + 7) = *((void *)v10 + 7);
      uint64_t v19 = *((void *)v10 + 9);
      *((void *)v9 + 8) = *((void *)v10 + 8);
      *((void *)v9 + 9) = v19;
      *((void *)v9 + 10) = *((void *)v10 + 10);
      int v20 = *((unsigned __int8 *)v10 + 128);
      swift_bridgeObjectRetain();
      uint64_t v126 = v6;
      if (v20 == 255)
      {
        long long v21 = *(_OWORD *)((char *)v10 + 104);
        *(_OWORD *)((char *)v9 + 88) = *(_OWORD *)((char *)v10 + 88);
        *(_OWORD *)((char *)v9 + 104) = v21;
        *(_OWORD *)((char *)v9 + 113) = *(_OWORD *)((char *)v10 + 113);
      }
      else if (v20)
      {
        *((void *)v9 + 11) = *((void *)v10 + 11);
        v9[6] = v10[6];
        *((unsigned char *)v9 + 128) = 1;
        swift_retain();
      }
      else
      {
        long long v22 = v10[7];
        v9[7] = v22;
        (**(void (***)(uint64_t, uint64_t))(v22 - 8))((uint64_t)v9 + 88, (uint64_t)v10 + 88);
        *((unsigned char *)v9 + 128) = 0;
      }
      *(_OWORD *)((char *)v9 + 136) = *(_OWORD *)((char *)v10 + 136);
      *((unsigned char *)v9 + 152) = *((unsigned char *)v10 + 152);
      *((void *)v9 + 20) = *((void *)v10 + 20);
      *((unsigned char *)v9 + 168) = *((unsigned char *)v10 + 168);
      long long v23 = v10[12];
      v9[11] = v10[11];
      v9[12] = v23;
      *((unsigned char *)v9 + 208) = *((unsigned char *)v10 + 208);
      uint64_t v24 = v11[11];
      long long v25 = (char *)v9 + v24;
      uint64_t v26 = (char *)v10 + v24;
      uint64_t v27 = sub_21FA24C90();
      uint64_t v28 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        uint64_t v29 = sub_21F76CA40(&qword_26AD47C20);
        memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      uint64_t v30 = v11[12];
      uint64_t v31 = (char *)v9 + v30;
      uint64_t v32 = (char *)v10 + v30;
      *(void *)uint64_t v31 = *(void *)v32;
      v31[8] = v32[8];
      *(void *)((char *)v9 + v11[13]) = *(void *)((char *)v10 + v11[13]);
      uint64_t v33 = v11[14];
      uint64_t v34 = (char *)v9 + v33;
      uint64_t v35 = (char *)v10 + v33;
      uint64_t v36 = sub_21FA25910();
      uint64_t v37 = *(void *)(v36 - 8);
      uint64_t v125 = v12;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
      {
        uint64_t v38 = sub_21F76CA40(&qword_26AD4A3B8);
        memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      }
      uint64_t v39 = v11[15];
      uint64_t v40 = (char *)v9 + v39;
      int v41 = (char *)v10 + v39;
      *(void *)uint64_t v40 = *(void *)v41;
      *((_WORD *)v40 + 4) = *((_WORD *)v41 + 4);
      *(void *)((char *)v9 + v11[16]) = *(void *)((char *)v10 + v11[16]);
      *(void *)((char *)v9 + v11[17]) = *(void *)((char *)v10 + v11[17]);
      uint64_t v42 = v11[18];
      uint64_t v43 = (char *)v9 + v42;
      uint64_t v44 = (char *)v10 + v42;
      uint64_t v45 = *(void *)((char *)v10 + v42 + 24);
      swift_retain();
      if (v45)
      {
        uint64_t v46 = *(void *)v44;
        uint64_t v47 = *((void *)v44 + 1);
        char v48 = v44[16];
        sub_21F7652C0(*(void *)v44, v47, v48);
        *(void *)uint64_t v43 = v46;
        *((void *)v43 + 1) = v47;
        v43[16] = v48;
        uint64_t v49 = *((void *)v44 + 4);
        *((void *)v43 + 3) = *((void *)v44 + 3);
        uint64_t v50 = *((void *)v44 + 5);
        char v51 = v44[48];
        swift_bridgeObjectRetain();
        sub_21F770E44(v49, v50, v51);
        *((void *)v43 + 4) = v49;
        *((void *)v43 + 5) = v50;
        v43[48] = v51;
        *(_OWORD *)(v43 + 56) = *(_OWORD *)(v44 + 56);
      }
      else
      {
        long long v52 = *((_OWORD *)v44 + 3);
        *((_OWORD *)v43 + 2) = *((_OWORD *)v44 + 2);
        *((_OWORD *)v43 + 3) = v52;
        *((void *)v43 + 8) = *((void *)v44 + 8);
        long long v53 = *((_OWORD *)v44 + 1);
        *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
        *((_OWORD *)v43 + 1) = v53;
      }
      uint64_t v54 = v11[19];
      uint64_t v55 = (char *)v9 + v54;
      uint64_t v56 = (char *)v10 + v54;
      if (*(void *)((char *)v10 + v54 + 24))
      {
        uint64_t v57 = *(void *)v56;
        uint64_t v58 = *((void *)v56 + 1);
        char v59 = v56[16];
        sub_21F7652C0(*(void *)v56, v58, v59);
        *(void *)uint64_t v55 = v57;
        *((void *)v55 + 1) = v58;
        v55[16] = v59;
        uint64_t v60 = *((void *)v56 + 4);
        *((void *)v55 + 3) = *((void *)v56 + 3);
        uint64_t v61 = *((void *)v56 + 5);
        char v62 = v56[48];
        swift_bridgeObjectRetain();
        sub_21F770E44(v60, v61, v62);
        *((void *)v55 + 4) = v60;
        *((void *)v55 + 5) = v61;
        v55[48] = v62;
        *(_OWORD *)(v55 + 56) = *(_OWORD *)(v56 + 56);
      }
      else
      {
        long long v63 = *((_OWORD *)v56 + 3);
        *((_OWORD *)v55 + 2) = *((_OWORD *)v56 + 2);
        *((_OWORD *)v55 + 3) = v63;
        *((void *)v55 + 8) = *((void *)v56 + 8);
        long long v64 = *((_OWORD *)v56 + 1);
        *(_OWORD *)uint64_t v55 = *(_OWORD *)v56;
        *((_OWORD *)v55 + 1) = v64;
      }
      uint64_t v65 = v11[20];
      uint64_t v66 = (char *)v9 + v65;
      uint64_t v67 = (char *)v10 + v65;
      if (*(void *)((char *)v10 + v65 + 24))
      {
        uint64_t v68 = *(void *)v67;
        uint64_t v69 = *((void *)v67 + 1);
        char v70 = v67[16];
        sub_21F7652C0(*(void *)v67, v69, v70);
        *(void *)uint64_t v66 = v68;
        *((void *)v66 + 1) = v69;
        v66[16] = v70;
        uint64_t v71 = *((void *)v67 + 4);
        *((void *)v66 + 3) = *((void *)v67 + 3);
        uint64_t v72 = *((void *)v67 + 5);
        char v73 = v67[48];
        swift_bridgeObjectRetain();
        sub_21F770E44(v71, v72, v73);
        *((void *)v66 + 4) = v71;
        *((void *)v66 + 5) = v72;
        v66[48] = v73;
        *(_OWORD *)(v66 + 56) = *(_OWORD *)(v67 + 56);
      }
      else
      {
        long long v74 = *((_OWORD *)v67 + 3);
        *((_OWORD *)v66 + 2) = *((_OWORD *)v67 + 2);
        *((_OWORD *)v66 + 3) = v74;
        *((void *)v66 + 8) = *((void *)v67 + 8);
        long long v75 = *((_OWORD *)v67 + 1);
        *(_OWORD *)uint64_t v66 = *(_OWORD *)v67;
        *((_OWORD *)v66 + 1) = v75;
      }
      uint64_t v76 = v11[21];
      uint64_t v77 = (char *)v9 + v76;
      uint64_t v78 = (char *)v10 + v76;
      if (*(void *)((char *)v10 + v76 + 24))
      {
        uint64_t v79 = *(void *)v78;
        uint64_t v80 = *((void *)v78 + 1);
        char v81 = v78[16];
        sub_21F7652C0(*(void *)v78, v80, v81);
        *(void *)uint64_t v77 = v79;
        *((void *)v77 + 1) = v80;
        v77[16] = v81;
        uint64_t v82 = *((void *)v78 + 4);
        *((void *)v77 + 3) = *((void *)v78 + 3);
        uint64_t v83 = *((void *)v78 + 5);
        char v84 = v78[48];
        swift_bridgeObjectRetain();
        sub_21F770E44(v82, v83, v84);
        *((void *)v77 + 4) = v82;
        *((void *)v77 + 5) = v83;
        v77[48] = v84;
        *(_OWORD *)(v77 + 56) = *(_OWORD *)(v78 + 56);
      }
      else
      {
        long long v85 = *((_OWORD *)v78 + 3);
        *((_OWORD *)v77 + 2) = *((_OWORD *)v78 + 2);
        *((_OWORD *)v77 + 3) = v85;
        *((void *)v77 + 8) = *((void *)v78 + 8);
        long long v86 = *((_OWORD *)v78 + 1);
        *(_OWORD *)uint64_t v77 = *(_OWORD *)v78;
        *((_OWORD *)v77 + 1) = v86;
      }
      uint64_t v87 = v11[22];
      double v88 = (char *)v9 + v87;
      uint64_t v89 = (char *)v10 + v87;
      *(_OWORD *)double v88 = *(_OWORD *)v89;
      *((void *)v88 + 2) = *((void *)v89 + 2);
      uint64_t v90 = v11[23];
      uint64_t v91 = (char *)v9 + v90;
      char v92 = (char *)v10 + v90;
      *(_OWORD *)uint64_t v91 = *(_OWORD *)v92;
      *((void *)v91 + 2) = *((void *)v92 + 2);
      uint64_t v93 = v11[24];
      double v94 = (char *)v9 + v93;
      char v95 = (char *)v10 + v93;
      if (*(void *)((char *)v10 + v93 + 24))
      {
        uint64_t v96 = *(void *)v95;
        uint64_t v97 = *((void *)v95 + 1);
        char v98 = v95[16];
        sub_21F7652C0(*(void *)v95, v97, v98);
        *(void *)double v94 = v96;
        *((void *)v94 + 1) = v97;
        v94[16] = v98;
        *((void *)v94 + 3) = *((void *)v95 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v99 = *((_OWORD *)v95 + 1);
        *(_OWORD *)double v94 = *(_OWORD *)v95;
        *((_OWORD *)v94 + 1) = v99;
      }
      uint64_t v100 = v11[25];
      uint64_t v101 = (char *)v9 + v100;
      uint64_t v102 = (char *)v10 + v100;
      if (*(void *)((char *)v10 + v100 + 24))
      {
        uint64_t v103 = *(void *)v102;
        uint64_t v104 = *((void *)v102 + 1);
        char v105 = v102[16];
        sub_21F7652C0(*(void *)v102, v104, v105);
        *(void *)uint64_t v101 = v103;
        *((void *)v101 + 1) = v104;
        v101[16] = v105;
        *((void *)v101 + 3) = *((void *)v102 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v106 = *((_OWORD *)v102 + 1);
        *(_OWORD *)uint64_t v101 = *(_OWORD *)v102;
        *((_OWORD *)v101 + 1) = v106;
      }
      uint64_t v6 = v126;
      uint64_t v107 = v11[26];
      uint64_t v108 = (void *)((char *)v9 + v107);
      uint64_t v109 = (void *)((char *)v10 + v107);
      uint64_t v110 = v109[1];
      *uint64_t v108 = *v109;
      v108[1] = v110;
      *((unsigned char *)v9 + v11[27]) = *((unsigned char *)v10 + v11[27]);
      uint64_t v111 = v11[28];
      uint64_t v112 = (char *)v9 + v111;
      uint64_t v113 = (char *)v10 + v111;
      uint64_t v114 = *((void *)v113 + 3);
      swift_bridgeObjectRetain();
      if (v114)
      {
        *((void *)v112 + 3) = v114;
        (**(void (***)(char *, char *, uint64_t))(v114 - 8))(v112, v113, v114);
      }
      else
      {
        long long v115 = *((_OWORD *)v113 + 1);
        *(_OWORD *)uint64_t v112 = *(_OWORD *)v113;
        *((_OWORD *)v112 + 1) = v115;
      }
      (*(void (**)(_OWORD *, void, uint64_t, int *))(v125 + 56))(v9, 0, 1, v11);
    }
    uint64_t v116 = v6[9];
    uint64_t v117 = a1 + v116;
    uint64_t v118 = (uint64_t)a2 + v116;
    long long v119 = *(_OWORD *)(v118 + 16);
    *(_OWORD *)uint64_t v117 = *(_OWORD *)v118;
    *(_OWORD *)(v117 + 16) = v119;
    *(unsigned char *)(v117 + 32) = *(unsigned char *)(v118 + 32);
    uint64_t v120 = v6[10];
    uint64_t v121 = a1 + v120;
    uint64_t v122 = (uint64_t)a2 + v120;
    uint64_t v123 = sub_21FA24C90();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v123 - 8) + 16))(v121, v122, v123);
  }
  return a1;
}

uint64_t sub_21F866A7C(uint64_t a1)
{
  _s6Charts15AnyChartContentVwxx_0(a1);
  swift_release();
  uint64_t v2 = type metadata accessor for RectanglesRenderer(0);
  uint64_t v3 = a1 + *(int *)(v2 + 32);
  uint64_t v4 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v4 - 1) + 48))(v3, 1, v4))
  {
    int v5 = *(unsigned __int8 *)(v3 + 40);
    if (v5 != 255)
    {
      if (v5) {
        _s6Charts15AnyChartContentVwxx_0(v3);
      }
      else {
        swift_release();
      }
    }
    swift_bridgeObjectRelease();
    int v6 = *(unsigned __int8 *)(v3 + 128);
    if (v6 != 255)
    {
      if (v6) {
        swift_release();
      }
      else {
        _s6Charts15AnyChartContentVwxx_0(v3 + 88);
      }
    }
    uint64_t v7 = v3 + v4[11];
    uint64_t v8 = sub_21FA24C90();
    uint64_t v9 = *(void *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    }
    uint64_t v10 = v3 + v4[14];
    uint64_t v11 = sub_21FA25910();
    uint64_t v12 = *(void *)(v11 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    }
    swift_release();
    uint64_t v13 = v3 + v4[18];
    if (*(void *)(v13 + 24))
    {
      sub_21F7656A8(*(void *)v13, *(void *)(v13 + 8), *(unsigned char *)(v13 + 16));
      swift_bridgeObjectRelease();
      sub_21F770E38(*(void *)(v13 + 32), *(void *)(v13 + 40), *(unsigned char *)(v13 + 48));
    }
    uint64_t v14 = v3 + v4[19];
    if (*(void *)(v14 + 24))
    {
      sub_21F7656A8(*(void *)v14, *(void *)(v14 + 8), *(unsigned char *)(v14 + 16));
      swift_bridgeObjectRelease();
      sub_21F770E38(*(void *)(v14 + 32), *(void *)(v14 + 40), *(unsigned char *)(v14 + 48));
    }
    uint64_t v15 = v3 + v4[20];
    if (*(void *)(v15 + 24))
    {
      sub_21F7656A8(*(void *)v15, *(void *)(v15 + 8), *(unsigned char *)(v15 + 16));
      swift_bridgeObjectRelease();
      sub_21F770E38(*(void *)(v15 + 32), *(void *)(v15 + 40), *(unsigned char *)(v15 + 48));
    }
    uint64_t v16 = v3 + v4[21];
    if (*(void *)(v16 + 24))
    {
      sub_21F7656A8(*(void *)v16, *(void *)(v16 + 8), *(unsigned char *)(v16 + 16));
      swift_bridgeObjectRelease();
      sub_21F770E38(*(void *)(v16 + 32), *(void *)(v16 + 40), *(unsigned char *)(v16 + 48));
    }
    uint64_t v17 = v3 + v4[24];
    if (*(void *)(v17 + 24))
    {
      sub_21F7656A8(*(void *)v17, *(void *)(v17 + 8), *(unsigned char *)(v17 + 16));
      swift_bridgeObjectRelease();
    }
    uint64_t v18 = v3 + v4[25];
    if (*(void *)(v18 + 24))
    {
      sub_21F7656A8(*(void *)v18, *(void *)(v18 + 8), *(unsigned char *)(v18 + 16));
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v19 = v3 + v4[28];
    if (*(void *)(v19 + 24)) {
      _s6Charts15AnyChartContentVwxx_0(v19);
    }
  }
  uint64_t v20 = a1 + *(int *)(v2 + 40);
  uint64_t v21 = sub_21FA24C90();
  long long v22 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8);

  return v22(v20, v21);
}

uint64_t sub_21F866E0C(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  int v5 = (int *)type metadata accessor for RectanglesRenderer(0);
  uint64_t v6 = v5[8];
  uint64_t v7 = (_OWORD *)(a1 + v6);
  uint64_t v8 = (_OWORD *)(a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v10 = *((void *)v9 - 1);
  uint64_t v11 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v10 + 48);
  swift_retain();
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_21F76CA40(qword_267EE7A88);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    int v13 = *((unsigned __int8 *)v8 + 40);
    if (v13 == 255)
    {
      long long v14 = v8[1];
      *uint64_t v7 = *v8;
      v7[1] = v14;
      *(_OWORD *)((char *)v7 + 25) = *(_OWORD *)((char *)v8 + 25);
    }
    else if (v13)
    {
      long long v15 = *(_OWORD *)((char *)v8 + 24);
      *(_OWORD *)((char *)v7 + 24) = v15;
      (**(void (***)(_OWORD *, _OWORD *))(v15 - 8))(v7, v8);
      *((unsigned char *)v7 + 40) = 1;
    }
    else
    {
      *(void *)uint64_t v7 = *(void *)v8;
      *((unsigned char *)v7 + 40) = 0;
      swift_retain();
    }
    *((unsigned char *)v7 + 41) = *((unsigned char *)v8 + 41);
    *((void *)v7 + 6) = *((void *)v8 + 6);
    *((void *)v7 + 7) = *((void *)v8 + 7);
    uint64_t v16 = *((void *)v8 + 9);
    *((void *)v7 + 8) = *((void *)v8 + 8);
    *((void *)v7 + 9) = v16;
    *((void *)v7 + 10) = *((void *)v8 + 10);
    int v17 = *((unsigned __int8 *)v8 + 128);
    swift_bridgeObjectRetain();
    uint64_t v122 = v10;
    if (v17 == 255)
    {
      long long v18 = *(_OWORD *)((char *)v8 + 104);
      *(_OWORD *)((char *)v7 + 88) = *(_OWORD *)((char *)v8 + 88);
      *(_OWORD *)((char *)v7 + 104) = v18;
      *(_OWORD *)((char *)v7 + 113) = *(_OWORD *)((char *)v8 + 113);
    }
    else if (v17)
    {
      *((void *)v7 + 11) = *((void *)v8 + 11);
      v7[6] = v8[6];
      *((unsigned char *)v7 + 128) = 1;
      swift_retain();
    }
    else
    {
      long long v19 = v8[7];
      v7[7] = v19;
      (**(void (***)(uint64_t, uint64_t))(v19 - 8))((uint64_t)v7 + 88, (uint64_t)v8 + 88);
      *((unsigned char *)v7 + 128) = 0;
    }
    *(_OWORD *)((char *)v7 + 136) = *(_OWORD *)((char *)v8 + 136);
    *((unsigned char *)v7 + 152) = *((unsigned char *)v8 + 152);
    *((void *)v7 + 20) = *((void *)v8 + 20);
    *((unsigned char *)v7 + 168) = *((unsigned char *)v8 + 168);
    long long v20 = v8[12];
    v7[11] = v8[11];
    v7[12] = v20;
    *((unsigned char *)v7 + 208) = *((unsigned char *)v8 + 208);
    uint64_t v21 = v9[11];
    long long v22 = (char *)v7 + v21;
    long long v23 = (char *)v8 + v21;
    uint64_t v24 = sub_21FA24C90();
    uint64_t v25 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      uint64_t v26 = sub_21F76CA40(&qword_26AD47C20);
      memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    uint64_t v27 = v9[12];
    uint64_t v28 = (char *)v7 + v27;
    uint64_t v29 = (char *)v8 + v27;
    *(void *)uint64_t v28 = *(void *)v29;
    v28[8] = v29[8];
    *(void *)((char *)v7 + v9[13]) = *(void *)((char *)v8 + v9[13]);
    uint64_t v30 = v9[14];
    uint64_t v31 = (char *)v7 + v30;
    uint64_t v32 = (char *)v8 + v30;
    uint64_t v33 = sub_21FA25910();
    uint64_t v34 = *(void *)(v33 - 8);
    uint64_t v123 = v5;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      uint64_t v35 = sub_21F76CA40(&qword_26AD4A3B8);
      memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
    }
    uint64_t v36 = v9[15];
    uint64_t v37 = (char *)v7 + v36;
    uint64_t v38 = (char *)v8 + v36;
    *(void *)uint64_t v37 = *(void *)v38;
    *((_WORD *)v37 + 4) = *((_WORD *)v38 + 4);
    *(void *)((char *)v7 + v9[16]) = *(void *)((char *)v8 + v9[16]);
    *(void *)((char *)v7 + v9[17]) = *(void *)((char *)v8 + v9[17]);
    uint64_t v39 = v9[18];
    uint64_t v40 = (char *)v7 + v39;
    int v41 = (char *)v8 + v39;
    uint64_t v42 = *(void *)((char *)v8 + v39 + 24);
    swift_retain();
    if (v42)
    {
      uint64_t v43 = *(void *)v41;
      uint64_t v44 = *((void *)v41 + 1);
      char v45 = v41[16];
      sub_21F7652C0(*(void *)v41, v44, v45);
      *(void *)uint64_t v40 = v43;
      *((void *)v40 + 1) = v44;
      v40[16] = v45;
      uint64_t v46 = *((void *)v41 + 4);
      *((void *)v40 + 3) = *((void *)v41 + 3);
      uint64_t v47 = *((void *)v41 + 5);
      char v48 = v41[48];
      swift_bridgeObjectRetain();
      sub_21F770E44(v46, v47, v48);
      *((void *)v40 + 4) = v46;
      *((void *)v40 + 5) = v47;
      v40[48] = v48;
      *(_OWORD *)(v40 + 56) = *(_OWORD *)(v41 + 56);
    }
    else
    {
      long long v49 = *((_OWORD *)v41 + 3);
      *((_OWORD *)v40 + 2) = *((_OWORD *)v41 + 2);
      *((_OWORD *)v40 + 3) = v49;
      *((void *)v40 + 8) = *((void *)v41 + 8);
      long long v50 = *((_OWORD *)v41 + 1);
      *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
      *((_OWORD *)v40 + 1) = v50;
    }
    uint64_t v51 = v9[19];
    long long v52 = (char *)v7 + v51;
    long long v53 = (char *)v8 + v51;
    if (*(void *)((char *)v8 + v51 + 24))
    {
      uint64_t v54 = *(void *)v53;
      uint64_t v55 = *((void *)v53 + 1);
      char v56 = v53[16];
      sub_21F7652C0(*(void *)v53, v55, v56);
      *(void *)long long v52 = v54;
      *((void *)v52 + 1) = v55;
      v52[16] = v56;
      uint64_t v57 = *((void *)v53 + 4);
      *((void *)v52 + 3) = *((void *)v53 + 3);
      uint64_t v58 = *((void *)v53 + 5);
      char v59 = v53[48];
      swift_bridgeObjectRetain();
      sub_21F770E44(v57, v58, v59);
      *((void *)v52 + 4) = v57;
      *((void *)v52 + 5) = v58;
      v52[48] = v59;
      *(_OWORD *)(v52 + 56) = *(_OWORD *)(v53 + 56);
    }
    else
    {
      long long v60 = *((_OWORD *)v53 + 3);
      *((_OWORD *)v52 + 2) = *((_OWORD *)v53 + 2);
      *((_OWORD *)v52 + 3) = v60;
      *((void *)v52 + 8) = *((void *)v53 + 8);
      long long v61 = *((_OWORD *)v53 + 1);
      *(_OWORD *)long long v52 = *(_OWORD *)v53;
      *((_OWORD *)v52 + 1) = v61;
    }
    uint64_t v62 = v9[20];
    long long v63 = (char *)v7 + v62;
    long long v64 = (char *)v8 + v62;
    if (*(void *)((char *)v8 + v62 + 24))
    {
      uint64_t v65 = *(void *)v64;
      uint64_t v66 = *((void *)v64 + 1);
      char v67 = v64[16];
      sub_21F7652C0(*(void *)v64, v66, v67);
      *(void *)long long v63 = v65;
      *((void *)v63 + 1) = v66;
      v63[16] = v67;
      uint64_t v68 = *((void *)v64 + 4);
      *((void *)v63 + 3) = *((void *)v64 + 3);
      uint64_t v69 = *((void *)v64 + 5);
      char v70 = v64[48];
      swift_bridgeObjectRetain();
      sub_21F770E44(v68, v69, v70);
      *((void *)v63 + 4) = v68;
      *((void *)v63 + 5) = v69;
      v63[48] = v70;
      *(_OWORD *)(v63 + 56) = *(_OWORD *)(v64 + 56);
    }
    else
    {
      long long v71 = *((_OWORD *)v64 + 3);
      *((_OWORD *)v63 + 2) = *((_OWORD *)v64 + 2);
      *((_OWORD *)v63 + 3) = v71;
      *((void *)v63 + 8) = *((void *)v64 + 8);
      long long v72 = *((_OWORD *)v64 + 1);
      *(_OWORD *)long long v63 = *(_OWORD *)v64;
      *((_OWORD *)v63 + 1) = v72;
    }
    uint64_t v73 = v9[21];
    long long v74 = (char *)v7 + v73;
    long long v75 = (char *)v8 + v73;
    if (*(void *)((char *)v8 + v73 + 24))
    {
      uint64_t v76 = *(void *)v75;
      uint64_t v77 = *((void *)v75 + 1);
      char v78 = v75[16];
      sub_21F7652C0(*(void *)v75, v77, v78);
      *(void *)long long v74 = v76;
      *((void *)v74 + 1) = v77;
      v74[16] = v78;
      uint64_t v79 = *((void *)v75 + 4);
      *((void *)v74 + 3) = *((void *)v75 + 3);
      uint64_t v80 = *((void *)v75 + 5);
      char v81 = v75[48];
      swift_bridgeObjectRetain();
      sub_21F770E44(v79, v80, v81);
      *((void *)v74 + 4) = v79;
      *((void *)v74 + 5) = v80;
      v74[48] = v81;
      *(_OWORD *)(v74 + 56) = *(_OWORD *)(v75 + 56);
    }
    else
    {
      long long v82 = *((_OWORD *)v75 + 3);
      *((_OWORD *)v74 + 2) = *((_OWORD *)v75 + 2);
      *((_OWORD *)v74 + 3) = v82;
      *((void *)v74 + 8) = *((void *)v75 + 8);
      long long v83 = *((_OWORD *)v75 + 1);
      *(_OWORD *)long long v74 = *(_OWORD *)v75;
      *((_OWORD *)v74 + 1) = v83;
    }
    uint64_t v84 = v9[22];
    long long v85 = (char *)v7 + v84;
    long long v86 = (char *)v8 + v84;
    *(_OWORD *)long long v85 = *(_OWORD *)v86;
    *((void *)v85 + 2) = *((void *)v86 + 2);
    uint64_t v87 = v9[23];
    double v88 = (char *)v7 + v87;
    uint64_t v89 = (char *)v8 + v87;
    *(_OWORD *)double v88 = *(_OWORD *)v89;
    *((void *)v88 + 2) = *((void *)v89 + 2);
    uint64_t v90 = v9[24];
    uint64_t v91 = (char *)v7 + v90;
    char v92 = (char *)v8 + v90;
    if (*(void *)((char *)v8 + v90 + 24))
    {
      uint64_t v93 = *(void *)v92;
      uint64_t v94 = *((void *)v92 + 1);
      char v95 = v92[16];
      sub_21F7652C0(*(void *)v92, v94, v95);
      *(void *)uint64_t v91 = v93;
      *((void *)v91 + 1) = v94;
      v91[16] = v95;
      *((void *)v91 + 3) = *((void *)v92 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v96 = *((_OWORD *)v92 + 1);
      *(_OWORD *)uint64_t v91 = *(_OWORD *)v92;
      *((_OWORD *)v91 + 1) = v96;
    }
    uint64_t v97 = v9[25];
    char v98 = (char *)v7 + v97;
    long long v99 = (char *)v8 + v97;
    if (*(void *)((char *)v8 + v97 + 24))
    {
      uint64_t v100 = *(void *)v99;
      uint64_t v101 = *((void *)v99 + 1);
      char v102 = v99[16];
      sub_21F7652C0(*(void *)v99, v101, v102);
      *(void *)char v98 = v100;
      *((void *)v98 + 1) = v101;
      v98[16] = v102;
      *((void *)v98 + 3) = *((void *)v99 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v103 = *((_OWORD *)v99 + 1);
      *(_OWORD *)char v98 = *(_OWORD *)v99;
      *((_OWORD *)v98 + 1) = v103;
    }
    int v5 = v123;
    uint64_t v104 = v9[26];
    char v105 = (void *)((char *)v7 + v104);
    long long v106 = (void *)((char *)v8 + v104);
    uint64_t v107 = v106[1];
    *char v105 = *v106;
    v105[1] = v107;
    *((unsigned char *)v7 + v9[27]) = *((unsigned char *)v8 + v9[27]);
    uint64_t v108 = v9[28];
    uint64_t v109 = (char *)v7 + v108;
    uint64_t v110 = (char *)v8 + v108;
    uint64_t v111 = *((void *)v110 + 3);
    swift_bridgeObjectRetain();
    if (v111)
    {
      *((void *)v109 + 3) = v111;
      (**(void (***)(char *, char *, uint64_t))(v111 - 8))(v109, v110, v111);
    }
    else
    {
      long long v112 = *((_OWORD *)v110 + 1);
      *(_OWORD *)uint64_t v109 = *(_OWORD *)v110;
      *((_OWORD *)v109 + 1) = v112;
    }
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v122 + 56))(v7, 0, 1, v9);
  }
  uint64_t v113 = v5[9];
  uint64_t v114 = a1 + v113;
  uint64_t v115 = a2 + v113;
  long long v116 = *(_OWORD *)(v115 + 16);
  *(_OWORD *)uint64_t v114 = *(_OWORD *)v115;
  *(_OWORD *)(v114 + 16) = v116;
  *(unsigned char *)(v114 + 32) = *(unsigned char *)(v115 + 32);
  uint64_t v117 = v5[10];
  uint64_t v118 = a1 + v117;
  uint64_t v119 = a2 + v117;
  uint64_t v120 = sub_21FA24C90();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v120 - 8) + 16))(v118, v119, v120);
  return a1;
}

uint64_t sub_21F8676B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  sub_21F7ABEA8((uint64_t *)a1, a2);
  *(unsigned char *)(a1 + 40) = *((unsigned char *)v2 + 40);
  *(void *)(a1 + 48) = v2[6];
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = v2[7];
  *(void *)(a1 + 64) = v2[8];
  long long v4 = (int *)type metadata accessor for RectanglesRenderer(0);
  uint64_t v5 = v4[8];
  uint64_t v6 = a1 + v5;
  uint64_t v7 = (char *)v2 + v5;
  uint64_t v8 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v9 = *((void *)v8 - 1);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v9 + 48);
  int v11 = v10(v6, 1, v8);
  int v12 = v10((uint64_t)v7, 1, v8);
  if (v11)
  {
    if (!v12)
    {
      int v13 = v7[40];
      if (v13 == 255)
      {
        long long v14 = *(_OWORD *)v7;
        long long v15 = *((_OWORD *)v7 + 1);
        *(_OWORD *)(v6 + 25) = *(_OWORD *)(v7 + 25);
        *(_OWORD *)uint64_t v6 = v14;
        *(_OWORD *)(v6 + 16) = v15;
      }
      else if (v13)
      {
        uint64_t v20 = *((void *)v7 + 3);
        *(void *)(v6 + 24) = v20;
        *(void *)(v6 + 32) = *((void *)v7 + 4);
        (**(void (***)(uint64_t, char *))(v20 - 8))(v6, v7);
        *(unsigned char *)(v6 + 40) = 1;
      }
      else
      {
        *(void *)uint64_t v6 = *(void *)v7;
        *(unsigned char *)(v6 + 40) = 0;
        swift_retain();
      }
      *(unsigned char *)(v6 + 41) = v7[41];
      *(void *)(v6 + 48) = *((void *)v7 + 6);
      *(_DWORD *)(v6 + 56) = *((_DWORD *)v7 + 14);
      *(_DWORD *)(v6 + 60) = *((_DWORD *)v7 + 15);
      *(void *)(v6 + 64) = *((void *)v7 + 8);
      *(void *)(v6 + 72) = *((void *)v7 + 9);
      *(void *)(v6 + 80) = *((void *)v7 + 10);
      int v21 = v7[128];
      swift_bridgeObjectRetain();
      long long v344 = v4;
      if (v21 == 255)
      {
        long long v22 = *(_OWORD *)(v7 + 88);
        long long v23 = *(_OWORD *)(v7 + 104);
        *(_OWORD *)(v6 + 113) = *(_OWORD *)(v7 + 113);
        *(_OWORD *)(v6 + 88) = v22;
        *(_OWORD *)(v6 + 104) = v23;
      }
      else if (v21)
      {
        *(void *)(v6 + 88) = *((void *)v7 + 11);
        *(_OWORD *)(v6 + 96) = *((_OWORD *)v7 + 6);
        *(unsigned char *)(v6 + 128) = 1;
        swift_retain();
      }
      else
      {
        uint64_t v24 = *((void *)v7 + 14);
        *(void *)(v6 + 112) = v24;
        *(void *)(v6 + 120) = *((void *)v7 + 15);
        (**(void (***)(uint64_t, uint64_t))(v24 - 8))(v6 + 88, (uint64_t)(v7 + 88));
        *(unsigned char *)(v6 + 128) = 0;
      }
      long long v25 = *(_OWORD *)(v7 + 136);
      *(unsigned char *)(v6 + 152) = v7[152];
      *(_OWORD *)(v6 + 136) = v25;
      uint64_t v26 = *((void *)v7 + 20);
      *(unsigned char *)(v6 + 168) = v7[168];
      *(void *)(v6 + 160) = v26;
      long long v27 = *((_OWORD *)v7 + 11);
      long long v28 = *((_OWORD *)v7 + 12);
      *(unsigned char *)(v6 + 208) = v7[208];
      *(_OWORD *)(v6 + 176) = v27;
      *(_OWORD *)(v6 + 192) = v28;
      uint64_t v29 = v8[11];
      uint64_t v30 = (void *)(v6 + v29);
      uint64_t v31 = &v7[v29];
      uint64_t v32 = sub_21FA24C90();
      uint64_t v33 = *(void *)(v32 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      {
        uint64_t v34 = sub_21F76CA40(&qword_26AD47C20);
        memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      uint64_t v35 = v8[12];
      uint64_t v36 = v6 + v35;
      uint64_t v37 = &v7[v35];
      uint64_t v38 = *(void *)v37;
      *(unsigned char *)(v36 + 8) = v37[8];
      *(void *)uint64_t v36 = v38;
      *(void *)(v6 + v8[13]) = *(void *)&v7[v8[13]];
      uint64_t v39 = v8[14];
      uint64_t v40 = (void *)(v6 + v39);
      int v41 = &v7[v39];
      uint64_t v42 = sub_21FA25910();
      uint64_t v43 = *(void *)(v42 - 8);
      uint64_t v341 = v9;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        uint64_t v44 = sub_21F76CA40(&qword_26AD4A3B8);
        memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v43 + 16))(v40, v41, v42);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
      uint64_t v45 = v8[15];
      uint64_t v46 = v6 + v45;
      uint64_t v47 = &v7[v45];
      *(void *)uint64_t v46 = *(void *)v47;
      *(_WORD *)(v46 + 8) = *((_WORD *)v47 + 4);
      *(void *)(v6 + v8[16]) = *(void *)&v7[v8[16]];
      *(void *)(v6 + v8[17]) = *(void *)&v7[v8[17]];
      uint64_t v48 = v8[18];
      uint64_t v49 = v6 + v48;
      long long v50 = &v7[v48];
      uint64_t v51 = *(void *)&v7[v48 + 24];
      swift_retain();
      if (v51)
      {
        uint64_t v52 = *(void *)v50;
        uint64_t v53 = *((void *)v50 + 1);
        char v54 = v50[16];
        sub_21F7652C0(*(void *)v50, v53, v54);
        *(void *)uint64_t v49 = v52;
        *(void *)(v49 + 8) = v53;
        *(unsigned char *)(v49 + 16) = v54;
        *(void *)(v49 + 24) = *((void *)v50 + 3);
        uint64_t v55 = *((void *)v50 + 4);
        uint64_t v56 = *((void *)v50 + 5);
        char v57 = v50[48];
        swift_bridgeObjectRetain();
        sub_21F770E44(v55, v56, v57);
        *(void *)(v49 + 32) = v55;
        *(void *)(v49 + 40) = v56;
        *(unsigned char *)(v49 + 48) = v57;
        *(_OWORD *)(v49 + 56) = *(_OWORD *)(v50 + 56);
      }
      else
      {
        *(_OWORD *)uint64_t v49 = *(_OWORD *)v50;
        long long v58 = *((_OWORD *)v50 + 1);
        long long v59 = *((_OWORD *)v50 + 2);
        long long v60 = *((_OWORD *)v50 + 3);
        *(void *)(v49 + 64) = *((void *)v50 + 8);
        *(_OWORD *)(v49 + 32) = v59;
        *(_OWORD *)(v49 + 48) = v60;
        *(_OWORD *)(v49 + 16) = v58;
      }
      uint64_t v61 = v8[19];
      uint64_t v62 = v6 + v61;
      long long v63 = &v7[v61];
      if (*(void *)&v7[v61 + 24])
      {
        uint64_t v64 = *(void *)v63;
        uint64_t v65 = *((void *)v63 + 1);
        char v66 = v63[16];
        sub_21F7652C0(*(void *)v63, v65, v66);
        *(void *)uint64_t v62 = v64;
        *(void *)(v62 + 8) = v65;
        *(unsigned char *)(v62 + 16) = v66;
        *(void *)(v62 + 24) = *((void *)v63 + 3);
        uint64_t v67 = *((void *)v63 + 4);
        uint64_t v68 = *((void *)v63 + 5);
        char v69 = v63[48];
        swift_bridgeObjectRetain();
        sub_21F770E44(v67, v68, v69);
        *(void *)(v62 + 32) = v67;
        *(void *)(v62 + 40) = v68;
        *(unsigned char *)(v62 + 48) = v69;
        *(_OWORD *)(v62 + 56) = *(_OWORD *)(v63 + 56);
      }
      else
      {
        *(_OWORD *)uint64_t v62 = *(_OWORD *)v63;
        long long v70 = *((_OWORD *)v63 + 1);
        long long v71 = *((_OWORD *)v63 + 2);
        long long v72 = *((_OWORD *)v63 + 3);
        *(void *)(v62 + 64) = *((void *)v63 + 8);
        *(_OWORD *)(v62 + 32) = v71;
        *(_OWORD *)(v62 + 48) = v72;
        *(_OWORD *)(v62 + 16) = v70;
      }
      uint64_t v73 = v8[20];
      uint64_t v74 = v6 + v73;
      long long v75 = &v7[v73];
      if (*(void *)&v7[v73 + 24])
      {
        uint64_t v76 = *(void *)v75;
        uint64_t v77 = *((void *)v75 + 1);
        char v78 = v75[16];
        sub_21F7652C0(*(void *)v75, v77, v78);
        *(void *)uint64_t v74 = v76;
        *(void *)(v74 + 8) = v77;
        *(unsigned char *)(v74 + 16) = v78;
        *(void *)(v74 + 24) = *((void *)v75 + 3);
        uint64_t v79 = *((void *)v75 + 4);
        uint64_t v80 = *((void *)v75 + 5);
        char v81 = v75[48];
        swift_bridgeObjectRetain();
        sub_21F770E44(v79, v80, v81);
        *(void *)(v74 + 32) = v79;
        *(void *)(v74 + 40) = v80;
        *(unsigned char *)(v74 + 48) = v81;
        *(_OWORD *)(v74 + 56) = *(_OWORD *)(v75 + 56);
      }
      else
      {
        *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
        long long v82 = *((_OWORD *)v75 + 1);
        long long v83 = *((_OWORD *)v75 + 2);
        long long v84 = *((_OWORD *)v75 + 3);
        *(void *)(v74 + 64) = *((void *)v75 + 8);
        *(_OWORD *)(v74 + 32) = v83;
        *(_OWORD *)(v74 + 48) = v84;
        *(_OWORD *)(v74 + 16) = v82;
      }
      uint64_t v85 = v8[21];
      uint64_t v86 = v6 + v85;
      uint64_t v87 = &v7[v85];
      if (*(void *)&v7[v85 + 24])
      {
        uint64_t v88 = *(void *)v87;
        uint64_t v89 = *((void *)v87 + 1);
        char v90 = v87[16];
        sub_21F7652C0(*(void *)v87, v89, v90);
        *(void *)uint64_t v86 = v88;
        *(void *)(v86 + 8) = v89;
        *(unsigned char *)(v86 + 16) = v90;
        *(void *)(v86 + 24) = *((void *)v87 + 3);
        uint64_t v91 = *((void *)v87 + 4);
        uint64_t v92 = *((void *)v87 + 5);
        char v93 = v87[48];
        swift_bridgeObjectRetain();
        sub_21F770E44(v91, v92, v93);
        *(void *)(v86 + 32) = v91;
        *(void *)(v86 + 40) = v92;
        *(unsigned char *)(v86 + 48) = v93;
        *(_OWORD *)(v86 + 56) = *(_OWORD *)(v87 + 56);
      }
      else
      {
        *(_OWORD *)uint64_t v86 = *(_OWORD *)v87;
        long long v94 = *((_OWORD *)v87 + 1);
        long long v95 = *((_OWORD *)v87 + 2);
        long long v96 = *((_OWORD *)v87 + 3);
        *(void *)(v86 + 64) = *((void *)v87 + 8);
        *(_OWORD *)(v86 + 32) = v95;
        *(_OWORD *)(v86 + 48) = v96;
        *(_OWORD *)(v86 + 16) = v94;
      }
      uint64_t v97 = v8[22];
      uint64_t v98 = v6 + v97;
      long long v99 = &v7[v97];
      long long v100 = *(_OWORD *)v99;
      *(void *)(v98 + 16) = *((void *)v99 + 2);
      *(_OWORD *)uint64_t v98 = v100;
      uint64_t v101 = v8[23];
      uint64_t v102 = v6 + v101;
      long long v103 = &v7[v101];
      long long v104 = *(_OWORD *)v103;
      *(void *)(v102 + 16) = *((void *)v103 + 2);
      *(_OWORD *)uint64_t v102 = v104;
      uint64_t v105 = v8[24];
      uint64_t v106 = v6 + v105;
      uint64_t v107 = &v7[v105];
      if (*(void *)&v7[v105 + 24])
      {
        uint64_t v108 = *(void *)v107;
        uint64_t v109 = *((void *)v107 + 1);
        char v110 = v107[16];
        sub_21F7652C0(*(void *)v107, v109, v110);
        *(void *)uint64_t v106 = v108;
        *(void *)(v106 + 8) = v109;
        *(unsigned char *)(v106 + 16) = v110;
        *(void *)(v106 + 24) = *((void *)v107 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v111 = *((_OWORD *)v107 + 1);
        *(_OWORD *)uint64_t v106 = *(_OWORD *)v107;
        *(_OWORD *)(v106 + 16) = v111;
      }
      uint64_t v112 = v8[25];
      uint64_t v113 = v6 + v112;
      uint64_t v114 = &v7[v112];
      if (*(void *)&v7[v112 + 24])
      {
        uint64_t v115 = *(void *)v114;
        uint64_t v116 = *((void *)v114 + 1);
        char v117 = v114[16];
        sub_21F7652C0(*(void *)v114, v116, v117);
        *(void *)uint64_t v113 = v115;
        *(void *)(v113 + 8) = v116;
        *(unsigned char *)(v113 + 16) = v117;
        *(void *)(v113 + 24) = *((void *)v114 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v118 = *((_OWORD *)v114 + 1);
        *(_OWORD *)uint64_t v113 = *(_OWORD *)v114;
        *(_OWORD *)(v113 + 16) = v118;
      }
      long long v4 = v344;
      uint64_t v119 = v8[26];
      uint64_t v120 = (void *)(v6 + v119);
      uint64_t v121 = &v7[v119];
      void *v120 = *(void *)v121;
      v120[1] = *((void *)v121 + 1);
      *(unsigned char *)(v6 + v8[27]) = v7[v8[27]];
      uint64_t v122 = v8[28];
      uint64_t v123 = v6 + v122;
      uint64_t v124 = &v7[v122];
      uint64_t v125 = *((void *)v124 + 3);
      swift_bridgeObjectRetain();
      if (v125)
      {
        *(void *)(v123 + 24) = v125;
        (**(void (***)(uint64_t, char *, uint64_t))(v125 - 8))(v123, v124, v125);
      }
      else
      {
        long long v126 = *((_OWORD *)v124 + 1);
        *(_OWORD *)uint64_t v123 = *(_OWORD *)v124;
        *(_OWORD *)(v123 + 16) = v126;
      }
      (*(void (**)(uint64_t, void, uint64_t, int *))(v341 + 56))(v6, 0, 1, v8);
      goto LABEL_47;
    }
LABEL_7:
    uint64_t v16 = sub_21F76CA40(qword_267EE7A88);
    memcpy((void *)v6, v7, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_47;
  }
  if (v12)
  {
    sub_21F868C70(v6, type metadata accessor for ChartContentRenderContext.Environment);
    goto LABEL_7;
  }
  int v17 = v7[40];
  if (*(unsigned __int8 *)(v6 + 40) == 255)
  {
    if (v17 == 255)
    {
      long long v137 = *(_OWORD *)v7;
      long long v138 = *((_OWORD *)v7 + 1);
      *(_OWORD *)(v6 + 25) = *(_OWORD *)(v7 + 25);
      *(_OWORD *)uint64_t v6 = v137;
      *(_OWORD *)(v6 + 16) = v138;
      goto LABEL_55;
    }
    if (v17) {
      goto LABEL_52;
    }
LABEL_54:
    *(void *)uint64_t v6 = *(void *)v7;
    *(unsigned char *)(v6 + 40) = 0;
    swift_retain();
    goto LABEL_55;
  }
  if (v17 == 255)
  {
    sub_21F7D25BC(v6);
    long long v18 = *(_OWORD *)(v7 + 25);
    long long v19 = *((_OWORD *)v7 + 1);
    *(_OWORD *)uint64_t v6 = *(_OWORD *)v7;
    *(_OWORD *)(v6 + 16) = v19;
    *(_OWORD *)(v6 + 25) = v18;
    goto LABEL_55;
  }
  if ((uint64_t *)a1 != v2)
  {
    sub_21F7D25BC(v6);
    if (v7[40])
    {
LABEL_52:
      uint64_t v139 = *((void *)v7 + 3);
      *(void *)(v6 + 24) = v139;
      *(void *)(v6 + 32) = *((void *)v7 + 4);
      (**(void (***)(uint64_t, char *))(v139 - 8))(v6, v7);
      *(unsigned char *)(v6 + 40) = 1;
      goto LABEL_55;
    }
    goto LABEL_54;
  }
LABEL_55:
  *(unsigned char *)(v6 + 41) = v7[41];
  *(void *)(v6 + 48) = *((void *)v7 + 6);
  *(_DWORD *)(v6 + 56) = *((_DWORD *)v7 + 14);
  *(_DWORD *)(v6 + 60) = *((_DWORD *)v7 + 15);
  *(void *)(v6 + 64) = *((void *)v7 + 8);
  *(void *)(v6 + 72) = *((void *)v7 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v6 + 80) = *((void *)v7 + 10);
  int v140 = (long long *)(v6 + 88);
  uint64_t v141 = (long long *)(v7 + 88);
  int v142 = v7[128];
  if (*(unsigned __int8 *)(v6 + 128) == 255)
  {
    if (v142 == 255)
    {
      long long v145 = *v141;
      long long v146 = *(_OWORD *)(v7 + 104);
      *(_OWORD *)(v6 + 113) = *(_OWORD *)(v7 + 113);
      *int v140 = v145;
      *(_OWORD *)(v6 + 104) = v146;
      goto LABEL_65;
    }
    if (v142) {
      goto LABEL_62;
    }
LABEL_64:
    uint64_t v147 = *((void *)v7 + 14);
    *(void *)(v6 + 112) = v147;
    *(void *)(v6 + 120) = *((void *)v7 + 15);
    (**(void (***)(uint64_t, uint64_t))(v147 - 8))(v6 + 88, (uint64_t)(v7 + 88));
    *(unsigned char *)(v6 + 128) = 0;
    goto LABEL_65;
  }
  if (v142 == 255)
  {
    sub_21F7D2610(v6 + 88);
    long long v143 = *(_OWORD *)(v7 + 113);
    long long v144 = *(_OWORD *)(v7 + 104);
    *int v140 = *v141;
    *(_OWORD *)(v6 + 104) = v144;
    *(_OWORD *)(v6 + 113) = v143;
    goto LABEL_65;
  }
  if ((uint64_t *)a1 != v2)
  {
    sub_21F7D2610(v6 + 88);
    if (v7[128])
    {
LABEL_62:
      *(void *)(v6 + 88) = *((void *)v7 + 11);
      *(_OWORD *)(v6 + 96) = *((_OWORD *)v7 + 6);
      *(unsigned char *)(v6 + 128) = 1;
      swift_retain();
      goto LABEL_65;
    }
    goto LABEL_64;
  }
LABEL_65:
  char v340 = v2;
  long long v345 = v4;
  long long v148 = *(_OWORD *)(v7 + 136);
  *(unsigned char *)(v6 + 152) = v7[152];
  *(_OWORD *)(v6 + 136) = v148;
  uint64_t v149 = *((void *)v7 + 20);
  *(unsigned char *)(v6 + 168) = v7[168];
  *(void *)(v6 + 160) = v149;
  long long v150 = *((_OWORD *)v7 + 11);
  long long v151 = *((_OWORD *)v7 + 12);
  *(unsigned char *)(v6 + 208) = v7[208];
  *(_OWORD *)(v6 + 176) = v150;
  *(_OWORD *)(v6 + 192) = v151;
  uint64_t v152 = v8[11];
  uint64_t v153 = (void *)(v6 + v152);
  uint64_t v154 = &v7[v152];
  uint64_t v155 = sub_21FA24C90();
  uint64_t v156 = *(void *)(v155 - 8);
  uint64_t v157 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v156 + 48);
  uint64_t v342 = v153;
  LODWORD(v153) = v157(v153, 1, v155);
  int v158 = v157(v154, 1, v155);
  if (v153)
  {
    if (v158)
    {
      size_t v159 = *(void *)(*(void *)(sub_21F76CA40(&qword_26AD47C20) - 8) + 64);
      uint64_t v160 = v342;
LABEL_70:
      memcpy(v160, v154, v159);
      goto LABEL_73;
    }
    (*(void (**)(void *, char *, uint64_t))(v156 + 16))(v342, v154, v155);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v156 + 56))(v342, 0, 1, v155);
  }
  else
  {
    if (v158)
    {
      (*(void (**)(void *, uint64_t))(v156 + 8))(v342, v155);
      size_t v159 = *(void *)(*(void *)(sub_21F76CA40(&qword_26AD47C20) - 8) + 64);
      uint64_t v160 = v342;
      goto LABEL_70;
    }
    (*(void (**)(void *, char *, uint64_t))(v156 + 24))(v342, v154, v155);
  }
LABEL_73:
  uint64_t v161 = v8[12];
  uint64_t v162 = v6 + v161;
  uint64_t v163 = &v7[v161];
  uint64_t v164 = *(void *)v163;
  *(unsigned char *)(v162 + 8) = v163[8];
  *(void *)uint64_t v162 = v164;
  *(void *)(v6 + v8[13]) = *(void *)&v7[v8[13]];
  uint64_t v165 = v8[14];
  unint64_t v166 = (void *)(v6 + v165);
  uint64_t v167 = &v7[v165];
  uint64_t v168 = sub_21FA25910();
  uint64_t v169 = *(void *)(v168 - 8);
  uint64_t v170 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v169 + 48);
  char v343 = v166;
  LODWORD(v166) = v170(v166, 1, v168);
  int v171 = v170(v167, 1, v168);
  if (v166)
  {
    if (v171)
    {
      size_t v172 = *(void *)(*(void *)(sub_21F76CA40(&qword_26AD4A3B8) - 8) + 64);
      uint64_t v173 = v343;
LABEL_78:
      memcpy(v173, v167, v172);
      goto LABEL_81;
    }
    (*(void (**)(void *, char *, uint64_t))(v169 + 16))(v343, v167, v168);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v169 + 56))(v343, 0, 1, v168);
  }
  else
  {
    if (v171)
    {
      (*(void (**)(void *, uint64_t))(v169 + 8))(v343, v168);
      size_t v172 = *(void *)(*(void *)(sub_21F76CA40(&qword_26AD4A3B8) - 8) + 64);
      uint64_t v173 = v343;
      goto LABEL_78;
    }
    (*(void (**)(void *, char *, uint64_t))(v169 + 24))(v343, v167, v168);
  }
LABEL_81:
  uint64_t v2 = v340;
  uint64_t v174 = v8[15];
  uint64_t v175 = v6 + v174;
  uint64_t v176 = &v7[v174];
  *(void *)(v6 + v174) = *(void *)&v7[v174];
  swift_retain();
  swift_release();
  *(unsigned char *)(v175 + 8) = v176[8];
  *(unsigned char *)(v175 + 9) = v176[9];
  *(void *)(v6 + v8[16]) = *(void *)&v7[v8[16]];
  *(void *)(v6 + v8[17]) = *(void *)&v7[v8[17]];
  uint64_t v177 = v8[18];
  uint64_t v178 = v6 + v177;
  uint64_t v179 = &v7[v177];
  uint64_t v180 = *(void *)(v6 + v177 + 24);
  uint64_t v181 = *(void *)&v7[v177 + 24];
  if (v180)
  {
    if (v181)
    {
      uint64_t v182 = *(void *)v179;
      uint64_t v183 = *((void *)v179 + 1);
      char v184 = v179[16];
      sub_21F7652C0(*(void *)v179, v183, v184);
      uint64_t v185 = *(void *)v178;
      uint64_t v186 = *(void *)(v178 + 8);
      char v187 = *(unsigned char *)(v178 + 16);
      *(void *)uint64_t v178 = v182;
      *(void *)(v178 + 8) = v183;
      *(unsigned char *)(v178 + 16) = v184;
      sub_21F7656A8(v185, v186, v187);
      *(void *)(v178 + 24) = *((void *)v179 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v188 = *((void *)v179 + 4);
      uint64_t v189 = *((void *)v179 + 5);
      char v190 = v179[48];
      sub_21F770E44(v188, v189, v190);
      uint64_t v191 = *(void *)(v178 + 32);
      uint64_t v192 = *(void *)(v178 + 40);
      *(void *)(v178 + 32) = v188;
      *(void *)(v178 + 40) = v189;
      char v193 = *(unsigned char *)(v178 + 48);
      *(unsigned char *)(v178 + 48) = v190;
      sub_21F770E38(v191, v192, v193);
LABEL_86:
      *(_OWORD *)(v178 + 56) = *(_OWORD *)(v179 + 56);
      goto LABEL_89;
    }
    sub_21F7D2664(v178);
    *(_OWORD *)uint64_t v178 = *(_OWORD *)v179;
    long long v201 = *((_OWORD *)v179 + 2);
    long long v200 = *((_OWORD *)v179 + 3);
    long long v202 = *((_OWORD *)v179 + 1);
    *(void *)(v178 + 64) = *((void *)v179 + 8);
    *(_OWORD *)(v178 + 32) = v201;
    *(_OWORD *)(v178 + 48) = v200;
    *(_OWORD *)(v178 + 16) = v202;
  }
  else
  {
    if (v181)
    {
      uint64_t v194 = *(void *)v179;
      uint64_t v195 = *((void *)v179 + 1);
      char v196 = v179[16];
      sub_21F7652C0(*(void *)v179, v195, v196);
      *(void *)uint64_t v178 = v194;
      *(void *)(v178 + 8) = v195;
      *(unsigned char *)(v178 + 16) = v196;
      *(void *)(v178 + 24) = *((void *)v179 + 3);
      uint64_t v197 = *((void *)v179 + 4);
      uint64_t v198 = *((void *)v179 + 5);
      char v199 = v179[48];
      swift_bridgeObjectRetain();
      sub_21F770E44(v197, v198, v199);
      *(void *)(v178 + 32) = v197;
      *(void *)(v178 + 40) = v198;
      *(unsigned char *)(v178 + 48) = v199;
      goto LABEL_86;
    }
    *(_OWORD *)uint64_t v178 = *(_OWORD *)v179;
    long long v203 = *((_OWORD *)v179 + 1);
    long long v204 = *((_OWORD *)v179 + 2);
    long long v205 = *((_OWORD *)v179 + 3);
    *(void *)(v178 + 64) = *((void *)v179 + 8);
    *(_OWORD *)(v178 + 32) = v204;
    *(_OWORD *)(v178 + 48) = v205;
    *(_OWORD *)(v178 + 16) = v203;
  }
LABEL_89:
  uint64_t v206 = v8[19];
  uint64_t v207 = v6 + v206;
  uint64_t v208 = &v7[v206];
  uint64_t v209 = *(void *)(v6 + v206 + 24);
  uint64_t v210 = *(void *)&v7[v206 + 24];
  if (v209)
  {
    if (v210)
    {
      uint64_t v211 = *(void *)v208;
      uint64_t v212 = *((void *)v208 + 1);
      char v213 = v208[16];
      sub_21F7652C0(*(void *)v208, v212, v213);
      uint64_t v214 = *(void *)v207;
      uint64_t v215 = *(void *)(v207 + 8);
      char v216 = *(unsigned char *)(v207 + 16);
      *(void *)uint64_t v207 = v211;
      *(void *)(v207 + 8) = v212;
      *(unsigned char *)(v207 + 16) = v213;
      sub_21F7656A8(v214, v215, v216);
      *(void *)(v207 + 24) = *((void *)v208 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v217 = *((void *)v208 + 4);
      uint64_t v218 = *((void *)v208 + 5);
      char v219 = v208[48];
      sub_21F770E44(v217, v218, v219);
      uint64_t v220 = *(void *)(v207 + 32);
      uint64_t v221 = *(void *)(v207 + 40);
      *(void *)(v207 + 32) = v217;
      *(void *)(v207 + 40) = v218;
      char v222 = *(unsigned char *)(v207 + 48);
      *(unsigned char *)(v207 + 48) = v219;
      sub_21F770E38(v220, v221, v222);
LABEL_94:
      *(_OWORD *)(v207 + 56) = *(_OWORD *)(v208 + 56);
      goto LABEL_97;
    }
    sub_21F7D2664(v207);
    *(_OWORD *)uint64_t v207 = *(_OWORD *)v208;
    long long v230 = *((_OWORD *)v208 + 2);
    long long v229 = *((_OWORD *)v208 + 3);
    long long v231 = *((_OWORD *)v208 + 1);
    *(void *)(v207 + 64) = *((void *)v208 + 8);
    *(_OWORD *)(v207 + 32) = v230;
    *(_OWORD *)(v207 + 48) = v229;
    *(_OWORD *)(v207 + 16) = v231;
  }
  else
  {
    if (v210)
    {
      uint64_t v223 = *(void *)v208;
      uint64_t v224 = *((void *)v208 + 1);
      char v225 = v208[16];
      sub_21F7652C0(*(void *)v208, v224, v225);
      *(void *)uint64_t v207 = v223;
      *(void *)(v207 + 8) = v224;
      *(unsigned char *)(v207 + 16) = v225;
      *(void *)(v207 + 24) = *((void *)v208 + 3);
      uint64_t v226 = *((void *)v208 + 4);
      uint64_t v227 = *((void *)v208 + 5);
      char v228 = v208[48];
      swift_bridgeObjectRetain();
      sub_21F770E44(v226, v227, v228);
      *(void *)(v207 + 32) = v226;
      *(void *)(v207 + 40) = v227;
      *(unsigned char *)(v207 + 48) = v228;
      goto LABEL_94;
    }
    *(_OWORD *)uint64_t v207 = *(_OWORD *)v208;
    long long v232 = *((_OWORD *)v208 + 1);
    long long v233 = *((_OWORD *)v208 + 2);
    long long v234 = *((_OWORD *)v208 + 3);
    *(void *)(v207 + 64) = *((void *)v208 + 8);
    *(_OWORD *)(v207 + 32) = v233;
    *(_OWORD *)(v207 + 48) = v234;
    *(_OWORD *)(v207 + 16) = v232;
  }
LABEL_97:
  uint64_t v235 = v8[20];
  uint64_t v236 = v6 + v235;
  uint64_t v237 = &v7[v235];
  uint64_t v238 = *(void *)(v6 + v235 + 24);
  uint64_t v239 = *(void *)&v7[v235 + 24];
  if (v238)
  {
    if (v239)
    {
      uint64_t v240 = *(void *)v237;
      uint64_t v241 = *((void *)v237 + 1);
      char v242 = v237[16];
      sub_21F7652C0(*(void *)v237, v241, v242);
      uint64_t v243 = *(void *)v236;
      uint64_t v244 = *(void *)(v236 + 8);
      char v245 = *(unsigned char *)(v236 + 16);
      *(void *)uint64_t v236 = v240;
      *(void *)(v236 + 8) = v241;
      *(unsigned char *)(v236 + 16) = v242;
      sub_21F7656A8(v243, v244, v245);
      *(void *)(v236 + 24) = *((void *)v237 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v246 = *((void *)v237 + 4);
      uint64_t v247 = *((void *)v237 + 5);
      char v248 = v237[48];
      sub_21F770E44(v246, v247, v248);
      uint64_t v249 = *(void *)(v236 + 32);
      uint64_t v250 = *(void *)(v236 + 40);
      *(void *)(v236 + 32) = v246;
      *(void *)(v236 + 40) = v247;
      char v251 = *(unsigned char *)(v236 + 48);
      *(unsigned char *)(v236 + 48) = v248;
      sub_21F770E38(v249, v250, v251);
LABEL_102:
      *(_OWORD *)(v236 + 56) = *(_OWORD *)(v237 + 56);
      goto LABEL_105;
    }
    sub_21F7D2664(v236);
    *(_OWORD *)uint64_t v236 = *(_OWORD *)v237;
    long long v259 = *((_OWORD *)v237 + 2);
    long long v258 = *((_OWORD *)v237 + 3);
    long long v260 = *((_OWORD *)v237 + 1);
    *(void *)(v236 + 64) = *((void *)v237 + 8);
    *(_OWORD *)(v236 + 32) = v259;
    *(_OWORD *)(v236 + 48) = v258;
    *(_OWORD *)(v236 + 16) = v260;
  }
  else
  {
    if (v239)
    {
      uint64_t v252 = *(void *)v237;
      uint64_t v253 = *((void *)v237 + 1);
      char v254 = v237[16];
      sub_21F7652C0(*(void *)v237, v253, v254);
      *(void *)uint64_t v236 = v252;
      *(void *)(v236 + 8) = v253;
      *(unsigned char *)(v236 + 16) = v254;
      *(void *)(v236 + 24) = *((void *)v237 + 3);
      uint64_t v255 = *((void *)v237 + 4);
      uint64_t v256 = *((void *)v237 + 5);
      char v257 = v237[48];
      swift_bridgeObjectRetain();
      sub_21F770E44(v255, v256, v257);
      *(void *)(v236 + 32) = v255;
      *(void *)(v236 + 40) = v256;
      *(unsigned char *)(v236 + 48) = v257;
      goto LABEL_102;
    }
    *(_OWORD *)uint64_t v236 = *(_OWORD *)v237;
    long long v261 = *((_OWORD *)v237 + 1);
    long long v262 = *((_OWORD *)v237 + 2);
    long long v263 = *((_OWORD *)v237 + 3);
    *(void *)(v236 + 64) = *((void *)v237 + 8);
    *(_OWORD *)(v236 + 32) = v262;
    *(_OWORD *)(v236 + 48) = v263;
    *(_OWORD *)(v236 + 16) = v261;
  }
LABEL_105:
  uint64_t v264 = v8[21];
  uint64_t v265 = v6 + v264;
  uint64_t v266 = &v7[v264];
  uint64_t v267 = *(void *)(v6 + v264 + 24);
  uint64_t v268 = *(void *)&v7[v264 + 24];
  if (v267)
  {
    if (!v268)
    {
      sub_21F7D2664(v265);
      *(_OWORD *)uint64_t v265 = *(_OWORD *)v266;
      long long v288 = *((_OWORD *)v266 + 2);
      long long v287 = *((_OWORD *)v266 + 3);
      long long v289 = *((_OWORD *)v266 + 1);
      *(void *)(v265 + 64) = *((void *)v266 + 8);
      *(_OWORD *)(v265 + 32) = v288;
      *(_OWORD *)(v265 + 48) = v287;
      *(_OWORD *)(v265 + 16) = v289;
      goto LABEL_113;
    }
    uint64_t v269 = *(void *)v266;
    uint64_t v270 = *((void *)v266 + 1);
    char v271 = v266[16];
    sub_21F7652C0(*(void *)v266, v270, v271);
    uint64_t v272 = *(void *)v265;
    uint64_t v273 = *(void *)(v265 + 8);
    char v274 = *(unsigned char *)(v265 + 16);
    *(void *)uint64_t v265 = v269;
    *(void *)(v265 + 8) = v270;
    *(unsigned char *)(v265 + 16) = v271;
    sub_21F7656A8(v272, v273, v274);
    *(void *)(v265 + 24) = *((void *)v266 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v275 = *((void *)v266 + 4);
    uint64_t v276 = *((void *)v266 + 5);
    char v277 = v266[48];
    sub_21F770E44(v275, v276, v277);
    uint64_t v278 = *(void *)(v265 + 32);
    uint64_t v279 = *(void *)(v265 + 40);
    *(void *)(v265 + 32) = v275;
    *(void *)(v265 + 40) = v276;
    char v280 = *(unsigned char *)(v265 + 48);
    *(unsigned char *)(v265 + 48) = v277;
    sub_21F770E38(v278, v279, v280);
  }
  else
  {
    if (!v268)
    {
      *(_OWORD *)uint64_t v265 = *(_OWORD *)v266;
      long long v290 = *((_OWORD *)v266 + 1);
      long long v291 = *((_OWORD *)v266 + 2);
      long long v292 = *((_OWORD *)v266 + 3);
      *(void *)(v265 + 64) = *((void *)v266 + 8);
      *(_OWORD *)(v265 + 32) = v291;
      *(_OWORD *)(v265 + 48) = v292;
      *(_OWORD *)(v265 + 16) = v290;
      goto LABEL_113;
    }
    uint64_t v281 = *(void *)v266;
    uint64_t v282 = *((void *)v266 + 1);
    char v283 = v266[16];
    sub_21F7652C0(*(void *)v266, v282, v283);
    *(void *)uint64_t v265 = v281;
    *(void *)(v265 + 8) = v282;
    *(unsigned char *)(v265 + 16) = v283;
    *(void *)(v265 + 24) = *((void *)v266 + 3);
    uint64_t v284 = *((void *)v266 + 4);
    uint64_t v285 = *((void *)v266 + 5);
    char v286 = v266[48];
    swift_bridgeObjectRetain();
    sub_21F770E44(v284, v285, v286);
    *(void *)(v265 + 32) = v284;
    *(void *)(v265 + 40) = v285;
    *(unsigned char *)(v265 + 48) = v286;
  }
  *(_OWORD *)(v265 + 56) = *(_OWORD *)(v266 + 56);
LABEL_113:
  uint64_t v293 = v8[22];
  uint64_t v294 = (void *)(v6 + v293);
  uint64_t v295 = &v7[v293];
  *uint64_t v294 = *(void *)v295;
  v294[1] = *((void *)v295 + 1);
  v294[2] = *((void *)v295 + 2);
  uint64_t v296 = v8[23];
  long long v297 = (void *)(v6 + v296);
  uint64_t v298 = &v7[v296];
  void *v297 = *(void *)v298;
  v297[1] = *((void *)v298 + 1);
  v297[2] = *((void *)v298 + 2);
  uint64_t v299 = v8[24];
  uint64_t v300 = v6 + v299;
  uint64_t v301 = &v7[v299];
  uint64_t v302 = *(void *)(v6 + v299 + 24);
  uint64_t v303 = *(void *)&v7[v299 + 24];
  if (v302)
  {
    if (v303)
    {
      uint64_t v304 = *(void *)v301;
      uint64_t v305 = *((void *)v301 + 1);
      char v306 = v301[16];
      sub_21F7652C0(*(void *)v301, v305, v306);
      uint64_t v307 = *(void *)v300;
      uint64_t v308 = *(void *)(v300 + 8);
      char v309 = *(unsigned char *)(v300 + 16);
      *(void *)uint64_t v300 = v304;
      *(void *)(v300 + 8) = v305;
      *(unsigned char *)(v300 + 16) = v306;
      sub_21F7656A8(v307, v308, v309);
      *(void *)(v300 + 24) = *((void *)v301 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21F7D26B8(v300);
      long long v313 = *((_OWORD *)v301 + 1);
      *(_OWORD *)uint64_t v300 = *(_OWORD *)v301;
      *(_OWORD *)(v300 + 16) = v313;
    }
  }
  else if (v303)
  {
    uint64_t v310 = *(void *)v301;
    uint64_t v311 = *((void *)v301 + 1);
    char v312 = v301[16];
    sub_21F7652C0(*(void *)v301, v311, v312);
    *(void *)uint64_t v300 = v310;
    *(void *)(v300 + 8) = v311;
    *(unsigned char *)(v300 + 16) = v312;
    *(void *)(v300 + 24) = *((void *)v301 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v314 = *((_OWORD *)v301 + 1);
    *(_OWORD *)uint64_t v300 = *(_OWORD *)v301;
    *(_OWORD *)(v300 + 16) = v314;
  }
  uint64_t v315 = v8[25];
  uint64_t v316 = v6 + v315;
  char v317 = &v7[v315];
  uint64_t v318 = *(void *)(v6 + v315 + 24);
  uint64_t v319 = *(void *)&v7[v315 + 24];
  if (v318)
  {
    if (v319)
    {
      uint64_t v320 = *(void *)v317;
      uint64_t v321 = *((void *)v317 + 1);
      char v322 = v317[16];
      sub_21F7652C0(*(void *)v317, v321, v322);
      uint64_t v323 = *(void *)v316;
      uint64_t v324 = *(void *)(v316 + 8);
      char v325 = *(unsigned char *)(v316 + 16);
      *(void *)uint64_t v316 = v320;
      *(void *)(v316 + 8) = v321;
      *(unsigned char *)(v316 + 16) = v322;
      sub_21F7656A8(v323, v324, v325);
      *(void *)(v316 + 24) = *((void *)v317 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21F7D26B8(v316);
      long long v329 = *((_OWORD *)v317 + 1);
      *(_OWORD *)uint64_t v316 = *(_OWORD *)v317;
      *(_OWORD *)(v316 + 16) = v329;
    }
  }
  else if (v319)
  {
    uint64_t v326 = *(void *)v317;
    uint64_t v327 = *((void *)v317 + 1);
    char v328 = v317[16];
    sub_21F7652C0(*(void *)v317, v327, v328);
    *(void *)uint64_t v316 = v326;
    *(void *)(v316 + 8) = v327;
    *(unsigned char *)(v316 + 16) = v328;
    *(void *)(v316 + 24) = *((void *)v317 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v330 = *((_OWORD *)v317 + 1);
    *(_OWORD *)uint64_t v316 = *(_OWORD *)v317;
    *(_OWORD *)(v316 + 16) = v330;
  }
  long long v4 = v345;
  uint64_t v331 = v8[26];
  uint64_t v332 = (void *)(v6 + v331);
  uint64_t v333 = &v7[v331];
  *uint64_t v332 = *(void *)v333;
  v332[1] = *((void *)v333 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v6 + v8[27]) = v7[v8[27]];
  uint64_t v334 = v8[28];
  uint64_t v335 = v6 + v334;
  uint64_t v336 = &v7[v334];
  uint64_t v337 = *((void *)v336 + 3);
  if (*(void *)(v335 + 24))
  {
    if (v337)
    {
      sub_21F7D270C((uint64_t *)v335, (uint64_t *)v336);
    }
    else
    {
      sub_21F7D2934(v335);
      long long v338 = *((_OWORD *)v336 + 1);
      *(_OWORD *)uint64_t v335 = *(_OWORD *)v336;
      *(_OWORD *)(v335 + 16) = v338;
    }
  }
  else if (v337)
  {
    *(void *)(v335 + 24) = v337;
    (**(void (***)(uint64_t, char *))(v337 - 8))(v335, v336);
  }
  else
  {
    long long v339 = *((_OWORD *)v336 + 1);
    *(_OWORD *)uint64_t v335 = *(_OWORD *)v336;
    *(_OWORD *)(v335 + 16) = v339;
  }
LABEL_47:
  uint64_t v127 = v4[9];
  uint64_t v128 = a1 + v127;
  uint64_t v129 = (char *)v2 + v127;
  long long v130 = *(_OWORD *)v129;
  long long v131 = *((_OWORD *)v129 + 1);
  *(unsigned char *)(v128 + 32) = v129[32];
  *(_OWORD *)uint64_t v128 = v130;
  *(_OWORD *)(v128 + 16) = v131;
  uint64_t v132 = v4[10];
  uint64_t v133 = a1 + v132;
  uint64_t v134 = (char *)v2 + v132;
  uint64_t v135 = sub_21FA24C90();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v135 - 8) + 24))(v133, v134, v135);
  return a1;
}

uint64_t sub_21F868C70(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_21F868CD0(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v5 = (int *)type metadata accessor for RectanglesRenderer(0);
  uint64_t v6 = v5[8];
  uint64_t v7 = (_OWORD *)(a1 + v6);
  uint64_t v8 = (_OWORD *)(a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v10 = *((void *)v9 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_21F76CA40(qword_267EE7A88);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v82 = v10;
    long long v12 = v8[1];
    *uint64_t v7 = *v8;
    v7[1] = v12;
    *(_OWORD *)((char *)v7 + 25) = *(_OWORD *)((char *)v8 + 25);
    *((unsigned char *)v7 + 41) = *((unsigned char *)v8 + 41);
    long long v13 = v8[4];
    v7[3] = v8[3];
    v7[4] = v13;
    *((void *)v7 + 10) = *((void *)v8 + 10);
    long long v14 = *(_OWORD *)((char *)v8 + 88);
    long long v15 = *(_OWORD *)((char *)v8 + 104);
    *(_OWORD *)((char *)v7 + 113) = *(_OWORD *)((char *)v8 + 113);
    *(_OWORD *)((char *)v7 + 104) = v15;
    *(_OWORD *)((char *)v7 + 88) = v14;
    *(_OWORD *)((char *)v7 + 136) = *(_OWORD *)((char *)v8 + 136);
    *((unsigned char *)v7 + 152) = *((unsigned char *)v8 + 152);
    *((void *)v7 + 20) = *((void *)v8 + 20);
    *((unsigned char *)v7 + 168) = *((unsigned char *)v8 + 168);
    long long v16 = v8[12];
    v7[11] = v8[11];
    v7[12] = v16;
    *((unsigned char *)v7 + 208) = *((unsigned char *)v8 + 208);
    uint64_t v17 = v9[11];
    long long v18 = (char *)v7 + v17;
    long long v19 = (char *)v8 + v17;
    uint64_t v20 = sub_21FA24C90();
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      uint64_t v22 = sub_21F76CA40(&qword_26AD47C20);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    uint64_t v23 = v9[12];
    uint64_t v24 = (char *)v7 + v23;
    long long v25 = (char *)v8 + v23;
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    *(void *)((char *)v7 + v9[13]) = *(void *)((char *)v8 + v9[13]);
    uint64_t v26 = v9[14];
    long long v27 = (char *)v7 + v26;
    long long v28 = (char *)v8 + v26;
    uint64_t v29 = sub_21FA25910();
    uint64_t v30 = *(void *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      uint64_t v31 = sub_21F76CA40(&qword_26AD4A3B8);
      memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    uint64_t v32 = v9[15];
    uint64_t v33 = (char *)v7 + v32;
    uint64_t v34 = (char *)v8 + v32;
    *(void *)uint64_t v33 = *(void *)v34;
    *((_WORD *)v33 + 4) = *((_WORD *)v34 + 4);
    *(void *)((char *)v7 + v9[16]) = *(void *)((char *)v8 + v9[16]);
    *(void *)((char *)v7 + v9[17]) = *(void *)((char *)v8 + v9[17]);
    uint64_t v35 = v9[18];
    uint64_t v36 = (char *)v7 + v35;
    uint64_t v37 = (char *)v8 + v35;
    long long v38 = *((_OWORD *)v37 + 3);
    *((_OWORD *)v36 + 2) = *((_OWORD *)v37 + 2);
    *((_OWORD *)v36 + 3) = v38;
    *((void *)v36 + 8) = *((void *)v37 + 8);
    long long v39 = *((_OWORD *)v37 + 1);
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
    *((_OWORD *)v36 + 1) = v39;
    uint64_t v40 = v9[19];
    int v41 = (char *)v7 + v40;
    uint64_t v42 = (char *)v8 + v40;
    *((void *)v41 + 8) = *((void *)v42 + 8);
    long long v43 = *((_OWORD *)v42 + 3);
    *((_OWORD *)v41 + 2) = *((_OWORD *)v42 + 2);
    *((_OWORD *)v41 + 3) = v43;
    long long v44 = *((_OWORD *)v42 + 1);
    *(_OWORD *)int v41 = *(_OWORD *)v42;
    *((_OWORD *)v41 + 1) = v44;
    uint64_t v45 = v9[20];
    uint64_t v46 = (char *)v7 + v45;
    uint64_t v47 = (char *)v8 + v45;
    long long v48 = *((_OWORD *)v47 + 3);
    *((_OWORD *)v46 + 2) = *((_OWORD *)v47 + 2);
    *((_OWORD *)v46 + 3) = v48;
    *((void *)v46 + 8) = *((void *)v47 + 8);
    long long v49 = *((_OWORD *)v47 + 1);
    *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
    *((_OWORD *)v46 + 1) = v49;
    uint64_t v50 = v9[21];
    uint64_t v51 = (char *)v7 + v50;
    uint64_t v52 = (char *)v8 + v50;
    *((void *)v51 + 8) = *((void *)v52 + 8);
    long long v53 = *((_OWORD *)v52 + 3);
    *((_OWORD *)v51 + 2) = *((_OWORD *)v52 + 2);
    *((_OWORD *)v51 + 3) = v53;
    long long v54 = *((_OWORD *)v52 + 1);
    *(_OWORD *)uint64_t v51 = *(_OWORD *)v52;
    *((_OWORD *)v51 + 1) = v54;
    uint64_t v55 = v9[22];
    uint64_t v56 = (char *)v7 + v55;
    char v57 = (char *)v8 + v55;
    *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
    *((void *)v56 + 2) = *((void *)v57 + 2);
    uint64_t v58 = v9[23];
    long long v59 = (char *)v7 + v58;
    long long v60 = (char *)v8 + v58;
    *(_OWORD *)long long v59 = *(_OWORD *)v60;
    *((void *)v59 + 2) = *((void *)v60 + 2);
    uint64_t v61 = v9[24];
    uint64_t v62 = (_OWORD *)((char *)v7 + v61);
    long long v63 = (_OWORD *)((char *)v8 + v61);
    long long v64 = v63[1];
    *uint64_t v62 = *v63;
    v62[1] = v64;
    uint64_t v65 = v9[25];
    char v66 = (_OWORD *)((char *)v7 + v65);
    uint64_t v67 = (_OWORD *)((char *)v8 + v65);
    long long v68 = v67[1];
    *char v66 = *v67;
    v66[1] = v68;
    *(_OWORD *)((char *)v7 + v9[26]) = *(_OWORD *)((char *)v8 + v9[26]);
    *((unsigned char *)v7 + v9[27]) = *((unsigned char *)v8 + v9[27]);
    uint64_t v69 = v9[28];
    long long v70 = (_OWORD *)((char *)v7 + v69);
    long long v71 = (_OWORD *)((char *)v8 + v69);
    long long v72 = v71[1];
    *long long v70 = *v71;
    v70[1] = v72;
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v82 + 56))(v7, 0, 1, v9);
  }
  uint64_t v73 = v5[9];
  uint64_t v74 = a1 + v73;
  uint64_t v75 = a2 + v73;
  long long v76 = *(_OWORD *)(v75 + 16);
  *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
  *(_OWORD *)(v74 + 16) = v76;
  *(unsigned char *)(v74 + 32) = *(unsigned char *)(v75 + 32);
  uint64_t v77 = v5[10];
  uint64_t v78 = a1 + v77;
  uint64_t v79 = a2 + v77;
  uint64_t v80 = sub_21FA24C90();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 32))(v78, v79, v80);
  return a1;
}

uint64_t sub_21F869208(uint64_t a1, uint64_t a2)
{
  _s6Charts15AnyChartContentVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v5 = (int *)type metadata accessor for RectanglesRenderer(0);
  uint64_t v6 = v5[8];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v10 = *((void *)v9 - 1);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      char v199 = v5;
      long long v14 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
      *(_OWORD *)(v7 + 16) = v14;
      *(_OWORD *)(v7 + 25) = *(_OWORD *)(v8 + 25);
      *(unsigned char *)(v7 + 41) = *(unsigned char *)(v8 + 41);
      long long v15 = *(_OWORD *)(v8 + 64);
      *(_OWORD *)(v7 + 48) = *(_OWORD *)(v8 + 48);
      *(_OWORD *)(v7 + 64) = v15;
      *(void *)(v7 + 80) = *(void *)(v8 + 80);
      long long v16 = *(_OWORD *)(v8 + 88);
      long long v17 = *(_OWORD *)(v8 + 104);
      *(_OWORD *)(v7 + 113) = *(_OWORD *)(v8 + 113);
      *(_OWORD *)(v7 + 104) = v17;
      *(_OWORD *)(v7 + 88) = v16;
      *(_OWORD *)(v7 + 136) = *(_OWORD *)(v8 + 136);
      *(unsigned char *)(v7 + 152) = *(unsigned char *)(v8 + 152);
      *(void *)(v7 + 160) = *(void *)(v8 + 160);
      *(unsigned char *)(v7 + 168) = *(unsigned char *)(v8 + 168);
      long long v18 = *(_OWORD *)(v8 + 192);
      *(_OWORD *)(v7 + 176) = *(_OWORD *)(v8 + 176);
      *(_OWORD *)(v7 + 192) = v18;
      *(unsigned char *)(v7 + 208) = *(unsigned char *)(v8 + 208);
      uint64_t v19 = v9[11];
      uint64_t v20 = (void *)(v7 + v19);
      uint64_t v21 = (const void *)(v8 + v19);
      uint64_t v22 = sub_21FA24C90();
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        uint64_t v24 = sub_21F76CA40(&qword_26AD47C20);
        memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v23 + 32))(v20, v21, v22);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      uint64_t v39 = v9[12];
      uint64_t v40 = v7 + v39;
      uint64_t v41 = v8 + v39;
      *(void *)uint64_t v40 = *(void *)v41;
      *(unsigned char *)(v40 + 8) = *(unsigned char *)(v41 + 8);
      *(void *)(v7 + v9[13]) = *(void *)(v8 + v9[13]);
      uint64_t v42 = v9[14];
      long long v43 = (void *)(v7 + v42);
      long long v44 = (const void *)(v8 + v42);
      uint64_t v45 = sub_21FA25910();
      uint64_t v46 = *(void *)(v45 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
      {
        uint64_t v47 = sub_21F76CA40(&qword_26AD4A3B8);
        memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v46 + 32))(v43, v44, v45);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
      }
      uint64_t v5 = v199;
      uint64_t v48 = v9[15];
      uint64_t v49 = v7 + v48;
      uint64_t v50 = v8 + v48;
      *(void *)uint64_t v49 = *(void *)v50;
      *(_WORD *)(v49 + 8) = *(_WORD *)(v50 + 8);
      *(void *)(v7 + v9[16]) = *(void *)(v8 + v9[16]);
      *(void *)(v7 + v9[17]) = *(void *)(v8 + v9[17]);
      uint64_t v51 = v9[18];
      uint64_t v52 = v7 + v51;
      uint64_t v53 = v8 + v51;
      long long v54 = *(_OWORD *)(v53 + 48);
      *(_OWORD *)(v52 + 32) = *(_OWORD *)(v53 + 32);
      *(_OWORD *)(v52 + 48) = v54;
      *(void *)(v52 + 64) = *(void *)(v53 + 64);
      long long v55 = *(_OWORD *)(v53 + 16);
      *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
      *(_OWORD *)(v52 + 16) = v55;
      uint64_t v56 = v9[19];
      uint64_t v57 = v7 + v56;
      uint64_t v58 = v8 + v56;
      *(void *)(v57 + 64) = *(void *)(v58 + 64);
      long long v59 = *(_OWORD *)(v58 + 48);
      *(_OWORD *)(v57 + 32) = *(_OWORD *)(v58 + 32);
      *(_OWORD *)(v57 + 48) = v59;
      long long v60 = *(_OWORD *)(v58 + 16);
      *(_OWORD *)uint64_t v57 = *(_OWORD *)v58;
      *(_OWORD *)(v57 + 16) = v60;
      uint64_t v61 = v9[20];
      uint64_t v62 = v7 + v61;
      uint64_t v63 = v8 + v61;
      long long v64 = *(_OWORD *)(v63 + 48);
      *(_OWORD *)(v62 + 32) = *(_OWORD *)(v63 + 32);
      *(_OWORD *)(v62 + 48) = v64;
      *(void *)(v62 + 64) = *(void *)(v63 + 64);
      long long v65 = *(_OWORD *)(v63 + 16);
      *(_OWORD *)uint64_t v62 = *(_OWORD *)v63;
      *(_OWORD *)(v62 + 16) = v65;
      uint64_t v66 = v9[21];
      uint64_t v67 = v7 + v66;
      uint64_t v68 = v8 + v66;
      *(void *)(v67 + 64) = *(void *)(v68 + 64);
      long long v69 = *(_OWORD *)(v68 + 48);
      *(_OWORD *)(v67 + 32) = *(_OWORD *)(v68 + 32);
      *(_OWORD *)(v67 + 48) = v69;
      long long v70 = *(_OWORD *)(v68 + 16);
      *(_OWORD *)uint64_t v67 = *(_OWORD *)v68;
      *(_OWORD *)(v67 + 16) = v70;
      uint64_t v71 = v9[22];
      uint64_t v72 = v7 + v71;
      uint64_t v73 = v8 + v71;
      *(_OWORD *)uint64_t v72 = *(_OWORD *)v73;
      *(void *)(v72 + 16) = *(void *)(v73 + 16);
      uint64_t v74 = v9[23];
      uint64_t v75 = v7 + v74;
      uint64_t v76 = v8 + v74;
      *(_OWORD *)uint64_t v75 = *(_OWORD *)v76;
      *(void *)(v75 + 16) = *(void *)(v76 + 16);
      uint64_t v77 = v9[24];
      uint64_t v78 = (_OWORD *)(v7 + v77);
      uint64_t v79 = (_OWORD *)(v8 + v77);
      long long v80 = v79[1];
      _OWORD *v78 = *v79;
      v78[1] = v80;
      uint64_t v81 = v9[25];
      uint64_t v82 = (_OWORD *)(v7 + v81);
      long long v83 = (_OWORD *)(v8 + v81);
      long long v84 = v83[1];
      _OWORD *v82 = *v83;
      v82[1] = v84;
      *(_OWORD *)(v7 + v9[26]) = *(_OWORD *)(v8 + v9[26]);
      *(unsigned char *)(v7 + v9[27]) = *(unsigned char *)(v8 + v9[27]);
      uint64_t v85 = v9[28];
      uint64_t v86 = (_OWORD *)(v7 + v85);
      uint64_t v87 = (_OWORD *)(v8 + v85);
      long long v88 = v87[1];
      *uint64_t v86 = *v87;
      v86[1] = v88;
      (*(void (**)(uint64_t, void, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_76;
    }
LABEL_7:
    uint64_t v25 = sub_21F76CA40(qword_267EE7A88);
    memcpy((void *)v7, (const void *)v8, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_76;
  }
  if (v13)
  {
    sub_21F868C70(v7, type metadata accessor for ChartContentRenderContext.Environment);
    goto LABEL_7;
  }
  if (*(unsigned __int8 *)(v7 + 40) == 255) {
    goto LABEL_14;
  }
  if (*(unsigned __int8 *)(v8 + 40) == 255 || a1 != a2)
  {
    sub_21F7D25BC(v7);
LABEL_14:
    long long v27 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v27;
    *(_OWORD *)(v7 + 25) = *(_OWORD *)(v8 + 25);
  }
  *(unsigned char *)(v7 + 41) = *(unsigned char *)(v8 + 41);
  uint64_t v28 = *(void *)(v8 + 56);
  *(void *)(v7 + 48) = *(void *)(v8 + 48);
  *(void *)(v7 + 56) = v28;
  *(void *)(v7 + 64) = *(void *)(v8 + 64);
  *(void *)(v7 + 72) = *(void *)(v8 + 72);
  swift_bridgeObjectRelease();
  *(void *)(v7 + 80) = *(void *)(v8 + 80);
  if (*(unsigned __int8 *)(v7 + 128) == 255)
  {
LABEL_19:
    long long v29 = *(_OWORD *)(v8 + 104);
    *(_OWORD *)(v7 + 88) = *(_OWORD *)(v8 + 88);
    *(_OWORD *)(v7 + 104) = v29;
    *(_OWORD *)(v7 + 113) = *(_OWORD *)(v8 + 113);
    goto LABEL_20;
  }
  if (*(unsigned __int8 *)(v8 + 128) == 255 || a1 != a2)
  {
    sub_21F7D2610(v7 + 88);
    goto LABEL_19;
  }
LABEL_20:
  long long v200 = v5;
  *(_OWORD *)(v7 + 136) = *(_OWORD *)(v8 + 136);
  *(unsigned char *)(v7 + 152) = *(unsigned char *)(v8 + 152);
  *(void *)(v7 + 160) = *(void *)(v8 + 160);
  *(unsigned char *)(v7 + 168) = *(unsigned char *)(v8 + 168);
  long long v30 = *(_OWORD *)(v8 + 192);
  *(_OWORD *)(v7 + 176) = *(_OWORD *)(v8 + 176);
  *(_OWORD *)(v7 + 192) = v30;
  *(unsigned char *)(v7 + 208) = *(unsigned char *)(v8 + 208);
  uint64_t v31 = v9[11];
  uint64_t v32 = (void *)(v7 + v31);
  uint64_t v33 = (void *)(v8 + v31);
  uint64_t v34 = sub_21FA24C90();
  uint64_t v195 = *(void *)(v34 - 8);
  uint64_t v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v195 + 48);
  uint64_t v197 = v32;
  LODWORD(v32) = v35(v32, 1, v34);
  int v36 = v35(v33, 1, v34);
  if (v32)
  {
    if (v36)
    {
      size_t v37 = *(void *)(*(void *)(sub_21F76CA40(&qword_26AD47C20) - 8) + 64);
      long long v38 = v197;
LABEL_30:
      memcpy(v38, v33, v37);
      goto LABEL_33;
    }
    (*(void (**)(void *, void *, uint64_t))(v195 + 32))(v197, v33, v34);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v195 + 56))(v197, 0, 1, v34);
  }
  else
  {
    if (v36)
    {
      (*(void (**)(void *, uint64_t))(v195 + 8))(v197, v34);
      size_t v37 = *(void *)(*(void *)(sub_21F76CA40(&qword_26AD47C20) - 8) + 64);
      long long v38 = v197;
      goto LABEL_30;
    }
    (*(void (**)(void *, void *, uint64_t))(v195 + 40))(v197, v33, v34);
  }
LABEL_33:
  uint64_t v89 = v9[12];
  uint64_t v90 = v7 + v89;
  uint64_t v91 = v8 + v89;
  *(void *)uint64_t v90 = *(void *)v91;
  *(unsigned char *)(v90 + 8) = *(unsigned char *)(v91 + 8);
  *(void *)(v7 + v9[13]) = *(void *)(v8 + v9[13]);
  uint64_t v92 = v9[14];
  char v93 = (void *)(v7 + v92);
  long long v94 = (void *)(v8 + v92);
  uint64_t v95 = sub_21FA25910();
  uint64_t v196 = *(void *)(v95 - 8);
  long long v96 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v196 + 48);
  uint64_t v198 = v93;
  LODWORD(v93) = v96(v93, 1, v95);
  int v97 = v96(v94, 1, v95);
  if (v93)
  {
    if (v97)
    {
      size_t v98 = *(void *)(*(void *)(sub_21F76CA40(&qword_26AD4A3B8) - 8) + 64);
      long long v99 = v198;
LABEL_38:
      memcpy(v99, v94, v98);
      goto LABEL_41;
    }
    (*(void (**)(void *, void *, uint64_t))(v196 + 32))(v198, v94, v95);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v196 + 56))(v198, 0, 1, v95);
  }
  else
  {
    if (v97)
    {
      (*(void (**)(void *, uint64_t))(v196 + 8))(v198, v95);
      size_t v98 = *(void *)(*(void *)(sub_21F76CA40(&qword_26AD4A3B8) - 8) + 64);
      long long v99 = v198;
      goto LABEL_38;
    }
    (*(void (**)(void *, void *, uint64_t))(v196 + 40))(v198, v94, v95);
  }
LABEL_41:
  uint64_t v100 = v9[15];
  uint64_t v101 = v7 + v100;
  uint64_t v102 = v8 + v100;
  *(void *)(v7 + v100) = *(void *)(v8 + v100);
  swift_release();
  *(unsigned char *)(v101 + 8) = *(unsigned char *)(v102 + 8);
  *(unsigned char *)(v101 + 9) = *(unsigned char *)(v102 + 9);
  *(void *)(v7 + v9[16]) = *(void *)(v8 + v9[16]);
  *(void *)(v7 + v9[17]) = *(void *)(v8 + v9[17]);
  uint64_t v103 = v9[18];
  uint64_t v104 = v7 + v103;
  uint64_t v105 = v8 + v103;
  uint64_t v5 = v200;
  if (*(void *)(v7 + v103 + 24))
  {
    if (*(void *)(v105 + 24))
    {
      char v106 = *(unsigned char *)(v105 + 16);
      uint64_t v107 = *(void *)v104;
      uint64_t v108 = *(void *)(v104 + 8);
      char v109 = *(unsigned char *)(v104 + 16);
      *(_OWORD *)uint64_t v104 = *(_OWORD *)v105;
      *(unsigned char *)(v104 + 16) = v106;
      sub_21F7656A8(v107, v108, v109);
      *(void *)(v104 + 24) = *(void *)(v105 + 24);
      swift_bridgeObjectRelease();
      char v110 = *(unsigned char *)(v105 + 48);
      uint64_t v111 = *(void *)(v104 + 32);
      uint64_t v112 = *(void *)(v104 + 40);
      *(_OWORD *)(v104 + 32) = *(_OWORD *)(v105 + 32);
      char v113 = *(unsigned char *)(v104 + 48);
      *(unsigned char *)(v104 + 48) = v110;
      sub_21F770E38(v111, v112, v113);
      *(_OWORD *)(v104 + 56) = *(_OWORD *)(v105 + 56);
      goto LABEL_46;
    }
    sub_21F7D2664(v104);
  }
  long long v114 = *(_OWORD *)(v105 + 48);
  *(_OWORD *)(v104 + 32) = *(_OWORD *)(v105 + 32);
  *(_OWORD *)(v104 + 48) = v114;
  *(void *)(v104 + 64) = *(void *)(v105 + 64);
  long long v115 = *(_OWORD *)(v105 + 16);
  *(_OWORD *)uint64_t v104 = *(_OWORD *)v105;
  *(_OWORD *)(v104 + 16) = v115;
LABEL_46:
  uint64_t v116 = v9[19];
  uint64_t v117 = v7 + v116;
  uint64_t v118 = v8 + v116;
  if (*(void *)(v7 + v116 + 24))
  {
    if (*(void *)(v118 + 24))
    {
      char v119 = *(unsigned char *)(v118 + 16);
      uint64_t v120 = *(void *)v117;
      uint64_t v121 = *(void *)(v117 + 8);
      char v122 = *(unsigned char *)(v117 + 16);
      *(_OWORD *)uint64_t v117 = *(_OWORD *)v118;
      *(unsigned char *)(v117 + 16) = v119;
      sub_21F7656A8(v120, v121, v122);
      *(void *)(v117 + 24) = *(void *)(v118 + 24);
      swift_bridgeObjectRelease();
      char v123 = *(unsigned char *)(v118 + 48);
      uint64_t v124 = *(void *)(v117 + 32);
      uint64_t v125 = *(void *)(v117 + 40);
      *(_OWORD *)(v117 + 32) = *(_OWORD *)(v118 + 32);
      char v126 = *(unsigned char *)(v117 + 48);
      *(unsigned char *)(v117 + 48) = v123;
      sub_21F770E38(v124, v125, v126);
      *(_OWORD *)(v117 + 56) = *(_OWORD *)(v118 + 56);
      goto LABEL_51;
    }
    sub_21F7D2664(v117);
  }
  long long v127 = *(_OWORD *)(v118 + 48);
  *(_OWORD *)(v117 + 32) = *(_OWORD *)(v118 + 32);
  *(_OWORD *)(v117 + 48) = v127;
  *(void *)(v117 + 64) = *(void *)(v118 + 64);
  long long v128 = *(_OWORD *)(v118 + 16);
  *(_OWORD *)uint64_t v117 = *(_OWORD *)v118;
  *(_OWORD *)(v117 + 16) = v128;
LABEL_51:
  uint64_t v129 = v9[20];
  uint64_t v130 = v7 + v129;
  uint64_t v131 = v8 + v129;
  if (*(void *)(v7 + v129 + 24))
  {
    if (*(void *)(v131 + 24))
    {
      char v132 = *(unsigned char *)(v131 + 16);
      uint64_t v133 = *(void *)v130;
      uint64_t v134 = *(void *)(v130 + 8);
      char v135 = *(unsigned char *)(v130 + 16);
      *(_OWORD *)uint64_t v130 = *(_OWORD *)v131;
      *(unsigned char *)(v130 + 16) = v132;
      sub_21F7656A8(v133, v134, v135);
      *(void *)(v130 + 24) = *(void *)(v131 + 24);
      swift_bridgeObjectRelease();
      char v136 = *(unsigned char *)(v131 + 48);
      uint64_t v137 = *(void *)(v130 + 32);
      uint64_t v138 = *(void *)(v130 + 40);
      *(_OWORD *)(v130 + 32) = *(_OWORD *)(v131 + 32);
      char v139 = *(unsigned char *)(v130 + 48);
      *(unsigned char *)(v130 + 48) = v136;
      sub_21F770E38(v137, v138, v139);
      *(_OWORD *)(v130 + 56) = *(_OWORD *)(v131 + 56);
      goto LABEL_56;
    }
    sub_21F7D2664(v130);
  }
  long long v140 = *(_OWORD *)(v131 + 48);
  *(_OWORD *)(v130 + 32) = *(_OWORD *)(v131 + 32);
  *(_OWORD *)(v130 + 48) = v140;
  *(void *)(v130 + 64) = *(void *)(v131 + 64);
  long long v141 = *(_OWORD *)(v131 + 16);
  *(_OWORD *)uint64_t v130 = *(_OWORD *)v131;
  *(_OWORD *)(v130 + 16) = v141;
LABEL_56:
  uint64_t v142 = v9[21];
  uint64_t v143 = v7 + v142;
  uint64_t v144 = v8 + v142;
  if (*(void *)(v7 + v142 + 24))
  {
    if (*(void *)(v144 + 24))
    {
      char v145 = *(unsigned char *)(v144 + 16);
      uint64_t v146 = *(void *)v143;
      uint64_t v147 = *(void *)(v143 + 8);
      char v148 = *(unsigned char *)(v143 + 16);
      *(_OWORD *)uint64_t v143 = *(_OWORD *)v144;
      *(unsigned char *)(v143 + 16) = v145;
      sub_21F7656A8(v146, v147, v148);
      *(void *)(v143 + 24) = *(void *)(v144 + 24);
      swift_bridgeObjectRelease();
      char v149 = *(unsigned char *)(v144 + 48);
      uint64_t v150 = *(void *)(v143 + 32);
      uint64_t v151 = *(void *)(v143 + 40);
      *(_OWORD *)(v143 + 32) = *(_OWORD *)(v144 + 32);
      char v152 = *(unsigned char *)(v143 + 48);
      *(unsigned char *)(v143 + 48) = v149;
      sub_21F770E38(v150, v151, v152);
      *(_OWORD *)(v143 + 56) = *(_OWORD *)(v144 + 56);
      goto LABEL_61;
    }
    sub_21F7D2664(v143);
  }
  long long v153 = *(_OWORD *)(v144 + 48);
  *(_OWORD *)(v143 + 32) = *(_OWORD *)(v144 + 32);
  *(_OWORD *)(v143 + 48) = v153;
  *(void *)(v143 + 64) = *(void *)(v144 + 64);
  long long v154 = *(_OWORD *)(v144 + 16);
  *(_OWORD *)uint64_t v143 = *(_OWORD *)v144;
  *(_OWORD *)(v143 + 16) = v154;
LABEL_61:
  uint64_t v155 = v9[22];
  uint64_t v156 = v7 + v155;
  uint64_t v157 = v8 + v155;
  *(_OWORD *)uint64_t v156 = *(_OWORD *)v157;
  *(void *)(v156 + 16) = *(void *)(v157 + 16);
  uint64_t v158 = v9[23];
  uint64_t v159 = v7 + v158;
  uint64_t v160 = v8 + v158;
  *(_OWORD *)uint64_t v159 = *(_OWORD *)v160;
  *(void *)(v159 + 16) = *(void *)(v160 + 16);
  uint64_t v161 = v9[24];
  uint64_t v162 = v7 + v161;
  uint64_t v163 = v8 + v161;
  if (*(void *)(v7 + v161 + 24))
  {
    if (*(void *)(v163 + 24))
    {
      char v164 = *(unsigned char *)(v163 + 16);
      uint64_t v165 = *(void *)v162;
      uint64_t v166 = *(void *)(v162 + 8);
      char v167 = *(unsigned char *)(v162 + 16);
      *(_OWORD *)uint64_t v162 = *(_OWORD *)v163;
      *(unsigned char *)(v162 + 16) = v164;
      sub_21F7656A8(v165, v166, v167);
      *(void *)(v162 + 24) = *(void *)(v163 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_66;
    }
    sub_21F7D26B8(v162);
  }
  long long v168 = *(_OWORD *)(v163 + 16);
  *(_OWORD *)uint64_t v162 = *(_OWORD *)v163;
  *(_OWORD *)(v162 + 16) = v168;
LABEL_66:
  uint64_t v169 = v9[25];
  uint64_t v170 = v7 + v169;
  uint64_t v171 = v8 + v169;
  if (!*(void *)(v7 + v169 + 24))
  {
LABEL_70:
    long long v176 = *(_OWORD *)(v171 + 16);
    *(_OWORD *)uint64_t v170 = *(_OWORD *)v171;
    *(_OWORD *)(v170 + 16) = v176;
    goto LABEL_71;
  }
  if (!*(void *)(v171 + 24))
  {
    sub_21F7D26B8(v170);
    goto LABEL_70;
  }
  char v172 = *(unsigned char *)(v171 + 16);
  uint64_t v173 = *(void *)v170;
  uint64_t v174 = *(void *)(v170 + 8);
  char v175 = *(unsigned char *)(v170 + 16);
  *(_OWORD *)uint64_t v170 = *(_OWORD *)v171;
  *(unsigned char *)(v170 + 16) = v172;
  sub_21F7656A8(v173, v174, v175);
  *(void *)(v170 + 24) = *(void *)(v171 + 24);
  swift_bridgeObjectRelease();
LABEL_71:
  uint64_t v177 = v9[26];
  uint64_t v178 = (void *)(v7 + v177);
  uint64_t v179 = (uint64_t *)(v8 + v177);
  uint64_t v181 = *v179;
  uint64_t v180 = v179[1];
  *uint64_t v178 = v181;
  v178[1] = v180;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v7 + v9[27]) = *(unsigned char *)(v8 + v9[27]);
  uint64_t v182 = v9[28];
  uint64_t v183 = v7 + v182;
  uint64_t v184 = v8 + v182;
  if (*(void *)(v183 + 24))
  {
    if (*(void *)(v184 + 24)) {
      _s6Charts15AnyChartContentVwxx_0(v183);
    }
    else {
      sub_21F7D2934(v183);
    }
  }
  long long v185 = *(_OWORD *)(v184 + 16);
  *(_OWORD *)uint64_t v183 = *(_OWORD *)v184;
  *(_OWORD *)(v183 + 16) = v185;
LABEL_76:
  uint64_t v186 = v5[9];
  uint64_t v187 = a1 + v186;
  uint64_t v188 = a2 + v186;
  long long v189 = *(_OWORD *)(v188 + 16);
  *(_OWORD *)uint64_t v187 = *(_OWORD *)v188;
  *(_OWORD *)(v187 + 16) = v189;
  *(unsigned char *)(v187 + 32) = *(unsigned char *)(v188 + 32);
  uint64_t v190 = v5[10];
  uint64_t v191 = a1 + v190;
  uint64_t v192 = a2 + v190;
  uint64_t v193 = sub_21FA24C90();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v193 - 8) + 40))(v191, v192, v193);
  return a1;
}

uint64_t sub_21F869F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F869F6C);
}

uint64_t sub_21F869F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RectanglesRenderer(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_21F869FD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F869FEC);
}

uint64_t sub_21F869FEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RectanglesRenderer(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for VectorizedRectanglePlotContent()
{
  return sub_21F764F08();
}

uint64_t sub_21F86A074(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void static AxisValueLabelCollisionResolution.automatic.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 1;
}

void static AxisValueLabelOrientation.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

__n128 AxisValueLabel.init<>(centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:)@<Q0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, __n128 *a8@<X7>, uint64_t a9@<X8>, char a10, char *a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  unsigned __int16 v15 = a8[1].n128_u16[0];
  char v16 = *a11;
  unsigned __int8 v18 = a8[1].n128_u8[2];
  *(unsigned char *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(unsigned char *)(a9 + 24) = a4 & 1;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(unsigned char *)(a9 + 48) = a7 & 1;
  __n128 result = *a8;
  *(__n128 *)(a9 + 56) = *a8;
  *(_WORD *)(a9 + 72) = v15;
  *(unsigned char *)(a9 + 74) = v18;
  *(unsigned char *)(a9 + 75) = a10;
  *(unsigned char *)(a9 + 76) = v16;
  *(void *)(a9 + 80) = a12;
  *(unsigned char *)(a9 + 88) = a13 & 1;
  *(void *)(a9 + 96) = a14;
  *(unsigned char *)(a9 + 104) = a15 & 1;
  *(void *)(a9 + 112) = 0;
  *(void *)(a9 + 120) = 0;
  *(unsigned char *)(a9 + 128) = 2;
  return result;
}

uint64_t AxisValueLabel.init(centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:content:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, char *a11, uint64_t a12, char a13, uint64_t a14, char a15, void (*a16)(void))
{
  __int16 v16 = *(_WORD *)(a8 + 16);
  char v17 = *(unsigned char *)(a8 + 18);
  char v18 = *a11;
  *(unsigned char *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(unsigned char *)(a9 + 24) = a4 & 1;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(unsigned char *)(a9 + 48) = a7 & 1;
  *(_OWORD *)(a9 + 56) = *(_OWORD *)a8;
  *(_WORD *)(a9 + 72) = v16;
  *(unsigned char *)(a9 + 74) = v17;
  *(unsigned char *)(a9 + 75) = a10;
  *(unsigned char *)(a9 + 76) = v18;
  *(void *)(a9 + 80) = a12;
  *(unsigned char *)(a9 + 88) = a13 & 1;
  *(void *)(a9 + 96) = a14;
  *(unsigned char *)(a9 + 104) = a15 & 1;
  type metadata accessor for AxisValueLabel();
  a16();
  type metadata accessor for AxisValueLabel.LabelContent();

  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for AxisValueLabel()
{
  return sub_21F764F08();
}

uint64_t type metadata accessor for AxisValueLabel.LabelContent()
{
  return sub_21F764F08();
}

uint64_t AxisValueLabel.init<>(_:centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:)@<X0>(char a1@<W4>, uint64_t a2@<X5>, uint64_t a3@<X6>, char a4@<W7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, char a8, uint64_t *a9, char a10, char *a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  uint64_t v17 = *a9;
  uint64_t v18 = a9[1];
  __int16 v19 = *((_WORD *)a9 + 8);
  char v20 = *((unsigned char *)a9 + 18);
  char v21 = *a11;
  uint64_t result = sub_21FA25340();
  *(unsigned char *)a5 = a1;
  *(void *)(a5 + 8) = a2;
  *(void *)(a5 + 16) = a3;
  *(unsigned char *)(a5 + 24) = a4 & 1;
  *(void *)(a5 + 32) = a6;
  *(void *)(a5 + 40) = a7;
  *(unsigned char *)(a5 + 48) = a8 & 1;
  *(void *)(a5 + 56) = v17;
  *(void *)(a5 + 64) = v18;
  *(_WORD *)(a5 + 72) = v19;
  *(unsigned char *)(a5 + 74) = v20;
  *(unsigned char *)(a5 + 75) = a10;
  *(unsigned char *)(a5 + 76) = v21;
  *(void *)(a5 + 80) = a12;
  *(unsigned char *)(a5 + 88) = a13 & 1;
  *(void *)(a5 + 96) = a14;
  *(unsigned char *)(a5 + 104) = a15 & 1;
  *(void *)(a5 + 112) = result;
  *(void *)(a5 + 120) = v24;
  *(void *)(a5 + 128) = v23 & 1;
  *(void *)(a5 + 136) = v25;
  *(unsigned char *)(a5 + 144) = 1;
  return result;
}

uint64_t AxisValueLabel.init<A>(_:centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, unsigned __int8 a11, uint64_t a12, uint64_t a13, unsigned __int8 a14, uint64_t a15, unsigned __int8 a16, uint64_t a17)
{
  int v45 = a5;
  int v46 = a8;
  uint64_t v52 = a6;
  uint64_t v53 = a7;
  uint64_t v48 = a3;
  uint64_t v49 = a4;
  int v47 = a2;
  uint64_t v54 = a15;
  int v51 = a11;
  int v43 = a14;
  int v44 = a16;
  uint64_t v50 = a13;
  uint64_t v19 = *(void *)(a17 - 8);
  __n128 v20 = MEMORY[0x270FA5388](a1);
  uint64_t v23 = *v22;
  uint64_t v41 = v22[1];
  int v40 = *((unsigned __int16 *)v22 + 8);
  char v24 = *((unsigned char *)v22 + 18);
  int v42 = *v25;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16))((char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a17, v20);
  uint64_t v26 = sub_21FA25350();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31 & 1;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(a1, a17);
  char v34 = v45 & 1;
  char v35 = v46 & 1;
  char v36 = v43 & 1;
  char v55 = v44 & 1;
  *(unsigned char *)a9 = v47;
  *(void *)(a9 + 8) = v48;
  *(void *)(a9 + 16) = v49;
  *(unsigned char *)(a9 + 24) = v34;
  uint64_t v37 = v53;
  *(void *)(a9 + 32) = v52;
  *(void *)(a9 + 40) = v37;
  *(unsigned char *)(a9 + 48) = v35;
  uint64_t v38 = v41;
  *(void *)(a9 + 56) = v23;
  *(void *)(a9 + 64) = v38;
  *(_WORD *)(a9 + 72) = v40;
  *(unsigned char *)(a9 + 74) = v24;
  *(unsigned char *)(a9 + 75) = v51;
  *(unsigned char *)(a9 + 76) = v42;
  *(void *)(a9 + 80) = v50;
  *(unsigned char *)(a9 + 88) = v36;
  *(void *)(a9 + 96) = v54;
  *(unsigned char *)(a9 + 104) = v55;
  *(void *)(a9 + 112) = v26;
  *(void *)(a9 + 120) = v28;
  *(void *)(a9 + 128) = v32;
  *(void *)(a9 + 136) = v30;
  *(unsigned char *)(a9 + 144) = 1;
  return result;
}

uint64_t AxisValueLabel.init<A>(format:centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t *a10, char a11, char *a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v27 = a10[1];
  uint64_t v28 = *a10;
  __int16 v26 = *((_WORD *)a10 + 8);
  char v21 = *((unsigned char *)a10 + 18);
  char v30 = *a12;
  uint64_t v22 = *(void *)(a17 - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  char v24 = (char *)swift_allocObject();
  *((void *)v24 + 2) = a17;
  *((void *)v24 + 3) = a18;
  *((void *)v24 + 4) = a19;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 32))(&v24[v23], a1, a17);
  *(unsigned char *)a9 = a2;
  *(void *)(a9 + 8) = a3;
  *(void *)(a9 + 16) = a4;
  *(unsigned char *)(a9 + 24) = a5 & 1;
  *(void *)(a9 + 32) = a6;
  *(void *)(a9 + 40) = a7;
  *(unsigned char *)(a9 + 48) = a8 & 1;
  *(void *)(a9 + 56) = v28;
  *(void *)(a9 + 64) = v27;
  *(_WORD *)(a9 + 72) = v26;
  *(unsigned char *)(a9 + 74) = v21;
  *(unsigned char *)(a9 + 75) = a11;
  *(unsigned char *)(a9 + 76) = v30;
  *(void *)(a9 + 80) = a13;
  *(unsigned char *)(a9 + 88) = a14 & 1;
  *(void *)(a9 + 96) = a15;
  *(unsigned char *)(a9 + 104) = a16 & 1;
  *(void *)(a9 + 112) = sub_21F86AA78;
  *(void *)(a9 + 120) = v24;
  *(unsigned char *)(a9 + 128) = 0;
  return result;
}

uint64_t sub_21F86A7C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v21[1] = a4;
  void v21[2] = a5;
  v21[3] = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = sub_21FA26340();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  unsigned __int16 v15 = (char *)v21 - v14;
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)v21 - v18;
  sub_21F7607AC(a1, a2, a3);
  sub_21F9FEDD4(a1, a2, a3, AssociatedTypeWitness, a7, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v15, AssociatedTypeWitness);
    sub_21FA23E50();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, AssociatedTypeWitness);
    return v21[4];
  }
}

uint64_t sub_21F86A9F0()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t sub_21F86AA78(uint64_t a1, uint64_t a2, int a3)
{
  return sub_21F86A7C0(a1, a2, a3, (uint64_t)v3+ ((*(unsigned __int8 *)(*(void *)(v3[2] - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3[2] - 8) + 80)), v3[2], v3[3], v3[4]);
}

uint64_t sub_21F86AABC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v50 = a2;
  int v51 = a4;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v49 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v10 + 24);
  uint64_t v12 = type metadata accessor for AxisValueLabel.LabelContent();
  __n128 v13 = MEMORY[0x270FA5388](v12);
  unsigned __int16 v15 = (char *)v48 - v14;
  uint64_t v17 = *(void *)a1;
  uint64_t v16 = *(void *)(a1 + 8);
  uint64_t v18 = *(unsigned __int8 *)(a1 + 16);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16))((char *)v48 - v14, v4 + *(int *)(a3 + 64), v12, v13);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    char v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))v15;
    uint64_t v49 = *((void *)v15 + 1);
    v57.n128_u64[0] = v30(v17, v16, v18);
    v57.n128_u64[1] = v31;
    sub_21F7AA27C();
    uint64_t v32 = sub_21FA25350();
    uint64_t v34 = v33;
    v48[1] = v35;
    uint64_t v52 = v32;
    uint64_t v53 = v33;
    char v37 = v36 & 1;
    char v54 = v36 & 1;
    uint64_t v55 = v35;
    sub_21F86AE7C((uint64_t)&v52, v50, MEMORY[0x263F1A830], MEMORY[0x263F1A820], &v57);
    unint64_t v25 = v57.n128_u64[1];
    unint64_t v24 = v57.n128_u64[0];
    unint64_t v26 = *((void *)&v58 + 1);
    unint64_t v27 = v58;
    unint64_t v28 = v59;
    swift_release();
    sub_21F7656A8(v32, v34, v37);
LABEL_9:
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  uint64_t v21 = v50;
  if (EnumCaseMultiPayload != 1)
  {
    swift_beginAccess();
    sub_21F76C978(v21 + 72, (uint64_t)&v52, &qword_26AD48EB0);
    if (v56 == 255)
    {
      unint64_t v59 = 0;
      __n128 v57 = 0u;
      long long v58 = 0u;
      char v60 = 3;
      sub_21F76CA84((uint64_t)&v52, &qword_26AD48EB0);
    }
    else
    {
      sub_21F7F3E44((uint64_t)&v52, (uint64_t)&v57);
    }
    uint64_t v38 = sub_21F9F8DF4(v17, v16, v18);
    unint64_t v40 = v39;
    sub_21F7F3CCC((uint64_t)&v57);
    v57.n128_u64[0] = v38;
    v57.n128_u64[1] = v40;
    sub_21F7AA27C();
    uint64_t v41 = sub_21FA25350();
    uint64_t v43 = v42;
    uint64_t v52 = v41;
    uint64_t v53 = v42;
    char v45 = v44 & 1;
    char v54 = v44 & 1;
    uint64_t v55 = v46;
    sub_21F86AE7C((uint64_t)&v52, v21, MEMORY[0x263F1A830], MEMORY[0x263F1A820], &v57);
    unint64_t v25 = v57.n128_u64[1];
    unint64_t v24 = v57.n128_u64[0];
    unint64_t v26 = *((void *)&v58 + 1);
    unint64_t v27 = v58;
    unint64_t v28 = v59;
    sub_21F7656A8(v41, v43, v45);
    goto LABEL_9;
  }
  uint64_t v22 = v49;
  (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v9, v15, v7);
  __n128 v23 = sub_21F86AE7C((uint64_t)v9, v21, v7, v11, &v57);
  unint64_t v25 = v57.n128_u64[1];
  unint64_t v24 = v57.n128_u64[0];
  unint64_t v26 = *((void *)&v58 + 1);
  unint64_t v27 = v58;
  unint64_t v28 = v59;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, __n128))(v22 + 8))(v9, v7, v23);
LABEL_10:
  int v47 = v51;
  *int v51 = v24;
  v47[1] = v25;
  v47[2] = v27;
  v47[3] = v26;
  v47[4] = v28;
  return result;
}

__n128 sub_21F86AE7C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, __n128 *a5@<X8>)
{
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = &v22[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = (uint64_t *)(v13 + 32);
  swift_beginAccess();
  if (*(void *)(a2 + 40))
  {
    uint64_t v15 = *(void *)(a2 + 40);
    uint64_t v16 = *v14;
    if (v16)
    {
LABEL_3:
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
      swift_retain();
      swift_retain();
      sub_21F8C5A04((uint64_t)v12, v15, v16, a3, a4, (uint64_t *)v23);
      goto LABEL_10;
    }
  }
  else
  {
    if (qword_26AD455D0 != -1) {
      swift_once();
    }
    uint64_t v15 = qword_26AD521F0;
    swift_retain();
    uint64_t v16 = *v14;
    if (v16) {
      goto LABEL_3;
    }
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
  uint64_t v17 = qword_26AD455D8;
  swift_retain();
  if (v17 != -1) {
    swift_once();
  }
  uint64_t v18 = qword_26AD521F8;
  swift_retain();
  sub_21F8C5DE4((uint64_t)v12, v15, v18, a3, a4, (uint64_t *)v23);
LABEL_10:
  unint64_t v19 = v24;
  __n128 result = v23[0];
  __n128 v21 = v23[1];
  *a5 = v23[0];
  a5[1] = v21;
  a5[2].n128_u64[0] = v19;
  return result;
}

uint64_t sub_21F86B098(char a1, char a2, unsigned int a3, double a4)
{
  if ((*(unsigned char *)(v4 + 24) & 1) != 0 || (uint64_t result = sub_21F86B168(), result == 3))
  {
    if (a2)
    {
      if (a1) {
        int v10 = 1;
      }
      else {
        int v10 = 2 * (a4 <= 0.0);
      }
      if (a3 == 2) {
        unsigned int v11 = 0;
      }
      else {
        unsigned int v11 = 2;
      }
      if (a3 < 2u) {
        unsigned int v11 = v10;
      }
      if (a2 == 1) {
        return 0x20101u >> (8 * a3);
      }
      else {
        return v11;
      }
    }
    else
    {
      if (a1) {
        unsigned int v12 = 1;
      }
      else {
        unsigned int v12 = 2 * (a4 <= 0.0);
      }
      if (a3 == 2) {
        unsigned int v13 = a3;
      }
      else {
        unsigned int v13 = 0;
      }
      if (a3 >= 2u) {
        return v13;
      }
      else {
        return v12;
      }
    }
  }
  return result;
}

uint64_t sub_21F86B168()
{
  if (sub_21FA25980()) {
    return 0;
  }
  sub_21FA25940();
  if (sub_21FA25980()) {
    return 0;
  }
  sub_21FA25960();
  if (sub_21FA25980()) {
    return 0;
  }
  sub_21FA259D0();
  if (sub_21FA25980()) {
    return 2;
  }
  sub_21FA25950();
  if (sub_21FA25980()) {
    return 2;
  }
  sub_21FA25970();
  if (sub_21FA25980()) {
    return 2;
  }
  sub_21FA25990();
  if (sub_21FA25980()) {
    return 1;
  }
  sub_21FA259A0();
  if (sub_21FA25980()) {
    return 1;
  }
  sub_21F96D5C0(4);
  return 3;
}

uint64_t sub_21F86B250(char a1, char a2, unsigned int a3, double a4)
{
  if ((*(unsigned char *)(v4 + 24) & 1) != 0 || (uint64_t result = sub_21F86B334(), result == 3))
  {
    if (a2)
    {
      if (a1) {
        int v10 = 1;
      }
      else {
        int v10 = 2 * (a4 <= 0.0);
      }
      if ((_BYTE)a3) {
        unsigned int v11 = 2;
      }
      else {
        unsigned int v11 = a3;
      }
      if (a3 - 2 < 2) {
        unsigned int v11 = v10;
      }
      if (a2 == 1) {
        return 0x1010002u >> (8 * a3);
      }
      else {
        return v11;
      }
    }
    else
    {
      if (a1) {
        unsigned int v12 = 1;
      }
      else {
        unsigned int v12 = 2 * (a4 <= 0.0);
      }
      if ((_BYTE)a3) {
        unsigned int v13 = 0;
      }
      else {
        unsigned int v13 = 2;
      }
      if (a3 - 2 >= 2) {
        return v13;
      }
      else {
        return v12;
      }
    }
  }
  return result;
}

uint64_t sub_21F86B334()
{
  if (sub_21FA25980()) {
    return 0;
  }
  sub_21FA25940();
  if (sub_21FA25980()) {
    return 0;
  }
  sub_21FA25950();
  if (sub_21FA25980()) {
    return 0;
  }
  sub_21FA259A0();
  if (sub_21FA25980()) {
    return 2;
  }
  sub_21FA25960();
  if (sub_21FA25980()) {
    return 2;
  }
  sub_21FA25970();
  if (sub_21FA25980()) {
    return 2;
  }
  sub_21FA259C0();
  if (sub_21FA25980()) {
    return 1;
  }
  sub_21FA259D0();
  if (sub_21FA25980()) {
    return 1;
  }
  sub_21F96D5C0(4);
  return 3;
}

uint64_t sub_21F86B41C(char a1, unsigned __int8 a2)
{
  if (*(unsigned char *)(v2 + 48) != 1) {
    return *(void *)(v2 + 32);
  }
  if (a1 || a2 < 2u) {
    return 0;
  }
  if (a2 == 2) {
    return sub_21FA258F0();
  }
  return sub_21FA25900();
}

double sub_21F86B488(unsigned __int8 a1)
{
  if (a1 <= 1u)
  {
    if (*(unsigned char *)(v1 + 88))
    {
      if (qword_26AD455E0 != -1) {
        swift_once();
      }
      uint64_t v2 = &qword_26AD521E8;
    }
    else
    {
      uint64_t v2 = (uint64_t *)(v1 + 80);
    }
    double v4 = *(double *)v2;
    if ((*(unsigned char *)(v1 + 104) & 1) == 0 || qword_26AD45310 == -1) {
      return v4;
    }
LABEL_18:
    swift_once();
    return v4;
  }
  if (*(unsigned char *)(v1 + 88))
  {
    if (qword_26AD45310 != -1) {
      swift_once();
    }
    uint64_t v3 = &qword_26AD521A8;
  }
  else
  {
    uint64_t v3 = (uint64_t *)(v1 + 80);
  }
  double v4 = *(double *)v3;
  if ((*(unsigned char *)(v1 + 104) & 1) != 0 && qword_26AD455E0 != -1) {
    goto LABEL_18;
  }
  return v4;
}

void static AxisValueLabel._layoutAxisMark(_:_:)(unsigned __int8 *a1, uint64_t *a2)
{
  uint64_t v65 = sub_21F76CA40(&qword_26AD46B30);
  MEMORY[0x270FA5388](v65);
  uint64_t v5 = (void *)((char *)v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v64 = sub_21F76CA40(&qword_26AD46B28);
  MEMORY[0x270FA5388](v64);
  uint64_t v66 = (void *)((char *)v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *a2;
  uint64_t v8 = *(void *)(v7 + 160);
  if (*(unsigned char *)(v7 + 160) == 0xFF)
  {
    __break(1u);
    return;
  }
  uint64_t v10 = *(void *)(v7 + 168);
  uint64_t v9 = *(void *)(v7 + 176);
  uint64_t v12 = *(void *)(v7 + 152);
  uint64_t v76 = *(void *)(v7 + 144);
  uint64_t v11 = v76;
  uint64_t v77 = v12;
  LOBYTE(v78) = v8;
  uint64_t v79 = v10;
  uint64_t v80 = v9;
  swift_retain();
  sub_21F8101D0(v11, v12, v8);
  uint64_t v13 = type metadata accessor for AxisValueLabel();
  sub_21F86AABC((uint64_t)&v76, v7, v13, (unint64_t *)v75);
  uint64_t v14 = v75[0];
  sub_21F80FEF8(v11, v12, v8);
  int v15 = *(unsigned __int8 *)(v7 + 24);
  int v16 = *a1;
  if (v16 != 2)
  {
    int v17 = v16 & 1;
LABEL_9:
    int v67 = v17;
    goto LABEL_10;
  }
  if (*(unsigned __int8 *)(v7 + 136) >= 2u)
  {
    int v17 = v15 != 2 || (*(unsigned char *)(v7 + 64) & 0xFE) != 2;
    goto LABEL_9;
  }
  int v67 = 0;
LABEL_10:
  int v18 = v15 == 2;
  if (a1[75] != 2) {
    int v18 = a1[75];
  }
  int v70 = v18;
  unsigned int v19 = 9u >> (a1[76] & 0xF);
  uint64_t v20 = *(void *)(v7 + 120);
  uint64_t v21 = *(void *)(*(void *)(v7 + 16) + 24);
  swift_retain();
  uint64_t v22 = sub_21FA24A00();
  unsigned int v69 = v19;
  if (v19) {
    uint64_t v26 = v22;
  }
  else {
    uint64_t v26 = v24;
  }
  if (v19) {
    char v27 = v23 & 1;
  }
  else {
    char v27 = v25 & 1;
  }
  if (v19) {
    uint64_t v28 = v24;
  }
  else {
    uint64_t v28 = v22;
  }
  uint64_t v68 = v28;
  if (v19) {
    char v29 = v25 & 1;
  }
  else {
    char v29 = v23 & 1;
  }
  sub_21F7B92C8((uint64_t)v75, (uint64_t)&v76);
  if (v78 < 0)
  {
    v78 &= ~0x8000000000000000;
    uint64_t v63 = v76;
    uint64_t KeyPath = swift_getKeyPath();
    v62[1] = v14;
    uint64_t v38 = v20 + OBJC_IVAR____TtC6Charts14SgMeasurements__dynamicTypeSize;
    swift_beginAccess();
    uint64_t v39 = *(int *)(v65 + 28);
    uint64_t v65 = v21;
    unint64_t v40 = (char *)v5 + v39;
    uint64_t v41 = sub_21FA24730();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v41 - 8) + 16))(v40, v38, v41);
    *uint64_t v5 = KeyPath;
    uint64_t v42 = v66;
    sub_21F76C978((uint64_t)v5, (uint64_t)v66 + *(int *)(v64 + 36), &qword_26AD46B30);
    *uint64_t v42 = v63;
    swift_retain();
    sub_21F76CA84((uint64_t)v5, &qword_26AD46B30);
    char v73 = v27;
    char v72 = v29;
    double v34 = sub_21F86CC20((uint64_t)v42, v65, v26, v27, v68, v29);
    double v36 = v43;
    sub_21F76CA84((uint64_t)v42, &qword_26AD46B28);
    swift_release();
  }
  else
  {
    uint64_t v30 = v76;
    uint64_t v31 = v77;
    unsigned __int8 v32 = v78 & 1;
    uint64_t v33 = v79;
    sub_21F7652C0(v76, v77, v78 & 1);
    swift_bridgeObjectRetain();
    char v74 = v27;
    char v73 = v29;
    double v34 = sub_21F9C2464(v30, v31, v32, v33);
    double v36 = v35;
    sub_21F7656A8(v30, v31, v32);
    swift_release();
    swift_bridgeObjectRelease();
  }
  if (v69) {
    double v44 = v36;
  }
  else {
    double v44 = v34;
  }
  if (v69) {
    double v45 = v34;
  }
  else {
    double v45 = v36;
  }
  swift_beginAccess();
  double v46 = *(double *)(v7 + 192);
  double v47 = *(double *)(v7 + 200);
  if (v46 <= v45) {
    double v46 = v45;
  }
  if (v47 <= v44) {
    double v47 = v44;
  }
  *(double *)(v7 + 192) = v46;
  *(double *)(v7 + 200) = v47;
  if (*(unsigned __int8 *)(v7 + 24) <= 1u)
  {
    unsigned int v48 = *(unsigned __int8 *)(v7 + 64);
    double v49 = sub_21F86B488(*(unsigned char *)(v7 + 64));
    if (v48 >= 2) {
      double v51 = v45;
    }
    else {
      double v51 = v44;
    }
    if (v48 < 2) {
      double v49 = v50;
    }
    double v52 = v51 + v49;
    if (*(double *)(v7 + 208) > v51 + v49) {
      double v53 = *(double *)(v7 + 208);
    }
    else {
      double v53 = v51 + v49;
    }
    swift_beginAccess();
    *(double *)(v7 + 208) = v53;
    uint64_t v54 = *(void *)(v7 + 128);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v71 = *(void *)(v7 + 216);
    *(void *)(v7 + 216) = 0x8000000000000000;
    sub_21F873ACC(v54, isUniquelyReferenced_nonNull_native, v52);
    *(void *)(v7 + 216) = v71;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  if ((v70 & 1) != 0 && (v67 & 1) == 0)
  {
    int v56 = *(unsigned __int8 *)(v7 + 64);
    if (*(unsigned char *)(v7 + 64) && v56 != 1) {
      double v45 = v44;
    }
    double v57 = sub_21F86B488(v56);
    double v59 = v58;
    sub_21F86D024(v75);
    unsigned int v60 = *(unsigned __int8 *)(v7 + 64);
    swift_release();
    if (v60 <= 1) {
      double v59 = v57;
    }
    double v61 = v45 + v59;
    if (*(double *)(v7 + 232) > v45 + v59) {
      double v61 = *(double *)(v7 + 232);
    }
    *(double *)(v7 + 232) = v61;
  }
  else
  {
    sub_21F86D024(v75);
    swift_release();
  }
}

void static AxisValueLabel._renderAxisMark(_:_:)(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v130 = a3;
  double v122 = COERCE_DOUBLE(sub_21F76CA40(&qword_26AD46B30));
  MEMORY[0x270FA5388](*(void *)&v122);
  uint64_t v6 = (uint64_t *)((char *)&v118 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v121 = sub_21F76CA40(&qword_26AD46B28);
  MEMORY[0x270FA5388](v121);
  uint64_t v123 = (uint64_t)&v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *a2;
  uint64_t v9 = *(void *)(v8 + 160);
  if (*(unsigned char *)(v8 + 160) == 0xFF) {
    goto LABEL_134;
  }
  uint64_t v11 = *(void *)(v8 + 168);
  uint64_t v10 = *(void *)(v8 + 176);
  uint64_t v12 = *(void *)(v8 + 152);
  uint64_t v138 = *(void *)(v8 + 144);
  uint64_t v15 = v138;
  uint64_t v139 = v12;
  LOBYTE(v140) = v9;
  uint64_t v141 = v11;
  uint64_t v142 = v10;
  swift_retain();
  sub_21F8101D0(v15, v12, v9);
  uint64_t v13 = type metadata accessor for AxisValueLabel();
  sub_21F86AABC((uint64_t)&v138, v8, v13, (unint64_t *)v137);
  uint64_t v14 = v137[0];
  uint64_t v128 = v137[1];
  uint64_t v127 = v137[2];
  uint64_t v126 = v137[3];
  uint64_t v125 = v137[4];
  sub_21F80FEF8(v15, v12, v9);
  uint64_t v133 = a1;
  uint64_t v124 = a1[76];
  LODWORD(v15) = 9u >> (v124 & 0xF);
  uint64_t v16 = *(void *)(v8 + 120);
  uint64_t v17 = *(void *)(*(void *)(v8 + 16) + 24);
  swift_retain();
  *(double *)&uint64_t v18 = COERCE_DOUBLE(sub_21FA24A00());
  if (v15) {
    double v22 = *(double *)&v18;
  }
  else {
    double v22 = v20;
  }
  double v131 = v22;
  if (v15) {
    char v23 = v19 & 1;
  }
  else {
    char v23 = v21 & 1;
  }
  if (v15) {
    *(double *)&uint64_t v24 = v20;
  }
  else {
    uint64_t v24 = v18;
  }
  double v132 = *(double *)&v24;
  if (v15) {
    char v25 = v21 & 1;
  }
  else {
    char v25 = v19 & 1;
  }
  sub_21F7B92C8((uint64_t)v137, (uint64_t)&v138);
  uint64_t v129 = v14;
  if (v140 < 0)
  {
    v140 &= ~0x8000000000000000;
    uint64_t v119 = v138;
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v120 = v17;
    char v34 = v15;
    uint64_t v15 = v16 + OBJC_IVAR____TtC6Charts14SgMeasurements__dynamicTypeSize;
    swift_beginAccess();
    double v35 = (char *)v6 + *(int *)(*(void *)&v122 + 28);
    uint64_t v36 = sub_21FA24730();
    uint64_t v37 = v15;
    LOBYTE(v15) = v34;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 16))(v35, v37, v36);
    *uint64_t v6 = KeyPath;
    uint64_t v38 = v123;
    sub_21F76C978((uint64_t)v6, v123 + *(int *)(v121 + 36), &qword_26AD46B30);
    *(void *)uint64_t v38 = v119;
    swift_retain();
    sub_21F76CA84((uint64_t)v6, &qword_26AD46B30);
    char v135 = v23;
    char v134 = v25;
    double v30 = sub_21F86CC20(v38, v120, *(uint64_t *)&v131, v23, *(uint64_t *)&v132, v25);
    double v32 = v39;
    sub_21F76CA84(v38, &qword_26AD46B28);
    swift_release();
  }
  else
  {
    uint64_t v26 = v138;
    uint64_t v27 = v139;
    unsigned __int8 v28 = v140 & 1;
    uint64_t v29 = v141;
    sub_21F7652C0(v138, v139, v140 & 1);
    swift_bridgeObjectRetain();
    char v136 = v23;
    char v135 = v25;
    double v30 = sub_21F9C2464(v26, v27, v28, v29);
    double v32 = v31;
    sub_21F7656A8(v26, v27, v28);
    swift_release();
    swift_bridgeObjectRelease();
  }
  if (v15) {
    double v40 = v32;
  }
  else {
    double v40 = v30;
  }
  if (v15) {
    double v41 = v30;
  }
  else {
    double v41 = v32;
  }
  int v42 = *(unsigned __int8 *)(v8 + 24);
  unsigned int v43 = *(unsigned __int8 *)(v8 + 64);
  double v44 = v133;
  int v45 = *v133;
  if (v45 == 2)
  {
    if (*(unsigned __int8 *)(v8 + 136) >= 2u) {
      int v46 = v42 != 2 || (v43 & 0xFE) != 2;
    }
    else {
      int v46 = 0;
    }
  }
  else
  {
    int v46 = v45 & 1;
  }
  unsigned __int8 v47 = sub_21F86B098(v46, *(unsigned char *)(v8 + 24), v43, *(double *)(v8 + 344));
  unsigned __int8 v48 = sub_21F86B250(v46, v42, *(unsigned __int8 *)(v8 + 64), *(double *)(v8 + 344));
  sub_21F86B41C(v42, *(unsigned char *)(v8 + 64));
  char v50 = v49;
  double v51 = *(double *)(v8 + 352);
  if (v46)
  {
    double v52 = *(double *)(v8 + 360);
    double v53 = (v51 + *(double *)(v8 + 368)) * 0.5;
    double v54 = (v52 + *(double *)(v8 + 376)) * 0.5;
  }
  else
  {
    double v54 = *(double *)(v8 + 360);
    double v53 = *(double *)(v8 + 352);
    double v52 = v54;
  }
  unsigned int v55 = *(unsigned __int8 *)(v8 + 64);
  if (v55 > 1)
  {
    if (v48 == 2)
    {
      double v59 = *(double *)(v8 + 320);
      if (*(double *)(v8 + 336) < v59) {
        double v59 = *(double *)(v8 + 336);
      }
      if (v52 <= v59 + 1.0) {
        goto LABEL_58;
      }
    }
    else if (!v48)
    {
      double v57 = *(double *)(v8 + 320);
      if (v57 <= *(double *)(v8 + 336)) {
        double v57 = *(double *)(v8 + 336);
      }
      if (v57 + -1.0 <= v52) {
        goto LABEL_58;
      }
    }
  }
  else if (v47 == 2)
  {
    double v58 = *(double *)(v8 + 312);
    if (*(double *)(v8 + 328) < v58) {
      double v58 = *(double *)(v8 + 328);
    }
    if (v51 <= v58 + 1.0) {
      goto LABEL_58;
    }
  }
  else if (!v47)
  {
    double v56 = *(double *)(v8 + 312);
    if (v56 <= *(double *)(v8 + 328)) {
      double v56 = *(double *)(v8 + 328);
    }
    if (v56 + -1.0 <= v51) {
      goto LABEL_58;
    }
  }
  if (v46 && *(unsigned char *)(v8 + 136) != 2)
  {
    if (*(unsigned char *)(v8 + 160) == 0xFF)
    {
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
    uint64_t v60 = *(void *)(v8 + 176);
    BOOL v61 = __OFSUB__(v60, 1);
    uint64_t v62 = v60 - 1;
    if (!v61)
    {
      if (*(void *)(v8 + 168) == v62)
      {
LABEL_58:
        sub_21F86D024(v137);
        swift_release();
        unint64_t v63 = 0xE000000000000000;
        uint64_t v64 = v130;
LABEL_132:
        *uint64_t v64 = v63;
        return;
      }
      goto LABEL_59;
    }
    __break(1u);
LABEL_134:
    __break(1u);
    goto LABEL_135;
  }
LABEL_59:
  swift_beginAccess();
  double v65 = *(double *)(v8 + 56);
  double v132 = *(double *)(v8 + 48);
  double v66 = sub_21F86B488(v55);
  double v68 = v67;
  unsigned int v69 = *(unsigned __int8 *)(v8 + 64);
  if (v69 <= 1 && v47 == 1)
  {
    swift_beginAccess();
    if (*(void *)(v8 + 216))
    {
      double v68 = v68 + *(double *)(v8 + 224);
LABEL_72:
      *(double *)&uint64_t v123 = v54;
      if (v48)
      {
        if (v48 != 1) {
          double v65 = v65 - v68;
        }
      }
      else
      {
        double v65 = v65 + v68;
      }
      double v71 = v40;
      double v131 = v41;
      double v122 = v53;
      if (v50)
      {
        double v78 = dbl_21FA2B018[v47];
        double v79 = dbl_21FA2B018[v48];
        uint64_t v64 = v130;
        uint64_t v76 = v129;
        goto LABEL_90;
      }
      swift_beginAccess();
      if (*(void *)(v8 + 216))
      {
        double v73 = *(double *)(v8 + 192);
        double v72 = *(double *)(v8 + 200);
        double v74 = v73 * dbl_21FA2B018[v47];
        double v75 = dbl_21FA2B018[v48];
        sub_21FA24CC0();
        if (sub_21FA24B90())
        {
          uint64_t v76 = v129;
          double v77 = v131;
        }
        else
        {
          sub_21FA24CD0();
          char v80 = sub_21FA24B90();
          uint64_t v76 = v129;
          if (v80)
          {
            double v77 = v131;
            double v74 = v74 - (v73 - v131);
          }
          else
          {
            sub_21FA24CB0();
            sub_21FA24B90();
            double v77 = v131;
            double v74 = v74 + (v73 - v131) * -0.5;
          }
        }
        double v81 = v72 * v75;
        double v78 = v74 / v77;
        sub_21FA24BA0();
        char v82 = sub_21FA24B90();
        uint64_t v64 = v130;
        if (v82)
        {
          double v40 = v71;
          double v79 = v81 / v71;
        }
        else
        {
          sub_21FA24BB0();
          if (sub_21FA24B90())
          {
            double v83 = v72 - v71;
            double v40 = v71;
            double v84 = v81 - v83;
          }
          else
          {
            sub_21FA24BC0();
            sub_21FA24B90();
            double v85 = v72 - v71;
            double v40 = v71;
            double v84 = v81 + v85 * -0.5;
          }
          double v79 = v84 / v71;
        }
LABEL_90:
        char v86 = 8 * v124;
        if (v44[74])
        {
          LOBYTE(v87) = 0;
          long long v88 = v42 == 1;
          unsigned int v89 = 0x20100u >> v86;
        }
        else
        {
          long long v88 = *(_OWORD *)(v44 + 56);
          unsigned int v87 = *((unsigned __int16 *)v44 + 36);
          unsigned int v89 = 0x20100u >> v86;
          if (((v87 >> 8) & 1) == 0)
          {
            unsigned int v99 = *(unsigned __int8 *)(v8 + 64);
            if (v99 >= 2) {
              *(double *)&uint64_t v100 = v68;
            }
            else {
              *(double *)&uint64_t v100 = v66;
            }
            if (v99 > 1)
            {
              double v103 = v40 * 0.5 + 1.0;
              double v104 = *(double *)(v8 + 256);
              double v105 = *(double *)(v8 + 264);
              if (v105 >= v104) {
                double v106 = *(double *)(v8 + 256);
              }
              else {
                double v106 = *(double *)(v8 + 264);
              }
              double v94 = v106 - v103;
              if (v104 <= v105) {
                double v104 = *(double *)(v8 + 264);
              }
              double v96 = v103 + v104;
              unint64_t v91 = 0xFFF0000000000000;
              uint64_t v95 = 0x7FF0000000000000;
            }
            else
            {
              double v101 = *(double *)(v8 + 240);
              double v102 = *(double *)(v8 + 248);
              if (v102 >= v101) {
                unint64_t v91 = *(void *)(v8 + 240);
              }
              else {
                unint64_t v91 = *(void *)(v8 + 248);
              }
              if (v101 > v102) {
                uint64_t v95 = *(void *)(v8 + 240);
              }
              else {
                uint64_t v95 = *(void *)(v8 + 248);
              }
              double v94 = -INFINITY;
              double v96 = INFINITY;
            }
            uint64_t v92 = 0;
            if (v87) {
              uint64_t v93 = v100;
            }
            else {
              uint64_t v93 = *((void *)v44 + 8);
            }
            uint64_t v90 = *((void *)v44 + 7);
            goto LABEL_131;
          }
        }
        uint64_t v90 = 0;
        unint64_t v91 = 0;
        uint64_t v92 = 2;
        uint64_t v93 = 0;
        double v94 = 0.0;
        uint64_t v95 = 0;
        double v96 = 0.0;
        if (v88 == 0 && !(_BYTE)v87)
        {
          if (*(unsigned __int8 *)(v8 + 64) > 1u)
          {
            uint64_t v90 = 0;
            double v107 = v71 * 0.5 + 1.0;
            double v108 = *(double *)(v8 + 256);
            double v109 = *(double *)(v8 + 264);
            if (v109 >= v108) {
              double v110 = *(double *)(v8 + 256);
            }
            else {
              double v110 = *(double *)(v8 + 264);
            }
            double v94 = v110 - v107;
            if (v108 <= v109) {
              double v108 = *(double *)(v8 + 264);
            }
            double v96 = v107 + v108;
            uint64_t v93 = 0x3FF0000000000000;
            uint64_t v95 = 0x7FF0000000000000;
            unint64_t v91 = 0xFFF0000000000000;
          }
          else
          {
            uint64_t v90 = 0;
            double v97 = *(double *)(v8 + 240);
            double v98 = *(double *)(v8 + 248);
            if (v98 >= v97) {
              unint64_t v91 = *(void *)(v8 + 240);
            }
            else {
              unint64_t v91 = *(void *)(v8 + 248);
            }
            if (v97 > v98) {
              uint64_t v95 = *(void *)(v8 + 240);
            }
            else {
              uint64_t v95 = *(void *)(v8 + 248);
            }
            uint64_t v93 = 0x3FF0000000000000;
            double v96 = INFINITY;
            double v94 = -INFINITY;
          }
          uint64_t v92 = 1;
        }
LABEL_131:
        uint64_t v111 = swift_allocObject();
        uint64_t v112 = *(void *)(v8 + 16);
        swift_retain();
        swift_release();
        uint64_t v113 = *(void *)(v112 + 24);
        swift_release();
        double v114 = v122 + v132;
        *(void *)(v111 + 16) = v113;
        double v115 = *(double *)&v123 + v65;
        *(double *)(v111 + 24) = v114;
        *(double *)(v111 + 32) = v115;
        *(double *)(v111 + 40) = v78;
        *(double *)(v111 + 48) = v79;
        uint64_t v116 = v128;
        *(void *)(v111 + 56) = v76;
        *(void *)(v111 + 64) = v116;
        uint64_t v117 = v126;
        *(void *)(v111 + 72) = v127;
        *(void *)(v111 + 80) = v117;
        *(void *)(v111 + 88) = v125;
        *(unsigned char *)(v111 + 96) = v89;
        *(double *)(v111 + 104) = v131;
        *(double *)(v111 + 112) = v71;
        *(void *)(v111 + 120) = v92;
        *(void *)(v111 + 128) = v90;
        *(void *)(v111 + 136) = v93;
        *(void *)(v111 + 144) = v91;
        *(double *)(v111 + 152) = v94;
        *(void *)(v111 + 160) = v95;
        *(double *)(v111 + 168) = v96;
        *(_WORD *)(v111 + 176) = 6;
        unint64_t v63 = v111 | 0xA000000000000000;
        *(void *)(v111 + 184) = 0;
        goto LABEL_132;
      }
      goto LABEL_136;
    }
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
    goto LABEL_137;
  }
  if ((v69 & 0xFE) != 2 || v48 != 1)
  {
LABEL_67:
    if (v47)
    {
      if (v47 == 1) {
        goto LABEL_72;
      }
      double v70 = v132 - v66;
    }
    else
    {
      double v70 = v132 + v66;
    }
    double v132 = v70;
    goto LABEL_72;
  }
  swift_beginAccess();
  if (*(void *)(v8 + 216))
  {
    double v66 = v66 + *(double *)(v8 + 224);
    goto LABEL_67;
  }
LABEL_138:
  __break(1u);
}

void sub_21F86C698(unsigned __int8 *a1, uint64_t *a2)
{
}

void sub_21F86C6A4(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
}

void static AxisValueLabelOrientation.horizontal.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static AxisValueLabelOrientation.vertical.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static AxisValueLabelOrientation.verticalReversed.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

unint64_t AxisValueLabelOrientation.description.getter()
{
  unint64_t result = 0x746E6F7A69726F68;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6C61636974726576;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x6974616D6F747561;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_21F86C76C()
{
  unint64_t result = 0x6974616D6F747561;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6C61636974726576;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      return result;
    default:
      unint64_t result = 0x746E6F7A69726F68;
      break;
  }
  return result;
}

void static AxisValueLabelCollisionResolution.greedy.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 18) = 0;
}

uint64_t static AxisValueLabelCollisionResolution.greedy(priority:minimumSpacing:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  *(double *)a3 = a4;
  *(void *)(a3 + 8) = result;
  *(_WORD *)(a3 + 16) = a2 & 1;
  *(unsigned char *)(a3 + 18) = 0;
  return result;
}

void static AxisValueLabelCollisionResolution.truncate.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 256;
  *(unsigned char *)(a1 + 18) = 0;
}

double static AxisValueLabelCollisionResolution.disabled.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 1;
  *(_OWORD *)a1 = xmmword_21FA2ADF0;
  *(_WORD *)(a1 + 16) = 256;
  *(unsigned char *)(a1 + 18) = 0;
  return result;
}

uint64_t AxisValueLabelCollisionResolution.description.getter()
{
  if (*(unsigned char *)(v0 + 18)) {
    return 0x6974616D6F747561;
  }
  __int16 v2 = *(_WORD *)(v0 + 16);
  if ((v2 & 0x100) != 0)
  {
    if ((_BYTE)v2) {
      BOOL v3 = 0;
    }
    else {
      BOOL v3 = *(_OWORD *)v0 == 0;
    }
    if (v3) {
      return 0x657461636E757274;
    }
    else {
      return 0x64656C6261736964;
    }
  }
  else
  {
    if (v2)
    {
      if (*(double *)v0 == 0.0) {
        return 0x796465657267;
      }
      sub_21FA26510();
      sub_21FA25D40();
      sub_21FA25FA0();
    }
    else
    {
      sub_21FA26510();
      sub_21FA25D40();
      sub_21FA25FA0();
      sub_21FA25D40();
      sub_21FA25F70();
      sub_21FA25D40();
      swift_bridgeObjectRelease();
    }
    sub_21FA25D40();
    return 0;
  }
}

uint64_t sub_21F86CA2C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 32);
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  uint64_t v4 = sub_21F78C550(a1);
  if ((v5 & 1) == 0) {
    return 0;
  }
  unint64_t v6 = *(void *)(*(void *)(v3 + 56) + 8 * v4);
  if ((v6 & 0x8000000000000000) != 0) {
    return 0;
  }
  uint64_t v7 = *(void **)(v2 + 8);
  if (v6 == *(void *)(v2 + 16)) {
    goto LABEL_7;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v2 + 8) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v9 = v7[2];
    v11[0] = (uint64_t)(v7 + 4);
    v11[1] = v9;
    sub_21F94E414(v11, v6, v2);
    *(void *)(v2 + 8) = v7;
LABEL_7:
    if (v6 < v7[2]) {
      break;
    }
    __break(1u);
LABEL_12:
    uint64_t v7 = sub_21F9352F0(v7);
    *(void *)(v2 + 8) = v7;
  }
  return swift_retain();
}

unint64_t sub_21F86CAF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(v2 + 32);
  if (*(void *)(v6 + 16)
    && (uint64_t v7 = sub_21F78C550(a2), (v8 & 1) != 0)
    && (unint64_t v9 = *(void *)(*(void *)(v6 + 56) + 8 * v7), (v9 & 0x8000000000000000) == 0))
  {
    uint64_t v10 = *(void **)(v3 + 8);
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      unint64_t result = (unint64_t)sub_21F9352F0(v10);
      uint64_t v10 = (void *)result;
    }
    if (v9 >= v10[2])
    {
      __break(1u);
    }
    else
    {
      swift_retain();
      unint64_t result = swift_release();
      v10[5 * v9 + 7] = a1;
      *(void *)(v3 + 8) = v10;
      if (v9 != *(void *)(v3 + 16))
      {
        uint64_t v12 = v10[2];
        v13[0] = (uint64_t)(v10 + 4);
        v13[1] = v12;
        unint64_t result = (unint64_t)sub_21F94E414(v13, v9, v3);
        *(void *)(v3 + 8) = v10;
      }
    }
  }
  else
  {
    return sub_21F919BD0(a1, a2, 0);
  }
  return result;
}

double sub_21F86CC20(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  v22[1] = a5;
  uint64_t v10 = sub_21F76CA40(&qword_26AD46B28);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v22 - v14;
  swift_beginAccess();
  uint64_t v16 = sub_21F86CA2C(a2);
  swift_endAccess();
  if (!v16) {
    goto LABEL_5;
  }
  sub_21F76CA40(&qword_26AD467F0);
  if (!swift_dynamicCastClass())
  {
    swift_release();
LABEL_5:
    sub_21F76C978(a1, (uint64_t)v15, &qword_26AD46B28);
    sub_21F76CA40(&qword_26AD467F0);
    uint64_t v18 = swift_allocObject();
    sub_21F76C978((uint64_t)v15, (uint64_t)v12, &qword_26AD46B28);
    sub_21F76CA40(&qword_26AD46878);
    swift_allocObject();
    uint64_t v19 = sub_21FA24610();
    swift_retain();
    sub_21F76CA84((uint64_t)v15, &qword_26AD46B28);
    *(void *)(v18 + 16) = v19;
    swift_release();
    swift_beginAccess();
    sub_21F86CAF8(v18, a2);
    swift_endAccess();
    LOBYTE(v24) = a4 & 1;
    char v23 = a6 & 1;
    uint64_t v20 = sub_21FA245F0();
    double v24 = 0.0;
    uint64_t v25 = 0;
    MEMORY[0x270FA5388](v20);
    v22[-2] = &v24;
    sub_21FA24600();
    goto LABEL_6;
  }
  sub_21F76C978(a1, (uint64_t)v15, &qword_26AD46B28);
  sub_21FA24620();
  LOBYTE(v24) = a4 & 1;
  char v23 = a6 & 1;
  uint64_t v17 = sub_21FA245F0();
  double v24 = 0.0;
  uint64_t v25 = 0;
  MEMORY[0x270FA5388](v17);
  v22[-2] = &v24;
  sub_21FA24600();
LABEL_6:
  swift_release();
  return v24;
}

uint64_t sub_21F86CF10()
{
  return sub_21FA24AB0();
}

uint64_t sub_21F86CF34()
{
  return sub_21FA24AB0();
}

uint64_t sub_21F86CF58(uint64_t a1)
{
  uint64_t v2 = sub_21FA24730();
  __n128 v3 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, __n128))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  return sub_21FA24AC0();
}

uint64_t *sub_21F86D024(uint64_t *a1)
{
  return a1;
}

uint64_t sub_21F86D058(uint64_t a1, int a2)
{
  __n128 v3 = v2;
  uint64_t v5 = type metadata accessor for CalendarCache.Key(0);
  uint64_t v39 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_21F76CA40(&qword_26AD462E8);
  int v40 = a2;
  uint64_t v9 = sub_21FA267B0();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v38 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  uint64_t v36 = v2;
  int64_t v37 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v37) {
      break;
    }
    double v22 = v38;
    unint64_t v23 = v38[v21];
    ++v17;
    if (!v23)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v37) {
        goto LABEL_34;
      }
      unint64_t v23 = v38[v17];
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v37)
        {
LABEL_34:
          swift_release();
          __n128 v3 = v36;
          if ((v40 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = v38[v24];
        if (!v23)
        {
          while (1)
          {
            int64_t v17 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v37) {
              goto LABEL_34;
            }
            unint64_t v23 = v38[v17];
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v24;
      }
    }
LABEL_21:
    unint64_t v14 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v39 + 72);
    uint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
    if (v40) {
      sub_21F87BEB4(v26, (uint64_t)v7, type metadata accessor for CalendarCache.Key);
    }
    else {
      sub_21F87BE4C(v26, (uint64_t)v7, type metadata accessor for CalendarCache.Key);
    }
    uint64_t v27 = *(void *)(*(void *)(v8 + 56) + 8 * v20);
    sub_21FA26A00();
    sub_21F89A614((uint64_t)v41);
    uint64_t result = sub_21FA26A50();
    uint64_t v28 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v15 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v29) & ~*(void *)(v15 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v15 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v18 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t result = sub_21F87BEB4((uint64_t)v7, *(void *)(v10 + 48) + v25 * v18, type metadata accessor for CalendarCache.Key);
    *(void *)(*(void *)(v10 + 56) + 8 * v18) = v27;
    ++*(void *)(v10 + 16);
  }
  swift_release();
  __n128 v3 = v36;
  double v22 = v38;
  if ((v40 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v8 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *double v22 = -1 << v35;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *__n128 v3 = v10;
  return result;
}

uint64_t sub_21F86D424(uint64_t a1, char a2)
{
  __n128 v3 = v2;
  uint64_t v5 = *v2;
  sub_21F76CA40(&qword_26AD46B40);
  uint64_t result = sub_21FA267B0();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v10;
    uint64_t v32 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v33);
                }
                else {
                  *uint64_t v9 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = 8 * v20;
      uint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = sub_21FA269F0();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *__n128 v3 = v7;
  return result;
}

uint64_t sub_21F86D6DC(uint64_t a1, char a2)
{
  __n128 v3 = v2;
  uint64_t v5 = *v2;
  sub_21F76CA40(&qword_26AD47A70);
  uint64_t result = sub_21FA267B0();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v12) {
          goto LABEL_34;
        }
        unint64_t v18 = v30[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_34;
          }
          unint64_t v18 = v30[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if (a2)
              {
                uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
                if (v29 >= 64) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v18 = v30[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v12) {
                  goto LABEL_34;
                }
                unint64_t v18 = v30[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 48) + 8 * v16);
      int64_t v21 = (const void *)(*(void *)(v5 + 56) + 776 * v16);
      if (a2) {
        memcpy(__src, v21, 0x301uLL);
      }
      else {
        sub_21F756FB4((uint64_t)v21, (uint64_t)__src);
      }
      uint64_t result = sub_21FA269F0();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(void *)(*(void *)(v7 + 48) + 8 * v14) = v20;
      uint64_t result = (uint64_t)memcpy((void *)(*(void *)(v7 + 56) + 776 * v14), __src, 0x301uLL);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *__n128 v3 = v7;
  return result;
}

uint64_t sub_21F86D9B8(uint64_t a1, char a2)
{
  __n128 v3 = v2;
  uint64_t v5 = *v2;
  sub_21F76CA40(&qword_26AD4A450);
  char v35 = a2;
  uint64_t result = sub_21FA267B0();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v34 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v33) {
          goto LABEL_33;
        }
        unint64_t v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v21 = v34[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                __n128 v3 = v2;
                goto LABEL_40;
              }
              uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
              if (v32 >= 64) {
                bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v34 = -1 << v32;
              }
              __n128 v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                unint64_t v21 = v34[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      char v27 = *(unsigned char *)(*(void *)(v5 + 48) + v19);
      uint64_t v28 = *(void *)(v5 + 56) + 24 * v19;
      char v29 = *(unsigned char *)v28;
      uint64_t v30 = *(void *)(v28 + 8);
      uint64_t v31 = *(void *)(v28 + 16);
      if ((v35 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      sub_21FA26A00();
      sub_21FA26A10();
      uint64_t result = sub_21FA26A50();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(unsigned char *)(*(void *)(v7 + 48) + v16) = v27;
      uint64_t v17 = *(void *)(v7 + 56) + 24 * v16;
      *(unsigned char *)uint64_t v17 = v29;
      *(void *)(v17 + 8) = v30;
      *(void *)(v17 + 16) = v31;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *__n128 v3 = v7;
  return result;
}

uint64_t sub_21F86DCBC(uint64_t a1, char a2)
{
  uint64_t v4 = *v2;
  sub_21F76CA40(&qword_26AD45700);
  char v33 = a2;
  uint64_t result = sub_21FA267B0();
  uint64_t v6 = result;
  if (*(void *)(v4 + 16))
  {
    int64_t v7 = 0;
    uint64_t v32 = (void *)(v4 + 64);
    uint64_t v8 = 1 << *(unsigned char *)(v4 + 32);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v4 + 64);
    int64_t v31 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = result + 64;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v18 = v17 | (v7 << 6);
      }
      else
      {
        int64_t v19 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        uint64_t result = v4 + 64;
        if (v19 >= v31) {
          goto LABEL_33;
        }
        unint64_t v20 = v32[v19];
        ++v7;
        if (!v20)
        {
          int64_t v7 = v19 + 1;
          if (v19 + 1 >= v31) {
            goto LABEL_33;
          }
          unint64_t v20 = v32[v7];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v31)
            {
LABEL_33:
              if (v33)
              {
                uint64_t v30 = 1 << *(unsigned char *)(v4 + 32);
                if (v30 >= 64) {
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v32 = -1 << v30;
                }
                *(void *)(v4 + 16) = 0;
              }
              break;
            }
            unint64_t v20 = v32[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v7 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_41;
                }
                if (v7 >= v31) {
                  goto LABEL_33;
                }
                unint64_t v20 = v32[v7];
                ++v21;
                if (v20) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v7 = v21;
          }
        }
LABEL_30:
        unint64_t v10 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v7 << 6);
      }
      char v26 = *(unsigned char *)(*(void *)(v4 + 48) + v18);
      char v27 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v18);
      uint64_t v28 = *v27;
      uint64_t v29 = v27[1];
      if ((v33 & 1) == 0)
      {
        swift_retain();
        swift_retain();
      }
      sub_21FA26A00();
      sub_21FA26A10();
      uint64_t result = sub_21FA26A50();
      uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v13 = result & ~v12;
      unint64_t v14 = v13 >> 6;
      if (((-1 << v13) & ~*(void *)(v11 + 8 * (v13 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v13) & ~*(void *)(v11 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v12) >> 6;
        do
        {
          if (++v14 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v24 = v14 == v23;
          if (v14 == v23) {
            unint64_t v14 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v14);
        }
        while (v25 == -1);
        unint64_t v15 = __clz(__rbit64(~v25)) + (v14 << 6);
      }
      *(void *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(unsigned char *)(*(void *)(v6 + 48) + v15) = v26;
      unint64_t v16 = (void *)(*(void *)(v6 + 56) + 16 * v15);
      *unint64_t v16 = v28;
      v16[1] = v29;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v2 = v6;
  return result;
}

uint64_t sub_21F86DFAC(uint64_t a1, char a2)
{
  __n128 v3 = v2;
  uint64_t v5 = *v2;
  sub_21F76CA40(&qword_26AD44BC8);
  char v37 = a2;
  uint64_t v6 = sub_21FA267B0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  char v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          __n128 v3 = v35;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    sub_21FA26A00();
    sub_21FA25D30();
    uint64_t result = sub_21FA26A50();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    int64_t v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    *int64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v7 + 56) + 8 * v18) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  __n128 v3 = v35;
  unint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *__n128 v3 = v7;
  return result;
}

uint64_t sub_21F86E2B4(uint64_t a1, char a2)
{
  __n128 v3 = v2;
  uint64_t v5 = *v2;
  sub_21F76CA40(&qword_267EE7DE0);
  char v42 = a2;
  uint64_t v6 = sub_21FA267B0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v40) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v41 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v41 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v40)
        {
LABEL_34:
          swift_release();
          __n128 v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v41 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v40) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v41 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_22:
    int64_t v25 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v27 = *v25;
    uint64_t v26 = v25[1];
    uint64_t v28 = *(void *)(v5 + 56) + 40 * v20;
    if (v42)
    {
      long long v29 = *(_OWORD *)v28;
      long long v30 = *(_OWORD *)(v28 + 16);
      uint64_t v45 = *(void *)(v28 + 32);
      long long v43 = v29;
      long long v44 = v30;
    }
    else
    {
      sub_21F7C21A4(v28, (uint64_t)&v43);
      swift_bridgeObjectRetain();
    }
    sub_21FA26A00();
    sub_21FA25D30();
    uint64_t result = sub_21FA26A50();
    uint64_t v31 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v11 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v32) & ~*(void *)(v11 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v11 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v14 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *uint64_t v15 = v27;
    v15[1] = v26;
    uint64_t v16 = *(void *)(v7 + 56) + 40 * v14;
    long long v17 = v43;
    long long v18 = v44;
    *(void *)(v16 + 32) = v45;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  __n128 v3 = v39;
  int64_t v22 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v22, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *__n128 v3 = v7;
  return result;
}

uint64_t sub_21F86E5EC(uint64_t a1, char a2)
{
  __n128 v3 = v2;
  uint64_t v5 = *v2;
  sub_21F76CA40(&qword_267EE7DE8);
  char v41 = a2;
  uint64_t v6 = sub_21FA267B0();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    int64_t v40 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v39 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v21 = v20 | (v13 << 6);
      }
      else
      {
        int64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v39) {
          goto LABEL_33;
        }
        unint64_t v23 = v40[v22];
        ++v13;
        if (!v23)
        {
          int64_t v13 = v22 + 1;
          if (v22 + 1 >= v39) {
            goto LABEL_33;
          }
          unint64_t v23 = v40[v13];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v39)
            {
LABEL_33:
              swift_release();
              __n128 v3 = v2;
              if (v41)
              {
                uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
                if (v38 >= 64) {
                  bzero(v40, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v40 = -1 << v38;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v40[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v39) {
                  goto LABEL_33;
                }
                unint64_t v23 = v40[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v24;
          }
        }
LABEL_30:
        unint64_t v10 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      long long v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
      uint64_t v31 = *v29;
      uint64_t v30 = v29[1];
      unint64_t v32 = (uint64_t *)(*(void *)(v5 + 56) + 40 * v21);
      uint64_t v34 = *v32;
      uint64_t v33 = v32[1];
      uint64_t v35 = v32[2];
      uint64_t v36 = v32[3];
      uint64_t v37 = v32[4];
      if ((v41 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      sub_21FA26A00();
      sub_21FA25D30();
      uint64_t result = sub_21FA26A50();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v16 == v26;
          if (v16 == v26) {
            unint64_t v16 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      long long v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      *long long v18 = v31;
      v18[1] = v30;
      unint64_t v19 = (void *)(*(void *)(v7 + 56) + 40 * v17);
      *unint64_t v19 = v34;
      v19[1] = v33;
      void v19[2] = v35;
      void v19[3] = v36;
      v19[4] = v37;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *__n128 v3 = v7;
  return result;
}

uint64_t sub_21F86E924(uint64_t a1, char a2)
{
  __n128 v3 = v2;
  uint64_t v5 = *v2;
  sub_21F76CA40(&qword_26AD44BD0);
  char v36 = a2;
  uint64_t v6 = sub_21FA267B0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    long long v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    sub_21FA26A00();
    sub_21FA25D30();
    uint64_t result = sub_21FA26A50();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    long long v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *long long v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *__n128 v3 = v7;
  return result;
}

uint64_t sub_21F86EC3C(uint64_t a1, char a2)
{
  __n128 v3 = v2;
  uint64_t v5 = *v2;
  sub_21F76CA40(&qword_26AD468F0);
  uint64_t result = sub_21FA267B0();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v29 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v19 >= v29) {
          goto LABEL_33;
        }
        unint64_t v20 = v30[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v29) {
            goto LABEL_33;
          }
          unint64_t v20 = v30[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v29)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                __n128 v3 = v2;
                goto LABEL_40;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v30 = -1 << v28;
              }
              __n128 v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v30[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v29) {
                  goto LABEL_33;
                }
                unint64_t v20 = v30[v8];
                ++v21;
                if (v20) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_30:
        unint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      char v26 = *(unsigned char *)(*(void *)(v5 + 48) + v18);
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v18);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      sub_21FA26A00();
      sub_21FA26A10();
      uint64_t result = sub_21FA26A50();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v24 = v15 == v23;
          if (v15 == v23) {
            unint64_t v15 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v12 + 8 * v15);
        }
        while (v25 == -1);
        unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(unsigned char *)(*(void *)(v7 + 48) + v16) = v26;
      *(void *)(*(void *)(v7 + 56) + 8 * v16) = v27;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *__n128 v3 = v7;
  return result;
}

uint64_t sub_21F86EF10(uint64_t a1, char a2)
{
  __n128 v3 = v2;
  uint64_t v5 = *v2;
  sub_21F76CA40(&qword_26AD46908);
  uint64_t result = sub_21FA267B0();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v35 = a2;
    int64_t v34 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        unint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v20 = v9[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                __n128 v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v32;
              }
              __n128 v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 8 * v18;
      uint64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      uint64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = sub_21FA269F0();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *__n128 v3 = v7;
  return result;
}

uint64_t sub_21F86F1B8(uint64_t a1, char a2)
{
  __n128 v3 = v2;
  uint64_t v5 = *v2;
  sub_21F76CA40(&qword_26AD44E68);
  char v49 = a2;
  uint64_t v6 = sub_21FA267B0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_64;
  }
  uint64_t v45 = v2;
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  unsigned __int8 v47 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v46 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v10)
    {
      unint64_t v17 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v19 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
      return result;
    }
    if (v19 >= v46) {
      break;
    }
    unint64_t v20 = v47;
    unint64_t v21 = v47[v19];
    ++v13;
    if (!v21)
    {
      int64_t v13 = v19 + 1;
      if (v19 + 1 >= v46) {
        goto LABEL_57;
      }
      unint64_t v21 = v47[v13];
      if (!v21)
      {
        int64_t v22 = v19 + 2;
        if (v22 >= v46)
        {
LABEL_57:
          swift_release();
          __n128 v3 = v45;
          if ((v49 & 1) == 0) {
            goto LABEL_64;
          }
          goto LABEL_60;
        }
        unint64_t v21 = v47[v22];
        if (!v21)
        {
          while (1)
          {
            int64_t v13 = v22 + 1;
            if (__OFADD__(v22, 1)) {
              goto LABEL_66;
            }
            if (v13 >= v46) {
              goto LABEL_57;
            }
            unint64_t v21 = v47[v13];
            ++v22;
            if (v21) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v22;
      }
    }
LABEL_21:
    unint64_t v10 = (v21 - 1) & v21;
    unint64_t v18 = __clz(__rbit64(v21)) + (v13 << 6);
LABEL_22:
    uint64_t v23 = *(void *)(v5 + 56);
    uint64_t v24 = *(void *)(v5 + 48) + 48 * v18;
    uint64_t v25 = *(void *)v24;
    uint64_t v26 = *(void *)(v24 + 8);
    uint64_t v27 = *(void *)(v24 + 16);
    uint64_t v28 = *(void *)(v24 + 24);
    uint64_t v50 = *(void *)(v24 + 32);
    unsigned int v29 = *(unsigned __int8 *)(v24 + 40);
    uint64_t v30 = *(void *)(v23 + 8 * v18);
    if ((v49 & 1) == 0)
    {
      sub_21F87BCC8(v25, v26, v27, v28, v50, *(unsigned char *)(v24 + 40));
      swift_retain();
    }
    sub_21FA26A00();
    if (v27 < 0)
    {
      sub_21FA26A10();
      if (v27 <= 0xFBu)
      {
        sub_21FA26A20();
        if ((v27 & 0x80) != 0)
        {
          sub_21FA26A10();
          sub_21F767A6C();
          uint64_t v31 = v25;
          uint64_t v32 = v26;
          char v33 = v27;
        }
        else
        {
          sub_21FA26A10();
          if ((_BYTE)v27)
          {
            sub_21FA26A10();
            if (v27 == 1)
            {
              sub_21FA26A30();
              uint64_t v31 = v25;
              uint64_t v32 = v26;
              char v33 = 1;
            }
            else
            {
              sub_21F7607AC(v25, v26, 2);
              sub_21FA25D30();
              uint64_t v31 = v25;
              uint64_t v32 = v26;
              char v33 = 2;
            }
          }
          else
          {
            sub_21FA26A10();
            sub_21FA26A30();
            uint64_t v31 = v25;
            uint64_t v32 = v26;
            char v33 = 0;
          }
        }
        sub_21F770E50(v31, v32, v33);
      }
      else
      {
        sub_21FA26A20();
      }
      if (v29 < 0xFC)
      {
        sub_21FA26A20();
        if ((v29 & 0x80) != 0)
        {
          sub_21FA26A10();
          sub_21F767A6C();
          uint64_t v34 = v28;
          uint64_t v35 = v50;
          char v36 = v29;
        }
        else
        {
          sub_21FA26A10();
          if (v29)
          {
            sub_21FA26A10();
            if (v29 == 1)
            {
              sub_21FA26A30();
              uint64_t v34 = v28;
              uint64_t v35 = v50;
              char v36 = 1;
            }
            else
            {
              sub_21F7607AC(v28, v50, 2);
              sub_21FA25D30();
              uint64_t v34 = v28;
              uint64_t v35 = v50;
              char v36 = 2;
            }
          }
          else
          {
            sub_21FA26A10();
            sub_21FA26A30();
            uint64_t v34 = v28;
            uint64_t v35 = v50;
            char v36 = 0;
          }
        }
        sub_21F770E50(v34, v35, v36);
      }
      else
      {
        sub_21FA26A20();
      }
    }
    else
    {
      sub_21FA26A10();
      sub_21FA26A10();
      if (v27 > 1u) {
        sub_21FA25D30();
      }
      else {
        sub_21FA26A30();
      }
    }
    uint64_t result = sub_21FA26A50();
    uint64_t v37 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v38 = result & ~v37;
    unint64_t v39 = v38 >> 6;
    if (((-1 << v38) & ~*(void *)(v11 + 8 * (v38 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v38) & ~*(void *)(v11 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v15 = v30;
    }
    else
    {
      char v40 = 0;
      unint64_t v41 = (unint64_t)(63 - v37) >> 6;
      uint64_t v15 = v30;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_65;
        }
        BOOL v42 = v39 == v41;
        if (v39 == v41) {
          unint64_t v39 = 0;
        }
        v40 |= v42;
        uint64_t v43 = *(void *)(v11 + 8 * v39);
      }
      while (v43 == -1);
      unint64_t v14 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    uint64_t v16 = *(void *)(v7 + 48) + 48 * v14;
    *(void *)uint64_t v16 = v25;
    *(void *)(v16 + 8) = v26;
    *(void *)(v16 + 16) = v27;
    *(void *)(v16 + 24) = v28;
    *(void *)(v16 + 32) = v50;
    *(unsigned char *)(v16 + 40) = v29;
    *(void *)(*(void *)(v7 + 56) + 8 * v14) = v15;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  __n128 v3 = v45;
  unint64_t v20 = v47;
  if ((v49 & 1) == 0) {
    goto LABEL_64;
  }
LABEL_60:
  uint64_t v44 = 1 << *(unsigned char *)(v5 + 32);
  if (v44 >= 64) {
    bzero(v20, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v20 = -1 << v44;
  }
  *(void *)(v5 + 16) = 0;
LABEL_64:
  uint64_t result = swift_release();
  *__n128 v3 = v7;
  return result;
}

uint64_t sub_21F86F77C(uint64_t a1, char a2)
{
  __n128 v3 = v2;
  uint64_t v5 = *v2;
  sub_21F76CA40(&qword_26AD45758);
  char v44 = a2;
  uint64_t v6 = sub_21FA267B0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v41 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  uint64_t v42 = v5;
  uint64_t v43 = v7;
  while (1)
  {
    if (v10)
    {
      uint64_t v45 = (v10 - 1) & v10;
      int64_t v46 = v13;
      unint64_t v18 = __clz(__rbit64(v10)) | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v19 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v19 >= v40) {
      break;
    }
    unint64_t v20 = v41[v19];
    int64_t v21 = v13 + 1;
    if (!v20)
    {
      int64_t v21 = v13 + 2;
      if (v13 + 2 >= v40) {
        goto LABEL_33;
      }
      unint64_t v20 = v41[v21];
      if (!v20)
      {
        uint64_t v22 = v13 + 3;
        if (v13 + 3 >= v40)
        {
LABEL_33:
          swift_release();
          __n128 v3 = v39;
          uint64_t v7 = v43;
          if ((v44 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v20 = v41[v22];
        if (!v20)
        {
          while (1)
          {
            int64_t v21 = v22 + 1;
            if (__OFADD__(v22, 1)) {
              goto LABEL_42;
            }
            if (v21 >= v40) {
              goto LABEL_33;
            }
            unint64_t v20 = v41[v21];
            ++v22;
            if (v20) {
              goto LABEL_30;
            }
          }
        }
        int64_t v21 = v13 + 3;
      }
    }
LABEL_30:
    uint64_t v45 = (v20 - 1) & v20;
    int64_t v46 = v21;
    unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
LABEL_31:
    uint64_t v27 = *(void *)(v5 + 56);
    uint64_t v28 = *(void *)(v5 + 48) + 72 * v18;
    uint64_t v29 = *(void *)v28;
    uint64_t v30 = *(void *)(v28 + 8);
    uint64_t v32 = *(void *)(v28 + 16);
    uint64_t v31 = *(void *)(v28 + 24);
    uint64_t v34 = *(void *)(v28 + 32);
    uint64_t v33 = *(void *)(v28 + 40);
    uint64_t v36 = *(void *)(v28 + 48);
    uint64_t v35 = *(void *)(v28 + 56);
    char v37 = *(unsigned char *)(v28 + 64);
    uint64_t v47 = *(void *)(v27 + 8 * v18);
    if ((v44 & 1) == 0)
    {
      sub_21F87BBAC(v29, v30, v32, v31, v34, v33, v36, v35, v37);
      swift_retain();
    }
    v49[0] = v29;
    v49[1] = v30;
    v49[2] = v32;
    v49[3] = v31;
    v49[4] = v34;
    v49[5] = v33;
    v49[6] = v36;
    v49[7] = v35;
    char v50 = v37;
    uint64_t v7 = v43;
    sub_21FA26A00();
    sub_21F97EE40((uint64_t)v48);
    uint64_t result = sub_21FA26A50();
    uint64_t v14 = -1 << *(unsigned char *)(v43 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v5 = v42;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v14) >> 6;
      uint64_t v5 = v42;
      do
      {
        if (++v16 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v25 = v16 == v24;
        if (v16 == v24) {
          unint64_t v16 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v11 + 8 * v16);
      }
      while (v26 == -1);
      unint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = sub_21F87BC34((uint64_t)v49, *(void *)(v43 + 48) + 72 * v17);
    int64_t v13 = v46;
    *(void *)(*(void *)(v43 + 56) + 8 * v17) = v47;
    ++*(void *)(v43 + 16);
    unint64_t v10 = v45;
  }
  swift_release();
  __n128 v3 = v39;
  if ((v44 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v41, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v41 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *__n128 v3 = v7;
  return result;
}

uint64_t sub_21F86FB08(uint64_t a1, char a2)
{
  __n128 v3 = v2;
  uint64_t v5 = *v2;
  sub_21F76CA40(&qword_26AD441E0);
  uint64_t result = sub_21FA267B0();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v19 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v21 >= v12) {
          goto LABEL_33;
        }
        unint64_t v22 = v30[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v22 = v30[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                __n128 v3 = v2;
                goto LABEL_40;
              }
              uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v30 = -1 << v29;
              }
              __n128 v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v22 = v30[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v12) {
                  goto LABEL_33;
                }
                unint64_t v22 = v30[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v11 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      long long v31 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v20);
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      sub_21FA26A00();
      sub_21FA26A30();
      sub_21FA26A30();
      uint64_t result = sub_21FA26A50();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        long long v18 = v31;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        long long v18 = v31;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_OWORD *)(*(void *)(v7 + 48) + 16 * v17) = v18;
      *(void *)(*(void *)(v7 + 56) + 8 * v17) = v28;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *__n128 v3 = v7;
  return result;
}

uint64_t sub_21F86FDF4(uint64_t a1, char a2)
{
  __n128 v3 = v2;
  uint64_t v5 = *v2;
  sub_21F76CA40(&qword_267EE7DD8);
  char v37 = a2;
  uint64_t v6 = sub_21FA267B0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          __n128 v3 = v35;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    sub_21FA26A00();
    sub_21FA25D30();
    uint64_t result = sub_21FA26A50();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v7 + 56) + 8 * v18) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  __n128 v3 = v35;
  int64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *__n128 v3 = v7;
  return result;
}

uint64_t sub_21F8700FC(uint64_t a1, char a2)
{
  return sub_21F870114(a1, a2, &qword_26AD452B8);
}

uint64_t sub_21F870108(uint64_t a1, char a2)
{
  return sub_21F870114(a1, a2, &qword_267EE7DD0);
}

uint64_t sub_21F870114(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_21F76CA40(a3);
  uint64_t result = sub_21FA267B0();
  uint64_t v8 = result;
  if (*(void *)(v6 + 16))
  {
    int64_t v9 = 0;
    unint64_t v10 = (uint64_t *)(v6 + 64);
    uint64_t v11 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v32 = -1 << v11;
    uint64_t v33 = v11;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v13 = v12 & *(void *)(v6 + 64);
    int64_t v34 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v21 = v20 | (v9 << 6);
      }
      else
      {
        int64_t v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v34) {
          goto LABEL_33;
        }
        unint64_t v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          int64_t v9 = v22 + 1;
          if (v22 + 1 >= v34) {
            goto LABEL_33;
          }
          unint64_t v23 = v10[v9];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v34)
            {
LABEL_33:
              if (a2)
              {
                if (v33 >= 64) {
                  bzero((void *)(v6 + 64), 8 * v34);
                }
                else {
                  *unint64_t v10 = v32;
                }
                *(void *)(v6 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v9 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v9 >= v34) {
                  goto LABEL_33;
                }
                unint64_t v23 = v10[v9];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v9 = v24;
          }
        }
LABEL_30:
        unint64_t v13 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      uint64_t v29 = 8 * v21;
      uint64_t v30 = *(void *)(*(void *)(v6 + 48) + v29);
      uint64_t v31 = *(void *)(*(void *)(v6 + 56) + v29);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = sub_21FA269F0();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v27 = v17 == v26;
          if (v17 == v26) {
            unint64_t v17 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v14 + 8 * v17);
        }
        while (v28 == -1);
        unint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 8 * v18;
      *(void *)(*(void *)(v8 + 48) + v19) = v30;
      *(void *)(*(void *)(v8 + 56) + v19) = v31;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v4 = v8;
  return result;
}

uint64_t sub_21F8703C8(uint64_t a1, char a2)
{
  __n128 v3 = v2;
  uint64_t v5 = *v2;
  sub_21F76CA40(&qword_267EE7DC8);
  uint64_t result = sub_21FA267B0();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v12) {
          goto LABEL_34;
        }
        unint64_t v18 = v30[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_34;
          }
          unint64_t v18 = v30[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if (a2)
              {
                uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
                if (v29 >= 64) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v18 = v30[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v12) {
                  goto LABEL_34;
                }
                unint64_t v18 = v30[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 48) + 8 * v16);
      uint64_t v21 = *(void *)(v5 + 56) + 48 * v16;
      if (a2) {
        sub_21F87B8B4(v21, (uint64_t)v31);
      }
      else {
        sub_21F87B858(v21, (uint64_t)v31);
      }
      uint64_t result = sub_21FA269F0();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(void *)(*(void *)(v7 + 48) + 8 * v14) = v20;
      uint64_t result = sub_21F87B8B4((uint64_t)v31, *(void *)(v7 + 56) + 48 * v14);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *__n128 v3 = v7;
  return result;
}

uint64_t sub_21F870690(uint64_t a1, char a2)
{
  return sub_21F8706A8(a1, a2, &qword_26AD44088);
}

uint64_t sub_21F87069C(uint64_t a1, char a2)
{
  return sub_21F8706A8(a1, a2, &qword_26AD442B0);
}

uint64_t sub_21F8706A8(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_21F76CA40(a3);
  uint64_t result = sub_21FA267B0();
  uint64_t v8 = result;
  if (*(void *)(v6 + 16))
  {
    int64_t v9 = 0;
    uint64_t v35 = (uint64_t *)(v6 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v6 + 64);
    int64_t v34 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v9 << 6);
      }
      else
      {
        int64_t v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        uint64_t result = v6 + 64;
        if (v21 >= v34) {
          goto LABEL_33;
        }
        unint64_t v22 = v35[v21];
        ++v9;
        if (!v22)
        {
          int64_t v9 = v21 + 1;
          if (v21 + 1 >= v34) {
            goto LABEL_33;
          }
          unint64_t v22 = v35[v9];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v34)
            {
LABEL_33:
              if (a2)
              {
                if (v33 >= 64) {
                  bzero(v35, 8 * v34);
                }
                else {
                  *uint64_t v35 = v32;
                }
                *(void *)(v6 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v35[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v9 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v9 >= v34) {
                  goto LABEL_33;
                }
                unint64_t v22 = v35[v9];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v9 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      uint64_t v28 = *(void *)(*(void *)(v6 + 48) + 8 * v20);
      uint64_t v29 = (uint64_t *)(*(void *)(v6 + 56) + 16 * v20);
      uint64_t v30 = *v29;
      uint64_t v31 = v29[1];
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = sub_21FA269F0();
      uint64_t v14 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(void *)(*(void *)(v8 + 48) + 8 * v17) = v28;
      unint64_t v18 = (void *)(*(void *)(v8 + 56) + 16 * v17);
      *unint64_t v18 = v30;
      v18[1] = v31;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v4 = v8;
  return result;
}

uint64_t sub_21F87095C(uint64_t a1, char a2)
{
  __n128 v3 = v2;
  uint64_t v5 = *v2;
  sub_21F76CA40(&qword_26AD46900);
  uint64_t result = sub_21FA267B0();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    int64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v10;
    uint64_t v32 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v33);
                }
                else {
                  *int64_t v9 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = 8 * v20;
      uint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      uint64_t result = sub_21FA269F0();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *__n128 v3 = v7;
  return result;
}

uint64_t sub_21F870C14(uint64_t a1, int a2)
{
  __n128 v3 = v2;
  uint64_t v5 = sub_21FA24320();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  int64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_21F76CA40(&qword_26AD462E0);
  int v42 = a2;
  uint64_t v10 = sub_21FA267B0();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    char v37 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    unint64_t v39 = (void *)(v9 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    int64_t v38 = (unint64_t)(v12 + 63) >> 6;
    int64_t v40 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    uint64_t v44 = v5;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v15)
      {
        unint64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v21 = v20 | (v18 << 6);
      }
      else
      {
        int64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v38) {
          goto LABEL_34;
        }
        unint64_t v23 = v39[v22];
        ++v18;
        if (!v23)
        {
          int64_t v18 = v22 + 1;
          if (v22 + 1 >= v38) {
            goto LABEL_34;
          }
          unint64_t v23 = v39[v18];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_34:
              swift_release();
              __n128 v3 = v37;
              if (v42)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v9 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v39 = -1 << v36;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v38) {
                  goto LABEL_34;
                }
                unint64_t v23 = v39[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v24;
          }
        }
LABEL_21:
        unint64_t v15 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      uint64_t v25 = *(void *)(v6 + 72);
      unint64_t v26 = *(void *)(v9 + 48) + v25 * v21;
      if (v42) {
        (*v43)(v8, v26, v44);
      }
      else {
        (*v40)(v8, v26, v44);
      }
      uint64_t v27 = v9;
      uint64_t v28 = *(void *)(*(void *)(v9 + 56) + 8 * v21);
      sub_21F87BD88();
      uint64_t result = sub_21FA25B60();
      uint64_t v29 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v16 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v19 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v43)(*(void *)(v11 + 48) + v25 * v19, v8, v44);
      *(void *)(*(void *)(v11 + 56) + 8 * v19) = v28;
      ++*(void *)(v11 + 16);
      uint64_t v9 = v27;
    }
  }
  uint64_t result = swift_release();
  *__n128 v3 = v11;
  return result;
}

uint64_t sub_21F871008(uint64_t a1, int a2)
{
  __n128 v3 = v2;
  uint64_t v5 = type metadata accessor for ChartContentRenderContext.Bins(0);
  uint64_t v37 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_21F76CA40(&qword_26AD46A28);
  int v38 = a2;
  uint64_t result = sub_21FA267B0();
  uint64_t v10 = result;
  if (*(void *)(v8 + 16))
  {
    BOOL v34 = v2;
    int64_t v11 = 0;
    uint64_t v12 = *(void *)(v8 + 64);
    uint64_t v36 = (void *)(v8 + 64);
    uint64_t v13 = 1 << *(unsigned char *)(v8 + 32);
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v12;
    int64_t v35 = (unint64_t)(v13 + 63) >> 6;
    uint64_t v16 = result + 64;
    while (1)
    {
      if (v15)
      {
        unint64_t v18 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v19 = v18 | (v11 << 6);
      }
      else
      {
        int64_t v20 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v36;
        if (v20 >= v35) {
          goto LABEL_34;
        }
        unint64_t v21 = v36[v20];
        ++v11;
        if (!v21)
        {
          int64_t v11 = v20 + 1;
          if (v20 + 1 >= v35) {
            goto LABEL_34;
          }
          unint64_t v21 = v36[v11];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v35)
            {
LABEL_34:
              if ((v38 & 1) == 0)
              {
                uint64_t result = swift_release();
                __n128 v3 = v34;
                goto LABEL_41;
              }
              uint64_t v33 = 1 << *(unsigned char *)(v8 + 32);
              if (v33 >= 64) {
                bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v36 = -1 << v33;
              }
              __n128 v3 = v34;
              *(void *)(v8 + 16) = 0;
              break;
            }
            unint64_t v21 = v36[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v11 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_43;
                }
                if (v11 >= v35) {
                  goto LABEL_34;
                }
                unint64_t v21 = v36[v11];
                ++v22;
                if (v21) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v11 = v22;
          }
        }
LABEL_21:
        unint64_t v15 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v11 << 6);
      }
      char v23 = *(unsigned char *)(*(void *)(v8 + 48) + v19);
      uint64_t v24 = *(void *)(v37 + 72);
      uint64_t v25 = *(void *)(v8 + 56) + v24 * v19;
      if (v38) {
        sub_21F87BEB4(v25, (uint64_t)v7, type metadata accessor for ChartContentRenderContext.Bins);
      }
      else {
        sub_21F87BE4C(v25, (uint64_t)v7, type metadata accessor for ChartContentRenderContext.Bins);
      }
      sub_21FA26A00();
      sub_21FA26A10();
      uint64_t result = sub_21FA26A50();
      uint64_t v26 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v16 + 8 * (v27 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v16 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v29 = 0;
        unint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v31 = v28 == v30;
          if (v28 == v30) {
            unint64_t v28 = 0;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v16 + 8 * v28);
        }
        while (v32 == -1);
        unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(void *)(v16 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(unsigned char *)(*(void *)(v10 + 48) + v17) = v23;
      uint64_t result = sub_21F87BEB4((uint64_t)v7, *(void *)(v10 + 56) + v24 * v17, type metadata accessor for ChartContentRenderContext.Bins);
      ++*(void *)(v10 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *__n128 v3 = v10;
  return result;
}

uint64_t sub_21F8713AC(uint64_t a1, char a2)
{
  __n128 v3 = v2;
  uint64_t v5 = *v2;
  sub_21F76CA40(&qword_26AD462F8);
  char v43 = a2;
  uint64_t result = sub_21FA267B0();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    unint64_t v41 = (void *)(v5 + 64);
    uint64_t v42 = v5;
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    unint64_t v39 = v3;
    int64_t v40 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v44 = (v11 - 1) & v11;
        int64_t v45 = v8;
        unint64_t v19 = __clz(__rbit64(v11)) | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v41;
        if (v20 >= v40) {
          goto LABEL_33;
        }
        unint64_t v21 = v41[v20];
        int64_t v22 = v8 + 1;
        if (!v21)
        {
          int64_t v22 = v8 + 2;
          if (v8 + 2 >= v40) {
            goto LABEL_33;
          }
          unint64_t v21 = v41[v22];
          if (!v21)
          {
            uint64_t v23 = v8 + 3;
            if (v8 + 3 >= v40)
            {
LABEL_33:
              if ((v43 & 1) == 0)
              {
                uint64_t result = swift_release();
                __n128 v3 = v39;
                goto LABEL_40;
              }
              uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
              if (v38 >= 64) {
                bzero(v41, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *unint64_t v41 = -1 << v38;
              }
              __n128 v3 = v39;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v41[v23];
            if (!v21)
            {
              while (1)
              {
                int64_t v22 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v22 >= v40) {
                  goto LABEL_33;
                }
                unint64_t v21 = v41[v22];
                ++v23;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v22 = v8 + 3;
          }
        }
LABEL_30:
        uint64_t v44 = (v21 - 1) & v21;
        int64_t v45 = v22;
        unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
      }
      uint64_t v28 = *(void *)(v5 + 56);
      char v29 = (uint64_t *)(*(void *)(v5 + 48) + (v19 << 6));
      uint64_t v31 = *v29;
      uint64_t v30 = v29[1];
      uint64_t v32 = v29[2];
      uint64_t v33 = v29[3];
      uint64_t v34 = v29[4];
      uint64_t v35 = v29[5];
      uint64_t v37 = v29[6];
      uint64_t v36 = v29[7];
      uint64_t v46 = *(void *)(v28 + 8 * v19);
      if ((v43 & 1) == 0) {
        sub_21F7E0F38(v31, v30, v32, v33, v34, v35, v37);
      }
      sub_21FA26A00();
      uint64_t result = sub_21FA26A50();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
        uint64_t v17 = v31;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v13) >> 6;
        uint64_t v17 = v31;
        do
        {
          if (++v15 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v26 = v15 == v25;
          if (v15 == v25) {
            unint64_t v15 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v12 + 8 * v15);
        }
        while (v27 == -1);
        unint64_t v16 = __clz(__rbit64(~v27)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      unint64_t v18 = (uint64_t *)(*(void *)(v7 + 48) + (v16 << 6));
      *unint64_t v18 = v17;
      v18[1] = v30;
      void v18[2] = v32;
      v18[3] = v33;
      void v18[4] = v34;
      v18[5] = v35;
      v18[6] = v37;
      v18[7] = v36;
      int64_t v8 = v45;
      *(void *)(*(void *)(v7 + 56) + 8 * v16) = v46;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v42;
      unint64_t v11 = v44;
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *__n128 v3 = v7;
  return result;
}

unint64_t sub_21F8716FC(uint64_t a1, char a2)
{
  __n128 v3 = v2;
  uint64_t v5 = *v2;
  sub_21F76CA40(&qword_26AD45410);
  uint64_t v6 = (void *)sub_21FA267B0();
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
    int64_t v8 = (void *)(v5 + 64);
    uint64_t v9 = -1;
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    unint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v15 = v14 | (v13 << 6);
      }
      else
      {
        int64_t v16 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v16 >= v11) {
          goto LABEL_22;
        }
        unint64_t v17 = v8[v16];
        ++v13;
        if (!v17)
        {
          int64_t v13 = v16 + 1;
          if (v16 + 1 >= v11) {
            goto LABEL_22;
          }
          unint64_t v17 = v8[v13];
          if (!v17)
          {
            int64_t v18 = v16 + 2;
            if (v18 >= v11)
            {
LABEL_22:
              swift_release();
              if (a2)
              {
                uint64_t v22 = 1 << *(unsigned char *)(v5 + 32);
                if (v22 > 63) {
                  bzero((void *)(v5 + 64), ((unint64_t)(v22 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v8 = -1 << v22;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v17 = v8[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v13 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_29;
                }
                if (v13 >= v11) {
                  goto LABEL_22;
                }
                unint64_t v17 = v8[v13];
                ++v18;
                if (v17) {
                  goto LABEL_19;
                }
              }
            }
            int64_t v13 = v18;
          }
        }
LABEL_19:
        unint64_t v10 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v13 << 6);
      }
      uint64_t v19 = 8 * v15;
      uint64_t v20 = *(void *)(*(void *)(v5 + 48) + v19);
      uint64_t v21 = *(void *)(*(void *)(v5 + 56) + v19);
      if ((a2 & 1) == 0) {
        uint64_t v20 = swift_bridgeObjectRetain();
      }
      unint64_t result = sub_21F876234(v20, v21, v6);
    }
  }
  unint64_t result = swift_release();
  *__n128 v3 = v6;
  return result;
}

uint64_t sub_21F8718DC(uint64_t a1, char a2)
{
  __n128 v3 = v2;
  uint64_t v5 = *v2;
  sub_21F76CA40(&qword_26AD468E8);
  char v46 = a2;
  uint64_t v6 = sub_21FA267B0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v44 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v42 = v2;
  int64_t v43 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      if (v46) {
        goto LABEL_10;
      }
      goto LABEL_23;
    }
    int64_t v30 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v30 >= v43) {
      break;
    }
    uint64_t v31 = v44;
    unint64_t v32 = v44[v30];
    ++v13;
    if (!v32)
    {
      int64_t v13 = v30 + 1;
      if (v30 + 1 >= v43) {
        goto LABEL_33;
      }
      unint64_t v32 = v44[v13];
      if (!v32)
      {
        int64_t v33 = v30 + 2;
        if (v33 >= v43)
        {
LABEL_33:
          swift_release();
          __n128 v3 = v42;
          if ((v46 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v32 = v44[v33];
        if (!v32)
        {
          while (1)
          {
            int64_t v13 = v33 + 1;
            if (__OFADD__(v33, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v43) {
              goto LABEL_33;
            }
            unint64_t v32 = v44[v13];
            ++v33;
            if (v32) {
              goto LABEL_22;
            }
          }
        }
        int64_t v13 = v33;
      }
    }
LABEL_22:
    unint64_t v10 = (v32 - 1) & v32;
    unint64_t v17 = __clz(__rbit64(v32)) + (v13 << 6);
    if (v46)
    {
LABEL_10:
      sub_21F7BB81C(*(void *)(v5 + 48) + 152 * v17, (uint64_t)__src);
      int64_t v18 = (uint64_t *)(*(void *)(v5 + 56) + 304 * v17);
      uint64_t v54 = *v18;
      uint64_t v19 = v18[2];
      uint64_t v20 = v18[3];
      uint64_t v21 = v18[4];
      uint64_t v22 = v18[5];
      uint64_t v23 = v18[8];
      uint64_t v47 = v18[7];
      uint64_t v24 = v18[9];
      uint64_t v48 = v18[10];
      uint64_t v49 = v18[6];
      uint64_t v25 = v18[12];
      uint64_t v51 = v18[1];
      uint64_t v52 = v18[11];
      uint64_t v27 = v18[13];
      uint64_t v26 = v18[14];
      uint64_t v50 = v18[15];
      sub_21F815840((uint64_t)(v18 + 16), (uint64_t)__dst);
      uint64_t v53 = v18[35];
      uint64_t v28 = v18[36];
      uint64_t v55 = v18[37];
      sub_21F7BB81C((uint64_t)__src, (uint64_t)v58);
      char v29 = __dst;
      goto LABEL_24;
    }
LABEL_23:
    sub_21F7BB81C(*(void *)(v5 + 48) + 152 * v17, (uint64_t)__src);
    memcpy(__dst, (const void *)(*(void *)(v5 + 56) + 304 * v17), sizeof(__dst));
    uint64_t v55 = __dst[37];
    uint64_t v28 = __dst[36];
    uint64_t v27 = __dst[13];
    uint64_t v26 = __dst[14];
    uint64_t v23 = __dst[8];
    uint64_t v24 = __dst[9];
    uint64_t v25 = __dst[12];
    uint64_t v52 = __dst[11];
    uint64_t v53 = __dst[35];
    uint64_t v49 = __dst[6];
    uint64_t v50 = __dst[15];
    uint64_t v47 = __dst[7];
    uint64_t v48 = __dst[10];
    uint64_t v19 = __dst[2];
    uint64_t v20 = __dst[3];
    uint64_t v21 = __dst[4];
    uint64_t v22 = __dst[5];
    uint64_t v54 = __dst[0];
    uint64_t v51 = __dst[1];
    sub_21F7C618C(__src, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
    sub_21F7F3F44((uint64_t)__dst);
    sub_21F7BB81C((uint64_t)__src, (uint64_t)v58);
    char v29 = &__dst[16];
LABEL_24:
    sub_21F815840((uint64_t)v29, (uint64_t)v59);
    sub_21F7BB81C((uint64_t)v58, (uint64_t)v60);
    sub_21FA26A00();
    sub_21F8DBD4C((uint64_t)__dst);
    uint64_t result = sub_21FA26A50();
    uint64_t v34 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v11 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v35) & ~*(void *)(v11 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v11 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v14 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    __src[0] = v51;
    __src[1] = v19;
    __src[2] = v20;
    __src[3] = v21;
    __src[4] = v22;
    __src[5] = v49;
    __src[6] = v47;
    __src[7] = v23;
    __src[8] = v24;
    __src[9] = v48;
    __src[10] = v52;
    __src[11] = v25;
    __src[12] = v27;
    __src[13] = v26;
    __src[14] = v50;
    sub_21F815840((uint64_t)v59, (uint64_t)&__src[15]);
    __src[34] = v53;
    __src[35] = v28;
    memcpy(__dst, __src, 0x120uLL);
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    sub_21F7BB81C((uint64_t)v60, *(void *)(v7 + 48) + 152 * v14);
    unint64_t v15 = (void *)(*(void *)(v7 + 56) + 304 * v14);
    *unint64_t v15 = v54;
    uint64_t result = (uint64_t)memcpy(v15 + 1, __dst, 0x120uLL);
    v15[37] = v55;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  __n128 v3 = v42;
  uint64_t v31 = v44;
  if ((v46 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v41 = 1 << *(unsigned char *)(v5 + 32);
  if (v41 >= 64) {
    bzero(v31, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v31 = -1 << v41;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *__n128 v3 = v7;
  return result;
}

uint64_t sub_21F871DDC(uint64_t a1, char a2)
{
  __n128 v3 = v2;
  uint64_t v5 = *v2;
  sub_21F76CA40(&qword_26AD468F8);
  char v41 = a2;
  uint64_t v6 = sub_21FA267B0();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    BOOL v39 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v38 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v40 = v5;
    while (1)
    {
      if (v10)
      {
        unint64_t v19 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v42 = v13;
        unint64_t v20 = v19 | (v13 << 6);
      }
      else
      {
        int64_t v21 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v21 >= v38) {
          goto LABEL_33;
        }
        unint64_t v22 = v39[v21];
        int64_t v23 = v13 + 1;
        if (!v22)
        {
          int64_t v23 = v13 + 2;
          if (v13 + 2 >= v38) {
            goto LABEL_33;
          }
          unint64_t v22 = v39[v23];
          if (!v22)
          {
            uint64_t v24 = v13 + 3;
            if (v13 + 3 >= v38)
            {
LABEL_33:
              swift_release();
              __n128 v3 = v2;
              if (v41)
              {
                uint64_t v37 = 1 << *(unsigned char *)(v5 + 32);
                if (v37 >= 64) {
                  bzero(v39, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *BOOL v39 = -1 << v37;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v39[v24];
            if (!v22)
            {
              while (1)
              {
                int64_t v23 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v23 >= v38) {
                  goto LABEL_33;
                }
                unint64_t v22 = v39[v23];
                ++v24;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v23 = v13 + 3;
          }
        }
LABEL_30:
        unint64_t v10 = (v22 - 1) & v22;
        int64_t v42 = v23;
        unint64_t v20 = __clz(__rbit64(v22)) + (v23 << 6);
      }
      uint64_t v29 = *(void *)(v5 + 56);
      uint64_t v30 = *(void *)(v5 + 48) + 48 * v20;
      uint64_t v32 = *(void *)v30;
      uint64_t v31 = *(void *)(v30 + 8);
      char v33 = *(unsigned char *)(v30 + 16);
      uint64_t v35 = *(void *)(v30 + 24);
      uint64_t v34 = *(void *)(v30 + 32);
      char v36 = *(unsigned char *)(v30 + 40);
      uint64_t v43 = *(void *)(v29 + 8 * v20);
      if ((v41 & 1) == 0)
      {
        sub_21F7652C0(v32, v31, v33);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      sub_21FA26A00();
      sub_21F7D478C((uint64_t)v44, v34);
      sub_21FA26A20();
      uint64_t result = sub_21FA26A50();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v16 == v26;
          if (v16 == v26) {
            unint64_t v16 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = *(void *)(v7 + 48) + 48 * v17;
      *(void *)uint64_t v18 = v32;
      *(void *)(v18 + 8) = v31;
      *(unsigned char *)(v18 + 16) = v33;
      *(void *)(v18 + 24) = v35;
      *(void *)(v18 + 32) = v34;
      *(unsigned char *)(v18 + 40) = v36;
      *(void *)(*(void *)(v7 + 56) + 8 * v17) = v43;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v40;
      int64_t v13 = v42;
    }
  }
  uint64_t result = swift_release();
  *__n128 v3 = v7;
  return result;
}

uint64_t sub_21F872134(uint64_t a1, char a2)
{
  __n128 v3 = v2;
  uint64_t v5 = *v2;
  sub_21F76CA40(&qword_26AD46308);
  uint64_t result = sub_21FA267B0();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v35 = a2;
    uint64_t v34 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        unint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v20 = v9[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                __n128 v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v32;
              }
              __n128 v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 8 * v18;
      uint64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      uint64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = sub_21FA269F0();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *__n128 v3 = v7;
  return result;
}

uint64_t sub_21F8723E0(uint64_t a1, char a2)
{
  __n128 v3 = v2;
  uint64_t v5 = *v2;
  sub_21F76CA40(qword_267EE7DF0);
  uint64_t result = sub_21FA267B0();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v32 = a2;
    int64_t v8 = 0;
    uint64_t v34 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v33) {
          goto LABEL_31;
        }
        unint64_t v18 = v34[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v33) {
            goto LABEL_31;
          }
          unint64_t v18 = v34[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v33)
            {
LABEL_31:
              if ((v32 & 1) == 0)
              {
                uint64_t result = swift_release();
                __n128 v3 = v2;
                goto LABEL_38;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v34 = -1 << v31;
              }
              __n128 v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v33) {
                  goto LABEL_31;
                }
                unint64_t v18 = v34[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      unint64_t v20 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v16);
      uint64_t v22 = *v20;
      uint64_t v21 = v20[1];
      uint64_t v23 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
      sub_21FA26A00();
      sub_21FA26A30();
      sub_21FA26A30();
      uint64_t result = sub_21FA26A50();
      uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v12 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v25) & ~*(void *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v12 + 8 * v26);
        }
        while (v30 == -1);
        unint64_t v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = (void *)(*(void *)(v7 + 48) + 16 * v13);
      *uint64_t v14 = v22;
      v14[1] = v21;
      *(void *)(*(void *)(v7 + 56) + 8 * v13) = v23;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *__n128 v3 = v7;
  return result;
}

uint64_t sub_21F8726C8(uint64_t a1, char a2)
{
  __n128 v3 = v2;
  uint64_t v5 = *v2;
  sub_21F76CA40(&qword_26AD462F0);
  char v35 = a2;
  uint64_t result = sub_21FA267B0();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v34 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v33) {
          goto LABEL_33;
        }
        unint64_t v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v21 = v34[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                __n128 v3 = v2;
                goto LABEL_40;
              }
              uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
              if (v32 >= 64) {
                bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v34 = -1 << v32;
              }
              __n128 v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                unint64_t v21 = v34[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      char v27 = *(unsigned char *)(*(void *)(v5 + 48) + v19);
      uint64_t v28 = *(void *)(v5 + 56) + 56 * v19;
      char v29 = *(unsigned char *)v28;
      uint64_t v30 = *(void *)(v28 + 24);
      uint64_t v31 = *(void *)(v28 + 32);
      long long v36 = *(_OWORD *)(v28 + 40);
      long long v37 = *(_OWORD *)(v28 + 8);
      if ((v35 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      sub_21FA26A00();
      sub_21FA26A10();
      uint64_t result = sub_21FA26A50();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(unsigned char *)(*(void *)(v7 + 48) + v16) = v27;
      uint64_t v17 = *(void *)(v7 + 56) + 56 * v16;
      *(unsigned char *)uint64_t v17 = v29;
      *(_OWORD *)(v17 + 8) = v37;
      *(void *)(v17 + 24) = v30;
      *(void *)(v17 + 32) = v31;
      *(_OWORD *)(v17 + 40) = v36;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *__n128 v3 = v7;
  return result;
}

uint64_t sub_21F8729EC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CalendarCache.Key(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = (void *)*v3;
  unint64_t v13 = sub_21F9157C0(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t result = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v19 = *v4;
    if (v17)
    {
LABEL_8:
      *(void *)(v19[7] + 8 * v13) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v18 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_21F8771C8();
    goto LABEL_7;
  }
  sub_21F86D058(result, a3 & 1);
  uint64_t result = sub_21F9157C0(a2);
  if ((v17 & 1) != (v20 & 1))
  {
LABEL_14:
    uint64_t result = sub_21FA26990();
    __break(1u);
    return result;
  }
  unint64_t v13 = result;
  unint64_t v19 = *v4;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  sub_21F87BE4C(a2, (uint64_t)v10, type metadata accessor for CalendarCache.Key);
  return sub_21F876978(v13, (uint64_t)v10, a1, v19);
}

uint64_t sub_21F872B60(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_21F77E624(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_21F877640();
LABEL_7:
    unint64_t v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v19 = 8 * v10;
    *(void *)(v16[6] + v19) = a2;
    *(void *)(v16[7] + v19) = a1;
    uint64_t v20 = v16[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (!v21)
    {
      void v16[2] = v22;
      return result;
    }
    goto LABEL_14;
  }
  sub_21F86D424(result, a3 & 1);
  uint64_t result = sub_21F77E624(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    unint64_t v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = sub_21FA26990();
  __break(1u);
  return result;
}

uint64_t sub_21F872C9C(uint64_t a1, uint64_t a2, unsigned __int8 a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_21F75BD50(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_21F8785CC();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = (void *)(v18[7] + 16 * v12);
      swift_release();
      uint64_t result = swift_release();
      *uint64_t v19 = a1;
      v19[1] = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(unsigned char *)(v18[6] + v12) = a3;
    BOOL v21 = (void *)(v18[7] + 16 * v12);
    *BOOL v21 = a1;
    v21[1] = a2;
    uint64_t v22 = v18[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (!v23)
    {
      void v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_21F86DCBC(result, a4 & 1);
  uint64_t result = sub_21F75BD50(a3);
  if ((v16 & 1) == (v20 & 1))
  {
    unint64_t v12 = result;
    char v18 = (void *)*v5;
    if (v16) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = sub_21FA26990();
  __break(1u);
  return result;
}

uint64_t sub_21F872DE4(uint64_t a1, unsigned __int8 a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_21F75BD50(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_21F878EBC();
LABEL_7:
    char v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(unsigned char *)(v16[6] + v10) = a2;
    *(void *)(v16[7] + 8 * v10) = a1;
    uint64_t v19 = v16[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
      void v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_21F86EC3C(result, a3 & 1);
  uint64_t result = sub_21F75BD50(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    char v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = sub_21FA26990();
  __break(1u);
  return result;
}

uint64_t sub_21F872F1C(uint64_t a1, unsigned __int8 a2, char a3)
{
  return sub_21F783130(a1, a2, a3, &qword_26AD46300);
}

uint64_t sub_21F872F28(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_21F78C550(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_21F879560();
LABEL_7:
    char v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      *(void *)(v16[7] + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v18 = 8 * v10;
    *(void *)(v16[6] + v18) = a2;
    *(void *)(v16[7] + v18) = a1;
    uint64_t v19 = v16[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
      void v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_21F86EF10(result, a3 & 1);
  uint64_t result = sub_21F78C550(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    unint64_t v10 = result;
    char v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = sub_21FA26990();
  __break(1u);
  return result;
}

uint64_t sub_21F873058(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_21F9158A4(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    char v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_21F8796F0();
    goto LABEL_7;
  }
  sub_21F86F1B8(v13, a3 & 1);
  unint64_t v19 = sub_21F9158A4(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    uint64_t result = sub_21FA26990();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  char v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  sub_21F876AE4(v10, a2, a1, v16);

  return sub_21F87BC90(a2);
}

uint64_t sub_21F873188(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_21F915910(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    char v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_21F8798C4();
    goto LABEL_7;
  }
  sub_21F86F77C(v13, a3 & 1);
  unint64_t v19 = sub_21F915910(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    uint64_t result = sub_21FA26990();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  char v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  sub_21F876B64(v10, a2, a1, v16);

  return sub_21F87BB60(a2);
}

uint64_t sub_21F8732B8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_21F78C550(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_21F87A340();
LABEL_7:
    char v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v19 = 8 * v10;
    *(void *)(v16[6] + v19) = a2;
    *(void *)(v16[7] + v19) = a1;
    uint64_t v20 = v16[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (!v21)
    {
      void v16[2] = v22;
      return result;
    }
    goto LABEL_14;
  }
  sub_21F87095C(result, a3 & 1);
  uint64_t result = sub_21F78C550(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    char v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = sub_21FA26990();
  __break(1u);
  return result;
}

uint64_t sub_21F8733F4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = sub_21FA24320();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v12 = (void *)*v3;
  unint64_t v14 = sub_21F9159FC(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      *(void *)(v20[7] + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_21F87A4E4();
    goto LABEL_7;
  }
  sub_21F870C14(result, a3 & 1);
  uint64_t result = sub_21F9159FC(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = sub_21FA26990();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_21F876C2C(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_21F873590(uint64_t a1, char a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_21F75BD50(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_21F87A778();
      goto LABEL_7;
    }
    sub_21F871008(v13, a3 & 1);
    unint64_t v20 = sub_21F75BD50(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      unint64_t v10 = v20;
      BOOL v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = sub_21FA26990();
    __break(1u);
    return result;
  }
LABEL_7:
  BOOL v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7];
    uint64_t v18 = v17
        + *(void *)(*(void *)(type metadata accessor for ChartContentRenderContext.Bins(0) - 8) + 72) * v10;
    return sub_21F87BDE8(a1, v18);
  }
LABEL_13:

  return sub_21F876CE4(v10, a2, a1, v16);
}

void *sub_21F8736DC(uint64_t *a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v10 = a1[2];
  uint64_t v9 = a1[3];
  uint64_t v12 = a1[4];
  uint64_t v11 = a1[5];
  uint64_t v14 = a1[6];
  uint64_t v13 = a1[7];
  uint64_t v29 = a1[8];
  uint64_t v30 = a1[9];
  uint64_t v31 = a1[10];
  uint64_t v32 = a1[11];
  uint64_t v33 = a1[12];
  uint64_t v34 = a1[13];
  uint64_t v35 = a1[14];
  uint64_t v36 = a1[15];
  uint64_t v37 = a1[16];
  uint64_t v38 = a1[17];
  uint64_t v39 = a1[18];
  uint64_t v40 = a1[19];
  uint64_t v41 = a1[20];
  uint64_t v42 = a1[21];
  uint64_t v43 = a1[22];
  uint64_t v44 = a1[23];
  uint64_t v46 = a1[24];
  uint64_t v47 = a1[25];
  uint64_t v51 = a1[27];
  uint64_t v52 = a1[28];
  uint64_t v15 = a1[36];
  uint64_t v45 = a1[30];
  uint64_t v48 = a1[31];
  uint64_t v49 = a1[26];
  uint64_t v50 = a1[32];
  uint64_t v53 = a1[33];
  uint64_t v54 = a1[29];
  uint64_t v55 = a1[34];
  uint64_t v56 = a1[35];
  uint64_t v57 = a1[37];
  uint64_t v16 = *v3;
  unint64_t v18 = sub_21F9161A8((uint64_t)a2);
  uint64_t v19 = *(void *)(v16 + 16);
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
  }
  else
  {
    char v22 = v17;
    uint64_t v23 = *(void *)(v16 + 24);
    if (v23 >= v21 && (a3 & 1) != 0)
    {
LABEL_7:
      if (v22)
      {
LABEL_8:
        uint64_t v24 = (uint64_t *)(*(void *)(*v4 + 56) + 304 * v18);
        memcpy(__dst, v24, sizeof(__dst));
        uint64_t result = (void *)sub_21F87B910((uint64_t)__dst);
        *uint64_t v24 = v8;
        v24[1] = v7;
        v24[6] = v14;
        v24[7] = v13;
        v24[2] = v10;
        v24[3] = v9;
        v24[4] = v12;
        v24[5] = v11;
        v24[8] = v29;
        v24[9] = v30;
        v24[10] = v31;
        v24[11] = v32;
        v24[12] = v33;
        v24[13] = v34;
        v24[14] = v35;
        v24[15] = v36;
        v24[16] = v37;
        v24[17] = v38;
        v24[18] = v39;
        v24[19] = v40;
        v24[20] = v41;
        v24[21] = v42;
        v24[22] = v43;
        v24[23] = v44;
        v24[24] = v46;
        v24[25] = v47;
        v24[26] = v49;
        v24[27] = v51;
        v24[28] = v52;
        v24[29] = v54;
        v24[30] = v45;
        v24[31] = v48;
        v24[32] = v50;
        v24[33] = v53;
        v24[34] = v55;
        v24[35] = v56;
        v24[36] = v15;
        v24[37] = v57;
        return result;
      }
      goto LABEL_11;
    }
    if (v23 >= v21 && (a3 & 1) == 0)
    {
      sub_21F87AD58();
      goto LABEL_7;
    }
    sub_21F8718DC(v21, a3 & 1);
    unint64_t v26 = sub_21F9161A8((uint64_t)a2);
    if ((v22 & 1) == (v27 & 1))
    {
      unint64_t v18 = v26;
      if (v22) {
        goto LABEL_8;
      }
LABEL_11:
      v59[0] = v8;
      v59[1] = v7;
      v59[6] = v14;
      v59[7] = v13;
      uint64_t v28 = (void *)*v4;
      v59[2] = v10;
      _OWORD v59[3] = v9;
      v59[4] = v12;
      v59[5] = v11;
      v59[8] = v29;
      v59[9] = v30;
      v59[10] = v31;
      v59[11] = v32;
      v59[12] = v33;
      v59[13] = v34;
      v59[14] = v35;
      v59[15] = v36;
      v59[16] = v37;
      v59[17] = v38;
      v59[18] = v39;
      v59[19] = v40;
      v59[20] = v41;
      v59[21] = v42;
      v59[22] = v43;
      v59[23] = v44;
      v59[24] = v46;
      v59[25] = v47;
      v59[26] = v49;
      v59[27] = v51;
      v59[28] = v52;
      v59[29] = v54;
      v59[30] = v45;
      v59[31] = v48;
      v59[32] = v50;
      v59[33] = v53;
      v59[34] = v55;
      v59[35] = v56;
      v59[36] = v15;
      v59[37] = v57;
      sub_21F876D8C(v18, (uint64_t)a2, v59, v28);
      return sub_21F7C618C(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
    }
  }
  uint64_t result = (void *)sub_21FA26990();
  __break(1u);
  return result;
}

uint64_t sub_21F873ACC(uint64_t a1, char a2, double a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_21F78C550(a1);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a2 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a2 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_21F87B15C();
LABEL_7:
    uint64_t v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      *(double *)(v16[7] + 8 * v10) = a3;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v18 = 8 * v10;
    *(void *)(v16[6] + v18) = a1;
    *(double *)(v16[7] + v18) = a3;
    uint64_t v19 = v16[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
      void v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_21F872134(result, a2 & 1);
  uint64_t result = sub_21F78C550(a1);
  if ((v14 & 1) == (v17 & 1))
  {
    unint64_t v10 = result;
    uint64_t v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = sub_21FA26990();
  __break(1u);
  return result;
}

uint64_t sub_21F873BF8()
{
  sub_21F7B9430(v0[7], v0[8], v0[9]);

  return MEMORY[0x270FA0238](v0, 192, 7);
}

uint64_t sub_21F873C38()
{
  uint64_t result = type metadata accessor for AxisValueLabel.LabelContent();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_21F873D00(unint64_t a1, unint64_t a2, uint64_t a3)
{
  __n128 v3 = (void *)a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = v5 & 0xF8 | 7;
  uint64_t v7 = ~v6;
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v8 = 16;
  }
  else {
    uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if ((v5 & 0x1000F8) != 0 || (((v5 & 0xF8) + 112) & (unint64_t)~v6) + v8 + 1 > 0x18)
  {
    uint64_t v10 = *(void *)a2;
    *__n128 v3 = *(void *)a2;
    __n128 v3 = (void *)(v10 + ((v6 + 16) & v7));
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    unint64_t v11 = a1 & 0xFFFFFFFFFFFFFFF8;
    long long v12 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    *(unsigned char *)(v11 + 24) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
    *(_OWORD *)(v11 + 8) = v12;
    long long v13 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
    *(unsigned char *)(v11 + 48) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
    *(_OWORD *)(v11 + 32) = v13;
    long long v14 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
    *(_DWORD *)(v11 + 71) = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 71);
    *(_OWORD *)(v11 + 56) = v14;
    *(unsigned char *)(v11 + 75) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 75);
    *(unsigned char *)(v11 + 76) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 76);
    unint64_t v15 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 84) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v16 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 84) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v17 = *(void *)v16;
    *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
    *(void *)unint64_t v15 = v17;
    unint64_t v18 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 100) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v19 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 100) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v20 = *(void *)v19;
    *(unsigned char *)(v18 + 8) = *(unsigned char *)(v19 + 8);
    *(void *)unint64_t v18 = v20;
    uint64_t v21 = (void *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 116) & v7);
    char v22 = (void *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 116) & v7);
    unsigned int v23 = *((unsigned __int8 *)v22 + v8);
    unsigned int v24 = v23 - 2;
    if (v23 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v25 = v8;
      }
      else {
        uint64_t v25 = 4;
      }
      switch(v25)
      {
        case 1:
          int v26 = *(unsigned __int8 *)v22;
          goto LABEL_19;
        case 2:
          int v26 = *(unsigned __int16 *)v22;
          goto LABEL_19;
        case 3:
          int v26 = *(unsigned __int16 *)v22 | (*((unsigned __int8 *)v22 + 2) << 16);
          goto LABEL_19;
        case 4:
          int v26 = *(_DWORD *)v22;
LABEL_19:
          int v27 = (v26 | (v24 << (8 * v8))) + 2;
          unsigned int v23 = v26 + 2;
          if (v8 < 4) {
            unsigned int v23 = v27;
          }
          break;
        default:
          break;
      }
    }
    if (v23 == 1)
    {
      (*(void (**)(void *))(v4 + 16))(v21);
      *((unsigned char *)v21 + v8) = 1;
      return v3;
    }
    if (v23)
    {
      memcpy(v21, v22, v8 + 1);
      return v3;
    }
    uint64_t v28 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v28;
    *((unsigned char *)v21 + v8) = 0;
  }
  swift_retain();
  return v3;
}

unsigned __int8 *sub_21F873F44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = *(_DWORD *)(v2 + 80) & 0xF8 | 7;
  uint64_t result = (unsigned __int8 *)(((((a1 & 0xFFFFFFFFFFFFFFF8) + 100) & 0xFFFFFFFFFFFFFFF8) + v3 + 9) & ~v3);
  unint64_t v5 = *(void *)(v2 + 64);
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  unsigned int v6 = result[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *result;
        goto LABEL_12;
      case 2:
        int v9 = *(unsigned __int16 *)result;
        goto LABEL_12;
      case 3:
        int v9 = *(unsigned __int16 *)result | (result[2] << 16);
        goto LABEL_12;
      case 4:
        int v9 = *(_DWORD *)result;
LABEL_12:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1) {
    return (unsigned __int8 *)(*(uint64_t (**)(void))(v2 + 8))();
  }
  if (!v6) {
    return (unsigned __int8 *)swift_release();
  }
  return result;
}

unint64_t sub_21F874070(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  long long v5 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(unsigned char *)(v4 + 24) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_OWORD *)(v4 + 8) = v5;
  long long v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(unsigned char *)(v4 + 48) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  *(_OWORD *)(v4 + 32) = v6;
  long long v7 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(_DWORD *)(v4 + 71) = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 71);
  *(_OWORD *)(v4 + 56) = v7;
  *(unsigned char *)(v4 + 75) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 75);
  *(unsigned char *)(v4 + 76) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 76);
  unint64_t v8 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 84) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 84) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(void *)unint64_t v8 = v10;
  unint64_t v11 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 100) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 100) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  *(void *)unint64_t v11 = v13;
  uint64_t v14 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v15 = *(_DWORD *)(v14 + 80) & 0xF8;
  uint64_t v16 = v15 + 16;
  unint64_t v17 = v15 + 16 + v11;
  unint64_t v18 = ~v15 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (void *)(v17 & v18);
  uint64_t v20 = (unsigned __int8 *)((v16 + v12) & v18);
  if (*(void *)(v14 + 64) <= 0x10uLL) {
    uint64_t v21 = 16;
  }
  else {
    uint64_t v21 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v22 = v20[v21];
  unsigned int v23 = v22 - 2;
  if (v22 >= 2)
  {
    if (v21 <= 3) {
      uint64_t v24 = v21;
    }
    else {
      uint64_t v24 = 4;
    }
    switch(v24)
    {
      case 1:
        int v25 = *v20;
        goto LABEL_13;
      case 2:
        int v25 = *(unsigned __int16 *)v20;
        goto LABEL_13;
      case 3:
        int v25 = *(unsigned __int16 *)((v16 + v12) & v18) | (*(unsigned __int8 *)(((v16 + v12) & v18) + 2) << 16);
        goto LABEL_13;
      case 4:
        int v25 = *(_DWORD *)v20;
LABEL_13:
        int v26 = (v25 | (v23 << (8 * v21))) + 2;
        unsigned int v22 = v25 + 2;
        if (v21 < 4) {
          unsigned int v22 = v26;
        }
        break;
      default:
        break;
    }
  }
  if (v22 == 1)
  {
    (*(void (**)(void *))(v14 + 16))(v19);
    *((unsigned char *)v19 + v21) = 1;
  }
  else if (v22)
  {
    memcpy(v19, v20, v21 + 1);
  }
  else
  {
    uint64_t v27 = *(void *)(((v16 + v12) & v18) + 8);
    *unint64_t v19 = *(void *)v20;
    v19[1] = v27;
    *((unsigned char *)v19 + v21) = 0;
    swift_retain();
  }
  return a1;
}

unint64_t sub_21F87427C(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  long long v5 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(unsigned char *)(v4 + 24) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_OWORD *)(v4 + 8) = v5;
  long long v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(unsigned char *)(v4 + 48) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  *(_OWORD *)(v4 + 32) = v6;
  long long v7 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(_DWORD *)(v4 + 71) = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 71);
  *(_OWORD *)(v4 + 56) = v7;
  *(unsigned char *)(v4 + 75) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 75);
  *(unsigned char *)(v4 + 76) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 76);
  unint64_t v8 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 84) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 84) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(void *)unint64_t v8 = v10;
  unint64_t v11 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 100) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 100) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  *(void *)unint64_t v11 = v13;
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(_DWORD *)(v15 + 80) & 0xF8;
  uint64_t v17 = v16 + 16;
  unint64_t v18 = v16 + 16 + v11;
  unint64_t v19 = ~v16 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = (void *)(v18 & v19);
  uint64_t v21 = (void *)((v17 + v12) & v19);
  if ((void *)(v18 & v19) != v21)
  {
    uint64_t v22 = *(void *)(*(void *)(a3 + 16) - 8);
    if (*(void *)(v15 + 64) <= 0x10uLL) {
      uint64_t v23 = 16;
    }
    else {
      uint64_t v23 = *(void *)(v15 + 64);
    }
    unsigned int v24 = *((unsigned __int8 *)v20 + v23);
    unsigned int v25 = v24 - 2;
    if (v24 >= 2)
    {
      if (v23 <= 3) {
        uint64_t v26 = v23;
      }
      else {
        uint64_t v26 = 4;
      }
      switch(v26)
      {
        case 1:
          int v27 = *(unsigned __int8 *)v20;
          goto LABEL_14;
        case 2:
          int v27 = *(unsigned __int16 *)v20;
          goto LABEL_14;
        case 3:
          int v27 = *(unsigned __int16 *)v20 | (*((unsigned __int8 *)v20 + 2) << 16);
          goto LABEL_14;
        case 4:
          int v27 = *(_DWORD *)v20;
LABEL_14:
          int v28 = (v27 | (v25 << (8 * v23))) + 2;
          unsigned int v24 = v27 + 2;
          if (v23 < 4) {
            unsigned int v24 = v28;
          }
          break;
        default:
          break;
      }
    }
    if (v24 == 1)
    {
      (*(void (**)(void *, uint64_t))(v22 + 8))(v20, v14);
    }
    else if (!v24)
    {
      swift_release();
    }
    unsigned int v29 = *((unsigned __int8 *)v21 + v23);
    unsigned int v30 = v29 - 2;
    if (v29 >= 2)
    {
      if (v23 <= 3) {
        uint64_t v31 = v23;
      }
      else {
        uint64_t v31 = 4;
      }
      switch(v31)
      {
        case 1:
          int v32 = *(unsigned __int8 *)v21;
          goto LABEL_29;
        case 2:
          int v32 = *(unsigned __int16 *)v21;
          goto LABEL_29;
        case 3:
          int v32 = *(unsigned __int16 *)v21 | (*((unsigned __int8 *)v21 + 2) << 16);
          goto LABEL_29;
        case 4:
          int v32 = *(_DWORD *)v21;
LABEL_29:
          int v33 = (v32 | (v30 << (8 * v23))) + 2;
          unsigned int v29 = v32 + 2;
          if (v23 < 4) {
            unsigned int v29 = v33;
          }
          break;
        default:
          break;
      }
    }
    if (v29 == 1)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 16))(v20, v21, v14);
      *((unsigned char *)v20 + v23) = 1;
    }
    else if (v29)
    {
      memcpy(v20, v21, v23 + 1);
    }
    else
    {
      uint64_t v34 = v21[1];
      *uint64_t v20 = *v21;
      v20[1] = v34;
      *((unsigned char *)v20 + v23) = 0;
      swift_retain();
    }
  }
  return a1;
}

unint64_t sub_21F874550(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  long long v5 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(unsigned char *)(v4 + 24) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_OWORD *)(v4 + 8) = v5;
  long long v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(unsigned char *)(v4 + 48) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  *(_OWORD *)(v4 + 32) = v6;
  long long v7 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(_DWORD *)(v4 + 71) = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 71);
  *(_OWORD *)(v4 + 56) = v7;
  *(unsigned char *)(v4 + 75) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 75);
  *(unsigned char *)(v4 + 76) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 76);
  unint64_t v8 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 84) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 84) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(void *)unint64_t v8 = v10;
  unint64_t v11 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 100) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 100) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  *(void *)unint64_t v11 = v13;
  uint64_t v14 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v15 = *(_DWORD *)(v14 + 80) & 0xF8;
  uint64_t v16 = v15 + 16;
  unint64_t v17 = v15 + 16 + v11;
  unint64_t v18 = ~v15 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (_OWORD *)(v17 & v18);
  uint64_t v20 = (unsigned __int8 *)((v16 + v12) & v18);
  if (*(void *)(v14 + 64) <= 0x10uLL) {
    uint64_t v21 = 16;
  }
  else {
    uint64_t v21 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v22 = v20[v21];
  unsigned int v23 = v22 - 2;
  if (v22 >= 2)
  {
    if (v21 <= 3) {
      uint64_t v24 = v21;
    }
    else {
      uint64_t v24 = 4;
    }
    switch(v24)
    {
      case 1:
        int v25 = *v20;
        goto LABEL_13;
      case 2:
        int v25 = *(unsigned __int16 *)v20;
        goto LABEL_13;
      case 3:
        int v25 = *(unsigned __int16 *)((v16 + v12) & v18) | (*(unsigned __int8 *)(((v16 + v12) & v18) + 2) << 16);
        goto LABEL_13;
      case 4:
        int v25 = *(_DWORD *)v20;
LABEL_13:
        int v26 = (v25 | (v23 << (8 * v21))) + 2;
        unsigned int v22 = v25 + 2;
        if (v21 < 4) {
          unsigned int v22 = v26;
        }
        break;
      default:
        break;
    }
  }
  if (v22 == 1)
  {
    (*(void (**)(_OWORD *))(v14 + 32))(v19);
    *((unsigned char *)v19 + v21) = 1;
  }
  else if (v22)
  {
    memcpy(v19, v20, v21 + 1);
  }
  else
  {
    *unint64_t v19 = *(_OWORD *)v20;
    *((unsigned char *)v19 + v21) = 0;
  }
  return a1;
}

unint64_t sub_21F874758(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  long long v5 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(unsigned char *)(v4 + 24) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_OWORD *)(v4 + 8) = v5;
  long long v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(unsigned char *)(v4 + 48) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  *(_OWORD *)(v4 + 32) = v6;
  long long v7 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(_DWORD *)(v4 + 71) = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 71);
  *(_OWORD *)(v4 + 56) = v7;
  *(unsigned char *)(v4 + 75) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 75);
  *(unsigned char *)(v4 + 76) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 76);
  unint64_t v8 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 84) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 84) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(void *)unint64_t v8 = v10;
  unint64_t v11 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 100) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 100) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = *(void *)v12;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  *(void *)unint64_t v11 = v13;
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(_DWORD *)(v15 + 80) & 0xF8;
  uint64_t v17 = v16 + 16;
  unint64_t v18 = v16 + 16 + v11;
  unint64_t v19 = ~v16 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = (unsigned __int8 *)(v18 & v19);
  uint64_t v21 = (unsigned __int8 *)((v17 + v12) & v19);
  if ((unsigned __int8 *)(v18 & v19) != v21)
  {
    uint64_t v22 = *(void *)(*(void *)(a3 + 16) - 8);
    if (*(void *)(v15 + 64) <= 0x10uLL) {
      uint64_t v23 = 16;
    }
    else {
      uint64_t v23 = *(void *)(v15 + 64);
    }
    unsigned int v24 = v20[v23];
    unsigned int v25 = v24 - 2;
    if (v24 >= 2)
    {
      if (v23 <= 3) {
        uint64_t v26 = v23;
      }
      else {
        uint64_t v26 = 4;
      }
      switch(v26)
      {
        case 1:
          int v27 = *v20;
          goto LABEL_14;
        case 2:
          int v27 = *(unsigned __int16 *)v20;
          goto LABEL_14;
        case 3:
          int v27 = *(unsigned __int16 *)v20 | (v20[2] << 16);
          goto LABEL_14;
        case 4:
          int v27 = *(_DWORD *)v20;
LABEL_14:
          int v28 = (v27 | (v25 << (8 * v23))) + 2;
          unsigned int v24 = v27 + 2;
          if (v23 < 4) {
            unsigned int v24 = v28;
          }
          break;
        default:
          break;
      }
    }
    if (v24 == 1)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v22 + 8))(v20, v14);
    }
    else if (!v24)
    {
      swift_release();
    }
    unsigned int v29 = v21[v23];
    unsigned int v30 = v29 - 2;
    if (v29 >= 2)
    {
      if (v23 <= 3) {
        uint64_t v31 = v23;
      }
      else {
        uint64_t v31 = 4;
      }
      switch(v31)
      {
        case 1:
          int v32 = *v21;
          goto LABEL_29;
        case 2:
          int v32 = *(unsigned __int16 *)v21;
          goto LABEL_29;
        case 3:
          int v32 = *(unsigned __int16 *)v21 | (v21[2] << 16);
          goto LABEL_29;
        case 4:
          int v32 = *(_DWORD *)v21;
LABEL_29:
          int v33 = (v32 | (v30 << (8 * v23))) + 2;
          unsigned int v29 = v32 + 2;
          if (v23 < 4) {
            unsigned int v29 = v33;
          }
          break;
        default:
          break;
      }
    }
    if (v29 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v22 + 32))(v20, v21, v14);
      v20[v23] = 1;
    }
    else if (v29)
    {
      memcpy(v20, v21, v23 + 1);
    }
    else
    {
      *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
      v20[v23] = 0;
    }
  }
  return a1;
}

uint64_t sub_21F874A28(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  if (v4 <= 0x10) {
    unint64_t v4 = 16;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_22;
  }
  uint64_t v5 = *(_DWORD *)(v3 + 80) & 0xF8;
  unint64_t v6 = v4 + (~v5 & (unint64_t)(v5 + 112)) + 1;
  char v7 = 8 * v6;
  if (v6 > 3) {
    goto LABEL_6;
  }
  unsigned int v10 = ((a2 + ~(-1 << v7) - 253) >> v7) + 1;
  if (HIWORD(v10))
  {
    int v8 = *(_DWORD *)&a1[v6];
    if (v8) {
      goto LABEL_14;
    }
LABEL_22:
    unsigned int v12 = *a1;
    BOOL v13 = v12 >= 2;
    unsigned int v14 = (v12 + 2147483646) & 0x7FFFFFFF;
    if (!v13) {
      unsigned int v14 = -1;
    }
    if (v14 + 1 >= 2) {
      return v14;
    }
    else {
      return 0;
    }
  }
  if (v10 > 0xFF)
  {
    int v8 = *(unsigned __int16 *)&a1[v6];
    if (*(_WORD *)&a1[v6]) {
      goto LABEL_14;
    }
    goto LABEL_22;
  }
  if (v10 < 2) {
    goto LABEL_22;
  }
LABEL_6:
  int v8 = a1[v6];
  if (!a1[v6]) {
    goto LABEL_22;
  }
LABEL_14:
  int v11 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v6) = *(unsigned __int16 *)a1 | (a1[2] << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *a1;
        break;
    }
  }
  return (v6 | v11) + 254;
}

void sub_21F874BB8(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  if (v6 <= 0x10) {
    unint64_t v6 = 16;
  }
  uint64_t v7 = *(_DWORD *)(v5 + 80) & 0xF8;
  size_t v8 = v6 + (~v7 & (unint64_t)(v7 + 112)) + 1;
  if (a3 < 0xFE)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 + ~(-1 << (8 * v8)) - 253) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v10 = a2 - 254;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v8)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x21F874DC4);
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v9)
    {
      case 1:
        a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          *a1 = a2 + 2;
        break;
    }
  }
}

uint64_t getEnumTagSinglePayload for AxisMarkPreset(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  if (*a1 <= 3u) {
    int v6 = 3;
  }
  else {
    int v6 = *a1;
  }
  int v7 = v6 - 4;
  if (*a1 < 3u) {
    int v8 = -1;
  }
  else {
    int v8 = v7;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AxisValueLabelOrientation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x21F874F58);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AxisValueLabelOrientation()
{
  return &type metadata for AxisValueLabelOrientation;
}

__n128 initializeBufferWithCopyOfBuffer for AxisValueLabelCollisionResolution(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for AxisValueLabelCollisionResolution(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 19)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AxisValueLabelCollisionResolution(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 18) = 0;
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 19) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AxisValueLabelCollisionResolution()
{
  return &type metadata for AxisValueLabelCollisionResolution;
}

unsigned char *storeEnumTagSinglePayload for AxisValueLabelOrientation.Storage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x21F8750D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AxisValueLabelOrientation.Storage()
{
  return &type metadata for AxisValueLabelOrientation.Storage;
}

__n128 initializeBufferWithCopyOfBuffer for AxisValueLabelCollisionResolution.Storage(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for AxisValueLabelCollisionResolution.Storage(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AxisValueLabelCollisionResolution.Storage(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 18) = v3;
  return result;
}

uint64_t sub_21F87516C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_21F875188(uint64_t result, int a2)
{
  if (a2)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 17) = 1;
  }
  else
  {
    *(unsigned char *)(result + 17) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AxisValueLabelCollisionResolution.Storage()
{
  return &type metadata for AxisValueLabelCollisionResolution.Storage;
}

uint64_t sub_21F8751BC()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *sub_21F875258(uint64_t *__dst, uint64_t *a2, uint64_t a3)
{
  char v3 = __dst;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *a2;
    *char v3 = *a2;
    char v3 = (uint64_t *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
  }
  else
  {
    unsigned int v9 = *((unsigned __int8 *)a2 + v5);
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v5 <= 3) {
        uint64_t v11 = v5;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *(unsigned __int8 *)a2;
          goto LABEL_19;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_19;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          goto LABEL_19;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_19:
          int v13 = (v12 | (v10 << (8 * v5))) + 2;
          unsigned int v9 = v12 + 2;
          if (v5 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v9 == 1)
    {
      (*(void (**)(uint64_t *))(v4 + 16))(__dst);
      *((unsigned char *)v3 + v5) = 1;
      return v3;
    }
    if (v9)
    {
      memcpy(__dst, a2, v5 + 1);
      return v3;
    }
    uint64_t v14 = a2[1];
    *char v3 = *a2;
    v3[1] = v14;
    *((unsigned char *)v3 + v5) = 0;
  }
  swift_retain();
  return v3;
}

unsigned __int8 *sub_21F8753E4(unsigned __int8 *result, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 0x10) {
    unint64_t v2 = 16;
  }
  unsigned int v3 = result[v2];
  unsigned int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *result;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)result;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)result | (result[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)result;
LABEL_12:
        int v7 = (v6 | (v4 << (8 * v2))) + 2;
        unsigned int v3 = v6 + 2;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 == 1) {
    return (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  }
  if (!v3) {
    return (unsigned __int8 *)swift_release();
  }
  return result;
}

unsigned char *sub_21F8754EC(unsigned char *__dst, void *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = *((unsigned __int8 *)a2 + v4);
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *(unsigned __int8 *)a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (*((unsigned __int8 *)a2 + 2) << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    (*(void (**)(unsigned char *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(__dst);
    __dst[v4] = 1;
  }
  else if (v5)
  {
    memcpy(__dst, a2, v4 + 1);
  }
  else
  {
    uint64_t v10 = a2[1];
    *(void *)__dst = *a2;
    *((void *)__dst + 1) = v10;
    __dst[v4] = 0;
    swift_retain();
  }
  return __dst;
}

unsigned __int8 *sub_21F87563C(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = __dst[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *__dst;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)__dst;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)__dst | (__dst[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)__dst;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(__dst, v5);
    }
    else if (!v8)
    {
      swift_release();
    }
    unsigned int v13 = __src[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *__src;
          goto LABEL_29;
        case 2:
          int v16 = *(unsigned __int16 *)__src;
          goto LABEL_29;
        case 3:
          int v16 = *(unsigned __int16 *)__src | (__src[2] << 16);
          goto LABEL_29;
        case 4:
          int v16 = *(_DWORD *)__src;
LABEL_29:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      __dst[v7] = 1;
    }
    else if (v13)
    {
      memcpy(__dst, __src, v7 + 1);
    }
    else
    {
      uint64_t v18 = *((void *)__src + 1);
      *(void *)__dst = *(void *)__src;
      *((void *)__dst + 1) = v18;
      __dst[v7] = 0;
      swift_retain();
    }
  }
  return __dst;
}

unsigned char *sub_21F875874(unsigned char *__dst, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    (*(void (**)(unsigned char *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(__dst);
    __dst[v4] = 1;
  }
  else if (v5)
  {
    memcpy(__dst, a2, v4 + 1);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a2;
    __dst[v4] = 0;
  }
  return __dst;
}

unsigned __int8 *sub_21F8759C0(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = __dst[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *__dst;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)__dst;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)__dst | (__dst[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)__dst;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(__dst, v5);
    }
    else if (!v8)
    {
      swift_release();
    }
    unsigned int v13 = __src[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *__src;
          goto LABEL_29;
        case 2:
          int v16 = *(unsigned __int16 *)__src;
          goto LABEL_29;
        case 3:
          int v16 = *(unsigned __int16 *)__src | (__src[2] << 16);
          goto LABEL_29;
        case 4:
          int v16 = *(_DWORD *)__src;
LABEL_29:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      __dst[v7] = 1;
    }
    else if (v13)
    {
      memcpy(__dst, __src, v7 + 1);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)__src;
      __dst[v7] = 0;
    }
  }
  return __dst;
}

uint64_t sub_21F875BF4(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = 16;
  if (*(void *)(v3 + 64) > 0x10uLL) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 253) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 3) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 254;
}

void sub_21F875D28(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v8 = a2 - 254;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x21F875EF0);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_21F875F18(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = 16;
  if (*(void *)(v2 + 64) > 0x10uLL) {
    uint64_t v3 = *(void *)(v2 + 64);
  }
  uint64_t v4 = a1[v3];
  int v5 = v4 - 2;
  if (v4 >= 2)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v8 = (v7 | (v5 << (8 * v3))) + 2;
        LODWORD(v4) = v7 + 2;
        if (v3 >= 4) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v8;
        }
        break;
      default:
        return v4;
    }
  }
  return v4;
}

void sub_21F875FD0(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    size_t v4 = 16;
  }
  else {
    size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (a2 > 1)
  {
    unsigned int v5 = a2 - 2;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if (v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if (v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

unint64_t sub_21F8760AC()
{
  unint64_t result = qword_267EE7DC0;
  if (!qword_267EE7DC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE7DC0);
  }
  return result;
}

uint64_t sub_21F876100(uint64_t a1, char a2, double a3, double a4)
{
  unsigned int v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_21F916290(a3, a4);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a2 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a2 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_21F87B2EC();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      *(void *)(v18[7] + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    uint64_t v20 = (double *)(v18[6] + 16 * v12);
    *uint64_t v20 = a3;
    v20[1] = a4;
    *(void *)(v18[7] + 8 * v12) = a1;
    uint64_t v21 = v18[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (!v22)
    {
      void v18[2] = v23;
      return result;
    }
    goto LABEL_14;
  }
  sub_21F8723E0(result, a2 & 1);
  uint64_t result = sub_21F916290(a3, a4);
  if ((v16 & 1) == (v19 & 1))
  {
    unint64_t v12 = result;
    uint64_t v18 = (void *)*v5;
    if (v16) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = sub_21FA26990();
  __break(1u);
  return result;
}

unint64_t sub_21F876234(uint64_t a1, uint64_t a2, void *a3)
{
  sub_21FA26A00();
  sub_21FA26A10();
  uint64_t v33 = a1;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = a1 + 32;
    do
    {
      sub_21F7BB81C(v5, (uint64_t)v45);
      sub_21F7BB81C((uint64_t)v45, (uint64_t)v46);
      int v10 = sub_21F7E108C((uint64_t)v46);
      uint64_t v11 = sub_21F7E1098((uint64_t)v46);
      if (v10 != 1)
      {
        uint64_t v22 = *(void *)(v11 + 16);
        char v23 = *(unsigned char *)(v11 + 24);
        uint64_t v24 = *(void *)(v11 + 40);
        uint64_t v44 = *(void *)(v11 + 8);
        uint64_t v25 = *(void *)(v11 + 48);
        int v26 = *(char *)(v11 + 56);
        unsigned int v27 = *(unsigned __int8 *)(v11 + 56);
        sub_21FA26A10();
        sub_21FA26A10();
        if (v26 < 0)
        {
          sub_21FA26A10();
          sub_21FA26A10();
          sub_21FA26A30();
          sub_21FA26A30();
          sub_21F7C618C(v45, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
          sub_21F7652C0(v44, v22, v23);
          swift_bridgeObjectRetain();
          char v6 = v27;
        }
        else
        {
          sub_21FA26A10();
          char v6 = v27;
          sub_21FA26A10();
          if (v27 > 1)
          {
            sub_21F7C618C(v45, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
            sub_21F7652C0(v44, v22, v23);
            swift_bridgeObjectRetain();
            sub_21F770E44(v24, v25, 2);
            sub_21FA25D30();
          }
          else
          {
            sub_21FA26A30();
            sub_21F7C618C(v45, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
            sub_21F7652C0(v44, v22, v23);
            swift_bridgeObjectRetain();
          }
        }
        sub_21FA26A10();
        sub_21F7656A8(v44, v22, v23);
        swift_bridgeObjectRelease();
        uint64_t v7 = v24;
        uint64_t v8 = v25;
        char v9 = v6;
        goto LABEL_5;
      }
      uint64_t v12 = *(void *)(v11 + 16);
      uint64_t v36 = v5;
      uint64_t v37 = *(void *)(v11 + 8);
      char v35 = *(unsigned char *)(v11 + 24);
      uint64_t v38 = *(void *)(v11 + 48);
      int v13 = *(char *)(v11 + 56);
      int v14 = *(unsigned __int8 *)(v11 + 56);
      uint64_t v15 = *(void *)(v11 + 88);
      uint64_t v40 = *(void *)(v11 + 40);
      uint64_t v41 = *(void *)(v11 + 80);
      char v16 = *(unsigned char *)(v11 + 96);
      uint64_t v42 = *(void *)(v11 + 120);
      uint64_t v43 = *(void *)(v11 + 112);
      unsigned int v17 = *(unsigned __int8 *)(v11 + 128);
      sub_21FA26A10();
      sub_21FA26A10();
      char v34 = v14;
      char v39 = v16;
      if (v13 < 0)
      {
        sub_21FA26A10();
        sub_21FA26A10();
        sub_21FA26A30();
        sub_21FA26A30();
        sub_21F7C618C(v45, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
        char v21 = v35;
        sub_21F7652C0(v37, v12, v35);
        swift_bridgeObjectRetain();
        sub_21F7652C0(v41, v15, v16);
        swift_bridgeObjectRetain();
        sub_21F770E44(v43, v42, v17);
        unsigned int v18 = v17;
        uint64_t v19 = v37;
        uint64_t v20 = v15;
        uint64_t v5 = v36;
        if ((v18 & 0x80) == 0) {
          goto LABEL_16;
        }
      }
      else
      {
        unsigned int v18 = v17;
        sub_21FA26A10();
        if (v14)
        {
          uint64_t v19 = v37;
          uint64_t v20 = v15;
          uint64_t v5 = v36;
          if (v14 == 1)
          {
            sub_21FA26A10();
            sub_21FA26A30();
            sub_21F7C618C(v45, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
            char v21 = v35;
            sub_21F7652C0(v37, v12, v35);
            swift_bridgeObjectRetain();
            sub_21F7652C0(v41, v15, v39);
            swift_bridgeObjectRetain();
            sub_21F770E44(v43, v42, v18);
            if ((v18 & 0x80) == 0) {
              goto LABEL_16;
            }
          }
          else
          {
            sub_21FA26A10();
            sub_21F7C618C(v45, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
            char v21 = v35;
            sub_21F7652C0(v37, v12, v35);
            swift_bridgeObjectRetain();
            sub_21F7652C0(v41, v15, v39);
            swift_bridgeObjectRetain();
            sub_21F770E44(v43, v42, v18);
            sub_21F770E44(v40, v38, 2);
            sub_21FA25D30();
            if ((v18 & 0x80) == 0)
            {
LABEL_16:
              sub_21FA26A10();
              sub_21FA26A10();
              if (v18 > 1) {
                sub_21FA25D30();
              }
              else {
                sub_21FA26A30();
              }
              char v28 = v34;
              goto LABEL_25;
            }
          }
        }
        else
        {
          sub_21FA26A10();
          sub_21FA26A30();
          sub_21F7C618C(v45, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
          uint64_t v19 = v37;
          char v21 = v35;
          sub_21F7652C0(v37, v12, v35);
          swift_bridgeObjectRetain();
          uint64_t v20 = v15;
          sub_21F7652C0(v41, v15, v16);
          swift_bridgeObjectRetain();
          sub_21F770E44(v43, v42, v18);
          uint64_t v5 = v36;
          if ((v18 & 0x80) == 0) {
            goto LABEL_16;
          }
        }
      }
      sub_21FA26A10();
      sub_21FA26A10();
      sub_21FA26A30();
      sub_21FA26A30();
      uint64_t v19 = v37;
      char v28 = v34;
LABEL_25:
      sub_21F7656A8(v19, v12, v21);
      swift_bridgeObjectRelease();
      sub_21F770E38(v40, v38, v28);
      sub_21F7656A8(v41, v20, v39);
      swift_bridgeObjectRelease();
      uint64_t v8 = v42;
      uint64_t v7 = v43;
      char v9 = v18;
LABEL_5:
      sub_21F770E38(v7, v8, v9);
      sub_21F7C618C(v45, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
      v5 += 152;
      --v4;
    }
    while (v4);
  }
  sub_21FA26A50();
  unint64_t result = sub_21FA26430();
  *(void *)((char *)a3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
  uint64_t v30 = 8 * result;
  *(void *)(a3[6] + v30) = v33;
  *(void *)(a3[7] + v30) = a2;
  ++a3[2];
  return result;
}

uint64_t sub_21F876978(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for CalendarCache.Key(0);
  uint64_t result = sub_21F87BEB4(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, type metadata accessor for CalendarCache.Key);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

void *sub_21F876A2C(unint64_t a1, uint64_t a2, void *__src, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = memcpy((void *)(a4[7] + 776 * a1), __src, 0x301uLL);
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

unint64_t sub_21F876A9C(unint64_t result, char a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a5[6] + result) = a2;
  uint64_t v5 = (void *)(a5[7] + 16 * result);
  *uint64_t v5 = a3;
  v5[1] = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t sub_21F876AE4(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t result = sub_21F87BD2C(a2, a4[6] + 48 * a1);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

uint64_t sub_21F876B64(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t result = sub_21F87BC34(a2, a4[6] + 72 * a1);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

unint64_t sub_21F876BE4(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = 8 * result;
  *(void *)(a4[6] + v4) = a2;
  *(void *)(a4[7] + v4) = a3;
  uint64_t v5 = a4[2];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    a4[2] = v7;
  }
  return result;
}

uint64_t sub_21F876C2C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = sub_21FA24320();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_21F876CE4(unint64_t a1, char a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(unsigned char *)(a4[6] + a1) = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = type metadata accessor for ChartContentRenderContext.Bins(0);
  uint64_t result = sub_21F87BEB4(a3, v7 + *(void *)(*(void *)(v8 - 8) + 72) * a1, type metadata accessor for ChartContentRenderContext.Bins);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

uint64_t sub_21F876D8C(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  uint64_t v9 = a3[4];
  uint64_t v10 = a3[5];
  long long v34 = *((_OWORD *)a3 + 3);
  long long v35 = *((_OWORD *)a3 + 1);
  long long v32 = *((_OWORD *)a3 + 5);
  long long v33 = *((_OWORD *)a3 + 4);
  long long v30 = *((_OWORD *)a3 + 7);
  long long v31 = *((_OWORD *)a3 + 6);
  long long v28 = *((_OWORD *)a3 + 9);
  long long v29 = *((_OWORD *)a3 + 8);
  long long v26 = *((_OWORD *)a3 + 11);
  long long v27 = *((_OWORD *)a3 + 10);
  long long v24 = *((_OWORD *)a3 + 13);
  long long v25 = *((_OWORD *)a3 + 12);
  long long v22 = *((_OWORD *)a3 + 15);
  long long v23 = *((_OWORD *)a3 + 14);
  long long v21 = *((_OWORD *)a3 + 16);
  uint64_t v11 = a4[6] + 152 * a1;
  uint64_t v12 = a3[34];
  uint64_t v13 = a3[35];
  uint64_t v14 = a3[36];
  uint64_t v15 = a3[37];
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t result = sub_21F7BB81C(a2, v11);
  uint64_t v17 = a4[7] + 304 * a1;
  *(void *)uint64_t v17 = v7;
  *(void *)(v17 + 8) = v8;
  *(_OWORD *)(v17 + 16) = v35;
  *(void *)(v17 + 32) = v9;
  *(void *)(v17 + 40) = v10;
  *(_OWORD *)(v17 + 48) = v34;
  *(_OWORD *)(v17 + 64) = v33;
  *(_OWORD *)(v17 + 80) = v32;
  *(_OWORD *)(v17 + 96) = v31;
  *(_OWORD *)(v17 + 112) = v30;
  *(_OWORD *)(v17 + 128) = v29;
  *(_OWORD *)(v17 + 144) = v28;
  *(_OWORD *)(v17 + 160) = v27;
  *(_OWORD *)(v17 + 176) = v26;
  *(_OWORD *)(v17 + 192) = v25;
  *(_OWORD *)(v17 + 208) = v24;
  *(_OWORD *)(v17 + 224) = v23;
  *(_OWORD *)(v17 + 240) = v22;
  *(_OWORD *)(v17 + 256) = v21;
  *(void *)(v17 + 272) = v12;
  *(void *)(v17 + 280) = v13;
  *(void *)(v17 + 288) = v14;
  *(void *)(v17 + 296) = v15;
  uint64_t v18 = a4[2];
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (v19) {
    __break(1u);
  }
  else {
    a4[2] = v20;
  }
  return result;
}

unint64_t sub_21F876F14(unint64_t result, char a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a4[6] + result) = a2;
  uint64_t v4 = a4[7] + 56 * result;
  long long v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a3;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a3 + 32);
  *(void *)(v4 + 48) = *(void *)(a3 + 48);
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

void *sub_21F876F74()
{
  unint64_t v1 = v0;
  sub_21F76CA40(&qword_26AD47CC8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      int64_t v9 = v27 + 1;
      if (v27 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v6 + 8 * v9);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v28 - 1) & v28;
    unint64_t v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(v2 + 56) + 72 * v15;
    uint64_t v17 = *(void *)v16;
    char v18 = *(unsigned char *)(v16 + 8);
    uint64_t v19 = *(void *)(v16 + 16);
    uint64_t v20 = *(void *)(v16 + 24);
    uint64_t v21 = *(void *)(v16 + 32);
    uint64_t v22 = *(void *)(v16 + 48);
    uint64_t v23 = *(void *)(v16 + 56);
    __int16 v24 = *(_WORD *)(v16 + 40);
    unsigned __int8 v25 = *(unsigned char *)(v16 + 64);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    uint64_t v26 = *(void *)(v4 + 56) + 72 * v15;
    *(void *)uint64_t v26 = v17;
    *(unsigned char *)(v26 + 8) = v18;
    *(void *)(v26 + 16) = v19;
    *(void *)(v26 + 24) = v20;
    *(void *)(v26 + 32) = v21;
    *(_WORD *)(v26 + 40) = v24;
    *(void *)(v26 + 48) = v22;
    *(void *)(v26 + 56) = v23;
    *(unsigned char *)(v26 + 64) = v25;
    sub_21F785758(v19, v20, v21, v24);
    uint64_t result = (void *)sub_21F778E0C(v22, v23, v25);
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v13) {
    goto LABEL_26;
  }
  unint64_t v28 = *(void *)(v6 + 8 * v29);
  if (v28)
  {
    int64_t v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v9);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_21F87716C(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_21F8771C8()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CalendarCache.Key(0);
  uint64_t v26 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F76CA40(&qword_26AD462E8);
  uint64_t v5 = *v0;
  uint64_t v6 = sub_21FA267A0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    *unint64_t v1 = v7;
    return result;
  }
  __int16 v24 = v1;
  uint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v25 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v20 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v14) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v10;
    if (!v21)
    {
      int64_t v10 = v20 + 1;
      if (v20 + 1 >= v14) {
        goto LABEL_23;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v10);
      if (!v21) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v21 - 1) & v21;
    unint64_t v16 = __clz(__rbit64(v21)) + (v10 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v26 + 72) * v16;
    sub_21F87BE4C(*(void *)(v5 + 48) + v17, (uint64_t)v4, type metadata accessor for CalendarCache.Key);
    uint64_t v18 = 8 * v16;
    uint64_t v19 = *(void *)(*(void *)(v5 + 56) + v18);
    uint64_t result = (void *)sub_21F87BEB4((uint64_t)v4, *(void *)(v7 + 48) + v17, type metadata accessor for CalendarCache.Key);
    *(void *)(*(void *)(v7 + 56) + v18) = v19;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v14)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    unint64_t v1 = v24;
    goto LABEL_25;
  }
  unint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    int64_t v10 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v10);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_21F877444()
{
  unint64_t v1 = v0;
  sub_21F76CA40(&qword_26AD452B0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v29 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v13) {
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v6 + 8 * v29);
    ++v9;
    if (!v30)
    {
      int64_t v9 = v29 + 1;
      if (v29 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v30 = *(void *)(v6 + 8 * v9);
      if (!v30) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v30 - 1) & v30;
    unint64_t v15 = __clz(__rbit64(v30)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 56 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 56 * v15;
    char v18 = *(unsigned char *)(v17 + 1);
    char v19 = *(unsigned char *)(v17 + 2);
    uint64_t v20 = *(void *)(v17 + 8);
    uint64_t v21 = *(void *)(v17 + 16);
    uint64_t v22 = *(void *)(v17 + 32);
    uint64_t v23 = *(void *)(v17 + 40);
    uint64_t v24 = 16 * v15;
    uint64_t v25 = *(void *)(v4 + 48) + v16;
    long long v26 = *(_OWORD *)(*(void *)(v2 + 56) + v24);
    char v27 = *(unsigned char *)(v17 + 24);
    char v28 = *(unsigned char *)(v17 + 48);
    *(unsigned char *)uint64_t v25 = *(unsigned char *)v17;
    *(unsigned char *)(v25 + 1) = v18;
    *(unsigned char *)(v25 + 2) = v19;
    *(void *)(v25 + 8) = v20;
    *(void *)(v25 + 16) = v21;
    *(unsigned char *)(v25 + 24) = v27;
    *(void *)(v25 + 32) = v22;
    *(void *)(v25 + 40) = v23;
    *(unsigned char *)(v25 + 48) = v28;
    *(_OWORD *)(*(void *)(v4 + 56) + v24) = v26;
    sub_21F770E44(v20, v21, v27);
    uint64_t result = (void *)sub_21F770E64(v22, v23, v28);
  }
  int64_t v31 = v29 + 2;
  if (v31 >= v13) {
    goto LABEL_26;
  }
  unint64_t v30 = *(void *)(v6 + 8 * v31);
  if (v30)
  {
    int64_t v9 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v6 + 8 * v9);
    ++v31;
    if (v30) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F877640()
{
  unint64_t v1 = v0;
  sub_21F76CA40(&qword_26AD46B40);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F8777E4()
{
  unint64_t v1 = v0;
  sub_21F76CA40(&qword_26AD4A430);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t result = (void *)sub_21F7667FC(*(void *)(v2 + 48) + 48 * v15, (uint64_t)v23);
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    uint64_t v17 = (_OWORD *)(*(void *)(v4 + 48) + 48 * v15);
    long long v18 = v23[0];
    long long v19 = v23[2];
    v17[1] = v23[1];
    v17[2] = v19;
    *uint64_t v17 = v18;
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F8779B8()
{
  unint64_t v1 = v0;
  sub_21F76CA40(&qword_26AD47A70);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *unint64_t v1 = v4;
    return result;
  }
  int64_t v22 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 776 * v15;
    sub_21F756FB4(*(void *)(v2 + 56) + 776 * v15, (uint64_t)__src);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = memcpy((void *)(*(void *)(v4 + 56) + v18), __src, 0x301uLL);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    unint64_t v1 = v22;
    goto LABEL_28;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_21F877B98()
{
  unint64_t v1 = v0;
  sub_21F76CA40(&qword_26AD47A68);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 40 * v15;
    sub_21F77E098(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = (void *)sub_21F77F300(v22, *(void *)(v4 + 56) + v18);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F877D60()
{
  unint64_t v1 = v0;
  sub_21F76CA40(&qword_26AD47CC0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v23 = __clz(__rbit64(v21));
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = v23 + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(v2 + 56) + 16 * v15;
    uint64_t v17 = *(void *)v16;
    char v18 = *(unsigned char *)(v16 + 8);
    LOBYTE(v16) = *(unsigned char *)(v16 + 9);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    uint64_t v19 = *(void *)(v4 + 56) + 16 * v15;
    *(void *)uint64_t v19 = v17;
    *(unsigned char *)(v19 + 8) = v18;
    *(unsigned char *)(v19 + 9) = v16;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_21F877F08()
{
  unint64_t v1 = v0;
  sub_21F76CA40(&qword_26AD47CB8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  unint64_t result = v3 + 64;
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || result >= v2 + 64 + 8 * v7) {
    unint64_t result = (unint64_t)memmove((void *)result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v27 = __clz(__rbit64(v25));
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = v27 + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(v2 + 56) + 72 * v15;
    uint64_t v17 = *(void *)v16;
    char v18 = *(unsigned char *)(v16 + 8);
    uint64_t v19 = *(void *)(v16 + 32);
    unint64_t result = *(unsigned __int16 *)(v16 + 40);
    char v20 = *(unsigned char *)(v16 + 64);
    long long v21 = *(_OWORD *)(v16 + 16);
    long long v22 = *(_OWORD *)(v16 + 48);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    uint64_t v23 = *(void *)(v4 + 56) + 72 * v15;
    *(void *)uint64_t v23 = v17;
    *(unsigned char *)(v23 + 8) = v18;
    *(_OWORD *)(v23 + 16) = v21;
    *(void *)(v23 + 32) = v19;
    *(_WORD *)(v23 + 40) = result;
    *(_OWORD *)(v23 + 48) = v22;
    *(unsigned char *)(v23 + 64) = v20;
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F8780D4()
{
  unint64_t v1 = v0;
  sub_21F76CA40(&qword_26AD4A450);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(v2 + 56) + 24 * v15;
    char v17 = *(unsigned char *)v16;
    uint64_t v18 = *(void *)(v16 + 8);
    uint64_t v19 = *(void *)(v16 + 16);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    uint64_t v20 = *(void *)(v4 + 56) + 24 * v15;
    *(unsigned char *)uint64_t v20 = v17;
    *(void *)(v20 + 8) = v18;
    *(void *)(v20 + 16) = v19;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F878294()
{
  unint64_t v1 = v0;
  sub_21F76CA40(&qword_26AD4A448);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v20 = __clz(__rbit64(v18));
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = v20 + (v9 << 6);
LABEL_12:
    char v16 = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = v16;
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F878420()
{
  unint64_t v1 = v0;
  sub_21F76CA40(&qword_26AD47A60);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    long long v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
    unint64_t result = (void *)swift_retain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F8785CC()
{
  unint64_t v1 = v0;
  sub_21F76CA40(&qword_26AD45700);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = (uint64_t *)(*(void *)(v2 + 56) + 16 * v15);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    long long v19 = (void *)(*(void *)(v4 + 56) + 16 * v15);
    *long long v19 = v18;
    v19[1] = v17;
    swift_retain();
    unint64_t result = (void *)swift_retain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F878780()
{
  unint64_t v1 = v0;
  sub_21F76CA40(&qword_26AD44BC8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F878930()
{
  unint64_t v1 = v0;
  sub_21F76CA40(&qword_267EE7DE0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_28:
    *unint64_t v1 = v4;
    return result;
  }
  char v28 = v1;
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 40 * v15;
    sub_21F7C21A4(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v29);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    uint64_t v22 = *(void *)(v4 + 56) + v20;
    uint64_t v23 = v30;
    long long v24 = v29[1];
    *(_OWORD *)uint64_t v22 = v29[0];
    *(_OWORD *)(v22 + 16) = v24;
    *(void *)(v22 + 32) = v23;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13)
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    unint64_t v1 = v28;
    goto LABEL_28;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_21F878B28()
{
  unint64_t v1 = v0;
  sub_21F76CA40(&qword_267EE7DE8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v29 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v13) {
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v6 + 8 * v29);
    ++v9;
    if (!v30)
    {
      int64_t v9 = v29 + 1;
      if (v29 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v30 = *(void *)(v6 + 8 * v9);
      if (!v30) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v30 - 1) & v30;
    unint64_t v15 = __clz(__rbit64(v30)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 40 * v15;
    unint64_t v21 = (uint64_t *)(*(void *)(v2 + 56) + v20);
    uint64_t v23 = v21[1];
    uint64_t v22 = v21[2];
    uint64_t v24 = v21[3];
    uint64_t v25 = v21[4];
    unint64_t v26 = (void *)(*(void *)(v4 + 48) + v16);
    uint64_t v27 = *v21;
    *unint64_t v26 = v19;
    v26[1] = v18;
    char v28 = (void *)(*(void *)(v4 + 56) + v20);
    *char v28 = v27;
    v28[1] = v23;
    v28[2] = v22;
    v28[3] = v24;
    v28[4] = v25;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v31 = v29 + 2;
  if (v31 >= v13) {
    goto LABEL_26;
  }
  unint64_t v30 = *(void *)(v6 + 8 * v31);
  if (v30)
  {
    int64_t v9 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v6 + 8 * v9);
    ++v31;
    if (v30) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F878D04()
{
  unint64_t v1 = v0;
  sub_21F76CA40(&qword_26AD44BD0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F878EBC()
{
  unint64_t v1 = v0;
  sub_21F76CA40(&qword_26AD468F0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F879060()
{
  unint64_t v1 = v0;
  sub_21F76CA40(&qword_26AD4A438);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    unint64_t result = (void *)swift_retain();
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F879204(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_21F76CA40(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = sub_21FA267A0();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  unint64_t result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    unint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v14) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v7 + 8 * v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v7 + 8 * v10);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = *(void *)(*(void *)(v3 + 56) + 8 * v16);
    *(unsigned char *)(*(void *)(v5 + 48) + v16) = *(unsigned char *)(*(void *)(v3 + 48) + v16);
    *(void *)(*(void *)(v5 + 56) + 8 * v16) = v17;
    unint64_t result = (void *)swift_retain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v14) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v7 + 8 * v20);
  if (v19)
  {
    int64_t v10 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v7 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F8793A0()
{
  unint64_t v1 = v0;
  sub_21F76CA40(&qword_26AD4A440);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(v2 + 56) + 24 * v15;
    char v17 = *(unsigned char *)v16;
    uint64_t v18 = *(void *)(v16 + 8);
    uint64_t v19 = *(void *)(v16 + 16);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    uint64_t v20 = *(void *)(v4 + 56) + 24 * v15;
    *(unsigned char *)uint64_t v20 = v17;
    *(void *)(v20 + 8) = v18;
    *(void *)(v20 + 16) = v19;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F879560()
{
  unint64_t v1 = v0;
  sub_21F76CA40(&qword_26AD46908);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F8796F0()
{
  unint64_t v1 = v0;
  sub_21F76CA40(&qword_26AD44E68);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      int64_t v9 = v27 + 1;
      if (v27 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v6 + 8 * v9);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v28 - 1) & v28;
    unint64_t v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 48 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 48 * v15;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    uint64_t v20 = *(void *)(v17 + 16);
    uint64_t v21 = *(void *)(v17 + 24);
    uint64_t v22 = *(void *)(v17 + 32);
    uint64_t v23 = 8 * v15;
    uint64_t v24 = *(void *)(*(void *)(v2 + 56) + v23);
    uint64_t v25 = *(void *)(v4 + 48) + v16;
    char v26 = *(unsigned char *)(v17 + 40);
    *(void *)uint64_t v25 = *(void *)v17;
    *(void *)(v25 + 8) = v19;
    *(void *)(v25 + 16) = v20;
    *(void *)(v25 + 24) = v21;
    *(void *)(v25 + 32) = v22;
    *(unsigned char *)(v25 + 40) = v26;
    *(void *)(*(void *)(v4 + 56) + v23) = v24;
    sub_21F87BCC8(v18, v19, v20, v21, v22, v26);
    unint64_t result = (void *)swift_retain();
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v13) {
    goto LABEL_26;
  }
  unint64_t v28 = *(void *)(v6 + 8 * v29);
  if (v28)
  {
    int64_t v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v9);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F8798C4()
{
  unint64_t v1 = v0;
  sub_21F76CA40(&qword_26AD45758);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v29 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v13) {
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v6 + 8 * v29);
    ++v9;
    if (!v30)
    {
      int64_t v9 = v29 + 1;
      if (v29 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v30 = *(void *)(v6 + 8 * v9);
      if (!v30) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v30 - 1) & v30;
    unint64_t v15 = __clz(__rbit64(v30)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = 72 * v15;
    uint64_t v18 = *(void *)(v2 + 48) + v17;
    uint64_t v19 = *(void *)v18;
    uint64_t v20 = *(void *)(v18 + 8);
    uint64_t v21 = *(void *)(v18 + 16);
    uint64_t v22 = *(void *)(v18 + 24);
    uint64_t v23 = *(void *)(v18 + 32);
    uint64_t v24 = *(void *)(v18 + 40);
    uint64_t v25 = *(void *)(v18 + 48);
    uint64_t v26 = *(void *)(v18 + 56);
    LOBYTE(v18) = *(unsigned char *)(v18 + 64);
    uint64_t v27 = *(void *)(*(void *)(v2 + 56) + v16);
    uint64_t v28 = *(void *)(v4 + 48) + v17;
    *(void *)uint64_t v28 = v19;
    *(void *)(v28 + 8) = v20;
    *(void *)(v28 + 16) = v21;
    *(void *)(v28 + 24) = v22;
    *(void *)(v28 + 32) = v23;
    *(void *)(v28 + 40) = v24;
    *(void *)(v28 + 48) = v25;
    *(void *)(v28 + 56) = v26;
    *(unsigned char *)(v28 + 64) = v18;
    *(void *)(*(void *)(v4 + 56) + v16) = v27;
    sub_21F87BBAC(v19, v20, v21, v22, v23, v24, v25, v26, v18);
    unint64_t result = (void *)swift_retain();
  }
  int64_t v31 = v29 + 2;
  if (v31 >= v13) {
    goto LABEL_26;
  }
  unint64_t v30 = *(void *)(v6 + 8 * v31);
  if (v30)
  {
    int64_t v9 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v6 + 8 * v9);
    ++v31;
    if (v30) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F879AAC()
{
  unint64_t v1 = v0;
  sub_21F76CA40(&qword_26AD441E0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v17);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v17) = v18;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F879C54()
{
  unint64_t v1 = v0;
  sub_21F76CA40(&qword_267EE7DD8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F879E04()
{
  return sub_21F879E1C(&qword_26AD452B8);
}

void *sub_21F879E10()
{
  return sub_21F879E1C(&qword_267EE7DD0);
}

void *sub_21F879E1C(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_21F76CA40(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = sub_21FA267A0();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  unint64_t result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    unint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void *)(*(void *)(v3 + 56) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = *(void *)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 56) + v17) = v18;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v14) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F879FB8()
{
  unint64_t v1 = v0;
  sub_21F76CA40(&qword_267EE7DC8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 48 * v15;
    sub_21F87B858(*(void *)(v2 + 56) + 48 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    unint64_t result = (void *)sub_21F87B8B4((uint64_t)v22, *(void *)(v4 + 56) + v18);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F87A180()
{
  return sub_21F87A198(&qword_26AD44088);
}

void *sub_21F87A18C()
{
  return sub_21F87A198(&qword_26AD442B0);
}

void *sub_21F87A198(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_21F76CA40(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = sub_21FA267A0();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  unint64_t result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    unint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v14) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v7 + 8 * v24);
    ++v10;
    if (!v25)
    {
      int64_t v10 = v24 + 1;
      if (v24 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v7 + 8 * v10);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v25 - 1) & v25;
    unint64_t v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    uint64_t v19 = 16 * v16;
    unint64_t v20 = (uint64_t *)(*(void *)(v3 + 56) + v19);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    unint64_t v23 = (void *)(*(void *)(v5 + 56) + v19);
    *unint64_t v23 = v22;
    v23[1] = v21;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v14) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v7 + 8 * v26);
  if (v25)
  {
    int64_t v10 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v7 + 8 * v10);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F87A340()
{
  unint64_t v1 = v0;
  sub_21F76CA40(&qword_26AD46900);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    unint64_t result = (void *)swift_retain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F87A4E4()
{
  uint64_t v1 = sub_21FA24320();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F76CA40(&qword_26AD462E0);
  unint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = sub_21FA267A0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    *unint64_t v23 = v7;
    return result;
  }
  unint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    unint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v24 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v27 = v2 + 16;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + v17);
    unint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_21F87A778()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ChartContentRenderContext.Bins(0);
  uint64_t v25 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F76CA40(&qword_26AD46A28);
  uint64_t v5 = *v0;
  uint64_t v6 = sub_21FA267A0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v7;
    return result;
  }
  unint64_t v23 = v1;
  unint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    unint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v24 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v19 >= v14) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    char v17 = *(unsigned char *)(*(void *)(v5 + 48) + v16);
    unint64_t v18 = *(void *)(v25 + 72) * v16;
    sub_21F87BE4C(*(void *)(v5 + 56) + v18, (uint64_t)v4, type metadata accessor for ChartContentRenderContext.Bins);
    *(unsigned char *)(*(void *)(v7 + 48) + v16) = v17;
    unint64_t result = (void *)sub_21F87BEB4((uint64_t)v4, *(void *)(v7 + 56) + v18, type metadata accessor for ChartContentRenderContext.Bins);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v14)
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    uint64_t v1 = v23;
    goto LABEL_25;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_21F87A9EC()
{
  uint64_t v1 = v0;
  sub_21F76CA40(&qword_26AD462F8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v29 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v13) {
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v6 + 8 * v29);
    ++v9;
    if (!v30)
    {
      int64_t v9 = v29 + 1;
      if (v29 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v30 = *(void *)(v6 + 8 * v9);
      if (!v30) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v30 - 1) & v30;
    unint64_t v15 = __clz(__rbit64(v30)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = v15 << 6;
    char v17 = (uint64_t *)(*(void *)(v2 + 48) + (v15 << 6));
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = v17[2];
    uint64_t v21 = v17[3];
    uint64_t v22 = v17[4];
    uint64_t v23 = v17[5];
    uint64_t v24 = v17[6];
    uint64_t v25 = v17[7];
    uint64_t v26 = 8 * v15;
    uint64_t v27 = *(void *)(*(void *)(v2 + 56) + v26);
    uint64_t v28 = (uint64_t *)(*(void *)(v4 + 48) + v16);
    *uint64_t v28 = v18;
    v28[1] = v19;
    v28[2] = v20;
    v28[3] = v21;
    v28[4] = v22;
    v28[5] = v23;
    v28[6] = v24;
    v28[7] = v25;
    *(void *)(*(void *)(v4 + 56) + v26) = v27;
    unint64_t result = (void *)sub_21F7E0F38(v18, v19, v20, v21, v22, v23, v24);
  }
  int64_t v31 = v29 + 2;
  if (v31 >= v13) {
    goto LABEL_26;
  }
  unint64_t v30 = *(void *)(v6 + 8 * v31);
  if (v30)
  {
    int64_t v9 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v6 + 8 * v9);
    ++v31;
    if (v30) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F87ABB4()
{
  uint64_t v1 = v0;
  sub_21F76CA40(&qword_26AD45410);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F87AD58()
{
  uint64_t v1 = v0;
  sub_21F76CA40(&qword_26AD468E8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v21 = v1;
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 152 * v15;
    sub_21F7BB81C(*(void *)(v2 + 48) + 152 * v15, (uint64_t)v22);
    uint64_t v17 = 304 * v15;
    memcpy(__dst, (const void *)(*(void *)(v2 + 56) + v17), 0x130uLL);
    sub_21F7BB81C((uint64_t)v22, *(void *)(v4 + 48) + v16);
    memcpy((void *)(*(void *)(v4 + 56) + v17), __dst, 0x130uLL);
    sub_21F7C618C(v22, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
    unint64_t result = (void *)sub_21F7F3F44((uint64_t)__dst);
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13)
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t v1 = v21;
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_21F87AF78()
{
  uint64_t v1 = v0;
  sub_21F76CA40(&qword_26AD468F8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 48 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 48 * v15;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    char v20 = *(unsigned char *)(v17 + 16);
    uint64_t v21 = *(void *)(v17 + 24);
    uint64_t v22 = *(void *)(v17 + 32);
    uint64_t v23 = 8 * v15;
    uint64_t v24 = *(void *)(*(void *)(v2 + 56) + v23);
    LOBYTE(v17) = *(unsigned char *)(v17 + 40);
    uint64_t v25 = *(void *)(v4 + 48) + v16;
    *(void *)uint64_t v25 = v18;
    *(void *)(v25 + 8) = v19;
    *(unsigned char *)(v25 + 16) = v20;
    *(void *)(v25 + 24) = v21;
    *(void *)(v25 + 32) = v22;
    *(unsigned char *)(v25 + 40) = v17;
    *(void *)(*(void *)(v4 + 56) + v23) = v24;
    sub_21F7652C0(v18, v19, v20);
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v13) {
    goto LABEL_26;
  }
  unint64_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F87B15C()
{
  uint64_t v1 = v0;
  sub_21F76CA40(&qword_26AD46308);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F87B2EC()
{
  uint64_t v1 = v0;
  sub_21F76CA40(qword_267EE7DF0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v22 = __clz(__rbit64(v20));
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = v22 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v17);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v17) = v18;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F87B480()
{
  uint64_t v1 = v0;
  sub_21F76CA40(&qword_26AD462F0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_21FA267A0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(v2 + 56) + 56 * v15;
    char v17 = *(unsigned char *)v16;
    uint64_t v18 = *(void *)(v16 + 24);
    uint64_t v19 = *(void *)(v16 + 32);
    long long v20 = *(_OWORD *)(v16 + 8);
    long long v21 = *(_OWORD *)(v16 + 40);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    uint64_t v22 = *(void *)(v4 + 56) + 56 * v15;
    *(unsigned char *)uint64_t v22 = v17;
    *(_OWORD *)(v22 + 8) = v20;
    *(void *)(v22 + 24) = v18;
    *(void *)(v22 + 32) = v19;
    *(_OWORD *)(v22 + 40) = v21;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21F87B650()
{
  sub_21F76CA40(&qword_26AD4A458);
  int64_t v31 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = sub_21FA267A0();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *int64_t v31 = v3;
    return result;
  }
  unint64_t result = (void *)(v2 + 64);
  uint64_t v5 = v1 + 64;
  unint64_t v6 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v6) {
    unint64_t result = memmove(result, (const void *)(v1 + 64), 8 * v6);
  }
  int64_t v8 = 0;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  uint64_t v9 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v1 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    int64_t v28 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v12) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v5 + 8 * v28);
    ++v8;
    if (!v29)
    {
      int64_t v8 = v28 + 1;
      if (v28 + 1 >= v12) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v5 + 8 * v8);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    unint64_t v11 = (v29 - 1) & v29;
    unint64_t v14 = __clz(__rbit64(v29)) + (v8 << 6);
LABEL_12:
    uint64_t v15 = *(void *)(v1 + 56) + 88 * v14;
    uint64_t v16 = *(void *)v15;
    char v17 = *(unsigned char *)(v15 + 8);
    uint64_t v18 = *(void *)(v15 + 16);
    uint64_t v19 = *(void *)(v15 + 24);
    uint64_t v20 = *(void *)(v15 + 32);
    uint64_t v21 = *(void *)(v15 + 40);
    unint64_t v22 = *(void *)(v15 + 48);
    uint64_t v23 = *(void *)(v15 + 56);
    uint64_t v24 = *(void *)(v15 + 64);
    uint64_t v25 = *(void *)(v15 + 72);
    unsigned __int8 v26 = *(unsigned char *)(v15 + 80);
    *(unsigned char *)(*(void *)(v3 + 48) + v14) = *(unsigned char *)(*(void *)(v1 + 48) + v14);
    uint64_t v27 = *(void *)(v3 + 56) + 88 * v14;
    *(void *)uint64_t v27 = v16;
    *(unsigned char *)(v27 + 8) = v17;
    *(void *)(v27 + 16) = v18;
    *(void *)(v27 + 24) = v19;
    *(void *)(v27 + 32) = v20;
    *(void *)(v27 + 40) = v21;
    *(void *)(v27 + 48) = v22;
    *(void *)(v27 + 56) = v23;
    *(void *)(v27 + 64) = v24;
    *(void *)(v27 + 72) = v25;
    *(unsigned char *)(v27 + 80) = v26;
    sub_21F87BA54(v18, v19, v20, v21, v22);
    unint64_t result = (void *)sub_21F87BAE0(v24, v25, v26);
  }
  int64_t v30 = v28 + 2;
  if (v30 >= v12) {
    goto LABEL_26;
  }
  unint64_t v29 = *(void *)(v5 + 8 * v30);
  if (v29)
  {
    int64_t v8 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v8 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v8 >= v12) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v5 + 8 * v8);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_21F87B858(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_21F87B8B4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_21F87B910(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 88);
  uint64_t v6 = *(void *)(a1 + 96);
  uint64_t v7 = *(void *)(a1 + 104);
  uint64_t v8 = *(void *)(a1 + 112);
  uint64_t v9 = *(void *)(a1 + 120);
  uint64_t v23 = *(void *)(a1 + 136);
  uint64_t v24 = *(void *)(a1 + 128);
  unint64_t v21 = *(void *)(a1 + 152);
  uint64_t v22 = *(void *)(a1 + 144);
  uint64_t v19 = *(void *)(a1 + 168);
  uint64_t v20 = *(void *)(a1 + 160);
  uint64_t v17 = *(void *)(a1 + 184);
  uint64_t v18 = *(void *)(a1 + 176);
  long long v15 = *(_OWORD *)(a1 + 208);
  long long v16 = *(_OWORD *)(a1 + 192);
  long long v13 = *(_OWORD *)(a1 + 240);
  long long v14 = *(_OWORD *)(a1 + 224);
  long long v12 = *(_OWORD *)(a1 + 256);
  uint64_t v10 = *(void *)(a1 + 272);
  swift_bridgeObjectRelease();
  sub_21F7F42EC(v2, v3, v4, v5);
  sub_21F7F42EC(v6, v7, v8, v9);
  sub_21F7F3D88(v24, v23, v22, v21, v20, v19, v18, v17, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v10,
    (uint64_t (*)(void))sub_21F7BB724);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void sub_21F87BA54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5 = (a5 >> 61) & 3;
  if (!v5) {
    goto LABEL_5;
  }
  if (v5 == 2 || v5 == 1)
  {
    a5 &= 0x9FFFFFFFFFFFFFFFLL;
LABEL_5:
    sub_21F87BA78(a1, a2, a3, a4, a5);
  }
}

void sub_21F87BA78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if ((a5 & 0x8000000000000000) == 0)
  {
    unint64_t v7 = a5 >> 8;
    sub_21F7B34A4(a2, a3, SBYTE1(a3));
    sub_21F7B34A4(a4, a5, v7);
  }
}

uint64_t sub_21F87BAE0(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  switch(a3 >> 5)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
      unint64_t result = sub_21F7B34E8(result, a2, a3 & 0x1F);
      break;
    case 5:
      char v3 = a3 & 0x1F;
      unint64_t result = sub_21F7B34CC(result, a2, v3);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_21F87BB60(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F87BBAC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a6 < 0)
  {
    char v13 = a6;
    sub_21F770E64(a1, a2, a3);
    sub_21F770E64(a4, a5, v13);
    return sub_21F770E64(a7, a8, a9);
  }
  else
  {
    return sub_21F7607AC(a1, a2, a3);
  }
}

uint64_t sub_21F87BC34(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_21F87BC90(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F87BCC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3 < 0)
  {
    sub_21F770E64(a1, a2, a3);
    return sub_21F770E64(a4, a5, a6);
  }
  else
  {
    return sub_21F7607AC(a1, a2, a3);
  }
}

uint64_t sub_21F87BD2C(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_21F87BD88()
{
  unint64_t result = qword_26AD458A8;
  if (!qword_26AD458A8)
  {
    sub_21FA24320();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD458A8);
  }
  return result;
}

void sub_21F87BDE0(uint64_t a1, uint64_t a2, double a3, double a4)
{
  sub_21F9C241C(a3, a4, a1, a2, *(double **)(v4 + 16));
}

uint64_t sub_21F87BDE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ChartContentRenderContext.Bins(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_21F87BE4C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_21F87BEB4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

ValueMetadata *type metadata accessor for VersionSeed()
{
  return &type metadata for VersionSeed;
}

uint64_t sub_21F87BF30()
{
  if (*v0 == -1) {
    return 0x64696C61766E69;
  }
  if (*v0) {
    return sub_21FA26860();
  }
  return 0x7974706D65;
}

uint64_t AxisMark.foregroundStyle<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v12 = MEMORY[0x270FA5388](v11);
  long long v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))(v14, v16, a2, v12);
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  uint64_t v20 = sub_21FA245C0();
  return sub_21F87C15C((uint64_t)v14, KeyPath, (uint64_t)&v20, a2, a4);
}

uint64_t sub_21F87C15C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = *a2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t v9 = *(void *)(*MEMORY[0x263F8DE50] + v8 + 8);
  uint64_t v10 = type metadata accessor for ModifiedAxisMark();
  *(void *)(a5 + *(int *)(v10 + 44)) = a2;
  uint64_t v11 = a5 + *(int *)(v10 + 48);
  __n128 v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32);

  return v12(v11, a3, v9);
}

uint64_t AxisMark.font(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v7 = MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v9, v3, a2, v7);
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  uint64_t v14 = a1;
  sub_21F87C15C((uint64_t)v9, KeyPath, (uint64_t)&v14, a2, a3);
  return swift_retain();
}

uint64_t AxisMark.offset(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v9 = *(void *)(a1 - 8);
  __n128 v10 = MEMORY[0x270FA5388](a1);
  __n128 v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v12, v4, a1, v10);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v12, a1);
  uint64_t result = type metadata accessor for OffsetAxisMark();
  uint64_t v14 = (double *)(a2 + *(int *)(result + 36));
  *uint64_t v14 = a3;
  v14[1] = a4;
  return result;
}

_UNKNOWN **sub_21F87C480()
{
  return &off_26D136518;
}

_UNKNOWN **sub_21F87C48C()
{
  return &off_26D136518;
}

_UNKNOWN **sub_21F87C498()
{
  return &off_26D136500;
}

uint64_t sub_21F87C4A4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21F87C53C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t sub_21F87C634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  *(_OWORD *)((*(void *)(v5 + 48) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 48) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_21F87C6B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t sub_21F87C734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(_OWORD *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_21F87C7B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t sub_21F87C834(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFF8;
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x21F87C948);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void sub_21F87C95C(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            uint64_t v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x21F87CB08);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for OffsetAxisMark()
{
  return sub_21F764F08();
}

uint64_t *sub_21F87CB48(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  unsigned int v10 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || (((v9 + ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v9) + *(void *)(v8 + 64) <= 0x18
      ? (BOOL v11 = v10 > 7)
      : (BOOL v11 = 1),
        v11))
  {
    uint64_t v17 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v17 + (((v10 | 7) + 16) & ~(unint64_t)(v10 | 7)));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    int v12 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    int v13 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *int v12 = *v13;
    uint64_t v14 = ((unint64_t)v12 + v9 + 8) & ~v9;
    uint64_t v15 = ((unint64_t)v13 + v9 + 8) & ~v9;
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    swift_retain();
    v16(v14, v15, v7);
  }
  return v4;
}

uint64_t sub_21F87CCF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48) + 7;
  uint64_t v8 = (void *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v8 = *v9;
  uint64_t v10 = *(void *)(a3 + 24);
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = ((unint64_t)v8 + v13 + 8) & ~v13;
  uint64_t v15 = ((unint64_t)v9 + v13 + 8) & ~v13;
  swift_retain();
  v12(v14, v15, v10);
  return a1;
}

uint64_t sub_21F87CDCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40) + 7;
  uint64_t v8 = (void *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v8 = *v9;
  swift_retain();
  swift_release();
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 24))(((unint64_t)v8 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), ((unint64_t)v9 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t sub_21F87CEA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32) + 7;
  uint64_t v8 = (void *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v8 = *v9;
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 32))(((unint64_t)v8 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), ((unint64_t)v9 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t sub_21F87CF6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24) + 7;
  uint64_t v8 = (void *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v8 = *v9;
  swift_release();
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 40))(((unint64_t)v8 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), ((unint64_t)v9 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t sub_21F87D038(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v4 = *(_DWORD *)(v3 + 84);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(void *)(v3 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  if (v4 <= *(_DWORD *)(v5 + 84)) {
    unsigned int v8 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v3 + 84);
  }
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = v8;
  }
  if (!a2) {
    return 0;
  }
  if (a2 <= v9) {
    goto LABEL_28;
  }
  unint64_t v10 = ((v7 + ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v7) + *(void *)(v5 + 64);
  char v11 = 8 * v10;
  if (v10 <= 3)
  {
    unsigned int v14 = ((a2 - v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v14 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v14 < 2)
    {
LABEL_28:
      if (v4 == v9) {
        return (*(uint64_t (**)(void))(v3 + 48))();
      }
      uint64_t v18 = (unint64_t *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((v8 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v18 + v7 + 8) & ~v7);
      }
      unint64_t v19 = *v18;
      if (v19 >= 0xFFFFFFFF) {
        LODWORD(v19) = -1;
      }
      return (v19 + 1);
    }
  }
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_28;
  }
LABEL_18:
  int v15 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v15 = 0;
  }
  if (v10)
  {
    if (v10 <= 3) {
      int v16 = ((v7 + ((v6 + 7) & 0xFFFFFFF8) + 8) & ~v7) + *(_DWORD *)(v5 + 64);
    }
    else {
      int v16 = 4;
    }
    switch(v16)
    {
      case 2:
        int v17 = *a1;
        break;
      case 3:
        int v17 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v17 = *(_DWORD *)a1;
        break;
      default:
        int v17 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v17 = 0;
  }
  return v9 + (v17 | v15) + 1;
}

void sub_21F87D268(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a4 + 24) - 8);
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v6 <= *(_DWORD *)(v7 + 84)) {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v5 + 84);
  }
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = v10;
  }
  size_t v12 = ((v9 + ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v9) + *(void *)(v7 + 64);
  if (a3 > v11)
  {
    if (v12 <= 3)
    {
      unsigned int v16 = ((a3 - v11 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v11 < a2)
  {
    unsigned int v14 = ~v11 + a2;
    if (v12 < 4)
    {
      int v15 = (v14 >> (8 * v12)) + 1;
      if (v12)
      {
        int v17 = v14 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if (v12 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v12 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v12] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v12] = v15;
        return;
      case 3:
        goto LABEL_49;
      case 4:
        *(_DWORD *)&a1[v12] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x21F87D570);
    case 4:
      *(_DWORD *)&a1[v12] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v6 == v11)
        {
          uint64_t v18 = *(void (**)(void))(v5 + 56);
          v18();
        }
        else
        {
          unint64_t v19 = (void *)((unint64_t)&a1[v8 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((v10 & 0x80000000) != 0)
          {
            unint64_t v21 = *(void (**)(unint64_t))(v7 + 56);
            v21(((unint64_t)v19 + v9 + 8) & ~v9);
          }
          else
          {
            if ((a2 & 0x80000000) != 0) {
              uint64_t v20 = a2 ^ 0x80000000;
            }
            else {
              uint64_t v20 = a2 - 1;
            }
            *unint64_t v19 = v20;
          }
        }
      }
      return;
  }
}

uint64_t type metadata accessor for ModifiedAxisMark()
{
  return sub_21F764F08();
}

uint64_t sub_21F87D5B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v24 = a5;
  uint64_t v25 = a3;
  uint64_t v6 = *(void *)(a4 - 8);
  uint64_t v22 = a1;
  uint64_t v23 = v6;
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  unsigned int v11 = (char *)&v21 - v10;
  uint64_t v13 = *v12;
  uint64_t v14 = type metadata accessor for ModifiedAxisMark();
  swift_beginAccess();
  uint64_t v15 = *(void *)(v13 + 40);
  v27[0] = *(void *)(v13 + 32);
  v27[1] = v15;
  long long v28 = *(_OWORD *)(v13 + 48);
  swift_retain();
  swift_retain();
  unsigned int v16 = (void (*)(unsigned char *, void))swift_readAtKeyPath();
  int v17 = *(void (**)(char *))(v6 + 16);
  v17(v11);
  v16(v26, 0);
  swift_release();
  swift_release();
  uint64_t v18 = *(int *)(v14 + 48);
  uint64_t v19 = v22;
  ((void (*)(char *, uint64_t, uint64_t))v17)(v8, v22 + v18, a4);
  swift_beginAccess();
  swift_setAtWritableKeyPath();
  swift_endAccess();
  v27[0] = v13;
  (*(void (**)(uint64_t, void *))(v24 + 8))(v19, v27);
  ((void (*)(char *, char *, uint64_t))v17)(v8, v11, a4);
  swift_beginAccess();
  swift_setAtWritableKeyPath();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v11, a4);
}

uint64_t sub_21F87D814@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v21 = a1;
  uint64_t v22 = a4;
  uint64_t v24 = a2;
  uint64_t v25 = a5;
  uint64_t v23 = *(void *)(a3 - 8);
  uint64_t v6 = v23;
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  unsigned int v11 = (char *)&v21 - v10;
  uint64_t v13 = *v12;
  uint64_t v14 = type metadata accessor for ModifiedAxisMark();
  swift_beginAccess();
  uint64_t v15 = *(void *)(v13 + 40);
  v27[0] = *(void *)(v13 + 32);
  v27[1] = v15;
  long long v28 = *(_OWORD *)(v13 + 48);
  swift_retain();
  swift_retain();
  unsigned int v16 = (void (*)(void *, void))swift_readAtKeyPath();
  int v17 = *(void (**)(char *))(v6 + 16);
  v17(v11);
  v16(v26, 0);
  swift_release();
  swift_release();
  uint64_t v18 = v21;
  ((void (*)(char *, uint64_t, uint64_t))v17)(v8, v21 + *(int *)(v14 + 48), a3);
  swift_beginAccess();
  swift_setAtWritableKeyPath();
  swift_endAccess();
  v26[0] = v13;
  (*(void (**)(void *__return_ptr, uint64_t, void *))(v22 + 16))(v27, v18, v26);
  uint64_t v19 = v27[0];
  ((void (*)(char *, char *, uint64_t))v17)(v8, v11, a3);
  swift_beginAccess();
  swift_setAtWritableKeyPath();
  swift_endAccess();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v11, a3);
  *uint64_t v25 = v19;
  return result;
}

uint64_t sub_21F87DA8C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_21F87D5B0(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t sub_21F87DA9C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  return sub_21F87D814(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t sub_21F87DAAC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a2;
  swift_beginAccess();
  double v8 = *(double *)(v7 + 48);
  double v9 = *(double *)(v7 + 56);
  uint64_t v10 = (double *)(a1 + *(int *)(type metadata accessor for OffsetAxisMark() + 36));
  *(double *)(v7 + 48) = v8 + *v10;
  *(double *)(v7 + 56) = v9 + v10[1];
  uint64_t v12 = v7;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a4 + 8))(a1, &v12, a3, a4);
  *(double *)(v7 + 48) = v8;
  *(double *)(v7 + 56) = v9;
  return result;
}

void *sub_21F87DB64@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v9 = *a2;
  swift_beginAccess();
  double v10 = *(double *)(v9 + 48);
  double v11 = *(double *)(v9 + 56);
  uint64_t v12 = (double *)(a1 + *(int *)(type metadata accessor for OffsetAxisMark() + 36));
  *(double *)(v9 + 48) = v10 + *v12;
  *(double *)(v9 + 56) = v11 + v12[1];
  uint64_t v15 = v9;
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t *, uint64_t, uint64_t))(a4 + 16))(&v16, a1, &v15, a3, a4);
  uint64_t v14 = v16;
  *(double *)(v9 + 48) = v10;
  *(double *)(v9 + 56) = v11;
  *a5 = v14;
  return result;
}

uint64_t sub_21F87DC34(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_21F87DAAC(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

void *sub_21F87DC40@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return sub_21F87DB64(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t ChartModifiedContent.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t ChartModifiedContent.content.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*ChartModifiedContent.content.modify())()
{
  return nullsub_1;
}

uint64_t ChartModifiedContent.modifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t ChartModifiedContent.modifier.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 36), a1);
}

uint64_t (*ChartModifiedContent.modifier.modify())()
{
  return nullsub_1;
}

uint64_t ChartModifiedContent.init(content:modifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = a5 + *(int *)(type metadata accessor for ChartModifiedContent() + 36);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32);

  return v9(v8, a2, a4);
}

uint64_t type metadata accessor for ChartModifiedContent()
{
  return sub_21F764F08();
}

uint64_t sub_21F87DE40()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_21F87DF10(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  unint64_t v11 = ((v6 + v9) & ~v9) + *(void *)(v8 + 64);
  uint64_t v12 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v8 + 80));
  if (v12 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v15 = *a2;
    uint64_t *v4 = *a2;
    unsigned int v4 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    uint64_t v16 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v16, ((unint64_t)a2 + v10) & v16, v7);
  }
  return v4;
}

uint64_t sub_21F87E06C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t))(v5 + 8);
  unint64_t v7 = (*(void *)(v4 + 56) + a1 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);

  return v6(v7);
}

uint64_t sub_21F87E110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(void *)(v6 + 48) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 48) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_21F87E1B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))((*(void *)(v6 + 40) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 40) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_21F87E260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(void *)(v6 + 32) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 32) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_21F87E308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(void *)(v6 + 24) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 24) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_21F87E3B0(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void sub_21F87E5A8(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x21F87E874);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t initializeWithCopy for ChartInternal.ScaleDef(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  unsigned int v4 = *(unsigned __int16 *)(a2 + 40);
  if (v4 >> 8 <= 0xFE)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    uint64_t v6 = *(void *)(a2 + 24);
    uint64_t v7 = *(void *)(a2 + 32);
    sub_21F785864(v5, v6, v7, v4, SBYTE1(v4));
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = v7;
    *(_WORD *)(a1 + 40) = v4;
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  }
  unsigned int v8 = *(unsigned __int8 *)(a2 + 64);
  if (v8 <= 0xFB)
  {
    uint64_t v10 = *(void *)(a2 + 48);
    uint64_t v9 = *(void *)(a2 + 56);
    sub_21F7A674C(v10, v9, v8);
    *(void *)(a1 + 48) = v10;
    *(void *)(a1 + 56) = v9;
    *(unsigned char *)(a1 + 64) = v8;
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  }
  return a1;
}

uint64_t assignWithCopy for ChartInternal.ScaleDef(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = (long long *)(a1 + 16);
  uint64_t v6 = (long long *)(a2 + 2);
  unsigned int v7 = *((unsigned __int16 *)a2 + 20);
  unsigned int v8 = v7 >> 8;
  if (*(unsigned __int8 *)(a1 + 41) == 255)
  {
    if (v8 <= 0xFE)
    {
      uint64_t v11 = a2[2];
      uint64_t v12 = a2[3];
      uint64_t v13 = a2[4];
      sub_21F785864(v11, v12, v13, v7, SBYTE1(v7));
      *(void *)(a1 + 16) = v11;
      *(void *)(a1 + 24) = v12;
      *(void *)(a1 + 32) = v13;
      *(_WORD *)(a1 + 40) = v7;
    }
    else
    {
      long long v9 = *v6;
      *(_OWORD *)(a1 + 26) = *(_OWORD *)((char *)a2 + 26);
      *uint64_t v5 = v9;
    }
  }
  else if (v8 <= 0xFE)
  {
    uint64_t v14 = a2[2];
    uint64_t v15 = a2[3];
    uint64_t v16 = a2[4];
    sub_21F785864(v14, v15, v16, v7, SBYTE1(v7));
    uint64_t v17 = *(void *)(a1 + 16);
    uint64_t v18 = *(void *)(a1 + 24);
    uint64_t v19 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = v14;
    *(void *)(a1 + 24) = v15;
    *(void *)(a1 + 32) = v16;
    unsigned __int8 v20 = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v7;
    char v21 = *(unsigned char *)(a1 + 41);
    *(unsigned char *)(a1 + 41) = BYTE1(v7);
    sub_21F785F30(v17, v18, v19, v20, v21);
  }
  else
  {
    sub_21F7A6990(a1 + 16);
    long long v10 = *(long long *)((char *)v6 + 10);
    *uint64_t v5 = *v6;
    *(long long *)((char *)v5 + 10) = v10;
  }
  unint64_t v22 = (_OWORD *)(a1 + 48);
  uint64_t v23 = a2 + 6;
  unsigned int v24 = *((unsigned __int8 *)a2 + 64);
  if (*(unsigned __int8 *)(a1 + 64) <= 0xFBu)
  {
    if (v24 <= 0xFB)
    {
      uint64_t v30 = a2[6];
      uint64_t v29 = a2[7];
      sub_21F7A674C(v30, v29, v24);
      uint64_t v31 = *(void *)(a1 + 48);
      uint64_t v32 = *(void *)(a1 + 56);
      *(void *)(a1 + 48) = v30;
      *(void *)(a1 + 56) = v29;
      unsigned __int8 v33 = *(unsigned char *)(a1 + 64);
      *(unsigned char *)(a1 + 64) = v24;
      sub_21F7A5BF8(v31, v32, v33);
    }
    else
    {
      sub_21F7A69E4(a1 + 48);
      char v26 = *((unsigned char *)a2 + 64);
      *unint64_t v22 = *v23;
      *(unsigned char *)(a1 + 64) = v26;
    }
  }
  else if (v24 <= 0xFB)
  {
    uint64_t v28 = a2[6];
    uint64_t v27 = a2[7];
    sub_21F7A674C(v28, v27, v24);
    *(void *)(a1 + 48) = v28;
    *(void *)(a1 + 56) = v27;
    *(unsigned char *)(a1 + 64) = v24;
  }
  else
  {
    long long v25 = *v23;
    *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 + 64);
    *unint64_t v22 = v25;
  }
  return a1;
}

__n128 initializeWithTake for ChartInternal.ScaleDef(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for ChartInternal.ScaleDef(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v4 = (_OWORD *)(a1 + 16);
  uint64_t v5 = (_OWORD *)(a2 + 16);
  unsigned int v6 = *(unsigned __int16 *)(a1 + 40);
  if (v6 >> 8 > 0xFE) {
    goto LABEL_4;
  }
  unsigned int v7 = *(unsigned __int16 *)(a2 + 40);
  if (v7 >> 8 > 0xFE)
  {
    sub_21F7A6990(a1 + 16);
LABEL_4:
    _OWORD *v4 = *v5;
    *(_OWORD *)((char *)v4 + 10) = *(_OWORD *)((char *)v5 + 10);
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v8;
  *(_WORD *)(a1 + 40) = v7;
  sub_21F785F30(v9, v10, v11, v6, SBYTE1(v6));
LABEL_6:
  uint64_t v12 = (_OWORD *)(a2 + 48);
  unsigned int v13 = *(unsigned __int8 *)(a1 + 64);
  if (v13 <= 0xFB)
  {
    unsigned int v14 = *(unsigned __int8 *)(a2 + 64);
    if (v14 <= 0xFB)
    {
      uint64_t v15 = *(void *)(a1 + 48);
      uint64_t v16 = *(void *)(a1 + 56);
      *(_OWORD *)(a1 + 48) = *v12;
      *(unsigned char *)(a1 + 64) = v14;
      sub_21F7A5BF8(v15, v16, v13);
      return a1;
    }
    sub_21F7A69E4(a1 + 48);
  }
  *(_OWORD *)(a1 + 48) = *v12;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for ChartInternal.ScaleDef(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = (v3 ^ 0xFF) - 1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ChartInternal.ScaleDef(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = ~(_BYTE)a2;
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ChartInternal.ScaleRange(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_21F8821FC(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_21F7A674C);
}

uint64_t destroy for ChartInternal.ScaleRange(uint64_t a1)
{
  return sub_21F7A5BF8(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t *assignWithCopy for ChartInternal.ScaleRange(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_21F882278(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_21F7A674C, (void (*)(uint64_t, uint64_t, uint64_t))sub_21F7A5BF8);
}

uint64_t *assignWithTake for ChartInternal.ScaleRange(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_21F8822FC(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_21F7A5BF8);
}

uint64_t getEnumTagSinglePayload for ChartInternal.ScaleRange(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x39 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 57);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 16) >> 5) & 0xFFFFFFC7 | (8 * ((*(unsigned __int8 *)(a1 + 16) >> 2) & 7))) ^ 0x3F;
  if (v3 >= 0x38) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ChartInternal.ScaleRange(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x38)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 57;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x39) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x39) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = 0;
      *(unsigned char *)(result + 16) = 4 * (((-a2 >> 3) & 7) - 8 * a2);
    }
  }
  return result;
}

uint64_t sub_21F87EE24(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) >> 5;
}

uint64_t sub_21F87EE30(uint64_t result)
{
  *(unsigned char *)(result + 16) &= 0x1Fu;
  return result;
}

uint64_t sub_21F87EE40(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = *(unsigned char *)(result + 16) & 3 | (32 * a2);
  return result;
}

ValueMetadata *type metadata accessor for ChartInternal.ScaleRange()
{
  return &type metadata for ChartInternal.ScaleRange;
}

uint64_t sub_21F87EE64(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25);
}

uint64_t sub_21F87EE6C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 25) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ChartInternal.ScaleDomain()
{
  return &type metadata for ChartInternal.ScaleDomain;
}

uint64_t sub_21F87EE84(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    uint64_t v8 = a2[6];
    *(void *)(v4 + 40) = a2[5];
    *(void *)(v4 + 48) = v8;
    uint64_t v9 = a2[13];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v9 == 1)
    {
      long long v10 = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(v4 + 72) = v10;
      *(_OWORD *)(v4 + 88) = *(_OWORD *)(a2 + 11);
      *(void *)(v4 + 104) = a2[13];
    }
    else
    {
      *(_WORD *)(v4 + 56) = *((_WORD *)a2 + 28);
      *(_OWORD *)(v4 + 64) = *((_OWORD *)a2 + 4);
      *(unsigned char *)(v4 + 80) = *((unsigned char *)a2 + 80);
      *(void *)(v4 + 88) = a2[11];
      *(unsigned char *)(v4 + 96) = *((unsigned char *)a2 + 96);
      *(void *)(v4 + 104) = v9;
      swift_retain();
    }
    uint64_t v12 = (_OWORD *)(v4 + 112);
    unsigned int v13 = a2 + 14;
    int v14 = *((unsigned __int8 *)a2 + 152);
    if (v14 == 255)
    {
      long long v15 = *((_OWORD *)a2 + 8);
      *uint64_t v12 = *v13;
      *(_OWORD *)(v4 + 128) = v15;
      *(_OWORD *)(v4 + 137) = *(_OWORD *)((char *)a2 + 137);
    }
    else
    {
      long long v16 = *(_OWORD *)(a2 + 17);
      *(_OWORD *)(v4 + 136) = v16;
      (**(void (***)(_OWORD *, _OWORD *))(v16 - 8))(v12, v13);
      *(unsigned char *)(v4 + 152) = (v14 & 1) != 0;
    }
    uint64_t v17 = (_OWORD *)(v4 + 160);
    uint64_t v18 = a2 + 20;
    int v19 = *((unsigned __int8 *)a2 + 200);
    if (v19 == 255)
    {
      long long v20 = *((_OWORD *)a2 + 11);
      *uint64_t v17 = *v18;
      *(_OWORD *)(v4 + 176) = v20;
      *(_OWORD *)(v4 + 185) = *(_OWORD *)((char *)a2 + 185);
    }
    else
    {
      long long v21 = *(_OWORD *)(a2 + 23);
      *(_OWORD *)(v4 + 184) = v21;
      (**(void (***)(_OWORD *, _OWORD *))(v21 - 8))(v17, v18);
      *(unsigned char *)(v4 + 200) = (v19 & 1) != 0;
    }
    unint64_t v22 = (_OWORD *)(v4 + 208);
    uint64_t v23 = a2 + 26;
    int v24 = *((unsigned __int8 *)a2 + 248);
    if (v24 == 255)
    {
      long long v25 = *((_OWORD *)a2 + 14);
      *unint64_t v22 = *v23;
      *(_OWORD *)(v4 + 224) = v25;
      *(_OWORD *)(v4 + 233) = *(_OWORD *)((char *)a2 + 233);
    }
    else
    {
      long long v26 = *(_OWORD *)(a2 + 29);
      *(_OWORD *)(v4 + 232) = v26;
      (**(void (***)(_OWORD *, _OWORD *))(v26 - 8))(v22, v23);
      *(unsigned char *)(v4 + 248) = (v24 & 1) != 0;
    }
    uint64_t v27 = (BOOL *)(v4 + 296);
    uint64_t v28 = (_OWORD *)(v4 + 256);
    uint64_t v29 = a2 + 32;
    int v30 = *((unsigned __int8 *)a2 + 296);
    if (v30 == 255)
    {
      long long v31 = *((_OWORD *)a2 + 17);
      *uint64_t v28 = *v29;
      *(_OWORD *)(v4 + 272) = v31;
      *(_OWORD *)(v4 + 281) = *(_OWORD *)((char *)a2 + 281);
    }
    else
    {
      uint64_t v32 = a2[35];
      uint64_t v33 = a2[36];
      *(void *)(v4 + 280) = v32;
      *(void *)(v4 + 288) = v33;
      (**(void (***)(_OWORD *, _OWORD *))(v32 - 8))(v28, v29);
      *uint64_t v27 = (v30 & 1) != 0;
    }
    long long v34 = (_OWORD *)(v4 + 304);
    long long v35 = a2 + 38;
    int v36 = *((unsigned __int8 *)a2 + 344);
    if (v36 == 255)
    {
      long long v37 = *((_OWORD *)a2 + 20);
      *long long v34 = *v35;
      *(_OWORD *)(v4 + 320) = v37;
      *(_OWORD *)(v4 + 329) = *(_OWORD *)((char *)a2 + 329);
    }
    else
    {
      uint64_t v38 = a2[41];
      uint64_t v39 = a2[42];
      *(void *)(v4 + 328) = v38;
      *(void *)(v4 + 336) = v39;
      (**(void (***)(_OWORD *, _OWORD *))(v38 - 8))(v34, v35);
      *(unsigned char *)(v4 + 344) = (v36 & 1) != 0;
    }
    uint64_t v40 = (_OWORD *)(v4 + 352);
    uint64_t v41 = a2 + 44;
    int v42 = *((unsigned __int8 *)a2 + 392);
    if (v42 == 255)
    {
      long long v43 = *((_OWORD *)a2 + 23);
      *uint64_t v40 = *v41;
      *(_OWORD *)(v4 + 368) = v43;
      *(_OWORD *)(v4 + 377) = *(_OWORD *)((char *)a2 + 377);
    }
    else
    {
      uint64_t v44 = a2[47];
      uint64_t v45 = a2[48];
      *(void *)(v4 + 376) = v44;
      *(void *)(v4 + 384) = v45;
      (**(void (***)(_OWORD *, _OWORD *))(v44 - 8))(v40, v41);
      *(unsigned char *)(v4 + 392) = (v42 & 1) != 0;
    }
    *(_WORD *)(v4 + 393) = *(_WORD *)((char *)a2 + 393);
    uint64_t v46 = a3[9];
    uint64_t v47 = v4 + v46;
    uint64_t v48 = (uint64_t)a2 + v46;
    uint64_t v49 = sub_21FA24220();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 16))(v47, v48, v49);
    uint64_t v50 = (int *)type metadata accessor for ChartEnvironmentValues(0);
    uint64_t v51 = v50[5];
    uint64_t v52 = v47 + v51;
    uint64_t v53 = v48 + v51;
    uint64_t v54 = sub_21FA24320();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 16))(v52, v53, v54);
    uint64_t v55 = v50[6];
    uint64_t v56 = v47 + v55;
    uint64_t v57 = v48 + v55;
    uint64_t v58 = sub_21FA24970();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 16))(v56, v57, v58);
    *(void *)(v47 + v50[7]) = *(void *)(v48 + v50[7]);
    uint64_t v59 = v50[8];
    uint64_t v60 = v47 + v59;
    uint64_t v61 = v48 + v59;
    uint64_t v62 = sub_21FA24730();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 16))(v60, v61, v62);
    *(unsigned char *)(v47 + v50[9]) = *(unsigned char *)(v48 + v50[9]);
    uint64_t v63 = a3[10];
    uint64_t v64 = a3[11];
    uint64_t v65 = v4 + v63;
    uint64_t v66 = (uint64_t)a2 + v63;
    *(unsigned char *)(v65 + 8) = *(unsigned char *)(v66 + 8);
    *(void *)uint64_t v65 = *(void *)v66;
    uint64_t v67 = v4 + v64;
    uint64_t v68 = (uint64_t)a2 + v64;
    *(void *)uint64_t v67 = *(void *)v68;
    *(unsigned char *)(v67 + 8) = *(unsigned char *)(v68 + 8);
  }
  return v4;
}

uint64_t sub_21F87F3E8(uint64_t a1, uint64_t a2, int *a3)
{
  sub_21F7ABEA8((uint64_t *)a1, (uint64_t *)a2);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned int v6 = (_OWORD *)(a1 + 56);
  long long v7 = (long long *)(a2 + 56);
  uint64_t v8 = *(void *)(a2 + 104);
  if (*(void *)(a1 + 104) == 1)
  {
    if (v8 == 1)
    {
      long long v9 = *v7;
      long long v10 = *(_OWORD *)(a2 + 72);
      long long v11 = *(_OWORD *)(a2 + 88);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(_OWORD *)(a1 + 72) = v10;
      *(_OWORD *)(a1 + 88) = v11;
      *unsigned int v6 = v9;
    }
    else
    {
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
      long long v15 = *(_OWORD *)(a2 + 64);
      *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = v15;
      uint64_t v16 = *(void *)(a2 + 88);
      *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
      *(void *)(a1 + 88) = v16;
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_retain();
    }
  }
  else if (v8 == 1)
  {
    sub_21F87FB60(a1 + 56);
    long long v13 = *(_OWORD *)(a2 + 72);
    long long v12 = *(_OWORD *)(a2 + 88);
    long long v14 = *v7;
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)(a1 + 72) = v13;
    *(_OWORD *)(a1 + 88) = v12;
    *unsigned int v6 = v14;
  }
  else
  {
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
    long long v17 = *(_OWORD *)(a2 + 64);
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v17;
    uint64_t v18 = *(void *)(a2 + 88);
    *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
    *(void *)(a1 + 88) = v18;
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    swift_retain();
    swift_release();
  }
  int v19 = (long long *)(a1 + 112);
  long long v20 = (long long *)(a2 + 112);
  int v21 = *(unsigned __int8 *)(a2 + 152);
  if (*(unsigned __int8 *)(a1 + 152) == 255)
  {
    if (v21 == 255)
    {
      long long v24 = *v20;
      long long v25 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
      *int v19 = v24;
      *(_OWORD *)(a1 + 128) = v25;
      goto LABEL_18;
    }
    goto LABEL_15;
  }
  if (v21 == 255)
  {
    sub_21F7B25D8(a1 + 112);
    long long v22 = *(_OWORD *)(a2 + 137);
    long long v23 = *(_OWORD *)(a2 + 128);
    *int v19 = *v20;
    *(_OWORD *)(a1 + 128) = v23;
    *(_OWORD *)(a1 + 137) = v22;
    goto LABEL_18;
  }
  if (a1 != a2)
  {
    sub_21F7B25D8(a1 + 112);
    LOBYTE(v21) = *(unsigned char *)(a2 + 152);
LABEL_15:
    uint64_t v26 = *(void *)(a2 + 136);
    *(void *)(a1 + 136) = v26;
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    (**(void (***)(uint64_t, uint64_t))(v26 - 8))(a1 + 112, a2 + 112);
    *(unsigned char *)(a1 + 152) = (v21 & 1) != 0;
  }
LABEL_18:
  uint64_t v27 = (long long *)(a1 + 160);
  uint64_t v28 = (long long *)(a2 + 160);
  int v29 = *(unsigned __int8 *)(a2 + 200);
  if (*(unsigned __int8 *)(a1 + 200) == 255)
  {
    if (v29 == 255)
    {
      long long v32 = *v28;
      long long v33 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
      *uint64_t v27 = v32;
      *(_OWORD *)(a1 + 176) = v33;
      goto LABEL_28;
    }
    goto LABEL_25;
  }
  if (v29 == 255)
  {
    sub_21F7B26E4(a1 + 160);
    long long v30 = *(_OWORD *)(a2 + 185);
    long long v31 = *(_OWORD *)(a2 + 176);
    *uint64_t v27 = *v28;
    *(_OWORD *)(a1 + 176) = v31;
    *(_OWORD *)(a1 + 185) = v30;
    goto LABEL_28;
  }
  if (a1 != a2)
  {
    sub_21F7B26E4(a1 + 160);
    LOBYTE(v29) = *(unsigned char *)(a2 + 200);
LABEL_25:
    uint64_t v34 = *(void *)(a2 + 184);
    *(void *)(a1 + 184) = v34;
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    (**(void (***)(uint64_t, uint64_t))(v34 - 8))(a1 + 160, a2 + 160);
    *(unsigned char *)(a1 + 200) = (v29 & 1) != 0;
  }
LABEL_28:
  long long v35 = (long long *)(a1 + 208);
  int v36 = (long long *)(a2 + 208);
  int v37 = *(unsigned __int8 *)(a2 + 248);
  if (*(unsigned __int8 *)(a1 + 248) == 255)
  {
    if (v37 == 255)
    {
      long long v40 = *v36;
      long long v41 = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 233) = *(_OWORD *)(a2 + 233);
      *long long v35 = v40;
      *(_OWORD *)(a1 + 224) = v41;
      goto LABEL_38;
    }
    goto LABEL_35;
  }
  if (v37 == 255)
  {
    sub_21F7B25D8(a1 + 208);
    long long v38 = *(_OWORD *)(a2 + 233);
    long long v39 = *(_OWORD *)(a2 + 224);
    *long long v35 = *v36;
    *(_OWORD *)(a1 + 224) = v39;
    *(_OWORD *)(a1 + 233) = v38;
    goto LABEL_38;
  }
  if (a1 != a2)
  {
    sub_21F7B25D8(a1 + 208);
    LOBYTE(v37) = *(unsigned char *)(a2 + 248);
LABEL_35:
    uint64_t v42 = *(void *)(a2 + 232);
    *(void *)(a1 + 232) = v42;
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    (**(void (***)(uint64_t, uint64_t))(v42 - 8))(a1 + 208, a2 + 208);
    *(unsigned char *)(a1 + 248) = (v37 & 1) != 0;
  }
LABEL_38:
  long long v43 = (BOOL *)(a1 + 296);
  uint64_t v44 = (long long *)(a1 + 256);
  uint64_t v45 = (long long *)(a2 + 256);
  int v46 = *(unsigned __int8 *)(a2 + 296);
  if (*(unsigned __int8 *)(a1 + 296) == 255)
  {
    if (v46 == 255)
    {
      long long v49 = *v45;
      long long v50 = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 281) = *(_OWORD *)(a2 + 281);
      *uint64_t v44 = v49;
      *(_OWORD *)(a1 + 272) = v50;
      goto LABEL_48;
    }
    goto LABEL_45;
  }
  if (v46 == 255)
  {
    sub_21F7B26E4(a1 + 256);
    long long v47 = *(_OWORD *)(a2 + 281);
    long long v48 = *(_OWORD *)(a2 + 272);
    *uint64_t v44 = *v45;
    *(_OWORD *)(a1 + 272) = v48;
    *(_OWORD *)(a1 + 281) = v47;
    goto LABEL_48;
  }
  if (a1 != a2)
  {
    sub_21F7B26E4(a1 + 256);
    LOBYTE(v46) = *(unsigned char *)(a2 + 296);
LABEL_45:
    uint64_t v51 = *(void *)(a2 + 280);
    *(void *)(a1 + 280) = v51;
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    (**(void (***)(uint64_t, uint64_t))(v51 - 8))(a1 + 256, a2 + 256);
    *long long v43 = (v46 & 1) != 0;
  }
LABEL_48:
  uint64_t v52 = (long long *)(a1 + 304);
  uint64_t v53 = (long long *)(a2 + 304);
  int v54 = *(unsigned __int8 *)(a2 + 344);
  if (*(unsigned __int8 *)(a1 + 344) == 255)
  {
    if (v54 == 255)
    {
      long long v57 = *v53;
      long long v58 = *(_OWORD *)(a2 + 320);
      *(_OWORD *)(a1 + 329) = *(_OWORD *)(a2 + 329);
      *uint64_t v52 = v57;
      *(_OWORD *)(a1 + 320) = v58;
      goto LABEL_58;
    }
    goto LABEL_55;
  }
  if (v54 == 255)
  {
    sub_21F7B25D8(a1 + 304);
    long long v55 = *(_OWORD *)(a2 + 329);
    long long v56 = *(_OWORD *)(a2 + 320);
    *uint64_t v52 = *v53;
    *(_OWORD *)(a1 + 320) = v56;
    *(_OWORD *)(a1 + 329) = v55;
    goto LABEL_58;
  }
  if (a1 != a2)
  {
    sub_21F7B25D8(a1 + 304);
    LOBYTE(v54) = *(unsigned char *)(a2 + 344);
LABEL_55:
    uint64_t v59 = *(void *)(a2 + 328);
    *(void *)(a1 + 328) = v59;
    *(void *)(a1 + 336) = *(void *)(a2 + 336);
    (**(void (***)(uint64_t, uint64_t))(v59 - 8))(a1 + 304, a2 + 304);
    *(unsigned char *)(a1 + 344) = (v54 & 1) != 0;
  }
LABEL_58:
  uint64_t v60 = (long long *)(a1 + 352);
  uint64_t v61 = (long long *)(a2 + 352);
  int v62 = *(unsigned __int8 *)(a2 + 392);
  if (*(unsigned __int8 *)(a1 + 392) == 255)
  {
    if (v62 == 255)
    {
      long long v65 = *v61;
      long long v66 = *(_OWORD *)(a2 + 368);
      *(_OWORD *)(a1 + 377) = *(_OWORD *)(a2 + 377);
      *uint64_t v60 = v65;
      *(_OWORD *)(a1 + 368) = v66;
      goto LABEL_68;
    }
  }
  else
  {
    if (v62 == 255)
    {
      sub_21F7B26E4(a1 + 352);
      long long v63 = *(_OWORD *)(a2 + 377);
      long long v64 = *(_OWORD *)(a2 + 368);
      *uint64_t v60 = *v61;
      *(_OWORD *)(a1 + 368) = v64;
      *(_OWORD *)(a1 + 377) = v63;
      goto LABEL_68;
    }
    if (a1 == a2) {
      goto LABEL_68;
    }
    sub_21F7B26E4(a1 + 352);
    LOBYTE(v62) = *(unsigned char *)(a2 + 392);
  }
  uint64_t v67 = *(void *)(a2 + 376);
  *(void *)(a1 + 376) = v67;
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  (**(void (***)(uint64_t, uint64_t))(v67 - 8))(a1 + 352, a2 + 352);
  *(unsigned char *)(a1 + 392) = (v62 & 1) != 0;
LABEL_68:
  *(unsigned char *)(a1 + 393) = *(unsigned char *)(a2 + 393);
  *(unsigned char *)(a1 + 394) = *(unsigned char *)(a2 + 394);
  uint64_t v68 = a3[9];
  uint64_t v69 = a1 + v68;
  uint64_t v70 = a2 + v68;
  uint64_t v71 = sub_21FA24220();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 24))(v69, v70, v71);
  double v72 = (int *)type metadata accessor for ChartEnvironmentValues(0);
  uint64_t v73 = v72[5];
  uint64_t v74 = v69 + v73;
  uint64_t v75 = v70 + v73;
  uint64_t v76 = sub_21FA24320();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 24))(v74, v75, v76);
  uint64_t v77 = v72[6];
  uint64_t v78 = v69 + v77;
  uint64_t v79 = v70 + v77;
  uint64_t v80 = sub_21FA24970();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 24))(v78, v79, v80);
  *(void *)(v69 + v72[7]) = *(void *)(v70 + v72[7]);
  uint64_t v81 = v72[8];
  uint64_t v82 = v69 + v81;
  uint64_t v83 = v70 + v81;
  uint64_t v84 = sub_21FA24730();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 24))(v82, v83, v84);
  *(unsigned char *)(v69 + v72[9]) = *(unsigned char *)(v70 + v72[9]);
  uint64_t v85 = a3[10];
  uint64_t v86 = a1 + v85;
  uint64_t v87 = a2 + v85;
  char v88 = *(unsigned char *)(v87 + 8);
  *(void *)uint64_t v86 = *(void *)v87;
  *(unsigned char *)(v86 + 8) = v88;
  uint64_t v89 = a3[11];
  uint64_t v90 = a1 + v89;
  uint64_t v91 = a2 + v89;
  char v92 = *(unsigned char *)(v91 + 8);
  *(void *)uint64_t v90 = *(void *)v91;
  *(unsigned char *)(v90 + 8) = v92;
  return a1;
}

uint64_t sub_21F87FB60(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F87FBB4(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  long long v7 = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v7;
  memcpy((void *)(a1 + 112), (const void *)(a2 + 112), 0x11BuLL);
  uint64_t v8 = a3[9];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_21FA24220();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  long long v12 = (int *)type metadata accessor for ChartEnvironmentValues(0);
  uint64_t v13 = v12[5];
  uint64_t v14 = v9 + v13;
  uint64_t v15 = v10 + v13;
  uint64_t v16 = sub_21FA24320();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
  uint64_t v17 = v12[6];
  uint64_t v18 = v9 + v17;
  uint64_t v19 = v10 + v17;
  uint64_t v20 = sub_21FA24970();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
  *(void *)(v9 + v12[7]) = *(void *)(v10 + v12[7]);
  uint64_t v21 = v12[8];
  uint64_t v22 = v9 + v21;
  uint64_t v23 = v10 + v21;
  uint64_t v24 = sub_21FA24730();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 32))(v22, v23, v24);
  *(unsigned char *)(v9 + v12[9]) = *(unsigned char *)(v10 + v12[9]);
  uint64_t v25 = a3[10];
  uint64_t v26 = a3[11];
  uint64_t v27 = a1 + v25;
  uint64_t v28 = a2 + v25;
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
  *(void *)uint64_t v27 = *(void *)v28;
  uint64_t v29 = a1 + v26;
  uint64_t v30 = a2 + v26;
  *(void *)uint64_t v29 = *(void *)v30;
  *(unsigned char *)(v29 + 8) = *(unsigned char *)(v30 + 8);
  return a1;
}

uint64_t sub_21F87FDB8(uint64_t a1, uint64_t a2, int *a3)
{
  _s6Charts15AnyChartContentVwxx_0(a1);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 104) == 1) {
    goto LABEL_4;
  }
  uint64_t v8 = *(void *)(a2 + 104);
  if (v8 == 1)
  {
    sub_21F87FB60(a1 + 56);
LABEL_4:
    long long v9 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v9;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    goto LABEL_6;
  }
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  swift_release();
LABEL_6:
  if (*(unsigned __int8 *)(a1 + 152) == 255)
  {
LABEL_10:
    long long v10 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v10;
    *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
    goto LABEL_11;
  }
  if (*(unsigned __int8 *)(a2 + 152) == 255 || a1 != a2)
  {
    sub_21F7B25D8(a1 + 112);
    goto LABEL_10;
  }
LABEL_11:
  if (*(unsigned __int8 *)(a1 + 200) == 255)
  {
LABEL_15:
    long long v11 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v11;
    *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
    goto LABEL_16;
  }
  if (*(unsigned __int8 *)(a2 + 200) == 255 || a1 != a2)
  {
    sub_21F7B26E4(a1 + 160);
    goto LABEL_15;
  }
LABEL_16:
  if (*(unsigned __int8 *)(a1 + 248) == 255)
  {
LABEL_20:
    long long v12 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v12;
    *(_OWORD *)(a1 + 233) = *(_OWORD *)(a2 + 233);
    goto LABEL_21;
  }
  if (*(unsigned __int8 *)(a2 + 248) == 255 || a1 != a2)
  {
    sub_21F7B25D8(a1 + 208);
    goto LABEL_20;
  }
LABEL_21:
  if (*(unsigned __int8 *)(a1 + 296) == 255)
  {
LABEL_25:
    long long v13 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v13;
    *(_OWORD *)(a1 + 281) = *(_OWORD *)(a2 + 281);
    goto LABEL_26;
  }
  if (*(unsigned __int8 *)(a2 + 296) == 255 || a1 != a2)
  {
    sub_21F7B26E4(a1 + 256);
    goto LABEL_25;
  }
LABEL_26:
  if (*(unsigned __int8 *)(a1 + 344) == 255)
  {
LABEL_30:
    long long v14 = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 320) = v14;
    *(_OWORD *)(a1 + 329) = *(_OWORD *)(a2 + 329);
    goto LABEL_31;
  }
  if (*(unsigned __int8 *)(a2 + 344) == 255 || a1 != a2)
  {
    sub_21F7B25D8(a1 + 304);
    goto LABEL_30;
  }
LABEL_31:
  if (*(unsigned __int8 *)(a1 + 392) == 255)
  {
LABEL_35:
    long long v15 = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 368) = v15;
    *(_OWORD *)(a1 + 377) = *(_OWORD *)(a2 + 377);
    goto LABEL_36;
  }
  if (*(unsigned __int8 *)(a2 + 392) == 255 || a1 != a2)
  {
    sub_21F7B26E4(a1 + 352);
    goto LABEL_35;
  }
LABEL_36:
  *(unsigned char *)(a1 + 393) = *(unsigned char *)(a2 + 393);
  *(unsigned char *)(a1 + 394) = *(unsigned char *)(a2 + 394);
  uint64_t v16 = a3[9];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = sub_21FA24220();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 40))(v17, v18, v19);
  uint64_t v20 = (int *)type metadata accessor for ChartEnvironmentValues(0);
  uint64_t v21 = v20[5];
  uint64_t v22 = v17 + v21;
  uint64_t v23 = v18 + v21;
  uint64_t v24 = sub_21FA24320();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 40))(v22, v23, v24);
  uint64_t v25 = v20[6];
  uint64_t v26 = v17 + v25;
  uint64_t v27 = v18 + v25;
  uint64_t v28 = sub_21FA24970();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 40))(v26, v27, v28);
  *(void *)(v17 + v20[7]) = *(void *)(v18 + v20[7]);
  uint64_t v29 = v20[8];
  uint64_t v30 = v17 + v29;
  uint64_t v31 = v18 + v29;
  uint64_t v32 = sub_21FA24730();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 40))(v30, v31, v32);
  *(unsigned char *)(v17 + v20[9]) = *(unsigned char *)(v18 + v20[9]);
  uint64_t v33 = a3[10];
  uint64_t v34 = a3[11];
  uint64_t v35 = a1 + v33;
  uint64_t v36 = a2 + v33;
  *(unsigned char *)(v35 + 8) = *(unsigned char *)(v36 + 8);
  *(void *)uint64_t v35 = *(void *)v36;
  uint64_t v37 = a1 + v34;
  uint64_t v38 = a2 + v34;
  *(void *)uint64_t v37 = *(void *)v38;
  *(unsigned char *)(v37 + 8) = *(unsigned char *)(v38 + 8);
  return a1;
}

uint64_t sub_21F8801A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F8801BC);
}

uint64_t sub_21F8801BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for ChartEnvironmentValues(0);
    long long v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_21F88026C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F880280);
}

uint64_t sub_21F880280(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for ChartEnvironmentValues(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartInternal.ScaleType()
{
  return &type metadata for ChartInternal.ScaleType;
}

uint64_t sub_21F880338@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 - 8);
  __n128 v9 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))((char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v9);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = sub_21FA25F50();
  uint64_t v13 = sub_21F752060(v12, AssociatedTypeWitness, a3);
  char v15 = v14;
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, a2);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = v13;
  *(unsigned char *)(a4 + 24) = 0;
  *(unsigned char *)(a4 + 25) = v15;
  return result;
}

uint64_t (*sub_21F880490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = a3;
  v12[3] = a4;
  v12[4] = a5;
  v12[5] = a6;
  v12[6] = a1;
  v12[7] = a2;
  return sub_21F88217C;
}

uint64_t (*sub_21F880510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = a3;
  v12[3] = a4;
  v12[4] = a5;
  v12[5] = a6;
  v12[6] = a1;
  v12[7] = a2;
  return sub_21F882094;
}

uint64_t (*sub_21F880590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = a3;
  v8[3] = a4;
  _OWORD v8[4] = a1;
  v8[5] = a2;
  return sub_21F881FF4;
}

double (*sub_21F8805FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = a3;
  v8[3] = a4;
  _OWORD v8[4] = a1;
  v8[5] = a2;
  return sub_21F881FA8;
}

uint64_t sub_21F880668(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v21 = a7;
  uint64_t v22 = a5;
  uint64_t v15 = sub_21FA26340();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v21 - v17;
  sub_21F7607AC(a1, a2, a3);
  sub_21F9FEDD4(a1, a2, a3, a6, a8, v18);
  uint64_t v24 = a6;
  uint64_t v25 = v21;
  uint64_t v26 = a8;
  uint64_t v27 = a9;
  uint64_t v28 = a4;
  uint64_t v29 = v22;
  sub_21F769724((void (*)(char *, char *))sub_21F8821AC, (uint64_t)v23, MEMORY[0x263F8E628], MEMORY[0x263F188A8], v19, (uint64_t)&v31);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  uint64_t result = v31;
  if (!v31)
  {
    uint64_t v30 = sub_21FA25560();
    return sub_21FA245C0();
  }
  return result;
}

uint64_t sub_21F880808@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  __n128 v3 = MEMORY[0x270FA5388](a1);
  v4(v3);
  uint64_t result = sub_21FA245C0();
  *a2 = result;
  return result;
}

uint64_t sub_21F8808B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v28 = a5;
  uint64_t v15 = sub_21FA26340();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v27 - v17;
  sub_21F7607AC(a1, a2, a3);
  sub_21F9FEDD4(a1, a2, a3, a6, a7, v18);
  uint64_t v30 = a6;
  uint64_t v31 = a7;
  uint64_t v32 = a4;
  uint64_t v33 = v28;
  sub_21F769724((void (*)(char *, char *))sub_21F882000, (uint64_t)v29, MEMORY[0x263F8E628], MEMORY[0x263F18670], v19, (uint64_t)v34);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  uint64_t v21 = v38;
  if (v38)
  {
    uint64_t v22 = v39;
    uint64_t v23 = v37;
    uint64_t v24 = v34;
    int v25 = v35;
    int v26 = v36;
  }
  else
  {
    uint64_t v24 = &v40;
    uint64_t result = sub_21FA24500();
    int v25 = v41;
    int v26 = v42;
    uint64_t v23 = v43;
    uint64_t v21 = v44;
    uint64_t v22 = v45;
  }
  *(void *)a8 = *(void *)v24;
  *(_DWORD *)(a8 + 8) = v25;
  *(_DWORD *)(a8 + 12) = v26;
  *(void *)(a8 + 16) = v23;
  *(void *)(a8 + 24) = v21;
  *(void *)(a8 + 32) = v22;
  return result;
}

uint64_t sub_21F880A8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v24 = a7;
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v16 = sub_21FA26340();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v23 - v18;
  sub_21F7607AC(a1, a2, a3);
  sub_21F9FEDD4(a1, a2, a3, a6, a8, v19);
  uint64_t v28 = a6;
  uint64_t v29 = v24;
  uint64_t v30 = a8;
  uint64_t v31 = a10;
  uint64_t v32 = v25;
  uint64_t v33 = v26;
  sub_21F769724((void (*)(char *, char *))sub_21F8820C4, (uint64_t)v27, MEMORY[0x263F8E628], (uint64_t)&type metadata for AnyChartSymbolShape, v20, (uint64_t)&v34);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  if (*((void *)&v35 + 1))
  {
    long long v22 = v35;
    *(_OWORD *)a9 = v34;
    *(_OWORD *)(a9 + 16) = v22;
    *(void *)(a9 + 32) = v36;
  }
  else
  {
    if (qword_26AD45430 != -1) {
      swift_once();
    }
    sub_21F7C21A4((uint64_t)&qword_26AD521C0, a9);
    return sub_21F88211C((uint64_t)&v34);
  }
  return result;
}

double sub_21F880C74(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = sub_21FA26340();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = &v20[-v16];
  sub_21F7607AC(a1, a2, a3);
  sub_21F9FEDD4(a1, a2, a3, a6, a7, v17);
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  sub_21F769724((void (*)(char *, char *))sub_21F881FB4, (uint64_t)v20, MEMORY[0x263F8E628], MEMORY[0x263F8EF38], v18, (uint64_t)&v25);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  double result = v25;
  if (v26) {
    return 0.0;
  }
  return result;
}

uint64_t sub_21F880DF0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void, void, void)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
  *a3 = result;
  return result;
}

double sub_21F880E30@<D0>(uint64_t a1@<X0>, void (*a2)(_OWORD *__return_ptr, void, void, void)@<X1>, uint64_t a3@<X8>)
{
  a2(v6, *(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
  double result = *(double *)v6;
  long long v5 = v6[1];
  *(_OWORD *)a3 = v6[0];
  *(_OWORD *)(a3 + 16) = v5;
  *(void *)(a3 + 32) = v7;
  return result;
}

uint64_t sub_21F880E8C(uint64_t a1, uint64_t (*a2)(void, void, void))
{
  return a2(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

void sub_21F880EC4(uint64_t a1@<X0>, double (*a2)(void, void, void)@<X1>, double *a3@<X8>)
{
  *a3 = a2(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

uint64_t sub_21F880F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21F880F38(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))sub_21F880F78);
}

uint64_t sub_21F880F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21F880F38(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))sub_21F8812C4);
}

uint64_t sub_21F880F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  return a5(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

BOOL sub_21F880F5C(uint64_t a1, uint64_t a2)
{
  return sub_21F881E60(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

uint64_t sub_21F880F78(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a3)
  {
    case 1:
      if (a6 != 1) {
        return 0;
      }
      uint64_t v19 = swift_allocObject();
      *(void *)(v19 + 16) = a1;
      *(void *)(v19 + 24) = a2;
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = a4;
      *(void *)(v20 + 24) = a5;
      sub_21F76CA40(&qword_267EE7950);
      sub_21F7A67AC(a1, a2, 1u);
      uint64_t v12 = a4;
      uint64_t v13 = a5;
      unsigned __int8 v14 = 1;
      goto LABEL_10;
    case 2:
      if (a6 != 2) {
        return 0;
      }
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = a1;
      *(void *)(v15 + 24) = a2;
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = a4;
      *(void *)(v16 + 24) = a5;
      sub_21F76CA40(&qword_267EE7958);
      sub_21F7A67AC(a1, a2, 2u);
      uint64_t v12 = a4;
      uint64_t v13 = a5;
      unsigned __int8 v14 = 2;
      goto LABEL_10;
    case 3:
      if (a6 != 3) {
        return 0;
      }
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = a1;
      *(void *)(v17 + 24) = a2;
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 16) = a4;
      *(void *)(v18 + 24) = a5;
      sub_21F76CA40(&qword_267EE7960);
      sub_21F7A67AC(a1, a2, 3u);
      uint64_t v12 = a4;
      uint64_t v13 = a5;
      unsigned __int8 v14 = 3;
      goto LABEL_10;
    default:
      if (a6) {
        return 0;
      }
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = a1;
      *(void *)(v10 + 24) = a2;
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = a4;
      *(void *)(v11 + 24) = a5;
      sub_21F76CA40(&qword_267EE7948);
      sub_21F7A67AC(a1, a2, 0);
      uint64_t v12 = a4;
      uint64_t v13 = a5;
      unsigned __int8 v14 = 0;
LABEL_10:
      sub_21F7A67AC(v12, v13, v14);
      uint64_t v21 = AGCompareValues();
      swift_release();
      swift_release();
      return v21;
  }
}

uint64_t sub_21F8812C4(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  switch(a3 >> 5)
  {
    case 1:
      if ((a6 & 0xE0) != 0x20) {
        return 0;
      }
      uint64_t v14 = a4;
      return sub_21F7D3F18(a1, v14);
    case 2:
      if ((a6 & 0xE0) != 0x40) {
        return 0;
      }
      uint64_t v14 = a4;
      return sub_21F7D3F18(a1, v14);
    case 3:
      if ((a6 & 0xE0) != 0x60) {
        return 0;
      }
      uint64_t v15 = (uint64_t *)&unk_26AD44BB0;
      goto LABEL_19;
    case 4:
      if ((a6 & 0xE0) != 0x80) {
        return 0;
      }
      uint64_t v15 = (uint64_t *)&unk_267EE7980;
LABEL_19:
      sub_21F76CA40(v15);
      return AGCompareValues();
    case 5:
      if ((a6 & 0xE0) != 0xA0) {
        return 0;
      }
      sub_21F7A674C(a1, a2, a3);
      sub_21F7A674C(a4, a5, a6);
      char v16 = sub_21FA244A0();
      goto LABEL_28;
    case 6:
      if ((a6 & 0xE0) != 0xC0) {
        return 0;
      }
      return sub_21F7D4410(a1, a4);
    case 7:
      if (a6 <= 0xDFu) {
        return 0;
      }
      sub_21F7A674C(a1, a2, a3);
      sub_21F7A674C(a4, a5, a6);
      char v16 = sub_21F880F78(a1, a2, a3 & 0x1F, a4, a5, a6 & 0x1F);
LABEL_28:
      char v17 = v16;
      sub_21F7A5BF8(a4, a5, a6);
      sub_21F7A5BF8(a1, a2, a3);
      return v17 & 1;
    default:
      BOOL v12 = *(double *)&a2 == *(double *)&a5;
      if (*(double *)&a1 != *(double *)&a4) {
        BOOL v12 = 0;
      }
      return a6 < 0x20u && v12;
  }
}

uint64_t sub_21F8815E4(void **a1, void **a2)
{
  uint64_t v3 = (uint64_t)*a1;
  uint64_t v2 = (uint64_t)a1[1];
  uint64_t v4 = (uint64_t)a1[2];
  unsigned __int8 v5 = *((unsigned char *)a1 + 24);
  char v6 = *((unsigned char *)a1 + 25);
  uint64_t v8 = (uint64_t)*a2;
  uint64_t v7 = (uint64_t)a2[1];
  uint64_t v9 = (uint64_t)a2[2];
  unsigned __int8 v10 = *((unsigned char *)a2 + 24);
  int v11 = *((unsigned __int8 *)a2 + 25);
  switch(v6)
  {
    case 1:
      if (v11 != 1) {
        goto LABEL_11;
      }
      char v12 = sub_21F7D3F18((uint64_t)*a1, (uint64_t)*a2);
      sub_21F785864(v8, v7, v9, v10, 1);
      sub_21F785864(v3, v2, v4, v5, 1);
      sub_21F785F30(v3, v2, v4, v5, 1);
      uint64_t v13 = v8;
      uint64_t v14 = v7;
      uint64_t v15 = v9;
      unsigned __int8 v16 = v10;
      char v17 = 1;
      goto LABEL_8;
    case 2:
      if (v11 != 2) {
        goto LABEL_11;
      }
      char v12 = sub_21F7D3F84(*a1, *a2);
      sub_21F785864(v8, v7, v9, v10, 2);
      sub_21F785864(v3, v2, v4, v5, 2);
      sub_21F785F30(v3, v2, v4, v5, 2);
      uint64_t v13 = v8;
      uint64_t v14 = v7;
      uint64_t v15 = v9;
      unsigned __int8 v16 = v10;
      char v17 = 2;
      goto LABEL_8;
    case 3:
      if (v11 != 3) {
        goto LABEL_11;
      }
      sub_21F785864(v8, v7, v9, v10, 3);
      sub_21F785864(v3, v2, v4, v5, 3);
      sub_21F785864(v8, v7, v9, v10, 3);
      sub_21F785864(v3, v2, v4, v5, 3);
      uint64_t v19 = AGCompareValues();
      sub_21F785F30(v3, v2, v4, v5, 3);
      sub_21F785F30(v8, v7, v9, v10, 3);
      sub_21F785F30(v8, v7, v9, v10, 3);
      sub_21F785F30(v3, v2, v4, v5, 3);
      return v19;
    default:
      if (*((unsigned char *)a2 + 25))
      {
LABEL_11:
        sub_21F785864((uint64_t)*a2, (uint64_t)a2[1], v9, v10, v11);
        sub_21F785864(v3, v2, v4, v5, v6);
        sub_21F785F30(v3, v2, v4, v5, v6);
        sub_21F785F30(v8, v7, v9, v10, v11);
        return 0;
      }
      else
      {
        char v12 = sub_21F7D3F18((uint64_t)*a1, (uint64_t)*a2);
        sub_21F785864(v8, v7, v9, v10, 0);
        sub_21F785864(v3, v2, v4, v5, 0);
        sub_21F785F30(v3, v2, v4, v5, 0);
        uint64_t v13 = v8;
        uint64_t v14 = v7;
        uint64_t v15 = v9;
        unsigned __int8 v16 = v10;
        char v17 = 0;
LABEL_8:
        sub_21F785F30(v13, v14, v15, v16, v17);
        return v12 & 1;
      }
  }
}

uint64_t sub_21F8819A4(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  unsigned int v6 = *(unsigned __int16 *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  unsigned int v9 = *(unsigned __int8 *)(a1 + 64);
  int v10 = *(unsigned __int8 *)(a2 + 8);
  char v12 = *(void **)(a2 + 16);
  int v11 = *(void **)(a2 + 24);
  uint64_t v13 = *(void **)(a2 + 32);
  unsigned int v14 = *(unsigned __int16 *)(a2 + 40);
  uint64_t v15 = *(void *)(a2 + 48);
  uint64_t v16 = *(void *)(a2 + 56);
  unsigned int v17 = *(unsigned __int8 *)(a2 + 64);
  if (v2 == 255)
  {
    if (v10 != 255) {
      return 0;
    }
    goto LABEL_11;
  }
  if (v10 == 255) {
    return 0;
  }
  double v18 = *(double *)a1;
  double v19 = *(double *)a2;
  if (!*(unsigned char *)(a1 + 8))
  {
    uint64_t result = 0;
    if (*(unsigned char *)(a2 + 8)) {
      return result;
    }
LABEL_10:
    if (v18 != v19) {
      return result;
    }
LABEL_11:
    if (v6 >> 8 > 0xFE)
    {
      if (v14 >> 8 > 0xFE)
      {
LABEL_18:
        if (v9 <= 0xFB)
        {
          if (v17 > 0xFB) {
            return 0;
          }
          unsigned __int8 v25 = v9;
          uint64_t v26 = v7;
          uint64_t v27 = v8;
          uint64_t v28 = v15;
          uint64_t v29 = v16;
          sub_21F778E0C(v15, v16, v17);
          sub_21F778E0C(v26, v27, v25);
          char v30 = sub_21F8812C4(v26, v27, v25, v28, v29, v17);
          sub_21F7858C0(v28, v29, v17);
          sub_21F7858C0(v26, v27, v25);
          if ((v30 & 1) == 0) {
            return 0;
          }
        }
        else if (v17 <= 0xFB)
        {
          return 0;
        }
        return 1;
      }
      goto LABEL_16;
    }
    long long v35 = v4;
    uint64_t v36 = v3;
    uint64_t v37 = v5;
    __int16 v38 = v6;
    if (v14 >> 8 > 0xFE)
    {
      sub_21F785864((uint64_t)v4, v3, v5, v6, SBYTE1(v6));
      sub_21F785864((uint64_t)v4, v3, v5, v6, SBYTE1(v6));
      sub_21F785F30((uint64_t)v4, v3, v5, v6, SBYTE1(v6));
LABEL_16:
      sub_21F785758((uint64_t)v12, (uint64_t)v11, (uint64_t)v13, v14);
      sub_21F7858AC((uint64_t)v4, v3, v5, v6);
      sub_21F7858AC((uint64_t)v12, (uint64_t)v11, (uint64_t)v13, v14);
      return 0;
    }
    v33[0] = v12;
    v33[1] = v11;
    v33[2] = v13;
    __int16 v34 = v14;
    unsigned int v32 = v9;
    uint64_t v31 = v15;
    uint64_t v21 = v7;
    uint64_t v22 = v8;
    uint64_t v23 = v16;
    sub_21F785758((uint64_t)v4, v3, v5, v6);
    sub_21F785864((uint64_t)v4, v3, v5, v6, SBYTE1(v6));
    char v24 = sub_21F8815E4(&v35, v33);
    sub_21F785F30((uint64_t)v35, v36, v37, v38, SHIBYTE(v38));
    sub_21F7858AC((uint64_t)v4, v3, v5, v6);
    uint64_t v16 = v23;
    uint64_t v15 = v31;
    unsigned int v9 = v32;
    uint64_t v8 = v22;
    uint64_t v7 = v21;
    if (v24) {
      goto LABEL_18;
    }
    return 0;
  }
  if (v2 == 1)
  {
    uint64_t result = 0;
    if (v10 != 1) {
      return result;
    }
    goto LABEL_10;
  }
  switch(*(void *)&v18)
  {
    case 1:
      uint64_t result = 0;
      if (v10 == 2 && *(void *)&v19 == 1) {
        goto LABEL_11;
      }
      break;
    case 2:
      uint64_t result = 0;
      if (v10 == 2 && *(void *)&v19 == 2) {
        goto LABEL_11;
      }
      break;
    case 3:
      uint64_t result = 0;
      if (v10 == 2 && *(void *)&v19 == 3) {
        goto LABEL_11;
      }
      break;
    case 4:
      uint64_t result = 0;
      if (v10 == 2 && *(void *)&v19 == 4) {
        goto LABEL_11;
      }
      break;
    default:
      uint64_t result = 0;
      if (v10 == 2 && v19 == 0.0) {
        goto LABEL_11;
      }
      break;
  }
  return result;
}

uint64_t sub_21F881D14()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

void sub_21F881D50(uint64_t a1@<X0>, double *a2@<X8>)
{
  *a2 = (*(double (**)(void, void, void))(v2 + 16))(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

uint64_t sub_21F881D90(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(v1 + 16))(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

double sub_21F881DC8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr, void, void, void))(v2 + 16))(v6, *(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
  double result = *(double *)v6;
  long long v5 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v5;
  *(void *)(a2 + 32) = v7;
  return result;
}

uint64_t sub_21F881E24@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void, void))(v2 + 16))(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
  *a2 = result;
  return result;
}

BOOL sub_21F881E60(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if (!a2)
  {
    if (!a4)
    {
      double v4 = *(double *)&a1;
      double v5 = *(double *)&a3;
      return v4 == v5;
    }
    return 0;
  }
  if (a2 == 1)
  {
    if (a4 == 1)
    {
      double v4 = *(double *)&a1;
      double v5 = *(double *)&a3;
      return v4 == v5;
    }
    return 0;
  }
  switch(a1)
  {
    case 1:
      if (a4 != 2 || a3 != 1) {
        return 0;
      }
      BOOL result = 1;
      break;
    case 2:
      if (a4 != 2 || a3 != 2) {
        return 0;
      }
      BOOL result = 1;
      break;
    case 3:
      if (a4 != 2 || a3 != 3) {
        return 0;
      }
      BOOL result = 1;
      break;
    case 4:
      if (a4 != 2 || a3 != 4) {
        return 0;
      }
      BOOL result = 1;
      break;
    default:
      if (a4 != 2 || a3) {
        return 0;
      }
      BOOL result = 1;
      break;
  }
  return result;
}

uint64_t sub_21F881F70()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

double sub_21F881FA8(uint64_t a1, uint64_t a2, int a3)
{
  return sub_21F880C74(a1, a2, a3, v3[4], v3[5], v3[2], v3[3]);
}

void sub_21F881FB4(double *a1@<X8>)
{
  *a1 = (*(double (**)(void))(v1 + 32))();
}

uint64_t sub_21F881FF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  return sub_21F8808B0(a1, a2, a3, v4[4], v4[5], v4[2], v4[3], a4);
}

double sub_21F882000@<D0>(uint64_t a1@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr))(v1 + 32))(v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v6;
  return result;
}

uint64_t sub_21F88205C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_21F882094@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  return sub_21F880A8C(a1, a2, a3, v4[6], v4[7], v4[2], v4[3], v4[4], a4, v4[5]);
}

uint64_t sub_21F8820C4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = v2[5];
  double v5 = (uint64_t (*)(uint64_t))v2[6];
  a2[3] = v2[3];
  a2[4] = v4;
  sub_21F77E8F8(a2);
  return v5(a1);
}

uint64_t sub_21F88211C(uint64_t a1)
{
  uint64_t v2 = sub_21F76CA40(&qword_26AD43F70);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21F88217C(uint64_t a1, uint64_t a2, int a3)
{
  return sub_21F880668(a1, a2, a3, v3[6], v3[7], v3[2], v3[3], v3[4], v3[5]);
}

uint64_t sub_21F8821AC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_21F880808(a1, a2);
}

uint64_t initializeBufferWithCopyOfBuffer for ChartInternalScaleMapping(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_21F8821FC(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_21F7A67AC);
}

uint64_t destroy for ChartInternalScaleMapping(uint64_t a1)
{
  return sub_21F7A5C58(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_21F8821FC(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v6, v7);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  return a1;
}

uint64_t *assignWithCopy for ChartInternalScaleMapping(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_21F882278(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_21F7A67AC, (void (*)(uint64_t, uint64_t, uint64_t))sub_21F7A5C58);
}

uint64_t *sub_21F882278(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  *a1 = v7;
  a1[1] = v8;
  uint64_t v12 = *((unsigned __int8 *)a1 + 16);
  *((unsigned char *)a1 + 16) = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for ChartInternalScaleMapping(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_21F8822FC(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_21F7A5C58);
}

uint64_t *sub_21F8822FC(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v8 = *((unsigned __int8 *)a1 + 16);
  *((unsigned char *)a1 + 16) = v5;
  a4(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ChartInternalScaleMapping(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ChartInternalScaleMapping(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)double result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartInternalScaleMapping()
{
  return &type metadata for ChartInternalScaleMapping;
}

uint64_t static MarkDimension.automatic.getter()
{
  return 0;
}

BOOL static MarkStackingMethod.Storage.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t static InterpolationMethod.linear.getter()
{
  return 0;
}

uint64_t static MarkStackingMethod.standard.getter()
{
  return 0;
}

double static MarkDimensions.automatic.getter@<D0>(uint64_t a1@<X8>)
{
  sub_21F816978();
  *(unsigned char *)a1 = 3;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = -1;
  *(void *)(a1 + 104) = v3;
  *(unsigned char *)(a1 + 112) = v4 & 1;
  return result;
}

uint64_t MarkStackingMethod.Storage.hash(into:)()
{
  return sub_21FA26A10();
}

uint64_t MarkStackingMethod.Storage.hashValue.getter()
{
  return sub_21FA26A50();
}

uint64_t static MarkStackingMethod.normalized.getter()
{
  return 1;
}

uint64_t static MarkStackingMethod.center.getter()
{
  return 2;
}

uint64_t static MarkStackingMethod.unstacked.getter()
{
  return 3;
}

BOOL static MarkStackingMethod.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t MarkStackingMethod.description.getter(char a1)
{
  uint64_t result = 0x647261646E617473;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x7A696C616D726F6ELL;
      break;
    case 2:
      uint64_t result = 0x7265746E6563;
      break;
    case 3:
      uint64_t result = 0x656B636174736E75;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_21F8825F4()
{
  uint64_t result = 0x647261646E617473;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7A696C616D726F6ELL;
      break;
    case 2:
      uint64_t result = 0x7265746E6563;
      break;
    case 3:
      uint64_t result = 0x656B636174736E75;
      break;
    default:
      return result;
  }
  return result;
}

double MarkDimension.init(integerLiteral:)(uint64_t a1)
{
  return (double)a1;
}

void *sub_21F8826AC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

double sub_21F8826BC@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  double result = (double)*a1;
  *(double *)a2 = result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

double sub_21F8826D0@<D0>(uint64_t a1@<X8>)
{
  if (qword_267EE6E68 != -1) {
    swift_once();
  }
  sub_21F816978();
  __asm { FMOV            V0.2D, #0.5 }
  *(_OWORD *)a1 = _Q0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  double result = -0.5;
  *(_OWORD *)(a1 + 32) = xmmword_21FA2B320;
  *(void *)(a1 + 48) = 0x3FE0000000000000;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0x3FE0000000000000;
  *(void *)(a1 + 80) = v9;
  *(unsigned char *)(a1 + 88) = v2 & 1;
  return result;
}

double sub_21F882770@<D0>(uint64_t a1@<X8>)
{
  sub_21F816978();
  __asm { FMOV            V0.2D, #0.5 }
  *(_OWORD *)a1 = _Q0;
  *(_OWORD *)(a1 + 16) = xmmword_21FA29470;
  *(_OWORD *)(a1 + 32) = xmmword_21FA2B330;
  *(_OWORD *)(a1 + 48) = xmmword_21FA29470;
  double result = 0.5;
  *(_OWORD *)(a1 + 64) = xmmword_21FA2B340;
  *(void *)(a1 + 80) = v9;
  *(unsigned char *)(a1 + 88) = v2 & 1;
  return result;
}

double sub_21F8827E0(uint64_t a1, double a2, double a3)
{
  double v6 = *(double *)v3;
  double v7 = *(double *)(v3 + 8);
  double v8 = *(double *)(v3 + 16);
  double v9 = *(double *)(v3 + 24);
  double v10 = *(double *)(v3 + 32);
  double v11 = sub_21F81698C(a1, *(void *)(v3 + 80), *(unsigned char *)(v3 + 88));
  return v10 * v11 + v9 * (v11 * a3) + v6 * a2 + v7 * a3 + v8 * (v11 * a2);
}

uint64_t static MarkDimensions.ratio(_:)@<X0>(uint64_t a1@<X8>)
{
  sub_21F816978();
  *(unsigned char *)a1 = 1;
  char v4 = v3 & 1;
  __asm { FMOV            V0.2D, #0.5 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_OWORD *)(a1 + 24) = xmmword_21FA29470;
  *(_OWORD *)(a1 + 40) = xmmword_21FA2B330;
  *(_OWORD *)(a1 + 56) = xmmword_21FA29470;
  *(_OWORD *)(a1 + 72) = xmmword_21FA2B340;
  *(void *)(a1 + 88) = v2;
  *(unsigned char *)(a1 + 96) = v4;
  *(void *)(a1 + 104) = v2;
  *(unsigned char *)(a1 + 112) = v4;

  return sub_21F829E74(v2, v4);
}

{
  char v2;
  uint64_t v8;
  uint64_t vars8;

  sub_21F816984();
  *(unsigned char *)a1 = 1;
  v2 &= 1u;
  __asm { FMOV            V0.2D, #0.5 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_OWORD *)(a1 + 24) = xmmword_21FA29470;
  *(_OWORD *)(a1 + 40) = xmmword_21FA2B330;
  *(_OWORD *)(a1 + 56) = xmmword_21FA29470;
  *(_OWORD *)(a1 + 72) = xmmword_21FA2B340;
  *(void *)(a1 + 88) = v8;
  *(unsigned char *)(a1 + 96) = v2;
  *(void *)(a1 + 104) = v8;
  *(unsigned char *)(a1 + 112) = v2;
  sub_21F829E74(v8, v2);

  return swift_retain();
}

uint64_t static MarkDimensions.inset(_:)@<X0>(uint64_t a1@<X8>)
{
  sub_21F816978();
  *(unsigned char *)a1 = 2;
  char v4 = v3 & 1;
  *(void *)(a1 + 8) = 0x3FF0000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = xmmword_21FA2B350;
  *(void *)(a1 + 56) = 0x3FF0000000000000;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0xBFF0000000000000;
  *(void *)(a1 + 88) = v2;
  *(unsigned char *)(a1 + 96) = v4;
  *(void *)(a1 + 104) = v2;
  *(unsigned char *)(a1 + 112) = v4;

  return sub_21F829E74(v2, v4);
}

{
  char v2;
  uint64_t v3;
  uint64_t vars8;

  sub_21F816984();
  *(unsigned char *)a1 = 2;
  v2 &= 1u;
  *(void *)(a1 + 8) = 0x3FF0000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = xmmword_21FA2B350;
  *(void *)(a1 + 56) = 0x3FF0000000000000;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0xBFF0000000000000;
  *(void *)(a1 + 88) = v3;
  *(unsigned char *)(a1 + 96) = v2;
  *(void *)(a1 + 104) = v3;
  *(unsigned char *)(a1 + 112) = v2;
  sub_21F829E74(v3, v2);

  return swift_retain();
}

uint64_t static MarkDimensions.fixed(_:)@<X0>(uint64_t a1@<X8>)
{
  sub_21F816978();
  *(unsigned char *)a1 = 0;
  __asm { FMOV            V0.2D, #0.5 }
  *(_OWORD *)(a1 + 8) = _Q0;
  char v9 = v8 & 1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = xmmword_21FA2B320;
  *(void *)(a1 + 56) = 0x3FE0000000000000;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0x3FE0000000000000;
  *(void *)(a1 + 88) = v2;
  *(unsigned char *)(a1 + 96) = v9;
  *(void *)(a1 + 104) = v2;
  *(unsigned char *)(a1 + 112) = v9;

  return sub_21F829E74(v2, v9);
}

{
  char v7;
  uint64_t v8;
  uint64_t vars8;

  sub_21F816984();
  *(unsigned char *)a1 = 0;
  __asm { FMOV            V0.2D, #0.5 }
  *(_OWORD *)(a1 + 8) = _Q0;
  v7 &= 1u;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = xmmword_21FA2B320;
  *(void *)(a1 + 56) = 0x3FE0000000000000;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0x3FE0000000000000;
  *(void *)(a1 + 88) = v8;
  *(unsigned char *)(a1 + 96) = v7;
  *(void *)(a1 + 104) = v8;
  *(unsigned char *)(a1 + 112) = v7;
  sub_21F829E74(v8, v7);

  return swift_retain();
}

uint64_t MarkDimensions.init(integerLiteral:)@<X0>(uint64_t a1@<X8>)
{
  return static MarkDimensions.fixed(_:)(a1);
}

uint64_t sub_21F882BBC(double *a1, uint64_t a2)
{
  return MarkDimensions.init(floatLiteral:)(*(void *)(a2 + 16), *a1);
}

uint64_t sub_21F882BC8@<X0>(uint64_t a1@<X8>)
{
  return MarkDimensions.init(integerLiteral:)(a1);
}

uint64_t MarkDimension.description.getter(uint64_t a1, char a2)
{
  uint64_t result = 0x6974616D6F747561;
  switch(a2)
  {
    case 1:
      uint64_t v3 = 0x286F69746172;
      goto LABEL_5;
    case 2:
      uint64_t v3 = 0x287465736E69;
      goto LABEL_5;
    case 3:
      return result;
    default:
      uint64_t v3 = 0x286465786966;
LABEL_5:
      uint64_t v4 = v3;
      sub_21FA25F70();
      sub_21FA25D40();
      swift_bridgeObjectRelease();
      sub_21FA25D40();
      return v4;
  }
}

uint64_t sub_21F882CB8()
{
  return MarkDimension.description.getter(*(void *)v0, *(unsigned char *)(v0 + 8));
}

uint64_t static InterpolationMethod.cardinal.getter()
{
  return 0;
}

uint64_t static InterpolationMethod.catmullRom.getter()
{
  return 0x3FE0000000000000;
}

uint64_t static InterpolationMethod.monotone.getter()
{
  return 1;
}

uint64_t static InterpolationMethod.stepStart.getter()
{
  return 0;
}

uint64_t static InterpolationMethod.stepCenter.getter()
{
  return 0x3FE0000000000000;
}

uint64_t static InterpolationMethod.stepEnd.getter()
{
  return 0x3FF0000000000000;
}

uint64_t InterpolationMethod.description.getter(uint64_t a1, char a2)
{
  switch(a2)
  {
    case 1:
      if (*(double *)&a1 != 0.5) {
        goto LABEL_11;
      }
      uint64_t result = 0x526C6C756D746163;
      break;
    case 2:
      if (*(double *)&a1 == 1.0)
      {
        uint64_t result = 0x646E4570657473;
      }
      else if (*(double *)&a1 == 0.5)
      {
        uint64_t result = 0x746E654370657473;
      }
      else
      {
        if (*(double *)&a1 != 0.0)
        {
          sub_21FA26510();
          swift_bridgeObjectRelease();
          unint64_t v3 = 0xD000000000000011;
          goto LABEL_12;
        }
        uint64_t result = 0x7261745370657473;
      }
      break;
    case 3:
      if (*(double *)&a1 == 0.0) {
        uint64_t result = 0x7261656E696CLL;
      }
      else {
        uint64_t result = 0x656E6F746F6E6F6DLL;
      }
      break;
    default:
      if (*(double *)&a1 == 0.0)
      {
        uint64_t result = 0x6C616E6964726163;
      }
      else
      {
LABEL_11:
        sub_21FA26510();
        swift_bridgeObjectRelease();
        unint64_t v3 = 0xD000000000000012;
LABEL_12:
        unint64_t v4 = v3;
        sub_21FA25F70();
        sub_21FA25D40();
        swift_bridgeObjectRelease();
        sub_21FA25D40();
        uint64_t result = v4;
      }
      break;
  }
  return result;
}

unint64_t sub_21F882F38()
{
  unint64_t result = qword_267EE7E78;
  if (!qword_267EE7E78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE7E78);
  }
  return result;
}

uint64_t sub_21F882F8C()
{
  return MEMORY[0x263F8D5B0];
}

uint64_t sub_21F882F98()
{
  return MEMORY[0x263F8D748];
}

uint64_t sub_21F882FA4()
{
  return InterpolationMethod.description.getter(*(void *)v0, *(unsigned char *)(v0 + 8));
}

ValueMetadata *type metadata accessor for MarkStackingMethod()
{
  return &type metadata for MarkStackingMethod;
}

ValueMetadata *type metadata accessor for MarkStackingMethod.Storage()
{
  return &type metadata for MarkStackingMethod.Storage;
}

ValueMetadata *type metadata accessor for MarkDimension()
{
  return &type metadata for MarkDimension;
}

uint64_t sub_21F882FF0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 2u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_21F883008(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)unint64_t result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MarkDimension.Storage()
{
  return &type metadata for MarkDimension.Storage;
}

uint64_t sub_21F883030(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 96);
  if (v2 != 255) {
    sub_21F82B5F8(*(void *)(a1 + 88), v2 & 1);
  }
  uint64_t v3 = *(void *)(a1 + 104);
  char v4 = *(unsigned char *)(a1 + 112);

  return sub_21F82B5F8(v3, v4);
}

uint64_t sub_21F883080(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  char v4 = (_OWORD *)(a1 + 8);
  char v5 = (_OWORD *)(a2 + 8);
  int v6 = *(unsigned __int8 *)(a2 + 96);
  if (v6 == 255)
  {
    long long v7 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v7;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
    long long v8 = *(_OWORD *)(a2 + 24);
    _OWORD *v4 = *v5;
    *(_OWORD *)(a1 + 24) = v8;
  }
  else
  {
    char v9 = v6 & 1;
    long long v10 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v10;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    long long v11 = *(_OWORD *)(a2 + 24);
    _OWORD *v4 = *v5;
    *(_OWORD *)(a1 + 24) = v11;
    uint64_t v12 = *(void *)(a2 + 88);
    sub_21F829E74(v12, v6 & 1);
    *(void *)(a1 + 88) = v12;
    *(unsigned char *)(a1 + 96) = v9;
  }
  uint64_t v13 = *(void *)(a2 + 104);
  char v14 = *(unsigned char *)(a2 + 112);
  sub_21F829E74(v13, v14);
  *(void *)(a1 + 104) = v13;
  *(unsigned char *)(a1 + 112) = v14;
  return a1;
}

uint64_t sub_21F883140(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  char v4 = (_OWORD *)(a1 + 8);
  char v5 = (_OWORD *)(a2 + 8);
  int v6 = *(unsigned __int8 *)(a2 + 96);
  if (*(unsigned __int8 *)(a1 + 96) == 255)
  {
    if (v6 != 255)
    {
      _OWORD *v4 = *v5;
      long long v11 = *(_OWORD *)(a2 + 24);
      long long v12 = *(_OWORD *)(a2 + 40);
      long long v13 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = v13;
      *(_OWORD *)(a1 + 24) = v11;
      *(_OWORD *)(a1 + 40) = v12;
      uint64_t v14 = *(void *)(a2 + 88);
      char v15 = *(unsigned char *)(a2 + 96);
      sub_21F829E74(v14, v15);
      *(void *)(a1 + 88) = v14;
      *(unsigned char *)(a1 + 96) = v15;
      goto LABEL_8;
    }
LABEL_7:
    long long v17 = v5[1];
    _OWORD *v4 = *v5;
    v4[1] = v17;
    long long v18 = v5[2];
    long long v19 = v5[3];
    long long v20 = v5[4];
    *(_OWORD *)((char *)v4 + 73) = *(_OWORD *)((char *)v5 + 73);
    v4[3] = v19;
    v4[4] = v20;
    v4[2] = v18;
    goto LABEL_8;
  }
  if (v6 == 255)
  {
    uint64_t v16 = type metadata accessor for MappedCoefficients();
    (*(void (**)(_OWORD *, uint64_t))(*(void *)(v16 - 8) + 8))(v4, v16);
    goto LABEL_7;
  }
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v7 = *(void *)(a2 + 88);
  char v8 = *(unsigned char *)(a2 + 96);
  sub_21F829E74(v7, v8);
  uint64_t v9 = *(void *)(a1 + 88);
  char v10 = *(unsigned char *)(a1 + 96);
  *(void *)(a1 + 88) = v7;
  *(unsigned char *)(a1 + 96) = v8;
  sub_21F82B5F8(v9, v10);
LABEL_8:
  uint64_t v21 = *(void *)(a2 + 104);
  char v22 = *(unsigned char *)(a2 + 112);
  sub_21F829E74(v21, v22);
  uint64_t v23 = *(void *)(a1 + 104);
  char v24 = *(unsigned char *)(a1 + 112);
  *(void *)(a1 + 104) = v21;
  *(unsigned char *)(a1 + 112) = v22;
  sub_21F82B5F8(v23, v24);
  return a1;
}

uint64_t type metadata accessor for MappedCoefficients()
{
  return sub_21F764F08();
}

__n128 sub_21F8832F0(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t sub_21F88331C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  long long v4 = (_OWORD *)(a1 + 8);
  char v5 = (_OWORD *)(a2 + 8);
  int v6 = *(unsigned __int8 *)(a1 + 96);
  if (v6 != 255)
  {
    int v7 = *(unsigned __int8 *)(a2 + 96);
    if (v7 != 255)
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      uint64_t v11 = *(void *)(a1 + 88);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(unsigned char *)(a1 + 96) = v7 & 1;
      sub_21F82B5F8(v11, v6 & 1);
      goto LABEL_6;
    }
    uint64_t v8 = type metadata accessor for MappedCoefficients();
    (*(void (**)(_OWORD *, uint64_t))(*(void *)(v8 - 8) + 8))(v4, v8);
  }
  long long v9 = v5[3];
  v4[2] = v5[2];
  v4[3] = v9;
  v4[4] = v5[4];
  *(_OWORD *)((char *)v4 + 73) = *(_OWORD *)((char *)v5 + 73);
  long long v10 = v5[1];
  _OWORD *v4 = *v5;
  v4[1] = v10;
LABEL_6:
  char v12 = *(unsigned char *)(a2 + 112);
  uint64_t v13 = *(void *)(a1 + 104);
  char v14 = *(unsigned char *)(a1 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = v12;
  sub_21F82B5F8(v13, v14);
  return a1;
}

uint64_t sub_21F883434(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 113)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 112);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t sub_21F88347C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 112) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 113) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 113) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 112) = -(char)a2;
    }
  }
  return result;
}

uint64_t type metadata accessor for MarkDimensions()
{
  return sub_21F764F08();
}

ValueMetadata *type metadata accessor for InterpolationMethod()
{
  return &type metadata for InterpolationMethod;
}

uint64_t getEnumTagSinglePayload for PartialSpecScaleMapping(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PartialSpecScaleMapping(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InterpolationMethod.Storage()
{
  return &type metadata for InterpolationMethod.Storage;
}

uint64_t sub_21F8835A4(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 88);
  if (v1 <= 1) {
    return sub_21F82B5F8(*(void *)(result + 80), v1 != 0);
  }
  return result;
}

uint64_t sub_21F8835C4(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 88);
  if (v3 > 1)
  {
    long long v8 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v8;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
    long long v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
  }
  else
  {
    BOOL v4 = v3 != 0;
    long long v5 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v5;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    uint64_t v7 = *(void *)(a2 + 80);
    sub_21F829E74(v7, v3 != 0);
    *(void *)(a1 + 80) = v7;
    *(unsigned char *)(a1 + 88) = v4;
  }
  return a1;
}

uint64_t sub_21F883658(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 88);
  unsigned int v5 = *(unsigned __int8 *)(a2 + 88);
  if (v4 > 1)
  {
    if (v5 <= 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      long long v10 = *(_OWORD *)(a2 + 16);
      long long v11 = *(_OWORD *)(a2 + 32);
      long long v12 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v12;
      *(_OWORD *)(a1 + 16) = v10;
      *(_OWORD *)(a1 + 32) = v11;
      uint64_t v13 = *(void *)(a2 + 80);
      char v14 = *(unsigned char *)(a2 + 88);
      sub_21F829E74(v13, v14);
      *(void *)(a1 + 80) = v13;
      *(unsigned char *)(a1 + 88) = v14;
      return a1;
    }
LABEL_7:
    long long v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
    long long v16 = *(_OWORD *)(a2 + 32);
    long long v17 = *(_OWORD *)(a2 + 48);
    long long v18 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
    *(_OWORD *)(a1 + 48) = v17;
    *(_OWORD *)(a1 + 64) = v18;
    *(_OWORD *)(a1 + 32) = v16;
    return a1;
  }
  if (v5 > 1)
  {
    sub_21F82B5F8(*(void *)(a1 + 80), v4 & 1);
    goto LABEL_7;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 80);
  char v7 = *(unsigned char *)(a2 + 88);
  sub_21F829E74(v6, v7);
  uint64_t v8 = *(void *)(a1 + 80);
  char v9 = *(unsigned char *)(a1 + 88);
  *(void *)(a1 + 80) = v6;
  *(unsigned char *)(a1 + 88) = v7;
  sub_21F82B5F8(v8, v9);
  return a1;
}

__n128 initializeWithTake for ChartSelectionAxisConfiguration(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t sub_21F8837AC(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 88);
  if (v4 > 1) {
    goto LABEL_5;
  }
  unsigned int v5 = *(unsigned __int8 *)(a2 + 88);
  char v6 = v4 & 1;
  if (v5 > 1)
  {
    sub_21F82B5F8(*(void *)(a1 + 80), v6);
LABEL_5:
    long long v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v10;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
    long long v11 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v11;
    return a1;
  }
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  long long v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v9 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = v5 != 0;
  sub_21F82B5F8(v9, v6);
  return a1;
}

uint64_t sub_21F883850(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 89)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 88);
  if (v3 <= 1) {
    unsigned int v4 = -1;
  }
  else {
    unsigned int v4 = v3 ^ 0xFF;
  }
  if (v4 + 1 >= 2) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t sub_21F883898(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 73) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_DWORD *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 89) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 89) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 88) = ~(_BYTE)a2;
    }
  }
  return result;
}

uint64_t sub_21F8838EC(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 88);
  if (v1 > 1) {
    return (v1 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

double sub_21F883900(uint64_t a1, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(unsigned char *)(a1 + 88) = 0;
    *(void *)a1 = a2 - 255;
  }
  else if (a2)
  {
    *(unsigned char *)(a1 + 88) = -(char)a2;
  }
  return result;
}

uint64_t type metadata accessor for MarkDimensions.Storage()
{
  return sub_21F764F08();
}

uint64_t getEnumTagSinglePayload for AxisMarkPosition.Storage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s6Charts18MarkStackingMethodVwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *double result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x21F883AB4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MarkDimensionKind()
{
  return &type metadata for MarkDimensionKind;
}

uint64_t sub_21F883AEC(uint64_t a1)
{
  return sub_21F82B5F8(*(void *)(a1 + 80), *(unsigned char *)(a1 + 88));
}

uint64_t sub_21F883AFC(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 80);
  char v6 = *(unsigned char *)(a2 + 88);
  sub_21F829E74(v5, v6);
  *(void *)(a1 + 80) = v5;
  *(unsigned char *)(a1 + 88) = v6;
  return a1;
}

uint64_t sub_21F883B5C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v3 = *(void *)(a2 + 80);
  char v4 = *(unsigned char *)(a2 + 88);
  sub_21F829E74(v3, v4);
  uint64_t v5 = *(void *)(a1 + 80);
  char v6 = *(unsigned char *)(a1 + 88);
  *(void *)(a1 + 80) = v3;
  *(unsigned char *)(a1 + 88) = v4;
  sub_21F82B5F8(v5, v6);
  return a1;
}

uint64_t sub_21F883C00(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v5 = *(void *)(a2 + 80);
  char v6 = *(unsigned char *)(a2 + 88);
  uint64_t v7 = *(void *)(a1 + 80);
  char v8 = *(unsigned char *)(a1 + 88);
  *(void *)(a1 + 80) = v5;
  *(unsigned char *)(a1 + 88) = v6;
  sub_21F82B5F8(v7, v8);
  return a1;
}

uint64_t sub_21F883C58(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 89)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 88);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t sub_21F883CA0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 88) = 0;
    *(void *)double result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 89) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 89) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 88) = -(char)a2;
    }
  }
  return result;
}

unint64_t sub_21F883D00()
{
  unint64_t result = qword_267EE8000;
  if (!qword_267EE8000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE8000);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RangeCoefficients(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RangeCoefficients(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 80) = v3;
  return result;
}

ValueMetadata *type metadata accessor for RangeCoefficients()
{
  return &type metadata for RangeCoefficients;
}

uint64_t getEnumTagSinglePayload for SgArea.Points.Element(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SgArea.Points.Element(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for RangeCoefficients.Coefficients()
{
  return &type metadata for RangeCoefficients.Coefficients;
}

uint64_t sub_21F883E40(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v29 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v30 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      int64_t v31 = v3;
      unint64_t v9 = v8 | (v3 << 6);
      goto LABEL_26;
    }
    int64_t v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v10 >= v30) {
      return 1;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v10);
    int64_t v12 = v3 + 1;
    if (!v11)
    {
      int64_t v12 = v3 + 2;
      if (v3 + 2 >= v30) {
        return 1;
      }
      unint64_t v11 = *(void *)(v29 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v3 + 3;
        if (v3 + 3 >= v30) {
          return 1;
        }
        unint64_t v11 = *(void *)(v29 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v3 + 4;
          if (v3 + 4 >= v30) {
            return 1;
          }
          unint64_t v11 = *(void *)(v29 + 8 * v12);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_25:
    unint64_t v6 = (v11 - 1) & v11;
    int64_t v31 = v12;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_26:
    uint64_t v14 = result;
    long long v15 = (uint64_t *)(*(void *)(result + 48) + 16 * v9);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    sub_21FA26A00();
    swift_bridgeObjectRetain();
    sub_21FA25D30();
    uint64_t v18 = sub_21FA26A50();
    uint64_t v19 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v20 = v18 & ~v19;
    if (((*(void *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
      goto LABEL_41;
    }
    uint64_t v21 = *(void *)(a2 + 48);
    char v22 = (void *)(v21 + 16 * v20);
    BOOL v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (sub_21FA268D0() & 1) == 0)
    {
      uint64_t v24 = ~v19;
      for (unint64_t i = v20 + 1; ; unint64_t i = v26 + 1)
      {
        uint64_t v26 = i & v24;
        if (((*(void *)(v7 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0) {
          break;
        }
        uint64_t v27 = (void *)(v21 + 16 * v26);
        BOOL v28 = *v27 == v17 && v27[1] == v16;
        if (v28 || (sub_21FA268D0() & 1) != 0) {
          goto LABEL_7;
        }
      }
LABEL_41:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    unint64_t result = v14;
    int64_t v3 = v31;
  }
  uint64_t v13 = v3 + 5;
  if (v3 + 5 >= v30) {
    return 1;
  }
  unint64_t v11 = *(void *)(v29 + 8 * v13);
  if (v11)
  {
    int64_t v12 = v3 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v12 >= v30) {
      return 1;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_25;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_21F8840E4(void *a1, void (**a2)(uint64_t *__return_ptr, void *))
{
  void (*v4)(uint64_t *__return_ptr, void *);
  uint64_t v5;
  uint64_t result;
  void v7[2];
  uint64_t v8;

  uint64_t v3 = a1[1];
  v7[0] = *a1;
  v7[1] = v3;
  uint64_t v4 = *a2;
  swift_bridgeObjectRetain();
  v4(&v8, v7);
  swift_bridgeObjectRelease();
  uint64_t v5 = v8;
  unint64_t result = swift_release();
  a1[6] = v5;
  return result;
}

uint64_t sub_21F884150(void *a1, void (**a2)(void *__return_ptr, void *))
{
  void (*v4)(void *__return_ptr, void *);
  void v6[2];
  void v7[5];

  uint64_t v3 = a1[1];
  v6[0] = *a1;
  v6[1] = v3;
  uint64_t v4 = *a2;
  swift_bridgeObjectRetain();
  v4(v7, v6);
  swift_bridgeObjectRelease();
  return sub_21F8856A0((uint64_t)v7, (uint64_t)(a1 + 7));
}

__n128 sub_21F8841B8(uint64_t a1, void (**a2)(_OWORD *__return_ptr, void *))
{
  void (*v4)(_OWORD *__return_ptr, void *);
  uint64_t v5;
  __n128 result;
  __n128 v7;
  long long v8;
  void v9[2];
  _OWORD v10[2];
  uint64_t v11;

  uint64_t v3 = *(void *)(a1 + 8);
  v9[0] = *(void *)a1;
  v9[1] = v3;
  uint64_t v4 = *a2;
  swift_bridgeObjectRetain();
  v4(v10, v9);
  swift_bridgeObjectRelease();
  uint64_t v7 = (__n128)v10[1];
  unint64_t v8 = v10[0];
  uint64_t v5 = v11;
  swift_bridgeObjectRelease();
  unint64_t result = v7;
  *(_OWORD *)(a1 + 96) = v8;
  *(__n128 *)(a1 + 112) = v7;
  *(void *)(a1 + 128) = v5;
  return result;
}

uint64_t sub_21F88423C(uint64_t a1, void (**a2)(uint64_t *__return_ptr, void *))
{
  void (*v4)(uint64_t *__return_ptr, void *);
  uint64_t result;
  void v6[2];
  uint64_t v7;

  uint64_t v3 = *(void *)(a1 + 8);
  v6[0] = *(void *)a1;
  v6[1] = v3;
  uint64_t v4 = *a2;
  swift_bridgeObjectRetain();
  v4(&v7, v6);
  unint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = v7;
  *(unsigned char *)(a1 + 144) = 0;
  return result;
}

uint64_t sub_21F8842A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  double v2 = *(double *)(a1 + 32);
  uint64_t v3 = v1 - 1;
  if (v1 != 1)
  {
    uint64_t v4 = (double *)(a1 + 40);
    do
    {
      double v5 = *v4++;
      double v6 = v5;
      if (v2 < v5) {
        double v2 = v6;
      }
      --v3;
    }
    while (v3);
  }
  return *(void *)&v2;
}

int64_t sub_21F8842E8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  int64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = v1 - 1;
  if (v1 != 1)
  {
    if (v1 >= 5)
    {
      unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFCLL | 1;
      int64x2_t v5 = vdupq_n_s64(v2);
      double v6 = (int64x2_t *)(a1 + 56);
      unint64_t v7 = v3 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v8 = v5;
      do
      {
        int64x2_t v5 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v5, v6[-1]), (int8x16_t)v5, (int8x16_t)v6[-1]);
        int64x2_t v8 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v8, *v6), (int8x16_t)v8, *(int8x16_t *)v6);
        v6 += 2;
        v7 -= 4;
      }
      while (v7);
      int8x16_t v9 = vbslq_s8((int8x16_t)vcgtq_s64(v5, v8), (int8x16_t)v5, (int8x16_t)v8);
      uint64_t v10 = vextq_s8(v9, v9, 8uLL).u64[0];
      int64_t v2 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v9.i64[0], v10), *(int8x8_t *)v9.i8, (int8x8_t)v10);
      if (v3 == (v3 & 0xFFFFFFFFFFFFFFFCLL)) {
        return v2;
      }
    }
    else
    {
      unint64_t v4 = 1;
    }
    unint64_t v11 = v1 - v4;
    int64_t v12 = (int64_t *)(a1 + 8 * v4 + 32);
    do
    {
      int64_t v14 = *v12++;
      int64_t v13 = v14;
      if (v2 <= v14) {
        int64_t v2 = v13;
      }
      --v11;
    }
    while (v11);
  }
  return v2;
}

uint64_t sub_21F88439C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = sub_21FA24220();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v7 = sub_21F76CA40(qword_26AD48308);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *a1;
  sub_21F7F3EA0(a2, (uint64_t)&v20);
  if (v23 - 1 >= 2)
  {
    if (v23)
    {
      uint64_t v24 = v11;
      sub_21FA24200();
      sub_21F885234();
      sub_21FA23F30();
      sub_21F885288();
      sub_21FA25A70();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      unint64_t v14 = *((void *)&v18[0] + 1);
      uint64_t v13 = *(void *)&v18[0];
    }
    else
    {
      v18[0] = v20;
      v18[1] = v21;
      uint64_t v19 = v22;
      uint64_t v24 = v11;
      long long v15 = sub_21F77E0FC(v18, *((uint64_t *)&v21 + 1));
      sub_21F9F9DA8((uint64_t)v15, (uint64_t)&v24, MEMORY[0x263F8D538]);
      uint64_t v13 = v16;
      unint64_t v14 = v17;
      uint64_t result = sub_21F76CA84((uint64_t)v18, qword_26AD46C40);
    }
  }
  else
  {
    uint64_t result = sub_21F7F3CCC((uint64_t)&v20);
    uint64_t v13 = 0;
    unint64_t v14 = 0xE000000000000000;
  }
  *a3 = v13;
  a3[1] = v14;
  return result;
}

void *sub_21F8845B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *(**a3)(void *__return_ptr, double *)@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  sub_21FA25FA0();
  sub_21FA25D40();
  *(void *)(a4 + 128) = 0;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0xE000000000000000;
  sub_21F7AA27C();
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_21FA25350();
  uint64_t v12 = v11;
  char v14 = v13 & 1;
  v23[0] = a1;
  v23[1] = a2;
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_21FA25350();
  uint64_t v17 = v16;
  LOBYTE(a1) = v18;
  uint64_t v20 = v19;
  sub_21F7656A8(v10, v12, v14);
  swift_bridgeObjectRelease();
  *(void *)(a4 + 16) = v15;
  *(void *)(a4 + 24) = v17;
  *(unsigned char *)(a4 + 32) = a1 & 1;
  *(void *)(a4 + 40) = v20;
  double v22 = a5;
  uint64_t result = (*a3)(v23, &v22);
  *(void *)(a4 + 136) = v23[0];
  *(unsigned char *)(a4 + 144) = 0;
  return result;
}

uint64_t sub_21F88472C@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  sub_21F7676B0();
  swift_beginAccess();
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    long long v7 = *(_OWORD *)(a1 + 128);
    *(_OWORD *)(a3 + 72) = *(_OWORD *)(a1 + 112);
    uint64_t v9 = *(void *)(a1 + 88);
    uint64_t v8 = *(void *)(a1 + 96);
    uint64_t v11 = *(void *)(a1 + 72);
    uint64_t v10 = *(void *)(a1 + 80);
    int v12 = *(_DWORD *)(a1 + 64);
    uint64_t v13 = *(void *)(a1 + 48);
    uint64_t v14 = *(void *)(a1 + 56);
    *(void *)a3 = v6;
    *(void *)(a3 + 8) = v13;
    *(void *)(a3 + 16) = v14;
    *(unsigned char *)(a3 + 24) = v12 & 1;
    *(void *)(a3 + 32) = v11;
    *(void *)(a3 + 40) = v10;
    *(void *)(a3 + 48) = v9;
    *(void *)(a3 + 56) = v8;
    unsigned __int8 v15 = *(unsigned char *)(a1 + 104);
    *(unsigned char *)(a3 + 64) = v15;
    *(_OWORD *)(a3 + 88) = v7;
    swift_retain();
    a2(v11, v10);
    swift_bridgeObjectRetain();
    return sub_21F7637E4(v8, v15);
  }
  else
  {
    uint64_t result = sub_21FA266E0();
    __break(1u);
  }
  return result;
}

uint64_t sub_21F884844@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  sub_21F7676B0();
  swift_beginAccess();
  sub_21F76C9DC(a1 + 40, (uint64_t)v11, &qword_26AD476C8);
  sub_21F76C9DC((uint64_t)v11, (uint64_t)v12, &qword_26AD476C8);
  if (sub_21F7982D8(v12) == 1)
  {
    uint64_t result = sub_21FA266E0();
    __break(1u);
  }
  else
  {
    sub_21F76C9DC((uint64_t)v11, (uint64_t)v10, &qword_26AD476C8);
    long long v4 = v10[5];
    a2[4] = v10[4];
    a2[5] = v4;
    long long v5 = v10[7];
    a2[6] = v10[6];
    a2[7] = v5;
    long long v6 = v10[1];
    *a2 = v10[0];
    a2[1] = v6;
    long long v7 = v10[3];
    a2[2] = v10[2];
    a2[3] = v7;
    nullsub_1(a2, v8);
    return sub_21F884D60((uint64_t)v10);
  }
  return result;
}

uint64_t sub_21F88496C@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  sub_21F7676B0();
  swift_beginAccess();
  uint64_t result = sub_21F798258(a1 + 40, (uint64_t)v9);
  if (*(void *)&v9[0])
  {
    long long v5 = v9[5];
    a2[4] = v9[4];
    a2[5] = v5;
    long long v6 = v9[7];
    a2[6] = v9[6];
    a2[7] = v6;
    long long v7 = v9[1];
    *a2 = v9[0];
    a2[1] = v7;
    long long v8 = v9[3];
    a2[2] = v9[2];
    a2[3] = v8;
  }
  else
  {
    sub_21F76CA84((uint64_t)v9, &qword_26AD476E0);
    uint64_t result = sub_21FA266E0();
    __break(1u);
  }
  return result;
}

uint64_t sub_21F884A44@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  sub_21F7676B0();
  swift_beginAccess();
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    uint64_t v8 = *(void *)(a1 + 80);
    uint64_t v7 = *(void *)(a1 + 88);
    uint64_t v10 = *(void *)(a1 + 64);
    uint64_t v9 = *(void *)(a1 + 72);
    uint64_t v12 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 56);
    *(void *)a3 = v6;
    *(void *)(a3 + 8) = v12;
    *(void *)(a3 + 16) = v11;
    *(void *)(a3 + 24) = v10;
    *(void *)(a3 + 32) = v9;
    *(void *)(a3 + 40) = v8;
    *(void *)(a3 + 48) = v7;
    unsigned __int8 v13 = *(unsigned char *)(a1 + 96);
    *(unsigned char *)(a3 + 56) = v13;
    long long v14 = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(a1 + 104);
    *(_OWORD *)(a3 + 80) = v14;
    swift_retain();
    swift_retain();
    a2(v10, v9);
    swift_bridgeObjectRetain();
    return sub_21F7637E4(v7, v13);
  }
  else
  {
    uint64_t result = sub_21FA266E0();
    __break(1u);
  }
  return result;
}

uint64_t sub_21F884B60(uint64_t a1, void (*a2)(long long *))
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v33 = MEMORY[0x263F8EE78];
    sub_21F7A2C80(0, v2, 0);
    uint64_t v3 = v33;
    sub_21F7AA27C();
    uint64_t v6 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v7 = *(v6 - 1);
      uint64_t v8 = *v6;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      char v32 = 1;
      *(void *)&long long v23 = v7;
      *((void *)&v23 + 1) = v8;
      swift_bridgeObjectRetain_n();
      *(void *)&long long v24 = sub_21FA25350();
      *((void *)&v24 + 1) = v9;
      LOBYTE(v25) = v10 & 1;
      *((void *)&v25 + 1) = v11;
      a2(&v23);
      swift_bridgeObjectRelease();
      uint64_t v33 = v3;
      unint64_t v13 = *(void *)(v3 + 16);
      unint64_t v12 = *(void *)(v3 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_21F7A2C80((char *)(v12 > 1), v13 + 1, 1);
        uint64_t v3 = v33;
      }
      v6 += 2;
      *(void *)(v3 + 16) = v13 + 1;
      uint64_t v14 = v3 + 152 * v13;
      long long v15 = v24;
      *(_OWORD *)(v14 + 32) = v23;
      *(_OWORD *)(v14 + 48) = v15;
      long long v16 = v25;
      long long v17 = v26;
      long long v18 = v28;
      *(_OWORD *)(v14 + 96) = v27;
      *(_OWORD *)(v14 + 112) = v18;
      *(_OWORD *)(v14 + 64) = v16;
      *(_OWORD *)(v14 + 80) = v17;
      long long v19 = v29;
      long long v20 = v30;
      long long v21 = v31;
      *(unsigned char *)(v14 + 176) = v32;
      *(_OWORD *)(v14 + 144) = v20;
      *(_OWORD *)(v14 + 160) = v21;
      *(_OWORD *)(v14 + 128) = v19;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_21F884CE8()
{
  return MEMORY[0x270FA0238](v0, 25, 7);
}

uint64_t sub_21F884CF8@<X0>(uint64_t a1@<X8>)
{
  return sub_21F88472C(v1, (void (*)(uint64_t, uint64_t))sub_21F7642FC, a1);
}

uint64_t sub_21F884D28@<X0>(uint64_t a1@<X8>)
{
  return sub_21F884A44(v1, (void (*)(uint64_t, uint64_t))sub_21F811404, a1);
}

uint64_t sub_21F884D58@<X0>(_OWORD *a1@<X8>)
{
  return sub_21F884844(v1, a1);
}

uint64_t sub_21F884D60(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 80);
  unsigned __int8 v4 = *(unsigned char *)(a1 + 88);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_21F7642FC(v2);
  swift_bridgeObjectRetain();
  sub_21F7637E4(v3, v4);
  return a1;
}

uint64_t sub_21F884DDC(uint64_t result, void *(**a2)(double *__return_ptr, uint64_t *))
{
  unint64_t v3 = 0;
  unint64_t v4 = *(void *)(result + 16);
  uint64_t v5 = result + 32;
  uint64_t v6 = MEMORY[0x263F8EE78];
LABEL_2:
  if (v3 <= v4) {
    unint64_t v7 = v4;
  }
  else {
    unint64_t v7 = v3;
  }
  while (1)
  {
    if (v4 == v3) {
      return v6;
    }
    if (v7 == v3) {
      break;
    }
    uint64_t v8 = *(void *)(v5 + 8 * v3++);
    uint64_t v11 = v8;
    uint64_t result = (uint64_t)(*a2)(&v12, &v11);
    if (v12 > 0.0)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v13 = v6;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_21F76CFE0(0, *(void *)(v6 + 16) + 1, 1);
        uint64_t v6 = v13;
      }
      unint64_t v10 = *(void *)(v6 + 16);
      unint64_t v9 = *(void *)(v6 + 24);
      if (v10 >= v9 >> 1)
      {
        uint64_t result = (uint64_t)sub_21F76CFE0((char *)(v9 > 1), v10 + 1, 1);
        uint64_t v6 = v13;
      }
      *(void *)(v6 + 16) = v10 + 1;
      *(void *)(v6 + 8 * v10 + 32) = v8;
      goto LABEL_2;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_21F884F00@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_21F88439C(a1, *(void *)(v2 + 16), a2);
}

void *sub_21F884F20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  return sub_21F8845B8(a1, a2, *(void *(***)(void *__return_ptr, double *))(v4 + 16), a3, a4);
}

uint64_t sub_21F884F28(uint64_t a1, uint64_t a2, void (*a3)(long long *__return_ptr, uint64_t, uint64_t, double))
{
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a2 + 16);
  if (v6 >= v5) {
    int64_t v7 = *(void *)(a1 + 16);
  }
  else {
    int64_t v7 = *(void *)(a2 + 16);
  }
  uint64_t v62 = MEMORY[0x263F8EE78];
  sub_21F7A2C80(0, v7, 0);
  uint64_t v8 = v62;
  int64_t v45 = v7;
  uint64_t v47 = a2;
  uint64_t v48 = a1;
  unint64_t v49 = v5;
  int64_t v46 = v6;
  if (v7)
  {
    unint64_t v9 = (double *)(a1 + 32);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v11 = (uint64_t *)(a2 + 40);
    unint64_t v12 = v5;
    int64_t v13 = v7;
    unint64_t v14 = v6;
    while (v12)
    {
      if (!v14) {
        goto LABEL_26;
      }
      double v15 = *v9;
      uint64_t v16 = *(v11 - 1);
      uint64_t v17 = *v11;
      swift_bridgeObjectRetain();
      a3(&v52, v16, v17, v15);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v62 = v8;
      unint64_t v19 = *(void *)(v8 + 16);
      unint64_t v18 = *(void *)(v8 + 24);
      if (v19 >= v18 >> 1)
      {
        uint64_t result = (uint64_t)sub_21F7A2C80((char *)(v18 > 1), v19 + 1, 1);
        uint64_t v8 = v62;
      }
      *(void *)(v8 + 16) = v19 + 1;
      uint64_t v20 = v8 + 152 * v19;
      long long v21 = v53;
      *(_OWORD *)(v20 + 32) = v52;
      *(_OWORD *)(v20 + 48) = v21;
      long long v22 = v54;
      long long v23 = v55;
      long long v24 = v57;
      *(_OWORD *)(v20 + 96) = v56;
      *(_OWORD *)(v20 + 112) = v24;
      *(_OWORD *)(v20 + 64) = v22;
      *(_OWORD *)(v20 + 80) = v23;
      long long v25 = v58;
      long long v26 = v59;
      long long v27 = v60;
      *(unsigned char *)(v20 + 176) = v61;
      *(_OWORD *)(v20 + 144) = v26;
      *(_OWORD *)(v20 + 160) = v27;
      --v14;
      *(_OWORD *)(v20 + 128) = v25;
      --v12;
      v11 += 2;
      ++v9;
      if (!--v13) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
LABEL_13:
    if (v49 <= v46)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8;
    }
    uint64_t v28 = 0;
    if (v45 <= v46) {
      int64_t v29 = v46;
    }
    else {
      int64_t v29 = v45;
    }
    int64_t v50 = v29 - v45;
    unint64_t v30 = v49 - v45;
    long long v31 = (uint64_t *)(v47 + 16 * v45 + 40);
    while (v30 != v28)
    {
      if (v46 - v45 == v28) {
        goto LABEL_24;
      }
      if (v50 == v28) {
        goto LABEL_28;
      }
      double v32 = *(double *)(v48 + 8 * v45 + 32 + 8 * v28);
      uint64_t v33 = *(v31 - 1);
      uint64_t v34 = *v31;
      swift_bridgeObjectRetain();
      a3(&v52, v33, v34, v32);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v62 = v8;
      unint64_t v36 = *(void *)(v8 + 16);
      unint64_t v35 = *(void *)(v8 + 24);
      if (v36 >= v35 >> 1)
      {
        uint64_t result = (uint64_t)sub_21F7A2C80((char *)(v35 > 1), v36 + 1, 1);
        uint64_t v8 = v62;
      }
      *(void *)(v8 + 16) = v36 + 1;
      uint64_t v37 = v8 + 152 * v36;
      long long v38 = v53;
      *(_OWORD *)(v37 + 32) = v52;
      *(_OWORD *)(v37 + 48) = v38;
      long long v39 = v54;
      long long v40 = v55;
      long long v41 = v57;
      *(_OWORD *)(v37 + 96) = v56;
      *(_OWORD *)(v37 + 112) = v41;
      *(_OWORD *)(v37 + 64) = v39;
      *(_OWORD *)(v37 + 80) = v40;
      long long v42 = v58;
      long long v43 = v59;
      long long v44 = v60;
      *(unsigned char *)(v37 + 176) = v61;
      *(_OWORD *)(v37 + 144) = v43;
      *(_OWORD *)(v37 + 160) = v44;
      *(_OWORD *)(v37 + 128) = v42;
      ++v28;
      v31 += 2;
      if (v30 == v28) {
        goto LABEL_24;
      }
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_21F885234()
{
  unint64_t result = qword_26AD46DC8;
  if (!qword_26AD46DC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD46DC8);
  }
  return result;
}

unint64_t sub_21F885288()
{
  unint64_t result = qword_26AD46C20;
  if (!qword_26AD46C20)
  {
    sub_21F779EA4(qword_26AD48308);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD46C20);
  }
  return result;
}

uint64_t sub_21F8852E4(uint64_t a1)
{
  return sub_21F88423C(a1, *(void (***)(uint64_t *__return_ptr, void *))(v1 + 16));
}

uint64_t sub_21F8852EC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(uint64_t, uint64_t))
{
  if (result)
  {
    swift_retain();
    a14(a5, a6);
    swift_bridgeObjectRetain();
    return sub_21F7637E4(a8, a9);
  }
  return result;
}

uint64_t sub_21F885370(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v15 = a1 + 32;
  while (1)
  {
    unint64_t v5 = (uint64_t *)(v15 + 16 * v4);
    uint64_t v6 = *v5;
    uint64_t v7 = *(void *)(*v5 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_21FA25FD0();
    uint64_t v17 = v8;
    if (v7)
    {
      unint64_t v9 = (uint64_t *)(v6 + 40);
      do
      {
        uint64_t v11 = *(v9 - 1);
        uint64_t v10 = *v9;
        swift_bridgeObjectRetain();
        sub_21F7D5038(&v16, v11, v10);
        swift_bridgeObjectRelease();
        v9 += 2;
        --v7;
      }
      while (v7);
      uint64_t v12 = v17;
    }
    else
    {
      uint64_t v12 = v8;
    }
    char v13 = sub_21F883E40(v12, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v13) {
      break;
    }
    if (++v4 == v2) {
      return 0;
    }
  }
  return v4;
}

uint64_t sub_21F8854A8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(uint64_t, uint64_t))
{
  if (result)
  {
    swift_release();
    a14(a5, a6);
    swift_bridgeObjectRelease();
    return sub_21F76D558(a8, a9);
  }
  return result;
}

double sub_21F88552C(uint64_t a1)
{
  *(void *)&double result = sub_21F8841B8(a1, (void (**)(_OWORD *__return_ptr, void *))*(void *)(v1 + 16)).n128_u64[0];
  return result;
}

uint64_t sub_21F885534(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    sub_21F7642FC(a8);
    swift_bridgeObjectRetain();
    return sub_21F7637E4(a11, a12);
  }
  return result;
}

void *sub_21F8855B4(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_21F885618(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  if (result)
  {
    swift_release();
    swift_bridgeObjectRelease();
    sub_21F76D5D8(a8);
    swift_bridgeObjectRelease();
    return sub_21F76D558(a11, a12);
  }
  return result;
}

uint64_t sub_21F885698(void *a1)
{
  return sub_21F884150(a1, *(void (***)(void *__return_ptr, void *))(v1 + 16));
}

uint64_t sub_21F8856A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21F76CA40(&qword_26AD43F70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_21F885708(void *a1)
{
  return sub_21F8840E4(a1, *(void (***)(uint64_t *__return_ptr, void *))(v1 + 16));
}

uint64_t sub_21F885710(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(uint64_t, uint64_t))
{
  if (result)
  {
    swift_retain();
    swift_retain();
    a13(a4, a5);
    swift_bridgeObjectRetain();
    return sub_21F7637E4(a7, a8);
  }
  return result;
}

uint64_t sub_21F8857A8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(uint64_t, uint64_t))
{
  if (result)
  {
    swift_release();
    swift_release();
    a13(a4, a5);
    swift_bridgeObjectRelease();
    return sub_21F76D558(a7, a8);
  }
  return result;
}

uint64_t sub_21F885840()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_21F885878@<X0>(_OWORD *a1@<X8>)
{
  return sub_21F88496C(v1, a1);
}

uint64_t AxisValue.index.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t AxisValue.count.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t AxisValue.as<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t v7 = *(void *)v3;
  uint64_t v8 = *(void *)(v3 + 8);
  int v9 = *(unsigned __int8 *)(v3 + 16);
  sub_21F7607AC(v7, v8, v9);
  return sub_21F9FEDD4(v7, v8, v9, a1, a2, a3);
}

uint64_t destroy for AnyPrimitivePlottable(uint64_t a1)
{
  return sub_21F7654F0(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeWithCopy for AxisValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_21F7607AC(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for AxisValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_21F7607AC(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  char v9 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v6;
  sub_21F7654F0(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for AxisValue(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v7 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v4;
  sub_21F7654F0(v5, v6, v7);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AxisValue(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AxisValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)double result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AxisValue()
{
  return &type metadata for AxisValue;
}

_UNKNOWN **sub_21F885AD8()
{
  return &off_26D1370F8;
}

uint64_t sub_21F885AE4()
{
  uint64_t v0 = sub_21F76CA40(&qword_267EE8058);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_21F76CA40(&qword_267EE8050);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (unsigned int *)((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v7);
  char v9 = (char *)&v13 - v8;
  sub_21F7AA4C0();
  sub_21FA24F40();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_21F887CDC((uint64_t)v2);
    return *MEMORY[0x263F288F8];
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v2, v3);
  uint64_t result = (*(uint64_t (**)(unsigned int *, char *, uint64_t))(v4 + 16))(v6, v9, v3);
  if (v5 == 4)
  {
    uint64_t v10 = *v6;
    uint64_t v12 = *(void (**)(unsigned int *, uint64_t))(v4 + 8);
    v12(v6, v3);
    v12((unsigned int *)v9, v3);
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_21F885CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_21FA24EF0();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, __n128))(a4 + 56))(a2, a4, v8);
  sub_21FA24EE0();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

void sub_21F885DF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getAssociatedTypeWitness();
  sub_21FA24530();
  uint64_t v5 = sub_21FA26340();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  __n128 v8 = &v13[-v7];
  sub_21FA24F40();
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  uint64_t v9 = sub_21FA24380();
  sub_21F769724((void (*)(char *, char *))sub_21F8886EC, (uint64_t)v13, MEMORY[0x263F8E628], v9, v10, (uint64_t)&v16);
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  if ((v17 & 1) == 0)
  {
    id v11 = (id)AGGraphGetAttributeSubgraph();
    AGGraphClearUpdate();
    id v12 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    sub_21F885FC4();
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
  }
}

uint64_t sub_21F885FC4()
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v3 = &v8[-v2];
  sub_21FA24670();
  uint64_t v9 = AssociatedTypeWitness;
  uint64_t v4 = sub_21FA24380();
  sub_21F74C95C((uint64_t)v3, (uint64_t)sub_21F88874C, (uint64_t)v8, AssociatedTypeWitness, MEMORY[0x263F8E628], v4, MEMORY[0x263F8E658], v5);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
  return AGGraphSetIndirectAttribute();
}

uint64_t sub_21F886144()
{
  swift_getAssociatedTypeWitness();
  uint64_t v0 = sub_21FA24530();
  uint64_t v1 = sub_21FA26340();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v10 - v3;
  uint64_t v5 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v6);
  __n128 v8 = (unsigned int *)((char *)&v10 - v7);
  sub_21FA24F40();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v4, 1, v0) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  (*(void (**)(unsigned int *, char *, uint64_t))(v5 + 32))(v8, v4, v0);
  sub_21F74D6C4(v8);
  type metadata accessor for SetDependency(0);
  AGGraphSetIndirectDependency();
  return (*(uint64_t (**)(unsigned int *, uint64_t))(v5 + 8))(v8, v0);
}

uint64_t sub_21F886378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = sub_21FA24530();
  uint64_t v6 = sub_21FA26340();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  id v12 = (char *)&v25 - v11;
  uint64_t v13 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v14);
  long long v26 = (unsigned int *)((char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v16);
  unint64_t v30 = (unsigned int *)((char *)&v25 - v17);
  type metadata accessor for SetSource(0);
  uint64_t v28 = a3;
  uint64_t v29 = v3;
  sub_21FA24F40();
  unint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v18(v12, 1, v5) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  }
  uint64_t v25 = v6;
  uint64_t v20 = v12;
  long long v21 = *(void (**)(unsigned int *, char *, uint64_t))(v13 + 32);
  v21(v30, v20, v5);
  sub_21FA24F40();
  if (v18(v9, 1, v5) == 1)
  {
    (*(void (**)(unsigned int *, uint64_t))(v13 + 8))(v30, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v25);
  }
  else
  {
    long long v22 = v26;
    v21(v26, v9, v5);
    sub_21F74D6C4(v22);
    long long v23 = v30;
    sub_21F74D6C4(v30);
    AGGraphSetIndirectAttribute();
    long long v24 = *(void (**)(unsigned int *, uint64_t))(v13 + 8);
    v24(v22, v5);
    return ((uint64_t (*)(unsigned int *, uint64_t))v24)(v23, v5);
  }
}

uint64_t sub_21F8866A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = sub_21FA24EF0();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_21F886710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_21FA24F30();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, __n128))(a4 + 16))(a2, a4, v8);
  sub_21FA24F10();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_21F886828()
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = sub_21FA24530();
  uint64_t v2 = sub_21FA26340();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = &v13[-v3];
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v6);
  __n128 v8 = &v13[-v7];
  sub_21FA24670();
  uint64_t v15 = AssociatedTypeWitness;
  uint64_t v9 = sub_21FA24380();
  sub_21F74C95C((uint64_t)v8, (uint64_t)sub_21F887B80, (uint64_t)v14, AssociatedTypeWitness, MEMORY[0x263F8E628], v9, MEMORY[0x263F8E658], v10);
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
  int IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
  sub_21F74CA38(IndirectAttribute2, (uint64_t)v4);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v1 - 8) + 56))(v4, 0, 1, v1);
  return sub_21FA24F50();
}

uint64_t sub_21F886A6C@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  int v4 = a1;
  uint64_t result = sub_21F76CA40(&qword_267EE8050);
  if (*(void *)(*(void *)(result - 8) + 64) == 4) {
    return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)(result - 8) + 16))(a2, &v4, result);
  }
  __break(1u);
  return result;
}

uint64_t sub_21F886B10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_21FA24F30();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t *initializeBufferWithCopyOfBuffer for _Chart3DContentInputs(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_21FA24B80();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_21FA24540();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[6];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = sub_21FA24EF0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    *(_DWORD *)((char *)a1 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t destroy for _Chart3DContentInputs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21FA24B80();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = sub_21FA24540();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t v8 = sub_21FA24EF0();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);

  return v9(v7, v8);
}

uint64_t initializeWithCopy for _Chart3DContentInputs(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_21FA24B80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_21FA24540();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_21FA24EF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithCopy for _Chart3DContentInputs(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_21FA24B80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_21FA24540();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_21FA24EF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for _Chart3DContentInputs(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_21FA24B80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_21FA24540();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_21FA24EF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for _Chart3DContentInputs(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_21FA24B80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_21FA24540();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_21FA24EF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ChartContentInputs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F887230);
}

uint64_t sub_21F887230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_21FA24B80();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_21FA24540();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  uint64_t v14 = sub_21FA24EF0();
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);

  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for _ChartContentInputs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F887390);
}

uint64_t sub_21F887390(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_21FA24B80();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = sub_21FA24540();
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  uint64_t v16 = sub_21FA24EF0();
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);

  return v17(v19, a2, a2, v18);
}

uint64_t type metadata accessor for _ChartContentInputs(uint64_t a1)
{
  return sub_21F769038(a1, (uint64_t *)&unk_267EE8010);
}

uint64_t sub_21F887508()
{
  uint64_t result = sub_21FA24B80();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_21FA24540();
    if (v2 <= 0x3F)
    {
      uint64_t result = sub_21FA24EF0();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _ChartContentOutputs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F887644);
}

uint64_t storeEnumTagSinglePayload for _ChartContentOutputs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F88765C);
}

uint64_t type metadata accessor for _ChartContentOutputs(uint64_t a1)
{
  return sub_21F769038(a1, (uint64_t *)&unk_267EE8020);
}

uint64_t sub_21F887684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F887698);
}

uint64_t sub_21F88769C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F8876B0);
}

uint64_t type metadata accessor for AddPreference(uint64_t a1)
{
  return sub_21F769038(a1, (uint64_t *)&unk_267EE8030);
}

uint64_t *sub_21F8876D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_21FA24F30();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
    v9[4] = v10[4];
  }
  return a1;
}

uint64_t sub_21F8877B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_21FA24F30();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(unsigned char *)(v8 + 4) = *(unsigned char *)(v9 + 4);
  return a1;
}

uint64_t sub_21F88783C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_21FA24F30();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(unsigned char *)(v8 + 4) = v10;
  return a1;
}

uint64_t sub_21F8878C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_21FA24F30();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(unsigned char *)(v8 + 4) = *(unsigned char *)(v9 + 4);
  return a1;
}

uint64_t sub_21F887954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_21FA24F30();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(unsigned char *)(v8 + 4) = *(unsigned char *)(v9 + 4);
  return a1;
}

uint64_t sub_21F8879E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F8879F4);
}

uint64_t sub_21F8879F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F887A0C);
}

uint64_t type metadata accessor for SetDependency(uint64_t a1)
{
  return sub_21F769038(a1, (uint64_t *)&unk_267EE8040);
}

uint64_t sub_21F887A30()
{
  uint64_t result = sub_21FA24F30();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_21F887AC4(uint64_t a1, uint64_t a2)
{
  v6[5] = *MEMORY[0x263EF8340];
  _OWORD v6[2] = a2;
  v6[3] = a1;
  uint64_t v2 = sub_21FA243D0();
  uint64_t v3 = sub_21FA24380();
  return sub_21F74C95C(v3, (uint64_t)sub_21F887C54, (uint64_t)v6, v2, MEMORY[0x263F8E628], v3, MEMORY[0x263F8E658], v4);
}

uint64_t sub_21F887B80(uint64_t a1)
{
  return sub_21F887AC4(a1, *(void *)(v1 + 16));
}

uint64_t sub_21F887BA0@<X0>(_DWORD *a1@<X8>)
{
  sub_21FA243D0();
  swift_getWitnessTable();
  uint64_t result = sub_21FA24370();
  *a1 = result;
  return result;
}

uint64_t sub_21F887C54@<X0>(_DWORD *a1@<X8>)
{
  return sub_21F887BA0(a1);
}

uint64_t (*sub_21F887C74())(uint64_t a1, uint64_t a2)
{
  uint64_t v1 = *(void *)(v0 + 16);
  *(void *)(swift_allocObject() + 16) = v1;
  return sub_21F887CD4;
}

uint64_t sub_21F887CC4()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_21F887CD4(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270F0F0E8](a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_21F887CDC(uint64_t a1)
{
  uint64_t v2 = sub_21F76CA40(&qword_267EE8058);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_21F887D3C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_21FA24F30();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
  }
  return a1;
}

uint64_t sub_21F887E24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21FA24F30();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v7)((void *)(v4 - 8), a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);

  return v7(v5, v4);
}

uint64_t sub_21F887EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_21FA24F30();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_21F887F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_21FA24F30();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_21F887FF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_21FA24F30();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_21F88808C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_21FA24F30();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_21F888124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F888138);
}

uint64_t sub_21F888138(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21FA24F30();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_21F8881A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F8881B8);
}

uint64_t sub_21F8881B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21FA24F30();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for SetSource(uint64_t a1)
{
  return sub_21F769038(a1, (uint64_t *)&unk_267EE8060);
}

uint64_t sub_21F888248()
{
  uint64_t result = sub_21FA24F30();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for _Chart3DContentOutputs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21FA24F30();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t destroy for _Chart3DContentOutputs(uint64_t a1)
{
  uint64_t v2 = sub_21FA24F30();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for _Chart3DContentOutputs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21FA24F30();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for _Chart3DContentOutputs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21FA24F30();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for _Chart3DContentOutputs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21FA24F30();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for _Chart3DContentOutputs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21FA24F30();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_21F888534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F888548);
}

uint64_t sub_21F88854C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21FA24F30();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_21F8885B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F8885CC);
}

uint64_t sub_21F8885D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21FA24F30();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ResetPreference(uint64_t a1)
{
  return sub_21F769038(a1, (uint64_t *)&unk_267EE8070);
}

uint64_t sub_21F888660()
{
  uint64_t result = sub_21FA24F30();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_21F8886EC@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t result = sub_21F74D6C4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_21F88874C(uint64_t a1)
{
  return sub_21F887B80(a1);
}

ValueMetadata *type metadata accessor for Chart3DContentBuilder()
{
  return &type metadata for Chart3DContentBuilder;
}

double sub_21F888774(double a1, double a2, double a3, double a4)
{
  double v4 = atan2(-(a2 - a4 * 0.5), a1 - a3 * 0.5) * 180.0 / 3.14159265;
  if (v4 <= 0.0) {
    double v4 = v4 + 360.0;
  }
  double v5 = 90.0 - v4;
  if (v5 < 0.0) {
    double v5 = v5 + 360.0;
  }
  return v5 / 360.0;
}

uint64_t sub_21F8887FC@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v29 = a2;
  unint64_t v30 = a1;
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v27 = a5;
  uint64_t v28 = v10;
  uint64_t v11 = MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v14 + 16);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v11);
  uint64_t v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  long long v21 = (char *)&v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v22 + 16))(v21, v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v21, 1, v15) == 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(a6, 1, 1, a4);
  }
  uint64_t v25 = v28;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v21, v15);
  v30(v19, v13);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  if (v6) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v25 + 32))(v27, v13, a3);
  }
  return result;
}

uint64_t sub_21F888AA8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  void (*v11)(uint64_t *__return_ptr, uint64_t *);
  void v12[2];
  uint64_t v13;
  void v14[8];
  uint64_t v15;
  unsigned char v16[120];

  sub_21F76C9DC(v3, (uint64_t)v14, &qword_26AD47AB8);
  uint64_t v7 = v14[4];
  uint64_t v8 = v14[7];
  unsigned __int8 v10 = v15;
  uint64_t v11 = (void (*)(uint64_t *__return_ptr, uint64_t *))v14[0];
  sub_21F76C9DC(v3, (uint64_t)v16, &qword_26AD47AB8);
  if (v16[104])
  {
    if (a3 == 2)
    {
      v12[0] = a1;
      v12[1] = a2;
      swift_retain();
      sub_21F7642FC(v7);
      swift_bridgeObjectRetain();
      sub_21F7637E4(v8, v10);
      v11(&v13, v12);
      sub_21F891F28(v3);
      return v13;
    }
  }
  else if (a3 <= 1u)
  {
    uint64_t v13 = a1;
    swift_retain();
    sub_21F7642FC(v7);
    swift_bridgeObjectRetain();
    sub_21F7637E4(v8, v10);
    v11(v12, &v13);
    sub_21F891F28(v3);
    return v12[0];
  }
  return 0;
}

uint64_t sub_21F888C0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  sub_21F76C978(v5, (uint64_t)&v22, &qword_267EE74F0);
  if (v30)
  {
    long long v19 = v27;
    long long v20 = v28;
    long long v21 = v29;
    long long v14 = v22;
    long long v15 = v23;
    long long v16 = v24;
    long long v17 = v25;
    long long v18 = v26;
    if (a3 == 2)
    {
      *(void *)&v12[0] = a1;
      *((void *)&v12[0] + 1) = a2;
      ((void (*)(_OWORD *))v14)(v12);
      return sub_21F76CA84((uint64_t)&v14, &qword_267EE8008);
    }
    else
    {
      uint64_t result = sub_21F76CA84((uint64_t)&v14, &qword_267EE8008);
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      *(void *)(a4 + 32) = 0;
    }
  }
  else
  {
    long long v19 = v27;
    long long v20 = v28;
    long long v21 = v29;
    long long v14 = v22;
    long long v15 = v23;
    long long v16 = v24;
    long long v17 = v25;
    long long v18 = v26;
    if (a3 > 1u)
    {
      sub_21F76CA84((uint64_t)&v14, &qword_267EE8080);
      memset(v12, 0, sizeof(v12));
      uint64_t v13 = 0;
    }
    else
    {
      uint64_t v11 = a1;
      ((void (*)(_OWORD *__return_ptr, uint64_t *))v14)(v12, &v11);
      sub_21F76CA84((uint64_t)&v14, &qword_267EE8080);
    }
    return sub_21F76C9DC((uint64_t)v12, a4, &qword_26AD43F70);
  }
  return result;
}

uint64_t *sub_21F888DA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, void *a4@<X8>)
{
  void (*v12)(void *__return_ptr, void *);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void v19[2];
  void v20[5];
  unsigned char v21[136];
  unsigned char v22[136];
  unsigned char v23[136];
  unsigned char v24[136];

  uint64_t v5 = v4;
  sub_21F76C9DC((uint64_t)v5, (uint64_t)v22, &qword_267EE74E8);
  sub_21F76C9DC((uint64_t)v22, (uint64_t)v24, &qword_267EE74E8);
  sub_21F76C9DC((uint64_t)v5, (uint64_t)v23, &qword_267EE74E8);
  if (sub_21F891F84((uint64_t)v23) == 1)
  {
    sub_21F76C9DC((uint64_t)v24, (uint64_t)v21, &qword_267EE74E8);
    uint64_t result = (uint64_t *)nullsub_1(v21, v10);
    if (a3 != 2)
    {
      long long v14 = 0;
      long long v15 = 0;
      long long v16 = 0;
      long long v17 = 0;
      long long v18 = 0;
      goto LABEL_9;
    }
    v19[0] = a1;
    v19[1] = a2;
    uint64_t v12 = (void (*)(void *__return_ptr, void *))*result;
  }
  else
  {
    sub_21F76C9DC((uint64_t)v24, (uint64_t)v21, &qword_267EE74E8);
    uint64_t result = (uint64_t *)nullsub_1(v21, v13);
    if (a3 > 1u)
    {
      long long v18 = 0;
      long long v17 = 0;
      long long v16 = 0;
      long long v15 = 0;
      long long v14 = 0;
      goto LABEL_9;
    }
    v19[0] = a1;
    uint64_t v12 = (void (*)(void *__return_ptr, void *))*result;
  }
  sub_21F810490((uint64_t)result, (void (*)(uint64_t, uint64_t))sub_21F811404);
  v12(v20, v19);
  uint64_t result = sub_21F891F8C(v5);
  long long v14 = v20[0];
  long long v15 = v20[1];
  long long v16 = v20[2];
  long long v17 = v20[3];
  long long v18 = v20[4];
LABEL_9:
  *a4 = v14;
  a4[1] = v15;
  a4[2] = v16;
  a4[3] = v17;
  a4[4] = v18;
  return result;
}

uint64_t sub_21F888F20(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  void (*v11)(uint64_t *__return_ptr, uint64_t *);
  void v12[2];
  uint64_t v13;
  void v14[7];
  uint64_t v15;
  unsigned char v16[112];

  sub_21F76C9DC((uint64_t)v3, (uint64_t)v14, qword_26AD44A50);
  uint64_t v7 = v14[3];
  uint64_t v9 = v14[6];
  unsigned __int8 v10 = v15;
  uint64_t v11 = (void (*)(uint64_t *__return_ptr, uint64_t *))v14[0];
  sub_21F76C9DC((uint64_t)v3, (uint64_t)v16, qword_26AD44A50);
  if (v16[96])
  {
    if (a3 == 2)
    {
      v12[0] = a1;
      v12[1] = a2;
      swift_retain();
      swift_retain();
      sub_21F7642FC(v7);
      swift_bridgeObjectRetain();
      sub_21F7637E4(v9, v10);
      v11(&v13, v12);
      sub_21F891FF0(v3);
      return v13;
    }
  }
  else if (a3 <= 1u)
  {
    uint64_t v13 = a1;
    swift_retain();
    swift_retain();
    sub_21F7642FC(v7);
    swift_bridgeObjectRetain();
    sub_21F7637E4(v9, v10);
    v11(v12, &v13);
    sub_21F891FF0(v3);
    return v12[0];
  }
  return 0;
}

uint64_t ChartProxy.plotAreaFrame.getter()
{
  if (*(void *)(v0 + *(int *)(type metadata accessor for ChartModel.Scenegraph() + 60)))
  {
    return swift_retain();
  }
  else
  {
    uint64_t result = sub_21FA266E0();
    __break(1u);
  }
  return result;
}

uint64_t ChartProxy.plotFrame.getter()
{
  type metadata accessor for ChartModel.Scenegraph();

  return swift_retain();
}

double ChartProxy.plotAreaSize.getter()
{
  return *(double *)(v0 + 1112);
}

uint64_t ChartProxy.position<A>(forX:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned __int8 *)(v3 + 504) == 255) {
    return 0;
  }
  uint64_t v5 = sub_21F76C248(a1, a2, a3);
  uint64_t v7 = v6;
  char v9 = v8;
  uint64_t v10 = sub_21F7CB998(v5, v6, v8, 0.0);
  double v12 = v11;
  char v14 = v13;
  uint64_t v15 = sub_21F7654F0(v5, v7, v9);
  MEMORY[0x270FA5388](v15);
  if (v14) {
    return 0;
  }
  *(void *)&v16[0] = v10;
  v16[1] = v12;
  sub_21F88D254(v16, v17);
  return *(void *)&v17[0];
}

uint64_t sub_21F889270@<X0>(double *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v6 = sub_21FA24970();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  char v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = (*a1 + a1[1]) * 0.5;
  type metadata accessor for ChartModel.Scenegraph();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F18DD0], v6);
  LOBYTE(a1) = sub_21FA24960();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (a1) {
    double v10 = *(double *)(a2 + 1112) - v10;
  }
  *a3 = v10;
  return result;
}

uint64_t ChartProxy.position<A>(forY:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned __int8 *)(v3 + 616) == 255
    || (uint64_t v4 = sub_21F76C248(a1, a2, a3),
        uint64_t v6 = v5,
        char v8 = v7,
        double v9 = COERCE_DOUBLE(sub_21F7CB998(v4, v5, v7, 0.0)),
        double v11 = v10,
        char v13 = v12,
        sub_21F7654F0(v4, v6, v8),
        (v13 & 1) != 0))
  {
    *(double *)&uint64_t result = 0.0;
  }
  else
  {
    *(double *)&uint64_t result = (v9 + v11) * 0.5;
  }
  return result;
}

uint64_t ChartProxy.position<A, B>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = *(void *)(TupleTypeMetadata2 - 8);
  __n128 v14 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  long long v16 = (char *)&v24 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(*(void *)(a3 - 8) + 16))((char *)&v24 - v15, a1, a3, v14);
  uint64_t v17 = (uint64_t)&v16[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(v17, a2, a4);
  uint64_t v18 = ChartProxy.position<A>(forX:)((uint64_t)v16, a3, a5);
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, TupleTypeMetadata2);
  }
  else
  {
    uint64_t v20 = v18;
    ChartProxy.position<A>(forY:)(v17, a4, a6);
    char v22 = v21;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, TupleTypeMetadata2);
    if ((v22 & 1) == 0) {
      return v20;
    }
  }
  return 0;
}

uint64_t ChartProxy.positionRange<A>(forX:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_21FA24970();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  double v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v12 = *(unsigned __int8 *)(v4 + 504);
  if (v12 == 255)
  {
    double v13 = 0.0;
    double v14 = 0.0;
    char v15 = 1;
  }
  else
  {
    uint64_t v16 = *(void *)(v4 + 496);
    long long v17 = *(_OWORD *)(v4 + 416);
    v32[1] = *(_OWORD *)(v4 + 400);
    v32[2] = v17;
    long long v18 = *(_OWORD *)(v4 + 448);
    v32[3] = *(_OWORD *)(v4 + 432);
    v32[4] = v18;
    long long v19 = *(_OWORD *)(v4 + 480);
    v32[5] = *(_OWORD *)(v4 + 464);
    v32[6] = v19;
    uint64_t v33 = v16;
    char v34 = v12 & 1;
    uint64_t v20 = sub_21F76C248(a1, a2, a3);
    uint64_t v22 = v21;
    char v24 = v23;
    double v13 = COERCE_DOUBLE(sub_21F7CB998(v20, v21, v23, 0.0));
    char v15 = v25 & 1;
    uint64_t v26 = v20;
    double v14 = v27;
    sub_21F7654F0(v26, v22, v24);
  }
  type metadata accessor for ChartModel.Scenegraph();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x263F18DD0], v8);
  char v28 = sub_21FA24960();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (v28)
  {
    MEMORY[0x270FA5388](result);
    *(void *)&v32[-1] = v4;
    if (v15)
    {
      return 0;
    }
    else
    {
      v35[0] = v13;
      v35[1] = v14;
      sub_21F88D274(v35, (double *)&v36);
      return v36;
    }
  }
  else if (v15)
  {
    return 0;
  }
  else
  {
    double v30 = v13;
    if (v14 >= v13) {
      double v31 = v13;
    }
    else {
      double v31 = v14;
    }
    if (v13 <= v14) {
      double v30 = v14;
    }
    if (v31 > v30) {
      __break(1u);
    }
    else {
      return *(void *)&v31;
    }
  }
  return result;
}

uint64_t ChartProxy.positionRange<A>(forY:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned __int8 *)(v3 + 616) == 255) {
    return 0;
  }
  uint64_t v4 = sub_21F76C248(a1, a2, a3);
  uint64_t v6 = v5;
  char v8 = v7;
  double v9 = COERCE_DOUBLE(sub_21F7CB998(v4, v5, v7, 0.0));
  double v11 = v10;
  char v13 = v12;
  uint64_t result = sub_21F7654F0(v4, v6, v8);
  if (v13) {
    return 0;
  }
  double v15 = v9;
  if (v11 >= v9) {
    double v16 = v9;
  }
  else {
    double v16 = v11;
  }
  if (v9 <= v11) {
    double v15 = v11;
  }
  if (v16 <= v15) {
    return *(void *)&v16;
  }
  __break(1u);
  return result;
}

uint64_t ChartProxy.positionRange<A, B>(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v35 = a6;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v14 = *(void *)(TupleTypeMetadata2 - 8);
  __n128 v15 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  long long v17 = (char *)&v34 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(*(void *)(a3 - 8) + 16))((char *)&v34 - v16, a1, a3, v15);
  uint64_t v18 = (uint64_t)&v17[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(v18, a2, a4);
  *(double *)&uint64_t v19 = COERCE_DOUBLE(ChartProxy.positionRange<A>(forX:)((uint64_t)v17, a3, a5));
  if (v21)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, TupleTypeMetadata2);
    goto LABEL_5;
  }
  float64_t v22 = *(double *)&v19;
  float64_t v23 = v20;
  uint64_t v24 = ChartProxy.positionRange<A>(forY:)(v18, a4, v35);
  float64_t v26 = v25;
  char v28 = v27;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, TupleTypeMetadata2);
  if (v28)
  {
LABEL_5:
    float64_t v22 = 0.0;
    uint64_t v24 = 0;
    float64x2_t v33 = 0uLL;
    char v30 = 1;
    goto LABEL_6;
  }
  char v30 = 0;
  v31.f64[0] = v22;
  *(void *)&v31.f64[1] = v24;
  v32.f64[0] = v23;
  v32.f64[1] = v26;
  float64x2_t v33 = vsubq_f64(v32, v31);
LABEL_6:
  *(float64_t *)a7 = v22;
  *(void *)(a7 + 8) = v24;
  *(float64x2_t *)(a7 + 16) = v33;
  *(unsigned char *)(a7 + 32) = v30;
  return result;
}

uint64_t ChartProxy.value<A>(atX:as:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>)
{
  void (*v28)(uint64_t *__return_ptr, void *);
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void v64[5];
  unsigned __int8 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void v84[2];
  uint64_t v85;
  uint64_t v86;
  char v87;

  uint64_t v9 = sub_21FA24970();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  char v13 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v14 = *(unsigned __int8 *)(v4 + 504);
  if (v14 != 255)
  {
    uint64_t v71 = a3;
    double v72 = a1;
    uint64_t v15 = *(void *)(v4 + 400);
    uint64_t v16 = *(void *)(v4 + 408);
    uint64_t v17 = *(void *)(v4 + 416);
    uint64_t v78 = a2;
    uint64_t v79 = v17;
    uint64_t v18 = *(void *)(v4 + 424);
    uint64_t v80 = v15;
    uint64_t v81 = v18;
    uint64_t v73 = *(void *)(v4 + 432);
    uint64_t v74 = v16;
    uint64_t v19 = *(void *)(v4 + 448);
    uint64_t v20 = *(void *)(v4 + 456);
    uint64_t v82 = *(void *)(v4 + 440);
    uint64_t v83 = v19;
    uint64_t v22 = *(void *)(v4 + 464);
    uint64_t v21 = *(void *)(v4 + 472);
    uint64_t v23 = *(void *)(v4 + 480);
    uint64_t v24 = *(void *)(v4 + 488);
    uint64_t v76 = v14;
    LODWORD(v77) = v14 & 1;
    uint64_t v25 = *(void *)(v4 + 496);
    long long v66 = v4 + *(int *)(type metadata accessor for ChartModel.Scenegraph() + 56);
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v13, *MEMORY[0x263F18DD0], v9);
    long long v65 = v77;
    uint64_t v67 = v25;
    v64[4] = v25;
    uint64_t v68 = v24;
    v64[3] = v24;
    uint64_t v69 = v23;
    void v64[2] = v23;
    uint64_t v70 = v21;
    v64[1] = v21;
    uint64_t v75 = v22;
    LOBYTE(v64[0]) = v22;
    uint64_t v26 = v74;
    uint64_t v27 = v73;
    uint64_t v77 = v20;
    sub_21F764268(v80, v74, v79, v81, v73, v82, v83, v20, v64[0]);
    LOBYTE(v21) = sub_21FA24960();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    if (v21) {
      a4 = *(double *)(v4 + 1112) - a4;
    }
    char v28 = (void (*)(uint64_t *__return_ptr, void *))v27;
    if (v76)
    {
      if (v27)
      {
        *(double *)uint64_t v84 = a4;
        long long v29 = v26;
        char v30 = v76;
        swift_retain();
        float64x2_t v31 = v82;
        sub_21F7642FC((uint64_t)v28);
        swift_bridgeObjectRetain();
        float64x2_t v32 = v75;
        sub_21F7637E4(v77, v75);
        v28(&v85, v84);
        float64x2_t v33 = v86;
        long long v66 = v85;
        long long v65 = v30;
        uint64_t v34 = v67;
        uint64_t v35 = v68;
        uint64_t v36 = v69;
        uint64_t v37 = v70;
        LOBYTE(v64[0]) = v32;
        long long v38 = (uint64_t)v28;
        long long v40 = v80;
        long long v39 = v81;
        long long v41 = v29;
        long long v42 = v79;
        long long v43 = v31;
        long long v44 = v83;
        int64_t v45 = v77;
        sub_21F76EE70(v80, v41, v79, v81, v38, v43, v83, v77, v64[0], v70, v69, v68, v67, v65);
        uint64_t v11 = sub_21F76EE70(v40, v74, v42, v39, v73, v82, v44, v45, v75, v37, v36, v35, v34, v76);
        if (v33) {
          int64_t v46 = v66;
        }
        else {
          int64_t v46 = 0;
        }
        if (v33) {
          LOBYTE(v14) = 2;
        }
        else {
          LOBYTE(v14) = -1;
        }
        goto LABEL_18;
      }
    }
    else if (v27)
    {
      *(double *)uint64_t v84 = a4;
      uint64_t v47 = v26;
      uint64_t v48 = v76;
      swift_retain();
      unint64_t v49 = v82;
      sub_21F7642FC((uint64_t)v28);
      swift_bridgeObjectRetain();
      int64_t v50 = v75;
      sub_21F7637E4(v77, v75);
      v28(&v85, v84);
      long long v65 = v48;
      uint64_t v51 = v67;
      long long v52 = v68;
      long long v53 = v69;
      long long v54 = v70;
      LOBYTE(v64[0]) = v50;
      long long v56 = v80;
      long long v55 = v81;
      long long v57 = v47;
      long long v58 = v79;
      long long v59 = v49;
      long long v60 = v83;
      char v61 = v77;
      sub_21F76EE70(v80, v57, v79, v81, (uint64_t)v28, v59, v83, v77, v64[0], v70, v69, v68, v67, v65);
      uint64_t v11 = sub_21F76EE70(v56, v74, v58, v55, (uint64_t)v28, v82, v60, v61, v75, v54, v53, v52, v51, v76);
      float64x2_t v33 = 0;
      int64_t v46 = v85;
      int v14 = v86 << 31 >> 31;
      if (v86) {
        int64_t v46 = 0;
      }
      goto LABEL_18;
    }
    uint64_t v11 = sub_21F76EE70(v80, v26, v79, v81, 0, v82, v83, v77, v75, v70, v69, v68, v67, v76);
    int64_t v46 = 0;
    float64x2_t v33 = 0;
    LOBYTE(v14) = -1;
LABEL_18:
    a3 = v71;
    a1 = v72;
    goto LABEL_19;
  }
  int64_t v46 = 0;
  float64x2_t v33 = 0;
LABEL_19:
  uint64_t v85 = v46;
  uint64_t v86 = v33;
  uint64_t v87 = v14;
  MEMORY[0x270FA5388](v11);
  sub_21F76CA40(&qword_26AD448E0);
  sub_21F8887FC((void (*)(char *, char *))sub_21F88D2AC, (uint64_t)v64, MEMORY[0x263F8E628], a1, v62, a3);
  return sub_21F7B24B8(v85, v86, v87);
}

uint64_t ChartProxy.value<A>(atY:as:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  void (*v13)(uint64_t *__return_ptr, void *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void v28[5];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void v38[2];
  uint64_t v39;
  uint64_t v40;
  char v41;

  uint64_t v7 = a4;
  int v8 = *(unsigned __int8 *)(v5 + 616);
  if (v8 != 255)
  {
    uint64_t v37 = a4;
    uint64_t v9 = *(void *)(v5 + 512);
    uint64_t v10 = *(void *)(v5 + 520);
    uint64_t v11 = *(void *)(v5 + 528);
    uint64_t v12 = *(void *)(v5 + 536);
    char v13 = *(void (**)(uint64_t *__return_ptr, void *))(v5 + 544);
    int v14 = *(void *)(v5 + 552);
    uint64_t v15 = *(void *)(v5 + 560);
    uint64_t v16 = *(void *)(v5 + 568);
    uint64_t v17 = *(void *)(v5 + 576);
    uint64_t v18 = *(void *)(v5 + 584);
    uint64_t v19 = *(void *)(v5 + 592);
    uint64_t v20 = *(void *)(v5 + 600);
    uint64_t v21 = *(void *)(v5 + 608);
    if (v8)
    {
      if (v13)
      {
        *(double *)long long v38 = a5;
        uint64_t v34 = v10;
        uint64_t v35 = v9;
        uint64_t v36 = a3;
        float64x2_t v31 = v12;
        float64x2_t v32 = v16;
        float64x2_t v33 = v15;
        char v30 = v11;
        sub_21F77F4A8(v9, v10, v11, v12, (uint64_t)v13, v14, v15, v16, v17, v18, v19, v20, v21, v8);
        v13(&v39, v38);
        uint64_t v22 = v40;
        long long v29 = v39;
        a1 = sub_21F76EE70(v35, v34, v30, v31, (uint64_t)v13, v14, v33, v32, v17, v18, v19, v20, v21, v8);
        if (v22) {
          uint64_t v23 = v29;
        }
        else {
          uint64_t v23 = 0;
        }
        if (v22) {
          LOBYTE(v24) = 2;
        }
        else {
          LOBYTE(v24) = -1;
        }
        goto LABEL_16;
      }
    }
    else if (v13)
    {
      *(double *)long long v38 = a5;
      uint64_t v34 = v10;
      uint64_t v35 = v9;
      uint64_t v36 = a3;
      float64x2_t v31 = v12;
      float64x2_t v32 = v16;
      float64x2_t v33 = v15;
      char v30 = v11;
      sub_21F77F4A8(v9, v10, v11, v12, (uint64_t)v13, v14, v15, v16, v17, v18, v19, v20, v21, v8);
      v13(&v39, v38);
      a1 = sub_21F76EE70(v35, v34, v30, v31, (uint64_t)v13, v14, v33, v32, v17, v18, v19, v20, v21, v8);
      uint64_t v22 = 0;
      uint64_t v23 = v39;
      uint64_t v24 = v40 << 31 >> 31;
      if (v40) {
        uint64_t v23 = 0;
      }
      goto LABEL_16;
    }
    uint64_t v23 = 0;
    uint64_t v22 = 0;
    LOBYTE(v24) = -1;
LABEL_16:
    uint64_t v7 = v37;
    goto LABEL_17;
  }
  uint64_t v23 = 0;
  uint64_t v22 = 0;
  LOBYTE(v24) = -1;
LABEL_17:
  long long v39 = v23;
  long long v40 = v22;
  long long v41 = v24;
  MEMORY[0x270FA5388](a1);
  v28[2] = a2;
  v28[3] = v25;
  v28[4] = a2;
  sub_21F76CA40(&qword_26AD448E0);
  sub_21F8887FC((void (*)(char *, char *))sub_21F88D2AC, (uint64_t)v28, MEMORY[0x263F8E628], a2, v26, v7);
  return sub_21F7B24B8(v39, v40, v41);
}

uint64_t ChartProxy.value<A, B>(at:as:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  uint64_t v37 = a4;
  long long v39 = a5;
  uint64_t v12 = sub_21FA26340();
  uint64_t v35 = *(void *)(v12 - 8);
  uint64_t v36 = v12;
  MEMORY[0x270FA5388](v12);
  int v14 = (char *)&v34 - v13;
  uint64_t v38 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v34 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_21FA26340();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v34 - v19;
  uint64_t v21 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v34 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  ChartProxy.value<A>(atX:as:)(a1, a3, (uint64_t)v20, a6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1, a1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
LABEL_5:
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56))(v39, 1, 1, TupleTypeMetadata2);
  }
  uint64_t v25 = *(uint64_t (**)(char *, char *, uint64_t))(v21 + 32);
  uint64_t v26 = v25(v24, v20, a1);
  ChartProxy.value<A>(atY:as:)(v26, a2, v37, (uint64_t)v14, a7);
  uint64_t v27 = v38;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v14, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v24, a1);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v36);
    goto LABEL_5;
  }
  uint64_t v38 = *(void *)(v27 + 32);
  char v30 = v34;
  ((void (*)(char *, char *, uint64_t))v38)(v34, v14, a2);
  uint64_t v31 = swift_getTupleTypeMetadata2();
  float64x2_t v32 = v39;
  float64x2_t v33 = &v39[*(int *)(v31 + 48)];
  v25(v39, v24, a1);
  ((void (*)(char *, char *, uint64_t))v38)(v33, v30, a2);
  return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v32, 0, 1, v31);
}

uint64_t ChartProxy.plotContainerFrame.getter()
{
  type metadata accessor for ChartModel.Scenegraph();

  return swift_retain();
}

uint64_t ChartProxy.foregroundStyle<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(unsigned __int8 *)(v3 + 720);
  if (v4 == 255) {
    return 0;
  }
  uint64_t v18 = *(void *)(v3 + 624);
  uint64_t v19 = *(void *)(v3 + 632);
  uint64_t v20 = *(void *)(v3 + 640);
  uint64_t v21 = *(void *)(v3 + 648);
  uint64_t v14 = *(void *)(v3 + 656);
  uint64_t v16 = *(void *)(v3 + 664);
  uint64_t v22 = *(void *)(v3 + 672);
  uint64_t v17 = *(void *)(v3 + 680);
  uint64_t v23 = *(void *)(v3 + 688);
  uint64_t v15 = *(void *)(v3 + 696);
  uint64_t v24 = *(void *)(v3 + 704);
  uint64_t v25 = *(void *)(v3 + 712);
  sub_21F77F47C(v18, v19, v20, v21, v14, v16, v22, v17, v23, v15, v24, v25, v4);
  uint64_t v8 = sub_21F76C248(a1, a2, a3);
  uint64_t v10 = v9;
  LOBYTE(a2) = v11;
  uint64_t v12 = sub_21F888F20(v8, v9, v11);
  sub_21F7654F0(v8, v10, a2);
  sub_21F778468(v18, v19, v20, v21, v14, v16, v22, v17, v23, v15, v24, v25, v4);
  return v12;
}

uint64_t ChartProxy.lineStyle<A>(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_21F76C9DC(v4 + 976, (uint64_t)v23, &qword_26AD491E0);
  sub_21F76C9DC((uint64_t)v23, (uint64_t)v24, &qword_26AD491E0);
  uint64_t result = sub_21F7E0BB8((uint64_t)v24);
  if (result == 1)
  {
    uint64_t v10 = 0;
    long long v11 = 0uLL;
    long long v12 = 0uLL;
  }
  else
  {
    sub_21F76C9DC((uint64_t)v24, (uint64_t)v22, &qword_267EE74E8);
    sub_21F88D340((uint64_t)v23, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F77F3E4);
    uint64_t v13 = sub_21F76C248(a1, a2, a3);
    uint64_t v15 = v14;
    char v17 = v16;
    sub_21F888DA0(v13, v14, v16, v20);
    long long v18 = v20[1];
    long long v19 = v20[0];
    uint64_t v10 = v21;
    sub_21F7654F0(v13, v15, v17);
    uint64_t result = sub_21F88D340((uint64_t)v23, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_21F77842C);
    long long v12 = v18;
    long long v11 = v19;
  }
  *(_OWORD *)a4 = v11;
  *(_OWORD *)(a4 + 16) = v12;
  *(void *)(a4 + 32) = v10;
  return result;
}

double ChartProxy.symbol<A>(for:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_21F76C978(v4 + 728, (uint64_t)v15, &qword_26AD491E8);
  if (v15[128] == 255)
  {
    sub_21F76CA84((uint64_t)v15, &qword_26AD491E8);
    *(void *)(a4 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  else
  {
    uint64_t v9 = sub_21F76C248(a1, a2, a3);
    uint64_t v11 = v10;
    char v13 = v12;
    sub_21F888C0C(v9, v10, v12, a4);
    sub_21F7654F0(v9, v11, v13);
    sub_21F76CA84((uint64_t)v15, &qword_267EE74F0);
  }
  return result;
}

uint64_t ChartProxy.symbolSize<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(unsigned __int8 *)(v3 + 968);
  if (v4 == 255) {
    return 0;
  }
  uint64_t v17 = *(void *)(v3 + 864);
  uint64_t v18 = *(void *)(v3 + 872);
  uint64_t v19 = *(void *)(v3 + 880);
  uint64_t v20 = *(void *)(v3 + 888);
  uint64_t v15 = *(void *)(v3 + 896);
  uint64_t v16 = *(void *)(v3 + 904);
  uint64_t v21 = *(void *)(v3 + 912);
  uint64_t v22 = *(void *)(v3 + 920);
  uint64_t v23 = *(void *)(v3 + 928);
  uint64_t v24 = *(void *)(v3 + 936);
  uint64_t v25 = *(void *)(v3 + 944);
  uint64_t v26 = *(void *)(v3 + 952);
  uint64_t v27 = *(void *)(v3 + 960);
  sub_21F77F4A8(v17, v18, v19, v20, v15, v16, v21, v22, v23, v24, v25, v26, v27, v4);
  uint64_t v8 = sub_21F76C248(a1, a2, a3);
  uint64_t v10 = v9;
  char v12 = v11;
  uint64_t v13 = sub_21F888AA8(v8, v9, v11);
  sub_21F7654F0(v8, v10, v12);
  sub_21F76EE70(v17, v18, v19, v20, v15, v16, v21, v22, v23, v24, v25, v26, v27, v4);
  return v13;
}

uint64_t ChartProxy.xDomain<A>(dataType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned __int8 *)(v3 + 504) != 255)
  {
    uint64_t v6 = sub_21F76CA40(&qword_26AD47AB8);
    uint64_t v7 = sub_21F7CBB7C(a2, v6, a2, a3);
    if (v7) {
      return v7;
    }
  }
  uint64_t v8 = sub_21FA25EC0();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t ChartProxy.yDomain<A>(dataType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned __int8 *)(v3 + 616) != 255)
  {
    uint64_t v6 = sub_21F76CA40(&qword_26AD47AB8);
    uint64_t v7 = sub_21F7CBB7C(a2, v6, a2, a3);
    if (v7) {
      return v7;
    }
  }
  uint64_t v8 = sub_21FA25EC0();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t ChartProxy.foregroundStyleDomain<A>(dataType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned __int8 *)(v3 + 720) != 255)
  {
    uint64_t v6 = sub_21F76CA40(qword_26AD44A50);
    uint64_t v7 = sub_21F7CBB7C(a2, v6, a2, a3);
    if (v7) {
      return v7;
    }
  }
  uint64_t v8 = sub_21FA25EC0();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t ChartProxy.symbolDomain<A>(dataType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_21F76C978(v3 + 728, (uint64_t)v9, &qword_26AD491E8);
  if (v9[128] == 255)
  {
    sub_21F76CA84((uint64_t)v9, &qword_26AD491E8);
LABEL_5:
    uint64_t v7 = sub_21FA25EC0();
    swift_bridgeObjectRelease();
    return v7;
  }
  uint64_t v6 = sub_21F76CA40(&qword_267EE74F0);
  uint64_t v7 = sub_21F7CBB7C(a2, v6, a2, a3);
  sub_21F76CA84((uint64_t)v9, &qword_267EE74F0);
  if (!v7) {
    goto LABEL_5;
  }
  return v7;
}

uint64_t ChartProxy.symbolSizeDomain<A>(dataType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned __int8 *)(v3 + 968) != 255)
  {
    uint64_t v6 = sub_21F76CA40(&qword_26AD47AB8);
    uint64_t v7 = sub_21F7CBB7C(a2, v6, a2, a3);
    if (v7) {
      return v7;
    }
  }
  uint64_t v8 = sub_21FA25EC0();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t ChartProxy.lineStyleDomain<A>(dataType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_21F76C9DC(v3 + 976, (uint64_t)v11, &qword_26AD491E0);
  sub_21F76C9DC((uint64_t)v11, (uint64_t)v12, &qword_26AD491E0);
  if (sub_21F7E0BB8((uint64_t)v12) != 1)
  {
    sub_21F76C9DC((uint64_t)v12, (uint64_t)v10, &qword_267EE74E8);
    uint64_t v6 = sub_21F76CA40(&qword_267EE74E8);
    uint64_t v7 = sub_21F7CBB7C(a2, v6, a2, a3);
    if (v7) {
      return v7;
    }
  }
  uint64_t v8 = sub_21FA25EC0();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t ChartProxy.selectXValue(at:)(double a1)
{
  void (*v22)(uint64_t *__return_ptr, double *);
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 v58;
  unsigned __int8 v59;
  unsigned __int8 v60;
  unsigned __int8 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 v81;
  unsigned char v82[56];

  uint64_t v3 = sub_21FA24970();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ChartModel.Scenegraph();
  sub_21F76C978(v1 + *(int *)(v7 + 68), (uint64_t)&v79, &qword_26AD48428);
  if (v81 == 255)
  {
    sub_21F76CA84((uint64_t)&v79, &qword_26AD48428);
    return sub_21F96D5C0(10);
  }
  sub_21F7B257C((uint64_t)&v79, (uint64_t)v82);
  int v8 = *(unsigned __int8 *)(v1 + 504);
  if (v8 == 255) {
    return sub_21F7B25D8((uint64_t)v82);
  }
  uint64_t v9 = *(void *)(v1 + 400);
  uint64_t v74 = *(void *)(v1 + 408);
  uint64_t v75 = *(void *)(v1 + 416);
  uint64_t v76 = v9;
  uint64_t v77 = *(void *)(v1 + 424);
  uint64_t v70 = *(void *)(v1 + 432);
  uint64_t v10 = *(void *)(v1 + 448);
  double v72 = *(void *)(v1 + 440);
  uint64_t v73 = v10;
  uint64_t v11 = *(void *)(v1 + 464);
  uint64_t v68 = *(void *)(v1 + 456);
  uint64_t v12 = *(void *)(v1 + 472);
  uint64_t v13 = *(void *)(v1 + 480);
  uint64_t v15 = *(void *)(v1 + 488);
  uint64_t v14 = *(void *)(v1 + 496);
  uint64_t v71 = v8;
  LODWORD(v67) = v8 & 1;
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F18DD0], v3);
  long long v64 = v14;
  long long v65 = v15;
  long long v66 = v13;
  uint64_t v67 = v12;
  uint64_t v69 = v11;
  long long v58 = v11;
  uint64_t v16 = v74;
  uint64_t v17 = v70;
  uint64_t v18 = v72;
  uint64_t v19 = v73;
  uint64_t v20 = v68;
  sub_21F764268(v76, v74, v75, v77, v70, v72, v73, v68, v58);
  char v21 = sub_21FA24960();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (v21) {
    a1 = *(double *)(v1 + 1112) - a1;
  }
  uint64_t v22 = (void (*)(uint64_t *__return_ptr, double *))v17;
  if (v71)
  {
    if (v17)
    {
      uint64_t v78 = a1;
      uint64_t v23 = v16;
      uint64_t v24 = v71;
      swift_retain();
      sub_21F7642FC((uint64_t)v22);
      swift_bridgeObjectRetain();
      uint64_t v25 = v20;
      uint64_t v26 = v69;
      sub_21F7637E4(v20, v69);
      uint64_t v27 = v18;
      v22(&v79, &v78);
      uint64_t v62 = v79;
      char v28 = (uint64_t)v22;
      long long v63 = v80;
      long long v60 = v24;
      long long v29 = v64;
      char v30 = v65;
      uint64_t v31 = v66;
      float64x2_t v32 = v67;
      uint64_t v34 = v76;
      float64x2_t v33 = v77;
      uint64_t v35 = v23;
      uint64_t v36 = v75;
      uint64_t v37 = v27;
      uint64_t v38 = v73;
      sub_21F76EE70(v76, v35, v75, v77, v28, v37, v73, v25, v26, v67, v66, v65, v64, v60);
      sub_21F76EE70(v34, v74, v36, v33, v70, v72, v38, v25, v26, v32, v31, v30, v29, v71);
      long long v39 = v63;
      if (v63)
      {
        long long v40 = 2;
        long long v41 = v62;
LABEL_13:
        sub_21F9FEACC(v41, v39, v40);
        return sub_21F7B25D8((uint64_t)v82);
      }
      return sub_21F7B25D8((uint64_t)v82);
    }
LABEL_14:
    sub_21F76EE70(v76, v16, v75, v77, 0, v18, v19, v20, v69, v67, v66, v65, v64, v71);
    return sub_21F7B25D8((uint64_t)v82);
  }
  if (!v17) {
    goto LABEL_14;
  }
  uint64_t v78 = a1;
  long long v43 = v16;
  long long v44 = v71;
  swift_retain();
  int64_t v45 = v18;
  sub_21F7642FC((uint64_t)v22);
  swift_bridgeObjectRetain();
  int64_t v46 = v20;
  uint64_t v47 = v69;
  sub_21F7637E4(v20, v69);
  v22(&v79, &v78);
  char v61 = v44;
  uint64_t v48 = v64;
  unint64_t v49 = v65;
  int64_t v50 = v66;
  uint64_t v51 = v67;
  long long v59 = v47;
  long long v53 = v76;
  long long v52 = v77;
  long long v54 = v43;
  long long v55 = v75;
  long long v56 = v45;
  long long v57 = v73;
  sub_21F76EE70(v76, v54, v75, v77, (uint64_t)v22, v56, v73, v46, v59, v67, v66, v65, v64, v61);
  sub_21F76EE70(v53, v74, v55, v52, (uint64_t)v22, v72, v57, v46, v69, v51, v50, v49, v48, v71);
  if ((v80 & 1) == 0)
  {
    long long v39 = 0;
    long long v40 = 0;
    long long v41 = v79;
    goto LABEL_13;
  }
  return sub_21F7B25D8((uint64_t)v82);
}

uint64_t ChartProxy.selectYValue(at:)(double a1)
{
  void (*v9)(uint64_t *__return_ptr, double *);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  unsigned char v38[56];

  uint64_t v3 = type metadata accessor for ChartModel.Scenegraph();
  sub_21F76C978(v1 + *(int *)(v3 + 68) + 96, (uint64_t)&v35, &qword_26AD48428);
  if (v37 == 255)
  {
    sub_21F76CA84((uint64_t)&v35, &qword_26AD48428);
    return sub_21F96D5C0(10);
  }
  sub_21F7B257C((uint64_t)&v35, (uint64_t)v38);
  int v4 = *(unsigned __int8 *)(v1 + 616);
  if (v4 != 255)
  {
    uint64_t v5 = *(void *)(v1 + 512);
    uint64_t v6 = *(void *)(v1 + 520);
    uint64_t v7 = *(void *)(v1 + 528);
    uint64_t v8 = *(void *)(v1 + 536);
    uint64_t v9 = *(void (**)(uint64_t *__return_ptr, double *))(v1 + 544);
    uint64_t v10 = *(void *)(v1 + 552);
    uint64_t v11 = *(void *)(v1 + 560);
    uint64_t v12 = *(void *)(v1 + 568);
    uint64_t v13 = *(void *)(v1 + 576);
    uint64_t v14 = *(void *)(v1 + 584);
    uint64_t v15 = *(void *)(v1 + 592);
    uint64_t v16 = *(void *)(v1 + 600);
    uint64_t v17 = *(void *)(v1 + 608);
    if (v4)
    {
      if (!v9) {
        return sub_21F7B25D8((uint64_t)v38);
      }
      uint64_t v34 = a1;
      uint64_t v31 = v7;
      float64x2_t v33 = v6;
      uint64_t v27 = v8;
      long long v29 = v11;
      uint64_t v25 = v12;
      sub_21F77F4A8(v5, v6, v7, v8, (uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, v17, v4);
      v9(&v35, &v34);
      uint64_t v22 = v36;
      uint64_t v23 = v35;
      sub_21F76EE70(v5, v33, v31, v27, (uint64_t)v9, v10, v29, v25, v13, v14, v15, v16, v17, v4);
      if (!v22) {
        return sub_21F7B25D8((uint64_t)v38);
      }
      uint64_t v18 = v22;
      uint64_t v19 = 2;
      uint64_t v20 = v23;
    }
    else
    {
      if (!v9) {
        return sub_21F7B25D8((uint64_t)v38);
      }
      uint64_t v34 = a1;
      char v30 = v7;
      float64x2_t v32 = v6;
      uint64_t v26 = v8;
      char v28 = v11;
      uint64_t v24 = v12;
      sub_21F77F4A8(v5, v6, v7, v8, (uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, v17, v4);
      v9(&v35, &v34);
      sub_21F76EE70(v5, v32, v30, v26, (uint64_t)v9, v10, v28, v24, v13, v14, v15, v16, v17, v4);
      if (v36) {
        return sub_21F7B25D8((uint64_t)v38);
      }
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = v35;
    }
    sub_21F9FEACC(v20, v18, v19);
  }
  return sub_21F7B25D8((uint64_t)v38);
}

uint64_t ChartProxy.selectXRange(from:to:)(double a1, double a2)
{
  void (*v21)(uint64_t *__return_ptr, double *);
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  void (*v71)(uint64_t *__return_ptr, double *);
  uint64_t v72;
  uint64_t v73;
  char v74;
  unsigned __int8 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 v92;
  uint64_t v93;
  uint64_t v94;
  unsigned __int8 v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 v107;
  unsigned __int8 v108;
  unsigned __int8 v109;
  unsigned __int8 v110;
  unsigned __int8 v111;
  unsigned __int8 v112;
  unsigned __int8 v113;
  unsigned __int8 v114;
  unsigned __int8 v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(char *, uint64_t);
  uint64_t v121;
  void (*v122)(char *, void, uint64_t);
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(uint64_t *__return_ptr, double *);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  double v142;
  uint64_t v143;
  uint64_t v144;
  unsigned __int8 v145;
  unsigned char v146[4];

  uint64_t v3 = v2;
  uint64_t v6 = sub_21FA24970();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v116 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ChartModel.Scenegraph();
  sub_21F76C978(v3 + *(int *)(v10 + 68) + 48, (uint64_t)&v143, &qword_26AD49C00);
  if (v145 == 255)
  {
    sub_21F76CA84((uint64_t)&v143, &qword_26AD49C00);
    return sub_21F96D5C0(10);
  }
  sub_21F7B262C((uint64_t)&v143, (uint64_t)v146);
  int v11 = *(unsigned __int8 *)(v3 + 504);
  if (v11 == 255) {
    return sub_21F7B26E4((uint64_t)v146);
  }
  char v135 = *(void *)(v3 + 400);
  uint64_t v140 = *(void *)(v3 + 408);
  uint64_t v12 = *(void *)(v3 + 424);
  char v136 = *(void *)(v3 + 416);
  uint64_t v137 = v12;
  double v131 = *(void (**)(uint64_t *__return_ptr, double *))(v3 + 432);
  uint64_t v138 = v9;
  uint64_t v139 = v6;
  uint64_t v130 = *(void *)(v3 + 440);
  uint64_t v13 = *(void *)(v3 + 456);
  uint64_t v141 = *(void *)(v3 + 448);
  uint64_t v14 = *(void *)(v3 + 464);
  uint64_t v15 = *(void *)(v3 + 472);
  uint64_t v17 = *(void *)(v3 + 480);
  uint64_t v16 = *(void *)(v3 + 488);
  uint64_t v18 = *(void *)(v3 + 496);
  LODWORD(v133) = v11;
  uint64_t v19 = v3 + *(int *)(v10 + 56);
  uint64_t v20 = *(void (**)(void))(v7 + 104);
  uint64_t v123 = *MEMORY[0x263F18DD0];
  uint64_t v124 = v7 + 104;
  double v122 = (void (*)(char *, void, uint64_t))v20;
  v20(v138);
  uint64_t v126 = v18;
  uint64_t v127 = v16;
  uint64_t v128 = v17;
  uint64_t v129 = v15;
  double v132 = v14;
  double v107 = v14;
  char v21 = v131;
  uint64_t v22 = v130;
  uint64_t v23 = v138;
  char v134 = v13;
  sub_21F764268(v135, v140, v136, v137, (uint64_t)v131, v130, v141, v13, v107);
  uint64_t v125 = v19;
  LOBYTE(v19) = sub_21FA24960();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v121 = v7 + 8;
  uint64_t v120 = v24;
  v24(v23, v139);
  if (v19) {
    a1 = *(double *)(v3 + 1112) - a1;
  }
  if (v133)
  {
    if (v21)
    {
      uint64_t v142 = a1;
      uint64_t v25 = v140;
      uint64_t v26 = v133;
      swift_retain();
      sub_21F7642FC((uint64_t)v21);
      swift_bridgeObjectRetain();
      uint64_t v27 = v132;
      sub_21F7637E4(v134, v132);
      char v28 = v22;
      v21(&v143, &v142);
      long long v29 = (uint64_t)v21;
      uint64_t v118 = v143;
      uint64_t v119 = v144;
      uint64_t v112 = v26;
      char v30 = v126;
      uint64_t v31 = v127;
      float64x2_t v32 = v128;
      float64x2_t v33 = v129;
      double v108 = v27;
      uint64_t v34 = v135;
      uint64_t v35 = v25;
      uint64_t v37 = v136;
      uint64_t v36 = v137;
      uint64_t v38 = v28;
      long long v39 = v141;
      long long v40 = v134;
      sub_21F76EE70(v135, v35, v136, v137, v29, v38, v141, v134, v108, v129, v128, v127, v126, v112);
      sub_21F76EE70(v34, v140, v37, v36, (uint64_t)v131, v130, v39, v40, v132, v33, v32, v31, v30, v133);
      long long v41 = v119;
      if (v119)
      {
        long long v42 = 2;
        long long v43 = v118;
        goto LABEL_13;
      }
      return sub_21F7B26E4((uint64_t)v146);
    }
LABEL_20:
    sub_21F76EE70(v135, v140, v136, v137, 0, v22, v141, v134, v132, v129, v128, v127, v126, v133);
    return sub_21F7B26E4((uint64_t)v146);
  }
  if (!v21) {
    goto LABEL_20;
  }
  uint64_t v142 = a1;
  int64_t v45 = v140;
  int64_t v46 = v133;
  swift_retain();
  sub_21F7642FC((uint64_t)v21);
  swift_bridgeObjectRetain();
  uint64_t v47 = v132;
  sub_21F7637E4(v134, v132);
  v21(&v143, &v142);
  uint64_t v48 = (uint64_t)v21;
  uint64_t v113 = v46;
  unint64_t v49 = v126;
  int64_t v50 = v127;
  uint64_t v51 = v128;
  long long v52 = v129;
  double v109 = v47;
  long long v53 = v135;
  long long v54 = v45;
  long long v56 = v136;
  long long v55 = v137;
  long long v57 = v22;
  long long v58 = v141;
  long long v59 = v134;
  sub_21F76EE70(v135, v54, v136, v137, v48, v57, v141, v134, v109, v129, v128, v127, v126, v113);
  sub_21F76EE70(v53, v140, v56, v55, (uint64_t)v131, v130, v58, v59, v132, v52, v51, v50, v49, v133);
  if ((v144 & 1) == 0)
  {
    long long v41 = 0;
    long long v42 = 0;
    long long v43 = v143;
LABEL_13:
    long long v60 = *(unsigned __int8 *)(v3 + 504);
    if (v60 == 255)
    {
LABEL_27:
      sub_21F7B24B8(v43, v41, v42);
      return sub_21F7B26E4((uint64_t)v146);
    }
    uint64_t v117 = v42;
    uint64_t v119 = v41;
    uint64_t v118 = v43;
    char v61 = *(void *)(v3 + 408);
    uint64_t v62 = *(void *)(v3 + 416);
    char v136 = *(void *)(v3 + 400);
    uint64_t v137 = v62;
    uint64_t v140 = *(void *)(v3 + 424);
    uint64_t v141 = v61;
    double v131 = *(void (**)(uint64_t *__return_ptr, double *))(v3 + 432);
    long long v63 = *(void *)(v3 + 448);
    uint64_t v130 = *(void *)(v3 + 440);
    long long v64 = *(void *)(v3 + 464);
    uint64_t v133 = *(void *)(v3 + 456);
    long long v66 = *(void *)(v3 + 472);
    long long v65 = *(void *)(v3 + 480);
    uint64_t v68 = *(void *)(v3 + 488);
    uint64_t v67 = *(void *)(v3 + 496);
    LODWORD(v134) = v60;
    uint64_t v70 = v138;
    uint64_t v69 = v139;
    v122(v138, v123, v139);
    uint64_t v126 = v67;
    uint64_t v127 = v68;
    uint64_t v128 = v65;
    uint64_t v129 = v66;
    double v132 = v64;
    uint64_t v71 = v131;
    double v72 = v130;
    char v135 = v63;
    uint64_t v73 = v133;
    sub_21F764268(v136, v141, v137, v140, (uint64_t)v131, v130, v63, v133, v64);
    uint64_t v74 = sub_21FA24960();
    v120(v70, v69);
    if (v74) {
      a2 = *(double *)(v3 + 1112) - a2;
    }
    uint64_t v75 = v134;
    if (v134)
    {
      if (v71)
      {
        uint64_t v142 = a2;
        uint64_t v76 = v141;
        swift_retain();
        sub_21F7642FC((uint64_t)v71);
        swift_bridgeObjectRetain();
        uint64_t v77 = v73;
        uint64_t v78 = v73;
        uint64_t v79 = v132;
        sub_21F7637E4(v78, v132);
        uint64_t v80 = v72;
        v71(&v143, &v142);
        uint64_t v138 = (char *)v143;
        uint64_t v139 = v144;
        double v114 = v75;
        uint64_t v81 = v126;
        uint64_t v82 = v127;
        uint64_t v83 = v128;
        uint64_t v84 = v129;
        double v110 = v79;
        uint64_t v85 = (uint64_t)v71;
        uint64_t v86 = v136;
        uint64_t v87 = v76;
        char v88 = v137;
        uint64_t v89 = v140;
        uint64_t v90 = v135;
        sub_21F76EE70(v136, v87, v137, v140, v85, v80, v135, v77, v110, v129, v128, v127, v126, v114);
        sub_21F76EE70(v86, v141, v88, v89, (uint64_t)v131, v80, v90, v77, v132, v84, v83, v82, v81, v134);
        uint64_t v91 = v139;
        if (v139)
        {
          char v92 = 2;
          uint64_t v93 = v118;
          double v94 = v119;
          uint64_t v95 = v117;
          double v96 = (uint64_t)v138;
LABEL_24:
          sub_21F9FEC58(v93, v94, v95, v96, v91, v92);
          return sub_21F7B26E4((uint64_t)v146);
        }
        goto LABEL_26;
      }
    }
    else if (v71)
    {
      uint64_t v142 = a2;
      double v97 = v141;
      swift_retain();
      sub_21F7642FC((uint64_t)v71);
      swift_bridgeObjectRetain();
      double v98 = v132;
      sub_21F7637E4(v73, v132);
      unsigned int v99 = v72;
      v71(&v143, &v142);
      double v115 = v75;
      uint64_t v100 = v126;
      double v101 = v127;
      double v102 = v128;
      double v103 = v129;
      uint64_t v111 = v98;
      double v105 = v136;
      double v104 = v137;
      double v106 = v140;
      sub_21F76EE70(v136, v97, v137, v140, (uint64_t)v71, v99, v135, v133, v111, v129, v128, v127, v126, v115);
      sub_21F76EE70(v105, v97, v104, v106, (uint64_t)v71, v99, v135, v133, v132, v103, v102, v101, v100, v134);
      if ((v144 & 1) == 0)
      {
        uint64_t v91 = 0;
        char v92 = 0;
        double v96 = v143;
        uint64_t v93 = v118;
        double v94 = v119;
        uint64_t v95 = v117;
        goto LABEL_24;
      }
      goto LABEL_26;
    }
    sub_21F76EE70(v136, v141, v137, v140, 0, v72, v135, v73, v132, v129, v128, v127, v126, v134);
LABEL_26:
    long long v43 = v118;
    long long v41 = v119;
    LOBYTE(v42) = v117;
    goto LABEL_27;
  }
  return sub_21F7B26E4((uint64_t)v146);
}

uint64_t ChartProxy.selectYRange(from:to:)(double a1, double a2)
{
  void (*v7)(uint64_t *__return_ptr, double *);
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  unsigned char v38[56];

  uint64_t v5 = type metadata accessor for ChartModel.Scenegraph();
  sub_21F76C978(v2 + *(int *)(v5 + 68) + 144, (uint64_t)&v35, &qword_26AD49C00);
  if (v37 == 255)
  {
    sub_21F76CA84((uint64_t)&v35, &qword_26AD49C00);
    return sub_21F96D5C0(10);
  }
  sub_21F7B262C((uint64_t)&v35, (uint64_t)v38);
  int v6 = *(unsigned __int8 *)(v2 + 616);
  if (v6 != 255)
  {
    char v28 = *(void *)(v2 + 512);
    long long v29 = *(void *)(v2 + 520);
    uint64_t v26 = *(void *)(v2 + 536);
    uint64_t v27 = *(void *)(v2 + 528);
    uint64_t v7 = *(void (**)(uint64_t *__return_ptr, double *))(v2 + 544);
    uint64_t v24 = *(void *)(v2 + 568);
    uint64_t v25 = *(void *)(v2 + 560);
    uint64_t v22 = *(void *)(v2 + 552);
    uint64_t v23 = *(void *)(v2 + 576);
    float64x2_t v32 = *(void *)(v2 + 592);
    float64x2_t v33 = *(void *)(v2 + 584);
    char v30 = *(void *)(v2 + 608);
    uint64_t v31 = *(void *)(v2 + 600);
    if (v6)
    {
      if (!v7) {
        return sub_21F7B26E4((uint64_t)v38);
      }
      uint64_t v34 = a1;
      sub_21F77F4A8(v28, v29, v27, v26, (uint64_t)v7, v22, v25, v24, v23, v33, v32, v31, v30, v6);
      v7(&v35, &v34);
      uint64_t v12 = v36;
      char v21 = v35;
      sub_21F76EE70(v28, v29, v27, v26, (uint64_t)v7, v22, v25, v24, v23, v33, v32, v31, v30, v6);
      if (!v12) {
        return sub_21F7B26E4((uint64_t)v38);
      }
      uint64_t v34 = a2;
      sub_21F77F4A8(v28, v29, v27, v26, (uint64_t)v7, v22, v25, v24, v23, v33, v32, v31, v30, v6);
      v7(&v35, &v34);
      uint64_t v18 = v35;
      uint64_t v19 = v36;
      sub_21F76EE70(v28, v29, v27, v26, (uint64_t)v7, v22, v25, v24, v23, v33, v32, v31, v30, v6);
      uint64_t v13 = v19;
      if (!v19)
      {
        uint64_t v9 = v12;
        uint64_t v8 = v21;
        uint64_t v10 = 2;
        goto LABEL_16;
      }
      uint64_t v14 = 2;
      uint64_t v16 = v12;
      uint64_t v15 = v21;
      uint64_t v17 = v18;
    }
    else
    {
      if (!v7) {
        return sub_21F7B26E4((uint64_t)v38);
      }
      uint64_t v34 = a1;
      sub_21F77F4A8(v28, v29, v27, v26, (uint64_t)v7, v22, v25, v24, v23, v33, v32, v31, v30, v6);
      v7(&v35, &v34);
      sub_21F76EE70(v28, v29, v27, v26, (uint64_t)v7, v22, v25, v24, v23, v33, v32, v31, v30, v6);
      if (v36) {
        return sub_21F7B26E4((uint64_t)v38);
      }
      uint64_t v20 = v35;
      uint64_t v34 = a2;
      sub_21F77F4A8(v28, v29, v27, v26, (uint64_t)v7, v22, v25, v24, v23, v33, v32, v31, v30, v6);
      v7(&v35, &v34);
      sub_21F76EE70(v28, v29, v27, v26, (uint64_t)v7, v22, v25, v24, v23, v33, v32, v31, v30, v6);
      if (v36)
      {
        uint64_t v8 = v20;
        uint64_t v9 = 0;
        uint64_t v10 = 0;
LABEL_16:
        sub_21F7B24B8(v8, v9, v10);
        return sub_21F7B26E4((uint64_t)v38);
      }
      uint64_t v14 = 0;
      uint64_t v16 = 0;
      uint64_t v13 = 0;
      uint64_t v17 = v35;
      uint64_t v15 = v20;
    }
    sub_21F9FEC58(v15, v16, v14, v17, v13, v14);
  }
  return sub_21F7B26E4((uint64_t)v38);
}

uint64_t ChartProxy.selectAngleValue(at:)(double a1)
{
  void (*v23)(uint64_t *__return_ptr, double *);
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  unsigned __int8 v56;
  unsigned __int8 v57;
  unsigned __int8 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 v78;
  unsigned char v79[56];

  uint64_t v3 = sub_21FA24970();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  int v6 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ChartModel.Scenegraph();
  sub_21F76C978(v1 + *(int *)(v7 + 68) + 192, (uint64_t)&v76, &qword_26AD48428);
  if (v78 == 255)
  {
    sub_21F76CA84((uint64_t)&v76, &qword_26AD48428);
    return sub_21F96D5C0(10);
  }
  sub_21F7B257C((uint64_t)&v76, (uint64_t)v79);
  int v8 = *(unsigned __int8 *)(v1 + 504);
  if (v8 == 255) {
    return sub_21F7B25D8((uint64_t)v79);
  }
  double v9 = a1 * 57.2957795 / 360.0 * *(double *)(v1 + 1112);
  uint64_t v10 = *(void *)(v1 + 400);
  uint64_t v71 = *(void *)(v1 + 408);
  double v72 = *(void *)(v1 + 416);
  uint64_t v73 = v10;
  uint64_t v74 = *(void *)(v1 + 424);
  uint64_t v67 = *(void *)(v1 + 432);
  long long v64 = *(void *)(v1 + 440);
  long long v66 = *(void *)(v1 + 448);
  uint64_t v11 = *(void *)(v1 + 464);
  uint64_t v69 = *(void *)(v1 + 456);
  uint64_t v12 = v3;
  long long v65 = v3;
  uint64_t v13 = *(void *)(v1 + 472);
  uint64_t v14 = *(void *)(v1 + 480);
  uint64_t v15 = *(void *)(v1 + 488);
  uint64_t v16 = *(void *)(v1 + 496);
  uint64_t v70 = v8;
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F18DD0], v12);
  uint64_t v17 = v64;
  long long v60 = v16;
  char v61 = v15;
  uint64_t v62 = v14;
  long long v63 = v13;
  uint64_t v68 = v11;
  long long v54 = v11;
  uint64_t v18 = v71;
  uint64_t v19 = v67;
  uint64_t v20 = v66;
  uint64_t v21 = v69;
  sub_21F764268(v73, v71, v72, v74, v67, v64, v66, v69, v54);
  char v22 = sub_21FA24960();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v65);
  if (v22) {
    double v9 = *(double *)(v1 + 1112) - v9;
  }
  uint64_t v23 = (void (*)(uint64_t *__return_ptr, double *))v19;
  if (v70)
  {
    if (v19)
    {
      uint64_t v75 = v9;
      uint64_t v24 = v18;
      uint64_t v25 = v70;
      swift_retain();
      sub_21F7642FC((uint64_t)v23);
      swift_bridgeObjectRetain();
      uint64_t v26 = v21;
      uint64_t v27 = v68;
      sub_21F7637E4(v21, v68);
      v23(&v76, &v75);
      long long v59 = v76;
      char v28 = (uint64_t)v23;
      long long v65 = v77;
      long long v57 = v25;
      long long v29 = v60;
      char v30 = v61;
      uint64_t v31 = v62;
      float64x2_t v32 = v63;
      long long v55 = v27;
      uint64_t v34 = v73;
      float64x2_t v33 = v74;
      uint64_t v35 = v24;
      uint64_t v36 = v72;
      uint64_t v37 = v66;
      sub_21F76EE70(v73, v35, v72, v74, v28, v17, v66, v26, v55, v63, v62, v61, v60, v57);
      sub_21F76EE70(v34, v71, v36, v33, v67, v17, v37, v26, v68, v32, v31, v30, v29, v70);
      uint64_t v38 = v65;
      if (v65)
      {
        long long v39 = 2;
        long long v40 = v59;
LABEL_13:
        sub_21F9FEACC(v40, v38, v39);
        return sub_21F7B25D8((uint64_t)v79);
      }
      return sub_21F7B25D8((uint64_t)v79);
    }
LABEL_14:
    sub_21F76EE70(v73, v18, v72, v74, 0, v17, v20, v21, v68, v63, v62, v61, v60, v70);
    return sub_21F7B25D8((uint64_t)v79);
  }
  if (!v19) {
    goto LABEL_14;
  }
  uint64_t v75 = v9;
  long long v42 = v18;
  long long v43 = v70;
  swift_retain();
  sub_21F7642FC((uint64_t)v23);
  long long v44 = v20;
  swift_bridgeObjectRetain();
  int64_t v45 = v68;
  sub_21F7637E4(v21, v68);
  v23(&v76, &v75);
  long long v58 = v43;
  int64_t v46 = v60;
  uint64_t v47 = v61;
  uint64_t v48 = v62;
  unint64_t v49 = v63;
  long long v56 = v45;
  uint64_t v51 = v73;
  int64_t v50 = v74;
  long long v52 = v42;
  long long v53 = v72;
  sub_21F76EE70(v73, v52, v72, v74, (uint64_t)v23, v17, v44, v69, v56, v63, v62, v61, v60, v58);
  sub_21F76EE70(v51, v71, v53, v50, (uint64_t)v23, v17, v44, v69, v68, v49, v48, v47, v46, v70);
  if ((v77 & 1) == 0)
  {
    uint64_t v38 = 0;
    long long v39 = 0;
    long long v40 = v76;
    goto LABEL_13;
  }
  return sub_21F7B25D8((uint64_t)v79);
}

double ChartProxy.angle(at:)(double a1, double a2)
{
  double v3 = atan2(-(a2 - *(double *)(v2 + 1120) * 0.5), a1 - *(double *)(v2 + 1112) * 0.5) * 180.0 / 3.14159265;
  if (v3 <= 0.0) {
    double v3 = v3 + 360.0;
  }
  double v4 = 90.0 - v3;
  if (v4 < 0.0) {
    double v4 = v4 + 360.0;
  }
  return v4 / 360.0 * 360.0 * 0.0174532925;
}

uint64_t ChartProxy.value<A>(atAngle:as:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>)
{
  return ChartProxy.value<A>(atX:as:)(a1, a2, a3, a4 * 57.2957795 / 360.0 * *(double *)(v4 + 1112));
}

uint64_t View.chartOverlay<A>(alignment:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_21F88CE9C(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&unk_26D137178, (uint64_t)sub_21F88D3E4, MEMORY[0x263F1AF60]);
}

uint64_t View.chartBackground<A>(alignment:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_21F88CE9C(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&unk_26D1371A0, (uint64_t)sub_21F88D3E4, MEMORY[0x263F1B000]);
}

uint64_t sub_21F88CE9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(ValueMetadata *, uint64_t, uint64_t, uint64_t, void *, uint64_t, ValueMetadata *, uint64_t, uint64_t, unint64_t, uint64_t))
{
  uint64_t v18 = (void *)swift_allocObject();
  _OWORD v18[2] = a5;
  v18[3] = a6;
  void v18[4] = a7;
  v18[5] = a8;
  v18[6] = a3;
  v18[7] = a4;
  unint64_t v19 = sub_21F88D3E8();
  swift_retain();
  a11(&type metadata for ChartScenegraphKey, a1, a2, a10, v18, a5, &type metadata for ChartScenegraphKey, a6, a7, v19, a8);

  return swift_release();
}

uint64_t sub_21F88CF90@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v30 = a6;
  uint64_t v31 = a5;
  uint64_t v28 = a3;
  long long v29 = a2;
  uint64_t v8 = sub_21F76CA40(qword_26AD48608);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ChartModel.Scenegraph();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for ChartProxy();
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v28 - v23;
  sub_21F76C978(a1, (uint64_t)v10, qword_26AD48608);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_21F8B2304((uint64_t)v14);
    sub_21F76CA84((uint64_t)v10, qword_26AD48608);
  }
  else
  {
    sub_21F891E68((uint64_t)v10, (uint64_t)v14);
  }
  sub_21F891E68((uint64_t)v14, (uint64_t)v17);
  v29(v17);
  sub_21F891ECC((uint64_t)v17);
  uint64_t v25 = v31;
  sub_21F8B0FF0(v21, a4, v31);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v18 + 8);
  v26(v21, a4);
  sub_21F8B0FF0(v24, a4, v25);
  return ((uint64_t (*)(char *, uint64_t))v26)(v24, a4);
}

uint64_t sub_21F88D254@<X0>(double *a1@<X0>, double *a2@<X8>)
{
  return sub_21F889270(a1, *(void *)(v2 + 16), a2);
}

double *sub_21F88D274@<X0>(double *result@<X0>, double *a2@<X8>)
{
  double v3 = result[1];
  if (*result > v3) {
    double v4 = *result;
  }
  else {
    double v4 = result[1];
  }
  double v5 = *(double *)(*(void *)(v2 + 16) + 1112);
  if (v3 >= *result) {
    double v3 = *result;
  }
  double v6 = v5 - v3;
  if (v5 - v4 > v6)
  {
    __break(1u);
  }
  else
  {
    *a2 = v5 - v4;
    a2[1] = v6;
  }
  return result;
}

uint64_t sub_21F88D2AC@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_21F88D2C4(a1, a2);
}

uint64_t sub_21F88D2C4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  int v8 = *(unsigned __int8 *)(a1 + 16);
  sub_21F7607AC(*(void *)a1, v7, v8);
  return sub_21F9FEDD4(v6, v7, v8, v4, v5, a2);
}

uint64_t sub_21F88D340(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 128);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), v4);
  return a1;
}

uint64_t sub_21F88D3AC()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

unint64_t sub_21F88D3E8()
{
  unint64_t result = qword_26AD44A38;
  if (!qword_26AD44A38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD44A38);
  }
  return result;
}

uint64_t sub_21F88D43C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21F88CF90(a1, *(void (**)(char *))(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 24), *(void *)(v2 + 40), a2);
}

uint64_t initializeBufferWithCopyOfBuffer for ChartProxy(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for ChartModel.Scenegraph();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *(void *)a1 = *a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
    return a1;
  }
  uint64_t v6 = (int *)v4;
  uint64_t v7 = (BOOL *)(a1 + 264);
  uint64_t v8 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v8;
  uint64_t v9 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v9;
  uint64_t v10 = a2 + 4;
  char v11 = *((unsigned char *)a2 + 315);
  swift_retain();
  swift_retain();
  swift_retain();
  if (v11)
  {
    uint64_t v12 = (_OWORD *)(a1 + 32);
    int v13 = *((unsigned __int8 *)a2 + 72);
    if (v13 == 255)
    {
      long long v14 = *((_OWORD *)a2 + 3);
      *uint64_t v12 = *v10;
      *(_OWORD *)(a1 + 48) = v14;
      *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
    }
    else
    {
      long long v16 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 56) = v16;
      (**(void (***)(_OWORD *, uint64_t))(v16 - 8))(v12, (uint64_t)(a2 + 4));
      *(unsigned char *)(a1 + 72) = (v13 & 1) != 0;
    }
    uint64_t v17 = (_OWORD *)(a1 + 80);
    uint64_t v18 = a2 + 10;
    int v19 = *((unsigned __int8 *)a2 + 120);
    if (v19 == 255)
    {
      long long v20 = *((_OWORD *)a2 + 6);
      *uint64_t v17 = *v18;
      *(_OWORD *)(a1 + 96) = v20;
      *(_OWORD *)(a1 + 105) = *(_OWORD *)((char *)a2 + 105);
    }
    else
    {
      long long v21 = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(a1 + 104) = v21;
      (**(void (***)(_OWORD *, _OWORD *))(v21 - 8))(v17, v18);
      *(unsigned char *)(a1 + 120) = (v19 & 1) != 0;
    }
    uint64_t v22 = (_OWORD *)(a1 + 128);
    uint64_t v23 = a2 + 16;
    int v24 = *((unsigned __int8 *)a2 + 168);
    if (v24 == 255)
    {
      long long v25 = *((_OWORD *)a2 + 9);
      *uint64_t v22 = *v23;
      *(_OWORD *)(a1 + 144) = v25;
      *(_OWORD *)(a1 + 153) = *(_OWORD *)((char *)a2 + 153);
    }
    else
    {
      long long v26 = *(_OWORD *)(a2 + 19);
      *(_OWORD *)(a1 + 152) = v26;
      (**(void (***)(_OWORD *, _OWORD *))(v26 - 8))(v22, v23);
      *(unsigned char *)(a1 + 168) = (v24 & 1) != 0;
    }
    uint64_t v27 = (_OWORD *)(a1 + 176);
    uint64_t v28 = a2 + 22;
    int v29 = *((unsigned __int8 *)a2 + 216);
    if (v29 == 255)
    {
      long long v30 = *((_OWORD *)a2 + 12);
      *uint64_t v27 = *v28;
      *(_OWORD *)(a1 + 192) = v30;
      *(_OWORD *)(a1 + 201) = *(_OWORD *)((char *)a2 + 201);
    }
    else
    {
      long long v31 = *(_OWORD *)(a2 + 25);
      *(_OWORD *)(a1 + 200) = v31;
      (**(void (***)(_OWORD *, _OWORD *))(v31 - 8))(v27, v28);
      *(unsigned char *)(a1 + 216) = (v29 & 1) != 0;
    }
    float64x2_t v32 = (_OWORD *)(a1 + 224);
    float64x2_t v33 = a2 + 28;
    int v34 = *((unsigned __int8 *)a2 + 264);
    if (v34 == 255)
    {
      long long v35 = *((_OWORD *)a2 + 15);
      *float64x2_t v32 = *v33;
      *(_OWORD *)(a1 + 240) = v35;
      *(_OWORD *)(a1 + 249) = *(_OWORD *)((char *)a2 + 249);
    }
    else
    {
      long long v36 = *(_OWORD *)(a2 + 31);
      *(_OWORD *)(a1 + 248) = v36;
      (**(void (***)(_OWORD *, _OWORD *))(v36 - 8))(v32, v33);
      *uint64_t v7 = (v34 & 1) != 0;
    }
    uint64_t v37 = (_OWORD *)(a1 + 272);
    uint64_t v38 = a2 + 34;
    int v39 = *((unsigned __int8 *)a2 + 312);
    if (v39 == 255)
    {
      long long v40 = *((_OWORD *)a2 + 18);
      *uint64_t v37 = *v38;
      *(_OWORD *)(a1 + 288) = v40;
      *(_OWORD *)(a1 + 297) = *(_OWORD *)((char *)a2 + 297);
    }
    else
    {
      uint64_t v41 = a2[37];
      uint64_t v42 = a2[38];
      *(void *)(a1 + 296) = v41;
      *(void *)(a1 + 304) = v42;
      (**(void (***)(_OWORD *, _OWORD *))(v41 - 8))(v37, v38);
      *(unsigned char *)(a1 + 312) = (v39 & 1) != 0;
    }
    *(_WORD *)(a1 + 313) = *(_WORD *)((char *)a2 + 313);
    *(unsigned char *)(a1 + 315) = 1;
  }
  else
  {
    *(void *)(a1 + 32) = *(void *)v10;
    *(unsigned char *)(a1 + 315) = 0;
    swift_retain();
  }
  *(unsigned char *)(a1 + 316) = *((unsigned char *)a2 + 316);
  uint64_t v43 = a2[40];
  if (v43)
  {
    uint64_t v44 = a2[41];
    *(void *)(a1 + 320) = v43;
    *(void *)(a1 + 328) = v44;
    swift_retain();
    uint64_t v45 = a2[42];
    if (v45) {
      goto LABEL_38;
    }
  }
  else
  {
    *(_OWORD *)(a1 + 320) = *((_OWORD *)a2 + 20);
    uint64_t v45 = a2[42];
    if (v45)
    {
LABEL_38:
      uint64_t v46 = a2[43];
      *(void *)(a1 + 336) = v45;
      *(void *)(a1 + 344) = v46;
      swift_retain();
      uint64_t v47 = a2[44];
      if (v47) {
        goto LABEL_39;
      }
      goto LABEL_44;
    }
  }
  *(_OWORD *)(a1 + 336) = *((_OWORD *)a2 + 21);
  uint64_t v47 = a2[44];
  if (v47)
  {
LABEL_39:
    uint64_t v48 = a2[45];
    *(void *)(a1 + 352) = v47;
    *(void *)(a1 + 360) = v48;
    swift_retain();
    uint64_t v49 = a2[46];
    if (v49) {
      goto LABEL_40;
    }
LABEL_45:
    *(_OWORD *)(a1 + 368) = *((_OWORD *)a2 + 23);
    uint64_t v51 = a2[48];
    if (v51) {
      goto LABEL_41;
    }
    goto LABEL_46;
  }
LABEL_44:
  *(_OWORD *)(a1 + 352) = *((_OWORD *)a2 + 22);
  uint64_t v49 = a2[46];
  if (!v49) {
    goto LABEL_45;
  }
LABEL_40:
  uint64_t v50 = a2[47];
  *(void *)(a1 + 368) = v49;
  *(void *)(a1 + 376) = v50;
  swift_retain();
  uint64_t v51 = a2[48];
  if (v51)
  {
LABEL_41:
    uint64_t v52 = a2[49];
    *(void *)(a1 + 384) = v51;
    *(void *)(a1 + 392) = v52;
    swift_retain();
    goto LABEL_47;
  }
LABEL_46:
  *(_OWORD *)(a1 + 384) = *((_OWORD *)a2 + 24);
LABEL_47:
  int v53 = *((unsigned __int8 *)a2 + 504);
  uint64_t v209 = v6;
  if (v53 == 255)
  {
    long long v54 = *((_OWORD *)a2 + 30);
    *(_OWORD *)(a1 + 464) = *((_OWORD *)a2 + 29);
    *(_OWORD *)(a1 + 480) = v54;
    *(_OWORD *)(a1 + 489) = *(_OWORD *)((char *)a2 + 489);
    long long v55 = *((_OWORD *)a2 + 26);
    *(_OWORD *)(a1 + 400) = *((_OWORD *)a2 + 25);
    *(_OWORD *)(a1 + 416) = v55;
    long long v56 = *((_OWORD *)a2 + 28);
    *(_OWORD *)(a1 + 432) = *((_OWORD *)a2 + 27);
    *(_OWORD *)(a1 + 448) = v56;
  }
  else
  {
    char v204 = v53 & 1;
    uint64_t v57 = a2[50];
    uint64_t v58 = a2[51];
    uint64_t v59 = a2[52];
    uint64_t v60 = a2[53];
    uint64_t v61 = a2[54];
    uint64_t v62 = a2[55];
    uint64_t v64 = a2[56];
    uint64_t v63 = a2[57];
    uint64_t v180 = a2[58];
    uint64_t v184 = a2[59];
    uint64_t v189 = a2[60];
    uint64_t v194 = a2[61];
    uint64_t v199 = a2[62];
    sub_21F764268(v57, v58, v59, v60, v61, v62, v64, v63, v180);
    *(void *)(a1 + 400) = v57;
    *(void *)(a1 + 408) = v58;
    *(void *)(a1 + 416) = v59;
    *(void *)(a1 + 424) = v60;
    *(void *)(a1 + 432) = v61;
    *(void *)(a1 + 440) = v62;
    uint64_t v7 = (BOOL *)(a1 + 264);
    *(void *)(a1 + 448) = v64;
    *(void *)(a1 + 456) = v63;
    *(void *)(a1 + 464) = v180;
    *(void *)(a1 + 472) = v184;
    *(void *)(a1 + 480) = v189;
    *(void *)(a1 + 488) = v194;
    *(void *)(a1 + 496) = v199;
    *(unsigned char *)(a1 + 504) = v204;
  }
  int v65 = *((unsigned __int8 *)a2 + 616);
  if (v65 == 255)
  {
    long long v66 = *((_OWORD *)a2 + 37);
    *(_OWORD *)(a1 + 576) = *((_OWORD *)a2 + 36);
    *(_OWORD *)(a1 + 592) = v66;
    *(_OWORD *)(a1 + 601) = *(_OWORD *)((char *)a2 + 601);
    long long v67 = *((_OWORD *)a2 + 33);
    *(_OWORD *)(a1 + 512) = *((_OWORD *)a2 + 32);
    *(_OWORD *)(a1 + 528) = v67;
    long long v68 = *((_OWORD *)a2 + 35);
    *(_OWORD *)(a1 + 544) = *((_OWORD *)a2 + 34);
    *(_OWORD *)(a1 + 560) = v68;
  }
  else
  {
    char v205 = v65 & 1;
    uint64_t v69 = a2[64];
    uint64_t v70 = a2[65];
    uint64_t v71 = a2[66];
    uint64_t v72 = a2[67];
    uint64_t v73 = a2[68];
    uint64_t v74 = a2[69];
    uint64_t v75 = a2[70];
    uint64_t v76 = a2[71];
    uint64_t v181 = a2[72];
    uint64_t v185 = a2[73];
    uint64_t v190 = a2[74];
    uint64_t v195 = a2[75];
    uint64_t v200 = a2[76];
    sub_21F764268(v69, v70, v71, v72, v73, v74, v75, v76, v181);
    *(void *)(a1 + 512) = v69;
    *(void *)(a1 + 520) = v70;
    *(void *)(a1 + 528) = v71;
    *(void *)(a1 + 536) = v72;
    *(void *)(a1 + 544) = v73;
    *(void *)(a1 + 552) = v74;
    *(void *)(a1 + 560) = v75;
    uint64_t v7 = (BOOL *)(a1 + 264);
    *(void *)(a1 + 568) = v76;
    *(void *)(a1 + 576) = v181;
    *(void *)(a1 + 584) = v185;
    *(void *)(a1 + 592) = v190;
    *(void *)(a1 + 600) = v195;
    *(void *)(a1 + 608) = v200;
    *(unsigned char *)(a1 + 616) = v205;
  }
  int v77 = *((unsigned __int8 *)a2 + 720);
  if (v77 == 255)
  {
    long long v78 = *((_OWORD *)a2 + 44);
    *(_OWORD *)(a1 + 688) = *((_OWORD *)a2 + 43);
    *(_OWORD *)(a1 + 704) = v78;
    *(unsigned char *)(a1 + 720) = *((unsigned char *)a2 + 720);
    long long v79 = *((_OWORD *)a2 + 40);
    *(_OWORD *)(a1 + 624) = *((_OWORD *)a2 + 39);
    *(_OWORD *)(a1 + 640) = v79;
    long long v80 = *((_OWORD *)a2 + 42);
    *(_OWORD *)(a1 + 656) = *((_OWORD *)a2 + 41);
    *(_OWORD *)(a1 + 672) = v80;
  }
  else
  {
    char v206 = v77 & 1;
    uint64_t v81 = a2[78];
    uint64_t v82 = a2[79];
    uint64_t v83 = a2[80];
    uint64_t v84 = a2[81];
    uint64_t v85 = a2[82];
    uint64_t v86 = a2[83];
    uint64_t v87 = a2[84];
    uint64_t v88 = a2[85];
    uint64_t v186 = a2[86];
    uint64_t v191 = a2[87];
    uint64_t v196 = a2[88];
    uint64_t v201 = a2[89];
    sub_21F7E0AB8(v81, v82, v83, v84, v85, v86, v87, v88);
    *(void *)(a1 + 624) = v81;
    *(void *)(a1 + 632) = v82;
    *(void *)(a1 + 640) = v83;
    *(void *)(a1 + 648) = v84;
    *(void *)(a1 + 656) = v85;
    *(void *)(a1 + 664) = v86;
    *(void *)(a1 + 672) = v87;
    uint64_t v7 = (BOOL *)(a1 + 264);
    *(void *)(a1 + 680) = v88;
    *(void *)(a1 + 688) = v186;
    *(void *)(a1 + 696) = v191;
    *(void *)(a1 + 704) = v196;
    *(void *)(a1 + 712) = v201;
    *(unsigned char *)(a1 + 720) = v206;
  }
  int v89 = *((unsigned __int8 *)a2 + 856);
  if (v89 != 255)
  {
    uint64_t v94 = a2[92];
    *(void *)(a1 + 728) = a2[91];
    *(void *)(a1 + 736) = v94;
    uint64_t v95 = (_OWORD *)(a1 + 744);
    double v96 = a2 + 93;
    uint64_t v97 = a2[96];
    swift_retain();
    if ((v89 & 1) == 0)
    {
      if (v97)
      {
        *(void *)(a1 + 768) = v97;
        *(void *)(a1 + 776) = a2[97];
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v97 - 8))(a1 + 744, (uint64_t)(a2 + 93), v97);
        uint64_t v98 = a2[98];
        if (v98)
        {
LABEL_61:
          uint64_t v99 = a2[99];
          *(void *)(a1 + 784) = v98;
          *(void *)(a1 + 792) = v99;
          swift_retain();
LABEL_67:
          *(void *)(a1 + 800) = a2[100];
          double v103 = a2 + 101;
          int v104 = *((unsigned __int8 *)a2 + 816);
          swift_bridgeObjectRetain();
          if (v104 == 255)
          {
            *(void *)(a1 + 808) = *v103;
            *(unsigned char *)(a1 + 816) = *((unsigned char *)a2 + 816);
          }
          else
          {
            char v105 = v104 & 1;
            uint64_t v106 = *v103;
            sub_21F7637D8(v106, v105);
            *(void *)(a1 + 808) = v106;
            v7[552] = v105;
          }
          long long v107 = *(_OWORD *)(a2 + 105);
          *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 103);
          *(_OWORD *)(a1 + 840) = v107;
          v7[592] = 0;
          goto LABEL_77;
        }
      }
      else
      {
        long long v102 = *(_OWORD *)(a2 + 95);
        *uint64_t v95 = *v96;
        *(_OWORD *)(a1 + 760) = v102;
        *(void *)(a1 + 776) = a2[97];
        uint64_t v98 = a2[98];
        if (v98) {
          goto LABEL_61;
        }
      }
      *(_OWORD *)(a1 + 784) = *((_OWORD *)a2 + 49);
      goto LABEL_67;
    }
    if (v97)
    {
      *(void *)(a1 + 768) = v97;
      *(void *)(a1 + 776) = a2[97];
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v97 - 8))(a1 + 744, (uint64_t)(a2 + 93), v97);
      uint64_t v100 = a2[98];
      if (v100)
      {
LABEL_64:
        uint64_t v101 = a2[99];
        *(void *)(a1 + 784) = v100;
        *(void *)(a1 + 792) = v101;
        swift_retain();
LABEL_73:
        *(void *)(a1 + 800) = a2[100];
        double v109 = a2 + 101;
        int v110 = *((unsigned __int8 *)a2 + 816);
        swift_bridgeObjectRetain();
        if (v110 == 255)
        {
          *(void *)(a1 + 808) = *v109;
          *(unsigned char *)(a1 + 816) = *((unsigned char *)a2 + 816);
        }
        else
        {
          char v111 = v110 & 1;
          uint64_t v112 = *v109;
          sub_21F7637D8(v112, v111);
          *(void *)(a1 + 808) = v112;
          v7[552] = v111;
        }
        long long v113 = *(_OWORD *)(a2 + 105);
        *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 103);
        *(_OWORD *)(a1 + 840) = v113;
        v7[592] = 1;
        goto LABEL_77;
      }
    }
    else
    {
      long long v108 = *(_OWORD *)(a2 + 95);
      *uint64_t v95 = *v96;
      *(_OWORD *)(a1 + 760) = v108;
      *(void *)(a1 + 776) = a2[97];
      uint64_t v100 = a2[98];
      if (v100) {
        goto LABEL_64;
      }
    }
    *(_OWORD *)(a1 + 784) = *((_OWORD *)a2 + 49);
    goto LABEL_73;
  }
  long long v90 = *(_OWORD *)(a2 + 105);
  *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 103);
  *(_OWORD *)(a1 + 840) = v90;
  *(unsigned char *)(a1 + 856) = *((unsigned char *)a2 + 856);
  long long v91 = *(_OWORD *)(a2 + 97);
  *(_OWORD *)(a1 + 760) = *(_OWORD *)(a2 + 95);
  *(_OWORD *)(a1 + 776) = v91;
  long long v92 = *(_OWORD *)(a2 + 101);
  *(_OWORD *)(a1 + 792) = *(_OWORD *)(a2 + 99);
  *(_OWORD *)(a1 + 808) = v92;
  long long v93 = *(_OWORD *)(a2 + 93);
  *(_OWORD *)(a1 + 728) = *(_OWORD *)(a2 + 91);
  *(_OWORD *)(a1 + 744) = v93;
LABEL_77:
  int v114 = *((unsigned __int8 *)a2 + 968);
  if (v114 == 255)
  {
    long long v115 = *((_OWORD *)a2 + 59);
    *(_OWORD *)(a1 + 928) = *((_OWORD *)a2 + 58);
    *(_OWORD *)(a1 + 944) = v115;
    *(_OWORD *)(a1 + 953) = *(_OWORD *)((char *)a2 + 953);
    long long v116 = *((_OWORD *)a2 + 55);
    *(_OWORD *)(a1 + 864) = *((_OWORD *)a2 + 54);
    *(_OWORD *)(a1 + 880) = v116;
    long long v117 = *((_OWORD *)a2 + 57);
    *(_OWORD *)(a1 + 896) = *((_OWORD *)a2 + 56);
    *(_OWORD *)(a1 + 912) = v117;
  }
  else
  {
    char v207 = v114 & 1;
    uint64_t v118 = a2[108];
    uint64_t v119 = a2[109];
    uint64_t v120 = a2[110];
    uint64_t v121 = a2[111];
    uint64_t v122 = a2[112];
    uint64_t v123 = a2[113];
    uint64_t v124 = a2[114];
    uint64_t v125 = a2[115];
    uint64_t v182 = a2[116];
    uint64_t v187 = a2[117];
    uint64_t v192 = a2[118];
    uint64_t v197 = a2[119];
    uint64_t v202 = a2[120];
    sub_21F764268(v118, v119, v120, v121, v122, v123, v124, v125, v182);
    *(void *)(a1 + 864) = v118;
    *(void *)(a1 + 872) = v119;
    *(void *)(a1 + 880) = v120;
    *(void *)(a1 + 888) = v121;
    *(void *)(a1 + 896) = v122;
    *(void *)(a1 + 904) = v123;
    *(void *)(a1 + 912) = v124;
    *(void *)(a1 + 920) = v125;
    *(void *)(a1 + 928) = v182;
    *(void *)(a1 + 936) = v187;
    *(void *)(a1 + 944) = v192;
    *(void *)(a1 + 952) = v197;
    *(void *)(a1 + 960) = v202;
    *(unsigned char *)(a1 + 968) = v207;
  }
  int v126 = *((unsigned __int8 *)a2 + 1104);
  if (v126 == 255)
  {
    long long v127 = *((_OWORD *)a2 + 68);
    *(_OWORD *)(a1 + 1072) = *((_OWORD *)a2 + 67);
    *(_OWORD *)(a1 + 1088) = v127;
    *(unsigned char *)(a1 + 1104) = *((unsigned char *)a2 + 1104);
    long long v128 = *((_OWORD *)a2 + 64);
    *(_OWORD *)(a1 + 1008) = *((_OWORD *)a2 + 63);
    *(_OWORD *)(a1 + 1024) = v128;
    long long v129 = *((_OWORD *)a2 + 66);
    *(_OWORD *)(a1 + 1040) = *((_OWORD *)a2 + 65);
    *(_OWORD *)(a1 + 1056) = v129;
    long long v130 = *((_OWORD *)a2 + 62);
    *(_OWORD *)(a1 + 976) = *((_OWORD *)a2 + 61);
    *(_OWORD *)(a1 + 992) = v130;
  }
  else
  {
    char v208 = v126 & 1;
    uint64_t v131 = a2[122];
    uint64_t v132 = a2[123];
    uint64_t v133 = a2[124];
    uint64_t v134 = a2[125];
    uint64_t v135 = a2[126];
    uint64_t v136 = a2[127];
    uint64_t v137 = a2[128];
    uint64_t v138 = a2[129];
    uint64_t v177 = a2[130];
    uint64_t v178 = a2[131];
    uint64_t v179 = a2[132];
    uint64_t v183 = a2[133];
    uint64_t v188 = a2[134];
    uint64_t v193 = a2[135];
    uint64_t v198 = a2[136];
    uint64_t v203 = a2[137];
    sub_21F7E0C30(v131, v132, v133, v134, v135, v136, v137, v138, v177, v178, v179, v183);
    *(void *)(a1 + 976) = v131;
    *(void *)(a1 + 984) = v132;
    *(void *)(a1 + 992) = v133;
    *(void *)(a1 + 1000) = v134;
    *(void *)(a1 + 1008) = v135;
    *(void *)(a1 + 1016) = v136;
    *(void *)(a1 + 1024) = v137;
    *(void *)(a1 + 1032) = v138;
    *(void *)(a1 + 1040) = v177;
    *(void *)(a1 + 1048) = v178;
    *(void *)(a1 + 1056) = v179;
    *(void *)(a1 + 1064) = v183;
    *(void *)(a1 + 1072) = v188;
    *(void *)(a1 + 1080) = v193;
    *(void *)(a1 + 1088) = v198;
    *(void *)(a1 + 1096) = v203;
    *(unsigned char *)(a1 + 1104) = v208;
  }
  *(_OWORD *)(a1 + 1112) = *(_OWORD *)(a2 + 139);
  *(_OWORD *)(a1 + 1128) = *(_OWORD *)(a2 + 141);
  *(unsigned char *)(a1 + 1144) = *((unsigned char *)a2 + 1144);
  *(_OWORD *)(a1 + 1152) = *((_OWORD *)a2 + 72);
  *(_OWORD *)(a1 + 1168) = *((_OWORD *)a2 + 73);
  uint64_t v139 = v209[14];
  uint64_t v140 = a1 + v139;
  uint64_t v141 = (uint64_t)a2 + v139;
  uint64_t v142 = sub_21FA24970();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v142 - 8) + 16))(v140, v141, v142);
  *(void *)(a1 + v209[15]) = *(uint64_t *)((char *)a2 + v209[15]);
  *(void *)(a1 + v209[16]) = *(uint64_t *)((char *)a2 + v209[16]);
  uint64_t v143 = v209[17];
  uint64_t v144 = a1 + v143;
  uint64_t v145 = (uint64_t)a2 + v143;
  int v146 = *(unsigned __int8 *)(v145 + 40);
  swift_retain();
  swift_retain();
  if (v146 == 255)
  {
    long long v147 = *(_OWORD *)(v145 + 16);
    *(_OWORD *)uint64_t v144 = *(_OWORD *)v145;
    *(_OWORD *)(v144 + 16) = v147;
    *(_OWORD *)(v144 + 25) = *(_OWORD *)(v145 + 25);
  }
  else
  {
    long long v148 = *(_OWORD *)(v145 + 24);
    *(_OWORD *)(v144 + 24) = v148;
    (**(void (***)(uint64_t, uint64_t))(v148 - 8))(v144, v145);
    *(unsigned char *)(v144 + 40) = (v146 & 1) != 0;
  }
  char v149 = (_OWORD *)(v144 + 48);
  uint64_t v150 = (_OWORD *)(v145 + 48);
  int v151 = *(unsigned __int8 *)(v145 + 88);
  if (v151 == 255)
  {
    long long v152 = *(_OWORD *)(v145 + 64);
    *char v149 = *v150;
    *(_OWORD *)(v144 + 64) = v152;
    *(_OWORD *)(v144 + 73) = *(_OWORD *)(v145 + 73);
  }
  else
  {
    long long v153 = *(_OWORD *)(v145 + 72);
    *(_OWORD *)(v144 + 72) = v153;
    (**(void (***)(_OWORD *, _OWORD *))(v153 - 8))(v149, v150);
    *(unsigned char *)(v144 + 88) = (v151 & 1) != 0;
  }
  long long v154 = (_OWORD *)(v144 + 96);
  uint64_t v155 = (_OWORD *)(v145 + 96);
  int v156 = *(unsigned __int8 *)(v145 + 136);
  if (v156 == 255)
  {
    long long v157 = *(_OWORD *)(v145 + 112);
    *long long v154 = *v155;
    *(_OWORD *)(v144 + 112) = v157;
    *(_OWORD *)(v144 + 121) = *(_OWORD *)(v145 + 121);
  }
  else
  {
    long long v158 = *(_OWORD *)(v145 + 120);
    *(_OWORD *)(v144 + 120) = v158;
    (**(void (***)(_OWORD *, _OWORD *))(v158 - 8))(v154, v155);
    *(unsigned char *)(v144 + 136) = (v156 & 1) != 0;
  }
  uint64_t v159 = (_OWORD *)(v144 + 144);
  uint64_t v160 = (_OWORD *)(v145 + 144);
  int v161 = *(unsigned __int8 *)(v145 + 184);
  if (v161 == 255)
  {
    long long v162 = *(_OWORD *)(v145 + 160);
    *uint64_t v159 = *v160;
    *(_OWORD *)(v144 + 160) = v162;
    *(_OWORD *)(v144 + 169) = *(_OWORD *)(v145 + 169);
  }
  else
  {
    long long v163 = *(_OWORD *)(v145 + 168);
    *(_OWORD *)(v144 + 168) = v163;
    (**(void (***)(_OWORD *, _OWORD *))(v163 - 8))(v159, v160);
    *(unsigned char *)(v144 + 184) = (v161 & 1) != 0;
  }
  char v164 = (_OWORD *)(v144 + 192);
  uint64_t v165 = (_OWORD *)(v145 + 192);
  int v166 = *(unsigned __int8 *)(v145 + 232);
  if (v166 == 255)
  {
    long long v167 = *(_OWORD *)(v145 + 208);
    *char v164 = *v165;
    *(_OWORD *)(v144 + 208) = v167;
    *(_OWORD *)(v144 + 217) = *(_OWORD *)(v145 + 217);
  }
  else
  {
    long long v168 = *(_OWORD *)(v145 + 216);
    *(_OWORD *)(v144 + 216) = v168;
    (**(void (***)(_OWORD *, _OWORD *))(v168 - 8))(v164, v165);
    *(unsigned char *)(v144 + 232) = (v166 & 1) != 0;
  }
  uint64_t v169 = (_OWORD *)(v144 + 240);
  uint64_t v170 = (_OWORD *)(v145 + 240);
  int v171 = *(unsigned __int8 *)(v145 + 280);
  if (v171 == 255)
  {
    long long v172 = *(_OWORD *)(v145 + 256);
    *uint64_t v169 = *v170;
    *(_OWORD *)(v144 + 256) = v172;
    *(_OWORD *)(v144 + 265) = *(_OWORD *)(v145 + 265);
  }
  else
  {
    uint64_t v173 = *(void *)(v145 + 264);
    uint64_t v174 = *(void *)(v145 + 272);
    *(void *)(v144 + 264) = v173;
    *(void *)(v144 + 272) = v174;
    (**(void (***)(_OWORD *, _OWORD *))(v173 - 8))(v169, v170);
    char v175 = (BOOL *)(v144 + 280);
    *char v175 = (v171 & 1) != 0;
  }
  *(_WORD *)(v144 + 281) = *(_WORD *)(v145 + 281);
  return a1;
}

uint64_t destroy for ChartProxy(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  if (*(unsigned char *)(a1 + 315))
  {
    if (*(unsigned __int8 *)(a1 + 72) != 255) {
      _s6Charts15AnyChartContentVwxx_0(a1 + 32);
    }
    if (*(unsigned __int8 *)(a1 + 120) != 255) {
      _s6Charts15AnyChartContentVwxx_0(a1 + 80);
    }
    if (*(unsigned __int8 *)(a1 + 168) != 255) {
      _s6Charts15AnyChartContentVwxx_0(a1 + 128);
    }
    if (*(unsigned __int8 *)(a1 + 216) != 255) {
      _s6Charts15AnyChartContentVwxx_0(a1 + 176);
    }
    if (*(unsigned __int8 *)(a1 + 264) != 255) {
      _s6Charts15AnyChartContentVwxx_0(a1 + 224);
    }
    if (*(unsigned __int8 *)(a1 + 312) != 255) {
      _s6Charts15AnyChartContentVwxx_0(a1 + 272);
    }
  }
  else
  {
    swift_release();
  }
  if (*(void *)(a1 + 320)) {
    swift_release();
  }
  if (*(void *)(a1 + 336)) {
    swift_release();
  }
  if (*(void *)(a1 + 352)) {
    swift_release();
  }
  if (*(void *)(a1 + 368)) {
    swift_release();
  }
  if (*(void *)(a1 + 384)) {
    swift_release();
  }
  if (*(unsigned __int8 *)(a1 + 504) != 255) {
    sub_21F76D570(*(void *)(a1 + 400), *(void *)(a1 + 408), *(void *)(a1 + 416), *(void *)(a1 + 424), *(void *)(a1 + 432), *(void *)(a1 + 440), *(void *)(a1 + 448), *(void *)(a1 + 456), *(_OWORD *)(a1 + 464));
  }
  if (*(unsigned __int8 *)(a1 + 616) != 255) {
    sub_21F76D570(*(void *)(a1 + 512), *(void *)(a1 + 520), *(void *)(a1 + 528), *(void *)(a1 + 536), *(void *)(a1 + 544), *(void *)(a1 + 552), *(void *)(a1 + 560), *(void *)(a1 + 568), *(_OWORD *)(a1 + 576));
  }
  if (*(unsigned __int8 *)(a1 + 720) != 255) {
    sub_21F7E0B38(*(void *)(a1 + 624), *(void *)(a1 + 632), *(void *)(a1 + 640), *(void *)(a1 + 648), *(void *)(a1 + 656), *(void *)(a1 + 664), *(void *)(a1 + 672), *(void *)(a1 + 680));
  }
  if (*(unsigned __int8 *)(a1 + 856) != 255)
  {
    swift_release();
    if (*(void *)(a1 + 768)) {
      _s6Charts15AnyChartContentVwxx_0(a1 + 744);
    }
    if (*(void *)(a1 + 784)) {
      swift_release();
    }
    swift_bridgeObjectRelease();
    int v2 = *(unsigned __int8 *)(a1 + 816);
    if (v2 != 255) {
      sub_21F76D54C(*(void *)(a1 + 808), v2 & 1);
    }
  }
  if (*(unsigned __int8 *)(a1 + 968) != 255) {
    sub_21F76D570(*(void *)(a1 + 864), *(void *)(a1 + 872), *(void *)(a1 + 880), *(void *)(a1 + 888), *(void *)(a1 + 896), *(void *)(a1 + 904), *(void *)(a1 + 912), *(void *)(a1 + 920), *(_OWORD *)(a1 + 928));
  }
  if (*(unsigned __int8 *)(a1 + 1104) != 255) {
    sub_21F7E0CA8(*(void *)(a1 + 976), *(void *)(a1 + 984), *(void *)(a1 + 992), *(void *)(a1 + 1000), *(void *)(a1 + 1008), *(void *)(a1 + 1016), *(void *)(a1 + 1024), *(void *)(a1 + 1032), *(void *)(a1 + 1040), *(void *)(a1 + 1048), *(void *)(a1 + 1056), *(void *)(a1 + 1064));
  }
  uint64_t v3 = type metadata accessor for ChartModel.Scenegraph();
  uint64_t v4 = a1 + *(int *)(v3 + 56);
  uint64_t v5 = sub_21FA24970();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_release();
  uint64_t result = swift_release();
  uint64_t v7 = (unsigned __int8 *)(a1 + *(int *)(v3 + 68));
  if (v7[40] != 255) {
    uint64_t result = _s6Charts15AnyChartContentVwxx_0((uint64_t)v7);
  }
  if (v7[88] != 255) {
    uint64_t result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v7 + 48));
  }
  if (v7[136] != 255) {
    uint64_t result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v7 + 96));
  }
  if (v7[184] != 255) {
    uint64_t result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v7 + 144));
  }
  if (v7[232] != 255) {
    uint64_t result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v7 + 192));
  }
  if (v7[280] != 255)
  {
    return _s6Charts15AnyChartContentVwxx_0((uint64_t)(v7 + 240));
  }
  return result;
}

uint64_t initializeWithCopy for ChartProxy(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (BOOL *)(a1 + 264);
  uint64_t v5 = (_WORD *)(a2 + 313);
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = (_OWORD *)(a2 + 32);
  char v9 = *(unsigned char *)(a2 + 315);
  swift_retain();
  swift_retain();
  swift_retain();
  if (v9)
  {
    uint64_t v10 = (_OWORD *)(a1 + 32);
    int v11 = *(unsigned __int8 *)(a2 + 72);
    if (v11 == 255)
    {
      long long v12 = v8[1];
      *uint64_t v10 = *v8;
      *(_OWORD *)(a1 + 48) = v12;
      *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)v8 + 25);
    }
    else
    {
      long long v13 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 56) = v13;
      (**(void (***)(_OWORD *, _OWORD *))(v13 - 8))(v10, v8);
      *(unsigned char *)(a1 + 72) = (v11 & 1) != 0;
    }
    long long v14 = (_OWORD *)(a1 + 80);
    uint64_t v15 = (_OWORD *)(a2 + 80);
    int v16 = *(unsigned __int8 *)(a2 + 120);
    if (v16 == 255)
    {
      long long v17 = *(_OWORD *)(a2 + 96);
      *long long v14 = *v15;
      *(_OWORD *)(a1 + 96) = v17;
      *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
    }
    else
    {
      long long v18 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 104) = v18;
      (**(void (***)(_OWORD *, _OWORD *))(v18 - 8))(v14, v15);
      *(unsigned char *)(a1 + 120) = (v16 & 1) != 0;
    }
    int v19 = (_OWORD *)(a1 + 128);
    long long v20 = (_OWORD *)(a2 + 128);
    int v21 = *(unsigned __int8 *)(a2 + 168);
    if (v21 == 255)
    {
      long long v22 = *(_OWORD *)(a2 + 144);
      *int v19 = *v20;
      *(_OWORD *)(a1 + 144) = v22;
      *(_OWORD *)(a1 + 153) = *(_OWORD *)(a2 + 153);
    }
    else
    {
      long long v23 = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 152) = v23;
      (**(void (***)(_OWORD *, _OWORD *))(v23 - 8))(v19, v20);
      *(unsigned char *)(a1 + 168) = (v21 & 1) != 0;
    }
    int v24 = (_OWORD *)(a1 + 176);
    long long v25 = (_OWORD *)(a2 + 176);
    int v26 = *(unsigned __int8 *)(a2 + 216);
    if (v26 == 255)
    {
      long long v27 = *(_OWORD *)(a2 + 192);
      *int v24 = *v25;
      *(_OWORD *)(a1 + 192) = v27;
      *(_OWORD *)(a1 + 201) = *(_OWORD *)(a2 + 201);
    }
    else
    {
      long long v28 = *(_OWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 200) = v28;
      (**(void (***)(_OWORD *, _OWORD *))(v28 - 8))(v24, v25);
      *(unsigned char *)(a1 + 216) = (v26 & 1) != 0;
    }
    int v29 = (_OWORD *)(a1 + 224);
    long long v30 = (_OWORD *)(a2 + 224);
    int v31 = *(unsigned __int8 *)(a2 + 264);
    if (v31 == 255)
    {
      long long v32 = *(_OWORD *)(a2 + 240);
      *int v29 = *v30;
      *(_OWORD *)(a1 + 240) = v32;
      *(_OWORD *)(a1 + 249) = *(_OWORD *)(a2 + 249);
    }
    else
    {
      long long v33 = *(_OWORD *)(a2 + 248);
      *(_OWORD *)(a1 + 248) = v33;
      (**(void (***)(_OWORD *, _OWORD *))(v33 - 8))(v29, v30);
      BOOL *v4 = (v31 & 1) != 0;
    }
    int v34 = (_OWORD *)(a1 + 272);
    long long v35 = (_OWORD *)(a2 + 272);
    int v36 = *(unsigned __int8 *)(a2 + 312);
    if (v36 == 255)
    {
      long long v37 = *(_OWORD *)(a2 + 288);
      *int v34 = *v35;
      *(_OWORD *)(a1 + 288) = v37;
      *(_OWORD *)(a1 + 297) = *(_OWORD *)(a2 + 297);
    }
    else
    {
      uint64_t v38 = *(void *)(a2 + 296);
      uint64_t v39 = *(void *)(a2 + 304);
      *(void *)(a1 + 296) = v38;
      *(void *)(a1 + 304) = v39;
      (**(void (***)(_OWORD *, _OWORD *))(v38 - 8))(v34, v35);
      v4[48] = (v36 & 1) != 0;
    }
    *(_WORD *)(v4 + 49) = *v5;
    v4[51] = 1;
  }
  else
  {
    *(void *)(a1 + 32) = *(void *)v8;
    v4[51] = 0;
    swift_retain();
  }
  *(unsigned char *)(a1 + 316) = *(unsigned char *)(a2 + 316);
  uint64_t v40 = *(void *)(a2 + 320);
  if (v40)
  {
    uint64_t v41 = *(void *)(a2 + 328);
    *(void *)(a1 + 320) = v40;
    *(void *)(a1 + 328) = v41;
    swift_retain();
    uint64_t v42 = *(void *)(a2 + 336);
    if (v42) {
      goto LABEL_36;
    }
  }
  else
  {
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    uint64_t v42 = *(void *)(a2 + 336);
    if (v42)
    {
LABEL_36:
      uint64_t v43 = *(void *)(a2 + 344);
      *(void *)(a1 + 336) = v42;
      *(void *)(a1 + 344) = v43;
      swift_retain();
      uint64_t v44 = *(void *)(a2 + 352);
      if (v44) {
        goto LABEL_37;
      }
      goto LABEL_42;
    }
  }
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  uint64_t v44 = *(void *)(a2 + 352);
  if (v44)
  {
LABEL_37:
    uint64_t v45 = *(void *)(a2 + 360);
    *(void *)(a1 + 352) = v44;
    *(void *)(a1 + 360) = v45;
    swift_retain();
    uint64_t v46 = *(void *)(a2 + 368);
    if (v46) {
      goto LABEL_38;
    }
LABEL_43:
    *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
    uint64_t v48 = *(void *)(a2 + 384);
    if (v48) {
      goto LABEL_39;
    }
    goto LABEL_44;
  }
LABEL_42:
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  uint64_t v46 = *(void *)(a2 + 368);
  if (!v46) {
    goto LABEL_43;
  }
LABEL_38:
  uint64_t v47 = *(void *)(a2 + 376);
  *(void *)(a1 + 368) = v46;
  *(void *)(a1 + 376) = v47;
  swift_retain();
  uint64_t v48 = *(void *)(a2 + 384);
  if (v48)
  {
LABEL_39:
    uint64_t v49 = *(void *)(a2 + 392);
    *(void *)(a1 + 384) = v48;
    *(void *)(a1 + 392) = v49;
    swift_retain();
    goto LABEL_45;
  }
LABEL_44:
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
LABEL_45:
  int v50 = *(unsigned __int8 *)(a2 + 504);
  char v207 = v4;
  if (v50 == 255)
  {
    long long v51 = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
    *(_OWORD *)(a1 + 480) = v51;
    *(_OWORD *)(a1 + 489) = *(_OWORD *)(a2 + 489);
    long long v52 = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 416) = v52;
    long long v53 = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 448) = v53;
  }
  else
  {
    BOOL v202 = v50 & 1;
    uint64_t v54 = *(void *)(a2 + 400);
    uint64_t v55 = *(void *)(a2 + 408);
    uint64_t v56 = *(void *)(a2 + 416);
    uint64_t v57 = *(void *)(a2 + 424);
    uint64_t v58 = *(void *)(a2 + 432);
    uint64_t v59 = *(void *)(a2 + 440);
    uint64_t v60 = *(void *)(a2 + 448);
    uint64_t v61 = *(void *)(a2 + 456);
    uint64_t v178 = *(void *)(a2 + 464);
    uint64_t v182 = *(void *)(a2 + 472);
    uint64_t v187 = *(void *)(a2 + 480);
    uint64_t v192 = *(void *)(a2 + 488);
    uint64_t v197 = *(void *)(a2 + 496);
    sub_21F764268(v54, v55, v56, v57, v58, v59, v60, v61, v178);
    *(void *)(a1 + 400) = v54;
    *(void *)(a1 + 408) = v55;
    *(void *)(a1 + 416) = v56;
    *(void *)(a1 + 424) = v57;
    *(void *)(a1 + 432) = v58;
    *(void *)(a1 + 440) = v59;
    uint64_t v4 = v207;
    *(void *)(a1 + 448) = v60;
    *(void *)(a1 + 456) = v61;
    *(void *)(a1 + 464) = v178;
    *(void *)(a1 + 472) = v182;
    *(void *)(a1 + 480) = v187;
    *(void *)(a1 + 488) = v192;
    *(void *)(a1 + 496) = v197;
    v207[240] = v202;
  }
  int v62 = *(unsigned __int8 *)(a2 + 616);
  if (v62 == 255)
  {
    long long v63 = *(_OWORD *)(a2 + 592);
    *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
    *(_OWORD *)(a1 + 592) = v63;
    *(_OWORD *)(a1 + 601) = *(_OWORD *)(a2 + 601);
    long long v64 = *(_OWORD *)(a2 + 528);
    *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
    *(_OWORD *)(a1 + 528) = v64;
    long long v65 = *(_OWORD *)(a2 + 560);
    *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
    *(_OWORD *)(a1 + 560) = v65;
  }
  else
  {
    BOOL v203 = v62 & 1;
    uint64_t v66 = *(void *)(a2 + 512);
    uint64_t v67 = *(void *)(a2 + 520);
    uint64_t v68 = *(void *)(a2 + 528);
    uint64_t v69 = *(void *)(a2 + 536);
    uint64_t v70 = *(void *)(a2 + 544);
    uint64_t v71 = *(void *)(a2 + 552);
    uint64_t v72 = *(void *)(a2 + 560);
    uint64_t v73 = *(void *)(a2 + 568);
    uint64_t v179 = *(void *)(a2 + 576);
    uint64_t v183 = *(void *)(a2 + 584);
    uint64_t v188 = *(void *)(a2 + 592);
    uint64_t v193 = *(void *)(a2 + 600);
    uint64_t v198 = *(void *)(a2 + 608);
    sub_21F764268(v66, v67, v68, v69, v70, v71, v72, v73, v179);
    *(void *)(a1 + 512) = v66;
    *(void *)(a1 + 520) = v67;
    *(void *)(a1 + 528) = v68;
    *(void *)(a1 + 536) = v69;
    *(void *)(a1 + 544) = v70;
    *(void *)(a1 + 552) = v71;
    uint64_t v4 = v207;
    *(void *)(a1 + 560) = v72;
    *(void *)(a1 + 568) = v73;
    *(void *)(a1 + 576) = v179;
    *(void *)(a1 + 584) = v183;
    *(void *)(a1 + 592) = v188;
    *(void *)(a1 + 600) = v193;
    *(void *)(a1 + 608) = v198;
    v207[352] = v203;
  }
  int v74 = *(unsigned __int8 *)(a2 + 720);
  if (v74 == 255)
  {
    long long v75 = *(_OWORD *)(a2 + 704);
    *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
    *(_OWORD *)(a1 + 704) = v75;
    *(unsigned char *)(a1 + 720) = *(unsigned char *)(a2 + 720);
    long long v76 = *(_OWORD *)(a2 + 640);
    *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 624);
    *(_OWORD *)(a1 + 640) = v76;
    long long v77 = *(_OWORD *)(a2 + 672);
    *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
    *(_OWORD *)(a1 + 672) = v77;
  }
  else
  {
    BOOL v204 = v74 & 1;
    uint64_t v78 = *(void *)(a2 + 624);
    uint64_t v79 = *(void *)(a2 + 632);
    uint64_t v80 = *(void *)(a2 + 640);
    uint64_t v81 = *(void *)(a2 + 648);
    uint64_t v82 = *(void *)(a2 + 656);
    uint64_t v83 = *(void *)(a2 + 664);
    uint64_t v84 = *(void *)(a2 + 672);
    uint64_t v85 = *(void *)(a2 + 680);
    uint64_t v184 = *(void *)(a2 + 688);
    uint64_t v189 = *(void *)(a2 + 696);
    uint64_t v194 = *(void *)(a2 + 704);
    uint64_t v199 = *(void *)(a2 + 712);
    sub_21F7E0AB8(v78, v79, v80, v81, v82, v83, v84, v85);
    *(void *)(a1 + 624) = v78;
    *(void *)(a1 + 632) = v79;
    *(void *)(a1 + 640) = v80;
    *(void *)(a1 + 648) = v81;
    *(void *)(a1 + 656) = v82;
    *(void *)(a1 + 664) = v83;
    uint64_t v4 = v207;
    *(void *)(a1 + 672) = v84;
    *(void *)(a1 + 680) = v85;
    *(void *)(a1 + 688) = v184;
    *(void *)(a1 + 696) = v189;
    *(void *)(a1 + 704) = v194;
    *(void *)(a1 + 712) = v199;
    v207[456] = v204;
  }
  int v86 = *(unsigned __int8 *)(a2 + 856);
  if (v86 == 255)
  {
    long long v87 = *(_OWORD *)(a2 + 840);
    *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 824);
    *(_OWORD *)(a1 + 840) = v87;
    *(unsigned char *)(a1 + 856) = *(unsigned char *)(a2 + 856);
    long long v88 = *(_OWORD *)(a2 + 776);
    *(_OWORD *)(a1 + 760) = *(_OWORD *)(a2 + 760);
    *(_OWORD *)(a1 + 776) = v88;
    long long v89 = *(_OWORD *)(a2 + 808);
    *(_OWORD *)(a1 + 792) = *(_OWORD *)(a2 + 792);
    *(_OWORD *)(a1 + 808) = v89;
    long long v90 = *(_OWORD *)(a2 + 744);
    *(_OWORD *)(a1 + 728) = *(_OWORD *)(a2 + 728);
    *(_OWORD *)(a1 + 744) = v90;
    goto LABEL_75;
  }
  uint64_t v91 = *(void *)(a2 + 736);
  *(void *)(a1 + 728) = *(void *)(a2 + 728);
  *(void *)(a1 + 736) = v91;
  long long v92 = (_OWORD *)(a1 + 744);
  long long v93 = (_OWORD *)(a2 + 744);
  uint64_t v94 = *(void *)(a2 + 768);
  swift_retain();
  if ((v86 & 1) == 0)
  {
    if (v94)
    {
      *(void *)(a1 + 768) = v94;
      *(void *)(a1 + 776) = *(void *)(a2 + 776);
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v94 - 8))(a1 + 744, a2 + 744, v94);
      uint64_t v95 = *(void *)(a2 + 784);
      if (v95)
      {
LABEL_59:
        uint64_t v96 = *(void *)(a2 + 792);
        *(void *)(a1 + 784) = v95;
        *(void *)(a1 + 792) = v96;
        swift_retain();
LABEL_65:
        *(void *)(a1 + 800) = *(void *)(a2 + 800);
        uint64_t v100 = (uint64_t *)(a2 + 808);
        int v101 = *(unsigned __int8 *)(a2 + 816);
        swift_bridgeObjectRetain();
        if (v101 == 255)
        {
          *(void *)(a1 + 808) = *v100;
          *(unsigned char *)(a1 + 816) = *(unsigned char *)(a2 + 816);
        }
        else
        {
          char v102 = v101 & 1;
          uint64_t v103 = *v100;
          sub_21F7637D8(v103, v102);
          *(void *)(a1 + 808) = v103;
          v4[552] = v102;
        }
        long long v104 = *(_OWORD *)(a2 + 840);
        *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 824);
        *(_OWORD *)(a1 + 840) = v104;
        v4[592] = 0;
        goto LABEL_75;
      }
    }
    else
    {
      long long v99 = *(_OWORD *)(a2 + 760);
      *long long v92 = *v93;
      *(_OWORD *)(a1 + 760) = v99;
      *(void *)(a1 + 776) = *(void *)(a2 + 776);
      uint64_t v95 = *(void *)(a2 + 784);
      if (v95) {
        goto LABEL_59;
      }
    }
    *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 784);
    goto LABEL_65;
  }
  if (!v94)
  {
    long long v105 = *(_OWORD *)(a2 + 760);
    *long long v92 = *v93;
    *(_OWORD *)(a1 + 760) = v105;
    *(void *)(a1 + 776) = *(void *)(a2 + 776);
    uint64_t v97 = *(void *)(a2 + 784);
    if (v97) {
      goto LABEL_62;
    }
LABEL_70:
    *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 784);
    goto LABEL_71;
  }
  *(void *)(a1 + 768) = v94;
  *(void *)(a1 + 776) = *(void *)(a2 + 776);
  (**(void (***)(uint64_t, uint64_t, uint64_t))(v94 - 8))(a1 + 744, a2 + 744, v94);
  uint64_t v97 = *(void *)(a2 + 784);
  if (!v97) {
    goto LABEL_70;
  }
LABEL_62:
  uint64_t v98 = *(void *)(a2 + 792);
  *(void *)(a1 + 784) = v97;
  *(void *)(a1 + 792) = v98;
  swift_retain();
LABEL_71:
  *(void *)(a1 + 800) = *(void *)(a2 + 800);
  uint64_t v106 = (uint64_t *)(a2 + 808);
  int v107 = *(unsigned __int8 *)(a2 + 816);
  swift_bridgeObjectRetain();
  if (v107 == 255)
  {
    *(void *)(a1 + 808) = *v106;
    *(unsigned char *)(a1 + 816) = *(unsigned char *)(a2 + 816);
  }
  else
  {
    char v108 = v107 & 1;
    uint64_t v109 = *v106;
    sub_21F7637D8(v109, v108);
    *(void *)(a1 + 808) = v109;
    v4[552] = v108;
  }
  long long v110 = *(_OWORD *)(a2 + 840);
  *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 824);
  *(_OWORD *)(a1 + 840) = v110;
  v4[592] = 1;
LABEL_75:
  int v111 = *(unsigned __int8 *)(a2 + 968);
  if (v111 == 255)
  {
    long long v112 = *(_OWORD *)(a2 + 944);
    *(_OWORD *)(a1 + 928) = *(_OWORD *)(a2 + 928);
    *(_OWORD *)(a1 + 944) = v112;
    *(_OWORD *)(a1 + 953) = *(_OWORD *)(a2 + 953);
    long long v113 = *(_OWORD *)(a2 + 880);
    *(_OWORD *)(a1 + 864) = *(_OWORD *)(a2 + 864);
    *(_OWORD *)(a1 + 880) = v113;
    long long v114 = *(_OWORD *)(a2 + 912);
    *(_OWORD *)(a1 + 896) = *(_OWORD *)(a2 + 896);
    *(_OWORD *)(a1 + 912) = v114;
  }
  else
  {
    BOOL v205 = v111 & 1;
    uint64_t v115 = *(void *)(a2 + 864);
    uint64_t v116 = *(void *)(a2 + 872);
    uint64_t v117 = *(void *)(a2 + 880);
    uint64_t v118 = *(void *)(a2 + 888);
    uint64_t v119 = *(void *)(a2 + 896);
    uint64_t v120 = *(void *)(a2 + 904);
    uint64_t v121 = *(void *)(a2 + 912);
    uint64_t v122 = *(void *)(a2 + 920);
    uint64_t v180 = *(void *)(a2 + 928);
    uint64_t v185 = *(void *)(a2 + 936);
    uint64_t v190 = *(void *)(a2 + 944);
    uint64_t v195 = *(void *)(a2 + 952);
    uint64_t v200 = *(void *)(a2 + 960);
    sub_21F764268(v115, v116, v117, v118, v119, v120, v121, v122, v180);
    *(void *)(a1 + 864) = v115;
    *(void *)(a1 + 872) = v116;
    *(void *)(a1 + 880) = v117;
    *(void *)(a1 + 888) = v118;
    *(void *)(a1 + 896) = v119;
    *(void *)(a1 + 904) = v120;
    *(void *)(a1 + 912) = v121;
    *(void *)(a1 + 920) = v122;
    *(void *)(a1 + 928) = v180;
    *(void *)(a1 + 936) = v185;
    *(void *)(a1 + 944) = v190;
    *(void *)(a1 + 952) = v195;
    *(void *)(a1 + 960) = v200;
    v207[704] = v205;
  }
  int v123 = *(unsigned __int8 *)(a2 + 1104);
  if (v123 == 255)
  {
    long long v124 = *(_OWORD *)(a2 + 1088);
    *(_OWORD *)(a1 + 1072) = *(_OWORD *)(a2 + 1072);
    *(_OWORD *)(a1 + 1088) = v124;
    *(unsigned char *)(a1 + 1104) = *(unsigned char *)(a2 + 1104);
    long long v125 = *(_OWORD *)(a2 + 1024);
    *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 1008);
    *(_OWORD *)(a1 + 1024) = v125;
    long long v126 = *(_OWORD *)(a2 + 1056);
    *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a2 + 1040);
    *(_OWORD *)(a1 + 1056) = v126;
    long long v127 = *(_OWORD *)(a2 + 992);
    *(_OWORD *)(a1 + 976) = *(_OWORD *)(a2 + 976);
    *(_OWORD *)(a1 + 992) = v127;
  }
  else
  {
    BOOL v206 = v123 & 1;
    uint64_t v128 = *(void *)(a2 + 976);
    uint64_t v129 = *(void *)(a2 + 984);
    uint64_t v130 = *(void *)(a2 + 992);
    uint64_t v131 = *(void *)(a2 + 1000);
    uint64_t v132 = *(void *)(a2 + 1008);
    uint64_t v133 = *(void *)(a2 + 1016);
    uint64_t v134 = *(void *)(a2 + 1024);
    uint64_t v135 = *(void *)(a2 + 1032);
    uint64_t v175 = *(void *)(a2 + 1040);
    uint64_t v176 = *(void *)(a2 + 1048);
    uint64_t v177 = *(void *)(a2 + 1056);
    uint64_t v181 = *(void *)(a2 + 1064);
    uint64_t v186 = *(void *)(a2 + 1072);
    uint64_t v191 = *(void *)(a2 + 1080);
    uint64_t v196 = *(void *)(a2 + 1088);
    uint64_t v201 = *(void *)(a2 + 1096);
    sub_21F7E0C30(v128, v129, v130, v131, v132, v133, v134, v135, v175, v176, v177, v181);
    *(void *)(a1 + 976) = v128;
    *(void *)(a1 + 984) = v129;
    *(void *)(a1 + 992) = v130;
    *(void *)(a1 + 1000) = v131;
    *(void *)(a1 + 1008) = v132;
    *(void *)(a1 + 1016) = v133;
    *(void *)(a1 + 1024) = v134;
    *(void *)(a1 + 1032) = v135;
    *(void *)(a1 + 1040) = v175;
    *(void *)(a1 + 1048) = v176;
    *(void *)(a1 + 1056) = v177;
    *(void *)(a1 + 1064) = v181;
    *(void *)(a1 + 1072) = v186;
    *(void *)(a1 + 1080) = v191;
    *(void *)(a1 + 1088) = v196;
    *(void *)(a1 + 1096) = v201;
    v207[840] = v206;
  }
  *(_OWORD *)(a1 + 1112) = *(_OWORD *)(a2 + 1112);
  *(_OWORD *)(a1 + 1128) = *(_OWORD *)(a2 + 1128);
  *(unsigned char *)(a1 + 1144) = *(unsigned char *)(a2 + 1144);
  *(_OWORD *)(a1 + 1152) = *(_OWORD *)(a2 + 1152);
  *(_OWORD *)(a1 + 1168) = *(_OWORD *)(a2 + 1168);
  uint64_t v136 = (int *)type metadata accessor for ChartModel.Scenegraph();
  uint64_t v137 = v136[14];
  uint64_t v138 = a1 + v137;
  uint64_t v139 = a2 + v137;
  uint64_t v140 = sub_21FA24970();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v140 - 8) + 16))(v138, v139, v140);
  *(void *)(a1 + v136[15]) = *(void *)(a2 + v136[15]);
  *(void *)(a1 + v136[16]) = *(void *)(a2 + v136[16]);
  uint64_t v141 = v136[17];
  uint64_t v142 = a1 + v141;
  uint64_t v143 = a2 + v141;
  int v144 = *(unsigned __int8 *)(v143 + 40);
  swift_retain();
  swift_retain();
  if (v144 == 255)
  {
    long long v145 = *(_OWORD *)(v143 + 16);
    *(_OWORD *)uint64_t v142 = *(_OWORD *)v143;
    *(_OWORD *)(v142 + 16) = v145;
    *(_OWORD *)(v142 + 25) = *(_OWORD *)(v143 + 25);
  }
  else
  {
    long long v146 = *(_OWORD *)(v143 + 24);
    *(_OWORD *)(v142 + 24) = v146;
    (**(void (***)(uint64_t, uint64_t))(v146 - 8))(v142, v143);
    *(unsigned char *)(v142 + 40) = (v144 & 1) != 0;
  }
  long long v147 = (_OWORD *)(v142 + 48);
  long long v148 = (_OWORD *)(v143 + 48);
  int v149 = *(unsigned __int8 *)(v143 + 88);
  if (v149 == 255)
  {
    long long v150 = *(_OWORD *)(v143 + 64);
    *long long v147 = *v148;
    *(_OWORD *)(v142 + 64) = v150;
    *(_OWORD *)(v142 + 73) = *(_OWORD *)(v143 + 73);
  }
  else
  {
    long long v151 = *(_OWORD *)(v143 + 72);
    *(_OWORD *)(v142 + 72) = v151;
    (**(void (***)(_OWORD *, _OWORD *))(v151 - 8))(v147, v148);
    *(unsigned char *)(v142 + 88) = (v149 & 1) != 0;
  }
  long long v152 = (_OWORD *)(v142 + 96);
  long long v153 = (_OWORD *)(v143 + 96);
  int v154 = *(unsigned __int8 *)(v143 + 136);
  if (v154 == 255)
  {
    long long v155 = *(_OWORD *)(v143 + 112);
    *long long v152 = *v153;
    *(_OWORD *)(v142 + 112) = v155;
    *(_OWORD *)(v142 + 121) = *(_OWORD *)(v143 + 121);
  }
  else
  {
    long long v156 = *(_OWORD *)(v143 + 120);
    *(_OWORD *)(v142 + 120) = v156;
    (**(void (***)(_OWORD *, _OWORD *))(v156 - 8))(v152, v153);
    *(unsigned char *)(v142 + 136) = (v154 & 1) != 0;
  }
  long long v157 = (_OWORD *)(v142 + 144);
  long long v158 = (_OWORD *)(v143 + 144);
  int v159 = *(unsigned __int8 *)(v143 + 184);
  if (v159 == 255)
  {
    long long v160 = *(_OWORD *)(v143 + 160);
    _OWORD *v157 = *v158;
    *(_OWORD *)(v142 + 160) = v160;
    *(_OWORD *)(v142 + 169) = *(_OWORD *)(v143 + 169);
  }
  else
  {
    long long v161 = *(_OWORD *)(v143 + 168);
    *(_OWORD *)(v142 + 168) = v161;
    (**(void (***)(_OWORD *, _OWORD *))(v161 - 8))(v157, v158);
    *(unsigned char *)(v142 + 184) = (v159 & 1) != 0;
  }
  long long v162 = (_OWORD *)(v142 + 192);
  long long v163 = (_OWORD *)(v143 + 192);
  int v164 = *(unsigned __int8 *)(v143 + 232);
  if (v164 == 255)
  {
    long long v165 = *(_OWORD *)(v143 + 208);
    *long long v162 = *v163;
    *(_OWORD *)(v142 + 208) = v165;
    *(_OWORD *)(v142 + 217) = *(_OWORD *)(v143 + 217);
  }
  else
  {
    long long v166 = *(_OWORD *)(v143 + 216);
    *(_OWORD *)(v142 + 216) = v166;
    (**(void (***)(_OWORD *, _OWORD *))(v166 - 8))(v162, v163);
    *(unsigned char *)(v142 + 232) = (v164 & 1) != 0;
  }
  long long v167 = (_OWORD *)(v142 + 240);
  long long v168 = (_OWORD *)(v143 + 240);
  int v169 = *(unsigned __int8 *)(v143 + 280);
  if (v169 == 255)
  {
    long long v170 = *(_OWORD *)(v143 + 256);
    *long long v167 = *v168;
    *(_OWORD *)(v142 + 256) = v170;
    *(_OWORD *)(v142 + 265) = *(_OWORD *)(v143 + 265);
  }
  else
  {
    uint64_t v171 = *(void *)(v143 + 264);
    uint64_t v172 = *(void *)(v143 + 272);
    *(void *)(v142 + 264) = v171;
    *(void *)(v142 + 272) = v172;
    (**(void (***)(_OWORD *, _OWORD *))(v171 - 8))(v167, v168);
    uint64_t v173 = (BOOL *)(v142 + 280);
    *uint64_t v173 = (v169 & 1) != 0;
  }
  *(_WORD *)(v142 + 281) = *(_WORD *)(v143 + 281);
  return a1;
}

uint64_t assignWithCopy for ChartProxy(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 264;
  uint64_t v5 = a2 + 313;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v6 = (long long *)(a2 + 32);
    sub_21F76CA84(a1 + 32, &qword_26AD4A218);
    if (*(unsigned char *)(v5 + 2))
    {
      int v7 = *(unsigned __int8 *)(a2 + 72);
      if (v7 == 255)
      {
        long long v8 = *v6;
        long long v9 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        *(_OWORD *)(a1 + 32) = v8;
        *(_OWORD *)(a1 + 48) = v9;
      }
      else
      {
        uint64_t v10 = *(void *)(a2 + 56);
        *(void *)(a1 + 56) = v10;
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 32, a2 + 32);
        *(unsigned char *)(a1 + 72) = (v7 & 1) != 0;
      }
      int v11 = (_OWORD *)(a1 + 80);
      long long v12 = (long long *)(a2 + 80);
      int v13 = *(unsigned __int8 *)(a2 + 120);
      if (v13 == 255)
      {
        long long v14 = *v12;
        long long v15 = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
        *int v11 = v14;
        *(_OWORD *)(a1 + 96) = v15;
      }
      else
      {
        uint64_t v16 = *(void *)(a2 + 104);
        *(void *)(a1 + 104) = v16;
        *(void *)(a1 + 112) = *(void *)(a2 + 112);
        (**(void (***)(_OWORD *, long long *))(v16 - 8))(v11, v12);
        *(unsigned char *)(a1 + 120) = (v13 & 1) != 0;
      }
      long long v17 = (_OWORD *)(a1 + 128);
      long long v18 = (long long *)(a2 + 128);
      int v19 = *(unsigned __int8 *)(a2 + 168);
      if (v19 == 255)
      {
        long long v20 = *v18;
        long long v21 = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 153) = *(_OWORD *)(a2 + 153);
        *long long v17 = v20;
        *(_OWORD *)(a1 + 144) = v21;
      }
      else
      {
        uint64_t v22 = *(void *)(a2 + 152);
        *(void *)(a1 + 152) = v22;
        *(void *)(a1 + 160) = *(void *)(a2 + 160);
        (**(void (***)(_OWORD *, long long *))(v22 - 8))(v17, v18);
        *(unsigned char *)(a1 + 168) = (v19 & 1) != 0;
      }
      long long v23 = (_OWORD *)(a1 + 176);
      int v24 = (long long *)(a2 + 176);
      int v25 = *(unsigned __int8 *)(a2 + 216);
      if (v25 == 255)
      {
        long long v26 = *v24;
        long long v27 = *(_OWORD *)(a2 + 192);
        *(_OWORD *)(a1 + 201) = *(_OWORD *)(a2 + 201);
        *long long v23 = v26;
        *(_OWORD *)(a1 + 192) = v27;
      }
      else
      {
        uint64_t v28 = *(void *)(a2 + 200);
        *(void *)(a1 + 200) = v28;
        *(void *)(a1 + 208) = *(void *)(a2 + 208);
        (**(void (***)(_OWORD *, long long *))(v28 - 8))(v23, v24);
        *(unsigned char *)(a1 + 216) = (v25 & 1) != 0;
      }
      int v29 = (_OWORD *)(a1 + 224);
      long long v30 = (long long *)(a2 + 224);
      int v31 = *(unsigned __int8 *)(a2 + 264);
      if (v31 == 255)
      {
        long long v32 = *v30;
        long long v33 = *(_OWORD *)(a2 + 240);
        *(_OWORD *)(a1 + 249) = *(_OWORD *)(a2 + 249);
        *int v29 = v32;
        *(_OWORD *)(a1 + 240) = v33;
      }
      else
      {
        uint64_t v34 = *(void *)(a2 + 248);
        *(void *)(a1 + 248) = v34;
        *(void *)(a1 + 256) = *(void *)(a2 + 256);
        (**(void (***)(_OWORD *, long long *))(v34 - 8))(v29, v30);
        *(unsigned char *)uint64_t v4 = (v31 & 1) != 0;
      }
      long long v35 = (_OWORD *)(a1 + 272);
      int v36 = (long long *)(a2 + 272);
      int v37 = *(unsigned __int8 *)(a2 + 312);
      if (v37 == 255)
      {
        long long v38 = *v36;
        long long v39 = *(_OWORD *)(a2 + 288);
        *(_OWORD *)(a1 + 297) = *(_OWORD *)(a2 + 297);
        *long long v35 = v38;
        *(_OWORD *)(a1 + 288) = v39;
      }
      else
      {
        uint64_t v40 = *(void *)(a2 + 296);
        *(void *)(a1 + 296) = v40;
        *(void *)(a1 + 304) = *(void *)(a2 + 304);
        (**(void (***)(_OWORD *, long long *))(v40 - 8))(v35, v36);
        *(unsigned char *)(v4 + 48) = (v37 & 1) != 0;
      }
      *(_WORD *)(v4 + 49) = *(_WORD *)v5;
      *(unsigned char *)(v4 + 51) = 1;
    }
    else
    {
      *(void *)(a1 + 32) = *(void *)v6;
      *(unsigned char *)(v4 + 51) = 0;
      swift_retain();
    }
  }
  *(unsigned char *)(a1 + 316) = *(unsigned char *)(v5 + 3);
  uint64_t v41 = *(void *)(a2 + 320);
  if (*(void *)(a1 + 320))
  {
    if (v41)
    {
      uint64_t v42 = *(void *)(a2 + 328);
      *(void *)(a1 + 320) = v41;
      *(void *)(a1 + 328) = v42;
      swift_retain();
      swift_release();
      goto LABEL_42;
    }
    swift_release();
  }
  else if (v41)
  {
    uint64_t v43 = *(void *)(a2 + 328);
    *(void *)(a1 + 320) = v41;
    *(void *)(a1 + 328) = v43;
    swift_retain();
    goto LABEL_42;
  }
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
LABEL_42:
  uint64_t v44 = *(void *)(a2 + 336);
  if (*(void *)(a1 + 336))
  {
    if (v44)
    {
      uint64_t v45 = *(void *)(a2 + 344);
      *(void *)(a1 + 336) = v44;
      *(void *)(a1 + 344) = v45;
      swift_retain();
      swift_release();
      goto LABEL_49;
    }
    swift_release();
  }
  else if (v44)
  {
    uint64_t v46 = *(void *)(a2 + 344);
    *(void *)(a1 + 336) = v44;
    *(void *)(a1 + 344) = v46;
    swift_retain();
    goto LABEL_49;
  }
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
LABEL_49:
  uint64_t v47 = *(void *)(a2 + 352);
  if (*(void *)(a1 + 352))
  {
    if (v47)
    {
      uint64_t v48 = *(void *)(a2 + 360);
      *(void *)(a1 + 352) = v47;
      *(void *)(a1 + 360) = v48;
      swift_retain();
      swift_release();
      goto LABEL_56;
    }
    swift_release();
  }
  else if (v47)
  {
    uint64_t v49 = *(void *)(a2 + 360);
    *(void *)(a1 + 352) = v47;
    *(void *)(a1 + 360) = v49;
    swift_retain();
    goto LABEL_56;
  }
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
LABEL_56:
  uint64_t v50 = *(void *)(a2 + 368);
  if (*(void *)(a1 + 368))
  {
    if (v50)
    {
      uint64_t v51 = *(void *)(a2 + 376);
      *(void *)(a1 + 368) = v50;
      *(void *)(a1 + 376) = v51;
      swift_retain();
      swift_release();
      goto LABEL_63;
    }
    swift_release();
  }
  else if (v50)
  {
    uint64_t v52 = *(void *)(a2 + 376);
    *(void *)(a1 + 368) = v50;
    *(void *)(a1 + 376) = v52;
    swift_retain();
    goto LABEL_63;
  }
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
LABEL_63:
  uint64_t v53 = *(void *)(a2 + 384);
  if (*(void *)(a1 + 384))
  {
    if (v53)
    {
      uint64_t v54 = *(void *)(a2 + 392);
      *(void *)(a1 + 384) = v53;
      *(void *)(a1 + 392) = v54;
      swift_retain();
      swift_release();
      goto LABEL_70;
    }
    swift_release();
  }
  else if (v53)
  {
    uint64_t v55 = *(void *)(a2 + 392);
    *(void *)(a1 + 384) = v53;
    *(void *)(a1 + 392) = v55;
    swift_retain();
    goto LABEL_70;
  }
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
LABEL_70:
  uint64_t v56 = (long long *)(a1 + 400);
  uint64_t v57 = (long long *)(a2 + 400);
  int v58 = *(unsigned __int8 *)(a2 + 504);
  uint64_t v417 = v5;
  uint64_t v418 = v4;
  if (*(unsigned __int8 *)(a1 + 504) == 255)
  {
    if (v58 == 255)
    {
      long long v64 = *v57;
      long long v65 = *(_OWORD *)(a2 + 432);
      *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
      *(_OWORD *)(a1 + 432) = v65;
      *uint64_t v56 = v64;
      long long v66 = *(_OWORD *)(a2 + 448);
      long long v67 = *(_OWORD *)(a2 + 464);
      long long v68 = *(_OWORD *)(a2 + 480);
      *(_OWORD *)(a1 + 489) = *(_OWORD *)(a2 + 489);
      *(_OWORD *)(a1 + 464) = v67;
      *(_OWORD *)(a1 + 480) = v68;
      *(_OWORD *)(a1 + 448) = v66;
    }
    else
    {
      char v408 = v58 & 1;
      uint64_t v86 = *(void *)(a2 + 400);
      uint64_t v87 = *(void *)(a2 + 408);
      uint64_t v88 = *(void *)(a2 + 416);
      uint64_t v89 = *(void *)(a2 + 424);
      uint64_t v90 = *(void *)(a2 + 432);
      uint64_t v91 = *(void *)(a2 + 440);
      uint64_t v92 = *(void *)(a2 + 448);
      uint64_t v93 = *(void *)(a2 + 456);
      uint64_t v363 = *(void *)(a2 + 464);
      uint64_t v373 = *(void *)(a2 + 472);
      uint64_t v383 = *(void *)(a2 + 480);
      uint64_t v393 = *(void *)(a2 + 488);
      uint64_t v403 = *(void *)(a2 + 496);
      sub_21F764268(v86, v87, v88, v89, v90, v91, v92, v93, v363);
      *(void *)(a1 + 400) = v86;
      *(void *)(a1 + 408) = v87;
      *(void *)(a1 + 416) = v88;
      *(void *)(a1 + 424) = v89;
      *(void *)(a1 + 432) = v90;
      *(void *)(a1 + 440) = v91;
      uint64_t v4 = v418;
      *(void *)(a1 + 448) = v92;
      *(void *)(a1 + 456) = v93;
      *(void *)(a1 + 464) = v363;
      *(void *)(a1 + 472) = v373;
      *(void *)(a1 + 480) = v383;
      *(void *)(a1 + 488) = v393;
      *(void *)(a1 + 496) = v403;
      *(unsigned char *)(v418 + 240) = v408;
    }
  }
  else if (v58 == 255)
  {
    sub_21F76CA84(a1 + 400, &qword_26AD47AB8);
    long long v60 = *(_OWORD *)(a2 + 416);
    long long v59 = *(_OWORD *)(a2 + 432);
    *uint64_t v56 = *v57;
    *(_OWORD *)(a1 + 416) = v60;
    *(_OWORD *)(a1 + 432) = v59;
    long long v62 = *(_OWORD *)(a2 + 464);
    long long v61 = *(_OWORD *)(a2 + 480);
    long long v63 = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 489) = *(_OWORD *)(a2 + 489);
    *(_OWORD *)(a1 + 464) = v62;
    *(_OWORD *)(a1 + 480) = v61;
    *(_OWORD *)(a1 + 448) = v63;
  }
  else
  {
    char v407 = v58 & 1;
    uint64_t v69 = *(void *)(a2 + 400);
    uint64_t v70 = *(void *)(a2 + 408);
    uint64_t v71 = *(void *)(a2 + 416);
    uint64_t v72 = *(void *)(a2 + 424);
    uint64_t v73 = *(void *)(a2 + 432);
    uint64_t v74 = *(void *)(a2 + 440);
    uint64_t v75 = *(void *)(a2 + 448);
    uint64_t v76 = *(void *)(a2 + 456);
    uint64_t v362 = *(void *)(a2 + 464);
    uint64_t v372 = *(void *)(a2 + 472);
    uint64_t v382 = *(void *)(a2 + 480);
    uint64_t v392 = *(void *)(a2 + 488);
    uint64_t v402 = *(void *)(a2 + 496);
    sub_21F764268(v69, v70, v71, v72, v73, v74, v75, v76, v362);
    uint64_t v77 = *(void *)(a1 + 400);
    uint64_t v78 = *(void *)(a1 + 408);
    uint64_t v79 = *(void *)(a1 + 416);
    uint64_t v80 = *(void *)(a1 + 424);
    uint64_t v81 = *(void *)(a1 + 432);
    uint64_t v82 = *(void *)(a1 + 440);
    uint64_t v83 = *(void *)(a1 + 448);
    uint64_t v84 = *(void *)(a1 + 456);
    long long v85 = *(_OWORD *)(a1 + 464);
    *(void *)(a1 + 400) = v69;
    *(void *)(a1 + 408) = v70;
    *(void *)(a1 + 416) = v71;
    *(void *)(a1 + 424) = v72;
    *(void *)(a1 + 432) = v73;
    *(void *)(a1 + 440) = v74;
    uint64_t v4 = v418;
    *(void *)(a1 + 448) = v75;
    *(void *)(a1 + 456) = v76;
    *(void *)(a1 + 464) = v362;
    *(void *)(a1 + 472) = v372;
    *(void *)(a1 + 480) = v382;
    *(void *)(a1 + 488) = v392;
    *(void *)(a1 + 496) = v402;
    *(unsigned char *)(v418 + 240) = v407;
    sub_21F76D570(v77, v78, v79, v80, v81, v82, v83, v84, v85);
  }
  uint64_t v94 = (long long *)(a1 + 512);
  uint64_t v95 = (long long *)(a2 + 512);
  uint64_t v96 = (unsigned char *)(v4 + 352);
  int v97 = *(unsigned __int8 *)(a2 + 616);
  if (*(unsigned __int8 *)(a1 + 616) == 255)
  {
    if (v97 == 255)
    {
      long long v103 = *v95;
      long long v104 = *(_OWORD *)(a2 + 544);
      *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
      *(_OWORD *)(a1 + 544) = v104;
      *uint64_t v94 = v103;
      long long v105 = *(_OWORD *)(a2 + 560);
      long long v106 = *(_OWORD *)(a2 + 576);
      long long v107 = *(_OWORD *)(a2 + 592);
      *(_OWORD *)(a1 + 601) = *(_OWORD *)(a2 + 601);
      *(_OWORD *)(a1 + 576) = v106;
      *(_OWORD *)(a1 + 592) = v107;
      *(_OWORD *)(a1 + 560) = v105;
    }
    else
    {
      char v410 = v97 & 1;
      uint64_t v125 = *(void *)(a2 + 512);
      uint64_t v126 = *(void *)(a2 + 520);
      uint64_t v127 = *(void *)(a2 + 528);
      uint64_t v128 = *(void *)(a2 + 536);
      uint64_t v129 = *(void *)(a2 + 544);
      uint64_t v130 = *(void *)(a2 + 552);
      uint64_t v131 = *(void *)(a2 + 560);
      uint64_t v132 = *(void *)(a2 + 568);
      uint64_t v365 = *(void *)(a2 + 576);
      uint64_t v375 = *(void *)(a2 + 584);
      uint64_t v385 = *(void *)(a2 + 592);
      uint64_t v395 = *(void *)(a2 + 600);
      uint64_t v405 = *(void *)(a2 + 608);
      uint64_t v357 = v96;
      sub_21F764268(v125, v126, v127, v128, v129, v130, v131, v132, v365);
      *(void *)(a1 + 512) = v125;
      *(void *)(a1 + 520) = v126;
      *(void *)(a1 + 528) = v127;
      *(void *)(a1 + 536) = v128;
      *(void *)(a1 + 544) = v129;
      *(void *)(a1 + 552) = v130;
      uint64_t v4 = v418;
      *(void *)(a1 + 560) = v131;
      *(void *)(a1 + 568) = v132;
      *(void *)(a1 + 576) = v365;
      *(void *)(a1 + 584) = v375;
      *(void *)(a1 + 592) = v385;
      *(void *)(a1 + 600) = v395;
      *(void *)(a1 + 608) = v405;
      *uint64_t v357 = v410;
    }
  }
  else if (v97 == 255)
  {
    sub_21F76CA84(a1 + 512, &qword_26AD47AB8);
    long long v99 = *(_OWORD *)(a2 + 528);
    long long v98 = *(_OWORD *)(a2 + 544);
    *uint64_t v94 = *v95;
    *(_OWORD *)(a1 + 528) = v99;
    *(_OWORD *)(a1 + 544) = v98;
    long long v101 = *(_OWORD *)(a2 + 576);
    long long v100 = *(_OWORD *)(a2 + 592);
    long long v102 = *(_OWORD *)(a2 + 560);
    *(_OWORD *)(a1 + 601) = *(_OWORD *)(a2 + 601);
    *(_OWORD *)(a1 + 576) = v101;
    *(_OWORD *)(a1 + 592) = v100;
    *(_OWORD *)(a1 + 560) = v102;
  }
  else
  {
    char v409 = v97 & 1;
    uint64_t v108 = *(void *)(a2 + 520);
    uint64_t v109 = *(void *)(a2 + 528);
    uint64_t v110 = *(void *)(a2 + 536);
    uint64_t v111 = *(void *)(a2 + 544);
    uint64_t v112 = *(void *)(a2 + 552);
    uint64_t v113 = *(void *)(a2 + 560);
    uint64_t v114 = *(void *)(a2 + 568);
    uint64_t v356 = *(void *)(a2 + 512);
    uint64_t v364 = *(void *)(a2 + 576);
    uint64_t v374 = *(void *)(a2 + 584);
    uint64_t v384 = *(void *)(a2 + 592);
    uint64_t v394 = *(void *)(a2 + 600);
    uint64_t v404 = *(void *)(a2 + 608);
    uint64_t v115 = v96;
    sub_21F764268(v356, v108, v109, v110, v111, v112, v113, v114, *(_OWORD *)(a2 + 576));
    uint64_t v116 = *(void *)(a1 + 512);
    uint64_t v117 = *(void *)(a1 + 520);
    uint64_t v118 = *(void *)(a1 + 528);
    uint64_t v119 = *(void *)(a1 + 536);
    uint64_t v120 = *(void *)(a1 + 544);
    uint64_t v121 = *(void *)(a1 + 552);
    uint64_t v122 = *(void *)(a1 + 560);
    uint64_t v123 = *(void *)(a1 + 568);
    long long v124 = *(_OWORD *)(a1 + 576);
    *(void *)(a1 + 512) = v356;
    *(void *)(a1 + 520) = v108;
    *(void *)(a1 + 528) = v109;
    *(void *)(a1 + 536) = v110;
    *(void *)(a1 + 544) = v111;
    *(void *)(a1 + 552) = v112;
    uint64_t v4 = v418;
    *(void *)(a1 + 560) = v113;
    *(void *)(a1 + 568) = v114;
    *(void *)(a1 + 576) = v364;
    *(void *)(a1 + 584) = v374;
    *(void *)(a1 + 592) = v384;
    *(void *)(a1 + 600) = v394;
    *(void *)(a1 + 608) = v404;
    *uint64_t v115 = v409;
    sub_21F76D570(v116, v117, v118, v119, v120, v121, v122, v123, v124);
  }
  uint64_t v133 = (long long *)(a1 + 624);
  uint64_t v134 = (long long *)(a2 + 624);
  uint64_t v135 = (unsigned char *)(v4 + 456);
  int v136 = *(unsigned __int8 *)(a2 + 720);
  if (*(unsigned __int8 *)(a1 + 720) == 255)
  {
    if (v136 == 255)
    {
      long long v142 = *v134;
      long long v143 = *(_OWORD *)(a2 + 656);
      *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
      *(_OWORD *)(a1 + 656) = v143;
      *uint64_t v133 = v142;
      long long v144 = *(_OWORD *)(a2 + 672);
      long long v145 = *(_OWORD *)(a2 + 688);
      long long v146 = *(_OWORD *)(a2 + 704);
      *(unsigned char *)(a1 + 720) = *(unsigned char *)(a2 + 720);
      *(_OWORD *)(a1 + 688) = v145;
      *(_OWORD *)(a1 + 704) = v146;
      *(_OWORD *)(a1 + 672) = v144;
    }
    else
    {
      char v412 = v136 & 1;
      uint64_t v163 = *(void *)(a2 + 624);
      uint64_t v164 = *(void *)(a2 + 632);
      uint64_t v165 = *(void *)(a2 + 640);
      uint64_t v166 = *(void *)(a2 + 648);
      uint64_t v167 = *(void *)(a2 + 656);
      uint64_t v168 = *(void *)(a2 + 664);
      uint64_t v169 = *(void *)(a2 + 672);
      uint64_t v170 = *(void *)(a2 + 680);
      uint64_t v377 = *(void *)(a2 + 688);
      uint64_t v387 = *(void *)(a2 + 696);
      long long v397 = *(_OWORD *)(a2 + 704);
      uint64_t v367 = v135;
      sub_21F7E0AB8(v163, v164, v165, v166, v167, v168, v169, v170);
      *(void *)(a1 + 624) = v163;
      *(void *)(a1 + 632) = v164;
      *(void *)(a1 + 640) = v165;
      *(void *)(a1 + 648) = v166;
      *(void *)(a1 + 656) = v167;
      *(void *)(a1 + 664) = v168;
      uint64_t v4 = v418;
      *(void *)(a1 + 672) = v169;
      *(void *)(a1 + 680) = v170;
      *(void *)(a1 + 688) = v377;
      *(void *)(a1 + 696) = v387;
      *(_OWORD *)(a1 + 704) = v397;
      *uint64_t v367 = v412;
    }
  }
  else if (v136 == 255)
  {
    sub_21F76CA84(a1 + 624, qword_26AD44A50);
    long long v138 = *(_OWORD *)(a2 + 640);
    long long v137 = *(_OWORD *)(a2 + 656);
    *uint64_t v133 = *v134;
    *(_OWORD *)(a1 + 640) = v138;
    *(_OWORD *)(a1 + 656) = v137;
    long long v140 = *(_OWORD *)(a2 + 688);
    long long v139 = *(_OWORD *)(a2 + 704);
    long long v141 = *(_OWORD *)(a2 + 672);
    *(unsigned char *)(a1 + 720) = *(unsigned char *)(a2 + 720);
    *(_OWORD *)(a1 + 688) = v140;
    *(_OWORD *)(a1 + 704) = v139;
    *(_OWORD *)(a1 + 672) = v141;
  }
  else
  {
    char v411 = v136 & 1;
    uint64_t v147 = *(void *)(a2 + 632);
    uint64_t v148 = *(void *)(a2 + 640);
    uint64_t v149 = *(void *)(a2 + 648);
    uint64_t v150 = *(void *)(a2 + 656);
    uint64_t v151 = *(void *)(a2 + 664);
    uint64_t v152 = *(void *)(a2 + 672);
    uint64_t v153 = *(void *)(a2 + 680);
    uint64_t v366 = *(void *)(a2 + 624);
    uint64_t v376 = *(void *)(a2 + 688);
    uint64_t v386 = *(void *)(a2 + 696);
    uint64_t v396 = *(void *)(a2 + 704);
    uint64_t v406 = *(void *)(a2 + 712);
    int v154 = v135;
    sub_21F7E0AB8(v366, v147, v148, v149, v150, v151, v152, v153);
    uint64_t v155 = *(void *)(a1 + 624);
    uint64_t v156 = *(void *)(a1 + 632);
    uint64_t v157 = *(void *)(a1 + 640);
    uint64_t v158 = *(void *)(a1 + 648);
    uint64_t v159 = *(void *)(a1 + 656);
    uint64_t v160 = *(void *)(a1 + 664);
    uint64_t v161 = *(void *)(a1 + 672);
    uint64_t v162 = *(void *)(a1 + 680);
    *(void *)(a1 + 624) = v366;
    *(void *)(a1 + 632) = v147;
    *(void *)(a1 + 640) = v148;
    *(void *)(a1 + 648) = v149;
    *(void *)(a1 + 656) = v150;
    *(void *)(a1 + 664) = v151;
    uint64_t v4 = v418;
    *(void *)(a1 + 672) = v152;
    *(void *)(a1 + 680) = v153;
    *(void *)(a1 + 688) = v376;
    *(void *)(a1 + 696) = v386;
    *(void *)(a1 + 704) = v396;
    *(void *)(a1 + 712) = v406;
    *int v154 = v411;
    sub_21F7E0B38(v155, v156, v157, v158, v159, v160, v161, v162);
  }
  uint64_t v171 = (_OWORD *)(a1 + 728);
  uint64_t v172 = (_OWORD *)(a2 + 728);
  uint64_t v173 = (unsigned char *)(v4 + 592);
  int v174 = *(unsigned __int8 *)(a2 + 856);
  if (*(unsigned __int8 *)(a1 + 856) == 255)
  {
    if (v174 == 255)
    {
      *uint64_t v171 = *v172;
      long long v181 = *(_OWORD *)(a2 + 744);
      long long v182 = *(_OWORD *)(a2 + 760);
      long long v183 = *(_OWORD *)(a2 + 792);
      *(_OWORD *)(a1 + 776) = *(_OWORD *)(a2 + 776);
      *(_OWORD *)(a1 + 792) = v183;
      *(_OWORD *)(a1 + 744) = v181;
      *(_OWORD *)(a1 + 760) = v182;
      long long v184 = *(_OWORD *)(a2 + 808);
      long long v185 = *(_OWORD *)(a2 + 824);
      long long v186 = *(_OWORD *)(a2 + 840);
      *(unsigned char *)(a1 + 856) = *(unsigned char *)(a2 + 856);
      *(_OWORD *)(a1 + 824) = v185;
      *(_OWORD *)(a1 + 840) = v186;
      *(_OWORD *)(a1 + 808) = v184;
      goto LABEL_117;
    }
LABEL_98:
    uint64_t v187 = *(void *)(a2 + 736);
    *(void *)(a1 + 728) = *(void *)(a2 + 728);
    *(void *)(a1 + 736) = v187;
    uint64_t v188 = (_OWORD *)(a1 + 744);
    uint64_t v189 = (long long *)(a2 + 744);
    uint64_t v190 = *(void *)(a2 + 768);
    swift_retain();
    if (v174)
    {
      if (v190)
      {
        *(void *)(a1 + 768) = v190;
        *(void *)(a1 + 776) = *(void *)(a2 + 776);
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v190 - 8))(a1 + 744, a2 + 744, v190);
        uint64_t v191 = *(void *)(a2 + 784);
        if (v191)
        {
LABEL_101:
          uint64_t v192 = *(void *)(a2 + 792);
          *(void *)(a1 + 784) = v191;
          *(void *)(a1 + 792) = v192;
          swift_retain();
LABEL_107:
          *(void *)(a1 + 800) = *(void *)(a2 + 800);
          uint64_t v197 = (uint64_t *)(a2 + 808);
          int v198 = *(unsigned __int8 *)(a2 + 816);
          swift_bridgeObjectRetain();
          if (v198 == 255)
          {
            uint64_t v199 = *v197;
            *(unsigned char *)(a1 + 816) = *(unsigned char *)(a2 + 816);
            *(void *)(a1 + 808) = v199;
          }
          else
          {
            char v200 = v198 & 1;
            uint64_t v201 = *v197;
            sub_21F7637D8(v201, v200);
            *(void *)(a1 + 808) = v201;
            *(unsigned char *)(v4 + 552) = v200;
          }
          long long v202 = *(_OWORD *)(a2 + 840);
          *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 824);
          *(_OWORD *)(a1 + 840) = v202;
          *uint64_t v173 = 1;
          goto LABEL_117;
        }
      }
      else
      {
        long long v195 = *v189;
        long long v196 = *(_OWORD *)(a2 + 760);
        *(void *)(a1 + 776) = *(void *)(a2 + 776);
        *uint64_t v188 = v195;
        *(_OWORD *)(a1 + 760) = v196;
        uint64_t v191 = *(void *)(a2 + 784);
        if (v191) {
          goto LABEL_101;
        }
      }
      *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 784);
      goto LABEL_107;
    }
    if (v190)
    {
      *(void *)(a1 + 768) = v190;
      *(void *)(a1 + 776) = *(void *)(a2 + 776);
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v190 - 8))(a1 + 744, a2 + 744, v190);
      uint64_t v193 = *(void *)(a2 + 784);
      if (v193)
      {
LABEL_104:
        uint64_t v194 = *(void *)(a2 + 792);
        *(void *)(a1 + 784) = v193;
        *(void *)(a1 + 792) = v194;
        swift_retain();
LABEL_113:
        *(void *)(a1 + 800) = *(void *)(a2 + 800);
        BOOL v205 = (uint64_t *)(a2 + 808);
        int v206 = *(unsigned __int8 *)(a2 + 816);
        swift_bridgeObjectRetain();
        if (v206 == 255)
        {
          uint64_t v207 = *v205;
          *(unsigned char *)(a1 + 816) = *(unsigned char *)(a2 + 816);
          *(void *)(a1 + 808) = v207;
        }
        else
        {
          char v208 = v206 & 1;
          uint64_t v209 = *v205;
          sub_21F7637D8(v209, v208);
          *(void *)(a1 + 808) = v209;
          *(unsigned char *)(v4 + 552) = v208;
        }
        long long v210 = *(_OWORD *)(a2 + 840);
        *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 824);
        *(_OWORD *)(a1 + 840) = v210;
        *uint64_t v173 = 0;
        goto LABEL_117;
      }
    }
    else
    {
      long long v203 = *v189;
      long long v204 = *(_OWORD *)(a2 + 760);
      *(void *)(a1 + 776) = *(void *)(a2 + 776);
      *uint64_t v188 = v203;
      *(_OWORD *)(a1 + 760) = v204;
      uint64_t v193 = *(void *)(a2 + 784);
      if (v193) {
        goto LABEL_104;
      }
    }
    *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 784);
    goto LABEL_113;
  }
  if (v174 == 255)
  {
    sub_21F76CA84(a1 + 728, &qword_267EE74F0);
    *uint64_t v171 = *v172;
    long long v175 = *(_OWORD *)(a2 + 792);
    long long v177 = *(_OWORD *)(a2 + 744);
    long long v176 = *(_OWORD *)(a2 + 760);
    *(_OWORD *)(a1 + 776) = *(_OWORD *)(a2 + 776);
    *(_OWORD *)(a1 + 792) = v175;
    *(_OWORD *)(a1 + 744) = v177;
    *(_OWORD *)(a1 + 760) = v176;
    long long v179 = *(_OWORD *)(a2 + 824);
    long long v178 = *(_OWORD *)(a2 + 840);
    long long v180 = *(_OWORD *)(a2 + 808);
    *(unsigned char *)(a1 + 856) = *(unsigned char *)(a2 + 856);
    *(_OWORD *)(a1 + 824) = v179;
    *(_OWORD *)(a1 + 840) = v178;
    *(_OWORD *)(a1 + 808) = v180;
    goto LABEL_117;
  }
  if (a1 != a2)
  {
    sub_21F76CA84(a1 + 728, &qword_267EE74F0);
    LOBYTE(v174) = *(unsigned char *)(v417 + 543);
    goto LABEL_98;
  }
LABEL_117:
  uint64_t v211 = (long long *)(a1 + 864);
  uint64_t v212 = (long long *)(a2 + 864);
  char v213 = (unsigned char *)(v4 + 704);
  int v214 = *(unsigned __int8 *)(a2 + 968);
  if (*(unsigned __int8 *)(a1 + 968) == 255)
  {
    if (v214 == 255)
    {
      long long v220 = *v212;
      long long v221 = *(_OWORD *)(a2 + 896);
      *(_OWORD *)(a1 + 880) = *(_OWORD *)(a2 + 880);
      *(_OWORD *)(a1 + 896) = v221;
      *uint64_t v211 = v220;
      long long v222 = *(_OWORD *)(a2 + 912);
      long long v223 = *(_OWORD *)(a2 + 928);
      long long v224 = *(_OWORD *)(a2 + 944);
      *(_OWORD *)(a1 + 953) = *(_OWORD *)(a2 + 953);
      *(_OWORD *)(a1 + 928) = v223;
      *(_OWORD *)(a1 + 944) = v224;
      *(_OWORD *)(a1 + 912) = v222;
    }
    else
    {
      char v414 = v214 & 1;
      uint64_t v242 = *(void *)(a2 + 864);
      uint64_t v243 = *(void *)(a2 + 872);
      uint64_t v244 = *(void *)(a2 + 880);
      uint64_t v245 = *(void *)(a2 + 888);
      uint64_t v246 = *(void *)(a2 + 896);
      uint64_t v247 = *(void *)(a2 + 904);
      uint64_t v248 = *(void *)(a2 + 912);
      uint64_t v249 = *(void *)(a2 + 920);
      uint64_t v369 = *(void *)(a2 + 928);
      uint64_t v379 = *(void *)(a2 + 936);
      uint64_t v389 = *(void *)(a2 + 944);
      long long v399 = *(_OWORD *)(a2 + 952);
      char v359 = v213;
      sub_21F764268(v242, v243, v244, v245, v246, v247, v248, v249, v369);
      *(void *)(a1 + 864) = v242;
      *(void *)(a1 + 872) = v243;
      *(void *)(a1 + 880) = v244;
      *(void *)(a1 + 888) = v245;
      *(void *)(a1 + 896) = v246;
      *(void *)(a1 + 904) = v247;
      uint64_t v4 = v418;
      *(void *)(a1 + 912) = v248;
      *(void *)(a1 + 920) = v249;
      *(void *)(a1 + 928) = v369;
      *(void *)(a1 + 936) = v379;
      *(void *)(a1 + 944) = v389;
      *(_OWORD *)(a1 + 952) = v399;
      *char v359 = v414;
    }
  }
  else if (v214 == 255)
  {
    sub_21F76CA84(a1 + 864, &qword_26AD47AB8);
    long long v216 = *(_OWORD *)(a2 + 880);
    long long v215 = *(_OWORD *)(a2 + 896);
    *uint64_t v211 = *v212;
    *(_OWORD *)(a1 + 880) = v216;
    *(_OWORD *)(a1 + 896) = v215;
    long long v218 = *(_OWORD *)(a2 + 928);
    long long v217 = *(_OWORD *)(a2 + 944);
    long long v219 = *(_OWORD *)(a2 + 912);
    *(_OWORD *)(a1 + 953) = *(_OWORD *)(a2 + 953);
    *(_OWORD *)(a1 + 928) = v218;
    *(_OWORD *)(a1 + 944) = v217;
    *(_OWORD *)(a1 + 912) = v219;
  }
  else
  {
    char v413 = v214 & 1;
    uint64_t v225 = *(void *)(a2 + 872);
    uint64_t v226 = *(void *)(a2 + 880);
    uint64_t v227 = *(void *)(a2 + 888);
    uint64_t v228 = *(void *)(a2 + 896);
    uint64_t v229 = *(void *)(a2 + 904);
    uint64_t v230 = *(void *)(a2 + 912);
    uint64_t v231 = *(void *)(a2 + 920);
    uint64_t v358 = *(void *)(a2 + 864);
    uint64_t v368 = *(void *)(a2 + 928);
    uint64_t v378 = *(void *)(a2 + 936);
    uint64_t v388 = *(void *)(a2 + 944);
    long long v398 = *(_OWORD *)(a2 + 952);
    long long v232 = v213;
    sub_21F764268(v358, v225, v226, v227, v228, v229, v230, v231, *(_OWORD *)(a2 + 928));
    uint64_t v233 = *(void *)(a1 + 864);
    uint64_t v234 = *(void *)(a1 + 872);
    uint64_t v235 = *(void *)(a1 + 880);
    uint64_t v236 = *(void *)(a1 + 888);
    uint64_t v237 = *(void *)(a1 + 896);
    uint64_t v238 = *(void *)(a1 + 904);
    uint64_t v239 = *(void *)(a1 + 912);
    uint64_t v240 = *(void *)(a1 + 920);
    long long v241 = *(_OWORD *)(a1 + 928);
    *(void *)(a1 + 864) = v358;
    *(void *)(a1 + 872) = v225;
    *(void *)(a1 + 880) = v226;
    *(void *)(a1 + 888) = v227;
    *(void *)(a1 + 896) = v228;
    *(void *)(a1 + 904) = v229;
    uint64_t v4 = v418;
    *(void *)(a1 + 912) = v230;
    *(void *)(a1 + 920) = v231;
    *(void *)(a1 + 928) = v368;
    *(void *)(a1 + 936) = v378;
    *(void *)(a1 + 944) = v388;
    *(_OWORD *)(a1 + 952) = v398;
    *long long v232 = v413;
    sub_21F76D570(v233, v234, v235, v236, v237, v238, v239, v240, v241);
  }
  uint64_t v250 = (_OWORD *)(a1 + 976);
  char v251 = (_OWORD *)(a2 + 976);
  uint64_t v252 = (unsigned char *)(v4 + 840);
  int v253 = *(unsigned __int8 *)(a2 + 1104);
  if (*(unsigned __int8 *)(a1 + 1104) == 255)
  {
    if (v253 == 255)
    {
      *uint64_t v250 = *v251;
      long long v260 = *(_OWORD *)(a2 + 992);
      long long v261 = *(_OWORD *)(a2 + 1008);
      long long v262 = *(_OWORD *)(a2 + 1040);
      *(_OWORD *)(a1 + 1024) = *(_OWORD *)(a2 + 1024);
      *(_OWORD *)(a1 + 1040) = v262;
      *(_OWORD *)(a1 + 992) = v260;
      *(_OWORD *)(a1 + 1008) = v261;
      long long v263 = *(_OWORD *)(a2 + 1056);
      long long v264 = *(_OWORD *)(a2 + 1072);
      long long v265 = *(_OWORD *)(a2 + 1088);
      *(unsigned char *)(a1 + 1104) = *(unsigned char *)(a2 + 1104);
      *(_OWORD *)(a1 + 1072) = v264;
      *(_OWORD *)(a1 + 1088) = v265;
      *(_OWORD *)(a1 + 1056) = v263;
    }
    else
    {
      char v420 = v253 & 1;
      uint64_t v284 = *(void *)(a2 + 976);
      uint64_t v285 = *(void *)(a2 + 984);
      uint64_t v286 = *(void *)(a2 + 992);
      uint64_t v287 = *(void *)(a2 + 1000);
      uint64_t v288 = *(void *)(a2 + 1008);
      uint64_t v289 = *(void *)(a2 + 1016);
      uint64_t v290 = *(void *)(a2 + 1024);
      uint64_t v291 = *(void *)(a2 + 1032);
      uint64_t v353 = *(void *)(a2 + 1040);
      uint64_t v361 = *(void *)(a2 + 1048);
      uint64_t v371 = *(void *)(a2 + 1056);
      uint64_t v381 = *(void *)(a2 + 1064);
      uint64_t v391 = *(void *)(a2 + 1072);
      long long v401 = *(_OWORD *)(a2 + 1080);
      uint64_t v416 = *(void *)(a2 + 1096);
      char v355 = v252;
      sub_21F7E0C30(v284, v285, v286, v287, v288, v289, v290, v291, v353, v361, v371, v381);
      *(void *)(a1 + 976) = v284;
      *(void *)(a1 + 984) = v285;
      *(void *)(a1 + 992) = v286;
      *(void *)(a1 + 1000) = v287;
      *(void *)(a1 + 1008) = v288;
      *(void *)(a1 + 1016) = v289;
      *(void *)(a1 + 1024) = v290;
      *(void *)(a1 + 1032) = v291;
      *(void *)(a1 + 1040) = v353;
      *(void *)(a1 + 1048) = v361;
      *(void *)(a1 + 1056) = v371;
      *(void *)(a1 + 1064) = v381;
      *(void *)(a1 + 1072) = v391;
      *(_OWORD *)(a1 + 1080) = v401;
      *(void *)(a1 + 1096) = v416;
      *char v355 = v420;
    }
  }
  else if (v253 == 255)
  {
    sub_21F76CA84(a1 + 976, &qword_267EE74E8);
    *uint64_t v250 = *v251;
    long long v254 = *(_OWORD *)(a2 + 1040);
    long long v256 = *(_OWORD *)(a2 + 992);
    long long v255 = *(_OWORD *)(a2 + 1008);
    *(_OWORD *)(a1 + 1024) = *(_OWORD *)(a2 + 1024);
    *(_OWORD *)(a1 + 1040) = v254;
    *(_OWORD *)(a1 + 992) = v256;
    *(_OWORD *)(a1 + 1008) = v255;
    long long v258 = *(_OWORD *)(a2 + 1072);
    long long v257 = *(_OWORD *)(a2 + 1088);
    long long v259 = *(_OWORD *)(a2 + 1056);
    *(unsigned char *)(a1 + 1104) = *(unsigned char *)(a2 + 1104);
    *(_OWORD *)(a1 + 1072) = v258;
    *(_OWORD *)(a1 + 1088) = v257;
    *(_OWORD *)(a1 + 1056) = v259;
  }
  else
  {
    char v419 = v253 & 1;
    uint64_t v266 = *(void *)(a2 + 976);
    uint64_t v267 = *(void *)(a2 + 984);
    uint64_t v268 = *(void *)(a2 + 992);
    uint64_t v269 = *(void *)(a2 + 1000);
    uint64_t v270 = *(void *)(a2 + 1008);
    uint64_t v271 = *(void *)(a2 + 1016);
    uint64_t v272 = *(void *)(a2 + 1024);
    uint64_t v352 = *(void *)(a2 + 1032);
    uint64_t v354 = *(void *)(a2 + 1040);
    uint64_t v360 = *(void *)(a2 + 1048);
    uint64_t v370 = *(void *)(a2 + 1056);
    uint64_t v380 = *(void *)(a2 + 1064);
    uint64_t v390 = *(void *)(a2 + 1072);
    long long v400 = *(_OWORD *)(a2 + 1080);
    uint64_t v415 = *(void *)(a2 + 1096);
    uint64_t v273 = v252;
    sub_21F7E0C30(v266, v267, v268, v269, v270, v271, v272, v352, v354, v360, v370, v380);
    uint64_t v274 = *(void *)(a1 + 976);
    uint64_t v275 = *(void *)(a1 + 984);
    uint64_t v276 = *(void *)(a1 + 992);
    uint64_t v277 = *(void *)(a1 + 1000);
    uint64_t v278 = *(void *)(a1 + 1008);
    uint64_t v279 = *(void *)(a1 + 1016);
    uint64_t v280 = *(void *)(a1 + 1024);
    uint64_t v281 = *(void *)(a1 + 1032);
    long long v282 = *(_OWORD *)(a1 + 1040);
    long long v283 = *(_OWORD *)(a1 + 1056);
    *(void *)(a1 + 976) = v266;
    *(void *)(a1 + 984) = v267;
    *(void *)(a1 + 992) = v268;
    *(void *)(a1 + 1000) = v269;
    *(void *)(a1 + 1008) = v270;
    *(void *)(a1 + 1016) = v271;
    *(void *)(a1 + 1024) = v272;
    *(void *)(a1 + 1032) = v352;
    *(void *)(a1 + 1040) = v354;
    *(void *)(a1 + 1048) = v360;
    *(void *)(a1 + 1056) = v370;
    *(void *)(a1 + 1064) = v380;
    *(void *)(a1 + 1072) = v390;
    *(_OWORD *)(a1 + 1080) = v400;
    *(void *)(a1 + 1096) = v415;
    *uint64_t v273 = v419;
    sub_21F7E0CA8(v274, v275, v276, v277, v278, v279, v280, v281, v282, *((uint64_t *)&v282 + 1), v283, BYTE8(v283));
  }
  *(void *)(a1 + 1112) = *(void *)(a2 + 1112);
  *(void *)(a1 + 1120) = *(void *)(a2 + 1120);
  *(void *)(a1 + 1128) = *(void *)(a2 + 1128);
  *(void *)(a1 + 1136) = *(void *)(a2 + 1136);
  *(unsigned char *)(a1 + 1144) = *(unsigned char *)(v417 + 831);
  *(void *)(a1 + 1152) = *(void *)(a2 + 1152);
  *(void *)(a1 + 1160) = *(void *)(a2 + 1160);
  *(void *)(a1 + 1168) = *(void *)(a2 + 1168);
  *(void *)(a1 + 1176) = *(void *)(a2 + 1176);
  long long v292 = (int *)type metadata accessor for ChartModel.Scenegraph();
  uint64_t v293 = v292[14];
  uint64_t v294 = a1 + v293;
  uint64_t v295 = a2 + v293;
  uint64_t v296 = sub_21FA24970();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v296 - 8) + 24))(v294, v295, v296);
  *(void *)(a1 + v292[15]) = *(void *)(a2 + v292[15]);
  swift_retain();
  swift_release();
  *(void *)(a1 + v292[16]) = *(void *)(a2 + v292[16]);
  swift_retain();
  swift_release();
  uint64_t v297 = v292[17];
  uint64_t v298 = a1 + v297;
  uint64_t v299 = (long long *)(a2 + v297);
  int v300 = *(unsigned __int8 *)(a1 + v297 + 40);
  int v301 = *(unsigned __int8 *)(a2 + v297 + 40);
  if (v300 == 255)
  {
    if (v301 == 255)
    {
      long long v304 = *v299;
      long long v305 = v299[1];
      *(_OWORD *)(v298 + 25) = *(long long *)((char *)v299 + 25);
      *(_OWORD *)uint64_t v298 = v304;
      *(_OWORD *)(v298 + 16) = v305;
      goto LABEL_141;
    }
    if (v301) {
      goto LABEL_138;
    }
LABEL_140:
    uint64_t v307 = *((void *)v299 + 3);
    *(void *)(v298 + 24) = v307;
    *(void *)(v298 + 32) = *((void *)v299 + 4);
    (**(void (***)(uint64_t, long long *))(v307 - 8))(v298, v299);
    *(unsigned char *)(v298 + 40) = 0;
    goto LABEL_141;
  }
  if (v301 == 255)
  {
    sub_21F7B25D8(v298);
    long long v302 = *(long long *)((char *)v299 + 25);
    long long v303 = v299[1];
    *(_OWORD *)uint64_t v298 = *v299;
    *(_OWORD *)(v298 + 16) = v303;
    *(_OWORD *)(v298 + 25) = v302;
    goto LABEL_141;
  }
  if (a1 != a2)
  {
    sub_21F7B25D8(v298);
    if (*((unsigned char *)v299 + 40))
    {
LABEL_138:
      uint64_t v306 = *((void *)v299 + 3);
      *(void *)(v298 + 24) = v306;
      *(void *)(v298 + 32) = *((void *)v299 + 4);
      (**(void (***)(uint64_t, long long *))(v306 - 8))(v298, v299);
      *(unsigned char *)(v298 + 40) = 1;
      goto LABEL_141;
    }
    goto LABEL_140;
  }
LABEL_141:
  uint64_t v308 = (long long *)(v298 + 48);
  char v309 = v299 + 3;
  int v310 = *((unsigned __int8 *)v299 + 88);
  if (*(unsigned __int8 *)(v298 + 88) == 255)
  {
    if (v310 == 255)
    {
      long long v313 = *v309;
      long long v314 = v299[4];
      *(_OWORD *)(v298 + 73) = *(long long *)((char *)v299 + 73);
      *uint64_t v308 = v313;
      *(_OWORD *)(v298 + 64) = v314;
      goto LABEL_151;
    }
    goto LABEL_148;
  }
  if (v310 == 255)
  {
    sub_21F7B26E4(v298 + 48);
    long long v311 = *(long long *)((char *)v299 + 73);
    long long v312 = v299[4];
    *uint64_t v308 = *v309;
    *(_OWORD *)(v298 + 64) = v312;
    *(_OWORD *)(v298 + 73) = v311;
    goto LABEL_151;
  }
  if (a1 != a2)
  {
    sub_21F7B26E4(v298 + 48);
    LOBYTE(v310) = *((unsigned char *)v299 + 88);
LABEL_148:
    uint64_t v315 = *((void *)v299 + 9);
    *(void *)(v298 + 72) = v315;
    *(void *)(v298 + 80) = *((void *)v299 + 10);
    (**(void (***)(uint64_t, uint64_t))(v315 - 8))(v298 + 48, (uint64_t)(v299 + 3));
    *(unsigned char *)(v298 + 88) = (v310 & 1) != 0;
  }
LABEL_151:
  uint64_t v316 = (long long *)(v298 + 96);
  char v317 = v299 + 6;
  int v318 = *((unsigned __int8 *)v299 + 136);
  if (*(unsigned __int8 *)(v298 + 136) == 255)
  {
    if (v318 == 255)
    {
      long long v321 = *v317;
      long long v322 = v299[7];
      *(_OWORD *)(v298 + 121) = *(long long *)((char *)v299 + 121);
      *uint64_t v316 = v321;
      *(_OWORD *)(v298 + 112) = v322;
      goto LABEL_161;
    }
    goto LABEL_158;
  }
  if (v318 == 255)
  {
    sub_21F7B25D8(v298 + 96);
    long long v319 = *(long long *)((char *)v299 + 121);
    long long v320 = v299[7];
    *uint64_t v316 = *v317;
    *(_OWORD *)(v298 + 112) = v320;
    *(_OWORD *)(v298 + 121) = v319;
    goto LABEL_161;
  }
  if (a1 != a2)
  {
    sub_21F7B25D8(v298 + 96);
    LOBYTE(v318) = *((unsigned char *)v299 + 136);
LABEL_158:
    uint64_t v323 = *((void *)v299 + 15);
    *(void *)(v298 + 120) = v323;
    *(void *)(v298 + 128) = *((void *)v299 + 16);
    (**(void (***)(uint64_t, uint64_t))(v323 - 8))(v298 + 96, (uint64_t)(v299 + 6));
    *(unsigned char *)(v298 + 136) = (v318 & 1) != 0;
  }
LABEL_161:
  uint64_t v324 = (long long *)(v298 + 144);
  char v325 = v299 + 9;
  int v326 = *((unsigned __int8 *)v299 + 184);
  if (*(unsigned __int8 *)(v298 + 184) == 255)
  {
    if (v326 == 255)
    {
      long long v329 = *v325;
      long long v330 = v299[10];
      *(_OWORD *)(v298 + 169) = *(long long *)((char *)v299 + 169);
      *uint64_t v324 = v329;
      *(_OWORD *)(v298 + 160) = v330;
      goto LABEL_171;
    }
    goto LABEL_168;
  }
  if (v326 == 255)
  {
    sub_21F7B26E4(v298 + 144);
    long long v327 = *(long long *)((char *)v299 + 169);
    long long v328 = v299[10];
    *uint64_t v324 = *v325;
    *(_OWORD *)(v298 + 160) = v328;
    *(_OWORD *)(v298 + 169) = v327;
    goto LABEL_171;
  }
  if (a1 != a2)
  {
    sub_21F7B26E4(v298 + 144);
    LOBYTE(v326) = *((unsigned char *)v299 + 184);
LABEL_168:
    uint64_t v331 = *((void *)v299 + 21);
    *(void *)(v298 + 168) = v331;
    *(void *)(v298 + 176) = *((void *)v299 + 22);
    (**(void (***)(uint64_t, uint64_t))(v331 - 8))(v298 + 144, (uint64_t)(v299 + 9));
    *(unsigned char *)(v298 + 184) = (v326 & 1) != 0;
  }
LABEL_171:
  uint64_t v332 = (long long *)(v298 + 192);
  uint64_t v333 = v299 + 12;
  int v334 = *((unsigned __int8 *)v299 + 232);
  if (*(unsigned __int8 *)(v298 + 232) == 255)
  {
    if (v334 == 255)
    {
      long long v337 = *v333;
      long long v338 = v299[13];
      *(_OWORD *)(v298 + 217) = *(long long *)((char *)v299 + 217);
      *uint64_t v332 = v337;
      *(_OWORD *)(v298 + 208) = v338;
      goto LABEL_181;
    }
    goto LABEL_178;
  }
  if (v334 == 255)
  {
    sub_21F7B25D8(v298 + 192);
    long long v335 = *(long long *)((char *)v299 + 217);
    long long v336 = v299[13];
    *uint64_t v332 = *v333;
    *(_OWORD *)(v298 + 208) = v336;
    *(_OWORD *)(v298 + 217) = v335;
    goto LABEL_181;
  }
  if (a1 != a2)
  {
    sub_21F7B25D8(v298 + 192);
    LOBYTE(v334) = *((unsigned char *)v299 + 232);
LABEL_178:
    uint64_t v339 = *((void *)v299 + 27);
    *(void *)(v298 + 216) = v339;
    *(void *)(v298 + 224) = *((void *)v299 + 28);
    (**(void (***)(uint64_t, uint64_t))(v339 - 8))(v298 + 192, (uint64_t)(v299 + 12));
    *(unsigned char *)(v298 + 232) = (v334 & 1) != 0;
  }
LABEL_181:
  char v340 = (long long *)(v298 + 240);
  uint64_t v341 = v299 + 15;
  uint64_t v342 = (unsigned char *)(v298 + 280);
  int v343 = *((unsigned __int8 *)v299 + 280);
  if (*(unsigned __int8 *)(v298 + 280) == 255)
  {
    if (v343 == 255)
    {
      long long v346 = *v341;
      long long v347 = v299[16];
      *(_OWORD *)(v298 + 265) = *(long long *)((char *)v299 + 265);
      *char v340 = v346;
      *(_OWORD *)(v298 + 256) = v347;
      goto LABEL_191;
    }
    uint64_t v350 = *((void *)v299 + 33);
    *(void *)(v298 + 264) = v350;
    *(void *)(v298 + 272) = *((void *)v299 + 34);
    (**(void (***)(uint64_t, uint64_t))(v350 - 8))(v298 + 240, (uint64_t)(v299 + 15));
    if (v343)
    {
LABEL_188:
      *uint64_t v342 = 1;
      goto LABEL_191;
    }
LABEL_190:
    *uint64_t v342 = 0;
    goto LABEL_191;
  }
  if (v343 != 255)
  {
    if (a1 == a2) {
      goto LABEL_191;
    }
    sub_21F7B26E4(v298 + 240);
    char v348 = *((unsigned char *)v299 + 280);
    uint64_t v349 = *((void *)v299 + 33);
    *(void *)(v298 + 264) = v349;
    *(void *)(v298 + 272) = *((void *)v299 + 34);
    (**(void (***)(uint64_t, uint64_t))(v349 - 8))(v298 + 240, (uint64_t)(v299 + 15));
    if (v348) {
      goto LABEL_188;
    }
    goto LABEL_190;
  }
  sub_21F7B26E4(v298 + 240);
  long long v344 = *(long long *)((char *)v299 + 265);
  long long v345 = v299[16];
  *char v340 = *v341;
  *(_OWORD *)(v298 + 256) = v345;
  *(_OWORD *)(v298 + 265) = v344;
LABEL_191:
  *(unsigned char *)(v298 + 281) = *((unsigned char *)v299 + 281);
  *(unsigned char *)(v298 + 282) = *((unsigned char *)v299 + 282);
  return a1;
}

uint64_t initializeWithTake for ChartProxy(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  memcpy((void *)(a1 + 32), (const void *)(a2 + 32), 0x170uLL);
  memcpy((void *)(a1 + 400), (const void *)(a2 + 400), 0x2C1uLL);
  *(_OWORD *)(a1 + 1112) = *(_OWORD *)(a2 + 1112);
  *(_OWORD *)(a1 + 1128) = *(_OWORD *)(a2 + 1128);
  *(unsigned char *)(a1 + 1144) = *(unsigned char *)(a2 + 1144);
  *(_OWORD *)(a1 + 1152) = *(_OWORD *)(a2 + 1152);
  *(_OWORD *)(a1 + 1168) = *(_OWORD *)(a2 + 1168);
  uint64_t v5 = (int *)type metadata accessor for ChartModel.Scenegraph();
  uint64_t v6 = v5[14];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_21FA24970();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(void *)(a1 + v5[15]) = *(void *)(a2 + v5[15]);
  *(void *)(a1 + v5[16]) = *(void *)(a2 + v5[16]);
  memcpy((void *)(a1 + v5[17]), (const void *)(a2 + v5[17]), 0x11BuLL);
  return a1;
}

uint64_t assignWithTake for ChartProxy(uint64_t a1, uint64_t a2)
{
  long long v4 = (unsigned char *)(a2 + 316);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  if (a1 != a2)
  {
    sub_21F76CA84(a1 + 32, &qword_26AD4A218);
    memcpy((void *)(a1 + 32), (const void *)(a2 + 32), 0x11CuLL);
  }
  *(unsigned char *)(a1 + 316) = *v4;
  uint64_t v5 = *(void *)(a2 + 320);
  if (*(void *)(a1 + 320))
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(a2 + 328);
      *(void *)(a1 + 320) = v5;
      *(void *)(a1 + 328) = v6;
      swift_release();
      goto LABEL_10;
    }
    swift_release();
  }
  else if (v5)
  {
    uint64_t v7 = *(void *)(a2 + 328);
    *(void *)(a1 + 320) = v5;
    *(void *)(a1 + 328) = v7;
    goto LABEL_10;
  }
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
LABEL_10:
  uint64_t v8 = *(void *)(a2 + 336);
  if (*(void *)(a1 + 336))
  {
    if (v8)
    {
      uint64_t v9 = *(void *)(a2 + 344);
      *(void *)(a1 + 336) = v8;
      *(void *)(a1 + 344) = v9;
      swift_release();
      goto LABEL_17;
    }
    swift_release();
  }
  else if (v8)
  {
    uint64_t v10 = *(void *)(a2 + 344);
    *(void *)(a1 + 336) = v8;
    *(void *)(a1 + 344) = v10;
    goto LABEL_17;
  }
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
LABEL_17:
  uint64_t v11 = *(void *)(a2 + 352);
  if (*(void *)(a1 + 352))
  {
    if (v11)
    {
      uint64_t v12 = *(void *)(a2 + 360);
      *(void *)(a1 + 352) = v11;
      *(void *)(a1 + 360) = v12;
      swift_release();
      goto LABEL_24;
    }
    swift_release();
  }
  else if (v11)
  {
    uint64_t v13 = *(void *)(a2 + 360);
    *(void *)(a1 + 352) = v11;
    *(void *)(a1 + 360) = v13;
    goto LABEL_24;
  }
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
LABEL_24:
  uint64_t v14 = *(void *)(a2 + 368);
  if (*(void *)(a1 + 368))
  {
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 376);
      *(void *)(a1 + 368) = v14;
      *(void *)(a1 + 376) = v15;
      swift_release();
      goto LABEL_31;
    }
    swift_release();
  }
  else if (v14)
  {
    uint64_t v16 = *(void *)(a2 + 376);
    *(void *)(a1 + 368) = v14;
    *(void *)(a1 + 376) = v16;
    goto LABEL_31;
  }
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
LABEL_31:
  uint64_t v17 = *(void *)(a2 + 384);
  if (*(void *)(a1 + 384))
  {
    if (v17)
    {
      uint64_t v18 = *(void *)(a2 + 392);
      *(void *)(a1 + 384) = v17;
      *(void *)(a1 + 392) = v18;
      swift_release();
      goto LABEL_38;
    }
    swift_release();
  }
  else if (v17)
  {
    uint64_t v19 = *(void *)(a2 + 392);
    *(void *)(a1 + 384) = v17;
    *(void *)(a1 + 392) = v19;
    goto LABEL_38;
  }
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
LABEL_38:
  if (*(unsigned __int8 *)(a1 + 504) == 255)
  {
LABEL_41:
    long long v21 = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
    *(_OWORD *)(a1 + 480) = v21;
    *(_OWORD *)(a1 + 489) = *(_OWORD *)(a2 + 489);
    long long v22 = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 416) = v22;
    long long v23 = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 448) = v23;
    goto LABEL_43;
  }
  int v20 = *(unsigned __int8 *)(a2 + 504);
  if (v20 == 255)
  {
    sub_21F76CA84(a1 + 400, &qword_26AD47AB8);
    goto LABEL_41;
  }
  uint64_t v24 = *(void *)(a2 + 496);
  uint64_t v25 = *(void *)(a1 + 400);
  uint64_t v26 = *(void *)(a1 + 408);
  uint64_t v27 = *(void *)(a1 + 416);
  uint64_t v28 = *(void *)(a1 + 424);
  uint64_t v29 = *(void *)(a1 + 432);
  uint64_t v30 = *(void *)(a1 + 440);
  uint64_t v31 = *(void *)(a1 + 448);
  uint64_t v32 = *(void *)(a1 + 456);
  long long v33 = *(_OWORD *)(a1 + 464);
  long long v34 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v34;
  long long v35 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = v35;
  long long v36 = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 480) = v36;
  *(void *)(a1 + 496) = v24;
  *(unsigned char *)(a1 + 504) = v20 & 1;
  sub_21F76D570(v25, v26, v27, v28, v29, v30, v31, v32, v33);
LABEL_43:
  if (*(unsigned __int8 *)(a1 + 616) == 255)
  {
LABEL_46:
    long long v38 = *(_OWORD *)(a2 + 592);
    *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
    *(_OWORD *)(a1 + 592) = v38;
    *(_OWORD *)(a1 + 601) = *(_OWORD *)(a2 + 601);
    long long v39 = *(_OWORD *)(a2 + 528);
    *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
    *(_OWORD *)(a1 + 528) = v39;
    long long v40 = *(_OWORD *)(a2 + 560);
    *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
    *(_OWORD *)(a1 + 560) = v40;
    goto LABEL_48;
  }
  int v37 = *(unsigned __int8 *)(a2 + 616);
  if (v37 == 255)
  {
    sub_21F76CA84(a1 + 512, &qword_26AD47AB8);
    goto LABEL_46;
  }
  uint64_t v41 = *(void *)(a2 + 608);
  uint64_t v42 = *(void *)(a1 + 512);
  uint64_t v43 = *(void *)(a1 + 520);
  uint64_t v44 = *(void *)(a1 + 528);
  uint64_t v45 = *(void *)(a1 + 536);
  uint64_t v46 = *(void *)(a1 + 544);
  uint64_t v47 = *(void *)(a1 + 552);
  uint64_t v48 = *(void *)(a1 + 560);
  uint64_t v49 = *(void *)(a1 + 568);
  long long v50 = *(_OWORD *)(a1 + 576);
  long long v51 = *(_OWORD *)(a2 + 528);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 528) = v51;
  long long v52 = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 560) = v52;
  long long v53 = *(_OWORD *)(a2 + 592);
  *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 592) = v53;
  *(void *)(a1 + 608) = v41;
  *(unsigned char *)(a1 + 616) = v37 & 1;
  sub_21F76D570(v42, v43, v44, v45, v46, v47, v48, v49, v50);
LABEL_48:
  if (*(unsigned __int8 *)(a1 + 720) == 255)
  {
LABEL_51:
    long long v55 = *(_OWORD *)(a2 + 704);
    *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
    *(_OWORD *)(a1 + 704) = v55;
    *(unsigned char *)(a1 + 720) = *(unsigned char *)(a2 + 720);
    long long v56 = *(_OWORD *)(a2 + 640);
    *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 624);
    *(_OWORD *)(a1 + 640) = v56;
    long long v57 = *(_OWORD *)(a2 + 672);
    *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
    *(_OWORD *)(a1 + 672) = v57;
    goto LABEL_53;
  }
  int v54 = *(unsigned __int8 *)(a2 + 720);
  if (v54 == 255)
  {
    sub_21F76CA84(a1 + 624, qword_26AD44A50);
    goto LABEL_51;
  }
  uint64_t v58 = *(void *)(a1 + 624);
  uint64_t v59 = *(void *)(a1 + 632);
  uint64_t v60 = *(void *)(a1 + 640);
  uint64_t v61 = *(void *)(a1 + 648);
  uint64_t v62 = *(void *)(a1 + 656);
  uint64_t v63 = *(void *)(a1 + 664);
  uint64_t v64 = *(void *)(a1 + 672);
  uint64_t v65 = *(void *)(a1 + 680);
  long long v66 = *(_OWORD *)(a2 + 640);
  *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 640) = v66;
  long long v67 = *(_OWORD *)(a2 + 672);
  *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
  *(_OWORD *)(a1 + 672) = v67;
  long long v68 = *(_OWORD *)(a2 + 704);
  *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
  *(_OWORD *)(a1 + 704) = v68;
  *(unsigned char *)(a1 + 720) = v54 & 1;
  sub_21F7E0B38(v58, v59, v60, v61, v62, v63, v64, v65);
LABEL_53:
  if (*(unsigned __int8 *)(a1 + 856) == 255)
  {
LABEL_57:
    long long v69 = *(_OWORD *)(a2 + 840);
    *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 824);
    *(_OWORD *)(a1 + 840) = v69;
    *(unsigned char *)(a1 + 856) = *(unsigned char *)(a2 + 856);
    long long v70 = *(_OWORD *)(a2 + 776);
    *(_OWORD *)(a1 + 760) = *(_OWORD *)(a2 + 760);
    *(_OWORD *)(a1 + 776) = v70;
    long long v71 = *(_OWORD *)(a2 + 808);
    *(_OWORD *)(a1 + 792) = *(_OWORD *)(a2 + 792);
    *(_OWORD *)(a1 + 808) = v71;
    long long v72 = *(_OWORD *)(a2 + 744);
    *(_OWORD *)(a1 + 728) = *(_OWORD *)(a2 + 728);
    *(_OWORD *)(a1 + 744) = v72;
    goto LABEL_58;
  }
  if (*(unsigned __int8 *)(a2 + 856) == 255 || a1 != a2)
  {
    sub_21F76CA84(a1 + 728, &qword_267EE74F0);
    goto LABEL_57;
  }
LABEL_58:
  if (*(unsigned __int8 *)(a1 + 968) == 255)
  {
LABEL_61:
    long long v74 = *(_OWORD *)(a2 + 944);
    *(_OWORD *)(a1 + 928) = *(_OWORD *)(a2 + 928);
    *(_OWORD *)(a1 + 944) = v74;
    *(_OWORD *)(a1 + 953) = *(_OWORD *)(a2 + 953);
    long long v75 = *(_OWORD *)(a2 + 880);
    *(_OWORD *)(a1 + 864) = *(_OWORD *)(a2 + 864);
    *(_OWORD *)(a1 + 880) = v75;
    long long v76 = *(_OWORD *)(a2 + 912);
    *(_OWORD *)(a1 + 896) = *(_OWORD *)(a2 + 896);
    *(_OWORD *)(a1 + 912) = v76;
    goto LABEL_63;
  }
  int v73 = *(unsigned __int8 *)(a2 + 968);
  if (v73 == 255)
  {
    sub_21F76CA84(a1 + 864, &qword_26AD47AB8);
    goto LABEL_61;
  }
  uint64_t v77 = *(void *)(a2 + 960);
  uint64_t v78 = *(void *)(a1 + 864);
  uint64_t v79 = *(void *)(a1 + 872);
  uint64_t v80 = *(void *)(a1 + 880);
  uint64_t v81 = *(void *)(a1 + 888);
  uint64_t v82 = *(void *)(a1 + 896);
  uint64_t v83 = *(void *)(a1 + 904);
  uint64_t v84 = *(void *)(a1 + 912);
  uint64_t v85 = *(void *)(a1 + 920);
  long long v86 = *(_OWORD *)(a1 + 928);
  long long v87 = *(_OWORD *)(a2 + 880);
  *(_OWORD *)(a1 + 864) = *(_OWORD *)(a2 + 864);
  *(_OWORD *)(a1 + 880) = v87;
  long long v88 = *(_OWORD *)(a2 + 912);
  *(_OWORD *)(a1 + 896) = *(_OWORD *)(a2 + 896);
  *(_OWORD *)(a1 + 912) = v88;
  long long v89 = *(_OWORD *)(a2 + 944);
  *(_OWORD *)(a1 + 928) = *(_OWORD *)(a2 + 928);
  *(_OWORD *)(a1 + 944) = v89;
  *(void *)(a1 + 960) = v77;
  *(unsigned char *)(a1 + 968) = v73 & 1;
  sub_21F76D570(v78, v79, v80, v81, v82, v83, v84, v85, v86);
LABEL_63:
  if (*(unsigned __int8 *)(a1 + 1104) == 255)
  {
LABEL_66:
    long long v91 = *(_OWORD *)(a2 + 1088);
    *(_OWORD *)(a1 + 1072) = *(_OWORD *)(a2 + 1072);
    *(_OWORD *)(a1 + 1088) = v91;
    *(unsigned char *)(a1 + 1104) = *(unsigned char *)(a2 + 1104);
    long long v92 = *(_OWORD *)(a2 + 1024);
    *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 1008);
    *(_OWORD *)(a1 + 1024) = v92;
    long long v93 = *(_OWORD *)(a2 + 1056);
    *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a2 + 1040);
    *(_OWORD *)(a1 + 1056) = v93;
    long long v94 = *(_OWORD *)(a2 + 992);
    *(_OWORD *)(a1 + 976) = *(_OWORD *)(a2 + 976);
    *(_OWORD *)(a1 + 992) = v94;
    goto LABEL_68;
  }
  int v90 = *(unsigned __int8 *)(a2 + 1104);
  if (v90 == 255)
  {
    sub_21F76CA84(a1 + 976, &qword_267EE74E8);
    goto LABEL_66;
  }
  uint64_t v95 = *(void *)(a1 + 976);
  uint64_t v96 = *(void *)(a1 + 984);
  uint64_t v97 = *(void *)(a1 + 992);
  uint64_t v98 = *(void *)(a1 + 1000);
  uint64_t v99 = *(void *)(a1 + 1008);
  uint64_t v100 = *(void *)(a1 + 1016);
  uint64_t v101 = *(void *)(a1 + 1024);
  uint64_t v102 = *(void *)(a1 + 1032);
  long long v103 = *(_OWORD *)(a1 + 1040);
  long long v104 = *(_OWORD *)(a1 + 1056);
  long long v105 = *(_OWORD *)(a2 + 992);
  *(_OWORD *)(a1 + 976) = *(_OWORD *)(a2 + 976);
  *(_OWORD *)(a1 + 992) = v105;
  long long v106 = *(_OWORD *)(a2 + 1024);
  *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 1008);
  *(_OWORD *)(a1 + 1024) = v106;
  *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a2 + 1040);
  *(_OWORD *)(a1 + 1056) = *(_OWORD *)(a2 + 1056);
  *(_OWORD *)(a1 + 1072) = *(_OWORD *)(a2 + 1072);
  *(_OWORD *)(a1 + 1088) = *(_OWORD *)(a2 + 1088);
  *(unsigned char *)(a1 + 1104) = v90 & 1;
  sub_21F7E0CA8(v95, v96, v97, v98, v99, v100, v101, v102, v103, *((uint64_t *)&v103 + 1), v104, BYTE8(v104));
LABEL_68:
  *(void *)(a1 + 1112) = *(void *)(a2 + 1112);
  *(_OWORD *)(a1 + 1120) = *(_OWORD *)(a2 + 1120);
  *(void *)(a1 + 1136) = *(void *)(a2 + 1136);
  *(unsigned char *)(a1 + 1144) = v4[828];
  *(_OWORD *)(a1 + 1152) = *(_OWORD *)(a2 + 1152);
  *(_OWORD *)(a1 + 1168) = *(_OWORD *)(a2 + 1168);
  long long v107 = (int *)type metadata accessor for ChartModel.Scenegraph();
  uint64_t v108 = v107[14];
  uint64_t v109 = a1 + v108;
  uint64_t v110 = a2 + v108;
  uint64_t v111 = sub_21FA24970();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v111 - 8) + 40))(v109, v110, v111);
  *(void *)(a1 + v107[15]) = *(void *)(a2 + v107[15]);
  swift_release();
  *(void *)(a1 + v107[16]) = *(void *)(a2 + v107[16]);
  swift_release();
  uint64_t v112 = v107[17];
  uint64_t v113 = a1 + v112;
  uint64_t v114 = a2 + v112;
  if (*(unsigned __int8 *)(a1 + v112 + 40) == 255)
  {
LABEL_72:
    long long v115 = *(_OWORD *)(v114 + 16);
    *(_OWORD *)uint64_t v113 = *(_OWORD *)v114;
    *(_OWORD *)(v113 + 16) = v115;
    *(_OWORD *)(v113 + 25) = *(_OWORD *)(v114 + 25);
    goto LABEL_73;
  }
  if (*(unsigned __int8 *)(v114 + 40) == 255 || a1 != a2)
  {
    sub_21F7B25D8(v113);
    goto LABEL_72;
  }
LABEL_73:
  if (*(unsigned __int8 *)(v113 + 88) == 255)
  {
LABEL_77:
    long long v116 = *(_OWORD *)(v114 + 64);
    *(_OWORD *)(v113 + 48) = *(_OWORD *)(v114 + 48);
    *(_OWORD *)(v113 + 64) = v116;
    *(_OWORD *)(v113 + 73) = *(_OWORD *)(v114 + 73);
    goto LABEL_78;
  }
  if (*(unsigned __int8 *)(v114 + 88) == 255 || a1 != a2)
  {
    sub_21F7B26E4(v113 + 48);
    goto LABEL_77;
  }
LABEL_78:
  if (*(unsigned __int8 *)(v113 + 136) == 255)
  {
LABEL_82:
    long long v117 = *(_OWORD *)(v114 + 112);
    *(_OWORD *)(v113 + 96) = *(_OWORD *)(v114 + 96);
    *(_OWORD *)(v113 + 112) = v117;
    *(_OWORD *)(v113 + 121) = *(_OWORD *)(v114 + 121);
    goto LABEL_83;
  }
  if (*(unsigned __int8 *)(v114 + 136) == 255 || a1 != a2)
  {
    sub_21F7B25D8(v113 + 96);
    goto LABEL_82;
  }
LABEL_83:
  if (*(unsigned __int8 *)(v113 + 184) == 255)
  {
LABEL_87:
    long long v118 = *(_OWORD *)(v114 + 160);
    *(_OWORD *)(v113 + 144) = *(_OWORD *)(v114 + 144);
    *(_OWORD *)(v113 + 160) = v118;
    *(_OWORD *)(v113 + 169) = *(_OWORD *)(v114 + 169);
    goto LABEL_88;
  }
  if (*(unsigned __int8 *)(v114 + 184) == 255 || a1 != a2)
  {
    sub_21F7B26E4(v113 + 144);
    goto LABEL_87;
  }
LABEL_88:
  if (*(unsigned __int8 *)(v113 + 232) == 255)
  {
LABEL_92:
    long long v119 = *(_OWORD *)(v114 + 208);
    *(_OWORD *)(v113 + 192) = *(_OWORD *)(v114 + 192);
    *(_OWORD *)(v113 + 208) = v119;
    *(_OWORD *)(v113 + 217) = *(_OWORD *)(v114 + 217);
    goto LABEL_93;
  }
  if (*(unsigned __int8 *)(v114 + 232) == 255 || a1 != a2)
  {
    sub_21F7B25D8(v113 + 192);
    goto LABEL_92;
  }
LABEL_93:
  if (*(unsigned __int8 *)(v113 + 280) == 255)
  {
LABEL_97:
    long long v120 = *(_OWORD *)(v114 + 256);
    *(_OWORD *)(v113 + 240) = *(_OWORD *)(v114 + 240);
    *(_OWORD *)(v113 + 256) = v120;
    *(_OWORD *)(v113 + 265) = *(_OWORD *)(v114 + 265);
    goto LABEL_98;
  }
  if (*(unsigned __int8 *)(v114 + 280) == 255 || a1 != a2)
  {
    sub_21F7B26E4(v113 + 240);
    goto LABEL_97;
  }
LABEL_98:
  *(unsigned char *)(v113 + 281) = *(unsigned char *)(v114 + 281);
  *(unsigned char *)(v113 + 282) = *(unsigned char *)(v114 + 282);
  return a1;
}

uint64_t getEnumTagSinglePayload for ChartProxy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F891B98);
}

uint64_t sub_21F891B98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ChartModel.Scenegraph();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ChartProxy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F891C18);
}

uint64_t sub_21F891C18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ChartModel.Scenegraph();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ChartProxy()
{
  uint64_t result = qword_26AD44CD0;
  if (!qword_26AD44CD0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_21F891CD4()
{
  uint64_t result = type metadata accessor for ChartModel.Scenegraph();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_21F891D60(uint64_t a1)
{
  return sub_21F891DB8(a1, MEMORY[0x263F1A2F8]);
}

uint64_t sub_21F891D8C(uint64_t a1)
{
  return sub_21F891DB8(a1, MEMORY[0x263F1A3F0]);
}

uint64_t sub_21F891DB8(uint64_t a1, void (*a2)(uint64_t, void *))
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 24);
  v6[0] = &type metadata for ChartScenegraphKey;
  v6[1] = v3;
  _OWORD v6[2] = sub_21F88D3E8();
  v6[3] = v4;
  a2(255, v6);
  sub_21FA249D0();
  swift_getWitnessTable();
  return swift_getWitnessTable();
}

uint64_t sub_21F891E68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ChartModel.Scenegraph();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21F891ECC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ChartProxy();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21F891F28(uint64_t a1)
{
  return a1;
}

uint64_t sub_21F891F84(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 128);
}

uint64_t *sub_21F891F8C(uint64_t *a1)
{
  return a1;
}

uint64_t *sub_21F891FF0(uint64_t *a1)
{
  return a1;
}

void static ShapeStyleTiling.xy.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static ShapeStyleTiling.yz.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static ShapeStyleTiling.xz.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static ShapeStyleTiling.defaultUV.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

void sub_21F892080(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 4;
}

uint64_t sub_21F892094()
{
  sub_21F8931A0();

  return sub_21FA24B40();
}

double sub_21F8920DC@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_21F8920F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_21F893214();

  return MEMORY[0x270EFF9B8](a1, a2, a3, a4, v8);
}

double sub_21F892154@<D0>(uint64_t a1@<X8>)
{
  sub_21F893134();
  sub_21FA24B40();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)(a1 + 64) = v7;
  return result;
}

uint64_t Chart3DContent.foregroundStyle<A>(_:tilingBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v11 = *v10;
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a4);
  unint64_t v15 = sub_21FA245C0();
  unint64_t v15 = sub_21FA245C0() | 0x8000000000000000;
  char v16 = v11;
  sub_21F9DD214(KeyPath, (uint64_t)&v15, a3);
  swift_release();
  return swift_release();
}

uint64_t sub_21F892314@<X0>(uint64_t a1@<X8>)
{
  sub_21F8931A0();
  uint64_t result = sub_21FA24B40();
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return result;
}

uint64_t sub_21F89236C@<X0>(uint64_t a1@<X8>)
{
  sub_21F8931A0();
  uint64_t result = sub_21FA24B40();
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return result;
}

uint64_t sub_21F8923C4(uint64_t a1)
{
  return sub_21FA24B50();
}

uint64_t Chart3DContent.foregroundStyle<A>(by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for PlottableValue();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v15 - v11;
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  sub_21F764B80((uint64_t)v12, a3, a5, (uint64_t)&v22);
  long long v16 = v22;
  uint64_t v17 = v23;
  uint64_t v18 = *((void *)&v23 + 1);
  long long v19 = v24;
  uint64_t v20 = v25;
  long long v21 = v26;
  sub_21F9DD214(KeyPath, (uint64_t)&v16, a2);
  swift_release();
  long long v28 = v22;
  long long v29 = v23;
  sub_21F7E0D5C((uint64_t)&v28, (uint64_t)v31);
  sub_21F7E0DB8((uint64_t)v31);
  uint64_t v30 = *((void *)&v29 + 1);
  sub_21F7741D0((uint64_t)&v30);
  sub_21F770EE8((uint64_t)&v24, (uint64_t)v27);
  return sub_21F7E0E20((uint64_t)v27);
}

double sub_21F8925FC@<D0>(uint64_t a1@<X8>)
{
  sub_21F893134();
  sub_21FA24B40();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)(a1 + 64) = v7;
  return result;
}

uint64_t sub_21F892660(uint64_t *a1)
{
  return sub_21FA24B50();
}

unsigned char *storeEnumTagSinglePayload for ShapeStyleTiling(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *double result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x21F8927A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShapeStyleTiling()
{
  return &type metadata for ShapeStyleTiling;
}

uint64_t initializeBufferWithCopyOfBuffer for Chart3DForegroundStyle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Chart3DForegroundStyle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for Chart3DForegroundStyle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Chart3DForegroundStyle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 253);
  }
  if (*(unsigned __int8 *)(a1 + 8) <= 3u) {
    int v3 = 3;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 8);
  }
  int v4 = v3 - 4;
  if (*(unsigned __int8 *)(a1 + 8) < 3u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Chart3DForegroundStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)double result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Chart3DForegroundStyle()
{
  return &type metadata for Chart3DForegroundStyle;
}

uint64_t sub_21F892960(uint64_t a1)
{
  return sub_21F892978(a1, &qword_267EE8088);
}

uint64_t sub_21F89296C(uint64_t a1)
{
  return sub_21F892978(a1, &qword_267EE8090);
}

uint64_t sub_21F892978(uint64_t a1, uint64_t *a2)
{
  return swift_getWitnessTable();
}

void *initializeBufferWithCopyOfBuffer for Chart3DForegroundStyle.StyleStorage(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for Chart3DForegroundStyle.StyleStorage()
{
  return swift_release();
}

void *assignWithCopy for Chart3DForegroundStyle.StyleStorage(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for Chart3DForegroundStyle.StyleStorage(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Chart3DForegroundStyle.StyleStorage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7F && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 6) | (2 * ((*(void *)a1 >> 57) & 0x38 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Chart3DForegroundStyle.StyleStorage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(void *)double result = a2 - 127;
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(void *)double result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_21F892B50(void *a1)
{
  return *a1 >> 63;
}

void *sub_21F892B5C(void *result)
{
  *result &= ~0x8000000000000000;
  return result;
}

uint64_t *sub_21F892B6C(uint64_t *result, uint64_t a2)
{
  *double result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for Chart3DForegroundStyle.StyleStorage()
{
  return &type metadata for Chart3DForegroundStyle.StyleStorage;
}

unsigned char *storeEnumTagSinglePayload for ShapeStyleTiling.Storage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *double result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x21F892C5CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShapeStyleTiling.Storage()
{
  return &type metadata for ShapeStyleTiling.Storage;
}

uint64_t sub_21F892C94(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  if (a9 < 0)
  {
    sub_21F7652C0(a1, a2, a3 & 1);
    swift_bridgeObjectRetain();
    return sub_21F770E44(a5, a6, a7);
  }
  else
  {
    return swift_retain();
  }
}

uint64_t destroy for PartiallyResolvedForegroundStyle(uint64_t *a1)
{
  return sub_21F892D5C(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8]);
}

uint64_t sub_21F892D5C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  if (a9 < 0)
  {
    sub_21F7656A8(a1, a2, a3 & 1);
    swift_bridgeObjectRelease();
    return sub_21F770E38(a5, a6, a7);
  }
  else
  {
    return swift_release();
  }
}

uint64_t *initializeWithCopy for PartiallyResolvedForegroundStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  sub_21F892C94(*a2, v4, v5, v6, v7, v8, v9, v10, v11);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  return a1;
}

uint64_t *assignWithCopy for PartiallyResolvedForegroundStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  sub_21F892C94(*a2, v4, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  uint64_t v14 = a1[2];
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  uint64_t v17 = a1[5];
  uint64_t v18 = a1[6];
  uint64_t v19 = a1[7];
  uint64_t v20 = a1[8];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  sub_21F892D5C(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

__n128 initializeWithTake for AnyPlottableValue(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t *assignWithTake for PartiallyResolvedForegroundStyle(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 64);
  uint64_t v4 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5];
  uint64_t v10 = a1[6];
  uint64_t v11 = a1[7];
  uint64_t v12 = a1[8];
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v13;
  long long v14 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)a1 + 3) = v14;
  a1[8] = v3;
  sub_21F892D5C(v4, v6, v5, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for PartiallyResolvedForegroundStyle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 16) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for PartiallyResolvedForegroundStyle(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 2 * -a2;
      double result = 0.0;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      return result;
    }
    *(unsigned char *)(a1 + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_21F89307C(uint64_t a1)
{
  return *(void *)(a1 + 64) >> 63;
}

uint64_t sub_21F893088(uint64_t result)
{
  *(void *)(result + 64) &= ~0x8000000000000000;
  return result;
}

int8x16_t sub_21F893098(int8x16_t *a1, uint64_t a2)
{
  uint64_t v2 = a1[4].i64[0] & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  a1[1].i64[0] &= 1uLL;
  int8x16_t result = vandq_s8(a1[3], (int8x16_t)xmmword_21FA28D90);
  a1[3] = result;
  a1[4].i64[0] = v2;
  return result;
}

ValueMetadata *type metadata accessor for PartiallyResolvedForegroundStyle()
{
  return &type metadata for PartiallyResolvedForegroundStyle;
}

unint64_t sub_21F8930E0()
{
  unint64_t result = qword_267EE8098;
  if (!qword_267EE8098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE8098);
  }
  return result;
}

unint64_t sub_21F893134()
{
  unint64_t result = qword_267EE80A0;
  if (!qword_267EE80A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE80A0);
  }
  return result;
}

uint64_t sub_21F893188(uint64_t a1, char a2)
{
  if (a2 != 4) {
    return swift_retain();
  }
  return result;
}

unint64_t sub_21F8931A0()
{
  unint64_t result = qword_267EE80A8;
  if (!qword_267EE80A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE80A8);
  }
  return result;
}

ValueMetadata *_s28__Key_chart3DForegroundStyleVMa()
{
  return &_s28__Key_chart3DForegroundStyleVN;
}

ValueMetadata *_s50__Key_chart3DForegroundStyleLookupByPlottableValueVMa()
{
  return &_s50__Key_chart3DForegroundStyleLookupByPlottableValueVN;
}

unint64_t sub_21F893214()
{
  unint64_t result = qword_267EE80B0;
  if (!qword_267EE80B0)
  {
    sub_21F779EA4(&qword_267EE80B8);
    sub_21F893288();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE80B0);
  }
  return result;
}

unint64_t sub_21F893288()
{
  unint64_t result = qword_267EE80C0;
  if (!qword_267EE80C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE80C0);
  }
  return result;
}

uint64_t ChartContent.mask<A>(content:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v12 = MEMORY[0x270FA5388](v11);
  long long v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (*(uint64_t (**)(char *, uint64_t, __n128))(v15 + 16))(v14, v4, v12);
  a1(v16);
  return sub_21F893438((uint64_t)v14, (uint64_t)v10, a2, a3, a4);
}

uint64_t sub_21F893438@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for ModifiedChartContent_Mask();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

_UNKNOWN **sub_21F893500()
{
  return &off_26B590308;
}

uint64_t sub_21F89350C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_21F8935DC(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void sub_21F8937D4(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x21F893AA0);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          long long v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          long long v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for ModifiedChartContent_Mask()
{
  return swift_getGenericMetadata();
}

uint64_t sub_21F893AE0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v20 = a1;
  uint64_t v21 = v11;
  uint64_t v22 = v12;
  swift_retain();
  sub_21F7803DC(0, (void (*)(void))sub_21F780388, (uint64_t)v15);
  swift_release();
  void v14[2] = a3;
  v14[3] = a4;
  v14[4] = a5;
  v14[5] = a6;
  v14[6] = a1;
  v14[7] = v11;
  v14[8] = v12;
  swift_retain();
  sub_21F7803DC(1, (void (*)(void))sub_21F893E80, (uint64_t)v14);
  return swift_release();
}

__n128 sub_21F893BBC@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  char v12 = *a2;
  uint64_t v13 = *((void *)a2 + 1);
  uint64_t v14 = v13 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  uint64_t v15 = type metadata accessor for ChartContentRenderContext.Environment(0);
  uint64_t v16 = *(int *)(v15 + 64);
  uint64_t v17 = *(void *)(v14 + v16);
  *(void *)(v14 + v16) = 0;
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v39 = a1;
  char v40 = v12;
  uint64_t v41 = v13;
  sub_21F7809C0(0, (void (*)(void))sub_21F780964, (uint64_t)v34);
  uint64_t v24 = v42;
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v29 = a5;
  uint64_t v30 = a6;
  uint64_t v31 = a1;
  char v32 = v12;
  uint64_t v33 = v13;
  sub_21F7809C0(1, (void (*)(void))sub_21F893D9C, (uint64_t)v26);
  uint64_t v18 = v42;
  *(void *)(v14 + *(int *)(v15 + 64)) = v17;
  uint64_t v19 = swift_allocObject();
  uint64_t v20 = *(void *)(*(void *)(v13 + 16) + 24);
  sub_21F76CA40(&qword_26AD4A470);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_21FA28550;
  *(void *)(v21 + 32) = v24;
  uint64_t v22 = swift_allocObject();
  __n128 result = (__n128)xmmword_21FA28550;
  *(_OWORD *)(v22 + 16) = xmmword_21FA28550;
  *(void *)(v22 + 32) = v18;
  *(void *)(v19 + 16) = v20;
  *(void *)(v19 + 24) = v21;
  *(void *)(v19 + 32) = v22;
  *(void *)(v19 + 40) = v17;
  *a7 = v19 | 0x1000000000000000;
  return result;
}

uint64_t sub_21F893D7C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return sub_21F893AE0(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

double sub_21F893D8C@<D0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  *(void *)&double result = sub_21F893BBC(a1, a2, a3[2], a3[3], a3[4], a3[5], a4).n128_u64[0];
  return result;
}

uint64_t sub_21F893D9C()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  char v3 = *(unsigned char *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 16);
  long long v8 = *(_OWORD *)(v0 + 24);
  uint64_t v9 = v1;
  uint64_t v5 = v2 + *(int *)(type metadata accessor for ModifiedChartContent_Mask() + 52);
  LOBYTE(v7) = v3;
  *(void *)&long long v8 = v4;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(v1 + 40))(v5, &v7);
}

uint64_t sub_21F893E40()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_21F893E80()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  *(void *)uint64_t v5 = *(void *)(v0 + 16);
  *(_OWORD *)&v5[8] = *(_OWORD *)(v0 + 24);
  uint64_t v6 = v1;
  uint64_t v3 = v2 + *(int *)(type metadata accessor for ModifiedChartContent_Mask() + 52);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)(v0 + 56);
  return (*(uint64_t (**)(uint64_t, unsigned char *))(v1 + 32))(v3, v5);
}

void _s8CardinalVwxx(id *a1)
{
}

uint64_t _s8CardinalVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  id v5 = v3;
  return a1;
}

uint64_t _s8CardinalVwca(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t _s8CardinalVwta(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  return a1;
}

uint64_t _s8CardinalVwet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s8CardinalVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)double result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s8CardinalVMa()
{
  return &_s8CardinalVN;
}

uint64_t sub_21F8940EC()
{
  return sub_21FA262A0();
}

void sub_21F894174()
{
  uint64_t v1 = v0;
  unint64_t v2 = *(void *)(v0 + 16);
  if (v2 >= 2)
  {
    if (v2 == 2) {
      sub_21FA26290();
    }
    else {
      sub_21F894210(*(double *)(v0 + 48), *(double *)(v0 + 56));
    }
  }
  uint64_t v3 = *(void *)(v0 + 24);
  if (v3 == 1 || !v3 && *(void *)(v1 + 16) == 1) {
    CGPathCloseSubpath(*(CGMutablePathRef *)v1);
  }
  if (__OFSUB__(0, v3)) {
    __break(1u);
  }
  else {
    *(void *)(v1 + 24) = -v3;
  }
}

__n128 sub_21F894210(double a1, double a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  if (v5 == 1)
  {
    *(void *)(v2 + 16) = 2;
    *(double *)(v2 + 48) = a1;
    *(double *)(v2 + 56) = a2;
  }
  else if (v5)
  {
    *(void *)(v2 + 16) = 3;
    sub_21F8940EC();
  }
  else
  {
    *(void *)(v2 + 16) = 1;
    if (*(void *)(v2 + 24) == 1) {
      sub_21FA26290();
    }
    else {
      sub_21FA26280();
    }
  }
  __n128 result = *(__n128 *)(v2 + 48);
  long long v7 = *(_OWORD *)(v2 + 64);
  *(__n128 *)(v2 + 32) = result;
  *(_OWORD *)(v2 + 48) = v7;
  *(double *)(v2 + 64) = a1;
  *(double *)(v2 + 72) = a2;
  return result;
}

int64x2_t sub_21F8942EC()
{
  v0[1].i64[0] = 0;
  int64x2_t result = vdupq_n_s64(0x7FF8000000000000uLL);
  v0[2] = result;
  v0[3] = result;
  v0[4] = result;
  return result;
}

void sub_21F894308()
{
  *(void *)(v0 + 24) = -1;
}

void sub_21F894314()
{
  *(void *)(v0 + 24) = 0;
}

id sub_21F894320()
{
  return *v0;
}

uint64_t sub_21F894328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a5 + 16);
  if (!v5) {
    return 0;
  }
  uint64_t v7 = *(void *)(a5 + 32);
  uint64_t v8 = *(void *)(a5 + 40);
  char v30 = *(unsigned char *)(a5 + 48);
  uint64_t v9 = v5 - 1;
  if (v5 == 1)
  {
    sub_21F7652C0(v7, v8, v30);
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_21F7652C0(v7, v8, v30);
    swift_bridgeObjectRetain();
    uint64_t v10 = a5 + 88;
    do
    {
      uint64_t v29 = v9;
      uint64_t v27 = v7;
      uint64_t v28 = v8;
      uint64_t v11 = *(void *)(v10 - 24);
      uint64_t v12 = *(void *)(v10 - 16);
      char v13 = *(unsigned char *)(v10 - 8);
      char v24 = v13;
      v10 += 32;
      sub_21F7652C0(v11, v12, v13);
      swift_bridgeObjectRetain();
      char v26 = v30 & 1;
      uint64_t v14 = sub_21FA25310();
      uint64_t v16 = v15;
      char v18 = v17 & 1;
      uint64_t v25 = sub_21FA25310();
      uint64_t v20 = v19;
      char v30 = v21 & 1;
      sub_21F7656A8(v27, v28, v26);
      swift_bridgeObjectRelease();
      uint64_t v22 = v16;
      uint64_t v8 = v20;
      sub_21F7656A8(v14, v22, v18);
      swift_bridgeObjectRelease();
      uint64_t v7 = v25;
      sub_21F7656A8(v11, v12, v24);
      swift_bridgeObjectRelease();
      uint64_t v9 = v29 - 1;
    }
    while (v29 != 1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_21F894530(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v6 = *(void *)(a5 + 16);
  if (v6 == a6) {
    return 0;
  }
  if (v6 <= a6) {
    goto LABEL_23;
  }
  uint64_t v33 = a5 + 32;
  uint64_t v8 = (uint64_t *)(a5 + 32 + 32 * a6);
  uint64_t v9 = v8[3];
  if (v9)
  {
    uint64_t v10 = v8[1];
    uint64_t v39 = *v8;
    uint64_t v11 = v8[2];
    uint64_t v12 = sub_21F89798C(a6, a5);
    if (v12 == v6)
    {
      sub_21F7BB3B4(v39, v10, v11, v9);
      return v39;
    }
    unint64_t v13 = v12;
    char v38 = v11 & 1;
    swift_bridgeObjectRetain();
    int64x2_t result = sub_21F7BB3B4(v39, v10, v11, v9);
    uint64_t v32 = a5 + 88;
    while (1)
    {
      uint64_t v23 = v39;
      if (v13 >= v6) {
        break;
      }
      char v24 = (uint64_t *)(v33 + 32 * v13);
      if (!v24[3]) {
        goto LABEL_24;
      }
      uint64_t v25 = v10;
      uint64_t v27 = *v24;
      uint64_t v26 = v24[1];
      uint64_t v28 = v24[2];
      int64_t v29 = v6;
      if (v13 + 1 != v6)
      {
        char v30 = (void *)(v32 + 32 * v13);
        int64_t v29 = v13 + 1;
        while (v29 < (uint64_t)v6)
        {
          if (*v30) {
            goto LABEL_8;
          }
          int64_t v31 = v29 + 1;
          if (__OFADD__(v29, 1)) {
            goto LABEL_21;
          }
          ++v29;
          v30 += 4;
          if (v31 == v6)
          {
            int64_t v29 = v6;
            goto LABEL_8;
          }
        }
        __break(1u);
LABEL_21:
        __break(1u);
        break;
      }
LABEL_8:
      uint64_t v35 = v26;
      char v37 = v28 & 1;
      sub_21F7652C0(v27, v26, v28 & 1);
      swift_bridgeObjectRetain();
      char v14 = v38 & 1;
      uint64_t v15 = sub_21FA25310();
      uint64_t v34 = v25;
      uint64_t v17 = v16;
      char v19 = v18 & 1;
      uint64_t v39 = sub_21FA25310();
      uint64_t v36 = v20;
      char v38 = v21 & 1;
      sub_21F7656A8(v23, v34, v14);
      swift_bridgeObjectRelease();
      sub_21F7656A8(v15, v17, v19);
      swift_bridgeObjectRelease();
      sub_21F7656A8(v27, v35, v37);
      int64x2_t result = swift_bridgeObjectRelease();
      unint64_t v13 = v29;
      BOOL v22 = v29 == v6;
      uint64_t v10 = v36;
      if (v22)
      {
        swift_bridgeObjectRelease();
        return v39;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_21F8947D0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v55 = a2;
  uint64_t v54 = sub_21FA24B30();
  uint64_t v7 = *(void *)(v54 - 8);
  MEMORY[0x270FA5388](v54);
  uint64_t v9 = &v42[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = MEMORY[0x263F8EE78];
  uint64_t v11 = (uint64_t *)(v10 + 16);
  sub_21F896544(a1, v10);
  swift_beginAccess();
  uint64_t v12 = *v11;
  swift_bridgeObjectRetain();
  swift_release();
  if (!*(void *)(v12 + 16)) {
    goto LABEL_23;
  }
  uint64_t v52 = a3;
  uint64_t v53 = a4;
  long long v13 = *(_OWORD *)(v12 + 176);
  long long v63 = *(_OWORD *)(v12 + 160);
  long long v64 = v13;
  long long v65 = *(_OWORD *)(v12 + 192);
  char v66 = *(unsigned char *)(v12 + 208);
  long long v14 = *(_OWORD *)(v12 + 112);
  long long v59 = *(_OWORD *)(v12 + 96);
  long long v60 = v14;
  long long v15 = *(_OWORD *)(v12 + 144);
  long long v61 = *(_OWORD *)(v12 + 128);
  long long v62 = v15;
  long long v16 = *(_OWORD *)(v12 + 48);
  v56[0] = *(_OWORD *)(v12 + 32);
  v56[1] = v16;
  long long v17 = *(_OWORD *)(v12 + 80);
  long long v57 = *(_OWORD *)(v12 + 64);
  long long v58 = v17;
  unsigned __int8 v18 = v56[0];
  int v51 = v60;
  uint64_t v46 = *((void *)&v60 + 1);
  uint64_t v50 = v61;
  int v49 = BYTE8(v61);
  uint64_t v48 = v62;
  uint64_t v45 = v63;
  uint64_t v44 = *((void *)&v62 + 1);
  int v47 = BYTE8(v63);
  if (SBYTE8(v17) < 0)
  {
    unsigned __int8 v21 = BYTE8(v17) & 1;
    sub_21F815690((uint64_t)v56);
  }
  else
  {
    int v43 = LOBYTE(v56[0]);
    uint64_t v19 = *((void *)&v57 + 1);
    uint64_t v20 = v58;
    if (BYTE8(v17))
    {
      if (BYTE8(v17) == 1)
      {
        sub_21F815690((uint64_t)v56);
        unsigned __int8 v21 = 1;
        sub_21F770E38(v19, v20, 1);
      }
      else
      {
        sub_21F815690((uint64_t)v56);
        unsigned __int8 v21 = 2;
      }
    }
    else
    {
      sub_21F815690((uint64_t)v56);
      sub_21F770E38(v19, v20, 0);
      unsigned __int8 v21 = 0;
    }
    unsigned __int8 v18 = v43;
  }
  sub_21FA24B20();
  uint64_t v22 = sub_21FA252B0();
  uint64_t v24 = v23;
  uint64_t v25 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
  v25(v9, v54);
  uint64_t v26 = v52;
  uint64_t v27 = v53;
  id v28 = sub_21F894DE8(v18, v21, v22, v24, v55, v52, v53);
  swift_bridgeObjectRelease();
  if (!v28)
  {
    swift_bridgeObjectRelease();
    sub_21F815768((uint64_t)v56);
    return 0;
  }
  unsigned __int8 v29 = v47;
  if ((char)v47 < 0)
  {
    unsigned __int8 v29 = v47 & 1;
  }
  else if (v47)
  {
    if (v47 == 1)
    {
      unsigned __int8 v29 = 1;
      sub_21F770E38(v44, v45, 1);
    }
  }
  else
  {
    sub_21F770E38(v44, v45, 0);
    unsigned __int8 v29 = 0;
  }
  sub_21FA24B20();
  uint64_t v30 = sub_21FA252B0();
  uint64_t v32 = v31;
  v25(v9, v54);
  id v33 = sub_21F894DE8(v51, v29, v30, v32, v55, v26, v27);
  swift_bridgeObjectRelease();
  if (!v33)
  {
    swift_unknownObjectRelease();
    sub_21F815768((uint64_t)v56);
LABEL_23:
    swift_bridgeObjectRelease();
    return 0;
  }
  self;
  if (!swift_dynamicCastObjCClass())
  {
    swift_unknownObjectRelease();
    sub_21F815768((uint64_t)v56);
    swift_unknownObjectRelease();
    goto LABEL_23;
  }
  uint64_t v34 = sub_21F812848(v12);
  uint64_t v35 = swift_bridgeObjectRelease();
  MEMORY[0x270FA5388](v35);
  *(void *)&v42[-16] = v27;
  sub_21F897A0C(v34, (void (*)(void *, uint64_t))sub_21F896860);
  swift_bridgeObjectRelease();
  sub_21F897D8C(0, &qword_26AD468D8);
  type metadata accessor for FindClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v37 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  char v38 = (void *)sub_21FA25CF0();
  id v39 = objc_msgSend(v37, sel_localizedStringForKey_value_table_, v38, 0, 0);

  sub_21FA25D00();
  uint64_t v40 = sub_21FA262B0();
  sub_21F815768((uint64_t)v56);
  return v40;
}

uint64_t sub_21F894DB0()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

id sub_21F894DE8(unsigned __int8 a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_21F8959F4(a1, a2, a5, a6, (uint64_t)v54);
  sub_21F76C9DC((uint64_t)v54, (uint64_t)v55, &qword_26AD467F8);
  if (sub_21F897D10((uint64_t)v55) == 1) {
    return 0;
  }
  uint64_t v43 = v58;
  uint64_t v42 = v59;
  uint64_t v40 = v55[1];
  uint64_t v41 = v60;
  unsigned __int8 v10 = v62;
  uint64_t v44 = v61;
  char v11 = v63;
  if (!a2)
  {
    if ((v63 & 1) == 0 && !v64)
    {
      uint64_t v36 = v55[0];
      uint64_t v38 = v57;
      uint64_t v34 = v56;
      if (*(void *)(a7 + 16) && (unint64_t v25 = sub_21F75BD50(a1), (v26 & 1) != 0))
      {
        sub_21F7F3EA0(*(void *)(a7 + 56) + 48 * v25, (uint64_t)&v47);
      }
      else
      {
        uint64_t v49 = 0;
        long long v47 = 0u;
        long long v48 = 0u;
        char v50 = -1;
      }
      uint64_t v28 = v43;
      uint64_t v27 = v44;
      uint64_t v30 = v41;
      uint64_t v29 = v42;
      sub_21F897D24((uint64_t)&v47, (uint64_t)v45);
      if (v46 != 255) {
        goto LABEL_26;
      }
      goto LABEL_27;
    }
    goto LABEL_14;
  }
  if (a2 == 1)
  {
    if ((v63 & 1) == 0 && v64 == 1)
    {
      uint64_t v36 = v55[0];
      uint64_t v38 = v57;
      uint64_t v34 = v56;
      if (*(void *)(a7 + 16) && (unint64_t v12 = sub_21F75BD50(a1), (v13 & 1) != 0))
      {
        sub_21F7F3EA0(*(void *)(a7 + 56) + 48 * v12, (uint64_t)&v47);
      }
      else
      {
        uint64_t v49 = 0;
        long long v47 = 0u;
        long long v48 = 0u;
        char v50 = -1;
      }
      uint64_t v28 = v43;
      uint64_t v27 = v44;
      uint64_t v30 = v41;
      uint64_t v29 = v42;
      sub_21F897D24((uint64_t)&v47, (uint64_t)v45);
      if (v46 != 255)
      {
LABEL_26:
        sub_21F7F3E44((uint64_t)v45, (uint64_t)v51);
        swift_retain();
        sub_21F7642FC(v28);
        uint64_t v31 = v30;
        swift_bridgeObjectRetain();
        unsigned __int8 v32 = v10;
        sub_21F7637E4(v27, v10);
LABEL_28:
        sub_21F76CA84((uint64_t)&v47, &qword_26AD48EB0);
        sub_21F8C2D48(v31);
        sub_21F897D8C(0, &qword_26AD468E0);
        sub_21F7F3EA0((uint64_t)v51, (uint64_t)&v47);
        uint64_t v33 = swift_allocObject();
        sub_21F7F3E44((uint64_t)&v47, v33 + 16);
        swift_bridgeObjectRetain();
        id v20 = (id)sub_21FA26300();
        sub_21F76D570(v36, v40, v34, v38, v43, v29, v31, v44, v32);
        sub_21F76D570(v36, v40, v34, v38, v43, v29, v41, v44, v32);
        sub_21F7F3CCC((uint64_t)v51);
        return v20;
      }
LABEL_27:
      uint64_t v52 = 0;
      memset(v51, 0, sizeof(v51));
      char v53 = 3;
      swift_retain();
      sub_21F7642FC(v43);
      uint64_t v31 = v41;
      swift_bridgeObjectRetain();
      unsigned __int8 v32 = v10;
      sub_21F7637E4(v44, v10);
      sub_21F76CA84((uint64_t)v45, &qword_26AD48EB0);
      goto LABEL_28;
    }
LABEL_14:
    uint64_t v17 = v55[0];
    uint64_t v18 = v57;
    uint64_t v19 = v56;
    swift_bridgeObjectRelease();
    sub_21F76D570(v17, v40, v19, v18, v43, v42, v41, v44, v10);
    return 0;
  }
  uint64_t v14 = v55[0];
  uint64_t v15 = v56;
  uint64_t v16 = v57;
  swift_bridgeObjectRelease();
  if (v11)
  {
    id v35 = objc_allocWithZone(MEMORY[0x263EFABC0]);
    uint64_t v39 = v16;
    uint64_t v37 = v14;
    uint64_t v22 = v16;
    sub_21F764268(v14, v40, v15, v16, v43, v42, v41, v44, v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v23 = (void *)sub_21FA25CF0();
    swift_bridgeObjectRelease();
    uint64_t v24 = (void *)sub_21FA25E30();
    swift_bridgeObjectRelease();
    id v20 = objc_msgSend(v35, sel_initWithTitle_categoryOrder_, v23, v24);

    sub_21F76D570(v37, v40, v15, v22, v43, v42, v41, v44, v10);
    sub_21F76D570(v37, v40, v15, v39, v43, v42, v41, v44, v10);
    return v20;
  }
  sub_21F76D570(v14, v40, v15, v16, v43, v42, v41, v44, v10);
  return 0;
}

id sub_21F895514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_21FA24B30();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_21F897B44(v10, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  uint64_t v32 = v7;
  uint64_t v33 = v6;
  unint64_t v13 = 0;
  if (v12)
  {
    uint64_t v14 = (uint64_t *)(v11 + 56);
    while (1)
    {
      uint64_t v15 = *v14;
      v14 += 4;
      if (v15) {
        break;
      }
      if (v12 == ++v13) {
        goto LABEL_7;
      }
    }
  }
  if (v13 == v12)
  {
LABEL_7:
    swift_bridgeObjectRelease();
    uint64_t v16 = 0;
    char v17 = 0;
    uint64_t v18 = 0;
    char v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0xE000000000000000;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_21F894530(32, 0xE100000000000000, 0, MEMORY[0x263F8EE78], v11, v13);
    uint64_t v21 = v22;
    char v24 = v23;
    uint64_t v26 = v25;
    swift_bridgeObjectRelease_n();
    char v17 = v24 & 1;
    uint64_t v18 = v21;
    char v19 = v24 & 1;
    uint64_t v20 = v26;
  }
  sub_21F7BB3B4(v16, v18, v19, v20);
  sub_21FA24B20();
  uint64_t v27 = sub_21FA252B0();
  uint64_t v29 = v28;
  sub_21F7656A8(v16, v21, v17);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v33);
  id v30 = sub_21F895770(v27, v29, *(unsigned char *)(v34 + 40), v35);
  swift_bridgeObjectRelease();
  sub_21F7F42EC(v16, v18, v19, v20);
  return v30;
}

id sub_21F895770(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  char v4 = a3;
  uint64_t v17 = MEMORY[0x263F8EE78];
  uint64_t v5 = *(void *)(a4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = (unsigned __int8 *)(a4 + 88);
    do
    {
      if (v7[80] <= 1u)
      {
        uint64_t v8 = *((void *)v7 - 2);
        uint64_t v9 = *((void *)v7 - 1);
        unsigned int v10 = *v7;
        if ((v10 & 0x80) != 0 || v10 < 2)
        {
          sub_21F897D8C(0, &qword_26AD468D0);
          sub_21FA26230();
        }
        else
        {
          sub_21F897D8C(0, &qword_26AD468D0);
          sub_21F7607AC(v8, v9, 2);
          sub_21FA26220();
        }
        MEMORY[0x223C55260]();
        if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_21FA25E90();
        }
        sub_21FA25EF0();
        sub_21FA25E60();
      }
      v7 += 184;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    char v4 = a3;
  }
  id v11 = objc_allocWithZone(MEMORY[0x263EFABE8]);
  swift_bridgeObjectRetain();
  uint64_t v12 = (void *)sub_21FA25CF0();
  swift_bridgeObjectRelease();
  sub_21F897D8C(0, &qword_26AD468D0);
  unint64_t v13 = (void *)sub_21FA25E30();
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v11, sel_initWithName_isContinuous_dataPoints_, v12, v4 & 1, v13);

  return v14;
}

char *sub_21F8959F4@<X0>(unsigned __int8 a1@<W0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (!*(void *)(a3 + 16)
    || (unint64_t v10 = sub_21F75BD50(a1), (v11 & 1) == 0)
    || (uint64_t v12 = *(void *)(a3 + 56) + 112 * v10, v13 = *(unsigned __int8 *)(v12 + 104), v13 == 255))
  {
    sub_21F897E30((uint64_t)v108);
    sub_21F76C9DC((uint64_t)v108, (uint64_t)v112, &qword_26AD467F8);
    return (char *)sub_21F76C9DC((uint64_t)v112, a5, &qword_26AD467F8);
  }
  uint64_t v102 = *(void *)v12;
  uint64_t v103 = *(void *)(v12 + 8);
  uint64_t v14 = *(void *)(v12 + 24);
  uint64_t v107 = *(void *)(v12 + 16);
  uint64_t v15 = *(void *)(v12 + 32);
  uint64_t v16 = *(void *)(v12 + 40);
  uint64_t v17 = *(void *)(v12 + 48);
  uint64_t v99 = a5;
  uint64_t v100 = *(void *)(v12 + 56);
  uint64_t v18 = *(void *)(v12 + 64);
  uint64_t v20 = *(void *)(v12 + 80);
  uint64_t v19 = *(void *)(v12 + 88);
  uint64_t v21 = *(void *)(v12 + 96);
  uint64_t v104 = v14;
  uint64_t v105 = *(void *)(v12 + 72);
  uint64_t v106 = v18;
  uint64_t v101 = v20;
  if (!*(void *)(a4 + 16)) {
    goto LABEL_12;
  }
  uint64_t v95 = *(void *)(v12 + 40);
  uint64_t v96 = *(void *)(v12 + 32);
  uint64_t v97 = *(void *)(v12 + 88);
  uint64_t v98 = *(void *)(v12 + 48);
  uint64_t v94 = *(void *)(v12 + 96);
  unint64_t v22 = sub_21F75BD50(a1);
  uint64_t v21 = v94;
  uint64_t v19 = v97;
  uint64_t v17 = v98;
  LOBYTE(v18) = v106;
  if ((v23 & 1) == 0)
  {
LABEL_12:
    int v31 = a2;
    if (a2)
    {
      uint64_t v33 = v102;
      uint64_t v32 = v103;
      uint64_t v48 = v14;
      uint64_t v49 = v15;
      uint64_t v50 = v15;
      uint64_t v51 = v16;
      uint64_t v52 = v16;
      uint64_t v53 = v17;
      uint64_t v54 = v100;
      uint64_t v55 = v107;
      uint64_t v56 = v19;
      uint64_t v57 = v21;
      if (v31 == 1)
      {
        sub_21F764268(v102, v103, v107, v48, v50, v52, v17, v100, v18);
        uint64_t v59 = v57;
        uint64_t v60 = v101;
        uint64_t v62 = v105;
        uint64_t v61 = v106;
        char v63 = 1;
      }
      else
      {
        sub_21F764268(v102, v103, v107, v48, v50, v52, v17, v100, v18);
        uint64_t v59 = v57;
        uint64_t v60 = v101;
        uint64_t v62 = v105;
        uint64_t v61 = v106;
        char v63 = 2;
      }
    }
    else
    {
      uint64_t v33 = v102;
      uint64_t v32 = v103;
      uint64_t v55 = v107;
      uint64_t v44 = v14;
      uint64_t v49 = v15;
      uint64_t v45 = v15;
      uint64_t v51 = v16;
      uint64_t v46 = v16;
      uint64_t v53 = v17;
      uint64_t v54 = v100;
      uint64_t v56 = v19;
      uint64_t v47 = v21;
      sub_21F764268(v102, v103, v107, v44, v45, v46, v17, v100, v18);
      uint64_t v59 = v47;
      uint64_t v60 = v101;
      uint64_t v62 = v105;
      uint64_t v61 = v106;
      char v63 = 0;
    }
    uint64_t v64 = v104;
    uint64_t v29 = (char *)MEMORY[0x263F8EE78];
    goto LABEL_82;
  }
  uint64_t v24 = *(void *)(*(void *)(a4 + 56) + 8 * v22);
  if (!a2)
  {
    uint64_t v65 = *(void *)(v24 + 16);
    char v90 = v13;
    if (!v65)
    {
      uint64_t v33 = v102;
      uint64_t v32 = v103;
      uint64_t v54 = v100;
      sub_21F764268(v102, v103, v107, v14, v15, v16, v98, v100, v106);
      uint64_t v29 = (char *)MEMORY[0x263F8EE78];
LABEL_78:
      char v63 = 0;
      goto LABEL_79;
    }
    sub_21F77F4A8(v102, v103, v107, v14, v15, v16, v98, v100, v106, v105, v20, v97, v94, v13);
    uint64_t v66 = v107;
    sub_21F77F4A8(v102, v103, v107, v14, v15, v16, v98, v100, v106, v105, v20, v97, v94, v13);
    int64x2_t result = (char *)swift_bridgeObjectRetain();
    long long v67 = (unsigned __int8 *)(v24 + 40);
    uint64_t v29 = (char *)MEMORY[0x263F8EE78];
    long long v68 = (unsigned __int8 *)(v24 + 40);
    while (1)
    {
      int v69 = *v68;
      v68 += 16;
      if (v69) {
        goto LABEL_39;
      }
      uint64_t v70 = *((void *)v67 - 1);
      uint64_t v71 = *(void *)(v70 + 16);
      int64_t v72 = *((void *)v29 + 2);
      int64_t v73 = v72 + v71;
      if (__OFADD__(v72, v71)) {
        goto LABEL_88;
      }
      swift_bridgeObjectRetain();
      int64x2_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
      if (result && v73 <= *((void *)v29 + 3) >> 1)
      {
        if (*(void *)(v70 + 16)) {
          goto LABEL_50;
        }
      }
      else
      {
        if (v72 <= v73) {
          int64_t v74 = v72 + v71;
        }
        else {
          int64_t v74 = v72;
        }
        int64x2_t result = sub_21F7E8F4C(result, v74, 1, v29);
        uint64_t v29 = result;
        if (*(void *)(v70 + 16))
        {
LABEL_50:
          uint64_t v75 = *((void *)v29 + 2);
          if ((*((void *)v29 + 3) >> 1) - v75 < v71) {
            goto LABEL_91;
          }
          int64x2_t result = (char *)memcpy(&v29[8 * v75 + 32], (const void *)(v70 + 32), 8 * v71);
          if (v71)
          {
            uint64_t v76 = *((void *)v29 + 2);
            BOOL v42 = __OFADD__(v76, v71);
            uint64_t v77 = v76 + v71;
            if (v42) {
              goto LABEL_94;
            }
            *((void *)v29 + 2) = v77;
          }
          goto LABEL_38;
        }
      }
      if (v71) {
        goto LABEL_87;
      }
LABEL_38:
      int64x2_t result = (char *)swift_bridgeObjectRelease();
      uint64_t v66 = v107;
LABEL_39:
      long long v67 = v68;
      if (!--v65)
      {
        swift_bridgeObjectRelease();
        uint64_t v33 = v102;
        uint64_t v32 = v103;
        uint64_t v54 = v100;
        sub_21F76EE70(v102, v103, v66, v104, v96, v95, v98, v100, v106, v105, v20, v97, v94, v92);
        goto LABEL_78;
      }
    }
  }
  if (a2 != 1)
  {
    uint64_t v78 = *(void *)(v24 + 16);
    if (!v78)
    {
      uint64_t v33 = v102;
      uint64_t v32 = v103;
      uint64_t v54 = v100;
      sub_21F764268(v102, v103, v107, v14, v15, v16, v98, v100, v106);
      uint64_t v29 = (char *)MEMORY[0x263F8EE78];
LABEL_81:
      char v63 = 2;
      uint64_t v64 = v104;
      uint64_t v62 = v105;
      uint64_t v51 = v95;
      uint64_t v49 = v96;
      uint64_t v56 = v97;
      uint64_t v53 = v98;
      uint64_t v61 = v106;
      uint64_t v55 = v107;
      uint64_t v60 = v101;
      uint64_t v59 = v94;
      goto LABEL_82;
    }
    uint64_t v79 = *(void *)(*(void *)(a4 + 56) + 8 * v22);
    sub_21F77F4A8(v102, v103, v107, v14, v15, v16, v98, v100, v106, v105, v20, v97, v94, v13);
    sub_21F77F4A8(v102, v103, v107, v14, v15, v16, v98, v100, v106, v105, v20, v97, v94, v13);
    int64x2_t result = (char *)swift_bridgeObjectRetain();
    uint64_t v80 = (unsigned __int8 *)(v79 + 40);
    uint64_t v29 = (char *)MEMORY[0x263F8EE78];
    uint64_t v81 = (unsigned __int8 *)(v79 + 40);
    while (1)
    {
      int v82 = *v81;
      v81 += 16;
      if (v82 != 2) {
        goto LABEL_58;
      }
      uint64_t v83 = *((void *)v80 - 1);
      uint64_t v84 = *(void *)(v83 + 16);
      int64_t v85 = *((void *)v29 + 2);
      int64_t v86 = v85 + v84;
      if (__OFADD__(v85, v84)) {
        goto LABEL_86;
      }
      swift_bridgeObjectRetain();
      int64x2_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
      if (result && v86 <= *((void *)v29 + 3) >> 1)
      {
        if (*(void *)(v83 + 16)) {
          goto LABEL_69;
        }
      }
      else
      {
        if (v85 <= v86) {
          int64_t v87 = v85 + v84;
        }
        else {
          int64_t v87 = v85;
        }
        int64x2_t result = sub_21F7E5FD8(result, v87, 1, v29);
        uint64_t v29 = result;
        if (*(void *)(v83 + 16))
        {
LABEL_69:
          if ((*((void *)v29 + 3) >> 1) - *((void *)v29 + 2) < v84) {
            goto LABEL_90;
          }
          int64x2_t result = (char *)swift_arrayInitWithCopy();
          if (v84)
          {
            uint64_t v88 = *((void *)v29 + 2);
            BOOL v42 = __OFADD__(v88, v84);
            uint64_t v89 = v88 + v84;
            if (v42) {
              goto LABEL_93;
            }
            *((void *)v29 + 2) = v89;
          }
          goto LABEL_57;
        }
      }
      if (v84) {
        goto LABEL_85;
      }
LABEL_57:
      int64x2_t result = (char *)swift_bridgeObjectRelease();
LABEL_58:
      uint64_t v80 = v81;
      if (!--v78)
      {
        swift_bridgeObjectRelease();
        LOBYTE(v13) = v93;
        uint64_t v33 = v102;
        uint64_t v32 = v103;
        uint64_t v54 = v100;
        sub_21F76EE70(v102, v103, v107, v104, v96, v95, v98, v100, v106, v105, v20, v97, v94, v93);
        goto LABEL_81;
      }
    }
  }
  uint64_t v25 = *(void *)(v24 + 16);
  char v90 = v13;
  if (!v25)
  {
    uint64_t v33 = v102;
    uint64_t v32 = v103;
    uint64_t v54 = v100;
    sub_21F764268(v102, v103, v107, v14, v15, v16, v98, v100, v106);
    uint64_t v29 = (char *)MEMORY[0x263F8EE78];
    char v63 = 1;
LABEL_79:
    uint64_t v64 = v104;
    uint64_t v62 = v105;
    uint64_t v51 = v95;
    uint64_t v49 = v96;
    uint64_t v56 = v97;
    uint64_t v53 = v98;
    uint64_t v61 = v106;
    uint64_t v55 = v107;
    uint64_t v60 = v101;
    uint64_t v59 = v94;
    LOBYTE(v13) = v90;
LABEL_82:
    v108[0] = v33;
    v108[1] = v32;
    v108[2] = v55;
    v108[3] = v64;
    v108[4] = v49;
    v108[5] = v51;
    v108[6] = v53;
    v108[7] = v54;
    v108[8] = v61;
    v108[9] = v62;
    v108[10] = v60;
    v108[11] = v56;
    v108[12] = v59;
    char v109 = v13 & 1;
    uint64_t v110 = v29;
    char v111 = v63;
    nullsub_1(v108, v58);
    sub_21F76C9DC((uint64_t)v108, (uint64_t)v112, &qword_26AD467F8);
    a5 = v99;
    return (char *)sub_21F76C9DC((uint64_t)v112, a5, &qword_26AD467F8);
  }
  sub_21F77F4A8(v102, v103, v107, v14, v15, v16, v98, v100, v106, v105, v20, v97, v94, v13);
  uint64_t v26 = v107;
  sub_21F77F4A8(v102, v103, v107, v14, v15, v16, v98, v100, v106, v105, v20, v97, v94, v13);
  int64x2_t result = (char *)swift_bridgeObjectRetain();
  uint64_t v28 = (unsigned __int8 *)(v24 + 40);
  uint64_t v29 = (char *)MEMORY[0x263F8EE78];
  id v30 = (unsigned __int8 *)(v24 + 40);
  while (1)
  {
    int v34 = *v30;
    v30 += 16;
    if (v34 != 1) {
      goto LABEL_18;
    }
    uint64_t v35 = *((void *)v28 - 1);
    uint64_t v36 = *(void *)(v35 + 16);
    int64_t v37 = *((void *)v29 + 2);
    int64_t v38 = v37 + v36;
    if (__OFADD__(v37, v36)) {
      goto LABEL_84;
    }
    swift_bridgeObjectRetain();
    int64x2_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
    if (result && v38 <= *((void *)v29 + 3) >> 1)
    {
      if (*(void *)(v35 + 16)) {
        goto LABEL_29;
      }
    }
    else
    {
      if (v37 <= v38) {
        int64_t v39 = v37 + v36;
      }
      else {
        int64_t v39 = v37;
      }
      int64x2_t result = sub_21F7E8F4C(result, v39, 1, v29);
      uint64_t v29 = result;
      if (*(void *)(v35 + 16))
      {
LABEL_29:
        uint64_t v40 = *((void *)v29 + 2);
        if ((*((void *)v29 + 3) >> 1) - v40 < v36) {
          goto LABEL_89;
        }
        int64x2_t result = (char *)memcpy(&v29[8 * v40 + 32], (const void *)(v35 + 32), 8 * v36);
        if (v36)
        {
          uint64_t v41 = *((void *)v29 + 2);
          BOOL v42 = __OFADD__(v41, v36);
          uint64_t v43 = v41 + v36;
          if (v42) {
            goto LABEL_92;
          }
          *((void *)v29 + 2) = v43;
        }
        goto LABEL_17;
      }
    }
    if (v36) {
      break;
    }
LABEL_17:
    int64x2_t result = (char *)swift_bridgeObjectRelease();
    uint64_t v26 = v107;
LABEL_18:
    uint64_t v28 = v30;
    if (!--v25)
    {
      swift_bridgeObjectRelease();
      uint64_t v33 = v102;
      uint64_t v32 = v103;
      uint64_t v54 = v100;
      sub_21F76EE70(v102, v103, v26, v104, v96, v95, v98, v100, v106, v105, v20, v97, v94, v91);
      char v63 = 1;
      goto LABEL_79;
    }
  }
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
  return result;
}

uint64_t sub_21F89633C(uint64_t a1, double a2)
{
  uint64_t v4 = sub_21FA24220();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v5 = sub_21F76CA40(qword_26AD48308);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F7F3EA0(a1, (uint64_t)&v16);
  if (v19 - 1 >= 2)
  {
    if (v19)
    {
      double v15 = a2;
      sub_21FA24200();
      sub_21F885234();
      sub_21FA23F30();
      sub_21F885288();
      sub_21FA25A70();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      return *(void *)&v13[0];
    }
    else
    {
      v13[0] = v16;
      v13[1] = v17;
      uint64_t v14 = v18;
      double v15 = a2;
      unint64_t v10 = sub_21F77E0FC(v13, *((uint64_t *)&v17 + 1));
      sub_21F9F9DA8((uint64_t)v10, (uint64_t)&v15, MEMORY[0x263F8D538]);
      uint64_t v9 = v11;
      sub_21F76CA84((uint64_t)v13, qword_26AD46C40);
    }
  }
  else
  {
    sub_21F7F3CCC((uint64_t)&v16);
    return 0;
  }
  return v9;
}

void sub_21F896544(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SgGroup(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  switch(a1 >> 60)
  {
    case 0uLL:
      uint64_t v7 = swift_projectBox();
      sub_21F7F60B8(v7, (uint64_t)v6);
      uint64_t v8 = *((void *)v6 + 1);
      uint64_t v9 = *(void *)(v8 + 16);
      if (v9)
      {
        swift_bridgeObjectRetain();
        uint64_t v10 = 0;
        do
        {
          uint64_t v11 = *(void *)(v8 + 8 * v10++ + 32);
          swift_retain();
          sub_21F896544(v11, a2);
          swift_release();
        }
        while (v9 != v10);
        swift_bridgeObjectRelease();
      }
      sub_21F7F611C((uint64_t)v6);
      break;
    case 1uLL:
      uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      uint64_t v13 = *(void *)(v12 + 16);
      if (v13)
      {
        swift_bridgeObjectRetain();
        uint64_t v14 = 0;
        do
        {
          uint64_t v15 = *(void *)(v12 + 8 * v14++ + 32);
          swift_retain();
          sub_21F896544(v15, a2);
          swift_release();
        }
        while (v13 != v14);
        swift_bridgeObjectRelease();
      }
      break;
    case 2uLL:
      sub_21F779C5C((a1 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)v25);
      uint64_t v16 = v25[1];
      uint64_t v17 = *(void *)(v25[1] + 16);
      if (v17)
      {
        swift_bridgeObjectRetain();
        uint64_t v18 = 0;
        do
        {
          uint64_t v19 = *(void *)(v16 + 8 * v18++ + 32);
          swift_retain();
          sub_21F896544(v19, a2);
          swift_release();
        }
        while (v17 != v18);
        swift_bridgeObjectRelease();
      }
      sub_21F7C49F0((uint64_t)v25);
      break;
    case 0xBuLL:
      memcpy(v25, (const void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 16), 0x120uLL);
      uint64_t v20 = v25[34];
      uint64_t v21 = *(void *)(v25[34] + 16);
      if (v21)
      {
        swift_bridgeObjectRetain();
        sub_21F7F4084((uint64_t)v25);
        uint64_t v22 = 0;
        do
        {
          uint64_t v23 = *(void *)(v20 + 8 * v22++ + 32);
          swift_retain();
          sub_21F896544(v23, a2);
          swift_release();
        }
        while (v21 != v22);
        sub_21F7F41B8((uint64_t)v25);
        swift_bridgeObjectRelease();
      }
      break;
    case 0xCuLL:
      memcpy(v25, (const void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 16), sizeof(v25));
      swift_beginAccess();
      sub_21F7F4E2C((uint64_t)v25);
      sub_21F896868((uint64_t)v25, (char **)(a2 + 16));
      sub_21F7F5114((uint64_t)v25);
      break;
    default:
      return;
  }
}

id sub_21F896860(uint64_t a1, uint64_t a2)
{
  return sub_21F895514(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_21F896868(uint64_t a1, char **a2)
{
  sub_21F76C9DC(a1 + 128, (uint64_t)v159, &qword_26AD47B78);
  sub_21F76C9DC((uint64_t)v159, (uint64_t)v160, &qword_26AD47B78);
  if (sub_21F7F0F80(v160) != 1)
  {
    sub_21F7BB81C((uint64_t)v160, (uint64_t)&v140);
    if (sub_21F7E108C((uint64_t)&v140) != 1)
    {
      uint64_t v2 = (unsigned __int8 *)sub_21F7E1098((uint64_t)&v140);
      uint64_t v108 = *v2;
      uint64_t v106 = *((void *)v2 + 2);
      uint64_t v107 = *((void *)v2 + 1);
      uint64_t v105 = v2[24];
      uint64_t v109 = *((void *)v2 + 4);
      uint64_t v103 = *((void *)v2 + 6);
      uint64_t v104 = *((void *)v2 + 5);
      char v102 = v2[56];
      uint64_t v100 = *((void *)v2 + 9);
      uint64_t v101 = *((void *)v2 + 8);
      sub_21F76C9DC((uint64_t)v159, (uint64_t)v158, &qword_26AD47B78);
      sub_21F7F5A88(v158, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
      goto LABEL_6;
    }
    sub_21F7E1098((uint64_t)&v140);
  }
  uint64_t v107 = 0;
  uint64_t v108 = 0;
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  uint64_t v109 = 0;
  uint64_t v103 = 0;
  uint64_t v104 = 0;
  uint64_t v101 = 0;
  char v102 = 0;
  uint64_t v100 = 0;
LABEL_6:
  sub_21F76C9DC(a1 + 440, (uint64_t)v155, &qword_26AD47B78);
  sub_21F76C9DC((uint64_t)v155, (uint64_t)v156, &qword_26AD47B78);
  if (sub_21F7F0F80(v156) == 1
    || (sub_21F7BB81C((uint64_t)v156, (uint64_t)v157),
        sub_21F7BB81C((uint64_t)v157, (uint64_t)v158),
        int v3 = sub_21F7E108C((uint64_t)v158),
        uint64_t v4 = sub_21F7E1098((uint64_t)v158),
        v3 == 1))
  {
    uint64_t v132 = (char *)MEMORY[0x263F8EE78];
  }
  else
  {
    char v5 = *(unsigned char *)v4;
    uint64_t v6 = *(void *)(v4 + 8);
    uint64_t v7 = *(void *)(v4 + 16);
    char v8 = *(unsigned char *)(v4 + 24);
    uint64_t v10 = *(void *)(v4 + 32);
    uint64_t v9 = *(void *)(v4 + 40);
    uint64_t v11 = *(void *)(v4 + 48);
    char v12 = *(unsigned char *)(v4 + 56);
    long long v136 = *(_OWORD *)(v4 + 64);
    sub_21F7F3D20((uint64_t)v155, (uint64_t (*)(void))sub_21F7C6094);
    sub_21F7F3D20((uint64_t)v155, (uint64_t (*)(void))sub_21F7C6094);
    sub_21F7652C0(v6, v7, v8);
    swift_bridgeObjectRetain();
    sub_21F770E44(v9, v11, v12);
    uint64_t v13 = sub_21F7EA35C(0, 1, 1, MEMORY[0x263F8EE78]);
    unint64_t v15 = *((void *)v13 + 2);
    unint64_t v14 = *((void *)v13 + 3);
    uint64_t v132 = v13;
    if (v15 >= v14 >> 1) {
      uint64_t v132 = sub_21F7EA35C((char *)(v14 > 1), v15 + 1, 1, v13);
    }
    *((void *)v132 + 2) = v15 + 1;
    uint64_t v16 = &v132[80 * v15];
    v16[32] = v5;
    *((void *)v16 + 5) = v6;
    *((void *)v16 + 6) = v7;
    v16[56] = v8;
    *((void *)v16 + 8) = v10;
    *((void *)v16 + 9) = v9;
    *((void *)v16 + 10) = v11;
    v16[88] = v12;
    *((_OWORD *)v16 + 6) = v136;
    sub_21F7656A8(v6, v7, v8);
    swift_bridgeObjectRelease();
    sub_21F770E38(v9, v11, v12);
    sub_21F7F3D20((uint64_t)v155, (uint64_t (*)(void))sub_21F7BB724);
  }
  uint64_t v17 = *(void *)(a1 + 120);
  uint64_t v154 = v17;
  uint64_t v18 = *(void *)(v17 + 16);
  if (v18)
  {
    uint64_t v19 = v17 + 32;
    swift_bridgeObjectRetain();
    uint64_t v20 = v18 - 1;
    char v111 = (char *)MEMORY[0x263F8EE78];
    while (1)
    {
      sub_21F7BB81C(v19, (uint64_t)v152);
      sub_21F7BB81C((uint64_t)v152, (uint64_t)&v140);
      int v21 = sub_21F7E108C((uint64_t)&v140);
      uint64_t v22 = sub_21F7E1098((uint64_t)&v140);
      if (v21 == 1) {
        goto LABEL_29;
      }
      char v130 = *(unsigned char *)v22;
      uint64_t v24 = *(void *)(v22 + 8);
      uint64_t v23 = *(void *)(v22 + 16);
      char v25 = *(unsigned char *)(v22 + 24);
      uint64_t v27 = *(void *)(v22 + 32);
      uint64_t v26 = *(void *)(v22 + 40);
      uint64_t v28 = *(void *)(v22 + 48);
      unsigned int v29 = *(unsigned __int8 *)(v22 + 56);
      uint64_t v134 = *(void *)(v22 + 64);
      uint64_t v137 = *(void *)(v22 + 72);
      if (*(char *)(v22 + 56) < 0) {
        goto LABEL_23;
      }
      if (v29 >= 2) {
        break;
      }
      sub_21F7652C0(v24, v23, v25);
      swift_bridgeObjectRetain();
      sub_21F7652C0(v24, v23, v25);
      swift_bridgeObjectRetain();
      sub_21F7F5A88(v152, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
      uint64_t v124 = v26;
      uint64_t v121 = v28;
      sub_21F770E38(v26, v28, v29);
      sub_21F7BB81C((uint64_t)v152, (uint64_t)v139);
      uint64_t v30 = sub_21F7E1098((uint64_t)v139);
      uint64_t v31 = *(void *)(v30 + 40);
      uint64_t v32 = *(void *)(v30 + 48);
      char v33 = *(unsigned char *)(v30 + 56);
      uint64_t v115 = *(void *)(v30 + 16);
      uint64_t v117 = *(void *)(v30 + 8);
      char v114 = *(unsigned char *)(v30 + 24);
      sub_21F7652C0(v117, v115, v114);
      swift_bridgeObjectRetain();
      uint64_t v127 = v31;
      sub_21F770E44(v31, v32, v33);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v111 = sub_21F7EA35C(0, *((void *)v111 + 2) + 1, 1, v111);
      }
      unint64_t v35 = *((void *)v111 + 2);
      unint64_t v34 = *((void *)v111 + 3);
      unint64_t v36 = v35 + 1;
      if (v35 >= v34 >> 1)
      {
        uint64_t v49 = sub_21F7EA35C((char *)(v34 > 1), v35 + 1, 1, v111);
        unint64_t v36 = v35 + 1;
        char v111 = v49;
      }
      *((void *)v111 + 2) = v36;
      int64_t v37 = &v111[80 * v35];
      v37[32] = v130;
      *((void *)v37 + 5) = v24;
      *((void *)v37 + 6) = v23;
      v37[56] = v25;
      *((void *)v37 + 8) = v27;
      *((void *)v37 + 9) = v124;
      *((void *)v37 + 10) = v121;
      v37[88] = v29;
      *((void *)v37 + 12) = v134;
      *((void *)v37 + 13) = v137;
      sub_21F7656A8(v24, v23, v25);
      swift_bridgeObjectRelease();
      sub_21F770E38(v124, v121, v29);
      sub_21F7F5A88(v152, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
      sub_21F7656A8(v117, v115, v114);
      swift_bridgeObjectRelease();
      uint64_t v39 = v32;
      uint64_t v38 = v127;
      char v40 = v33;
LABEL_28:
      sub_21F770E38(v38, v39, v40);
LABEL_29:
      if (!v20)
      {
        sub_21F7741D0((uint64_t)&v154);
        goto LABEL_33;
      }
      --v20;
      v19 += 152;
    }
    sub_21F7607AC(v26, v28, 2);
    swift_bridgeObjectRetain();
LABEL_23:
    char v128 = v29;
    sub_21F7652C0(v24, v23, v25);
    swift_bridgeObjectRetain();
    sub_21F7F5A88(v152, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
    sub_21F7652C0(v24, v23, v25);
    swift_bridgeObjectRetain();
    sub_21F7F5A88(v152, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7C6094);
    uint64_t v41 = v26;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v132 = sub_21F7EA35C(0, *((void *)v132 + 2) + 1, 1, v132);
    }
    unint64_t v43 = *((void *)v132 + 2);
    unint64_t v42 = *((void *)v132 + 3);
    if (v43 >= v42 >> 1) {
      uint64_t v132 = sub_21F7EA35C((char *)(v42 > 1), v43 + 1, 1, v132);
    }
    *((void *)v132 + 2) = v43 + 1;
    uint64_t v44 = &v132[80 * v43];
    v44[32] = v130;
    *((void *)v44 + 5) = v24;
    *((void *)v44 + 6) = v23;
    v44[56] = v25;
    *((void *)v44 + 8) = v27;
    *((void *)v44 + 9) = v41;
    *((void *)v44 + 10) = v28;
    v44[88] = v128;
    *((void *)v44 + 12) = v134;
    *((void *)v44 + 13) = v137;
    sub_21F7656A8(v24, v23, v25);
    swift_bridgeObjectRelease();
    sub_21F770E38(v41, v28, v128);
    sub_21F7F5A88(v152, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
    sub_21F7BB81C((uint64_t)v152, (uint64_t)v139);
    uint64_t v45 = sub_21F7E1098((uint64_t)v139);
    uint64_t v46 = *(void *)(v45 + 40);
    uint64_t v47 = *(void *)(v45 + 48);
    char v48 = *(unsigned char *)(v45 + 56);
    sub_21F7656A8(*(void *)(v45 + 8), *(void *)(v45 + 16), *(unsigned char *)(v45 + 24));
    swift_bridgeObjectRelease();
    uint64_t v38 = v46;
    uint64_t v39 = v47;
    char v40 = v48;
    goto LABEL_28;
  }
  char v111 = (char *)MEMORY[0x263F8EE78];
LABEL_33:
  uint64_t v50 = *(void *)(a1 + 280);
  uint64_t v153 = v50;
  uint64_t v51 = *(void *)(v50 + 16);
  if (!v51)
  {
    uint64_t v73 = v109;
    if (v109) {
      goto LABEL_48;
    }
    char v61 = 0;
    uint64_t v60 = 0;
    uint64_t v59 = 0;
    uint64_t v58 = 0;
    char v57 = 0;
    uint64_t v56 = 0;
    uint64_t v55 = 0;
    uint64_t v54 = 0;
LABEL_50:
    uint64_t v92 = v54;
    uint64_t v93 = v55;
    uint64_t v94 = v56;
    char v95 = v57;
    uint64_t v73 = v58;
    uint64_t v96 = v59;
    uint64_t v97 = v60;
    char v91 = v61;
    goto LABEL_51;
  }
  uint64_t v52 = v50 + 32;
  swift_bridgeObjectRetain();
  uint64_t v53 = v52;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  char v57 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  char v61 = 0;
  uint64_t v62 = 0;
  uint64_t v135 = v51 - 1;
  uint64_t v63 = 0;
  while (1)
  {
    uint64_t v138 = v53;
    sub_21F7BB81C(v53, (uint64_t)v152);
    sub_21F7BB81C((uint64_t)v152, (uint64_t)&v140);
    if (sub_21F7E108C((uint64_t)&v140) != 1) {
      break;
    }
    sub_21F7E1098((uint64_t)&v140);
    uint64_t v65 = v135;
    uint64_t v64 = v138;
    if (!v135) {
      goto LABEL_40;
    }
LABEL_39:
    uint64_t v135 = v65 - 1;
    uint64_t v53 = v64 + 152;
  }
  uint64_t v66 = (unsigned __int8 *)sub_21F7E1098((uint64_t)&v140);
  uint64_t v131 = *v66;
  char v116 = v66[24];
  uint64_t v118 = *((void *)v66 + 2);
  uint64_t v113 = v58;
  uint64_t v119 = *((void *)v66 + 4);
  uint64_t v120 = *((void *)v66 + 1);
  uint64_t v123 = *((void *)v66 + 6);
  uint64_t v125 = *((void *)v66 + 5);
  char v112 = v61;
  char v122 = v66[56];
  uint64_t v126 = *((void *)v66 + 9);
  uint64_t v129 = *((void *)v66 + 8);
  sub_21F7BB81C((uint64_t)v152, (uint64_t)v139);
  uint64_t v67 = sub_21F7E1098((uint64_t)v139);
  uint64_t v68 = v56;
  uint64_t v69 = *(void *)(v67 + 40);
  uint64_t v70 = v55;
  uint64_t v71 = *(void *)(v67 + 48);
  char v72 = *(unsigned char *)(v67 + 56);
  sub_21F7652C0(*(void *)(v67 + 8), *(void *)(v67 + 16), *(unsigned char *)(v67 + 24));
  swift_bridgeObjectRetain();
  sub_21F770E44(v69, v71, v72);
  sub_21F897E58(v54, v70, v68, v57, v113, v59, v60, v112);
  uint64_t v55 = v120;
  char v57 = v116;
  uint64_t v56 = v118;
  sub_21F7652C0(v120, v118, v116);
  uint64_t v58 = v119;
  swift_bridgeObjectRetain();
  uint64_t v60 = v123;
  uint64_t v59 = v125;
  char v61 = v122;
  sub_21F770E44(v125, v123, v122);
  sub_21F7F5A88(v152, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_21F7BB724);
  uint64_t v62 = v129;
  uint64_t v54 = v131;
  uint64_t v63 = v126;
  uint64_t v65 = v135;
  uint64_t v64 = v138;
  if (v135) {
    goto LABEL_39;
  }
LABEL_40:
  sub_21F7741D0((uint64_t)&v153);
  uint64_t v73 = v109;
  if (!v109) {
    goto LABEL_50;
  }
  if (!v58)
  {
LABEL_48:
    char v91 = v102;
    uint64_t v93 = v107;
    uint64_t v92 = v108;
    char v95 = v105;
    uint64_t v94 = v106;
    uint64_t v97 = v103;
    uint64_t v96 = v104;
LABEL_51:
    sub_21F897E58(v92, v93, v94, v95, v73, v96, v97, v91);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  char v74 = *(unsigned char *)(a1 + 592);
  LOBYTE(v140) = v108;
  *((void *)&v140 + 1) = v107;
  *(void *)&long long v141 = v106;
  BYTE8(v141) = v105 != 0;
  *(void *)&long long v142 = v109;
  *((void *)&v142 + 1) = v104;
  *(void *)&long long v143 = v103;
  BYTE8(v143) = v102;
  *(void *)&long long v144 = v101;
  *((void *)&v144 + 1) = v100;
  LOBYTE(v145) = v54;
  *((void *)&v145 + 1) = v55;
  *(void *)&long long v146 = v56;
  BYTE8(v146) = v57 & 1;
  *(void *)&long long v147 = v58;
  *((void *)&v147 + 1) = v59;
  *(void *)&long long v148 = v60;
  BYTE8(v148) = v61;
  *(void *)&long long v149 = v62;
  *((void *)&v149 + 1) = v63;
  *(void *)&long long v150 = v132;
  *((void *)&v150 + 1) = v111;
  char v151 = v74;
  uint64_t v133 = *a2;
  sub_21F897ECC(v108, v107, v106, v105, v109, v104, v103, v102);
  uint64_t v75 = v133;
  sub_21F897ECC(v54, v55, v56, v57, v58, v59, v60, v61);
  sub_21F815690((uint64_t)&v140);
  uint64_t v76 = v54;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v75 = sub_21F7EA23C(0, *((void *)v133 + 2) + 1, 1, v133);
  }
  unint64_t v78 = *((void *)v75 + 2);
  unint64_t v77 = *((void *)v75 + 3);
  uint64_t v79 = v109;
  if (v78 >= v77 >> 1)
  {
    uint64_t v98 = sub_21F7EA23C((char *)(v77 > 1), v78 + 1, 1, v75);
    uint64_t v79 = v109;
    uint64_t v75 = v98;
  }
  *((void *)v75 + 2) = v78 + 1;
  uint64_t v80 = &v75[184 * v78];
  long long v81 = v140;
  long long v82 = v141;
  long long v83 = v143;
  *((_OWORD *)v80 + 4) = v142;
  *((_OWORD *)v80 + 5) = v83;
  *((_OWORD *)v80 + 2) = v81;
  *((_OWORD *)v80 + 3) = v82;
  long long v84 = v144;
  long long v85 = v145;
  long long v86 = v147;
  *((_OWORD *)v80 + 8) = v146;
  *((_OWORD *)v80 + 9) = v86;
  *((_OWORD *)v80 + 6) = v84;
  *((_OWORD *)v80 + 7) = v85;
  long long v87 = v148;
  long long v88 = v149;
  long long v89 = v150;
  v80[208] = v151;
  *((_OWORD *)v80 + 11) = v88;
  *((_OWORD *)v80 + 12) = v89;
  *((_OWORD *)v80 + 10) = v87;
  sub_21F897E58(v108, v107, v106, v105, v79, v104, v103, v102);
  sub_21F897E58(v76, v55, v56, v57, v58, v59, v60, v61);
  uint64_t result = sub_21F815768((uint64_t)&v140);
  *a2 = v75;
  return result;
}

uint64_t sub_21F8973D4()
{
  sub_21FA26A00();
  sub_21FA26A10();
  long long v1 = *(_OWORD *)(v0 + 24);
  long long v2 = *(_OWORD *)(v0 + 56);
  v10[0] = *(_OWORD *)(v0 + 40);
  v10[1] = v2;
  uint64_t v11 = *(void *)(v0 + 72);
  long long v8 = *(_OWORD *)(v0 + 8);
  long long v9 = v1;
  sub_21F770EE8((uint64_t)v10, (uint64_t)v12);
  sub_21F770EE8((uint64_t)v12, (uint64_t)v17);
  unsigned __int8 v3 = v18;
  if (v18 < 0)
  {
    v18 &= ~0x80u;
    sub_21FA26A10();
    sub_21F767A6C();
  }
  else
  {
    uint64_t v4 = v17[0];
    uint64_t v5 = v17[1];
    long long v13 = v8;
    long long v14 = v9;
    sub_21F7E0D5C((uint64_t)&v13, (uint64_t)v16);
    uint64_t v15 = *((void *)&v14 + 1);
    sub_21FA26A10();
    sub_21F7E0DEC((uint64_t)v16);
    sub_21F7744A4((uint64_t)&v15);
    sub_21F7E0E54((uint64_t)v12);
    sub_21FA027D8((uint64_t)v7, v4, v5, v3);
    sub_21F7E0DB8((uint64_t)v16);
    sub_21F7741D0((uint64_t)&v15);
    sub_21F7E0E20((uint64_t)v12);
  }
  return sub_21FA26A50();
}

uint64_t sub_21F897518()
{
  return sub_21F8973D4();
}

uint64_t sub_21F89755C(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  char v5 = *(unsigned char *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 40);
  uint64_t v7 = *(void *)(v1 + 48);
  int v8 = *(char *)(v1 + 56);
  sub_21FA26A10();
  if (v8 < 0)
  {
    sub_21FA26A10();
    return sub_21F767A6C();
  }
  else
  {
    sub_21FA26A10();
    sub_21F7652C0(v3, v4, v5);
    swift_bridgeObjectRetain();
    sub_21F770E44(v6, v7, v8);
    sub_21FA027D8(a1, v6, v7, v8);
    sub_21F7656A8(v3, v4, v5);
    swift_bridgeObjectRelease();
    return sub_21F770E38(v6, v7, v8);
  }
}

uint64_t sub_21F897688()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 48);
  int v6 = *(char *)(v0 + 56);
  sub_21FA26A00();
  sub_21FA26A10();
  sub_21FA26A10();
  if (v6 < 0)
  {
    sub_21F767A6C();
  }
  else
  {
    sub_21F7652C0(v1, v2, v3);
    swift_bridgeObjectRetain();
    sub_21F770E44(v4, v5, v6);
    sub_21FA027D8((uint64_t)v8, v4, v5, v6);
    sub_21F7656A8(v1, v2, v3);
    swift_bridgeObjectRelease();
    sub_21F770E38(v4, v5, v6);
  }
  return sub_21FA26A50();
}

BOOL sub_21F89779C(unsigned __int8 *a1, unsigned __int8 *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  if (*a1 != *a2) {
    return 0;
  }
  LOBYTE(v11) = a2[24];
  return sub_21F9D5674(*((void *)a1 + 1), *((void *)a1 + 2), a1[24], *((void *)a1 + 4), *((void *)a1 + 5), *((void *)a1 + 6), a1[56], *((void *)a2 + 1), *((double *)a2 + 4), a4, a5, a6, a7, a8, a9, a10, *((void *)a2 + 2), v11, *((void *)a2 + 4),
           *((double *)a2 + 5),
           *((double *)a2 + 6),
           a2[56]);
}

uint64_t sub_21F897818()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_21FA26A00();
  sub_21F7D478C((uint64_t)v3, v1);
  sub_21FA26A20();
  return sub_21FA26A50();
}

uint64_t sub_21F897878(uint64_t a1)
{
  sub_21F7D478C(a1, *(void *)(v1 + 32));
  return sub_21FA26A20();
}

uint64_t sub_21F8978B0()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_21FA26A00();
  sub_21F7D478C((uint64_t)v3, v1);
  sub_21FA26A20();
  return sub_21FA26A50();
}

uint64_t sub_21F89790C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(a1 + 40);
  uint64_t v4 = *(void *)(a2 + 32);
  int v5 = *(unsigned __int8 *)(a2 + 40);
  if ((sub_21FA25320() & 1) == 0) {
    return 0;
  }
  if (sub_21F7D37C0(v2, v4)) {
    return v3 ^ v5 ^ 1u;
  }
  return 0;
}

uint64_t sub_21F89798C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 16);
  if (result == a1)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v4 = a1 + 1;
  if (__OFADD__(a1, 1))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (result < v4)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v4 < 0)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  if (v4 != result)
  {
    int v5 = (void *)(a2 + 32 * a1 + 88);
    while (v4 < result)
    {
      if (*v5) {
        return v4;
      }
      uint64_t v6 = v4 + 1;
      if (__OFADD__(v4, 1)) {
        goto LABEL_14;
      }
      ++v4;
      v5 += 4;
      if (v6 == result) {
        return result;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_21F897A0C(uint64_t a1, void (*a2)(void *, uint64_t))
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v19 = MEMORY[0x263F8EE78];
    sub_21FA26630();
    int v5 = (void *)(a1 + 80);
    do
    {
      uint64_t v6 = *(v5 - 6);
      uint64_t v7 = *(v5 - 5);
      char v8 = *((unsigned char *)v5 - 32);
      uint64_t v10 = *(v5 - 3);
      uint64_t v9 = *(v5 - 2);
      char v11 = *((unsigned char *)v5 - 8);
      uint64_t v12 = *v5;
      v5 += 7;
      v14[0] = v6;
      v14[1] = v7;
      char v15 = v8;
      uint64_t v16 = v10;
      uint64_t v17 = v9;
      char v18 = v11;
      sub_21F7652C0(v6, v7, v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a2(v14, v12);
      sub_21F7656A8(v6, v7, v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_21FA26600();
      sub_21FA26640();
      sub_21FA26650();
      sub_21FA26610();
      --v3;
    }
    while (v3);
    return v19;
  }
  return result;
}

uint64_t sub_21F897B44(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v41 = MEMORY[0x263F8EE78];
    sub_21F7A2BC8(0, v2, 0);
    uint64_t v3 = v41;
    uint64_t v5 = a1 + 48;
    for (int64_t i = v2 - 1; ; int64_t i = v24 - 1)
    {
      int64_t v24 = i;
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = *(void *)v5;
      char v9 = *(unsigned char *)(v5 + 8);
      uint64_t v11 = *(void *)(v5 + 16);
      uint64_t v10 = *(void *)(v5 + 24);
      uint64_t v12 = *(void *)(v5 + 32);
      v29[0] = *(unsigned char *)(v5 - 16);
      uint64_t v30 = v7;
      uint64_t v31 = v8;
      char v32 = v9;
      uint64_t v33 = v11;
      uint64_t v34 = v10;
      uint64_t v35 = v12;
      char v36 = *(unsigned char *)(v5 + 40);
      char v13 = v36;
      long long v37 = *(_OWORD *)(v5 + 48);
      char v38 = 3;
      sub_21F7BB878((uint64_t)v29);
      sub_21F7BB81C((uint64_t)v29, (uint64_t)v39);
      nullsub_1(v39, v14);
      sub_21F76C9DC((uint64_t)v39, (uint64_t)v40, &qword_26AD47B78);
      sub_21F7652C0(v7, v8, v9);
      swift_bridgeObjectRetain();
      sub_21F770E44(v10, v12, v13);
      uint64_t v15 = sub_21F7F076C((uint64_t)v40, a2);
      uint64_t v27 = v16;
      uint64_t v28 = v15;
      uint64_t v25 = v18;
      uint64_t v26 = v17;
      sub_21F7656A8(v7, v8, v9);
      swift_bridgeObjectRelease();
      sub_21F770E38(v10, v12, v13);
      uint64_t v41 = v3;
      unint64_t v20 = *(void *)(v3 + 16);
      unint64_t v19 = *(void *)(v3 + 24);
      if (v20 >= v19 >> 1)
      {
        sub_21F7A2BC8((void *)(v19 > 1), v20 + 1, 1);
        uint64_t v3 = v41;
      }
      *(void *)(v3 + 16) = v20 + 1;
      int v21 = (void *)(v3 + 32 * v20);
      v21[4] = v28;
      void v21[5] = v27;
      v21[6] = v26;
      v21[7] = v25;
      if (!v24) {
        break;
      }
      v5 += 80;
    }
  }
  return v3;
}

uint64_t sub_21F897D10(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 104);
  if (v1 > 1) {
    return (v1 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_21F897D24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21F76CA40(&qword_26AD48EB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21F897D8C(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_21F897DCC(double a1)
{
  return sub_21F89633C(v1 + 16, a1);
}

uint64_t sub_21F897DEC()
{
  if (*(unsigned __int8 *)(v0 + 56) <= 2u) {
    _s6Charts15AnyChartContentVwxx_0(v0 + 16);
  }

  return MEMORY[0x270FA0238](v0, 57, 7);
}

double sub_21F897E30(uint64_t a1)
{
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)&double result = 255;
  *(_OWORD *)(a1 + 104) = xmmword_21FA28E00;
  *(unsigned char *)(a1 + 120) = 0;
  return result;
}

void sub_21F897E58(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a5)
  {
    sub_21F7656A8(a2, a3, a4 & 1);
    swift_bridgeObjectRelease();
    sub_21F770E38(a6, a7, a8);
  }
}

void sub_21F897ECC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a5)
  {
    sub_21F7652C0(a2, a3, a4 & 1);
    swift_bridgeObjectRetain();
    sub_21F770E44(a6, a7, a8);
  }
}

uint64_t destroy for DataField(uint64_t a1)
{
  sub_21F7656A8(*(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  char v4 = *(unsigned char *)(a1 + 56);

  return sub_21F770E38(v2, v3, v4);
}

uint64_t initializeWithCopy for DataField(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_21F7652C0(v4, v5, v6);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  char v9 = *(unsigned char *)(a2 + 56);
  swift_bridgeObjectRetain();
  sub_21F770E44(v7, v8, v9);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 56) = v9;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithCopy for DataField(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_21F7652C0(v4, v5, v6);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  char v9 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  sub_21F7656A8(v7, v8, v9);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 48);
  char v12 = *(unsigned char *)(a2 + 56);
  sub_21F770E44(v10, v11, v12);
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v11;
  char v15 = *(unsigned char *)(a1 + 56);
  *(unsigned char *)(a1 + 56) = v12;
  sub_21F770E38(v13, v14, v15);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for DataField(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  char v7 = *(unsigned char *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = v4;
  sub_21F7656A8(v5, v6, v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  char v8 = *(unsigned char *)(a2 + 56);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  char v11 = *(unsigned char *)(a1 + 56);
  *(unsigned char *)(a1 + 56) = v8;
  sub_21F770E38(v9, v10, v11);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for DataField(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DataField(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DataField()
{
  return &type metadata for DataField;
}

uint64_t destroy for DataPoint.SeriesKey(uint64_t a1)
{
  sub_21F7656A8(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DataPoint.SeriesKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_21F7652C0(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DataPoint.SeriesKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  sub_21F7652C0(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  sub_21F7656A8(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for DataPoint.SeriesKey(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  sub_21F7656A8(v5, v6, v7);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for DataPoint.SeriesKey(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DataPoint.SeriesKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DataPoint.SeriesKey()
{
  return &type metadata for DataPoint.SeriesKey;
}

uint64_t destroy for DataPoint(uint64_t a1)
{
  sub_21F7656A8(*(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
  swift_bridgeObjectRelease();
  sub_21F770E38(*(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
  sub_21F7656A8(*(void *)(a1 + 88), *(void *)(a1 + 96), *(unsigned char *)(a1 + 104));
  swift_bridgeObjectRelease();
  sub_21F770E38(*(void *)(a1 + 120), *(void *)(a1 + 128), *(unsigned char *)(a1 + 136));
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DataPoint(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_21F7652C0(v4, v5, v6);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  char v9 = *(unsigned char *)(a2 + 56);
  swift_bridgeObjectRetain();
  sub_21F770E44(v7, v8, v9);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 56) = v9;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v10 = *(void *)(a2 + 88);
  uint64_t v11 = *(void *)(a2 + 96);
  char v12 = *(unsigned char *)(a2 + 104);
  sub_21F7652C0(v10, v11, v12);
  *(void *)(a1 + 88) = v10;
  *(void *)(a1 + 96) = v11;
  *(unsigned char *)(a1 + 104) = v12;
  uint64_t v13 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  uint64_t v14 = *(void *)(a2 + 128);
  char v15 = *(unsigned char *)(a2 + 136);
  swift_bridgeObjectRetain();
  sub_21F770E44(v13, v14, v15);
  *(void *)(a1 + 120) = v13;
  *(void *)(a1 + 128) = v14;
  *(unsigned char *)(a1 + 136) = v15;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  uint64_t v16 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v16;
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DataPoint(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_21F7652C0(v4, v5, v6);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  char v9 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  sub_21F7656A8(v7, v8, v9);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 48);
  char v12 = *(unsigned char *)(a2 + 56);
  sub_21F770E44(v10, v11, v12);
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v11;
  char v15 = *(unsigned char *)(a1 + 56);
  *(unsigned char *)(a1 + 56) = v12;
  sub_21F770E38(v13, v14, v15);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v16 = *(void *)(a2 + 88);
  uint64_t v17 = *(void *)(a2 + 96);
  char v18 = *(unsigned char *)(a2 + 104);
  sub_21F7652C0(v16, v17, v18);
  uint64_t v19 = *(void *)(a1 + 88);
  uint64_t v20 = *(void *)(a1 + 96);
  char v21 = *(unsigned char *)(a1 + 104);
  *(void *)(a1 + 88) = v16;
  *(void *)(a1 + 96) = v17;
  *(unsigned char *)(a1 + 104) = v18;
  sub_21F7656A8(v19, v20, v21);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = *(void *)(a2 + 120);
  uint64_t v23 = *(void *)(a2 + 128);
  char v24 = *(unsigned char *)(a2 + 136);
  sub_21F770E44(v22, v23, v24);
  uint64_t v25 = *(void *)(a1 + 120);
  uint64_t v26 = *(void *)(a1 + 128);
  *(void *)(a1 + 120) = v22;
  *(void *)(a1 + 128) = v23;
  char v27 = *(unsigned char *)(a1 + 136);
  *(unsigned char *)(a1 + 136) = v24;
  sub_21F770E38(v25, v26, v27);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  return a1;
}

__n128 initializeWithTake for DataPoint(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[10];
  *(unsigned char *)(a1 + 176) = *((unsigned char *)a2 + 176);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for DataPoint(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  char v7 = *(unsigned char *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = v4;
  sub_21F7656A8(v5, v6, v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  char v8 = *(unsigned char *)(a2 + 56);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  char v11 = *(unsigned char *)(a1 + 56);
  *(unsigned char *)(a1 + 56) = v8;
  sub_21F770E38(v9, v10, v11);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  char v12 = *(unsigned char *)(a2 + 104);
  uint64_t v13 = *(void *)(a1 + 88);
  uint64_t v14 = *(void *)(a1 + 96);
  char v15 = *(unsigned char *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = v12;
  sub_21F7656A8(v13, v14, v15);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  char v16 = *(unsigned char *)(a2 + 136);
  uint64_t v17 = *(void *)(a1 + 120);
  uint64_t v18 = *(void *)(a1 + 128);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  char v19 = *(unsigned char *)(a1 + 136);
  *(unsigned char *)(a1 + 136) = v16;
  sub_21F770E38(v17, v18, v19);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  return a1;
}

uint64_t getEnumTagSinglePayload for DataPoint(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 177)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DataPoint(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 176) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 177) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 177) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DataPoint()
{
  return &type metadata for DataPoint;
}

unint64_t sub_21F898974()
{
  unint64_t result = qword_26AD46860;
  if (!qword_26AD46860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD46860);
  }
  return result;
}

unint64_t sub_21F8989CC()
{
  unint64_t result = qword_267EE80C8;
  if (!qword_267EE80C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE80C8);
  }
  return result;
}

uint64_t AxisGridLine.init(centered:stroke:snapToPixel:pixelOffset:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, double a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t result = sub_21F898AC4(a2, (uint64_t)v15);
  double v12 = a4;
  if (a5) {
    double v12 = 0.0;
  }
  long long v13 = v15[1];
  *(_OWORD *)(a6 + 24) = v15[0];
  uint64_t v14 = v16;
  *(unsigned char *)a6 = a1;
  *(void *)(a6 + 8) = 0;
  *(unsigned char *)(a6 + 16) = -1;
  *(_OWORD *)(a6 + 40) = v13;
  *(void *)(a6 + 56) = v14;
  *(unsigned char *)(a6 + 64) = 1;
  *(unsigned char *)(a6 + 65) = a3 & 1;
  *(double *)(a6 + 72) = v12;
  return result;
}

uint64_t sub_21F898AC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21F76CA40(&qword_26AD46870);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double AxisGridLine.init(centered:stroke:)@<D0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_21F898AC4(a2, (uint64_t)v8);
  uint64_t v5 = v9;
  *(unsigned char *)a3 = a1;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = -1;
  double result = *(double *)v8;
  long long v7 = v8[1];
  *(_OWORD *)(a3 + 24) = v8[0];
  *(_OWORD *)(a3 + 40) = v7;
  *(void *)(a3 + 56) = v5;
  *(_WORD *)(a3 + 64) = 1;
  *(void *)(a3 + 72) = 0;
  return result;
}

uint64_t static AxisGridLine._renderAxisMark(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 56);
  char v6 = *(unsigned char *)(a1 + 64);
  char v7 = *(unsigned char *)(a1 + 65);
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v9 = *a2;
  v12[0] = *(unsigned char *)a1;
  uint64_t v13 = v3;
  char v14 = v4;
  long long v15 = *(_OWORD *)(a1 + 24);
  long long v16 = *(_OWORD *)(a1 + 40);
  uint64_t v17 = v5;
  char v18 = v6;
  char v19 = v7;
  uint64_t v20 = v8;
  uint64_t v11 = v9;
  return static AxisTick._renderAxisMark(_:_:)(v12, &v11, a3);
}

uint64_t sub_21F898C14@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 56);
  char v6 = *(unsigned char *)(a1 + 64);
  char v7 = *(unsigned char *)(a1 + 65);
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v9 = *a2;
  v12[0] = *(unsigned char *)a1;
  uint64_t v13 = v3;
  char v14 = v4;
  long long v15 = *(_OWORD *)(a1 + 24);
  long long v16 = *(_OWORD *)(a1 + 40);
  uint64_t v17 = v5;
  char v18 = v6;
  char v19 = v7;
  uint64_t v20 = v8;
  uint64_t v11 = v9;
  return static AxisTick._renderAxisMark(_:_:)(v12, &v11, a3);
}

uint64_t destroy for AxisGridLine()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AxisGridLine(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AxisGridLine(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t assignWithTake for AxisGridLine(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for AxisGridLine(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AxisGridLine(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 0;
    }
    if (a2) {
      *(void *)(result + 48) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AxisGridLine()
{
  return &type metadata for AxisGridLine;
}

uint64_t sub_21F898F00(uint64_t result, uint64_t (*a2)(unint64_t, uint64_t))
{
  unint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = result + 32;
    unint64_t v5 = *(void *)(result + 16);
    while (1)
    {
      unint64_t v6 = v3 + (v5 >> 1);
      if (__OFADD__(v3, v5 >> 1)) {
        break;
      }
      if (v6 >= v2) {
        goto LABEL_15;
      }
      uint64_t v7 = *(void *)(v4 + 8 * v6);
      swift_bridgeObjectRetain();
      char v8 = a2(v3 + (v5 >> 1), v7);
      double result = swift_bridgeObjectRelease();
      if (v8) {
        v5 >>= 1;
      }
      else {
        v5 += ~(v5 >> 1);
      }
      if ((v8 & 1) == 0) {
        unint64_t v3 = v6 + 1;
      }
      if ((uint64_t)v5 <= 0) {
        return v3;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t sub_21F898FD0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  int64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_25:
    __break(1u);
    return result;
  }
  if (v6 >= 1)
  {
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v9 = v5;
    while (1)
    {
      uint64_t v10 = v9 - ((unint64_t)v6 >> 1);
      if (__OFADD__(v9, -(uint64_t)((unint64_t)v6 >> 1))) {
        break;
      }
      uint64_t v11 = v10 - 1;
      if (__OFSUB__(v10, 1)) {
        goto LABEL_23;
      }
      if (v11 < a3 || v11 >= v5) {
        goto LABEL_24;
      }
      uint64_t v13 = *(void *)(a2 + 8 * v11);
      swift_bridgeObjectRetain();
      char v14 = a5(v11, v13);
      uint64_t result = swift_bridgeObjectRelease();
      if (v14) {
        uint64_t v6 = (unint64_t)v6 >> 1;
      }
      else {
        v6 += ~((unint64_t)v6 >> 1);
      }
      if ((v14 & 1) == 0) {
        uint64_t v9 = v11;
      }
      if (v6 <= 0)
      {
        swift_unknownObjectRelease();
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v9 = a4 >> 1;
LABEL_19:
  if (v9 > a3) {
    return v9 - 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_21F8990E4(uint64_t a1)
{
  if ((*(unsigned char *)(v1
                 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_fixedTimeInterval
                 + 8) & 1) == 0)
  {
    double v6 = *(double *)(v1
                   + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_fixedTimeInterval);
    sub_21FA23FE0();
    double v8 = v7;
    uint64_t result = sub_21FA23FE0();
    double v10 = floor((v8 - v9) / v6);
    if ((~*(void *)&v10 & 0x7FF0000000000000) != 0)
    {
      if (v10 > -9.22337204e18)
      {
        if (v10 < 9.22337204e18) {
          return (uint64_t)v10;
        }
        goto LABEL_23;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t result = sub_21F89AF0C(v1 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_component, v1 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_anchor, a1);
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_stride);
    if (result < 0)
    {
      if (!v4)
      {
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      if (result == 0x8000000000000000 && v4 == -1) {
        goto LABEL_28;
      }
      uint64_t v12 = result / v4 * v4;
      BOOL v13 = __OFSUB__(v12, v4);
      uint64_t v5 = v12 - v4;
      if (v13)
      {
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      goto LABEL_16;
    }
    if (v4)
    {
      uint64_t v5 = result / v4 * v4;
LABEL_16:
      if (v5 != 0x8000000000000000 || v4 != -1) {
        return v5 / v4;
      }
      goto LABEL_25;
    }
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_29:
  __break(1u);
  return result;
}

void sub_21F899234(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v67 = a2;
  uint64_t v4 = sub_21F76CA40(&qword_26AD47A98);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v65 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  double v8 = (char *)&v59 - v7;
  uint64_t v9 = sub_21F76CA40(&qword_26AD4A490);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  char v14 = (char *)&v59 - v13;
  uint64_t v66 = sub_21F76CA40((uint64_t *)&unk_26AD4A5E0);
  MEMORY[0x270FA5388](v66);
  uint64_t v68 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_21FA241F0();
  uint64_t v70 = *(void **)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v64 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v59 - v19;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v59 - v22;
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&v59 - v25;
  char v27 = *(unsigned char *)(v2
                 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_fixedTimeInterval
                 + 8);
  uint64_t v69 = v9;
  if ((v27 & 1) == 0)
  {
    sub_21FA23FE0();
    if (!__OFADD__(a1, 1))
    {
      sub_21FA23FE0();
      sub_21FA23FD0();
      sub_21FA23FD0();
      sub_21F89F694((unint64_t *)&qword_26AD46C28, MEMORY[0x263F07490]);
      if (sub_21FA25C70())
      {
        uint64_t v51 = (uint64_t)&v14[*(int *)(v9 + 48)];
        uint64_t v52 = v70;
        uint64_t v53 = (void (*)(char *, char *, uint64_t))v70[4];
        v53(v14, v26, v16);
        uint64_t v54 = v51;
        uint64_t v65 = (char *)v51;
        v53((char *)v51, v23, v16);
        uint64_t v55 = &v11[*(int *)(v9 + 48)];
        uint64_t v56 = (void (*)(char *, char *, uint64_t))v52[2];
        v56(v11, v14, v16);
        v56(v55, (char *)v54, v16);
        uint64_t v49 = (uint64_t)v68;
        v53(v68, v11, v16);
        char v57 = (void (*)(char *, uint64_t))v52[1];
        v57(v55, v16);
        uint64_t v58 = &v11[*(int *)(v69 + 48)];
        v53(v11, v14, v16);
        v53(v58, v65, v16);
        v53((char *)(v49 + *(int *)(v66 + 36)), v58, v16);
        v57(v11, v16);
        goto LABEL_12;
      }
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  uint64_t v28 = v11;
  uint64_t v29 = *(void *)(v2 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_stride);
  if ((unsigned __int128)(a1 * (__int128)v29) >> 64 != (a1 * v29) >> 63)
  {
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v59 = v14;
  uint64_t v60 = v28;
  uint64_t v30 = *(void *)(v2 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_cache);
  uint64_t v31 = v2 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_anchor;
  uint64_t v61 = v2 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_component;
  uint64_t v62 = v30;
  uint64_t v63 = a1;
  sub_21F89B3EC(v2 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_component, a1 * v29, v2 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_anchor, (uint64_t)v8);
  char v32 = v70;
  uint64_t v33 = (unsigned int (*)(char *, uint64_t, uint64_t))v70[6];
  if (v33(v8, 1, v16) == 1)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v34 = (void (*)(char *, char *, uint64_t))v32[4];
  v34(v20, v8, v16);
  uint64_t v35 = v63 + 1;
  if (__OFADD__(v63, 1)) {
    goto LABEL_15;
  }
  uint64_t v36 = v35 * v29;
  if ((unsigned __int128)(v35 * (__int128)v29) >> 64 != (v35 * v29) >> 63)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v37 = (uint64_t)v65;
  sub_21F89B3EC(v61, v36, v31, (uint64_t)v65);
  if (v33((char *)v37, 1, v16) != 1)
  {
    char v38 = v64;
    v34(v64, (char *)v37, v16);
    sub_21F89F694((unint64_t *)&qword_26AD46C28, MEMORY[0x263F07490]);
    char v39 = sub_21FA25C70();
    char v40 = v60;
    uint64_t v41 = v69;
    if (v39)
    {
      unint64_t v42 = v59;
      uint64_t v43 = (uint64_t)&v59[*(int *)(v69 + 48)];
      v34(v59, v20, v16);
      uint64_t v65 = (char *)v43;
      v34((char *)v43, v38, v16);
      uint64_t v44 = &v40[*(int *)(v41 + 48)];
      uint64_t v45 = v70;
      uint64_t v46 = (void (*)(char *, char *, uint64_t))v70[2];
      v46(v40, v42, v16);
      v46(v44, (char *)v43, v16);
      v34(v68, v40, v16);
      uint64_t v47 = (void (*)(char *, uint64_t))v45[1];
      char v48 = v44;
      uint64_t v49 = (uint64_t)v68;
      v47(v48, v16);
      uint64_t v50 = &v40[*(int *)(v69 + 48)];
      v34(v40, v42, v16);
      v34(v50, v65, v16);
      v34((char *)(v49 + *(int *)(v66 + 36)), v50, v16);
      v47(v40, v16);
LABEL_12:
      sub_21F76C9DC(v49, v67, (uint64_t *)&unk_26AD4A5E0);
      return;
    }
    goto LABEL_18;
  }
LABEL_20:
  __break(1u);
}

void sub_21F899948(uint64_t a1)
{
  uint64_t v2 = sub_21F76CA40((uint64_t *)&unk_26AD4A5E0);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v14 - v6;
  type metadata accessor for CalendarBinningUnit(0);
  uint64_t v8 = sub_21F8990E4(a1);
  uint64_t v9 = sub_21F8990E4(a1 + *(int *)(v2 + 36));
  sub_21F899234(v8, (uint64_t)v7);
  sub_21F899234(v9, (uint64_t)v4);
  uint64_t v10 = v9 - v8;
  if (__OFSUB__(v9, v8))
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v11 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    return;
  }
  if ((sub_21FA241A0() & 1) != 0 && __OFSUB__(v11--, 1)) {
    goto LABEL_10;
  }
  char v13 = sub_21FA241A0();
  sub_21F76CA84((uint64_t)v4, (uint64_t *)&unk_26AD4A5E0);
  sub_21F76CA84((uint64_t)v7, (uint64_t *)&unk_26AD4A5E0);
  if ((v13 & 1) != 0 && __OFSUB__(v11, 1)) {
    goto LABEL_11;
  }
}

uint64_t sub_21F899AB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v38 = sub_21F76CA40(&qword_26AD4A490);
  MEMORY[0x270FA5388](v38);
  uint64_t v37 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v34 - v5;
  uint64_t v7 = sub_21FA241F0();
  uint64_t v8 = *(void **)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_21F76CA40((uint64_t *)&unk_26AD4A5E0);
  MEMORY[0x270FA5388](v11);
  uint64_t v36 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v34 - v14;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v34 - v17;
  type metadata accessor for CalendarBinningUnit(0);
  uint64_t v19 = sub_21F8990E4(a1);
  sub_21F899234(v19, (uint64_t)v18);
  uint64_t v35 = v11;
  char v20 = sub_21FA241A0();
  uint64_t v21 = (void (*)(char *, uint64_t, uint64_t))v8[2];
  v21(v10, a1, v7);
  sub_21F8A0360((uint64_t)v18, (uint64_t)v15);
  if (v20)
  {
    sub_21F76CA84((uint64_t)v15, (uint64_t *)&unk_26AD4A5E0);
    uint64_t v22 = (void (*)(char *, uint64_t))v8[1];
    v22(v10, v7);
  }
  else
  {
    char v23 = sub_21FA241A0();
    sub_21F76CA84((uint64_t)v15, (uint64_t *)&unk_26AD4A5E0);
    uint64_t v22 = (void (*)(char *, uint64_t))v8[1];
    v22(v10, v7);
    if ((v23 & 1) == 0) {
      return sub_21F76C9DC((uint64_t)v18, v39, (uint64_t *)&unk_26AD4A5E0);
    }
  }
  sub_21F89F694((unint64_t *)&qword_26AD46C28, MEMORY[0x263F07490]);
  char v24 = sub_21FA25C70();
  uint64_t result = sub_21F76CA84((uint64_t)v18, (uint64_t *)&unk_26AD4A5E0);
  if (v24)
  {
    uint64_t v26 = v38;
    char v27 = &v6[*(int *)(v38 + 48)];
    v21(v6, a1, v7);
    uint64_t v34 = v27;
    v21(v27, a1, v7);
    uint64_t v28 = v22;
    uint64_t v29 = v37;
    uint64_t v30 = &v37[*(int *)(v26 + 48)];
    v21(v37, (uint64_t)v6, v7);
    v21(v30, (uint64_t)v27, v7);
    uint64_t v31 = (void (*)(char *, char *, uint64_t))v8[4];
    char v32 = v36;
    v31(v36, v29, v7);
    v28(v30, v7);
    uint64_t v33 = &v29[*(int *)(v26 + 48)];
    v31(v29, v6, v7);
    v31(v33, v34, v7);
    v31(&v32[*(int *)(v35 + 36)], v33, v7);
    v28(v29, v7);
    uint64_t v18 = v32;
    return sub_21F76C9DC((uint64_t)v18, v39, (uint64_t *)&unk_26AD4A5E0);
  }
  __break(1u);
  return result;
}

uint64_t sub_21F899F04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v61 = a3;
  uint64_t v58 = sub_21F76CA40(&qword_26AD4A490);
  MEMORY[0x270FA5388](v58);
  uint64_t v56 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v54 = (char *)&v50 - v8;
  uint64_t v9 = sub_21FA241F0();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v50 - v14;
  uint64_t v16 = sub_21F76CA40((uint64_t *)&unk_26AD4A5E0);
  MEMORY[0x270FA5388](v16);
  uint64_t v52 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v53 = (uint64_t)&v50 - v19;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v50 - v21;
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v50 - v24;
  sub_21F899AB8(a1, (uint64_t)&v50 - v24);
  uint64_t v26 = a1 + *(int *)(v16 + 36);
  uint64_t v27 = (uint64_t)v22;
  uint64_t v55 = v3;
  sub_21F899AB8(v26, (uint64_t)v22);
  uint64_t v60 = v10;
  uint64_t v57 = a2;
  if (a2)
  {
    uint64_t v28 = v16;
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v29(v15, v25, v9);
  }
  else
  {
    uint64_t v28 = v16;
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v29(v15, &v25[*(int *)(v16 + 36)], v9);
  }
  uint64_t v30 = v27;
  if (v61) {
    uint64_t v30 = v27 + *(int *)(v28 + 36);
  }
  uint64_t v59 = v27;
  uint64_t v31 = v60;
  v29(v12, (char *)v30, v9);
  sub_21F89F694((unint64_t *)&qword_26AD46C28, MEMORY[0x263F07490]);
  char v32 = v12;
  if (sub_21FA25C50())
  {
    uint64_t v33 = *(void (**)(char *, uint64_t))(v31 + 8);
    v33(v12, v9);
    v33(v15, v9);
    sub_21F76CA84(v59, (uint64_t *)&unk_26AD4A5E0);
    sub_21F76CA84((uint64_t)v25, (uint64_t *)&unk_26AD4A5E0);
    return (v61 & 1) + (v57 & 1);
  }
  uint64_t result = sub_21FA25C70();
  if ((result & 1) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v61 = (uint64_t)v25;
  uint64_t v35 = v58;
  uint64_t v36 = v54;
  uint64_t v37 = &v54[*(int *)(v58 + 48)];
  uint64_t v51 = v15;
  v29(v54, v15, v9);
  uint64_t v38 = v37;
  uint64_t v50 = v32;
  v29(v37, v32, v9);
  uint64_t v39 = *(int *)(v35 + 48);
  char v40 = v56;
  uint64_t v41 = &v56[v39];
  v29(v56, v36, v9);
  v29(v41, v37, v9);
  uint64_t v42 = v60;
  uint64_t v57 = v28;
  uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v60 + 32);
  uint64_t v44 = (uint64_t)v52;
  v43(v52, v40, v9);
  uint64_t v45 = *(void (**)(char *, uint64_t))(v42 + 8);
  v45(v41, v9);
  uint64_t v46 = &v40[*(int *)(v58 + 48)];
  v43(v40, v36, v9);
  v43(v46, v38, v9);
  v43((char *)(v44 + *(int *)(v57 + 36)), v46, v9);
  v45(v40, v9);
  uint64_t v47 = v53;
  sub_21F76C9DC(v44, v53, (uint64_t *)&unk_26AD4A5E0);
  sub_21F899948(v47);
  uint64_t v49 = v48;
  sub_21F76CA84(v47, (uint64_t *)&unk_26AD4A5E0);
  v45(v50, v9);
  v45(v51, v9);
  sub_21F76CA84(v59, (uint64_t *)&unk_26AD4A5E0);
  sub_21F76CA84(v61, (uint64_t *)&unk_26AD4A5E0);
  uint64_t result = v49 + 1;
  if (__OFADD__(v49, 1)) {
LABEL_12:
  }
    __break(1u);
  return result;
}

uint64_t sub_21F89A468()
{
  sub_21F76CA40((uint64_t *)&unk_26AD4A5E0);
  sub_21FA23FE0();
  double v2 = v1;
  uint64_t result = sub_21FA23FE0();
  double v5 = v2 - v4;
  double v6 = ceil((v2 - v4)/ *(double *)(v0+ OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_durationBounds+ 8));
  if ((~*(void *)&v6 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v6 <= -9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v6 >= 9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  double v7 = ceil(v5/ *(double *)(v0 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_durationBounds))+ 1.0;
  if ((~*(void *)&v7 & 0x7FF0000000000000) == 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t result = (uint64_t)v6;
  if ((uint64_t)v7 < (uint64_t)v6) {
LABEL_15:
  }
    __break(1u);
  return result;
}

uint64_t sub_21F89A588(uint64_t a1, char a2, char a3)
{
  uint64_t result = sub_21F89A468();
  if (a2 & 1) != 0 || (a3) {
    goto LABEL_7;
  }
  BOOL v7 = __OFSUB__(result--, 1);
  if (v7)
  {
    __break(1u);
    goto LABEL_12;
  }
  BOOL v7 = __OFADD__(v6++, 1);
  if (v7)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v6 >= result) {
    return result;
  }
  __break(1u);
LABEL_7:
  BOOL v7 = __OFADD__(result++, 1);
  if (v7)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v8 < result) {
LABEL_15:
  }
    __break(1u);
  return result;
}

uint64_t sub_21F89A614(uint64_t a1)
{
  v28[1] = a1;
  uint64_t v2 = sub_21FA241F0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  double v5 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v28 - v7;
  uint64_t v9 = sub_21FA24310();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CalendarCache.Key(0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F8A0750(v1, (uint64_t)v15, type metadata accessor for CalendarCache.Key);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v25 = &v15[*(int *)(sub_21F76CA40(&qword_26AD458A0) + 48)];
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v25, v2);
    sub_21FA26A10();
    sub_21F89F694(&qword_26AD46A90, MEMORY[0x263F07908]);
    sub_21FA25B70();
    sub_21F89F694(&qword_26AD45888, MEMORY[0x263F07490]);
LABEL_6:
    sub_21FA25B70();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v26 = &v15[*(int *)(sub_21F76CA40(qword_26AD43EB8) + 64)];
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v26, v2);
    sub_21FA26A10();
    sub_21F89F694(&qword_26AD46A90, MEMORY[0x263F07908]);
    sub_21FA25B70();
    sub_21FA26A10();
    sub_21F89F694(&qword_26AD45888, MEMORY[0x263F07490]);
    goto LABEL_6;
  }
  uint64_t v17 = sub_21F76CA40(&qword_26AD43EB0);
  uint64_t v18 = &v15[*(int *)(v17 + 48)];
  uint64_t v19 = &v15[*(int *)(v17 + 64)];
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
  uint64_t v20 = v8;
  v28[0] = v8;
  uint64_t v21 = v3;
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v22(v20, v18, v2);
  v22(v5, v19, v2);
  sub_21FA26A10();
  sub_21F89F694(&qword_26AD46A90, MEMORY[0x263F07908]);
  sub_21FA25B70();
  sub_21F89F694(&qword_26AD45888, MEMORY[0x263F07490]);
  uint64_t v23 = (char *)v28[0];
  sub_21FA25B70();
  sub_21FA25B70();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v21 + 8);
  v24(v5, v2);
  v24(v23, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_21F89AB8C()
{
  sub_21FA26A00();
  sub_21F89A614((uint64_t)v1);
  return sub_21FA26A50();
}

uint64_t sub_21F89ABD0()
{
  sub_21FA26A00();
  sub_21F89A614((uint64_t)v1);
  return sub_21FA26A50();
}

uint64_t sub_21F89AC10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for CalendarCache.Key(0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = &v20[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for CalendarCache.Value(0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = &v20[-v14];
  uint64_t v16 = &v9[*(int *)(sub_21F76CA40(&qword_26AD458A0) + 48)];
  uint64_t v17 = sub_21FA24310();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v9, a1, v17);
  uint64_t v18 = sub_21FA241F0();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, a2, v18);
  swift_storeEnumTagMultiPayload();
  uint64_t v21 = v3;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  swift_beginAccess();
  sub_21F89F724((uint64_t)v15, (uint64_t)v9, 0, (void (*)(void))sub_21F8A0810);
  swift_endAccess();
  sub_21F89E614((uint64_t)v9, type metadata accessor for CalendarCache.Key);
  sub_21F8A0750((uint64_t)v15, (uint64_t)v12, type metadata accessor for CalendarCache.Value);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    sub_21F89E614((uint64_t)v15, type metadata accessor for CalendarCache.Value);
    return sub_21F76C9DC((uint64_t)v12, a3, &qword_26AD45870);
  }
  else
  {
    uint64_t result = sub_21F89E614((uint64_t)v12, type metadata accessor for CalendarCache.Value);
    __break(1u);
  }
  return result;
}

uint64_t sub_21F89AEAC()
{
  sub_21FA24250();
  type metadata accessor for CalendarCache.Value(0);

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_21F89AF0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = a3;
  uint64_t v23 = a2;
  uint64_t v4 = type metadata accessor for CalendarCache.Key(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for CalendarCache.Value(0);
  MEMORY[0x270FA5388](v26);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v23 - v10;
  uint64_t v12 = sub_21F76CA40(&qword_26AD43EB0);
  uint64_t v13 = &v6[*(int *)(v12 + 48)];
  uint64_t v14 = &v6[*(int *)(v12 + 64)];
  uint64_t v15 = sub_21FA24310();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v6, a1, v15);
  uint64_t v16 = sub_21FA241F0();
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16);
  uint64_t v18 = v13;
  uint64_t v19 = v23;
  v17(v18, v23, v16);
  uint64_t v20 = v14;
  uint64_t v21 = v24;
  v17(v20, v24, v16);
  swift_storeEnumTagMultiPayload();
  uint64_t v27 = v25;
  uint64_t v28 = a1;
  uint64_t v29 = v19;
  uint64_t v30 = v21;
  swift_beginAccess();
  sub_21F89F724((uint64_t)v11, (uint64_t)v6, 0, (void (*)(void))sub_21F8A0828);
  swift_endAccess();
  sub_21F89E614((uint64_t)v6, type metadata accessor for CalendarCache.Key);
  sub_21F8A0750((uint64_t)v11, (uint64_t)v8, type metadata accessor for CalendarCache.Value);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_21F89E614((uint64_t)v11, type metadata accessor for CalendarCache.Value);
    return *(void *)v8;
  }
  else
  {
    uint64_t result = sub_21F89E614((uint64_t)v8, type metadata accessor for CalendarCache.Value);
    __break(1u);
  }
  return result;
}

uint64_t sub_21F89B1CC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  v17[0] = a2;
  v17[1] = a3;
  uint64_t v6 = sub_21FA23F20();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F76CA40(&qword_26AD46B48);
  uint64_t v10 = sub_21FA24310();
  uint64_t v11 = *(void *)(v10 - 8);
  unint64_t v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_21FA28550;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 16))(v13 + v12, a1, v10);
  sub_21F9F52D0(v13);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_21FA24270();
  swift_bridgeObjectRelease();
  uint64_t v14 = sub_21FA23EF0();
  LOBYTE(a1) = v15;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *(void *)a4 = v14;
  *(unsigned char *)(a4 + 8) = a1 & 1;
  type metadata accessor for CalendarCache.Value(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_21F89B3EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v22 = a4;
  uint64_t v8 = type metadata accessor for CalendarCache.Key(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for CalendarCache.Value(0);
  MEMORY[0x270FA5388](v23);
  unint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  char v15 = (char *)&v22 - v14;
  uint64_t v16 = sub_21F76CA40(qword_26AD43EB8);
  uint64_t v17 = *(int *)(v16 + 48);
  uint64_t v18 = &v10[*(int *)(v16 + 64)];
  uint64_t v19 = sub_21FA24310();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v10, a1, v19);
  *(void *)&v10[v17] = a2;
  uint64_t v20 = sub_21FA241F0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v18, a3, v20);
  swift_storeEnumTagMultiPayload();
  uint64_t v24 = v4;
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  swift_beginAccess();
  sub_21F89F724((uint64_t)v15, (uint64_t)v10, 0, (void (*)(void))sub_21F8A081C);
  swift_endAccess();
  sub_21F89E614((uint64_t)v10, type metadata accessor for CalendarCache.Key);
  sub_21F8A0750((uint64_t)v15, (uint64_t)v12, type metadata accessor for CalendarCache.Value);
  if (swift_getEnumCaseMultiPayload())
  {
    uint64_t result = sub_21F89E614((uint64_t)v12, type metadata accessor for CalendarCache.Value);
    __break(1u);
  }
  else
  {
    sub_21F89E614((uint64_t)v15, type metadata accessor for CalendarCache.Value);
    return sub_21F76C9DC((uint64_t)v12, v22, &qword_26AD47A98);
  }
  return result;
}

uint64_t sub_21F89B690()
{
  sub_21FA242D0();
  type metadata accessor for CalendarCache.Value(0);

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_21F89B6F8()
{
  uint64_t v0 = MEMORY[0x263F8EE78];
  unint64_t v1 = sub_21F932C98(MEMORY[0x263F8EE78]);
  sub_21F76CA40(qword_26AD46488);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_21FA2BC70;
  *(void *)(v2 + 32) = v0;
  *(void *)(v2 + 40) = -1;
  *(void *)(v2 + 48) = -1;
  *(void *)(v2 + 56) = v1;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  pthread_key_create((pthread_key_t *)(v2 + 16), (void (__cdecl *)(void *))sub_21F9BF44C);
  swift_endAccess();
  uint64_t result = swift_bridgeObjectRelease();
  off_26AD463F8 = (_UNKNOWN *)v2;
  return result;
}

uint64_t sub_21F89B7BC(uint64_t a1)
{
  uint64_t v2 = sub_21FA24320();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))(v6, a1, v2, v4);
  type metadata accessor for CalendarCache(0);
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = (void *)(v7 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893713CalendarCache_cache);
  uint64_t v9 = MEMORY[0x263F8EE78];
  unint64_t v10 = sub_21F9333A4(MEMORY[0x263F8EE78]);
  *uint64_t v8 = 64;
  v8[1] = v9;
  _OWORD v8[2] = -1;
  v8[3] = -1;
  _OWORD v8[4] = v10;
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v7 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893713CalendarCache_calendar, v6, v2);
  return v7;
}

uint64_t sub_21F89B8F8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893713CalendarCache_calendar;
  uint64_t v2 = sub_21FA24320();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_21F89B9B8()
{
  return type metadata accessor for CalendarCache(0);
}

uint64_t type metadata accessor for CalendarCache(uint64_t a1)
{
  return sub_21F769038(a1, (uint64_t *)&unk_26AD45AB0);
}

uint64_t sub_21F89B9E0()
{
  uint64_t result = sub_21FA24320();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_21F89BA78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v113 = a3;
  uint64_t v100 = sub_21FA24230();
  uint64_t v99 = *(void *)(v100 - 8);
  MEMORY[0x270FA5388](v100);
  uint64_t v97 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v98 = (char *)&v96 - v10;
  uint64_t v11 = sub_21FA24310();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v108 = (char *)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_21F76CA40(&qword_26AD45870);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v102 = (uint64_t)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_21F76CA40(&qword_26AD47A98);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v107 = (char *)&v96 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = sub_21FA241F0();
  uint64_t v18 = *(void *)(v110 - 8);
  MEMORY[0x270FA5388](v110);
  uint64_t v103 = (char *)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v106 = (char *)&v96 - v21;
  uint64_t v22 = sub_21FA24320();
  uint64_t v23 = *(void *)(v22 - 8);
  __n128 v24 = MEMORY[0x270FA5388](v22);
  uint64_t v26 = (uint64_t *)((char *)&v96 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v114 = v11;
  uint64_t v105 = v12 + 16;
  uint64_t v104 = v27;
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v27)(v4 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_component, a1, v11, v24);
  uint64_t v117 = a2;
  uint64_t v118 = v22;
  uint64_t v119 = v4;
  *(void *)(v4 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_stride) = a2;
  (*(void (**)(void *, uint64_t, uint64_t))(v23 + 16))(v26, a4, v22);
  uint64_t v112 = a4;
  uint64_t v120 = a4;
  if (qword_26AD46400 != -1) {
    swift_once();
  }
  uint64_t v111 = v18;
  uint64_t v115 = v12;
  uint64_t v116 = a1;
  uint64_t v28 = (char *)off_26AD463F8;
  uint64_t v29 = (pthread_key_t *)((char *)off_26AD463F8 + 16);
  swift_beginAccess();
  pthread_key_t v30 = *((void *)v28 + 2);
  swift_retain();
  uint64_t v31 = pthread_getspecific(v30);
  if (!v31)
  {
    uint64_t v31 = (_OWORD *)swift_slowAlloc();
    pthread_setspecific(*((void *)v28 + 2), v31);
    uint64_t v125 = sub_21F76CA40(&qword_26AD46510);
    uint64_t v32 = swift_allocObject();
    *(void *)&long long v123 = v32;
    uint64_t v33 = *((void *)v28 + 4);
    uint64_t v34 = *((void *)v28 + 7);
    long long v35 = *(_OWORD *)(v28 + 40);
    *(void *)(v32 + 16) = *((void *)v28 + 3);
    *(void *)(v32 + 24) = v33;
    *(_OWORD *)(v32 + 32) = v35;
    *(void *)(v32 + 48) = v34;
    sub_21F8A0800(&v123, v31);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  sub_21F83E3D8((uint64_t)v31, (uint64_t)&v121);
  uint64_t v36 = sub_21F76CA40(&qword_26AD46510);
  swift_dynamicCast();
  sub_21F91A7B4((uint64_t *)&v121, v26, 0, &v123, sub_21F8A07B8);
  uint64_t v37 = v121;
  uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
  uint64_t v109 = v23 + 8;
  uint64_t v101 = v38;
  v38((uint64_t)v26, v118);
  long long v39 = v123;
  uint64_t v40 = v125;
  uint64_t v41 = v124;
  uint64_t v42 = v126;
  uint64_t v43 = pthread_getspecific(*v29);
  if (!v43)
  {
    uint64_t v43 = (_OWORD *)swift_slowAlloc();
    pthread_setspecific(*((void *)v28 + 2), v43);
    uint64_t v122 = v36;
    uint64_t v44 = swift_allocObject();
    *(void *)&long long v121 = v44;
    uint64_t v45 = v41;
    uint64_t v46 = *((void *)v28 + 3);
    uint64_t v47 = *((void *)v28 + 4);
    uint64_t v96 = v40;
    uint64_t v48 = v42;
    uint64_t v49 = *((void *)v28 + 7);
    long long v50 = *(_OWORD *)(v28 + 40);
    *(void *)(v44 + 16) = v46;
    *(void *)(v44 + 24) = v47;
    *(_OWORD *)(v44 + 32) = v50;
    *(void *)(v44 + 48) = v49;
    sub_21F8A0800(&v121, v43);
    uint64_t v41 = v45;
    swift_bridgeObjectRetain();
    uint64_t v42 = v48;
    uint64_t v40 = v96;
    swift_bridgeObjectRetain();
  }
  uint64_t v122 = v36;
  uint64_t v51 = swift_allocObject();
  *(void *)&long long v121 = v51;
  *(_OWORD *)(v51 + 16) = v39;
  *(void *)(v51 + 32) = v41;
  *(void *)(v51 + 40) = v40;
  *(void *)(v51 + 48) = v42;
  _s6Charts15AnyChartContentVwxx_0((uint64_t)v43);
  sub_21F8A0800(&v121, v43);
  swift_release();
  *(void *)(v119 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_cache) = v37;
  swift_retain();
  uint64_t v52 = v102;
  uint64_t v53 = v116;
  uint64_t v54 = v113;
  sub_21F89AC10(v116, v113, v102);
  swift_release();
  uint64_t v55 = sub_21FA23EA0();
  uint64_t v56 = *(void *)(v55 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v52, 1, v55) == 1)
  {
    sub_21F76CA84(v52, &qword_26AD45870);
    uint64_t v57 = 1;
    uint64_t v59 = v114;
    uint64_t v58 = v115;
    uint64_t v60 = v111;
    uint64_t v61 = v110;
    uint64_t v62 = (uint64_t)v107;
  }
  else
  {
    uint64_t v62 = (uint64_t)v107;
    sub_21FA23E90();
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v52, v55);
    uint64_t v57 = 0;
    uint64_t v59 = v114;
    uint64_t v58 = v115;
    uint64_t v60 = v111;
    uint64_t v61 = v110;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56))(v62, v57, 1, v61);
  uint64_t v63 = v103;
  (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v103, v54, v61);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v62, 1, v61) == 1)
  {
    uint64_t v64 = v63;
    uint64_t v65 = *(void (**)(char *, char *, uint64_t))(v60 + 32);
    uint64_t v66 = (v60 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    uint64_t v67 = v106;
    v65(v106, v64, v61);
    sub_21F76CA84(v62, &qword_26AD47A98);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v60 + 8))(v63, v61);
    uint64_t v65 = *(void (**)(char *, char *, uint64_t))(v60 + 32);
    uint64_t v66 = (v60 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    uint64_t v67 = v106;
    v65(v106, (char *)v62, v61);
  }
  v65((char *)(v119 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_anchor), v67, v61);
  uint64_t v68 = v108;
  v104(v108, v53, v59);
  int v69 = (*(uint64_t (**)(char *, uint64_t))(v58 + 88))(v68, v59);
  if (v69 != *MEMORY[0x263F078A0])
  {
    if (v69 != *MEMORY[0x263F078A8])
    {
      if (v69 == *MEMORY[0x263F07870])
      {
        v101(v112, v118);
        (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v54, v61);
        int v73 = (*(uint64_t (**)(uint64_t, uint64_t))(v58 + 8))(v53, v59);
        uint64_t v81 = v119 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_fixedTimeInterval;
        *(void *)(v119
                  + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_fixedTimeInterval) = 0;
        char v82 = 1;
        double v74 = 79200.0;
        double v75 = 93600.0;
        goto LABEL_26;
      }
      if (v69 == *MEMORY[0x263F07890])
      {
        v101(v112, v118);
        (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v54, v61);
        int v73 = (*(uint64_t (**)(uint64_t, uint64_t))(v58 + 8))(v53, v59);
        char v82 = 0;
        uint64_t v83 = v117;
        double v88 = (double)v117;
        double v89 = 3600.0;
      }
      else
      {
        if (v69 != *MEMORY[0x263F078C0])
        {
          if (v69 == *MEMORY[0x263F078C8])
          {
            v101(v112, v118);
            (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v54, v61);
            int v73 = (*(uint64_t (**)(uint64_t, uint64_t))(v58 + 8))(v53, v59);
            char v82 = 0;
            uint64_t v83 = v117;
            uint64_t v81 = v119
                + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_fixedTimeInterval;
            *(double *)(v119
                      + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_fixedTimeInterval) = (double)v117;
            double v75 = 1.0;
            double v74 = 1.0;
            goto LABEL_27;
          }
          if (v69 == *MEMORY[0x263F07830])
          {
            v101(v112, v118);
            (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v54, v61);
            int v73 = (*(uint64_t (**)(uint64_t, uint64_t))(v58 + 8))(v53, v59);
            uint64_t v81 = v119
                + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_fixedTimeInterval;
            *(void *)(v119
                      + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_fixedTimeInterval) = 0;
            char v82 = 1;
            double v75 = 604800.0;
            double v74 = 604800.0;
            goto LABEL_26;
          }
          uint64_t result = sub_21FA266E0();
          __break(1u);
          return result;
        }
        v101(v112, v118);
        (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v54, v61);
        int v73 = (*(uint64_t (**)(uint64_t, uint64_t))(v58 + 8))(v53, v59);
        char v82 = 0;
        uint64_t v83 = v117;
        double v88 = (double)v117;
        double v89 = 60.0;
      }
      double v75 = v89;
      double v90 = v88 * v89;
      uint64_t v81 = v119 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_fixedTimeInterval;
      *(double *)(v119
                + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_fixedTimeInterval) = v90;
      double v74 = v75;
      goto LABEL_27;
    }
    unint64_t v78 = v97;
    uint64_t v79 = v112;
    sub_21FA24240();
    v101(v79, v118);
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v54, v61);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v53, v59);
    uint64_t v66 = v99;
    uint64_t v80 = v78;
    uint64_t v68 = (char *)v100;
    int v73 = (*(uint64_t (**)(char *, uint64_t))(v99 + 88))(v80, v100);
    double v74 = 2412000.0;
    double v75 = 2685600.0;
    if (v73 == *MEMORY[0x263F07740] || v73 == *MEMORY[0x263F07728]) {
      goto LABEL_25;
    }
    if (v73 == *MEMORY[0x263F07708]) {
      goto LABEL_23;
    }
    double v74 = 424800.0;
    double v75 = 2599200.0;
    if (v73 == *MEMORY[0x263F076F0] || v73 == *MEMORY[0x263F076E8] || v73 == *MEMORY[0x263F076E0]) {
      goto LABEL_25;
    }
    if (v73 == *MEMORY[0x263F076F8])
    {
LABEL_23:
      double v74 = 2498400.0;
      uint64_t v77 = 0x4143D49000000000;
      goto LABEL_24;
    }
    if (v73 == *MEMORY[0x263F07718]) {
      goto LABEL_46;
    }
    if (v73 == *MEMORY[0x263F07700])
    {
      uint64_t v93 = 0xB87000000000;
    }
    else
    {
      double v74 = 2498400.0;
      double v75 = 2599200.0;
      if (v73 == *MEMORY[0x263F07710] || v73 == *MEMORY[0x263F076C0]) {
        goto LABEL_25;
      }
      if (v73 == *MEMORY[0x263F07730])
      {
LABEL_46:
        uint64_t v91 = 0x414266F000000000;
LABEL_58:
        double v74 = *(double *)&v91;
        uint64_t v77 = 0x41447D5000000000;
        goto LABEL_24;
      }
      if (v73 != *MEMORY[0x263F07720]) {
        goto LABEL_74;
      }
      uint64_t v93 = 0xFB000000000;
    }
    uint64_t v91 = v93 & 0xFFFFFFFFFFFFLL | 0x4143000000000000;
    goto LABEL_58;
  }
  uint64_t v70 = v98;
  uint64_t v71 = v112;
  sub_21FA24240();
  v101(v71, v118);
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v54, v61);
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v53, v59);
  uint64_t v66 = v99;
  char v72 = v70;
  uint64_t v68 = (char *)v100;
  int v73 = (*(uint64_t (**)(char *, uint64_t))(v99 + 88))(v72, v100);
  double v74 = 31532400.0;
  double v75 = 31622400.0;
  if (v73 == *MEMORY[0x263F07740] || v73 == *MEMORY[0x263F07728]) {
    goto LABEL_25;
  }
  if (v73 == *MEMORY[0x263F07708])
  {
    uint64_t v76 = 0x2A4F00000000;
LABEL_18:
    *(void *)&double v74 = v76 & 0xFFFFFFFFFFFFLL | 0x417D000000000000;
    uint64_t v77 = 0x417FB91800000000;
    goto LABEL_24;
  }
  double v74 = 31532400.0;
  double v75 = 31622400.0;
  if (v73 == *MEMORY[0x263F076F0] || v73 == *MEMORY[0x263F076E8] || v73 == *MEMORY[0x263F076E0]) {
    goto LABEL_25;
  }
  if (v73 == *MEMORY[0x263F076F8])
  {
    uint64_t v76 = 0x153700000000;
    goto LABEL_18;
  }
  double v74 = 31532400.0;
  double v75 = 31622400.0;
  if (v73 == *MEMORY[0x263F07718] || v73 == *MEMORY[0x263F07700]) {
    goto LABEL_25;
  }
  if (v73 == *MEMORY[0x263F07710])
  {
    uint64_t v92 = 0x161800000000;
LABEL_61:
    *(void *)&double v74 = v92 & 0xFFFFFFFFFFFFLL | 0x417D000000000000;
    uint64_t v77 = 0x417D412900000000;
    goto LABEL_24;
  }
  if (v73 == *MEMORY[0x263F076C0]) {
    goto LABEL_60;
  }
  double v74 = 31532400.0;
  double v75 = 31622400.0;
  if (v73 == *MEMORY[0x263F07730] || v73 == *MEMORY[0x263F07720] || v73 == *MEMORY[0x263F076D0]) {
    goto LABEL_25;
  }
  if (v73 == *MEMORY[0x263F076C8])
  {
LABEL_60:
    uint64_t v92 = 0x2A4F00000000;
    goto LABEL_61;
  }
  if (v73 != *MEMORY[0x263F076D8])
  {
    char v95 = *(uint64_t (**)(char *, char *, double, double))(v66 + 8);
    v66 += 8;
    int v73 = v95(v98, v68, 31532400.0, 31622400.0);
    uint64_t v76 = 0x161800000000;
    goto LABEL_18;
  }
  double v74 = 30582000.0;
  uint64_t v77 = 0x417D556000000000;
LABEL_24:
  double v75 = *(double *)&v77;
LABEL_25:
  while (1)
  {
    uint64_t v81 = v119 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_fixedTimeInterval;
    *(void *)(v119 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_fixedTimeInterval) = 0;
    char v82 = 1;
LABEL_26:
    uint64_t v83 = v117;
LABEL_27:
    *(unsigned char *)(v81 + 8) = v82;
    double v84 = v74 * (double)v83;
    double v85 = v75 * (double)v83;
    if (v84 <= v85) {
      break;
    }
    __break(1u);
LABEL_74:
    if (v73 == *MEMORY[0x263F076D0]) {
      goto LABEL_46;
    }
    double v74 = 2498400.0;
    double v75 = 2599200.0;
    if (v73 != *MEMORY[0x263F076C8] && v73 != *MEMORY[0x263F076D8])
    {
      uint64_t v94 = *(uint64_t (**)(char *, char *, double, double))(v66 + 8);
      v66 += 8;
      int v73 = v94(v97, v68, 2498400.0, 2599200.0);
      goto LABEL_46;
    }
  }
  uint64_t result = v119;
  long long v87 = (double *)(v119 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_durationBounds);
  double *v87 = v84;
  v87[1] = v85;
  return result;
}

uint64_t sub_21F89CC48()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_component;
  uint64_t v2 = sub_21FA24310();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC6ChartsP33_AC55519798C41102105C995519A2893719CalendarBinningImpl_anchor;
  uint64_t v4 = sub_21FA241F0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_21F89CD3C()
{
  return type metadata accessor for CalendarBinningImpl(0);
}

uint64_t type metadata accessor for CalendarBinningImpl(uint64_t a1)
{
  return sub_21F769038(a1, (uint64_t *)&unk_26AD45D30);
}

uint64_t sub_21F89CD64()
{
  uint64_t result = sub_21FA24310();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_21FA241F0();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

uint64_t *sub_21F89CE58(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v12 = sub_21FA23EA0();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12))
      {
        uint64_t v14 = sub_21F76CA40(&qword_26AD45870);
        memcpy(a1, a2, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v13 + 16))(a1, a2, v12);
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
      }
      goto LABEL_13;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v8 = sub_21FA241F0();
      uint64_t v9 = *(void *)(v8 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
      {
        uint64_t v10 = sub_21F76CA40(&qword_26AD47A98);
        memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, v8);
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
      }
LABEL_13:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(v6 + 64));
  }
  return a1;
}

uint64_t sub_21F89D0F4(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    uint64_t v3 = sub_21FA23EA0();
  }
  else
  {
    if (result) {
      return result;
    }
    uint64_t v3 = sub_21FA241F0();
  }
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v3);
  if (!result)
  {
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(a1, v4);
  }
  return result;
}

void *sub_21F89D1E0(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v10 = sub_21FA23EA0();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10))
    {
      uint64_t v12 = sub_21F76CA40(&qword_26AD45870);
      memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(a1, a2, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
    }
    goto LABEL_11;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = sub_21FA241F0();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_21F76CA40(&qword_26AD47A98);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
LABEL_11:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

void *sub_21F89D438(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_21F89E614((uint64_t)a1, type metadata accessor for CalendarCache.Value);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v10 = sub_21FA23EA0();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10))
      {
        uint64_t v12 = sub_21F76CA40(&qword_26AD45870);
        memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(a1, a2, v10);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
      }
      goto LABEL_12;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v7 = sub_21FA241F0();
      uint64_t v8 = *(void *)(v7 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        uint64_t v9 = sub_21F76CA40(&qword_26AD47A98);
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v7);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
LABEL_12:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t type metadata accessor for CalendarCache.Value(uint64_t a1)
{
  return sub_21F769038(a1, qword_26AD45A20);
}

void *sub_21F89D6D4(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v10 = sub_21FA23EA0();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10))
    {
      uint64_t v12 = sub_21F76CA40(&qword_26AD45870);
      memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(a1, a2, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
    }
    goto LABEL_11;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = sub_21FA241F0();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_21F76CA40(&qword_26AD47A98);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
LABEL_11:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

void *sub_21F89D92C(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_21F89E614((uint64_t)a1, type metadata accessor for CalendarCache.Value);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v10 = sub_21FA23EA0();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10))
      {
        uint64_t v12 = sub_21F76CA40(&qword_26AD45870);
        memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(a1, a2, v10);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
      }
      goto LABEL_12;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v7 = sub_21FA241F0();
      uint64_t v8 = *(void *)(v7 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        uint64_t v9 = sub_21F76CA40(&qword_26AD47A98);
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v7);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
LABEL_12:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void sub_21F89DBB0()
{
  sub_21F89DCB4(319, &qword_26AD45890, MEMORY[0x263F07490]);
  if (v0 <= 0x3F)
  {
    sub_21F89DCB4(319, &qword_26AD45878, MEMORY[0x263F062D0]);
    if (v1 <= 0x3F) {
      swift_initEnumMetadataMultiPayload();
    }
  }
}

void sub_21F89DCB4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_21FA26340();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

char *sub_21F89DD08(char *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *(void *)a1 = *a2;
    a1 = (char *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v15 = sub_21FA24310();
      (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v15 - 8) + 16))(a1, a2, v15);
      uint64_t v16 = sub_21F76CA40(qword_26AD43EB8);
      *(void *)&a1[*(int *)(v16 + 48)] = *(uint64_t *)((char *)a2 + *(int *)(v16 + 48));
      uint64_t v17 = *(int *)(v16 + 64);
      uint64_t v18 = &a1[v17];
      uint64_t v19 = (char *)a2 + v17;
      uint64_t v20 = sub_21FA241F0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = sub_21FA24310();
      (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      uint64_t v8 = sub_21F76CA40(&qword_26AD43EB0);
      uint64_t v9 = *(int *)(v8 + 48);
      uint64_t v10 = &a1[v9];
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = sub_21FA241F0();
      uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
      v13(v10, v11, v12);
      v13(&a1[*(int *)(v8 + 64)], (char *)a2 + *(int *)(v8 + 64), v12);
    }
    else
    {
      uint64_t v21 = sub_21FA24310();
      (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v21 - 8) + 16))(a1, a2, v21);
      uint64_t v22 = *(int *)(sub_21F76CA40(&qword_26AD458A0) + 48);
      uint64_t v23 = &a1[v22];
      __n128 v24 = (char *)a2 + v22;
      uint64_t v25 = sub_21FA241F0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_21F89DFD0(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    uint64_t v5 = sub_21FA24310();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
    uint64_t v4 = *(int *)(sub_21F76CA40(qword_26AD43EB8) + 64);
  }
  else
  {
    if (result == 1)
    {
      uint64_t v11 = sub_21FA24310();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
      uint64_t v12 = sub_21F76CA40(&qword_26AD43EB0);
      uint64_t v13 = a1 + *(int *)(v12 + 48);
      uint64_t v14 = sub_21FA241F0();
      uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8);
      ((void (*)(void *__return_ptr, uint64_t, uint64_t))v15)((void *)(v14 - 8), v13, v14);
      uint64_t v10 = a1 + *(int *)(v12 + 64);
      uint64_t v9 = v14;
      uint64_t v8 = v15;
      goto LABEL_8;
    }
    if (result) {
      return result;
    }
    uint64_t v3 = sub_21FA24310();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
    uint64_t v4 = *(int *)(sub_21F76CA40(&qword_26AD458A0) + 48);
  }
  uint64_t v6 = a1 + v4;
  uint64_t v7 = sub_21FA241F0();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  uint64_t v9 = v7;
  uint64_t v10 = v6;
LABEL_8:

  return v8(v10, v9);
}

uint64_t sub_21F89E1B0(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v12 = sub_21FA24310();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
    uint64_t v13 = sub_21F76CA40(qword_26AD43EB8);
    *(void *)(a1 + *(int *)(v13 + 48)) = *(void *)(a2 + *(int *)(v13 + 48));
    uint64_t v14 = *(int *)(v13 + 64);
LABEL_6:
    uint64_t v16 = a1 + v14;
    uint64_t v17 = a2 + v14;
    uint64_t v18 = sub_21FA241F0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v15 = sub_21FA24310();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(a1, a2, v15);
    uint64_t v14 = *(int *)(sub_21F76CA40(&qword_26AD458A0) + 48);
    goto LABEL_6;
  }
  uint64_t v5 = sub_21FA24310();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
  uint64_t v6 = sub_21F76CA40(&qword_26AD43EB0);
  uint64_t v7 = *(int *)(v6 + 48);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_21FA241F0();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  v11(v8, v9, v10);
  v11(a1 + *(int *)(v6 + 64), a2 + *(int *)(v6 + 64), v10);
LABEL_7:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_21F89E3D0(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_21F89E614(a1, type metadata accessor for CalendarCache.Key);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v12 = sub_21FA24310();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
      uint64_t v13 = sub_21F76CA40(qword_26AD43EB8);
      *(void *)(a1 + *(int *)(v13 + 48)) = *(void *)(a2 + *(int *)(v13 + 48));
      uint64_t v14 = *(int *)(v13 + 64);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v5 = sub_21FA24310();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
        uint64_t v6 = sub_21F76CA40(&qword_26AD43EB0);
        uint64_t v7 = *(int *)(v6 + 48);
        uint64_t v8 = a1 + v7;
        uint64_t v9 = a2 + v7;
        uint64_t v10 = sub_21FA241F0();
        uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
        v11(v8, v9, v10);
        v11(a1 + *(int *)(v6 + 64), a2 + *(int *)(v6 + 64), v10);
LABEL_8:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      uint64_t v15 = sub_21FA24310();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(a1, a2, v15);
      uint64_t v14 = *(int *)(sub_21F76CA40(&qword_26AD458A0) + 48);
    }
    uint64_t v16 = a1 + v14;
    uint64_t v17 = a2 + v14;
    uint64_t v18 = sub_21FA241F0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    goto LABEL_8;
  }
  return a1;
}

uint64_t sub_21F89E614(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for CalendarCache.Key(uint64_t a1)
{
  return sub_21F769038(a1, qword_26AD45968);
}

uint64_t sub_21F89E694(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v12 = sub_21FA24310();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
    uint64_t v13 = sub_21F76CA40(qword_26AD43EB8);
    *(void *)(a1 + *(int *)(v13 + 48)) = *(void *)(a2 + *(int *)(v13 + 48));
    uint64_t v14 = *(int *)(v13 + 64);
LABEL_6:
    uint64_t v16 = a1 + v14;
    uint64_t v17 = a2 + v14;
    uint64_t v18 = sub_21FA241F0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v15 = sub_21FA24310();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(a1, a2, v15);
    uint64_t v14 = *(int *)(sub_21F76CA40(&qword_26AD458A0) + 48);
    goto LABEL_6;
  }
  uint64_t v5 = sub_21FA24310();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
  uint64_t v6 = sub_21F76CA40(&qword_26AD43EB0);
  uint64_t v7 = *(int *)(v6 + 48);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_21FA241F0();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v11(a1 + *(int *)(v6 + 64), a2 + *(int *)(v6 + 64), v10);
LABEL_7:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_21F89E8B4(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_21F89E614(a1, type metadata accessor for CalendarCache.Key);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v12 = sub_21FA24310();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
      uint64_t v13 = sub_21F76CA40(qword_26AD43EB8);
      *(void *)(a1 + *(int *)(v13 + 48)) = *(void *)(a2 + *(int *)(v13 + 48));
      uint64_t v14 = *(int *)(v13 + 64);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v5 = sub_21FA24310();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
        uint64_t v6 = sub_21F76CA40(&qword_26AD43EB0);
        uint64_t v7 = *(int *)(v6 + 48);
        uint64_t v8 = a1 + v7;
        uint64_t v9 = a2 + v7;
        uint64_t v10 = sub_21FA241F0();
        uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);
        v11(v8, v9, v10);
        v11(a1 + *(int *)(v6 + 64), a2 + *(int *)(v6 + 64), v10);
LABEL_8:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      uint64_t v15 = sub_21FA24310();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(a1, a2, v15);
      uint64_t v14 = *(int *)(sub_21F76CA40(&qword_26AD458A0) + 48);
    }
    uint64_t v16 = a1 + v14;
    uint64_t v17 = a2 + v14;
    uint64_t v18 = sub_21FA241F0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
    goto LABEL_8;
  }
  return a1;
}

uint64_t sub_21F89EAF8()
{
  uint64_t result = sub_21FA24310();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_21FA241F0();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      uint64_t v6 = &v5;
      swift_getTupleTypeLayout3();
      uint64_t v7 = &v4;
      swift_getTupleTypeLayout3();
      uint64_t v8 = &v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_21F89EC18(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = sub_21FA24310();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_21FA241F0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[7];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = sub_21FA24320();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  }
  swift_retain();
  return a1;
}

uint64_t sub_21F89ED84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21FA24310();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = sub_21FA241F0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + *(int *)(a2 + 28);
  uint64_t v8 = sub_21FA24320();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);

  return swift_release();
}

uint64_t sub_21F89EE80(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_21FA24310();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_21FA241F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_21FA24320();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_retain();
  return a1;
}

uint64_t sub_21F89EFA0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_21FA24310();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_21FA241F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_21FA24320();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_21F89F0D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_21FA24310();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_21FA241F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_21FA24320();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_21F89F1EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_21FA24310();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_21FA241F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_21FA24320();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_release();
  return a1;
}

uint64_t sub_21F89F310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F89F324);
}

uint64_t sub_21F89F324(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_21FA24310();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_21FA241F0();
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[6];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = sub_21FA24320();
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[7];
    goto LABEL_7;
  }
  unint64_t v16 = *(void *)(a1 + a3[8]);
  if (v16 >= 0xFFFFFFFF) {
    LODWORD(v16) = -1;
  }
  return (v16 + 1);
}

uint64_t sub_21F89F484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F89F498);
}

uint64_t sub_21F89F498(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_21FA24310();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = sub_21FA241F0();
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[6];
    }
    else
    {
      uint64_t result = sub_21FA24320();
      if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
      {
        *(void *)(a1 + a4[8]) = (a2 - 1);
        return result;
      }
      uint64_t v10 = result;
      uint64_t v14 = *(void *)(result - 8);
      uint64_t v15 = a4[7];
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t sub_21F89F5F4()
{
  return sub_21F89F694((unint64_t *)&qword_26AD46C28, MEMORY[0x263F07490]);
}

uint64_t sub_21F89F63C(uint64_t a1)
{
  uint64_t result = sub_21F89F694(&qword_267EE80D0, (void (*)(uint64_t))type metadata accessor for CalendarBinningUnit);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21F89F694(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21F89F6DC()
{
  return sub_21F89F694(qword_26AD45938, (void (*)(uint64_t))type metadata accessor for CalendarCache.Key);
}

size_t sub_21F89F724(uint64_t a1, uint64_t a2, char a3, void (*a4)(void))
{
  uint64_t v5 = v4;
  uint64_t v10 = *(void *)(v4 + 32);
  if (*(void *)(v10 + 16)
    && (unint64_t v11 = sub_21F9157C0(a2), (v12 & 1) != 0)
    && (unint64_t v13 = *(void *)(*(void *)(v10 + 56) + 8 * v11), (v13 & 0x8000000000000000) == 0))
  {
    uint64_t v14 = *(void **)(v5 + 8);
    if (v13 == *(void *)(v5 + 16)) {
      goto LABEL_7;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v5 + 8) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_12;
    }
    while (1)
    {
      uint64_t v16 = v14[2];
      uint64_t v17 = *(void *)(sub_21F76CA40(&qword_26AD46280) - 8);
      v20[0] = (uint64_t)v14
             + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
      v20[1] = v16;
      sub_21F94E3F4(v20, v13, v5);
      *(void *)(v5 + 8) = v14;
LABEL_7:
      if (v13 < v14[2]) {
        break;
      }
      __break(1u);
LABEL_12:
      uint64_t v14 = (void *)sub_21F9352B4(v14);
      *(void *)(v5 + 8) = v14;
    }
    uint64_t v18 = sub_21F76CA40(&qword_26AD46280);
    sub_21F8A0750((uint64_t)v14+ ((*(unsigned __int8 *)(*(void *)(v18 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v18 - 8) + 80))+ *(void *)(*(void *)(v18 - 8) + 72) * v13+ *(int *)(v18 + 52), a1, type metadata accessor for CalendarCache.Value);
  }
  else
  {
    a4();
    return sub_21F9196D0(a1, a2, a3 & 1);
  }
  return v13;
}

uint64_t sub_21F89F8F8(uint64_t a1, uint64_t a2)
{
  uint64_t v124 = (char *)a1;
  uint64_t v125 = (char *)a2;
  uint64_t v2 = sub_21FA241F0();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v122 = v2;
  uint64_t v123 = v3;
  MEMORY[0x270FA5388](v2);
  uint64_t v116 = (char *)&v114 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v119 = (char *)&v114 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v118 = (char *)&v114 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v114 = (char *)&v114 - v10;
  MEMORY[0x270FA5388](v11);
  uint64_t v120 = (char *)&v114 - v12;
  MEMORY[0x270FA5388](v13);
  long long v121 = (char *)&v114 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v114 - v16;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v114 - v19;
  uint64_t v21 = sub_21FA24310();
  uint64_t v126 = *(void *)(v21 - 8);
  uint64_t v127 = v21;
  MEMORY[0x270FA5388](v21);
  uint64_t v115 = (char *)&v114 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v117 = (char *)&v114 - v24;
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v114 - v26;
  uint64_t v28 = type metadata accessor for CalendarCache.Key(0);
  MEMORY[0x270FA5388](v28);
  pthread_key_t v30 = (char *)&v114 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  uint64_t v33 = (char *)&v114 - v32;
  MEMORY[0x270FA5388](v34);
  uint64_t v36 = (char *)&v114 - v35;
  uint64_t v37 = sub_21F76CA40(&qword_26AD459E8);
  MEMORY[0x270FA5388](v37 - 8);
  long long v39 = (char *)&v114 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = (uint64_t)&v39[*(int *)(v40 + 56)];
  sub_21F8A0750((uint64_t)v124, (uint64_t)v39, type metadata accessor for CalendarCache.Key);
  sub_21F8A0750((uint64_t)v125, v41, type metadata accessor for CalendarCache.Key);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v125 = v17;
    uint64_t v72 = (uint64_t)v20;
    sub_21F8A0750((uint64_t)v39, (uint64_t)v36, type metadata accessor for CalendarCache.Key);
    uint64_t v73 = *(int *)(sub_21F76CA40(&qword_26AD458A0) + 48);
    double v74 = &v36[v73];
    if (!swift_getEnumCaseMultiPayload())
    {
      long long v121 = (char *)(v41 + v73);
      uint64_t v99 = v126;
      uint64_t v98 = v127;
      (*(void (**)(char *, uint64_t, uint64_t))(v126 + 32))(v27, v41, v127);
      uint64_t v100 = v123;
      uint64_t v101 = *(void (**)(uint64_t, char *, uint64_t))(v123 + 32);
      uint64_t v102 = v72;
      uint64_t v124 = (char *)v72;
      uint64_t v103 = v122;
      v101(v102, v74, v122);
      uint64_t v104 = (uint64_t)v125;
      v101((uint64_t)v125, v121, v103);
      char v105 = sub_21FA24300();
      uint64_t v106 = *(void (**)(char *, uint64_t))(v99 + 8);
      v106(v36, v98);
      if (v105)
      {
        uint64_t v107 = (uint64_t)v124;
        char v70 = sub_21FA241A0();
        uint64_t v108 = *(void (**)(uint64_t, uint64_t))(v100 + 8);
        v108(v104, v103);
        v108(v107, v103);
        v106(v27, v127);
        goto LABEL_18;
      }
      uint64_t v111 = *(void (**)(uint64_t, uint64_t))(v100 + 8);
      v111(v104, v103);
      v111((uint64_t)v124, v103);
      v106(v27, v98);
      goto LABEL_25;
    }
    (*(void (**)(char *, uint64_t))(v123 + 8))(&v36[v73], v122);
LABEL_15:
    (*(void (**)(char *, uint64_t))(v126 + 8))(v36, v127);
    sub_21F76CA84((uint64_t)v39, &qword_26AD459E8);
LABEL_26:
    char v70 = 0;
    return v70 & 1;
  }
  if (EnumCaseMultiPayload != 1)
  {
    sub_21F8A0750((uint64_t)v39, (uint64_t)v30, type metadata accessor for CalendarCache.Key);
    uint64_t v75 = sub_21F76CA40(qword_26AD43EB8);
    uint64_t v76 = *(int *)(v75 + 48);
    uint64_t v77 = *(void *)&v30[v76];
    uint64_t v78 = *(int *)(v75 + 64);
    uint64_t v79 = &v30[v78];
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      long long v121 = *(char **)(v41 + v76);
      uint64_t v124 = (char *)v77;
      uint64_t v125 = (char *)(v41 + v78);
      uint64_t v81 = v126;
      uint64_t v80 = v127;
      char v82 = v115;
      (*(void (**)(char *, uint64_t, uint64_t))(v126 + 32))(v115, v41, v127);
      uint64_t v83 = v123;
      double v84 = *(void (**)(char *, char *, uint64_t))(v123 + 32);
      double v85 = v79;
      uint64_t v86 = v122;
      v84(v119, v85, v122);
      long long v87 = v116;
      v84(v116, v125, v86);
      double v88 = v82;
      char v89 = sub_21FA24300();
      double v90 = *(void (**)(char *, uint64_t))(v81 + 8);
      uint64_t v91 = v30;
      uint64_t v92 = v80;
      v90(v91, v80);
      if (v89)
      {
        if (v124 == v121)
        {
          uint64_t v93 = v119;
          uint64_t v94 = v116;
          char v70 = sub_21FA241A0();
          char v95 = *(void (**)(char *, uint64_t))(v83 + 8);
          v95(v94, v86);
          v95(v93, v86);
          v90(v115, v92);
          goto LABEL_18;
        }
        uint64_t v110 = *(void (**)(char *, uint64_t))(v83 + 8);
        v110(v116, v86);
      }
      else
      {
        uint64_t v110 = *(void (**)(char *, uint64_t))(v83 + 8);
        v110(v87, v86);
      }
      v110(v119, v86);
      v90(v88, v80);
      goto LABEL_25;
    }
    (*(void (**)(char *, uint64_t))(v123 + 8))(&v30[v78], v122);
    uint64_t v36 = v30;
    goto LABEL_15;
  }
  sub_21F8A0750((uint64_t)v39, (uint64_t)v33, type metadata accessor for CalendarCache.Key);
  uint64_t v43 = sub_21F76CA40(&qword_26AD43EB0);
  uint64_t v44 = *(int *)(v43 + 48);
  uint64_t v45 = *(int *)(v43 + 64);
  uint64_t v46 = &v33[v45];
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v96 = v122;
    uint64_t v97 = *(void (**)(char *, uint64_t))(v123 + 8);
    v97(&v33[v45], v122);
    v97(&v33[v44], v96);
    uint64_t v36 = v33;
    goto LABEL_15;
  }
  uint64_t v47 = (char *)(v41 + v44);
  uint64_t v125 = (char *)(v41 + v45);
  uint64_t v48 = &v33[v44];
  uint64_t v49 = v126;
  long long v50 = v117;
  (*(void (**)(char *, uint64_t, uint64_t))(v126 + 32))(v117, v41, v127);
  uint64_t v51 = v123;
  uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v123 + 32);
  uint64_t v53 = v48;
  uint64_t v54 = v122;
  v52(v121, v53, v122);
  v52(v120, v46, v54);
  uint64_t v55 = v114;
  v52(v114, v47, v54);
  uint64_t v56 = v118;
  v52(v118, v125, v54);
  uint64_t v57 = v50;
  char v58 = sub_21FA24300();
  uint64_t v61 = *(void (**)(char *, uint64_t))(v49 + 8);
  uint64_t v59 = v49 + 8;
  uint64_t v60 = v61;
  uint64_t v62 = v33;
  uint64_t v63 = v127;
  v61(v62, v127);
  if ((v58 & 1) == 0)
  {
    uint64_t v109 = *(void (**)(char *, uint64_t))(v51 + 8);
    v109(v56, v54);
    v109(v55, v54);
    v109(v120, v54);
    v109(v121, v54);
    v60(v57, v63);
LABEL_25:
    sub_21F89E614((uint64_t)v39, type metadata accessor for CalendarCache.Key);
    goto LABEL_26;
  }
  uint64_t v64 = v51;
  uint64_t v65 = v63;
  uint64_t v126 = v59;
  uint64_t v66 = v121;
  if ((sub_21FA241A0() & 1) == 0)
  {
    uint64_t v112 = *(void (**)(char *, uint64_t))(v51 + 8);
    v112(v118, v54);
    v112(v55, v54);
    v112(v120, v54);
    v112(v66, v54);
    v60(v117, v65);
    goto LABEL_25;
  }
  uint64_t v67 = v55;
  uint64_t v68 = v120;
  int v69 = v118;
  char v70 = sub_21FA241A0();
  uint64_t v71 = *(void (**)(char *, uint64_t))(v64 + 8);
  v71(v69, v54);
  v71(v67, v54);
  v71(v68, v54);
  v71(v66, v54);
  v60(v117, v127);
LABEL_18:
  sub_21F89E614((uint64_t)v39, type metadata accessor for CalendarCache.Key);
  return v70 & 1;
}

uint64_t sub_21F8A0360(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21F76CA40((uint64_t *)&unk_26AD4A5E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21F8A03C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CalendarBinningUnit(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v29 = (uint64_t)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v28 - v7;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v28 - v10;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v28 - v13;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v28 - v16;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v28 - v19;
  char v21 = sub_21FA24300();
  sub_21F8A0750(a1, (uint64_t)v20, type metadata accessor for CalendarBinningUnit);
  sub_21F8A0750(a2, (uint64_t)v17, type metadata accessor for CalendarBinningUnit);
  if ((v21 & 1) == 0)
  {
    sub_21F89E614((uint64_t)v17, type metadata accessor for CalendarBinningUnit);
    sub_21F89E614((uint64_t)v20, type metadata accessor for CalendarBinningUnit);
    sub_21F8A0750(a1, (uint64_t)v14, type metadata accessor for CalendarBinningUnit);
    sub_21F8A0750(a2, (uint64_t)v11, type metadata accessor for CalendarBinningUnit);
    goto LABEL_6;
  }
  uint64_t v22 = *(void *)&v20[*(int *)(v4 + 20)];
  sub_21F89E614((uint64_t)v20, type metadata accessor for CalendarBinningUnit);
  uint64_t v23 = *(void *)&v17[*(int *)(v4 + 20)];
  sub_21F89E614((uint64_t)v17, type metadata accessor for CalendarBinningUnit);
  sub_21F8A0750(a1, (uint64_t)v14, type metadata accessor for CalendarBinningUnit);
  sub_21F8A0750(a2, (uint64_t)v11, type metadata accessor for CalendarBinningUnit);
  if (v22 != v23)
  {
LABEL_6:
    sub_21F89E614((uint64_t)v11, type metadata accessor for CalendarBinningUnit);
    sub_21F89E614((uint64_t)v14, type metadata accessor for CalendarBinningUnit);
    sub_21F8A0750(a1, (uint64_t)v8, type metadata accessor for CalendarBinningUnit);
    uint64_t v25 = v29;
    sub_21F8A0750(a2, v29, type metadata accessor for CalendarBinningUnit);
    goto LABEL_7;
  }
  char v24 = sub_21FA241A0();
  sub_21F89E614((uint64_t)v11, type metadata accessor for CalendarBinningUnit);
  sub_21F89E614((uint64_t)v14, type metadata accessor for CalendarBinningUnit);
  sub_21F8A0750(a1, (uint64_t)v8, type metadata accessor for CalendarBinningUnit);
  uint64_t v25 = v29;
  sub_21F8A0750(a2, v29, type metadata accessor for CalendarBinningUnit);
  if ((v24 & 1) == 0)
  {
LABEL_7:
    char v26 = 0;
    goto LABEL_8;
  }
  char v26 = MEMORY[0x223C53700](&v8[*(int *)(v4 + 28)], v25 + *(int *)(v4 + 28));
LABEL_8:
  sub_21F89E614(v25, type metadata accessor for CalendarBinningUnit);
  sub_21F89E614((uint64_t)v8, type metadata accessor for CalendarBinningUnit);
  return v26 & 1;
}

uint64_t sub_21F8A0750(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_21F8A07B8()
{
  return sub_21F89B7BC(*(void *)(v0 + 16));
}

uint64_t sub_21F8A07C0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

_OWORD *sub_21F8A0800(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_21F8A0810()
{
  return sub_21F89AEAC();
}

uint64_t sub_21F8A081C()
{
  return sub_21F89B690();
}

uint64_t sub_21F8A0828@<X0>(uint64_t a1@<X8>)
{
  return sub_21F89B1CC(v1[3], v1[4], v1[5], a1);
}

uint64_t sub_21F8A0834(uint64_t a1, uint64_t a2)
{
  uint64_t v714 = sub_21FA24320();
  uint64_t v712 = *(void *)(v714 - 8);
  MEMORY[0x270FA5388](v714);
  v708 = (char *)&v690 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  v713 = (char *)&v690 - v6;
  uint64_t v7 = sub_21FA24310();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v715 = (unint64_t)&v690 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v690 - v11;
  uint64_t v13 = sub_21F76CA40(&qword_26AD45870);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v690 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_21F76CA40(&qword_26AD47A98);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v690 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_21FA241F0();
  uint64_t v710 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  v706 = (char *)&v690 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v690 - v22;
  MEMORY[0x270FA5388](v24);
  char v26 = (char *)&v690 - v25;
  __n128 v28 = MEMORY[0x270FA5388](v27);
  v694 = (char *)&v690 - v29;
  pthread_key_t v30 = *(void (**)(char *))(v8 + 104);
  unsigned int v695 = *MEMORY[0x263F078A0];
  uint64_t v703 = v8 + 104;
  v702 = v30;
  ((void (*)(char *, __n128))v30)(v12, v28);
  uint64_t v697 = a1;
  uint64_t v707 = a2;
  sub_21FA24250();
  uint64_t v711 = v8;
  v704 = *(void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v705 = v8 + 8;
  v704(v12, v7);
  uint64_t v31 = sub_21FA23EA0();
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v15, 1, v31) == 1)
  {
    sub_21F76CA84((uint64_t)v15, &qword_26AD45870);
    uint64_t v33 = 1;
  }
  else
  {
    sub_21FA23E90();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v15, v31);
    uint64_t v33 = 0;
  }
  uint64_t v34 = v710;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v710 + 56))(v18, v33, 1, v19);
  uint64_t v35 = *(void (**)(void, void, void))(v34 + 16);
  uint64_t v720 = v34 + 16;
  v722 = v35;
  v35(v26, v697, v19);
  int v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48))(v18, 1, v19);
  uint64_t v37 = v694;
  if (v36 == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v694, v26, v19);
    sub_21F76CA84((uint64_t)v18, &qword_26AD47A98);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v26, v19);
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v37, v18, v19);
  }
  sub_21F76CA40(&qword_26AD45368);
  uint64_t v38 = type metadata accessor for CalendarBinningUnit(0);
  uint64_t v39 = *(void *)(v38 - 8);
  v717 = (int *)(v38 - 8);
  uint64_t v696 = *(void *)(v39 + 72);
  unint64_t v40 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
  uint64_t v41 = swift_allocObject();
  uint64_t v691 = v41;
  *(_OWORD *)(v41 + 16) = xmmword_21FA2BC80;
  unint64_t v42 = v41 + v40;
  LODWORD(v693) = *MEMORY[0x263F078C8];
  v702(v12);
  uint64_t v43 = (void (*)(unint64_t, char *, uint64_t))v722;
  v722(v23, v697, v19);
  uint64_t v44 = v7;
  uint64_t v723 = v7;
  v724 = v12;
  uint64_t v45 = v19;
  uint64_t v46 = v43;
  uint64_t v47 = *(void (**)(void))(v712 + 16);
  uint64_t v721 = v712 + 16;
  uint64_t v48 = v713;
  v47();
  uint64_t v49 = v711 + 16;
  v709 = *(void (**)(unint64_t, char *, uint64_t))(v711 + 16);
  v709(v42, v12, v44);
  uint64_t v711 = v49;
  long long v50 = v717;
  *(void *)(v42 + v717[7]) = 1;
  unint64_t v51 = v42 + v50[8];
  unint64_t v52 = v42;
  unint64_t v700 = v42;
  uint64_t v53 = v23;
  v46(v51, v23, v45);
  unint64_t v54 = v52 + v50[9];
  uint64_t v55 = v714;
  v719 = v47;
  ((void (*)(unint64_t, char *, uint64_t))v47)(v54, v48, v714);
  v709(v715, v724, v723);
  uint64_t v56 = (uint64_t)v706;
  v46((unint64_t)v706, v53, v45);
  uint64_t v57 = (uint64_t)v708;
  ((void (*)(char *, char *, uint64_t))v47)(v708, v48, v55);
  uint64_t v698 = type metadata accessor for CalendarBinningImpl(0);
  swift_allocObject();
  uint64_t v58 = sub_21F89BA78(v715, 1, v56, v57);
  uint64_t v59 = *(void (**)(char *, uint64_t))(v712 + 8);
  v712 += 8;
  v699 = v59;
  v59(v48, v55);
  uint64_t v60 = *(void (**)(char *, uint64_t))(v710 + 8);
  v710 += 8;
  v701 = v60;
  uint64_t v61 = v53;
  v60(v53, v45);
  uint64_t v62 = v723;
  uint64_t v63 = v724;
  v704(v724, v723);
  uint64_t v64 = v717;
  unint64_t v65 = v700;
  *(void *)(v700 + v717[10]) = v58;
  uint64_t v66 = v65 + v696;
  ((void (*)(char *, void, uint64_t))v702)(v63, v693, v62);
  uint64_t v67 = v61;
  uint64_t v68 = v61;
  v718 = v61;
  uint64_t v716 = v45;
  int v69 = (void (*)(uint64_t, char *, uint64_t))v722;
  v722(v67, v697, v45);
  char v70 = v719;
  ((void (*)(char *, uint64_t, uint64_t))v719)(v713, v707, v55);
  uint64_t v71 = (void (*)(uint64_t, char *, uint64_t))v709;
  v709(v66, v63, v62);
  *(void *)(v66 + v64[7]) = 5;
  uint64_t v72 = v66 + v64[8];
  uint64_t v692 = v66;
  v69(v72, v68, v45);
  uint64_t v73 = (void (*)(char *, char *, uint64_t))v69;
  uint64_t v74 = v66 + v64[9];
  uint64_t v76 = v713;
  uint64_t v75 = v714;
  ((void (*)(uint64_t, char *, uint64_t))v70)(v74, v713, v714);
  uint64_t v77 = v715;
  v71(v715, v724, v723);
  uint64_t v78 = (uint64_t)v706;
  v73(v706, v718, v716);
  uint64_t v79 = (uint64_t)v708;
  uint64_t v80 = v719;
  ((void (*)(char *, char *, uint64_t))v719)(v708, v76, v75);
  swift_allocObject();
  uint64_t v81 = sub_21F89BA78(v77, 5, v78, v79);
  uint64_t v82 = v75;
  v699(v76, v75);
  uint64_t v83 = v718;
  uint64_t v84 = v716;
  v701(v718, v716);
  uint64_t v86 = v723;
  double v85 = v724;
  v704(v724, v723);
  long long v87 = v717;
  *(void *)(v692 + v717[10]) = v81;
  uint64_t v692 = 2 * v696;
  unint64_t v88 = v700 + 2 * v696;
  char v89 = v85;
  ((void (*)(char *, void, uint64_t))v702)(v85, v693, v86);
  double v90 = (void (*)(unint64_t, char *, uint64_t))v722;
  v722(v83, v697, v84);
  uint64_t v91 = v713;
  ((void (*)(char *, uint64_t, uint64_t))v80)(v713, v707, v82);
  uint64_t v92 = v89;
  uint64_t v93 = (void (*)(uint64_t, char *, uint64_t))v709;
  v709(v88, v92, v86);
  *(void *)(v88 + v87[7]) = 15;
  unint64_t v94 = v88 + v87[8];
  unint64_t v690 = v88;
  char v95 = v718;
  v90(v94, v718, v84);
  unint64_t v96 = v88 + v87[9];
  uint64_t v97 = v714;
  uint64_t v98 = v719;
  ((void (*)(unint64_t, char *, uint64_t))v719)(v96, v91, v714);
  uint64_t v99 = v715;
  v93(v715, v724, v723);
  uint64_t v100 = (uint64_t)v706;
  v90((unint64_t)v706, v95, v84);
  uint64_t v101 = (uint64_t)v708;
  uint64_t v102 = v713;
  ((void (*)(char *, char *, uint64_t))v98)(v708, v713, v97);
  swift_allocObject();
  uint64_t v103 = sub_21F89BA78(v99, 15, v100, v101);
  uint64_t v104 = v97;
  v699(v102, v97);
  uint64_t v105 = v716;
  v701(v95, v716);
  uint64_t v106 = v723;
  uint64_t v107 = v724;
  v704(v724, v723);
  uint64_t v108 = v717;
  *(void *)(v690 + v717[10]) = v103;
  uint64_t v109 = v700 + v692 + v696;
  ((void (*)(char *, void, uint64_t))v702)(v107, v693, v106);
  uint64_t v110 = (void (*)(uint64_t, char *, uint64_t))v722;
  v722(v95, v697, v105);
  uint64_t v111 = v719;
  ((void (*)(char *, uint64_t, uint64_t))v719)(v713, v707, v104);
  uint64_t v112 = v107;
  uint64_t v113 = (void (*)(uint64_t, char *, uint64_t))v709;
  v709(v109, v112, v106);
  *(void *)(v109 + v108[7]) = 30;
  uint64_t v114 = v109 + v108[8];
  uint64_t v692 = v109;
  uint64_t v115 = v718;
  uint64_t v116 = v716;
  v110(v114, v718, v716);
  uint64_t v117 = v109 + v108[9];
  uint64_t v118 = v713;
  ((void (*)(uint64_t, char *, uint64_t))v111)(v117, v713, v714);
  uint64_t v119 = v111;
  uint64_t v120 = v715;
  v113(v715, v724, v723);
  uint64_t v121 = (uint64_t)v706;
  v110((uint64_t)v706, v115, v116);
  uint64_t v122 = (uint64_t)v708;
  uint64_t v123 = v714;
  ((void (*)(char *, char *, uint64_t))v119)(v708, v118, v714);
  swift_allocObject();
  uint64_t v124 = sub_21F89BA78(v120, 30, v121, v122);
  v699(v118, v123);
  uint64_t v125 = v115;
  uint64_t v126 = v115;
  uint64_t v127 = v116;
  v701(v126, v116);
  uint64_t v129 = v723;
  char v128 = v724;
  v704(v724, v723);
  char v130 = v717;
  *(void *)(v692 + v717[10]) = v124;
  uint64_t v692 = 4 * v696;
  unint64_t v131 = v700 + 4 * v696;
  LODWORD(v693) = *MEMORY[0x263F078C0];
  uint64_t v132 = v129;
  v702(v128);
  uint64_t v133 = v127;
  uint64_t v134 = (void (*)(unint64_t, char *, uint64_t))v722;
  v722(v125, v697, v133);
  uint64_t v135 = v719;
  ((void (*)(char *, uint64_t, uint64_t))v719)(v118, v707, v714);
  uint64_t v136 = v132;
  uint64_t v137 = (void (*)(uint64_t, char *, uint64_t))v709;
  v709(v131, v128, v136);
  *(void *)(v131 + v130[7]) = 1;
  unint64_t v138 = v131 + v130[8];
  unint64_t v690 = v131;
  v134(v138, v125, v716);
  unint64_t v139 = v131 + v130[9];
  uint64_t v140 = v714;
  ((void (*)(unint64_t, char *, uint64_t))v135)(v139, v118, v714);
  uint64_t v141 = v715;
  v137(v715, v724, v723);
  uint64_t v142 = (uint64_t)v706;
  v134((unint64_t)v706, v718, v716);
  uint64_t v143 = (uint64_t)v708;
  ((void (*)(char *, char *, uint64_t))v135)(v708, v118, v140);
  swift_allocObject();
  uint64_t v144 = sub_21F89BA78(v141, 1, v142, v143);
  long long v145 = v118;
  v699(v118, v140);
  long long v146 = v718;
  uint64_t v147 = v716;
  v701(v718, v716);
  uint64_t v148 = v723;
  long long v149 = v724;
  v704(v724, v723);
  *(void *)(v690 + v717[10]) = v144;
  uint64_t v150 = v700 + v692 + v696;
  char v151 = v149;
  ((void (*)(char *, void, uint64_t))v702)(v149, v693, v148);
  uint64_t v152 = (void (*)(uint64_t, char *, uint64_t))v722;
  v722(v146, v697, v147);
  uint64_t v153 = v145;
  uint64_t v154 = v719;
  ((void (*)(char *, uint64_t, uint64_t))v719)(v153, v707, v140);
  uint64_t v155 = v148;
  uint64_t v156 = (void (*)(uint64_t, char *, uint64_t))v709;
  v709(v150, v151, v155);
  uint64_t v157 = v717;
  uint64_t v158 = v150;
  *(void *)(v150 + v717[7]) = 5;
  uint64_t v159 = v157;
  uint64_t v160 = v158 + v157[8];
  uint64_t v692 = v158;
  v152(v160, v146, v147);
  uint64_t v161 = (void (*)(char *, char *, uint64_t))v152;
  uint64_t v162 = v713;
  ((void (*)(uint64_t, char *, uint64_t))v154)(v158 + v159[9], v713, v714);
  uint64_t v163 = v154;
  v156(v715, v724, v723);
  uint64_t v164 = (uint64_t)v706;
  uint64_t v165 = v716;
  v161(v706, v146, v716);
  uint64_t v166 = (uint64_t)v708;
  uint64_t v167 = v162;
  uint64_t v168 = v162;
  uint64_t v169 = v714;
  ((void (*)(char *, char *, uint64_t))v163)(v708, v168, v714);
  swift_allocObject();
  uint64_t v170 = sub_21F89BA78(v715, 5, v164, v166);
  v699(v167, v169);
  uint64_t v171 = v146;
  v701(v146, v165);
  uint64_t v173 = v723;
  uint64_t v172 = v724;
  v704(v724, v723);
  int v174 = v717;
  *(void *)(v692 + v717[10]) = v170;
  uint64_t v175 = v700 + 6 * v696;
  ((void (*)(char *, void, uint64_t))v702)(v172, v693, v173);
  long long v176 = (void (*)(uint64_t, char *, uint64_t))v722;
  v722(v171, v697, v165);
  long long v177 = v719;
  ((void (*)(char *, uint64_t, uint64_t))v719)(v167, v707, v169);
  uint64_t v178 = v173;
  long long v179 = (void (*)(uint64_t, char *, uint64_t))v709;
  v709(v175, v172, v178);
  *(void *)(v175 + v174[7]) = 15;
  uint64_t v180 = v175 + v174[8];
  uint64_t v692 = v175;
  long long v181 = v718;
  v176(v180, v718, v165);
  uint64_t v182 = v175 + v174[9];
  long long v183 = v713;
  uint64_t v184 = v714;
  ((void (*)(uint64_t, char *, uint64_t))v177)(v182, v713, v714);
  v179(v715, v724, v723);
  uint64_t v185 = (uint64_t)v706;
  long long v186 = v181;
  v176((uint64_t)v706, v181, v165);
  uint64_t v187 = (uint64_t)v708;
  uint64_t v188 = v184;
  ((void (*)(char *, char *, uint64_t))v177)(v708, v183, v184);
  swift_allocObject();
  uint64_t v189 = sub_21F89BA78(v715, 15, v185, v187);
  v699(v183, v184);
  uint64_t v190 = v716;
  v701(v186, v716);
  uint64_t v191 = v723;
  uint64_t v192 = v724;
  v704(v724, v723);
  uint64_t v193 = v717;
  *(void *)(v692 + v717[10]) = v189;
  uint64_t v692 = 8 * v696;
  unint64_t v194 = v700 + 7 * v696;
  long long v195 = v192;
  ((void (*)(char *, void, uint64_t))v702)(v192, v693, v191);
  long long v196 = v186;
  uint64_t v197 = (void (*)(unint64_t, char *, uint64_t))v722;
  v722(v196, v697, v190);
  int v198 = v719;
  ((void (*)(char *, uint64_t, uint64_t))v719)(v713, v707, v188);
  uint64_t v199 = v195;
  char v200 = (void (*)(uint64_t, char *, uint64_t))v709;
  v709(v194, v199, v191);
  *(void *)(v194 + v193[7]) = 30;
  uint64_t v201 = v193;
  unint64_t v202 = v194 + v193[8];
  unint64_t v690 = v194;
  long long v203 = v718;
  uint64_t v204 = v716;
  v197(v202, v718, v716);
  unint64_t v205 = v194 + v201[9];
  int v206 = v713;
  uint64_t v207 = v714;
  ((void (*)(unint64_t, char *, uint64_t))v198)(v205, v713, v714);
  uint64_t v208 = v715;
  v200(v715, v724, v723);
  uint64_t v209 = (uint64_t)v706;
  v722(v706, v203, v204);
  uint64_t v210 = (uint64_t)v708;
  ((void (*)(char *, char *, uint64_t))v198)(v708, v206, v207);
  swift_allocObject();
  uint64_t v211 = sub_21F89BA78(v208, 30, v209, v210);
  v699(v206, v207);
  uint64_t v212 = v203;
  uint64_t v213 = v204;
  v701(v203, v204);
  uint64_t v214 = v723;
  long long v215 = v724;
  v704(v724, v723);
  long long v216 = v717;
  *(void *)(v690 + v717[10]) = v211;
  unint64_t v217 = v700 + v692;
  LODWORD(v693) = *MEMORY[0x263F07890];
  long long v218 = v215;
  v702(v215);
  long long v219 = (void (*)(unint64_t, char *, uint64_t))v722;
  v722(v212, v697, v213);
  long long v220 = v713;
  ((void (*)(char *, uint64_t, uint64_t))v719)(v713, v707, v207);
  uint64_t v221 = v214;
  long long v222 = (void (*)(uint64_t, char *, uint64_t))v709;
  v709(v217, v218, v221);
  *(void *)(v217 + v216[7]) = 1;
  unint64_t v223 = v217 + v216[8];
  unint64_t v690 = v217;
  v219(v223, v212, v213);
  unint64_t v224 = v217 + v216[9];
  uint64_t v225 = v719;
  ((void (*)(unint64_t, char *, uint64_t))v719)(v224, v220, v207);
  uint64_t v226 = v715;
  v222(v715, v724, v723);
  uint64_t v227 = (uint64_t)v706;
  uint64_t v228 = v718;
  v219((unint64_t)v706, v718, v213);
  uint64_t v229 = (uint64_t)v708;
  uint64_t v230 = v713;
  ((void (*)(char *, char *, uint64_t))v225)(v708, v713, v207);
  swift_allocObject();
  uint64_t v231 = sub_21F89BA78(v226, 1, v227, v229);
  long long v232 = v230;
  uint64_t v233 = v207;
  v699(v230, v207);
  uint64_t v234 = v228;
  uint64_t v235 = v228;
  uint64_t v236 = v716;
  v701(v235, v716);
  uint64_t v238 = v723;
  uint64_t v237 = v724;
  v704(v724, v723);
  uint64_t v239 = v717;
  *(void *)(v690 + v717[10]) = v231;
  uint64_t v240 = v700 + v692 + v696;
  ((void (*)(char *, void, uint64_t))v702)(v237, v693, v238);
  long long v241 = v234;
  uint64_t v242 = (void (*)(uint64_t, char *, uint64_t))v722;
  v722(v241, v697, v236);
  uint64_t v243 = v232;
  uint64_t v244 = v233;
  uint64_t v245 = v719;
  ((void (*)(char *, uint64_t, uint64_t))v719)(v243, v707, v233);
  uint64_t v246 = (void (*)(uint64_t, char *, uint64_t))v709;
  v709(v240, v237, v238);
  *(void *)(v240 + v239[7]) = 3;
  uint64_t v247 = v239;
  uint64_t v248 = v240 + v239[8];
  uint64_t v692 = v240;
  uint64_t v249 = v716;
  v242(v248, v718, v716);
  uint64_t v250 = v240 + v247[9];
  char v251 = v713;
  uint64_t v252 = v244;
  ((void (*)(uint64_t, char *, uint64_t))v245)(v250, v713, v244);
  int v253 = v245;
  uint64_t v254 = v715;
  v246(v715, v724, v723);
  uint64_t v255 = (uint64_t)v706;
  long long v256 = v718;
  v722(v706, v718, v249);
  uint64_t v257 = (uint64_t)v708;
  long long v258 = v251;
  ((void (*)(char *, char *, uint64_t))v253)(v708, v251, v252);
  swift_allocObject();
  uint64_t v259 = sub_21F89BA78(v254, 3, v255, v257);
  v699(v251, v252);
  long long v260 = v256;
  v701(v256, v249);
  uint64_t v262 = v723;
  long long v261 = v724;
  v704(v724, v723);
  long long v263 = v717;
  *(void *)(v692 + v717[10]) = v259;
  uint64_t v264 = v700 + 10 * v696;
  ((void (*)(char *, void, uint64_t))v702)(v261, v693, v262);
  long long v265 = (void (*)(uint64_t, char *, uint64_t))v722;
  v722(v256, v697, v249);
  uint64_t v266 = v714;
  ((void (*)(char *, uint64_t, uint64_t))v719)(v258, v707, v714);
  uint64_t v267 = v261;
  uint64_t v268 = (void (*)(uint64_t, char *, uint64_t))v709;
  v709(v264, v267, v262);
  *(void *)(v264 + v263[7]) = 6;
  uint64_t v269 = v264 + v263[8];
  uint64_t v692 = v264;
  v265(v269, v260, v249);
  uint64_t v270 = (void (*)(char *, char *, uint64_t))v265;
  uint64_t v271 = v264 + v263[9];
  uint64_t v272 = v713;
  uint64_t v273 = v266;
  uint64_t v274 = v719;
  ((void (*)(uint64_t, char *, uint64_t))v719)(v271, v713, v266);
  uint64_t v275 = v715;
  v268(v715, v724, v723);
  uint64_t v276 = (uint64_t)v706;
  v270(v706, v718, v249);
  uint64_t v277 = (uint64_t)v708;
  ((void (*)(char *, char *, uint64_t))v274)(v708, v272, v273);
  swift_allocObject();
  uint64_t v278 = sub_21F89BA78(v275, 6, v276, v277);
  uint64_t v279 = v273;
  v699(v272, v273);
  uint64_t v280 = v718;
  v701(v718, v249);
  uint64_t v281 = v723;
  long long v282 = v724;
  v704(v724, v723);
  long long v283 = v717;
  *(void *)(v692 + v717[10]) = v278;
  uint64_t v284 = v700 + 11 * v696;
  ((void (*)(char *, void, uint64_t))v702)(v282, v693, v281);
  uint64_t v285 = (void (*)(uint64_t, char *, uint64_t))v722;
  v722(v280, v697, v249);
  uint64_t v286 = v719;
  ((void (*)(char *, uint64_t, uint64_t))v719)(v713, v707, v279);
  uint64_t v287 = (void (*)(uint64_t, char *, uint64_t))v709;
  v709(v284, v282, v281);
  *(void *)(v284 + v283[7]) = 12;
  uint64_t v288 = v283;
  uint64_t v289 = v284 + v283[8];
  uint64_t v692 = v284;
  uint64_t v290 = v718;
  v285(v289, v718, v249);
  uint64_t v291 = v713;
  uint64_t v292 = v714;
  ((void (*)(uint64_t, char *, uint64_t))v286)(v284 + v288[9], v713, v714);
  uint64_t v293 = v286;
  uint64_t v294 = v715;
  uint64_t v295 = v723;
  v287(v715, v724, v723);
  uint64_t v296 = (uint64_t)v706;
  uint64_t v297 = v716;
  v722(v706, v290, v716);
  uint64_t v298 = (uint64_t)v708;
  ((void (*)(char *, char *, uint64_t))v293)(v708, v291, v292);
  swift_allocObject();
  uint64_t v299 = sub_21F89BA78(v294, 12, v296, v298);
  v699(v291, v292);
  int v300 = v718;
  v701(v718, v297);
  int v301 = v724;
  uint64_t v302 = v295;
  v704(v724, v295);
  long long v303 = v717;
  *(void *)(v692 + v717[10]) = v299;
  uint64_t v304 = v700 + 12 * v696;
  LODWORD(v693) = *MEMORY[0x263F07870];
  v702(v301);
  long long v305 = (void (*)(uint64_t, char *, uint64_t))v722;
  v722(v300, v697, v297);
  uint64_t v306 = v719;
  ((void (*)(char *, uint64_t, uint64_t))v719)(v291, v707, v714);
  uint64_t v307 = v301;
  uint64_t v308 = (void (*)(uint64_t, char *, uint64_t))v709;
  v709(v304, v307, v302);
  *(void *)(v304 + v303[7]) = 1;
  uint64_t v309 = v304 + v303[8];
  uint64_t v692 = v304;
  int v310 = v718;
  v305(v309, v718, v297);
  uint64_t v311 = v304 + v303[9];
  long long v312 = v713;
  uint64_t v313 = v714;
  ((void (*)(uint64_t, char *, uint64_t))v306)(v311, v713, v714);
  long long v314 = v306;
  uint64_t v315 = v715;
  v308(v715, v724, v723);
  uint64_t v316 = (uint64_t)v706;
  char v317 = v310;
  int v318 = v310;
  uint64_t v319 = v297;
  v305((uint64_t)v706, v317, v297);
  uint64_t v320 = (uint64_t)v708;
  ((void (*)(char *, char *, uint64_t))v314)(v708, v312, v313);
  swift_allocObject();
  uint64_t v321 = sub_21F89BA78(v315, 1, v316, v320);
  uint64_t v322 = v313;
  v699(v312, v313);
  v701(v318, v297);
  uint64_t v323 = v723;
  uint64_t v324 = v724;
  v704(v724, v723);
  char v325 = v717;
  *(void *)(v692 + v717[10]) = v321;
  uint64_t v326 = v700 + 13 * v696;
  long long v327 = v324;
  ((void (*)(char *, void, uint64_t))v702)(v324, v693, v323);
  long long v328 = (void (*)(uint64_t, char *, uint64_t))v722;
  v722(v318, v697, v319);
  long long v329 = v719;
  ((void (*)(char *, uint64_t, uint64_t))v719)(v312, v707, v322);
  long long v330 = (void (*)(uint64_t, char *, uint64_t))v709;
  v709(v326, v327, v323);
  uint64_t v331 = v326;
  *(void *)(v326 + v325[7]) = 2;
  uint64_t v332 = v325;
  uint64_t v333 = v331 + v325[8];
  uint64_t v692 = v331;
  int v334 = v718;
  uint64_t v335 = v716;
  v328(v333, v718, v716);
  uint64_t v336 = v331 + v332[9];
  long long v337 = v713;
  uint64_t v338 = v714;
  ((void (*)(uint64_t, char *, uint64_t))v329)(v336, v713, v714);
  uint64_t v339 = v329;
  uint64_t v340 = v715;
  v330(v715, v724, v723);
  uint64_t v341 = (uint64_t)v706;
  uint64_t v342 = v334;
  v328((uint64_t)v706, v334, v335);
  uint64_t v343 = (uint64_t)v708;
  ((void (*)(char *, char *, uint64_t))v339)(v708, v337, v338);
  swift_allocObject();
  uint64_t v344 = sub_21F89BA78(v340, 2, v341, v343);
  long long v345 = v337;
  v699(v337, v338);
  long long v346 = v342;
  uint64_t v347 = v335;
  v701(v342, v335);
  uint64_t v348 = v723;
  uint64_t v349 = v724;
  v704(v724, v723);
  *(void *)(v692 + v717[10]) = v344;
  uint64_t v350 = v700 + 14 * v696;
  LODWORD(v693) = *MEMORY[0x263F07830];
  v702(v349);
  uint64_t v351 = (void (*)(uint64_t, char *, uint64_t))v722;
  v722(v346, v697, v347);
  ((void (*)(char *, uint64_t, uint64_t))v719)(v337, v707, v338);
  uint64_t v352 = v349;
  uint64_t v353 = (void (*)(uint64_t, char *, uint64_t))v709;
  v709(v350, v352, v348);
  uint64_t v354 = v717;
  *(void *)(v350 + v717[7]) = 1;
  uint64_t v355 = v350 + v354[8];
  uint64_t v692 = v350;
  uint64_t v356 = v718;
  v351(v355, v718, v716);
  uint64_t v357 = v350 + v354[9];
  uint64_t v358 = v714;
  char v359 = v719;
  ((void (*)(uint64_t, char *, uint64_t))v719)(v357, v337, v714);
  uint64_t v360 = v715;
  v353(v715, v724, v723);
  uint64_t v361 = (uint64_t)v706;
  uint64_t v362 = v716;
  v722(v706, v356, v716);
  uint64_t v363 = (uint64_t)v708;
  ((void (*)(char *, char *, uint64_t))v359)(v708, v345, v358);
  swift_allocObject();
  uint64_t v364 = sub_21F89BA78(v360, 1, v361, v363);
  uint64_t v365 = v358;
  v699(v345, v358);
  uint64_t v366 = v362;
  v701(v356, v362);
  uint64_t v368 = v723;
  uint64_t v367 = v724;
  v704(v724, v723);
  uint64_t v369 = v717;
  *(void *)(v692 + v717[10]) = v364;
  uint64_t v692 = 16 * v696;
  unint64_t v370 = v700 + 15 * v696;
  ((void (*)(char *, void, uint64_t))v702)(v367, v693, v368);
  uint64_t v371 = v356;
  uint64_t v372 = (void (*)(unint64_t, char *, uint64_t))v722;
  v722(v356, v697, v366);
  uint64_t v373 = v713;
  ((void (*)(char *, uint64_t, uint64_t))v719)(v713, v707, v365);
  uint64_t v374 = v724;
  uint64_t v375 = v368;
  uint64_t v376 = (void (*)(uint64_t, char *, uint64_t))v709;
  v709(v370, v724, v375);
  unint64_t v377 = v370;
  *(void *)(v370 + v369[7]) = 2;
  uint64_t v378 = v369;
  unint64_t v379 = v377 + v369[8];
  unint64_t v380 = v377;
  unint64_t v690 = v377;
  v372(v379, v371, v366);
  unint64_t v381 = v380 + v378[9];
  uint64_t v382 = v714;
  uint64_t v383 = v719;
  ((void (*)(unint64_t, char *, uint64_t))v719)(v381, v373, v714);
  uint64_t v384 = v715;
  v376(v715, v374, v723);
  uint64_t v385 = (uint64_t)v706;
  v372((unint64_t)v706, v718, v716);
  uint64_t v386 = (uint64_t)v708;
  ((void (*)(char *, char *, uint64_t))v383)(v708, v373, v382);
  swift_allocObject();
  uint64_t v387 = sub_21F89BA78(v384, 2, v385, v386);
  uint64_t v388 = v373;
  uint64_t v389 = v382;
  v699(v373, v382);
  uint64_t v390 = v718;
  uint64_t v391 = v716;
  v701(v718, v716);
  uint64_t v393 = v723;
  uint64_t v392 = v724;
  v704(v724, v723);
  uint64_t v394 = v717;
  *(void *)(v690 + v717[10]) = v387;
  unint64_t v395 = v700 + v692;
  LODWORD(v693) = *MEMORY[0x263F078A8];
  v702(v392);
  uint64_t v396 = (void (*)(unint64_t, char *, uint64_t))v722;
  v722(v390, v694, v391);
  long long v397 = v719;
  ((void (*)(char *, uint64_t, uint64_t))v719)(v388, v707, v389);
  long long v398 = (void (*)(uint64_t, char *, uint64_t))v709;
  v709(v395, v392, v393);
  *(void *)(v395 + v394[7]) = 1;
  long long v399 = v394;
  unint64_t v400 = v395 + v394[8];
  unint64_t v690 = v395;
  long long v401 = v718;
  uint64_t v402 = v716;
  v396(v400, v718, v716);
  unint64_t v403 = v395 + v399[9];
  uint64_t v404 = v713;
  ((void (*)(unint64_t, char *, uint64_t))v397)(v403, v713, v714);
  uint64_t v405 = v397;
  uint64_t v406 = v715;
  v398(v715, v724, v723);
  uint64_t v407 = (uint64_t)v706;
  v396((unint64_t)v706, v401, v402);
  uint64_t v408 = (uint64_t)v708;
  uint64_t v409 = v714;
  ((void (*)(char *, char *, uint64_t))v405)(v708, v404, v714);
  swift_allocObject();
  uint64_t v410 = sub_21F89BA78(v406, 1, v407, v408);
  char v411 = v404;
  uint64_t v412 = v409;
  v699(v404, v409);
  char v413 = v718;
  uint64_t v414 = v402;
  v701(v718, v402);
  uint64_t v415 = v723;
  uint64_t v416 = v724;
  v704(v724, v723);
  uint64_t v417 = v717;
  *(void *)(v690 + v717[10]) = v410;
  uint64_t v418 = v700 + v692 + v696;
  char v419 = v416;
  ((void (*)(char *, void, uint64_t))v702)(v416, v693, v415);
  char v420 = (void (*)(uint64_t, char *, uint64_t))v722;
  v722(v413, v694, v414);
  uint64_t v421 = v719;
  ((void (*)(char *, uint64_t, uint64_t))v719)(v411, v707, v412);
  uint64_t v422 = (void (*)(uint64_t, char *, uint64_t))v709;
  v709(v418, v419, v415);
  uint64_t v423 = v417;
  *(void *)(v418 + v417[7]) = 2;
  uint64_t v424 = v418 + v417[8];
  uint64_t v692 = v418;
  uint64_t v425 = v718;
  uint64_t v426 = v716;
  v420(v424, v718, v716);
  uint64_t v427 = (void (*)(char *, char *, uint64_t))v420;
  ((void (*)(uint64_t, char *, uint64_t))v421)(v418 + v423[9], v713, v714);
  uint64_t v428 = v421;
  uint64_t v429 = v715;
  v422(v715, v724, v723);
  uint64_t v430 = (uint64_t)v706;
  uint64_t v431 = v425;
  v427(v706, v425, v426);
  uint64_t v432 = (uint64_t)v708;
  uint64_t v433 = v713;
  uint64_t v434 = v714;
  ((void (*)(char *, char *, uint64_t))v428)(v708, v713, v714);
  swift_allocObject();
  uint64_t v435 = sub_21F89BA78(v429, 2, v430, v432);
  v699(v433, v434);
  uint64_t v436 = v716;
  v701(v431, v716);
  uint64_t v438 = v723;
  uint64_t v437 = v724;
  v704(v724, v723);
  uint64_t v439 = v717;
  *(void *)(v692 + v717[10]) = v435;
  uint64_t v440 = v700 + 18 * v696;
  ((void (*)(char *, void, uint64_t))v702)(v437, v693, v438);
  uint64_t v441 = (void (*)(uint64_t, char *, uint64_t))v722;
  v722(v431, v694, v436);
  ((void (*)(char *, uint64_t, uint64_t))v719)(v433, v707, v434);
  uint64_t v442 = v437;
  uint64_t v443 = (void (*)(uint64_t, char *, uint64_t))v709;
  v709(v440, v442, v438);
  *(void *)(v440 + v439[7]) = 3;
  uint64_t v444 = v440 + v439[8];
  uint64_t v692 = v440;
  uint64_t v445 = v718;
  v441(v444, v718, v436);
  uint64_t v446 = v440 + v439[9];
  uint64_t v447 = v714;
  uint64_t v448 = v719;
  ((void (*)(uint64_t, char *, uint64_t))v719)(v446, v433, v714);
  uint64_t v449 = v715;
  uint64_t v450 = v723;
  v443(v715, v724, v723);
  uint64_t v451 = (uint64_t)v706;
  v722(v706, v445, v436);
  uint64_t v452 = (uint64_t)v708;
  uint64_t v453 = v447;
  ((void (*)(char *, char *, uint64_t))v448)(v708, v433, v447);
  swift_allocObject();
  uint64_t v454 = sub_21F89BA78(v449, 3, v451, v452);
  v699(v433, v447);
  uint64_t v455 = v718;
  v701(v718, v436);
  uint64_t v456 = v724;
  v704(v724, v450);
  *(void *)(v692 + v717[10]) = v454;
  uint64_t v457 = v700 + 19 * v696;
  ((void (*)(char *, void, uint64_t))v702)(v456, v693, v450);
  uint64_t v458 = (void (*)(uint64_t, char *, uint64_t))v722;
  v722(v455, v694, v436);
  ((void (*)(char *, uint64_t, uint64_t))v719)(v433, v707, v453);
  uint64_t v459 = v456;
  v460 = v456;
  v461 = (void (*)(uint64_t, char *, uint64_t))v709;
  v709(v457, v460, v450);
  v462 = v717;
  *(void *)(v457 + v717[7]) = 6;
  uint64_t v463 = v457 + v462[8];
  uint64_t v692 = v457;
  uint64_t v464 = v716;
  v458(v463, v455, v716);
  uint64_t v465 = v457 + v462[9];
  v466 = v713;
  ((void (*)(uint64_t, char *, uint64_t))v719)(v465, v713, v453);
  uint64_t v467 = v715;
  v461(v715, v459, v723);
  uint64_t v468 = (uint64_t)v706;
  v722(v706, v455, v464);
  uint64_t v469 = (uint64_t)v708;
  ((void (*)(char *, char *, uint64_t))v719)(v708, v466, v453);
  swift_allocObject();
  uint64_t v470 = sub_21F89BA78(v467, 6, v468, v469);
  v471 = v466;
  v699(v466, v453);
  uint64_t v472 = v464;
  v701(v455, v464);
  uint64_t v474 = v723;
  v473 = v724;
  v704(v724, v723);
  v475 = v717;
  *(void *)(v692 + v717[10]) = v470;
  unint64_t v476 = v700 + 20 * v696;
  v477 = v473;
  ((void (*)(char *, void, uint64_t))v702)(v473, v695, v474);
  v478 = (void (*)(unint64_t, char *, uint64_t))v722;
  v722(v455, v697, v472);
  v479 = v471;
  uint64_t v480 = v714;
  v481 = v719;
  ((void (*)(char *, uint64_t, uint64_t))v719)(v479, v707, v714);
  v482 = (void (*)(uint64_t, char *, uint64_t))v709;
  v709(v476, v477, v474);
  *(void *)(v476 + v475[7]) = 1;
  v483 = v475;
  unint64_t v484 = v476 + v475[8];
  unint64_t v693 = v476;
  v485 = v718;
  uint64_t v486 = v716;
  v478(v484, v718, v716);
  unint64_t v487 = v476 + v483[9];
  v488 = v713;
  ((void (*)(unint64_t, char *, uint64_t))v481)(v487, v713, v480);
  uint64_t v489 = v715;
  v482(v715, v724, v723);
  uint64_t v490 = (uint64_t)v706;
  v722(v706, v485, v486);
  uint64_t v491 = (uint64_t)v708;
  uint64_t v492 = v714;
  ((void (*)(char *, char *, uint64_t))v481)(v708, v488, v714);
  swift_allocObject();
  uint64_t v493 = sub_21F89BA78(v489, 1, v490, v491);
  uint64_t v494 = v492;
  v699(v488, v492);
  uint64_t v495 = v486;
  v701(v485, v486);
  uint64_t v497 = v723;
  v496 = v724;
  v704(v724, v723);
  v498 = v717;
  *(void *)(v693 + v717[10]) = v493;
  unint64_t v499 = v700 + 21 * v696;
  ((void (*)(char *, void, uint64_t))v702)(v496, v695, v497);
  uint64_t v500 = v495;
  v501 = (void (*)(unint64_t, char *, uint64_t))v722;
  v722(v485, v697, v500);
  v502 = v719;
  ((void (*)(char *, uint64_t, uint64_t))v719)(v488, v707, v494);
  uint64_t v503 = v497;
  v504 = (void (*)(uint64_t, char *, uint64_t))v709;
  v709(v499, v496, v503);
  *(void *)(v499 + v498[7]) = 2;
  unint64_t v505 = v499 + v498[8];
  unint64_t v693 = v499;
  v501(v505, v718, v716);
  unint64_t v506 = v499 + v498[9];
  v507 = v713;
  ((void (*)(unint64_t, char *, uint64_t))v502)(v506, v713, v494);
  uint64_t v508 = v715;
  v504(v715, v724, v723);
  uint64_t v509 = (uint64_t)v706;
  v510 = v718;
  v722(v706, v718, v716);
  uint64_t v511 = (uint64_t)v708;
  ((void (*)(char *, char *, uint64_t))v502)(v708, v507, v494);
  swift_allocObject();
  uint64_t v512 = sub_21F89BA78(v508, 2, v509, v511);
  v699(v507, v494);
  uint64_t v513 = v716;
  v701(v510, v716);
  uint64_t v515 = v723;
  v514 = v724;
  v704(v724, v723);
  *(void *)(v693 + v717[10]) = v512;
  unint64_t v516 = v700 + 22 * v696;
  v517 = v514;
  ((void (*)(char *, void, uint64_t))v702)(v514, v695, v515);
  v518 = (void (*)(unint64_t, char *, uint64_t))v722;
  v722(v510, v697, v513);
  v519 = v507;
  uint64_t v520 = v714;
  v521 = v719;
  ((void (*)(char *, uint64_t, uint64_t))v719)(v519, v707, v714);
  v522 = v517;
  v523 = (void (*)(uint64_t, char *, uint64_t))v709;
  v709(v516, v522, v515);
  v524 = v717;
  *(void *)(v516 + v717[7]) = 5;
  v525 = v524;
  unint64_t v526 = v516 + v524[8];
  unint64_t v693 = v516;
  v518(v526, v718, v513);
  unint64_t v527 = v516 + v525[9];
  v528 = v713;
  ((void (*)(unint64_t, char *, uint64_t))v521)(v527, v713, v520);
  v529 = v521;
  uint64_t v530 = v715;
  v523(v715, v724, v723);
  uint64_t v531 = (uint64_t)v706;
  v532 = v718;
  uint64_t v533 = v716;
  v518((unint64_t)v706, v718, v716);
  uint64_t v534 = (uint64_t)v708;
  v535 = v528;
  ((void (*)(char *, char *, uint64_t))v529)(v708, v528, v520);
  swift_allocObject();
  uint64_t v536 = sub_21F89BA78(v530, 5, v531, v534);
  v699(v528, v520);
  v537 = v532;
  v701(v532, v533);
  uint64_t v539 = v723;
  v538 = v724;
  v704(v724, v723);
  v540 = v717;
  *(void *)(v693 + v717[10]) = v536;
  unint64_t v541 = v700 + 23 * v696;
  ((void (*)(char *, void, uint64_t))v702)(v538, v695, v539);
  v542 = v532;
  v543 = (void (*)(unint64_t, char *, uint64_t))v722;
  v722(v542, v697, v533);
  uint64_t v544 = v714;
  ((void (*)(char *, uint64_t, uint64_t))v719)(v535, v707, v714);
  uint64_t v545 = v539;
  v546 = (void (*)(uint64_t, char *, uint64_t))v709;
  v709(v541, v538, v545);
  *(void *)(v541 + v540[7]) = 10;
  unint64_t v547 = v541 + v540[8];
  unint64_t v693 = v541;
  v543(v547, v537, v716);
  unint64_t v548 = v541 + v540[9];
  uint64_t v549 = v544;
  v550 = v719;
  ((void (*)(unint64_t, char *, uint64_t))v719)(v548, v535, v544);
  uint64_t v551 = v715;
  v546(v715, v724, v723);
  uint64_t v552 = (uint64_t)v706;
  uint64_t v553 = v716;
  v543((unint64_t)v706, v718, v716);
  uint64_t v554 = (uint64_t)v708;
  ((void (*)(char *, char *, uint64_t))v550)(v708, v535, v549);
  swift_allocObject();
  uint64_t v555 = sub_21F89BA78(v551, 10, v552, v554);
  v556 = v535;
  v699(v535, v549);
  v557 = v718;
  uint64_t v558 = v553;
  v701(v718, v553);
  uint64_t v559 = v723;
  v560 = v724;
  v704(v724, v723);
  v561 = v717;
  *(void *)(v693 + v717[10]) = v555;
  unint64_t v562 = v700 + 24 * v696;
  v563 = v560;
  ((void (*)(char *, void, uint64_t))v702)(v560, v695, v559);
  v564 = (void (*)(unint64_t, char *, uint64_t))v722;
  v722(v557, v697, v558);
  uint64_t v565 = v549;
  v566 = v719;
  ((void (*)(char *, uint64_t, uint64_t))v719)(v556, v707, v565);
  v567 = v563;
  v568 = (void (*)(uint64_t, char *, uint64_t))v709;
  v709(v562, v567, v559);
  *(void *)(v562 + v561[7]) = 20;
  unint64_t v569 = v562 + v561[8];
  unint64_t v693 = v562;
  v570 = v557;
  uint64_t v571 = v558;
  v564(v569, v570, v558);
  unint64_t v572 = v562 + v561[9];
  v574 = v713;
  uint64_t v573 = v714;
  v575 = v566;
  ((void (*)(unint64_t, char *, uint64_t))v566)(v572, v713, v714);
  uint64_t v576 = v715;
  v568(v715, v724, v723);
  uint64_t v577 = (uint64_t)v706;
  v578 = v718;
  v722(v706, v718, v571);
  uint64_t v579 = (uint64_t)v708;
  ((void (*)(char *, char *, uint64_t))v575)(v708, v574, v573);
  swift_allocObject();
  uint64_t v580 = sub_21F89BA78(v576, 20, v577, v579);
  uint64_t v581 = v573;
  v699(v574, v573);
  v582 = v578;
  uint64_t v583 = v716;
  v701(v578, v716);
  uint64_t v584 = v723;
  v585 = v724;
  v704(v724, v723);
  v586 = v717;
  *(void *)(v693 + v717[10]) = v580;
  unint64_t v587 = v700 + 25 * v696;
  ((void (*)(char *, void, uint64_t))v702)(v585, v695, v584);
  v588 = (void (*)(unint64_t, char *, uint64_t))v722;
  v722(v582, v697, v583);
  v589 = v713;
  uint64_t v590 = v581;
  v591 = v719;
  ((void (*)(char *, uint64_t, uint64_t))v719)(v713, v707, v590);
  v592 = (void (*)(uint64_t, char *, uint64_t))v709;
  v709(v587, v585, v584);
  *(void *)(v587 + v586[7]) = 50;
  unint64_t v593 = v587 + v586[8];
  unint64_t v594 = v587;
  unint64_t v693 = v587;
  v595 = v718;
  v588(v593, v718, v716);
  unint64_t v596 = v594 + v586[9];
  uint64_t v597 = v714;
  ((void (*)(unint64_t, char *, uint64_t))v591)(v596, v589, v714);
  v598 = v591;
  uint64_t v599 = v715;
  v592(v715, v724, v723);
  uint64_t v600 = (uint64_t)v706;
  v601 = v595;
  v602 = v595;
  uint64_t v603 = v716;
  v588((unint64_t)v706, v601, v716);
  uint64_t v604 = (uint64_t)v708;
  v605 = v713;
  ((void (*)(char *, char *, uint64_t))v598)(v708, v713, v597);
  swift_allocObject();
  uint64_t v606 = sub_21F89BA78(v599, 50, v600, v604);
  v699(v605, v597);
  v607 = v602;
  v608 = v602;
  uint64_t v609 = v603;
  v701(v608, v603);
  uint64_t v611 = v723;
  v610 = v724;
  v704(v724, v723);
  *(void *)(v693 + v717[10]) = v606;
  unint64_t v612 = v700 + 26 * v696;
  ((void (*)(char *, void, uint64_t))v702)(v610, v695, v611);
  v613 = (void (*)(unint64_t, char *, uint64_t))v722;
  v722(v607, v697, v609);
  ((void (*)(char *, uint64_t, uint64_t))v719)(v605, v707, v597);
  v614 = (void (*)(uint64_t, char *, uint64_t))v709;
  v709(v612, v610, v611);
  v615 = v717;
  *(void *)(v612 + v717[7]) = 100;
  unint64_t v616 = v612 + v615[8];
  unint64_t v693 = v612;
  v613(v616, v607, v609);
  unint64_t v617 = v612 + v615[9];
  uint64_t v618 = v714;
  v619 = v719;
  ((void (*)(unint64_t, char *, uint64_t))v719)(v617, v605, v714);
  v614(v715, v724, v723);
  uint64_t v620 = (uint64_t)v706;
  uint64_t v621 = v609;
  v722(v706, v607, v609);
  uint64_t v622 = (uint64_t)v708;
  v623 = v713;
  ((void (*)(char *, char *, uint64_t))v619)(v708, v713, v618);
  swift_allocObject();
  uint64_t v624 = sub_21F89BA78(v715, 100, v620, v622);
  uint64_t v625 = v618;
  v699(v623, v618);
  v626 = v718;
  uint64_t v627 = v621;
  v701(v718, v621);
  uint64_t v629 = v723;
  v628 = v724;
  v704(v724, v723);
  v630 = v717;
  *(void *)(v693 + v717[10]) = v624;
  unint64_t v631 = v700 + 27 * v696;
  ((void (*)(char *, void, uint64_t))v702)(v628, v695, v629);
  v632 = (void (*)(unint64_t, char *, uint64_t))v722;
  v722(v626, v697, v627);
  v633 = v719;
  ((void (*)(char *, uint64_t, uint64_t))v719)(v623, v707, v625);
  v634 = v628;
  v635 = (void (*)(uint64_t, char *, uint64_t))v709;
  v709(v631, v634, v629);
  v636 = v630;
  *(void *)(v631 + v630[7]) = 200;
  unint64_t v637 = v631 + v630[8];
  unint64_t v693 = v631;
  uint64_t v638 = v716;
  v632(v637, v626, v716);
  unint64_t v639 = v631 + v636[9];
  v640 = v713;
  uint64_t v641 = v714;
  ((void (*)(unint64_t, char *, uint64_t))v633)(v639, v713, v714);
  v635(v715, v724, v723);
  uint64_t v642 = (uint64_t)v706;
  v643 = v718;
  v632((unint64_t)v706, v718, v638);
  uint64_t v644 = (uint64_t)v708;
  v645 = v640;
  uint64_t v646 = v641;
  ((void (*)(char *, char *, uint64_t))v633)(v708, v640, v641);
  swift_allocObject();
  uint64_t v647 = sub_21F89BA78(v715, 200, v642, v644);
  v699(v640, v641);
  v701(v643, v638);
  uint64_t v649 = v723;
  v648 = v724;
  v704(v724, v723);
  v650 = v717;
  *(void *)(v693 + v717[10]) = v647;
  unint64_t v651 = v700 + 28 * v696;
  ((void (*)(char *, void, uint64_t))v702)(v648, v695, v649);
  v652 = (void (*)(unint64_t, char *, uint64_t))v722;
  v722(v643, v697, v638);
  v653 = v719;
  ((void (*)(char *, uint64_t, uint64_t))v719)(v645, v707, v646);
  uint64_t v654 = v649;
  v655 = (void (*)(uint64_t, char *, uint64_t))v709;
  v709(v651, v648, v654);
  *(void *)(v651 + v650[7]) = 500;
  unint64_t v656 = v651 + v650[8];
  unint64_t v693 = v651;
  v657 = v718;
  uint64_t v658 = v716;
  v652(v656, v718, v716);
  uint64_t v659 = v714;
  ((void (*)(unint64_t, char *, uint64_t))v653)(v651 + v650[9], v713, v714);
  v660 = v653;
  uint64_t v661 = v715;
  v655(v715, v724, v723);
  uint64_t v662 = (uint64_t)v706;
  v722(v706, v657, v658);
  uint64_t v663 = (uint64_t)v708;
  v664 = v713;
  ((void (*)(char *, char *, uint64_t))v660)(v708, v713, v659);
  swift_allocObject();
  uint64_t v665 = sub_21F89BA78(v661, 500, v662, v663);
  v699(v664, v659);
  v666 = v657;
  uint64_t v667 = v716;
  v701(v657, v716);
  uint64_t v669 = v723;
  v668 = v724;
  v704(v724, v723);
  v670 = v717;
  *(void *)(v693 + v717[10]) = v665;
  unint64_t v671 = v700 + 29 * v696;
  ((void (*)(char *, void, uint64_t))v702)(v668, v695, v669);
  v672 = v666;
  v673 = (void (*)(unint64_t, char *, uint64_t))v722;
  v722(v672, v697, v667);
  v674 = v719;
  ((void (*)(char *, uint64_t, uint64_t))v719)(v664, v707, v659);
  unint64_t v675 = v671;
  v709(v671, v668, v669);
  *(void *)(v671 + v670[7]) = 1000;
  unint64_t v676 = v671 + v670[8];
  unint64_t v700 = v671;
  v677 = v718;
  uint64_t v678 = v716;
  v673(v676, v718, v716);
  unint64_t v679 = v675 + v670[9];
  uint64_t v680 = v714;
  ((void (*)(unint64_t, char *, uint64_t))v674)(v679, v664, v714);
  v681 = v674;
  uint64_t v682 = v715;
  v709(v715, v724, v723);
  uint64_t v683 = (uint64_t)v706;
  v684 = v677;
  uint64_t v685 = v678;
  v722(v706, v684, v678);
  uint64_t v686 = (uint64_t)v708;
  ((void (*)(char *, char *, uint64_t))v681)(v708, v664, v680);
  swift_allocObject();
  uint64_t v687 = sub_21F89BA78(v682, 1000, v683, v686);
  v699(v664, v680);
  v688 = v701;
  v701(v718, v685);
  v704(v724, v723);
  *(void *)(v700 + v717[10]) = v687;
  v688(v694, v685);
  return v691;
}

uint64_t sub_21F8A4C10(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v12 = MEMORY[0x263F8EE78];
    sub_21F76CFE0(0, v1, 0);
    uint64_t v2 = v12;
    uint64_t v4 = *(void *)(sub_21FA241F0() - 8);
    uint64_t v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    do
    {
      sub_21FA23FE0();
      uint64_t v8 = v7;
      unint64_t v10 = *(void *)(v12 + 16);
      unint64_t v9 = *(void *)(v12 + 24);
      if (v10 >= v9 >> 1) {
        sub_21F76CFE0((char *)(v9 > 1), v10 + 1, 1);
      }
      *(void *)(v12 + 16) = v10 + 1;
      *(void *)(v12 + 8 * v10 + 32) = v8;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_21F8A4D3C(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = *(void *)(result + 16);
  if (v2 < 2) {
    return v1;
  }
  unint64_t v3 = 0;
  unint64_t v4 = v2 >> 1;
  for (unint64_t i = v2 + 3; ; --i)
  {
    if (v3 == i - 4) {
      goto LABEL_5;
    }
    unint64_t v6 = *(void *)(v1 + 16);
    if (v3 >= v6) {
      break;
    }
    if (i - 4 >= v6) {
      goto LABEL_12;
    }
    uint64_t v7 = *(void *)(v1 + 8 * v3 + 32);
    uint64_t v8 = *(void *)(v1 + 8 * i);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_21F93537C(v1);
      uint64_t v1 = result;
    }
    *(void *)(v1 + 8 * v3 + 32) = v8;
    *(void *)(v1 + 8 * i) = v7;
LABEL_5:
    if (v4 == ++v3) {
      return v1;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_21F8A4DF8(uint64_t result)
{
  uint64_t v1 = (char *)result;
  unint64_t v2 = *(void *)(result + 16);
  if (v2 < 2) {
    return (uint64_t)v1;
  }
  uint64_t v3 = 0;
  unint64_t v4 = 0;
  unint64_t v5 = v2 >> 1;
  unint64_t v6 = v2 - 1;
  uint64_t v7 = 16 * v2 + 16;
  unint64_t v15 = v2 >> 1;
  while (1)
  {
    if (v4 == v6) {
      goto LABEL_4;
    }
    unint64_t v8 = *((void *)v1 + 2);
    if (v4 >= v8) {
      break;
    }
    if (v6 >= v8) {
      goto LABEL_13;
    }
    uint64_t v10 = *(void *)&v1[v3 + 32];
    uint64_t v9 = *(void *)&v1[v3 + 40];
    uint64_t v12 = *(void *)&v1[v7];
    uint64_t v11 = *(void *)&v1[v7 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v1 = sub_21F935390((uint64_t)v1);
    }
    uint64_t v13 = &v1[v3];
    uint64_t result = swift_bridgeObjectRelease();
    *((void *)v13 + 4) = v12;
    *((void *)v13 + 5) = v11;
    if (v6 >= *((void *)v1 + 2)) {
      goto LABEL_14;
    }
    uint64_t v14 = &v1[v7];
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v14 = v10;
    *((void *)v14 + 1) = v9;
    unint64_t v5 = v15;
LABEL_4:
    ++v4;
    --v6;
    v7 -= 16;
    v3 += 16;
    if (v5 == v4) {
      return (uint64_t)v1;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_21F8A4F20@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  void (*v7)(uint64_t *__return_ptr, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v3 = result;
  if (!*(unsigned char *)(v2 + 56))
  {
    uint64_t v7 = *(void (**)(uint64_t *__return_ptr, uint64_t))(v2 + 24);
    sub_21F7E15BC(v2, (void (*)(void, void, void, void, void, void, void, void))sub_21F7CE510);
    v7(&v12, v3);
    uint64_t result = v3 + 1;
    if (!__OFADD__(v3, 1))
    {
      v7(&v11, result);
      uint64_t v9 = v11;
      unint64_t v8 = v12;
      uint64_t v10 = sub_21F911470();
      swift_release();
      uint64_t result = swift_release();
      if (!__OFSUB__(v10, 1))
      {
        BOOL v6 = v10 - 1 == v3;
        *(void *)a2 = v8;
        *(void *)(a2 + 8) = v9;
        goto LABEL_11;
      }
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (*(unsigned char *)(v2 + 56) == 1)
  {
    if ((result & 0x8000000000000000) == 0)
    {
      unint64_t v5 = *(void *)(*(void *)v2 + 16);
      if ((uint64_t)(v5 - 1) > result)
      {
        if (v5 > result)
        {
          if (result + 1 < v5)
          {
            BOOL v6 = v5 - 2 == result;
            *(_OWORD *)a2 = *(_OWORD *)(*(void *)v2 + 8 * result + 32);
LABEL_11:
            *(unsigned char *)(a2 + 16) = v6;
            return result;
          }
          goto LABEL_17;
        }
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      goto LABEL_14;
    }
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_21F8A506C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  if (v5)
  {
    BOOL v6 = (uint64_t (*)(uint64_t *))result;
    unint64_t v7 = 0;
    uint64_t v8 = MEMORY[0x263F8EE78];
    while (v7 < *(void *)(a3 + 16))
    {
      uint64_t v11 = *(void *)(a3 + 8 * v7 + 32);
      uint64_t v12 = v11;
      uint64_t result = v6(&v12);
      if (v3)
      {
        swift_release();
        goto LABEL_14;
      }
      if (result)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v13 = v8;
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_21F76CFE0(0, *(void *)(v8 + 16) + 1, 1);
          uint64_t v8 = v13;
        }
        unint64_t v10 = *(void *)(v8 + 16);
        unint64_t v9 = *(void *)(v8 + 24);
        if (v10 >= v9 >> 1)
        {
          uint64_t result = (uint64_t)sub_21F76CFE0((char *)(v9 > 1), v10 + 1, 1);
          uint64_t v8 = v13;
        }
        *(void *)(v8 + 16) = v10 + 1;
        *(void *)(v8 + 8 * v10 + 32) = v11;
      }
      if (v5 == ++v7) {
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
LABEL_14:
    swift_bridgeObjectRelease();
    return v8;
  }
  return result;
}

void sub_21F8A51BC(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v42 = a1;
  uint64_t v43 = a2;
  uint64_t v6 = sub_21F76CA40(&qword_26AD47A98);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_21FA241F0();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v37 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v13 = MEMORY[0x270FA5388](v12);
  uint64_t v45 = (char *)&v30 - v14;
  uint64_t v46 = MEMORY[0x263F8EE78];
  uint64_t v38 = *(void *)(a3 + 16);
  if (v38)
  {
    unint64_t v15 = 0;
    uint64_t v39 = v10 + 48;
    uint64_t v44 = (void (**)(char *))(v10 + 32);
    uint64_t v40 = v10 + 56;
    uint64_t v41 = v10 + 16;
    unint64_t v32 = (v10 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v33 = (void (**)(char *, uint64_t))(v10 + 8);
    uint64_t v36 = v10;
    while (v15 < *(void *)(a3 + 16))
    {
      unint64_t v16 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      uint64_t v17 = *(void *)(v10 + 72);
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v10 + 16))(v8, a3 + v16 + v17 * v15, v9, v13);
      uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56);
      ((void (*)(char *, void, uint64_t, uint64_t))v18)(v8, 0, 1, v9);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1) {
        goto LABEL_17;
      }
      uint64_t v35 = v18;
      uint64_t v19 = a3;
      uint64_t v20 = v8;
      uint64_t v21 = v45;
      uint64_t v22 = *v44;
      uint64_t v23 = v20;
      (*v44)(v45);
      char v24 = v42(v21);
      if (v4)
      {
        (*v33)(v45, v9);
        swift_bridgeObjectRelease();
        swift_release();
        return;
      }
      if (v24)
      {
        ((void (*)(char *, char *, uint64_t))v22)(v37, v45, v9);
        uint64_t v25 = v46;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v34 = 0;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_21F7A24F4(0, *(void *)(v25 + 16) + 1, 1);
          uint64_t v25 = v46;
        }
        unint64_t v28 = *(void *)(v25 + 16);
        unint64_t v27 = *(void *)(v25 + 24);
        unint64_t v29 = v28 + 1;
        if (v28 >= v27 >> 1)
        {
          unint64_t v31 = v28 + 1;
          sub_21F7A24F4(v27 > 1, v28 + 1, 1);
          unint64_t v29 = v31;
          uint64_t v25 = v46;
        }
        *(void *)(v25 + 16) = v29;
        ((void (*)(unint64_t, char *, uint64_t))v22)(v25 + v16 + v28 * v17, v37, v9);
        uint64_t v46 = v25;
        uint64_t v4 = v34;
      }
      else
      {
        (*v33)(v45, v9);
      }
      a3 = v19;
      ++v15;
      uint64_t v8 = v23;
      uint64_t v10 = v36;
      if (v38 == v15)
      {
        v35(v23, 1, 1, v9, v13);
        goto LABEL_17;
      }
    }
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))(v8, 1, 1, v9, v13);
LABEL_17:
    swift_bridgeObjectRelease();
    sub_21F76CA84((uint64_t)v8, &qword_26AD47A98);
  }
}

void sub_21F8A557C(double a1, double a2, double a3)
{
  uint64_t v6 = sub_21F8AEE14(a1, a2, a3);
  uint64_t v21 = MEMORY[0x263F8EE78];
  sub_21F76CFE0(0, v6 & ~(v6 >> 63), 0);
  if (v6 < 0) {
    goto LABEL_30;
  }
  char v7 = 0;
  uint64_t v8 = 0;
  if (!v6)
  {
    double v11 = a1;
    goto LABEL_16;
  }
  double v9 = a1;
  do
  {
    BOOL v10 = v9 <= a2;
    if (a3 > 0.0) {
      BOOL v10 = v9 >= a2;
    }
    if (v10)
    {
      if (v7 & 1 | (v9 != a2)) {
        goto LABEL_28;
      }
      char v7 = 1;
      double v11 = v9;
    }
    else
    {
      BOOL v12 = __OFADD__(v8++, 1);
      if (v12) {
        goto LABEL_29;
      }
      double v11 = a1 + (double)v8 * a3;
    }
    unint64_t v14 = *(void *)(v21 + 16);
    unint64_t v13 = *(void *)(v21 + 24);
    if (v14 >= v13 >> 1) {
      sub_21F76CFE0((char *)(v13 > 1), v14 + 1, 1);
    }
    double v15 = __exp10(v9);
    *(void *)(v21 + 16) = v14 + 1;
    *(double *)(v21 + 8 * v14 + 32) = v15;
    double v9 = v11;
    --v6;
  }
  while (v6);
  while (1)
  {
LABEL_16:
    BOOL v16 = v11 <= a2;
    if (a3 > 0.0) {
      BOOL v16 = v11 >= a2;
    }
    if (!v16) {
      break;
    }
    if ((v11 != a2) | v7 & 1) {
      return;
    }
    char v7 = 1;
    double v17 = v11;
LABEL_23:
    unint64_t v19 = *(void *)(v21 + 16);
    unint64_t v18 = *(void *)(v21 + 24);
    if (v19 >= v18 >> 1) {
      sub_21F76CFE0((char *)(v18 > 1), v19 + 1, 1);
    }
    double v20 = __exp10(v11);
    *(void *)(v21 + 16) = v19 + 1;
    *(double *)(v21 + 8 * v19 + 32) = v20;
    double v11 = v17;
  }
  BOOL v12 = __OFADD__(v8++, 1);
  if (!v12)
  {
    double v17 = a1 + (double)v8 * a3;
    goto LABEL_23;
  }
  __break(1u);
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

void sub_21F8A5778(double a1, double a2, double a3)
{
  uint64_t v6 = sub_21F8AEE14(a1, a2, a3);
  uint64_t v21 = MEMORY[0x263F8EE78];
  sub_21F76CFE0(0, v6 & ~(v6 >> 63), 0);
  if (v6 < 0) {
    goto LABEL_30;
  }
  char v7 = 0;
  uint64_t v8 = 0;
  if (!v6)
  {
    double v11 = a1;
    goto LABEL_16;
  }
  double v9 = a1;
  do
  {
    BOOL v10 = v9 <= a2;
    if (a3 > 0.0) {
      BOOL v10 = v9 >= a2;
    }
    if (v10)
    {
      if (v7 & 1 | (v9 != a2)) {
        goto LABEL_28;
      }
      char v7 = 1;
      double v11 = v9;
    }
    else
    {
      BOOL v12 = __OFADD__(v8++, 1);
      if (v12) {
        goto LABEL_29;
      }
      double v11 = a1 + (double)v8 * a3;
    }
    unint64_t v14 = *(void *)(v21 + 16);
    unint64_t v13 = *(void *)(v21 + 24);
    if (v14 >= v13 >> 1) {
      sub_21F76CFE0((char *)(v13 > 1), v14 + 1, 1);
    }
    double v15 = __exp10(v9);
    *(void *)(v21 + 16) = v14 + 1;
    *(double *)(v21 + 8 * v14 + 32) = -v15;
    double v9 = v11;
    --v6;
  }
  while (v6);
  while (1)
  {
LABEL_16:
    BOOL v16 = v11 <= a2;
    if (a3 > 0.0) {
      BOOL v16 = v11 >= a2;
    }
    if (!v16) {
      break;
    }
    if ((v11 != a2) | v7 & 1) {
      return;
    }
    char v7 = 1;
    double v17 = v11;
LABEL_23:
    unint64_t v19 = *(void *)(v21 + 16);
    unint64_t v18 = *(void *)(v21 + 24);
    if (v19 >= v18 >> 1) {
      sub_21F76CFE0((char *)(v18 > 1), v19 + 1, 1);
    }
    double v20 = __exp10(v11);
    *(void *)(v21 + 16) = v19 + 1;
    *(double *)(v21 + 8 * v19 + 32) = -v20;
    double v11 = v17;
  }
  BOOL v12 = __OFADD__(v8++, 1);
  if (!v12)
  {
    double v17 = a1 + (double)v8 * a3;
    goto LABEL_23;
  }
  __break(1u);
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

void sub_21F8A597C()
{
  void (*v4)(uint64_t *__return_ptr, uint64_t);
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v1 = v0;
  if (*(unsigned char *)(v0 + 56))
  {
    if (*(unsigned char *)(v0 + 56) == 1)
    {
      uint64_t v2 = sub_21F7CE510;
LABEL_19:
      sub_21F7E15BC(v1, (void (*)(void, void, void, void, void, void, void, void))v2);
    }
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 16);
    if (v3)
    {
      if ((v3 & 0x8000000000000000) == 0)
      {
        uint64_t v4 = *(void (**)(uint64_t *__return_ptr, uint64_t))(v0 + 24);
        sub_21F7E15BC(v0, (void (*)(void, void, void, void, void, void, void, void))sub_21F7CE510);
        sub_21F7E15BC(v0, (void (*)(void, void, void, void, void, void, void, void))sub_21F7CE510);
        uint64_t v5 = 0;
        uint64_t v6 = (char *)MEMORY[0x263F8EE78];
        while (1)
        {
          char v7 = v5 + 1;
          if (__OFADD__(v5, 1)) {
            break;
          }
          sub_21F7E15BC(v0, (void (*)(void, void, void, void, void, void, void, void))sub_21F7CE510);
          v4(&v15, v5);
          v4(&v14, v5 + 1);
          uint64_t v8 = v14;
          double v9 = v15;
          sub_21F7E15BC(v0, (void (*)(void, void, void, void, void, void, void, void))sub_21F7CE510);
          swift_release_n();
          swift_release_n();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v6 = sub_21F7E8F4C(0, *((void *)v6 + 2) + 1, 1, v6);
          }
          double v11 = *((void *)v6 + 2);
          BOOL v10 = *((void *)v6 + 3);
          if (v11 >= v10 >> 1) {
            uint64_t v6 = sub_21F7E8F4C((char *)(v10 > 1), v11 + 1, 1, v6);
          }
          *((void *)v6 + 2) = v11 + 1;
          *(void *)&v6[8 * v11 + 32] = v9;
          sub_21F7E15BC(v0, (void (*)(void, void, void, void, void, void, void, void))sub_21F7CE510);
          swift_release();
          swift_release();
          if (v3 - 1 == v5)
          {
            unint64_t v13 = *((void *)v6 + 2);
            BOOL v12 = *((void *)v6 + 3);
            if (v13 >= v12 >> 1) {
              uint64_t v6 = sub_21F7E8F4C((char *)(v12 > 1), v13 + 1, 1, v6);
            }
            *((void *)v6 + 2) = v13 + 1;
            *(void *)&v6[8 * v13 + 32] = v8;
          }
          ++v5;
          if (v7 == v3)
          {
            uint64_t v2 = sub_21F7CE70C;
            sub_21F7E15BC(v1, (void (*)(void, void, void, void, void, void, void, void))sub_21F7CE70C);
            goto LABEL_19;
          }
        }
        __break(1u);
      }
      __break(1u);
    }
  }
}

void static AxisMarkPreset.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

void static AxisMarkPosition.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t static AxisMarkValues.automatic.getter@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  type metadata accessor for AxisMarkValues.Storage.Stride(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v2 = type metadata accessor for AxisMarkValues.Storage(0);
  uint64_t v3 = *(int *)(v2 + 24);
  *(unsigned char *)(a1 + *(int *)(v2 + 20)) = 2;
  *(unsigned char *)(a1 + v3) = 2;
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v4(a1, 0, 1, v2);
}

_OWORD *AxisMarks.init(preset:position:values:content:)@<X0>(unsigned char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unsigned char *a8@<X8>)
{
  char v14 = *a2;
  *a8 = *a1;
  a8[1] = v14;
  uint64_t v15 = type metadata accessor for AxisMarks();
  sub_21F76C9DC(a3, (uint64_t)&a8[*(int *)(v15 + 40)], &qword_26AD48FA0);
  BOOL v16 = (void *)swift_allocObject();
  double v16[2] = a6;
  v16[3] = a7;
  v16[4] = a4;
  v16[5] = a5;
  *(void *)&long long v18 = sub_21F8A5DD8;
  *((void *)&v18 + 1) = v16;
  char v19 = 1;
  return sub_21F8A5E44(&v18, &a8[*(int *)(v15 + 44)]);
}

uint64_t type metadata accessor for AxisMarks()
{
  return sub_21F764F08();
}

uint64_t sub_21F8A5DA0()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_21F8A5DD8@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(uint64_t (**)(long long *))(v2 + 32);
  char v4 = *((unsigned char *)a1 + 16);
  long long v6 = *a1;
  char v7 = v4;
  long long v8 = *(long long *)((char *)a1 + 24);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 16);
  sub_21F77E8F8((uint64_t *)a2);
  return v3(&v6);
}

_OWORD *sub_21F8A5E44(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(long long *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

_OWORD *AxisMarks.init<A>(preset:position:values:content:)@<X0>(unsigned char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned char *a9@<X8>, uint64_t a10)
{
  char v17 = *a2;
  *a9 = *a1;
  a9[1] = v17;
  uint64_t v18 = type metadata accessor for AxisMarks();
  uint64_t v19 = (uint64_t)&a9[*(int *)(v18 + 40)];
  sub_21F8A5F8C(a3, a7, a10, v19);
  uint64_t v20 = type metadata accessor for AxisMarkValues.Storage(0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 0, 1, v20);
  uint64_t v21 = (void *)swift_allocObject();
  void v21[2] = a6;
  v21[3] = a7;
  v21[4] = a8;
  void v21[5] = a10;
  v21[6] = a4;
  v21[7] = a5;
  *(void *)&long long v23 = sub_21F8A603C;
  *((void *)&v23 + 1) = v21;
  char v24 = 1;
  return sub_21F8A5E44(&v23, &a9[*(int *)(v18 + 44)]);
}

uint64_t sub_21F8A5F8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = sub_21F752060(a1, a2, a3);
  char v7 = v6;
  swift_bridgeObjectRelease();
  *(void *)a4 = v5;
  *(unsigned char *)(a4 + 8) = v7;
  type metadata accessor for AxisMarkValues.Storage.Stride(0);
  swift_storeEnumTagMultiPayload();
  uint64_t result = type metadata accessor for AxisMarkValues.Storage(0);
  uint64_t v9 = *(int *)(result + 24);
  *(unsigned char *)(a4 + *(int *)(result + 20)) = 2;
  *(unsigned char *)(a4 + v9) = 2;
  return result;
}

uint64_t sub_21F8A6004()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_21F8A603C@<X0>(long long *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = v2[2];
  uint64_t v4 = v2[4];
  uint64_t v5 = (uint64_t (*)(long long *))v2[6];
  char v6 = *((unsigned char *)a1 + 16);
  long long v8 = *a1;
  char v9 = v6;
  long long v10 = *(long long *)((char *)a1 + 24);
  a2[3] = v3;
  a2[4] = v4;
  sub_21F77E8F8(a2);
  return v5(&v8);
}

uint64_t AxisMarks.init(preset:position:values:content:)@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unsigned char *a8@<X8>)
{
  uint64_t v16 = type metadata accessor for AxisMarkValues(0);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v19 = *a2;
  char v24 = *a1;
  char v23 = v19;
  sub_21F8A7F14(a3, (uint64_t)v18, type metadata accessor for AxisMarkValues);
  uint64_t v20 = (void *)swift_allocObject();
  uint64_t v20[2] = a6;
  v20[3] = a7;
  v20[4] = a4;
  v20[5] = a5;
  AxisMarks.init(preset:position:values:content:)(&v24, &v23, (uint64_t)v18, (uint64_t)sub_21F8A6338, (uint64_t)v20, a6, a7, a8);
  return sub_21F8A7F7C(a3, type metadata accessor for AxisMarkValues);
}

uint64_t type metadata accessor for AxisMarkValues(uint64_t a1)
{
  return sub_21F769038(a1, (uint64_t *)&unk_26AD46668);
}

uint64_t sub_21F8A6204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a4 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](a1);
  long long v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  unint64_t v13 = (char *)&v17 - v12;
  v14(v11);
  sub_21F8B0FF0(v10, a4, a5);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, a4);
  sub_21F8B0FF0(v13, a4, a5);
  return ((uint64_t (*)(char *, uint64_t))v15)(v13, a4);
}

uint64_t sub_21F8A6338(uint64_t a1)
{
  return sub_21F8A6204(a1, v1[4], v1[5], v1[2], v1[3]);
}

_OWORD *AxisMarks.init<A>(preset:position:values:content:)@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned char *a9@<X8>, uint64_t a10)
{
  char v17 = *a2;
  char v21 = *a1;
  char v20 = v17;
  uint64_t v18 = (void *)swift_allocObject();
  _OWORD v18[2] = a6;
  v18[3] = a7;
  void v18[4] = a8;
  v18[5] = a10;
  v18[6] = a4;
  v18[7] = a5;
  return AxisMarks.init<A>(preset:position:values:content:)(&v21, &v20, a3, (uint64_t)sub_21F8A6540, (uint64_t)v18, a6, a7, a8, a9, a10);
}

uint64_t sub_21F8A640C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *(void *)(a4 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  char v14 = (char *)&v18 - v13;
  v15(v12);
  sub_21F8B0FF0(v11, a4, a6);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v11, a4);
  sub_21F8B0FF0(v14, a4, a6);
  return ((uint64_t (*)(char *, uint64_t))v16)(v14, a4);
}

uint64_t sub_21F8A6540(uint64_t a1)
{
  return sub_21F8A640C(a1, v1[6], v1[7], v1[2], v1[3], v1[4]);
}

_OWORD *AxisMarks.init<A>(format:preset:position:values:stroke:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned char *a9@<X8>)
{
  char v16 = *a3;
  *a9 = *a2;
  a9[1] = v16;
  uint64_t v17 = sub_21F76CA40(&qword_267EE80D8);
  sub_21F76C978(a4, (uint64_t)&a9[*(int *)(v17 + 40)], &qword_26AD48FA0);
  uint64_t v20 = sub_21F76CA40(&qword_267EE7968);
  unint64_t v21 = sub_21F80FF54();
  *(void *)&long long v19 = swift_allocObject();
  sub_21F9C290C(a1, a5, a6, a7, a8, v19 + 16);
  sub_21F7E0D30(a5);
  sub_21F8A7F7C(a4, type metadata accessor for AxisMarkValues);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a6 - 8) + 8))(a1, a6);
  sub_21F77F300(&v19, (uint64_t)v22);
  char v23 = 0;
  return sub_21F8A5E44(v22, &a9[*(int *)(v17 + 44)]);
}

uint64_t sub_21F8A66A0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21F810028(*(void *)(v0 + 288), *(void *)(v0 + 296), *(unsigned char *)(v0 + 304));

  return MEMORY[0x270FA0238](v0, 305, 7);
}

_OWORD *AxisMarks.init<A, B>(format:preset:position:values:stroke:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned char *a9@<X8>, uint64_t a10)
{
  char v17 = *a3;
  *a9 = *a2;
  a9[1] = v17;
  uint64_t v18 = sub_21F76CA40(&qword_267EE80D8);
  uint64_t v19 = (uint64_t)&a9[*(int *)(v18 + 40)];
  sub_21F8A5F8C(a4, a6, a8, v19);
  uint64_t v20 = type metadata accessor for AxisMarkValues.Storage(0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 0, 1, v20);
  uint64_t v23 = sub_21F76CA40(&qword_267EE7968);
  unint64_t v24 = sub_21F80FF54();
  *(void *)&long long v22 = swift_allocObject();
  sub_21F9C290C(a1, a5, a7, a10, a8, v22 + 16);
  sub_21F7E0D30(a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a7 - 8) + 8))(a1, a7);
  sub_21F77F300(&v22, (uint64_t)v25);
  char v26 = 0;
  return sub_21F8A5E44(v25, &a9[*(int *)(v18 + 44)]);
}

_OWORD *AxisMarks.init<>(preset:position:values:stroke:)@<X0>(unsigned char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  char v8 = *a2;
  *a5 = *a1;
  a5[1] = v8;
  uint64_t v9 = sub_21F76CA40(&qword_267EE80D8);
  sub_21F76C978(a3, (uint64_t)&a5[*(int *)(v9 + 40)], &qword_26AD48FA0);
  uint64_t v12 = sub_21F76CA40(&qword_267EE7968);
  unint64_t v13 = sub_21F80FF54();
  *(void *)&long long v11 = swift_allocObject();
  sub_21F9C2B4C(a4, v11 + 16);
  sub_21F7E0D30(a4);
  sub_21F8A7F7C(a3, type metadata accessor for AxisMarkValues);
  sub_21F77F300(&v11, (uint64_t)v14);
  char v15 = 0;
  return sub_21F8A5E44(v14, &a5[*(int *)(v9 + 44)]);
}

uint64_t AxisMarks.init<A>(preset:position:values:stroke:)@<X0>(unsigned char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned char *a7@<X8>)
{
  char v12 = *a2;
  *a7 = *a1;
  a7[1] = v12;
  uint64_t v13 = sub_21F76CA40(&qword_267EE80D8);
  uint64_t v14 = (uint64_t)&a7[*(int *)(v13 + 40)];
  sub_21F8A5F8C(a3, a5, a6, v14);
  uint64_t v15 = type metadata accessor for AxisMarkValues.Storage(0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 0, 1, v15);
  char v16 = &a7[*(int *)(v13 + 44)];
  *((void *)v16 + 3) = sub_21F76CA40(&qword_267EE7968);
  *((void *)v16 + 4) = sub_21F80FF54();
  uint64_t v17 = swift_allocObject();
  *(void *)char v16 = v17;
  sub_21F9C2B4C(a4, v17 + 16);
  uint64_t result = sub_21F7E0D30(a4);
  v16[40] = 0;
  return result;
}

uint64_t static AxisMarks._makeAxisContent(_:_:)@<X0>(__int16 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AxisMarksConfiguration();
  uint64_t v5 = (int *)(v4 - 8);
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v8 = (_WORD *)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __int16 v9 = *a1;
  uint64_t v10 = type metadata accessor for AxisMarks();
  sub_21F76C978((uint64_t)a1 + *(int *)(v10 + 40), (uint64_t)v8 + v5[8], &qword_26AD48FA0);
  sub_21F7AD15C((uint64_t)a1 + *(int *)(v10 + 44), (uint64_t)v8 + v5[9]);
  long long v11 = (char *)v8 + v5[10];
  *((void *)v11 + 4) = 0;
  *(_OWORD *)long long v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *char v8 = v9;
  sub_21F76CA40(&qword_26AD46B50);
  unint64_t v12 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_21FA28550;
  uint64_t result = sub_21F8A7EAC((uint64_t)v8, v13 + v12, (uint64_t (*)(void))type metadata accessor for AxisMarksConfiguration);
  *a2 = v13;
  return result;
}

uint64_t sub_21F8A6C04@<X0>(__int16 *a1@<X0>, uint64_t *a2@<X8>)
{
  return static AxisMarks._makeAxisContent(_:_:)(a1, a2);
}

void static AxisMarkPreset.extended.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static AxisMarkPreset.aligned.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static AxisMarkPreset.inset.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t AxisMarkPreset.description.getter()
{
  uint64_t result = 0x6465646E65747865;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x64656E67696C61;
      break;
    case 2:
      uint64_t result = 0x7465736E69;
      break;
    case 3:
      uint64_t result = 0x6974616D6F747561;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_21F8A6CC0()
{
  uint64_t result = 0x6974616D6F747561;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x64656E67696C61;
      break;
    case 2:
      uint64_t result = 0x7465736E69;
      break;
    case 3:
      return result;
    default:
      uint64_t result = 0x6465646E65747865;
      break;
  }
  return result;
}

uint64_t AxisMarkPosition.description.getter()
{
  uint64_t result = 0x676E696461656CLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6D6F74746F62;
      break;
    case 2:
      return result;
    case 3:
      uint64_t result = 0x676E696C69617274;
      break;
    case 4:
      uint64_t result = 0x6974616D6F747561;
      break;
    default:
      uint64_t result = 7368564;
      break;
  }
  return result;
}

uint64_t sub_21F8A6DF4()
{
  uint64_t result = 0x6974616D6F747561;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6D6F74746F62;
      break;
    case 2:
      uint64_t result = 0x676E696461656CLL;
      break;
    case 3:
      uint64_t result = 0x676E696C69617274;
      break;
    case 4:
      return result;
    default:
      uint64_t result = 7368564;
      break;
  }
  return result;
}

uint64_t static AxisMarkValues.automatic(desiredCount:roundLowerBound:roundUpperBound:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(void *)a5 = a1;
  *(unsigned char *)(a5 + 8) = a2 & 1;
  *(void *)(a5 + 16) = 0;
  *(unsigned char *)(a5 + 24) = 1;
  type metadata accessor for AxisMarkValues.Storage.Stride(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v8 = type metadata accessor for AxisMarkValues.Storage(0);
  uint64_t v9 = *(int *)(v8 + 24);
  *(unsigned char *)(a5 + *(int *)(v8 + 20)) = a3;
  *(unsigned char *)(a5 + v9) = a4;
  uint64_t v10 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);

  return v10(a5, 0, 1, v8);
}

uint64_t static AxisMarkValues.automatic<A>(minimumStride:desiredCount:roundLowerBound:roundUpperBound:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  __n128 v11 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, __n128))(v13 + 16))((char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  sub_21F885234();
  sub_21FA25A80();
  uint64_t v14 = v18[1];
  *(void *)a6 = a2;
  *(unsigned char *)(a6 + 8) = a3 & 1;
  *(void *)(a6 + 16) = v14;
  *(unsigned char *)(a6 + 24) = 0;
  type metadata accessor for AxisMarkValues.Storage.Stride(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v15 = type metadata accessor for AxisMarkValues.Storage(0);
  uint64_t v16 = *(int *)(v15 + 24);
  *(unsigned char *)(a6 + *(int *)(v15 + 20)) = a4;
  *(unsigned char *)(a6 + v16) = a5;
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a6, 0, 1, v15);
}

uint64_t static AxisMarkValues.stride(by:count:roundLowerBound:roundUpperBound:calendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = sub_21F76CA40(&qword_26AD46658);
  uint64_t v13 = *(int *)(v12 + 48);
  uint64_t v14 = a6 + *(int *)(v12 + 64);
  uint64_t v15 = sub_21FA24310();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(a6, a1, v15);
  *(void *)(a6 + v13) = a2;
  sub_21F76C978(a5, v14, &qword_26AD48588);
  type metadata accessor for AxisMarkValues.Storage.Stride(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v16 = type metadata accessor for AxisMarkValues.Storage(0);
  uint64_t v17 = *(int *)(v16 + 24);
  *(unsigned char *)(a6 + *(int *)(v16 + 20)) = a3;
  *(unsigned char *)(a6 + v17) = a4;
  uint64_t v18 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);

  return v18(a6, 0, 1, v16);
}

uint64_t static AxisMarkValues.stride<A>(by:roundLowerBound:roundUpperBound:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, void *a4@<X8>)
{
  __n128 v7 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, __n128))(v9 + 16))((char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  sub_21F885234();
  sub_21FA25A80();
  *a4 = v13[1];
  type metadata accessor for AxisMarkValues.Storage.Stride(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = type metadata accessor for AxisMarkValues.Storage(0);
  uint64_t v11 = *(int *)(v10 + 24);
  *((unsigned char *)a4 + *(int *)(v10 + 20)) = a2;
  *((unsigned char *)a4 + v11) = a3;
  return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a4, 0, 1, v10);
}

uint64_t AxisMarkValues.description.getter()
{
  uint64_t v72 = sub_21FA241F0();
  uint64_t v1 = *(void *)(v72 - 8);
  MEMORY[0x270FA5388](v72);
  uint64_t v3 = (char *)&v71 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_21FA24310();
  uint64_t v75 = *(void *)(v4 - 8);
  uint64_t v76 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v74 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_21F76CA40(&qword_26AD48FA0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AxisMarkValues.Storage(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21F76C978(v0, (uint64_t)v11, &qword_26AD48FA0);
  uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  uint64_t v77 = v12;
  if (v16(v11, 1, v12) == 1)
  {
    uint64_t v17 = 0x6974616D6F747561;
    sub_21F76CA84((uint64_t)v11, &qword_26AD48FA0);
    return v17;
  }
  sub_21F8A7EAC((uint64_t)v11, (uint64_t)v15, type metadata accessor for AxisMarkValues.Storage);
  uint64_t v73 = v15;
  sub_21F8A7F14((uint64_t)v15, (uint64_t)v8, type metadata accessor for AxisMarkValues.Storage.Stride);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v21 = sub_21F76CA40(&qword_26AD46658);
      long long v22 = *(char **)&v8[*(int *)(v21 + 48)];
      (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v74, v8, v76);
      v79[0] = 0;
      v79[1] = 0xE000000000000000;
      sub_21FA25D40();
      sub_21FA266A0();
      uint64_t v23 = v79[0];
      uint64_t v24 = v79[1];
      uint64_t v19 = sub_21F7E5FD8(0, 1, 1, MEMORY[0x263F8EE78]);
      unint64_t v26 = *((void *)v19 + 2);
      unint64_t v25 = *((void *)v19 + 3);
      if (v26 >= v25 >> 1) {
        uint64_t v19 = sub_21F7E5FD8((char *)(v25 > 1), v26 + 1, 1, v19);
      }
      *((void *)v19 + 2) = v26 + 1;
      unint64_t v27 = &v19[16 * v26];
      *((void *)v27 + 4) = v23;
      *((void *)v27 + 5) = v24;
      if (v22 != (char *)1)
      {
        strcpy((char *)v79, "count: ");
        v79[1] = 0xE700000000000000;
        uint64_t v78 = v22;
        sub_21FA26860();
        sub_21FA25D40();
        swift_bridgeObjectRelease();
        uint64_t v28 = v79[0];
        uint64_t v29 = v79[1];
        unint64_t v31 = *((void *)v19 + 2);
        unint64_t v30 = *((void *)v19 + 3);
        if (v31 >= v30 >> 1) {
          uint64_t v19 = sub_21F7E5FD8((char *)(v30 > 1), v31 + 1, 1, v19);
        }
        *((void *)v19 + 2) = v31 + 1;
        unint64_t v32 = &v19[16 * v31];
        *((void *)v32 + 4) = v28;
        *((void *)v32 + 5) = v29;
      }
      uint64_t v17 = 0x656469727473;
      uint64_t v33 = (uint64_t)&v8[*(int *)(v21 + 64)];
      (*(void (**)(char *, uint64_t))(v75 + 8))(v74, v76);
      sub_21F76CA84(v33, &qword_26AD48588);
      unint64_t v34 = 0xE600000000000000;
      uint64_t v20 = (uint64_t)v73;
      goto LABEL_33;
    case 2u:
      v79[0] = 0;
      v79[1] = 0xE000000000000000;
      sub_21FA25D40();
      sub_21FA25FA0();
      uint64_t v35 = v79[0];
      uint64_t v36 = v79[1];
      uint64_t v19 = sub_21F7E5FD8(0, 1, 1, MEMORY[0x263F8EE78]);
      unint64_t v38 = *((void *)v19 + 2);
      unint64_t v37 = *((void *)v19 + 3);
      if (v38 >= v37 >> 1) {
        uint64_t v19 = sub_21F7E5FD8((char *)(v37 > 1), v38 + 1, 1, v19);
      }
      uint64_t v20 = (uint64_t)v73;
      uint64_t v17 = 0x656469727473;
      *((void *)v19 + 2) = v38 + 1;
      uint64_t v39 = &v19[16 * v38];
      *((void *)v39 + 4) = v35;
      *((void *)v39 + 5) = v36;
      unint64_t v34 = 0xE600000000000000;
      goto LABEL_33;
    case 3u:
      uint64_t v40 = *(void *)v8;
      if (!v8[8])
      {
        uint64_t v69 = MEMORY[0x263F8D538];
LABEL_51:
        uint64_t v17 = MEMORY[0x223C55290](*(void *)v8, v69);
        swift_bridgeObjectRelease();
        goto LABEL_54;
      }
      if (v8[8] != 1)
      {
        uint64_t v69 = MEMORY[0x263F8D310];
        goto LABEL_51;
      }
      v79[0] = 0;
      v79[1] = 0xE000000000000000;
      int64_t v41 = *(void *)(v40 + 16);
      unint64_t v42 = (char *)MEMORY[0x263F8EE78];
      if (v41)
      {
        uint64_t v78 = (char *)MEMORY[0x263F8EE78];
        sub_21F7A24F4(0, v41, 0);
        unint64_t v42 = v78;
        uint64_t v43 = v40 + 32;
        uint64_t v44 = v72;
        do
        {
          sub_21FA23FD0();
          uint64_t v78 = v42;
          unint64_t v46 = *((void *)v42 + 2);
          unint64_t v45 = *((void *)v42 + 3);
          if (v46 >= v45 >> 1)
          {
            sub_21F7A24F4(v45 > 1, v46 + 1, 1);
            uint64_t v44 = v72;
            unint64_t v42 = v78;
          }
          *((void *)v42 + 2) = v46 + 1;
          (*(void (**)(char *, char *, uint64_t))(v1 + 32))(&v42[((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(void *)(v1 + 72) * v46], v3, v44);
          v43 += 8;
          --v41;
        }
        while (v41);
      }
      else
      {
        uint64_t v44 = v72;
      }
      MEMORY[0x223C55290](v42, v44);
      sub_21FA25D40();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v17 = v79[0];
LABEL_54:
      uint64_t v68 = (uint64_t)v73;
LABEL_55:
      sub_21F8A7F7C(v68, type metadata accessor for AxisMarkValues.Storage);
      return v17;
    default:
      char v18 = v8[24];
      if (v8[8])
      {
        uint64_t v19 = (char *)MEMORY[0x263F8EE78];
        uint64_t v20 = (uint64_t)v73;
      }
      else
      {
        uint64_t v47 = *(char **)v8;
        v79[0] = 0;
        v79[1] = 0xE000000000000000;
        sub_21FA26510();
        swift_bridgeObjectRelease();
        strcpy((char *)v79, "desiredCount: ");
        HIBYTE(v79[1]) = -18;
        uint64_t v78 = v47;
        sub_21FA26860();
        sub_21FA25D40();
        swift_bridgeObjectRelease();
        uint64_t v48 = v79[0];
        uint64_t v49 = v79[1];
        uint64_t v19 = sub_21F7E5FD8(0, 1, 1, MEMORY[0x263F8EE78]);
        unint64_t v51 = *((void *)v19 + 2);
        unint64_t v50 = *((void *)v19 + 3);
        if (v51 >= v50 >> 1) {
          uint64_t v19 = sub_21F7E5FD8((char *)(v50 > 1), v51 + 1, 1, v19);
        }
        uint64_t v20 = (uint64_t)v73;
        *((void *)v19 + 2) = v51 + 1;
        unint64_t v52 = &v19[16 * v51];
        *((void *)v52 + 4) = v48;
        *((void *)v52 + 5) = v49;
      }
      unint64_t v34 = 0xE900000000000063;
      uint64_t v17 = 0x6974616D6F747561;
      if ((v18 & 1) == 0)
      {
        v79[0] = 0;
        v79[1] = 0xE000000000000000;
        sub_21FA26510();
        sub_21FA25D40();
        sub_21FA25FA0();
        uint64_t v53 = v79[0];
        uint64_t v54 = v79[1];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v19 = sub_21F7E5FD8(0, *((void *)v19 + 2) + 1, 1, v19);
        }
        unint64_t v56 = *((void *)v19 + 2);
        unint64_t v55 = *((void *)v19 + 3);
        if (v56 >= v55 >> 1) {
          uint64_t v19 = sub_21F7E5FD8((char *)(v55 > 1), v56 + 1, 1, v19);
        }
        *((void *)v19 + 2) = v56 + 1;
        uint64_t v57 = &v19[16 * v56];
        *((void *)v57 + 4) = v53;
        *((void *)v57 + 5) = v54;
      }
LABEL_33:
      if (*(unsigned char *)(v20 + *(int *)(v77 + 20)) != 2)
      {
        v79[0] = 0;
        v79[1] = 0xE000000000000000;
        sub_21FA26510();
        swift_bridgeObjectRelease();
        v79[0] = 0xD000000000000011;
        v79[1] = 0x800000021FA5ECA0;
        sub_21FA25D40();
        swift_bridgeObjectRelease();
        uint64_t v58 = v79[0];
        uint64_t v59 = v79[1];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v19 = sub_21F7E5FD8(0, *((void *)v19 + 2) + 1, 1, v19);
        }
        unint64_t v61 = *((void *)v19 + 2);
        unint64_t v60 = *((void *)v19 + 3);
        if (v61 >= v60 >> 1) {
          uint64_t v19 = sub_21F7E5FD8((char *)(v60 > 1), v61 + 1, 1, v19);
        }
        *((void *)v19 + 2) = v61 + 1;
        uint64_t v62 = &v19[16 * v61];
        *((void *)v62 + 4) = v58;
        *((void *)v62 + 5) = v59;
        uint64_t v20 = (uint64_t)v73;
      }
      if (*(unsigned char *)(v20 + *(int *)(v77 + 24)) == 2)
      {
        if (!*((void *)v19 + 2))
        {
          swift_bridgeObjectRelease();
          goto LABEL_48;
        }
      }
      else
      {
        v79[0] = 0;
        v79[1] = 0xE000000000000000;
        sub_21FA26510();
        swift_bridgeObjectRelease();
        v79[0] = 0xD000000000000011;
        v79[1] = 0x800000021FA5EC80;
        sub_21FA25D40();
        swift_bridgeObjectRelease();
        uint64_t v63 = v79[0];
        uint64_t v64 = v79[1];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v19 = sub_21F7E5FD8(0, *((void *)v19 + 2) + 1, 1, v19);
        }
        unint64_t v66 = *((void *)v19 + 2);
        unint64_t v65 = *((void *)v19 + 3);
        if (v66 >= v65 >> 1) {
          uint64_t v19 = sub_21F7E5FD8((char *)(v65 > 1), v66 + 1, 1, v19);
        }
        *((void *)v19 + 2) = v66 + 1;
        uint64_t v67 = &v19[16 * v66];
        *((void *)v67 + 4) = v63;
        *((void *)v67 + 5) = v64;
      }
      v79[0] = v17;
      v79[1] = v34;
      sub_21FA25D40();
      uint64_t v78 = v19;
      sub_21F76CA40(&qword_26AD468B8);
      sub_21F7F5EF8();
      sub_21FA25C30();
      swift_bridgeObjectRelease();
      sub_21FA25D40();
      swift_bridgeObjectRelease();
      sub_21FA25D40();
      uint64_t v17 = v79[0];
LABEL_48:
      uint64_t v68 = v20;
      goto LABEL_55;
  }
}

uint64_t sub_21F8A7EAC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_21F8A7F14(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_21F8A7F7C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_21F8A7FE0(uint64_t a1, int a2, uint64_t a3, int a4)
{
  int v32 = a4;
  int v34 = a2;
  uint64_t v30 = sub_21F76CA40((uint64_t *)&unk_26AD4A5E0);
  MEMORY[0x270FA5388](v30);
  uint64_t v33 = (uint64_t)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v37 = (uint64_t)&v30 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v12 = sub_21FA241F0();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  unint64_t v31 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v30 - v16;
  __n128 v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v30 - v20;
  long long v22 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16);
  uint64_t v35 = a1;
  v22((char *)&v30 - v20, a1, v12, v19);
  uint64_t v36 = a3;
  sub_21F76C978(a3, (uint64_t)v11, (uint64_t *)&unk_26AD4A5E0);
  if (v34)
  {
    char v23 = 1;
  }
  else
  {
    sub_21F8AF93C((unint64_t *)&qword_26AD46C28, MEMORY[0x263F07490]);
    char v23 = sub_21FA25C60();
  }
  sub_21F76CA84((uint64_t)v11, (uint64_t *)&unk_26AD4A5E0);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v13 + 8);
  v24(v21, v12);
  ((void (*)(char *, uint64_t, uint64_t))v22)(v17, v35, v12);
  uint64_t v25 = v37;
  sub_21F76C978(v36, v37, (uint64_t *)&unk_26AD4A5E0);
  if (v23)
  {
    unint64_t v26 = v31;
    ((void (*)(char *, char *, uint64_t))v22)(v31, v17, v12);
    uint64_t v27 = v33;
    sub_21F76C978(v25, v33, (uint64_t *)&unk_26AD4A5E0);
    if (v32)
    {
      char v28 = 1;
    }
    else
    {
      sub_21F8AF93C((unint64_t *)&qword_26AD46C28, MEMORY[0x263F07490]);
      char v28 = sub_21FA25C70();
    }
    sub_21F76CA84(v27, (uint64_t *)&unk_26AD4A5E0);
    v24(v26, v12);
  }
  else
  {
    char v28 = 0;
  }
  sub_21F76CA84(v37, (uint64_t *)&unk_26AD4A5E0);
  v24(v17, v12);
  return v28 & 1;
}

uint64_t sub_21F8A8380()
{
  if (qword_267EE6E48 != -1) {
    swift_once();
  }
  swift_beginAccess();
  char v0 = sub_21F7D51E8(&v3, 5);
  uint64_t result = swift_endAccess();
  if (v0)
  {
    sub_21F76CA40(qword_267EE80E8);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_21FA28550;
    *(void *)(v2 + 56) = MEMORY[0x263F8D310];
    *(void *)(v2 + 32) = 0xD000000000000038;
    *(void *)(v2 + 40) = 0x800000021FA5ECC0;
    sub_21FA269E0();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_21F8A8478(uint64_t a1, uint64_t a2, char a3, char a4, char a5, char a6)
{
  uint64_t v7 = v6;
  uint64_t v14 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (double *)&v62[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_21F8A7F14(v7, (uint64_t)v16, type metadata accessor for AxisMarkValues.Storage.Stride);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v20 = (uint64_t)v16 + *(int *)(sub_21F76CA40(&qword_26AD46658) + 64);
      sub_21F8A8380();
      sub_21F76CA84(v20, &qword_26AD48588);
      uint64_t v21 = sub_21FA24310();
      (*(void (**)(double *, uint64_t))(*(void *)(v21 - 8) + 8))(v16, v21);
      return MEMORY[0x263F8EE78];
    case 2u:
      double v22 = *v16;
      double v23 = COERCE_DOUBLE(sub_21F8C2D48(a1));
      if (v25) {
        double v26 = 1.0;
      }
      else {
        double v26 = v24;
      }
      if (v25) {
        double v27 = 0.0;
      }
      else {
        double v27 = v23;
      }
      sub_21F8A8A98((uint64_t)v65, v22, v27, v26);
      sub_21F7E15BC((uint64_t)v65, (void (*)(void, void, void, void, void, void, void, void))sub_21F7CE510);
      sub_21F8A597C();
      uint64_t v29 = v28;
      sub_21F7E15BC((uint64_t)v65, (void (*)(void, void, void, void, void, void, void, void))sub_21F7CE70C);
      double v63 = v27;
      double v64 = v26;
      uint64_t v30 = type metadata accessor for AxisMarkValues.Storage(0);
      MEMORY[0x270FA5388](v30);
      v62[-32] = v31 & 1;
      *(void *)&v62[-24] = &v63;
      v62[-16] = v32 & 1;
      swift_bridgeObjectRetain();
      uint64_t v33 = sub_21F8A506C((uint64_t)sub_21F8AF8A4, (uint64_t)&v62[-48], v29);
      swift_bridgeObjectRelease();
      if (a5)
      {
        uint64_t v34 = *(void *)(v33 + 16);
        if (v34)
        {
          uint64_t v35 = (double *)(v33 + 32);
          double v36 = MEMORY[0x263F8EE78];
          do
          {
            double v39 = *v35;
            if (*v35 > 0.0)
            {
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              double v63 = v36;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                sub_21F76CFE0(0, *(void *)(*(void *)&v36 + 16) + 1, 1);
                double v36 = v63;
              }
              unint64_t v38 = *(void *)(*(void *)&v36 + 16);
              unint64_t v37 = *(void *)(*(void *)&v36 + 24);
              if (v38 >= v37 >> 1)
              {
                sub_21F76CFE0((char *)(v37 > 1), v38 + 1, 1);
                double v36 = v63;
              }
              *(void *)(*(void *)&v36 + 16) = v38 + 1;
              *(double *)(*(void *)&v36 + 8 * v38 + 32) = v39;
            }
            ++v35;
            --v34;
          }
          while (v34);
        }
        else
        {
          double v36 = MEMORY[0x263F8EE78];
        }
        swift_bridgeObjectRelease();
        sub_21F7E15BC((uint64_t)v65, (void (*)(void, void, void, void, void, void, void, void))sub_21F7CE70C);
        return *(void *)&v36;
      }
      else
      {
        sub_21F7E15BC((uint64_t)v65, (void (*)(void, void, void, void, void, void, void, void))sub_21F7CE70C);
      }
      return v33;
    case 3u:
      uint64_t v33 = *(void *)v16;
      if (!*((unsigned char *)v16 + 8)) {
        return v33;
      }
      swift_bridgeObjectRelease();
      sub_21F8A8380();
      return MEMORY[0x263F8EE78];
    default:
      double v17 = v16[2];
      int v18 = *((unsigned __int8 *)v16 + 24);
      if ((_BYTE)v16[1])
      {
        uint64_t v19 = 4;
      }
      else
      {
        uint64_t v19 = *(void *)v16;
        if (v19 < 1) {
          return MEMORY[0x263F8EE78];
        }
      }
      double v41 = COERCE_DOUBLE(sub_21F8C2D48(a1));
      if (v43) {
        double v44 = 1.0;
      }
      else {
        double v44 = v42;
      }
      if (v43) {
        double v45 = 0.0;
      }
      else {
        double v45 = v41;
      }
      if (a5)
      {
        uint64_t v46 = sub_21F8A8C38(v45, v44);
        *(double *)unint64_t v65 = v45;
        *(double *)&v65[1] = v44;
        uint64_t v47 = type metadata accessor for AxisMarkValues.Storage(0);
        MEMORY[0x270FA5388](v47);
        v62[-32] = v48 & 1;
        *(void *)&v62[-24] = v65;
        v62[-16] = v49 & 1;
        swift_bridgeObjectRetain();
        uint64_t v33 = sub_21F8A506C((uint64_t)sub_21F8AF8A4, (uint64_t)&v62[-48], v46);
        swift_bridgeObjectRelease();
      }
      else
      {
        double v50 = v44;
        if ((a3 & 1) == 0)
        {
          double v50 = v44;
          if (*(double *)&a2 > 0.0)
          {
            double v50 = v45 + *(double *)&a2;
            if (v45 > v45 + *(double *)&a2)
            {
              __break(1u);
              JUMPOUT(0x21F8A8A88);
            }
          }
        }
        double v51 = 0.0;
        if (a6) {
          double v51 = 1.0;
        }
        if (v18) {
          double v17 = v51;
        }
        uint64_t v52 = type metadata accessor for AxisMarkValues.Storage(0);
        int v53 = *(unsigned __int8 *)(v7 + *(int *)(v52 + 20));
        if (v53 == 2) {
          LOBYTE(v53) = a4;
        }
        int v54 = *(unsigned __int8 *)(v7 + *(int *)(v52 + 24));
        if (v54 == 2) {
          LOBYTE(v54) = a4;
        }
        char v55 = v53 & 1;
        char v56 = v54 & 1;
        double v57 = sub_21F973520(v19, v53 & 1, v54 & 1, v45, v50, v17);
        sub_21F8A8A98((uint64_t)v65, v57, v45, v44);
        sub_21F7E15BC((uint64_t)v65, (void (*)(void, void, void, void, void, void, void, void))sub_21F7CE510);
        sub_21F8A597C();
        uint64_t v59 = v58;
        uint64_t v60 = sub_21F7E15BC((uint64_t)v65, (void (*)(void, void, void, void, void, void, void, void))sub_21F7CE70C);
        double v63 = v45;
        double v64 = v44;
        MEMORY[0x270FA5388](v60);
        v62[-32] = v55;
        *(void *)&v62[-24] = &v63;
        v62[-16] = v56;
        swift_bridgeObjectRetain();
        uint64_t v33 = sub_21F8A506C((uint64_t)sub_21F8AF8A4, (uint64_t)&v62[-48], v59);
        sub_21F7E15BC((uint64_t)v65, (void (*)(void, void, void, void, void, void, void, void))sub_21F7CE70C);
        swift_bridgeObjectRelease();
      }
      return v33;
  }
}

uint64_t sub_21F8A8A98@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  if (a2 <= 0.0)
  {
    __break(1u);
  }
  else
  {
    double v6 = floor(a3 / a2);
    double v7 = v6 * a2;
    sub_21F7C0098(&v11, ceil((a4 - v6 * a2) / a2));
    if ((v12 & 1) == 0)
    {
      uint64_t v8 = v11;
      uint64_t v9 = swift_allocObject();
      *(double *)(v9 + 16) = a2;
      *(double *)(v9 + 24) = v7;
      uint64_t result = swift_allocObject();
      *(double *)(result + 16) = v7;
      *(double *)(result + 24) = a2;
      *(double *)a1 = a2;
      *(double *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v8;
      *(void *)(a1 + 24) = sub_21F8AF908;
      *(void *)(a1 + 32) = v9;
      *(void *)(a1 + 40) = sub_21F8AF930;
      *(void *)(a1 + 48) = result;
      *(unsigned char *)(a1 + 56) = 0;
      return result;
    }
  }
  uint64_t v11 = 0;
  unint64_t v12 = 0xE000000000000000;
  sub_21FA26510();
  sub_21FA25D40();
  sub_21FA25D40();
  sub_21FA25D40();
  sub_21FA25D40();
  uint64_t result = sub_21FA266E0();
  __break(1u);
  return result;
}

uint64_t sub_21F8A8C38(long double a1, long double a2)
{
  if (a2 <= 0.0) {
    goto LABEL_6;
  }
  double v4 = 1.0;
  if (a1 > 0.0) {
    double v4 = floor(log10(a1));
  }
  double v5 = log10(a2);
  if ((~*(void *)&v4 & 0x7FF0000000000000) != 0 && (double v6 = ceil(v5), (~*(void *)&v6 & 0x7FF0000000000000) != 0))
  {
    sub_21F8A557C(v4, v6, 1.0);
    uint64_t v7 = v13;
    if (a1 >= 0.0) {
      goto LABEL_14;
    }
  }
  else
  {
LABEL_6:
    uint64_t v7 = MEMORY[0x263F8EE78];
    if (a1 >= 0.0) {
      goto LABEL_14;
    }
  }
  double v8 = 1.0;
  if (a2 < 0.0) {
    double v8 = floor(log10(-a2));
  }
  double v9 = log10(-a1);
  if ((~*(void *)&v8 & 0x7FF0000000000000) != 0)
  {
    double v10 = ceil(v9);
    if ((~*(void *)&v10 & 0x7FF0000000000000) != 0)
    {
      sub_21F8A5778(v8, v10, 1.0);
      uint64_t v12 = sub_21F8A4D3C(v11);
      if (!*(void *)(v7 + 16)) {
        goto LABEL_17;
      }
      goto LABEL_15;
    }
  }
LABEL_14:
  uint64_t v12 = MEMORY[0x263F8EE78];
  if (!*(void *)(v7 + 16))
  {
LABEL_17:
    uint64_t v14 = MEMORY[0x263F8EE78];
    goto LABEL_18;
  }
LABEL_15:
  if (!*(void *)(v12 + 16)) {
    goto LABEL_17;
  }
  sub_21F76CA40(&qword_26AD4A478);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_21FA28550;
  *(void *)(v14 + 32) = 0;
LABEL_18:
  swift_bridgeObjectRetain();
  sub_21F9EDB14(v14);
  swift_bridgeObjectRetain();
  uint64_t v15 = swift_bridgeObjectRetain();
  sub_21F9EDB14(v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_21F8A8DFC(void (*a1)(uint64_t, uint64_t), uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v149 = a4;
  LODWORD(v141) = a3;
  double v134 = *(double *)&a2;
  uint64_t v152 = a1;
  uint64_t v138 = type metadata accessor for CalendarBinningUnit(0);
  MEMORY[0x270FA5388](v138);
  uint64_t v140 = (uint64_t)&v130 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_21FA24320();
  uint64_t v150 = *(void *)(v6 - 8);
  uint64_t v151 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v137 = (char *)&v130 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  long long v145 = (char *)&v130 - v9;
  MEMORY[0x270FA5388](v10);
  long long v146 = (char *)&v130 - v11;
  uint64_t v12 = type metadata accessor for DateBins(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v139 = (uint64_t)&v130 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v147 = (void (*)(char *, uint64_t))((char *)&v130 - v15);
  uint64_t v161 = sub_21F76CA40(&qword_26AD4A490);
  MEMORY[0x270FA5388](v161);
  uint64_t v155 = (char *)&v130 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v130 - v18;
  uint64_t v20 = sub_21FA241F0();
  uint64_t v159 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  double v22 = (char *)&v130 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v156 = (char *)&v130 - v24;
  uint64_t v154 = sub_21F76CA40((uint64_t *)&unk_26AD4A5E0);
  MEMORY[0x270FA5388](v154);
  uint64_t v136 = (uint64_t)&v130 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v130 - v27;
  MEMORY[0x270FA5388](v29);
  uint64_t v148 = (char *)&v130 - v30;
  MEMORY[0x270FA5388](v31);
  uint64_t v143 = (void (*)(void))((char *)&v130 - v32);
  MEMORY[0x270FA5388](v33);
  uint64_t v158 = (char *)&v130 - v34;
  MEMORY[0x270FA5388](v35);
  uint64_t v144 = (uint64_t)&v130 - v36;
  uint64_t v37 = sub_21F76CA40(&qword_26AD48588);
  MEMORY[0x270FA5388](v37 - 8);
  uint64_t v142 = (uint64_t)&v130 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v39);
  double v41 = (char *)&v130 - v40;
  uint64_t v160 = sub_21FA24310();
  uint64_t v157 = *(void *)(v160 - 8);
  MEMORY[0x270FA5388](v160);
  uint64_t v135 = (char *)&v130 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v43);
  uint64_t v153 = (uint64_t)&v130 - v44;
  MEMORY[0x270FA5388](v45);
  uint64_t v47 = (char *)&v130 - v46;
  uint64_t v48 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
  MEMORY[0x270FA5388](v48);
  double v50 = (char *)&v130 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = v4;
  sub_21F8A7F14(v4, (uint64_t)v50, type metadata accessor for AxisMarkValues.Storage.Stride);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v53 = sub_21F76CA40(&qword_26AD46658);
      int v54 = *(void (**)(uint64_t, uint64_t))&v50[*(int *)(v53 + 48)];
      uint64_t v55 = (uint64_t)&v50[*(int *)(v53 + 64)];
      (*(void (**)(char *, char *, uint64_t))(v157 + 32))(v47, v50, v160);
      sub_21F76C9DC(v55, (uint64_t)v41, &qword_26AD48588);
      sub_21F8C2D48((uint64_t)v152);
      char v56 = v156;
      sub_21FA23FD0();
      sub_21FA23FD0();
      sub_21F8AF93C((unint64_t *)&qword_26AD46C28, MEMORY[0x263F07490]);
      if ((sub_21FA25C70() & 1) == 0)
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
        JUMPOUT(0x21F8A9F10);
      }
      uint64_t v152 = v54;
      uint64_t v133 = v51;
      uint64_t v57 = v161;
      uint64_t v58 = &v19[*(int *)(v161 + 48)];
      uint64_t v141 = v47;
      uint64_t v59 = v159;
      uint64_t v148 = v41;
      uint64_t v60 = *(void (**)(char *, char *, uint64_t))(v159 + 32);
      v60(v19, v56, v20);
      v60(v58, v22, v20);
      unint64_t v61 = v155;
      uint64_t v62 = &v155[*(int *)(v57 + 48)];
      double v63 = v19;
      double v64 = *(void (**)(char *, char *, uint64_t))(v59 + 16);
      v64(v155, v19, v20);
      v64(v62, v58, v20);
      uint64_t v65 = (uint64_t)v158;
      v60(v158, v61, v20);
      unint64_t v66 = *(void (**)(char *, uint64_t))(v59 + 8);
      v66(v62, v20);
      uint64_t v67 = &v61[*(int *)(v161 + 48)];
      v60(v61, v63, v20);
      v60(v67, v58, v20);
      v60((char *)(v65 + *(int *)(v154 + 36)), v67, v20);
      v66(v61, v20);
      uint64_t v68 = v151;
      uint64_t v69 = v144;
      sub_21F76C9DC(v65, v144, (uint64_t *)&unk_26AD4A5E0);
      uint64_t v70 = v157;
      uint64_t v71 = v141;
      (*(void (**)(uint64_t, char *, uint64_t))(v157 + 16))(v153, v141, v160);
      uint64_t v72 = v143;
      sub_21F76C978(v69, (uint64_t)v143, (uint64_t *)&unk_26AD4A5E0);
      uint64_t v73 = (uint64_t)v148;
      uint64_t v74 = v142;
      sub_21F76C978((uint64_t)v148, v142, &qword_26AD48588);
      uint64_t v75 = v150;
      uint64_t v76 = v145;
      (*(void (**)(char *, uint64_t, uint64_t))(v150 + 16))(v145, v149, v68);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48))(v74, 1, v68) == 1)
      {
        uint64_t v77 = (uint64_t)v146;
        (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v146, v76, v68);
        sub_21F76CA84(v74, &qword_26AD48588);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v75 + 8))(v76, v68);
        uint64_t v77 = (uint64_t)v146;
        (*(void (**)(char *, uint64_t, uint64_t))(v75 + 32))(v146, v74, v68);
      }
      uint64_t v122 = v147;
      DateBins.init(unit:by:range:calendar:)(v153, v152, (uint64_t)v72, v77, (uint64_t)v147);
      uint64_t v123 = DateBins.thresholds.getter();
      uint64_t v124 = type metadata accessor for AxisMarkValues.Storage(0);
      MEMORY[0x270FA5388](v124);
      *((unsigned char *)&v130 - 32) = v125;
      *(&v130 - 3) = v69;
      *((unsigned char *)&v130 - 16) = v126;
      swift_bridgeObjectRetain();
      sub_21F8A51BC((uint64_t (*)(char *))sub_21F8AF9C4, (uint64_t)(&v130 - 6), v123);
      uint64_t v128 = v127;
      swift_bridgeObjectRelease();
      uint64_t v78 = sub_21F8A4C10(v128);
      swift_bridgeObjectRelease();
      sub_21F8A7F7C((uint64_t)v122, type metadata accessor for DateBins);
      sub_21F76CA84(v69, (uint64_t *)&unk_26AD4A5E0);
      sub_21F76CA84(v73, &qword_26AD48588);
      (*(void (**)(char *, uint64_t))(v70 + 8))(v71, v160);
      return v78;
    case 2u:
      goto LABEL_9;
    case 3u:
      uint64_t v78 = *(void *)v50;
      if (v50[8] == 1) {
        return v78;
      }
      swift_bridgeObjectRelease();
LABEL_9:
      sub_21F8A8380();
      return MEMORY[0x263F8EE78];
    default:
      if (v50[8])
      {
        uint64_t v52 = 4;
      }
      else
      {
        uint64_t v52 = *(void *)v50;
        if (*(uint64_t *)v50 < 1) {
          return MEMORY[0x263F8EE78];
        }
      }
      uint64_t v153 = v52;
      uint64_t v132 = v28;
      uint64_t v133 = v4;
      sub_21F8C2D48((uint64_t)v152);
      uint64_t v79 = v156;
      sub_21FA23FD0();
      sub_21FA23FD0();
      uint64_t v152 = (void (*)(uint64_t, uint64_t))sub_21F8AF93C((unint64_t *)&qword_26AD46C28, MEMORY[0x263F07490]);
      if ((sub_21FA25C70() & 1) == 0) {
        goto LABEL_22;
      }
      uint64_t v80 = &v19[*(int *)(v161 + 48)];
      uint64_t v81 = v159;
      uint64_t v82 = v161;
      uint64_t v83 = (char *)(v159 + 32);
      uint64_t v84 = *(void (**)(char *, char *, uint64_t))(v159 + 32);
      v84(v19, v79, v20);
      double v85 = v80;
      v84(v80, v22, v20);
      uint64_t v86 = v155;
      long long v87 = &v155[*(int *)(v82 + 48)];
      unint64_t v88 = *(void (**)(void))(v81 + 16);
      ((void (*)(char *, char *, uint64_t))v88)(v155, v19, v20);
      uint64_t v144 = v81 + 16;
      uint64_t v143 = v88;
      ((void (*)(char *, char *, uint64_t))v88)(v87, v80, v20);
      uint64_t v89 = (uint64_t)v158;
      v84(v158, v86, v20);
      double v90 = *(void (**)(char *, uint64_t))(v81 + 8);
      v90(v87, v20);
      uint64_t v91 = &v86[*(int *)(v161 + 48)];
      unint64_t v131 = v19;
      v84(v86, v19, v20);
      v84(v91, v85, v20);
      uint64_t v92 = v89 + *(int *)(v154 + 36);
      long long v146 = (char *)v84;
      long long v145 = v83;
      v84((char *)v92, v91, v20);
      uint64_t v159 = v81 + 8;
      uint64_t v147 = v90;
      v90(v86, v20);
      uint64_t v93 = (uint64_t)v148;
      sub_21F76C9DC(v89, (uint64_t)v148, (uint64_t *)&unk_26AD4A5E0);
      uint64_t v94 = (uint64_t)v132;
      sub_21F76C978(v93, (uint64_t)v132, (uint64_t *)&unk_26AD4A5E0);
      if ((v141 & 1) != 0 || v134 <= 0.0) {
        goto LABEL_17;
      }
      char v95 = v156;
      sub_21FA241B0();
      if (sub_21FA25C70())
      {
        uint64_t v96 = v161;
        uint64_t v97 = (void (*)(uint64_t, uint64_t))&v131[*(int *)(v161 + 48)];
        uint64_t v98 = v143;
        v143();
        sub_21F76CA84(v94, (uint64_t *)&unk_26AD4A5E0);
        uint64_t v152 = v97;
        uint64_t v99 = v95;
        uint64_t v100 = v146;
        ((void (*)(void (*)(uint64_t, uint64_t), char *, uint64_t))v146)(v97, v99, v20);
        uint64_t v101 = *(int *)(v96 + 48);
        uint64_t v102 = v155;
        uint64_t v103 = &v155[v101];
        ((void (*)(char *, char *, uint64_t))v98)(v155, v131, v20);
        ((void (*)(char *, void (*)(uint64_t, uint64_t), uint64_t))v98)(v103, v97, v20);
        uint64_t v104 = (uint64_t)v158;
        ((void (*)(char *, char *, uint64_t))v100)(v158, v102, v20);
        uint64_t v105 = v147;
        v147(v103, v20);
        uint64_t v106 = &v102[*(int *)(v161 + 48)];
        ((void (*)(char *, char *, uint64_t))v100)(v102, v131, v20);
        ((void (*)(char *, void (*)(uint64_t, uint64_t), uint64_t))v100)(v106, v152, v20);
        ((void (*)(uint64_t, char *, uint64_t))v100)(v104 + *(int *)(v154 + 36), v106, v20);
        v105(v102, v20);
        uint64_t v94 = (uint64_t)v132;
        sub_21F76C9DC(v104, (uint64_t)v132, (uint64_t *)&unk_26AD4A5E0);
LABEL_17:
        uint64_t v107 = v136;
        sub_21F76C978(v94, v136, (uint64_t *)&unk_26AD4A5E0);
        uint64_t v161 = *(int *)(type metadata accessor for AxisMarkValues.Storage(0) + 20);
        uint64_t v108 = v149;
        uint64_t v109 = sub_21F8A0834(v107, v149);
        uint64_t v110 = v140;
        sub_21F9101C4(v107, v109, v153, v140);
        swift_bridgeObjectRelease();
        sub_21F76CA84(v107, (uint64_t *)&unk_26AD4A5E0);
        uint64_t v111 = (uint64_t)v135;
        (*(void (**)(char *, uint64_t, uint64_t))(v157 + 16))(v135, v110, v160);
        uint64_t v112 = *(void (**)(uint64_t, uint64_t))(v110 + *(int *)(v138 + 20));
        uint64_t v113 = (uint64_t)v148;
        uint64_t v114 = (uint64_t)v158;
        sub_21F76C978((uint64_t)v148, (uint64_t)v158, (uint64_t *)&unk_26AD4A5E0);
        uint64_t v115 = (uint64_t)v137;
        (*(void (**)(char *, uint64_t, uint64_t))(v150 + 16))(v137, v108, v151);
        uint64_t v116 = v139;
        DateBins.init(unit:by:range:calendar:)(v111, v112, v114, v115, v139);
        uint64_t v117 = DateBins.thresholds.getter();
        MEMORY[0x270FA5388](v117);
        *((unsigned char *)&v130 - 32) = v118;
        *(&v130 - 3) = v113;
        *((unsigned char *)&v130 - 16) = v119;
        swift_bridgeObjectRetain();
        sub_21F8A51BC((uint64_t (*)(char *))sub_21F8AF984, (uint64_t)(&v130 - 6), v117);
        uint64_t v121 = v120;
        swift_bridgeObjectRelease();
        uint64_t v78 = sub_21F8A4C10(v121);
        swift_bridgeObjectRelease();
        sub_21F8A7F7C(v116, type metadata accessor for DateBins);
        sub_21F8A7F7C(v110, type metadata accessor for CalendarBinningUnit);
        sub_21F76CA84((uint64_t)v132, (uint64_t *)&unk_26AD4A5E0);
        sub_21F76CA84(v113, (uint64_t *)&unk_26AD4A5E0);
        return v78;
      }
      goto LABEL_23;
  }
}

uint64_t sub_21F8A9F20(double a1, double a2, double a3)
{
  sub_21F7C0098(&v4, floor((a1 - a2) / a3));
  if ((v5 & 1) == 0) {
    return v4;
  }
  uint64_t v4 = 0;
  unint64_t v5 = 0xE000000000000000;
  sub_21FA26510();
  sub_21FA25D40();
  sub_21FA25D40();
  sub_21FA25D40();
  sub_21FA25D40();
  uint64_t result = sub_21FA266E0();
  __break(1u);
  return result;
}

void sub_21F8AA028()
{
  sub_21F79DEF8(319, (unint64_t *)&qword_26AD48FA8, (void (*)(uint64_t))type metadata accessor for AxisMarkValues.Storage);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *sub_21F8AA0EC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return v4;
  }
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v7 = *(int *)(a3 + 40);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for AxisMarkValues.Storage(0);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_21F76CA40(&qword_26AD48FA0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    goto LABEL_14;
  }
  uint64_t v14 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    char v22 = v9[8];
    *(void *)uint64_t v8 = *(void *)v9;
    v8[8] = v22;
    swift_bridgeObjectRetain();
LABEL_12:
    swift_storeEnumTagMultiPayload();
    goto LABEL_13;
  }
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v16 = sub_21FA24310();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v16 - 8) + 16))(v8, v9, v16);
    uint64_t v17 = sub_21F76CA40(&qword_26AD46658);
    *(void *)&v8[*(int *)(v17 + 48)] = *(void *)&v9[*(int *)(v17 + 48)];
    uint64_t v18 = *(int *)(v17 + 64);
    uint64_t v32 = &v8[v18];
    uint64_t v19 = &v9[v18];
    uint64_t v20 = sub_21FA24320();
    uint64_t v31 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v31 + 48))(v19, 1, v20))
    {
      uint64_t v21 = sub_21F76CA40(&qword_26AD48588);
      memcpy(v32, v19, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v31 + 16))(v32, v19, v20);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v31 + 56))(v32, 0, 1, v20);
    }
    goto LABEL_12;
  }
  memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
LABEL_13:
  v8[*(int *)(v10 + 20)] = v9[*(int *)(v10 + 20)];
  v8[*(int *)(v10 + 24)] = v9[*(int *)(v10 + 24)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_14:
  uint64_t v23 = *(int *)(a3 + 44);
  uint64_t v24 = (char *)v4 + v23;
  uint64_t v25 = (char *)a2 + v23;
  int v26 = *((unsigned __int8 *)a2 + v23 + 40);
  if (v26 == 1)
  {
    uint64_t v28 = *((void *)v25 + 1);
    *(void *)uint64_t v24 = *(void *)v25;
    *((void *)v24 + 1) = v28;
    v24[40] = 1;
    swift_retain();
  }
  else if (v26)
  {
    long long v29 = *((_OWORD *)v25 + 1);
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    *((_OWORD *)v24 + 1) = v29;
    *(_OWORD *)(v24 + 25) = *(_OWORD *)(v25 + 25);
  }
  else
  {
    long long v27 = *(_OWORD *)(v25 + 24);
    *(_OWORD *)(v24 + 24) = v27;
    (**(void (***)(char *))(v27 - 8))(v24);
    v24[40] = 0;
  }
  return v4;
}

uint64_t sub_21F8AA498(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for AxisMarkValues.Storage(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    type metadata accessor for AxisMarkValues.Storage.Stride(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      swift_bridgeObjectRelease();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = sub_21FA24310();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v4, v8);
      uint64_t v9 = v4 + *(int *)(sub_21F76CA40(&qword_26AD46658) + 64);
      uint64_t v10 = sub_21FA24320();
      uint64_t v11 = *(void *)(v10 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
      }
    }
  }
  uint64_t result = a1 + *(int *)(a2 + 44);
  if (*(unsigned char *)(result + 40) == 1)
  {
    return swift_release();
  }
  else if (!*(unsigned char *)(result + 40))
  {
    return _s6Charts15AnyChartContentVwxx_0(result);
  }
  return result;
}

_WORD *sub_21F8AA66C(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for AxisMarkValues.Storage(0);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_21F76CA40(&qword_26AD48FA0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_12;
  }
  uint64_t v12 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    char v20 = v8[8];
    *(void *)uint64_t v7 = *(void *)v8;
    v7[8] = v20;
    swift_bridgeObjectRetain();
LABEL_10:
    swift_storeEnumTagMultiPayload();
    goto LABEL_11;
  }
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v14 = sub_21FA24310();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v14 - 8) + 16))(v7, v8, v14);
    uint64_t v15 = sub_21F76CA40(&qword_26AD46658);
    *(void *)&v7[*(int *)(v15 + 48)] = *(void *)&v8[*(int *)(v15 + 48)];
    uint64_t v16 = *(int *)(v15 + 64);
    uint64_t v30 = &v7[v16];
    uint64_t v17 = &v8[v16];
    uint64_t v18 = sub_21FA24320();
    uint64_t v29 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v29 + 48))(v17, 1, v18))
    {
      uint64_t v19 = sub_21F76CA40(&qword_26AD48588);
      memcpy(v30, v17, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v29 + 16))(v30, v17, v18);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v29 + 56))(v30, 0, 1, v18);
    }
    goto LABEL_10;
  }
  memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
LABEL_11:
  v7[*(int *)(v9 + 20)] = v8[*(int *)(v9 + 20)];
  v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_12:
  uint64_t v21 = *(int *)(a3 + 44);
  char v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  int v24 = *((unsigned __int8 *)a2 + v21 + 40);
  if (v24 == 1)
  {
    uint64_t v26 = *((void *)v23 + 1);
    *(void *)char v22 = *(void *)v23;
    *((void *)v22 + 1) = v26;
    v22[40] = 1;
    swift_retain();
  }
  else if (v24)
  {
    long long v27 = *((_OWORD *)v23 + 1);
    *(_OWORD *)char v22 = *(_OWORD *)v23;
    *((_OWORD *)v22 + 1) = v27;
    *(_OWORD *)(v22 + 25) = *(_OWORD *)(v23 + 25);
  }
  else
  {
    long long v25 = *(_OWORD *)(v23 + 24);
    *(_OWORD *)(v22 + 24) = v25;
    (**(void (***)(char *))(v25 - 8))(v22);
    v22[40] = 0;
  }
  return a1;
}

unsigned char *sub_21F8AA9C8(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for AxisMarkValues.Storage(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_21F8A7F7C((uint64_t)v7, type metadata accessor for AxisMarkValues.Storage);
LABEL_9:
      uint64_t v22 = sub_21F76CA40(&qword_26AD48FA0);
      memcpy(v7, v8, *(void *)(*(void *)(v22 - 8) + 64));
      if (a1 == a2) {
        return a1;
      }
      goto LABEL_27;
    }
    if (a1 != a2)
    {
      sub_21F8A7F7C((uint64_t)v7, type metadata accessor for AxisMarkValues.Storage.Stride);
      uint64_t v23 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 3)
      {
        char v33 = v8[8];
        *(void *)uint64_t v7 = *(void *)v8;
        v7[8] = v33;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (EnumCaseMultiPayload != 1)
        {
          memcpy(v7, v8, *(void *)(*(void *)(v23 - 8) + 64));
          goto LABEL_26;
        }
        uint64_t v25 = sub_21FA24310();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v25 - 8) + 16))(v7, v8, v25);
        uint64_t v26 = sub_21F76CA40(&qword_26AD46658);
        *(void *)&v7[*(int *)(v26 + 48)] = *(void *)&v8[*(int *)(v26 + 48)];
        uint64_t v27 = *(int *)(v26 + 64);
        __dsta = &v7[v27];
        uint64_t v28 = &v8[v27];
        uint64_t v29 = sub_21FA24320();
        uint64_t v30 = *(void *)(v29 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
        {
          uint64_t v31 = sub_21F76CA40(&qword_26AD48588);
          memcpy(__dsta, v28, *(void *)(*(void *)(v31 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v30 + 16))(__dsta, v28, v29);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v30 + 56))(__dsta, 0, 1, v29);
        }
      }
      swift_storeEnumTagMultiPayload();
    }
LABEL_26:
    v7[*(int *)(v9 + 20)] = v8[*(int *)(v9 + 20)];
    v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
    if (a1 == a2) {
      return a1;
    }
    goto LABEL_27;
  }
  if (v13) {
    goto LABEL_9;
  }
  uint64_t v14 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
  int v15 = swift_getEnumCaseMultiPayload();
  if (v15 == 3)
  {
    char v32 = v8[8];
    *(void *)uint64_t v7 = *(void *)v8;
    v7[8] = v32;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (v15 != 1)
    {
      memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
      goto LABEL_20;
    }
    uint64_t v16 = sub_21FA24310();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v16 - 8) + 16))(v7, v8, v16);
    uint64_t v17 = sub_21F76CA40(&qword_26AD46658);
    *(void *)&v7[*(int *)(v17 + 48)] = *(void *)&v8[*(int *)(v17 + 48)];
    uint64_t v18 = *(int *)(v17 + 64);
    __dst = &v7[v18];
    uint64_t v19 = &v8[v18];
    uint64_t v20 = sub_21FA24320();
    uint64_t v42 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v42 + 48))(v19, 1, v20))
    {
      uint64_t v21 = sub_21F76CA40(&qword_26AD48588);
      memcpy(__dst, v19, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v42 + 16))(__dst, v19, v20);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v42 + 56))(__dst, 0, 1, v20);
    }
  }
  swift_storeEnumTagMultiPayload();
LABEL_20:
  v7[*(int *)(v9 + 20)] = v8[*(int *)(v9 + 20)];
  v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  if (a1 == a2) {
    return a1;
  }
LABEL_27:
  uint64_t v34 = *(int *)(a3 + 44);
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  sub_21F7ABE54((uint64_t)&a1[v34]);
  if (v36[40] == 1)
  {
    uint64_t v38 = *((void *)v36 + 1);
    *(void *)uint64_t v35 = *(void *)v36;
    *((void *)v35 + 1) = v38;
    v35[40] = 1;
    swift_retain();
  }
  else if (v36[40])
  {
    long long v39 = *(_OWORD *)v36;
    long long v40 = *((_OWORD *)v36 + 1);
    *(_OWORD *)(v35 + 25) = *(_OWORD *)(v36 + 25);
    *(_OWORD *)uint64_t v35 = v39;
    *((_OWORD *)v35 + 1) = v40;
  }
  else
  {
    uint64_t v37 = *((void *)v36 + 3);
    *((void *)v35 + 3) = v37;
    *((void *)v35 + 4) = *((void *)v36 + 4);
    (**(void (***)(unsigned char *, unsigned char *))(v37 - 8))(v35, v36);
    v35[40] = 0;
  }
  return a1;
}

_WORD *sub_21F8AAF84(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for AxisMarkValues.Storage(0);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_21F76CA40(&qword_26AD48FA0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = sub_21FA24310();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v7, v8, v13);
      uint64_t v14 = sub_21F76CA40(&qword_26AD46658);
      *(void *)&v7[*(int *)(v14 + 48)] = *(void *)&v8[*(int *)(v14 + 48)];
      uint64_t v15 = *(int *)(v14 + 64);
      uint64_t v25 = &v7[v15];
      uint64_t v16 = &v8[v15];
      uint64_t v17 = sub_21FA24320();
      uint64_t v18 = *(void *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        uint64_t v19 = sub_21F76CA40(&qword_26AD48588);
        memcpy(v25, v16, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v25, v16, v17);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v25, 0, 1, v17);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
    }
    v7[*(int *)(v9 + 20)] = v8[*(int *)(v9 + 20)];
    v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v20 = *(int *)(a3 + 44);
  uint64_t v21 = (_OWORD *)((char *)a1 + v20);
  uint64_t v22 = (_OWORD *)((char *)a2 + v20);
  long long v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  *(_OWORD *)((char *)v21 + 25) = *(_OWORD *)((char *)v22 + 25);
  return a1;
}

_WORD *sub_21F8AB254(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for AxisMarkValues.Storage(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      if (a1 != a2)
      {
        sub_21F8A7F7C((uint64_t)v7, type metadata accessor for AxisMarkValues.Storage.Stride);
        uint64_t v23 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v24 = sub_21FA24310();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v7, v8, v24);
          uint64_t v25 = sub_21F76CA40(&qword_26AD46658);
          *(void *)&v7[*(int *)(v25 + 48)] = *(void *)&v8[*(int *)(v25 + 48)];
          uint64_t v26 = *(int *)(v25 + 64);
          __dsta = &v7[v26];
          uint64_t v27 = &v8[v26];
          uint64_t v28 = sub_21FA24320();
          uint64_t v29 = *(void *)(v28 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
          {
            uint64_t v30 = sub_21F76CA40(&qword_26AD48588);
            memcpy(__dsta, v27, *(void *)(*(void *)(v30 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v29 + 32))(__dsta, v27, v28);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(__dsta, 0, 1, v28);
          }
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v7, v8, *(void *)(*(void *)(v23 - 8) + 64));
        }
      }
      v7[*(int *)(v9 + 20)] = v8[*(int *)(v9 + 20)];
      v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
      if (a1 != a2) {
        goto LABEL_18;
      }
      return a1;
    }
    sub_21F8A7F7C((uint64_t)v7, type metadata accessor for AxisMarkValues.Storage);
LABEL_8:
    uint64_t v22 = sub_21F76CA40(&qword_26AD48FA0);
    memcpy(v7, v8, *(void *)(*(void *)(v22 - 8) + 64));
    if (a1 == a2) {
      return a1;
    }
    goto LABEL_18;
  }
  if (v13) {
    goto LABEL_8;
  }
  uint64_t v14 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v36 = v3;
    uint64_t v15 = sub_21FA24310();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v7, v8, v15);
    uint64_t v16 = sub_21F76CA40(&qword_26AD46658);
    *(void *)&v7[*(int *)(v16 + 48)] = *(void *)&v8[*(int *)(v16 + 48)];
    uint64_t v17 = *(int *)(v16 + 64);
    __dst = &v7[v17];
    uint64_t v18 = &v8[v17];
    uint64_t v19 = sub_21FA24320();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = sub_21F76CA40(&qword_26AD48588);
      memcpy(__dst, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(__dst, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v3 = v36;
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
  }
  v7[*(int *)(v9 + 20)] = v8[*(int *)(v9 + 20)];
  v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  if (a1 != a2)
  {
LABEL_18:
    uint64_t v31 = *(int *)(v3 + 44);
    char v32 = (_OWORD *)((char *)a2 + v31);
    char v33 = (_OWORD *)((char *)a1 + v31);
    sub_21F7ABE54((uint64_t)a1 + v31);
    long long v34 = v32[1];
    *char v33 = *v32;
    v33[1] = v34;
    *(_OWORD *)((char *)v33 + 25) = *(_OWORD *)((char *)v32 + 25);
  }
  return a1;
}

uint64_t sub_21F8AB74C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F8AB760);
}

uint64_t sub_21F8AB760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_21F76CA40(&qword_26AD48FA0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 40);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unsigned int v12 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 44) + 40);
    if (v12 > 2) {
      return (v12 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_21F8AB828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F8AB83C);
}

uint64_t sub_21F8AB83C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_21F76CA40(&qword_26AD48FA0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 40);
    unsigned int v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 44) + 40) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AxisMarkPreset()
{
  return &type metadata for AxisMarkPreset;
}

uint64_t getEnumTagSinglePayload for AxisMarkPosition(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  if (*a1 <= 4u) {
    int v6 = 4;
  }
  else {
    int v6 = *a1;
  }
  int v7 = v6 - 5;
  if (*a1 < 4u) {
    int v8 = -1;
  }
  else {
    int v8 = v7;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AxisMarkPosition(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x21F8ABA84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AxisMarkPosition()
{
  return &type metadata for AxisMarkPosition;
}

char *initializeBufferWithCopyOfBuffer for AxisMarkValues(char *a1, char *a2)
{
  uint64_t v4 = *(void *)(sub_21F76CA40(&qword_26AD48FA0) - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return a1;
  }
  uint64_t v6 = v4;
  uint64_t v7 = type metadata accessor for AxisMarkValues.Storage(0);
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
  {
    uint64_t v10 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      char v20 = a2[8];
      *(void *)a1 = *(void *)a2;
      a1[8] = v20;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
LABEL_13:
        a1[*(int *)(v7 + 20)] = a2[*(int *)(v7 + 20)];
        a1[*(int *)(v7 + 24)] = a2[*(int *)(v7 + 24)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
        return a1;
      }
      uint64_t v12 = sub_21FA24310();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
      uint64_t v13 = sub_21F76CA40(&qword_26AD46658);
      *(void *)&a1[*(int *)(v13 + 48)] = *(void *)&a2[*(int *)(v13 + 48)];
      uint64_t v14 = *(int *)(v13 + 64);
      uint64_t v15 = &a1[v14];
      uint64_t v16 = &a2[v14];
      uint64_t v17 = sub_21FA24320();
      uint64_t v18 = *(void *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        uint64_t v19 = sub_21F76CA40(&qword_26AD48588);
        memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_13;
  }
  memcpy(a1, a2, *(void *)(v6 + 64));
  return a1;
}

uint64_t destroy for AxisMarkValues(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AxisMarkValues.Storage(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 1, v2);
  if (!result)
  {
    type metadata accessor for AxisMarkValues.Storage.Stride(0);
    uint64_t result = swift_getEnumCaseMultiPayload();
    if (result == 3)
    {
      return swift_bridgeObjectRelease();
    }
    else if (result == 1)
    {
      uint64_t v4 = sub_21FA24310();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
      uint64_t v5 = a1 + *(int *)(sub_21F76CA40(&qword_26AD46658) + 64);
      uint64_t v6 = sub_21FA24320();
      uint64_t v8 = *(void *)(v6 - 8);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6);
      if (!result)
      {
        uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
        return v7(v5, v6);
      }
    }
  }
  return result;
}

char *initializeWithCopy for AxisMarkValues(char *a1, unsigned char *a2)
{
  uint64_t v4 = type metadata accessor for AxisMarkValues.Storage(0);
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    uint64_t v7 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      char v17 = a2[8];
      *(void *)a1 = *(void *)a2;
      a1[8] = v17;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
LABEL_11:
        a1[*(int *)(v4 + 20)] = a2[*(int *)(v4 + 20)];
        a1[*(int *)(v4 + 24)] = a2[*(int *)(v4 + 24)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
        return a1;
      }
      uint64_t v9 = sub_21FA24310();
      (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
      uint64_t v10 = sub_21F76CA40(&qword_26AD46658);
      *(void *)&a1[*(int *)(v10 + 48)] = *(void *)&a2[*(int *)(v10 + 48)];
      uint64_t v11 = *(int *)(v10 + 64);
      uint64_t v12 = &a1[v11];
      uint64_t v13 = &a2[v11];
      uint64_t v14 = sub_21FA24320();
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        uint64_t v16 = sub_21F76CA40(&qword_26AD48588);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_11;
  }
  uint64_t v6 = sub_21F76CA40(&qword_26AD48FA0);
  memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  return a1;
}

unsigned char *assignWithCopy for AxisMarkValues(unsigned char *a1, unsigned char *a2)
{
  uint64_t v4 = type metadata accessor for AxisMarkValues.Storage(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (v8)
    {
      sub_21F8A7F7C((uint64_t)a1, type metadata accessor for AxisMarkValues.Storage);
      goto LABEL_9;
    }
    if (a1 != a2)
    {
      sub_21F8A7F7C((uint64_t)a1, type metadata accessor for AxisMarkValues.Storage.Stride);
      uint64_t v20 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 3)
      {
        char v31 = a2[8];
        *(void *)a1 = *(void *)a2;
        a1[8] = v31;
        swift_bridgeObjectRetain();
LABEL_23:
        swift_storeEnumTagMultiPayload();
        goto LABEL_24;
      }
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v22 = sub_21FA24310();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v22 - 8) + 16))(a1, a2, v22);
        uint64_t v23 = sub_21F76CA40(&qword_26AD46658);
        *(void *)&a1[*(int *)(v23 + 48)] = *(void *)&a2[*(int *)(v23 + 48)];
        uint64_t v24 = *(int *)(v23 + 64);
        uint64_t v25 = &a1[v24];
        uint64_t v26 = &a2[v24];
        uint64_t v27 = sub_21FA24320();
        uint64_t v28 = *(void *)(v27 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
        {
          uint64_t v29 = sub_21F76CA40(&qword_26AD48588);
          memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
        }
        else
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v28 + 16))(v25, v26, v27);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
        }
        goto LABEL_23;
      }
      memcpy(a1, a2, *(void *)(*(void *)(v20 - 8) + 64));
    }
LABEL_24:
    a1[*(int *)(v4 + 20)] = a2[*(int *)(v4 + 20)];
    a1[*(int *)(v4 + 24)] = a2[*(int *)(v4 + 24)];
    return a1;
  }
  if (!v8)
  {
    uint64_t v9 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
    int v10 = swift_getEnumCaseMultiPayload();
    if (v10 == 3)
    {
      char v30 = a2[8];
      *(void *)a1 = *(void *)a2;
      a1[8] = v30;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (v10 != 1)
      {
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
LABEL_19:
        a1[*(int *)(v4 + 20)] = a2[*(int *)(v4 + 20)];
        a1[*(int *)(v4 + 24)] = a2[*(int *)(v4 + 24)];
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
        return a1;
      }
      uint64_t v11 = sub_21FA24310();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
      uint64_t v12 = sub_21F76CA40(&qword_26AD46658);
      *(void *)&a1[*(int *)(v12 + 48)] = *(void *)&a2[*(int *)(v12 + 48)];
      uint64_t v13 = *(int *)(v12 + 64);
      uint64_t v14 = &a1[v13];
      uint64_t v15 = &a2[v13];
      uint64_t v16 = sub_21FA24320();
      uint64_t v17 = *(void *)(v16 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        uint64_t v18 = sub_21F76CA40(&qword_26AD48588);
        memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v17 + 16))(v14, v15, v16);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      }
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_19;
  }
LABEL_9:
  uint64_t v19 = sub_21F76CA40(&qword_26AD48FA0);
  memcpy(a1, a2, *(void *)(*(void *)(v19 - 8) + 64));
  return a1;
}

char *initializeWithTake for AxisMarkValues(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for AxisMarkValues.Storage(0);
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    uint64_t v6 = sub_21F76CA40(&qword_26AD48FA0);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v8 = sub_21FA24310();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      uint64_t v9 = sub_21F76CA40(&qword_26AD46658);
      *(void *)&a1[*(int *)(v9 + 48)] = *(void *)&a2[*(int *)(v9 + 48)];
      uint64_t v10 = *(int *)(v9 + 64);
      uint64_t v11 = &a1[v10];
      uint64_t v12 = &a2[v10];
      uint64_t v13 = sub_21FA24320();
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        uint64_t v15 = sub_21F76CA40(&qword_26AD48588);
        memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    a1[*(int *)(v4 + 20)] = a2[*(int *)(v4 + 20)];
    a1[*(int *)(v4 + 24)] = a2[*(int *)(v4 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

char *assignWithTake for AxisMarkValues(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for AxisMarkValues.Storage(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (v7)
  {
    if (!v8)
    {
      uint64_t v9 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v10 = sub_21FA24310();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
        uint64_t v11 = sub_21F76CA40(&qword_26AD46658);
        *(void *)&a1[*(int *)(v11 + 48)] = *(void *)&a2[*(int *)(v11 + 48)];
        uint64_t v12 = *(int *)(v11 + 64);
        uint64_t v13 = &a1[v12];
        uint64_t v14 = &a2[v12];
        uint64_t v15 = sub_21FA24320();
        uint64_t v16 = *(void *)(v15 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
        {
          uint64_t v17 = sub_21F76CA40(&qword_26AD48588);
          memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
        }
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      a1[*(int *)(v4 + 20)] = a2[*(int *)(v4 + 20)];
      a1[*(int *)(v4 + 24)] = a2[*(int *)(v4 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
      return a1;
    }
LABEL_8:
    uint64_t v18 = sub_21F76CA40(&qword_26AD48FA0);
    memcpy(a1, a2, *(void *)(*(void *)(v18 - 8) + 64));
    return a1;
  }
  if (v8)
  {
    sub_21F8A7F7C((uint64_t)a1, type metadata accessor for AxisMarkValues.Storage);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    sub_21F8A7F7C((uint64_t)a1, type metadata accessor for AxisMarkValues.Storage.Stride);
    uint64_t v19 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v20 = sub_21FA24310();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(a1, a2, v20);
      uint64_t v21 = sub_21F76CA40(&qword_26AD46658);
      *(void *)&a1[*(int *)(v21 + 48)] = *(void *)&a2[*(int *)(v21 + 48)];
      uint64_t v22 = *(int *)(v21 + 64);
      uint64_t v23 = &a1[v22];
      uint64_t v24 = &a2[v22];
      uint64_t v25 = sub_21FA24320();
      uint64_t v26 = *(void *)(v25 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        uint64_t v27 = sub_21F76CA40(&qword_26AD48588);
        memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v23, v24, v25);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v19 - 8) + 64));
    }
  }
  a1[*(int *)(v4 + 20)] = a2[*(int *)(v4 + 20)];
  a1[*(int *)(v4 + 24)] = a2[*(int *)(v4 + 24)];
  return a1;
}

uint64_t getEnumTagSinglePayload for AxisMarkValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F8ACE70);
}

uint64_t sub_21F8ACE70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21F76CA40(&qword_26AD48FA0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AxisMarkValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F8ACEF4);
}

uint64_t sub_21F8ACEF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21F76CA40(&qword_26AD48FA0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

void sub_21F8ACF68()
{
  sub_21F79DEF8(319, (unint64_t *)&qword_26AD48FA8, (void (*)(uint64_t))type metadata accessor for AxisMarkValues.Storage);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unsigned char *_s6Charts14AxisMarkPresetVwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x21F8AD0DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AxisMarkPosition.Storage()
{
  return &type metadata for AxisMarkPosition.Storage;
}

unsigned char *storeEnumTagSinglePayload for AxisMarkPreset.Storage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x21F8AD1E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AxisMarkPreset.Storage()
{
  return &type metadata for AxisMarkPreset.Storage;
}

uint64_t destroy for AxisMarksContentStorage(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 40);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)result + 2;
  }
  if (v1 == 1) {
    return swift_release();
  }
  if (!v1) {
    return _s6Charts15AnyChartContentVwxx_0(result);
  }
  return result;
}

uint64_t initializeWithCopy for AxisMarksContentStorage(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v5;
    *(unsigned char *)(a1 + 40) = 1;
    swift_retain();
  }
  else if (v3)
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(unsigned char *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for AxisMarksContentStorage(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      swift_release();
    }
    else if (!v4)
    {
      _s6Charts15AnyChartContentVwxx_0(a1);
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v7 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v7;
      *(unsigned char *)(a1 + 40) = 1;
      swift_retain();
    }
    else if (v5)
    {
      long long v8 = *a2;
      long long v9 = a2[1];
      *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v9;
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for AxisMarksContentStorage(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      swift_release();
    }
    else if (!v4)
    {
      _s6Charts15AnyChartContentVwxx_0(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 40) = 1;
    }
    else
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      if (v5)
      {
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 40) = 0;
      }
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AxisMarksContentStorage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 3) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AxisMarksContentStorage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AxisMarksContentStorage()
{
  return &type metadata for AxisMarksContentStorage;
}

char *sub_21F8AD53C(char *a1, unsigned char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    uint64_t v7 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      char v18 = a2[8];
      *(void *)a1 = *(void *)a2;
      a1[8] = v18;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
LABEL_11:
        uint64_t v19 = *(int *)(a3 + 24);
        a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
        a1[v19] = a2[v19];
        return a1;
      }
      uint64_t v9 = sub_21FA24310();
      (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
      uint64_t v10 = sub_21F76CA40(&qword_26AD46658);
      *(void *)&a1[*(int *)(v10 + 48)] = *(void *)&a2[*(int *)(v10 + 48)];
      uint64_t v11 = *(int *)(v10 + 64);
      uint64_t v12 = &a1[v11];
      uint64_t v13 = &a2[v11];
      uint64_t v14 = sub_21FA24320();
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        uint64_t v16 = sub_21F76CA40(&qword_26AD48588);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_11;
  }
  uint64_t v17 = *(void *)a2;
  *(void *)a1 = *(void *)a2;
  a1 = (char *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return a1;
}

uint64_t sub_21F8AD790(uint64_t a1)
{
  type metadata accessor for AxisMarkValues.Storage.Stride(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 3)
  {
    return swift_bridgeObjectRelease();
  }
  else if (result == 1)
  {
    uint64_t v3 = sub_21FA24310();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
    uint64_t v4 = a1 + *(int *)(sub_21F76CA40(&qword_26AD46658) + 64);
    uint64_t v5 = sub_21FA24320();
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v4, 1, v5);
    if (!result)
    {
      long long v6 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
      return v6(v4, v5);
    }
  }
  return result;
}

char *sub_21F8AD8E0(char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    char v16 = a2[8];
    *(void *)a1 = *(void *)a2;
    a1[8] = v16;
    swift_bridgeObjectRetain();
LABEL_8:
    swift_storeEnumTagMultiPayload();
    goto LABEL_9;
  }
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = sub_21FA24310();
    (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    uint64_t v9 = sub_21F76CA40(&qword_26AD46658);
    *(void *)&a1[*(int *)(v9 + 48)] = *(void *)&a2[*(int *)(v9 + 48)];
    uint64_t v10 = *(int *)(v9 + 64);
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    uint64_t v13 = sub_21FA24320();
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      uint64_t v15 = sub_21F76CA40(&qword_26AD48588);
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    goto LABEL_8;
  }
  memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
LABEL_9:
  uint64_t v17 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  a1[v17] = a2[v17];
  return a1;
}

char *sub_21F8ADAE4(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_21F8A7F7C((uint64_t)a1, type metadata accessor for AxisMarkValues.Storage.Stride);
    uint64_t v6 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      char v16 = a2[8];
      *(void *)a1 = *(void *)a2;
      a1[8] = v16;
      swift_bridgeObjectRetain();
LABEL_9:
      swift_storeEnumTagMultiPayload();
      goto LABEL_10;
    }
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = sub_21FA24310();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      uint64_t v9 = sub_21F76CA40(&qword_26AD46658);
      *(void *)&a1[*(int *)(v9 + 48)] = *(void *)&a2[*(int *)(v9 + 48)];
      uint64_t v10 = *(int *)(v9 + 64);
      uint64_t v11 = &a1[v10];
      uint64_t v12 = &a2[v10];
      uint64_t v13 = sub_21FA24320();
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        uint64_t v15 = sub_21F76CA40(&qword_26AD48588);
        memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      goto LABEL_9;
    }
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
LABEL_10:
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

char *sub_21F8ADD10(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_21FA24310();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    uint64_t v8 = sub_21F76CA40(&qword_26AD46658);
    *(void *)&a1[*(int *)(v8 + 48)] = *(void *)&a2[*(int *)(v8 + 48)];
    uint64_t v9 = *(int *)(v8 + 64);
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = sub_21FA24320();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = sub_21F76CA40(&qword_26AD48588);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v15 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  a1[v15] = a2[v15];
  return a1;
}

char *sub_21F8ADEE8(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_21F8A7F7C((uint64_t)a1, type metadata accessor for AxisMarkValues.Storage.Stride);
    uint64_t v6 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_21FA24310();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      uint64_t v8 = sub_21F76CA40(&qword_26AD46658);
      *(void *)&a1[*(int *)(v8 + 48)] = *(void *)&a2[*(int *)(v8 + 48)];
      uint64_t v9 = *(int *)(v8 + 64);
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      uint64_t v12 = sub_21FA24320();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        uint64_t v14 = sub_21F76CA40(&qword_26AD48588);
        memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v15 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  a1[v15] = a2[v15];
  return a1;
}

uint64_t sub_21F8AE0E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_21F8AE0F8);
}

uint64_t sub_21F8AE0F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      int v11 = ((v10 + 2147483646) & 0x7FFFFFFF) - 1;
    }
    else {
      int v11 = -2;
    }
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_21F8AE1D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_21F8AE1E8);
}

uint64_t sub_21F8AE1E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for AxisMarkValues.Storage.Stride(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  }
  return result;
}

char *sub_21F8AE2A4(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      char v17 = a2[8];
      *(void *)a1 = *(void *)a2;
      a1[8] = v17;
      swift_bridgeObjectRetain();
LABEL_10:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = sub_21FA24310();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      uint64_t v9 = sub_21F76CA40(&qword_26AD46658);
      *(void *)&a1[*(int *)(v9 + 48)] = *(void *)&a2[*(int *)(v9 + 48)];
      uint64_t v10 = *(int *)(v9 + 64);
      int v11 = &a1[v10];
      uint64_t v12 = &a2[v10];
      uint64_t v13 = sub_21FA24320();
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        uint64_t v15 = sub_21F76CA40(&qword_26AD48588);
        memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      goto LABEL_10;
    }
    memcpy(a1, a2, *(void *)(v6 + 64));
  }
  return a1;
}

uint64_t sub_21F8AE4C4(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 3)
  {
    return swift_bridgeObjectRelease();
  }
  else if (result == 1)
  {
    uint64_t v3 = sub_21FA24310();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
    uint64_t v4 = a1 + *(int *)(sub_21F76CA40(&qword_26AD46658) + 64);
    uint64_t v5 = sub_21FA24320();
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v4, 1, v5);
    if (!result)
    {
      uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
      return v6(v4, v5);
    }
  }
  return result;
}

char *sub_21F8AE604(char *a1, unsigned char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    char v15 = a2[8];
    *(void *)a1 = *(void *)a2;
    a1[8] = v15;
    swift_bridgeObjectRetain();
LABEL_8:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = sub_21FA24310();
    (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = sub_21F76CA40(&qword_26AD46658);
    *(void *)&a1[*(int *)(v8 + 48)] = *(void *)&a2[*(int *)(v8 + 48)];
    uint64_t v9 = *(int *)(v8 + 64);
    uint64_t v10 = &a1[v9];
    int v11 = &a2[v9];
    uint64_t v12 = sub_21FA24320();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = sub_21F76CA40(&qword_26AD48588);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    goto LABEL_8;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

char *sub_21F8AE7E0(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_21F8A7F7C((uint64_t)a1, type metadata accessor for AxisMarkValues.Storage.Stride);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      char v15 = a2[8];
      *(void *)a1 = *(void *)a2;
      a1[8] = v15;
      swift_bridgeObjectRetain();
LABEL_9:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = sub_21FA24310();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      uint64_t v8 = sub_21F76CA40(&qword_26AD46658);
      *(void *)&a1[*(int *)(v8 + 48)] = *(void *)&a2[*(int *)(v8 + 48)];
      uint64_t v9 = *(int *)(v8 + 64);
      uint64_t v10 = &a1[v9];
      int v11 = &a2[v9];
      uint64_t v12 = sub_21FA24320();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        uint64_t v14 = sub_21F76CA40(&qword_26AD48588);
        memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      goto LABEL_9;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_21F8AE9E0(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_21FA24310();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    uint64_t v7 = sub_21F76CA40(&qword_26AD46658);
    *(void *)&a1[*(int *)(v7 + 48)] = *(void *)&a2[*(int *)(v7 + 48)];
    uint64_t v8 = *(int *)(v7 + 64);
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    uint64_t v11 = sub_21FA24320();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      uint64_t v13 = sub_21F76CA40(&qword_26AD48588);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_21F8AEB90(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_21F8A7F7C((uint64_t)a1, type metadata accessor for AxisMarkValues.Storage.Stride);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_21FA24310();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = sub_21F76CA40(&qword_26AD46658);
      *(void *)&a1[*(int *)(v7 + 48)] = *(void *)&a2[*(int *)(v7 + 48)];
      uint64_t v8 = *(int *)(v7 + 64);
      uint64_t v9 = &a1[v8];
      uint64_t v10 = &a2[v8];
      uint64_t v11 = sub_21FA24320();
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        uint64_t v13 = sub_21F76CA40(&qword_26AD48588);
        memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

unint64_t sub_21F8AED68()
{
  unint64_t result = qword_267EE80E0;
  if (!qword_267EE80E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_267EE80E0);
  }
  return result;
}

unint64_t sub_21F8AEDC0()
{
  unint64_t result = qword_26AD46800;
  if (!qword_26AD46800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AD46800);
  }
  return result;
}

uint64_t sub_21F8AEE14(double a1, double a2, double a3)
{
  uint64_t result = 0;
  char v4 = 0;
  uint64_t v5 = 0;
  double v6 = a1;
  do
  {
    BOOL v8 = v6 <= a2;
    if (a3 > 0.0) {
      BOOL v8 = v6 >= a2;
    }
    if (v8)
    {
      if ((v6 != a2) | v4 & 1) {
        return result;
      }
      char v4 = 1;
    }
    else
    {
      BOOL v7 = __OFADD__(v5++, 1);
      if (v7) {
        goto LABEL_12;
      }
      double v6 = a1 + (double)v5 * a3;
    }
    BOOL v7 = __OFADD__(result++, 1);
  }
  while (!v7);
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_21F8AEE88(uint64_t a1, uint64_t a2)
{
  if ((sub_21F8AEF40(a1, a2) & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for AxisMarkValues.Storage(0);
  uint64_t v5 = *(int *)(v4 + 20);
  int v6 = *(unsigned __int8 *)(a1 + v5);
  int v7 = *(unsigned __int8 *)(a2 + v5);
  if (v6 == 2)
  {
    if (v7 != 2) {
      return 0;
    }
LABEL_7:
    uint64_t v10 = *(int *)(v4 + 24);
    int v11 = *(unsigned __int8 *)(a1 + v10);
    int v12 = *(unsigned __int8 *)(a2 + v10);
    if (v11 == 2)
    {
      if (v12 != 2) {
        return 0;
      }
    }
    else
    {
      BOOL v13 = (v11 & 1) == 0;
      if (v12 == 2 || ((v13 ^ v12) & 1) == 0) {
        return 0;
      }
    }
    return 1;
  }
  uint64_t result = 0;
  BOOL v9 = (v6 & 1) == 0;
  if (v7 != 2 && ((v9 ^ v7) & 1) != 0) {
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_21F8AEF40(uint64_t a1, uint64_t a2)
{
  uint64_t v75 = sub_21FA24320();
  uint64_t v73 = *(void *)(v75 - 8);
  MEMORY[0x270FA5388](v75);
  uint64_t v70 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = sub_21F76CA40(&qword_26AD48598);
  MEMORY[0x270FA5388](v72);
  uint64_t v74 = (uint64_t)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_21F76CA40(&qword_26AD48588);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v71 = (uint64_t)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v76 = (uint64_t)&v69 - v9;
  MEMORY[0x270FA5388](v10);
  uint64_t v78 = (uint64_t)&v69 - v11;
  uint64_t v12 = sub_21FA24310();
  uint64_t v79 = *(void *)(v12 - 8);
  uint64_t v80 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v77 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (double *)((char *)&v69 - v18);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v69 - v21;
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (double *)((char *)&v69 - v24);
  uint64_t v26 = sub_21F76CA40(&qword_26AD46B78);
  MEMORY[0x270FA5388](v26 - 8);
  uint64_t v28 = (char *)&v69 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = (uint64_t)&v28[*(int *)(v29 + 56)];
  sub_21F8A7F14(a1, (uint64_t)v28, type metadata accessor for AxisMarkValues.Storage.Stride);
  sub_21F8A7F14(a2, v30, type metadata accessor for AxisMarkValues.Storage.Stride);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_21F8A7F14((uint64_t)v28, (uint64_t)v22, type metadata accessor for AxisMarkValues.Storage.Stride);
      uint64_t v39 = sub_21F76CA40(&qword_26AD46658);
      uint64_t v40 = *(int *)(v39 + 48);
      uint64_t v41 = *(void *)&v22[v40];
      uint64_t v42 = *(int *)(v39 + 64);
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        sub_21F76CA84((uint64_t)&v22[v42], &qword_26AD48588);
        (*(void (**)(char *, uint64_t))(v79 + 8))(v22, v80);
        goto LABEL_21;
      }
      uint64_t v69 = *(void *)(v30 + v40);
      uint64_t v43 = v30 + v42;
      uint64_t v44 = v79;
      uint64_t v45 = v77;
      uint64_t v46 = v30;
      uint64_t v47 = v80;
      (*(void (**)(char *, uint64_t, uint64_t))(v79 + 32))(v77, v46, v80);
      uint64_t v48 = v78;
      sub_21F76C9DC((uint64_t)&v22[v42], v78, &qword_26AD48588);
      uint64_t v49 = v43;
      uint64_t v50 = v76;
      sub_21F76C9DC(v49, v76, &qword_26AD48588);
      char v51 = sub_21FA24300();
      uint64_t v52 = *(void (**)(char *, uint64_t))(v44 + 8);
      v52(v22, v47);
      if ((v51 & 1) == 0)
      {
        sub_21F76CA84(v50, &qword_26AD48588);
        uint64_t v58 = v48;
LABEL_37:
        sub_21F76CA84(v58, &qword_26AD48588);
        v52(v45, v47);
        goto LABEL_38;
      }
      if (v41 != v69)
      {
        sub_21F76CA84(v50, &qword_26AD48588);
        uint64_t v58 = v78;
        goto LABEL_37;
      }
      uint64_t v53 = v74;
      uint64_t v54 = v74 + *(int *)(v72 + 48);
      uint64_t v55 = v78;
      sub_21F76C978(v78, v74, &qword_26AD48588);
      sub_21F76C978(v50, v54, &qword_26AD48588);
      uint64_t v56 = v73;
      uint64_t v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
      if (v57(v53, 1, v75) == 1)
      {
        sub_21F76CA84(v50, &qword_26AD48588);
        sub_21F76CA84(v55, &qword_26AD48588);
        v52(v77, v80);
        if (v57(v54, 1, v75) == 1)
        {
          sub_21F76CA84(v53, &qword_26AD48588);
          goto LABEL_49;
        }
        goto LABEL_47;
      }
      uint64_t v62 = v71;
      sub_21F76C978(v53, v71, &qword_26AD48588);
      if (v57(v54, 1, v75) != 1)
      {
        uint64_t v63 = v56;
        double v64 = *(void (**)(char *, uint64_t, uint64_t))(v56 + 32);
        uint64_t v65 = v70;
        uint64_t v66 = v75;
        v64(v70, v54, v75);
        sub_21F8AF93C(&qword_26AD48580, MEMORY[0x263F07920]);
        char v67 = sub_21FA25CE0();
        uint64_t v68 = *(void (**)(char *, uint64_t))(v63 + 8);
        v68(v65, v66);
        sub_21F76CA84(v76, &qword_26AD48588);
        sub_21F76CA84(v78, &qword_26AD48588);
        v52(v77, v80);
        v68((char *)v62, v66);
        sub_21F76CA84(v53, &qword_26AD48588);
        if ((v67 & 1) == 0) {
          goto LABEL_38;
        }
LABEL_49:
        sub_21F8A7F7C((uint64_t)v28, type metadata accessor for AxisMarkValues.Storage.Stride);
        return 1;
      }
      sub_21F76CA84(v76, &qword_26AD48588);
      sub_21F76CA84(v78, &qword_26AD48588);
      v52(v77, v80);
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v62, v75);
LABEL_47:
      sub_21F76CA84(v53, &qword_26AD48598);
LABEL_38:
      sub_21F8A7F7C((uint64_t)v28, type metadata accessor for AxisMarkValues.Storage.Stride);
      return 0;
    case 2u:
      sub_21F8A7F14((uint64_t)v28, (uint64_t)v19, type metadata accessor for AxisMarkValues.Storage.Stride);
      if (swift_getEnumCaseMultiPayload() != 2) {
        goto LABEL_21;
      }
      BOOL v36 = *v19 == *(double *)v30;
      sub_21F8A7F7C((uint64_t)v28, type metadata accessor for AxisMarkValues.Storage.Stride);
      return v36;
    case 3u:
      sub_21F8A7F14((uint64_t)v28, (uint64_t)v16, type metadata accessor for AxisMarkValues.Storage.Stride);
      uint64_t v37 = *(void **)v16;
      if (swift_getEnumCaseMultiPayload() != 3)
      {
        swift_bridgeObjectRelease();
LABEL_21:
        sub_21F76CA84((uint64_t)v28, &qword_26AD46B78);
        return 0;
      }
      int v38 = *(unsigned __int8 *)(v30 + 8);
      if (v16[8])
      {
        if (v16[8] == 1)
        {
          if (v38 != 1) {
            goto LABEL_35;
          }
          goto LABEL_30;
        }
        if (v38 == 2)
        {
          char v59 = sub_21F7D3F84(v37, *(void **)v30);
LABEL_33:
          char v60 = v59;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v60 & 1) == 0) {
            goto LABEL_38;
          }
          goto LABEL_49;
        }
      }
      else if (!*(unsigned char *)(v30 + 8))
      {
LABEL_30:
        char v59 = sub_21F7D3F18((uint64_t)v37, *(void *)v30);
        goto LABEL_33;
      }
LABEL_35:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_38;
    default:
      sub_21F8A7F14((uint64_t)v28, (uint64_t)v25, type metadata accessor for AxisMarkValues.Storage.Stride);
      uint64_t v31 = *(void *)v25;
      double v32 = v25[2];
      char v33 = *((unsigned char *)v25 + 24);
      if (swift_getEnumCaseMultiPayload()) {
        goto LABEL_21;
      }
      char v34 = *(unsigned char *)(v30 + 8);
      char v35 = *(unsigned char *)(v30 + 24);
      if ((_BYTE)v25[1])
      {
        if (!*(unsigned char *)(v30 + 8)) {
          goto LABEL_38;
        }
      }
      else
      {
        if (v31 != *(void *)v30) {
          char v34 = 1;
        }
        if (v34) {
          goto LABEL_38;
        }
      }
      if (v33)
      {
        if (!*(unsigned char *)(v30 + 24)) {
          goto LABEL_38;
        }
      }
      else
      {
        if (v32 != *(double *)(v30 + 16)) {
          char v35 = 1;
        }
        if (v35) {
          goto LABEL_38;
        }
      }
      goto LABEL_49;
  }
}

uint64_t sub_21F8AF8A4(double *a1)
{
  return sub_21F8AF8C0(a1) & 1;
}

uint64_t sub_21F8AF8C0(double *a1)
{
  uint64_t v2 = *(double **)(v1 + 24);
  double v3 = *a1;
  if ((*(unsigned char *)(v1 + 16) & 1) == 0 && *v2 > v3) {
    return 0;
  }
  if (v3 <= v2[1]) {
    return 1;
  }
  return *(unsigned __int8 *)(v1 + 32);
}

uint64_t sub_21F8AF8F8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

double sub_21F8AF908@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(double *)(v2 + 16) * (double)a1 + *(double *)(v2 + 24);
  *a2 = result;
  return result;
}

uint64_t sub_21F8AF920()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_21F8AF930(double *a1)
{
  return sub_21F8A9F20(*a1, *(double *)(v1 + 16), *(double *)(v1 + 24));
}

uint64_t sub_21F8AF93C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21F8AF984(uint64_t a1)
{
  return sub_21F8A7FE0(a1, *(unsigned __int8 *)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32)) & 1;
}

uint64_t sub_21F8AF9C4(uint64_t a1)
{
  return sub_21F8AF984(a1) & 1;
}

uint64_t sub_21F8AF9E0()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F8AF9FC()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F8AFA40()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F8AFA5C()
{
  return sub_21FA26090();
}

uint64_t sub_21F8AFA68()
{
  return sub_21FA26110();
}

uint64_t sub_21F8AFA74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a1, a3, AssociatedTypeWitness);
  uint64_t v7 = (uint64_t (*)(uint64_t *, void))sub_21FA261F0();
  uint64_t v9 = v8;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(a2, v9, v10);
  return v7(&v12, 0);
}

uint64_t sub_21F8AFB94()
{
  return sub_21FA260B0();
}

uint64_t sub_21F8AFBA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270F9E0B8](a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t sub_21F8AFBAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F9E0B0](a1, a2, a3, *(void *)(a4 + 16), *(void *)(a4 + 24));
}

uint64_t sub_21F8AFBB8()
{
  return sub_21FA26100();
}

uint64_t sub_21F8AFBC4()
{
  return sub_21FA260E0();
}

void (*sub_21F8AFBD8(uint64_t **a1, uint64_t a2))(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)malloc(0x40uLL);
  *a1 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v4[4] = TupleTypeMetadata2;
  uint64_t v8 = *(void *)(TupleTypeMetadata2 - 8);
  v4[5] = v8;
  uint64_t v9 = (char *)malloc(*(void *)(v8 + 64));
  v4[6] = (uint64_t)v9;
  uint64_t v10 = sub_21F8AFE04(v4, a2);
  uint64_t v12 = v11;
  v4[7] = (uint64_t)v10;
  (*(void (**)(char *))(*(void *)(AssociatedTypeWitness - 8) + 16))(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(&v9[*(int *)(TupleTypeMetadata2 + 48)], v12, v6);
  return sub_21F8AFD8C;
}

void sub_21F8AFD8C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  (*(void (**)(void, void))(*(void *)(*a1 + 40) + 8))(*(void *)(*a1 + 48), *(void *)(*a1 + 32));
  uint64_t v4 = *(void **)(v3 + 48);
  (*(void (**)(uint64_t, uint64_t))(v3 + 56))(v3, a2);
  free(v4);

  free((void *)v3);
}

void (*sub_21F8AFE04(uint64_t *a1, uint64_t a2))(void *a1)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  uint64_t v5 = *(void *)(TupleTypeMetadata2 - 8);
  a1[1] = v5;
  uint64_t v6 = malloc(*(void *)(v5 + 64));
  a1[2] = (uint64_t)v6;
  sub_21F8AFA74((uint64_t)v6, (uint64_t)v6 + *(int *)(TupleTypeMetadata2 + 48), a2);
  return sub_21F8AFF38;
}

void sub_21F8AFF38(void *a1)
{
  uint64_t v1 = (void *)a1[2];
  (*(void (**)(void *, void))(a1[1] + 8))(v1, *a1);

  free(v1);
}

uint64_t sub_21F8AFF98@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v2 = sub_21FA26340();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t sub_21F8B0034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21F8B0994(a1, a2, a3, a4, MEMORY[0x263F8D870], MEMORY[0x263F8D170]);
}

uint64_t sub_21F8B0074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21F8B0994(a1, a2, a3, a4, MEMORY[0x263F8D1A0], MEMORY[0x263F8D180]);
}

uint64_t sub_21F8B00BC(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v5 = (char *)&v7 - v4;
  sub_21F8AFB94();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, AssociatedTypeWitness);
}

uint64_t sub_21F8B01C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v7 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v13 - v8;
  uint64_t v10 = *(void *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v10 + 16))(a2, v2, a1, v7);
  sub_21F8AFA5C();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, a1);
  swift_getWitnessTable();
  uint64_t v11 = sub_21FA266B0();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2 + *(int *)(v11 + 36), v9, AssociatedTypeWitness);
}

uint64_t sub_21F8B034C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t sub_21F8B03A0(uint64_t a1)
{
  swift_getWitnessTable();
  uint64_t v3 = sub_21F8B0C04();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8))(v1, a1);
  return v3;
}

uint64_t sub_21F8B0430()
{
  return sub_21FA25DB0();
}

uint64_t sub_21F8B0454(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270F9D3F8](a1, *(void *)(a2 + 16));
}

uint64_t sub_21F8B045C(uint64_t a1, uint64_t a2)
{
  return sub_21F8B0454(a1, a2);
}

uint64_t sub_21F8B0464(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  __n128 v7 = (char *)&v9 - v6;
  sub_21F8B0454(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v7, AssociatedTypeWitness);
}

uint64_t sub_21F8B0584()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F8B05CC()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_21F8B05F0()
{
  return sub_21F8B066C();
}

uint64_t sub_21F8B061C()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_21F8B0640()
{
  return sub_21F8B066C();
}

uint64_t sub_21F8B066C()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F8B06C0()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F8B06DC()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_21F8B06F8()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_21F8B0714()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F8B0730(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v5 = sub_21FA26210();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v17 - v10;
  v17[1] = AssociatedConformanceWitness;
  LOBYTE(AssociatedConformanceWitness) = sub_21FA25C70();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12(v11, a1, v5);
  v12(v8, a2, v5);
  if ((AssociatedConformanceWitness & 1) == 0)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
    v16(v8, v5);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v11, v5);
    goto LABEL_5;
  }
  char v13 = sub_21FA25C70();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v8, v5);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v14)(v11, v5);
  if ((v13 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_21F8B093C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21F8B0994(a1, a2, a3, a4, MEMORY[0x263F8D870], MEMORY[0x263F8D170]);
}

uint64_t sub_21F8B0968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21F8B0994(a1, a2, a3, a4, MEMORY[0x263F8D1A0], MEMORY[0x263F8D180]);
}

uint64_t sub_21F8B0994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v23 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v22 - v17;
  char v19 = sub_21FA25C70();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }
  char v20 = v23(v18, &v14[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_21F8B0C08(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_21F8B0D64(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x21F8B0F7CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for IndexedCollection()
{
  return sub_21F764F08();
}

_OWORD *assignWithTake for ChartGestureConfiguration.Closure(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t sub_21F8B0FF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
}

uint64_t sub_21F8B102C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  size_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v9 = (void (*)(void))MEMORY[0x270FA5388](v6);
  int v11 = (char *)&v15 - v10;
  v9();
  unsigned int v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v12(v11, v8, a2);
  int v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v8, a2);
  v12(a3, v11, a2);
  return ((uint64_t (*)(char *, uint64_t))v13)(v11, a2);
}

uint64_t sub_21F8B116C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_21F8B102C(*v2, *(void *)(a1 + 16), a2);
}

uint64_t sub_21F8B117C()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F8B1198()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21F8B11DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F024B8](a1, a2, a3, WitnessTable);
}

uint64_t sub_21F8B1258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F024C0](a1, a2, a3, WitnessTable);
}

uint64_t sub_21F8B12D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21F8B1530(a1, a2, a3, (uint64_t)&unk_21FA2C538, MEMORY[0x263F1A348]);
}

uint64_t sub_21F8B1300@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21F8B1318(a1, a2);
}

uint64_t sub_21F8B1318@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void (**)(char *))(v4 + 16);
  v7(v6);
  ((void (*)(uint64_t, char *, uint64_t))v7)(a2, v6, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_21F8B140C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F01F58](a1, a2, a3, WitnessTable);
}

uint64_t sub_21F8B1488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F01F60](a1, a2, a3, WitnessTable);
}

uint64_t sub_21F8B1504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21F8B1530(a1, a2, a3, (uint64_t)&unk_21FA2C410, MEMORY[0x263F19FE0]);
}

uint64_t sub_21F8B1530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return a5(a1, a2, WitnessTable);
}

uint64_t sub_21F8B1580()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21F8B15E4(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_21F8B1740(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x21F8B1958);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t sub_21F8B1980(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_21F8B1988()
{
  return MEMORY[0x263F1BA00];
}

uint64_t sub_21F8B1994()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21F8B19D8()
{
  return swift_getWitnessTable();
}

uint64_t sub_21F8B19F4()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_21F8B1A38@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  double v100 = a5;
  uint64_t v99 = sub_21FA24C90();
  BOOL v9 = *(long long **)(v99 - 8);
  MEMORY[0x270FA5388](v99);
  uint64_t v98 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21FA25270();
  int v11 = sub_21F9336A4(a2);
  unsigned int v12 = (char *)*((void *)v11 + 2);
  if (v12)
  {
    uint64_t v75 = a4;
    if (qword_26AD44B90 != -1) {
LABEL_55:
    }
      swift_once();
    uint64_t v13 = 0;
    uint64_t v14 = (uint64_t)(v12 - 1);
    int v15 = v11 + 32;
    unsigned int v97 = *MEMORY[0x263F19860];
    char v95 = (void (**)(char *, uint64_t))v9 + 1;
    uint64_t v96 = (void (**)(char *, void, uint64_t))v9 + 13;
    double v90 = &v114;
    uint64_t v91 = v113;
    uint64_t v16 = &qword_26AD52000;
    double v101 = 3.14159265;
    double v94 = -1.57079633;
    double v93 = 0.0174532925;
    double v77 = 0.631494;
    double v76 = 0.0749114;
    uint64_t v92 = v12 - 1;
    do
    {
      uint64_t v17 = v13 - 1;
      if (v13 <= 0) {
        uint64_t v17 = v14;
      }
      if (v13 < v14) {
        unint64_t v18 = v13 + 1;
      }
      else {
        unint64_t v18 = 0;
      }
      unint64_t v19 = *((void *)v11 + 2);
      if (v17 >= (uint64_t)v19) {
        goto LABEL_53;
      }
      if (v18 >= v19) {
        goto LABEL_54;
      }
      float64x2_t v20 = *(float64x2_t *)&v15[16 * v13];
      float64x2_t v21 = *(float64x2_t *)&v15[16 * v17];
      float64x2_t v22 = *(float64x2_t *)&v15[16 * v18];
      double v23 = *(double *)&v15[16 * v17 + 8];
      double v24 = *(double *)&v15[16 * v13 + 8];
      double v25 = v23 - v24;
      float64x2_t v105 = vsubq_f64(v21, v20);
      float64x2_t v106 = v20;
      double v26 = v24 - v22.f64[1];
      double v27 = vmulq_f64(v105, v105).f64[0] + v25 * v25;
      float64x2_t v103 = vsubq_f64(v20, v22);
      float64x2_t v104 = v22;
      double v28 = vmulq_f64(v103, v103).f64[0] + v26 * v26;
      float64x2_t v102 = v21;
      float64x2_t v29 = vsubq_f64(v21, v22);
      double v30 = sqrt(v27 * v28);
      double v31 = acos((v27 + v28 - (vmulq_f64(v29, v29).f64[0] + (v23 - v22.f64[1]) * (v23 - v22.f64[1]))) / (v30 + v30));
      if (v31 >= v101 - *((double *)v16 + 39))
      {
        v117[0] = v107;
        v117[1] = v108;
        char v118 = v109;
        sub_21F7C48F4((uint64_t)v117, (uint64_t)v119);
        sub_21F7C4968((uint64_t)v119, (void (*)(void, void, void, void, void))sub_21F7C4950);
        char v45 = sub_21FA25210();
        sub_21F7C4968((uint64_t)v117, (void (*)(void, void, void, void, void))sub_21F7705AC);
        if (v45)
        {
          BOOL v9 = &v107;
          sub_21FA251D0();
        }
        else
        {
          BOOL v9 = &v107;
          sub_21FA25200();
        }
      }
      else
      {
        double v32 = v12;
        char v33 = v98;
        uint64_t v34 = v99;
        (*v96)(v98, v97, v99);
        char v35 = sub_21FA24C80();
        (*v95)(v33, v34);
        if (v31 + v94 >= v93 || (v35 & 1) == 0) {
          goto LABEL_22;
        }
        if (qword_26AD44B80 != -1) {
          swift_once();
        }
        if (*(double *)&qword_26AD52130 < v27 && *(double *)&qword_26AD52130 < v28)
        {
          v110[0] = v107;
          v110[1] = v108;
          char v111 = v109;
          sub_21F7C48F4((uint64_t)v110, (uint64_t)v121);
          sub_21F7C4968((uint64_t)v121, (void (*)(void, void, void, void, void))sub_21F7C4950);
          char v46 = sub_21FA25210();
          sub_21F7C4968((uint64_t)v110, (void (*)(void, void, void, void, void))sub_21F7705AC);
          unsigned int v12 = v32;
          if (v46) {
            sub_21FA251D0();
          }
          else {
            sub_21FA25200();
          }
          uint64_t v14 = (uint64_t)v92;
          uint64_t v16 = &qword_26AD52000;
          double v50 = sqrt(v27);
          double v51 = sqrt(v28);
          double v52 = sub_21F9A41DC(a3, v106.f64[0], v24, v100);
          if (v50 * 0.5 < v52) {
            double v52 = v50 * 0.5;
          }
          if (v51 * 0.5 >= v52) {
            double v53 = v52;
          }
          else {
            double v53 = v51 * 0.5;
          }
          v54.f64[0] = v105.f64[0] / v50;
          v54.f64[1] = v25 / v50;
          float64x2_t v105 = v54;
          v55.f64[0] = (0.0 - v103.f64[0]) / v51;
          v55.f64[1] = (0.0 - v26) / v51;
          float64x2_t v104 = v55;
          sub_21F951AEC(v53, v50 * 0.5);
          float64x2_t v102 = v56;
          long long v86 = v57;
          sub_21F951AEC(v53, v51 * 0.5);
          float64x2_t v103 = v58;
          long long v83 = v59;
          double v60 = sub_21F951BC4(v102.f64[0], 0.0, v106, v53, v105, v104);
          uint64_t v88 = v61;
          double v89 = v60;
          v102.f64[0] = sub_21F951BC4(v102.f64[1], 0.0, v106, v53, v105, v104);
          uint64_t v87 = v62;
          double v63 = sub_21F951BC4(*(double *)&v86, 0.0, v106, v53, v105, v104);
          uint64_t v85 = v64;
          *(double *)&long long v86 = v63;
          double v66 = v76;
          double v65 = v77;
          double v84 = sub_21F951BC4(v77, v76, v106, v53, v105, v104);
          uint64_t v82 = v67;
          double v68 = sub_21F951BC4(0.372824, 0.16906, v106, v53, v105, v104);
          uint64_t v80 = v69;
          double v81 = v68;
          double v70 = sub_21F951BC4(0.16906, 0.372824, v106, v53, v105, v104);
          uint64_t v78 = v71;
          double v79 = v70;
          sub_21F951BC4(v66, v65, v106, v53, v105, v104);
          sub_21F951BC4(0.0, *(double *)&v83, v106, v53, v105, v104);
          sub_21F951BC4(0.0, v103.f64[1], v106, v53, v105, v104);
          sub_21F951BC4(0.0, v103.f64[0], v106, v53, v105, v104);
          sub_21FA25200();
          sub_21FA25220();
          sub_21FA25220();
          BOOL v9 = &v107;
          sub_21FA25220();
        }
        else
        {
LABEL_22:
          unsigned int v12 = v11;
          tan(v31 * 0.5);
          BOOL v9 = (long long *)*a3;
          int v11 = *(char **)(*a3 + 16);
          if (v11)
          {
            uint64_t v37 = a1;
            int v38 = a3;
            uint64_t v39 = qword_26AD46270;
            swift_bridgeObjectRetain();
            if (v39 != -1) {
              swift_once();
            }
            uint64_t v40 = 0;
            uint64_t v41 = v9 + 3;
            a3 = v38;
            a1 = v37;
            while (1)
            {
              uint64_t v42 = (char *)(v40 + 1);
              if (__OFADD__(v40, 1)) {
                break;
              }
              double v43 = vabdd_f64(v24, *((double *)v41 - 1));
              if (vabdd_f64(v106.f64[0], *((double *)v41 - 2)) >= *(double *)&qword_26AD52218
                || v43 >= *(double *)&qword_26AD52218)
              {
                uint64_t v41 = (_OWORD *)((char *)v41 + 24);
                ++v40;
                if (v42 != v11) {
                  continue;
                }
              }
              swift_bridgeObjectRelease();
              goto LABEL_38;
            }
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }
LABEL_38:
          v115[0] = v107;
          v115[1] = v108;
          char v116 = v109;
          sub_21F7C48F4((uint64_t)v115, (uint64_t)v120);
          sub_21F7C4968((uint64_t)v120, (void (*)(void, void, void, void, void))sub_21F7C4950);
          char v47 = sub_21FA25210();
          sub_21F7C4968((uint64_t)v115, (void (*)(void, void, void, void, void))sub_21F7705AC);
          int v11 = v12;
          if (v47) {
            sub_21FA251D0();
          }
          else {
            sub_21FA25200();
          }
          unsigned int v12 = v32;
          uint64_t v48 = v91;
          uint64_t v14 = (uint64_t)v92;
          uint64_t v16 = &qword_26AD52000;
          *uint64_t v91 = 0;
          v48[1] = 0;
          uint64_t v112 = 0x3FF0000000000000;
          v113[2] = 0x3FF0000000000000;
          uint64_t v49 = v90;
          *double v90 = 0;
          v49[1] = 0;
          BOOL v9 = &v107;
          sub_21FA251E0();
        }
      }
      ++v13;
    }
    while ((char *)v13 != v12);
    swift_bridgeObjectRelease();
    a4 = v75;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_21FA251B0();
  char v72 = v109;
  double result = *(double *)&v107;
  long long v74 = v108;
  *(_OWORD *)a4 = v107;
  *(_OWORD *)(a4 + 16) = v74;
  *(unsigned char *)(a4 + 32) = v72;
  return result;
}

double sub_21F8B2304@<D0>(uint64_t a1@<X8>)
{
  sub_21F96D5C0(9);
  if (qword_26AD49C08 != -1) {
    swift_once();
  }
  sub_21F78BFE0((uint64_t)&qword_26AD52328, a1 + 32);
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(unsigned char *)(a1 + 856) = -1;
  sub_21F772F60((uint64_t)v8);
  *(void *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(unsigned char *)(a1 + 504) = -1;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(void *)(a1 + 608) = 0;
  *(unsigned char *)(a1 + 616) = -1;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(unsigned char *)(a1 + 720) = -1;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(void *)(a1 + 960) = 0;
  *(unsigned char *)(a1 + 968) = -1;
  sub_21F76C9DC((uint64_t)v8, a1 + 976, &qword_26AD491E0);
  uint64_t v2 = (int *)type metadata accessor for ChartModel.Scenegraph();
  uint64_t v3 = a1 + v2[14];
  uint64_t v4 = *MEMORY[0x263F18DC8];
  uint64_t v5 = sub_21FA24970();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104))(v3, v4, v5);
  uint64_t v6 = a1 + v2[17];
  *(void *)(v6 + 32) = 0;
  *(_OWORD *)uint64_t v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(unsigned char *)(v6 + 40) = -1;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(void *)(v6 + 80) = 0;
  *(unsigned char *)(v6 + 88) = -1;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(void *)(v6 + 128) = 0;
  *(unsigned char *)(v6 + 136) = -1;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(void *)(v6 + 176) = 0;
  *(unsigned char *)(v6 + 184) = -1;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  *(void *)(v6 + 224) = 0;
  *(unsigned char *)(v6 + 232) = -1;
  *(_OWORD *)(v6 + 240) = 0u;
  *(_OWORD *)(v6 + 256) = 0u;
  *(void *)(v6 + 272) = 0;
  *(_WORD *)(v6 + 280) = 255;
  *(unsigned char *)(v6 + 282) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = xmmword_21FA2C5A0;
  *(int64x2_t *)(a1 + 16) = vdupq_n_s64(0xE000000000000000);
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(unsigned char *)(a1 + 1144) = 1;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(void *)(a1 + v2[15]) = 0;
  *(void *)(a1 + v2[16]) = 0;
  return result;
}

uint64_t *sub_21F8B2504()
{
  if (qword_26AD49C10 != -1) {
    swift_once();
  }
  sub_21F798438(v0[2], v0[3], v0[4], v0[5], v0[6]);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_21F8B2678()
{
  sub_21F8B2504();

  return swift_deallocClassInstance();
}

uint64_t sub_21F8B26AC(uint64_t a1, uint64_t a2, char a3)
{
  int v5 = sub_21FA25120();
  unsigned __int8 v6 = sub_21FA25120();
  uint64_t v7 = 30;
  if (v5 == v6) {
    uint64_t v7 = 29;
  }
  uint64_t v8 = v3[v7];
  swift_retain();
  int v9 = sub_21FA25120();
  uint64_t result = v9 != sub_21FA25120();
  uint64_t v11 = v3[6];
  if (!v11)
  {
LABEL_10:
    int v20 = 0;
    if (!v8) {
      return result;
    }
    goto LABEL_11;
  }
  uint64_t v45 = v8;
  uint64_t v12 = v3[2];
  uint64_t v13 = v3[3];
  uint64_t v14 = v3[4];
  uint64_t v15 = v3[5];
  uint64_t v16 = v3[11];
  if (!*(void *)(v16 + 16) || (unint64_t v17 = sub_21F75BD50(result), (v18 & 1) == 0))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = sub_21F798438(v12, v13, v14, v15, v11);
    uint64_t v8 = v45;
    goto LABEL_10;
  }
  int v19 = *(unsigned __int8 *)(*(void *)(v16 + 56) + 72 * v17 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = sub_21F798438(v12, v13, v14, v15, v11);
  uint64_t v8 = v45;
  if (v19 != 1) {
    goto LABEL_10;
  }
  int v20 = 1;
  if (!v45) {
    return result;
  }
LABEL_11:
  sub_21F76CA40(&qword_26AD49F40);
  uint64_t v21 = swift_dynamicCastClass();
  if (v21)
  {
    float64x2_t v22 = (void *)v21;
    if (v20)
    {
      swift_retain();
      sub_21F7676B0();
      swift_beginAccess();
      if (v22[5])
      {
        sub_21F7676B0();
        uint64_t v23 = v22[5];
        if (v23)
        {
          uint64_t v24 = v22[6];
          uint64_t v25 = v22[7];
          uint64_t v27 = v22[8];
          uint64_t v26 = v22[9];
          uint64_t v29 = v22[10];
          uint64_t v28 = v22[11];
          uint64_t v30 = v22[13];
          uint64_t v31 = v22[14];
          uint64_t v32 = v22[15];
          uint64_t v33 = v22[16];
          uint64_t v34 = v22[17];
          uint64_t v35 = v22[12];
          unsigned __int8 v43 = v30;
          uint64_t v44 = v31;
          uint64_t v42 = v32;
          sub_21F8B4B60(v23, v24, v25, v27, v26, v29, v28, v35, v30, v31, v32, v33, v34, (void (*)(uint64_t, uint64_t))sub_21F7642FC);
          swift_release_n();
          BOOL v36 = sub_21F7757E4;
          return sub_21F8B4BE4(v23, v24, v25, v27, v26, v29, v28, v35, v43, v44, v42, v33, v34, (void (*)(uint64_t, uint64_t))v36);
        }
      }
      goto LABEL_31;
    }
    if ((a3 & 1) == 0)
    {
      swift_retain();
      sub_21F7676B0();
      swift_beginAccess();
      if (v22[5])
      {
        sub_21F96BCC0(v22[11]);
        return swift_release_n();
      }
      goto LABEL_31;
    }
  }
  else
  {
    sub_21F76CA40(&qword_26AD44B60);
    uint64_t v37 = swift_dynamicCastClass();
    if (!v37) {
      return swift_release();
    }
    int v38 = (void *)v37;
    if (v20)
    {
      swift_retain();
      sub_21F7676B0();
      swift_beginAccess();
      if (v38[5])
      {
        sub_21F7676B0();
        uint64_t v23 = v38[5];
        if (v23)
        {
          uint64_t v24 = v38[6];
          uint64_t v25 = v38[7];
          uint64_t v27 = v38[8];
          uint64_t v26 = v38[9];
          uint64_t v29 = v38[10];
          uint64_t v28 = v38[11];
          uint64_t v39 = v38[13];
          uint64_t v40 = v38[14];
          uint64_t v41 = v38[15];
          uint64_t v33 = v38[16];
          uint64_t v34 = v38[17];
          uint64_t v35 = v38[12];
          unsigned __int8 v43 = v39;
          uint64_t v44 = v40;
          uint64_t v42 = v41;
          sub_21F8B4B60(v23, v24, v25, v27, v26, v29, v28, v35, v39, v40, v41, v33, v34, (void (*)(uint64_t, uint64_t))sub_21F7642FC);
          swift_release_n();
          BOOL v36 = sub_21F76D5D8;
          return sub_21F8B4BE4(v23, v24, v25, v27, v26, v29, v28, v35, v43, v44, v42, v33, v34, (void (*)(uint64_t, uint64_t))v36);
        }
      }
LABEL_31:
      uint64_t result = sub_21FA266E0();
      __break(1u);
      return result;
    }
    if ((a3 & 1) == 0)
    {
      swift_retain();
      sub_21F7676B0();
      swift_beginAccess();
      if (v38[5]) {
        return swift_release_n();
      }
      goto LABEL_31;
    }
  }
  return swift_release();
}