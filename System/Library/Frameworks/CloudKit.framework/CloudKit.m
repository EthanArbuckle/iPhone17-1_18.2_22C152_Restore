uint64_t sub_18AF1304C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t vars8;

  v5 = sub_18AF130C0(*(void **)(a1 + 32), *(void *)(a1 + 56), a3, a4);
  v6 = *(void *)(*(void *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  v10 = sub_18AF130C0(*(void **)(a1 + 32), 0, v8, v9);
  v11 = *(void *)(*(void *)(a1 + 48) + 8);
  v12 = *(void *)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  return MEMORY[0x1F41817F8](v10, v12);
}

id sub_18AF130C0(void *a1, uint64_t a2, id a3, uint64_t a4)
{
  if (a1)
  {
    if (a2 == 1)
    {
      v4 = objc_msgSend_orgAdminUserID(a1, (const char *)1, (uint64_t)a3, a4);
    }
    else
    {
      if (a2) {
        goto LABEL_7;
      }
      v4 = objc_msgSend_containerScopedUserID(a1, 0, (uint64_t)a3, a4);
    }
    a3 = v4;
  }
  else
  {
    a3 = 0;
  }
LABEL_7:

  return a3;
}

void sub_18AF13158(uint64_t a1@<X8>)
{
  sub_18AF1318C();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3 & 1;
}

uint64_t sub_18AF13194()
{
  return CKAsyncSerialQueue.unownedExecutor.getter();
}

uint64_t sub_18AF13244(uint64_t a1)
{
  return MEMORY[0x1F4181798](a1, sel_CKDescriptionRedact_avoidShortDescription_, 0, 0);
}

uint64_t sub_18AF132C4(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_18AF13354((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);
  id v5 = a1;

  return MEMORY[0x1F40E4498](v5, a2, v4);
}

uint64_t sub_18AF13354(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id _s8CloudKit12CKSyncEngineC5EventO19SentDatabaseChangesV14FailedZoneSaveV4zoneSo08CKRecordJ0Cvg_0()
{
  return *v0;
}

uint64_t sub_18AF133B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F4181798](a1, sel__CKDescriptionWithExpansion_, 0, a4);
}

uint64_t sub_18AF1351C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1) {
    uint64_t v1 = *(void *)(v1 + 96);
  }
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = v1;
  return result;
}

uint64_t sub_18AF1353C()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_18AF1354C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void sub_18AF13810(uint64_t a1)
{
}

void sub_18AF13818(uint64_t a1)
{
}

void sub_18AF13820(uint64_t a1)
{
}

void sub_18AF13828(uint64_t a1)
{
}

void sub_18AF13830(uint64_t a1)
{
}

void sub_18AF13838(uint64_t a1)
{
}

void sub_18AF13840(uint64_t a1)
{
}

void sub_18AF13848(uint64_t a1)
{
}

void sub_18AF13850(uint64_t a1)
{
}

void sub_18AF13858(uint64_t a1)
{
}

void sub_18AF13860(uint64_t a1)
{
}

void sub_18AF13868(uint64_t a1)
{
}

void sub_18AF13870(uint64_t a1)
{
}

void sub_18AF13878(uint64_t a1)
{
}

void sub_18AF13880(uint64_t a1)
{
}

void sub_18AF13888(uint64_t a1)
{
}

void sub_18AF13890(uint64_t a1)
{
}

void sub_18AF13898(uint64_t a1)
{
}

void sub_18AF138A0(uint64_t a1)
{
}

void sub_18AF138A8(uint64_t a1)
{
}

void sub_18AF138B0(uint64_t a1)
{
}

void sub_18AF138B8(uint64_t a1)
{
}

void sub_18AF138C0(uint64_t a1)
{
}

void sub_18AF138C8(uint64_t a1)
{
}

void sub_18AF138D0(uint64_t a1)
{
}

void sub_18AF138D8(uint64_t a1)
{
}

void sub_18AF138E0(uint64_t a1)
{
}

void sub_18AF138E8(uint64_t a1)
{
}

void sub_18AF138F0(uint64_t a1)
{
}

void sub_18AF138F8(uint64_t a1)
{
}

void sub_18AF13900(uint64_t a1)
{
}

void sub_18AF13908(uint64_t a1)
{
}

void sub_18AF13910(uint64_t a1)
{
}

void sub_18AF13918(uint64_t a1)
{
}

void sub_18AF13920(uint64_t a1)
{
}

void sub_18AF13928(uint64_t a1)
{
}

void sub_18AF13930(uint64_t a1)
{
}

void sub_18AF13938(uint64_t a1)
{
}

void sub_18AF13940(uint64_t a1)
{
}

void sub_18AF13948(uint64_t a1)
{
}

void sub_18AF13950(uint64_t a1)
{
}

void sub_18AF13958(uint64_t a1)
{
}

void sub_18AF13960(uint64_t a1)
{
}

void sub_18AF13968(uint64_t a1)
{
}

void sub_18AF13970(uint64_t a1)
{
}

void sub_18AF13978(uint64_t a1)
{
}

void sub_18AF13980(uint64_t a1)
{
}

void sub_18AF13988(uint64_t a1)
{
}

void sub_18AF13990(uint64_t a1)
{
}

void sub_18AF13998(uint64_t a1)
{
}

void sub_18AF139A0(uint64_t a1)
{
}

void sub_18AF139A8(uint64_t a1)
{
}

void sub_18AF139B0(uint64_t a1)
{
}

void sub_18AF139B8(uint64_t a1)
{
}

void sub_18AF139C0(uint64_t a1)
{
}

void sub_18AF139C8(uint64_t a1)
{
}

void sub_18AF139D0(uint64_t a1)
{
}

void sub_18AF139D8(uint64_t a1)
{
}

void sub_18AF139E0(uint64_t a1)
{
}

void sub_18AF139E8(uint64_t a1)
{
}

void sub_18AF139F0(uint64_t a1)
{
}

void sub_18AF139F8(uint64_t a1)
{
}

void sub_18AF13A04(uint64_t a1)
{
}

void sub_18AF13A0C(uint64_t a1)
{
}

void sub_18AF13A14(uint64_t a1)
{
}

void sub_18AF13A1C(uint64_t a1)
{
}

void sub_18AF13A24(uint64_t a1)
{
}

void sub_18AF13A2C(uint64_t a1)
{
}

void sub_18AF13A34(uint64_t a1)
{
}

void sub_18AF13A3C(uint64_t a1)
{
}

void sub_18AF13A44(uint64_t a1)
{
}

void *sub_18AF13A4C(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t sub_18AF13A78(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_18AF13A88(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void *sub_18AF13A98(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t sub_18AF13AC4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void *sub_18AF13AD4(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t sub_18AF13B00(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_18AF13B10(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void *sub_18AF13B20(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF13B4C(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t sub_18AF13B78(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void *sub_18AF13B88(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t sub_18AF13BB4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_18AF13BC4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void *sub_18AF13BD4(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF13C00(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF13C2C(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF13C58(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF13C84(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF13CB0(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t sub_18AF13CDC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_18AF13CEC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void *sub_18AF13CFC(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF13D28(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF13D54(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF13D80(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF13DAC(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t sub_18AF13DD8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void *sub_18AF13DE8(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF13E14(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF13E40(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t sub_18AF13E6C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void *sub_18AF13E7C(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t sub_18AF13EA8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void *sub_18AF13EB8(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t sub_18AF13EE4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void *sub_18AF13EF4(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF13F20(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF13F4C(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t sub_18AF13F78(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void *sub_18AF13F88(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF13FB4(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF13FE0(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF1400C(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t sub_18AF14038(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void *sub_18AF14048(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF14074(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF140A0(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t sub_18AF140CC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void *sub_18AF140DC(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t sub_18AF14108(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void *sub_18AF14118(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF14144(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF14170(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF1419C(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF141C8(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF141F4(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF14220(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t sub_18AF1424C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void *sub_18AF1425C(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF14288(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF142B4(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

__n128 sub_18AF142E0(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

uint64_t sub_18AF142EC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_18AF142FC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_18AF1430C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_18AF1431C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void *sub_18AF1432C(uint64_t a1, uint64_t a2)
{
  __n128 result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF14358(uint64_t a1, uint64_t a2)
{
  __n128 result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF14384(uint64_t a1, uint64_t a2)
{
  __n128 result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF143B0(uint64_t a1, uint64_t a2)
{
  __n128 result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void *sub_18AF143DC(uint64_t a1, uint64_t a2)
{
  __n128 result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t sub_18AF14514(uint64_t a1, int *a2)
{
  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_18AF13048;
  return v6(a1);
}

uint64_t sub_18AF145F0()
{
  swift_unknownObjectRelease();

  if (*(void *)(v0 + 48)) {
    swift_release();
  }

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t sub_18AF1464C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  id v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *id v5 = v4;
  v5[1] = sub_18AF38E00;
  return v7();
}

void sub_18AF14890(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(*(void *)(a1 + 32) + 10))
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v2 = (void *)ck_log_facility_engine;
    if (os_log_type_enabled((os_log_t)ck_log_facility_engine, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = *(void **)(a1 + 32);
      id v5 = v2;
      v9 = objc_msgSend_shortDescription(v4, v6, v7, v8);
      int v10 = *(unsigned __int8 *)(a1 + 40);
      int v11 = 138543618;
      v12 = v9;
      __int16 v13 = 1024;
      int v14 = v10;
      _os_log_debug_impl(&dword_18AF10000, v5, OS_LOG_TYPE_DEBUG, "%{public}@ setting didPerformInitialUserRecordIDFetch %d", (uint8_t *)&v11, 0x12u);
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 10) = *(unsigned char *)(a1 + 40);
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3) {
      ++*(void *)(v3 + 96);
    }
  }
}

void sub_18AF149D8(uint64_t a1)
{
}

uint64_t sub_18AF14A0C()
{
  return sub_18AF35598();
}

uint64_t sub_18AF14A14()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18AF14A2C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 72) = a4;
  *(void *)(v5 + 80) = v4;
  *(unsigned char *)(v5 + 168) = a2;
  *(void *)(v5 + 56) = a1;
  *(void *)(v5 + 64) = a3;
  *(void *)(v5 + 88) = *v4;
  return MEMORY[0x1F4188298](sub_18AF37DE4, v4, 0);
}

uint64_t sub_18AF14A7C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  v9 = (int *)((char *)a2 + *a2);
  uint64_t v7 = (void *)swift_task_alloc();
  v5[4] = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_18AF294E4;
  return ((uint64_t (*)(uint64_t, void *))v9)(a1, v5 + 2);
}

uint64_t sub_18AF14B6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  *(unsigned char *)(v6 + 41) = a6;
  *(unsigned char *)(v6 + 40) = a5;
  *(void *)(v6 + 24) = a4;
  return MEMORY[0x1F4188298](sub_18AF2FDF4, 0, 0);
}

uint64_t sub_18AF14B94(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 104) = a4;
  *(void *)(v5 + 112) = a5;
  *(void *)(v5 + 96) = a3;
  *(_OWORD *)(v5 + 120) = *a2;
  return MEMORY[0x1F4188298](sub_18AF30200, 0, 0);
}

uint64_t sub_18AF14BC0()
{
  *(void *)(v1 + 168) = v0;
  return sub_18AF18660((uint64_t)sub_18AF2FA3C, v0);
}

uint64_t sub_18AF14BDC()
{
  uint64_t v0 = sub_18AF14C0C();

  return MEMORY[0x1F4186488](v0, 104, 7);
}

uint64_t sub_18AF14C0C()
{
  uint64_t v1 = *(void **)(v0 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_18AF14C68(char a1, char a2)
{
  *(void *)(v3 + 16) = v2;
  *(unsigned char *)(v3 + 33) = a2;
  *(unsigned char *)(v3 + 32) = a1;
  return sub_18AF18660((uint64_t)sub_18AF22F64, v2);
}

uint64_t sub_18AF14C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = *(void *)(v12 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5 & 1;
  return MEMORY[0x1F4188298](sub_18AF30C84, 0, 0);
}

uint64_t sub_18AF14D94()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18AF14DAC(uint64_t a1, int *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *a4;
  uint64_t v9 = a4[1];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v10;
  *uint64_t v10 = v4;
  v10[1] = sub_18AF13048;
  return sub_18AF14A7C(a1, a2, a3, v8, v9);
}

uint64_t sub_18AF14E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v6 = type metadata accessor for ContinuousClock();
  v4[3] = v6;
  v4[4] = *(void *)(v6 - 8);
  v4[5] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18AF22C0C, a4, 0);
}

void sub_18AF14F44(uint64_t a1, objc_class *a2, void *a3, void *a4, int a5)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = (objc_class *)self;
  if (qword_1EB27A0A8 != -1) {
    dispatch_once(&qword_1EB27A0A8, &unk_1ED7EC3A8);
  }
  if (byte_1EB279FAF && v10 != a2)
  {
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id v11 = v8;
    uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v12, (uint64_t)&v38, (uint64_t)v47, 16);
    if (v13)
    {
      uint64_t v15 = v13;
      uint64_t v16 = *(void *)v39;
LABEL_7:
      uint64_t v17 = 0;
      while (1)
      {
        if (*(void *)v39 != v16) {
          objc_enumerationMutation(v11);
        }
        if (v10 == *(objc_class **)(*((void *)&v38 + 1) + 8 * v17)) {
          goto LABEL_24;
        }
        if (v15 == ++v17)
        {
          uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v14, (uint64_t)&v38, (uint64_t)v47, 16);
          if (v15) {
            goto LABEL_7;
          }
          break;
        }
      }
    }

    NSStringFromClass(v10);
    id v11 = (id)objc_claimAutoreleasedReturnValue();
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    id v18 = v9;
    uint64_t v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v19, (uint64_t)&v34, (uint64_t)v46, 16);
    if (v20)
    {
      uint64_t v23 = v20;
      uint64_t v24 = *(void *)v35;
LABEL_15:
      uint64_t v25 = 0;
      while (1)
      {
        if (*(void *)v35 != v24) {
          objc_enumerationMutation(v18);
        }
        if (objc_msgSend_isEqualToString_(*(void **)(*((void *)&v34 + 1) + 8 * v25), v21, (uint64_t)v11, v22)) {
          break;
        }
        if (v23 == ++v25)
        {
          uint64_t v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v21, (uint64_t)&v34, (uint64_t)v46, 16);
          if (v23) {
            goto LABEL_15;
          }
          goto LABEL_21;
        }
      }
    }
    else
    {
LABEL_21:

      if (!a5)
      {
        if (ck_log_initialization_predicate != -1) {
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        }
        v31 = (void *)ck_log_facility_ck;
        if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
        {
          v32 = v31;
          v33 = NSStringFromClass(a2);
          *(_DWORD *)buf = 138543618;
          v43 = v33;
          __int16 v44 = 2114;
          id v45 = v11;
          _os_log_error_impl(&dword_18AF10000, v32, OS_LOG_TYPE_ERROR, "BUG IN CLIENT OF CLOUDKIT: %{public}@ should not be subclassed (%{public}@). If it is, Sendable may no longer apply. This will become an error in a near future release.", buf, 0x16u);
        }
        goto LABEL_24;
      }
      objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v26, v27, v28);
      id v18 = (id)objc_claimAutoreleasedReturnValue();
      v29 = NSStringFromClass(a2);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v18, v30, (uint64_t)sel_CKVerifySubclassWithBaseClass_allowedSubclasses_allowedExternalSubclasses_assert_, (uint64_t)v10, @"CKUtils.m", 2645, @"BUG IN CLIENT OF CLOUDKIT: %@ should not be subclassed (%@). If it is, Sendable may no longer apply.", v29, v11, (void)v34);
    }
LABEL_24:
  }
}

uint64_t sub_18AF15268(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_18AF38BE4;
  return sub_18AF1530C(a1, a2);
}

uint64_t sub_18AF1530C(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 16) = a2;
  *(void *)(v3 + 24) = v2;
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 48) = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v3 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v3 + 80) = v5;
  *(unsigned char *)(v3 + 120) = *(unsigned char *)(a1 + 64);
  return sub_18AF339EC((uint64_t)sub_18AF2129C);
}

uint64_t sub_18AF1534C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 8);
  return result;
}

uint64_t sub_18AF153B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  return MEMORY[0x1F4188298](sub_18AF2A6F4, 0, 0);
}

uint64_t sub_18AF153E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a2;
  v5[6] = a3;
  v5[3] = a5;
  v5[4] = a1;
  v5[2] = a4;
  return MEMORY[0x1F4188298](sub_18AF228D8, 0, 0);
}

uint64_t sub_18AF15408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *a4;
  uint64_t v9 = a4[1];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v10;
  *uint64_t v10 = v4;
  v10[1] = sub_18AF13048;
  return sub_18AF153E0(a1, a2, a3, v8, v9);
}

uint64_t sub_18AF154D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  return MEMORY[0x1F4188298](sub_18AF2258C, v3, 0);
}

uint64_t sub_18AF154F4(uint64_t a1)
{
  *(unsigned char *)(v2 + 81) = *(unsigned char *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(v2 + 320) = v1;
  *(void *)(v2 + 328) = v3;
  *(unsigned char *)(v2 + 82) = *(unsigned char *)(a1 + 16);
  *(_OWORD *)(v2 + 336) = *(_OWORD *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 40);
  *(unsigned char *)(v2 + 83) = *(unsigned char *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  *(void *)(v2 + 352) = v4;
  *(void *)(v2 + 360) = v5;
  *(unsigned char *)(v2 + 84) = *(unsigned char *)(a1 + 64);
  return sub_18AF18660((uint64_t)sub_18AF31C14, v1);
}

uint64_t sub_18AF15548(uint64_t a1, const void *a2)
{
  memcpy((void *)(v2 + 16), a2, 0x41uLL);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 88) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_18AF1FDD4;
  return sub_18AF154F4(v2 + 16);
}

uint64_t sub_18AF155EC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_18AF156D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (objc_msgSend_conformsToProtocol_(v6, v7, (uint64_t)&unk_1ED871C10, v8))
  {
    uint64_t v12 = objc_msgSend_CKDeepCopy(v6, v9, v10, v11);
  }
  else
  {
    if (objc_msgSend_conformsToProtocol_(v6, v9, (uint64_t)&unk_1ED84EF78, v11))
    {
      v31 = NSString;
LABEL_17:
      v33 = (objc_class *)objc_opt_class();
      long long v34 = NSStringFromClass(v33);
      long long v35 = NSStringFromProtocol((Protocol *)&unk_1ED871C10);
      uint64_t v38 = objc_msgSend_stringWithFormat_(v31, v36, @"Collection with class %@ does not support %@", v37, v34, v35);

      goto LABEL_20;
    }
    if (!objc_msgSend_conformsToProtocol_(v6, v13, (uint64_t)&unk_1ED848860, v14))
    {
      v32 = NSString;
LABEL_19:
      long long v39 = (objc_class *)objc_opt_class();
      long long v34 = NSStringFromClass(v39);
      uint64_t v38 = objc_msgSend_stringWithFormat_(v32, v40, @"Object with class %@ cannot be copied", v41, v34);
LABEL_20:

      v42 = [CKException alloc];
      id v44 = (id)objc_msgSend_initWithName_format_(v42, v43, *MEMORY[0x1E4F1C3C8], @"%@", v38);
      objc_exception_throw(v44);
    }
    uint64_t v12 = objc_msgSend_copyWithZone_(v6, v15, 0, v16);
  }
  uint64_t v17 = (void *)v12;

  id v18 = *(void **)(a1 + 32);
  id v45 = v5;
  if (objc_msgSend_conformsToProtocol_(v45, v19, (uint64_t)&unk_1ED871C10, v20))
  {
    uint64_t v24 = objc_msgSend_CKDeepCopy(v45, v21, v22, v23);
    goto LABEL_11;
  }
  if (objc_msgSend_conformsToProtocol_(v45, v21, (uint64_t)&unk_1ED84EF78, v23))
  {
    v31 = NSString;
    goto LABEL_17;
  }
  if (!objc_msgSend_conformsToProtocol_(v45, v25, (uint64_t)&unk_1ED848860, v26))
  {
    v32 = NSString;
    goto LABEL_19;
  }
  uint64_t v24 = objc_msgSend_copyWithZone_(v45, v27, 0, v28);
LABEL_11:
  v29 = (void *)v24;

  objc_msgSend_setObject_forKeyedSubscript_(v18, v30, (uint64_t)v17, (uint64_t)v29);
}

void CKSyncEngine.SendChangesOptions.Scope.description.getter()
{
  sub_18AF19F3C();
  switch(v2)
  {
    case 1:
      sub_18AF16C78();
      if (v11)
      {
        sub_18AF39168();
        _CocoaArrayWrapper.endIndex.getter();
        sub_18AF22CF0();
      }
      else
      {
        uint64_t v0 = *(void *)(v10 + 16);
      }
      uint64_t v12 = MEMORY[0x1E4FBC860];
      if (v0)
      {
        sub_18AF38A34();
        if (v0 < 0) {
          goto LABEL_49;
        }
        sub_18AF193E0();
        do
        {
          if (v1) {
            sub_18AF343DC();
          }
          else {
            id v13 = sub_18AF33E60();
          }
          id v14 = objc_msgSend(v13, sel_ckShortDescription);
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          sub_18AF42D9C();

          sub_18AF38F78();
          if (v8)
          {
            sub_18AF394BC();
            uint64_t v12 = v47;
          }
          sub_18AF392EC();
        }
        while (!v9);
      }
      sub_18AF161EC((uint64_t *)&unk_1E9125540);
      sub_18AF36488();
      sub_18AF18668();
      int v30 = sub_18AF33ACC();
      sub_18AF340E8(v30, v31, v32, v33, v34, v35, v36, v37, v46, v12, v48);
      swift_bridgeObjectRelease();
      uint64_t v28 = 10537;
      unint64_t v29 = 0xE200000000000000;
      goto LABEL_43;
    case 2:
      sub_18AF16C78();
      if (v16)
      {
        sub_18AF39168();
        _CocoaArrayWrapper.endIndex.getter();
        sub_18AF22CF0();
      }
      else
      {
        uint64_t v0 = *(void *)(v15 + 16);
      }
      uint64_t v17 = MEMORY[0x1E4FBC860];
      if (!v0) {
        goto LABEL_44;
      }
      sub_18AF38A34();
      if (v0 < 0) {
        goto LABEL_50;
      }
      sub_18AF193E0();
      do
      {
        if (v1) {
          sub_18AF343DC();
        }
        else {
          id v18 = sub_18AF33E60();
        }
        id v19 = objc_msgSend(v18, sel_ckShortDescription);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        sub_18AF42D9C();

        sub_18AF38F78();
        if (v8)
        {
          sub_18AF394BC();
          uint64_t v17 = v47;
        }
        sub_18AF392EC();
      }
      while (!v9);
LABEL_44:
      sub_18AF161EC((uint64_t *)&unk_1E9125540);
      sub_18AF36488();
      sub_18AF18668();
      int v38 = sub_18AF33ACC();
      sub_18AF340E8(v38, v39, v40, v41, v42, v43, v44, v45, v46, v17, v48);
      swift_bridgeObjectRelease();
      break;
    case 3:
      return;
    default:
      sub_18AF35548();
      swift_bridgeObjectRelease();
      sub_18AF16ED8();
      if (v4)
      {
        sub_18AF39168();
        _CocoaArrayWrapper.endIndex.getter();
        sub_18AF22CF0();
      }
      else
      {
        uint64_t v0 = *(void *)(v3 + 16);
      }
      uint64_t v5 = MEMORY[0x1E4FBC860];
      if (!v0) {
        goto LABEL_41;
      }
      sub_18AF38A34();
      if (v0 < 0)
      {
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
      }
      else
      {
        sub_18AF193E0();
        do
        {
          if (v1) {
            sub_18AF343DC();
          }
          else {
            id v6 = sub_18AF33E60();
          }
          id v7 = objc_msgSend(v6, sel_ckShortDescription);
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          sub_18AF42D9C();

          sub_18AF38F78();
          if (v8)
          {
            sub_18AF394BC();
            uint64_t v5 = v47;
          }
          sub_18AF392EC();
        }
        while (!v9);
LABEL_41:
        sub_18AF161EC((uint64_t *)&unk_1E9125540);
        sub_18AF36488();
        sub_18AF18668();
        int v20 = sub_18AF33ACC();
        sub_18AF340E8(v20, v21, v22, v23, v24, v25, v26, v27, v46, v5, v48);
        swift_bridgeObjectRelease();
        uint64_t v28 = 41;
        unint64_t v29 = 0xE100000000000000;
LABEL_43:
        String.append(_:)(*(Swift::String *)&v28);
      }
      break;
  }
}

uint64_t _CKCheckArgument(uint64_t a1, void *a2, int a3, char a4, int a5, void *a6)
{
  id v12 = a2;
  if (!v12)
  {
    if (a6)
    {
      objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v11, @"CKErrorDomain", 12, @"%s can not be nil", a1);
      goto LABEL_9;
    }
LABEL_21:
    uint64_t v19 = 0;
    goto LABEL_22;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
LABEL_14:
    uint64_t v19 = 1;
    goto LABEL_22;
  }
  unint64_t v16 = objc_msgSend_length(v12, v13, v14, v15);
  if ((a5 ^ 1 | a3) == 1 && !v16)
  {
    if (a6)
    {
      objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v17, @"CKErrorDomain", 12, @"%s can not be empty", a1);
LABEL_9:
      uint64_t v19 = 0;
      *a6 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (a3)
  {
    if (v16 < 0x100)
    {
      if ((objc_msgSend_hasPrefix_(v12, v17, @"cloudkit.", v18) & 1) == 0)
      {
        id v20 = v12;
        int v24 = (unsigned __int8 *)objc_msgSend_UTF8String(v20, v21, v22, v23);
        unint64_t v27 = objc_msgSend_lengthOfBytesUsingEncoding_(v20, v25, 4, v26);
        if (!sub_18B05FB18(v24, v27))
        {
          if (a6)
          {
            objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v28, @"CKErrorDomain", 12, @"%s (%@) contains invalid characters", a1, v20);
            goto LABEL_9;
          }
          goto LABEL_21;
        }
      }
      goto LABEL_14;
    }
LABEL_17:
    if (a6)
    {
      objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v17, @"CKErrorDomain", 12, @"%s (%@) is too long", a1, v12);
      goto LABEL_9;
    }
    goto LABEL_21;
  }
  uint64_t v19 = 1;
  if (v16 >= 0x100 && (a4 & 1) != 0) {
    goto LABEL_17;
  }
LABEL_22:

  return v19;
}

uint64_t CKCurrentProcessLinkChecke0fc00bd437646efa0e6635c2beaaea9()
{
  if (qword_1EB27A0A8 != -1) {
    dispatch_once(&qword_1EB27A0A8, &unk_1ED7EC3A8);
  }
  return byte_1EB279FAF;
}

uint64_t sub_18AF161EC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t CKObjectsAreBothNilOrEqual(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v7 = v4;
  if (v3 == v4)
  {
    uint64_t isEqual = 1;
  }
  else
  {
    uint64_t isEqual = 0;
    if (v3 && v4) {
      uint64_t isEqual = objc_msgSend_isEqual_(v3, v5, (uint64_t)v4, v6);
    }
  }

  return isEqual;
}

uint64_t CKAsyncSerialQueue.unownedExecutor.getter()
{
  return v0;
}

void ck_call_or_dispatch_sync_if_not_key(void *a1, const void *a2, void *a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = a3;
  if (v5)
  {
    if (dispatch_get_specific(a2)) {
      v6[2](v6);
    }
    else {
      dispatch_sync(v5, v6);
    }
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v7 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)char v8 = 0;
      _os_log_error_impl(&dword_18AF10000, v7, OS_LOG_TYPE_ERROR, "Attempted to call ck_call_or_dispatch_sync_if_not_key with a nil queue", v8, 2u);
    }
  }
}

__CFString *stringForCKErrorCode(__CFString *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if ((uint64_t)a1 <= 109)
  {
    uint64_t v5 = (char *)&a1[-1].length + 7;
    a1 = @"Internal Error";
    switch((unint64_t)v5)
    {
      case 0uLL:
        goto LABEL_160;
      case 1uLL:
        a1 = @"Partial Failure";
        break;
      case 2uLL:
        a1 = @"Network Unavailable";
        break;
      case 3uLL:
        a1 = @"Network Failure";
        break;
      case 4uLL:
        a1 = @"Bad Container";
        break;
      case 5uLL:
        a1 = @"Service Unavailable";
        break;
      case 6uLL:
        a1 = @"Request Rate Limited";
        break;
      case 7uLL:
        a1 = @"Missing Entitlement";
        break;
      case 8uLL:
        a1 = @"Not Authenticated";
        break;
      case 9uLL:
        a1 = @"Permission Failure";
        break;
      case 0xAuLL:
        a1 = @"Unknown Item";
        break;
      case 0xBuLL:
        a1 = @"Invalid Arguments";
        break;
      case 0xCuLL:
        a1 = @"Results Truncated";
        break;
      case 0xDuLL:
        a1 = @"Server Record Changed";
        break;
      case 0xEuLL:
        a1 = @"Server Rejected Request";
        break;
      case 0xFuLL:
        a1 = @"Asset File Not Found";
        break;
      case 0x10uLL:
        a1 = @"Asset File Modified";
        break;
      case 0x11uLL:
        a1 = @"Incompatible Version";
        break;
      case 0x12uLL:
        a1 = @"Constraint Violation";
        break;
      case 0x13uLL:
        a1 = @"Operation Cancelled";
        break;
      case 0x14uLL:
        a1 = @"Change Token Expired";
        break;
      case 0x15uLL:
        a1 = @"Batch Request Failed";
        break;
      case 0x16uLL:
        a1 = @"Zone Busy";
        break;
      case 0x17uLL:
        a1 = @"Invalid Database For Operation";
        break;
      case 0x18uLL:
        a1 = @"Quota Exceeded";
        break;
      case 0x19uLL:
        a1 = @"Zone Not Found";
        break;
      case 0x1AuLL:
        a1 = @"Limit Exceeded";
        break;
      case 0x1BuLL:
        a1 = @"User Deleted Zone";
        break;
      case 0x1CuLL:
        a1 = @"Too Many Participants";
        break;
      case 0x1DuLL:
        a1 = @"Already Shared";
        break;
      case 0x1EuLL:
        a1 = @"Reference Violation";
        break;
      case 0x1FuLL:
        a1 = @"Managed Account Restricted";
        break;
      case 0x20uLL:
        a1 = @"Participant May Need Verification";
        break;
      case 0x21uLL:
        a1 = @"Server Response Lost";
        break;
      case 0x22uLL:
        a1 = @"Asset File Not Available";
        break;
      case 0x23uLL:
        a1 = @"Account Temporarily Unavailable";
        break;
      default:
        if (@"Internal Error" != (__CFString *)100) {
          goto LABEL_158;
        }
        a1 = @"Record Archived";
        break;
    }
    return a1;
  }
  if ((uint64_t)a1 <= 139)
  {
    switch((unint64_t)a1)
    {
      case 0x6EuLL:
        a1 = @"Device-To-Device Encryption Unavailable";
        break;
      case 0x6FuLL:
        a1 = @"Keychain Sync Incomplete";
        break;
      case 0x70uLL:
        a1 = @"Identity Lost";
        break;
      case 0x71uLL:
      case 0x72uLL:
        a1 = @"Walrus Enabled";
        break;
      case 0x73uLL:
        a1 = @"Needs To Verify Terms";
        break;
      case 0x7CuLL:
        a1 = @"Server Streaming Asset Changed";
        break;
      case 0x82uLL:
        a1 = @"XPC Activity Not Continue";
        break;
      case 0x83uLL:
        a1 = @"XPC Activity Should Defer";
        break;
      case 0x84uLL:
        a1 = @"Scheduler Activity Deferred";
        break;
      default:
        goto LABEL_158;
    }
    return a1;
  }
  if ((uint64_t)a1 > 159)
  {
    if (a1 == (__CFString *)160)
    {
      a1 = @"Incompatible OS Version";
    }
    else
    {
      if (a1 != (__CFString *)161) {
        goto LABEL_158;
      }
      a1 = @"Signature Validation Failed";
    }
  }
  else
  {
    if (a1 != (__CFString *)140)
    {
      if (a1 == (__CFString *)150)
      {
        a1 = @"Mergeable Value ID Mismatch";
        return a1;
      }
LABEL_158:
      if ((uint64_t)a1 < 1000)
      {
        a1 = @"Unknown Error";
      }
      else
      {
        uint64_t v7 = CKErrorCodeForUnderlyingErrorCode((uint64_t)a1, a2, a3, a4);
        stringForCKErrorCode(v7);
        a1 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_160:
      }
      return a1;
    }
    a1 = @"Insufficient Disk Space";
  }
  return a1;
}

id CKShortRandomID()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  arc4random_buf(__buf, 8uLL);
  uint64_t v0 = 0;
  uint64_t v1 = (char *)&v7 + 1;
  do
  {
    unint64_t v2 = __buf[v0];
    *(v1 - 1) = a0123456789abcd[v2 & 0xF];
    *uint64_t v1 = a0123456789abcd[v2 >> 4];
    v1 += 2;
    ++v0;
  }
  while (v0 != 8);
  id v3 = [NSString alloc];
  uint64_t v5 = objc_msgSend_initWithBytes_length_encoding_(v3, v4, (uint64_t)&v7, 16, 1);

  return v5;
}

uint64_t CKSyncEngine.actor.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  unint64_t v2 = (uint64_t *)&v1[4];
  id v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_18AF19D90(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(void *)(v0 + OBJC_IVAR___CKSyncEngine_swiftEngine))
  {
    swift_retain();
    uint64_t v1 = CKSyncEngine.actor.getter();
    swift_release();
    return v1;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall CKSyncEngineSendChangesOptions.updateOperationGroupName()()
{
  sub_18AF35C60((void (*)(uint64_t *__return_ptr))CKSyncEngineSendChangesScope.scopeEnum(), (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_18AF362E8);
}

void sub_18AF16A7C()
{
  sub_18AF5B1A8();
}

uint64_t sub_18AF16AC0()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t sub_18AF16AE4(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t sub_18AF16B08()
{
  return swift_bridgeObjectRetain();
}

uint64_t _s8CloudKit12CKSyncEngineC5EventO22FetchedDatabaseChangesV13modificationsSaySo10CKDatabaseCAAE0G6ChangeO12ModificationVGvg_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AF16B44()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_18AF16B74()
{
  return sub_18AF88454(v0, v1, v2);
}

uint64_t sub_18AF16B9C()
{
  return swift_slowAlloc();
}

uint64_t sub_18AF16BC0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AF16BE0()
{
  return (*(uint64_t (**)(void, void))(v0 + 8))(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_18AF16C38()
{
  return swift_bridgeObjectRetain_n();
}

Swift::Void __swiftcall CKSyncEngineFetchChangesOptions.updateOperationGroupName()()
{
  sub_18AF35C60((void (*)(uint64_t *__return_ptr))CKSyncEngineFetchChangesScope.scopeEnum(), (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_18AF36168);
}

uint64_t sub_18AF16CE0(uint64_t result)
{
  *(void *)(v1 - 168) = result;
  return result;
}

uint64_t sub_18AF16CF4()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t sub_18AF16D30(uint64_t result)
{
  *(void *)(result + 16) = v1;
  return result;
}

uint64_t sub_18AF16D48()
{
  return v0 + 8;
}

uint64_t sub_18AF16D68()
{
  return swift_dynamicCastObjCClass();
}

uint64_t sub_18AF16D8C()
{
  uint64_t v7 = *v1;
  *(void *)(v7 + 16) = v5 + 1;
  char v8 = (void *)(v7 + 32 * v5);
  v8[4] = v4;
  v8[5] = v0;
  v8[6] = v3;
  v8[7] = v2;
  return swift_release();
}

uint64_t sub_18AF16DB8()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_18AF16DE0()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_18AF16DF8(uint64_t a1)
{
  return a1 - 8;
}

void *sub_18AF16E10(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  uint64_t v9 = a4 & 1;
  return sub_18AF883B8((uint64_t *)va, a2, a3, v9, a5);
}

BOOL sub_18AF16E34(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_18AF16E50()
{
  return v0;
}

void sub_18AF16E74(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_18AF16E94(uint64_t a1)
{
  return a1 - 8;
}

uint64_t CKQualityOfServiceOrdering(uint64_t a1)
{
  if (a1 <= 16)
  {
    if (a1 == -1) {
      return 2;
    }
    if (a1 == 9) {
      return 0;
    }
  }
  else
  {
    switch(a1)
    {
      case 33:
        return 4;
      case 25:
        return 3;
      case 17:
        return 1;
    }
  }
  return 0xFFFFFFFFLL;
}

id CKValidateKeyName(void *a1)
{
  id v3 = 0;
  _CKCheckArgument((uint64_t)"recordKey", a1, 1, 1, 0, &v3);
  id v1 = v3;

  return v1;
}

__CFString *CKStringFromAccountStatus(unint64_t a1)
{
  if (a1 > 4) {
    return @"Unknown status";
  }
  else {
    return off_1E54619B8[a1];
  }
}

unsigned char *CKHexCharFromBytes(uint64_t a1, unint64_t a2, void *a3, char a4)
{
  unint64_t v4 = a2;
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if ((a4 & 2) != 0) {
    os_log_type_t v5 = "0123456789ABCDEF";
  }
  else {
    os_log_type_t v5 = "0123456789abcdef";
  }
  if (a2 >= 0x5555555555555556)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v6 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      int v19 = 134217984;
      unint64_t v20 = v4;
      _os_log_impl(&dword_18AF10000, v6, OS_LOG_TYPE_INFO, "Warn: Hex string length is too long: %lu", (uint8_t *)&v19, 0xCu);
    }
    return 0;
  }
  unint64_t v11 = (a2 - 1) >> 2;
  if (a4) {
    unint64_t v11 = 0;
  }
  uint64_t result = malloc_type_calloc(v11 + 2 * a2 + 1, 1uLL, 0x25E74602uLL);
  if (v4 < 5)
  {
    uint64_t v12 = 0;
    uint64_t v14 = result;
    if (!v4) {
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = a1;
    uint64_t v14 = result;
    do
    {
      for (uint64_t i = 0; i != 4; ++i)
      {
        *uint64_t v14 = v5[(unint64_t)*(unsigned __int8 *)(v13 + i) >> 4];
        v14[1] = v5[*(unsigned char *)(v13 + i) & 0xF];
        v14 += 2;
      }
      if ((a4 & 1) == 0) {
        *v14++ = 32;
      }
      v12 += 4;
      v4 -= 4;
      v13 += 4;
    }
    while (v4 > 4);
    if (!v4) {
      goto LABEL_25;
    }
  }
  unint64_t v16 = (char *)(a1 + v12);
  do
  {
    *uint64_t v14 = v5[(unint64_t)*v16 >> 4];
    char v17 = *v16++;
    uint64_t v18 = v14 + 2;
    v14[1] = v5[v17 & 0xF];
    v14 += 2;
    --v4;
  }
  while (v4);
  uint64_t v14 = v18;
LABEL_25:
  *uint64_t v14 = 0;
  if (a3) {
    *a3 = v14 - result;
  }
  return result;
}

uint64_t CKSyncEngineSendChangesScope.scopeEnum()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_18AF34E08(v1, (SEL *)&selRef_recordIDs, &qword_1E91255F0, (uint64_t)off_1E545EEB0, (unint64_t *)&qword_1E91251C8);
  if (v3)
  {
    sub_18AFBF634(v3);
    uint64_t result = sub_18AF40F74();
    char v5 = 2;
  }
  else
  {
    uint64_t v6 = sub_18AF34E08(v1, (SEL *)&selRef_zoneIDs, (unint64_t *)&qword_1EB279460, (uint64_t)off_1E545EEE0, (unint64_t *)&qword_1EB279468);
    if (v6)
    {
      sub_18AF19D54(v6);
      uint64_t result = sub_18AF40F74();
      char v5 = 1;
    }
    else
    {
      id v7 = sub_18AF47644();
      sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
      sub_18AF34EDC((unint64_t *)&qword_1EB279468, (unint64_t *)&qword_1EB279460);
      uint64_t v8 = sub_18AF410CC();

      LOBYTE(v7) = sub_18AFC281C(v8);
      uint64_t result = swift_bridgeObjectRelease();
      if (v7)
      {
        id v1 = 0;
        char v5 = 3;
      }
      else
      {
        id v1 = sub_18AF47644();
        uint64_t v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        sub_18AF19D54(v9);
        uint64_t result = sub_18AF40F74();
        char v5 = 0;
      }
    }
  }
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = v5;
  return result;
}

CKSyncEngineEvent __swiftcall CKSyncEngine.Event.eventObject()()
{
  uint64_t v2 = (void *)*v0;
  id v1 = (void *)v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v8 = v0[6];
  uint64_t v7 = v0[7];
  unsigned int v9 = *((unsigned __int8 *)v0 + 64);
  switch(v9 >> 4)
  {
    case 1u:
      if (v0[2])
      {
        if (v0[2] == 1) {
          v60 = 0;
        }
        else {
          v60 = (void *)v0[1];
        }
        unint64_t v61 = (unint64_t)v2;
      }
      else
      {
        unint64_t v61 = v0[2];
        v60 = (void *)*v0;
      }
      sub_18AF34EA0(0, &qword_1E9124FA8);
      sub_18AF755E8(v2, v1, v4);
      sub_18AF73730((void *)v61, v60);
      break;
    case 2u:
      uint64_t v18 = v2[2];
      if (v18)
      {
        swift_bridgeObjectRetain();
        specialized ContiguousArray.reserveCapacity(_:)();
        uint64_t v19 = 0;
        do
        {
          uint64_t v20 = v19 + 1;
          objc_msgSend(objc_allocWithZone((Class)CKRecordZone), sel_initWithZoneID_, v2[v19 + 4]);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          sub_18AF312BC();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          uint64_t v19 = v20;
        }
        while (v18 != v20);
        swift_bridgeObjectRelease();
      }
      uint64_t v21 = v1[2];
      if (v21)
      {
        swift_bridgeObjectRetain();
        specialized ContiguousArray.reserveCapacity(_:)();
        uint64_t v22 = (unsigned __int8 *)(v1 + 5);
        do
        {
          uint64_t v23 = *((void *)v22 - 1);
          unsigned int v24 = *v22;
          v22 += 16;
          objc_msgSend(objc_allocWithZone((Class)CKSyncEngineFetchedZoneDeletion), sel_initWithZoneID_reason_, v23, v24);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          sub_18AF312BC();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          --v21;
        }
        while (v21);
        swift_bridgeObjectRelease();
      }
      id v25 = objc_allocWithZone((Class)CKSyncEngineFetchedDatabaseChangesEvent);
      sub_18AF74AD4();
      break;
    case 3u:
      uint64_t v62 = v2[2];
      if (v62)
      {
        swift_bridgeObjectRetain();
        sub_18AF3F784();
        uint64_t v63 = 0;
        do
        {
          uint64_t v64 = v63 + 1;
          id v65 = (id)v2[v63 + 4];
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          sub_18AF33D58();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          uint64_t v63 = v64;
        }
        while (v62 != v64);
        swift_bridgeObjectRelease();
      }
      uint64_t v66 = v1[2];
      if (v66)
      {
        swift_bridgeObjectRetain();
        sub_18AF3F784();
        v67 = v1 + 6;
        do
        {
          v69 = (void *)*(v67 - 2);
          uint64_t v68 = *(v67 - 1);
          uint64_t v70 = *v67;
          v67 += 3;
          objc_allocWithZone((Class)CKSyncEngineFetchedRecordDeletion);
          id v71 = v69;
          swift_bridgeObjectRetain();
          sub_18AF74B88(v71, v68, v70);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          sub_18AF33D58();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          --v66;
        }
        while (v66);
        swift_bridgeObjectRelease();
      }
      uint64_t v72 = *(void *)(v4 + 16);
      if (v72)
      {
        swift_bridgeObjectRetain();
        specialized ContiguousArray.reserveCapacity(_:)();
        uint64_t v73 = 0;
        do
        {
          uint64_t v74 = v73 + 1;
          id v75 = *(id *)(v4 + 8 * v73 + 32);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          sub_18AF33D58();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          uint64_t v73 = v74;
        }
        while (v72 != v74);
        swift_bridgeObjectRelease();
      }
      id v76 = objc_allocWithZone((Class)CKSyncEngineFetchedRecordZoneChangesEvent);
      sub_18AF31160();
      sub_18AF74BF4();
      break;
    case 4u:
      uint64_t v26 = v1[2];
      if (v26)
      {
        uint64_t v124 = v0[3];
        swift_bridgeObjectRetain();
        sub_18AF3F784();
        unint64_t v27 = (void **)(v1 + 5);
        do
        {
          uint64_t v28 = *(v27 - 1);
          unint64_t v29 = *v27;
          id v30 = objc_allocWithZone((Class)CKSyncEngineFailedZoneSave);
          sub_18AF74E50(v28, v29, (SEL *)&selRef_initWithZone_error_);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          sub_18AF37BD0();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v27 += 2;
          --v26;
        }
        while (v26);
        swift_bridgeObjectRelease();
        uint64_t v3 = v124;
      }
      sub_18AF75268(v3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_18AFFE6D4();
      swift_release();
      id v31 = objc_allocWithZone((Class)CKSyncEngineSentDatabaseChangesEvent);
      sub_18AF43740();
      sub_18AF74CEC();
      break;
    case 5u:
      uint64_t v77 = v1[2];
      if (v77)
      {
        uint64_t v125 = v0[3];
        swift_bridgeObjectRetain();
        sub_18AF3F784();
        v78 = (void **)(v1 + 5);
        do
        {
          v79 = *(v78 - 1);
          v80 = *v78;
          id v81 = objc_allocWithZone((Class)CKSyncEngineFailedRecordSave);
          sub_18AF74E50(v79, v80, (SEL *)&selRef_initWithRecord_error_);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          sub_18AF37BD0();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v78 += 2;
          --v77;
        }
        while (v77);
        swift_bridgeObjectRelease();
        uint64_t v3 = v125;
      }
      sub_18AF75098(v3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_18AFFE6E0();
      swift_release();
      id v82 = objc_allocWithZone((Class)CKSyncEngineSentRecordZoneChangesEvent);
      sub_18AF43740();
      sub_18AF74EC0();
      break;
    case 6u:
      sub_18AF3921C();
      v83 = v0;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v84 = v83;
      CKSyncEngine.FetchChangesOptions.optionsObject()(v85);
      v87 = v86;
      id v88 = sub_18AF18F2C(objc_allocWithZone((Class)CKSyncEngineFetchChangesContext), sel_initWithReason_options_);

      v89 = v122;
      sub_18AF38ED8(v2, v1, v4, v122, v90, v91, v92, v93, v9);
      v94 = CKSyncEngineWillFetchChangesEvent;
      goto LABEL_49;
    case 7u:
      id v95 = objc_allocWithZone((Class)CKSyncEngineWillFetchRecordZoneChangesEvent);
      sub_18AF18284();
      return (CKSyncEngineEvent)[v96 v97];
    case 8u:
      id v100 = objc_allocWithZone((Class)CKSyncEngineDidFetchRecordZoneChangesEvent);
      v101 = v2;
      v102 = v1;
      v103 = (void *)sub_18AF311C8();
      sub_18AF75024(v103, v104);
      break;
    case 9u:
      sub_18AF3921C();
      int v32 = v0;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      int v33 = v32;
      CKSyncEngine.FetchChangesOptions.optionsObject()(v34);
      int v36 = v35;
      id v37 = sub_18AF18F2C(objc_allocWithZone((Class)CKSyncEngineFetchChangesContext), sel_initWithReason_options_);

      int v38 = (void *)sub_18AF19FFC();
      sub_18AF38ED8(v38, v39, v40, v122, v41, v42, v43, v44, v119);
      objc_msgSend(objc_allocWithZone((Class)CKSyncEngineDidFetchChangesEvent), sel_initWithContext_, v37);

      sub_18AF17DC8(v2, v1, v4, v122, v6, v5, v8, v7, v9);
      break;
    case 0xAu:
      sub_18AF3091C();
      v126 = v105;
      swift_bridgeObjectRetain_n();
      v106 = v0;
      v107 = (void *)CKSyncEngine.SendChangesOptions.optionsObject()();
      id v88 = sub_18AF18F2C(objc_allocWithZone((Class)CKSyncEngineSendChangesContext), sel_initWithReason_options_);

      v89 = v126;
      sub_18AF38ED8(v2, v1, v4, v126, v108, v109, v110, v111, v9);
      v94 = CKSyncEngineWillSendChangesEvent;
LABEL_49:
      objc_msgSend(objc_allocWithZone((Class)v94), sel_initWithContext_, v88);

      v112 = (void *)sub_18AF19FFC();
      sub_18AF38ED8(v112, v113, v114, v89, v115, v116, v117, v118, v121);
      break;
    case 0xBu:
      sub_18AF3091C();
      swift_bridgeObjectRetain_n();
      int v45 = v0;
      uint64_t v46 = (void *)CKSyncEngine.SendChangesOptions.optionsObject()();
      id v47 = sub_18AF18F2C(objc_allocWithZone((Class)CKSyncEngineSendChangesContext), sel_initWithReason_options_);

      char v48 = (void *)sub_18AF40F98();
      sub_18AF17DC8(v48, v49, v50, v51, v52, v53, v8, v7, v119);
      objc_msgSend(objc_allocWithZone((Class)CKSyncEngineDidSendChangesEvent), sel_initWithContext_, v47);

      v54 = (void *)sub_18AF40F98();
      sub_18AF17DC8(v54, v55, v56, v57, v58, v59, v8, v7, v120);
      break;
    default:
      v123 = (void *)v0[3];
      sub_18AF34EA0(0, &qword_1E9125128);
      sub_18AF5F6FC((uint64_t)v2, (unint64_t)v1);
      sub_18AF5F6FC((uint64_t)v2, (unint64_t)v1);
      id v10 = sub_18AF736B8((uint64_t)v2, (unint64_t)v1);
      objc_msgSend(objc_allocWithZone((Class)CKSyncEngineStateUpdateEvent), sel_initWithStateSerialization_, v10);

      unint64_t v11 = (void *)sub_18AF19FFC();
      sub_18AF38ED8(v11, v12, v13, v123, v14, v15, v16, v17, v119);
      break;
  }
  sub_18AF18284();
  return result;
}

void sub_18AF17DC8(void *a1, void *a2, unsigned __int8 a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  switch(a9 >> 4)
  {
    case 0:
      sub_18AF5AF68((uint64_t)a1, (unint64_t)a2);
      return;
    case 1:
      sub_18AF74A88(a1, a2, a3);
      return;
    case 2:
      goto LABEL_11;
    case 3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_12;
    case 4:
    case 5:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_12;
    case 6:
    case 9:

      swift_bridgeObjectRelease();
LABEL_11:
      swift_bridgeObjectRelease();
      goto LABEL_12;
    case 7:
      goto LABEL_17;
    case 8:

      a1 = a2;
LABEL_17:

      break;
    case 0xA:
    case 0xB:

LABEL_12:
      swift_bridgeObjectRelease();
      break;
    default:
      return;
  }
}

void CKSyncEngine.Event.description.getter()
{
  id v1 = *(void **)v0;
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 56);
  switch(*(unsigned __int8 *)(v0 + 64) >> 4)
  {
    case 1:
      CKSyncEngine.Event.AccountChange.description.getter();
      break;
    case 2:
      CKSyncEngine.Event.FetchedDatabaseChanges.description.getter();
      break;
    case 3:
      CKSyncEngine.Event.FetchedRecordZoneChanges.description.getter();
      break;
    case 4:
      CKSyncEngine.Event.SentDatabaseChanges.description.getter();
      break;
    case 5:
      CKSyncEngine.Event.SentRecordZoneChanges.description.getter();
      break;
    case 6:
      sub_18AF38200();
      sub_18AF379D8();
      sub_18AF192DC();
      id v15 = v2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v16._countAndFlagsBits = CKSyncEngine.FetchChangesContext.description.getter();
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      uint64_t v17 = (void *)sub_18AF3063C();
      uint64_t v24 = v4;
      goto LABEL_15;
    case 7:
      sub_18AF38200();
      id v25 = objc_msgSend(v1, sel_description);
      uint64_t v41 = v4;
      uint64_t v42 = v3;
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v28 = v27;

      v29._countAndFlagsBits = v26;
      v29._object = v28;
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      id v30 = (void *)sub_18AF3846C();
      sub_18AF17DC8(v30, v31, v32, v33, v34, v35, v42, v41, v40);
      sub_18AF38960();
      break;
    case 8:
      CKSyncEngine.Event.DidFetchRecordZoneChanges.description.getter();
      break;
    case 9:
      sub_18AF38200();
      sub_18AF192DC();
      id v36 = v2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t Changes = CKSyncEngine.FetchChangesContext.description.getter();
      goto LABEL_14;
    case 0xA:
    case 0xB:
      sub_18AF38200();
      sub_18AF379D8();
      swift_bridgeObjectRetain();
      id v39 = v2;
      unint64_t Changes = CKSyncEngine.SendChangesContext.description.getter();
LABEL_14:
      String.append(_:)(*(Swift::String *)&Changes);
      swift_bridgeObjectRelease();
      uint64_t v17 = (void *)sub_18AF3846C();
      uint64_t v23 = v3;
      uint64_t v24 = v4;
LABEL_15:
      sub_18AF17DC8(v17, v18, v19, v20, v21, v22, v23, v24, v40);
      sub_18AF38960();
      break;
    default:
      sub_18AF5F6FC((uint64_t)v1, *(void *)(v0 + 8));
      _StringGuts.grow(_:)(26);
      v5._countAndFlagsBits = 60;
      v5._object = (void *)0xE100000000000000;
      String.append(_:)(v5);
      sub_18AF76714();
      sub_18AF38200();
      v7._countAndFlagsBits = v6 - 5;
      v7._object = (void *)0x800000018B1D2160;
      String.append(_:)(v7);
      _print_unlocked<A, B>(_:_:)();
      sub_18AF38960();
      uint64_t v8 = (void *)sub_18AF3063C();
      sub_18AF17DC8(v8, v9, v10, v11, v12, v13, v14, v4, v40);
      break;
  }
  sub_18AF18284();
}

uint64_t sub_18AF18258()
{
  return 0;
}

uint64_t sub_18AF1826C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18AF43708(a1, 1, 1, a4);
}

void sub_18AF182A0()
{
  CKFeatureSet.insert<A>(_:)();
}

uint64_t sub_18AF182D8()
{
  return swift_slowAlloc();
}

unint64_t CKSyncEngine.SendChangesContext.description.getter()
{
  int v1 = *v0;
  uint64_t v2 = (void *)*((void *)v0 + 3);
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v3 = 0x6C61756E616DLL;
  }
  else {
    uint64_t v3 = 0x656C756465686373;
  }
  if (v1) {
    unint64_t v4 = 0xE600000000000000;
  }
  else {
    unint64_t v4 = 0xE900000000000064;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  sub_18AF382BC();
  swift_bridgeObjectRetain();
  id v6 = v2;
  v7._countAndFlagsBits = CKSyncEngine.SendChangesOptions.description.getter();
  String.append(_:)(v7);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_18AF38960();
  return 0xD00000000000001BLL;
}

uint64_t CKSyncEngine.SendChangesOptions.description.getter()
{
  v1._countAndFlagsBits = sub_18AF35BFC(*(void **)(v0 + 16));
  if (v1._object)
  {
    sub_18AF30708(v1);
    swift_bridgeObjectRelease();
    uint64_t v3 = v7;
    uint64_t v2 = v8;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v2 = (void *)0xE000000000000000;
  }
  sub_18AF341A0();
  swift_bridgeObjectRetain();
  CKSyncEngine.SendChangesOptions.Scope.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = v3;
  v5._object = v2;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  sub_18AF38960();
  return v7;
}

uint64_t sub_18AF184DC()
{
  return v0;
}

uint64_t sub_18AF18508(uint64_t a1)
{
  return MEMORY[0x1F4188298](a1, 0, 0);
}

uint64_t sub_18AF18514()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18AF18528()
{
  return swift_beginAccess();
}

uint64_t sub_18AF18540()
{
  return v0;
}

uint64_t sub_18AF18598()
{
  return swift_retain();
}

uint64_t sub_18AF185C8()
{
  return v0 + 56;
}

uint64_t sub_18AF185F8()
{
  return 0x6D614E72656E776FLL;
}

uint64_t sub_18AF18638(uint64_t a1, uint64_t a2)
{
  sub_18AF412A0(a1, a2);
  return Logger.logObject.getter();
}

uint64_t sub_18AF18660(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4188298](a1, a2, 0);
}

uint64_t sub_18AF18668()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t sub_18AF1868C()
{
  return v0;
}

uint64_t sub_18AF186C8(uint64_t a1)
{
  *(void *)(v1 - 120) = a1;
  return v1 - 120;
}

unint64_t CKSyncEngine.FetchChangesContext.description.getter()
{
  int v1 = *v0;
  uint64_t v2 = (void *)*((void *)v0 + 3);
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v3 = 0x6C61756E616DLL;
  }
  else {
    uint64_t v3 = 0x656C756465686373;
  }
  if (v1) {
    unint64_t v4 = 0xE600000000000000;
  }
  else {
    unint64_t v4 = 0xE900000000000064;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  sub_18AF382BC();
  swift_bridgeObjectRetain();
  id v6 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = CKSyncEngine.FetchChangesOptions.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_18AF38960();
  return 0xD00000000000001CLL;
}

uint64_t CKSyncEngine.FetchChangesOptions.description.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 56);
  v2._countAndFlagsBits = sub_18AF35BFC(*(void **)(v0 + 16));
  if (v2._object)
  {
    sub_18AF30708(v2);
    swift_bridgeObjectRelease();
    uint64_t v4 = v13;
    uint64_t v3 = v14;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = (void *)0xE000000000000000;
  }
  BOOL v5 = v1 == 0;
  if (v1) {
    id v6 = (void *)0xE800000000000000;
  }
  else {
    id v6 = (void *)0xE000000000000000;
  }
  if (v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 0x313D6563726F6620;
  }
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  sub_18AF341A0();
  swift_bridgeObjectRetain();
  CKSyncEngine.FetchChangesOptions.Scope.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = v7;
  v9._object = v6;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = v4;
  v10._object = v3;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 15913;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  return 0;
}

void CKSyncEngine.FetchChangesOptions.Scope.description.getter()
{
  if (!*(unsigned char *)(v0 + 8))
  {
    sub_18AF35548();
    swift_bridgeObjectRelease();
    sub_18AF16ED8();
    if (v11)
    {
      sub_18AF39168();
      _CocoaArrayWrapper.endIndex.getter();
      sub_18AF22CF0();
    }
    else
    {
      uint64_t v1 = *(void *)(v10 + 16);
    }
    uint64_t v12 = MEMORY[0x1E4FBC860];
    if (v1)
    {
      sub_18AF38A34();
      if (v1 < 0)
      {
LABEL_36:
        __break(1u);
        return;
      }
      sub_18AF193E0();
      do
      {
        if (v2) {
          sub_18AF343DC();
        }
        else {
          id v13 = sub_18AF33E60();
        }
        id v14 = objc_msgSend(v13, sel_ckShortDescription);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        sub_18AF42D9C();

        sub_18AF38F78();
        if (v8)
        {
          sub_18AF394BC();
          uint64_t v12 = v34;
        }
        sub_18AF392EC();
      }
      while (!v9);
    }
    sub_18AF161EC((uint64_t *)&unk_1E9125540);
    sub_18AF36488();
    sub_18AF18668();
    int v25 = sub_18AF33ACC();
    sub_18AF340E8(v25, v26, v27, v28, v29, v30, v31, v32, v33, v12, v35);
    swift_bridgeObjectRelease();
    uint64_t v23 = 41;
    unint64_t v24 = 0xE100000000000000;
    goto LABEL_32;
  }
  if (*(unsigned char *)(v0 + 8) == 1)
  {
    sub_18AF16C78();
    if (v4)
    {
      sub_18AF39168();
      _CocoaArrayWrapper.endIndex.getter();
      sub_18AF22CF0();
    }
    else
    {
      uint64_t v1 = *(void *)(v3 + 16);
    }
    uint64_t v5 = MEMORY[0x1E4FBC860];
    if (!v1)
    {
LABEL_30:
      sub_18AF161EC((uint64_t *)&unk_1E9125540);
      sub_18AF36488();
      sub_18AF18668();
      int v15 = sub_18AF33ACC();
      sub_18AF340E8(v15, v16, v17, v18, v19, v20, v21, v22, v33, v5, v35);
      swift_bridgeObjectRelease();
      uint64_t v23 = 10537;
      unint64_t v24 = 0xE200000000000000;
LABEL_32:
      String.append(_:)(*(Swift::String *)&v23);
      return;
    }
    sub_18AF38A34();
    if ((v1 & 0x8000000000000000) == 0)
    {
      sub_18AF193E0();
      do
      {
        if (v2) {
          sub_18AF343DC();
        }
        else {
          id v6 = sub_18AF33E60();
        }
        id v7 = objc_msgSend(v6, sel_ckShortDescription);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        sub_18AF42D9C();

        sub_18AF38F78();
        if (v8)
        {
          sub_18AF394BC();
          uint64_t v5 = v34;
        }
        sub_18AF392EC();
      }
      while (!v9);
      goto LABEL_30;
    }
    __break(1u);
    goto LABEL_36;
  }
}

uint64_t CKIsRunningInSyncBubble()
{
  if (qword_1EB27A078 != -1) {
    dispatch_once(&qword_1EB27A078, &unk_1ED7EC2C8);
  }
  return byte_1EB279FA9;
}

id CKEarliestStartDateAfterError(void *a1)
{
  if (CKRetryAfterSecondsForError(a1) <= 0.0)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = objc_msgSend_dateWithTimeIntervalSinceNow_(MEMORY[0x1E4F1C9C8], v1, v2, v3);
  }

  return v4;
}

double CKRetryAfterSecondsForError(void *a1)
{
  id v1 = a1;
  uint64_t v30 = 0;
  int v31 = &v30;
  uint64_t v32 = 0x3032000000;
  uint64_t v33 = sub_18AF142EC;
  uint64_t v34 = sub_18AF13A04;
  id v35 = 0;
  uint64_t v5 = objc_msgSend_domain(v1, v2, v3, v4);
  int isEqualToString = objc_msgSend_isEqualToString_(v5, v6, @"CKErrorDomain", v7);

  if (isEqualToString)
  {
    if (objc_msgSend_code(v1, v9, v10, v11) == 2)
    {
      int v15 = objc_msgSend_userInfo(v1, v12, v13, v14);
      int v18 = objc_msgSend_objectForKeyedSubscript_(v15, v16, @"CKPartialErrors", v17);

      v29[0] = MEMORY[0x1E4F143A8];
      v29[1] = 3221225472;
      v29[2] = sub_18B192B2C;
      v29[3] = &unk_1E5465F88;
      v29[4] = &v30;
      objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v18, v19, (uint64_t)v29, v20);
    }
    else
    {
      int v18 = objc_msgSend_userInfo(v1, v12, v13, v14);
      uint64_t v23 = objc_msgSend_objectForKeyedSubscript_(v18, v21, @"CKRetryAfter", v22);
      unint64_t v24 = (void *)v31[5];
      v31[5] = v23;
    }
  }
  int v25 = (void *)v31[5];
  if (v25)
  {
    objc_msgSend_doubleValue(v25, v9, v10, v11);
    double v27 = v26;
  }
  else
  {
    double v27 = 0.0;
  }
  _Block_object_dispose(&v30, 8);

  return v27;
}

void sub_18AF18DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CKSyncEngineFetchChangesScope.scopeEnum()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_18AF34E08(v1, (SEL *)&selRef_zoneIDs, (unint64_t *)&qword_1EB279460, (uint64_t)off_1E545EEE0, (unint64_t *)&qword_1EB279468);
  if (v3)
  {
    sub_18AF19D54(v3);
    uint64_t result = sub_18AF40F74();
    char v5 = 1;
  }
  else
  {
    id v6 = sub_18AF47644();
    sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
    sub_18AF34EDC((unint64_t *)&qword_1EB279468, (unint64_t *)&qword_1EB279460);
    uint64_t v7 = sub_18AF410CC();

    LOBYTE(v6) = sub_18AFC281C(v7);
    uint64_t result = swift_bridgeObjectRelease();
    if (v6)
    {
      id v1 = 0;
      char v5 = 2;
    }
    else
    {
      id v1 = sub_18AF47644();
      uint64_t v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      sub_18AF19D54(v8);
      uint64_t result = sub_18AF40F74();
      char v5 = 0;
    }
  }
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = v5;
  return result;
}

void sub_18AF18F1C()
{
  ++*(void *)(v0 + 16);
}

id sub_18AF18F2C(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v3, v2);
}

id CKProcessIndexedArrayKey(void *a1, void *a2, uint64_t *a3, void *a4)
{
  id v7 = a1;
  if (!objc_msgSend_length(v7, v8, v9, v10)
    || (uint64_t v14 = objc_msgSend_length(v7, v11, v12, v13),
        objc_msgSend_characterAtIndex_(v7, v15, v14 - 1, v16) != 93))
  {
    id v81 = 0;
    goto LABEL_20;
  }
  if (qword_1EB279C00 != -1) {
    dispatch_once(&qword_1EB279C00, &unk_1ED7EF178);
  }
  uint64_t v20 = (void *)qword_1EB279BF8;
  if (!qword_1EB279BF8)
  {
    id v81 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v17, @"CKErrorDomain", 12, @"Couldn't initialize indexed list key regular expression");
    goto LABEL_20;
  }
  uint64_t v21 = objc_msgSend_length(v7, v17, v18, v19);
  uint64_t v23 = objc_msgSend_matchesInString_options_range_(v20, v22, (uint64_t)v7, 0, 0, v21);
  double v27 = objc_msgSend_firstObject(v23, v24, v25, v26);
  uint64_t v31 = objc_msgSend_numberOfRanges(v27, v28, v29, v30);

  if (v31)
  {
    id v35 = objc_msgSend_firstObject(v23, v32, v33, v34);
    uint64_t v38 = objc_msgSend_rangeAtIndex_(v35, v36, 3, v37);
    unsigned __int8 v40 = objc_msgSend_substringWithRange_(v7, v39, v38, (uint64_t)v39);

    if (objc_msgSend_isEqualToString_(v40, v41, @"..<", v42))
    {

      id v47 = objc_msgSend_firstObject(v23, v44, v45, v46);
      uint64_t v50 = objc_msgSend_rangeAtIndex_(v47, v48, 1, v49);
      unsigned __int8 v40 = objc_msgSend_substringWithRange_(v7, v51, v50, (uint64_t)v51);

      uint64_t v52 = CKValidateKeyName(v40);
      if (!v52)
      {
        unsigned __int8 v56 = objc_msgSend_firstObject(v23, v53, v54, v55);
        uint64_t v59 = objc_msgSend_rangeAtIndex_(v56, v57, 2, v58);
        unint64_t v61 = objc_msgSend_substringWithRange_(v7, v60, v59, (uint64_t)v60);

        id v65 = objc_msgSend_firstObject(v23, v62, v63, v64);
        uint64_t v68 = objc_msgSend_rangeAtIndex_(v65, v66, 4, v67);
        uint64_t v70 = objc_msgSend_substringWithRange_(v7, v69, v68, (uint64_t)v69);

        uint64_t v74 = objc_msgSend_integerValue(v61, v71, v72, v73);
        uint64_t v78 = objc_msgSend_integerValue(v70, v75, v76, v77);
        if (v74 > v78 || (uint64_t v80 = v78, v74 < 0) && v78 >= 1)
        {
          id v81 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v79, @"CKErrorDomain", 12, @"indexed list key (%@) contains invalid bounds", v7);
        }
        else
        {

          if (v80 > -1 && v74 < 0) {
            uint64_t v84 = ~v74;
          }
          else {
            uint64_t v84 = -v74;
          }
          if (a2) {
            *a2 = v40;
          }
          if (a3) {
            *a3 = v74;
          }
          id v81 = 0;
          if (a4) {
            *a4 = v84 + v80;
          }
        }
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v52 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, v43, @"CKErrorDomain", 12, @"indexed list key (%@) contains an invalid operator (%@)", v7, v40);
    }
    id v81 = (void *)v52;
LABEL_18:

    goto LABEL_19;
  }
  id v81 = 0;
LABEL_19:

LABEL_20:

  return v81;
}

uint64_t sub_18AF19284(uint64_t a1)
{
  return a1 - 8;
}

void sub_18AF192A0()
{
  *(void *)(v0 + 16) = *(void *)(v1 + 16);
}

uint64_t sub_18AF192DC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AF1930C()
{
  return v0;
}

uint64_t sub_18AF19324(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t sub_18AF1934C()
{
  return v0;
}

uint64_t sub_18AF19364(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

id sub_18AF19388(uint64_t a1)
{
  *(void *)(v2 + 56) = a1;
  return objc_msgSend(v1, sel_container);
}

uint64_t sub_18AF193C8()
{
  return swift_bridgeObjectRelease();
}

uint64_t CKErrorCodeForUnderlyingErrorCode(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 1;
  if (a1 > 2999)
  {
    if (a1 > 5999)
    {
      if (a1 > 8999)
      {
        switch(a1)
        {
          case 10000:
          case 10001:
          case 10002:
            return result;
          case 10003:
LABEL_31:
            uint64_t result = 20;
            break;
          case 10004:
LABEL_16:
            uint64_t result = 16;
            break;
          case 10005:
LABEL_17:
            uint64_t result = 12;
            break;
          case 10006:
LABEL_24:
            uint64_t result = 36;
            break;
          default:
            if ((unint64_t)(a1 - 9000) >= 2)
            {
LABEL_33:
              id v6 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], a2, a3, a4);
              uint64_t v9 = objc_msgSend_stringWithUTF8String_(NSString, v7, (uint64_t)"CKErrorCode CKErrorCodeForUnderlyingErrorCode(CKUnderlyingErrorCode)", v8);
              objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v6, v10, (uint64_t)v9, @"CKError.m", 1215, @"No mapping exists for internal error code %ld", a1);

              uint64_t result = 1;
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 8000:
          case 8002:
          case 8006:
          case 8010:
            goto LABEL_21;
          case 8001:
          case 8003:
            goto LABEL_17;
          case 8004:
            return 11;
          case 8005:
          case 8007:
          case 8008:
          case 8009:
          case 8012:
            return result;
          case 8011:
            return 9;
          case 8013:
          case 8014:
            return 33;
          default:
            if ((unint64_t)(a1 - 7000) < 5) {
              return result;
            }
            if (a1 != 6000) {
              goto LABEL_33;
            }
LABEL_21:
            uint64_t result = 15;
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 5000:
        case 5001:
        case 5002:
        case 5003:
        case 5004:
        case 5005:
        case 5007:
        case 5010:
        case 5016:
        case 5017:
        case 5018:
        case 5019:
        case 5020:
        case 5023:
          return result;
        case 5006:
          uint64_t result = 110;
          break;
        case 5008:
        case 5009:
          uint64_t result = 111;
          break;
        case 5011:
          uint64_t result = 112;
          break;
        case 5012:
LABEL_22:
          uint64_t result = 7;
          break;
        case 5013:
          uint64_t result = 114;
          break;
        case 5014:
          goto LABEL_24;
        case 5015:
          goto LABEL_17;
        case 5021:
          uint64_t result = 160;
          break;
        case 5022:
          uint64_t result = 161;
          break;
        default:
          switch(a1)
          {
            case 3000:
            case 3001:
            case 3004:
            case 3007:
            case 3008:
            case 3015:
              return result;
            case 3002:
            case 3009:
              goto LABEL_16;
            case 3003:
              uint64_t result = 17;
              break;
            case 3005:
            case 3014:
              goto LABEL_17;
            case 3006:
LABEL_38:
              uint64_t result = 4;
              break;
            case 3010:
              uint64_t result = 35;
              break;
            case 3011:
            case 3012:
              return 11;
            case 3013:
              uint64_t result = 140;
              break;
            default:
              if ((unint64_t)(a1 - 4000) >= 3) {
                goto LABEL_33;
              }
              break;
          }
          break;
      }
    }
  }
  else
  {
    if (a1 <= 1999)
    {
      switch(a1)
      {
        case 1000:
        case 1001:
        case 1003:
        case 1005:
        case 1015:
        case 1023:
        case 1024:
        case 1027:
        case 1050:
        case 1051:
          return result;
        case 1002:
        case 1018:
        case 1029:
          return 9;
        case 1004:
          return 115;
        case 1006:
        case 1007:
        case 1009:
        case 1017:
        case 1021:
          goto LABEL_17;
        case 1008:
          return 6;
        case 1010:
        case 1028:
          goto LABEL_24;
        case 1011:
          return 2;
        case 1012:
          return 3;
        case 1013:
          goto LABEL_38;
        case 1014:
          return 5;
        case 1016:
          return 21;
        case 1019:
          return 24;
        case 1020:
          return 27;
        case 1022:
          return 14;
        case 1025:
          return 130;
        case 1026:
          return 131;
        case 1030:
        case 1031:
        case 1032:
        case 1033:
        case 1034:
        case 1035:
        case 1036:
        case 1037:
        case 1038:
        case 1039:
        case 1040:
        case 1041:
        case 1042:
        case 1043:
        case 1044:
        case 1045:
        case 1046:
        case 1047:
        case 1048:
        case 1049:
          goto LABEL_33;
        default:
          if (!a1) {
            return result;
          }
          if (a1 == 1) {
            goto LABEL_31;
          }
          goto LABEL_33;
      }
    }
    switch(a1)
    {
      case 2000:
      case 2001:
      case 2010:
      case 2021:
      case 2027:
      case 2028:
      case 2032:
      case 2033:
      case 2034:
      case 2039:
      case 2041:
      case 2043:
      case 2044:
        goto LABEL_21;
      case 2002:
      case 2009:
      case 2022:
      case 2030:
      case 2031:
        return 6;
      case 2003:
        return 11;
      case 2004:
      case 2017:
      case 2037:
        return 14;
      case 2005:
      case 2013:
      case 2014:
      case 2053:
      case 2054:
        return result;
      case 2006:
      case 2015:
      case 2016:
      case 2018:
      case 2019:
      case 2020:
      case 2049:
        goto LABEL_17;
      case 2007:
      case 2051:
      case 2057:
        uint64_t result = 10;
        break;
      case 2008:
      case 2061:
      case 2062:
      case 2063:
        goto LABEL_22;
      case 2011:
      case 2012:
      case 2047:
      case 2060:
        return 9;
      case 2023:
      case 2052:
        return 27;
      case 2024:
      case 2055:
        uint64_t result = 22;
        break;
      case 2025:
        uint64_t result = 31;
        break;
      case 2026:
        return 21;
      case 2029:
        uint64_t result = 23;
        break;
      case 2035:
      case 2038:
        uint64_t result = 25;
        break;
      case 2036:
      case 2056:
        uint64_t result = 26;
        break;
      case 2040:
        uint64_t result = 34;
        break;
      case 2042:
        uint64_t result = 28;
        break;
      case 2045:
        uint64_t result = 29;
        break;
      case 2046:
        uint64_t result = 30;
        break;
      case 2048:
        uint64_t result = 32;
        break;
      case 2050:
        uint64_t result = 100;
        break;
      default:
        goto LABEL_33;
    }
  }
  return result;
}

void __swiftcall CKSyncEngine.FetchChangesOptions.optionsObject()(CKSyncEngineFetchChangesOptions *__return_ptr retstr)
{
  unint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 16);
  unsigned int v51 = *(unsigned __int8 *)(v1 + 40);
  uint64_t v52 = *(void *)(v1 + 48);
  uint64_t v53 = *(void *)(v1 + 32);
  uint64_t v4 = *(unsigned __int8 *)(v1 + 56);
  if (*(unsigned char *)(v1 + 8))
  {
    if (*(unsigned char *)(v1 + 8) != 1)
    {
      id v8 = objc_msgSend(objc_allocWithZone((Class)CKSyncEngineFetchChangesScope), sel_init);
      goto LABEL_7;
    }
    swift_bridgeObjectRetain_n();
    uint64_t v5 = sub_18AF349A8(v2, (unint64_t *)&qword_1EB279460, (uint64_t)off_1E545EEE0, (unint64_t *)&qword_1EB279468, (void (*)(id *, id))sub_18AF34F50);
    id v6 = objc_allocWithZone((Class)CKSyncEngineFetchChangesScope);
    id v7 = sub_18AF34900(v5, (unint64_t *)&qword_1EB279460, (uint64_t)off_1E545EEE0, (unint64_t *)&qword_1EB279468, (SEL *)&selRef_initWithZoneIDs_);
  }
  else
  {
    sub_18AF34EA0(0, &qword_1E9126C90);
    swift_bridgeObjectRetain_n();
    sub_18AF349A8(v2, (unint64_t *)&qword_1EB279460, (uint64_t)off_1E545EEE0, (unint64_t *)&qword_1EB279468, (void (*)(id *, id))sub_18AF34F50);
    id v7 = sub_18AFC2370();
  }
  id v8 = v7;
  swift_bridgeObjectRelease();
LABEL_7:
  id v9 = objc_msgSend(objc_allocWithZone((Class)CKSyncEngineFetchChangesOptions), sel_initWithScope_, v8);

  objc_msgSend(v9, sel_setOperationGroup_, v3);
  objc_msgSend(v9, sel_setForceFetchChanges_, v4);
  sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v50 = v9;
  objc_msgSend(v9, sel_setPrioritizedZoneIDs_, isa);

  sub_18AF34EA0(0, &qword_1E9125060);
  sub_18AF34EDC((unint64_t *)&qword_1EB279468, (unint64_t *)&qword_1EB279460);
  swift_bridgeObjectRetain();
  uint64_t v11 = Dictionary.init(dictionaryLiteral:)();
  sub_18AF1A2F4(v53, v56);
  uint64_t v12 = v56[0];
  int64_t v13 = v56[3];
  unint64_t v14 = v56[4];
  uint64_t v54 = v56[1];
  int64_t v55 = (unint64_t)(v56[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  if (!v14) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  unint64_t v16 = v15 | (v13 << 6);
  while (1)
  {
    unint64_t v24 = *(void **)(*(void *)(v12 + 48) + 8 * v16);
    uint64_t v25 = (unsigned __int8 *)(*(void *)(v12 + 56) + 16 * v16);
    uint64_t v26 = *v25;
    uint64_t v27 = *((void *)v25 + 1);
    id v28 = objc_allocWithZone((Class)CKSyncEngineFetchChangesZoneConfiguration);
    id v29 = v24;
    id v30 = objc_msgSend(v28, sel_init);
    objc_msgSend(v30, sel_setShouldFetchAssetContents_, v26);
    objc_msgSend(v30, sel_setResultsLimit_, v27);
    if ((v11 & 0xC000000000000001) != 0)
    {
      if (v11 >= 0) {
        v11 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      uint64_t v31 = __CocoaSet.count.getter();
      if (__OFADD__(v31, 1)) {
        goto LABEL_48;
      }
      sub_18AFC2D20(v11, v31 + 1, &qword_1E9126CB8, &qword_1E9125060);
      uint64_t v11 = v32;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_18AF7D0BC();
    uint64_t v36 = *(void *)(v11 + 16);
    BOOL v37 = (v35 & 1) == 0;
    Swift::Int v38 = v36 + v37;
    if (__OFADD__(v36, v37)) {
      break;
    }
    unint64_t v39 = v34;
    char v40 = v35;
    sub_18AF161EC(&qword_1E9126C98);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v38))
    {
      sub_18AF7D0BC();
      if ((v40 & 1) != (v42 & 1)) {
        goto LABEL_51;
      }
      unint64_t v39 = v41;
    }
    if (v40)
    {
      uint64_t v43 = *(void *)(v11 + 56);
      uint64_t v44 = *(void **)(v43 + 8 * v39);
      *(void *)(v43 + 8 * v39) = v30;
    }
    else
    {
      *(void *)(v11 + 8 * (v39 >> 6) + 64) |= 1 << v39;
      *(void *)(*(void *)(v11 + 48) + 8 * v39) = v29;
      *(void *)(*(void *)(v11 + 56) + 8 * v39) = v30;
      uint64_t v45 = *(void *)(v11 + 16);
      BOOL v21 = __OFADD__(v45, 1);
      uint64_t v46 = v45 + 1;
      if (v21) {
        goto LABEL_49;
      }
      *(void *)(v11 + 16) = v46;
      id v47 = v29;
    }

    swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_50;
    }
    if (v17 >= v55) {
      goto LABEL_46;
    }
    unint64_t v18 = *(void *)(v54 + 8 * v17);
    int64_t v19 = v13 + 1;
    if (!v18)
    {
      sub_18AF299E8();
      if (v20 == v21) {
        goto LABEL_46;
      }
      sub_18AF307F0();
      if (!v18)
      {
        sub_18AF299E8();
        if (v20 == v21) {
          goto LABEL_46;
        }
        sub_18AF307F0();
        if (!v18)
        {
          sub_18AF299E8();
          if (v20 == v21) {
            goto LABEL_46;
          }
          sub_18AF307F0();
          if (!v18)
          {
            sub_18AF299E8();
            if (v20 == v21) {
              goto LABEL_46;
            }
            sub_18AF307F0();
            if (!v18)
            {
              int64_t v19 = v22 + 5;
              if (v22 + 5 >= v55) {
                goto LABEL_46;
              }
              unint64_t v18 = *(void *)(v54 + 8 * v19);
              if (!v18)
              {
                int64_t v23 = v13 + 7;
                while (v23 < v55)
                {
                  unint64_t v18 = *(void *)(v54 + 8 * v23++);
                  if (v18)
                  {
                    int64_t v19 = v23 - 1;
                    goto LABEL_30;
                  }
                }
LABEL_46:
                swift_release();
                swift_bridgeObjectRelease();
                Class v48 = Dictionary._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease();
                objc_msgSend(v50, sel_setZoneConfigurations_, v48);

                id v49 = objc_msgSend(objc_allocWithZone((Class)CKSyncEngineFetchChangesZoneConfiguration), sel_init);
                objc_msgSend(v49, sel_setShouldFetchAssetContents_, v51);
                objc_msgSend(v49, sel_setResultsLimit_, v52);
                objc_msgSend(v50, sel_setDefaultZoneConfiguration_, v49);

                return;
              }
            }
          }
        }
      }
    }
LABEL_30:
    unint64_t v14 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v19 << 6);
    int64_t v13 = v19;
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t sub_18AF19D54(uint64_t a1)
{
  return sub_18AF33EEC(a1, (uint64_t (*)(uint64_t *, char *, uint64_t, uint64_t))sub_18AF341D8);
}

__CFString *CKTestNotificationPrefix()
{
  if (__sTestOverridesAvailable) {
    return @"com.apple.cloudkit.testing.";
  }
  else {
    return &stru_1ED7F5C98;
  }
}

uint64_t sub_18AF19D90@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = *a1;
  if (result)
  {
    *a2 = result;
    return swift_retain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

__CFString *CKStringForQOS(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (a1 <= 16)
  {
    if (a1 == -1)
    {
      uint64_t v5 = @"Default";
    }
    else
    {
      if (a1 != 9)
      {
LABEL_22:
        objc_msgSend_stringWithFormat_(NSString, a2, @"Unknown (%ld)", a4, a1);
        uint64_t v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
        return v5;
      }
      uint64_t v5 = @"Background";
    }
  }
  else
  {
    switch(a1)
    {
      case 17:
        uint64_t v5 = @"Utility";
        break;
      case 33:
        uint64_t v5 = @"UserInteractive";
        break;
      case 25:
        uint64_t v5 = @"UserInitiated";
        return v5;
      default:
        goto LABEL_22;
    }
  }
  return v5;
}

uint64_t sub_18AF19EAC()
{
  return swift_allocObject();
}

uint64_t sub_18AF19EE0()
{
  return swift_beginAccess();
}

void sub_18AF19F04()
{
}

uint64_t sub_18AF19F1C()
{
  return v0 + 8;
}

uint64_t sub_18AF19F2C()
{
  return v0;
}

uint64_t sub_18AF19F48()
{
  return swift_arrayDestroy();
}

id CKBuildVersion()
{
  return sub_18AF1C2A0(@"BuildVersion");
}

uint64_t sub_18AF19F70()
{
  return String.init<A>(_:)();
}

uint64_t sub_18AF19FB8()
{
  return swift_allocObject();
}

uint64_t sub_18AF19FE4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18AF19FFC()
{
  return v0;
}

uint64_t sub_18AF1A030(uint64_t result)
{
  *(void *)(v1 + 64) = result;
  return result;
}

uint64_t sub_18AF1A054()
{
  return v0;
}

id _s8CloudKit12CKSyncEngineC19FetchChangesOptionsV14operationGroupSo011CKOperationI0Cvg_0()
{
  return *(id *)(v0 + 16);
}

uint64_t CKSDKVersion()
{
  if (qword_1EB27A0B8 != -1) {
    dispatch_once(&qword_1EB27A0B8, &unk_1ED7EC3E8);
  }
  return dword_1EB279FB4;
}

void sub_18AF1A144(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

__CFString *CKDatabaseScopeString(unint64_t a1)
{
  if (a1 > 4) {
    return @"INVALID_SCOPE";
  }
  else {
    return off_1E5464CB0[a1];
  }
}

void ck_call_or_dispatch_async_if_not_key(void *a1, const void *a2, void *a3)
{
  uint64_t v5 = a1;
  id v6 = a3;
  if (v5)
  {
    if (dispatch_get_specific(a2)) {
      v6[2](v6);
    }
    else {
      dispatch_async(v5, v6);
    }
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v7 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v8 = 0;
      _os_log_error_impl(&dword_18AF10000, v7, OS_LOG_TYPE_ERROR, "Attempted to call ck_call_or_dispatch_async_if_not_key with a nil queue", v8, 2u);
    }
  }
}

uint64_t sub_18AF1A2F4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1 << -(char)v3);
  }
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

BOOL CKOperationExecutionStateTransitionToFinished(void *a1, int *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  objc_msgSend_willChangeValueForKey_(v3, v4, @"isExecuting", v5);
  objc_msgSend_willChangeValueForKey_(v3, v6, @"isFinished", v7);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB27A118);
  int v8 = *a2;
  if (*a2 == 2)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB27A118);
    objc_msgSend_didChangeValueForKey_(v3, v14, @"isExecuting", v15);
    objc_msgSend_didChangeValueForKey_(v3, v16, @"isFinished", v17);
  }
  else
  {
    *a2 = 2;
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB27A118);
    objc_msgSend_didChangeValueForKey_(v3, v9, @"isExecuting", v10);
    objc_msgSend_didChangeValueForKey_(v3, v11, @"isFinished", v12);
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    int64_t v13 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      int v19 = 138543362;
      id v20 = v3;
      _os_log_debug_impl(&dword_18AF10000, v13, OS_LOG_TYPE_DEBUG, "Operation was marked as finished: %{public}@", (uint8_t *)&v19, 0xCu);
    }
  }

  return v8 != 2;
}

BOOL CKOperationExecutionStateTransitionToExecuting(void *a1, int *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  objc_msgSend_willChangeValueForKey_(v3, v4, @"isExecuting", v5);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB27A118);
  int v6 = *a2;
  if (*a2)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB27A118);
    objc_msgSend_didChangeValueForKey_(v3, v7, @"isExecuting", v8);
  }
  else
  {
    *a2 = 1;
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB27A118);
    objc_msgSend_didChangeValueForKey_(v3, v9, @"isExecuting", v10);
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v11 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      int v13 = 138543362;
      id v14 = v3;
      _os_log_debug_impl(&dword_18AF10000, v11, OS_LOG_TYPE_DEBUG, "Operation was marked as executing: %{public}@", (uint8_t *)&v13, 0xCu);
    }
  }

  return v6 == 0;
}

void CKValidateRecordArrayValue(void *a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (objc_msgSend_count(v1, v2, v3, v4))
  {
    uint64_t v7 = objc_msgSend_objectAtIndexedSubscript_(v1, v5, 0, v6);
    objc_getProtocol("CKRecordValue");
    uint64_t v8 = (Protocol *)objc_claimAutoreleasedReturnValue();
    for (uint64_t i = (objc_class *)objc_opt_class(); ; uint64_t i = class_getSuperclass(i))
    {
      if (i == (objc_class *)objc_opt_class()) {
        goto LABEL_22;
      }
      if (class_conformsToProtocol(i, v8)) {
        break;
      }
    }
    if (i)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v27 = [CKException alloc];
        id v29 = objc_msgSend_initWithCode_format_(v27, v28, 1006, @"CKEncryptedData is not allowed as CKRecord value: %@. Use -[CKRecord encryptedValues] for storing encrypted values on records", v1);
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            long long v37 = 0u;
            long long v38 = 0u;
            long long v35 = 0u;
            long long v36 = 0u;
            id v10 = v1;
            uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v35, (uint64_t)v39, 16);
            if (!v12) {
              goto LABEL_18;
            }
            uint64_t v13 = v12;
            uint64_t v14 = *(void *)v36;
            while (1)
            {
              uint64_t v15 = 0;
              do
              {
                if (*(void *)v36 != v14) {
                  objc_enumerationMutation(v10);
                }
                if ((objc_opt_isKindOfClass() & 1) == 0)
                {
                  uint64_t v17 = [CKException alloc];
                  unint64_t v18 = (objc_class *)objc_opt_class();
                  int v19 = NSStringFromClass(v18);
                  id v20 = NSStringFromClass(i);
                  id v22 = (id)objc_msgSend_initWithCode_format_(v17, v21, 1006, @"Array members can't be mixed class: %@ (%@ != %@)", v10, v19, v20);

                  goto LABEL_21;
                }
                ++v15;
              }
              while (v13 != v15);
              uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v16, (uint64_t)&v35, (uint64_t)v39, 16);
              if (!v13)
              {
LABEL_18:

                goto LABEL_19;
              }
            }
          }
          uint64_t v32 = [CKException alloc];
          uint64_t v33 = (objc_class *)objc_opt_class();
          int v19 = NSStringFromClass(v33);
          uint64_t v26 = objc_msgSend_initWithCode_format_(v32, v34, 1006, @"%@ is not allowed in an array", v19);
LABEL_23:
          id v22 = v26;
LABEL_21:

          objc_exception_throw(v22);
        }
        id v30 = [CKException alloc];
        id v29 = objc_msgSend_initWithCode_format_(v30, v31, 1006, @"Nested arrays are not allowed as CKRecord value: %@", v1);
      }
      objc_exception_throw(v29);
    }
LABEL_22:
    int64_t v23 = [CKException alloc];
    unint64_t v24 = (objc_class *)objc_opt_class();
    int v19 = NSStringFromClass(v24);
    uint64_t v26 = objc_msgSend_initWithCode_format_(v23, v25, 1006, @"Array members must conform to CKRecordValue: %@ (%@)", v1, v19);
    goto LABEL_23;
  }
LABEL_19:
}

id CKErrorUserInfoClasses()
{
  if (qword_1EB27A020 != -1) {
    dispatch_once(&qword_1EB27A020, &unk_1ED7EC148);
  }
  uint64_t v0 = (void *)qword_1EB27A018;

  return v0;
}

id CKProductVersion()
{
  return sub_18AF1C2A0(@"ProductVersion");
}

uint64_t CKMainBundleIsAppleExecutable()
{
  if (qword_1EB27A0C0 != -1) {
    dispatch_once(&qword_1EB27A0C0, &unk_1ED7EC408);
  }
  return byte_1EB279FB1;
}

const mach_header *CKHeaderForLibraryName(void *a1)
{
  id v1 = a1;
  uint32_t v2 = _dyld_image_count();
  if (v2)
  {
    uint32_t v3 = v2;
    for (uint32_t i = 0; i != v3; ++i)
    {
      image_header = _dyld_get_image_header(i);
      if (image_header)
      {
        uint64_t v6 = image_header;
        if (image_header->filetype == 6)
        {
          uint32_t ncmds = image_header->ncmds;
          if (ncmds)
          {
            uint32_t v8 = 0;
            p_cputype = &image_header[1].cputype;
            do
            {
              if (*p_cputype == 13)
              {
                id v10 = (char *)p_cputype + p_cputype[2];
                uint64_t v11 = strrchr(v10, 47);
                if (v11) {
                  id v10 = v11 + 1;
                }
                id v12 = v1;
                unint64_t v16 = (const char *)objc_msgSend_UTF8String(v12, v13, v14, v15);
                if (!strcmp(v10, v16)) {
                  goto LABEL_15;
                }
                uint32_t ncmds = v6->ncmds;
              }
              p_cputype = (int32_t *)((char *)p_cputype + p_cputype[1]);
              ++v8;
            }
            while (v8 < ncmds);
          }
        }
      }
    }
  }
  uint64_t v6 = 0;
LABEL_15:

  return v6;
}

uint64_t CKCurrentProcessIsDaemon()
{
  if (qword_1EB279FE0 != -1) {
    dispatch_once(&qword_1EB279FE0, &unk_1ED7F0178);
  }
  return byte_1EB279FA8;
}

id CKProductName()
{
  return sub_18AF1C2A0(@"ProductName");
}

__CFString *CKStringForDiscretionaryNetworkBehavior(unint64_t a1)
{
  if (a1 > 2) {
    return @"Unknown";
  }
  else {
    return off_1E5462648[a1];
  }
}

__CFString *CKErrorChainStringFromError(void *a1)
{
  id v1 = CKErrorChainFromError(a1);
  uint64_t v4 = v1;
  if (v1)
  {
    uint64_t v5 = objc_msgSend_CKMap_(v1, v2, (uint64_t)&unk_1ED7EF678, v3);
    objc_msgSend_componentsJoinedByString_(v5, v6, @"_", v7);
    uint32_t v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint32_t v8 = &stru_1ED7F5C98;
  }

  return v8;
}

id CKErrorChainFromError(void *a1)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (!v1)
  {
LABEL_10:
    unint64_t v16 = 0;
    goto LABEL_34;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v15 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_FAULT))
    {
      uint64_t v67 = v15;
      uint64_t v68 = (objc_class *)objc_opt_class();
      v69 = NSStringFromClass(v68);
      *(_DWORD *)buf = 138543618;
      uint64_t v78 = v69;
      __int16 v79 = 2112;
      id v80 = v1;
      _os_log_fault_impl(&dword_18AF10000, v67, OS_LOG_TYPE_FAULT, "Trying to get an error chain from a non-NSError (%{public}@): %@", buf, 0x16u);
    }
    goto LABEL_10;
  }
  id v2 = v1;
  uint64_t v6 = objc_msgSend_domain(v2, v3, v4, v5);
  if (objc_msgSend_isEqualToString_(v6, v7, @"CKErrorDomain", v8)
    && objc_msgSend_code(v2, v9, v10, v11) == 2)
  {
  }
  else
  {
    uint64_t v17 = objc_msgSend_domain(v2, v9, v10, v11);
    if ((objc_msgSend_isEqualToString_(v17, v18, @"CKInternalErrorDomain", v19) & 1) == 0)
    {

      goto LABEL_30;
    }
    uint64_t v23 = objc_msgSend_code(v2, v20, v21, v22);

    if (v23 != 1011)
    {
LABEL_30:
      id v75 = v2;
      unint64_t v16 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v12, (uint64_t)&v75, 1);
      uint64_t v58 = objc_msgSend_userInfo(v2, v55, v56, v57);
      unint64_t v61 = objc_msgSend_objectForKeyedSubscript_(v58, v59, *MEMORY[0x1E4F28A50], v60);
      uint64_t v62 = CKErrorChainFromError(v61);

      if (v62)
      {
        uint64_t v65 = objc_msgSend_arrayByAddingObjectsFromArray_(v16, v63, (uint64_t)v62, v64);

        unint64_t v16 = (void *)v65;
      }

      goto LABEL_33;
    }
  }
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  id v70 = v2;
  unint64_t v24 = objc_msgSend_userInfo(v2, v12, v13, v14);
  uint64_t v27 = objc_msgSend_objectForKeyedSubscript_(v24, v25, @"CKPartialErrors", v26);
  uint64_t v31 = objc_msgSend_allValues(v27, v28, v29, v30);

  uint64_t v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(v31, v32, (uint64_t)&v71, (uint64_t)v76, 16);
  if (!v33)
  {
LABEL_25:

    id v2 = v70;
    goto LABEL_30;
  }
  uint64_t v37 = v33;
  uint64_t v38 = *(void *)v72;
LABEL_15:
  uint64_t v39 = 0;
  while (1)
  {
    if (*(void *)v72 != v38) {
      objc_enumerationMutation(v31);
    }
    uint64_t v40 = *(void **)(*((void *)&v71 + 1) + 8 * v39);
    unint64_t v41 = objc_msgSend_domain(v40, v34, v35, v36);
    if (objc_msgSend_isEqualToString_(v41, v42, @"CKErrorDomain", v43)
      && objc_msgSend_code(v40, v44, v45, v46) == 22)
    {

      goto LABEL_23;
    }
    id v47 = objc_msgSend_domain(v40, v44, v45, v46);
    if ((objc_msgSend_isEqualToString_(v47, v48, @"CKInternalErrorDomain", v49) & 1) == 0) {
      break;
    }
    uint64_t v53 = objc_msgSend_code(v40, v50, v51, v52);

    if (v53 != 2024) {
      goto LABEL_28;
    }
LABEL_23:
    if (v37 == ++v39)
    {
      uint64_t v37 = objc_msgSend_countByEnumeratingWithState_objects_count_(v31, v34, (uint64_t)&v71, (uint64_t)v76, 16);
      if (v37) {
        goto LABEL_15;
      }
      goto LABEL_25;
    }
  }

LABEL_28:
  id v54 = v40;
  id v2 = v70;

  if (v54 == v70) {
    goto LABEL_30;
  }
  unint64_t v16 = CKErrorChainFromError(v54);
  id v2 = v54;
LABEL_33:

LABEL_34:

  return v16;
}

uint64_t CKCurrentProcessLinkCheck92e3e8f8ec1a906754afb22d87eb36301b4f6760()
{
  if (qword_1EB27A090 != -1) {
    dispatch_once(&qword_1EB27A090, &unk_1ED7EC348);
  }
  return byte_1EB279FAC;
}

void CKSyncEngine.State.pendingDatabaseChanges.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_pendingDatabaseChanges);
  sub_18AF34EA0(0, &qword_1E9125230);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return;
  }
  sub_18AF34294();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_13;
  }
LABEL_3:
  sub_18AF382A4();
  sub_18AF5B678();
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    do
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v4 = (id)MEMORY[0x18C1298C0](0, v2);
      }
      else {
        id v4 = *(id *)(v2 + 32);
      }
      uint64_t v5 = v4;
      CKSyncEnginePendingDatabaseChange.changeStruct()((uint64_t)v9);

      sub_18AF16C5C();
      if (v7)
      {
        sub_18AF33AB4(v6);
        sub_18AF5B678();
      }
      sub_18AF35244();
    }
    while (!v8);
    swift_bridgeObjectRelease();
  }
}

uint64_t CKCreateDirectoryAtPath(void *a1, void *a2)
{
  return CKCreateDirectoryAtPathWithAttributes(a1, 0, a2);
}

uint64_t sub_18AF1B518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[10] = a6;
  v7[11] = a7;
  v7[8] = a4;
  v7[9] = a5;
  return MEMORY[0x1F4188298](sub_18AF2A2A8, 0, 0);
}

uint64_t sub_18AF1B53C()
{
  *(void *)(v1 + 48) = v0;
  return sub_18AF18660((uint64_t)sub_18AF3F554, v0);
}

uint64_t sub_18AF1B558()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_18AF38CA8;
  return sub_18AF2F0E0();
}

uint64_t sub_18AF1B5E8()
{
  *(void *)(v1 + 16) = v0;
  return sub_18AF18660((uint64_t)sub_18AF1E768, v0);
}

uint64_t sub_18AF1B604(_OWORD *a1)
{
  *(void *)(v2 + 80) = v1;
  long long v3 = a1[1];
  *(_OWORD *)(v2 + 16) = *a1;
  *(_OWORD *)(v2 + 32) = v3;
  *(_OWORD *)(v2 + 48) = a1[2];
  *(_OWORD *)(v2 + 57) = *(_OWORD *)((char *)a1 + 41);
  return sub_18AF18660((uint64_t)sub_18AF2059C, v1);
}

uint64_t sub_18AF1B638(uint64_t a1)
{
  *(unsigned char *)(v2 + 81) = *(unsigned char *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(v2 + 248) = v1;
  *(void *)(v2 + 256) = v3;
  *(unsigned char *)(v2 + 82) = *(unsigned char *)(a1 + 16);
  *(void *)(v2 + 264) = *(void *)(a1 + 24);
  return sub_18AF18660((uint64_t)sub_18AF2ECB4, v1);
}

uint64_t sub_18AF1B670(uint64_t *a1)
{
  uint64_t v3 = *a1;
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = v3;
  *(unsigned char *)(v2 + 56) = *((unsigned char *)a1 + 8);
  *(void *)(v2 + 32) = a1[2];
  return sub_18AF18660((uint64_t)sub_18AF1D8C0, v1);
}

uint64_t sub_18AF1B6A0(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
  *(unsigned char *)(v5 + 16) = a2 & 1;
  *(void *)(v5 + 24) = a3;
  *(unsigned char *)(v5 + 32) = a4;
  *(void *)(v5 + 40) = a5;
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v5 + 48) = v6;
  void *v6 = v5;
  v6[1] = sub_18AF1FCDC;
  return sub_18AF1B638(v5 + 16);
}

uint64_t sub_18AF1B74C(uint64_t a1)
{
  *(unsigned char *)(v2 + 64) = *(unsigned char *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = v3;
  *(unsigned char *)(v2 + 65) = *(unsigned char *)(a1 + 16);
  *(void *)(v2 + 32) = *(void *)(a1 + 24);
  return sub_18AF18660((uint64_t)sub_18AF22B0C, v1);
}

id sub_18AF1B784(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (objc_msgSend_length(a1, a2, a3, a4)) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = 0;
  }

  return v5;
}

id sub_18AF1B7C0(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = sub_18B0B7F94;
  v14[3] = &unk_1E5463B18;
  id v7 = v6;
  id v15 = v7;
  uint64_t v9 = objc_msgSend_indexOfObjectWithOptions_passingTest_(a1, v8, a3, (uint64_t)v14);
  if (v9 == 0x7FFFFFFFFFFFFFFFLL)
  {
    id v12 = 0;
  }
  else
  {
    id v12 = objc_msgSend_objectAtIndex_(a1, v10, v9, v11);
  }

  return v12;
}

void CKCheckedUnsafeObjectTransfer.deinit()
{
  sub_18AF22D38();
  sub_18AF3A9C8();
  uint64_t v1 = *(void *)(v0 + 80);
  type metadata accessor for Optional();
  sub_18AF22CB0();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v4);
  id v6 = (char *)&v9 - v5;
  sub_18AF3A9C8();
  swift_beginAccess();
  sub_18AF475F0();
  v7();
  LODWORD(v1) = sub_18AF436E0((uint64_t)v6, 1, v1);
  uint64_t v8 = *(void (**)(void))(v3 + 8);
  sub_18AF16D24();
  v8();
  if (v1 == 1)
  {
    sub_18AF16D24();
    v8();
    sub_18AF3387C();
  }
  else
  {
    __break(1u);
  }
}

void sub_18AF1BC24(__n128 a1)
{
  *(void *)(v1 + 16) = v2;
  *(__n128 *)(v1 + 16 * v3 + 32) = a1;
}

void sub_18AF1BC3C()
{
  sub_18AF7D420();
}

uint64_t sub_18AF1BC6C(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return Identifiable<>.id.getter();
}

void sub_18AF1BC8C()
{
  sub_18AF22D38();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = sub_18AF161EC(&qword_1E9125478);
  uint64_t v10 = sub_18AF19284(v9);
  MEMORY[0x1F4188790](v10);
  sub_18AF2A53C();
  if (v6)
  {
    uint64_t v11 = sub_18AF19EAC();
    *(void *)(v11 + 16) = v6;
    *(void *)(v11 + 24) = v4;
    id v12 = sub_18AF47774;
  }
  else
  {
    id v12 = 0;
    uint64_t v11 = 0;
  }
  sub_18AF161EC(&qword_1E9124E00);
  sub_18AF19EAC();
  sub_18AF42F30(v6);
  uint64_t v13 = sub_18AF48F34((uint64_t)v12, v11);
  uint64_t v14 = type metadata accessor for TaskPriority();
  sub_18AF1826C(v1, v15, v16, v14);
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = 0;
  v17[3] = 0;
  v17[4] = v8;
  v17[5] = v2;
  v17[6] = v13;
  swift_bridgeObjectRetain();
  id v18 = v2;
  sub_18AF42DB4(v1, (uint64_t)&unk_1E9125FD0, (uint64_t)v17);
  swift_release();
  sub_18AF3387C();
}

uint64_t sub_18AF1BDD4()
{
  sub_18AF19FAC();
  if (*(unsigned char *)(v0 + 56) == 1) {
    static Task<>.checkCancellation()();
  }
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  sub_18AF1BF50(&qword_1E9125260, v1, (void (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 32) = v4;
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_18AF1DE30;
  return MEMORY[0x1F4188160]();
}

uint64_t sub_18AF1BF50(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18AF1C1C0()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_18AF16D18();
  *uint64_t v5 = v4;
  *(void *)(v6 + 80) = v0;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

id sub_18AF1C2A0(void *a1)
{
  uint64_t v1 = qword_1EB279B60;
  id v4 = a1;
  if (v1 != -1) {
    dispatch_once(&qword_1EB279B60, &unk_1ED7EEFB8);
  }
  uint64_t v5 = objc_msgSend_objectForKeyedSubscript_((void *)qword_1EB279B58, v2, (uint64_t)v4, v3);

  return v5;
}

uint64_t sub_18AF1C6A8()
{
  sub_18AF339B8();
  v1[53] = v2;
  v1[54] = v0;
  uint64_t v3 = sub_18AF161EC(&qword_1E9125168);
  v1[55] = v3;
  sub_18AF16DF8(v3);
  v1[56] = v4;
  v1[57] = sub_18AF2F1C8();
  uint64_t v5 = sub_18AF161EC(&qword_1E91251B0);
  v1[58] = v5;
  sub_18AF16DF8(v5);
  v1[59] = v6;
  v1[60] = sub_18AF2F1C8();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

void sub_18AF1C76C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    uint64_t v2 = (void *)v2[8];
  }
  uint64_t v3 = v2;
  objc_msgSend_array(v3, v4, v5, v6);
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v10 = objc_msgSend_copy(v13, v7, v8, v9);
  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
  id v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;
}

id sub_18AF1C7E4(void *a1)
{
  uint64_t v15 = 0;
  id v1 = a1;
  uint64_t v5 = objc_msgSend_bytes(v1, v2, v3, v4);
  unint64_t v9 = objc_msgSend_length(v1, v6, v7, v8);
  uint64_t v10 = CKHexCharFromBytes(v5, v9, &v15, 3);
  id v11 = [NSString alloc];
  id v13 = objc_msgSend_initWithBytesNoCopy_length_encoding_freeWhenDone_(v11, v12, (uint64_t)v10, v15, 1, 1);

  return v13;
}

uint64_t sub_18AF1C86C()
{
  sub_18AF339B8();
  *(void *)(v0 + 120) = v1;
  *(void *)(v0 + 128) = v2;
  *(unsigned char *)(v0 + 81) = v3;
  *(void *)(v0 + 104) = v4;
  *(void *)(v0 + 112) = v5;
  *(void *)(v0 + 136) = *(void *)v1;
  *(unsigned char *)(v0 + 82) = *(unsigned char *)(v1 + 8);
  *(_OWORD *)(v0 + 144) = *(_OWORD *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 32);
  *(unsigned char *)(v0 + 83) = *(unsigned char *)(v1 + 40);
  uint64_t v7 = *(void *)(v1 + 48);
  *(void *)(v0 + 160) = v6;
  *(void *)(v0 + 168) = v7;
  *(unsigned char *)(v0 + 84) = *(unsigned char *)(v1 + 56);
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v8, v9, v10);
}

uint64_t sub_18AF1C930()
{
  sub_18AF339B8();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_18AF1C990()
{
  sub_18AF339B8();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_18AF1C9F0()
{
  sub_18AF339B8();
  *(void *)(v0 + 88) = v1;
  *(void *)(v0 + 96) = v2;
  *(unsigned char *)(v0 + 129) = v3;
  *(void *)(v0 + 72) = v4;
  *(void *)(v0 + 80) = v5;
  *(unsigned char *)(v0 + 128) = v6;
  *(void *)(v0 + 64) = v7;
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v8, v9, v10);
}

#error "18AF1CD4C: call analysis failed (funcsize=236)"

#error "18AF1D130: call analysis failed (funcsize=236)"

#error "18AF1D514: call analysis failed (funcsize=236)"

uint64_t sub_18AF1D634()
{
  sub_18AF19FAC();
  sub_18AF1D6F4();
  swift_bridgeObjectRelease();
  os_activity_scope_leave(v0);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  char v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

void sub_18AF1D6F4()
{
  uint64_t v2 = *(void **)(v0 + 88);
}

void sub_18AF1D720()
{
  uint64_t v3 = v0;
  uint64_t v4 = v1;
  String.append(_:)(*(Swift::String *)&v3);
}

__n128 sub_18AF1D73C(uint64_t a1)
{
  *(void *)(v2 + 56) = a1;
  __n128 result = *(__n128 *)(v2 + 24);
  *(void *)(a1 + 16) = v1;
  *(__n128 *)(a1 + 24) = result;
  *(void *)(a1 + 40) = v3;
  return result;
}

uint64_t sub_18AF1D758()
{
  return v0 + 8;
}

uint64_t sub_18AF1D77C()
{
  sub_18AF2A56C();
  uint64_t v2 = (const void *)v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = swift_allocObject();
  v0[13] = v3;
  *(void *)(v3 + 16) = v1;
  memcpy((void *)(v3 + 24), v2, 0x41uLL);
  swift_retain();
  sub_18AF1D870((uint64_t)(v0 + 2));
  uint64_t v4 = (void *)swift_task_alloc();
  v0[14] = v4;
  void *v4 = v0;
  v4[1] = sub_18AF1FAD4;
  return sub_18AF2F02C();
}

uint64_t sub_18AF1D870(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  swift_bridgeObjectRetain();
  id v3 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_18AF1D8C0()
{
  sub_18AF2A56C();
  uint64_t v1 = *(void **)(v0 + 32);
  uint64_t v7 = (uint64_t (__cdecl *)())((char *)&dword_1E9125ED0 + dword_1E9125ED0);
  swift_bridgeObjectRetain();
  id v2 = v1;
  swift_retain();
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_18AF1D998(v3);
  void *v4 = v5;
  v4[1] = sub_18AF26928;
  return v7();
}

uint64_t sub_18AF1D998(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t sub_18AF1D9A4()
{
  sub_18AF2A56C();
  sub_18AF1DA34();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  uint64_t v3 = sub_18AF33C54();
  return sub_18AF43C0C(v3, v4, v5, v6);
}

uint64_t sub_18AF1DA44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CKAsyncSerialQueue.WaitContext();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (uint64_t *)((char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((swift_task_isCurrentExecutor() & 1) == 0) {
    swift_task_reportUnexpectedExecutor();
  }
  static Task<>.currentPriority.getter();
  uint64_t v10 = (char *)v9 + *(int *)(v6 + 24);
  uint64_t v11 = sub_18AF161EC(&qword_1E91251B8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v10, a1, v11);
  void *v9 = a2;
  uint64_t v12 = (uint64_t *)(a3 + 136);
  swift_beginAccess();
  uint64_t result = *(void *)(a3 + 136);
  uint64_t v14 = *(void *)(result + 24);
  Swift::Int v15 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
  }
  else
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v12;
    if (*(void *)(*v12 + 16) < v15 || (isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_18AFB42EC(v15, 0);
      uint64_t v17 = *v12;
    }
    sub_18AF1DC38((void *)(v17 + 16), v17 + ((*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), (uint64_t)v9);
    swift_endAccess();
    if (*(unsigned char *)(a3 + 112) == 1)
    {
      swift_beginAccess();
      sub_18AFB1A20((uint64_t *)(a3 + 136));
      swift_endAccess();
    }
    return sub_18AF43838((uint64_t)v9);
  }
  return result;
}

void *sub_18AF1DC38(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result[1];
  uint64_t v4 = result[2];
  uint64_t v5 = v4 + v3;
  if (!__OFADD__(v4, v3))
  {
    uint64_t v8 = result;
    if ((v3 & 0x8000000000000000) == 0)
    {
      BOOL v9 = __OFSUB__(v5, *result);
      if (v5 < *result || (v5 -= *result, !v9))
      {
LABEL_9:
        uint64_t v10 = type metadata accessor for CKAsyncSerialQueue.WaitContext();
        uint64_t result = (void *)sub_18AF1DCF4(a3, a2 + *(void *)(*(void *)(v10 - 8) + 72) * v5);
        uint64_t v11 = v8[1];
        BOOL v9 = __OFADD__(v11, 1);
        uint64_t v12 = v11 + 1;
        if (!v9)
        {
          v8[1] = v12;
          return result;
        }
        goto LABEL_12;
      }
      __break(1u);
    }
    if (v5 < 0)
    {
      BOOL v9 = __OFADD__(v5, *result);
      v5 += *result;
      if (v9) {
        goto LABEL_13;
      }
    }
    goto LABEL_9;
  }
  __break(1u);
LABEL_12:
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_18AF1DCF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CKAsyncSerialQueue.WaitContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *sub_18AF1DD58(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_18AF161EC(&qword_1E91251B8);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t sub_18AF1DE30()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF22DBC();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  void *v6 = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 24);
    uint64_t v8 = sub_18AFB19C4;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 24);
    swift_task_dealloc();
    uint64_t v8 = sub_18AF14D94;
    uint64_t v7 = v9;
  }
  return MEMORY[0x1F4188298](v8, v7, 0);
}

uint64_t sub_18AF1DF1C()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  void *v6 = v5;
  *(void *)(v3 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 80);
    uint64_t v8 = sub_18AFFBA2C;
  }
  else
  {
    sub_18AF1E010();
    swift_task_dealloc();
    uint64_t v8 = sub_18AF1F8BC;
    uint64_t v7 = v3;
  }
  return MEMORY[0x1F4188298](v8, v7, 0);
}

uint64_t sub_18AF1E010()
{
  return swift_task_dealloc();
}

void sub_18AF1E0D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_18AF1E140(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (void *)MEMORY[0x1E4F1CA48];
  uint64_t v6 = objc_msgSend_count(a1, a2, a3, a4);
  uint64_t v9 = objc_msgSend_arrayWithCapacity_(v5, v7, v6, v8);
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  id v10 = a1;
  uint64_t v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v50, (uint64_t)v54, 16);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)v51;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v51 != v14) {
          objc_enumerationMutation(v10);
        }
        id v16 = *(id *)(*((void *)&v50 + 1) + 8 * i);
        if (objc_msgSend_conformsToProtocol_(v16, v17, (uint64_t)&unk_1ED871C10, v18))
        {
          uint64_t v22 = objc_msgSend_CKDeepCopy(v16, v19, v20, v21);
        }
        else
        {
          if (objc_msgSend_conformsToProtocol_(v16, v19, (uint64_t)&unk_1ED84EF78, v21))
          {
            uint64_t v36 = NSString;
            uint64_t v37 = (objc_class *)objc_opt_class();
            uint64_t v38 = NSStringFromClass(v37);
            uint64_t v39 = NSStringFromProtocol((Protocol *)&unk_1ED871C10);
            uint64_t v42 = objc_msgSend_stringWithFormat_(v36, v40, @"Collection with class %@ does not support %@", v41, v38, v39, (void)v50);

            goto LABEL_18;
          }
          if (!objc_msgSend_conformsToProtocol_(v16, v23, (uint64_t)&unk_1ED848860, v24))
          {
            uint64_t v43 = NSString;
            uint64_t v44 = (objc_class *)objc_opt_class();
            uint64_t v38 = NSStringFromClass(v44);
            uint64_t v42 = objc_msgSend_stringWithFormat_(v43, v45, @"Object with class %@ cannot be copied", v46, v38);
LABEL_18:

            id v47 = [CKException alloc];
            id v49 = (id)objc_msgSend_initWithName_format_(v47, v48, *MEMORY[0x1E4F1C3C8], @"%@", v42);
            objc_exception_throw(v49);
          }
          uint64_t v22 = objc_msgSend_copyWithZone_(v16, v25, 0, v26);
        }
        uint64_t v27 = (void *)v22;

        objc_msgSend_addObject_(v9, v28, (uint64_t)v27, v29);
      }
      uint64_t v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v30, (uint64_t)&v50, (uint64_t)v54, 16);
    }
    while (v13);
  }

  unint64_t v34 = objc_msgSend_copy(v9, v31, v32, v33);

  return v34;
}

uint64_t sub_18AF1E488()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_18AF16CB4();
  *uint64_t v5 = v4;
  *(void *)(v6 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_18AF16AA0();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    sub_18AF16D48();
    return v10();
  }
}

uint64_t sub_18AF1E758(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_18AF1E768()
{
  sub_18AF339B8();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_18AF2303C;
  uint64_t v2 = *(void *)(v0 + 16);
  return sub_18AF14A2C((uint64_t)v1, 1, (uint64_t)&unk_1E9126DC8, v2);
}

uint64_t sub_18AF1E814()
{
  sub_18AF339B8();
  v1[11] = v2;
  v1[12] = v0;
  memcpy(v1 + 2, v2, 0x41uLL);
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

void sub_18AF1EA08(uint64_t a1, void *a2, void *a3)
{
  id v20 = a3;
  id v5 = a2;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  id v10 = *(void **)(a1 + 32);
  uint64_t v11 = NSString;
  if (isKindOfClass)
  {
    uint64_t v12 = objc_msgSend_CKPropertiesStyleString(v20, v7, v8, v9);
    objc_msgSend_stringWithFormat_(v11, v13, @"%@={ %@ }", v14, v5, v12);
  }
  else
  {
    uint64_t v12 = objc_msgSend_description(v20, v7, v8, v9);
    objc_msgSend_stringWithFormat_(v11, v15, @"%@=%@", v16, v5, v12);
  uint64_t v17 = };

  objc_msgSend_addObject_(v10, v18, (uint64_t)v17, v19);
}

uint64_t sub_18AF1EB64()
{
  sub_18AF339B8();

  *(void *)(v0 + 336) = *(void *)(v0 + 368);
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_18AF1EBF8(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_18AF1F1AC;
  sub_18AF1EC9C();
  return sub_18AF14BC0();
}

uint64_t sub_18AF1EBF8(uint64_t result)
{
  *(void *)(v1 + 344) = result;
  return result;
}

uint64_t sub_18AF1EC04()
{
  sub_18AF339B8();
  sub_18AF36AF4(*(id *)(v0 + 264));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 288) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_18AF20074;
  sub_18AF1EC9C();
  return sub_18AF1B53C();
}

uint64_t sub_18AF1ECA8()
{
  sub_18AF339B8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF19364(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  uint64_t v3 = sub_18AF40F8C();
  return sub_18AF15548(v3, v4);
}

id sub_18AF1ED38(void *a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F28E60]);
  uint64_t v6 = objc_msgSend_numberOfArguments(a1, v3, v4, v5);
  if (v6 - 1 >= 2)
  {
    uint64_t v10 = v6;
    do
    {
      --v10;
      id v11 = a1;
      ArgumentTypeAtIndex = (const char *)objc_msgSend_getArgumentTypeAtIndex_(v11, v12, v10, v13);
      if (!strncmp("@?", ArgumentTypeAtIndex, 2uLL)) {
        objc_msgSend_addIndex_(v2, v7, v10, v9);
      }
    }
    while (v10 > 2);
  }
  Swift::Int v15 = objc_msgSend_copy(v2, v7, v8, v9);

  return v15;
}

uint64_t sub_18AF1EDF0(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_CKIsCKError(a1, a2, a3, a4)) {
    return 1;
  }
  uint64_t v9 = objc_msgSend_userInfo(a1, v5, v6, v7);
  uint64_t v12 = objc_msgSend_objectForKeyedSubscript_(v9, v10, *MEMORY[0x1E4F28A50], v11);

  if (objc_msgSend_CKHasCKErrorInUnderlyingErrors(v12, v13, v14, v15))
  {
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v19 = objc_msgSend_userInfo(a1, v16, v17, v18);
    uint64_t v22 = objc_msgSend_objectForKeyedSubscript_(v19, v20, *MEMORY[0x1E4F28750], v21);

    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    id v23 = v22;
    uint64_t v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v24, (uint64_t)&v64, (uint64_t)v69, 16);
    if (v25)
    {
      uint64_t v29 = v25;
      uint64_t v30 = *(void *)v65;
      while (2)
      {
        for (uint64_t i = 0; i != v29; ++i)
        {
          if (*(void *)v65 != v30) {
            objc_enumerationMutation(v23);
          }
          if (objc_msgSend_CKHasCKErrorInUnderlyingErrors(*(void **)(*((void *)&v64 + 1) + 8 * i), v26, v27, v28))
          {
            uint64_t v8 = 1;
            uint64_t v38 = v23;
            goto LABEL_27;
          }
        }
        uint64_t v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v26, (uint64_t)&v64, (uint64_t)v69, 16);
        if (v29) {
          continue;
        }
        break;
      }
    }

    uint64_t v35 = objc_msgSend_userInfo(a1, v32, v33, v34);
    uint64_t v38 = objc_msgSend_objectForKeyedSubscript_(v35, v36, @"CKFunctionError", v37);

    if (objc_msgSend_CKHasCKErrorInUnderlyingErrors(v38, v39, v40, v41))
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v45 = objc_msgSend_userInfo(a1, v42, v43, v44);
      Class v48 = objc_msgSend_objectForKeyedSubscript_(v45, v46, @"CKPartialErrors", v47);

      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v52 = objc_msgSend_allValues(v48, v49, v50, v51, 0);
      uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v52, v53, (uint64_t)&v60, (uint64_t)v68, 16);
      if (v8)
      {
        uint64_t v57 = *(void *)v61;
        while (2)
        {
          for (uint64_t j = 0; j != v8; ++j)
          {
            if (*(void *)v61 != v57) {
              objc_enumerationMutation(v52);
            }
            if (objc_msgSend_CKHasCKErrorInUnderlyingErrors(*(void **)(*((void *)&v60 + 1) + 8 * j), v54, v55, v56))
            {
              uint64_t v8 = 1;
              goto LABEL_26;
            }
          }
          uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v52, v54, (uint64_t)&v60, (uint64_t)v68, 16);
          if (v8) {
            continue;
          }
          break;
        }
      }
LABEL_26:
    }
LABEL_27:
  }
  return v8;
}

uint64_t sub_18AF1F08C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_domain(a1, a2, a3, a4);
  if (objc_msgSend_isEqualToString_(v5, v6, @"CKErrorDomain", v7))
  {
    uint64_t isEqualToString = 1;
  }
  else
  {
    uint64_t v12 = objc_msgSend_domain(a1, v8, v9, v10);
    uint64_t isEqualToString = objc_msgSend_isEqualToString_(v12, v13, @"CKInternalErrorDomain", v14);
  }
  return isEqualToString;
}

uint64_t sub_18AF1F104()
{
  sub_18AF339B8();
  sub_18AF401EC(*(void *)(v0 + 64), &qword_1E9125470);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_18AF1F19C();
  return v1();
}

uint64_t sub_18AF1F19C()
{
  return v0 + 8;
}

uint64_t sub_18AF1F1AC()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *id v2 = v1;
  swift_task_dealloc();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AF1F288()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *id v2 = v1;
  swift_task_dealloc();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AF1F364()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *id v2 = v1;
  swift_task_dealloc();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AF1F440()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *id v2 = v1;
  swift_task_dealloc();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AF1F51C()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *id v2 = v1;
  swift_task_dealloc();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AF1F5F8()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *id v2 = v1;
  swift_task_dealloc();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AF1F6D4()
{
  sub_18AF339B8();
  sub_18AF184F0();
  id v2 = *(void **)(v1 + 368);
  uint64_t v3 = *v0;
  sub_18AF16CB4();
  void *v4 = v3;
  swift_task_dealloc();

  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v5, v6, v7);
}

uint64_t sub_18AF1F7C8()
{
  sub_18AF339B8();
  sub_18AF184F0();
  id v2 = *(void **)(v1 + 480);
  uint64_t v3 = *v0;
  sub_18AF16CB4();
  void *v4 = v3;
  swift_task_dealloc();

  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v5, v6, v7);
}

uint64_t sub_18AF1F8BC()
{
  sub_18AF338B4();
  uint64_t v1 = *(void *)(v0 + 136);
  if ((sub_18AF1FABC() & 1) == 0) {
    sub_18AF2AD34();
  }
  sub_18AF386B0();
  if (!v2)
  {
    __break(1u);
    goto LABEL_15;
  }
  sub_18AF38750();
  if (!v2 || (static Task<>.checkCancellation()(), !v1))
  {
    uint64_t v5 = sub_18AF383B0();
    uint64_t v6 = sub_18AF1BC6C(v5);
    sub_18AF1FAA0(v6, v7, v8, v9, v10, v11, v12, v13, v18, v19);
    if (qword_1E9125240 == -1)
    {
LABEL_12:
      uint64_t v14 = (__n128 *)sub_18AF3856C();
      sub_18AF38718(v14);
      sub_18AF38368(&qword_1E9125260, (void (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue);
      uint64_t v15 = swift_task_alloc();
      uint64_t v16 = (void *)sub_18AF38740(v15);
      *uint64_t v16 = v17;
      v16[1] = sub_18AF30810;
      sub_18AF3872C();
      sub_18AF382F8();
      return MEMORY[0x1F41881B8]();
    }
LABEL_15:
    swift_once();
    goto LABEL_12;
  }
  sub_18AF434E4();
  sub_18AF1D758();
  return v3();
}

void sub_18AF1FAA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_18AF3660C((uint64_t)&a9, a1, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_18AF1FABC()
{
  return swift_task_isCurrentExecutor();
}

uint64_t sub_18AF1FAD4()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  void *v6 = v5;
  *(void *)(v3 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 96);
    return MEMORY[0x1F4188298](sub_18AF1C990, v7, 0);
  }
  else
  {
    swift_release();
    sub_18AF16D48();
    return v8();
  }
}

uint64_t sub_18AF1FBD8()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  void *v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 16);
    return MEMORY[0x1F4188298](sub_18AF1C930, v7, 0);
  }
  else
  {
    swift_release();
    sub_18AF16D48();
    return v8();
  }
}

uint64_t sub_18AF1FCDC()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_18AF16CB4();
  *uint64_t v5 = v4;
  *(void *)(v6 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_18AF16AA0();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    sub_18AF16D48();
    return v10();
  }
}

uint64_t sub_18AF1FDD4()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_18AF16CB4();
  *uint64_t v5 = v4;
  *(void *)(v6 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_18AF16AA0();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    sub_18AF16D48();
    return v10();
  }
}

uint64_t sub_18AF1FECC()
{
  sub_18AF2A56C();
  uint64_t v1 = *(void (**)(uint64_t))(v0 + 80);
  uint64_t v2 = *(void **)(v0 + 128);
  if (v1)
  {
    id v3 = v2;
    uint64_t v4 = sub_18AF1FFDC();
    v1(v4);
  }
  sub_18AF16D48();
  return v5();
}

uint64_t sub_18AF1FF54()
{
  sub_18AF2A56C();
  uint64_t v1 = *(void (**)(uint64_t))(v0 + 160);
  uint64_t v2 = *(void **)(v0 + 224);
  if (v1)
  {
    id v3 = v2;
    uint64_t v4 = sub_18AF1FFDC();
    v1(v4);
  }
  sub_18AF16D48();
  return v5();
}

uint64_t sub_18AF1FFDC()
{
  return v0;
}

uint64_t sub_18AF1FFE8()
{
  return swift_release();
}

void sub_18AF20008(uint64_t a1)
{
  sub_18AF20010(a1, *(void *)(v1 + 16));
}

void sub_18AF20010(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_18AF20074()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  void *v6 = v5;
  *(void *)(v3 + 296) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 248);
    return MEMORY[0x1F4188298](sub_18AF2318C, v7, 0);
  }
  else
  {
    id v8 = *(id *)(v3 + 264);
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v3 + 304) = v9;
    void *v9 = v5;
    v9[1] = sub_18AF4E6D0;
    uint64_t v10 = sub_18AF2EFEC();
    return sub_18AFE47D0(v10);
  }
}

uint64_t sub_18AF201C8()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  void *v6 = v5;
  *(void *)(v3 + 400) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 320);
    return MEMORY[0x1F4188298](sub_18AF417FC, v7, 0);
  }
  else
  {
    id v8 = *(id *)(v3 + 336);
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v3 + 408) = v9;
    void *v9 = v5;
    v9[1] = sub_18AFD71CC;
    uint64_t v10 = sub_18AF2EFEC();
    return sub_18AFE47D0(v10);
  }
}

uint64_t sub_18AF2031C()
{
  sub_18AF19FAC();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v3 = v2;
  uint64_t v5 = *(void **)(v4 + 192);
  uint64_t v6 = *v1;
  sub_18AF16D18();
  *uint64_t v7 = v6;
  *(void *)(v8 + 224) = v0;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v9, v10, v11);
}

uint64_t sub_18AF20494()
{
  sub_18AF339B8();
  sub_18AF38910();
  sub_18AF16D18();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_18AF16D18();
  *uint64_t v5 = v4;
  *(void *)(v6 + 192) = v0;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AF2059C()
{
  sub_18AF2A56C();
  sub_18AF20AC4(v0 + 16);
  sub_18AF2066C((uint64_t)&dword_1E9125ED8);
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_18AF26830;
  return v3();
}

uint64_t sub_18AF2066C@<X0>(uint64_t a1@<X8>)
{
  return v1 + a1;
}

uint64_t sub_18AF2067C()
{
  sub_18AF19FAC();
  unint64_t v1 = *MEMORY[0x1E4F143B8];
  char v2 = *(unsigned char *)(v0 + 129);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(void **)(v0 + 88);
  unint64_t v5 = *(void *)(v0 + 64);
  *(void *)(v0 + 56) = 0;
  *(void *)(v0 + 48) = 0;
  uint64_t v6 = CKActivityCreate(_:dso:)(v5, *(unsigned char *)(v0 + 128), &dword_18AF10000, v1);
  *(void *)(v0 + 104) = v6;
  os_activity_scope_enter(v6, (os_activity_scope_state_t)(v0 + 48));
  *(unsigned char *)(v0 + 16) = 1;
  *(void *)(v0 + 24) = v3;
  *(unsigned char *)(v0 + 32) = v2;
  *(void *)(v0 + 40) = v4;
  swift_bridgeObjectRetain();
  id v7 = v4;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_18AF20E7C;
  return sub_18AF1B74C(v0 + 16);
}

uint64_t sub_18AF207A4()
{
  unint64_t v1 = *(unsigned __int8 *)(v0 + 84);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 168);
  char v4 = *(unsigned char *)(v0 + 82);
  uint64_t v5 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 120);
  unint64_t v7 = *(void *)(v0 + 104);
  char v8 = v1 & 1;
  char v9 = *(unsigned char *)(v0 + 83) & 1;
  *(void *)(v0 + 96) = 0;
  *(void *)(v0 + 88) = 0;
  long long v13 = *(_OWORD *)(v0 + 144);
  uint64_t v10 = CKActivityCreate(_:dso:)(v7, *(unsigned char *)(v0 + 81), &dword_18AF10000, v1);
  *(void *)(v0 + 176) = v10;
  os_activity_scope_enter(v10, (os_activity_scope_state_t)(v0 + 88));
  *(unsigned char *)(v0 + 16) = 1;
  *(void *)(v0 + 24) = v5;
  *(unsigned char *)(v0 + 32) = v4;
  *(_OWORD *)(v0 + 40) = v13;
  *(void *)(v0 + 56) = v3;
  *(unsigned char *)(v0 + 64) = v9;
  *(void *)(v0 + 72) = v2;
  *(unsigned char *)(v0 + 80) = v8;
  sub_18AF20AC4(v6);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_18AF20494;
  return sub_18AF1E814();
}

os_activity_t CKActivityCreate(_:dso:)@<X0>(unint64_t a1@<X0>, char a2@<W2>, void *a3@<X3>, unint64_t a4@<X8>)
{
  if (a2)
  {
    a4 = HIDWORD(a1);
    if (!HIDWORD(a1))
    {
      if (a1 >> 11 != 27)
      {
        LODWORD(a4) = WORD1(a1);
        if (WORD1(a1) > 0x10u)
        {
LABEL_17:
          __break(1u);
LABEL_18:
          int v11 = (a1 & 0x3F) << 8;
          unsigned int v12 = (v11 | (a1 >> 6)) + 33217;
          unsigned int v13 = (v11 | (a1 >> 6) & 0x3F) << 8;
          unsigned int v14 = (((v13 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
          unsigned int v15 = (v13 | (a1 >> 12)) + 8487393;
          if (a4) {
            unsigned int v9 = v14;
          }
          else {
            unsigned int v9 = v15;
          }
          if (a1 < 0x800) {
            unsigned int v9 = v12;
          }
LABEL_13:
          *(void *)description = (v9 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << ((32 - (__clz(v9) & 0x38)) & 0x38));
          if (a3)
          {
            uint64_t v10 = dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_os_activity_current");
            return _os_activity_create(a3, description, v10, OS_ACTIVITY_FLAG_DEFAULT);
          }
          goto LABEL_26;
        }
        if ((a1 & 0xFFFFFF80) != 0) {
          goto LABEL_18;
        }
        if (a1 <= 0xFF)
        {
          unsigned int v9 = (a1 + 1);
          goto LABEL_13;
        }
        __break(1u);
      }
      __break(1u);
      goto LABEL_26;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (!a1)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (!a3)
  {
LABEL_26:
    os_activity_t result = (os_activity_t)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_os_activity_current");
  uint64_t v5 = (void *)sub_18AF40F8C();

  return _os_activity_create(v5, v6, v7, OS_ACTIVITY_FLAG_DEFAULT);
}

uint64_t sub_18AF20AC4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  swift_bridgeObjectRetain();
  id v3 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_18AF20CE4(uint64_t a1)
{
  sub_18AF20D30(*(void **)(a1 + 32), *(void **)(a1 + 40), 0);
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = *(void **)(a1 + 48);

  return sub_18AF20D30(v2, v3, 1);
}

uint64_t sub_18AF20D30(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2;
  unint64_t v7 = v5;
  if (a1)
  {
    if (a3 == 1)
    {
      unsigned int v9 = v5;
      uint64_t v5 = (const char *)objc_msgSend_setOrgAdminUserID_(a1, v5, (uint64_t)v5, v6);
    }
    else
    {
      if (a3) {
        goto LABEL_7;
      }
      unsigned int v9 = v5;
      uint64_t v5 = (const char *)objc_msgSend_setContainerScopedUserID_(a1, v5, (uint64_t)v5, v6);
    }
    unint64_t v7 = v9;
  }
LABEL_7:

  return MEMORY[0x1F41817F8](v5, v7);
}

uint64_t sub_18AF20E7C()
{
  sub_18AF339B8();
  sub_18AF38910();
  sub_18AF16D18();
  *id v3 = v2;
  uint64_t v4 = *v1;
  sub_18AF16D18();
  *uint64_t v5 = v4;
  *(void *)(v6 + 120) = v0;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AF20F84()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  sub_18AF16D18();
  *id v3 = v2;
  uint64_t v5 = *(void **)(v4 + 112);
  uint64_t v6 = *v1;
  sub_18AF16D18();
  *uint64_t v7 = v6;
  *(void *)(v8 + 128) = v0;
  swift_task_dealloc();

  swift_release();
  swift_bridgeObjectRelease();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v9, v10, v11);
}

uint64_t sub_18AF2129C()
{
  sub_18AF339B8();
  uint64_t v1 = MEMORY[0x18C12BC20](v0[3] + 112);
  v0[12] = v1;
  if (v1)
  {
    uint64_t v2 = CKSyncEngine.actor.getter();
    v0[13] = v2;
    return MEMORY[0x1F4188298](sub_18AF264C4, v2, 0);
  }
  else
  {
    sub_18AF16D48();
    return v3();
  }
}

uint64_t sub_18AF21344()
{
  uint64_t v1 = *(void **)(v0 + 112);
  uint64_t v2 = *(void **)(v0 + 96);
  if (v1)
  {
    long long v6 = *(_OWORD *)(v0 + 32);
    long long v7 = *(_OWORD *)(v0 + 48);
    long long v8 = *(_OWORD *)(v0 + 64);
    long long v9 = *(_OWORD *)(v0 + 80);
    LOBYTE(v10) = *(unsigned char *)(v0 + 120);
    Class isa = CKSyncEngine.Event.eventObject()().super.isa;
    objc_msgSend(v2, sel_syncEngine_handleEvent_, v1, isa, v6, v7, v8, v9, v10);
  }
  swift_unknownObjectRelease();
  sub_18AF16D48();
  return v4();
}

uint64_t sub_18AF2258C()
{
  sub_18AF19FAC();
  sub_18AF226A0();
  uint64_t v0 = sub_18AF226EC();
  uint64_t v2 = (__n128 *)sub_18AF226C8(v0, v1);
  sub_18AF226B0(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v11 = swift_task_alloc();
  unsigned int v12 = (void *)sub_18AF22680(v11);
  void *v12 = v13;
  v12[1] = sub_18AF2F5F0;
  sub_18AF22690();
  return sub_18AF14A2C(v14, v15, v16, v17);
}

uint64_t sub_18AF22648()
{
  return CheckedContinuation.init(continuation:function:)();
}

uint64_t sub_18AF22668()
{
  return NSObject.hash(into:)();
}

uint64_t sub_18AF22680(uint64_t result)
{
  *(void *)(v1 + 104) = result;
  return result;
}

__n128 sub_18AF226A0()
{
  return *(__n128 *)(v0 + 72);
}

__n128 sub_18AF226B0(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  *(void *)(v10 + 96) = a1;
  __n128 result = a9;
  a1[1] = a9;
  a1[2].n128_u64[0] = v9;
  return result;
}

uint64_t sub_18AF226C8(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return swift_task_alloc();
}

uint64_t sub_18AF226EC()
{
  uint64_t result = MEMORY[0x18C12BC20](v0 + 112);
  if (result)
  {
    uint64_t v2 = result;
    swift_getObjectType();
    uint64_t result = sub_18AF227C8(v2);
    if (!result)
    {
      _StringGuts.grow(_:)(62);
      v3._object = (void *)0x800000018B1D4930;
      v3._countAndFlagsBits = 0xD00000000000003CLL;
      String.append(_:)(v3);
      swift_getObjectType();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      uint64_t result = sub_18AFFBF7C();
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_18AF227C8(uint64_t a1)
{
  if (swift_conformsToProtocol2()) {
    return a1;
  }
  else {
    return 0;
  }
}

uint64_t sub_18AF2280C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_18AF31148();
  sub_18AF338B4();
  sub_18AF2289C();
  sub_18AF228C0();

  sub_18AF4039C();
  swift_bridgeObjectRelease_n();
  swift_release();

  sub_18AF16D48();
  sub_18AF311B0();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

uint64_t sub_18AF2289C()
{
  return swift_willThrow();
}

uint64_t sub_18AF228C0()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_18AF228D8()
{
  sub_18AF2A56C();
  if (qword_1E9125270 != -1) {
    swift_once();
  }
  uint64_t v0 = (__n128 *)sub_18AF22A10();
  sub_18AF22A30(v0);
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_18AF22A04(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_18AF153DC;
  sub_18AF229F8();
  sub_18AF22A48();
  return MEMORY[0x1F41881B8]();
}

uint64_t sub_18AF22A04(uint64_t result)
{
  *(void *)(v1 + 64) = result;
  return result;
}

uint64_t sub_18AF22A10()
{
  *(unsigned char *)(v0 + 72) = 1;
  return swift_task_alloc();
}

__n128 sub_18AF22A30(__n128 *a1)
{
  *(void *)(v1 + 56) = a1;
  __n128 result = *(__n128 *)(v1 + 40);
  a1[1] = result;
  a1[2].n128_u64[0] = v2;
  return result;
}

uint64_t sub_18AF22A5C()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF19364(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  sub_18AF30494();
  sub_18AF37AC0();
  return sub_18AF1B6A0(v3, v4, v5, v6, v7);
}

uint64_t sub_18AF22B0C()
{
  sub_18AF2FCD0();
  sub_18AF19FAC();
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void **)(v0 + 32);
  char v3 = *(unsigned char *)(v0 + 65);
  char v4 = *(unsigned char *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = swift_allocObject();
  *(void *)(v0 + 40) = v6;
  *(void *)(v6 + 16) = v5;
  *(unsigned char *)(v6 + 24) = v4;
  *(void *)(v6 + 32) = v1;
  *(unsigned char *)(v6 + 40) = v3;
  *(void *)(v6 + 48) = v2;
  swift_retain();
  swift_bridgeObjectRetain();
  id v7 = v2;
  uint64_t v8 = swift_task_alloc();
  unint64_t v9 = (void *)sub_18AF22D78(v8);
  void *v9 = v10;
  v9[1] = sub_18AF1FBD8;
  sub_18AF2FCE4();
  return sub_18AF2F02C();
}

uint64_t sub_18AF22C0C()
{
  sub_18AF339B8();
  ContinuousClock.init()();
  uint64_t v0 = sub_18AF22E4C();
  uint64_t v1 = (void *)sub_18AF22D78(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF2F880;
  sub_18AF22E38();
  return v3();
}

uint64_t sub_18AF22CCC()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_18AF22CF0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18AF22D08()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AF22D78(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

uint64_t sub_18AF22D84()
{
  return swift_bridgeObjectRetain();
}

id sub_18AF22DA0()
{
  return sub_18AF47CCC(v1, v0);
}

void sub_18AF22DCC()
{
  *(void *)(v0 + 40) = 0;
}

uint64_t sub_18AF22E4C()
{
  return swift_task_alloc();
}

uint64_t sub_18AF22F64()
{
  sub_18AF339B8();
  if (*(unsigned char *)(v0 + 32) == 1)
  {
    sub_18AF34450();
    if (*(unsigned char *)(v0 + 33)) {
      sub_18AFE8EA0();
    }
    sub_18AF16D48();
    return v1();
  }
  else
  {
    char v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 24) = v3;
    *char v3 = v0;
    v3[1] = sub_18AFE249C;
    sub_18AFFD740();
    return sub_18AF14BC0();
  }
}

uint64_t sub_18AF2303C()
{
  sub_18AF2A56C();
  sub_18AF23168();
  uint64_t v2 = *v1;
  sub_18AF16CB4();
  *char v3 = v2;
  swift_task_dealloc();
  sub_18AF23180();
  if (v0) {

  }
  sub_18AF309A4();
  return MEMORY[0x1F4188298](v4, v5, v6);
}

char *sub_18AF2313C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return &a10;
}

uint64_t sub_18AF2315C(uint64_t result)
{
  *(void *)(v1 + 64) = result;
  return result;
}

uint64_t sub_18AF2318C()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  uint64_t v2 = (void *)v0[37];
  sub_18AF232C4();
  char v3 = (void *)related decl 'e' for CKErrorCode.init(_:)(v2);
  v0[46] = v3;
  id v4 = v3;
  sub_18AF42F68(v3);
  if (v1 == 1)
  {
    uint64_t v5 = (void *)swift_task_alloc();
    v0[47] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_18AF1F6D4;
    sub_18AF30494();
    sub_18AF37AC0();
    return sub_18AF2926C();
  }
  else
  {

    v0[42] = v3;
    uint64_t v8 = swift_task_alloc();
    unint64_t v9 = (void *)sub_18AF1EBF8(v8);
    void *v9 = v10;
    v9[1] = sub_18AF1F1AC;
    sub_18AF1EC9C();
    sub_18AF37AC0();
    return sub_18AF14BC0();
  }
}

id sub_18AF232C4()
{
  *(void *)(v1 + 360) = v0;
  return v0;
}

void sub_18AF23650(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18AF23888()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF16D48();
  return v3();
}

uint64_t sub_18AF23948()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  sub_18AF16D48();
  return v3();
}

uint64_t sub_18AF23A24()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AF23B2C()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AF23C08()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AF23CE4()
{
  sub_18AF2A56C();
  sub_18AF33780();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  uint64_t v3 = sub_18AF33C54();
  return sub_18AF14E70(v3, v4, v5, v6);
}

uint64_t sub_18AF23E1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18AF23E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18AF23E3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18AF23E4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18AF23E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18AF23E6C(uint64_t a1, uint64_t a2)
{
  return sub_18AF40A80(a2 + 32, a1 + 32);
}

uint64_t sub_18AF23E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18AF23E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18AF23E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18AF23EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18AF23EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18AF23ECC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18AF23EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18AF23EEC(uint64_t a1, uint64_t a2)
{
  return sub_18AF40A80(a2 + 32, a1 + 32);
}

uint64_t sub_18AF23EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18AF23F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18AF23F1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18AF23F2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18AF23F3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18AF23F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18AF23F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18AF23F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18AF23F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18AF23F8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18AF23F9C(uint64_t a1, uint64_t a2)
{
  return sub_18AF40A80(a2 + 32, a1 + 32);
}

uint64_t sub_18AF23FC0()
{
  return swift_release();
}

uint64_t sub_18AF23FC8()
{
  return swift_release();
}

uint64_t sub_18AF23FD0()
{
  return swift_release();
}

uint64_t sub_18AF23FD8()
{
  return swift_release();
}

uint64_t sub_18AF23FE0()
{
  return swift_release();
}

uint64_t sub_18AF23FE8(uint64_t a1)
{
  return sub_18AF40A30(a1 + 32);
}

uint64_t sub_18AF23FF0()
{
  return swift_release();
}

uint64_t sub_18AF23FF8()
{
  return swift_release();
}

uint64_t sub_18AF24000()
{
  return swift_release();
}

uint64_t sub_18AF24008()
{
  return swift_release();
}

uint64_t sub_18AF24010()
{
  return swift_release();
}

uint64_t sub_18AF24018()
{
  return swift_release();
}

uint64_t sub_18AF24020()
{
  return swift_release();
}

uint64_t sub_18AF24028(uint64_t a1)
{
  return sub_18AF40A30(a1 + 32);
}

uint64_t sub_18AF24030()
{
  return swift_release();
}

uint64_t sub_18AF24038()
{
  return swift_release();
}

uint64_t sub_18AF24040()
{
  return swift_release();
}

uint64_t sub_18AF24048()
{
  return swift_release();
}

uint64_t sub_18AF24050()
{
  return swift_release();
}

uint64_t sub_18AF24058()
{
  return swift_release();
}

uint64_t sub_18AF24060()
{
  return swift_release();
}

uint64_t sub_18AF24068()
{
  return swift_release();
}

uint64_t sub_18AF24070()
{
  return swift_release();
}

uint64_t sub_18AF24078()
{
  return swift_release();
}

uint64_t sub_18AF24080(uint64_t a1)
{
  return sub_18AF40A30(a1 + 32);
}

void sub_18AF2409C(uint64_t a1, void *a2, void *a3, void *a4)
{
  v40[3] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v7)
  {
    uint64_t v11 = [CKRecordID alloc];
    uint64_t v14 = objc_msgSend_initWithRecordName_(v11, v12, (uint64_t)v7, v13);
    if (v8)
    {
LABEL_3:
      uint64_t v15 = [CKRecordID alloc];
      uint64_t v18 = objc_msgSend_initWithRecordName_(v15, v16, (uint64_t)v8, v17);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v14 = 0;
    if (v8) {
      goto LABEL_3;
    }
  }
  uint64_t v18 = 0;
LABEL_6:
  uint64_t v19 = qword_1EB279A98;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_18AF20CE4;
  block[3] = &unk_1E54614E0;
  block[4] = WeakRetained;
  id v20 = v14;
  id v35 = v20;
  id v21 = v18;
  id v36 = v21;
  dispatch_sync(v19, block);
  if (*(void *)(a1 + 48)) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = v20;
  }
  unint64_t v24 = v22;
  if (!(v9 | v24))
  {
    v39[0] = *MEMORY[0x1E4F28568];
    v39[1] = @"CKErrorDescription";
    v40[0] = @"Failed to obtain the necessary user record ID";
    v40[1] = @"Failed to obtain the necessary user record ID";
    v39[2] = @"CKRetryAfter";
    v40[2] = &unk_1ED846210;
    uint64_t v25 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v23, (uint64_t)v40, (uint64_t)v39, 3);
    uint64_t v9 = objc_msgSend_errorWithDomain_code_userInfo_(CKPrettyError, v26, @"CKErrorDomain", 6, v25);
  }
  if (v9)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v27 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v38 = v9;
      _os_log_error_impl(&dword_18AF10000, v27, OS_LOG_TYPE_ERROR, "Error fetching user record ID: %@", buf, 0xCu);
    }
  }
  else
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v28 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v38 = v24;
      _os_log_debug_impl(&dword_18AF10000, v28, OS_LOG_TYPE_DEBUG, "Fetched user record ID: %@", buf, 0xCu);
    }
  }
  if (CKCurrentProcessLinkChecke0fc00bd437646efa0e6635c2beaaea9())
  {
    uint64_t v32 = objc_msgSend_CKClientSuitableError((void *)v9, v29, v30, v31);

    uint64_t v9 = v32;
  }
  uint64_t v33 = *(void *)(a1 + 32);
  if (v33) {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v33 + 16))(v33, v24, v9);
  }
}

void sub_18AF243F8(uint64_t a1, void *a2, void *a3)
{
}

void sub_18AF246F4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18AF24780(uint64_t a1)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_18AF25BA0;
  aBlock[3] = &unk_1E5461710;
  uint64_t v63 = *(void *)(a1 + 64);
  long long v51 = *(_OWORD *)(a1 + 48);
  id v2 = (id)v51;
  long long v62 = v51;
  uint64_t v3 = *(void **)(a1 + 40);
  aBlock[4] = *(void *)(a1 + 32);
  id v61 = v3;
  uint64_t v4 = _Block_copy(aBlock);
  id v8 = objc_msgSend_setupInfo(*(void **)(a1 + 32), v5, v6, v7);
  uint64_t v12 = objc_msgSend_hashString(v8, v9, v10, v11);
  uint64_t v16 = objc_msgSend_options(*(void **)(a1 + 32), v13, v14, v15);
  int IsDisabled = objc_msgSend_accountInfoCacheIsDisabled(v16, v17, v18, v19);

  if (IsDisabled)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    id v21 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18AF10000, v21, OS_LOG_TYPE_INFO, "Account info cache disabled.", buf, 2u);
    }
    goto LABEL_17;
  }
  uint64_t v25 = sub_18AF24FBC((uint64_t)CKAccountInfo, v12);
  if (!v25)
  {
LABEL_17:
    id v35 = objc_msgSend_accountInfoFetchQueue(*(void **)(a1 + 32), v22, v23, v24, v51);
    dispatch_suspend(v35);

    uint64_t v39 = *(void **)(a1 + 40);
    if (v39)
    {
      uint64_t v40 = objc_msgSend_log(v39, v36, v37, v38);
      uint64_t v44 = objc_msgSend_identifier(*(void **)(a1 + 40), v41, v42, v43);
      if ((unint64_t)(v44 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v45 = v44;
        if (os_signpost_enabled(v40))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_18AF10000, v40, OS_SIGNPOST_EVENT, v45, "accountStatus", "Fetching account info", buf, 2u);
        }
      }
    }
    uint64_t v46 = *(void **)(a1 + 32);
    v58[0] = MEMORY[0x1E4F143A8];
    v58[1] = 3221225472;
    v58[2] = sub_18B03907C;
    v58[3] = &unk_1E5461580;
    id v47 = v4;
    v58[4] = *(void *)(a1 + 32);
    id v59 = v47;
    v52[0] = MEMORY[0x1E4F143A8];
    v52[1] = 3221225472;
    v52[2] = sub_18B0391AC;
    v52[3] = &unk_1E5461760;
    id v48 = *(id *)(a1 + 40);
    uint64_t v49 = *(void *)(a1 + 32);
    id v53 = v48;
    uint64_t v54 = v49;
    char v57 = IsDisabled;
    id v55 = v12;
    id v50 = v47;
    id v56 = v50;
    if (v46)
    {
      sub_18AF3C510(v46, 0, (void *)1, 0, v58, v52);
      id v50 = v56;
    }

    uint64_t v26 = v59;
    goto LABEL_25;
  }
  uint64_t v26 = (void *)v25;
  uint64_t v27 = *(void **)(a1 + 40);
  if (v27)
  {
    uint64_t v28 = objc_msgSend_log(v27, v22, v23, v24);
    uint64_t v32 = objc_msgSend_identifier(*(void **)(a1 + 40), v29, v30, v31);
    if ((unint64_t)(v32 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v33 = v32;
      if (os_signpost_enabled(v28))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_18AF10000, v28, OS_SIGNPOST_EVENT, v33, "accountStatus", "Returning cached account info", buf, 2u);
      }
    }
  }
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v34 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    long long v65 = v26;
    _os_log_debug_impl(&dword_18AF10000, v34, OS_LOG_TYPE_DEBUG, "Found cached account info: %@", buf, 0xCu);
  }
  (*((void (**)(void *, void *, void))v4 + 2))(v4, v26, 0);
LABEL_25:
}

id sub_18AF24CB8(void *a1, const char *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  memset(v18, 0, sizeof(v18));
  uint64_t v3 = objc_msgSend_dataWithBytesNoCopy_length_freeWhenDone_(MEMORY[0x1E4F1C9B8], a2, (uint64_t)v18, 32, 0);
  id v4 = a1;
  id v8 = (const void *)objc_msgSend_bytes(v4, v5, v6, v7);
  CC_LONG v12 = objc_msgSend_length(v4, v9, v10, v11);
  CC_SHA256(v8, v12, (unsigned __int8 *)v18);
  uint64_t v16 = objc_msgSend_CKLowercaseHexStringWithoutSpaces(v3, v13, v14, v15);

  return v16;
}

id sub_18AF24D90(void *a1)
{
  uint64_t v15 = 0;
  id v1 = a1;
  uint64_t v5 = objc_msgSend_bytes(v1, v2, v3, v4);
  unint64_t v9 = objc_msgSend_length(v1, v6, v7, v8);
  uint64_t v10 = CKHexCharFromBytes(v5, v9, &v15, 1);
  id v11 = [NSString alloc];
  uint64_t v13 = objc_msgSend_initWithBytesNoCopy_length_encoding_freeWhenDone_(v11, v12, (uint64_t)v10, v15, 1, 1);

  return v13;
}

void sub_18AF24F98(_Unwind_Exception *exception_object)
{
}

void *sub_18AF24FBC(uint64_t a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  uint64_t v3 = self;
  v37[0] = MEMORY[0x1E4F143A8];
  v37[1] = 3221225472;
  v37[2] = sub_18B002DCC;
  v37[3] = &unk_1E545FFA8;
  v37[4] = v3;
  CKOncePerBoot(@"CKAccountInfoCacheReset", v37);
  self;
  uint64_t v4 = objc_opt_class();
  objc_sync_enter(v4);
  uid_t v5 = geteuid();
  if (v5) {
    BOOL v9 = v5 == 501;
  }
  else {
    BOOL v9 = 1;
  }
  uint64_t v10 = (void *)qword_1EB279A78;
  if (v9 && !qword_1EB279A78)
  {
    id v11 = objc_msgSend_standardUserDefaults(MEMORY[0x1E4F1CB18], v6, v7, v8);
    uint64_t v14 = objc_msgSend_objectForKey_(v11, v12, @"CloudKitAccountInfoCache", v13);
    uint64_t v15 = (void *)qword_1EB279A78;
    qword_1EB279A78 = v14;

    uint64_t v10 = (void *)qword_1EB279A78;
  }
  id v16 = v10;
  objc_sync_exit(v4);

  uint64_t v19 = objc_msgSend_objectForKey_(v16, v17, (uint64_t)v2, v18);

  if (!v19)
  {
    uint64_t v22 = 0;
    objc_msgSend_setIsFromCache_(0, v20, 1, v21);
    goto LABEL_26;
  }
  id v36 = 0;
  uint64_t v22 = objc_msgSend_unarchivedObjectOfClass_fromData_error_(MEMORY[0x1E4F28DC0], v20, (uint64_t)v3, (uint64_t)v19, &v36);
  id v26 = v36;
  if (v26)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v27 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v39 = (uint64_t)v26;
      _os_log_error_impl(&dword_18AF10000, v27, OS_LOG_TYPE_ERROR, "Failed to unarchive account info cache: %@", buf, 0xCu);
    }
  }
  else
  {
    uint64_t valid = objc_msgSend_validAccountInfoValidationCounterValue(v3, v23, v24, v25);
    uint64_t v29 = valid;
    if (v22) {
      uint64_t v30 = v22[2];
    }
    else {
      uint64_t v30 = 0;
    }
    if (valid == v30) {
      goto LABEL_25;
    }
    if (!valid && qword_1EB279A80 != -1) {
      dispatch_once(&qword_1EB279A80, &unk_1ED7EEE18);
    }
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v31 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      if (v22) {
        uint64_t v35 = v22[2];
      }
      else {
        uint64_t v35 = 0;
      }
      *(_DWORD *)buf = 134218240;
      uint64_t v39 = v29;
      __int16 v40 = 2048;
      uint64_t v41 = v35;
      _os_log_debug_impl(&dword_18AF10000, v31, OS_LOG_TYPE_DEBUG, "The cached account info is obsolete, not using it. currentValidationCounter: %zu, cached: %zu", buf, 0x16u);
    }
  }

  uint64_t v22 = 0;
LABEL_25:

  objc_msgSend_setIsFromCache_(v22, v32, 1, v33);
LABEL_26:

  return v22;
}

void sub_18AF25318(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void CKOncePerBoot(void *a1, void *a2)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = a2;
  pthread_mutex_lock(&stru_1EB279660);
  if ((byte_1EB279FB3 & 1) == 0)
  {
    byte_1EB279FB3 = 1;
    id v7 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
    uint64_t v8 = (void *)qword_1EB279FB8;
    qword_1EB279FB8 = (uint64_t)v7;

    CC_LONG v12 = objc_msgSend_standardUserDefaults(MEMORY[0x1E4F1CB18], v9, v10, v11);
    uint64_t v15 = objc_msgSend_integerForKey_(v12, v13, @"CKStartupTime", v14);
    uint64_t v16 = CKBootTime();
    if (v15 == v16)
    {
      uint64_t v19 = objc_msgSend_objectForKey_(v12, v17, @"CKPerBootTasks", v18);
      objc_msgSend_addObjectsFromArray_((void *)qword_1EB279FB8, v20, (uint64_t)v19, v21);

      qword_1EB27A100 = 0;
    }
    else
    {
      uint64_t v22 = v16;
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v23 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
      {
        LOWORD(v63) = 0;
        _os_log_impl(&dword_18AF10000, v23, OS_LOG_TYPE_INFO, "Detected reboot. Resetting once-per-boot tasks.", (uint8_t *)&v63, 2u);
      }

      qword_1EB27A100 = v22;
      if (v22)
      {
        int v24 = 1;
        goto LABEL_11;
      }
    }
  }
  int v24 = 0;
LABEL_11:
  if (objc_msgSend_containsObject_((void *)qword_1EB279FB8, v5, (uint64_t)v3, v6))
  {
    pthread_mutex_unlock(&stru_1EB279660);
    if (!v24) {
      goto LABEL_41;
    }
    goto LABEL_36;
  }
  uint64_t v30 = objc_msgSend_objectForKey_((void *)qword_1EB279FC0, v25, (uint64_t)v3, v26);
  if (!v30)
  {
    uint64_t v39 = (void *)qword_1EB279FC0;
    if (!qword_1EB279FC0)
    {
      id v40 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      uint64_t v41 = (void *)qword_1EB279FC0;
      qword_1EB279FC0 = (uint64_t)v40;

      uint64_t v39 = (void *)qword_1EB279FC0;
    }
    uint64_t v42 = objc_msgSend_currentThread(MEMORY[0x1E4F29060], v31, v32, v33);
    objc_msgSend_setObject_forKey_(v39, v43, (uint64_t)v42, (uint64_t)v3);

    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v44 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      int v63 = 138543362;
      id v64 = v3;
      _os_log_impl(&dword_18AF10000, v44, OS_LOG_TYPE_INFO, "Starting once-per-boot task: %{public}@", (uint8_t *)&v63, 0xCu);
    }
    pthread_mutex_unlock(&stru_1EB279660);
    if (v4) {
      v4[2](v4);
    }
    pthread_mutex_lock(&stru_1EB279660);
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    os_signpost_id_t v45 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
    {
      int v63 = 138543362;
      id v64 = v3;
      _os_log_impl(&dword_18AF10000, v45, OS_LOG_TYPE_INFO, "Completed once-per-boot task: %{public}@", (uint8_t *)&v63, 0xCu);
    }
    objc_msgSend_addObject_((void *)qword_1EB279FB8, v46, (uint64_t)v3, v47);
    pthread_mutex_lock(&stru_1EB2796A0);
    uint64_t v51 = objc_msgSend_allObjects((void *)qword_1EB279FB8, v48, v49, v50);
    long long v52 = (void *)qword_1EB279FC8;
    qword_1EB279FC8 = v51;

    pthread_mutex_unlock(&stru_1EB2796A0);
    uint64_t v58 = objc_msgSend_count((void *)qword_1EB279FC0, v53, v54, v55);
    id v59 = (void *)qword_1EB279FC0;
    if (v58 == 1)
    {
      qword_1EB279FC0 = 0;
    }
    else
    {
      objc_msgSend_removeObjectForKey_((void *)qword_1EB279FC0, v56, (uint64_t)v3, v57);
    }
    pthread_cond_broadcast(&stru_1EB279630);
    pthread_mutex_unlock(&stru_1EB279660);
    goto LABEL_36;
  }
  uint64_t v34 = (void *)v30;
  uint64_t v35 = objc_msgSend_currentThread(MEMORY[0x1E4F29060], v31, v32, v33);

  if (v34 == v35) {
    objc_msgSend_raise_format_(MEMORY[0x1E4F1CA00], v36, *MEMORY[0x1E4F1C3B8], @"Recursive once per boot initialization is not allowed");
  }
  do
    pthread_cond_wait(&stru_1EB279630, &stru_1EB279660);
  while (!objc_msgSend_containsObject_((void *)qword_1EB279FB8, v37, (uint64_t)v3, v38));

  pthread_mutex_unlock(&stru_1EB279660);
  if (v24)
  {
LABEL_36:
    long long v60 = objc_msgSend_standardUserDefaults(MEMORY[0x1E4F1CB18], v27, v28, v29);
    pthread_mutex_lock(&stru_1EB2796A0);
    if (qword_1EB27A100)
    {
      objc_msgSend_setInteger_forKey_(v60, v61, qword_1EB27A100, @"CKStartupTime");
      qword_1EB27A100 = 0;
    }
    if (qword_1EB279FC8)
    {
      objc_msgSend_setObject_forKey_(v60, v61, qword_1EB279FC8, @"CKPerBootTasks");
      long long v62 = (void *)qword_1EB279FC8;
      qword_1EB279FC8 = 0;
    }
    pthread_mutex_unlock(&stru_1EB2796A0);
  }
LABEL_41:
}

void sub_18AF258C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AF25960(_Unwind_Exception *a1)
{
}

void sub_18AF25A18(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uid_t v2 = geteuid();
  if (v2 == 501 || !v2)
  {
    if (__sTestOverridesAvailable) {
      CFStringRef v6 = @"TEST_AccountInfoValidationCounter";
    }
    else {
      CFStringRef v6 = @"AccountInfoValidationCounter";
    }
    CFStringRef v7 = (const __CFString *)objc_msgSend_suiteName(CKUserDefaults, v3, v4, v5);
    CFNumberRef v8 = (const __CFNumber *)CFPreferencesCopyValue(v6, v7, @"mobile", (CFStringRef)*MEMORY[0x1E4F1D3C8]);
    if (v8)
    {
      CFNumberRef v9 = v8;
      CFNumberGetValue(v8, kCFNumberNSIntegerType, &qword_1EB279A48);
      CFRelease(v9);
    }
    else
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      uint64_t v10 = (void *)ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = v10;
        v12[0] = 67109120;
        v12[1] = geteuid();
        _os_log_impl(&dword_18AF10000, v11, OS_LOG_TYPE_INFO, "Could not fetch account info cache validation counter, running as user %u", (uint8_t *)v12, 8u);
      }
    }
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = qword_1EB279A48;
}

void sub_18AF25BA0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  objc_msgSend_lock(*(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v7, v8, v9);
  uint64_t v13 = *(void *)(*(void *)(a1 + 64) + 8);
  if (!*(unsigned char *)(v13 + 40))
  {
    *(unsigned char *)(v13 + 40) = 1;
    objc_msgSend_unlock(*(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v10, v11, v12);
    if (*(void *)(a1 + 48))
    {
      uint64_t v21 = objc_msgSend_fakeDeviceToDeviceEncryptionAvailability(*(void **)(a1 + 32), v18, v19, v20);
      uint64_t v25 = v21;
      if (v21)
      {
        uint64_t v26 = objc_msgSend_integerValue(v21, v22, v23, v24);
        if (ck_log_initialization_predicate != -1) {
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        }
        uint64_t v27 = (void *)ck_log_facility_ck;
        if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
        {
          uint64_t v30 = v27;
          uint64_t v31 = CKStringFromDeviceToDeviceEncryptionStatus(v26);
          int v49 = 138543362;
          id v50 = v31;
          _os_log_impl(&dword_18AF10000, v30, OS_LOG_TYPE_INFO, "Overriding device-to-device encryption availability with a fake one: %{public}@", (uint8_t *)&v49, 0xCu);
        }
        uint64_t v32 = objc_msgSend_copyWithFakeDeviceToDeviceEncryptionAvailability_(v5, v28, v26, v29);

        id v5 = (id)v32;
      }
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
    uint64_t v33 = *(void **)(a1 + 40);
    if (v6)
    {
      if (!v33) {
        goto LABEL_26;
      }
      uint64_t v34 = objc_msgSend_log(v33, v18, v19, v20);
      uint64_t v38 = objc_msgSend_identifier(*(void **)(a1 + 40), v35, v36, v37);
      if ((unint64_t)(v38 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v39 = v38;
        if (os_signpost_enabled(v34))
        {
          int v49 = 138412290;
          id v50 = v6;
          id v40 = "Error: %@";
          uint64_t v41 = v34;
          os_signpost_id_t v42 = v39;
          uint32_t v43 = 12;
LABEL_24:
          _os_signpost_emit_with_name_impl(&dword_18AF10000, v41, OS_SIGNPOST_INTERVAL_END, v42, "accountStatus", v40, (uint8_t *)&v49, v43);
        }
      }
    }
    else
    {
      if (!v33) {
        goto LABEL_26;
      }
      uint64_t v34 = objc_msgSend_log(v33, v18, v19, v20);
      uint64_t v47 = objc_msgSend_identifier(*(void **)(a1 + 40), v44, v45, v46);
      if ((unint64_t)(v47 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v48 = v47;
        if (os_signpost_enabled(v34))
        {
          LOWORD(v49) = 0;
          id v40 = "";
          uint64_t v41 = v34;
          os_signpost_id_t v42 = v48;
          uint32_t v43 = 2;
          goto LABEL_24;
        }
      }
    }

    goto LABEL_26;
  }
  if (ck_log_initialization_predicate != -1) {
    dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
  }
  uint64_t v14 = ck_log_facility_ck;
  if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
  {
    int v49 = 138412546;
    id v50 = v5;
    __int16 v51 = 2112;
    id v52 = v6;
    _os_log_impl(&dword_18AF10000, v14, OS_LOG_TYPE_INFO, "Warn: Completion handler has already been invoked, ignoring this callback. accountInfo: %@, error: %@", (uint8_t *)&v49, 0x16u);
  }
  objc_msgSend_unlock(*(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v15, v16, v17);
LABEL_26:
}

void sub_18AF25EF4(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  CFStringRef v7 = sub_18AF25FCC((void *)(a1 + 32), *(void *)(a1 + 56));
  if (a3)
  {
    id v9 = a3;
    sub_18AF26010((uint64_t)v7, (uint64_t)v9, a4, MEMORY[0x1E4FBCF38]);
  }
  else if (a2)
  {
    id v8 = a2;
    sub_18AF26010((uint64_t)v7, (uint64_t)v8, a4, MEMORY[0x1E4FBCF40]);
  }
  else
  {
    __break(1u);
  }
}

void *sub_18AF25FCC(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_18AF26010(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t *, uint64_t))
{
  uint64_t v7 = a2;
  uint64_t v5 = sub_18AF161EC(a3);
  return a4(&v7, v5);
}

void sub_18AF2606C(uint64_t a1, void *a2, void *a3)
{
}

uint64_t CKBootTime()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t result = qword_1EB279A70;
  if (!qword_1EB279A70)
  {
    v9[0] = 0;
    v9[1] = 0;
    *(void *)uint64_t v11 = 0x1500000001;
    size_t v10 = 16;
    if (sysctl(v11, 2u, v9, &v10, 0, 0))
    {
      if (ck_log_initialization_predicate != -1) {
        goto LABEL_9;
      }
      while (1)
      {
        id v1 = ck_log_facility_ck;
        if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)id v8 = 0;
          _os_log_error_impl(&dword_18AF10000, v1, OS_LOG_TYPE_ERROR, "Failed to fetch system boot time", v8, 2u);
        }
        uint64_t v4 = objc_msgSend_stringWithFormat_(NSString, v2, @"Failed to fetch system boot time", v3);
        objc_msgSend_UTF8String(v4, v5, v6, v7);
        _os_crash();
        __break(1u);
LABEL_9:
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
    }
    uint64_t result = v9[0];
    qword_1EB279A70 = v9[0];
  }
  return result;
}

void sub_18AF261AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (__sTestOverridesAvailable) {
    uint64_t v6 = @"TEST_AccountInfoValidationCounter";
  }
  else {
    uint64_t v6 = @"AccountInfoValidationCounter";
  }
  id v10 = v3;
  uint64_t v8 = objc_msgSend_integerForKey_(v3, v4, (uint64_t)v6, v5);
  if (!v8)
  {
    if (__sTestOverridesAvailable) {
      id v9 = @"TEST_AccountInfoValidationCounter";
    }
    else {
      id v9 = @"AccountInfoValidationCounter";
    }
    uint64_t v8 = 1;
    objc_msgSend_setInteger_forKey_(v10, v7, 1, (uint64_t)v9);
  }
  *(void *)(*(void *)(a1 + 32) + 56) = v8;
}

uint64_t sub_18AF26254()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  sub_18AF26358();
  uint64_t v0 = swift_task_alloc();
  id v1 = (void *)sub_18AF16AE4(v0);
  *id v1 = v2;
  v1[1] = sub_18AF38E00;
  sub_18AF262F8();
  sub_18AF37AC0();
  return sub_18AF1464C(v3, v4, v5, v6);
}

uint64_t sub_18AF262F8()
{
  return v0;
}

uint64_t sub_18AF26314(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  return result;
}

uint64_t sub_18AF26324()
{
  return v0;
}

uint64_t sub_18AF26330()
{
  return v0 + 8;
}

uint64_t sub_18AF26340()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18AF26368()
{
  sub_18AF339B8();
  swift_release();
  sub_18AF16D48();
  return v0();
}

uint64_t sub_18AF263C0()
{
  sub_18AF339B8();
  swift_unknownObjectRelease();
  sub_18AF16D48();
  return v0();
}

uint64_t sub_18AF26418()
{
  sub_18AF339B8();
  swift_unknownObjectRelease();
  sub_18AF16D48();
  return v0();
}

void sub_18AF26470()
{
  sub_18AF26490();
  void *v0 = v1;
}

void sub_18AF26490()
{
}

uint64_t sub_18AF264C4()
{
  sub_18AF339B8();
  *(void *)(v0 + 112) = MEMORY[0x18C12BC20](*(void *)(v0 + 104) + 120);
  swift_release();
  sub_18AF309A4();
  return MEMORY[0x1F4188298](v1, v2, v3);
}

uint64_t sub_18AF26538()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 536) = *(void *)(v3 + 48);
  sub_18AF26744();
  uint64_t v5 = *(void *)(v4 + 440);
  if (v6) {
    uint64_t v7 = sub_18AFE151C;
  }
  else {
    uint64_t v7 = sub_18AF3D45C;
  }
  return MEMORY[0x1F4188298](v7, v5, 0);
}

uint64_t sub_18AF26628()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 560) = *(void *)(v3 + 48);
  sub_18AF26744();
  uint64_t v5 = *(void *)(v4 + 480);
  if (v6) {
    uint64_t v7 = sub_18AF42200;
  }
  else {
    uint64_t v7 = sub_18AFE17FC;
  }
  return MEMORY[0x1F4188298](v7, v5, 0);
}

uint64_t sub_18AF26750()
{
  sub_18AF339B8();
  v1[60] = v0;
  uint64_t v2 = sub_18AF161EC(&qword_1E9125470);
  sub_18AF19284(v2);
  v1[61] = sub_18AF2F1C8();
  uint64_t v3 = sub_18AF161EC(&qword_1E9125198);
  v1[62] = v3;
  sub_18AF16DF8(v3);
  v1[63] = v4;
  v1[64] = sub_18AF2F1C8();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v5, v6, v7);
}

uint64_t sub_18AF26830()
{
  sub_18AF2A56C();
  sub_18AF33DE0();
  sub_18AF16D18();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 96) = v0;
  swift_task_dealloc();
  sub_18AF26B24();
  sub_18AF26B18();
  return MEMORY[0x1F4188298](v4, v5, v6);
}

uint64_t sub_18AF26928()
{
  sub_18AF2A56C();
  sub_18AF33DE0();
  sub_18AF16D18();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 48) = v0;
  swift_task_dealloc();
  sub_18AF26B24();
  sub_18AF26B18();
  return MEMORY[0x1F4188298](v4, v5, v6);
}

uint64_t sub_18AF26A20()
{
  sub_18AF2A56C();
  sub_18AF33DE0();
  sub_18AF16D18();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 160) = v0;
  swift_task_dealloc();
  sub_18AF26B24();
  sub_18AF26B18();
  return MEMORY[0x1F4188298](v4, v5, v6);
}

id sub_18AF26B30(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)MEMORY[0x18C12ADA0]();
  uint64_t v7 = objc_msgSend_CKDescriptionPropertiesWithPublic_private_shouldExpand_(a1, v6, 1, 1, a3);
  if (objc_msgSend_count(v7, v8, v9, v10)) {
    objc_msgSend_CKPropertiesStyleString(v7, v11, v12, v13);
  }
  else {
  uint64_t v17 = objc_msgSend_CKPropertiesDescription(a1, v11, v12, v13);
  }
  if (v17)
  {
    uint64_t v18 = NSString;
    uint64_t v19 = (objc_class *)objc_opt_class();
    uint64_t v20 = NSStringFromClass(v19);
    uint64_t v23 = objc_msgSend_stringWithFormat_(v18, v21, @"<%@: %p %@>", v22, v20, a1, v17);;
  }
  else
  {
    uint64_t v23 = objc_msgSend_description(a1, v14, v15, v16);
  }

  return v23;
}

uint64_t sub_18AF26C34()
{
  return MEMORY[0x1E4F1CC08];
}

id sub_18AF26C40(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)MEMORY[0x1E4F1CA48];
  uint64_t v6 = objc_msgSend_count(a1, a2, a3, a4);
  uint64_t v9 = objc_msgSend_arrayWithCapacity_(v5, v7, v6, v8);
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = sub_18AF1EA08;
  v17[3] = &unk_1E54624F0;
  id v18 = v9;
  id v10 = v9;
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(a1, v11, (uint64_t)v17, v12);
  uint64_t v15 = objc_msgSend_componentsJoinedByString_(v10, v13, @", ", v14);

  return v15;
}

void sub_18AF27054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id *sub_18AF274CC(id *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  if (a1)
  {
    v11.receiver = a1;
    v11.super_class = (Class)CKSQLiteStatement;
    uint64_t v9 = (id *)objc_msgSendSuper2(&v11, sel_init);
    a1 = v9;
    if (v9)
    {
      objc_storeWeak(v9 + 2, v7);
      objc_storeStrong(a1 + 3, a3);
      a1[4] = a4;
      *((unsigned char *)a1 + 8) = 1;
    }
  }

  return a1;
}

void sub_18AF27574(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = *(sqlite3_stmt **)(a1 + 32);
    if (v2)
    {
      int v3 = sqlite3_finalize(v2);
      if (v3)
      {
        int v4 = v3;
        if (ck_log_initialization_predicate != -1) {
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        }
        uint64_t v5 = ck_log_facility_ck;
        if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_FAULT))
        {
          uint64_t v6 = *(void *)(a1 + 24);
          v7[0] = 67109378;
          v7[1] = v4;
          __int16 v8 = 2112;
          uint64_t v9 = v6;
          _os_log_fault_impl(&dword_18AF10000, v5, OS_LOG_TYPE_FAULT, "Error %d finalizing prepared statement: \"%@\"", (uint8_t *)v7, 0x12u);
        }
      }
      *(void *)(a1 + 32) = 0;
    }
  }
}

void sub_18AF27680(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  uint64_t v5 = *(void **)(a1 + 32);
  if (v5) {
    sub_18AF278C4((uint64_t)v3, v5);
  }
  if (sub_18AF27740((uint64_t)v4))
  {
    while (1)
    {
      uint64_t v6 = (void *)MEMORY[0x18C12ADA0]();
      uint64_t v10 = sub_18AF28B24((uint64_t)v4, v7, v8, v9);
      uint64_t v11 = *(void *)(a1 + 40);
      if (v11)
      {
        char v12 = 0;
        (*(void (**)(uint64_t, void *, char *))(v11 + 16))(v11, v10, &v12);
        if (v12) {
          break;
        }
      }

      if (!sub_18AF27740((uint64_t)v4)) {
        goto LABEL_9;
      }
    }
  }
LABEL_9:
}

BOOL sub_18AF27740(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 8)) {
    *(unsigned char *)(a1 + 8) = 0;
  }
  uint64_t v2 = *(sqlite3_stmt **)(a1 + 32);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = sqlite3_step(v2);
  BOOL v6 = v3 == 100;
  if ((v3 & 0xFE) != 0x64) {
    objc_msgSend_invalidate_((void *)a1, v4, @"Failed to step (%d): \"%@\"", v5, v3, *(void *)(a1 + 24));
  }
  return v6;
}

void sub_18AF277C0(uint64_t a1, void *a2, unsigned char *a3)
{
  id v9 = a2;
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16))())
  {
    *a3 = 1;
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = 0;
  }
  else
  {
    objc_msgSend_addObject_(*(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v5, (uint64_t)v9, v6);
  }
}

uint64_t sub_18AF278C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v6 = v3;
  if (a1)
  {
    uint64_t v15 = v3;
    id v3 = (id)objc_msgSend_count(v3, (const char *)v3, v4, v5);
    uint64_t v6 = v15;
    if (v3)
    {
      for (unint64_t i = 0; i < (unint64_t)v3; ++i)
      {
        id v9 = objc_msgSend_objectAtIndexedSubscript_(v6, (const char *)v6, i, v7);
        objc_msgSend_ck_bindInStatement_atIndex_(v9, v10, a1, i);

        id v3 = (id)objc_msgSend_count(v15, v11, v12, v13);
        uint64_t v6 = v15;
      }
    }
  }

  return MEMORY[0x1F41817F8](v3, v6);
}

void *sub_18AF27A7C(void *a1, void *a2)
{
  id v5 = a2;
  if (a1)
  {
    uint64_t v6 = (void *)a1[6];
    if (!v6)
    {
      uint64_t v7 = objc_opt_new();
      uint64_t v8 = (void *)a1[6];
      a1[6] = v7;

      uint64_t v6 = (void *)a1[6];
    }
    objc_msgSend_addObject_(v6, v3, (uint64_t)v5, v4);
    a1 = v5;
  }

  return a1;
}

uint64_t sub_18AF27AF4(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  return objc_msgSend_bindText_atIndex_(a3, a2, a1, a4);
}

void sub_18AF27D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AF27F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_18AF28070(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2)
  {
    if (*(void *)(v3 + 136))
    {
      uint64_t v4 = objc_msgSend__performDatabaseOperation_locked_withErrorHandler_((void *)v3, a2, *(void *)(a1 + 40), *(void *)(a1 + 48));
      uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
      uint64_t v6 = *(void **)(v5 + 40);
      *(void *)(v5 + 40) = v4;

      if (objc_msgSend_invalid(*(void **)(a1 + 32), v7, v8, v9))
      {
        objc_msgSend__forceClosed_locked(*(void **)(a1 + 32), v10, v11, v12);
        uint64_t v16 = objc_msgSend_invalidationHandler(*(void **)(a1 + 32), v13, v14, v15);
        uint64_t v17 = *(void *)(*(void *)(a1 + 64) + 8);
        id v18 = *(void **)(v17 + 40);
        *(void *)(v17 + 40) = v16;

        objc_msgSend_setInvalidationHandler_(*(void **)(a1 + 32), v19, 0, v20);
      }
      uint64_t v21 = *(unsigned char **)(a1 + 32);
      if (v21[64])
      {
        objc_msgSend_markCorrupt(v21, v10, v11, v12);
        uint64_t v21 = *(unsigned char **)(a1 + 32);
      }
      if (v21[65]) {
        objc_msgSend_remove(v21, v10, v11, v12);
      }
    }
    else
    {
      uint64_t v29 = objc_msgSend_errorWithDomain_code_format_(CKPrettyError, a2, @"CKErrorDomain", 1, @"Database is closed");
      uint64_t v30 = *(void *)(*(void *)(a1 + 56) + 8);
      uint64_t v31 = *(void **)(v30 + 40);
      *(void *)(v30 + 40) = v29;
    }
  }
  else
  {
    uint64_t v22 = _Block_copy(*(const void **)(v3 + 24));
    uint64_t v23 = _Block_copy(*(const void **)(a1 + 48));
    uint64_t v24 = *(void *)(a1 + 32);
    uint64_t v25 = *(void **)(v24 + 24);
    *(void *)(v24 + 24) = v23;

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), *(id *)(*(void *)(a1 + 32) + 40));
    uint64_t v26 = _Block_copy(v22);
    uint64_t v27 = *(void *)(a1 + 32);
    uint64_t v28 = *(void **)(v27 + 24);
    *(void *)(v27 + 24) = v26;
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 32) = 0;
  uint64_t v32 = *(void *)(a1 + 32);
  uint64_t v33 = *(void **)(v32 + 40);
  *(void *)(v32 + 40) = 0;
}

void sub_18AF28434(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  uint64_t v9 = a1[7];
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = sub_18AF277C0;
  v14[3] = &unk_1E5462E60;
  uint64_t v11 = a1[8];
  uint64_t v10 = a1[9];
  id v15 = v5;
  uint64_t v16 = v10;
  id v12 = v5;
  objc_msgSend_select_from_where_bindings_orderBy_limit_block_(a2, v13, v6, v7, v8, v9, v11, 0, v14);
}

uint64_t sub_18AF28530(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(unsigned char **)(a1 + 32);
  if (v4[32]) {
    return 1;
  }
  else {
    return objc_msgSend_invalid(v4, a2, a3, a4);
  }
}

uint64_t sub_18AF28548(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(unsigned char **)(a1 + 32);
  if (v4[32]) {
    return 1;
  }
  else {
    return objc_msgSend_invalid(v4, a2, a3, a4);
  }
}

void sub_18AF28560(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = a2;
  sub_18AF278C4((uint64_t)v4, v3);
  sub_18AF27740((uint64_t)v4);
  if (v4) {
    id v5 = (void *)v4[5];
  }
  else {
    id v5 = 0;
  }
  id v6 = v5;

  if (!v6) {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = objc_msgSend_lastInsertRowID(*(void **)(a1 + 40), v7, v8, v9);
  }
}

void sub_18AF285DC(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v21 = a3;
  id v7 = a1;
  unsigned int v14 = *(char *)objc_msgSend_objCType(v7, v8, v9, v10) - 66;
  if (v14 > 0x31) {
    goto LABEL_9;
  }
  if (((1 << v14) & 0x2009200020083) != 0)
  {
    id v15 = (const char *)objc_msgSend_intValue(v7, v11, v12, v13);
    sub_18B140940((uint64_t)v21, v15, a4, v16);
    goto LABEL_6;
  }
  if (((1 << v14) & 0x840400008400) != 0)
  {
    uint64_t v17 = (const char *)objc_msgSend_longLongValue(v7, v11, v12, v13);
    sub_18AF286F4((uint64_t)v21, v17, a4, v18);
  }
  else
  {
LABEL_9:
    uint64_t v19 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v11, v12, v13);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v19, v20, a2, (uint64_t)v7, @"CKSQLiteStatement.m", 51, @"Expected number type to be either integer or floating point");
  }
LABEL_6:
}

uint64_t sub_18AF286F4(uint64_t result, const char *a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    id v6 = (void *)result;
    if (!*(unsigned char *)(result + 8))
    {
      uint64_t v9 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], a2, a3, a4);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v9, v10, (uint64_t)sel_bindInt64_atIndex_, (uint64_t)v6, @"CKSQLiteStatement.m", 211, @"Statement is not reset: \"%@\"", v6[3]);
    }
    uint64_t result = v6[4];
    if (result)
    {
      uint64_t result = sqlite3_bind_int64((sqlite3_stmt *)result, a3 + 1, (sqlite3_int64)a2);
      if (result) {
        return objc_msgSend_invalidate_(v6, v7, @"Error binding int64 at %ld: \"%@\"", v8, a3, v6[3]);
      }
    }
  }
  return result;
}

void sub_18AF28AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

id sub_18AF28B24(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 8))
    {
      uint64_t v46 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], a2, a3, a4);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v46, v47, (uint64_t)sel_columnCount, a1, @"CKSQLiteStatement.m", 281, @"Statement is reset: \"%@\"", *(void *)(a1 + 24));
    }
    id v5 = *(sqlite3_stmt **)(a1 + 32);
    if (v5)
    {
      uint64_t v6 = sqlite3_column_count(v5);
      objc_msgSend_dictionaryWithCapacity_(MEMORY[0x1E4F1CA60], v7, v6, v8);
    }
    else
    {
      uint64_t v6 = 0;
      objc_msgSend_dictionaryWithCapacity_(MEMORY[0x1E4F1CA60], a2, 0, a4);
    uint64_t v12 = };
    if (v6)
    {
      uint64_t v13 = 0;
      uint64_t v14 = *MEMORY[0x1E4F1C3A8];
      do
      {
        if (*(unsigned char *)(a1 + 8))
        {
          id v40 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v9, v10, v11);
          objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v40, v41, (uint64_t)sel_columnNameAtIndex_, a1, @"CKSQLiteStatement.m", 287, @"Statement is reset: \"%@\"", *(void *)(a1 + 24));
        }
        id v15 = *(sqlite3_stmt **)(a1 + 32);
        if (v15)
        {
          uint64_t v16 = NSString;
          uint64_t v17 = sqlite3_column_name(v15, (int)v13);
          uint64_t v20 = objc_msgSend_stringWithUTF8String_(v16, v18, (uint64_t)v17, v19);
          id v21 = *(sqlite3_stmt **)(a1 + 32);
          if (v21)
          {
            uint64_t v22 = sqlite3_column_type(v21, (int)v13);
            uint64_t v26 = 0;
            switch((int)v22)
            {
              case 1:
                uint64_t v27 = NSNumber;
                if (*(unsigned char *)(a1 + 8))
                {
                  int v49 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v23, v24, v25);
                  objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v49, v42, (uint64_t)sel_int64AtIndex_, a1, @"CKSQLiteStatement.m", 299, @"Statement is reset: \"%@\"", *(void *)(a1 + 24));
                }
                uint64_t v28 = *(sqlite3_stmt **)(a1 + 32);
                if (v28)
                {
                  sqlite3_int64 v29 = sqlite3_column_int64(v28, (int)v13);
                  objc_msgSend_numberWithLongLong_(v27, v30, v29, v31);
                }
                else
                {
                  objc_msgSend_numberWithLongLong_(v27, v23, 0, v25);
                uint64_t v35 = };
                goto LABEL_35;
              case 2:
                uint64_t v32 = NSNumber;
                if (*(unsigned char *)(a1 + 8))
                {
                  id v50 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v23, v24, v25);
                  objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v50, v43, (uint64_t)sel_doubleAtIndex_, a1, @"CKSQLiteStatement.m", 305, @"Statement is reset: \"%@\"", *(void *)(a1 + 24));
                }
                uint64_t v33 = *(sqlite3_stmt **)(a1 + 32);
                if (v33) {
                  double v34 = sqlite3_column_double(v33, (int)v13);
                }
                else {
                  double v34 = 0.0;
                }
                uint64_t v35 = objc_msgSend_numberWithDouble_(v32, v23, v24, v25, v34);
                goto LABEL_35;
              case 3:
                uint64_t v35 = sub_18AF28F0C((sqlite3_stmt *)a1, v13, v24, v25);
                goto LABEL_35;
              case 4:
                if (*(unsigned char *)(a1 + 8))
                {
                  uint64_t v44 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v23, v24, v25);
                  objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v44, v45, (uint64_t)sel_blobAtIndex_, a1, @"CKSQLiteStatement.m", 311, @"Statement is reset: \"%@\"", *(void *)(a1 + 24));
                }
                uint64_t v37 = *(sqlite3_stmt **)(a1 + 32);
                if (v37)
                {
                  uint64_t v26 = (void *)sqlite3_column_blob(v37, (int)v13);
                  if (v26)
                  {
                    int v38 = sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 32), (int)v13);
                    uint64_t v35 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v39, (uint64_t)v26, v38);
LABEL_35:
                    uint64_t v26 = (void *)v35;
                  }
                  if (v26) {
                    objc_msgSend_setObject_forKeyedSubscript_(v12, v36, (uint64_t)v26, (uint64_t)v20);
                  }
                }
                else
                {
                  uint64_t v26 = 0;
                }
                break;
              case 5:
                break;
              default:
                objc_msgSend_raise_format_(MEMORY[0x1E4F1CA00], v23, v14, @"Unexpected column type: %d", v22);
                goto LABEL_20;
            }
          }
          else
          {
LABEL_20:
            uint64_t v26 = 0;
          }
        }
        else
        {
          uint64_t v26 = 0;
          uint64_t v20 = 0;
        }

        ++v13;
      }
      while ((const char *)v6 != v13);
    }
  }
  else
  {
    uint64_t v12 = 0;
  }

  return v12;
}

sqlite3_stmt *sub_18AF28F0C(sqlite3_stmt *a1, const char *iCol, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    int v5 = (int)iCol;
    uint64_t v6 = (uint64_t)a1;
    if (*((unsigned char *)a1 + 8))
    {
      uint64_t v10 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], iCol, a3, a4);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v10, v11, (uint64_t)sel_textAtIndex_, v6, @"CKSQLiteStatement.m", 325, @"Statement is reset: \"%@\"", *(void *)(v6 + 24));
    }
    a1 = *(sqlite3_stmt **)(v6 + 32);
    if (a1)
    {
      a1 = (sqlite3_stmt *)sqlite3_column_text(a1, v5);
      if (a1)
      {
        objc_msgSend_stringWithUTF8String_(NSString, v7, (uint64_t)a1, v8);
        a1 = (sqlite3_stmt *)objc_claimAutoreleasedReturnValue();
      }
    }
    uint64_t v4 = vars8;
  }
  return a1;
}

id sub_18AF28FD0(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  int v5 = (void *)MEMORY[0x1E4F1CA60];
  uint64_t v6 = objc_msgSend_count(a1, a2, a3, a4);
  uint64_t v9 = objc_msgSend_dictionaryWithCapacity_(v5, v7, v6, v8);
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  _OWORD v18[2] = sub_18AF156D4;
  v18[3] = &unk_1E5462540;
  id v19 = v9;
  id v10 = v9;
  objc_msgSend_enumerateKeysAndObjectsUsingBlock_(a1, v11, (uint64_t)v18, v12);
  uint64_t v16 = objc_msgSend_copy(v10, v13, v14, v15);

  return v16;
}

void sub_18AF2909C(void *a1, void *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v7 = v3;
  if (a1 && objc_msgSend_count(v3, v4, v5, v6))
  {
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    id v8 = v7;
    uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v27, (uint64_t)v35, 16);
    if (v10)
    {
      uint64_t v14 = v10;
      uint64_t v15 = *(void *)v28;
      do
      {
        for (uint64_t i = 0; i != v14; ++i)
        {
          if (*(void *)v28 != v15) {
            objc_enumerationMutation(v8);
          }
          objc_msgSend_longLongValue(*(void **)(*((void *)&v27 + 1) + 8 * i), v11, v12, v13, (void)v27);
          sandbox_extension_release();
        }
        uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v11, (uint64_t)&v27, (uint64_t)v35, 16);
      }
      while (v14);
    }

    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v17 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = v17;
      uint64_t v22 = objc_msgSend_count(v8, v19, v20, v21);
      uint64_t v26 = objc_msgSend_containerID(a1, v23, v24, v25);
      *(_DWORD *)buf = 134218242;
      uint64_t v32 = v22;
      __int16 v33 = 2112;
      double v34 = v26;
      _os_log_debug_impl(&dword_18AF10000, v18, OS_LOG_TYPE_DEBUG, "Released %lu sandbox extensions for container %@", buf, 0x16u);
    }
  }
}

uint64_t sub_18AF2926C()
{
  sub_18AF2A56C();
  v1[5] = v2;
  v1[6] = v0;
  uint64_t v3 = sub_18AF161EC(&qword_1E9125470);
  sub_18AF19284(v3);
  v1[7] = sub_18AF29400();
  v1[8] = swift_task_alloc();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v4, v5, v6);
}

uint64_t sub_18AF2932C()
{
  sub_18AF339B8();
  v1[12] = v2;
  v1[13] = v0;
  uint64_t v3 = type metadata accessor for Date();
  v1[14] = v3;
  sub_18AF16DF8(v3);
  v1[15] = v4;
  v1[16] = sub_18AF29400();
  v1[17] = swift_task_alloc();
  uint64_t v5 = sub_18AF161EC(&qword_1E9125470);
  sub_18AF19284(v5);
  v1[18] = sub_18AF29400();
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v6, v7, v8);
}

uint64_t sub_18AF29400()
{
  return swift_task_alloc();
}

uint64_t sub_18AF2941C()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AF294E4()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AF295AC()
{
  sub_18AF339B8();
  *(void *)(v1 + 184) = v0;
  sub_18AF40C88(v2, v1 + 16);
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AF29610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_18AF31148();
  sub_18AF338B4();
  sub_18AF31190();
  sub_18AF29A08();
  swift_endAccess();
  swift_release();
  swift_release();
  uint64_t v10 = sub_18AF42884();
  v11(v10);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_18AF384DC();
  sub_18AF311B0();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10);
}

uint64_t sub_18AF296C8()
{
  sub_18AF19FAC();
  sub_18AF29960();
  os_activity_scope_leave(v0);
  swift_unknownObjectRelease();
  sub_18AF29830(v2);
  swift_release();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_18AF2977C()
{
  sub_18AF19FAC();
  sub_18AF29960();
  os_activity_scope_leave(v0);
  swift_unknownObjectRelease();
  sub_18AF29830(v2);
  swift_release();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_18AF29830(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_18AF29880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_18AF299CC();
  sub_18AF1A048();
  sub_18AF31190();
  sub_18AF29A08();
  swift_endAccess();
  swift_release();
  swift_willThrow();
  swift_release();
  uint64_t v12 = sub_18AF29B74();
  v13(v12);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_18AF16D48();
  sub_18AF33974();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12);
}

uint64_t sub_18AF29960()
{
  uint64_t v2 = *(void *)(v0 + 120);
  return sub_18AF29830(v2);
}

void sub_18AF29984()
{
  uint64_t v1 = 0x3D726F72726520;
  unint64_t v2 = 0xE700000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t sub_18AF299AC()
{
  return *(void *)(*(void *)v0 + 16);
}

uint64_t sub_18AF299BC()
{
  return v0 + 8;
}

uint64_t sub_18AF29A08()
{
  uint64_t v1 = v0;
  swift_bridgeObjectRetain();
  sub_18AF37AF0();
  uint64_t v3 = v2;
  char v5 = v4;
  swift_bridgeObjectRelease();
  if ((v5 & 1) == 0) {
    return 0;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v1;
  uint64_t v7 = *v1;
  *uint64_t v1 = 0x8000000000000000;
  Swift::Int v8 = *(void *)(v7 + 24);
  sub_18AF161EC(&qword_1E91251D8);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v8);
  uint64_t v9 = *(void *)(v13 + 48);
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * v3, v10);
  uint64_t v11 = *(void *)(*(void *)(v13 + 56) + 8 * v3);
  sub_18AF161EC((uint64_t *)&unk_1E91251F0);
  sub_18AF38368(&qword_1E91251E0, MEMORY[0x1E4F27990]);
  _NativeDictionary._delete(at:)();
  *uint64_t v1 = v13;
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_18AF29B74()
{
  return v0;
}

uint64_t sub_18AF29B80()
{
  sub_18AF339B8();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  sub_18AF29CD8();
  return sub_18AF1B558();
}

uint64_t sub_18AF29C0C()
{
  sub_18AF2A56C();
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)v0 + *v0);
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_18AF16AE4(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_18AF133A8;
  uint64_t v4 = sub_18AF29CD8();
  return v6(v4);
}

uint64_t sub_18AF29CD8()
{
  return v0;
}

void sub_18AF2A0AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, int a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_18AF29944();
  a24 = v26;
  a25 = v27;
  long long v29 = v28;
  long long v30 = v25;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  id v35 = objc_msgSend(v30, sel_state);
  if (v34)
  {
    unint64_t v36 = swift_bridgeObjectRetain();
    sub_18AF48614(v36, (uint64_t)&a10, (Class *)off_1E545F0C0, (SEL *)&selRef_initWithZone_);
    swift_bridgeObjectRelease();
  }
  sub_18AF34EA0(0, &qword_1E9125230);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v35, *v29, isa);

  id v38 = objc_msgSend(v30, sel_state);
  if (v32)
  {
    unint64_t v39 = swift_bridgeObjectRetain();
    sub_18AF48614(v39, (uint64_t)&a12, (Class *)off_1E545F0B8, (SEL *)&selRef_initWithZoneID_);
    swift_bridgeObjectRelease();
  }
  Class v40 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v38, *v29, v40);

  sub_18AF19EC4();
}

id sub_18AF2A258()
{
  uint64_t v0 = *(void *)(CKSyncEngine.actor.getter() + 128);
  swift_retain();
  swift_release();
  id v1 = *(id *)(v0 + 16);
  swift_release();
  return v1;
}

uint64_t sub_18AF2A2A8()
{
  sub_18AF2A56C();
  *(void *)(v0 + 96) = CKSyncEngine.actor.getter();
  CKSyncEngineSendChangesOptions.optionsStruct()(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  *(void *)(v0 + 104) = v1;
  *(void *)(v0 + 112) = v3;
  *(void *)(v0 + 40) = v1;
  *(unsigned char *)(v0 + 48) = v2;
  *(void *)(v0 + 56) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v4;
  void *v4 = v0;
  v4[1] = sub_18AF20F84;
  return sub_18AF1B670((uint64_t *)(v0 + 40));
}

void CKSyncEngineSendChangesOptions.optionsStruct()(uint64_t a1@<X8>)
{
  char v2 = v1;
  id v4 = objc_msgSend(v1, sel_scope);
  CKSyncEngineSendChangesScope.scopeEnum()((uint64_t)&v7);

  LOBYTE(v6) = v8;
  CKSyncEngine.SendChangesOptions.init(scope:operationGroup:)((uint64_t)&v5, objc_msgSend(v2, sel_operationGroup, v7, v6), a1);
}

void CKSyncEngine.SendChangesOptions.init(scope:operationGroup:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  if (a2)
  {
    swift_bridgeObjectRetain();
    id v7 = a2;
  }
  else
  {
    type metadata accessor for SyncEngine();
    swift_bridgeObjectRetain();
    id v7 = static SyncEngine.defaultOperationGroup()();
  }
  id v8 = v7;
  id v9 = a2;
  sub_18AF35BFC(v8);
  if (v10 && (sub_18AF2A68C() & 1) == 0)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for SyncEngine();
    uint64_t v11 = swift_bridgeObjectRetain();
    sub_18AF37A34(v11, v12, v13, v14, v15, v16, v17, v18, v5);
    sub_18AF362E8();
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_18AF36054(v20, v22, v8);

    swift_bridgeObjectRelease();
  }
  *(void *)a3 = v5;
  *(unsigned char *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v8;
}

uint64_t sub_18AF2A554(uint64_t result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 56) = a5;
  *(void *)(v6 + 64) = a6;
  *(unsigned char *)(v6 + 96) = a4;
  *(void *)(v6 + 40) = a2;
  *(void *)(v6 + 48) = a3;
  *(void *)(v6 + 32) = result;
  return result;
}

double sub_18AF2A578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned __int8 a19, uint64_t a20,unsigned __int8 a21,uint64_t a22)
{
  *(void *)a13 = a19;
  *(void *)(a13 + 8) = a20;
  *(void *)(a13 + 16) = a21;
  *(void *)(a13 + 24) = a22;
  double result = 0.0;
  *(_OWORD *)(a13 + 32) = 0u;
  *(_OWORD *)(a13 + 48) = 0u;
  return result;
}

uint64_t sub_18AF2A5A0()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_18AF2A5F0()
{
  return swift_slowAlloc();
}

uint64_t sub_18AF2A620()
{
  return (*(uint64_t (**)(void, void, void, void))(v0 + 8))(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned __int8 *)(v0 + 40));
}

unint64_t sub_18AF2A644(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

uint64_t sub_18AF2A65C()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_18AF2A68C()
{
  return sub_18AF35EF4();
}

uint64_t sub_18AF2A6C0()
{
  return v0;
}

uint64_t sub_18AF2A6F4()
{
  sub_18AF2A56C();
  *(void *)(v0 + 176) = CKSyncEngine.actor.getter();
  CKSyncEngineFetchChangesOptions.optionsStruct()(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  *(void *)(v0 + 184) = v1;
  *(void *)(v0 + 192) = v3;
  uint64_t v5 = *(void *)(v0 + 48);
  *(void *)(v0 + 200) = v4;
  *(void *)(v0 + 208) = v5;
  char v6 = *(unsigned char *)(v0 + 56);
  uint64_t v7 = *(void *)(v0 + 64);
  char v8 = *(unsigned char *)(v0 + 72);
  *(void *)(v0 + 80) = v1;
  *(unsigned char *)(v0 + 88) = v2;
  *(void *)(v0 + 96) = v3;
  *(void *)(v0 + 104) = v4;
  *(void *)(v0 + 112) = v5;
  *(unsigned char *)(v0 + 120) = v6;
  *(void *)(v0 + 128) = v7;
  *(unsigned char *)(v0 + 136) = v8;
  id v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 216) = v9;
  void *v9 = v0;
  v9[1] = sub_18AF2031C;
  return sub_18AF1B604((_OWORD *)(v0 + 80));
}

id CKSyncEngineFetchChangesOptions.optionsStruct()@<X0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  id v4 = objc_msgSend(v1, sel_scope);
  CKSyncEngineFetchChangesScope.scopeEnum()((uint64_t)&v28);

  uint64_t v26 = v28;
  LOBYTE(v27) = v29;
  id v5 = objc_msgSend(v2, sel_operationGroup);
  CKSyncEngine.FetchChangesOptions.init(scope:operationGroup:)((uint64_t)&v26, (uint64_t)v5, v6, v7, v8, v9, v10, v11, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34,
    v35,
    v36,
    v37);
  id v12 = objc_msgSend(v2, sel_prioritizedZoneIDs);
  sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
  uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v2, sel_zoneConfigurations);
  sub_18AF34EA0(0, &qword_1E9125060);
  sub_18AF34EDC((unint64_t *)&qword_1EB279468, (unint64_t *)&qword_1EB279460);
  uint64_t v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v16 = (void *)Dictionary.init(dictionaryLiteral:)();
  uint64_t v17 = sub_18AF2ADBC(v16, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v18 = objc_msgSend(v2, sel_defaultZoneConfiguration);
  unsigned __int8 v19 = objc_msgSend(v18, sel_shouldFetchAssetContents);
  id v20 = objc_msgSend(v18, sel_resultsLimit);

  id result = objc_msgSend(v2, sel_forceFetchChanges);
  char v22 = v31;
  uint64_t v23 = v32;
  *(void *)a1 = v30;
  *(unsigned char *)(a1 + 8) = v22;
  *(void *)(a1 + 16) = v23;
  *(void *)(a1 + 24) = v13;
  *(void *)(a1 + 32) = v17;
  *(unsigned char *)(a1 + 40) = v19;
  *(void *)(a1 + 48) = v20;
  *(unsigned char *)(a1 + 56) = (_BYTE)result;
  return result;
}

void CKSyncEngine.FetchChangesOptions.init(scope:operationGroup:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_18AF33850();
  a21 = v22;
  a22 = v23;
  char v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = *v28;
  char v30 = *((unsigned char *)v28 + 8);
  sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
  sub_18AF34EDC((unint64_t *)&qword_1EB279468, (unint64_t *)&qword_1EB279460);
  uint64_t v31 = Dictionary.init(dictionaryLiteral:)();
  if (v25)
  {
    id v32 = v25;
  }
  else
  {
    type metadata accessor for SyncEngine();
    id v32 = static SyncEngine.defaultOperationGroup()();
  }
  swift_bridgeObjectRetain();
  id v33 = v32;
  uint64_t v34 = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v35 = v25;
  uint64_t v36 = sub_18AF35BFC(v33);
  uint64_t v38 = v37;
  if (v37 && (sub_18AF2AD8C(), (sub_18AF35EF4() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for SyncEngine();
    a9 = v29;
    a10 = v30;
    swift_bridgeObjectRetain();
    uint64_t v39 = sub_18AF36168((uint64_t)&a9, v36, v38);
    uint64_t v41 = v40;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_18AF36054(v39, v41, v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  *(void *)uint64_t v27 = v29;
  *(unsigned char *)(v27 + 8) = v30;
  *(void *)(v27 + 16) = v33;
  *(void *)(v27 + 24) = v34;
  *(void *)(v27 + 32) = v31;
  *(unsigned char *)(v27 + 40) = 1;
  *(void *)(v27 + 48) = 0;
  *(unsigned char *)(v27 + 56) = 0;
  sub_18AF16CC4();
}

void sub_18AF2AC84()
{
  uint64_t v1 = 0x6C696E203ALL;
  unint64_t v2 = 0xE500000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t _sSo18CKDeviceCapabilityC8CloudKitE20supportsSecureCodingSbvgZ_0()
{
  return 1;
}

uint64_t sub_18AF2ACAC()
{
  *(void *)(v1 + 80) = v0;
  *(unsigned char *)(v1 + 88) = 0;
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AF2ACEC()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_18AF2AD20()
{
  return v0;
}

uint64_t sub_18AF2AD34()
{
  return swift_task_reportUnexpectedExecutor();
}

uint64_t sub_18AF2AD54()
{
  *(void *)(v1 + 32) = v0;
  return sub_18AF161EC(v2);
}

uint64_t sub_18AF2AD74()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t sub_18AF2AD8C()
{
  return 0x6E45636E79534B43;
}

uint64_t sub_18AF2ADBC(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) != 0)
  {
    uint64_t v37 = 0;
    uint64_t v3 = 0;
    int64_t v4 = 0;
    unint64_t v5 = 0;
    unint64_t v6 = __CocoaDictionary.makeIterator()() | 0x8000000000000000;
  }
  else
  {
    sub_18AF1A2F4(a2, v41);
    unint64_t v6 = v41[0];
    uint64_t v37 = v41[1];
    uint64_t v3 = v41[2];
    int64_t v4 = v41[3];
    unint64_t v5 = v41[4];
  }
  swift_bridgeObjectRetain();
  int64_t v36 = (unint64_t)(v3 + 64) >> 6;
  unint64_t v38 = v6;
  if ((v6 & 0x8000000000000000) != 0) {
    goto LABEL_7;
  }
LABEL_5:
  if (v5)
  {
    uint64_t v7 = (v5 - 1) & v5;
    unint64_t v8 = __clz(__rbit64(v5)) | (v4 << 6);
    int64_t v9 = v4;
    goto LABEL_26;
  }
  int64_t v11 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v11 >= v36) {
      goto LABEL_37;
    }
    unint64_t v12 = *(void *)(v37 + 8 * v11);
    int64_t v9 = v4 + 1;
    if (!v12)
    {
      int64_t v9 = v4 + 2;
      if (v4 + 2 >= v36) {
        goto LABEL_37;
      }
      unint64_t v12 = *(void *)(v37 + 8 * v9);
      if (!v12)
      {
        int64_t v9 = v4 + 3;
        if (v4 + 3 >= v36) {
          goto LABEL_37;
        }
        unint64_t v12 = *(void *)(v37 + 8 * v9);
        if (!v12)
        {
          int64_t v9 = v4 + 4;
          if (v4 + 4 >= v36) {
            goto LABEL_37;
          }
          unint64_t v12 = *(void *)(v37 + 8 * v9);
          if (!v12)
          {
            int64_t v9 = v4 + 5;
            if (v4 + 5 >= v36) {
              goto LABEL_37;
            }
            unint64_t v12 = *(void *)(v37 + 8 * v9);
            if (!v12)
            {
              int64_t v13 = v4 + 6;
              while (v13 < v36)
              {
                unint64_t v12 = *(void *)(v37 + 8 * v13++);
                if (v12)
                {
                  int64_t v9 = v13 - 1;
                  goto LABEL_25;
                }
              }
              goto LABEL_37;
            }
          }
        }
      }
    }
LABEL_25:
    uint64_t v7 = (v12 - 1) & v12;
    unint64_t v8 = __clz(__rbit64(v12)) + (v9 << 6);
LABEL_26:
    id v14 = *(void **)(*(void *)(v6 + 56) + 8 * v8);
    id v10 = *(id *)(*(void *)(v6 + 48) + 8 * v8);
    id v40 = v14;
    if (v10)
    {
      while (1)
      {
        unint64_t v39 = v7;
        int64_t v15 = v9;
        id v16 = v10;
        unsigned __int8 v17 = objc_msgSend(v40, sel_shouldFetchAssetContents);
        id v18 = objc_msgSend(v40, sel_resultsLimit);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        os_signpost_id_t v42 = a1;
        sub_18AF7D0BC();
        uint64_t v22 = a1[2];
        BOOL v23 = (v21 & 1) == 0;
        Swift::Int v24 = v22 + v23;
        if (__OFADD__(v22, v23)) {
          break;
        }
        unint64_t v25 = v20;
        char v26 = v21;
        sub_18AF161EC(&qword_1E9125F40);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v24))
        {
          sub_18AF7D0BC();
          if ((v26 & 1) != (v28 & 1)) {
            goto LABEL_41;
          }
          unint64_t v25 = v27;
        }
        a1 = v42;
        if (v26)
        {
          uint64_t v29 = v42[7] + 16 * v25;
          *(unsigned char *)uint64_t v29 = v17;
          *(void *)(v29 + 8) = v18;
        }
        else
        {
          v42[(v25 >> 6) + 8] |= 1 << v25;
          *(void *)(a1[6] + 8 * v25) = v16;
          uint64_t v30 = a1[7] + 16 * v25;
          *(unsigned char *)uint64_t v30 = v17;
          *(void *)(v30 + 8) = v18;
          uint64_t v31 = a1[2];
          BOOL v32 = __OFADD__(v31, 1);
          uint64_t v33 = v31 + 1;
          if (v32) {
            goto LABEL_39;
          }
          a1[2] = v33;
          id v34 = v16;
        }

        swift_bridgeObjectRelease();
        int64_t v4 = v15;
        unint64_t v6 = v38;
        unint64_t v5 = v39;
        if ((v38 & 0x8000000000000000) == 0) {
          goto LABEL_5;
        }
LABEL_7:
        if (__CocoaDictionary.Iterator.next()())
        {
          sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v10 = v42;
          swift_unknownObjectRelease();
          sub_18AF34EA0(0, &qword_1E9125060);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v40 = v42;
          swift_unknownObjectRelease();
          int64_t v9 = v4;
          uint64_t v7 = v5;
          if (v10) {
            continue;
          }
        }
        goto LABEL_37;
      }
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
LABEL_37:
    sub_18AF341D0();
    return (uint64_t)a1;
  }
LABEL_40:
  __break(1u);
LABEL_41:
  sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_18AF2B3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_18AF2B404(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = objc_opt_class();
  if (objc_msgSend_conformsToProtocol_(v7, v8, (uint64_t)&unk_1ED849A28, v9))
  {
    unint64_t v12 = (void *)MEMORY[0x18C12ADA0]();
    id v14 = objc_msgSend_CKObjectDescriptionRedact_avoidShortDescription_(a1, v13, a3, a4);
    id v18 = objc_msgSend_description(v14, v15, v16, v17);
  }
  else
  {
    id v18 = objc_msgSend_stringWithFormat_(NSString, v10, @"<%@: %p>", v11, a1, a1);
  }

  return v18;
}

id sub_18AF2B5FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = [CKObjectDescription alloc];
  uint64_t v9 = objc_msgSend_initWithObject_redact_avoidShortDescription_(v7, v8, a1, a3, a4);

  return v9;
}

uint64_t sub_18AF2B82C()
{
  return 1;
}

NSString *sub_18AF2B834()
{
  uint64_t v0 = (objc_class *)objc_opt_class();

  return NSStringFromClass(v0);
}

uint64_t sub_18AF2C9FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_appendFormat_(*(void **)(a1 + 32), a2, @"%@=%@, ", a4, a2, a3);
}

void *sub_18AF2D364(void *result, void *a2)
{
  if (result)
  {
    uint64_t v2 = sub_18AF2D840(result, a2);
    uint64_t v6 = objc_msgSend_BOOLValue(v2, v3, v4, v5);

    return (void *)v6;
  }
  return result;
}

id sub_18AF2D840(id a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = a2;
    id Property = objc_getProperty(v2, v4, 24, 1);
    objc_msgSend_objectForKeyedSubscript_(Property, v6, (uint64_t)v3, v7);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v2;
}

id sub_18AF2D8A4(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_domain(a1, a2, a3, a4);
  int isEqualToString = objc_msgSend_isEqualToString_(v5, v6, @"CKErrorDomain", v7);

  if (isEqualToString)
  {
    unint64_t v12 = (__CFString *)objc_msgSend_code(a1, v9, v10, v11);
    uint64_t v16 = stringForCKErrorCode(v12, v13, v14, v15);
  }
  else
  {
    uint64_t v17 = objc_msgSend_domain(a1, v9, v10, v11);
    int v20 = objc_msgSend_isEqualToString_(v17, v18, @"CKInternalErrorDomain", v19);

    if (v20)
    {
      uint64_t v24 = objc_msgSend_code(a1, v21, v22, v23);
      uint64_t v16 = stringForCKUnderlyingErrorCode(v24);
    }
    else
    {
      uint64_t v16 = 0;
    }
  }

  return v16;
}

id sub_18AF2D954(void *a1)
{
  uint64_t v148 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v5 = objc_msgSend_domain(v1, v2, v3, v4);
  int isEqualToString = objc_msgSend_isEqualToString_(v5, v6, @"CKInternalErrorDomain", v7);

  if (isEqualToString)
  {
    unint64_t v12 = objc_msgSend_userInfo(v1, v9, v10, v11);
    uint64_t v16 = objc_msgSend_mutableCopy(v12, v13, v14, v15);

    int v20 = objc_msgSend_CKClientSuitableUnderlyingError(v1, v17, v18, v19);
    uint64_t v21 = *MEMORY[0x1E4F28A50];
    objc_msgSend_setObject_forKeyedSubscript_(v16, v22, (uint64_t)v20, *MEMORY[0x1E4F28A50]);
    char v26 = objc_msgSend_userInfo(v20, v23, v24, v25);
    uint64_t v27 = *MEMORY[0x1E4F28568];
    uint64_t v30 = objc_msgSend_objectForKeyedSubscript_(v26, v28, *MEMORY[0x1E4F28568], v29);
    objc_msgSend_setObject_forKeyedSubscript_(v16, v31, (uint64_t)v30, v27);

    id v35 = objc_msgSend_userInfo(v20, v32, v33, v34);
    unint64_t v38 = objc_msgSend_objectForKeyedSubscript_(v35, v36, @"CKErrorDescription", v37);
    objc_msgSend_setObject_forKeyedSubscript_(v16, v39, (uint64_t)v38, @"CKErrorDescription");

    id v40 = NSString;
    uint64_t v44 = objc_msgSend_domain(v20, v41, v42, v43);
    uint64_t v48 = objc_msgSend_code(v20, v45, v46, v47);
    __int16 v51 = objc_msgSend_stringWithFormat_(v40, v49, @"%@: %ld", v50, v44, v48);
    objc_msgSend_setObject_forKeyedSubscript_(v16, v52, (uint64_t)v51, *MEMORY[0x1E4F1D138]);

    id v59 = objc_msgSend_CKClientSuitableErrorSpecificUserInfo(v20, v53, v54, v55);
    if (v59) {
      objc_msgSend_addEntriesFromDictionary_(v16, v56, (uint64_t)v59, v58);
    }
    long long v60 = objc_msgSend_userInfo(v1, v56, v57, v58);
    int v63 = objc_msgSend_objectForKeyedSubscript_(v60, v61, @"CKPartialErrors", v62);

    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v144 = 0x3032000000;
    v145 = sub_18AF142EC;
    v146 = sub_18AF13A04;
    id v147 = 0;
    uint64_t v133 = 0;
    v134 = &v133;
    uint64_t v135 = 0x3032000000;
    v136 = sub_18AF142EC;
    v137 = sub_18AF13A04;
    id v138 = 0;
    if (v63)
    {
      uint64_t v66 = objc_opt_new();
      v129[0] = MEMORY[0x1E4F143A8];
      v129[1] = 3221225472;
      v129[2] = sub_18B192050;
      v129[3] = &unk_1E5465F38;
      p_long long buf = &buf;
      v132 = &v133;
      id v67 = v66;
      id v130 = v67;
      objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v63, v68, (uint64_t)v129, v69);
      objc_msgSend_setObject_forKeyedSubscript_(v16, v70, (uint64_t)v67, @"CKPartialErrors");

      uint64_t v71 = *(void *)(*((void *)&buf + 1) + 40);
      if (v71) {
        objc_msgSend_setObject_forKeyedSubscript_(v16, v64, v71, @"RequestUUID");
      }
    }
    uint64_t v72 = v134[5];
    if (v72) {
      objc_msgSend_setObject_forKeyedSubscript_(v16, v64, v72, @"ContainerID");
    }
    long long v73 = objc_msgSend_objectForKeyedSubscript_(v16, v64, v21, v65);
    uint64_t v77 = objc_msgSend_code(v73, v74, v75, v76);
    uint64_t v81 = CKErrorCodeForUnderlyingErrorCode(v77, v78, v79, v80);

    id v82 = [CKPrettyError alloc];
    uint64_t v84 = objc_msgSend_initWithDomain_code_userInfo_(v82, v83, @"CKErrorDomain", v81, v16);

    _Block_object_dispose(&v133, 8);
    _Block_object_dispose(&buf, 8);
  }
  else
  {
    id v88 = objc_msgSend_domain(v1, v9, v10, v11);
    int v91 = objc_msgSend_isEqualToString_(v88, v89, *MEMORY[0x1E4F289A0], v90);

    if (v91)
    {
      uint64_t v95 = objc_msgSend_code(v1, v92, v93, v94);
      uint64_t v96 = CKErrorCodeForNSURLErrorCode(v95);
      v97 = objc_opt_new();
      uint64_t v98 = NSString;
      v102 = objc_msgSend_domain(v1, v99, v100, v101);
      uint64_t v106 = objc_msgSend_code(v1, v103, v104, v105);
      uint64_t v109 = objc_msgSend_stringWithFormat_(v98, v107, @"%@: %ld", v108, v102, v106);
      objc_msgSend_setObject_forKeyedSubscript_(v97, v110, (uint64_t)v109, *MEMORY[0x1E4F1D138]);

      objc_msgSend_setObject_forKeyedSubscript_(v97, v111, (uint64_t)v1, *MEMORY[0x1E4F28A50]);
      v112 = [CKPrettyError alloc];
      uint64_t v84 = objc_msgSend_initWithDomain_code_userInfo_(v112, v113, @"CKErrorDomain", v96, v97);
    }
    else
    {
      uint64_t v84 = v1;
      if (objc_msgSend_CKIsXPCConnectionError(v1, v92, v93, v94))
      {
        uint64_t v114 = *MEMORY[0x1E4F28568];
        v141[0] = *MEMORY[0x1E4F28A50];
        v141[1] = v114;
        v142[0] = v1;
        v142[1] = @"Error connecting to CloudKit daemon. This could happen for many reasons, for example a daemon exit, a device reboot, a race with the connection inactivity monitor, invalid entitlements, and more. Check the logs around this time to investigate the cause of this error.";
        v141[2] = @"CKErrorDescription";
        v141[3] = @"CKRetryAfter";
        v142[2] = @"Error connecting to CloudKit daemon. This could happen for many reasons, for example a daemon exit, a device reboot, a race with the connection inactivity monitor, invalid entitlements, and more. Check the logs around this time to investigate the cause of this error.";
        v142[3] = &unk_1ED846990;
        uint64_t v115 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v85, (uint64_t)v142, (uint64_t)v141, 4);
        uint64_t v116 = [CKPrettyError alloc];
        uint64_t v84 = objc_msgSend_initWithDomain_code_userInfo_(v116, v117, @"CKErrorDomain", 6, v115);
      }
    }
  }
  uint64_t v118 = objc_msgSend_domain(v84, v85, v86, v87);
  char isEqual = objc_msgSend_isEqual_(v118, v119, @"CKErrorDomain", v120);

  if ((isEqual & 1) == 0)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    v122 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v1;
      _os_log_fault_impl(&dword_18AF10000, v122, OS_LOG_TYPE_FAULT, "Could not convert error to a proper CloudKit error. Defaulting to internal error for %@", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v139 = *MEMORY[0x1E4F28A50];
    id v140 = v1;
    uint64_t v124 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v123, (uint64_t)&v140, (uint64_t)&v139, 1);
    uint64_t v125 = [CKPrettyError alloc];
    uint64_t v127 = objc_msgSend_initWithDomain_code_userInfo_(v125, v126, @"CKErrorDomain", 1, v124);

    uint64_t v84 = (void *)v127;
  }

  return v84;
}

void sub_18AF2DFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Unwind_Resume(a1);
}

BOOL sub_18AF2E014(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_domain(a1, a2, a3, a4);
  int isEqualToString = objc_msgSend_isEqualToString_(v5, v6, *MEMORY[0x1E4F281F8], v7);

  return isEqualToString && ((objc_msgSend_code(a1, v9, v10, v11) - 4097) & 0xFFFFFFFFFFFFFFFDLL) == 0;
}

id sub_18AF2E43C(void *a1)
{
  if (a1)
  {
    a1 = sub_18AF2D840(a1, @"application-identifier");
    uint64_t v1 = vars8;
  }
  return a1;
}

BOOL sub_18AF2E5CC(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = sub_18AF2D840(a1, @"aps-connection-initiate");
  BOOL v2 = v1 != 0;

  return v2;
}

void sub_18AF2E994(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id CKAppIdentifierFromTeamAppTuple(void *a1, void *a2)
{
  id v3 = a1;
  id v6 = a2;
  if (qword_1EB27A040 != -1) {
    dispatch_once(&qword_1EB27A040, &unk_1ED7EC288);
  }
  if (objc_msgSend_hasPrefix_(v3, v4, @"com.apple.", v5))
  {
    id v10 = v3;
    goto LABEL_11;
  }
  uint64_t v11 = (void *)qword_1EB27A038;
  uint64_t v12 = objc_msgSend_length(v3, v7, v8, v9);
  uint64_t v14 = objc_msgSend_matchesInString_options_range_(v11, v13, (uint64_t)v3, 4, 0, v12);
  if (objc_msgSend_count(v14, v15, v16, v17) != 1) {
    goto LABEL_9;
  }
  int v20 = objc_msgSend_objectAtIndex_(v14, v18, 0, v19);
  if (objc_msgSend_numberOfRanges(v20, v21, v22, v23) != 2)
  {

LABEL_9:
    CKWarnForInvalidApplicationIdentifier(v3, v6);
    id v10 = 0;
    goto LABEL_10;
  }
  uint64_t v26 = objc_msgSend_rangeAtIndex_(v20, v24, 1, v25);
  objc_msgSend_substringWithRange_(v3, v27, v26, (uint64_t)v27);
  id v10 = (id)objc_claimAutoreleasedReturnValue();

LABEL_10:
LABEL_11:

  return v10;
}

uint64_t sub_18AF2EAF4()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  uint64_t v2 = *(void *)(v0 + 352);
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 83);
  uint64_t v5 = *(void **)(v0 + 336);
  uint64_t v4 = *(void *)(v0 + 344);
  uint64_t v6 = *(unsigned __int8 *)(v0 + 82);
  uint64_t v7 = *(void *)(v0 + 328);
  char v8 = *(unsigned char *)(v0 + 84) | 0x90;
  *(void *)(v0 + 88) = *(unsigned __int8 *)(v0 + 81);
  *(void *)(v0 + 96) = v7;
  *(void *)(v0 + 104) = v6;
  *(void *)(v0 + 112) = v5;
  *(void *)(v0 + 120) = v4;
  *(void *)(v0 + 128) = v2;
  *(void *)(v0 + 136) = v3;
  *(void *)(v0 + 144) = v1;
  *(unsigned char *)(v0 + 152) = v8;
  swift_bridgeObjectRetain();
  id v9 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 496) = v10;
  *id v10 = v0;
  v10[1] = sub_18AF1F288;
  sub_18AF2EFEC();
  sub_18AF37AC0();
  return sub_18AF295AC();
}

uint64_t sub_18AF2EBE4()
{
  sub_18AF2A56C();
  uint64_t v1 = *(unsigned __int8 *)(v0 + 82);
  uint64_t v2 = *(void *)(v0 + 256);
  uint64_t v3 = *(void **)(v0 + 264);
  *(void *)(v0 + 88) = *(unsigned __int8 *)(v0 + 81);
  *(void *)(v0 + 96) = v2;
  *(void *)(v0 + 104) = v1;
  *(void *)(v0 + 112) = v3;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  *(unsigned char *)(v0 + 152) = -80;
  swift_bridgeObjectRetain();
  id v4 = v3;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 352) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_18AF1F5F8;
  sub_18AF2EFEC();
  return sub_18AF295AC();
}

uint64_t sub_18AF2ECB4()
{
  uint64_t v30 = v0;
  if (qword_1E91252D0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 264);
  uint64_t v2 = type metadata accessor for Logger();
  *(void *)(v0 + 272) = sub_18AF412A0(v2, (uint64_t)qword_1E91253B0);
  swift_bridgeObjectRetain_n();
  id v3 = v1;
  sub_18AF3098C();
  id v4 = v3;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (sub_18AF42D04(v6))
  {
    uint64_t v7 = sub_18AF402C8();
    uint64_t v25 = sub_18AF182D8();
    *(_DWORD *)uint64_t v7 = 136315394;
    if ((sub_18AF33AE8() & 1) == 0)
    {
      sub_18AF30C68();
      swift_task_reportUnexpectedExecutor();
    }
    uint64_t v8 = *(void *)(v0 + 256);
    id v9 = *(void **)(v0 + 264);
    char v23 = *(unsigned char *)(v0 + 81);
    char v24 = *(unsigned char *)(v0 + 82);
    swift_retain();
    uint64_t v10 = sub_18AF40CEC();
    unint64_t v12 = v11;
    swift_release();
    *(void *)(v0 + 232) = sub_18AF4095C(v10, v12, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_18AF38FA4();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    char v26 = v23;
    uint64_t v27 = v8;
    char v28 = v24;
    uint64_t v29 = v9;
    unint64_t v13 = CKSyncEngine.SendChangesContext.description.getter();
    *(void *)(v0 + 240) = sub_18AF4095C(v13, v14, &v25);
    sub_18AF3F48C();

    sub_18AF3F474();
    swift_bridgeObjectRelease();
    sub_18AF2F014(&dword_18AF10000, v5, v6, "%s sending changes with context: %s");
    sub_18AF41310();
    sub_18AF388F8();
    sub_18AF388F8();
  }
  else
  {
    uint64_t v15 = *(void **)(v0 + 264);

    sub_18AF3F474();
    sub_18AF38FA4();
  }
  static Task<>.checkCancellation()();
  uint64_t v16 = *(unsigned __int8 *)(v0 + 82);
  uint64_t v17 = *(void *)(v0 + 256);
  uint64_t v18 = *(void **)(v0 + 264);
  *(void *)(v0 + 16) = *(unsigned __int8 *)(v0 + 81);
  *(void *)(v0 + 24) = v17;
  *(void *)(v0 + 32) = v16;
  *(void *)(v0 + 40) = v18;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(unsigned char *)(v0 + 80) = -96;
  swift_bridgeObjectRetain();
  id v19 = v18;
  int v20 = (void *)swift_task_alloc();
  *(void *)(v0 + 280) = v20;
  *int v20 = v0;
  v20[1] = sub_18AF1F364;
  sub_18AF2EFEC();
  sub_18AF2EFF8();
  return sub_18AF295AC();
}

uint64_t sub_18AF2EFEC()
{
  return v0;
}

void sub_18AF2F014(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0x16u);
}

uint64_t sub_18AF2F02C()
{
  sub_18AF339B8();
  v1[12] = v2;
  v1[13] = v0;
  v1[11] = v3;
  uint64_t v4 = type metadata accessor for UUID();
  v1[14] = v4;
  sub_18AF16DF8(v4);
  v1[15] = v5;
  v1[16] = sub_18AF2F1C8();
  uint64_t v6 = sub_18AF161EC(&qword_1E9125478);
  sub_18AF19284(v6);
  v1[17] = sub_18AF2F1C8();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AF2F0E0()
{
  sub_18AF339B8();
  v1[55] = v0;
  uint64_t v2 = sub_18AF161EC(&qword_1E9125470);
  sub_18AF19284(v2);
  v1[56] = sub_18AF2F1C8();
  uint64_t v3 = sub_18AF161EC(&qword_1E91251A0);
  v1[57] = v3;
  sub_18AF16DF8(v3);
  v1[58] = v4;
  v1[59] = sub_18AF2F1C8();
  uint64_t v5 = sub_18AF161EC(&qword_1E91251B8);
  v1[60] = v5;
  sub_18AF16DF8(v5);
  v1[61] = v6;
  v1[62] = sub_18AF2F1C8();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AF2F1C8()
{
  return swift_task_alloc();
}

uint64_t sub_18AF2F1E0()
{
  sub_18AF2A56C();
  uint64_t v1 = *(void **)(*(void *)(v0 + 48) + 304);
  if (v1) {
    id v2 = objc_msgSend(v1, sel_accountStatus);
  }
  else {
    id v2 = 0;
  }
  if (objc_msgSend(self, sel_errorForAccountStatus_, v2)) {
    swift_willThrow();
  }
  sub_18AF16D48();
  return v3();
}

uint64_t sub_18AF2F5F0()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  void *v6 = v5;
  *(void *)(v3 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 88);
    uint64_t v8 = sub_18AFFBA3C;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 88);
    swift_task_dealloc();
    uint64_t v8 = sub_18AF154CC;
    uint64_t v7 = v9;
  }
  return MEMORY[0x1F4188298](v8, v7, 0);
}

uint64_t sub_18AF2F6E0()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_18AF309A4();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AF2F7D8()
{
  sub_18AF2FCD0();
  sub_18AF19FAC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  sub_18AF35530();
  sub_18AF2FCE4();
  return sub_18AF14B6C(v3, v4, v5, v6, v7, v8);
}

uint64_t sub_18AF2F880()
{
  sub_18AF2FCD0();
  sub_18AF19FAC();
  uint64_t v2 = *v1;
  sub_18AF16CB4();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  *uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {

    uint64_t v5 = sub_18AF311F8();
    v6(v5);
    sub_18AF309A4();
    sub_18AF2FCE4();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    uint64_t v11 = sub_18AF311F8();
    v12(v11);
    unint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v2 + 56) = v13;
    *unint64_t v13 = v4;
    v13[1] = sub_18AF23948;
    sub_18AF2FCE4();
    return sub_18AF14BC0();
  }
}

uint64_t sub_18AF2FA3C()
{
  sub_18AF2FCD0();
  sub_18AF19FAC();
  uint64_t v1 = *(void *)(v0 + 168);
  sub_18AF2FD00(0);
  uint64_t v2 = *(void **)(*(void *)(v1 + 128) + 16);
  if (*(void *)(v1 + 320) >= (uint64_t)objc_msgSend(v2, sel_changeCount)) {
    goto LABEL_10;
  }
  *(_OWORD *)(v0 + 136) = xmmword_18B1F0420;
  *(void *)(v0 + 152) = 0;
  *(unsigned char *)(v0 + 160) = 1;
  uint64_t v3 = swift_allocObject();
  *(void *)(v0 + 176) = v3;
  *(void *)(v3 + 16) = v0 + 136;
  *(void *)(v3 + 24) = v0 + 152;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = sub_18AFFA348;
  *(void *)(v4 + 24) = v3;
  *(void *)(v0 + 120) = sub_18AFFA354;
  *(void *)(v0 + 128) = v4;
  *(void *)(v0 + 88) = MEMORY[0x1E4F143A8];
  *(void *)(v0 + 96) = 1107296256;
  *(void *)(v0 + 104) = sub_18AFE2824;
  *(void *)(v0 + 112) = &unk_1ED7F5028;
  uint64_t v5 = _Block_copy((const void *)(v0 + 88));
  swift_retain();
  swift_release();
  objc_msgSend(v2, sel_getDataRepresentation_, v5);
  _Block_release(v5);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (*(unsigned char *)(v0 + 160))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v8 = *(void *)(v0 + 152);
  if (*(void *)(v1 + 320) < v8)
  {
    *(void *)(v1 + 320) = v8;
    uint64_t result = *(void *)(v0 + 136);
    unint64_t v9 = *(void *)(v0 + 144);
    *(void *)(v0 + 184) = result;
    *(void *)(v0 + 192) = v9;
    if (v9 >> 60 != 15)
    {
      *(void *)(v0 + 16) = result;
      *(void *)(v0 + 24) = v9;
      *(_OWORD *)(v0 + 32) = 0u;
      *(_OWORD *)(v0 + 48) = 0u;
      *(_OWORD *)(v0 + 64) = 0u;
      *(unsigned char *)(v0 + 80) = 0;
      sub_18AF5F6FC(result, v9);
      uint64_t v10 = (void *)swift_task_alloc();
      *(void *)(v0 + 200) = v10;
      *uint64_t v10 = v0;
      v10[1] = sub_18AFE2660;
      sub_18AF30494();
      sub_18AF2FCE4();
      return sub_18AF295AC();
    }
LABEL_15:
    __break(1u);
    return result;
  }
  sub_18AF5B00C(*(void *)(v0 + 136), *(void *)(v0 + 144));
  swift_release();
LABEL_10:
  sub_18AF16D48();
  sub_18AF2FCE4();
  return v13(v12, v13, v14, v15, v16, v17, v18, v19);
}

uint64_t sub_18AF2FCF8()
{
  return swift_release();
}

uint64_t sub_18AF2FD00(uint64_t a1)
{
  *(void *)(v1 + 312) = a1;
  return sub_18AF2FCF8();
}

void sub_18AF2FDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18AF2FDF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_18AF30750();
  a21 = v24;
  a22 = v25;
  sub_18AF18F44();
  a20 = v22;
  if (qword_1E91252D0 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  sub_18AF41270(v26, (uint64_t)qword_1E91253B0);
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (sub_18AF2FF8C(v28))
  {
    sub_18AF2A5F0();
    sub_18AF16B9C();
    sub_18AFFC4CC();
    sub_18AFFCF58(4.8149e-34);
    sub_18AF40CEC();
    uint64_t v29 = sub_18AF1FFE8();
    uint64_t v31 = sub_18AF476A0(v29, v30, &a11);
    sub_18AFFC730(v31, (void *)(v22 + 16));
    swift_bridgeObjectRelease();
    sub_18AF38FA4();
    sub_18AFFBB1C(&dword_18AF10000, v27, v23, "%s calling Swift changeHandler");
    sub_18AF351C4();
    sub_18AF388F8();
    sub_18AF388F8();
  }
  else
  {
    sub_18AF38FA4();
  }

  BOOL v32 = (void *)swift_task_alloc();
  *(void *)(v22 + 32) = v32;
  void *v32 = v22;
  v32[1] = sub_18AF23888;
  sub_18AF2ACD0();
  return sub_18AF14C68(v33, v34);
}

BOOL sub_18AF2FF8C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

#error "18AF30088: call analysis failed (funcsize=140)"

uint64_t sub_18AF30200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_18AF30750();
  sub_18AF18F44();
  if (v14[15])
  {
    uint64_t v16 = v14[16];
    uint64_t v17 = v14[12];
    swift_getObjectType();
    sub_18AF40C88(v17, (uint64_t)(v14 + 2));
    uint64_t v43 = *(void *)(v16 + 8) + **(int **)(v16 + 8);
    swift_unknownObjectRetain();
    uint64_t v18 = swift_task_alloc();
    uint64_t v19 = (void *)sub_18AF304A0(v18);
    void *v19 = v20;
    v19[1] = sub_18AF2941C;
    sub_18AF30494();
    sub_18AF2ACD0();
    return v26(v21, v22, v23, v24, v25, v26, v27, v28, v43, v16 + 8, a11, a12, a13, a14);
  }
  else
  {
    if (qword_1E91252D0 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_18AF41270(v30, (uint64_t)qword_1E91253B0);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.info.getter();
    if (sub_18AFFBD40(v32))
    {
      a10 = v14 + 11;
      sub_18AF2A5F0();
      sub_18AF16B9C();
      sub_18AFFC120();
      sub_18AFFC6B4(4.8149e-34);
      sub_18AF40CEC();
      uint64_t v33 = sub_18AF404A0();
      v14[11] = sub_18AFFC278(v33, v34);
      sub_18AFFC438();
      swift_bridgeObjectRelease();
      sub_18AF38FA4();
      sub_18AFFBB50(&dword_18AF10000, v31, v15, "%s trying to post event, but the delegate may have been deallocated");
      sub_18AF19F48();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {
      sub_18AF38FA4();
    }

    sub_18AF16D48();
    sub_18AF2ACD0();
    return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12, a13, a14);
  }
}

uint64_t sub_18AF30464()
{
  return swift_release();
}

uint64_t sub_18AF30488()
{
  return v0;
}

uint64_t sub_18AF30494()
{
  return v0;
}

uint64_t sub_18AF304A0(uint64_t result)
{
  *(void *)(v1 + 136) = result;
  return result;
}

uint64_t sub_18AF304AC()
{
  sub_18AF2A56C();
  sub_18AF306D0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  uint64_t v3 = sub_18AF307FC();
  return v4(v3);
}

uint64_t sub_18AF30548()
{
  sub_18AF2A56C();
  sub_18AF306D0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  uint64_t v3 = sub_18AF307FC();
  return sub_18AF14514(v3, v4);
}

void sub_18AF305D8()
{
  sub_18AF5B1A8();
}

uint64_t sub_18AF30608()
{
  return swift_arrayInitWithCopy();
}

uint64_t sub_18AF3063C()
{
  return v0;
}

uint64_t sub_18AF30660()
{
  return v0;
}

uint64_t sub_18AF30678()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

uint64_t sub_18AF30694(void *a1)
{
  a1[2] = v3;
  a1[3] = v2;
  a1[4] = v1;
  return swift_retain();
}

void sub_18AF306EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v14 = v11;
  uint64_t v15 = v12;
  String.append(_:)(*(Swift::String *)&v14);
}

void sub_18AF30708(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_18AF30738()
{
  return type metadata accessor for SyncEngine();
}

uint64_t sub_18AF30784()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AF307A4()
{
  return swift_bridgeObjectRelease_n();
}

unint64_t sub_18AF307BC(uint64_t a1)
{
  unint64_t result = a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
  sub_18AF744A8();
  return result;
}

uint64_t sub_18AF307DC()
{
  return 0x726F63657220;
}

uint64_t sub_18AF307FC()
{
  return v0;
}

uint64_t sub_18AF30810()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  void *v6 = v5;
  *(void *)(v3 + 160) = v0;
  swift_task_dealloc();
  sub_18AF30A00();
  swift_task_dealloc();
  sub_18AF309A4();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AF30900()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18AF3091C()
{
  return v0;
}

uint64_t sub_18AF3096C()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_18AF3098C()
{
  return swift_retain_n();
}

uint64_t sub_18AF309B0(uint64_t result, int a2)
{
  *(void *)(result + 24) = (a2 - 1);
  return result;
}

uint64_t sub_18AF309BC()
{
  return v0;
}

uint64_t sub_18AF30A00()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18AF30A1C()
{
  sub_18AF31148();
  sub_18AF338B4();
  sub_18AF38D80();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF14648;
  sub_18AF30B8C();
  sub_18AF311B0();
  return sub_18AF153B0(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_18AF30AAC()
{
  sub_18AF31148();
  sub_18AF338B4();
  sub_18AF38D80();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF14648;
  sub_18AF30B8C();
  sub_18AF311B0();
  return sub_18AF1B518(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_18AF30B4C()
{
  return sub_18AF1E758(v0);
}

uint64_t sub_18AF30B64(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F40E6C80](a1, a2, 0, 0, 0, 1, v2, v2);
}

uint64_t sub_18AF30B8C()
{
  return v0;
}

uint64_t sub_18AF30BB0()
{
  return 0;
}

unint64_t sub_18AF30BC0()
{
  return sub_18AF7CF60(v1, v0);
}

uint64_t sub_18AF30C0C()
{
  return v0 + 32;
}

uint64_t _s8CloudKit12CKSyncEngineC19FetchChangesOptionsV5scopeAE5ScopeOvg_0@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AF30C40()
{
  *(void *)(v1 + 16) = v0;
  *(unsigned char *)(v1 + 24) = 1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AF30C74(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a1) {
    return a10;
  }
  else {
    return 0;
  }
}

uint64_t sub_18AF30C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_18AF30E30();
  sub_18AF1A048();
  uint64_t v13 = v12[10];
  uint64_t v14 = v12[8];
  uint64_t v15 = v12[9];
  type metadata accessor for ContinuousClock();
  sub_18AF38368(&qword_1E9125218, MEMORY[0x1E4FBD1A8]);
  sub_18AF31160();
  dispatch thunk of Clock.now.getter();
  sub_18AF38368(&qword_1E91251C0, MEMORY[0x1E4FBD178]);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v12[12] = v16;
  v12[13] = (v15 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v16(v13, v14);
  uint64_t v17 = (void *)swift_task_alloc();
  v12[14] = v17;
  *uint64_t v17 = v12;
  v17[1] = sub_18AF30E64;
  sub_18AF41784(v12[11]);
  sub_18AF37A90();
  return MEMORY[0x1F4188178](v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12);
}

uint64_t sub_18AF30E00()
{
  return v0;
}

uint64_t sub_18AF30E10(uint64_t result)
{
  *(unsigned char *)(result + 32) = 1;
  return result;
}

uint64_t sub_18AF30E1C()
{
  return v0;
}

uint64_t sub_18AF30E4C(uint64_t result)
{
  *(void *)(v1 + 16) = 167;
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t sub_18AF30E64()
{
  sub_18AF2FCD0();
  sub_18AF19FAC();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v6 = *(void (**)(uint64_t))(v5 + 96);
  uint64_t v7 = *v1;
  sub_18AF16CB4();
  *uint64_t v8 = v7;
  *(void *)(v3 + 120) = v0;
  swift_task_dealloc();
  uint64_t v9 = sub_18AF31160();
  v6(v9);
  if (v0)
  {
    sub_18AF16AA0();
    sub_18AF2FCE4();
    return MEMORY[0x1F4188298](v10, v11, v12);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    sub_18AF384DC();
    sub_18AF2FCE4();
    return v15(v14, v15, v16, v17, v18, v19, v20, v21);
  }
}

uint64_t sub_18AF30FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_18AF31148();
  sub_18AF338B4();
  uint64_t v11 = v10[16];
  uint64_t v12 = v10[17];
  uint64_t v13 = v10[12];
  uint64_t v14 = v10[11];
  uint64_t v15 = type metadata accessor for TaskPriority();
  sub_18AF1826C(v12, v16, v17, v15);
  uint64_t v18 = (void *)sub_18AF31268();
  _OWORD v18[2] = 0;
  v18[3] = 0;
  void v18[4] = v14;
  v18[5] = v13;
  swift_retain();
  sub_18AF3131C(v12, (uint64_t)&unk_1E91270E0, (uint64_t)v18);
  v10[18] = v19;
  UUID.init()();
  sub_18AF31300();
  uint64_t v20 = swift_retain();
  sub_18AF31458(v20, v11);
  swift_endAccess();
  uint64_t v21 = (void *)swift_task_alloc();
  v10[19] = v21;
  sub_18AF161EC(&qword_1E9125660);
  void *v21 = v10;
  v21[1] = sub_18AF26A20;
  sub_18AF311B0();
  return MEMORY[0x1F4187D90](v22, v23, v24, v25, v26, v27, v28, v29, a9, a10);
}

uint64_t sub_18AF31134(uint64_t result)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * ((result - 32) / v3);
  return result;
}

uint64_t sub_18AF31160()
{
  return v0;
}

uint64_t sub_18AF3116C()
{
  return v0;
}

uint64_t sub_18AF31180()
{
  return v0 + 8;
}

uint64_t sub_18AF31190()
{
  return swift_beginAccess();
}

uint64_t sub_18AF311C8()
{
  return v0;
}

void sub_18AF311D4(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_18AF311F8()
{
  return v0;
}

uint64_t sub_18AF31228()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AF31248()
{
  return type metadata accessor for LazyMapSequence();
}

uint64_t sub_18AF31268()
{
  return swift_allocObject();
}

uint64_t sub_18AF31280(uint64_t a1)
{
  *(void *)(v2 + 112) = a1;
  *(unsigned char *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v1;
  return swift_task_alloc();
}

uint64_t sub_18AF312A4()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_18AF312BC()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t sub_18AF312DC()
{
  return 0;
}

uint64_t sub_18AF312E8()
{
  return swift_getObjectType();
}

uint64_t sub_18AF31300()
{
  return swift_beginAccess();
}

void sub_18AF3131C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for TaskPriority();
  uint64_t v6 = sub_18AF3144C();
  if (sub_18AF436E0(v6, 1, v3) == 1)
  {
    sub_18AF401EC(a1, &qword_1E9125478);
  }
  else
  {
    TaskPriority.rawValue.getter();
    sub_18AF402E0();
    v7();
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_18AFFDB0C();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  swift_task_create();
  sub_18AF42F18();
}

uint64_t sub_18AF3144C()
{
  return v0;
}

uint64_t sub_18AF31458(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  sub_18AF314D8(a1, a2, isUniquelyReferenced_nonNull_native);
  *uint64_t v2 = v7;

  return swift_bridgeObjectRelease();
}

uint64_t sub_18AF314D8(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  sub_18AF37AF0();
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v18 = v13;
  char v19 = v14;
  sub_18AF161EC(&qword_1E91251D8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17)) {
    goto LABEL_5;
  }
  sub_18AF37AF0();
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_10:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = *v4;
  if (v19)
  {
    uint64_t v23 = v22[7];
    uint64_t result = swift_release();
    *(void *)(v23 + 8 * v18) = a1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    return sub_18AF31668(v18, (uint64_t)v11, a1, v22);
  }
  return result;
}

uint64_t sub_18AF31668(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_18AF31720(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, NSObject *a14, os_log_t log, uint64_t a16, uint64_t a17, os_log_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  sub_18AF325DC();
  a33 = v35;
  a34 = v36;
  a32 = v34;
  uint64_t v37 = *(void **)(v34 + 336);
  uint64_t v38 = *(void **)(v34 + 264);
  if (v37)
  {
    id v39 = v37;
    sub_18AF3207C();
    sub_18AF3E5E4();
    id v40 = v38;
    id v41 = v39;
    id v42 = v40;
    id v43 = v41;
    uint64_t v44 = Logger.logObject.getter();
    int v45 = static os_log_type_t.error.getter();
    if (sub_18AF42D04((os_log_type_t)v45))
    {
      HIDWORD(a13) = v45;
      log = v44;
      a16 = v34 + 200;
      a17 = v34 + 224;
      a10 = v34 + 208;
      a11 = v34 + 216;
      uint64_t v46 = sub_18AF16B9C();
      a12 = (void *)sub_18AF3F3B4();
      a14 = sub_18AF182D8();
      a18 = a14;
      *(_DWORD *)uint64_t v46 = 136315650;
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v47 = *(void *)(v34 + 256);
      uint64_t v48 = *(void **)(v34 + 264);
      HIDWORD(a9) = *(unsigned __int8 *)(v34 + 82);
      char v49 = *(unsigned char *)(v34 + 81);
      swift_retain();
      sub_18AF40CEC();
      uint64_t v50 = sub_18AF3DDC4();
      *(void *)(v34 + 200) = sub_18AF3DDAC(v50, v51, (uint64_t *)&a18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_18AF38FA4();
      sub_18AF31C08();
      LOBYTE(a19) = v49;
      a20 = v47;
      LOBYTE(a21) = BYTE4(a9);
      a22 = (uint64_t)v48;
      unint64_t v52 = CKSyncEngine.SendChangesContext.description.getter();
      *(void *)(v34 + 208) = sub_18AF4095C(v52, v53, (uint64_t *)&a18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_18AF307A4();

      *(_WORD *)(v46 + 22) = 2112;
      id v54 = v43;
      uint64_t v55 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v34 + 216) = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *a12 = v55;

      _os_log_impl(&dword_18AF10000, log, (os_log_type_t)v45, "%s failed sending changes for context %s: %@", (uint8_t *)v46, 0x20u);
      sub_18AF161EC((uint64_t *)&unk_1E9125610);
      sub_18AF31BF0();
      sub_18AF388F8();
      sub_18AF40360();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {
      uint64_t v66 = *(void **)(v34 + 264);
      swift_release_n();

      sub_18AF32614();
    }
    id v67 = *(void **)(v34 + 264);
    swift_willThrow();
    sub_18AF32614();

    sub_18AF16D48();
  }
  else
  {
    sub_18AF3207C();
    sub_18AF3E5E4();
    id v56 = v38;
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.default.getter();
    if (sub_18AF4179C(v58))
    {
      a16 = v34 + 200;
      a17 = v34 + 224;
      a14 = (v34 + 192);
      uint64_t v59 = sub_18AF402C8();
      log = (os_log_t)sub_18AF182D8();
      a18 = log;
      *(_DWORD *)uint64_t v59 = 136315394;
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v60 = *(void *)(v34 + 256);
      id v61 = *(void **)(v34 + 264);
      HIDWORD(a13) = *(unsigned __int8 *)(v34 + 82);
      LODWORD(a12) = *(unsigned __int8 *)(v34 + 81);
      swift_retain();
      sub_18AF40CEC();
      uint64_t v62 = sub_18AF1FFE8();
      *(void *)(v34 + 224) = sub_18AF476A0(v62, v63, (uint64_t *)&a18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_18AF38FA4();
      *(_WORD *)(v59 + 12) = 2080;
      LOBYTE(a19) = (_BYTE)a12;
      a20 = v60;
      LOBYTE(a21) = BYTE4(a13);
      a22 = (uint64_t)v61;
      unint64_t v64 = CKSyncEngine.SendChangesContext.description.getter();
      *(void *)(v34 + 192) = sub_18AF4095C(v64, v65, (uint64_t *)&a18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_18AF3E5CC();

      sub_18AF3F42C(&dword_18AF10000, v57, v58, "%s finished sending changes for context %s");
      sub_18AF41310();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {
      uint64_t v68 = *(void **)(v34 + 264);

      sub_18AF35674();
    }
    swift_bridgeObjectRelease_n();
    sub_18AF384DC();
  }
  sub_18AF325F8();
  return v70(v69, v70, v71, v72, v73, v74, v75, v76, a9, a10, a11, a12, a13, a14, log, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

void *sub_18AF31BC8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return memmove(a1, v2, 8 * a2);
}

uint64_t sub_18AF31BE0@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_18AF31BF0()
{
  return swift_arrayDestroy();
}

void sub_18AF31C08()
{
  *(_WORD *)(v0 + 12) = 2080;
}

uint64_t sub_18AF31C14()
{
  uint64_t v48 = v0;
  if (qword_1E91252D0 != -1) {
    swift_once();
  }
  unint64_t v2 = *(void *)(v0 + 328);
  uint64_t v1 = *(void **)(v0 + 336);
  uint64_t v3 = type metadata accessor for Logger();
  *(void *)(v0 + 368) = sub_18AF412A0(v3, (uint64_t)qword_1E91253B0);
  swift_bridgeObjectRetain_n();
  id v4 = v1;
  sub_18AF3E5E4();
  sub_18AF32094();
  sub_18AF3207C();
  id v5 = v4;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (sub_18AF3DD94(v7))
  {
    uint64_t v35 = v6;
    uint64_t v8 = sub_18AF402C8();
    uint64_t v38 = sub_18AF182D8();
    *(_DWORD *)uint64_t v8 = 136315394;
    if ((sub_18AF33AE8() & 1) == 0)
    {
      sub_18AF30C68();
      swift_task_reportUnexpectedExecutor();
    }
    char v33 = *(unsigned char *)(v0 + 84);
    char v31 = *(unsigned char *)(v0 + 83);
    uint64_t v32 = *(void *)(v0 + 360);
    uint64_t v9 = *(void **)(v0 + 336);
    uint64_t v29 = *(void *)(v0 + 344);
    uint64_t v30 = *(void *)(v0 + 352);
    char v28 = *(unsigned char *)(v0 + 82);
    unsigned __int8 v10 = *(unsigned char *)(v0 + 81);
    uint64_t v11 = *(void *)(v0 + 328);
    swift_retain();
    uint64_t v12 = sub_18AF40CEC();
    sub_18AF41328();
    *(void *)(v0 + 304) = sub_18AF4095C(v12, v2, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_18AF38FA4();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    v39[0] = v10;
    uint64_t v40 = v11;
    char v41 = v28;
    id v42 = v9;
    uint64_t v43 = v29;
    uint64_t v44 = v30;
    char v45 = v31;
    uint64_t v46 = v32;
    char v47 = v33;
    unint64_t Changes = CKSyncEngine.FetchChangesContext.description.getter();
    *(void *)(v0 + 312) = sub_18AF4095C(Changes, v14, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_18AF3E5CC();
    sub_18AF307A4();

    sub_18AF3F45C();
    swift_bridgeObjectRelease();
    sub_18AF403B4(&dword_18AF10000, v35, v7, "%s fetching changes with context: %s");
    sub_18AF40360();
    sub_18AF388F8();
    sub_18AF388F8();
  }
  else
  {
    uint64_t v15 = *(void **)(v0 + 336);

    sub_18AF32614();
    sub_18AF307A4();

    sub_18AF3F45C();
    swift_release_n();
  }
  static Task<>.checkCancellation()();
  char v34 = *(unsigned char *)(v0 + 84);
  uint64_t v16 = *(void *)(v0 + 352);
  uint64_t v36 = *(unsigned __int8 *)(v0 + 83);
  uint64_t v37 = *(void *)(v0 + 360);
  unint64_t v18 = *(void **)(v0 + 336);
  uint64_t v17 = *(void *)(v0 + 344);
  uint64_t v19 = *(unsigned __int8 *)(v0 + 82);
  uint64_t v21 = *(void *)(v0 + 328);
  v39[0] = *(unsigned char *)(v0 + 81);
  uint64_t v20 = v39[0];
  uint64_t v40 = v21;
  char v41 = v19;
  id v42 = v18;
  uint64_t v43 = v17;
  uint64_t v44 = v16;
  char v45 = v36;
  uint64_t v46 = v37;
  char v47 = v34;
  type metadata accessor for SyncEngine.FetchChangesPageIterationState();
  swift_allocObject();
  *(void *)(v0 + 376) = sub_18AF320D0(v39);
  swift_bridgeObjectRetain_n();
  id v22 = v18;
  sub_18AF3E5B4();
  sub_18AF3E59C();
  id v23 = v22;
  sub_18AF36AF4(v23);
  *(void *)(v0 + 16) = v20;
  *(void *)(v0 + 24) = v21;
  *(void *)(v0 + 32) = v19;
  *(void *)(v0 + 40) = v23;
  *(void *)(v0 + 48) = v17;
  *(void *)(v0 + 56) = v16;
  *(void *)(v0 + 64) = v36;
  *(void *)(v0 + 72) = v37;
  *(unsigned char *)(v0 + 80) = v34 | 0x60;
  swift_bridgeObjectRetain();
  id v24 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v25 = (void *)swift_task_alloc();
  *(void *)(v0 + 384) = v25;
  *uint64_t v25 = v0;
  v25[1] = sub_18AF1F440;
  sub_18AF41AC4();
  sub_18AF3F4A4();
  return sub_18AF295AC();
}

uint64_t sub_18AF3207C()
{
  return swift_retain_n();
}

uint64_t sub_18AF32094()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t type metadata accessor for SyncEngine.FetchChangesPageIterationState()
{
  return self;
}

uint64_t sub_18AF320D0(char *a1)
{
  char v3 = *a1;
  uint64_t v4 = *((void *)a1 + 1);
  char v5 = a1[16];
  uint64_t v6 = *((void *)a1 + 5);
  char v7 = a1[48];
  uint64_t v8 = *((void *)a1 + 7);
  char v9 = a1[64];
  sub_18AF161EC(&qword_1E91252A0);
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 24) = 0;
  *(void *)(v10 + 16) = MEMORY[0x1E4FBC868];
  *(void *)(v1 + 88) = v10;
  sub_18AF161EC(&qword_1E9125298);
  uint64_t v11 = swift_allocObject();
  *(_DWORD *)(v11 + 24) = 0;
  *(void *)(v11 + 16) = 0;
  *(void *)(v1 + 96) = v11;
  *(unsigned char *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = v4;
  *(unsigned char *)(v1 + 32) = v5;
  *(_OWORD *)(v1 + 40) = *(_OWORD *)(a1 + 24);
  *(void *)(v1 + 56) = v6;
  *(unsigned char *)(v1 + 64) = v7;
  *(void *)(v1 + 72) = v8;
  *(unsigned char *)(v1 + 80) = v9;
  return v1;
}

uint64_t sub_18AF321A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34)
{
  sub_18AF325DC();
  a33 = v35;
  a34 = v36;
  a32 = v34;
  uint64_t v37 = (void *)v34[42];
  sub_18AF32670();
  char v39 = v38;
  sub_18AF3098C();
  swift_bridgeObjectRetain_n();
  id v40 = v37;
  sub_18AF3E5B4();
  sub_18AF3E59C();
  id v41 = v40;
  id v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.debug.getter();
  BOOL v44 = sub_18AF32640(v43);
  if (v39)
  {
    if (v44)
    {
      char v45 = (_DWORD *)sub_18AF402C8();
      a23 = sub_18AF182D8();
      *char v45 = 136315394;
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      sub_18AFFC3A0();
      sub_18AF40CEC();
      uint64_t v46 = sub_18AF404A0();
      v34[36] = sub_18AFFD22C(v46, v47, &a23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18AF38FA4();
      swift_bridgeObjectRelease();
      sub_18AFFC964();
      v34[37] = sub_18AF4095C(v48, v49, &a23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      sub_18AF3F45C();
      swift_bridgeObjectRelease();
      sub_18AF403B4(&dword_18AF10000, v42, v43, "%s fetching changes for scope: %s");
      sub_18AF41310();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {
      uint64_t v55 = (void *)v34[42];

      sub_18AF32614();
      sub_18AF3E5CC();

      sub_18AF3F3FC();
      sub_18AF32658();
    }
    id v56 = (void *)swift_task_alloc();
    v34[49] = v56;
    *id v56 = v34;
    v56[1] = sub_18AF201C8;
    sub_18AF41AC4();
    sub_18AF325F8();
    return sub_18AF1B53C();
  }
  else
  {
    if (v44)
    {
      uint64_t v50 = (_DWORD *)sub_18AF402C8();
      a23 = sub_18AF182D8();
      *uint64_t v50 = 136315394;
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      sub_18AFFC3A0();
      sub_18AF40CEC();
      uint64_t v51 = sub_18AF404A0();
      v34[32] = sub_18AFFD22C(v51, v52, &a23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18AF38FA4();
      swift_bridgeObjectRelease();
      sub_18AFFC964();
      v34[33] = sub_18AF4095C(v53, v54, &a23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      sub_18AF3F45C();
      swift_bridgeObjectRelease();
      sub_18AF403B4(&dword_18AF10000, v42, v43, "%s no need to fetch changes for scope: %s");
      sub_18AF41310();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {
      uint64_t v59 = (void *)v34[42];

      sub_18AF32614();
      sub_18AF3E5CC();

      sub_18AF3F3FC();
      sub_18AF32658();
    }
    v34[60] = 0;
    uint64_t v60 = swift_task_alloc();
    id v61 = (void *)sub_18AF43480(v60);
    *id v61 = v62;
    v61[1] = sub_18AF1F51C;
    sub_18AF41AC4();
    sub_18AF325F8();
    return sub_18AF14BC0();
  }
}

uint64_t sub_18AF32614()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_18AF3262C()
{
  return v0;
}

BOOL sub_18AF32640(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_18AF32658()
{
  return swift_bridgeObjectRelease_n();
}

void sub_18AF32670()
{
  sub_18AF1855C();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  sub_18AF161EC(&qword_1E9125470);
  sub_18AF402B8();
  MEMORY[0x1F4188790](v5);
  sub_18AF38FBC();
  uint64_t v6 = *(void *)v4;
  int v7 = *(unsigned __int8 *)(v4 + 8);
  char v8 = *(unsigned char *)(v4 + 56);
  if (sub_18AF38A9C() & 1) == 0 || (v8) {
    goto LABEL_68;
  }
  if (v7 == 1)
  {
    if (!((unint64_t)v6 >> 62))
    {
      if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_6;
      }
LABEL_60:
      if (qword_1E91252D0 != -1) {
        swift_once();
      }
      uint64_t v57 = type metadata accessor for Logger();
      sub_18AF35568(v57, (uint64_t)qword_1E91253B0);
      uint64_t v30 = (void *)Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.info.getter();
      if (sub_18AF42D04(v58))
      {
        sub_18AF2A5F0();
        uint64_t v59 = sub_18AF16B9C();
        sub_18AF47594(v59);
        if ((sub_18AF476C4(4.8149e-34) & 1) == 0)
        {
          sub_18AF30C68();
          sub_18AFFBED4();
        }
        sub_18AF4765C();
        sub_18AF40CEC();
        sub_18AF476FC();
        uint64_t v60 = sub_18AF476E0();
        sub_18AF473F0(v60);
        sub_18AF35674();
        swift_bridgeObjectRelease();
        os_log_type_t v35 = v58;
        uint64_t v36 = "%s asked to sync zero zones, so we don't need to fetch changes";
        goto LABEL_66;
      }
      goto LABEL_67;
    }
    if (v6 >= 0) {
      uint64_t v56 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    else {
      uint64_t v56 = v6;
    }
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    sub_18AF41340();
    swift_bridgeObjectRelease();
    if (!v56) {
      goto LABEL_60;
    }
  }
LABEL_6:
  uint64_t v9 = *(void *)(v2 + 128);
  if (objc_msgSend(*(id *)(v9 + 16), sel_needsToFetchDatabaseChanges))
  {
    if (qword_1E91252D0 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_18AF35568(v10, (uint64_t)qword_1E91253B0);
    uint64_t v11 = (void *)Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (sub_18AF42D04(v12))
    {
      sub_18AF2A5F0();
      uint64_t v13 = sub_18AF16B9C();
      sub_18AF47594(v13);
      if ((sub_18AF476C4(4.8149e-34) & 1) == 0)
      {
        sub_18AF30C68();
        sub_18AFFBED4();
      }
      sub_18AF4765C();
      sub_18AF40CEC();
      sub_18AF476FC();
      uint64_t v14 = sub_18AF476E0();
      sub_18AF473F0(v14);
      sub_18AF35674();
      swift_bridgeObjectRelease();
      sub_18AF475D4(&dword_18AF10000, v15, v12, "%s need to fetch database changes, so we need to fetch changes for everything");
      sub_18AF31BF0();
      sub_18AF388F8();
      sub_18AF388F8();

      goto LABEL_68;
    }
    goto LABEL_54;
  }
  if (!sub_18AF43C44())
  {
    unint64_t v23 = CKSyncEngine.State.zoneIDsWithUnfetchedServerChanges.getter();
    if (v23 >> 62) {
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v24 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (!v24)
    {
      if (qword_1E91252D0 != -1) {
        swift_once();
      }
      uint64_t v37 = type metadata accessor for Logger();
      sub_18AF35568(v37, (uint64_t)qword_1E91253B0);
      uint64_t v30 = (void *)Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.info.getter();
      if (sub_18AF42D04(v38))
      {
        sub_18AF2A5F0();
        uint64_t v39 = sub_18AF16B9C();
        sub_18AF47594(v39);
        if ((sub_18AF476C4(4.8149e-34) & 1) == 0)
        {
          sub_18AF30C68();
          sub_18AFFBED4();
        }
        sub_18AF4765C();
        sub_18AF40CEC();
        sub_18AF476FC();
        uint64_t v40 = sub_18AF476E0();
        sub_18AF473F0(v40);
        sub_18AF35674();
        swift_bridgeObjectRelease();
        os_log_type_t v35 = v38;
        uint64_t v36 = "%s no zone IDs needing to be fetched, not fetching changes";
        goto LABEL_66;
      }
LABEL_67:

      sub_18AF35674();
      goto LABEL_68;
    }
    if (v7 == 1)
    {
      unint64_t v25 = CKSyncEngine.State.zoneIDsWithUnfetchedServerChanges.getter();
      sub_18AF48760(v25);
      unint64_t v26 = sub_18AF4040C();
      char v28 = sub_18AF48790(v26, v27);
      swift_bridgeObjectRelease();
      if (v28)
      {
        if (qword_1E91252D0 != -1) {
          swift_once();
        }
        uint64_t v29 = type metadata accessor for Logger();
        sub_18AF35568(v29, (uint64_t)qword_1E91253B0);
        uint64_t v30 = (void *)Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.info.getter();
        if (sub_18AF42D04(v31))
        {
          sub_18AF2A5F0();
          uint64_t v32 = sub_18AF16B9C();
          sub_18AF47594(v32);
          if ((sub_18AF476C4(4.8149e-34) & 1) == 0)
          {
            sub_18AF30C68();
            sub_18AFFBED4();
          }
          sub_18AF4765C();
          sub_18AF40CEC();
          sub_18AF476FC();
          uint64_t v33 = sub_18AF476E0();
          sub_18AF473F0(v33);
          sub_18AF35674();
          swift_bridgeObjectRelease();
          os_log_type_t v35 = v31;
          uint64_t v36 = "%s no intersection between desired zones to fetch changes and zones needing fetch changes";
LABEL_66:
          sub_18AF475D4(&dword_18AF10000, v34, v35, v36);
          sub_18AF19F48();
          sub_18AF388F8();
          sub_18AF388F8();

          goto LABEL_68;
        }
        goto LABEL_67;
      }
      if (qword_1E91252D0 != -1) {
        swift_once();
      }
      uint64_t v52 = type metadata accessor for Logger();
      sub_18AF35568(v52, (uint64_t)qword_1E91253B0);
      uint64_t v11 = (void *)Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.debug.getter();
      if (sub_18AF42D04(v53))
      {
        sub_18AF2A5F0();
        uint64_t v54 = sub_18AF16B9C();
        sub_18AF47594(v54);
        if ((sub_18AF476C4(4.8149e-34) & 1) == 0)
        {
          sub_18AF30C68();
          sub_18AFFBED4();
        }
        sub_18AF4765C();
        sub_18AF40CEC();
        sub_18AF476FC();
        uint64_t v55 = sub_18AF476E0();
        sub_18AF473F0(v55);
        sub_18AF35674();
        swift_bridgeObjectRelease();
        os_log_type_t v46 = v53;
        uint64_t v47 = "%s found intersection between desired zones to fetch changes and zones needing fetch changes";
LABEL_53:
        sub_18AF475D4(&dword_18AF10000, v45, v46, v47);
        sub_18AF31BF0();
        sub_18AF388F8();
        sub_18AF388F8();

        goto LABEL_68;
      }
    }
    else
    {
      if (qword_1E91252D0 != -1) {
        swift_once();
      }
      uint64_t v41 = type metadata accessor for Logger();
      sub_18AF35568(v41, (uint64_t)qword_1E91253B0);
      uint64_t v11 = (void *)Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.debug.getter();
      if (sub_18AF42D04(v42))
      {
        sub_18AF2A5F0();
        uint64_t v43 = sub_18AF16B9C();
        sub_18AF47594(v43);
        if ((sub_18AF476C4(4.8149e-34) & 1) == 0)
        {
          sub_18AF30C68();
          sub_18AFFBED4();
        }
        sub_18AF4765C();
        sub_18AF40CEC();
        sub_18AF476FC();
        uint64_t v44 = sub_18AF476E0();
        sub_18AF473F0(v44);
        sub_18AF35674();
        swift_bridgeObjectRelease();
        os_log_type_t v46 = v42;
        uint64_t v47 = "%s we have some zones needing fetch changes, and we're being asked to fetch all changes. LFG";
        goto LABEL_53;
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (qword_1E91252D0 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_18AF35568(v16, (uint64_t)qword_1E91253B0);
  sub_18AF3207C();
  uint64_t v17 = (void *)Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (!sub_18AF3DD94(v18))
  {

    sub_18AFFBC0C();
LABEL_55:
    sub_18AF35674();
    goto LABEL_68;
  }
  uint64_t v19 = (_DWORD *)sub_18AF402C8();
  uint64_t v61 = sub_18AF182D8();
  _DWORD *v19 = 136315394;
  if ((sub_18AFFBEBC() & 1) == 0)
  {
    sub_18AF30C68();
    sub_18AFFBED4();
  }
  swift_retain();
  sub_18AF40CEC();
  sub_18AF476FC();
  sub_18AF476E0();
  sub_18AF3F4C0();
  sub_18AF35674();
  swift_bridgeObjectRelease();
  sub_18AF31C08();
  id v20 = objc_msgSend(*(id *)(v9 + 16), sel_lastFetchDatabaseChangesDate);
  if (v20)
  {
    uint64_t v21 = v20;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v22 = 0;
  }
  else
  {
    uint64_t v22 = 1;
  }
  uint64_t v48 = type metadata accessor for Date();
  sub_18AF43708(v1, v22, 1, v48);
  sub_18AFFC480();
  uint64_t v49 = String.init<A>(describing:)();
  sub_18AF4095C(v49, v50, &v61);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  sub_18AFFBC0C();
  swift_bridgeObjectRelease();
  sub_18AFFC25C(&dword_18AF10000, v51, v18, "%s will fetch database and zone changes because our last fetch was too long ago: (%s");
  sub_18AF40360();
  sub_18AF388F8();
  sub_18AF388F8();

LABEL_68:
  sub_18AF32064();
}

void sub_18AF32FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CKSyncEngine.State.zoneIDsWithUnfetchedServerChanges.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_zoneIDsWithUnfetchedServerChanges);
  sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v2 & 0x8000000000000000) == 0 && (v2 & 0x4000000000000000) == 0) {
    return v2 & 0xFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = sub_18AF33074(v2);
  swift_bridgeObjectRelease();
  return (uint64_t)v4;
}

void *sub_18AF33074(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = (void *)MEMORY[0x1E4FBC860];
    }
    else
    {
      sub_18AF161EC(&qword_1E91255B8);
      uint64_t v3 = (void *)sub_18AF19FB8();
      size_t v4 = j__malloc_size(v3);
      v3[2] = v2;
      v3[3] = (2 * ((uint64_t)(v4 - 32) / 8)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_18AF33150((uint64_t)(v3 + 4), v2, v1);
    uint64_t v1 = v5;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_8:
    sub_18AF34294();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return (void *)MEMORY[0x1E4FBC860];
    }
  }
  return v3;
}

uint64_t sub_18AF33150(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v7 = a3;
    }
    else {
      uint64_t v7 = a3 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = sub_18AF33DC8();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_18AF3345C(&qword_1E9125108, (uint64_t *)&unk_1E91250C0);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            sub_18AF161EC((uint64_t *)&unk_1E91250C0);
            uint64_t v10 = sub_18AF332F8(v13, i, a3);
            id v12 = *v11;
            ((void (*)(void *, void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_19;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_18AFA7990((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10));
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_19:
    __break(1u);
  }
  __break(1u);
  return result;
}

void (*sub_18AF332F8(void *a1, unint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_18AF33360(v6, a2, a3);
  return sub_18AF33408;
}

uint64_t (*sub_18AF33360(void *a1, unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = a3 & 0xC000000000000001;
  sub_18AF33404(a2, (a3 & 0xC000000000000001) == 0, a3);
  if (v6) {
    id v7 = (id)MEMORY[0x18C1298C0](a2, a3);
  }
  else {
    id v7 = *(id *)(a3 + 8 * a2 + 32);
  }
  *a1 = v7;
  return _s23PendingRecordZoneChangeOwxx;
}

unint64_t sub_18AF333E0(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

void sub_18AF33408(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void _s14DatabaseChangeO8DeletionVwxx(id *a1)
{
}

uint64_t sub_18AF3345C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_18AF67604(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_18AF335B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18AF335CC()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  sub_18AF33780();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  sub_18AF33C54();
  sub_18AF37AC0();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_18AF33668()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  sub_18AF33780();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  sub_18AF33C54();
  sub_18AF37AC0();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_18AF33710()
{
  return v0;
}

double sub_18AF3372C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)a13 = v16;
  *(void *)(a13 + 8) = v13;
  *(void *)(a13 + 16) = v14;
  *(void *)(a13 + 24) = v15;
  double result = 0.0;
  *(_OWORD *)(a13 + 32) = 0u;
  *(_OWORD *)(a13 + 48) = 0u;
  return result;
}

id sub_18AF33754()
{
  return [v0 (SEL)(v1 + 2840)];
}

void sub_18AF33790(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    sub_18AF3386C();
    if (v7 != v8)
    {
      sub_18AF339D4();
      if (v7)
      {
        __break(1u);
        return;
      }
      sub_18AF339C4();
    }
  }
  else
  {
    uint64_t v6 = a2;
  }
  uint64_t v9 = *(void *)(a4 + 16);
  if (v6 <= v9) {
    uint64_t v10 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v10 = v6;
  }
  if (v10)
  {
    sub_18AF161EC(&qword_1E91255D0);
    uint64_t v11 = (char *)sub_18AF19FB8();
    j__malloc_size(v11);
    sub_18AF33E84();
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = v12;
  }
  else
  {
    uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v11 + 32;
  if (a1)
  {
    sub_18AF343F4((char *)(a4 + 32), v9, v13);
    sub_18AF33B20();
  }
  else
  {
    sub_18AF65DC8(0, v9, (unint64_t)v13, a4);
  }
}

uint64_t sub_18AF33890()
{
  return swift_allocObject();
}

uint64_t sub_18AF338A8(uint64_t result)
{
  *(void *)(result + 16) = v1;
  return result;
}

uint64_t sub_18AF338C0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AF338E0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  char v3 = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t sub_18AF33914()
{
  return sub_18AF88338(v1, v2, 0, v0);
}

__n128 sub_18AF3395C(unint64_t a1)
{
  v1[9].n128_u64[1] = a1;
  __n128 result = v1[4];
  *(void *)(a1 + 16) = v2;
  *(__n128 *)(a1 + 24) = result;
  return result;
}

uint64_t sub_18AF33990(void *a1)
{
  uint64_t result = *(void *)(v1 + 16);
  *a1 = result;
  return result;
}

void sub_18AF339A0(uint64_t a1@<X8>)
{
  *(void *)(*(void *)(v1 + 56) + 8 * a1) = v2;
  ++*(void *)(v1 + 16);
}

uint64_t sub_18AF339EC(uint64_t a1)
{
  return MEMORY[0x1F4188298](a1, v1, 0);
}

uint64_t sub_18AF339F8(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  char v3 = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AF33A2C(void *a1)
{
  *uint64_t v5 = a1;
  a1[3] = v1;
  a1[4] = v2;
  a1[1] = v4;
  a1[2] = v3;
  return v4;
}

uint64_t sub_18AF33A58()
{
  return swift_release();
}

id sub_18AF33A78(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2, 1, v3);
}

uint64_t sub_18AF33A94()
{
  return swift_bridgeObjectRetain();
}

BOOL sub_18AF33AB4@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_18AF33ACC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18AF33AE8()
{
  return swift_task_isCurrentExecutor();
}

uint64_t sub_18AF33B20()
{
  *(void *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_18AF33B38()
{
  return v0;
}

uint64_t sub_18AF33B58()
{
  *(unsigned char *)(v1 + 48) = *(unsigned char *)(v0 + 48);
  *(void *)(v1 + 56) = *(void *)(v0 + 56);
  *(unsigned char *)(v1 + 64) = *(unsigned char *)(v0 + 64);
  return v1;
}

BOOL sub_18AF33B78(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v11, v10);
}

uint64_t sub_18AF33BAC(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t sub_18AF33BD4(uint64_t result)
{
  *(void *)(v1 + 72) = result;
  return result;
}

uint64_t sub_18AF33BEC()
{
  return v0;
}

uint64_t sub_18AF33C00()
{
  return *(void *)(v0 + 16);
}

id sub_18AF33C14(void *a1)
{
  return objc_msgSend(a1, (SEL)(v3 + 2795), v1, v2);
}

id sub_18AF33C30@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void **)(a1 + 16);
  *a2 = v2;
  return v2;
}

uint64_t sub_18AF33C54()
{
  return v0;
}

void sub_18AF33C80()
{
  sub_18AF33E10();
  if (v6)
  {
    sub_18AF3386C();
    if (v8 != v9)
    {
      sub_18AF339D4();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_18AF339C4();
    }
  }
  else
  {
    uint64_t v7 = v4;
  }
  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    sub_18AF161EC(v5);
    uint64_t v12 = (void *)sub_18AF19FB8();
    j__malloc_size(v12);
    sub_18AF33E84();
    _DWORD v12[2] = v10;
    v12[3] = v13;
  }
  else
  {
    uint64_t v12 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v14 = v12 + 4;
  uint64_t v15 = v0 + 32;
  if (v3)
  {
    v2(v15, v10, v14);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v15, v10, v14);
  }
  swift_release();
}

uint64_t sub_18AF33D58()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

id sub_18AF33D8C(uint64_t a1, const char *a2)
{
  return objc_msgSend(v4, a2, v3, v5, v2);
}

void sub_18AF33DAC(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t *), uint64_t a3, uint64_t a4, void (*a5)(void *), void (*a6)(uint64_t), void *a7, void (*a8)(void *__return_ptr, void *, uint64_t, void (*)(void *__return_ptr, void), uint64_t), uint64_t a9)
{
  sub_18AF85090(a1, a2, 0, (uint64_t)&a9, a5, a6, a7, a8);
}

uint64_t sub_18AF33DC8()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18AF33E24@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 152) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

id sub_18AF33E44()
{
  uint64_t v2 = *(objc_class **)(v0 + 176);
  return objc_allocWithZone(v2);
}

id sub_18AF33E60()
{
  uint64_t v3 = *(void **)(v0 + 8 * v1 + 32);
  return v3;
}

uint64_t sub_18AF33E98()
{
  *(void *)(v1 + 80) = v0;
  *(unsigned char *)(v1 + 88) = 1;
  return swift_bridgeObjectRetain();
}

__n128 sub_18AF33EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, long long a19)
{
  return (__n128)a19;
}

uint64_t sub_18AF33ED8()
{
  return v0;
}

uint64_t sub_18AF33EEC(uint64_t a1, uint64_t (*a2)(uint64_t *, char *, uint64_t, uint64_t))
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = __CocoaSet.count.getter();
    if (v4) {
      goto LABEL_3;
    }
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return MEMORY[0x1E4FBC860];
  }
LABEL_3:
  if (v4 <= 0)
  {
    uint64_t v5 = (char *)MEMORY[0x1E4FBC860];
  }
  else
  {
    sub_18AF161EC(&qword_1E91255B8);
    uint64_t v5 = (char *)sub_18AF19FB8();
    size_t v6 = j__malloc_size(v5);
    sub_18AF340CC(v6);
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = a2(&v9, v5 + 32, v4, a1);
  uint64_t result = sub_18AF341D0();
  if (v7 == v4) {
    return (uint64_t)v5;
  }
  __break(1u);
  return result;
}

void sub_18AF33FD8()
{
  sub_18AF5B1A8();
}

uint64_t sub_18AF33FF4()
{
  return swift_retain();
}

BOOL sub_18AF34010@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_18AF34028()
{
  return v0;
}

uint64_t sub_18AF34044()
{
  return swift_task_alloc();
}

uint64_t sub_18AF34060()
{
  return sub_18AF7E214(v0);
}

BOOL sub_18AF34080@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_18AF3408C()
{
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t result = *(void *)(v0 + 56);
  *(void *)(v1 + 16) = 167;
  *(void *)(v1 + 24) = v2;
  return result;
}

void sub_18AF340A8()
{
  *(void *)(v0 - 120) = 0x6D61657274736B63;
  *(void *)(v0 - 112) = 0xEB000000002F2F3ALL;
}

uint64_t sub_18AF340CC(uint64_t result)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = (2 * ((result - 32) / 8)) | 1;
  return result;
}

void sub_18AF340E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v14 = v11;
  uint64_t v15 = v12;
  String.append(_:)(*(Swift::String *)&v14);
}

uint64_t sub_18AF34114(uint64_t a1)
{
  return sub_18AF36168(a1, v1, v2);
}

id sub_18AF34130(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)(a2 + 8);
  return sub_18AF755E8(v4, v5, v3);
}

id sub_18AF34170()
{
  return sub_18AF484B0(v1, v0);
}

uint64_t sub_18AF3418C()
{
  return v0;
}

uint64_t sub_18AF341D0()
{
  return swift_release();
}

void *sub_18AF341D8(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_18AF34B0C(a1, a2, a3, a4, (unint64_t *)&qword_1EB279460, (uint64_t)off_1E545EEE0, (unint64_t *)&qword_1EB279468);
}

uint64_t sub_18AF341F4()
{
  sub_18AF16EB4();
  if (v0 < 0)
  {
    sub_18AF18574();
    sub_18AF18588();
LABEL_11:
    uint64_t result = sub_18AF35128();
    __break(1u);
    return result;
  }
  sub_18AF343C8();
  if (!v4 & v3) {
    BOOL v5 = v2 > v1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    sub_18AF18574();
    sub_18AF22D28();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

uint64_t sub_18AF34294()
{
  return swift_bridgeObjectRetain();
}

void sub_18AF342B4()
{
  *(void *)(v1 + 16) = v2;
  *(unsigned char *)(v1 + 40 * v0 + 32) = v3;
}

uint64_t sub_18AF342CC()
{
  return v0;
}

id sub_18AF342E0(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

unint64_t sub_18AF34308()
{
  *uint64_t v2 = 0x8000000000000000;
  return sub_18AF7CF60(v1, v0);
}

uint64_t sub_18AF34334()
{
  return v0;
}

uint64_t sub_18AF3434C()
{
  return v0;
}

uint64_t sub_18AF34360()
{
  return sub_18AF88338(v0, v2, v3, v1);
}

uint64_t sub_18AF34384()
{
  return v0;
}

void sub_18AF343A8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v6, a4, v4, 2u);
}

void sub_18AF343DC()
{
  JUMPOUT(0x18C1298C0);
}

char *sub_18AF343F4(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_18AF18574();
    uint64_t result = (char *)sub_18AF39024();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_18AF39200(a3, result);
  }
  return result;
}

void sub_18AF34450()
{
  sub_18AF1855C();
  uint64_t v2 = v0;
  uint64_t v3 = sub_18AF161EC(&qword_1E9125478);
  uint64_t v4 = sub_18AF19284(v3);
  MEMORY[0x1F4188790](v4);
  sub_18AF36ADC();
  if (!*(void *)(v0 + 312))
  {
    if (qword_1E91252D0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_18AF35568(v5, (uint64_t)qword_1E91253B0);
    os_log_type_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (sub_18AF3F328(v7))
    {
      char v8 = (_DWORD *)sub_18AF2A5F0();
      uint64_t v18 = sub_18AF16B9C();
      *char v8 = 136315138;
      if ((sub_18AFFBEBC() & 1) == 0)
      {
        sub_18AF30C68();
        sub_18AFFBED4();
      }
      swift_retain();
      sub_18AF40CEC();
      uint64_t v9 = sub_18AFFBF60();
      uint64_t v11 = sub_18AF3F444(v9, v10, &v18);
      sub_18AFFCA18(v11);
      swift_bridgeObjectRelease();
      sub_18AF35674();
      sub_18AFFBB1C(&dword_18AF10000, v6, v7, "%s coalescing state update event");
      sub_18AF351C4();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {
      sub_18AF35674();
    }

    uint64_t v12 = type metadata accessor for TaskPriority();
    sub_18AF1826C(v1, v13, v14, v12);
    uint64_t v15 = sub_18AF38368(&qword_1E9125250, (void (*)(uint64_t))type metadata accessor for SyncEngine);
    uint64_t v16 = (void *)sub_18AF3488C();
    v16[2] = v2;
    v16[3] = v15;
    v16[4] = v2;
    sub_18AF36AC4();
    sub_18AF42DB4(v1, (uint64_t)&unk_1E91270C0, (uint64_t)v16);
    sub_18AF2FD00(v17);
  }
  sub_18AF32064();
}

CKSyncEngineSendChangesOptions __swiftcall CKSyncEngine.SendChangesOptions.optionsObject()()
{
  unint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 16);
  switch(*(unsigned char *)(v0 + 8))
  {
    case 1:
      uint64_t v14 = swift_bridgeObjectRetain_n();
      uint64_t v5 = (unint64_t *)&qword_1EB279460;
      os_log_type_t v6 = off_1E545EEE0;
      os_log_type_t v7 = &qword_1EB279468;
      uint64_t v11 = sub_18AF348C4(v14, v15, v16, v17, (void (*)(id *, id))sub_18AF34F50);
      id v12 = objc_allocWithZone((Class)CKSyncEngineSendChangesScope);
      uint64_t v13 = &selRef_initWithZoneIDs_;
      goto LABEL_6;
    case 2:
      uint64_t v4 = swift_bridgeObjectRetain_n();
      uint64_t v5 = &qword_1E91255F0;
      os_log_type_t v6 = off_1E545EEB0;
      os_log_type_t v7 = &qword_1E91251C8;
      uint64_t v11 = sub_18AF348C4(v4, v8, v9, v10, (void (*)(id *, id))sub_18AFF1C70);
      id v12 = objc_allocWithZone((Class)CKSyncEngineSendChangesScope);
      uint64_t v13 = &selRef_initWithRecordIDs_;
LABEL_6:
      uint64_t v18 = v11;
      id v3 = v12;
      sub_18AF34900(v18, v5, (uint64_t)v6, (unint64_t *)v7, (SEL *)v13);
      goto LABEL_7;
    case 3:
      id v3 = objc_msgSend(objc_allocWithZone((Class)CKSyncEngineSendChangesScope), sel_init);
      goto LABEL_8;
    default:
      id v3 = (id)sub_18AF34EA0(0, &qword_1E9126CA0);
      swift_bridgeObjectRetain_n();
      sub_18AF349A8(v1, (unint64_t *)&qword_1EB279460, (uint64_t)off_1E545EEE0, (unint64_t *)&qword_1EB279468, (void (*)(id *, id))sub_18AF34F50);
      sub_18AFC2370();
LABEL_7:
      sub_18AF40F74();
LABEL_8:
      id v19 = objc_msgSend(objc_allocWithZone((Class)CKSyncEngineSendChangesOptions), sel_initWithScope_, v3);

      objc_msgSend(v19, sel_setOperationGroup_, v2);
      uint64_t v22 = (objc_class *)v19;
      result._operationGroup = v21;
      result._scope = v20;
      result.super.Class isa = v22;
      return result;
  }
}

uint64_t sub_18AF34848()
{
  return v0;
}

uint64_t sub_18AF3485C()
{
  return 0;
}

uint64_t sub_18AF3488C()
{
  return swift_allocObject();
}

uint64_t sub_18AF348A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4187F00](a1, v3, a3, v4, a1);
}

uint64_t sub_18AF348C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(id *, id))
{
  return sub_18AF349A8(v5, v6, v7, v8, a5);
}

id sub_18AF34900(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, SEL *a5)
{
  if (a1)
  {
    sub_18AF34EA0(0, a2);
    sub_18AF34EDC(a4, a2);
    v9.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v9.super.Class isa = 0;
  }
  id v10 = objc_msgSend(v5, *a5, v9.super.isa);

  return v10;
}

uint64_t sub_18AF349A8(unint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, void (*a5)(id *, id))
{
  unint64_t v9 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  sub_18AF34EA0(0, a2);
  sub_18AF34EDC(a4, a2);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v11 = result;
  uint64_t v16 = result;
  if (!v9)
  {
    uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v12) {
      goto LABEL_5;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return v11;
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_13;
  }
LABEL_5:
  if (v12 >= 1)
  {
    for (uint64_t i = 0; i != v12; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        sub_18AF343DC();
      }
      else {
        id v14 = sub_18AF33E60();
      }
      a5(&v15, v14);
    }
    swift_bridgeObjectRelease();
    return v16;
  }
  __break(1u);
  return result;
}

void *sub_18AF34B0C(void *result, void *a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6, unint64_t *a7)
{
  uint64_t v7 = a4;
  unint64_t v9 = a2;
  uint64_t v29 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_18AF34EA0(0, a5);
    sub_18AF34EDC(a7, a5);
    uint64_t result = (void *)Set.Iterator.init(_cocoa:)();
    uint64_t v7 = v33;
    uint64_t v12 = v34;
    uint64_t v13 = v35;
    int64_t v14 = v36;
    unint64_t v15 = v37;
    if (v9) {
      goto LABEL_3;
    }
LABEL_37:
    uint64_t v16 = 0;
    goto LABEL_39;
  }
  int64_t v14 = 0;
  uint64_t v24 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v12 = a4 + 56;
  uint64_t v13 = ~v24;
  uint64_t v25 = -v24;
  if (v25 < 64) {
    uint64_t v26 = ~(-1 << v25);
  }
  else {
    uint64_t v26 = -1;
  }
  unint64_t v15 = v26 & *(void *)(a4 + 56);
  if (!a2) {
    goto LABEL_37;
  }
LABEL_3:
  if (!a3)
  {
    uint64_t v16 = 0;
LABEL_39:
    uint64_t v27 = v29;
LABEL_41:
    *uint64_t v27 = v7;
    v27[1] = v12;
    v27[2] = v13;
    v27[3] = v14;
    v27[4] = v15;
    return (void *)v16;
  }
  if (a3 < 0) {
    goto LABEL_48;
  }
  uint64_t v16 = 0;
  int64_t v30 = (unint64_t)(v13 + 64) >> 6;
  uint64_t v28 = v13;
  while (1)
  {
    if (v7 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_40;
      }
      sub_18AF34EA0(0, a5);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v19 = v32;
      uint64_t result = (void *)swift_unknownObjectRelease();
      if (!v32) {
        goto LABEL_40;
      }
      goto LABEL_23;
    }
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v20 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v20 >= v30)
    {
      unint64_t v15 = 0;
      goto LABEL_40;
    }
    unint64_t v21 = *(void *)(v12 + 8 * v20);
    if (v21) {
      goto LABEL_21;
    }
    int64_t v22 = v14 + 2;
    if (v14 + 2 >= v30)
    {
      unint64_t v15 = 0;
      ++v14;
      goto LABEL_40;
    }
    unint64_t v21 = *(void *)(v12 + 8 * v22);
    if (!v21)
    {
      if (v14 + 3 >= v30) {
        goto LABEL_44;
      }
      unint64_t v21 = *(void *)(v12 + 8 * (v14 + 3));
      if (v21)
      {
        int64_t v20 = v14 + 3;
        goto LABEL_21;
      }
      int64_t v22 = v14 + 4;
      if (v14 + 4 >= v30)
      {
        unint64_t v15 = 0;
        v14 += 3;
        goto LABEL_40;
      }
      unint64_t v21 = *(void *)(v12 + 8 * v22);
      if (!v21)
      {
        int64_t v20 = v14 + 5;
        if (v14 + 5 >= v30)
        {
LABEL_44:
          unint64_t v15 = 0;
          int64_t v14 = v22;
          goto LABEL_40;
        }
        unint64_t v21 = *(void *)(v12 + 8 * v20);
        if (!v21)
        {
          int64_t v23 = v14 + 6;
          while (v23 < v30)
          {
            unint64_t v21 = *(void *)(v12 + 8 * v23++);
            if (v21)
            {
              int64_t v20 = v23 - 1;
              goto LABEL_21;
            }
          }
          unint64_t v15 = 0;
          int64_t v14 = v30 - 1;
          goto LABEL_40;
        }
        goto LABEL_21;
      }
    }
    int64_t v20 = v22;
LABEL_21:
    unint64_t v15 = (v21 - 1) & v21;
    unint64_t v18 = __clz(__rbit64(v21)) + (v20 << 6);
    int64_t v14 = v20;
LABEL_22:
    uint64_t result = *(id *)(*(void *)(v7 + 48) + 8 * v18);
    id v19 = result;
    if (!result) {
      goto LABEL_40;
    }
LABEL_23:
    ++v16;
    *v9++ = v19;
    if (v16 == a3)
    {
      uint64_t v16 = a3;
LABEL_40:
      uint64_t v13 = v28;
      uint64_t v27 = v29;
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_18AF34E08(void *a1, SEL *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  id v7 = [a1 *a2];
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v7;
  sub_18AF34EA0(0, a3);
  sub_18AF34EDC(a5, a3);
  uint64_t v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  return v9;
}

uint64_t sub_18AF34EA0(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_18AF34EDC(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_18AF34EA0(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

#error "18AF350B0: call analysis failed (funcsize=105)"

void sub_18AF35104()
{
  sub_18AF5B1A8();
}

uint64_t sub_18AF35128()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t _s8CloudKit12CKSyncEngineC5EventO22FetchedDatabaseChangesV9deletionsSaySo10CKDatabaseCAAE0G6ChangeO8DeletionVGvg_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AF35160()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AF35188()
{
  return 0x6573616261746164;
}

void sub_18AF351AC(char a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a5 = v5;
  *(void *)(a5 + 8) = v6;
  *(unsigned char *)(a5 + 16) = v7;
  *(void *)(a5 + 24) = v8;
  *(unsigned char *)(a5 + 32) = a1;
}

uint64_t sub_18AF351C4()
{
  return swift_arrayDestroy();
}

uint64_t sub_18AF351E0()
{
  return type metadata accessor for CKShareTransferRepresentation.ExportedShare();
}

uint64_t sub_18AF3520C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AF3522C()
{
  return v0;
}

void sub_18AF35244()
{
  *(void *)(v0 + 16) = v1;
  uint64_t v5 = v0 + 16 * v4;
  *(void *)(v5 + 32) = v2;
  *(unsigned char *)(v5 + 40) = v3;
}

void sub_18AF35260(uint64_t a1@<X8>)
{
  *(void *)(a1 + v2) |= v3;
  *(void *)(v5[6] + 8 * v1) = v4;
  *(void *)(v5[7] + 8 * v1) = v6;
  ++v5[2];
}

double sub_18AF3528C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long a11)
{
  return sub_18AFFDEBC(a1, a2, v11, &a11);
}

id sub_18AF352BC()
{
  void *v0 = 0x8000000000000000;
  return v1;
}

uint64_t sub_18AF352F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = *v10;
  *id v10 = a10;
  return result;
}

void sub_18AF35330(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_18AF70B3C();
  }
  else
  {
    if (v7 > v6)
    {
      sub_18AF704D4();
      goto LABEL_14;
    }
    sub_18AFF2434();
  }
  uint64_t v8 = *v3;
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
    id v11 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
    char v12 = static NSObject.== infix(_:_:)();

    if (v12)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
        char v15 = static NSObject.== infix(_:_:)();

        if (v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = a1;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
}

uint64_t sub_18AF354C8()
{
  uint64_t result = v0[5];
  v0[3] = 0;
  v0[2] = 0;
  return result;
}

uint64_t sub_18AF354F4()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_18AF35510()
{
  return v0;
}

uint64_t sub_18AF35530()
{
  return v0;
}

void sub_18AF35548()
{
  _StringGuts.grow(_:)(16);
}

uint64_t sub_18AF35568(uint64_t a1, uint64_t a2)
{
  sub_18AF412A0(a1, a2);
  return swift_retain_n();
}

uint64_t sub_18AF35598()
{
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v0 = sub_18AF3563C();

  return MEMORY[0x1F4186498](v0, v1, 7);
}

void sub_18AF355E0()
{
  os_activity_scope_leave(v0 + 1);
}

uint64_t sub_18AF35600()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

unint64_t sub_18AF3561C(uint64_t a1)
{
  unint64_t result = a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
  sub_18AF745B0();
  return result;
}

uint64_t sub_18AF3563C()
{
  return v0;
}

uint64_t sub_18AF35648()
{
  return v0;
}

uint64_t sub_18AF3565C()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t sub_18AF35674()
{
  return swift_release_n();
}

void sub_18AF35778(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18AF35BFC(void *a1)
{
  id v1 = objc_msgSend(a1, sel_name);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_18AF35C60(void (*a1)(uint64_t *__return_ptr), uint64_t (*a2)(uint64_t *, uint64_t, uint64_t))
{
  uint64_t v5 = sub_18AF35E24(objc_msgSend(v2, sel_operationGroup));
  uint64_t v7 = v6;
  if (v6 && (sub_18AF35EF4() & 1) == 0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    id v12 = objc_msgSend(v2, sel_operationGroup);
    type metadata accessor for SyncEngine();
    id v8 = objc_msgSend(v2, sel_scope);
    a1(&v15);

    uint64_t v13 = v15;
    char v14 = v16;
    uint64_t v9 = a2(&v13, v5, v7);
    uint64_t v11 = v10;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_18AF36054(v9, v11, v12);
  }
}

uint64_t sub_18AF35E24(void *a1)
{
  id v2 = objc_msgSend(a1, sel_name);

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_18AF35EF4()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::String_optional v0 = String.Iterator.next()();
  if (v0.value._object)
  {
    uint64_t countAndFlagsBits = v0.value._countAndFlagsBits;
    object = v0.value._object;
    while (1)
    {
      Swift::String_optional v3 = String.Iterator.next()();
      if (!v3.value._object) {
        break;
      }
      if (countAndFlagsBits == v3.value._countAndFlagsBits && object == v3.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v5 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      Swift::String_optional v6 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v6.value._countAndFlagsBits;
      object = v6.value._object;
      if (!v6.value._object) {
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRelease();
    uint64_t v7 = String.Iterator.next()().value._object;
    swift_bridgeObjectRelease();
    BOOL v8 = v7 == 0;
    swift_bridgeObjectRelease();
  }
  return v8;
}

void sub_18AF36054(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)MEMORY[0x18C128F60]();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_setName_, v4);
}

uint64_t sub_18AF36168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = *(unsigned __int8 *)(a1 + 8);
  type metadata accessor for SyncEngine();
  BOOL v6 = sub_18AF36554(a2, a3);
  sub_18AF161EC(&qword_1E91255D0);
  uint64_t v7 = (__n128 *)swift_allocObject();
  BOOL v8 = sub_18AF3652C(v7, (__n128)xmmword_18B1F33C0);
  strcpy((char *)&v8[3], "FetchChanges");
  v8[3].n128_u8[13] = 0;
  v8[3].n128_u16[7] = -5120;
  if (!v5)
  {
    uint64_t v9 = 0x646564756C637845;
    goto LABEL_5;
  }
  if (v5 == 1)
  {
    uint64_t v9 = 0x6369666963657053;
LABEL_5:
    unint64_t v5 = 3;
    sub_18AF364DC();
    uint64_t v7 = v10;
    v10[1].n128_u64[0] = 3;
    v10[4].n128_u64[0] = v9;
    v10[4].n128_u64[1] = 0xED000073656E6F5ALL;
    unint64_t v11 = v10[1].n128_u64[1];
    goto LABEL_7;
  }
  unint64_t v11 = 4;
LABEL_7:
  if (v5 >= v11 >> 1)
  {
    sub_18AFFCCD0(v11);
    uint64_t v7 = v16;
  }
  unint64_t v12 = 0xE600000000000000;
  if (v6) {
    unint64_t v12 = 0xE900000000000063;
  }
  uint64_t v13 = 0x6C61756E614DLL;
  if (v6) {
    uint64_t v13 = 0x6974616D6F747541;
  }
  v7[1].n128_u64[0] = v5 + 1;
  char v14 = &v7[v5];
  v14[2].n128_u64[0] = v13;
  v14[2].n128_u64[1] = v12;
  sub_18AF161EC((uint64_t *)&unk_1E9125540);
  sub_18AF36488();
  sub_18AF364FC();
  swift_bridgeObjectRelease();
  return sub_18AF36520();
}

void sub_18AF362E8()
{
  sub_18AF366C4();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  unint64_t v4 = 0xED000073656E6F5ALL;
  uint64_t v6 = *(unsigned __int8 *)(v5 + 8);
  type metadata accessor for SyncEngine();
  BOOL v7 = sub_18AF36554(v3, v1);
  sub_18AF161EC(&qword_1E91255D0);
  BOOL v8 = (__n128 *)swift_allocObject();
  uint64_t v9 = sub_18AF3652C(v8, (__n128)xmmword_18B1F33C0);
  v9[3].n128_u64[0] = 0x6E616843646E6553;
  v9[3].n128_u64[1] = 0xEB00000000736567;
  uint64_t v10 = 0x646564756C637845;
  unint64_t v11 = 2;
  unint64_t v12 = v9;
  switch(v6)
  {
    case 1:
      goto LABEL_3;
    case 2:
      unint64_t v4 = 0xEF7364726F636552;
LABEL_3:
      uint64_t v10 = 0x6369666963657053;
      goto LABEL_4;
    case 3:
      goto LABEL_5;
    default:
LABEL_4:
      unint64_t v11 = 3;
      sub_18AF364DC();
      unint64_t v12 = v13;
      v13[1].n128_u64[0] = 3;
      v13[4].n128_u64[0] = v10;
      v13[4].n128_u64[1] = v4;
LABEL_5:
      unint64_t v14 = v12[1].n128_u64[1];
      if (v11 >= v14 >> 1)
      {
        sub_18AFFCCD0(v14);
        unint64_t v12 = v18;
      }
      unint64_t v15 = 0xE600000000000000;
      if (v7) {
        unint64_t v15 = 0xE900000000000063;
      }
      uint64_t v16 = 0x6C61756E614DLL;
      if (v7) {
        uint64_t v16 = 0x6974616D6F747541;
      }
      v12[1].n128_u64[0] = v11 + 1;
      uint64_t v17 = &v12[v11];
      v17[2].n128_u64[0] = v16;
      v17[2].n128_u64[1] = v15;
      sub_18AF161EC((uint64_t *)&unk_1E9125540);
      sub_18AF36488();
      sub_18AF364FC();
      swift_bridgeObjectRelease();
      sub_18AF36520();
      sub_18AF366D8();
      return;
  }
}

unint64_t sub_18AF36488()
{
  unint64_t result = qword_1E9125550;
  if (!qword_1E9125550)
  {
    sub_18AF67604((uint64_t *)&unk_1E9125540);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9125550);
  }
  return result;
}

void sub_18AF364DC()
{
  sub_18AF33790(1, 3, 1, v0);
}

uint64_t sub_18AF364FC()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t sub_18AF36520()
{
  return v0;
}

__n128 *sub_18AF3652C(__n128 *result, __n128 a2)
{
  result[1] = a2;
  strcpy((char *)&result[2], "CKSyncEngine");
  result[2].n128_u8[13] = 0;
  result[2].n128_u16[7] = -5120;
  return result;
}

BOOL sub_18AF36554(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (a2)
  {
    sub_18AF3A88C();
    if (sub_18AF35EF4())
    {
      sub_18AF3AA6C();
      uint64_t v2 = (void *)StringProtocol.components<A>(separatedBy:)();
      char v3 = sub_18AF3A8F8(0x6974616D6F747541, 0xE900000000000063, v2);
      swift_bridgeObjectRelease();
      if (v3) {
        return 1;
      }
    }
  }
  return result;
}

void sub_18AF3660C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_18AF366C4();
  uint64_t v13 = v11;
  sub_18AF305FC();
  uint64_t v14 = *v11;
  uint64_t v15 = static Hasher._hash(seed:_:)() & ~(-1 << *(unsigned char *)(v14 + 32));
  sub_18AF366EC();
  if (v16)
  {
    if (*(void *)(*(void *)(v14 + 48) + 8 * v15) == v10) {
      goto LABEL_7;
    }
    while (1)
    {
      sub_18AFFC948();
      if ((v18 & 1) == 0) {
        break;
      }
      if (*(void *)(v17 + 8 * v15) == v10) {
        goto LABEL_7;
      }
    }
  }
  swift_isUniquelyReferenced_nonNull_native();
  sub_18AF3670C();
  uint64_t v19 = sub_18AF36700();
  sub_18AF36728(v19, v20, v21);
  *uint64_t v13 = a10;
  swift_bridgeObjectRelease();
LABEL_7:
  void *v12 = v10;
  sub_18AF366D8();
}

uint64_t sub_18AF36700()
{
  return v0;
}

void sub_18AF3670C()
{
  void *v0 = 0x8000000000000000;
}

void sub_18AF36728(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_18AF70D58();
  }
  else
  {
    if (v7 > v6)
    {
      sub_18AF705E8();
      goto LABEL_14;
    }
    sub_18AF3684C();
  }
  uint64_t v8 = *v3;
  uint64_t v9 = static Hasher._hash(seed:_:)();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v11 = *(void *)(v8 + 48);
    if (*(void *)(v11 + 8 * a2) == a1)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v11 + 8 * a2) == a1) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v13 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v13 + 48) + 8 * a2) = a1;
  uint64_t v14 = *(void *)(v13 + 16);
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v13 + 16) = v16;
  }
}

uint64_t sub_18AF3684C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_18AF161EC(&qword_1E9125268);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  if (!v9) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v12 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v5 << 6))
  {
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * i);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v19 = result & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v11 + 8 * (v19 >> 6))) == 0)
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v18) >> 6;
      while (++v20 != v23 || (v22 & 1) == 0)
      {
        BOOL v24 = v20 == v23;
        if (v20 == v23) {
          unint64_t v20 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v20);
        if (v25 != -1)
        {
          unint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v11 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v11 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    *(void *)(*(void *)(v4 + 48) + 8 * v21) = v17;
    ++*(void *)(v4 + 16);
    if (v9) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v10) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v5;
    if (!v15)
    {
      int64_t v5 = v14 + 1;
      if (v14 + 1 >= v10) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v5);
      if (!v15)
      {
        int64_t v5 = v14 + 2;
        if (v14 + 2 >= v10) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v5);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v10)
  {
LABEL_32:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v5 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v5 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v5);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_18AF36AC4()
{
  return swift_retain_n();
}

void sub_18AF36AF4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = objc_msgSend(a1, sel_defaultConfiguration);
  if (v4)
  {
    int64_t v5 = v4;
    int v6 = CKQualityOfServiceOrdering((uint64_t)[v4 qualityOfService]);
    if (v6 < (int)CKQualityOfServiceOrdering(17))
    {
      if (qword_1E91252D0 != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      sub_18AF412A0(v7, (uint64_t)qword_1E91253B0);
      sub_18AF3207C();
      uint64_t v8 = v5;
      unint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.debug.getter();
      if (sub_18AF4179C(v10))
      {
        uint64_t v11 = sub_18AF16B9C();
        uint64_t v36 = sub_18AF3DE24();
        uint64_t v38 = v36;
        *(_DWORD *)uint64_t v11 = 136315650;
        if ((sub_18AFFD1AC() & 1) == 0)
        {
          sub_18AF30C68();
          sub_18AFFCF40();
        }
        swift_retain();
        sub_18AF40CEC();
        uint64_t v12 = swift_release();
        sub_18AFFDC10(v12, v13, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_18AFFBC0C();
        swift_bridgeObjectRelease();
        *(_WORD *)(v11 + 12) = 2080;
        id v14 = [v8 qualityOfService];
        uint64_t v18 = CKStringForQOS((uint64_t)v14, v15, v16, v17);
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        sub_18AFFD22C(v19, v20, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v11 + 22) = 2080;
        BOOL v24 = CKStringForQOS(17, v21, v22, v23);
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        sub_18AF403F4(v25, v26, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_18AF3F4D8(&dword_18AF10000, v9, v10, "%s overriding operation group QoS from %s to %s");
        swift_arrayDestroy();
        sub_18AF388F8();
        sub_18AF388F8();
      }
      else
      {

        sub_18AFFBC0C();
      }
      -[NSObject setQualityOfService:](v8, sel_setQualityOfService_, 17, v36);
    }
    uint64_t v32 = *(void **)(v2 + 224);
    if (v32)
    {
      id v33 = v32;
      id v34 = [v5 assetDownloadStagingManager];

      if (!v34) {
        sub_18AF45F24(v35, sel_setAssetDownloadStagingManager_);
      }
    }
    if ([v5 requestOriginator] != (id)3) {
      [v5 setRequestOriginator:3];
    }
    goto LABEL_24;
  }
  if (qword_1E91252D0 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  sub_18AF412A0(v27, (uint64_t)qword_1E91253B0);
  id v37 = a1;
  int64_t v5 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.fault.getter();
  if (sub_18AFFCBE0(v28))
  {
    uint64_t v29 = (uint8_t *)sub_18AF2A5F0();
    int64_t v30 = (void *)sub_18AF3F3B4();
    *(_DWORD *)uint64_t v29 = 138412290;
    uint64_t v38 = (uint64_t)v37;
    id v31 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v30 = v37;

    _os_log_impl(&dword_18AF10000, v5, (os_log_type_t)v2, "BUG IN CLOUDKIT: No configuration on operation group: %@", v29, 0xCu);
    sub_18AF161EC((uint64_t *)&unk_1E9125610);
    swift_arrayDestroy();
    sub_18AF388F8();
    sub_18AF388F8();
LABEL_24:

    return;
  }
}

void sub_18AF3743C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18AF374C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_18AF37538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_18AF3762C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18AF37930()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  sub_18AF37AD4();
  sub_18AF37AC0();
  return sub_18AF14B94(v3, v4, v5, v6, v7);
}

uint64_t sub_18AF37A1C()
{
  return v0;
}

uint64_t *sub_18AF37A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

uint64_t sub_18AF37A48()
{
  return swift_release();
}

void sub_18AF37A64()
{
  os_activity_scope_leave(v0 + 1);
}

__n128 sub_18AF37A84(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_18AF37AD4()
{
  return v0;
}

void sub_18AF37AF0()
{
}

uint64_t sub_18AF37BB8(uint64_t a1)
{
  return a1 & ~(-1 << *(unsigned char *)(v1 + 32));
}

uint64_t sub_18AF37BD0()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t sub_18AF37BF0()
{
  return 0;
}

uint64_t sub_18AF37C04()
{
  return swift_retain();
}

void sub_18AF37C34()
{
  sub_18AF1855C();
  BOOL v24 = v1;
  uint64_t v25 = v2;
  uint64_t v23 = v3;
  uint64_t v5 = v4;
  v21[1] = v6;
  uint64_t v8 = v7(0);
  sub_18AF38990();
  uint64_t v10 = v9;
  sub_18AF37DC0();
  MEMORY[0x1F4188790]();
  uint64_t v12 = (char *)v21 - v11;
  uint64_t v22 = v0;
  uint64_t v13 = -1 << *(unsigned char *)(v0 + 32);
  unint64_t v14 = v5 & ~v13;
  v21[0] = v0 + 64;
  if ((*(void *)(v0 + 64 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v15 = ~v13;
    uint64_t v18 = *(void (**)(char *, unint64_t, uint64_t))(v10 + 16);
    uint64_t v17 = v10 + 16;
    uint64_t v16 = v18;
    uint64_t v19 = *(void *)(v17 + 56);
    do
    {
      v16(v12, *(void *)(v22 + 48) + v19 * v14, v8);
      sub_18AF38320(v23, v24);
      char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v17 - 8))(v12, v8);
      if (v20) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v15;
    }
    while (((*(void *)(v21[0] + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
  }
  sub_18AF32064();
}

void *sub_18AF37DB4(void *result, int a2)
{
  *__n128 result = (a2 - 1);
  return result;
}

uint64_t sub_18AF37DE4()
{
  sub_18AF1A048();
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = sub_18AF383B0();
  uint64_t v3 = sub_18AF38368(&qword_1E9125160, (void (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue);
  uint64_t v4 = sub_18AF385C8(v3);
  sub_18AF385E8(v4, v2);
  sub_18AF40F74();
  if (v1)
  {
    uint64_t v5 = swift_task_alloc();
    uint64_t v6 = (void *)sub_18AF22680(v5);
    void *v6 = v7;
    v6[1] = sub_18AFFBA5C;
    sub_18AFFD7C0();
    sub_18AF3A8AC();
    __asm { BRAA            X1, X16 }
  }
  sub_18AF385B8();
  if (!v10)
  {
    char v19 = sub_18AF33AE8();
    if ((v19 & 1) == 0) {
      sub_18AFFBAFC();
    }
    sub_18AF18528();
    sub_18AF3875C();
    if (!v20)
    {
      if ((sub_18AF38598() & 1) == 0) {
        sub_18AF2AD34();
      }
      sub_18AF386B0();
      if (v10)
      {
        sub_18AF38750();
        if (v10) {
          static Task<>.checkCancellation()();
        }
        uint64_t v21 = sub_18AF383B0();
        uint64_t v22 = sub_18AF1BC6C(v21);
        sub_18AF38768(v22, v23, v24, v25, v26, v27, v28, v29, v35, v36);
        if (qword_1E9125240 == -1) {
          goto LABEL_22;
        }
        goto LABEL_28;
      }
LABEL_27:
      __break(1u);
LABEL_28:
      swift_once();
LABEL_22:
      int64_t v30 = (__n128 *)sub_18AF3856C();
      sub_18AF38718(v30);
      sub_18AF38368(&qword_1E9125260, (void (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue);
      uint64_t v31 = swift_task_alloc();
      uint64_t v32 = (void *)sub_18AF38740(v31);
      void *v32 = v33;
      v32[1] = sub_18AF30810;
      sub_18AF3872C();
      sub_18AF382F8();
      return MEMORY[0x1F41881B8]();
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  sub_18AF3A8C4();
  if (v12)
  {
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v13 = sub_18AF3A8DC(v11);
  uint64_t v14 = sub_18AF31280(v13);
  sub_18AF3A878(v14);
  sub_18AF38368(&qword_1E9125260, (void (*)(uint64_t))type metadata accessor for CKAsyncSerialQueue);
  uint64_t v15 = swift_task_alloc();
  uint64_t v16 = (void *)sub_18AF3A8D0(v15);
  *uint64_t v16 = v17;
  v16[1] = sub_18AF1DF1C;
  sub_18AF309E8();
  sub_18AF3A8AC();
  return MEMORY[0x1F4188148]();
}

uint64_t sub_18AF381E4()
{
  return v0;
}

uint64_t sub_18AF38220()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18AF38238(void *a1)
{
  a1[2] = v3;
  a1[3] = v4;
  a1[4] = v2;
  a1[5] = v1;
  return swift_retain();
}

uint64_t sub_18AF38264()
{
  *(void *)(v0 + 48) = *(void *)(v0 + 40);
  return swift_task_alloc();
}

uint64_t sub_18AF38284()
{
  return 0x712D65646F636564;
}

uint64_t sub_18AF382A4()
{
  return 0;
}

void sub_18AF382BC()
{
  uint64_t v1 = 0x736E6F6974706F20;
  unint64_t v2 = 0xE90000000000003DLL;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t sub_18AF382E4()
{
  return v0;
}

uint64_t sub_18AF38320(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18AF38368(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18AF383B0()
{
  if (qword_1E9125240 != -1) {
    swift_once();
  }
  TaskLocal.get()();
  return v1;
}

uint64_t sub_18AF38424()
{
  return v0;
}

uint64_t sub_18AF38430()
{
  uint64_t result = v0[5];
  v0[3] = 0;
  v0[2] = 0;
  return result;
}

uint64_t sub_18AF3844C()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t sub_18AF3846C()
{
  return v0;
}

uint64_t sub_18AF3848C()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_18AF384AC()
{
  return String.init<A>(_:)();
}

uint64_t sub_18AF384CC()
{
  return v0 + 8;
}

uint64_t sub_18AF384DC()
{
  return v0 + 8;
}

NSArray sub_18AF384EC()
{
  return Array._bridgeToObjectiveC()();
}

uint64_t sub_18AF38518()
{
  return type metadata accessor for TaskPriority();
}

uint64_t sub_18AF38540@<X0>(int a1@<W8>)
{
  return (a1 + 1);
}

uint64_t sub_18AF38548()
{
  return 16;
}

uint64_t sub_18AF3856C()
{
  *(void *)(v0 + 48) = *(void *)(v0 + 40);
  return swift_task_alloc();
}

uint64_t sub_18AF3858C()
{
  return v0;
}

uint64_t sub_18AF38598()
{
  *(unsigned char *)(v0 + 128) = 1;
  return swift_task_isCurrentExecutor();
}

uint64_t sub_18AF385C8(uint64_t a1)
{
  *(void *)(v1 + 96) = a1;
  return Identifiable<>.id.getter();
}

void sub_18AF385E8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    unint64_t v4 = static Hasher._hash(seed:_:)() & ~(-1 << *(unsigned char *)(a2 + 32));
    if (((*(void *)(a2 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0
      && *(void *)(*(void *)(a2 + 48) + 8 * v4) != a1)
    {
      sub_18AFFC92C();
      if (v7)
      {
        do
        {
          if (*(void *)(v5 + 8 * v6) == a1) {
            break;
          }
          sub_18AFFC92C();
        }
        while ((v8 & 1) != 0);
      }
    }
  }
}

uint64_t sub_18AF3868C()
{
  return 0;
}

void sub_18AF38698()
{
  uint64_t v2 = *(void **)(v0 + 72);
}

uint64_t sub_18AF386C0()
{
  return type metadata accessor for SyncEngine();
}

uint64_t sub_18AF386E8()
{
  return v0;
}

uint64_t sub_18AF386FC(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  return swift_retain();
}

__n128 sub_18AF38718(__n128 *a1)
{
  v1[9].n128_u64[0] = (unint64_t)a1;
  __n128 result = v1[4];
  a1[1] = result;
  return result;
}

void sub_18AF3872C()
{
  *(void *)(v1 + 16) = 167;
  *(void *)(v1 + 24) = v0;
}

uint64_t sub_18AF38740(uint64_t result)
{
  *(void *)(v1 + 152) = result;
  return result;
}

void sub_18AF38768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_18AF3660C((uint64_t)va, a1, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_18AF38784()
{
  if ((sub_18AF38A9C() & 1) == 0
    || (sub_18AF18528(), (*(unsigned char *)(v0 + 266) & 1) != 0)
    || (sub_18AF18528(), (*(unsigned char *)(v0 + 264) & 1) != 0)
    || (sub_18AF18528(), (*(unsigned char *)(v0 + 265) & 1) != 0)
    || (sub_18AF18528(), (uint64_t v1 = *(void **)(v0 + 304)) == 0))
  {
    sub_18AF3A5D4();
  }
  else
  {
    id v2 = v1;
    objc_msgSend(v2, sel_accountStatus);
  }
}

uint64_t sub_18AF388C8()
{
  return *(void *)v0;
}

id sub_18AF388D4()
{
  return objc_msgSend(v0, (SEL)(v3 + 718), v1, 0, v2);
}

void sub_18AF388F8()
{
  JUMPOUT(0x18C12BB10);
}

uint64_t sub_18AF3892C()
{
  return sub_18AF35EF4();
}

void sub_18AF38960()
{
  uint64_t v1 = 62;
  unint64_t v2 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

id sub_18AF38978(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_18AF389A8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_18AF389E0()
{
  return swift_slowAlloc();
}

uint64_t sub_18AF389F8()
{
  return sub_18AF5F6FC(v1, v0);
}

uint64_t sub_18AF38A10()
{
  return v0;
}

id sub_18AF38A28@<X0>(char a1@<W0>, const char *a2@<X1>, void *a3@<X8>)
{
  return objc_msgSend(a3, a2, a1 & 1);
}

void sub_18AF38A34()
{
  sub_18AF26470();
}

uint64_t sub_18AF38A58()
{
  return v0;
}

uint64_t sub_18AF38A9C()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + OBJC_IVAR____TtC8CloudKit10SyncEngine_isAutomaticSyncEnabledLock) + 20);
  os_unfair_lock_lock(v1);
  uint64_t v2 = (unsigned char *)sub_18AF40DC0();
  sub_18AF38AFC(v2, v3);
  os_unfair_lock_unlock(v1);
  return v5;
}

unsigned char *sub_18AF38AFC@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_18AF38B08()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  sub_18AF384DC();
  return v3();
}

uint64_t sub_18AF38BE4()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16D18();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF16D48();
  return v3();
}

uint64_t sub_18AF38CA8()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF384DC();
  return v3();
}

uint64_t sub_18AF38D68(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 64) = a5;
  *(void *)(v6 + 72) = a6;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 56) = a4;
  *(unsigned char *)(v6 + 104) = a3;
  *(void *)(v6 + 40) = result;
  return result;
}

BOOL sub_18AF38D94@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void *sub_18AF38DB0()
{
  return malloc(0x28uLL);
}

uint64_t sub_18AF38DD4()
{
  return v0;
}

void _s8CloudKit12CKSyncEngineC19FetchChangesContextV6reasonAC10SyncReasonOvg_0(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_18AF38E00()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF16D48();
  return v3();
}

void sub_18AF38ED8(void *a1, void *a2, unsigned __int8 a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_18AF17DC8(a1, a2, a3, a4, v12, v11, v10, v9, a9);
}

uint64_t sub_18AF38EF8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  return swift_bridgeObjectRetain();
}

unint64_t sub_18AF38F00()
{
  return 0xD000000000000011;
}

char *sub_18AF38F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  return &a13;
}

void sub_18AF38F2C(uint64_t a1@<X8>)
{
  *(void *)(v1 + 104) = *(void *)(*(void *)(v1 + 40) + 16 * a1 + 32);
}

uint64_t sub_18AF38FA4()
{
  return swift_release_n();
}

void sub_18AF38FD4(unint64_t a1@<X8>)
{
  *(void *)(v1 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
}

uint64_t sub_18AF38FF4()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_18AF39024()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

void sub_18AF39058()
{
  *(void *)(v0 + 16) = *(void *)(v1 + 16);
}

void sub_18AF39094()
{
  uint64_t v3 = v0;
  uint64_t v4 = v1;
  String.append(_:)(*(Swift::String *)&v3);
}

uint64_t sub_18AF390B0()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

char *sub_18AF390DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  return &a16;
}

uint64_t sub_18AF390F0()
{
  return *(void *)(v0 - 144);
}

uint64_t sub_18AF39104()
{
  return v0;
}

BOOL sub_18AF39118(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_18AF39134()
{
  return v0;
}

uint64_t sub_18AF39168()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AF39184()
{
  *(void *)(v1 + 16) = v0;
  *(unsigned char *)(v1 + 24) = 0;
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AF391A8()
{
  return swift_allocError();
}

uint64_t sub_18AF391E4()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

void *sub_18AF39200@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t sub_18AF3921C()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_18AF39264()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

__n128 sub_18AF392B4()
{
  return *(__n128 *)(v0 + 72);
}

BOOL sub_18AF392D0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_18AF392EC()
{
  *(void *)(v0 + 16) = v3;
  uint64_t v5 = v0 + 16 * v4;
  *(void *)(v5 + 32) = v1;
  *(void *)(v5 + 40) = v2;
}

__n128 sub_18AF39304()
{
  uint64_t v1 = (__n128 *)v0[6].n128_u64[0];
  unsigned __int8 v2 = v0[1].n128_u8[8];
  unint64_t v3 = v0[3].n128_u64[0];
  unsigned __int8 v4 = v0[3].n128_u8[8];
  unint64_t v5 = v0[4].n128_u64[0];
  unsigned __int8 v6 = v0[4].n128_u8[8];
  __n128 result = v0[2];
  v1->n128_u64[0] = v0[1].n128_u64[0];
  v1->n128_u8[8] = v2;
  v1[1] = result;
  v1[2].n128_u64[0] = v3;
  v1[2].n128_u8[8] = v4;
  v1[3].n128_u64[0] = v5;
  v1[3].n128_u8[8] = v6;
  return result;
}

uint64_t sub_18AF39344()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t sub_18AF39360(uint64_t a1)
{
  *(void *)(v1 - 120) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_18AF393BC()
{
  return swift_beginAccess();
}

void sub_18AF393D4()
{
  sub_18AF1E758(v0);
  _Block_release(v1);
}

void sub_18AF39404()
{
  uint64_t v1 = 62;
  unint64_t v2 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t sub_18AF39420(uint64_t result)
{
  *(void *)(result + 8) = v1;
  return result;
}

uint64_t sub_18AF3942C()
{
  return v0;
}

void *sub_18AF39444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(unsigned __int8 *)(a1 + 16);
  return sub_18AF883B8((uint64_t *)va, v12, v13, v14, a2);
}

uint64_t sub_18AF394A8()
{
  return 0;
}

void sub_18AF394BC()
{
  sub_18AF26470();
}

uint64_t sub_18AF394E0()
{
  return swift_dynamicCast();
}

uint64_t sub_18AF3951C(uint64_t a1, uint64_t *a2)
{
  return sub_18B002A54(a1, a2);
}

uint64_t sub_18AF39524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  sub_18AF30750();
  a21 = v24;
  a22 = v25;
  sub_18AF18F44();
  a20 = v22;
  a11 = *MEMORY[0x1E4F143B8];
  if (qword_1E91252D0 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  v22[65] = sub_18AF412A0(v26, (uint64_t)qword_1E91253B0);
  sub_18AF3098C();
  uint64_t v27 = (void *)Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  BOOL v29 = sub_18AF3A2EC(v28);
  unint64_t v30 = MEMORY[0x1E4FBC840];
  if (v29)
  {
    uint64_t v31 = (_DWORD *)sub_18AF2A5F0();
    sub_18AF16B9C();
    sub_18AFFD130();
    _DWORD *v31 = 136315138;
    if ((sub_18AF33AE8() & 1) == 0)
    {
      sub_18AF30C68();
      swift_task_reportUnexpectedExecutor();
    }
    swift_retain();
    uint64_t v32 = sub_18AF40CEC();
    sub_18AF404A0();
    v22[59] = sub_18AF4095C(v32, v30, &a10);
    sub_18AFFD7CC();
    sub_18AF38FA4();
    swift_bridgeObjectRelease();
    sub_18AFFBB34(&dword_18AF10000, v33, v23, "%s checking if the user record ID signed in has changed");
    sub_18AF31BF0();
    sub_18AF388F8();
    sub_18AF388F8();
  }
  else
  {

    sub_18AF38FA4();
  }
  uint64_t v34 = *(void *)(v22[60] + 128);
  v22[66] = v34;
  id v35 = objc_msgSend(*(id *)(v34 + 16), sel_lastKnownUserRecordID);
  if (v35)
  {
    uint64_t v36 = v35;
    objc_msgSend(v35, sel_copy);

    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    uint64_t v37 = (_OWORD *)sub_18AF40DB4();
    sub_18AF5F658(v37, v38);
    sub_18AF34EA0(0, &qword_1E91255F0);
    sub_18AFFC7C8();
    swift_dynamicCast();
    uint64_t v39 = v22[47];
  }
  else
  {
    uint64_t v39 = 0;
  }
  v22[67] = v39;
  uint64_t v40 = v22[62];
  uint64_t v41 = *(void **)(v22[60] + 144);
  v22[2] = v22;
  v22[7] = v22 + 45;
  v22[3] = sub_18AF26628;
  sub_18AF3A644();
  v22[26] = v40;
  sub_18AF3A5E0(v22 + 23);
  v22[68] = sub_18AF34EA0(0, &qword_1E91255F0);
  v22[69] = sub_18AF161EC(&qword_1E9125660);
  sub_18AF3A5D4();
  sub_18AF3A65C();
  uint64_t v42 = sub_18AF3A680();
  v43(v42);
  v22[19] = MEMORY[0x1E4F143A8];
  v22[20] = 1107296256;
  v22[21] = sub_18AF243F8;
  v22[22] = &unk_1ED7F5078;
  objc_msgSend(v41, sel_fetchUserRecordIDWithCompletionHandler_, v22 + 19);
  sub_18AF2ACD0();
  return MEMORY[0x1F41881E8](v44);
}

void sub_18AF39D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,os_activity_scope_state_s state,char a26)
{
}

void sub_18AF39ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_18AF39EEC(void *a1, void *a2, void *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (a1)
  {
    uint64_t v23 = 0;
    uint64_t v24 = &v23;
    uint64_t v25 = 0x3032000000;
    uint64_t v26 = sub_18AF13B10;
    uint64_t v27 = sub_18AF13848;
    id v28 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = &v17;
    uint64_t v19 = 0x3032000000;
    uint64_t v20 = sub_18AF13B10;
    uint64_t v21 = sub_18AF13848;
    id v22 = 0;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_18AF1304C;
    block[3] = &unk_1E54614B8;
    block[4] = a1;
    void block[5] = &v23;
    block[6] = &v17;
    block[7] = a2;
    dispatch_sync((dispatch_queue_t)qword_1EB279A98, block);
    if (!v18[5])
    {
      objc_initWeak(&location, a1);
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      char v7 = ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138412290;
        unint64_t v30 = a1;
        _os_log_debug_impl(&dword_18AF10000, v7, OS_LOG_TYPE_DEBUG, "Will fetch user record ID for container: %@", buf, 0xCu);
      }
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      v13[2] = sub_18B0364E4;
      v13[3] = &unk_1E54610D8;
      id v8 = v5;
      id v14 = v8;
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 3221225472;
      v10[2] = sub_18AF3CD9C;
      v10[3] = &unk_1E5461530;
      objc_copyWeak(v12, &location);
      v12[1] = a2;
      id v11 = v8;
      sub_18AF3C510(a1, 0, (void *)1, 0, v13, v10);

      objc_destroyWeak(v12);
      objc_destroyWeak(&location);
      goto LABEL_13;
    }
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    unsigned __int8 v6 = ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = (void *)v24[5];
      *(_DWORD *)long long buf = 138412290;
      unint64_t v30 = v9;
      _os_log_debug_impl(&dword_18AF10000, v6, OS_LOG_TYPE_DEBUG, "Have cached user IDs, returning %@", buf, 0xCu);
      if (!v5) {
        goto LABEL_13;
      }
    }
    else if (!v5)
    {
LABEL_13:
      _Block_object_dispose(&v17, 8);

      _Block_object_dispose(&v23, 8);
      goto LABEL_14;
    }
    (*((void (**)(id, uint64_t, void))v5 + 2))(v5, v24[5], 0);
    goto LABEL_13;
  }
LABEL_14:
}

void sub_18AF3A290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  objc_destroyWeak(v31);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v32 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18AF3A2D4()
{
  return Hasher.init(_seed:)();
}

BOOL sub_18AF3A2EC(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_18AF3A308()
{
  sub_18AF30E30();
  sub_18AF1A048();
  if (sub_18AF3A69C())
  {
    sub_18AFE0608();
    if (__sTestOverridesAvailable)
    {
      uint64_t v1 = v0[55];
      id v2 = objc_msgSend(self, sel_defaultCenter);
      objc_msgSend(v2, sel_postNotificationName_object_, @"com.apple.cloudd.willReloadAccount", v1);
    }
    unint64_t v3 = (void *)v0[64];
    uint64_t v4 = v0[60];
    v0[10] = v0;
    v0[11] = sub_18AFE0F78;
    sub_18AF3A644();
    v0[25] = v4;
    sub_18AF3A5E0(v0 + 22);
    sub_18AF161EC(&qword_1E9125660);
    CheckedContinuation.init(continuation:function:)();
    sub_18AFFD7A0();
    v5();
    v0[18] = MEMORY[0x1E4F143A8];
    v0[19] = 1107296256;
    v0[20] = sub_18AF4795C;
    v0[21] = &unk_1ED7F50C8;
    objc_msgSend(v3, sel_reloadAccountWithCompletionHandler_, v0 + 18);
  }
  else
  {
    unsigned __int8 v6 = (void *)v0[64];
    uint64_t v7 = v0[57];
    v0[2] = v0;
    v0[7] = v0 + 53;
    v0[3] = sub_18AF26538;
    sub_18AF3A644();
    v0[33] = v7;
    sub_18AF3A5E0(v0 + 30);
    sub_18AF34EA0(0, &qword_1E9125180);
    sub_18AF161EC(&qword_1E9125660);
    sub_18AF3A5D4();
    sub_18AF3A65C();
    uint64_t v8 = sub_18AF3A680();
    v9(v8);
    v0[26] = MEMORY[0x1E4F143A8];
    v0[27] = 1107296256;
    v0[28] = sub_18AF2606C;
    v0[29] = &unk_1ED7F50A0;
    objc_msgSend(v6, sel_accountInfoWithCompletionHandler_, v0 + 26);
  }
  sub_18AF37A90();
  return MEMORY[0x1F41881E8](v10);
}

uint64_t *sub_18AF3A5E0(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_18AF3A644()
{
  return swift_continuation_init();
}

uint64_t sub_18AF3A65C()
{
  return CheckedContinuation.init(continuation:function:)();
}

uint64_t sub_18AF3A680()
{
  return v0;
}

uint64_t sub_18AF3A69C()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + 256) + 20);
  os_unfair_lock_lock(v1);
  uint64_t v2 = (unsigned char *)sub_18AF40DC0();
  sub_18AF3A6F4(v2, v3);
  os_unfair_lock_unlock(v1);
  return v5;
}

unsigned char *sub_18AF3A6F4@<X0>(unsigned char *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_18AF38AFC(a1, a2);
}

void sub_18AF3A820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18AF3A838@<X0>(uint64_t a1@<X8>)
{
  return sub_18AF6FC30(0, (unint64_t)(a1 + 63) >> 6, v1);
}

uint64_t sub_18AF3A858()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t sub_18AF3A878(uint64_t result)
{
  *(void *)(v2 + 120) = result;
  *(unsigned char *)(result + 16) = v4;
  *(void *)(result + 24) = v1;
  *(void *)(result + 32) = v3;
  return result;
}

uint64_t sub_18AF3A88C()
{
  return 0x6E45636E79534B43;
}

uint64_t sub_18AF3A8D0(uint64_t result)
{
  *(void *)(v1 + 128) = result;
  return result;
}

uint64_t sub_18AF3A8DC@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 120) = a1;
  return swift_task_alloc();
}

uint64_t sub_18AF3A8F8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = sub_18AF3AA50();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (sub_18AF3AA50() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_18AF3A9A8()
{
  return String.init<A>(_:)();
}

void sub_18AF3A9D4()
{
  uint64_t v1 = 0x6F6974656C656420;
  unint64_t v2 = 0xEB000000003D736ELL;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t sub_18AF3AA00()
{
  return v0;
}

uint64_t sub_18AF3AA14(uint64_t result)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * ((result - 32) / v3);
  return result;
}

uint64_t sub_18AF3AA28()
{
  return *(void *)(v0 + 120) + 1;
}

uint64_t sub_18AF3AA38(uint64_t result)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * ((result - 32) / 16);
  return result;
}

uint64_t sub_18AF3AA50()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

unint64_t sub_18AF3AA6C()
{
  unint64_t result = qword_1E9125378;
  if (!qword_1E9125378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9125378);
  }
  return result;
}

id sub_18AF3B968(void *a1, uint64_t a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  char v4 = a3;
  unsigned __int8 v5 = (void *)MEMORY[0x1E4F1CA48];
  uint64_t v9 = objc_msgSend_count(a1, v6, v7, v8);
  BOOL v12 = objc_msgSend_arrayWithCapacity_(v5, v10, v9, v11);
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v13 = a1;
  uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v24, (uint64_t)v28, 16);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v25;
    do
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        if (*(void *)v25 != v17) {
          objc_enumerationMutation(v13);
        }
        uint64_t v19 = v4[2](v4, *(void *)(*((void *)&v24 + 1) + 8 * i));
        objc_msgSend_addObject_(v12, v20, (uint64_t)v19, v21, (void)v24);
      }
      uint64_t v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v22, (uint64_t)&v24, (uint64_t)v28, 16);
    }
    while (v16);
  }

  return v12;
}

void sub_18AF3C510(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  id v100 = a4;
  id v101 = a5;
  id v102 = a6;
  if (a1)
  {
    objc_initWeak(&location, a1);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = sub_18B02F204;
    aBlock[3] = &unk_1E5461010;
    objc_copyWeak(v113, &location);
    v113[1] = a3;
    id v110 = v100;
    char v114 = a2;
    id v111 = v101;
    id v11 = v102;
    id v112 = v11;
    BOOL v12 = _Block_copy(aBlock);
    v103[0] = MEMORY[0x1E4F143A8];
    v103[1] = 3221225472;
    uint64_t v104 = sub_18AF3CC34;
    uint64_t v105 = &unk_1E5461038;
    char v108 = a2;
    id v106 = v11;
    id v98 = v12;
    id v107 = v98;
    v99 = v103;
    uint64_t v13 = objc_opt_class();
    int isMemberOfClass = objc_msgSend_isMemberOfClass_(a1, v14, v13, v15);
    if (__sTestOverridesAvailable) {
      int v20 = isMemberOfClass;
    }
    else {
      int v20 = 0;
    }
    if (v20 == 1 && byte_1E912FED0)
    {
      uint64_t v21 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], v17, v18, v19);
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v21, v22, (uint64_t)sel__getContainerScopedDaemonProxyCreatorSynchronous_completionHandler_, (uint64_t)a1, @"CKContainer.m", 749, @"In a testing process, some silly code decided to xpc from a non-test CKContainer");
    }
    uint64_t v23 = objc_msgSend_personaIdentifier(a1, v17, v18, v19);
    long long v27 = objc_msgSend_sharedManager(MEMORY[0x1E4FB36F8], v24, v25, v26);
    uint64_t v31 = objc_msgSend_currentPersona(v27, v28, v29, v30);

    uint64_t v35 = objc_msgSend_userPersonaUniqueString(v31, v32, v33, v34);
    if (objc_msgSend_isPersonaOverrideSet(a1, v36, v37, v38))
    {
      if (v35 | v23 && (objc_msgSend_isEqualToString_((void *)v35, v39, v23, v41) & 1) == 0)
      {
        uint64_t v45 = objc_msgSend_sharedManager(MEMORY[0x1E4FB36F8], v42, v43, v44);
        uint64_t v49 = objc_msgSend_currentPersona(v45, v46, v47, v48);
        v97 = objc_msgSend_generateAndRestorePersonaContextWithPersonaUniqueString_(v49, v50, v23, v51);

        uint64_t v55 = objc_msgSend_sharedManager(MEMORY[0x1E4FB36F8], v52, v53, v54);
        uint64_t v59 = objc_msgSend_currentPersona(v55, v56, v57, v58);
        uint64_t v63 = objc_msgSend_userPersonaUniqueString(v59, v60, v61, v62);

        if (ck_log_initialization_predicate != -1) {
          dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
        }
        unint64_t v64 = ck_log_facility_ck;
        if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_INFO))
        {
          unint64_t v65 = @"adopting persona ";
          *(_DWORD *)long long buf = 138544386;
          if (!v23) {
            unint64_t v65 = @"dropping persona";
          }
          *(void *)&uint8_t buf[4] = v65;
          *(_WORD *)&buf[12] = 2114;
          uint64_t v66 = &stru_1ED7F5C98;
          if (v23) {
            uint64_t v66 = (__CFString *)v23;
          }
          *(void *)&buf[14] = v66;
          *(_WORD *)&buf[22] = 2114;
          unsigned __int8 v119 = v97;
          *(_WORD *)uint64_t v120 = 2112;
          *(void *)&v120[2] = v35;
          *(_WORD *)&v120[10] = 2112;
          *(void *)&v120[12] = v63;
          _os_log_impl(&dword_18AF10000, v64, OS_LOG_TYPE_INFO, "Container %{public}@%{public}@. Error: %{public}@. Persona %@ -> %@.", buf, 0x34u);
        }
      }
    }
    else if (objc_msgSend_isDataSeparatedPersona(v31, v39, v40, v41))
    {
      if (ck_log_initialization_predicate != -1) {
        dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
      }
      id v67 = (void *)ck_log_facility_ck;
      if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
      {
        uint64_t v92 = v67;
        uint64_t v96 = objc_msgSend_userPersonaUniqueString(v31, v93, v94, v95);
        *(_DWORD *)long long buf = 138543618;
        *(void *)&uint8_t buf[4] = a1;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v96;
        _os_log_error_impl(&dword_18AF10000, v92, OS_LOG_TYPE_ERROR, "No effective persona associated with the container %{public}@ but adopter is currently on one: %@.", buf, 0x16u);
      }
    }
    uint64_t v68 = a1;
    objc_sync_enter(v68);
    if (!v68[27])
    {
      objc_initWeak((id *)buf, v68);
      uint64_t v72 = objc_msgSend_defaultCenter(MEMORY[0x1E4F28EB8], v69, v70, v71);
      v116[0] = MEMORY[0x1E4F143A8];
      v116[1] = 3221225472;
      v116[2] = sub_18B02F528;
      v116[3] = &unk_1E5461060;
      objc_copyWeak(&v117, (id *)buf);
      uint64_t v74 = objc_msgSend_addObserverForName_object_queue_usingBlock_(v72, v73, @"CKXPCConnectionInterrupted", 0, 0, v116);
      objc_storeStrong(v68 + 27, v74);

      objc_destroyWeak(&v117);
      objc_destroyWeak((id *)buf);
    }
    objc_sync_exit(v68);

    objc_msgSend_lock(v68[30], v75, v76, v77);
    if (*((unsigned char *)v68 + 58)) {
      id v81 = v68[26];
    }
    else {
      id v81 = 0;
    }
    objc_msgSend_unlock(v68[30], v78, v79, v80, v97);
    if (v81)
    {
      v104((uint64_t)v99, v81, 0);
    }
    else
    {
      id v82 = sub_18B11AB1C([CKContainerCallbackProxy alloc], (uint64_t)v68);
      uint64_t v86 = objc_msgSend_connection(v68, v83, v84, v85);
      uint64_t v90 = objc_msgSend_setupInfo(v68, v87, v88, v89);
      *(void *)long long buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = sub_18B02F614;
      unsigned __int8 v119 = &unk_1E5461088;
      *(void *)uint64_t v120 = v68;
      *(void *)&v120[8] = v99;
      objc_msgSend_getContainerScopedDaemonProxyCreatorForContainerSetupInfo_exportedProxy_synchronous_completionHandler_(v86, v91, (uint64_t)v90, (uint64_t)v82, a2, buf);
    }
    objc_destroyWeak(v113);
    objc_destroyWeak(&location);
  }
}

void sub_18AF3CBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id a33)
{
  objc_destroyWeak(v34);
  objc_destroyWeak((id *)(v35 - 176));
  objc_sync_exit(v33);
  objc_destroyWeak(location);
  objc_destroyWeak(&a33);
  _Unwind_Resume(a1);
}

void sub_18AF3CC34(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  id v7 = a3;
  if (v11)
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    if (*(unsigned char *)(a1 + 48)) {
      objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(v11, v5, v8, v6);
    }
    else {
    uint64_t v10 = objc_msgSend_remoteObjectProxyWithErrorHandler_(v11, v5, v8, v6);
    }
    (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_18AF3CD9C(id *a1, void *a2)
{
  id v3 = a2;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_18AF2409C;
  v6[3] = &unk_1E5461508;
  objc_copyWeak(v8, a1 + 5);
  v8[1] = a1[6];
  id v7 = a1[4];
  objc_msgSend_importantUserIDsWithCompletionHandler_(v3, v4, (uint64_t)v6, v5);

  objc_destroyWeak(v8);
}

void sub_18AF3CE5C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18AF3CE70(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_ckShortDescription(a2, (const char *)a2, a3, a4);
}

uint64_t sub_18AF3CE78(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_ckShortDescription(a2, (const char *)a2, a3, a4);
}

__CFString *CKTernaryDescription(uint64_t a1)
{
  uint64_t v1 = @"Not Set";
  if (a1 == 1) {
    uint64_t v1 = @"Yes";
  }
  if (a1) {
    return v1;
  }
  else {
    return @"No";
  }
}

__CFString *CKStringFromDeviceToDeviceEncryptionStatus(uint64_t a1)
{
  if (a1)
  {
    char v1 = a1;
    uint64_t v2 = objc_opt_new();
    uint64_t v5 = v2;
    if (v1) {
      objc_msgSend_addObject_(v2, v3, @"account", v4);
    }
    if ((v1 & 2) != 0) {
      objc_msgSend_addObject_(v5, v3, @"device", v4);
    }
    uint64_t v6 = NSString;
    id v7 = objc_msgSend_componentsJoinedByString_(v5, v3, @"|", v4);
    objc_msgSend_stringWithFormat_(v6, v8, @"(%@)", v9, v7);
    uint64_t v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v10 = @"(none)";
  }

  return v10;
}

uint64_t sub_18AF3D45C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28)
{
  sub_18AF41768();
  a27 = v30;
  a28 = v31;
  sub_18AF4175C();
  a26 = v28;
  uint64_t v32 = v28 + 40;
  uint64_t v90 = v28 + 49;
  uint64_t v91 = (uint64_t)(v28 + 50);
  uint64_t v33 = (void *)v28[53];
  v28[68] = v33;
  swift_retain_n();
  id v34 = v33;
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  uint64_t v92 = v34;
  if (sub_18AF42D04(v36))
  {
    a12 = v28 + 40;
    uint64_t v37 = sub_18AF402C8();
    a10 = (void *)sub_18AF3F3B4();
    a11 = sub_18AF16B9C();
    a17 = a11;
    *(_DWORD *)uint64_t v37 = 136315394;
    if ((sub_18AF33AE8() & 1) == 0)
    {
      sub_18AF30C68();
      swift_task_reportUnexpectedExecutor();
    }
    swift_retain();
    uint64_t v38 = sub_18AF40CEC();
    unint64_t v40 = v39;
    swift_release();
    v28[50] = sub_18AF4095C(v38, v40, &a17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_18AF38FA4();
    *(_WORD *)(v37 + 12) = 2112;
    unint64_t v29 = v37 + 22;
    id v34 = v92;
    v28[51] = v92;
    id v41 = v92;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *a10 = v92;

    _os_log_impl(&dword_18AF10000, v35, v36, "%s received updated account info: %@", (uint8_t *)v37, 0x16u);
    sub_18AF161EC((uint64_t *)&unk_1E9125610);
    sub_18AF3F7A8();
    sub_18AF388F8();
    sub_18AF3F7A8();
    sub_18AF388F8();
    sub_18AF388F8();

    uint64_t v32 = v28 + 40;
  }
  else
  {
    sub_18AF38FA4();
  }
  uint64_t v42 = (unsigned char *)(v28[55] + 264);
  sub_18AF393BC();
  if (*v42 == 1 && (objc_msgSend(v34, sel_deviceToDeviceEncryptionAvailability) & 2) != 0)
  {
    sub_18AF3DE08();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.debug.getter();
    if (sub_18AF42D04(v44))
    {
      a12 = v32;
      uint64_t v45 = (_DWORD *)sub_18AF2A5F0();
      a11 = sub_18AF16B9C();
      a17 = a11;
      *uint64_t v45 = 136315138;
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      sub_18AFFC998();
      uint64_t v46 = sub_18AF40CEC();
      sub_18AF47718();
      v28[49] = sub_18AF4095C(v46, v29, &a17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_18AF38FA4();
      sub_18AFFBB1C(&dword_18AF10000, v35, v44, "%s we were waiting for device to device encryption, and our patience was rewarded. Now we have it! Let's schedule a sync.");
      sub_18AF3F7A8();
      sub_18AF388F8();
      sub_18AF388F8();

      id v34 = v92;
    }
    else
    {
      sub_18AF38FA4();
    }
    unsigned char *v42 = 0;
    int v43 = 1;
  }
  else
  {
    int v43 = 0;
  }
  uint64_t v47 = (unsigned char *)(v28[55] + 265);
  sub_18AF3DDFC();
  sub_18AF393BC();
  if (*v47 == 1 && (objc_msgSend(v34, sel_needsToVerifyTerms) & 1) == 0)
  {
    sub_18AF3DE08();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.debug.getter();
    if (sub_18AF42D04(v48))
    {
      uint64_t v49 = (_DWORD *)sub_18AF2A5F0();
      uint64_t v91 = sub_18AF16B9C();
      a17 = v91;
      _DWORD *v49 = 136315138;
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      sub_18AFFC998();
      sub_18AF40CEC();
      uint64_t v50 = sub_18AF41328();
      v28[48] = sub_18AF41370(v50, v51, &a17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_18AF38FA4();
      sub_18AFFBB1C(&dword_18AF10000, v35, v48, "%s we were waiting for the account to verify terms, and our patience was rewarded. Now we have it! Let's schedule a sync");
      sub_18AF3F7A8();
      sub_18AF388F8();
      sub_18AF388F8();

      id v34 = v92;
    }
    else
    {
      sub_18AF38FA4();
    }
    *uint64_t v47 = 0;
    int v43 = 1;
  }
  uint64_t v52 = v28[55];
  sub_18AF18528();
  uint64_t v53 = *(void **)(v52 + 304);
  if (v53) {
    id v54 = objc_msgSend(v53, sel_accountStatus);
  }
  else {
    id v54 = 0;
  }
  if (v54 != objc_msgSend(v34, sel_accountStatus))
  {
    sub_18AF3DE08();
    id v55 = v34;
    uint64_t v56 = Logger.logObject.getter();
    uint64_t v35 = static os_log_type_t.default.getter();
    if (sub_18AF3DD94((os_log_type_t)v35))
    {
      LODWORD(a12) = v35;
      LODWORD(v90) = v43;
      uint64_t v91 = (uint64_t)(v28 + 45);
      a9 = v28 + 46;
      a10 = v28 + 47;
      uint64_t v57 = sub_18AF16B9C();
      a11 = sub_18AF3DE24();
      a17 = a11;
      *(_DWORD *)uint64_t v57 = 136315650;
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      swift_retain();
      sub_18AF40CEC();
      uint64_t v58 = sub_18AF3DDC4();
      v28[45] = sub_18AF3DDAC(v58, v59, &a17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_18AF38FA4();
      *(_WORD *)(v57 + 12) = 2080;
      uint64_t v60 = CKStringFromAccountStatus((unint64_t)v54);
      uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v63 = v62;

      v28[46] = sub_18AF4095C(v61, v63, &a17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v57 + 22) = 2080;
      unint64_t v64 = CKStringFromAccountStatus((unint64_t)objc_msgSend(v55, sel_accountStatus));
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v54 = v65;

      v28[47] = sub_18AF4095C((uint64_t)v35, (unint64_t)v54, &a17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_18AF10000, v56, (os_log_type_t)a12, "%s account status changed from (%s) to (%s)", (uint8_t *)v57, 0x20u);
      swift_arrayDestroy();
      sub_18AF388F8();
      sub_18AF388F8();

      id v34 = v92;
    }
    else
    {
      sub_18AF38FA4();
    }
  }
  id v66 = v34;
  uint64_t v67 = sub_18AF42FE8();
  sub_18AF3F340(v67);
  if (v43)
  {
    sub_18AF3DE08();
    uint64_t v68 = (void *)Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.debug.getter();
    if (sub_18AF3A2EC(v69))
    {
      uint64_t v70 = (_DWORD *)sub_18AF2A5F0();
      a17 = sub_18AF16B9C();
      *uint64_t v70 = 136315138;
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      sub_18AFFBDD8();
      sub_18AF40CEC();
      uint64_t v71 = sub_18AF37A48();
      v28[44] = sub_18AF403F4(v71, v72, &a17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_18AF38FA4();
      sub_18AFFBB34(&dword_18AF10000, v73, (os_log_type_t)v54, "%s scheduling sync after receiving updated account info needed to sync");
      sub_18AF19F48();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {
      sub_18AF38FA4();
    }

    uint64_t v84 = v28[56];
    uint64_t v85 = type metadata accessor for Date();
    sub_18AF1826C(v84, v86, v87, v85);
    uint64_t v88 = (void *)swift_task_alloc();
    v28[69] = v88;
    *uint64_t v88 = v28;
    v88[1] = sub_18AFE11C0;
    sub_18AF41784(v28[56]);
    sub_18AF348E4();
    return sub_18AF2932C();
  }
  else
  {

    if (__sTestOverridesAvailable)
    {
      id v74 = objc_msgSend(self, sel_defaultCenter);
      if (qword_1E9125730 != -1) {
        swift_once();
      }
      objc_msgSend(v74, sel_postNotificationName_object_, qword_1E9126D78, v28[55]);
    }
    sub_18AF3DDE0();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_18AF16D48();
    sub_18AF348E4();
    return v76(v75, v76, v77, v78, v79, v80, v81, v82, a9, a10, a11, a12, v90, v28 + 48, v91, v92, a17, a18, a19, a20);
  }
}

BOOL sub_18AF3DD94(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_18AF3DDAC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_18AF4095C(v4, v3, a3);
}

uint64_t sub_18AF3DDC4()
{
  return swift_release();
}

uint64_t sub_18AF3DDE0()
{
  return swift_task_dealloc();
}

uint64_t sub_18AF3DDFC()
{
  return v0;
}

uint64_t sub_18AF3DE08()
{
  return swift_retain_n();
}

uint64_t sub_18AF3DE24()
{
  return swift_slowAlloc();
}

uint64_t sub_18AF3DE3C(uint64_t a1, void *a2, uint64_t a3)
{
  if (!a1) {
    return 0;
  }
  uint64_t v4 = sub_18AF3DEF4(a1, a2);
  if (v4)
  {
    uint64_t v8 = (void *)v4;
    if ((objc_opt_respondsToSelector() & 1) == 0)
    {
      uint64_t v12 = objc_msgSend_null(MEMORY[0x1E4F1CA98], v9, v10, v11);

      uint64_t v8 = (void *)v12;
      if (!v12) {
        goto LABEL_9;
      }
    }
LABEL_7:
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      a3 = objc_msgSend_BOOLValue(v8, v13, v14, v15);
    }
    goto LABEL_9;
  }
  uint64_t v8 = objc_msgSend_null(MEMORY[0x1E4F1CA98], v5, v6, v7);
  if (v8) {
    goto LABEL_7;
  }
LABEL_9:

  return a3;
}

id sub_18AF3DEF4(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (a1)
  {
    uint64_t v7 = objc_msgSend_CKUserDefaults(CKUserDefaults, v3, v4, v5);
    uint64_t v10 = objc_msgSend_dictionaryForKey_(v7, v8, @"BehaviorOptions", v9);

    if (v10)
    {
      uint64_t v13 = objc_msgSend_objectForKeyedSubscript_(v10, v11, (uint64_t)v6, v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }

  return v13;
}

uint64_t sub_18AF3DF98()
{
  uint64_t v59 = v0;
  char v1 = *(void **)(v0 + 480);
  uint64_t v2 = *(void **)(v0 + 336);
  if (!v1)
  {
    sub_18AF3F3E4();
    sub_18AF3E5B4();
    id v20 = v2;
    sub_18AF3E59C();
    sub_18AF3E5E4();
    id v21 = v20;
    id v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = sub_18AF402C8();
      uint64_t v52 = sub_18AF182D8();
      *(_DWORD *)uint64_t v24 = 136315394;
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      sub_18AF3F4F0();
      uint64_t v25 = *(void **)(v0 + 336);
      uint64_t v45 = *(void *)(v0 + 344);
      uint64_t v47 = v26;
      char v27 = *(unsigned char *)(v0 + 82);
      char v28 = *(unsigned char *)(v0 + 81);
      uint64_t v29 = *(void *)(v0 + 328);
      swift_retain();
      sub_18AF40CEC();
      sub_18AF47718();
      uint64_t v30 = sub_18AF29B74();
      *(void *)(v0 + 272) = sub_18AF4095C(v30, v31, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_18AF38FA4();
      *(_WORD *)(v24 + 12) = 2080;
      char v53 = v28;
      uint64_t v54 = v29;
      char v55 = v27;
      uint64_t v56 = v25;
      uint64_t v57 = v45;
      uint64_t v58 = v47;
      unint64_t v33 = sub_18AF3F528();
      *(void *)(v0 + 224) = sub_18AF4095C(v33, v34, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_18AF474AC();

      sub_18AF3F474();
      swift_bridgeObjectRelease_n();
      sub_18AF403B4(&dword_18AF10000, v22, v23, "%s finished fetching changes with context %s");
      swift_arrayDestroy();
      sub_18AF388F8();
      sub_18AF388F8();
      swift_release();

      sub_18AF4039C();
      sub_18AF228C0();
    }
    else
    {
      unint64_t v40 = *(void **)(v0 + 336);

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release();
      swift_release_n();
    }
    swift_bridgeObjectRelease_n();
    sub_18AF384DC();
LABEL_18:
    sub_18AF3F4A4();
    __asm { BRAA            X1, X16 }
  }
  id v3 = v1;
  sub_18AF3F3E4();
  sub_18AF3E5B4();
  id v4 = v2;
  sub_18AF3E59C();
  sub_18AF3E5E4();
  id v5 = v3;
  id v6 = v4;
  id v7 = v5;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (sub_18AF3DD94(v9))
  {
    os_log_type_t v49 = v9;
    uint64_t v50 = v8;
    uint64_t v51 = v7;
    uint64_t v10 = sub_18AF16B9C();
    os_log_type_t v48 = (void *)sub_18AF3F3B4();
    uint64_t v52 = sub_18AF182D8();
    *(_DWORD *)uint64_t v10 = 136315650;
    if ((sub_18AF33AE8() & 1) == 0)
    {
      sub_18AF30C68();
      swift_task_reportUnexpectedExecutor();
    }
    sub_18AF3F4F0();
    uint64_t v2 = *(void **)(v0 + 336);
    uint64_t v44 = *(void *)(v0 + 344);
    uint64_t v46 = v11;
    char v43 = *(unsigned char *)(v0 + 82);
    char v12 = *(unsigned char *)(v0 + 81);
    uint64_t v13 = *(void *)(v0 + 328);
    swift_retain();
    uint64_t v14 = sub_18AF40CEC();
    sub_18AF3F510();
    *(void *)(v0 + 232) = sub_18AF4095C(v14, (unint64_t)v4, &v52);
    sub_18AF3F4C0();
    swift_bridgeObjectRelease();
    sub_18AF38FA4();
    *(_WORD *)(v10 + 12) = 2080;
    char v53 = v12;
    uint64_t v54 = v13;
    char v55 = v43;
    uint64_t v56 = v2;
    uint64_t v57 = v44;
    uint64_t v58 = v46;
    unint64_t v15 = sub_18AF3F528();
    *(void *)(v0 + 240) = sub_18AF4095C(v15, v16, &v52);
    sub_18AF3F48C();
    swift_bridgeObjectRelease();
    sub_18AF3E5CC();

    sub_18AF3F45C();
    sub_18AF3F474();
    *(_WORD *)(v10 + 22) = 2112;
    id v7 = v51;
    id v17 = v51;
    uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 248) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v48 = v18;

    uint64_t v19 = v50;
    sub_18AF3F4D8(&dword_18AF10000, v50, v49, "%s error fetching changes with context %s: %@");
    sub_18AF161EC((uint64_t *)&unk_1E9125610);
    sub_18AF3F3CC();
    sub_18AF388F8();
    sub_18AF40360();
    sub_18AF388F8();
    sub_18AF388F8();
  }
  else
  {
    uint64_t v19 = *(NSObject **)(v0 + 352);
    uint64_t v35 = *(void **)(v0 + 336);
    swift_release_n();

    sub_18AF307A4();
    sub_18AF32614();

    sub_18AF3E5CC();
  }
  if (*(unsigned char *)(v0 + 81) != 1)
  {
    sub_18AF2289C();
    sub_18AF228C0();

    sub_18AF4039C();
    swift_bridgeObjectRelease_n();
    swift_release();

    sub_18AF16D48();
    goto LABEL_18;
  }
  id v36 = v7;
  uint64_t v37 = (void *)swift_task_alloc();
  *(void *)(v0 + 504) = v37;
  *uint64_t v37 = v0;
  v37[1] = sub_18AF1F7C8;
  sub_18AF41784(*(void *)(v0 + 480));
  sub_18AF3F4A4();
  return sub_18AF2926C();
}

uint64_t sub_18AF3E59C()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_18AF3E5B4()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_18AF3E5CC()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_18AF3E5E4()
{
  return swift_bridgeObjectRetain_n();
}

void sub_18AF3E5FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_18AF1855C();
  a19 = v21;
  a20 = v22;
  uint64_t v24 = v23;
  uint64_t v25 = type metadata accessor for CancellationError();
  sub_18AF22CB0();
  uint64_t v133 = v26;
  MEMORY[0x1F4188790](v27);
  sub_18AF19290();
  uint64_t v137 = v29 - v28;
  uint64_t v30 = sub_18AF161EC(&qword_1E9125470);
  uint64_t v31 = sub_18AF19284(v30);
  MEMORY[0x1F4188790](v31);
  sub_18AF30B3C();
  unint64_t v34 = (uint64_t *)(v32 - v33);
  MEMORY[0x1F4188790](v35);
  uint64_t v37 = (char *)&v130 - v36;
  uint64_t v38 = type metadata accessor for Date();
  sub_18AF22CB0();
  uint64_t v40 = v39;
  MEMORY[0x1F4188790](v41);
  sub_18AF30B3C();
  MEMORY[0x1F4188790](v42);
  MEMORY[0x1F4188790](v43);
  uint64_t v45 = (uint64_t *)((char *)&v130 - v44);
  if (!v24) {
    goto LABEL_79;
  }
  uint64_t v138 = v25;
  uint64_t v139 = v20;
  id v130 = v24;
  uint64_t v46 = (void *)_convertErrorToNSError(_:)();
  id v47 = CKEarliestStartDateAfterError(v46);

  if (!v47)
  {
    sub_18AF3F414((uint64_t)v37, 1);
    goto LABEL_11;
  }
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v48 = *(void *)(v40 + 32);
  sub_18AF43E0C();
  ((void (*)(void))v48)();
  sub_18AF3F414((uint64_t)v37, 0);
  if (sub_18AF436E0((uint64_t)v37, 1, v38) == 1)
  {
LABEL_11:
    sub_18AF401EC((uint64_t)v37, &qword_1E9125470);
    os_log_type_t v49 = (_DWORD *)v139;
    goto LABEL_14;
  }
  sub_18AF43E0C();
  ((void (*)(void))v48)();
  sub_18AF476B8();
  os_log_type_t v49 = (_DWORD *)v139;
  if (!v50) {
LABEL_81:
  }
    swift_once();
  uint64_t v51 = type metadata accessor for Logger();
  sub_18AF412A0(v51, (uint64_t)qword_1E91253B0);
  uint64_t v52 = *(void (**)(void))(v40 + 16);
  sub_18AFFD8B8();
  unint64_t v136 = v53;
  sub_18AF475F0();
  v52();
  sub_18AF3F3E4();
  uint64_t v54 = Logger.logObject.getter();
  int v55 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v54, (os_log_type_t)v55))
  {
    LODWORD(v132) = v55;
    v134 = v54;
    uint64_t v135 = v52;
    uint64_t v56 = sub_18AF402C8();
    v131 = (void *)sub_18AF182D8();
    v142[0] = v131;
    *(_DWORD *)uint64_t v56 = 136315394;
    if ((sub_18AF41120() & 1) == 0)
    {
      sub_18AF30C68();
      sub_18AFFD824();
    }
    uint64_t v48 = v56 + 4;
    swift_retain();
    sub_18AF40CEC();
    swift_release();
    uint64_t v57 = sub_18AF36520();
    uint64_t v143 = sub_18AF4095C(v57, v58, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v56 + 12) = 2080;
    sub_18AF38368(&qword_1E9125008, MEMORY[0x1E4F27928]);
    uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v143 = sub_18AF4095C(v60, v61, (uint64_t *)v142);
    os_log_type_t v49 = (_DWORD *)v139;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v62 = sub_18AFFC874();
    ((void (*)(uint64_t))(v56 + 4))(v62);
    unint64_t v63 = v134;
    sub_18AF3F42C(&dword_18AF10000, v134, (os_log_type_t)v132, "%s setting earliestStartDate from last error %s");
    sub_18AF41310();
    sub_18AF388F8();
    sub_18AF388F8();

    uint64_t v52 = v135;
  }
  else
  {
    sub_18AF3F3FC();
    uint64_t v64 = sub_18AFFC874();
    ((void (*)(uint64_t))v48)(v64);
  }
  sub_18AF475F0();
  v52();
  sub_18AF3F414((uint64_t)v34, 0);
  uint64_t v65 = (uint64_t)v49 + OBJC_IVAR____TtC8CloudKit10SyncEngine_earliestStartDateForSchedulerActivities;
  sub_18AF41158();
  sub_18AFFB674((uint64_t)v34, v65, &qword_1E9125470);
  swift_endAccess();
  ((void (*)(uint64_t *, uint64_t))v48)(v45, v38);
LABEL_14:
  uint64_t v40 = v137;
  uint64_t v45 = v130;
  v142[0] = v130;
  type metadata accessor for CKError(0);
  uint64_t v38 = v66;
  uint64_t v137 = sub_18AF38368((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);
  _BridgedStoredNSError.code.getter();
  switch(v143)
  {
    case 115:
      if (qword_1E91252D0 != -1) {
        swift_once();
      }
      uint64_t v120 = type metadata accessor for Logger();
      sub_18AF412A0(v120, (uint64_t)qword_1E91253B0);
      sub_18AF3F3E4();
      uint64_t v121 = (void *)Logger.logObject.getter();
      os_log_type_t v122 = static os_log_type_t.debug.getter();
      if (sub_18AF32640(v122))
      {
        v123 = (_DWORD *)sub_18AF2A5F0();
        v142[0] = (id)sub_18AF16B9C();
        _DWORD *v123 = 136315138;
        if ((sub_18AF41120() & 1) == 0)
        {
          sub_18AF30C68();
          sub_18AFFD824();
        }
        os_log_type_t v49 = v123 + 1;
        swift_retain();
        uint64_t v124 = sub_18AF40CEC();
        unint64_t v126 = v125;
        swift_release();
        uint64_t v127 = sub_18AF4095C(v124, v126, (uint64_t *)v142);
        sub_18AFFC6D4(v127);
        swift_bridgeObjectRelease();
        sub_18AF3F3FC();
        sub_18AFFBB34(&dword_18AF10000, v128, v122, "%s setting isWaitingForAccountToVerifyTerms from last error");
        sub_18AF3F3CC();
        sub_18AF388F8();
        sub_18AF388F8();
      }
      else
      {

        sub_18AF3F3FC();
      }
      sub_18AF393BC();
      *((unsigned char *)v49 + 265) = 1;
      goto LABEL_79;
    case 9:
    case 36:
      sub_18AF18528();
      if (*((void *)v49 + 38))
      {
        if (qword_1E91252D0 != -1) {
          swift_once();
        }
        uint64_t v100 = type metadata accessor for Logger();
        sub_18AF412A0(v100, (uint64_t)qword_1E91253B0);
        id v101 = v45;
        sub_18AF3F3E4();
        id v102 = v101;
        v103 = Logger.logObject.getter();
        os_log_type_t v104 = static os_log_type_t.info.getter();
        if (sub_18AF3F328(v104))
        {
          uint64_t v105 = sub_18AF402C8();
          id v106 = (void *)sub_18AF3F3B4();
          uint64_t v139 = sub_18AF16B9C();
          uint64_t v143 = v139;
          *(_DWORD *)uint64_t v105 = 136315394;
          if ((sub_18AF41120() & 1) == 0)
          {
            sub_18AF30C68();
            sub_18AFFD824();
          }
          swift_retain();
          sub_18AF40CEC();
          uint64_t v107 = swift_release();
          uint64_t v141 = sub_18AF3F444(v107, v108, &v143);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_18AF3F3FC();
          *(_WORD *)(v105 + 12) = 2112;
          uint64_t v109 = v102;
          uint64_t v110 = _swift_stdlib_bridgeErrorToNSError();
          uint64_t v141 = v110;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v106 = v110;

          sub_18AF3F42C(&dword_18AF10000, v103, v104, "%s unsetting account info after account unavailability error: %@");
          sub_18AF161EC((uint64_t *)&unk_1E9125610);
          sub_18AF3F3CC();
          sub_18AF388F8();
          sub_18AF3F7A8();
          sub_18AF388F8();
          sub_18AF388F8();
        }
        else
        {
          sub_18AF3F3FC();
        }
        sub_18AF3F340(0);

        goto LABEL_79;
      }
      goto LABEL_64;
    case 110:
      if (qword_1E91252D0 != -1) {
        goto LABEL_83;
      }
      goto LABEL_59;
    case 111:
      sub_18AFEE520();
      goto LABEL_64;
  }
  if (v143 != 2)
  {
LABEL_64:

    goto LABEL_79;
  }
  uint64_t v67 = related decl 'e' for CKErrorCode.partialErrorsByItemID.getter((uint64_t)v45);
  if (!v67)
  {
LABEL_74:

    goto LABEL_79;
  }
  uint64_t v48 = v67;
  uint64_t v68 = 0;
  sub_18AFFD4D8();
  uint64_t v135 = v69;
  sub_18AF3093C();
  uint64_t v72 = v71 & v70;
  unint64_t v136 = (unint64_t)(v73 + 63) >> 6;
  v134 = *MEMORY[0x1E4F28568];
  unint64_t v34 = &qword_1E9125660;
  v133 += 8;
  long long v132 = xmmword_18B1F16B0;
  sub_18AFFBDF0();
  sub_18AFFD350(v74);
  while (1)
  {
    os_log_type_t v49 = (_DWORD *)v138;
    if (v72)
    {
      sub_18AFFC154();
      uint64_t v76 = v75 | (v68 << 6);
      goto LABEL_46;
    }
    if (__OFADD__(v68, 1))
    {
      __break(1u);
      goto LABEL_81;
    }
    sub_18AFFD338();
    if (v77 == v78) {
      goto LABEL_73;
    }
    sub_18AFFD344();
    uint64_t v68 = v79;
    if (!v80)
    {
      uint64_t v68 = v79 + 1;
      sub_18AFFC670();
      if (v77 == v78) {
        goto LABEL_73;
      }
      sub_18AFFC810();
      if (!v82)
      {
        uint64_t v68 = v81 + 2;
        sub_18AFFC670();
        if (v77 == v78) {
          goto LABEL_73;
        }
        sub_18AFFC810();
        if (!v84)
        {
          uint64_t v68 = v83 + 3;
          sub_18AFFC670();
          if (v77 == v78) {
            goto LABEL_73;
          }
          sub_18AFFC810();
          if (!v85) {
            break;
          }
        }
      }
    }
LABEL_45:
    sub_18AFFD428();
    uint64_t v76 = v90 + (v68 << 6);
LABEL_46:
    uint64_t v91 = *(void **)(*(void *)(v48 + 56) + 8 * v76);
    v142[0] = v91;
    id v92 = v91;
    id v93 = v91;
    id v94 = v91;
    sub_18AF161EC(&qword_1E9125660);
    if (swift_dynamicCast())
    {

      uint64_t v95 = (void *)v141;
    }
    else
    {
      uint64_t v45 = &qword_1E9125660;

      v142[0] = v91;
      id v96 = v91;
      if ((sub_18AFFCDD8() & 1) == 0)
      {

        sub_18AFFD3D4();
        unint64_t v129 = sub_18AFFBD0C();
        sub_18AFFC468(v129, (uint64_t)"Unable to convert error to CKError: ");
        swift_getErrorValue();
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        sub_18AFFBCB4();
        sub_18AFFBC94();
        sub_18AFFD87C();
      }
      sub_18AF161EC(&qword_1E9126AA0);
      *(_OWORD *)(swift_initStackObject() + 16) = v132;
      uint64_t v97 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_18AFFC524(v97, v98);
      sub_18AFFCB84((uint64_t)&a12);
      Dictionary.init(dictionaryLiteral:)();
      uint64_t v140 = 20;
      sub_18AFFE090();
      swift_bridgeObjectRelease();
      _BridgedStoredNSError.init(_:userInfo:)();

      uint64_t v95 = (void *)v141;
      sub_18AF402E0();
      v99();
    }
    sub_18AF3E5FC(v95);
  }
  sub_18AFFD338();
  if (v77 == v78)
  {
LABEL_73:
    swift_release();
    goto LABEL_74;
  }
  sub_18AFFD344();
  if (v87)
  {
    uint64_t v68 = v86;
    goto LABEL_45;
  }
  while (1)
  {
    uint64_t v68 = v86 + 1;
    if (__OFADD__(v86, 1)) {
      break;
    }
    sub_18AFFC670();
    if (v77 == v78) {
      goto LABEL_73;
    }
    sub_18AFFC810();
    uint64_t v86 = v88 + 1;
    if (v89) {
      goto LABEL_45;
    }
  }
  __break(1u);
LABEL_83:
  swift_once();
LABEL_59:
  uint64_t v111 = type metadata accessor for Logger();
  sub_18AF412A0(v111, (uint64_t)qword_1E91253B0);
  sub_18AF3F3E4();
  id v112 = (void *)Logger.logObject.getter();
  os_log_type_t v113 = static os_log_type_t.debug.getter();
  if (sub_18AF32640(v113))
  {
    char v114 = (_DWORD *)sub_18AF2A5F0();
    v142[0] = (id)sub_18AF16B9C();
    *char v114 = 136315138;
    if ((sub_18AF41120() & 1) == 0)
    {
      sub_18AF30C68();
      sub_18AFFD824();
    }
    os_log_type_t v49 = v114 + 1;
    swift_retain();
    uint64_t v115 = sub_18AF40CEC();
    unint64_t v117 = v116;
    swift_release();
    uint64_t v118 = sub_18AF4095C(v115, v117, (uint64_t *)v142);
    sub_18AFFC6D4(v118);
    swift_bridgeObjectRelease();
    sub_18AF3F3FC();
    sub_18AFFBB34(&dword_18AF10000, v119, v113, "%s setting isWaitingForDeviceToDeviceEncryption from last error");
    sub_18AF3F3CC();
    sub_18AF388F8();
    sub_18AF388F8();
  }
  else
  {

    sub_18AF3F3FC();
  }
  sub_18AF393BC();
  *((unsigned char *)v49 + 264) = 1;
LABEL_79:
  sub_18AF32064();
}

BOOL sub_18AF3F328(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_18AF3F340(uint64_t a1)
{
  sub_18AF3F37C();
  id v3 = *(void **)(v1 + 304);
  *(void *)(v1 + 304) = a1;
}

uint64_t sub_18AF3F37C()
{
  return swift_beginAccess();
}

__n128 sub_18AF3F3A4(uint64_t a1)
{
  __n128 result = v2[2];
  *(void *)(a1 + 16) = v1;
  *(__n128 *)(a1 + 24) = result;
  return result;
}

uint64_t sub_18AF3F3B4()
{
  return swift_slowAlloc();
}

uint64_t sub_18AF3F3CC()
{
  return swift_arrayDestroy();
}

uint64_t sub_18AF3F3E4()
{
  return swift_retain_n();
}

uint64_t sub_18AF3F3FC()
{
  return swift_release_n();
}

uint64_t sub_18AF3F414(uint64_t a1, uint64_t a2)
{
  return sub_18AF43708(a1, a2, 1, v2);
}

void sub_18AF3F42C(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0x16u);
}

uint64_t sub_18AF3F444(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_18AF4095C(v3, v4, a3);
}

uint64_t sub_18AF3F45C()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_18AF3F474()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_18AF3F48C()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_18AF3F4C0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_18AF3F4D8(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0x20u);
}

uint64_t sub_18AF3F510()
{
  return swift_release();
}

unint64_t sub_18AF3F528()
{
  return CKSyncEngine.FetchChangesContext.description.getter();
}

#error "18AF3F68C: call analysis failed (funcsize=130)"

uint64_t sub_18AF3F784()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t sub_18AF3F79C(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

uint64_t sub_18AF3F7A8()
{
  return swift_arrayDestroy();
}

uint64_t sub_18AF3F7C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28)
{
  sub_18AF41768();
  a27 = v29;
  a28 = v30;
  sub_18AF4175C();
  a26 = v28;
  uint64_t v100 = v28 + 9;
  uint64_t v31 = v28[19];
  sub_18AF402EC(v28[12], v31, &qword_1E9125470);
  sub_18AF40480(v31);
  if (v66)
  {
    if ((swift_task_isCurrentExecutor() & 1) == 0)
    {
      sub_18AF30C68();
      swift_task_reportUnexpectedExecutor();
    }
    sub_18AF4040C();
    sub_18AF18528();
    sub_18AF4045C();
    sub_18AF402EC(v32, v33, v34);
    uint64_t v35 = sub_18AF3858C();
    sub_18AF401EC(v35, v36);
  }
  else
  {
    uint64_t v37 = v28[20];
    (*(void (**)(uint64_t, void, void))(v28[15] + 32))(v37, v28[19], v28[14]);
    sub_18AF47560(v37);
  }
  sub_18AF402EC(v28[20], v28[18], &qword_1E9125470);
  uint64_t v38 = &unk_18B1F0000;
  if (sub_18AF40428() == 1)
  {
    sub_18AF401EC(v28[18], &qword_1E9125470);
    sub_18AF40390();
    if (!v66) {
      swift_once();
    }
    uint64_t v39 = sub_18AF40378();
    sub_18AF41270(v39, (uint64_t)qword_1E91253B0);
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.info.getter();
    if (sub_18AF41108(v41))
    {
      a14 = v28 + 10;
      uint64_t v42 = (_DWORD *)sub_18AF2A5F0();
      a17 = sub_18AF16B9C();
      _DWORD *v42 = 136315138;
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      swift_retain();
      sub_18AF40CEC();
      uint64_t v43 = sub_18AF37A48();
      v28[9] = sub_18AF403F4(v43, v44, &a17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_18AF38FA4();
      sub_18AF40444(&dword_18AF10000, v40, v41, "%s scheduling sync");
      sub_18AF40468();
      sub_18AF388F8();
      sub_18AF388F8();

LABEL_19:
      uint64_t v38 = (void *)&unk_18B1F0000;
      goto LABEL_22;
    }
    sub_18AF38FA4();
  }
  else
  {
    a14 = v28 + 10;
    (*(void (**)(void, void, void))(v28[15] + 32))(v28[17], v28[18], v28[14]);
    sub_18AF40390();
    if (!v66) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    sub_18AF412A0(v45, (uint64_t)qword_1E91253B0);
    uint64_t v46 = sub_18AFFC820();
    v47(v46);
    sub_18AF3F3E4();
    uint64_t v48 = Logger.logObject.getter();
    int v49 = static os_log_type_t.info.getter();
    if (sub_18AF41108((os_log_type_t)v49))
    {
      HIDWORD(a10) = v49;
      a12 = v28 + 11;
      uint64_t v50 = sub_18AF402C8();
      a13 = sub_18AF182D8();
      a17 = a13;
      *(_DWORD *)uint64_t v50 = 136315394;
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v51 = v28[16];
      a11 = v28[17];
      uint64_t v52 = v28[15];
      a9 = v28[14];
      swift_retain();
      sub_18AF40CEC();
      uint64_t v53 = sub_18AF3DDC4();
      v28[10] = sub_18AF3DDAC(v53, v54, &a17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_18AF38FA4();
      *(_WORD *)(v50 + 12) = 2080;
      sub_18AF38368(&qword_1E9125008, MEMORY[0x1E4F27928]);
      uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
      v28[11] = sub_18AF4095C(v55, v56, &a17);
      sub_18AF3F48C();
      swift_bridgeObjectRelease();
      uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
      v57(v51, a9);
      sub_18AF41358(&dword_18AF10000, v48, (os_log_type_t)v49, "%s scheduling sync with earliest start date %s");
      sub_18AF40360();
      sub_18AF388F8();
      sub_18AF388F8();

      v57(a11, a9);
      goto LABEL_19;
    }
    uint64_t v58 = v28[17];
    uint64_t v59 = v28[14];
    uint64_t v60 = v28[15];

    unint64_t v61 = *(void (**)(void))(v60 + 8);
    sub_18AFFC700();
    v61();
    sub_18AF3F3FC();
    ((void (*)(uint64_t, uint64_t))v61)(v58, v59);
  }
LABEL_22:
  sub_18AF38784();
  unint64_t v64 = v63;
  if (v65)
  {
    swift_bridgeObjectRelease();
    sub_18AFE8D28();
    sub_18AF40390();
    if (v67)
    {
      if (!v66) {
        swift_once();
      }
      uint64_t v68 = sub_18AF40378();
      sub_18AF41270(v68, (uint64_t)qword_1E91253B0);
      os_log_type_t v69 = (void *)Logger.logObject.getter();
      os_log_type_t v70 = static os_log_type_t.info.getter();
      if (sub_18AF32640(v70))
      {
        uint64_t v71 = (_DWORD *)sub_18AF2A5F0();
        sub_18AF16B9C();
        sub_18AFFDBBC();
        *uint64_t v71 = v38[62];
        if ((sub_18AF33AE8() & 1) == 0)
        {
          sub_18AF30C68();
          swift_task_reportUnexpectedExecutor();
        }
        sub_18AFFBDD8();
        sub_18AF40CEC();
        uint64_t v72 = sub_18AF37A48();
        v28[8] = sub_18AF403F4(v72, v73, &a17);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_18AF38FA4();
        sub_18AFFBB34(&dword_18AF10000, v74, v70, "%s submitting activity");
        sub_18AF351C4();
        sub_18AF388F8();
        sub_18AF388F8();
      }
      else
      {
        sub_18AF38FA4();
      }

      uint64_t v89 = (void *)swift_task_alloc();
      v28[21] = v89;
      void *v89 = v28;
      v89[1] = sub_18AFEBD68;
      sub_18AF348E4();
      return sub_18AFED948();
    }
    if (!v66) {
      swift_once();
    }
    uint64_t v82 = sub_18AF40378();
    sub_18AF41270(v82, (uint64_t)qword_1E91253B0);
    uint64_t v83 = Logger.logObject.getter();
    os_log_type_t v84 = static os_log_type_t.info.getter();
    if (sub_18AF42D04(v84))
    {
      uint64_t v85 = (_DWORD *)sub_18AF2A5F0();
      sub_18AF16B9C();
      sub_18AFFDBBC();
      _DWORD *v85 = v38[62];
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v100 = (void *)v28[20];
      swift_retain();
      sub_18AF40CEC();
      uint64_t v86 = sub_18AF1FFE8();
      v28[7] = sub_18AF476A0(v86, v87, &a17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_18AF38FA4();
      sub_18AF40444(&dword_18AF10000, v83, v84, "%s not scheduling sync because we have nothing to do");
      sub_18AF351C4();
      sub_18AF388F8();
      sub_18AF388F8();

      uint64_t v81 = (uint64_t)v100;
      goto LABEL_49;
    }
    uint64_t v88 = v28[20];
  }
  else
  {
    unint64_t v75 = v62;
    sub_18AF40390();
    if (!v66) {
      swift_once();
    }
    uint64_t v76 = sub_18AF40378();
    sub_18AF41270(v76, (uint64_t)qword_1E91253B0);
    swift_bridgeObjectRetain();
    char v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.info.getter();
    if (sub_18AF42D04(v78))
    {
      a12 = v28 + 5;
      a14 = v28 + 6;
      uint64_t v100 = (void *)v75;
      uint64_t v79 = (_DWORD *)sub_18AF402C8();
      a17 = sub_18AF182D8();
      _DWORD *v79 = 136315394;
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      a13 = v28[20];
      swift_retain();
      uint64_t v80 = sub_18AF40CEC();
      sub_18AF404A0();
      v28[5] = sub_18AF4095C(v80, v75, &a17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_18AF38FA4();
      sub_18AF40418();
      swift_bridgeObjectRetain();
      v28[6] = sub_18AF4095C(v75, v64, &a17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18AF4039C();
      sub_18AF403B4(&dword_18AF10000, v77, v78, "%s not scheduling sync because we're not ready (%s)");
      sub_18AF40360();
      sub_18AF388F8();
      sub_18AF388F8();

      uint64_t v81 = a13;
      goto LABEL_49;
    }
    uint64_t v88 = v28[20];

    sub_18AF474AC();
  }
  sub_18AF35674();
  uint64_t v81 = v88;
LABEL_49:
  sub_18AF401EC(v81, &qword_1E9125470);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_18AF16D48();
  sub_18AF348E4();
  return v93(v92, v93, v94, v95, v96, v97, v98, v99, a9, a10, a11, a12, a13, a14, v100, v28 + 7, a17, a18, a19, a20);
}

uint64_t sub_18AF40194(uint64_t a1, uint64_t *a2)
{
  sub_18AF161EC(a2);
  sub_18AF19278();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_18AF401EC(uint64_t a1, uint64_t *a2)
{
  sub_18AF161EC(a2);
  sub_18AF402B8();
  sub_18AF402E0();
  v3();
  return a1;
}

uint64_t sub_18AF4025C()
{
  return *(void *)(v0 - 168);
}

uint64_t sub_18AF4027C()
{
  return v0;
}

uint64_t sub_18AF402C8()
{
  return swift_slowAlloc();
}

uint64_t sub_18AF402EC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_18AF40334(a1, a2, a3);
  sub_18AF402B8();
  uint64_t v4 = sub_18AF40350();
  v5(v4);
  return v3;
}

uint64_t sub_18AF40334(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_18AF161EC(a3);
}

uint64_t sub_18AF40350()
{
  return v0;
}

uint64_t sub_18AF40360()
{
  return swift_arrayDestroy();
}

uint64_t sub_18AF40378()
{
  return type metadata accessor for Logger();
}

uint64_t sub_18AF4039C()
{
  return swift_bridgeObjectRelease_n();
}

void sub_18AF403B4(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0x16u);
}

void sub_18AF403CC()
{
  *(void *)(*(void *)(v1 + 48) + 8 * v0) = *(void *)(*(void *)(v2 + 48) + 8 * v0);
}

uint64_t sub_18AF403E0()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_18AF403F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_18AF4095C(v3, v4, a3);
}

uint64_t sub_18AF4040C()
{
  return v0;
}

void sub_18AF40418()
{
  *(_WORD *)(v0 + 12) = 2080;
}

uint64_t sub_18AF40428()
{
  return sub_18AF436E0(v1, 1, v0);
}

void sub_18AF40444(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_18AF40468()
{
  return swift_arrayDestroy();
}

uint64_t sub_18AF40480(uint64_t a1)
{
  return sub_18AF436E0(a1, 1, v1);
}

uint64_t sub_18AF404A0()
{
  return swift_release();
}

uint64_t sub_18AF404B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26)
{
  sub_18AF410EC();
  a25 = v28;
  a26 = v29;
  sub_18AF41388();
  a24 = v27;
  if (qword_1E91252D0 != -1) {
    swift_once();
  }
  uint64_t v30 = v27 + 21;
  uint64_t v31 = type metadata accessor for Logger();
  sub_18AF412A0(v31, (uint64_t)qword_1E91253B0);
  sub_18AF41340();
  swift_retain();
  sub_18AF40C34((uint64_t)(v27 + 2), (void (*)(void, void, void, void, void, void, void, void, char))sub_18AF40DF0);
  swift_retain();
  sub_18AF40C34((uint64_t)(v27 + 2), (void (*)(void, void, void, void, void, void, void, void, char))sub_18AF40DF0);
  uint64_t v32 = Logger.logObject.getter();
  int v33 = static os_log_type_t.default.getter();
  if (sub_18AF41108((os_log_type_t)v33))
  {
    HIDWORD(a12) = v33;
    a13 = v26;
    a14 = v27 + 21;
    a10 = (uint64_t)(v27 + 11);
    uint64_t v34 = sub_18AF402C8();
    a11 = sub_18AF182D8();
    a15 = a11;
    *(_DWORD *)uint64_t v34 = 136315394;
    if ((sub_18AF41120() & 1) == 0)
    {
      sub_18AF30C68();
      swift_task_reportUnexpectedExecutor();
    }
    swift_retain();
    sub_18AF40CEC();
    uint64_t v35 = sub_18AF41328();
    uint64_t v30 = v27 + 21;
    *a14 = sub_18AF41370(v35, v36, &a15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_18AF38FA4();
    swift_bridgeObjectRelease();
    *(_WORD *)(v34 + 12) = 2080;
    sub_18AF40C88((uint64_t)(v27 + 2), a10);
    CKSyncEngine.Event.description.getter();
    v27[22] = sub_18AF4095C(v37, v38, &a15);
    sub_18AF40DB4();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_18AF40C34((uint64_t)(v27 + 2), (void (*)(void, void, void, void, void, void, void, void, char))sub_18AF17DC8);
    uint64_t v39 = sub_18AF4134C();
    sub_18AF40C34(v39, v40);
    sub_18AF41358(&dword_18AF10000, v32, (os_log_type_t)v33, "%s will post event: %s");
    sub_18AF41310();
    sub_18AF388F8();
    sub_18AF388F8();
  }
  else
  {
    sub_18AF3F3FC();
    sub_18AF40C34((uint64_t)(v27 + 2), (void (*)(void, void, void, void, void, void, void, void, char))sub_18AF17DC8);
    sub_18AF40C34((uint64_t)(v27 + 2), (void (*)(void, void, void, void, void, void, void, void, char))sub_18AF17DC8);
  }
  uint64_t Strong = swift_weakLoadStrong();
  v27[24] = Strong;
  uint64_t v42 = v27[23];
  if (Strong)
  {
    uint64_t v43 = Strong;
    uint64_t v44 = swift_allocObject();
    v27[25] = v44;
    sub_18AF40C88((uint64_t)(v27 + 2), v44 + 16);
    *(void *)(v44 + 88) = v43;
    *(void *)(v44 + 96) = v42;
    swift_retain();
    sub_18AF40C34((uint64_t)(v27 + 2), (void (*)(void, void, void, void, void, void, void, void, char))sub_18AF40DF0);
    uint64_t v68 = (char *)&dword_1E9126F88 + dword_1E9126F88;
    swift_retain();
    uint64_t v45 = (void *)swift_task_alloc();
    v27[26] = v45;
    *uint64_t v45 = v27;
    v45[1] = sub_18AF2F6E0;
    sub_18AF41060();
    return v46(v46, v47, v48, v49, v50, v51, v52, v53, a9, a10, a11, a12, a13, v68, a15, a16, a17, a18);
  }
  else
  {
    sub_18AF3F3E4();
    uint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.info.getter();
    if (sub_18AF4179C(v56))
    {
      a14 = v30;
      uint64_t v57 = (_DWORD *)sub_18AF2A5F0();
      a15 = sub_18AF16B9C();
      _DWORD *v57 = 136315138;
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      swift_retain();
      sub_18AF40CEC();
      uint64_t v58 = sub_18AF37A48();
      v27[20] = sub_18AF403F4(v58, v59, &a15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18AF38FA4();
      swift_bridgeObjectRelease();
      sub_18AF40444(&dword_18AF10000, v55, v56, "%s not posting event to deallocated engine");
      sub_18AF351C4();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {

      sub_18AF38FA4();
    }
    sub_18AF16D48();
    sub_18AF41060();
    return v61(v60, v61, v62, v63, v64, v65, v66, v67, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  }
}

uint64_t sub_18AF4095C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_18AF40ADC(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_18AF40A80((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x1E4FBB9B0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_18AF40A80((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_18AF40A30((uint64_t)v12);
  return v7;
}

uint64_t sub_18AF40A30(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_18AF40A80(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_18AF40ADC(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_18AF530B4((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = sub_18AF5318C(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_18AF40C34(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 64);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), v4);
  return a1;
}

uint64_t sub_18AF40C88(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *_s19FetchChangesContextVwtk(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x41uLL);
}

uint64_t sub_18AF40CEC()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + OBJC_IVAR____TtC8CloudKit10SyncEngine_loggingIDLock) + 32);
  os_unfair_lock_lock(v1);
  uint64_t v2 = (uint64_t *)sub_18AF40DC0();
  sub_18AF40DD0(v2, v3);
  os_unfair_lock_unlock(v1);
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  strcpy((char *)v7, "<CKSyncEngine ");
  v4._uint64_t countAndFlagsBits = sub_18AF40DB4();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 62;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return v7[0];
}

uint64_t sub_18AF40DB4()
{
  return v0;
}

uint64_t sub_18AF40DC0()
{
  return v0;
}

uint64_t sub_18AF40DD0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  *a2 = v3;
  a2[1] = v2;
  return swift_bridgeObjectRetain();
}

id sub_18AF40DF0(id result, void *a2, unsigned __int8 a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  switch(a9 >> 4)
  {
    case 0:
      return (id)sub_18AF5F6FC((uint64_t)result, (unint64_t)a2);
    case 1:
      return sub_18AF755E8(result, a2, a3);
    case 2:
      swift_bridgeObjectRetain();
      goto LABEL_13;
    case 3:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_13;
    case 4:
    case 5:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_13;
    case 6:
    case 9:
      swift_bridgeObjectRetain();
      id v9 = a4;
      swift_bridgeObjectRetain();
LABEL_13:
      return (id)swift_bridgeObjectRetain();
    case 7:
      goto LABEL_18;
    case 8:
      id v12 = result;
      id v10 = a2;
      goto LABEL_17;
    case 0xA:
    case 0xB:
      id v12 = a4;
      swift_bridgeObjectRetain();
LABEL_17:
      uint64_t result = v12;
LABEL_18:
      uint64_t result = result;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_18AF40F74()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18AF40F8C()
{
  return v0;
}

uint64_t sub_18AF40F98()
{
  return v0;
}

uint64_t sub_18AF40FB8()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

id sub_18AF41000()
{
  return objc_msgSend(v0, (SEL)(v3 + 2501), v1, v2);
}

void sub_18AF4102C(id a1)
{
}

uint64_t sub_18AF41048()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

void sub_18AF41090()
{
  uint64_t v1 = 60;
  unint64_t v2 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t sub_18AF410B4()
{
  return v0;
}

uint64_t sub_18AF410CC()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

BOOL sub_18AF41108(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_18AF41120()
{
  return swift_task_isCurrentExecutor();
}

uint64_t sub_18AF41138()
{
  return swift_dynamicCast();
}

uint64_t sub_18AF41158()
{
  return swift_beginAccess();
}

uint64_t sub_18AF41170()
{
  uint64_t v2 = *v0;
  return MEMORY[0x1F4184C90](v2);
}

uint64_t sub_18AF411AC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AF411DC()
{
  return sub_18AF86444(v0, v1);
}

void *sub_18AF411FC(void *result)
{
  *uint64_t result = *v1;
  result[1] = v1;
  return result;
}

uint64_t sub_18AF41220(uint64_t result)
{
  *(void *)(v1 + 120) = result;
  return result;
}

uint64_t sub_18AF41230()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

void sub_18AF41250()
{
  sub_18AFC2858();
}

uint64_t sub_18AF41270(uint64_t a1, uint64_t a2)
{
  sub_18AF412A0(a1, a2);
  return swift_retain_n();
}

uint64_t sub_18AF412A0(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

id sub_18AF412D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  return v10;
}

id sub_18AF412F8(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_18AF41310()
{
  return swift_arrayDestroy();
}

uint64_t sub_18AF41328()
{
  return swift_release();
}

uint64_t sub_18AF41340()
{
  return v0;
}

uint64_t sub_18AF4134C()
{
  return v0;
}

void sub_18AF41358(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0x16u);
}

uint64_t sub_18AF41370(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_18AF4095C(v4, v3, a3);
}

uint64_t sub_18AF41394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28)
{
  sub_18AF41768();
  a27 = v29;
  a28 = v30;
  sub_18AF4175C();
  a26 = v28;
  a17 = *MEMORY[0x1E4F143B8];
  uint64_t v31 = v28 + 5;
  sub_18AF41AD0();
  if (v32 < 0x100u || (v32 & 1) == 0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    sub_18AF348E4();
    return v35(v34, v35, v36, v37, v38, v39, v40, v41, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
  }
  else
  {
    uint64_t v43 = *v31;
    if (*v31) {
      uint64_t v44 = (void *)_convertErrorToNSError(_:)();
    }
    else {
      uint64_t v44 = 0;
    }
    id v45 = CKEarliestStartDateAfterError(v44);

    if (v45)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v46 = 0;
    }
    else
    {
      uint64_t v46 = 1;
    }
    uint64_t v47 = v28[7];
    uint64_t v48 = type metadata accessor for Date();
    sub_18AF43708(v47, v46, 1, v48);
    uint64_t v49 = sub_18AF41790();
    sub_18AF417B4(v49, v50, v51);
    if (qword_1E91252D0 != -1) {
      swift_once();
    }
    uint64_t v52 = (void *)v28[5];
    uint64_t v53 = type metadata accessor for Logger();
    sub_18AF412A0(v53, (uint64_t)qword_1E91253B0);
    id v54 = v52;
    sub_18AF3098C();
    id v55 = v54;
    os_log_type_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.debug.getter();
    if (sub_18AF4179C(v57))
    {
      uint64_t v58 = sub_18AF402C8();
      uint64_t v65 = (void *)sub_18AF3F3B4();
      a16 = sub_18AF16B9C();
      *(_DWORD *)uint64_t v58 = 136315394;
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      swift_retain();
      sub_18AF40CEC();
      uint64_t v59 = sub_18AF3DDC4();
      v28[2] = sub_18AF3DDAC(v59, v60, &a16);
      sub_18AF3F4C0();
      swift_bridgeObjectRelease();
      sub_18AF38FA4();
      *(_WORD *)(v58 + 12) = 2112;
      if (v43)
      {
        id v61 = v55;
        uint64_t v62 = _swift_stdlib_bridgeErrorToNSError();
        v28[4] = v62;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        v28[3] = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v62 = 0;
      }
      *uint64_t v65 = v62;

      sub_18AF2F014(&dword_18AF10000, v56, v57, "%s will resubmit scheduler activity after retryable error %@");
      sub_18AF161EC((uint64_t *)&unk_1E9125610);
      swift_arrayDestroy();
      sub_18AF388F8();
      sub_18AF3F7A8();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {
      sub_18AF38FA4();
    }
    uint64_t v63 = (void *)swift_task_alloc();
    v28[9] = v63;
    *uint64_t v63 = v28;
    v63[1] = sub_18AF23A24;
    sub_18AF41784(v28[8]);
    sub_18AF348E4();
    return sub_18AF2932C();
  }
}

uint64_t sub_18AF41784@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_18AF41790()
{
  return v0;
}

BOOL sub_18AF4179C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_18AF417B4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_18AF40334(a1, a2, a3);
  sub_18AF402B8();
  uint64_t v4 = sub_18AF40350();
  v5(v4);
  return v3;
}

uint64_t sub_18AF417FC()
{
  sub_18AF2A56C();
  uint64_t v3 = (void *)related decl 'e' for CKErrorCode.init(_:)(*(void **)(v2 + 400));
  id v4 = sub_18AF43450(v3);
  sub_18AF43468();

  *(void *)(v2 + 480) = v0;
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = (void *)sub_18AF43480(v5);
  void *v6 = v7;
  v6[1] = sub_18AF1F51C;
  sub_18AF41AC4();
  return sub_18AF14BC0();
}

uint64_t related decl 'e' for CKErrorCode.init(_:)(void *a1)
{
  uint64_t v2 = type metadata accessor for CancellationError();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = a1;
  id v6 = a1;
  sub_18AF161EC(&qword_1E9125660);
  type metadata accessor for CKError(0);
  if (swift_dynamicCast())
  {

    uint64_t v7 = v14;
LABEL_5:

    return v7;
  }

  id v12 = a1;
  id v8 = a1;
  if (swift_dynamicCast())
  {
    uint64_t v7 = related decl 'e' for CKErrorCode.init(_:description:)(20, 0xD000000000000012, 0x800000018B1D49C0);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    goto LABEL_5;
  }

  id v12 = 0;
  unint64_t v13 = 0xE000000000000000;
  _StringGuts.grow(_:)(38);
  v10._uint64_t countAndFlagsBits = 0xD000000000000024;
  v10._object = (void *)0x800000018B1D4990;
  String.append(_:)(v10);
  swift_getErrorValue();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_18AF41AD0()
{
  sub_18AF1855C();
  uint64_t v1 = v0;
  type metadata accessor for CancellationError();
  sub_18AF22CB0();
  MEMORY[0x1F4188790](v2);
  sub_18AF38FBC();
  if (v1)
  {
    v45[0] = v1;
    type metadata accessor for CKError(0);
    sub_18AF38368((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);
    id v3 = v1;
    sub_18AF42884();
    _BridgedStoredNSError.code.getter();
    if (v47 > 0x24) {
      goto LABEL_6;
    }
    if (((1 << v47) & 0x1000A002D8) != 0)
    {
LABEL_8:

      goto LABEL_48;
    }
    if (v47 != 2)
    {
      if (v47 != 20)
      {
LABEL_6:
        if (v47 - 110 <= 5) {
          sub_18AFFD83C();
        }
        goto LABEL_8;
      }
      goto LABEL_8;
    }
    uint64_t v4 = related decl 'e' for CKErrorCode.partialErrorsByItemID.getter((uint64_t)v3);
    if (!v4)
    {
      if (qword_1E91252D0 != -1) {
        goto LABEL_50;
      }
      goto LABEL_42;
    }
    int64_t v41 = 0;
    uint64_t v40 = v4;
    uint64_t v38 = v4 + 64;
    sub_18AF3093C();
    unint64_t v7 = v6 & v5;
    int64_t v39 = (unint64_t)(v8 + 63) >> 6;
    sub_18AFFBDF0();
    if (!v7) {
      goto LABEL_14;
    }
LABEL_12:
    unint64_t v9 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v10 = v9 | (v41 << 6);
LABEL_13:
    sub_18AF7E1AC(*(void *)(v40 + 48) + 40 * v10, (uint64_t)v43);
    *((void *)&v44 + 1) = *(void *)(*(void *)(v40 + 56) + 8 * v10);
    id v11 = *((id *)&v44 + 1);
    while (1)
    {
      sub_18AF417B4((uint64_t)v43, (uint64_t)v45, (uint64_t *)&unk_1E9124EA0);
      if (!v45[3])
      {

        swift_release();
        goto LABEL_48;
      }
      id v19 = v46;
      v43[0] = v46;
      id v20 = v46;
      id v21 = v19;
      sub_18AF161EC(&qword_1E9125660);
      if (sub_18AFFCDD8())
      {

        uint64_t v22 = v42;
      }
      else
      {

        v43[0] = v19;
        id v23 = v19;
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_52;
        }
        sub_18AF161EC(&qword_1E9126AA0);
        *(_OWORD *)(swift_initStackObject() + 16) = xmmword_18B1F16B0;
        uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        sub_18AFFC524(v24, v25);
        sub_18AFFCB84((uint64_t)&v46);
        Dictionary.init(dictionaryLiteral:)();
        sub_18AFFE090();
        swift_bridgeObjectRelease();
        _BridgedStoredNSError.init(_:userInfo:)();

        uint64_t v22 = v42;
        uint64_t v26 = sub_18AFFC480();
        v27(v26);
      }

      id v28 = v22;
      char v29 = sub_18AF41AD0(v22);

      if (v29)
      {

        swift_release();
        sub_18AF6A2CC((uint64_t)v45);
        goto LABEL_48;
      }
      sub_18AF6A2CC((uint64_t)v45);
      if (v7) {
        goto LABEL_12;
      }
LABEL_14:
      if (__OFADD__(v41, 1)) {
        break;
      }
      sub_18AFFD338();
      if (v12 != v13)
      {
        sub_18AFFD344();
        if (!v15)
        {
          sub_18AFFD350(v14);
          if (v17 >= v39) {
            goto LABEL_32;
          }
          unint64_t v15 = *(void *)(v38 + 8 * v17);
          if (!v15)
          {
            int64_t v41 = v17;
            if (v16 + 2 >= v39) {
              goto LABEL_32;
            }
            unint64_t v15 = *(void *)(v38 + 8 * (v16 + 2));
            if (v15)
            {
              uint64_t v14 = v16 + 2;
              goto LABEL_18;
            }
            int64_t v17 = v16 + 3;
            int64_t v41 = v16 + 2;
            if (v16 + 3 >= v39) {
              goto LABEL_32;
            }
            unint64_t v15 = *(void *)(v38 + 8 * v17);
            if (!v15)
            {
              while (!__OFADD__(v17, 1))
              {
                sub_18AFFD338();
                if (v12 == v13)
                {
                  sub_18AFFD350(v39 - 1);
                  goto LABEL_32;
                }
                sub_18AFFD344();
                int64_t v17 = v18 + 1;
                if (v15) {
                  goto LABEL_18;
                }
              }
              __break(1u);
LABEL_52:

              v43[0] = 0;
              v43[1] = (id)0xE000000000000000;
              _StringGuts.grow(_:)(38);
              unint64_t v37 = sub_18AFFBD0C();
              sub_18AFFC468(v37, (uint64_t)"Unable to convert error to CKError: ");
              swift_getErrorValue();
              DefaultStringInterpolation.appendInterpolation<A>(_:)();
              sub_18AFFBCB4();
              sub_18AFFBC94();
              sub_18AFFD87C();
            }
          }
          uint64_t v14 = v17;
        }
LABEL_18:
        unint64_t v7 = (v15 - 1) & v15;
        unint64_t v10 = __clz(__rbit64(v15)) + (v14 << 6);
        sub_18AFFD350(v14);
        goto LABEL_13;
      }
LABEL_32:
      unint64_t v7 = 0;
      long long v44 = 0u;
      memset(v43, 0, sizeof(v43));
    }
    __break(1u);
LABEL_50:
    swift_once();
LABEL_42:
    uint64_t v30 = type metadata accessor for Logger();
    sub_18AF412A0(v30, (uint64_t)qword_1E91253B0);
    uint64_t v31 = v3;
    unsigned __int16 v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (_DWORD *)sub_18AF2A5F0();
      uint64_t v35 = (void *)sub_18AF3F3B4();
      *uint64_t v34 = 138412290;
      uint64_t v31 = v31;
      uint64_t v36 = _swift_stdlib_bridgeErrorToNSError();
      v45[0] = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v35 = v36;

      sub_18AFFBB50(&dword_18AF10000, v32, v33, "BUG IN CLOUDKIT: Could not get partial errors from CKError.partialFailure: %@");
      sub_18AF161EC((uint64_t *)&unk_1E9125610);
      sub_18AF3F3CC();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {

      unsigned __int16 v32 = v31;
    }
  }
LABEL_48:
  sub_18AF32064();
}

void sub_18AF421A4(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

void type metadata accessor for CKError(uint64_t a1)
{
}

uint64_t sub_18AF42200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_18AF41768();
  a27 = v29;
  a28 = v30;
  sub_18AF4175C();
  a26 = v28;
  a17 = *MEMORY[0x1E4F143B8];
  uint64_t v31 = (void **)(v28 + 344);
  unsigned __int16 v32 = *(void **)(v28 + 560);
  swift_willThrow();
  swift_retain();
  id v33 = v32;
  swift_retain();
  id v34 = v32;
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  if (sub_18AF42D04(v36))
  {
    a12 = v28 + 352;
    a13 = v28 + 344;
    a14 = v28 + 408;
    a9 = v28 + 424;
    uint64_t v37 = sub_18AF402C8();
    a10 = (void *)sub_18AF3F3B4();
    a11 = sub_18AF16B9C();
    a16 = a11;
    *(_DWORD *)uint64_t v37 = 136315394;
    if ((sub_18AF33AE8() & 1) == 0)
    {
      sub_18AF30C68();
      swift_task_reportUnexpectedExecutor();
    }
    uint64_t v38 = *(void **)(v28 + 560);
    swift_retain();
    uint64_t v39 = sub_18AF40CEC();
    sub_18AF41328();
    *(void *)(v28 + 424) = sub_18AF4095C(v39, v28 + 408, &a16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_18AF38FA4();
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 12) = 2112;
    id v40 = v38;
    uint64_t v41 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v28 + 432) = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *a10 = v41;

    _os_log_impl(&dword_18AF10000, v35, v36, "%s error updating user record ID: %@", (uint8_t *)v37, 0x16u);
    sub_18AF161EC((uint64_t *)&unk_1E9125610);
    sub_18AF3F7A8();
    sub_18AF388F8();
    sub_18AF3F7A8();
    sub_18AF388F8();
    sub_18AF388F8();

    uint64_t v31 = (void **)(v28 + 344);
  }
  else
  {
    uint64_t v42 = *(void **)(v28 + 560);
    swift_release_n();
  }
  uint64_t v43 = *(void **)(v28 + 560);
  *(void *)(v28 + 352) = v43;
  id v44 = v43;
  type metadata accessor for CKError(0);
  sub_18AF42884();
  char v45 = swift_dynamicCast();
  id v46 = *(void **)(v28 + 560);
  if (v45)
  {
    unint64_t v47 = *v31;
    *(void *)(v28 + 416) = v47;
    sub_18AF38368((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);
    id v48 = v47;
    sub_18AF31160();
    _BridgedStoredNSError.code.getter();
  }
  else
  {
  }
  *(void *)(v28 + 568) = 0;
  if (*(void *)(v28 + 536))
  {
    *(void *)(v28 + 576) = 0;
    unsigned int v49 = objc_msgSend(*(id *)(*(void *)(v28 + 528) + 16), sel_didPerformInitialUserRecordIDFetch);
    sub_18AF36AC4();
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.debug.getter();
    BOOL v52 = sub_18AF42D04(v51);
    if (v49)
    {
      if (v52)
      {
        uint64_t v53 = (_DWORD *)sub_18AF2A5F0();
        a16 = sub_18AF16B9C();
        *uint64_t v53 = 136315138;
        if ((sub_18AF33AE8() & 1) == 0) {
          sub_18AFFD600();
        }
        swift_retain();
        sub_18AF40CEC();
        uint64_t v54 = sub_18AF37A48();
        *(void *)(v28 + 400) = sub_18AF403F4(v54, v55, &a16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_18AF38FA4();
        swift_bridgeObjectRelease();
        sub_18AF40444(&dword_18AF10000, v50, v51, "%s user record ID change detected, resetting sync engine state to prevent any pending syncs for a different user");
        sub_18AF351C4();
        sub_18AF388F8();
        sub_18AF388F8();
      }
      else
      {

        sub_18AF38FA4();
      }
      objc_msgSend((id)sub_18AF42890(), sel_reset);
    }
    else if (v52)
    {
      uint64_t v65 = (_DWORD *)sub_18AF2A5F0();
      a16 = sub_18AF16B9C();
      *uint64_t v65 = 136315138;
      if ((sub_18AF33AE8() & 1) == 0) {
        sub_18AFFD5C0();
      }
      swift_retain();
      sub_18AF40CEC();
      uint64_t v66 = sub_18AF1FFE8();
      *(void *)(v28 + 392) = sub_18AF476A0(v66, v67, &a16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18AF38FA4();
      swift_bridgeObjectRelease();
      sub_18AF40444(&dword_18AF10000, v50, v51, "%s initial user record ID fetched");
      sub_18AF351C4();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {

      sub_18AF38FA4();
    }
    uint64_t v68 = *(void **)(*(void *)(v28 + 528) + 16);
    objc_msgSend(v68, sel_setDidPerformInitialUserRecordIDFetch_, 1);
    objc_msgSend(v68, sel_setLastKnownUserRecordID_, 0);
    os_log_type_t v69 = *(void **)(v28 + 536);
    *(void *)(v28 + 592) = 0;
    *(void *)(v28 + 584) = v69;
    *(void *)(v28 + 80) = v69;
    *(_OWORD *)(v28 + 88) = xmmword_18B1F1E70;
    sub_18AFFDBDC();
    *(_WORD *)(v28 + 144) = 272;
    id v70 = v69;
    sub_18AF755E8(v69, 0, 1u);
    uint64_t v71 = (void *)swift_task_alloc();
    *(void *)(v28 + 600) = v71;
    *uint64_t v71 = v28;
    v71[1] = sub_18AFE1FCC;
    sub_18AF30494();
    sub_18AF348E4();
    return sub_18AF295AC();
  }
  else
  {
    objc_msgSend((id)sub_18AF42890(), sel_setDidPerformInitialUserRecordIDFetch_, 1);
    swift_task_dealloc();
    swift_task_dealloc();
    sub_18AF348E4();
    return v57(v56, v57, v58, v59, v60, v61, v62, v63, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
  }
}

uint64_t sub_18AF42884()
{
  return v0;
}

uint64_t sub_18AF42890()
{
  return *(void *)(*(void *)(v0 + 528) + 16);
}

uint64_t sub_18AF42A58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);

  return swift_release();
}

uint64_t sub_18AF42AB8(char a1, char a2)
{
  return sub_18AF42AC0(a1, a2);
}

uint64_t sub_18AF42AC0(char a1, char a2)
{
  uint64_t v4 = sub_18AF161EC(&qword_1E9125478);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v8 = result;
    uint64_t v9 = type metadata accessor for TaskPriority();
    sub_18AF43708((uint64_t)v6, 1, 1, v9);
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = 0;
    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 32) = v8;
    *(unsigned char *)(v10 + 40) = a1 & 1;
    *(unsigned char *)(v10 + 41) = a2 & 1;
    sub_18AF42DB4((uint64_t)v6, (uint64_t)&unk_1E91274F0, v10);
    return swift_release();
  }
  return result;
}

void sub_18AF42BDC()
{
  sub_18AF22D38();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = sub_18AF161EC(&qword_1E9125478);
  uint64_t v11 = sub_18AF19284(v10);
  MEMORY[0x1F4188790](v11);
  uint64_t v12 = sub_18AF38518();
  sub_18AF1826C(v1, v13, v14, v12);
  unint64_t v15 = (void *)swift_allocObject();
  v15[2] = 0;
  v15[3] = 0;
  v15[4] = v0;
  v15[5] = v9;
  v15[6] = v7;
  v15[7] = v5;
  id v16 = v0;
  id v17 = v9;
  sub_18AF42F30(v7);
  sub_18AF42DB4(v1, v3, (uint64_t)v15);
  swift_release();
  sub_18AF3387C();
}

__n128 sub_18AF42CA8()
{
  uint64_t v1 = *(void *)(v0 + 88);
  __n128 result = *(__n128 *)(v0 + 24);
  long long v3 = *(_OWORD *)(v0 + 40);
  long long v4 = *(_OWORD *)(v0 + 56);
  *(_OWORD *)(v1 + 41) = *(_OWORD *)(v0 + 65);
  *(_OWORD *)(v1 + 16) = v3;
  *(_OWORD *)(v1 + 32) = v4;
  *(__n128 *)uint64_t v1 = result;
  return result;
}

uint64_t _s8CloudKit12CKSyncEngineC5EventO24FetchedRecordZoneChangesV27zoneAttributesModificationsSaySo10CKDatabaseCAAE0gH6ChangeO0hK12ModificationVGvg_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AF42CD4()
{
  return v0;
}

uint64_t sub_18AF42CEC()
{
  return v0;
}

BOOL sub_18AF42D04(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_18AF42D30(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_18AF42D4C()
{
  return v0;
}

void sub_18AF42D9C()
{
}

void sub_18AF42DB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  if (sub_18AF436E0(a1, 1, v6) == 1)
  {
    sub_18AF401EC(a1, &qword_1E9125478);
  }
  else
  {
    TaskPriority.rawValue.getter();
    sub_18AF402E0();
    v7();
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  swift_task_create();
  sub_18AF42F18();
}

uint64_t sub_18AF42F30(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_18AF42F40()
{
  return SyncEngine.unownedExecutor.getter();
}

uint64_t SyncEngine.unownedExecutor.getter()
{
  return v0;
}

#error "18AF42F90: call analysis failed (funcsize=32)"

uint64_t sub_18AF42FE8()
{
  return v0;
}

void sub_18AF42FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_18AF1855C();
  a19 = v21;
  a20 = v22;
  uint64_t v66 = v20;
  uint64_t v24 = v23;
  type metadata accessor for CancellationError();
  sub_18AF22CB0();
  MEMORY[0x1F4188790](v25);
  sub_18AF38FBC();
  if (v24)
  {
    uint64_t v67 = v24;
    type metadata accessor for CKError(0);
    sub_18AF38368((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);
    id v26 = v24;
    _BridgedStoredNSError.code.getter();
    if (v69 == 14)
    {
      objc_msgSend(*(id *)(*(void *)(v66 + 128) + 16), sel_setNeedsToFetchDatabaseChanges_, 1);
    }
    else if (v69 == 2)
    {
      uint64_t v27 = related decl 'e' for CKErrorCode.partialErrorsByItemID.getter((uint64_t)v26);
      if (v27)
      {
        uint64_t v28 = v27;
        uint64_t v63 = v26;
        int64_t v29 = 0;
        sub_18AFFD4D8();
        uint64_t v64 = v30;
        sub_18AF3093C();
        uint64_t v33 = v32 & v31;
        int64_t v65 = (unint64_t)(v34 + 63) >> 6;
        sub_18AFFBDF0();
        if (!v33) {
          goto LABEL_7;
        }
LABEL_6:
        sub_18AFFD380();
        for (uint64_t i = v35 | (v29 << 6); ; uint64_t i = v51 + (v29 << 6))
        {
          BOOL v52 = *(void **)(*(void *)(v28 + 56) + 8 * i);
          uint64_t v67 = v52;
          id v53 = v52;
          id v54 = v52;
          id v55 = v52;
          sub_18AF161EC(&qword_1E9125660);
          if (sub_18AFFCDD8())
          {

            uint64_t v56 = v68;
          }
          else
          {

            uint64_t v67 = v52;
            id v57 = v52;
            if ((swift_dynamicCast() & 1) == 0) {
              goto LABEL_39;
            }
            sub_18AF161EC(&qword_1E9126AA0);
            *(_OWORD *)(swift_initStackObject() + 16) = xmmword_18B1F16B0;
            uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            sub_18AFFC524(v58, v59);
            sub_18AFFCB84((uint64_t)&a14);
            Dictionary.init(dictionaryLiteral:)();
            sub_18AFFE090();
            swift_bridgeObjectRelease();
            _BridgedStoredNSError.init(_:userInfo:)();

            uint64_t v56 = v68;
            uint64_t v60 = sub_18AFFC7C8();
            v61(v60);
          }

          sub_18AF42FF4(v56);
          if (v33) {
            goto LABEL_6;
          }
LABEL_7:
          int64_t v37 = v29 + 1;
          if (__OFADD__(v29, 1))
          {
            __break(1u);
LABEL_38:
            __break(1u);
LABEL_39:

            sub_18AFFD3D4();
            unint64_t v62 = sub_18AFFBD0C();
            sub_18AFFC468(v62, (uint64_t)"Unable to convert error to CKError: ");
            swift_getErrorValue();
            DefaultStringInterpolation.appendInterpolation<A>(_:)();
            sub_18AFFBCB4();
            sub_18AFFBC94();
            sub_18AFFD87C();
          }
          if (v37 >= v65) {
            goto LABEL_35;
          }
          ++v29;
          if (!*(void *)(v64 + 8 * v37))
          {
            int64_t v29 = v37 + 1;
            sub_18AFFDB78();
            if (v38 == v39) {
              goto LABEL_35;
            }
            sub_18AFFDB6C();
            if (!v41)
            {
              int64_t v29 = v40 + 2;
              sub_18AFFDB78();
              if (v38 == v39) {
                goto LABEL_35;
              }
              sub_18AFFDB6C();
              if (!v43)
              {
                int64_t v29 = v42 + 3;
                sub_18AFFDB78();
                if (v38 == v39) {
                  goto LABEL_35;
                }
                sub_18AFFDB6C();
                if (!v45)
                {
                  int64_t v46 = v44 + 4;
                  if (v46 >= v65)
                  {
LABEL_35:

                    swift_release();
                    goto LABEL_36;
                  }
                  if (!*(void *)(v64 + 8 * v46))
                  {
                    while (1)
                    {
                      int64_t v29 = v46 + 1;
                      if (__OFADD__(v46, 1)) {
                        goto LABEL_38;
                      }
                      sub_18AFFDB78();
                      if (v38 == v39) {
                        goto LABEL_35;
                      }
                      sub_18AFFDB6C();
                      int64_t v46 = v47 + 1;
                      if (v48) {
                        goto LABEL_26;
                      }
                    }
                  }
                  int64_t v29 = v46;
                }
              }
            }
          }
LABEL_26:
          sub_18AF43730();
          uint64_t v33 = v50 & v49;
        }
      }
    }
  }
LABEL_36:
  sub_18AF32064();
}

void sub_18AF43430()
{
  uint64_t v1 = 0x3D656E6F7A20;
  unint64_t v2 = 0xE600000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

id sub_18AF43450(void *a1)
{
  return a1;
}

uint64_t sub_18AF43468()
{
  return sub_18AF42F68(v0);
}

uint64_t sub_18AF43480(uint64_t result)
{
  *(void *)(v1 + 488) = result;
  return result;
}

uint64_t sub_18AF4348C()
{
  sub_18AF339B8();
  sub_18AF434E4();
  sub_18AF384DC();
  return v0();
}

uint64_t sub_18AF434E4()
{
  uint64_t v1 = v0;
  sub_18AF161EC(&qword_1E9125188);
  MEMORY[0x1F4188790]();
  sub_18AF19290();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = type metadata accessor for CKAsyncSerialQueue.WaitContext();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790]();
  sub_18AF19290();
  uint64_t v9 = v8 - v7;
  uint64_t result = swift_task_isCurrentExecutor();
  if ((result & 1) == 0) {
    uint64_t result = swift_task_reportUnexpectedExecutor();
  }
  if (*(unsigned char *)(v0 + 128) == 1)
  {
    uint64_t v11 = v0 + 136;
    swift_beginAccess();
    if (*(uint64_t *)(*(void *)(v1 + 136) + 24) < 1)
    {
      uint64_t v12 = 1;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_18AFB4B3C();
      }
      sub_18AF439B4((void *)(*(void *)v11 + 16), *(void *)v11 + ((*(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), v4);
      uint64_t v12 = 0;
    }
    sub_18AF43708(v4, v12, 1, v5);
    swift_endAccess();
    if (sub_18AF436E0(v4, 1, v5) == 1)
    {
      uint64_t result = sub_18AF437D8(v4);
      *(unsigned char *)(v1 + 128) = 0;
    }
    else
    {
      sub_18AF43950(v4, v9);
      sub_18AF161EC(&qword_1E91251B8);
      CheckedContinuation.resume(returning:)();
      return sub_18AF43838(v9);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_18AF436E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_18AF43708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_18AF43740()
{
  return v0;
}

uint64_t sub_18AF43768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18AFB28B4);
}

uint64_t type metadata accessor for CKAsyncSerialQueue.WaitContext()
{
  uint64_t result = qword_1E9125148;
  if (!qword_1E9125148) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_18AF437C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18AFB2934);
}

uint64_t sub_18AF437D8(uint64_t a1)
{
  uint64_t v2 = sub_18AF161EC(&qword_1E9125188);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18AF43838(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CKAsyncSerialQueue.WaitContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18AF43894(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = sub_18AF161EC(&qword_1E91251B8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);

  return v8(v6, v7);
}

uint64_t sub_18AF43950(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CKAsyncSerialQueue.WaitContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_18AF439B4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1[2];
  uint64_t v7 = type metadata accessor for CKAsyncSerialQueue.WaitContext();
  uint64_t result = sub_18AF43950(a2 + *(void *)(*(void *)(v7 - 8) + 72) * v6, a3);
  uint64_t v9 = a1[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10)
  {
    __break(1u);
  }
  else
  {
    uint64_t v12 = a1[1];
    if (v11 >= *a1) {
      uint64_t v11 = 0;
    }
    a1[2] = v11;
    if (!__OFSUB__(v12, 1))
    {
      a1[1] = v12 - 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

id sub_18AF43A50()
{
  sub_18AF19FAC();
  sub_18AF311EC();
  sub_18AF34EA0(0, &qword_1E91255D8);
  id v4 = v1;
  id v5 = v2;
  id v6 = sub_18AF22DA0();
  v3[6] = v6;
  id result = objc_msgSend(v0, sel_container);
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  sub_18AF312E8();

  id result = sub_18AF33754();
  if (!result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v8 = result;
  uint64_t v9 = (void *)v3[4];
  id v10 = objc_msgSend(result, sel_implementation);

  id v11 = v6;
  id v12 = sub_18AF484B0(v10, v6);
  v3[7] = v12;
  v3[8] = objc_msgSend(v12, sel_databaseWithDatabaseScope_, objc_msgSend(v9, sel_databaseScope));
  uint64_t v13 = (void *)swift_task_alloc();
  v3[9] = v13;
  *uint64_t v13 = v3;
  v13[1] = sub_18AF1C1C0;
  return (id)sub_18AF1C6A8();
}

uint64_t sub_18AF43C04(uint64_t a1)
{
  return sub_18AF1DA44(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_18AF43C0C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a3;
  *(void *)(v4 + 24) = a4;
  *(unsigned char *)(v4 + 56) = a2;
  return sub_18AF18660((uint64_t)sub_18AF1BDD4, a4);
}

uint64_t sub_18AF43C2C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

BOOL sub_18AF43C44()
{
  uint64_t v2 = sub_18AF161EC(&qword_1E9125470);
  uint64_t v3 = sub_18AF19284(v2);
  MEMORY[0x1F4188790](v3);
  sub_18AF2A53C();
  uint64_t v4 = type metadata accessor for Date();
  sub_18AF22CB0();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  sub_18AF30B3C();
  MEMORY[0x1F4188790](v8);
  sub_18AF48B24(v9, 0.0, 1800.0);
  double v11 = v10;
  id v12 = objc_msgSend(*(id *)(*(void *)(v0 + 128) + 16), sel_lastFetchDatabaseChangesDate);
  if (!v12)
  {
    sub_18AF43708(v1, 1, 1, v4);
    goto LABEL_5;
  }
  uint64_t v13 = v12;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v14 = *(void (**)(void))(v6 + 32);
  sub_18AF474C4();
  sub_18AF43E0C();
  v14();
  sub_18AF47560(v1);
  sub_18AF40480(v1);
  if (v15)
  {
LABEL_5:
    static Date.distantPast.getter();
    sub_18AF401EC(v1, &qword_1E9125470);
    goto LABEL_6;
  }
  sub_18AF43E0C();
  v14();
LABEL_6:
  double v16 = v11 + 86400.0;
  Date.timeIntervalSinceNow.getter();
  double v18 = v17;
  uint64_t v19 = sub_18AF311C8();
  v20(v19);
  return v16 <= -v18;
}

uint64_t sub_18AF43E18(uint64_t a1)
{
  return MEMORY[0x1F4181798](a1, sel_CKDescriptionRedact_avoidShortDescription_, 1, 0);
}

uint64_t sub_18AF43E24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](a1, sel_CKFirstObjectWithOptions_passingTest_, 0, a3);
}

__CFString *CKCreateGUID()
{
  CFUUIDRef v0 = CFUUIDCreate(0);
  uint64_t v1 = (__CFString *)CFUUIDCreateString(0, v0);
  if (v0) {
    CFRelease(v0);
  }

  return v1;
}

uint64_t CKTernaryFromBOOL(uint64_t result)
{
  return result;
}

BOOL CKOperationExecutionStateIsExecuting(_DWORD *a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB27A118);
  BOOL v2 = *a1 == 1;
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB27A118);
  return v2;
}

BOOL CKOperationExecutionStateIsFinished(_DWORD *a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB27A118);
  BOOL v2 = *a1 == 2;
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB27A118);
  return v2;
}

id CKProductType()
{
  return sub_18AF1C2A0(@"ProductType");
}

BOOL CKPIDIsStillAlive(int a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  buffer[0] = 0;
  if (proc_pidinfo(a1, 11, 1uLL, buffer, 1024)) {
    BOOL v1 = 1;
  }
  else {
    BOOL v1 = buffer[0] == 0;
  }
  return !v1;
}

__CFString *CKContainerEnvironmentString(uint64_t a1)
{
  BOOL v1 = @"UNKNOWN ENVIRONMENT";
  if (a1 == 2) {
    BOOL v1 = @"Sandbox";
  }
  if (a1 == 1) {
    return @"Production";
  }
  else {
    return v1;
  }
}

uint64_t CKValueCanBeSetOnRecord(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  BOOL v2 = CKAcceptableValueClasses();
  uint64_t v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v9, (uint64_t)v13, 16);
  if (v4)
  {
    uint64_t v5 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        if (objc_opt_isKindOfClass())
        {
          uint64_t v4 = 1;
          goto LABEL_11;
        }
      }
      uint64_t v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v7, (uint64_t)&v9, (uint64_t)v13, 16);
      if (v4) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v4;
}

id CKAcceptableValueClasses()
{
  if (qword_1EB279FF0 != -1) {
    dispatch_once(&qword_1EB279FF0, &unk_1ED7F0458);
  }
  CFUUIDRef v0 = (void *)qword_1EB279FE8;

  return v0;
}

uint64_t CKQoSClassFromNSQualityOfService(uint64_t result)
{
  if (result <= 16)
  {
    if (result == 9) {
      return result;
    }
    return 0;
  }
  if (result != 33 && result != 25 && result != 17) {
    return 0;
  }
  return result;
}

BOOL _CKUseSystemInstalledBinaries()
{
  CFUUIDRef v0 = getenv("CK_DEBUG_BINARIES");
  BOOL v1 = v0 == 0;
  BOOL v2 = @"CK_DEBUG_BINARIES is set";
  if (!v0) {
    BOOL v2 = 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = CKGetGlobalQueue(-1);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_18B05FD8C;
  block[3] = &unk_1E5460350;
  uint64_t v8 = v3;
  uint64_t v5 = v3;
  dispatch_async(v4, block);

  return v1;
}

id CKGetGlobalQueue(uint64_t a1)
{
  if (qword_1EB27A048 != -1) {
    dispatch_once(&qword_1EB27A048, &unk_1ED7EC2A8);
  }
  BOOL v2 = (void **)&qword_1EB27A060;
  uint64_t v3 = &qword_1EB27A050;
  uint64_t v4 = &qword_1EB27A058;
  uint64_t v5 = &qword_1EB27A068;
  if (a1 <= 16) {
    uint64_t v5 = &qword_1EB27A070;
  }
  if (a1 <= 24) {
    uint64_t v4 = v5;
  }
  if (a1 <= 32) {
    uint64_t v3 = v4;
  }
  if (a1 != -1) {
    BOOL v2 = (void **)v3;
  }
  uint64_t v6 = *v2;

  return v6;
}

void type metadata accessor for CKZoneFeature()
{
}

id CKGetRealPath(void *a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v5 = v1;
  if (v1)
  {
    uint64_t v6 = &stru_1ED7F5C98;
    uint64_t v7 = v1;
    while (1)
    {
      if (!objc_msgSend_length(v7, v2, v3, v4))
      {
        uint64_t v22 = v6;
        goto LABEL_10;
      }
      long long v11 = (const char *)objc_msgSend_fileSystemRepresentation(v7, v8, v9, v10);
      long long v12 = realpath_DARWIN_EXTSN(v11, 0);
      if (v12)
      {
        uint64_t v28 = v12;
        int64_t v29 = objc_msgSend_defaultManager(MEMORY[0x1E4F28CB8], v13, v14, v15);
        size_t v30 = strlen(v28);
        uint64_t v32 = objc_msgSend_stringWithFileSystemRepresentation_length_(v29, v31, (uint64_t)v28, v30);

        uint64_t v35 = objc_msgSend_stringByAppendingPathComponent_(v32, v33, (uint64_t)v6, v34);

        free(v28);
        id v36 = v35;
        uint64_t v7 = v36;
        goto LABEL_17;
      }
      if (*__error() != 2) {
        break;
      }
      uint64_t v19 = objc_msgSend_lastPathComponent(v7, v16, v17, v18);
      objc_msgSend_stringByAppendingPathComponent_(v19, v20, (uint64_t)v6, v21);
      uint64_t v22 = (__CFString *)objc_claimAutoreleasedReturnValue();

      uint64_t v26 = objc_msgSend_stringByDeletingLastPathComponent(v7, v23, v24, v25);

      uint64_t v7 = (void *)v26;
      uint64_t v6 = v22;
      if (!v26) {
        goto LABEL_10;
      }
    }
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    int64_t v37 = (void *)ck_log_facility_ck;
    if (os_log_type_enabled((os_log_t)ck_log_facility_ck, OS_LOG_TYPE_ERROR))
    {
      char v39 = v37;
      int v40 = *__error();
      int v41 = 138543618;
      uint64_t v42 = v7;
      __int16 v43 = 1024;
      int v44 = v40;
      _os_log_error_impl(&dword_18AF10000, v39, OS_LOG_TYPE_ERROR, "realpath failed at %{public}@: %{errno}d", (uint8_t *)&v41, 0x12u);
    }
    id v36 = v5;
LABEL_17:
    id v27 = v36;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v22 = &stru_1ED7F5C98;
LABEL_10:
    id v27 = v5;
    uint64_t v6 = v22;
  }

  return v27;
}

id sub_18AF44754(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E4F28B88], a2, @"\\/:%", a4);
  uint64_t v9 = objc_msgSend_invertedSet(v5, v6, v7, v8);

  long long v12 = objc_msgSend_stringByAddingPercentEncodingWithAllowedCharacters_(a1, v10, (uint64_t)v9, v11);

  return v12;
}

id sub_18AF447D4(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  LODWORD(v21) = 0;
  uint64_t v4 = objc_msgSend_dataUsingEncoding_(a1, a2, 4, a4, 0, 0, v21, v22);
  uint64_t v8 = (const void *)objc_msgSend_bytes(v4, v5, v6, v7);
  CC_LONG v12 = objc_msgSend_length(v4, v9, v10, v11);
  CC_SHA1(v8, v12, (unsigned __int8 *)&v20);
  uint64_t v14 = objc_msgSend_dataWithBytesNoCopy_length_freeWhenDone_(MEMORY[0x1E4F1C9B8], v13, (uint64_t)&v20, 20, 0);
  uint64_t v18 = objc_msgSend_CKLowercaseHexStringWithoutSpaces(v14, v15, v16, v17);

  return v18;
}

uint64_t CKCreateDirectoryAtPathWithAttributes(void *a1, void *a2, void *a3)
{
  v60[1] = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  uint64_t v10 = objc_msgSend_defaultManager(MEMORY[0x1E4F28CB8], v7, v8, v9);
  uint64_t v13 = objc_msgSend_objectForKey_(v6, v11, CKDirectoryEmptyAfterReboot, v12);

  if (v13)
  {
    uint64_t v15 = objc_msgSend_attributesOfItemAtPath_error_(v10, v14, (uint64_t)v5, 0);
    uint64_t v18 = objc_msgSend_objectForKey_(v15, v16, *MEMORY[0x1E4F282C0], v17);
    if (v18)
    {
      uint64_t v19 = (void *)MEMORY[0x1E4F1C9C8];
      uint64_t v20 = CKBootTime();
      uint64_t v24 = objc_msgSend_dateWithTimeIntervalSince1970_(v19, v21, v22, v23, (double)v20);
      id v27 = objc_msgSend_earlierDate_(v18, v25, (uint64_t)v24, v26);

      if (v27 == v18) {
        objc_msgSend_removeItemAtPath_error_(v10, v28, (uint64_t)v5, 0);
      }
    }
  }
  id v58 = 0;
  char v29 = objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(v10, v14, (uint64_t)v5, 1, v6, &v58);
  id v30 = v58;
  id v34 = v30;
  if (v29) {
    goto LABEL_9;
  }
  uint64_t v35 = objc_msgSend_domain(v30, v31, v32, v33);
  if (!objc_msgSend_isEqualToString_(v35, v36, *MEMORY[0x1E4F281F8], v37))
  {

LABEL_13:
    if (a3)
    {
      id v34 = v34;
      uint64_t v55 = 0;
      *a3 = v34;
    }
    else
    {
      uint64_t v55 = 0;
    }
    goto LABEL_16;
  }
  uint64_t v41 = objc_msgSend_code(v34, v38, v39, v40);

  if (v41 != 516) {
    goto LABEL_13;
  }
LABEL_9:
  id v57 = v34;
  uint64_t v42 = objc_msgSend_attributesOfItemAtPath_error_(v10, v31, (uint64_t)v5, (uint64_t)&v57);
  id v43 = v57;

  uint64_t v44 = *MEMORY[0x1E4F28370];
  uint64_t v47 = objc_msgSend_objectForKeyedSubscript_(v42, v45, *MEMORY[0x1E4F28370], v46);
  uint64_t v48 = *MEMORY[0x1E4F28358];
  char isEqualToString = objc_msgSend_isEqualToString_(v47, v49, *MEMORY[0x1E4F28358], v50);

  if ((isEqualToString & 1) == 0)
  {
    uint64_t v59 = v44;
    v60[0] = v48;
    id v53 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v52, (uint64_t)v60, (uint64_t)&v59, 1);
    objc_msgSend_setAttributes_ofItemAtPath_error_(v10, v54, (uint64_t)v53, (uint64_t)v5, 0);
  }
  uint64_t v55 = 1;
  id v34 = v43;
LABEL_16:

  return v55;
}

id sub_18AF44B54(id a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a1)
  {
    v22.receiver = a1;
    v22.super_class = (Class)CKRecordZone;
    id v6 = objc_msgSendSuper2(&v22, sel_init);
    a1 = v6;
    if (v6)
    {
      v6[5] = a3;
      uint64_t v10 = objc_msgSend_copy(v5, v7, v8, v9);
      uint64_t v11 = (void *)*((void *)a1 + 4);
      *((void *)a1 + 4) = v10;

      *((unsigned char *)a1 + 12) = 1;
      *((unsigned char *)a1 + 10) = 0;
      uint64_t v12 = [CKRequiredFeatureSet alloc];
      uint64_t v13 = MEMORY[0x1E4F1CBF0];
      uint64_t v15 = objc_msgSend_initWithZoneFeatures_recordFeatures_fieldFeatures_(v12, v14, MEMORY[0x1E4F1CBF0], MEMORY[0x1E4F1CBF0], MEMORY[0x1E4F1CBF0]);
      uint64_t v16 = (void *)*((void *)a1 + 25);
      *((void *)a1 + 25) = v15;

      uint64_t v17 = [CKRequiredFeatureSet alloc];
      uint64_t v19 = objc_msgSend_initWithZoneFeatures_recordFeatures_fieldFeatures_(v17, v18, v13, v13, v13);
      uint64_t v20 = (void *)*((void *)a1 + 19);
      *((void *)a1 + 19) = v19;
    }
  }

  return a1;
}

id CKRequiredFeatureSet.init(zoneFeatures:recordFeatures:fieldFeatures:)(unint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v7 = (void *)(v3 + OBJC_IVAR___CKRequiredFeatureSet__wrapped);
  uint64_t v8 = MEMORY[0x1E4FBC868];
  *uint64_t v7 = MEMORY[0x1E4FBC868];
  v7[1] = v8;
  void v7[2] = v8;
  v11.super_class = (Class)CKRequiredFeatureSet;
  id v9 = objc_msgSendSuper2(&v11, sel_init);
  sub_18AF44D9C(a1, a2, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v9;
}

uint64_t type metadata accessor for CKRecordFeature(uint64_t a1)
{
  return sub_18AF34EA0(a1, (unint64_t *)&unk_1EB279560);
}

uint64_t type metadata accessor for CKFieldFeature(uint64_t a1)
{
  return sub_18AF34EA0(a1, &qword_1EB279570);
}

uint64_t type metadata accessor for CKZoneFeature(uint64_t a1)
{
  return sub_18AF34EA0(a1, (unint64_t *)&unk_1EB279550);
}

uint64_t sub_18AF44D9C(unint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v6 = result;
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  unint64_t v77 = a2;
  uint64_t v75 = v3;
  if (v6)
  {
    if (v6 < 1)
    {
      __break(1u);
      goto LABEL_71;
    }
    uint64_t v8 = 0;
    uint64_t v9 = MEMORY[0x1E4FBC860];
    do
    {
      uint64_t v10 = v9;
      if ((a1 & 0xC000000000000001) != 0) {
        id v11 = (id)MEMORY[0x18C1298C0](v8, a1);
      }
      else {
        id v11 = *(id *)(a1 + 8 * v8 + 32);
      }
      uint64_t v12 = v11;
      sub_18AF86038(&OBJC_IVAR___CKZoneFeature__wrapped, &v81);

      uint64_t v13 = v82;
      if (v82)
      {
        uint64_t v14 = v81;
        uint64_t v15 = v83;
        uint64_t v16 = v84;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v9 = v10;
        }
        else
        {
          sub_18AF656A4(0, *(void *)(v10 + 16) + 1, 1, v10);
          uint64_t v9 = v20;
        }
        unint64_t v18 = *(void *)(v9 + 16);
        unint64_t v17 = *(void *)(v9 + 24);
        if (v18 >= v17 >> 1)
        {
          sub_18AF656A4(v17 > 1, v18 + 1, 1, v9);
          uint64_t v9 = v21;
        }
        *(void *)(v9 + 16) = v18 + 1;
        uint64_t v19 = (void *)(v9 + 32 * v18);
        v19[4] = v14;
        v19[5] = v13;
        v19[6] = v15;
        v19[7] = v16;
      }
      else
      {
        uint64_t v9 = v10;
      }
      ++v8;
    }
    while (v6 != v8);
  }
  else
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
  }
  uint64_t v76 = v9;
  swift_bridgeObjectRelease();
  unint64_t v22 = v77;
  if (!(v77 >> 62))
  {
    uint64_t v23 = *(void *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v23) {
      goto LABEL_22;
    }
LABEL_37:
    uint64_t v25 = MEMORY[0x1E4FBC860];
    goto LABEL_38;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v23 = result;
  if (!result) {
    goto LABEL_37;
  }
LABEL_22:
  if (v23 < 1)
  {
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  uint64_t v24 = 0;
  uint64_t v25 = MEMORY[0x1E4FBC860];
  do
  {
    if ((v77 & 0xC000000000000001) != 0) {
      id v26 = (id)MEMORY[0x18C1298C0](v24, v22);
    }
    else {
      id v26 = *(id *)(v22 + 8 * v24 + 32);
    }
    id v27 = v26;
    sub_18AF86038(&OBJC_IVAR___CKRecordFeature__wrapped, &v81);

    uint64_t v28 = v82;
    if (v82)
    {
      uint64_t v29 = v81;
      uint64_t v30 = v83;
      uint64_t v31 = v84;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_18AF656B8(0, *(void *)(v25 + 16) + 1, 1, v25);
        uint64_t v25 = v35;
      }
      unint64_t v33 = *(void *)(v25 + 16);
      unint64_t v32 = *(void *)(v25 + 24);
      if (v33 >= v32 >> 1)
      {
        sub_18AF656B8(v32 > 1, v33 + 1, 1, v25);
        uint64_t v25 = v36;
      }
      *(void *)(v25 + 16) = v33 + 1;
      id v34 = (void *)(v25 + 32 * v33);
      v34[4] = v29;
      v34[5] = v28;
      v34[6] = v30;
      v34[7] = v31;
      unint64_t v22 = v77;
    }
    ++v24;
  }
  while (v23 != v24);
LABEL_38:
  swift_bridgeObjectRelease();
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v37 = result;
    if (result)
    {
LABEL_40:
      if (v37 >= 1)
      {
        uint64_t v38 = 0;
        uint64_t v39 = MEMORY[0x1E4FBC860];
        uint64_t v78 = v25;
        do
        {
          if ((a3 & 0xC000000000000001) != 0) {
            id v40 = (id)MEMORY[0x18C1298C0](v38, a3);
          }
          else {
            id v40 = *(id *)(a3 + 8 * v38 + 32);
          }
          uint64_t v41 = v40;
          sub_18AF86038(&OBJC_IVAR___CKFieldFeature__wrapped, &v81);

          uint64_t v42 = v82;
          if (v82)
          {
            uint64_t v43 = v81;
            uint64_t v44 = v83;
            uint64_t v45 = v84;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_18AF65798(0, *(void *)(v39 + 16) + 1, 1, v39);
              uint64_t v39 = v49;
            }
            unint64_t v47 = *(void *)(v39 + 16);
            unint64_t v46 = *(void *)(v39 + 24);
            if (v47 >= v46 >> 1)
            {
              sub_18AF65798(v46 > 1, v47 + 1, 1, v39);
              uint64_t v39 = v50;
            }
            *(void *)(v39 + 16) = v47 + 1;
            uint64_t v48 = (void *)(v39 + 32 * v47);
            v48[4] = v43;
            v48[5] = v42;
            v48[6] = v44;
            v48[7] = v45;
            uint64_t v25 = v78;
          }
          ++v38;
        }
        while (v37 != v38);
        goto LABEL_55;
      }
LABEL_72:
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t v37 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v37) {
      goto LABEL_40;
    }
  }
  uint64_t v39 = MEMORY[0x1E4FBC860];
LABEL_55:
  swift_bridgeObjectRelease();
  uint64_t v51 = MEMORY[0x1E4FBC868];
  uint64_t v81 = MEMORY[0x1E4FBC868];
  Swift::Int v52 = *(void *)(v76 + 16);
  sub_18AF161EC((uint64_t *)&unk_1EB279520);
  Dictionary.reserveCapacity(_:)(v52);
  if (v52)
  {
    swift_bridgeObjectRetain();
    id v53 = (uint64_t *)(v76 + 56);
    do
    {
      uint64_t v54 = *(v53 - 3);
      uint64_t v55 = *(v53 - 2);
      uint64_t v56 = *(v53 - 1);
      uint64_t v57 = *v53;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_18AF7A5E4(v54, v55, v56, v57);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v53 += 4;
      --v52;
    }
    while (v52);
    swift_bridgeObjectRelease();
  }
  uint64_t v58 = v81;
  uint64_t v81 = v51;
  Swift::Int v59 = *(void *)(v25 + 16);
  swift_bridgeObjectRetain();
  sub_18AF161EC((uint64_t *)&unk_1EB279540);
  Dictionary.reserveCapacity(_:)(v59);
  if (v59)
  {
    uint64_t v60 = v58;
    swift_bridgeObjectRetain();
    uint64_t v61 = (uint64_t *)(v25 + 56);
    do
    {
      uint64_t v62 = *(v61 - 3);
      uint64_t v63 = *(v61 - 2);
      uint64_t v64 = *(v61 - 1);
      uint64_t v65 = *v61;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_18AF7A75C(v62, v63, v64, v65);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v61 += 4;
      --v59;
    }
    while (v59);
    swift_bridgeObjectRelease();
    uint64_t v58 = v60;
    uint64_t v51 = MEMORY[0x1E4FBC868];
  }
  swift_bridgeObjectRelease();
  uint64_t v66 = v81;
  uint64_t v81 = v51;
  Swift::Int v67 = *(void *)(v39 + 16);
  sub_18AF161EC((uint64_t *)&unk_1EB279530);
  Dictionary.reserveCapacity(_:)(v67);
  if (v67)
  {
    uint64_t v80 = v66;
    swift_bridgeObjectRetain();
    uint64_t v68 = (uint64_t *)(v39 + 56);
    do
    {
      uint64_t v69 = *(v68 - 3);
      uint64_t v70 = *(v68 - 2);
      uint64_t v71 = *(v68 - 1);
      uint64_t v72 = *v68;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_18AF7A8D4(v69, v70, v71, v72);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v68 += 4;
      --v67;
    }
    while (v67);
    swift_bridgeObjectRelease();
    uint64_t v66 = v80;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v73 = v81;
  uint64_t v74 = (uint64_t *)(v75 + OBJC_IVAR___CKRequiredFeatureSet__wrapped);
  *uint64_t v74 = v58;
  v74[1] = v66;
  v74[2] = v73;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t CKCheckedUnsafeObjectTransfer.__deallocating_deinit()
{
  return sub_18AF48FA4(CKCheckedUnsafeObjectTransfer.deinit);
}

unint64_t CKBoolFromCKTernary(unint64_t result, const char *a2, uint64_t a3, uint64_t a4)
{
  if (result > 1)
  {
    uint64_t v4 = objc_msgSend_currentHandler(MEMORY[0x1E4F28B00], a2, a3, a4);
    uint64_t v7 = objc_msgSend_stringWithUTF8String_(NSString, v5, (uint64_t)"BOOL CKBoolFromCKTernary(CKTernary)", v6);
    objc_msgSend_handleFailureInFunction_file_lineNumber_description_(v4, v8, (uint64_t)v7, @"CKUtils.m", 120, @"Can't go from NotSet -> BOOL");

    return 0;
  }
  return result;
}

uint64_t CKValueIsAcceptablePredicateClass(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  BOOL v2 = CKAcceptablePredicateValueClasses();
  uint64_t v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v9, (uint64_t)v13, 16);
  if (v4)
  {
    uint64_t v5 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        if (objc_opt_isKindOfClass())
        {
          uint64_t v4 = 1;
          goto LABEL_11;
        }
      }
      uint64_t v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v7, (uint64_t)&v9, (uint64_t)v13, 16);
      if (v4) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v4;
}

id CKAcceptablePredicateValueClasses()
{
  if (qword_1EB27A010 != -1) {
    dispatch_once(&qword_1EB27A010, &unk_1ED7EF858);
  }
  CFUUIDRef v0 = (void *)qword_1EB27A008;

  return v0;
}

__CFString *CKStringFromWalrusStatus(unint64_t a1)
{
  if (a1 > 2) {
    return @"Unknown";
  }
  else {
    return off_1E545FFC8[a1];
  }
}

__CFString *CKStringForDuetPreClearedMode(unint64_t a1)
{
  if (a1 > 2) {
    return @"Unknown";
  }
  else {
    return off_1E5462690[a1];
  }
}

uint64_t CKDPRecordFieldValueEncryptedValueReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        uint64_t v16 = *v5;
        int v17 = *(unsigned __int8 *)(a2 + v16);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    uint64_t v16 = *v5;
    int v17 = *(unsigned __int8 *)(a2 + v16);
    if (*(unsigned char *)(a2 + v16)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    int v18 = v10 & 7;
    if (v17 || v18 == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 3u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 128) |= 2u;
        while (1)
        {
          uint64_t v23 = *v3;
          uint64_t v24 = *(void *)(a2 + v23);
          unint64_t v25 = v24 + 1;
          if (v24 == -1 || v25 > *(void *)(a2 + *v4)) {
            break;
          }
          char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
          *(void *)(a2 + v23) = v25;
          v22 |= (unint64_t)(v26 & 0x7F) << v20;
          if ((v26 & 0x80) == 0) {
            goto LABEL_74;
          }
          v20 += 7;
          BOOL v15 = v21++ >= 9;
          if (v15)
          {
            uint64_t v22 = 0;
            goto LABEL_76;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_74:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v22 = 0;
        }
LABEL_76:
        *(void *)(a1 + 64) = v22;
        goto LABEL_70;
      case 4u:
        *(unsigned char *)(a1 + 128) |= 1u;
        uint64_t v27 = *v3;
        unint64_t v28 = *(void *)(a2 + v27);
        if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v29 = *(void *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v29 = 0;
        }
        *(void *)(a1 + 56) = v29;
        goto LABEL_70;
      case 5u:
        uint64_t v30 = objc_alloc_init(CKDPDate);
        objc_storeStrong((id *)(a1 + 80), v30);
        goto LABEL_60;
      case 6u:
        uint64_t v31 = PBReaderReadString();
        unint64_t v32 = *(void **)(a1 + 120);
        *(void *)(a1 + 120) = v31;

        goto LABEL_70;
      case 7u:
        uint64_t v30 = objc_alloc_init(CKDPLocationCoordinate);
        objc_storeStrong((id *)(a1 + 96), v30);
        goto LABEL_66;
      case 8u:
        uint64_t v30 = objc_alloc_init(CKDPRecordReference);
        objc_storeStrong((id *)(a1 + 104), v30);
        if (!PBReaderPlaceMark() || (CKDPRecordReferenceReadFrom((uint64_t)v30, a2) & 1) == 0) {
          goto LABEL_95;
        }
        goto LABEL_68;
      case 0xAu:
        if (v18 != 2)
        {
          char v51 = 0;
          unsigned int v52 = 0;
          uint64_t v53 = 0;
          while (1)
          {
            uint64_t v54 = *v3;
            uint64_t v55 = *(void *)(a2 + v54);
            unint64_t v56 = v55 + 1;
            if (v55 == -1 || v56 > *(void *)(a2 + *v4)) {
              break;
            }
            char v57 = *(unsigned char *)(*(void *)(a2 + *v7) + v55);
            *(void *)(a2 + v54) = v56;
            v53 |= (unint64_t)(v57 & 0x7F) << v51;
            if (v57 < 0)
            {
              v51 += 7;
              BOOL v15 = v52++ >= 9;
              if (!v15) {
                continue;
              }
            }
            goto LABEL_88;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_88:
          PBRepeatedInt64Add();
          goto LABEL_70;
        }
        uint64_t result = PBReaderPlaceMark();
        if (!result) {
          return result;
        }
        while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
        {
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v36 = 0;
          while (1)
          {
            uint64_t v37 = *v3;
            uint64_t v38 = *(void *)(a2 + v37);
            unint64_t v39 = v38 + 1;
            if (v38 == -1 || v39 > *(void *)(a2 + *v4)) {
              break;
            }
            char v40 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
            *(void *)(a2 + v37) = v39;
            v36 |= (unint64_t)(v40 & 0x7F) << v34;
            if (v40 < 0)
            {
              v34 += 7;
              BOOL v15 = v35++ >= 9;
              if (!v15) {
                continue;
              }
            }
            goto LABEL_49;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_49:
          PBRepeatedInt64Add();
        }
        goto LABEL_72;
      case 0xBu:
        if (v18 == 2)
        {
          uint64_t result = PBReaderPlaceMark();
          if (!result) {
            return result;
          }
          while (1)
          {
            uint64_t v41 = (unint64_t *)(a2 + *v3);
            unint64_t v42 = *v41;
            unint64_t v43 = *(void *)(a2 + *v4);
            if (*v41 >= v43) {
              break;
            }
            uint64_t v44 = *v5;
            if (*(unsigned char *)(a2 + v44)) {
              break;
            }
            if (v42 > 0xFFFFFFFFFFFFFFF7 || v42 + 8 > v43) {
              *(unsigned char *)(a2 + v44) = 1;
            }
            else {
              *uint64_t v41 = v42 + 8;
            }
            PBRepeatedDoubleAdd();
          }
LABEL_72:
          PBReaderRecallMark();
        }
        else
        {
          uint64_t v58 = *v3;
          unint64_t v59 = *(void *)(a2 + v58);
          if (v59 <= 0xFFFFFFFFFFFFFFF7 && v59 + 8 <= *(void *)(a2 + *v4)) {
            *(void *)(a2 + v58) = v59 + 8;
          }
          else {
            *(unsigned char *)(a2 + v16) = 1;
          }
          PBRepeatedDoubleAdd();
        }
        goto LABEL_70;
      case 0xCu:
        uint64_t v30 = objc_alloc_init(CKDPDate);
        objc_msgSend_addDateListValue_((void *)a1, v45, (uint64_t)v30, v46);
LABEL_60:
        if (!PBReaderPlaceMark() || (CKDPDateReadFrom((uint64_t)v30, a2) & 1) == 0) {
          goto LABEL_95;
        }
        goto LABEL_68;
      case 0xDu:
        PBReaderReadString();
        uint64_t v30 = (CKDPDate *)objc_claimAutoreleasedReturnValue();
        if (v30) {
          objc_msgSend_addStringListValue_((void *)a1, v47, (uint64_t)v30, v48);
        }
        goto LABEL_69;
      case 0xEu:
        uint64_t v30 = objc_alloc_init(CKDPLocationCoordinate);
        objc_msgSend_addLocationListValue_((void *)a1, v49, (uint64_t)v30, v50);
LABEL_66:
        if PBReaderPlaceMark() && (CKDPLocationCoordinateReadFrom((uint64_t)v30, a2))
        {
LABEL_68:
          PBReaderRecallMark();
LABEL_69:

LABEL_70:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_95:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_70;
    }
  }
}

uint64_t CKDPDateReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 16) |= 1u;
        uint64_t v18 = *v3;
        unint64_t v19 = *(void *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
          *(void *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v20 = 0;
        }
        *(void *)(a1 + 8) = v20;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id static CKSyncEngineSendChangesOptions.defaultOperationGroup()()
{
  return static SyncEngine.defaultOperationGroup()();
}

id static SyncEngine.defaultOperationGroup()()
{
  id v0 = objc_msgSend(objc_allocWithZone((Class)CKOperationGroup), sel_init);
  id v1 = objc_msgSend(objc_allocWithZone((Class)CKOperationConfiguration), sel_init);
  objc_msgSend(v1, sel_setQualityOfService_, 17);
  sub_18AF45F24((uint64_t)objc_msgSend(v1, sel_setRequestOriginator_, 3), sel_setDefaultConfiguration_);

  return v0;
}

id sub_18AF45F24(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

char *CKRequiredFeatureSet.copy(with:)@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t v4 = type metadata accessor for CKRequiredFeatureSet(a1);
  uint64_t v5 = v2 + OBJC_IVAR___CKRequiredFeatureSet__wrapped;
  uint64_t v6 = *(void *)(v2 + OBJC_IVAR___CKRequiredFeatureSet__wrapped);
  uint64_t v7 = *(void *)(v2 + OBJC_IVAR___CKRequiredFeatureSet__wrapped + 8);
  uint64_t v8 = *(void *)(v5 + 16);
  v10[0] = v6;
  v10[1] = v7;
  v10[2] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = sub_18AF46354((uint64_t)v10);
  a2[3] = (char *)v4;
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for CKRequiredFeatureSet(uint64_t a1)
{
  return sub_18AF34EA0(a1, (unint64_t *)&unk_1EB279500);
}

char *sub_18AF46354(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = (char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  uint64_t v4 = &v3[OBJC_IVAR___CKRequiredFeatureSet__wrapped];
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a1;
  *((void *)v4 + 2) = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

id sub_18AF46400()
{
  id v1 = (void *)(v0 + OBJC_IVAR___CKRequiredFeatureSet__wrapped);
  uint64_t v2 = MEMORY[0x1E4FBC868];
  *id v1 = MEMORY[0x1E4FBC868];
  v1[1] = v2;
  v1[2] = v2;
  v4.super_class = (Class)CKRequiredFeatureSet;
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t type metadata accessor for SyncEngine()
{
  uint64_t result = qword_1E91252B8;
  if (!qword_1E91252B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id CKRecord.subscript.getter()
{
  id v1 = (void *)MEMORY[0x18C128F60]();
  id v2 = objc_msgSend(v0, sel_objectForKey_, v1);

  return v2;
}

void type metadata accessor for CKSyncEngine.FetchChangesOptions()
{
}

void type metadata accessor for CKRecordFeature()
{
}

void type metadata accessor for CKFieldFeature()
{
}

id CKDeviceUDID()
{
  return sub_18AF1C2A0(@"UniqueDeviceID");
}

void type metadata accessor for CKSyncEngine.FetchChangesOptions.Scope()
{
}

id CKXPCSuitableError(void *a1)
{
  uint64_t v154 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v5 = objc_msgSend_userInfo(v1, v2, v3, v4);
  uint64_t v9 = objc_msgSend_count(v5, v6, v7, v8);

  if (v9 && (objc_msgSend_CKHasCKErrorInUnderlyingErrors(v1, v10, v11, v12) & 1) != 0)
  {
    if (qword_1EB279F30 != -1) {
      dispatch_once(&qword_1EB279F30, &unk_1ED7F56B8);
    }
    unint64_t v13 = objc_opt_new();
    long long v147 = 0u;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v150 = 0u;
    int v17 = objc_msgSend_userInfo(v1, v14, v15, v16);
    unsigned int v21 = objc_msgSend_allKeys(v17, v18, v19, v20);

    uint64_t v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(v21, v22, (uint64_t)&v147, (uint64_t)v153, 16);
    if (v23)
    {
      uint64_t v26 = v23;
      uint64_t v27 = *(void *)v148;
      do
      {
        for (uint64_t i = 0; i != v26; ++i)
        {
          if (*(void *)v148 != v27) {
            objc_enumerationMutation(v21);
          }
          uint64_t v29 = *(void *)(*((void *)&v147 + 1) + 8 * i);
          if ((objc_msgSend_containsObject_((void *)qword_1EB279F38, v24, v29, v25) & 1) == 0)
          {
            objc_msgSend_userInfo(v1, v24, v30, v25);
            v32 = id v31 = v1;
            unsigned int v35 = objc_msgSend_objectForKeyedSubscript_(v32, v33, v29, v34);
            objc_msgSend_setObject_forKeyedSubscript_(v13, v36, (uint64_t)v35, v29);

            id v1 = v31;
          }
        }
        uint64_t v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v21, v24, (uint64_t)&v147, (uint64_t)v153, 16);
      }
      while (v26);
    }

    char v40 = objc_msgSend_userInfo(v1, v37, v38, v39);
    unint64_t v43 = objc_msgSend_objectForKeyedSubscript_(v40, v41, @"NotFoundItemID", v42);

    if (v43)
    {
      if (objc_msgSend_conformsToProtocol_(v43, v44, (uint64_t)&unk_1ED849988, v46))
      {
        uint64_t v50 = objc_msgSend_CKXPCSuitableString(v43, v47, v48, v49);
        objc_msgSend_setObject_forKeyedSubscript_(v13, v51, (uint64_t)v50, @"NotFoundItemID");
      }
      else
      {
        objc_msgSend_setObject_forKeyedSubscript_(v13, v47, (uint64_t)v43, @"NotFoundItemID");
      }
    }
    uint64_t v53 = objc_msgSend_userInfo(v1, v44, v45, v46);
    uint64_t v54 = *MEMORY[0x1E4F28A50];
    uint64_t v57 = objc_msgSend_objectForKeyedSubscript_(v53, v55, *MEMORY[0x1E4F28A50], v56);

    if (v57)
    {
      uint64_t v61 = CKXPCSuitableError(v57);
      objc_msgSend_setObject_forKeyedSubscript_(v13, v62, (uint64_t)v61, v54);
    }
    uint64_t v137 = (void *)v57;
    uint64_t v63 = objc_msgSend_userInfo(v1, v58, v59, v60);
    uint64_t v64 = *MEMORY[0x1E4F28750];
    Swift::Int v67 = objc_msgSend_objectForKeyedSubscript_(v63, v65, *MEMORY[0x1E4F28750], v66);

    uint64_t v138 = v67;
    if (v67)
    {
      uint64_t v71 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v68, v69, v70);
      long long v143 = 0u;
      long long v144 = 0u;
      long long v145 = 0u;
      long long v146 = 0u;
      id v72 = v67;
      uint64_t v74 = objc_msgSend_countByEnumeratingWithState_objects_count_(v72, v73, (uint64_t)&v143, (uint64_t)v152, 16);
      if (v74)
      {
        uint64_t v75 = v74;
        uint64_t v76 = *(void *)v144;
        do
        {
          for (uint64_t j = 0; j != v75; ++j)
          {
            if (*(void *)v144 != v76) {
              objc_enumerationMutation(v72);
            }
            uint64_t v78 = CKXPCSuitableError(*(void *)(*((void *)&v143 + 1) + 8 * j));
            objc_msgSend_addObject_(v71, v79, (uint64_t)v78, v80);
          }
          uint64_t v75 = objc_msgSend_countByEnumeratingWithState_objects_count_(v72, v81, (uint64_t)&v143, (uint64_t)v152, 16);
        }
        while (v75);
      }

      objc_msgSend_setObject_forKeyedSubscript_(v13, v82, (uint64_t)v71, v64);
      Swift::Int v67 = v138;
    }
    uint64_t v83 = objc_msgSend_userInfo(v1, v68, v69, v70);
    uint64_t v86 = objc_msgSend_objectForKeyedSubscript_(v83, v84, @"CKFunctionError", v85);

    if (v86)
    {
      uint64_t v90 = CKXPCSuitableError(v86);
      objc_msgSend_setObject_forKeyedSubscript_(v13, v91, (uint64_t)v90, @"CKFunctionError");
    }
    uint64_t v92 = objc_msgSend_userInfo(v1, v87, v88, v89);
    uint64_t v95 = objc_msgSend_objectForKeyedSubscript_(v92, v93, @"CKPartialErrors", v94);

    if (objc_msgSend_count(v95, v96, v97, v98))
    {
      v134 = v86;
      uint64_t v135 = v43;
      id v136 = v1;
      id v102 = objc_opt_new();
      long long v139 = 0u;
      long long v140 = 0u;
      long long v141 = 0u;
      long long v142 = 0u;
      id v106 = objc_msgSend_allKeys(v95, v103, v104, v105);
      uint64_t v108 = objc_msgSend_countByEnumeratingWithState_objects_count_(v106, v107, (uint64_t)&v139, (uint64_t)v151, 16);
      if (v108)
      {
        uint64_t v111 = v108;
        uint64_t v112 = *(void *)v140;
        do
        {
          for (uint64_t k = 0; k != v111; ++k)
          {
            if (*(void *)v140 != v112) {
              objc_enumerationMutation(v106);
            }
            char v114 = *(void **)(*((void *)&v139 + 1) + 8 * k);
            if (objc_msgSend_conformsToProtocol_(v114, v109, (uint64_t)&unk_1ED849988, v110))
            {
              uint64_t v118 = objc_msgSend_CKXPCSuitableString(v114, v115, v116, v117);
              uint64_t v121 = objc_msgSend_objectForKeyedSubscript_(v95, v119, (uint64_t)v114, v120);
              os_log_type_t v122 = CKXPCSuitableError(v121);
              objc_msgSend_setObject_forKeyedSubscript_(v102, v123, (uint64_t)v122, (uint64_t)v118);
            }
            else
            {
              uint64_t v118 = objc_msgSend_objectForKeyedSubscript_(v95, v115, (uint64_t)v114, v117);
              uint64_t v121 = CKXPCSuitableError(v118);
              objc_msgSend_setObject_forKeyedSubscript_(v102, v124, (uint64_t)v121, (uint64_t)v114);
            }
          }
          uint64_t v111 = objc_msgSend_countByEnumeratingWithState_objects_count_(v106, v109, (uint64_t)&v139, (uint64_t)v151, 16);
        }
        while (v111);
      }

      objc_msgSend_setObject_forKeyedSubscript_(v13, v125, (uint64_t)v102, @"CKPartialErrors");
      unint64_t v43 = v135;
      id v1 = v136;
      Swift::Int v67 = v138;
      uint64_t v86 = v134;
    }
    unint64_t v126 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v127 = objc_msgSend_domain(v1, v99, v100, v101);
    uint64_t v131 = objc_msgSend_code(v1, v128, v129, v130);
    objc_msgSend_errorWithDomain_code_userInfo_(v126, v132, (uint64_t)v127, v131, v13);
    id v52 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v52 = v1;
  }

  return v52;
}

void ck_log_facilities_setup_logging_facilities()
{
  if (_sCKUseSystemInstalledBinariesPredicate != -1) {
    dispatch_once(&_sCKUseSystemInstalledBinariesPredicate, &unk_1ED7EF9F8);
  }
  if (__sTestOverridesAvailable) {
    BOOL v0 = 1;
  }
  else {
    BOOL v0 = _sCKUseSystemInstalledBinaries == 0;
  }
  if (v0) {
    id v1 = "com.apple.cloudkit.test";
  }
  else {
    id v1 = "com.apple.cloudkit";
  }
  if ((const char *)qword_1EB27A148 != v1)
  {
    qword_1EB27A148 = (uint64_t)v1;
    os_log_t v2 = os_log_create(v1, "CK");
    uint64_t v3 = (void *)ck_log_facility_ck;
    ck_log_facility_cuint64_t k = (uint64_t)v2;

    os_log_t v4 = os_log_create(v1, "PCS");
    uint64_t v5 = (void *)ck_log_facility_pcs;
    ck_log_facility_pcs = (uint64_t)v4;

    os_log_t v6 = os_log_create(v1, "SQL");
    uint64_t v7 = (void *)ck_log_facility_sql;
    ck_log_facility_sql = (uint64_t)v6;

    os_log_t v8 = os_log_create(v1, "STAT");
    uint64_t v9 = (void *)ck_log_facility_status;
    ck_log_facility_status = (uint64_t)v8;

    os_log_t v10 = os_log_create(v1, "Request");
    uint64_t v11 = (void *)ck_log_facility_request;
    ck_log_facility_request = (uint64_t)v10;

    os_log_t v12 = os_log_create(v1, "MMCS");
    unint64_t v13 = (void *)ck_log_facility_mmcs;
    ck_log_facility_mmcs = (uint64_t)v12;

    os_log_t v14 = os_log_create(v1, "Asset");
    uint64_t v15 = (void *)ck_log_facility_asset;
    ck_log_facility_asset = (uint64_t)v14;

    os_log_t v16 = os_log_create(v1, "OP");
    int v17 = (void *)ck_log_facility_op;
    ck_log_facility_op = (uint64_t)v16;

    os_log_t v18 = os_log_create(v1, "TrafficBinary");
    uint64_t v19 = (void *)ck_log_facility_traffic_binary;
    ck_log_facility_traffic_binary = (uint64_t)v18;

    os_log_t v20 = os_log_create(v1, "LogStats");
    unsigned int v21 = (void *)ck_log_facility_logstats;
    ck_log_facility_logstats = (uint64_t)v20;

    os_log_t v22 = os_log_create(v1, "Scheduler");
    uint64_t v23 = (void *)ck_log_facility_scheduler;
    ck_log_facility_scheduler = (uint64_t)v22;

    os_log_t v24 = os_log_create(v1, "NotificationListener");
    uint64_t v25 = (void *)ck_log_facility_notification_listener;
    ck_log_facility_notification_listener = (uint64_t)v24;

    os_log_t v26 = os_log_create(v1, "Engine");
    uint64_t v27 = (void *)ck_log_facility_engine;
    ck_log_facility_engine = (uint64_t)v26;

    os_log_t v28 = os_log_create(v1, "DataRepair");
    uint64_t v29 = (void *)ck_log_facility_data_repair;
    ck_log_facility_data_repair = (uint64_t)v28;

    os_log_t v30 = os_log_create(v1, "DistributedSync");
    id v31 = (void *)ck_log_facility_distributed_sync;
    ck_log_facility_distributed_sync = (uint64_t)v30;

    os_log_t v32 = os_log_create(v1, "DiscretionaryDaemon");
    unint64_t v33 = (void *)ck_log_facility_ckdd;
    ck_log_facility_ckdd = (uint64_t)v32;

    os_log_t v34 = os_log_create(v1, "MockServer");
    unsigned int v35 = (void *)ck_log_facility_mock;
    ck_log_facility_mocuint64_t k = (uint64_t)v34;

    os_log_t v36 = os_log_create(v1, "TrafficCompressed");
    uint64_t v37 = ck_log_facility_traffic_compressed;
    ck_log_facility_traffic_compressed = (uint64_t)v36;
    MEMORY[0x1F41817F8](v36, v37);
  }
}

uint64_t CKPIDForProcessNamed(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  *(_OWORD *)int v17 = xmmword_18B1F39E0;
  uint64_t v18 = 0;
  size_t size = 0;
  uint64_t v2 = sysctl(v17, 3u, 0, &size, 0, 0);
  if (!v2)
  {
    uint64_t v3 = (char *)malloc_type_malloc(size, 0x87656510uLL);
    uint64_t v4 = sysctl(v17, 3u, v3, &size, 0, 0);
    if (v4)
    {
      uint64_t v2 = v4;
    }
    else
    {
      id v5 = v1;
      uint64_t v9 = objc_msgSend_UTF8String(v5, v6, v7, v8);
      unint64_t v10 = (int)size / 0x288uLL;
      if ((int)v10 < 1)
      {
LABEL_13:
        free(v3);
        uint64_t v2 = 0xFFFFFFFFLL;
        goto LABEL_14;
      }
      uint64_t v11 = (const char *)v9;
      uint64_t v12 = 0;
      uint64_t v13 = 648 * v10;
      while (1)
      {
        uint64_t v2 = *(unsigned int *)&v3[v12 + 40];
        BOOL v14 = (int)v2 < 1 || v3[v12 + 36] == 5;
        if (!v14 && !strncmp(v11, &v3[v12 + 243], 0x10uLL)) {
          break;
        }
        v12 += 648;
        if (v13 == v12) {
          goto LABEL_13;
        }
      }
    }
    free(v3);
  }
LABEL_14:

  return v2;
}

uint64_t sub_18AF46F98()
{
  uint64_t result = dyld_program_sdk_at_least();
  byte_1EB279FAF = result;
  return result;
}

uint64_t sub_18AF46FC0(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 9);
  return result;
}

void sub_18AF46FD4(uint64_t a1)
{
}

uint64_t sub_18AF46FE8(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 11);
  return result;
}

void sub_18AF46FFC(uint64_t *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = objc_msgSend_setWithArray_(MEMORY[0x1E4F1CAD0], a2, a1[4], a4);
  uint64_t v9 = a1[5];
  if (v9) {
    objc_msgSend_set(*(void **)(v9 + 72), v5, v6, v7);
  }
  else {
  unint64_t v10 = objc_msgSend_set(0, v5, v6, v7);
  }
  char isSubsetOfSet = objc_msgSend_isSubsetOfSet_(v8, v11, (uint64_t)v10, v12);

  if ((isSubsetOfSet & 1) == 0)
  {
    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    BOOL v14 = (void *)ck_log_facility_engine;
    if (os_log_type_enabled((os_log_t)ck_log_facility_engine, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = (void *)a1[5];
      uint64_t v18 = v14;
      os_log_t v22 = objc_msgSend_shortDescription(v17, v19, v20, v21);
      uint64_t v23 = a1[4];
      int v36 = 138543618;
      uint64_t v37 = v22;
      __int16 v38 = 2112;
      uint64_t v39 = v23;
      _os_log_impl(&dword_18AF10000, v18, OS_LOG_TYPE_DEFAULT, "%{public}@ adding pending database changes: %@", (uint8_t *)&v36, 0x16u);
    }
    os_log_t v24 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v25 = objc_msgSend_databaseChangesWithOppositeTypeFromDatabaseChanges_(CKSyncEnginePendingDatabaseChange, v15, a1[4], v16);
    os_log_t v28 = objc_msgSend_setWithArray_(v24, v26, (uint64_t)v25, v27);

    uint64_t v31 = a1[5];
    if (v31) {
      objc_msgSend_minusSet_(*(void **)(v31 + 72), v29, (uint64_t)v28, v30);
    }
    else {
      objc_msgSend_minusSet_(0, v29, (uint64_t)v28, v30);
    }
    uint64_t v34 = a1[5];
    if (v34) {
      objc_msgSend_addObjectsFromArray_(*(void **)(v34 + 72), v32, a1[4], v33);
    }
    else {
      objc_msgSend_addObjectsFromArray_(0, v32, a1[4], v33);
    }
    uint64_t v35 = a1[5];
    if (v35) {
      ++*(void *)(v35 + 96);
    }
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
  }
}

void sub_18AF471FC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    uint64_t v2 = (void *)v2[10];
  }
  uint64_t v3 = v2;
  objc_msgSend_array(v3, v4, v5, v6);
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v10 = objc_msgSend_copy(v13, v7, v8, v9);
  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;
}

void sub_18AF47274(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    uint64_t v2 = (void *)v2[9];
  }
  uint64_t v3 = v2;
  objc_msgSend_array(v3, v4, v5, v6);
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v10 = objc_msgSend_copy(v13, v7, v8, v9);
  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;
}

uint64_t sub_18AF472EC()
{
  return sub_18AF1E758(v0);
}

void sub_18AF47304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_18AF3660C((uint64_t)&a10, a1, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_18AF47334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return *(void *)(a12 + 16);
}

unint64_t sub_18AF47348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(_WORD *)(v11 + 12) = 2080;
  uint64_t v14 = *(void *)(v12 + 24);
  char v15 = *(unsigned char *)(v12 + 32);
  char v16 = *(unsigned char *)(v12 + 64);
  uint64_t v17 = *(void *)(v12 + 72);
  char v18 = *(unsigned char *)(v12 + 80);
  long long v19 = *(_OWORD *)(v12 + 48);
  *(unsigned char *)(v10 + 88) = *(unsigned char *)(v12 + 16);
  *(void *)(v10 + 96) = v14;
  *(unsigned char *)(v10 + 104) = v15;
  *(void *)(v10 + 112) = a10;
  *(_OWORD *)(v10 + 120) = v19;
  *(unsigned char *)(v10 + 136) = v16;
  *(void *)(v10 + 144) = v17;
  *(unsigned char *)(v10 + 152) = v18;
  return CKSyncEngine.FetchChangesContext.description.getter();
}

void sub_18AF473A8()
{
  sub_18AF36054(v0, v2, v1);
}

uint64_t sub_18AF473C4()
{
  return v0;
}

uint64_t sub_18AF473F0(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_18AF47454()
{
  JUMPOUT(0x18C1298C0);
}

uint64_t sub_18AF4746C()
{
  return swift_beginAccess();
}

uint64_t sub_18AF474AC()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_18AF474C4()
{
  return v0;
}

uint64_t sub_18AF474D0()
{
  return swift_retain();
}

uint64_t sub_18AF474F0()
{
  return swift_retain();
}

uint64_t sub_18AF47550(uint64_t result)
{
  *(void *)(v1 + 96) = result;
  return result;
}

uint64_t sub_18AF47560(uint64_t a1)
{
  return sub_18AF43708(a1, 0, 1, v1);
}

uint64_t sub_18AF4757C()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t sub_18AF47594(uint64_t result)
{
  *(void *)(v1 - 88) = result;
  return result;
}

id sub_18AF475AC()
{
  uint64_t v3 = *(void **)(*(void *)(v0 + 48) + 8 * v1);
  return v3;
}

uint64_t sub_18AF475C4()
{
  return v0;
}

void sub_18AF475D4(void *a1, uint64_t a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, v4, a3, a4, v5, 0xCu);
}

uint64_t sub_18AF475FC(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t result = *(void *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = v4;
  return result;
}

uint64_t sub_18AF4761C()
{
  return v0 - 136;
}

id sub_18AF47644()
{
  return [v0 (SEL)(v1 + 2895)];
}

uint64_t sub_18AF4765C()
{
  return swift_retain();
}

uint64_t sub_18AF47688(uint64_t result)
{
  *(void *)(v1 + 152) = result;
  return result;
}

uint64_t sub_18AF476A0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_18AF4095C(v4, v3, a3);
}

uint64_t sub_18AF476C4(float a1)
{
  *uint64_t v1 = a1;
  return swift_task_isCurrentExecutor();
}

uint64_t sub_18AF476E0()
{
  return sub_18AF4095C(v0, v1, (uint64_t *)(v2 - 88));
}

uint64_t sub_18AF476FC()
{
  return swift_release();
}

uint64_t sub_18AF47718()
{
  return swift_release();
}

uint64_t sub_18AF4775C(uint64_t result)
{
  if (result != 1) {
    return sub_18AF1E758(result);
  }
  return result;
}

uint64_t sub_18AF4776C(void *a1)
{
  return sub_18AF6A5A8(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_18AF47774(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

void sub_18AF477A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = a1 + 40;
    uint64_t v5 = MEMORY[0x1E4FBC860];
    uint64_t v17 = a1 + 40;
    do
    {
      uint64_t v18 = v5;
      uint64_t v6 = (unsigned __int8 *)(v4 + 16 * v3);
      unint64_t v7 = v3;
      while (1)
      {
        if (v7 >= *(void *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        uint64_t v8 = (void *)*((void *)v6 - 1);
        int v9 = *v6;
        id v10 = v8;
        uint64_t v11 = v10;
        uint64_t v12 = (CKRecordZoneID *)(v9 == 1
                               ? v10
                               : objc_msgSend(v10, sel_zoneID));
        uint64_t v13 = v12;
        Swift::Bool v14 = CKSyncEngine.SendChangesOptions.Scope.contains(_:)(v12);

        if (v14) {
          break;
        }
        ++v7;

        v6 += 16;
        if (v2 == v7) {
          goto LABEL_16;
        }
      }
      uint64_t v5 = v18;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_18AF5B678();
        uint64_t v5 = v18;
      }
      unint64_t v15 = *(void *)(v5 + 16);
      if (v15 >= *(void *)(v5 + 24) >> 1)
      {
        sub_18AF5B678();
        uint64_t v5 = v18;
      }
      unint64_t v3 = v7 + 1;
      *(void *)(v5 + 16) = v15 + 1;
      uint64_t v16 = v5 + 16 * v15;
      *(void *)(v16 + 32) = v8;
      *(unsigned char *)(v16 + 40) = v9;
      uint64_t v4 = v17;
    }
    while (v2 - 1 != v7);
  }
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void sub_18AF4795C(uint64_t a1, void *a2)
{
  unint64_t v3 = sub_18AF25FCC((void *)(a1 + 32), *(void *)(a1 + 56));
  if (a2)
  {
    id v4 = a2;
    sub_18AF26010((uint64_t)v3, (uint64_t)v4, &qword_1E91251B8, MEMORY[0x1E4FBCF38]);
  }
  else
  {
    sub_18AFCA1D4();
  }
}

void sub_18AF47A7C(unint64_t a1, void *a2, void *aBlock)
{
  unint64_t v3 = aBlock;
  if (a1 >> 62)
  {
    _Block_copy(aBlock);
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v8 = MEMORY[0x1E4FBC860];
    goto LABEL_14;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  _Block_copy(aBlock);
  if (!v6) {
    goto LABEL_13;
  }
LABEL_3:
  uint64_t v23 = MEMORY[0x1E4FBC860];
  sub_18AF5B618();
  if (v6 < 0)
  {
    __break(1u);
    return;
  }
  uint64_t v18 = v3;
  long long v19 = a2;
  uint64_t v7 = 0;
  uint64_t v8 = v23;
  do
  {
    if ((a1 & 0xC000000000000001) != 0) {
      id v9 = (id)MEMORY[0x18C1298C0](v7, a1);
    }
    else {
      id v9 = *(id *)(a1 + 8 * v7 + 32);
    }
    id v10 = v9;
    CKSyncEnginePendingRecordZoneChange.changeStruct()((uint64_t)&v20);

    uint64_t v11 = v20;
    char v12 = v21;
    uint64_t v23 = v8;
    unint64_t v13 = *(void *)(v8 + 16);
    if (v13 >= *(void *)(v8 + 24) >> 1)
    {
      sub_18AF5B618();
      uint64_t v8 = v23;
    }
    ++v7;
    *(void *)(v8 + 16) = v13 + 1;
    uint64_t v14 = v8 + 16 * v13;
    *(void *)(v14 + 32) = v11;
    *(unsigned char *)(v14 + 40) = v12;
  }
  while (v6 != v7);
  swift_bridgeObjectRelease();
  unint64_t v3 = v18;
  a2 = v19;
LABEL_14:
  _Block_copy(v3);
  sub_18AF4980C((uint64_t (**)(void *, id))v3, v8, (uint64_t)&v20);
  uint64_t v15 = v20;
  if (v20)
  {
    uint64_t v16 = v21;
    char v17 = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_18AF94C9C(v15, v16, v17 & 1, a2);
    _Block_release(v3);
    _Block_release(v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_18AF94D4C(v15);
  }
  else
  {
    _Block_release(v3);
    _Block_release(v3);
    swift_getObjectType();
    swift_deallocPartialClassInstance();
  }
}

id sub_18AF47CA8(uint64_t a1)
{
  return sub_18AF34900(a1, (unint64_t *)&qword_1EB279460, (uint64_t)off_1E545EEE0, (unint64_t *)&qword_1EB279468, (SEL *)&selRef_initWithZoneIDs_);
}

id sub_18AF47CCC(void *a1, void *a2)
{
  id v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithConfiguration_group_, a1, a2);

  return v4;
}

#error "18AF47D98: call analysis failed (funcsize=37)"

uint64_t sub_18AF47DD8()
{
  sub_18AF19FAC();
  uint64_t v1 = *(void **)(v0 + 192);
  uint64_t v2 = *(void (**)(char *))(v0 + 200);
  swift_willThrow();

  uint64_t v3 = sub_18AF49000();
  uint64_t v11 = *(void **)(v0 + 200);
  if (v3)
  {
    id v12 = sub_18AF412D8(v3, v4, v5, v6, v7, v8, v9, v10, v23, v25);
    uint64_t v20 = sub_18AF2313C((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19, v24, v26);
    v2(v20);

    sub_18AF472EC();
  }

  swift_task_dealloc();
  sub_18AF16D48();
  return v21();
}

uint64_t sub_18AF47E74()
{
  if (v0[18])
  {
    unint64_t v1 = swift_bridgeObjectRetain();
    uint64_t v2 = sub_18AF48760(v1);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = v0[21];
  int v4 = (void *)v0[19];
  id v5 = objc_allocWithZone((Class)CKSyncEngineSendChangesScope);
  id v6 = sub_18AF47CA8(v2);
  id v7 = objc_msgSend(objc_allocWithZone((Class)CKSyncEngineSendChangesOptions), sel_initWithScope_, v6);
  v0[24] = v7;

  v0[2] = v0;
  v0[3] = sub_18AF48038;
  swift_continuation_init();
  v0[17] = v3;
  sub_18AF3A5E0(v0 + 14);
  sub_18AF161EC(&qword_1E9125660);
  sub_18AF47418();
  sub_18AF22648();
  uint64_t v8 = sub_18AF33710();
  v9(v8);
  v0[10] = MEMORY[0x1E4F143A8];
  v0[11] = 1107296256;
  v0[12] = sub_18AF4795C;
  v0[13] = &unk_1ED7F0F28;
  objc_msgSend(v4, sel_sendChangesWithOptions_completionHandler_, v7, v0 + 10);
  return MEMORY[0x1F41881E8](v0 + 2);
}

uint64_t sub_18AF48038()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 200) = *(void *)(v3 + 48);
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v4, v5, v6);
}

uint64_t sub_18AF48118()
{
  sub_18AF19FAC();
  sub_18AF354E0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF14648;
  uint64_t v3 = sub_18AF33B38();
  return sub_18AF481B0(v3, v4, v5, v6, v7, v8);
}

uint64_t sub_18AF481B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[19] = a5;
  v6[20] = a6;
  v6[18] = a4;
  uint64_t v7 = sub_18AF161EC(&qword_1E91251B8);
  v6[21] = v7;
  v6[22] = *(void *)(v7 - 8);
  v6[23] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18AF47E74, 0, 0);
}

uint64_t sub_18AF48360()
{
  sub_18AF339B8();
  if (*(void *)(v0 + 160))
  {
    uint64_t v1 = sub_18AF3868C();
    v2(v1);
  }
  sub_18AF16D48();
  return v3();
}

uint64_t sub_18AF483C4()
{
  sub_18AF339B8();
  if (*(void *)(v0 + 80))
  {
    uint64_t v1 = sub_18AF3868C();
    v2(v1);
  }
  sub_18AF16D48();
  return v3();
}

id sub_18AF4846C()
{
  id v1 = objc_msgSend(*(id *)(*(void *)(v0 + OBJC_IVAR___CKSyncEngine_delegateAdapter) + 120), sel_dataSource);

  return v1;
}

id sub_18AF484B0(void *a1, void *a2)
{
  id v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithImplementation_convenienceConfiguration_, a1, a2);

  return v4;
}

uint64_t sub_18AF4850C()
{
  sub_18AF2A56C();
  id v1 = *(void **)(v0 + 56);
  uint64_t v2 = *(void **)(v0 + 48);

  swift_release();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_18AF48588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[4] = a4;
  v5[5] = a5;
  v5[2] = a2;
  v5[3] = a3;
  return sub_18AF18508((uint64_t)sub_18AF43A50);
}

uint64_t sub_18AF485A4(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_18AF48AD8(0, result, v3);
  if (v4) {
    unint64_t v5 = v3;
  }
  else {
    unint64_t v5 = result;
  }
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_9;
  }
  if (v3 >= v5) {
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_18AF48614(unint64_t a1, uint64_t a2, Class *a3, SEL *a4)
{
  unint64_t v7 = v4;
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = MEMORY[0x1E4FBC860];
    if (!v9) {
      break;
    }
    uint64_t v25 = MEMORY[0x1E4FBC860];
    uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v9 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v23 = v7;
    uint64_t v11 = 0;
    unint64_t v7 = a1 & 0xC000000000000001;
    while (v9 != v11)
    {
      if (v7) {
        id v12 = (id)MEMORY[0x18C1298C0](v11, a1);
      }
      else {
        id v12 = *(id *)(a1 + 8 * v11 + 32);
      }
      uint64_t v13 = v12;
      ++v11;
      objc_msgSend(objc_allocWithZone(*a3), *a4, v12);

      uint64_t UniqueAndReserveCapacityIfNot = specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_18AF47334(UniqueAndReserveCapacityIfNot, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v9 == v11) {
        return v25;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_18AF48760(unint64_t a1)
{
  return sub_18AF349A8(a1, (unint64_t *)&qword_1EB279460, (uint64_t)off_1E545EEE0, (unint64_t *)&qword_1EB279468, (void (*)(id *, id))sub_18AF34F50);
}

uint64_t sub_18AF48790(unint64_t a1, uint64_t a2)
{
  unint64_t v4 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (!__CocoaSet.count.getter()) {
      return 1;
    }
  }
  else if (!*(void *)(a2 + 16))
  {
    return 1;
  }
  if (a1 >> 62) {
    goto LABEL_31;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
    unint64_t v6 = 0;
    unint64_t v7 = a1 & 0xC000000000000001;
    uint64_t v8 = a2 + 56;
    uint64_t v22 = v5;
    unint64_t v23 = v4;
    while (1)
    {
      if (v7)
      {
        id v9 = (id)MEMORY[0x18C1298C0](v6, a1);
      }
      else
      {
        if (v6 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_30;
        }
        id v9 = *(id *)(a1 + 32 + 8 * v6);
      }
      uint64_t v10 = v9;
      if (__OFADD__(v6++, 1)) {
        break;
      }
      if (v4)
      {
        char v12 = __CocoaSet.contains(_:)();

        if (v12)
        {
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      else
      {
        if (*(void *)(a2 + 16))
        {
          Swift::Int v13 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40));
          uint64_t v14 = -1 << *(unsigned char *)(a2 + 32);
          unint64_t v15 = v13 & ~v14;
          if ((*(void *)(v8 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
          {
            id v16 = *(id *)(*(void *)(a2 + 48) + 8 * v15);
            char v17 = static NSObject.== infix(_:_:)();

            if (v17)
            {
LABEL_27:
              swift_bridgeObjectRelease();

              return 0;
            }
            uint64_t v18 = ~v14;
            while (1)
            {
              unint64_t v15 = (v15 + 1) & v18;
              if (((*(void *)(v8 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
                break;
              }
              id v19 = *(id *)(*(void *)(a2 + 48) + 8 * v15);
              char v20 = static NSObject.== infix(_:_:)();

              if (v20) {
                goto LABEL_27;
              }
            }
          }
        }

        uint64_t v5 = v22;
        unint64_t v4 = v23;
        unint64_t v7 = a1 & 0xC000000000000001;
      }
      if (v6 == v5) {
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    swift_bridgeObjectRetain();
  }
LABEL_25:
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t sub_18AF489E4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t))
{
  if ((a4 & 1) == 0) {
    goto LABEL_2;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v10 = swift_dynamicCastClass();
  if (!v10)
  {
    swift_unknownObjectRelease();
    uint64_t v10 = MEMORY[0x1E4FBC860];
  }
  uint64_t v11 = *(void *)(v10 + 16);
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v11 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease();
LABEL_2:
    uint64_t v8 = sub_18AF36700();
    uint64_t v9 = a5(v8);
    goto LABEL_9;
  }
  uint64_t v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    uint64_t v9 = MEMORY[0x1E4FBC860];
  }
LABEL_9:
  swift_unknownObjectRelease();
  return v9;
}

uint64_t sub_18AF48AD8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < (unint64_t)a2)
  {
    return 0;
  }
  BOOL v5 = __OFADD__(result, a2);
  result += a2;
  if (v5) {
    goto LABEL_14;
  }
  return result;
}

void sub_18AF48B24(uint64_t a1, double a2, double a3)
{
  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  double v5 = a3 - a2;
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return;
  }
  __long long buf = 0;
  arc4random_buf(&__buf, 8uLL);
  if (v5 * ((double)(__buf & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16) + a2 == a3) {
    sub_18AF48B24(a1, a2, a3);
  }
}

uint64_t sub_18AF48BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *unint64_t v7 = v3;
  v7[1] = sub_18AF14648;
  return sub_18AF48EFC(a1, a2, a3);
}

uint64_t sub_18AF48C80()
{
  sub_18AF338B4();
  uint64_t v18 = v0;
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void **)(v0 + 56);
  if (v1)
  {
    char v3 = *(unsigned char *)(v0 + 81);
    uint64_t v4 = *(void *)(v0 + 48);
    uint64_t v5 = *(unsigned __int8 *)(v0 + 80);
    *(void *)&long long v16 = *(void *)(v0 + 40);
    BYTE8(v16) = v3;
    uint64_t v17 = v4;
    unint64_t v6 = (void *)CKSyncEngine.SendChangesOptions.optionsObject()();
    id v7 = objc_msgSend(objc_allocWithZone((Class)CKSyncEngineSendChangesContext), sel_initWithReason_options_, v5, v6);

    id v8 = objc_msgSend(v2, sel_syncEngine_nextRecordZoneChangeBatchForContext_, v1, v7);
    uint64_t v9 = *(void **)(v0 + 72);
    uint64_t v10 = *(void *)(v0 + 16);
    if (v8)
    {
      id v11 = v8;
      CKSyncEngineRecordZoneChangeBatch.batchStruct()((uint64_t)&v16);

      swift_unknownObjectRelease();
      char v12 = v17;
      *(_OWORD *)uint64_t v10 = v16;
      *(unsigned char *)(v10 + 16) = v12;
    }
    else
    {

      swift_unknownObjectRelease();
      *(void *)uint64_t v10 = 0;
      *(void *)(v10 + 8) = 0;
      *(unsigned char *)(v10 + 16) = 0;
    }
  }
  else
  {
    swift_unknownObjectRelease();
    uint64_t v13 = *(void *)(v0 + 16);
    *(void *)uint64_t v13 = 0;
    *(void *)(v13 + 8) = 0;
    *(unsigned char *)(v13 + 16) = 0;
  }
  sub_18AF16D48();
  return v14();
}

uint64_t sub_18AF48DD4()
{
  sub_18AF339B8();
  *(void *)(v0 + 72) = MEMORY[0x18C12BC20](*(void *)(v0 + 64) + 120);
  swift_release();
  sub_18AF309A4();
  return MEMORY[0x1F4188298](v1, v2, v3);
}

uint64_t sub_18AF48E48()
{
  sub_18AF339B8();
  uint64_t v1 = MEMORY[0x18C12BC20](v0[4] + 112);
  v0[7] = v1;
  if (v1)
  {
    uint64_t v2 = CKSyncEngine.actor.getter();
    v0[8] = v2;
    return MEMORY[0x1F4188298](sub_18AF48DD4, v2, 0);
  }
  else
  {
    uint64_t v3 = v0[2];
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    *(unsigned char *)(v3 + 16) = 0;
    sub_18AF16D48();
    return v4();
  }
}

uint64_t sub_18AF48EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a3;
  *(unsigned char *)(v4 + 80) = *(unsigned char *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(v4 + 32) = v3;
  *(void *)(v4 + 40) = v5;
  *(unsigned char *)(v4 + 81) = *(unsigned char *)(a2 + 16);
  *(void *)(v4 + 48) = *(void *)(a2 + 24);
  return sub_18AF339EC((uint64_t)sub_18AF48E48);
}

uint64_t sub_18AF48F34(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(v2 + 16) = xmmword_18B1F0B20;
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 16);
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  sub_18AF4775C(v5);
  return v2;
}

uint64_t sub_18AF48FA4(void (*a1)(void))
{
  a1();
  uint64_t v2 = *(unsigned int *)(*(void *)v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(*(void *)v1 + 52);

  return MEMORY[0x1F4186488](v1, v2, v3);
}

uint64_t sub_18AF49000()
{
  uint64_t result = swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 16);
  if (v2 == 1)
  {
    __break(1u);
  }
  else
  {
    *(_OWORD *)(v0 + 16) = xmmword_18B1F0B20;
    sub_18AF42F30(v2);
    sub_18AF4775C(v2);
    return v2;
  }
  return result;
}

uint64_t sub_18AF49080()
{
  sub_18AF19FAC();
  sub_18AF1D6F4();
  swift_bridgeObjectRelease();
  os_activity_scope_leave(v0);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_18AF49140()
{
  sub_18AF2A56C();
  sub_18AF306D0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  uint64_t v3 = sub_18AF307FC();
  return sub_18AF14514(v3, v4);
}

uint64_t sub_18AF491D0()
{
  sub_18AF2A56C();
  sub_18AF306D0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  uint64_t v3 = sub_18AF307FC();
  return sub_18AF14514(v3, v4);
}

uint64_t sub_18AF49260()
{
  sub_18AF2A56C();
  sub_18AF306D0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  uint64_t v3 = sub_18AF307FC();
  return sub_18AF14514(v3, v4);
}

uint64_t sub_18AF492F0(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 72) = a4;
  *(void *)(v5 + 80) = v4;
  *(unsigned char *)(v5 + 168) = a2;
  *(void *)(v5 + 56) = a1;
  *(void *)(v5 + 64) = a3;
  *(void *)(v5 + 88) = *v4;
  return MEMORY[0x1F4188298](sub_18AF1CA88, v4, 0);
}

uint64_t sub_18AF49340()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  sub_18AF33780();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  sub_18AF33C54();
  sub_18AF37AC0();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_18AF493DC(uint64_t a1, int *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *a4;
  uint64_t v9 = a4[1];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v10;
  *uint64_t v10 = v4;
  v10[1] = sub_18AF13048;
  return sub_18AF14A7C(a1, a2, a3, v8, v9);
}

uint64_t sub_18AF494A0()
{
  sub_18AF2A56C();
  if (qword_1E9125270 != -1) {
    swift_once();
  }
  uint64_t v1 = (__n128 *)sub_18AF22A10();
  sub_18AF22A30(v1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  sub_18AF161EC(&qword_1E91251E8);
  *uint64_t v2 = v0;
  v2[1] = sub_18AF153DC;
  sub_18AF229F8();
  sub_18AF22A48();
  return MEMORY[0x1F41881B8]();
}

uint64_t sub_18AF495C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a2;
  v5[6] = a3;
  v5[3] = a5;
  v5[4] = a1;
  v5[2] = a4;
  return MEMORY[0x1F4188298](sub_18AF494A0, 0, 0);
}

uint64_t sub_18AF495F0()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  sub_18AF33780();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  sub_18AF33C54();
  sub_18AF37AC0();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_18AF4968C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *a4;
  uint64_t v9 = a4[1];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v10;
  *uint64_t v10 = v4;
  v10[1] = sub_18AF13048;
  return sub_18AF495C8(a1, a2, a3, v8, v9);
}

uint64_t sub_18AF49750()
{
  sub_18AF19FAC();
  sub_18AF226A0();
  uint64_t v0 = sub_18AF226EC();
  uint64_t v2 = (__n128 *)sub_18AF226C8(v0, v1);
  sub_18AF226B0(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v11 = swift_task_alloc();
  uint64_t v12 = (void *)sub_18AF22680(v11);
  void *v12 = v13;
  v12[1] = sub_18AF2F5F0;
  sub_18AF22690();
  return sub_18AF492F0(v14, v15, v16, v17);
}

void sub_18AF4980C(uint64_t (**aBlock)(void *, id)@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v3 = aBlock;
  unint64_t v47 = MEMORY[0x1E4FBC860];
  unint64_t v48 = MEMORY[0x1E4FBC860];
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    _Block_copy(aBlock);
    uint64_t v7 = 0;
    uint64_t v8 = (unsigned __int8 *)(a2 + 40);
    unint64_t v9 = MEMORY[0x1E4FBC860];
    unint64_t v10 = MEMORY[0x1E4FBC860];
    while (1)
    {
      uint64_t v11 = (void *)*((void *)v8 - 1);
      int v12 = *v8;
      id v13 = v11;
      uint64_t v14 = v13;
      if (v12 == 1)
      {
        id v15 = objc_msgSend(v13, sel_size);
        uint64_t v16 = (uint64_t)v15 + v7;
        if (__OFADD__(v7, v15)) {
          goto LABEL_73;
        }
        uint64_t v17 = v14;
        if (qword_1E9124F08 != -1) {
          swift_once();
        }
        if (qword_1E912FE58 < v16)
        {
          swift_bridgeObjectRelease();

          goto LABEL_60;
        }
        unint64_t v10 = v14;
        MEMORY[0x18C129220]();
        if (*(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v16 = (uint64_t)objc_msgSend((id)v10, sel_size);

        BOOL v18 = __OFADD__(v7, v16);
        v7 += v16;
        if (v18) {
          goto LABEL_74;
        }
      }
      else
      {
        uint64_t v46 = v13;
        id v19 = (id)v3[2](v3, v13);
        if (v19)
        {
          uint64_t v16 = (uint64_t)v19;
          id v20 = objc_msgSend(v19, sel_size);
          BOOL v18 = __OFADD__(v7, v20);
          v7 += (uint64_t)v20;
          if (v18) {
            goto LABEL_75;
          }
          uint64_t v21 = v3;
          if (qword_1E9124F08 != -1) {
            swift_once();
          }
          uint64_t v22 = qword_1E912FE58;
          if (qword_1E912FE58 < v7)
          {
            if (v9 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v33) {
                goto LABEL_48;
              }
            }
            else if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              goto LABEL_48;
            }
            if (v10 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v34)
              {
LABEL_48:
                swift_bridgeObjectRelease();

                uint64_t v3 = v21;
                uint64_t v17 = v46;
                goto LABEL_60;
              }
            }
            else if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              goto LABEL_48;
            }
          }
          id v23 = (id)v16;
          MEMORY[0x18C129220]();
          if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          if (v22 < v7)
          {
            swift_bridgeObjectRelease();
            uint64_t v3 = v21;
            uint64_t v17 = v46;
LABEL_60:
            if (qword_1E91252D0 != -1) {
              swift_once();
            }
            uint64_t v41 = type metadata accessor for Logger();
            sub_18AF412A0(v41, (uint64_t)qword_1E91253B0);
            int v36 = Logger.logObject.getter();
            os_log_type_t v37 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v36, v37))
            {
              __int16 v38 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)__int16 v38 = 0;
              uint64_t v39 = "Next record will exceed max bytes per batch";
LABEL_64:
              _os_log_impl(&dword_18AF10000, v36, v37, v39, v38, 2u);
              MEMORY[0x18C12BB10](v38, -1, -1);
            }
LABEL_65:

            goto LABEL_66;
          }
          unint64_t v9 = v48;
          uint64_t v3 = v21;
        }
        else
        {
          if (qword_1E91252D0 != -1) {
            swift_once();
          }
          uint64_t v24 = type metadata accessor for Logger();
          sub_18AF412A0(v24, (uint64_t)qword_1E91253B0);
          id v25 = v14;
          char v26 = Logger.logObject.getter();
          os_log_type_t v27 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v26, v27))
          {
            uint64_t v44 = v3;
            uint64_t v28 = swift_slowAlloc();
            uint64_t v45 = a3;
            uint64_t v29 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v28 = 138412290;
            *(void *)(v28 + 4) = v25;
            void *v29 = v11;
            _os_log_impl(&dword_18AF10000, v26, v27, "No record to save for record ID %@", (uint8_t *)v28, 0xCu);
            sub_18AF161EC((uint64_t *)&unk_1E9125610);
            swift_arrayDestroy();
            uint64_t v30 = v29;
            a3 = v45;
            MEMORY[0x18C12BB10](v30, -1, -1);
            uint64_t v31 = v28;
            uint64_t v3 = v44;
            MEMORY[0x18C12BB10](v31, -1, -1);
          }
          else
          {
          }
        }
        uint64_t v17 = v46;
      }
      if (v9 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v16 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      unint64_t v10 = v47;
      if (v47 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v32 = *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (__OFADD__(v16, v32)) {
        break;
      }
      if (v16 + v32 > 249)
      {
        swift_bridgeObjectRelease();
        if (qword_1E91252D0 != -1) {
          swift_once();
        }
        uint64_t v35 = type metadata accessor for Logger();
        sub_18AF412A0(v35, (uint64_t)qword_1E91253B0);
        int v36 = Logger.logObject.getter();
        os_log_type_t v37 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v36, v37))
        {
          __int16 v38 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)__int16 v38 = 0;
          uint64_t v39 = "Reached max record count per batch";
          goto LABEL_64;
        }
        goto LABEL_65;
      }
      if (qword_1E9124F08 != -1) {
        swift_once();
      }
      if (v7 >= qword_1E912FE58)
      {
        swift_bridgeObjectRelease();
        if (qword_1E91252D0 != -1) {
          swift_once();
        }
        uint64_t v40 = type metadata accessor for Logger();
        sub_18AF412A0(v40, (uint64_t)qword_1E91253B0);
        int v36 = Logger.logObject.getter();
        os_log_type_t v37 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v36, v37))
        {
          __int16 v38 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)__int16 v38 = 0;
          uint64_t v39 = "Current batch is over the max bytes per batch";
          goto LABEL_64;
        }
        goto LABEL_65;
      }

      v8 += 16;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        goto LABEL_66;
      }
    }
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    swift_bridgeObjectRetain();
    uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v42) {
      goto LABEL_70;
    }
LABEL_68:
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v43) {
        goto LABEL_70;
      }
    }
    else if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_70;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _Block_release(v3);
    _Block_release(v3);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    goto LABEL_71;
  }
  _Block_copy(aBlock);
  swift_bridgeObjectRelease();
  unint64_t v10 = MEMORY[0x1E4FBC860];
LABEL_66:
  uint64_t v16 = v48;
  if (v48 >> 62) {
    goto LABEL_76;
  }
  if (!*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_68;
  }
LABEL_70:
  _Block_release(v3);
  _Block_release(v3);
  *(void *)a3 = v16;
  *(void *)(a3 + 8) = v10;
LABEL_71:
  *(unsigned char *)(a3 + 16) = 0;
}

uint64_t sub_18AF4A048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, uint64_t a10, unint64_t a11, unint64_t a12, uint64_t a13, char *a14, uint64_t a15, unint64_t a16, char **a17, unint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,char *a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char **a34,uint64_t a35,uint64_t a36)
{
  sub_18AF47534();
  a35 = v37;
  a36 = v38;
  a34 = v36;
  unint64_t v40 = (unint64_t)v36[26];
  uint64_t v39 = v36[27];
  v36[53] = (char *)v40;
  v36[54] = v39;
  uint64_t v130 = (uint64_t)v39;
  *((unsigned char *)v36 + 84) = *((unsigned char *)v36 + 224);
  uint64_t v41 = (char **)&property descriptor for CKSyncEngine.FetchChangesOptions.defaultZoneConfiguration;
  if (!v40)
  {
LABEL_42:
    sub_18AF476B8();
    if (!v46) {
      goto LABEL_72;
    }
    goto LABEL_44;
  }
  a18 = (unint64_t)v36;
  unint64_t v42 = v40 >> 62;
  if (v40 >> 62)
  {
    unint64_t v44 = (unint64_t)v39;
    sub_18AFF16C0(v40);
    swift_bridgeObjectRetain();
    uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v43 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    unint64_t v44 = v130;
    swift_bridgeObjectRetain();
  }
  *(void *)(a18 + 440) = v43;
  a17 = (char **)(v44 >> 62);
  if (!v43)
  {
    if (v44 >> 62) {
      goto LABEL_75;
    }
    uint64_t v45 = *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_8;
  }
  sub_18AF94D4C(v40);
  while (1)
  {
    sub_18AF476B8();
    if (!v46) {
      swift_once();
    }
    uint64_t v48 = *(void *)(a18 + 384);
    unint64_t v47 = *(void **)(a18 + 392);
    uint64_t v49 = type metadata accessor for Logger();
    sub_18AF412A0(v49, (uint64_t)qword_1E91253B0);
    swift_bridgeObjectRetain_n();
    id v50 = v47;
    sub_18AF3098C();
    id v51 = v50;
    id v52 = (void *)Logger.logObject.getter();
    int v53 = static os_log_type_t.debug.getter();
    if (sub_18AF3DD94((os_log_type_t)v53))
    {
      LODWORD(a14) = v53;
      a15 = v48;
      a16 = v42;
      a11 = a18 + 328;
      a12 = a18 + 336;
      uint64_t v54 = (_DWORD *)sub_18AF402C8();
      a13 = sub_18AF182D8();
      a20 = a13;
      _DWORD *v54 = v41[130];
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      HIDWORD(a10) = *(unsigned __int8 *)(a18 + 82);
      uint64_t v55 = *(char **)(a18 + 392);
      a9 = *(char **)(a18 + 384);
      char v56 = *(unsigned char *)(a18 + 81);
      swift_retain();
      uint64_t v57 = sub_18AF40CEC();
      sub_18AF3F510();
      *(void *)(a18 + 328) = sub_18AF4095C(v57, a18, (uint64_t *)&a20);
      uint64_t v41 = (char **)(a18 + 336);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18AF38FA4();
      swift_bridgeObjectRelease();
      sub_18AF31C08();
      LOBYTE(a21) = v56;
      a22 = a9;
      LOBYTE(a23) = BYTE4(a10);
      a24 = v55;
      unint64_t v58 = CKSyncEngine.SendChangesContext.description.getter();
      *(void *)(a18 + 336) = sub_18AF4095C(v58, v59, (uint64_t *)&a20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      sub_18AFFC25C(&dword_18AF10000, v60, (os_log_type_t)v53, "%s will send next change batch for context: %s");
      sub_18AF41310();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {
      uint64_t v61 = *(void **)(a18 + 392);

      swift_bridgeObjectRelease_n();
      sub_18AF38FA4();
    }
    if (v42)
    {
      swift_bridgeObjectRetain();
      uint64_t v62 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v62 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    uint64_t v63 = v130;
    if (v62)
    {
      a21 = MEMORY[0x1E4FBC860];
      sub_18AFFCB14();
      if (v62 < 0)
      {
        __break(1u);
        goto LABEL_74;
      }
      uint64_t v64 = 0;
      uint64_t v65 = a21;
      uint64_t v41 = &selRef_queueHasStarted;
      do
      {
        if ((v40 & 0xC000000000000001) != 0) {
          id v66 = (id)MEMORY[0x18C1298C0](v64, v40);
        }
        else {
          id v66 = *(id *)(v40 + 8 * v64 + 32);
        }
        Swift::Int v67 = v66;
        id v68 = objc_msgSend(v66, sel_recordID);

        a21 = v65;
        unint64_t v42 = *(void *)(v65 + 16);
        if (v42 >= *(void *)(v65 + 24) >> 1)
        {
          sub_18AFFCC94();
          uint64_t v65 = a21;
        }
        ++v64;
        *(void *)(v65 + 16) = v42 + 1;
        unint64_t v69 = v65 + 16 * v42;
        *(void *)(v69 + 32) = v68;
        *(unsigned char *)(v69 + 40) = 0;
      }
      while (v62 != v64);
      swift_bridgeObjectRelease();
      uint64_t v63 = v130;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v65 = MEMORY[0x1E4FBC860];
    }
    if (a17)
    {
      swift_bridgeObjectRetain();
      unint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
      if (!v40)
      {
LABEL_54:
        swift_bridgeObjectRelease();
        uint64_t v71 = MEMORY[0x1E4FBC860];
        goto LABEL_55;
      }
    }
    else
    {
      unint64_t v40 = *(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v40) {
        goto LABEL_54;
      }
    }
    a21 = MEMORY[0x1E4FBC860];
    sub_18AFFCB14();
    if ((v40 & 0x8000000000000000) == 0) {
      break;
    }
LABEL_74:
    __break(1u);
LABEL_75:
    swift_bridgeObjectRetain();
    uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_8:
    sub_18AF94D4C(v40);
    if (!v45)
    {
      sub_18AF94D4C(v40);
      int v36 = (char **)a18;
      goto LABEL_42;
    }
  }
  uint64_t v70 = 0;
  uint64_t v71 = a21;
  uint64_t v72 = v130;
  do
  {
    if ((v130 & 0xC000000000000001) != 0)
    {
      uint64_t v73 = sub_18AF4040C();
      id v74 = (id)MEMORY[0x18C1298C0](v73);
    }
    else
    {
      id v74 = *(id *)(v72 + 8 * v70 + 32);
    }
    id v75 = v74;
    a21 = v71;
    unint64_t v76 = *(void *)(v71 + 16);
    if (v76 >= *(void *)(v71 + 24) >> 1)
    {
      sub_18AFFCC94();
      uint64_t v72 = v130;
      uint64_t v71 = a21;
    }
    ++v70;
    *(void *)(v71 + 16) = v76 + 1;
    uint64_t v77 = v71 + 16 * v76;
    *(void *)(v77 + 32) = v75;
    *(unsigned char *)(v77 + 40) = 1;
  }
  while (v40 != v70);
  swift_bridgeObjectRelease();
LABEL_55:
  uint64_t v105 = *(void *)(a18 + 400);
  a21 = v65;
  sub_18AFA3364(v71);
  uint64_t v106 = a21;
  CKSyncEngine.State.pendingRecordZoneChanges.getter();
  uint64_t v108 = sub_18AFC0E48(v107);
  unint64_t v109 = sub_18AFF4C58(v106, v108);
  uint64_t v110 = *(char ***)(v105 + 16);
  uint64_t v111 = *(void *)(v109 + 16);
  if (v111)
  {
    a17 = v110;
    uint64_t v130 = v106;
    a21 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v112 = sub_18AFF91B0(v109);
    int v114 = v113;
    uint64_t v41 = (char **)(v115 & 1);
    int v36 = &selRef_getStaticBundleIDsForURLSlug_withKey_;
    while ((v112 & 0x8000000000000000) == 0)
    {
      sub_18AFFD83C();
      if (v112 >= v116) {
        break;
      }
      if (((*(void *)(v109 + 56 + (((unint64_t)v112 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v112) & 1) == 0) {
        goto LABEL_70;
      }
      if (*(_DWORD *)(v109 + 36) != v114) {
        goto LABEL_71;
      }
      uint64_t v117 = *(void *)(v109 + 48) + 16 * v112;
      objc_msgSend(objc_allocWithZone((Class)CKSyncEnginePendingRecordZoneChange), sel_initWithRecordID_type_, *(void *)v117, *(unsigned __int8 *)(v117 + 8));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      int64_t v118 = sub_18AF29B74();
      uint64_t v112 = sub_18AFF9050(v118, v119, v120, v109);
      int v114 = v121;
      uint64_t v41 = (char **)(v122 & 1);
      if (!--v111)
      {
        uint64_t v123 = sub_18AF29B74();
        sub_18AF7E208(v123, v124, (char)v41);
        swift_release();
        uint64_t v106 = v130;
        goto LABEL_64;
      }
    }
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    swift_once();
LABEL_44:
    uint64_t v79 = v36[48];
    uint64_t v78 = v36[49];
    uint64_t v80 = type metadata accessor for Logger();
    sub_18AF412A0(v80, (uint64_t)qword_1E91253B0);
    swift_bridgeObjectRetain_n();
    uint64_t v81 = v78;
    uint64_t v82 = v36;
    uint64_t v83 = v81;
    sub_18AF3098C();
    uint64_t v84 = v83;
    uint64_t v85 = Logger.logObject.getter();
    int v86 = static os_log_type_t.debug.getter();
    if (sub_18AF42D04((os_log_type_t)v86))
    {
      LODWORD(a16) = v86;
      uint64_t v130 = (uint64_t)v79;
      a17 = v36 + 37;
      uint64_t v87 = sub_18AF402C8();
      a18 = sub_18AF182D8();
      a20 = a18;
      *(_DWORD *)uint64_t v87 = v41[130];
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      LODWORD(a15) = *((unsigned __int8 *)v36 + 82);
      uint64_t v88 = v36[49];
      a14 = v82[48];
      char v89 = *((unsigned char *)v82 + 81);
      swift_retain();
      sub_18AF40CEC();
      uint64_t v90 = sub_18AF41328();
      v82[38] = (char *)sub_18AFFC4A4(v90, v91, (uint64_t *)&a20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18AF38FA4();
      swift_bridgeObjectRelease();
      *(_WORD *)(v87 + 12) = 2080;
      LOBYTE(a21) = v89;
      a22 = a14;
      LOBYTE(a23) = a15;
      a24 = v88;
      unint64_t v92 = CKSyncEngine.SendChangesContext.description.getter();
      v82[37] = (char *)sub_18AF4095C(v92, v93, (uint64_t *)&a20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      sub_18AF403B4(&dword_18AF10000, v85, (os_log_type_t)v86, "%s no record zone change batch to send for context: %s");
      sub_18AF41310();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {
      uint64_t v94 = v36[49];

      sub_18AF3F474();
      sub_18AF38FA4();
    }
    uint64_t v95 = v82[43];
    *(_OWORD *)uint64_t v95 = 0u;
    *((_OWORD *)v95 + 1) = 0u;
    swift_task_dealloc();
    sub_18AF47490();
    return v97(v96, v97, v98, v99, v100, v101, v102, v103, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, v130,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28);
  }
  else
  {
    swift_release();
LABEL_64:
    char v125 = *(unsigned char *)(a18 + 83);
    sub_18AF34EA0(0, (unint64_t *)&unk_1E9125200);
    Array._bridgeToObjectiveC()();
    sub_18AF3144C();
    swift_bridgeObjectRelease();
    objc_msgSend(v110, sel_markRecordZoneChanges_inFlight_, v109, 1);

    if (v125) {
      objc_msgSend(*(id *)(*(void *)(a18 + 400) + 16), sel_setHasInFlightUntrackedChanges_, 1);
    }
    *(void *)(a18 + 448) = sub_18AFC8D00(v106);
    swift_bridgeObjectRelease();
    unint64_t v126 = (void *)swift_task_alloc();
    *(void *)(a18 + 456) = v126;
    void *v126 = a18;
    v126[1] = sub_18AFD4DB0;
    sub_18AF41784(MEMORY[0x1E4FBC860]);
    sub_18AF47490();
    return sub_18AFEDCE8(v127, v128);
  }
}

uint64_t sub_18AF4AA7C()
{
  sub_18AF2A56C();
  uint64_t v1 = *(void *)(*(void *)(v0 + 352) + 128);
  *(void *)(v0 + 400) = v1;
  uint64_t v2 = *(void **)(v1 + 16);
  unsigned int v3 = objc_msgSend(v2, sel_hasPendingUntrackedChanges);
  *(unsigned char *)(v0 + 83) = v3;
  if (v3) {
    objc_msgSend(v2, sel_setHasPendingUntrackedChanges_, 0);
  }
  char v4 = *(unsigned char *)(v0 + 82);
  *(unsigned char *)(v0 + 152) = *(unsigned char *)(v0 + 81);
  uint64_t v5 = *(void *)(v0 + 392);
  *(void *)(v0 + 160) = *(void *)(v0 + 384);
  *(unsigned char *)(v0 + 168) = v4;
  *(void *)(v0 + 176) = v5;
  swift_task_alloc();
  sub_18AF475A0();
  *(void *)(v0 + 408) = v6;
  void *v6 = v7;
  v6[1] = sub_18AF4AB70;
  uint64_t v8 = sub_18AF475C4();
  return sub_18AF4E128(v8, v9);
}

uint64_t sub_18AF4AB70()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  void *v6 = v5;
  *(void *)(v3 + 416) = v0;
  swift_task_dealloc();
  uint64_t v7 = *(void *)(v3 + 352);
  if (v0) {
    uint64_t v8 = sub_18AFD6278;
  }
  else {
    uint64_t v8 = sub_18AF4A048;
  }
  return MEMORY[0x1F4188298](v8, v7, 0);
}

uint64_t sub_18AF4AC54()
{
  sub_18AF339B8();
  uint64_t v3 = v2;
  *(void *)(v1 + 344) = v4;
  *(void *)(v1 + 352) = v0;
  uint64_t v5 = type metadata accessor for CancellationError();
  *(void *)(v1 + 360) = v5;
  sub_18AF16DF8(v5);
  *(void *)(v1 + 368) = v6;
  uint64_t v7 = sub_18AF2F1C8();
  *(unsigned char *)(v1 + 81) = *(unsigned char *)v3;
  uint64_t v8 = *(void *)(v3 + 8);
  *(void *)(v1 + 376) = v7;
  *(void *)(v1 + 384) = v8;
  *(unsigned char *)(v1 + 82) = *(unsigned char *)(v3 + 16);
  *(void *)(v1 + 392) = *(void *)(v3 + 24);
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v9, v10, v11);
}

uint64_t sub_18AF4AD00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  sub_18AF30750();
  a21 = v23;
  a22 = v24;
  sub_18AF18F44();
  a20 = v22;
  uint64_t v25 = *(void *)(v22[54] + 128);
  v22[61] = v25;
  if (objc_msgSend(*(id *)(v25 + 16), sel_needsToSaveDatabaseSubscription))
  {
    sub_18AF34EA0(0, &qword_1E91250D8);
    v26._uint64_t countAndFlagsBits = sub_18AFE29A4();
    CKDatabaseSubscription.init(subscriptionID:)(v27, v26);
    uint64_t v29 = v28;
    v22[62] = v28;
    id v30 = objc_msgSend(objc_allocWithZone((Class)CKNotificationInfo), sel_init);
    v22[63] = v30;
    uint64_t v53 = v29;
    sub_18AF45F24((uint64_t)objc_msgSend(v30, sel_setShouldSendContentAvailable_, 1), sel_setNotificationInfo_);
    if (qword_1E91252D0 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    v22[64] = sub_18AF412A0(v31, (uint64_t)qword_1E91253B0);
    sub_18AF3098C();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.info.getter();
    if (sub_18AF42D04(v33))
    {
      uint64_t v34 = (_DWORD *)sub_18AF2A5F0();
      sub_18AF16B9C();
      sub_18AFFC4CC();
      *uint64_t v34 = 136315138;
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      sub_18AFFC0F4();
      sub_18AF40CEC();
      uint64_t v35 = sub_18AF1FFE8();
      v22[52] = sub_18AF476A0(v35, v36, &a11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18AF38FA4();
      swift_bridgeObjectRelease();
      sub_18AFFBB1C(&dword_18AF10000, v32, v33, "%s saving database subscription");
      sub_18AF351C4();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {

      sub_18AF38FA4();
    }
    uint64_t v46 = v22[59];
    uint64_t v47 = v22[60];
    uint64_t v48 = v22[58];
    uint64_t v49 = (void *)v22[53];
    v22[2] = v22;
    v22[7] = v22 + 45;
    v22[3] = sub_18AFE4870;
    sub_18AF3A644();
    v22[33] = v48;
    id v50 = sub_18AF3A5E0(v22 + 30);
    sub_18AF34EA0(0, (unint64_t *)&qword_1E9125620);
    v22[65] = sub_18AF161EC(&qword_1E9125660);
    sub_18AF3A5D4();
    sub_18AF9ED18();
    CheckedContinuation.init(continuation:function:)();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v46 + 32))(v50, v47, v48);
    v22[26] = MEMORY[0x1E4F143A8];
    v22[27] = 1107296256;
    v22[28] = sub_18AF9594C;
    v22[29] = &unk_1ED7F4F38;
    objc_msgSend(v49, sel_saveSubscription_completionHandler_, v53, v22 + 26);
    sub_18AF2ACD0();
    return MEMORY[0x1F41881E8](v51);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    sub_18AF384DC();
    sub_18AF2ACD0();
    return v38(v37, v38, v39, v40, v41, v42, v43, v44, a9, a10, a11, a12, a13, a14);
  }
}

uint64_t sub_18AF4B08C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26)
{
  sub_18AF410EC();
  a25 = v27;
  a26 = v28;
  sub_18AF41388();
  a24 = v26;
  uint64_t v29 = v26[45];
  uint64_t v30 = *(void *)(v29 + 16);
  if (v30)
  {
    if (qword_1E91252D0 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_18AF412A0(v31, (uint64_t)qword_1E91253B0);
    sub_18AF3207C();
    sub_18AF32094();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.debug.getter();
    if (sub_18AF4179C(v33))
    {
      uint64_t v34 = sub_18AF402C8();
      a15 = sub_18AF182D8();
      *(_DWORD *)uint64_t v34 = 136315394;
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      swift_retain();
      uint64_t v35 = sub_18AF40CEC();
      sub_18AF47718();
      v26[35] = sub_18AF4095C(v35, (unint64_t)(v26 + 37), &a15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18AF38FA4();
      swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 12) = 2080;
      uint64_t v36 = swift_bridgeObjectRetain();
      MEMORY[0x18C129260](v36, &type metadata for CKSyncEngine.PendingDatabaseChange);
      uint64_t v37 = swift_bridgeObjectRelease();
      v26[36] = sub_18AFFC4A4(v37, v38, &a15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18AF3E5CC();
      swift_bridgeObjectRelease();
      sub_18AF2F014(&dword_18AF10000, v32, v33, "%s will send database changes %s");
      sub_18AF41310();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {

      sub_18AF32614();
      sub_18AFFBC0C();
    }
    uint64_t v45 = v26[45];
    uint64_t v46 = MEMORY[0x1E4FBC860];
    uint64_t v73 = MEMORY[0x1E4FBC860];
    a15 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    uint64_t v47 = (id *)(v45 + 40);
    do
    {
      char v48 = *(unsigned char *)v47;
      *(v47 - 1);
      if (v48)
      {
        MEMORY[0x18C129220]();
        unint64_t v49 = *(void *)((a15 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (*(void *)((a15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= v49 >> 1)
        {
          sub_18AF34080(v49);
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
      }
      else
      {
        MEMORY[0x18C129220]();
        unint64_t v50 = *(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (*(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10) >= v50 >> 1)
        {
          sub_18AFFCC84(v50);
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
      }
      sub_18AF41790();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v47 += 2;
      --v30;
    }
    while (v30);
    swift_bridgeObjectRelease();
    uint64_t v51 = a15;
    v26[46] = v73;
    v26[47] = v51;
    v26[48] = objc_msgSend(objc_allocWithZone((Class)CKOperationConfiguration), sel_init);
    uint64_t v52 = *(void *)(v29 + 16);
    if (v52)
    {
      a15 = v46;
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v53 = (unsigned char *)(v45 + 40);
      do
      {
        uint64_t v54 = (void *)*((void *)v53 - 1);
        if (*v53 == 1) {
          id v55 = v54;
        }
        else {
          id v56 = objc_msgSend(v54, sel_zoneID);
        }
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v53 += 16;
        --v52;
      }
      while (v52);
      unint64_t v57 = a15;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v57 = MEMORY[0x1E4FBC860];
    }
    uint64_t v58 = sub_18AF48760(v57);
    v26[49] = sub_18AF19D54(v58);
    swift_bridgeObjectRelease();
    unint64_t v59 = (void *)swift_task_alloc();
    v26[50] = v59;
    *unint64_t v59 = v26;
    v59[1] = sub_18AFD31F4;
    sub_18AF30494();
    sub_18AF41060();
    return sub_18AFEDCE8(v60, v61);
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_1E91252D0 != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    sub_18AF41270(v39, (uint64_t)qword_1E91253B0);
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.debug.getter();
    if (sub_18AF32640(v41))
    {
      uint64_t v42 = (_DWORD *)sub_18AF2A5F0();
      a15 = sub_18AF16B9C();
      _DWORD *v42 = 136315138;
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      swift_retain();
      sub_18AF40CEC();
      uint64_t v43 = sub_18AF41328();
      v26[37] = sub_18AFFC4A4(v43, v44, &a15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_18AF38FA4();
      swift_bridgeObjectRelease();
      sub_18AFFBB1C(&dword_18AF10000, v40, v41, "%s no more pending database changes");
      sub_18AF351C4();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {

      sub_18AF38FA4();
    }
    uint64_t v64 = (_OWORD *)v26[38];
    *uint64_t v64 = 0u;
    v64[1] = 0u;
    swift_task_dealloc();
    sub_18AF384DC();
    sub_18AF41060();
    return v66(v65, v66, v67, v68, v69, v70, v71, v72, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  }
}

uint64_t sub_18AF4B66C()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  sub_18AF16CB4();
  void *v4 = v3;
  *(void *)(v6 + 360) = v5;
  swift_task_dealloc();
  sub_18AF38DF4();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AF4B74C()
{
  sub_18AF339B8();
  uint64_t v3 = v2;
  *(void *)(v1 + 304) = v4;
  *(void *)(v1 + 312) = v0;
  uint64_t v5 = type metadata accessor for CancellationError();
  *(void *)(v1 + 320) = v5;
  sub_18AF16DF8(v5);
  *(void *)(v1 + 328) = v6;
  uint64_t v7 = sub_18AF2F1C8();
  uint64_t v8 = *(void *)(v3 + 8);
  char v9 = *(unsigned char *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + 24);
  *(unsigned char *)(v1 + 152) = *(unsigned char *)v3;
  *(void *)(v1 + 336) = v7;
  *(void *)(v1 + 344) = v10;
  *(void *)(v1 + 160) = v8;
  *(unsigned char *)(v1 + 168) = v9;
  *(void *)(v1 + 176) = v10;
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v1 + 352) = v11;
  *uint64_t v11 = v1;
  v11[1] = sub_18AF4B66C;
  uint64_t v12 = sub_18AF30494();
  return sub_18AF4E56C(v12);
}

void sub_18AF4B830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, char *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _OWORD *a17, _OWORD *a18, uint64_t a19, uint64_t a20,int64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_18AF47534();
  uint64_t v133 = v28;
  if (v28[70])
  {
    a14 = v28[70];
    uint64_t v29 = v28[71];
    a13 = v28[72];
    a15 = v29;
    a16 = v28[73];
    uint64_t v30 = *(void *)(v29 + 16);
    uint64_t v31 = (void *)v28[91];
    if (v30)
    {
      uint64_t v32 = (uint64_t)(v28 + 36);
      v134 = v28 + 77;
      sub_18AF3E5B4();
      swift_bridgeObjectRetain();
      os_log_type_t v33 = (void **)(v29 + 40);
      uint64_t v34 = v31;
      while (1)
      {
        uint64_t v35 = *v33;
        id v36 = *(v33 - 1);
        id v37 = v35;
        v28[80] = objc_msgSend(v36, sel_recordID);
        sub_18AF34EA0(0, &qword_1E91255F0);
        sub_18AF34EDC((unint64_t *)&qword_1E91251C8, &qword_1E91255F0);
        sub_18AF474C4();
        AnyHashable.init<A>(_:)();
        id v38 = v37;
        Swift::Int v39 = (Swift::Int)v34;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        Swift::Int *v134 = v39;
        sub_18AF7D078(v32);
        sub_18AFFBE70();
        if (v43) {
          break;
        }
        unint64_t v44 = v41;
        char v45 = v42;
        sub_18AF161EC(&qword_1E9124EB0);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v39))
        {
          unint64_t v46 = sub_18AF7D078(v32);
          if ((v45 & 1) != (v47 & 1))
          {
LABEL_51:
            sub_18AF47490();
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            return;
          }
          unint64_t v44 = v46;
        }
        uint64_t v34 = (void *)*v134;
        if (v45)
        {
          uint64_t v48 = v34[7];

          *(void *)(v48 + 8 * v44) = v38;
        }
        else
        {
          sub_18AFFC294((uint64_t)&v34[v44 >> 6]);
          sub_18AF7E1AC(v32, v34[6] + 40 * v44);
          *(void *)(v34[7] + 8 * v44) = v38;
          uint64_t v49 = v34[2];
          BOOL v43 = __OFADD__(v49, 1);
          uint64_t v50 = v49 + 1;
          if (v43) {
            goto LABEL_94;
          }
          v34[2] = v50;
        }
        swift_bridgeObjectRelease();
        sub_18AF6A2CC(v32);

        v33 += 2;
        if (!--v30)
        {
          swift_bridgeObjectRelease();
          uint64_t v51 = v34;
          goto LABEL_18;
        }
      }
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v51 = v31;
LABEL_18:
      a17 = v28 + 20;
      a18 = v28 + 14;
      a10 = v28 + 26;
      a11 = (char *)(v28 + 95);
      uint64_t v54 = (uint64_t)(v28 + 51);
      a22 = v28 + 74;
      id v55 = v28 + 81;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_18AFC2F00(a16, v28 + 41);
      a23 = v28[41];
      a20 = v28[42];
      a24 = v28[44];
      uint64_t v56 = v28[45];
      a21 = (unint64_t)(v28[43] + 64) >> 6;
      sub_18AF32094();
      swift_bridgeObjectRetain();
      a12 = v51;
      if (!v56) {
        goto LABEL_20;
      }
LABEL_19:
      sub_18AFFC154();
      uint64_t v58 = v57 | (a24 << 6);
      while (1)
      {
        uint64_t v70 = *(void **)(*(void *)(a23 + 48) + 8 * v58);
        uint64_t v71 = *(void **)(*(void *)(a23 + 56) + 8 * v58);
        *a22 = v70;
        sub_18AF34EA0(0, &qword_1E91255F0);
        sub_18AF34EDC((unint64_t *)&qword_1E91251C8, &qword_1E91255F0);
        id v72 = v70;
        id v73 = v71;
        sub_18AFFC8F8();
        AnyHashable.init<A>(_:)();
        id v74 = v73;
        char v75 = swift_isUniquelyReferenced_nonNull_native();
        void *v55 = v51;
        sub_18AF7D078(v54);
        sub_18AFFBE70();
        if (v43)
        {
          __break(1u);
          goto LABEL_91;
        }
        unint64_t v78 = v76;
        char v79 = v77;
        sub_18AF161EC(&qword_1E9124EB0);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v75, (Swift::Int)v51))
        {
          unint64_t v80 = sub_18AF7D078(v54);
          if ((v79 & 1) != (v81 & 1)) {
            goto LABEL_51;
          }
          unint64_t v78 = v80;
        }
        uint64_t v51 = (void *)*v55;
        if (v79)
        {
          uint64_t v82 = v51[7];

          *(void *)(v82 + 8 * v78) = v74;
        }
        else
        {
          sub_18AFFC294((uint64_t)&v51[v78 >> 6]);
          sub_18AF7E1AC(v54, v51[6] + 40 * v78);
          *(void *)(v51[7] + 8 * v78) = v74;
          uint64_t v83 = v51[2];
          BOOL v43 = __OFADD__(v83, 1);
          uint64_t v84 = v83 + 1;
          if (v43) {
            goto LABEL_92;
          }
          v51[2] = v84;
        }
        swift_bridgeObjectRelease();
        sub_18AF6A2CC(v54);

        if (v56) {
          goto LABEL_19;
        }
LABEL_20:
        if (__OFADD__(a24, 1)) {
          goto LABEL_93;
        }
        if (a24 + 1 >= a21) {
          break;
        }
        sub_18AF22E2C();
        if (!v59)
        {
          sub_18AFFD368();
          if (v60 == v43) {
            break;
          }
          sub_18AFFDAB0();
          if (!v61)
          {
            sub_18AFFD368();
            if (v60 == v43) {
              break;
            }
            sub_18AFFDAB0();
            if (!v62)
            {
              sub_18AFFD368();
              if (v60 == v43) {
                break;
              }
              sub_18AFFDAB0();
              if (!v63)
              {
                sub_18AFFD368();
                if (v60 == v43) {
                  break;
                }
                sub_18AFFDAB0();
                if (!v65)
                {
                  if (v64 + 5 >= a21) {
                    break;
                  }
                  if (!*(void *)(a20 + 8 * (v64 + 5)))
                  {
                    int64_t v66 = a24 + 7;
                    while (v66 < a21)
                    {
                      sub_18AFFD32C();
                      if (v67) {
                        goto LABEL_40;
                      }
                    }
                    break;
                  }
                }
              }
            }
          }
        }
LABEL_40:
        sub_18AFFD318();
        uint64_t v58 = v69 + (v68 << 6);
        a24 = v68;
      }
      swift_release();
      swift_bridgeObjectRelease();
      sub_18AFFAF04(a14);
      swift_bridgeObjectRelease();
      if (v51[2])
      {
        if (*(unsigned char *)(v133[82] + 192) != 1) {
          goto LABEL_15;
        }
        uint64_t v86 = v133[94];
        sub_18AFC2F00((uint64_t)v51, a10);
        uint64_t v87 = v133[26];
        a24 = v133[27];
        uint64_t v88 = v133[29];
        uint64_t v89 = v133[30];
        int64_t v90 = (unint64_t)(v133[28] + 64) >> 6;
        swift_bridgeObjectRetain_n();
        while (1)
        {
          if (v89)
          {
            sub_18AFFC154();
            uint64_t v92 = v91 | (v88 << 6);
          }
          else
          {
            if (__OFADD__(v88, 1)) {
              goto LABEL_95;
            }
            if (v88 + 1 >= v90) {
              goto LABEL_86;
            }
            sub_18AF22E2C();
            if (!v94)
            {
              if (v93 + 1 >= v90) {
                goto LABEL_86;
              }
              sub_18AFFDA58();
              if (!v96)
              {
                if (v95 + 2 >= v90) {
                  goto LABEL_86;
                }
                sub_18AFFDA58();
                if (!v98)
                {
                  if (v97 + 3 >= v90) {
                    goto LABEL_86;
                  }
                  sub_18AFFDA58();
                  if (!v100)
                  {
                    if (v99 + 4 >= v90) {
                      goto LABEL_86;
                    }
                    sub_18AFFDA58();
                    if (!v102)
                    {
                      if (v101 + 5 >= v90) {
                        goto LABEL_86;
                      }
                      if (!*(void *)(a24 + 8 * (v101 + 5)))
                      {
                        int64_t v103 = v88 + 7;
                        while (v103 < v90)
                        {
                          sub_18AFFD32C();
                          if (v104) {
                            goto LABEL_75;
                          }
                        }
LABEL_86:
                        swift_bridgeObjectRelease();
                        swift_release();
                        goto LABEL_87;
                      }
                    }
                  }
                }
              }
            }
LABEL_75:
            sub_18AFFD318();
            uint64_t v92 = v106 + (v105 << 6);
            uint64_t v88 = v105;
          }
          sub_18AF7E1AC(*(void *)(v87 + 48) + 40 * v92, (uint64_t)a17);
          uint64_t v107 = *(void **)(*(void *)(v87 + 56) + 8 * v92);
          v133[25] = v107;
          long long v108 = a17[1];
          *a18 = *a17;
          a18[1] = v108;
          a18[2] = a17[2];
          id v109 = v107;
          char v110 = sub_18AFD2A90((void *)v133[19]);
          sub_18AF401EC((uint64_t)a18, &qword_1E9124D38);
          if (v86) {
            break;
          }
          if (v110)
          {
            swift_bridgeObjectRelease();
            swift_release();
            goto LABEL_15;
          }
        }
        sub_18AF47490();
        swift_release();
      }
      else
      {
LABEL_87:
        uint64_t v120 = v133[82];
        char v121 = *(unsigned char *)(v120 + 193);
        v133[86] = *(void *)(v120 + 176);
        a11[2] = v121;
        v133[87] = v51;
        uint64_t v122 = v133[85];
        char v123 = *((unsigned char *)v133 + 761);
        uint64_t v124 = v133[84];
        char v125 = *a11;
        uint64_t v126 = swift_task_alloc();
        v133[88] = v126;
        *(void *)(v126 + 16) = v120;
        *(unsigned char *)(v126 + 24) = v125;
        *(void *)(v126 + 32) = v124;
        *(unsigned char *)(v126 + 40) = v123;
        *(void *)(v126 + 48) = v122;
        uint64_t v127 = (void *)swift_task_alloc();
        v133[89] = v127;
        *uint64_t v127 = v133;
        v127[1] = sub_18AF4CBD0;
        sub_18AF47510();
        sub_18AF47490();
        sub_18AFCB368(v128, v129, v130, v131);
      }
    }
  }
  else
  {
    uint64_t v51 = (void *)v28[91];
LABEL_15:
    if (v51[2])
    {
      sub_18AFFE960();
      sub_18AF3A5D4();
      related decl 'e' for CKErrorCode.init(partialErrors:description:)(v52, 0xD000000000000016, v53);
      swift_willThrow();
      swift_bridgeObjectRelease();
      sub_18AF16D48();
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_18AF384DC();
    }
    sub_18AF47490();
    v112(v111, v112, v113, v114, v115, v116, v117, v118, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, v133,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26,
      a27,
      a28);
  }
}

void sub_18AF4C0BC()
{
  sub_18AF47534();
  uint64_t v1 = (char *)(v0 + 95);
  if (!v0[66])
  {
    uint64_t v27 = v0;
    Swift::String v26 = (void *)v0[87];
LABEL_79:
    v27[91] = v26;
    uint64_t v74 = v27[85];
    char v75 = *((unsigned char *)v27 + 761);
    uint64_t v76 = v27[84];
    char v77 = *v1;
    uint64_t v78 = v27[82];
    uint64_t v79 = swift_task_alloc();
    v27[92] = v79;
    *(void *)(v79 + 16) = v78;
    *(unsigned char *)(v79 + 24) = v77;
    *(void *)(v79 + 32) = v76;
    *(unsigned char *)(v79 + 40) = v75;
    *(void *)(v79 + 48) = v74;
    unint64_t v80 = (void *)swift_task_alloc();
    v27[93] = v80;
    void *v80 = v27;
    v80[1] = sub_18AF4CADC;
    sub_18AF47510();
    sub_18AF47490();
    sub_18AFCB05C(v81, v82, v83, v84);
    return;
  }
  uint64_t v100 = v0[66];
  uint64_t v101 = (char *)(v0 + 95);
  uint64_t v2 = v0[67];
  uint64_t v102 = v0[69];
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = (void *)v0[87];
  uint64_t v105 = v0;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(v0 + 56);
    id v109 = v0 + 75;
    uint64_t v6 = v0 + 76;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v7 = (void **)(v2 + 40);
    uint64_t v8 = v4;
    do
    {
      uint64_t v111 = v3;
      char v9 = *v7;
      id v10 = *(v7 - 1);
      id v11 = v9;
      *id v109 = objc_msgSend(v10, sel_zoneID);
      sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
      sub_18AF34EDC((unint64_t *)&qword_1EB279468, (unint64_t *)&qword_1EB279460);
      AnyHashable.init<A>(_:)();
      id v12 = v11;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      void *v6 = v8;
      Swift::Int v14 = (Swift::Int)v8;
      sub_18AF7D078(v5);
      sub_18AFFBE70();
      if (v17) {
        goto LABEL_89;
      }
      unint64_t v18 = v15;
      char v19 = v16;
      sub_18AF161EC(&qword_1E9124EB0);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v14))
      {
        unint64_t v20 = sub_18AF7D078(v5);
        if ((v19 & 1) != (v21 & 1))
        {
LABEL_50:
          sub_18AF47490();
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          return;
        }
        unint64_t v18 = v20;
      }
      uint64_t v22 = (void *)*v6;
      if (v19)
      {
        uint64_t v23 = v22[7];

        *(void *)(v23 + 8 * v18) = v12;
        uint64_t v8 = v22;
      }
      else
      {
        sub_18AFFC294((uint64_t)&v22[v18 >> 6]);
        sub_18AF7E1AC(v5, v22[6] + 40 * v18);
        *(void *)(v22[7] + 8 * v18) = v12;
        uint64_t v24 = v22[2];
        BOOL v17 = __OFADD__(v24, 1);
        uint64_t v25 = v24 + 1;
        if (v17) {
          goto LABEL_92;
        }
        uint64_t v8 = v22;
        v22[2] = v25;
      }
      swift_bridgeObjectRelease();
      sub_18AF6A2CC(v5);

      v7 += 2;
      --v3;
    }
    while (v111 != 1);
    swift_bridgeObjectRelease();
    uint64_t v0 = v105;
    Swift::String v26 = v8;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Swift::String v26 = v4;
  }
  int64_t v103 = v0 + 8;
  uint64_t v104 = v0 + 2;
  uint64_t v28 = (uint64_t)(v0 + 46);
  uint64_t v99 = v0 + 31;
  long long v108 = v0 + 78;
  uint64_t v29 = v0 + 79;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_18AFC2F00(v102, v0 + 61);
  uint64_t v110 = v0[61];
  uint64_t v106 = v0[62];
  int64_t v112 = v0[64];
  uint64_t v30 = v0[65];
  int64_t v107 = (unint64_t)(v0[63] + 64) >> 6;
  sub_18AF32094();
  swift_bridgeObjectRetain();
  if (!v30) {
    goto LABEL_18;
  }
LABEL_17:
  sub_18AFFD380();
  unint64_t v32 = v31 | (v112 << 6);
  while (1)
  {
    id v38 = *(void **)(*(void *)(v110 + 48) + 8 * v32);
    Swift::Int v39 = *(void **)(*(void *)(v110 + 56) + 8 * v32);
    *long long v108 = v38;
    sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
    sub_18AF34EDC((unint64_t *)&qword_1EB279468, (unint64_t *)&qword_1EB279460);
    id v40 = v38;
    id v41 = v39;
    AnyHashable.init<A>(_:)();
    id v42 = v41;
    char v43 = swift_isUniquelyReferenced_nonNull_native();
    void *v29 = v26;
    sub_18AF7D078(v28);
    sub_18AFFBE70();
    if (v17)
    {
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
      return;
    }
    unint64_t v46 = v44;
    char v47 = v45;
    sub_18AF161EC(&qword_1E9124EB0);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v43, (Swift::Int)v26))
    {
      unint64_t v48 = sub_18AF7D078(v28);
      if ((v47 & 1) != (v49 & 1)) {
        goto LABEL_50;
      }
      unint64_t v46 = v48;
    }
    Swift::String v26 = (void *)*v29;
    if (v47)
    {
      uint64_t v50 = v26[7];

      *(void *)(v50 + 8 * v46) = v42;
    }
    else
    {
      sub_18AFFC294((uint64_t)&v26[v46 >> 6]);
      sub_18AF7E1AC(v28, v26[6] + 40 * v46);
      *(void *)(v26[7] + 8 * v46) = v42;
      uint64_t v51 = v26[2];
      BOOL v17 = __OFADD__(v51, 1);
      uint64_t v52 = v51 + 1;
      if (v17) {
        goto LABEL_90;
      }
      v26[2] = v52;
    }
    swift_bridgeObjectRelease();
    sub_18AF6A2CC(v28);

    if (v30) {
      goto LABEL_17;
    }
LABEL_18:
    if (__OFADD__(v112, 1)) {
      goto LABEL_91;
    }
    if (v112 + 1 >= v107) {
      break;
    }
    sub_18AF22E2C();
    if (!v34)
    {
      sub_18AFFD374();
      if (v35 == v17) {
        break;
      }
      sub_18AFFD35C();
      if (!v34)
      {
        sub_18AFFD374();
        if (v35 == v17) {
          break;
        }
        sub_18AFFD35C();
        if (!v34)
        {
          sub_18AFFD374();
          if (v35 == v17) {
            break;
          }
          sub_18AFFD35C();
          if (!v34)
          {
            sub_18AFFD374();
            if (v35 == v17) {
              break;
            }
            sub_18AFFD35C();
            if (!v34)
            {
              int64_t v33 = v36 + 5;
              if (v36 + 5 >= v107) {
                break;
              }
              unint64_t v34 = *(void *)(v106 + 8 * v33);
              if (!v34)
              {
                int64_t v37 = v112 + 7;
                do
                {
                  if (v37 >= v107) {
                    goto LABEL_53;
                  }
                  sub_18AFFD32C();
                }
                while (!v34);
                int64_t v33 = v37 - 1;
              }
            }
          }
        }
      }
    }
    uint64_t v30 = (v34 - 1) & v34;
    unint64_t v32 = __clz(__rbit64(v34)) + (v33 << 6);
    int64_t v112 = v33;
  }
LABEL_53:
  int v54 = v101[2];
  swift_release();
  swift_bridgeObjectRelease();
  sub_18AFFAF04(v100);
  swift_bridgeObjectRelease();
  if (v54 != 1)
  {
LABEL_78:
    uint64_t v27 = v105;
    uint64_t v1 = v101;
    goto LABEL_79;
  }
  uint64_t v55 = v105[90];
  sub_18AFC2F00((uint64_t)v26, v99);
  uint64_t v56 = v105[31];
  uint64_t v113 = v105[32];
  int64_t v57 = v105[34];
  unint64_t v58 = v105[35];
  int64_t v59 = (unint64_t)(v105[33] + 64) >> 6;
  swift_bridgeObjectRetain_n();
  while (1)
  {
    if (v58)
    {
      unint64_t v60 = __clz(__rbit64(v58));
      v58 &= v58 - 1;
      unint64_t v61 = v60 | (v57 << 6);
      goto LABEL_75;
    }
    if (__OFADD__(v57, 1)) {
      goto LABEL_93;
    }
    if (v57 + 1 >= v59) {
      goto LABEL_85;
    }
    sub_18AF22E2C();
    if (!v64)
    {
      if (v63 + 1 >= v59) {
        goto LABEL_85;
      }
      sub_18AFFD30C();
      if (!v64)
      {
        if (v65 + 2 >= v59) {
          goto LABEL_85;
        }
        sub_18AFFD30C();
        if (!v64)
        {
          if (v66 + 3 >= v59) {
            goto LABEL_85;
          }
          sub_18AFFD30C();
          if (!v64)
          {
            if (v67 + 4 >= v59) {
              goto LABEL_85;
            }
            sub_18AFFD30C();
            if (!v64)
            {
              int64_t v62 = v68 + 5;
              if (v68 + 5 >= v59) {
                goto LABEL_85;
              }
              unint64_t v64 = *(void *)(v113 + 8 * v62);
              if (!v64) {
                break;
              }
            }
          }
        }
      }
    }
LABEL_74:
    unint64_t v58 = (v64 - 1) & v64;
    unint64_t v61 = __clz(__rbit64(v64)) + (v62 << 6);
    int64_t v57 = v62;
LABEL_75:
    sub_18AF7E1AC(*(void *)(v56 + 48) + 40 * v61, (uint64_t)v103);
    uint64_t v70 = *(void **)(*(void *)(v56 + 56) + 8 * v61);
    v105[13] = v70;
    long long v71 = v103[1];
    _OWORD *v104 = *v103;
    v104[1] = v71;
    v104[2] = v103[2];
    id v72 = v70;
    char v73 = sub_18AFD2A90((void *)v105[7]);
    sub_18AF401EC((uint64_t)v104, &qword_1E9124D38);
    if (v55)
    {
      sub_18AF47490();
      swift_release();
      return;
    }
    if (v73)
    {
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_78;
    }
  }
  int64_t v69 = v57 + 7;
  while (v69 < v59)
  {
    sub_18AFFD32C();
    if (v64)
    {
      int64_t v62 = v69 - 1;
      goto LABEL_74;
    }
  }
LABEL_85:
  swift_bridgeObjectRelease();
  swift_release();
  v101[2] = 1;
  v105[87] = v26;
  uint64_t v87 = v105[85];
  char v88 = *((unsigned char *)v105 + 761);
  uint64_t v89 = v105[84];
  char v90 = *v101;
  uint64_t v91 = v105[82];
  uint64_t v92 = swift_task_alloc();
  v105[88] = v92;
  *(void *)(v92 + 16) = v91;
  *(unsigned char *)(v92 + 24) = v90;
  *(void *)(v92 + 32) = v89;
  *(unsigned char *)(v92 + 40) = v88;
  *(void *)(v92 + 48) = v87;
  uint64_t v93 = (void *)swift_task_alloc();
  v105[89] = v93;
  *uint64_t v93 = v105;
  v93[1] = sub_18AF4CBD0;
  sub_18AF47510();
  sub_18AF47490();
  sub_18AFCB368(v94, v95, v96, v97);
}

uint64_t sub_18AF4C9D4()
{
  sub_18AF31148();
  sub_18AF338B4();
  char v1 = *(unsigned char *)(v0 + 760);
  uint64_t v2 = *(void *)(v0 + 656);
  char v3 = *(unsigned char *)(v2 + 193);
  *(void *)(v0 + 688) = *(void *)(v2 + 176);
  *(unsigned char *)(v0 + 762) = v3;
  *(void *)(v0 + 696) = MEMORY[0x1E4FBC868];
  uint64_t v4 = *(void *)(v0 + 680);
  char v5 = *(unsigned char *)(v0 + 761);
  uint64_t v6 = *(void *)(v0 + 672);
  uint64_t v7 = swift_task_alloc();
  *(void *)(v0 + 704) = v7;
  *(void *)(v7 + 16) = v2;
  *(unsigned char *)(v7 + 24) = v1;
  *(void *)(v7 + 32) = v6;
  *(unsigned char *)(v7 + 40) = v5;
  *(void *)(v7 + 48) = v4;
  swift_task_alloc();
  sub_18AF475A0();
  *(void *)(v0 + 712) = v8;
  *uint64_t v8 = v9;
  v8[1] = sub_18AF4CBD0;
  sub_18AF47510();
  sub_18AF311B0();
  return sub_18AFCB368(v10, v11, v12, v13);
}

uint64_t sub_18AF4CADC()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  void *v6 = v5;
  *(void *)(v3 + 752) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 656);
    uint64_t v8 = sub_18AFD2A28;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 656);
    swift_task_dealloc();
    uint64_t v8 = sub_18AF4B830;
    uint64_t v7 = v9;
  }
  return MEMORY[0x1F4188298](v8, v7, 0);
}

uint64_t sub_18AF4CBD0()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  void *v6 = v5;
  *(void *)(v3 + 720) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 656);
    uint64_t v8 = sub_18AFD29C0;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 656);
    swift_task_dealloc();
    uint64_t v8 = sub_18AF4C0BC;
    uint64_t v7 = v9;
  }
  return MEMORY[0x1F4188298](v8, v7, 0);
}

uint64_t sub_18AF4CCC4()
{
  sub_18AF2FCD0();
  sub_18AF19FAC();
  sub_18AF4751C();
  uint64_t v0 = swift_task_alloc();
  char v1 = (void *)sub_18AF16AE4(v0);
  *char v1 = v2;
  v1[1] = sub_18AF13048;
  sub_18AF47674();
  sub_18AF2FCE4();
  return sub_18AF4CD64(v3, v4, v5, v6, v7, v8);
}

uint64_t sub_18AF4CD64(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6)
{
  *(unsigned char *)(v6 + 16) = a3 & 1;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5;
  *(void *)(v6 + 40) = a6;
  char v7 = (void *)swift_task_alloc();
  *(void *)(v6 + 48) = v7;
  *char v7 = v6;
  v7[1] = sub_18AF1E488;
  return sub_18AF4AC54();
}

uint64_t sub_18AF4CE24()
{
  sub_18AF2FCD0();
  sub_18AF19FAC();
  sub_18AF4751C();
  uint64_t v0 = swift_task_alloc();
  char v1 = (void *)sub_18AF16AE4(v0);
  *char v1 = v2;
  v1[1] = sub_18AF13048;
  sub_18AF47674();
  sub_18AF2FCE4();
  return sub_18AF4CEC4(v3, v4, v5, v6, v7, v8);
}

uint64_t sub_18AF4CEC4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6)
{
  *(unsigned char *)(v6 + 16) = a3 & 1;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5;
  *(void *)(v6 + 40) = a6;
  char v7 = (void *)swift_task_alloc();
  *(void *)(v6 + 48) = v7;
  *char v7 = v6;
  v7[1] = sub_18AF1E488;
  return sub_18AF4B74C();
}

uint64_t sub_18AF4CF84()
{
  *(void *)(v1 + 656) = v0;
  sub_18AF299F4();
  *(void *)(v1 + 664) = v2;
  *(unsigned char *)(v1 + 760) = *(unsigned char *)v3;
  *(void *)(v1 + 672) = *(void *)(v3 + 8);
  *(unsigned char *)(v1 + 761) = *(unsigned char *)(v3 + 16);
  *(void *)(v1 + 680) = *(void *)(v3 + 24);
  return sub_18AF18660((uint64_t)sub_18AF4C9D4, v4);
}

uint64_t sub_18AF4CFD0()
{
  sub_18AF2A56C();
  uint64_t v1 = *(void *)(v0[3] + 136);
  sub_18AF474D0();
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_18AF1D998(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_18AF4D080;
  uint64_t v6 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v7 = v0[2];
  return v9(v7, 0, v5, v1, v6);
}

uint64_t sub_18AF4D080()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF16D48();
  return v3();
}

uint64_t sub_18AF4D140()
{
  sub_18AF2A56C();
  sub_18AF306D0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  uint64_t v3 = sub_18AF307FC();
  return sub_18AFE484C(v3, v4, v5);
}

uint64_t sub_18AF4D1D0()
{
  sub_18AF2A56C();
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  uint64_t v3 = swift_task_alloc();
  v0[4] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_18AF1D998(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_18AF4D290;
  sub_18AF47510();
  return sub_18AF14A2C(v7, v8, v9, v10);
}

uint64_t sub_18AF4D290()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  void *v6 = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 24);
    char v8 = sub_18AFE47EC;
  }
  else
  {
    uint64_t v9 = *(void *)(v3 + 24);
    swift_task_dealloc();
    char v8 = sub_18AF1533C;
    uint64_t v7 = v9;
  }
  return MEMORY[0x1F4188298](v8, v7, 0);
}

void sub_18AF4D380()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (!v1)
  {
    if (qword_1E91252D0 == -1)
    {
LABEL_12:
      uint64_t v15 = type metadata accessor for Logger();
      sub_18AF41270(v15, (uint64_t)qword_1E91253B0);
      char v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.debug.getter();
      if (sub_18AF42D04(v17))
      {
        unint64_t v18 = (_DWORD *)sub_18AF2A5F0();
        uint64_t v54 = sub_18AF16B9C();
        *unint64_t v18 = 136315138;
        if ((sub_18AF33AE8() & 1) == 0)
        {
          sub_18AF30C68();
          swift_task_reportUnexpectedExecutor();
        }
        sub_18AFFC998();
        sub_18AF40CEC();
        uint64_t v19 = sub_18AF1FFE8();
        *(void *)(v0 + 48) = sub_18AF476A0(v19, v20, &v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_18AF38FA4();
        sub_18AFFBB1C(&dword_18AF10000, v16, v17, "%s no batch received from nextRecordZoneChangeBatch");
        sub_18AF351C4();
        sub_18AF388F8();
        sub_18AF388F8();

        swift_release();
      }
      else
      {
        swift_release();
        sub_18AF38FA4();
      }
      uint64_t v21 = *(void *)(v0 + 72);
      *(void *)uint64_t v21 = 0;
      *(void *)(v21 + 8) = 0;
      *(unsigned char *)(v21 + 16) = 0;
      goto LABEL_18;
    }
LABEL_35:
    swift_once();
    goto LABEL_12;
  }
  unint64_t v2 = *(void *)(v0 + 24);
  char v51 = *(unsigned char *)(v0 + 32);
  unint64_t v3 = *(void *)(v0 + 88);
  char v4 = *(unsigned char *)(v0 + 34);
  swift_bridgeObjectRetain();
  unint64_t v5 = swift_bridgeObjectRetain();
  unint64_t v6 = sub_18AFC99B8(v5, v3, v4);
  unint64_t v7 = v6;
  if (v6 >> 62)
  {
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8)
    {
LABEL_4:
      uint64_t v54 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray.reserveCapacity(_:)();
      if ((v8 & 0x8000000000000000) == 0)
      {
        unint64_t v50 = v2;
        uint64_t v9 = 0;
        do
        {
          if ((v7 & 0xC000000000000001) != 0)
          {
            uint64_t v10 = sub_18AFFD8B8();
            id v11 = (id)MEMORY[0x18C1298C0](v10);
          }
          else
          {
            id v11 = *(id *)(v7 + 8 * v9 + 32);
          }
          uint64_t v12 = v11;
          ++v9;
          id v13 = objc_msgSend(v11, sel_recordID);

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        while (v8 != v9);
        uint64_t v14 = v54;
        swift_bridgeObjectRelease();
        unint64_t v2 = v50;
        goto LABEL_21;
      }
      __break(1u);
      goto LABEL_35;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = MEMORY[0x1E4FBC860];
LABEL_21:
  unint64_t v22 = *(void *)(v0 + 88);
  uint64_t v23 = *(unsigned __int8 *)(v0 + 34);
  swift_bridgeObjectRetain();
  unint64_t v24 = swift_bridgeObjectRetain();
  unint64_t v25 = sub_18AFC9F3C(v24, v22, v23);
  if ((unint64_t)v14 >> 62)
  {
    if (v14 < 0) {
      uint64_t v26 = v14;
    }
    else {
      uint64_t v26 = v14 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    sub_18AFFDCB4();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v26 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v26) {
    goto LABEL_26;
  }
  if (v25 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v37) {
      goto LABEL_26;
    }
  }
  else if (*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_26:
    char v27 = *(unsigned char *)(v0 + 34);
    uint64_t v28 = *(void *)(v0 + 88);
    sub_18AF94D4C(v1);
    uint64_t v54 = 0;
    unint64_t v55 = 0xE000000000000000;
    _StringGuts.grow(_:)(113);
    v29._uint64_t countAndFlagsBits = 0xD000000000000039;
    v29._object = (void *)0x800000018B1D4010;
    String.append(_:)(v29);
    uint64_t v52 = v28;
    char v53 = v27;
    CKSyncEngine.SendChangesOptions.Scope.description.getter();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    sub_18AFFD13C((uint64_t)"): outOfScopeRecordSaves=");
    sub_18AF34EA0(0, &qword_1E91255F0);
    uint64_t v31 = sub_18AF3DDFC();
    v32._uint64_t countAndFlagsBits = MEMORY[0x18C129260](v31);
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_18AFFD13C((uint64_t)" outOfScopeRecordDeletes=");
    uint64_t v33 = sub_18AF31160();
    v34._uint64_t countAndFlagsBits = MEMORY[0x18C129260](v33);
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    related decl 'e' for CKErrorCode.init(_:description:)(12, 0, 0xE000000000000000);
    swift_willThrow();
    swift_release();
    sub_18AF16D48();
LABEL_27:
    sub_18AF2EFF8();
    __asm { BRAA            X1, X16 }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_1E91252D0 != -1) {
    swift_once();
  }
  uint64_t v38 = type metadata accessor for Logger();
  sub_18AF412A0(v38, (uint64_t)qword_1E91253B0);
  swift_retain();
  sub_18AFF16C0(v1);
  swift_retain();
  sub_18AFF16C0(v1);
  Swift::Int v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.debug.getter();
  if (sub_18AF42D04(v40))
  {
    uint64_t v41 = sub_18AF402C8();
    uint64_t v52 = sub_18AF182D8();
    *(_DWORD *)uint64_t v41 = 136315394;
    if ((sub_18AF33AE8() & 1) == 0)
    {
      sub_18AF30C68();
      swift_task_reportUnexpectedExecutor();
    }
    swift_retain();
    sub_18AF40CEC();
    sub_18AF30464();
    uint64_t v42 = sub_18AFFDBB0();
    *(void *)(v0 + 56) = sub_18AF4095C(v42, v43, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_18AF38FA4();
    *(_WORD *)(v41 + 12) = 2080;
    uint64_t v54 = v1;
    unint64_t v55 = v2;
    char v56 = v51 & 1;
    CKSyncEngine.RecordZoneChangeBatch.description.getter();
    *(void *)(v0 + 64) = sub_18AF4095C(v45, v46, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v47 = sub_18AFFDBB0();
    sub_18AF94D4C(v47);
    uint64_t v48 = sub_18AFFDBB0();
    sub_18AF94D4C(v48);
    sub_18AF41358(&dword_18AF10000, v39, v40, "%s received record zone change batch: %s");
    sub_18AF41310();
    sub_18AF388F8();
    sub_18AF388F8();

    swift_release();
  }
  else
  {
    swift_release();
    sub_18AF38FA4();
    sub_18AF94D4C(v1);
    sub_18AF94D4C(v1);
  }
  uint64_t v49 = *(void *)(v0 + 72);
  *(void *)uint64_t v49 = v1;
  *(void *)(v49 + 8) = v2;
  *(unsigned char *)(v49 + 16) = v51 & 1;
LABEL_18:
  sub_18AF384DC();
  goto LABEL_27;
}

uint64_t sub_18AF4DAB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_18AF30750();
  a21 = v24;
  a22 = v25;
  sub_18AF18F44();
  a20 = v22;
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v22 + 104) = Strong;
  if (Strong)
  {
    uint64_t v27 = Strong;
    uint64_t v28 = *(void *)(v22 + 88);
    Swift::String v29 = *(void **)(v22 + 96);
    char v30 = *(unsigned char *)(v22 + 34);
    char v31 = *(unsigned char *)(v22 + 33);
    uint64_t v32 = swift_allocObject();
    *(void *)(v22 + 112) = v32;
    *(unsigned char *)(v32 + 16) = v31;
    *(void *)(v32 + 24) = v28;
    *(unsigned char *)(v32 + 32) = v30;
    *(void *)(v32 + 40) = v29;
    *(void *)(v32 + 48) = v27;
    sub_18AF474F0();
    swift_bridgeObjectRetain();
    id v33 = v29;
    swift_task_alloc();
    sub_18AF475A0();
    *(void *)(v22 + 120) = v34;
    *Swift::String v34 = v35;
    v34[1] = sub_18AF4DD2C;
    sub_18AF29CD8();
    sub_18AF2ACD0();
    return v39(v36, v37, v38, v39, v40, v41, v42, v43, a9, a10, a11, a12, a13, a14);
  }
  else
  {
    if (qword_1E91252D0 != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    sub_18AF41270(v45, (uint64_t)qword_1E91253B0);
    unint64_t v46 = (void *)Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.info.getter();
    if (sub_18AF3A2EC(v47))
    {
      uint64_t v48 = (_DWORD *)sub_18AF2A5F0();
      sub_18AF16B9C();
      sub_18AFFC120();
      *uint64_t v48 = 136315138;
      if ((sub_18AF33AE8() & 1) == 0)
      {
        sub_18AF30C68();
        swift_task_reportUnexpectedExecutor();
      }
      sub_18AFFBDD8();
      sub_18AF40CEC();
      uint64_t v49 = sub_18AF37A48();
      *(void *)(v22 + 40) = sub_18AF403F4(v49, v50, &a11);
      sub_18AFFD27C();
      swift_bridgeObjectRelease();
      sub_18AF38FA4();
      sub_18AFFBB34(&dword_18AF10000, v51, v23, "%s not getting next record zone change batch for deallocated engine");
      sub_18AF19F48();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {
      sub_18AF38FA4();
    }

    uint64_t v52 = *(void *)(v22 + 72);
    *(void *)uint64_t v52 = 0;
    *(void *)(v52 + 8) = 0;
    *(unsigned char *)(v52 + 16) = 0;
    sub_18AF384DC();
    sub_18AF2ACD0();
    return v54(v53, v54, v55, v56, v57, v58, v59, v60, a9, a10, a11, a12, a13, a14);
  }
}

uint64_t sub_18AF4DD2C()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *unint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_18AF309A4();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AF4DE24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_18AF299CC();
  sub_18AF1A048();
  if (*(void *)(v12 + 80))
  {
    uint64_t v13 = *(void *)(v12 + 88);
    char v14 = *(unsigned char *)(v12 + 105);
    uint64_t v16 = *(void *)(v12 + 56);
    uint64_t v15 = *(void *)(v12 + 64);
    char v17 = *(unsigned char *)(v12 + 104) & 1;
    swift_getObjectType();
    *(unsigned char *)(v12 + 16) = v17;
    *(void *)(v12 + 24) = v16;
    *(unsigned char *)(v12 + 32) = v14;
    *(void *)(v12 + 40) = v15;
    uint64_t v39 = *(void *)(v13 + 16) + **(int **)(v13 + 16);
    uint64_t v18 = swift_task_alloc();
    uint64_t v19 = (void *)sub_18AF47550(v18);
    void *v19 = v20;
    v19[1] = sub_18AF4DF8C;
    sub_18AF33974();
    return v27(v21, v22, v23, v24, v25, v26, v27, v28, v39, v13 + 16, a11, a12);
  }
  else
  {
    uint64_t v30 = *(void *)(v12 + 48);
    *(void *)uint64_t v30 = 0;
    *(void *)(v30 + 8) = 0;
    *(unsigned char *)(v30 + 16) = 0;
    sub_18AF16D48();
    sub_18AF33974();
    return v32(v31, v32, v33, v34, v35, v36, v37, v38, a9, a10, a11, a12);
  }
}

uint64_t sub_18AF4DF8C()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *unint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF16D48();
  return v3();
}

uint64_t sub_18AF4E04C()
{
  sub_18AF31148();
  sub_18AF338B4();
  sub_18AF305FC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF13048;
  sub_18AF475C4();
  sub_18AF47674();
  sub_18AF311B0();
  return sub_18AF4E0F4(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_18AF4E0F4(uint64_t a1, _OWORD *a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 64) = a6;
  *(void *)(v7 + 72) = a7;
  *(unsigned char *)(v7 + 105) = a5;
  *(unsigned char *)(v7 + 104) = a3;
  *(void *)(v7 + 48) = a1;
  *(void *)(v7 + 56) = a4;
  *(_OWORD *)(v7 + 80) = *a2;
  return MEMORY[0x1F4188298](sub_18AF4DE24, 0, 0);
}

uint64_t sub_18AF4E128(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 72) = a1;
  *(void *)(v3 + 80) = v2;
  *(unsigned char *)(v3 + 33) = *(unsigned char *)a2;
  *(unsigned char *)(v3 + 34) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(v3 + 88) = *(void *)(a2 + 8);
  *(void *)(v3 + 96) = v4;
  return sub_18AF18660((uint64_t)sub_18AF4DAB4, v2);
}

void sub_18AF4E160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_18AF410EC();
  sub_18AF41388();
  uint64_t v21 = *(void *)(v18 + 40);
  CKSyncEngine.State.pendingDatabaseChanges.getter();
  uint64_t v58 = v22;
  uint64_t v23 = (void *)MEMORY[0x18C12BC20](v21 + 120);
  if (!v23) {
    goto LABEL_46;
  }
  uint64_t v24 = v23;
  id v25 = objc_msgSend(v23, sel_dataSource);
  if (!v25)
  {

    goto LABEL_46;
  }
  uint64_t v26 = v25;
  uint64_t v27 = &selRef_abort;
  unsigned __int8 v28 = objc_msgSend(v25, sel_respondsToSelector_, sel_recordZonesToSaveForSyncEngine_);
  uint64_t v29 = MEMORY[0x1E4FBC860];
  if ((v28 & 1) == 0) {
    goto LABEL_16;
  }
  id v30 = objc_msgSend((id)swift_unknownObjectRetain(), sel_recordZonesToSaveForSyncEngine_, v24);
  if (!v30)
  {
    swift_unknownObjectRelease();
LABEL_16:
    uint64_t v36 = 0;
    goto LABEL_19;
  }
  uint64_t v31 = v30;
  sub_18AF34EA0(0, &qword_1E9125630);
  uint64_t v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_unknownObjectRelease();
  if ((unint64_t)v32 >> 62)
  {
    if (v32 < 0) {
      uint64_t v19 = v32;
    }
    else {
      uint64_t v19 = v32 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    sub_18AFFDA0C();
  }
  else
  {
    uint64_t v33 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v19 = v33;
  }
  LODWORD(a10) = v33 != 0;
  if (v19)
  {
    a11 = v26;
    a12 = v24;
    sub_18AFFBFC8();
    if (v19 < 0)
    {
      __break(1u);
      goto LABEL_51;
    }
    sub_18AFFD244();
    do
    {
      sub_18AFFD214();
      a14 = v20;
      sub_18AFFC24C();
      if (v34) {
        sub_18AFFC200();
      }
      sub_18AFFDABC();
      *(unsigned char *)(v35 + 40) = 0;
    }
    while (v19 != v29);
    swift_bridgeObjectRelease();
    uint64_t v29 = MEMORY[0x1E4FBC860];
    uint64_t v27 = &selRef_abort;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = MEMORY[0x1E4FBC860];
  }
  sub_18AFA3344(v20);
  uint64_t v36 = v33 != 0;
LABEL_19:
  if ((objc_msgSend(v26, v27[396], sel_recordZoneIDsToDeleteForSyncEngine_) & 1) == 0)
  {

    swift_unknownObjectRelease();
    if (v36) {
      goto LABEL_33;
    }
LABEL_46:
    uint64_t v43 = *(void *)(v18 + 40);
    sub_18AF18528();
    uint64_t v42 = *(void *)(v43 + 184);
    goto LABEL_47;
  }
  id v37 = objc_msgSend((id)swift_unknownObjectRetain(), sel_recordZoneIDsToDeleteForSyncEngine_, v24);
  if (!v37)
  {
    swift_unknownObjectRelease_n();

    if ((v36 & 1) == 0) {
      goto LABEL_46;
    }
    goto LABEL_33;
  }
  uint64_t v38 = v37;
  sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
  unint64_t v39 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_unknownObjectRelease();
  if (!(v39 >> 62))
  {
    uint64_t v19 = *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v19) {
      int v40 = 1;
    }
    else {
      int v40 = v36;
    }
    if (v19) {
      goto LABEL_26;
    }
LABEL_44:
    swift_bridgeObjectRelease();
    uint64_t v36 = MEMORY[0x1E4FBC860];
    goto LABEL_45;
  }
  sub_18AF31228();
  _CocoaArrayWrapper.endIndex.getter();
  sub_18AFFDA0C();
  if (v19) {
    int v40 = 1;
  }
  else {
    int v40 = v36;
  }
  swift_bridgeObjectRetain();
  _CocoaArrayWrapper.endIndex.getter();
  sub_18AFFDA0C();
  if (!v19) {
    goto LABEL_44;
  }
LABEL_26:
  HIDWORD(a9) = v40;
  a11 = v26;
  a12 = v24;
  a10 = v18;
  sub_18AFFBFC8();
  if (v19 < 0)
  {
LABEL_51:
    __break(1u);
    return;
  }
  sub_18AFFD244();
  do
  {
    sub_18AFFD214();
    a14 = v36;
    sub_18AFFC24C();
    if (v34) {
      sub_18AFFC200();
    }
    sub_18AFFDABC();
    *(unsigned char *)(v41 + 40) = 1;
  }
  while (v19 != v29);
  swift_bridgeObjectRelease();
LABEL_45:
  sub_18AFA3344(v36);

  swift_unknownObjectRelease();
  if ((v40 & 1) == 0) {
    goto LABEL_46;
  }
LABEL_33:
  uint64_t v42 = 100;
LABEL_47:
  swift_bridgeObjectRetain();
  uint64_t v44 = sub_18AF311C8();
  sub_18AF477A0(v44);
  uint64_t v46 = sub_18AF485A4(v42, v45);
  sub_18AF489E4(v46, v47, v48, v49, (uint64_t (*)(uint64_t))sub_18AFBF6EC);
  sub_18AF149EC();
  sub_18AF41060();
  v52(v50, v51, v52, v53, v54, v55, v56, v57, a9, a10, a11, a12, v58, a14, a15, a16, a17, a18);
}

uint64_t sub_18AF4E56C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(v2 + 40) = v1;
  *(void *)(v2 + 48) = v3;
  *(unsigned char *)(v2 + 56) = *(unsigned char *)(a1 + 16);
  return sub_18AF18660((uint64_t)sub_18AF4E160, v1);
}

uint64_t sub_18AF4E594()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  void *v6 = v5;
  v3[41] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = v3[31];
    return MEMORY[0x1F4188298](sub_18AFD2888, v7, 0);
  }
  else
  {
    v3[42] = 0;
    uint64_t v8 = (void *)swift_task_alloc();
    v3[43] = v8;
    *uint64_t v8 = v5;
    v8[1] = sub_18AF1F1AC;
    return sub_18AF14BC0();
  }
}

uint64_t sub_18AF4E6D0()
{
  sub_18AF37C20();
  sub_18AF19FAC();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16CB4();
  void *v6 = v5;
  *(void *)(v3 + 312) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_18AF37AC0();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    uint64_t v11 = *(unsigned __int8 *)(v3 + 82);
    uint64_t v13 = *(void *)(v3 + 256);
    uint64_t v12 = *(void **)(v3 + 264);
    char v14 = *(unsigned char *)(v3 + 81);

    *(unsigned char *)(v3 + 160) = v14;
    uint64_t v15 = v3 + 160;
    *(void *)(v15 + 8) = v13;
    *(unsigned char *)(v15 + 16) = v11;
    *(void *)(v15 + 24) = v12;
    uint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v15 + 160) = v16;
    *uint64_t v16 = v5;
    v16[1] = sub_18AF4E594;
    sub_18AF30494();
    sub_18AF37AC0();
    return sub_18AF4CF84();
  }
}

void sub_18AF4E948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AF4EA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AF4EBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AF4EC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AF4EDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AF4EE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18AF4F540(void *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = a1;
    objc_sync_enter(v4);
    id v5 = v4[2];
    objc_msgSend_removeObject_(v5, v6, (uint64_t)v3, v7);

    if (ck_log_initialization_predicate != -1) {
      dispatch_once(&ck_log_initialization_predicate, ck_log_initialization_block);
    }
    uint64_t v8 = (id)ck_log_facility_ck;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      id v9 = v4[2];
      int v13 = 138412546;
      id v14 = v3;
      __int16 v15 = 2048;
      uint64_t v16 = objc_msgSend_count(v9, v10, v11, v12);
      _os_log_debug_impl(&dword_18AF10000, v8, OS_LOG_TYPE_DEBUG, "Unregistering %@ from account changes. Now have %ld registered containers", (uint8_t *)&v13, 0x16u);
    }
    objc_sync_exit(v4);
  }
}

void sub_18AF4F688(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18AF4F728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_18AF4F7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_18AF4FCAC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18AF4FD6C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void type metadata accessor for CKSchedulerPriority(uint64_t a1)
{
}

void type metadata accessor for CKUnderlyingError(uint64_t a1)
{
}

void type metadata accessor for CKSchedulerActivityResult(uint64_t a1)
{
}

void type metadata accessor for Scope(uint64_t a1)
{
}

void type metadata accessor for CKSyncEngineSyncReason(uint64_t a1)
{
}

void type metadata accessor for CKSyncEngineAccountChangeType(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

BOOL sub_18AF50574(char a1, char a2)
{
  return a1 == a2;
}

void sub_18AF50584(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t sub_18AF505AC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x800000018B1D18A0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v5 = a1 == 0x6D75736B63656863 && a2 == 0xE800000000000000;
    if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v6 = a1 == 0x6874676E656CLL && a2 == 0xE600000000000000;
      if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0xD000000000000011 && a2 == 0x800000018B1D18C0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v7) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t sub_18AF50750()
{
  return 4;
}

Swift::Int sub_18AF50758(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t sub_18AF507A0()
{
  return 0;
}

unint64_t sub_18AF507AC(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6D75736B63656863;
      break;
    case 2:
      unint64_t result = 0x6874676E656CLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_18AF50840(char *a1, char *a2)
{
  return sub_18AF50574(*a1, *a2);
}

Swift::Int sub_18AF5084C()
{
  return sub_18AF50758(*v0);
}

void sub_18AF50854(uint64_t a1)
{
  sub_18AF50584(a1, *v1);
}

Swift::Int sub_18AF5085C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t sub_18AF508A0()
{
  return sub_18AF507AC(*v0);
}

uint64_t sub_18AF508A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_18AF505AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_18AF508D0()
{
  return sub_18AF507A0();
}

uint64_t sub_18AF508F0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_18AF50750();
  *a1 = result;
  return result;
}

uint64_t sub_18AF50918(uint64_t a1)
{
  unint64_t v2 = sub_18AF51DEC();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_18AF50954(uint64_t a1)
{
  unint64_t v2 = sub_18AF51DEC();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_18AF50990(void *a1)
{
  uint64_t v3 = sub_18AF161EC(&qword_1E91259A8);
  sub_18AF22CB0();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_18AF25FCC(a1, a1[3]);
  sub_18AF51DEC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15] = 0;
  sub_18AF38FF4();
  if (!v1)
  {
    v10[14] = 1;
    sub_18AF38FF4();
    v10[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[12] = 3;
    sub_18AF38FF4();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v3);
}

uint64_t sub_18AF50AF4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_18AF161EC(&qword_1E9125998);
  sub_18AF22CB0();
  MEMORY[0x1F4188790](v5);
  sub_18AF25FCC(a1, a1[3]);
  sub_18AF51DEC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_18AF40A30((uint64_t)a1);
  }
  uint64_t v6 = sub_18AF391E4();
  uint64_t v8 = v7;
  uint64_t v22 = v6;
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_18AF391E4();
  uint64_t v11 = v10;
  uint64_t v20 = v9;
  swift_bridgeObjectRetain();
  uint64_t v21 = v11;
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = sub_18AF391E4();
  uint64_t v14 = v13;
  uint64_t v15 = v12;
  uint64_t v16 = sub_18AF184DC();
  v17(v16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_18AF40A30((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v22;
  a2[1] = v8;
  a2[2] = v20;
  a2[3] = v21;
  a2[4] = v19;
  a2[5] = v15;
  a2[6] = v14;
  return result;
}

double sub_18AF50D5C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_18AF50AF4(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_18AF50DAC(void *a1)
{
  return sub_18AF50990(a1);
}

uint64_t sub_18AF50DC4(uint64_t a1)
{
  uint64_t v2 = sub_18AF13354((unint64_t *)&unk_1EB279470, type metadata accessor for CKError);

  return MEMORY[0x1F40E6E20](a1, v2);
}

uint64_t sub_18AF50E30(uint64_t a1)
{
  uint64_t v2 = sub_18AF13354((unint64_t *)&unk_1EB279470, type metadata accessor for CKError);

  return MEMORY[0x1F40E6E10](a1, v2);
}

uint64_t sub_18AF50EA0(uint64_t a1)
{
  uint64_t v2 = sub_18AF13354((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);

  return MEMORY[0x1F40E4480](a1, v2);
}

uint64_t sub_18AF50F0C()
{
  uint64_t v1 = sub_18AF388C8();
  uint64_t result = nullsub_2(v1);
  uint64_t *v0 = result;
  return result;
}

BOOL sub_18AF50F38(uint64_t *a1, uint64_t *a2)
{
  return sub_18AFA1E48(*a1, *a2);
}

Swift::Int sub_18AF50F44()
{
  return sub_18AFC463C(*v0);
}

void sub_18AF50F4C(int a1)
{
  sub_18AFA2088(a1, *v1);
}

Swift::Int sub_18AF50F54(uint64_t a1)
{
  return sub_18AFC4790(a1, *v1);
}

uint64_t sub_18AF50F5C(uint64_t a1)
{
  uint64_t v2 = sub_18AF13354((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);

  return MEMORY[0x1F40E44F0](a1, v2);
}

uint64_t sub_18AF50FC8(uint64_t a1)
{
  uint64_t v2 = sub_18AF13354((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);

  return MEMORY[0x1F40E44A8](a1, v2);
}

uint64_t sub_18AF51034()
{
  return sub_18AF5103C(*v0);
}

uint64_t sub_18AF5103C(void *a1)
{
  id v1 = a1;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_18AF51070(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18AF13354((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);

  return MEMORY[0x1F40E44D8](a1, a2, v4);
}

uint64_t sub_18AF510F4()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_18AF51104(uint64_t a1)
{
  uint64_t v2 = sub_18AF13354(&qword_1E9124E38, type metadata accessor for CKUnderlyingError);

  return MEMORY[0x1F40E44F0](a1, v2);
}

uint64_t sub_18AF51170(uint64_t a1)
{
  uint64_t v2 = sub_18AF13354(&qword_1E9124E38, type metadata accessor for CKUnderlyingError);

  return MEMORY[0x1F40E44A8](a1, v2);
}

uint64_t sub_18AF511DC(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_18AF13354(&qword_1E9124E38, type metadata accessor for CKUnderlyingError);
  id v5 = a1;

  return MEMORY[0x1F40E4498](v5, a2, v4);
}

uint64_t sub_18AF5126C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18AF13354(&qword_1E9124E38, type metadata accessor for CKUnderlyingError);

  return MEMORY[0x1F40E44D8](a1, a2, v4);
}

Swift::Int sub_18AF512E8()
{
  return Hasher._finalize()();
}

uint64_t sub_18AF51348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_18AF13354((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);

  return MEMORY[0x1F40E44B8](a1, a2, a3, v6);
}

uint64_t sub_18AF513CC()
{
  return sub_18AF13354(&qword_1EB279498, type metadata accessor for CKError);
}

uint64_t sub_18AF51414()
{
  return sub_18AF13354(&qword_1EB2794A0, type metadata accessor for CKError);
}

uint64_t sub_18AF5145C()
{
  return sub_18AF13354(&qword_1E9125578, type metadata accessor for Scope);
}

uint64_t sub_18AF514A4(uint64_t a1)
{
  uint64_t v2 = sub_18AF13354(&qword_1E9124E30, type metadata accessor for CKUnderlyingError);

  return MEMORY[0x1F40E6E20](a1, v2);
}

uint64_t sub_18AF51510(uint64_t a1)
{
  uint64_t v2 = sub_18AF13354(&qword_1E9124E30, type metadata accessor for CKUnderlyingError);

  return MEMORY[0x1F40E6E10](a1, v2);
}

uint64_t sub_18AF5157C(uint64_t a1)
{
  uint64_t v2 = sub_18AF13354(&qword_1E9124E38, type metadata accessor for CKUnderlyingError);

  return MEMORY[0x1F40E4480](a1, v2);
}

uint64_t sub_18AF515E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_18AF13354(&qword_1E9124E38, type metadata accessor for CKUnderlyingError);

  return MEMORY[0x1F40E44B8](a1, a2, a3, v6);
}

uint64_t sub_18AF5166C()
{
  return sub_18AF13354(&qword_1E9124E50, type metadata accessor for CKUnderlyingError);
}

uint64_t sub_18AF516B4()
{
  return sub_18AF13354(&qword_1E9124E58, type metadata accessor for CKUnderlyingError);
}

uint64_t sub_18AF516FC()
{
  return sub_18AF13354(&qword_1E9124E30, type metadata accessor for CKUnderlyingError);
}

uint64_t sub_18AF51744()
{
  return sub_18AF13354(&qword_1E9124E28, type metadata accessor for CKUnderlyingError);
}

uint64_t sub_18AF5178C()
{
  return sub_18AF13354((unint64_t *)&unk_1E9124E40, type metadata accessor for CKUnderlyingError);
}

uint64_t sub_18AF517D4()
{
  return sub_18AF13354(&qword_1E9125958, _s3__C4CodeOMa_0);
}

void _s3__C4CodeOMa_0(uint64_t a1)
{
}

uint64_t sub_18AF51830()
{
  return sub_18AF13354((unint64_t *)&unk_1E9125960, _s3__C4CodeOMa_0);
}

unint64_t sub_18AF5187C()
{
  unint64_t result = qword_1E9125648;
  if (!qword_1E9125648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9125648);
  }
  return result;
}

uint64_t sub_18AF518C8()
{
  return sub_18AF13354(&qword_1E9125970, _s3__C4CodeOMa_0);
}

uint64_t sub_18AF51910()
{
  return sub_18AF13354(&qword_1E9124E38, type metadata accessor for CKUnderlyingError);
}

uint64_t sub_18AF51958()
{
  return sub_18AF13354((unint64_t *)&unk_1EB279470, type metadata accessor for CKError);
}

uint64_t sub_18AF519A0()
{
  return sub_18AF13354(&qword_1EB279488, type metadata accessor for CKError);
}

uint64_t sub_18AF519E8()
{
  return sub_18AF13354(&qword_1EB279490, type metadata accessor for CKError);
}

uint64_t sub_18AF51A30()
{
  return sub_18AF13354((unint64_t *)&unk_1E9125978, type metadata accessor for Code);
}

void type metadata accessor for Code(uint64_t a1)
{
}

uint64_t sub_18AF51A8C()
{
  return sub_18AF13354(&qword_1E9125650, type metadata accessor for Code);
}

uint64_t sub_18AF51AD4()
{
  return sub_18AF13354(&qword_1E9125988, type metadata accessor for Code);
}

uint64_t sub_18AF51B1C()
{
  return sub_18AF13354((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);
}

uint64_t initializeBufferWithCopyOfBuffer for ChunkInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for ChunkInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ChunkInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ChunkInfo(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for ChunkInfo(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ChunkInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ChunkInfo(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ChunkInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ChunkInfo()
{
  return &type metadata for ChunkInfo;
}

unint64_t sub_18AF51DEC()
{
  unint64_t result = qword_1E91259A0;
  if (!qword_1E91259A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91259A0);
  }
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for ChunkInfo.CodingKeys(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ChunkInfo.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ChunkInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18AF51F9CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t sub_18AF51FC4(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_18AF51FCC(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ChunkInfo.CodingKeys()
{
  return &type metadata for ChunkInfo.CodingKeys;
}

unint64_t sub_18AF51FE8()
{
  unint64_t result = qword_1E91259B0;
  if (!qword_1E91259B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91259B0);
  }
  return result;
}

unint64_t sub_18AF52038()
{
  unint64_t result = qword_1E91259B8;
  if (!qword_1E91259B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91259B8);
  }
  return result;
}

unint64_t sub_18AF52088()
{
  unint64_t result = qword_1E91259C0;
  if (!qword_1E91259C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91259C0);
  }
  return result;
}

uint64_t CKSyncEngine.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  CKSyncEngine.init(_:)(a1);
  return v2;
}

uint64_t CKSyncEngine.init(_:)(uint64_t a1)
{
  sub_18AF161EC((uint64_t *)&unk_1E9125588);
  uint64_t v3 = swift_allocObject();
  *(void *)(v1 + 16) = v3;
  *(_DWORD *)(v3 + 24) = 0;
  unsigned int v4 = (os_unfair_lock_s *)(v3 + 24);
  *(void *)(v3 + 16) = 0;
  uint64_t v5 = (void *)(v3 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  sub_18AF52240(v5);
  os_unfair_lock_unlock(v4);
  sub_18AF5225C(a1);
  return v1;
}

void sub_18AF521B8(void *a1, uint64_t a2)
{
  swift_release();
  sub_18AF535D8(a2, (uint64_t)v5);
  type metadata accessor for SyncEngine();
  swift_allocObject();
  swift_retain();
  sub_18AFD00F8();
  *a1 = v4;
}

void sub_18AF52240(void *a1)
{
  sub_18AF521B8(a1, *(void *)(v1 + 16));
}

uint64_t sub_18AF5225C(uint64_t a1)
{
  return a1;
}

id CKSyncEngine.database.getter()
{
  id v0 = *(id *)(CKSyncEngine.actor.getter() + 136);
  swift_release();
  return v0;
}

uint64_t CKSyncEngine.state.getter()
{
  uint64_t v0 = *(void *)(CKSyncEngine.actor.getter() + 128);
  swift_retain();
  swift_release();
  return v0;
}

uint64_t CKSyncEngine.deinit()
{
  swift_release();
  return v0;
}

uint64_t CKSyncEngine.__deallocating_deinit()
{
  swift_release();

  return MEMORY[0x1F4186488](v0, 24, 7);
}

uint64_t CKSyncEngine.fetchChanges(_:)(uint64_t *a1)
{
  uint64_t v3 = *a1;
  *(void *)(v2 + 80) = v1;
  *(void *)(v2 + 88) = v3;
  *(unsigned char *)(v2 + 73) = *((unsigned char *)a1 + 8);
  *(_OWORD *)(v2 + 96) = *((_OWORD *)a1 + 1);
  uint64_t v4 = a1[4];
  *(unsigned char *)(v2 + 74) = *((unsigned char *)a1 + 40);
  uint64_t v5 = a1[6];
  *(void *)(v2 + 112) = v4;
  *(void *)(v2 + 120) = v5;
  *(unsigned char *)(v2 + 75) = *((unsigned char *)a1 + 56);
  return sub_18AF18508((uint64_t)sub_18AF523C8);
}

uint64_t sub_18AF523C8()
{
  sub_18AF52634();
  char v1 = *(unsigned char *)(v0 + 75);
  char v2 = *(unsigned char *)(v0 + 74);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 120);
  char v5 = *(unsigned char *)(v0 + 73);
  uint64_t v6 = *(void *)(v0 + 88);
  long long v9 = *(_OWORD *)(v0 + 96);
  *(void *)(v0 + 128) = CKSyncEngine.actor.getter();
  *(void *)(v0 + 16) = v6;
  *(unsigned char *)(v0 + 24) = v5;
  *(_OWORD *)(v0 + 32) = v9;
  *(void *)(v0 + 48) = v4;
  *(unsigned char *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = v3;
  *(unsigned char *)(v0 + 72) = v1;
  BOOL v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v7;
  *BOOL v7 = v0;
  v7[1] = sub_18AF52518;
  return sub_18AF1B604((_OWORD *)(v0 + 16));
}

uint64_t sub_18AF52518()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_18AF16CB4();
  *char v5 = v4;
  *(void *)(v3 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_release();
    return MEMORY[0x1F4188298](sub_18AF5262C, 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = *(uint64_t (**)(void))(v4 + 8);
    return v6();
  }
}

uint64_t sub_18AF5262C()
{
  return sub_18AF18514();
}

uint64_t sub_18AF52634()
{
  uint64_t result = sub_18AF52E08();
  if (result)
  {
    if (qword_1E9125668 != -1) {
      swift_once();
    }
    uint64_t v2 = (unsigned char *)(qword_1E9125A30 + 16);
    uint64_t v3 = (os_unfair_lock_s *)(qword_1E9125A30 + 20);
    os_unfair_lock_lock((os_unfair_lock_t)(qword_1E9125A30 + 20));
    sub_18AF38AFC(v2, &v4);
    if (v0)
    {
      os_unfair_lock_unlock(v3);
      __break(1u);
    }
    else
    {
      os_unfair_lock_unlock(v3);
      if (v4)
      {
        related decl 'e' for CKErrorCode.init(_:description:)(12, 0xD00000000000011ELL, 0x800000018B1D1C10);
        return swift_willThrow();
      }
    }
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t CKSyncEngine.sendChanges(_:)(uint64_t *a1)
{
  uint64_t v3 = *a1;
  *(void *)(v2 + 40) = v1;
  *(void *)(v2 + 48) = v3;
  *(unsigned char *)(v2 + 88) = *((unsigned char *)a1 + 8);
  *(void *)(v2 + 56) = a1[2];
  return sub_18AF18508((uint64_t)sub_18AF5278C);
}

uint64_t sub_18AF5278C()
{
  sub_18AF52634();
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  char v3 = *(unsigned char *)(v0 + 88);
  *(void *)(v0 + 64) = CKSyncEngine.actor.getter();
  *(void *)(v0 + 16) = v2;
  *(unsigned char *)(v0 + 24) = v3;
  *(void *)(v0 + 32) = v1;
  char v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v4;
  void *v4 = v0;
  v4[1] = sub_18AF528A0;
  return sub_18AF1B670((uint64_t *)(v0 + 16));
}

uint64_t sub_18AF528A0()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_18AF16CB4();
  *char v5 = v4;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_release();
    return MEMORY[0x1F4188298](sub_18AF529B4, 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v6 = *(uint64_t (**)(void))(v4 + 8);
    return v6();
  }
}

uint64_t sub_18AF529B4()
{
  return sub_18AF18514();
}

uint64_t CKSyncEngine.cancelOperations()()
{
  *(void *)(v1 + 16) = v0;
  return sub_18AF18508((uint64_t)sub_18AF529D4);
}

uint64_t sub_18AF529D4()
{
  sub_18AF52634();
  *(void *)(v0 + 24) = CKSyncEngine.actor.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_18AF52A90;
  return sub_18AFE0438();
}

uint64_t sub_18AF52A90()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

Swift::Void __swiftcall CKSyncEngine.setNeedsToFetchChanges()()
{
  if (qword_1E91252D0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_18AF412A0(v0, (uint64_t)qword_1E91253B0);
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v9 = v4;
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_retain();
    CKSyncEngine.actor.getter();
    uint64_t v5 = sub_18AF40CEC();
    unint64_t v7 = v6;
    swift_release();
    swift_release();
    sub_18AF4095C(v5, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_18AF10000, v1, v2, "%s manually setting needsToFetchDatabaseChanges", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18C12BB10](v4, -1, -1);
    MEMORY[0x18C12BB10](v3, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v8 = *(void *)(CKSyncEngine.actor.getter() + 128);
  swift_retain();
  swift_release();
  objc_msgSend(*(id *)(v8 + 16), sel_setNeedsToFetchDatabaseChanges_, 1);
  swift_release();
}

uint64_t CKSyncEngine.useOpportunisticPushTopic.getter()
{
  uint64_t v0 = *(unsigned __int8 *)(CKSyncEngine.actor.getter() + 352);
  swift_release();
  return v0;
}

uint64_t sub_18AF52DB4()
{
  sub_18AF161EC(&qword_1E9125238);
  swift_allocObject();
  uint64_t result = TaskLocal.init(wrappedValue:)();
  qword_1E912FE60 = result;
  return result;
}

uint64_t sub_18AF52E08()
{
  if (qword_1E9125270 != -1) {
    swift_once();
  }
  TaskLocal.get()();
  return v1;
}

uint64_t sub_18AF52E70()
{
  sub_18AF161EC(&qword_1E91255C0);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 20) = 0;
  *(unsigned char *)(result + 16) = 0;
  qword_1E9125A30 = result;
  return result;
}

uint64_t static CKSyncEngine.shouldThrowOnCallbackRecursionLock.getter()
{
  if (qword_1E9125668 != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t CKSyncEngine.objcEngine.getter()
{
  *(void *)(v1 + 16) = v0;
  return sub_18AF18508((uint64_t)sub_18AF52F20);
}

uint64_t sub_18AF52F20()
{
  sub_18AF339B8();
  uint64_t v1 = CKSyncEngine.actor.getter();
  *(void *)(v0 + 24) = v1;
  return MEMORY[0x1F4188298](sub_18AF52F88, v1, 0);
}

uint64_t sub_18AF52F88()
{
  sub_18AF339B8();
  uint64_t v1 = MEMORY[0x18C12BC20](*(void *)(v0 + 24) + 120);
  swift_release();
  os_log_type_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t CKSyncEngine.description.getter()
{
  CKSyncEngine.actor.getter();
  uint64_t v0 = sub_18AF40CEC();
  swift_release();
  return v0;
}

uint64_t sub_18AF53040()
{
  return CKSyncEngine.description.getter();
}

uint64_t type metadata accessor for CKSyncEngine()
{
  return self;
}

uint64_t method lookup function for CKSyncEngine(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CKSyncEngine);
}

uint64_t dispatch thunk of CKSyncEngine.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

void *sub_18AF530B4(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

uint64_t sub_18AF5318C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_18AF53224(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (uint64_t)sub_18AF53398(0, *(void *)(v2 + 16) + 1, 1, v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = (uint64_t)sub_18AF53398((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_18AF53224(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v2 = String.UTF8View._foreignCount()();
    if (v2) {
      goto LABEL_6;
    }
    return MEMORY[0x1E4FBC860];
  }
  if ((a2 & 0x2000000000000000) != 0) {
    Swift::Int v2 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return MEMORY[0x1E4FBC860];
  }
LABEL_6:
  unint64_t v3 = sub_18AF668C0(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return (uint64_t)v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_18AF53398(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_18AF161EC(&qword_1E91255F8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_18AF53548(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_18AF53470(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_18AF53470(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

char *sub_18AF53548(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

uint64_t sub_18AF535D8(uint64_t a1, uint64_t a2)
{
  return a2;
}

void (*CKDiscoverUserIdentitiesOperation.discoverUserIdentitiesResultBlock.getter())(void *a1, char a2)
{
  uint64_t result = (void (*)(void *, char))objc_msgSend(v0, sel_discoverUserIdentitiesCompletionBlock);
  if (result)
  {
    Swift::Int v2 = result;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = sub_18AF20008;
    *(void *)(v4 + 24) = v3;
    return sub_18AF539B8;
  }
  return result;
}

uint64_t sub_18AF536D4@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t result = (uint64_t)CKDiscoverUserIdentitiesOperation.discoverUserIdentitiesResultBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    unint64_t v6 = sub_18AF53C04;
  }
  else
  {
    unint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

id sub_18AF53744(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AF53BC0;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18AF42F30(v1);
  return CKDiscoverUserIdentitiesOperation.discoverUserIdentitiesResultBlock.setter((uint64_t)v4, v3);
}

id CKDiscoverUserIdentitiesOperation.discoverUserIdentitiesResultBlock.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    v9[4] = sub_18AF53A80;
    v9[5] = v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    void v9[2] = sub_18AF53A88;
    v9[3] = &unk_1ED7F0E60;
    int64_t v7 = _Block_copy(v9);
    swift_retain();
    swift_release();
    objc_msgSend(v3, sel_setDiscoverUserIdentitiesCompletionBlock_, v7);
    _Block_release(v7);
    return (id)sub_18AF1E758(a1);
  }
  else
  {
    return objc_msgSend(v2, sel_setDiscoverUserIdentitiesCompletionBlock_, 0);
  }
}

uint64_t sub_18AF53908()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_18AF53940(void *a1, char a2, void (*a3)(void *))
{
  if (a2)
  {
    id v5 = a1;
    a3(a1);
    sub_18AF53C0C(a1, 1);
  }
  else
  {
    a3(0);
  }
}

void sub_18AF539B8(void *a1, char a2)
{
  sub_18AF53940(a1, a2 & 1, *(void (**)(void *))(v2 + 16));
}

void sub_18AF539C4(void *a1, void (*a2)(void *, uint64_t))
{
  if (!a1) {
    goto LABEL_4;
  }
  swift_getErrorValue();
  id v4 = a1;
  if (Error.ckIsPartialError.getter())
  {

LABEL_4:
    a2(0, 0);
    return;
  }
  id v5 = a1;
  a2(a1, 1);
}

void sub_18AF53A80(void *a1)
{
  sub_18AF539C4(a1, *(void (**)(void *, uint64_t))(v1 + 16));
}

void sub_18AF53A88(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

id (*CKDiscoverUserIdentitiesOperation.discoverUserIdentitiesResultBlock.modify(void (**a1)(void *a1, char a2)))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CKDiscoverUserIdentitiesOperation.discoverUserIdentitiesResultBlock.getter();
  a1[1] = v3;
  return sub_18AF53B3C;
}

id sub_18AF53B3C(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if ((a2 & 1) == 0) {
    return CKDiscoverUserIdentitiesOperation.discoverUserIdentitiesResultBlock.setter(*a1, v3);
  }
  sub_18AF42F30(*a1);
  CKDiscoverUserIdentitiesOperation.discoverUserIdentitiesResultBlock.setter(v2, v3);

  return (id)sub_18AF1E758(v2);
}

uint64_t sub_18AF53BC0(uint64_t a1, char a2)
{
  return sub_18AFC62E8(a1, a2 & 1, *(uint64_t (**)(uint64_t *))(v2 + 16));
}

uint64_t sub_18AF53BCC()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_18AF53C04(uint64_t a1)
{
  return sub_18AFC62B0(a1, *(uint64_t (**)(void, void))(v1 + 16));
}

void sub_18AF53C0C(id a1, char a2)
{
  if (a2) {
}
  }

void (*CKShareAccessRequestOperation.perShareAccessRequestResultBlock.getter())(uint64_t a1, void *a2, char a3)
{
  uint64_t result = (void (*)(uint64_t, void *, char))objc_msgSend(v0, sel_perShareAccessRequestCompletionBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = sub_18AF53FA8;
    *(void *)(v4 + 24) = v3;
    return sub_18AF54038;
  }
  return result;
}

uint64_t sub_18AF53CBC@<X0>(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  uint64_t result = (uint64_t)CKShareAccessRequestOperation.perShareAccessRequestResultBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_18AF54760;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t, uint64_t))result;
  return result;
}

id sub_18AF53D2C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AF54720;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18AF42F30(v1);
  return CKShareAccessRequestOperation.perShareAccessRequestResultBlock.setter((uint64_t)v4, v3);
}

id CKShareAccessRequestOperation.perShareAccessRequestResultBlock.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    uint64_t v6 = sub_18AF19EAC();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    v9[4] = sub_18AF54118;
    v9[5] = v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    void v9[2] = sub_18AF54120;
    v9[3] = &unk_1ED7F0E88;
    int64_t v7 = _Block_copy(v9);
    swift_retain();
    swift_release();
    objc_msgSend(v3, sel_setPerShareAccessRequestCompletionBlock_, v7);
    _Block_release(v7);
    return (id)sub_18AF1E758(a1);
  }
  else
  {
    return objc_msgSend(v2, sel_setPerShareAccessRequestCompletionBlock_, 0);
  }
}

void sub_18AF53EE8(uint64_t a1@<X1>, uint64_t a2@<X2>, NSURL *a3@<X8>)
{
  URL._bridgeToObjectiveC()(a3);
  uint64_t v6 = v5;
  if (a1) {
    uint64_t v7 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v7 = 0;
  }
  id v8 = (id)v7;
  (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v6);
}

uint64_t sub_18AF53F70()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_18AF53FA8(uint64_t a1@<X1>, NSURL *a2@<X8>)
{
  sub_18AF53EE8(a1, *(void *)(v2 + 16), a2);
}

void sub_18AF53FB0(uint64_t a1, id a2, char a3, void (*a4)(uint64_t, id))
{
  if (a3)
  {
    id v7 = a2;
    a4(a1, a2);
    sub_18AF53C0C(a2, 1);
  }
  else
  {
    a4(a1, 0);
  }
}

void sub_18AF54038(uint64_t a1, void *a2, char a3)
{
  sub_18AF53FB0(a1, a2, a3 & 1, *(void (**)(uint64_t, id))(v3 + 16));
}

void sub_18AF54044(uint64_t a1, void *a2, void (*a3)(uint64_t, void *, uint64_t))
{
  if (!a2) {
    goto LABEL_4;
  }
  swift_getErrorValue();
  id v6 = a2;
  if (Error.ckIsPartialError.getter())
  {

LABEL_4:
    a3(a1, 0, 0);
    return;
  }
  id v7 = a2;
  a3(a1, a2, 1);
}

void sub_18AF54118(uint64_t a1, void *a2)
{
  sub_18AF54044(a1, a2, *(void (**)(uint64_t, void *, uint64_t))(v2 + 16));
}

uint64_t sub_18AF54120(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  id v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void (**)(char *, void *))(a1 + 32);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  id v10 = a3;
  v9(v8, a3);
  swift_release();

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t (*CKShareAccessRequestOperation.perShareAccessRequestResultBlock.modify(void (**a1)(uint64_t a1, void *a2, char a3)))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CKShareAccessRequestOperation.perShareAccessRequestResultBlock.getter();
  a1[1] = v3;
  return sub_18AF5427C;
}

uint64_t sub_18AF5427C(uint64_t *a1, char a2)
{
  return sub_18AF5466C(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKShareAccessRequestOperation.perShareAccessRequestResultBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF42F30, (uint64_t (*)(uint64_t, uint64_t))sub_18AF1E758);
}

void (*CKShareAccessRequestOperation.shareAccessRequestResultBlock.getter())(void *a1, char a2)
{
  uint64_t result = (void (*)(void *, char))objc_msgSend(v0, sel_shareAccessRequestCompletionBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = sub_18AF20008;
    *(void *)(v4 + 24) = v3;
    return sub_18AF539B8;
  }
  return result;
}

uint64_t sub_18AF54354@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t result = (uint64_t)CKShareAccessRequestOperation.shareAccessRequestResultBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_18AF53C04;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

id sub_18AF543C4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AF53BC0;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18AF42F30(v1);
  return CKShareAccessRequestOperation.shareAccessRequestResultBlock.setter((uint64_t)v4, v3);
}

id CKShareAccessRequestOperation.shareAccessRequestResultBlock.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    uint64_t v6 = sub_18AF19EAC();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    v9[4] = sub_18AF53A80;
    v9[5] = v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    void v9[2] = sub_18AF53A88;
    v9[3] = &unk_1ED7F1400;
    uint64_t v7 = _Block_copy(v9);
    sub_18AF42F30(a1);
    swift_retain();
    swift_release();
    objc_msgSend(v3, sel_setShareAccessRequestCompletionBlock_, v7);
    _Block_release(v7);
    objc_msgSend(v3, sel_setCanDropItemResultsEarly_, 1);
    sub_18AF1E758(a1);
    return (id)sub_18AF1E758(a1);
  }
  else
  {
    return objc_msgSend(v2, sel_setShareAccessRequestCompletionBlock_, 0);
  }
}

uint64_t sub_18AF545AC()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t (*CKShareAccessRequestOperation.shareAccessRequestResultBlock.modify(void (**a1)(void *a1, char a2)))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CKShareAccessRequestOperation.shareAccessRequestResultBlock.getter();
  a1[1] = v3;
  return sub_18AF5462C;
}

uint64_t sub_18AF5462C(uint64_t *a1, char a2)
{
  return sub_18AF5466C(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKShareAccessRequestOperation.shareAccessRequestResultBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF42F30, (uint64_t (*)(uint64_t, uint64_t))sub_18AF1E758);
}

uint64_t sub_18AF5466C(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if ((a2 & 1) == 0) {
    return a3(*a1, v7);
  }
  a4(*a1, v7);
  a3(v6, v7);

  return a5(v6, v7);
}

uint64_t sub_18AF54720(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t *))(v3 + 16);
  uint64_t v6 = a2;
  char v7 = a3 & 1;
  return v4(a1, &v6);
}

uint64_t sub_18AF54760(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(v2 + 16))(a1, *(void *)a2, *(unsigned __int8 *)(a2 + 8));
}

id sub_18AF547BC()
{
  *(void *)(v0 + OBJC_IVAR___CKShareBlockedIdentity__wrapped) = 0;
  v2.super_class = (Class)CKShareBlockedIdentity;
  return objc_msgSendSuper2(&v2, sel_init);
}

void __swiftcall CKShareBlockedIdentity.init(userIdentity:)(CKShareBlockedIdentity *__return_ptr retstr, CKUserIdentity *userIdentity)
{
}

char *CKShareBlockedIdentity.init(userIdentity:)(uint64_t a1)
{
  id v3 = objc_msgSend(v1, sel_init);
  uint64_t v4 = (objc_class *)type metadata accessor for CKShare.BlockedIdentity();
  uint64_t v5 = (char *)objc_allocWithZone(v4);
  *(void *)&v5[OBJC_IVAR____TtCE8CloudKitCSo7CKShare15BlockedIdentity_userIdentity] = a1;
  v10.receiver = v5;
  v10.super_class = v4;
  uint64_t v6 = (char *)v3;
  id v7 = objc_msgSendSuper2(&v10, sel_init);
  id v8 = *(void **)&v6[OBJC_IVAR___CKShareBlockedIdentity__wrapped];
  *(void *)&v6[OBJC_IVAR___CKShareBlockedIdentity__wrapped] = v7;

  return v6;
}

id CKShareBlockedIdentity.userIdentity.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___CKShareBlockedIdentity__wrapped);
  if (v1) {
    return *(id *)(v1 + OBJC_IVAR____TtCE8CloudKitCSo7CKShare15BlockedIdentity_userIdentity);
  }
  __break(1u);
  return result;
}

uint64_t static CKShareBlockedIdentity.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall CKShareBlockedIdentity.encode(with:)(NSCoder with)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR___CKShareBlockedIdentity__wrapped);
  if (v2)
  {
    id v4 = *(id *)(v2 + OBJC_IVAR____TtCE8CloudKitCSo7CKShare15BlockedIdentity_userIdentity);
    uint64_t v5 = NSStringFromSelector(sel_userIdentity);
    if (!v5)
    {
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v7 = (NSString *)MEMORY[0x18C128F60](v6);
      swift_bridgeObjectRelease();
      uint64_t v5 = v7;
    }
    id v8 = v5;
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v4);
  }
  else
  {
    __break(1u);
  }
}

void __swiftcall CKShareBlockedIdentity.init(coder:)(CKShareBlockedIdentity_optional *__return_ptr retstr, NSCoder coder)
{
}

id CKShareBlockedIdentity.init(coder:)(void *a1)
{
  uint64_t v3 = OBJC_IVAR___CKShareBlockedIdentity__wrapped;
  *(void *)&v1[OBJC_IVAR___CKShareBlockedIdentity__wrapped] = 0;
  id v4 = v1;
  uint64_t v5 = NSStringFromSelector(sel_userIdentity);
  if (!v5)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = (NSString *)MEMORY[0x18C128F60](v6);
    swift_bridgeObjectRelease();
  }
  id v7 = objc_msgSend(a1, sel_decodeObjectForKey_, v5);

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v19, 0, sizeof(v19));
  }
  sub_18AF5515C((uint64_t)v19, (uint64_t)v20);
  if (!v21)
  {

    sub_18AF551C4((uint64_t)v20);
LABEL_11:
    uint64_t v13 = *(void **)&v1[v3];

    type metadata accessor for CKShareBlockedIdentity(v14);
    swift_deallocPartialClassInstance();
    return 0;
  }
  sub_18AF34EA0(0, (unint64_t *)&unk_1E9125A70);
  if ((swift_dynamicCast() & 1) == 0)
  {

    goto LABEL_11;
  }
  id v8 = (objc_class *)type metadata accessor for CKShare.BlockedIdentity();
  int64_t v9 = (char *)objc_allocWithZone(v8);
  *(void *)&v9[OBJC_IVAR____TtCE8CloudKitCSo7CKShare15BlockedIdentity_userIdentity] = v18;
  v17.receiver = v9;
  v17.super_class = v8;
  id v10 = objc_msgSendSuper2(&v17, sel_init);
  size_t v11 = *(void **)&v1[v3];
  *(void *)&v1[v3] = v10;

  v16.receiver = v4;
  v16.super_class = (Class)CKShareBlockedIdentity;
  id v12 = objc_msgSendSuper2(&v16, sel_init);

  return v12;
}

char *CKShareBlockedIdentity.copy(with:)@<X0>(char *result@<X0>, char **a2@<X8>)
{
  id v4 = *(void **)(v2 + OBJC_IVAR___CKShareBlockedIdentity__wrapped);
  if (v4)
  {
    uint64_t v5 = type metadata accessor for CKShareBlockedIdentity((uint64_t)result);
    id result = CKShareBlockedIdentity.init(_:)((uint64_t)v4);
    a2[3] = (char *)v5;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *CKShareBlockedIdentity.init(_:)(uint64_t a1)
{
  uint64_t v2 = (char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  uint64_t v3 = *(void **)&v2[OBJC_IVAR___CKShareBlockedIdentity__wrapped];
  *(void *)&v2[OBJC_IVAR___CKShareBlockedIdentity__wrapped] = a1;

  return v2;
}

uint64_t CKShareBlockedIdentity.isEqual(_:)(uint64_t a1)
{
  uint64_t v2 = sub_18AF55238(a1, (uint64_t)v12);
  if (!v13)
  {
    sub_18AF551C4((uint64_t)v12);
    goto LABEL_7;
  }
  type metadata accessor for CKShareBlockedIdentity(v2);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_7:
    char v8 = 0;
    return v8 & 1;
  }
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR___CKShareBlockedIdentity__wrapped);
  id v4 = *(void **)&v11[OBJC_IVAR___CKShareBlockedIdentity__wrapped];
  if (!v3)
  {
    id v10 = v4;

    if (!v4)
    {
      char v8 = 1;
      return v8 & 1;
    }

    goto LABEL_7;
  }
  if (!v4)
  {

    goto LABEL_7;
  }
  type metadata accessor for CKShare.BlockedIdentity();
  id v5 = v3;
  id v6 = v4;
  id v7 = v5;
  char v8 = static NSObject.== infix(_:_:)();

  return v8 & 1;
}

uint64_t CKShareBlockedIdentity.description.getter()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR___CKShareBlockedIdentity__wrapped];
  if (v1)
  {
    id v2 = v1;
    id v3 = objc_msgSendSuper2(&v16, sel_description);
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    uint64_t v18 = v4;
    uint64_t v19 = v6;
    v7._uint64_t countAndFlagsBits = 8250;
    v7._object = (void *)0xE200000000000000;
    String.append(_:)(v7);
    type metadata accessor for CKShare.BlockedIdentity();
    id v8 = v2;
    v9._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
    String.append(_:)(v9);

    swift_bridgeObjectRelease();
  }
  else
  {
    v17.receiver = v0;
    v17.super_class = (Class)CKShareBlockedIdentity;
    id v10 = objc_msgSendSuper2(&v17, sel_description);
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    uint64_t v18 = v11;
    uint64_t v19 = v13;
    v14._uint64_t countAndFlagsBits = 0x6C696E203ALL;
    v14._object = (void *)0xE500000000000000;
    String.append(_:)(v14);
  }
  return v18;
}

void *CKShareBlockedIdentity.wrapped.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___CKShareBlockedIdentity__wrapped);
  id v2 = v1;
  return v1;
}

uint64_t sub_18AF5515C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18AF161EC(&qword_1E91250B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_18AF551C4(uint64_t a1)
{
  uint64_t v2 = sub_18AF161EC(&qword_1E91250B8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for CKShareBlockedIdentity(uint64_t a1)
{
  return sub_18AF34EA0(a1, (unint64_t *)&unk_1E9125BA0);
}

uint64_t sub_18AF55238(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18AF161EC(&qword_1E91250B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void NSItemProvider.registerCKShare(container:allowedSharingOptions:preparationHandler:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v8 = objc_msgSend(a1, sel_containerID);
  int v12 = CKSharingContainerSupportsAdminParticipants(v8, v9, v10, v11);

  if (v12) {
    objc_msgSend(a2, sel_setSupportAllowingAddedParticipantsToInviteOthers_, 1);
  }
  id v13 = CKContainerSetupInfoWithBundleIDOverridesForOOPUIFromContainer(a1);
  sub_18AF34EA0(0, &qword_1E9125BB0);
  swift_getObjCClassFromMetadata();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  id v30 = sub_18AF55F50;
  uint64_t v31 = (void *)v14;
  aBlocuint64_t k = MEMORY[0x1E4F143A8];
  uint64_t v27 = 1107296256;
  unsigned __int8 v28 = sub_18AF555C8;
  uint64_t v29 = &unk_1ED7F0EB0;
  uint64_t v15 = _Block_copy(&aBlock);
  id v16 = a2;
  swift_release();
  sub_18AF388D4();
  _Block_release(v15);
  sub_18AF34EA0(0, &qword_1E9125BB8);
  swift_getObjCClassFromMetadata();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v13;
  id v30 = sub_18AF556D8;
  uint64_t v31 = (void *)v17;
  aBlocuint64_t k = MEMORY[0x1E4F143A8];
  uint64_t v27 = 1107296256;
  unsigned __int8 v28 = sub_18AF555C8;
  uint64_t v29 = &unk_1ED7F1608;
  uint64_t v18 = _Block_copy(&aBlock);
  id v19 = v13;
  swift_release();
  sub_18AF388D4();
  _Block_release(v18);
  sub_18AF34EA0(0, (unint64_t *)&unk_1E9125BC0);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v21 = (void *)swift_allocObject();
  void v21[2] = a3;
  v21[3] = a4;
  v21[4] = v19;
  v21[5] = v16;
  id v30 = sub_18AF558D4;
  uint64_t v31 = v21;
  aBlocuint64_t k = MEMORY[0x1E4F143A8];
  uint64_t v27 = 1107296256;
  unsigned __int8 v28 = sub_18AF555C8;
  uint64_t v29 = &unk_1ED7F12E8;
  uint64_t v22 = _Block_copy(&aBlock);
  id v23 = v16;
  id v24 = v19;
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_registerObjectOfClass_visibility_loadHandler_, ObjCClassFromMetadata, 0, v22);
  _Block_release(v22);
}

uint64_t sub_18AF55590()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

id sub_18AF555C8(uint64_t a1, void *aBlock)
{
  uint64_t v2 = *(uint64_t (**)(void, uint64_t))(a1 + 32);
  id v3 = _Block_copy(aBlock);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  swift_retain();
  uint64_t v5 = (void *)v2(sub_18AF55F48, v4);
  swift_release();
  swift_release();

  return v5;
}

void sub_18AF55668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

uint64_t sub_18AF556D8(void (*a1)(void, void))
{
  a1(*(void *)(v1 + 16), 0);
  return 0;
}

uint64_t sub_18AF55714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v12 = sub_18AF161EC(&qword_1E9125478);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a1;
  *(void *)(v15 + 24) = a2;
  sub_18AF161EC(&qword_1E9125C30);
  swift_allocObject();
  swift_retain();
  uint64_t v16 = sub_18AF6A4E0((uint64_t)sub_18AF55CDC, v15);
  uint64_t v17 = type metadata accessor for TaskPriority();
  sub_18AF43708((uint64_t)v14, 1, 1, v17);
  uint64_t v18 = (void *)swift_allocObject();
  _OWORD v18[2] = 0;
  v18[3] = 0;
  void v18[4] = v16;
  v18[5] = a3;
  v18[6] = a4;
  v18[7] = a5;
  v18[8] = a6;
  swift_retain();
  id v19 = a5;
  id v20 = a6;
  sub_18AF42DB4((uint64_t)v14, (uint64_t)&unk_1E9125C40, (uint64_t)v18);
  swift_release();
  return 0;
}

uint64_t sub_18AF5588C()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_18AF558D4(uint64_t a1, uint64_t a2)
{
  return sub_18AF55714(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), *(void **)(v2 + 40));
}

uint64_t sub_18AF558E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  id v8[2] = a4;
  return MEMORY[0x1F4188298](sub_18AF55908, 0, 0);
}

uint64_t sub_18AF55908()
{
  uint64_t v1 = (int *)v0[3];
  v0[7] = sub_18AF6A42C();
  v0[8] = v2;
  uint64_t v5 = (uint64_t (*)(void))((char *)v1 + *v1);
  id v3 = (void *)swift_task_alloc();
  v0[9] = v3;
  *id v3 = v0;
  v3[1] = sub_18AF559E4;
  return v5();
}

uint64_t sub_18AF559E4(uint64_t a1)
{
  sub_18AF184F0();
  uint64_t v4 = v3;
  *(void *)(v3 + 80) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_18AF55BD0;
  }
  else
  {
    *(void *)(v4 + 88) = a1;
    uint64_t v5 = sub_18AF55AE8;
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

uint64_t sub_18AF55AE8()
{
  uint64_t v11 = v0;
  uint64_t v1 = (void *)v0[11];
  uint64_t v2 = (void (*)(void **, uint64_t *))v0[7];
  uint64_t v3 = (void *)v0[5];
  uint64_t v4 = (void *)v0[6];
  sub_18AF34EA0(0, (unint64_t *)&unk_1E9125BC0);
  id v5 = v1;
  uint64_t v6 = (void *)sub_18AF8F660(v5, v3, v4);
  Swift::String v9 = v6;
  uint64_t v10 = 0;
  v2(&v9, &v10);

  swift_release();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_18AF55BD0()
{
  Swift::String v9 = v0;
  uint64_t v1 = (void *)v0[10];
  uint64_t v2 = (void (*)(uint64_t *, id *))v0[7];
  uint64_t v3 = (void *)_convertErrorToNSError(_:)();
  id v4 = CKXPCSuitableError(v3);

  uint64_t v7 = 0;
  id v8 = v4;
  v2(&v7, &v8);

  swift_release();
  id v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

Swift::Void __swiftcall NSItemProvider.registerCKShare(_:container:allowedSharingOptions:)(CKShare *_, CKContainer *container, CKAllowedSharingOptions *allowedSharingOptions)
{
  objc_msgSend(v3, sel_registerCKShare_container_allowedSharingOptions_, _, container, allowedSharingOptions);
}

uint64_t sub_18AF55CA4()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_18AF55CDC(void *a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(v2 + 16))(*a1, *a2);
}

uint64_t sub_18AF55D0C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t sub_18AF55D64(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_18AF55E40;
  return sub_18AF558E0(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_18AF55E40()
{
  sub_18AF184F0();
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_18AF55F10()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_18AF55F48(uint64_t a1, uint64_t a2)
{
  sub_18AF55668(a1, a2, *(void *)(v2 + 16));
}

uint64_t static CKRecordZoneID.defaultZoneName.getter()
{
  if (qword_1E9125678 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1E9125C58;
  swift_bridgeObjectRetain();
  return v0;
}

void __swiftcall CKRecordZoneID.init(zoneName:ownerName:)(CKRecordZoneID *__return_ptr retstr, Swift::String zoneName, Swift::String ownerName)
{
  object = ownerName._object;
  uint64_t countAndFlagsBits = ownerName._countAndFlagsBits;
  uint64_t v5 = zoneName._object;
  uint64_t v6 = zoneName._countAndFlagsBits;
  id v7 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v8 = (void *)MEMORY[0x18C128F60](v6, v5);
  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)MEMORY[0x18C128F60](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  objc_msgSend(v7, sel_initWithZoneName_ownerName_, v8, v9);
}

void sub_18AF56074()
{
  sub_18AF56248();
  if (qword_1E9125678 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1E9125C58;
  uint64_t v1 = (void *)unk_1E9125C60;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = v0;
  v5._object = v1;
  v6._uint64_t countAndFlagsBits = v2;
  v6._object = v4;
  CKRecordZoneID.init(zoneName:ownerName:)(v7, v5, v6);
  qword_1E9125C50 = v8;
}

id static CKRecordZoneID.default.getter()
{
  if (qword_1E9125670 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1E9125C50;

  return v0;
}

uint64_t sub_18AF56180()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1E9125C58 = result;
  unk_1E9125C60 = v1;
  return result;
}

uint64_t sub_18AF561B0()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1E9125C68 = result;
  unk_1E9125C70 = v1;
  return result;
}

uint64_t CKRecordZoneDefaultName.getter()
{
  if (qword_1E9125680 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1E9125C68;
  swift_bridgeObjectRetain();
  return v0;
}

unint64_t sub_18AF56248()
{
  unint64_t result = qword_1EB279460;
  if (!qword_1EB279460)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB279460);
  }
  return result;
}

uint64_t sub_18AF56288()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1E9125C78 = result;
  unk_1E9125C80 = v1;
  return result;
}

uint64_t static CKShare.SystemFieldKey.title.getter()
{
  return sub_18AF56390();
}

uint64_t sub_18AF562E0()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1E9125C88 = result;
  unk_1E9125C90 = v1;
  return result;
}

uint64_t static CKShare.SystemFieldKey.thumbnailImageData.getter()
{
  return sub_18AF56390();
}

uint64_t sub_18AF56338()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1E9125C98 = result;
  unk_1E9125CA0 = v1;
  return result;
}

uint64_t static CKShare.SystemFieldKey.shareType.getter()
{
  return sub_18AF56390();
}

uint64_t sub_18AF56390()
{
  sub_18AF39388();
  if (!v1) {
    swift_once();
  }
  uint64_t v2 = *v0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_18AF563D8()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1E9125CA8 = result;
  unk_1E9125CB0 = v1;
  return result;
}

uint64_t CKRecordTypeShare.getter()
{
  return sub_18AF56390();
}

uint64_t sub_18AF56430()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1E9125CB8 = result;
  unk_1E9125CC0 = v1;
  return result;
}

uint64_t CKShareTitleKey.getter()
{
  return sub_18AF56390();
}

uint64_t sub_18AF56488()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1E9125CC8 = result;
  unk_1E9125CD0 = v1;
  return result;
}

uint64_t CKShareThumbnailImageDataKey.getter()
{
  return sub_18AF56390();
}

uint64_t sub_18AF564E0()
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  qword_1E9125CD8 = result;
  unk_1E9125CE0 = v1;
  return result;
}

uint64_t CKShareTypeKey.getter()
{
  return sub_18AF56390();
}

ValueMetadata *type metadata accessor for CKShare.SystemFieldKey()
{
  return &type metadata for CKShare.SystemFieldKey;
}

id sub_18AF56548()
{
  uint64_t v1 = &v0[OBJC_IVAR___CKDeviceCapability__wrapped];
  *(_OWORD *)uint64_t v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((void *)v1 + 4) = 0;
  sub_18AF5A618(0, 0, 0);
  v3.receiver = v0;
  v3.super_class = (Class)CKDeviceCapability;
  return objc_msgSendSuper2(&v3, sel_init);
}

id CKDeviceCapability.init(level:name:value:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v10 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v11 = (void *)MEMORY[0x18C128F60](a2, a3);
  swift_bridgeObjectRelease();
  MEMORY[0x18C128F60](a4, a5);
  sub_18AF22CF0();
  id v12 = objc_msgSend(v10, sel_initWithLevel_name_value_, a1, v11, a4);

  return v12;
}

void CKDeviceCapability.init(level:name:value:)()
{
  sub_18AF33850();
  int v2 = v1;
  id v3 = objc_msgSend(v0, sel_init);
  unint64_t v4 = v2 - 1;
  if (v4 >= 3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    Swift::String v5 = (char *)v3;
    uint64_t v6 = sub_18AF19F70();
    unint64_t v8 = v7;
    uint64_t v9 = sub_18AF19F70();
    unint64_t v11 = v10;
    unint64_t v12 = 128;
    while (1)
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = sub_18AF5A52C(v12, v6, v8);
      uint64_t v14 = MEMORY[0x18C129130](v13);
      if (v15) {
        break;
      }
      if (!--v12)
      {
        swift_bridgeObjectRelease();
        uint64_t v16 = 0;
        unint64_t v17 = 0xE000000000000000;
        goto LABEL_8;
      }
    }
    uint64_t v16 = v14;
    unint64_t v17 = v15;
    swift_bridgeObjectRelease();
LABEL_8:
    unint64_t v18 = 128;
    while (1)
    {
      swift_bridgeObjectRetain();
      uint64_t v19 = sub_18AF5A52C(v18, v9, v11);
      uint64_t v20 = MEMORY[0x18C129130](v19);
      if (v21) {
        break;
      }
      if (!--v18)
      {
        swift_bridgeObjectRelease();
        uint64_t v22 = 0;
        unint64_t v23 = 0xE000000000000000;
        goto LABEL_13;
      }
    }
    uint64_t v22 = v20;
    unint64_t v23 = v21;
    swift_bridgeObjectRelease();
LABEL_13:
    id v24 = (unint64_t *)&v5[OBJC_IVAR___CKDeviceCapability__wrapped];
    uint64_t v25 = *(void *)&v5[OBJC_IVAR___CKDeviceCapability__wrapped];
    uint64_t v26 = *(void *)&v5[OBJC_IVAR___CKDeviceCapability__wrapped + 8];
    uint64_t v27 = *(void *)&v5[OBJC_IVAR___CKDeviceCapability__wrapped + 16];
    *id v24 = v4;
    v24[1] = v16;
    v24[2] = v17;
    v24[3] = v22;
    v24[4] = v23;
    sub_18AF5A618(v25, v26, v27);
  }
  sub_18AF16CC4();
}

uint64_t CKDeviceCapability.name.getter()
{
  uint64_t result = *(void *)(v0 + OBJC_IVAR___CKDeviceCapability__wrapped + 16);
  if (result)
  {
    swift_bridgeObjectRetain();
    return String.init<A>(_:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  int v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CKDeviceCapability.value.getter()
{
  if (*(void *)(v0 + OBJC_IVAR___CKDeviceCapability__wrapped + 16))
  {
    swift_bridgeObjectRetain();
    return String.init<A>(_:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  int v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CKDeviceCapability.level.getter()
{
  if (*(void *)(v0 + OBJC_IVAR___CKDeviceCapability__wrapped + 16)) {
    return *(unsigned __int8 *)(v0 + OBJC_IVAR___CKDeviceCapability__wrapped) + 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_18AF569A8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C6576656CLL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 1701667182 && a2 == 0xE400000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_18AF56AD8()
{
  return 3;
}

uint64_t sub_18AF56AE0(char a1)
{
  if (!a1) {
    return 0x6C6576656CLL;
  }
  if (a1 == 1) {
    return 1701667182;
  }
  return 0x65756C6176;
}

uint64_t sub_18AF56B28(void *a1)
{
  uint64_t v3 = sub_18AF161EC(&qword_1E9124C38);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  BOOL v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_18AF25FCC(a1, a1[3]);
  sub_18AF5B4EC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_18AF56CB0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_18AF161EC(&qword_1E9124C88);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_18AF25FCC(a1, a1[3]);
  sub_18AF5B4EC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_18AF40A30((uint64_t)a1);
  }
  char v24 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  char v23 = 1;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  uint64_t v21 = v10;
  char v22 = 2;
  swift_bridgeObjectRetain();
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v15 = v14;
  uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v20 = v13;
  v16(v8, v5);
  swift_bridgeObjectRetain();
  sub_18AF40A30((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v18 = v21;
  *a2 = v9;
  a2[1] = v18;
  uint64_t v19 = v20;
  a2[2] = v12;
  a2[3] = v19;
  a2[4] = v15;
  return result;
}

uint64_t sub_18AF56EF0()
{
  return sub_18AF56AE0(*v0);
}

uint64_t sub_18AF56EF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_18AF569A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_18AF56F20@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_18AF56AD8();
  *a1 = result;
  return result;
}

uint64_t sub_18AF56F48(uint64_t a1)
{
  unint64_t v2 = sub_18AF5B4EC();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_18AF56F84(uint64_t a1)
{
  unint64_t v2 = sub_18AF5B4EC();

  return MEMORY[0x1F41862B0](a1, v2);
}

double sub_18AF56FC0@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_18AF56CB0(a1, (uint64_t *)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_18AF57008(void *a1)
{
  return sub_18AF56B28(a1);
}

Swift::String __swiftcall CKDeviceCapability.sqliteRepresentation()()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  uint64_t v2 = sub_18AF19284(v1);
  MEMORY[0x1F4188790](v2);
  sub_18AF2A53C();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  uint64_t v3 = JSONEncoder.init()();
  if (*(void *)(v0 + OBJC_IVAR___CKDeviceCapability__wrapped + 16))
  {
    sub_18AF5A65C();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v5 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static String.Encoding.utf8.getter();
    String.init(data:encoding:)();
    sub_18AF5AF68(v5, v7);
    swift_release();
    uint64_t v3 = sub_18AF38424();
  }
  else
  {
    __break(1u);
  }
  result._object = v4;
  result._uint64_t countAndFlagsBits = v3;
  return result;
}

uint64_t static CKDeviceCapability.fromSqliteRepresentation(_:)()
{
  type metadata accessor for String.Encoding();
  sub_18AF3939C();
  uint64_t v2 = v1;
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  uint64_t v6 = String.data(using:allowLossyConversion:)();
  unint64_t v8 = v7;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v0);
  uint64_t v9 = 0;
  if (v8 >> 60 != 15)
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    sub_18AF5AFC0();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    object = v33.name._object;
    uint64_t v11 = v33.value._object;
    if ((unint64_t)(*(void *)&v33.level - 1) >= 3)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_18AF5B00C(v6, v8);
      return 0;
    }
    else
    {
      uint64_t v32 = *(void *)&v33.level - 1;
      uint64_t countAndFlagsBits = v33.name._countAndFlagsBits;
      uint64_t v13 = v33.value._countAndFlagsBits;
      unint64_t v14 = 128;
      while (1)
      {
        swift_bridgeObjectRetain();
        uint64_t v15 = sub_18AF5A52C(v14, countAndFlagsBits, (unint64_t)object);
        uint64_t v16 = MEMORY[0x18C129130](v15);
        if (v17) {
          break;
        }
        if (!--v14)
        {
          swift_bridgeObjectRelease();
          uint64_t v18 = 0;
          uint64_t v19 = (void *)0xE000000000000000;
          goto LABEL_10;
        }
      }
      uint64_t v18 = v16;
      uint64_t v19 = v17;
      swift_bridgeObjectRelease();
LABEL_10:
      unint64_t v21 = 128;
      while (1)
      {
        swift_bridgeObjectRetain();
        uint64_t v22 = sub_18AF5A52C(v21, v13, (unint64_t)v11);
        uint64_t v23 = MEMORY[0x18C129130](v22);
        if (v24) {
          break;
        }
        if (!--v21)
        {
          uint64_t v25 = swift_bridgeObjectRelease();
          uint64_t v26 = 0;
          uint64_t v27 = (void *)0xE000000000000000;
          goto LABEL_15;
        }
      }
      uint64_t v26 = v23;
      uint64_t v27 = v24;
      uint64_t v25 = swift_bridgeObjectRelease();
LABEL_15:
      CloudKit::CKDeviceCapability::Level v28 = (char)v32;
      type metadata accessor for CKDeviceCapability(v25);
      v33.level = v28;
      v33.name._uint64_t countAndFlagsBits = v18;
      v33.name._object = v19;
      v33.value._uint64_t countAndFlagsBits = v26;
      v33.value._object = v27;
      CKDeviceCapability.init(_:)(v29, &v33);
      uint64_t v9 = v30;
      swift_release();
      sub_18AF5B00C(v6, v8);
    }
  }
  return v9;
}

void __swiftcall CKDeviceCapability.init(_:)(CKDeviceCapability *__return_ptr retstr, CloudKit::CKDeviceCapability *a2)
{
  uint64_t level = a2->level;
  uint64_t countAndFlagsBits = a2->name._countAndFlagsBits;
  object = a2->name._object;
  uint64_t v5 = a2->value._countAndFlagsBits;
  uint64_t v6 = a2->value._object;
  unint64_t v7 = (uint64_t *)((char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init)
                 + OBJC_IVAR___CKDeviceCapability__wrapped);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  uint64_t v10 = v7[2];
  *unint64_t v7 = level;
  v7[1] = countAndFlagsBits;
  void v7[2] = (uint64_t)object;
  v7[3] = v5;
  v7[4] = (uint64_t)v6;
  sub_18AF5A618(v8, v9, v10);
}

void static CKDeviceCapability.sqliteRepresentations(_:)()
{
  sub_18AF33850();
  unint64_t v2 = v1;
  if (v1 >> 62)
  {
    sub_18AF34294();
    _CocoaArrayWrapper.endIndex.getter();
    sub_18AF22CF0();
  }
  else
  {
    uint64_t v0 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v0)
  {
LABEL_12:
    sub_18AF16CC4();
    return;
  }
  uint64_t v12 = MEMORY[0x1E4FBC860];
  sub_18AF26470();
  if ((v0 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = 0;
    do
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v4 = (id)MEMORY[0x18C1298C0](v3, v2);
      }
      else {
        id v4 = *(id *)(v2 + 8 * v3 + 32);
      }
      uint64_t v5 = v4;
      id v6 = objc_msgSend(v4, sel_sqliteRepresentation);
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v9 = v8;

      unint64_t v10 = *(void *)(v12 + 16);
      if (v10 >= *(void *)(v12 + 24) >> 1) {
        sub_18AF26470();
      }
      ++v3;
      *(void *)(v12 + 16) = v10 + 1;
      uint64_t v11 = v12 + 16 * v10;
      *(void *)(v11 + 32) = v7;
      *(void *)(v11 + 40) = v9;
    }
    while (v0 != v3);
    goto LABEL_12;
  }
  __break(1u);
}

uint64_t static CKDeviceCapability.fromSqliteRepresentations(_:)(uint64_t a1)
{
  uint64_t result = MEMORY[0x1E4FBC860];
  uint64_t v10 = MEMORY[0x1E4FBC860];
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    swift_bridgeObjectRetain();
    uint64_t v5 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v6 = *(v5 - 1);
      uint64_t v7 = *v5;
      swift_bridgeObjectRetain();
      uint64_t v8 = (void *)MEMORY[0x18C128F60](v6, v7);
      id v9 = objc_msgSend(ObjCClassFromMetadata, sel_fromSqliteRepresentation_, v8);
      swift_bridgeObjectRelease();

      if (v9)
      {
        MEMORY[0x18C129220]();
        if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v5 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v10;
  }
  return result;
}

#error "18AF579F8: call analysis failed (funcsize=165)"

uint64_t CKDeviceCapability.wrapped.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR___CKDeviceCapability__wrapped);
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR___CKDeviceCapability__wrapped + 8);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR___CKDeviceCapability__wrapped + 16);
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR___CKDeviceCapability__wrapped + 24);
  uint64_t v6 = *(void *)(v1 + OBJC_IVAR___CKDeviceCapability__wrapped + 32);
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  return sub_18AF5B1C8(v2, v3, v4);
}

void static CKDeviceCapability.isCapabilitySet(_:subsetOf:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 >> 62)
  {
    sub_18AF22D08();
    unint64_t v9 = a2;
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v9 = a2;
    uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v10)
  {
    uint64_t v52 = MEMORY[0x1E4FBC860];
    sub_18AF33FD8();
    if ((v10 & 0x8000000000000000) == 0)
    {
      while (1)
      {
        id v11 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x18C1298C0](0, a1) : *(id *)(a1 + 32);
        uint64_t v12 = v11;
        CKDeviceCapability.wrapped.getter(&v47);
        uint64_t v13 = v49;
        if (!v49) {
          break;
        }
        uint64_t v14 = v48;
        uint64_t v42 = v51;
        uint64_t v45 = v50;

        sub_18AF33D44();
        if (v15) {
          sub_18AF35104();
        }
        sub_18AF342B4();
        v16[5] = v14;
        v16[6] = v13;
        v16[7] = v45;
        v16[8] = v42;
      }
      goto LABEL_29;
    }
    __break(1u);
  }
  else
  {
    sub_18AF5A6A8(MEMORY[0x1E4FBC860], a2, a3, a4, a5, a6, a7, a8, v37, a2, v41, v44, v47, v48, v49, v50, v51, v52, v53,
      v54,
      v55,
      v56,
      v57,
      v58);
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v26 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (!v26)
    {
      sub_18AF5A6A8(MEMORY[0x1E4FBC860], v19, v20, v21, v22, v23, v24, v25, v38, v40, v43, v46, v47, v48, v49, v50, v51, v52, v53,
        v54,
        v55,
        v56,
        v57,
        v58);
      uint64_t v36 = v35;
      swift_bridgeObjectRelease();
      uint64_t v47 = v36;
      uint64_t v52 = v18;
      CKDeviceCapabilitySet.contains(_:)((CloudKit::CKDeviceCapabilitySet)&v52);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v52 = MEMORY[0x1E4FBC860];
    sub_18AF33FD8();
    if ((v26 & 0x8000000000000000) == 0)
    {
      for (uint64_t i = v40; ; uint64_t i = v40)
      {
        id v28 = (v40 & 0xC000000000000001) != 0 ? (id)MEMORY[0x18C1298C0](0) : *(id *)(i + 32);
        uint64_t v29 = v28;
        CKDeviceCapability.wrapped.getter(&v47);
        uint64_t v30 = v49;
        if (!v49) {
          break;
        }
        uint64_t v31 = v48;
        uint64_t v32 = v50;
        uint64_t v33 = v51;

        sub_18AF33D44();
        if (v15) {
          sub_18AF35104();
        }
        sub_18AF342B4();
        v34[5] = v31;
        v34[6] = v30;
        v34[7] = v32;
        v34[8] = v33;
      }
      goto LABEL_30;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

uint64_t sub_18AF57E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  type metadata accessor for CKDeviceCapability(a1);
  sub_18AF38424();
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  LOBYTE(a5) = a5(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a5 & 1;
}

void static CKDeviceCapability.pruneAndSort(_:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a1;
  if (a1 >> 62) {
    goto LABEL_22;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v10 = MEMORY[0x1E4FBC860];
    if (!v8)
    {
      uint64_t v12 = MEMORY[0x1E4FBC860];
LABEL_16:
      sub_18AF5A6A8(v12, a2, a3, a4, a5, a6, a7, a8, v32, v33, v34, v35, *(uint64_t *)&v36.level, v36.name._countAndFlagsBits, (uint64_t)v36.name._object, v36.value._countAndFlagsBits, (uint64_t)v36.value._object, v37, v38,
        v39,
        v40,
        v41,
        v42,
        v43);
      uint64_t v23 = v22;
      swift_bridgeObjectRelease();
      uint64_t v24 = *(void *)(v23 + 16);
      if (v24)
      {
        uint64_t v37 = v10;
        uint64_t v25 = specialized ContiguousArray.reserveCapacity(_:)();
        type metadata accessor for CKDeviceCapability(v25);
        if ((unint64_t)(v24 - 1) >= *(void *)(v23 + 16)) {
          goto LABEL_24;
        }
        uint64_t v26 = (void **)(v23 + 64);
        do
        {
          uint64_t v28 = (uint64_t)*(v26 - 3);
          uint64_t v27 = *(v26 - 2);
          uint64_t v29 = (uint64_t)*(v26 - 1);
          uint64_t v30 = *v26;
          v36.CloudKit::CKDeviceCapability::Level level = *((unsigned char *)v26 - 32);
          v36.name._uint64_t countAndFlagsBits = v28;
          v36.name._object = v27;
          v36.value._uint64_t countAndFlagsBits = v29;
          v36.value._object = v30;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CKDeviceCapability.init(_:)(v31, &v36);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v26 += 5;
          --v24;
        }
        while (v24);
      }
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v37 = MEMORY[0x1E4FBC860];
    sub_18AF33FD8();
    if (v8 < 0) {
      break;
    }
    uint64_t v11 = 0;
    uint64_t v12 = v37;
    uint64_t v34 = v9;
    unint64_t v35 = v9 & 0xC000000000000001;
    uint64_t v33 = v8;
    while (v8 != v11)
    {
      if (v35) {
        id v13 = (id)MEMORY[0x18C1298C0](v11, v9);
      }
      else {
        id v13 = *(id *)(v9 + 8 * v11 + 32);
      }
      uint64_t v14 = v13;
      CKDeviceCapability.wrapped.getter((uint64_t *)&v36);
      object = v36.name._object;
      if (!v36.name._object) {
        goto LABEL_25;
      }
      uint64_t countAndFlagsBits = v36.name._countAndFlagsBits;
      uint64_t v17 = v36.value._countAndFlagsBits;
      uint64_t v18 = v36.value._object;
      CloudKit::CKDeviceCapability::Level level = v36.level;

      uint64_t v37 = v12;
      unint64_t v20 = *(void *)(v12 + 16);
      if (v20 >= *(void *)(v12 + 24) >> 1)
      {
        sub_18AF5B1A8();
        uint64_t v12 = v37;
      }
      *(void *)(v12 + 16) = v20 + 1;
      uint64_t v21 = v12 + 40 * v20;
      *(unsigned char *)(v21 + 32) = level;
      ++v11;
      *(void *)(v21 + 40) = countAndFlagsBits;
      *(void *)(v21 + 48) = object;
      *(void *)(v21 + 56) = v17;
      *(void *)(v21 + 64) = v18;
      uint64_t v8 = v33;
      uint64_t v9 = v34;
      if (v33 == v11)
      {
        uint64_t v10 = MEMORY[0x1E4FBC860];
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_22:
    sub_18AF34294();
    _CocoaArrayWrapper.endIndex.getter();
    sub_18AF22CF0();
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
}

Swift::Void __swiftcall CKDeviceCapability.encode(with:)(NSCoder with)
{
  uint64_t v2 = (void *)(v1 + OBJC_IVAR___CKDeviceCapability__wrapped);
  if (!*(void *)(v1 + OBJC_IVAR___CKDeviceCapability__wrapped + 16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    return;
  }
  uint64_t v4 = *(unsigned __int8 *)v2;
  uint64_t v5 = NSStringFromSelector(sel_level);
  if (!v5)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    MEMORY[0x18C128F60](v6);
    sub_18AF40F74();
  }
  [(objc_class *)with.super.isa encodeInteger:v4 + 1 forKey:v5];

  uint64_t v7 = v2[2];
  if (!v7) {
    goto LABEL_14;
  }
  uint64_t v8 = (void *)v2[1];
  swift_bridgeObjectRetain();
  MEMORY[0x18C128F60](v8, v7);
  sub_18AF40F74();
  uint64_t v9 = NSStringFromSelector(sel_name);
  if (!v9)
  {
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = (NSString *)MEMORY[0x18C128F60](v10);
    swift_bridgeObjectRelease();
  }
  [(objc_class *)with.super.isa encodeObject:v8 forKey:v9];

  if (!v2[2]) {
    goto LABEL_15;
  }
  uint64_t v11 = (void *)v2[3];
  uint64_t v12 = v2[4];
  swift_bridgeObjectRetain();
  MEMORY[0x18C128F60](v11, v12);
  sub_18AF40F74();
  id v13 = NSStringFromSelector(sel_value);
  if (!v13)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    char v15 = (NSString *)MEMORY[0x18C128F60](v14);
    swift_bridgeObjectRelease();
    id v13 = v15;
  }
  uint64_t v16 = v13;
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v11);
}

id CKDeviceCapability.init(coder:)(void *a1)
{
  uint64_t v3 = (uint64_t *)&v1[OBJC_IVAR___CKDeviceCapability__wrapped];
  *(_OWORD *)uint64_t v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  v3[4] = 0;
  uint64_t v4 = v1;
  uint64_t v5 = NSStringFromSelector(sel_level);
  if (!v5)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = (NSString *)MEMORY[0x18C128F60](v6);
    swift_bridgeObjectRelease();
  }
  signed int v7 = objc_msgSend(a1, sel_decodeInt32ForKey_, v5);

  if ((unint64_t)(v7 - 1) >= 3) {
    goto LABEL_15;
  }
  uint64_t v8 = NSStringFromSelector(sel_name);
  if (!v8)
  {
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = (NSString *)MEMORY[0x18C128F60](v9);
    swift_bridgeObjectRelease();
  }
  id v10 = objc_msgSend(a1, sel_decodeObjectForKey_, v8);

  if (v10)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v42 = 0u;
    long long v43 = 0u;
  }
  sub_18AF5B26C((uint64_t)&v42, (uint64_t)&v44, &qword_1E91250B8);
  if (!v46)
  {

LABEL_25:
    sub_18AF40194((uint64_t)&v44, &qword_1E91250B8);
    goto LABEL_26;
  }
  if ((sub_18AF41138() & 1) == 0)
  {
LABEL_15:

LABEL_26:
    sub_18AF5A618(*v3, v3[1], v3[2]);

    type metadata accessor for CKDeviceCapability(v26);
    swift_deallocPartialClassInstance();
    return 0;
  }
  uint64_t v11 = NSStringFromSelector(sel_value);
  if (!v11)
  {
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = (NSString *)MEMORY[0x18C128F60](v12);
    swift_bridgeObjectRelease();
  }
  id v13 = objc_msgSend(a1, sel_decodeObjectForKey_, v11);

  if (v13)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v42 = 0u;
    long long v43 = 0u;
  }
  sub_18AF5B26C((uint64_t)&v42, (uint64_t)&v44, &qword_1E91250B8);
  if (!v46)
  {

    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  if ((sub_18AF41138() & 1) == 0)
  {

    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  uint64_t v38 = v4;
  uint64_t v44 = v40;
  uint64_t v45 = v41;
  uint64_t v14 = sub_18AF3A9A8();
  unint64_t v16 = v15;
  uint64_t v44 = v40;
  uint64_t v45 = v41;
  uint64_t v17 = sub_18AF3A9A8();
  unint64_t v19 = v18;
  unint64_t v20 = 128;
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_18AF5A52C(v20, v14, v16);
    uint64_t v22 = MEMORY[0x18C129130](v21);
    if (v23) {
      break;
    }
    if (!--v20)
    {
      swift_bridgeObjectRelease();
      uint64_t v24 = 0;
      unint64_t v25 = 0xE000000000000000;
      goto LABEL_30;
    }
  }
  uint64_t v24 = v22;
  unint64_t v25 = v23;
  swift_bridgeObjectRelease();
LABEL_30:
  unint64_t v29 = 128;
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v30 = sub_18AF5A52C(v29, v17, v19);
    uint64_t v31 = MEMORY[0x18C129130](v30);
    if (v32) {
      break;
    }
    if (!--v29)
    {
      swift_bridgeObjectRelease();
      uint64_t v33 = 0;
      unint64_t v34 = 0xE000000000000000;
      goto LABEL_35;
    }
  }
  uint64_t v33 = v31;
  unint64_t v34 = v32;
  swift_bridgeObjectRelease();
LABEL_35:
  uint64_t v35 = *v3;
  uint64_t v36 = v3[1];
  uint64_t v37 = v3[2];
  *uint64_t v3 = v7 - 1;
  v3[1] = v24;
  v3[2] = v25;
  v3[3] = v33;
  v3[4] = v34;
  sub_18AF5A618(v35, v36, v37);

  v39.receiver = v38;
  v39.super_class = (Class)CKDeviceCapability;
  id v27 = objc_msgSendSuper2(&v39, sel_init);

  return v27;
}

uint64_t CKDeviceCapability.isEqual(_:)(uint64_t a1)
{
  uint64_t v2 = sub_18AF5B20C(a1, (uint64_t)v24, &qword_1E91250B8);
  if (!v25)
  {
    sub_18AF40194((uint64_t)v24, &qword_1E91250B8);
    goto LABEL_13;
  }
  type metadata accessor for CKDeviceCapability(v2);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    char v16 = 0;
    return v16 & 1;
  }
  uint64_t v3 = v1 + OBJC_IVAR___CKDeviceCapability__wrapped;
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR___CKDeviceCapability__wrapped);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR___CKDeviceCapability__wrapped + 8);
  uint64_t v7 = *(void *)(v1 + OBJC_IVAR___CKDeviceCapability__wrapped + 16);
  uint64_t v6 = *(void *)(v1 + OBJC_IVAR___CKDeviceCapability__wrapped + 24);
  uint64_t v8 = *(void *)(v3 + 32);
  uint64_t v10 = *(void *)&v23[OBJC_IVAR___CKDeviceCapability__wrapped];
  uint64_t v9 = *(void *)&v23[OBJC_IVAR___CKDeviceCapability__wrapped + 8];
  uint64_t v12 = *(void *)&v23[OBJC_IVAR___CKDeviceCapability__wrapped + 16];
  uint64_t v11 = *(void *)&v23[OBJC_IVAR___CKDeviceCapability__wrapped + 24];
  uint64_t v13 = *(void *)&v23[OBJC_IVAR___CKDeviceCapability__wrapped + 32];
  if (!v7)
  {
    uint64_t v22 = v5;
    sub_18AF5B1C8(v10, v9, v12);

    if (!v12)
    {
      char v16 = 1;
      return v16 & 1;
    }
    goto LABEL_12;
  }
  if (!v12)
  {
    uint64_t v22 = v5;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();

LABEL_12:
    sub_18AF5A618(v22, v4, v7);
    sub_18AF5A618(v10, v9, v12);
    goto LABEL_13;
  }
  char v14 = v10 ^ v5;
  uint64_t v15 = v5;
  if (v14)
  {
    char v16 = 0;
  }
  else
  {
    BOOL v18 = v4 == v9 && v7 == v12;
    if (v18
      || (uint64_t v19 = *(void *)&v23[OBJC_IVAR___CKDeviceCapability__wrapped + 24],
          char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(),
          uint64_t v11 = v19,
          char v16 = 0,
          (v20 & 1) != 0))
    {
      if (v6 == v11 && v8 == v13) {
        char v16 = 1;
      }
      else {
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
    }
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_18AF5A618(v15, v4, v7);
  return v16 & 1;
}

uint64_t CKDeviceCapability.description.getter()
{
  if (*(void *)&v0[OBJC_IVAR___CKDeviceCapability__wrapped + 16])
  {
    v10.super_class = (Class)CKDeviceCapability;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v1 = objc_msgSendSuper2(&v10, sel_description);
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v4 = v3;

    uint64_t v11 = v2;
    uint64_t v12 = v4;
    v5._uint64_t countAndFlagsBits = 8250;
    v5._object = (void *)0xE200000000000000;
    String.append(_:)(v5);
    v6._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    return v11;
  }
  else
  {
    v13.receiver = v0;
    v13.super_class = (Class)CKDeviceCapability;
    id v8 = objc_msgSendSuper2(&v13, sel_description);
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_18AF2AC84();
    return v9;
  }
}

id sub_18AF58B54()
{
  uint64_t v1 = sub_18AF161EC(&qword_1E9125470);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  Swift::String v6 = (char *)&v17 - v5;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = type metadata accessor for Date();
  sub_18AF43708((uint64_t)v9, 1, 1, v10);
  char v19 = 0;
  sub_18AF5B20C((uint64_t)v9, (uint64_t)v6, &qword_1E9125470);
  sub_18AF5B20C((uint64_t)v6, (uint64_t)v3, &qword_1E9125470);
  int v11 = sub_18AF436E0((uint64_t)v3, 1, v10);
  uint64_t v12 = v0;
  if (v11 == 1)
  {
    sub_18AF40194((uint64_t)v6, &qword_1E9125470);
    char v13 = 0;
    Class isa = 0;
  }
  else
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    sub_18AF40194((uint64_t)v6, &qword_1E9125470);
    (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8))(v3, v10);
    char v13 = v19;
  }
  sub_18AF40194((uint64_t)v9, &qword_1E9125470);
  uint64_t v15 = &v12[OBJC_IVAR___CKDeviceCapabilityCheckOptions__wrapped];
  *uint64_t v15 = v13;
  *((void *)v15 + 1) = isa;

  v18.receiver = v12;
  v18.super_class = (Class)CKDeviceCapabilityCheckOptions;
  return objc_msgSendSuper2(&v18, sel_init);
}

id CKDeviceCapabilityCheckOptions.init(excludeDevicesWithoutCapabilityCheckingSupport:excludeZoneAccessBefore:)(char a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  Class isa = 0;
  if (sub_18AF436E0(a2, 1, v4) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    sub_18AF19278();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v4);
  }
  id v7 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithExcludeDevicesWithoutCapabilityCheckingSupport_excludeZoneAccessBefore_, a1 & 1, isa);

  return v7;
}

char *CKDeviceCapabilityCheckOptions.init(excludeDevicesWithoutCapabilityCheckingSupport:excludeZoneAccessBefore:)(char a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_18AF161EC(&qword_1E9125470);
  uint64_t v7 = sub_18AF19284(v6);
  MEMORY[0x1F4188790](v7);
  sub_18AF30B3C();
  uint64_t v10 = v8 - v9;
  MEMORY[0x1F4188790](v11);
  char v13 = (char *)&v28 - v12;
  *(void *)&double v15 = MEMORY[0x1F4188790](v14).n128_u64[0];
  uint64_t v17 = (char *)&v28 - v16;
  id v18 = objc_msgSend(v3, sel_init, v15);
  sub_18AF5B20C(a2, (uint64_t)v17, &qword_1E9125470);
  char v29 = a1;
  sub_18AF5B20C((uint64_t)v17, (uint64_t)v13, &qword_1E9125470);
  sub_18AF5B20C((uint64_t)v13, v10, &qword_1E9125470);
  uint64_t v19 = type metadata accessor for Date();
  int v20 = sub_18AF436E0(v10, 1, v19);
  uint64_t v21 = (char *)v18;
  if (v20 == 1)
  {
    char v22 = a1 & 1;
    sub_18AF40194((uint64_t)v13, &qword_1E9125470);
    Class isa = 0;
  }
  else
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    sub_18AF40194((uint64_t)v13, &qword_1E9125470);
    sub_18AF19278();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v10, v19);
    char v22 = v29;
  }
  sub_18AF40194((uint64_t)v17, &qword_1E9125470);
  sub_18AF40194(a2, &qword_1E9125470);
  uint64_t v25 = &v21[OBJC_IVAR___CKDeviceCapabilityCheckOptions__wrapped];
  swift_beginAccess();
  uint64_t v26 = (void *)*((void *)v25 + 1);
  *uint64_t v25 = v22;
  *((void *)v25 + 1) = isa;

  return v21;
}

uint64_t CKDeviceCapabilityCheckOptions.excludeDevicesWithoutCapabilityCheckingSupport.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___CKDeviceCapabilityCheckOptions__wrapped);
  sub_18AF18528();
  return *v1;
}

{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t CKDeviceCapabilityCheckOptions.excludeZoneAccessBefore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = sub_18AF161EC(&qword_1E9125470);
  uint64_t v5 = sub_18AF19284(v4);
  MEMORY[0x1F4188790](v5);
  sub_18AF2A53C();
  uint64_t v6 = v1 + OBJC_IVAR___CKDeviceCapabilityCheckOptions__wrapped;
  swift_beginAccess();
  if (*(void *)(v6 + 8))
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 1;
  }
  uint64_t v8 = type metadata accessor for Date();
  sub_18AF43708(v2, v7, 1, v8);
  sub_18AF5B26C(v2, a1, &qword_1E9125470);
  return swift_endAccess();
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  if (*(void *)(v1 + 8))
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v4 = type metadata accessor for Date();

  return sub_18AF43708(a1, v3, 1, v4);
}

Swift::Void __swiftcall CKDeviceCapabilityCheckOptions.encode(with:)(NSCoder with)
{
  uint64_t v4 = sub_18AF161EC(&qword_1E9125470);
  uint64_t v5 = sub_18AF19284(v4);
  MEMORY[0x1F4188790](v5);
  sub_18AF30B3C();
  uint64_t v8 = v6 - v7;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = &v25[-v10];
  type metadata accessor for Date();
  sub_18AF3939C();
  uint64_t v13 = v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = &v25[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = (unsigned __int8 *)(v1 + OBJC_IVAR___CKDeviceCapabilityCheckOptions__wrapped);
  sub_18AF18528();
  uint64_t v18 = *v17;
  uint64_t v19 = NSStringFromSelector(sel_excludeDevicesWithoutCapabilityCheckingSupport);
  if (!v19)
  {
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = (NSString *)MEMORY[0x18C128F60](v20);
    swift_bridgeObjectRelease();
  }
  [(objc_class *)with.super.isa encodeBool:v18 forKey:v19];

  swift_beginAccess();
  if (*((void *)v17 + 1))
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v21 = 1;
  }
  sub_18AF43708(v8, v21, 1, v2);
  sub_18AF5B26C(v8, (uint64_t)v11, &qword_1E9125470);
  if (sub_18AF436E0((uint64_t)v11, 1, v2) == 1)
  {
    sub_18AF40194((uint64_t)v11, &qword_1E9125470);
    swift_endAccess();
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *))(v13 + 32))(v16, v11);
    swift_endAccess();
    v22.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
    unint64_t v23 = NSStringFromSelector(sel_excludeZoneAccessBefore);
    if (!v23)
    {
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v23 = (NSString *)MEMORY[0x18C128F60](v24);
      swift_bridgeObjectRelease();
    }
    [(objc_class *)with.super.isa encodeObject:v22.super.isa forKey:v23];

    (*(void (**)(unsigned char *))(v13 + 8))(v16);
  }
}

void *CKDeviceCapabilityCheckOptions.init(coder:)(void *a1)
{
  uint64_t v3 = sub_18AF161EC(&qword_1E9125470);
  uint64_t v4 = sub_18AF19284(v3);
  MEMORY[0x1F4188790](v4);
  sub_18AF30B3C();
  uint64_t v7 = v5 - v6;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v37 - v9;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v37 - v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v38 = (char *)&v37 - v15;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v37 - v17;
  uint64_t v19 = v1;
  uint64_t v20 = NSStringFromSelector(sel_excludeDevicesWithoutCapabilityCheckingSupport);
  if (!v20)
  {
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    MEMORY[0x18C128F60](v21);
    sub_18AF40F74();
  }
  unsigned int v39 = objc_msgSend(a1, sel_decodeBoolForKey_, v20);

  uint64_t v22 = type metadata accessor for Date();
  sub_18AF43708((uint64_t)v18, 1, 1, v22);
  unint64_t v23 = NSStringFromSelector(sel_excludeZoneAccessBefore);
  if (!v23)
  {
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    MEMORY[0x18C128F60](v24);
    sub_18AF22CF0();
  }
  unsigned int v25 = objc_msgSend(a1, sel_containsValueForKey_, v23);

  if (v25)
  {
    uint64_t v37 = v19;
    sub_18AF34EA0(0, &qword_1E9125D00);
    uint64_t v26 = NSStringFromSelector(sel_excludeZoneAccessBefore);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v27 = NSCoder.decodeObject<A>(of:forKey:)();
    swift_bridgeObjectRelease();
    if (!v27)
    {

      uint64_t v35 = sub_18AF40194((uint64_t)v18, &qword_1E9125470);
      type metadata accessor for CKDeviceCapabilityCheckOptions(v35);
      swift_deallocPartialClassInstance();
      return v27;
    }
    uint64_t v28 = (uint64_t)v38;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    sub_18AF40194((uint64_t)v18, &qword_1E9125470);
    sub_18AF43708(v28, 0, 1, v22);
    uint64_t v29 = sub_18AF38424();
    sub_18AF5B26C(v29, v30, &qword_1E9125470);
    uint64_t v19 = v37;
  }
  sub_18AF5B20C((uint64_t)v18, (uint64_t)v13, &qword_1E9125470);
  char v31 = v39;
  char v41 = v39;
  sub_18AF5B20C((uint64_t)v13, (uint64_t)v10, &qword_1E9125470);
  sub_18AF5B20C((uint64_t)v10, v7, &qword_1E9125470);
  if (sub_18AF436E0(v7, 1, v22) == 1)
  {
    sub_18AF40194((uint64_t)v10, &qword_1E9125470);
    Class isa = 0;
  }
  else
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    sub_18AF40194((uint64_t)v10, &qword_1E9125470);
    sub_18AF19278();
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v7, v22);
    char v31 = v41;
  }
  sub_18AF40194((uint64_t)v13, &qword_1E9125470);
  sub_18AF40194((uint64_t)v18, &qword_1E9125470);
  unint64_t v34 = &v19[OBJC_IVAR___CKDeviceCapabilityCheckOptions__wrapped];
  *unint64_t v34 = v31;
  *((void *)v34 + 1) = isa;

  v40.receiver = v19;
  v40.super_class = (Class)CKDeviceCapabilityCheckOptions;
  id v27 = objc_msgSendSuper2(&v40, sel_init);

  return v27;
}

char *CKDeviceCapabilityCheckOptions.copy(with:)@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t v4 = type metadata accessor for CKDeviceCapabilityCheckOptions(a1);
  uint64_t v5 = v2 + OBJC_IVAR___CKDeviceCapabilityCheckOptions__wrapped;
  sub_18AF18528();
  uint64_t v6 = *(void **)(v5 + 8);
  v9[0] = *(unsigned char *)v5;
  uint64_t v10 = v6;
  id v7 = v6;
  uint64_t result = CKDeviceCapabilityCheckOptions.init(_:)(v9);
  a2[3] = (char *)v4;
  *a2 = result;
  return result;
}

char *CKDeviceCapabilityCheckOptions.init(_:)(char *a1)
{
  char v1 = *a1;
  uint64_t v2 = *((void *)a1 + 1);
  uint64_t v3 = (char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  uint64_t v4 = &v3[OBJC_IVAR___CKDeviceCapabilityCheckOptions__wrapped];
  swift_beginAccess();
  uint64_t v5 = (void *)*((void *)v4 + 1);
  char *v4 = v1;
  *((void *)v4 + 1) = v2;

  return v3;
}

uint64_t CKDeviceCapabilityCheckOptions.isEqual(_:)(uint64_t a1)
{
  uint64_t v2 = sub_18AF5B20C(a1, (uint64_t)v13, &qword_1E91250B8);
  if (!v14)
  {
    sub_18AF40194((uint64_t)v13, &qword_1E91250B8);
    return 0;
  }
  type metadata accessor for CKDeviceCapabilityCheckOptions(v2);
  if (swift_dynamicCast())
  {
    uint64_t v3 = (unsigned __int8 *)(v1 + OBJC_IVAR___CKDeviceCapabilityCheckOptions__wrapped);
    sub_18AF18528();
    int v4 = *v3;
    uint64_t v5 = (void *)*((void *)v3 + 1);
    uint64_t v6 = &v12[OBJC_IVAR___CKDeviceCapabilityCheckOptions__wrapped];
    sub_18AF18528();
    if (v4 != *v6)
    {
LABEL_4:

      return 0;
    }
    uint64_t v8 = (void *)*((void *)v6 + 1);
    if (v5)
    {
      if (!v8) {
        goto LABEL_4;
      }
      sub_18AF34EA0(0, &qword_1E9125D00);
      id v9 = v5;
      id v10 = v8;
      char v11 = static NSObject.== infix(_:_:)();

      if ((v11 & 1) == 0) {
        return 0;
      }
    }
    else
    {

      if (v8) {
        return 0;
      }
    }
    return 1;
  }
  return 0;
}

uint64_t sub_18AF59CC4(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *))
{
  if (a3)
  {
    id v6 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    id v7 = a1;
  }
  char v8 = a4(v10);

  sub_18AF40194((uint64_t)v10, &qword_1E91250B8);
  return v8 & 1;
}

uint64_t CKDeviceCapabilityCheckOptions.description.getter()
{
  uint64_t v1 = v0;
  v11.super_class = (Class)CKDeviceCapabilityCheckOptions;
  id v2 = objc_msgSendSuper2(&v11, sel_description);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  uint64_t v12 = v3;
  uint64_t v13 = v5;
  v6._uint64_t countAndFlagsBits = 8250;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  uint64_t v7 = v1 + OBJC_IVAR___CKDeviceCapabilityCheckOptions__wrapped;
  sub_18AF18528();
  id v8 = *(id *)(v7 + 8);
  v9._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  return v12;
}

id CKDeviceCapabilityCheckOptions.wrapped.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (unsigned __int8 *)(v1 + OBJC_IVAR___CKDeviceCapabilityCheckOptions__wrapped);
  sub_18AF18528();
  uint64_t v4 = (void *)*((void *)v3 + 1);
  *a1 = *v3;
  a1[1] = v4;

  return v4;
}

id sub_18AF59EA8()
{
  *(unsigned char *)(v0 + OBJC_IVAR___CKDeviceCapabilityCheckResult__wrapped) = 2;
  v2.super_class = (Class)CKDeviceCapabilityCheckResult;
  return objc_msgSendSuper2(&v2, sel_init);
}

void __swiftcall CKDeviceCapabilityCheckResult.init(isSupported:)(CKDeviceCapabilityCheckResult *__return_ptr retstr, Swift::Bool isSupported)
{
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());

  objc_msgSend(v3, sel_initWithIsSupported_, isSupported);
}

unsigned char *CKDeviceCapabilityCheckResult.init(isSupported:)(char a1)
{
  uint64_t result = objc_msgSend(v1, sel_init);
  result[OBJC_IVAR___CKDeviceCapabilityCheckResult__wrapped] = a1;
  return result;
}

uint64_t CKDeviceCapabilityCheckResult.isSupported.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + OBJC_IVAR___CKDeviceCapabilityCheckResult__wrapped);
  if (v1 != 2) {
    return v1 & 1;
  }
  __break(1u);
  return result;
}

{
  unsigned __int8 *v0;

  return *v0;
}

Swift::Void __swiftcall CKDeviceCapabilityCheckResult.encode(with:)(NSCoder with)
{
  id v3 = objc_msgSend(v1, sel_isSupported);
  uint64_t v4 = NSStringFromSelector(sel_isSupported);
  if (!v4)
  {
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v6 = (NSString *)MEMORY[0x18C128F60](v5);
    swift_bridgeObjectRelease();
    uint64_t v4 = v6;
  }
  uint64_t v7 = v4;
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v3);
}

id _sSo18CKDeviceCapabilityC8CloudKitE5coderABSgSo7NSCoderC_tcfC_0(void *a1)
{
  id v2 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithCoder_, a1);

  return v2;
}

id CKDeviceCapabilityCheckResult.init(coder:)(void *a1)
{
  uint64_t v3 = OBJC_IVAR___CKDeviceCapabilityCheckResult__wrapped;
  v1[OBJC_IVAR___CKDeviceCapabilityCheckResult__wrapped] = 2;
  uint64_t v4 = v1;
  uint64_t v5 = NSStringFromSelector(sel_isSupported);
  if (!v5)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = (NSString *)MEMORY[0x18C128F60](v6);
    swift_bridgeObjectRelease();
  }
  unsigned __int8 v7 = objc_msgSend(a1, sel_decodeBoolForKey_, v5);

  v1[v3] = v7;
  v10.receiver = v4;
  v10.super_class = (Class)CKDeviceCapabilityCheckResult;
  id v8 = objc_msgSendSuper2(&v10, sel_init);

  return v8;
}

uint64_t CKDeviceCapabilityCheckResult.isEqual(_:)(uint64_t a1)
{
  uint64_t v2 = sub_18AF5B20C(a1, (uint64_t)v9, &qword_1E91250B8);
  if (!v10)
  {
    sub_18AF40194((uint64_t)v9, &qword_1E91250B8);
    goto LABEL_12;
  }
  type metadata accessor for CKDeviceCapabilityCheckResult(v2);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_12:
    char v5 = 0;
    return v5 & 1;
  }
  int v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR___CKDeviceCapabilityCheckResult__wrapped);
  int v4 = v8[OBJC_IVAR___CKDeviceCapabilityCheckResult__wrapped];

  char v5 = v4 == 2 && v3 == 2;
  if (v3 != 2 && v4 != 2) {
    char v5 = ((v3 & 1) == 0) ^ v4;
  }
  return v5 & 1;
}

id sub_18AF5A360(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4 = a1;
  uint64_t v5 = a3();
  uint64_t v7 = v6;

  id v8 = (void *)MEMORY[0x18C128F60](v5, v7);
  swift_bridgeObjectRelease();

  return v8;
}

uint64_t CKDeviceCapabilityCheckResult.description.getter()
{
  if (*((unsigned char *)v0 + OBJC_IVAR___CKDeviceCapabilityCheckResult__wrapped) == 2)
  {
    v13.receiver = v0;
    v13.super_class = (Class)CKDeviceCapabilityCheckResult;
    id v1 = objc_msgSendSuper2(&v13, sel_description);
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v4 = v3;

    uint64_t v14 = v2;
    uint64_t v15 = v4;
    sub_18AF2AC84();
  }
  else
  {
    v12.receiver = v0;
    v12.super_class = (Class)CKDeviceCapabilityCheckResult;
    id v5 = objc_msgSendSuper2(&v12, sel_description);
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;

    uint64_t v14 = v6;
    uint64_t v15 = v8;
    v9._uint64_t countAndFlagsBits = 8250;
    v9._object = (void *)0xE200000000000000;
    String.append(_:)(v9);
    v10._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
  }
  return v14;
}

void __swiftcall CKDeviceCapabilityCheckResult.init(_:)(CKDeviceCapabilityCheckResult *__return_ptr retstr, CloudKit::CKDeviceCapabilityCheckResult a2)
{
  char v2 = *(unsigned char *)a2.isSupported;
  *((unsigned char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init)
  + OBJC_IVAR___CKDeviceCapabilityCheckResult__wrapped) = v2;
}

void CKDeviceCapabilityCheckResult.wrapped.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + OBJC_IVAR___CKDeviceCapabilityCheckResult__wrapped);
}

uint64_t sub_18AF5A52C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_10:
    uint64_t v10 = String.UTF8View._foreignIndex(_:offsetBy:limitedBy:)();
    if ((v11 & 1) == 0)
    {
      uint64_t v7 = v10;
      goto LABEL_8;
    }
    if ((v4 & 0x800000000000000) == 0)
    {
      uint64_t v7 = v5 | 0xB;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  unint64_t v3 = a3;
  uint64_t v4 = a2;
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v5 = v6 << 16;
  if ((a3 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if (v6 >= a1)
  {
    uint64_t v7 = (a1 << 16) | 4;
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v7 = v5 | 7;
LABEL_8:
  uint64_t v8 = MEMORY[0x18C129100](15, v7, v4, v3);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_18AF5A618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_18AF5A65C()
{
  unint64_t result = qword_1E9124C78;
  if (!qword_1E9124C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9124C78);
  }
  return result;
}

void sub_18AF5A6A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_18AF29944();
  a23 = v24;
  a24 = v25;
  uint64_t v27 = v26;
  sub_18AF655A0();
  uint64_t v29 = v28;
  a12 = v27;
  swift_bridgeObjectRetain();
  sub_18AF5AEB4(&a12);
  uint64_t v30 = a12;
  uint64_t v31 = *(void *)(a12 + 16);
  if (v31)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t v32 = (unint64_t *)(v30 + 64);
    uint64_t v33 = v29;
    while (1)
    {
      uint64_t v34 = *((unsigned __int8 *)v32 - 32);
      uint64_t v36 = *(v32 - 3);
      unint64_t v35 = *(v32 - 2);
      uint64_t v38 = *(v32 - 1);
      unint64_t v37 = *v32;
      uint64_t v39 = *(void *)(v33 + 16);
      if (!v39) {
        break;
      }
      objc_super v40 = (void *)(v33 + 40 * v39);
      if (*((unsigned __int8 *)v40 - 8) != v34
        || ((uint64_t v41 = v40[2], v42 = v40[3], *v40 == v36) ? (v43 = v40[1] == v35) : (v43 = 0),
            !v43 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_18:
        uint64_t v46 = HIBYTE(v35) & 0xF;
        if ((v35 & 0x2000000000000000) == 0) {
          uint64_t v46 = v36 & 0xFFFFFFFFFFFFLL;
        }
        if (v46)
        {
          uint64_t v47 = HIBYTE(v37) & 0xF;
          if ((v37 & 0x2000000000000000) == 0) {
            uint64_t v47 = v38 & 0xFFFFFFFFFFFFLL;
          }
          if (v47)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_18AF655A0();
              uint64_t v33 = v50;
            }
            unint64_t v48 = *(void *)(v33 + 16);
            if (v48 >= *(void *)(v33 + 24) >> 1)
            {
              sub_18AF655A0();
              uint64_t v33 = v51;
            }
            *(void *)(v33 + 16) = v48 + 1;
            uint64_t v49 = v33 + 40 * v48;
            *(unsigned char *)(v49 + 32) = v34;
            *(void *)(v49 + 40) = v36;
            *(void *)(v49 + 48) = v35;
            *(void *)(v49 + 56) = v38;
            *(void *)(v49 + 64) = v37;
          }
        }
        goto LABEL_30;
      }
      if (v41 == v38 && v42 == v37)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((v45 & 1) == 0) {
          goto LABEL_18;
        }
      }
LABEL_30:
      v32 += 5;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!--v31)
      {
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_32;
      }
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    sub_18AF5A618(0, 0, 0);
    sub_18AF5A618(v34, v36, v35);
    goto LABEL_18;
  }
LABEL_32:
  swift_release();
  sub_18AF19EC4();
}

uint64_t sub_18AF5A938(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2) {
      return 1;
    }
    for (uint64_t i = 0; ; i += 40)
    {
      unint64_t v6 = (void *)(a1 + i);
      uint64_t v7 = (void *)(a2 + i);
      if (*(unsigned __int8 *)(a1 + i + 32) != *(unsigned __int8 *)(a2 + i + 32)) {
        break;
      }
      uint64_t v8 = v6[7];
      uint64_t v9 = v6[8];
      uint64_t v10 = v7[7];
      uint64_t v11 = v7[8];
      BOOL v12 = v6[5] == v7[5] && v6[6] == v7[6];
      if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      if (v8 != v10 || v9 != v11)
      {
        sub_18AF38424();
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          break;
        }
      }
      if (!--v2) {
        return 1;
      }
    }
  }
  return 0;
}

void sub_18AF5AA10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  sub_18AF29944();
  sub_18AF33B0C();
  if (v14)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = *(void *)(v15 + 16);
  }
  if ((unint64_t)v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v16 != v17 || !v16) {
    goto LABEL_33;
  }
  uint64_t v18 = v13 & 0xFFFFFFFFFFFFFF8;
  uint64_t v19 = (v13 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v13 < 0) {
    uint64_t v18 = v13;
  }
  if (v14) {
    uint64_t v19 = v18;
  }
  uint64_t v20 = v12 & 0xFFFFFFFFFFFFFF8;
  uint64_t v21 = (v12 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v12 < 0) {
    uint64_t v20 = v12;
  }
  if ((unint64_t)v12 >> 62) {
    uint64_t v21 = v20;
  }
  if (v19 == v21) {
    goto LABEL_33;
  }
  if (v16 < 0)
  {
LABEL_38:
    __break(1u);
  }
  else
  {
    sub_18AF33404(0, (v13 & 0xC000000000000001) == 0, v13);
    a12 = v13 & 0xC000000000000001;
    if ((v13 & 0xC000000000000001) == 0)
    {
      id v22 = *(id *)(v13 + 32);
      goto LABEL_19;
    }
  }
  id v22 = (id)MEMORY[0x18C1298C0](0, v13);
LABEL_19:
  unint64_t v23 = v22;
  sub_18AF33404(0, (v12 & 0xC000000000000001) == 0, v12);
  if ((v12 & 0xC000000000000001) != 0) {
    id v24 = (id)MEMORY[0x18C1298C0](0, v12);
  }
  else {
    id v24 = *(id *)(v12 + 32);
  }
  uint64_t v25 = v24;
  sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
  char v26 = static NSObject.== infix(_:_:)();

  if (v26)
  {
    uint64_t v27 = 1 - v16;
    uint64_t v28 = 5;
    do
    {
      uint64_t v16 = v27 + v28 == 5;
      if (v27 + v28 == 5) {
        break;
      }
      unint64_t v29 = v28 - 4;
      if (a12)
      {
        id v30 = (id)MEMORY[0x18C1298C0](v28 - 4, v13);
      }
      else
      {
        if (v29 >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }
        id v30 = *(id *)(v13 + 8 * v28);
      }
      uint64_t v31 = v30;
      if ((v12 & 0xC000000000000001) != 0)
      {
        id v32 = (id)MEMORY[0x18C1298C0](v28 - 4, v12);
      }
      else
      {
        if (v29 >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_37;
        }
        id v32 = *(id *)(v12 + 8 * v28);
      }
      uint64_t v33 = v32;
      char v34 = static NSObject.== infix(_:_:)();

      ++v28;
    }
    while ((v34 & 1) != 0);
  }
LABEL_33:
  sub_18AF19EC4();
}

void sub_18AF5AC60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  sub_18AF33850();
  sub_18AF33B0C();
  if (v12)
  {
LABEL_37:
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = *(void *)(v13 + 16);
  }
  if ((unint64_t)v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v15 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v14 == v15 && v14)
  {
    uint64_t v16 = v11 & 0xFFFFFFFFFFFFFF8;
    if (v11 < 0) {
      uint64_t v16 = v11;
    }
    if (!v12) {
      uint64_t v16 = (v11 & 0xFFFFFFFFFFFFFF8) + 32;
    }
    uint64_t v17 = v10 & 0xFFFFFFFFFFFFFF8;
    uint64_t v18 = (v10 & 0xFFFFFFFFFFFFFF8) + 32;
    if (v10 < 0) {
      uint64_t v17 = v10;
    }
    if ((unint64_t)v10 >> 62) {
      uint64_t v18 = v17;
    }
    if (v16 != v18)
    {
      if (v14 < 0) {
        goto LABEL_40;
      }
      a10 = v11 & 0xC000000000000001;
      if ((v11 & 0xC000000000000001) != 0) {
LABEL_41:
      }
        id v19 = (id)MEMORY[0x18C1298C0](0, v11);
      else {
        id v19 = *(id *)(v11 + 32);
      }
      uint64_t v12 = v19;
      sub_18AF33404(0, (v10 & 0xC000000000000001) == 0, v10);
      id v20 = (v10 & 0xC000000000000001) != 0 ? (id)MEMORY[0x18C1298C0](0, v10) : *(id *)(v10 + 32);
      uint64_t v21 = v20;
      sub_18AF34EA0(0, &qword_1E91255F0);
      char v22 = static NSObject.== infix(_:_:)();

      if ((v22 & 1) != 0 && v14 != 1)
      {
        uint64_t v23 = 5;
        while (1)
        {
          if (v23 - 4 >= v14)
          {
            __break(1u);
            goto LABEL_37;
          }
          if (a10) {
            id v24 = (id)MEMORY[0x18C1298C0](v23 - 4, v11);
          }
          else {
            id v24 = *(id *)(v11 + 8 * v23);
          }
          uint64_t v12 = v24;
          if ((v10 & 0xC000000000000001) != 0)
          {
            id v25 = (id)MEMORY[0x18C1298C0](v23 - 4, v10);
          }
          else
          {
            if ((unint64_t)(v23 - 4) >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
LABEL_40:
              __break(1u);
              goto LABEL_41;
            }
            id v25 = *(id *)(v10 + 8 * v23);
          }
          char v26 = v25;
          char v27 = static NSObject.== infix(_:_:)();

          if (v27)
          {
            uint64_t v28 = 2 - v14 + v23++;
            if (v28 != 5) {
              continue;
            }
          }
          break;
        }
      }
    }
  }
  sub_18AF16CC4();
}

unint64_t sub_18AF5AE98(unint64_t result, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(a3 + 16);
  if (v3 >= result && v3 >= a2) {
    return a2 - result;
  }
  __break(1u);
  return result;
}

void sub_18AF5AEB4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_18AFB54BC();
    uint64_t v2 = v3;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  sub_18AF5B698(v5);
  *a1 = v2;
}

uint64_t sub_18AF5AF20(Swift::Int a1)
{
  if (a1 < 16) {
    return 0;
  }
  _StringGuts.grow(_:)(a1);
  return 0;
}

uint64_t sub_18AF5AF68(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

unint64_t sub_18AF5AFC0()
{
  unint64_t result = qword_1E9124C20;
  if (!qword_1E9124C20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9124C20);
  }
  return result;
}

uint64_t sub_18AF5B00C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_18AF5AF68(a1, a2);
  }
  return a1;
}

uint64_t type metadata accessor for CKDeviceCapability(uint64_t a1)
{
  return sub_18AF34EA0(a1, &qword_1E9124C30);
}

uint64_t sub_18AF5B034(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_18AF38EC0();
    uint64_t result = sub_18AF22CCC();
    __break(1u);
  }
  else if (a1)
  {
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

uint64_t sub_18AF5B0AC(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_18AF38EC0();
    uint64_t result = sub_18AF22CCC();
    __break(1u);
  }
  else
  {
    if (a1)
    {
      type metadata accessor for CKAsyncSerialQueue.WaitContext();
      uint64_t v2 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v2 + 16) = a1;
    }
    else
    {
      uint64_t v2 = MEMORY[0x1E4FBC860];
    }
    type metadata accessor for CKAsyncSerialQueue.WaitContext();
    return v2;
  }
  return result;
}

void sub_18AF5B168()
{
  sub_18AFB2BF8();
  void *v0 = v1;
}

void sub_18AF5B188()
{
  sub_18AFB2CAC();
  void *v0 = v1;
}

void sub_18AF5B1A8()
{
  sub_18AFB2CE0();
  void *v0 = v1;
}

uint64_t sub_18AF5B1C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_18AF5B20C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_18AF161EC(a3);
  sub_18AF19278();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_18AF5B26C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_18AF161EC(a3);
  sub_18AF19278();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for CKDeviceCapabilityCheckOptions(uint64_t a1)
{
  return sub_18AF34EA0(a1, (unint64_t *)&unk_1E9125D10);
}

uint64_t type metadata accessor for CKDeviceCapabilityCheckResult(uint64_t a1)
{
  return sub_18AF34EA0(a1, (unint64_t *)&unk_1E9125D20);
}

uint64_t _s32JsonSerializableDeviceCapabilityVwxx()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s32JsonSerializableDeviceCapabilityVwcp(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *_s32JsonSerializableDeviceCapabilityVwca(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 _s32JsonSerializableDeviceCapabilityVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s32JsonSerializableDeviceCapabilityVwta(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s32JsonSerializableDeviceCapabilityVwet(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s32JsonSerializableDeviceCapabilityVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s32JsonSerializableDeviceCapabilityVMa()
{
  return &_s32JsonSerializableDeviceCapabilityVN;
}

unint64_t sub_18AF5B4EC()
{
  unint64_t result = qword_1E9124C50;
  if (!qword_1E9124C50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9124C50);
  }
  return result;
}

void sub_18AF5B538()
{
  sub_18AFB2D98();
  void *v0 = v1;
}

void sub_18AF5B558()
{
  sub_18AFB2DCC();
  void *v0 = v1;
}

void sub_18AF5B578()
{
  sub_18AFB2E00();
  void *v0 = v1;
}

void sub_18AF5B598()
{
  sub_18AFB2E34();
  void *v0 = v1;
}

void sub_18AF5B5B8()
{
  sub_18AFB2EEC();
  void *v0 = v1;
}

void sub_18AF5B5D8()
{
  sub_18AFB2F20();
  void *v0 = v1;
}

void sub_18AF5B5F8()
{
  sub_18AFB2F54();
  void *v0 = v1;
}

void sub_18AF5B618()
{
  sub_18AFB2F88();
  void *v0 = v1;
}

void sub_18AF5B638()
{
  sub_18AFB2FBC();
  void *v0 = v1;
}

void sub_18AF5B658()
{
  sub_18AFB2FF0();
  void *v0 = v1;
}

void sub_18AF5B678()
{
  sub_18AFB3290();
  void *v0 = v1;
}

void sub_18AF5B698(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3) {
        sub_18AF5BF70(0, v3, 1, a1);
      }
      return;
    }
    goto LABEL_174;
  }
  Swift::Int v5 = v4;
  uint64_t v142 = v1;
  uint64_t v134 = sub_18AF5B034(v3 / 2);
  long long v141 = v6;
  uint64_t v136 = v3;
  uint64_t v132 = a1;
  if (v3 <= 0)
  {
    uint64_t v9 = (void *)MEMORY[0x1E4FBC860];
    unint64_t v69 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_137:
    if (v69 < 2)
    {
LABEL_148:
      swift_bridgeObjectRelease();
      if (v136 >= -1)
      {
        *(void *)(v134 + 16) = 0;
        swift_bridgeObjectRelease();
        return;
      }
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
      return;
    }
    uint64_t v121 = *v132;
    while (1)
    {
      unint64_t v122 = v69 - 2;
      if (v69 < 2) {
        break;
      }
      if (!v121) {
        goto LABEL_183;
      }
      char v123 = v9;
      uint64_t v124 = v9 + 4;
      uint64_t v125 = v9[2 * v122 + 4];
      uint64_t v126 = v9[2 * v69 + 3];
      sub_18AF5C100((char *)(v121 + 40 * v125), (char *)(v121 + 40 * v124[2 * v69 - 2]), v121 + 40 * v126, v141);
      if (v142) {
        goto LABEL_150;
      }
      if (v126 < v125) {
        goto LABEL_169;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_18AFB42D8();
        char v123 = v129;
      }
      if (v122 >= v123[2]) {
        goto LABEL_170;
      }
      uint64_t v127 = &v123[2 * v122 + 4];
      *uint64_t v127 = v125;
      v127[1] = v126;
      unint64_t v128 = v123[2];
      if (v69 > v128) {
        goto LABEL_171;
      }
      uint64_t v9 = v123;
      memmove(&v123[2 * v69 + 2], &v123[2 * v69 + 4], 16 * (v128 - v69));
      v123[2] = v128 - 1;
      unint64_t v69 = v128 - 1;
      if (v128 <= 2) {
        goto LABEL_148;
      }
    }
LABEL_168:
    __break(1u);
LABEL_169:
    __break(1u);
LABEL_170:
    __break(1u);
LABEL_171:
    __break(1u);
    goto LABEL_172;
  }
  Swift::Int v133 = v5;
  uint64_t v7 = 0;
  uint64_t v8 = *a1;
  uint64_t v130 = *a1 + 32;
  uint64_t v131 = *a1 + 16;
  uint64_t v9 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v146 = *a1;
  while (2)
  {
    uint64_t v10 = v7;
    Swift::Int v11 = v7 + 1;
    uint64_t v135 = v9;
    if (v7 + 1 >= v3)
    {
      uint64_t v16 = v142;
      goto LABEL_52;
    }
    uint64_t v12 = (void *)(v8 + 40 * v11);
    unsigned int v13 = *(unsigned __int8 *)v12;
    uint64_t v14 = (void *)(v8 + 40 * v7);
    unsigned int v15 = *(unsigned __int8 *)v14;
    uint64_t v16 = v142;
    if (v13 == v15)
    {
      Swift::Int v147 = v7 + 1;
      uint64_t v17 = v12[3];
      uint64_t v18 = v12[4];
      uint64_t v19 = v14[3];
      uint64_t v20 = v14[4];
      BOOL v21 = v12[1] == v14[1] && v12[2] == v14[2];
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)()) && v17 == v19 && v18 == v20)
      {
        Swift::Int v24 = v10 + 2;
        uint64_t v9 = v135;
        Swift::Int v3 = v136;
        uint64_t v16 = v142;
        uint64_t v8 = v146;
        if (v10 + 2 >= v136) {
          goto LABEL_51;
        }
        int v23 = 0;
        Swift::Int v11 = v147;
        goto LABEL_22;
      }
      int v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v16 = v142;
      uint64_t v9 = v135;
      Swift::Int v3 = v136;
      uint64_t v8 = v146;
      Swift::Int v11 = v147;
    }
    else
    {
      int v23 = v13 < v15;
    }
    Swift::Int v24 = v10 + 2;
    if (v10 + 2 >= v3) {
      goto LABEL_43;
    }
LABEL_22:
    uint64_t v138 = v10;
    id v25 = (void *)(v131 + 40 * v24);
    int v148 = v23;
    do
    {
      unsigned int v26 = *((unsigned __int8 *)v25 - 16);
      char v27 = (void *)(v8 + 40 * v11);
      unsigned int v28 = *(unsigned __int8 *)v27;
      if (v26 != v28)
      {
        int v36 = v26 < v28;
        goto LABEL_39;
      }
      uint64_t v30 = v25[1];
      uint64_t v29 = v25[2];
      uint64_t v32 = v27[3];
      uint64_t v31 = v27[4];
      if (*(v25 - 1) != v27[1] || *v25 != v27[2])
      {
        uint64_t v144 = v25[2];
        char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v29 = v144;
        if ((v34 & 1) == 0)
        {
          int v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
          Swift::Int v3 = v136;
          goto LABEL_38;
        }
      }
      BOOL v35 = v30 == v32 && v29 == v31;
      Swift::Int v3 = v136;
      if (!v35)
      {
        int v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
LABEL_38:
        uint64_t v9 = v135;
        uint64_t v8 = v146;
        int v23 = v148;
LABEL_39:
        if ((v23 ^ v36)) {
          goto LABEL_42;
        }
        goto LABEL_40;
      }
      uint64_t v9 = v135;
      uint64_t v8 = v146;
      int v23 = v148;
      if (v148)
      {
        uint64_t v10 = v138;
        goto LABEL_44;
      }
LABEL_40:
      v25 += 5;
      Swift::Int v37 = v24 + 1;
      Swift::Int v11 = v24;
      Swift::Int v24 = v37;
    }
    while (v37 < v3);
    Swift::Int v24 = v37;
LABEL_42:
    uint64_t v10 = v138;
LABEL_43:
    Swift::Int v11 = v24;
    if ((v23 & 1) == 0) {
      goto LABEL_52;
    }
LABEL_44:
    if (v24 < v10)
    {
LABEL_178:
      __break(1u);
      goto LABEL_179;
    }
    if (v10 < v24)
    {
      uint64_t v38 = 40 * v24;
      uint64_t v39 = 40 * v10;
      Swift::Int v40 = v24;
      uint64_t v41 = v10;
      do
      {
        if (v41 != --v40)
        {
          if (!v8) {
            goto LABEL_182;
          }
          uint64_t v42 = v8 + v39;
          char v43 = *(unsigned char *)(v8 + v39);
          uint64_t v44 = v8 + v38;
          long long v45 = *(_OWORD *)(v8 + v39 + 8);
          uint64_t v46 = *(void *)(v8 + v39 + 24);
          uint64_t v47 = *(void *)(v8 + v39 + 32);
          uint64_t v48 = *(void *)(v8 + v38 - 8);
          long long v49 = *(_OWORD *)(v8 + v38 - 24);
          *(_OWORD *)uint64_t v42 = *(_OWORD *)(v8 + v38 - 40);
          *(_OWORD *)(v42 + 16) = v49;
          *(void *)(v42 + 32) = v48;
          *(unsigned char *)(v44 - 40) = v43;
          *(_OWORD *)(v44 - 32) = v45;
          *(void *)(v44 - 16) = v46;
          *(void *)(v44 - 8) = v47;
        }
        ++v41;
        v38 -= 40;
        v39 += 40;
      }
      while (v41 < v40);
    }
LABEL_51:
    Swift::Int v11 = v24;
LABEL_52:
    if (v11 >= v3) {
      goto LABEL_83;
    }
    if (__OFSUB__(v11, v10)) {
      goto LABEL_173;
    }
    if (v11 - v10 >= v133) {
      goto LABEL_83;
    }
    if (__OFADD__(v10, v133))
    {
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
      goto LABEL_178;
    }
    if (v10 + v133 >= v3) {
      Swift::Int v50 = v3;
    }
    else {
      Swift::Int v50 = v10 + v133;
    }
    if (v50 < v10) {
      goto LABEL_177;
    }
    if (v11 == v50) {
      goto LABEL_83;
    }
    uint64_t v51 = v130 + 40 * v11;
    Swift::Int v137 = v50;
    uint64_t v139 = v10;
    while (2)
    {
      uint64_t v52 = (void *)(v8 + 40 * v11);
      unsigned int v53 = *(unsigned __int8 *)v52;
      uint64_t v55 = v52[1];
      uint64_t v54 = v52[2];
      uint64_t v56 = v52[3];
      uint64_t v57 = v52[4];
      uint64_t v140 = v51;
      Swift::Int v149 = v11;
      while (2)
      {
        uint64_t v59 = v51 - 72;
        unsigned int v58 = *(unsigned __int8 *)(v51 - 72);
        if (v53 != v58)
        {
          if (v53 >= v58) {
            goto LABEL_81;
          }
          goto LABEL_77;
        }
        uint64_t v60 = *(void *)(v51 - 48);
        uint64_t v61 = *(void *)(v51 - 40);
        BOOL v62 = v55 == *(void *)(v51 - 64) && v54 == *(void *)(v51 - 56);
        if (!v62
          && (uint64_t v145 = *(void *)(v51 - 48),
              uint64_t v143 = *(void *)(v51 - 40),
              char v63 = _stringCompareWithSmolCheck(_:_:expecting:)(),
              uint64_t v61 = v143,
              uint64_t v60 = v145,
              (v63 & 1) == 0)
          || (v56 == v60 ? (BOOL v64 = v57 == v61) : (BOOL v64 = 0), !v64))
        {
          char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v8 = v146;
          Swift::Int v11 = v149;
          if ((v65 & 1) == 0) {
            goto LABEL_81;
          }
LABEL_77:
          if (!v8) {
            goto LABEL_180;
          }
          uint64_t v57 = *(void *)v51;
          uint64_t v66 = *(void *)(v51 - 40);
          *(void *)(v51 - 40) = *(void *)v51;
          v51 -= 40;
          unsigned int v53 = *(unsigned __int8 *)(v51 + 8);
          uint64_t v55 = *(void *)(v51 + 16);
          uint64_t v54 = *(void *)(v51 + 24);
          uint64_t v56 = *(void *)(v51 + 32);
          long long v67 = *(_OWORD *)(v59 + 16);
          *(_OWORD *)(v59 + 40) = *(_OWORD *)v59;
          *(_OWORD *)(v59 + 56) = v67;
          *(void *)(v59 + 72) = v66;
          *(unsigned char *)(v51 - 32) = v53;
          *(void *)(v51 - 24) = v55;
          *(void *)(v51 - 16) = v54;
          *(void *)(v51 - 8) = v56;
          if (v11 == ++v10) {
            goto LABEL_81;
          }
          continue;
        }
        break;
      }
      uint64_t v8 = v146;
      Swift::Int v11 = v149;
LABEL_81:
      ++v11;
      uint64_t v10 = v139;
      uint64_t v51 = v140 + 40;
      if (v11 != v137) {
        continue;
      }
      break;
    }
    Swift::Int v11 = v137;
    uint64_t v9 = v135;
LABEL_83:
    if (v11 < v10)
    {
LABEL_172:
      __break(1u);
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
      goto LABEL_176;
    }
    Swift::Int v150 = v11;
    uint64_t v142 = v16;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_18AFB420C();
      uint64_t v9 = v119;
    }
    unint64_t v68 = v9[2];
    unint64_t v69 = v68 + 1;
    uint64_t v7 = v150;
    if (v68 >= v9[3] >> 1)
    {
      sub_18AFB420C();
      uint64_t v7 = v150;
      uint64_t v9 = v120;
    }
    void v9[2] = v69;
    uint64_t v70 = v9 + 4;
    long long v71 = &v9[2 * v68 + 4];
    *long long v71 = v10;
    v71[1] = v7;
    if (!v68)
    {
      unint64_t v69 = 1;
LABEL_131:
      Swift::Int v3 = v136;
      if (v7 >= v136) {
        goto LABEL_137;
      }
      continue;
    }
    break;
  }
  while (1)
  {
    unint64_t v72 = v69 - 1;
    if (v69 >= 4)
    {
      char v77 = &v70[2 * v69];
      uint64_t v78 = *(v77 - 8);
      uint64_t v79 = *(v77 - 7);
      BOOL v83 = __OFSUB__(v79, v78);
      uint64_t v80 = v79 - v78;
      if (v83) {
        goto LABEL_157;
      }
      uint64_t v82 = *(v77 - 6);
      uint64_t v81 = *(v77 - 5);
      BOOL v83 = __OFSUB__(v81, v82);
      uint64_t v75 = v81 - v82;
      char v76 = v83;
      if (v83) {
        goto LABEL_158;
      }
      unint64_t v84 = v69 - 2;
      uint64_t v85 = &v70[2 * v69 - 4];
      uint64_t v87 = *v85;
      uint64_t v86 = v85[1];
      BOOL v83 = __OFSUB__(v86, v87);
      uint64_t v88 = v86 - v87;
      if (v83) {
        goto LABEL_159;
      }
      BOOL v83 = __OFADD__(v75, v88);
      uint64_t v89 = v75 + v88;
      if (v83) {
        goto LABEL_161;
      }
      if (v89 >= v80)
      {
        int64_t v107 = &v70[2 * v72];
        uint64_t v109 = *v107;
        uint64_t v108 = v107[1];
        BOOL v83 = __OFSUB__(v108, v109);
        uint64_t v110 = v108 - v109;
        if (v83) {
          goto LABEL_167;
        }
        BOOL v100 = v75 < v110;
        goto LABEL_120;
      }
    }
    else
    {
      if (v69 != 3)
      {
        uint64_t v101 = v9[4];
        uint64_t v102 = v9[5];
        BOOL v83 = __OFSUB__(v102, v101);
        uint64_t v94 = v102 - v101;
        char v95 = v83;
        goto LABEL_114;
      }
      uint64_t v74 = v9[4];
      uint64_t v73 = v9[5];
      BOOL v83 = __OFSUB__(v73, v74);
      uint64_t v75 = v73 - v74;
      char v76 = v83;
    }
    if (v76) {
      goto LABEL_160;
    }
    unint64_t v84 = v69 - 2;
    char v90 = &v70[2 * v69 - 4];
    uint64_t v92 = *v90;
    uint64_t v91 = v90[1];
    BOOL v93 = __OFSUB__(v91, v92);
    uint64_t v94 = v91 - v92;
    char v95 = v93;
    if (v93) {
      goto LABEL_162;
    }
    uint64_t v96 = &v70[2 * v72];
    uint64_t v98 = *v96;
    uint64_t v97 = v96[1];
    BOOL v83 = __OFSUB__(v97, v98);
    uint64_t v99 = v97 - v98;
    if (v83) {
      goto LABEL_164;
    }
    if (__OFADD__(v94, v99)) {
      goto LABEL_166;
    }
    if (v94 + v99 >= v75)
    {
      BOOL v100 = v75 < v99;
LABEL_120:
      if (v100) {
        unint64_t v72 = v84;
      }
      goto LABEL_122;
    }
LABEL_114:
    if (v95) {
      goto LABEL_163;
    }
    int64_t v103 = &v70[2 * v72];
    uint64_t v105 = *v103;
    uint64_t v104 = v103[1];
    BOOL v83 = __OFSUB__(v104, v105);
    uint64_t v106 = v104 - v105;
    if (v83) {
      goto LABEL_165;
    }
    if (v106 < v94) {
      goto LABEL_131;
    }
LABEL_122:
    unint64_t v111 = v72 - 1;
    if (v72 - 1 >= v69)
    {
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
      goto LABEL_168;
    }
    if (!v8) {
      goto LABEL_181;
    }
    int64_t v112 = v9;
    uint64_t v113 = v8;
    uint64_t v114 = &v70[2 * v111];
    uint64_t v115 = *v114;
    uint64_t v116 = &v70[2 * v72];
    uint64_t v117 = v116[1];
    sub_18AF5C100((char *)(v113 + 40 * *v114), (char *)(v113 + 40 * *v116), v113 + 40 * v117, v141);
    if (v142) {
      break;
    }
    if (v117 < v115) {
      goto LABEL_154;
    }
    if (v72 > v112[2]) {
      goto LABEL_155;
    }
    *uint64_t v114 = v115;
    v70[2 * v111 + 1] = v117;
    unint64_t v118 = v112[2];
    if (v72 >= v118) {
      goto LABEL_156;
    }
    uint64_t v9 = v112;
    uint64_t v142 = 0;
    unint64_t v69 = v118 - 1;
    memmove(&v70[2 * v72], v116 + 2, 16 * (v118 - 1 - v72));
    v112[2] = v118 - 1;
    uint64_t v8 = v146;
    uint64_t v7 = v150;
    if (v118 <= 2) {
      goto LABEL_131;
    }
  }
LABEL_150:
  swift_bridgeObjectRelease();
  if (v136 < -1) {
    goto LABEL_175;
  }
  *(void *)(v134 + 16) = 0;
  swift_bridgeObjectRelease();
}

uint64_t sub_18AF5BF70(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v23 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = *a4 + 40 * a3 + 32;
    uint64_t v27 = *a4;
    while (2)
    {
      uint64_t v7 = (void *)(v5 + 40 * v4);
      unsigned int v8 = *(unsigned __int8 *)v7;
      uint64_t v9 = v7[1];
      uint64_t v10 = v7[2];
      uint64_t v12 = v7[3];
      uint64_t v11 = v7[4];
      uint64_t v13 = v23;
      uint64_t v24 = v6;
      uint64_t v28 = v4;
      do
      {
        uint64_t v15 = v6 - 72;
        unsigned int v14 = *(unsigned __int8 *)(v6 - 72);
        if (v8 == v14)
        {
          uint64_t v16 = *(void *)(v6 - 48);
          uint64_t v17 = *(void *)(v6 - 40);
          BOOL v18 = v9 == *(void *)(v6 - 64) && v10 == *(void *)(v6 - 56);
          if (v18
            || (uint64_t v25 = *(void *)(v6 - 40),
                uint64_t v26 = *(void *)(v6 - 48),
                unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                uint64_t v17 = v25,
                uint64_t v16 = v26,
                (result & 1) != 0))
          {
            BOOL v19 = v12 == v16 && v11 == v17;
            uint64_t v4 = v28;
            uint64_t v5 = v27;
            if (v19) {
              break;
            }
            unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              break;
            }
          }
          else
          {
            unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            uint64_t v4 = v28;
            uint64_t v5 = v27;
            if ((result & 1) == 0) {
              break;
            }
          }
        }
        else if (v8 >= v14)
        {
          break;
        }
        if (!v5)
        {
          __break(1u);
          return result;
        }
        uint64_t v11 = *(void *)v6;
        uint64_t v20 = *(void *)(v6 - 40);
        *(void *)(v6 - 40) = *(void *)v6;
        v6 -= 40;
        unsigned int v8 = *(unsigned __int8 *)(v6 + 8);
        uint64_t v9 = *(void *)(v6 + 16);
        uint64_t v10 = *(void *)(v6 + 24);
        uint64_t v12 = *(void *)(v6 + 32);
        long long v21 = *(_OWORD *)(v15 + 16);
        *(_OWORD *)(v15 + 40) = *(_OWORD *)v15;
        *(_OWORD *)(v15 + 56) = v21;
        *(void *)(v15 + 72) = v20;
        *(unsigned char *)(v6 - 32) = v8;
        *(void *)(v6 - 24) = v9;
        *(void *)(v6 - 16) = v10;
        *(void *)(v6 - 8) = v12;
        ++v13;
      }
      while (v4 != v13);
      ++v4;
      uint64_t v6 = v24 + 40;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_18AF5C100(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = a1;
  uint64_t v7 = a2 - a1;
  uint64_t v8 = (a2 - a1) / 40;
  uint64_t v9 = a3 - (void)a2;
  uint64_t v10 = (uint64_t)(a3 - (void)a2) / 40;
  if (v8 < v10)
  {
    unint64_t v11 = a3;
    sub_18AF66608(a1, (a2 - a1) / 40, a4);
    uint64_t v12 = &a4[40 * v8];
    if ((unint64_t)v5 >= v11 || v7 < 40)
    {
      uint64_t v5 = v6;
      uint64_t v13 = a4;
      goto LABEL_64;
    }
    uint64_t v13 = a4;
    while (1)
    {
      unsigned int v14 = *v5;
      unsigned int v15 = *v13;
      if (v14 == v15)
      {
        uint64_t v17 = *((void *)v5 + 3);
        uint64_t v16 = *((void *)v5 + 4);
        uint64_t v18 = *((void *)v13 + 3);
        uint64_t v19 = *((void *)v13 + 4);
        BOOL v20 = *((void *)v5 + 1) == *((void *)v13 + 1) && *((void *)v5 + 2) == *((void *)v13 + 2);
        if (v20
          || (uint64_t v52 = *((void *)v5 + 4),
              uint64_t v48 = *((void *)v13 + 3),
              uint64_t v21 = *((void *)v5 + 3),
              char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(),
              uint64_t v18 = v48,
              uint64_t v16 = v52,
              uint64_t v17 = v21,
              (v22 & 1) != 0))
        {
          BOOL v23 = v17 == v18 && v16 == v19;
          uint64_t v12 = &a4[40 * v8];
          unint64_t v11 = a3;
          if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
LABEL_25:
            uint64_t v24 = v5;
            BOOL v20 = v6 == v5;
            v5 += 40;
            if (v20) {
              goto LABEL_18;
            }
LABEL_17:
            long long v25 = *(_OWORD *)v24;
            long long v26 = *((_OWORD *)v24 + 1);
            *((void *)v6 + 4) = *((void *)v24 + 4);
            *(_OWORD *)uint64_t v6 = v25;
            *((_OWORD *)v6 + 1) = v26;
            goto LABEL_18;
          }
        }
        else
        {
          uint64_t v12 = &a4[40 * v8];
          unint64_t v11 = a3;
          if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
            goto LABEL_25;
          }
        }
      }
      else if (v14 < v15)
      {
        goto LABEL_25;
      }
      uint64_t v24 = v13;
      BOOL v20 = v6 == v13;
      v13 += 40;
      if (!v20) {
        goto LABEL_17;
      }
LABEL_18:
      v6 += 40;
      if (v13 >= v12 || (unint64_t)v5 >= v11)
      {
        uint64_t v5 = v6;
        goto LABEL_64;
      }
    }
  }
  sub_18AF66608(a2, (uint64_t)(a3 - (void)a2) / 40, a4);
  uint64_t v12 = &a4[40 * v10];
  uint64_t v13 = a4;
  if (v6 < v5 && v9 >= 40)
  {
    unint64_t v28 = a3 - 40;
    do
    {
      uint64_t v29 = (unsigned __int8 *)(v28 + 40);
      uint64_t v31 = (unsigned __int8 *)(v12 - 40);
      unsigned int v30 = *(v12 - 40);
      unsigned int v32 = *(v5 - 40);
      if (v30 == v32)
      {
        uint64_t v34 = *((void *)v12 - 2);
        uint64_t v33 = *((void *)v12 - 1);
        uint64_t v35 = *((void *)v5 - 2);
        uint64_t v36 = *((void *)v5 - 1);
        if (*((void *)v12 - 4) == *((void *)v5 - 4) && *((void *)v12 - 3) == *((void *)v5 - 3)) {
          goto LABEL_39;
        }
        uint64_t v46 = *((void *)v5 - 2);
        uint64_t v47 = *((void *)v12 - 1);
        uint64_t v45 = *((void *)v5 - 1);
        uint64_t v49 = *((void *)v12 - 2);
        char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v36 = v45;
        uint64_t v35 = v46;
        uint64_t v33 = v47;
        uint64_t v34 = v49;
        if (v38)
        {
LABEL_39:
          BOOL v39 = v34 == v35 && v33 == v36;
          uint64_t v29 = (unsigned __int8 *)(v28 + 40);
          if (!v39 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
LABEL_49:
            BOOL v40 = v29 != (unsigned __int8 *)v5 || v28 >= (unint64_t)v5;
            uint64_t v31 = (unsigned __int8 *)(v5 - 40);
            v5 -= 40;
            goto LABEL_53;
          }
        }
        else
        {
          uint64_t v29 = (unsigned __int8 *)(v28 + 40);
          if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
            goto LABEL_49;
          }
        }
      }
      else if (v30 < v32)
      {
        goto LABEL_49;
      }
      BOOL v40 = v29 != (unsigned __int8 *)v12 || v28 >= (unint64_t)v12;
      v12 -= 40;
LABEL_53:
      uint64_t v13 = a4;
      if (v40)
      {
        long long v41 = *(_OWORD *)v31;
        long long v42 = *((_OWORD *)v31 + 1);
        *(void *)(v28 + 32) = *((void *)v31 + 4);
        *(_OWORD *)unint64_t v28 = v41;
        *(_OWORD *)(v28 + 16) = v42;
      }
      v28 -= 40;
    }
    while (v5 > v6 && v12 > a4);
  }
LABEL_64:
  sub_18AF66608(v13, (v12 - v13) / 40, v5);
  return 1;
}

uint64_t _s32JsonSerializableDeviceCapabilityV10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *_s32JsonSerializableDeviceCapabilityV10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18AF5C578);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *_s32JsonSerializableDeviceCapabilityV10CodingKeysOMa()
{
  return &_s32JsonSerializableDeviceCapabilityV10CodingKeysON;
}

unint64_t sub_18AF5C5B4()
{
  unint64_t result = qword_1E9125D30;
  if (!qword_1E9125D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9125D30);
  }
  return result;
}

unint64_t sub_18AF5C604()
{
  unint64_t result = qword_1E9124C68;
  if (!qword_1E9124C68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9124C68);
  }
  return result;
}

unint64_t sub_18AF5C654()
{
  unint64_t result = qword_1E9124C60;
  if (!qword_1E9124C60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9124C60);
  }
  return result;
}

uint64_t CKRecordValue.CKToSwiftNativeValue()@<X0>(uint64_t a1@<X8>)
{
  swift_getObjectType();
  if (sub_18AF227C8(v1))
  {
    uint64_t v4 = v3;
    uint64_t ObjectType = swift_getObjectType();
    unsigned int v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    swift_unknownObjectRetain();
    v6(ObjectType, v4);
    return swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v9 = v1;
    swift_unknownObjectRetain();
    sub_18AF161EC((uint64_t *)&unk_1E9125D40);
    swift_dynamicCast();
    return sub_18AF5C7B0(&v8, a1);
  }
}

uint64_t sub_18AF5C7B0(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t CKRecordValueProtocol.CKToObjCRecordValue()()
{
  sub_18AF22CB0();
  uint64_t v1 = v0;
  MEMORY[0x1F4188790](v2);
  MEMORY[0x1F4188790](v3);
  uint64_t v4 = *(void (**)(void))(v1 + 16);
  sub_18AF39010();
  v4();
  sub_18AF161EC(&qword_1E9125038);
  if (swift_dynamicCast())
  {
    sub_18AF5C7B0(v9, (uint64_t)v11);
    uint64_t v5 = v12;
    uint64_t v6 = v13;
    sub_18AF25FCC(v11, v12);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
    sub_18AF40A30((uint64_t)v11);
  }
  else
  {
    uint64_t v10 = 0;
    memset(v9, 0, sizeof(v9));
    sub_18AF40194((uint64_t)v9, &qword_1E9124D40);
    sub_18AF39010();
    v4();
    sub_18AF161EC(&qword_1E9124D68);
    swift_dynamicCast();
    return v11[0];
  }
  return v7;
}

void CKRecordKeyValueSetting.subscript.getter()
{
  sub_18AF1855C();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  long long v8 = v7;
  uint64_t v9 = type metadata accessor for Optional();
  sub_18AF22CB0();
  uint64_t v67 = v10;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v64 - v15;
  __n128 v18 = MEMORY[0x1F4188790](v17);
  BOOL v20 = (char *)v64 - v19;
  uint64_t v21 = (void *)MEMORY[0x18C128F60](v6, v4, v18);
  id v22 = objc_msgSend(v0, sel_objectForKey_, v21);

  if (v22)
  {
    uint64_t v23 = sub_18AF227C8(v2);
    if (v23)
    {
      uint64_t v25 = v23;
      uint64_t v26 = v24;
      char v65 = v8;
      uint64_t v66 = (void *)v9;
      uint64_t v27 = *(void (**)(__n128))(v24 + 24);
      uint64_t v28 = type metadata accessor for Optional();
      v64[0] = v64;
      sub_18AF22CB0();
      id v29 = v22;
      uint64_t v31 = v30;
      __n128 v32 = MEMORY[0x1F4188790](v29);
      uint64_t v34 = (char *)v64 - v33;
      v64[1] = v35;
      v27(v32);
      if (sub_18AF436E0((uint64_t)v34, 1, v25) == 1)
      {
        (*(void (**)(char *, uint64_t))(v31 + 8))(v34, v28);
        uint64_t v71 = 0;
        long long v69 = 0u;
        long long v70 = 0u;
      }
      else
      {
        *((void *)&v70 + 1) = v25;
        uint64_t v71 = v26;
        sub_18AF3A5E0((uint64_t *)&v69);
        sub_18AF19278();
        (*(void (**)(void))(v47 + 32))();
      }
      sub_18AF5B20C((uint64_t)&v69, (uint64_t)v68, &qword_1E9124D40);
      sub_18AF161EC(&qword_1E9124D40);
      int v48 = swift_dynamicCast();
      sub_18AF43708((uint64_t)v20, v48 ^ 1u, 1, v2);
      uint64_t v49 = *((void *)&v70 + 1);
      Swift::Int v50 = v66;
      uint64_t v51 = v67;
      (*(void (**)(char *, char *, void *))(v67 + 16))(v16, v20, v66);
      uint64_t v52 = v65;
      if (v49)
      {
        int v53 = sub_18AF436E0((uint64_t)v16, 1, v2);
        uint64_t v54 = sub_18AF18540();
        v55(v54);
        if (v53 == 1)
        {
          if (qword_1EB279458 != -1) {
            swift_once();
          }
          uint64_t v56 = type metadata accessor for Logger();
          sub_18AF412A0(v56, (uint64_t)qword_1EB279440);
          swift_unknownObjectRetain_n();
          uint64_t v57 = Logger.logObject.getter();
          os_log_type_t v58 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v57, v58))
          {
            uint64_t v59 = (uint8_t *)swift_slowAlloc();
            uint64_t v60 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v59 = 138412290;
            v64[0] = v59 + 4;
            self;
            uint64_t v61 = swift_dynamicCastObjCClassUnconditional();
            sub_18AF16CE0(v61);
            swift_unknownObjectRetain();
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            void *v60 = v34;
            Swift::Int v50 = v66;
            swift_unknownObjectRelease_n();
            _os_log_impl(&dword_18AF10000, v57, v58, "Error converting record value %@ to requested type", v59, 0xCu);
            sub_18AF161EC((uint64_t *)&unk_1E9125610);
            swift_arrayDestroy();
            sub_18AF388F8();
            uint64_t v51 = v67;
            sub_18AF388F8();
            swift_unknownObjectRelease();
          }
          else
          {

            swift_unknownObjectRelease_n();
          }
        }
        else
        {
          swift_unknownObjectRelease();
        }
      }
      else
      {
        swift_unknownObjectRelease();
        uint64_t v62 = sub_18AF18540();
        v63(v62);
      }
      (*(void (**)(uint8_t *, char *, void *))(v51 + 32))(v52, v20, v50);
      sub_18AF40194((uint64_t)&v69, &qword_1E9124D40);
    }
    else
    {
      swift_getObjectType();
      CKRecordValue.CKToSwiftNativeValue()((uint64_t)&v69);
      sub_18AF5D058((uint64_t)&v69, (uint64_t)v68);
      sub_18AF161EC((uint64_t *)&unk_1E9125D40);
      int v41 = swift_dynamicCast();
      sub_18AF43708((uint64_t)v13, v41 ^ 1u, 1, v2);
      if (sub_18AF436E0((uint64_t)v13, 1, v2) == 1)
      {
        if (qword_1EB279458 != -1) {
          swift_once();
        }
        uint64_t v42 = type metadata accessor for Logger();
        sub_18AF412A0(v42, (uint64_t)qword_1EB279440);
        swift_unknownObjectRetain_n();
        char v43 = Logger.logObject.getter();
        os_log_type_t v44 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v43, v44))
        {
          uint64_t v45 = (uint8_t *)swift_slowAlloc();
          uint64_t v66 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v45 = 138412290;
          char v65 = v45 + 4;
          self;
          uint64_t v46 = swift_dynamicCastObjCClassUnconditional();
          sub_18AF16CE0(v46);
          swift_unknownObjectRetain();
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v66 = v9;
          swift_unknownObjectRelease_n();
          _os_log_impl(&dword_18AF10000, v43, v44, "Error converting record value %@ to requested type", v45, 0xCu);
          sub_18AF161EC((uint64_t *)&unk_1E9125610);
          swift_arrayDestroy();
          sub_18AF388F8();
          sub_18AF388F8();
        }
        else
        {
          swift_unknownObjectRelease_n();
        }
        swift_unknownObjectRelease();

        sub_18AF40A30((uint64_t)&v69);
      }
      else
      {
        sub_18AF40A30((uint64_t)&v69);
        swift_unknownObjectRelease();
      }
      (*(void (**)(uint8_t *, char *, uint64_t))(v67 + 32))(v8, v13, v9);
    }
    sub_18AF32064();
  }
  else
  {
    sub_18AF32064();
    sub_18AF43708(v36, v37, v38, v39);
  }
}

uint64_t sub_18AF5D058(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_18AF5D0BC()
{
}

#error "18AF5D1C8: call analysis failed (funcsize=62)"

void CKRecordKeyValueSetting.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_18AF1855C();
  a19 = v21;
  a20 = v22;
  uint64_t v23 = v20;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v32 = type metadata accessor for Optional();
  sub_18AF22CB0();
  uint64_t v34 = v33;
  __n128 v36 = MEMORY[0x1F4188790](v35);
  uint64_t v38 = (char *)&a9 - v37;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v34 + 16))((char *)&a9 - v37, v31, v32, v36);
  if (sub_18AF436E0((uint64_t)v38, 1, v25) == 1)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v38, v32);
    uint64_t v39 = 0;
  }
  else
  {
    uint64_t v39 = CKRecordValueProtocol.CKToObjCRecordValue()();
    sub_18AF19278();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v38, v25);
  }
  int v41 = (void *)MEMORY[0x18C128F60](v29, v27);
  swift_bridgeObjectRelease();
  objc_msgSend(v23, sel_setObject_forKeyedSubscript_, v39, v41);
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v31, v32);
  sub_18AF32064();
}

uint64_t (*CKRecordKeyValueSetting.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)
{
  uint64_t v13 = malloc(0x50uLL);
  *a1 = v13;
  void v13[4] = a6;
  v13[5] = v6;
  v13[2] = a4;
  v13[3] = a5;
  *uint64_t v13 = a2;
  v13[1] = a3;
  uint64_t v14 = type metadata accessor for Optional();
  v13[6] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v13[7] = v15;
  size_t v16 = *(void *)(v15 + 64);
  v13[8] = malloc(v16);
  v13[9] = malloc(v16);
  CKRecordKeyValueSetting.subscript.getter();
  return sub_18AF5D464;
}

#error "18AF5D514: call analysis failed (funcsize=59)"

double CKRecordKeyValueSetting.subscript.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (void *)MEMORY[0x18C128F60]();
  id v4 = objc_msgSend(v1, sel_objectForKey_, v3);

  if (v4)
  {
    swift_getObjectType();
    CKRecordValue.CKToSwiftNativeValue()(a1);
    swift_unknownObjectRelease();
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

double sub_18AF5D5E8@<D0>(uint64_t a1@<X8>)
{
  return CKRecordKeyValueSetting.subscript.getter(a1);
}

uint64_t sub_18AF5D610(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v3 = a3[1];
  sub_18AF5B20C(a1, (uint64_t)v6, &qword_1E9125028);
  swift_bridgeObjectRetain();
  return CKRecordKeyValueSetting.subscript.setter((uint64_t)v6, v4, v3);
}

uint64_t CKRecordKeyValueSetting.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  sub_18AF5B20C(a1, (uint64_t)v11, &qword_1E9125028);
  uint64_t v8 = v12;
  if (v12)
  {
    sub_18AF25FCC(v11, v12);
    uint64_t v8 = CKRecordValueProtocol.CKToObjCRecordValue()();
    sub_18AF40A30((uint64_t)v11);
  }
  else
  {
    sub_18AF40194((uint64_t)v11, &qword_1E9125028);
  }
  uint64_t v9 = (void *)MEMORY[0x18C128F60](a2, a3);
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_setObject_forKeyedSubscript_, v8, v9);
  swift_unknownObjectRelease();

  return sub_18AF40194(a1, &qword_1E9125028);
}

void (*CKRecordKeyValueSetting.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t *a1, char a2)
{
  uint64_t v9 = malloc(0x70uLL);
  *a1 = v9;
  v9[12] = a4;
  v9[13] = v4;
  v9[10] = a2;
  v9[11] = a3;
  CKRecordKeyValueSetting.subscript.getter((uint64_t)v9);
  return sub_18AF5D7D4;
}

void sub_18AF5D7D4(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  if (a2)
  {
    uint64_t v4 = v2[10];
    uint64_t v3 = v2[11];
    sub_18AF5B20C(*a1, (uint64_t)(v2 + 5), &qword_1E9125028);
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter((uint64_t)(v2 + 5), v4, v3);
    sub_18AF40194((uint64_t)v2, &qword_1E9125028);
  }
  else
  {
    uint64_t v6 = v2[10];
    uint64_t v5 = v2[11];
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter((uint64_t)v2, v6, v5);
  }

  free(v2);
}

double sub_18AF5D888@<D0>(long long *a1@<X8>)
{
  swift_unknownObjectRetain();
  sub_18AF161EC(&qword_1E9124D68);
  if (swift_dynamicCast())
  {
    if (*((void *)&v9 + 1) >> 60 != 15) {
      goto LABEL_10;
    }
  }
  else
  {
    long long v9 = xmmword_18B1F0420;
  }
  if (qword_1EB279458 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_18AF412A0(v2, (uint64_t)qword_1EB279440);
  swift_unknownObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412290;
    self;
    uint64_t v8 = swift_dynamicCastObjCClassUnconditional();
    swift_unknownObjectRetain();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v6 = v8;
    swift_unknownObjectRelease_n();
    _os_log_impl(&dword_18AF10000, v3, v4, "Error converting record value %@ to requested type", v5, 0xCu);
    sub_18AF161EC((uint64_t *)&unk_1E9125610);
    swift_arrayDestroy();
    MEMORY[0x18C12BB10](v6, -1, -1);
    MEMORY[0x18C12BB10](v5, -1, -1);
  }
  else
  {

    swift_unknownObjectRelease_n();
  }
LABEL_10:
  double result = *(double *)&v9;
  *a1 = v9;
  return result;
}

void sub_18AF5DAB4(uint64_t a1@<X8>)
{
  swift_unknownObjectRetain();
  sub_18AF161EC(&qword_1E9124D68);
  uint64_t v2 = type metadata accessor for Date();
  int v3 = swift_dynamicCast();
  sub_18AF43708(a1, v3 ^ 1u, 1, v2);
  if (sub_18AF436E0(a1, 1, v2) == 1)
  {
    if (qword_1EB279458 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_18AF412A0(v4, (uint64_t)qword_1EB279440);
    swift_unknownObjectRetain_n();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 138412290;
      self;
      uint64_t v9 = swift_dynamicCastObjCClassUnconditional();
      swift_unknownObjectRetain();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v8 = v9;
      swift_unknownObjectRelease_n();
      _os_log_impl(&dword_18AF10000, v5, v6, "Error converting record value %@ to requested type", v7, 0xCu);
      sub_18AF161EC((uint64_t *)&unk_1E9125610);
      swift_arrayDestroy();
      MEMORY[0x18C12BB10](v8, -1, -1);
      MEMORY[0x18C12BB10](v7, -1, -1);
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
  }
}

uint64_t sub_18AF5DCEC()
{
  swift_unknownObjectRetain();
  sub_18AF161EC(&qword_1E9124D68);
  if (swift_dynamicCast())
  {
    if (v8) {
      return v7;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  if (qword_1EB279458 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_18AF412A0(v0, (uint64_t)qword_1EB279440);
  swift_unknownObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    int v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)int v3 = 138412290;
    self;
    uint64_t v6 = swift_dynamicCastObjCClassUnconditional();
    swift_unknownObjectRetain();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v6;
    swift_unknownObjectRelease_n();
    _os_log_impl(&dword_18AF10000, v1, v2, "Error converting record value %@ to requested type", v3, 0xCu);
    sub_18AF161EC((uint64_t *)&unk_1E9125610);
    swift_arrayDestroy();
    MEMORY[0x18C12BB10](v4, -1, -1);
    MEMORY[0x18C12BB10](v3, -1, -1);
  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  return v7;
}

void sub_18AF5DF00(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  swift_unknownObjectRetain();
  sub_18AF161EC(&qword_1E9124D68);
  int v4 = swift_dynamicCast();
  sub_18AF43708(a2, v4 ^ 1u, 1, a1);
  if (sub_18AF436E0(a2, 1, a1) == 1)
  {
    if (qword_1EB279458 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_18AF412A0(v5, (uint64_t)qword_1EB279440);
    swift_unknownObjectRetain_n();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138412290;
      self;
      uint64_t v10 = swift_dynamicCastObjCClassUnconditional();
      swift_unknownObjectRetain();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v9 = v10;
      swift_unknownObjectRelease_n();
      _os_log_impl(&dword_18AF10000, v6, v7, "Error converting record value %@ to requested type", v8, 0xCu);
      sub_18AF161EC((uint64_t *)&unk_1E9125610);
      swift_arrayDestroy();
      MEMORY[0x18C12BB10](v9, -1, -1);
      MEMORY[0x18C12BB10](v8, -1, -1);
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
  }
}

void sub_18AF5E130()
{
  sub_18AF5E12C(*v0, v0[1]);
}

uint64_t sub_18AF5E138@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_18AF5DCEC();
  *a1 = result;
  a1[1] = v3;
  return result;
}

NSData sub_18AF5E170()
{
  return j___s10Foundation4DataV19_bridgeToObjectiveCSo6NSDataCyF();
}

id sub_18AF5E17C(char a1)
{
  id v2 = objc_allocWithZone(NSNumber);

  return objc_msgSend(v2, sel_initWithBool_, a1 & 1);
}

uint64_t sub_18AF5E1C4()
{
  self;
  uint64_t v0 = (void *)swift_dynamicCastObjCClass();
  if (v0) {
    return (uint64_t)objc_msgSend(v0, sel_BOOLValue);
  }
  else {
    return 2;
  }
}

id sub_18AF5E214()
{
  return sub_18AF5E17C(*v0);
}

uint64_t sub_18AF5E21C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_18AF5E1C4();
  *a1 = result;
  return result;
}

id sub_18AF5E244(double a1)
{
  id v2 = objc_allocWithZone(NSNumber);

  return objc_msgSend(v2, sel_initWithDouble_, a1);
}

double sub_18AF5E28C()
{
  self;
  uint64_t v0 = (void *)swift_dynamicCastObjCClass();
  if (v0) {
    objc_msgSend(v0, sel_doubleValue);
  }
  return result;
}

id sub_18AF5E2E8()
{
  return sub_18AF5E244(*v0);
}

void sub_18AF5E2F0(uint64_t a1@<X8>)
{
  sub_18AF5E28C();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3 & 1;
}

id sub_18AF5E320(uint64_t a1)
{
  id v2 = objc_allocWithZone(NSNumber);

  return objc_msgSend(v2, sel_initWithInteger_, a1);
}

id sub_18AF5E368()
{
  return sub_18AF5E320(*v0);
}

id sub_18AF5E370@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id result = sub_18AF5EA28(a1, (SEL *)&selRef_integerValue);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

id sub_18AF5E3A8(uint64_t a1)
{
  id v2 = objc_allocWithZone(NSNumber);

  return objc_msgSend(v2, sel_initWithUnsignedInteger_, a1);
}

id sub_18AF5E3F0()
{
  return sub_18AF5E3A8(*v0);
}

id sub_18AF5E3F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id result = sub_18AF5EA28(a1, (SEL *)&selRef_unsignedIntegerValue);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

id sub_18AF5E430(char a1)
{
  id v2 = objc_allocWithZone(NSNumber);

  return objc_msgSend(v2, sel_initWithChar_, a1);
}

uint64_t sub_18AF5E478()
{
  self;
  uint64_t v0 = (void *)swift_dynamicCastObjCClass();
  uint64_t v1 = v0;
  if (v0) {
    LOBYTE(v0) = objc_msgSend(v0, sel_charValue);
  }
  return v0 | ((v1 == 0) << 8);
}

id sub_18AF5E4E0()
{
  return sub_18AF5E430(*v0);
}

uint64_t sub_18AF5E4E8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_18AF5E478();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

id sub_18AF5E518(unsigned __int8 a1)
{
  id v2 = objc_allocWithZone(NSNumber);

  return objc_msgSend(v2, sel_initWithUnsignedChar_, a1);
}

uint64_t sub_18AF5E560()
{
  self;
  uint64_t v0 = (void *)swift_dynamicCastObjCClass();
  uint64_t v1 = v0;
  if (v0) {
    LODWORD(v0) = objc_msgSend(v0, sel_unsignedCharValue);
  }
  return v0 | ((v1 == 0) << 8);
}

id sub_18AF5E5C4()
{
  return sub_18AF5E518(*v0);
}

uint64_t sub_18AF5E5CC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_18AF5E560();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

id sub_18AF5E5FC(__int16 a1)
{
  id v2 = objc_allocWithZone(NSNumber);

  return objc_msgSend(v2, sel_initWithShort_, a1);
}

uint64_t sub_18AF5E644()
{
  self;
  uint64_t v0 = (void *)swift_dynamicCastObjCClass();
  uint64_t v1 = v0;
  if (v0) {
    int v2 = (unsigned __int16)objc_msgSend(v0, sel_shortValue);
  }
  else {
    int v2 = 0;
  }
  return v2 | ((v1 == 0) << 16);
}

id sub_18AF5E6B4()
{
  return sub_18AF5E5FC(*v0);
}

uint64_t sub_18AF5E6BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_18AF5E644();
  *(_WORD *)a1 = result;
  *(unsigned char *)(a1 + 2) = BYTE2(result) & 1;
  return result;
}

id sub_18AF5E6EC(unsigned __int16 a1)
{
  id v2 = objc_allocWithZone(NSNumber);

  return objc_msgSend(v2, sel_initWithUnsignedShort_, a1);
}

uint64_t sub_18AF5E734()
{
  self;
  uint64_t v0 = (void *)swift_dynamicCastObjCClass();
  uint64_t v1 = v0;
  if (v0) {
    LODWORD(v0) = objc_msgSend(v0, sel_unsignedShortValue);
  }
  return v0 | ((v1 == 0) << 16);
}

id sub_18AF5E798()
{
  return sub_18AF5E6EC(*v0);
}

uint64_t sub_18AF5E7A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_18AF5E734();
  *(_WORD *)a1 = result;
  *(unsigned char *)(a1 + 2) = BYTE2(result) & 1;
  return result;
}

id sub_18AF5E7D0(uint64_t a1)
{
  id v2 = objc_allocWithZone(NSNumber);

  return objc_msgSend(v2, sel_initWithInt_, a1);
}

id sub_18AF5E818()
{
  return sub_18AF5E7D0(*v0);
}

unint64_t sub_18AF5E820@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_18AF5E8A0(a1, (SEL *)&selRef_intValue);
  *(_DWORD *)a2 = result;
  *(unsigned char *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

id sub_18AF5E858(uint64_t a1)
{
  id v2 = objc_allocWithZone(NSNumber);

  return objc_msgSend(v2, sel_initWithUnsignedInt_, a1);
}

unint64_t sub_18AF5E8A0(uint64_t a1, SEL *a2)
{
  self;
  char v3 = (void *)swift_dynamicCastObjCClass();
  char v4 = v3;
  if (v3) {
    uint64_t v5 = [v3 *a2];
  }
  else {
    uint64_t v5 = 0;
  }
  return v5 | ((unint64_t)(v4 == 0) << 32);
}

id sub_18AF5E918()
{
  return sub_18AF5E858(*v0);
}

unint64_t sub_18AF5E920@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_18AF5E8A0(a1, (SEL *)&selRef_unsignedIntValue);
  *(_DWORD *)a2 = result;
  *(unsigned char *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

id sub_18AF5E958(uint64_t a1)
{
  id v2 = objc_allocWithZone(NSNumber);

  return objc_msgSend(v2, sel_initWithLongLong_, a1);
}

id sub_18AF5E9A0()
{
  return sub_18AF5E958(*v0);
}

id sub_18AF5E9A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id result = sub_18AF5EA28(a1, (SEL *)&selRef_longLongValue);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

id sub_18AF5E9E0(uint64_t a1)
{
  id v2 = objc_allocWithZone(NSNumber);

  return objc_msgSend(v2, sel_initWithUnsignedLongLong_, a1);
}

id sub_18AF5EA28(uint64_t a1, SEL *a2)
{
  self;
  id result = (id)swift_dynamicCastObjCClass();
  if (result) {
    return [result *a2];
  }
  return result;
}

id sub_18AF5EA80()
{
  return sub_18AF5E9E0(*v0);
}

id sub_18AF5EA88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id result = sub_18AF5EA28(a1, (SEL *)&selRef_unsignedLongLongValue);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

id sub_18AF5EAC0(float a1)
{
  id v2 = objc_allocWithZone(NSNumber);
  *(float *)&double v3 = a1;

  return objc_msgSend(v2, sel_initWithFloat_, v3);
}

unint64_t sub_18AF5EB08()
{
  self;
  uint64_t v0 = (void *)swift_dynamicCastObjCClass();
  uint64_t v1 = v0;
  if (v0)
  {
    objc_msgSend(v0, sel_floatValue);
    uint64_t v3 = v2;
  }
  else
  {
    uint64_t v3 = 0;
  }
  return v3 | ((unint64_t)(v1 == 0) << 32);
}

id sub_18AF5EB80()
{
  return sub_18AF5EAC0(*v0);
}

unint64_t sub_18AF5EB88@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = sub_18AF5EB08();
  *(_DWORD *)a1 = result;
  *(unsigned char *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

id sub_18AF5EBB8()
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CA48]), sel_init);
  type metadata accessor for Array();
  swift_getWitnessTable();
  Sequence.forEach(_:)();
  return v1;
}

uint64_t sub_18AF5EC74(uint64_t a1, void *a2)
{
  return swift_unknownObjectRelease();
}

id sub_18AF5ECD0()
{
  return sub_18AF5EBB8();
}

uint64_t sub_18AF5ECE8@<X0>(uint64_t *a1@<X8>)
{
  return sub_18AF5ED70(MEMORY[0x1E4F27EC0], MEMORY[0x1E4FBB1A0], (uint64_t)&protocol witness table for String, a1);
}

uint64_t sub_18AF5ED24@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = type metadata accessor for Date();
  a1[4] = (uint64_t)&protocol witness table for Date;
  sub_18AF3A5E0(a1);
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_18AF5ED70@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = v4;
  uint64_t result = a1(v8);
  a4[3] = a2;
  a4[4] = a3;
  *a4 = result;
  a4[1] = v11;
  return result;
}

uint64_t sub_18AF5EDB8@<X0>(uint64_t *a1@<X8>)
{
  return sub_18AF5ED70(MEMORY[0x1E4F27778], MEMORY[0x1E4F277C0], (uint64_t)&protocol witness table for Data, a1);
}

id sub_18AF5EDF4@<X0>(void *a1@<X8>)
{
  if (CFNumberIsFloatType((CFNumberRef)v1))
  {
    id result = objc_msgSend(v1, sel_doubleValue);
    uint64_t v5 = &protocol witness table for Double;
    uint64_t v6 = MEMORY[0x1E4FBB3D0];
  }
  else
  {
    id result = objc_msgSend(v1, sel_longLongValue);
    id v4 = result;
    uint64_t v5 = &protocol witness table for Int64;
    uint64_t v6 = MEMORY[0x1E4FBC1C8];
  }
  a1[3] = v6;
  a1[4] = v5;
  *a1 = v4;
  return result;
}

void sub_18AF5EE74()
{
  sub_18AF1855C();
  id v1 = v0;
  uint64_t v13 = type metadata accessor for NSFastEnumerationIterator();
  sub_18AF22CB0();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSArray.makeIterator()();
  NSFastEnumerationIterator.next()();
  if (v17)
  {
    uint64_t v7 = MEMORY[0x1E4FBC860];
    do
    {
      sub_18AF5F658(&v16, v15);
      sub_18AF161EC(&qword_1E9124D68);
      swift_dynamicCast();
      swift_getObjectType();
      CKRecordValue.CKToSwiftNativeValue()((uint64_t)v15);
      sub_18AF5D058((uint64_t)v15, (uint64_t)v14);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_18AF6556C();
        uint64_t v7 = v9;
      }
      unint64_t v8 = *(void *)(v7 + 16);
      if (v8 >= *(void *)(v7 + 24) >> 1)
      {
        sub_18AF6556C();
        uint64_t v7 = v10;
      }
      *(void *)(v7 + 16) = v8 + 1;
      sub_18AF5C7B0(v14, v7 + 40 * v8 + 32);
      swift_unknownObjectRelease();
      sub_18AF40A30((uint64_t)v15);
      NSFastEnumerationIterator.next()();
    }
    while (v17);
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v13);
  sub_18AF161EC((uint64_t *)&unk_1E9125D40);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v1[3] = (Class)sub_18AF34EA0(0, (unint64_t *)&unk_1E9125D60);
  v1[4] = (Class)&protocol witness table for NSArray;
  *id v1 = isa;
  sub_18AF32064();
}

uint64_t CKRecordValueStoreIterator.init(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id v4 = objc_msgSend((id)swift_unknownObjectRetain(), sel_allKeys);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t result = swift_unknownObjectRelease();
  *a2 = a1;
  a2[1] = v5;
  a2[2] = 0;
  return result;
}

void CKRecordValueStoreIterator.next()(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  if (v4 >= *(void *)(v3 + 16))
  {
    *(void *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else
  {
    if (v4 < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v5 = v1;
      uint64_t v6 = v3 + 16 * v4;
      uint64_t v7 = *(void *)(v6 + 32);
      uint64_t v8 = *(void *)(v6 + 40);
      uint64_t v9 = *(void **)v1;
      swift_bridgeObjectRetain();
      uint64_t v10 = (void *)MEMORY[0x18C128F60](v7, v8);
      id v11 = objc_msgSend(v9, sel_objectForKey_, v10);

      if (v11)
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        CKRecordValue.CKToSwiftNativeValue()((uint64_t)v12);
        swift_unknownObjectRelease_n();
        *(void *)(v5 + 16) = v4 + 1;
        *(void *)a1 = v7;
        *(void *)(a1 + 8) = v8;
        sub_18AF5C7B0(v12, a1 + 16);
        return;
      }
    }
    __break(1u);
  }
}

void CKRecordValueStore.makeIterator()(void *a1@<X8>)
{
  id v3 = v1;
  id v4 = objc_msgSend(v3, sel_allKeys);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  *a1 = v3;
  a1[1] = v5;
  a1[2] = 0;
}

void sub_18AF5F264(void *a1@<X8>)
{
  id v2 = *v1;
  CKRecordValueStore.makeIterator()(a1);
}

uint64_t sub_18AF5F2B0()
{
  return 2;
}

uint64_t sub_18AF5F2B8()
{
  return sub_18AFFF5D0();
}

uint64_t sub_18AF5F2DC()
{
  return sub_18AFFF634();
}

uint64_t sub_18AF5F300()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

unint64_t sub_18AF5F37C(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)(a3 + 16) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_18AF5F39C(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_18AF5F3F0()
{
  unint64_t result = qword_1E9125D50;
  if (!qword_1E9125D50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9125D50);
  }
  return result;
}

uint64_t sub_18AF5F444()
{
  return 24;
}

__n128 sub_18AF5F450(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_18AF5F46C()
{
  return 8;
}

void *sub_18AF5F478(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t destroy for CKRecordValueStoreIterator()
{
  swift_unknownObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s8CloudKit26CKRecordValueStoreIteratorVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CKRecordValueStoreIterator(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

__n128 initializeWithTake for CKRecordValueStoreIterator(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for CKRecordValueStoreIterator(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for CKRecordValueStoreIterator(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CKRecordValueStoreIterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CKRecordValueStoreIterator()
{
  return &type metadata for CKRecordValueStoreIterator;
}

_OWORD *sub_18AF5F658(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_18AF5F668(uint64_t a1)
{
  return sub_18AF5EC74(a1, *(void **)(v1 + 32));
}

id CKSyncEngine.Configuration.database.getter()
{
  return *v0;
}

void CKSyncEngine.Configuration.database.setter(void *a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*CKSyncEngine.Configuration.database.modify())()
{
  return nullsub_2;
}

uint64_t CKSyncEngine.Configuration.stateSerialization.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  unint64_t v3 = *(void *)(v1 + 16);
  *a1 = v2;
  a1[1] = v3;
  return sub_18AF5F6E8(v2, v3);
}

uint64_t sub_18AF5F6E8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_18AF5F6FC(a1, a2);
  }
  return a1;
}

uint64_t sub_18AF5F6FC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t CKSyncEngine.Configuration.stateSerialization.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t result = sub_18AF5B00C(*(void *)(v1 + 8), *(void *)(v1 + 16));
  *(void *)(v1 + 8) = v2;
  *(void *)(v1 + 16) = v3;
  return result;
}

uint64_t (*CKSyncEngine.Configuration.stateSerialization.modify())()
{
  return nullsub_2;
}

uint64_t CKSyncEngine.Configuration.delegate.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t CKSyncEngine.Configuration.delegate.setter()
{
  sub_18AF305FC();
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v0;
  return result;
}

uint64_t (*CKSyncEngine.Configuration.delegate.modify())()
{
  return nullsub_2;
}

uint64_t CKSyncEngine.Configuration.automaticallySync.getter()
{
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t CKSyncEngine.Configuration.automaticallySync.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 40) = result;
  return result;
}

uint64_t (*CKSyncEngine.Configuration.automaticallySync.modify())()
{
  return nullsub_2;
}

uint64_t CKSyncEngine.Configuration.subscriptionID.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CKSyncEngine.Configuration.subscriptionID.setter()
{
  sub_18AF305FC();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = v2;
  *(void *)(v1 + 56) = v0;
  return result;
}

uint64_t (*CKSyncEngine.Configuration.subscriptionID.modify())()
{
  return nullsub_2;
}

uint64_t CKSyncEngine.Configuration.delegatePrivate.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t CKSyncEngine.Configuration.delegatePrivate.setter()
{
  sub_18AF305FC();
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v1 + 64) = v2;
  *(void *)(v1 + 72) = v0;
  return result;
}

uint64_t (*CKSyncEngine.Configuration.delegatePrivate.modify())()
{
  return nullsub_2;
}

uint64_t CKSyncEngine.Configuration.apsMachServiceName.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CKSyncEngine.Configuration.apsMachServiceName.setter()
{
  sub_18AF305FC();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 80) = v2;
  *(void *)(v1 + 88) = v0;
  return result;
}

uint64_t (*CKSyncEngine.Configuration.apsMachServiceName.modify())()
{
  return nullsub_2;
}

xpc_object_t CKSyncEngine.Configuration.xpcActivityCriteriaOverrides.getter()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_beginAccess();
  xpc_object_t result = *(xpc_object_t *)(v1 + 16);
  if (result) {
    return xpc_copy(result);
  }
  return result;
}

uint64_t sub_18AF5FA20()
{
  uint64_t v0 = (void *)swift_unknownObjectRetain();
  return CKSyncEngine.Configuration.xpcActivityCriteriaOverrides.setter(v0);
}

uint64_t CKSyncEngine.Configuration.xpcActivityCriteriaOverrides.setter(void *a1)
{
  uint64_t v2 = *(void *)(v1 + 96);
  if (a1)
  {
    xpc_object_t v3 = xpc_copy(a1);
    swift_unknownObjectRelease();
  }
  else
  {
    xpc_object_t v3 = 0;
  }
  sub_18AF393BC();
  *(void *)(v2 + 16) = v3;
  return swift_unknownObjectRelease();
}

void (*CKSyncEngine.Configuration.xpcActivityCriteriaOverrides.modify(void *a1))(uint64_t a1, char a2)
{
  xpc_object_t v3 = malloc(0x58uLL);
  *a1 = v3;
  id v4 = v3 + 9;
  v3[10] = v1;
  uint64_t v5 = *(void *)(v1 + 96);
  swift_beginAccess();
  xpc_object_t v6 = *(xpc_object_t *)(v5 + 16);
  if (v6) {
    xpc_object_t v6 = xpc_copy(v6);
  }
  void *v4 = v6;
  return sub_18AF5FB34;
}

void sub_18AF5FB34(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 72);
  uint64_t v4 = *(void *)(*(void *)(*(void *)a1 + 80) + 96);
  if (a2)
  {
    if (v3) {
      xpc_object_t v5 = xpc_copy(*(xpc_object_t *)(*(void *)a1 + 72));
    }
    else {
      xpc_object_t v5 = 0;
    }
    sub_18AF393BC();
    *(void *)(v4 + 16) = v5;
    swift_unknownObjectRelease();
  }
  else
  {
    if (v3)
    {
      xpc_object_t v6 = xpc_copy(*(xpc_object_t *)(*(void *)a1 + 72));
      swift_unknownObjectRelease();
    }
    else
    {
      xpc_object_t v6 = 0;
    }
    sub_18AF393BC();
    *(void *)(v4 + 16) = v6;
  }
  swift_unknownObjectRelease();

  free(v2);
}

uint64_t CKSyncEngine.Configuration.useOpportunisticPushTopic.getter()
{
  return *(unsigned __int8 *)(v0 + 104);
}

uint64_t CKSyncEngine.Configuration.useOpportunisticPushTopic.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 104) = result;
  return result;
}

uint64_t (*CKSyncEngine.Configuration.useOpportunisticPushTopic.modify())()
{
  return nullsub_2;
}

uint64_t CKSyncEngine.Configuration.allowFetchAndModifyConcurrently.getter()
{
  return *(unsigned __int8 *)(v0 + 105);
}

uint64_t CKSyncEngine.Configuration.allowFetchAndModifyConcurrently.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 105) = result;
  return result;
}

uint64_t (*CKSyncEngine.Configuration.allowFetchAndModifyConcurrently.modify())()
{
  return nullsub_2;
}

void *CKSyncEngine.Configuration.assetDownloadStagingManager.getter()
{
  uint64_t v1 = *(void **)(v0 + 112);
  id v2 = v1;
  return v1;
}

void CKSyncEngine.Configuration.assetDownloadStagingManager.setter(uint64_t a1)
{
  *(void *)(v1 + 112) = a1;
}

uint64_t (*CKSyncEngine.Configuration.assetDownloadStagingManager.modify())()
{
  return nullsub_2;
}

uint64_t CKSyncEngine.Configuration.useUniqueActivityIdentifiers.getter()
{
  return *(unsigned __int8 *)(v0 + 120);
}

uint64_t CKSyncEngine.Configuration.useUniqueActivityIdentifiers.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 120) = result;
  return result;
}

uint64_t (*CKSyncEngine.Configuration.useUniqueActivityIdentifiers.modify())()
{
  return nullsub_2;
}

uint64_t CKSyncEngine.Configuration.continueSendingChangesAfterFailure.getter()
{
  return *(unsigned __int8 *)(v0 + 121);
}

uint64_t CKSyncEngine.Configuration.continueSendingChangesAfterFailure.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 121) = result;
  return result;
}

uint64_t (*CKSyncEngine.Configuration.continueSendingChangesAfterFailure.modify())()
{
  return nullsub_2;
}

uint64_t CKSyncEngine.Configuration.isImmediatePushSyncEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 122);
}

uint64_t CKSyncEngine.Configuration.isImmediatePushSyncEnabled.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 122) = result;
  return result;
}

uint64_t (*CKSyncEngine.Configuration.isImmediatePushSyncEnabled.modify())()
{
  return nullsub_2;
}

uint64_t CKSyncEngine.Configuration.delegateInternal.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_18AF5FD74(v1 + 128, a1);
}

uint64_t sub_18AF5FD74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18AF161EC(&qword_1E9125530);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t CKSyncEngine.Configuration.delegateInternal.setter(uint64_t a1)
{
  return sub_18AF5FDE4(a1, v1 + 128);
}

uint64_t sub_18AF5FDE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18AF161EC(&qword_1E9125530);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*CKSyncEngine.Configuration.delegateInternal.modify())()
{
  return nullsub_2;
}

uint64_t CKSyncEngine.Configuration.repeatZoneModificationsUntilNoneLeft.getter()
{
  return *(unsigned __int8 *)(v0 + 168);
}

uint64_t CKSyncEngine.Configuration.repeatZoneModificationsUntilNoneLeft.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 168) = result;
  return result;
}

uint64_t (*CKSyncEngine.Configuration.repeatZoneModificationsUntilNoneLeft.modify())()
{
  return nullsub_2;
}

void *CKSyncEngine.Configuration.objcEngine.getter()
{
  uint64_t v1 = *(void **)(v0 + 176);
  id v2 = v1;
  return v1;
}

void CKSyncEngine.Configuration.objcEngine.setter(uint64_t a1)
{
  *(void *)(v1 + 176) = a1;
}

uint64_t (*CKSyncEngine.Configuration.objcEngine.modify())()
{
  return nullsub_2;
}

uint64_t CKSyncEngine.Configuration.init(database:stateSerialization:delegate:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  *(unsigned char *)(a5 + 40) = 1;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  sub_18AF161EC((uint64_t *)&unk_1E9125520);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0;
  *(void *)(a5 + 96) = v11;
  *(unsigned char *)(a5 + 105) = 0;
  *(void *)(a5 + 112) = 0;
  *(_WORD *)(a5 + 120) = 0;
  *(_OWORD *)(a5 + 128) = 0u;
  *(_OWORD *)(a5 + 144) = 0u;
  *(void *)(a5 + 160) = 0;
  *(unsigned char *)(a5 + 168) = 1;
  *(void *)(a5 + 176) = 0;
  *(void *)a5 = a1;
  *(void *)(a5 + 8) = v9;
  *(void *)(a5 + 16) = v10;
  *(void *)(a5 + 24) = a3;
  *(void *)(a5 + 32) = a4;
  uint64_t result = CKCurrentProcessIsDaemon();
  *(unsigned char *)(a5 + 122) = result ^ 1;
  *(unsigned char *)(a5 + 104) = 0;
  return result;
}

uint64_t sub_18AF5FFC8@<X0>(uint64_t a1@<X8>)
{
  id v2 = v1;
  id v4 = objc_msgSend(v1, sel_stateSerialization);
  if (v4)
  {
    xpc_object_t v5 = v4;
    id v6 = objc_msgSend(v4, sel_data);

    uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  id v10 = objc_msgSend(v2, sel_delegate);
  if (v10)
  {
    id v29 = v10;
    swift_unknownObjectRetain();
    sub_18AF161EC(&qword_1E9124EF8);
    sub_18AF161EC((uint64_t *)&unk_1E91250F0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      uint64_t v28 = 0;
      long long v26 = 0u;
      long long v27 = 0u;
    }
    sub_18AF610CC((uint64_t)&v26, (uint64_t)v30);
    goto LABEL_8;
  }
  id v11 = objc_msgSend(v2, sel_dataSource);
  if (!v11)
  {
    sub_18AF5B00C(v7, v9);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v12 = v11;
  objc_msgSend(objc_allocWithZone((Class)CKSyncEngineDataSourceAdapter), sel_initWithDataSource_, v11);
  id v29 = v12;
  swift_unknownObjectRetain();
  sub_18AF161EC(&qword_1E9124FC0);
  sub_18AF161EC((uint64_t *)&unk_1E91250F0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v28 = 0;
    long long v26 = 0u;
    long long v27 = 0u;
  }
  sub_18AF610CC((uint64_t)&v26, (uint64_t)v30);
  if (objc_msgSend(v12, sel_respondsToSelector_, sel_recordZonesToSaveForSyncEngine_))
  {
    swift_unknownObjectRelease();
LABEL_15:
    char v25 = 0;
    goto LABEL_16;
  }
  unsigned int v13 = objc_msgSend(v12, sel_respondsToSelector_, sel_recordZoneIDsToDeleteForSyncEngine_);
  swift_unknownObjectRelease();
  if (v13) {
    goto LABEL_15;
  }
LABEL_8:
  char v25 = 1;
LABEL_16:
  sub_18AF161EC(&qword_1E9125100);
  swift_initStackObject();
  uint64_t v14 = swift_unknownObjectRetain();
  sub_18AF6A54C(v14);
  type metadata accessor for CKSyncEngineObjCDelegateAdapter();
  swift_allocObject();
  uint64_t v15 = sub_18AF6BE50();
  id v16 = objc_msgSend(v2, sel_database);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  sub_18AF161EC((uint64_t *)&unk_1E9125520);
  uint64_t v17 = swift_allocObject();
  *(void *)(a1 + 96) = v17;
  *(void *)(v17 + 16) = 0;
  __n128 v18 = (void *)(v17 + 16);
  *(unsigned char *)(a1 + 105) = 0;
  *(void *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 168) = 1;
  *(void *)(a1 + 176) = 0;
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v15;
  *(void *)(a1 + 32) = &off_1ED7EE188;
  swift_retain();
  sub_18AF5F6E8(v7, v9);
  *(unsigned char *)(a1 + 122) = CKCurrentProcessIsDaemon() ^ 1;
  *(unsigned char *)(a1 + 104) = 0;
  *(void *)(a1 + 48) = sub_18AF61134(v2, (SEL *)&selRef_subscriptionID);
  *(void *)(a1 + 56) = v19;
  *(unsigned char *)(a1 + 40) = objc_msgSend(v2, sel_automaticallySync);
  id v20 = objc_msgSend(v2, sel_xpcActivityCriteriaOverrides);
  if (v20)
  {
    xpc_object_t v21 = xpc_copy(v20);
    swift_unknownObjectRelease();
  }
  else
  {
    xpc_object_t v21 = 0;
  }
  sub_18AF393BC();
  *__n128 v18 = v21;
  swift_unknownObjectRelease();
  *(unsigned char *)(a1 + 120) = objc_msgSend(v2, sel_useUniqueActivityIdentifiers);
  *(unsigned char *)(a1 + 121) = objc_msgSend(v2, sel_continueSendingChangesAfterFailure);
  *(void *)(a1 + 80) = sub_18AF61134(v2, (SEL *)&selRef_apsMachServiceName);
  *(void *)(a1 + 88) = v22;
  *(unsigned char *)(a1 + 104) = objc_msgSend(v2, sel_useOpportunisticPushTopic);
  *(unsigned char *)(a1 + 105) = objc_msgSend(v2, sel_allowFetchAndModifyConcurrently);
  *(void *)(a1 + 112) = objc_msgSend(v2, sel_assetDownloadStagingManager);
  unsigned __int8 v23 = objc_msgSend(v2, sel_isImmediatePushSyncEnabled);
  sub_18AF5B00C(v7, v9);
  swift_unknownObjectRelease();
  *(unsigned char *)(a1 + 122) = v23;
  *(unsigned char *)(a1 + 168) = v25;
  *(void *)(a1 + 64) = v15;
  *(void *)(a1 + 72) = &off_1ED7EE178;
  return sub_18AF5FDE4((uint64_t)v30, a1 + 128);
}

unint64_t CKSyncEngine.Configuration.description.getter()
{
  uint64_t v1 = v0;
  id v2 = *v0;
  id v3 = objc_msgSend(v2, sel_description);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v6 = v5;

  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);

  swift_bridgeObjectRelease();
  unint64_t v8 = (unint64_t)v1[2];
  if (v8 >> 60 == 15)
  {
    v9._uint64_t countAndFlagsBits = 0xD000000000000017;
    v9._object = (void *)0x800000018B1D20C0;
    String.append(_:)(v9);
  }
  else
  {
    uint64_t v10 = (uint64_t)v1[1];
    sub_18AF5F6FC(v10, v8);
    _StringGuts.grow(_:)(22);
    v11._object = (void *)0x800000018B1D2160;
    v11._uint64_t countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v11);
    _print_unlocked<A, B>(_:_:)();
    v12._uint64_t countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    sub_18AF5B00C(v10, v8);
  }
  if (*((unsigned char *)v1 + 40) == 1)
  {
    v13._object = (void *)0x800000018B1D2140;
    v13._uint64_t countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v13);
  }
  id v14 = v1[7];
  if (v14)
  {
    uint64_t v15 = (uint64_t)v1[6];
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = v15;
    v16._object = v14;
    String.append(_:)(v16);
    v17._uint64_t countAndFlagsBits = 0xD000000000000010;
    v17._object = (void *)0x800000018B1D2120;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
  }
  id v18 = v1[11];
  if (v18)
  {
    uint64_t v19 = (uint64_t)v1[10];
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    v20._uint64_t countAndFlagsBits = v19;
    v20._object = v18;
    String.append(_:)(v20);
    v21._uint64_t countAndFlagsBits = 0xD000000000000014;
    v21._object = (void *)0x800000018B1D2100;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
  }
  uint64_t v22 = v1[12];
  swift_beginAccess();
  unsigned __int8 v23 = (void *)v22[2];
  if (v23 && xpc_copy(v23))
  {
    _StringGuts.grow(_:)(32);
    v24._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    v24._object = (void *)0x800000018B1D20E0;
    String.append(_:)(v24);
    swift_getObjectType();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v25._uint64_t countAndFlagsBits = 0;
    v25._object = (void *)0xE000000000000000;
    String.append(_:)(v25);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  return 0xD000000000000018;
}

xpc_object_t sub_18AF60790@<X0>(void *a1@<X8>)
{
  xpc_object_t result = CKSyncEngine.Configuration.xpcActivityCriteriaOverrides.getter();
  *a1 = result;
  return result;
}

void _s13ConfigurationVwxx(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >> 60 != 15) {
    sub_18AF5AF68(*(void *)(a1 + 8), v2);
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  if (*(void *)(a1 + 152)) {
    sub_18AF40A30(a1 + 128);
  }
  id v3 = *(void **)(a1 + 176);
}

uint64_t _s13ConfigurationVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  xpc_object_t v5 = (_OWORD *)(a1 + 8);
  id v6 = (uint64_t *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  id v8 = v4;
  if (v7 >> 60 == 15)
  {
    *xpc_object_t v5 = *(_OWORD *)v6;
  }
  else
  {
    uint64_t v9 = *v6;
    sub_18AF5F6FC(*v6, v7);
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v7;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v10;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v11 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v11;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  Swift::String v12 = *(void **)(a2 + 112);
  *(void *)(a1 + 112) = v12;
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(_WORD *)(a1 + 121) = *(_WORD *)(a2 + 121);
  uint64_t v13 = *(void *)(a2 + 152);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  id v14 = v12;
  if (v13)
  {
    uint64_t v15 = *(void *)(a2 + 160);
    *(void *)(a1 + 152) = v13;
    *(void *)(a1 + 160) = v15;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v13 - 8))(a1 + 128, a2 + 128, v13);
  }
  else
  {
    long long v16 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v16;
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
  }
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  Swift::String v17 = *(void **)(a2 + 176);
  *(void *)(a1 + 176) = v17;
  id v18 = v17;
  return a1;
}

uint64_t _s13ConfigurationVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  xpc_object_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  unint64_t v7 = (uint64_t *)(a2 + 8);
  unint64_t v8 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16) >> 60 == 15)
  {
    if (v8 >> 60 != 15)
    {
      uint64_t v9 = *v7;
      sub_18AF5F6FC(*v7, *(void *)(a2 + 16));
      *(void *)(a1 + 8) = v9;
      *(void *)(a1 + 16) = v8;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v8 >> 60 == 15)
  {
    sub_18AF60C24(a1 + 8);
LABEL_6:
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v7;
    goto LABEL_8;
  }
  uint64_t v10 = *v7;
  sub_18AF5F6FC(*v7, *(void *)(a2 + 16));
  uint64_t v11 = *(void *)(a1 + 8);
  unint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v10;
  *(void *)(a1 + 16) = v8;
  sub_18AF5AF68(v11, v12);
LABEL_8:
  uint64_t v13 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 32) = v13;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 72) = v14;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  uint64_t v15 = *(void **)(a1 + 112);
  long long v16 = *(void **)(a2 + 112);
  *(void *)(a1 + 112) = v16;
  id v17 = v16;

  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(unsigned char *)(a1 + 121) = *(unsigned char *)(a2 + 121);
  *(unsigned char *)(a1 + 122) = *(unsigned char *)(a2 + 122);
  uint64_t v18 = *(void *)(a2 + 152);
  if (!*(void *)(a1 + 152))
  {
    if (v18)
    {
      *(void *)(a1 + 152) = v18;
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      (**(void (***)(uint64_t, uint64_t))(v18 - 8))(a1 + 128, a2 + 128);
      goto LABEL_15;
    }
LABEL_14:
    long long v19 = *(_OWORD *)(a2 + 128);
    long long v20 = *(_OWORD *)(a2 + 144);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(_OWORD *)(a1 + 128) = v19;
    *(_OWORD *)(a1 + 144) = v20;
    goto LABEL_15;
  }
  if (!v18)
  {
    sub_18AF40A30(a1 + 128);
    goto LABEL_14;
  }
  sub_18AF60C78((uint64_t *)(a1 + 128), (uint64_t *)(a2 + 128));
LABEL_15:
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  Swift::String v21 = *(void **)(a1 + 176);
  uint64_t v22 = *(void **)(a2 + 176);
  *(void *)(a1 + 176) = v22;
  id v23 = v22;

  return a1;
}

uint64_t sub_18AF60C24(uint64_t a1)
{
  return a1;
}

uint64_t *sub_18AF60C78(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    id v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        xpc_object_t result = (uint64_t *)swift_release();
        *id v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *xpc_object_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *id v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

void *_s13ConfigurationVwtk(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xB8uLL);
}

uint64_t _s13ConfigurationVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v5 = (_OWORD *)(a2 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if (v6 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v7 = *(void *)(a2 + 16);
  if (v7 >> 60 == 15)
  {
    sub_18AF60C24(a1 + 8);
LABEL_4:
    *(_OWORD *)(a1 + 8) = *v5;
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)v5;
  *(void *)(a1 + 16) = v7;
  sub_18AF5AF68(v8, v6);
LABEL_6:
  uint64_t v9 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_unknownObjectRelease();
  *(void *)(a1 + 32) = v9;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_unknownObjectRelease();
  uint64_t v12 = *(void *)(a2 + 80);
  uint64_t v13 = *(void *)(a2 + 88);
  *(void *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = v12;
  *(void *)(a1 + 88) = v13;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_release();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  uint64_t v14 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);

  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(unsigned char *)(a1 + 121) = *(unsigned char *)(a2 + 121);
  *(unsigned char *)(a1 + 122) = *(unsigned char *)(a2 + 122);
  if (*(void *)(a1 + 152)) {
    sub_18AF40A30(a1 + 128);
  }
  long long v15 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v15;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  long long v16 = *(void **)(a1 + 176);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);

  return a1;
}

uint64_t _s13ConfigurationVwet(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 184))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s13ConfigurationVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)xpc_object_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 184) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)xpc_object_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 184) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CKSyncEngine.Configuration()
{
  return &type metadata for CKSyncEngine.Configuration;
}

uint64_t sub_18AF610CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18AF161EC(&qword_1E9125530);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_18AF61134(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0;
  }
  id v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t sub_18AF61194()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_18AF611F4()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t sub_18AF61244()
{
  unint64_t result = qword_1E9124CC8;
  if (!qword_1E9124CC8)
  {
    type metadata accessor for Scope(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9124CC8);
  }
  return result;
}

id CKShare.BlockedIdentity.__allocating_init(userIdentity:)(uint64_t a1)
{
  id v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR____TtCE8CloudKitCSo7CKShare15BlockedIdentity_userIdentity] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id CKShare.BlockedIdentity.userIdentity.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtCE8CloudKitCSo7CKShare15BlockedIdentity_userIdentity);
}

void sub_18AF612F4()
{
}

id CKShare.BlockedIdentity.init(userIdentity:)(uint64_t a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v1[OBJC_IVAR____TtCE8CloudKitCSo7CKShare15BlockedIdentity_userIdentity] = a1;
  v5.receiver = v1;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

unint64_t CKShare.BlockedIdentity.description.getter()
{
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  id v1 = *(id *)(v0 + OBJC_IVAR____TtCE8CloudKitCSo7CKShare15BlockedIdentity_userIdentity);
  id v2 = objc_msgSend(v1, sel_description);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  objc_super v5 = v4;

  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);

  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 23842;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  return 0xD00000000000001FLL;
}

id CKShare.BlockedIdentity.copy(with:)@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtCE8CloudKitCSo7CKShare15BlockedIdentity_userIdentity), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_18AF34EA0(0, (unint64_t *)&unk_1E9125A70);
  swift_dynamicCast();
  objc_super v5 = (char *)objc_allocWithZone(ObjectType);
  *(void *)&v5[OBJC_IVAR____TtCE8CloudKitCSo7CKShare15BlockedIdentity_userIdentity] = v8;
  v7.receiver = v5;
  v7.super_class = ObjectType;
  id result = objc_msgSendSuper2(&v7, sel_init);
  a1[3] = ObjectType;
  *a1 = result;
  return result;
}

uint64_t CKShare.BlockedIdentity.isEqual(_:)(uint64_t a1)
{
  swift_getObjectType();
  sub_18AF55238(a1, (uint64_t)v6);
  if (!v7)
  {
    sub_18AF551C4((uint64_t)v6);
    goto LABEL_5;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    char v3 = 0;
    return v3 & 1;
  }
  sub_18AF34EA0(0, (unint64_t *)&unk_1E9125600);
  id v2 = *(id *)&v5[OBJC_IVAR____TtCE8CloudKitCSo7CKShare15BlockedIdentity_userIdentity];
  char v3 = static NSObject.== infix(_:_:)();

  return v3 & 1;
}

id CKShare.BlockedIdentity.hash.getter()
{
  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtCE8CloudKitCSo7CKShare15BlockedIdentity_userIdentity), sel_hash);
}

id CKShare.BlockedIdentity.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CKShare.BlockedIdentity()
{
  return self;
}

uint64_t method lookup function for CKShare.BlockedIdentity(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CKShare.BlockedIdentity);
}

uint64_t dispatch thunk of CKShare.BlockedIdentity.__allocating_init(userIdentity:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

void (*CKFetchRecordZonesOperation.perRecordZoneResultBlock.getter())(uint64_t a1, void *a2, char a3)
{
  id result = (void (*)(uint64_t, void *, char))objc_msgSend(v0, sel_perRecordZoneCompletionBlock);
  if (result)
  {
    objc_super v2 = result;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = sub_18AF61BE0;
    *(void *)(v4 + 24) = v3;
    return sub_18AF61C74;
  }
  return result;
}

uint64_t sub_18AF61904@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t)CKFetchRecordZonesOperation.perRecordZoneResultBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    Swift::String v6 = sub_18AF62AEC;
  }
  else
  {
    Swift::String v6 = 0;
  }
  *a1 = v6;
  a1[1] = result;
  return result;
}

id sub_18AF61974(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AF62AE0;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18AF42F30(v1);
  return CKFetchRecordZonesOperation.perRecordZoneResultBlock.setter((uint64_t)v4, v3);
}

id CKFetchRecordZonesOperation.perRecordZoneResultBlock.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    uint64_t v6 = sub_18AF19EAC();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    v9[4] = sub_18AF61DC8;
    v9[5] = v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    long long v9[2] = sub_18AF61DD0;
    v9[3] = &unk_1ED7F0ED8;
    uint64_t v7 = _Block_copy(v9);
    swift_retain();
    swift_release();
    objc_msgSend(v3, sel_setPerRecordZoneCompletionBlock_, v7);
    _Block_release(v7);
    return (id)sub_18AF30B4C();
  }
  else
  {
    return objc_msgSend(v2, sel_setPerRecordZoneCompletionBlock_, 0);
  }
}

void sub_18AF61B28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3) {
    uint64_t v7 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v7 = 0;
  }
  id v8 = (id)v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(a4, a1, a2);
}

uint64_t sub_18AF61BA8()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_18AF61BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_18AF61B28(a1, a2, a3, *(void *)(v3 + 16));
}

void sub_18AF61BE8(uint64_t a1, id a2, char a3, void (*a4)(uint64_t, id, id))
{
  if (a3)
  {
    id v7 = a2;
    uint64_t v8 = a1;
    id v9 = 0;
    id v10 = a2;
  }
  else
  {
    id v11 = a2;
    uint64_t v8 = a1;
    id v9 = a2;
    id v10 = 0;
  }
  a4(v8, v9, v10);

  sub_18AF62BA4(a2);
}

void sub_18AF61C74(uint64_t a1, void *a2, char a3)
{
  sub_18AF61BE8(a1, a2, a3 & 1, *(void (**)(uint64_t, id, id))(v3 + 16));
}

void sub_18AF61C80(uint64_t a1, void *a2, id a3, void (*a4)(uint64_t, id, uint64_t))
{
  if (a3)
  {
    id v7 = a3;
    a4(a1, a3, 1);
    id v8 = a3;
LABEL_4:

    return;
  }
  if (a2)
  {
    id v10 = a2;
    a4(a1, a2, 0);
    id v8 = v10;
    goto LABEL_4;
  }
  type metadata accessor for CKError(0);
  sub_18AF8EAA4(MEMORY[0x1E4FBC860]);
  sub_18AF62B54();
  _BridgedStoredNSError.init(_:userInfo:)();
  a4(a1, v11, 1);
}

void sub_18AF61DC8(uint64_t a1, void *a2, void *a3)
{
  sub_18AF61C80(a1, a2, a3, *(void (**)(uint64_t, id, uint64_t))(v3 + 16));
}

void sub_18AF61DD0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = *(void (**)(id, void *, void *))(a1 + 32);
  swift_retain();
  id v10 = a2;
  id v8 = a3;
  id v9 = a4;
  v7(v10, a3, a4);
  swift_release();
}

uint64_t (*CKFetchRecordZonesOperation.perRecordZoneResultBlock.modify(void (**a1)(uint64_t a1, void *a2, char a3)))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CKFetchRecordZonesOperation.perRecordZoneResultBlock.getter();
  a1[1] = v3;
  return sub_18AF61EB8;
}

uint64_t sub_18AF61EB8(uint64_t *a1, char a2)
{
  return sub_18AF629B8(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKFetchRecordZonesOperation.perRecordZoneResultBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF62BB8, (uint64_t (*)(uint64_t, uint64_t))sub_18AF62BB4);
}

void (*CKFetchRecordZonesOperation.undeprecated_fetchRecordZonesCompletionBlock.getter())(objc_class *a1, uint64_t a2)
{
  uint64_t result = (void (*)(objc_class *, uint64_t))objc_msgSend(v0, sel_fetchRecordZonesCompletionBlock);
  if (result)
  {
    *(void *)(swift_allocObject() + 16) = result;
    return sub_18AF62220;
  }
  return result;
}

uint64_t sub_18AF61F6C@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t)CKFetchRecordZonesOperation.undeprecated_fetchRecordZonesCompletionBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_18AF62AB0;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = result;
  return result;
}

void sub_18AF61FDC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AF62A74;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18AF42F30(v1);
  CKFetchRecordZonesOperation.undeprecated_fetchRecordZonesCompletionBlock.setter((uint64_t)v4, v3);
}

void CKFetchRecordZonesOperation.undeprecated_fetchRecordZonesCompletionBlock.setter(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    v4[4] = a1;
    v4[5] = a2;
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 1107296256;
    v4[2] = sub_18AF62228;
    v4[3] = &unk_1ED7F1310;
    uint64_t v3 = _Block_copy(v4);
    swift_retain();
    swift_release();
  }
  else
  {
    uint64_t v3 = 0;
  }
  objc_msgSend(v2, sel_setFetchRecordZonesCompletionBlock_, v3);
  sub_18AF30B4C();
  _Block_release(v3);
}

void sub_18AF62140(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa = a1;
  if (a1)
  {
    sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
    sub_18AF34EA0(0, &qword_1E9125630);
    sub_18AF62AF4();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  if (a2) {
    uint64_t v6 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);
}

void sub_18AF62220(objc_class *a1, uint64_t a2)
{
  sub_18AF62140(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_18AF62228(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
    sub_18AF34EA0(0, &qword_1E9125630);
    sub_18AF62AF4();
    uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t (*CKFetchRecordZonesOperation.undeprecated_fetchRecordZonesCompletionBlock.modify(void (**a1)(objc_class *a1, uint64_t a2)))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CKFetchRecordZonesOperation.undeprecated_fetchRecordZonesCompletionBlock.getter();
  a1[1] = v3;
  return sub_18AF62340;
}

uint64_t sub_18AF62340(uint64_t *a1, char a2)
{
  return sub_18AF629B8(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKFetchRecordZonesOperation.undeprecated_fetchRecordZonesCompletionBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF42F30, (uint64_t (*)(uint64_t, uint64_t))sub_18AF1E758);
}

void (*CKFetchRecordZonesOperation.fetchRecordZonesResultBlock.getter())(void *a1, char a2)
{
  uint64_t result = (void (*)(void *, char))objc_msgSend(v0, sel_fetchRecordZonesCompletionBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = sub_18AF62BB0;
    *(void *)(v4 + 24) = v3;
    return sub_18AF6285C;
  }
  return result;
}

uint64_t sub_18AF62418@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t result = (uint64_t)CKFetchRecordZonesOperation.fetchRecordZonesResultBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    id v6 = sub_18AF53C04;
  }
  else
  {
    id v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

id sub_18AF62488(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AF53BC0;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18AF42F30(v1);
  return CKFetchRecordZonesOperation.fetchRecordZonesResultBlock.setter((uint64_t)v4, v3);
}

id CKFetchRecordZonesOperation.fetchRecordZonesResultBlock.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    uint64_t v6 = sub_18AF19EAC();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    v9[4] = sub_18AF62928;
    v9[5] = v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    long long v9[2] = sub_18AF62228;
    v9[3] = &unk_1ED7F14C8;
    id v7 = _Block_copy(v9);
    sub_18AF42F30(a1);
    swift_retain();
    swift_release();
    objc_msgSend(v3, sel_setFetchRecordZonesCompletionBlock_, v7);
    _Block_release(v7);
    objc_msgSend(v3, sel_setCanDropItemResultsEarly_, 1);
    sub_18AF30B4C();
    return (id)sub_18AF30B4C();
  }
  else
  {
    return objc_msgSend(v2, sel_setFetchRecordZonesCompletionBlock_, 0);
  }
}

void sub_18AF62660(void *a1, char a2, void (*a3)(uint64_t, void *))
{
  if (qword_1EB279458 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_18AF412A0(v6, (uint64_t)qword_1EB279440);
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v9 = 0;
    MEMORY[0x18C12BB10](v9, -1, -1);
  }

  if (a2)
  {
    id v11 = a1;
    a3(0, a1);
    sub_18AF53C0C(a1, 1);
  }
  else
  {
    sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
    sub_18AF34EA0(0, &qword_1E9125630);
    sub_18AF62AF4();
    uint64_t v10 = Dictionary.init(dictionaryLiteral:)();
    a3(v10, 0);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_18AF62824()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

void sub_18AF6285C(void *a1, char a2)
{
  sub_18AF62660(a1, a2 & 1, *(void (**)(uint64_t, void *))(v2 + 16));
}

void sub_18AF62868(uint64_t a1, void *a2, void (*a3)(void *, uint64_t))
{
  if (!a2) {
    goto LABEL_4;
  }
  swift_getErrorValue();
  id v5 = a2;
  if (Error.ckIsPartialError.getter())
  {

LABEL_4:
    a3(0, 0);
    return;
  }
  id v6 = a2;
  a3(a2, 1);
}

void sub_18AF62928(uint64_t a1, void *a2)
{
  sub_18AF62868(a1, a2, *(void (**)(void *, uint64_t))(v2 + 16));
}

uint64_t (*CKFetchRecordZonesOperation.fetchRecordZonesResultBlock.modify(void (**a1)(void *a1, char a2)))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CKFetchRecordZonesOperation.fetchRecordZonesResultBlock.getter();
  a1[1] = v3;
  return sub_18AF62978;
}

uint64_t sub_18AF62978(uint64_t *a1, char a2)
{
  return sub_18AF629B8(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKFetchRecordZonesOperation.fetchRecordZonesResultBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF42F30, (uint64_t (*)(uint64_t, uint64_t))sub_18AF1E758);
}

uint64_t sub_18AF629B8(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if ((a2 & 1) == 0) {
    return a3(*a1, v7);
  }
  a4(*a1, v7);
  a3(v6, v7);

  return a5(v6, v7);
}

uint64_t sub_18AF62A74(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t *, uint64_t *))(v2 + 16);
  uint64_t v5 = a2;
  uint64_t v6 = a1;
  return v3(&v6, &v5);
}

uint64_t sub_18AF62AB0(void *a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(v2 + 16))(*a1, *a2);
}

uint64_t sub_18AF62AE0(uint64_t a1, uint64_t a2, char a3)
{
  return sub_18AFC50C4(a1, a2, a3 & 1, *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_18AF62AEC(void *a1, uint64_t a2)
{
  return sub_18AFC5088(a1, a2, *(uint64_t (**)(void, void, void))(v2 + 16));
}

unint64_t sub_18AF62AF4()
{
  unint64_t result = qword_1EB279468;
  if (!qword_1EB279468)
  {
    sub_18AF34EA0(255, (unint64_t *)&qword_1EB279460);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB279468);
  }
  return result;
}

unint64_t sub_18AF62B54()
{
  unint64_t result = qword_1EB279480;
  if (!qword_1EB279480)
  {
    type metadata accessor for CKError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB279480);
  }
  return result;
}

void sub_18AF62BA4(id a1)
{
}

BOOL Error.ckIsPartialError.getter()
{
  sub_18AF22CB0();
  MEMORY[0x1F4188790](v0);
  sub_18AF19290();
  (*(void (**)(uint64_t))(v3 + 16))(v2 - v1);
  type metadata accessor for CKError(0);
  BOOL result = 0;
  if (swift_dynamicCast())
  {
    sub_18AF67BDC((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);
    _BridgedStoredNSError.code.getter();

    if (v5 == (void *)2) {
      return 1;
    }
  }
  return result;
}

uint64_t CKCheckedUnsafeObjectTransfer.__allocating_init(_:)(uint64_t a1)
{
  return sub_18AF62EA8(a1, (void (*)(uint64_t))CKCheckedUnsafeObjectTransfer.init(_:));
}

void CKCheckedUnsafeObjectTransfer.extractValue()()
{
  sub_18AF22D38();
  uint64_t v2 = v1;
  sub_18AF30778();
  uint64_t v4 = *(void *)(v3 + 80);
  type metadata accessor for Optional();
  sub_18AF22CB0();
  MEMORY[0x1F4188790](v5);
  sub_18AF67E04();
  MEMORY[0x1F4188790](v6);
  os_log_type_t v8 = (char *)&v15 - v7;
  sub_18AF30778();
  sub_18AF19EE0();
  sub_18AF475F0();
  v9();
  if (sub_18AF436E0((uint64_t)v8, 1, v4) == 1)
  {
    uint64_t v13 = sub_18AF342CC();
    v14(v13);
    __break(1u);
  }
  else
  {
    sub_18AF19278();
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v2, v8, v4);
    sub_18AF43708(v0, 1, 1, v4);
    sub_18AF41158();
    uint64_t v11 = sub_18AF381E4();
    v12(v11);
    swift_endAccess();
    sub_18AF3387C();
  }
}

uint64_t CKUnsafeObjectTransfer.__allocating_init(_:)(uint64_t a1)
{
  return sub_18AF62EA8(a1, (void (*)(uint64_t))CKUnsafeObjectTransfer.init(_:));
}

uint64_t sub_18AF62EA8(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = swift_allocObject();
  a2(a1);
  return v4;
}

Swift::String __swiftcall Data.ckBase64URLSafeString()()
{
  Swift::String v13 = Data.base64EncodedString(options:)(0);
  uint64_t v11 = 43;
  unint64_t v12 = 0xE100000000000000;
  uint64_t v9 = 45;
  unint64_t v10 = 0xE100000000000000;
  sub_18AF3AA6C();
  uint64_t v0 = sub_18AF30B64((uint64_t)&v11, (uint64_t)&v9);
  uint64_t v2 = v1;
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = v0;
  v13._object = v2;
  uint64_t v11 = 47;
  unint64_t v12 = 0xE100000000000000;
  uint64_t v9 = 95;
  unint64_t v10 = 0xE100000000000000;
  uint64_t v3 = sub_18AF30B64((uint64_t)&v11, (uint64_t)&v9);
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = v3;
  v13._object = v5;
  uint64_t v11 = 61;
  unint64_t v12 = 0xE100000000000000;
  uint64_t v9 = 0;
  unint64_t v10 = 0xE000000000000000;
  sub_18AF30B64((uint64_t)&v11, (uint64_t)&v9);
  swift_bridgeObjectRelease();
  uint64_t v6 = sub_18AF40F8C();
  result._object = v7;
  result._uint64_t countAndFlagsBits = v6;
  return result;
}

Swift::String __swiftcall Data.ckLowercaseHexStringWithoutSpaces()()
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v1 = [(objc_class *)isa CKLowercaseHexStringWithoutSpaces];

  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  uint64_t v5 = v2;
  uint64_t v6 = v4;
  result._object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

Swift::String __swiftcall String.ckLowercaseHexStringWithoutSpaces()()
{
  uint64_t v0 = type metadata accessor for SHA256();
  sub_18AF22CB0();
  uint64_t v34 = v1;
  MEMORY[0x1F4188790](v2);
  sub_18AF19290();
  uint64_t v5 = v4 - v3;
  type metadata accessor for SHA256Digest();
  sub_18AF22CB0();
  MEMORY[0x1F4188790](v6);
  sub_18AF22D4C();
  MEMORY[0x1F4188790](v7);
  uint64_t v8 = type metadata accessor for String.Encoding();
  sub_18AF22CB0();
  uint64_t v10 = v9;
  MEMORY[0x1F4188790](v11);
  sub_18AF19290();
  uint64_t v14 = v13 - v12;
  String.lowercased()();
  static String.Encoding.utf8.getter();
  uint64_t v15 = String.data(using:allowLossyConversion:)();
  unint64_t v17 = v16;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v14, v8);
  if (v17 >> 60 == 15)
  {
LABEL_11:
    __break(1u);
    JUMPOUT(0x18AF6342CLL);
  }
  sub_18AF67BDC((unint64_t *)&qword_1E9125E38, MEMORY[0x1E4F25170]);
  dispatch thunk of HashFunction.init()();
  switch(v17 >> 62)
  {
    case 1uLL:
      if (v15 >> 32 < (int)v15)
      {
        __break(1u);
        goto LABEL_11;
      }
      sub_18AF5F6FC(v15, v17);
      uint64_t v20 = sub_18AF40F8C();
      sub_18AF67234(v20, v21);
LABEL_6:
      sub_18AF5B00C(v15, v17);
LABEL_9:
      dispatch thunk of HashFunction.finalize()();
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v5, v0);
      sub_18AF475F0();
      v22();
      sub_18AF6343C();
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      uint64_t v24 = sub_18AF40F8C();
      sub_18AF5AF68(v24, v25);
      id v26 = [(objc_class *)isa CKLowercaseHexStringWithoutSpaces];

      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v29 = v28;

      sub_18AF5B00C(v15, v17);
      sub_18AF16D24();
      v30();
      uint64_t v31 = v27;
      uint64_t v32 = v29;
      result._object = v32;
      result._uint64_t countAndFlagsBits = v31;
      return result;
    case 2uLL:
      uint64_t v18 = *(void *)(v15 + 16);
      uint64_t v19 = *(void *)(v15 + 24);
      sub_18AF5F6E8(v15, v17);
      swift_retain();
      swift_retain();
      sub_18AF67234(v18, v19);
      swift_release();
      swift_release();
      goto LABEL_6;
    case 3uLL:
      sub_18AF16AA0();
      goto LABEL_8;
    default:
LABEL_8:
      sub_18AF67314();
      sub_18AF5B00C(v15, v17);
      goto LABEL_9;
  }
}

uint64_t sub_18AF6343C()
{
  uint64_t v4 = type metadata accessor for SHA256Digest();
  uint64_t v5 = sub_18AF67BDC(&qword_1E9125EC8, MEMORY[0x1E4F24F80]);
  sub_18AF3A5E0(v3);
  sub_18AF475F0();
  v0();
  sub_18AF25FCC(v3, v4);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  sub_18AF16D24();
  v1();
  sub_18AF40A30((uint64_t)v3);
  return sub_18AF40F8C();
}

uint64_t sub_18AF63574(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = sub_18AF161EC(&qword_1E9125E80);
  uint64_t v10 = sub_18AF3345C(&qword_1E9125E88, &qword_1E9125E80);
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v4 = sub_18AF25FCC(v8, v9);
  if (*v4) {
    uint64_t v5 = *v4 + v4[1];
  }
  else {
    uint64_t v5 = 0;
  }
  sub_18AF66928(*v4, v5, &v7);
  sub_18AF40A30((uint64_t)v8);
  return sub_18AF40F8C();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> URL.ckMarkFilePurgeable()()
{
  uint64_t v6 = (NSURL *)*MEMORY[0x1E4F143B8];
  URL._bridgeToObjectiveC()(v6);
  uint64_t v1 = v0;
  id v5 = 0;
  unsigned int v2 = objc_msgSend(v0, sel_CKMarkFilePurgeable_, &v5);

  if (v2)
  {
    id v3 = v5;
  }
  else
  {
    id v4 = v5;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

uint64_t CKPerformWithActivity<A>(_:block:)(unint64_t a1, uint64_t a2, char a3, void (*a4)(void))
{
  unint64_t v8 = *MEMORY[0x1E4F143B8];
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  id v5 = CKActivityCreate(_:dso:)(a1, a3, &dword_18AF10000, v8);
  os_activity_scope_enter(v5, &state);
  a4();
  os_activity_scope_leave(&state);
  return swift_unknownObjectRelease();
}

uint64_t sub_18AF63790()
{
  sub_18AF339B8();
  sub_18AF2A554(v0, v1, v2, v3, v4, v5);
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v6, v7, v8);
}

uint64_t sub_18AF63814()
{
  sub_18AF339B8();
  uint64_t v1 = v0;
  unint64_t v2 = sub_18AF354C8();
  uint64_t v5 = CKActivityCreate(_:dso:)(v2, v3, &dword_18AF10000, v4);
  v0[4].opaque[1] = (uint64_t)v5;
  os_activity_scope_enter(v5, v0);
  uint64_t v6 = (void *)swift_task_alloc();
  v1[5].opaque[0] = (uint64_t)v6;
  void *v6 = v1;
  v6[1] = sub_18AF638EC;
  return sub_18AFEC56C();
}

uint64_t sub_18AF638EC()
{
  sub_18AF339B8();
  sub_18AF38910();
  sub_18AF16D18();
  *char v3 = v2;
  uint64_t v4 = *v1;
  sub_18AF16D18();
  *uint64_t v5 = v4;
  *(void *)(v6 + 88) = v0;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AF639F4()
{
  sub_18AF339B8();
  sub_18AF2A554(v0, v1, v2, v3, v4, v5);
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v6, v7, v8);
}

uint64_t sub_18AF63A78()
{
  sub_18AF339B8();
  uint64_t v1 = v0;
  unint64_t v2 = sub_18AF354C8();
  uint64_t v5 = CKActivityCreate(_:dso:)(v2, v3, &dword_18AF10000, v4);
  v0[4].opaque[1] = (uint64_t)v5;
  os_activity_scope_enter(v5, v0);
  uint64_t v6 = (void *)swift_task_alloc();
  v1[5].opaque[0] = (uint64_t)v6;
  void *v6 = v1;
  v6[1] = sub_18AF63B50;
  uint64_t v7 = v1[3].opaque[1];
  uint64_t v8 = v1[4].opaque[0];
  uint64_t v9 = v1[2].opaque[0];
  return sub_18AFED4DC(v9, v7, v8);
}

uint64_t sub_18AF63B50()
{
  sub_18AF339B8();
  sub_18AF38910();
  sub_18AF16D18();
  *char v3 = v2;
  uint64_t v4 = *v1;
  sub_18AF16D18();
  *uint64_t v5 = v4;
  *(void *)(v6 + 88) = v0;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AF63C58()
{
  sub_18AF2A56C();
  sub_18AF355E0();
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_18AF63CF4()
{
  sub_18AF2A56C();
  sub_18AF355E0();
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_18AF63D90()
{
  sub_18AF339B8();
  sub_18AF38D68(v0, v1, v2, v3, v4, v5);
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v6, v7, v8);
}

uint64_t sub_18AF63E14()
{
  sub_18AF339B8();
  unint64_t v2 = sub_18AF38430();
  uint64_t v5 = CKActivityCreate(_:dso:)(v2, v3, &dword_18AF10000, v4);
  *(void *)(v1 + 80) = v5;
  os_activity_scope_enter(v5, v0);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 88) = v6;
  void *v6 = v1;
  v6[1] = sub_18AF63EF0;
  return sub_18AFE6670();
}

uint64_t sub_18AF63EF0()
{
  sub_18AF339B8();
  sub_18AF38910();
  sub_18AF16D18();
  *char v3 = v2;
  uint64_t v4 = *v1;
  sub_18AF16D18();
  *uint64_t v5 = v4;
  *(void *)(v6 + 96) = v0;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AF63FF8()
{
  sub_18AF2A56C();
  sub_18AF37A64();
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 32);

  char v3 = *(uint64_t (**)(uint64_t))(v1 + 8);
  return v3(v2);
}

uint64_t sub_18AF640A0()
{
  sub_18AF2A56C();
  sub_18AF37A64();
  swift_unknownObjectRelease();
  swift_release();

  uint64_t v2 = *(uint64_t (**)(void))(v1 + 8);
  return v2();
}

uint64_t sub_18AF64140()
{
  sub_18AF339B8();
  sub_18AF38D68(v0, v1, v2, v3, v4, v5);
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v6, v7, v8);
}

uint64_t sub_18AF641C4()
{
  sub_18AF339B8();
  unint64_t v2 = sub_18AF38430();
  uint64_t v5 = CKActivityCreate(_:dso:)(v2, v3, &dword_18AF10000, v4);
  v1[10] = v5;
  os_activity_scope_enter(v5, v0);
  uint64_t v6 = (void *)swift_task_alloc();
  v1[11] = v6;
  void *v6 = v1;
  v6[1] = sub_18AF642A0;
  uint64_t v7 = v1[8];
  uint64_t v8 = v1[7];
  return sub_18AFE8364((uint64_t)(v1 + 4), v8, v7);
}

uint64_t sub_18AF642A0()
{
  sub_18AF339B8();
  sub_18AF38910();
  sub_18AF16D18();
  *char v3 = v2;
  uint64_t v4 = *v1;
  sub_18AF16D18();
  *uint64_t v5 = v4;
  *(void *)(v6 + 96) = v0;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t CKPerformWithActivity<A>(_:block:)()
{
  sub_18AF339B8();
  sub_18AF2A554(v0, v1, v2, v3, v4, v5);
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v6, v7, v8);
}

uint64_t sub_18AF6442C()
{
  sub_18AF2A56C();
  uint64_t v1 = v0;
  unint64_t v2 = *MEMORY[0x1E4F143B8];
  char v3 = *(int **)(v0 + 56);
  unint64_t v4 = *(void *)(v0 + 40);
  *(void *)(v0 + 24) = 0;
  *(void *)(v0 + 16) = 0;
  uint64_t v5 = CKActivityCreate(_:dso:)(v4, *(unsigned char *)(v0 + 96), &dword_18AF10000, v2);
  *(void *)(v0 + 72) = v5;
  os_activity_scope_enter(v5, (os_activity_scope_state_t)(v0 + 16));
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)v3 + *v3);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 80) = v6;
  void *v6 = v1;
  v6[1] = sub_18AF6455C;
  uint64_t v7 = *(void *)(v1 + 32);
  return v9(v7);
}

uint64_t sub_18AF6455C()
{
  sub_18AF339B8();
  sub_18AF38910();
  sub_18AF16D18();
  *char v3 = v2;
  uint64_t v4 = *v1;
  sub_18AF16D18();
  *uint64_t v5 = v4;
  *(void *)(v6 + 88) = v0;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AF64664()
{
  sub_18AF339B8();
  os_activity_scope_leave(v0 + 1);
  swift_unknownObjectRelease();
  uint64_t v1 = (uint64_t (*)(void))v0->opaque[1];
  return v1();
}

uint64_t sub_18AF646FC()
{
  sub_18AF339B8();
  os_activity_scope_leave(v0 + 1);
  swift_unknownObjectRelease();
  uint64_t v1 = (uint64_t (*)(void))v0->opaque[1];
  return v1();
}

Swift::Bool __swiftcall CKUseSystemInstalledBinaries()()
{
  return CKUseSystemInstalledBinariesFuncForSwift();
}

uint64_t sub_18AF647AC()
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (String.count.getter())
  {
    type metadata accessor for CKError(0);
    *(void *)&long long v17 = 1;
    sub_18AF8EAA4(MEMORY[0x1E4FBC860]);
    sub_18AF67BDC((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);
    _BridgedStoredNSError.init(_:userInfo:)();
    return swift_willThrow();
  }
  else
  {
    uint64_t v0 = String.count.getter();
    long long v17 = xmmword_18B1F0AA0;
    if (v0 < -1) {
      __break(1u);
    }
    if ((unint64_t)(v0 + 1) >= 3)
    {
      uint64_t v2 = 0;
      uint64_t v3 = v0 / 2;
      while (v3)
      {
        unint64_t v4 = String.index(_:offsetBy:)();
        if ((unint64_t)String.index(_:offsetBy:)() >> 14 < v4 >> 14) {
          goto LABEL_16;
        }
        unint64_t v5 = String.subscript.getter();
        uint64_t v9 = v8;
        if (!((v5 ^ v6) >> 14)) {
          goto LABEL_17;
        }
        uint64_t v10 = v5;
        uint64_t v11 = v6;
        uint64_t v12 = v7;
        uint64_t v13 = sub_18AF6764C(v5, v6, v7, v8, 16);
        if ((v13 & 0x10000) != 0) {
          LOWORD(v13) = sub_18AF669A0(v10, v11, v12, v9, 16);
        }
        __int16 v14 = v13;
        swift_bridgeObjectRelease();
        if ((v14 & 0x100) != 0) {
          goto LABEL_18;
        }
        uint64_t v15 = sub_18AF161EC(&qword_1E9125E90);
        v16[3] = v15;
        v16[4] = sub_18AF3345C((unint64_t *)&qword_1E9125E98, &qword_1E9125E90);
        LOBYTE(v16[0]) = v14;
        sub_18AF25FCC(v16, v15);
        Data._Representation.replaceSubrange(_:with:count:)();
        sub_18AF40A30((uint64_t)v16);
        v2 += 2;
        if (!--v3) {
          return v17;
        }
      }
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      swift_bridgeObjectRelease();
LABEL_18:
      type metadata accessor for CKError(0);
      sub_18AF8EAA4(MEMORY[0x1E4FBC860]);
      sub_18AF67BDC((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
      return sub_18AF5AF68(v17, *((unint64_t *)&v17 + 1));
    }
    else
    {
      return 0;
    }
  }
}

uint64_t CKCheckedUnsafeObjectTransfer.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  CKCheckedUnsafeObjectTransfer.init()();
  return v0;
}

uint64_t CKCheckedUnsafeObjectTransfer.init()()
{
  sub_18AF4023C();
  sub_18AF43708(v0 + *(void *)(v1 + 88), 1, 1, *(void *)(v2 + 80));
  return v0;
}

void CKCheckedUnsafeObjectTransfer.init(_:)()
{
  sub_18AF22D38();
  uint64_t v2 = v1;
  uint64_t v3 = *v0;
  uint64_t v4 = *(void *)(*v0 + 80);
  uint64_t v5 = type metadata accessor for Optional();
  sub_18AF22CB0();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v13 - v9;
  uint64_t v11 = (uint64_t)v0 + *(void *)(v3 + 88);
  sub_18AF43708(v11, 1, 1, v4);
  sub_18AF19278();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v10, v2, v4);
  sub_18AF43708((uint64_t)v10, 0, 1, v4);
  sub_18AF41158();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(v11, v10, v5);
  swift_endAccess();
  sub_18AF3387C();
}

void CKCheckedUnsafeObjectTransfer.setValue(_:)()
{
  sub_18AF22D38();
  uint64_t v2 = v1;
  sub_18AF30778();
  uint64_t v4 = *(void *)(v3 + 80);
  uint64_t v5 = type metadata accessor for Optional();
  sub_18AF22CB0();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  sub_18AF67E04();
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v17 - v10;
  sub_18AF30778();
  sub_18AF19EE0();
  sub_18AF475F0();
  v12();
  int v13 = sub_18AF436E0((uint64_t)v11, 1, v4);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v5);
  if (v13 == 1)
  {
    sub_18AF19278();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v0, v2, v4);
    sub_18AF43708(v0, 0, 1, v4);
    sub_18AF41158();
    uint64_t v15 = sub_18AF381E4();
    v16(v15);
    swift_endAccess();
    sub_18AF3387C();
  }
  else
  {
    __break(1u);
  }
}

uint64_t CKUnsafeObjectTransfer.init(_:)()
{
  sub_18AF4023C();
  sub_18AF19278();
  (*(void (**)(void))(v1 + 32))();
  return v0;
}

uint64_t CKUnsafeObjectTransfer.wrapped.getter@<X0>(uint64_t a1@<X8>)
{
  sub_18AF3A9C8();
  uint64_t v4 = v1 + *(void *)(v3 + 88);
  swift_beginAccess();
  sub_18AF3A9C8();
  sub_18AF19278();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(a1, v4);
}

uint64_t CKUnsafeObjectTransfer.wrapped.setter(uint64_t a1)
{
  sub_18AF3A9C8();
  uint64_t v4 = v1 + *(void *)(v3 + 88);
  sub_18AF41158();
  sub_18AF3A9C8();
  sub_18AF19278();
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v4, a1);
  return swift_endAccess();
}

uint64_t (*CKUnsafeObjectTransfer.wrapped.modify())()
{
  return j__swift_endAccess;
}

uint64_t CKUnsafeObjectTransfer.deinit()
{
  sub_18AF4023C();
  sub_18AF19278();
  (*(void (**)(void))(v1 + 8))();
  return v0;
}

uint64_t CKUnsafeObjectTransfer.__deallocating_deinit()
{
  return sub_18AF48FA4((void (*)(void))CKUnsafeObjectTransfer.deinit);
}

uint64_t String.ckSplit(maxSize:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v3)
  {
    unint64_t v4 = 0;
    unint64_t v20 = 4 * v3;
    uint64_t v5 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
      uint64_t v5 = 11;
    }
    uint64_t v6 = v5 | (v3 << 16);
    uint64_t v7 = MEMORY[0x1E4FBC860];
    while (1)
    {
      uint64_t result = String.index(_:offsetBy:limitedBy:)();
      unint64_t v10 = (v9 & 1) != 0 ? v6 : result;
      if (v10 >> 14 < v4) {
        break;
      }
      uint64_t v11 = String.subscript.getter();
      uint64_t v12 = MEMORY[0x18C129000](v11);
      uint64_t v14 = v13;
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_18AF33790(0, *(void *)(v7 + 16) + 1, 1, v7);
        uint64_t v7 = v18;
      }
      unint64_t v16 = *(void *)(v7 + 16);
      unint64_t v15 = *(void *)(v7 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_18AF33790(v15 > 1, v16 + 1, 1, v7);
        uint64_t v7 = v19;
      }
      *(void *)(v7 + 16) = v16 + 1;
      uint64_t v17 = v7 + 16 * v16;
      *(void *)(v17 + 32) = v12;
      *(void *)(v17 + 40) = v14;
      unint64_t v4 = v10 >> 14;
      if (v10 >> 14 >= v20) {
        return v7;
      }
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

uint64_t CKAssociatedObjectKey()()
{
  return swift_slowAlloc();
}

uint64_t TaskPriority.init(_:)(uint64_t a1)
{
  switch(a1)
  {
    case -1:
      return TaskPriority.init(rawValue:)();
    case 33:
      return static TaskPriority.userInitiated.getter();
    case 17:
      return TaskPriority.init(rawValue:)();
  }
  if (a1 != 25)
  {
    if (a1 == 9) {
      return static TaskPriority.low.getter();
    }
    return TaskPriority.init(rawValue:)();
  }
  return static TaskPriority.userInitiated.getter();
}

uint64_t NSQualityOfService.init(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TaskPriority();
  sub_18AF22CB0();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  sub_18AF22D4C();
  v27[1] = v6;
  MEMORY[0x1F4188790](v7);
  MEMORY[0x1F4188790](v8);
  unint64_t v10 = (char *)v27 - v9;
  uint64_t v11 = *(void (**)(void))(v4 + 16);
  sub_18AF4107C();
  v11();
  static TaskPriority.background.getter();
  sub_18AF67BDC(&qword_1E9125E48, MEMORY[0x1E4FBCFE8]);
  char v12 = sub_18AF16CF4();
  uint64_t v13 = *(void (**)(uint64_t))(v4 + 8);
  uint64_t v14 = sub_18AF342CC();
  v13(v14);
  if ((v12 & 1) != 0
    || (static TaskPriority.low.getter(), char v15 = sub_18AF16CF4(), v16 = sub_18AF342CC(), v13(v16), (v15 & 1) != 0))
  {
    uint64_t v17 = 9;
LABEL_4:
    ((void (*)(uint64_t, uint64_t))v13)(a1, v2);
    ((void (*)(char *, uint64_t))v13)(v10, v2);
    return v17;
  }
  TaskPriority.init(rawValue:)();
  char v19 = sub_18AF16CF4();
  uint64_t v20 = sub_18AF342CC();
  v13(v20);
  if ((v19 & 1) != 0
    || (static TaskPriority.low.getter(), v21 = sub_18AF16CF4(), uint64_t v22 = sub_18AF342CC(), v13(v22), (v21 & 1) != 0))
  {
    uint64_t v17 = 17;
    goto LABEL_4;
  }
  static TaskPriority.userInitiated.getter();
  char v23 = sub_18AF16CF4();
  uint64_t v24 = sub_18AF342CC();
  v13(v24);
  if (v23)
  {
    uint64_t v17 = 25;
    goto LABEL_4;
  }
  sub_18AF4107C();
  v11();
  v27[2] = 0;
  v27[3] = 0xE000000000000000;
  _StringGuts.grow(_:)(52);
  v25._object = (void *)0x800000018B1D23D0;
  v25._uint64_t countAndFlagsBits = 0xD000000000000032;
  String.append(_:)(v25);
  sub_18AF67BDC(&qword_1E9125E50, MEMORY[0x1E4FBCFE8]);
  v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_18AF6556C()
{
}

void sub_18AF655A0()
{
}

void sub_18AF655D4()
{
  sub_18AF22D38();
  sub_18AF38504();
  if (v6)
  {
    sub_18AF3386C();
    if (v8 != v9)
    {
      sub_18AF339D4();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_18AF339C4();
    }
  }
  else
  {
    uint64_t v7 = v4;
  }
  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    sub_18AF161EC(v5);
    char v12 = (char *)swift_allocObject();
    size_t v13 = j__malloc_size(v12);
    sub_18AF31134(v13);
  }
  else
  {
    char v12 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v14 = v12 + 32;
  if (v3)
  {
    v2(v0 + 32, v10, v14);
    sub_18AF33B20();
  }
  else
  {
    v1(0, v10, v14, v0);
  }
  sub_18AF3387C();
}

void sub_18AF656A4(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_18AF656B8(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_18AF656CC(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  if (a3)
  {
    sub_18AF3386C();
    if (v8 != v9)
    {
      sub_18AF339D4();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_18AF339C4();
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v10 = *(void *)(a4 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    sub_18AF161EC(a5);
    uint64_t v12 = sub_18AF19FB8();
    size_t v13 = j__malloc_size((const void *)v12);
    *(void *)(v12 + 16) = v10;
    *(void *)(v12 + 24) = 2 * ((uint64_t)(v13 - 32) / 32);
  }
  else
  {
    uint64_t v12 = MEMORY[0x1E4FBC860];
  }
  if (a1)
  {
    sub_18AF666D8((char *)(a4 + 32), v10, (char *)(v12 + 32));
    sub_18AF33B20();
  }
  else
  {
    uint64_t v14 = sub_18AF18258();
    sub_18AF65FC0(v14, v15, v16, v17);
  }
}

void sub_18AF65798(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_18AF657AC()
{
}

void sub_18AF657E0(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_18AF657F4()
{
}

void sub_18AF65830()
{
  sub_18AF22D38();
  char v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  char v11 = v10;
  if (v12)
  {
    sub_18AF3386C();
    if (v14 != v15)
    {
      sub_18AF339D4();
      if (v14)
      {
        __break(1u);
        return;
      }
      sub_18AF339C4();
    }
  }
  else
  {
    uint64_t v13 = v0;
  }
  uint64_t v16 = *(void *)(v9 + 16);
  if (v13 <= v16) {
    uint64_t v17 = *(void *)(v9 + 16);
  }
  else {
    uint64_t v17 = v13;
  }
  if (v17)
  {
    sub_18AF161EC(v1);
    uint64_t v18 = (void *)sub_18AF19FB8();
    j__malloc_size(v18);
    sub_18AF33E84();
    _OWORD v18[2] = v16;
    v18[3] = v19;
  }
  else
  {
    uint64_t v18 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v20 = v18 + 4;
  if (v11)
  {
    v3(v9 + 32, v16, v20);
    sub_18AF33B20();
  }
  else
  {
    v5(0, v16, v20, v9, v7);
  }
  sub_18AF3387C();
}

void sub_18AF6590C()
{
}

void sub_18AF65940()
{
  sub_18AF22D38();
  sub_18AF38504();
  if (v6)
  {
    sub_18AF3386C();
    if (v8 != v9)
    {
      sub_18AF339D4();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_18AF339C4();
    }
  }
  else
  {
    uint64_t v7 = v4;
  }
  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    sub_18AF161EC(v5);
    char v12 = (char *)swift_allocObject();
    size_t v13 = j__malloc_size(v12);
    sub_18AF31134(v13);
  }
  else
  {
    char v12 = (char *)MEMORY[0x1E4FBC860];
  }
  char v14 = v12 + 32;
  if (v3)
  {
    v2(v0 + 32, v10, v14);
    sub_18AF33B20();
  }
  else
  {
    v1(0, v10, v14, v0);
  }
  sub_18AF3387C();
}

void sub_18AF65A10(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_18AF65A24(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  if (a3)
  {
    sub_18AF3386C();
    if (v8 != v9)
    {
      sub_18AF339D4();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_18AF339C4();
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v10 = *(void *)(a4 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    sub_18AF161EC(a5);
    uint64_t v12 = sub_18AF19FB8();
    j__malloc_size((const void *)v12);
    sub_18AF262E4();
    *(void *)(v12 + 16) = v10;
    *(void *)(v12 + 24) = v13;
  }
  else
  {
    uint64_t v12 = MEMORY[0x1E4FBC860];
  }
  if (a1)
  {
    sub_18AF665AC((char *)(a4 + 32), v10, (char *)(v12 + 32));
    sub_18AF33B20();
  }
  else
  {
    uint64_t v14 = sub_18AF18258();
    sub_18AF6633C(v14, v15, v16, v17);
  }
}

void sub_18AF65AE4()
{
}

void sub_18AF65B20()
{
}

void sub_18AF65B5C()
{
}

void sub_18AF65B98()
{
}

void sub_18AF65BD4(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_18AF65BE8(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    sub_18AF3386C();
    if (v7 != v8)
    {
      sub_18AF339D4();
      if (v7)
      {
        __break(1u);
        return;
      }
      sub_18AF339C4();
    }
  }
  else
  {
    uint64_t v6 = a2;
  }
  uint64_t v9 = *(void *)(a4 + 16);
  if (v6 <= v9) {
    uint64_t v10 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v10 = v6;
  }
  if (v10)
  {
    sub_18AF161EC((uint64_t *)&unk_1E9125398);
    uint64_t v11 = (char *)sub_18AF19FB8();
    j__malloc_size(v11);
    sub_18AF262E4();
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = v12;
  }
  else
  {
    uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v11 + 32;
  if (a1)
  {
    sub_18AF665AC((char *)(a4 + 32), v9, v13);
    sub_18AF33B20();
  }
  else
  {
    sub_18AF663F4(0, v9, (unint64_t)v13, a4);
  }
}

uint64_t sub_18AF65CA8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_18AF161EC((uint64_t *)&unk_1E9125D40);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_18AF65DC8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_18AF65EC0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_18AF65FC0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    sub_18AF18574();
    sub_18AF18588();
    goto LABEL_11;
  }
  unint64_t v5 = a4 + 32 * a1 + 32;
  unint64_t v6 = a3 + 32 * v4;
  if (v5 >= v6 || v5 + 32 * v4 <= a3)
  {
    sub_18AF30608();
    swift_bridgeObjectRelease();
    return v6;
  }
  sub_18AF18574();
  sub_18AF22D28();
LABEL_11:
  uint64_t result = sub_18AF35128();
  __break(1u);
  return result;
}

uint64_t sub_18AF66078(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_18AF161EC(&qword_1E9125EA8);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_18AF66198(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_18AF66298(uint64_t a1, uint64_t a2)
{
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a2 - a1 < 0)
  {
LABEL_9:
    sub_18AF18574();
    sub_18AF18588();
    goto LABEL_11;
  }
  sub_18AF19F90();
  if (v5) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v4 > v3;
  }
  if (!v6)
  {
    sub_18AF30608();
    swift_bridgeObjectRelease();
    return v2;
  }
  sub_18AF18574();
  sub_18AF22D28();
LABEL_11:
  uint64_t result = sub_18AF35128();
  __break(1u);
  return result;
}

uint64_t sub_18AF6633C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    sub_18AF18574();
    sub_18AF18588();
    goto LABEL_11;
  }
  unint64_t v5 = a4 + 8 * a1 + 32;
  unint64_t v6 = a3 + 8 * v4;
  if (v5 >= v6 || v5 + 8 * v4 <= a3)
  {
    sub_18AF30608();
    swift_bridgeObjectRelease();
    return v6;
  }
  sub_18AF18574();
  sub_18AF22D28();
LABEL_11:
  uint64_t result = sub_18AF35128();
  __break(1u);
  return result;
}

uint64_t sub_18AF663F4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      sub_18AF161EC(&qword_1E9125558);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_18AF6650C(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[40 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 40 * a2);
  }
  return __src;
}

char *sub_18AF665AC(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_18AF18574();
    uint64_t result = (char *)sub_18AF39024();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_18AF39200(a3, result);
  }
  return result;
}

char *sub_18AF66608(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_18AF18574();
    uint64_t result = (char *)sub_18AF39024();
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_18AF39200(a3, result);
  }
  return result;
}

char *sub_18AF66674(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_18AF18574();
    uint64_t result = (char *)sub_18AF39024();
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_18AF39200(a3, result);
  }
  return result;
}

char *sub_18AF666D8(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_18AF18574();
    uint64_t result = (char *)sub_18AF39024();
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_18AF39200(a3, result);
  }
  return result;
}

char *sub_18AF66734(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }
  return __src;
}

void sub_18AF667CC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_18AF18574();
    sub_18AF39024();
    __break(1u);
  }
  else if (a3 < a1 {
         || (type metadata accessor for CKAsyncSerialQueue.WaitContext(),
  }
             sub_18AF19278(),
             a1 + *(void *)(v6 + 72) * a2 <= a3))
  {
    type metadata accessor for CKAsyncSerialQueue.WaitContext();
    sub_18AF34848();
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (a3 != a1)
  {
    sub_18AF34848();
    swift_arrayInitWithTakeBackToFront();
  }
}

void *sub_18AF668C0(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  sub_18AF161EC(&qword_1E91255F8);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_18AF66928@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = Data.InlineData.init(_:)();
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = MEMORY[0x18C1288A0]();
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = MEMORY[0x18C1288B0]();
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_18AF669A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  sub_18AF6772C();
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = sub_18AF66D38();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  unsigned __int16 v13 = (unsigned __int16)sub_18AF66A90(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13 & 0x1FF;
}

unsigned __int8 *sub_18AF66A90(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v14 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v15 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = a3 + 55;
        }
        else
        {
          unsigned __int8 v15 = 97;
          unsigned __int8 v16 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v17 = a3 + 48;
        }
        else {
          unsigned __int8 v17 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          uint64_t v18 = result + 1;
          do
          {
            unsigned int v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v19 < 0x61 || v19 >= v15) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v20 = -87;
              }
              else
              {
                char v20 = -55;
              }
            }
            else
            {
              char v20 = -48;
            }
            if (((v8 * (unsigned __int16)a3) & 0xFF00) != 0) {
              goto LABEL_72;
            }
            unsigned int v8 = (v8 * a3) + (v19 + v20);
            if ((v8 >> 8)) {
              goto LABEL_72;
            }
            ++v18;
            --v14;
          }
          while (v14);
LABEL_48:
          int v13 = 0;
          unsigned __int8 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned __int8 v12 = 0;
      int v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 8));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v21 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v22 = a3 + 55;
        }
        else
        {
          unsigned __int8 v21 = 97;
          unsigned __int8 v22 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v23 = a3 + 48;
        }
        else {
          unsigned __int8 v23 = 58;
        }
        if (result)
        {
          LOBYTE(v24) = 0;
          do
          {
            unsigned int v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v25 < 0x61 || v25 >= v21) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v26 = -87;
              }
              else
              {
                char v26 = -55;
              }
            }
            else
            {
              char v26 = -48;
            }
            if (((v24 * (unsigned __int16)a3) & 0xFF00) != 0) {
              goto LABEL_72;
            }
            unsigned int v24 = (v24 * a3) + (v25 + v26);
            if ((v24 >> 8)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          int v13 = 0;
          unsigned __int8 v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          uint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            if (((v8 * (unsigned __int16)a3) & 0xFF00) != 0) {
              goto LABEL_72;
            }
            unsigned int v8 = (v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFFFF00) != 0) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned __int8 v12 = 0;
        int v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 8));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_18AF66D38()
{
  unint64_t v0 = sub_18AF66DA4();
  uint64_t v4 = sub_18AF66DD8(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_18AF66DA4()
{
  return String.subscript.getter();
}

uint64_t sub_18AF66DD8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    unint64_t v9 = sub_18AF66F30(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      char v11 = sub_18AF668C0(v9, 0);
      unint64_t v12 = sub_18AF67030((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
LABEL_11:
        _StringObject.sharedUTF8.getter();
LABEL_4:
        JUMPOUT(0x18C129010);
      }
    }
    else
    {
      char v11 = (void *)MEMORY[0x1E4FBC860];
    }
    uint64_t v13 = MEMORY[0x18C129010](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x18C129010]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_18AF66F30(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    uint64_t result = sub_18AFA7EB0(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_18AFA7EB0(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  return String.UTF8View._foreignDistance(from:to:)();
}

unint64_t sub_18AF67030(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_35;
  }
  if (a3 < 0) {
    goto LABEL_38;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_35:
    void *v9 = a4;
    v9[1] = a5;
    long long v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    uint64_t result = v12;
    if ((v12 & 0xC) == v15) {
      uint64_t result = sub_18AFA7EB0(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
      }
    }
    if ((v12 & 0xC) == v15)
    {
      uint64_t result = sub_18AFA7EB0(v12, a6, a7);
      unint64_t v12 = result;
      if ((a7 & 0x1000000000000000) == 0)
      {
LABEL_27:
        unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_31;
      }
    }
    else if ((a7 & 0x1000000000000000) == 0)
    {
      goto LABEL_27;
    }
    if (v23 <= v12 >> 16) {
      goto LABEL_37;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_31:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_35;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_35;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_18AF67234(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA256();
      sub_18AF67BDC((unint64_t *)&qword_1E9125E38, MEMORY[0x1E4F25170]);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_18AF67314()
{
  return dispatch thunk of HashFunction.update(bufferPointer:)();
}

uint64_t sub_18AF67440()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for CKCheckedUnsafeObjectTransfer()
{
  return sub_18AF67C24();
}

uint64_t method lookup function for CKCheckedUnsafeObjectTransfer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CKCheckedUnsafeObjectTransfer);
}

uint64_t dispatch thunk of CKCheckedUnsafeObjectTransfer.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of CKCheckedUnsafeObjectTransfer.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_18AF6752C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for CKUnsafeObjectTransfer()
{
  return sub_18AF67C24();
}

uint64_t method lookup function for CKUnsafeObjectTransfer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CKUnsafeObjectTransfer);
}

uint64_t dispatch thunk of CKUnsafeObjectTransfer.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t sub_18AF67604(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_18AF6764C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    int v14 = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    uint64_t v12 = HIBYTE(a4) & 0xF;
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v11 = v15;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    uint64_t v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v12 = a3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v11 = (void *)_StringObject.sharedUTF8.getter();
  }
  uint64_t result = sub_18AF67778((uint64_t)v11, v12, a1, a2, a3, a4, a5);
  if (!v5)
  {
    char v16 = BYTE1(result) & 1;
    int v14 = result | ((BYTE1(result) & 1) << 8);
LABEL_8:
    LOBYTE(v15[0]) = (a4 & 0x1000000000000000) != 0;
    return v14 | (LOBYTE(v15[0]) << 16);
  }
  return result;
}

unint64_t sub_18AF6772C()
{
  unint64_t result = qword_1E9125538;
  if (!qword_1E9125538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9125538);
  }
  return result;
}

uint64_t sub_18AF67778(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  unint64_t v11 = a3;
  uint64_t v12 = result;
  uint64_t v13 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0) {
    LOBYTE(v13) = 1;
  }
  uint64_t v14 = 4 << v13;
  unint64_t v15 = a3 & 0xC;
  unint64_t v16 = a3;
  if (v15 == 4 << v13)
  {
    unint64_t result = sub_18AFA7EB0(a3, a5, a6);
    unint64_t v16 = result;
  }
  uint64_t v17 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x1000000000000000) != 0)
  {
    unint64_t v19 = a5 & 0xFFFFFFFFFFFFLL;
    if ((a6 & 0x2000000000000000) != 0) {
      unint64_t v19 = HIBYTE(a6) & 0xF;
    }
    if (v19 < v16 >> 16) {
      goto LABEL_105;
    }
    unint64_t result = String.UTF8View._foreignDistance(from:to:)();
    uint64_t v18 = result;
    uint64_t v17 = HIBYTE(a6) & 0xF;
  }
  else
  {
    uint64_t v18 = v16 >> 16;
  }
  if (v15 == v14)
  {
    uint64_t v20 = v17;
    unint64_t result = sub_18AFA7EB0(v11, a5, a6);
    uint64_t v17 = v20;
    unint64_t v11 = result;
  }
  if ((a4 & 0xC) == v14)
  {
    unint64_t v21 = a4;
    uint64_t v22 = v17;
    unint64_t result = sub_18AFA7EB0(v21, a5, a6);
    uint64_t v17 = v22;
    a4 = result;
    if ((a6 & 0x1000000000000000) == 0) {
      goto LABEL_11;
    }
  }
  else if ((a6 & 0x1000000000000000) == 0)
  {
LABEL_11:
    unint64_t result = (a4 >> 16) - (v11 >> 16);
    goto LABEL_22;
  }
  unint64_t v23 = a5 & 0xFFFFFFFFFFFFLL;
  if ((a6 & 0x2000000000000000) != 0) {
    unint64_t v23 = v17;
  }
  if (v23 < v11 >> 16) {
    goto LABEL_101;
  }
  if (v23 < a4 >> 16)
  {
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }
  unint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_22:
  uint64_t v24 = v18 + result;
  if (__OFADD__(v18, result))
  {
    __break(1u);
    goto LABEL_100;
  }
  if (v24 < v18)
  {
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  unsigned int v25 = (unsigned __int8 *)(v12 + v18);
  if (!v12) {
    unsigned int v25 = 0;
  }
  int v26 = *v25;
  if (v26 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v37 = a7 + 87;
        if (a7 > 10)
        {
          unsigned __int8 v38 = a7 + 55;
        }
        else
        {
          unsigned __int8 v37 = 97;
          unsigned __int8 v38 = 65;
        }
        if (a7 <= 10) {
          unsigned __int8 v39 = a7 + 48;
        }
        else {
          unsigned __int8 v39 = 58;
        }
        if (v25)
        {
          LOBYTE(v30) = 0;
          uint64_t v40 = v25 + 1;
          uint64_t v41 = result - 1;
          do
          {
            unsigned int v42 = *v40;
            if (v42 < 0x30 || v42 >= v39)
            {
              if (v42 < 0x41 || v42 >= v38)
              {
                unsigned __int8 v35 = 0;
                int v36 = 1;
                if (v42 < 0x61 || v42 >= v37) {
                  return v35 | (v36 << 8);
                }
                char v43 = -87;
              }
              else
              {
                char v43 = -55;
              }
            }
            else
            {
              char v43 = -48;
            }
            if (((v30 * (unsigned __int16)a7) & 0xFF00) != 0) {
              goto LABEL_97;
            }
            unsigned int v30 = (v30 * a7) + (v42 + v43);
            if ((v30 >> 8)) {
              goto LABEL_97;
            }
            ++v40;
            --v41;
          }
          while (v41);
LABEL_73:
          int v36 = 0;
          unsigned __int8 v35 = v30;
          return v35 | (v36 << 8);
        }
        goto LABEL_96;
      }
LABEL_97:
      unsigned __int8 v35 = 0;
      int v36 = 1;
      return v35 | (v36 << 8);
    }
    goto LABEL_104;
  }
  if (v26 != 45)
  {
    if (v24 != v18)
    {
      unsigned __int8 v44 = a7 + 87;
      if (a7 > 10)
      {
        unsigned __int8 v45 = a7 + 55;
      }
      else
      {
        unsigned __int8 v44 = 97;
        unsigned __int8 v45 = 65;
      }
      if (a7 <= 10) {
        unsigned __int8 v46 = a7 + 48;
      }
      else {
        unsigned __int8 v46 = 58;
      }
      if (v25)
      {
        LOBYTE(v47) = 0;
        do
        {
          unsigned int v48 = *v25;
          if (v48 < 0x30 || v48 >= v46)
          {
            if (v48 < 0x41 || v48 >= v45)
            {
              unsigned __int8 v35 = 0;
              int v36 = 1;
              if (v48 < 0x61 || v48 >= v44) {
                return v35 | (v36 << 8);
              }
              char v49 = -87;
            }
            else
            {
              char v49 = -55;
            }
          }
          else
          {
            char v49 = -48;
          }
          if (((v47 * (unsigned __int16)a7) & 0xFF00) != 0) {
            goto LABEL_97;
          }
          unsigned int v47 = (v47 * a7) + (v48 + v49);
          if ((v47 >> 8)) {
            goto LABEL_97;
          }
          ++v25;
          --result;
        }
        while (result);
        int v36 = 0;
        unsigned __int8 v35 = v47;
        return v35 | (v36 << 8);
      }
      goto LABEL_96;
    }
    goto LABEL_97;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v27 = a7 + 87;
      if (a7 > 10)
      {
        unsigned __int8 v28 = a7 + 55;
      }
      else
      {
        unsigned __int8 v27 = 97;
        unsigned __int8 v28 = 65;
      }
      if (a7 <= 10) {
        unsigned __int8 v29 = a7 + 48;
      }
      else {
        unsigned __int8 v29 = 58;
      }
      if (v25)
      {
        LOBYTE(v30) = 0;
        uint64_t v31 = v25 + 1;
        uint64_t v32 = result - 1;
        while (1)
        {
          unsigned int v33 = *v31;
          if (v33 < 0x30 || v33 >= v29)
          {
            if (v33 < 0x41 || v33 >= v28)
            {
              unsigned __int8 v35 = 0;
              int v36 = 1;
              if (v33 < 0x61 || v33 >= v27) {
                return v35 | (v36 << 8);
              }
              char v34 = -87;
            }
            else
            {
              char v34 = -55;
            }
          }
          else
          {
            char v34 = -48;
          }
          if (((v30 * (unsigned __int16)a7) & 0xFF00) != 0) {
            goto LABEL_97;
          }
          unsigned int v30 = (v30 * a7) - (v33 + v34);
          if ((v30 & 0xFFFFFF00) != 0) {
            goto LABEL_97;
          }
          ++v31;
          if (!--v32) {
            goto LABEL_73;
          }
        }
      }
LABEL_96:
      unsigned __int8 v35 = 0;
      int v36 = 0;
      return v35 | (v36 << 8);
    }
    goto LABEL_97;
  }
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
  return result;
}

uint64_t sub_18AF67BDC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18AF67C24()
{
  return swift_getGenericMetadata();
}

uint64_t sub_18AF67C54()
{
  sub_18AF339B8();
  sub_18AF33704();
  return sub_18AF63FF8();
}

uint64_t sub_18AF67CC0()
{
  sub_18AF339B8();
  sub_18AF33704();
  return sub_18AF63C58();
}

uint64_t sub_18AF67D2C()
{
  sub_18AF339B8();
  sub_18AF33704();
  return sub_18AF640A0();
}

uint64_t sub_18AF67D98()
{
  sub_18AF339B8();
  sub_18AF33704();
  return sub_18AF63CF4();
}

void __swiftcall CKFetchRecordZoneChangesOperation.init(recordZoneIDs:configurationsByRecordZoneID:)(CKFetchRecordZoneChangesOperation *__return_ptr retstr, Swift::OpaquePointer_optional recordZoneIDs, Swift::OpaquePointer_optional configurationsByRecordZoneID)
{
  uint64_t v3 = *(void *)&recordZoneIDs.is_nil;
  rawValue = recordZoneIDs.value._rawValue;
  id v5 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  unsigned __int8 v6 = v5;
  if (rawValue)
  {
    sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
    id v7 = v6;
    v8.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    id v9 = v5;
    v8.super.Class isa = 0;
  }
  objc_msgSend(v6, sel_setRecordZoneIDs_, v8.super.isa);

  if (v3)
  {
    sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
    sub_18AF34EA0(0, (unint64_t *)&unk_1E9125638);
    sub_18AF62AF4();
    v10.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v10.super.Class isa = 0;
  }
  objc_msgSend(v6, sel_setConfigurationsByRecordZoneID_, v10.super.isa);
}

uint64_t (*CKFetchRecordZoneChangesOperation.undeprecated_recordChangedBlock.getter())()
{
  uint64_t result = (uint64_t (*)())objc_msgSend(v0, sel_recordChangedBlock);
  if (result)
  {
    uint64_t v2 = sub_18AF33890();
    sub_18AF338A8(v2);
    return sub_18AF6A378;
  }
  return result;
}

uint64_t sub_18AF67FBC@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t)CKFetchRecordZoneChangesOperation.undeprecated_recordChangedBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    unsigned __int8 v6 = sub_18AF6A37C;
  }
  else
  {
    unsigned __int8 v6 = 0;
  }
  *a1 = v6;
  a1[1] = result;
  return result;
}

#error "18AF680A4: call analysis failed (funcsize=34)"

void CKFetchRecordZoneChangesOperation.undeprecated_recordChangedBlock.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(), void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_18AF16AAC();
  a21 = v22;
  a22 = v23;
  sub_18AF39048();
  if (v24)
  {
    sub_18AF339E0();
    a9 = MEMORY[0x1E4F143A8];
    sub_18AF16D3C();
    a11 = sub_18AF68194;
    a12 = &unk_1ED7F0F00;
    _Block_copy(&a9);
    sub_18AF18598();
    uint64_t v24 = swift_release();
  }
  sub_18AF342E0(v24, sel_setRecordChangedBlock_);
  sub_18AF393D4();
  sub_18AF185B4();
}

uint64_t sub_18AF6815C()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t (*CKFetchRecordZoneChangesOperation.undeprecated_recordChangedBlock.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_18AF16D30(a1);
  *uint64_t v1 = CKFetchRecordZoneChangesOperation.undeprecated_recordChangedBlock.getter();
  v1[1] = v2;
  return sub_18AF681DC;
}

uint64_t sub_18AF681DC(uint64_t *a1, char a2)
{
  return sub_18AF69DC0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKFetchRecordZoneChangesOperation.undeprecated_recordChangedBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF62BB8, (uint64_t (*)(uint64_t, uint64_t))sub_18AF62BB4);
}

void (*CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.getter())(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (void (*)(uint64_t, uint64_t, uint64_t))objc_msgSend(v0, sel_recordWithIDWasDeletedBlock);
  if (result)
  {
    uint64_t v2 = sub_18AF33890();
    sub_18AF338A8(v2);
    return sub_18AF6848C;
  }
  return result;
}

uint64_t sub_18AF68284@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t)CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    unsigned __int8 v6 = sub_18AF6A298;
  }
  else
  {
    unsigned __int8 v6 = 0;
  }
  *a1 = v6;
  a1[1] = result;
  return result;
}

#error "18AF6836C: call analysis failed (funcsize=34)"

void CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(uint64_t a1, void *a2), void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_18AF16AAC();
  a21 = v22;
  a22 = v23;
  sub_18AF39048();
  if (v24)
  {
    sub_18AF339E0();
    a9 = MEMORY[0x1E4F143A8];
    sub_18AF16D3C();
    a11 = sub_18AF68494;
    a12 = &unk_1ED7F1630;
    _Block_copy(&a9);
    sub_18AF18598();
    uint64_t v24 = swift_release();
  }
  sub_18AF342E0(v24, sel_setRecordWithIDWasDeletedBlock_);
  sub_18AF393D4();
  sub_18AF185B4();
}

void sub_18AF68424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = (id)MEMORY[0x18C128F60](a2, a3);
  (*(void (**)(uint64_t, uint64_t, id))(a4 + 16))(a4, a1, v6);
}

void sub_18AF6848C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_18AF68424(a1, a2, a3, *(void *)(v3 + 16));
}

void sub_18AF68494(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t (*CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_18AF16D30(a1);
  *uint64_t v1 = CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.getter();
  v1[1] = v2;
  return sub_18AF68568;
}

uint64_t sub_18AF68568(uint64_t *a1, char a2)
{
  return sub_18AF69DC0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF42F30, (uint64_t (*)(uint64_t, uint64_t))sub_18AF1E758);
}

uint64_t (*CKFetchRecordZoneChangesOperation.zoneAttributesChangedBlock.getter())()
{
  uint64_t result = (uint64_t (*)())objc_msgSend(v0, sel_zoneAttributesChangedBlock);
  if (result)
  {
    uint64_t v2 = sub_18AF33890();
    sub_18AF338A8(v2);
    return sub_18AF687B0;
  }
  return result;
}

uint64_t sub_18AF68610@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t)CKFetchRecordZoneChangesOperation.zoneAttributesChangedBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    id v6 = sub_18AF6A22C;
  }
  else
  {
    id v6 = 0;
  }
  *a1 = v6;
  a1[1] = result;
  return result;
}

#error "18AF686F8: call analysis failed (funcsize=34)"

void CKFetchRecordZoneChangesOperation.zoneAttributesChangedBlock.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(), void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_18AF16AAC();
  a21 = v22;
  a22 = v23;
  sub_18AF39048();
  if (v24)
  {
    sub_18AF339E0();
    a9 = MEMORY[0x1E4F143A8];
    sub_18AF16D3C();
    a11 = sub_18AF68194;
    a12 = &unk_1ED7F1338;
    _Block_copy(&a9);
    sub_18AF18598();
    uint64_t v24 = swift_release();
  }
  sub_18AF342E0(v24, sel_setZoneAttributesChangedBlock_);
  sub_18AF393D4();
  sub_18AF185B4();
}

uint64_t sub_18AF687B0()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

void sub_18AF687C4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t (*CKFetchRecordZoneChangesOperation.zoneAttributesChangedBlock.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_18AF16D30(a1);
  *uint64_t v1 = CKFetchRecordZoneChangesOperation.zoneAttributesChangedBlock.getter();
  v1[1] = v2;
  return sub_18AF68870;
}

uint64_t sub_18AF68870(uint64_t *a1, char a2)
{
  return sub_18AF69DC0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKFetchRecordZoneChangesOperation.zoneAttributesChangedBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF62BB8, (uint64_t (*)(uint64_t, uint64_t))sub_18AF62BB4);
}

void (*CKFetchRecordZoneChangesOperation.recordWasChangedBlock.getter())(uint64_t a1, void *a2, char a3)
{
  uint64_t result = (void (*)(uint64_t, void *, char))objc_msgSend(v0, sel_recordWasChangedBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = sub_18AF33890();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = sub_18AF61BE0;
    *(void *)(v4 + 24) = v3;
    return sub_18AF61C74;
  }
  return result;
}

uint64_t sub_18AF68940@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t)CKFetchRecordZoneChangesOperation.recordWasChangedBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    id v6 = sub_18AF62AEC;
  }
  else
  {
    id v6 = 0;
  }
  *a1 = v6;
  a1[1] = result;
  return result;
}

#error "18AF68A28: call analysis failed (funcsize=34)"

void CKFetchRecordZoneChangesOperation.recordWasChangedBlock.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(uint64_t a1, void *a2, void *a3, void *a4), void *a12, void (*a13)(uint64_t a1, void *a2, void *a3), uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_18AF16AAC();
  a21 = v24;
  a22 = v25;
  if (v26)
  {
    sub_18AF33FF4();
    objc_msgSend(v23, sel_setErrorReportingStyle_, 0);
    uint64_t v27 = sub_18AF19EAC();
    *(void *)(v27 + 16) = v23;
    *(void *)(v27 + 24) = v22;
    a13 = sub_18AF61DC8;
    a14 = v27;
    a9 = MEMORY[0x1E4F143A8];
    sub_18AF16D3C();
    a11 = sub_18AF61DD0;
    a12 = &unk_1ED7F14A0;
    _Block_copy(&a9);
    sub_18AF18598();
    uint64_t v28 = swift_release();
    sub_18AF342E0(v28, sel_setRecordWasChangedBlock_);
    sub_18AF393D4();
    sub_18AF30B4C();
    sub_18AF185B4();
  }
  else
  {
    sub_18AF185B4();
    [v29 v30];
  }
}

uint64_t (*CKFetchRecordZoneChangesOperation.recordWasChangedBlock.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_18AF16D30(a1);
  *uint64_t v1 = CKFetchRecordZoneChangesOperation.recordWasChangedBlock.getter();
  v1[1] = v2;
  return sub_18AF68B90;
}

uint64_t sub_18AF68B90(uint64_t *a1, char a2)
{
  return sub_18AF69DC0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKFetchRecordZoneChangesOperation.recordWasChangedBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF62BB8, (uint64_t (*)(uint64_t, uint64_t))sub_18AF62BB4);
}

void (*CKFetchRecordZoneChangesOperation.undeprecated_recordZoneFetchCompletionBlock.getter())(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5, uint64_t a6)
{
  uint64_t result = (void (*)(uint64_t, uint64_t, uint64_t, unint64_t, char, uint64_t))objc_msgSend(v0, sel_recordZoneFetchCompletionBlock);
  if (result)
  {
    uint64_t v2 = sub_18AF33890();
    sub_18AF338A8(v2);
    return sub_18AF68EF0;
  }
  return result;
}

uint64_t sub_18AF68C38@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t)CKFetchRecordZoneChangesOperation.undeprecated_recordZoneFetchCompletionBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    id v6 = sub_18AF6A1AC;
  }
  else
  {
    id v6 = 0;
  }
  *a1 = v6;
  a1[1] = result;
  return result;
}

#error "18AF68D20: call analysis failed (funcsize=34)"

uint64_t sub_18AF68D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t (*a7)(uint64_t *, uint64_t *, void *, char *, uint64_t *))
{
  uint64_t v12 = a1;
  v10[1] = a4;
  uint64_t v11 = a2;
  v10[0] = a3;
  char v9 = a5;
  uint64_t v8 = a6;
  return a7(&v12, &v11, v10, &v9, &v8);
}

void CKFetchRecordZoneChangesOperation.undeprecated_recordZoneFetchCompletionBlock.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6), void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_18AF16AAC();
  a21 = v22;
  a22 = v23;
  sub_18AF39048();
  if (v24)
  {
    sub_18AF339E0();
    a9 = MEMORY[0x1E4F143A8];
    sub_18AF16D3C();
    a11 = sub_18AF68EF8;
    a12 = &unk_1ED7F14F0;
    _Block_copy(&a9);
    sub_18AF18598();
    uint64_t v24 = swift_release();
  }
  sub_18AF342E0(v24, sel_setRecordZoneFetchCompletionBlock_);
  sub_18AF393D4();
  sub_18AF185B4();
}

void sub_18AF68E30(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  if (a4 >> 60 == 15)
  {
    Class isa = 0;
    if (a6)
    {
LABEL_3:
      uint64_t v13 = _convertErrorToNSError(_:)();
      goto LABEL_6;
    }
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    if (a6) {
      goto LABEL_3;
    }
  }
  uint64_t v13 = 0;
LABEL_6:
  id v14 = (id)v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t, Class, void))(a7 + 16))(a7, a1, a2, isa, a5 & 1);
}

void sub_18AF68EF0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5, uint64_t a6)
{
  sub_18AF68E30(a1, a2, a3, a4, a5, a6, *(void *)(v6 + 16));
}

uint64_t sub_18AF68EF8(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  uint64_t v8 = a4;
  uint64_t v11 = *(void (**)(void *, void *, void *, unint64_t, uint64_t, void *))(a1 + 32);
  if (a4)
  {
    swift_retain();
    id v12 = a2;
    id v13 = a3;
    id v14 = v8;
    uint64_t v8 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;
  }
  else
  {
    swift_retain();
    id v17 = a2;
    id v18 = a3;
    unint64_t v16 = 0xF000000000000000;
  }
  id v19 = a6;
  v11(a2, a3, v8, v16, a5, a6);

  sub_18AF5B00C((uint64_t)v8, v16);

  return swift_release();
}

uint64_t (*CKFetchRecordZoneChangesOperation.undeprecated_recordZoneFetchCompletionBlock.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_18AF16D30(a1);
  *uint64_t v1 = CKFetchRecordZoneChangesOperation.undeprecated_recordZoneFetchCompletionBlock.getter();
  v1[1] = v2;
  return sub_18AF69028;
}

uint64_t sub_18AF69028(uint64_t *a1, char a2)
{
  return sub_18AF69DC0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKFetchRecordZoneChangesOperation.undeprecated_recordZoneFetchCompletionBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF62BB8, (uint64_t (*)(uint64_t, uint64_t))sub_18AF62BB4);
}

uint64_t (*CKFetchRecordZoneChangesOperation.recordZoneFetchResultBlock.getter())(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  uint64_t result = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, __int16))objc_msgSend(v0, sel_recordZoneFetchCompletionBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = sub_18AF33890();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = sub_18AF6A374;
    *(void *)(v4 + 24) = v3;
    return sub_18AF694D8;
  }
  return result;
}

uint64_t sub_18AF690F8@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t)CKFetchRecordZoneChangesOperation.recordZoneFetchResultBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_18AF6A164;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = result;
  return result;
}

uint64_t sub_18AF69168(void *a1, uint64_t a2, uint64_t (*a3)(void, void, void, void, void))
{
  return a3(*a1, *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(unsigned __int8 *)(a2 + 24) | (*(unsigned __int8 *)(a2 + 25) << 8));
}

#error "18AF69230: call analysis failed (funcsize=34)"

uint64_t sub_18AF69248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t (*a6)(uint64_t *, void *))
{
  uint64_t v9 = a1;
  v7[0] = a2;
  v7[1] = a3;
  void v7[2] = a4;
  __int16 v8 = a5 & 0x1FF;
  return a6(&v9, v7);
}

void CKFetchRecordZoneChangesOperation.recordZoneFetchResultBlock.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6), void *a12, void (*a13)(void *a1, void *a2, uint64_t a3, unint64_t a4, char a5, void *a6), uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_18AF16AAC();
  a21 = v25;
  a22 = v26;
  if (v27)
  {
    sub_18AF33FF4();
    objc_msgSend(v23, sel_setErrorReportingStyle_, 0);
    uint64_t v28 = sub_18AF19EAC();
    *(void *)(v28 + 16) = v23;
    *(void *)(v28 + 24) = v22;
    a13 = sub_18AF69788;
    a14 = v28;
    a9 = MEMORY[0x1E4F143A8];
    sub_18AF16D3C();
    a11 = sub_18AF68EF8;
    a12 = &unk_1ED7F15B8;
    _Block_copy(&a9);
    sub_18AF18598();
    uint64_t v29 = swift_release();
    sub_18AF342E0(v29, sel_setRecordZoneFetchCompletionBlock_);
    _Block_release(v24);
    objc_msgSend(v23, sel_setCanDropItemResultsEarly_, 1);
    sub_18AF30B4C();
    sub_18AF30B4C();
    sub_18AF185B4();
  }
  else
  {
    sub_18AF185B4();
    [v30 v31];
  }
}

void sub_18AF693C0(uint64_t a1, id a2, uint64_t a3, unint64_t a4, uint64_t a5, void (*a6)(uint64_t, id, uint64_t, unint64_t, uint64_t, id))
{
  if ((a5 & 0x100) != 0)
  {
    id v12 = a2;
    a6(a1, 0, 0, 0xF000000000000000, 0, a2);
    sub_18AF6A320(a2, a3, a4, a5, 1);
  }
  else
  {
    id v13 = a2;
    sub_18AF5F6E8(a3, a4);
    a6(a1, a2, a3, a4, a5 & 1, 0);
    sub_18AF5B00C(a3, a4);
  }
}

uint64_t sub_18AF694D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  return sub_18AF6A148(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void))sub_18AF693C0);
}

void sub_18AF694F0(void *a1, void *a2, uint64_t a3, unint64_t a4, char a5, void *a6, void (*a7)(void *, void *, uint64_t, unint64_t, uint64_t))
{
  char v8 = a5;
  if (a6)
  {
    swift_getErrorValue();
    id v14 = a6;
    if (!Error.ckIsPartialError.getter())
    {
      id v20 = a6;
      a7(a1, a6, 0, 0, 256);

      id v19 = a6;
      goto LABEL_7;
    }
    uint64_t v26 = (uint64_t)a6;
    id v15 = a6;
    sub_18AF161EC(&qword_1E9125660);
    type metadata accessor for CKError(0);
    swift_dynamicCast();
    uint64_t v16 = related decl 'e' for CKErrorCode.partialErrorsByItemID.getter((uint64_t)v25);

    if (v16)
    {
      sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
      sub_18AF62AF4();
      id v22 = a1;
      AnyHashable.init<A>(_:)();
      id v17 = sub_18AFFDF20((uint64_t)v24, v16);
      swift_bridgeObjectRelease();
      sub_18AF6A2CC((uint64_t)v24);
      if (v17)
      {
        id v18 = v17;
        a7(v22, v17, 0, 0, 256);

        id v19 = v17;
LABEL_7:

        return;
      }
    }

    char v8 = a5;
  }
  if (a2)
  {
    id v21 = a2;
    sub_18AF5F6E8(a3, a4);
    a7(a1, a2, a3, a4, v8 & 1);

    sub_18AF5B00C(a3, a4);
  }
  else
  {
    type metadata accessor for CKError(0);
    uint64_t v26 = 1;
    sub_18AF8EAA4(MEMORY[0x1E4FBC860]);
    sub_18AF62B54();
    _BridgedStoredNSError.init(_:userInfo:)();
    id v21 = (id)v24[0];
    a7(a1, (void *)v24[0], 0, 0, 256);
  }
}

void sub_18AF69788(void *a1, void *a2, uint64_t a3, unint64_t a4, char a5, void *a6)
{
  sub_18AF694F0(a1, a2, a3, a4, a5, a6, *(void (**)(void *, void *, uint64_t, unint64_t, uint64_t))(v6 + 16));
}

uint64_t (*CKFetchRecordZoneChangesOperation.recordZoneFetchResultBlock.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_18AF16D30(a1);
  *uint64_t v1 = CKFetchRecordZoneChangesOperation.recordZoneFetchResultBlock.getter();
  v1[1] = v2;
  return sub_18AF697D4;
}

uint64_t sub_18AF697D4(uint64_t *a1, char a2)
{
  return sub_18AF69DC0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKFetchRecordZoneChangesOperation.recordZoneFetchResultBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF62BB8, (uint64_t (*)(uint64_t, uint64_t))sub_18AF62BB4);
}

void (*CKFetchRecordZoneChangesOperation.undeprecated_fetchRecordZoneChangesCompletionBlock.getter())(uint64_t a1)
{
  uint64_t result = (void (*)(uint64_t))objc_msgSend(v0, sel_fetchRecordZoneChangesCompletionBlock);
  if (result)
  {
    uint64_t v2 = sub_18AF33890();
    sub_18AF338A8(v2);
    return sub_18AF20008;
  }
  return result;
}

uint64_t sub_18AF6987C@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t)CKFetchRecordZoneChangesOperation.undeprecated_fetchRecordZoneChangesCompletionBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_18AF4776C;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = result;
  return result;
}

#error "18AF69964: call analysis failed (funcsize=34)"

void CKFetchRecordZoneChangesOperation.undeprecated_fetchRecordZoneChangesCompletionBlock.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(uint64_t a1, void *a2), void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_18AF16AAC();
  a21 = v22;
  a22 = v23;
  sub_18AF39048();
  if (v24)
  {
    sub_18AF339E0();
    a9 = MEMORY[0x1E4F143A8];
    sub_18AF16D3C();
    a11 = sub_18AF53A88;
    a12 = &unk_1ED7F15E0;
    _Block_copy(&a9);
    sub_18AF18598();
    uint64_t v24 = swift_release();
  }
  sub_18AF342E0(v24, sel_setFetchRecordZoneChangesCompletionBlock_);
  sub_18AF393D4();
  sub_18AF185B4();
}

uint64_t (*CKFetchRecordZoneChangesOperation.undeprecated_fetchRecordZoneChangesCompletionBlock.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_18AF16D30(a1);
  *uint64_t v1 = CKFetchRecordZoneChangesOperation.undeprecated_fetchRecordZoneChangesCompletionBlock.getter();
  v1[1] = v2;
  return sub_18AF69A60;
}

uint64_t sub_18AF69A60(uint64_t *a1, char a2)
{
  return sub_18AF69DC0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKFetchRecordZoneChangesOperation.undeprecated_fetchRecordZoneChangesCompletionBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF62BB8, (uint64_t (*)(uint64_t, uint64_t))sub_18AF62BB4);
}

void (*CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.getter())(void *a1, char a2)
{
  uint64_t result = (void (*)(void *, char))objc_msgSend(v0, sel_fetchRecordZoneChangesCompletionBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = sub_18AF33890();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = sub_18AF19EAC();
    *(void *)(v4 + 16) = sub_18AF20004;
    *(void *)(v4 + 24) = v3;
    return sub_18AF539B8;
  }
  return result;
}

uint64_t sub_18AF69B30@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t result = (uint64_t)CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_18AF53C04;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

#error "18AF69C18: call analysis failed (funcsize=34)"

void CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(uint64_t a1, void *a2), void *a12, void (*a13)(void *a1), uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_18AF16AAC();
  a21 = v24;
  a22 = v25;
  if (v26)
  {
    sub_18AF33FF4();
    objc_msgSend(v23, sel_setErrorReportingStyle_, 0);
    uint64_t v27 = sub_18AF19EAC();
    *(void *)(v27 + 16) = v23;
    *(void *)(v27 + 24) = v22;
    a13 = sub_18AF53A80;
    a14 = v27;
    a9 = MEMORY[0x1E4F143A8];
    sub_18AF16D3C();
    a11 = sub_18AF53A88;
    a12 = &unk_1ED7F1798;
    _Block_copy(&a9);
    sub_18AF18598();
    uint64_t v28 = swift_release();
    sub_18AF342E0(v28, sel_setFetchRecordZoneChangesCompletionBlock_);
    sub_18AF393D4();
    sub_18AF30B4C();
    sub_18AF185B4();
  }
  else
  {
    sub_18AF185B4();
    [v29 v30];
  }
}

uint64_t (*CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_18AF16D30(a1);
  *uint64_t v1 = CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.getter();
  v1[1] = v2;
  return sub_18AF69D80;
}

uint64_t sub_18AF69D80(uint64_t *a1, char a2)
{
  return sub_18AF69DC0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF42F30, (uint64_t (*)(uint64_t, uint64_t))sub_18AF1E758);
}

uint64_t sub_18AF69DC0(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if ((a2 & 1) == 0) {
    return a3(*a1, v7);
  }
  a4(*a1, v7);
  a3(v6, v7);

  return a5(v6, v7);
}

uint64_t CKFetchRecordZoneChangesConfiguration.desiredKeys.getter()
{
  return sub_18AF6A060(v0);
}

void sub_18AF69E6C()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  CKFetchRecordZoneChangesConfiguration.desiredKeys.setter(v0);
}

void CKFetchRecordZoneChangesConfiguration.desiredKeys.setter(uint64_t a1)
{
  if (a1)
  {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    Class isa = 0;
  }
  objc_msgSend(v1, sel_setDesiredKeys_, isa);
}

void (*CKFetchRecordZoneChangesConfiguration.desiredKeys.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = (uint64_t)v1;
  *a1 = sub_18AF6A060(v1);
  return sub_18AF69F58;
}

void sub_18AF69F58(uint64_t *a1, char a2)
{
  if (a2)
  {
    uint64_t v2 = swift_bridgeObjectRetain();
    CKFetchRecordZoneChangesConfiguration.desiredKeys.setter(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    CKFetchRecordZoneChangesConfiguration.desiredKeys.setter(*a1);
  }
}

void __swiftcall CKFetchRecordZoneChangesConfiguration.init(previousServerChangeToken:resultsLimit:desiredKeys:)(CKFetchRecordZoneChangesConfiguration *__return_ptr retstr, CKServerChangeToken_optional previousServerChangeToken, Swift::Int_optional resultsLimit, Swift::OpaquePointer_optional desiredKeys)
{
  Swift::Int value = resultsLimit.value;
  Swift::Bool is_nil = previousServerChangeToken.is_nil;
  Class isa = previousServerChangeToken.value.super.isa;
  id v7 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  char v8 = v7;
  if (isa)
  {
    id v9 = objc_msgSend(v7, sel_setPreviousServerChangeToken_, isa);
    if (is_nil) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  id v9 = v7;
  if (!is_nil) {
LABEL_3:
  }
    sub_18AF342E0((uint64_t)v9, sel_setResultsLimit_);
LABEL_4:
  if (value) {
    CKFetchRecordZoneChangesConfiguration.desiredKeys.setter(value);
  }
}

uint64_t sub_18AF6A060(void *a1)
{
  id v1 = objc_msgSend(a1, sel_desiredKeys);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_18AF6A0F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CKFetchRecordZoneChangesConfiguration.desiredKeys.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18AF6A128(uint64_t a1)
{
  return sub_18AF6A5D4(a1, *(uint64_t (**)(uint64_t *))(v1 + 16));
}

uint64_t sub_18AF6A130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  return sub_18AF6A148(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void))sub_18AF69248);
}

uint64_t sub_18AF6A148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void))
{
  return a6(a1, a2, a3, a4, a5 & 0x1FF, *(void *)(v6 + 16), *(void *)(v6 + 24));
}

uint64_t sub_18AF6A164(void *a1, uint64_t a2)
{
  return sub_18AF69168(a1, a2, *(uint64_t (**)(void, void, void, void, void))(v2 + 16));
}

uint64_t sub_18AF6A16C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  return sub_18AF68D38(a1, a2, a3, a4, a5, a6, *(uint64_t (**)(uint64_t *, uint64_t *, void *, char *, uint64_t *))(v6 + 16));
}

uint64_t sub_18AF6A174()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_18AF6A1AC(void *a1, void *a2, void *a3, unsigned __int8 *a4, void *a5)
{
  return (*(uint64_t (**)(void, void, void, void, void, void))(v5 + 16))(*a1, *a2, *a3, a3[1], *a4, *a5);
}

uint64_t sub_18AF6A1F4(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t sub_18AF6A22C(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_18AF6A258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t *, void *))(v3 + 16);
  v6[1] = a3;
  uint64_t v7 = a1;
  v6[0] = a2;
  return v4(&v7, v6);
}

uint64_t sub_18AF6A298(void *a1, void *a2)
{
  return (*(uint64_t (**)(void, void, void))(v2 + 16))(*a1, *a2, a2[1]);
}

uint64_t sub_18AF6A2CC(uint64_t a1)
{
  return a1;
}

void sub_18AF6A320(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  if (a5)
  {
  }
  else
  {

    sub_18AF5B00C(a2, a3);
  }
}

uint64_t sub_18AF6A42C()
{
  uint64_t result = swift_beginAccess();
  if (*(void *)(v0 + 16))
  {
    *(void *)(v0 + 16) = 0;
    *(void *)(v0 + 24) = 0;
    swift_retain();
    sub_18AF472EC();
    return sub_18AF3858C();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_18AF6A494()
{
  swift_beginAccess();
  uint64_t result = *(void *)(v0 + 16);
  if (result) {
    *(void *)(v0 + 16) = 0;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t sub_18AF6A4E0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 16) = 0;
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 16);
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  sub_18AF1E758(v5);
  return v2;
}

uint64_t sub_18AF6A54C(uint64_t a1)
{
  *(void *)(v1 + 16) = 0;
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_18AF6A5A8(void *a1, uint64_t (*a2)(void))
{
  return a2(*a1);
}

uint64_t sub_18AF6A5D4(uint64_t a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v3 = a1;
  return a2(&v3);
}

uint64_t sub_18AF6A60C(void *a1)
{
  *(void *)&v1[OBJC_IVAR___CKSyncEngine_swiftEngine] = 0;
  uint64_t v3 = v1;
  sub_18AF5FFC8((uint64_t)v14);
  id v4 = v15;
  if (object_getClass(v15) != (Class)_TtC8CloudKit31CKSyncEngineObjCDelegateAdapter || v4 == 0)
  {
    _StringGuts.grow(_:)(75);
    v11._object = (void *)0x800000018B1D28C0;
    v11._uint64_t countAndFlagsBits = 0xD000000000000049;
    String.append(_:)(v11);
    swift_getObjectType();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *(void *)&v3[OBJC_IVAR___CKSyncEngine_delegateAdapter] = v4;
    swift_unknownObjectRetain_n();

    v13.receiver = v3;
    v13.super_class = (Class)CKSyncEngine;
    id v6 = objc_msgSendSuper2(&v13, sel_init);
    uint64_t v7 = v16;
    char v8 = (char *)v6;

    id v16 = v6;
    sub_18AF535D8((uint64_t)v14, (uint64_t)&v12);
    type metadata accessor for CKSyncEngine();
    swift_allocObject();
    uint64_t v9 = CKSyncEngine.init(_:)((uint64_t)&v12);
    swift_unknownObjectRelease();

    *(void *)&v8[OBJC_IVAR___CKSyncEngine_swiftEngine] = v9;
    swift_release();
    sub_18AF5225C((uint64_t)v14);
    return (uint64_t)v8;
  }
  return result;
}

unint64_t CKSyncEngine.description.getter()
{
  if (!CKSyncEngine.actorIfInitialized.getter()) {
    return 0xD00000000000001CLL;
  }
  uint64_t v0 = sub_18AF40CEC();
  swift_release();
  return v0;
}

uint64_t CKSyncEngine.actorIfInitialized.getter()
{
  if (!*(void *)(v0 + OBJC_IVAR___CKSyncEngine_swiftEngine)) {
    return 0;
  }
  swift_retain();
  uint64_t v1 = CKSyncEngine.actor.getter();
  swift_release();
  return v1;
}

id sub_18AF6A90C()
{
  id v0 = *(id *)(CKSyncEngine.actor.getter() + 136);
  swift_release();
  return v0;
}

uint64_t sub_18AF6A948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  void v6[4] = a6;
  void v6[2] = a4;
  return MEMORY[0x1F4188298](sub_18AF6A96C, 0, 0);
}

uint64_t sub_18AF6A96C()
{
  sub_18AF339B8();
  *(void *)(v0 + 40) = CKSyncEngine.actor.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_18AF6AA04;
  return sub_18AFE0438();
}

uint64_t sub_18AF6AA04()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16D18();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v3, v4, v5);
}

uint64_t sub_18AF6AAEC()
{
  sub_18AF339B8();
  uint64_t v1 = *(void (**)(void))(v0 + 24);
  if (v1) {
    v1();
  }
  sub_18AF16D48();
  return v2();
}

void sub_18AF6AC38()
{
  sub_18AF22D38();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = sub_18AF161EC(&qword_1E9125478);
  uint64_t v11 = sub_18AF19284(v10);
  MEMORY[0x1F4188790](v11);
  uint64_t v12 = sub_18AF38518();
  sub_18AF1826C(v1, v13, v14, v12);
  id v15 = (void *)swift_allocObject();
  void v15[2] = 0;
  v15[3] = 0;
  v15[4] = v0;
  v15[5] = v9;
  v15[6] = v7;
  id v16 = v0;
  v5(v9, v7);
  sub_18AF42DB4(v1, v3, (uint64_t)v15);
  swift_release();
  sub_18AF3387C();
}

uint64_t sub_18AF6AD04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[11] = a5;
  v6[12] = a6;
  v6[10] = a4;
  return MEMORY[0x1F4188298](sub_18AF6AD28, 0, 0);
}

uint64_t sub_18AF6AD28()
{
  uint64_t v13 = v0;
  *(void *)(v0 + 104) = CKSyncEngine.actor.getter();
  sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
  sub_18AF62AF4();
  uint64_t v1 = MEMORY[0x1E4FBC860];
  sub_18AF3858C();
  uint64_t v2 = Dictionary.init(dictionaryLiteral:)();
  *(void *)(v0 + 112) = v2;
  type metadata accessor for SyncEngine();
  id v3 = static SyncEngine.defaultOperationGroup()();
  *(void *)(v0 + 120) = v3;
  id v4 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_18AF35BFC(v4);
  uint64_t v7 = v6;
  if (v6 && (sub_18AF35EF4() & 1) == 0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = 0;
    char v12 = 2;
    sub_18AF36168((uint64_t)&v11, v5, v7);
    sub_18AF30900();
    sub_18AF473A8();
  }
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 2;
  *(void *)(v0 + 32) = v4;
  *(void *)(v0 + 40) = v1;
  *(void *)(v0 + 48) = v2;
  *(unsigned char *)(v0 + 56) = 1;
  *(void *)(v0 + 64) = 0;
  *(unsigned char *)(v0 + 72) = 0;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_18AF6AF00;
  uint64_t v9 = (_OWORD *)sub_18AF30E00();
  return sub_18AF1B604(v9);
}

uint64_t sub_18AF6AF00()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  sub_18AF16D18();
  *id v3 = v2;
  uint64_t v5 = *(void **)(v4 + 120);
  uint64_t v6 = *v1;
  sub_18AF16D18();
  *uint64_t v7 = v6;
  *(void *)(v8 + 136) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v9, v10, v11);
}

uint64_t sub_18AF6B04C()
{
  sub_18AF339B8();
  if (*(void *)(v0 + 88))
  {
    uint64_t v1 = sub_18AF3868C();
    v2(v1);
  }
  sub_18AF16D48();
  return v3();
}

uint64_t sub_18AF6B0B0()
{
  sub_18AF2A56C();
  uint64_t v1 = *(void (**)(uint64_t))(v0 + 88);
  uint64_t v2 = *(void **)(v0 + 136);
  if (v1)
  {
    id v3 = v2;
    uint64_t v4 = sub_18AF1FFDC();
    v1(v4);
  }
  sub_18AF16D48();
  return v5();
}

void sub_18AF6B220()
{
  sub_18AF22D38();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = sub_18AF161EC(&qword_1E9125478);
  uint64_t v7 = sub_18AF19284(v6);
  MEMORY[0x1F4188790](v7);
  sub_18AF2A53C();
  if (v5)
  {
    uint64_t v8 = sub_18AF19EAC();
    *(void *)(v8 + 16) = v5;
    *(void *)(v8 + 24) = v3;
    uint64_t v9 = sub_18AF71EEC;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  sub_18AF161EC((uint64_t *)&unk_1E9124DF0);
  uint64_t v10 = sub_18AF19EAC();
  *(void *)(v10 + 16) = v9;
  *(void *)(v10 + 24) = v8;
  uint64_t v11 = type metadata accessor for TaskPriority();
  sub_18AF1826C(v1, v12, v13, v11);
  uint64_t v14 = (void *)swift_allocObject();
  long long v14[2] = 0;
  void v14[3] = 0;
  void v14[4] = v0;
  v14[5] = v10;
  sub_18AF42F30(v5);
  id v15 = v0;
  sub_18AF42DB4(v1, (uint64_t)&unk_1E9126020, (uint64_t)v14);
  swift_release();
  sub_18AF3387C();
}

uint64_t sub_18AF6B344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 112) = a4;
  *(void *)(v5 + 120) = a5;
  return MEMORY[0x1F4188298](sub_18AF6B364, 0, 0);
}

uint64_t sub_18AF6B364()
{
  sub_18AF2A56C();
  uint64_t v8 = v0;
  *(void *)(v0 + 128) = CKSyncEngine.actor.getter();
  uint64_t v6 = 0;
  char v7 = 3;
  CKSyncEngine.SendChangesOptions.init(scope:operationGroup:)((uint64_t)&v6, 0, v0 + 16);
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  *(void *)(v0 + 136) = v1;
  *(void *)(v0 + 144) = v3;
  *(void *)(v0 + 40) = v1;
  *(unsigned char *)(v0 + 48) = v2;
  *(void *)(v0 + 56) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v4;
  void *v4 = v0;
  v4[1] = sub_18AF6B448;
  return sub_18AF1B670((uint64_t *)(v0 + 40));
}

uint64_t sub_18AF6B448()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v3 = v2;
  uint64_t v5 = *(void **)(v4 + 144);
  uint64_t v6 = *v1;
  sub_18AF16D18();
  *char v7 = v6;
  *(void *)(v8 + 160) = v0;
  swift_task_dealloc();

  swift_release();
  swift_bridgeObjectRelease();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v9, v10, v11);
}

uint64_t sub_18AF6B580()
{
  sub_18AF2A56C();
  sub_18AF71F94();
  uint64_t v1 = *(void (**)(char *))(v0 + 16);
  if (v1)
  {
    uint64_t v2 = swift_retain();
    uint64_t v10 = sub_18AF2313C(v2, v3, v4, v5, v6, v7, v8, v9, v13, 0);
    v1(v10);
    sub_18AF1E758((uint64_t)v1);
  }
  sub_18AF16D48();
  return v11();
}

uint64_t sub_18AF6B610()
{
  sub_18AF2A56C();
  uint64_t v9 = v1;
  sub_18AF71F94();
  uint64_t v2 = *(void (**)(uint64_t *))(v0 + 16);
  uint64_t v3 = *(void **)(v1 + 160);
  if (v2)
  {
    uint64_t v8 = *(void *)(v1 + 160);
    uint64_t v4 = sub_18AF3858C();
    sub_18AF42F30(v4);
    id v5 = v3;
    v2(&v8);

    sub_18AF472EC();
  }

  sub_18AF16D48();
  return v6();
}

void __swiftcall CKSyncEngine.init()(CKSyncEngine *__return_ptr retstr)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());

  objc_msgSend(v1, sel_init);
}

void CKSyncEngine.init()()
{
}

void sub_18AF6B834()
{
  sub_18AF33850();
  if (qword_1E91252D0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_18AF412A0(v1, (uint64_t)qword_1E91253B0);
  id v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)id v5 = 138412290;
    id v7 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v6 = v2;

    _os_log_impl(&dword_18AF10000, v3, v4, "%@ manually setting needsToFetchDatabaseChanges", v5, 0xCu);
    sub_18AF161EC((uint64_t *)&unk_1E9125610);
    swift_arrayDestroy();
    MEMORY[0x18C12BB10](v6, -1, -1);
    MEMORY[0x18C12BB10](v5, -1, -1);
  }
  else
  {
  }
  id v8 = objc_msgSend(v2, sel_state);
  objc_msgSend(v8, sel_setNeedsToFetchDatabaseChanges_, 1);

  sub_18AF16CC4();
}

uint64_t sub_18AF6BB28(uint64_t (*a1)(void))
{
  LOBYTE(a1) = a1();
  swift_release();
  return a1 & 1;
}

uint64_t sub_18AF6BBD0(uint64_t a1, void (*a2)(uint64_t))
{
  CKSyncEngine.actor.getter();
  a2(a1);

  return swift_release();
}

uint64_t sub_18AF6BC24()
{
  CKSyncEngine.actor.getter();
  sub_18AFE8CEC();

  return swift_release();
}

void sub_18AF6BCA8()
{
}

id sub_18AF6BD38(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4 = a1;
  uint64_t v5 = a3();
  uint64_t v7 = v6;

  id v8 = (void *)MEMORY[0x18C128F60](v5, v7);
  swift_bridgeObjectRelease();

  return v8;
}

uint64_t sub_18AF6BDA8()
{
  CKSyncEngine.actor.getter();
  sub_18AFE5CC0();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t sub_18AF6BE24()
{
  uint64_t v0 = *(unsigned __int8 *)(CKSyncEngine.actor.getter() + 352);
  swift_release();
  return v0;
}

uint64_t sub_18AF6BE50()
{
  swift_defaultActor_initialize();
  swift_unknownObjectWeakInit();
  sub_18AF6A494();
  swift_release();
  swift_unknownObjectWeakAssign();
  self;
  uint64_t v1 = swift_dynamicCastObjCClass();
  if (!v1)
  {
    swift_unknownObjectRelease();
    uint64_t v1 = 0;
  }
  *(void *)(v0 + 120) = v1;
  return v0;
}

uint64_t sub_18AF6BEE4()
{
  sub_18AF339B8();
  v1[12] = v2;
  v1[13] = v0;
  v1[11] = v3;
  memcpy(v1 + 2, v4, 0x41uLL);
  return MEMORY[0x1F4188298](sub_18AF6BF58, v0, 0);
}

uint64_t sub_18AF6BF58()
{
  sub_18AF339B8();
  uint64_t v1 = MEMORY[0x18C12BC20](v0[13] + 112);
  v0[14] = v1;
  if (v1)
  {
    uint64_t v2 = CKSyncEngine.actor.getter();
    v0[15] = v2;
    return MEMORY[0x1F4188298](sub_18AF6C00C, v2, 0);
  }
  else
  {
    sub_18AF42CA8();
    sub_18AF1D870(v3);
    sub_18AF16D48();
    return v4();
  }
}

uint64_t sub_18AF6C00C()
{
  sub_18AF339B8();
  *(void *)(v0 + 128) = MEMORY[0x18C12BC20](*(void *)(v0 + 120) + 120);
  swift_release();
  sub_18AF309A4();
  return MEMORY[0x1F4188298](v1, v2, v3);
}

uint64_t sub_18AF6C080()
{
  uint64_t v1 = *(CKSyncEngineFetchChangesOptions **)(v0 + 128);
  uint64_t v2 = *(void **)(v0 + 112);
  if (!v1)
  {
    swift_unknownObjectRelease();
    sub_18AF42CA8();
    sub_18AF1D870(v0 + 16);
    goto LABEL_9;
  }
  uint64_t v3 = *(unsigned __int8 *)(v0 + 16);
  CKSyncEngine.FetchChangesOptions.optionsObject()(v1);
  uint64_t v5 = v4;
  id v6 = objc_msgSend(objc_allocWithZone((Class)CKSyncEngineFetchChangesContext), sel_initWithReason_options_, v3, v4);
  *(void *)(v0 + 136) = v6;

  if (objc_msgSend(v2, sel_respondsToSelector_, sel_syncEngine_nextFetchChangesOptionsForContext_))
  {
    id v7 = objc_msgSend(*(id *)(v0 + 112), sel_syncEngine_nextFetchChangesOptionsForContext_, *(void *)(v0 + 128), v6);
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void **)(v0 + 128);
      CKSyncEngineFetchChangesOptions.optionsStruct()(*(void *)(v0 + 88));
      swift_unknownObjectRelease();

LABEL_9:
      sub_18AF16D48();
      return v15();
    }
  }
  id v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1E9125F38 + dword_1E9125F38);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_18AF6C264;
  uint64_t v12 = *(void *)(v0 + 96);
  uint64_t v11 = *(void *)(v0 + 104);
  uint64_t v13 = *(void *)(v0 + 88);
  return v16(v13, v11, (uint64_t)&off_1ED7EE188, v0 + 16, v12);
}

uint64_t sub_18AF6C264()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v2 = *(void *)(v1 + 104);
  uint64_t v3 = *v0;
  sub_18AF16D18();
  void *v4 = v3;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_18AF6C348, v2, 0);
}

uint64_t sub_18AF6C348()
{
  sub_18AF339B8();
  uint64_t v1 = *(void **)(v0 + 128);

  swift_unknownObjectRelease();
  sub_18AF16D48();
  return v2();
}

uint64_t sub_18AF6C3B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 160) = a1;
  *(void *)(v5 + 168) = a5;
  long long v6 = *(_OWORD *)(a4 + 8);
  long long v7 = *(_OWORD *)(a4 + 24);
  *(_OWORD *)(v5 + 16) = v6;
  *(_OWORD *)(v5 + 32) = v7;
  long long v8 = *(_OWORD *)(a4 + 40);
  *(_OWORD *)(v5 + 48) = v8;
  long long v9 = *(_OWORD *)(a4 + 49);
  *(_OWORD *)(v5 + 57) = v9;
  *(_OWORD *)(v5 + 80) = v6;
  *(_OWORD *)(v5 + 96) = v7;
  *(_OWORD *)(v5 + 112) = v8;
  *(_OWORD *)(v5 + 121) = v9;
  sub_18AF20AC4(v5 + 16);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 176) = v10;
  *uint64_t v10 = v5;
  v10[1] = sub_18AF6C478;
  return CKSyncEngine.objcEngine.getter();
}

uint64_t sub_18AF6C478()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 184) = v3;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v4, v5, v6);
}

uint64_t sub_18AF6C548()
{
  uint64_t v39 = v0;
  if (!*(void *)(v0 + 184)) {
    goto LABEL_33;
  }
  CKSyncEngine.actor.getter();
  swift_retain();
  swift_release();
  unint64_t v4 = CKSyncEngine.State.zoneIDsWithUnfetchedServerChanges.getter();
  swift_release();
  unint64_t v5 = sub_18AF6DBA8(v4, (unint64_t *)(v0 + 80));
  *(void *)(v0 + 192) = v5;
  unint64_t v6 = MEMORY[0x1E4FBC860];
  *(void *)(v0 + 144) = MEMORY[0x1E4FBC860];
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  *(void *)(v0 + 200) = v7;
  if (v7)
  {
    uint64_t v8 = OBJC_IVAR___CKSyncEngine_delegateAdapter;
    uint64_t v9 = *(void *)(v0 + 112);
    *(void *)(v0 + 208) = OBJC_IVAR___CKSyncEngine_delegateAdapter;
    *(void *)(v0 + 216) = v9;
    uint64_t v10 = *(void *)(v0 + 192);
    if ((v10 & 0xC000000000000001) != 0)
    {
      id v11 = (id)MEMORY[0x18C1298C0](0);
      uint64_t v8 = *(void *)(v0 + 208);
    }
    else
    {
      id v11 = *(id *)(v10 + 32);
    }
    *(void *)(v0 + 224) = v11;
    *(void *)(v0 + 232) = 1;
    *(void *)(v0 + 240) = *(void *)(*(void *)(v0 + 184) + v8);
    swift_retain();
    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 248) = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_18AF6C9A8;
    uint64_t v18 = sub_18AF30E00();
    return sub_18AF6D040(v18, v19);
  }
  swift_bridgeObjectRelease();
  if (!(v6 >> 62))
  {
    uint64_t v12 = *(void **)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v12) {
      goto LABEL_9;
    }
LABEL_31:
    uint64_t v26 = *(void **)(v0 + 184);
    goto LABEL_32;
  }
  sub_18AF34294();
  uint64_t v12 = (void *)_CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_31;
  }
LABEL_9:
  unint64_t v13 = *(void *)(v0 + 80);
  if (!*(unsigned char *)(v0 + 88))
  {
    swift_bridgeObjectRetain();
    int v36 = (void *)sub_18AF48760(MEMORY[0x1E4FBC860]);
    uint64_t v21 = sub_18AF48760(v13);
    sub_18AFCE4EC(v21);
    sub_18AF19D54((uint64_t)v36);
    sub_18AF19FE4();
    swift_bridgeObjectRelease();
    sub_18AF2ACAC();
    id v22 = v36;
    sub_18AF16B08();
    swift_bridgeObjectRetain();
    sub_18AF35BFC(v1);
    sub_18AF1D714();
    if (!v23 || (sub_18AF3892C() & 1) != 0)
    {
      sub_18AF386C0();
      unint64_t v37 = v6;
      char v38 = 0;
      goto LABEL_21;
    }
LABEL_26:
    uint64_t v2 = *(void **)(v0 + 184);
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  if (*(unsigned char *)(v0 + 88) != 1)
  {
    sub_18AF2ACAC();
    id v24 = v12;
    sub_18AF16B08();
    swift_bridgeObjectRetain();
    sub_18AF35BFC(v1);
    sub_18AF1D714();
    if (!v25 || (sub_18AF3892C() & 1) != 0)
    {
      sub_18AF386C0();
      unint64_t v37 = v6;
      char v38 = 0;
      swift_bridgeObjectRetain();
      sub_18AF34114((uint64_t)&v37);
      sub_18AF30900();
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
    uint64_t v26 = *(void **)(v0 + 184);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
LABEL_32:
    swift_bridgeObjectRelease();

    goto LABEL_33;
  }
  unint64_t v14 = swift_bridgeObjectRetain();
  unsigned __int8 v35 = (void *)sub_18AF48760(v14);
  sub_18AF6FC4C();
  swift_bridgeObjectRelease();
  sub_18AF19D54((uint64_t)v35);
  sub_18AF19FE4();
  swift_bridgeObjectRelease();
  sub_18AF33E98();
  id v15 = v35;
  sub_18AF16B08();
  swift_bridgeObjectRetain();
  sub_18AF35BFC(v1);
  sub_18AF1D714();
  if (v16 && (sub_18AF3892C() & 1) == 0) {
    goto LABEL_26;
  }
  sub_18AF386C0();
  unint64_t v37 = v6;
  char v38 = v3;
LABEL_21:
  swift_bridgeObjectRetain();
  sub_18AF34114((uint64_t)&v37);
  sub_18AF30900();
  swift_release();
LABEL_25:
  sub_18AF473A8();
LABEL_27:
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_33:
  uint64_t v27 = *(void *)(v0 + 160);
  char v28 = *(unsigned char *)(v0 + 88);
  uint64_t v29 = *(void *)(v0 + 112);
  char v30 = *(unsigned char *)(v0 + 120);
  uint64_t v31 = *(void *)(v0 + 128);
  char v32 = *(unsigned char *)(v0 + 136);
  long long v33 = *(_OWORD *)(v0 + 96);
  *(void *)uint64_t v27 = *(void *)(v0 + 80);
  *(unsigned char *)(v27 + 8) = v28;
  *(_OWORD *)(v27 + 16) = v33;
  *(void *)(v27 + 32) = v29;
  *(unsigned char *)(v27 + 40) = v30;
  *(void *)(v27 + 48) = v31;
  *(unsigned char *)(v27 + 56) = v32;
  sub_18AF16D48();
  return v34();
}

uint64_t sub_18AF6C9A8()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  sub_18AF16D18();
  void *v4 = v3;
  *(unsigned char *)(v6 + 73) = v5;
  swift_task_dealloc();
  swift_release();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

void sub_18AF6CA94()
{
  uint64_t v61 = v0;
  if ((*(unsigned char *)(v0 + 73) & 1) == 0)
  {
    MEMORY[0x18C129220](*(id *)(v0 + 224));
    if (*(void *)((*(void *)(v0 + 144) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 144) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  id v4 = objc_msgSend(*(id *)(v0 + 184), sel_dataSource);
  char v5 = *(void **)(v0 + 224);
  if (!v4)
  {

    goto LABEL_9;
  }
  char AssetContents = CKSyncEngineDataSourceShouldFetchAssetContents(v4, *(void **)(v0 + 184), v5);
  uint64_t v7 = *(void **)(v0 + 224);
  if (AssetContents)
  {

    swift_unknownObjectRelease();
LABEL_9:
    uint64_t v8 = *(void **)(v0 + 216);
LABEL_22:
    uint64_t v29 = *(void *)(v0 + 232);
    if (v29 == *(void *)(v0 + 200))
    {
      swift_bridgeObjectRelease();
      unint64_t v30 = *(void *)(v0 + 144);
      if (v30 >> 62)
      {
        sub_18AF34294();
        uint64_t v31 = (void *)_CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v31) {
          goto LABEL_25;
        }
      }
      else
      {
        uint64_t v31 = *(void **)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v31)
        {
LABEL_25:
          unint64_t v32 = *(void *)(v0 + 80);
          if (!*(unsigned char *)(v0 + 88))
          {
            swift_bridgeObjectRetain();
            os_log_type_t v58 = (void *)sub_18AF48760(v30);
            uint64_t v42 = sub_18AF48760(v32);
            sub_18AFCE4EC(v42);
            sub_18AF19D54((uint64_t)v58);
            sub_18AF19FE4();
            swift_bridgeObjectRelease();
            sub_18AF2ACAC();
            id v43 = v58;
            sub_18AF16B08();
            swift_bridgeObjectRetain();
            sub_18AF35BFC(isUniquelyReferenced_nonNull_native);
            sub_18AF1D714();
            if (!v44 || (sub_18AF3892C() & 1) != 0)
            {
              sub_18AF386C0();
              unint64_t v59 = v30;
              char v60 = 0;
              goto LABEL_40;
            }
LABEL_45:
            uint64_t v2 = *(void **)(v0 + 184);
            swift_bridgeObjectRelease();
            goto LABEL_46;
          }
          if (*(unsigned char *)(v0 + 88) == 1)
          {
            unint64_t v33 = swift_bridgeObjectRetain();
            uint64_t v57 = (void *)sub_18AF48760(v33);
            sub_18AF6FC4C();
            swift_bridgeObjectRelease();
            sub_18AF19D54((uint64_t)v57);
            sub_18AF19FE4();
            swift_bridgeObjectRelease();
            sub_18AF33E98();
            id v34 = v57;
            sub_18AF16B08();
            swift_bridgeObjectRetain();
            sub_18AF35BFC(isUniquelyReferenced_nonNull_native);
            sub_18AF1D714();
            if (!v35 || (sub_18AF3892C() & 1) != 0)
            {
              sub_18AF386C0();
              unint64_t v59 = v30;
              char v60 = v3;
LABEL_40:
              swift_bridgeObjectRetain();
              sub_18AF34114((uint64_t)&v59);
              sub_18AF30900();
              swift_release();
LABEL_44:
              sub_18AF473A8();
LABEL_46:
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              goto LABEL_51;
            }
            goto LABEL_45;
          }
          sub_18AF2ACAC();
          id v45 = v31;
          sub_18AF16B08();
          swift_bridgeObjectRetain();
          sub_18AF35BFC(isUniquelyReferenced_nonNull_native);
          sub_18AF1D714();
          if (!v46 || (sub_18AF3892C() & 1) != 0)
          {
            sub_18AF386C0();
            unint64_t v59 = v30;
            char v60 = 0;
            swift_bridgeObjectRetain();
            sub_18AF34114((uint64_t)&v59);
            sub_18AF30900();
            swift_bridgeObjectRelease();
            goto LABEL_44;
          }
          unsigned int v47 = *(void **)(v0 + 184);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
LABEL_50:
          swift_bridgeObjectRelease();

LABEL_51:
          uint64_t v48 = *(void *)(v0 + 160);
          char v49 = *(unsigned char *)(v0 + 88);
          uint64_t v50 = *(void *)(v0 + 112);
          char v51 = *(unsigned char *)(v0 + 120);
          uint64_t v52 = *(void *)(v0 + 128);
          char v53 = *(unsigned char *)(v0 + 136);
          long long v54 = *(_OWORD *)(v0 + 96);
          *(void *)uint64_t v48 = *(void *)(v0 + 80);
          *(unsigned char *)(v48 + 8) = v49;
          *(_OWORD *)(v48 + 16) = v54;
          *(void *)(v48 + 32) = v50;
          *(unsigned char *)(v48 + 40) = v51;
          *(void *)(v48 + 48) = v52;
          *(unsigned char *)(v48 + 56) = v53;
          sub_18AF16D48();
          sub_18AF2ACD0();
          __asm { BRAA            X1, X16 }
        }
      }
      unsigned int v47 = *(void **)(v0 + 184);
      goto LABEL_50;
    }
    *(void *)(v0 + 216) = v8;
    uint64_t v36 = *(void *)(v0 + 192);
    if ((v36 & 0xC000000000000001) != 0) {
      id v37 = (id)MEMORY[0x18C1298C0](v29);
    }
    else {
      id v37 = *(id *)(v36 + 8 * v29 + 32);
    }
    *(void *)(v0 + 224) = v37;
    *(void *)(v0 + 232) = v29 + 1;
    if (!__OFADD__(v29, 1))
    {
      *(void *)(v0 + 240) = *(void *)(*(void *)(v0 + 184) + *(void *)(v0 + 208));
      swift_retain();
      char v38 = (void *)swift_task_alloc();
      *(void *)(v0 + 248) = v38;
      *char v38 = v0;
      v38[1] = sub_18AF6C9A8;
      sub_18AF30E00();
      sub_18AF2ACD0();
      sub_18AF6D040(v39, v40);
      return;
    }
    __break(1u);
    goto LABEL_55;
  }
  uint64_t v9 = *(void *)(v0 + 216);
  id v10 = v7;
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v0 + 152) = v9;
  *(void *)(v0 + 112) = 0x8000000000000000;
  sub_18AF7D0BC();
  uint64_t v13 = *(void *)(v9 + 16);
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  sub_18AF161EC(&qword_1E9125F40);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)((Swift::Bool)isUniquelyReferenced_nonNull_native, v15))
  {
    uint64_t v8 = *(void **)(v0 + 152);
LABEL_18:
    *(void *)(v0 + 112) = v8;
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
      uint64_t v21 = *(void *)(v0 + 224);
      v8[(v16 >> 6) + 8] |= 1 << v16;
      *(void *)(v8[6] + 8 * v16) = v21;
      uint64_t v22 = v8[7] + 16 * v16;
      *(unsigned char *)uint64_t v22 = 1;
      *(void *)(v22 + 8) = 0;
      uint64_t v23 = v8[2];
      BOOL v24 = __OFADD__(v23, 1);
      uint64_t v25 = v23 + 1;
      if (v24)
      {
LABEL_56:
        __break(1u);
        return;
      }
      uint64_t v26 = *(void **)(v0 + 224);
      id v8[2] = v25;
      id v27 = v26;
    }
    char v28 = *(void **)(v0 + 224);
    *(unsigned char *)(v8[7] + 16 * v16) = 0;
    swift_unknownObjectRelease();

    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
  uint64_t v8 = *(void **)(v0 + 152);
  sub_18AF7D0BC();
  if ((v17 & 1) == (v19 & 1))
  {
    unint64_t v16 = v18;
    goto LABEL_18;
  }
  sub_18AF2ACD0();
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_18AF6D040(uint64_t a1, uint64_t a2)
{
  uint64_t v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_18AF339EC((uint64_t)sub_18AF6D05C);
}

uint64_t sub_18AF6D05C()
{
  sub_18AF339B8();
  uint64_t v1 = MEMORY[0x18C12BC20](v0[4] + 112);
  v0[5] = v1;
  if (v1)
  {
    uint64_t v2 = CKSyncEngine.actor.getter();
    v0[6] = v2;
    return MEMORY[0x1F4188298](sub_18AF6D108, v2, 0);
  }
  else
  {
    sub_18AF149EC();
    return v3(1);
  }
}

uint64_t sub_18AF6D108()
{
  sub_18AF339B8();
  *(void *)(v0 + 56) = MEMORY[0x18C12BC20](*(void *)(v0 + 48) + 120);
  swift_release();
  sub_18AF309A4();
  return MEMORY[0x1F4188298](v1, v2, v3);
}

uint64_t sub_18AF6D17C()
{
  sub_18AF2A56C();
  uint64_t v1 = v0[7];
  if (v1)
  {
    uint64_t Changes = CKSyncEngineDelegateShouldFetchChanges(v0[5], v0[7], v0[2]);
  }
  else
  {
    uint64_t Changes = 1;
  }
  swift_unknownObjectRelease();
  sub_18AF149EC();
  return v3(Changes);
}

uint64_t sub_18AF6D210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  void v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return sub_18AF339EC((uint64_t)sub_18AF6D22C);
}

uint64_t sub_18AF6D22C()
{
  sub_18AF339B8();
  uint64_t v1 = MEMORY[0x18C12BC20](v0[6] + 112);
  v0[7] = v1;
  if (v1)
  {
    uint64_t v2 = CKSyncEngine.actor.getter();
    v0[8] = v2;
    return MEMORY[0x1F4188298](sub_18AF6D2D4, v2, 0);
  }
  else
  {
    sub_18AF149EC();
    return v3();
  }
}

uint64_t sub_18AF6D2D4()
{
  sub_18AF339B8();
  *(void *)(v0 + 72) = MEMORY[0x18C12BC20](*(void *)(v0 + 64) + 120);
  swift_release();
  sub_18AF309A4();
  return MEMORY[0x1F4188298](v1, v2, v3);
}

uint64_t sub_18AF6D348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_18AF31148();
  sub_18AF338B4();
  if (!*(void *)(v10 + 72)) {
    goto LABEL_9;
  }
  *(void *)(v10 + 16) = &unk_1ED859958;
  unint64_t v11 = (void *)swift_dynamicCastObjCProtocolConditional();
  if (!v11)
  {

LABEL_9:
    swift_unknownObjectRelease();
    goto LABEL_12;
  }
  char v12 = v11;
  unsigned __int8 v13 = objc_msgSend(v11, sel_respondsToSelector_, sel_syncEngine_relatedApplicationBundleIdentifiersForZoneIDs_recordIDs_);
  BOOL v14 = *(void **)(v10 + 72);
  if (v13)
  {
    sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
    swift_unknownObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    sub_18AF34EA0(0, &qword_1E91255F0);
    Class v16 = Array._bridgeToObjectiveC()().super.isa;
    id v17 = objc_msgSend(v12, sel_syncEngine_relatedApplicationBundleIdentifiersForZoneIDs_recordIDs_, v14, isa, v16);

    unint64_t v18 = *(void **)(v10 + 72);
    if (v17)
    {
      static Array._unconditionallyBridgeFromObjectiveC(_:)();
    }
    swift_unknownObjectRelease_n();
  }
  else
  {
    swift_unknownObjectRelease();
  }
LABEL_12:
  sub_18AF311B0();
  return v21(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10);
}

uint64_t sub_18AF6D4FC()
{
  sub_18AF71C2C(v0 + 112);

  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_18AF6D52C()
{
  sub_18AF6D4FC();

  return MEMORY[0x1F4188210](v0);
}

uint64_t sub_18AF6D558()
{
  return v0;
}

uint64_t sub_18AF6D564()
{
  return sub_18AF6D558();
}

uint64_t sub_18AF6D580()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_18AF14648;
  return sub_18AF6BEE4();
}

uint64_t sub_18AF6D630(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_18AF6D6D4;
  return sub_18AF6D040(a1, a2);
}

uint64_t sub_18AF6D6D4()
{
  sub_18AF339B8();
  uint64_t v2 = v1;
  sub_18AF184F0();
  uint64_t v3 = *v0;
  sub_18AF16D18();
  void *v4 = v3;
  swift_task_dealloc();
  sub_18AF149EC();
  return v5(v2);
}

uint64_t sub_18AF6D7A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_18AF6D84C;
  return sub_18AF6D210(a1, a2, a3);
}

uint64_t sub_18AF6D84C()
{
  sub_18AF339B8();
  uint64_t v2 = v1;
  sub_18AF184F0();
  uint64_t v3 = *v0;
  sub_18AF16D18();
  void *v4 = v3;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(v2);
}

id sub_18AF6D91C(void *a1)
{
  id v3 = objc_msgSend(v1, sel_initWithConfiguration_, a1);

  return v3;
}

void sub_18AF6D99C()
{
  sub_18AF33850();
  id v2 = objc_msgSend(v0, sel_state);
  id v3 = objc_msgSend(v2, sel_pendingRecordZoneChanges);

  sub_18AF34EA0(0, (unint64_t *)&unk_1E9125200);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v13 = MEMORY[0x1E4FBC860];
  if (!(v4 >> 62))
  {
    sub_18AF71F48();
    if (v1) {
      goto LABEL_3;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    uint64_t v8 = MEMORY[0x1E4FBC860];
    if ((MEMORY[0x1E4FBC860] & 0x8000000000000000) != 0) {
      goto LABEL_25;
    }
    goto LABEL_16;
  }
  sub_18AF34294();
  _CocoaArrayWrapper.endIndex.getter();
  sub_18AF22CF0();
  if (!v1) {
    goto LABEL_15;
  }
LABEL_3:
  if (v1 < 1)
  {
    __break(1u);
    goto LABEL_28;
  }
  for (uint64_t i = 0; i != v1; ++i)
  {
    if ((v4 & 0xC000000000000001) != 0) {
      sub_18AF47454();
    }
    else {
      id v6 = sub_18AF71F30();
    }
    uint64_t v7 = v6;
    if (objc_msgSend(v6, sel_type))
    {
    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_18AF3844C();
      sub_18AF35600();
      specialized ContiguousArray._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = v13;
  if (v13 < 0) {
    goto LABEL_25;
  }
LABEL_16:
  if ((v8 & 0x4000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(v8 + 16);
    if (!v9)
    {
LABEL_26:
      swift_release();
      sub_18AF16CC4();
      return;
    }
    goto LABEL_18;
  }
LABEL_25:
  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (!v9) {
    goto LABEL_26;
  }
LABEL_18:
  specialized ContiguousArray.reserveCapacity(_:)();
  if ((v9 & 0x8000000000000000) == 0)
  {
    uint64_t v10 = 0;
    do
    {
      if ((v8 & 0xC000000000000001) != 0) {
        sub_18AF47454();
      }
      else {
        id v11 = sub_18AF71F30();
      }
      char v12 = v11;
      ++v10;
      objc_msgSend(v11, sel_recordID);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_18AF3844C();
      sub_18AF35600();
      specialized ContiguousArray._endMutation()();
    }
    while (v9 != v10);
    goto LABEL_26;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_18AF6DBA8(unint64_t a1, unint64_t *a2)
{
  uint64_t v2 = a1;
  uint64_t v32 = MEMORY[0x1E4FBC860];
  if (a1 >> 62) {
    goto LABEL_54;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      uint64_t v26 = v2;
      unint64_t v4 = 0;
      uint64_t v29 = v2 & 0xFFFFFFFFFFFFFF8;
      unint64_t v30 = v2 & 0xC000000000000001;
      uint64_t v27 = v3;
      uint64_t v28 = v2 + 32;
      while (1)
      {
        if (v30)
        {
          id v5 = (id)MEMORY[0x18C1298C0](v4, v26);
        }
        else
        {
          if (v4 >= *(void *)(v29 + 16))
          {
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
            goto LABEL_53;
          }
          id v5 = *(id *)(v28 + 8 * v4);
        }
        id v6 = v5;
        if (__OFADD__(v4++, 1)) {
          goto LABEL_51;
        }
        unint64_t v8 = *a2;
        unint64_t v9 = *a2 >> 62;
        if (!*((unsigned char *)a2 + 8)) {
          break;
        }
        if (*((unsigned char *)a2 + 8) != 1) {
          goto LABEL_40;
        }
        if (v9)
        {
          sub_18AF71FCC();
          uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
          if (!v10)
          {
LABEL_45:

            sub_18AF307A4();
            goto LABEL_41;
          }
        }
        else
        {
          uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n();
          if (!v10) {
            goto LABEL_45;
          }
        }
        if ((v8 & 0xC000000000000001) != 0) {
          id v11 = (id)MEMORY[0x18C1298C0](0, v8);
        }
        else {
          id v11 = *(id *)(v8 + 32);
        }
        char v12 = v11;
        sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
        uint64_t v2 = static NSObject.== infix(_:_:)();

        if (v2) {
          goto LABEL_39;
        }
        if (v10 != 1)
        {
          uint64_t v13 = 5;
          do
          {
            id v14 = (v8 & 0xC000000000000001) != 0
                ? (id)MEMORY[0x18C1298C0](v13 - 4, v8)
                : *(id *)(v8 + 8 * v13);
            uint64_t v2 = (uint64_t)v14;
            uint64_t v15 = v13 - 3;
            if (__OFADD__(v13 - 4, 1)) {
              goto LABEL_52;
            }
            char v16 = static NSObject.== infix(_:_:)();

            if (v16) {
              goto LABEL_39;
            }
            ++v13;
          }
          while (v15 != v10);
        }

        sub_18AF307A4();
LABEL_30:
        uint64_t v3 = v27;
LABEL_41:
        if (v4 == v3)
        {
          uint64_t v24 = v32;
          goto LABEL_56;
        }
      }
      if (v9)
      {
        sub_18AF71FCC();
        uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
        if (!v17) {
          goto LABEL_39;
        }
      }
      else
      {
        uint64_t v17 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        if (!v17) {
          goto LABEL_39;
        }
      }
      id v18 = (v8 & 0xC000000000000001) != 0 ? (id)MEMORY[0x18C1298C0](0, v8) : *(id *)(v8 + 32);
      uint64_t v19 = v18;
      sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
      uint64_t v2 = static NSObject.== infix(_:_:)();

      if (v2) {
        break;
      }
      if (v17 == 1)
      {
LABEL_39:
        sub_18AF307A4();
        uint64_t v3 = v27;
LABEL_40:
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        goto LABEL_41;
      }
      uint64_t v20 = 5;
      while (1)
      {
        id v21 = (v8 & 0xC000000000000001) != 0
            ? (id)MEMORY[0x18C1298C0](v20 - 4, v8)
            : *(id *)(v8 + 8 * v20);
        uint64_t v2 = (uint64_t)v21;
        uint64_t v22 = v20 - 3;
        if (__OFADD__(v20 - 4, 1)) {
          break;
        }
        char v23 = static NSObject.== infix(_:_:)();

        if (v23) {
          goto LABEL_29;
        }
        ++v20;
        if (v22 == v17) {
          goto LABEL_39;
        }
      }
LABEL_53:
      __break(1u);
LABEL_54:
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
      if (!v3) {
        goto LABEL_55;
      }
    }
LABEL_29:
    sub_18AF307A4();

    goto LABEL_30;
  }
LABEL_55:
  uint64_t v24 = MEMORY[0x1E4FBC860];
LABEL_56:
  swift_bridgeObjectRelease();
  return v24;
}

Class sub_18AF6DF3C(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4 = a1;
  a3();

  sub_18AF34EA0(0, &qword_1E91255F0);
  v5.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v5.super.isa;
}

void sub_18AF6DFB8()
{
  sub_18AF33850();
  id v2 = objc_msgSend(v0, sel_state);
  id v3 = objc_msgSend(v2, sel_pendingRecordZoneChanges);

  sub_18AF34EA0(0, (unint64_t *)&unk_1E9125200);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v13 = MEMORY[0x1E4FBC860];
  if (!(v4 >> 62))
  {
    sub_18AF71F48();
    if (v1) {
      goto LABEL_3;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    uint64_t v8 = MEMORY[0x1E4FBC860];
    if ((MEMORY[0x1E4FBC860] & 0x8000000000000000) != 0) {
      goto LABEL_25;
    }
    goto LABEL_16;
  }
  sub_18AF34294();
  _CocoaArrayWrapper.endIndex.getter();
  sub_18AF22CF0();
  if (!v1) {
    goto LABEL_15;
  }
LABEL_3:
  if (v1 < 1)
  {
    __break(1u);
    goto LABEL_28;
  }
  for (uint64_t i = 0; i != v1; ++i)
  {
    if ((v4 & 0xC000000000000001) != 0) {
      sub_18AF47454();
    }
    else {
      id v6 = sub_18AF71F30();
    }
    uint64_t v7 = v6;
    if (objc_msgSend(v6, sel_type) == (id)1)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_18AF3844C();
      sub_18AF35600();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = v13;
  if (v13 < 0) {
    goto LABEL_25;
  }
LABEL_16:
  if ((v8 & 0x4000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(v8 + 16);
    if (!v9)
    {
LABEL_26:
      swift_release();
      sub_18AF16CC4();
      return;
    }
    goto LABEL_18;
  }
LABEL_25:
  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (!v9) {
    goto LABEL_26;
  }
LABEL_18:
  specialized ContiguousArray.reserveCapacity(_:)();
  if ((v9 & 0x8000000000000000) == 0)
  {
    uint64_t v10 = 0;
    do
    {
      if ((v8 & 0xC000000000000001) != 0) {
        sub_18AF47454();
      }
      else {
        id v11 = sub_18AF71F30();
      }
      char v12 = v11;
      ++v10;
      objc_msgSend(v11, sel_recordID);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_18AF3844C();
      sub_18AF35600();
      specialized ContiguousArray._endMutation()();
    }
    while (v9 != v10);
    goto LABEL_26;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_18AF6E1FC()
{
  id v1 = objc_msgSend(v0, sel_state);
  id v2 = objc_msgSend(v1, sel_pendingDatabaseChanges);

  sub_18AF34EA0(0, &qword_1E9125230);
  unint64_t v3 = sub_18AF312A4();

  if (v3 >> 62)
  {
    sub_18AF30784();
    _CocoaArrayWrapper.endIndex.getter();
    sub_18AF22CF0();
  }
  else
  {
    sub_18AF71F48();
  }
  swift_bridgeObjectRelease();
  if (v2) {
    return 1;
  }
  id v4 = objc_msgSend(v0, sel_state);
  id v5 = objc_msgSend(v4, sel_pendingRecordZoneChanges);

  sub_18AF34EA0(0, (unint64_t *)&unk_1E9125200);
  unint64_t v6 = sub_18AF312A4();

  if (v6 >> 62)
  {
    sub_18AF30784();
    _CocoaArrayWrapper.endIndex.getter();
    sub_18AF22CF0();
  }
  else
  {
    sub_18AF71F48();
  }
  swift_bridgeObjectRelease();
  if (v5) {
    return 1;
  }
  id v8 = objc_msgSend(v0, sel_state);
  unsigned int v9 = objc_msgSend(v8, sel_hasPendingUntrackedChanges);

  return v9 ^ 1;
}

uint64_t sub_18AF6E364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_18AF161EC(&qword_1E9125478);
  uint64_t v8 = sub_18AF19284(v7);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TaskPriority();
  sub_18AF1826C((uint64_t)v10, v12, v13, v11);
  id v14 = (void *)swift_allocObject();
  long long v14[2] = 0;
  void v14[3] = 0;
  void v14[4] = a1;
  v14[5] = v3;
  v14[6] = a2;
  v14[7] = a3;
  swift_bridgeObjectRetain();
  id v15 = v3;
  sub_18AF42F30(a2);
  sub_18AF42DB4((uint64_t)v10, (uint64_t)&unk_1E9125FF0, (uint64_t)v14);
  return swift_release();
}

uint64_t sub_18AF6E458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  uint64_t v8 = sub_18AF161EC(&qword_1E91251B8);
  v7[22] = v8;
  v7[23] = *(void *)(v8 - 8);
  v7[24] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18AF6E520, 0, 0);
}

uint64_t sub_18AF6E520()
{
  if (v0[18])
  {
    unint64_t v1 = swift_bridgeObjectRetain();
    uint64_t v2 = sub_18AF48760(v1);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = v0[22];
  id v4 = (void *)v0[19];
  id v5 = objc_allocWithZone((Class)CKSyncEngineFetchChangesScope);
  id v6 = sub_18AF47CA8(v2);
  id v7 = objc_msgSend(objc_allocWithZone((Class)CKSyncEngineFetchChangesOptions), sel_initWithScope_, v6);
  v0[25] = v7;

  v0[2] = v0;
  v0[3] = sub_18AF6E6E4;
  swift_continuation_init();
  v0[17] = v3;
  sub_18AF3A5E0(v0 + 14);
  sub_18AF161EC(&qword_1E9125660);
  sub_18AF47418();
  sub_18AF22648();
  uint64_t v8 = sub_18AF33710();
  v9(v8);
  v0[10] = MEMORY[0x1E4F143A8];
  v0[11] = 1107296256;
  v0[12] = sub_18AF4795C;
  v0[13] = &unk_1ED7F2328;
  objc_msgSend(v4, sel_fetchChangesWithOptions_completionHandler_, v7, v0 + 10);
  return MEMORY[0x1F41881E8](v0 + 2);
}

uint64_t sub_18AF6E6E4()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 208) = *(void *)(v3 + 48);
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v4, v5, v6);
}

uint64_t sub_18AF6E7C4()
{
  sub_18AF339B8();
  uint64_t v1 = *(void *)(v0 + 160);

  if (v1)
  {
    uint64_t v2 = sub_18AF3868C();
    v3(v2);
  }
  swift_task_dealloc();
  sub_18AF16D48();
  return v4();
}

uint64_t sub_18AF6E838()
{
  sub_18AF19FAC();
  uint64_t v1 = (void *)v0[25];
  uint64_t v2 = v0[20];
  swift_willThrow();

  uint64_t v3 = (void *)v0[26];
  if (v2)
  {
    uint64_t v4 = (void (*)(uint64_t))v0[20];
    id v5 = v3;
    uint64_t v6 = sub_18AF1FFDC();
    v4(v6);
  }
  swift_task_dealloc();
  sub_18AF16D48();
  return v7();
}

void sub_18AF6E9C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_18AF22D38();
  a17 = v19;
  a18 = v20;
  id v21 = v18;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v26 = sub_18AF161EC(&qword_1E9125478);
  uint64_t v27 = sub_18AF19284(v26);
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = (char *)&a9 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v25)
  {
    uint64_t v30 = sub_18AF19EAC();
    *(void *)(v30 + 16) = v25;
    *(void *)(v30 + 24) = v23;
    uint64_t v31 = sub_18AF71EEC;
  }
  else
  {
    uint64_t v31 = 0;
    uint64_t v30 = 0;
  }
  sub_18AF161EC(&qword_1E9124E00);
  sub_18AF19EAC();
  sub_18AF42F30(v25);
  uint64_t v32 = sub_18AF48F34((uint64_t)v31, v30);
  uint64_t v33 = type metadata accessor for TaskPriority();
  sub_18AF1826C((uint64_t)v29, v34, v35, v33);
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = 0;
  v36[3] = 0;
  v36[4] = v21;
  v36[5] = v32;
  id v37 = v21;
  sub_18AF42DB4((uint64_t)v29, (uint64_t)&unk_1E9125FE0, (uint64_t)v36);
  swift_release();
  sub_18AF3387C();
}

uint64_t sub_18AF6EB0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[18] = a4;
  v5[19] = a5;
  uint64_t v6 = sub_18AF161EC(&qword_1E91251B8);
  v5[20] = v6;
  v5[21] = *(void *)(v6 - 8);
  v5[22] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18AF6EBD0, 0, 0);
}

uint64_t sub_18AF6EBD0()
{
  sub_18AF338B4();
  uint64_t v2 = v0[21];
  uint64_t v1 = v0[22];
  uint64_t v3 = v0[20];
  uint64_t v4 = (void *)v0[18];
  v0[2] = v0;
  v0[3] = sub_18AF6ED48;
  swift_continuation_init();
  v0[17] = v3;
  id v5 = sub_18AF3A5E0(v0 + 14);
  sub_18AF161EC(&qword_1E9125660);
  sub_18AF47418();
  CheckedContinuation.init(continuation:function:)();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 32))(v5, v1, v3);
  v0[10] = MEMORY[0x1E4F143A8];
  v0[11] = 1107296256;
  v0[12] = sub_18AF6EF4C;
  v0[13] = &unk_1ED7F22B0;
  objc_msgSend(v4, sel_sendChangesWithCompletionHandler_, v0 + 10);
  return MEMORY[0x1F41881E8](v0 + 2);
}

uint64_t sub_18AF6ED48()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 184) = *(void *)(v3 + 48);
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v4, v5, v6);
}

uint64_t sub_18AF6EE28()
{
  sub_18AF2A56C();
  uint64_t v0 = sub_18AF49000();
  if (v0)
  {
    uint64_t v8 = (void (*)(char *))v0;
    uint64_t v9 = sub_18AF2313C(v0, v1, v2, v3, v4, v5, v6, v7, v12, 0);
    v8(v9);
    sub_18AF1E758((uint64_t)v8);
  }
  swift_task_dealloc();
  sub_18AF16D48();
  return v10();
}

uint64_t sub_18AF6EEB4()
{
  sub_18AF19FAC();
  uint64_t v1 = *(void (**)(char *))(v0 + 184);
  swift_willThrow();
  uint64_t v2 = sub_18AF49000();
  uint64_t v10 = *(void **)(v0 + 184);
  if (v2)
  {
    id v11 = sub_18AF412D8(v2, v3, v4, v5, v6, v7, v8, v9, v22, v24);
    uint64_t v19 = sub_18AF2313C((uint64_t)v11, v12, v13, v14, v15, v16, v17, v18, v23, v25);
    v1(v19);

    sub_18AF472EC();
  }

  swift_task_dealloc();
  sub_18AF16D48();
  return v20();
}

void sub_18AF6EF4C(uint64_t a1, void *a2)
{
  int v3 = sub_18AF25FCC((void *)(a1 + 32), *(void *)(a1 + 56));
  if (a2)
  {
    id v4 = a2;
    sub_18AFCA0F4((uint64_t)v3, (uint64_t)v4);
  }
  else
  {
    sub_18AFCA1D4();
  }
}

#error "18AF6F05C: call analysis failed (funcsize=44)"

uint64_t sub_18AF6F094()
{
  sub_18AF2A56C();

  uint64_t v1 = sub_18AF49000();
  if (v1)
  {
    int v9 = (void (*)(char *))v1;
    uint64_t v10 = sub_18AF2313C(v1, v2, v3, v4, v5, v6, v7, v8, v13, 0);
    v9(v10);
    sub_18AF1E758((uint64_t)v9);
  }
  swift_task_dealloc();
  sub_18AF16D48();
  return v11();
}

#error "18AF6F218: call analysis failed (funcsize=197)"

#error "18AF6F4CC: call analysis failed (funcsize=37)"

void sub_18AF6F514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_18AF33850();
  uint64_t v14 = v13;
  char v16 = v15;
  unint64_t v18 = v17;
  id v19 = objc_msgSend(v10, sel_state);
  unint64_t v20 = v18 >> 62;
  if ((v16 & 1) == 0)
  {
    if (v20)
    {
      sub_18AF338C0();
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v25 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (!v25)
    {
      uint64_t v24 = &selRef_removePendingRecordZoneChanges_;
      goto LABEL_25;
    }
    specialized ContiguousArray.reserveCapacity(_:)();
    if ((v25 & 0x8000000000000000) == 0)
    {
      sub_18AF37D9C();
      do
      {
        if (v11) {
          id v26 = (id)MEMORY[0x18C1298C0](v19, v18);
        }
        else {
          id v26 = *(id *)(v18 + 8 * (void)v19 + 32);
        }
        uint64_t v27 = v26;
        id v19 = (char *)v19 + 1;
        objc_msgSend(objc_allocWithZone(*(Class *)(v12 + 176)), (SEL)(v9 + 2795), v26, v14);

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        sub_18AF71F54();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      while ((id)v25 != v19);
      uint64_t v24 = &selRef_removePendingRecordZoneChanges_;
      goto LABEL_22;
    }
LABEL_31:
    __break(1u);
    return;
  }
  if (v20)
  {
    sub_18AF338C0();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v21 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v21)
  {
    uint64_t v24 = &selRef_addPendingRecordZoneChanges_;
    goto LABEL_25;
  }
  specialized ContiguousArray.reserveCapacity(_:)();
  if (v21 < 0)
  {
    __break(1u);
    goto LABEL_31;
  }
  sub_18AF37D9C();
  do
  {
    if (v11) {
      id v22 = (id)MEMORY[0x18C1298C0](v19, v18);
    }
    else {
      id v22 = *(id *)(v18 + 8 * (void)v19 + 32);
    }
    uint64_t v23 = v22;
    id v19 = (char *)v19 + 1;
    objc_msgSend(objc_allocWithZone(*(Class *)(v12 + 176)), (SEL)(v9 + 2795), v22, v14);

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    sub_18AF71F54();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }
  while ((id)v21 != v19);
  uint64_t v24 = &selRef_addPendingRecordZoneChanges_;
LABEL_22:
  id v19 = a9;
LABEL_25:
  sub_18AF34EA0(0, (unint64_t *)&unk_1E9125200);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v19, *v24, isa);

  sub_18AF16CC4();
}

uint64_t sub_18AF6F790(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_18AF34EA0(0, &qword_1E91255F0);
  uint64_t v8 = sub_18AF312A4();
  id v9 = a1;
  sub_18AF6F514(v8, a4, a5, v10, v11, v12, v13, v14, v16);

  return swift_bridgeObjectRelease();
}

void sub_18AF6F83C()
{
  sub_18AF33850();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  char v6 = v5;
  unint64_t v8 = v7;
  id v9 = objc_msgSend(v0, sel_state);
  unint64_t v10 = v8 >> 62;
  if ((v6 & 1) == 0)
  {
    if (v10)
    {
      sub_18AF31228();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v16)
    {
      specialized ContiguousArray.reserveCapacity(_:)();
      if (v16 < 0) {
        goto LABEL_28;
      }
      uint64_t v17 = 0;
      do
      {
        if ((v8 & 0xC000000000000001) != 0) {
          id v18 = (id)MEMORY[0x18C1298C0](v17, v8);
        }
        else {
          id v18 = *(id *)(v8 + 8 * v17 + 32);
        }
        id v19 = v18;
        ++v17;
        objc_msgSend(objc_allocWithZone(*v4), *v2, v18);

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        sub_18AF71F74();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      while (v16 != v17);
    }
    char v15 = &selRef_removePendingDatabaseChanges_;
    goto LABEL_22;
  }
  if (v10)
  {
    sub_18AF31228();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v11)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    if ((v11 & 0x8000000000000000) == 0)
    {
      uint64_t v12 = 0;
      do
      {
        if ((v8 & 0xC000000000000001) != 0) {
          id v13 = (id)MEMORY[0x18C1298C0](v12, v8);
        }
        else {
          id v13 = *(id *)(v8 + 8 * v12 + 32);
        }
        uint64_t v14 = v13;
        ++v12;
        objc_msgSend(objc_allocWithZone(*v4), *v2, v13);

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        sub_18AF71F74();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      while (v11 != v12);
      goto LABEL_11;
    }
    __break(1u);
LABEL_28:
    __break(1u);
    return;
  }
LABEL_11:
  char v15 = &selRef_addPendingDatabaseChanges_;
LABEL_22:
  sub_18AF34EA0(0, &qword_1E9125230);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v9, *v15, isa);

  sub_18AF16CC4();
}

uint64_t sub_18AF6FABC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  sub_18AF34EA0(0, a5);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v6 = a1;
  sub_18AF6F83C();

  return swift_bridgeObjectRelease();
}

void sub_18AF6FB54()
{
  id v1 = objc_msgSend(v0, sel_state);
  objc_msgSend(v1, sel_setHasPendingUntrackedChanges_, 1);
}

uint64_t type metadata accessor for CKSyncEngine(uint64_t a1)
{
  return sub_18AF34EA0(a1, &qword_1E9125EF8);
}

uint64_t type metadata accessor for CKSyncEngineObjCDelegateAdapter()
{
  return self;
}

uint64_t sub_18AF6FC30(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

void sub_18AF6FC4C()
{
  sub_18AF22D38();
  unint64_t v3 = v2;
  if ((*(void *)v0 & 0xC000000000000001) != 0)
  {
    if (__CocoaSet.count.getter()) {
      goto LABEL_3;
    }
LABEL_15:
    sub_18AF3387C();
    return;
  }
  if (!*(void *)(*(void *)v0 + 16)) {
    goto LABEL_15;
  }
LABEL_3:
  if (v3 >> 62)
  {
    sub_18AF30784();
    uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
    if (!v1) {
      goto LABEL_11;
    }
  }
  else
  {
    sub_18AF71F48();
    swift_bridgeObjectRetain();
    if (!v1) {
      goto LABEL_11;
    }
  }
  if (v1 < 1)
  {
    __break(1u);
    return;
  }
  uint64_t v4 = 0;
  do
  {
    if ((v3 & 0xC000000000000001) != 0) {
      sub_18AF47454();
    }
    else {
      id v5 = sub_18AF71F30();
    }
    id v6 = v5;
    ++v4;
    sub_18AF6FED8();
    unint64_t v8 = v7;
  }
  while (v1 != v4);
LABEL_11:
  sub_18AF3387C();
  swift_bridgeObjectRelease();
}

void sub_18AF6FD40()
{
  sub_18AF22D38();
  if (!*(void *)(*(void *)v0 + 16))
  {
    sub_18AF3387C();
    return;
  }
  uint64_t v2 = v1;
  uint64_t v3 = v1 + 56;
  uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v1 + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v8 = 0;
  if (!v6) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = v15 + (v8 << 6))
  {
    uint64_t v16 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    swift_bridgeObjectRetain();
    sub_18AF70084(v17, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return;
    }
    if (v11 >= v7) {
      goto LABEL_24;
    }
    ++v8;
    if (!*(void *)(v3 + 8 * v11))
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        goto LABEL_24;
      }
      if (!*(void *)(v3 + 8 * v8))
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v7) {
          goto LABEL_24;
        }
        if (!*(void *)(v3 + 8 * v8))
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v7) {
            goto LABEL_24;
          }
          if (!*(void *)(v3 + 8 * v8)) {
            break;
          }
        }
      }
    }
LABEL_21:
    sub_18AF43730();
    unint64_t v6 = v14 & v13;
  }
  int64_t v12 = v11 + 4;
  if (v12 < v7)
  {
    if (!*(void *)(v3 + 8 * v12))
    {
      while (1)
      {
        int64_t v8 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        ++v12;
        if (*(void *)(v3 + 8 * v8)) {
          goto LABEL_21;
        }
      }
    }
    int64_t v8 = v12;
    goto LABEL_21;
  }
LABEL_24:
  sub_18AF3387C();
  swift_release();
}

void sub_18AF6FED8()
{
  sub_18AF33850();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = *v0;
  if ((*v0 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    id v5 = v3;
    char v6 = __CocoaSet.contains(_:)();

    if (v6) {
      sub_18AF70214();
    }
  }
  else
  {
    Swift::Int v7 = *(void *)(v4 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v8 = NSObject._rawHashValue(seed:)(v7);
    uint64_t v9 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v10 = v8 & ~v9;
    sub_18AF4341C();
    if (v11)
    {
      sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
      id v12 = *(id *)(*(void *)(v4 + 48) + 8 * v10);
      char v13 = static NSObject.== infix(_:_:)();

      if (v13)
      {
LABEL_9:
        swift_bridgeObjectRelease();
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v19 = *v1;
        *uint64_t v1 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native) {
          sub_18AF704EC();
        }
        sub_18AF71330(v10);
        *uint64_t v1 = v19;
      }
      else
      {
        uint64_t v14 = ~v9;
        while (1)
        {
          unint64_t v10 = (v10 + 1) & v14;
          sub_18AF4341C();
          if ((v15 & 1) == 0) {
            break;
          }
          id v16 = *(id *)(*(void *)(v4 + 48) + 8 * v10);
          char v17 = static NSObject.== infix(_:_:)();

          if (v17) {
            goto LABEL_9;
          }
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  sub_18AF16CC4();
}

uint64_t sub_18AF70084(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  unint64_t v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      id v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_18AF706E8();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  sub_18AF714C8(v8);
  *uint64_t v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_18AF70214()
{
  uint64_t v1 = v0;
  swift_bridgeObjectRelease();
  uint64_t v2 = __CocoaSet.count.getter();
  uint64_t v3 = swift_unknownObjectRetain();
  sub_18AF716BC(v3, v2, (uint64_t)&unk_1E91250D0, (uint64_t)&qword_1EB279460, (uint64_t)off_1E545EEE0, v4, v5, v6, v20, v21, v23);
  uint64_t v8 = v7;
  uint64_t v22 = v7;
  Swift::Int v9 = *(void *)(v7 + 40);
  swift_retain();
  Swift::Int v10 = NSObject._rawHashValue(seed:)(v9);
  uint64_t v11 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v12 = v10 & ~v11;
  if ((*(void *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
    id v13 = *(id *)(*(void *)(v8 + 48) + 8 * v12);
    char v14 = static NSObject.== infix(_:_:)();

    if (v14)
    {
LABEL_6:
      swift_release();
      uint64_t v18 = *(void *)(*(void *)(v8 + 48) + 8 * v12);
      sub_18AF71330(v12);
      if (static NSObject.== infix(_:_:)())
      {
        *uint64_t v1 = v22;
        return v18;
      }
      __break(1u);
    }
    else
    {
      uint64_t v15 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v15;
        if (((*(void *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
          break;
        }
        id v16 = *(id *)(*(void *)(v8 + 48) + 8 * v12);
        char v17 = static NSObject.== infix(_:_:)();

        if (v17) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

void sub_18AF703C8()
{
  sub_18AF161EC(&qword_1E9126060);
  sub_18AF41170();
  sub_18AF379CC();
  if (v2)
  {
    uint64_t v3 = (void *)sub_18AF185C8();
    if (v6) {
      BOOL v7 = (unint64_t)v3 >= v5;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7) {
      sub_18AF31BC8(v3, v4);
    }
    sub_18AF192A0();
    if (!v10) {
      goto LABEL_10;
    }
LABEL_9:
    sub_18AF36AAC();
    while (1)
    {
      sub_18AF403CC();
      if (v14) {
        goto LABEL_9;
      }
LABEL_10:
      uint64_t v11 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
        goto LABEL_27;
      }
      if (v11 >= v8) {
        goto LABEL_25;
      }
      if (!*(void *)(v1 + 8 * v11))
      {
        if (v9 + 2 >= v8) {
          goto LABEL_25;
        }
        if (!*(void *)(v1 + 8 * (v9 + 2)))
        {
          if (v9 + 3 >= v8) {
            goto LABEL_25;
          }
          if (!*(void *)(v1 + 8 * (v9 + 3)))
          {
            uint64_t v12 = v9 + 4;
            if (v9 + 4 >= v8) {
              goto LABEL_25;
            }
            if (!*(void *)(v1 + 8 * v12)) {
              break;
            }
          }
        }
      }
LABEL_22:
      sub_18AF31210();
    }
    while (1)
    {
      uint64_t v13 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        break;
      }
      if (v13 >= v8) {
        goto LABEL_25;
      }
      ++v12;
      if (*(void *)(v1 + 8 * v13)) {
        goto LABEL_22;
      }
    }
LABEL_27:
    __break(1u);
  }
  else
  {
LABEL_25:
    swift_release();
    void *v0 = v0;
  }
}

void sub_18AF704C8()
{
}

void sub_18AF704D4()
{
}

void sub_18AF704E0()
{
}

void sub_18AF704EC()
{
  sub_18AF22D38();
  sub_18AF161EC(v6);
  sub_18AF41170();
  sub_18AF379CC();
  if (!v7)
  {
LABEL_29:
    swift_release();
    void *v0 = v0;
    sub_18AF3387C();
    return;
  }
  uint64_t v8 = (void *)sub_18AF185C8();
  if (v11) {
    BOOL v12 = (unint64_t)v8 >= v10;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12) {
    sub_18AF31BC8(v8, v9);
  }
  sub_18AF39058();
  if (!v5) {
    goto LABEL_10;
  }
LABEL_9:
  sub_18AF30624();
  while (1)
  {
    uint64_t v19 = *(void **)(*(void *)(v1 + 48) + 8 * v13);
    *(void *)(v0[6] + 8 * v13) = v19;
    id v20 = v19;
    if (v5) {
      goto LABEL_9;
    }
LABEL_10:
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v4 + 1 >= v3) {
      goto LABEL_29;
    }
    sub_18AF71FC0();
    if (!v14)
    {
      sub_18AF71FB4();
      if (v15 == v16) {
        goto LABEL_29;
      }
      if (!*(void *)(v2 + 8 * v4))
      {
        sub_18AF38418();
        if (v15 == v16) {
          goto LABEL_29;
        }
        if (!*(void *)(v2 + 8 * v4)) {
          break;
        }
      }
    }
LABEL_26:
    sub_18AF22D60();
  }
  sub_18AF3F778();
  if (v15 == v16) {
    goto LABEL_29;
  }
  if (*(void *)(v2 + 8 * v17))
  {
    uint64_t v4 = v17;
    goto LABEL_26;
  }
  while (1)
  {
    uint64_t v4 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v4 >= v3) {
      goto LABEL_29;
    }
    sub_18AF3047C();
    if (v18) {
      goto LABEL_26;
    }
  }
LABEL_31:
  __break(1u);
}

void sub_18AF705E8()
{
  sub_18AF161EC(&qword_1E9125268);
  sub_18AF41170();
  sub_18AF379CC();
  if (v2)
  {
    uint64_t v3 = (void *)sub_18AF185C8();
    if (v6) {
      BOOL v7 = (unint64_t)v3 >= v5;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7) {
      sub_18AF31BC8(v3, v4);
    }
    sub_18AF192A0();
    if (!v10) {
      goto LABEL_10;
    }
LABEL_9:
    sub_18AF36AAC();
    while (1)
    {
      sub_18AF403CC();
      if (v14) {
        goto LABEL_9;
      }
LABEL_10:
      uint64_t v11 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
        goto LABEL_27;
      }
      if (v11 >= v8) {
        goto LABEL_25;
      }
      if (!*(void *)(v1 + 8 * v11))
      {
        if (v9 + 2 >= v8) {
          goto LABEL_25;
        }
        if (!*(void *)(v1 + 8 * (v9 + 2)))
        {
          if (v9 + 3 >= v8) {
            goto LABEL_25;
          }
          if (!*(void *)(v1 + 8 * (v9 + 3)))
          {
            uint64_t v12 = v9 + 4;
            if (v9 + 4 >= v8) {
              goto LABEL_25;
            }
            if (!*(void *)(v1 + 8 * v12)) {
              break;
            }
          }
        }
      }
LABEL_22:
      sub_18AF31210();
    }
    while (1)
    {
      uint64_t v13 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        break;
      }
      if (v13 >= v8) {
        goto LABEL_25;
      }
      ++v12;
      if (*(void *)(v1 + 8 * v13)) {
        goto LABEL_22;
      }
    }
LABEL_27:
    __break(1u);
  }
  else
  {
LABEL_25:
    swift_release();
    void *v0 = v0;
  }
}

void sub_18AF706E8()
{
  sub_18AF22D38();
  sub_18AF161EC((uint64_t *)&unk_1E9124C40);
  sub_18AF41170();
  sub_18AF379CC();
  if (!v6)
  {
LABEL_29:
    swift_release();
    void *v0 = v0;
    sub_18AF3387C();
    return;
  }
  BOOL v7 = (void *)sub_18AF185C8();
  if (v10) {
    BOOL v11 = (unint64_t)v7 >= v9;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    sub_18AF31BC8(v7, v8);
  }
  sub_18AF39058();
  if (!v5) {
    goto LABEL_10;
  }
LABEL_9:
  sub_18AF30624();
  while (1)
  {
    uint64_t v18 = (void *)(*(void *)(v1 + 48) + 16 * v12);
    uint64_t v19 = v18[1];
    id v20 = (void *)(v0[6] + 16 * v12);
    *id v20 = *v18;
    v20[1] = v19;
    swift_bridgeObjectRetain();
    if (v5) {
      goto LABEL_9;
    }
LABEL_10:
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v4 + 1 >= v3) {
      goto LABEL_29;
    }
    sub_18AF71FC0();
    if (!v13)
    {
      sub_18AF71FB4();
      if (v14 == v15) {
        goto LABEL_29;
      }
      if (!*(void *)(v2 + 8 * v4))
      {
        sub_18AF38418();
        if (v14 == v15) {
          goto LABEL_29;
        }
        if (!*(void *)(v2 + 8 * v4)) {
          break;
        }
      }
    }
LABEL_26:
    sub_18AF22D60();
  }
  sub_18AF3F778();
  if (v14 == v15) {
    goto LABEL_29;
  }
  if (*(void *)(v2 + 8 * v16))
  {
    uint64_t v4 = v16;
    goto LABEL_26;
  }
  while (1)
  {
    uint64_t v4 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v4 >= v3) {
      goto LABEL_29;
    }
    sub_18AF3047C();
    if (v17) {
      goto LABEL_26;
    }
  }
LABEL_31:
  __break(1u);
}

void sub_18AF707F4()
{
  sub_18AF22D38();
  sub_18AF161EC(&qword_1E9124CE8);
  sub_18AF41170();
  sub_18AF379CC();
  if (!v6)
  {
LABEL_29:
    swift_release();
    void *v0 = v0;
    sub_18AF3387C();
    return;
  }
  BOOL v7 = (void *)sub_18AF185C8();
  if (v10) {
    BOOL v11 = (unint64_t)v7 >= v9;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    sub_18AF31BC8(v7, v8);
  }
  sub_18AF39058();
  if (!v5) {
    goto LABEL_10;
  }
LABEL_9:
  sub_18AF30624();
  while (1)
  {
    uint64_t v18 = *(void *)(v1 + 48) + 16 * v12;
    uint64_t v19 = *(void **)v18;
    LOBYTE(v18) = *(unsigned char *)(v18 + 8);
    uint64_t v20 = v0[6] + 16 * v12;
    *(void *)uint64_t v20 = v19;
    *(unsigned char *)(v20 + 8) = v18;
    id v21 = v19;
    if (v5) {
      goto LABEL_9;
    }
LABEL_10:
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v4 + 1 >= v3) {
      goto LABEL_29;
    }
    sub_18AF71FC0();
    if (!v13)
    {
      sub_18AF71FB4();
      if (v14 == v15) {
        goto LABEL_29;
      }
      if (!*(void *)(v2 + 8 * v4))
      {
        sub_18AF38418();
        if (v14 == v15) {
          goto LABEL_29;
        }
        if (!*(void *)(v2 + 8 * v4)) {
          break;
        }
      }
    }
LABEL_26:
    sub_18AF22D60();
  }
  sub_18AF3F778();
  if (v14 == v15) {
    goto LABEL_29;
  }
  if (*(void *)(v2 + 8 * v16))
  {
    uint64_t v4 = v16;
    goto LABEL_26;
  }
  while (1)
  {
    uint64_t v4 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v4 >= v3) {
      goto LABEL_29;
    }
    sub_18AF3047C();
    if (v17) {
      goto LABEL_26;
    }
  }
LABEL_31:
  __break(1u);
}

void sub_18AF70908()
{
  sub_18AF35140();
  sub_18AF161EC(&qword_1E9126060);
  uint64_t v2 = sub_18AF16AC0();
  uint64_t v3 = v2;
  if (*(void *)(v1 + 16))
  {
    uint64_t v29 = v0;
    int64_t v4 = 0;
    uint64_t v5 = (void *)(v1 + 56);
    uint64_t v6 = 1 << *(unsigned char *)(v1 + 32);
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v1 + 56);
    int64_t v9 = (unint64_t)(v6 + 63) >> 6;
    uint64_t v10 = v2 + 56;
    if (!v8) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    for (unint64_t i = v11 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v4 << 6))
    {
      Swift::UInt v16 = *(void *)(*(void *)(v1 + 48) + 8 * i);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v16);
      Hasher._finalize()();
      sub_18AF3F398();
      if (((-1 << v18) & ~*(void *)(v10 + 8 * v17)) == 0)
      {
        sub_18AF19FD0();
        while (1)
        {
          sub_18AF72000();
          if (v22)
          {
            if (v19) {
              break;
            }
          }
          if (v20 == v21) {
            uint64_t v20 = 0;
          }
          if (*(void *)(v10 + 8 * v20) != -1)
          {
            sub_18AF16D54();
            goto LABEL_31;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return;
      }
      sub_18AF16AF4();
LABEL_31:
      sub_18AF71FEC();
      *(void *)(v10 + v23) |= v24;
      *(void *)(*(void *)(v3 + 48) + 8 * v25) = v16;
      sub_18AF18F1C();
      if (v8) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v13 = v4 + 1;
      if (__OFADD__(v4, 1)) {
        goto LABEL_39;
      }
      if (v13 >= v9) {
        goto LABEL_33;
      }
      unint64_t v14 = v5[v13];
      ++v4;
      if (!v14)
      {
        int64_t v4 = v13 + 1;
        if (v13 + 1 >= v9) {
          goto LABEL_33;
        }
        unint64_t v14 = v5[v4];
        if (!v14)
        {
          int64_t v4 = v13 + 2;
          if (v13 + 2 >= v9) {
            goto LABEL_33;
          }
          unint64_t v14 = v5[v4];
          if (!v14)
          {
            int64_t v15 = v13 + 3;
            if (v15 >= v9)
            {
LABEL_33:
              sub_18AF71F1C();
              if (v27 ^ v28 | v22) {
                *uint64_t v5 = -1 << v26;
              }
              else {
                sub_18AF3A838(v26);
              }
              uint64_t v0 = v29;
              *(void *)(v1 + 16) = 0;
              break;
            }
            unint64_t v14 = v5[v15];
            if (!v14)
            {
              while (1)
              {
                int64_t v4 = v15 + 1;
                if (__OFADD__(v15, 1)) {
                  goto LABEL_40;
                }
                if (v4 >= v9) {
                  goto LABEL_33;
                }
                unint64_t v14 = v5[v4];
                ++v15;
                if (v14) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v4 = v15;
          }
        }
      }
LABEL_20:
      unint64_t v8 = (v14 - 1) & v14;
    }
  }
  swift_release();
  uint64_t *v0 = v3;
}

void sub_18AF70B30()
{
}

void sub_18AF70B3C()
{
}

void sub_18AF70B48()
{
}

void sub_18AF70B54()
{
  sub_18AF33850();
  sub_18AF35140();
  sub_18AF161EC(v2);
  uint64_t v3 = sub_18AF16AC0();
  uint64_t v4 = v3;
  if (*(void *)(v1 + 16))
  {
    uint64_t v30 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v1 + 32);
    uint64_t v6 = (void *)(v1 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v1 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    swift_retain();
    int64_t v11 = 0;
    if (!v8) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v12 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = v18 + (v11 << 6))
    {
      uint64_t v19 = *(void *)(*(void *)(v1 + 48) + 8 * i);
      NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
      sub_18AF3F398();
      if (((-1 << v21) & ~*(void *)(v10 + 8 * v20)) == 0)
      {
        sub_18AF19FD0();
        while (1)
        {
          sub_18AF72000();
          if (v26)
          {
            if (v23) {
              break;
            }
          }
          if (v24 == v25) {
            uint64_t v24 = 0;
          }
          if (*(void *)(v10 + 8 * v24) != -1)
          {
            sub_18AF16D54();
            goto LABEL_31;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return;
      }
      sub_18AF16AF4();
LABEL_31:
      *(void *)(v10 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      *(void *)(*(void *)(v4 + 48) + 8 * v22) = v19;
      sub_18AF18F1C();
      if (v8) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v14 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_39;
      }
      if (v14 >= v9) {
        goto LABEL_33;
      }
      ++v11;
      if (!v6[v14])
      {
        int64_t v11 = v14 + 1;
        if (v14 + 1 >= v9) {
          goto LABEL_33;
        }
        if (!v6[v11])
        {
          int64_t v11 = v14 + 2;
          if (v14 + 2 >= v9) {
            goto LABEL_33;
          }
          if (!v6[v11])
          {
            int64_t v15 = v14 + 3;
            if (v15 >= v9)
            {
LABEL_33:
              swift_release();
              uint64_t v0 = v30;
              sub_18AF71F1C();
              if (v28 ^ v29 | v26) {
                void *v6 = -1 << v27;
              }
              else {
                sub_18AF3A838(v27);
              }
              *(void *)(v1 + 16) = 0;
              break;
            }
            if (!v6[v15])
            {
              while (1)
              {
                int64_t v11 = v15 + 1;
                if (__OFADD__(v15, 1)) {
                  goto LABEL_40;
                }
                if (v11 >= v9) {
                  goto LABEL_33;
                }
                ++v15;
                if (v6[v11]) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v11 = v15;
          }
        }
      }
LABEL_20:
      sub_18AF43730();
      unint64_t v8 = v17 & v16;
    }
  }
  swift_release();
  uint64_t *v0 = v4;
  sub_18AF16CC4();
}

void sub_18AF70D58()
{
  sub_18AF29944();
  sub_18AF35140();
  sub_18AF161EC(&qword_1E9125268);
  sub_18AF16AC0();
  sub_18AF379CC();
  if (v3)
  {
    int64_t v4 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v5 = *(void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v29 = -1 << v7;
    uint64_t v30 = v0;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & v5;
    uint64_t v31 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v1 + 56;
    if ((v8 & v5) == 0) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (unint64_t i = v12 | (v4 << 6); ; unint64_t i = v20 + (v4 << 6))
    {
      uint64_t v21 = *(void *)(*(void *)(v2 + 48) + 8 * i);
      static Hasher._hash(seed:_:)();
      sub_18AF3F398();
      if (((-1 << v23) & ~*(void *)(v11 + 8 * v22)) == 0)
      {
        sub_18AF19FD0();
        while (1)
        {
          sub_18AF72000();
          if (v28)
          {
            if (v25) {
              break;
            }
          }
          if (v26 == v27) {
            uint64_t v26 = 0;
          }
          if (*(void *)(v11 + 8 * v26) != -1)
          {
            sub_18AF16D54();
            goto LABEL_32;
          }
        }
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        return;
      }
      sub_18AF16AF4();
LABEL_32:
      *(void *)(v11 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
      *(void *)(*(void *)(v1 + 48) + 8 * v24) = v21;
      ++*(void *)(v1 + 16);
      if (v9) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v14 = v4 + 1;
      if (__OFADD__(v4, 1)) {
        goto LABEL_40;
      }
      if (v14 >= v10) {
        goto LABEL_34;
      }
      ++v4;
      if (!v6[v14])
      {
        int64_t v4 = v14 + 1;
        if (v14 + 1 >= v10) {
          goto LABEL_34;
        }
        if (!v6[v4])
        {
          int64_t v4 = v14 + 2;
          if (v14 + 2 >= v10) {
            goto LABEL_34;
          }
          if (!v6[v4])
          {
            sub_18AF3F778();
            if (v16 == v17)
            {
LABEL_34:
              if (v31 > 63) {
                sub_18AF6FC30(0, v10, (void *)(v2 + 56));
              }
              else {
                uint64_t *v6 = v29;
              }
              uint64_t v0 = v30;
              *(void *)(v2 + 16) = 0;
              break;
            }
            if (!v6[v15])
            {
              while (1)
              {
                int64_t v4 = v15 + 1;
                if (__OFADD__(v15, 1)) {
                  goto LABEL_41;
                }
                if (v4 >= v10) {
                  goto LABEL_34;
                }
                ++v15;
                if (v6[v4]) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v4 = v15;
          }
        }
      }
LABEL_21:
      sub_18AF43730();
      unint64_t v9 = v19 & v18;
    }
  }
  swift_release();
  void *v0 = v1;
  sub_18AF19EC4();
}

void sub_18AF70F64()
{
  sub_18AF35140();
  sub_18AF161EC((uint64_t *)&unk_1E9124C40);
  uint64_t v2 = sub_18AF16AC0();
  uint64_t v3 = v2;
  if (*(void *)(v1 + 16))
  {
    uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
    uint64_t v33 = v0;
    uint64_t v34 = (void *)(v1 + 56);
    if (v4 < 64) {
      uint64_t v5 = ~(-1 << v4);
    }
    else {
      uint64_t v5 = -1;
    }
    unint64_t v6 = v5 & *(void *)(v1 + 56);
    int64_t v7 = (unint64_t)(v4 + 63) >> 6;
    uint64_t v8 = v2 + 56;
    swift_retain();
    int64_t v9 = 0;
    if (!v6) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    for (unint64_t i = v10 | (v9 << 6); ; unint64_t i = v16 + (v9 << 6))
    {
      char v17 = (uint64_t *)(*(void *)(v1 + 48) + 16 * i);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      Hasher._finalize()();
      sub_18AF3F398();
      if (((-1 << v21) & ~*(void *)(v8 + 8 * v20)) == 0)
      {
        sub_18AF19FD0();
        while (1)
        {
          sub_18AF72000();
          if (v25)
          {
            if (v22) {
              break;
            }
          }
          if (v23 == v24) {
            uint64_t v23 = 0;
          }
          if (*(void *)(v8 + 8 * v23) != -1)
          {
            sub_18AF16D54();
            goto LABEL_31;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return;
      }
      sub_18AF16AF4();
LABEL_31:
      sub_18AF71FEC();
      *(void *)(v8 + v26) |= v27;
      uint64_t v29 = (void *)(*(void *)(v3 + 48) + 16 * v28);
      void *v29 = v18;
      v29[1] = v19;
      sub_18AF18F1C();
      if (v6) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v12 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        goto LABEL_39;
      }
      if (v12 >= v7) {
        goto LABEL_33;
      }
      ++v9;
      if (!v34[v12])
      {
        int64_t v9 = v12 + 1;
        if (v12 + 1 >= v7) {
          goto LABEL_33;
        }
        if (!v34[v9])
        {
          int64_t v9 = v12 + 2;
          if (v12 + 2 >= v7) {
            goto LABEL_33;
          }
          if (!v34[v9])
          {
            int64_t v13 = v12 + 3;
            if (v13 >= v7)
            {
LABEL_33:
              swift_release();
              uint64_t v0 = v33;
              sub_18AF71F1C();
              if (v31 ^ v32 | v25) {
                *uint64_t v34 = -1 << v30;
              }
              else {
                sub_18AF6FC30(0, (unint64_t)(v30 + 63) >> 6, v34);
              }
              *(void *)(v1 + 16) = 0;
              break;
            }
            if (!v34[v13])
            {
              while (1)
              {
                int64_t v9 = v13 + 1;
                if (__OFADD__(v13, 1)) {
                  goto LABEL_40;
                }
                if (v9 >= v7) {
                  goto LABEL_33;
                }
                ++v13;
                if (v34[v9]) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v9 = v13;
          }
        }
      }
LABEL_20:
      sub_18AF43730();
      unint64_t v6 = v15 & v14;
    }
  }
  swift_release();
  uint64_t *v0 = v3;
}

void sub_18AF711C8()
{
  sub_18AF22D38();
  sub_18AF35140();
  sub_18AF161EC(&qword_1E9124CE8);
  sub_18AF16AC0();
  sub_18AF379CC();
  if (v3)
  {
    uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v5 = (void *)(v2 + 56);
    uint64_t v6 = -1;
    if (v4 < 64) {
      uint64_t v6 = ~(-1 << v4);
    }
    uint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v4 + 63) >> 6;
    swift_retain();
    int64_t v9 = 0;
    if (!v7) {
      goto LABEL_6;
    }
LABEL_5:
    sub_18AF30624();
    while (1)
    {
      sub_18AF71928(*(void **)(*(void *)(v2 + 48) + 16 * v10), *(unsigned char *)(*(void *)(v2 + 48) + 16 * v10 + 8), v1);
      if (v7) {
        goto LABEL_5;
      }
LABEL_6:
      if (__OFADD__(v9, 1))
      {
        __break(1u);
LABEL_31:
        __break(1u);
        return;
      }
      if (v9 + 1 >= v8) {
        goto LABEL_25;
      }
      sub_18AF71FC0();
      if (!v11)
      {
        sub_18AF71FB4();
        if (v12 == v13) {
          goto LABEL_25;
        }
        if (!v5[v9])
        {
          sub_18AF38418();
          if (v12 == v13) {
            goto LABEL_25;
          }
          if (!v5[v9])
          {
            sub_18AF3F778();
            if (v12 == v13)
            {
LABEL_25:
              swift_release();
              sub_18AF71F1C();
              if (v12 ^ v13 | v17) {
                *uint64_t v5 = -1 << v16;
              }
              else {
                sub_18AF6FC30(0, (unint64_t)(v16 + 63) >> 6, (void *)(v2 + 56));
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            if (!v5[v14])
            {
              while (1)
              {
                int64_t v9 = v14 + 1;
                if (__OFADD__(v14, 1)) {
                  goto LABEL_31;
                }
                if (v9 >= v8) {
                  goto LABEL_25;
                }
                sub_18AF3047C();
                if (v15) {
                  goto LABEL_22;
                }
              }
            }
            int64_t v9 = v14;
          }
        }
      }
LABEL_22:
      sub_18AF22D60();
    }
  }
  swift_release();
  uint64_t *v0 = v1;
  sub_18AF3387C();
}

unint64_t sub_18AF71330(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(v3 + 40);
        id v11 = *(id *)(*(void *)(v3 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_15:
            uint64_t v16 = *(void *)(v3 + 48);
            char v17 = (void *)(v16 + 8 * v2);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            BOOL v19 = v2 != v6 || v17 >= v18 + 1;
            int64_t v2 = v6;
            if (v19)
            {
              *char v17 = *v18;
              int64_t v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_15;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v20 = *(void *)(v3 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v22;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_18AF714C8(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        Swift::Int v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 >= v9 && v2 >= v11)
          {
LABEL_15:
            uint64_t v14 = *(void *)(v3 + 48);
            uint64_t v15 = (_OWORD *)(v14 + 16 * v2);
            uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
            BOOL v17 = v2 != v6 || v15 >= v16 + 1;
            int64_t v2 = v6;
            if (v17)
            {
              *uint64_t v15 = *v16;
              int64_t v2 = v6;
            }
          }
        }
        else if (v11 >= v9 || v2 >= v11)
        {
          goto LABEL_15;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v18 = *(void *)(v3 + 16);
  BOOL v19 = __OFSUB__(v18, 1);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

void sub_18AF71684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void sub_18AF716A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void sub_18AF716BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  sub_18AF29944();
  if (!v13)
  {
    swift_unknownObjectRelease();
    goto LABEL_18;
  }
  uint64_t v14 = v12;
  sub_18AF161EC(v11);
  sub_18AF3858C();
  uint64_t v26 = static _SetStorage.convert(_:capacity:)();
  __CocoaSet.makeIterator()();
  if (!__CocoaSet.Iterator.next()())
  {
LABEL_16:
    swift_release();
LABEL_18:
    sub_18AF19EC4();
    return;
  }
  sub_18AF34EA0(0, v14);
  while (1)
  {
    swift_dynamicCast();
    uint64_t v15 = v26;
    if (*(void *)(v26 + 24) <= *(void *)(v26 + 16))
    {
      sub_18AF70B54();
      uint64_t v15 = v26;
    }
    Swift::Int v16 = NSObject._rawHashValue(seed:)(*(void *)(v15 + 40));
    uint64_t v17 = v15 + 56;
    uint64_t v18 = -1 << *(unsigned char *)(v15 + 32);
    unint64_t v19 = v16 & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v15 + 56 + 8 * (v19 >> 6))) == 0) {
      break;
    }
    unint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v15 + 56 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
LABEL_15:
    *(void *)(v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    *(void *)(*(void *)(v15 + 48) + 8 * v21) = a11;
    ++*(void *)(v15 + 16);
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_16;
    }
  }
  char v22 = 0;
  unint64_t v23 = (unint64_t)(63 - v18) >> 6;
  while (++v20 != v23 || (v22 & 1) == 0)
  {
    BOOL v24 = v20 == v23;
    if (v20 == v23) {
      unint64_t v20 = 0;
    }
    v22 |= v24;
    uint64_t v25 = *(void *)(v17 + 8 * v20);
    if (v25 != -1)
    {
      unint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
      goto LABEL_15;
    }
  }
  __break(1u);
}

void sub_18AF71894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

unint64_t sub_18AF718B4(uint64_t a1, void *a2)
{
  Swift::Int v4 = NSObject._rawHashValue(seed:)(a2[5]);
  sub_18AF37BB8(v4);
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

unint64_t sub_18AF71928(void *a1, char a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2 & 1);
  id v6 = a1;
  NSObject.hash(into:)();

  Swift::Int v7 = Hasher._finalize()();
  sub_18AF37BB8(v7);
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a3 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  uint64_t v9 = *(void *)(a3 + 48) + 16 * result;
  *(void *)uint64_t v9 = a1;
  *(unsigned char *)(v9 + 8) = a2 & 1;
  ++*(void *)(a3 + 16);
  return result;
}

uint64_t sub_18AF719E0()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_18AF71A18()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t sub_18AF71A68()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_18AF71AA4()
{
  sub_18AF19FAC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF14648;
  uint64_t v3 = sub_18AF262F8();
  return sub_18AF6EB0C(v3, v4, v5, v6, v7);
}

uint64_t sub_18AF71B44()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  if (*(void *)(v0 + 48)) {
    swift_release();
  }

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t sub_18AF71B9C()
{
  sub_18AF31148();
  sub_18AF338B4();
  sub_18AF38D80();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF14648;
  sub_18AF30B8C();
  sub_18AF311B0();
  return sub_18AF6E458(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_18AF71C2C(uint64_t a1)
{
  return a1;
}

uint64_t sub_18AF71C5C()
{
  swift_unknownObjectRelease();

  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_18AF71CA4()
{
  sub_18AF19FAC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF14648;
  uint64_t v3 = sub_18AF262F8();
  return sub_18AF6B344(v3, v4, v5, v6, v7);
}

uint64_t sub_18AF71D4C()
{
  sub_18AF19FAC();
  sub_18AF354E0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF14648;
  uint64_t v3 = sub_18AF33B38();
  return sub_18AF6AD04(v3, v4, v5, v6, v7, v8);
}

uint64_t sub_18AF71DE4()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_18AF71DF8()
{
  swift_unknownObjectRelease();

  if (*(void *)(v0 + 40)) {
    swift_release();
  }

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t sub_18AF71E48()
{
  sub_18AF19FAC();
  sub_18AF354E0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF16AE4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF14648;
  uint64_t v3 = sub_18AF33B38();
  return sub_18AF6A948(v3, v4, v5, v6, v7, v8);
}

id sub_18AF71F30()
{
  uint64_t v3 = *(void **)(v0 + 8 * v1 + 32);
  return v3;
}

uint64_t sub_18AF71F54()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t sub_18AF71F74()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t sub_18AF71F94()
{
  return swift_beginAccess();
}

uint64_t sub_18AF71FCC()
{
  return swift_bridgeObjectRetain_n();
}

void __swiftcall CKDatabaseSubscription.init(subscriptionID:)(CKDatabaseSubscription *__return_ptr retstr, Swift::String subscriptionID)
{
  object = subscriptionID._object;
  uint64_t countAndFlagsBits = subscriptionID._countAndFlagsBits;
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v5 = (void *)MEMORY[0x18C128F60](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_initWithSubscriptionID_, v5);
}

uint64_t CKDatabaseSubscription.recordType.getter()
{
  return sub_18AF721F4(v0);
}

void sub_18AF72088(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  CKDatabaseSubscription.recordType.setter(v1, v2);
}

void CKDatabaseSubscription.recordType.setter(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = (id)MEMORY[0x18C128F60]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v3 = 0;
  }
  objc_msgSend(v2, sel_setRecordType_, v3);
}

void (*CKDatabaseSubscription.recordType.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t)v1;
  *a1 = sub_18AF721F4(v1);
  a1[1] = v3;
  return sub_18AF72180;
}

void sub_18AF72180(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (a2)
  {
    swift_bridgeObjectRetain();
    CKDatabaseSubscription.recordType.setter(v3, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    CKDatabaseSubscription.recordType.setter(*a1, v2);
  }
}

uint64_t sub_18AF721F4(void *a1)
{
  id v1 = objc_msgSend(a1, sel_recordType);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_18AF72258@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CKDatabaseSubscription.recordType.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t CKSyncEngine.Event.StateUpdate.stateSerialization.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return sub_18AF5F6FC(v2, v3);
}

id CKSyncEngine.Event.AccountChange.changeType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void **)v1;
  unint64_t v3 = *(void **)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  unsigned __int8 v4 = *(unsigned char *)(v1 + 16);
  *(unsigned char *)(a1 + 16) = v4;
  return sub_18AF755E8(v2, v3, v4);
}

void CKSyncEngine.Event.AccountChange.ChangeType.init(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = objc_msgSend(a1, sel_currentUser);
  id v5 = objc_msgSend(a1, sel_previousUser);
  id v6 = objc_msgSend(a1, sel_changeType);
  if (v6 == (id)2)
  {
    if (v4 && v5)
    {
      id v9 = v4;
      char v8 = 2;
      id v4 = v5;
LABEL_12:

      *(void *)a2 = v4;
      *(void *)(a2 + 8) = v9;
      *(unsigned char *)(a2 + 16) = v8;
      return;
    }
    sub_18AF386D8();
    _StringGuts.grow(_:)(67);
    sub_18AF23148();
    sub_18AF42D30(v10 + 26, (uint64_t)"No current/previous user for account switch. current=");
    sub_18AF161EC(&qword_1E9126070);
    v11._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = 0x756F697665727020;
    v12._object = (void *)0xEA00000000003D73;
    String.append(_:)(v12);
    v14._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    sub_18AF311D4(v14);
    swift_bridgeObjectRelease();
  }
  else if (v6 == (id)1)
  {
    if (v5)
    {
      id v7 = v5;
      char v8 = 1;
      id v5 = v4;
      id v4 = v7;
LABEL_11:

      id v9 = 0;
      goto LABEL_12;
    }
  }
  else if (v6)
  {
    sub_18AF386D8();
    _StringGuts.grow(_:)(41);
    sub_18AF23148();
    sub_18AF42D30(v13 + 12, (uint64_t)"Unknown value for account change type: ");
    objc_msgSend(a1, sel_changeType);
    type metadata accessor for CKSyncEngineAccountChangeType(0);
    _print_unlocked<A, B>(_:_:)();
  }
  else if (v4)
  {
    char v8 = 0;
    goto LABEL_11;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t CKSyncEngine.Event.SentDatabaseChanges.failedZoneDeletes.getter()
{
  return swift_bridgeObjectRetain();
}

id CKSyncEngine.Event.SentDatabaseChanges.FailedZoneSave.error.getter()
{
  return *(id *)(v0 + 8);
}

void *CKSyncEngine.Event.DidFetchRecordZoneChanges.error.getter()
{
  uint64_t v1 = *(void **)(v0 + 8);
  id v2 = v1;
  return v1;
}

uint64_t _s8CloudKit12CKSyncEngineC5EventO16WillFetchChangesV7contextAC0gH7ContextVvg_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 16);
  id v5 = *(void **)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  char v7 = *(unsigned char *)(v1 + 48);
  uint64_t v8 = *(void *)(v1 + 56);
  char v9 = *(unsigned char *)(v1 + 64);
  *(unsigned char *)a1 = *(unsigned char *)v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v6;
  *(unsigned char *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  *(unsigned char *)(a1 + 64) = v9;
  swift_bridgeObjectRetain();
  id v10 = v5;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

id _s8CloudKit12CKSyncEngineC5EventO15WillSendChangesV7contextAC0gH7ContextVvg_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 16);
  id v5 = *(id *)(v1 + 24);
  *(unsigned char *)a1 = *(unsigned char *)v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRetain();

  return v5;
}

void CKSyncEngineEvent.event.getter(uint64_t a1@<X8>)
{
  unint64_t v2 = (unint64_t)v1;
  self;
  uint64_t v4 = swift_dynamicCastObjCClass();
  if (v4)
  {
    id v5 = (void *)v4;
    uint64_t v6 = (id *)(id)v2;
    id v7 = objc_msgSend(v5, sel_stateSerialization);
    id v8 = objc_msgSend(v7, sel_data);

    uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = a1;
    uint64_t v12 = v11;

    *(void *)uint64_t v10 = v9;
    *(void *)(v10 + 8) = v12;
    *(_OWORD *)(v10 + 16) = 0u;
    *(_OWORD *)(v10 + 32) = 0u;
    *(_OWORD *)(v10 + 48) = 0u;
    *(unsigned char *)(v10 + 64) = 0;
    return;
  }
  self;
  uint64_t v13 = sub_18AF16D68();
  if (v13)
  {
    Swift::String v14 = (void *)v13;
    uint64_t v15 = (id *)(id)v2;
    CKSyncEngine.Event.AccountChange.ChangeType.init(_:)(v14, (uint64_t)&v204);
    uint64_t v16 = v205;
    *(_OWORD *)a1 = v204;
    *(void *)(a1 + 16) = v16;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(void *)(a1 + 56) = 0;
    *(unsigned char *)(a1 + 64) = 16;
    return;
  }
  self;
  uint64_t v17 = sub_18AF16D68();
  uint64_t v18 = MEMORY[0x1E4FBC860];
  unint64_t v19 = &selRef_currentUserParticipant;
  uint64_t v198 = a1;
  if (!v17)
  {
    self;
    uint64_t v30 = sub_18AF16D68();
    if (!v30)
    {
      self;
      uint64_t v55 = sub_18AF16D68();
      if (!v55)
      {
        self;
        uint64_t v72 = sub_18AF16D68();
        if (!v72)
        {
          self;
          uint64_t v87 = sub_18AF16D68();
          if (v87)
          {
            uint64_t v88 = (void *)v87;
            uint64_t v89 = (id *)(id)v2;
            id v90 = objc_msgSend(v88, sel_context);
            CKSyncEngineFetchChangesContext.contextStruct()((uint64_t)&v204);

            sub_18AF4118C();
            long long v92 = v206;
            *(void *)a1 = v93;
            *(void *)(a1 + 8) = v94;
            *(void *)(a1 + 16) = v95;
            *(_OWORD *)(a1 + 24) = v92;
            *(void *)(a1 + 40) = v96;
            *(void *)(a1 + 48) = v97;
            *(void *)(a1 + 56) = v98;
            *(unsigned char *)(a1 + 64) = v91 | 0x60;
            return;
          }
          self;
          uint64_t v99 = (void *)sub_18AF16D68();
          if (v99)
          {
            *(void *)a1 = objc_msgSend(v99, sel_zoneID);
            *(_OWORD *)(a1 + 8) = 0u;
            *(_OWORD *)(a1 + 24) = 0u;
            *(_OWORD *)(a1 + 40) = 0u;
            *(void *)(a1 + 56) = 0;
            char v100 = 112;
          }
          else
          {
            self;
            uint64_t v101 = sub_18AF16D68();
            if (!v101)
            {
              self;
              uint64_t v106 = sub_18AF16D68();
              if (v106)
              {
                int64_t v107 = (void *)v106;
                uint64_t v108 = (id *)(id)v2;
                id v109 = objc_msgSend(v107, sel_context);
                CKSyncEngineFetchChangesContext.contextStruct()((uint64_t)&v204);

                sub_18AF4118C();
                long long v111 = v206;
                *(void *)a1 = v112;
                *(void *)(a1 + 8) = v113;
                *(void *)(a1 + 16) = v114;
                *(_OWORD *)(a1 + 24) = v111;
                *(void *)(a1 + 40) = v115;
                *(void *)(a1 + 48) = v116;
                *(void *)(a1 + 56) = v117;
                *(unsigned char *)(a1 + 64) = v110 | 0x90;
                return;
              }
              self;
              uint64_t v119 = sub_18AF16D68();
              if (v119)
              {
                uint64_t v120 = (void *)v119;
                uint64_t v121 = (id *)(id)v2;
                id v122 = objc_msgSend(v120, sel_context);
                CKSyncEngineSendChangesContext.contextStruct()((uint64_t)&v204);

                sub_18AF2A578(v123, v124, v125, v126, v127, v128, v129, v130, v194, v195, (uint64_t)v196, (uint64_t)v197, a1, (uint64_t)v199, v200.n128_i64[0], v200.n128_i64[1], v202, v203, v204,
                  *((uint64_t *)&v204 + 1),
                  v205,
                  v206);
                char v132 = -96;
LABEL_92:
                *(unsigned char *)(v131 + 64) = v132;
                return;
              }
              goto LABEL_90;
            }
            uint64_t v102 = (void *)v101;
            int64_t v103 = v1;
            id v104 = objc_msgSend(v102, sel_error);
            if (v104) {
              uint64_t v105 = related decl 'e' for CKErrorCode.init(_:)(v104);
            }
            else {
              uint64_t v105 = 0;
            }
            id v118 = objc_msgSend(v102, sel_zoneID);

            *(void *)a1 = v118;
            *(void *)(a1 + 8) = v105;
            *(_OWORD *)(a1 + 16) = 0u;
            *(_OWORD *)(a1 + 32) = 0u;
            *(_OWORD *)(a1 + 48) = 0u;
            char v100 = 0x80;
          }
          *(unsigned char *)(a1 + 64) = v100;
          return;
        }
        unint64_t v33 = v72;
        char v31 = v1;
        id v73 = objc_msgSend((id)v33, sel_failedRecordSaves);
        sub_18AF34EA0(0, &qword_1E9124F10);
        unint64_t v2 = sub_18AF2ACEC();

        if (!(v2 >> 62))
        {
          uint64_t v74 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (!v74)
          {
LABEL_132:
            swift_bridgeObjectRelease();
            goto LABEL_133;
          }
LABEL_63:
          sub_18AF3485C();
          sub_18AF5B538();
          if (v74 < 0)
          {
            __break(1u);
            goto LABEL_136;
          }
          do
          {
            if ((v2 & 0xC000000000000001) != 0) {
              id v75 = (id)MEMORY[0x18C1298C0](0, v2);
            }
            else {
              id v75 = *(id *)(v2 + 32);
            }
            char v76 = v75;
            CKSyncEngineFailedRecordSave.failedRecordSaveStruct()(&v204);

            __n128 v86 = sub_18AF33EC0(v77, v78, v79, v80, v81, v82, v83, v84, v194, v195, (uint64_t)v196, (uint64_t)v197, v198, (uint64_t)v199, v200.n128_i64[0], v200.n128_i64[1], v202, v203, v204);
            if (v70)
            {
              sub_18AF38D94(v85);
              sub_18AF5B538();
              __n128 v86 = v200;
            }
            sub_18AF1BC24(v86);
          }
          while (!v71);
          swift_bridgeObjectRelease();
LABEL_133:
          id v177 = objc_msgSend((id)v33, sel_failedRecordDeletes);
          sub_18AF34EA0(0, &qword_1E91255F0);
          sub_18AF161EC(&qword_1E9125660);
          sub_18AF34EDC((unint64_t *)&qword_1E91251C8, &qword_1E91255F0);
          uint64_t v178 = sub_18AF76740();

          sub_18AF75414(v178, &qword_1E9124F20);
          swift_bridgeObjectRelease();
          id v179 = objc_msgSend((id)v33, sel_savedRecords);
          sub_18AF34EA0(0, &qword_1E9125120);
          static Array._unconditionallyBridgeFromObjectiveC(_:)();

          id v180 = objc_msgSend((id)v33, sel_deletedRecordIDs);
          static Array._unconditionallyBridgeFromObjectiveC(_:)();

          sub_18AF3372C(v181, v182, v183, v184, v185, v186, v187, v188, v194, v195, (uint64_t)v196, (uint64_t)v197, v198);
          char v54 = 80;
          goto LABEL_134;
        }
LABEL_131:
        sub_18AF22D08();
        uint64_t v74 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v74) {
          goto LABEL_132;
        }
        goto LABEL_63;
      }
      unint64_t v33 = v55;
      char v31 = v1;
      id v56 = objc_msgSend((id)v33, sel_failedZoneSaves);
      sub_18AF34EA0(0, &qword_1E9124E08);
      unint64_t v2 = sub_18AF2ACEC();

      if (!(v2 >> 62))
      {
        uint64_t v57 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v57)
        {
LABEL_128:
          swift_bridgeObjectRelease();
LABEL_129:
          id v165 = objc_msgSend((id)v33, sel_failedZoneDeletes);
          sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
          sub_18AF161EC(&qword_1E9125660);
          sub_18AF34EDC((unint64_t *)&qword_1EB279468, (unint64_t *)&qword_1EB279460);
          uint64_t v166 = sub_18AF76740();

          sub_18AF75414(v166, &qword_1E9124E10);
          swift_bridgeObjectRelease();
          id v167 = objc_msgSend((id)v33, sel_savedZones);
          sub_18AF34EA0(0, &qword_1E9125630);
          static Array._unconditionallyBridgeFromObjectiveC(_:)();

          id v168 = objc_msgSend((id)v33, sel_deletedZoneIDs);
          static Array._unconditionallyBridgeFromObjectiveC(_:)();

          sub_18AF3372C(v169, v170, v171, v172, v173, v174, v175, v176, v194, v195, (uint64_t)v196, (uint64_t)v197, v198);
          char v54 = 64;
          goto LABEL_134;
        }
        goto LABEL_51;
      }
LABEL_127:
      sub_18AF22D08();
      uint64_t v57 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v57) {
        goto LABEL_128;
      }
LABEL_51:
      sub_18AF3485C();
      sub_18AF5B558();
      if ((v57 & 0x8000000000000000) == 0)
      {
        do
        {
          if ((v2 & 0xC000000000000001) != 0) {
            id v58 = (id)MEMORY[0x18C1298C0](0, v2);
          }
          else {
            id v58 = *(id *)(v2 + 32);
          }
          unint64_t v59 = v58;
          CKSyncEngineFailedZoneSave.failedZoneSaveStruct()(&v204);

          __n128 v69 = sub_18AF33EC0(v60, v61, v62, v63, v64, v65, v66, v67, v194, v195, (uint64_t)v196, (uint64_t)v197, v198, (uint64_t)v199, v200.n128_i64[0], v200.n128_i64[1], v202, v203, v204);
          if (v70)
          {
            sub_18AF38D94(v68);
            sub_18AF5B558();
            __n128 v69 = v200;
          }
          sub_18AF1BC24(v69);
        }
        while (!v71);
        swift_bridgeObjectRelease();
        goto LABEL_129;
      }
      __break(1u);
      goto LABEL_131;
    }
    char v31 = (id *)v30;
    v197 = v1;
    id v32 = objc_msgSend(v31, sel_modifications);
    sub_18AF34EA0(0, &qword_1E9125120);
    unint64_t v33 = sub_18AF2ACEC();

    if (v33 >> 62)
    {
      sub_18AF31228();
      uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v34) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v34 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v34)
      {
LABEL_21:
        *(void *)&long long v204 = v18;
        sub_18AF30BB0();
        sub_18AF5B5B8();
        if (v34 < 0)
        {
          __break(1u);
          goto LABEL_125;
        }
        uint64_t v35 = 0;
        uint64_t v36 = v204;
        do
        {
          if ((v33 & 0xC000000000000001) != 0) {
            id v37 = (id)MEMORY[0x18C1298C0](v35, v33);
          }
          else {
            id v37 = *(id *)(v33 + 8 * v35 + 32);
          }
          id v38 = v37;
          *(void *)&long long v204 = v36;
          unint64_t v40 = *(void *)(v36 + 16);
          unint64_t v39 = *(void *)(v36 + 24);
          if (v40 >= v39 >> 1)
          {
            sub_18AF34010(v39);
            sub_18AF5B5B8();
            uint64_t v36 = v204;
          }
          ++v35;
          *(void *)(v36 + 16) = v40 + 1;
          *(void *)(v36 + 8 * v40 + 32) = v38;
        }
        while (v34 != v35);
        swift_bridgeObjectRelease();
        unint64_t v19 = &selRef_currentUserParticipant;
LABEL_95:
        id v145 = [v31 v19[117]];
        sub_18AF34EA0(0, &qword_1E9125020);
        unint64_t v2 = sub_18AF2ACEC();

        if (v2 >> 62)
        {
          sub_18AF22D08();
          unint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          unint64_t v33 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        v196 = v31;
        if (!v33)
        {
          swift_bridgeObjectRelease();
          char v31 = (id *)MEMORY[0x1E4FBC860];
LABEL_108:
          id v157 = objc_msgSend(v196, sel_zoneAttributesModifications);
          sub_18AF34EA0(0, &qword_1E9125630);
          unint64_t v158 = sub_18AF2ACEC();

          if (v158 >> 62)
          {
            swift_bridgeObjectRetain();
            unint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            unint64_t v33 = *(void *)((v158 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          if (!v33)
          {
            swift_bridgeObjectRelease();

            uint64_t v160 = MEMORY[0x1E4FBC860];
LABEL_121:
            uint64_t v53 = v198;
            *(void *)uint64_t v198 = v36;
            *(void *)(v198 + 8) = v31;
            *(void *)(v198 + 16) = v160;
            *(_OWORD *)(v198 + 24) = 0u;
            *(_OWORD *)(v198 + 40) = 0u;
            *(void *)(v198 + 56) = 0;
            char v54 = 48;
            goto LABEL_134;
          }
          *(void *)&long long v204 = MEMORY[0x1E4FBC860];
          sub_18AF30BB0();
          sub_18AF5B578();
          if ((v33 & 0x8000000000000000) == 0)
          {
            uint64_t v159 = 0;
            uint64_t v160 = v204;
            do
            {
              if ((v158 & 0xC000000000000001) != 0) {
                id v161 = (id)MEMORY[0x18C1298C0](v159, v158);
              }
              else {
                id v161 = *(id *)(v158 + 8 * v159 + 32);
              }
              id v162 = v161;
              *(void *)&long long v204 = v160;
              unint64_t v164 = *(void *)(v160 + 16);
              unint64_t v163 = *(void *)(v160 + 24);
              if (v164 >= v163 >> 1)
              {
                sub_18AF34010(v163);
                sub_18AF5B578();
                uint64_t v160 = v204;
              }
              ++v159;
              *(void *)(v160 + 16) = v164 + 1;
              *(void *)(v160 + 8 * v164 + 32) = v162;
            }
            while (v33 != v159);
            swift_bridgeObjectRelease();

            goto LABEL_121;
          }
          goto LABEL_126;
        }
        *(void *)&long long v204 = MEMORY[0x1E4FBC860];
        sub_18AF30BB0();
        sub_18AF5B598();
        if ((v33 & 0x8000000000000000) == 0)
        {
          uint64_t v146 = 0;
          char v31 = (id *)v204;
          v199 = (void *)(v2 & 0xC000000000000001);
          v200.n128_u64[0] = v2;
          do
          {
            if (v199) {
              id v147 = (id)MEMORY[0x18C1298C0](v146, v2);
            }
            else {
              id v147 = *(id *)(v2 + 8 * v146 + 32);
            }
            int v148 = v147;
            id v149 = objc_msgSend(v147, sel_recordID);
            id v150 = objc_msgSend(v148, sel_recordType);
            uint64_t v151 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v153 = v152;

            *(void *)&long long v204 = v31;
            unint64_t v155 = (unint64_t)v31[2];
            unint64_t v154 = (unint64_t)v31[3];
            if (v155 >= v154 >> 1)
            {
              sub_18AF34010(v154);
              sub_18AF5B598();
              char v31 = (id *)v204;
            }
            ++v146;
            v31[2] = (id)(v155 + 1);
            v156 = &v31[3 * v155];
            v156[4] = v149;
            v156[5] = (id)v151;
            v156[6] = v153;
            unint64_t v2 = v200.n128_u64[0];
          }
          while (v33 != v146);
          swift_bridgeObjectRelease();
          goto LABEL_108;
        }
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
        goto LABEL_127;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v36 = MEMORY[0x1E4FBC860];
    goto LABEL_95;
  }
  unint64_t v20 = (void *)v17;
  unint64_t v2 = v1;
  id v21 = objc_msgSend(v20, sel_modifications);
  sub_18AF34EA0(0, &qword_1E9125630);
  unint64_t v22 = sub_18AF2ACEC();

  if (v22 >> 62)
  {
    sub_18AF31228();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v199 = (void *)v2;
  if (!v23)
  {
    swift_bridgeObjectRelease();
    uint64_t v25 = MEMORY[0x1E4FBC860];
LABEL_31:
    id v41 = objc_msgSend(v20, sel_deletions);
    sub_18AF34EA0(0, &qword_1E9125018);
    unint64_t v42 = sub_18AF2ACEC();

    if (v42 >> 62)
    {
      swift_bridgeObjectRetain();
      unint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v2 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (!v2)
    {
      swift_bridgeObjectRelease();

      uint64_t v44 = MEMORY[0x1E4FBC860];
LABEL_47:
      uint64_t v53 = v198;
      *(void *)uint64_t v198 = v25;
      *(void *)(v198 + 8) = v44;
      *(_OWORD *)(v198 + 16) = 0u;
      *(_OWORD *)(v198 + 32) = 0u;
      *(_OWORD *)(v198 + 48) = 0u;
      char v54 = 32;
LABEL_134:
      *(unsigned char *)(v53 + 64) = v54;
      return;
    }
    *(void *)&long long v204 = MEMORY[0x1E4FBC860];
    sub_18AF30BB0();
    sub_18AF5B5D8();
    if ((v2 & 0x8000000000000000) == 0)
    {
      id v43 = 0;
      uint64_t v44 = v204;
      unint64_t v201 = v42 & 0xC000000000000001;
      unint64_t v45 = v42;
      do
      {
        if (v201) {
          id v46 = (id)MEMORY[0x18C1298C0](v43, v42);
        }
        else {
          id v46 = *(id *)(v42 + 8 * (void)v43 + 32);
        }
        unsigned int v47 = v46;
        id v48 = objc_msgSend(v46, sel_reason);
        if (v48 == (id)1) {
          char v49 = 1;
        }
        else {
          char v49 = 2 * (v48 == (id)2);
        }
        id v50 = objc_msgSend(v47, sel_zoneID);

        *(void *)&long long v204 = v44;
        unint64_t v51 = *(void *)(v44 + 16);
        if (v51 >= *(void *)(v44 + 24) >> 1)
        {
          sub_18AF5B5D8();
          uint64_t v44 = v204;
        }
        id v43 = (id *)((char *)v43 + 1);
        *(void *)(v44 + 16) = v51 + 1;
        uint64_t v52 = v44 + 16 * v51;
        *(void *)(v52 + 32) = v50;
        *(unsigned char *)(v52 + 40) = v49;
        unint64_t v42 = v45;
      }
      while ((id *)v2 != v43);
      swift_bridgeObjectRelease();

      goto LABEL_47;
    }
    goto LABEL_89;
  }
  *(void *)&long long v204 = v18;
  sub_18AF30BB0();
  sub_18AF5B5F8();
  if ((v23 & 0x8000000000000000) == 0)
  {
    uint64_t v24 = 0;
    uint64_t v25 = v204;
    do
    {
      if ((v22 & 0xC000000000000001) != 0) {
        id v26 = (id)MEMORY[0x18C1298C0](v24, v22);
      }
      else {
        id v26 = *(id *)(v22 + 8 * v24 + 32);
      }
      uint64_t v27 = v26;
      id v28 = objc_msgSend(v26, sel_zoneID);

      *(void *)&long long v204 = v25;
      unint64_t v29 = *(void *)(v25 + 16);
      if (v29 >= *(void *)(v25 + 24) >> 1)
      {
        sub_18AF5B5F8();
        uint64_t v25 = v204;
      }
      ++v24;
      *(void *)(v25 + 16) = v29 + 1;
      *(void *)(v25 + 8 * v29 + 32) = v28;
    }
    while (v23 != v24);
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  self;
  uint64_t v133 = sub_18AF16D68();
  if (v133)
  {
    uint64_t v134 = (void *)v133;
    uint64_t v135 = (id *)(id)v2;
    id v136 = objc_msgSend(v134, sel_context);
    CKSyncEngineSendChangesContext.contextStruct()((uint64_t)&v204);

    sub_18AF2A578(v137, v138, v139, v140, v141, v142, v143, v144, v194, v195, (uint64_t)v196, (uint64_t)v197, v198, (uint64_t)v199, v200.n128_i64[0], v200.n128_i64[1], v202, v203, v204,
      *((uint64_t *)&v204 + 1),
      v205,
      v206);
    char v132 = -80;
    goto LABEL_92;
  }
LABEL_136:
  _StringGuts.grow(_:)(50);
  swift_bridgeObjectRelease();
  id v189 = objc_msgSend((id)v2, sel_description);
  uint64_t v190 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v192 = v191;

  v193._uint64_t countAndFlagsBits = v190;
  v193._object = v192;
  String.append(_:)(v193);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id sub_18AF736B8(uint64_t a1, unint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v6 = objc_msgSend(v4, sel_initWithData_, isa);
  sub_18AF5AF68(a1, a2);

  return v6;
}

id sub_18AF73730(void *a1, void *a2)
{
  id v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithPreviousUser_currentUser_, a1, a2);

  return v4;
}

uint64_t CKSyncEngine.Event.AccountChange.description.getter()
{
  unint64_t v2 = *(void **)v0;
  uint64_t v1 = *(void **)(v0 + 8);
  if (*(unsigned char *)(v0 + 16))
  {
    if (*(unsigned char *)(v0 + 16) != 1)
    {
      id v10 = v2;
      id v11 = v1;
      _StringGuts.grow(_:)(51);
      sub_18AF41090();
      v12._uint64_t countAndFlagsBits = 0x43746E756F636341;
      v12._object = (void *)0xED000065676E6168;
      String.append(_:)(v12);
      v13._object = (void *)0x800000018B1D2AE0;
      v13._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
      String.append(_:)(v13);
      id v14 = objc_msgSend(v10, sel_description);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_18AF19F04();
      sub_18AF39094();
      swift_bridgeObjectRelease();
      v15._uint64_t countAndFlagsBits = 0x6E6572727563203ELL;
      v15._object = (void *)0xEE003D7265735574;
      String.append(_:)(v15);
      id v16 = objc_msgSend(v11, sel_description);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_18AF19F04();
      sub_18AF39094();
      swift_bridgeObjectRelease();
      sub_18AF39404();

      return 0;
    }
    id v3 = v2;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    sub_18AF342F8();
    id v4 = objc_msgSend(v3, sel_description);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_18AF19F04();
    sub_18AF39094();
    swift_bridgeObjectRelease();
    sub_18AF39404();
    id v5 = (void *)sub_18AF311C8();
    unsigned __int8 v7 = 1;
  }
  else
  {
    id v8 = v2;
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    sub_18AF342F8();
    id v9 = objc_msgSend(v8, sel_description);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_18AF19F04();
    sub_18AF39094();
    swift_bridgeObjectRelease();
    sub_18AF39404();
    id v5 = (void *)sub_18AF311C8();
    unsigned __int8 v7 = 0;
  }
  sub_18AF74A88(v5, v6, v7);
  return 0;
}

uint64_t CKSyncEngine.Event.StateUpdate.description.getter()
{
  _StringGuts.grow(_:)(26);
  v0._uint64_t countAndFlagsBits = 60;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  sub_18AF76714();
  v1._object = (void *)0x800000018B1D2160;
  v1._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  sub_18AF38960();
  return 0;
}

uint64_t CKSyncEngine.Event.FetchedDatabaseChanges.description.getter()
{
  sub_18AF4024C();
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  sub_18AF342F8();
  uint64_t v0 = swift_bridgeObjectRetain();
  v1._uint64_t countAndFlagsBits = MEMORY[0x18C129260](v0, &type metadata for CKDatabase.DatabaseChange.Modification);
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_18AF3A9D4();
  uint64_t v2 = swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = MEMORY[0x18C129260](v2, &type metadata for CKDatabase.DatabaseChange.Deletion);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_18AF39404();
  return v5;
}

unint64_t CKSyncEngine.Event.FetchedRecordZoneChanges.description.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v16 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    sub_18AF26470();
    uint64_t v4 = 0;
    uint64_t v3 = v16;
    do
    {
      id v5 = *(id *)(v1 + 8 * v4 + 32);
      id v6 = objc_msgSend(v5, sel_conciseDescription);
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v9 = v8;

      unint64_t v10 = *(void *)(v16 + 16);
      if (v10 >= *(void *)(v16 + 24) >> 1) {
        sub_18AF26470();
      }
      ++v4;
      *(void *)(v16 + 16) = v10 + 1;
      uint64_t v11 = v16 + 16 * v10;
      *(void *)(v11 + 32) = v7;
      *(void *)(v11 + 40) = v9;
    }
    while (v2 != v4);
    swift_bridgeObjectRelease();
  }
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = MEMORY[0x18C129260](v3, MEMORY[0x1E4FBB1A0]);
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_18AF3A9D4();
  uint64_t v13 = swift_bridgeObjectRetain();
  v14._uint64_t countAndFlagsBits = MEMORY[0x18C129260](v13, &type metadata for CKDatabase.RecordZoneChange.Deletion);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_18AF38960();
  return 0xD000000000000028;
}

uint64_t CKSyncEngine.Event.SentDatabaseChanges.description.getter()
{
  sub_18AF4024C();
  _StringGuts.grow(_:)(76);
  sub_18AF41090();
  v0._object = (void *)0x800000018B1F0BB0;
  v0._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = 0x6F5A646576617320;
  v1._object = (void *)0xEC0000003D73656ELL;
  String.append(_:)(v1);
  uint64_t v2 = sub_18AF34EA0(0, &qword_1E9125630);
  uint64_t v3 = swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = MEMORY[0x18C129260](v3, v2);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0xD000000000000011;
  v5._object = (void *)0x800000018B1D2BC0;
  String.append(_:)(v5);
  uint64_t v6 = swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = MEMORY[0x18C129260](v6, &type metadata for CKSyncEngine.Event.SentDatabaseChanges.FailedZoneSave);
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 0xD000000000000010;
  v8._object = (void *)0x800000018B1D2BE0;
  String.append(_:)(v8);
  uint64_t v9 = sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
  uint64_t v10 = swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = MEMORY[0x18C129260](v10, v9);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12._object = (void *)0x800000018B1D2C00;
  v12._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v12);
  type metadata accessor for CKError(0);
  sub_18AF34EDC((unint64_t *)&qword_1EB279468, (unint64_t *)&qword_1EB279460);
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_18AF39404();
  return v15;
}

void CKSyncEngine.Event.SentRecordZoneChanges.description.getter()
{
  uint64_t v1 = *v0;
  if ((unint64_t)*v0 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  if (!v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = MEMORY[0x1E4FBC860];
LABEL_14:
    sub_18AF386D8();
    _StringGuts.grow(_:)(84);
    v13._uint64_t countAndFlagsBits = 60;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    v14._object = (void *)0x800000018B1F0BD0;
    v14._uint64_t countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v14);
    v15._uint64_t countAndFlagsBits = 0x6552646576617320;
    v15._object = (void *)0xEE003D7364726F63;
    String.append(_:)(v15);
    v22._uint64_t countAndFlagsBits = MEMORY[0x18C129260](v4, MEMORY[0x1E4FBB1A0]);
    sub_18AF311D4(v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_18AF42D30(0xD000000000000013, (uint64_t)" failedRecordSaves=");
    uint64_t v16 = swift_bridgeObjectRetain();
    v23._uint64_t countAndFlagsBits = MEMORY[0x18C129260](v16, &type metadata for CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave);
    sub_18AF311D4(v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_18AF42D30(0xD000000000000012, (uint64_t)" deletedRecordIDs=");
    uint64_t v17 = sub_18AF34EA0(0, &qword_1E91255F0);
    uint64_t v18 = swift_bridgeObjectRetain();
    v19._uint64_t countAndFlagsBits = MEMORY[0x18C129260](v18, v17);
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20._object = (void *)0x800000018B1D2C60;
    v20._uint64_t countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v20);
    type metadata accessor for CKError(0);
    sub_18AF34EDC((unint64_t *)&qword_1E91251C8, &qword_1E91255F0);
    swift_bridgeObjectRetain();
    v24._uint64_t countAndFlagsBits = Dictionary.description.getter();
    sub_18AF311D4(v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_18AF38960();
    return;
  }
  uint64_t v21 = MEMORY[0x1E4FBC860];
  sub_18AF26470();
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = 0;
    uint64_t v4 = v21;
    do
    {
      if ((v1 & 0xC000000000000001) != 0) {
        id v5 = (id)MEMORY[0x18C1298C0](v3, v1);
      }
      else {
        id v5 = *(id *)(v1 + 8 * v3 + 32);
      }
      uint64_t v6 = v5;
      id v7 = objc_msgSend(v5, sel_conciseDescription);
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v10 = v9;

      unint64_t v11 = *(void *)(v21 + 16);
      if (v11 >= *(void *)(v21 + 24) >> 1) {
        sub_18AF26470();
      }
      ++v3;
      *(void *)(v21 + 16) = v11 + 1;
      uint64_t v12 = v21 + 16 * v11;
      *(void *)(v12 + 32) = v8;
      *(void *)(v12 + 40) = v10;
    }
    while (v2 != v3);
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  __break(1u);
}

unint64_t CKSyncEngine.Event.WillFetchChanges.description.getter()
{
  return sub_18AF307BC(26);
}

unint64_t CKSyncEngine.Event.WillFetchRecordZoneChanges.description.getter()
{
  id v1 = *v0;
  id v2 = objc_msgSend(v1, sel_description);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  sub_18AF1D720();
  swift_bridgeObjectRelease();
  sub_18AF39404();
  return 0xD000000000000023;
}

uint64_t CKSyncEngine.Event.DidFetchRecordZoneChanges.description.getter()
{
  id v2 = *(void **)v0;
  id v1 = *(void **)(v0 + 8);
  if (v1)
  {
    id v3 = v1;
    id v4 = objc_msgSend((id)_convertErrorToNSError(_:)(), sel_description, 0x3D726F72726520, 0xE700000000000000);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_18AF19F04();

    sub_18AF39094();
    swift_bridgeObjectRelease();
  }
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  sub_18AF342F8();
  id v5 = v2;
  id v6 = objc_msgSend(v5, sel_description);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  v10._uint64_t countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);

  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = sub_18AF311C8();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  sub_18AF39404();
  return 0;
}

unint64_t CKSyncEngine.Event.DidFetchChanges.description.getter()
{
  return sub_18AF307BC(25);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_18AF744A8()
{
  id v1 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  id v2 = v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = CKSyncEngine.FetchChangesContext.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_18AF38960();
}

unint64_t CKSyncEngine.Event.WillSendChanges.description.getter()
{
  return sub_18AF3561C(25);
}

unint64_t CKSyncEngine.Event.DidSendChanges.description.getter()
{
  return sub_18AF3561C(24);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_18AF745B0()
{
  Swift::String v3 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  id v1 = v3;
  v2._uint64_t countAndFlagsBits = CKSyncEngine.SendChangesContext.description.getter();
  String.append(_:)(v2);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_18AF38960();
}

uint64_t static CKSyncEngine.Event.AccountChange.ChangeType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  Swift::String v2 = *(void **)a1;
  Swift::String v3 = *(void **)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 16);
  id v5 = *(id *)a2;
  id v6 = *(void **)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  if (!*(unsigned char *)(a1 + 16))
  {
    if (!*(unsigned char *)(a2 + 16))
    {
      sub_18AF34EA0(0, (unint64_t *)&unk_1E9125600);
      sub_18AF755E8(v5, v6, 0);
      Swift::String v11 = (void *)sub_18AF31160();
      sub_18AF755E8(v11, v12, 0);
      char v10 = static NSObject.== infix(_:_:)();
      LOBYTE(v4) = 0;
      LOBYTE(v7) = 0;
      goto LABEL_13;
    }
    goto LABEL_10;
  }
  if (v4 == 1)
  {
    if (v7 == 1)
    {
      sub_18AF34EA0(0, (unint64_t *)&unk_1E9125600);
      LOBYTE(v4) = 1;
      sub_18AF755E8(v5, v6, 1u);
      uint64_t v8 = (void *)sub_18AF31160();
      sub_18AF755E8(v8, v9, 1u);
      char v10 = static NSObject.== infix(_:_:)();
      LOBYTE(v7) = 1;
      goto LABEL_13;
    }
LABEL_10:
    sub_18AF755E8(*(id *)a2, *(void **)(a2 + 8), v7);
    sub_18AF755E8(v2, v3, v4);
    char v10 = 0;
    goto LABEL_13;
  }
  if (v7 != 2) {
    goto LABEL_10;
  }
  sub_18AF34EA0(0, (unint64_t *)&unk_1E9125600);
  sub_18AF755E8(v5, v6, 2u);
  Swift::String v13 = (void *)sub_18AF31160();
  sub_18AF755E8(v13, v14, 2u);
  id v15 = v2;
  id v16 = v5;
  id v17 = v3;
  id v18 = v6;
  char v19 = static NSObject.== infix(_:_:)();

  if (v19)
  {
    char v10 = static NSObject.== infix(_:_:)();
  }
  else
  {

    char v10 = 0;
  }
  LOBYTE(v4) = 2;
  LOBYTE(v7) = 2;
LABEL_13:
  sub_18AF74A88(v2, v3, v4);
  sub_18AF74A88(v5, v6, v7);
  return v10 & 1;
}

uint64_t CKSyncEngine.Event.SentDatabaseChanges.FailedZoneSave.description.getter()
{
  id v1 = *(void **)v0;
  Swift::String v2 = *(void **)(v0 + 8);
  sub_18AF4024C();
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  sub_18AF342F8();
  id v3 = v1;
  id v4 = objc_msgSend(v3, sel_description);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  sub_18AF1D720();
  swift_bridgeObjectRelease();
  sub_18AF29984();
  id v5 = v2;
  id v6 = objc_msgSend((id)_convertErrorToNSError(_:)(), sel_description);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_18AF19F04();

  sub_18AF39094();
  swift_bridgeObjectRelease();
  sub_18AF39404();
  return v8;
}

uint64_t CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave.description.getter()
{
  id v1 = *(void **)v0;
  Swift::String v2 = *(void **)(v0 + 8);
  sub_18AF4024C();
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  sub_18AF38200();
  sub_18AF342F8();
  id v3 = objc_msgSend(v1, sel_conciseDescription);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  sub_18AF1D720();
  swift_bridgeObjectRelease();
  sub_18AF29984();
  id v4 = v2;
  id v5 = objc_msgSend((id)_convertErrorToNSError(_:)(), sel_description);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_18AF19F04();

  sub_18AF39094();
  swift_bridgeObjectRelease();
  sub_18AF39404();
  return v7;
}

void sub_18AF74A88(void *a1, void *a2, unsigned __int8 a3)
{
  if (a3 >= 2u)
  {
    if (a3 != 2) {
      return;
    }

    a1 = a2;
  }
}

id sub_18AF74AD4()
{
  sub_18AF34EA0(0, &qword_1E9125630);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_18AF34EA0(0, &qword_1E9125018);
  Class v2 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v3 = objc_msgSend(v0, sel_initWithModifications_deletions_, isa, v2);

  return v3;
}

id sub_18AF74B88(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = (void *)MEMORY[0x18C128F60](a2, a3);
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v3, sel_initWithRecordID_recordType_, a1, v5);

  return v6;
}

id sub_18AF74BF4()
{
  sub_18AF34EA0(0, &qword_1E9125120);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_18AF34EA0(0, &qword_1E9125020);
  Class v2 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_18AF34EA0(0, &qword_1E9125630);
  Class v3 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(v0, sel_initWithModifications_deletions_zoneAttributesModifications_, isa, v2, v3);

  return v4;
}

id sub_18AF74CEC()
{
  sub_18AF34EA0(0, &qword_1E9125630);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_18AF34EA0(0, &qword_1E9124E08);
  Class v2 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
  Class v3 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_18AF161EC(&qword_1E9125660);
  sub_18AF34EDC((unint64_t *)&qword_1EB279468, (unint64_t *)&qword_1EB279460);
  Class v4 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v0, sel_initWithSavedZones_failedZoneSaves_deletedZoneIDs_failedZoneDeletes_, isa, v2, v3, v4);

  return v5;
}

id sub_18AF74E50(void *a1, void *a2, SEL *a3)
{
  uint64_t v7 = (void *)_convertErrorToNSError(_:)();
  id v8 = objc_msgSend(v3, *a3, a1, v7);

  return v8;
}

id sub_18AF74EC0()
{
  sub_18AF34EA0(0, &qword_1E9125120);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_18AF34EA0(0, &qword_1E9124F10);
  Class v2 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_18AF34EA0(0, &qword_1E91255F0);
  Class v3 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_18AF161EC(&qword_1E9125660);
  sub_18AF34EDC((unint64_t *)&qword_1E91251C8, &qword_1E91255F0);
  Class v4 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v0, sel_initWithSavedRecords_failedRecordSaves_deletedRecordIDs_failedRecordDeletes_, isa, v2, v3, v4);

  return v5;
}

id sub_18AF75024(void *a1, void *a2)
{
  if (a2)
  {
    id v5 = (void *)_convertErrorToNSError(_:)();
  }
  else
  {
    id v5 = 0;
  }
  id v6 = objc_msgSend(v2, sel_initWithZoneID_error_, a1, v5);

  return v6;
}

uint64_t sub_18AF75098(uint64_t a1)
{
  sub_18AF161EC(&qword_1E9124F20);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  Class v3 = (void *)result;
  int64_t v4 = 0;
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v21 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & v5;
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v10 = result + 64;
  if ((v7 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v11 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    id v16 = *(void **)(*(void *)(a1 + 56) + 8 * i);
    id v17 = *(id *)(*(void *)(a1 + 48) + 8 * i);
    uint64_t result = related decl 'e' for CKErrorCode.init(_:)(v16);
    *(void *)(v10 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(void *)(v3[6] + 8 * i) = v17;
    *(void *)(v3[7] + 8 * i) = result;
    uint64_t v18 = v3[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (v19)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v20;
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_24;
    }
    if (v13 >= v9) {
      return (uint64_t)v3;
    }
    unint64_t v14 = *(void *)(v21 + 8 * v13);
    ++v4;
    if (!v14)
    {
      int64_t v4 = v13 + 1;
      if (v13 + 1 >= v9) {
        return (uint64_t)v3;
      }
      unint64_t v14 = *(void *)(v21 + 8 * v4);
      if (!v14)
      {
        int64_t v4 = v13 + 2;
        if (v13 + 2 >= v9) {
          return (uint64_t)v3;
        }
        unint64_t v14 = *(void *)(v21 + 8 * v4);
        if (!v14) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v8 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v9) {
    return (uint64_t)v3;
  }
  unint64_t v14 = *(void *)(v21 + 8 * v15);
  if (v14)
  {
    int64_t v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v9) {
      return (uint64_t)v3;
    }
    unint64_t v14 = *(void *)(v21 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_18AF75268(uint64_t a1)
{
  sub_18AF161EC(&qword_1E9124E10);
  uint64_t result = (void *)static _DictionaryStorage.copy(original:)();
  Class v3 = result;
  int64_t v4 = 0;
  uint64_t v5 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v10 = (char *)(result + 8);
  if (!v8) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v11 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    id v16 = *(void **)(*(void *)(a1 + 48) + 8 * i);
    id v17 = *(void **)(*(void *)(a1 + 56) + 8 * i);
    *(void *)&v10[(i >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << i;
    *(void *)(v3[6] + 8 * i) = v16;
    *(void *)(v3[7] + 8 * i) = v17;
    uint64_t v18 = v3[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (v19)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v20;
    id v21 = v16;
    uint64_t result = v17;
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_24;
    }
    if (v13 >= v9) {
      return v3;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v13);
    ++v4;
    if (!v14)
    {
      int64_t v4 = v13 + 1;
      if (v13 + 1 >= v9) {
        return v3;
      }
      unint64_t v14 = *(void *)(v5 + 8 * v4);
      if (!v14)
      {
        int64_t v4 = v13 + 2;
        if (v13 + 2 >= v9) {
          return v3;
        }
        unint64_t v14 = *(void *)(v5 + 8 * v4);
        if (!v14) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v8 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v9) {
    return v3;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
    int64_t v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v9) {
      return v3;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_18AF75414(uint64_t a1, uint64_t *a2)
{
  sub_18AF161EC(a2);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  int64_t v4 = (void *)result;
  int64_t v5 = 0;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v23 = a1 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & v6;
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 64;
  if ((v8 & v6) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v12 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v5 << 6))
  {
    id v17 = *(void **)(*(void *)(a1 + 56) + 8 * i);
    id v18 = *(id *)(*(void *)(a1 + 48) + 8 * i);
    id v19 = v17;
    uint64_t result = related decl 'e' for CKErrorCode.init(_:)(v17);
    *(void *)(v11 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(void *)(v4[6] + 8 * i) = v18;
    *(void *)(v4[7] + 8 * i) = result;
    uint64_t v20 = v4[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v4[2] = v22;
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v14 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      goto LABEL_24;
    }
    if (v14 >= v10) {
      return (uint64_t)v4;
    }
    unint64_t v15 = *(void *)(v23 + 8 * v14);
    ++v5;
    if (!v15)
    {
      int64_t v5 = v14 + 1;
      if (v14 + 1 >= v10) {
        return (uint64_t)v4;
      }
      unint64_t v15 = *(void *)(v23 + 8 * v5);
      if (!v15)
      {
        int64_t v5 = v14 + 2;
        if (v14 + 2 >= v10) {
          return (uint64_t)v4;
        }
        unint64_t v15 = *(void *)(v23 + 8 * v5);
        if (!v15) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v9 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v10) {
    return (uint64_t)v4;
  }
  unint64_t v15 = *(void *)(v23 + 8 * v16);
  if (v15)
  {
    int64_t v5 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v5 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v5 >= v10) {
      return (uint64_t)v4;
    }
    unint64_t v15 = *(void *)(v23 + 8 * v5);
    ++v16;
    if (v15) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

id sub_18AF755E8(id result, void *a2, unsigned __int8 a3)
{
  if (a3 >= 2u)
  {
    if (a3 != 2) {
      return result;
    }
    id v4 = result;
    uint64_t result = a2;
  }
  return result;
}

void _s5EventOwxx(uint64_t a1)
{
}

uint64_t _s5EventOwcp(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  id v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void **)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  unsigned __int8 v11 = *(unsigned char *)(a2 + 64);
  sub_18AF40DF0(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 64) = v11;
  return a1;
}

uint64_t _s5EventOwca(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  id v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void **)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  unsigned __int8 v11 = *(unsigned char *)(a2 + 64);
  sub_18AF40DF0(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  unint64_t v12 = *(void **)a1;
  int64_t v13 = *(void **)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  unint64_t v15 = *(void **)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  unsigned __int8 v20 = *(unsigned char *)(a1 + 64);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 64) = v11;
  sub_18AF17DC8(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

uint64_t _s5EventOwta(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 64);
  id v4 = *(void **)a1;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void **)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  unsigned __int8 v12 = *(unsigned char *)(a1 + 64);
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  long long v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(unsigned char *)(a1 + 64) = v3;
  sub_18AF17DC8(v4, v6, v5, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t _s5EventOwet(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 65))
    {
      int v3 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *(void *)(a1 + 48) >> 1;
      if (v2 > 0x80000000) {
        int v3 = ~v2;
      }
      else {
        int v3 = -1;
      }
    }
  }
  else
  {
    int v3 = -1;
  }
  return (v3 + 1);
}

double _s5EventOwst(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 56) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(unsigned char *)(a1 + 64) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 65) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(void *)(a1 + 48) = 2 * -a2;
      *(void *)(a1 + 56) = 0;
      *(unsigned char *)(a1 + 64) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_18AF7590C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64) >> 4;
}

uint64_t sub_18AF75918(uint64_t result)
{
  *(unsigned char *)(result + 64) &= 0xFu;
  return result;
}

uint64_t sub_18AF75928(uint64_t result, char a2)
{
  char v2 = *(unsigned char *)(result + 64) & 1 | (16 * a2);
  *(void *)(result + 48) &= 1uLL;
  *(unsigned char *)(result + 64) = v2;
  return result;
}

void type metadata accessor for CKSyncEngine.Event()
{
}

uint64_t *_s5StateC13SerializationVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_18AF5F6FC(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t _s5StateC13SerializationVwxx(uint64_t a1)
{
  return sub_18AF5AF68(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *_s5StateC13SerializationVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_18AF5F6FC(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_18AF5AF68(v5, v6);
  return a1;
}

__n128 _s5StateC13SerializationVwtk(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t *_s5StateC13SerializationVwta(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_18AF5AF68(v3, v4);
  return a1;
}

uint64_t _s5StateC13SerializationVwet(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xD && *(unsigned char *)(a1 + 16))
    {
      unsigned int v2 = *(_DWORD *)a1 + 12;
    }
    else
    {
      unsigned int v2 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
      if (v2 >= 0xC) {
        unsigned int v2 = -1;
      }
    }
  }
  else
  {
    unsigned int v2 = -1;
  }
  return v2 + 1;
}

uint64_t _s5StateC13SerializationVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)__n128 result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

void type metadata accessor for CKSyncEngine.Event.StateUpdate()
{
}

__n128 _s5EventO13AccountChangeV10ChangeTypeOwtk(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

void type metadata accessor for CKSyncEngine.Event.AccountChange()
{
}

void _s5EventO13AccountChangeV10ChangeTypeOwxx(uint64_t a1)
{
}

uint64_t _s5EventO13AccountChangeV10ChangeTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  sub_18AF34130(a1, a2);
  *(void *)uint64_t v2 = v3;
  *(void *)(v2 + 8) = v4;
  *(unsigned char *)(v2 + 16) = v5;
  return v2;
}

uint64_t _s5EventO13AccountChangeV10ChangeTypeOwca_0(uint64_t a1, uint64_t a2)
{
  sub_18AF34130(a1, a2);
  unint64_t v6 = *(void **)v2;
  uint64_t v7 = *(void **)(v2 + 8);
  *(void *)uint64_t v2 = v3;
  *(void *)(v2 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(v2 + 16);
  *(unsigned char *)(v2 + 16) = v5;
  sub_18AF74A88(v6, v7, v8);
  return v2;
}

uint64_t _s5EventO13AccountChangeV10ChangeTypeOwta_0(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_18AF74A88(v4, v5, v6);
  return a1;
}

uint64_t _s5EventO13AccountChangeV10ChangeTypeOwet_0(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t _s5EventO13AccountChangeV10ChangeTypeOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_18AF75C58(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_18AF75C60(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

void type metadata accessor for CKSyncEngine.Event.AccountChange.ChangeType()
{
}

uint64_t _s5EventO22FetchedDatabaseChangesVwxx()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s5EventO22FetchedDatabaseChangesVwCP_0(uint64_t *a1, uint64_t *a2)
{
  sub_18AF26314(a1, a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v2;
}

void *_s5EventO22FetchedDatabaseChangesVwca(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *_s5EventO22FetchedDatabaseChangesVwta(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for CKSyncEngine.Event.FetchedDatabaseChanges()
{
}

uint64_t _s5EventO24FetchedRecordZoneChangesVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s5EventO24FetchedRecordZoneChangesVwCP_0(uint64_t *a1, uint64_t *a2)
{
  sub_18AF26314(a1, a2);
  *(void *)(v2 + 16) = *(void *)(v3 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v2;
}

void *_s5EventO24FetchedRecordZoneChangesVwca(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s5EventO24FetchedRecordZoneChangesVwta(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for CKSyncEngine.Event.FetchedRecordZoneChanges()
{
}

__n128 _s5EventO19SentDatabaseChangesVwtk(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for CKSyncEngine.Event.SentDatabaseChanges()
{
}

void *_s5EventO19SentDatabaseChangesV14FailedZoneSaveVwCP(void *a1, uint64_t a2)
{
  long long v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void _s5EventO19SentDatabaseChangesV14FailedZoneSaveVwxx(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
}

uint64_t _s5EventO19SentDatabaseChangesV14FailedZoneSaveVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 8);
  unsigned __int8 v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  return a1;
}

uint64_t _s5EventO19SentDatabaseChangesV14FailedZoneSaveVwta(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

void type metadata accessor for CKSyncEngine.Event.SentDatabaseChanges.FailedZoneSave()
{
}

uint64_t _s5EventO19SentDatabaseChangesVwxx_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s5EventO19SentDatabaseChangesVwcp_0(uint64_t *a1, uint64_t *a2)
{
  sub_18AF26314(a1, a2);
  uint64_t v4 = *(void *)(v3 + 24);
  *(void *)(v2 + 16) = *(void *)(v3 + 16);
  *(void *)(v2 + 24) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v2;
}

void *_s5EventO19SentDatabaseChangesVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *_s5EventO19SentDatabaseChangesVwta_0(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s5EventO19SentDatabaseChangesVwet_0(uint64_t *a1, int a2)
{
  if (!a2) {
    return sub_18AF38540(-1);
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32))
  {
    LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
  }
  else
  {
    uint64_t v2 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v2) = -1;
    }
  }
  return sub_18AF38540(v2);
}

uint64_t sub_18AF76200(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      return sub_18AF30E10(result);
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
      return (uint64_t)sub_18AF37DB4((void *)result, a2);
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      return (uint64_t)sub_18AF37DB4((void *)result, a2);
    }
  }
  return result;
}

void type metadata accessor for CKSyncEngine.Event.SentRecordZoneChanges()
{
}

void type metadata accessor for CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave()
{
}

void type metadata accessor for CKSyncEngine.Event.WillFetchChanges()
{
}

void type metadata accessor for CKSyncEngine.Event.WillFetchRecordZoneChanges()
{
}

uint64_t _s5EventO25DidFetchRecordZoneChangesVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void **)(a1 + 8);
  unsigned __int8 v8 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v8;
  id v9 = v8;

  return a1;
}

uint64_t _s5EventO22FetchedDatabaseChangesVwet_0(uint64_t *a1, int a2)
{
  if (!a2) {
    return sub_18AF38540(-1);
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16))
  {
    LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
  }
  else
  {
    uint64_t v2 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v2) = -1;
    }
  }
  return sub_18AF38540(v2);
}

void *sub_18AF7630C(void *result, int a2, int a3)
{
  if (a2 < 0)
  {
    *__n128 result = a2 ^ 0x80000000;
    result[1] = 0;
    if (a3 < 0) {
      *((unsigned char *)result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
      return sub_18AF37DB4(result, a2);
    }
    *((unsigned char *)result + 16) = 0;
    if (a2) {
      return sub_18AF37DB4(result, a2);
    }
  }
  return result;
}

void type metadata accessor for CKSyncEngine.Event.DidFetchRecordZoneChanges()
{
}

uint64_t _s19FetchChangesContextVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s5EventO16WillFetchChangesVwcp_0(uint64_t a1, uint64_t a2)
{
  sub_18AF475FC(a1, a2);
  id v5 = *(void **)(v3 + 24);
  uint64_t v4 = *(void *)(v3 + 32);
  *(void *)(v2 + 24) = v5;
  *(void *)(v2 + 32) = v4;
  *(void *)(v2 + 40) = *(void *)(v3 + 40);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(v3 + 48);
  *(unsigned char *)(v2 + 64) = *(unsigned char *)(v3 + 64);
  swift_bridgeObjectRetain();
  id v6 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t _s5EventO16WillFetchChangesVwca_0(uint64_t a1, uint64_t a2)
{
  sub_18AF339F8(a1, a2);
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)v2[3];
  id v5 = (void *)v3[3];
  uint64_t v3[3] = v4;
  id v6 = v4;

  v3[4] = v2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v3[5] = v2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return sub_18AF33B58();
}

uint64_t _s5EventO16WillFetchChangesVwta_0(uint64_t a1, uint64_t a2)
{
  sub_18AF338E0(a1, a2);

  *(_OWORD *)(v3 + 24) = *(_OWORD *)(v2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(v3 + 40) = *(void *)(v2 + 40);
  swift_bridgeObjectRelease();
  return sub_18AF33B58();
}

uint64_t _s5EventO16WillFetchChangesVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return sub_18AF38540(-1);
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 65))
  {
    LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
  }
  else
  {
    unint64_t v2 = *(void *)(a1 + 24);
    if (v2 >= 0xFFFFFFFF) {
      LODWORD(v2) = -1;
    }
  }
  return sub_18AF38540(v2);
}

uint64_t sub_18AF764FC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
      return sub_18AF309B0(result, a2);
    }
    *(unsigned char *)(result + 65) = 0;
    if (a2) {
      return sub_18AF309B0(result, a2);
    }
  }
  return result;
}

void type metadata accessor for CKSyncEngine.Event.DidFetchChanges()
{
}

void type metadata accessor for CKSyncEngine.Event.WillSendChanges()
{
}

void _s18SendChangesContextVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void **)(a1 + 24);
}

uint64_t _s5EventO15WillSendChangesVwcp_0(uint64_t a1, uint64_t a2)
{
  sub_18AF475FC(a1, a2);
  uint64_t v4 = *(void **)(v3 + 24);
  *(void *)(v2 + 24) = v4;
  swift_bridgeObjectRetain();
  id v5 = v4;
  return v2;
}

uint64_t _s5EventO15WillSendChangesVwca_0(uint64_t a1, uint64_t a2)
{
  sub_18AF339F8(a1, a2);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(v2 + 24);
  id v5 = *(void **)(v3 + 24);
  *(void *)(v3 + 24) = v4;
  id v6 = v4;

  return v3;
}

uint64_t _s5EventO15WillSendChangesVwta_0(uint64_t a1, uint64_t a2)
{
  sub_18AF338E0(a1, a2);
  uint64_t v4 = *(void **)(v3 + 24);
  *(void *)(v3 + 24) = *(void *)(v2 + 24);

  return v3;
}

uint64_t _s5EventO15WillSendChangesVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return sub_18AF38540(-1);
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32))
  {
    LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
  }
  else
  {
    unint64_t v2 = *(void *)(a1 + 24);
    if (v2 >= 0xFFFFFFFF) {
      LODWORD(v2) = -1;
    }
  }
  return sub_18AF38540(v2);
}

uint64_t sub_18AF7669C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      return sub_18AF30E10(result);
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
      return sub_18AF309B0(result, a2);
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      return sub_18AF309B0(result, a2);
    }
  }
  return result;
}

void type metadata accessor for CKSyncEngine.Event.DidSendChanges()
{
}

void sub_18AF76714()
{
  uint64_t v1 = 0x6470556574617453;
  unint64_t v2 = 0xEB00000000657461;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t sub_18AF76740()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

void (*CKFetchWebAuthTokenOperation.fetchWebAuthTokenResultBlock.getter())(void *a1, uint64_t a2, char a3)
{
  __n128 result = (void (*)(void *, uint64_t, char))objc_msgSend(v0, sel_fetchWebAuthTokenCompletionBlock);
  if (result)
  {
    unint64_t v2 = result;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = sub_18AF76AFC;
    *(void *)(v4 + 24) = v3;
    return sub_18AF76B98;
  }
  return result;
}

uint64_t sub_18AF76800@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t result = (uint64_t)CKFetchWebAuthTokenOperation.fetchWebAuthTokenResultBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    id v6 = sub_18AF76EC8;
  }
  else
  {
    id v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

id sub_18AF76870(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AF76E50;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18AF42F30(v1);
  return CKFetchWebAuthTokenOperation.fetchWebAuthTokenResultBlock.setter((uint64_t)v4, v3);
}

id CKFetchWebAuthTokenOperation.fetchWebAuthTokenResultBlock.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    v9[4] = sub_18AF76CE4;
    v9[5] = v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    long long v9[2] = sub_18AF76CEC;
    v9[3] = &unk_1ED7F0F50;
    uint64_t v7 = _Block_copy(v9);
    swift_retain();
    swift_release();
    objc_msgSend(v3, sel_setFetchWebAuthTokenCompletionBlock_, v7);
    _Block_release(v7);
    return (id)sub_18AF1E758(a1);
  }
  else
  {
    return objc_msgSend(v2, sel_setFetchWebAuthTokenCompletionBlock_, 0);
  }
}

void sub_18AF76A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    uint64_t v6 = (void *)MEMORY[0x18C128F60]();
    if (a3)
    {
LABEL_3:
      uint64_t v7 = _convertErrorToNSError(_:)();
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v6 = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t v7 = 0;
LABEL_6:
  id v8 = (id)v7;
  (*(void (**)(uint64_t, void *))(a4 + 16))(a4, v6);
}

uint64_t sub_18AF76AC4()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_18AF76AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_18AF76A34(a1, a2, a3, *(void *)(v3 + 16));
}

void sub_18AF76B04(id a1, uint64_t a2, char a3, void (*a4)(id, uint64_t, id))
{
  if (a3)
  {
    id v7 = a1;
    a4(0, 0, a1);
    sub_18AF76EFC(a1, a2, 1);
  }
  else
  {
    a4(a1, a2, 0);
  }
}

void sub_18AF76B98(void *a1, uint64_t a2, char a3)
{
  sub_18AF76B04(a1, a2, a3 & 1, *(void (**)(id, uint64_t, id))(v3 + 16));
}

void sub_18AF76BA4(void *a1, uint64_t a2, void *a3, void (*a4)(void *, uint64_t, uint64_t))
{
  if (a3)
  {
    swift_getErrorValue();
    id v8 = a3;
    if (!Error.ckIsPartialError.getter())
    {
      id v9 = a3;
      a4(a3, 0, 1);

      return;
    }
  }
  if (a2)
  {
    a4(a1, a2, 0);
  }
  else
  {
    type metadata accessor for CKError(0);
    sub_18AF8EAA4(MEMORY[0x1E4FBC860]);
    sub_18AF62B54();
    _BridgedStoredNSError.init(_:userInfo:)();
    a4(v10, 0, 1);
  }
}

void sub_18AF76CE4(void *a1, uint64_t a2, void *a3)
{
  sub_18AF76BA4(a1, a2, a3, *(void (**)(void *, uint64_t, uint64_t))(v3 + 16));
}

uint64_t sub_18AF76CEC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  swift_retain();
  id v8 = a3;
  v4(v5, v7, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

id (*CKFetchWebAuthTokenOperation.fetchWebAuthTokenResultBlock.modify(void (**a1)(void *a1, uint64_t a2, char a3)))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CKFetchWebAuthTokenOperation.fetchWebAuthTokenResultBlock.getter();
  a1[1] = v3;
  return sub_18AF76DCC;
}

id sub_18AF76DCC(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if ((a2 & 1) == 0) {
    return CKFetchWebAuthTokenOperation.fetchWebAuthTokenResultBlock.setter(*a1, v3);
  }
  sub_18AF42F30(*a1);
  CKFetchWebAuthTokenOperation.fetchWebAuthTokenResultBlock.setter(v2, v3);

  return (id)sub_18AF1E758(v2);
}

uint64_t sub_18AF76E50(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = *(uint64_t (**)(void *))(v3 + 16);
  v6[0] = a1;
  v6[1] = a2;
  char v7 = a3 & 1;
  return v4(v6);
}

uint64_t sub_18AF76E90()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_18AF76EC8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(v1 + 16))(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

void sub_18AF76EFC(void *a1, uint64_t a2, char a3)
{
  if (a3) {

  }
  else {
    swift_bridgeObjectRelease();
  }
}

void __swiftcall CKRecordZoneSubscription.init(zoneID:subscriptionID:)(CKRecordZoneSubscription *__return_ptr retstr, CKRecordZoneID *zoneID, Swift::String subscriptionID)
{
  object = subscriptionID._object;
  uint64_t countAndFlagsBits = subscriptionID._countAndFlagsBits;
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  char v7 = (void *)MEMORY[0x18C128F60](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  objc_msgSend(v6, sel_initWithZoneID_subscriptionID_, zoneID, v7);
}

uint64_t CKRecordZoneSubscription.recordType.getter()
{
  return sub_18AF721F4(v0);
}

void sub_18AF76FA0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  CKRecordZoneSubscription.recordType.setter(v1, v2);
}

void CKRecordZoneSubscription.recordType.setter(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = (id)MEMORY[0x18C128F60]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v3 = 0;
  }
  objc_msgSend(v2, sel_setRecordType_, v3);
}

void (*CKRecordZoneSubscription.recordType.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t)v1;
  *a1 = sub_18AF721F4(v1);
  a1[1] = v3;
  return sub_18AF77098;
}

void sub_18AF77098(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (a2)
  {
    swift_bridgeObjectRetain();
    CKRecordZoneSubscription.recordType.setter(v3, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    CKRecordZoneSubscription.recordType.setter(*a1, v2);
  }
}

uint64_t sub_18AF7710C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CKRecordZoneSubscription.recordType.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t CKNotificationInfo.alertLocalizationArgs.getter()
{
  return sub_18AF778BC(v0, (SEL *)&selRef_alertLocalizationArgs);
}

void sub_18AF77160()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  CKNotificationInfo.alertLocalizationArgs.setter(v0);
}

void CKNotificationInfo.alertLocalizationArgs.setter(uint64_t a1)
{
}

uint64_t (*CKNotificationInfo.alertLocalizationArgs.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_18AF39420(a1);
  *uint64_t v1 = sub_18AF778BC(v2, (SEL *)&selRef_alertLocalizationArgs);
  return sub_18AF771E8;
}

uint64_t sub_18AF771E8(uint64_t *a1, char a2)
{
  return sub_18AF772C4(a1, a2, (uint64_t (*)(uint64_t))CKNotificationInfo.alertLocalizationArgs.setter);
}

uint64_t CKNotificationInfo.titleLocalizationArgs.getter()
{
  return sub_18AF778BC(v0, (SEL *)&selRef_titleLocalizationArgs);
}

void sub_18AF77224()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  CKNotificationInfo.titleLocalizationArgs.setter(v0);
}

void CKNotificationInfo.titleLocalizationArgs.setter(uint64_t a1)
{
}

uint64_t (*CKNotificationInfo.titleLocalizationArgs.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_18AF39420(a1);
  *uint64_t v1 = sub_18AF778BC(v2, (SEL *)&selRef_titleLocalizationArgs);
  return sub_18AF772AC;
}

uint64_t sub_18AF772AC(uint64_t *a1, char a2)
{
  return sub_18AF772C4(a1, a2, (uint64_t (*)(uint64_t))CKNotificationInfo.titleLocalizationArgs.setter);
}

uint64_t sub_18AF772C4(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t))
{
  if ((a2 & 1) == 0) {
    return a3(*a1);
  }
  uint64_t v4 = swift_bridgeObjectRetain();
  a3(v4);

  return swift_bridgeObjectRelease();
}

uint64_t CKNotificationInfo.subtitleLocalizationArgs.getter()
{
  return sub_18AF778BC(v0, (SEL *)&selRef_subtitleLocalizationArgs);
}

void sub_18AF77358()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  CKNotificationInfo.subtitleLocalizationArgs.setter(v0);
}

void CKNotificationInfo.subtitleLocalizationArgs.setter(uint64_t a1)
{
}

uint64_t (*CKNotificationInfo.subtitleLocalizationArgs.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_18AF39420(a1);
  *uint64_t v1 = sub_18AF778BC(v2, (SEL *)&selRef_subtitleLocalizationArgs);
  return sub_18AF773E0;
}

uint64_t sub_18AF773E0(uint64_t *a1, char a2)
{
  return sub_18AF772C4(a1, a2, (uint64_t (*)(uint64_t))CKNotificationInfo.subtitleLocalizationArgs.setter);
}

uint64_t CKNotificationInfo.desiredKeys.getter()
{
  return sub_18AF778BC(v0, (SEL *)&selRef_desiredKeys);
}

void sub_18AF7741C()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  CKNotificationInfo.desiredKeys.setter(v0);
}

void CKNotificationInfo.desiredKeys.setter(uint64_t a1)
{
}

void sub_18AF77454(uint64_t a1, SEL *a2)
{
  if (a1)
  {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    Class isa = 0;
  }
  objc_msgSend(v2, *a2, isa);
}

uint64_t (*CKNotificationInfo.desiredKeys.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  sub_18AF39420(a1);
  *uint64_t v1 = sub_18AF778BC(v2, (SEL *)&selRef_desiredKeys);
  return sub_18AF77520;
}

uint64_t sub_18AF77520(uint64_t *a1, char a2)
{
  return sub_18AF772C4(a1, a2, (uint64_t (*)(uint64_t))CKNotificationInfo.desiredKeys.setter);
}

void __swiftcall CKNotificationInfo.init(alertBody:alertLocalizationKey:alertLocalizationArgs:title:titleLocalizationKey:titleLocalizationArgs:subtitle:subtitleLocalizationKey:subtitleLocalizationArgs:alertActionLocalizationKey:alertLaunchImage:soundName:desiredKeys:shouldBadge:shouldSendContentAvailable:shouldSendMutableContent:category:collapseIDKey:)(CKNotificationInfo *__return_ptr retstr, Swift::String_optional alertBody, Swift::String_optional alertLocalizationKey, Swift::OpaquePointer alertLocalizationArgs, Swift::String_optional title, Swift::String_optional titleLocalizationKey, Swift::OpaquePointer titleLocalizationArgs, Swift::String_optional subtitle, Swift::String_optional subtitleLocalizationKey, Swift::OpaquePointer subtitleLocalizationArgs, Swift::String_optional alertActionLocalizationKey, Swift::String_optional alertLaunchImage, Swift::String_optional soundName, Swift::OpaquePointer desiredKeys, Swift::Bool shouldBadge, Swift::Bool shouldSendContentAvailable, Swift::Bool shouldSendMutableContent, Swift::String_optional category, Swift::String_optional collapseIDKey)
{
  uint64_t countAndFlagsBits = titleLocalizationKey.value._countAndFlagsBits;
  object = title.value._object;
  uint64_t v21 = title.value._countAndFlagsBits;
  uint64_t v23 = alertLocalizationKey.value._object;
  uint64_t v24 = alertLocalizationKey.value._countAndFlagsBits;
  uint64_t v25 = alertBody.value._object;
  uint64_t v26 = alertBody.value._countAndFlagsBits;
  id v27 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  id v28 = v27;
  if (v25)
  {
    unint64_t v29 = (void *)MEMORY[0x18C128F60](v26, v25);
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v29 = 0;
  }
  objc_msgSend(v27, sel_setAlertBody_, v29);

  if (v23)
  {
    uint64_t v30 = (void *)MEMORY[0x18C128F60](v24, v23);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v30 = 0;
  }
  objc_msgSend(v27, sel_setAlertLocalizationKey_, v30);

  CKNotificationInfo.alertLocalizationArgs.setter((uint64_t)alertLocalizationArgs._rawValue);
  if (object)
  {
    id v32 = (void *)MEMORY[0x18C128F60](v21, object);
    uint64_t v31 = swift_bridgeObjectRelease();
  }
  else
  {
    id v32 = 0;
  }
  sub_18AF38978(v31, sel_setTitle_);

  if (titleLocalizationKey.value._object)
  {
    uint64_t v34 = (void *)MEMORY[0x18C128F60](countAndFlagsBits, titleLocalizationKey.value._object);
    uint64_t v33 = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v34 = 0;
  }
  sub_18AF38978(v33, sel_setTitleLocalizationKey_);

  CKNotificationInfo.titleLocalizationArgs.setter((uint64_t)titleLocalizationArgs._rawValue);
  if (subtitle.value._object)
  {
    uint64_t v36 = (void *)MEMORY[0x18C128F60](subtitle.value._countAndFlagsBits, subtitle.value._object);
    uint64_t v35 = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v36 = 0;
  }
  sub_18AF38978(v35, sel_setSubtitle_);

  if (subtitleLocalizationKey.value._object)
  {
    id v38 = (void *)MEMORY[0x18C128F60](subtitleLocalizationKey.value._countAndFlagsBits, subtitleLocalizationKey.value._object);
    uint64_t v37 = swift_bridgeObjectRelease();
  }
  else
  {
    id v38 = 0;
  }
  sub_18AF38978(v37, sel_setSubtitleLocalizationKey_);

  CKNotificationInfo.subtitleLocalizationArgs.setter((uint64_t)subtitleLocalizationArgs._rawValue);
  if (alertActionLocalizationKey.value._object)
  {
    unint64_t v39 = (void *)MEMORY[0x18C128F60](alertActionLocalizationKey.value._countAndFlagsBits, alertActionLocalizationKey.value._object);
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v39 = 0;
  }
  objc_msgSend(v27, sel_setAlertActionLocalizationKey_, v39);

  if (alertLaunchImage.value._object)
  {
    unint64_t v40 = (void *)MEMORY[0x18C128F60](alertLaunchImage.value._countAndFlagsBits, alertLaunchImage.value._object);
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v40 = 0;
  }
  objc_msgSend(v27, sel_setAlertLaunchImage_, v40);

  if (soundName.value._object)
  {
    id v41 = (void *)MEMORY[0x18C128F60](soundName.value._countAndFlagsBits, soundName.value._object);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v41 = 0;
  }
  objc_msgSend(v27, sel_setSoundName_, v41);

  CKNotificationInfo.desiredKeys.setter((uint64_t)desiredKeys._rawValue);
  objc_msgSend(v27, sel_setShouldBadge_, shouldBadge);
  objc_msgSend(v27, sel_setShouldSendContentAvailable_, shouldSendContentAvailable);
  objc_msgSend(v27, sel_setShouldSendMutableContent_, shouldSendMutableContent);
  if (category.value._object)
  {
    unint64_t v42 = (void *)MEMORY[0x18C128F60](category.value._countAndFlagsBits, category.value._object);
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v42 = 0;
  }
  objc_msgSend(v27, sel_setCategory_, v42);

  if (collapseIDKey.value._object)
  {
    id v43 = (void *)MEMORY[0x18C128F60](collapseIDKey.value._countAndFlagsBits, collapseIDKey.value._object);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v43 = 0;
  }
  objc_msgSend(v27, sel_setCollapseIDKey_, v43);
}

uint64_t sub_18AF778BC(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t sub_18AF77910()
{
  sub_18AF16D80();
  uint64_t result = CKNotificationInfo.alertLocalizationArgs.getter();
  uint64_t *v0 = result;
  return result;
}

uint64_t sub_18AF7793C()
{
  sub_18AF16D80();
  uint64_t result = CKNotificationInfo.titleLocalizationArgs.getter();
  uint64_t *v0 = result;
  return result;
}

uint64_t sub_18AF77968()
{
  sub_18AF16D80();
  uint64_t result = CKNotificationInfo.subtitleLocalizationArgs.getter();
  uint64_t *v0 = result;
  return result;
}

uint64_t sub_18AF77994()
{
  sub_18AF16D80();
  uint64_t result = CKNotificationInfo.desiredKeys.getter();
  uint64_t *v0 = result;
  return result;
}

void *sub_18AF779C0(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t *), uint64_t a3)
{
  sub_18AF87408(v45);
  sub_18AF87630(v46, a1, a2, a3);
  uint64_t v7 = sub_18AF87658(v45, v46, a1, a2, a3);
  sub_18AF7E214((uint64_t)v46);
  sub_18AF7E214((uint64_t)v45);
  uint64_t v8 = MEMORY[0x1E4FBC860];
  if (!v7) {
    return (void *)v8;
  }
  uint64_t v59 = MEMORY[0x1E4FBC860];
  sub_18AF5B168();
  uint64_t v8 = v59;
  uint64_t result = sub_18AF87408(v47);
  if ((v7 & 0x8000000000000000) == 0)
  {
    uint64_t v31 = v3;
    unint64_t v10 = v47[0];
    if ((v47[0] & 0x8000000000000000) != 0 || v47[0] >= 1 << *(unsigned char *)(a1 + 32))
    {
LABEL_19:
      __break(1u);
    }
    else
    {
      int v11 = v48;
      uint64_t v12 = v47[1];
      uint64_t v34 = a3;
      uint64_t v35 = a1 + 64;
      unint64_t v13 = v49;
      int v14 = v50;
      uint64_t v32 = a1;
      uint64_t v33 = (uint64_t)a2;
      while (((*(void *)(v35 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
      {
        if (*(_DWORD *)(a1 + 36) != v12) {
          goto LABEL_21;
        }
        uint64_t v36 = v12;
        HIDWORD(v37) = v11;
        uint64_t v15 = v8;
        uint64_t v38 = v7;
        uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
        uint64_t v17 = v16[1];
        uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8 * v10);
        uint64_t v41 = *v16;
        uint64_t v42 = v17;
        uint64_t v43 = v18;
        HIDWORD(v40) = v14;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        a2(&v44, &v41);
        swift_bridgeObjectRelease();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        if ((v40 & 0x100000000) != 0) {
          goto LABEL_25;
        }
        if ((v13 & 0x8000000000000000) != 0) {
          goto LABEL_22;
        }
        if (v13 >= *(void *)(v44 + 16)) {
          goto LABEL_23;
        }
        uint64_t v8 = v15;
        uint64_t v19 = (void *)(v44 + 32 * v13);
        uint64_t v20 = v19[4];
        uint64_t v21 = v19[5];
        uint64_t v22 = v19[6];
        uint64_t v23 = v19[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v59 = v15;
        unint64_t v28 = *(void *)(v15 + 16);
        if (v28 >= *(void *)(v8 + 24) >> 1)
        {
          sub_18AF5B168();
          uint64_t v8 = v59;
        }
        *(void *)(v8 + 16) = v28 + 1;
        unint64_t v29 = (void *)(v8 + 32 * v28);
        v29[4] = v20;
        void v29[5] = v21;
        v29[6] = v22;
        v29[7] = v23;
        v55[0] = v10;
        v55[1] = v36;
        char v56 = BYTE4(v37) & 1;
        unint64_t v57 = v13;
        char v58 = 0;
        a1 = v32;
        a2 = (void (*)(uint64_t *__return_ptr, uint64_t *))v33;
        uint64_t result = (void *)sub_18AF87EB4((int)v55, v32, v33, v34, v24, v25, v26, v27, v30, v31, v32, v33, v34, v35, v36, v37, v38, v40, v41,
                             v42,
                             v43,
                             v44,
                             v45[0],
                             v45[1],
                             v45[2],
                             v45[3],
                             v45[4],
                             v46[0],
                             v46[1],
                             v46[2]);
        uint64_t v7 = v39 - 1;
        if (v39 == 1)
        {
          sub_18AF7E214((uint64_t)v51);
          return (void *)v8;
        }
        unint64_t v10 = v51[0];
        if ((v51[0] & 0x8000000000000000) == 0)
        {
          uint64_t v12 = v51[1];
          int v11 = v52;
          unint64_t v13 = v53;
          int v14 = v54;
          if (v51[0] < 1 << *(unsigned char *)(a1 + 32)) {
            continue;
          }
        }
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

void *sub_18AF77C98(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t *), uint64_t a3)
{
  sub_18AF87408(v45);
  sub_18AF87630(v46, a1, a2, a3);
  uint64_t v7 = sub_18AF87658(v45, v46, a1, a2, a3);
  sub_18AF7E214((uint64_t)v46);
  sub_18AF7E214((uint64_t)v45);
  uint64_t v8 = MEMORY[0x1E4FBC860];
  if (!v7) {
    return (void *)v8;
  }
  uint64_t v59 = MEMORY[0x1E4FBC860];
  sub_18AF5B168();
  uint64_t v8 = v59;
  uint64_t result = sub_18AF87408(v47);
  if ((v7 & 0x8000000000000000) == 0)
  {
    uint64_t v31 = v3;
    unint64_t v10 = v47[0];
    if ((v47[0] & 0x8000000000000000) != 0 || v47[0] >= 1 << *(unsigned char *)(a1 + 32))
    {
LABEL_19:
      __break(1u);
    }
    else
    {
      int v11 = v48;
      uint64_t v12 = v47[1];
      uint64_t v34 = a3;
      uint64_t v35 = a1 + 64;
      unint64_t v13 = v49;
      int v14 = v50;
      uint64_t v32 = a1;
      uint64_t v33 = (uint64_t)a2;
      while (((*(void *)(v35 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
      {
        if (*(_DWORD *)(a1 + 36) != v12) {
          goto LABEL_21;
        }
        uint64_t v36 = v12;
        HIDWORD(v37) = v11;
        uint64_t v15 = v8;
        uint64_t v38 = v7;
        uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
        uint64_t v17 = v16[1];
        uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8 * v10);
        uint64_t v41 = *v16;
        uint64_t v42 = v17;
        uint64_t v43 = v18;
        HIDWORD(v40) = v14;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        a2(&v44, &v41);
        swift_bridgeObjectRelease();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        if ((v40 & 0x100000000) != 0) {
          goto LABEL_25;
        }
        if ((v13 & 0x8000000000000000) != 0) {
          goto LABEL_22;
        }
        if (v13 >= *(void *)(v44 + 16)) {
          goto LABEL_23;
        }
        uint64_t v8 = v15;
        uint64_t v19 = (void *)(v44 + 32 * v13);
        uint64_t v20 = v19[4];
        uint64_t v21 = v19[5];
        uint64_t v22 = v19[6];
        uint64_t v23 = v19[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v59 = v15;
        unint64_t v28 = *(void *)(v15 + 16);
        if (v28 >= *(void *)(v8 + 24) >> 1)
        {
          sub_18AF5B168();
          uint64_t v8 = v59;
        }
        *(void *)(v8 + 16) = v28 + 1;
        unint64_t v29 = (void *)(v8 + 32 * v28);
        v29[4] = v20;
        void v29[5] = v21;
        v29[6] = v22;
        v29[7] = v23;
        v55[0] = v10;
        v55[1] = v36;
        char v56 = BYTE4(v37) & 1;
        unint64_t v57 = v13;
        char v58 = 0;
        a1 = v32;
        a2 = (void (*)(uint64_t *__return_ptr, uint64_t *))v33;
        uint64_t result = (void *)sub_18AF87D30((int)v55, v32, v33, v34, v24, v25, v26, v27, v30, v31, v32, v33, v34, v35, v36, v37, v38, v40, v41,
                             v42,
                             v43,
                             v44,
                             v45[0],
                             v45[1],
                             v45[2],
                             v45[3],
                             v45[4],
                             v46[0],
                             v46[1],
                             v46[2]);
        uint64_t v7 = v39 - 1;
        if (v39 == 1)
        {
          sub_18AF7E214((uint64_t)v51);
          return (void *)v8;
        }
        unint64_t v10 = v51[0];
        if ((v51[0] & 0x8000000000000000) == 0)
        {
          uint64_t v12 = v51[1];
          int v11 = v52;
          unint64_t v13 = v53;
          int v14 = v54;
          if (v51[0] < 1 << *(unsigned char *)(a1 + 32)) {
            continue;
          }
        }
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

void *sub_18AF77F70(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t *), uint64_t a3)
{
  sub_18AF87408(v45);
  sub_18AF87630(v46, a1, a2, a3);
  uint64_t v7 = sub_18AF87658(v45, v46, a1, a2, a3);
  sub_18AF7E214((uint64_t)v46);
  sub_18AF7E214((uint64_t)v45);
  uint64_t v8 = MEMORY[0x1E4FBC860];
  if (!v7) {
    return (void *)v8;
  }
  uint64_t v59 = MEMORY[0x1E4FBC860];
  sub_18AF5B168();
  uint64_t v8 = v59;
  uint64_t result = sub_18AF87408(v47);
  if ((v7 & 0x8000000000000000) == 0)
  {
    uint64_t v31 = v3;
    unint64_t v10 = v47[0];
    if ((v47[0] & 0x8000000000000000) != 0 || v47[0] >= 1 << *(unsigned char *)(a1 + 32))
    {
LABEL_19:
      __break(1u);
    }
    else
    {
      int v11 = v48;
      uint64_t v12 = v47[1];
      uint64_t v34 = a3;
      uint64_t v35 = a1 + 64;
      unint64_t v13 = v49;
      int v14 = v50;
      uint64_t v32 = a1;
      uint64_t v33 = (uint64_t)a2;
      while (((*(void *)(v35 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
      {
        if (*(_DWORD *)(a1 + 36) != v12) {
          goto LABEL_21;
        }
        uint64_t v36 = v12;
        HIDWORD(v37) = v11;
        uint64_t v15 = v8;
        uint64_t v38 = v7;
        uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
        uint64_t v17 = v16[1];
        uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8 * v10);
        uint64_t v41 = *v16;
        uint64_t v42 = v17;
        uint64_t v43 = v18;
        HIDWORD(v40) = v14;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        a2(&v44, &v41);
        swift_bridgeObjectRelease();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        if ((v40 & 0x100000000) != 0) {
          goto LABEL_25;
        }
        if ((v13 & 0x8000000000000000) != 0) {
          goto LABEL_22;
        }
        if (v13 >= *(void *)(v44 + 16)) {
          goto LABEL_23;
        }
        uint64_t v8 = v15;
        uint64_t v19 = (void *)(v44 + 32 * v13);
        uint64_t v20 = v19[4];
        uint64_t v21 = v19[5];
        uint64_t v22 = v19[6];
        uint64_t v23 = v19[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v59 = v15;
        unint64_t v28 = *(void *)(v15 + 16);
        if (v28 >= *(void *)(v8 + 24) >> 1)
        {
          sub_18AF5B168();
          uint64_t v8 = v59;
        }
        *(void *)(v8 + 16) = v28 + 1;
        unint64_t v29 = (void *)(v8 + 32 * v28);
        v29[4] = v20;
        void v29[5] = v21;
        v29[6] = v22;
        v29[7] = v23;
        v55[0] = v10;
        v55[1] = v36;
        char v56 = BYTE4(v37) & 1;
        unint64_t v57 = v13;
        char v58 = 0;
        a1 = v32;
        a2 = (void (*)(uint64_t *__return_ptr, uint64_t *))v33;
        uint64_t result = (void *)sub_18AF87BAC((int)v55, v32, v33, v34, v24, v25, v26, v27, v30, v31, v32, v33, v34, v35, v36, v37, v38, v40, v41,
                             v42,
                             v43,
                             v44,
                             v45[0],
                             v45[1],
                             v45[2],
                             v45[3],
                             v45[4],
                             v46[0],
                             v46[1],
                             v46[2]);
        uint64_t v7 = v39 - 1;
        if (v39 == 1)
        {
          sub_18AF7E214((uint64_t)v51);
          return (void *)v8;
        }
        unint64_t v10 = v51[0];
        if ((v51[0] & 0x8000000000000000) == 0)
        {
          uint64_t v12 = v51[1];
          int v11 = v52;
          unint64_t v13 = v53;
          int v14 = v54;
          if (v51[0] < 1 << *(unsigned char *)(a1 + 32)) {
            continue;
          }
        }
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_18AF78248(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v34 = a5;
  uint64_t v35 = a8;
  uint64_t v44 = a1;
  uint64_t v45 = a2;
  uint64_t v33 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  id v46 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v39 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  int v11 = (char *)&v31 - v10;
  MEMORY[0x1F4188790](v12);
  int v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void *)(v15 - 8);
  uint64_t v37 = v15;
  MEMORY[0x1F4188790](v15);
  uint64_t v32 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v31 - v18;
  uint64_t v20 = dispatch thunk of Collection.count.getter();
  if (!v20) {
    return static Array._allocateUninitialized(_:)();
  }
  Swift::Int v21 = v20;
  uint64_t v49 = Array.init()();
  uint64_t v38 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v21);
  uint64_t v42 = a6;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v21 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v40 = (void (**)(char *))(v39 + 2);
    uint64_t v41 = v14;
    ++v39;
    while (1)
    {
      uint64_t v23 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      int v24 = v11;
      int v25 = v11;
      uint64_t v26 = AssociatedTypeWitness;
      (*v40)(v24);
      v23(v48, 0);
      uint64_t v27 = v47;
      v44(v25, v46);
      if (v27) {
        break;
      }
      uint64_t v47 = 0;
      (*v39)(v25, v26);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      --v21;
      int v11 = v25;
      if (!v21)
      {
        uint64_t v28 = v36;
        uint64_t v29 = v37;
        uint64_t v30 = v32;
        (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v32, v19, v37);
        _expectEnd<A>(of:is:)();
        (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v29);
        return v49;
      }
    }
    (*v39)(v25, v26);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v19, v37);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v33 + 32))(v35, v46, v34);
  }
  return result;
}

Swift::String __swiftcall String.truncated(maxByteCount:)(Swift::Int maxByteCount)
{
  if (maxByteCount < 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (void *)0xE000000000000000;
  }
  else
  {
    unint64_t v3 = v2;
    uint64_t v4 = v1;
    Swift::Int v5 = maxByteCount;
    while (1)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = sub_18AF5A52C(v5, v4, v3);
      uint64_t v7 = MEMORY[0x18C129130](v6);
      if (v8) {
        break;
      }
      if (v5-- <= 1)
      {
        uint64_t v7 = 0;
        uint64_t v8 = (void *)0xE000000000000000;
        break;
      }
    }
  }
  result._object = v8;
  result._uint64_t countAndFlagsBits = v7;
  return result;
}

uint64_t CKFeatureNameOrValueMaxUTF8Bytes.getter()
{
  return 128;
}

void sub_18AF7873C()
{
  sub_18AF22D38();
  sub_18AF35624();
  BOOL v6 = v6 && v4 == v5;
  if (v6 || (sub_18AF40FB8() & 1) != 0)
  {
    if (v3 == v1 && v2 == v0)
    {
      sub_18AF3387C();
      return;
    }
    sub_18AF3116C();
  }
  else
  {
    sub_18AF33ED8();
  }
  sub_18AF3387C();
  _stringCompareWithSmolCheck(_:_:expecting:)();
}

void static CKFeatureProtocol.< infix(_:_:)()
{
  sub_18AF1855C();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 16);
  uint64_t v5 = v4(v2, v0);
  uint64_t v7 = v6;
  uint64_t v8 = sub_18AF42D4C();
  if (v5 == ((uint64_t (*)(uint64_t))v4)(v8) && v7 == v9)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = sub_18AF42D4C();
      uint64_t v13 = ((uint64_t (*)(uint64_t))v4)(v12);
      uint64_t v15 = v14;
      uint64_t v16 = sub_18AF42D4C();
      uint64_t v17 = ((uint64_t (*)(uint64_t))v4)(v16);
      goto LABEL_9;
    }
  }
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 24);
  uint64_t v13 = v19(v3, v1);
  uint64_t v15 = v20;
  uint64_t v17 = v19(v3, v1);
LABEL_9:
  if (v13 != v17 || v15 != v18) {
    _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_18AF32064();
}

uint64_t CKFeatureProtocol<>.description.getter()
{
  swift_getDynamicType();
  v0._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 2629690;
  v1._object = (void *)0xE300000000000000;
  String.append(_:)(v1);
  uint64_t v2 = sub_18AF309BC();
  v4._uint64_t countAndFlagsBits = v3(v2);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 2112032;
  v5._object = (void *)0xE300000000000000;
  String.append(_:)(v5);
  uint64_t v6 = sub_18AF309BC();
  v8._uint64_t countAndFlagsBits = v7(v6);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 15913;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  return 60;
}

uint64_t CKZoneFeature.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_18AF78A60@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AF78A6C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return CKZoneFeature.name.setter(v1, v2);
}

uint64_t (*CKZoneFeature.name.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  return sub_18AF78AD4;
}

uint64_t sub_18AF78AD4(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return sub_18AF78ED4();
  }
  return result;
}

uint64_t CKZoneFeature.value.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_18AF78B30@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_18AF78B3C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return CKZoneFeature.value.setter(v1, v2);
}

uint64_t (*CKZoneFeature.value.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  return sub_18AF78BA4;
}

uint64_t sub_18AF78BA4(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return sub_18AF78F80();
  }
  return result;
}

uint64_t sub_18AF78BE0()
{
  return sub_18AF85358();
}

uint64_t sub_18AF78BF0(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_18AF78C20(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void, void, void))sub_18AF7873C);
}

uint64_t sub_18AF78C08(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_18AF78C20(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void, void, void))sub_18AF78C5C);
}

uint64_t sub_18AF78C20(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void, void, void))
{
  return a5(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]) & 1;
}

void sub_18AF78C5C()
{
  sub_18AF22D38();
  sub_18AF34158();
  BOOL v6 = v6 && v5 == v4;
  if (!v6 && (sub_18AF2A5A0() & 1) == 0)
  {
    sub_18AF386E8();
    goto LABEL_13;
  }
  if (v2 != v3 || v0 != v1)
  {
    sub_18AF30E1C();
LABEL_13:
    _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  sub_18AF3387C();
}

uint64_t sub_18AF78CCC(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_18AF78C20(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void, void, void))sub_18AF78CE4);
}

void sub_18AF78CE4()
{
  sub_18AF22D38();
  sub_18AF35624();
  BOOL v6 = v6 && v4 == v5;
  if (!v6 && (sub_18AF40FB8() & 1) == 0)
  {
    sub_18AF33ED8();
    goto LABEL_13;
  }
  if (v3 != v1 || v2 != v0)
  {
    sub_18AF3116C();
LABEL_13:
    _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  sub_18AF3387C();
}

uint64_t sub_18AF78D54(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_18AF78C20(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void, void, void))sub_18AF78D6C);
}

void sub_18AF78D6C()
{
  sub_18AF22D38();
  sub_18AF34158();
  BOOL v6 = v6 && v5 == v4;
  if (v6 || (sub_18AF2A5A0() & 1) != 0)
  {
    if (v2 == v3 && v0 == v1)
    {
      sub_18AF3387C();
      return;
    }
    sub_18AF30E1C();
  }
  else
  {
    sub_18AF386E8();
  }
  sub_18AF3387C();
  _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t _s8CloudKit13CKZoneFeatureV4nameSSvs_0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return sub_18AF78ED4();
}

uint64_t (*CKRecordFeature.name.modify(void *a1))()
{
  *a1 = v1;
  return sub_18AF7E284;
}

uint64_t _s8CloudKit13CKZoneFeatureV5valueSSvs_0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return sub_18AF78F80();
}

uint64_t (*CKRecordFeature.value.modify(void *a1))()
{
  *a1 = v1;
  return sub_18AF7E288;
}

uint64_t sub_18AF78EC0()
{
  return sub_18AF85370();
}

uint64_t sub_18AF78ED4()
{
  uint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  unint64_t v3 = 128;
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_18AF5A52C(v3, v2, v1);
    uint64_t v5 = MEMORY[0x18C129130](v4);
    if (v6) {
      break;
    }
    if (!--v3)
    {
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v8 = 0;
      unint64_t v9 = 0xE000000000000000;
      goto LABEL_6;
    }
  }
  uint64_t v8 = v5;
  unint64_t v9 = v6;
  uint64_t result = swift_bridgeObjectRelease();
LABEL_6:
  uint64_t *v0 = v8;
  v0[1] = v9;
  return result;
}

uint64_t (*CKFieldFeature.name.modify(void *a1))()
{
  *a1 = v1;
  return sub_18AF7E284;
}

uint64_t sub_18AF78F80()
{
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v1 = *(void *)(v0 + 24);
  unint64_t v3 = 128;
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_18AF5A52C(v3, v2, v1);
    uint64_t v5 = MEMORY[0x18C129130](v4);
    if (v6) {
      break;
    }
    if (!--v3)
    {
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v8 = 0;
      unint64_t v9 = 0xE000000000000000;
      goto LABEL_6;
    }
  }
  uint64_t v8 = v5;
  unint64_t v9 = v6;
  uint64_t result = swift_bridgeObjectRelease();
LABEL_6:
  *(void *)(v0 + 16) = v8;
  *(void *)(v0 + 24) = v9;
  return result;
}

uint64_t (*CKFieldFeature.value.modify(void *a1))()
{
  *a1 = v1;
  return sub_18AF7E288;
}

void _s8CloudKit13CKZoneFeatureV4name5valueACSS_SStcfC_0()
{
  sub_18AF22D38();
  unint64_t v1 = v0;
  uint64_t v3 = v2;
  unint64_t v5 = v4;
  uint64_t v7 = v6;
  unint64_t v9 = v8;
  unint64_t v10 = 128;
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_18AF5A52C(v10, v7, v5);
    uint64_t v12 = MEMORY[0x18C129130](v11);
    if (v13) {
      break;
    }
    if (!--v10)
    {
      swift_bridgeObjectRelease();
      uint64_t v14 = 0;
      unint64_t v15 = 0xE000000000000000;
      goto LABEL_6;
    }
  }
  uint64_t v14 = v12;
  unint64_t v15 = v13;
  swift_bridgeObjectRelease();
LABEL_6:
  unint64_t v16 = 128;
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_18AF5A52C(v16, v3, v1);
    uint64_t v18 = MEMORY[0x18C129130](v17);
    if (v19) {
      break;
    }
    if (!--v16)
    {
      swift_bridgeObjectRelease();
      uint64_t v20 = 0;
      unint64_t v21 = 0xE000000000000000;
      goto LABEL_11;
    }
  }
  uint64_t v20 = v18;
  unint64_t v21 = v19;
  swift_bridgeObjectRelease();
LABEL_11:
  uint64_t *v9 = v14;
  v9[1] = v15;
  long long v9[2] = v20;
  v9[3] = v21;
  sub_18AF3387C();
}

uint64_t sub_18AF79114()
{
  return sub_18AF85364();
}

uint64_t _s8CloudKit13CKZoneFeatureV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  BOOL v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

uint64_t CKFeatureSet.init()@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for Array();
  uint64_t result = Dictionary.init()();
  *a1 = result;
  return result;
}

uint64_t CKFeatureSet.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  CKFeatureSet.init()(&v8);
  *a3 = v8;
  type metadata accessor for CKFeatureSet();
  CKFeatureSet.insert<A>(_:)();
  BOOL v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);

  return v6(a1, a2);
}

void CKFeatureSet.insert<A>(_:)()
{
  sub_18AF1855C();
  uint64_t v2 = v1;
  uint64_t v40 = v3;
  uint64_t AssociatedConformanceWitness = v1;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v3 + 16);
  sub_18AF38990();
  uint64_t v39 = v9;
  MEMORY[0x1F4188790](v10);
  sub_18AF19290();
  uint64_t v13 = v12 - v11;
  type metadata accessor for Optional();
  sub_18AF37DC0();
  MEMORY[0x1F4188790](v14);
  unint64_t v16 = (char *)&v33 - v15;
  sub_18AF38990();
  uint64_t v37 = v17;
  MEMORY[0x1F4188790](v18);
  sub_18AF33B98();
  uint64_t v35 = v19;
  uint64_t v36 = *(void *)(v2 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_18AF38990();
  uint64_t v22 = v21;
  sub_18AF37DC0();
  MEMORY[0x1F4188790](v23);
  uint64_t v42 = (char *)&v33 - v24;
  uint64_t v38 = v0;
  uint64_t v25 = *v0;
  sub_18AF7E2D4();
  uint64_t v26 = MEMORY[0x18C128EC0](v25, MEMORY[0x1E4FBB1A0]);
  uint64_t v34 = v7;
  uint64_t v27 = dispatch thunk of Collection.count.getter();
  Swift::Int v28 = v26 + v27;
  if (__OFADD__(v26, v27))
  {
    __break(1u);
  }
  else
  {
    uint64_t v33 = v22;
    type metadata accessor for Dictionary();
    Dictionary.reserveCapacity(_:)(v28);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v35, v34, v5);
    dispatch thunk of Sequence.makeIterator()();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    dispatch thunk of IteratorProtocol.next()();
    int v29 = sub_18AF436E0((uint64_t)v16, 1, v8);
    uint64_t v30 = v39;
    if (v29 != 1)
    {
      uint64_t v31 = *(void (**)(uint64_t))(v39 + 32);
      do
      {
        uint64_t v32 = sub_18AF26324();
        v31(v32);
        CKFeatureSet.insert(_:)();
        (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v13, v8);
        dispatch thunk of IteratorProtocol.next()();
      }
      while (sub_18AF436E0((uint64_t)v16, 1, v8) != 1);
    }
    (*(void (**)(char *, uint64_t))(v33 + 8))(v42, AssociatedTypeWitness);
    sub_18AF32064();
  }
}

uint64_t type metadata accessor for CKFeatureSet()
{
  return sub_18AF67C24();
}

uint64_t CKFeatureSet.features.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for Array();
  uint64_t v3 = type metadata accessor for Dictionary();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x18C1291B0](&v8, v3, WitnessTable);
  uint64_t v5 = sub_18AF19EAC();
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v6;
  sub_18AF312DC();
  type metadata accessor for LazySequence();
  swift_getWitnessTable();
  swift_getWitnessTable();
  LazySequenceProtocol.flatMap<A>(_:)();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_18AF79768()
{
  return swift_bridgeObjectRetain();
}

uint64_t CKFeatureSet.valuesByName.getter()
{
  return Dictionary.mapValues<A>(_:)();
}

uint64_t sub_18AF79828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x18C1291B0](&v9, v5, WitnessTable);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  type metadata accessor for LazySequence();
  swift_getWitnessTable();
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  return swift_bridgeObjectRelease();
}

void CKFeatureSet.isEmpty.getter()
{
  type metadata accessor for Array();

  JUMPOUT(0x18C128ED0);
}

uint64_t CKFeatureSet.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(v5 + 16);
  swift_bridgeObjectRetain();
  if (v6 && (sub_18AF7CF60(a1, a2), (v7 & 1) != 0)) {
    sub_18AF411AC();
  }
  else {
    uint64_t v5 = Array.init()();
  }
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t CKFeatureSet.subscript.setter()
{
  sub_18AF307C4();
  CKFeatureSet.removeAll(for:)(&v3);
  swift_bridgeObjectRelease();
  uint64_t v3 = v0;
  type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t v1 = _ArrayProtocol.filter(_:)();
  swift_bridgeObjectRelease();
  uint64_t v3 = v1;
  swift_getWitnessTable();
  CKFeatureSet.insert<A>(_:)();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned char v9[16];
  long long v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_18AF307C4();
  CKFeatureSet.removeAll(for:)(&v13);
  swift_bridgeObjectRelease();
  uint64_t v13 = v3;
  uint64_t v10 = *(_OWORD *)(v1 + 16);
  uint64_t v11 = v0;
  uint64_t v12 = v2;
  uint64_t v4 = sub_18AF161EC((uint64_t *)&unk_1E9125540);
  uint64_t v5 = sub_18AF7D56C(&qword_1E9126078, (uint64_t *)&unk_1E9125540);
  char v7 = sub_18AF78248((void (*)(char *, char *))sub_18AF7E28C, (uint64_t)v9, v4, v10, MEMORY[0x1E4FBC248], v5, MEMORY[0x1E4FBC278], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = v7;
  type metadata accessor for Array();
  swift_getWitnessTable();
  CKFeatureSet.insert<A>(_:)();
  return swift_bridgeObjectRelease();
}

uint64_t CKFeatureSet.removeAll(for:)@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for Array();
  type metadata accessor for Dictionary();
  Dictionary.removeValue(forKey:)();
  uint64_t result = v3;
  if (!v3) {
    uint64_t result = static Array._allocateUninitialized(_:)();
  }
  *a1 = result;
  return result;
}

uint64_t sub_18AF79BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5) == a2 && v6 == a3) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void (*CKFeatureSet.subscript.modify())()
{
  uint64_t v1 = sub_18AF38DB0();
  uint64_t v2 = sub_18AF33A2C(v1);
  uint64_t *v0 = CKFeatureSet.subscript.getter(v2, v3);
  return sub_18AF79CA4;
}

{
  void *v0;
  void *v1;
  uint64_t v2;

  uint64_t v1 = sub_18AF38DB0();
  sub_18AF33A2C(v1);
  CKFeatureSet.subscript.getter();
  uint64_t *v0 = v2;
  return sub_18AF7A124;
}

void sub_18AF79CA4()
{
}

void CKFeatureSet.subscript.getter()
{
  sub_18AF22D38();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = *v0;
  uint64_t v8 = *(void *)(v7 + 16);
  swift_bridgeObjectRetain();
  if (v8 && (unint64_t v9 = sub_18AF7CF60(v6, v4), (v10 & 1) != 0))
  {
    uint64_t v11 = *(void *)(*(void *)(v7 + 56) + 8 * v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v2 + 16);
  }
  else
  {
    uint64_t v12 = *(void *)(v2 + 16);
    uint64_t v11 = Array.init()();
    swift_bridgeObjectRelease();
  }
  uint64_t v20 = v11;
  type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t v13 = sub_18AF26324();
  MEMORY[0x18C1291B0](v13);
  uint64_t v14 = swift_bridgeObjectRelease();
  uint64_t v20 = v21;
  MEMORY[0x1F4188790](v14);
  uint64_t v15 = *(void *)(v2 + 24);
  _OWORD v19[2] = v12;
  v19[3] = v15;
  uint64_t v16 = type metadata accessor for LazySequence();
  v19[4] = swift_getWitnessTable();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_18AF78248((void (*)(char *, char *))sub_18AF7CFFC, (uint64_t)v19, v16, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v18);
  swift_bridgeObjectRelease();
  sub_18AF3387C();
}

uint64_t sub_18AF79E80@<X0>(uint64_t (*a1)(uint64_t)@<X3>, uint64_t *a2@<X8>)
{
  type metadata accessor for CKFeatureSet();
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_18AF26324();
  uint64_t v5 = a1(v4);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

uint64_t sub_18AF79F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

void sub_18AF7A124()
{
}

void sub_18AF7A13C()
{
  sub_18AF22D38();
  uint64_t v1 = v0;
  char v3 = v2;
  swift_bridgeObjectRetain();
  if (v3)
  {
    swift_bridgeObjectRetain();
    sub_18AF379F4();
    v1();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_18AF379F4();
    v1();
  }
  sub_18AF3387C();
  free(v4);
}

Swift::Bool __swiftcall CKFeatureSet.contains(name:)(Swift::String name)
{
  uint64_t v2 = *v1;
  Swift::String v6 = name;
  uint64_t v3 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  MEMORY[0x18C128F10](&v7, &v6, v2, MEMORY[0x1E4FBB1A0], v3, MEMORY[0x1E4FBB1B0]);
  swift_bridgeObjectRelease();
  uint64_t v4 = v7;
  if (v7) {
    swift_bridgeObjectRelease();
  }
  return v4 != 0;
}

uint64_t CKFeatureSet.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  v8[0] = (*(uint64_t (**)(void, void))(*(void *)(a2 + 24) + 16))(*(void *)(a2 + 16), *(void *)(a2 + 24));
  v8[1] = v4;
  uint64_t v5 = sub_18AF7E2D4();
  MEMORY[0x18C128F10](&v9, v8, v3, MEMORY[0x1E4FBB1A0], v5, MEMORY[0x1E4FBB1B0]);
  swift_bridgeObjectRelease();
  if (v9)
  {
    v8[0] = v9;
    swift_getWitnessTable();
    char v6 = Sequence<>.contains(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

Swift::Bool __swiftcall CKFeatureSet.contains(name:value:)(Swift::String name, Swift::String value)
{
  sub_18AF22D38();
  uint64_t v3 = *v2;
  v9[0] = v4;
  v9[1] = v5;
  uint64_t v6 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  MEMORY[0x18C128F10](&v10, v9, v3, MEMORY[0x1E4FBB1A0], v6, MEMORY[0x1E4FBB1B0]);
  uint64_t v7 = swift_bridgeObjectRelease();
  if (v10)
  {
    v9[0] = v10;
    MEMORY[0x1F4188790](v7);
    swift_getWitnessTable();
    Sequence.contains(where:)();
    swift_bridgeObjectRelease();
  }
  sub_18AF3387C();
  return result;
}

uint64_t sub_18AF7A494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5) == a2 && v6 == a3) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  return v8 & 1;
}

BOOL static CKFeatureSet.isValid(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  unint64_t v5 = v4;
  swift_bridgeObjectRelease();
  uint64_t v6 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0) {
    uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v6) {
    return 0;
  }
  uint64_t v7 = sub_18AF311C8();
  uint64_t v9 = v8(v7);
  unint64_t v11 = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0) {
    uint64_t v12 = v9 & 0xFFFFFFFFFFFFLL;
  }
  return v12 != 0;
}

#error "18AF7A6B4: call analysis failed (funcsize=91)"

#error "18AF7A82C: call analysis failed (funcsize=91)"

#error "18AF7A9A4: call analysis failed (funcsize=91)"

void CKFeatureSet.insert(_:)()
{
  sub_18AF1855C();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 16);
  sub_18AF38990();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  sub_18AF33B98();
  uint64_t v35 = v9;
  uint64_t v11 = *(void *)(v10 + 24);
  if (!static CKFeatureSet.isValid(_:)(v12, v5, v11)) {
    goto LABEL_15;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t))(v11 + 16);
  uint64_t v14 = sub_18AF410B4();
  uint64_t v15 = v13(v14);
  if (*(void *)(*v0 + 16) && (sub_18AF7CF60(v15, v16), (v17 & 1) != 0)) {
    swift_bridgeObjectRetain();
  }
  else {
    Array.init()();
  }
  swift_bridgeObjectRelease();
  type metadata accessor for Array();
  swift_getWitnessTable();
  char v18 = Sequence<>.contains(_:)();
  swift_bridgeObjectRelease();
  if (v18) {
    goto LABEL_15;
  }
  uint64_t v19 = sub_18AF410B4();
  uint64_t v20 = v13(v19);
  uint64_t v22 = v21;
  uint64_t v23 = sub_18AF19EAC();
  *(void *)(v23 + 16) = v5;
  *(void *)(v23 + 24) = v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v35, v3, v5);
  uint64_t v24 = (void *)swift_allocObject();
  v24[2] = v5;
  v24[3] = v11;
  v24[4] = sub_18AF7D060;
  void v24[5] = v23;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v26 = *v1;
  uint64_t v36 = *v1;
  *uint64_t v1 = 0x8000000000000000;
  uint64_t v34 = v20;
  sub_18AF30BC0();
  uint64_t v28 = *(void *)(v26 + 16);
  BOOL v29 = (v27 & 1) == 0;
  Swift::Int v30 = v28 + v29;
  if (!__OFADD__(v28, v29))
  {
    char v31 = v27;
    type metadata accessor for _NativeDictionary();
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v30))
    {
      sub_18AF7CF60(v34, v22);
      sub_18AF2AD04();
      if (!v32) {
        goto LABEL_17;
      }
    }
    *uint64_t v1 = v36;
    swift_bridgeObjectRelease();
    if (v31)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v33 = swift_bridgeObjectRetain();
      ((void (*)(uint64_t))v24[4])(v33);
      swift_bridgeObjectRetain();
      _NativeDictionary._insert(at:key:value:)();
    }
    swift_bridgeObjectRelease();
    Array.append(_:)();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
LABEL_15:
    sub_18AF32064();
    return;
  }
  __break(1u);
LABEL_17:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t sub_18AF7AD4C()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t sub_18AF7AD5C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_18AF38EF8(*(void *)(a1 + 16), a2);
}

uint64_t sub_18AF7AD64(uint64_t a1)
{
  return sub_18AF79828(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

Swift::Void __swiftcall CKFeatureSet.insert(name:value:)(Swift::String name, Swift::String value)
{
  sub_18AF1855C();
  uint64_t v20 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = *(void *)(v9 + 16);
  sub_18AF38990();
  uint64_t v12 = v11;
  MEMORY[0x1F4188790](v13);
  sub_18AF19290();
  uint64_t v16 = v15 - v14;
  uint64_t v18 = *(void *)(v17 + 24);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19(v8, v6, v20, v4, v10, v18);
  CKFeatureSet.insert(_:)();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v16, v10);
  sub_18AF32064();
}

void CKFeatureSet.remove(name:value:)()
{
  sub_18AF1855C();
  uint64_t v2 = v1;
  uint64_t v16 = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = *(void *)(v8 + 16);
  sub_18AF38990();
  uint64_t v11 = v10;
  MEMORY[0x1F4188790](v12);
  sub_18AF34874();
  uint64_t v14 = *(void *)(v13 + 24);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15(v7, v5, v16, v2, v9, v14);
  CKFeatureSet.remove(_:)();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v0, v9);
  sub_18AF32064();
}

void CKFeatureSet.remove(_:)()
{
  sub_18AF1855C();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = type metadata accessor for Optional();
  sub_18AF38990();
  v42[4] = v8;
  sub_18AF37DC0();
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)v42 - v10;
  sub_18AF43708(v5, 1, 1, v6);
  uint64_t v12 = *(void *)(v3 + 24);
  uint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 16);
  uint64_t v13 = v43(v6, v12);
  uint64_t v44 = v1;
  uint64_t v45 = v13;
  uint64_t v14 = *v1;
  uint64_t v46 = v15;
  uint64_t v16 = sub_18AF7E2D4();
  MEMORY[0x18C128F10](&v49, &v45, v14, MEMORY[0x1E4FBB1A0], v16, MEMORY[0x1E4FBB1B0]);
  swift_bridgeObjectRelease();
  if (v49)
  {
    v42[3] = v5;
    uint64_t v45 = v49;
    uint64_t WitnessTable = swift_getWitnessTable();
    Collection<>.firstIndex(of:)();
    swift_bridgeObjectRelease();
    if ((v48 & 1) == 0)
    {
      v42[2] = WitnessTable;
      uint64_t v18 = v47;
      uint64_t v19 = sub_18AF34028();
      uint64_t v47 = v20(v19);
      uint64_t v48 = v21;
      v42[1] = type metadata accessor for Dictionary();
      uint64_t v22 = v44;
      uint64_t v24 = (void (*)(uint64_t))Dictionary.subscript.modify();
      if (*v23)
      {
        uint64_t v22 = v23;
        Array.remove(at:)();
        uint64_t v25 = sub_18AF4761C();
        v24(v25);
        swift_bridgeObjectRelease();
        uint64_t v26 = sub_18AF4025C();
        v27(v26);
        uint64_t v28 = 0;
      }
      else
      {
        uint64_t v29 = sub_18AF4761C();
        v24(v29);
        swift_bridgeObjectRelease();
        uint64_t v30 = sub_18AF4025C();
        v31(v30);
        uint64_t v28 = 1;
      }
      sub_18AF43708((uint64_t)v11, v28, 1, v6);
      ((void (*)(uint64_t, char *, uint64_t))v22[4])(v18, v11, v7);
      uint64_t v32 = sub_18AF34028();
      uint64_t v34 = v33(v32);
      uint64_t v36 = v35;
      uint64_t v37 = *v44;
      uint64_t v45 = v34;
      uint64_t v46 = v36;
      MEMORY[0x18C128F10](&v47, &v45, v37, MEMORY[0x1E4FBB1A0], v16, MEMORY[0x1E4FBB1B0]);
      swift_bridgeObjectRelease();
      if (v47)
      {
        uint64_t v45 = v47;
        char v38 = Collection.isEmpty.getter();
        swift_bridgeObjectRelease();
        if (v38)
        {
          uint64_t v39 = sub_18AF34028();
          uint64_t v45 = v40(v39);
          uint64_t v46 = v41;
          Dictionary.removeValue(forKey:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
    }
  }
  sub_18AF32064();
}

uint64_t sub_18AF7B25C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  uint64_t v43 = a1 + 64;
  sub_18AF3093C();
  unint64_t v6 = v5 & v4;
  int64_t v44 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  if (!v6) {
    goto LABEL_4;
  }
LABEL_3:
  unint64_t v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v10 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    if (!*(void *)(v2 + 16))
    {
LABEL_43:
      swift_release();
      return 0;
    }
    int64_t v42 = v9;
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = *(void *)(*(void *)(v3 + 56) + 8 * i);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v49 = v16;
    unint64_t v19 = sub_18AF7CF60(v16, v17);
    if ((v20 & 1) == 0)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      return 0;
    }
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + 8 * v19);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void *)(v21 + 16);
    uint64_t result = swift_bridgeObjectRelease();
    if (v22 != *(void *)(v18 + 16))
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
    if (v22)
    {
      unint64_t v23 = 0;
      uint64_t v46 = v18;
      uint64_t v47 = v18 + 32;
      uint64_t v45 = v3;
      uint64_t v40 = v2;
      unint64_t v41 = v6;
      uint64_t v39 = v22;
      while (v23 < *(void *)(v18 + 16))
      {
        if (!*(void *)(v2 + 16))
        {
          swift_bridgeObjectRelease();
LABEL_48:
          swift_bridgeObjectRelease();
          goto LABEL_43;
        }
        uint64_t v24 = (uint64_t *)(v47 + 32 * v23);
        uint64_t v26 = *v24;
        uint64_t v25 = v24[1];
        uint64_t v28 = v24[2];
        uint64_t v27 = v24[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v29 = sub_18AF7CF60(v49, v17);
        if ((v30 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          goto LABEL_43;
        }
        uint64_t v31 = *(void *)(*(void *)(v2 + 56) + 8 * v29);
        swift_bridgeObjectRetain();
        uint64_t v32 = v17;
        swift_bridgeObjectRelease();
        uint64_t v33 = *(void *)(v31 + 16);
        if (!v33)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_48;
        }
        unint64_t v48 = v23 + 1;
        uint64_t v34 = (uint64_t *)(v31 + 56);
        while (1)
        {
          uint64_t v35 = *(v34 - 1);
          uint64_t v36 = *v34;
          BOOL v37 = *(v34 - 3) == v26 && *(v34 - 2) == v25;
          if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            BOOL v38 = v35 == v28 && v36 == v27;
            if (v38 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              break;
            }
          }
          v34 += 4;
          if (!--v33)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_43;
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v23 = v48;
        uint64_t v3 = v45;
        uint64_t v18 = v46;
        uint64_t v17 = v32;
        uint64_t v2 = v40;
        unint64_t v6 = v41;
        if (v48 == v39) {
          goto LABEL_41;
        }
      }
      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
LABEL_41:
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    int64_t v9 = v42;
    if (v6) {
      goto LABEL_3;
    }
LABEL_4:
    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      goto LABEL_53;
    }
    if (v12 >= v44) {
      goto LABEL_51;
    }
    unint64_t v13 = *(void *)(v43 + 8 * v12);
    ++v9;
    if (!v13)
    {
      int64_t v9 = v12 + 1;
      if (v12 + 1 >= v44) {
        goto LABEL_51;
      }
      unint64_t v13 = *(void *)(v43 + 8 * v9);
      if (!v13)
      {
        int64_t v9 = v12 + 2;
        if (v12 + 2 >= v44) {
          goto LABEL_51;
        }
        unint64_t v13 = *(void *)(v43 + 8 * v9);
        if (!v13) {
          break;
        }
      }
    }
LABEL_17:
    unint64_t v6 = (v13 - 1) & v13;
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v44)
  {
LABEL_51:
    swift_release();
    return 1;
  }
  unint64_t v13 = *(void *)(v43 + 8 * v14);
  if (v13)
  {
    int64_t v9 = v14;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v9 >= v44) {
      goto LABEL_51;
    }
    unint64_t v13 = *(void *)(v43 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_17;
    }
  }
LABEL_54:
  __break(1u);
  return result;
}

void static CKFeatureSet.== infix(_:_:)()
{
  sub_18AF1855C();
  uint64_t v56 = v0;
  uint64_t v2 = v1;
  sub_18AF38990();
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v7);
  MEMORY[0x1F4188790](v8);
  unint64_t v57 = (char *)&v47 - v9;
  uint64_t v11 = *v10;
  uint64_t v13 = *v12;
  uint64_t v14 = type metadata accessor for Array();
  uint64_t v15 = MEMORY[0x1E4FBB1A0];
  uint64_t v16 = MEMORY[0x1E4FBB1B0];
  uint64_t v17 = MEMORY[0x18C128EC0](v11, MEMORY[0x1E4FBB1A0], v14, MEMORY[0x1E4FBB1B0]);
  uint64_t v58 = v13;
  if (v17 != MEMORY[0x18C128EC0](v13, v15, v14, v16))
  {
LABEL_34:
    sub_18AF32064();
    return;
  }
  uint64_t v48 = v6;
  uint64_t v49 = v11 + 64;
  sub_18AF3093C();
  unint64_t v20 = v19 & v18;
  int64_t v50 = (unint64_t)(v21 + 63) >> 6;
  uint64_t v54 = v4 + 8;
  uint64_t v55 = (void (**)(char *, uint64_t *, uint64_t))(v4 + 16);
  swift_bridgeObjectRetain();
  int64_t v22 = 0;
  uint64_t v51 = v11;
  if (!v20) {
    goto LABEL_4;
  }
LABEL_3:
  uint64_t v52 = (v20 - 1) & v20;
  int64_t v53 = v22;
  for (unint64_t i = __clz(__rbit64(v20)) | (v22 << 6); ; unint64_t i = __clz(__rbit64(v25)) + (v26 << 6))
  {
    uint64_t v28 = *(void *)(v11 + 56);
    unint64_t v29 = (uint64_t *)(*(void *)(v11 + 48) + 16 * i);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(v28 + 8 * i);
    uint64_t v60 = *v29;
    uint64_t v61 = v30;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    MEMORY[0x18C128F10](&j, &v60, v58, MEMORY[0x1E4FBB1A0], v14, MEMORY[0x1E4FBB1B0]);
    swift_bridgeObjectRelease();
    uint64_t v33 = j;
    if (j)
    {
      uint64_t v34 = MEMORY[0x18C1292E0](j, v2);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v34 = 0;
    }
    uint64_t v35 = sub_18AF311C8();
    uint64_t v36 = MEMORY[0x18C1292E0](v35);
    if (!v33 || v34 != v36)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_34;
    }
    swift_bridgeObjectRetain();
    uint64_t v37 = Array.startIndex.getter();
    swift_bridgeObjectRelease();
    for (j = v37; ; uint64_t v37 = j)
    {
      uint64_t v38 = sub_18AF311C8();
      if (v37 == MEMORY[0x18C129320](v38)) {
        break;
      }
      sub_18AF311C8();
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        uint64_t v40 = v57;
        (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v57, v32+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v37, v2);
      }
      else
      {
        uint64_t v44 = _ArrayBuffer._getElementSlowPath(_:)();
        if (v48 != 8) {
          goto LABEL_39;
        }
        uint64_t v60 = v44;
        uint64_t v40 = v57;
        (*v55)(v57, &v60, v2);
        swift_unknownObjectRelease();
      }
      swift_bridgeObjectRetain();
      MEMORY[0x18C129330](&j, v32, v2);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))((char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v40, v2);
      uint64_t v60 = v31;
      uint64_t v61 = v30;
      swift_bridgeObjectRetain();
      MEMORY[0x18C128F10](&v59, &v60, v58, MEMORY[0x1E4FBB1A0], v14, MEMORY[0x1E4FBB1B0]);
      swift_bridgeObjectRelease();
      if (!v59)
      {
        uint64_t v45 = sub_18AF42CD4();
        v46(v45);
LABEL_33:
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_34;
      }
      uint64_t v60 = v59;
      swift_getWitnessTable();
      char v41 = Sequence<>.contains(_:)();
      swift_bridgeObjectRelease();
      uint64_t v42 = sub_18AF42CD4();
      v43(v42);
      if ((v41 & 1) == 0) {
        goto LABEL_33;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = v51;
    unint64_t v20 = v52;
    int64_t v22 = v53;
    if (v52) {
      goto LABEL_3;
    }
LABEL_4:
    int64_t v24 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v24 >= v50) {
      goto LABEL_36;
    }
    unint64_t v25 = *(void *)(v49 + 8 * v24);
    int64_t v26 = v22 + 1;
    if (!v25)
    {
      int64_t v26 = v22 + 2;
      if (v22 + 2 >= v50) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v49 + 8 * v26);
      if (!v25) {
        break;
      }
    }
LABEL_15:
    uint64_t v52 = (v25 - 1) & v25;
    int64_t v53 = v26;
  }
  uint64_t v27 = v22 + 3;
  if (v22 + 3 >= v50)
  {
LABEL_36:
    swift_release();
    goto LABEL_34;
  }
  unint64_t v25 = *(void *)(v49 + 8 * v27);
  if (v25)
  {
    int64_t v26 = v22 + 3;
    goto LABEL_15;
  }
  while (1)
  {
    int64_t v26 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v26 >= v50) {
      goto LABEL_36;
    }
    unint64_t v25 = *(void *)(v49 + 8 * v26);
    ++v27;
    if (v25) {
      goto LABEL_15;
    }
  }
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
}

void sub_18AF7BB38()
{
  static CKFeatureSet.== infix(_:_:)();
}

uint64_t CKFeatureSet.description.getter(uint64_t a1)
{
  uint64_t v24 = 60;
  unint64_t v25 = 0xE100000000000000;
  v2._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 8250;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  CKFeatureSet.features.getter(a1);
  long long v20 = v22;
  uint64_t v21 = v23;
  v15[1] = *(_OWORD *)(a1 + 16);
  type metadata accessor for Array();
  type metadata accessor for Dictionary();
  swift_getWitnessTable();
  sub_18AF31248();
  swift_getWitnessTable();
  swift_getWitnessTable();
  type metadata accessor for FlattenSequence();
  swift_getWitnessTable();
  sub_18AF312DC();
  uint64_t v4 = type metadata accessor for LazySequence();
  uint64_t v5 = sub_18AF161EC(&qword_1E9126080);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v17 = swift_getWitnessTable();
  uint64_t v18 = swift_getWitnessTable();
  uint64_t v16 = swift_getWitnessTable();
  uint64_t v6 = swift_getWitnessTable();
  uint64_t v8 = sub_18AF78248((void (*)(char *, char *))sub_18AF7D508, (uint64_t)v15, v4, v5, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v7);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v9 = MEMORY[0x18C129260](v8, v5);
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 62;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return v24;
}

uint64_t sub_18AF7BE04@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  *a3 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  a3[1] = v6;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  a3[2] = result;
  a3[3] = v8;
  return result;
}

uint64_t sub_18AF7BE8C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  char v2 = *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  *a2 = a1;
  a2[1] = a1;
  uint64_t v4 = -1 << v2;
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  uint64_t v5 = v3 & *(void *)(a1 + 64);
  a2[2] = a1 + 64;
  a2[3] = ~v4;
  a2[4] = 0;
  a2[5] = v5;
  return swift_bridgeObjectRetain();
}

Swift::tuple_String_OpaquePointer_optional __swiftcall CKFeatureSet.Iterator.next()()
{
  uint64_t v1 = v0[1];
  int64_t v3 = v0[4];
  unint64_t v2 = v0[5];
  int64_t v4 = v3;
  if (!v2)
  {
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_20;
    }
    int64_t v12 = (unint64_t)(v0[3] + 64) >> 6;
    if (v11 < v12)
    {
      uint64_t v13 = v0[2];
      unint64_t v14 = *(void *)(v13 + 8 * v11);
      if (v14)
      {
LABEL_7:
        uint64_t v5 = (v14 - 1) & v14;
        unint64_t v6 = __clz(__rbit64(v14)) + (v11 << 6);
        int64_t v4 = v11;
        goto LABEL_3;
      }
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v12)
      {
        unint64_t v14 = *(void *)(v13 + 8 * (v3 + 2));
        if (v14)
        {
          int64_t v11 = v3 + 2;
          goto LABEL_7;
        }
        int64_t v11 = v3 + 3;
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v12)
        {
          unint64_t v14 = *(void *)(v13 + 8 * v11);
          if (v14) {
            goto LABEL_7;
          }
          int64_t v4 = v12 - 1;
          int64_t v15 = v3 + 4;
          while (v15 < v12)
          {
            unint64_t v14 = *(void *)(v13 + 8 * v15++);
            if (v14)
            {
              int64_t v11 = v15 - 1;
              goto LABEL_7;
            }
          }
        }
      }
    }
    uint64_t v9 = 0;
    uint64_t v8 = 0;
    unint64_t v10 = 0;
    v0[4] = v4;
    v0[5] = 0;
    goto LABEL_18;
  }
  uint64_t v5 = (v2 - 1) & v2;
  unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
  uint64_t v7 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
  uint64_t v9 = *v7;
  uint64_t v8 = (void *)v7[1];
  unint64_t v10 = *(void **)(*(void *)(v1 + 56) + 8 * v6);
  v0[4] = v4;
  v0[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_18:
  uint64_t v16 = v9;
  uint64_t v17 = v8;
  uint64_t v18 = v10;
LABEL_20:
  result.value._1._rawValue = v18;
  result.value._0._object = v17;
  result.value._0._uint64_t countAndFlagsBits = v16;
  return result;
}

uint64_t sub_18AF7BFF8@<X0>(Swift::tuple_String_OpaquePointer_optional *a1@<X8>)
{
  Swift::tuple_String_OpaquePointer_optional v3 = CKFeatureSet.Iterator.next()();
  *a1 = v3;
  return v3.value._0._countAndFlagsBits;
}

uint64_t CKFeatureSet.makeIterator()@<X0>(void *a1@<X8>)
{
  sub_18AF7BE8C(*v1, a1);

  return swift_bridgeObjectRetain();
}

uint64_t sub_18AF7C060@<X0>(void *a1@<X8>)
{
  CKFeatureSet.makeIterator()(a1);

  return swift_bridgeObjectRelease();
}

uint64_t sub_18AF7C094()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

void CKFeatureSet.init(dictionaryLiteral:)()
{
  sub_18AF1855C();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = CKFeatureSet.init()(&v22);
  uint64_t v9 = v22;
  uint64_t v23 = v22;
  uint64_t v10 = *(void *)(v5 + 16);
  if (v10)
  {
    uint64_t v19 = v5;
    long long v20 = v7;
    int64_t v11 = (uint64_t *)(v5 + 48);
    do
    {
      uint64_t v21 = &v19;
      uint64_t v12 = *(v11 - 1);
      uint64_t v13 = *v11;
      v11 += 3;
      uint64_t v22 = v13;
      MEMORY[0x1F4188790](v8);
      *(&v19 - 4) = v3;
      *(&v19 - 3) = v1;
      *(&v19 - 2) = v14;
      *(&v19 - 1) = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v15 = sub_18AF161EC((uint64_t *)&unk_1E9125540);
      uint64_t v16 = sub_18AF7D56C(&qword_1E9126078, (uint64_t *)&unk_1E9125540);
      uint64_t v18 = sub_18AF78248((void (*)(char *, char *))sub_18AF7D528, (uint64_t)(&v19 - 6), v15, v3, MEMORY[0x1E4FBC248], v16, MEMORY[0x1E4FBC278], v17);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v22 = v18;
      sub_18AF312DC();
      type metadata accessor for CKFeatureSet();
      sub_18AF312DC();
      type metadata accessor for Array();
      swift_getWitnessTable();
      CKFeatureSet.insert<A>(_:)();
      uint64_t v8 = swift_bridgeObjectRelease();
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    uint64_t v9 = v23;
    uint64_t v7 = v20;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  *uint64_t v7 = v9;
  sub_18AF32064();
}

uint64_t sub_18AF7C270(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  int64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v11(a2, a3, v9, v10, a4, a5);
}

void sub_18AF7C30C()
{
}

uint64_t CKFeatureSet.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  CKFeatureSet.init()(&v15);
  uint64_t v14 = a1;
  v13[2] = a2;
  v13[3] = a3;
  uint64_t v8 = sub_18AF161EC(&qword_1E9126088);
  uint64_t v9 = sub_18AF7D56C(&qword_1E9126090, &qword_1E9126088);
  uint64_t v11 = sub_18AF78248((void (*)(char *, char *))sub_18AF7D54C, (uint64_t)v13, v8, a2, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  swift_bridgeObjectRelease();
  uint64_t v14 = v11;
  type metadata accessor for CKFeatureSet();
  sub_18AF7E2D4();
  swift_getWitnessTable();
  CKFeatureSet.insert<A>(_:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a4 = v15;
  return result;
}

uint64_t sub_18AF7C444(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v8 = a1[3];
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v9(v5, v6, v7, v8, a2, a3);
}

uint64_t sub_18AF7C4DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return CKFeatureSet.init(arrayLiteral:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t CKRequiredFeatureSet.zone.getter@<X0>(void *a1@<X8>)
{
  return sub_18AF38EF8(*v1, a1);
}

uint64_t CKRequiredFeatureSet.zone.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = v2;
  return result;
}

uint64_t (*CKRequiredFeatureSet.zone.modify())()
{
  return nullsub_2;
}

uint64_t CKRequiredFeatureSet.record.getter@<X0>(void *a1@<X8>)
{
  return sub_18AF38EF8(*(void *)(v1 + 8), a1);
}

uint64_t CKRequiredFeatureSet.record.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = v2;
  return result;
}

uint64_t (*CKRequiredFeatureSet.record.modify())()
{
  return nullsub_2;
}

uint64_t CKRequiredFeatureSet.field.getter@<X0>(void *a1@<X8>)
{
  return sub_18AF38EF8(*(void *)(v1 + 16), a1);
}

uint64_t CKRequiredFeatureSet.field.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = v2;
  return result;
}

uint64_t (*CKRequiredFeatureSet.field.modify())()
{
  return nullsub_2;
}

void CKRequiredFeatureSet.init()(void *a1@<X8>)
{
  uint64_t v1 = MEMORY[0x1E4FBC868];
  *a1 = MEMORY[0x1E4FBC868];
  a1[1] = v1;
  a1[2] = v1;
}

void CKRequiredFeatureSet.init<A, B, C>(zone:record:field:)()
{
  sub_18AF1855C();
  uint64_t v31 = v1;
  uint64_t v30 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v32 = v11;
  sub_18AF38990();
  uint64_t v13 = v12;
  MEMORY[0x1F4188790](v14);
  sub_18AF19290();
  uint64_t v17 = v16 - v15;
  sub_18AF38990();
  uint64_t v19 = v18;
  MEMORY[0x1F4188790](v20);
  sub_18AF34874();
  sub_18AF38990();
  uint64_t v22 = v21;
  MEMORY[0x1F4188790](v23);
  sub_18AF19290();
  uint64_t v26 = v25 - v24;
  (*(void (**)(uint64_t))(v22 + 16))(v25 - v24);
  sub_18AF7D5BC();
  CKFeatureSet.init<A>(_:)(v26, v8, &v33);
  uint64_t v29 = v33;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v0, v30, v6);
  sub_18AF7D608();
  CKFeatureSet.init<A>(_:)(v0, v6, &v33);
  uint64_t v27 = v33;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v17, v10, v4);
  sub_18AF7D654();
  CKFeatureSet.init<A>(_:)(v17, v4, &v33);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v10, v4);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v30, v6);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v31, v8);
  uint64_t v28 = v33;
  void *v32 = v29;
  v32[1] = v27;
  v32[2] = v28;
  sub_18AF32064();
}

BOOL CKRequiredFeatureSet.isEmpty.getter()
{
  return !*(void *)(*v0 + 16) && !*(void *)(v0[1] + 16) && *(void *)(v0[2] + 16) == 0;
}

Swift::Void __swiftcall CKRequiredFeatureSet.insert(_:)(CloudKit::CKZoneFeature a1)
{
}

void CKRequiredFeatureSet.insert<A>(_:)()
{
  sub_18AF33744();
  sub_18AF161EC(&qword_1E91260B0);

  CKFeatureSet.insert<A>(_:)();
}

{
  sub_18AF33744();
  sub_18AF161EC(&qword_1E91260B8);
  sub_18AF182A0();
}

{
  sub_18AF33744();
  sub_18AF161EC(&qword_1E91260C0);
  sub_18AF182A0();
}

Swift::Void __swiftcall CKRequiredFeatureSet.insert(_:)(CloudKit::CKRecordFeature a1)
{
}

Swift::Void __swiftcall CKRequiredFeatureSet.insert(_:)(CloudKit::CKFieldFeature a1)
{
}

void static CKRequiredFeatureSet.== infix(_:_:)()
{
  sub_18AF22D38();
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v3 + 8);
  uint64_t v5 = *(void *)(v3 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_18AF26324();
  char v8 = sub_18AF7B25C(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v8)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v9 = sub_18AF7B25C(v1, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v9)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_18AF7B25C(v2, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  sub_18AF3387C();
}

uint64_t CKRequiredFeatureSet.description.getter()
{
  if (!*(void *)(*v0 + 16) && !*(void *)(v0[1] + 16) && !*(void *)(v0[2] + 16)) {
    return 0x3E7974706D453CLL;
  }
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  uint64_t v1 = swift_bridgeObjectRetain();
  uint64_t v2 = sub_18AF779C0(v1, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_18AF7D6A0, 0);
  swift_bridgeObjectRelease();
  uint64_t v3 = sub_18AF161EC(&qword_1E9126080);
  uint64_t v4 = MEMORY[0x18C129260](v2, v3);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 0x64726F636572202CLL;
  v8._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v8);
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_18AF77C98(v9, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_18AF7E2B4, 0);
  swift_bridgeObjectRelease();
  uint64_t v11 = MEMORY[0x18C129260](v10, v3);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 0x3A646C656966202CLL;
  v15._object = (void *)0xE900000000000020;
  String.append(_:)(v15);
  uint64_t v16 = swift_bridgeObjectRetain();
  uint64_t v17 = sub_18AF77F70(v16, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_18AF7E2B4, 0);
  swift_bridgeObjectRelease();
  uint64_t v18 = MEMORY[0x18C129260](v17, v3);
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = 62;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  return 0xD00000000000001DLL;
}

{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  objc_super v7;
  uint64_t v8;
  uint64_t v9;

  v7.super_class = (Class)CKRequiredFeatureSet;
  uint64_t v0 = objc_msgSendSuper2(&v7, sel_description);
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;

  Swift::String v8 = v1;
  uint64_t v9 = v3;
  v4._uint64_t countAndFlagsBits = 8250;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = CKRequiredFeatureSet.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return v8;
}

void CKRecordZone.requiredFeatures.getter(uint64_t a1@<X8>)
{
  id v3 = objc_msgSend(v1, sel_requiredFeatures);
  sub_18AF8545C(&v4);

  if (v4)
  {
    *(void *)a1 = v4;
    *(_OWORD *)(a1 + 8) = v5;
  }
  else
  {
    __break(1u);
  }
}

double sub_18AF7CD44@<D0>(uint64_t a1@<X8>)
{
  CKRecordZone.requiredFeatures.getter((uint64_t)&v4);
  uint64_t v2 = v5;
  double result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 16) = v2;
  return result;
}

void sub_18AF7CD88(void *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v2 = a1[2];
  *(void *)&long long v3 = *a1;
  *((void *)&v3 + 1) = v1;
  uint64_t v4 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  CKRecordZone.requiredFeatures.setter(&v3);
}

void CKRecordZone.requiredFeatures.setter(long long *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *((void *)a1 + 2);
  type metadata accessor for CKRequiredFeatureSet(0);
  long long v6 = *a1;
  uint64_t v7 = v4;
  uint64_t v5 = sub_18AF46354((uint64_t)&v6);
  objc_msgSend(v2, sel_setRequiredFeatures_, v5);
}

void (*CKRecordZone.requiredFeatures.modify(uint64_t a1))(void *a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  CKRecordZone.requiredFeatures.getter(a1);
  return sub_18AF7CEB8;
}

void sub_18AF7CEB8(void *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  if (a2)
  {
    *(void *)&long long v4 = *a1;
    *((void *)&v4 + 1) = v2;
    uint64_t v5 = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CKRecordZone.requiredFeatures.setter(&v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)&long long v4 = *a1;
    *((void *)&v4 + 1) = v2;
    uint64_t v5 = v3;
    CKRecordZone.requiredFeatures.setter(&v4);
  }
}

unint64_t sub_18AF7CF60(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_18AF7D274(a1, a2, v4);
}

uint64_t sub_18AF7CFD8(uint64_t a1)
{
  return sub_18AF79BB4(a1, v1[4], v1[5], v1[2], v1[3]) & 1;
}

uint64_t sub_18AF7CFFC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_18AF3848C();
  uint64_t result = v3(v2);
  *a1 = result;
  a1[1] = v5;
  return result;
}

uint64_t sub_18AF7D038(uint64_t a1)
{
  return sub_18AF7A494(a1, v1[4], v1[5], v1[2], v1[3]) & 1;
}

uint64_t sub_18AF7D060()
{
  return Array.init()();
}

uint64_t sub_18AF7D068()
{
  return MEMORY[0x1F4186498](v0, 48, 7);
}

unint64_t sub_18AF7D078(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_18AF7D358(a1, v4);
}

void sub_18AF7D0BC()
{
}

void sub_18AF7D0F8()
{
}

void sub_18AF7D134()
{
}

void sub_18AF7D170()
{
}

void sub_18AF7D238()
{
}

unint64_t sub_18AF7D274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_18AF7D358(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_18AF7E1AC(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = MEMORY[0x18C129800](v9, a1);
      sub_18AF6A2CC((uint64_t)v9);
      if (v7) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

void sub_18AF7D420()
{
  sub_18AF22D38();
  uint64_t v1 = -1 << *(unsigned char *)(v0 + 32);
  uint64_t v3 = v2 & ~v1;
  sub_18AF1A010();
  if (v5)
  {
    sub_18AF34EA0(0, v4);
    id v6 = *(id *)(*(void *)(v0 + 48) + 8 * v3);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v1;
      uint64_t v9 = (v3 + 1) & v8;
      sub_18AF1A010();
      if (v10)
      {
        do
        {
          id v11 = *(id *)(*(void *)(v0 + 48) + 8 * v9);
          char v12 = static NSObject.== infix(_:_:)();

          if (v12) {
            break;
          }
          uint64_t v9 = (v9 + 1) & v8;
          sub_18AF1A010();
        }
        while ((v13 & 1) != 0);
      }
    }
  }
  sub_18AF3387C();
}

uint64_t sub_18AF7D508@<X0>(void *a1@<X8>)
{
  return sub_18AF7BE04(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_18AF7D528(uint64_t *a1)
{
  return sub_18AF7C270(a1, v1[4], v1[5], v1[2], v1[3]);
}

uint64_t sub_18AF7D54C(uint64_t *a1)
{
  return sub_18AF7C444(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_18AF7D56C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_18AF67604(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_18AF7D5BC()
{
  unint64_t result = qword_1E9126098;
  if (!qword_1E9126098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126098);
  }
  return result;
}

unint64_t sub_18AF7D608()
{
  unint64_t result = qword_1E91260A0;
  if (!qword_1E91260A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91260A0);
  }
  return result;
}

unint64_t sub_18AF7D654()
{
  unint64_t result = qword_1E91260A8;
  if (!qword_1E91260A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91260A8);
  }
  return result;
}

uint64_t sub_18AF7D6A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_18AF79768();
  *a1 = result;
  return result;
}

unint64_t sub_18AF7D6D4(uint64_t a1)
{
  unint64_t result = sub_18AF7D6FC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_18AF7D6FC()
{
  unint64_t result = qword_1E91260C8;
  if (!qword_1E91260C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91260C8);
  }
  return result;
}

unint64_t sub_18AF7D74C()
{
  unint64_t result = qword_1E91260D0;
  if (!qword_1E91260D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91260D0);
  }
  return result;
}

unint64_t sub_18AF7D798(uint64_t a1)
{
  unint64_t result = sub_18AF7D7C0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_18AF7D7C0()
{
  unint64_t result = qword_1E91260D8;
  if (!qword_1E91260D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91260D8);
  }
  return result;
}

unint64_t sub_18AF7D810()
{
  unint64_t result = qword_1E91260E0;
  if (!qword_1E91260E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91260E0);
  }
  return result;
}

unint64_t sub_18AF7D85C(uint64_t a1)
{
  unint64_t result = sub_18AF7D884();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_18AF7D884()
{
  unint64_t result = qword_1E91260E8;
  if (!qword_1E91260E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91260E8);
  }
  return result;
}

unint64_t sub_18AF7D8D4()
{
  unint64_t result = qword_1E91260F0[0];
  if (!qword_1E91260F0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E91260F0);
  }
  return result;
}

uint64_t sub_18AF7D920()
{
  return swift_getWitnessTable();
}

uint64_t sub_18AF7D96C@<X0>(uint64_t *a1@<X8>)
{
  return sub_18AF79E80((uint64_t (*)(uint64_t))CKFeatureSet.subscript.getter, a1);
}

uint64_t sub_18AF7D998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18AF79F14(a1, a2, a3, a4, CKFeatureSet.subscript.setter);
}

uint64_t sub_18AF7D9CC@<X0>(uint64_t *a1@<X8>)
{
  return sub_18AF79E80((uint64_t (*)(uint64_t))CKFeatureSet.subscript.getter, a1);
}

uint64_t sub_18AF7D9F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18AF79F14(a1, a2, a3, a4, CKFeatureSet.subscript.setter);
}

uint64_t dispatch thunk of CKFeatureProtocol.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CKFeatureProtocol.value.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CKFeatureProtocol.init(name:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t _s8CloudKit13CKZoneFeatureVwxx_0()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s8CloudKit13CKZoneFeatureVwcp_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *_s8CloudKit13CKZoneFeatureVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *_s8CloudKit13CKZoneFeatureVwta_0(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s8CloudKit13CKZoneFeatureVwet_0(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_18AF7DBFC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_18AF7DC3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 24);
}

uint64_t sub_18AF7DC44()
{
  return swift_retain();
}

uint64_t sub_18AF7DC4C()
{
  swift_bridgeObjectRelease();

  return sub_18AF341D0();
}

void *sub_18AF7DC90(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  uint64_t v6 = a2[4];
  uint64_t v7 = a2[5];
  swift_bridgeObjectRetain();
  sub_18AF7DC44();
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  return a1;
}

void *sub_18AF7DCFC(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  sub_18AF7DC44();
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  sub_18AF341D0();
  return a1;
}

__n128 sub_18AF7DD8C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_18AF7DDA0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v4;
  sub_18AF341D0();
  return a1;
}

uint64_t sub_18AF7DE00(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_18AF7DE40(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for CKFeatureSet.Iterator()
{
  return sub_18AF67C24();
}

void *sub_18AF7DEA8(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void type metadata accessor for CKRequiredFeatureSet()
{
}

uint64_t sub_18AF7DF04()
{
  return swift_getWitnessTable();
}

uint64_t sub_18AF7E0B8()
{
  return swift_getWitnessTable();
}

uint64_t sub_18AF7E164()
{
  type metadata accessor for Array();

  return swift_getWitnessTable();
}

uint64_t sub_18AF7E1AC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_18AF7E208(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_18AF7E214(uint64_t a1)
{
  return a1;
}

uint64_t sub_18AF7E258@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_18AF3848C();
  uint64_t result = v3(v2);
  *a1 = result;
  a1[1] = v5;
  return result;
}

uint64_t sub_18AF7E28C(uint64_t *a1)
{
  return sub_18AF7D528(a1);
}

Swift::Int sub_18AF7E2B8()
{
  Swift::Int v2 = *(void *)(v0 + 40);
  return NSObject._rawHashValue(seed:)(v2);
}

uint64_t sub_18AF7E2D4()
{
  return type metadata accessor for Array();
}

unint64_t sub_18AF7E2EC(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&unk_1ED7EE8A0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t sub_18AF7E33C(char a1)
{
  uint64_t result = 0x656D614E656E6F7ALL;
  switch(a1)
  {
    case 1:
      uint64_t result = sub_18AF185F8();
      break;
    case 2:
      uint64_t result = sub_18AF38F00();
      break;
    case 3:
      uint64_t result = sub_18AF35188();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_18AF7E3A8(char a1)
{
  uint64_t result = 0x656D614E656E6F7ALL;
  switch(a1)
  {
    case 1:
      uint64_t result = sub_18AF185F8();
      break;
    case 2:
      uint64_t result = sub_18AF38F00();
      break;
    case 3:
      uint64_t result = sub_18AF35188();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_18AF7E414(unsigned __int8 *a1, char *a2)
{
  return sub_18AFA1E54(*a1, *a2);
}

Swift::Int sub_18AF7E420()
{
  return sub_18AFC459C(*v0);
}

uint64_t sub_18AF7E428(uint64_t a1)
{
  return sub_18AFA20B0(a1, *v1);
}

Swift::Int sub_18AF7E430(uint64_t a1)
{
  return sub_18AFC474C(a1, *v1);
}

unint64_t sub_18AF7E438@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_18AF7E2EC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_18AF7E468@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_18AF7E33C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_18AF7E494()
{
  return sub_18AF7E3A8(*v0);
}

uint64_t sub_18AF7E49C@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_18AF7E338(a1);
  *a2 = result;
  return result;
}

void sub_18AF7E4C4(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_18AF7E4D0(uint64_t a1)
{
  unint64_t v2 = sub_18AF7E80C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_18AF7E50C(uint64_t a1)
{
  unint64_t v2 = sub_18AF7E80C();

  return MEMORY[0x1F41862B0](a1, v2);
}

void *CKRecordZoneID.init(from:)(void *a1)
{
  sub_18AF161EC(&qword_1E9124CD8);
  sub_18AF22CB0();
  MEMORY[0x1F4188790](v3);
  uint64_t v4 = sub_18AF25FCC(a1, a1[3]);
  sub_18AF7E80C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_18AF40A30((uint64_t)a1);
  }
  else
  {
    uint64_t v5 = sub_18AF16B44();
    uint64_t v7 = v6;
    LOBYTE(v17) = 1;
    uint64_t v15 = sub_18AF16B44();
    uint64_t v16 = v8;
    sub_18AF161EC(&qword_1E9124C90);
    sub_18AF7EB40(&qword_1E9124CA0);
    sub_18AF39264();
    type metadata accessor for Scope(0);
    sub_18AF7EBA4(&qword_1E9124CD0);
    sub_18AF39264();
    BOOL v14 = (void *)MEMORY[0x18C128F60](v5, v7);
    swift_bridgeObjectRelease();
    char v10 = (void *)MEMORY[0x18C128F60](v15, v16);
    swift_bridgeObjectRelease();
    if (v18)
    {
      id v11 = (void *)MEMORY[0x18C128F60](v17);
      swift_bridgeObjectRelease();
    }
    else
    {
      id v11 = 0;
    }
    uint64_t v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithZoneName_ownerName_anonymousCKUserID_databaseScope_, v14, v10, v11, v17);

    uint64_t v12 = sub_18AF3942C();
    v13(v12);
    sub_18AF40A30((uint64_t)a1);
  }
  return v4;
}

unint64_t sub_18AF7E80C()
{
  unint64_t result = qword_1E9124CA8;
  if (!qword_1E9124CA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9124CA8);
  }
  return result;
}

uint64_t CKRecordZoneID.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_18AF161EC(&qword_1E9124CE0);
  sub_18AF22CB0();
  MEMORY[0x1F4188790](v5);
  sub_18AF25FCC(a1, a1[3]);
  sub_18AF7E80C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  id v6 = objc_msgSend(v3, sel_zoneName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  sub_18AF16DB8();
  if (v2)
  {
    uint64_t v8 = sub_18AF34334();
    v9(v8);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    id v7 = objc_msgSend(v3, sel_ownerName);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_18AF16DB8();
    swift_bridgeObjectRelease();
    sub_18AF7EADC(v3);
    sub_18AF161EC(&qword_1E9124C90);
    sub_18AF7EB40(&qword_1E9124C98);
    sub_18AF390B0();
    swift_bridgeObjectRelease();
    objc_msgSend(v3, sel_databaseScope);
    type metadata accessor for Scope(0);
    sub_18AF7EBA4(&qword_1E9124CC0);
    sub_18AF390B0();
    uint64_t v10 = sub_18AF34334();
    return v11(v10);
  }
}

void *sub_18AF7EA8C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t result = CKRecordZoneID.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_18AF7EAB8(void *a1)
{
  return CKRecordZoneID.encode(to:)(a1);
}

uint64_t sub_18AF7EADC(void *a1)
{
  id v1 = objc_msgSend(a1, sel_anonymousCKUserID);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_18AF7EB40(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_18AF67604(&qword_1E9124C90);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18AF7EBA4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Scope(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *_s10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18AF7ECB4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *_s10CodingKeysOMa()
{
  return &_s10CodingKeysON;
}

unint64_t sub_18AF7ECF0()
{
  unint64_t result = qword_1E9126228;
  if (!qword_1E9126228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126228);
  }
  return result;
}

unint64_t sub_18AF7ED40()
{
  unint64_t result = qword_1E9124CB8;
  if (!qword_1E9124CB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9124CB8);
  }
  return result;
}

unint64_t sub_18AF7ED90()
{
  unint64_t result = qword_1E9124CB0;
  if (!qword_1E9124CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9124CB0);
  }
  return result;
}

void CKContainer.fetchAllLongLivedOperationIDs(completionHandler:)(uint64_t a1, uint64_t a2)
{
  v4[4] = a1;
  v4[5] = a2;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 1107296256;
  v4[2] = sub_18AF7EE90;
  v4[3] = &unk_1ED7F0F78;
  int v3 = _Block_copy(v4);
  swift_retain();
  swift_release();
  objc_msgSend(v2, sel_fetchAllLongLivedOperationIDsWithCompletionHandler_, v3);
  _Block_release(v3);
}

uint64_t sub_18AF7EE90(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v4 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2) {
    uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  swift_retain();
  id v6 = a3;
  v4(v5, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t CKContainer.allLongLivedOperationIDs()()
{
  sub_18AF339B8();
  v1[19] = v0;
  uint64_t v2 = sub_18AF161EC(&qword_1E9126238);
  v1[20] = v2;
  sub_18AF16DF8(v2);
  v1[21] = v3;
  v1[22] = swift_task_alloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v4, v5, v6);
}

uint64_t sub_18AF7EFC0()
{
  uint64_t v2 = v0[21];
  uint64_t v1 = v0[22];
  uint64_t v3 = (void *)v0[19];
  uint64_t v4 = v0[20];
  v0[2] = v0;
  v0[7] = v0 + 18;
  v0[3] = sub_18AF7F158;
  swift_continuation_init();
  v0[17] = v4;
  uint64_t v5 = sub_18AF3A5E0(v0 + 14);
  sub_18AF161EC((uint64_t *)&unk_1E9125540);
  sub_18AF161EC(&qword_1E9125660);
  CheckedContinuation.init(continuation:function:)();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 32))(v5, v1, v4);
  v0[10] = MEMORY[0x1E4F143A8];
  v0[11] = 1107296256;
  v0[12] = sub_18AF7F30C;
  v0[13] = &unk_1ED7F26E8;
  objc_msgSend(v3, sel_fetchAllLongLivedOperationIDsWithCompletionHandler_, v0 + 10);
  return MEMORY[0x1F41881E8](v0 + 2);
}

uint64_t sub_18AF7F158()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 184) = *(void *)(v3 + 48);
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v4, v5, v6);
}

uint64_t sub_18AF7F238()
{
  sub_18AF339B8();
  uint64_t v1 = *(void *)(v0 + 144);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_18AF7F2A0()
{
  sub_18AF2A56C();
  swift_willThrow();
  swift_task_dealloc();
  sub_18AF16D48();
  return v0();
}

void sub_18AF7F30C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = sub_18AF25FCC((void *)(a1 + 32), *(void *)(a1 + 56));
  if (a3)
  {
    id v6 = a3;
    sub_18AFCA114((uint64_t)v4, (uint64_t)v6);
  }
  else
  {
    uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    sub_18AFCA208((uint64_t)v4, v5);
  }
}

uint64_t sub_18AF7F3C0(uint64_t a1, uint64_t a2)
{
  return sub_18AF40A80(a2 + 32, a1 + 32);
}

uint64_t sub_18AF7F3D0(uint64_t a1)
{
  return sub_18AF40A30(a1 + 32);
}

void CKContainer.fetchLongLivedOperation(withID:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)MEMORY[0x18C128F60]();
  v9[4] = a3;
  v9[5] = a4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1107296256;
  void v9[2] = sub_18AF7F4A8;
  v9[3] = &unk_1ED7F2710;
  uint64_t v8 = _Block_copy(v9);
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_fetchLongLivedOperationWithID_completionHandler_, v7, v8);
  _Block_release(v8);
}

void sub_18AF7F4A8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t CKContainer.longLivedOperation(for:)()
{
  sub_18AF339B8();
  v1[20] = v2;
  v1[21] = v0;
  v1[19] = v3;
  uint64_t v4 = sub_18AF161EC(&qword_1E9127470);
  v1[22] = v4;
  sub_18AF16DF8(v4);
  v1[23] = v5;
  v1[24] = swift_task_alloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v6, v7, v8);
}

uint64_t sub_18AF7F5D0()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[24];
  uint64_t v3 = v0[22];
  id v7 = (id)v0[21];
  uint64_t v4 = MEMORY[0x18C128F60](v0[19], v0[20]);
  v0[25] = v4;
  v0[2] = v0;
  v0[7] = v0 + 18;
  v0[3] = sub_18AF7F780;
  swift_continuation_init();
  v0[17] = v3;
  uint64_t v5 = sub_18AF3A5E0(v0 + 14);
  sub_18AF161EC(&qword_1E9126248);
  sub_18AF161EC(&qword_1E9125660);
  CheckedContinuation.init(continuation:function:)();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v1 + 32))(v5, v2, v3);
  v0[10] = MEMORY[0x1E4F143A8];
  v0[11] = 1107296256;
  v0[12] = sub_18AF7F944;
  v0[13] = &unk_1ED7F1248;
  objc_msgSend(v7, sel_fetchLongLivedOperationWithID_completionHandler_, v4, v0 + 10);
  return MEMORY[0x1F41881E8](v0 + 2);
}

uint64_t sub_18AF7F780()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 208) = *(void *)(v3 + 48);
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v4, v5, v6);
}

uint64_t sub_18AF7F860()
{
  sub_18AF339B8();
  uint64_t v1 = *(void *)(v0 + 144);

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_18AF7F8D0()
{
  sub_18AF2A56C();
  uint64_t v1 = *(void **)(v0 + 200);
  swift_willThrow();

  swift_task_dealloc();
  sub_18AF16D48();
  return v2();
}

void sub_18AF7F944(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = sub_18AF25FCC((void *)(a1 + 32), *(void *)(a1 + 56));
  if (a3)
  {
    id v7 = a3;
    sub_18AFCA134((uint64_t)v5, (uint64_t)v7);
  }
  else
  {
    id v6 = a2;
    sub_18AFCA214();
  }
}

void CKContainer.configuredWith<A>(configuration:group:body:)(void *a1, void *a2, void (*a3)(void))
{
  uint64_t v4 = v3;
  swift_getObjectType();
  sub_18AF34EA0(0, &qword_1E91255D8);
  id v8 = a2;
  id v9 = a1;
  id v10 = sub_18AF47CCC(a1, a2);
  id v11 = objc_msgSend(v4, sel_implementation);
  id v12 = v10;
  id v13 = sub_18AF484B0(v11, v10);
  a3();
  sub_18AF7FEB4((uint64_t)v13, (uint64_t)nullsub_2);
}

uint64_t CKContainer.configuredWith<A>(configuration:group:body:)()
{
  sub_18AF339B8();
  v1[6] = v2;
  v1[7] = v0;
  v1[4] = v3;
  v1[5] = v4;
  v1[2] = v5;
  v1[3] = v6;
  v1[8] = swift_getObjectType();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AF7FB70()
{
  uint64_t v1 = (void *)v0[7];
  uint64_t v2 = (void *)v0[4];
  uint64_t v3 = (int *)v0[5];
  uint64_t v4 = (void *)v0[3];
  sub_18AF34EA0(0, &qword_1E91255D8);
  id v5 = v2;
  id v6 = v4;
  id v7 = sub_18AF47CCC(v4, v2);
  v0[9] = v7;
  id v8 = objc_msgSend(v1, sel_implementation);
  id v9 = v7;
  id v10 = sub_18AF484B0(v8, v7);
  v0[10] = v10;
  BOOL v14 = (uint64_t (*)(uint64_t, id))((char *)v3 + *v3);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[11] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_18AF7FCDC;
  uint64_t v12 = v0[2];
  return v14(v12, v10);
}

uint64_t sub_18AF7FCDC()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_18AF16D18();
  *id v5 = v4;
  *(void *)(v6 + 96) = v0;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AF7FDBC()
{
  sub_18AF339B8();
  uint64_t v1 = *(void **)(v0 + 72);
  uint64_t v2 = *(void **)(v0 + 80);
  sub_18AF7FEB4((uint64_t)v2, (uint64_t)nullsub_2);

  sub_18AF16D48();
  return v3();
}

uint64_t sub_18AF7FE38()
{
  sub_18AF339B8();
  uint64_t v1 = *(void **)(v0 + 72);
  uint64_t v2 = *(void **)(v0 + 80);
  sub_18AF7FEB4((uint64_t)v2, (uint64_t)nullsub_2);

  sub_18AF16D48();
  return v3();
}

uint64_t sub_18AF7FEB4(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = a1;
  return sub_18AF84A48((uint64_t)&v7, a2, 0, ObjectType, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v5);
}

uint64_t CKContainer.discoverUserIdentities(forEmailAddresses:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18AF80364(a1, a2, a3, &selRef_lookupInfosWithEmails_, &unk_1ED7F2AB8, sub_18AF84FF4, sub_18AF821AC);
}

uint64_t CKContainer.userIdentities(forEmailAddresses:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_18AF18508((uint64_t)sub_18AF7FF78);
}

uint64_t sub_18AF7FF78()
{
  sub_18AF339B8();
  uint64_t v1 = *(void **)(v0 + 24);
  sub_18AF33BAC((uint64_t)objc_msgSend(v1, sel_implementation));
  sub_18AF19324((uint64_t)objc_msgSend(v1, sel_convenienceConfiguration));
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_18AF22D78(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_18AF80038;
  uint64_t v5 = sub_18AF16DE0();
  return sub_18AF80150(v5, v6, v7);
}

uint64_t sub_18AF80038()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16D18();
  void *v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_18AF16AA0();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    id v10 = *(void **)(v3 + 32);

    uint64_t v11 = sub_18AF3434C();
    return v12(v11);
  }
}

uint64_t sub_18AF80150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  void v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return sub_18AF18508((uint64_t)sub_18AF8016C);
}

uint64_t sub_18AF8016C()
{
  sub_18AF2A56C();
  uint64_t v1 = sub_18AF34044();
  sub_18AF1D73C(v1);
  uint64_t v2 = swift_task_alloc();
  sub_18AF1A030(v2);
  sub_18AF161EC(&qword_1E9126370);
  sub_18AF16B64();
  void *v0 = v3;
  v0[1] = sub_18AF80240;
  sub_18AF2A5D4();
  sub_18AF16AA0();
  sub_18AF1A024();
  return MEMORY[0x1F4188160]();
}

uint64_t sub_18AF80240()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16D18();
  void *v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t CKContainer.discoverUserIdentities(forPhoneNumbers:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18AF80364(a1, a2, a3, &selRef_lookupInfosWithPhoneNumbers_, &unk_1ED7F2A68, sub_18AF84EF8, sub_18AF821AC);
}

#error "18AF803F4: call analysis failed (funcsize=48)"

uint64_t CKContainer.userIdentities(forPhoneNumbers:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_18AF18508((uint64_t)sub_18AF8043C);
}

uint64_t sub_18AF8043C()
{
  sub_18AF339B8();
  uint64_t v1 = *(void **)(v0 + 24);
  sub_18AF33BAC((uint64_t)objc_msgSend(v1, sel_implementation));
  sub_18AF19324((uint64_t)objc_msgSend(v1, sel_convenienceConfiguration));
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_18AF22D78(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_18AF804FC;
  uint64_t v5 = sub_18AF16DE0();
  return sub_18AF80674(v5, v6, v7);
}

uint64_t sub_18AF804FC()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16D18();
  void *v6 = v5;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_18AF16AA0();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    id v10 = *(void **)(v3 + 32);

    uint64_t v11 = sub_18AF3434C();
    return v12(v11);
  }
}

uint64_t sub_18AF80614()
{
  sub_18AF339B8();
  uint64_t v1 = *(void **)(v0 + 32);

  sub_18AF16D48();
  return v2();
}

uint64_t sub_18AF80674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  void v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return sub_18AF18508((uint64_t)sub_18AF80690);
}

uint64_t sub_18AF80690()
{
  sub_18AF2A56C();
  uint64_t v1 = sub_18AF34044();
  sub_18AF1D73C(v1);
  uint64_t v2 = swift_task_alloc();
  sub_18AF1A030(v2);
  sub_18AF161EC(&qword_1E9126370);
  sub_18AF16B64();
  void *v0 = v3;
  v0[1] = sub_18AF80764;
  sub_18AF2A5D4();
  sub_18AF16AA0();
  sub_18AF1A024();
  return MEMORY[0x1F4188160]();
}

uint64_t sub_18AF80764()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16D18();
  void *v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AF80850()
{
  sub_18AF339B8();
  swift_task_dealloc();
  sub_18AF16D48();
  return v0();
}

void CKContainer.discoverUserIdentities(forUserRecordIDs:completionHandler:)()
{
}

void sub_18AF808E0()
{
  id v1 = objc_msgSend(v0, sel_implementation);
  id v2 = objc_msgSend(v0, sel_convenienceConfiguration);
  sub_18AF810CC();
}

uint64_t CKContainer.userIdentities(forUserRecordIDs:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_18AF18508((uint64_t)sub_18AF809C4);
}

uint64_t sub_18AF809C4()
{
  sub_18AF339B8();
  uint64_t v1 = *(void **)(v0 + 24);
  sub_18AF33BAC((uint64_t)objc_msgSend(v1, sel_implementation));
  sub_18AF19324((uint64_t)objc_msgSend(v1, sel_convenienceConfiguration));
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_18AF22D78(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_18AF80038;
  uint64_t v5 = sub_18AF16DE0();
  return sub_18AF80A84(v5, v6, v7);
}

uint64_t sub_18AF80A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  void v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return sub_18AF18508((uint64_t)sub_18AF80AA0);
}

uint64_t sub_18AF80AA0()
{
  sub_18AF2A56C();
  uint64_t v1 = sub_18AF34044();
  sub_18AF1D73C(v1);
  uint64_t v2 = swift_task_alloc();
  sub_18AF1A030(v2);
  sub_18AF161EC(&qword_1E9126350);
  sub_18AF16B64();
  void *v0 = v3;
  v0[1] = sub_18AF80240;
  sub_18AF2A5D4();
  sub_18AF16AA0();
  sub_18AF1A024();
  return MEMORY[0x1F4188160]();
}

uint64_t CKContainer.fetchShareParticipants(forEmailAddresses:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18AF80364(a1, a2, a3, &selRef_lookupInfosWithEmails_, &unk_1ED7F2950, sub_18AF84DBC, sub_18AF833DC);
}

uint64_t CKContainer.shareParticipants(forEmailAddresses:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_18AF18508((uint64_t)sub_18AF80BC8);
}

uint64_t sub_18AF80BC8()
{
  sub_18AF339B8();
  uint64_t v1 = *(void **)(v0 + 24);
  sub_18AF33BAC((uint64_t)objc_msgSend(v1, sel_implementation));
  sub_18AF19324((uint64_t)objc_msgSend(v1, sel_convenienceConfiguration));
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_18AF22D78(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_18AF80038;
  uint64_t v5 = sub_18AF16DE0();
  return sub_18AF80C88(v5, v6, v7);
}

uint64_t sub_18AF80C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  void v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return sub_18AF18508((uint64_t)sub_18AF80CA4);
}

uint64_t sub_18AF80CA4()
{
  sub_18AF2A56C();
  uint64_t v1 = sub_18AF34044();
  sub_18AF1D73C(v1);
  uint64_t v2 = swift_task_alloc();
  sub_18AF1A030(v2);
  sub_18AF161EC(&qword_1E9126338);
  sub_18AF16B64();
  void *v0 = v3;
  v0[1] = sub_18AF80240;
  sub_18AF2A5D4();
  sub_18AF16AA0();
  sub_18AF1A024();
  return MEMORY[0x1F4188160]();
}

uint64_t CKContainer.fetchShareParticipants(forPhoneNumbers:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18AF80364(a1, a2, a3, &selRef_lookupInfosWithPhoneNumbers_, &unk_1ED7F2900, sub_18AF84D64, sub_18AF833DC);
}

uint64_t sub_18AF80DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void (*a23)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  sub_18AF33850();
  uint64_t v41 = v23;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v34 = self;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v36 = objc_msgSend(v34, *v25, isa);

  sub_18AF34EA0(0, &qword_1E9127460);
  uint64_t v37 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = v29;
  *(void *)(v38 + 24) = v27;
  swift_retain();
  a23(v37, v33, v31, v41, v38);
  swift_bridgeObjectRelease();
  sub_18AF16CC4();
  return swift_release();
}

uint64_t CKContainer.shareParticipants(forPhoneNumbers:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_18AF18508((uint64_t)sub_18AF80EE8);
}

uint64_t sub_18AF80EE8()
{
  sub_18AF339B8();
  uint64_t v1 = *(void **)(v0 + 24);
  sub_18AF33BAC((uint64_t)objc_msgSend(v1, sel_implementation));
  sub_18AF19324((uint64_t)objc_msgSend(v1, sel_convenienceConfiguration));
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_18AF22D78(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_18AF80038;
  uint64_t v5 = sub_18AF16DE0();
  return sub_18AF80FA8(v5, v6, v7);
}

uint64_t sub_18AF80FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  void v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return sub_18AF18508((uint64_t)sub_18AF80FC4);
}

uint64_t sub_18AF80FC4()
{
  sub_18AF2A56C();
  uint64_t v1 = sub_18AF34044();
  sub_18AF1D73C(v1);
  uint64_t v2 = swift_task_alloc();
  sub_18AF1A030(v2);
  sub_18AF161EC(&qword_1E9126338);
  sub_18AF16B64();
  void *v0 = v3;
  v0[1] = sub_18AF80240;
  sub_18AF2A5D4();
  sub_18AF16AA0();
  sub_18AF1A024();
  return MEMORY[0x1F4188160]();
}

void CKContainer.fetchShareParticipants(forUserRecordIDs:completionHandler:)()
{
}

uint64_t sub_18AF810CC()
{
  sub_18AF33850();
  uint64_t v18 = v0;
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = self;
  sub_18AF34EA0(0, &qword_1E91255F0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v13 = objc_msgSend(v11, sel_lookupInfosWithRecordIDs_, isa);

  sub_18AF34EA0(0, &qword_1E9127460);
  uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v6;
  *(void *)(v15 + 24) = v4;
  swift_retain();
  v18(v14, v10, v8, v2, v15);
  swift_bridgeObjectRelease();
  sub_18AF16CC4();
  return swift_release();
}

uint64_t CKContainer.shareParticipants(forUserRecordIDs:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_18AF18508((uint64_t)sub_18AF81214);
}

uint64_t sub_18AF81214()
{
  sub_18AF339B8();
  uint64_t v1 = *(void **)(v0 + 24);
  sub_18AF33BAC((uint64_t)objc_msgSend(v1, sel_implementation));
  sub_18AF19324((uint64_t)objc_msgSend(v1, sel_convenienceConfiguration));
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_18AF22D78(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_18AF80038;
  uint64_t v5 = sub_18AF16DE0();
  return sub_18AF812D4(v5, v6, v7);
}

uint64_t sub_18AF812D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  void v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return sub_18AF18508((uint64_t)sub_18AF812F0);
}

uint64_t sub_18AF812F0()
{
  sub_18AF2A56C();
  uint64_t v1 = sub_18AF34044();
  sub_18AF1D73C(v1);
  uint64_t v2 = swift_task_alloc();
  sub_18AF1A030(v2);
  sub_18AF161EC(&qword_1E9126318);
  sub_18AF16B64();
  void *v0 = v3;
  v0[1] = sub_18AF80240;
  sub_18AF2A5D4();
  sub_18AF16AA0();
  sub_18AF1A024();
  return MEMORY[0x1F4188160]();
}

uint64_t CKContainer.fetchShareMetadatas(for:completionHandler:)(uint64_t a1)
{
  id v3 = objc_msgSend(v1, sel_implementation);
  id v4 = objc_msgSend(v1, sel_convenienceConfiguration);
  type metadata accessor for URL();
  sub_18AF34EA0(0, &qword_1E91262B8);
  sub_18AF814C4();
  uint64_t v5 = Dictionary.init(dictionaryLiteral:)();
  sub_18AF81514(a1, v5);

  return swift_bridgeObjectRelease();
}

unint64_t sub_18AF814C4()
{
  unint64_t result = qword_1E9126200;
  if (!qword_1E9126200)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126200);
  }
  return result;
}

uint64_t sub_18AF81514(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_18AF34EA0(0, &qword_1E9126310);
  swift_bridgeObjectRetain();
  id v4 = sub_18AF844D4();
  if (*(void *)(a2 + 16)) {
    sub_18AF84BC4(a2, v4);
  }
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = MEMORY[0x1E4FBC868];
  swift_retain();
  CKFetchShareMetadataOperation.perShareMetadataResultBlock.setter((uint64_t)sub_18AF84C64, v5);
  uint64_t v6 = (void *)swift_allocObject();
  sub_18AF30694(v6);
  swift_retain();
  id v7 = CKFetchShareMetadataOperation.fetchShareMetadataResultBlock.setter((uint64_t)sub_18AF84C74, v3);
  sub_18AF33D8C((uint64_t)v7, sel__scheduleConvenienceOperation_wrappingContainer_convenienceConfiguration_);

  return swift_release();
}

uint64_t CKContainer.shareMetadatas(for:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_18AF18508((uint64_t)sub_18AF81664);
}

uint64_t sub_18AF81664()
{
  sub_18AF2A56C();
  uint64_t v1 = (void *)v0[3];
  v0[4] = objc_msgSend(v1, sel_implementation);
  id v2 = objc_msgSend(v1, sel_convenienceConfiguration);
  v0[5] = v2;
  type metadata accessor for URL();
  sub_18AF34EA0(0, &qword_1E91262B8);
  sub_18AF814C4();
  uint64_t v3 = Dictionary.init(dictionaryLiteral:)();
  v0[6] = v3;
  id v4 = (void *)swift_task_alloc();
  v0[7] = v4;
  void *v4 = v0;
  v4[1] = sub_18AF81794;
  uint64_t v6 = v0[2];
  uint64_t v5 = v0[3];
  return sub_18AF81920(v6, v3, v5, (uint64_t)v2);
}

uint64_t sub_18AF81794()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16D18();
  void *v6 = v5;
  v3[8] = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_18AF16AA0();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    uint64_t v10 = (void *)v3[5];
    uint64_t v11 = (void *)v3[4];
    swift_bridgeObjectRelease();

    uint64_t v12 = sub_18AF3434C();
    return v13(v12);
  }
}

uint64_t sub_18AF818B4()
{
  sub_18AF339B8();
  uint64_t v1 = (void *)v0[5];
  id v2 = (void *)v0[4];
  swift_bridgeObjectRelease();

  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_18AF81920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  return sub_18AF18508((uint64_t)sub_18AF81940);
}

uint64_t sub_18AF81940()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  long long v5 = *(_OWORD *)(v0 + 24);
  *(void *)(v4 + 16) = v1;
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)(v4 + 40) = v3;
  *(void *)(v4 + 48) = v2;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v6;
  sub_18AF161EC(&qword_1E9126300);
  sub_18AF16B64();
  void *v6 = v7;
  v6[1] = sub_18AF81A48;
  sub_18AF2A5D4();
  sub_18AF16AA0();
  sub_18AF1A024();
  return MEMORY[0x1F4188160]();
}

uint64_t sub_18AF81A48()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16D18();
  void *v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AF81B30()
{
  sub_18AF339B8();
  swift_task_dealloc();
  sub_18AF16D48();
  return v0();
}

uint64_t CKContainer.shareMetadatas(for:invitationTokensByShareURL:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_18AF18508((uint64_t)sub_18AF81BA8);
}

uint64_t sub_18AF81BA8()
{
  sub_18AF339B8();
  uint64_t v1 = (void *)v0[4];
  v0[5] = objc_msgSend(v1, sel_implementation);
  id v2 = objc_msgSend(v1, sel_convenienceConfiguration);
  v0[6] = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[7] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_18AF81C88;
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[2];
  return sub_18AF81920(v6, v4, v5, (uint64_t)v2);
}

uint64_t sub_18AF81C88()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16D18();
  void *v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_18AF16AA0();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    uint64_t v10 = *(void **)(v3 + 40);

    uint64_t v11 = sub_18AF3434C();
    return v12(v11);
  }
}

uint64_t sub_18AF81DA0()
{
  sub_18AF339B8();
  uint64_t v1 = *(void **)(v0 + 40);

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void CKContainer.accept(_:completionHandler:)()
{
  id v1 = objc_msgSend(v0, sel_implementation);
  id v2 = objc_msgSend(v0, sel_convenienceConfiguration);
  sub_18AF81EB0();
}

uint64_t sub_18AF81EB0()
{
  sub_18AF40FE4();
  sub_18AF34EA0(0, &qword_1E91262F8);
  uint64_t v1 = swift_bridgeObjectRetain();
  id v2 = sub_18AF83534(v1, &qword_1E91261F8, (uint64_t)off_1E545EFE0, (SEL *)&selRef_initWithShareMetadatas_);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = MEMORY[0x1E4FBC868];
  swift_retain();
  CKAcceptSharesOperation.perShareResultBlock.setter((uint64_t)sub_18AF849FC, v3);
  uint64_t v4 = (void *)swift_allocObject();
  sub_18AF30694(v4);
  swift_retain();
  id v5 = CKAcceptSharesOperation.acceptSharesResultBlock.setter((uint64_t)sub_18AF85078, v0);
  sub_18AF33D8C((uint64_t)v5, sel__scheduleConvenienceOperation_wrappingContainer_convenienceConfiguration_);

  return swift_release();
}

uint64_t CKContainer.accept(_:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_18AF18508((uint64_t)sub_18AF81FEC);
}

uint64_t sub_18AF81FEC()
{
  sub_18AF339B8();
  uint64_t v1 = *(void **)(v0 + 24);
  sub_18AF33BAC((uint64_t)objc_msgSend(v1, sel_implementation));
  sub_18AF19324((uint64_t)objc_msgSend(v1, sel_convenienceConfiguration));
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_18AF22D78(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_18AF80038;
  uint64_t v5 = sub_18AF16DE0();
  return sub_18AF820AC(v5, v6, v7);
}

uint64_t sub_18AF820AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  void v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return sub_18AF18508((uint64_t)sub_18AF820C8);
}

uint64_t sub_18AF820C8()
{
  sub_18AF2A56C();
  uint64_t v1 = sub_18AF34044();
  sub_18AF1D73C(v1);
  uint64_t v2 = swift_task_alloc();
  sub_18AF1A030(v2);
  sub_18AF161EC(&qword_1E91262E8);
  sub_18AF16B64();
  void *v0 = v3;
  v0[1] = sub_18AF80240;
  sub_18AF2A5D4();
  sub_18AF16AA0();
  sub_18AF1A024();
  return MEMORY[0x1F4188160]();
}

ValueMetadata *type metadata accessor for CKContainer.Application()
{
  return &type metadata for CKContainer.Application;
}

uint64_t sub_18AF821AC()
{
  sub_18AF40FE4();
  sub_18AF34EA0(0, &qword_1E9126360);
  uint64_t v0 = swift_bridgeObjectRetain();
  id v1 = sub_18AF83534(v0, &qword_1E9127460, (uint64_t)off_1E545F1A0, (SEL *)&selRef_initWithUserIdentityLookupInfos_);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = MEMORY[0x1E4FBC868];
  v7[4] = sub_18AF84E50;
  v7[5] = v2;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1107296256;
  void v7[2] = sub_18AF823B8;
  void v7[3] = &unk_1ED7F29E0;
  uint64_t v3 = _Block_copy(v7);
  swift_retain();
  swift_release();
  objc_msgSend(v1, sel_setUserIdentityDiscoveredBlock_, v3);
  _Block_release(v3);
  uint64_t v4 = (void *)swift_allocObject();
  sub_18AF30694(v4);
  swift_retain();
  id v5 = CKDiscoverUserIdentitiesOperation.discoverUserIdentitiesResultBlock.setter((uint64_t)sub_18AF85078, (uint64_t)v3);
  sub_18AF33D8C((uint64_t)v5, sel__scheduleConvenienceOperation_wrappingContainer_convenienceConfiguration_);

  return swift_release();
}

void sub_18AF82348(void *a1, void *a2)
{
  swift_beginAccess();
  id v4 = a2;
  id v5 = a1;
  sub_18AFF3420();
  swift_endAccess();
}

void sub_18AF823B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void (**)(id, id))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(v7, v6);
  swift_release();
}

#error "18AF825A8: call analysis failed (funcsize=96)"

uint64_t sub_18AF825D8@<X0>(unint64_t *a1@<X0>, SEL *a2@<X1>, const char *a3@<X2>, NSObject **a4@<X8>)
{
  unint64_t v6 = *a1;
  if ((*a1 & 0xC000000000000001) != 0)
  {
    unint64_t v53 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    unint64_t v9 = __CocoaDictionary.makeIterator()() | 0x8000000000000000;
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(v6 + 32);
    uint64_t v7 = ~v10;
    unint64_t v53 = v6 + 64;
    uint64_t v11 = -v10;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v8 = v12 & *(void *)(v6 + 64);
    unint64_t v9 = *a1;
  }
  swift_bridgeObjectRetain();
  int64_t v13 = 0;
  int64_t v51 = (unint64_t)(v7 + 64) >> 6;
  int64_t v50 = MEMORY[0x1E4FBC868];
  uint64_t v54 = a2;
  while (1)
  {
    int64_t v14 = v13;
    if ((v9 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaDictionary.Iterator.next()()) {
      goto LABEL_45;
    }
    sub_18AF34EA0(0, &qword_1E9127460);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v17 = v55;
    swift_unknownObjectRelease();
    Swift::Int v4 = sub_18AF34EA0(0, (unint64_t *)&unk_1E9125A70);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v18 = v55;
    swift_unknownObjectRelease();
    if (!v55) {
      goto LABEL_45;
    }
LABEL_29:
    uint64_t v23 = sub_18AF61134(v17, a2);
    if (v24)
    {
      uint64_t v32 = v23;
      uint64_t v33 = v24;
      uint64_t v48 = v18;
      char isUnique = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v55 = v50;
      sub_18AF7CF60(v32, v33);
      sub_18AF42D60();
      if (v36) {
        goto LABEL_47;
      }
      unint64_t v37 = v34;
      char v38 = v35;
      sub_18AF161EC((uint64_t *)&unk_1E9126380);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v4))
      {
        unint64_t v39 = sub_18AF7CF60(v32, v33);
        if ((v38 & 1) != (v40 & 1)) {
          goto LABEL_49;
        }
        unint64_t v37 = v39;
      }
      Swift::Int v4 = (Swift::Int)v50;
      if (v38)
      {
        Class isa = v50[7].isa;

        *((void *)isa + v37) = v48;
        uint64_t v42 = v48;
      }
      else
      {
        v50[(v37 >> 6) + 8].Class isa = (Class)((uint64_t)v50[(v37 >> 6) + 8].isa | (1 << v37));
        uint64_t v43 = (uint64_t *)((char *)v50[6].isa + 16 * v37);
        uint64_t *v43 = v32;
        v43[1] = v33;
        uint64_t v42 = v48;
        *((void *)v50[7].isa + v37) = v48;
        Class v44 = v50[2].isa;
        BOOL v36 = __OFADD__(v44, 1);
        uint64_t v45 = (Class)((char *)v44 + 1);
        if (v36) {
          goto LABEL_48;
        }
        v50[2].Class isa = v45;
        swift_bridgeObjectRetain();
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a2 = v54;
    }
    else
    {
      if (qword_1EB279458 != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      sub_18AF412A0(v25, (uint64_t)qword_1EB279440);
      uint64_t v26 = v17;
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.error.getter();
      Swift::Int v4 = v28;
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = swift_slowAlloc();
        uint64_t v30 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 138412290;
        *(void *)(v29 + 4) = v26;
        void *v30 = v17;
        _os_log_impl(&dword_18AF10000, v27, (os_log_type_t)v4, a3, (uint8_t *)v29, 0xCu);
        sub_18AF161EC((uint64_t *)&unk_1E9125610);
        swift_arrayDestroy();
        a2 = v54;
        sub_18AF388F8();
        sub_18AF388F8();
        uint64_t v31 = v26;
      }
      else
      {

        uint64_t v31 = v18;
        uint64_t v18 = v26;
        uint64_t v27 = v26;
      }
    }
  }
  if (v8)
  {
    unint64_t v15 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v16 = v15 | (v13 << 6);
LABEL_28:
    Swift::String v22 = *(void **)(*(void *)(v9 + 56) + 8 * v16);
    uint64_t v17 = *(id *)(*(void *)(v9 + 48) + 8 * v16);
    uint64_t v18 = v22;
    if (!v17) {
      goto LABEL_45;
    }
    goto LABEL_29;
  }
  int64_t v19 = v13 + 1;
  if (!__OFADD__(v13, 1))
  {
    if (v19 >= v51) {
      goto LABEL_45;
    }
    unint64_t v20 = *(void *)(v53 + 8 * v19);
    ++v13;
    if (!v20)
    {
      int64_t v13 = v14 + 2;
      if (v14 + 2 >= v51) {
        goto LABEL_45;
      }
      unint64_t v20 = *(void *)(v53 + 8 * v13);
      if (!v20)
      {
        int64_t v13 = v14 + 3;
        if (v14 + 3 >= v51) {
          goto LABEL_45;
        }
        unint64_t v20 = *(void *)(v53 + 8 * v13);
        if (!v20)
        {
          int64_t v13 = v14 + 4;
          if (v14 + 4 >= v51) {
            goto LABEL_45;
          }
          unint64_t v20 = *(void *)(v53 + 8 * v13);
          if (!v20)
          {
            int64_t v21 = v14 + 5;
            while (v21 < v51)
            {
              unint64_t v20 = *(void *)(v53 + 8 * v21++);
              if (v20)
              {
                int64_t v13 = v21 - 1;
                goto LABEL_27;
              }
            }
LABEL_45:
            uint64_t result = sub_18AF341D0();
            *a4 = v50;
            return result;
          }
        }
      }
    }
LABEL_27:
    unint64_t v8 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v13 << 6);
    goto LABEL_28;
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

#error "18AF82C84: call analysis failed (funcsize=96)"

uint64_t sub_18AF82CB4@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v2 = *a1;
  if ((*a1 & 0xC000000000000001) != 0)
  {
    unint64_t v58 = 0;
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    unint64_t v5 = __CocoaDictionary.makeIterator()() | 0x8000000000000000;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(v2 + 32);
    uint64_t v3 = ~v6;
    unint64_t v58 = v2 + 64;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v4 = v8 & *(void *)(v2 + 64);
    unint64_t v5 = *a1;
  }
  swift_bridgeObjectRetain();
  int64_t v9 = 0;
  int64_t v57 = (unint64_t)(v3 + 64) >> 6;
  uint64_t v56 = MEMORY[0x1E4FBC868];
  while (1)
  {
    int64_t v10 = v9;
    if ((v5 & 0x8000000000000000) != 0)
    {
      if (!__CocoaDictionary.Iterator.next()()) {
        goto LABEL_51;
      }
      sub_18AF34EA0(0, &qword_1E9127460);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      int64_t v13 = v59;
      swift_unknownObjectRelease();
      sub_18AF34EA0(0, (unint64_t *)&unk_1E9125A70);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      int64_t v14 = v59;
      swift_unknownObjectRelease();
      if (!v59) {
        goto LABEL_51;
      }
      goto LABEL_29;
    }
    if (!v4) {
      break;
    }
    unint64_t v11 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    unint64_t v12 = v11 | (v9 << 6);
LABEL_28:
    uint64_t v18 = *(void **)(*(void *)(v5 + 56) + 8 * v12);
    int64_t v13 = *(id *)(*(void *)(v5 + 48) + 8 * v12);
    int64_t v14 = v18;
    if (!v13) {
      goto LABEL_51;
    }
LABEL_29:
    id v19 = [v13 userRecordID];
    if (v19)
    {
      uint64_t v29 = v19;
      uint64_t v30 = v56;
      unint64_t v54 = v5;
      if ((v56 & 0xC000000000000001) != 0)
      {
        if (v56 >= 0) {
          uint64_t v30 = (v56 & 0xFFFFFFFFFFFFFF8);
        }
        id v31 = v19;
        uint64_t v32 = v14;
        uint64_t v33 = __CocoaSet.count.getter();
        if (__OFADD__(v33, 1)) {
          goto LABEL_54;
        }
        sub_18AFC2B1C((uint64_t)v30, v33 + 1);
        uint64_t v30 = v34;
      }
      else
      {
        id v35 = v19;
        BOOL v36 = v14;
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v59 = v30;
      sub_18AF7D0F8();
      Class isa = v30[2].isa;
      BOOL v41 = (v39 & 1) == 0;
      Swift::Int v42 = (Swift::Int)isa + v41;
      if (__OFADD__(isa, v41)) {
        goto LABEL_53;
      }
      unint64_t v43 = v38;
      char v44 = v39;
      sub_18AF161EC(&qword_1E9126368);
      Swift::Bool v45 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v42);
      unint64_t v5 = v54;
      if (v45)
      {
        sub_18AF7D0F8();
        if ((v44 & 1) != (v47 & 1)) {
          goto LABEL_56;
        }
        unint64_t v43 = v46;
      }
      uint64_t v56 = (uint64_t)v30;
      if (v44)
      {
        Class v48 = v30[7].isa;

        *((void *)v48 + v43) = v14;
      }
      else
      {
        v30[(v43 >> 6) + 8].Class isa = (Class)((uint64_t)v30[(v43 >> 6) + 8].isa | (1 << v43));
        *((void *)v30[6].isa + v43) = v29;
        *((void *)v30[7].isa + v43) = v14;
        Class v49 = v30[2].isa;
        BOOL v50 = __OFADD__(v49, 1);
        int64_t v51 = (Class)((char *)v49 + 1);
        if (v50) {
          goto LABEL_55;
        }
        v30[2].Class isa = v51;
        id v52 = v29;
      }

      swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_1EB279458 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      sub_18AF412A0(v20, (uint64_t)qword_1EB279440);
      int64_t v21 = v13;
      Swift::String v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = swift_slowAlloc();
        unint64_t v25 = v5;
        uint64_t v26 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 138412290;
        *(void *)(v24 + 4) = v21;
        void *v26 = v13;
        _os_log_impl(&dword_18AF10000, v22, v23, "Unexpected lookup info that lacks user record id: %@", (uint8_t *)v24, 0xCu);
        sub_18AF161EC((uint64_t *)&unk_1E9125610);
        swift_arrayDestroy();
        uint64_t v27 = v26;
        unint64_t v5 = v25;
        MEMORY[0x18C12BB10](v27, -1, -1);
        MEMORY[0x18C12BB10](v24, -1, -1);
        os_log_type_t v28 = v21;
      }
      else
      {

        os_log_type_t v28 = v14;
        int64_t v14 = v21;
        Swift::String v22 = v21;
      }
    }
  }
  int64_t v15 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v15 >= v57) {
      goto LABEL_51;
    }
    unint64_t v16 = *(void *)(v58 + 8 * v15);
    ++v9;
    if (!v16)
    {
      int64_t v9 = v10 + 2;
      if (v10 + 2 >= v57) {
        goto LABEL_51;
      }
      unint64_t v16 = *(void *)(v58 + 8 * v9);
      if (!v16)
      {
        int64_t v9 = v10 + 3;
        if (v10 + 3 >= v57) {
          goto LABEL_51;
        }
        unint64_t v16 = *(void *)(v58 + 8 * v9);
        if (!v16)
        {
          int64_t v9 = v10 + 4;
          if (v10 + 4 >= v57) {
            goto LABEL_51;
          }
          unint64_t v16 = *(void *)(v58 + 8 * v9);
          if (!v16)
          {
            int64_t v17 = v10 + 5;
            while (v17 < v57)
            {
              unint64_t v16 = *(void *)(v58 + 8 * v17++);
              if (v16)
              {
                int64_t v9 = v17 - 1;
                goto LABEL_27;
              }
            }
LABEL_51:
            uint64_t result = sub_18AF341D0();
            *a2 = v56;
            return result;
          }
        }
      }
    }
LABEL_27:
    unint64_t v4 = (v16 - 1) & v16;
    unint64_t v12 = __clz(__rbit64(v16)) + (v9 << 6);
    goto LABEL_28;
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  sub_18AF34EA0(0, &qword_1E91255F0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_18AF8324C(uint64_t a1)
{
  uint64_t v2 = sub_18AF161EC(&qword_1E9126358);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __n128 v5 = MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7 + v6, (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  sub_18AF810CC();
  return swift_release();
}

uint64_t sub_18AF833DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = v5;
  sub_18AF34EA0(0, &qword_1E9126328);
  uint64_t v11 = swift_bridgeObjectRetain();
  id v12 = sub_18AF83534(v11, &qword_1E9127460, (uint64_t)off_1E545F1A0, (SEL *)&selRef_initWithUserIdentityLookupInfos_);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = MEMORY[0x1E4FBC868];
  swift_retain();
  CKFetchShareParticipantsOperation.perShareParticipantResultBlock.setter((uint64_t)sub_18AF84CF4, v13);
  int64_t v14 = (void *)swift_allocObject();
  long long v14[2] = v13;
  void v14[3] = a4;
  void v14[4] = a5;
  swift_retain();
  swift_retain();
  CKFetchShareParticipantsOperation.fetchShareParticipantsResultBlock.setter((uint64_t)sub_18AF85078, (uint64_t)v14);
  objc_msgSend(v6, sel__scheduleConvenienceOperation_wrappingContainer_convenienceConfiguration_, v12, a2, a3);

  return swift_release();
}

id sub_18AF83534(uint64_t a1, unint64_t *a2, uint64_t a3, SEL *a4)
{
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  sub_18AF34EA0(0, a2);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v6, *a4, isa);

  return v8;
}

void sub_18AF835C4(void *a1, char a2, uint64_t a3, void (*a4)(uint64_t))
{
  char v5 = a2 & 1;
  if (a2)
  {
    id v6 = a1;
    id v7 = a1;
  }
  else
  {
    swift_beginAccess();
    id v6 = *(void **)(a3 + 16);
    swift_bridgeObjectRetain();
  }
  uint64_t v9 = sub_18AF85080();
  a4(v9);
  sub_18AF84F44(v6, v5);
}

#error "18AF837B8: call analysis failed (funcsize=96)"

void sub_18AF837E8()
{
  void (*v5)(void **__return_ptr, void **, uint64_t, uint64_t);
  char v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;

  sub_18AF411C8();
  if (v6)
  {
    id v7 = v2;
  }
  else
  {
    int64_t v10 = v2;
    v5(&v9, &v10, v3, v4);
    uint64_t v2 = v9;
  }
  sub_18AF84F38(v2, v0);
  id v8 = sub_18AF85080();
  v1(v8);
  sub_18AF84F44(v2, v0);
  sub_18AF84F44(v2, v0);
}

uint64_t sub_18AF83874@<X0>(uint64_t *a1@<X0>, SEL *a2@<X1>, const char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v49 = *a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(*a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(*a1 + 64);
  int64_t v50 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  Swift::Int v8 = 0;
  unint64_t v46 = (void *)MEMORY[0x1E4FBC868];
  uint64_t v48 = v4;
  while (v7)
  {
    unint64_t v9 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v10 = v9 | (v8 << 6);
LABEL_20:
    int64_t v14 = *(void **)(*(void *)(v4 + 48) + 8 * v10);
    uint64_t v15 = *(void *)(v4 + 56) + 16 * v10;
    unint64_t v16 = *(void **)v15;
    char v17 = *(unsigned char *)(v15 + 8);
    id v18 = v14;
    sub_18AF84C94(v16);
    uint64_t v19 = sub_18AF61134(v18, a2);
    if (v20)
    {
      uint64_t v29 = v19;
      uint64_t v30 = v20;
      sub_18AF84C94(v16);
      char isUnique = swift_isUniquelyReferenced_nonNull_native();
      sub_18AF7CF60(v29, v30);
      sub_18AF42D60();
      if (v33) {
        goto LABEL_39;
      }
      unint64_t v34 = v31;
      char v35 = v32;
      sub_18AF161EC(&qword_1E9126348);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v8))
      {
        unint64_t v36 = sub_18AF7CF60(v29, v30);
        if ((v35 & 1) != (v37 & 1)) {
          goto LABEL_41;
        }
        unint64_t v34 = v36;
      }
      if (v35)
      {
        uint64_t v38 = v46[7] + 16 * v34;
        sub_18AF62BA4(*(id *)v38);
        *(void *)uint64_t v38 = v16;
        *(unsigned char *)(v38 + 8) = v17;
      }
      else
      {
        v46[(v34 >> 6) + 8] |= 1 << v34;
        char v39 = (uint64_t *)(v46[6] + 16 * v34);
        *char v39 = v29;
        v39[1] = v30;
        uint64_t v40 = v46[7] + 16 * v34;
        *(void *)uint64_t v40 = v16;
        *(unsigned char *)(v40 + 8) = v17;
        uint64_t v41 = v46[2];
        BOOL v33 = __OFADD__(v41, 1);
        uint64_t v42 = v41 + 1;
        if (v33) {
          goto LABEL_40;
        }
        v46[2] = v42;
        swift_bridgeObjectRetain();
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_18AF62BA4(v16);
      uint64_t v4 = v48;
    }
    else
    {
      if (qword_1EB279458 != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      sub_18AF412A0(v21, (uint64_t)qword_1EB279440);
      Swift::String v22 = v18;
      os_log_type_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        Swift::Int v25 = v8;
        uint64_t v26 = swift_slowAlloc();
        uint64_t v27 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v26 = 138412290;
        *(void *)(v26 + 4) = v22;
        *uint64_t v27 = v22;
        _os_log_impl(&dword_18AF10000, v23, v24, a3, (uint8_t *)v26, 0xCu);
        sub_18AF161EC((uint64_t *)&unk_1E9125610);
        swift_arrayDestroy();
        uint64_t v4 = v48;
        sub_18AF388F8();
        Swift::Int v8 = v25;
        sub_18AF388F8();
        os_log_type_t v28 = v23;
      }
      else
      {

        os_log_type_t v28 = v22;
        Swift::String v22 = v23;
      }

      sub_18AF62BA4(v16);
    }
  }
  int64_t v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v11 >= v50) {
    goto LABEL_36;
  }
  unint64_t v12 = *(void *)(v49 + 8 * v11);
  ++v8;
  if (v12) {
    goto LABEL_19;
  }
  Swift::Int v8 = v11 + 1;
  if (v11 + 1 >= v50) {
    goto LABEL_36;
  }
  unint64_t v12 = *(void *)(v49 + 8 * v8);
  if (v12) {
    goto LABEL_19;
  }
  Swift::Int v8 = v11 + 2;
  if (v11 + 2 >= v50) {
    goto LABEL_36;
  }
  unint64_t v12 = *(void *)(v49 + 8 * v8);
  if (v12)
  {
LABEL_19:
    unint64_t v7 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_20;
  }
  Swift::Int v13 = v11 + 3;
  if (v13 >= v50)
  {
LABEL_36:
    uint64_t result = swift_release();
    *a4 = v46;
    return result;
  }
  unint64_t v12 = *(void *)(v49 + 8 * v13);
  if (v12)
  {
    Swift::Int v8 = v13;
    goto LABEL_19;
  }
  while (1)
  {
    Swift::Int v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v50) {
      goto LABEL_36;
    }
    unint64_t v12 = *(void *)(v49 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

#error "18AF83E2C: call analysis failed (funcsize=96)"

void sub_18AF83E5C()
{
  void (*v3)(void **__return_ptr, void **);
  char v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;

  sub_18AF411C8();
  if (v4)
  {
    uint64_t v5 = v2;
  }
  else
  {
    Swift::Int v8 = v2;
    v3(&v7, &v8);
    uint64_t v2 = v7;
  }
  sub_18AF84F38(v2, v0);
  uint64_t v6 = sub_18AF85080();
  v1(v6);
  sub_18AF84F44(v2, v0);
  sub_18AF84F44(v2, v0);
}

uint64_t sub_18AF83EE0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v47 = *a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(*a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(*a1 + 64);
  int64_t v48 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v6 = 0;
  unint64_t v46 = (void *)MEMORY[0x1E4FBC868];
  while (v5)
  {
    unint64_t v7 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v8 = v7 | (v6 << 6);
LABEL_20:
    unint64_t v12 = *(void **)(*(void *)(v2 + 48) + 8 * v8);
    uint64_t v13 = *(void *)(v2 + 56) + 16 * v8;
    int64_t v14 = *(void **)v13;
    char v15 = *(unsigned char *)(v13 + 8);
    id v16 = v12;
    sub_18AF84C94(v14);
    id v17 = objc_msgSend(v16, sel_userRecordID);
    if (v17)
    {
      Swift::Int v25 = v17;
      sub_18AF84C94(v14);
      id v26 = v25;
      char isUnique = swift_isUniquelyReferenced_nonNull_native();
      Swift::Bool v45 = v26;
      sub_18AF7D0F8();
      uint64_t v29 = v46[2];
      BOOL v30 = (v28 & 1) == 0;
      Swift::Int v31 = v29 + v30;
      if (__OFADD__(v29, v30)) {
        goto LABEL_39;
      }
      unint64_t v32 = v27;
      char v33 = v28;
      sub_18AF161EC(&qword_1E9126330);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v31))
      {
        sub_18AF7D0F8();
        if ((v33 & 1) != (v35 & 1)) {
          goto LABEL_41;
        }
        unint64_t v32 = v34;
      }
      if (v33)
      {
        uint64_t v36 = v46[7] + 16 * v32;
        sub_18AF62BA4(*(id *)v36);
        *(void *)uint64_t v36 = v14;
        *(unsigned char *)(v36 + 8) = v15;
      }
      else
      {
        v46[(v32 >> 6) + 8] |= 1 << v32;
        *(void *)(v46[6] + 8 * v32) = v45;
        uint64_t v37 = v46[7] + 16 * v32;
        *(void *)uint64_t v37 = v14;
        *(unsigned char *)(v37 + 8) = v15;
        uint64_t v38 = v46[2];
        BOOL v39 = __OFADD__(v38, 1);
        uint64_t v40 = v38 + 1;
        if (v39) {
          goto LABEL_40;
        }
        v46[2] = v40;
        id v41 = v45;
      }

      swift_bridgeObjectRelease();
      sub_18AF62BA4(v14);
    }
    else
    {
      if (qword_1EB279458 != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      sub_18AF412A0(v18, (uint64_t)qword_1EB279440);
      uint64_t v19 = v16;
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = swift_slowAlloc();
        os_log_type_t v23 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v22 = 138412290;
        *(void *)(v22 + 4) = v19;
        *os_log_type_t v23 = v19;
        _os_log_impl(&dword_18AF10000, v20, v21, "Unexpected lookup info that lacks user record id: %@", (uint8_t *)v22, 0xCu);
        sub_18AF161EC((uint64_t *)&unk_1E9125610);
        swift_arrayDestroy();
        MEMORY[0x18C12BB10](v23, -1, -1);
        MEMORY[0x18C12BB10](v22, -1, -1);
        os_log_type_t v24 = v20;
      }
      else
      {

        os_log_type_t v24 = v19;
        uint64_t v19 = v20;
      }

      sub_18AF62BA4(v14);
    }
  }
  int64_t v9 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v9 >= v48) {
    goto LABEL_36;
  }
  unint64_t v10 = *(void *)(v47 + 8 * v9);
  ++v6;
  if (v10) {
    goto LABEL_19;
  }
  int64_t v6 = v9 + 1;
  if (v9 + 1 >= v48) {
    goto LABEL_36;
  }
  unint64_t v10 = *(void *)(v47 + 8 * v6);
  if (v10) {
    goto LABEL_19;
  }
  int64_t v6 = v9 + 2;
  if (v9 + 2 >= v48) {
    goto LABEL_36;
  }
  unint64_t v10 = *(void *)(v47 + 8 * v6);
  if (v10)
  {
LABEL_19:
    unint64_t v5 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v6 << 6);
    goto LABEL_20;
  }
  int64_t v11 = v9 + 3;
  if (v11 >= v48)
  {
LABEL_36:
    uint64_t result = swift_release();
    *a2 = v46;
    return result;
  }
  unint64_t v10 = *(void *)(v47 + 8 * v11);
  if (v10)
  {
    int64_t v6 = v11;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v6 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v6 >= v48) {
      goto LABEL_36;
    }
    unint64_t v10 = *(void *)(v47 + 8 * v6);
    ++v11;
    if (v10) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  sub_18AF34EA0(0, &qword_1E91255F0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_18AF84344(uint64_t a1)
{
  uint64_t v2 = sub_18AF161EC(&qword_1E9126320);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __n128 v5 = MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7 + v6, (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  sub_18AF810CC();
  return swift_release();
}

id sub_18AF844D4()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  type metadata accessor for URL();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v2 = objc_msgSend(v0, sel_initWithShareURLs_, isa);

  return v2;
}

uint64_t sub_18AF8454C(uint64_t a1, void *a2, char a3)
{
  return swift_endAccess();
}

uint64_t sub_18AF845C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v16[1] = a6;
  uint64_t v9 = sub_18AF161EC(&qword_1E9126308);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __n128 v12 = MEMORY[0x1F4188790](v9);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))((char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9, v12);
  unint64_t v13 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v14 + v13, (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  sub_18AF81514(a3, a4);
  return swift_release();
}

void sub_18AF84734(void *a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), void (*a6)(uint64_t, uint64_t, id))
{
  swift_beginAccess();
  id v11 = a1;
  uint64_t v12 = a3 & 1;
  a5(a2, v12);
  a6(a2, v12, v11);
  swift_endAccess();
}

uint64_t sub_18AF847D4(uint64_t a1)
{
  uint64_t v2 = sub_18AF161EC(&qword_1E91262F0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __n128 v5 = MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7 + v6, (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  sub_18AF81EB0();
  return swift_release();
}

uint64_t sub_18AF84934(uint64_t a1)
{
  return sub_18AF847D4(a1);
}

uint64_t sub_18AF84940(void *a1, char a2, uint64_t a3, uint64_t *a4)
{
  if (a2)
  {
    id v6 = a1;
    sub_18AF161EC(a4);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_18AF161EC(a4);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_18AF849AC()
{
  return sub_18AF84F68(&qword_1E91262F0);
}

uint64_t sub_18AF849B8(void *a1, char a2)
{
  return sub_18AF84B48(a1, a2, &qword_1E91262F0);
}

uint64_t sub_18AF849C4()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_18AF849FC(void *a1, uint64_t a2, char a3)
{
  sub_18AF84734(a1, a2, a3 & 1, v3, (void (*)(uint64_t, uint64_t))sub_18AF85038, (void (*)(uint64_t, uint64_t, id))sub_18AFF354C);
}

uint64_t sub_18AF84A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790]();
  unint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v14(v13);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v13, a5);
  }
  return result;
}

uint64_t sub_18AF84B20(uint64_t a1)
{
  return sub_18AF845C8(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_18AF84B30()
{
  return sub_18AF84F68(&qword_1E9126308);
}

uint64_t sub_18AF84B3C(void *a1, char a2)
{
  return sub_18AF84B48(a1, a2, &qword_1E9126308);
}

uint64_t sub_18AF84B48(void *a1, char a2, uint64_t *a3)
{
  char v6 = a2 & 1;
  uint64_t v7 = *(void *)(sub_18AF161EC(a3) - 8);
  return sub_18AF84940(a1, v6, v3 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), a3);
}

void sub_18AF84BC4(uint64_t a1, void *a2)
{
  type metadata accessor for URL();
  sub_18AF34EA0(0, &qword_1E91262B8);
  sub_18AF814C4();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a2, sel_setShareInvitationTokensByShareURL_, isa);
}

uint64_t sub_18AF84C64(uint64_t a1, void *a2, char a3)
{
  return sub_18AF8454C(a1, a2, a3 & 1);
}

void sub_18AF84C74()
{
  sub_18AF2AD14();
  sub_18AF835C4(v0, v1, v2, v3);
}

id sub_18AF84C94(id a1)
{
  return a1;
}

uint64_t sub_18AF84CA0(uint64_t a1)
{
  return sub_18AF84344(a1);
}

uint64_t sub_18AF84CAC()
{
  return sub_18AF84F68(&qword_1E9126320);
}

uint64_t sub_18AF84CB8(void *a1, char a2)
{
  return sub_18AF84B48(a1, a2, &qword_1E9126320);
}

void sub_18AF84CC4()
{
}

void sub_18AF84CF4(void *a1, uint64_t a2, char a3)
{
  sub_18AF84734(a1, a2, a3 & 1, v3, (void (*)(uint64_t, uint64_t))sub_18AF85038, (void (*)(uint64_t, uint64_t, id))sub_18AFF34C8);
}

uint64_t sub_18AF84D40(uint64_t a1)
{
  return sub_18AF83CC0(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_18AF84D4C()
{
  return sub_18AF84F68(&qword_1E9126340);
}

uint64_t sub_18AF84D58(void *a1, char a2)
{
  return sub_18AF84B48(a1, a2, &qword_1E9126340);
}

void sub_18AF84D64()
{
}

uint64_t sub_18AF84DA4(uint64_t a1)
{
  return sub_18AF8364C(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_18AF84DB0()
{
  return sub_18AF84F68(&qword_1E9126340);
}

void sub_18AF84DBC()
{
}

uint64_t sub_18AF84DFC(uint64_t a1)
{
  return sub_18AF8324C(a1);
}

uint64_t sub_18AF84E08()
{
  return sub_18AF84F68(&qword_1E9126358);
}

uint64_t sub_18AF84E14(void *a1, char a2)
{
  return sub_18AF84B48(a1, a2, &qword_1E9126358);
}

void sub_18AF84E20()
{
}

void sub_18AF84E50(void *a1, void *a2)
{
}

uint64_t sub_18AF84E5C()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_18AF84E9C(uint64_t a1)
{
  return sub_18AF82B18(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_18AF84EA8()
{
  return sub_18AF84F68(&qword_1E9126378);
}

uint64_t sub_18AF84EB4(void *a1, char a2)
{
  return sub_18AF84B48(a1, a2, &qword_1E9126378);
}

uint64_t sub_18AF84EC0()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

void sub_18AF84EF8()
{
}

id sub_18AF84F38(id a1, char a2)
{
  if (a2) {
    return a1;
  }
  else {
    return (id)swift_bridgeObjectRetain();
  }
}

void sub_18AF84F44(id a1, char a2)
{
  if (a2) {

  }
  else {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_18AF84F50(uint64_t a1)
{
  return sub_18AF8243C(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_18AF84F5C()
{
  return sub_18AF84F68(&qword_1E9126378);
}

uint64_t sub_18AF84F68(uint64_t *a1)
{
  uint64_t v2 = sub_18AF161EC(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return MEMORY[0x1F4186498](v1, v6, v7);
}

void sub_18AF84FF4()
{
}

uint64_t sub_18AF85080()
{
  return v0;
}

void sub_18AF85090(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t *), uint64_t a3, uint64_t a4, void (*a5)(void *), void (*a6)(uint64_t), void *a7, void (*a8)(void *__return_ptr, void *, uint64_t, void (*)(void *__return_ptr, void), uint64_t))
{
  void (*v38)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void v44[5];
  void v45[2];
  char v46;
  uint64_t v47;
  char v48;
  void v49[2];
  char v50;
  unint64_t v51;
  char v52;
  void v53[2];
  char v54;
  unint64_t v55;
  char v56;
  void v57[2];
  char v58;
  unint64_t v59;
  char v60;
  uint64_t v61;

  sub_18AF8740C(a1, a2, (uint64_t)v44);
  uint64_t v12 = *(unsigned int *)(a1 + 36);
  v45[0] = 1 << *(unsigned char *)(a1 + 32);
  v45[1] = v12;
  unint64_t v46 = 0;
  uint64_t v47 = 0;
  int64_t v48 = 1;
  uint64_t v13 = sub_18AF8765C((uint64_t)v44, (uint64_t)v45, a1, (uint64_t)a2);
  a5(v45);
  a5(v44);
  if (!v13) {
    return;
  }
  uint64_t v61 = MEMORY[0x1E4FBC860];
  uint64_t v37 = a3;
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v36 = a1;
  sub_18AF8740C(a1, a2, (uint64_t)v49);
  if (v13 < 0) {
    goto LABEL_22;
  }
  uint64_t v38 = a2;
  unint64_t v32 = a5;
  unint64_t v14 = v49[0];
  uint64_t v15 = v36;
  if ((v49[0] & 0x8000000000000000) == 0)
  {
    sub_18AF42D74();
    if (v16 != v17)
    {
      char v18 = v50;
      uint64_t v19 = v49[1];
      unint64_t v20 = v51;
      char v21 = v52;
      while (((*(void *)(v36 + 64 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
      {
        if (*(_DWORD *)(v15 + 36) != v19) {
          goto LABEL_19;
        }
        uint64_t v22 = *(void *)(v15 + 56);
        os_log_type_t v23 = (uint64_t *)(*(void *)(v15 + 48) + 16 * v14);
        uint64_t v24 = v23[1];
        uint64_t v25 = *(void *)(v22 + 8 * v14);
        BOOL v39 = *v23;
        uint64_t v40 = v24;
        id v41 = v25;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v38(&v43, &v39);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v21) {
          goto LABEL_23;
        }
        if ((v20 & 0x8000000000000000) != 0) {
          goto LABEL_20;
        }
        if (v20 >= *(void *)(v43 + 16)) {
          goto LABEL_21;
        }
        id v26 = (void *)(v43 + 32 * v20);
        uint64_t v28 = v26[4];
        uint64_t v27 = v26[5];
        uint64_t v30 = v26[6];
        uint64_t v29 = v26[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v31 = swift_bridgeObjectRelease();
        a6(v31);
        BOOL v39 = v28;
        uint64_t v40 = v27;
        id v41 = v30;
        uint64_t v42 = v29;
        sub_18AF8580C(&v39, a7);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v57[0] = v14;
        v57[1] = v19;
        unint64_t v58 = v18 & 1;
        uint64_t v59 = v20;
        uint64_t v60 = 0;
        uint64_t v15 = v36;
        a8(v53, v57, v36, (void (*)(void *__return_ptr, void))v38, v37);
        if (!--v13) {
          goto LABEL_16;
        }
        unint64_t v14 = v53[0];
        if ((v53[0] & 0x8000000000000000) == 0)
        {
          uint64_t v19 = v53[1];
          char v18 = v54;
          unint64_t v20 = v55;
          char v21 = v56;
          sub_18AF42D74();
          if (v16 != v17) {
            continue;
          }
        }
        goto LABEL_15;
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      return;
    }
  }
LABEL_15:
  __break(1u);
LABEL_16:
  v32(v53);
}

uint64_t sub_18AF85358()
{
  return sub_18AF8537C();
}

uint64_t sub_18AF85364()
{
  return sub_18AF8537C();
}

uint64_t sub_18AF85370()
{
  return sub_18AF8537C();
}

uint64_t sub_18AF8537C()
{
  sub_18AF30958();
  v4._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 2629690;
  v5._object = (void *)0xE300000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v2;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 2112032;
  v7._object = (void *)0xE300000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = v1;
  v8._object = v0;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 15913;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  return 60;
}

uint64_t sub_18AF8545C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR___CKRequiredFeatureSet__wrapped);
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR___CKRequiredFeatureSet__wrapped + 8);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR___CKRequiredFeatureSet__wrapped + 16);
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

void sub_18AF854B4(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  swift_bridgeObjectRetain();
  uint64_t v10 = (void *)MEMORY[0x18C128F60](a2, a3);
  swift_bridgeObjectRelease();
  uint64_t v11 = (void *)MEMORY[0x18C128F60](1701667182, 0xE400000000000000);
  objc_msgSend(a1, sel_encodeObject_forKey_, v10, v11);

  swift_bridgeObjectRetain();
  MEMORY[0x18C128F60](a4, a5);
  sub_18AF38220();
  id v12 = (id)MEMORY[0x18C128F60](0x65756C6176, 0xE500000000000000);
  objc_msgSend(a1, sel_encodeObject_forKey_, a4, v12);
}

char *CKZoneFeature.init(name:value:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_18AF8618C(a1, a2, a3, a4, &OBJC_IVAR___CKZoneFeature__wrapped);
}

void CKZoneFeature.name.getter()
{
}

id sub_18AF85648(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4 = a3();
  MEMORY[0x18C128F60](v4);
  sub_18AF33DC8();

  return a1;
}

void *CKZoneFeature.value.getter()
{
  return sub_18AF8639C(&OBJC_IVAR___CKZoneFeature__wrapped);
}

uint64_t CKZoneFeature.isEqual(_:)(uint64_t a1)
{
  return sub_18AF8597C(a1, (void (*)(uint64_t))type metadata accessor for CKZoneFeature, &OBJC_IVAR___CKZoneFeature__wrapped);
}

uint64_t CKZoneFeature.description.getter()
{
  return sub_18AF85B6C();
}

Swift::Void __swiftcall CKZoneFeature.encode(with:)(NSCoder with)
{
}

char *CKZoneFeature.init(coder:)(void *a1)
{
  return sub_18AF85DC4(a1, &OBJC_IVAR___CKZoneFeature__wrapped, (objc_class **)&off_1E545F1C0);
}

char *sub_18AF8580C(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  Swift::String v7 = (char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  Swift::String v8 = (uint64_t *)&v7[*a2];
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  *Swift::String v8 = v3;
  v8[1] = v4;
  void v8[2] = v5;
  void v8[3] = v6;
  sub_18AF86444(v9, v10);
  return v7;
}

char *CKRecordFeature.init(name:value:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_18AF8618C(a1, a2, a3, a4, &OBJC_IVAR___CKRecordFeature__wrapped);
}

uint64_t sub_18AF858A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return a5(v6, v8, v9, v10);
}

void CKRecordFeature.name.getter()
{
}

void *CKRecordFeature.value.getter()
{
  return sub_18AF8639C(&OBJC_IVAR___CKRecordFeature__wrapped);
}

uint64_t CKRecordFeature.isEqual(_:)(uint64_t a1)
{
  return sub_18AF8597C(a1, (void (*)(uint64_t))type metadata accessor for CKRecordFeature, &OBJC_IVAR___CKRecordFeature__wrapped);
}

uint64_t sub_18AF8597C(uint64_t a1, void (*a2)(uint64_t), void *a3)
{
  uint64_t v6 = sub_18AF55238(a1, (uint64_t)v24);
  if (!v25)
  {
    sub_18AF551C4((uint64_t)v24);
    goto LABEL_20;
  }
  a2(v6);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_20:
    char v16 = 0;
    return v16 & 1;
  }
  uint64_t v7 = (void *)(v3 + *a3);
  uint64_t v8 = v7[1];
  uint64_t v9 = v7[2];
  uint64_t v10 = v7[3];
  uint64_t v11 = &v23[*a3];
  uint64_t v12 = *((void *)v11 + 1);
  uint64_t v13 = *((void *)v11 + 2);
  uint64_t v14 = *((void *)v11 + 3);
  if (!v8)
  {
    sub_18AF1A03C();
    sub_18AF86400(v18, v19);

    if (!v12)
    {
      char v16 = 1;
      return v16 & 1;
    }
    goto LABEL_19;
  }
  if (!v12)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();

LABEL_19:
    sub_18AF411DC();
    sub_18AF1A03C();
    sub_18AF86444(v20, v21);
    goto LABEL_20;
  }
  BOOL v15 = *v7 == *(void *)v11 && v8 == v12;
  if (v15 || (char v16 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (v9 == v13 && v10 == v14)
    {
      char v16 = 1;
    }
    else
    {
      sub_18AF1A03C();
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_18AF411DC();
  return v16 & 1;
}

uint64_t CKRecordFeature.description.getter()
{
  return sub_18AF85B6C();
}

uint64_t sub_18AF85B6C()
{
  sub_18AF8856C();
  uint64_t v3 = *v2;
  if (v0)
  {
    v21.receiver = v1;
    v21.super_class = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v4 = objc_msgSendSuper2(&v21, sel_description);
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;

    uint64_t v23 = v5;
    uint64_t v24 = v7;
    v8._uint64_t countAndFlagsBits = 8250;
    v8._object = (void *)0xE200000000000000;
    String.append(_:)(v8);
    sub_18AF4027C();
    uint64_t v9 = sub_18AF8537C();
    uint64_t v11 = v10;
    uint64_t v12 = sub_18AF4027C();
    sub_18AF86444(v12, v13);
    v14._uint64_t countAndFlagsBits = v9;
    v14._object = v11;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
  }
  else
  {
    v22.receiver = v1;
    v22.super_class = v3;
    id v15 = objc_msgSendSuper2(&v22, sel_description);
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    uint64_t v23 = v16;
    uint64_t v24 = v18;
    v19._uint64_t countAndFlagsBits = 0x6C696E203ALL;
    v19._object = (void *)0xE500000000000000;
    String.append(_:)(v19);
  }
  return v23;
}

Swift::Void __swiftcall CKRecordFeature.encode(with:)(NSCoder with)
{
}

void sub_18AF85CC0()
{
  sub_18AF8856C();
  if (v0)
  {
    uint64_t v3 = v1;
    uint64_t v5 = (void *)v2[2];
    uint64_t v4 = v2[3];
    uint64_t v6 = *v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_18AF854B4(v3, v6, v0, v5, v4);
    sub_18AF86444(v6, v0);
  }
  else
  {
    __break(1u);
  }
}

char *CKRecordFeature.init(coder:)(void *a1)
{
  return sub_18AF85DC4(a1, &OBJC_IVAR___CKRecordFeature__wrapped, (objc_class **)off_1E545EEA0);
}

char *sub_18AF85DC4(void *a1, void *a2, objc_class **a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = v3;
  uint64_t v7 = &v5[*a2];
  *(_OWORD *)uint64_t v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  Swift::String v8 = *a3;
  v37.receiver = v5;
  v37.super_class = v8;
  id v9 = objc_msgSendSuper2(&v37, sel_init);
  sub_18AF34EA0(0, &qword_1E91263A0);
  uint64_t v10 = (char *)v9;
  uint64_t v11 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v11)
  {

    uint64_t v13 = 0;
LABEL_9:
    unint64_t v24 = 0;
    uint64_t v25 = 0;
    unint64_t v26 = 0;
    goto LABEL_17;
  }
  uint64_t v12 = (void *)v11;
  uint64_t v13 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v13)
  {

    goto LABEL_9;
  }
  uint64_t v36 = v4;
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v16 = v15;
  char v35 = (void *)v13;
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v19 = v18;
  unint64_t v20 = 128;
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_18AF5A52C(v20, v14, v16);
    uint64_t v22 = MEMORY[0x18C129130](v21);
    if (v23) {
      break;
    }
    if (!--v20)
    {
      swift_bridgeObjectRelease();
      uint64_t v13 = 0;
      unint64_t v24 = 0xE000000000000000;
      goto LABEL_11;
    }
  }
  uint64_t v13 = v22;
  unint64_t v24 = v23;
  swift_bridgeObjectRelease();
LABEL_11:
  unint64_t v27 = 128;
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = sub_18AF5A52C(v27, v17, v19);
    uint64_t v29 = MEMORY[0x18C129130](v28);
    if (v30) {
      break;
    }
    if (!--v27)
    {

      swift_bridgeObjectRelease();
      uint64_t v25 = 0;
      unint64_t v26 = 0xE000000000000000;
      goto LABEL_16;
    }
  }
  uint64_t v25 = v29;
  unint64_t v26 = v30;

  swift_bridgeObjectRelease();
LABEL_16:

  a1 = v35;
  uint64_t v4 = v36;
LABEL_17:

  uint64_t v31 = (uint64_t *)&v10[*v4];
  uint64_t v32 = *v31;
  uint64_t v33 = v31[1];
  uint64_t *v31 = v13;
  v31[1] = v24;
  v31[2] = v25;
  v31[3] = v26;
  sub_18AF86444(v32, v33);
  if (!v31[1])
  {

    return 0;
  }
  return v10;
}

uint64_t sub_18AF86010(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_18AF86444(*(void *)(a1 + *a3), *(void *)(a1 + *a3 + 8));
}

uint64_t sub_18AF86038@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(v2 + *a1);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  uint64_t v7 = v3[3];
  *a2 = *v3;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return sub_18AF86400(v4, v5);
}

id sub_18AF86068(void *a1, Class *a2)
{
  uint64_t v3 = (_OWORD *)(v2 + *a1);
  *uint64_t v3 = 0u;
  v3[1] = 0u;
  v5.super_class = *a2;
  return objc_msgSendSuper2(&v5, sel_init);
}

id _sSo13CKZoneFeatureC8CloudKitE4name5valueABSS_SStcfC_0()
{
  sub_18AF30958();
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  objc_super v5 = (void *)MEMORY[0x18C128F60](v3, v2);
  swift_bridgeObjectRelease();
  uint64_t v6 = (void *)MEMORY[0x18C128F60](v1, v0);
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(v4, sel_initWithName_value_, v5, v6);

  return v7;
}

char *CKFieldFeature.init(name:value:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_18AF8618C(a1, a2, a3, a4, &OBJC_IVAR___CKFieldFeature__wrapped);
}

char *sub_18AF8618C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  id v9 = v5;
  uint64_t v10 = sub_18AF384AC();
  unint64_t v12 = v11;
  uint64_t v30 = a3;
  unint64_t v31 = a4;
  uint64_t v13 = sub_18AF384AC();
  unint64_t v15 = v14;
  unint64_t v16 = 128;
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_18AF5A52C(v16, v10, v12);
    uint64_t v18 = MEMORY[0x18C129130](v17);
    if (v19) {
      break;
    }
    if (!--v16)
    {
      swift_bridgeObjectRelease();
      uint64_t v20 = 0;
      unint64_t v21 = 0xE000000000000000;
      goto LABEL_6;
    }
  }
  uint64_t v20 = v18;
  unint64_t v21 = v19;
  swift_bridgeObjectRelease();
LABEL_6:
  unint64_t v22 = 128;
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = sub_18AF5A52C(v22, v13, v15);
    uint64_t v24 = MEMORY[0x18C129130](v23);
    if (v25) {
      break;
    }
    if (!--v22)
    {
      swift_bridgeObjectRelease();
      uint64_t v26 = 0;
      unint64_t v27 = 0xE000000000000000;
      goto LABEL_11;
    }
  }
  uint64_t v26 = v24;
  unint64_t v27 = v25;
  swift_bridgeObjectRelease();
LABEL_11:
  swift_getObjectType();

  uint64_t v30 = v20;
  unint64_t v31 = v21;
  uint64_t v32 = v26;
  unint64_t v33 = v27;
  uint64_t v28 = sub_18AF8580C(&v30, a5);
  swift_deallocPartialClassInstance();
  return v28;
}

void CKFieldFeature.name.getter()
{
}

void sub_18AF86338()
{
  sub_18AF8856C();
  if (v0) {
    swift_bridgeObjectRetain();
  }
  else {
    __break(1u);
  }
}

void *CKFieldFeature.value.getter()
{
  return sub_18AF8639C(&OBJC_IVAR___CKFieldFeature__wrapped);
}

void *sub_18AF8639C(void *result)
{
  uint64_t v2 = v1 + *result;
  if (*(void *)(v2 + 8))
  {
    uint64_t v3 = *(void *)(v2 + 16);
    swift_bridgeObjectRetain();
    return (void *)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CKFieldFeature.isEqual(_:)(uint64_t a1)
{
  return sub_18AF8597C(a1, (void (*)(uint64_t))type metadata accessor for CKFieldFeature, &OBJC_IVAR___CKFieldFeature__wrapped);
}

uint64_t sub_18AF86400(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_18AF86444(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t CKFieldFeature.description.getter()
{
  return sub_18AF85B6C();
}

Swift::Void __swiftcall CKFieldFeature.encode(with:)(NSCoder with)
{
}

char *CKFieldFeature.init(coder:)(void *a1)
{
  return sub_18AF85DC4(a1, &OBJC_IVAR___CKFieldFeature__wrapped, (objc_class **)off_1E545EC20);
}

void __swiftcall CKRequiredFeatureSet.init(zoneFeatures:recordFeatures:fieldFeatures:)(CKRequiredFeatureSet *__return_ptr retstr, Swift::OpaquePointer zoneFeatures, Swift::OpaquePointer recordFeatures, Swift::OpaquePointer fieldFeatures)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  type metadata accessor for CKZoneFeature((uint64_t)v4);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  uint64_t v6 = swift_bridgeObjectRelease();
  type metadata accessor for CKRecordFeature(v6);
  Class v7 = Array._bridgeToObjectiveC()().super.isa;
  uint64_t v8 = swift_bridgeObjectRelease();
  type metadata accessor for CKFieldFeature(v8);
  Class v9 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_initWithZoneFeatures_recordFeatures_fieldFeatures_, isa, v7, v9);
}

id CKRequiredFeatureSet.zoneFeatures.getter()
{
  uint64_t v1 = swift_bridgeObjectRetain();
  sub_18AF33DAC(v1, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_18AF7D6A0, v2, v3, (void (*)(void *))sub_18AF7E214, (void (*)(uint64_t))type metadata accessor for CKZoneFeature, &OBJC_IVAR___CKZoneFeature__wrapped, (void (*)(void *__return_ptr, void *, uint64_t, void (*)(void *__return_ptr, void), uint64_t))sub_18AF87EB4, v7);
  sub_18AF33DC8();
  id v4 = objc_allocWithZone((Class)CKFeatureSet);
  type metadata accessor for CKZoneFeature((uint64_t)v4);
  Array._bridgeToObjectiveC()();
  sub_18AF38220();
  id v5 = objc_msgSend(v4, sel_initWithFeatures_, v0);

  return v5;
}

id CKRequiredFeatureSet.recordFeatures.getter()
{
  sub_18AF8856C();
  uint64_t v1 = swift_bridgeObjectRetain();
  sub_18AF33DAC(v1, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_18AF7E2B4, v2, v3, (void (*)(void *))sub_18AF88564, (void (*)(uint64_t))type metadata accessor for CKRecordFeature, &OBJC_IVAR___CKRecordFeature__wrapped, (void (*)(void *__return_ptr, void *, uint64_t, void (*)(void *__return_ptr, void), uint64_t))sub_18AF87D30, v7);
  sub_18AF33DC8();
  id v4 = objc_allocWithZone((Class)CKFeatureSet);
  type metadata accessor for CKRecordFeature((uint64_t)v4);
  Array._bridgeToObjectiveC()();
  sub_18AF38220();
  id v5 = objc_msgSend(v4, sel_initWithFeatures_, v0);

  return v5;
}

id CKRequiredFeatureSet.fieldFeatures.getter()
{
  uint64_t v1 = swift_bridgeObjectRetain();
  sub_18AF33DAC(v1, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_18AF7E2B4, v2, v3, (void (*)(void *))sub_18AF88564, (void (*)(uint64_t))type metadata accessor for CKFieldFeature, &OBJC_IVAR___CKFieldFeature__wrapped, (void (*)(void *__return_ptr, void *, uint64_t, void (*)(void *__return_ptr, void), uint64_t))sub_18AF87BAC, v7);
  sub_18AF33DC8();
  id v4 = objc_allocWithZone((Class)CKFeatureSet);
  type metadata accessor for CKFieldFeature((uint64_t)v4);
  Array._bridgeToObjectiveC()();
  sub_18AF38220();
  id v5 = objc_msgSend(v4, sel_initWithFeatures_, v0);

  return v5;
}

Swift::Void __swiftcall CKRequiredFeatureSet.encode(with:)(NSCoder with)
{
  id v3 = objc_msgSend(v1, sel_zoneFeatures);
  id v4 = NSStringFromSelector(sel_zoneFeatures);
  if (!v4)
  {
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v4 = (NSString *)MEMORY[0x18C128F60](v5);
    swift_bridgeObjectRelease();
  }
  sub_18AF41000();

  id v6 = objc_msgSend(v1, sel_recordFeatures);
  uint64_t v7 = NSStringFromSelector(sel_recordFeatures);
  if (!v7)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = (NSString *)MEMORY[0x18C128F60](v8);
    swift_bridgeObjectRelease();
  }
  sub_18AF41000();

  id v9 = objc_msgSend(v1, sel_fieldFeatures);
  uint64_t v10 = NSStringFromSelector(sel_fieldFeatures);
  if (!v10)
  {
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = (NSString *)MEMORY[0x18C128F60](v11);
    swift_bridgeObjectRelease();
    uint64_t v10 = v12;
  }
  uint64_t v13 = v10;
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v9);
}

id CKRequiredFeatureSet.init(coder:)(void *a1)
{
  id v3 = (void *)(v1 + OBJC_IVAR___CKRequiredFeatureSet__wrapped);
  uint64_t v4 = MEMORY[0x1E4FBC868];
  *id v3 = MEMORY[0x1E4FBC868];
  v3[1] = v4;
  v3[2] = v4;
  v20.super_class = (Class)CKRequiredFeatureSet;
  id v5 = objc_msgSendSuper2(&v20, sel_init);
  sub_18AF161EC((uint64_t *)&unk_1EB279510);
  id v6 = v5;
  uint64_t v7 = NSStringFromSelector(sel_zoneFeatures);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  sub_18AF1A03C();
  uint64_t v8 = NSCoder.decodeObject<A>(of:forKey:)();
  swift_bridgeObjectRelease();
  if (!v8) {
    goto LABEL_7;
  }
  id v9 = NSStringFromSelector(sel_recordFeatures);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v10 = NSCoder.decodeObject<A>(of:forKey:)();
  swift_bridgeObjectRelease();
  if (!v10)
  {

LABEL_7:
    return 0;
  }
  uint64_t v11 = NSStringFromSelector(sel_fieldFeatures);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v12 = NSCoder.decodeObject<A>(of:forKey:)();
  swift_bridgeObjectRelease();
  if (!v12)
  {

    goto LABEL_7;
  }
  id v13 = objc_msgSend(v8, sel_features);
  type metadata accessor for CKZoneFeature((uint64_t)v13);
  unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v15 = objc_msgSend(v10, sel_features);
  type metadata accessor for CKRecordFeature((uint64_t)v15);
  unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v17 = objc_msgSend(v12, sel_features);
  type metadata accessor for CKFieldFeature((uint64_t)v17);
  unint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  sub_18AF44D9C(v14, v16, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v6;
}

uint64_t CKRequiredFeatureSet.isEqual(_:)(uint64_t a1)
{
  uint64_t v2 = sub_18AF55238(a1, (uint64_t)v9);
  if (!v9[3])
  {
    sub_18AF551C4((uint64_t)v9);
    goto LABEL_5;
  }
  type metadata accessor for CKRequiredFeatureSet(v2);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    char v6 = 0;
    return v6 & 1;
  }
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR___CKRequiredFeatureSet__wrapped + 8);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR___CKRequiredFeatureSet__wrapped + 16);
  v9[0] = *(void *)(v1 + OBJC_IVAR___CKRequiredFeatureSet__wrapped);
  v9[1] = v3;
  void v9[2] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static CKRequiredFeatureSet.== infix(_:_:)();
  char v6 = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v6 & 1;
}

uint64_t sub_18AF86FC0(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *))
{
  if (a3)
  {
    id v6 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    id v7 = a1;
  }
  char v8 = a4(v10);

  sub_18AF551C4((uint64_t)v10);
  return v8 & 1;
}

id sub_18AF87060(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4 = a1;
  uint64_t v5 = a3();
  uint64_t v7 = v6;

  char v8 = (void *)MEMORY[0x18C128F60](v5, v7);
  swift_bridgeObjectRelease();

  return v8;
}

void CKRecordZone.originalRequiredFeatures.getter(uint64_t a1@<X8>)
{
  id v3 = objc_msgSend(v1, sel_originalRequiredFeatures);
  sub_18AF8545C(&v4);

  if (v4)
  {
    *(void *)a1 = v4;
    *(_OWORD *)(a1 + 8) = v5;
  }
  else
  {
    __break(1u);
  }
}

double sub_18AF871F0@<D0>(uint64_t a1@<X8>)
{
  CKRecordZone.originalRequiredFeatures.getter((uint64_t)&v4);
  uint64_t v2 = v5;
  double result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 16) = v2;
  return result;
}

void sub_18AF87234(void *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v2 = a1[2];
  v3[0] = *a1;
  v3[1] = v1;
  v3[2] = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  CKRecordZone.originalRequiredFeatures.setter((uint64_t)v3);
}

void CKRecordZone.originalRequiredFeatures.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 + 16);
  type metadata accessor for CKRequiredFeatureSet(a1);
  long long v6 = *(_OWORD *)a1;
  uint64_t v7 = v4;
  uint64_t v5 = sub_18AF46354((uint64_t)&v6);
  objc_msgSend(v2, sel_setOriginalRequiredFeatures_, v5);
}

void (*CKRecordZone.originalRequiredFeatures.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  CKRecordZone.originalRequiredFeatures.getter(a1);
  return sub_18AF87360;
}

void sub_18AF87360(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  if (a2)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = v2;
    uint64_t v6 = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CKRecordZone.originalRequiredFeatures.setter((uint64_t)&v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *a1;
    uint64_t v5 = v2;
    uint64_t v6 = v3;
    CKRecordZone.originalRequiredFeatures.setter((uint64_t)&v4);
  }
}

void sub_18AF8740C(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, void *)@<X1>, uint64_t a3@<X8>)
{
  char v5 = *(unsigned char *)(a1 + 32);
  uint64_t v6 = *(unsigned int *)(a1 + 36);
  uint64_t v7 = sub_18AF88188(a1);
  if ((v9 & 1) == 0)
  {
    uint64_t v10 = v8;
    if (v6 == v8)
    {
      uint64_t v11 = v7;
      uint64_t v20 = 1 << v5;
      if (v7 == 1 << v5)
      {
LABEL_4:
        char v12 = 1;
        uint64_t v11 = 1 << *(unsigned char *)(a1 + 32);
        uint64_t v10 = *(unsigned int *)(a1 + 36);
LABEL_21:
        *(void *)a3 = v11;
        *(void *)(a3 + 8) = v10;
        *(unsigned char *)(a3 + 16) = 0;
        *(void *)(a3 + 24) = 0;
        *(unsigned char *)(a3 + 32) = v12;
        return;
      }
      if (v7 < 0 || (sub_18AF2A5E0(), v13 == v14))
      {
LABEL_19:
        __break(1u);
LABEL_20:
        sub_18AF7E208(v20, v6, 0);
        swift_bridgeObjectRelease();
        char v12 = 0;
        goto LABEL_21;
      }
      uint64_t v15 = a1 + 64;
      while ((*(void *)(v15 + 8 * ((unint64_t)v11 >> 6)) & (1 << v11)) != 0)
      {
        if (*(_DWORD *)(a1 + 36) != v10) {
          goto LABEL_23;
        }
        unint64_t v16 = (void *)(*(void *)(a1 + 48) + 16 * v11);
        uint64_t v17 = v16[1];
        uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8 * v11);
        v22[0] = *v16;
        v22[1] = v17;
        v22[2] = v18;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        a2(&v23, v22);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(v23 + 16)) {
          goto LABEL_20;
        }
        swift_bridgeObjectRelease();
        if (v11 >= -(-1 << *(unsigned char *)(a1 + 32))) {
          goto LABEL_24;
        }
        if ((*(void *)(v15 + 8 * ((unint64_t)v11 >> 6)) & (1 << v11)) == 0) {
          goto LABEL_25;
        }
        if (*(_DWORD *)(a1 + 36) != v10) {
          goto LABEL_26;
        }
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t v11 = _HashTable.occupiedBucket(after:)();
        int v19 = *(_DWORD *)(a1 + 36);
        swift_release();
        swift_bridgeObjectRelease();
        if (v19 != v6) {
          goto LABEL_27;
        }
        if (v11 == v20) {
          goto LABEL_4;
        }
        if ((v11 & 0x8000000000000000) == 0)
        {
          uint64_t v10 = v6;
          if (v11 < 1 << *(unsigned char *)(a1 + 32)) {
            continue;
          }
        }
        goto LABEL_19;
      }
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_18AF87634@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(unsigned int *)(result + 36);
  *(void *)a2 = 1 << *(unsigned char *)(result + 32);
  *(void *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 1;
  return result;
}

uint64_t sub_18AF8765C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v87 = a4;
  uint64_t result = sub_18AF88038(a2, a1);
  if (result)
  {
    uint64_t v8 = result;
    uint64_t v9 = 1 << *(unsigned char *)(a3 + 32);
    uint64_t v10 = *(unsigned int *)(a3 + 36);
    uint64_t v11 = sub_18AF88188(a3);
    uint64_t v13 = v12;
    char v15 = v14 & 1;
    sub_18AF88208(v9, v10, 0, v11, v12, v14 & 1, a3);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_18AF7E208(v11, v13, v15);
    sub_18AF7E208(v9, v10, 0);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t result = v8;
  }
  if (*(unsigned char *)(a1 + 16) & 1) != 0 || (*(unsigned char *)(a2 + 16)) {
    goto LABEL_51;
  }
  uint64_t v16 = *(void *)(a1 + 8);
  uint64_t v17 = *(void *)(a2 + 8);
  if (v16 != v17)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  uint64_t v18 = *(void *)a2;
  uint64_t v19 = *(void *)(a1 + 24);
  uint64_t v20 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v21 = *(void *)(a2 + 24);
  LODWORD(v22) = *(unsigned __int8 *)(a2 + 32);
  uint64_t v88 = *(void *)a1;
  if (*(void *)a1 == *(void *)a2)
  {
    if ((v20 | v22)) {
      return 0;
    }
LABEL_12:
    uint64_t v22 = v21;
    uint64_t v26 = sub_18AF883B8(&v97, v88, v16, 0, a3);
    a3 = v97;
    unint64_t v34 = sub_18AF390DC((uint64_t)v26, v27, v28, v29, v30, v31, v32, v33, v78, v81, v83, v85, v87, v88, v89, (char)v26);
    v35(v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = v22 - v19;
    if (!__OFSUB__(v22, v19)) {
      return result;
    }
    __break(1u);
    goto LABEL_15;
  }
  HIDWORD(v85) = result;
  if (result)
  {
    uint64_t v89 = *(void *)(a2 + 24);
    BOOL v23 = sub_18AF88038(a1, a2);
    uint64_t v24 = v19;
    uint64_t v21 = v20;
    uint64_t v25 = v17;
    if (!v23) {
      goto LABEL_16;
    }
    __break(1u);
    goto LABEL_12;
  }
LABEL_15:
  uint64_t v24 = v21;
  LODWORD(v21) = v22;
  LOBYTE(v22) = v20;
  uint64_t v36 = v88;
  uint64_t v25 = v16;
  uint64_t v88 = v18;
  uint64_t v89 = v19;
  uint64_t v18 = v36;
  uint64_t v16 = v17;
LABEL_16:
  LODWORD(v85) = v21;
  uint64_t v79 = v24;
  uint64_t v82 = v25;
  uint64_t v84 = v18;
  if (v22)
  {
    uint64_t result = sub_18AF88454(v18, v25, 0);
    uint64_t v90 = 0;
    goto LABEL_20;
  }
  uint64_t v37 = v25;
  char v94 = sub_18AF883B8(&v97, v18, v25, 0, a3);
  sub_18AF88454(v18, v25, 0);
  swift_bridgeObjectRetain();
  uint64_t v38 = swift_retain();
  unint64_t v46 = sub_18AF390DC(v38, v39, v40, v41, v42, v43, v44, v45, v79, v25, v18, v85, v87, v88, v89, v94);
  v47(v46);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v48 = *(void *)(v98 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (__OFSUB__(v48, v91))
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  uint64_t v90 = v48 - v91;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v49 = sub_18AF88338(v18, v37, 0, a3);
  uint64_t v50 = v18;
  uint64_t v18 = v49;
  uint64_t v25 = v51;
  char v53 = v52;
  sub_18AF7E208(v50, v37, 0);
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if (v53)
  {
LABEL_52:
    __break(1u);
    return result;
  }
LABEL_20:
  if (v25 == v16)
  {
    uint64_t v54 = a3 + 64;
    uint64_t v16 = v25;
    while (v18 < v88)
    {
      if (v18 < 0 || v18 >= 1 << *(unsigned char *)(a3 + 32))
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      if ((*(void *)(v54 + 8 * ((unint64_t)v18 >> 6)) & (1 << v18)) == 0) {
        goto LABEL_41;
      }
      if (*(_DWORD *)(a3 + 36) != v16) {
        goto LABEL_42;
      }
      uint64_t v55 = v25;
      uint64_t v95 = *(void *)(*(void *)(a3 + 48) + 16 * v18);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v56 = swift_bridgeObjectRetain();
      uint64_t v64 = sub_18AF390DC(v56, v57, v58, v59, v60, v61, v62, v63, v79, v82, v84, v85, v87, v88, v90, v95);
      v65(v64);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v66 = *(void *)(v98 + 16);
      uint64_t result = swift_bridgeObjectRelease();
      if (__OFADD__(v92, v66)) {
        goto LABEL_43;
      }
      if (v18 >= -(-1 << *(unsigned char *)(a3 + 32))) {
        goto LABEL_44;
      }
      if ((*(void *)(v54 + 8 * ((unint64_t)v18 >> 6)) & (1 << v18)) == 0) {
        goto LABEL_45;
      }
      if (*(_DWORD *)(a3 + 36) != v16) {
        goto LABEL_46;
      }
      uint64_t v90 = v92 + v66;
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v18 = _HashTable.occupiedBucket(after:)();
      uint64_t v16 = *(unsigned int *)(a3 + 36);
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v25 = v55;
      if (v16 != v55) {
        goto LABEL_32;
      }
    }
  }
  else
  {
LABEL_32:
    __break(1u);
  }
  sub_18AF7E208(v84, v82, 0);
  if (v85)
  {
    sub_18AF7E208(v18, v16, 0);
    uint64_t result = v90;
    if ((v85 & 0x100000000) == 0) {
      return result;
    }
    goto LABEL_38;
  }
  char v96 = sub_18AF883B8(&v97, v18, v16, 0, a3);
  swift_bridgeObjectRetain();
  uint64_t v67 = swift_retain();
  id v75 = sub_18AF390DC(v67, v68, v69, v70, v71, v72, v73, v74, v79, v82, v84, v85, v87, v88, v90, v96);
  v76(v75);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_18AF7E208(v18, v16, 0);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = v93 + v80;
  if (__OFADD__(v93, v80))
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if ((v86 & 1) == 0) {
    return result;
  }
LABEL_38:
  BOOL v77 = __OFSUB__(0, result);
  uint64_t result = -result;
  if (v77)
  {
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  return result;
}

#error "18AF87BC4: call analysis failed (funcsize=93)"

#error "18AF87D48: call analysis failed (funcsize=93)"

#error "18AF87ECC: call analysis failed (funcsize=93)"

BOOL sub_18AF88038(BOOL result, uint64_t a2)
{
  if (*(unsigned char *)(result + 16) & 1) != 0 || (*(unsigned char *)(a2 + 16)) {
    goto LABEL_15;
  }
  if (*(void *)(result + 8) != *(_DWORD *)(a2 + 8))
  {
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  BOOL v2 = *(void *)result < *(void *)a2;
  if (*(void *)result == *(void *)a2)
  {
    if (*(unsigned char *)(result + 32))
    {
      if (*(unsigned char *)(a2 + 32)) {
        return 0;
      }
      goto LABEL_14;
    }
    if (*(unsigned char *)(a2 + 32))
    {
LABEL_16:
      __break(1u);
      return result;
    }
    return *(void *)(result + 24) < *(void *)(a2 + 24);
  }
  return v2;
}

uint64_t (*sub_18AF880A8(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))()
{
  sub_18AF16E10(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_18AF39294();
  v8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _s19FetchChangesOptionsV5ScopeOwxx;
}

uint64_t (*sub_18AF88114(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))()
{
  sub_18AF16E10(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_18AF39294();
  v8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _s18SendChangesOptionsV5ScopeOwxx;
}

uint64_t _s18SendChangesOptionsV5ScopeOwxx()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_18AF88188(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_18AF88208(uint64_t result, int a2, char a3, uint64_t a4, int a5, char a6, uint64_t a7)
{
  if (a6 & 1) != 0 || (a3) {
    goto LABEL_34;
  }
  unint64_t v7 = result;
  if (a4 < result) {
    goto LABEL_31;
  }
  if (a5 != a2)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    return result;
  }
  if (result != a4)
  {
    if (*(_DWORD *)(a7 + 36) == a5)
    {
      uint64_t v8 = a7 + 64;
      uint64_t v9 = 1 << *(unsigned char *)(a7 + 32);
      unint64_t v10 = (unint64_t)(v9 + 63) >> 6;
      uint64_t result = 1;
      while (1)
      {
        if ((v7 & 0x8000000000000000) != 0 || (uint64_t)v7 >= v9)
        {
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
        unint64_t v11 = v7 >> 6;
        unint64_t v12 = *(void *)(v8 + 8 * (v7 >> 6));
        if (((v12 >> v7) & 1) == 0) {
          goto LABEL_29;
        }
        unint64_t v13 = v12 & (-2 << (v7 & 0x3F));
        if (v13)
        {
          unint64_t v7 = __clz(__rbit64(v13)) | v7 & 0xFFFFFFFFFFFFFFC0;
        }
        else
        {
          unint64_t v14 = v11 + 1;
          unint64_t v7 = 1 << *(unsigned char *)(a7 + 32);
          if (v11 + 1 < v10)
          {
            unint64_t v15 = *(void *)(v8 + 8 * v14);
            if (!v15)
            {
              unint64_t v14 = v11 + 2;
              unint64_t v7 = 1 << *(unsigned char *)(a7 + 32);
              if (v11 + 2 >= v10) {
                goto LABEL_18;
              }
              unint64_t v15 = *(void *)(v8 + 8 * v14);
              if (!v15)
              {
                while (v11 + 3 < v10)
                {
                  unint64_t v15 = *(void *)(a7 + 88 + 8 * v11++);
                  if (v15)
                  {
                    unint64_t v14 = v11 + 2;
                    goto LABEL_17;
                  }
                }
                unint64_t v7 = 1 << *(unsigned char *)(a7 + 32);
                goto LABEL_18;
              }
            }
LABEL_17:
            unint64_t v7 = __clz(__rbit64(v15)) + (v14 << 6);
          }
        }
LABEL_18:
        if (v7 == a4) {
          return result;
        }
        if (__OFADD__(result++, 1)) {
          goto LABEL_30;
        }
      }
    }
    goto LABEL_33;
  }
  return 0;
}

uint64_t sub_18AF88338(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || -(-1 << *(unsigned char *)(a4 + 32)) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 64 + (((unint64_t)result >> 3) & 0x1FFFFFFFFFFFFFF8)) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    return _HashTable.occupiedBucket(after:)();
  }
LABEL_8:
  __break(1u);
  return result;
}

void *sub_18AF883B8(void *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v5 = *(void *)(*(void *)(a5 + 48) + 16 * a2);
    *uint64_t result = *(void *)(*(void *)(a5 + 56) + 8 * a2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (void *)v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_18AF88454(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_18AF88460(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_18AF67604(a2);
    sub_18AF88514(a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18AF884E0(uint64_t a1)
{
  return a1;
}

uint64_t sub_18AF88514(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_18AF67604(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t CKFetchRecordsOperation.desiredKeys.getter()
{
  return sub_18AF6A060(v0);
}

void sub_18AF88580()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  CKFetchRecordsOperation.desiredKeys.setter(v0);
}

void CKFetchRecordsOperation.desiredKeys.setter(uint64_t a1)
{
  if (a1)
  {
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    Class isa = 0;
  }
  objc_msgSend(v1, sel_setDesiredKeys_, isa);
}

void (*CKFetchRecordsOperation.desiredKeys.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = (uint64_t)v1;
  *a1 = sub_18AF6A060(v1);
  return sub_18AF8866C;
}

void sub_18AF8866C(uint64_t *a1, char a2)
{
  if (a2)
  {
    uint64_t v2 = swift_bridgeObjectRetain();
    CKFetchRecordsOperation.desiredKeys.setter(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    CKFetchRecordsOperation.desiredKeys.setter(*a1);
  }
}

void (*CKFetchRecordsOperation.perRecordResultBlock.getter())(uint64_t a1, void *a2, char a3)
{
  uint64_t result = (void (*)(uint64_t, void *, char))objc_msgSend(v0, sel_perRecordCompletionBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = sub_18AF61BE0;
    *(void *)(v4 + 24) = v3;
    return sub_18AF894AC;
  }
  return result;
}

uint64_t sub_18AF88764@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t)CKFetchRecordsOperation.perRecordResultBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    unsigned int v6 = sub_18AF62AEC;
  }
  else
  {
    unsigned int v6 = 0;
  }
  *a1 = v6;
  a1[1] = result;
  return result;
}

id sub_18AF887D4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AF62AE0;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18AF62BB8(v1);
  return CKFetchRecordsOperation.perRecordResultBlock.setter((uint64_t)v4, v3);
}

id CKFetchRecordsOperation.perRecordResultBlock.setter(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v5 = (void *)swift_allocObject();
    uint64_t v5[2] = v2;
    v5[3] = a1;
    v5[4] = a2;
    void v9[4] = sub_18AF894F8;
    v9[5] = v5;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    void v9[2] = sub_18AF88BA4;
    v9[3] = &unk_1ED7F0FA0;
    unsigned int v6 = _Block_copy(v9);
    sub_18AF62BB8(a1);
    id v7 = v2;
    swift_release();
    objc_msgSend(v7, sel_setPerRecordCompletionBlock_, v6);
    _Block_release(v6);
    return (id)sub_18AF62BB4(a1);
  }
  else
  {
    return objc_msgSend(v2, sel_setPerRecordCompletionBlock_, 0);
  }
}

void sub_18AF889A4(uint64_t a1, id a2, char a3, void (*a4)(id, uint64_t, id))
{
  if (a3)
  {
    id v7 = a2;
    id v8 = 0;
    uint64_t v9 = a1;
    id v10 = a2;
  }
  else
  {
    id v11 = a2;
    id v8 = a2;
    uint64_t v9 = a1;
    id v10 = 0;
  }
  a4(v8, v9, v10);

  sub_18AF62BA4(a2);
}

void sub_18AF88A30(void *a1, void *a2, void *a3, uint64_t a4, void (*a5)(id, void *, uint64_t))
{
  if (a2)
  {
    if (a3)
    {
      id v8 = a2;
      id v9 = a3;
      a5(v8, a3, 1);

      id v10 = a3;
LABEL_5:

      return;
    }
    if (a1)
    {
      id v14 = a2;
      id v12 = a1;
      a5(v14, a1, 0);

      id v10 = v14;
      goto LABEL_5;
    }
    type metadata accessor for CKError(0);
    id v13 = a2;
    sub_18AF8EAA4(MEMORY[0x1E4FBC860]);
    sub_18AF62B54();
    _BridgedStoredNSError.init(_:userInfo:)();
    a5(v13, v15, 1);
  }
}

void sub_18AF88BA4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = *(void (**)(void *, void *, void *))(a1 + 32);
  swift_retain();
  id v10 = a2;
  id v8 = a3;
  id v9 = a4;
  v7(a2, a3, a4);
  swift_release();
}

uint64_t (*CKFetchRecordsOperation.perRecordResultBlock.modify(void (**a1)(uint64_t a1, void *a2, char a3)))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CKFetchRecordsOperation.perRecordResultBlock.getter();
  a1[1] = v3;
  return sub_18AF88C94;
}

uint64_t sub_18AF88C94(uint64_t *a1, char a2)
{
  return sub_18AF893D0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKFetchRecordsOperation.perRecordResultBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF62BB8, (uint64_t (*)(uint64_t, uint64_t))sub_18AF62BB4);
}

void (*CKFetchRecordsOperation.fetchRecordsResultBlock.getter())(void *a1, char a2)
{
  uint64_t result = (void (*)(void *, char))objc_msgSend(v0, sel_fetchRecordsCompletionBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = sub_18AF89504;
    *(void *)(v4 + 24) = v3;
    return sub_18AF89544;
  }
  return result;
}

uint64_t sub_18AF88D74@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t result = (uint64_t)CKFetchRecordsOperation.fetchRecordsResultBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    unsigned int v6 = sub_18AF53C04;
  }
  else
  {
    unsigned int v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

id sub_18AF88DE4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AF53BC0;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18AF62BB8(v1);
  return CKFetchRecordsOperation.fetchRecordsResultBlock.setter((uint64_t)v4, v3);
}

id CKFetchRecordsOperation.fetchRecordsResultBlock.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    void v9[4] = sub_18AF62928;
    v9[5] = v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    void v9[2] = sub_18AF89278;
    v9[3] = &unk_1ED7F1428;
    id v7 = _Block_copy(v9);
    sub_18AF62BB8(a1);
    swift_retain();
    swift_release();
    objc_msgSend(v3, sel_setFetchRecordsCompletionBlock_, v7);
    _Block_release(v7);
    objc_msgSend(v3, sel_setCanDropItemResultsEarly_, 0);
    sub_18AF62BB4(a1);
    return (id)sub_18AF62BB4(a1);
  }
  else
  {
    return objc_msgSend(v2, sel_setFetchRecordsCompletionBlock_, 0);
  }
}

void sub_18AF88FD4(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa = a1;
  if (a1)
  {
    sub_18AF34EA0(0, &qword_1E91255F0);
    sub_18AF34EA0(0, &qword_1E9125120);
    sub_18AF89590();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  if (a2) {
    uint64_t v6 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);
}

void sub_18AF890B4(void *a1, char a2, void (*a3)(uint64_t, void *))
{
  if (qword_1EB279458 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_18AF412A0(v6, (uint64_t)qword_1EB279440);
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v9 = 0;
    MEMORY[0x18C12BB10](v9, -1, -1);
  }

  if (a2)
  {
    id v11 = a1;
    a3(0, a1);
    sub_18AF53C0C(a1, 1);
  }
  else
  {
    sub_18AF34EA0(0, &qword_1E91255F0);
    sub_18AF34EA0(0, &qword_1E9125120);
    sub_18AF89590();
    uint64_t v10 = Dictionary.init(dictionaryLiteral:)();
    a3(v10, 0);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_18AF89278(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_18AF34EA0(0, &qword_1E91255F0);
    sub_18AF34EA0(0, &qword_1E9125120);
    sub_18AF89590();
    uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t (*CKFetchRecordsOperation.fetchRecordsResultBlock.modify(void (**a1)(void *a1, char a2)))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CKFetchRecordsOperation.fetchRecordsResultBlock.getter();
  a1[1] = v3;
  return sub_18AF89390;
}

uint64_t sub_18AF89390(uint64_t *a1, char a2)
{
  return sub_18AF893D0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKFetchRecordsOperation.fetchRecordsResultBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF42F30, (uint64_t (*)(uint64_t, uint64_t))sub_18AF1E758);
}

uint64_t sub_18AF893D0(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if ((a2 & 1) == 0) {
    return a3(*a1, v7);
  }
  a4(*a1, v7);
  a3(v6, v7);

  return a5(v6, v7);
}

uint64_t sub_18AF89474()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_18AF894AC(uint64_t a1, void *a2, char a3)
{
  sub_18AF889A4(a1, a2, a3 & 1, *(void (**)(id, uint64_t, id))(v3 + 16));
}

uint64_t sub_18AF894B8()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

void sub_18AF894F8(void *a1, void *a2, void *a3)
{
  sub_18AF88A30(a1, a2, a3, *(void *)(v3 + 16), *(void (**)(id, void *, uint64_t))(v3 + 24));
}

void sub_18AF89504(objc_class *a1, uint64_t a2)
{
  sub_18AF88FD4(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_18AF8950C()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

void sub_18AF89544(void *a1, char a2)
{
  sub_18AF890B4(a1, a2 & 1, *(void (**)(uint64_t, void *))(v2 + 16));
}

uint64_t sub_18AF89550@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CKFetchRecordsOperation.desiredKeys.getter();
  *a1 = result;
  return result;
}

unint64_t sub_18AF89590()
{
  unint64_t result = qword_1E91251C8;
  if (!qword_1E91251C8)
  {
    sub_18AF34EA0(255, &qword_1E91255F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91251C8);
  }
  return result;
}

void (*CKFetchDatabaseChangesOperation.undeprecated_fetchDatabaseChangesCompletionBlock.getter())(uint64_t a1, char a2, uint64_t a3)
{
  unint64_t result = (void (*)(uint64_t, char, uint64_t))objc_msgSend(v0, sel_fetchDatabaseChangesCompletionBlock);
  if (result)
  {
    *(void *)(swift_allocObject() + 16) = result;
    return sub_18AF89964;
  }
  return result;
}

uint64_t sub_18AF89688@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t)CKFetchDatabaseChangesOperation.undeprecated_fetchDatabaseChangesCompletionBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    uint64_t v6 = sub_18AF8A13C;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a1 = v6;
  a1[1] = result;
  return result;
}

void sub_18AF896F8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AF8A134;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18AF42F30(v1);
  CKFetchDatabaseChangesOperation.undeprecated_fetchDatabaseChangesCompletionBlock.setter((uint64_t)v4, v3);
}

uint64_t sub_18AF89788(uint64_t a1, char a2, uint64_t a3, uint64_t (*a4)(uint64_t *, char *, uint64_t *))
{
  uint64_t v7 = a1;
  char v6 = a2;
  uint64_t v5 = a3;
  return a4(&v7, &v6, &v5);
}

void CKFetchDatabaseChangesOperation.undeprecated_fetchDatabaseChangesCompletionBlock.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    void v6[4] = a1;
    v6[5] = a2;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 1107296256;
    void v6[2] = sub_18AF8996C;
    v6[3] = &unk_1ED7F0FC8;
    uint64_t v5 = _Block_copy(v6);
    swift_retain();
    swift_release();
  }
  else
  {
    uint64_t v5 = 0;
  }
  objc_msgSend(v3, sel_setFetchDatabaseChangesCompletionBlock_, v5);
  sub_18AF1E758(a1);
  _Block_release(v5);
}

void sub_18AF898AC(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  if (a3) {
    uint64_t v7 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v7 = 0;
  }
  id v8 = (id)v7;
  (*(void (**)(uint64_t, uint64_t, void))(a4 + 16))(a4, a1, a2 & 1);
}

uint64_t sub_18AF8992C()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_18AF89964(uint64_t a1, char a2, uint64_t a3)
{
  sub_18AF898AC(a1, a2, a3, *(void *)(v3 + 16));
}

void sub_18AF8996C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7 = *(void (**)(void *, uint64_t, void *))(a1 + 32);
  swift_retain();
  id v9 = a2;
  id v8 = a4;
  v7(a2, a3, a4);
  swift_release();
}

uint64_t (*CKFetchDatabaseChangesOperation.undeprecated_fetchDatabaseChangesCompletionBlock.modify(void (**a1)(uint64_t a1, char a2, uint64_t a3)))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CKFetchDatabaseChangesOperation.undeprecated_fetchDatabaseChangesCompletionBlock.getter();
  a1[1] = v3;
  return sub_18AF89A48;
}

uint64_t sub_18AF89A48(uint64_t *a1, char a2)
{
  return sub_18AF89FFC(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKFetchDatabaseChangesOperation.undeprecated_fetchDatabaseChangesCompletionBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF42F30, (uint64_t (*)(uint64_t, uint64_t))sub_18AF1E758);
}

void (*CKFetchDatabaseChangesOperation.fetchDatabaseChangesResultBlock.getter())(void *a1, __int16 a2)
{
  uint64_t result = (void (*)(void *, __int16))objc_msgSend(v0, sel_fetchDatabaseChangesCompletionBlock);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = sub_18AF8A19C;
    *(void *)(v4 + 24) = v3;
    return sub_18AF89E28;
  }
  return result;
}

uint64_t sub_18AF89B28@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t result = (uint64_t)CKFetchDatabaseChangesOperation.fetchDatabaseChangesResultBlock.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    char v6 = sub_18AF8A12C;
  }
  else
  {
    char v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

uint64_t sub_18AF89B98(uint64_t a1, uint64_t (*a2)(void, void))
{
  return a2(*(void *)a1, *(unsigned __int8 *)(a1 + 8) | (*(unsigned __int8 *)(a1 + 9) << 8));
}

id sub_18AF89BE0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_18AF8A0E8;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_18AF42F30(v1);
  return CKFetchDatabaseChangesOperation.fetchDatabaseChangesResultBlock.setter((uint64_t)v4, v3);
}

id CKFetchDatabaseChangesOperation.fetchDatabaseChangesResultBlock.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    void v9[4] = sub_18AF89F6C;
    v9[5] = v6;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    void v9[2] = sub_18AF8996C;
    v9[3] = &unk_1ED7F13D8;
    uint64_t v7 = _Block_copy(v9);
    swift_retain();
    swift_release();
    objc_msgSend(v3, sel_setFetchDatabaseChangesCompletionBlock_, v7);
    _Block_release(v7);
    return (id)sub_18AF1E758(a1);
  }
  else
  {
    return objc_msgSend(v2, sel_setFetchDatabaseChangesCompletionBlock_, 0);
  }
}

void sub_18AF89DA4(id a1, __int16 a2, void (*a3)(id, uint64_t, id))
{
  char v4 = a2;
  if ((a2 & 0x100) != 0)
  {
    id v6 = a1;
    id v7 = 0;
    uint64_t v8 = 0;
    id v9 = a1;
  }
  else
  {
    id v10 = a1;
    uint64_t v8 = v4 & 1;
    id v7 = a1;
    id v9 = 0;
  }
  a3(v7, v8, v9);

  sub_18AF8A170(a1);
}

void sub_18AF89E28(void *a1, __int16 a2)
{
  sub_18AF89DA4(a1, a2 & 0x1FF, *(void (**)(id, uint64_t, id))(v2 + 16));
}

void sub_18AF89E3C(void *a1, char a2, void *a3, void (*a4)(void *, uint64_t))
{
  if (a3)
  {
    swift_getErrorValue();
    id v8 = a3;
    if (!Error.ckIsPartialError.getter())
    {
      id v12 = a3;
      a4(a3, 256);

      return;
    }
  }
  if (a1)
  {
    id v9 = a1;
    uint64_t v10 = a2 & 1;
    id v11 = a1;
  }
  else
  {
    type metadata accessor for CKError(0);
    sub_18AF8EAA4(MEMORY[0x1E4FBC860]);
    sub_18AF62B54();
    _BridgedStoredNSError.init(_:userInfo:)();
    id v9 = v13;
    id v11 = v13;
    uint64_t v10 = 256;
  }
  a4(v11, v10);
}

void sub_18AF89F6C(void *a1, char a2, void *a3)
{
  sub_18AF89E3C(a1, a2, a3, *(void (**)(void *, uint64_t))(v3 + 16));
}

uint64_t (*CKFetchDatabaseChangesOperation.fetchDatabaseChangesResultBlock.modify(void (**a1)(void *a1, __int16 a2)))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = CKFetchDatabaseChangesOperation.fetchDatabaseChangesResultBlock.getter();
  a1[1] = v3;
  return sub_18AF89FBC;
}

uint64_t sub_18AF89FBC(uint64_t *a1, char a2)
{
  return sub_18AF89FFC(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CKFetchDatabaseChangesOperation.fetchDatabaseChangesResultBlock.setter, (void (*)(uint64_t, uint64_t))sub_18AF62BB8, (uint64_t (*)(uint64_t, uint64_t))sub_18AF62BB4);
}

uint64_t sub_18AF89FFC(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if ((a2 & 1) == 0) {
    return a3(*a1, v7);
  }
  a4(*a1, v7);
  a3(v6, v7);

  return a5(v6, v7);
}

uint64_t sub_18AF8A0B0()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_18AF8A0E8(uint64_t a1, __int16 a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  uint64_t v5 = a1;
  __int16 v6 = a2 & 0x1FF;
  return v3(&v5);
}

uint64_t sub_18AF8A12C(uint64_t a1)
{
  return sub_18AF89B98(a1, *(uint64_t (**)(void, void))(v1 + 16));
}

uint64_t sub_18AF8A134(uint64_t a1, char a2, uint64_t a3)
{
  return sub_18AF89788(a1, a2, a3, *(uint64_t (**)(uint64_t *, char *, uint64_t *))(v3 + 16));
}

uint64_t sub_18AF8A13C(void *a1, unsigned __int8 *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, void))(v3 + 16))(*a1, *a2, *a3);
}

void sub_18AF8A170(id a1)
{
}

uint64_t sub_18AF8A1A0(uint64_t a1, unint64_t a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = a2 >> 62;
  uint64_t v3 = MEMORY[0x1E4FBC860];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_46;
      }
      uint64_t v5 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (!v5) {
        return v3;
      }
      uint64_t v31 = BYTE6(a2);
      unint64_t v30 = HIDWORD(a1);
      uint64_t v47 = MEMORY[0x1E4FBC860];
      uint64_t v8 = v5 & ~(v5 >> 63);
      sub_18AF26470();
      uint64_t v9 = a1;
      uint64_t v3 = v47;
      char v32 = a2;
      if (v2)
      {
        if (v2 == 1) {
          uint64_t v10 = (int)a1;
        }
        else {
          uint64_t v10 = *(void *)(a1 + 16);
        }
        if (v5 < 0)
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
        }
      }
      else
      {
        if (v5 < 0) {
          goto LABEL_48;
        }
        uint64_t v10 = 0;
      }
      unint64_t v28 = a2 >> 16;
      unint64_t v29 = a2 >> 8;
      unint64_t v26 = HIDWORD(a2);
      unint64_t v27 = a2 >> 24;
      unint64_t v25 = a2 >> 40;
      int v34 = v2;
      do
      {
        if (!v8)
        {
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          goto LABEL_45;
        }
        if (v2)
        {
          if (v2 == 1)
          {
            if (v10 < (int)a1 || v10 >= a1 >> 32) {
              goto LABEL_39;
            }
            uint64_t v12 = __DataStorage._bytes.getter();
            if (!v12) {
              goto LABEL_49;
            }
            uint64_t v13 = v12;
            uint64_t v14 = __DataStorage._offset.getter();
            uint64_t v15 = v10 - v14;
            if (__OFSUB__(v10, v14)) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v10 < *(void *)(v9 + 16)) {
              goto LABEL_41;
            }
            if (v10 >= *(void *)(v9 + 24)) {
              goto LABEL_43;
            }
            uint64_t v17 = __DataStorage._bytes.getter();
            if (!v17) {
              goto LABEL_50;
            }
            uint64_t v13 = v17;
            uint64_t v18 = __DataStorage._offset.getter();
            uint64_t v15 = v10 - v18;
            if (__OFSUB__(v10, v18)) {
              goto LABEL_44;
            }
          }
          char v16 = *(unsigned char *)(v13 + v15);
          uint64_t v9 = a1;
        }
        else
        {
          if (v10 >= v31) {
            goto LABEL_40;
          }
          char v35 = v9;
          __int16 v36 = *(_WORD *)((char *)&a1 + 1);
          char v37 = BYTE3(a1);
          char v38 = v30;
          __int16 v39 = *(_WORD *)((char *)&a1 + 5);
          char v40 = HIBYTE(a1);
          char v41 = v32;
          char v42 = v29;
          char v43 = v28;
          char v44 = v27;
          char v45 = v26;
          char v46 = v25;
          char v16 = *(&v35 + v10);
        }
        sub_18AF161EC(&qword_1E9126540);
        uint64_t v19 = swift_allocObject();
        *(_OWORD *)(v19 + 16) = xmmword_18B1F16B0;
        *(void *)(v19 + 56) = MEMORY[0x1E4FBC358];
        *(void *)(v19 + 64) = MEMORY[0x1E4FBC3B0];
        *(unsigned char *)(v19 + 32) = v16;
        uint64_t v20 = String.init(format:_:)();
        uint64_t v22 = v21;
        uint64_t v47 = v3;
        unint64_t v2 = *(void *)(v3 + 16);
        if (v2 >= *(void *)(v3 + 24) >> 1)
        {
          sub_18AF26470();
          uint64_t v9 = a1;
          uint64_t v3 = v47;
        }
        *(void *)(v3 + 16) = v2 + 1;
        uint64_t v23 = v3 + 16 * v2;
        *(void *)(v23 + 32) = v20;
        *(void *)(v23 + 40) = v22;
        ++v10;
        --v8;
        --v5;
        LODWORD(v2) = v34;
      }
      while (v5);
      return v3;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      uint64_t v5 = v6 - v7;
      if (!__OFSUB__(v6, v7)) {
        goto LABEL_6;
      }
      goto LABEL_47;
    case 3uLL:
      return v3;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_18AF8A550(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64616F6C6E776F64 && a2 == 0xEB000000004C5255;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 7955819 && a2 == 0xE300000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x727574616E676973 && a2 == 0xE900000000000065;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x65676E6172 && a2 == 0xE500000000000000)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v9) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t sub_18AF8A70C(char a1)
{
  uint64_t result = 0x64616F6C6E776F64;
  switch(a1)
  {
    case 1:
      uint64_t result = 7955819;
      break;
    case 2:
      uint64_t result = 0x727574616E676973;
      break;
    case 3:
      uint64_t result = 0x65676E6172;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_18AF8A7A0()
{
  return sub_18AF8A70C(*v0);
}

uint64_t sub_18AF8A7A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_18AF8A550(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_18AF8A7D0(uint64_t a1)
{
  unint64_t v2 = sub_18AF8E78C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_18AF8A80C(uint64_t a1)
{
  unint64_t v2 = sub_18AF8E78C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_18AF8A848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v28 = a3;
  uint64_t v31 = type metadata accessor for URL.DirectoryHint();
  uint64_t v11 = *(void *)(v31 - 8);
  MEMORY[0x1F4188790](v31);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  unint64_t v29 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  uint64_t v32 = a1;
  v17(v6 + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_url, a1, v14);
  uint64_t v18 = (void *)(v6
                 + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature);
  uint64_t v19 = a2;
  *uint64_t v18 = a2;
  uint64_t v20 = v28;
  v18[1] = v28;
  uint64_t v21 = (uint64_t *)(v6
                  + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_key);
  uint64_t *v21 = a4;
  v21[1] = a5;
  swift_bridgeObjectRetain();
  uint64_t v30 = a4;
  uint64_t v22 = a4;
  unint64_t v23 = a5;
  sub_18AF5F6FC(v22, a5);
  if (qword_1E91256C0 != -1) {
    swift_once();
  }
  sub_18AF412A0(v14, (uint64_t)qword_1E9126480);
  uint64_t v33 = v19;
  uint64_t v34 = v20;
  uint64_t v24 = v31;
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E4F276C0], v31);
  sub_18AF3AA6C();
  unint64_t v25 = v29;
  URL.appending<A>(component:directoryHint:)();
  sub_18AF5AF68(v30, v23);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v32, v14);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v24);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v6 + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_cacheFile, v25, v14);
  *(void *)(v6
            + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_cacheState) = 0;
  return v6;
}

unint64_t sub_18AF8AB28(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  type metadata accessor for __DataStorage();
  swift_allocObject();
  unint64_t v7 = __DataStorage.init(length:)() | 0x4000000000000000;
  uint64_t v8 = v4 + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_key;
  uint64_t v9 = *(void *)(v4
                 + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_key);
  unint64_t v10 = *(void *)(v8 + 8);
  type metadata accessor for ChunkDataDecryptor();
  swift_allocObject();
  swift_retain();
  sub_18AF5F6FC(v9, v10);
  sub_18AFA9BD0(0x1000000000, v7, v9, v10);
  if (!v3)
  {
    a2 = sub_18AFA9A78(a1, a2);
    swift_release();
  }
  swift_release();
  return a2;
}

uint64_t sub_18AF8AC34(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void *)(v2
                 + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature);
  uint64_t v3 = *(void *)(v2
                 + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature
                 + 8);
  uint64_t v5 = sub_18AFB0310(a1, a2);
  unint64_t v7 = v6;
  sub_18AF8A1A0(v5, v6);
  sub_18AF5AF68(v5, v7);
  sub_18AF161EC((uint64_t *)&unk_1E9125540);
  sub_18AF36488();
  uint64_t v8 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  if (v4 == v8 && v3 == v10) {
    char v12 = 1;
  }
  else {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  return v12 & 1;
}

void sub_18AF8AD20()
{
  uint64_t v0 = type metadata accessor for URL();
  sub_18AF8F144(v0, qword_1E9126480);
  uint64_t v1 = sub_18AF412A0(v0, (uint64_t)qword_1E9126480);
  sub_18AF8AD6C(v1);
}

void sub_18AF8AD6C(uint64_t a1@<X8>)
{
  uint64_t v39 = a1;
  v40[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v1 = sub_18AF161EC(&qword_1E9126560);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v38 = (uint64_t)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL.DirectoryHint();
  uint64_t v36 = *(void *)(v3 - 8);
  uint64_t v37 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = self;
  id v11 = objc_msgSend(v10, sel_defaultManager);
  v40[0] = 0;
  id v12 = objc_msgSend(v11, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 13, 1, 0, 0, v40);
  id v13 = v40[0];
  if (v12)
  {
    uint64_t v14 = v12;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    id v15 = v13;

    id v16 = objc_msgSend(v10, sel_defaultManager);
    URL._bridgeToObjectiveC()(v17);
    uint64_t v19 = v18;
    v40[0] = 0;
    id v20 = objc_msgSend(v16, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 99, 1, v18, 1, v40);

    id v21 = v40[0];
    if (v20)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)();
      id v22 = v21;

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      return;
    }
    id v25 = v40[0];
    uint64_t v24 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    id v23 = v40[0];
    uint64_t v24 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
  }
  if (qword_1E91257A8 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  sub_18AF412A0(v26, (uint64_t)qword_1E9127610);
  id v27 = v24;
  id v28 = v24;
  unint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 138412290;
    id v33 = v24;
    uint64_t v34 = (void *)_swift_stdlib_bridgeErrorToNSError();
    v40[0] = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v32 = v34;

    _os_log_impl(&dword_18AF10000, v29, v30, "Failed to create cache directory with error %@", v31, 0xCu);
    sub_18AF161EC((uint64_t *)&unk_1E9125610);
    swift_arrayDestroy();
    MEMORY[0x18C12BB10](v32, -1, -1);
    MEMORY[0x18C12BB10](v31, -1, -1);
  }
  else
  {
  }
  (*(void (**)(char *, void, uint64_t))(v36 + 104))(v5, *MEMORY[0x1E4F276A8], v37);
  sub_18AF43708(v38, 1, 1, v6);
  URL.init(filePath:directoryHint:relativeTo:)();
}

uint64_t sub_18AF8B258()
{
  uint64_t v1 = type metadata accessor for URL();
  __n128 v2 = MEMORY[0x1F4188790](v1);
  (*(void (**)(char *, uint64_t, __n128))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v0 + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_url, v2);
  return URLRequest.init(url:cachePolicy:timeoutInterval:)();
}

uint64_t sub_18AF8B334(unint64_t a1, char *a2)
{
  uint64_t v4 = v2;
  v36[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_18AF8F054();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v4 + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_cacheFile, v7);
  id v11 = sub_18AF8B928((uint64_t)v10);
  if (v3) {
    return (uint64_t)a2;
  }
  if ((a1 & 0x8000000000000000) == 0)
  {
    id v12 = v11;
    v36[0] = 0;
    if (objc_msgSend(v11, sel_seekToOffset_error_, a1, v36))
    {
      id v13 = &a2[-a1];
      if (__OFSUB__(a2, a1))
      {
        __break(1u);
      }
      else
      {
        id v14 = v36[0];
        uint64_t v15 = NSFileHandle.read(upToCount:)();
        a2 = (char *)v15;
        a1 = v16;
        if (v16 >> 60 != 15)
        {
          sub_18AF5F6FC(v15, v16);
          if ((char *)Data.count.getter() == v13)
          {
            if (qword_1E91257A8 != -1) {
              swift_once();
            }
            uint64_t v17 = type metadata accessor for Logger();
            sub_18AF412A0(v17, (uint64_t)qword_1E9127610);
            swift_retain();
            uint64_t v18 = Logger.logObject.getter();
            int v19 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v18, (os_log_type_t)v19))
            {
              int v34 = v19;
              id v20 = (uint8_t *)swift_slowAlloc();
              id v33 = (void *)swift_slowAlloc();
              v36[0] = v33;
              *(_DWORD *)id v20 = 136315138;
              if ((swift_task_isCurrentExecutor() & 1) == 0) {
                swift_task_reportUnexpectedExecutor();
              }
              uint64_t v21 = *(void *)(v4
                              + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature);
              unint64_t v22 = *(void *)(v4
                              + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature
                              + 8);
              swift_bridgeObjectRetain();
              uint64_t v35 = sub_18AF4095C(v21, v22, (uint64_t *)v36);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_18AF10000, v18, (os_log_type_t)v34, "found chunk with signature %s in local cache", v20, 0xCu);
              id v23 = v33;
              swift_arrayDestroy();
              MEMORY[0x18C12BB10](v23, -1, -1);
              MEMORY[0x18C12BB10](v20, -1, -1);

              sub_18AF5B00C((uint64_t)a2, a1);
            }
            else
            {
              sub_18AF5B00C((uint64_t)a2, a1);

              swift_release();
            }
            return (uint64_t)a2;
          }
          sub_18AF5B00C((uint64_t)a2, a1);
        }
        if (qword_1E91257A8 == -1)
        {
LABEL_17:
          uint64_t v25 = type metadata accessor for Logger();
          sub_18AF412A0(v25, (uint64_t)qword_1E9127610);
          swift_retain_n();
          uint64_t v26 = Logger.logObject.getter();
          int v27 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v26, (os_log_type_t)v27))
          {
            int v34 = v27;
            id v28 = (uint8_t *)swift_slowAlloc();
            id v33 = (void *)swift_slowAlloc();
            v36[0] = v33;
            *(_DWORD *)id v28 = 136315138;
            if ((swift_task_isCurrentExecutor() & 1) == 0) {
              swift_task_reportUnexpectedExecutor();
            }
            uint64_t v29 = *(void *)(v4
                            + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature);
            unint64_t v30 = *(void *)(v4
                            + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature
                            + 8);
            swift_bridgeObjectRetain();
            uint64_t v35 = sub_18AF4095C(v29, v30, (uint64_t *)v36);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_18AF10000, v26, (os_log_type_t)v34, "can't find chunk with signature %s in local cache", v28, 0xCu);
            uint64_t v31 = v33;
            swift_arrayDestroy();
            MEMORY[0x18C12BB10](v31, -1, -1);
            MEMORY[0x18C12BB10](v28, -1, -1);

            sub_18AF5B00C((uint64_t)a2, a1);
          }
          else
          {
            sub_18AF5B00C((uint64_t)a2, a1);

            swift_release_n();
          }
          return 0;
        }
      }
      swift_once();
      goto LABEL_17;
    }
    a2 = (char *)v36[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return (uint64_t)a2;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id sub_18AF8B928(uint64_t a1)
{
  id v13 = (NSURL *)*MEMORY[0x1E4F143B8];
  URL._bridgeToObjectiveC()(v13);
  uint64_t v3 = v2;
  id v12 = 0;
  id v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_fileHandleForReadingFromURL_error_, v2, &v12);

  id v5 = v12;
  if (v4)
  {
    uint64_t v6 = type metadata accessor for URL();
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
    id v8 = v5;
    v7(a1, v6);
  }
  else
  {
    id v9 = v12;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v10 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
  }
  return v4;
}

void sub_18AF8BA80()
{
  uint64_t v2 = v0;
  Data.write(to:options:)();
  if (!v1)
  {
    if (qword_1E91257A8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_18AF412A0(v3, (uint64_t)qword_1E9127610);
    swift_retain();
    id v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      uint64_t v10 = v7;
      *(_DWORD *)uint64_t v6 = 136315138;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v8 = *(void *)(v2
                     + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature);
      unint64_t v9 = *(void *)(v2
                     + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature
                     + 8);
      swift_bridgeObjectRetain();
      sub_18AF4095C(v8, v9, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_18AF10000, v4, v5, "cache chunk with signature %s", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C12BB10](v7, -1, -1);
      MEMORY[0x18C12BB10](v6, -1, -1);
    }
    else
    {

      swift_release();
    }
    URL.ckMarkFilePurgeable()();
  }
}

uint64_t sub_18AF8BC9C(uint64_t a1, uint64_t a2)
{
  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  sub_18AF161EC(&qword_1E9125478);
  v3[14] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18AF8BD34, v2, 0);
}

uint64_t sub_18AF8BD34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v67 = v10;
  uint64_t v12 = *(void *)(v10 + 104);
  uint64_t v13 = OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_cacheState;
  uint64_t v14 = *(void *)(v12
                  + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_cacheState);
  *(void *)(v10 + 120) = v14;
  if (!v14)
  {
    if (qword_1E91257A8 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_18AF412A0(v21, (uint64_t)qword_1E9127610);
    swift_retain();
    unint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (sub_18AF16E34(v23))
    {
      uint64_t v65 = v13;
      uint64_t v24 = (uint8_t *)sub_18AF2A5F0();
      v66[0] = sub_18AF16B9C();
      *(_DWORD *)uint64_t v24 = 136315138;
      if ((swift_task_isCurrentExecutor() & 1) == 0)
      {
        sub_18AF33934();
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v25 = *(void *)(v10 + 104);
      uint64_t v27 = *(void *)(v25
                      + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature);
      unint64_t v26 = *(void *)(v25
                      + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature
                      + 8);
      swift_bridgeObjectRetain();
      *(void *)(v10 + 80) = sub_18AF4095C(v27, v26, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_18AF10000, v22, (os_log_type_t)v11, "chunk %s needed, downloading", v24, 0xCu);
      sub_18AF351C4();
      sub_18AF388F8();
      goto LABEL_30;
    }
LABEL_31:

    swift_release();
    goto LABEL_32;
  }
  if (v14 != 1)
  {
    uint64_t v28 = qword_1E91257A8;
    swift_retain();
    if (v28 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    *(void *)(v10 + 128) = sub_18AF412A0(v29, (uint64_t)qword_1E9127610);
    swift_retain();
    unint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    if (sub_18AF16E34(v31))
    {
      uint64_t v32 = (uint8_t *)sub_18AF2A5F0();
      v66[0] = sub_18AF16B9C();
      *(_DWORD *)uint64_t v32 = 136315138;
      if ((swift_task_isCurrentExecutor() & 1) == 0)
      {
        sub_18AF33934();
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v33 = *(void *)(v10 + 104);
      uint64_t v35 = *(void *)(v33
                      + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature);
      unint64_t v34 = *(void *)(v33
                      + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature
                      + 8);
      swift_bridgeObjectRetain();
      *(void *)(v10 + 72) = sub_18AF4095C(v35, v34, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_18AF10000, v30, (os_log_type_t)v11, "chunk %s download in-progress, waiting", v32, 0xCu);
      sub_18AF351C4();
      sub_18AF388F8();
      sub_18AF388F8();
    }
    else
    {

      swift_release();
    }
    uint64_t v38 = (void *)swift_task_alloc();
    *(void *)(v10 + 136) = v38;
    uint64_t v39 = sub_18AF161EC(&qword_1E9125660);
    *uint64_t v38 = v10;
    v38[1] = sub_18AF8C588;
    uint64_t v43 = MEMORY[0x1E4F277C0];
    uint64_t v44 = MEMORY[0x1E4FBC0F0];
    uint64_t v45 = v10 + 32;
    uint64_t v46 = v14;
    goto LABEL_33;
  }
  if (qword_1E91257A8 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_18AF412A0(v15, (uint64_t)qword_1E9127610);
  swift_retain();
  unint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  uint64_t v65 = v13;
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)sub_18AF2A5F0();
    v66[0] = sub_18AF16B9C();
    *(_DWORD *)uint64_t v18 = 136315138;
    if ((swift_task_isCurrentExecutor() & 1) == 0)
    {
      sub_18AF33934();
      swift_task_reportUnexpectedExecutor();
    }
    uint64_t v19 = *(void *)(v10 + 104);
    uint64_t v20 = *(void *)(v19
                    + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature);
    unint64_t v11 = *(void *)(v19
                    + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature
                    + 8);
    swift_bridgeObjectRetain();
    *(void *)(v10 + 48) = sub_18AF4095C(v20, v11, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_18AF10000, v16, v17, "chunk %s available in cache, retrieving", v18, 0xCu);
    swift_arrayDestroy();
    sub_18AF388F8();
    sub_18AF388F8();

    uint64_t v13 = v65;
  }
  else
  {

    swift_release();
  }
  uint64_t v36 = sub_18AF8B334(*(void *)(v10 + 88), *(char **)(v10 + 96));
  unint64_t v47 = v37;
  if (v37 >> 60 == 15)
  {
    swift_retain();
    unint64_t v22 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.debug.getter();
    if (sub_18AF16E34(v48))
    {
      uint64_t v49 = (uint8_t *)sub_18AF2A5F0();
      v66[0] = sub_18AF16B9C();
      *(_DWORD *)uint64_t v49 = 136315138;
      if ((swift_task_isCurrentExecutor() & 1) == 0)
      {
        sub_18AF33934();
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v50 = *(void *)(v10 + 104);
      uint64_t v51 = *(void *)(v50
                      + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature);
      unint64_t v52 = *(void *)(v50
                      + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature
                      + 8);
      swift_bridgeObjectRetain();
      *(void *)(v10 + 56) = sub_18AF4095C(v51, v52, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_18AF10000, v22, (os_log_type_t)v11, "chunk %s not found in cache, re-downloading", v49, 0xCu);
      sub_18AF351C4();
      sub_18AF388F8();
LABEL_30:
      sub_18AF388F8();

      uint64_t v13 = v65;
LABEL_32:
      uint64_t v54 = *(void *)(v10 + 104);
      uint64_t v53 = *(void *)(v10 + 112);
      uint64_t v55 = type metadata accessor for TaskPriority();
      sub_18AF43708(v53, 1, 1, v55);
      uint64_t v56 = sub_18AF8ED90(&qword_1E9126510, (void (*)(uint64_t))type metadata accessor for ChunkStreamHandle.ChunkReader);
      uint64_t v57 = (void *)swift_allocObject();
      v57[2] = v54;
      v57[3] = v56;
      v57[4] = v54;
      swift_retain_n();
      sub_18AFCA328(v53, (uint64_t)&unk_1E9126518, (uint64_t)v57);
      uint64_t v59 = v58;
      *(void *)(v10 + 152) = v58;
      unint64_t v60 = *(void *)(v12 + v13);
      *(void *)(v12 + v13) = v58;
      swift_retain();
      sub_18AF8EF90(v60);
      uint64_t v61 = (void *)swift_task_alloc();
      *(void *)(v10 + 160) = v61;
      uint64_t v39 = sub_18AF161EC(&qword_1E9125660);
      *uint64_t v61 = v10;
      v61[1] = sub_18AF8C880;
      uint64_t v43 = MEMORY[0x1E4F277C0];
      uint64_t v44 = MEMORY[0x1E4FBC0F0];
      uint64_t v45 = v10 + 16;
      uint64_t v46 = v59;
LABEL_33:
      return MEMORY[0x1F4187D90](v45, v46, v43, v39, v44, v40, v41, v42, a9, a10);
    }
    goto LABEL_31;
  }
  uint64_t v62 = v36;
  swift_task_dealloc();
  sub_18AF306C4();
  return v63(v62, v47);
}

uint64_t sub_18AF8C588()
{
  sub_18AF2A56C();
  sub_18AF33DE0();
  sub_18AF16D18();
  void *v4 = v3;
  void *v4 = *v2;
  *(void *)(v3 + 144) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v1 + 104);
  if (v0) {
    uint64_t v6 = sub_18AF8CA2C;
  }
  else {
    uint64_t v6 = sub_18AF8C688;
  }
  return MEMORY[0x1F4188298](v6, v5, 0);
}

uint64_t sub_18AF8C688()
{
  uint64_t v19 = v0;
  uint64_t v1 = v0[4];
  unint64_t v2 = v0[5];
  uint64_t v3 = Data.subdata(in:)();
  uint64_t v5 = v4;
  sub_18AF5AF68(v1, v2);
  swift_retain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (sub_18AF16E34(v7))
  {
    uint64_t v16 = v5;
    uint64_t v17 = v3;
    uint64_t v8 = (uint8_t *)sub_18AF2A5F0();
    uint64_t v18 = sub_18AF16B9C();
    *(_DWORD *)uint64_t v8 = 136315138;
    if ((swift_task_isCurrentExecutor() & 1) == 0)
    {
      sub_18AF33934();
      swift_task_reportUnexpectedExecutor();
    }
    unint64_t v9 = v0[15];
    uint64_t v10 = v0[13];
    uint64_t v11 = *(void *)(v10
                    + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature);
    unint64_t v12 = *(void *)(v10
                    + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature
                    + 8);
    swift_bridgeObjectRetain();
    v0[8] = sub_18AF4095C(v11, v12, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_18AF10000, v6, (os_log_type_t)v1, "chunk %s download in-progress, done waiting", v8, 0xCu);
    sub_18AF351C4();
    sub_18AF388F8();
    sub_18AF388F8();
    sub_18AF8EF90(v9);

    uint64_t v5 = v16;
    uint64_t v3 = v17;
  }
  else
  {
    unint64_t v13 = v0[15];
    swift_release();
    sub_18AF8EF90(v13);
  }
  swift_task_dealloc();
  sub_18AF306C4();
  return v14(v3, v5);
}

uint64_t sub_18AF8C880()
{
  sub_18AF2A56C();
  sub_18AF33DE0();
  sub_18AF16D18();
  void *v4 = v3;
  void *v4 = *v2;
  *(void *)(v3 + 168) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v1 + 104);
  if (v0) {
    uint64_t v6 = sub_18AF8CA94;
  }
  else {
    uint64_t v6 = sub_18AF8C980;
  }
  return MEMORY[0x1F4188298](v6, v5, 0);
}

uint64_t sub_18AF8C980()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = Data.subdata(in:)();
  uint64_t v5 = v4;
  swift_release();
  sub_18AF5AF68(v1, v2);
  swift_task_dealloc();
  sub_18AF306C4();
  return v6(v3, v5);
}

uint64_t sub_18AF8CA2C()
{
  sub_18AF8EF90(*(void *)(v0 + 120));
  swift_task_dealloc();
  sub_18AF16D48();
  return v1();
}

uint64_t sub_18AF8CA94()
{
  swift_release();
  swift_task_dealloc();
  sub_18AF16D48();
  return v0();
}

uint64_t sub_18AF8CAFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a1;
  void v4[6] = a4;
  uint64_t v6 = type metadata accessor for URLRequest();
  v4[7] = v6;
  v4[8] = *(void *)(v6 - 8);
  v4[9] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_18AF8CBC0, a4, 0);
}

uint64_t sub_18AF8CBC0()
{
  uint64_t v14 = v0;
  if (qword_1E91257A8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_18AF412A0(v1, (uint64_t)qword_1E9127610);
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)sub_18AF2A5F0();
    uint64_t v13 = sub_18AF16B9C();
    *(_DWORD *)uint64_t v4 = 136315138;
    if ((swift_task_isCurrentExecutor() & 1) == 0)
    {
      sub_18AF33934();
      swift_task_reportUnexpectedExecutor();
    }
    uint64_t v5 = v0[6];
    uint64_t v6 = *(void *)(v5
                   + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature);
    unint64_t v7 = *(void *)(v5
                   + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_signature
                   + 8);
    swift_bridgeObjectRetain();
    v0[4] = sub_18AF4095C(v6, v7, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_18AF10000, v2, v3, "chunk %s, download starting", v4, 0xCu);
    swift_arrayDestroy();
    sub_18AF388F8();
    sub_18AF388F8();
  }
  else
  {

    swift_release();
  }
  sub_18AF8B258();
  type metadata accessor for AssetStreamHandle();
  id v8 = sub_18AFB6258();
  v0[10] = v8;
  id v9 = objc_msgSend(self, sel_sharedManager);
  v0[11] = v9;
  if (v9)
  {
    uint64_t v11 = (void *)swift_task_alloc();
    v0[12] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_18AF8CE58;
    id v9 = (id)v0[9];
    id v10 = v8;
  }
  else
  {
    __break(1u);
  }
  return MEMORY[0x1F410D130](v9, v10);
}

uint64_t sub_18AF8CE58()
{
  sub_18AF2A56C();
  uint64_t v2 = *v1;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16D18();
  void *v6 = v5;
  v9[13] = v7;
  v9[14] = v8;
  v9[15] = v10;
  unsigned char v9[16] = v0;
  swift_task_dealloc();
  uint64_t v11 = *(void **)(v2 + 88);
  uint64_t v12 = *(void *)(v2 + 48);

  if (v0) {
    uint64_t v13 = sub_18AF8D2E8;
  }
  else {
    uint64_t v13 = sub_18AF8CFA0;
  }
  return MEMORY[0x1F4188298](v13, v12, 0);
}

uint64_t sub_18AF8CFA0()
{
  self;
  uint64_t v1 = swift_dynamicCastObjCClass();
  if (!v1) {
    goto LABEL_6;
  }
  uint64_t v2 = (void *)v1;
  id v3 = *(id *)(v0 + 120);
  if (objc_msgSend(v2, sel_statusCode) != (id)200)
  {

LABEL_6:
    unint64_t v11 = *(void *)(v0 + 112);
    uint64_t v12 = *(void *)(v0 + 104);
    uint64_t v13 = *(void **)(v0 + 80);
    uint64_t v36 = *(void **)(v0 + 120);
    uint64_t v38 = *(void *)(v0 + 72);
    uint64_t v14 = *(void *)(v0 + 56);
    uint64_t v15 = *(void *)(v0 + 64);
    uint64_t v16 = *(void *)(v0 + 48);
    unint64_t v17 = *(void *)(v16
                    + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_cacheState);
    *(void *)(v16
              + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_cacheState) = 0;
    sub_18AF8EF90(v17);
    type metadata accessor for CKError(0);
    *(void *)(v0 + 24) = 4;
    sub_18AF8EAA4(MEMORY[0x1E4FBC860]);
    sub_18AF8ED90((unint64_t *)&qword_1EB279480, type metadata accessor for CKError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();

    sub_18AF5AF68(v12, v11);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v38, v14);
    goto LABEL_7;
  }
  uint64_t v4 = *(void *)(v0 + 128);
  unint64_t v5 = sub_18AF8AB28(*(void *)(v0 + 104), *(void *)(v0 + 112));
  if (v4)
  {
    unint64_t v7 = *(void *)(v0 + 112);
    uint64_t v8 = *(void **)(v0 + 120);
    uint64_t v9 = *(void *)(v0 + 104);
    uint64_t v10 = *(void **)(v0 + 80);
    (*(void (**)(void, void))(*(void *)(v0 + 64) + 8))(*(void *)(v0 + 72), *(void *)(v0 + 56));

    sub_18AF5AF68(v9, v7);
LABEL_7:
    swift_task_dealloc();
    sub_18AF16D48();
    goto LABEL_8;
  }
  uint64_t v20 = v5;
  unint64_t v21 = v6;
  if ((sub_18AF8AC34(v5, v6) & 1) == 0)
  {
    unint64_t v25 = *(void *)(v0 + 112);
    unint64_t v26 = *(void **)(v0 + 120);
    uint64_t v27 = *(void *)(v0 + 104);
    uint64_t v28 = *(void **)(v0 + 80);
    uint64_t v29 = *(void *)(v0 + 64);
    uint64_t v37 = *(void *)(v0 + 56);
    uint64_t v40 = *(void *)(v0 + 72);
    sub_18AF8EFA0();
    swift_allocError();
    unsigned char *v30 = 1;
    swift_willThrow();

    sub_18AF5AF68(v20, v21);
    sub_18AF5AF68(v27, v25);

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v40, v37);
    goto LABEL_7;
  }
  sub_18AF8BA80();
  unint64_t v22 = *(void **)(v0 + 120);
  unint64_t v39 = *(void *)(v0 + 112);
  uint64_t v23 = *(void *)(v0 + 104);
  uint64_t v24 = *(void **)(v0 + 80);
  uint64_t v31 = *(void *)(v0 + 48);
  uint64_t v32 = sub_18AF1934C();
  v33(v32);

  sub_18AF5AF68(v23, v39);
  unint64_t v34 = *(void *)(v31
                  + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_cacheState);
  *(void *)(v31
            + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_cacheState) = 1;
  sub_18AF8EF90(v34);
  uint64_t v35 = *(uint64_t **)(v0 + 40);
  *uint64_t v35 = v20;
  v35[1] = v21;
  swift_task_dealloc();
  sub_18AF16D48();
LABEL_8:
  return v18();
}

uint64_t sub_18AF8D2E8()
{
  sub_18AF2A56C();
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  sub_18AF16D48();
  return v4();
}

uint64_t sub_18AF8D370()
{
  uint64_t v1 = v0;
  v14[1] = *(id *)MEMORY[0x1E4F143B8];
  id v2 = objc_msgSend(self, sel_defaultManager);
  uint64_t v3 = v0 + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_cacheFile;
  URL._bridgeToObjectiveC()((NSURL *)OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_cacheFile);
  unint64_t v5 = v4;
  v14[0] = 0;
  unsigned int v6 = objc_msgSend(v2, sel_removeItemAtURL_error_, v4, v14);

  if (v6)
  {
    id v7 = v14[0];
  }
  else
  {
    id v8 = v14[0];
    uint64_t v9 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
  }
  uint64_t v10 = v1 + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_url;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
  v12(v10, v11);
  swift_bridgeObjectRelease();
  sub_18AF5AF68(*(void *)(v1 + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_key), *(void *)(v1+ OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_key+ 8));
  v12(v3, v11);
  sub_18AF8EF90(*(void *)(v1
                          + OBJC_IVAR____TtCC8CloudKit17ChunkStreamHandleP33_8C09B02C3959D7B1EC6CDDBFBA6DF63011ChunkReader_cacheState));
  swift_defaultActor_destroy();
  return v1;
}

uint64_t sub_18AF8D50C()
{
  uint64_t v0 = sub_18AF8D370();

  return MEMORY[0x1F4188210](v0);
}

id sub_18AF8D538(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_18AF8D57C(a1);
}

id sub_18AF8D57C(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = type metadata accessor for URL();
  sub_18AF22CB0();
  uint64_t v39 = v5;
  MEMORY[0x1F4188790](v6);
  id v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v40 = (char *)&v33 - v10;
  uint64_t v42 = sub_18AF161EC(&qword_1E9126548);
  sub_18AF22CB0();
  uint64_t v38 = v11;
  MEMORY[0x1F4188790](v12);
  sub_18AF2A608();
  sub_18AF25FCC(a1, a1[3]);
  sub_18AF8E78C();
  uint64_t v13 = v2;
  uint64_t v41 = v1;
  uint64_t v14 = v44;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14)
  {
    sub_18AF40A30((uint64_t)a1);
    id v32 = ObjectType;

    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v44 = v8;
    uint64_t v15 = v39;
    LOBYTE(v46) = 0;
    sub_18AF8ED90(&qword_1E9126550, MEMORY[0x1E4F276F0]);
    uint64_t v16 = v40;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v18 = v4;
    uint64_t v19 = &v13[OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_downloadURL];
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v13[OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_downloadURL], v16, v18);
    char v47 = 1;
    sub_18AF8F094();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v40 = v19;
    long long v20 = v46;
    *(_OWORD *)&v13[OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_key] = v46;
    LOBYTE(v46) = 2;
    uint64_t v37 = 0;
    uint64_t v21 = KeyedDecodingContainer.decode(_:forKey:)();
    unint64_t v35 = *((void *)&v20 + 1);
    uint64_t v36 = v20;
    unint64_t v22 = (uint64_t *)&v13[OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_signature];
    uint64_t v34 = v21;
    *unint64_t v22 = v21;
    v22[1] = v23;
    uint64_t v24 = v23;
    sub_18AF161EC(&qword_1E91264F8);
    char v47 = 3;
    sub_18AF8F0E0(&qword_1E9126558);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)&v13[OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_range] = v46;
    uint64_t v25 = (uint64_t)v44;
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v44, v40, v18);
    type metadata accessor for ChunkStreamHandle.ChunkReader(0);
    swift_allocObject();
    uint64_t v26 = v24;
    swift_bridgeObjectRetain();
    unint64_t v27 = v35;
    uint64_t v28 = v36;
    sub_18AF5F6FC(v36, v35);
    uint64_t v29 = sub_18AF8A848(v25, v34, v26, v28, v27);
    uint64_t v30 = sub_18AF390F0();
    v31(v30);
    *(void *)&v13[OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_chunkReader] = v29;

    v45.receiver = v13;
    v45.super_class = ObjectType;
    id v32 = objc_msgSendSuper2(&v45, sel_init);
    sub_18AF40A30((uint64_t)a1);
  }
  return v32;
}

id sub_18AF8DA40(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = v6;
  uint64_t v54 = a4;
  uint64_t v55 = a5;
  uint64_t v64 = (void *)a3;
  uint64_t v61 = a2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v9 = type metadata accessor for URLError.Code();
  MEMORY[0x1F4188790](v9 - 8);
  sub_18AF19290();
  uint64_t v56 = v11 - v10;
  type metadata accessor for URLError();
  sub_18AF22CB0();
  unint64_t v58 = v13;
  uint64_t v59 = v12;
  MEMORY[0x1F4188790](v12);
  sub_18AF2A608();
  uint64_t v14 = sub_18AF161EC(&qword_1E9126560);
  MEMORY[0x1F4188790](v14 - 8);
  sub_18AF19290();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = type metadata accessor for URL();
  sub_18AF22CB0();
  uint64_t v20 = v19;
  MEMORY[0x1F4188790](v21);
  uint64_t v53 = (char *)&v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v48 - v24;
  uint64_t v26 = v7;
  uint64_t v27 = v18;
  URL.init(string:)();
  if (sub_18AF436E0(v17, 1, v18) == 1)
  {

    sub_18AF8F1A8(a1);
    sub_18AF8F1F4(v17);
    static URLError.Code.badURL.getter();
    sub_18AF8EAA4(MEMORY[0x1E4FBC860]);
    sub_18AF8ED90(&qword_1E9126570, MEMORY[0x1E4F27DE0]);
    uint64_t v28 = v59;
    _BridgedStoredNSError.init(_:userInfo:)();
    URLError._nsError.getter();
    (*(void (**)(id, uint64_t))(v58 + 8))(v5, v28);
    swift_willThrow();
    sub_18AF5AF68(v61, (unint64_t)v64);
  }
  else
  {
    uint64_t v29 = v61;
    id v5 = v64;
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 32))(v25, v17, v18);
    uint64_t v30 = v57;
    uint64_t v31 = sub_18AF647AC();
    if (!v30)
    {
      unint64_t v58 = v32;
      uint64_t v59 = v31;
      uint64_t v33 = sub_18AFA0B10(v31, v32, v29, (unint64_t)v5);
      unint64_t v35 = v34;
      uint64_t v49 = &v26[OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_downloadURL];
      uint64_t v52 = v27;
      uint64_t v36 = *(void (**)(void))(v20 + 16);
      v36();
      uint64_t v56 = v20;
      uint64_t v57 = v25;
      uint64_t v37 = (uint64_t *)&v26[OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_key];
      unint64_t v50 = v35;
      uint64_t v51 = v33;
      *uint64_t v37 = v33;
      v37[1] = v35;
      uint64_t v38 = &v26[OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_range];
      uint64_t v39 = v55;
      *(void *)uint64_t v38 = v54;
      *((void *)v38 + 1) = v39;
      long long v63 = *(_OWORD *)(a1 + 16);
      uint64_t v40 = (uint64_t *)&v26[OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_signature];
      *(_OWORD *)&v26[OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_signature] = v63;
      sub_18AF5F6FC(v33, v35);
      sub_18AF8F254((uint64_t)&v63);
      sub_18AF8F1A8(a1);
      uint64_t v41 = (uint64_t)v53;
      ((void (*)(char *, char *, uint64_t))v36)(v53, v49, v52);
      uint64_t v42 = *v40;
      uint64_t v43 = v40[1];
      uint64_t v44 = *v37;
      unint64_t v45 = v37[1];
      type metadata accessor for ChunkStreamHandle.ChunkReader(0);
      swift_allocObject();
      swift_bridgeObjectRetain();
      sub_18AF5F6FC(v44, v45);
      uint64_t v46 = sub_18AF8A848(v41, v42, v43, v44, v45);
      sub_18AF5AF68(v59, v58);
      sub_18AF5AF68(v51, v50);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v52);
      *(void *)&v26[OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_chunkReader] = v46;

      v62.receiver = v26;
      v62.super_class = ObjectType;
      id v5 = objc_msgSendSuper2(&v62, sel_init);
      sub_18AF5AF68(v61, (unint64_t)v64);
      return v5;
    }

    sub_18AF5AF68(v29, (unint64_t)v5);
    sub_18AF8F1A8(a1);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v25, v18);
  }
  swift_deallocPartialClassInstance();
  return v5;
}

void sub_18AF8DF0C()
{
}

id sub_18AF8DF4C()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_18AF8E02C()
{
  return type metadata accessor for ChunkStreamHandle(0);
}

uint64_t type metadata accessor for ChunkStreamHandle(uint64_t a1)
{
  return sub_18AF8E138(a1, (uint64_t *)&unk_1E9124EC8);
}

uint64_t sub_18AF8E054()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_18AF8E110()
{
  return type metadata accessor for ChunkStreamHandle.ChunkReader(0);
}

uint64_t type metadata accessor for ChunkStreamHandle.ChunkReader(uint64_t a1)
{
  return sub_18AF8E138(a1, (uint64_t *)&unk_1E91264C8);
}

uint64_t sub_18AF8E138(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_18AF8E16C()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ChunkStreamHandle.ChunkReader.CacheState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    uint64_t v3 = swift_retain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for ChunkStreamHandle.ChunkReader.CacheState(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_release();
  }
  return result;
}

unint64_t *assignWithCopy for ChunkStreamHandle.ChunkReader.CacheState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_retain();
    }
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_retain();
    swift_release();
  }
  return a1;
}

void *initializeWithTake for ChunkStreamHandle.ChunkReader.CacheState(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for ChunkStreamHandle.ChunkReader.CacheState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_release();
LABEL_5:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ChunkStreamHandle.ChunkReader.CacheState(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ChunkStreamHandle.ChunkReader.CacheState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_18AF8E424(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_18AF8E43C(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ChunkStreamHandle.ChunkReader.CacheState()
{
  return &type metadata for ChunkStreamHandle.ChunkReader.CacheState;
}

uint64_t sub_18AF8E46C(void *a1)
{
  uint64_t v3 = sub_18AF161EC(&qword_1E91264E0);
  sub_18AF22CB0();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  sub_18AF19290();
  uint64_t v9 = v8 - v7;
  sub_18AF25FCC(a1, a1[3]);
  sub_18AF8E78C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for URL();
  sub_18AF8ED90(&qword_1E91264F0, MEMORY[0x1E4F276F0]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    sub_18AF8E7D8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
    sub_18AF161EC(&qword_1E91264F8);
    sub_18AF8F0E0(&qword_1E9126500);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

BOOL sub_18AF8E6BC(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_18AF8E6CC(uint64_t a1, char a2)
{
}

Swift::Int sub_18AF8E6F4(char a1)
{
  return Hasher._finalize()();
}

id sub_18AF8E73C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id result = sub_18AF8D538(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_18AF8E768(void *a1)
{
  return sub_18AF8E46C(a1);
}

unint64_t sub_18AF8E78C()
{
  unint64_t result = qword_1E91264E8;
  if (!qword_1E91264E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E91264E8);
  }
  return result;
}

unint64_t sub_18AF8E7D8()
{
  unint64_t result = qword_1E9124DA8;
  if (!qword_1E9124DA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9124DA8);
  }
  return result;
}

BOOL sub_18AF8E824(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_18AF8E6BC(*a1, *a2);
}

Swift::Int sub_18AF8E830()
{
  return sub_18AF8E6F4(*v0);
}

void sub_18AF8E838(uint64_t a1)
{
  sub_18AF8E6CC(a1, *v1);
}

uint64_t sub_18AF8E84C(uint64_t a1, uint64_t a2)
{
  void v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x1F4188298](sub_18AF8E870, 0, 0);
}

void sub_18AF8E870()
{
  sub_18AF2A56C();
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[2];
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_range);
  if (v3 > v2 || (uint64_t v4 = v0[3], *(void *)(v1 + OBJC_IVAR____TtC8CloudKit17ChunkStreamHandle_range + 8) < v4))
  {
    sub_18AF8EFA0();
    swift_allocError();
    *uint64_t v5 = 0;
    swift_willThrow();
    sub_18AF16D48();
    v6();
    return;
  }
  uint64_t v7 = v2 - v3;
  if (__OFSUB__(v2, v3))
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v8 = v4 - v3;
  if (__OFSUB__(v4, v3))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v8 < v7)
  {
LABEL_14:
    __break(1u);
    return;
  }
  uint64_t v9 = (void *)swift_task_alloc();
  v0[5] = v9;
  void *v9 = v0;
  v9[1] = sub_18AF8E9C4;
  sub_18AF8BC9C(v7, v8);
}

uint64_t sub_18AF8E9C4()
{
  sub_18AF2A56C();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_18AF184F0();
  uint64_t v6 = *v1;
  sub_18AF16D18();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  sub_18AF306C4();
  if (!v0)
  {
    uint64_t v8 = v5;
    uint64_t v9 = v3;
  }
  return v10(v8, v9);
}

unint64_t sub_18AF8EAA4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  sub_18AF161EC(&qword_1E9126528);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_18AF8EFEC(v6, (uint64_t)&v15);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_18AF8EBD0(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_18AF5F658(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_18AF8EBD0(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_18AF8EC48(a1, a2, v4);
}

unint64_t sub_18AF8EC48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      unint64_t i = (i + 1) & v12;
      if ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
      {
        BOOL v13 = (void *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v12; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v12)
          {
            uint64_t v15 = (void *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
          }
        }
      }
    }
  }
  return i;
}

uint64_t sub_18AF8ED90(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_18AF8EDD8()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_18AF8EE18()
{
  sub_18AF2A56C();
  uint64_t v3 = v2;
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_18AF8EEC8;
  return sub_18AF8CAFC(v3, v4, v5, v6);
}

uint64_t sub_18AF8EEC8()
{
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16D18();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_18AF16D48();
  return v3();
}

unint64_t sub_18AF8EF90(unint64_t result)
{
  if (result >= 2) {
    return swift_release();
  }
  return result;
}

unint64_t sub_18AF8EFA0()
{
  unint64_t result = qword_1E9126520;
  if (!qword_1E9126520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126520);
  }
  return result;
}

uint64_t sub_18AF8EFEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_18AF161EC(&qword_1E9126530);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_18AF8F054()
{
  unint64_t result = qword_1E9126538;
  if (!qword_1E9126538)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9126538);
  }
  return result;
}

unint64_t sub_18AF8F094()
{
  unint64_t result = qword_1E9124E78;
  if (!qword_1E9124E78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9124E78);
  }
  return result;
}

uint64_t sub_18AF8F0E0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_18AF67604(&qword_1E91264F8);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_18AF8F144(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_18AF8F1A8(uint64_t a1)
{
  return a1;
}

uint64_t sub_18AF8F1F4(uint64_t a1)
{
  uint64_t v2 = sub_18AF161EC(&qword_1E9126560);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18AF8F254(uint64_t a1)
{
  return a1;
}

uint64_t _s10SyncReasonOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ChunkStreamHandle.StreamError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18AF8F3D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_18AF8F3FC(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ChunkStreamHandle.StreamError()
{
  return &type metadata for ChunkStreamHandle.StreamError;
}

unsigned char *storeEnumTagSinglePayload for ChunkStreamHandle.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18AF8F4E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ChunkStreamHandle.CodingKeys()
{
  return &type metadata for ChunkStreamHandle.CodingKeys;
}

unint64_t sub_18AF8F520()
{
  unint64_t result = qword_1E9126578;
  if (!qword_1E9126578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126578);
  }
  return result;
}

unint64_t sub_18AF8F570()
{
  unint64_t result = qword_1E9126580;
  if (!qword_1E9126580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126580);
  }
  return result;
}

unint64_t sub_18AF8F5C0()
{
  unint64_t result = qword_1E9126588;
  if (!qword_1E9126588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126588);
  }
  return result;
}

unint64_t sub_18AF8F610()
{
  unint64_t result = qword_1E9126590;
  if (!qword_1E9126590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126590);
  }
  return result;
}

uint64_t CKShareTransferRepresentation.init(exporter:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t CKShareTransferRepresentation.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v5 = type metadata accessor for CKShareTransferRepresentation.ExportedShare();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v23 = v4;
  uint64_t v24 = v5;
  uint64_t v25 = v3;
  uint64_t v26 = WitnessTable;
  uint64_t v6 = type metadata accessor for ProxyRepresentation();
  sub_18AF38990();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&WitnessTable - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&WitnessTable - v13;
  uint64_t v16 = *v2;
  uint64_t v15 = v2[1];
  long long v17 = (void *)swift_allocObject();
  v17[2] = v4;
  v17[3] = v3;
  int v17[4] = v16;
  v17[5] = v15;
  swift_retain();
  ProxyRepresentation.init(exporting:)();
  swift_getWitnessTable();
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v18(v14, v11, v6);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v8 + 8);
  v19(v11, v6);
  v18(v22, v14, v6);
  return ((uint64_t (*)(char *, uint64_t))v19)(v14, v6);
}

uint64_t type metadata accessor for CKShareTransferRepresentation.ExportedShare()
{
  return sub_18AF67C24();
}

void *sub_18AF8F860@<X0>(_OWORD *a1@<X8>)
{
  return sub_18AF8F90C((void *(*)(_OWORD *__return_ptr))sub_18AF92514, a1);
}

uint64_t sub_18AF8F8B4()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

void *sub_18AF8F8EC@<X0>(_OWORD *a1@<X8>)
{
  return sub_18AF8F860(a1);
}

void *sub_18AF8F90C@<X0>(void *(*a1)(_OWORD *__return_ptr)@<X0>, _OWORD *a2@<X8>)
{
  unint64_t result = a1(v6);
  long long v4 = v6[1];
  long long v5 = v6[2];
  *a2 = v6[0];
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

void static CKShareTransferRepresentation.ExportedShare.prepareShare(container:allowedSharingOptions:preparationHandler:)(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  swift_retain();
  id v10 = a2;
  id v11 = a1;

  sub_18AF8FA0C(a1, a2, 0, 0, a3, a4, a5);
}

void sub_18AF8FA0C(void *a1@<X0>, id a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  if (a1)
  {
    id v13 = a1;
    id v14 = CKContainerSetupInfoWithBundleIDOverridesForOOPUIFromContainer(v13);
    id v15 = objc_msgSend(v13, sel_containerID);
    int v19 = CKSharingContainerSupportsAdminParticipants(v15, v16, v17, v18);

    if (v19)
    {
      if (!a2)
      {

        if (a4) {
          goto LABEL_13;
        }
LABEL_10:

        goto LABEL_14;
      }
      id v20 = a2;
      objc_msgSend(v20, sel_setSupportAllowingAddedParticipantsToInviteOthers_, 1);
    }
    if (a4) {
      goto LABEL_6;
    }
LABEL_9:
    id v13 = a1;
    goto LABEL_10;
  }
  id v14 = 0;
  if (!a4) {
    goto LABEL_9;
  }
LABEL_6:
  if (!a2)
  {
    id v13 = a1;
LABEL_13:

    a2 = 0;
    goto LABEL_14;
  }
  uint64_t v21 = self;
  id v22 = a2;
  id v23 = a4;
  a2 = objc_msgSend(v21, sel_resolvedOptionsFromOptions_forExistingShare_, v22, v23);

LABEL_14:
  *a7 = v14;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
}

void static CKShareTransferRepresentation.ExportedShare.existing(_:container:allowedSharingOptions:)(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  id v8 = a1;
  id v9 = a3;
  id v10 = a2;

  sub_18AF8FA0C(a2, a3, 0, a1, 0, 0, a4);
}

BOOL sub_18AF8FBF8()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  if (v1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    long long v4 = &unk_1E9126750;
  }
  else
  {
    long long v4 = 0;
  }
  sub_18AF42F30(v1);
  sub_18AF1E758((uint64_t)v4);
  return v1 != 0;
}

uint64_t sub_18AF8FC8C(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  long long v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_18AF8FD5C;
  return v5();
}

uint64_t sub_18AF8FD5C()
{
  sub_18AF2A56C();
  uint64_t v3 = v2;
  sub_18AF184F0();
  uint64_t v5 = v4;
  uint64_t v6 = *v1;
  sub_18AF16CB4();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  if (!v0) {
    **(void **)(v5 + 16) = v3;
  }
  id v8 = *(uint64_t (**)(void))(v6 + 8);
  return v8();
}

id sub_18AF8FE3C()
{
  if (*v0) {
    return *v0;
  }
  type metadata accessor for CKError(0);
  sub_18AF8EAA4(MEMORY[0x1E4FBC860]);
  sub_18AF62B54();
  _BridgedStoredNSError.init(_:userInfo:)();
  return (id)swift_willThrow();
}

id sub_18AF8FEC4()
{
  uint64_t v1 = *(void **)(v0 + 8);
  if (v1) {
    return v1;
  }
  type metadata accessor for CKError(0);
  sub_18AF8EAA4(MEMORY[0x1E4FBC860]);
  sub_18AF62B54();
  _BridgedStoredNSError.init(_:userInfo:)();
  return (id)swift_willThrow();
}

uint64_t sub_18AF8FF4C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  if (v1)
  {
    swift_retain();
  }
  else
  {
    type metadata accessor for CKError(0);
    sub_18AF8EAA4(MEMORY[0x1E4FBC860]);
    sub_18AF62B54();
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v1 = v3;
    swift_willThrow();
  }
  return v1;
}

id sub_18AF8FFE4()
{
  uint64_t v1 = *(void **)(v0 + 24);
  if (v1) {
    return v1;
  }
  type metadata accessor for CKError(0);
  sub_18AF8EAA4(MEMORY[0x1E4FBC860]);
  sub_18AF62B54();
  _BridgedStoredNSError.init(_:userInfo:)();
  return (id)swift_willThrow();
}

uint64_t sub_18AF9006C()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    id v2 = v1;
    return swift_willThrow();
  }
  else if (!*(void *)(v0 + 8) || *(_OWORD *)(v0 + 24) == 0)
  {
    type metadata accessor for CKError(0);
    sub_18AF8EAA4(MEMORY[0x1E4FBC860]);
    sub_18AF62B54();
    _BridgedStoredNSError.init(_:userInfo:)();
    return swift_willThrow();
  }
  return result;
}

uint64_t static CKShareTransferRepresentation.ExportedShare.transferRepresentation.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v78 = a3;
  uint64_t v5 = type metadata accessor for CKShareTransferRepresentation.ExportedShare();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for DataRepresentation();
  uint64_t v80 = swift_getWitnessTable();
  uint64_t v74 = type metadata accessor for _ConditionalTransferRepresentation();
  sub_18AF38990();
  uint64_t v72 = v7;
  MEMORY[0x1F4188790](v8);
  sub_18AF22D4C();
  uint64_t v77 = v9;
  MEMORY[0x1F4188790](v10);
  uint64_t v73 = (char *)&v67 - v11;
  MEMORY[0x1F4188790](v12);
  uint64_t v81 = (uint64_t)&v67 - v13;
  uint64_t v14 = type metadata accessor for UTType();
  sub_18AF38990();
  uint64_t v16 = v15;
  MEMORY[0x1F4188790](v17);
  char v86 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_18AF38990();
  uint64_t v20 = v19;
  MEMORY[0x1F4188790](v21);
  sub_18AF22D4C();
  uint64_t v67 = v22;
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v67 - v24;
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v67 - v27;
  if (qword_1E91256D8 != -1) {
    swift_once();
  }
  uint64_t v29 = sub_18AF412A0(v14, (uint64_t)qword_1E91265C8);
  uint64_t v30 = *(void (**)(void, void))(v16 + 16);
  uint64_t v82 = v14;
  uint64_t v83 = v30;
  uint64_t v85 = v16 + 16;
  v30(v86, v29);
  uint64_t v31 = sub_18AF19EAC();
  *(void *)(v31 + 16) = a1;
  *(void *)(v31 + 24) = a2;
  DataRepresentation.init(exportedContentType:exporting:)();
  uint64_t v79 = a2;
  uint64_t v84 = a1;
  unint64_t v32 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  id v75 = v28;
  v32(v28, v25, v6);
  unint64_t v35 = *(void (**)(void))(v20 + 8);
  uint64_t v34 = v20 + 8;
  uint64_t v33 = v35;
  sub_18AF16BB4();
  v35();
  uint64_t v36 = v5;
  if (qword_1E91256E0 != -1) {
    swift_once();
  }
  sub_18AF412A0(v82, (uint64_t)qword_1E91265E0);
  sub_18AF30BEC();
  v37();
  uint64_t v38 = sub_18AF19EAC();
  uint64_t v39 = v79;
  *(void *)(v38 + 16) = v84;
  *(void *)(v38 + 24) = v39;
  uint64_t v40 = v67;
  DataRepresentation.init(exportedContentType:exporting:)();
  char v76 = v25;
  uint64_t v41 = v25;
  uint64_t v42 = v40;
  v32(v41, v40, v6);
  sub_18AF16BB4();
  v33();
  uint64_t v43 = v33;
  uint64_t v44 = v36;
  if (qword_1E91256C8 != -1) {
    swift_once();
  }
  sub_18AF412A0(v82, (uint64_t)qword_1E9126598);
  sub_18AF30BEC();
  v45();
  uint64_t v46 = sub_18AF19EAC();
  uint64_t v47 = v84;
  *(void *)(v46 + 16) = v84;
  *(void *)(v46 + 24) = v39;
  DataRepresentation.init(exportedContentType:exporting:)();
  uint64_t v48 = sub_18AF19EAC();
  *(void *)(v48 + 16) = v47;
  *(void *)(v48 + 24) = v39;
  uint64_t v49 = (uint64_t)v73;
  uint64_t v50 = v6;
  TransferRepresentation.exportingCondition(_:)();
  swift_release();
  sub_18AF16BB4();
  v43();
  uint64_t v71 = v43;
  uint64_t v51 = v74;
  uint64_t v69 = swift_getWitnessTable();
  uint64_t v52 = v34;
  uint64_t v53 = v72;
  uint64_t v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 16);
  v68(v81, v49, v51);
  uint64_t v70 = v52;
  uint64_t v72 = *(void *)(v53 + 8);
  sub_18AF16BB4();
  v54();
  if (qword_1E91256D0 != -1) {
    swift_once();
  }
  sub_18AF412A0(v82, (uint64_t)qword_1E91265B0);
  sub_18AF30BEC();
  v55();
  uint64_t v56 = sub_18AF19EAC();
  uint64_t v57 = v84;
  uint64_t v58 = v79;
  *(void *)(v56 + 16) = v84;
  *(void *)(v56 + 24) = v58;
  DataRepresentation.init(exportedContentType:exporting:)();
  uint64_t v59 = sub_18AF19EAC();
  uint64_t WitnessTable = v44;
  *(void *)(v59 + 16) = v57;
  *(void *)(v59 + 24) = v58;
  uint64_t v60 = v77;
  uint64_t v61 = v80;
  TransferRepresentation.exportingCondition(_:)();
  swift_release();
  objc_super v62 = v71;
  ((void (*)(char *, uint64_t))v71)(v42, v50);
  v68(v49, v60, v51);
  long long v63 = (void (*)(void))v72;
  sub_18AF16BB4();
  v63();
  uint64_t v65 = (uint64_t)v75;
  uint64_t v64 = (uint64_t)v76;
  sub_18AF91664((uint64_t)v75, (uint64_t)v76, v81, v49, WitnessTable, v50, v50, v51, v78, v51, v61);
  sub_18AF16BB4();
  v63();
  sub_18AF16BB4();
  v63();
  ((void (*)(uint64_t, uint64_t))v62)(v64, v50);
  return ((uint64_t (*)(uint64_t, uint64_t))v62)(v65, v50);
}

uint64_t sub_18AF9084C(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  long long v4 = a1[1];
  *(_OWORD *)(v3 + 40) = *a1;
  *(void *)(v3 + 24) = a2;
  *(void *)(v3 + 32) = a3;
  *(_OWORD *)(v3 + 56) = v4;
  *(_OWORD *)(v3 + 72) = a1[2];
  return MEMORY[0x1F4188298](sub_18AF908F0, 0, 0);
}

uint64_t sub_18AF908F0()
{
  type metadata accessor for CKShareTransferRepresentation.ExportedShare();
  sub_18AF9006C();
  sub_18AF16E50();
  id v3 = sub_18AF8FE3C();
  long long v4 = self;
  *(void *)(v0 + 16) = 0;
  id v5 = sub_18AF33A78(v4, sel_archivedDataWithRootObject_requiringSecureCoding_error_);
  id v6 = *(id *)(v0 + 16);
  if (v5)
  {
    uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;

    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v10(v7, v9);
  }
  else
  {
    uint64_t v11 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
}

uint64_t sub_18AF90AA0(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  long long v4 = a1[1];
  *(_OWORD *)(v3 + 40) = *a1;
  *(void *)(v3 + 24) = a2;
  *(void *)(v3 + 32) = a3;
  *(_OWORD *)(v3 + 56) = v4;
  *(_OWORD *)(v3 + 72) = a1[2];
  return MEMORY[0x1F4188298](sub_18AF90B44, 0, 0);
}

uint64_t sub_18AF90B44()
{
  type metadata accessor for CKShareTransferRepresentation.ExportedShare();
  sub_18AF9006C();
  sub_18AF16E50();
  id v3 = sub_18AF8FEC4();
  long long v4 = self;
  *(void *)(v0 + 16) = 0;
  id v5 = sub_18AF33A78(v4, sel_archivedDataWithRootObject_requiringSecureCoding_error_);
  id v6 = *(id *)(v0 + 16);
  if (v5)
  {
    uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;

    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v10(v7, v9);
  }
  else
  {
    uint64_t v11 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
}

uint64_t sub_18AF90CF4(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  long long v4 = a1[1];
  *(_OWORD *)(v3 + 40) = *a1;
  *(void *)(v3 + 24) = a2;
  *(void *)(v3 + 32) = a3;
  *(_OWORD *)(v3 + 56) = v4;
  *(_OWORD *)(v3 + 72) = a1[2];
  return MEMORY[0x1F4188298](sub_18AF90D98, 0, 0);
}

uint64_t sub_18AF90D98()
{
  v0[11] = sub_18AF351E0();
  sub_18AF9006C();
  sub_18AF392B4();
  uint64_t v1 = (int *)sub_18AF8FF4C();
  v0[12] = v2;
  id v5 = (uint64_t (*)(void))((char *)v1 + *v1);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[13] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_18AF90F18;
  return v5();
}

uint64_t sub_18AF90F18()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  *(void *)(v2 + 112) = v1;
  *(void *)(v2 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_18AF91258;
  }
  else
  {
    swift_release();
    uint64_t v3 = sub_18AF91040;
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

void sub_18AF91040()
{
  uint64_t v1 = *(void *)(v0 + 120);
  sub_18AF392B4();
  id v2 = sub_18AF8FE3C();
  if (v1)
  {
  }
  else
  {
    uint64_t v3 = v2;
    sub_18AF392B4();
    id v4 = sub_18AF8FEC4();
    uint64_t v5 = *(void **)(v0 + 112);
    uint64_t v8 = v4;
    sub_18AF34EA0(0, (unint64_t *)&unk_1E9125BC0);
    id v9 = v5;
    id v10 = v3;
    id v11 = v8;
    id v12 = sub_18AF915FC(v9, v10, v11);
    uint64_t v13 = self;
    *(void *)(v0 + 16) = 0;
    id v14 = sub_18AF33A78(v13, sel_archivedDataWithRootObject_requiringSecureCoding_error_);
    id v15 = *(id *)(v0 + 16);
    uint64_t v16 = *(void **)(v0 + 112);
    if (v14)
    {
      static Data._unconditionallyBridgeFromObjectiveC(_:)();

      sub_18AF19370();
      __asm { BRAA            X3, X16 }
    }
    uint64_t v19 = v15;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  sub_18AF19370();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_18AF91258()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

BOOL sub_18AF912E8()
{
  return sub_18AF8FBF8();
}

uint64_t sub_18AF91330(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  long long v4 = a1[1];
  *(_OWORD *)(v3 + 40) = *a1;
  *(void *)(v3 + 24) = a2;
  *(void *)(v3 + 32) = a3;
  *(_OWORD *)(v3 + 56) = v4;
  *(_OWORD *)(v3 + 72) = a1[2];
  return MEMORY[0x1F4188298](sub_18AF913D4, 0, 0);
}

void sub_18AF913D4()
{
  sub_18AF351E0();
  id v1 = sub_18AF8FFE4();
  sub_18AF34384();
  id v2 = sub_18AF8FE3C();
  sub_18AF34384();
  id v5 = sub_18AF8FEC4();
  sub_18AF34EA0(0, &qword_1E9126738);
  id v6 = v1;
  id v7 = v2;
  id v8 = v5;
  id v9 = sub_18AF915FC(v6, v7, v8);
  id v10 = self;
  *(void *)(v0 + 16) = 0;
  id v11 = objc_msgSend(v10, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v9, 1, v0 + 16);
  id v12 = *(id *)(v0 + 16);
  if (v11)
  {
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

    sub_18AF19370();
    __asm { BRAA            X3, X16 }
  }
  id v15 = v12;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  sub_18AF19370();
  __asm { BRAA            X1, X16 }
}

id sub_18AF915FC(void *a1, void *a2, void *a3)
{
  id v6 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithShare_containerSetupInfo_allowedOptions_, a1, a2, a3);

  return v6;
}

uint64_t sub_18AF91664@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v27 = a5;
  uint64_t v28 = a9;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v23 = a2;
  uint64_t v26 = a11;
  uint64_t v29 = a6;
  uint64_t v30 = a7;
  uint64_t v31 = a8;
  uint64_t v32 = a10;
  uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  __n128 v16 = MEMORY[0x1F4188790](TupleTypeMetadata);
  uint64_t v19 = (char *)&v23 + v18[12] - v17;
  uint64_t v20 = (char *)&v23 + v18[16] - v17;
  uint64_t v21 = (char *)&v23 + v18[20] - v17;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(*(void *)(a6 - 8) + 16))((char *)&v23 - v17, a1, a6, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 16))(v19, v23, a7);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a8 - 8) + 16))(v20, v24, a8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a10 - 8) + 16))(v21, v25, a10);
  swift_getAssociatedConformanceWitness();
  return TupleTransferRepresentation.init(_:)();
}

uint64_t sub_18AF9184C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static CKShareTransferRepresentation.ExportedShare.transferRepresentation.getter(*(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t sub_18AF91860(uint64_t a1)
{
  return sub_18AF91944(a1, qword_1E9126598);
}

uint64_t sub_18AF91874(uint64_t a1)
{
  return sub_18AF91944(a1, qword_1E91265B0);
}

uint64_t sub_18AF91888(uint64_t a1)
{
  return sub_18AF91944(a1, qword_1E91265C8);
}

uint64_t sub_18AF918A0()
{
  sub_18AF2A56C();
  sub_18AF306D0();
  uint64_t v0 = swift_task_alloc();
  id v1 = (void *)sub_18AF19364(v0);
  *id v1 = v2;
  v1[1] = sub_18AF92548;
  uint64_t v3 = (_OWORD *)sub_18AF39104();
  return sub_18AF9084C(v3, v4, v5);
}

uint64_t sub_18AF91930(uint64_t a1)
{
  return sub_18AF91944(a1, qword_1E91265E0);
}

uint64_t sub_18AF91944(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_18AF161EC(&qword_1E9126740);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UTType();
  sub_18AF8F144(v6, a2);
  sub_18AF412A0(v6, (uint64_t)a2);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_18AF43708((uint64_t)v5, 1, 1, v6);
  return UTType.init(exportedAs:conformingTo:)();
}

uint64_t sub_18AF91A24()
{
  sub_18AF2A56C();
  sub_18AF306D0();
  uint64_t v0 = swift_task_alloc();
  id v1 = (void *)sub_18AF19364(v0);
  *id v1 = v2;
  v1[1] = sub_18AF91AB4;
  uint64_t v3 = (_OWORD *)sub_18AF39104();
  return sub_18AF90AA0(v3, v4, v5);
}

uint64_t sub_18AF91AB4()
{
  sub_18AF2A56C();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_18AF184F0();
  uint64_t v5 = *v0;
  sub_18AF16CB4();
  void *v6 = v5;
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  return v7(v4, v2);
}

uint64_t sub_18AF91B94()
{
  sub_18AF2A56C();
  sub_18AF306D0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF19364(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF92548;
  uint64_t v3 = (_OWORD *)sub_18AF39104();
  return sub_18AF90CF4(v3, v4, v5);
}

BOOL sub_18AF91C28()
{
  return sub_18AF912E8();
}

uint64_t sub_18AF91C34()
{
  sub_18AF2A56C();
  sub_18AF306D0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_18AF19364(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_18AF92548;
  uint64_t v3 = (_OWORD *)sub_18AF39104();
  return sub_18AF91330(v3, v4, v5);
}

BOOL sub_18AF91CC8(uint64_t a1)
{
  return *(void *)(a1 + 24) != 0;
}

uint64_t sub_18AF91CD8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_18AF91D1C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_18AF91D60(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

void *sub_18AF91D68(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t sub_18AF91D98()
{
  return swift_release();
}

void *sub_18AF91DA0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_18AF91DDC(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t sub_18AF91E10(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_18AF91E50(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for CKShareTransferRepresentation()
{
  return sub_18AF67C24();
}

uint64_t sub_18AF91EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 40);
}

void sub_18AF91EAC(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    swift_release();
  }
}

void *sub_18AF91F14(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v5;
  uint64_t v6 = *(void **)(a2 + 16);
  id v7 = v4;
  id v8 = v5;
  id v9 = v6;
  uint64_t v10 = *(void *)(a2 + 32);
  id v11 = *(void **)(a2 + 24);
  a1[2] = v6;
  a1[3] = v11;
  id v12 = v11;
  if (v10)
  {
    uint64_t v13 = *(void *)(a2 + 40);
    a1[4] = v10;
    a1[5] = v13;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  }
  return a1;
}

uint64_t sub_18AF91F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  id v7 = *(void **)(a1 + 8);
  id v8 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v8;
  id v9 = v8;

  uint64_t v10 = *(void **)(a1 + 16);
  id v11 = *(void **)(a2 + 16);
  id v12 = v11;
  *(void *)(a1 + 16) = v11;

  uint64_t v13 = *(void **)(a1 + 24);
  uint64_t v14 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v14;
  id v15 = v14;

  uint64_t v16 = *(void *)(a2 + 32);
  if (!*(void *)(a1 + 32))
  {
    if (v16)
    {
      uint64_t v18 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v16;
      *(void *)(a1 + 40) = v18;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    return a1;
  }
  if (!v16)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v17 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v16;
  *(void *)(a1 + 40) = v17;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_18AF9207C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  uint64_t v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  uint64_t v6 = *(void *)(a2 + 32);
  if (!*(void *)(a1 + 32))
  {
    if (v6)
    {
      uint64_t v8 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v6;
      *(void *)(a1 + 40) = v8;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    return a1;
  }
  if (!v6)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  swift_release();
  return a1;
}

uint64_t sub_18AF92128(uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 48))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      uint64_t v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_18AF9217C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

uint64_t sub_18AF921DC()
{
  return swift_getWitnessTable();
}

uint64_t sub_18AF9226C()
{
  return swift_getWitnessTable();
}

uint64_t sub_18AF92368()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_18AF923A0()
{
  sub_18AF2A56C();
  sub_18AF306D0();
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_18AF19364(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_18AF9244C;
  uint64_t v5 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1E9126748 + dword_1E9126748);
  return v5(v0, v1);
}

uint64_t sub_18AF9244C()
{
  sub_18AF184F0();
  uint64_t v1 = *v0;
  sub_18AF16CB4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_18AF92514()
{
  return (*(uint64_t (**)(void))(v0 + 32))(*(void *)(v0 + 48));
}

id CKSyncEngineRecordZoneChangeBatch.batchStruct()@<X0>(uint64_t a1@<X8>)
{
  id v3 = objc_msgSend(v1, sel_recordsToSave);
  sub_18AF34EA0(0, &qword_1E9125120);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v5 = objc_msgSend(v1, sel_recordIDsToDelete);
  sub_18AF34EA0(0, &qword_1E91255F0);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id result = objc_msgSend(v1, sel_atomicByZone);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = (_BYTE)result;
  return result;
}

uint64_t CKSyncEngine.RecordZoneChangeBatch.recordsToSave.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CKSyncEngine.RecordZoneChangeBatch.recordsToSave.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*CKSyncEngine.RecordZoneChangeBatch.recordsToSave.modify())()
{
  return nullsub_2;
}

uint64_t CKSyncEngine.RecordZoneChangeBatch.recordIDsToDelete.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CKSyncEngine.RecordZoneChangeBatch.recordIDsToDelete.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*CKSyncEngine.RecordZoneChangeBatch.recordIDsToDelete.modify())()
{
  return nullsub_2;
}

uint64_t CKSyncEngine.RecordZoneChangeBatch.atomicByZone.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t CKSyncEngine.RecordZoneChangeBatch.atomicByZone.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 16) = result;
  return result;
}

uint64_t (*CKSyncEngine.RecordZoneChangeBatch.atomicByZone.modify())()
{
  return nullsub_2;
}

void sub_18AF926FC()
{
  qword_1E912FE58 = 1572864;
}

uint64_t static CKSyncEngine.RecordZoneChangeBatch.maxRecordCountPerBatch.getter()
{
  return 250;
}

uint64_t CKSyncEngine.RecordZoneChangeBatch.init(pendingChanges:recordProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[6] = a3;
  v4[7] = a4;
  v4[4] = a1;
  v4[5] = a2;
  return MEMORY[0x1F4188298](sub_18AF92738, 0, 0);
}

uint64_t sub_18AF92738()
{
  unint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)(v0 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v2 = (unint64_t *)(v0 + 16);
  *(void *)(v0 + 24) = v1;
  unint64_t v3 = v0 + 24;
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v4 + 16);
  *(void *)(v0 + 64) = v5;
  if (v5)
  {
    *(void *)(v0 + 88) = 0;
    *(void *)(v0 + 96) = 0;
    *(void *)(v0 + 72) = v1;
    *(void *)(v0 + 80) = v1;
    uint64_t v6 = *(void **)(v4 + 32);
    *(void *)(v0 + 104) = v6;
    if (*(unsigned char *)(v4 + 40) != 1)
    {
LABEL_26:
      uint64_t v44 = (uint64_t (*)(id))(*(void *)(v0 + 48) + **(int **)(v0 + 48));
      id v19 = v6;
      uint64_t v20 = (void *)swift_task_alloc();
      *(void *)(v0 + 112) = v20;
      *uint64_t v20 = v0;
      v20[1] = sub_18AF92D30;
      return v44(v19);
    }
    uint64_t v7 = 0;
    while (1)
    {
      unint64_t v8 = v6;
      id v9 = objc_msgSend((id)v8, sel_size);
      uint64_t v10 = (uint64_t)v9 + v7;
      if (__OFADD__(v7, v9)) {
        break;
      }
      if (qword_1E9124F08 != -1) {
        swift_once();
      }
      if (qword_1E912FE58 < v10)
      {

        swift_bridgeObjectRelease();
        if (qword_1E91252D0 != -1) {
          swift_once();
        }
        uint64_t v22 = type metadata accessor for Logger();
        uint64_t v23 = sub_18AF18638(v22, (uint64_t)qword_1E91253B0);
        os_log_type_t v24 = static os_log_type_t.debug.getter();
        BOOL v25 = os_log_type_enabled(v23, v24);
        uint64_t v26 = *(void **)(v0 + 104);
        if (v25)
        {
          uint64_t v27 = (uint8_t *)sub_18AF389E0();
          *(_WORD *)uint64_t v27 = 0;
          _os_log_impl(&dword_18AF10000, v23, v24, "Next record will exceed max bytes per batch", v27, 2u);
          sub_18AF388F8();
        }

        unint64_t v8 = *(void *)(v0 + 80);
        goto LABEL_45;
      }
      unint64_t v8 = (unint64_t)(id)v8;
      MEMORY[0x18C129220]();
      if (*(void *)((*(void *)v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v3 & 0xFFFFFFFFFFFFFF8)
                                                                                  + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      id v11 = objc_msgSend((id)v8, sel_size);

      BOOL v12 = __OFADD__(v7, v11);
      v7 += (uint64_t)v11;
      if (v12) {
        goto LABEL_54;
      }
      if (v1 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v13 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      unint64_t v8 = *(void *)v3;
      if (*(void *)v3 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v14 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (__OFADD__(v13, v14)) {
        goto LABEL_55;
      }
      if (v13 + v14 >= 250)
      {
        swift_bridgeObjectRelease();
        if (qword_1E91252D0 != -1) {
          swift_once();
        }
        uint64_t v28 = type metadata accessor for Logger();
        uint64_t v29 = (void *)sub_18AF18638(v28, (uint64_t)qword_1E91253B0);
        os_log_type_t v30 = static os_log_type_t.debug.getter();
        BOOL v31 = sub_18AF392D0(v30);
        uint64_t v32 = *(void **)(v0 + 104);
        if (v31)
        {
          *(_WORD *)sub_18AF389E0() = 0;
          unint64_t v35 = "Reached max record count per batch";
          goto LABEL_42;
        }
LABEL_43:

        goto LABEL_45;
      }
      if (qword_1E9124F08 != -1) {
        swift_once();
      }
      if (v7 >= qword_1E912FE58)
      {
        swift_bridgeObjectRelease();
        if (qword_1E91252D0 != -1) {
          swift_once();
        }
        uint64_t v36 = type metadata accessor for Logger();
        uint64_t v29 = (void *)sub_18AF18638(v36, (uint64_t)qword_1E91253B0);
        os_log_type_t v37 = static os_log_type_t.debug.getter();
        BOOL v38 = sub_18AF392D0(v37);
        uint64_t v32 = *(void **)(v0 + 104);
        if (v38)
        {
          *(_WORD *)sub_18AF389E0() = 0;
          unint64_t v35 = "Current batch is over the max bytes per batch";
LABEL_42:
          sub_18AF16E74(&dword_18AF10000, v33, v34, v35);
          sub_18AF388F8();
        }
        goto LABEL_43;
      }
      uint64_t v15 = *(void *)(v0 + 64);
      uint64_t v16 = *(void *)(v0 + 96) + 1;

      if (v16 == v15)
      {
        swift_bridgeObjectRelease();
        goto LABEL_45;
      }
      uint64_t v17 = *(void *)(v0 + 96) + 1;
      *(void *)(v0 + 88) = v7;
      *(void *)(v0 + 96) = v17;
      *(void *)(v0 + 72) = v1;
      *(void *)(v0 + 80) = v8;
      sub_18AF38F2C(v17);
      if ((v18 & 1) == 0) {
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    swift_bridgeObjectRetain();
    uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v41) {
      goto LABEL_49;
    }
LABEL_47:
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v42) {
        goto LABEL_49;
      }
    }
    else if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_49;
    }
    uint64_t v43 = *(void *)(v0 + 32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)uint64_t v43 = 0;
    *(void *)(v43 + 8) = 0;
    *(unsigned char *)(v43 + 16) = 0;
    goto LABEL_50;
  }
  swift_bridgeObjectRelease();
  unint64_t v8 = MEMORY[0x1E4FBC860];
LABEL_45:
  unint64_t v3 = *v2;
  if (*v2 >> 62) {
    goto LABEL_56;
  }
  if (!*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_47;
  }
LABEL_49:
  uint64_t v39 = *(void *)(v0 + 32);
  *(void *)uint64_t v39 = v3;
  *(void *)(v39 + 8) = v8;
  *(unsigned char *)(v39 + 16) = 0;
LABEL_50:
  uint64_t v40 = *(uint64_t (**)(void))(v0 + 8);
  return v40();
}

uint64_t sub_18AF92D30(uint64_t a1)
{
  *(void *)(*(void *)v1 + 120) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_18AF92E30, 0, 0);
}

uint64_t sub_18AF92E30()
{
  uint64_t v2 = (void *)(v1 + 16);
  uint64_t v3 = *(void **)(v1 + 120);
  if (v3)
  {
    uint64_t v4 = *(void *)(v1 + 88);
    id v5 = objc_msgSend(*(id *)(v1 + 120), sel_size);
    uint64_t v6 = (uint64_t)v5 + v4;
    if (__OFADD__(v4, v5))
    {
      __break(1u);
    }
    else if (qword_1E9124F08 == -1)
    {
LABEL_4:
      uint64_t v7 = qword_1E912FE58;
      if (qword_1E912FE58 < v6)
      {
        unint64_t v8 = *(void *)(v1 + 72);
        if (v8 >> 62)
        {
          sub_18AF3520C();
          uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v21) {
            goto LABEL_9;
          }
        }
        else if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_9:
          uint64_t v10 = *(void **)(v1 + 104);

          swift_bridgeObjectRelease();
          goto LABEL_63;
        }
        unint64_t v9 = *(void *)(v1 + 80);
        if (v9 >> 62)
        {
          sub_18AF3520C();
          uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v22) {
            goto LABEL_9;
          }
        }
        else if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_9;
        }
      }
      id v23 = v3;
      MEMORY[0x18C129220]();
      if (*(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      os_log_type_t v24 = *(void **)(v1 + 104);
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      uint64_t v2 = (void *)(v1 + 16);
      uint64_t v20 = (unint64_t *)(v1 + 16);
      if (v7 < v6)
      {
        swift_bridgeObjectRelease();
        goto LABEL_63;
      }
      goto LABEL_25;
    }
    swift_once();
    goto LABEL_4;
  }
  if (qword_1E91252D0 != -1) {
    swift_once();
  }
  id v11 = *(void **)(v1 + 104);
  uint64_t v12 = type metadata accessor for Logger();
  sub_18AF412A0(v12, (uint64_t)qword_1E91253B0);
  id v13 = v11;
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  BOOL v16 = sub_18AF392D0(v15);
  uint64_t v17 = *(NSObject **)(v1 + 104);
  if (v16)
  {
    uint64_t v18 = swift_slowAlloc();
    id v19 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 138412290;
    *(void *)(v18 + 4) = v17;
    void *v19 = v17;
    _os_log_impl(&dword_18AF10000, v14, v0, "No record to save for record ID %@", (uint8_t *)v18, 0xCu);
    sub_18AF161EC((uint64_t *)&unk_1E9125610);
    swift_arrayDestroy();
    sub_18AF388F8();
    sub_18AF388F8();
  }
  else
  {

    uint64_t v14 = v17;
  }

  uint64_t v6 = *(void *)(v1 + 88);
  uint64_t v20 = (unint64_t *)(v1 + 72);
LABEL_25:
  BOOL v25 = (id *)(v1 + 24);
  unint64_t v26 = *v20;
  uint64_t v27 = *v20 & 0xFFFFFFFFFFFFFF8;
  while (1)
  {
    if (v26 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)(v27 + 16);
    }
    unint64_t v29 = (unint64_t)*v25;
    if ((unint64_t)*v25 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (__OFADD__(v28, v30))
    {
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
      goto LABEL_79;
    }
    if (v28 + v30 >= 250)
    {
      swift_bridgeObjectRelease();
      if (qword_1E91252D0 != -1) {
        swift_once();
      }
      uint64_t v40 = type metadata accessor for Logger();
      uint64_t v41 = sub_18AF18638(v40, (uint64_t)qword_1E91253B0);
      os_log_type_t v42 = static os_log_type_t.debug.getter();
      BOOL v43 = os_log_type_enabled(v41, v42);
      uint64_t v44 = *(void **)(v1 + 104);
      if (!v43) {
        goto LABEL_57;
      }
      uint64_t v45 = (uint8_t *)sub_18AF389E0();
      *(_WORD *)uint64_t v45 = 0;
      uint64_t v46 = "Reached max record count per batch";
      goto LABEL_56;
    }
    if (qword_1E9124F08 != -1) {
      swift_once();
    }
    if (v6 >= qword_1E912FE58)
    {
      swift_bridgeObjectRelease();
      if (qword_1E91252D0 != -1) {
        swift_once();
      }
      uint64_t v47 = type metadata accessor for Logger();
      uint64_t v41 = sub_18AF18638(v47, (uint64_t)qword_1E91253B0);
      os_log_type_t v42 = static os_log_type_t.debug.getter();
      BOOL v48 = os_log_type_enabled(v41, v42);
      uint64_t v44 = *(void **)(v1 + 104);
      if (!v48) {
        goto LABEL_57;
      }
      uint64_t v45 = (uint8_t *)sub_18AF389E0();
      *(_WORD *)uint64_t v45 = 0;
      uint64_t v46 = "Current batch is over the max bytes per batch";
LABEL_56:
      _os_log_impl(&dword_18AF10000, v41, v42, v46, v45, 2u);
      sub_18AF388F8();
LABEL_57:

      goto LABEL_68;
    }
    uint64_t v31 = *(void *)(v1 + 64);
    uint64_t v32 = *(void *)(v1 + 96) + 1;

    if (v32 == v31)
    {
      swift_bridgeObjectRelease();
      goto LABEL_68;
    }
    uint64_t v33 = *(void *)(v1 + 96) + 1;
    *(void *)(v1 + 88) = v6;
    *(void *)(v1 + 96) = v33;
    *(void *)(v1 + 72) = v26;
    *(void *)(v1 + 80) = v29;
    sub_18AF38F2C(v33);
    if ((v35 & 1) == 0) {
      break;
    }
    unint64_t v29 = v34;
    id v36 = objc_msgSend((id)v29, sel_size);
    uint64_t v37 = (uint64_t)v36 + v6;
    if (__OFADD__(v6, v36)) {
      goto LABEL_77;
    }
    if (qword_1E9124F08 != -1) {
      swift_once();
    }
    if (qword_1E912FE58 < v37)
    {

      swift_bridgeObjectRelease();
LABEL_63:
      if (qword_1E91252D0 != -1) {
        swift_once();
      }
      uint64_t v52 = type metadata accessor for Logger();
      uint64_t v53 = (void *)sub_18AF18638(v52, (uint64_t)qword_1E91253B0);
      os_log_type_t v54 = static os_log_type_t.debug.getter();
      BOOL v55 = sub_18AF392D0(v54);
      uint64_t v56 = *(void **)(v1 + 104);
      if (v55)
      {
        *(_WORD *)sub_18AF389E0() = 0;
        sub_18AF16E74(&dword_18AF10000, v57, v58, "Next record will exceed max bytes per batch");
        sub_18AF388F8();
      }

      unint64_t v29 = *(void *)(v1 + 80);
LABEL_68:
      BOOL v25 = (id *)*v2;
      if (!(*v2 >> 62))
      {
        if (*(void *)(((unint64_t)v25 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_72:
          uint64_t v59 = *(void *)(v1 + 32);
          *(void *)uint64_t v59 = v25;
          *(void *)(v59 + 8) = v29;
          *(unsigned char *)(v59 + 16) = 0;
LABEL_73:
          uint64_t v60 = *(uint64_t (**)(void))(v1 + 8);
          return v60();
        }
LABEL_70:
        if (v29 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v62 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v62) {
            goto LABEL_72;
          }
        }
        else if (*(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_72;
        }
        uint64_t v63 = *(void *)(v1 + 32);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)uint64_t v63 = 0;
        *(void *)(v63 + 8) = 0;
        *(unsigned char *)(v63 + 16) = 0;
        goto LABEL_73;
      }
LABEL_79:
      sub_18AF16BC0();
      uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v61) {
        goto LABEL_72;
      }
      goto LABEL_70;
    }
    unint64_t v29 = (unint64_t)(id)v29;
    MEMORY[0x18C129220]();
    if (*(void *)(((unint64_t)*v25 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)*v25 & 0xFFFFFFFFFFFFFF8)
                                                                                         + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    id v38 = objc_msgSend((id)v29, sel_size);

    BOOL v39 = __OFADD__(v6, v38);
    v6 += (uint64_t)v38;
    if (v39) {
      goto LABEL_78;
    }
  }
  uint64_t v64 = (uint64_t (*)(id))(*(void *)(v1 + 48) + **(int **)(v1 + 48));
  id v49 = v34;
  uint64_t v50 = (void *)swift_task_alloc();
  *(void *)(v1 + 112) = v50;
  *uint64_t v50 = v1;
  v50[1] = sub_18AF92D30;
  return v64(v49);
}

uint64_t CKSyncEngine.RecordZoneChangeBatch.init(recordsToSave:recordIDsToDelete:atomicByZone:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = result;
  *(void *)(a4 + 8) = a2;
  *(unsigned char *)(a4 + 16) = a3;
  return result;
}

uint64_t sub_18AF93664@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(id)@<X1>, uint64_t a3@<X8>)
{
  unint64_t v47 = MEMORY[0x1E4FBC860];
  unint64_t v48 = MEMORY[0x1E4FBC860];
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (unsigned __int8 *)(a1 + 40);
    unint64_t v7 = MEMORY[0x1E4FBC860];
    unint64_t v8 = MEMORY[0x1E4FBC860];
    while (1)
    {
      unint64_t v9 = (void *)*((void *)v6 - 1);
      int v10 = *v6;
      id v11 = v9;
      uint64_t v12 = (uint64_t)v11;
      uint64_t v46 = v11;
      if (v10 == 1)
      {
        id v13 = objc_msgSend(v11, sel_size);
        uint64_t v14 = (uint64_t)v13 + v5;
        if (__OFADD__(v5, v13)) {
          goto LABEL_74;
        }
        if (qword_1E9124F08 != -1) {
          swift_once();
        }
        if (qword_1E912FE58 < v14)
        {
          swift_bridgeObjectRelease();
LABEL_59:

LABEL_61:
          uint64_t v28 = (void *)v12;
          if (qword_1E91252D0 != -1) {
            swift_once();
          }
          uint64_t v40 = type metadata accessor for Logger();
          sub_18AF412A0(v40, (uint64_t)qword_1E91253B0);
          id v36 = Logger.logObject.getter();
          os_log_type_t v37 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v36, v37))
          {
            id v38 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)id v38 = 0;
            BOOL v39 = "Next record will exceed max bytes per batch";
LABEL_65:
            _os_log_impl(&dword_18AF10000, v36, v37, v39, v38, 2u);
            MEMORY[0x18C12BB10](v38, -1, -1);
          }
LABEL_66:

          goto LABEL_67;
        }
        unint64_t v8 = (unint64_t)(id)v12;
        MEMORY[0x18C129220]();
        if (*(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v12 = (uint64_t)objc_msgSend((id)v8, sel_size);

        BOOL v15 = __OFADD__(v5, v12);
        v5 += v12;
        if (v15) {
          goto LABEL_75;
        }
      }
      else
      {
        BOOL v16 = (void *)a2(v11);
        if (v16)
        {
          uint64_t v12 = (uint64_t)v16;
          id v17 = objc_msgSend(v16, sel_size);
          BOOL v15 = __OFADD__(v5, v17);
          v5 += (uint64_t)v17;
          if (v15) {
            goto LABEL_76;
          }
          if (qword_1E9124F08 != -1) {
            swift_once();
          }
          uint64_t v18 = qword_1E912FE58;
          if (qword_1E912FE58 < v5)
          {
            if (v7 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v29) {
                goto LABEL_47;
              }
            }
            else if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              goto LABEL_47;
            }
            if (v8 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v30)
              {
LABEL_47:
                swift_bridgeObjectRelease();

                uint64_t v12 = (uint64_t)v46;
                goto LABEL_59;
              }
            }
            else if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              goto LABEL_47;
            }
          }
          id v19 = (id)v12;
          MEMORY[0x18C129220]();
          if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          uint64_t v12 = (uint64_t)v46;
          if (v18 < v5)
          {
            swift_bridgeObjectRelease();
            goto LABEL_61;
          }
          unint64_t v7 = v48;
        }
        else
        {
          if (qword_1E91252D0 != -1) {
            swift_once();
          }
          uint64_t v20 = type metadata accessor for Logger();
          sub_18AF412A0(v20, (uint64_t)qword_1E91253B0);
          id v21 = v46;
          uint64_t v22 = Logger.logObject.getter();
          os_log_type_t v23 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v22, v23))
          {
            uint64_t v44 = a3;
            uint64_t v24 = swift_slowAlloc();
            BOOL v25 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v24 = 138412290;
            *(void *)(v24 + 4) = v21;
            *BOOL v25 = v9;
            _os_log_impl(&dword_18AF10000, v22, v23, "No record to save for record ID %@", (uint8_t *)v24, 0xCu);
            sub_18AF161EC((uint64_t *)&unk_1E9125610);
            swift_arrayDestroy();
            MEMORY[0x18C12BB10](v25, -1, -1);
            uint64_t v26 = v24;
            a3 = v44;
            MEMORY[0x18C12BB10](v26, -1, -1);
          }
          else
          {
          }
        }
      }
      if (v7 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v12 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      unint64_t v8 = v47;
      if (v47 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v27 = *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (__OFADD__(v12, v27)) {
        break;
      }
      if (v12 + v27 > 249)
      {
        swift_bridgeObjectRelease();
        if (qword_1E91252D0 != -1) {
          swift_once();
        }
        uint64_t v31 = type metadata accessor for Logger();
        sub_18AF412A0(v31, (uint64_t)qword_1E91253B0);
        uint64_t v32 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v32, v33))
        {
          uint64_t v34 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v34 = 0;
          _os_log_impl(&dword_18AF10000, v32, v33, "Reached max record count per batch", v34, 2u);
          MEMORY[0x18C12BB10](v34, -1, -1);
        }

        goto LABEL_67;
      }
      uint64_t v28 = v46;
      if (qword_1E9124F08 != -1) {
        swift_once();
      }
      if (v5 >= qword_1E912FE58)
      {
        swift_bridgeObjectRelease();
        if (qword_1E91252D0 != -1) {
          swift_once();
        }
        uint64_t v35 = type metadata accessor for Logger();
        sub_18AF412A0(v35, (uint64_t)qword_1E91253B0);
        id v36 = Logger.logObject.getter();
        os_log_type_t v37 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v36, v37))
        {
          id v38 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v38 = 0;
          BOOL v39 = "Current batch is over the max bytes per batch";
          goto LABEL_65;
        }
        goto LABEL_66;
      }

      v6 += 16;
      if (!--v4)
      {
        swift_bridgeObjectRelease();
        goto LABEL_67;
      }
    }
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    swift_bridgeObjectRetain();
    uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v42) {
      goto LABEL_71;
    }
LABEL_69:
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v43) {
        goto LABEL_71;
      }
    }
    else if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_71;
    }
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    goto LABEL_72;
  }
  swift_bridgeObjectRelease();
  unint64_t v8 = MEMORY[0x1E4FBC860];
LABEL_67:
  uint64_t v12 = v48;
  if (v48 >> 62) {
    goto LABEL_77;
  }
  if (!*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_69;
  }
LABEL_71:
  uint64_t result = swift_release();
  *(void *)a3 = v12;
  *(void *)(a3 + 8) = v8;
LABEL_72:
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

void CKSyncEngine.RecordZoneChangeBatch.init(pendingChanges:synchronousRecordProvider:)(uint64_t a1@<X0>, uint64_t (*a2)(id)@<X1>, uint64_t a3@<X8>)
{
  unint64_t v50 = MEMORY[0x1E4FBC860];
  unint64_t v51 = MEMORY[0x1E4FBC860];
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (unsigned __int8 *)(a1 + 40);
    unint64_t v7 = MEMORY[0x1E4FBC860];
    unint64_t v8 = MEMORY[0x1E4FBC860];
    while (1)
    {
      unint64_t v9 = (void *)*((void *)v6 - 1);
      int v10 = *v6;
      id v11 = v9;
      uint64_t v12 = (uint64_t)v11;
      id v49 = v11;
      if (v10 == 1)
      {
        id v13 = objc_msgSend(v11, sel_size);
        uint64_t v14 = (uint64_t)v13 + v5;
        if (__OFADD__(v5, v13)) {
          goto LABEL_74;
        }
        if (qword_1E9124F08 != -1) {
          swift_once();
        }
        if (qword_1E912FE58 < v14)
        {
          swift_bridgeObjectRelease();
LABEL_59:

LABEL_61:
          uint64_t v29 = (void *)v12;
          if (qword_1E91252D0 != -1) {
            swift_once();
          }
          uint64_t v43 = type metadata accessor for Logger();
          id v38 = (void *)sub_18AF18638(v43, (uint64_t)qword_1E91253B0);
          os_log_type_t v44 = static os_log_type_t.debug.getter();
          if (sub_18AF39118(v44))
          {
            *(_WORD *)sub_18AF389E0() = 0;
            uint64_t v42 = "Next record will exceed max bytes per batch";
LABEL_65:
            sub_18AF343A8(&dword_18AF10000, v40, v41, v42);
            sub_18AF388F8();
          }
LABEL_66:

          goto LABEL_67;
        }
        unint64_t v8 = (unint64_t)(id)v12;
        MEMORY[0x18C129220]();
        unint64_t v15 = *(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (*(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10) >= v15 >> 1)
        {
          sub_18AF34080(v15);
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v12 = (uint64_t)objc_msgSend((id)v8, sel_size);

        BOOL v16 = __OFADD__(v5, v12);
        v5 += v12;
        if (v16) {
          goto LABEL_75;
        }
      }
      else
      {
        id v17 = (void *)a2(v11);
        if (v17)
        {
          uint64_t v12 = (uint64_t)v17;
          id v18 = objc_msgSend(v17, sel_size);
          BOOL v16 = __OFADD__(v5, v18);
          v5 += (uint64_t)v18;
          if (v16) {
            goto LABEL_76;
          }
          if (qword_1E9124F08 != -1) {
            swift_once();
          }
          uint64_t v19 = qword_1E912FE58;
          if (qword_1E912FE58 < v5)
          {
            if (v7 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v30) {
                goto LABEL_47;
              }
            }
            else if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              goto LABEL_47;
            }
            if (v8 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v31)
              {
LABEL_47:
                swift_bridgeObjectRelease();

                uint64_t v12 = (uint64_t)v49;
                goto LABEL_59;
              }
            }
            else if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              goto LABEL_47;
            }
          }
          id v20 = (id)v12;
          MEMORY[0x18C129220]();
          unint64_t v21 = *(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (*(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10) >= v21 >> 1)
          {
            sub_18AF34080(v21);
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          uint64_t v12 = (uint64_t)v49;
          if (v19 < v5)
          {
            swift_bridgeObjectRelease();
            goto LABEL_61;
          }
          unint64_t v7 = v51;
        }
        else
        {
          if (qword_1E91252D0 != -1) {
            swift_once();
          }
          uint64_t v22 = type metadata accessor for Logger();
          sub_18AF412A0(v22, (uint64_t)qword_1E91253B0);
          id v23 = v49;
          uint64_t v24 = Logger.logObject.getter();
          os_log_type_t v25 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v24, v25))
          {
            uint64_t v47 = a3;
            uint64_t v26 = swift_slowAlloc();
            uint64_t v27 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v26 = 138412290;
            *(void *)(v26 + 4) = v23;
            *uint64_t v27 = v9;
            _os_log_impl(&dword_18AF10000, v24, v25, "No record to save for record ID %@", (uint8_t *)v26, 0xCu);
            sub_18AF161EC((uint64_t *)&unk_1E9125610);
            swift_arrayDestroy();
            sub_18AF388F8();
            a3 = v47;
            sub_18AF388F8();
          }
          else
          {
          }
        }
      }
      if (v7 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v12 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      unint64_t v8 = v50;
      if (v50 >> 62)
      {
        sub_18AF33A94();
        uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v28 = *(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (__OFADD__(v12, v28)) {
        break;
      }
      if (v12 + v28 >= 250)
      {
        swift_bridgeObjectRelease();
        if (qword_1E91252D0 != -1) {
          swift_once();
        }
        uint64_t v32 = type metadata accessor for Logger();
        os_log_type_t v33 = (void *)sub_18AF18638(v32, (uint64_t)qword_1E91253B0);
        os_log_type_t v34 = static os_log_type_t.debug.getter();
        if (sub_18AF39118(v34))
        {
          *(_WORD *)sub_18AF389E0() = 0;
          sub_18AF343A8(&dword_18AF10000, v35, v36, "Reached max record count per batch");
          sub_18AF388F8();
        }

        goto LABEL_67;
      }
      uint64_t v29 = v49;
      if (qword_1E9124F08 != -1) {
        swift_once();
      }
      if (v5 >= qword_1E912FE58)
      {
        swift_bridgeObjectRelease();
        if (qword_1E91252D0 != -1) {
          swift_once();
        }
        uint64_t v37 = type metadata accessor for Logger();
        id v38 = (void *)sub_18AF18638(v37, (uint64_t)qword_1E91253B0);
        os_log_type_t v39 = static os_log_type_t.debug.getter();
        if (sub_18AF39118(v39))
        {
          *(_WORD *)sub_18AF389E0() = 0;
          uint64_t v42 = "Current batch is over the max bytes per batch";
          goto LABEL_65;
        }
        goto LABEL_66;
      }

      v6 += 16;
      if (!--v4)
      {
        swift_bridgeObjectRelease();
        goto LABEL_67;
      }
    }
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    sub_18AF16BC0();
    uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v45) {
      goto LABEL_71;
    }
LABEL_69:
    if (v8 >> 62)
    {
      sub_18AF33A94();
      uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v46) {
        goto LABEL_71;
      }
    }
    else if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_71;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    goto LABEL_72;
  }
  swift_bridgeObjectRelease();
  unint64_t v8 = MEMORY[0x1E4FBC860];
LABEL_67:
  uint64_t v12 = v51;
  if (v51 >> 62) {
    goto LABEL_77;
  }
  if (!*(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_69;
  }
LABEL_71:
  *(void *)a3 = v12;
  *(void *)(a3 + 8) = v8;
LABEL_72:
  *(unsigned char *)(a3 + 16) = 0;
}

BOOL CKSyncEngine.RecordZoneChangeBatch.isEmpty.getter()
{
  unint64_t v1 = v0[1];
  if (*v0 >> 62)
  {
    sub_18AF338C0();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v3) {
      return 0;
    }
  }
  else if (*(void *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return 0;
  }
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  return v4 == 0;
}

void CKSyncEngine.RecordZoneChangeBatch.description.getter()
{
  unint64_t v1 = *v0;
  int v2 = *((unsigned __int8 *)v0 + 16);
  if ((unint64_t)*v0 >> 62)
  {
    sub_18AF338C0();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v5 = MEMORY[0x1E4FBC860];
    goto LABEL_14;
  }
  uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_13;
  }
LABEL_3:
  uint64_t v26 = MEMORY[0x1E4FBC860];
  sub_18AF26470();
  if (v3 < 0)
  {
    __break(1u);
    return;
  }
  int v25 = v2;
  uint64_t v4 = 0;
  uint64_t v5 = v26;
  do
  {
    if ((v1 & 0xC000000000000001) != 0) {
      id v6 = (id)MEMORY[0x18C1298C0](v4, v1);
    }
    else {
      id v6 = *(id *)(v1 + 8 * v4 + 32);
    }
    unint64_t v7 = v6;
    id v8 = objc_msgSend(v6, sel_conciseDescription);
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    unint64_t v13 = *(void *)(v26 + 16);
    unint64_t v12 = *(void *)(v26 + 24);
    if (v13 >= v12 >> 1)
    {
      sub_18AF34080(v12);
      sub_18AF26470();
    }
    ++v4;
    *(void *)(v26 + 16) = v13 + 1;
    uint64_t v14 = v26 + 16 * v13;
    *(void *)(v14 + 32) = v9;
    *(void *)(v14 + 40) = v11;
  }
  while (v3 != v4);
  swift_bridgeObjectRelease();
  int v2 = v25;
LABEL_14:
  if (v2) {
    unint64_t v15 = (void *)0xEF313D656E6F5A79;
  }
  else {
    unint64_t v15 = (void *)0xE000000000000000;
  }
  if (v2) {
    uint64_t v16 = 0x4263696D6F746120;
  }
  else {
    uint64_t v16 = 0;
  }
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = v16;
  v17._object = v15;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = 0x7364726F63657220;
  v18._object = (void *)0xEF3D657661536F54;
  String.append(_:)(v18);
  v19._uint64_t countAndFlagsBits = MEMORY[0x18C129260](v5, MEMORY[0x1E4FBB1A0]);
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v20._object = (void *)0x800000018B1D3310;
  v20._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v20);
  uint64_t v21 = sub_18AF34EA0(0, &qword_1E91255F0);
  uint64_t v22 = swift_bridgeObjectRetain();
  v23._uint64_t countAndFlagsBits = MEMORY[0x18C129260](v22, v21);
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v24._uint64_t countAndFlagsBits = 62;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
}

id CKSyncEngineRecordZoneChangeBatch.init(__pendingChanges:recordProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  sub_18AF34EA0(0, (unint64_t *)&unk_1E9125200);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  void v10[4] = a2;
  v10[5] = a3;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1107296256;
  _OWORD v10[2] = sub_18AF94A20;
  void v10[3] = &unk_1ED7F0FF0;
  unint64_t v7 = _Block_copy(v10);
  id v8 = objc_msgSend(v5, sel_initWith__pendingChanges_recordProvider_, isa, v7);

  _Block_release(v7);
  swift_release();
  return v8;
}

id sub_18AF94A20(uint64_t a1, void *a2)
{
  uint64_t v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  id v5 = (void *)v3();
  swift_release();

  return v5;
}

void CKSyncEngineRecordZoneChangeBatch.init(__pendingChanges:recordProvider:)(unint64_t a1, uint64_t (*a2)(id))
{
  uint64_t v3 = v2;
  if (a1 >> 62)
  {
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v8 = MEMORY[0x1E4FBC860];
    goto LABEL_14;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v6) {
    goto LABEL_13;
  }
LABEL_3:
  uint64_t v24 = MEMORY[0x1E4FBC860];
  sub_18AF5B618();
  if (v6 < 0)
  {
    __break(1u);
    return;
  }
  Swift::String v19 = a2;
  Swift::String v20 = v2;
  uint64_t v7 = 0;
  uint64_t v8 = v24;
  do
  {
    if ((a1 & 0xC000000000000001) != 0) {
      id v9 = (id)MEMORY[0x18C1298C0](v7, a1);
    }
    else {
      id v9 = *(id *)(a1 + 8 * v7 + 32);
    }
    uint64_t v10 = v9;
    CKSyncEnginePendingRecordZoneChange.changeStruct()((uint64_t)&v21);

    uint64_t v11 = v21;
    char v12 = v22;
    uint64_t v24 = v8;
    unint64_t v14 = *(void *)(v8 + 16);
    unint64_t v13 = *(void *)(v8 + 24);
    if (v14 >= v13 >> 1)
    {
      sub_18AF34080(v13);
      sub_18AF5B618();
      uint64_t v8 = v24;
    }
    ++v7;
    *(void *)(v8 + 16) = v14 + 1;
    uint64_t v15 = v8 + 16 * v14;
    *(void *)(v15 + 32) = v11;
    *(unsigned char *)(v15 + 40) = v12;
  }
  while (v6 != v7);
  swift_bridgeObjectRelease();
  uint64_t v3 = v20;
  a2 = v19;
LABEL_14:
  swift_retain();
  sub_18AF93664(v8, a2, (uint64_t)&v21);
  uint64_t v16 = v21;
  if (v21)
  {
    uint64_t v17 = v22;
    char v18 = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_18AF94C9C(v16, v17, v18 & 1, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    sub_18AF94D4C(v16);
  }
  else
  {
    swift_release();
    swift_getObjectType();
    swift_deallocPartialClassInstance();
  }
}

id sub_18AF94C9C(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  sub_18AF34EA0(0, &qword_1E9125120);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  sub_18AF34EA0(0, &qword_1E91255F0);
  Class v7 = Array._bridgeToObjectiveC()().super.isa;
  id v8 = objc_msgSend(a4, sel_initWithRecordsToSave_recordIDsToDelete_atomicByZone_, isa, v7, a3 & 1);

  return v8;
}

uint64_t sub_18AF94D4C(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_18AF94D90(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s21RecordZoneChangeBatchVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t _s21RecordZoneChangeBatchVwta(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t _s21RecordZoneChangeBatchVwet(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 17))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s21RecordZoneChangeBatchVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CKSyncEngine.RecordZoneChangeBatch()
{
  return &type metadata for CKSyncEngine.RecordZoneChangeBatch;
}

uint64_t CKDatabase.DatabaseChange.Modification.init(zoneID:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t CKDatabase.DatabaseChange.Deletion.init(zoneID:reason:)@<X0>(uint64_t result@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v3 = *a2;
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v3;
  return result;
}

uint64_t CKDatabase.RecordZoneChange.Deletion.init(recordID:recordType:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

void CKDatabase.DatabaseChange.Deletion.reason.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 8);
}

uint64_t CKDatabase.RecordZoneChange.Deletion.recordType.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

void sub_18AF94F7C()
{
  qword_1E9125390 = 4;
}

uint64_t static CKDatabaseScope.organization.getter()
{
  return sub_18AF94FE0(&qword_1E9125570, (uint64_t)&qword_1E9125390);
}

void sub_18AF94FB0()
{
  qword_1E9126760 = 0;
}

uint64_t static CKDatabaseScope.unknown.getter()
{
  return sub_18AF94FE0(qword_1E91256E8, (uint64_t)&qword_1E9126760);
}

uint64_t sub_18AF94FE0(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *(void *)a2;
}

void CKDatabase.undeprecated_perform(_:inZoneWith:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v8[4] = a3;
  v8[5] = a4;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1107296256;
  void v8[2] = sub_18AF950E8;
  void v8[3] = &unk_1ED7F1018;
  Class v7 = _Block_copy(v8);
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_performQuery_inZoneWithID_completionHandler_, a1, a2, v7);
  _Block_release(v7);
}

uint64_t sub_18AF950E8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  id v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_18AF34EA0(0, &qword_1E9125120);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t CKDatabase.records(matching:inZoneWith:)()
{
  sub_18AF339B8();
  v1[20] = v2;
  v1[21] = v0;
  v1[19] = v3;
  uint64_t v4 = sub_18AF161EC(&qword_1E9126770);
  v1[22] = v4;
  sub_18AF16DF8(v4);
  v1[23] = v5;
  v1[24] = swift_task_alloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v6, v7, v8);
}

uint64_t sub_18AF95228()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[24];
  uint64_t v3 = v0[22];
  uint64_t v4 = v0[19];
  uint64_t v7 = (void *)v0[21];
  uint64_t v8 = v0[20];
  v0[2] = v0;
  v0[7] = v0 + 18;
  v0[3] = sub_18AF953CC;
  swift_continuation_init();
  v0[17] = v3;
  uint64_t v5 = sub_18AF3A5E0(v0 + 14);
  sub_18AF161EC(&qword_1E9126778);
  sub_18AF161EC(&qword_1E9125660);
  CheckedContinuation.init(continuation:function:)();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v1 + 32))(v5, v2, v3);
  v0[10] = MEMORY[0x1E4F143A8];
  v0[11] = 1107296256;
  v0[12] = sub_18AF95580;
  v0[13] = &unk_1ED7F2F08;
  objc_msgSend(v7, sel_performQuery_inZoneWithID_completionHandler_, v4, v8, v0 + 10);
  return MEMORY[0x1F41881E8](v0 + 2);
}

uint64_t sub_18AF953CC()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 200) = *(void *)(v3 + 48);
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v4, v5, v6);
}

uint64_t sub_18AF954AC()
{
  sub_18AF339B8();
  uint64_t v1 = *(void *)(v0 + 144);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_18AF95514()
{
  sub_18AF2A56C();
  swift_willThrow();
  swift_task_dealloc();
  sub_18AF16D48();
  return v0();
}

void sub_18AF95580(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = sub_18AF25FCC((void *)(a1 + 32), *(void *)(a1 + 56));
  if (a3)
  {
    id v6 = a3;
    sub_18AFCA154((uint64_t)v4, (uint64_t)v6);
  }
  else
  {
    sub_18AF34EA0(0, &qword_1E9125120);
    uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    sub_18AFCA258((uint64_t)v4, v5);
  }
}

uint64_t sub_18AF95648(uint64_t a1, uint64_t a2)
{
  return sub_18AF40A80(a2 + 32, a1 + 32);
}

void CKDatabase.fetch(withSubscriptionID:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)MEMORY[0x18C128F60]();
  void v9[4] = a3;
  v9[5] = a4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1107296256;
  void v9[2] = sub_18AF7F4A8;
  v9[3] = &unk_1ED7F2F30;
  uint64_t v8 = _Block_copy(v9);
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_fetchSubscriptionWithID_completionHandler_, v7, v8);
  _Block_release(v8);
}

uint64_t CKDatabase.subscription(for:)()
{
  sub_18AF339B8();
  v1[20] = v2;
  v1[21] = v0;
  v1[19] = v3;
  uint64_t v4 = sub_18AF161EC(&qword_1E91251B0);
  v1[22] = v4;
  sub_18AF16DF8(v4);
  v1[23] = v5;
  v1[24] = swift_task_alloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v6, v7, v8);
}

uint64_t sub_18AF957C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_18AF30E30();
  sub_18AF1A048();
  sub_18AF149F8();
  uint64_t v23 = v20[23];
  uint64_t v24 = v20[24];
  uint64_t v25 = v20[22];
  id v31 = (id)v20[21];
  uint64_t v26 = MEMORY[0x18C128F60](v20[19], v20[20]);
  v20[25] = v26;
  v20[2] = v20;
  v20[7] = v22;
  v20[3] = sub_18AF7F780;
  swift_continuation_init();
  v20[17] = v25;
  uint64_t v27 = sub_18AF3A5E0(v20 + 14);
  sub_18AF34EA0(0, (unint64_t *)&qword_1E9125620);
  sub_18AF161EC(&qword_1E9125660);
  sub_18AF9ED18();
  CheckedContinuation.init(continuation:function:)();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v23 + 32))(v27, v24, v25);
  v20[10] = MEMORY[0x1E4F143A8];
  v20[11] = 1107296256;
  v20[12] = sub_18AF9594C;
  v20[13] = &unk_1ED7F1270;
  objc_msgSend(v31, sel_fetchSubscriptionWithID_completionHandler_, v26, v21);
  sub_18AF37A90();
  return MEMORY[0x1F41881E8](v28);
}

void sub_18AF9594C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = sub_18AF25FCC((void *)(a1 + 32), *(void *)(a1 + 56));
  if (a3)
  {
    id v7 = a3;
    sub_18AFCA174((uint64_t)v5, (uint64_t)v7);
  }
  else if (a2)
  {
    id v6 = a2;
    sub_18AFCA264((uint64_t)v5, (uint64_t)v6);
  }
  else
  {
    __break(1u);
  }
}

void CKDatabase.delete(withSubscriptionID:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = (void *)MEMORY[0x18C128F60]();
  void v9[4] = a3;
  v9[5] = a4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1107296256;
  void v9[2] = sub_18AF76CEC;
  v9[3] = &unk_1ED7F2F58;
  uint64_t v8 = _Block_copy(v9);
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_deleteSubscriptionWithID_completionHandler_, v7, v8);
  _Block_release(v8);
}

uint64_t CKDatabase.deleteSubscription(withID:)()
{
  sub_18AF339B8();
  v1[21] = v2;
  v1[22] = v0;
  v1[20] = v3;
  uint64_t v4 = sub_18AF161EC((uint64_t *)&unk_1E9127430);
  v1[23] = v4;
  sub_18AF16DF8(v4);
  v1[24] = v5;
  v1[25] = swift_task_alloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v6, v7, v8);
}

uint64_t sub_18AF95B68()
{
  sub_18AF30E30();
  sub_18AF1A048();
  sub_18AF149F8();
  uint64_t v4 = v0[24];
  uint64_t v3 = v0[25];
  uint64_t v5 = (void *)v0[22];
  uint64_t v6 = v0[23];
  uint64_t v7 = MEMORY[0x18C128F60](v0[20], v0[21]);
  v0[26] = v7;
  v0[2] = v0;
  v0[7] = v2;
  v0[3] = sub_18AF95CD4;
  swift_continuation_init();
  v0[17] = v6;
  uint64_t v8 = sub_18AF3A5E0(v0 + 14);
  sub_18AF161EC(&qword_1E9125660);
  sub_18AF9ED18();
  CheckedContinuation.init(continuation:function:)();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v4 + 32))(v8, v3, v6);
  v0[10] = MEMORY[0x1E4F143A8];
  v0[11] = 1107296256;
  v0[12] = sub_18AF95EA4;
  v0[13] = &unk_1ED7F2F80;
  objc_msgSend(v5, sel_deleteSubscriptionWithID_completionHandler_, v7, v1);
  sub_18AF37A90();
  return MEMORY[0x1F41881E8](v9);
}

uint64_t sub_18AF95CD4()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 216) = *(void *)(v3 + 48);
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v4, v5, v6);
}

uint64_t sub_18AF95DB4()
{
  sub_18AF2A56C();
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 152);

  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v3(v1, v2);
}

uint64_t sub_18AF95E30()
{
  sub_18AF2A56C();
  uint64_t v1 = *(void **)(v0 + 208);
  swift_willThrow();

  swift_task_dealloc();
  sub_18AF16D48();
  return v2();
}

void sub_18AF95EA4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = sub_18AF25FCC((void *)(a1 + 32), *(void *)(a1 + 56));
  if (a3)
  {
    id v5 = a3;
    sub_18AFCA194((uint64_t)v4, (uint64_t)v5);
  }
  else
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_18AFCA284();
  }
}

uint64_t sub_18AF95F5C(uint64_t a1)
{
  return sub_18AF40A30(a1 + 32);
}

void CKDatabase.configuredWith<A>(configuration:group:body:)(void *a1, void *a2, void (*a3)(void))
{
  uint64_t v4 = v3;
  sub_18AF34EA0(0, &qword_1E91255D8);
  id v8 = a2;
  id v9 = a1;
  id v10 = sub_18AF47CCC(a1, a2);
  id v11 = objc_msgSend(v4, sel_container);
  if (v11)
  {
    char v12 = v11;
    swift_getObjectType();

    id v13 = objc_msgSend(v4, sel_container);
    if (v13)
    {
      unint64_t v14 = v13;
      id v15 = objc_msgSend(v13, sel_implementation);

      id v16 = v10;
      id v17 = sub_18AF484B0(v15, v10);
      id v18 = objc_msgSend(v17, sel_databaseWithDatabaseScope_, objc_msgSend(v4, sel_databaseScope));
      a3();

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_18AF960D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  uint64_t v5[2] = a1;
  return sub_18AF18508((uint64_t)sub_18AF960F4);
}

id sub_18AF960F4()
{
  sub_18AF33DF8();
  uint64_t v17 = v3;
  sub_18AF338B4();
  sub_18AF311EC();
  sub_18AF34EA0(0, &qword_1E91255D8);
  id v4 = v0;
  id v5 = v1;
  id v6 = sub_18AF22DA0();
  id result = sub_18AF19388((uint64_t)v6);
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  sub_18AF312E8();

  id result = sub_18AF33754();
  if (!result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  id v8 = result;
  id v9 = *(void **)(v2 + 32);
  objc_msgSend(result, sel_implementation);

  id v10 = v0;
  id v11 = sub_18AF34170();
  sub_18AF2315C((uint64_t)v11);
  sub_18AF33BD4((uint64_t)objc_msgSend(v0, sel_databaseWithDatabaseScope_, objc_msgSend(v9, sel_databaseScope)));
  uint64_t v12 = swift_task_alloc();
  id v13 = (void *)sub_18AF9ED38(v12);
  *id v13 = v14;
  v13[1] = sub_18AF9625C;
  uint64_t v15 = sub_18AF38DD4();
  return (id)v16(v15);
}

uint64_t sub_18AF9625C()
{
  sub_18AF19FAC();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_18AF184F0();
  uint64_t v7 = v6;
  sub_18AF16D18();
  *id v8 = v7;
  uint64_t v9 = *v1;
  sub_18AF16D18();
  *id v10 = v9;
  v7[11] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v7[12] = v3;
    v7[13] = v5;
  }
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v11, v12, v13);
}

uint64_t sub_18AF9635C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  uint64_t v5[2] = a1;
  return sub_18AF18508((uint64_t)sub_18AF9637C);
}

id sub_18AF9637C()
{
  sub_18AF33DF8();
  uint64_t v17 = v3;
  sub_18AF338B4();
  sub_18AF311EC();
  sub_18AF34EA0(0, &qword_1E91255D8);
  id v4 = v0;
  id v5 = v1;
  id v6 = sub_18AF22DA0();
  id result = sub_18AF19388((uint64_t)v6);
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  sub_18AF312E8();

  id result = sub_18AF33754();
  if (!result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  id v8 = result;
  uint64_t v9 = *(void **)(v2 + 32);
  objc_msgSend(result, sel_implementation);

  id v10 = v0;
  id v11 = sub_18AF34170();
  sub_18AF2315C((uint64_t)v11);
  sub_18AF33BD4((uint64_t)objc_msgSend(v0, sel_databaseWithDatabaseScope_, objc_msgSend(v9, sel_databaseScope)));
  uint64_t v12 = swift_task_alloc();
  uint64_t v13 = (void *)sub_18AF9ED38(v12);
  *uint64_t v13 = v14;
  v13[1] = sub_18AF964E4;
  uint64_t v15 = sub_18AF38DD4();
  return (id)v16(v15);
}

uint64_t sub_18AF964E4()
{
  sub_18AF19FAC();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_18AF184F0();
  uint64_t v7 = v6;
  sub_18AF16D18();
  *id v8 = v7;
  uint64_t v9 = *v1;
  sub_18AF16D18();
  *id v10 = v9;
  v7[11] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v7[12] = v3;
    v7[13] = v5;
  }
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v11, v12, v13);
}

uint64_t sub_18AF965E4()
{
  sub_18AF339B8();
  sub_18AF38698();

  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))v2[1];
  uint64_t v5 = v2[12];
  uint64_t v4 = v2[13];
  return v3(v4, v5);
}

uint64_t sub_18AF9664C()
{
  sub_18AF339B8();
  sub_18AF38698();

  sub_18AF384CC();
  return v2();
}

uint64_t sub_18AF966A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  uint64_t v5[2] = a1;
  return sub_18AF18508((uint64_t)sub_18AF966C8);
}

id sub_18AF966C8()
{
  sub_18AF33DF8();
  uint64_t v17 = v3;
  sub_18AF338B4();
  sub_18AF311EC();
  sub_18AF34EA0(0, &qword_1E91255D8);
  id v4 = v0;
  id v5 = v1;
  id v6 = sub_18AF22DA0();
  id result = sub_18AF19388((uint64_t)v6);
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  sub_18AF312E8();

  id result = sub_18AF33754();
  if (!result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  id v8 = result;
  uint64_t v9 = *(void **)(v2 + 32);
  objc_msgSend(result, sel_implementation);

  id v10 = v0;
  id v11 = sub_18AF34170();
  sub_18AF2315C((uint64_t)v11);
  *(void *)(v2 + 72) = objc_msgSend(v0, sel_databaseWithDatabaseScope_, objc_msgSend(v9, sel_databaseScope));
  uint64_t v12 = swift_task_alloc();
  uint64_t v13 = (void *)sub_18AF9ED38(v12);
  *uint64_t v13 = v14;
  v13[1] = sub_18AF96854;
  uint64_t v15 = sub_18AF38DD4();
  return (id)v16(v15);
}

uint64_t sub_18AF96854()
{
  sub_18AF338B4();
  char v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  sub_18AF184F0();
  uint64_t v11 = v10;
  sub_18AF16D18();
  void *v12 = v11;
  uint64_t v13 = *v1;
  sub_18AF16D18();
  *uint64_t v14 = v13;
  *(void *)(v11 + 88) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    *(unsigned char *)(v11 + 120) = v3 & 1;
    *(void *)(v11 + 96) = v5;
    *(void *)(v11 + 104) = v7;
    *(void *)(v11 + 112) = v9;
  }
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v15, v16, v17);
}

uint64_t sub_18AF96970()
{
  sub_18AF339B8();
  sub_18AF38698();

  char v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 8);
  uint64_t v5 = *(void *)(v2 + 104);
  uint64_t v4 = *(void *)(v2 + 112);
  uint64_t v6 = *(void *)(v2 + 96);
  uint64_t v7 = *(unsigned __int8 *)(v2 + 120);
  return v3(v4, v5, v6, v7);
}

uint64_t sub_18AF969E0()
{
  sub_18AF339B8();
  sub_18AF38698();

  sub_18AF384CC();
  return v2();
}

uint64_t sub_18AF96A40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(unsigned char *)(v6 + 104) = a6;
  *(void *)(v6 + 40) = a4;
  *(void *)(v6 + 48) = a5;
  *(void *)(v6 + 24) = a2;
  *(void *)(v6 + 32) = a3;
  *(void *)(v6 + 16) = a1;
  return sub_18AF18508((uint64_t)sub_18AF96A64);
}

id sub_18AF96A64()
{
  sub_18AF19FAC();
  sub_18AF311EC();
  sub_18AF34EA0(0, &qword_1E91255D8);
  id v3 = v0;
  id v4 = v1;
  id v5 = sub_18AF22DA0();
  id result = sub_18AF19388((uint64_t)v5);
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v7 = (void *)sub_18AF312E8();

  id result = sub_18AF33754();
  if (!result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v8 = result;
  uint64_t v9 = *(void **)(v2 + 32);
  id v10 = objc_msgSend(result, sel_implementation);

  id v11 = v0;
  id v12 = sub_18AF484B0(v10, v0);
  sub_18AF2315C((uint64_t)v12);
  *(void *)(v2 + 72) = objc_msgSend(v7, sel_databaseWithDatabaseScope_, objc_msgSend(v9, sel_databaseScope));
  uint64_t v13 = swift_task_alloc();
  uint64_t v14 = (void *)sub_18AF9ED38(v13);
  *uint64_t v14 = v15;
  v14[1] = sub_18AF96BD8;
  char v16 = *(unsigned char *)(v2 + 104);
  uint64_t v18 = *(void *)(v2 + 40);
  uint64_t v17 = *(void *)(v2 + 48);
  return (id)CKDatabase.recordZoneChanges(inZonesWith:configurations:shouldFetchAssetContents:)(v18, v17, v16);
}

uint64_t sub_18AF96BD8()
{
  sub_18AF2A56C();
  uint64_t v3 = v2;
  sub_18AF184F0();
  uint64_t v5 = v4;
  sub_18AF16D18();
  void *v6 = v5;
  uint64_t v7 = *v1;
  sub_18AF16D18();
  *uint64_t v8 = v7;
  *(void *)(v5 + 88) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 96) = v3;
  }
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v9, v10, v11);
}

uint64_t sub_18AF96CCC()
{
  sub_18AF2A56C();
  uint64_t v1 = *(void **)(v0 + 64);
  uint64_t v2 = *(void **)(v0 + 56);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v4 = *(void *)(v0 + 96);
  return v3(v4);
}

uint64_t sub_18AF96D58()
{
  sub_18AF2A56C();
  uint64_t v1 = *(void **)(v0 + 64);
  uint64_t v2 = *(void **)(v0 + 56);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_18AF384CC();
  return v3();
}

uint64_t sub_18AF96DD8()
{
  sub_18AF2A56C();
  uint64_t v1 = *(void **)(v0 + 56);
  uint64_t v2 = *(void **)(v0 + 48);

  swift_release();
  sub_18AF299BC();
  return v3();
}

uint64_t CKDatabase.configuredWith<A>(configuration:group:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v6[6] = a5;
  v6[7] = v5;
  void v6[4] = a3;
  v6[5] = a4;
  void v6[2] = a1;
  _OWORD v6[3] = a2;
  return sub_18AF18508((uint64_t)sub_18AF96E6C);
}

id sub_18AF96E6C()
{
  sub_18AF33DF8();
  uint64_t v20 = v1;
  sub_18AF338B4();
  uint64_t v2 = (void *)v0[7];
  uint64_t v4 = (void *)v0[3];
  uint64_t v3 = (void *)v0[4];
  sub_18AF34EA0(0, &qword_1E91255D8);
  id v5 = v3;
  id v6 = v4;
  id v7 = sub_18AF22DA0();
  sub_18AF2315C((uint64_t)v7);
  id result = objc_msgSend(v2, sel_container);
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v9 = result;
  swift_getObjectType();

  id result = sub_18AF33754();
  if (!result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v10 = result;
  uint64_t v11 = (void *)v0[7];
  id v12 = (int *)v0[5];
  id v13 = objc_msgSend(result, sel_implementation);

  id v14 = v3;
  id v15 = sub_18AF34170();
  v0[9] = v15;
  id v16 = objc_msgSend(v15, sel_databaseWithDatabaseScope_, objc_msgSend(v11, sel_databaseScope));
  v0[10] = v16;
  uint64_t v19 = (uint64_t (*)(uint64_t, id))((char *)v12 + *v12);
  uint64_t v17 = (void *)swift_task_alloc();
  v0[11] = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_18AF97034;
  uint64_t v18 = v0[2];
  return (id)v19(v18, v16);
}

uint64_t sub_18AF97034()
{
  sub_18AF339B8();
  sub_18AF184F0();
  sub_18AF16D18();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_18AF16D18();
  *id v5 = v4;
  *(void *)(v6 + 96) = v0;
  swift_task_dealloc();
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AF97114()
{
  sub_18AF339B8();
  uint64_t v1 = *(void **)(v0 + 72);
  uint64_t v2 = *(void **)(v0 + 64);

  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_18AF97180()
{
  sub_18AF339B8();
  uint64_t v1 = *(void **)(v0 + 72);
  uint64_t v2 = *(void **)(v0 + 64);

  sub_18AF31180();
  return v3();
}

void CKDatabase.fetch(withRecordIDs:desiredKeys:completionHandler:)()
{
}

uint64_t sub_18AF971FC()
{
  sub_18AF182C0();
  uint64_t v0 = sub_18AF34EA0(0, &qword_1E91268C0);
  uint64_t v1 = swift_bridgeObjectRetain();
  id v2 = sub_18AF9C93C(v1, (uint64_t)&qword_1E91255F0, (uint64_t)off_1E545EEB0, (SEL *)&selRef_initWithRecordIDs_);
  uint64_t v3 = swift_bridgeObjectRetain();
  CKFetchRecordsOperation.desiredKeys.setter(v3);
  uint64_t v4 = sub_18AF33890();
  *(void *)(v4 + 16) = MEMORY[0x1E4FBC868];
  swift_retain();
  CKFetchRecordsOperation.perRecordResultBlock.setter((uint64_t)sub_18AF9EC2C, v4);
  uint64_t v5 = (void *)sub_18AF3488C();
  sub_18AF30694(v5);
  swift_retain();
  id v6 = CKFetchRecordsOperation.fetchRecordsResultBlock.setter((uint64_t)sub_18AF9EBF0, v0);
  sub_18AF33D8C((uint64_t)v6, sel__scheduleConvenienceOperation_wrappingDatabase_convenienceConfiguration_);

  return swift_release();
}

uint64_t CKDatabase.records(for:desiredKeys:)(uint64_t a1, uint64_t a2)
{
  void v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_18AF18508((uint64_t)sub_18AF97340);
}

uint64_t sub_18AF97340()
{
  sub_18AF2A56C();
  uint64_t v1 = *(void **)(v0 + 32);
  sub_18AF19324((uint64_t)objc_msgSend(v1, sel_implementation));
  sub_18AF9ECC8((uint64_t)objc_msgSend(objc_msgSend(v1, sel_container), sel_convenienceConfiguration));
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_18AF3F79C(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_18AF97420;
  uint64_t v5 = sub_18AF9ED00();
  return sub_18AF97594(v5, v6, v7, v8);
}

uint64_t sub_18AF97420()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16D18();
  void *v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_18AF16AA0();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    uint64_t v10 = *(void **)(v3 + 40);

    uint64_t v11 = sub_18AF3434C();
    return v12(v11);
  }
}

uint64_t sub_18AF97538()
{
  sub_18AF339B8();
  uint64_t v1 = *(void **)(v0 + 40);

  sub_18AF19F1C();
  return v2();
}

uint64_t sub_18AF97594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  return sub_18AF18508((uint64_t)sub_18AF975B4);
}

uint64_t sub_18AF975B4()
{
  sub_18AF338B4();
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  long long v8 = *(_OWORD *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v3;
  *(_OWORD *)(v4 + 32) = v8;
  *(void *)(v4 + 48) = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v5;
  sub_18AF161EC(&qword_1E91268B0);
  sub_18AF16B64();
  *uint64_t v5 = v6;
  v5[1] = sub_18AF976C0;
  sub_18AF2A5D4();
  sub_18AF16AA0();
  sub_18AF1A024();
  return MEMORY[0x1F4188160]();
}

uint64_t sub_18AF976C0()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16D18();
  void *v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AF977A8()
{
  sub_18AF339B8();
  swift_task_dealloc();
  sub_18AF299BC();
  return v0();
}

void CKDatabase.modifyRecords(saving:deleting:savePolicy:atomically:completionHandler:)()
{
  sub_18AF33850();
  sub_18AF47428();
  id v1 = objc_msgSend(v0, sel_implementation);
  id v2 = objc_msgSend(v0, sel_container);
  objc_msgSend(v2, sel_convenienceConfiguration);

  sub_18AF3044C();
  sub_18AF978C0();

  sub_18AF16CC4();
}

uint64_t sub_18AF978C0()
{
  sub_18AF40290();
  sub_18AF38554();
  char v1 = v0;
  uint64_t v3 = v2;
  Swift::Bool v5 = v4;
  sub_18AF34EA0(0, &qword_1E9124FA0);
  swift_bridgeObjectRetain();
  v14.value._rawValue = (void *)swift_bridgeObjectRetain();
  v14.Swift::Bool is_nil = v5;
  CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v6, v14, v15);
  uint64_t v8 = v7;
  objc_msgSend(v7, sel_setSavePolicy_, v3);
  objc_msgSend(v8, sel_setAtomic_, v1 & 1);
  *(void *)(sub_18AF33890() + 16) = MEMORY[0x1E4FBC868];
  uint64_t v9 = sub_18AF33890();
  sub_18AF386FC(v9);
  CKModifyRecordsOperation.perRecordSaveBlock.setter((uint64_t)sub_18AF9E98C);
  swift_retain();
  CKModifyRecordsOperation.perRecordDeleteBlock.setter((uint64_t)sub_18AF9E9D0);
  uint64_t v10 = (void *)sub_18AF31268();
  sub_18AF38238(v10);
  swift_retain();
  swift_retain();
  CKModifyRecordsOperation.modifyRecordsResultBlock.setter((uint64_t)sub_18AF9E5A4);
  sub_18AF33D8C(v11, sel__scheduleConvenienceOperation_wrappingDatabase_convenienceConfiguration_);

  swift_release();
  sub_18AF32064();
  return swift_release();
}

uint64_t CKDatabase.modifyRecords(saving:deleting:savePolicy:atomically:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v5 + 80) = a4;
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + 40) = v4;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  return sub_18AF18508((uint64_t)sub_18AF97A58);
}

uint64_t sub_18AF97A58()
{
  sub_18AF2A56C();
  char v1 = *(void **)(v0 + 40);
  *(void *)(v0 + 48) = objc_msgSend(v1, sel_implementation);
  id v2 = objc_msgSend(v1, sel_container);
  id v3 = objc_msgSend(v2, sel_convenienceConfiguration);
  *(void *)(v0 + 56) = v3;

  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  void *v4 = v0;
  v4[1] = sub_18AF97B5C;
  char v5 = *(unsigned char *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 32);
  uint64_t v7 = *(void *)(v0 + 40);
  uint64_t v9 = *(void *)(v0 + 16);
  uint64_t v8 = *(void *)(v0 + 24);
  return sub_18AF97CD4(v9, v8, v6, v5, v7, (uint64_t)v3);
}

uint64_t sub_18AF97B5C()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16D18();
  void *v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_18AF16AA0();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    uint64_t v10 = *(void **)(v3 + 48);

    uint64_t v11 = sub_18AF3522C();
    return v12(v11);
  }
}

uint64_t sub_18AF97C78()
{
  sub_18AF339B8();
  char v1 = *(void **)(v0 + 48);

  sub_18AF26330();
  return v2();
}

uint64_t sub_18AF97CD4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 64) = a6;
  *(void *)(v7 + 72) = v6;
  *(unsigned char *)(v7 + 104) = a4;
  *(void *)(v7 + 48) = a3;
  *(void *)(v7 + 56) = a5;
  *(void *)(v7 + 32) = a1;
  *(void *)(v7 + 40) = a2;
  return sub_18AF18508((uint64_t)sub_18AF97CF8);
}

uint64_t sub_18AF97CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_18AF338B4();
  uint64_t v13 = *(void *)(v12 + 64);
  char v14 = *(unsigned char *)(v12 + 104);
  uint64_t v16 = *(void *)(v12 + 48);
  uint64_t v15 = *(void *)(v12 + 56);
  uint64_t v17 = swift_task_alloc();
  *(void *)(v12 + 80) = v17;
  sub_18AF3F3A4(v17);
  *(void *)(v18 + 40) = v16;
  *(unsigned char *)(v18 + 48) = v14;
  *(void *)(v18 + 56) = v15;
  *(void *)(v18 + 64) = v13;
  uint64_t v19 = (void *)swift_task_alloc();
  *(void *)(v12 + 88) = v19;
  sub_18AF161EC(&qword_1E9124F88);
  sub_18AF16B64();
  void *v19 = v20;
  v19[1] = sub_18AF97E08;
  sub_18AF2A5D4();
  sub_18AF16AA0();
  sub_18AF1A024();
  return MEMORY[0x1F4188160](v21, v22, v23, v24, v25, v26, v27, v28, a9, a10, a11, a12);
}

uint64_t sub_18AF97E08()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16D18();
  void *v6 = v5;
  *(void *)(v3 + 96) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AF97EF4()
{
  sub_18AF339B8();
  swift_task_dealloc();
  sub_18AF31180();
  return v0();
}

void CKDatabase.fetch(withQuery:inZoneWith:desiredKeys:resultsLimit:completionHandler:)()
{
  sub_18AF33850();
  sub_18AF47428();
  id v1 = objc_msgSend(v0, sel_implementation);
  id v2 = objc_msgSend(v0, sel_container);
  objc_msgSend(v2, sel_convenienceConfiguration);

  sub_18AF9ED44();
  sub_18AF3044C();
  sub_18AF98000();

  sub_18AF16CC4();
}

uint64_t sub_18AF98000()
{
  sub_18AF40290();
  sub_18AF38554();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  id v7 = objc_msgSend(objc_allocWithZone((Class)CKQueryOperation), sel_initWithQuery_, v6);
  objc_msgSend(v7, sel_setZoneID_, v5);
  uint64_t v8 = swift_bridgeObjectRetain();
  CKQueryOperation.desiredKeys.setter(v8);
  objc_msgSend(v7, sel_setResultsLimit_, v1);
  uint64_t v9 = sub_18AF33890();
  *(void *)(v9 + 16) = MEMORY[0x1E4FBC860];
  swift_retain();
  CKQueryOperation.recordMatchedBlock.setter((uint64_t)sub_18AF9EC28, v9);
  uint64_t v10 = (void *)sub_18AF3488C();
  sub_18AF30694(v10);
  swift_retain();
  id v11 = CKQueryOperation.queryResultBlock.setter((uint64_t)sub_18AF9ECA8, v3);
  sub_18AF33D8C((uint64_t)v11, sel__scheduleConvenienceOperation_wrappingDatabase_convenienceConfiguration_);

  sub_18AF32064();
  return swift_release();
}

void CKDatabase.fetch(withCursor:desiredKeys:resultsLimit:completionHandler:)()
{
  sub_18AF40290();
  sub_18AF309D0();
  id v1 = objc_msgSend(v0, sel_implementation);
  id v2 = objc_msgSend(v0, sel_container);
  objc_msgSend(v2, sel_convenienceConfiguration);

  sub_18AF37DCC();
  sub_18AF981DC();

  sub_18AF37A04();
}

uint64_t sub_18AF981DC()
{
  sub_18AF1BC54();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  id v5 = objc_msgSend(objc_allocWithZone((Class)CKQueryOperation), sel_initWithCursor_, v4);
  uint64_t v6 = swift_bridgeObjectRetain();
  CKQueryOperation.desiredKeys.setter(v6);
  objc_msgSend(v5, sel_setResultsLimit_, v1);
  uint64_t v7 = sub_18AF33890();
  *(void *)(v7 + 16) = MEMORY[0x1E4FBC860];
  swift_retain();
  CKQueryOperation.recordMatchedBlock.setter((uint64_t)sub_18AF9E8CC, v7);
  uint64_t v8 = (void *)sub_18AF3488C();
  sub_18AF30694(v8);
  swift_retain();
  id v9 = CKQueryOperation.queryResultBlock.setter((uint64_t)sub_18AF9E8EC, v3);
  sub_18AF33D8C((uint64_t)v9, sel__scheduleConvenienceOperation_wrappingDatabase_convenienceConfiguration_);

  return swift_release();
}

uint64_t CKDatabase.records(matching:inZoneWith:desiredKeys:resultsLimit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  uint64_t v5[2] = a1;
  return sub_18AF18508((uint64_t)sub_18AF98314);
}

uint64_t sub_18AF98314()
{
  sub_18AF2A56C();
  uint64_t v1 = (void *)v0[6];
  v0[7] = objc_msgSend(v1, sel_implementation);
  id v2 = objc_msgSend(v1, sel_container);
  id v3 = objc_msgSend(v2, sel_convenienceConfiguration);
  v0[8] = v3;

  uint64_t v4 = (void *)swift_task_alloc();
  v0[9] = v4;
  void *v4 = v0;
  v4[1] = sub_18AF98410;
  uint64_t v5 = sub_18AF9ECF0();
  return sub_18AF98588(v5, v6, v7, v8, v9, (uint64_t)v3);
}

uint64_t sub_18AF98410()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16D18();
  void *v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_18AF16AA0();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    uint64_t v10 = *(void **)(v3 + 56);

    uint64_t v11 = sub_18AF3522C();
    return v12(v11);
  }
}

uint64_t sub_18AF9852C()
{
  sub_18AF339B8();
  uint64_t v1 = *(void **)(v0 + 56);

  sub_18AF299BC();
  return v2();
}

uint64_t sub_18AF98588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[9] = a6;
  v7[10] = v6;
  v7[7] = a4;
  v7[8] = a5;
  v7[5] = a2;
  void v7[6] = a3;
  v7[4] = a1;
  return sub_18AF18508((uint64_t)sub_18AF985AC);
}

uint64_t sub_18AF985AC()
{
  sub_18AF1A048();
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 48);
  long long v8 = *(_OWORD *)(v0 + 32);
  long long v9 = *(_OWORD *)(v0 + 56);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 88) = v4;
  *(void *)(v4 + 16) = v1;
  *(_OWORD *)(v4 + 24) = v8;
  *(void *)(v4 + 40) = v3;
  *(_OWORD *)(v4 + 48) = v9;
  *(void *)(v4 + 64) = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v5;
  sub_18AF161EC(&qword_1E91268A0);
  sub_18AF16B64();
  *uint64_t v5 = v6;
  v5[1] = sub_18AF986CC;
  sub_18AF2A5D4();
  sub_18AF1A024();
  return MEMORY[0x1F4188160]();
}

uint64_t sub_18AF986CC()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16D18();
  void *v6 = v5;
  *(void *)(v3 + 104) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AF987B4()
{
  sub_18AF339B8();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t CKDatabase.records(continuingMatchFrom:desiredKeys:resultsLimit:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return sub_18AF18508((uint64_t)sub_18AF98830);
}

uint64_t sub_18AF98830()
{
  sub_18AF2A56C();
  uint64_t v1 = (void *)v0[5];
  v0[6] = (uint64_t)objc_msgSend(v1, sel_implementation);
  id v2 = objc_msgSend(v1, sel_container);
  v0[7] = (uint64_t)objc_msgSend(v2, sel_convenienceConfiguration);

  uint64_t v3 = (void *)swift_task_alloc();
  v0[8] = (uint64_t)v3;
  *uint64_t v3 = v0;
  v3[1] = sub_18AF97B5C;
  uint64_t v4 = sub_18AF31BE0(v0[2]);
  return sub_18AF98928(v4, v5, v6, v7, v8);
}

uint64_t sub_18AF98928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[8] = a5;
  v6[9] = v5;
  void v6[6] = a3;
  v6[7] = a4;
  void v6[4] = a1;
  v6[5] = a2;
  return sub_18AF18508((uint64_t)sub_18AF98948);
}

uint64_t sub_18AF98948()
{
  sub_18AF33DF8();
  uint64_t v11 = v1;
  sub_18AF338B4();
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  long long v10 = *(_OWORD *)(v0 + 48);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v6 = swift_task_alloc();
  *(void *)(v0 + 80) = v6;
  *(void *)(v6 + 16) = v2;
  *(void *)(v6 + 24) = v5;
  *(void *)(v6 + 32) = v4;
  *(_OWORD *)(v6 + 40) = v10;
  *(void *)(v6 + 56) = v3;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v7;
  sub_18AF161EC(&qword_1E91268A0);
  sub_18AF16B64();
  *uint64_t v7 = v8;
  v7[1] = sub_18AF98A5C;
  sub_18AF2A5D4();
  sub_18AF1A024();
  return MEMORY[0x1F4188160]();
}

uint64_t sub_18AF98A5C()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16D18();
  void *v6 = v5;
  *(void *)(v3 + 96) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

void CKDatabase.fetch(withRecordZoneIDs:completionHandler:)()
{
}

uint64_t sub_18AF98B5C()
{
  sub_18AF40FE4();
  sub_18AF34EA0(0, &qword_1E9124D30);
  uint64_t v1 = swift_bridgeObjectRetain();
  id v2 = sub_18AF9C93C(v1, (uint64_t)&qword_1EB279460, (uint64_t)off_1E545EEE0, (SEL *)&selRef_initWithRecordZoneIDs_);
  uint64_t v3 = sub_18AF33890();
  *(void *)(v3 + 16) = MEMORY[0x1E4FBC868];
  swift_retain();
  CKFetchRecordZonesOperation.perRecordZoneResultBlock.setter((uint64_t)sub_18AF9EC24, v3);
  uint64_t v4 = (void *)sub_18AF3488C();
  sub_18AF30694(v4);
  swift_retain();
  id v5 = CKFetchRecordZonesOperation.fetchRecordZonesResultBlock.setter((uint64_t)sub_18AF9ECA4, v0);
  sub_18AF33D8C((uint64_t)v5, sel__scheduleConvenienceOperation_wrappingDatabase_convenienceConfiguration_);

  return swift_release();
}

uint64_t CKDatabase.recordZones(for:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_18AF18508((uint64_t)sub_18AF98C88);
}

uint64_t sub_18AF98C88()
{
  sub_18AF2A56C();
  uint64_t v1 = (void *)v0[3];
  v0[4] = objc_msgSend(v1, sel_implementation);
  id v2 = objc_msgSend(v1, sel_container);
  v0[5] = objc_msgSend(v2, sel_convenienceConfiguration);

  uint64_t v3 = (void *)swift_task_alloc();
  v0[6] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_18AF804FC;
  uint64_t v4 = sub_18AF403E0();
  return sub_18AF98D78(v4, v5, v6);
}

uint64_t sub_18AF98D78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  void v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return sub_18AF18508((uint64_t)sub_18AF98D94);
}

uint64_t sub_18AF98D94()
{
  sub_18AF2A56C();
  uint64_t v1 = swift_task_alloc();
  sub_18AF1D73C(v1);
  id v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  sub_18AF161EC(&qword_1E9124D20);
  sub_18AF16B64();
  *id v2 = v3;
  v2[1] = sub_18AF98E78;
  sub_18AF2A5D4();
  sub_18AF16AA0();
  sub_18AF1A024();
  return MEMORY[0x1F4188160]();
}

uint64_t sub_18AF98E78()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16D18();
  void *v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AF98F60()
{
  sub_18AF339B8();
  swift_task_dealloc();
  sub_18AF26330();
  return v0();
}

void CKDatabase.modifyRecordZones(saving:deleting:completionHandler:)()
{
  sub_18AF40290();
  sub_18AF47634();
  id v1 = objc_msgSend(v0, sel_implementation);
  id v2 = objc_msgSend(v0, sel_container);
  objc_msgSend(v2, sel_convenienceConfiguration);

  sub_18AF99080();
  sub_18AF37A04();
}

uint64_t sub_18AF99080()
{
  sub_18AF40290();
  sub_18AF1BC54();
  char v1 = v0;
  Swift::Bool v3 = v2;
  sub_18AF34EA0(0, &qword_1E9124FE8);
  swift_bridgeObjectRetain();
  v12.value._rawValue = (void *)swift_bridgeObjectRetain();
  v12.Swift::Bool is_nil = v3;
  CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(v4, v12, v13);
  uint64_t v6 = v5;
  objc_msgSend(v5, sel_setMarkZonesAsUserPurged_, v1 & 1);
  *(void *)(sub_18AF33890() + 16) = MEMORY[0x1E4FBC868];
  uint64_t v7 = sub_18AF33890();
  sub_18AF386FC(v7);
  CKModifyRecordZonesOperation.perRecordZoneSaveBlock.setter((uint64_t)sub_18AF9E6C8);
  swift_retain();
  CKModifyRecordZonesOperation.perRecordZoneDeleteBlock.setter((uint64_t)sub_18AF9E70C);
  uint64_t v8 = (void *)sub_18AF31268();
  sub_18AF38238(v8);
  swift_retain();
  swift_retain();
  CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.setter((uint64_t)sub_18AF9E5A4);
  sub_18AF33D8C(v9, sel__scheduleConvenienceOperation_wrappingDatabase_convenienceConfiguration_);

  swift_release();
  sub_18AF32064();
  return swift_release();
}

uint64_t CKDatabase.modifyRecordZones(saving:deleting:)(uint64_t a1, uint64_t a2)
{
  void v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_18AF18508((uint64_t)sub_18AF991FC);
}

uint64_t sub_18AF991FC()
{
  sub_18AF2A56C();
  uint64_t v2 = *(void **)(v1 + 32);
  sub_18AF19324((uint64_t)objc_msgSend(v2, sel_implementation));
  sub_18AF9ECC8((uint64_t)objc_msgSend(objc_msgSend(v2, sel_container), sel_convenienceConfiguration));
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_18AF3F79C(v3);
  void *v4 = v5;
  v4[1] = sub_18AF992E8;
  uint64_t v6 = sub_18AF9ECF0();
  return sub_18AF99404(v6, v7, 0, v8, v0);
}

uint64_t sub_18AF992E8()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16D18();
  void *v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_18AF16AA0();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    uint64_t v10 = *(void **)(v3 + 40);

    uint64_t v11 = sub_18AF3522C();
    return v12(v11);
  }
}

uint64_t sub_18AF99404(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 56) = a5;
  *(void *)(v6 + 64) = v5;
  *(void *)(v6 + 40) = a2;
  *(void *)(v6 + 48) = a4;
  *(unsigned char *)(v6 + 96) = a3;
  *(void *)(v6 + 32) = a1;
  return sub_18AF18508((uint64_t)sub_18AF99428);
}

uint64_t sub_18AF99428()
{
  sub_18AF19FAC();
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 48);
  char v3 = *(unsigned char *)(v0 + 96);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 72) = v4;
  sub_18AF3F3A4(v4);
  *(unsigned char *)(v5 + 40) = v3;
  *(void *)(v5 + 48) = v2;
  *(void *)(v5 + 56) = v1;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v6;
  sub_18AF161EC(&qword_1E9124FE0);
  sub_18AF16B64();
  void *v6 = v7;
  v6[1] = sub_18AF9952C;
  sub_18AF2A5D4();
  sub_18AF16AA0();
  sub_18AF1A024();
  return MEMORY[0x1F4188160]();
}

uint64_t sub_18AF9952C()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16D18();
  void *v6 = v5;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AF99614()
{
  sub_18AF339B8();
  swift_task_dealloc();
  sub_18AF384CC();
  return v0();
}

uint64_t CKDatabase.modifyRecordZones(saving:deleting:markZonesAsUserPurged:)(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v3;
  *(unsigned char *)(v4 + 72) = a3;
  *(void *)(v4 + 16) = a1;
  return sub_18AF18508((uint64_t)sub_18AF9968C);
}

uint64_t sub_18AF9968C()
{
  sub_18AF2A56C();
  uint64_t v1 = *(void **)(v0 + 32);
  sub_18AF19324((uint64_t)objc_msgSend(v1, sel_implementation));
  sub_18AF9ECC8((uint64_t)objc_msgSend(objc_msgSend(v1, sel_container), sel_convenienceConfiguration));
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_18AF3F79C(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_18AF992E8;
  uint64_t v5 = sub_18AF31BE0(*(void *)(v0 + 16));
  return sub_18AF99404(v5, v6, v7, v8, v9);
}

void CKDatabase.fetch(withSubscriptionIDs:completionHandler:)()
{
}

void sub_18AF99790()
{
  sub_18AF40290();
  uint64_t v5 = v4;
  sub_18AF47634();
  id v6 = objc_msgSend(v0, sel_implementation);
  id v7 = objc_msgSend(v0, sel_container);
  id v10 = objc_msgSend(v7, sel_convenienceConfiguration);

  v5(v3, v0, v10, v2, v1);
  sub_18AF37A04();
}

uint64_t sub_18AF99854()
{
  sub_18AF40FE4();
  sub_18AF34EA0(0, &qword_1E9126898);
  uint64_t v1 = swift_bridgeObjectRetain();
  CKFetchSubscriptionsOperation.init(subscriptionIDs:)(v2, (Swift::OpaquePointer)v1);
  uint64_t v4 = v3;
  uint64_t v5 = sub_18AF33890();
  *(void *)(v5 + 16) = MEMORY[0x1E4FBC868];
  swift_retain();
  CKFetchSubscriptionsOperation.perSubscriptionResultBlock.setter((uint64_t)sub_18AF9EC80, v5);
  id v6 = (void *)sub_18AF3488C();
  sub_18AF30694(v6);
  swift_retain();
  id v7 = CKFetchSubscriptionsOperation.fetchSubscriptionsResultBlock.setter((uint64_t)sub_18AF9ECA4, v0);
  sub_18AF33D8C((uint64_t)v7, sel__scheduleConvenienceOperation_wrappingDatabase_convenienceConfiguration_);

  return swift_release();
}

uint64_t CKDatabase.subscriptions(for:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_18AF18508((uint64_t)sub_18AF99968);
}

uint64_t sub_18AF99968()
{
  sub_18AF2A56C();
  uint64_t v1 = (void *)v0[3];
  v0[4] = objc_msgSend(v1, sel_implementation);
  id v2 = objc_msgSend(v1, sel_container);
  v0[5] = objc_msgSend(v2, sel_convenienceConfiguration);

  uint64_t v3 = (void *)swift_task_alloc();
  v0[6] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_18AF80038;
  uint64_t v4 = sub_18AF403E0();
  return sub_18AF99A58(v4, v5, v6);
}

uint64_t sub_18AF99A58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  void v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return sub_18AF18508((uint64_t)sub_18AF99A74);
}

uint64_t sub_18AF99A74()
{
  sub_18AF2A56C();
  uint64_t v1 = swift_task_alloc();
  sub_18AF1D73C(v1);
  id v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  sub_18AF161EC(&qword_1E9126888);
  sub_18AF16B64();
  *id v2 = v3;
  v2[1] = sub_18AF99B58;
  sub_18AF2A5D4();
  sub_18AF16AA0();
  sub_18AF1A024();
  return MEMORY[0x1F4188160]();
}

uint64_t sub_18AF99B58()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16D18();
  void *v6 = v5;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

void CKDatabase.modifySubscriptions(saving:deleting:completionHandler:)()
{
}

void sub_18AF99C58()
{
  sub_18AF40290();
  sub_18AF309D0();
  id v6 = objc_msgSend(v1, sel_implementation);
  id v7 = objc_msgSend(v1, sel_container);
  id v10 = objc_msgSend(v7, sel_convenienceConfiguration);

  v0(v5, v4, v1, v10, v3, v2);
  sub_18AF37A04();
}

uint64_t sub_18AF99D1C()
{
  sub_18AF40290();
  sub_18AF182C0();
  Swift::Bool v1 = v0;
  sub_18AF34EA0(0, (unint64_t *)&unk_1E9124D88);
  swift_bridgeObjectRetain();
  v10.value._rawValue = (void *)swift_bridgeObjectRetain();
  v10.Swift::Bool is_nil = v1;
  CKModifySubscriptionsOperation.init(subscriptionsToSave:subscriptionIDsToDelete:)(v2, v10, v11);
  uint64_t v4 = v3;
  *(void *)(sub_18AF33890() + 16) = MEMORY[0x1E4FBC868];
  uint64_t v5 = sub_18AF33890();
  sub_18AF386FC(v5);
  CKModifySubscriptionsOperation.perSubscriptionSaveBlock.setter((uint64_t)sub_18AF9E510);
  swift_retain();
  CKModifySubscriptionsOperation.perSubscriptionDeleteBlock.setter((uint64_t)sub_18AF9E558);
  id v6 = (void *)sub_18AF31268();
  sub_18AF38238(v6);
  swift_retain();
  swift_retain();
  CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.setter((uint64_t)sub_18AF9E5A4);
  sub_18AF33D8C(v7, sel__scheduleConvenienceOperation_wrappingDatabase_convenienceConfiguration_);

  swift_release();
  sub_18AF32064();
  return swift_release();
}

uint64_t CKDatabase.modifySubscriptions(saving:deleting:)(uint64_t a1, uint64_t a2)
{
  void v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_18AF18508((uint64_t)sub_18AF99E84);
}

uint64_t sub_18AF99E84()
{
  sub_18AF2A56C();
  Swift::Bool v1 = *(void **)(v0 + 32);
  sub_18AF19324((uint64_t)objc_msgSend(v1, sel_implementation));
  sub_18AF9ECC8((uint64_t)objc_msgSend(objc_msgSend(v1, sel_container), sel_convenienceConfiguration));
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_18AF3F79C(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_18AF99F64;
  uint64_t v5 = sub_18AF9ED00();
  return sub_18AF9A080(v5, v6, v7, v8);
}

uint64_t sub_18AF99F64()
{
  sub_18AF2A56C();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16D18();
  void *v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_18AF16AA0();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    uint64_t v10 = *(void **)(v3 + 40);

    uint64_t v11 = sub_18AF3522C();
    return v12(v11);
  }
}

uint64_t sub_18AF9A080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[7] = a4;
  v5[8] = v4;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  return sub_18AF18508((uint64_t)sub_18AF9A0A0);
}

uint64_t sub_18AF9A0A0()
{
  sub_18AF19FAC();
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[6];
  uint64_t v3 = swift_task_alloc();
  v0[9] = v3;
  sub_18AF3F3A4(v3);
  *(void *)(v4 + 40) = v2;
  *(void *)(v4 + 48) = v1;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[10] = v5;
  sub_18AF161EC(&qword_1E9124D70);
  sub_18AF16B64();
  *uint64_t v5 = v6;
  v5[1] = sub_18AF9952C;
  sub_18AF2A5D4();
  sub_18AF16AA0();
  sub_18AF1A024();
  return MEMORY[0x1F4188160]();
}

uint64_t sub_18AF9A19C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CKDatabase.DatabaseChange.Modification.zoneID.getter();
  *a1 = result;
  return result;
}

void sub_18AF9A1D8(id *a1)
{
}

void CKDatabase.DatabaseChange.Modification.zoneID.setter(void *a1)
{
  *uint64_t v1 = a1;
}

uint64_t CKDatabase.DatabaseChange.Modification.zoneID.modify(void *a1)
{
  sub_18AF411FC(a1);
  id v2 = v1;
  return sub_18AF3563C();
}

uint64_t sub_18AF9A274@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = CKDatabase.DatabaseChange.Deletion.zoneID.getter(a1, a2);
  *a3 = result;
  return result;
}

void sub_18AF9A2B8(id *a1)
{
}

void CKDatabase.DatabaseChange.Deletion.zoneID.setter(void *a1)
{
  *id v1 = a1;
}

uint64_t CKDatabase.DatabaseChange.Deletion.zoneID.modify(void *a1)
{
  sub_18AF411FC(a1);
  id v2 = v1;
  return sub_18AF3563C();
}

void sub_18AF9A350(unsigned char *a1@<X8>)
{
}

unsigned char *sub_18AF9A38C(char *a1)
{
  char v2 = *a1;
  return CKDatabase.DatabaseChange.Deletion.reason.setter(&v2);
}

unsigned char *CKDatabase.DatabaseChange.Deletion.reason.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 8) = *result;
  return result;
}

unsigned char *(*CKDatabase.DatabaseChange.Deletion.reason.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 8);
  return sub_18AF9A3FC;
}

unsigned char *sub_18AF9A3FC(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 8) = result[8];
  return result;
}

void CKDatabase.DatabaseChange.Deletion.Reason.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static CKDatabase.DatabaseChange.Deletion.Reason.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int CKDatabase.DatabaseChange.Deletion.Reason.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  sub_18AF3A2D4();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL CKDatabase.DatabaseChange.Deletion.purged.getter()
{
  return *(unsigned char *)(v0 + 8) == 1;
}

void CKDatabase.fetchDatabaseChanges(since:resultsLimit:completionHandler:)()
{
  sub_18AF40290();
  id v1 = objc_msgSend(v0, sel_implementation);
  id v2 = objc_msgSend(v0, sel_container);
  objc_msgSend(v2, sel_convenienceConfiguration);

  sub_18AF37DCC();
  sub_18AF9A56C(v3, v4, v5, v6, v7);

  sub_18AF37A04();
}

uint64_t sub_18AF9A56C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  id v8 = objc_msgSend(objc_allocWithZone((Class)CKFetchDatabaseChangesOperation), sel_initWithPreviousServerChangeToken_, a1);
  objc_msgSend(v8, sel_setFetchAllChanges_, 0);
  if (a3) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = a2;
  }
  objc_msgSend(v8, sel_setResultsLimit_, v9);
  uint64_t v10 = sub_18AF33890();
  uint64_t v11 = MEMORY[0x1E4FBC860];
  *(void *)(v10 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v12 = sub_18AF33890();
  *(void *)(v12 + 16) = v11;
  uint64_t v26 = sub_18AF9E414;
  uint64_t v27 = v10;
  aBlocuint64_t k = MEMORY[0x1E4F143A8];
  uint64_t v23 = 1107296256;
  uint64_t v24 = sub_18AF687C4;
  uint64_t v25 = &unk_1ED7F1298;
  Swift::OpaquePointer_optional v13 = _Block_copy(&aBlock);
  swift_retain();
  uint64_t v14 = swift_release();
  sub_18AF412F8(v14, sel_setRecordZoneWithIDChangedBlock_);
  _Block_release(v13);
  uint64_t v26 = sub_18AF9E41C;
  uint64_t v27 = v12;
  aBlocuint64_t k = MEMORY[0x1E4F143A8];
  uint64_t v23 = 1107296256;
  uint64_t v24 = sub_18AF687C4;
  uint64_t v25 = &unk_1ED7F12C0;
  _Block_copy(&aBlock);
  sub_18AF37C04();
  uint64_t v15 = swift_release();
  sub_18AF412F8(v15, sel_setRecordZoneWithIDWasDeletedBlock_);
  _Block_release(v13);
  uint64_t v26 = sub_18AF9E424;
  uint64_t v27 = v12;
  aBlocuint64_t k = MEMORY[0x1E4F143A8];
  uint64_t v23 = 1107296256;
  uint64_t v24 = sub_18AF687C4;
  uint64_t v25 = &unk_1ED7F3160;
  _Block_copy(&aBlock);
  sub_18AF37C04();
  uint64_t v16 = swift_release();
  sub_18AF412F8(v16, sel_setRecordZoneWithIDWasPurgedBlock_);
  _Block_release(v13);
  uint64_t v26 = sub_18AF9E42C;
  uint64_t v27 = v12;
  aBlocuint64_t k = MEMORY[0x1E4F143A8];
  uint64_t v23 = 1107296256;
  uint64_t v24 = sub_18AF687C4;
  uint64_t v25 = &unk_1ED7F3188;
  _Block_copy(&aBlock);
  sub_18AF37C04();
  uint64_t v17 = swift_release();
  sub_18AF412F8(v17, sel_setRecordZoneWithIDWasDeletedDueToUserEncryptedDataResetBlock_);
  _Block_release(v13);
  uint64_t v18 = (void *)sub_18AF31268();
  sub_18AF38238(v18);
  swift_retain();
  swift_retain();
  CKFetchDatabaseChangesOperation.fetchDatabaseChangesResultBlock.setter((uint64_t)sub_18AF9E438, (uint64_t)v13);
  objc_msgSend(v20, sel__scheduleConvenienceOperation_wrappingDatabase_convenienceConfiguration_, v8, a4, a5);

  swift_release();
  return swift_release();
}

uint64_t CKDatabase.databaseChanges(since:resultsLimit:)(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v3;
  *(unsigned char *)(v4 + 72) = a3;
  *(void *)(v4 + 16) = a1;
  return sub_18AF18508((uint64_t)sub_18AF9A8B0);
}

uint64_t sub_18AF9A8B0()
{
  sub_18AF2A56C();
  id v1 = *(void **)(v0 + 32);
  sub_18AF19324((uint64_t)objc_msgSend(v1, sel_implementation));
  sub_18AF9ECC8((uint64_t)objc_msgSend(objc_msgSend(v1, sel_container), sel_convenienceConfiguration));
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_18AF3F79C(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_18AF9A9A0;
  uint64_t v5 = sub_18AF31BE0(*(void *)(v0 + 16));
  return sub_18AF9AB30(v5, v6, v7, v8, v9);
}

uint64_t sub_18AF9A9A0()
{
  sub_18AF19FAC();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16D18();
  void *v6 = v5;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_18AF16AA0();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    uint64_t v10 = *(void **)(v3 + 40);

    uint64_t v11 = sub_18AF35510();
    return v12(v11);
  }
}

uint64_t sub_18AF9AAD0()
{
  sub_18AF339B8();
  id v1 = *(void **)(v0 + 40);

  sub_18AF19F1C();
  return v2();
}

uint64_t sub_18AF9AB30(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 72) = a5;
  *(void *)(v6 + 80) = v5;
  *(void *)(v6 + 56) = a2;
  *(void *)(v6 + 64) = a4;
  *(unsigned char *)(v6 + 41) = a3;
  *(void *)(v6 + 48) = a1;
  return sub_18AF18508((uint64_t)sub_18AF9AB54);
}

uint64_t sub_18AF9AB54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_18AF338B4();
  uint64_t v14 = *(void *)(v12 + 72);
  uint64_t v13 = *(void *)(v12 + 80);
  uint64_t v16 = *(void *)(v12 + 56);
  uint64_t v15 = *(void *)(v12 + 64);
  char v17 = *(unsigned char *)(v12 + 41);
  uint64_t v18 = *(void *)(v12 + 48);
  uint64_t v19 = swift_task_alloc();
  *(void *)(v12 + 88) = v19;
  *(void *)(v19 + 16) = v13;
  *(void *)(v19 + 24) = v18;
  *(void *)(v19 + 32) = v16;
  *(unsigned char *)(v19 + 40) = v17 & 1;
  *(void *)(v19 + 48) = v15;
  *(void *)(v19 + 56) = v14;
  uint64_t v20 = (void *)swift_task_alloc();
  *(void *)(v12 + 96) = v20;
  sub_18AF161EC(&qword_1E9125380);
  sub_18AF16B64();
  *uint64_t v20 = v21;
  v20[1] = sub_18AF9AC6C;
  sub_18AF2A5D4();
  sub_18AF16AA0();
  sub_18AF1A024();
  return MEMORY[0x1F4188160](v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12);
}

uint64_t sub_18AF9AC6C()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16D18();
  void *v6 = v5;
  *(void *)(v3 + 104) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AF9AD58()
{
  sub_18AF339B8();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t CKDatabase.RecordZoneChange.Modification.record.modify(void *a1)
{
  sub_18AF411FC(a1);
  id v2 = v1;
  return sub_18AF3563C();
}

uint64_t sub_18AF9ADFC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CKDatabase.RecordZoneChange.Deletion.recordID.getter();
  *a1 = result;
  return result;
}

void sub_18AF9AE40(id *a1)
{
}

void CKDatabase.RecordZoneChange.Deletion.recordID.setter(void *a1)
{
  *id v1 = a1;
}

uint64_t CKDatabase.RecordZoneChange.Deletion.recordID.modify(void *a1)
{
  sub_18AF411FC(a1);
  id v2 = v1;
  return sub_18AF3563C();
}

uint64_t sub_18AF9AED8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CKDatabase.RecordZoneChange.Deletion.recordType.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_18AF9AF1C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return CKDatabase.RecordZoneChange.Deletion.recordType.setter(v1, v2);
}

uint64_t CKDatabase.RecordZoneChange.Deletion.recordType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t CKDatabase.RecordZoneChange.Deletion.recordType.modify(void *a1)
{
  a1[2] = v1;
  uint64_t v3 = *(void *)(v1 + 16);
  *a1 = *(void *)(v1 + 8);
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return sub_18AF3563C();
}

uint64_t sub_18AF9AFE0(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = *a1;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 8) = v4;
    *(void *)(v3 + 16) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 8) = v4;
    *(void *)(v3 + 16) = v2;
  }
  return result;
}

uint64_t CKDatabase.RecordZoneChange.ZoneAttributesModification.zone.modify(void *a1)
{
  sub_18AF411FC(a1);
  id v2 = v1;
  return sub_18AF3563C();
}

void sub_18AF9B098(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  id v2 = *(void ***)(a1 + 8);
  uint64_t v4 = *v2;
  if (a2)
  {
    id v5 = v3;

    *id v2 = v5;
  }
  else
  {

    *id v2 = v3;
  }
}

#error "18AF9B1AC: call analysis failed (funcsize=51)"

uint64_t sub_18AF9B1DC(void *a1, void *a2, Swift::Int a3, NSData *a4, char a5, void *a6, void (*a7)(uint64_t a1, void *a2, void *a3), uint64_t a8, uint64_t a9)
{
  if (a5) {
    a4 = 0;
  }
  sub_18AF34EA0(0, (unint64_t *)&unk_1E9125638);
  id v13 = a2;
  swift_bridgeObjectRetain();
  v120.value.super.Class isa = (Class)a2;
  v120.value._data = a4;
  v120.Swift::Bool is_nil = 0;
  v118.Swift::Int value = a3;
  CKFetchRecordZoneChangesConfiguration.init(previousServerChangeToken:resultsLimit:desiredKeys:)(v14, v120, v118, v119);
  uint64_t v16 = v15;
  sub_18AF34EA0(0, &qword_1E9125140);
  sub_18AF161EC(&qword_1E91255B8);
  uint64_t v17 = sub_18AF3488C();
  *(_OWORD *)(v17 + 16) = xmmword_18B1F1B30;
  *(void *)(v17 + 32) = a1;
  id v104 = (void *)v17;
  specialized Array._endMutation()();
  sub_18AF161EC((uint64_t *)&unk_1E9124DE0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18B1F16B0;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = v16;
  sub_18AF34EA0(0, (unint64_t *)&qword_1EB279460);
  sub_18AF62AF4();
  id v19 = a1;
  id v20 = v16;
  v116.Swift::Bool is_nil = Dictionary.init(dictionaryLiteral:)();
  v116.value._rawValue = v104;
  CKFetchRecordZoneChangesOperation.init(recordZoneIDs:configurationsByRecordZoneID:)(v21, v116, v117);
  uint64_t v23 = v22;
  objc_msgSend(v22, sel_setFetchAllChanges_, 0);
  uint64_t v24 = sub_18AF33890();
  *(void *)(v24 + 16) = MEMORY[0x1E4FBC868];
  uint64_t v25 = sub_18AF33890();
  *(void *)(v25 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v26 = sub_18AF33890();
  *(void *)(v26 + 16) = 0;
  uint64_t v27 = swift_allocObject();
  *(unsigned char *)(v27 + 16) = 0;
  uint64_t v28 = sub_18AF33890();
  *(void *)(v28 + 16) = 0;
  swift_retain();
  CKFetchRecordZoneChangesOperation.recordWasChangedBlock.setter((uint64_t)sub_18AF9E214, v24, v29, v30, v31, v32, v33, v34, v57, a8, v65, a6, a7, v80, v84, v88, v92, v96, v100,
    (uint64_t)v104,
    v108,
    v112);
  swift_retain();
  CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.setter((uint64_t)sub_18AF9E224, v25, v35, v36, v37, v38, v39, v40, v58, v62, v66, v71, v76, v81, v85, v89, v93, v97, v101,
    v105,
    v109,
    v113);
  uint64_t v41 = (void *)sub_18AF31268();
  v41[2] = v19;
  v41[3] = v26;
  v41[4] = v27;
  void v41[5] = v28;
  id v42 = v19;
  swift_retain();
  swift_retain();
  swift_retain();
  CKFetchRecordZoneChangesOperation.recordZoneFetchResultBlock.setter((uint64_t)sub_18AF9E27C, (uint64_t)v41, v43, v44, v45, v46, v47, v48, v59, v63, v67, v72, v77, v82, v86, v90, v94, v98, v102,
    v106,
    v110,
    v114);
  id v49 = (void *)swift_allocObject();
  v49[2] = v64;
  v49[3] = a9;
  v49[4] = v28;
  v49[5] = v26;
  v49[6] = v24;
  v49[7] = v25;
  v49[8] = v27;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.setter((uint64_t)sub_18AF9E30C, (uint64_t)v49, v50, v51, v52, v53, v54, v55, v60, v64, v68, v73, v78, v83, v87, v91, v95, v99, v103,
    v107,
    v111,
    v115);
  objc_msgSend(v69, sel__scheduleConvenienceOperation_wrappingDatabase_convenienceConfiguration_, v23, v74, v79);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t CKDatabase.recordZoneChanges(inZoneWith:since:desiredKeys:resultsLimit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 40) = a4;
  *(void *)(v6 + 48) = v5;
  *(unsigned char *)(v6 + 88) = a5;
  *(void *)(v6 + 24) = a2;
  *(void *)(v6 + 32) = a3;
  *(void *)(v6 + 16) = a1;
  return sub_18AF18508((uint64_t)sub_18AF9B560);
}

uint64_t sub_18AF9B560()
{
  sub_18AF2A56C();
  id v1 = (void *)v0[6];
  v0[7] = objc_msgSend(v1, sel_implementation);
  id v2 = objc_msgSend(v1, sel_container);
  id v3 = objc_msgSend(v2, sel_convenienceConfiguration);
  v0[8] = v3;

  uint64_t v4 = (void *)swift_task_alloc();
  v0[9] = v4;
  void *v4 = v0;
  v4[1] = sub_18AF9B664;
  uint64_t v5 = sub_18AF9ECF0();
  return sub_18AF9B7F4(v5, v6, v7, v8, v9, v10, (uint64_t)v3);
}

uint64_t sub_18AF9B664()
{
  sub_18AF19FAC();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16D18();
  void *v6 = v5;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_18AF16AA0();
    return MEMORY[0x1F4188298](v7, v8, v9);
  }
  else
  {
    uint64_t v10 = *(void **)(v3 + 56);

    uint64_t v11 = sub_18AF35510();
    return v12(v11);
  }
}

uint64_t sub_18AF9B794()
{
  sub_18AF339B8();
  id v1 = *(void **)(v0 + 56);

  sub_18AF299BC();
  return v2();
}

uint64_t sub_18AF9B7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 88) = a7;
  *(void *)(v8 + 96) = v7;
  *(void *)(v8 + 72) = a4;
  *(void *)(v8 + 80) = a6;
  *(unsigned char *)(v8 + 41) = a5;
  *(void *)(v8 + 56) = a2;
  *(void *)(v8 + 64) = a3;
  *(void *)(v8 + 48) = a1;
  return sub_18AF18508((uint64_t)sub_18AF9B81C);
}

uint64_t sub_18AF9B81C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_18AF30E30();
  sub_18AF1A048();
  uint64_t v14 = *(void *)(v12 + 88);
  uint64_t v13 = *(void *)(v12 + 96);
  uint64_t v16 = *(void *)(v12 + 72);
  uint64_t v15 = *(void *)(v12 + 80);
  char v17 = *(unsigned char *)(v12 + 41);
  uint64_t v19 = *(void *)(v12 + 56);
  uint64_t v18 = *(void *)(v12 + 64);
  uint64_t v20 = *(void *)(v12 + 48);
  uint64_t v21 = swift_task_alloc();
  *(void *)(v12 + 104) = v21;
  *(void *)(v21 + 16) = v13;
  *(void *)(v21 + 24) = v20;
  *(void *)(v21 + 32) = v19;
  *(void *)(v21 + 40) = v18;
  *(void *)(v21 + 48) = v16;
  *(unsigned char *)(v21 + 56) = v17 & 1;
  *(void *)(v21 + 64) = v15;
  *(void *)(v21 + 72) = v14;
  uint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v12 + 112) = v22;
  sub_18AF161EC(&qword_1E9124DD0);
  sub_18AF16B64();
  *uint64_t v22 = v23;
  v22[1] = sub_18AF9B930;
  sub_18AF2A5D4();
  sub_18AF16AA0();
  sub_18AF1A024();
  sub_18AF37A90();
  return MEMORY[0x1F4188160](v24, v25, v26, v27, v28, v29, v30, v31, v12 + 16, a10, a11, a12);
}

uint64_t sub_18AF9B930()
{
  sub_18AF339B8();
  sub_18AF184F0();
  uint64_t v3 = v2;
  sub_18AF16D18();
  void *v4 = v3;
  uint64_t v5 = *v1;
  sub_18AF16D18();
  void *v6 = v5;
  *(void *)(v3 + 120) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  sub_18AF16AA0();
  return MEMORY[0x1F4188298](v7, v8, v9);
}

uint64_t sub_18AF9BA18()
{
  sub_18AF339B8();
  swift_task_dealloc();
  sub_18AF16D48();
  return v0();
}

void CKDatabase.DatabaseChange.Modification.hash(into:)()
{
  id v1 = *v0;
  NSObject.hash(into:)();
}

uint64_t static CKDatabase.DatabaseChange.Deletion.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a2 + 8);
  sub_18AF34EA0(0, (unint64_t *)&unk_1E9125600);
  return sub_18AF3A858() & (v2 == v3);
}

void CKDatabase.DatabaseChange.Deletion.hash(into:)()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 8);
  id v2 = *(id *)v0;
  NSObject.hash(into:)();

  Hasher._combine(_:)(v1);
}

Swift::Int CKDatabase.DatabaseChange.Deletion.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((unsigned __int8 *)v0 + 8);
  sub_18AF3A2D4();
  id v3 = v1;
  sub_18AF22668();

  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int sub_18AF9BBF8()
{
  Swift::UInt v1 = *(void **)v0;
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  id v3 = v1;
  NSObject.hash(into:)();

  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t _sSo10CKDatabaseC8CloudKitE14DatabaseChangeO12ModificationV2eeoiySbAG_AGtFZ_0()
{
  return sub_18AF3A858() & 1;
}

Swift::Int _sSo10CKDatabaseC8CloudKitE14DatabaseChangeO12ModificationV9hashValueSivg_0()
{
  Swift::UInt v1 = *v0;
  sub_18AF3A2D4();
  id v2 = v1;
  sub_18AF22668();

  return Hasher._finalize()();
}

Swift::Int sub_18AF9BCE8()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = v1;
  sub_18AF22668();

  return Hasher._finalize()();
}

uint64_t static CKDatabase.RecordZoneChange.Deletion.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  sub_18AF34EA0(0, (unint64_t *)&unk_1E9125600);
  if ((static NSObject.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  if (v2 == v4 && v3 == v5) {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t CKDatabase.RecordZoneChange.Deletion.hash(into:)()
{
  id v1 = *v0;
  NSObject.hash(into:)();

  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int CKDatabase.RecordZoneChange.Deletion.hashValue.getter()
{
  id v1 = *v0;
  sub_18AF3A2D4();
  id v2 = v1;
  sub_18AF22668();

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_18AF9BED0()
{
  id v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = v1;
  NSObject.hash(into:)();

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t CKDatabase.DatabaseChange.Modification.description.getter()
{
  id v1 = *v0;
  sub_18AF9ECE0();
  v2._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  sub_18AF43430();
  id v3 = v1;
  id v4 = objc_msgSend(v3, sel_description);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  v8._uint64_t countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);

  swift_bridgeObjectRelease();
  sub_18AF39404();
  return v10;
}

uint64_t CKDatabase.DatabaseChange.Deletion.description.getter()
{
  id v1 = *v0;
  _StringGuts.grow(_:)(22);
  v2._uint64_t countAndFlagsBits = 60;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  sub_18AF43430();
  id v4 = v1;
  id v5 = objc_msgSend(v4, sel_description);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v8 = v7;

  v9._uint64_t countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);

  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 0x3D6E6F7361657220;
  v10._object = (void *)0xE800000000000000;
  String.append(_:)(v10);
  _print_unlocked<A, B>(_:_:)();
  v11._uint64_t countAndFlagsBits = 62;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return 0;
}

uint64_t CKDatabase.RecordZoneChange.Modification.description.getter()
{
  id v1 = *v0;
  sub_18AF9ECE0();
  v2._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = sub_18AF307DC() & 0xFFFFFFFFFFFFLL | 0x3D64000000000000;
  v3._object = (void *)0xE800000000000000;
  String.append(_:)(v3);
  id v4 = objc_msgSend(v1, sel_conciseDescription);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  v8._uint64_t countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  sub_18AF39404();
  return v10;
}

uint64_t CKDatabase.RecordZoneChange.Deletion.description.getter()
{
  Swift::String v2 = *(void **)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  Swift::String v3 = *(void **)(v0 + 16);
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  sub_18AF9ECE0();
  v4._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = sub_18AF307DC() & 0xFFFFFFFFFFFFLL | 0x4964000000000000;
  v5._object = (void *)0xEA00000000003D44;
  String.append(_:)(v5);
  id v6 = v2;
  id v7 = objc_msgSend(v6, sel_description);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  v11._uint64_t countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);

  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = sub_18AF307DC() & 0xFFFFFFFFFFFFLL | 0x5464000000000000;
  v12._object = (void *)0xEC0000003D657079;
  String.append(_:)(v12);
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = v1;
  v13._object = v3;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  sub_18AF39404();
  return 0;
}

uint64_t sub_18AF9C318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void v16[2] = a7;
  v16[3] = a8;
  v16[1] = a2;
  uint64_t v9 = sub_18AF161EC(&qword_1E9124F98);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __n128 v12 = MEMORY[0x1F4188790](v9);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))((char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9, v12);
  unint64_t v13 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v14 + v13, (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  sub_18AF978C0();
  return swift_release();
}

uint64_t sub_18AF9C490(void *a1, void *a2, char a3, uint64_t a4)
{
  swift_beginAccess();
  id v8 = a1;
  sub_18AF84C94(a2);
  sub_18AFA756C();
  uint64_t v9 = *(void *)(*(void *)(a4 + 16) + 16);
  sub_18AFA769C(v9);
  uint64_t v10 = *(void *)(a4 + 16);
  *(void *)(v10 + 16) = v9 + 1;
  uint64_t v11 = v10 + 24 * v9;
  *(void *)(v11 + 32) = v8;
  *(void *)(v11 + 40) = a2;
  *(unsigned char *)(v11 + 48) = a3 & 1;
  return swift_endAccess();
}

void sub_18AF9C53C(void *a1, char a2, uint64_t a3, void (*a4)(void *, void *, uint64_t))
{
  uint64_t v7 = a2 & 1;
  if (a2)
  {
    id v8 = 0;
    uint64_t v9 = a1;
  }
  else
  {
    sub_18AF4746C();
    uint64_t v9 = *(void **)(v4 + 16);
    swift_bridgeObjectRetain();
    id v8 = a1;
  }
  sub_18AF84C94(a1);
  a4(v9, v8, v7);
  sub_18AF9E910(v9, v8, v7);
}

uint64_t sub_18AF9C5D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void v16[2] = a7;
  v16[3] = a8;
  v16[1] = a2;
  uint64_t v9 = sub_18AF161EC(&qword_1E91268A8);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __n128 v12 = MEMORY[0x1F4188790](v9);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))((char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9, v12);
  unint64_t v13 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v14 + v13, (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  sub_18AF98000();
  return swift_release();
}

uint64_t sub_18AF9C74C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v15[0] = a2;
  v15[1] = a7;
  uint64_t v8 = sub_18AF161EC(&qword_1E91268A8);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __n128 v11 = MEMORY[0x1F4188790](v8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))((char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8, v11);
  unint64_t v12 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v13 + v12, (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  sub_18AF981DC();
  return swift_release();
}

uint64_t sub_18AF9C8BC(id a1, void *a2, char a3)
{
  if (a3)
  {
    id v5 = a1;
    sub_18AF161EC(&qword_1E91268A8);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    id v3 = a2;
    swift_bridgeObjectRetain();
    sub_18AF161EC(&qword_1E91268A8);
    return CheckedContinuation.resume(returning:)();
  }
}

id sub_18AF9C93C(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  sub_18AF47634();
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  sub_18AF34EA0(0, v4);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v6, *a4, isa);

  return v8;
}

void sub_18AF9C9C4(void *a1, char a2, uint64_t a3, void (*a4)(void *, uint64_t))
{
  uint64_t v6 = a2 & 1;
  if (a2)
  {
    uint64_t v7 = a1;
    id v8 = a1;
  }
  else
  {
    sub_18AF4746C();
    uint64_t v7 = *(void **)(v4 + 16);
    swift_bridgeObjectRetain();
  }
  a4(v7, v6);
  sub_18AF84F44(v7, v6);
}

void sub_18AF9CA40(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), void (*a6)(uint64_t))
{
  swift_beginAccess();
  id v9 = a1;
  uint64_t v10 = sub_18AF30488();
  a5(v10);
  uint64_t v11 = sub_18AF30488();
  a6(v11);
  swift_endAccess();
}

void sub_18AF9CAD8(void *a1, char a2, uint64_t a3, uint64_t a4, void (*a5)(void *, uint64_t, uint64_t))
{
  uint64_t v6 = a2 & 1;
  if (a2)
  {
    uint64_t v7 = a1;
    id v8 = a1;
    uint64_t v9 = 0;
  }
  else
  {
    swift_beginAccess();
    uint64_t v7 = *(void **)(a3 + 16);
    swift_beginAccess();
    uint64_t v9 = *(void *)(a4 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  a5(v7, v9, v6);
  sub_18AF9EA84(v7, v9, v6);
}

uint64_t sub_18AF9CBA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v15[0] = a2;
  v15[1] = a7;
  uint64_t v8 = sub_18AF161EC((uint64_t *)&unk_1E9124FC8);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __n128 v11 = MEMORY[0x1F4188790](v8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))((char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8, v11);
  unint64_t v12 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v13 + v12, (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  sub_18AF99080();
  return swift_release();
}

void sub_18AF9CD14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  sub_18AF40290();
  uint64_t v33 = v9;
  uint64_t v34 = v10;
  uint64_t v31 = v11;
  uint64_t v32 = v12;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = sub_18AF161EC(v21);
  sub_18AF22CB0();
  uint64_t v24 = v23;
  uint64_t v26 = *(void *)(v25 + 64);
  __n128 v28 = MEMORY[0x1F4188790](v27);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v24 + 16))((char *)&v31 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0), v20, v22, v28);
  unint64_t v29 = (*(unsigned __int8 *)(v24 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  uint64_t v30 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v24 + 32))(v30 + v29, (char *)&v31 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0), v22);
  a9(v18, v16, v14, v32, v30);
  swift_release();
  sub_18AF32064();
}

uint64_t sub_18AF9CE38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t), void (*a7)(uint64_t))
{
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_18AF30488();
  a6(v9);
  uint64_t v10 = sub_18AF30488();
  a7(v10);
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

void sub_18AF9CEE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (*a10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  sub_18AF40290();
  uint64_t v35 = v10;
  uint64_t v36 = v11;
  uint64_t v33 = v12;
  uint64_t v34 = v13;
  uint64_t v32 = v14;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = sub_18AF161EC(v21);
  sub_18AF22CB0();
  uint64_t v24 = v23;
  uint64_t v26 = *(void *)(v25 + 64);
  __n128 v28 = MEMORY[0x1F4188790](v27);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v24 + 16))((char *)&v31 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0), v20, v22, v28);
  unint64_t v29 = (*(unsigned __int8 *)(v24 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  uint64_t v30 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v24 + 32))(v30 + v29, (char *)&v31 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0), v22);
  a10(v18, v16, v32, v34, a9, v30);
  swift_release();
  sub_18AF32064();
}

uint64_t sub_18AF9D00C(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  if (a3)
  {
    id v7 = a1;
    sub_18AF161EC(a5);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_18AF161EC(a5);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_18AF9D08C(void *a1, uint64_t a2)
{
  swift_beginAccess();
  id v4 = a1;
  sub_18AFA7584();
  uint64_t v5 = *(void *)(*(void *)(a2 + 16) + 16);
  sub_18AFA76B4(v5);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(v6 + 16) = v5 + 1;
  *(void *)(v6 + 8 * v5 + 32) = v4;
  return swift_endAccess();
}

uint64_t sub_18AF9D110(void *a1, uint64_t a2)
{
  swift_beginAccess();
  id v4 = a1;
  sub_18AFA759C();
  uint64_t v5 = *(void *)(*(void *)(a2 + 16) + 16);
  sub_18AFA76CC(v5);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(v6 + 16) = v5 + 1;
  uint64_t v7 = v6 + 16 * v5;
  *(void *)(v7 + 32) = v4;
  *(unsigned char *)(v7 + 40) = 0;
  return swift_endAccess();
}

uint64_t sub_18AF9D198(void *a1, uint64_t a2)
{
  swift_beginAccess();
  id v4 = a1;
  sub_18AFA759C();
  uint64_t v5 = *(void *)(*(void *)(a2 + 16) + 16);
  sub_18AFA76CC(v5);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(v6 + 16) = v5 + 1;
  uint64_t v7 = v6 + 16 * v5;
  *(void *)(v7 + 32) = v4;
  *(unsigned char *)(v7 + 40) = 1;
  return swift_endAccess();
}

uint64_t sub_18AF9D224(void *a1, uint64_t a2)
{
  swift_beginAccess();
  id v4 = a1;
  sub_18AFA759C();
  uint64_t v5 = *(void *)(*(void *)(a2 + 16) + 16);
  sub_18AFA76CC(v5);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(v6 + 16) = v5 + 1;
  uint64_t v7 = v6 + 16 * v5;
  *(void *)(v7 + 32) = v4;
  *(unsigned char *)(v7 + 40) = 2;
  return swift_endAccess();
}

void sub_18AF9D2B0(void *a1, unsigned int a2, uint64_t a3, uint64_t a4, void (*a5)(void *, uint64_t, void *, uint64_t))
{
  if ((a2 & 0x100) != 0)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = a1;
  }
  else
  {
    swift_beginAccess();
    uint64_t v11 = *(void **)(a3 + 16);
    swift_beginAccess();
    uint64_t v8 = *(void *)(a4 + 16);
    uint64_t v10 = a2 & 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v9 = a1;
  }
  sub_18AF9E450(a1);
  a5(v11, v8, v9, v10 & 0xFFFFFEFF | (((a2 >> 8) & 1) << 8));
  sub_18AF9E45C(v11, v8, v9, v10, BYTE1(a2) & 1);
}

uint64_t sub_18AF9D3BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v19 = a2;
  uint64_t v20 = a7;
  char v11 = a5 & 1;
  uint64_t v12 = sub_18AF161EC(&qword_1E9125388);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __n128 v15 = MEMORY[0x1F4188790](v12);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))((char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12, v15);
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v17 + v16, (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  sub_18AF9A56C(a3, a4, v11, a6, v20);
  return swift_release();
}

void sub_18AF9D52C(void *a1, void *a2, char a3)
{
  swift_beginAccess();
  sub_18AF84C94(a2);
  id v6 = a1;
  sub_18AFF3728((uint64_t)a2, a3 & 1, (uint64_t)v6);
  swift_endAccess();
}

void sub_18AF9D5B4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  id v8 = a1;
  swift_bridgeObjectRetain_n();
  id v9 = v8;
  sub_18AFA75B4();
  uint64_t v10 = *(void *)(*(void *)(a4 + 16) + 16);
  sub_18AFA76E4(v10);
  uint64_t v11 = *(void *)(a4 + 16);
  *(void *)(v11 + 16) = v10 + 1;
  uint64_t v12 = (void *)(v11 + 24 * v10);
  v12[4] = v9;
  v12[5] = a2;
  v12[6] = a3;
  swift_endAccess();
  swift_bridgeObjectRelease();
}

void sub_18AF9D670(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18AF34EA0(0, (unint64_t *)&unk_1E9125600);
  if (static NSObject.== infix(_:_:)())
  {
    if ((a5 & 0x100) != 0)
    {
      swift_beginAccess();
      unint64_t v16 = *(void **)(a9 + 16);
      *(void *)(a9 + 16) = a2;
      id v17 = a2;
    }
    else
    {
      uint64_t v13 = (void *)(a7 + 16);
      swift_beginAccess();
      uint64_t v14 = *(void **)(a7 + 16);
      *uint64_t v13 = a2;
      id v15 = a2;

      swift_beginAccess();
      *(unsigned char *)(a8 + 16) = a5 & 1;
    }
  }
}

void sub_18AF9D774(void *a1, char a2, void (*a3)(void *, uint64_t, void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a2)
  {
    id v17 = a1;
    a3(a1, 0, 0, 256);
    sub_18AF53C0C(a1, 1);
  }
  else
  {
    swift_beginAccess();
    uint64_t v14 = *(void **)(a5 + 16);
    if (v14)
    {
      id v15 = v14;
      a3(v14, 0, 0, 256);
    }
    else
    {
      swift_beginAccess();
      uint64_t v18 = *(void **)(a6 + 16);
      if (v18)
      {
        swift_beginAccess();
        uint64_t v19 = *(void **)(a7 + 16);
        swift_beginAccess();
        uint64_t v20 = *(void *)(a8 + 16);
        swift_beginAccess();
        uint64_t v21 = *(unsigned __int8 *)(a9 + 16);
        id v22 = v18;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        a3(v19, v20, v18, v21);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        type metadata accessor for CKError(0);
        sub_18AF8EAA4(MEMORY[0x1E4FBC860]);
        sub_18AF62B54();
        _BridgedStoredNSError.init(_:userInfo:)();
        a3(v23, 0, 0, 256);
      }
    }
  }
}

uint64_t sub_18AF9D998(uint64_t a1, uint64_t a2, void *a3, void *a4, Swift::Int a5, NSData *a6, char a7, void *a8, void (*a9)(uint64_t a1, void *a2, void *a3))
{
  uint64_t v24 = a2;
  uint64_t v25 = a8;
  uint64_t v23 = a6;
  char v13 = a7 & 1;
  uint64_t v14 = sub_18AF161EC(&qword_1E9124DD8);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __n128 v17 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))(v18, a1, v14, v17);
  unint64_t v19 = (*(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v20 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v20 + v19, v18, v14);
  sub_18AF9B1DC(a3, a4, a5, v23, v13, v25, a9, (uint64_t)sub_18AF9E198, v20);
  return swift_release();
}

uint64_t sub_18AF9DB1C(void *a1, uint64_t a2, void *a3, __int16 a4, uint64_t a5, uint64_t *a6)
{
  if ((a4 & 0x100) != 0)
  {
    id v10 = a1;
    sub_18AF161EC(a6);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v8 = a3;
    sub_18AF161EC(a6);
    return CheckedContinuation.resume(returning:)();
  }
}

unint64_t sub_18AF9DBB8()
{
  unint64_t result = qword_1E9126840;
  if (!qword_1E9126840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126840);
  }
  return result;
}

unint64_t sub_18AF9DC08()
{
  unint64_t result = qword_1E9124D80;
  if (!qword_1E9124D80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9124D80);
  }
  return result;
}

unint64_t sub_18AF9DC58()
{
  unint64_t result = qword_1E9126848;
  if (!qword_1E9126848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126848);
  }
  return result;
}

unint64_t sub_18AF9DCA8()
{
  unint64_t result = qword_1E9126850;
  if (!qword_1E9126850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126850);
  }
  return result;
}

unint64_t sub_18AF9DCF8()
{
  unint64_t result = qword_1E9126858;
  if (!qword_1E9126858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9126858);
  }
  return result;
}

void type metadata accessor for CKDatabase.DatabaseChange()
{
}

void type metadata accessor for CKDatabase.DatabaseChange.Modification()
{
}

uint64_t _s14DatabaseChangeO8DeletionVwCP(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  id v4 = v3;
  return a1;
}

uint64_t _s14DatabaseChangeO8DeletionVwca(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t _s14DatabaseChangeO8DeletionVwtk(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t _s14DatabaseChangeO8DeletionVwta(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t _s14DatabaseChangeO8DeletionVwet(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 9))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s14DatabaseChangeO8DeletionVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for CKDatabase.DatabaseChange.Deletion()
{
}

unsigned char *_s14DatabaseChangeO8DeletionV6ReasonOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18AF9DFC4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for CKDatabase.DatabaseChange.Deletion.Reason()
{
}

void type metadata accessor for CKDatabase.RecordZoneChange()
{
}

void type metadata accessor for CKDatabase.RecordZoneChange.Modification()
{
}

uint64_t _s16RecordZoneChangeO8DeletionVwxx(id *a1)
{
  return swift_bridgeObjectRelease();
}

void *_s16RecordZoneChangeO8DeletionVwCP_0(void *a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  a1[2] = *(void *)(a2 + 16);
  id v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s16RecordZoneChangeO8DeletionVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s16RecordZoneChangeO8DeletionVwta(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v5 = a2[2];
  *(void *)(a1 + 8) = a2[1];
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for CKDatabase.RecordZoneChange.Deletion()
{
}

void type metadata accessor for CKDatabase.RecordZoneChange.ZoneAttributesModification()
{
}

uint64_t sub_18AF9E154(uint64_t a1)
{
  return sub_18AF9D998(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(NSData **)(v1 + 48), *(unsigned char *)(v1 + 56), *(void **)(v1 + 64), *(void (**)(uint64_t, void *, void *))(v1 + 72));
}

uint64_t sub_18AF9E18C()
{
  return sub_18AF9EB58(&qword_1E9124DD8);
}

uint64_t sub_18AF9E198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18AF9E370(a1, a2, a3, a4, &qword_1E9124DD8);
}

uint64_t sub_18AF9E1A4()
{
  uint64_t v1 = sub_18AF473C4();

  return MEMORY[0x1F4186498](v1, v2, v3);
}

uint64_t sub_18AF9E1D4()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

uint64_t sub_18AF9E1E4()
{
  uint64_t v1 = sub_18AF473C4();

  return MEMORY[0x1F4186498](v1, v2, v3);
}

void sub_18AF9E214()
{
  sub_18AF9ED2C();
  sub_18AF9D52C(v0, v1, v2);
}

void sub_18AF9E224(void *a1, uint64_t a2, uint64_t a3)
{
  sub_18AF9D5B4(a1, a2, a3, v3);
}

uint64_t sub_18AF9E22C()
{
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

void sub_18AF9E27C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  sub_18AF9D670(a1, a2, a3, a4, a5 & 0x1FF, v5[2], v5[3], v5[4], v5[5]);
}

uint64_t sub_18AF9E2AC()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

void sub_18AF9E30C(void *a1, char a2)
{
  sub_18AF9D774(a1, a2 & 1, *(void (**)(void *, uint64_t, void *, uint64_t))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64));
}

uint64_t sub_18AF9E344(uint64_t a1)
{
  return sub_18AF9D3BC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(unsigned char *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_18AF9E358()
{
  return sub_18AF9EB58(&qword_1E9125388);
}

uint64_t sub_18AF9E364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18AF9E370(a1, a2, a3, a4, &qword_1E9125388);
}

uint64_t sub_18AF9E370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  sub_18AF47634();
  __int16 v11 = v10 & 0x1FF;
  uint64_t v13 = sub_18AF161EC(v12);
  sub_18AF16E94(v13);
  return sub_18AF9DB1C(v8, v7, v6, v11, v5 + ((*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)), a5);
}

uint64_t sub_18AF9E3E4()
{
  swift_bridgeObjectRelease();
  uint64_t v0 = sub_18AF473C4();

  return MEMORY[0x1F4186498](v0, v1, v2);
}

uint64_t sub_18AF9E414(void *a1)
{
  return sub_18AF9D08C(a1, v1);
}

uint64_t sub_18AF9E41C(void *a1)
{
  return sub_18AF9D110(a1, v1);
}

uint64_t sub_18AF9E424(void *a1)
{
  return sub_18AF9D198(a1, v1);
}

uint64_t sub_18AF9E42C(void *a1)
{
  return sub_18AF9D224(a1, v1);
}

void sub_18AF9E438(void *a1, __int16 a2)
{
  sub_18AF9D2B0(a1, a2 & 0x1FF, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(void *, uint64_t, void *, uint64_t))(v2 + 32));
}

id sub_18AF9E450(id a1)
{
  return a1;
}

void sub_18AF9E45C(void *a1, uint64_t a2, void *a3, uint64_t a4, char a5)
{
  if (a5)
  {
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1 = a3;
  }
}

void sub_18AF9E4BC(uint64_t a1)
{
}

uint64_t sub_18AF9E4F8()
{
  return sub_18AF9EB58(&qword_1E9124D78);
}

uint64_t sub_18AF9E504(void *a1, uint64_t a2, char a3)
{
  return sub_18AF9E65C(a1, a2, a3, &qword_1E9124D78);
}

uint64_t sub_18AF9E510(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_18AF9CE38(a1, a2, a3, a4 & 1, v4, (void (*)(uint64_t))sub_18AF85038, (void (*)(uint64_t))sub_18AFF3638);
}

uint64_t sub_18AF9E558(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_18AF9CE38(a1, a2, a3, a4 & 1, v4, (void (*)(uint64_t))sub_18AF9E5A8, (void (*)(uint64_t))sub_18AFF3658);
}

id sub_18AF9E5A8(id result, char a2)
{
  if (a2) {
    return result;
  }
  return result;
}

void sub_18AF9E5B4(uint64_t a1)
{
  sub_18AF9CD14(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)&qword_1E9126890, (uint64_t)&unk_1ED7F3288, (uint64_t)sub_18AF9E620, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_18AF99854);
}

uint64_t sub_18AF9E614()
{
  return sub_18AF9EB58(&qword_1E9126890);
}

uint64_t sub_18AF9E620(void *a1, char a2)
{
  return sub_18AF9E7CC(a1, a2, &qword_1E9126890);
}

uint64_t sub_18AF9E630(uint64_t a1)
{
  return sub_18AF9CBA4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_18AF9E644()
{
  return sub_18AF9EB58((uint64_t *)&unk_1E9124FC8);
}

uint64_t sub_18AF9E650(void *a1, uint64_t a2, char a3)
{
  return sub_18AF9E65C(a1, a2, a3, (uint64_t *)&unk_1E9124FC8);
}

uint64_t sub_18AF9E65C(void *a1, uint64_t a2, char a3, uint64_t *a4)
{
  char v8 = a3 & 1;
  uint64_t v9 = sub_18AF161EC(a4);
  sub_18AF16E94(v9);
  return sub_18AF9D00C(a1, a2, v8, v4 + ((*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), a4);
}

void sub_18AF9E6C8()
{
  sub_18AF9ED2C();
  sub_18AF9CA40(v0, v1, v2, v3, (void (*)(uint64_t))sub_18AF84C94, (void (*)(uint64_t))sub_18AFF3608);
}

void sub_18AF9E70C()
{
  sub_18AF9ED2C();
  sub_18AF9CA40(v0, v1, v2, v3, (void (*)(uint64_t))sub_18AF9E5A8, (void (*)(uint64_t))sub_18AFF3620);
}

void sub_18AF9E754(uint64_t a1)
{
  sub_18AF9CD14(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)&qword_1E9124D28, (uint64_t)&unk_1ED7F3378, (uint64_t)sub_18AF9E7C0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_18AF98B5C);
}

uint64_t sub_18AF9E7B4()
{
  return sub_18AF9EB58(&qword_1E9124D28);
}

uint64_t sub_18AF9E7C0(void *a1, char a2)
{
  return sub_18AF9E7CC(a1, a2, &qword_1E9124D28);
}

uint64_t sub_18AF9E7CC(void *a1, char a2, uint64_t *a3)
{
  char v6 = a2 & 1;
  uint64_t v7 = sub_18AF161EC(a3);
  sub_18AF16E94(v7);
  return sub_18AF84940(a1, v6, v3 + ((*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), a3);
}

uint64_t sub_18AF9E82C(uint64_t a1)
{
  return sub_18AF9C74C(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_18AF9E83C()
{
  return sub_18AF9EB58(&qword_1E91268A8);
}

uint64_t sub_18AF9E84C(void *a1, void *a2, char a3)
{
  char v5 = a3 & 1;
  uint64_t v6 = sub_18AF161EC(&qword_1E91268A8);
  sub_18AF16E94(v6);
  return sub_18AF9C8BC(a1, a2, v5);
}

uint64_t sub_18AF9E8AC(uint64_t a1)
{
  return sub_18AF9C5D4(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8]);
}

uint64_t sub_18AF9E8C0()
{
  return sub_18AF9EB58(&qword_1E91268A8);
}

uint64_t sub_18AF9E8CC()
{
  sub_18AF9ED2C();
  return sub_18AF9C490(v0, v1, v2, v3);
}

void sub_18AF9E8EC(void *a1, char a2)
{
  sub_18AF9C53C(a1, a2 & 1, *(void *)(v2 + 16), *(void (**)(void *, void *, uint64_t))(v2 + 24));
}

void sub_18AF9E910(void *a1, void *a2, char a3)
{
  if (a3)
  {
  }
  else
  {
    swift_bridgeObjectRelease();
    a1 = a2;
  }
}

uint64_t sub_18AF9E960(uint64_t a1)
{
  return sub_18AF9C318(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned __int8 *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t sub_18AF9E974()
{
  return sub_18AF9EB58(&qword_1E9124F98);
}

uint64_t sub_18AF9E980(void *a1, uint64_t a2, char a3)
{
  return sub_18AF9E65C(a1, a2, a3, &qword_1E9124F98);
}

void sub_18AF9E98C()
{
  sub_18AF9ED2C();
  sub_18AF9CA40(v0, v1, v2, v3, (void (*)(uint64_t))sub_18AF85038, (void (*)(uint64_t))sub_18AFF35D8);
}

void sub_18AF9E9D0()
{
  sub_18AF9ED2C();
  sub_18AF9CA40(v0, v1, v2, v3, (void (*)(uint64_t))sub_18AF9E5A8, (void (*)(uint64_t))sub_18AFF35F0);
}

uint64_t sub_18AF9EA18()
{
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

void sub_18AF9EA60(void *a1, char a2)
{
  sub_18AF9CAD8(a1, a2 & 1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(void *, uint64_t, uint64_t))(v2 + 32));
}

void sub_18AF9EA84(void *a1, uint64_t a2, char a3)
{
  if (a3)
  {
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}